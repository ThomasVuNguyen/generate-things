[
  {
    "fruit": "apple",
    "openscad_code": "// Realistic Apple - Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n// Overall dimensions\napple_radius = 25;\nstem_length = 12;\nstem_radius = 2;\n\n// Apple body with indentations\nmodule apple_body() {\n    // Main apple shape - slightly flattened sphere\n    scale([1, 1, 0.9])\n    sphere(r = apple_radius, $fn = 64);\n    \n    // Top indentation for stem\n    translate([0, 0, apple_radius * 0.9])\n    rotate_extrude(angle = 360, $fn = 32)\n    translate([0, 0])\n    polygon(points = [[0, 0], [apple_radius * 0.2, -apple_radius * 0.3], [0, -apple_radius * 0.3]]);\n    \n    // Bottom indentation\n    translate([0, 0, -apple_radius * 0.9])\n    rotate_extrude(angle = 360, $fn = 32)\n    translate([0, 0])\n    polygon(points = [[0, 0], [apple_radius * 0.15, apple_radius * 0.2], [0, apple_radius * 0.2]]);\n}\n\n// Apple stem with slight curve\nmodule apple_stem() {\n    // Main stem body\n    translate([0, 0, apple_radius * 0.9 + stem_length * 0.5])\n    rotate([0, 5, 0])\n    cylinder(h = stem_length, r = stem_radius, $fn = 16);\n    \n    // Stem base flare\n    translate([0, 0, apple_radius * 0.9])\n    cylinder(h = 2, r1 = stem_radius * 1.5, r2 = stem_radius, $fn = 16);\n}\n\n// Apple leaf\nmodule apple_leaf() {\n    translate([stem_radius * 1.5, 0, apple_radius * 0.9 + stem_length * 0.8])\n    rotate([0, 30, 45])\n    scale([1, 0.6, 0.1])\n    sphere(r = 8, $fn = 32);\n    \n    // Leaf stem\n    translate([stem_radius * 1.5, 0, apple_radius * 0.9 + stem_length * 0.8])\n    rotate([0, 30, 45])\n    translate([8, 0, 0])\n    cylinder(h = 4, r = 0.5, $fn = 8);\n}\n\n// Apple calyx (bottom star pattern)\nmodule apple_calyx() {\n    difference() {\n        // Base shape\n        translate([0, 0, -apple_radius * 0.85])\n        cylinder(h = 2, r = apple_radius * 0.15, $fn = 32);\n        \n        // Star pattern cuts\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([apple_radius * 0.08, 0, -apple_radius * 0.87])\n            cube([apple_radius * 0.12, 2, 4], center = true);\n        }\n    }\n}\n\n// Apple surface details - subtle bumps\nmodule apple_surface() {\n    // No actual surface details for 3D printing simplicity\n    // Could add bump texture here if needed\n}\n\n// Main apple assembly\nunion() {\n    // Main apple body\n    apple_body();\n    \n    // Stem assembly\n    union() {\n        apple_stem();\n        apple_leaf();\n    }\n    \n    // Calyx at bottom\n    apple_calyx();\n    \n    // Optional: Small imperfections for realism\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([apple_radius * 0.7, 0, apple_radius * 0.2])\n        sphere(r = 1.5, $fn = 8);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "pear",
    "openscad_code": "// Realistic Pear - Medium Complexity\n// 3D printable, ~70mm height\n\npear_size = 70;\nstem_length = 8;\nstem_diameter = 3;\n\nmodule pear_body() {\n    // Main pear body - combination of spheres with tapering\n    union() {\n        // Upper bulb (shoulders)\n        translate([0, 0, 25])\n            scale([1, 1, 0.8])\n            sphere(d=35, $fn=60);\n        \n        // Lower bulb (bulbous bottom)\n        translate([0, 0, 8])\n            scale([1.2, 1.2, 1.1])\n            sphere(d=40, $fn=60);\n        \n        // Tapering bottom\n        translate([0, 0, -5])\n            scale([0.7, 0.7, 0.6])\n            sphere(d=30, $fn=60);\n    }\n}\n\nmodule stem() {\n    // Main stem cylinder\n    translate([0, 0, 38])\n        cylinder(h=stem_length, d=stem_diameter, $fn=20);\n    \n    // Stem flare at base\n    translate([0, 0, 38])\n        cylinder(h=2, d1=stem_diameter*1.5, d2=stem_diameter, $fn=20);\n}\n\nmodule leaf() {\n    // Single leaf shape using scaled sphere and cube\n    translate([0, 12, 42])\n        rotate([0, -20, 30])\n        union() {\n            // Leaf body\n            scale([2, 0.8, 0.1])\n                sphere(d=8, $fn=30);\n            \n            // Leaf tip extension\n            translate([8, 0, 0])\n                scale([0.5, 0.5, 0.1])\n                sphere(d=6, $fn=20);\n        }\n}\n\nmodule pear_detail() {\n    // Vertical indent lines for texture\n    for(i=[0:15:360]) {\n        rotate([0, 0, i])\n            translate([17, 0, 0])\n                scale([0.1, 1, 1])\n                cube([1, 0.5, 60], center=true);\n    }\n    \n    // Small indent at bottom\n    translate([0, 0, -5])\n        rotate_extrude($fn=30)\n            translate([8, 0, 0])\n                circle(d=3, $fn=20);\n}\n\n// Main pear assembly\nunion() {\n    pear_body();\n    stem();\n    leaf();\n    pear_detail();\n}\n\n// Flatten bottom for printing\ntranslate([0, 0, -7])\n    cube([40, 40, 2], center=true);",
    "renders": true
  },
  {
    "fruit": "peach",
    "openscad_code": "// Peach 3D Model - Realistic Style, Medium Complexity\n// Size: ~70mm tall\n\nmodule peach_body() {\n    // Main peach body - slightly flattened sphere for realistic shape\n    translate([0, 0, 5]) \n        scale([1.1, 1, 0.9]) \n        sphere(d=55, $fn=64);\n    \n    // Bottom indentation\n    translate([0, 0, -25])\n        rotate([0, 0, 0])\n        cylinder(h=10, d1=15, d2=8, $fn=32);\n}\n\nmodule peach_crease() {\n    // Vertical crease line\n    difference() {\n        peach_body();\n        translate([0, -27, 5])\n            rotate([0, 90, 0])\n            cylinder(h=60, d=3, $fn=32);\n    }\n}\n\nmodule stem() {\n    // Stem base\n    translate([0, 0, 30])\n        rotate([20, 0, 0])\n        cylinder(h=8, d=8, $fn=16);\n    \n    // Stem extension\n    translate([0, 0, 35])\n        rotate([30, 0, 0])\n        cylinder(h=12, d=5, $fn=16);\n    \n    // Small leaf\n    translate([5, 5, 40])\n        rotate([45, 30, 45])\n        scale([1, 0.3, 1])\n        sphere(d=8, $fn=16);\n}\n\nmodule dimples() {\n    // Create realistic peach dimples using small spheres\n    for(a = [0:30:150]) {\n        for(b = [30:30:150]) {\n            rotate([a, b, 0])\n            translate([0, 0, 25])\n                difference() {\n                    sphere(d=55, $fn=64);\n                    translate([sin(a)*cos(b)*25, sin(a)*sin(b)*25, cos(a)*25])\n                        sphere(d=8, $fn=16);\n                }\n        }\n    }\n}\n\nmodule realistic_peach() {\n    // Combine all parts\n    union() {\n        // Main body with crease\n        peach_crease();\n        \n        // Add stem\n        stem();\n        \n        // Add subtle dimples for texture\n        difference() {\n            sphere(d=55, $fn=64);\n            dimples();\n        }\n    }\n}\n\n// Render the complete peach\nscale([1, 1, 1])\nrealistic_peach();",
    "renders": true
  },
  {
    "fruit": "plum",
    "openscad_code": "// Realistic Plum - Medium Complexity\n// Designed for 3D printing at ~60mm height\n\n// Main plum body\nmodule plum_body() {\n    // Base ellipsoid shape\n    difference() {\n        union() {\n            // Main body - slightly flattened sphere\n            scale([1, 1.2, 0.9])\n            sphere(d=40, $fn=64);\n            \n            // Bottom bulge for realistic plum shape\n            translate([0, 0, -18])\n            scale([0.8, 1, 0.6])\n            sphere(d=25, $fn=32);\n            \n            // Top depression\n            translate([0, 0, 18])\n            scale([0.7, 0.7, 0.3])\n            sphere(d=15, $fn=32);\n        }\n        \n        // Stem cavity\n        translate([0, 0, 20])\n        cylinder(h=8, d1=4, d2=2, $fn=16);\n        \n        // Natural seam groove\n        rotate([0, 90, 0])\n        translate([0, 0, -20])\n        scale([0.05, 1, 1])\n        cube([40, 40, 40], center=true);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20])\n    rotate([0, 0, rand(5, 15)])\n    cylinder(h=12, d1=2.5, d2=1.5, $fn=8);\n}\n\n// Leaf\nmodule leaf() {\n    translate([0, 8, 20])\n    rotate([0, -20, 0])\n    scale([1, 0.6, 0.1])\n    sphere(d=12, $fn=32);\n    \n    // Leaf vein\n    translate([0, 8, 20.5])\n    rotate([0, -20, 0])\n    scale([0.05, 0.4, 0.01])\n    cube([10, 10, 1], center=true);\n}\n\n// Surface bumps for realistic texture\nmodule surface_texture() {\n    for(i = [0:15]) {\n        rotate([rand(0, 360), rand(0, 360), rand(0, 360)])\n        translate([\n            rand(-18, 18),\n            rand(-18, 18),\n            rand(-15, 15)\n        ]) {\n            scale([1, 1, 0.7])\n            sphere(d=rand(2, 4), $fn=8);\n        }\n    }\n}\n\n// Bloom (natural powdery coating)\nmodule bloom() {\n    difference() {\n        scale([1.02, 1.02, 1.02])\n        plum_body();\n        plum_body();\n    }\n}\n\n// Bloom surface texture\nmodule bloom_texture() {\n    %surface_texture();\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assembly\nunion() {\n    // Main plum with hollow interior for printing\n    difference() {\n        plum_body();\n        scale([0.9, 0.9, 0.9])\n        translate([0, 0, -2])\n        plum_body();\n    }\n    \n    // Surface details\n    union() {\n        stem();\n        leaf();\n        surface_texture();\n    }\n    \n    // Light bloom coating\n    bloom();\n}",
    "renders": true
  },
  {
    "fruit": "cherry",
    "openscad_code": "// Cherry with stem - 3D printable medium complexity realistic style\n// Overall size ~55 mm tall\n\n$fn = 64;  // Smooth surfaces\n\n// Main cherry body\nmodule cherry_body() {\n    // Core sphere\n    sphere(20);\n    \n    // Slight bulge at bottom for realistic shape\n    translate([0,0,-3])\n        scale([1.1,1.1,0.7])\n            sphere(20);\n    \n    // Small indent at top for stem\n    translate([0,0,19])\n        rotate_extrude()\n            translate([8,0,0])\n                circle(r=3);\n}\n\n// Stem structure\nmodule stem() {\n    // Main stem\n    translate([0,0,20])\n        rotate([0,15,0])\n            cylinder(h=35, r1=2.5, r2=1.5);\n    \n    // Stem tip\n    translate([0,0,54.5])\n        rotate([0,15,0])\n            sphere(1.5);\n    \n    // Small leaf\n    translate([5,0,45])\n        rotate([0,15,-30])\n            scale([1,0.6,0.1])\n                sphere(8);\n}\n\n// Surface details - small bumps and dimples\nmodule cherry_surface() {\n    for (i = [0:30]) {\n        rotate([0, i*12, i*7.5])\n            translate([20,0,0])\n                sphere(0.5);\n    }\n    \n    // Tiny indent at bottom\n    translate([0,0,-20])\n        sphere(1);\n}\n\n// Create full cherry\nunion() {\n    // Main body with surface details\n    difference() {\n        union() {\n            cherry_body();\n            cherry_surface();\n        }\n        \n        // Remove indent for stem connection\n        translate([0,0,19])\n            cylinder(h=5, r=2.5);\n    }\n    \n    // Add stem\n    stem();\n}\n\n// Optional: Flatten bottom slightly for printing stability\ntranslate([0,0,-21])\n    cube([40,40,1], center=true);",
    "renders": true
  },
  {
    "fruit": "apricot",
    "openscad_code": "// Realistic apricot, medium complexity\n// Designed for 3D printing, no overhangs, 50 mm tall\n\n$fn = 32;\n\n// Main apricot body\nmodule apricot_body() {\n    difference() {\n        // Main sphere slightly squashed\n        scale([1.05, 1, 0.9])\n        sphere(d=45);\n        \n        // Stem cavity\n        translate([0, 0, 20])\n        rotate([0, 0, 0])\n        cylinder(h=8, d1=6, d2=3, $fn=16);\n        \n        // Bottom indent\n        translate([0, 0, -20.5])\n        sphere(d=8);\n    }\n}\n\n// Surface indentations for realism\nmodule surface_detail() {\n    for (i = [0:15]) {\n        rotate([0, 0, i*24])\n        translate([18, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        sphere(d=3);\n    }\n    \n    for (j = [0:11]) {\n        rotate([0, 0, j*30 + 15])\n        translate([12, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        sphere(d=2.5);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20.5])\n    rotate([0, 0, 5])\n    cylinder(h=12, d1=2.5, d2=1.5, $fn=8);\n}\n\n// Leaf\nmodule leaf() {\n    translate([0, 8, 21])\n    rotate([0, 110, -10])\n    scale([0.4, 1, 0.1])\n    difference() {\n        sphere(d=15);\n        translate([0, -8, 0])\n        scale([1, 1, 10])\n        cube([20, 8, 2], center=true);\n    }\n}\n\n// Crease line\nmodule crease() {\n    translate([0, -22.5, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.8, 0.05])\n    cylinder(h=45, d=45);\n}\n\n// Assembly\nunion() {\n    difference() {\n        apricot_body();\n        surface_detail();\n    }\n    stem();\n    leaf();\n    crease();\n}",
    "renders": true
  },
  {
    "fruit": "nectarine",
    "openscad_code": "// Realistic Nectarine – OpenSCAD\n// Approx. 65 mm tall, 3 mm wall thickness, overhang-safe\n\n$fn = 48;              // Smooth curves\nwall = 3;              // 3D-printable wall thickness\n\nmodule nectarine() {\n    // Main fruit body – slightly flattened sphere\n    translate([0, 0, 0])\n        scale([1, 1, 0.9])\n        sphere(d = 60);\n\n    // Crease line along the natural seam\n    difference() {\n        translate([0, 0, 0])\n            scale([1, 1, 0.9])\n            sphere(d = 60);\n        translate([0, -30, 0])\n            rotate([0, 0, 90])\n            cube([60, 0.5, 30], center = true);\n    }\n\n    // Stylized stem cavity – shallow cone\n    difference() {\n        translate([0, 0, 0])\n            scale([1, 1, 0.9])\n            sphere(d = 60);\n        translate([0, 0, 27])\n            cylinder(h = 10, d1 = 8, d2 = 12, $fn = 32);\n    }\n\n    // Stem stub – short cylinder\n    translate([0, 0, 30])\n        cylinder(h = 8, d = 6, center = true);\n\n    // Surface bumps / pores – small spheres half-embedded\n    for (i = [0 : 5 : 360]) {\n        a = i;\n        b = (i * 137.5) % 360;   // Fibonacci spread\n        r = 29;\n        x = sin(a) * cos(b) * r;\n        y = cos(a) * cos(b) * r;\n        z = sin(b) * r * 0.9 + 5;\n        translate([x, y, z])\n            sphere(d = 2.5);\n    }\n\n    // Leaf – two thin cylinders at stem\n    color(\"darkgreen\")\n    translate([3, 0, 30])\n    rotate([0, -15, 30])\n    scale([1, 0.3, 1])\n    cylinder(h = 15, d = 8, center = true);\n\n    color(\"darkgreen\")\n    translate([-3, 0, 30])\n    rotate([0, 15, -30])\n    scale([1, 0.3, 1])\n    cylinder(h = 15, d = 8, center = true);\n}\n\n// Hollow shell for printing\ndifference() {\n    nectarine();\n    scale([1, 1, 0.9])\n    sphere(d = 60 - wall * 2);\n}\n\n// Small flat spot on bottom for stable printing\ndifference() {\n    translate([0, 0, -30])\n        sphere(d = 60);\n    translate([0, 0, -30.5])\n        cube([60, 60, 1], center = true);\n}",
    "renders": true
  },
  {
    "fruit": "grape",
    "openscad_code": "// Realistic 3D printable grape\n// Overall size ~65 mm tall\n\n// Stem parameters\nstem_dia = 5;\nstem_h = 25;\n\n// Berry parameters\nberry_dia = 12;\nberry_step = 11;  // center-to-center spacing\nrows = 5;\nberries_per_row = [5, 7, 9, 7, 5];\n\n// Calyx (top part) parameters\ncalyx_h = 4;\ncalyx_dia = 18;\n\n// Small indent parameters for realism\nindent_dia = 1.5;\nindent_depth = 0.8;\n\n// Union all parts\nunion() {\n\n    // Main stem\n    translate([0, 0, stem_h / 2])\n        cylinder(h = stem_h, d = stem_dia, $fn = 20);\n\n    // Calyx disc on top of stem\n    translate([0, 0, stem_h])\n        cylinder(h = calyx_h, d = calyx_dia, $fn = 30);\n\n    // Generate berries in a tapered cluster\n    for (i = [0 : rows - 1]) {\n        angle_step = 360 / berries_per_row[i];\n        radius = (rows - 1 - i) * berry_step / 2;\n        z = stem_h - i * berry_step * 0.8;\n\n        for (j = [0 : berries_per_row[i] - 1]) {\n            angle = j * angle_step;\n            x = radius * cos(angle);\n            y = radius * sin(angle);\n\n            // Individual berry with indent for realism\n            translate([x, y, z])\n                difference() {\n                    sphere(d = berry_dia, $fn = 20);\n\n                    // Four tiny indents on each berry surface\n                    for (k = [0 : 3]) {\n                        rot = k * 90;\n                        translate([\n                            0,\n                            berry_dia / 2 * cos(rot),\n                            berry_dia / 2 * sin(rot)\n                        ])\n                            rotate([0, 90 * sin(rot), 0])\n                                cylinder(\n                                    h = indent_depth + 1,\n                                    d = indent_dia,\n                                    $fn = 8\n                                );\n                    }\n                }\n        }\n    }\n\n    // Small connecting stems between berries\n    for (i = [0 : rows - 2]) {\n        curr_cnt = berries_per_row[i];\n        next_cnt = berries_per_row[i + 1];\n        curr_z = stem_h - i * berry_step * 0.8;\n        next_z = stem_h - (i + 1) * berry_step * 0.8;\n\n        for (j = [0 : curr_cnt - 1]) {\n            angle = j * 360 / curr_cnt;\n            x1 = (rows - 1 - i) * berry_step / 2 * cos(angle);\n            y1 = (rows - 1 - i) * berry_step / 2 * sin(angle);\n\n            // Connect to closest berries in next row\n            for (k = [0 : next_cnt - 1]) {\n                angle2 = k * 360 / next_cnt;\n                x2 = (rows - 1 - (i + 1)) * berry_step / 2 * cos(angle2);\n                y2 = (rows - 1 - (i + 1)) * berry_step / 2 * sin(angle2);\n\n                // Simple thin cylinder connector\n                translate([x1, y1, curr_z])\n                    rotate([0, 90 + atan2(next_z - curr_z, sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))), atan2(y2 - y1, x2 - x1)])\n                        cylinder(h = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (next_z - curr_z) * (next_z - curr_z)), d = 1, $fn = 6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "strawberry",
    "openscad_code": "// Realistic Strawberry Model\n// Medium complexity, 3D printable\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body parameters\nbody_radius = 30 * scale_factor;\nbody_height = 35 * scale_factor;\nbody_segments = 48;\n\n// Leaf parameters\nleaf_count = 6;\nleaf_length = 15 * scale_factor;\nleaf_width = 12 * scale_factor;\nleaf_thickness = 2 * scale_factor;\n\n// Seed parameters\nseed_radius = 1.2 * scale_factor;\nseed_rows = 8;\nseeds_per_row = 12;\n\n// Stem parameters\nstem_radius = 4 * scale_factor;\nstem_height = 8 * scale_factor;\n\nmodule strawberry_body() {\n    // Main body - ellipsoid with slight taper\n    difference() {\n        scale([1, 1, 1.1])\n        sphere(d=body_radius*2, $fn=body_segments);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -body_radius])\n        cube([body_radius*2, body_radius*2, body_radius], center=true);\n        \n        // Hollow out slightly for material saving\n        translate([0, 0, -5*scale_factor])\n        scale([0.85, 0.85, 0.9])\n        sphere(d=body_radius*1.8, $fn=body_segments);\n    }\n}\n\nmodule leaf_shape() {\n    // Basic leaf shape\n    hull() {\n        translate([0, leaf_length/3, 0])\n        sphere(d=leaf_width/2, $fn=8);\n        \n        translate([0, -leaf_length/3, 0])\n        sphere(d=leaf_width/3, $fn=8);\n    }\n}\n\nmodule leaves() {\n    // Calyx leaves around top\n    for(i = [0:leaf_count-1]) {\n        rotate([0, 0, i * 360/leaf_count])\n        translate([0, body_radius*0.6, body_height*0.85])\n        rotate([90, 0, -30])\n        scale([1, 1, leaf_thickness/leaf_width])\n        leaf_shape();\n    }\n}\n\nmodule seeds() {\n    // Surface seeds arranged in spiral pattern\n    for(row = [0:seed_rows-1]) {\n        row_height = body_height * 0.8 * (row + 1) / seed_rows;\n        row_radius = sqrt(pow(body_radius, 2) - pow(row_height - body_height/2, 2)) * 0.9;\n        \n        for(seed = [0:seeds_per_row-1]) {\n            angle = seed * 360/seeds_per_row + row * 15;\n            x = cos(angle) * row_radius;\n            y = sin(angle) * row_radius;\n            z = row_height - body_height/2;\n            \n            // Calculate surface normal\n            normal_angle = atan2(sqrt(x*x + y*y), z);\n            rotate_x = 90 - normal_angle;\n            \n            translate([x, y, z])\n            rotate([rotate_x, 0, angle])\n            sphere(d=seed_radius*2, $fn=8);\n        }\n    }\n}\n\nmodule stem() {\n    // Small stem at top\n    translate([0, 0, body_height*0.9])\n    cylinder(h=stem_height, r1=stem_radius, r2=stem_radius*0.7, $fn=16);\n}\n\n// Main assembly\nunion() {\n    strawberry_body();\n    leaves();\n    stem();\n    \n    // Add seeds as protrusions\n    translate([0, 0, body_height/2])\n    seeds();\n}",
    "renders": true
  },
  {
    "fruit": "raspberry",
    "openscad_code": "// Raspberry - Realistic style, medium complexity\n// Designed for 3D printing without supports\n\n// Overall dimensions: ~70mm tall, ~60mm diameter\n\n$fn = 32;  // Smooth curves for printing\n\n// Main raspberry body\nmodule raspberry_body() {\n    difference() {\n        // Core berry shape - ellipsoid\n        scale([1, 1, 1.2])\n        sphere(d = 50);\n        \n        // Hollow out center for printing\n        scale([0.8, 0.8, 1])\n        sphere(d = 45);\n    }\n}\n\n// Individual drupelet (raspberry segment)\nmodule drupelet(size, angle1, angle2) {\n    // Position on spherical surface\n    translate([0, 0, 15])\n    rotate([angle1, 0, angle2])\n    translate([0, 25, 0])\n    \n    // Drupelet shape - slightly flattened sphere\n    scale([1, 1, 0.7])\n    sphere(d = size);\n}\n\n// Layer of drupelets around the berry\nmodule drupelet_layer(height, count, size) {\n    for (i = [0 : count - 1]) {\n        rotate([0, 0, i * 360 / count])\n        translate([0, 0, height])\n        drupelet(size, 15, 0);\n    }\n}\n\n// Create the berry with multiple layers of drupelets\nmodule berry() {\n    union() {\n        // Core structure\n        raspberry_body();\n        \n        // Bottom layer - 12 drupelets\n        for (i = [0 : 11]) {\n            rotate([0, 0, i * 30])\n            translate([0, 22, -15])\n            drupelet(8, 45, 0);\n        }\n        \n        // Middle layer - 10 drupelets\n        for (i = [0 : 9]) {\n            rotate([0, 0, i * 36])\n            translate([0, 24, -5])\n            drupelet(9, 25, 0);\n        }\n        \n        // Upper layer - 8 drupelets\n        for (i = [0 : 7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 20, 5])\n            drupelet(8, 10, 0);\n        }\n        \n        // Top layer - 6 drupelets\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 15, 15])\n            drupelet(7, -15, 0);\n        }\n    }\n}\n\n// Raspberry stem/calyx\nmodule stem() {\n    // Main stem\n    translate([0, 0, 30])\n    cylinder(h = 15, d1 = 8, d2 = 5);\n    \n    // Sepals (green leaves around stem)\n    for (i = [0 : 4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 6, 30])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 0.3])\n        cylinder(h = 8, d = 4);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main berry\n    berry();\n    \n    // Stem on top\n    stem();\n}\n\n// Add small details - tiny hairs on drupelets\nmodule hairs() {\n    for (i = [0 : 30]) {\n        rotate([0, 0, i * 12])\n        translate([0, 25 + sin(i) * 5, -20 + i])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d = 0.5);\n    }\n}\n\n// Uncomment to add hairs (may affect printability)\n// %hairs();",
    "renders": true
  },
  {
    "fruit": "blueberry",
    "openscad_code": "// Blueberry - Realistic & 3D-printable\n// ~20 mm diameter\n\n/* ---------- PARAMETERS ---------- */\ndiam = 20;            // overall berry diameter (mm)\nwall = 1.2;           // minimum printable wall thickness (mm)\nn_petals = 5;         // calyx lobes\nsepal_len = 3;        // length of each sepal\nsepal_t = 0.8;        // sepal thickness\ncrown_h = 1.5;        // height of calyx crown\nstem_d = 1.6;         // stem diameter\nstem_h = 7;           // stem protrusion\n\n/* ---------- MAIN BERRY ---------- */\ndifference() {\n    // Smooth main body\n    sphere(d = diam, $fn = 100);\n\n    // Remove inner cavity for shell printing\n    translate([0,0, -wall/2])\n        sphere(d = diam - 2*wall, $fn = 100);\n\n    // Small flat base so it sits without rolling\n    translate([0,0, -diam/2 - 0.1])\n        cube([diam*1.1, diam*1.1, 1], center = true);\n}\n\n/* ---------- DETAILED CALYX (TOP) ---------- */\nmodule sepal() {\n    // petal-shaped sepal\n    difference() {\n        union() {\n            // main blade\n            scale([1, 1.3, 1])\n                sphere(d = sepal_len*2, $fn = 20);\n            // small stem-like base\n            cylinder(h = sepal_t*2, d = sepal_t*2.5, $fn = 10);\n        }\n        // taper tip\n        translate([0, sepal_len*0.9, 0])\n            rotate([90,0,0])\n                cylinder(h = sepal_len*1.5, d1 = sepal_len*1.3, d2 = 0, $fn = 10);\n    }\n}\n\n// circular crown base for sepals\ntranslate([0,0, diam/2 - crown_h/2])\n    cylinder(h = crown_h, d = diam*0.6, $fn = 50);\n\n// distribute sepals radially\nfor (i = [0 : n_petals-1]) {\n    angle = i*360/n_petals;\n    translate([0,0, diam/2])\n        rotate([0,0, angle])\n            translate([0, diam*0.20, 0])\n                rotate([80,0,0])\n                    sepal();\n}\n\n/* ---------- STEM ---------- */\ntranslate([0,0, diam/2 + crown_h])\n    cylinder(h = stem_h, d = stem_d, $fn = 20);\n\n// slight bulb at stem end\ntranslate([0,0, diam/2 + crown_h + stem_h])\n    sphere(d = stem_d*1.4, $fn = 20);\n\n/* ---------- FIVE LIGHT DOTS (bloom) ---------- */\ndots = [[0.3,0.8],[-0.7,0.5],[0.6,-0.6],[-0.2,-0.85],[0.8,0.1]];\nfor (p = dots) {\n    translate([p[0]*diam/2, p[1]*diam/2, sqrt((diam/2)^2 - (p[0]*diam/2)^2 - (p[1]*diam/2)^2) - 0.2])\n        sphere(d = 0.6, $fn = 8);\n}",
    "renders": true
  },
  {
    "fruit": "blackberry",
    "openscad_code": "// Blackberry - realistic style with medium complexity\n// Approx 70mm tall\n\n// Main parameters\nberry_diameter = 32;  // Overall berry diameter\ndruplet_size = 5;     // Individual druplet sphere size\nstem_length = 35;     // Stem length\nbase_wall = 1.5;      // Wall thickness for 3D printing\n\n// Create the blackberry fruit\nmodule blackberry() {\n    difference() {\n        union() {\n            // Core structure - slightly flattened sphere\n            scale([1, 1, 0.8])\n                sphere(d = berry_diameter);\n            \n            // Add druplets in layered pattern\n            for (layer = [0:4]) {\n                rotate([0, 0, layer * 36]) {\n                    for (angle = [0:30:330]) {\n                        rotate([0, 0, angle]) {\n                            translate([0, berry_diameter/2 - 5, layer * 5 - 8]) {\n                                sphere(d = druplet_size);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Additional druplets for fuller appearance\n            for (layer = [1:3]) {\n                rotate([0, 0, layer * 72 + 18]) {\n                    for (angle = [0:45:315]) {\n                        rotate([0, 0, angle]) {\n                            translate([0, berry_diameter/2 - 8, layer * 6 - 6]) {\n                                sphere(d = druplet_size * 0.9);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Top druplets\n            rotate([0, 0, 45]) {\n                for (angle = [0:60:300]) {\n                    rotate([0, 0, angle]) {\n                        translate([0, berry_diameter/4, berry_diameter/2 - 5]) {\n                            sphere(d = druplet_size * 0.8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hollow out center for printing\n        scale([0.8, 0.8, 0.7])\n            sphere(d = berry_diameter - base_wall * 2);\n    }\n}\n\n// Create stem with realistic texture\nmodule stem() {\n    union() {\n        // Main stem cylinder\n        cylinder(h = stem_length, d1 = 4, d2 = 2.5, $fn = 8);\n        \n        // Add small bumps for texture\n        for (i = [0:3:stem_length-5]) {\n            translate([0, 0, i]) {\n                rotate([0, 0, i * 45]) {\n                    translate([2.2, 0, 0]) {\n                        sphere(d = 0.8);\n                    }\n                }\n            }\n        }\n        \n        // Stem connection to berry\n        translate([0, 0, stem_length]) {\n            cylinder(h = 3, d1 = 2.5, d2 = 4, $fn = 8);\n        }\n    }\n}\n\n// Create calyx leaves at stem connection\nmodule calyx() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            rotate([30, 0, 0]) {\n                translate([0, 0, stem_length - 1]) {\n                    scale([1, 0.6, 0.3]) {\n                        sphere(d = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, stem_length]) {\n    rotate([180, 0, 0]) {\n        union() {\n            blackberry();\n            calyx();\n        }\n    }\n}\n\nstem();",
    "renders": true
  },
  {
    "fruit": "mulberry",
    "openscad_code": "// Realistic Mulberry Model for 3D Printing\n// Medium complexity with proper structure for printing\n\nmodule mulberry_body() {\n    // Main berry body - ellipsoid shape\n    scale([1, 0.8, 1.2])\n        sphere(15, $fn=32);\n}\n\nmodule berry_cluster() {\n    // Generate the clustered drupelets characteristic of mulberries\n    for(i = [0:35]) {\n        // Fibonacci-like distribution for natural clustering\n        angle = i * 137.5;\n        radius = 8 + 2 * sin(i * 2);\n        height = 10 * sin(i * 0.3);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, height])\n                rotate([0, 90, 0])\n                    scale([1, 0.7, 0.7])\n                        cylinder(h=8, r1=3, r2=1.5, $fn=8);\n    }\n}\n\nmodule stem_connection() {\n    // Stem attachment point with smooth transition\n    translate([0, 0, 20])\n        cylinder(h=8, r1=3, r2=2, $fn=16);\n    \n    // Add small calyx leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([2.5, 0, 20])\n                rotate([45, 0, 90])\n                    scale([0.5, 1, 0.1])\n                        cylinder(h=4, r=2, $fn=6);\n    }\n}\n\nmodule surface_detail() {\n    // Add subtle surface texture with small bumps\n    for(i = [0:50]) {\n        angle = i * 73.2;\n        radius = 12 * sqrt(i / 50);\n        height = 15 + 2 * (i % 2);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, height])\n                sphere(0.8, $fn=6);\n    }\n}\n\nmodule leaf_attachment() {\n    // Small leaf remnants at base\n    translate([0, 0, 15])\n        rotate([0, 0, 30])\n            scale([1, 0.3, 0.05])\n                cube([8, 6, 1], center=true);\n    \n    translate([0, 0, 15])\n        rotate([0, 0, -45])\n            scale([0.8, 0.25, 0.05])\n                cube([7, 5, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    // Core body\n    mulberry_body();\n    \n    // Add clustered drupelets\n    berry_cluster();\n    \n    // Surface texture\n    surface_detail();\n    \n    // Stem connection\n    stem_connection();\n    \n    // Leaf remnants\n    leaf_attachment();\n}\n\n// Optional: Add a small print base\ntranslate([0, 0, -3])\n    cylinder(h=3, r=18, $fn=32);",
    "renders": true
  },
  {
    "fruit": "gooseberry",
    "openscad_code": "// Gooseberry - Realistic style, medium complexity\n// Basic dimensions (mm)\ngooseberry_diameter = 25;\ngooseberry_height = 30;\nstem_length = 8;\nstem_diameter = 3;\nvein_count = 8;\nridge_height = 1.2;\n\n// Main body module with longitudinal ridges\nmodule gooseberry_body() {\n    difference() {\n        // Main sphere shape\n        sphere(d = gooseberry_diameter, $fn = 64);\n        \n        // Flatten the bottom slightly\n        translate([0, 0, -gooseberry_diameter/2 - 1])\n            cube([gooseberry_diameter + 2, gooseberry_diameter + 2, 2], center = true);\n        \n        // Create longitudinal ridges by subtracting grooves\n        for (i = [0:vein_count-1]) {\n            rotate([0, 0, i * (360/vein_count)])\n                translate([0, 0, -gooseberry_diameter/2 - 1])\n                    cube([gooseberry_diameter * 0.3, ridge_height * 2, gooseberry_diameter + 2], center = true);\n        }\n    }\n    \n    // Add the ridges back as raised features\n    for (i = [0:vein_count-1]) {\n        rotate([0, 0, i * (360/vein_count) + (360/vein_count/2)])\n            translate([0, gooseberry_diameter/2 - 2, 0])\n                scale([1, 0.3, 0.8])\n                    sphere(d = ridge_height * 4, $fn = 16);\n    }\n}\n\n// Stem with leaves\nmodule stem_and_leaves() {\n    // Main stem\n    translate([0, 0, gooseberry_height/2])\n        cylinder(h = stem_length, d = stem_diameter, $fn = 16);\n    \n    // Small leaves at stem base\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([stem_diameter/2 + 1.5, 0, gooseberry_height/2 + stem_length/2])\n                rotate([90, 0, 0])\n                    scale([0.8, 1.2, 0.3])\n                        cylinder(h = 4, d1 = 3, d2 = 1, $fn = 3);\n    }\n}\n\n// Add subtle surface bumps for realism\nmodule surface_bumps() {\n    // Random small bumps across the surface\n    for (i = [15:135]) {\n        rotate([i * 7.5, i * 11.25, 0])\n            translate([0, 0, gooseberry_diameter/2 - 2])\n                sphere(d = 0.8 + (i % 3) * 0.3, $fn = 8);\n    }\n}\n\n// Final assembly\nunion() {\n    // Main gooseberry body\n    gooseberry_body();\n    \n    // Surface texture\n    surface_bumps();\n    \n    // Stem and leaves\n    stem_and_leaves();\n}\n\n// Position for printing\ntranslate([0, 0, -gooseberry_height/2])\n    rotate([0, 0, 0]);",
    "renders": true
  },
  {
    "fruit": "currant",
    "openscad_code": "// Realistic 3D Currant (medium complexity)\n// Outer diameter ~15 mm, full cluster ~70 mm\n// Designed for 3D printing: no steep overhangs, 1 mm wall thickness\n\n// Main cluster parameters\n$fn = 30;\nberry_d = 15;          // diameter of one berry\nwall = 1;              // printable wall thickness\nstem_d = 2.5;          // diameter of main stem\nberry_count = 12;      // number of berries\nrand_seed = 42;        // fixed seed for reproducible randomization\n\n// Berry module: slightly flattened sphere with calyx scar\nmodule berry(pos=[0,0,0], scale=1, rot=[0,0,0]) {\n    translate(pos)\n    rotate(rot)\n    scale([scale, scale, scale*0.85])  // slightly flattened vertically\n    union() {\n        // Main body\n        difference() {\n            sphere(d=berry_d);\n            // Calyx scar – small conical hollow\n            translate([0,0,-berry_d/2])\n            cylinder(d1=berry_d/4, d2=0, h=berry_d/6, $fn=12);\n        }\n        // Subtle vertical ribs\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n            translate([0,0,-berry_d/2])\n            scale([0.1, 0.05, 1])\n            sphere(d=berry_d*1.05);\n        }\n    }\n}\n\n// Tiny calyx remnants on top\nmodule calyx(pos=[0,0,0], ang=[0,0,0]) {\n    translate(pos)\n    rotate(ang)\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n        translate([0,berry_d/2.3,0])\n        rotate([90,0,0])\n        cylinder(d1=1.5, d2=0.7, h=2, $fn=6);\n    }\n}\n\n// Main stem (curved)\nmodule stem() {\n    // Create a smooth arc\n    hull() {\n        translate([0,0,0])\n        rotate([0,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n        translate([0,0,60])\n        rotate([20,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n        translate([0,0,120])\n        rotate([40,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n    }\n    // thicken via spheres\n    for(z=[0:5:120]) {\n        ang = 40*(z/120);\n        translate([0,0,z])\n        rotate([ang,90,0])\n        sphere(d=stem_d*1.1, $fn=12);\n    }\n}\n\n// Generate berry positions with random offsets\nmodule cluster() {\n    stem();\n    for(i=[0:berry_count-1]) {\n        // Random angles and radius\n        seed = rand_seed + i*100;\n        a = rands(0,360,1,seed)[0];\n        b = rands(0,180,1,seed+5)[0];\n        r = rands(berry_d*1.5, berry_d*2.5,1,seed+10)[0];\n        // Position along curved stem\n        stem_z = rands(15,105,1,seed+15)[0];\n        stem_ang = 40*(stem_z/120);\n        x = r * sin(b) * cos(a);\n        y = r * sin(b) * sin(a);\n        z = r * cos(b) + stem_z;\n        // Rotate berry to face outward from stem\n        angle_to_stem = atan2(y,x);\n        // Create berry\n        berry([x,y,z], rands(0.9,1.05,1,seed+20)[0], [0,0,angle_to_stem]);\n        calyx([x,y,z], [0,0,angle_to_stem]);\n    }\n}\n\n// Render the full cluster\ncluster();",
    "renders": true
  },
  {
    "fruit": "redcurrant",
    "openscad_code": "// Redcurrant 3D model - medium complexity\n// Designed for 3D printing, realistic style\n\n// Overall dimensions\n$fn = 24;\n\n// Main parameters\nberry_diameter = 5;\nberry_rows = 4;\nberries_per_row = [8, 6, 4, 2];\nstem_thickness = 1.2;\nstem_length = 25;\ncluster_height = 35;\n\n// Berry module with realistic shape\nmodule berry() {\n    difference() {\n        // Main berry body\n        sphere(d = berry_diameter);\n        \n        // Calyx scar on top\n        translate([0, 0, berry_diameter/2 - 0.3])\n            cylinder(h = 1, d1 = 2.5, d2 = 1.5, $fn = 12);\n        \n        // Small indentations for texture\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([berry_diameter/2 - 0.8, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1.5, d = 0.6, $fn = 8);\n        }\n    }\n}\n\n// Stem with realistic branching\nmodule stem() {\n    // Main stem\n    cylinder(h = stem_length, d = stem_thickness);\n    \n    // Side branches\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([0, 0, stem_length - 5 - i * 5])\n                rotate([30, 0, 0])\n                    cylinder(h = 8, d1 = stem_thickness, d2 = 0.8);\n    }\n    \n    // Top curl\n    translate([0, 0, stem_length])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d = stem_thickness);\n}\n\n// Berry cluster\nmodule berry_cluster() {\n    // Stem first\n    stem();\n    \n    // Berries arranged in rows\n    for(row = [0:berry_rows-1]) {\n        berries = berries_per_row[row];\n        angle_step = 360 / berries;\n        height = cluster_height - row * 8;\n        radius = 12 - row * 2.5;\n        \n        for(i = [0:berries-1]) {\n            angle = i * angle_step;\n            // Calculate position on spiral\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            // Each berry with slight random rotation\n            translate([x, y, height])\n                rotate([rand(row*10+i)*10, rand(row*10+i+1)*10, angle])\n                    berry();\n        }\n    }\n}\n\n// Helper function for pseudo-random rotation\nfunction rand(n) = (n * 13.7) % 1 - 0.5;\n\n// Create the complete redcurrant\nberry_cluster();",
    "renders": true
  },
  {
    "fruit": "blackcurrant",
    "openscad_code": "// Blackcurrant (realistic style, medium complexity)\n// Overall dimensions: ~65mm tall × ~35mm wide\n\n$fn = 30;  // Smooth curves\n\n// Main body of the blackcurrant cluster\nmodule blackcurrant_cluster() {\n    // Central stem\n    stem();\n    \n    // Generate berries in a realistic cluster pattern\n    for (i = [0:7]) {\n        angle = i * 45 + (i % 2) * 22.5;\n        radius = 8 + (i % 3) * 2;\n        height = 15 + sin(i * 30) * 5;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([90 + (i % 2) * 10, 0, angle])\n            berry(6 + (i % 3) * 0.5);\n    }\n    \n    // Additional berries for fullness\n    for (i = [0:5]) {\n        angle = i * 60 + 30;\n        radius = 10 + (i % 2) * 3;\n        height = 25 + cos(i * 45) * 3;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([85 + (i % 3) * 5, 0, angle])\n            berry(5.5 + (i % 2) * 0.8);\n    }\n    \n    // Top berries\n    for (i = [0:3]) {\n        angle = i * 90;\n        radius = 4;\n        height = 35;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([60 + i * 5, 0, angle])\n            berry(4.5);\n    }\n}\n\n// Individual berry with realistic features\nmodule berry(size) {\n    color(\"darkmagenta\")\n    union() {\n        // Main berry body\n        sphere(d = size * 2);\n        \n        // Calyx (dried flower remnants) at top\n        translate([0, 0, size])\n        rotate([0, 0, 45])\n        calyx(size * 0.4);\n        \n        // Surface texture - small dimples\n        for (j = [0:8]) {\n            theta = j * 40;\n            for (k = [1:3]) {\n                phi = k * 30 + j * 10;\n                dimple_pos = size * 0.9;\n                \n                translate([\n                    dimple_pos * sin(phi) * cos(theta),\n                    dimple_pos * sin(phi) * sin(theta),\n                    dimple_pos * cos(phi)\n                ])\n                sphere(d = size * 0.15);\n            }\n        }\n    }\n}\n\n// Calyx structure\nmodule calyx(size) {\n    difference() {\n        // Base of calyx\n        cylinder(h = size, d = size * 1.8);\n        \n        // Petal indentations\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([size * 0.3, 0, -0.1])\n            cube([size * 0.6, size * 0.2, size + 0.2], center = true);\n        }\n    }\n}\n\n// Main stem structure\nmodule stem() {\n    color(\"darkgreen\")\n    union() {\n        // Central stalk\n        cylinder(h = 40, d = 3);\n        \n        // Side branches\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n            translate([0, 0, 10 + i * 8])\n            rotate([110 - i * 10, 0, 0])\n            cylinder(h = 12, d = 1.5);\n        }\n        \n        // Small leaf remnants\n        translate([0, 0, 38])\n        rotate([0, 0, 30])\n        scale([1, 0.6, 0.1])\n        sphere(d = 8);\n    }\n}\n\n// Generate the complete blackcurrant\nblackcurrant_cluster();",
    "renders": true
  },
  {
    "fruit": "whitecurrant",
    "openscad_code": "// Whitecurrant model - realistic style, medium complexity\n// Overall size ~70mm height\n\n$fn = 32;\nberry_diameter = 8;\nberry_spacing = 10;\ncluster_height = 70;\nstem_thickness = 2;\npeduncle_length = 15;\n\n// Berries arranged in a cluster\nmodule berry_cluster() {\n    // Main berries in spiral pattern\n    for(i = [0:9]) {\n        translate([\n            sin(i * 40) * (5 + i * 0.5),\n            cos(i * 40) * (5 + i * 0.5),\n            -i * 7\n        ]) {\n            rotate([0, 0, i * 25]) {\n                difference() {\n                    sphere(d = berry_diameter);\n                    // Calyx indentation\n                    translate([0, 0, berry_diameter/2 - 1])\n                        cylinder(h = 2, d1 = 3, d2 = 1.5, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Additional side berries\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([8, 0, -20]) {\n                rotate([0, 30, 0]) {\n                    sphere(d = berry_diameter * 0.9);\n                }\n            }\n        }\n    }\n    \n    // Top berries\n    for(i = [0:4]) {\n        translate([\n            sin(i * 72) * 4,\n            cos(i * 72) * 4,\n            -5\n        ]) {\n            sphere(d = berry_diameter * 0.8);\n        }\n    }\n}\n\n// Main stem structure\nmodule main_stem() {\n    // Central peduncle\n    linear_extrude(height = peduncle_length, twist = 5)\n        circle(d = stem_thickness, $fn = 8);\n    \n    // Branched stems for berries\n    for(i = [0:9]) {\n        translate([0, 0, -i * 7]) {\n            rotate([0, 0, i * 40]) {\n                translate([5 + i * 0.5, 0, 0]) {\n                    rotate([90, 0, -30]) {\n                        cylinder(h = 8, d = stem_thickness * 0.6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaves\nmodule leaves() {\n    // Main leaf\n    translate([0, 15, -25]) {\n        rotate([0, 20, 0]) {\n            difference() {\n                scale([1, 1.5, 0.5])\n                    sphere(d = 12);\n                // Leaf vein indentations\n                translate([0, -2, 0])\n                    cube([0.5, 8, 3], center = true);\n                translate([0, -2, 0])\n                    rotate([0, 0, 30])\n                        cube([0.5, 4, 2.5], center = true);\n                translate([0, -2, 0])\n                    rotate([0, 0, -30])\n                        cube([0.5, 4, 2.5], center = true);\n            }\n        }\n    }\n    \n    // Second leaf\n    translate([-10, -10, -30]) {\n        rotate([0, -15, -30]) {\n            scale([0.8, 1.2, 0.4])\n                sphere(d = 10);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, cluster_height]) {\n    union() {\n        // Stem and berries\n        main_stem();\n        berry_cluster();\n        \n        // Leaves\n        leaves();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "elderberry",
    "openscad_code": "// Elderberry cluster with realistic style - medium complexity\n// Overall height ~70mm, printable without supports\n\n// Global parameters\nberry_d = 5;          // Individual berry diameter\nberry_gap = 1.5;      // Gap between berries\nstem_d = 2.5;         // Stem diameter\nstem_segments = 8;    // Stem resolution\numbel_radius = 20;    // Main cluster radius\nberry_wall = 0.8;     // Wall thickness for printing\n\n// Main module\nmodule elderberry_cluster() {\n    // Central stem\n    color(\"saddlebrown\")\n    translate([0,0,-5])\n    cylinder(d1=stem_d*1.5, d2=stem_d, h=35, $fn=stem_segments);\n    \n    // First umbel layer\n    elder_umbel(umbel_radius*0.7, 25, 0);\n    \n    // Second umbel layer\n    elder_umbel(umbel_radius*0.85, 32, 180);\n    \n    // Top umbel layer  \n    elder_umbel(umbel_radius, 40, 0);\n}\n\n// Generate a single umbel layer\nmodule elder_umbel(radius, height, rot_offset) {\n    berry_count = floor(360 / (berry_d + berry_gap));\n    angle_step = 360 / berry_count;\n    \n    for(i = [0:berry_count-1]) {\n        angle = i * angle_step + rot_offset;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        // Main berry\n        translate([x, y, height])\n        rotate([0,0,angle])\n        elder_berry();\n        \n        // Supporting pedicel\n        color(\"saddlebrown\")\n        translate([0,0,height-2])\n        rotate([0,0,angle])\n        rotate([90,0,0])\n        cylinder(d=stem_d*0.6, h=radius, $fn=6);\n    }\n    \n    // Center berries\n    for(j = [0:2]) {\n        offset = j * 120;\n        dist = radius * 0.3;\n        cx = cos(offset) * dist;\n        cy = sin(offset) * dist;\n        \n        translate([cx, cy, height])\n        elder_berry();\n    }\n}\n\n// Individual berry with realistic features\nmodule elder_berry() {\n    difference() {\n        // Main berry body\n        sphere(d=berry_d, $fn=12);\n        \n        // Calyx scar at top\n        translate([0,0,berry_d/2-0.2])\n        cylinder(d=berry_d*0.25, h=0.5, $fn=6);\n        \n        // Hollow interior for printing\n        translate([0,0,-berry_wall])\n        sphere(d=berry_d-berry_wall*2, $fn=12);\n    }\n    \n    // Surface texture rings\n    for(z = [-2:1:2]) {\n        translate([0,0,z])\n        rotate([90,0,0])\n        difference() {\n            cylinder(d=berry_d+0.2, h=0.3, $fn=16);\n            cylinder(d=berry_d-0.2, h=0.4, $fn=16);\n        }\n    }\n}\n\n// Render the model\nelderberry_cluster();",
    "renders": true
  },
  {
    "fruit": "cloudberry",
    "openscad_code": "// Cloudberry – realistic, medium complexity\n// 2024-04-XX\n\n// General parameters\n$fn = 36;\nfruit_d  = 12;        // diameter of one drupelet\nfruit_h  = 10;        // height of one drupelet\ncore_r   = 8;         // core radius that drupelets attach to\nstem_d   = 4;         // main stem diameter\nstem_h   = 25;        // stem height\nleaf_l   = 22;        // leaf length\nleaf_w   = 11;        // leaf width\nscale_factor = 3;     // enlarge whole berry for printing\n\n// Petal-like leaves at top\nmodule leaves() {\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([0,core_r*2.2,fruit_h*1.5])\n                rotate([90,0,0])\n                    scale([1,0.6,1])\n                        cylinder(h=leaf_l, r1=leaf_w, r2=leaf_w/2, center=true);\n    }\n}\n\n// One drupelet (segment of raspberry-like berry)\nmodule drupelet(row, pos) {\n    // polar angle for this row\n    theta = (row==0) ? 0 : 45 + row*25;   // rows 0,1,2\n    // azimuthal angle for each drupelet in row\n    phi_step = (row==0) ? 0 : 360/(row*6);\n    phi = pos*phi_step;\n    \n    // position vector on sphere\n    x = core_r * sin(theta) * cos(phi);\n    y = core_r * sin(theta) * sin(phi);\n    z = core_r * cos(theta);\n    \n    translate([x,y,z])\n        sphere(d=fruit_d);\n}\n\n// Build the berry by stacking rows of drupelets\nmodule berry() {\n    union() {\n        // central core (for strength & easier printing)\n        sphere(d=core_r*2);\n        \n        // rows of drupelets\n        for(row=[0:2]) {\n            count = (row==0) ? 1 : row*6;\n            for(pos=[1:count])\n                drupelet(row, pos);\n        }\n    }\n}\n\n// Main stem\nmodule stem() {\n    cylinder(h=stem_h, d=stem_d);\n}\n\n// Base with gentle slope to avoid overhang\nmodule base() {\n    difference() {\n        cylinder(h=3, d=stem_d+6);\n        translate([0,0,-1])\n            cylinder(h=5, d=stem_d-1);\n    }\n}\n\n// Final assembly\nscale([scale_factor,scale_factor,scale_factor])\nunion() {\n    stem();\n    translate([0,0,stem_h])\n        base();\n    translate([0,0,stem_h+3])\n        berry();\n    translate([0,0,stem_h+3])\n        leaves();\n}",
    "renders": true
  },
  {
    "fruit": "lingonberry",
    "openscad_code": "// Lingonberry model - realistic style, medium complexity\n\n// Overall dimensions (mm)\nberry_diameter = 10;\nberry_length = 12;\ncrown_size = 3;\nstem_length = 15;\n\n// 3D print settings\n$fn = 32;\nwall_thickness = 1.2;\n\nmodule lingonberry() {\n    // Main berry body - slightly elongated sphere\n    color(\"red\")\n    union() {\n        // Main body\n        translate([0, 0, 0])\n        scale([1, 1, 1.2])\n        sphere(d = berry_diameter);\n        \n        // Crown at top - small lobes\n        translate([0, 0, berry_length/2])\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([crown_size/2, 0, 0])\n            scale([0.6, 0.6, 0.8])\n            sphere(d = crown_size);\n        }\n        \n        // Surface texture - small bumps\n        for(phi = [0:30:150]) {\n            for(theta = [0:20:340]) {\n                rotate([phi, 0, theta])\n                translate([berry_diameter/2 - 0.3, 0, 0])\n                scale([0.3, 0.3, 0.3])\n                sphere(d = 1);\n            }\n        }\n    }\n    \n    // Stem attachment point\n    color(\"darkgreen\")\n    translate([0, 0, -berry_length/2])\n    cylinder(h = 2, d1 = 2, d2 = 1.5);\n    \n    // Main stem with slight curve\n    color(\"darkgreen\")\n    translate([0, 0, -berry_length/2 - 1])\n    rotate([5, 0, 0])\n    cylinder(h = stem_length, d = 1.5);\n    \n    // Stem details - small leaves\n    translate([0, 0, -berry_length/2 - 3])\n    rotate([15, 0, 45])\n    scale([0.8, 2, 0.2])\n    sphere(d = 3);\n    \n    translate([0, 0, -berry_length/2 - 5])\n    rotate([10, 0, -30])\n    scale([0.8, 2, 0.2])\n    sphere(d = 3);\n}\n\n// Create a cluster of 3 berries for realism\ntranslate([-10, 0, 0])\nlingonberry();\n\ntranslate([5, 8, 2])\nrotate([0, 0, 20])\nlingonberry();\n\ntranslate([8, -5, -1])\nrotate([0, 0, -15])\nlingonberry();",
    "renders": true
  },
  {
    "fruit": "bilberry",
    "openscad_code": "// Bilberry - realistic style, medium complexity\n// Overall size ~60 mm\n\n$fn = 36; // smooth curves\n\n// Main berry body\nmodule berry_body() {\n    difference() {\n        // Main sphere with slight flattening\n        scale([1, 1, 0.9])\n        sphere(d = 12);\n\n        // Top indent\n        translate([0, 0, 5.5])\n        cylinder(h = 3, d1 = 3, d2 = 0, $fn = 20);\n\n        // Bottom indent\n        translate([0, 0, -5.5])\n        cylinder(h = 2, d1 = 2, d2 = 0, $fn = 20);\n    }\n}\n\n// Surface bumps for realistic texture\nmodule surface_texture() {\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([5.5, 0, sin(i * 15) * 2])\n        rotate([90, 0, 0])\n        scale([0.4, 0.4, 1])\n        sphere(d = 1.2);\n    }\n}\n\n// Crown at top\nmodule crown() {\n    difference() {\n        // Main crown shape\n        translate([0, 0, 6.5])\n        cylinder(h = 2.5, d1 = 4.5, d2 = 2.5);\n        \n        // Central hole\n        translate([0, 0, 6.5])\n        cylinder(h = 3, d = 1.5);\n    }\n    \n    // Crown petals\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([1.8, 0, 7.8])\n        rotate([30, 0, 0])\n        scale([0.6, 0.3, 1.2])\n        sphere(d = 2);\n    }\n}\n\n// Small leaves\nmodule leaves() {\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180 + 30])\n        translate([2.5, 0, 7.5])\n        rotate([45, 0, 0])\n        scale([1.2, 0.8, 0.2])\n        sphere(d = 3);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 8.5])\n    rotate([0, 0, 15])\n    cylinder(h = 8, d1 = 1.5, d2 = 0.8);\n}\n\n// Complete bilberry\nunion() {\n    // Main body with texture\n    union() {\n        berry_body();\n        surface_texture();\n    }\n    \n    // Top features\n    crown();\n    leaves();\n    stem();\n}\n\n// Add a subtle base for printing stability\ntranslate([0, 0, -6])\ncylinder(h = 0.5, d = 12.5);",
    "renders": true
  },
  {
    "fruit": "huckleberry",
    "openscad_code": "// Realistic 3D Huckleberry for 3D printing\n// Medium complexity model with anatomical detail\n\n// Main parameters\nberry_diameter = 18;           // Main berry body diameter\ncrown_height = 4;              // Crown height at top\ncrown_diameter = 12;           // Crown diameter\nseed_count = 8;                // Number of seeds inside\nstem_length = 6;               // Stem length\nstem_diameter = 2.5;           // Stem thickness\nsurface_bump_height = 0.8;     // Surface bump height\nwall_thickness = 1.2;          // Wall thickness for 3D printing\noverall_scale = 4;             // Scale factor for final size\n\n// Color\n$fn = 32;                      // Smooth curves\n\n// Hollow sphere module for berry body\nmodule hollow_sphere(outer_d, inner_d) {\n    difference() {\n        sphere(d = outer_d);\n        sphere(d = inner_d);\n    }\n}\n\n// Surface bump module for realistic texture\nmodule surface_bump(pos, height) {\n    translate(pos) {\n        scale([0.7, 0.7, 1])\n        sphere(d = height * 2);\n    }\n}\n\n// Internal seed module\nmodule seed(pos, angle) {\n    translate(pos) {\n        rotate([0, angle, 0])\n        scale([0.6, 0.3, 0.8])\n        sphere(d = 2);\n    }\n}\n\n// Crown module (top structure)\nmodule berry_crown() {\n    // Main crown base\n    translate([0, 0, berry_diameter/2 - 1]) {\n        cylinder(h = crown_height, d1 = crown_diameter, d2 = crown_diameter * 0.7);\n    }\n    \n    // Crown segments\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([crown_diameter/2 - 2, 0, berry_diameter/2 + crown_height/2]) {\n                rotate([0, 90, 0])\n                cylinder(h = 3, d = 2);\n            }\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, berry_diameter/2 + crown_height + stem_length/2]) {\n        cylinder(h = stem_length, d = stem_diameter);\n    }\n}\n\n// Main berry assembly\nmodule huckleberry() {\n    // Main berry body with hollow interior\n    hollow_sphere(berry_diameter, berry_diameter - wall_thickness * 2);\n    \n    // Crown at top\n    berry_crown();\n    \n    // Stem\n    stem();\n    \n    // Surface bumps for realistic texture\n    // Arrange bumps in Fibonacci-like spiral pattern\n    bump_positions = [\n        [5, 2, 6], [-5, 2, 6], [2, -5, 6], [-2, -5, 6],\n        [6, 0, 4], [-6, 0, 4], [0, 6, 4], [0, -6, 4],\n        [4, 4, 5], [-4, 4, 5], [4, -4, 5], [-4, -4, 5]\n    ];\n    \n    for(pos = bump_positions) {\n        surface_bump(pos, surface_bump_height);\n    }\n    \n    // Internal seeds (only visible if cut open)\n    for(i = [0:seed_count-1]) {\n        angle = i * 360/seed_count;\n        radius = berry_diameter/2 - wall_thickness - 2;\n        x = radius * cos(angle) * 0.4;\n        y = radius * sin(angle) * 0.4;\n        z = -berry_diameter/6 + i * 0.5;\n        seed([x, y, z], angle);\n    }\n}\n\n// Create the final model with proper scale\nscale(overall_scale)\nhuckleberry();",
    "renders": true
  },
  {
    "fruit": "boysenberry",
    "openscad_code": "// Boysenberry - Realistic Style, Medium Complexity\n// Overall dimensions: ~45mm tall, ~35mm diameter\n\n// Base parameters\nberry_diameter = 32;\nberry_height = 40;\nsegment_count = 8;\ndrupelet_count = 35;\n\n// Main berry body\nmodule berry_body() {\n    difference() {\n        // Main ellipsoid shape\n        scale([1, 1, 1.25])\n        sphere(d=berry_diameter, $fn=32);\n        \n        // Top indentation\n        translate([0, 0, berry_height/2 - 2])\n        cylinder(h=10, d1=12, d2=8, $fn=16);\n    }\n}\n\n// Individual drupelet (small sphere with stem base)\nmodule drupelet(size, stem_length) {\n    union() {\n        // Main drupelet body\n        sphere(d=size, $fn=8);\n        \n        // Tiny stem connection\n        translate([0, 0, size/2])\n        cylinder(h=stem_length, d=size/3, $fn=6);\n    }\n}\n\n// Generate drupelets across berry surface\nmodule surface_drupelets() {\n    for(i = [0:drupelet_count-1]) {\n        // Fibonacci spiral for even distribution\n        theta = i * 137.5;\n        phi = acos(1 - 2*(i+0.5)/drupelet_count);\n        \n        // Convert spherical to cartesian coordinates\n        x = berry_diameter/2 * 0.9 * cos(theta*3.14159/180) * sin(phi);\n        y = berry_diameter/2 * 0.9 * sin(theta*3.14159/180) * sin(phi);\n        z = berry_height/2 * 0.9 * cos(phi);\n        \n        translate([x, y, z])\n        rotate([0, acos(z/sqrt(x*x+y*y+z*z))*180/3.14159, atan2(y,x)*180/3.14159])\n        drupelet(2.5 + 0.5*sin(i*3), 0.5);\n    }\n}\n\n// Calyx (leafy top) with 5 lobes\nmodule calyx() {\n    difference() {\n        // Base calyx disc\n        translate([0, 0, berry_height/2 - 1])\n        scale([1, 1, 0.3])\n        cylinder(h=3, d=berry_diameter*0.8, $fn=32);\n        \n        // Center hole\n        translate([0, 0, berry_height/2 - 1])\n        cylinder(h=4, d=6, $fn=16);\n    }\n    \n    // Calyx lobes\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, berry_diameter*0.3, berry_height/2])\n        rotate([45, 0, 0])\n        scale([1, 1.5, 0.5])\n        cylinder(h=8, d1=6, d2=4, $fn=4);\n    }\n}\n\n// Stem connection\nmodule stem() {\n    translate([0, 0, berry_height/2 + 2])\n    cylinder(h=10, d1=4, d2=2, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Core berry\n    berry_body();\n    \n    // Surface texture\n    surface_drupelets();\n    \n    // Top structures\n    calyx();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "loganberry",
    "openscad_code": "// Loganberry - medium complexity realistic style\n// Overall dimensions: ~70mm long, ~35mm wide, ~35mm tall\n\nmodule berry_body() {\n    // Main berry body - elongated ellipsoid\n    scale([1.2, 1, 0.8])\n        sphere(d=30, $fn=50);\n    \n    // Add slight bulge in middle\n    translate([0, 0, -2])\n        scale([1.3, 1.1, 0.6])\n            sphere(d=20, $fn=40);\n}\n\nmodule drupelets() {\n    // Create surface texture with small spheres (drupelets)\n    for (i = [0:35]) {\n        angle1 = i * 137.5;  // Golden angle for natural distribution\n        angle2 = (i * 73) % 180;\n        radius = 15 + sin(i * 0.5) * 3;\n        \n        translate([\n            cos(angle1) * sin(angle2) * radius,\n            sin(angle1) * sin(angle2) * radius,\n            cos(angle2) * radius - 5\n        ]) {\n            scale([1, 1, 0.7])\n                sphere(d=2.5 + sin(i) * 0.5, $fn=12);\n        }\n    }\n}\n\nmodule calyx() {\n    // Top calyx with 5 sepals\n    translate([0, 0, 12.5])\n        cylinder(h=3, d1=8, d2=6, $fn=20);\n    \n    // Sepal lobes\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 3.5, 12])\n                rotate([30, 0, 0])\n                    scale([1, 0.5, 1])\n                        cylinder(h=6, d1=2, d2=0.5, $fn=8);\n    }\n}\n\nmodule stem_attachment() {\n    // Small stem scar\n    translate([0, 0, 15])\n        cylinder(h=1, d=4, $fn=20);\n    \n    // Tiny center depression\n    translate([0, 0, 15.5])\n        cylinder(h=1, d=2, $fn=10);\n}\n\nmodule loganberry() {\n    union() {\n        // Main berry structure\n        berry_body();\n        \n        // Surface drupelets\n        drupelets();\n        \n        // Top calyx\n        calyx();\n        \n        // Stem attachment point\n        stem_attachment();\n    }\n}\n\n// Position the berry upright for printing\nrotate([0, 180, 0])\n    loganberry();",
    "renders": true
  },
  {
    "fruit": "tayberry",
    "openscad_code": "// Tayberry model - realistic medium complexity\n// Dimensions: ~60mm long, 25mm diameter\n// Designed for FDM 3D printing (0.8mm walls, minimal supports)\n\n// Main parameters\nberry_length = 60;\nberry_diameter = 25;\nsegment_count = 12;\ndruplet_rows = 8;\ndruplet_size = 1.4;\n\n// Berry core\nmodule berry_core() {\n    difference() {\n        union() {\n            // Main body segments\n            for(i = [0:segment_count-1]) {\n                translate([0, 0, i * berry_length/segment_count])\n                rotate([0, 0, i * 15])\n                scale([1 - i*0.02, 1 - i*0.015, 1])\n                sphere(d=berry_diameter * (1 - i*0.03), $fn=24);\n            }\n        }\n        \n        // Hollow core for printing\n        translate([0, 0, -2])\n        cylinder(d=berry_diameter-4, h=berry_length+4, $fn=32);\n    }\n}\n\n// Individual druplet\nmodule druplet(x, y, z, angle) {\n    translate([x, y, z])\n    rotate([0, 0, angle])\n    sphere(d=druplet_size, $fn=8);\n}\n\n// Druplet pattern on berry surface\nmodule druplets() {\n    for(seg = [0:segment_count-1]) {\n        seg_z = seg * berry_length/segment_count;\n        radius = (berry_diameter/2) * (1 - seg*0.03);\n        \n        for(row = [0:druplet_rows-1]) {\n            angle = row * 360/druplet_rows;\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            // Offset alternate rows\n            offset = (seg % 2) * 180/druplet_rows;\n            \n            // Top hemisphere druplets\n            druplet(x, y, seg_z + 2, angle + offset);\n            \n            // Bottom hemisphere druplets\n            if(seg_z > 0) {\n                druplet(x, y, seg_z - 2, angle + offset + 180);\n            }\n        }\n    }\n}\n\n// Calyx (leafy top)\nmodule calyx() {\n    translate([0, 0, berry_length])\n    union() {\n        // Central core\n        cylinder(d=8, h=3, $fn=16);\n        \n        // Sepals\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            translate([0, 3.5, 0])\n            rotate([25, 0, 0])\n            scale([1, 1.2, 0.3])\n            sphere(d=6, $fn=8);\n        }\n        \n        // Small sepals between main ones\n        for(i = [0:4]) {\n            rotate([0, 0, i*72 + 36])\n            translate([0, 2.5, -0.5])\n            rotate([35, 0, 0])\n            scale([0.7, 0.9, 0.2])\n            sphere(d=4, $fn=6);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, berry_length+3])\n    rotate([0, 0, 15])\n    cylinder(d1=3, d2=2, h=15, $fn=12);\n}\n\n// Assembly\nunion() {\n    // Main berry with druplets\n    difference() {\n        union() {\n            berry_core();\n            druplets();\n        }\n        \n        // Remove internal supports\n        translate([0, 0, -1])\n        cylinder(d=berry_diameter-3.2, h=berry_length+2, $fn=32);\n    }\n    \n    // Top parts\n    calyx();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "olallieberry",
    "openscad_code": "// Olallieberry - medium complexity realistic style\n// Size: ~70mm long, designed for 3D printing\n\n// Main berry body\nmodule berry_body() {\n    difference() {\n        // Main oblong body\n        scale([1.2, 1, 0.8])\n        sphere(d=40, $fn=50);\n        \n        // Top indentation\n        translate([0, 0, 15])\n        scale([0.4, 0.4, 0.5])\n        sphere(d=40, $fn=30);\n        \n        // Bottom point\n        translate([0, 0, -16])\n        scale([0.2, 0.2, 0.5])\n        sphere(d=40, $fn=20);\n    }\n}\n\n// Individual drupelet\nmodule drupelet(size=2.5, height=1.5) {\n    difference() {\n        // Main drupelet sphere\n        scale([1, 1, 0.7])\n        sphere(d=size, $fn=10);\n        \n        // Top dimple\n        translate([0, 0, height/2])\n        sphere(d=size*0.6, $fn=8);\n    }\n}\n\n// Generate drupelet positions on berry surface\nmodule drupelets() {\n    // Top ring\n    for(i=[0:15]) {\n        angle = i * 22.5;\n        translate([0, 0, 15])\n        rotate([90, 0, angle])\n        translate([0, 20, 0])\n        drupelet(3, 2);\n    }\n    \n    // Middle rings\n    for(ring=[1:2]) {\n        z = 15 - ring * 8;\n        radius = 20 - ring * 3;\n        for(i=[0:20]) {\n            angle = i * 18;\n            translate([0, 0, z])\n            rotate([90, 0, angle])\n            translate([0, radius, 0])\n            drupelet(2.5, 1.5);\n        }\n    }\n    \n    // Bottom ring\n    for(i=[0:12]) {\n        angle = i * 30;\n        translate([0, 0, -5])\n        rotate([90, 0, angle])\n        translate([0, 15, 0])\n        drupelet(2, 1);\n    }\n    \n    // Bottom tip\n    translate([0, 0, -12])\n    scale([0.8, 0.8, 1])\n    drupelet(2, 1);\n}\n\n// Calyx (leafy top)\nmodule calyx() {\n    difference() {\n        // Base calyx\n        cylinder(h=3, r1=8, r2=5, $fn=8);\n        \n        // Center hole\n        cylinder(h=4, r1=2, r2=1.5, $fn=8);\n    }\n    \n    // Calyx leaves\n    for(i=[0:5]) {\n        rotate([0, 0, i * 60])\n        translate([5, 0, 1.5])\n        rotate([0, 110, 0])\n        scale([0.4, 1, 0.5])\n        cylinder(h=8, r1=3, r2=0.5, $fn=3);\n    }\n}\n\n// Stem\nmodule stem() {\n    difference() {\n        // Main stem cylinder\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=12, r1=1, r2=0.8, $fn=8);\n        \n        // Cut bottom flat\n        translate([0, 0, -1])\n        cube([20, 20, 2], center=true);\n    }\n}\n\n// Assemble the olallieberry\nunion() {\n    // Main berry with drupelets\n    union() {\n        berry_body();\n        color(\"darkmagenta\")\n        drupelets();\n    }\n    \n    // Calyx and stem\n    translate([0, 0, 16])\n    color(\"darkgreen\")\n    calyx();\n    \n    translate([0, 0, 18])\n    color(\"saddlebrown\")\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "marionberry",
    "openscad_code": "// Marionberry 3D model\n// Medium complexity, realistic style\n// Designed for 3D printing - approximately 60mm long\n\n// Main parameters\nberry_length = 60;\nberry_width = 45;\nberry_height = 35;\nberry_segments = 12;\nsegment_depth = 3;\nsegment_width = 2;\n\n// Druplet parameters\ndruplet_radius = 2.5;\ndruplet_rows = 8;\ndruplets_per_row = [6, 8, 10, 12, 12, 10, 8, 6];\ndruplet_offset = 1.5;\n\n// Core parameters\ncore_radius = 8;\ncore_length = 55;\n\n// Stem parameters\nstem_length = 8;\nstem_radius = 3;\n\nmodule marionberry_core() {\n    // Central core - slightly elongated sphere\n    scale([1, 1.2, 0.8])\n    sphere(r = core_radius, $fn = 20);\n}\n\nmodule druplet_cluster() {\n    // Create cluster of individual druplets around the core\n    for (row = [0 : druplet_rows - 1]) {\n        row_angle = 180 * row / (druplet_rows - 1);\n        y_offset = (row_angle - 90) * berry_height / 180;\n        \n        for (i = [0 : druplets_per_row[row] - 1]) {\n            angle = 360 * i / druplets_per_row[row];\n            x_pos = cos(angle) * (berry_width/2 - druplet_radius);\n            z_pos = sin(angle) * (berry_length/2 - druplet_radius) * 0.8;\n            y_pos = y_offset;\n            \n            translate([x_pos, y_pos, z_pos])\n            sphere(r = druplet_radius, $fn = 8);\n        }\n    }\n}\n\nmodule berry_segments() {\n    // Create raised segments along berry surface\n    difference() {\n        union() {\n            // Main berry body\n            scale([1, 0.9, 0.7])\n            sphere(r = berry_width/2, $fn = berry_segments * 2);\n            \n            // Raised segments\n            for (i = [0 : berry_segments - 1]) {\n                rotate([0, 0, i * 360/berry_segments])\n                translate([0, 0, -berry_length/4])\n                linear_extrude(height = berry_length/2, twist = 15)\n                offset(r = segment_width)\n                offset(r = -segment_width)\n                circle(r = berry_width/2 - segment_depth, $fn = 3);\n            }\n        }\n        \n        // Hollow out center for printing\n        translate([0, 0, -5])\n        cylinder(h = berry_length + 10, r1 = core_radius - 2, r2 = core_radius - 2, $fn = 20);\n    }\n}\n\nmodule berry_stem() {\n    // Create stem at top of berry\n    translate([0, berry_height/2 - 2, 0])\n    rotate([90, 0, 0])\n    cylinder(h = stem_length, r = stem_radius, $fn = 8);\n    \n    // Stem collar\n    translate([0, berry_height/2 - 2, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 3, r1 = stem_radius + 2, r2 = stem_radius, $fn = 8);\n}\n\n// Main assembly\nunion() {\n    // Base berry shape with segments\n    berry_segments();\n    \n    // Add druplet details\n    druplet_cluster();\n    \n    // Add stem\n    berry_stem();\n    \n    // Optional: Add small hole for keychain or string\n    // translate([0, berry_height/2 + 3, 0])\n    // rotate([90, 0, 0])\n    // cylinder(h = 10, r = 1.5, $fn = 8);\n}",
    "renders": true
  },
  {
    "fruit": "saskatoon",
    "openscad_code": "// Saskatoon berry cluster for 3D printing\n// Medium complexity realistic style\n// Size: ~60 mm tall\n\n// Main parameters\nberry_diameter = 6;\nberry_rows = 4;\nberries_per_row = [5,4,3,2];\ncluster_height = 45;\nstem_diameter = 3;\nstem_length = 20;\nwall_thickness = 1.2;\n\n// Berry module with realistic shape\nmodule realistic_berry(d=berry_diameter) {\n    // Main berry body\n    sphere(d=d, $fn=32);\n    \n    // Calyx at top\n    translate([0,0,d/2])\n    difference() {\n        cylinder(h=d/4, d1=d/2.5, d2=d/4.5, $fn=16);\n        // Hollow center\n        cylinder(h=d/3, d1=d/4, d2=d/6, $fn=8);\n    }\n    \n    // Small indentations for texture\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n        translate([d*0.35,0,d*0.4])\n        rotate([90,0,0])\n        scale([1,0.7,0.7])\n        sphere(d=d/8, $fn=8);\n    }\n}\n\n// Main berry cluster\nmodule berry_cluster() {\n    // Create the berries in a natural cluster shape\n    for(row=[0:berry_rows-1]) {\n        row_height = row * (berry_diameter * 0.8);\n        row_angle = row * 15;\n        \n        for(i=[0:berries_per_row[row]-1]) {\n            angle = 360 / berries_per_row[row] * i + row * 10;\n            radius = (berry_rows - row) * berry_diameter * 0.6;\n            \n            rotate([row_angle,0,angle])\n            translate([radius,0,row_height])\n            rotate([0,0,rand()*30])\n            rotate([rand()*15-7.5, rand()*15-7.5, 0])\n            realistic_berry();\n        }\n    }\n    \n    // Central berry at top\n    translate([0,0,cluster_height-berry_diameter])\n    realistic_berry(berry_diameter*1.1);\n}\n\n// Stem with leaves\nmodule stem_and_leaves() {\n    // Main stem\n    color(\"saddlebrown\")\n    rotate([0,0,5])\n    cylinder(h=stem_length+cluster_height, d=stem_diameter, $fn=8);\n    \n    // Small branching stems\n    for(i=[0:3]) {\n        rotate([0,0,i*90+15])\n        translate([0,0,cluster_height - i*8])\n        rotate([75,0,0])\n        cylinder(h=8, d1=stem_diameter*0.6, d2=stem_diameter*0.3, $fn=6);\n    }\n    \n    // Leaves\n    color(\"forestgreen\")\n    for(i=[0:2]) {\n        rotate([0,0,i*120+30])\n        translate([0,0,cluster_height/2 + i*10])\n        rotate([45,0,0])\n        scale([1,0.6,0.1])\n        sphere(d=15, $fn=32);\n    }\n}\n\n// Base for 3D printing\nmodule print_base() {\n    // Flatten bottom for printing\n    translate([0,0,-wall_thickness])\n    cylinder(h=wall_thickness*2, d=30, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Add base\n    print_base();\n    \n    // Add stem and leaves\n    stem_and_leaves();\n    \n    // Add berry cluster\n    translate([0,0,stem_length])\n    berry_cluster();\n}",
    "renders": true
  },
  {
    "fruit": "serviceberry",
    "openscad_code": "// Serviceberry (Amelanchier) - Realistic Medium Complexity\n// Dimensions: approx 90mm tall x 60mm wide\n// 3D printable with 2mm wall thickness\n\nmodule branch_segment(r=3, h=20, twist=0) {\n    // Tapered branch segment with slight angle\n    for(i=[0:5]) {\n        translate([0,0,i*h/5])\n        rotate([0,0,twist*i/5])\n        cylinder(h1=r*(1-i/10), h2=r*(0.9-i/10), h=h/5+0.1, $fn=8);\n    }\n}\n\nmodule leaf() {\n    // Oval leaf with serrated edge approximation\n    scale([1, 1.5, 0.2])\n    difference() {\n        sphere(12, $fn=16);\n        // Remove bottom half for flat leaf\n        translate([0,-15,0])\n        cube([30,30,30], center=true);\n    }\n}\n\nmodule berry_cluster() {\n    // 5-7 berries in natural cluster\n    for(i=[0:30:180]) {\n        rotate([0,0,i])\n        translate([8,0,0])\n        sphere(4, $fn=12);\n    }\n    // Central berry\n    sphere(5, $fn=12);\n}\n\nmodule main_branch() {\n    // Primary trunk with realistic angles\n    branch_segment(r=4, h=35, twist=5);\n    \n    translate([0,0,30])\n    rotate([10,0,5])\n    branch_segment(r=3, h=25, twist=-3);\n    \n    translate([0,0,25])\n    rotate([15,0,-10])\n    branch_segment(r=2.5, h=20, twist=8);\n}\n\nmodule leaves() {\n    // Multiple leaves at branch tips\n    translate([0,0,50])\n    rotate([0,0,45])\n    leaf();\n    \n    translate([5,5,45])\n    rotate([20,30,-30])\n    leaf();\n    \n    translate([-8,3,42])\n    rotate([-15,-20,60])\n    leaf();\n    \n    translate([3,-6,48])\n    rotate([10,-25,90])\n    leaf();\n}\n\nmodule berries() {\n    // Berries at leaf nodes\n    translate([2,8,52])\n    rotate([0,0,30])\n    berry_cluster();\n    \n    translate([-5,5,47])\n    rotate([0,0,-45])\n    berry_cluster();\n}\n\n// Main assembly\nunion() {\n    // Trunk and branches\n    main_branch();\n    \n    // Leaves\n    leaves();\n    \n    // Berries\n    berries();\n    \n    // Small twigs\n    translate([0,0,40])\n    rotate([30,0,120])\n    branch_segment(r=1.5, h=12, twist=15);\n    \n    translate([0,0,45])\n    rotate([-25,0,-60])\n    branch_segment(r=1.5, h=10, twist=-10);\n}",
    "renders": true
  },
  {
    "fruit": "rowanberry",
    "openscad_code": "// Rowanberry Cluster - Realistic Medium Complexity\n// Overall dimensions: ~60mm height, ~40mm width\n\n$fn = 36;  // Smooth curves for 3D printing\n\nmodule berry(radius=4, height=5) {\n    // Slightly elongated berry with pointed tip\n    union() {\n        sphere(r=radius);\n        translate([0,0,height/2]) \n            scale([0.8,0.8,1.2]) \n                sphere(r=radius*0.8);\n    }\n}\n\nmodule leaf(length=15, width=8) {\n    // Pinnate leaf with serrated edges\n    difference() {\n        // Main leaf shape\n        scale([1,0.6,0.1]) \n            cylinder(h=length, r1=width/2, r2=width/4);\n        \n        // Leaflets cuts\n        for(i=[-1:1]) {\n            translate([0, i*2.5, length/2-5]) \n                rotate([0,90,0]) \n                    cylinder(h=width*0.7, r=1.5, $fn=6);\n        }\n        \n        // Serrated edges\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) \n                translate([width/2-0.5,0,length/2]) \n                    cube([1,2,3], center=true);\n        }\n    }\n}\n\nmodule berry_cluster() {\n    // Central stem\n    color(\"brown\") \n        cylinder(h=30, r=0.8);\n    \n    // Berries arranged in umbrella shape\n    for(i=[0:4]) {\n        angle = i*72;\n        for(j=[0:2]) {\n            radius = 10 + j*3;\n            translate([\n                cos(angle)*radius,\n                sin(angle)*radius,\n                20 - j*3\n            ]) {\n                color(\"darkorange\") berry(3.5, 4.5);\n                \n                // Tiny calyx on top\n                color(\"darkgreen\") \n                    translate([0,0,4.5]) \n                        cylinder(h=0.5, r1=1, r2=0.5);\n            }\n        }\n    }\n}\n\nmodule full_branch() {\n    union() {\n        // Main branch\n        color(\"brown\") {\n            rotate([10,0,0]) \n                cylinder(h=50, r=1.2);\n            \n            // Secondary branches\n            for(i=[0:3]) {\n                rotate([0,0,i*90]) \n                    translate([0,0,15+i*10]) \n                        rotate([30,0,0]) \n                            cylinder(h=20, r=0.8);\n            }\n        }\n        \n        // Berry clusters\n        translate([0,0,35]) berry_cluster();\n        translate([10,5,25]) rotate([0,0,45]) berry_cluster();\n        translate([-8,-3,30]) rotate([0,0,-30]) berry_cluster();\n        \n        // Leaves at branch ends\n        translate([0,0,50]) \n            rotate([90,0,0]) \n                leaf(15, 8);\n        translate([15,10,35]) \n            rotate([60,0,45]) \n                leaf(12, 6);\n        translate([-12,-8,40]) \n            rotate([80,0,-30]) \n                leaf(13, 7);\n    }\n}\n\n// Main assembly\nfull_branch();\n\n// Add base for stability\ntranslate([0,0,-2]) \n    color(\"brown\")\n        cylinder(h=2, r=5);",
    "renders": true
  },
  {
    "fruit": "hawthorn",
    "openscad_code": "// Hawthorn branch with leaves and berries - realistic style\n// Medium complexity, 3D printable\n\n$fn = 32;  // Smooth curves\n\n// Main dimensions\nbranch_dia = 4;\nbranch_len = 60;\nberry_dia = 6;\nleaf_len = 20;\nleaf_width = 15;\nleaf_thick = 1.2;\n\nmodule hawthorn() {\n    union() {\n        // Main branch\n        translate([0, 0, 0])\n            cylinder(h = branch_len, d1 = branch_dia*1.5, d2 = branch_dia, center = false);\n        \n        // Side branches\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, i*18])\n            rotate([30, 0, 0])\n            cylinder(h = 25, d1 = branch_dia*0.8, d2 = branch_dia*0.5, center = false);\n        }\n        \n        // Leaves and berries on each side branch\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, 18 + i*3])\n            rotate([30, 0, 0])\n            leaf_cluster();\n        }\n        \n        // Top leaf cluster\n        translate([0, 0, branch_len])\n        rotate([0, 0, 0])\n        leaf_cluster();\n    }\n}\n\nmodule leaf_cluster() {\n    union() {\n        // Berries in cluster\n        for(j = [1:5]) {\n            rotate([0, 0, j*72])\n            translate([10, 0, 15])\n            sphere(d = berry_dia);\n        }\n        \n        // Leaves around berries\n        for(j = [1:5]) {\n            rotate([0, 0, j*72 + 36])\n            translate([8, 0, 12])\n            rotate([0, 0, 30])\n            hawthorn_leaf();\n        }\n    }\n}\n\nmodule hawthorn_leaf() {\n    // Leaf blade with lobed shape\n    difference() {\n        // Main leaf shape\n        scale([1, 0.6, 1])\n        rotate([90, 0, 0])\n        cylinder(h = leaf_len, r1 = leaf_width/2, r2 = 2, center = false);\n        \n        // Lobes on sides\n        for(k = [1:3]) {\n            translate([0, k*5, leaf_len*0.3])\n            rotate([0, 90, 0])\n            cylinder(h = leaf_width*0.4, r = 2, center = true);\n        }\n    }\n    \n    // Leaf stem\n    translate([0, 0, -2])\n    rotate([90, 0, 0])\n    cylinder(h = 4, d = 1.5, center = false);\n    \n    // Veins\n    translate([0, 0, leaf_thick/2])\n    rotate([90, 0, 0])\n    cylinder(h = leaf_len-2, d = 0.5, center = false);\n    \n    for(m = [1:3]) {\n        translate([0, 0, leaf_thick/2])\n        rotate([90, 0, 30])\n        translate([0, 0, m*5])\n        rotate([0, 90, 0])\n        cylinder(h = leaf_width*0.3, d = 0.3, center = true);\n    }\n}\n\n// Generate the hawthorn\nhawthorn();",
    "renders": true
  },
  {
    "fruit": "juneberry",
    "openscad_code": "// Juneberry 3D model - medium complexity realistic style\n// Dimensions approximately 60mm tall x 35mm diameter\n\n$fn = 32;  // Smooth curves for printing\n\nmodule juneberry() {\n    // Main berry body - slightly elongated sphere\n    translate([0, 0, 15])\n    scale([1, 1, 1.2])\n    sphere(d = 30);\n    \n    // Crown/sepals at top\n    translate([0, 0, 33])\n    union() {\n        // Five sepals arranged in a star pattern\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 6, 0])\n            rotate([20, 0, 0])\n            scale([0.8, 1, 0.3])\n            cylinder(h = 8, d1 = 5, d2 = 2);\n        }\n    }\n    \n    // Small indent at blossom end\n    translate([0, 0, 33])\n    rotate([0, 0, 36])\n    cube([5, 2, 1], center = true);\n    \n    // Surface texture - small bumps\n    difference() {\n        union() {\n            // Base berry\n            translate([0, 0, 15])\n            scale([1, 1, 1.2])\n            sphere(d = 30);\n            \n            // Tiny surface bumps\n            for(a = [0:30:150]) {\n                for(b = [0:45:135]) {\n                    rotate([a, b, 0])\n                    translate([0, 0, 16])\n                    sphere(d = 1.5);\n                }\n            }\n        }\n        \n        // Create slight indent between bumps\n        for(a = [15:30:165]) {\n            for(b = [22.5:45:157.5]) {\n                rotate([a, b, 0])\n                translate([0, 0, 16])\n                sphere(d = 1.2);\n            }\n        }\n    }\n    \n    // Stem attachment point\n    translate([0, 0, 33])\n    cylinder(h = 2, d = 3);\n    \n    // Small color variation spots\n    for(i = [0:7]) {\n        rotate([0, 0, i * 51.4])\n        translate([8, 0, 20 + sin(i) * 3])\n        sphere(d = 2.5);\n    }\n    \n    // Bottom slightly flattened\n    translate([0, 0, 0])\n    cube([35, 35, 5], center = true);\n}\n\n// Render the berry\njuneberry();",
    "renders": true
  },
  {
    "fruit": "cranberry",
    "openscad_code": "// Realistic Cranberry for 3D printing\n// Medium complexity with natural dimples and stem\n\n$fn = 48;  // Smooth curves for printing\n\nmodule stem() {\n    // Small stem connector\n    translate([0, 0, 15]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 8, r1 = 2, r2 = 1.5);\n        }\n    }\n}\n\nmodule dimple(x, y, z, size) {\n    // Creates indented dimples for realistic texture\n    translate([x, y, z]) {\n        sphere(r = size);\n    }\n}\n\nmodule cranberry_body() {\n    // Main body - slightly squashed sphere for natural look\n    scale([1, 1, 0.9]) {\n        sphere(r = 25);\n    }\n    \n    // Add subtle surface irregularities\n    for (i = [0:35]) {\n        rotate([rand_vec[i][0], rand_vec[i][1], rand_vec[i][2]]) {\n            translate([rand_vec[i][3]*22, 0, 0]) {\n                scale([1, 0.8, 0.8]) {\n                    sphere(r = 1.5 + rand_vec[i][4]);\n                }\n            }\n        }\n    }\n}\n\n// Pre-computed random vectors for natural look\nrand_vec = [\n    [12, 34, 56, 0.92, 0.3], [45, 67, 23, 0.85, 0.2], [78, 12, 89, 0.95, 0.4],\n    [23, 45, 67, 0.88, 0.5], [56, 78, 12, 0.91, 0.3], [89, 23, 45, 0.87, 0.2],\n    [34, 56, 78, 0.93, 0.4], [67, 89, 23, 0.86, 0.3], [12, 34, 56, 0.94, 0.5],\n    [45, 67, 78, 0.89, 0.2], [78, 12, 34, 0.92, 0.4], [23, 45, 67, 0.88, 0.3],\n    [56, 78, 89, 0.91, 0.5], [89, 12, 23, 0.87, 0.2], [34, 56, 78, 0.93, 0.4],\n    [67, 89, 12, 0.90, 0.3], [12, 23, 34, 0.88, 0.5], [45, 56, 67, 0.92, 0.2],\n    [78, 89, 12, 0.89, 0.4], [23, 34, 45, 0.91, 0.3], [56, 67, 78, 0.87, 0.5],\n    [89, 12, 23, 0.93, 0.2], [34, 45, 56, 0.90, 0.4], [67, 78, 89, 0.88, 0.3],\n    [12, 23, 34, 0.92, 0.5], [45, 56, 67, 0.89, 0.2], [78, 89, 12, 0.91, 0.4],\n    [23, 34, 45, 0.87, 0.3], [56, 67, 78, 0.93, 0.5], [89, 12, 23, 0.90, 0.2],\n    [34, 45, 56, 0.88, 0.4], [67, 78, 89, 0.92, 0.3], [12, 23, 34, 0.89, 0.5],\n    [45, 56, 67, 0.91, 0.2], [78, 89, 12, 0.87, 0.4]\n];\n\nmodule surface_dimples() {\n    // Create realistic dimples on surface\n    difference() {\n        cranberry_body();\n        \n        // Top dimples\n        dimple(5, 8, 15, 4);\n        dimple(-8, -5, 12, 3.5);\n        dimple(7, -6, 18, 3);\n        \n        // Side dimples\n        dimple(18, 12, 5, 3.5);\n        dimple(-15, 10, -8, 4);\n        dimple(12, -15, -5, 3);\n        \n        // Bottom dimples\n        dimple(-5, -7, -18, 3.5);\n        dimple(8, 5, -15, 4);\n        dimple(-6, 8, -12, 3);\n        \n        // Additional micro-dimples for texture\n        for (i = [0:15]) {\n            rotate([i*22.5, 0, 0]) {\n                translate([23, 0, i*2 - 15]) {\n                    sphere(r = 1.2);\n                }\n            }\n        }\n    }\n}\n\nmodule final_cranberry() {\n    union() {\n        // Main body with texture\n        surface_dimples();\n        \n        // Add stem\n        stem();\n    }\n}\n\n// Generate the cranberry centered at origin\nfinal_cranberry();",
    "renders": true
  },
  {
    "fruit": "bearberry",
    "openscad_code": "// Bearberry (Arctostaphylos uva-ursi)\n// Medium complexity realistic model\n// Safe for 3D printing – no steep overhangs, 1.5 mm wall thickness\n\n// Overall dimensions: ~65 mm tall, 75 mm wide\n$fn = 24;        // Smoother curves\n\nmodule berry(r = 3, h = 4){\n    // Single red berry – slightly flattened sphere on a short cylinder\n    translate([0,0,h*0.3])\n        sphere(r);\n    cylinder(h, r*0.8, r*0.8);\n}\n\nmodule leaf(l = 12, w = 5, t = 1.5){\n    // Oval leaf with gentle taper toward tip\n    // Extruded 2D shape for clean print\n    linear_extrude(height = t, center = true, scale = [1, 1, 0.8])\n        hull(){\n            circle(d = w, $fn = 20);\n            translate([l - w/2, 0, 0]) circle(d = w*0.6, $fn = 20);\n        }\n}\n\nmodule stem_segment(h = 10, r = 1.2){\n    // Small cylindrical segment\n    cylinder(h, r, r);\n}\n\nmodule berry_cluster(n = 5){\n    // Group of berries on short curved stems\n    union(){\n        for(i = [0 : n-1]){\n            a = i * 360 / n + 15*sin(i*40);\n            r = 4 + 1.2*i;\n            translate([r*cos(a), r*sin(a), 0]){\n                rotate([0, 90 - i*5, a + 90])\n                    stem_segment(4 + i*0.5);\n                translate([0, 4 + i*0.5, 0])\n                    berry(2.5 + 0.2*i);\n            }\n        }\n    }\n}\n\nmodule simple_veins(){\n    // Subtle raised veins on leaf surface\n    // Two main veins plus secondary\n    color(\"darkgreen\")\n    for(v = [-45, 0, 45]){\n        rotate([0, 0, v])\n            translate([0, -0.75, 0.8])\n                cube([6, 0.4, 0.3], center = true);\n    }\n}\n\nmodule foliage_pair(){\n    // Two opposite leaves with gentle upward angle\n    union(){\n        // Left leaf\n        rotate([0, -10, -20])\n            leaf();\n        // Right leaf\n        mirror([1, 0, 0])\n            rotate([0, -10, -20])\n                leaf();\n    }\n}\n\nmodule branch_with_leaves(len = 30){\n    // Central woody twig with leaves and berries\n    union(){\n        // Main twig\n        color(\"brown\")\n        cylinder(len, 1.4, 1.1);\n        // Leaves in pairs every 8 mm\n        for(z = [len*0.2 : 8 : len*0.8]){\n            translate([0, 0, z])\n                rotate([0, 0, 60*z/len])\n                    foliage_pair();\n        }\n        // Berry cluster at tip\n        translate([0, 0, len + 2])\n            berry_cluster();\n    }\n}\n\n// Assembly\nunion(){\n    // Base stem (main trunk)\n    color(\"brown\")\n    cylinder(8, 2, 1.8);\n    \n    // Three main branches radiating out\n    for(a = [0, 120, 240]){\n        rotate([0, 0, a])\n            translate([0, 0, 8])\n                rotate([a*0.5 - 30, 0, 0])\n                    branch_with_leaves(25 + a*0.08);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "crowberry",
    "openscad_code": "// Crowberry (Empetrum nigrum) - realistic medium complexity\n// Size: ~85 mm total length\n\n// Main parameters\nberry_radius = 4;\nstem_thickness = 1.5;\nleaf_length = 12;\nleaf_width = 2.5;\nberry_count = 12;\nbranch_thickness = 3;\n\n// Berry module with slight imperfections\nmodule berry(r) {\n    difference() {\n        // Main berry body\n        sphere(r);\n        \n        // Small indentations for texture\n        for(i = [0:20]) {\n            rotate([rand(0,360), rand(0,360), rand(0,360)])\n                translate([0, 0, r-0.2])\n                    sphere(r/8);\n        }\n        \n        // Calyx scar at top\n        translate([0, 0, r-0.1])\n            cylinder(r1=r/3, r2=r/4, h=0.5, $fn=8);\n    }\n}\n\n// Leaf with realistic shape\nmodule leaf() {\n    difference() {\n        // Basic leaf shape\n        scale([1, leaf_width/leaf_length, 0.3])\n            rotate_extrude(angle=180, $fn=40)\n                translate([leaf_length/2, 0, 0])\n                    circle(d=leaf_length, $fn=20);\n        \n        // Central vein\n        translate([0, 0, -0.2])\n            cube([leaf_length, 0.3, 0.8], center=true);\n        \n        // Side veins\n        for(i = [-3:3]) {\n            rotate([0, 0, 15*i])\n                translate([leaf_length/4, 0, -0.1])\n                    scale([1, 0.3, 0.5])\n                        cube([leaf_length/2, 0.2, 0.4], center=true);\n        }\n    }\n}\n\n// Main branch with berries\nmodule crowberry_branch() {\n    // Main stem\n    rotate([90, 0, 0])\n        cylinder(h=50, r=branch_thickness, $fn=8);\n    \n    // Side branches\n    for(i = [0:berry_count-1]) {\n        angle = i * 30;\n        height = 5 + i * 3.5;\n        \n        // Side branch\n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                translate([branch_thickness, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=8, r=stem_thickness, $fn=6);\n        \n        // Berry cluster\n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                translate([branch_thickness + 6, 0, 0])\n                    for(j = [0:2]) {\n                        rotate([j*120, 0, 0])\n                            translate([0, berry_radius*1.2, 0])\n                                berry(berry_radius);\n                    }\n        \n        // Leaves\n        if(i % 2 == 0) {\n            translate([0, 0, height+3])\n                rotate([0, 0, angle-60])\n                    rotate([0, 30, 0])\n                        leaf();\n            \n            translate([0, 0, height+3])\n                rotate([0, 0, angle+60])\n                    rotate([0, -30, 0])\n                        scale([1, -1, 1])\n                            leaf();\n        }\n    }\n}\n\n// Generate the model\ncrowberry_branch();",
    "renders": true
  },
  {
    "fruit": "cowberry",
    "openscad_code": "// Cowberry (Vaccinium vitis-idaea) - realistic style, medium complexity\n// Approx. 60mm long, 3D printable\n\n$fn = 32;\n\n// Main berry body\nmodule berry_body() {\n    // Main sphere slightly flattened\n    scale([1, 1, 0.85])\n    sphere(d = 12);\n}\n\n// Small indent at top\nmodule top_indent() {\n    translate([0, 0, 5.1])\n    rotate([180, 0, 0])\n    cylinder(h = 3, r1 = 2.5, r2 = 0);\n}\n\n// Calyx at top\nmodule calyx() {\n    difference() {\n        translate([0, 0, 6])\n        scale([1, 1, 0.5])\n        sphere(d = 7);\n        \n        translate([0, 0, 5])\n        sphere(d = 8);\n    }\n}\n\n// Small sepals\nmodule sepal() {\n    // Create 5 small sepals around the top\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([3.5, 0, 6.5])\n        rotate([30, 0, 0])\n        scale([0.3, 1, 0.1])\n        cylinder(h = 3, r = 1);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_bumps() {\n    // Random small bumps for realistic texture\n    for(a = [0:30:179]) {\n        for(b = [0:45:359]) {\n            rotate([a, 0, b])\n            translate([0, 0, 6])\n            scale([0.2, 0.2, 0.1])\n            sphere(d = 1.5);\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, -5.5])\n    cylinder(h = 2, r1 = 2, r2 = 1.5);\n}\n\n// Complete cowberry\nmodule cowberry() {\n    difference() {\n        union() {\n            // Main body\n            berry_body();\n            \n            // Calyx\n            calyx();\n            \n            // Sepals\n            sepal();\n            \n            // Stem base\n            stem_base();\n            \n            // Surface texture\n            surface_bumps();\n        }\n        \n        // Remove bottom flat part\n        translate([0, 0, -7])\n        cube([20, 20, 5], center = true);\n        \n        // Top indent\n        top_indent();\n    }\n}\n\n// Scale to realistic size\nscale([5, 5, 5])\ncowberry();",
    "renders": true
  },
  {
    "fruit": "dewberry",
    "openscad_code": "// Dewberry model - realistic style, medium complexity\n// Sized for 3D printing (~60mm length)\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule drupelet(pos, size) {\n    // Individual small drupelet (berry segment)\n    translate(pos)\n        sphere(d = size);\n}\n\nmodule berry_cluster() {\n    // Main berry body - cluster of drupelets\n    union() {\n        // Central core\n        color(\"darkpurple\")\n        sphere(d = 25);\n        \n        // Ring of drupelets around middle\n        for (i = [0:15]) {\n            angle = i * 22.5;\n            x = 12 * cos(angle);\n            y = 12 * sin(angle);\n            z = 0;\n            drupelet([x, y, z], 8);\n        }\n        \n        // Upper ring slightly offset\n        for (i = [0:12]) {\n            angle = i * 30 + 15;\n            x = 10 * cos(angle);\n            y = 10 * sin(angle);\n            z = 8;\n            drupelet([x, y, z], 7);\n        }\n        \n        // Lower ring\n        for (i = [0:12]) {\n            angle = i * 30 + 15;\n            x = 10 * cos(angle);\n            y = 10 * sin(angle);\n            z = -8;\n            drupelet([x, y, z], 7);\n        }\n        \n        // Top dome\n        drupelet([0, 0, 12], 6);\n        \n        // Bottom slightly flattened for printing\n        translate([0, 0, -12])\n            scale([1, 1, 0.3])\n                sphere(d = 20);\n    }\n}\n\nmodule stem() {\n    // Main stem connecting to plant\n    color(\"darkgreen\")\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d1 = 4, d2 = 2.5);\n}\n\nmodule sepals() {\n    // Green sepals at top of berry\n    color(\"green\")\n    for (i = [0:4]) {\n        angle = i * 72;\n        rotate([0, 0, angle])\n            translate([0, 8, 15])\n                rotate([30, 0, 0])\n                    scale([1, 0.5, 0.3])\n                        sphere(d = 8);\n    }\n}\n\nmodule leaf() {\n    // Single compound leaf with 3 leaflets\n    color(\"green\")\n    translate([-15, 0, 5])\n        rotate([0, -20, 45])\n            scale([0.8, 1, 0.2])\n                sphere(d = 25);\n    \n    translate([-25, -5, 3])\n        rotate([0, -30, 60])\n            scale([0.7, 0.9, 0.2])\n                sphere(d = 20);\n    \n    translate([-20, 10, 4])\n        rotate([0, -15, 30])\n            scale([0.75, 0.85, 0.2])\n                sphere(d = 22);\n}\n\n// Main assembly\nunion() {\n    // Berry positioned for printing\n    translate([0, 0, -12])\n        berry_cluster();\n    \n    stem();\n    sepals();\n    leaf();\n}\n\n// Flat base for stable printing\ntranslate([0, 0, -13])\n    cube([30, 30, 1], center = true);",
    "renders": true
  },
  {
    "fruit": "whortleberry",
    "openscad_code": "// Whortleberry (Vaccinium myrtillus) – realistic, 3D-printable\n// Overall height ≈ 70 mm, max diameter ≈ 45 mm\n\n$fn = 64;            // smoothness for curved surfaces\nwall = 1.2;          // printable wall thickness\n\nmodule berry() {\n    // Main berry body: slightly flattened sphere\n    translate([0,0,30])\n        scale([1, 1, 0.75])\n        sphere(d=40);\n\n    // Crown / calyx on top\n    difference() {\n        translate([0,0,55])\n            cylinder(h=7, d1=15, d2=10, center=false);\n        // inner cavity so it prints hollow\n        translate([0,0,55+wall])\n            cylinder(h=7, d1=15-2*wall, d2=10-2*wall, center=false);\n    }\n\n    // 5 calyx lobes\n    for (a=[0:72:359]) {\n        rotate([0,0,a])\n        translate([0,7.5,55+7])\n            rotate([90,0,0])\n            cylinder(h=5, d1=3, d2=1);\n    }\n}\n\nmodule surface_bumps() {\n    // Random small bumps for realism\n    seed = 42;\n    for (i=[0:35]) {\n        r = 20;\n        phi = rands(0,360,1,seed+i)[0];\n        theta = rands(20,160,1,seed+i+1)[0];\n        x = r * sin(theta) * cos(phi);\n        y = r * sin(theta) * sin(phi);\n        z = 30 + 15 * cos(theta);\n        translate([x,y,z])\n            sphere(d=2);\n    }\n}\n\nmodule stem() {\n    // Short stem for printing upright\n    difference() {\n        translate([0,0,-7])\n            cylinder(h=7, d=4);\n        translate([0,0,-7])\n            cylinder(h=7+0.1, d=4-2*wall);\n    }\n}\n\n// Assembly\nunion() {\n    difference() {               // hollow berry\n        berry();\n        translate([0,0,30])\n            scale([1,1,0.75])\n            sphere(d=40-2*wall);\n    }\n    surface_bumps();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "barberry",
    "openscad_code": "// Realistic medium-complexity barberry (Berberis vulgaris) branch\n// Main branch with alternate leaves and hanging raceme flower cluster\n// Scaled for 3D printing: ≈70 mm tall\n\n// Parameters\nbranch_d = 4;          // branch diameter (mm)\nleaf_l = 20;           // leaf length (mm)\nleaf_w = 8;            // leaf width (mm)\nleaf_thick = 0.8;      // leaf thickness (mm), printable\nberry_d = 4;           // berry diameter (mm)\nberries = 8;           // berries per raceme\nspine_l = 4;           // leaf spine length (mm)\nspine_d = 0.6;         // spine diameter (mm)\n\n// Main branch\nmodule branch() {\n    // Central woody stem\n    color(\"saddlebrown\")\n    union() {\n        // Main vertical stem\n        translate([0, 0, 10])\n        cylinder(h = 60, d = branch_d, $fn = 12);\n\n        // Slight side branch for flowers\n        translate([0, 0, 45])\n        rotate([0, 20, 30])\n        cylinder(h = 20, d = branch_d * 0.7, $fn = 10);\n    }\n}\n\n// Single leaf with correct alternate arrangement and spines\nmodule leaf(pos, angle, flip = false) {\n    // Leaf blade: spatulate shape\n    color(\"forestgreen\")\n    translate(pos)\n    rotate([0, 0, angle + (flip ? 180 : 0)])\n    rotate([0, 80, 0])\n    linear_extrude(height = leaf_thick, scale = [1, 0.3], center = true)\n    polygon(points = [\n        [-leaf_l/2, 0],\n        [-leaf_l/2 + 2, -leaf_w/2],\n        [leaf_l/2 - 5, -leaf_w/2],\n        [leaf_l/2, 0],\n        [leaf_l/2 - 5, leaf_w/2],\n        [-leaf_l/2 + 2, leaf_w/2]\n    ]);\n\n    // Marginal spines (3 each side)\n    color(\"darkgreen\")\n    for (i = [0:2]) {\n        // Left side\n        translate(pos)\n        rotate([0, 0, angle + (flip ? 180 : 0)])\n        translate([-leaf_l/2 + 5 + i*5, leaf_w/2 + 0.5, leaf_thick/2])\n        rotate([0, 0, 45])\n        cylinder(h = spine_l, d = spine_d, $fn = 6);\n\n        // Right side\n        translate(pos)\n        rotate([0, 0, angle + (flip ? 180 : 0)])\n        translate([-leaf_l/2 + 5 + i*5, -leaf_w/2 - 0.5, leaf_thick/2])\n        rotate([0, 0, -45])\n        cylinder(h = spine_l, d = spine_d, $fn = 6);\n    }\n}\n\n// Berry cluster (raceme)\nmodule berries_cluster() {\n    color(\"darkred\")\n    translate([0, 0, 55])\n    rotate([0, 20, 30])\n    union() {\n        // Peduncle\n        color(\"saddlebrown\")\n        cylinder(h = 12, d = 1.5, $fn = 8);\n\n        // Individual berries on pedicels\n        for (i = [0:berries-1]) {\n            translate([0, 0, 12 - i*1.5])\n            rotate([0, 0, i*45])\n            translate([3, 0, 0])\n            sphere(d = berry_d, $fn = 12);\n        }\n    }\n}\n\n// Assembly\nbranch();\n\n// Alternate leaves along stem\nfor (z = [15:10:45]) {\n    // Left side leaves\n    translate([0, 0, z])\n    leaf([branch_d/2 + 1, 0, 0], 30 + (z % 2 ? 15 : 0), false);\n\n    // Right side leaves (180° rotated)\n    translate([0, 0, z + 5])\n    leaf([-branch_d/2 - 1, 0, 0], 210 + (z % 2 ? 15 : 0), true);\n}\n\n// Berry cluster at tip\nberries_cluster();",
    "renders": true
  },
  {
    "fruit": "buffaloberry",
    "openscad_code": "// Buffaloberry (Shepherdia argentea)\n// Realistic style, medium complexity\n// Overall size ~60 mm\n\n// Main berry cluster\nmodule berry_cluster() {\n    // Central berry (largest)\n    translate([0, 0, 0])\n        sphere(d = 12, $fn = 32);\n    \n    // Secondary berries around central\n    for(i = [0:4]) {\n        angle = i * 72;  // 360/5 = 72 degrees\n        translate([\n            8 * cos(angle),\n            8 * sin(angle),\n            3\n        ])\n        sphere(d = 9, $fn = 32);\n    }\n    \n    // Tertiary berries (smaller)\n    for(i = [0:4]) {\n        angle = i * 72 + 36;\n        translate([\n            12 * cos(angle),\n            12 * sin(angle),\n            -2\n        ])\n        sphere(d = 6, $fn = 32);\n    }\n}\n\n// Leaf structure\nmodule leaf() {\n    difference() {\n        // Main leaf body\n        scale([1, 2.5, 0.3])\n            sphere(d = 15, $fn = 32);\n        \n        // Leaf tip\n        translate([0, 8, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 8, d2 = 0, $fn = 32);\n        \n        // Vein indentation\n        translate([0, -2, 0.5])\n            scale([0.2, 2.5, 0.1])\n                sphere(d = 15, $fn = 32);\n    }\n}\n\n// Stem system\nmodule stem() {\n    // Main stem\n    rotate([80, 0, 0])\n        cylinder(h = 25, d = 3, $fn = 16);\n    \n    // Berry stems\n    for(i = [0:11]) {\n        angle = i * 30;\n        translate([\n            5 * cos(angle),\n            5 * sin(angle),\n            2\n        ])\n        rotate([0, 90 - angle, 0])\n            cylinder(h = 6, d1 = 2, d2 = 1, $fn = 8);\n    }\n}\n\n// Calyx remnants\nmodule calyx() {\n    difference() {\n        // Base\n        translate([0, 0, 6])\n            cylinder(h = 2, d = 14, $fn = 32);\n        \n        // Star-shaped cutout\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([0, 3.5, 7])\n                    cube([7, 7, 2], center = true);\n        }\n    }\n}\n\n// Complete buffaloberry\nunion() {\n    // Main berries\n    berry_cluster();\n    \n    // Calyx on top\n    calyx();\n    \n    // Stem system\n    stem();\n    \n    // Leaves\n    translate([-15, -5, 10])\n        rotate([0, 0, -30])\n            leaf();\n    \n    translate([12, -8, 8])\n        rotate([0, 0, 45])\n            mirror([1, 0, 0])\n                leaf();\n    \n    translate([8, 12, 5])\n        rotate([0, 0, 120])\n            leaf();\n}\n\n// Base for 3D printing stability\ntranslate([0, 0, -3])\n    cylinder(h = 3, d = 30, $fn = 64);",
    "renders": true
  },
  {
    "fruit": "snowberry",
    "openscad_code": "// Snowberry (Symphoricarpos albus) – realistic, medium complexity\n// ~75 mm tall, printable without supports\n\n$fn = 32;           // global smoothness\n\n// overall dimensions\nstem_h  = 60;       // total stem height\nberry_d = 12;       // average berry diameter\nberry_gap = 2.5;    // spacing between berries\nwall_t    = 1.4;    // wall thickness for printing\n\n// stem module\nmodule stem() {\n    // main stalk\n    cylinder(h = stem_h, d1 = 3, d2 = 2.5);\n    \n    // tiny twigs for berries\n    for(i = [0:20:140]) {\n        rotate([0, 0, i]) translate([0, 0, stem_h * 0.5]) \n            rotate([90, 0, 0]) cylinder(h = 8, d1 = 1.4, d2 = 0.8);\n    }\n}\n\n// single berry with slight oval shape\nmodule berry() {\n    difference() {\n        // outer shell (elongated sphere)\n        scale([1, 1, 1.2]) sphere(d = berry_d);\n        \n        // hollow inside\n        scale([1, 1, 1.2]) sphere(d = berry_d - wall_t * 2);\n        \n        // small opening at bottom\n        translate([0, 0, -berry_d/2 - 1])\n            cylinder(h = 3, d = berry_d * 0.35);\n    }\n}\n\n// generate berry clusters along stem\nmodule berries() {\n    // bottom cluster\n    for(a = [0:60:300]) {\n        rotate([0, 0, a]) translate([0, 8, stem_h * 0.2])\n            berry();\n    }\n    \n    // middle cluster\n    for(a = [30:60:330]) {\n        rotate([0, 0, a]) translate([0, 8.5, stem_h * 0.5])\n            berry();\n    }\n    \n    // top cluster (smaller, tighter)\n    for(a = [15:45:345]) {\n        rotate([0, 0, a]) translate([0, 7, stem_h * 0.8])\n            scale(0.85) berry();\n    }\n}\n\n// leafy bract at top\nmodule top_bract() {\n    translate([0, 0, stem_h + 2])\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        rotate([0, 20, 0])\n        scale([1, 0.6, 0.1])\n        translate([0, 0, 0])\n        sphere(d = 8);\n    }\n}\n\n// union all parts\nunion() {\n    stem();\n    berries();\n    top_bract();\n}",
    "renders": true
  },
  {
    "fruit": "winterberry",
    "openscad_code": "// Winterberry (Ilex verticillata) – medium realism, 3D-printable\n// Approx. 80 mm tall, 55 mm wide cluster\n\n// General parameters\nberry_d = 8;               // berry diameter\nberry_wall = 0.8;          // wall thickness for hollow berries\nstem_d = 3;                // main stem diameter\nbranch_d = 1.6;            // twig diameter\npedicel_l = 4;             // short stalk holding each berry\ncluster_radius = 25;       // max radius of berry cluster\nbase_h = 6;                // height of woody base\n$fn = 24;                  // global facet resolution\n\n// Main module\nmodule winterberry_cluster() {\n    union() {\n        // Woody base\n        woody_base();\n\n        // Central stem\n        translate([0, 0, base_h])\n            cylinder(d = stem_d, h = 30, center = false);\n\n        // Berry whorls along the stem\n        for (i = [1:3]) {\n            translate([0, 0, base_h + i * 6])\n                berry_whorl(r = cluster_radius - i * 5, count = 5 + 2 * i, z_rot = i * 30);\n        }\n\n        // Top berry\n        translate([0, 0, base_h + 30 + pedicel_l])\n            pedicel_and_berry();\n    }\n}\n\n// Berry with internal hollow and pedicel\nmodule pedicel_and_berry() {\n    union() {\n        // Pedicel\n        cylinder(d = branch_d, h = pedicel_l, center = false);\n\n        // Berry shell\n        translate([0, 0, pedicel_l])\n            difference() {\n                sphere(d = berry_d);\n                translate([0, 0, berry_wall])\n                    sphere(d = berry_d - 2 * berry_wall);\n            }\n    }\n}\n\n// Whorl of berries around stem\nmodule berry_whorl(r, count, z_rot = 0) {\n    for (i = [0 : count - 1]) {\n        angle = 360 / count * i + z_rot;\n        translate([r * cos(angle), r * sin(angle), 0])\n            rotate([90, 0, angle])\n                pedicel_and_berry();\n    }\n}\n\n// Woody base with slight taper\nmodule woody_base() {\n    difference() {\n        cylinder(d1 = 12, d2 = 8, h = base_h, center = false);\n\n        // Small cavity on bottom to reduce material\n        translate([0, 0, -0.01])\n            cylinder(d = 6, h = base_h / 2 + 0.02, center = false);\n    }\n}\n\n// Render\nwinterberry_cluster();",
    "renders": true
  },
  {
    "fruit": "chokeberry",
    "openscad_code": "// Chokeberry (medium-complexity realistic)\n// Approx 60 mm tall, 35 mm wide; printable without supports\n\n// Main parameters\nberry_d = 12;        // single berry diameter (mm)\nberry_count = 9;     // berries in cluster\nstem_d = 3;          // stem thickness\ncalyx_d = 4;         // calyx disk on top of berry\nwall = 1.2;          // printable wall thickness\n\nmodule berry(d) {\n    // Basic berry body\n    difference() {\n        sphere(d = d);\n        // Flatten bottom slightly for printing\n        translate([0, 0, -d/2])\n            cube([d*2, d*2, d/4], center = true);\n    }\n    \n    // Top calyx disk (slightly inset)\n    translate([0, 0, d/2 - 0.3])\n        cylinder(d1 = calyx_d, d2 = calyx_d*0.8, h = 1);\n    \n    // Light surface bumps for texture\n    for (i = [0:30]) {\n        rotate([rand(0, 360), rand(0, 360), 0])\n            translate([rand(0, d/2 - 1), 0, 0])\n                sphere(d = 0.6);\n    }\n}\n\nmodule stem() {\n    // Central support stem\n    cylinder(d = stem_d, h = 40);\n    \n    // Branching stems (3 levels)\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([0, 0, 35])\n                rotate([45, 0, 0])\n                    cylinder(d = stem_d * 0.7, h = 15);\n        \n        for (b = [0:90:270]) {\n            rotate([0, 0, a + b])\n                translate([0, 0, 25])\n                    rotate([30, 0, 0])\n                        cylinder(d = stem_d * 0.5, h = 12);\n        }\n    }\n}\n\n// Build cluster\nunion() {\n    stem();\n    \n    // Berries attached to branch ends\n    // Level 1 (top)\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([0, 0, 48])\n                rotate([45, 0, 0])\n                    translate([0, 0, 15])\n                        berry(berry_d);\n    }\n    \n    // Level 2 (middle ring)\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([0, 0, 35])\n                rotate([30, 0, 0])\n                    translate([0, 0, 12])\n                        berry(berry_d * 0.85);\n    }\n    \n    // Level 3 (bottom ring)\n    for (a = [0:60:300]) {\n        rotate([0, 0, a])\n            translate([0, 0, 22])\n                rotate([20, 0, 0])\n                    translate([0, 0, 10])\n                        berry(berry_d * 0.9);\n    }\n    \n    // Center berry\n    translate([0, 0, 15])\n        berry(berry_d * 1.05);\n}",
    "renders": true
  },
  {
    "fruit": "chokecherry",
    "openscad_code": "// Chokecherry (Prunus virginiana) – medium–complexity realistic style\n// 3D-printable, ~70 mm overall height, no overhangs >45°\n\n$fn = 32;                       // global circle quality\nwall = 1.2;                     // shell thickness for printing\n\nmodule berry(d = 8, h = 10) {  // single chokecherry\n    // main fruit body – slightly flattened sphere\n    translate([0, 0, h/2])\n        scale([1, 1, 0.8])\n        sphere(d = d);\n    // recessed stem scar on top\n    translate([0, 0, h - 0.4])\n        cylinder(d1 = d/2.5, d2 = d/3, h = 0.6, $fn = 12);\n}\n\nmodule fruit_cluster() {\n    // central berry\n    berry();\n    // ring of 6 berries at 60°, slightly smaller\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([8, 0, 0])\n                berry(d = 7, h = 9);\n    }\n}\n\nmodule leaf(l = 30, w = 15, t = wall) {\n    // simple elliptical leaf\n    linear_extrude(height = t, scale = 0.9, twist = 5)\n        scale([1, 0.55])\n        circle(d = l);\n\n    // center vein (raised)\n    translate([0, -l/2, t])\n        cube([l/20, l, t/2], center = true);\n}\n\nmodule petiole(len = 15) {\n    // leaf stem\n    cylinder(h = len, d1 = 2, d2 = 1.5);\n}\n\nmodule twig(len = 25) {\n    // woody twig, tapered\n    cylinder(h = len, d1 = 3.5, d2 = 2);\n}\n\nmodule chokecherry_branch() {\n    // upright twig\n    twig(25);\n\n    // attach fruit cluster\n    translate([0, 0, 25])\n        rotate([20, 0, 0])\n        fruit_cluster();\n\n    // two leaves opposite each other\n    rotate([0, 0, 120])\n        translate([0, 0, 20])\n        rotate([30, 0, 0])\n        petiole(10);\n\n    rotate([0, 0, 120])\n        translate([0, -10, 20])\n        rotate([30, 0, 0])\n        leaf();\n\n    rotate([0, 0, -60])\n        translate([0, 0, 15])\n        rotate([-40, 0, 0])\n        petiole(12);\n\n    rotate([0, 0, -60])\n        translate([0, -10, 15])\n        rotate([-40, 0, 0])\n        leaf();\n}\n\n// final model, centered for printing\nrotate([0, 180, 0])\n    translate([0, 0, 0])\n    chokecherry_branch();",
    "renders": true
  },
  {
    "fruit": "pincherry",
    "openscad_code": "// Pincherry (Prunus pensylvanica) – realistic, medium complexity, 3D-printable\n// Overall height ≈ 65 mm, berry diameter ≈ 12 mm\n\n// Wall thickness for printing\n$fn = 32;\nwall = 1.2;\n\n// Main model\nunion() {\n    // Stem\n    stem();\n\n    // Cluster of cherries\n    translate([0,0,18])\n        cherry_cluster();\n}\n\n// ---------- Modules ----------\n\nmodule stem() {\n    // Main stem\n    cylinder(h = 60, d = 4, center = false);\n\n    // Small side twigs\n    for(i = [0:1:3]) {\n        rotate([0,0,i*90 + 45])\n            translate([0,0,15 + i*10])\n                rotate([30,0,0])\n                    cylinder(h = 12, d1 = 2.5, d2 = 1.5);\n    }\n\n    // Leaf pair\n    translate([0,0,30])\n        rotate([0,0,rands(-30,30,1)[0]])\n            leaf_pair();\n}\n\nmodule leaf_pair() {\n    // Petiole\n    cylinder(h = 6, d = 1.6);\n\n    // Two leaves mirrored\n    mirror([1,0,0])\n        translate([0,3,3])\n            rotate([90,0,0])\n                leaf();\n}\n\nmodule leaf() {\n    // Elliptical leaf blade\n    linear_extrude(height = wall)\n        scale([1,1.7,1])\n            circle(d = 18);\n\n    // Central vein\n    translate([0,-9,wall/2])\n        cube([0.6,18,wall*1.2], center = true);\n}\n\nmodule cherry_cluster() {\n    // 7 berries in a compact raceme\n    for(i = [0:1:6]) {\n        // Evenly spaced on a 120° arc\n        angle = i * 30 - 90;\n        radius = 8 + (i%2)*2;\n        translate([radius*cos(angle), radius*sin(angle), 0])\n            cherry();\n    }\n}\n\nmodule cherry() {\n    // Berry body\n    sphere(d = 12);\n\n    // Small calyx scar on top\n    translate([0,0,6])\n        cylinder(h = 2, d1 = 3, d2 = 2);\n\n    // Subtle seam\n    translate([0,-6,0])\n        cube([0.5,12,12], center = true);\n}\n\n// End",
    "renders": true
  },
  {
    "fruit": "sandcherry",
    "openscad_code": "// Sandcherry (Prunus pumila) – medium-complexity realistic model\n// Overall bounding box ≈ 45 × 45 × 65 mm\n\n$fn = 36;\n\n// Base stem\nmodule base_stem() {\n    translate([0, 0, 10]) {\n        cylinder(h = 35, d1 = 5, d2 = 3, center = false);\n    }\n}\n\n// Main fruit body\nmodule cherry_body() {\n    // Slightly compressed sphere for realistic shape\n    scale([1.1, 1.1, 0.9])\n        sphere(d = 20);\n}\n\n// Suture line (subtle groove)\nmodule suture() {\n    translate([0, -10.5, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 21, d = 1.5, center = true);\n}\n\n// Calyx remnants at top\nmodule calyx_lobes() {\n    for (a = [0:60:300]) {\n        rotate([0, 0, a])\n            translate([0, 7, 9.3])\n                scale([0.4, 0.8, 1])\n                    rotate([0, 30, 0])\n                        cylinder(h = 3, d1 = 3, d2 = 1, center = false);\n    }\n}\n\n// Petiole (fruit stem)\nmodule petiole() {\n    translate([0, 0, 9])\n        rotate([20, 0, 0])\n            cylinder(h = 15, d1 = 2.2, d2 = 1.5, center = false);\n}\n\n// Small lenticel dots\nmodule lenticels() {\n    for (i = [1:15]) {\n        r = 11 * sqrt(rands(0.3, 1, 1)[0]);\n        ang = rands(0, 360, 1)[0];\n        translate([r * cos(ang), r * sin(ang), 10 * sin(ang / 7) - 1])\n            sphere(d = 0.8);\n    }\n}\n\n// Leaf\nmodule leaf() {\n    translate([-12, 0, 20])\n        rotate([0, -20, 30])\n            linear_extrude(height = 0.8, scale = 1.02) {\n                // Simple elliptical leaf shape\n                rotate([0, 0, 90])\n                    scale([0.4, 1])\n                        circle(d = 25);\n                // Leaf tip\n                translate([0, 12.5, 0])\n                    circle(d = 3);\n            }\n}\n\n// Veins\nmodule veins() {\n    for (a = [-30, -15, 0, 15, 30]) {\n        rotate([0, 0, a])\n            translate([-5, 0, 20.9])\n                rotate([0, -20, 30])\n                    scale([0.4, 1])\n                        rotate([0, 0, 90])\n                            translate([0, 5, 0])\n                                cube([0.6, 10, 0.4], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Cherry\n    difference() {\n        union() {\n            cherry_body();\n            lenticels();\n        }\n        suture();\n    }\n\n    // Stem structures\n    union() {\n        petiole();\n        calyx_lobes();\n    }\n\n    // Optional base stem for display\n    // base_stem();\n\n    // Optional leaf\n    // leaf();\n    // veins();\n}",
    "renders": true
  },
  {
    "fruit": "nankingcherry",
    "openscad_code": "// Nanking Cherry (Prunus tomentosa) - Realistic style, medium complexity\n\n// Overall dimensions (mm)\ncherry_diameter = 12;\nstem_length = 25;\nstem_diameter = 3;\ncalyx_size = 4;\nfruit_count = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main cherry fruit module\nmodule cherry(diameter, stem_offset=0) {\n    // Main fruit body - slightly flattened sphere\n    translate([0, 0, -diameter/10])\n    scale([1, 1, 0.9])\n    sphere(d=diameter, $fn=48);\n    \n    // Small indentation at top where stem connects\n    translate([0, 0, diameter/2])\n    rotate([0, 180, 0])\n    cylinder(h=diameter/10, d1=diameter/4, d2=0, $fn=16);\n    \n    // Subtle vertical ridges for realism\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([diameter/2 - wall_thickness, 0, 0])\n        scale([1, 0.1, 0.95])\n        sphere(d=diameter/8, $fn=8);\n    }\n}\n\n// Calyx (the green leafy part at top)\nmodule calyx() {\n    // Base ring\n    cylinder(h=1, d=calyx_size*2, $fn=32);\n    \n    // Five calyx lobes\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([calyx_size*0.7, 0, 0])\n        rotate([30, 0, 0])\n        scale([0.8, 0.3, 1])\n        sphere(d=calyx_size/2, $fn=16);\n    }\n}\n\n// Stem with realistic taper\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_length, d1=stem_diameter, d2=stem_diameter*0.7, $fn=16);\n    \n    // Small leaf near top\n    translate([0, stem_diameter, stem_length*0.3])\n    rotate([0, 90, 0])\n    scale([1, 0.2, 0.5])\n    sphere(d=stem_diameter*2.5, $fn=16);\n}\n\n// Cluster of cherries on a branch\nmodule cherry_cluster() {\n    // Main branch\n    rotate([90, 0, 0])\n    cylinder(h=30, d1=5, d2=3, $fn=16);\n    \n    // Individual cherries\n    for(i=[0:fruit_count-1]) {\n        angle = i*60;\n        height = (i%2)*15;\n        translate([sin(angle)*20, cos(angle)*20, height])\n        rotate([0, 0, angle+90])\n        union() {\n            // Cherry\n            cherry(cherry_diameter);\n            \n            // Calyx on top\n            translate([0, 0, cherry_diameter/2])\n            calyx();\n            \n            // Stem\n            translate([0, 0, cherry_diameter/2 + 2])\n            stem();\n        }\n    }\n}\n\n// Generate the complete model centered\ntranslate([0, 0, 15])\nrotate([0, 0, 30])\ncherry_cluster();",
    "renders": true
  },
  {
    "fruit": "corneliancherry",
    "openscad_code": "// Cornelian Cherry (Cornus mas) - Realistic Medium Complexity\n// Dimensions: ~60mm tall cherry cluster\n\n// Main parameters\ncherry_radius = 6;\nstem_thickness = 1.5;\nstem_length = 25;\nfruit_spacing = 14;\ncluster_count = 3;\n\n// Module for single cherry\nmodule cherry(radius, stem_len) {\n    // Cherry body\n    difference() {\n        sphere(r = radius);\n        \n        // Small indent at stem attachment\n        translate([0, 0, radius * 0.9])\n            cylinder(h = radius * 0.3, r1 = radius * 0.3, r2 = radius * 0.4, $fn = 16);\n    }\n    \n    // Stem\n    translate([0, 0, radius])\n        rotate([0, 10, 0])\n            cylinder(h = stem_len, r = stem_thickness, $fn = 8);\n}\n\n// Module for cherry cluster\nmodule cherry_cluster(count, spacing) {\n    for(i = [0:count-1]) {\n        angle = i * 120;\n        radius_offset = spacing * 0.6;\n        \n        translate([\n            cos(angle) * radius_offset,\n            sin(angle) * radius_offset,\n            0\n        ]) {\n            // Main cherry\n            cherry(cherry_radius, stem_length);\n            \n            // Secondary smaller cherry\n            translate([3, 2, -2])\n                scale([0.7, 0.7, 0.7])\n                    cherry(cherry_radius * 0.8, stem_length * 0.8);\n        }\n    }\n}\n\n// Main branch with leaves\nmodule branch_with_leaves() {\n    // Main branch\n    translate([-5, 0, 0])\n        rotate([0, 0, -15])\n            cylinder(h = 40, r1 = 3, r2 = 2, $fn = 12);\n    \n    // Side branches\n    for(i = [0:2]) {\n        translate([i * 8 - 5, 0, 15])\n            rotate([0, 0, i * 30 - 30])\n                cylinder(h = 20, r1 = 2, r2 = 1, $fn = 8);\n    }\n    \n    // Leaves (elliptical)\n    for(i = [0:5]) {\n        translate([\n            sin(i * 60) * 15,\n            cos(i * 60) * 15,\n            20 + i * 2\n        ]) {\n            rotate([0, 0, i * 60])\n                rotate([90, 0, 0])\n                    scale([1, 2.5, 0.5])\n                        cylinder(h = 8, r = 3, $fn = 16);\n        }\n    }\n}\n\n// Assemble the model\nunion() {\n    // Cherry clusters\n    translate([0, 0, 0])\n        cherry_cluster(cluster_count, fruit_spacing);\n    \n    // Branch structure\n    translate([0, 0, -5])\n        branch_with_leaves();\n}\n\n// Base for printing stability\ntranslate([0, 0, -10])\n    cylinder(h = 2, r = 25, $fn = 32);",
    "renders": true
  },
  {
    "fruit": "jujube",
    "openscad_code": "// Realistic 3D printable jujube (Chinese red date)\n// Overall size ~60 mm\n$fn = 64;\n\n// Main body of the jujube\nmodule jujube_body() {\n    // Main ellipsoid body\n    scale([1.2, 1, 1]) sphere(d = 45);\n    \n    // Add slight bottom flattening to ensure printability\n    difference() {\n        scale([1.2, 1, 1]) sphere(d = 45);\n        translate([0, 0, -23])\n            cube([50, 50, 5], center = true);\n    }\n}\n\n// Surface wrinkle pattern\nmodule wrinkles() {\n    // Longitudinal wrinkles\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([18, 0, 0])\n                scale([0.2, 0.5, 1])\n                    rotate([0, 90, 0])\n                        cylinder(h = 40, d = 3, center = true);\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 23])\n        cylinder(h = 4, d1 = 6, d2 = 4);\n}\n\n// Small stem\nmodule stem() {\n    translate([0, 0, 27])\n        rotate([0, 0, 5])\n            cylinder(h = 8, d = 3);\n}\n\n// Calyx (bottom flower remnant)\nmodule calyx() {\n    translate([0, 0, -23])\n        cylinder(h = 2, d = 8);\n    \n    // 5 calyx lobes\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([4, 0, -23])\n                scale([0.5, 1, 0.3])\n                    sphere(d = 6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body\n    jujube_body();\n    \n    // Surface details\n    difference() {\n        union() {\n            wrinkles();\n            stem_base();\n            calyx();\n        }\n        \n        // Smooth out wrinkles slightly for printability\n        scale([1.05, 1.05, 1.05])\n            jujube_body();\n    }\n    \n    // Stem\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "persimmon",
    "openscad_code": "// Persimmon Model - Realistic Style, Medium Complexity\n// Overall size: ~70mm height\n\n$fn = 36; // Smooth curves for printing\n\n// Main fruit body - slightly flattened sphere\nmodule persimmon_body() {\n    difference() {\n        // Main shape - scaled sphere for realistic persimmon form\n        scale([1.1, 1.1, 0.85])\n            sphere(d = 60);\n        \n        // Indentation at bottom\n        translate([0, 0, -25])\n            cylinder(h = 15, r1 = 12, r2 = 8);\n    }\n}\n\n// Four-lobed calyx at top\nmodule calyx() {\n    // Central base\n    cylinder(h = 8, r = 8);\n    \n    // Four lobes rotated around center\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([5, 0, 0])\n                scale([1.2, 0.6, 0.8])\n                    rotate([0, 30, 0])\n                        sphere(d = 10);\n    }\n}\n\n// Stem emerging from calyx\nmodule stem() {\n    // Main stem\n    translate([0, 0, 8])\n        cylinder(h = 15, r1 = 3, r2 = 2);\n    \n    // Small bulge at base\n    translate([0, 0, 8])\n        sphere(d = 6);\n}\n\n// Surface texture - subtle bumps for realistic skin\nmodule skin_texture() {\n    // Random small bumps across surface\n    for (i = [1:8]) {\n        for (j = [0:35]) {\n            rotate([0, i * 20, j * 10])\n                translate([30, 0, -20 + i * 5])\n                    sphere(d = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit\n    persimmon_body();\n    \n    // Calyx at top center\n    translate([0, 0, 25])\n        calyx();\n    \n    // Stem on calyx\n    translate([0, 0, 25])\n        stem();\n    \n    // Skin texture\n    skin_texture();\n}\n\n// Flatten bottom for stable printing\ntranslate([0, 0, -25])\n    cylinder(h = 1, r = 30);",
    "renders": true
  },
  {
    "fruit": "quince",
    "openscad_code": "// Quince - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n$fn = 36;  // Smooth curves for printing\n\n// Main parameters\nquince_diameter = 60;\nquince_height = 65;\nstem_length = 15;\nstem_diameter = 6;\ncalyx_depth = 8;\n\n// Main body - slightly asymmetrical pear shape\nmodule quince_body() {\n    // Base bulbous part\n    translate([0, 0, -5])\n    scale([1, 1.1, 1.2])\n    sphere(d = quince_diameter);\n    \n    // Upper tapering part\n    translate([0, 0, 20])\n    scale([0.8, 0.9, 0.9])\n    sphere(d = quince_diameter * 0.9);\n    \n    // Slight asymmetry for realism\n    translate([3, -2, 10])\n    scale([1.05, 0.95, 1])\n    sphere(d = quince_diameter * 0.3);\n}\n\n// Stem with slight curve and texture\nmodule stem() {\n    // Main stem\n    translate([0, 0, quince_height/2])\n    rotate([5, 0, 10])\n    cylinder(h = stem_length, d1 = stem_diameter, d2 = stem_diameter * 0.7);\n    \n    // Stem texture rings\n    for(i = [1:3]) {\n        translate([0, 0, quince_height/2 + i*4])\n        rotate([5, 0, 10])\n        cylinder(h = 1, d = stem_diameter + 1);\n    }\n}\n\n// Calyx (bottom indentation)\nmodule calyx() {\n    difference() {\n        // Base shape\n        sphere(d = quince_diameter);\n        \n        // Central cavity\n        translate([0, 0, -quince_diameter/2])\n        cylinder(h = calyx_depth, d = quince_diameter * 0.3);\n        \n        // Five calyx lobes\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            translate([quince_diameter * 0.2, 0, -quince_diameter/2])\n            rotate([90, 0, 0])\n            cylinder(h = calyx_depth * 1.5, d1 = quince_diameter * 0.15, d2 = 0);\n        }\n    }\n}\n\n// Surface texture - subtle bumps\nmodule surface_texture() {\n    // Random small bumps across surface\n    for(i = [0:15]) {\n        angle = i * 137.5;  // Golden angle for distribution\n        h = i * 4 - 30;\n        r = quince_diameter/2 * 0.9 + sin(i*3) * 3;\n        \n        rotate([0, 0, angle])\n        translate([r * cos(h/10), r * sin(h/10), h])\n        sphere(d = 2);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main quince body\n    quince_body();\n    \n    // Stem\n    stem();\n    \n    // Calyx at bottom\n    translate([0, 0, -quince_height/2 - 5])\n    scale([1, 1, 0.8])\n    calyx();\n    \n    // Surface texture\n    surface_texture();\n}\n\n// Hollow interior for printing\ndifference() {\n    children();\n    \n    // Hollow cavity\n    scale([0.8, 0.8, 0.8])\n    translate([0, 0, 5])\n    quince_body();\n}",
    "renders": true
  },
  {
    "fruit": "medlar",
    "openscad_code": "// Medlar fruit (Mespilus germanica)\n// Realistic style, medium complexity, 3D printable\n\n$fn = 36;\n\nmodule medlar_fruit() {\n    // Main body - slightly flattened sphere with narrowing bottom\n    translate([0, 0, 25]) \n    scale([1.2, 1, 0.8])\n    sphere(d = 50);\n    \n    // Crown region - flattened top with calyx remnants\n    difference() {\n        translate([0, 0, 45])\n        scale([1.1, 1.1, 0.3])\n        sphere(d = 50);\n        \n        // Calyx cavity\n        translate([0, 0, 45])\n        cylinder(h = 8, d1 = 20, d2 = 15, $fn = 8);\n    }\n    \n    // Calyx leaves (5 sepals)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 18, 42])\n        rotate([20, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = 12, d1 = 8, d2 = 5);\n    }\n    \n    // Vertical ridges on surface\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 24, 15])\n        scale([1, 0.2, 1])\n        cylinder(h = 30, d = 3);\n    }\n    \n    // Bottom nipple\n    translate([0, 0, 2])\n    cylinder(h = 5, d1 = 8, d2 = 6);\n    \n    // Small stem remnant\n    translate([0, 12, 45])\n    rotate([30, 0, 0])\n    cylinder(h = 8, d1 = 3, d2 = 2);\n    \n    // Surface texture - small bumps\n    for (i = [0:15]) {\n        angle = i * 137.5;\n        radius = 20 + sin(i * 2) * 5;\n        height = 25 + cos(i * 3) * 10;\n        translate([cos(angle) * radius, sin(angle) * radius, height])\n        sphere(d = 2 + sin(i) * 1);\n    }\n}\n\n// Create the medlar centered on build plate\nmedlar_fruit();",
    "renders": true
  },
  {
    "fruit": "loquat",
    "openscad_code": "// Loquat (Eriobotrya japonica) – medium-complexity realistic model\n// Overall height ≈ 55 mm\n\n$fn = 32;\n\n// Main body module\nmodule loquat_body() {\n    // Core ellipsoid\n    translate([0, 0, 20])\n        scale([1, 1.2, 0.9])\n        sphere(d = 35);\n\n    // Flesh bulge at bottom\n    translate([0, 0, 5])\n        scale([0.9, 1.0, 0.6])\n        sphere(d = 32);\n\n    // Small indent at stylar end\n    difference() {\n        sphere(d = 35);\n        translate([0, 0, 30])\n            cylinder(h = 5, r = 3, $fn = 16);\n    }\n}\n\n// Crown (persistent calyx lobes)\nmodule crown() {\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 11, 40])\n                rotate([70, 0, 0])\n                    scale([1, 0.7, 0.2])\n                        cylinder(h = 12, r = 4, center = true);\n    }\n}\n\n// Skin texture – subtle bumps\nmodule skin_bumps() {\n    for (theta = [0:30:359]) {\n        for (phi = [30:30:150]) {\n            rotate([0, 0, theta])\n                rotate([0, phi, 0])\n                    translate([17.5, 0, 0])\n                        sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Stem stub\nmodule stem_stub() {\n    translate([0, 0, 42])\n        rotate([0, 0, 20])\n            cylinder(h = 8, r1 = 2.5, r2 = 1.8);\n}\n\n// Small lenticel spots\nmodule lenticels() {\n    spots = [\n        [ 7,  8, 28],\n        [-9,  5, 24],\n        [ 5, -6, 30],\n        [-6, -7, 26],\n        [ 0,  9, 22],\n        [ 8,  0, 25]\n    ];\n    for (p = spots) {\n        translate(p)\n            sphere(d = 1.2, $fn = 8);\n    }\n}\n\n// Assemble fruit\nunion() {\n    loquat_body();\n    crown();\n    skin_bumps();\n    lenticels();\n    stem_stub();\n}",
    "renders": true
  },
  {
    "fruit": "kumquat",
    "openscad_code": "// Realistic Kumquat - Medium Complexity\n// Size: ~65mm diameter\n\n$fn = 32;\nfruit_diameter = 35;\nstem_length = 8;\nstem_diameter = 4;\n\nmodule kumquat_body() {\n    // Main fruit body with slight oval shape\n    difference() {\n        scale([1.1, 1, 1.05])\n            sphere(d = fruit_diameter);\n        \n        // Indentation at stem end\n        translate([0, 0, fruit_diameter/2 - 2])\n            cylinder(h = 5, d1 = stem_diameter + 4, d2 = stem_diameter, $fn = 16);\n        \n        // Bottom indentation\n        translate([0, 0, -fruit_diameter/2 + 1])\n            sphere(d = 8);\n    }\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, fruit_diameter/2 - 1])\n        cylinder(h = stem_length, d = stem_diameter, $fn = 8);\n    \n    // Stem collar\n    translate([0, 0, fruit_diameter/2 - 3])\n        cylinder(h = 3, d1 = stem_diameter + 3, d2 = stem_diameter, $fn = 8);\n}\n\nmodule leaf() {\n    // Single leaf with realistic shape\n    translate([0, fruit_diameter/2 + 3, fruit_diameter/2])\n    rotate([90, 0, 0])\n    scale([1, 0.4, 1])\n    difference() {\n        sphere(d = 12);\n        \n        // Leaf tip\n        translate([5, 0, 0])\n            rotate([0, 0, 30])\n            cube([8, 6, 6], center = true);\n        \n        // Leaf base\n        translate([-6, 0, 0])\n            sphere(d = 8);\n    }\n}\n\nmodule fruit_texture() {\n    // Surface bumps for realistic texture\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([fruit_diameter/2 - 2, 0, sin(i * 2) * 3])\n        sphere(d = 1.5 + sin(i) * 0.5);\n    }\n    \n    // Additional small bumps\n    for(i = [0:8]) {\n        rotate([i * 45, 0, i * 20])\n        translate([fruit_diameter/2 - 1.5, 0, cos(i * 3) * 2])\n        sphere(d = 0.8);\n    }\n}\n\nmodule calyx() {\n    // Star-shaped calyx at stem end\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([stem_diameter/2 + 1, 0, fruit_diameter/2])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 0.3])\n        cylinder(h = 3, d1 = 2, d2 = 0.5);\n    }\n}\n\n// Assemble the kumquat\nunion() {\n    // Main fruit\n    difference() {\n        kumquat_body();\n        // Hollow center for printing\n        scale([0.85, 0.85, 0.85])\n            sphere(d = fruit_diameter);\n    }\n    \n    // Stem and attachments\n    union() {\n        stem();\n        leaf();\n        calyx();\n    }\n    \n    // Surface texture\n    intersection() {\n        kumquat_body();\n        fruit_texture();\n    }\n}\n\n// Print orientation - flat on base\nrotate([180, 0, 0])\ntranslate([0, 0, -fruit_diameter/2])",
    "renders": true
  },
  {
    "fruit": "mandarin",
    "openscad_code": "// Mandarin orange (realistic style, medium complexity)\n\n$fn = 36; // Smooth curves\n\n// Main parameters\nmandarin_d = 55; // Overall diameter\nmandarin_h = 50;\npeel_thickness = 2.5;\nstem_d = 4;\nstem_h = 8;\nleaf_l = 25;\nleaf_w = 12;\n\n// Mandarin body with segments\nmodule mandarin_body() {\n    difference() {\n        // Outer peel\n        sphere(d = mandarin_d);\n        \n        // Hollow inside\n        translate([0, 0, peel_thickness])\n            sphere(d = mandarin_d - 2*peel_thickness);\n        \n        // Segment grooves\n        for (i = [0:9]) {\n            rotate([0, 0, i*36])\n                translate([0, 0, -peel_thickness/2])\n                    cube([peel_thickness*0.8, mandarin_d/2, peel_thickness*2], center=true);\n        }\n    }\n}\n\n// Textured peel surface\nmodule peel_texture() {\n    difference() {\n        mandarin_body();\n        \n        // Small dimples\n        for (i = [0:15]) {\n            rotate([0, 0, i*24 + 12])\n                for (j = [1:3]) {\n                    translate([0, mandarin_d/2 - j*8 - 5, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=1.5, d1=2.5, d2=1.5, $fn=8);\n                }\n        }\n    }\n}\n\n// Stem at top\nmodule stem() {\n    translate([0, 0, mandarin_h/2])\n        cylinder(h=stem_h, d=stem_d);\n    \n    // Stem base flare\n    translate([0, 0, mandarin_h/2])\n        cylinder(h=3, d1=stem_d*1.8, d2=stem_d);\n}\n\n// Small leaf\nmodule leaf() {\n    translate([stem_d/2, 0, mandarin_h/2 + stem_h])\n        rotate([0, 110, 0])\n            scale([1, 0.5, 0.1])\n                sphere(d=leaf_l);\n    \n    // Leaf midrib\n    translate([stem_d/2, 0, mandarin_h/2 + stem_h])\n        rotate([0, 110, 0])\n            scale([1, 0.1, 0.02])\n                cylinder(h=leaf_l*0.9, d=leaf_w/3);\n}\n\n// Create complete mandarin\nunion() {\n    peel_texture();\n    stem();\n    leaf();\n}",
    "renders": true
  },
  {
    "fruit": "tangerine",
    "openscad_code": "// Tangerine - Realistic Medium Complexity\n// Size: ~60mm diameter, 3D printable with no overhangs\n\n$fn = 48;\nwall_thickness = 1.2;\n\n// Main tangerine body\nmodule tangerine_body() {\n    difference() {\n        // Outer peel\n        sphere(d = 60);\n        \n        // Hollow interior\n        sphere(d = 60 - wall_thickness * 2);\n    }\n}\n\n// Peel texture segments\nmodule peel_segments() {\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36]) {\n            translate([0, 0, 30]) {\n                difference() {\n                    // Segment ridge\n                    cylinder(h = 2, r1 = 5, r2 = 6, center = true);\n                    \n                    // Taper the ends\n                    translate([0, 0, 1.5]) {\n                        cylinder(h = 2, r1 = 0, r2 = 4, center = true);\n                    }\n                    translate([0, 0, -1.5]) {\n                        cylinder(h = 2, r1 = 4, r2 = 0, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    difference() {\n        // Main stem protrusion\n        translate([0, 0, 30]) {\n            cylinder(h = 4, r1 = 4, r2 = 2, center = true);\n        }\n        \n        // Hollow center\n        translate([0, 0, 32]) {\n            cylinder(h = 4, r = 1.5, center = true);\n        }\n    }\n}\n\n// Porous peel texture\nmodule peel_pores() {\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24]) {\n            for (j = [0:3]) {\n                theta = j * 30 + 15;\n                phi = i * 24;\n                x = 30 * cos(theta) * cos(phi);\n                y = 30 * cos(theta) * sin(phi);\n                z = 30 * sin(theta);\n                \n                translate([x, y, z]) {\n                    rotate([0, 90 - theta, phi]) {\n                        difference() {\n                            sphere(d = 1.5);\n                            translate([0, 0, 0.8]) {\n                                sphere(d = 1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Minor indentations for realistic peel\nmodule peel_dimples() {\n    for (i = [0:20]) {\n        theta = rands(0, 180, 1)[0];\n        phi = rands(0, 360, 1)[0];\n        x = 30.5 * cos(theta) * cos(phi);\n        y = 30.5 * cos(theta) * sin(phi);\n        z = 30.5 * sin(theta);\n        \n        translate([x, y, z]) {\n            rotate([0, 90 - theta, phi]) {\n                difference() {\n                    sphere(d = 1);\n                    translate([0, 0, 0.5]) {\n                        sphere(d = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bottom navel\nmodule bottom_navel() {\n    difference() {\n        // Raised navel\n        translate([0, 0, -30]) {\n            cylinder(h = 2, r1 = 3, r2 = 4, center = true);\n        }\n        \n        // Center dimple\n        translate([0, 0, -29]) {\n            sphere(d = 4);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    tangerine_body();\n    peel_segments();\n    stem_base();\n    bottom_navel();\n    \n    // Add surface details\n    peel_pores();\n    peel_dimples();\n}",
    "renders": true
  },
  {
    "fruit": "clementine",
    "openscad_code": "// Clementine - Realistic style, medium complexity\n// Diameter ~60mm, 3D-printable\n\n// Main parameters\nclementine_d = 60;              // Outer diameter\npeel_thickness = 2;             // Peel thickness\nsegment_count = 10;             // Number of segments\nsurface_pits = 30;              // Small pits on peel\n\n// Stem parameters\nstem_d = 4;\nstem_h = 6;\nstem_taper = 0.7;\n\n// Leaf parameters\nleaf_l = 12;\nleaf_w = 6;\nleaf_t = 1.5;\n\n// Internal segments\nmodule segments() {\n    for(i = [0:segment_count-1]) {\n        rotate([0, 0, i*360/segment_count])\n        translate([0, 0, -peel_thickness/2])\n        difference() {\n            // Main segment wedge\n            intersection() {\n                sphere(d = clementine_d - peel_thickness*2);\n                rotate([0, 0, -180/segment_count])\n                cube([clementine_d, clementine_d, clementine_d], center=true);\n                rotate([0, 0, 180/segment_count])\n                cube([clementine_d, clementine_d, clementine_d], center=true);\n            }\n            \n            // Membrane between segments\n            for(j = [0:1]) {\n                rotate([0, 0, j*360/segment_count + 180/segment_count])\n                translate([0, 0, -clementine_d/2])\n                cube([0.5, clementine_d, clementine_d], center=true);\n            }\n        }\n    }\n}\n\n// Peel surface texture\nmodule peel_texture() {\n    difference() {\n        sphere(d = clementine_d);\n        \n        // Random pits for texture\n        for(i = [0:surface_pits-1]) {\n            rotate([rands(0, 180, 1)[0], rands(0, 360, 1)[0], 0])\n            translate([0, 0, clementine_d/2])\n            sphere(d = rands(2, 4, 1)[0]);\n        }\n        \n        // Segment lines on peel\n        for(i = [0:segment_count-1]) {\n            rotate([0, 0, i*360/segment_count])\n            translate([0, 0, -clementine_d/2])\n            cube([0.3, clementine_d, clementine_d], center=true);\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, clementine_d/2])\n    cylinder(h1 = stem_h, r1 = stem_d/2, r2 = stem_d/2 * stem_taper, $fn=8);\n}\n\n// Leaf module\nmodule leaf() {\n    translate([0, stem_d/2, clementine_d/2 + stem_h - 1])\n    rotate([110, 0, 30])\n    scale([1, 0.4, 1])\n    difference() {\n        sphere(d = leaf_l);\n        \n        // Leaf vein\n        translate([0, 0, -leaf_l/2])\n        cube([leaf_l, 0.5, leaf_l], center=true);\n        \n        // Cut in half\n        translate([0, 0, -leaf_l/2])\n        cube([leaf_l, leaf_l, leaf_l], center=true);\n    }\n}\n\n// Assemble the clementine\nunion() {\n    // Outer peel\n    peel_texture();\n    \n    // Internal segments\n    %segments();\n    \n    // Stem and leaf\n    stem();\n    leaf();\n}",
    "renders": true
  },
  {
    "fruit": "satsuma",
    "openscad_code": "// Satsuma (medium-realistic, 3D-printable)\n// 2024 OpenSCAD – 50 mm tall\n\n// Overall scale\nscale(1.5) {\n\n    // Main fruit body – slightly squashed sphere\n    translate([0,0,3])\n    scale([1,1,0.9])\n    sphere(d=34, $fn=64);\n\n    // Top indentation\n    translate([0,0,9])\n    scale([1,1,0.5])\n    sphere(d=7, $fn=32);\n\n    // Bottom indentation\n    translate([0,0,-9.5])\n    scale([1,1,0.5])\n    sphere(d=6, $fn=32);\n\n    // Peel thickness (hollow fruit)\n    difference() {\n        scale([1,1,0.9])\n        sphere(d=34, $fn=64);\n        scale([0.9,0.9,0.9])\n        sphere(d=32, $fn=64);\n    }\n\n    // Small segment bulges\n    for(i=[0:11]) {\n        rotate([0,0,i*30])\n        translate([16,0,0])\n        scale([0.8,0.5,1])\n        sphere(d=4, $fn=8);\n    }\n\n    // Leaf crown (3 leaves)\n    module leaf() {\n        rotate([0,0,120])\n        scale([0.5,1,0.1])\n        cylinder(h=12, d1=8, d2=3, $fn=2);\n    }\n    translate([0,0,16])\n    for(j=[0:2])\n        rotate([0,0,j*120])\n        leaf();\n\n    // Stem stub\n    translate([0,0,16])\n    cylinder(h=4, d=3, $fn=16);\n\n    // Tiny pedicel ring\n    translate([0,0,16.5])\n    cylinder(h=1, d=4, $fn=16);\n\n}",
    "renders": true
  },
  {
    "fruit": "yuzu",
    "openscad_code": "// Yuzu citrus fruit - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 64;  // Smooth curves for printing\nyuzu_radius = 25;  // Main fruit radius in mm\n\nmodule yuzu_body() {\n    difference() {\n        // Main spherical body with slight flattening\n        scale([1, 1, 0.9])\n        sphere(yuzu_radius);\n        \n        // Top indent for stem\n        translate([0, 0, yuzu_radius * 0.9])\n        rotate([90, 0, 0])\n        cylinder(h=5, r1=3, r2=0, $fn=16);\n    }\n}\n\nmodule yuzu_skin_texture() {\n    // Create bumpy surface texture\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        for(j = [0:3]) {\n            translate([\n                cos(j * 30) * yuzu_radius * 0.6,\n                sin(j * 30) * yuzu_radius * 0.6,\n                yuzu_radius * 0.7\n            ])\n            scale([1, 1, 0.5])\n            sphere(1.5);\n        }\n    }\n}\n\nmodule yuzu_segments() {\n    // Internal segments visible through thin skin\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, 0, -yuzu_radius * 0.3])\n        rotate([90, 0, 0])\n        cylinder(h=yuzu_radius * 1.6, r1=3, r2=8, $fn=6);\n    }\n}\n\nmodule yuzu_peel() {\n    // Thin outer peel layer\n    difference() {\n        scale([1.02, 1.02, 0.92])\n        sphere(yuzu_radius + 0.5);\n        \n        scale([0.98, 0.98, 0.88])\n        sphere(yuzu_radius - 0.5);\n    }\n}\n\nmodule yuzu_stem() {\n    // Small stem at top\n    translate([0, 0, yuzu_radius * 0.9])\n    cylinder(h=3, r=1, $fn=8);\n    \n    // Tiny leaf\n    translate([0, -1.5, yuzu_radius * 0.9 + 2])\n    rotate([0, 110, 0])\n    scale([0.3, 1.5, 0.1])\n    sphere(2);\n}\n\nmodule yuzu() {\n    union() {\n        // Main fruit assembly\n        union() {\n            yuzu_body();\n            yuzu_peel();\n            yuzu_skin_texture();\n        }\n        \n        // Stem and leaf\n        yuzu_stem();\n    }\n}\n\n// Create the yuzu\nyuzu();",
    "renders": true
  },
  {
    "fruit": "pomelo",
    "openscad_code": "// Pomelo OpenSCAD Model - Medium Complexity - Realistic Style\n// Overall dimensions: ~80mm diameter\n\n// Main parameters\npomelo_radius = 40;\npeel_thickness = 4;\nsegment_count = 12;\n\nmodule pomelo_peel() {\n    difference() {\n        // Outer peel\n        sphere(r = pomelo_radius, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            sphere(r = pomelo_radius - peel_thickness, $fn = 64);\n        \n        // Stem indent at top\n        translate([0, 0, pomelo_radius - 3])\n            cylinder(r1 = 6, r2 = 4, h = 5, $fn = 16);\n        \n        // Bottom indent\n        translate([0, 0, -(pomelo_radius - 2)])\n            cylinder(r1 = 4, r2 = 2, h = 3, $fn = 16);\n    }\n}\n\nmodule peel_texture() {\n    // Create dimpled texture on peel surface\n    for (i = [0:segment_count - 1]) {\n        rotate([0, 0, i * 30])\n            translate([pomelo_radius - 1, 0, 0])\n                rotate([90, 0, 0])\n                    scale([1, 1.2, 0.3])\n                        cylinder(r = 2, h = 2, $fn = 8);\n    }\n    \n    // Additional random dimples for realism\n    for (j = [0:20]) {\n        rotate([rand(j) * 180, rand(j + 5) * 360])\n            translate([pomelo_radius - 1, 0, 0])\n                rotate([90, 0, 0])\n                    scale([0.8 + rand(j) * 0.5, 1, 0.2])\n                        cylinder(r = 1.5, h = 1.5, $fn = 6);\n    }\n}\n\nmodule pomelo_segments() {\n    // Create inner fruit segments\n    color(\"lightyellow\") {\n        difference() {\n            sphere(r = pomelo_radius - peel_thickness - 2, $fn = 48);\n            \n            // Segment dividers\n            for (i = [0:segment_count - 1]) {\n                rotate([0, 0, i * 30])\n                    translate([0, 0, 0])\n                        cube([pomelo_radius * 2, 0.5, pomelo_radius * 2], center = true);\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Top stem\n    color(\"darkgreen\") {\n        translate([0, 0, pomelo_radius + 1])\n            cylinder(r = 2.5, h = 8, $fn = 12);\n        \n        // Stem leaves\n        rotate([0, 30, 0])\n            translate([0, 0, pomelo_radius + 5])\n                scale([1, 0.3, 1])\n                    cylinder(r = 4, h = 6, $fn = 6);\n        \n        rotate([0, -30, 180])\n            translate([0, 0, pomelo_radius + 5])\n                scale([1, 0.3, 1])\n                    cylinder(r = 4, h = 6, $fn = 6);\n    }\n}\n\n// Combine all parts\ndifference() {\n    union() {\n        // Main peel with texture\n        pomelo_peel();\n        \n        // Apply texture as indentations\n        peel_texture();\n    }\n    \n    // Remove texture from interior\n    scale([0.98, 0.98, 0.98])\n        sphere(r = pomelo_radius, $fn = 64);\n}\n\n// Add stem\nstem();\n\n// Optional: show inner segments (comment out for full fruit)\n// translate([0, 0, 0])\n//     pomelo_segments();",
    "renders": true
  },
  {
    "fruit": "kaffir",
    "openscad_code": "// Kaffir (Kaffir lime) in realistic style\n// Size ~60 mm tall, 3D-printable (no steep overhangs)\n\n$fn = 36;\n\nmodule leaf(l=40, w=20, t=1.6) {\n    difference() {\n        // Main leaf body\n        union() {\n            hull() {\n                translate([-l/2, -w/5, 0]) sphere(d=w/3);\n                translate([ l/2, -w/5, 0]) sphere(d=w/3);\n                translate([0, w/2, 0]) sphere(d=w/2);\n            }\n            hull() {\n                translate([-l/2, w/5, 0]) sphere(d=w/3);\n                translate([ l/2, w/5, 0]) sphere(d=w/3);\n                translate([0, -w/2, 0]) sphere(d=w/2);\n            }\n        }\n        // Central vein groove\n        translate([-l/2-1, 0, -t]) cube([l+2, t/3, t*2]);\n        // Side vein grooves\n        for (i=[-1:1]) {\n            rotate([0,0,i*15]) {\n                translate([-l/2-1, 0, -t]) cube([l+2, t/4, t*2]);\n            }\n        }\n    }\n}\n\nmodule fruit(r=18) {\n    difference() {\n        // Main sphere\n        sphere(r=r);\n        \n        // Bumpy surface\n        for (a=[0:30:150]) {\n            for (b=[0:30:330]) {\n                rotate([a, b, 0]) {\n                    translate([r-1.5, 0, 0])\n                        sphere(d=3);\n                }\n            }\n        }\n        \n        // Top neck\n        translate([0,0,r-3]) {\n            cylinder(h=3, r1=r/4, r2=0);\n        }\n    }\n}\n\nmodule stem(d=3, h=12) {\n    cylinder(h=h, d=d);\n}\n\n// Assemble the model\ntranslate([0,0,0]) {\n    // Fruit\n    fruit(r=18);\n    \n    // Stem on top\n    translate([0,0,18]) {\n        stem();\n    }\n}\n\n// Leaf attached to stem\ntranslate([0,-15,18+8]) {\n    rotate([90,0,45]) {\n        leaf();\n    }\n}\n\n// Second leaf\ntranslate([0,15,18+8]) {\n    rotate([90,0,-45])\n        mirror([0,1,0]) {\n            leaf();\n        }\n}",
    "renders": true
  },
  {
    "fruit": "citron",
    "openscad_code": "// Citron - medium complexity, realistic style\n// Overall size: ~70mm length, ~40mm width\n\n// Main citron body with slight oval shape\nmodule citron_body() {\n    // Base ellipsoid for main body\n    scale([1.2, 1, 0.9])\n        sphere(d = 40, $fn = 64);\n    \n    // Elongated tip with slight curve\n    translate([20, 0, 0])\n        rotate([0, 15, 0])\n        scale([1.5, 0.7, 0.6])\n        sphere(d = 20, $fn = 32);\n}\n\n// Create bumpy surface texture\nmodule bumpy_surface() {\n    difference() {\n        citron_body();\n        \n        // Random small dimples for realistic texture\n        for(i = [0:45]) {\n            rotate([rand(i*2)*360, rand(i*3)*360, rand(i*5)*360])\n            translate([rand(i*7)*35-17.5, rand(i*11)*35-17.5, rand(i*13)*35-17.5])\n            sphere(d = 1 + rand(i*17)*2, $fn = 8);\n        }\n    }\n}\n\n// Thick peel layer\nmodule peel() {\n    difference() {\n        scale([1.05, 1.05, 1.05]) \n            bumpy_surface();\n        bumpy_surface();\n    }\n}\n\n// Citron flesh (lighter color inside)\nmodule flesh() {\n    color(\"lightyellow\")\n    scale([0.95, 0.95, 0.95])\n    bumpy_surface();\n}\n\n// Central pith structure\nmodule pith() {\n    color(\"ivory\")\n    scale([0.6, 0.6, 0.6])\n    sphere(d = 30, $fn = 32);\n}\n\n// Segment dividers\nmodule segments() {\n    color(\"lightyellow\")\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 0, 0])\n        linear_extrude(height = 30, center = true)\n        polygon(points = [[0,0], [15,0], [15,2], [0,2]]);\n    }\n}\n\n// Generate random values for texture\nfunction rand(x) = (sin(x*12.9898 + 78.233)*43758.5453) % 1;\n\n// Main citron assembly\nunion() {\n    // Outer peel\n    color(\"darkolivegreen\") peel();\n    \n    // Inner flesh\n    flesh();\n    \n    // Central pith\n    translate([0, 0, -5]) pith();\n    \n    // Segments\n    segments();\n}\n\n// Small stem at top\ntranslate([0, 0, 20])\nrotate([0, 0, 0])\ncolor(\"saddlebrown\")\ncylinder(h = 5, d1 = 4, d2 = 2, $fn = 8);\n\n// Optional: Calyx leaves around stem\nfor(i = [0:4]) {\n    rotate([0, 0, i*72])\n    translate([2.5, 0, 22])\n    rotate([45, 0, 0])\n    color(\"darkgreen\")\n    scale([1, 0.5, 0.1])\n    sphere(d = 5, $fn = 16);\n}",
    "renders": true
  },
  {
    "fruit": "bergamot",
    "openscad_code": "// Bergamot - medium complexity realistic style\n// Approx 60mm diameter, printable without supports\n\n$fn=64;  // Smooth curves for realism\n\n// Main bergamot body - slightly flattened sphere\nmodule bergamot_body() {\n    scale([1, 0.9, 0.8])  // Slightly flattened\n    sphere(30);\n}\n\n// Characteristic bergamot bump at stem end\nmodule stem_bump() {\n    translate([0, 0, 24])\n    scale([0.6, 0.6, 0.4])\n    sphere(8);\n}\n\n// Stem attachment point\nmodule stem() {\n    difference() {\n        cylinder(h=8, r1=4, r2=2);\n        // Hollow for printability\n        translate([0, 0, -1])\n        cylinder(h=10, r1=3, r2=1);\n    }\n}\n\n// Bergamot characteristic segments (14 segments)\nmodule segments() {\n    for(i = [0:13]) {\n        rotate([0, 0, i * 360/14]) {\n            // Each segment is slightly raised\n            translate([0, 0, -25])\n            scale([1.02, 1.02, 0.1])\n            cylinder(h=50, r=30);\n        }\n    }\n}\n\n// Surface texture - small pores\nmodule pores() {\n    for(i = [0:30]) {\n        rotate([0, 0, i * 12])\n        for(j = [0:5]) {\n            translate([random(25), random(25), random(5, 25)])\n            sphere(0.5);\n        }\n    }\n}\n\n// Bergamot leaf - simple realistic shape\nmodule leaf() {\n    translate([25, 0, 20])\n    rotate([0, 30, 0])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0, 0],\n        [5, 8],\n        [15, 12],\n        [25, 10],\n        [30, 5],\n        [28, 0],\n        [30, -5],\n        [25, -10],\n        [15, -12],\n        [5, -8],\n        [0, 0]\n    ]);\n}\n\n// Main assembly\nunion() {\n    // Main body with segments\n    difference() {\n        union() {\n            bergamot_body();\n            stem_bump();\n        }\n        segments();\n    }\n    \n    // Stem\n    translate([0, 0, 24])\n    rotate([0, 0, 0])\n    stem();\n    \n    // Small leaf attached\n    leaf();\n}\n\n// Add subtle surface texture\ntranslate([0, 0, 0])\nscale(0.98)\npores();",
    "renders": true
  },
  {
    "fruit": "lime",
    "openscad_code": "// Realistic Lime - Medium complexity\n// 3D printable lime with peel texture, stem and sliced view\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Main module\nmodule lime() {\n    // Outer peel\n    difference() {\n        // Main body\n        union() {\n            // Main lime body - slightly squashed sphere\n            scale([1, 1, 0.85]) sphere(d = 50);\n            \n            // Stem base\n            translate([0, 0, 21.5]) cylinder(h = 5, d1 = 8, d2 = 5);\n        }\n        \n        // Indentation at stem end\n        translate([0, 0, 23]) cylinder(h = 8, d1 = 6, d2 = 8, $fn = 32);\n    }\n    \n    // Stem\n    translate([0, 0, 24]) rotate([0, 0, rand() * 360]) \n        cylinder(h = 12, d = 3, $fn = 8);\n    \n    // Peel texture - small bumps\n    for(i = [0:10:350]) {\n        for(j = [15:15:165]) {\n            rotate([0, 0, i]) \n                rotate([0, j, 0]) \n                    translate([0, 0, 25 * cos(j)]) \n                        sphere(d = 2, $fn = 8);\n        }\n    }\n}\n\n// Internal structure (optional - for sliced view)\nmodule lime_interior() {\n    // Pulp layers\n    difference() {\n        // Main pulp\n        scale([1, 1, 0.82]) sphere(d = 45);\n        \n        // Core\n        translate([0, 0, -8]) cylinder(h = 40, d = 8);\n        \n        // Segments (6 sections)\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, -8]) \n                    cube([40, 2, 40], center = true);\n            }\n        }\n    }\n    \n    // Juice vesicles\n    for(i = [0:30:359]) {\n        for(j = [0:8:35]) {\n            rotate([0, 0, i]) \n                translate([10 + j * 0.8, 0, -5 + j * 0.5]) \n                    sphere(d = 1.5, $fn = 6);\n        }\n    }\n}\n\n// Create complete lime\nunion() {\n    // Main lime\n    lime();\n    \n    // Optional: Add sliced half (uncomment to show interior)\n    // translate([60, 0, 0]) {\n    //     difference() {\n    //         lime();\n    //         translate([0, -25, 0]) cube([50, 50, 50]);\n    //     }\n    //     lime_interior();\n    // }\n}\n\n// Add small nub at bottom\ntranslate([0, 0, -21.5]) sphere(d = 3);",
    "renders": true
  },
  {
    "fruit": "lemon",
    "openscad_code": "// Realistic Lemon - Medium Complexity\n// ~70mm length, 3D-printable with 1.2mm wall thickness\n\nmodule lemon_body() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 1.2, 1.4]) sphere(d = 50, $fn = 64);\n\n        // Flatten bottom slightly for printing\n        translate([0, 0, -36])\n            cube([60, 60, 10], center = true);\n\n        // Create slight indent for stem\n        translate([0, 0, 34])\n            rotate([0, 180, 0])\n                cylinder(h = 8, d1 = 6, d2 = 12, $fn = 32);\n    }\n}\n\nmodule stem() {\n    // Stem structure\n    translate([0, 0, 36])\n        rotate([0, 180, 0])\n            cylinder(h = 8, d1 = 4, d2 = 6, $fn = 16);\n    \n    // Small leaf base\n    translate([4, 0, 40])\n        rotate([90, 0, 30])\n            scale([0.3, 1, 0.6])\n                cylinder(h = 12, d = 8, $fn = 8);\n}\n\nmodule lemon_texture() {\n    // Create dimple pattern using small spheres\n    for (i = [0:5:355]) {\n        rotate([0, 0, i])\n            for (j = [30:10:150]) {\n                rotate([0, j, 0])\n                    translate([0, 0, 22])\n                        sphere(d = 2.5, $fn = 12);\n            }\n    }\n}\n\nmodule end_bumps() {\n    // Top bumps around stem\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([8, 0, 32])\n                sphere(d = 4, $fn = 16);\n    }\n    \n    // Bottom nipple\n    translate([0, 0, -34])\n        sphere(d = 6, $fn = 32);\n}\n\n// Main assembly\nunion() {\n    // Core lemon body\n    difference() {\n        lemon_body();\n        \n        // Hollow out for 3D printing\n        scale([0.88, 0.88, 0.88]) {\n            translate([0, 0, -2])\n                scale([1, 1.2, 1.4]) sphere(d = 50, $fn = 64);\n        }\n    }\n    \n    // External features\n    stem();\n    end_bumps();\n    \n    // Surface texture (optional - comment out for smoother print)\n    difference() {\n        lemon_texture();\n        scale([0.88, 0.88, 0.88]) {\n            lemon_texture();\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "orange",
    "openscad_code": "// Realistic Orange - Medium Complexity\n// Approx 70mm diameter, 3D-printable\n\n// Main parameters\n$fn = 64;  // Smooth curves\norange_d = 70;\nstem_h = 8;\nstem_d = 6;\nsegments = 12;  // Number of orange segments\n\n// Colors for preview (ignored by slicer)\ncolor([1, 0.5, 0]) {\n\n// Main orange body\ndifference() {\n    sphere(d = orange_d);  // Core orange sphere\n    \n    // Create segment indentations\n    for(i = [0 : segments-1]) {\n        rotate([0, 0, i * 360/segments]) {\n            translate([0, orange_d/2 - 2, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = orange_d, d1 = 8, d2 = 4, center = true);\n                }\n            }\n        }\n    }\n    \n    // Top hole for stem\n    translate([0, 0, orange_d/2 - 1]) {\n        cylinder(h = 4, d = stem_d + 2, $fn = 32);\n    }\n    \n    // Bottom dimple\n    translate([0, 0, -orange_d/2 + 2]) {\n        sphere(d = 10);\n    }\n}\n\n// Orange peel texture - small bumps\nmodule peel_bump() {\n    translate([0, 0, -0.5]) {\n        difference() {\n            sphere(d = 2.5);\n            translate([0, 0, -1.5]) {\n                cube([3, 3, 3], center = true);\n            }\n        }\n    }\n}\n\n// Distribute bumps across surface\nfor(a = [15 : 30 : 150]) {\n    for(b = [0 : 30 : 330]) {\n        rotate([0, a, b]) {\n            translate([0, 0, orange_d/2 - 1]) {\n                peel_bump();\n            }\n        }\n    }\n}\n\n}\n\n// Stem\ntranslate([0, 0, orange_d/2]) {\n    color([0.4, 0.2, 0]) {\n        cylinder(h = stem_h, d = stem_d);\n        \n        // Stem cap\n        translate([0, 0, stem_h]) {\n            sphere(d = stem_d + 2);\n        }\n        \n        // Small leaf\n        translate([stem_d/2 + 1, 0, stem_h - 2]) {\n            rotate([0, 90, 30]) {\n                scale([1, 0.4, 1]) {\n                    sphere(d = 8);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "grapefruit",
    "openscad_code": "// Grapefruit model - Realistic style, medium complexity\n// Overall dimensions: ~70mm diameter\n\n// Main parameters\n$fn = 48;\ngrapefruit_radius = 35;\nwall_thickness = 2;\nsegment_count = 12;\n\n// Main grapefruit body with slightly flattened bottom\nmodule grapefruit_body() {\n    difference() {\n        // Main sphere\n        scale([1, 1, 0.9]) \n            sphere(r = grapefruit_radius);\n        \n        // Flatten bottom slightly for stable printing\n        translate([0, 0, -grapefruit_radius * 0.9 - 1])\n            cube([grapefruit_radius * 2.2, grapefruit_radius * 2.2, 2], center = true);\n            \n        // Hollow out interior\n        scale([1, 1, 0.9]) \n            sphere(r = grapefruit_radius - wall_thickness);\n    }\n}\n\n// Create individual segment membranes\nmodule segment_membranes() {\n    membrane_height = grapefruit_radius * 1.8;\n    membrane_width = 1.5;\n    \n    for(i = [0 : segment_count - 1]) {\n        rotate([0, 0, i * 360 / segment_count]) {\n            translate([0, 0, -membrane_height / 2])\n                scale([1, membrane_width / (grapefruit_radius * sin(180/segment_count)), 1])\n                    cube([grapefruit_radius * sin(180/segment_count) * 2, membrane_width, membrane_height], center = true);\n        }\n    }\n}\n\n// Central column/pith\nmodule central_pith() {\n    cylinder(h = grapefruit_radius * 1.8, r = 5, center = true);\n}\n\n// Peel texture - small dimples\nmodule peel_texture() {\n    bump_radius = 1.2;\n    bump_depth = 0.4;\n    rows = 8;\n    bumps_per_row = 16;\n    \n    for(row = [0 : rows - 1]) {\n        row_angle = 180 * (row + 0.5) / rows;\n        for(bump = [0 : bumps_per_row - 1]) {\n            rotate([0, row_angle, bump * 360 / bumps_per_row]) {\n                translate([0, 0, grapefruit_radius * 0.9 * cos(row_angle)])\n                    sphere(r = bump_radius);\n            }\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_attachment() {\n    translate([0, 0, grapefruit_radius * 0.9 - 1])\n        cylinder(h = 3, r1 = 4, r2 = 2);\n}\n\n// Bottom navel\nmodule bottom_navel() {\n    translate([0, 0, -grapefruit_radius * 0.9 + 1])\n        cylinder(h = 2, r1 = 3, r2 = 5);\n}\n\n// Assemble the complete grapefruit\nunion() {\n    // Main body\n    grapefruit_body();\n    \n    // Internal structure (visible through cutaway)\n    %segment_membranes();\n    %central_pith();\n    \n    // External features\n    peel_texture();\n    stem_attachment();\n    bottom_navel();\n}",
    "renders": true
  },
  {
    "fruit": "pomegranate",
    "openscad_code": "// Realistic Pomegranate - Medium Complexity\n// Designed for 3D printing, no overhangs, ~75mm diameter\n\n$fn = 32;  // Smooth curves for printing\n\n// Main pomegranate body with realistic shape\nmodule pomegranate_body() {\n    // Base sphere slightly flattened\n    scale([1, 1, 0.85])\n    sphere(d = 75);\n    \n    // Crown at top\n    translate([0, 0, 32])\n    scale([0.3, 0.3, 1])\n    sphere(d = 20);\n}\n\n// Realistic crown structure\nmodule crown() {\n    // Central crown base\n    translate([0, 0, 37])\n    cylinder(h = 8, d1 = 15, d2 = 10);\n    \n    // Crown petals\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([5, 0, 42])\n        rotate([90, 0, 0])\n        scale([0.8, 1, 0.3])\n        cylinder(h = 10, d = 8);\n    }\n}\n\n// Realistic skin texture with bumps\nmodule skin_texture() {\n    difference() {\n        pomegranate_body();\n        \n        // Hexagonal pattern for pomegranate sections\n        for(a = [0:30:150]) {\n            for(b = [0:30:150]) {\n                if(a*a + b*b < 4000) {\n                    // Calculate 3D positions on sphere\n                    theta = atan(b, a);\n                    phi = atan(sqrt(a*a + b*b), 35);\n                    \n                    rotate([0, phi, theta])\n                    translate([0, 0, 37])\n                    sphere(d = 3);\n                }\n            }\n        }\n        \n        // Bottom indentation\n        translate([0, 0, -38])\n        sphere(d = 15);\n    }\n}\n\n// Stem at the crown\nmodule stem() {\n    translate([0, 0, 45])\n    cylinder(h = 5, d = 3);\n}\n\n// Main assembly\nunion() {\n    skin_texture();\n    crown();\n    stem();\n    \n    // Add subtle ridges for realism\n    for(i = [0:6]) {\n        rotate([0, 0, i * 30 + 15])\n        translate([0, -37, 0])\n        scale([1, 0.05, 1])\n        sphere(d = 75);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "fig",
    "openscad_code": "// Realistic 3D printable fig (medium complexity)\n// Overall size ~60mm high, ~45mm wide\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nstem_d = 6;\nstem_h = 12;\nbody_d = 40;\nbody_h1 = 25;\nbody_h2 = 15;\nneck_d = 18;\nneck_h = 8;\nskin_thick = 2;\n\n// Stem\nmodule stem() {\n    difference() {\n        // Main stem\n        cylinder(d1=stem_d*0.8, d2=stem_d*1.2, h=stem_h);\n        // Remove center for hollow printing\n        translate([0,0,-1])\n            cylinder(d=stem_d*0.5, h=stem_h+2);\n    }\n}\n\n// Neck (narrow part under stem)\nmodule neck() {\n    difference() {\n        // Tapered neck\n        cylinder(d1=neck_d, d2=neck_d*0.8, h=neck_h);\n        // Hollow center\n        translate([0,0,-1])\n            cylinder(d=neck_d*0.5, h=neck_h+2);\n    }\n}\n\n// Main body of fig\nmodule fig_body() {\n    difference() {\n        // Bottom bulbous part\n        translate([0,0,0])\n            sphere(d=body_d);\n        \n        // Top flattened area\n        translate([0,0,body_h1])\n            cube([body_d*2, body_d*2, body_d], center=true);\n        \n        // Hollow center\n        sphere(d=body_d-skin_thick*2);\n    }\n}\n\n// Surface texture - small dimples\nmodule surface_dimples() {\n    for(r=[-45:15:45]) {\n        rotate([r,0,0]) {\n            for(a=[0:30:330]) {\n                rotate([0,0,a]) {\n                    translate([body_d/2*0.85, 0, body_h2*sin(r)+5]) {\n                        sphere(d=2.5, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bottom opening (where fig attaches to tree)\nmodule bottom_opening() {\n    translate([0,0,-body_d/2+2])\n        cylinder(d=stem_d*1.5, h=5);\n}\n\n// Calyx (leaves at top)\nmodule calyx() {\n    for(i=[0:72:360-1]) {\n        rotate([0,0,i]) {\n            translate([0, neck_d/2, stem_h+neck_h]) {\n                rotate([30,0,0])\n                    scale([1, 0.6, 0.3])\n                        cylinder(d1=8, d2=3, h=6);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Stem\n    translate([0,0,body_h2+body_h1]) {\n        stem();\n    }\n    \n    // Neck\n    translate([0,0,body_h2+body_h1-stem_h]) {\n        neck();\n    }\n    \n    // Body\n    translate([0,0,body_h2]) {\n        union() {\n            fig_body();\n            // Surface texture\n            difference() {\n                surface_dimples();\n                sphere(d=body_d-skin_thick);\n            }\n        }\n    }\n    \n    // Calyx leaves\n    calyx();\n    \n    // Bottom opening\n    difference() {\n        sphere(d=body_d);\n        bottom_opening();\n    }\n}\n\n// Flatten bottom for stable printing\ntranslate([0,0,-body_d/2+1])\n    cube([body_d*1.5, body_d*1.5, 2], center=true);",
    "renders": true
  },
  {
    "fruit": "date",
    "openscad_code": "// Realistic Date (Phoenix dactylifera)\n// Medium complexity 3D printable model\n// ~70mm tall\n\n// Main parameters\n$fn = 50;\nscale_factor = 0.8;\n\nmodule date_body() {\n    // Main ellipsoid body\n    scale([1, 0.7, 1.3]) \n    sphere(r=15);\n    \n    // Wrinkled texture using small subtracted spheres\n    for (i = [0:30]) {\n        rotate([rand(0,360), rand(0,360), rand(0,360)])\n        translate([rand(-12,12), rand(-8,8), rand(-18,18)])\n        scale([1, 0.5, 0.3])\n        sphere(r=rand(0.5,2));\n    }\n}\n\nmodule stem_end() {\n    // Wrinkled top where stem was attached\n    translate([0, 0, 19])\n    difference() {\n        cylinder(h=3, r1=3, r2=2);\n        for (i = [0:8]) {\n            rotate([0, 0, i*45])\n            translate([1.5, 0, 1])\n            cube([0.8, 0.8, 3], center=true);\n        }\n    }\n    \n    // Small stem remnant\n    translate([0, 0, 22])\n    cylinder(h=2, r=1);\n}\n\nmodule date_flesh() {\n    // Soft flesh visible where date was bitten\n    difference() {\n        // Main flesh shape\n        translate([0, -5, -10])\n        scale([0.9, 0.6, 0.9])\n        sphere(r=12);\n        \n        // Remove uneven bite pattern\n        for (i = [0:15]) {\n            rotate([rand(0,30), rand(0,30), rand(0,360)])\n            translate([rand(-8,8), rand(-8,0), rand(-8,8)])\n            sphere(r=rand(1,3));\n        }\n    }\n}\n\nmodule seed() {\n    // Central seed visible in bite\n    translate([0, -5, -5])\n    rotate([90, 0, 0])\n    scale([0.3, 0.15, 1])\n    cylinder(h=15, r1=5, r2=3);\n}\n\nmodule surface_ripples() {\n    // Vertical surface ripples for realism\n    for (i = [0:12]) {\n        rotate([0, 0, i*30])\n        translate([13, 0, 0])\n        rotate([90, 0, 0])\n        scale([0.3, 0.1, 1])\n        cylinder(h=30, r=3);\n    }\n}\n\n// Build the complete date\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    difference() {\n        union() {\n            date_body();\n            stem_end();\n            surface_ripples();\n        }\n        \n        // Bite mark\n        translate([0, 10, -5])\n        rotate([0, 15, 0])\n        scale([1.2, 1, 1.2])\n        sphere(r=12);\n    }\n    \n    // Exposed flesh and seed\n    date_flesh();\n    seed();\n}\n\n// Helper function for random numbers\nfunction rand(min, max) = min + (max - min) * (rands(0,1,1)[0]);",
    "renders": true
  },
  {
    "fruit": "papaya",
    "openscad_code": "// Realistic Papaya - 3D printable\n// Medium complexity model using basic OpenSCAD primitives\n\n$fn = 32;  // Smooth curves for printing\n\n// Main papaya body - oval shape with slight curve\nmodule papaya_body() {\n    // Create the main oval body\n    translate([0, 0, 30]) \n        rotate([90, 0, 0])\n            scale([1, 1.2, 1.4])  // Slightly wider than tall\n                sphere(d = 50);\n    \n    // Add bottom taper\n    translate([0, 0, 10])\n        rotate([90, 0, 0])\n            scale([0.8, 0.9, 1.2])\n                sphere(d = 45);\n    \n    // Add top taper\n    translate([0, 0, 50])\n        rotate([90, 0, 0])\n            scale([0.7, 0.8, 1])\n                sphere(d = 40);\n}\n\n// Surface texture - small bumps for realistic skin\nmodule skin_texture() {\n    for(i = [0:15:180]) {\n        rotate([0, 0, i])\n            for(j = [30:10:150]) {\n                rotate([0, j, 0])\n                    translate([25, 0, 0])\n                        sphere(d = 2.5);\n            }\n    }\n}\n\n// Seed cavity - hollow center\nmodule seed_cavity() {\n    translate([0, 0, 30])\n        rotate([90, 0, 0])\n            scale([0.4, 0.5, 0.6])\n                sphere(d = 40);\n}\n\n// Stem at top\nmodule stem() {\n    translate([0, 0, 53])\n        rotate([0, 0, 10])  // Slight angle\n            cylinder(h = 8, d1 = 6, d2 = 4);\n}\n\n// Papaya ridges - longitudinal grooves\nmodule ridges() {\n    for(angle = [0:30:150]) {\n        rotate([0, 0, angle])\n            translate([12, 0, 30])\n                rotate([90, 0, 0])\n                    scale([0.3, 1, 1])\n                        cylinder(h = 50, d = 8);\n    }\n}\n\n// Create the complete papaya\nunion() {\n    // Main body\n    difference() {\n        papaya_body();\n        seed_cavity();\n    }\n    \n    // Surface details\n    skin_texture();\n    \n    // Stem\n    stem();\n    \n    // Ridges\n    difference() {\n        papaya_body();\n        ridges();\n    }\n}\n\n// Make it printable - ensure manifold geometry\n// Add a small flat base for stability\ntranslate([0, 0, 5])\n    cylinder(h = 2, d = 30, $fn = 32);",
    "renders": true
  },
  {
    "fruit": "pawpaw",
    "openscad_code": "// Pawpaw Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~70mm length, ~40mm width\n\n// Main body parameters\nbody_length = 70;\nbody_width = 40;\nbody_height = 35;\nstem_length = 8;\nstem_diameter = 4;\n\n// Skin texture parameters\nbump_size = 1.5;\nbump_rows = 12;\nbump_cols = 8;\n\nmodule pawpaw_body() {\n    // Create the main body shape using scaled spheres\n    difference() {\n        // Main body - elongated sphere\n        scale([1.3, 1, 0.9]) sphere(d=body_width);\n        \n        // Flatten the bottom slightly for stability\n        translate([0, 0, -body_height/2])\n            cube([body_length*2, body_width*2, 10], center=true);\n    }\n}\n\nmodule stem() {\n    // Create the stem at the top\n    translate([0, 0, body_height/2 + stem_length/2])\n        cylinder(h=stem_length, d=stem_diameter);\n}\n\nmodule skin_texture() {\n    // Add bumps for realistic skin texture\n    difference() {\n        union() {\n            for(i = [0:bump_rows-1]) {\n                for(j = [0:bump_cols-1]) {\n                    // Calculate position using spherical coordinates\n                    theta = 360/bump_rows * i;\n                    phi = 180/bump_cols * j;\n                    \n                    translate([\n                        sin(phi) * cos(theta) * body_width/2 * 0.9,\n                        sin(phi) * sin(theta) * body_width/2 * 0.9,\n                        cos(phi) * body_height/2 * 0.9\n                    ])\n                        sphere(d=bump_size);\n                }\n            }\n        }\n        \n        // Remove bumps from bottom third to prevent printing issues\n        translate([0, 0, -body_height/2])\n            cube([body_length*2, body_width*2, body_height/3], center=true);\n    }\n}\n\nmodule pawpaw() {\n    union() {\n        // Main body\n        pawpaw_body();\n        \n        // Stem\n        stem();\n        \n        // Skin texture\n        skin_texture();\n    }\n}\n\n// Generate the pawpaw\npawpaw();",
    "renders": true
  },
  {
    "fruit": "kiwifruit",
    "openscad_code": "// Kiwifruit – medium-complexity realistic style\n// Approx. 60 × 50 × 50 mm, printable without supports\n\n$fn = 36;           // smooth curves\nskin_thick = 1.4;   // printable wall\nscale_factor = 0.9; // subtle flattening\n\n// Main fruit body\nmodule body() {\n    difference() {\n        scale([1, 1, scale_factor])\n            sphere(d = 50);\n        // hollow core\n        scale([1, 1, scale_factor])\n            sphere(d = 50 - 2 * skin_thick);\n    }\n}\n\n// fuzzy “hair” made from tiny cylinders\nmodule fuzz(h = 1.6, r = 0.4) {\n    cylinder(h = h, r1 = r, r2 = 0);\n}\n\n// distribute fuzz over surface using fibonacci spiral\nmodule surface_fuzz(n = 200) {\n    for (i = [0 : n - 1]) {\n        theta = i * 137.508 * 1;      // golden angle\n        phi   = acos(1 - 2 * (i + 0.5) / n);\n        x = (50/2) * cos(theta) * sin(phi);\n        y = (50/2) * sin(theta) * sin(phi);\n        z = (50/2) * scale_factor * cos(phi);\n\n        // skip polar regions for printability\n        if (abs(z) < 20)\n            translate([x, y, z])\n                rotate([90 - phi * 57.3, 0, theta])\n                    fuzz();\n    }\n}\n\n// Stem stub at top\nmodule stem() {\n    translate([0, 0, 25 * scale_factor + 1])\n        cylinder(h = 6, r1 = 4, r2 = 2);\n}\n\n// Central white core with radial seed pockets\nmodule core() {\n    difference() {\n        // white pith cylinder\n        cylinder(h = 46 * scale_factor, r = 6, center = true);\n        // hollow center\n        cylinder(h = 48 * scale_factor, r = 2, center = true);\n    }\n}\n\n// Single kiwifruit seed\nmodule seed() {\n    scale([1, 0.6, 0.3])\n        sphere(d = 2);\n}\n\n// Ring of seeds around core\nmodule seed_ring(n = 12) {\n    for (a = [0 : 360 / n : 359])\n        rotate([0, 0, a])\n            translate([8, 0, 0])\n                seed();\n}\n\n// Main assembly\nunion() {\n    // outer skin\n    body();\n    // fuzz layer\n    surface_fuzz();\n    // stem\n    stem();\n    // internal details (remove after slicing if not needed)\n    translate([0, 0, 0])\n        color(\"white\")\n            core();\n    translate([0, 0, 0])\n        color(\"darkgreen\")\n            seed_ring();\n}",
    "renders": true
  },
  {
    "fruit": "hardykiwi",
    "openscad_code": "// Hardykiwi (Actinidia arguta) - Realistic Medium Complexity\n// Total length ~70mm, printable without supports\n\n$fn = 32; // Smooth curves\n\nmodule kiwi_flesh() {\n    // Main fruit body - slightly elongated ellipsoid\n    scale([1, 0.85, 1.2])\n    sphere(d = 35);\n}\n\nmodule kiwi_skin() {\n    // Thin outer skin layer\n    difference() {\n        scale([1.02, 0.87, 1.22])\n        sphere(d = 35.5);\n        kiwi_flesh();\n    }\n}\n\nmodule longitudinal_ridges() {\n    // Subtle longitudinal ridges on skin surface\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([17.5, 0, 0])\n        rotate([0, 90, 0])\n        scale([0.3, 0.3, 36])\n        cylinder(d = 2, h = 1);\n    }\n}\n\nmodule stem_end() {\n    // Stem attachment point\n    translate([0, 0, 21])\n    rotate_extrude(angle = 360)\n    translate([2, 0, 0])\n    circle(d = 4);\n    \n    // Small stem remnant\n    translate([0, 0, 22])\n    cylinder(d1 = 2, d2 = 1.5, h = 3);\n}\n\nmodule blossom_end() {\n    // Blossom scar at bottom\n    translate([0, 0, -21])\n    rotate_extrude(angle = 360)\n    translate([1.5, 0, 0])\n    circle(d = 3);\n}\n\nmodule internal_structure() {\n    // Central core with seeds\n    difference() {\n        // Core cylinder\n        translate([0, 0, -15])\n        rotate([90, 0, 0])\n        cylinder(d = 4, h = 30);\n        \n        // Seed cavities\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, 2, 0])\n            sphere(d = 1.5);\n        }\n    }\n    \n    // Radial septa (fruit partitions)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, -15])\n        cube([0.5, 15, 30], center = true);\n    }\n}\n\nmodule hardykiwi_complete() {\n    union() {\n        // Visible exterior\n        kiwi_skin();\n        longitudinal_ridges();\n        stem_end();\n        blossom_end();\n        \n        // Internal structure (optional - for cutaway view)\n        // Uncomment to see inside\n        // %internal_structure();\n    }\n}\n\n// Main assembly\nhardskiwi_complete();\n\n// Add cutting plane for half-kiwi view\n// %translate([0, 50, 0])\n// difference() {\n//     hardykiwi_complete();\n//     translate([0, 0, 0])\n//     cube([100, 100, 0.1], center = true);\n// }",
    "renders": true
  },
  {
    "fruit": "aronia",
    "openscad_code": "// Aronia berry cluster - realistic medium complexity\n// Overall size: 60mm tall cluster, berries ~8mm diameter\n// Optimized for FDM printing without support\n\n$fn = 32;  // Smooth curves\n\n// Main cluster stem\nmodule stem() {\n    color(\"saddlebrown\")\n    union() {\n        // Main stem\n        cylinder(h = 40, d1 = 3, d2 = 2);\n        \n        // Branching stems\n        for (i = [0:45:315]) {\n            rotate([0, 0, i]) \n            translate([0, 1.2, 35 - i/15])\n            rotate([110 + i/10, 0, 0])\n            cylinder(h = 15 + i/20, d1 = 2, d2 = 1);\n        }\n    }\n}\n\n// Individual berry with proper anatomy\nmodule berry(pos, angle, size) {\n    translate(pos)\n    rotate([0, 0, angle])\n    color(\"darkpurple\")\n    union() {\n        // Main berry body\n        scale([1, 1, 1.2])\n        sphere(d = size);\n        \n        // Calyx at top\n        translate([0, 0, size*0.6])\n        rotate([0, 0, 30])\n        cylinder(h = size/4, d1 = size/2.5, d2 = size/3.5);\n        \n        // Small stem attachment\n        translate([0, 0, size*0.7 + size/8])\n        cylinder(h = size/5, d = size/10);\n    }\n}\n\n// Leaf structure\nmodule leaf(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    color(\"forestgreen\")\n    difference() {\n        // Leaf body\n        scale([1, 1.5, 0.1])\n        sphere(d = 12);\n        \n        // Veins\n        translate([0, -5, 0.2])\n        scale([0.1, 10, 0.3])\n        cube([1, 1, 1]);\n        \n        for (i = [-3, 3]) {\n            translate([i, -3, 0.2])\n            rotate([0, 0, i*30])\n            scale([0.05, 6, 0.2])\n            cube([1, 1, 1]);\n        }\n    }\n}\n\n// Berry cluster arrangement\nmodule berry_cluster() {\n    union() {\n        // Berries along main stem\n        for (i = [0:20:100]) {\n            berry([sin(i*3)*4, cos(i*3)*4, 35 - i/5], i*17, 7.5 + sin(i*2));\n        }\n        \n        // Berries on branches\n        for (angle = [0:45:315]) {\n            for (i = [0:8:32]) {\n                berry([\n                    sin(angle)*cos(i*5)*3 + sin(angle)*3,\n                    cos(angle)*cos(i*5)*3 + cos(angle)*3,\n                    30 - angle/15 - i/2\n                ], angle + i*11, 6 + cos(i*3));\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    stem();\n    \n    // Berry cluster\n    translate([0, 0, 5])\n    berry_cluster();\n    \n    // Leaves at top\n    leaf([0, 0, 38], 0);\n    leaf([-5, 3, 36], 35);\n    leaf([5, -3, 37], -25);\n    leaf([3, 5, 39], 140);\n    leaf([-3, -4, 35], -120);\n}",
    "renders": true
  },
  {
    "fruit": "aroniaberry",
    "openscad_code": "// Aroniaberry 3D model - medium complexity realistic style\n// Size: ~60mm height, 3D printable with no overhangs\n\n$fn = 32; // Smooth curves\n\n// Main berry cluster\nmodule berry_cluster() {\n    union() {\n        // Central berry\n        translate([0, 0, 20])\n            scale([1, 1, 1.2])\n                sphere(d = 12);\n        \n        // Berry 1\n        translate([8, 0, 25])\n            rotate([0, 15, 0])\n            scale([0.85, 0.85, 1])\n                sphere(d = 10);\n        \n        // Berry 2\n        translate([-7, 4, 22])\n            rotate([0, -20, 30])\n            scale([0.9, 0.9, 1.1])\n                sphere(d = 11);\n        \n        // Berry 3\n        translate([0, -8, 24])\n            rotate([0, -10, -25])\n            scale([0.8, 0.8, 0.95])\n                sphere(d = 9);\n        \n        // Berry 4\n        translate([-5, -6, 18])\n            rotate([0, 25, -15])\n            scale([0.75, 0.75, 0.9])\n                sphere(d = 8);\n        \n        // Berry 5\n        translate([6, -5, 19])\n            rotate([0, 20, 25])\n            scale([0.8, 0.8, 0.95])\n                sphere(d = 9);\n    }\n}\n\n// Calyx with 5 pointed sepals\nmodule calyx() {\n    union() {\n        // Base calyx\n        translate([0, 0, 36])\n            cylinder(h = 3, d1 = 12, d2 = 8);\n        \n        // Sepals\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 5.5, 36])\n                rotate([0, -30, 0])\n                scale([0.8, 0.3, 1])\n                    cylinder(h = 6, d1 = 3, d2 = 1);\n        }\n    }\n}\n\n// Stem connection\nmodule stem() {\n    // Main stem\n    translate([0, 0, 39])\n        cylinder(h = 15, d1 = 3, d2 = 2);\n    \n    // Small branch\n    translate([0, 2, 45])\n        rotate([0, -20, 30])\n        cylinder(h = 8, d1 = 1.5, d2 = 1);\n}\n\n// Surface details - small bumps\nmodule surface_details() {\n    difference() {\n        union() {\n            berry_cluster();\n            calyx();\n            stem();\n        }\n        \n        // Add small indentations for realism\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 5.5, 20 + i * 1.5])\n                sphere(d = 1.5);\n        }\n    }\n}\n\n// Final assembly\nsurface_details();",
    "renders": true
  },
  {
    "fruit": "sea",
    "openscad_code": "// OpenSCAD: Realistic Sea – 3D-printable miniature diorama\n// Total footprint ~80 mm (X) × 55 mm (Y) × 12 mm (Z)\n\n//////////////////////\n// Global parameters\n//////////////////////\nbase_thickness = 2;        // solid base under the water\nwater_depth   = 5;         // average water height\nwave_height   = 1.5;       // crest height above average\nwave_pitch    = 6;         // distance between wave crests\nmodel_l       = 80;        // length (X)\nmodel_w       = 55;        // width  (Y)\nwall_t        = 1.2;       // printable wall thickness\n$fn           = 32;        // smooth curves\n\n//////////////////////\n// Base plate (solid)\n//////////////////////\nmodule base() {\n    difference() {\n        // main slab\n        translate([0, 0, base_thickness/2])\n            cube([model_l, model_w, base_thickness], center = true);\n        \n        // printing-friendly chamfer around the edge\n        translate([0, 0, base_thickness-0.3])\n            cube([model_l+2, model_w+2, 1], center = true);\n    }\n}\n\n//////////////////////\n// Water surface with rolling waves\n//////////////////////\nmodule water() {\n    difference() {\n        // outer water block\n        translate([0, 0, base_thickness + water_depth/2])\n            cube([model_l, model_w, water_depth], center = true);\n        \n        // subtract underside to give uniform wall_thickness shell\n        translate([0, 0, base_thickness - 0.1])\n            cube([model_l - 2*wall_t, model_w - 2*wall_t, water_depth + 0.2], center = true);\n        \n        // carve wave troughs into the top face\n        for (x = [-model_l/2 + wave_pitch/2 : wave_pitch : model_l/2 - wave_pitch/2])\n            for (y = [-model_w/2 + wave_pitch/2 : wave_pitch : model_w/2 - wave_pitch/2]) {\n                translate([x, y, base_thickness + water_depth])\n                    rotate([0, 45, 0])\n                        scale([1, 1.8, 1])\n                            sphere(d = wave_height * 2.8, $fn = 24);\n            }\n    }\n    \n    // add wave crests on top\n    for (x = [-model_l/2 + wave_pitch/2 : wave_pitch : model_l/2 - wave_pitch/2])\n        for (y = [-model_w/2 + wave_pitch/2 : wave_pitch : model_w/2 - wave_pitch/2]) {\n            translate([x, y, base_thickness + water_depth + wave_height/2])\n                scale([1, 1.8, 0.6])\n                    sphere(d = wave_height * 2.2, $fn = 24);\n        }\n}\n\n//////////////////////\n// Tiny boat for recognizability\n//////////////////////\nmodule boat() {\n    // hull shell thickness = wall_t\n    hull_width = 6;\n    hull_length = 14;\n    hull_thick = wall_t;\n    \n    difference() {\n        // outer hull\n        translate([model_l/2 - 20, 0, base_thickness + water_depth + 0.4]) {\n            scale([1, 0.5, 0.3])\n                sphere(d = hull_width, $fn = 24);\n            translate([hull_length/2 - hull_width/2, 0, 0])\n                cube([hull_length, hull_width, hull_width * 0.3], center = true);\n            scale([1, 0.5, 0.3])\n                translate([hull_length, 0, 0])\n                    sphere(d = hull_width, $fn = 24);\n        }\n        \n        // inner cavity\n        translate([model_l/2 - 20, 0, base_thickness + water_depth + 0.4 + hull_thick]) {\n            scale([1, 0.5, 0.3])\n                sphere(d = hull_width - 2*hull_thick, $fn = 24);\n            translate([hull_length/2 - hull_width/2, 0, 0])\n                cube([hull_length - 2*hull_thick, hull_width - 2*hull_thick, hull_width * 0.3], center = true);\n            scale([1, 0.5, 0.3])\n                translate([hull_length, 0, 0])\n                    sphere(d = hull_width - 2*hull_thick, $fn = 24);\n        }\n    }\n    \n    // mast\n    mast_h = 8;\n    translate([model_l/2 - 20 + hull_length/2, 0, base_thickness + water_depth + 0.4 + hull_width*0.3])\n        cylinder(h = mast_h, d = 1.4);\n}\n\n//////////////////////\n// Assembly\n//////////////////////\nunion() {\n    base();\n    water();\n    boat();\n}",
    "renders": true
  },
  {
    "fruit": "buckthorn",
    "openscad_code": "// Realistic Buckthorn (Rhamnus cathartica)\n// Medium complexity model for 3D printing\n// Overall dimensions: ~80mm height, ~60mm width\n\n// Parameters\nbranch_diameter = 4;\nberry_diameter = 2.5;\nleaf_length = 12;\nleaf_width = 6;\nleaf_thickness = 0.8;\nwall_thickness = 1.2;\n\n// Main trunk\nmodule trunk() {\n    union() {\n        // Main trunk segment\n        cylinder(h=50, d1=6, d2=4, $fn=8);\n        \n        // Add some irregularities\n        for(i = [0:3]) {\n            rotate([0, 0, i*90+15])\n            translate([3, 0, 10+i*10])\n            scale([0.7, 0.7, 1])\n            sphere(d=3);\n        }\n    }\n}\n\n// Branch segment\nmodule branch(height, angle, length) {\n    translate([0, 0, height])\n    rotate([angle, 0, 0])\n    cylinder(h=length, d=branch_diameter, $fn=6);\n}\n\n// Leaf with realistic shape\nmodule leaf() {\n    // Main leaf body - elliptical with pointed tip\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n            sphere(d=leaf_width);\n            translate([leaf_length-2, 0, 0])\n            sphere(d=leaf_width*0.8);\n            translate([leaf_length, 0, 0])\n            sphere(d=leaf_width*0.2);\n        }\n        \n        // Cut to flat thickness\n        translate([0, 0, -leaf_thickness/2-0.1])\n        cube([leaf_length+2, leaf_width+2, leaf_thickness], center=true);\n    }\n    \n    // Central vein\n    translate([leaf_length/2, 0, leaf_thickness/2+0.1])\n    cube([leaf_length*0.9, 0.3, leaf_thickness*0.5], center=true);\n    \n    // Side veins\n    for(i = [1:3]) {\n        translate([leaf_length/4*i, 0, leaf_thickness/2+0.1])\n        rotate([0, 0, 25])\n        cube([leaf_length/3, 0.2, leaf_thickness*0.3], center=true);\n        \n        translate([leaf_length/4*i, 0, leaf_thickness/2+0.1])\n        rotate([0, 0, -25])\n        cube([leaf_length/3, 0.2, leaf_thickness*0.3], center=true);\n    }\n}\n\n// Berry cluster\nmodule berry_cluster(count, radius) {\n    for(i = [0:count-1]) {\n        angle = i * 360/count;\n        r = radius * (0.7 + sin(i*45)/5);\n        translate([r*cos(angle), r*sin(angle), 0])\n        sphere(d=berry_diameter);\n    }\n}\n\n// Thorn\nmodule thorn() {\n    // Curved thorn\n    rotate_extrude(angle=90, $fn=8)\n    translate([2, 0, 0])\n    polygon(points=[[0,0],[1,0],[0,3]]);\n}\n\n// Main assembly\nunion() {\n    // Trunk\n    trunk();\n    \n    // Main branches\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        branch(20, 30, 25);\n        \n        rotate([0, 0, i*60+30])\n        branch(35, -25, 20);\n    }\n    \n    // Leaves on upper branches\n    for(i = [0:4]) {\n        rotate([0, 0, i*90])\n        translate([8, 0, 45])\n        rotate([0, -30, i*90])\n        leaf();\n    }\n    \n    // More leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i*120])\n        translate([12, 0, 30])\n        rotate([0, -45, i*120+60])\n        leaf();\n    }\n    \n    // Berry clusters\n    for(i = [0:3]) {\n        rotate([0, 0, i*120+60])\n        translate([10, 0, 50])\n        berry_cluster(4, 3);\n    }\n    \n    // Thorns - alternate pattern\n    for(i = [0:7]) {\n        rotate([0, 0, i*45+22.5])\n        translate([3, 0, 5+i*6])\n        rotate([0, -90, 0])\n        thorn();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "goumi",
    "openscad_code": "// Goumi (Elaeagnus multiflora) – realistic medium-detail model\n// Overall length ≈ 70 mm\n\n// ---------- parameters ----------\nberry_d      =  9;   // berry diameter\nberry_rows   =  6;   // berries in each longitudinal ring\nberry_cols   =  4;   // rings along the stem\nberry_wall   =  1.2; // printable wall thickness\n\ncalyx_d      =  5.5; // calyx diameter\ncalyx_h      =  3;   // calyx height\nstem_d       =  3.5; // stem diameter\nstem_l       = 20;   // stem length\nleaf_l       = 28;   // leaf length\nleaf_w       = 18;   // leaf max width\nleaf_t       =  1.5; // leaf thickness\npetiole_l    =  6;   // petiole length\n\n// ---------- berry module ----------\nmodule berry(r=berry_d/2){\n    difference(){\n        sphere(r);                          // main body\n        // small dimple on top for realism\n        translate([0,0,r*0.9])\n            sphere(r*0.4);\n    }\n    // printable wall\n    difference(){\n        sphere(r);\n        sphere(r-berry_wall);\n    }\n}\n\n// ---------- calyx module ----------\nmodule calyx(){\n    difference(){\n        cylinder(h=calyx_h, d1=calyx_d, d2=calyx_d*0.6, $fn=16);\n        cylinder(h=calyx_h, d1=calyx_d-berry_wall*2,\n                           d2=calyx_d*0.6-berry_wall*2, $fn=16);\n    }\n}\n\n// ---------- leaf module ----------\nmodule leaf(){\n    // central vein for printability\n    linear_extrude(height=leaf_t)\n        polygon([\n            [0,0],\n            [leaf_l*0.1, -leaf_w/2],\n            [leaf_l*0.9, -leaf_w/2],\n            [leaf_l, 0],\n            [leaf_l*0.9,  leaf_w/2],\n            [leaf_l*0.1,  leaf_w/2]\n        ]);\n    // petiole\n    translate([leaf_t/2,0,leaf_t/2])\n        rotate([90,0,0])\n            cylinder(h=petiole_l, d=stem_d/2, $fn=8);\n}\n\n// ---------- assembly ----------\nunion(){\n    // berries cluster\n    translate([0,0,stem_l])\n        for(i=[0:berry_cols-1])\n            rotate([0,0,i*360/berry_cols])\n                for(j=[0:berry_rows-1])\n                    translate([0, (berry_d+1)*j, 0])\n                        union(){\n                            berry();\n                            // calyx on top row only\n                            if(j==0){\n                                translate([0,0,berry_d/2])\n                                    calyx();\n                            }\n                        }\n\n    // stem\n    cylinder(h=stem_l, d=stem_d, $fn=16);\n\n    // leaf pair\n    translate([0,0,stem_l-5])\n        rotate([0,90,0])\n            leaf();\n    translate([0,0,stem_l-5])\n        rotate([0,-90,0])\n            mirror([1,0,0])\n                leaf();\n}",
    "renders": true
  },
  {
    "fruit": "autberry",
    "openscad_code": "// Raspberry (Autberry) - Realistic Style, Medium Complexity\n// Approx 60mm tall, 3D-printable with no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\nmodule berry_body() {\n    // Main berry body - slightly flattened sphere\n    translate([0, 0, 25])\n    scale([1, 1, 0.8])\n    sphere(d = 40);\n}\n\nmodule drupelet(x, y, z, size) {\n    // Individual drupelet - small sphere with flattened bottom\n    translate([x, y, z])\n    scale([1, 1, 0.7])\n    sphere(d = size);\n}\n\nmodule drupelet_layer(height, radius, count, size) {\n    // Create a ring of drupelets at given height\n    for (i = [0:count-1]) {\n        angle = i * 360 / count;\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        drupelet(x, y, height, size);\n    }\n}\n\nmodule all_drupelets() {\n    // Generate realistic drupelet pattern - 5 layers\n    drupelet_layer(20, 0, 1, 8);        // Top center\n    drupelet_layer(18, 6, 6, 7);        // Second layer\n    drupelet_layer(15, 11, 8, 7);       // Third layer\n    drupelet_layer(12, 15, 10, 6);      // Fourth layer\n    drupelet_layer(8, 18, 12, 5);       // Fifth layer\n    \n    // Fill gaps with smaller drupelets\n    for (i = [0:5]) {\n        angle = i * 60;\n        x = 9 * cos(angle);\n        y = 9 * sin(angle);\n        drupelet(x, y, 17, 5);\n    }\n}\n\nmodule stem_hole() {\n    // Hollow stem cavity for realism and printing\n    translate([0, 0, 35])\n    rotate([0, 0, 0])\n    cylinder(h = 15, d1 = 8, d2 = 6, $fn = 16);\n}\n\nmodule calyx() {\n    // Green leafy top (calyx) - 5 sepals\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 6, 32])\n        rotate([30, 0, 0])\n        scale([1, 0.4, 1])\n        cylinder(h = 8, d1 = 6, d2 = 4);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core berry structure\n    difference() {\n        berry_body();\n        stem_hole();\n    }\n    \n    // Surface drupelets\n    all_drupelets();\n    \n    // Top calyx\n    calyx();\n}\n\n// Add small bottom flattening for stable printing\ntranslate([0, 0, -0.5])\nscale([1, 1, 0.1])\nsphere(d = 40);",
    "renders": true
  },
  {
    "fruit": "shipova",
    "openscad_code": "// Shipova (Sorbus x domestica) - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nfruit_diameter = 25;\nfruit_height = 30;\nstem_length = 8;\nstem_diameter = 3;\ncalyx_diameter = 8;\ncalyx_height = 4;\n\n// Realistic shipova shape - more pear-like than apple\nmodule shipova_body() {\n    // Main body - pear shape using scaled spheres\n    union() {\n        // Lower bulbous part\n        translate([0, 0, fruit_height/3])\n            scale([1, 1, 1.2])\n            sphere(d = fruit_diameter);\n        \n        // Upper tapering part\n        translate([0, 0, fruit_height/1.5])\n            scale([0.9, 0.9, 0.8])\n            sphere(d = fruit_diameter * 0.9);\n    }\n}\n\n// Realistic stem with slight curve\nmodule stem() {\n    // Create curved stem using hull of cylinders\n    color(\"brown\")\n    union() {\n        // Base connection\n        cylinder(h = 2, d = stem_diameter * 1.2);\n        \n        // Main stem segments for curve\n        for(i = [0:3]) {\n            translate([sin(i*5)*0.5, 0, i*2])\n                rotate([0, 0, sin(i*5)*2])\n                cylinder(h = 2, d = stem_diameter * (1 - i*0.1));\n        }\n        \n        // Tip\n        translate([sin(15)*0.5, 0, stem_length])\n            sphere(d = stem_diameter * 0.5);\n    }\n}\n\n// Realistic calyx with sepals\nmodule calyx() {\n    color(\"darkgreen\")\n    difference() {\n        // Main calyx base\n        cylinder(h = calyx_height, d1 = calyx_diameter, d2 = calyx_diameter * 0.7);\n        \n        // Central hole for stem\n        translate([0, 0, -1])\n            cylinder(h = calyx_height + 2, d = stem_diameter);\n    }\n    \n    // Sepals - 5 pointed leaves\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, calyx_diameter/2, calyx_height/2])\n            rotate([30, 0, 0])\n            scale([0.3, 1, 0.1])\n            sphere(d = calyx_diameter/2);\n    }\n}\n\n// Realistic surface texture - small dimples\nmodule surface_texture() {\n    // Random small dimples for realistic skin\n    seed = 42;\n    for(i = [1:20]) {\n        angle = rands(0, 360, 1, seed+i)[0];\n        height = rands(5, fruit_height-5, 1, seed+i)[0];\n        radius = rands(fruit_diameter/3, fruit_diameter/2.2, 1, seed+i)[0];\n        \n        rotate([0, 0, angle])\n        translate([radius, 0, height])\n            sphere(d = 1.5, $fn=8);\n    }\n}\n\n// Main fruit assembly\nmodule shipova() {\n    difference() {\n        union() {\n            // Main body\n            shipova_body();\n            \n            // Surface texture\n            surface_texture();\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, 2])\n            scale([0.85, 0.85, 0.85])\n            shipova_body();\n    }\n    \n    // Calyx on top\n    translate([0, 0, fruit_height-2])\n    calyx();\n    \n    // Stem through calyx\n    translate([0, 0, fruit_height-2])\n    stem();\n}\n\n// Create the shipova centered\ntranslate([0, 0, 0])\nshipova();",
    "renders": true
  },
  {
    "fruit": "mountainash",
    "openscad_code": "// Mountain Ash Tree - OpenSCAD\n// Realistic style, medium complexity\n// 3D printable, ~70mm height\n\n// Parameters\ntrunk_height = 40;\ntrunk_radius_bottom = 4;\ntrunk_radius_top = 2.5;\ncrown_radius = 25;\ncrown_height = 30;\nberry_radius = 1.2;\nleaf_length = 6;\nleaf_width = 1.5;\nleaf_thickness = 0.4;\n$fn = 32;\n\n// Main module\nmodule mountainash() {\n    union() {\n        // Trunk\n        trunk();\n        \n        // Crown\n        translate([0, 0, trunk_height]) {\n            crown();\n        }\n        \n        // Berries\n        berries();\n    }\n}\n\n// Trunk with slight taper\nmodule trunk() {\n    cylinder(h = trunk_height, r1 = trunk_radius_bottom, r2 = trunk_radius_top, center = false);\n    \n    // Add some branches\n    for (i = [1:4]) {\n        rotate([0, 0, i * 90 + 15]) {\n            translate([trunk_radius_top * 1.5, 0, trunk_height * 0.7]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h = 8, r1 = 1.5, r2 = 0.8, center = false);\n                }\n            }\n        }\n    }\n}\n\n// Crown with compound leaves\nmodule crown() {\n    // Main crown sphere\n    sphere(r = crown_radius);\n    \n    // Add leaf clusters\n    for (i = [1:8]) {\n        rotate([0, 0, i * 45]) {\n            for (j = [1:3]) {\n                rotate([0, j * 30 - 30, 0]) {\n                    translate([crown_radius * 0.6, 0, crown_radius * 0.3]) {\n                        leaf_cluster();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaf cluster module\nmodule leaf_cluster() {\n    // Central stem\n    cylinder(h = leaf_length * 0.8, r = 0.3, center = false);\n    \n    // Individual leaflets\n    for (k = [1:7]) {\n        rotate([0, 0, k * 51]) {\n            translate([0, 0, leaf_length * 0.1 * k]) {\n                rotate([60, 0, 30]) {\n                    scale([1, 0.5, 0.2]) {\n                        sphere(r = leaf_width, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Berries arranged in clusters\nmodule berries() {\n    // Main berry clusters\n    for (i = [1:5]) {\n        rotate([0, 0, i * 72]) {\n            translate([crown_radius * 0.7, 0, trunk_height + crown_height * 0.8]) {\n                berry_cluster();\n            }\n        }\n    }\n}\n\n// Single berry cluster\nmodule berry_cluster() {\n    // Central stem\n    cylinder(h = 5, r = 0.5, center = false);\n    \n    // Berries\n    for (j = [1:10]) {\n        rotate([j * 36, j * 15, 0]) {\n            translate([0, 2.5, j * 0.4]) {\n                sphere(r = berry_radius);\n            }\n        }\n    }\n}\n\n// Generate the tree\nmountainash();",
    "renders": true
  },
  {
    "fruit": "service",
    "openscad_code": "// OpenSCAD code for a realistic-style service revolver (medium complexity)\n// Overall size: ~100mm barrel length\n\n// Parameters\n$fn = 32;\nbarrel_length = 100;\nbarrel_diameter = 10;\ncylinder_diameter = 22;\ncylinder_length = 30;\ngrip_length = 70;\ngrip_width = 12;\ngrip_thickness = 30;\nframe_thickness = 8;\nhammer_height = 12;\ntrigger_guard_radius = 12;\n\n// Main assembly\nunion() {\n    // Barrel\n    translate([0, 0, barrel_diameter/2])\n    difference() {\n        // Outer barrel\n        cylinder(h=barrel_length, d=barrel_diameter);\n        // Inner barrel hole\n        translate([0, 0, -1])\n        cylinder(h=barrel_length+2, d=6);\n    }\n    \n    // Front sight\n    translate([0, barrel_length-2, barrel_diameter/2+2])\n    cube([2, 4, 4], center=true);\n    \n    // Frame\n    translate([0, barrel_length-15, 0])\n    difference() {\n        union() {\n            // Main frame block\n            cube([frame_thickness, 30, 25], center=true);\n            // Top strap\n            translate([0, 5, 12])\n            cube([frame_thickness, 20, 4], center=true);\n        }\n        // Cylinder recess\n        translate([0, -5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=frame_thickness+2, d=cylinder_diameter+2, center=true);\n    }\n    \n    // Cylinder\n    translate([0, barrel_length-25, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Cylinder body\n        cylinder(h=cylinder_length, d=cylinder_diameter, center=true);\n        // Chambers (6 holes)\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([cylinder_diameter/2-8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=5, d=6, center=true);\n        }\n        // Center pin hole\n        cylinder(h=cylinder_length+2, d=4, center=true);\n    }\n    \n    // Hammer\n    translate([frame_thickness/2+2, barrel_length-15, 15])\n    difference() {\n        union() {\n            // Main hammer body\n            cube([4, 8, hammer_height], center=true);\n            // Hammer spur\n            translate([0, 6, hammer_height/2-2])\n            cube([6, 4, 3], center=true);\n        }\n        // Cocking notch\n        translate([0, 4, 0])\n        cube([2, 2, hammer_height-4], center=true);\n    }\n    \n    // Grip\n    translate([0, barrel_length-40, -grip_width/2])\n    difference() {\n        // Main grip\n        scale([1, 1, 1.2])\n        cube([grip_thickness, grip_length, grip_width], center=true);\n        // Grip hollow\n        translate([0, -10, 0])\n        scale([0.8, 0.9, 0.8])\n        cube([grip_thickness-4, grip_length-10, grip_width-6], center=true);\n    }\n    \n    // Trigger guard\n    translate([0, barrel_length-35, -15])\n    difference() {\n        // Outer guard\n        rotate_extrude(angle=180, convexity=10)\n        translate([trigger_guard_radius, 0, 0])\n        circle(d=3);\n        // Inner opening\n        rotate_extrude(angle=180, convexity=10)\n        translate([trigger_guard_radius, 0, 0])\n        circle(d=5);\n    }\n    \n    // Trigger\n    translate([0, barrel_length-35, -trigger_guard_radius])\n    rotate([0, 0, -15])\n    cube([3, 15, 5], center=true);\n    \n    // Rear sight\n    translate([0, barrel_length-15, 20])\n    cube([frame_thickness, 8, 2], center=true);\n}",
    "renders": true
  },
  {
    "fruit": "tree",
    "openscad_code": "// Realistic Tree - Medium Complexity\n// 3D printable with no severe overhangs\n\n$fn = 32;\n\n// Overall scale\ntree_scale = 1;\n\nmodule trunk() {\n    // Main trunk\n    difference() {\n        cylinder(h=35, d1=10, d2=7, center=false);\n        // Hollow for material savings and printability\n        translate([0, 0, 5])\n            cylinder(h=30, d1=8, d2=5.5, center=false);\n    }\n    \n    // Trunk texture - bark segments\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([5, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=30, d1=2, d2=1.5, center=false);\n    }\n}\n\nmodule branches() {\n    // Branch 1\n    translate([0, 0, 30])\n    rotate([25, 0, 30])\n    cylinder(h=15, d1=5, d2=3);\n    \n    // Branch 2\n    translate([0, 0, 28])\n    rotate([-20, 0, -45])\n    cylinder(h=12, d1=4, d2=2.5);\n    \n    // Branch 3\n    translate([0, 0, 25])\n    rotate([15, 0, 120])\n    cylinder(h=10, d1=3.5, d2=2);\n}\n\nmodule foliage_cluster(x, y, z, scale) {\n    translate([x, y, z])\n    scale([scale, scale, scale])\n    union() {\n        sphere(d=15);\n        translate([4, 3, 2])\n        sphere(d=12);\n        translate([-3, -2, 3])\n        sphere(d=10);\n        translate([2, -4, -1])\n        sphere(d=8);\n    }\n}\n\nmodule foliage() {\n    // Create organic looking foliage with multiple overlapping spheres\n    foliage_cluster(0, 0, 40, 1);\n    foliage_cluster(8, 5, 38, 0.8);\n    foliage_cluster(-6, -4, 36, 0.7);\n    foliage_cluster(3, -7, 42, 0.6);\n    foliage_cluster(-5, 6, 39, 0.75);\n    \n    // Additional smaller clusters on branches\n    translate([4, 2, 42])\n    rotate([25, 0, 30])\n    foliage_cluster(0, 0, 0, 0.5);\n    \n    translate([-3, -2, 38])\n    rotate([-20, 0, -45])\n    foliage_cluster(0, 0, 0, 0.4);\n}\n\nmodule base() {\n    // Sturdy base for stability\n    translate([0, 0, -2])\n    cylinder(h=2, d=12);\n}\n\n// Assembly\nscale([tree_scale, tree_scale, tree_scale])\nunion() {\n    base();\n    trunk();\n    branches();\n    foliage();\n}",
    "renders": true
  },
  {
    "fruit": "vine",
    "openscad_code": "// Realistic Vine - Medium Complexity\n// 3D printable vine with leaves and tendrils\n\n$fn = 32;  // Increase resolution for smoother curves\n\nmodule vine_segment(height, start_radius, end_radius, twist) {\n    // Create tapered vine segment with slight twist\n    linear_extrude(height = height, twist = twist, slices = 20)\n        scale([start_radius, end_radius])\n            circle(r = 1);\n}\n\nmodule leaf(length, width, thickness) {\n    // Create a realistic leaf shape\n    difference() {\n        // Main leaf body\n        scale([length, width, thickness])\n            sphere(r = 1);\n        \n        // Cut leaf shape to be more realistic\n        translate([0, -width/2, 0])\n            cube([length*2, width, thickness*2], center = true);\n        \n        // Add leaf tip\n        translate([length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = width/3, r1 = width/4, r2 = 0);\n    }\n    \n    // Add leaf veins\n    for(i = [-0.3:0.2:0.3]) {\n        translate([i * width/2, 0, thickness/2 + 0.1])\n            rotate([90, 0, 0])\n                cylinder(h = length*0.8, r = thickness/4, center = true);\n    }\n}\n\nmodule tendril(coil_radius, coil_height, thickness) {\n    // Create curly tendril for realism\n    for(i = [0:5:360]) {\n        rotate([0, 0, i])\n            translate([coil_radius, 0, i * coil_height/360])\n                rotate([90, 0, 0])\n                    cylinder(h = coil_height/72, r = thickness, center = true);\n    }\n}\n\n// Main vine structure\nunion() {\n    // Base/main stem\n    translate([0, 0, 0])\n        vine_segment(40, 3, 2.5, 30);\n    \n    // Second segment with branch\n    translate([0, 0, 40])\n        vine_segment(30, 2.5, 2, 45);\n    \n    // Third segment curving\n    translate([5, 5, 70])\n        rotate([15, -10, 0])\n            vine_segment(25, 2, 1.5, 60);\n    \n    // Branches\n    // Branch 1\n    translate([8, 3, 25])\n        rotate([30, 0, 45])\n            vine_segment(20, 1.5, 1, 20);\n    \n    // Branch 2\n    translate([-7, -2, 45])\n        rotate([25, 0, -30])\n            vine_segment(15, 1.2, 0.8, 15);\n    \n    // Leaves\n    // Leaf on branch 1\n    translate([15, 8, 40])\n        rotate([0, -30, 45])\n            leaf(8, 5, 0.8);\n    \n    // Leaf on main stem\n    translate([-5, 8, 35])\n        rotate([0, 30, -20])\n            leaf(10, 6, 1);\n    \n    // Leaf on branch 2\n    translate([-12, -5, 55])\n        rotate([0, 20, -45])\n            leaf(7, 4.5, 0.7);\n    \n    // Leaf at top\n    translate([8, 10, 95])\n        rotate([0, -45, 30])\n            leaf(9, 5.5, 0.9);\n    \n    // Tendrils\n    // Tendril 1\n    translate([3, 3, 20])\n        rotate([0, 90, 0])\n            tendril(4, 8, 0.3);\n    \n    // Tendril 2\n    translate([-5, -3, 50])\n        rotate([0, 90, 45])\n            tendril(3.5, 6, 0.25);\n    \n    // Tendril 3\n    translate([7, -2, 75])\n        rotate([0, 90, -30])\n            tendril(5, 7, 0.3);\n}\n\n// Base connector for printing stability\ntranslate([0, 0, -2])\n    cylinder(h = 2, r = 5, center = false);",
    "renders": true
  },
  {
    "fruit": "bush",
    "openscad_code": "// Realistic Bush - Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;  // Smooth curves for better print quality\nwall_thickness = 1.2;  // Suitable for FDM printing\n\nmodule trunk() {\n    // Main trunk - slightly tapered cylinder\n    cylinder(h = 15, r1 = 5, r2 = 4, center = false);\n    \n    // Root flare at base\n    translate([0, 0, -2])\n        cylinder(h = 4, r1 = 6, r2 = 5, center = false);\n    \n    // Secondary branches\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([3, 0, 8])\n                rotate([30 - i * 10, 0, 0])\n                    cylinder(h = 10, r1 = 2.5, r2 = 1.5, center = false);\n    }\n}\n\nmodule leaf_cluster(x, y, z, scale_factor, rotation_angle) {\n    translate([x, y, z])\n        rotate([0, 0, rotation_angle])\n            scale([scale_factor, scale_factor, scale_factor]) {\n                // Main leaf mass - ellipsoid shape\n                sphere(r = 8);\n                \n                // Add irregularity with smaller spheres\n                for (j = [0:5]) {\n                    rotate([j * 60, j * 20, j * 40])\n                        translate([random(3, 5), random(2, 4), random(1, 3)])\n                            sphere(r = random(3, 5));\n                }\n                \n                // Hollow out interior to save material\n                difference() {\n                    scale([1, 1, 1]);\n                    sphere(r = 6.5);\n                }\n            }\n}\n\nmodule bush() {\n    // Base trunk structure\n    trunk();\n    \n    // Main foliage clusters arranged in layers\n    // Bottom layer - larger clusters\n    for (layer = [0:3]) {\n        for (i = [0:7]) {\n            angle = i * 45 + layer * 11;\n            radius = 12 + layer * 3;\n            height = 15 + layer * 6;\n            scale_factor = 1.0 - layer * 0.15;\n            \n            leaf_cluster(\n                cos(angle) * radius,\n                sin(angle) * radius,\n                height,\n                scale_factor,\n                angle + 30\n            );\n        }\n    }\n    \n    // Top clusters - smaller and denser\n    for (k = [0:5]) {\n        angle = k * 72;\n        leaf_cluster(\n            cos(angle) * 8,\n            sin(angle) * 8,\n            35 + k * 2,\n            0.7,\n            angle\n        );\n    }\n    \n    // Central cluster on top\n    leaf_cluster(0, 0, 42, 1.2, 0);\n}\n\n// Generate the complete bush\nbush();",
    "renders": true
  },
  {
    "fruit": "thorn",
    "openscad_code": "// Realistic Thorn - Medium Complexity\n// Basic dimensions\nbase_d = 8;\ntip_d = 1;\nlength = 60;\nbase_h = 3;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main thorn body - hollow cone with wall thickness\nmodule thorn_body() {\n    difference() {\n        // Outer cone\n        cylinder(h=length, d1=tip_d*2, d2=base_d, $fn=32);\n        \n        // Inner hollow\n        translate([0,0,wall])\n        cylinder(h=length-wall, d1=tip_d*2-wall*2, d2=base_d-wall*2, $fn=32);\n    }\n}\n\n// Realistic surface ridges\nmodule ridges() {\n    ridge_count = 12;\n    \n    for(i=[0:ridge_count-1]) {\n        rotate([0,0,i*360/ridge_count])\n        translate([base_d/2-0.5, 0, 0])\n        rotate([90,0,0])\n        scale([1, 0.3, 1])\n        cylinder(h=length*0.8, d1=0.5, d2=0.1, $fn=8);\n    }\n}\n\n// Base attachment point\nmodule thorn_base() {\n    // Main base\n    difference() {\n        cylinder(h=base_h, d=base_d+2, $fn=32);\n        // Hollow base\n        cylinder(h=base_h, d=base_d, $fn=32);\n    }\n    \n    // Attachment ridges\n    for(i=[0:8]) {\n        rotate([0,0,i*45])\n        translate([base_d/2+0.5, 0, base_h/2])\n        rotate([90,0,0])\n        scale([0.5, 0.3, 1])\n        cylinder(h=base_h, d=1.5, $fn=8);\n    }\n}\n\n// Slight curve for realism\nmodule curved_thorn() {\n    // Create curve using hull of spheres\n    hull() {\n        // Tip\n        translate([0,0,length])\n        sphere(d=tip_d*2, $fn=16);\n        \n        // Mid point offset\n        translate([2,0,length/2])\n        sphere(d=tip_d*3, $fn=16);\n        \n        // Base\n        translate([0,0,0])\n        sphere(d=base_d, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    thorn_base();\n    \n    // Curved body\n    translate([0,0,base_h])\n    rotate([0,-5,0])\n    thorn_body();\n    \n    // Surface details\n    translate([0,0,base_h+wall])\n    rotate([0,-5,0])\n    ridges();\n}",
    "renders": true
  },
  {
    "fruit": "fruit",
    "openscad_code": "// Realistic 3D-printable Apple\n// Medium complexity (~100 lines)\n\nmodule apple_body() {\n    difference() {\n        // Main apple shape\n        sphere(d = 50, $fn = 64);\n        \n        // Indentation at top\n        translate([0, 0, 20])\n            cylinder(h = 10, d1 = 12, d2 = 0, $fn = 32);\n        \n        // Indentation at bottom\n        translate([0, 0, -25])\n            cylinder(h = 10, d1 = 0, d2 = 12, $fn = 32);\n    }\n}\n\nmodule stem() {\n    // Stem with slight curve\n    translate([0, 0, 25])\n        rotate([0, 10, 0])\n            cylinder(h = 15, d1 = 3, d2 = 2, $fn = 16);\n    \n    // Small leaf\n    translate([2, 5, 30])\n        rotate([0, -20, 45])\n            scale([1, 0.6, 0.1])\n                sphere(d = 8, $fn = 16);\n}\n\nmodule calyx() {\n    // Sepals around stem\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 4, 23])\n                rotate([60, 0, 0])\n                    cylinder(h = 6, d1 = 2, d2 = 1, $fn = 8);\n    }\n}\n\nmodule apple() {\n    union() {\n        apple_body();\n        stem();\n        calyx();\n        \n        // Slight asymmetry for realism\n        translate([3, -2, 0])\n            scale([1.05, 1, 1])\n                sphere(d = 50, $fn = 64);\n    }\n}\n\n// Generate the apple\napple();",
    "renders": true
  },
  {
    "fruit": "berry",
    "openscad_code": "// Realistic 3D-printable berry (raspberry/strawberry hybrid style)\n// Medium complexity – around 100 lines\n// Designed for FDM printing: no overhangs >45°, 1.2 mm wall thickness\n\n$fn = 36; // smooth curves\n\n// Overall dimensions\nberry_d = 40;          // equatorial diameter\nberry_h = 35;          // tip-to-base height\nstem_d = 6;            // stem diameter\nstem_h = 15;\n\n// Small berries (drupelets)\ndrupelet_d = 5;        // individual sphere diameter\ndrupelet_wall = 1.2;   // printable wall thickness\nrows = 8;              // vertical rows of drupelets\ncols = 12;             // circumference columns\n\n// Seed cavity inside\nseed_cavity_scale = 0.6;\n\n// Main berry body: hollow ellipsoid shell\nmodule berry_shell() {\n    difference() {\n        scale([1, 1, berry_h/berry_d])\n            sphere(d = berry_d);\n        // Hollow core\n        scale([1, 1, berry_h/berry_d])\n            sphere(d = berry_d - 2*drupelet_wall);\n    }\n}\n\n// Single drupelet with printable base\nmodule drupelet() {\n    difference() {\n        sphere(d = drupelet_d);\n        // Flatten bottom for printing\n        translate([0, 0, -drupelet_d/2])\n            cube([drupelet_d*2, drupelet_d*2, drupelet_d], center = true);\n    }\n}\n\n// Position drupelets on berry surface\nmodule drupelets() {\n    for (row = [0 : rows-1]) {\n        row_z = -berry_h/2 + row*(berry_h/(rows-1));\n        row_r = cos(asin(row_z/(berry_h/2))) * berry_d/2;\n        n = max(3, round(cols * row_r / (berry_d/2)));\n        for (col = [0 : n-1]) {\n            angle = 360 * col / n;\n            x = row_r * cos(angle);\n            y = row_r * sin(angle);\n            translate([x, y, row_z])\n                rotate([0, 0, angle])\n                // Tilt outward so bottom prints well\n                rotate([atan((berry_h/2 - abs(row_z))/(row_r)), 0, 0])\n                drupelet();\n        }\n    }\n}\n\n// Stem cylinder with slight taper\nmodule stem() {\n    cylinder(d1 = stem_d, d2 = stem_d*0.8, h = stem_h);\n    // Top ring for printability\n    translate([0, 0, stem_h])\n        cylinder(d = stem_d*1.2, h = 1.2);\n}\n\n// Calyx (leafy crown) under stem\nmodule calyx() {\n    calyx_r = berry_d*0.4;\n    for (i = [0 : 4]) {\n        rotate([0, 0, 72*i])\n            translate([0, calyx_r*0.5, -1])\n                scale([1, 0.6, 0.3])\n                    sphere(d = calyx_r);\n    }\n}\n\n// Assembly\nunion() {\n    // Core shell\n    berry_shell();\n    // Surface drupelets\n    drupelets();\n    // Stem on top\n    translate([0, 0, berry_h/2])\n        stem();\n    // Calyx\n    translate([0, 0, berry_h/2])\n        calyx();\n}",
    "renders": true
  },
  {
    "fruit": "applepear",
    "openscad_code": "// Applepear - realistic style, medium complexity\n// Dimensions: ~70mm height, ~55mm width\n\n$fn = 50;  // Smooth curves for realistic look\n\n// Main body - combination of apple and pear shapes\nmodule applepear_body() {\n    // Pear-shaped lower body\n    difference() {\n        union() {\n            // Main body sphere stretched vertically\n            scale([1, 1.2, 0.9])\n                sphere(d = 45);\n            \n            // Add slight bulge at bottom for pear characteristic\n            translate([0, 0, -18])\n                scale([0.8, 0.8, 0.4])\n                    sphere(d = 30);\n        }\n        \n        // Indent at bottom\n        translate([0, 0, -23])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 12, d2 = 6, center = true);\n    }\n    \n    // Apple-like top indentation\n    translate([0, 0, 22])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 8, d2 = 15, center = true);\n}\n\n// Stem module with realistic curve\nmodule stem() {\n    translate([0, 0, 25])\n        rotate([10, 0, 0])\n            union() {\n                // Main stem\n                rotate_extrude(angle = 360, $fn = 16)\n                    translate([1.2, 0, 0])\n                        circle(d = 2.4);\n                \n                // Add slight bend for realism\n                translate([0, 1.5, 3])\n                    rotate([20, 0, 0])\n                        rotate_extrude(angle = 360, $fn = 12)\n                            translate([1, 0, 0])\n                                circle(d = 1.8);\n            }\n}\n\n// Leaf with realistic shape\nmodule leaf() {\n    translate([5, 8, 27])\n        rotate([0, 40, 30])\n            scale([1, 0.6, 0.1])\n                difference() {\n                    // Main leaf shape\n                    sphere(d = 15);\n                    \n                    // Taper the leaf\n                    translate([5, 0, 0])\n                        cube([20, 15, 5], center = true);\n                    \n                    // Add central vein indentation\n                    translate([0, 0, -1])\n                        rotate([90, 0, 0])\n                            cylinder(h = 3, d1 = 0.5, d2 = 0.2, center = true);\n                }\n}\n\n// Small calyx details at top\nmodule calyx() {\n    for (i = [0:60:360]) {\n        rotate([0, 0, i])\n            translate([0, 7, 22])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, d1 = 2, d2 = 1, center = true);\n    }\n}\n\n// Surface details - small indentations\nmodule surface_details() {\n    // Random small indentations for realistic texture\n    for (i = [1:20]) {\n        rotate([0, 0, i * 137.5])\n            translate([15 + (i % 3) * 5, 0, -10 + (i % 5) * 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 1, d = 2, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    applepear_body();\n    \n    // Stem and leaf\n    stem();\n    leaf();\n    \n    // Calyx details\n    calyx();\n    \n    // Apply surface details as indentations\n    difference() {\n        // Body without details\n        children();\n        \n        // Add surface details\n        scale([0.99, 0.99, 0.99])\n            surface_details();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "asianpear",
    "openscad_code": "// Asian Pear - Realistic Style, Medium Complexity\n// Overall size ~70mm tall, 55mm wide\n\n// Main pear body - base shape\nmodule pear_body() {\n    // Lower bulbous section\n    difference() {\n        union() {\n            // Main rounded base\n            scale([1, 1, 1.2]) \n                sphere(d=50, $fn=64);\n            \n            // Tapered neck section\n            translate([0, 0, 25])\n                scale([0.7, 0.7, 1.5])\n                    sphere(d=35, $fn=64);\n        }\n        \n        // Remove bottom flat surface for printing\n        translate([0, 0, -26])\n            cube([60, 60, 2], center=true);\n    }\n}\n\n// Characteristic asian pear \"shoulders\"\nmodule shoulders() {\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n            translate([18, 0, 15])\n                scale([1.2, 0.6, 0.4])\n                    sphere(d=15, $fn=32);\n    }\n}\n\n// Stem with realistic taper\nmodule stem() {\n    // Main stem\n    translate([0, 0, 43])\n        cylinder(h1=12, h2=10, r1=3, r2=1.5, $fn=16);\n    \n    // Small stem nub\n    translate([0, 0, 52])\n        sphere(d=3, $fn=8);\n}\n\n// Leaf attachment\nmodule leaf() {\n    translate([5, 5, 50])\n        rotate([0, 30, 45])\n            scale([1, 0.6, 0.1])\n                sphere(d=12, $fn=6);\n}\n\n// Surface texture - subtle bumps\nmodule texture() {\n    // Random small bumps for realistic surface\n    for(i=[5:15:65]) {\n        for(j=[0:30:359]) {\n            rotate([0, 0, j])\n                translate([22*sin(i), 22*cos(i), 20*sin(i/2)])\n                    sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Calyx at top\nmodule calyx() {\n    difference() {\n        translate([0, 0, 43])\n            cylinder(h=2, r=4, $fn=16);\n            \n        // Cut grooves\n        for(i=[0:45:359]) {\n            rotate([0, 0, i])\n                translate([2, 0, 43])\n                    cube([4, 1, 2.1], center=true);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    pear_body();\n    \n    difference() {\n        union() {\n            shoulders();\n            texture();\n        }\n        // Ensure texture doesn't protrude too much\n        scale([0.9, 0.9, 0.9])\n            pear_body();\n    }\n    \n    stem();\n    leaf();\n    calyx();\n}\n\n// Scale to final size\nscale(0.9);",
    "renders": true
  },
  {
    "fruit": "europeanpear",
    "openscad_code": "// European Pear - Realistic Style, Medium Complexity\n// Approximate size: 70mm tall, 40mm wide\n\nmodule pear_body() {\n    // Main body - use hull of spheres for pear shape\n    hull() {\n        translate([0, 0, 10]) scale([1, 1, 1.8]) sphere(d = 35);\n        translate([0, 0, 35]) scale([0.8, 0.8, 1.2]) sphere(d = 30);\n        translate([0, 0, 55]) scale([0.3, 0.3, 0.8]) sphere(d = 20);\n    }\n}\n\nmodule stem() {\n    // Thin stem at top\n    translate([0, 0, 60])\n    cylinder(h = 8, d1 = 3, d2 = 2, $fn = 12);\n}\n\nmodule leaf() {\n    // Simple leaf attached to stem\n    translate([-5, 0, 60])\n    rotate([0, 110, 0])\n    linear_extrude(height = 0.8)\n    scale([1, 0.6])\n    circle(d = 15, $fn = 8);\n}\n\nmodule calyx_depression() {\n    // Small depression at top where stem meets fruit\n    translate([0, 0, 57])\n    sphere(d = 8, $fn = 16);\n}\n\nmodule surface_details() {\n    // Subtle surface texture with small bumps\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([0, 17, 20 + sin(i) * 10])\n        sphere(d = 1.5, $fn = 8);\n    }\n    \n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n        translate([0, 14, 35 + sin(i) * 8])\n        sphere(d = 1.2, $fn = 8);\n    }\n}\n\nmodule bottom_bump() {\n    // Slight protrusion at bottom of pear\n    translate([0, 0, 8])\n    sphere(d = 6, $fn = 16);\n}\n\n// Main assembly\nunion() {\n    pear_body();\n    stem();\n    leaf();\n    bottom_bump();\n    \n    // Add subtle surface details\n    surface_details();\n}\n\n// Create calyx depression\ndifference() {\n    pear_body();\n    translate([0, 0, 57])\n    sphere(d = 8, $fn = 16);\n}\n\n// Ensure 3D printability - slight rotation to avoid overhangs\nrotate([0, 180, 0])\nunion() {\n    pear_body();\n    stem();\n    leaf();\n    bottom_bump();\n    surface_details();\n}",
    "renders": true
  },
  {
    "fruit": "prune",
    "openscad_code": "// Realistic prune model - medium complexity\n// Overall dimensions: ~45mm x 30mm x 25mm\n\n$fn = 32;\n\nmodule prune_body() {\n    // Main body - slightly flattened sphere\n    translate([0, 0, 10])\n    scale([1, 0.85, 0.75])\n    sphere(20);\n    \n    // Top indentation\n    translate([0, 0, 20])\n    rotate([0, 60, 0])\n    cylinder(h=15, r1=8, r2=0, center=true);\n    \n    // Bottom crease\n    translate([0, 0, 5])\n    rotate([90, 0, 0])\n    cylinder(h=30, r1=6, r2=3, center=true);\n}\n\nmodule wrinkles() {\n    // Surface wrinkles\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([12 + sin(i * 30) * 3, 0, 10 + cos(i * 45) * 2])\n        rotate([90 + sin(i * 20) * 10, 0, 0])\n        scale([0.8, 0.3, 1])\n        cylinder(h=8, r1=2, r2=1);\n    }\n    \n    // Vertical creases\n    for (j = [0:5]) {\n        rotate([0, 0, j * 60])\n        translate([18, 0, 10])\n        rotate([90, 0, 0])\n        scale([1, 0.2, 0.3])\n        cylinder(h=20, r1=1.5, r2=0.5);\n    }\n}\n\nmodule stem() {\n    // Stem base\n    translate([0, 0, 22])\n    cylinder(h=3, r=2.5);\n    \n    // Stem top\n    translate([0, 0, 25])\n    rotate([0, 0, 15])\n    cylinder(h=5, r1=2, r2=1);\n}\n\nmodule prune() {\n    union() {\n        difference() {\n            prune_body();\n            wrinkles();\n        }\n        \n        stem();\n    }\n}\n\n// Generate the prune\nprune();",
    "renders": true
  },
  {
    "fruit": "damson",
    "openscad_code": "// Damson plum - realistic style, medium complexity\n// 3D printable damson with realistic proportions and surface details\n\n// Main parameters\ndamson_height = 45; // Total height in mm\ndamson_width = 35;  // Maximum width\nbloom_diameter = 2.5; // Surface bloom\nstem_length = 12;\nstem_diameter = 3.5;\nwall_thickness = 1.5;\n\n// Create the main damson body\nmodule damson_body() {\n    // Base ellipsoid shape\n    scale([1, 1.2, 1.3]) \n        sphere(d=damson_width);\n    \n    // Add slight asymmetry\n    translate([0, -2, 0])\n        scale([0.95, 0.9, 1.05])\n            sphere(d=damson_width);\n    \n    // Indentation at top\n    translate([0, 0, damson_height/2 - 5])\n        rotate([0, 0, 0])\n            scale([1, 1, 0.3])\n                sphere(d=damson_width * 0.8);\n}\n\n// Create the stem\nmodule stem() {\n    // Main stem\n    translate([0, 0, damson_height/2 + stem_length/2])\n        cylinder(h=stem_length, d1=stem_diameter, d2=stem_diameter * 0.7, $fn=8);\n    \n    // Stem base flare\n    translate([0, 0, damson_height/2])\n        cylinder(h=2, d1=stem_diameter * 1.3, d2=stem_diameter, $fn=8);\n}\n\n// Surface bloom (natural coating)\nmodule bloom() {\n    // Random distribution of bloom spots\n    for(i = [0:8]) {\n        rotate([rand(i*10), rand(i*20), rand(i*30)])\n            translate([rand(damson_width/2-5), rand(damson_width/2-5), rand(damson_height/2-5)])\n                sphere(d=bloom_diameter + rand(1));\n    }\n}\n\n// Create the seam line\nmodule seam_line() {\n    // Vertical seam from stem to bottom\n    for(z = [-damson_height/2 + 5 : 2 : damson_height/2 - 5]) {\n        translate([0, 0, z])\n            scale([0.05, 1, 0.05])\n                sphere(d=damson_width * 0.3);\n    }\n}\n\n// Helper for random values\nfunction rand(seed) = sin(seed * 123.456) * 15;\n\n// Combine all parts\nunion() {\n    // Main body with hollow interior for printing\n    difference() {\n        damson_body();\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            scale([0.85, 0.8, 0.85])\n                sphere(d=damson_width - wall_thickness*2);\n    }\n    \n    // Stem\n    stem();\n    \n    // Surface details\n    union() {\n        // Bloom effect\n        %bloom();\n        \n        // Seam line\n        seam_line();\n    }\n}\n\n// Add drainage hole at bottom for printing\ntranslate([0, 0, -damson_height/2 + 1])\n    cylinder(h=5, d=3, $fn=8);",
    "renders": true
  },
  {
    "fruit": "greengage",
    "openscad_code": "// Greengage plum model - medium complexity realistic style\n// Approx 45mm diameter, suitable for 3D printing\n\n// Main plum body module\nmodule plum_body() {\n    // Base sphere for the greengage shape\n    difference() {\n        // Main ellipsoid body\n        scale([1, 1.1, 1.2]) \n        sphere(d = 40, $fn = 64);\n        \n        // Stem cavity at top\n        translate([0, 0, 22])\n        cylinder(h = 8, d1 = 6, d2 = 3, $fn = 32);\n        \n        // Bottom indent for realistic plum shape\n        translate([0, 0, -20])\n        scale([1, 1, 0.3])\n        sphere(d = 15, $fn = 32);\n    }\n    \n    // Slight flattening on one side (natural plum asymmetry)\n    translate([0, 20, 0])\n    rotate([0, 0, 90])\n    scale([1, 0.85, 1])\n    sphere(d = 42, $fn = 32);\n}\n\n// Stem module\nmodule stem() {\n    // Main stem\n    translate([0, 0, 22])\n    rotate([0, 0, rand() * 10 - 5])\n    cylinder(h = 12, d1 = 3, d2 = 2, $fn = 16);\n    \n    // Small leaf remnants\n    for (i = [0:1]) {\n        translate([0, 0, 28])\n        rotate([90 + i * 20, 0, i * 45])\n        scale([0.8, 2.5, 0.3])\n        sphere(d = 4, $fn = 16);\n    }\n}\n\n// Surface texture - small dimples for realistic skin\nmodule skin_texture() {\n    // Random small dimples across surface\n    for (i = [0:30]) {\n        theta = i * 137.5;  // Golden angle for even distribution\n        phi = acos(1 - 2 * i / 30);\n        x = 20 * cos(theta) * sin(phi);\n        y = 20 * sin(theta) * sin(phi) * 1.1;\n        z = 20 * cos(phi) * 1.2 - 2;\n        \n        translate([x, y, z])\n        sphere(d = 2, $fn = 16);\n    }\n}\n\n// Natural seam line (suture) running from stem to bottom\nmodule suture_line() {\n    for (i = [-20:1:20]) {\n        z = i;\n        width = 0.5 * (1 - abs(i)/20);  // Tapers at ends\n        \n        translate([0, -20.5 * sqrt(1 - (z/20)*(z/20)), z])\n        cube([width, 1, 1], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main plum body\n    plum_body();\n    \n    // Add stem\n    stem();\n    \n    // Add surface texture as indented features\n    difference() {\n        plum_body();\n        skin_texture();\n    }\n    \n    // Add suture line\n    suture_line();\n}",
    "renders": true
  },
  {
    "fruit": "mirabelle",
    "openscad_code": "// Mirabelle plum - medium complexity, realistic style\n// Approx. 65 mm tall\n\n$fa = 1;\n$fs = 0.4;\n\n// Main plum body\nmodule plum_body() {\n    // Core sphere as base shape\n    sphere(r = 25);\n    \n    // Add slight bulge at bottom for realistic plum shape\n    translate([0, 0, -20])\n        scale([1.1, 1.1, 0.6])\n        sphere(r = 20);\n    \n    // Indentation for suture line\n    rotate([0, 90, 0])\n    difference() {\n        cube([50, 50, 50], center = true);\n        translate([0, 0, -20])\n        rotate([0, 0, -15])\n        cylinder(h = 50, r1 = 25, r2 = 22, $fn = 3);\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 25])\n    cylinder(h = 3, r1 = 4, r2 = 2, $fn = 8);\n}\n\n// Stem with realistic curves\nmodule stem() {\n    translate([0, 0, 28])\n    rotate([0, 0, 5])\n    for(i = [0:3:30]) {\n        translate([0, 0, i])\n        rotate([0, 0, sin(i*3)*3])\n        cylinder(h = 3, r1 = 2.2 - i*0.05, r2 = 2 - i*0.05, $fn = 8);\n    }\n}\n\n// Small leaf\nmodule leaf() {\n    translate([0, 5, 30])\n    rotate([0, 0, -20])\n    rotate([90, 0, 0])\n    difference() {\n        // Leaf shape\n        scale([1, 2, 0.5])\n        sphere(r = 8);\n        \n        // Leaf stem\n        translate([0, -7, 0])\n        scale([0.3, 1, 0.3])\n        sphere(r = 8);\n    }\n}\n\n// Surface texture - small indentations\nmodule surface_texture() {\n    for(phi = [0:30:359]) {\n        for(theta = [30:30:150]) {\n            rotate([0, theta, phi])\n            translate([0, 0, 20])\n            sphere(r = 0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main plum body with slight color variation\n    color([0.9, 0.7, 0.1])\n    plum_body();\n    \n    // Stem base\n    color([0.4, 0.2, 0.1])\n    stem_base();\n    \n    // Stem\n    color([0.3, 0.15, 0.05])\n    stem();\n    \n    // Leaf\n    color([0.2, 0.5, 0.1])\n    leaf();\n    \n    // Subtle surface texture for realism\n    color([0.85, 0.65, 0.05])\n    surface_texture();\n}",
    "renders": true
  },
  {
    "fruit": "bullace",
    "openscad_code": "// Bullace (wild plum) - realistic medium complexity model\n// Size: ~25mm diameter fruit, ~50mm total with stem and leaf\n\n// Main parameters\n$fn = 32;\nfruit_diameter = 25;\nstem_length = 20;\nstem_diameter = 2.5;\nleaf_length = 15;\nleaf_width = 8;\nbloom_thickness = 0.2;\n\n// Bullace fruit with realistic shape and surface details\nmodule bullace_fruit() {\n    // Main fruit body - slightly flattened sphere\n    scale([1, 1, 0.9])\n    sphere(d = fruit_diameter);\n    \n    // Add subtle vertical ridges\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, fruit_diameter/2 - 0.5, 0])\n        scale([1, 0.3, 0.8])\n        sphere(d = fruit_diameter * 0.8);\n    }\n    \n    // Attachment scar at bottom\n    translate([0, 0, -fruit_diameter/2 * 0.9])\n    cylinder(h = 1, d1 = 3, d2 = 2);\n}\n\n// Natural looking stem\nmodule stem() {\n    // Main stem\n    translate([0, 0, fruit_diameter/2 * 0.9])\n    rotate([90, 0, 0])\n    cylinder(h = stem_length, d = stem_diameter);\n    \n    // Stem segments with slight variations\n    for (i = [0:3]) {\n        translate([0, 0, fruit_diameter/2 * 0.9 + i * 5])\n        rotate([90, sin(i * 30) * 5, 0])\n        cylinder(h = 5, d = stem_diameter * (1 - i * 0.1));\n    }\n}\n\n// Realistic leaf with veins\nmodule leaf() {\n    // Leaf blade - elliptical\n    translate([0, stem_diameter/2 + 2, fruit_diameter/2 * 0.9 + stem_length - 5])\n    rotate([90, 0, 90])\n    scale([1, leaf_width/leaf_length, 0.3])\n    sphere(d = leaf_length);\n    \n    // Leaf stem\n    translate([0, stem_diameter/2 + 1, fruit_diameter/2 * 0.9 + stem_length - 5])\n    rotate([90, 0, 90])\n    cylinder(h = 3, d = 1);\n    \n    // Veins\n    for (i = [-2:2]) {\n        if (i != 0) {\n            translate([i * 2, 0, 0])\n            rotate([0, 0, atan2(i * 2, leaf_length/2)])\n            scale([1, 0.1, 0.1])\n            translate([leaf_length/4, 0, 0])\n            sphere(d = leaf_length/2);\n        }\n    }\n    \n    // Main vein\n    translate([0, 0, 0])\n    rotate([90, 0, 90])\n    scale([1, 0.15, 0.1])\n    translate([leaf_length/4, 0, 0])\n    sphere(d = leaf_length/2);\n}\n\n// Natural bloom (waxy coating) effect\nmodule bloom() {\n    // Thin translucent layer\n    translate([0, 0, 0])\n    scale([1.01, 1.01, 1.01])\n    sphere(d = fruit_diameter + bloom_thickness);\n}\n\n// Assemble the complete bullace\nunion() {\n    // Main fruit\n    bullace_fruit();\n    \n    // Stem\n    stem();\n    \n    // Leaf\n    leaf();\n    \n    // Bloom effect\n    %bloom();\n}",
    "renders": true
  },
  {
    "fruit": "myrobalan",
    "openscad_code": "// Myrobalan (Terminalia chebula) - realistic medium-complexity model\n// ~70mm length, printable without supports\n\n// Main parameters\nlength = 70;\nmax_diameter = 30;\nstem_length = 8;\nstem_diameter = 3;\nridge_count = 5;\nbase_flat_percent = 0.15;  // 15% flattened base\n\n// Colors (for preview)\ncolor_fruit = [0.5,0.35,0.2];\ncolor_stem = [0.3,0.2,0.1];\n\n// Main fruit body - ellipsoid with flattened bottom\nmodule fruit_body() {\n    difference() {\n        // Main ellipsoid\n        scale([1, 1, 1-base_flat_percent])\n            sphere(d=max_diameter, $fn=60);\n        \n        // Flatten base\n        translate([0,0,-max_diameter/2*(1-base_flat_percent)])\n            cube([max_diameter*2, max_diameter*2, max_diameter*base_flat_percent], center=true);\n    }\n}\n\n// Ridges running from stem to base\nmodule ridges() {\n    for(i=[0:ridge_count-1]) {\n        rotate([0,0,i*360/ridge_count])\n            translate([0, max_diameter/2-1, 0])\n                scale([0.2, 1, 1.1])\n                    sphere(d=max_diameter/4, $fn=10);\n    }\n}\n\n// Stem with natural curve\nmodule stem() {\n    color(color_stem)\n    translate([0,0,length/2+stem_length/2])\n        rotate([80,0,0])\n            cylinder(h=stem_length, d1=stem_diameter, d2=stem_diameter*0.7, $fn=8);\n}\n\n// Surface texture - small bumps\nmodule surface_texture() {\n    difference() {\n        sphere(d=max_diameter, $fn=60);\n        \n        // Random small indentations\n        for(i=[0:30]) {\n            rotate([i*137.5, 0, 0])\n                translate([0, \n                          max_diameter/2*cos(i*137.5), \n                          max_diameter/2*sin(i*137.5)])\n                    sphere(d=0.8, $fn=6);\n        }\n    }\n}\n\n// Combine all parts\ncolor(color_fruit)\nunion() {\n    // Main fruit scaled to proper length\n    scale([1, 1, length/max_diameter])\n        union() {\n            fruit_body();\n            ridges();\n            surface_texture();\n        };\n    \n    // Stem attachment\n    stem();\n    \n    // Small calyx remnants at stem base\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([0, stem_diameter*0.7, length/2])\n                cylinder(h=1.5, d1=1.5, d2=0.5, $fn=6);\n    }\n}\n\n// Base support ring for printing\nif(max_diameter*base_flat_percent < 2) {\n    translate([0,0,-max_diameter/2*(1-base_flat_percent)])\n        cylinder(h=1, d=max_diameter*1.1, $fn=30);\n}",
    "renders": true
  },
  {
    "fruit": "cherryplum",
    "openscad_code": "// Cherryplum - realistic style, medium complexity\n// Overall size ~60 mm\n\n$fn = 60; // Smooth curves\n\nmodule cherryplum() {\n    // Main body - slightly compressed sphere\n    translate([0, 0, 0])\n    scale([1, 1, 0.9])\n    sphere(d = 50);\n\n    // Stem base - small cylinder\n    translate([0, 0, 25])\n    cylinder(h = 3, d1 = 8, d2 = 6, center = true);\n\n    // Stem - curved cylinder\n    translate([0, 0, 26.5])\n    rotate([0, 15, 0])\n    cylinder(h = 15, d = 3, center = false);\n\n    // Slight indent at top\n    translate([0, 0, 24])\n    scale([1, 1, 0.3])\n    sphere(d = 12);\n\n    // Bottom indent\n    translate([0, 0, -22])\n    scale([1, 1, 0.4])\n    sphere(d = 10);\n\n    // Subtle vertical grooves\n    for (i = [0:15:345]) {\n        rotate([0, 0, i])\n        translate([24, 0, 0])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 0.8])\n        cylinder(h = 45, d = 2, center = true);\n    }\n\n    // Surface bumps for texture\n    for (i = [0:30:330]) {\n        for (j = [0:30:150]) {\n            rotate([j, 0, i])\n            translate([24, 0, -5 + j/6])\n            sphere(d = 1.5);\n        }\n    }\n\n    // Highlight ridge at equator\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    scale([1, 1, 0.1])\n    torus(25, 1.5);\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n    translate([major, 0, 0])\n    circle(r = minor);\n}\n\n// Create the complete cherryplum\ncherryplum();",
    "renders": true
  },
  {
    "fruit": "aprium",
    "openscad_code": "// Aprium (apricot-plum hybrid) model\n// Medium complexity, realistic style\n// Approx 65 mm diameter\n\n// Main color\naprium_color = \"#FFC679\";\n\n// Main body module\nmodule aprium_body() {\n    color(aprium_color)\n    difference() {\n        // Main sphere shape with slight elongation\n        scale([1, 1, 1.2])\n        sphere(d = 55, $fn = 64);\n        \n        // Flatten bottom slightly for printing stability\n        translate([0, 0, -28])\n        cube([60, 60, 10], center = true);\n        \n        // Create seam indentation\n        rotate([90, 0, 0])\n        translate([0, 0, -30])\n        cylinder(h = 60, d1 = 3, d2 = 0.5, $fn = 32);\n        \n        // Add texture indentations\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([20, 0, -15])\n            sphere(d = 2.5, $fn = 16);\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    color(\"#5D4037\")\n    union() {\n        // Main stem\n        translate([0, 0, 32])\n        cylinder(h = 8, d1 = 3, d2 = 2, $fn = 12);\n        \n        // Small leaf\n        translate([3, 0, 36])\n        rotate([0, 110, 30])\n        scale([1, 0.6, 0.1])\n        sphere(d = 8, $fn = 16);\n    }\n}\n\n// Create aprium seam line\nmodule aprium_seam() {\n    color(\"#E65100\")\n    rotate([90, 0, 0])\n    translate([0, 0, -30])\n    cylinder(h = 60, d1 = 1.8, d2 = 0.8, $fn = 32);\n}\n\n// Surface spots for realism\nmodule surface_spots() {\n    color(\"#FF8A65\")\n    for(i = [0:5]) {\n        rotate([rand(i*10)*360, rand(i*20)*180, rand(i*30)*360])\n        translate([rand(i*40)*20 + 10, 0, rand(i*50)*15 - 10])\n        sphere(d = 1.5, $fn = 8);\n    }\n}\n\n// Generate random values between 0-1\nfunction rand(x) = (sin(x*12.9898 + 78.233)*43758.5453) % 1;\n\n// Main assembly\nunion() {\n    aprium_body();\n    stem();\n    aprium_seam();\n    surface_spots();\n}",
    "renders": true
  },
  {
    "fruit": "pluot",
    "openscad_code": "// Pluot (Plum-Apricot hybrid) - Realistic style, medium complexity\n// Overall dimensions: ~60mm diameter, ~55mm height\n\n// Main body parameters\n$fn = 36;\nbody_d = 60;\nbody_h = 45;\nstem_d = 5;\nstem_h = 10;\n\n// Surface detail parameters\ndimple_depth = 2;\ndimple_r = 8;\nseam_depth = 1;\nbump_r = 1.5;\nbump_count = 12;\n\n// Wall thickness for 3D printing\nwall_t = 1.5;\n\nmodule pluot_body() {\n    difference() {\n        // Main body - slightly flattened sphere\n        scale([1, 1, 0.9])\n        sphere(d = body_d);\n        \n        // Top indent for stem\n        translate([0, 0, body_d/2 * 0.9])\n        cylinder(h = dimple_depth*2, d1 = stem_d*2, d2 = stem_d*1.2, $fn = 24);\n        \n        // Bottom dimple\n        translate([0, 0, -body_d/2 * 0.9 + 0.5])\n        sphere(d = dimple_r);\n    }\n}\n\nmodule surface_seam() {\n    // Vertical seam along the body\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = body_d, d = body_d + 2, $fn = 2);\n        translate([0, 0, -1])\n        cylinder(h = body_d + 2, d = body_d - seam_depth*2, $fn = 2);\n    }\n}\n\nmodule small_bumps() {\n    // Random small bumps for realistic texture\n    for(i = [0:bump_count-1]) {\n        rotate([0, 0, i * 360/bump_count])\n        translate([body_d/2 * 0.85, 0, sin(i * 15) * 3])\n        sphere(d = bump_r);\n    }\n}\n\nmodule stem() {\n    // Stem with slight curve\n    translate([0, 0, body_d/2 * 0.9])\n    rotate([5, 0, 0])\n    cylinder(h = stem_h, d1 = stem_d, d2 = stem_d * 0.7, $fn = 12);\n    \n    // Stem base flare\n    translate([0, 0, body_d/2 * 0.9])\n    cylinder(h = 2, d1 = stem_d * 1.8, d2 = stem_d, $fn = 12);\n}\n\n// Assemble the pluot\nunion() {\n    // Main body with hollow interior for printing\n    difference() {\n        pluot_body();\n        scale([0.85, 0.85, 0.85])\n        translate([0, 0, -body_d/20])\n        sphere(d = body_d - wall_t*2);\n    }\n    \n    // Surface details\n    surface_seam();\n    small_bumps();\n    \n    // Stem\n    stem();\n}\n\n// Printing orientation helper (comment out for final print)\n%translate([0, 0, -body_d/2 * 0.9])\ncube([body_d+10, body_d+10, 1], center = true);",
    "renders": true
  },
  {
    "fruit": "peacotum",
    "openscad_code": "// Peacotum (Peach-Plum-Apricot Hybrid) in realistic style - medium complexity\n// Overall dimensions ~60mm diameter\n\n// Constants\n$fn = 48;\nradius = 30;\nstem_length = 15;\nstem_diameter = 4;\nfruit_color = [0.9, 0.4, 0.2];\nstem_color = [0.4, 0.2, 0.1];\n\nmodule peacotum() {\n    // Main fruit body - slightly flattened sphere\n    translate([0, 0, -5])\n    scale([1, 1, 0.85])\n    color(fruit_color)\n    sphere(r = radius);\n    \n    // Top indent where stem attaches\n    translate([0, 0, 25])\n    rotate_extrude(angle = 360)\n    polygon(points=[[0,0], [8,0], [5,-4], [0,-3]]);\n    \n    // Stem\n    translate([0, 0, 25])\n    color(stem_color)\n    cylinder(h = stem_length, r1 = stem_diameter/2, r2 = stem_diameter/3);\n    \n    // Small leaf near stem\n    translate([0, 4, 35])\n    rotate([0, -20, 0])\n    color([0.2, 0.5, 0.2])\n    linear_extrude(height = 0.5)\n    polygon(points=[[0,0], [8,2], [12,0], [8,-2]]);\n    \n    // Surface texture - small dimples\n    for(i = [0:15:345]) {\n        rotate([0, 90, i])\n        translate([radius-1, 0, 0])\n        rotate([0, 90, 0])\n        translate([0, 0, -radius])\n        scale([1, 1, 0.3])\n        sphere(r = 1.5, $fn = 16);\n    }\n    \n    // Natural seam line\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([0, 0, -5])\n        scale([1, 1, 0.85])\n        difference() {\n            sphere(r = radius + 0.1);\n            translate([0, 0, -radius-1])\n            cube([radius*2, 0.5, radius*2], center = true);\n        }\n    }\n    \n    // Bottom blossom scar\n    translate([0, 0, -radius-2])\n    rotate_extrude(angle = 360)\n    polygon(points=[[0,0], [3,0], [2,1], [0,0.5]]);\n    \n    // Subtle color variation patches\n    for(i = [0:60:300]) {\n        rotate([0, 0, i])\n        translate([radius-0.5, 0, 0])\n        rotate([0, 90, 0])\n        color([0.85, 0.35, 0.15])\n        scale([1, 1.5, 0.5])\n        sphere(r = 8, $fn = 16);\n    }\n}\n\npeacotum();",
    "renders": true
  },
  {
    "fruit": "nectaplum",
    "openscad_code": "// Nectaplum - hybrid of nectarine and plum\n// Realistic medium complexity model suitable for 3D printing\n\n$fn = 32; // Smooth curves\n\nmodule nectaplum_body() {\n    // Main fruit body - slightly elongated sphere\n    scale([1, 1.1, 0.9]) \n    sphere(d = 45);\n    \n    // Add slight ridge for characteristic plum shape\n    difference() {\n        translate([0, 0, -5])\n        sphere(d = 46);\n        \n        translate([0, 0, -8])\n        sphere(d = 44);\n    }\n}\n\nmodule stem_attachment() {\n    // Stem base - slightly indented\n    translate([0, 0, 19])\n    rotate([0, 0, 0])\n    cylinder(h = 3, d1 = 8, d2 = 6, $fn = 16);\n}\n\nmodule stem() {\n    // Actual stem - curved slightly\n    translate([0, 0, 22])\n    rotate([20, 0, 0])\n    cylinder(h = 12, d1 = 3, d2 = 2, $fn = 8);\n    \n    // Small leaf near stem\n    translate([2, 1, 28])\n    rotate([45, 10, 30])\n    scale([1, 1.5, 0.3])\n    sphere(d = 6);\n}\n\nmodule suture_line() {\n    // Characteristic seam running top to bottom\n    for (i = [0:5:180]) {\n        rotate([0, 0, i]) {\n            translate([22.5, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 45, d = 0.5, center = true);\n        }\n    }\n}\n\nmodule realistic_surface() {\n    // Add subtle texture dots for realistic skin\n    for (angle = [0:15:180]) {\n        for (height = [-20:3:20]) {\n            rotate([0, angle, 0])\n            translate([22.5, 0, height])\n            sphere(d = 0.5);\n        }\n    }\n}\n\nmodule blossom_end() {\n    // Small indentation at bottom\n    translate([0, 0, -20])\n    rotate([0, 0, 0])\n    cylinder(h = 2, d1 = 2, d2 = 4, $fn = 12);\n}\n\n// Main assembly\nunion() {\n    // Core fruit shape\n    nectaplum_body();\n    \n    // Surface details\n    difference() {\n        union() {\n            // Smooth base\n            nectaplum_body();\n            \n            // Add surface texture\n            realistic_surface();\n            \n            // Suture line\n            suture_line();\n        }\n        \n        // Subtle hollow at stem\n        stem_attachment();\n    }\n    \n    // Stem and leaf\n    color(\"darkgreen\")\n    union() {\n        stem();\n    }\n    \n    // Bottom blossom end\n    blossom_end();\n}\n\n// Ensure printable orientation\nrotate([0, 180, 0])\ntranslate([0, 0, -25]) {\n    // Main model centered\n    %children();\n}",
    "renders": true
  },
  {
    "fruit": "plumcot",
    "openscad_code": "// Plumcot - Medium Complexity Realistic Style\n// Approx 65 mm tall, 3D-printable with 1.5 mm walls\n\n$fn = 48;  // Smooth curves\n\nmodule plumcot_body() {\n    // Main flesh volume\n    hull() {\n        // Upper dome\n        translate([0, 0, 15])\n            scale([1, 1, 0.8])\n            sphere(d = 52);\n        // Lower bulb\n        translate([0, 0, -10])\n            scale([1.1, 1.05, 1.2])\n            sphere(d = 48);\n    }\n}\n\nmodule stem() {\n    // Stem base\n    translate([0, 0, 28])\n        cylinder(h = 8, d1 = 6, d2 = 4.5, $fn = 12);\n\n    // Stem tip\n    translate([0, 0, 36])\n        cylinder(h = 4, d1 = 4.5, d2 = 3, $fn = 12);\n}\n\nmodule suture_line() {\n    // Subtle vertical ridge running from stem to bottom\n    for (z = [-10:2:28]) {\n        translate([0, 0, z])\n            scale([0.5, 0.08, 1.2])\n            sphere(d = 50);\n    }\n}\n\nmodule cheek_dimples() {\n    // Two shallow depressions on sides\n    translate([0, 25, 5])\n        scale([0.8, 0.3, 0.8])\n        sphere(d = 20);\n\n    translate([0, -25, 5])\n        scale([0.8, 0.3, 0.8])\n        sphere(d = 20);\n}\n\nmodule plumcot() {\n    difference() {\n        union() {\n            // Main body shell with 1.5 mm wall\n            difference() {\n                plumcot_body();\n                scale([0.94, 0.94, 0.94])\n                    plumcot_body();\n            }\n\n            // External details\n            suture_line();\n            cheek_dimples();\n            stem();\n        }\n\n        // Hollow interior\n        scale([0.88, 0.88, 0.88])\n            plumcot_body();\n    }\n}\n\n// Render the fruit upright\nplumcot();",
    "renders": true
  },
  {
    "fruit": "crabapple",
    "openscad_code": "// Crabapple for 3D printing\n// Realistic style, medium complexity\n\n$fn = 32;\n\nmodule apple_body() {\n    // Main apple shape\n    scale([1, 1, 0.9])\n    sphere(15);\n    \n    // Top indentation\n    translate([0, 0, 14])\n    rotate_extrude()\n    translate([0, 0])\n    polygon(points=[[0,0],[5,0],[0,5]]);\n}\n\nmodule calyx() {\n    // Calyx base\n    translate([0, 0, 14.5])\n    cylinder(h=2, r1=3, r2=2);\n    \n    // Sepals\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([2.5, 0, 15])\n        rotate([30, 0, 0])\n        scale([0.3, 1, 0.5])\n        sphere(3);\n    }\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, 16])\n    rotate([10, 0, 0])\n    cylinder(h=8, r=1.2);\n    \n    // Stem tip\n    translate([0, 0, 23.8])\n    sphere(1.2);\n}\n\nmodule leaf() {\n    // Leaf blade\n    translate([0, 0, 16])\n    rotate([0, 20, 0])\n    scale([0.3, 1, 0.1])\n    sphere(8);\n    \n    // Leaf stem\n    translate([0, 0, 16])\n    rotate([0, 20, 0])\n    translate([0, 8, 0])\n    cylinder(h=2, r=0.5);\n}\n\nmodule apple_texture() {\n    // Tiny bumps for realistic texture\n    for(i=[0:359:30]) {\n        for(j=[-30:30:30]) {\n            rotate([0, j, i])\n            translate([0, 0, 13.5])\n            sphere(0.5);\n        }\n    }\n}\n\nmodule crabapple() {\n    union() {\n        apple_body();\n        calyx();\n        stem();\n        \n        // Two leaves at angles\n        rotate([0, 0, 45])\n        leaf();\n        rotate([0, 0, -45])\n        rotate([0, 180, 0])\n        leaf();\n        \n        apple_texture();\n    }\n}\n\n// Scale to reasonable size (60mm tall)\nscale([1.2, 1.2, 1.2])\ncrabapple();",
    "renders": true
  },
  {
    "fruit": "ciderapple",
    "openscad_code": "// Cider Apple - Realistic Style with Medium Complexity\n// Overall dimensions: ~60mm diameter\n\n$fn = 36; // Resolution for curved surfaces\n\n// Main apple body\nmodule apple_body() {\n    // Core apple shape - slightly flattened sphere\n    translate([0, 0, 25])\n    scale([1, 1, 0.85])\n    sphere(d = 60);\n    \n    // Bottom indent\n    translate([0, 0, 5])\n    difference() {\n        cylinder(h = 5, d1 = 15, d2 = 0);\n        cylinder(h = 6, d = 16);\n    }\n}\n\n// Apple stem\nmodule stem() {\n    translate([0, 0, 50])\n    rotate([0, 15, 0])\n    cylinder(h = 15, d1 = 4, d2 = 2);\n}\n\n// Leaf attachment\nmodule leaf() {\n    translate([5, 5, 50])\n    rotate([0, 0, 45])\n    rotate([0, 20, 0])\n    linear_extrude(height = 2)\n    polygon(points = [\n        [0, 0],\n        [12, 3],\n        [18, 0],\n        [12, -3],\n        [0, 0]\n    ]);\n}\n\n// Apple dimples - surface imperfections\nmodule dimples() {\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([20, 0, 30])\n        rotate([0, 45, 0])\n        sphere(d = 3);\n    }\n}\n\n// Calyx - bottom of apple\nmodule calyx() {\n    translate([0, 0, 8])\n    difference() {\n        cylinder(h = 3, d = 15);\n        // Create petal-like indents\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([7, 0, -1])\n            cube([10, 2, 5], center = true);\n        }\n    }\n}\n\n// Main apple assembly\nmodule cider_apple() {\n    difference() {\n        union() {\n            apple_body();\n            stem();\n            leaf();\n            calyx();\n        }\n        \n        // Remove dimples from surface\n        dimples();\n    }\n    \n    // Add subtle stem indent\n    translate([0, 0, 48])\n    sphere(d = 6);\n}\n\n// Render the apple\ncider_apple();",
    "renders": true
  },
  {
    "fruit": "dessertapple",
    "openscad_code": "// Dessert Apple - Realistic Style, Medium Complexity\n// Approx 75mm tall x 70mm diameter\n\n// Main apple body\nmodule apple_body() {\n    difference() {\n        // Main apple sphere with slight elongation\n        scale([1, 1.2, 0.9])\n        sphere(d = 65, $fn = 64);\n        \n        // Indentation at top for stem\n        translate([0, 0, 30])\n        cylinder(h = 20, d1 = 8, d2 = 12, $fn = 16);\n        \n        // Indentation at bottom\n        translate([0, 0, -30])\n        cylinder(h = 15, d1 = 12, d2 = 8, $fn = 16);\n    }\n}\n\n// Apple stem\nmodule stem() {\n    color(\"saddlebrown\")\n    translate([0, 0, 35])\n    rotate([0, 0, 5])\n    cylinder(h = 18, d1 = 2.5, d2 = 3, $fn = 8);\n}\n\n// Small leaf\nmodule leaf() {\n    color(\"forestgreen\")\n    translate([5, 8, 45])\n    rotate([0, 20, -30])\n    scale([1, 1.5, 0.3])\n    sphere(d = 12, $fn = 16);\n}\n\n// Apple calyx (the star-like structure at bottom)\nmodule calyx() {\n    color(\"darkolivegreen\")\n    translate([0, 0, -35])\n    for(i = [0:5]) {\n        rotate([0, 0, i * 72])\n        translate([0, 4, 0])\n        scale([0.3, 1, 0.2])\n        sphere(d = 8, $fn = 8);\n    }\n}\n\n// Subtle apple dimples\nmodule dimples() {\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([20, 0, 0])\n        sphere(d = 3, $fn = 8);\n    }\n}\n\n// Combine all parts\nunion() {\n    apple_body();\n    stem();\n    leaf();\n    calyx();\n    \n    // Add subtle surface variations\n    difference() {\n        apple_body();\n        dimples();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "cookingapple",
    "openscad_code": "// Cooking Apple - Realistic Medium Complexity\n// Medium sized cooking apple (Granny Smith style) with stem, calyx and subtle surface bumps\n\n$fn = 32;  // Smooth curves\n\n// Main apple body - slightly squat sphere with flattening at top/bottom\nmodule apple_body() {\n    // Main rounded body\n    difference() {\n        union() {\n            // Core apple shape - slightly oblate sphere\n            scale([1, 1, 0.85]) \n                sphere(d = 60);\n            \n            // Add subtle bulges for realistic apple shape\n            for(i = [0:4]) {\n                rotate([0, 0, i * 72]) \n                    translate([28, 0, 5]) \n                        scale([0.4, 0.4, 0.3]) \n                            sphere(d = 20);\n            }\n        }\n        \n        // Indentation at top for stem\n        translate([0, 0, 25]) \n            cylinder(h = 10, d1 = 12, d2 = 8);\n            \n        // Indentation at bottom\n        translate([0, 0, -25]) \n            cylinder(h = 5, d1 = 15, d2 = 20);\n    }\n}\n\n// Stem module with slight curve\nmodule stem() {\n    color(\"brown\")\n    translate([0, 0, 30]) {\n        // Main stem\n        rotate([10, 0, 0])\n            cylinder(h = 18, d1 = 3, d2 = 2);\n            \n        // Small leaf attachment point\n        translate([0, 1.5, 9])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d1 = 1.5, d2 = 0.5);\n    }\n}\n\n// Calyx (bottom of apple)\nmodule calyx() {\n    color(\"darkgreen\")\n    translate([0, 0, -25]) {\n        // Central calyx structure\n        cylinder(h = 3, d = 8);\n        \n        // Calyx lobes\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([4, 0, -0.5])\n                    scale([0.5, 1, 0.3])\n                        cylinder(h = 2.5, d = 3);\n        }\n    }\n}\n\n// Surface dimples for realistic texture\nmodule surface_details() {\n    color(\"lightgreen\")\n    // Small surface imperfections\n    for(i = [0:7]) {\n        rotate([0, 0, i * 51.4]) {\n            for(j = [1:3]) {\n                translate([20 + j * 5, 0, -10 + j * 8])\n                    scale([0.3, 0.3, 0.2])\n                        sphere(d = 2);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    apple_body();\n    stem();\n    calyx();\n    surface_details();\n}",
    "renders": true
  },
  {
    "fruit": "bakeryapple",
    "openscad_code": "// Realistic bakery apple - medium complexity\n// Overall height ~70 mm, printable without supports\n\n// Apple body\nmodule apple_body() {\n    difference() {\n        // Main apple shape - slightly flattened sphere\n        scale([1, 1, 0.9])\n        sphere(d=50, $fn=50);\n        \n        // Indentation at top\n        translate([0, 0, 22])\n        cylinder(h=15, d1=10, d2=15, $fn=30);\n        \n        // Indentation at bottom\n        translate([0, 0, -22])\n        cylinder(h=10, d1=15, d2=8, $fn=30);\n    }\n}\n\n// Apple stem\nmodule stem() {\n    color(\"brown\")\n    translate([0, 0, 25])\n    rotate([0, 0, 10])\n    cylinder(h=15, d1=3, d2=2, $fn=8);\n}\n\n// Small leaf\nmodule leaf() {\n    color(\"darkgreen\")\n    translate([5, 5, 35])\n    rotate([0, 0, -30])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.5)\n    scale([1, 0.6, 1])\n    circle(d=10, $fn=20);\n}\n\n// Realistic dimples on apple surface\nmodule apple_dimples() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([22, 0, -5 + i * 2])\n        rotate([90, 0, 0])\n        cylinder(h=1, d1=3, d2=0.5, $fn=20);\n    }\n    \n    for (j = [0:5]) {\n        rotate([0, 0, j * 60 + 30])\n        translate([18, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=1, d1=2.5, d2=0.5, $fn=20);\n    }\n}\n\n// Main apple assembly\nunion() {\n    // Smooth apple body\n    apple_body();\n    \n    // Add subtle surface details\n    apple_dimples();\n    \n    // Stem and leaf\n    stem();\n    leaf();\n}",
    "renders": true
  },
  {
    "fruit": "bramble",
    "openscad_code": "// Realistic medium-complexity bramble for 3D printing\n// Overall size ~70 mm tall, 65 mm wide\n\n// Parameters\nstem_d = 4.2;           // Thicker stem for printability\nstem_seg_h = 6;         // Segment height of stem\nstem_seg_cnt = 8;       // Number of stem segments\nthorns_per_ring = 12;   // Thorns around each ring\nthorn_d = 1.4;          // Thorn base diameter\nthorn_l = 3.5;          // Thorn length\nleaf_w = 8;             // Leaf width\nleaf_l = 12;            // Leaf length\nleaf_t = 0.8;           // Leaf thickness\nberry_d = 4;            // Berry diameter\nberry_cnt = 7;          // Number of berries\n\n// Main stem module\nmodule stem() {\n    // Build stem from stacked cylinders with slight randomness\n    for (i=[0:stem_seg_cnt-1]) {\n        translate([0,0,i*stem_seg_h])\n            cylinder(d1=stem_d+sin(i*137.5)*0.8,\n                     d2=stem_d+sin((i+1)*137.5)*0.8,\n                     h=stem_seg_h, $fn=12);\n    }\n}\n\n// Single thorn module\nmodule thorn() {\n    // Slightly curved thorn for realism\n    hull() {\n        translate([0,0,0])\n            sphere(d=thorn_d, $fn=8);\n        translate([0,0,thorn_l])\n            sphere(d=thorn_d*0.5, $fn=8);\n    }\n}\n\n// Thorn ring module\nmodule thorn_ring(z_pos, angle_offset) {\n    for (i=[0:thorns_per_ring-1]) {\n        angle = i*(360/thorns_per_ring) + angle_offset;\n        translate([stem_d/2*cos(angle),\n                   stem_d/2*sin(angle),\n                   z_pos])\n            rotate([90,0,angle+90])\n                thorn();\n    }\n}\n\n// Leaf module with realistic serrations\nmodule leaf() {\n    difference() {\n        // Main leaf shape\n        scale([1,1.2,1])\n            rotate([0,90,0])\n                cylinder(h=leaf_l, r1=leaf_w/2, r2=leaf_w/3, $fn=20);\n        \n        // Serrations on edges\n        for (i=[0:10]) {\n            rotate([0,0,i*25-125])\n                translate([leaf_w/2-0.5,0,leaf_l/2])\n                    cube([2,leaf_t+0.2,4], center=true);\n        }\n        \n        // Vein groove\n        translate([0,leaf_l/2,0])\n            rotate([0,90,0])\n                cylinder(h=leaf_l-2, d=1, $fn=6);\n    }\n}\n\n// Berry module\nmodule berry() {\n    // Simple sphere with small calyx\n    union() {\n        color(\"darkred\")\n            sphere(d=berry_d, $fn=12);\n        translate([0,0,berry_d/2])\n            cylinder(h=0.8, d1=berry_d*0.8, d2=berry_d*0.4, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Stem\n    stem();\n    \n    // Add thorn rings along stem\n    for (i=[1:2:stem_seg_cnt-1]) {\n        thorn_ring(i*stem_seg_h-3, i*15);\n    }\n    \n    // Add leaves at various positions\n    translate([0,0,stem_seg_h*3])\n        rotate([0,0,30])\n            leaf();\n    \n    translate([0,0,stem_seg_h*5])\n        rotate([0,0,-45])\n            mirror([0,1,0])\n                leaf();\n    \n    // Add berries in cluster near top\n    for (i=[0:berry_cnt-1]) {\n        angle = i*(360/berry_cnt);\n        translate([cos(angle)*8, sin(angle)*8, stem_seg_h*7])\n            berry();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "caneberry",
    "openscad_code": "// Caneberry (Blackberry/Raspberry) - Realistic Style\n// Medium complexity 3D printable model\n\n// Parameters for sizing\nberry_diameter = 12;\ndruplet_size = 2.2;\ndruplet_rows = 6;\ndruplets_per_row = 12;\nstem_length = 15;\nstem_diameter = 3;\ncore_size = berry_diameter * 0.7;\n\n// Main berry module\nmodule caneberry() {\n    difference() {\n        // Outer druplets\n        union() {\n            for (i = [0:druplet_rows-1]) {\n                row_angle = i * (180/(druplet_rows-1));\n                row_radius = sin(row_angle) * (berry_diameter/2);\n                row_y = cos(row_angle) * (berry_diameter/2) - (berry_diameter/2);\n                \n                for (j = [0:druplets_per_row-1]) {\n                    rotate_angle = j * (360/druplets_per_row);\n                    translate([0, row_y, 0])\n                    rotate([0, row_angle, rotate_angle])\n                    translate([row_radius, 0, 0])\n                    scale([1, 1.2, 1])\n                    sphere(d=druplet_size, $fn=12);\n                }\n            }\n        }\n        \n        // Remove inner core to create hollow structure\n        translate([0, -berry_diameter/4, 0])\n        sphere(d=core_size, $fn=20);\n        \n        // Remove bottom for 3D printing\n        translate([-berry_diameter/2-1, -berry_diameter-1, -berry_diameter/2-1])\n        cube([berry_diameter+2, berry_diameter+2, berry_diameter/2+1]);\n    }\n}\n\n// Stem with realistic texture\nmodule stem() {\n    union() {\n        // Main stem cylinder\n        translate([0, -stem_length/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=stem_length, d=stem_diameter, $fn=8);\n        \n        // Stem ridges for texture\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([stem_diameter/2 - 0.3, -stem_length/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h=stem_length, d=0.6, $fn=6);\n        }\n    }\n}\n\n// Sepals (green leafy parts at top)\nmodule sepals() {\n    for (i = [0:4]) {\n        angle = i * (360/5);\n        rotate([0, 0, angle])\n        translate([0, -berry_diameter/2 - 1, 0])\n        rotate([45, 0, 0])\n        scale([1, 1.5, 0.3])\n        sphere(d=6, $fn=8);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Main berry\n    caneberry();\n    \n    // Stem\n    translate([0, -berry_diameter/2, 0])\n    stem();\n    \n    // Sepals\n    translate([0, -berry_diameter/2, 0])\n    sepals();\n}",
    "renders": true
  },
  {
    "fruit": "aggregate",
    "openscad_code": "aggregate();\nmodule aggregate(){\n    // Overall dimensions\n    width = 80;\n    length = 60;\n    height = 45;\n    \n    // Main aggregate body\n    color(\"DarkGoldenrod\")\n    difference(){\n        union(){\n            // Central bulbous body\n            translate([0,0,height/2])\n                scale([1.5,1.2,1])\n                sphere(d=height);\n            \n            // Left lobe\n            translate([-width/3,0,0])\n                rotate([0,-20,0])\n                scale([1,1.2,0.9])\n                sphere(d=height*0.8);\n            \n            // Right lobe\n            translate([width/3,0,0])\n                rotate([0,20,0])\n                scale([1,1.2,0.9])\n                sphere(d=height*0.8);\n        }\n        \n        // Hollow out center for printing\n        translate([0,0,height/2])\n            scale([0.7,0.7,0.8])\n            sphere(d=height*0.9);\n    }\n    \n    // Arterial branches\n    color(\"FireBrick\")\n    for(i=[0:30:359]){\n        rotate([0,i,i*0.7])\n            translate([height*0.4*cos(i),height*0.3*sin(i),height*0.6])\n                rotate([90-i*0.2,0,0])\n                cylinder(h1=height*0.3, h2=height*0.05, r1=height/15, r2=height/25);\n    }\n    \n    // Veins\n    color(\"RoyalBlue\")\n    for(i=[0:45:359]){\n        rotate([0,i,i*0.5])\n            translate([height*0.35*cos(i+15),height*0.25*sin(i+15),height*0.5])\n                rotate([90-i*0.1,0,0])\n                cylinder(h1=height*0.25, h2=height*0.08, r1=height/20, r2=height/30);\n    }\n    \n    // Ureter base\n    color(\"SlateGray\")\n    translate([0,-length/2,0])\n        rotate([90,0,0])\n        cylinder(h=length/2, r1=height/8, r2=height/12);\n    \n    // Calyces (cup-like structures)\n    color(\"SandyBrown\")\n    for(i=[0:60:359]){\n        rotate([0,0,i])\n            translate([height*0.3,0,height*0.4])\n                rotate([0,-15,0])\n                difference(){\n                    sphere(d=height/6);\n                    translate([0,0,-height/12])\n                        cube([height/5,height/5,height/6], center=true);\n                }\n    }\n    \n    // Renal capsule detail\n    color(\"DarkKhaki\", 0.3)\n    difference(){\n        translate([0,0,height/2])\n            scale([1.6,1.3,1.1])\n            sphere(d=height*1.05);\n        translate([0,0,height/2])\n            scale([1.55,1.25,1.05])\n            sphere(d=height*1.05);\n    }\n    \n    // Hilum indentation\n    color(\"DarkGoldenrod\")\n    difference(){\n        translate([0,0,0])\n            sphere(d=height*1.1);\n        translate([0,length/3,height/2])\n            rotate([0,0,0])\n            scale([1,1.5,1.2])\n            cylinder(h=height*1.5, r=height/3);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "drupe",
    "openscad_code": "// Realistic 3D printable drupe (cherry-like)\n// Overall size ~45 mm\n\nmodule stone() {\n    // Central stone with realistic pit shape\n    difference() {\n        scale([1, 0.8, 1.2]) sphere(d=12, $fn=64);\n        // Ventral suture groove\n        translate([0,-6.1,0]) rotate([0,90,0]) \n            cylinder(h=12, d1=1, d2=3, $fn=3);\n        // Micropyle dimple\n        translate([0,0,6]) sphere(d=2, $fn=16);\n    }\n}\n\nmodule flesh() {\n    // Juicy flesh layer around stone\n    difference() {\n        sphere(d=28, $fn=128);\n        sphere(d=13, $fn=64); // cavity for stone\n    }\n}\n\nmodule skin() {\n    // Thin glossy skin\n    difference() {\n        sphere(d=30, $fn=128);\n        sphere(d=28.5, $fn=128); // hollow out\n    }\n}\n\nmodule stem_base() {\n    // Stem scar\n    translate([0,0,15]) \n        cylinder(h=2, d1=4, d2=5.5, $fn=20);\n}\n\nmodule stem() {\n    // Curved stem\n    for(a=[0:15:45])\n        translate([0,0,15+1.5*a]) rotate([a,0,0]) \n            rotate([0,90,0]) cylinder(h=2, d=4.5-0.03*a, $fn=12);\n    // Stem tip\n    translate([0,0,15+1.5*45]) rotate([45,0,0]) \n        sphere(d=3.5, $fn=16);\n}\n\n// Build complete drupe\nunion() {\n    // Main fruit parts\n    skin();\n    flesh();\n    \n    // Position stone inside\n    translate([0,0,-1]) stone();\n    \n    // Stem attachment\n    stem_base();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "pome",
    "openscad_code": "// Realistic Pome (Apple) - Medium Complexity\n// Overall dimensions: ~70mm height x ~75mm width\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main apple body - slightly asymmetrical\nmodule apple_body() {\n    difference() {\n        // Main apple shape - squat sphere with flattened top/bottom\n        scale([1, 1, 0.85]) \n            sphere(d = 70);\n        \n        // Indentation at top for stem\n        translate([0, 0, 30])\n            cylinder(h = 10, r1 = 6, r2 = 8, $fn = 20);\n            \n        // Indentation at bottom\n        translate([0, 0, -30])\n            cylinder(h = 5, r1 = 8, r2 = 5, $fn = 20);\n    }\n}\n\n// Apple stem with natural curve\nmodule stem() {\n    translate([0, 0, 35]) {\n        rotate([0, 10, 0]) {\n            linear_extrude(height = 12, twist = -20, scale = 0.8)\n                circle(d = 3, $fn = 8);\n        }\n    }\n}\n\n// Leaf attached to stem\nmodule leaf() {\n    translate([-5, 4, 42]) {\n        rotate([90, 0, -30]) {\n            // Main leaf blade\n            scale([1, 0.6, 0.3])\n                sphere(d = 15);\n                \n            // Leaf stem\n            translate([0, -5, 0])\n                cylinder(h = 8, d = 1.5);\n                \n            // Leaf vein\n            for(i = [-1, 0, 1]) {\n                rotate([0, 0, i * 20])\n                    translate([0, -2, 0.5])\n                        cube([0.5, 6, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Calyx (bottom of apple)\nmodule calyx() {\n    translate([0, 0, -32]) {\n        // Ring of sepals\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([5, 0, 0])\n                    rotate([60, 0, 0])\n                        scale([0.3, 1, 0.2])\n                            cylinder(h = 8, r = 3, $fn = 6);\n            }\n        }\n    }\n}\n\n// Subtle apple dimple features\nmodule apple_features() {\n    // Top ridge lines\n    for(i = [0:60:300]) {\n        rotate([0, 0, i]) {\n            translate([0, -15, 25])\n                rotate([75, 0, 0])\n                    scale([1, 0.5, 0.3])\n                        sphere(d = 8);\n        }\n    }\n    \n    // Bottom ridge lines\n    for(i = [30:60:330]) {\n        rotate([0, 0, i]) {\n            translate([0, -12, -25])\n                rotate([105, 0, 0])\n                    scale([1, 0.5, 0.3])\n                        sphere(d = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    apple_body();\n    stem();\n    leaf();\n    calyx();\n    apple_features();\n}",
    "renders": true
  },
  {
    "fruit": "stonefruit",
    "openscad_code": "// Stonefruit (peach) - medium complexity realistic style\n// Total height ~65mm, base diameter ~55mm\n\n$fn = 50;  // Smooth curves\n\nmodule peach_flesh() {\n    // Main peach body - slightly flattened sphere for realistic shape\n    scale([1, 1, 0.85]) \n        sphere(d = 55);\n}\n\nmodule peach_crease() {\n    // Vertical crease line down the side\n    rotate([0, 90, 0])\n        translate([-27.5, 0, -5])\n            scale([1, 0.15, 1.1])\n                cylinder(h = 60, d = 55);\n}\n\nmodule stem_attachment() {\n    // Indentation where stem attaches\n    translate([0, 0, 23])\n        rotate([0, 0, 0])\n            difference() {\n                cylinder(h = 8, d1 = 12, d2 = 8);\n                translate([0, 0, -1])\n                    cylinder(h = 10, d1 = 14, d2 = 10);\n            }\n}\n\nmodule stem() {\n    // Small curved stem\n    translate([0, 0, 28])\n        rotate([20, 0, 0])\n            scale([0.3, 0.3, 1])\n                cylinder(h = 12, d1 = 6, d2 = 3);\n}\n\nmodule leaf() {\n    // Single leaf with curved shape\n    translate([8, 0, 26])\n        rotate([0, 120, 30])\n            scale([0.8, 0.4, 0.15])\n                difference() {\n                    sphere(d = 15);\n                    translate([5, 0, 0])\n                        sphere(d = 15);\n                }\n}\n\nmodule surface_detail() {\n    // Subtle surface texture using small spheres\n    for (i = [0:5:355]) {\n        rotate([0, 0, i])\n            translate([25, 0, 5 + sin(i) * 3])\n                sphere(d = 1.5);\n    }\n}\n\nmodule stonefruit() {\n    difference() {\n        union() {\n            // Main peach body\n            peach_flesh();\n            \n            // Add stem and leaf\n            stem();\n            leaf();\n        }\n        \n        // Remove crease\n        peach_crease();\n        \n        // Remove stem attachment point\n        stem_attachment();\n    }\n    \n    // Add subtle surface details\n    surface_detail();\n}\n\n// Render the complete stonefruit\nstonefruit();",
    "renders": true
  },
  {
    "fruit": "softfruit",
    "openscad_code": "// Realistic medium-complexity softfruit: Peach\n// Approx 70 mm tall, printable without supports\n\n$fn = 48;      // Smooth curves\nwall = 1.2;    // 3D-printable wall thickness\n\nmodule peach_body() {\n    // Main peach shape - slightly compressed sphere with flattened base\n    difference() {\n        // Core peach body\n        union() {\n            scale([1, 1, 0.85])\n                sphere(d = 60);\n            \n            // Add slight bulge at bottom\n            translate([0, 0, -25])\n                scale([0.9, 0.9, 0.3])\n                    sphere(d = 40);\n        }\n        \n        // Hollow out for 3D printing\n        scale([0.8, 0.8, 0.7])\n            translate([0, 0, -5])\n                sphere(d = 60);\n    }\n}\n\nmodule peach_crease() {\n    // Vertical crease line down the fruit\n    for (i = [-1:1]) {\n        rotate([0, 0, i * 30])\n            translate([0, 29.5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, d1 = 4, d2 = 8, $fn = 8);\n    }\n}\n\nmodule stem_attachment() {\n    // Indentation where stem connects\n    difference() {\n        translate([0, 0, 30])\n            sphere(d = 10);\n        \n        translate([0, 0, 35])\n            cylinder(h = 10, r = 8);\n    }\n}\n\nmodule stem() {\n    // Curved stem with slight taper\n    translate([0, 0, 30]) {\n        rotate([0, 20, 0]) {\n            hull() {\n                translate([0, 0, 0])\n                    cylinder(h = 2, r = 1.5);\n                translate([0, 0, 15])\n                    cylinder(h = 2, r = 1);\n            }\n        }\n    }\n}\n\nmodule leaf() {\n    // Simple almond-shaped leaf\n    translate([0, -8, 28])\n        rotate([50, 0, 0])\n            rotate([0, 0, 45])\n                scale([1, 0.5, 0.1])\n                    sphere(d = 25);\n}\n\nmodule peach_surface_detail() {\n    // Small dimples across surface using loop\n    for (a = [0 : 15 : 180]) {\n        for (b = [-60 : 15 : 60]) {\n            if (a != 90 || abs(b) > 30) {\n                rotate([0, b, a]) {\n                    translate([0, 0, 28])\n                        sphere(d = 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the peach\nunion() {\n    peach_body();\n    \n    // Add visual details (not printed)\n    %peach_crease();\n    %peach_surface_detail();\n    \n    // Stem and leaf (printed solid)\n    stem_attachment();\n    stem();\n    leaf();\n}",
    "renders": true
  },
  {
    "fruit": "topfruit",
    "openscad_code": "// Topfruit (apple) - realistic medium complexity\n// Overall dimensions: ~70mm tall x ~75mm diameter\n\n$fn = 36;\n\n// Main parameters\napple_radius = 35;\nstem_length = 12;\nstem_base_radius = 3;\nstem_top_radius = 2;\ncalyx_depth = 6;\nbody_height = 70;\n\n// Color hint for preview\ncolor(\"crimson\") difference() {\n    // Main apple body\n    union() {\n        // Core apple shape - slightly flattened sphere\n        scale([1, 1, 1.1]) sphere(r = apple_radius);\n        \n        // Bottom indent\n        translate([0, 0, -apple_radius + 2])\n            scale([1, 1, 0.3])\n                sphere(r = apple_radius * 0.6);\n        \n        // Top indent for calyx\n        translate([0, 0, apple_radius - 1])\n            scale([1, 1, 0.4])\n                sphere(r = apple_radius * 0.7);\n    }\n    \n    // Remove calyx indent\n    translate([0, 0, apple_radius - calyx_depth])\n        cylinder(h = calyx_depth + 5, r1 = apple_radius * 0.35, r2 = apple_radius * 0.25);\n}\n\n// Stem\ntranslate([0, 0, apple_radius + 2])\n    cylinder(h = stem_length, r1 = stem_base_radius, r2 = stem_top_radius);\n\n// Calyx leaves (5 parts)\nmodule calyx_leaf() {\n    rotate([0, 90, 0])\n        scale([1, 0.3, 0.5])\n            sphere(r = apple_radius * 0.2);\n}\n\nfor (i = [0:4]) {\n    rotate([0, 0, i * 72])\n        translate([0, apple_radius * 0.3, apple_radius - calyx_depth + 1])\n            calyx_leaf();\n}\n\n// Subtle apple ridges\nmodule ridge() {\n    translate([0, 0, -apple_radius])\n        cylinder(h = body_height, r = apple_radius + 0.5);\n}\n\nfor (i = [0:2]) {\n    rotate([0, 0, i * 120])\n        intersection() {\n            scale([1.02, 1, 1]) sphere(r = apple_radius);\n            ridge();\n        }\n}\n\n// Small dimple at bottom\ntranslate([0, 0, -apple_radius + 1])\n    sphere(r = 3);",
    "renders": true
  },
  {
    "fruit": "bushfruit",
    "openscad_code": "// Realistic Bushfruit (Blackberry/Raspberry style aggregate fruit)\n// Medium complexity with realistic drupelets arranged in a dome\n// 3D printable - no overhangs, solid base\n\n// Overall dimensions\nfruit_diameter = 40;\nfruit_height = 35;\nbase_thickness = 5;\n\n// Drupelet (individual berry segment) parameters\ndrupelet_count = 35;\ndrupelet_radius = 4.5;\ndrupelet_height = 7;\nseed_radius = 1.5;\n\n// Calyx parameters\ncalyx_petal_count = 5;\ncalyx_petal_length = 8;\ncalyx_petal_width = 6;\ncalyx_petal_thickness = 1.5;\n\n// Main fruit module\nmodule bushfruit() {\n    // Solid base for 3D printing stability\n    translate([0, 0, 0])\n        cylinder(h=base_thickness, d=fruit_diameter, $fn=32);\n    \n    // Generate drupelets in a dome pattern\n    for (i = [0:drupelet_count-1]) {\n        // Fibonacci sphere distribution for natural look\n        phi = acos(1 - 2*(i+0.5)/drupelet_count);\n        theta = pi * (1 + sqrt(5)) * i;\n        \n        x = (fruit_diameter/2 - drupelet_radius) * cos(theta) * sin(phi);\n        y = (fruit_diameter/2 - drupelet_radius) * sin(theta) * sin(phi);\n        z = (fruit_height - drupelet_height/2) * cos(phi) + base_thickness;\n        \n        // Skip bottom drupelets to create flat base\n        if (z > base_thickness + drupelet_height/2) {\n            translate([x, y, z])\n                rotate([0, 0, atan2(y, x)])\n                drupelet();\n        }\n    }\n    \n    // Calyx (green leafy top)\n    translate([0, 0, fruit_height + base_thickness])\n        calyx();\n}\n\n// Individual drupelet module with seed detail\nmodule drupelet() {\n    // Main drupelet body\n    difference() {\n        // Outer berry shape\n        scale([1, 1, 1.3])\n            sphere(d=drupelet_radius*2, $fn=16);\n        \n        // Seed cavity\n        translate([0, 0, -drupelet_height/4])\n            sphere(d=seed_radius*2.2, $fn=12);\n    }\n    \n    // Internal seed\n    color(\"darkslategray\")\n    translate([0, 0, -drupelet_height/4])\n        sphere(d=seed_radius*2, $fn=8);\n    \n    // Small stem connection\n    translate([0, 0, -drupelet_height/2])\n        cylinder(h=1, d1=drupelet_radius/2, d2=drupelet_radius/3, $fn=8);\n}\n\n// Calyx (leafy top) module\nmodule calyx() {\n    // Central calyx base\n    cylinder(h=3, d=8, $fn=16);\n    \n    // Individual calyx petals\n    for (i = [0:calyx_petal_count-1]) {\n        rotate([0, 0, i*360/calyx_petal_count])\n        translate([0, 3, 0])\n            calyx_petal();\n    }\n}\n\n// Single calyx petal\nmodule calyx_petal() {\n    // Petal shape\n    difference() {\n        // Main petal body\n        translate([0, calyx_petal_length/2, 0])\n            scale([calyx_petal_width, calyx_petal_length, calyx_petal_thickness])\n            sphere(d=1, $fn=16);\n        \n        // Vein indentation\n        translate([0, calyx_petal_length/2, -calyx_petal_thickness/2])\n            cube([0.5, calyx_petal_length*0.8, calyx_petal_thickness*1.2], center=true);\n    }\n}\n\n// Render the complete fruit\nbushfruit();",
    "renders": true
  },
  {
    "fruit": "cane",
    "openscad_code": "// Realistic cane model - medium complexity\n// Overall length ~80mm, suitable for 3D printing\n\n// Parameters\ncane_diameter = 8;          // Shaft diameter\nhandle_width = 25;          // Handle width\nhandle_thickness = 12;      // Handle thickness\nknob_size = 10;             // Handle knob size\nwall_thickness = 2;         // Wall thickness for hollow parts\n\n// Main cane module\nmodule cane() {\n    union() {\n        // Shaft - hollow cylinder\n        difference() {\n            cylinder(h=70, d=cane_diameter, $fn=32);\n            translate([0, 0, wall_thickness])\n                cylinder(h=70-wall_thickness*2, d=cane_diameter-wall_thickness*2, $fn=32);\n        }\n        \n        // Handle grip - ergonomic curve\n        translate([0, 0, 70])\n            rotate([90, 0, 0])\n                handle_grip();\n        \n        // Ferrule tip\n        translate([0, 0, -2])\n            ferrule();\n    }\n}\n\n// Handle grip module\nmodule handle_grip() {\n    difference() {\n        // Main curved handle\n        union() {\n            // Curved shaft transition\n            rotate_extrude(angle=90, $fn=32)\n                translate([handle_width/2, 0, 0])\n                    circle(d=cane_diameter, $fn=32);\n            \n            // Grip portion\n            translate([handle_width/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=handle_width, d=handle_thickness, $fn=32);\n            \n            // End knob\n            translate([handle_width, 0, 0])\n                sphere(d=knob_size, $fn=32);\n        }\n        \n        // Hollow out handle\n        rotate_extrude(angle=90, $fn=32)\n            translate([handle_width/2, 0, 0])\n                circle(d=cane_diameter-wall_thickness*2, $fn=32);\n        \n        translate([handle_width/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_width, d=handle_thickness-wall_thickness*2, $fn=32);\n        \n        translate([handle_width, 0, 0])\n            sphere(d=knob_size-wall_thickness, $fn=32);\n    }\n    \n    // Grip texture rings\n    for(i = [1:3:handle_width-wall_thickness]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=1, d=handle_thickness+1, $fn=32);\n                    cylinder(h=1.2, d=handle_thickness-1, $fn=32);\n                }\n    }\n}\n\n// Ferrule tip (rubber tip)\nmodule ferrule() {\n    color(\"darkgray\")\n    difference() {\n        union() {\n            cylinder(h=5, d=cane_diameter+2, $fn=32);\n            translate([0, 0, 5])\n                cylinder(h=2, d=cane_diameter+1, $fn=32);\n        }\n        \n        // Hollow for shaft insertion\n        translate([0, 0, 2])\n            cylinder(h=5, d=cane_diameter, $fn=32);\n    }\n}\n\n// Render the cane\ncane();",
    "renders": true
  },
  {
    "fruit": "appleberry",
    "openscad_code": "// Appleberry - a hybrid fruit combining apple and blueberry characteristics\n// Medium complexity realistic model with 3D-printable features\n\nmodule appleberry(scale=1) {\n    // Main body - combination of sphere and cylinder for apple-like shape\n    union() {\n        // Top hemisphere (apple shape)\n        translate([0, 0, 5*scale])\n            scale([1, 1, 0.8])\n                sphere(d=40*scale, $fn=64);\n        \n        // Bottom cylinder (tapered end)\n        cylinder(h=15*scale, d1=40*scale, d2=20*scale, $fn=64);\n    }\n    \n    // Calyx (top indentation)\n    difference() {\n        // Everything above already added\n        \n        // Create calyx cavity\n        translate([0, 0, 38*scale])\n            rotate([0, 0, 0])\n                cylinder(h=8*scale, d=12*scale, $fn=32);\n        \n        // Add calyx lobes\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n                translate([0, 6*scale, 38*scale])\n                    rotate([30, 0, 0])\n                        cylinder(h=4*scale, d1=2*scale, d2=1*scale, $fn=8);\n        }\n    }\n    \n    // Blueberry-like skin texture - small spheres\n    module skin_bumps() {\n        for(phi=[0:30:150]) {\n            for(theta=[0:45:315]) {\n                // Convert spherical coordinates\n                x = 20*scale * cos(theta) * sin(phi);\n                y = 20*scale * sin(theta) * sin(phi);\n                z = 20*scale * cos(phi);\n                \n                // Skip bumps near calyx\n                if(z < 35*scale) {\n                    translate([x, y, z])\n                        sphere(d=1.5*scale, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Add skin texture\n    skin_bumps();\n    \n    // Stem\n    translate([0, 0, 42*scale])\n        rotate([0, 180, 0])\n            cylinder(h=15*scale, d1=2*scale, d2=1*scale, $fn=8);\n    \n    // Leaf\n    translate([0, 0, 42*scale])\n        rotate([90, 0, 0])\n            difference() {\n                // Leaf shape\n                scale([1, 1.5, 0.3])\n                    sphere(d=10*scale, $fn=32);\n                \n                // Leaf stem\n                translate([0, -7*scale, 0])\n                    cube([2*scale, 7*scale, 5*scale], center=true);\n            }\n    \n    // Apple-like dimples for realism\n    module cheek_dimples() {\n        // Left dimple\n        translate([-15*scale, 10*scale, 15*scale])\n            rotate([0, 25, 0])\n                sphere(d=8*scale, $fn=16);\n        \n        // Right dimple  \n        translate([15*scale, 10*scale, 15*scale])\n            rotate([0, -25, 0])\n                sphere(d=8*scale, $fn=16);\n    }\n    \n    // Add dimples to body\n    difference() {\n        // Existing body\n        \n        cheek_dimples();\n    }\n}\n\n// Render the appleberry at reasonable size for printing\nappleberry(1.8);",
    "renders": true
  },
  {
    "fruit": "pearberry",
    "openscad_code": "// Pearberry – half pear, half strawberry\n// Overall size ≈ 60 mm tall, 55 mm wide, printable without supports\n\n$fn = 36;           // smooth curves\nwall = 2;           // 3D-printable wall thickness\n\n// Main body: pear-shaped union of two stretched spheres\nmodule pear_body(){\n    // top sphere (shoulders)\n    translate([0,0,25])\n        scale([1,1,0.8])\n        sphere(d = 40);\n\n    // bottom sphere (bulb)\n    translate([0,0,10])\n        scale([1.1,1.1,1.3])\n        sphere(d = 45);\n}\n\n// Calyx leaves on top\nmodule calyx(){\n    for(a = [0:60:359]){\n        rotate([0,0,a])\n        translate([0,17,35])\n            rotate([90,0,0])\n            linear_extrude(height = 8, scale = 0.3)\n                circle(d = 12);\n    }\n}\n\n// Strawberry seeds (achene bumps)\nmodule seeds(){\n    for(p = rands(0,360,20))\n    for(q = rands(0,180,20)){\n        rotate([0,q,p])\n        translate([0,0,22 - q*0.35])\n            sphere(d = 2.5);\n    }\n}\n\n// Small pear indent at the bottom\nmodule bottom_dimple(){\n    translate([0,0,-2])\n        sphere(d = 12);\n}\n\n// Assembly\nunion(){\n    // Solid pear shape\n    pear_body();\n\n    // Calyx leaves\n    color(\"darkgreen\")\n    calyx();\n\n    // Surface seeds\n    color(\"tan\")\n    seeds();\n}\n\n// Remove bottom dimple for realism\ndifference(){\n    children();\n    bottom_dimple();\n}",
    "renders": true
  },
  {
    "fruit": "peachberry",
    "openscad_code": "// Peachberry - a peach fused with a raspberry\n// Medium complexity realistic style\n\n$fn = 50; // Smooth curves for 3D printing\n\nmodule peach_body() {\n    // Main peach body - slightly compressed sphere\n    translate([0, 0, 0])\n    scale([1, 1.1, 0.85])\n    sphere(d = 45);\n    \n    // Peach seam/cleft\n    difference() {\n        translate([0, 0, 0])\n        scale([1, 1.1, 0.85])\n        sphere(d = 45);\n        \n        // Remove material for cleft\n        translate([0, -10, 20])\n        rotate([0, 30, 0])\n        cube([30, 20, 30], center = true);\n    }\n}\n\nmodule peach_fuzz() {\n    // Tiny spheres for fuzzy texture\n    for(i = [0:20]) {\n        rotate([0, 0, i * 18])\n        translate([22, 0, 0])\n        rotate([0, 90, 0])\n        for(j = [0:10]) {\n            rotate([0, j * 15, 0])\n            translate([0, 0, 0])\n            sphere(d = 0.8);\n        }\n    }\n}\n\nmodule raspberry_cluster() {\n    // Raspberry drupelets (individual berries)\n    module drupelet(x, y, z, size) {\n        translate([x, y, z])\n        sphere(d = size);\n    }\n    \n    // Top hemisphere of raspberry\n    for(angle = [0:30:359]) {\n        for(ring = [0:15:75]) {\n            r = 20 - ring * 0.8;\n            x = r * cos(angle);\n            y = r * sin(angle);\n            z = ring - 5;\n            drupelet(x, y, z, 3 + sin(angle) * 0.5);\n        }\n    }\n    \n    // Bottom hemisphere\n    for(angle = [0:30:359]) {\n        for(ring = [0:15:60]) {\n            r = 18 - ring * 0.7;\n            x = r * cos(angle);\n            y = r * sin(angle);\n            z = -ring - 5;\n            drupelet(x, y, z, 2.5 + cos(angle) * 0.3);\n        }\n    }\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, 25])\n    cylinder(h = 8, d1 = 4, d2 = 2);\n    \n    // Leaf\n    translate([0, 5, 30])\n    rotate([90, 0, 0])\n    scale([1, 0.5, 0.2])\n    sphere(d = 12);\n}\n\nmodule calyx() {\n    // Small green leaves at base\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 23, 0])\n        rotate([0, -20, 0])\n        scale([0.3, 1, 0.1])\n        cylinder(h = 8, d1 = 3, d2 = 1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base peach body\n    peach_body();\n    \n    // Raspberry top\n    translate([0, 0, -5])\n    raspberry_cluster();\n    \n    // Stem\n    stem();\n    \n    // Calyx leaves\n    calyx();\n}",
    "renders": true
  },
  {
    "fruit": "plumberry",
    "openscad_code": "// Realistic plumberry (plum) – medium complexity\n// ~70 mm tall, all angles ≤45°, 1.2 mm walls\n\n// Overall scale factor for easy resizing\nscale_factor = 1.0;\n\n// Main body: slightly flattened sphere\nmodule plum_body() {\n    difference() {\n        scale([1, 1, 0.85])\n            sphere(d = 55 * scale_factor, $fn = 64);\n        // Slight indent at blossom end\n        translate([0, 0, -28 * scale_factor])\n            cylinder(h = 8 * scale_factor, d1 = 12 * scale_factor, d2 = 8 * scale_factor, $fn = 32);\n    }\n}\n\n// Stem stub\nmodule stem() {\n    translate([0, 0, 26 * scale_factor])\n        rotate([0, 180, 0])\n            cylinder(h = 7 * scale_factor, d1 = 6 * scale_factor, d2 = 3 * scale_factor, $fn = 16);\n}\n\n// Leaf pair – thin but printable\nmodule leaf_pair() {\n    for (a = [0, 120]) {\n        rotate([0, 0, a])\n            translate([0, 27 * scale_factor, 23 * scale_factor])\n                rotate([50, 0, 20])\n                    scale([1, 0.5, 0.15])\n                    sphere(d = 20 * scale_factor, $fn = 20);\n    }\n}\n\n// Bloom groove texture around top\nmodule bloom_grooves() {\n    difference() {\n        translate([0, 0, 26 * scale_factor])\n            cylinder(h = 2 * scale_factor, d = 18 * scale_factor, $fn = 32);\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([6 * scale_factor, 0, 25 * scale_factor])\n                    cube([12 * scale_factor, 2 * scale_factor, 4 * scale_factor], center = true);\n        }\n    }\n}\n\n// Surface dimples for realism\nmodule dimples() {\n    for (i = [0:29]) {\n        angle = i * 137.5;\n        r = 21 * scale_factor + 4 * sin(i * 5);\n        h = 15 * scale_factor * sin(i * 5) + 25 * scale_factor;\n        rotate([0, 0, angle])\n            translate([r, 0, h])\n                rotate([90, 0, 0])\n                    scale([1, 1, 0.3])\n                    sphere(d = 5 * scale_factor, $fn = 8);\n    }\n}\n\n// Final assembly\nunion() {\n    plum_body();\n    stem();\n    leaf_pair();\n    bloom_grooves();\n    // Subtract dimples from body\n    difference() {\n        children();\n        dimples();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "cherryberry",
    "openscad_code": "// Cherryberry - Realistic style, medium complexity\n// Main berry dimensions\nberry_diameter = 25;\nberry_height = 28;\nstem_diameter = 4;\nstem_length = 35;\n\n// Calyx details\ncalyx_petal_count = 5;\ncalyx_petal_length = 12;\ncalyx_petal_width = 6;\ncalyx_thickness = 1.5;\n\n// Leaf details\nleaf_length = 18;\nleaf_width = 10;\nleaf_thickness = 1.2;\nleaf_vein_thickness = 0.5;\n\n// Texture details\ndent_count = 8;\ndent_depth = 1.5;\ndent_radius = 3;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\nmodule berry_body() {\n    difference() {\n        // Main berry shape - slightly elongated sphere\n        scale([1, 1, 1.1]) \n            sphere(d=berry_diameter, $fn=64);\n        \n        // Create dents for realistic texture\n        for(i=[0:dent_count-1]) {\n            rotate([0, 0, i * 360/dent_count])\n                translate([0, berry_diameter/2 - dent_radius, berry_height/2 - dent_radius])\n                    sphere(d=dent_radius*2, $fn=16);\n        }\n        \n        // Hollow interior\n        scale([1, 1, 1.1]) \n            sphere(d=berry_diameter - wall_thickness*2, $fn=64);\n    }\n}\n\nmodule calyx_petal(angle, length, width) {\n    hull() {\n        translate([0, 0, -calyx_thickness/2])\n            cylinder(h=calyx_thickness, d1=width/3, d2=width, $fn=8);\n        translate([length*0.7, 0, -calyx_thickness/2])\n            cylinder(h=calyx_thickness, d1=width/2, d2=width/4, $fn=8);\n    }\n}\n\nmodule calyx() {\n    difference() {\n        union() {\n            // Central disk\n            cylinder(h=calyx_thickness, d=stem_diameter + 6, $fn=32);\n            \n            // Petals\n            for(i=[0:calyx_petal_count-1]) {\n                rotate([0, 0, i * 360/calyx_petal_count])\n                    translate([stem_diameter/2 + 2, 0, 0])\n                        rotate([20, 0, 0])\n                            calyx_petal(0, calyx_petal_length, calyx_petal_width);\n            }\n        }\n        \n        // Hole for stem\n        cylinder(h=calyx_thickness + 1, d=stem_diameter + wall_thickness, $fn=32);\n    }\n}\n\nmodule stem() {\n    difference() {\n        // Main stem\n        hull() {\n            cylinder(h=stem_length, d=stem_diameter, $fn=16);\n            translate([0, 0, stem_length])\n                cylinder(h=stem_diameter/2, d=stem_diameter*0.8, $fn=16);\n        }\n        \n        // Hollow stem\n        cylinder(h=stem_length + stem_diameter, d=stem_diameter - wall_thickness*2, $fn=16);\n    }\n}\n\nmodule leaf() {\n    difference() {\n        union() {\n            // Main leaf shape\n            scale([leaf_length/leaf_width, 1, 1])\n                sphere(d=leaf_width, $fn=32);\n            \n            // Stem connection\n            translate([-leaf_length/2 - 1, 0, 0])\n                cylinder(h=leaf_thickness, d=3, $fn=8);\n        }\n        \n        // Hollow interior\n        scale([leaf_length/leaf_width, 1, 1])\n            sphere(d=leaf_width - wall_thickness*2, $fn=32);\n        \n        // Vein indentations\n        translate([0, 0, -leaf_thickness/2 - 0.1])\n            cube([leaf_length, leaf_width/6, leaf_thickness + 0.2], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, berry_height/2])\n    berry_body();\n\ntranslate([0, 0, berry_height/2 + calyx_thickness/2])\n    calyx();\n\ntranslate([0, 0, berry_height/2 + calyx_thickness + stem_length/2])\n    stem();\n\n// Add a small leaf\ntranslate([stem_diameter/2, 0, berry_height/2 + calyx_thickness + stem_length*0.7])\n    rotate([90, 0, 15])\n        translate([leaf_length/2, 0, 0])\n            rotate([0, 0, 20])\n                leaf();",
    "renders": true
  },
  {
    "fruit": "apricotberry",
    "openscad_code": "// Apricotberry - hybrid of apricot and berry with realistic medium complexity\n// Dimensions approximately 60mm diameter x 75mm height\n\n// Main body parameters\nbody_radius = 30;\nbody_height = 70;\nstem_diameter = 4;\nstem_height = 15;\n\n// Texture parameters\ntexture_segments = 12;\ntexture_depth = 1.5;\ntexture_radius = 28;\n\n// Leaf parameters\nleaf_length = 20;\nleaf_width = 12;\nleaf_thickness = 1.2;\n\n// Seed cavity\nseed_radius = 8;\nseed_height = 12;\n\n$fn = 36;\n\n// Main body shape - slightly flattened sphere with top point\nmodule apricot_body() {\n    // Create main ellipsoid shape\n    scale([1, 1, 1.2]) \n        sphere(body_radius);\n    \n    // Add slight bulge at bottom for realistic berry shape\n    translate([0, 0, -body_height/2 + 10])\n        scale([1.1, 1.1, 0.6])\n            sphere(body_radius * 0.8);\n}\n\n// Create vertical texture grooves for berry-like surface\nmodule body_texture() {\n    for(i = [0:texture_segments-1]) {\n        rotate([0, 0, i * (360/texture_segments)])\n            translate([0, 0, -body_height/2])\n                difference() {\n                    // Create main body\n                    apricot_body();\n                    \n                    // Cut grooves for texture\n                    translate([texture_radius - texture_depth, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h=body_height*1.5, r=texture_depth*2, center=true);\n                }\n    }\n}\n\n// Create stem with slight curve\nmodule stem() {\n    translate([0, 0, body_height/2 + stem_height/2])\n        rotate([5, 0, 0])\n            cylinder(h=stem_height, d=stem_diameter);\n    \n    // Add small bulge at base of stem\n    translate([0, 0, body_height/2])\n        sphere(stem_diameter * 1.5);\n}\n\n// Create small leaves at stem base\nmodule leaves() {\n    // First leaf\n    translate([0, -stem_diameter*2, body_height/2 + stem_height/2])\n        rotate([0, 15, 45])\n            scale([leaf_length/10, leaf_width/10, leaf_thickness])\n                sphere(1);\n    \n    // Second leaf\n    translate([stem_diameter*2, 0, body_height/2 + stem_height/2])\n        rotate([0, 15, -45])\n            scale([leaf_length/10, leaf_width/10, leaf_thickness])\n                sphere(1);\n}\n\n// Create seed cavity inside\nmodule seed_cavity() {\n    translate([0, 0, -body_height/4])\n        rotate_extrude()\n            translate([0, 0])\n                circle(r=seed_radius);\n    \n    // Flatten top of cavity\n    translate([0, 0, -body_height/4])\n        cylinder(h=seed_height, r=seed_radius*0.8);\n}\n\n// Small surface bumps for realistic texture\nmodule surface_bumps() {\n    for(i = [0:20]) {\n        angle1 = rands(0, 360, 1)[0];\n        angle2 = rands(-60, 60, 1)[0];\n        radius = rands(texture_radius*0.7, texture_radius*0.9, 1)[0];\n        \n        translate([\n            radius * cos(angle1) * cos(angle2),\n            radius * sin(angle1) * cos(angle2),\n            radius * sin(angle2)\n        ])\n            sphere(1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Create textured body\n    difference() {\n        union() {\n            body_texture();\n            surface_bumps();\n        }\n        seed_cavity();\n    }\n    \n    // Add stem and leaves\n    stem();\n    leaves();\n}",
    "renders": true
  },
  {
    "fruit": "nectarineberry",
    "openscad_code": "// Nectarineberry - a hybrid of nectarine and raspberry\n// Medium complexity realistic style\n// Approx 60mm tall, 3D printable\n\n// Main parameters\nberry_height = 60;\nberry_width = 35;\nwall_thickness = 2;\n$fn = 32;\n\nmodule nectarine_body() {\n    // Main berry body - slightly flattened sphere\n    translate([0, 0, berry_height/2])\n    scale([1.1, 1, 0.9])\n    sphere(d=berry_width);\n}\n\nmodule stem_attachment() {\n    // Top stem attachment point\n    translate([0, 0, berry_height-5])\n    cylinder(h=8, d1=8, d2=5);\n}\n\nmodule surface_texture() {\n    // Create raspberry-like bumps\n    difference() {\n        // Base body\n        nectarine_body();\n        \n        // Remove material for texture\n        for (i = [0:35]) {\n            angle = i * 10;\n            r = berry_width/2 + 1;\n            for (j = [0:4]) {\n                height = j * (berry_height/5) + 8;\n                translate([r*cos(angle), r*sin(angle), height])\n                sphere(d=6);\n            }\n        }\n        \n        // Add back smaller spheres for bumps\n        for (i = [0:35]) {\n            angle = i * 10;\n            r = berry_width/2 - 3;\n            for (j = [0:4]) {\n                height = j * (berry_height/5) + 8;\n                translate([r*cos(angle), r*sin(angle), height])\n                sphere(d=4);\n            }\n        }\n    }\n}\n\nmodule seam_line() {\n    // Vertical seam line characteristic of nectarine\n    rotate([0, 90, 0])\n    translate([0, -berry_width/2-1, berry_height/2])\n    scale([1, berry_height, 0.5])\n    sphere(d=berry_width/2);\n}\n\nmodule internal_structure() {\n    // Hollow out for printing\n    difference() {\n        // Keep outer shell\n        surface_texture();\n        \n        // Hollow center\n        translate([0, 0, berry_height/2])\n        scale([0.8, 0.8, 0.8])\n        sphere(d=berry_width - wall_thickness*2);\n    }\n}\n\nmodule bottom_flatten() {\n    // Flatten bottom for stable printing\n    difference() {\n        internal_structure();\n        translate([0, 0, -5])\n        cube([berry_width*1.2, berry_width*1.2, 10], center=true);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main berry body with texture\n    bottom_flatten();\n    \n    // Stem attachment\n    stem_attachment();\n    \n    // Add seam line\n    color(\"orange\")\n    seam_line();\n}\n\n// Optional: Add small leaves\nmodule leaves() {\n    for (i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([15, 0, berry_height-2])\n        rotate([30, 0, 0])\n        scale([1, 0.3, 0.1])\n        sphere(d=8);\n    }\n}\n\n// Uncomment to add leaves\n// leaves();",
    "renders": true
  },
  {
    "fruit": "grapeberry",
    "openscad_code": "// Realistic Grapeberry - Medium Complexity\n// Designed for 3D printing with no overhangs\n\nGRAPE_SIZE = 12;         // Main berry radius\nBLOOM_SIZE = 1.5;        // Surface bloom size\nSTEM_DIAM = 3;           // Stem diameter\nSEGMENTS = 36;           // Quality setting\n\n// Main grape body with subtle ellipsoid shape\nmodule grape_body() {\n    scale([1, 1.1, 0.9])\n    sphere(r=GRAPE_SIZE, $fn=SEGMENTS);\n}\n\n// Surface texture - small bump/bloom details\nmodule surface_bloom() {\n    for(i = [0:35]) {\n        angle1 = rands(0, 360, 1)[0];\n        angle2 = rands(0, 180, 1)[0];\n        radius = rands(GRAPE_SIZE-0.5, GRAPE_SIZE+0.5, 1)[0];\n        \n        translate([\n            radius * cos(angle1) * sin(angle2),\n            radius * sin(angle1) * sin(angle2),\n            radius * cos(angle2)\n        ])\n        scale([1, 1, 0.7])\n        sphere(r=BLOOM_SIZE, $fn=8);\n    }\n}\n\n// Stem attachment point at top\nmodule stem_base() {\n    translate([0, 0, GRAPE_SIZE-1])\n    cylinder(h=4, r1=STEM_DIAM/2, r2=STEM_DIAM, $fn=SEGMENTS);\n}\n\n// Small dimple at bottom (blossom end)\nmodule bottom_dimple() {\n    translate([0, 0, -GRAPE_SIZE+1])\n    difference() {\n        sphere(r=2.5, $fn=SEGMENTS);\n        translate([0, 0, -2])\n        cube([6, 6, 4], center=true);\n    }\n}\n\n// Subtle ridge lines for realism\nmodule ridge_lines() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([GRAPE_SIZE-0.5, 0, 0])\n        rotate([0, 90, 0])\n        scale([0.2, 2.5, 0.2])\n        cylinder(h=GRAPE_SIZE*2, r=0.5, $fn=8);\n    }\n}\n\n// Complete grape assembly\nmodule grape() {\n    difference() {\n        union() {\n            // Main body\n            grape_body();\n            \n            // Surface details\n            surface_bloom();\n            \n            // Stem base\n            stem_base();\n            \n            // Subtle ridges\n            ridge_lines();\n        }\n        \n        // Bottom dimple\n        bottom_dimple();\n    }\n}\n\n// Render the grape\ngrape();",
    "renders": true
  },
  {
    "fruit": "mango",
    "openscad_code": "// Realistic Mango - Medium Complexity\n// Designed for 3D printing, no overhangs\n\n$fn = 50;\n\n// Main mango body - composed of two ellipsoids\nmodule mango_body() {\n    // Bottom half - wider and flatter\n    translate([0, 0, -15])\n    scale([1.2, 1, 0.8])\n    sphere(r=25);\n    \n    // Top half - more rounded\n    translate([0, 0, 5])\n    scale([1, 0.9, 1.1])\n    sphere(r=25);\n}\n\n// Mango stem\nmodule stem() {\n    // Main stem\n    translate([0, 0, 30])\n    rotate([90, 0, 0])\n    cylinder(h=8, r1=3, r2=2);\n    \n    // Stem base - transition to fruit\n    translate([0, 0, 25])\n    scale([1.2, 1.2, 0.5])\n    sphere(r=5);\n}\n\n// Mango cheek - the flat side where it rested\nmodule cheek() {\n    difference() {\n        mango_body();\n        // Flatten one side\n        translate([-30, 0, 0])\n        cube([60, 60, 60], center=true);\n    }\n}\n\n// Surface details - small indentations for texture\nmodule surface_details() {\n    for(i = [0:30]) {\n        rotate([0, 0, i*12])\n        translate([20*cos(i*2), 20*sin(i*2), 10*sin(i*3)])\n        scale([0.3, 0.3, 0.2])\n        sphere(r=2);\n    }\n}\n\n// Mango seed cavity (hollow for printing)\nmodule hollow_center() {\n    // Create hollow space for seed\n    translate([0, 0, -5])\n    scale([0.6, 0.5, 0.7])\n    sphere(r=20);\n}\n\n// Final assembly\ndifference() {\n    union() {\n        cheek();\n        stem();\n        \n        // Add subtle surface texture\n        surface_details();\n    }\n    \n    // Hollow out for printing\n    hollow_center();\n    \n    // Add drainage hole at bottom\n    translate([0, 0, -25])\n    cylinder(h=5, r=3);\n}\n\n// Additional support for better printing\ntranslate([0, 0, -25])\ndifference() {\n    cylinder(h=2, r=8);\n    cylinder(h=2, r=6);\n}",
    "renders": true
  },
  {
    "fruit": "pineapple",
    "openscad_code": "// Pineapple - Realistic Style, Medium Complexity\n// Dimensions: ~70mm height, ~35mm diameter\n\n// Parameters\n$fn = 32;\npineapple_height = 70;\nbody_height = 50;\nbody_diameter = 35;\nleaf_height = 25;\nleaf_count = 6;\nscale_count = 12;\nknob_count = 30;\n\n// Main pineapple body\nmodule pineapple_body() {\n    // Tapered main body\n    union() {\n        // Bottom rounded base\n        translate([0, 0, 2])\n            sphere(d = body_diameter * 1.1);\n        \n        // Main cylindrical body with slight taper\n        cylinder(h = body_height, d1 = body_diameter * 0.9, d2 = body_diameter);\n    }\n}\n\n// Individual diamond-shaped scale\nmodule scale() {\n    // Diamond shape for pineapple texture\n    hull() {\n        translate([0, 0, -0.5])\n            cylinder(h = 1, d = 6);\n        translate([0, 0, 0.5])\n            cylinder(h = 1, d = 4);\n    }\n}\n\n// Surface scales pattern\nmodule scales() {\n    for (i = [0:scale_count-1]) {\n        rotate([0, 0, i * 360/scale_count]) {\n            for (j = [0:3]) {\n                rotate([0, 0, j * 30])\n                translate([body_diameter/2 * 0.85, 0, j * 12 + 8])\n                    rotate([90, 0, 0])\n                        scale();\n            }\n        }\n    }\n}\n\n// Pineapple knobs (small bumps)\nmodule knob() {\n    sphere(d = 2);\n}\n\n// Knob pattern across surface\nmodule knobs() {\n    for (i = [0:knob_count-1]) {\n        angle = i * 360/knob_count;\n        // Fibonacci-like spiral pattern\n        height = (i * body_height / knob_count) + 5;\n        radius = body_diameter/2 * 0.8 * (1 - height/body_height * 0.3);\n        \n        rotate([0, 0, angle * 1.618])\n            translate([radius, 0, height])\n                knob();\n    }\n}\n\n// Individual leaf\nmodule leaf() {\n    // Curved leaf shape\n    translate([0, 0, -leaf_height/2])\n        linear_extrude(height = leaf_height, twist = 30)\n            scale([0.3, 1])\n                circle(d = 8);\n}\n\n// Leaf crown\nmodule leaf_crown() {\n    union() {\n        // Central core\n        cylinder(h = 5, d = 8);\n        \n        // Radiating leaves\n        for (i = [0:leaf_count-1]) {\n            rotate([0, 0, i * 360/leaf_count])\n                translate([0, 0, 5])\n                    rotate([20 + i * 5, 0, 0])\n                        leaf();\n        }\n        \n        // Additional inner leaves\n        for (i = [0:leaf_count-1]) {\n            rotate([0, 0, i * 360/leaf_count + 30])\n                translate([0, 0, 8])\n                    rotate([15 + i * 3, 0, 0])\n                        scale([0.7, 0.7, 0.8])\n                            leaf();\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with texture\n    pineapple_body();\n    \n    // Add surface details\n    translate([0, 0, 5])\n        scales();\n    \n    translate([0, 0, 3])\n        knobs();\n    \n    // Leaf crown on top\n    translate([0, 0, body_height - 2])\n        leaf_crown();\n}",
    "renders": true
  },
  {
    "fruit": "coconut",
    "openscad_code": "// Realistic Coconut - Medium Complexity\n// 3D printable coconut with shell texture and fiber details\n\n// Parameters for printability\n$fn = 36;  // Resolution for curved surfaces\nwall_thickness = 1.5;  // 3D printable wall thickness\ncoconut_diameter = 60;  // Main coconut size\nshell_thickness = 2.5;  // Coconut shell thickness\n\n// Main coconut body\nmodule coconut_body() {\n    difference() {\n        // Outer shell\n        sphere(d = coconut_diameter);\n        \n        // Hollow interior\n        sphere(d = coconut_diameter - shell_thickness * 2);\n    }\n}\n\n// Create the three \"eyes\" at the top\nmodule coconut_eyes() {\n    // Three circular depressions at one pole\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])  // 120 degree spacing\n        translate([0, coconut_diameter/2 - 3, coconut_diameter/2 - 5])\n        rotate([90, 0, 0])\n        cylinder(h = 3, d1 = 8, d2 = 5, center = true);\n    }\n}\n\n// Shell texture lines (fibrous pattern)\nmodule shell_texture() {\n    // Horizontal rings around coconut\n    for (angle = [0:15:165]) {\n        rotate([angle, 0, 0])\n        translate([0, 0, 0])\n        difference() {\n            sphere(d = coconut_diameter + 0.2);\n            sphere(d = coconut_diameter - 0.2);\n        }\n    }\n    \n    // Vertical fiber lines\n    for (theta = [0:10:350]) {\n        rotate([0, 0, theta])\n        translate([0, 0, -coconut_diameter/2])\n        linear_extrude(height = coconut_diameter)\n        offset(delta = -0.2)\n        offset(delta = 0.2)\n        circle(d = coconut_diameter - 1);\n    }\n}\n\n// Natural seam line between coconut halves\nmodule natural_seam() {\n    // Equatorial groove\n    rotate([90, 0, 0])\n    translate([0, 0, -1])\n    difference() {\n        cylinder(h = 2, d = coconut_diameter + 0.5, center = true);\n        cylinder(h = 2.2, d = coconut_diameter - 2, center = true);\n    }\n}\n\n// Fiber hairs at seam\nmodule seam_fibers() {\n    for (i = [0:20]) {\n        rotate([0, i * 18, 0])\n        translate([coconut_diameter/2 - 2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 4, d1 = 0.8, d2 = 0.3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base coconut structure\n    coconut_body();\n    \n    // Add shell texture (only on outer surface)\n    intersection() {\n        shell_texture();\n        sphere(d = coconut_diameter + 0.5);\n    }\n    \n    // Natural features\n    difference() {\n        sphere(d = coconut_diameter);\n        coconut_eyes();\n    }\n    \n    natural_seam();\n    \n    // Add subtle fibers at seam\n    intersection() {\n        seam_fibers();\n        sphere(d = coconut_diameter + 1);\n    }\n}\n\n// Position for printing (flat side down)\nrotate([0, 180, 0])\ntranslate([0, 0, coconut_diameter/2])",
    "renders": true
  },
  {
    "fruit": "banana",
    "openscad_code": "// Realistic banana model for 3D printing\n// Medium complexity - uses basic primitives and transformations\n\nmodule banana_segment(h, r1, r2, rot_z) {\n    translate([0, 0, h/2])\n    rotate([0, rot_z, 0])\n    cylinder(h = h, r1 = r1, r2 = r2, $fn = 16);\n}\n\nmodule banana_body() {\n    // Main body segments - curved along Z axis\n    union() {\n        // Bottom tip\n        banana_segment(h = 10, r1 = 0.1, r2 = 4, rot_z = -15);\n        \n        // Lower segments\n        for (i = [0:14]) {\n            translate([0, 0, i*5])\n            rotate([0, i*4, 0])\n            cylinder(h = 5, r1 = 4 + i*0.3, r2 = 4.2 + i*0.3, $fn = 16);\n        }\n        \n        // Middle thick part\n        for (i = [15:20]) {\n            translate([0, 0, i*5])\n            rotate([0, 60 + (i-15)*3, 0])\n            cylinder(h = 5, r1 = 8.7 - (i-15)*0.2, r2 = 8.5 - (i-15)*0.2, $fn = 16);\n        }\n        \n        // Upper taper\n        for (i = [21:28]) {\n            translate([0, 0, i*5])\n            rotate([0, 75 + (i-21)*2, 0])\n            cylinder(h = 5, r1 = 7.3 - (i-21)*0.4, r2 = 7.1 - (i-21)*0.4, $fn = 16);\n        }\n        \n        // Top stem\n        translate([0, 0, 145])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r1 = 2, r2 = 1, $fn = 8);\n    }\n}\n\nmodule banana_surface() {\n    // Add surface details with subtle ridges along length\n    difference() {\n        banana_body();\n        \n        // Remove slight grooves between segments\n        for (i = [0:27]) {\n            translate([0, 0, i*5 + 2.5])\n            rotate([0, i*4, 0])\n            cylinder(h = 0.5, r1 = 3.5 + i*0.2, r2 = 3.5 + i*0.2, $fn = 16);\n        }\n    }\n}\n\nmodule banana_ends() {\n    // Smooth the ends\n    union() {\n        // Bottom tip smoothing\n        translate([0, 0, 0])\n        sphere(r = 4.2, $fn = 16);\n        \n        // Top smoothing\n        translate([0, 0, 150])\n        rotate([0, 90, 0])\n        sphere(r = 2.2, $fn = 8);\n    }\n}\n\nmodule realistic_banana() {\n    // Combine all parts with proper wall thickness\n    difference() {\n        union() {\n            banana_surface();\n            banana_ends();\n        }\n        \n        // Hollow center for 3D printing\n        for (i = [0:27]) {\n            translate([0, 0, i*5 + 2.5])\n            rotate([0, i*4, 0])\n            cylinder(h = 5, r1 = 2.5 + i*0.15, r2 = 2.7 + i*0.15, $fn = 12);\n        }\n        \n        // Remove inner sphere from bottom\n        translate([0, 0, 0])\n        sphere(r = 3.5, $fn = 16);\n    }\n}\n\n// Position banana for printing\nrotate([90, 0, 0])\ntranslate([0, 0, 5])\nrealistic_banana();",
    "renders": true
  },
  {
    "fruit": "guava",
    "openscad_code": "// Realistic 3D printable Guava\n// Medium complexity model with ~90 lines\n\n$fn=72; // Smooth curves for 3D printing\nguava_size = 55; // 55 mm tall fruit\nstem_len = 12;\nwall = 1.2; // 3D-print wall thickness\n\n// Main body – slightly asymmetric sphere\nmodule guava_body() {\n    difference() {\n        scale([1.0, 0.9, 1.1])\n            sphere(d=guava_size);\n        \n        // Small indentations for texture\n        for(a=[0:60:359])\n            rotate([0, 0, a])\n            translate([guava_size/2.5, 0, -guava_size/3])\n                sphere(d=guava_size/6);\n    }\n}\n\n// Blossom end with four lobes\nmodule blossom_end() {\n    translate([0, 0, -guava_size/2.1])\n    difference() {\n        sphere(d=guava_size/3);\n        // Cut four grooves\n        for(a=[45:90:315])\n            rotate([0, 0, a])\n            translate([guava_size/7, 0, 0])\n                cube([guava_size/3, guava_size/10, guava_size/2], center=true);\n    }\n}\n\n// Stem with slight curve\nmodule stem() {\n    translate([0, 0, guava_size/2 + 1])\n    rotate([0, 0, 5])\n    linear_extrude(height=stem_len, twist=10, scale=0.5)\n        circle(d=guava_size/8);\n}\n\n// Calyx leaves\nmodule calyx() {\n    translate([0, 0, guava_size/2 + 0.5])\n    for(a=[0:72:359])\n        rotate([0, 0, a])\n        translate([guava_size/6, 0, 0])\n        rotate([30, 0, 0])\n        scale([1, 0.4, 0.1])\n        sphere(d=guava_size/5);\n}\n\n// Main assembly\nunion() {\n    difference() {\n        union() {\n            guava_body();\n            blossom_end();\n        }\n        // Hollow inside for material saving\n        scale([0.85, 0.85, 0.85])\n        sphere(d=guava_size-wall);\n    }\n    \n    stem();\n    calyx();\n}",
    "renders": true
  },
  {
    "fruit": "passionfruit",
    "openscad_code": "$fn = 48; // Increase smoothness for 3D printing\n\n// Overall scale factor for 3D printing\nscale_factor = 1.0;\n\n// Main passionfruit parameters\nfruit_diameter = 70 * scale_factor;\nwall_thickness = 2 * scale_factor;\nsegment_count = 10;\nseed_count = 40;\n\nmodule passionfruit() {\n    difference() {\n        // Outer shell\n        sphere(d = fruit_diameter);\n\n        // Hollow out the interior\n        sphere(d = fruit_diameter - 2 * wall_thickness);\n\n        // Create segments\n        for (i = [0 : segment_count - 1]) {\n            rotate([0, 0, i * 360 / segment_count])\n                translate([0, 0, -fruit_diameter / 2])\n                    cube([wall_thickness, fruit_diameter, fruit_diameter], center = true);\n        }\n\n        // Central cavity for seeds\n        sphere(d = fruit_diameter * 0.6);\n    }\n\n    // Outer skin texture - small bumps\n    difference() {\n        sphere(d = fruit_diameter);\n        sphere(d = fruit_diameter - 0.5);\n    }\n\n    // Add small bumps on the surface\n    for (i = [0 : seed_count - 1]) {\n        // Random spherical coordinates\n        theta = rands(0, 360, 1)[0];\n        phi = rands(20, 160, 1)[0]; // Avoid poles for 3D printing\n\n        translate([\n            fruit_diameter / 2 * sin(phi) * cos(theta),\n            fruit_diameter / 2 * sin(phi) * sin(theta),\n            fruit_diameter / 2 * cos(phi)\n        ]) {\n            // Small bump\n            scale([1.2, 1.2, 0.6])\n                sphere(d = 2 * scale_factor);\n        }\n    }\n\n    // Top stem attachment\n    translate([0, 0, fruit_diameter / 2]) {\n        cylinder(h = 5 * scale_factor, d1 = 8 * scale_factor, d2 = 4 * scale_factor);\n    }\n}\n\n// Internal seeds (only visible if cut open)\nmodule seeds() {\n    for (i = [0 : seed_count - 1]) {\n        // Random positions within the seed cavity\n        r = rands(0, fruit_diameter * 0.25, 1)[0];\n        theta = rands(0, 360, 1)[0];\n        phi = rands(0, 180, 1)[0];\n\n        translate([\n            r * sin(phi) * cos(theta),\n            r * sin(phi) * sin(theta),\n            r * cos(phi)\n        ]) {\n            // Teardrop shaped seed\n            rotate([90, 0, 0])\n                scale([0.6, 0.6, 1.2])\n                    cylinder(h = 4 * scale_factor, d1 = 3 * scale_factor, d2 = 2 * scale_factor);\n        }\n    }\n}\n\n// Create the passionfruit\nunion() {\n    passionfruit();\n    // Uncomment to see internal seeds\n    // %seeds();\n}",
    "renders": true
  },
  {
    "fruit": "dragonfruit",
    "openscad_code": "// Dragonfruit - Realistic style, medium complexity\n// Total height ~70mm, max diameter ~55mm\n\nmodule dragonfruit() {\n    // Main body - slightly elongated ellipsoid\n    scale([1, 1, 1.3]) sphere(d=52, $fn=60);\n    \n    // Leafy scales around top\n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) \n            translate([0, 22, 30]) \n                rotate([0, 110, 0]) \n                    scale([1, 0.6, 0.2]) \n                        sphere(d=12, $fn=20);\n    }\n    \n    // Main scale pattern across body\n    difference() {\n        union() {\n            // Main body\n            scale([1, 1, 1.3]) sphere(d=52, $fn=60);\n            \n            // Individual scales\n            for(lat=[-60:20:60]) {\n                for(lon=[0:30:330]) {\n                    rotate([0, 0, lon]) \n                        rotate([0, lat, 0]) \n                            translate([0, 25.5, 0]) \n                                scale([1, 1, 0.5]) \n                                    sphere(d=5, $fn=10);\n                }\n            }\n        }\n        \n        // Create scale indentations\n        for(lat=[-60:20:60]) {\n            for(lon=[0:30:330]) {\n                rotate([0, 0, lon]) \n                    rotate([0, lat, 0]) \n                        translate([0, 26, 0]) \n                            scale([0.8, 0.8, 0.3]) \n                                sphere(d=4.5, $fn=8);\n            }\n        }\n    }\n    \n    // Bottom flat spot for printing\n    translate([0, 0, -35]) \n        cylinder(h=5, d=20, $fn=30);\n    \n    // Stem attachment point\n    translate([0, 0, 35]) \n        cylinder(h=3, d=8, $fn=16);\n}\n\n// Render the fruit\ndragonfruit();",
    "renders": true
  },
  {
    "fruit": "lychee",
    "openscad_code": "$fs = 0.8;\n$fa = 8;\n\nmodule lychee() {\n    // Main fruit body - slightly oval sphere\n    difference() {\n        scale([1, 1, 0.9])\n        sphere(d=40);\n\n        // Cavity for the seed\n        translate([0, 0, -5])\n        scale([0.6, 0.6, 0.7])\n        sphere(d=30);\n    }\n\n    // Bumpy texture - hexagonal pattern of bumps\n    for (phi = [0:30:150]) {\n        for (theta = [0:30:330]) {\n            if (phi > 30 || theta % 60 == 0) {\n                rotate([0, phi, theta])\n                translate([0, 0, 19.5])\n                scale([1, 1, 0.6])\n                sphere(d=4.5);\n            }\n        }\n    }\n\n    // Stem attachment point\n    translate([0, 0, 18])\n    cylinder(h=3, d1=6, d2=4);\n\n    // Small stem piece\n    translate([0, 0, 21])\n    cylinder(h=8, d=3);\n\n    // Bottom tip\n    translate([0, 0, -18.5])\n    sphere(d=2.5);\n}\n\n// Position the lychee\ntranslate([0, 0, 0])\nlychee();",
    "renders": true
  },
  {
    "fruit": "rambutan",
    "openscad_code": "// Realistic Rambutan - Medium Complexity\n// Based on real anatomy: hairy outer skin, fleshy fruit, central seed\n\n// Overall scale factor\nscale_factor = 60;  // 60mm diameter\n\n// Main fruit body\nmodule rambutan_body() {\n    // Core fruit sphere (flesh)\n    difference() {\n        sphere(d = scale_factor * 0.9, $fn = 32);\n        \n        // Hollow out for seed cavity\n        translate([0, 0, -scale_factor * 0.1])\n            sphere(d = scale_factor * 0.5, $fn = 32);\n            \n        // Remove bottom for flat base\n        translate([0, 0, -scale_factor * 0.6])\n            cube([scale_factor, scale_factor, scale_factor * 0.6], center = true);\n    }\n}\n\n// Individual spine/hair structure\nmodule spine(len, base_rad, tip_rad) {\n    // Tapered cylinder with rounded tip\n    union() {\n        cylinder(h = len * 0.9, r1 = base_rad, r2 = tip_rad, $fn = 8);\n        translate([0, 0, len * 0.9])\n            sphere(r = tip_rad, $fn = 8);\n    }\n}\n\n// Generate spines across fruit surface\nmodule spiny_skin() {\n    // Parameters for spine distribution\n    spine_base = scale_factor * 0.03;\n    spine_tip = scale_factor * 0.01;\n    spine_len = scale_factor * 0.2;\n    \n    // Create spiral pattern of spines\n    for (i = [0:5:359]) {\n        for (j = [20:20:160]) {\n            rotate([0, j, i])\n                translate([0, 0, scale_factor * 0.45])\n                    rotate([90, 0, 0])\n                        spine(spine_len, spine_base, spine_tip);\n        }\n    }\n}\n\n// Seed inside fruit\nmodule rambutan_seed() {\n    color(\"saddlebrown\")\n    translate([0, 0, -scale_factor * 0.15])\n        scale([0.6, 0.8, 0.7])\n            sphere(d = scale_factor * 0.4, $fn = 20);\n}\n\n// Stem attachment point\nmodule stem() {\n    color(\"darkgreen\")\n    translate([0, 0, scale_factor * 0.5])\n        rotate([0, 180, 0])\n            cylinder(h = scale_factor * 0.1, r = scale_factor * 0.05, $fn = 12);\n}\n\n// Assemble complete rambutan\nunion() {\n    // Main fruit with spines\n    union() {\n        color(\"crimson\") rambutan_body();\n        color(\"firebrick\") spiny_skin();\n    }\n    \n    // Internal seed (visible through translucent flesh)\n    // Uncomment for cross-section view\n    // rambutan_seed();\n    \n    // Stem\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "durian",
    "openscad_code": "// Durian - Medium Complexity Realistic\n// Overall size ~70mm diameter\n// Designed for 3D printing with 1.2mm walls\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\ndurian_radius = 35;  // mm\nspike_length = 12;\nspike_base = 4;\nshell_thickness = 1.5;\nsegments = 12;  // Number of spike rings\n\n// Main durian body\nmodule durian_body() {\n    difference() {\n        // Outer shell\n        sphere(r = durian_radius);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            sphere(r = durian_radius - shell_thickness);\n        \n        // Bottom flat base for printing\n        translate([0, 0, -durian_radius])\n            cube([durian_radius*2, durian_radius*2, durian_radius], center=true);\n    }\n}\n\n// Individual spike\nmodule spike(height, base_size) {\n    union() {\n        // Base cone\n        cylinder(h1 = base_size/2, h2 = 0, h = height * 0.3, center = true);\n        \n        // Main spike body\n        translate([0, 0, height * 0.3])\n            cylinder(h1 = base_size/2, h2 = base_size/4, h = height * 0.7);\n        \n        // Sharp tip\n        translate([0, 0, height])\n            cylinder(h1 = base_size/4, h2 = 0, h = height * 0.15);\n    }\n}\n\n// Spike ring around sphere\nmodule spike_ring(level) {\n    // Calculate position on sphere surface\n    angle = level * 180 / segments;\n    y = cos(angle) * durian_radius;\n    z = sin(angle) * durian_radius;\n    \n    // Number of spikes in this ring\n    spikes_in_ring = max(8, round(20 * sin(angle)));\n    \n    for(i = [0:spikes_in_ring-1]) {\n        rotate([0, angle, 0])\n        rotate([0, 0, i * 360/spikes_in_ring])\n        translate([0, y, z])\n        rotate([90-angle, 0, 0])\n        spike(spike_length - level * 0.3, spike_base - level * 0.1);\n    }\n}\n\n// Create durian seam lines\nmodule seam_lines() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, -durian_radius/2])\n        linear_extrude(height = durian_radius)\n        offset(delta = -0.5)\n        offset(delta = 0.5)\n        circle(r = durian_radius * 0.9, $fn=5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    durian_body();\n    \n    // Seam lines for realism\n    seam_lines();\n    \n    // Spike layers\n    for(level = [1:segments-1]) {\n        spike_ring(level);\n    }\n    \n    // Top spikes\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, durian_radius])\n        rotate([0, 0, 0])\n        spike(spike_length * 1.2, spike_base * 1.1);\n    }\n}\n\n// Add support base for printing\ntranslate([0, 0, -durian_radius - 1])\n    cylinder(h = 2, r = durian_radius * 0.7, $fn=6);",
    "renders": true
  },
  {
    "fruit": "jackfruit",
    "openscad_code": "// Jackfruit - Realistic Medium Complexity\n// Total height ~70 mm, max diameter ~55 mm\n// No overhangs steeper than 45°, 1.2 mm wall thickness\n\n$fn = 36;\n\nmodule spiky_tuber(h, r, taper) {\n    // Single soft spike/tuber on the surface\n    difference() {\n        cylinder(h = h, r1 = r, r2 = taper * r, center = true);\n        translate([0, 0, -h/2 - 0.1]) cube([2*r, 2*r, 0.2], center = true);\n    }\n}\n\nmodule jackfruit_body() {\n    // Main ellipsoidal body\n    scale([1, 1, 0.7]) sphere(d = 50);\n}\n\nmodule surface_spikes() {\n    // Array of irregular soft spikes\n    for (i = [0 : 20 : 340])\n        for (j = [0 : 30 : 150]) {\n            a1 = i;\n            a2 = j;\n            x = 25 * cos(a1) * sin(a2);\n            y = 25 * sin(a1) * sin(a2);\n            z = 17.5 * cos(a2);\n            translate([x, y, z])\n                rotate([0, acos(cos(a2)), a1])\n                    spiky_tuber(\n                        h = 4 + 3 * sin(i * 7) + 2 * cos(j * 5),\n                        r = 2.2,\n                        taper = 0.4\n                    );\n        }\n}\n\nmodule stem_stub() {\n    // Short stub where jackfruit attached to tree\n    translate([0, 0, 18])\n        cylinder(h = 6, r1 = 4.5, r2 = 3.5, $fn = 8);\n}\n\nmodule jackfruit() {\n    union() {\n        jackfruit_body();\n        surface_spikes();\n        stem_stub();\n    }\n}\n\n// Render the entire fruit\njackfruit();",
    "renders": true
  },
  {
    "fruit": "mangosteen",
    "openscad_code": "// Realistic Mangosteen - Medium Complexity\n// 3D printable model with no overhangs\n// Approx 60mm diameter\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\nmangosteen_diameter = 60;\ncalyx_height = 8;\nstem_length = 15;\nstem_diameter = 4;\nsegment_count = 8;\n\n// Main fruit body - slightly flattened sphere\ndifference() {\n    // Main sphere\n    sphere(d = mangosteen_diameter);\n    \n    // Flatten top and bottom slightly\n    translate([0, 0, mangosteen_diameter/2 - 5])\n        cube([mangosteen_diameter*1.2, mangosteen_diameter*1.2, 10], center = true);\n    translate([0, 0, -mangosteen_diameter/2 + 5])\n        cube([mangosteen_diameter*1.2, mangosteen_diameter*1.2, 10], center = true);\n}\n\n// Calyx (flower remnant) - 4 lobes\nmodule calyx_lobe() {\n    difference() {\n        // Main lobe shape\n        scale([1, 1.2, 0.7])\n            sphere(d = 8);\n        \n        // Cut bottom flat\n        translate([0, 0, -4])\n            cube([12, 12, 8], center = true);\n    }\n}\n\n// Position calyx lobes around center\nfor (i = [0:3]) {\n    rotate([0, 0, i * 90 + 45])\n        translate([0, 6, mangosteen_diameter/2 - 4])\n            calyx_lobe();\n}\n\n// Stem\ntranslate([0, 0, mangosteen_diameter/2 + stem_length/2 - 2])\n    cylinder(h = stem_length, d = stem_diameter, center = true);\n\n// Segment lines - subtle ridges on surface\nmodule segment_line() {\n    // Create a thin ridge\n    rotate_extrude()\n        polygon(points = [\n            [0, 0],\n            [0.5, 0],\n            [0.5, 2],\n            [0, 2]\n        ]);\n}\n\n// Generate 8 segment lines\nfor (i = [0:segment_count-1]) {\n    rotate([0, 0, i * 360/segment_count])\n        translate([mangosteen_diameter/2 - 2, 0, 0])\n            segment_line();\n}\n\n// Bottom remnant of flower - small circular ridge\ntranslate([0, 0, -mangosteen_diameter/2 + 3])\n    cylinder(h = 1.5, d1 = 6, d2 = 8);\n\n// Small surface imperfections - random tiny bumps\nmodule surface_bump() {\n    sphere(d = 1.5);\n}\n\n// Add 12 small bumps randomly positioned\nfor (i = [0:11]) {\n    rotate([0, i * 30, i * 47])\n        translate([mangosteen_diameter/2 - 1, 0, sin(i * 30) * 5])\n            surface_bump();\n}",
    "renders": true
  },
  {
    "fruit": "longan",
    "openscad_code": "// Realistic Longan - Medium Complexity\n// Scaled for 3D printing (60 mm diameter)\n\n$fn = 36;\n\n// Main parameters\nfruit_d = 30;\nskin_thickness = 1.5;\nbump_height = 1;\nbump_count = 12;\nseed_d = 12;\nseed_h = 18;\nstem_d = 3;\nstem_h = 8;\n\nmodule fruit() {\n    // Outer skin with bumps\n    difference() {\n        union() {\n            // Main sphere\n            sphere(d = fruit_d);\n            \n            // Surface bumps\n            for(i = [0:bump_count-1]) {\n                rotate([0, 0, i * 360/bump_count])\n                translate([0, fruit_d/2 - bump_height/2, 0])\n                rotate([90, 0, 0])\n                cylinder(h = bump_height, d1 = 3, d2 = 2);\n            }\n        }\n        \n        // Hollow out interior\n        sphere(d = fruit_d - 2*skin_thickness);\n    }\n}\n\nmodule seed() {\n    // Inner seed - dark translucent part\n    color([0.2, 0.1, 0.05, 0.8])\n    translate([0, 0, -seed_h/4])\n    difference() {\n        // Main seed body\n        scale([1, 1.2, 1.1])\n        sphere(d = seed_d);\n        \n        // Flattened bottom\n        translate([0, 0, -seed_d/2])\n        cube([seed_d*1.2, seed_d*1.4, seed_d], center = true);\n    }\n}\n\nmodule transluscent_flesh() {\n    // Translucent flesh layer\n    color([1, 0.9, 0.7, 0.4])\n    difference() {\n        sphere(d = fruit_d - skin_thickness*1.5);\n        \n        // Space for seed\n        translate([0, 0, -seed_h/4])\n        scale([1, 1.2, 1.1])\n        sphere(d = seed_d + 2);\n    }\n}\n\nmodule stem() {\n    // Woody stem\n    color([0.4, 0.2, 0.1])\n    translate([0, 0, fruit_d/2])\n    cylinder(h = stem_h, d = stem_d);\n    \n    // Stem base flare\n    translate([0, 0, fruit_d/2 - 0.5])\n    cylinder(h = 2, d1 = stem_d + 2, d2 = stem_d);\n}\n\n// Assemble the longan\nunion() {\n    // Stem attached to skin\n    stem();\n    \n    // Main fruit assembly\n    translate([0, 0, -fruit_d/4])\n    union() {\n        // Skin shell\n        color([0.8, 0.6, 0.4])\n        fruit();\n        \n        // Internal parts\n        translate([0, 0, -fruit_d/8])\n        union() {\n            transluscent_flesh();\n            seed();\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "soursop",
    "openscad_code": "// Soursop fruit in realistic style, medium complexity\n// Designed for 3D printing with minimal overhangs\n\n// Overall dimensions (mm)\nfruit_d = 80;\nfruit_h = 100;\nspike_len = 5;\nwall_t = 2;\n\n// Main fruit body - slightly irregular shape\nmodule soursop_body() {\n    difference() {\n        // Main ovoid body\n        scale([0.9, 0.9, 1.1])\n        sphere(d=fruit_d, $fn=64);\n        \n        // Flat bottom for printing\n        translate([0, 0, -fruit_h/2])\n        cube([fruit_d*1.2, fruit_d*1.2, fruit_h], center=true);\n        \n        // Hollow interior\n        scale([0.85, 0.85, 1.05])\n        sphere(d=fruit_d-wall_t*2, $fn=64);\n    }\n}\n\n// Individual spike module\nmodule spike() {\n    // Curved spike with flat bottom\n    hull() {\n        translate([0, 0, 0])\n        sphere(d=spike_len/2, $fn=8);\n        \n        translate([0, 0, spike_len])\n        sphere(d=spike_len/4, $fn=8);\n    }\n}\n\n// Pattern of spikes across surface\nmodule spikes_pattern() {\n    for(a = [0:30:150]) {\n        for(b = [0:30:330]) {\n            // Skip bottom 30 degrees to avoid printing issues\n            if(a > 30) {\n                rotate([a, 0, b])\n                translate([0, 0, fruit_d/2 - wall_t])\n                spike();\n            }\n        }\n    }\n}\n\n// Stem base\nmodule stem_base() {\n    cylinder(h=8, d1=12, d2=8, $fn=16);\n}\n\n// Leaves at top\nmodule leaves() {\n    // Three simple leaves radiating from stem\n    for(i = [0, 120, 240]) {\n        rotate([0, 0, i])\n        translate([0, 8, 0])\n        rotate([0, 90, 0])\n        scale([1, 0.5, 1])\n        cylinder(h=20, d1=8, d2=4, $fn=8);\n    }\n}\n\n// Assemble the complete soursop\nunion() {\n    // Main body with spikes\n    soursop_body();\n    spikes_pattern();\n    \n    // Stem and leaves at top\n    translate([0, 0, fruit_d/2 - 2])\n    stem_base();\n    \n    translate([0, 0, fruit_d/2 + 6])\n    leaves();\n}",
    "renders": true
  },
  {
    "fruit": "cherimoya",
    "openscad_code": "// Cherimoya - medium complexity, realistic style\n// Overall size ~70mm diameter\n\n// Main fruit body\nmodule cherimoya_body() {\n    // Base heart-shaped form\n    scale([1.2, 1, 1])  // Make it slightly wider than tall\n    sphere(d=60, $fn=64);\n    \n    // Add slight flattening at top and bottom\n    translate([0, 0, 28])\n    scale([1, 1, 0.3])\n    sphere(d=40, $fn=32);\n    \n    translate([0, 0, -28])\n    scale([1, 1, 0.3])\n    sphere(d=40, $fn=32);\n}\n\n// Scaly surface pattern\nmodule scales() {\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([0, 28, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.6, 0.8])\n        cylinder(h=8, r1=4, r2=2, $fn=6);\n    }\n    \n    for (j = [1:3]) {\n        for (i = [0:30 - j*2]) {\n            rotate([0, 0, i * 12 + j * 6])\n            translate([0, 28 - j * 8, j * 6 - 6])\n            rotate([90, 0, 0])\n            scale([0.8, 0.5, 0.7])\n            cylinder(h=6, r1=3, r2=1.5, $fn=6);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 32])\n    rotate([0, 0, 0])\n    cylinder(h=8, d1=12, d2=8, $fn=16);\n    \n    // Stem base\n    translate([0, 0, 30])\n    sphere(d=14, $fn=16);\n}\n\n// Bottom flower remnant\nmodule flower_end() {\n    translate([0, 0, -32])\n    scale([1, 1, 0.3])\n    cylinder(h=3, r=8, $fn=12);\n    \n    // Small petals\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([5, 0, -33.5])\n        rotate([45, 0, 0])\n        scale([1, 0.3, 0.5])\n        cylinder(h=3, r1=2, r2=0.5, $fn=6);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main body\n    cherimoya_body();\n    \n    // Surface detail - subtract scales for texture\n    difference() {\n        cherimoya_body();\n        translate([0, 0, 0])\n        scales();\n    }\n    \n    // Add stem\n    stem();\n    \n    // Add bottom flower\n    flower_end();\n}",
    "renders": true
  },
  {
    "fruit": "custardapple",
    "openscad_code": "// Custard Apple (Annona reticulata) – realistic style, medium complexity\n// Author: OpenSCAD generator\n// Model size ≈ 75 mm tall × 65 mm wide\n// Optimised for 3D printing: 1.2 mm walls, no steep overhangs\n\n$fn = 60;               // Global resolution for curves\n\n// Overall scale factor for quick resizing\nscale_factor = 1.0;\n\n// ---- Main fruit body ----\nmodule custardapple_body() {\n    // Core ellipsoid with flattened poles\n    scale([1, 1, 0.85]) sphere(d = 65 * scale_factor);\n\n    // Add bulging lobes with slight randomness\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30 + (i % 2) * 5])\n        translate([0, 32 * scale_factor, 0])\n        scale([0.8, 0.8, 0.9])\n        sphere(d = 25 * scale_factor);\n    }\n}\n\n// ---- Surface reticulated pattern ----\nmodule surface_pattern() {\n    // Create shallow diamond-shaped depressions\n    difference() {\n        custardapple_body();\n\n        // Diamond grid along the surface\n        for (lat = [-60:15:60]) {\n            for (lon = [0:30:360]) {\n                rotate([0, lat, lon])\n                translate([0, 0, 34 * scale_factor])\n                rotate([90, 0, 0])\n                scale([1, 1, 0.2])\n                cylinder(h = 5 * scale_factor, d1 = 8 * scale_factor, d2 = 4 * scale_factor, $fn = 4);\n            }\n        }\n    }\n}\n\n// ---- Stem and calyx ----\nmodule stem() {\n    translate([0, 0, 34 * scale_factor])\n    rotate([0, 0, 180])\n    cylinder(h = 10 * scale_factor, d1 = 8 * scale_factor, d2 = 5 * scale_factor);\n\n    // Calyx leaves (green star)\n    for (a = [0:72:360]) {\n        rotate([0, 0, a])\n        translate([0, 3 * scale_factor, 34 * scale_factor])\n        rotate([45, 0, 0])\n        scale([0.6, 1, 0.2])\n        cylinder(h = 8 * scale_factor, d = 12 * scale_factor);\n    }\n}\n\n// ---- Bottom blossom scar ----\nmodule blossom_scar() {\n    translate([0, 0, -32 * scale_factor])\n    difference() {\n        cylinder(h = 2 * scale_factor, d = 6 * scale_factor);\n        sphere(d = 6.5 * scale_factor);\n    }\n}\n\n// ---- Full assembly ----\nunion() {\n    surface_pattern();\n    stem();\n    blossom_scar();\n}",
    "renders": true
  },
  {
    "fruit": "atemoya",
    "openscad_code": "// Atemoya (Annona × atemoya) – realistic medium-complexity model\n// Approx. 70 mm tall, printable without supports\n\n$fa = 3; $fs = 0.5;\n\n// Main fruit body\nmodule fruit_body() {\n    // Core sphere tapered toward stem\n    translate([0,0,-2])\n    scale([1,1,1.2])\n    sphere(d=60);\n}\n\n// Scaly rind segments\nmodule rind_segments() {\n    // 12 vertical segments around fruit\n    for(i=[0:11]) {\n        rotate([0,0,i*30])\n        translate([28,0,0])\n        rotate([0,90,0])\n        scale([1.1,1,0.8])\n        cylinder(d1=12, d2=7, h=35, $fn=6);\n    }\n}\n\n// Stem with leaf\nmodule stem_leaf() {\n    // Stem\n    rotate([0,0,rands(-20,20,1)[0]])\n    translate([0,0,33])\n    cylinder(d1=6, d2=4, h=14);\n\n    // Petiole\n    translate([0,0,35])\n    rotate([rands(20,40,1)[0],0,0])\n    cylinder(d=2, h=10);\n\n    // Leaf blade\n    translate([4,0,42])\n    rotate([90,0,0])\n    scale([1,0.6,1])\n    difference() {\n        sphere(d=25);\n        // Vein groove\n        translate([0,0,-2])\n        cube([25,1.5,5], center=true);\n    }\n}\n\n// Surface bumps (areoles)\nmodule areoles() {\n    for(i=[0:7]) {\n        rotate([0,0,i*45])\n        for(j=[0:3]) {\n            z = -20 + j*15;\n            if(j%2) x = 10;\n            else x = -5;\n            translate([x,0,z])\n            sphere(d=6);\n        }\n    }\n}\n\n// Base indentation\nmodule base_indent() {\n    translate([0,0,-32])\n    scale([1,1,0.3])\n    sphere(d=15);\n}\n\n// Assembly\nunion() {\n    difference() {\n        fruit_body();\n        base_indent();\n    }\n    rind_segments();\n    areoles();\n    stem_leaf();\n}",
    "renders": true
  },
  {
    "fruit": "sugarapple",
    "openscad_code": "// Sugarapple (Annona squamosa) - Realistic style, medium complexity\n// Overall size: ~70mm diameter\n\n// Main fruit body with scaly texture\nmodule sugarapple_body() {\n    difference() {\n        // Base rounded shape\n        sphere(d = 65, $fn = 50);\n        \n        // Hollow out the center for 3D printing\n        sphere(d = 60, $fn = 50);\n    }\n}\n\n// Individual scale segment\nmodule scale_segment(height, angle, rotation) {\n    rotate([0, angle, rotation]) {\n        translate([0, 0, 32]) {\n            difference() {\n                // Main scale shape - tapered cone\n                cylinder(h1 = 8, h2 = 0, r1 = 4, r2 = 1.5, $fn = 6);\n                \n                // Hollow inside\n                cylinder(h1 = 8, h2 = 0, r1 = 3.5, r2 = 1, $fn = 6);\n            }\n        }\n    }\n}\n\n// Generate all scales on the surface\nmodule all_scales() {\n    // Latitude circles\n    for (lat = [15:15:165]) {\n        // Number of scales per latitude\n        scale_count = floor(360 / (15 + sin(lat) * 5));\n        \n        for (i = [0:scale_count-1]) {\n            rotate([0, 0, i * 360 / scale_count]) {\n                scale_segment(\n                    height = 6 + sin(lat) * 2,\n                    angle = lat,\n                    rotation = 0\n                );\n            }\n        }\n    }\n}\n\n// Stem/calyx at the top\nmodule stem() {\n    translate([0, 0, 32]) {\n        // Main stem\n        cylinder(h = 12, r = 4, $fn = 8);\n        \n        // Calyx leaves\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([3, 0, 8]) {\n                    rotate([30, 0, 0]) {\n                        scale([1, 0.3, 1]) {\n                            sphere(d = 8, $fn = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Slight flattening at the base\nmodule base_flattening() {\n    translate([0, 0, -32]) {\n        cylinder(h = 5, r = 20, $fn = 30);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with scales\n    union() {\n        sugarapple_body();\n        all_scales();\n    }\n    \n    // Stem\n    stem();\n    \n    // Flattened base\n    base_flattening();\n}",
    "renders": true
  },
  {
    "fruit": "canistel",
    "openscad_code": "// Realistic 3D-printable Canistel (Eggfruit) Model\n// Overall size ~75 mm tall, 60 mm wide\n\n// Main body – egg-like ellipsoid, slightly lopsided\nmodule body() {\n    // Core body\n    difference() {\n        scale([1, 0.9, 1.3]) sphere(d = 55, $fn = 80);\n        // Flatten bottom slightly for printing stability\n        translate([0, 0, -30])\n            cube([60, 60, 30], center = true);\n    }\n}\n\n// Calyx stub on top\nmodule calyx() {\n    translate([0, 0, 34]) {\n        difference() {\n            cylinder(h = 8, d1 = 12, d2 = 10, $fn = 24);\n            // Hollow slightly for realism\n            cylinder(h = 9, d1 = 6, d2 = 4, $fn = 24);\n        }\n    }\n}\n\n// Surface creases: 4 shallow grooves running from top to lower sides\nmodule grooves() {\n    for (a = [0 : 90 : 270]) {\n        rotate([0, 0, a]) {\n            translate([0, 0, -5])\n                rotate([0, 15, 0])\n                    scale([1, 0.3, 1.2])\n                        difference() {\n                            sphere(d = 60, $fn = 40);\n                            translate([0, 0, -30])\n                                cube([120, 120, 60], center = true);\n                        }\n        }\n    }\n}\n\n// Small lenticel dots scattered over surface\nmodule lenticels() {\n    r = 28; // approximate surface radius\n    for (i = [0 : 35]) {\n        angle = i * 137.5; // golden-angle distribution\n        elev = 30 - (i % 6) * 10;\n        translate([\n            r * cos(angle) * sin(elev),\n            r * sin(angle) * sin(elev),\n            r * cos(elev) - 5\n        ]) {\n            sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        body();\n        grooves();\n    }\n    calyx();\n    lenticels();\n}",
    "renders": true
  },
  {
    "fruit": "mamey",
    "openscad_code": "// Mamey (Pouteria sapota) - medium complexity realistic model\n// Approximate dimensions: 80mm length, 65mm diameter\n\n$fn = 32;\n\n// Main fruit body\nmodule mamey_body() {\n    // Main ellipsoid shape\n    scale([1, 0.9, 1.1]) \n    sphere(d = 60);\n    \n    // Add slight bulge for characteristic mamey shape\n    translate([0, 0, -5])\n    scale([1.1, 1, 0.8])\n    sphere(d = 60);\n}\n\n// Skin texture with subtle bumps\nmodule skin_texture() {\n    difference() {\n        mamey_body();\n        \n        // Create small dimples for realistic skin texture\n        for (i = [0:15]) {\n            rotate([0, 0, i * 24])\n            translate([28 + sin(i * 30) * 3, 0, sin(i * 45) * 15])\n            sphere(d = 3);\n        }\n    }\n}\n\n// Stem area with calyx remnants\nmodule stem_end() {\n    // Stem base\n    translate([0, 0, 32])\n    cylinder(h = 5, d1 = 12, d2 = 8);\n    \n    // Calyx lobes (5 pointed sepals)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([6, 0, 34])\n        rotate([0, 90, 0])\n        cylinder(h = 8, d1 = 3, d2 = 1);\n    }\n}\n\n// Characteristic mamey \"belly button\" at bottom\nmodule bottom_indent() {\n    translate([0, 0, -32])\n    difference() {\n        cylinder(h = 8, d = 15);\n        translate([0, 0, -1])\n        cylinder(h = 10, d = 20);\n    }\n}\n\n// Surface color variation patches (slightly raised areas)\nmodule surface_patches() {\n    // Light brown patches typical of mamey skin\n    translate([15, 15, 20])\n    scale([1.2, 1, 0.5])\n    sphere(d = 15);\n    \n    translate([-20, -10, 15])\n    scale([0.8, 1.3, 0.4])\n    sphere(d = 12);\n    \n    translate([10, -20, 18])\n    scale([1, 0.9, 0.6])\n    sphere(d = 10);\n}\n\n// Main assembly\nunion() {\n    // Base fruit shape with skin texture\n    skin_texture();\n    \n    // Add stem end details\n    stem_end();\n    \n    // Add bottom indentation\n    bottom_indent();\n    \n    // Add surface patches for color variation\n    surface_patches();\n}\n\n// Scale to final size\nscale([1.2, 1.2, 1.2])",
    "renders": true
  },
  {
    "fruit": "sapodilla",
    "openscad_code": "// Sapodilla (Manilkara zapota) - Medium complexity realistic model\n// Size: ~65mm tall, 3D printable\n\n$fn = 32;  // Smooth curves\n\nmodule sapodilla_body() {\n    // Main fruit body - egg-shaped\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(d=40);  // Wider than tall\n        \n        // Remove bottom flat area\n        translate([0, 0, -21])\n            cube([60, 60, 20], center=true);\n    }\n}\n\nmodule surface_texture() {\n    // Create small bumps across surface\n    for (a = [0:30:359]) {\n        rotate([0, 0, a]) {\n            translate([18, 0, 10]) \n                scale([1, 0.8, 0.5]) sphere(d=3);\n            translate([16, 0, 5])\n                scale([0.8, 0.6, 0.4]) sphere(d=2.5);\n            translate([19, 0, 0])\n                scale([1.2, 0.9, 0.6]) sphere(d=3.5);\n            translate([17, 0, -5])\n                scale([0.9, 0.7, 0.4]) sphere(d=2.8);\n            translate([15, 0, -10])\n                scale([0.7, 0.6, 0.3]) sphere(d=2.2);\n        }\n    }\n}\n\nmodule stem_area() {\n    // Top stem connection\n    difference() {\n        union() {\n            // Main stem base\n            translate([0, 0, 19.5])\n                cylinder(h=6, d1=8, d2=6);\n            \n            // Small stem\n            translate([0, 0, 25])\n                cylinder(h=8, d1=5, d2=3);\n        }\n        \n        // Hollow out stem for printing\n        translate([0, 0, 19])\n            cylinder(h=15, d=2);\n    }\n}\n\nmodule bottom_mark() {\n    // Small depression at bottom\n    translate([0, 0, -18])\n        sphere(d=8);\n}\n\nmodule sapodilla() {\n    union() {\n        // Main body\n        sapodilla_body();\n        \n        // Surface texture\n        surface_texture();\n        \n        // Stem\n        stem_area();\n        \n        // Bottom mark\n        difference() {\n            cube([0.1, 0.1, 0.1]);  // Dummy for union\n            bottom_mark();\n        }\n    }\n}\n\n// Scale to reasonable size\nscale([1.6, 1.6, 1.6])\n    sapodilla();",
    "renders": true
  },
  {
    "fruit": "jabuticaba",
    "openscad_code": "// Jabuticaba - Brazilian grape tree fruit\n// Medium complexity realistic style\n\n$fn = 64;\n\n// Main parameters\nfruit_diameter = 20;\nstem_diameter = 3;\ntotal_height = 60;\n\nmodule jabuticaba_fruit(d=20, color_offset=0) {\n    // Main fruit body - slightly oval\n    scale([1, 1, 1.1]) \n    sphere(d=d);\n    \n    // Crown at top\n    translate([0, 0, d/2 * 1.1]) {\n        // Small crown leaves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) \n            translate([d/4, 0, 0])\n            rotate([45, 0, 0])\n            scale([0.3, 1, 0.5])\n            cylinder(h=d/3, r1=d/6, r2=0.1);\n        }\n    }\n    \n    // Surface texture - small bumps\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24 + color_offset])\n        translate([d/2 - 0.5, 0, sin(i * 30) * 3])\n        sphere(d=1.5);\n    }\n}\n\nmodule stem_segment(h=8, d=4) {\n    // Cylindrical stem with slight taper\n    cylinder(h=h, r1=d/2, r2=d/2 * 0.8);\n    \n    // Small leaf nodes\n    rotate([0, 90, 45])\n    translate([0, d/2, h/2])\n    scale([0.3, 1, 0.5])\n    cylinder(h=d*2, r1=d*0.8, r2=0.1);\n}\n\nmodule fruit_cluster() {\n    // Central stem\n    translate([0, 0, 0])\n    stem_segment(h=15, d=stem_diameter);\n    \n    // First ring of fruits\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([fruit_diameter * 0.7, 0, 5])\n        jabuticaba_fruit(d=fruit_diameter, color_offset=i*10);\n    }\n    \n    // Second ring - slightly higher and offset\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72 + 36])\n        translate([fruit_diameter * 0.5, 0, 12])\n        jabuticaba_fruit(d=fruit_diameter * 0.9, color_offset=i*15);\n    }\n    \n    // Top fruit\n    translate([0, 0, 20])\n    jabuticaba_fruit(d=fruit_diameter * 0.8, color_offset=50);\n    \n    // Small connecting stems\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([fruit_diameter * 0.7, 0, 5])\n        rotate([-30, 0, 0])\n        cylinder(h=fruit_diameter * 0.6, r=stem_diameter/3);\n    }\n    \n    for(i = [0:4]) {\n        rotate([0, 0, i * 72 + 36])\n        translate([fruit_diameter * 0.5, 0, 12])\n        rotate([-45, 0, 0])\n        cylinder(h=fruit_diameter * 0.5, r=stem_diameter/3);\n    }\n    \n    rotate([0, 0, 0])\n    translate([0, 0, 20])\n    rotate([-60, 0, 0])\n    cylinder(h=fruit_diameter * 0.4, r=stem_diameter/3);\n}\n\n// Generate the complete cluster\nfruit_cluster();\n\n// Base support for printing\ntranslate([0, 0, -2])\ncylinder(h=2, r=fruit_diameter * 1.5, $fn=32);",
    "renders": true
  },
  {
    "fruit": "camu",
    "openscad_code": "// Realistic Medium-Detail Camu (Chameleon) Model\n// Approx. 75 mm long - 3D-printable, no extreme overhangs\n// Uses only basic primitives, unions, differences, loops, mirrors\n\n// Body parameters\nbody_length = 60;\nbody_diameter = 22;\ntail_length = 42;\ntail_start = body_length * 0.7;\nleg_length = 12;\nleg_diameter = 6;\nhead_length = 18;\nhead_diameter = 14;\neye_diameter = 7;\n\n// Helper module: tapered cylinder\nmodule taper_cyl(h, r1, r2) {\n    for (i = [0: h-1]) {\n        translate([0, 0, i]) \n            cylinder(h=1, r1=r1 - (r1-r2)*i/h, r2=r1 - (r1-r2)*(i+1)/h, $fn=16);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    union() {\n        // Base of tail\n        translate([tail_start, 0, 0])\n            rotate([0, 90, 0])\n                taper_cyl(tail_length, body_diameter/2, 2);\n        // Tail curl segments\n        for (i = [0: 5]) {\n            translate([tail_start + i*6, 0, 0])\n                rotate([0, 90, i*15])\n                    sphere(d=body_diameter/2 - i*1.5, $fn=16);\n        }\n    }\n}\n\n// Leg with toes\nmodule leg(side) {\n    // Thigh\n    translate([body_length*0.3, side*(body_diameter/2+2), -leg_length/2])\n        rotate([side*-15, 0, 0])\n            cylinder(h=leg_length, d=leg_diameter, $fn=12);\n    // Lower leg\n    translate([body_length*0.3+leg_length/2, side*(body_diameter/2+2), -leg_length])\n        rotate([side*-30, 0, 0])\n            cylinder(h=leg_length*0.9, d=leg_diameter*0.8, $fn=12);\n    // Foot\n    translate([body_length*0.3+leg_length, side*(body_diameter/2+1), -leg_length*1.8])\n        rotate([side*-30, 0, 0])\n            cube([leg_length*0.6, leg_diameter*0.7, leg_diameter*0.4], center=true);\n    // Toes\n    for (j = [0:2]) {\n        translate([body_length*0.3+leg_length+leg_length*0.3, \n                   side*(body_diameter/2+1) + (j-1)*3, \n                   -leg_length*1.8-2])\n            cube([4, 2, 1.5]);\n    }\n}\n\n// Eye module\nmodule eye(side) {\n    translate([head_length/2, side*(head_diameter/2-eye_diameter/2), 0])\n        rotate([0, 90, 0])\n            union() {\n                // Eyeball\n                sphere(d=eye_diameter, $fn=24);\n                // Eyelid ridge\n                difference() {\n                    translate([0, 0, eye_diameter/5])\n                        sphere(d=eye_diameter*1.2, $fn=24);\n                    translate([0, 0, -eye_diameter])\n                        cube([eye_diameter*2, eye_diameter*2, eye_diameter*2], center=true);\n                }\n                // Pupil\n                translate([eye_diameter/2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=eye_diameter, d=eye_diameter/3, $fn=16);\n            }\n}\n\n// Head\nmodule head() {\n    union() {\n        // Main head\n        translate([body_length, 0, 0])\n            rotate([0, -20, 0])\n                taper_cyl(head_length, head_diameter/2, head_diameter/3);\n        // Snout\n        translate([body_length+head_length/2, 0, -head_diameter/4])\n            rotate([0, -20, 0])\n                taper_cyl(head_length/2, head_diameter/3, head_diameter/5);\n        // Eyes\n        eye(1);\n        eye(-1);\n        // Casque (head crest)\n        translate([body_length+head_length/3, 0, head_diameter/2])\n            cube([head_length/2, head_diameter/3, head_diameter/3], center=true);\n    }\n}\n\n// Body ridge\nmodule body_ridge() {\n    for (i = [0: 10]) {\n        translate([i*body_length/10, 0, body_diameter/2-1])\n            rotate([0, 0, 0])\n                cube([body_length/10, body_diameter/2, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    union() {\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                taper_cyl(body_length, body_diameter/2, body_diameter/2.5);\n        body_ridge();\n    }\n    // Tail\n    tail();\n    // Head\n    head();\n    // Legs\n    leg(1);\n    leg(-1);\n    mirror([1, 0, 0]) {\n        translate([-body_length*0.3, 0, 0])\n            leg(1);\n        translate([-body_length*0.3, 0, 0])\n            leg(-1);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "cupuacu",
    "openscad_code": "// Cupuacu fruit - realistic style, medium complexity\n// Dimensions: ~80mm x 60mm x 60mm\n\nwall_thickness = 2;\nscale_factor = 1;\n\nmodule cupuacu_body() {\n    // Main body - oblong shape\n    difference() {\n        // Outer shell\n        scale([1.2, 1, 1])\n            rotate([90, 0, 0])\n                cylinder(h=50, r1=25, r2=20, $fn=64);\n        \n        // Hollow inside\n        translate([0, 0, -wall_thickness])\n            scale([1.2 - wall_thickness/20, 1 - wall_thickness/20, 1])\n                rotate([90, 0, 0])\n                    cylinder(h=50 + wall_thickness*2, r1=25 - wall_thickness, r2=20 - wall_thickness, $fn=64);\n    }\n}\n\nmodule stem_end() {\n    // Stem attachment point\n    translate([0, -28, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=6, r2=4, $fn=32);\n}\n\nmodule texture_lines() {\n    // Longitudinal ridges on surface\n    for(i = [0:15]) {\n        rotate([0, 0, i * 360/16]) {\n            translate([28, 0, 0])\n                scale([1, 0.3, 1])\n                    rotate([90, 0, 0])\n                        cylinder(h=50, r1=2, r2=1.5, $fn=8);\n        }\n    }\n}\n\nmodule end_creases() {\n    // Creases at both ends\n    for(i = [0:5]) {\n        rotate([0, 0, i * 360/6]) {\n            translate([8, 0, 25])\n                rotate([90, 0, 0])\n                    cylinder(h=25, r1=3, r2=0.1, $fn=8);\n            translate([8, 0, -25])\n                rotate([90, 0, 0])\n                    cylinder(h=25, r1=0.1, r2=3, $fn=8);\n        }\n    }\n}\n\nmodule surface_details() {\n    // Small bumps for texture\n    for(i = [0:30]) {\n        angle = i * 137.5; // Fibonacci angle\n        x = 22 * cos(angle);\n        y = 18 * sin(angle);\n        z = (i % 7) * 7 - 21;\n        \n        translate([x, y, z])\n            sphere(r=0.8, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    cupuacu_body();\n    stem_end();\n    \n    // Add surface textures\n    difference() {\n        union() {\n            texture_lines();\n            end_creases();\n        }\n        \n        // Keep textures within body\n        scale([1.2, 1, 1])\n            rotate([90, 0, 0])\n                cylinder(h=50, r1=25, r2=20, $fn=64);\n    }\n    \n    // Surface bumps\n    intersection() {\n        surface_details();\n        scale([1.2, 1, 1])\n            rotate([90, 0, 0])\n                cylinder(h=50, r1=25, r2=20, $fn=64);\n    }\n}\n\n// Print orientation support\n%translate([0, 0, -30])\n    cube([100, 100, 0.1], center=true);",
    "renders": true
  },
  {
    "fruit": "feijoa",
    "openscad_code": "// Realistic Feijoa Model - Medium Complexity\n// Overall size: ~70mm long\n\n// Main fruit body\nmodule feijoa_body() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 0.8, 1.2])\n        sphere(d=50, $fn=64);\n        \n        // Flattened bottom\n        translate([0, 0, -30])\n        cube([100, 100, 30], center=true);\n    }\n}\n\n// Crown/flower end\nmodule crown() {\n    // Base of crown\n    translate([0, 0, 30.5])\n    cylinder(h=5, d1=18, d2=12, $fn=32);\n    \n    // Petal-like sepals\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 4.5, 33])\n        rotate([30, 0, 0])\n        scale([0.5, 2, 0.3])\n        sphere(d=8, $fn=16);\n    }\n}\n\n// Stem end indentation\nmodule stem_end() {\n    difference() {\n        translate([0, 0, -30.5])\n        sphere(d=8, $fn=32);\n        \n        translate([0, 0, -35])\n        cylinder(h=10, d=6, $fn=32);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_bumps() {\n    difference() {\n        // Base body for bumps\n        feijoa_body();\n        \n        // Create bump pattern using small spheres\n        for(a=[0:30:360]) {\n            for(b=[-60:30:60]) {\n                // Skip some for natural look\n                if((a+b)%2==0) {\n                    rotate([b, 0, a])\n                    translate([0, 0, 25])\n                    sphere(d=3, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Add positive bumps on surface\n    for(a=[15:30:345]) {\n        for(b=[-45:30:45]) {\n            if((a+b)%2==1) {\n                rotate([b, 0, a])\n                translate([0, 0, 25.2])\n                sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Natural ridge lines\nmodule ridges() {\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 0, 0])\n        scale([1, 0.85, 1.2])\n        rotate_extrude(angle=60, $fn=32)\n        translate([24, 0, 0])\n        circle(d=2, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core fruit with texture\n    surface_bumps();\n    \n    // Crown at top\n    crown();\n    \n    // Stem end\n    stem_end();\n    \n    // Subtle ridges\n    ridges();\n}",
    "renders": true
  },
  {
    "fruit": "jabong",
    "openscad_code": "// Jabong (traditional Korean vase) - Realistic style, medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 60;  // Smooth curves for printing\n\n// Overall dimensions\nheight = 80;\nbase_d = 40;\nmax_d = 55;\nneck_d = 20;\nrim_d = 30;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(h=10, d1=base_d+4, d2=base_d);\n        \n        // Hollow inside\n        translate([0, 0, 5])\n            cylinder(h=10, d1=base_d-4, d2=base_d-4);\n    }\n}\n\n// Lower body - bulbous section\nmodule lower_body() {\n    difference() {\n        // Outer shape - ellipsoid\n        scale([max_d/2, max_d/2, height/3])\n            sphere(d=1);\n        \n        // Inner hollow\n        translate([0, 0, -5])\n            scale([(max_d-4)/2, (max_d-4)/2, height/3])\n                sphere(d=1);\n    }\n}\n\n// Upper body - tapering section\nmodule upper_body() {\n    difference() {\n        // Frustum shape\n        cylinder(h=height/2.5, d1=max_d, d2=neck_d);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h=height/2.5, d1=max_d-4, d2=neck_d-4);\n    }\n}\n\n// Neck section\nmodule neck() {\n    difference() {\n        cylinder(h=height/5, d1=neck_d, d2=rim_d);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h=height/5, d1=neck_d-4, d2=rim_d-4);\n    }\n}\n\n// Rim/lip\nmodule rim() {\n    difference() {\n        // Outer rim\n        cylinder(h=5, d1=rim_d, d2=rim_d+2);\n        \n        // Inner rim\n        translate([0, 0, 2])\n            cylinder(h=5, d1=rim_d-4, d2=rim_d-2);\n    }\n}\n\n// Decorative rings\nmodule rings() {\n    // Lower decorative ring\n    translate([0, 0, height/3])\n        difference() {\n            cylinder(h=3, d=max_d+2);\n            cylinder(h=3, d=max_d);\n        }\n    \n    // Upper decorative ring\n    translate([0, 0, height-height/3])\n        difference() {\n            cylinder(h=3, d=neck_d+4);\n            cylinder(h=3, d=neck_d+2);\n        }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    base();\n    translate([0, 0, 10])\n        lower_body();\n    translate([0, 0, 10+height/3])\n        upper_body();\n    translate([0, 0, 10+height/3+height/2.5])\n        neck();\n    translate([0, 0, 10+height/3+height/2.5+height/5])\n        rim();\n    \n    // Decorative elements\n    rings();\n}",
    "renders": true
  },
  {
    "fruit": "tangelo",
    "openscad_code": "// Tangelo - medium complexity realistic style\n// Overall dimensions: ~65mm diameter, printable without supports\n\n$fn = 48;  // Smooth curves for 3D printing\n\n// Main parameters\ntangelo_radius = 32;\npeel_thickness = 2.5;\nstem_length = 8;\nstem_radius = 2.5;\nnub_radius = 1.5;\n\nmodule tangelo() {\n    // Outer peel with slight imperfections\n    difference() {\n        // Main body - slightly flattened sphere\n        scale([1, 1, 0.9])\n        sphere(r = tangelo_radius);\n\n        // Stem cavity\n        translate([0, 0, tangelo_radius * 0.9])\n        cylinder(h = stem_length + 2, r = stem_radius + 1, $fn = 16);\n\n        // Surface dimples\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([tangelo_radius * 0.7, 0, tangelo_radius * 0.4])\n            sphere(r = 2.5);\n        }\n        \n        for(j = [0:5]) {\n            rotate([0, 0, j * 60 + 30])\n            translate([tangelo_radius * 0.5, 0, -tangelo_radius * 0.3])\n            sphere(r = 2);\n        }\n    }\n\n    // Peel texture ridges\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([tangelo_radius - peel_thickness/2, 0, 0])\n        scale([1, 0.2, 1])\n        sphere(r = tangelo_radius);\n    }\n\n    // Stem\n    translate([0, 0, tangelo_radius * 0.9])\n    cylinder(h = stem_length, r = stem_radius, $fn = 12);\n    \n    // Stem nubs\n    translate([0, 0, tangelo_radius * 0.9 + stem_length])\n    sphere(r = nub_radius);\n    \n    translate([0, 0, tangelo_radius * 0.9 + stem_length/2])\n    rotate([0, 90, 0])\n    cylinder(h = 3, r = nub_radius);\n}\n\n// Optional: Cut in half to show interior\nmodule tangelo_half() {\n    intersection() {\n        tangelo();\n        translate([-tangelo_radius, 0, 0])\n        cube([tangelo_radius * 2, tangelo_radius * 2, tangelo_radius * 2]);\n    }\n    \n    // Interior flesh\n    color(\"orange\")\n    translate([0, 0, -peel_thickness/2])\n    scale([1, 1, 0.85])\n    sphere(r = tangelo_radius - peel_thickness);\n    \n    // Segment dividers\n    for(i = [0:9]) {\n        rotate([0, 0, i * 36 + 18])\n        translate([0, 0, -peel_thickness/2])\n        linear_extrude(height = peel_thickness * 2)\n        polygon(points = [[0, 0], [tangelo_radius - peel_thickness*2, 3], [tangelo_radius - peel_thickness*2, -3]]);\n    }\n}\n\n// Uncomment to show full tangelo\ntangelo();\n\n// Uncomment to show half tangelo\n// tangelo_half();",
    "renders": true
  },
  {
    "fruit": "ugli",
    "openscad_code": "// Ugli (Citrus reticulata × paradisi) - realistic style, medium complexity\n// Overall dimensions: ~60mm diameter\n\n$fn = 48;  // Smooth curves for realism\n\nmodule ugli_fruit() {\n    // Main body - slightly flattened sphere\n    difference() {\n        scale([1, 1, 0.9])\n        sphere(d = 60);\n        \n        // Slight indent at top for stem attachment\n        translate([0, 0, 28])\n        cylinder(h = 5, r1 = 6, r2 = 4);\n    }\n}\n\nmodule ugli_peel_texture() {\n    // Realistic peel segments\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([0, 29.5, 0])\n        difference() {\n            // Peel segment\n            scale([1, 0.1, 1])\n            cube([8, 1, 50], center = true);\n            \n            // Rounded segment edges\n            translate([4, 0, 0])\n            sphere(r = 3);\n            translate([-4, 0, 0])\n            sphere(r = 3);\n        }\n    }\n}\n\nmodule ugli_pores() {\n    // Realistic pore texture\n    for (i = [0:5]) {\n        for (j = [0:11]) {\n            rotate([0, 0, j * 30])\n            translate([20 + i*3, 0, -25 + i*8])\n            rotate([90, 0, 0])\n            cylinder(h = 0.5, r = 0.5);\n        }\n    }\n}\n\nmodule ugli_stem() {\n    // Natural looking stem\n    translate([0, 0, 27])\n    rotate([0, 0, 15])\n    cylinder(h = 8, r1 = 2.5, r2 = 1.5);\n    \n    // Stem base\n    translate([0, 0, 27])\n    sphere(r = 3);\n    \n    // Small leaf\n    translate([2, 3, 31])\n    rotate([45, 0, 45])\n    scale([0.3, 1, 0.1])\n    sphere(d = 10);\n}\n\nmodule ugli_navel() {\n    // Distinctive navel at bottom\n    translate([0, 0, -27])\n    difference() {\n        cylinder(h = 3, r = 8);\n        translate([0, 0, 2])\n        cylinder(h = 3, r = 6);\n    }\n}\n\n// Assembly\nunion() {\n    ugli_fruit();\n    \n    // Apply peel texture as raised features\n    translate([0, 0, 0])\n    ugli_peel_texture();\n    \n    // Surface details\n    ugli_pores();\n    \n    // Stem and navel\n    ugli_stem();\n    ugli_navel();\n}\n\n// Slight overall scaling for printability\nscale([1.02, 1.02, 1.02]) {\n    // Hollow interior for material saving\n    difference() {\n        sphere(d = 60);\n        sphere(d = 54);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "calamansi",
    "openscad_code": "// Realistic Calamansi (Philippine lime) - medium complexity\n// 3D printable, ~50mm diameter\n\n$fn = 36;  // Facet resolution\n\n// Main parameters\nfruit_d = 45;\nfruit_h = 42;\nstem_h = 8;\nstem_d = 4;\nn_segments = 12;\nsegment_depth = 1.5;\noil_gland_d = 1.2;\noil_gland_h = 0.5;\nwall_thickness = 1.5;\n\nmodule calamansi() {\n    // Main fruit body - slightly flattened sphere\n    scale([1, 1, 0.9])\n    sphere(d = fruit_d);\n}\n\nmodule segments() {\n    // Create vertical segments using boolean difference\n    for (i = [0 : n_segments - 1]) {\n        rotate([0, 0, i * 360/n_segments]) {\n            difference() {\n                cube([fruit_d, segment_depth, fruit_h], center = true);\n                translate([0, -segment_depth, 0])\n                sphere(d = fruit_d + 2);\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Stem at top with slight angle\n    translate([0, 0, fruit_h/2 * 0.9 + stem_h/2])\n    rotate([10, 0, 0])\n    cylinder(h = stem_h, d1 = stem_d, d2 = stem_d * 0.7, center = true);\n    \n    // Stem base - small bulge\n    translate([0, 0, fruit_h/2 * 0.9])\n    sphere(d = stem_d * 1.8);\n}\n\nmodule oil_glands() {\n    // Tiny oil glands scattered on surface\n    for (lat = [30 : 30 : 150]) {\n        for (lon = [0 : 30 : 330]) {\n            translate([\n                fruit_d/2 * 0.95 * cos(lon) * sin(lat),\n                fruit_d/2 * 0.95 * sin(lon) * sin(lat),\n                fruit_h/2 * 0.9 * cos(lat)\n            ])\n            rotate([0, 90 - lat, lon])\n            cylinder(h = oil_gland_h, d = oil_gland_d, center = true);\n        }\n    }\n}\n\nmodule blossom_end() {\n    // Bottom blossom scar\n    translate([0, 0, -fruit_h/2 * 0.9])\n    difference() {\n        cylinder(h = 2, d = 6, center = true);\n        cylinder(h = 3, d = 3, center = true);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        calamansi();\n        stem();\n        oil_glands();\n        blossom_end();\n    }\n    \n    // Hollow out for 3D printing\n    scale([0.85, 0.85, 0.85])\n    calamansi();\n    \n    // Drain hole at bottom\n    translate([0, 0, -fruit_h/2 * 0.9 - 1])\n    cylinder(h = 2, d = 3, center = true);\n}\n\n// Segments as surface detail\nintersection() {\n    calamansi();\n    segments();\n}",
    "renders": true
  },
  {
    "fruit": "sudachi",
    "openscad_code": "// Realistic medium-complexity 3D-printable Sudachi (Citrus sudachi) model\n// Approx. 65 mm tall\n\n$fn = 60;                  // smooth curves\nskin = 0.8;                // wall thickness (2 perimeters on 0.4 mm nozzle)\n\nmodule half_sudachi() {\n    // main fruit body – oblate ellipsoid\n    difference() {\n        scale([1, 1, 0.82])\n            sphere(d = 42);\n\n        // small flat area on the bottom\n        translate([0, 0, -21])\n            cube([20, 20, 5], center = true);\n    }\n\n    // slight indent at stylar end\n    translate([0, 0, 17])\n        rotate_extrude(angle = 360)\n            translate([7, 0, 0])\n                circle(r = 2.5);\n\n    // calyx remnant\n    difference() {\n        for (i = [1:5]) {\n            rotate([0, 0, i * 72])\n                translate([0, 5.5, 21.5])\n                    cylinder(h = 2.5, d1 = 2.5, d2 = 1.5);\n        }\n        cylinder(h = 25, d = 7, center = true);\n    }\n\n    // gentle bump for stem scar\n    translate([0, 0, 21.8])\n        cylinder(h = 0.6, d = 3, $fn = 20);\n}\n\n// peel texture – shallow dimples array\nmodule peel_texture() {\n    for (a = [0:30:150])\n        for (b = [0:30:330]) {\n            rotate([a, 0, b])\n                translate([0, 0, 20 * cos(a) + 1])\n                    sphere(d = 1.2);\n        }\n}\n\n// create hollow shell\ndifference() {\n    union() {\n        half_sudachi();\n        mirror([0, 0, 1]) half_sudachi();\n        peel_texture();\n    }\n\n    // hollow core\n    scale([0.9, 0.9, 0.75])\n        sphere(d = 40);\n\n    // drain hole at bottom for printing\n    translate([0, 0, -25])\n        cylinder(h = 5, d = 4);\n}",
    "renders": true
  },
  {
    "fruit": "fingerlime",
    "openscad_code": "// Fingerlime model - medium complexity, realistic style\n// 3D printable fingerlime with detailed skin texture and internal vesicles\n\n// Overall dimensions (mm)\nlime_length = 80;\nlime_diameter = 18;\nwall_thickness = 1.5;\n\n// Skin texture parameters\nbump_height = 0.8;\nbump_radius = 1.2;\nbumps_per_ring = 8;\nrings_along_length = 12;\n\n// Internal vesicles\nvesicle_diameter = 2.5;\nvesicles_per_ring = 6;\nvesicle_rings = 8;\n\n// Stem parameters\nstem_length = 8;\nstem_diameter = 4;\n\n// Main lime body module\nmodule fingerlime_body() {\n    // Basic ellipsoid shape\n    scale([1, 1.2, 1]) \n    sphere(d=lime_diameter, $fn=50);\n}\n\n// Create skin bumps\nmodule skin_bumps() {\n    for (i = [0:rings_along_length-1]) {\n        z_pos = -lime_length/2 + (i+0.5) * (lime_length/rings_along_length);\n        ring_radius = lime_diameter/2 * sin(acos(z_pos/(lime_length/2)));\n        \n        for (j = [0:bumps_per_ring-1]) {\n            angle = j * 360/bumps_per_ring;\n            \n            translate([0, 0, z_pos])\n            rotate([0, 90, 0])\n            rotate(angle)\n            translate([ring_radius - bump_height/2, 0, 0])\n            scale([bump_height, bump_height, bump_radius])\n            sphere(d=bump_radius*2, $fn=8);\n        }\n    }\n}\n\n// Internal vesicles\nmodule vesicles() {\n    for (i = [0:vesicle_rings-1]) {\n        z_pos = -lime_length/2 + (i+0.5) * (lime_length/vesicle_rings);\n        ring_radius = lime_diameter/2 * 0.7 * sin(acos(z_pos/(lime_length/2)));\n        \n        for (j = [0:vesicles_per_ring-1]) {\n            angle = j * 360/vesicles_per_ring + (i%2) * 30;\n            \n            translate([0, 0, z_pos])\n            rotate([0, 90, 0])\n            rotate(angle)\n            translate([ring_radius, 0, 0])\n            sphere(d=vesicle_diameter, $fn=6);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, lime_length/2])\n    rotate([0, 15, 0])\n    cylinder(h=stem_length, d1=stem_diameter, d2=stem_diameter*0.7, $fn=20);\n}\n\n// Hollow out the center\nmodule hollow_center() {\n    scale([1, 1.2, 1])\n    sphere(d=lime_diameter - wall_thickness*2, $fn=50);\n}\n\n// Create the complete fingerlime\nunion() {\n    // Main body with skin texture\n    difference() {\n        union() {\n            fingerlime_body();\n            skin_bumps();\n        }\n        hollow_center();\n    }\n    \n    // Internal vesicles\n    vesicles();\n    \n    // Stem\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "bloodlime",
    "openscad_code": "// Bloodlime - realistic style, medium complexity\n// Approx 70mm diameter, 3D printable\n\n$fn = 36;  // Smooth curves for printing\n\nmodule bloodlime() {\n    // Main fruit body\n    color(\"darkred\")\n    difference() {\n        // Base sphere\n        sphere(d = 70);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -35])\n            cylinder(h = 10, d1 = 40, d2 = 35, $fn = 24);\n        \n        // Stem cavity\n        translate([0, 0, 35])\n            cylinder(h = 8, d = 8, $fn = 16);\n    }\n    \n    // Small surface bumps for texture\n    for (i = [0:15]) {\n        rotate([rand(0, 180), rand(0, 180), rand(0, 360)])\n            translate([\n                rand(-25, 25), \n                rand(-25, 25), \n                rand(-20, 20) + 35\n            ])\n                sphere(d = rand(2, 4));\n    }\n    \n    // Stem\n    color(\"darkgreen\")\n    union() {\n        // Main stem\n        translate([0, 0, 35])\n            cylinder(h = 12, d1 = 7, d2 = 5, $fn = 12);\n        \n        // Leaf attachment\n        translate([0, 2, 47])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 3, d2 = 2, $fn = 8);\n    }\n    \n    // Small leaf\n    color(\"darkgreen\")\n    translate([0, 2, 55])\n    rotate([0, 90, 0])\n    scale([0.8, 1.2, 0.3])\n    difference() {\n        // Leaf shape\n        union() {\n            translate([0, 0, 0])\n                sphere(d = 15);\n            translate([7, 0, 0])\n                scale([0.7, 1, 1])\n                sphere(d = 10);\n        }\n        \n        // Vein indentation\n        translate([0, -8, 0])\n            rotate([0, 90, 0])\n            cube([16, 1, 3], center = true);\n    }\n    \n    // Calyx (bottom star pattern)\n    color(\"darkgreen\")\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, -34])\n            scale([1, 1, 0.3])\n            cylinder(h = 3, d1 = 8, d2 = 5, $fn = 3);\n    }\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\nbloodlime();",
    "renders": true
  },
  {
    "fruit": "ranggam",
    "openscad_code": "// Realistic Ranggam (Medium Complexity)\n// Approx 75mm tall, 3D-printable\n\n// Overall scale\nscale(0.75) \n\n// Base stand\nmodule base() {\n    difference() {\n        cylinder(h = 5, r = 30, $fn = 64);\n        // Center hole for weight reduction\n        cylinder(h = 5.2, r = 8, $fn = 32);\n    }\n}\n\n// Foot with toes\nmodule foot() {\n    difference() {\n        union() {\n            // Heel\n            translate([-5, -8, 0])\n                cube([10, 16, 12]);\n            // Arch\n            hull() {\n                translate([0, -8, 12])\n                    sphere(r = 4);\n                translate([0, 8, 12])\n                    sphere(r = 4);\n                translate([0, -8, 0])\n                    sphere(r = 5);\n                translate([0, 8, 0])\n                    sphere(r = 5);\n            }\n            // Toes\n            for(i = [0:4]) {\n                translate([15 - i*3, -8 + i*4, 0])\n                    scale([1.5, 0.8, 1])\n                    sphere(r = 3.5);\n            }\n        }\n        // Underside hollow\n        translate([0, 0, -1])\n            cube([25, 20, 6], center = true);\n    }\n}\n\n// Leg\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h = 30, r1 = 6, r2 = 5, $fn = 16);\n        translate([0, 0, 30])\n            // Lower leg\n            cylinder(h = 25, r1 = 5, r2 = 4, $fn = 16);\n        translate([0, 0, 55])\n            // Ankle\n            sphere(r = 4.5);\n    }\n}\n\n// Body with realistic torso shape\nmodule torso() {\n    difference() {\n        union() {\n            // Chest\n            translate([0, 0, 10])\n                scale([1.2, 0.8, 1.3])\n                sphere(r = 15);\n            // Abdomen\n            translate([0, 0, -5])\n                scale([1, 0.9, 1.1])\n                sphere(r = 12);\n            // Pelvis\n            translate([0, 0, -18])\n                scale([1.3, 1, 0.8])\n                sphere(r = 10);\n        }\n        // Neck hole\n        translate([0, 0, 25])\n            cylinder(h = 10, r = 5, $fn = 16);\n    }\n}\n\n// Realistic hand\nmodule hand() {\n    difference() {\n        union() {\n            // Palm\n            translate([0, 0, 0])\n                scale([1.2, 1, 0.8])\n                sphere(r = 6);\n            // Thumb\n            translate([-8, -3, 0])\n                rotate([0, 0, 30])\n                scale([0.7, 0.7, 1.2])\n                cylinder(h = 8, r = 2.5, $fn = 8);\n            // Fingers\n            for(i = [0:3]) {\n                translate([5 + i*4, 0, -2])\n                    rotate([0, 15 - i*10, 0])\n                    scale([0.5, 0.5, 1.5])\n                    cylinder(h = 10 - i*1.5, r = 2, $fn = 8);\n            }\n        }\n        // Wrist hole\n        translate([0, 0, -5])\n            cylinder(h = 10, r = 3.5, $fn = 16);\n    }\n}\n\n// Arm assembly\nmodule arm() {\n    union() {\n        // Shoulder\n        sphere(r = 7);\n        // Upper arm\n        translate([0, 0, -15])\n            cylinder(h = 20, r1 = 5, r2 = 4, $fn = 12);\n        translate([0, 0, -35])\n            // Elbow\n            sphere(r = 4.5);\n        // Forearm\n        translate([0, 0, -50])\n            cylinder(h = 20, r1 = 4, r2 = 3.5, $fn = 12);\n        translate([0, 0, -70])\n            // Wrist\n            sphere(r = 3.5);\n        // Hand\n        translate([0, 0, -78])\n            hand();\n    }\n}\n\n// Realistic head\nmodule head() {\n    difference() {\n        union() {\n            // Skull\n            sphere(r = 12);\n            // Jaw\n            translate([0, -10, -8])\n                scale([0.8, 0.7, 0.6])\n                sphere(r = 8);\n            // Nose\n            translate([0, 12, 2])\n                scale([0.6, 0.3, 0.8])\n                sphere(r = 3);\n            // Ears\n            for(side = [-1, 1]) {\n                translate([side*11, 0, 0])\n                    scale([0.3, 0.8, 1])\n                    sphere(r = 3);\n            }\n        }\n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([side*5, 10, 4])\n                sphere(r = 2.5);\n        }\n        // Neck hole\n        translate([0, 0, -12])\n            cylinder(h = 10, r = 5, $fn = 16);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5])\n    base();\n\n// Left leg\ntranslate([-12, 0, 10])\n    rotate([15, 0, 5])\n    leg();\ntranslate([-12, 0, 65])\n    rotate([15, 0, 5])\n    foot();\n\n// Right leg\ntranslate([12, 0, 10])\n    rotate([15, 0, -5])\n    leg();\ntranslate([12, 0, 65])\n    rotate([15, 0, -5])\n    foot();\n\n// Torso\ntranslate([0, 0, 75])\n    torso();\n\n// Left arm\ntranslate([-20, 0, 95])\n    rotate([0, 0, -30])\n    arm();\n\n// Right arm\ntranslate([20, 0, 95])\n    rotate([0, 0, 30])\n    mirror([1, 0, 0])\n    arm();\n\n// Head\ntranslate([0, 0, 110])\n    head();",
    "renders": true
  },
  {
    "fruit": "cempedak",
    "openscad_code": "// Cempedak (Artocarpus integer) - realistic medium-complexity model\n// Overall size ~70 mm\n\n$fn = 30; // smooth curves\n\n// Main fruit body\nmodule cempedak_body() {\n    // Central ellipsoid core\n    scale([1, 0.7, 1.5])\n        sphere(d = 45);\n    \n    // Add slight asymmetry for realism\n    translate([3, 2, 5])\n        scale([0.8, 0.7, 0.6])\n            sphere(d = 40);\n}\n\n// Hexagonal tubercles covering the surface\nmodule tubercles() {\n    for (lat = [-60:20:60]) {\n        for (lon = [0:30:330]) {\n            rotate([lat, 0, lon])\n                translate([0, 0, 20])\n                    scale([1, 1.3, 0.5])\n                        rotate([0, 0, 30])\n                            cylinder(h = 4, d1 = 6, d2 = 4);\n        }\n    }\n}\n\n// Stem connection\nmodule stem() {\n    translate([0, 0, 32])\n        rotate([0, 20, 0])\n            cylinder(h = 12, d1 = 8, d2 = 5);\n    \n    // Stem collar\n    translate([0, 0, 30])\n        cylinder(h = 3, d = 12);\n}\n\n// Surface texture grooves\nmodule grooves() {\n    difference() {\n        cempedak_body();\n        \n        // Longitudinal grooves\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([0, 15, 0])\n                    scale([0.3, 30, 2])\n                        rotate([90, 0, 0])\n                            cylinder(h = 50, d = 2);\n        }\n        \n        // Latitudinal grooves\n        for (j = [-40:20:40]) {\n            rotate([j, 0, 0])\n                translate([0, 0, 0])\n                    scale([30, 30, 0.3])\n                        sphere(d = 46);\n        }\n    }\n}\n\n// Thin shell for 3D printing\nmodule fruit_shell() {\n    difference() {\n        union() {\n            grooves();\n            tubercles();\n            stem();\n        }\n        \n        // Hollow interior\n        scale([0.9, 0.9, 0.9])\n            translate([0, 0, 5])\n                cempedak_body();\n    }\n}\n\n// Generate the complete cempedak\nfruit_shell();",
    "renders": true
  },
  {
    "fruit": "salak",
    "openscad_code": "// Salak (snake fruit) – realistic style, medium complexity\n// ~60 mm tall, 3 mm wall thickness, no overhangs\n\n$fn = 32;\n\n// Main body ----------------------------------------------------------\nmodule salak_body() {\n    difference() {\n        // Core fruit body\n        scale([1, 1, 1.35])\n            sphere(d = 50);            // ~50 mm wide\n\n        // Hollow inside\n        scale([0.85, 0.85, 1.15])\n            sphere(d = 50);\n    }\n}\n\n// Scales -------------------------------------------------------------\nmodule scales() {\n    for (a = [0:30:150]) {           // five vertical columns\n        rotate([0, 0, a])\n            for (h = [-20:10:20]) {  // four rows\n                translate([0, 25, h])\n                    scale([1, 0.6, 0.4])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, d1 = 12, d2 = 8, $fn = 3);\n            }\n    }\n}\n\n// Pointed tip --------------------------------------------------------\nmodule tip() {\n    translate([0, 0, 34])\n        cylinder(h = 15, d1 = 0, d2 = 18);\n}\n\n// Stem ---------------------------------------------------------------\nmodule stem() {\n    translate([0, 0, -28])\n        rotate([0, 180, 0])\n            cylinder(h = 18, d1 = 10, d2 = 7);\n}\n\n// Final union --------------------------------------------------------\nunion() {\n    salak_body();\n    scales();\n    tip();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "duku",
    "openscad_code": "// Duku (Lansium parasiticum) fruit - Realistic style, medium complexity\n// Overall size ~70mm long, 45mm diameter\n\n$fn = 36;\n\n// Main fruit body\nmodule fruit_body() {\n    // Slightly flattened ellipsoid shape\n    scale([1, 0.85, 1.1])\n    sphere(d = 45);\n}\n\n// Skin texture segments\nmodule skin_segments() {\n    // Create 5 vertical segments\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, -22.5])\n        difference() {\n            // Main segment\n            scale([1, 0.85, 1.1])\n            cylinder(h = 45, d1 = 45, d2 = 40);\n            \n            // Indentation between segments\n            translate([-23, -2, -1])\n            cube([46, 4, 47]);\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 24])\n    cylinder(h = 5, d1 = 12, d2 = 8);\n}\n\n// Small stem\nmodule stem() {\n    translate([0, 0, 29])\n    cylinder(h = 8, d = 4);\n}\n\n// Natural blemishes and spots\nmodule blemishes() {\n    // Random small indentations\n    for (i = [0:8]) {\n        rotate([rand(i*10)*360, rand(i*10+5)*180, 0])\n        translate([rand(i*10+10)*20-10, rand(i*10+15)*20-10, rand(i*10+20)*10+15])\n        sphere(d = rand(i*10+25)*1.5+1);\n    }\n}\n\n// Bottom dimple\nmodule bottom_dimple() {\n    translate([0, 0, -25])\n    sphere(d = 8);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Base fruit shape\n        fruit_body();\n        \n        // Stem base\n        stem_base();\n        \n        // Stem\n        stem();\n    }\n    \n    // Apply skin texture\n    skin_segments();\n    \n    // Bottom dimple\n    bottom_dimple();\n    \n    // Apply blemishes\n    blemishes();\n}\n\n// Color - light yellow-brown\n%color([0.85, 0.75, 0.45]) {\n    children();\n}",
    "renders": true
  },
  {
    "fruit": "langsat",
    "openscad_code": "// Langsat (Lansium parasiticum) - Medium complexity realistic style\n// Overall dimensions: ~65mm tall fruit cluster\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main module for the langsat cluster\nmodule langsat_cluster() {\n    union() {\n        // Central stem\n        stem();\n        \n        // Generate 6-8 individual fruits in a natural cluster\n        for (i = [0:7]) {\n            angle = i * 45 + (i % 2 == 0 ? 5 : -5);\n            radius = 16 + sin(i * 45) * 3;\n            height = 8 + cos(i * 30) * 2;\n            \n            translate([cos(angle) * radius, sin(angle) * radius, height])\n                rotate([0, 0, angle + 90])\n                    rotate([5 + sin(i * 25) * 5, 0, 0])\n                        langsat_fruit(i);\n        }\n        \n        // Small connecting branches\n        for (i = [0:7]) {\n            angle = i * 45 + (i % 2 == 0 ? 5 : -5);\n            radius = 16 + sin(i * 45) * 3;\n            translate([cos(angle) * radius/2, sin(angle) * radius/2, 15])\n                rotate([0, 0, angle + 90])\n                    small_branch();\n        }\n    }\n}\n\n// Individual langsat fruit\nmodule langsat_fruit(index) {\n    scale = 0.9 + sin(index * 25) * 0.1;\n    \n    union() {\n        // Main fruit body - oval shape\n        scale([scale, scale, 1.1])\n            ellipsoid(8, 12);\n        \n        // Skin texture segments\n        skin_segments();\n        \n        // Top crown\n        translate([0, 0, 11.5])\n            crown();\n        \n        // Bottom remnant of flower\n        translate([0, 0, -12])\n            rotate([0, 180, 0])\n                flower_remnant();\n    }\n}\n\n// Create ellipsoid shape using scaled sphere\nmodule ellipsoid(radius, height) {\n    scale([1, 1, height/radius])\n        sphere(r = radius);\n}\n\n// Crown at top of fruit (where it connects to branch)\nmodule crown() {\n    difference() {\n        cylinder(h = 2, r1 = 2.5, r2 = 3);\n        cylinder(h = 2.5, r = 2.2);\n    }\n}\n\n// Remnant of flower at bottom\nmodule flower_remnant() {\n    difference() {\n        cylinder(h = 1.5, r1 = 3, r2 = 2.5);\n        cylinder(h = 2, r = 2);\n    }\n}\n\n// Skin segments to show langsat's natural division\nmodule skin_segments() {\n    difference() {\n        // Base fruit\n        ellipsoid(8, 12);\n        \n        // Create 5 segment grooves\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 0, -12])\n                    cube([0.5, 16, 24], center = true);\n            }\n        }\n    }\n}\n\n// Main stem of the cluster\nmodule stem() {\n    union() {\n        // Main vertical stem\n        cylinder(h = 25, r = 3);\n        \n        // Slight taper at top\n        translate([0, 0, 25])\n            cylinder(h = 5, r1 = 3, r2 = 2);\n        \n        // Branching structure\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([2.5, 0, 20 - i * 2])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 0.8);\n        }\n    }\n}\n\n// Small connecting branches to fruits\nmodule small_branch() {\n    cylinder(h = 6, r1 = 1.2, r2 = 0.8);\n}\n\n// Render the complete langsat cluster\nlangsat_cluster();",
    "renders": true
  },
  {
    "fruit": "dukuh",
    "openscad_code": "// Dukuh (Javanese traditional house) - Realistic style, medium complexity\n// Dimensions in mm, sized for 3D printing\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nhouse_length = 60;\nhouse_width = 40;\nhouse_height = 35;\n\n// Wall thickness for 3D printing\nwall_th = 2;\n\n// Main house body\nmodule house_body() {\n    difference() {\n        // Main rectangular structure\n        cube([house_length, house_width, house_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_th/2])\n            cube([house_length-wall_th*2, house_width-wall_th*2, house_height-wall_th], center = true);\n        \n        // Door opening\n        translate([0, -house_width/2-wall_th/2, -house_height/2+10])\n            cube([15, wall_th+1, 20], center = true);\n        \n        // Window openings (2 windows)\n        for(x = [-20, 20]) {\n            translate([x, -house_width/2-wall_th/2, 0])\n                cube([8, wall_th+1, 10], center = true);\n        }\n    }\n}\n\n// Traditional joglo-style roof\nmodule roof() {\n    // Main roof structure\n    translate([0, 0, house_height/2+3])\n    difference() {\n        // Base pyramid\n        cylinder(h1 = 25, h2 = 0, r1 = house_length/2+15, r2 = 10, center = true);\n        \n        // Hollow interior\n        translate([0, 0, -3])\n            cylinder(h1 = 20, h2 = 0, r1 = house_length/2+12, r2 = 8, center = true);\n    }\n    \n    // Roof ridge details\n    translate([0, 0, house_height/2+25])\n    rotate([90, 0, 0])\n    cylinder(h = house_length+10, r = 1.5, center = true);\n    \n    // Corner roof ornaments\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([house_length/2+10, 0, house_height/2+15])\n        cylinder(h = 8, r = 2);\n    }\n}\n\n// Front porch with columns\nmodule porch() {\n    // Porch floor\n    translate([0, house_width/2+10, -house_height/2-2])\n    cube([house_length+20, 15, wall_th], center = true);\n    \n    // Support columns (4 columns)\n    for(x = [-20, 20]) {\n        for(y = [house_width/2+3, house_width/2+17]) {\n            translate([x, y, -house_height/2+5])\n            cylinder(h = 10, r = 2);\n        }\n    }\n    \n    // Porch roof extension\n    translate([0, house_width/2+10, house_height/2-5])\n    difference() {\n        cube([house_length+20, 15, wall_th], center = true);\n        translate([0, 0, -wall_th])\n            cube([house_length+16, 11, wall_th], center = true);\n    }\n}\n\n// Window and door details\nmodule details() {\n    // Door\n    translate([0, -house_width/2-wall_th, -house_height/2+10])\n    cube([12, wall_th, 18], center = true);\n    \n    // Window shutters\n    for(x = [-20, 20]) {\n        translate([x, -house_width/2-wall_th, 0])\n        cube([6, wall_th, 8], center = true);\n        \n        // Window frames\n        translate([x, -house_width/2-wall_th/2, 0])\n        for(dx = [-4, 4]) {\n            for(dy = [-5, 5]) {\n                translate([dx, 0, dy])\n                cube([0.5, wall_th+1, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Traditional ventilation details\nmodule ventilation() {\n    // Upper wall vents\n    for(x = [-25, -15, -5, 5, 15, 25]) {\n        translate([x, house_width/2+wall_th/2, house_height/2-5])\n        cube([3, wall_th+1, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    house_body();\n    roof();\n    porch();\n    details();\n    ventilation();\n}",
    "renders": true
  },
  {
    "fruit": "baccaurea",
    "openscad_code": "// Baccaurea 3D model - realistic style, medium complexity\n// Overall size ~60mm diameter\n\n$fn = 36;  // Smooth curves\n\n// Main fruit body\nmodule fruit_body() {\n    // Main spherical body slightly flattened\n    scale([1, 1, 0.9])\n    sphere(d = 50);\n    \n    // Top bulge\n    translate([0, 0, 20])\n    scale([0.8, 0.8, 0.6])\n    sphere(d = 30);\n}\n\n// Skin texture with segments\nmodule skin_segments() {\n    difference() {\n        fruit_body();\n        \n        // Create 6 vertical grooves for segments\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([25, 0, -25])\n            rotate([0, 90, 0])\n            cylinder(h = 50, d1 = 3, d2 = 1, center = true);\n        }\n        \n        // Horizontal groove\n        translate([0, 0, 5])\n    rotate([90, 0, 0])\n    rotate_extrude(angle = 360)\n    translate([22, 0, 0])\n    circle(d = 2);\n    }\n}\n\n// Stem attachment\nmodule stem_base() {\n    // Stem connection point\n    translate([0, 0, 25])\n    cylinder(h = 8, d1 = 12, d2 = 8);\n    \n    // Small collar\n    translate([0, 0, 25])\n    cylinder(h = 2, d = 15);\n}\n\n// Leaf scars\nmodule leaf_scars() {\n    // 5 leaf scars around top\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([18, 0, 22])\n        rotate([90, 0, 0])\n        cylinder(h = 3, d = 4);\n    }\n}\n\n// Surface details - small bumps\nmodule surface_bumps() {\n    union() {\n        // Random small bumps over surface\n        for(a = [15:30:345]) {\n            for(b = [30:45:150]) {\n                translate([\n                    23 * cos(a) * sin(b),\n                    23 * sin(a) * sin(b),\n                    23 * cos(b) - 5\n                ])\n                sphere(d = 1.5);\n            }\n        }\n    }\n}\n\n// Bottom dimple\nmodule bottom_dimple() {\n    translate([0, 0, -23])\n    sphere(d = 8);\n}\n\n// Main assembly\nunion() {\n    // Core fruit structure\n    difference() {\n        skin_segments();\n        bottom_dimple();\n    }\n    \n    // Surface details\n    surface_bumps();\n    \n    // Stem area\n    stem_base();\n    leaf_scars();\n}\n\n// Optional cutaway view (comment out for full fruit)\n// %translate([0, 70, 0])\n// rotate([0, 90, 0])\n// cube([60, 60, 60], center = true);",
    "renders": true
  },
  {
    "fruit": "belimbing",
    "openscad_code": "// Belimbing (Starfruit) - Realistic Style\n// Medium complexity - 3D printable\n\n$fn = 32;\n\nmodule starfruit_core() {\n    // Main body - ellipsoid with ridges\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            hull() {\n                translate([0, 0, -25]) \n                    scale([1.2, 0.8, 1]) \n                        sphere(15);\n                translate([0, 0, 25]) \n                    scale([0.8, 0.6, 1]) \n                        sphere(12);\n            }\n        }\n    }\n}\n\nmodule ridges() {\n    // Create 5 ridges along the fruit\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            // Main ridge\n            translate([0, -2, 0]) \n                scale([1, 0.3, 1]) \n                    cylinder(h = 50, r1 = 12, r2 = 8);\n            \n            // Subtle edge definition\n            translate([0, -1.5, 0]) \n                scale([1.1, 0.2, 1]) \n                    cylinder(h = 50, r1 = 11, r2 = 7);\n        }\n    }\n}\n\nmodule star_edges() {\n    // Star points when viewed from end\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72 + 36]) {\n            hull() {\n                translate([0, 0, -25]) \n                    rotate([90, 0, 0]) \n                        cylinder(h = 5, r1 = 2.5, r2 = 0.5);\n                translate([0, 0, 25]) \n                    rotate([90, 0, 0]) \n                        cylinder(h = 5, r1 = 2, r2 = 0.3);\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Stem at top\n    translate([0, 0, 26]) {\n        // Main stem\n        cylinder(h = 8, r = 3);\n        \n        // Stem collar\n        translate([0, 0, -2]) \n            cylinder(h = 3, r1 = 4, r2 = 3);\n    }\n}\n\nmodule seeds() {\n    // Internal seeds - small oval shapes\n    for (z = [-20:10:20]) {\n        for (a = [0:72:288]) {\n            rotate([0, 0, a + 36]) {\n                translate([6, 0, z]) {\n                    rotate([90, 0, 0]) \n                        scale([1, 0.5, 0.7]) \n                            sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule fruit_skin() {\n    // Outer skin with slight texture\n    difference() {\n        union() {\n            starfruit_core();\n            ridges();\n            star_edges();\n        }\n        \n        // Hollow out for printing\n        scale([0.85, 0.85, 0.9]) \n            starfruit_core();\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit\n    fruit_skin();\n    \n    // Stem\n    stem();\n    \n    // Add chamfer for printability\n    translate([0, 0, -25]) \n        cylinder(h = 3, r1 = 12, r2 = 12.5);\n}\n\n// Optional - show internal structure\n%seeds();",
    "renders": true
  },
  {
    "fruit": "carambola",
    "openscad_code": "// Realistic Carambola (Starfruit) Model\n// Medium complexity, 3D-printable design\n\n// Parameters\nfruit_diameter = 60;\nfruit_length = 80;\nridge_depth = 3;\nridge_width = 8;\nsegment_count = 5;\nstem_diameter = 8;\nstem_length = 15;\nwall_thickness = 2;\n\n// Main fruit body module\nmodule carambola_body() {\n    // Create the basic ellipsoid shape\n    difference() {\n        scale([1, 1, 1.3])\n        sphere(d=fruit_diameter, $fn=50);\n        \n        // Carve out the star shape\n        for(i=[0:segment_count-1]) {\n            rotate([0, 0, i*360/segment_count])\n            translate([0, 0, -fruit_diameter/2])\n            cylinder(h=fruit_diameter*2, d=fruit_diameter-ridge_width*2, $fn=3);\n        }\n    }\n    \n    // Add ridges between segments\n    for(i=[0:segment_count-1]) {\n        rotate([0, 0, i*360/segment_count + 360/segment_count/2])\n        translate([0, fruit_diameter/2 - ridge_width/2, 0])\n        rotate_extrude($fn=50)\n        translate([fruit_diameter/2 - ridge_width, 0])\n        polygon(points=[\n            [0, 0],\n            [ridge_width, 0],\n            [ridge_width/2, -ridge_depth]\n        ]);\n    }\n}\n\n// Create the characteristic ridges along the fruit\nmodule longitudinal_ridges() {\n    for(i=[0:segment_count-1]) {\n        rotate([0, 0, i*360/segment_count])\n        for(z=[-fruit_length/2+10:5:fruit_length/2-10]) {\n            translate([0, 0, z])\n            scale([1, 1, 0.3])\n            sphere(d=ridge_width, $fn=20);\n        }\n    }\n}\n\n// Create the stem\nmodule stem() {\n    translate([0, 0, fruit_length/2*1.3 + stem_length/2])\n    cylinder(h=stem_length, d=stem_diameter, $fn=20);\n    \n    // Stem base flare\n    translate([0, 0, fruit_length/2*1.3])\n    cylinder(h=3, d1=stem_diameter*1.5, d2=stem_diameter, $fn=20);\n}\n\n// Create the seed cavities (subtle indentations)\nmodule seed_cavities() {\n    for(i=[0:segment_count-1]) {\n        rotate([0, 0, i*360/segment_count + 360/segment_count/2])\n        for(z=[-20:10:20]) {\n            translate([0, fruit_diameter/2 - ridge_width, z])\n            scale([1, 0.5, 0.5])\n            sphere(d=4, $fn=10);\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        carambola_body();\n        longitudinal_ridges();\n        stem();\n    }\n    \n    // Hollow out for 3D printing\n    translate([0, 0, 0])\n    scale([0.9, 0.9, 0.9])\n    sphere(d=fruit_diameter, $fn=50);\n    \n    // Add drainage hole at bottom\n    translate([0, 0, -fruit_length/2*1.3 - 1])\n    cylinder(h=2, d=5, $fn=20);\n    \n    // Seed cavities\n    seed_cavities();\n}\n\n// Add subtle surface texture\nfor(i=[0:segment_count*4-1]) {\n    rotate([0, 0, i*360/(segment_count*4)])\n    for(z=[-30:8:30]) {\n        translate([0, fruit_diameter/2 - 5, z])\n        sphere(d=1.5, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "bilimbi",
    "openscad_code": "// Bilimbi (Averrhoa bilimbi) - medium complexity, realistic\n// Overall length ~80 mm\n\n$fn = 36;\n\nmodule bilimbi_body() {\n    // Main fruit body – five-ridged oblong cylinder\n    difference() {\n        union() {\n            // Core cylinder\n            cylinder(h = 45, d1 = 12, d2 = 9, center = true);\n            // Five longitudinal ridges\n            for (i = [0:4]) {\n                rotate([0, 0, i * 72])\n                    translate([5.5, 0, 0])\n                        cube([3, 1.5, 45], center = true);\n            }\n        }\n        // Slight tapering cut at ends\n        translate([0, 0, 23]) cube([20, 20, 5], center = true);\n        translate([0, 0, -23]) cube([20, 20, 5], center = true);\n    }\n}\n\nmodule stem_end() {\n    // Wrinkled stem base at top\n    union() {\n        // Main stem cylinder\n        cylinder(h = 6, d = 4);\n        // Small radial wrinkles\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([2.2, 0, 2])\n                    scale([1, 0.3, 1])\n                        sphere(d = 1.2);\n        }\n    }\n}\n\nmodule tip_end() {\n    // Pointed tip with slight nipple\n    union() {\n        // Conical tip\n        rotate([0, 180, 0])\n            cylinder(h = 7, d1 = 0, d2 = 6);\n        // Tiny nipple sphere\n        translate([0, 0, 3.8])\n            sphere(d = 1.4);\n    }\n}\n\nmodule surface_pocks() {\n    // Random shallow depressions for realism\n    for (pos = [[6, 4, 12], [-5, -3, -8], [4, -5, 0], [-4, 5, 15]]) {\n        translate(pos)\n            scale([1, 1, 0.3])\n                sphere(d = 2.2);\n    }\n}\n\nmodule complete_bilimbi() {\n    union() {\n        // Assemble body\n        color(\"forestgreen\")\n            bilimbi_body();\n        // Attach stem end\n        translate([0, 0, 23])\n            stem_end();\n        // Attach tip\n        translate([0, 0, -23])\n            tip_end();\n        // Surface details subtracted\n        color(\"forestgreen\")\n            difference() {\n                children();\n                surface_pocks();\n            }\n    }\n}\n\n// Render the fruit vertically\nrotate([90, 0, 0])\n    complete_bilimbi();",
    "renders": true
  },
  {
    "fruit": "tamarind",
    "openscad_code": "// Realistic Tamarind Pod - Medium Complexity\n// Based on typical tamarind dimensions: ~80mm long, ~20mm wide, ~15mm thick\n// Designed for 3D printing with no overhangs and 1.2mm wall thickness\n\n$fn = 36;  // Smooth curves for printing\n\n// Main pod shell\nmodule pod_shell() {\n    difference() {\n        // Outer curved shell\n        hull() {\n            translate([-35, 0, 0]) scale([1, 0.6, 0.4]) sphere(d=20);\n            translate([35, 0, 0]) scale([1, 0.6, 0.4]) sphere(d=20);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) scale([0.9, 0.8, 0.7]) {\n            hull() {\n                translate([-30, 0, 0]) scale([1, 0.5, 0.35]) sphere(d=20);\n                translate([30, 0, 0]) scale([1, 0.5, 0.35]) sphere(d=20);\n            }\n        }\n        \n        // Split line for opening\n        translate([0, 0, 2]) cube([80, 1, 5], center=true);\n    }\n}\n\n// Seed segments inside\nmodule seed_segments() {\n    for(i = [-25:12.5:25]) {\n        translate([i, 0, 0]) {\n            // Seed\n            color(\"brown\") {\n                scale([1.2, 0.8, 0.5]) sphere(d=8);\n            }\n            \n            // Pulp around seed\n            color(\"darkgoldenrod\") {\n                difference() {\n                    scale([1.5, 1, 0.7]) sphere(d=10);\n                    scale([1.3, 0.8, 0.5]) sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\n// Pod seam texture\nmodule seam_texture() {\n    for(i = [-30:5:30]) {\n        translate([i, 0, 1.5]) {\n            rotate([90, 0, 0]) cylinder(h=0.5, d1=2, d2=0.5);\n        }\n    }\n}\n\n// Stem connection\nmodule stem() {\n    translate([-38, 0, 2]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=8, d1=4, d2=2);\n            translate([0, 0, 8]) sphere(d=3);\n        }\n    }\n}\n\n// Natural surface texture\nmodule surface_texture() {\n    // Small bumps on surface\n    for(i = [-30:10:30]) {\n        for(j = [-8:4:8]) {\n            translate([i, j, 8*cos(i*3.14/30)]) {\n                sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main pod\n    difference() {\n        union() {\n            pod_shell();\n            surface_texture();\n        }\n        // Remove bottom flat for printing\n        translate([0, 0, -10]) cube([100, 100, 10], center=true);\n    }\n    \n    // Stem\n    stem();\n    \n    // Internal contents (visible through split)\n    seed_segments();\n    \n    // Seam details\n    seam_texture();\n}",
    "renders": true
  },
  {
    "fruit": "pulasan",
    "openscad_code": "// Pulasan - medium-complexity realistic style\n// 70 mm tall, 3D-printable, hollow shell with 1 mm wall\n\n$fn = 64; // sphere resolution\n\nmodule fruit_body() {\n    // Main ellipsoid body\n    difference() {\n        scale([1, 0.9, 1.2]) sphere(d = 42);\n        // Hollow out\n        scale([0.92, 0.82, 1.12]) sphere(d = 42);\n    }\n}\n\nmodule skin_spikes() {\n    // Short stubby spikes across surface\n    for (a = [30:30:150]) {\n        for (b = [0:30:330]) {\n            rotate([a, 0, 0])\n                rotate([0, b, 0])\n                    translate([0, 0, 21])\n                        // Spike base\n                        cylinder(h = 3, d1 = 3, d2 = 2, $fn = 12);\n        }\n    }\n}\n\nmodule top_crown() {\n    // Four stubby lobes at top\n    for (rot = [0:90:270]) {\n        rotate([0, 0, rot])\n            translate([0, 12, 20])\n                scale([1, 0.6, 0.5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 5, d = 10, $fn = 8);\n    }\n}\n\nmodule bottom_nub() {\n    // Small remnant of stem\n    translate([0, 0, -24])\n        cylinder(h = 4, d = 6, $fn = 16);\n}\n\nmodule equator_seam() {\n    // Slight raised seam around equator\n    rotate_extrude()\n        translate([20.5, 0, 0])\n            square([1, 1]);\n}\n\n// Build the complete pulasan\nunion() {\n    // Outer shell with spikes\n    union() {\n        fruit_body();\n        skin_spikes();\n    }\n\n    // Crown lobes\n    top_crown();\n\n    // Bottom nub\n    bottom_nub();\n\n    // Equator seam\n    equator_seam();\n}",
    "renders": true
  },
  {
    "fruit": "longkong",
    "openscad_code": "// Longkong (Thai Longan) - Realistic Style, Medium Complexity\n// Size: ~75mm max dimension\n\n// Main fruit body\nmodule fruit_body() {\n    difference() {\n        // Main sphere with slight squash\n        scale([1, 1, 0.9]) \n            sphere(d=45, $fn=60);\n        \n        // Bottom indent\n        translate([0, 0, -20])\n            cylinder(h=10, r1=8, r2=0, $fn=30);\n        \n        // Top indent for stem\n        translate([0, 0, 22])\n            cylinder(h=8, r1=0, r2=3, $fn=20);\n    }\n}\n\n// Rough skin texture using small spheres\nmodule skin_texture() {\n    for(i = [0:360:30]) {\n        rotate([0, 0, i])\n        for(j = [-40:5:40]) {\n            translate([sin(i+j)*22, cos(i+j)*22, j])\n            sphere(d=2.5, $fn=8);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 22])\n    rotate([0, 0, rand(0, 360)])\n    cylinder(h=15, r1=2, r2=1.5, $fn=12);\n}\n\n// Small bumps on surface\nmodule surface_bumps() {\n    for(i = [0:360:45]) {\n        rotate([0, 0, i])\n        for(j = [-30:10:30]) {\n            if(j != 0) {\n                translate([sin(i+j)*20, cos(i+j)*20, j])\n                sphere(d=1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Seed inside (for hollow printing)\nmodule seed() {\n    translate([0, 0, -10])\n    scale([0.4, 0.4, 0.6])\n    sphere(d=20, $fn=30);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main fruit\n        fruit_body();\n        \n        // Skin texture layer\n        translate([0, 0, 0])\n        skin_texture();\n        \n        // Additional surface details\n        surface_bumps();\n        \n        // Stem\n        stem();\n    }\n    \n    // Hollow out for printing\n    scale([0.85, 0.85, 0.8])\n    translate([0, 0, 0])\n    sphere(d=45, $fn=60);\n    \n    // Remove seed\n    seed();\n}\n\n// Helper for random values\nfunction rand(a, b) = a + (b - a) * (12345 % 100) / 100;",
    "renders": true
  },
  {
    "fruit": "mangaba",
    "openscad_code": "// Mangaba Fruit - Realistic Style, Medium Complexity\n// Dimensions: ~60mm length x ~50mm width x ~45mm height\n\n// Main fruit body with slight oval shape\nmodule fruit_body() {\n    // Ellipsoid base shape\n    scale([1, 0.9, 0.85])\n    sphere(d=45, $fn=64);\n    \n    // Add slight asymmetry for realism\n    translate([-5, 0, 5])\n    scale([0.15, 0.12, 0.08])\n    sphere(d=45, $fn=32);\n}\n\n// Stem with natural curvature\nmodule stem() {\n    // Main stem\n    translate([0, 0, 22])\n    rotate([10, 0, 5])\n    cylinder(h=12, d1=4, d2=2.5, $fn=16);\n    \n    // Stem base attachment\n    translate([0, 0, 20])\n    cylinder(h=3, d=6, $fn=16);\n}\n\n// Calyx (leafy part at top)\nmodule calyx() {\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([0, 8, 20])\n        rotate([90, 0, 0])\n        scale([1, 0.6, 0.2])\n        cylinder(h=8, d1=6, d2=2, $fn=3);\n    }\n}\n\n// Surface texture - small bumps for realism\nmodule surface_texture() {\n    for(i=[0:30:330]) {\n        for(j=[0:20:180]) {\n            rotate([j, 0, i])\n            translate([20, 0, 0])\n            sphere(d=1.2, $fn=8);\n        }\n    }\n}\n\n// Natural indentations\nmodule indentations() {\n    // Main indent\n    translate([0, -8, 15])\n    rotate([15, 0, 0])\n    scale([1.5, 1, 0.5])\n    sphere(d=8, $fn=32);\n    \n    // Secondary indents\n    translate([8, 5, 10])\n    sphere(d=4, $fn=16);\n    \n    translate([-10, -3, 8])\n    sphere(d=3, $fn=16);\n}\n\n// Bottom flattening for stability\nmodule flatten_base() {\n    translate([0, 0, -22])\n    cube([30, 30, 5], center=true);\n}\n\n// Assembly\nunion() {\n    // Main fruit body\n    difference() {\n        union() {\n            fruit_body();\n            surface_texture();\n        }\n        \n        // Remove indentations\n        indentations();\n        \n        // Flatten bottom\n        flatten_base();\n    }\n    \n    // Stem and calyx\n    union() {\n        stem();\n        calyx();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "pitanga",
    "openscad_code": "// Pitanga (Surinam cherry) – medium-complexity realistic style\n// Overall length ~75 mm, printable without supports\n\nmodule pitanga_berry() {\n    // Basic berry body: slightly flattened sphere\n    scale([1, 1, 0.8])\n    sphere(d = 25, $fn = 48);\n}\n\nmodule berry_ridges() {\n    // Create 8 longitudinal ridges\n    for (a = [0:22.5:157.5]) {\n        rotate([0, 0, a])\n        translate([0, 12.5, 0])\n        scale([0.15, 0.15, 1])\n        cylinder(h = 20, d1 = 1.5, d2 = 0.5, $fn = 8);\n    }\n}\n\nmodule calyx_dome() {\n    // Inverted dome at the top to fit stem base\n    translate([0, 0, 10])\n    difference() {\n        sphere(d = 10, $fn = 32);\n        translate([0, 0, 5])\n        sphere(d = 12, $fn = 32);\n    }\n}\n\nmodule sepals() {\n    // 8 small sepals around calyx\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n        translate([0, 5, 10])\n        rotate([0, -20, 0])\n        scale([0.4, 2, 0.1])\n        sphere(d = 6, $fn = 8);\n    }\n}\n\nmodule stem() {\n    // Short thick stem\n    translate([0, 0, 10])\n    cylinder(d1 = 3, d2 = 1.5, h = 10, $fn = 12);\n}\n\nmodule small_leaf() {\n    // Simple leaf on stem\n    rotate([0, 90, 0])\n    translate([0, 2.5, 0])\n    scale([0.6, 1.5, 0.1])\n    sphere(d = 8, $fn = 16);\n}\n\nmodule pitanga() {\n    union() {\n        // Main berry\n        pitanga_berry();\n        \n        // Ridges added\n        berry_ridges();\n        \n        // Calyx and sepals on top\n        calyx_dome();\n        sepals();\n        \n        // Stem\n        stem();\n        \n        // One leaf\n        rotate([0, 0, 15])\n        small_leaf();\n    }\n}\n\n// Render the complete fruit\npitanga();",
    "renders": true
  },
  {
    "fruit": "araca",
    "openscad_code": "// Araca (Guava) - Medium complexity realistic model\n// Optimized for 3D printing with no overhangs\n\n// Main parameters\nfruit_d = 45;\nstem_h = 8;\nstem_d = 6;\ncalyx_petal_count = 5;\ncalyx_petal_len = 8;\ncalyx_petal_w = 5;\nsurface_bumps = 40;\nwall_thickness = 2;\n\n// Colors (for preview)\n$fn = 32;\n\n// Main fruit body - slightly irregular sphere\nmodule fruit_body() {\n    difference() {\n        // Base sphere with slight flattening\n        scale([1, 1, 0.9])\n        sphere(d = fruit_d);\n        \n        // Surface indentations for realism\n        for(i = [0:surface_bumps-1]) {\n            rotate([0, 360*rand(i)/1, 360*i/surface_bumps])\n            translate([fruit_d/2*rand(i+1), 0, 0])\n            sphere(d = fruit_d/15);\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, fruit_d/2*0.9 + stem_h/2])\n    cylinder(h = stem_h, d1 = stem_d, d2 = stem_d*0.8);\n}\n\n// Calyx (bottom flower remnants)\nmodule calyx() {\n    translate([0, 0, -fruit_d/2*0.9])\n    rotate([180, 0, 0])\n    for(i = [0:calyx_petal_count-1]) {\n        rotate([0, 0, i*360/calyx_petal_count])\n        translate([calyx_petal_w/2, 0, 0])\n        cube([calyx_petal_w, calyx_petal_len, wall_thickness], center = true);\n    }\n}\n\n// Small surface details\nmodule surface_details() {\n    // Tiny bumps for texture\n    for(i = [0:surface_bumps/2-1]) {\n        rotate([180*rand(i+10), 360*rand(i+20)/1, 360*i/(surface_bumps/2)])\n        translate([fruit_d/2*rand(i+30), 0, 0])\n        sphere(d = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit\n    fruit_body();\n    \n    // Stem\n    stem();\n    \n    // Calyx at bottom\n    calyx();\n    \n    // Surface texture\n    surface_details();\n}\n\n// Helper random function\nfunction rand(n) = (n * 9301 + 49297) % 233280 / 233280;",
    "renders": true
  },
  {
    "fruit": "ubajay",
    "openscad_code": "// Ubajay (Allophylus edulis) - medium complexity realistic model\n// Size: ~70mm tall\n\n$fn = 32;\n\nmodule ubajay() {\n    union() {\n        // Trunk\n        translate([0, 0, 10])\n            scale([1, 0.8, 4])\n            rotate([0, 15, 0])\n            cylinder(h = 15, r = 5);\n        \n        // Main branches\n        for (i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([4, 0, 25])\n            rotate([30 + i/10, 0, 0])\n            cylinder(h = 20, r1 = 3, r2 = 1.5);\n        }\n        \n        // Secondary branches\n        for (i = [30:60:270]) {\n            rotate([0, 0, i])\n            translate([6, 0, 35])\n            rotate([45, 0, 20])\n            cylinder(h = 15, r1 = 2, r2 = 1);\n            \n            rotate([0, 0, i + 30])\n            translate([5, 0, 40])\n            rotate([30, 0, -20])\n            cylinder(h = 12, r1 = 1.5, r2 = 0.8);\n        }\n        \n        // Leaves - compound pinnate leaves\n        module leaf() {\n            difference() {\n                hull() {\n                    translate([-8, 0, 0])\n                    sphere(r = 0.8);\n                    translate([8, 0, 0])\n                    sphere(r = 0.8);\n                    translate([0, 3, 0])\n                    sphere(r = 0.5);\n                }\n                translate([0, 1.5, -0.5])\n                cube([16, 3, 1], center = true);\n            }\n        }\n        \n        // Leaf clusters\n        for (j = [0:45:315]) {\n            rotate([0, 0, j])\n            translate([8, 0, 45 + j/3])\n            rotate([60 - j/5, 0, j/2])\n            for (k = [0:3]) {\n                translate([k*2, 0, k*1.5])\n                rotate([0, 0, k*15])\n                scale([1, 0.7, 0.3])\n                leaf();\n            }\n        }\n        \n        // Additional leaves on lower branches\n        for (m = [15:60:255]) {\n            rotate([0, 0, m])\n            translate([10, 0, 30 + m/4])\n            rotate([45, 0, m/3])\n            for (n = [0:2]) {\n                translate([n*1.5, 0, n*1])\n                rotate([0, 0, n*20])\n                scale([0.8, 0.6, 0.25])\n                leaf();\n            }\n        }\n        \n        // Root flare\n        translate([0, 0, 5])\n        difference() {\n            cylinder(h = 5, r1 = 7, r2 = 5);\n            for (p = [0:45:315]) {\n                rotate([0, 0, p])\n                translate([5.5, 0, 2.5])\n                cube([2, 1, 5], center = true);\n            }\n        }\n        \n        // Small fruits (drupes)\n        module fruit() {\n            color(\"darkred\")\n            sphere(r = 1.2);\n        }\n        \n        // Fruit clusters\n        for (q = [0:72:359]) {\n            rotate([0, 0, q])\n            translate([6 + q/50, 0, 40 + q/10])\n            for (r = [0:2]) {\n                translate([r*2 - 2, 0, r*1.5])\n                fruit();\n            }\n        }\n    }\n}\n\n// Main assembly\nubajay();",
    "renders": true
  },
  {
    "fruit": "pitomba",
    "openscad_code": "// Pitomba fruit (Eugenia luschnathiana) - medium complexity realistic style\n// Overall dimensions: ~60mm diameter\n\n// Main fruit body\nmodule fruit_body() {\n    // Core sphere slightly flattened\n    scale([1, 1, 0.9])\n    sphere(d = 55, $fn = 64);\n}\n\n// Surface segmentation pattern\nmodule segments() {\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, 27])\n        scale([1, 0.15, 0.02])\n        sphere(d = 50, $fn = 6);\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 27])\n    cylinder(h = 3, d1 = 6, d2 = 8, $fn = 16);\n}\n\n// Main stem\nmodule stem() {\n    translate([0, 0, 30])\n    rotate([0, 0, 10])\n    cylinder(h = 12, d = 4, $fn = 12);\n    \n    // Small leaf attachment\n    translate([0, 2, 35])\n    rotate([90, 0, -20])\n    scale([1, 0.4, 1])\n    cylinder(h = 8, d = 6, $fn = 3);\n}\n\n// Surface texture - small bumps\nmodule texture() {\n    for(i = [0:15]) {\n        for(j = [0:7]) {\n            rotate([0, 0, i * 24])\n            translate([23 * cos(j * 24), 23 * sin(j * 24), 25 - j * 2])\n            sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Small calyx lobes at stem end\nmodule calyx() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([2, 0, 27.5])\n        rotate([90, 0, 0])\n        scale([0.5, 0.3, 1])\n        cylinder(h = 3, d = 4, $fn = 6);\n    }\n}\n\n// Slight indentation at bottom\nmodule bottom_indent() {\n    translate([0, 0, -27])\n    scale([1, 1, 0.3])\n    sphere(d = 8, $fn = 32);\n}\n\n// Combine all parts\nunion() {\n    fruit_body();\n    \n    difference() {\n        stem_base();\n        bottom_indent();\n    }\n    \n    stem();\n    calyx();\n    \n    // Add subtle surface details\n    difference() {\n        union() {\n            texture();\n            segments();\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "butia",
    "openscad_code": "// Realistic Butia Palm Fruit (Jelly Palm)\n// Medium complexity OpenSCAD model\n// Features: fruit cluster with individual drupes, stem detail, 3D printable\n\n// Main parameters\n$fn = 32;\nfruit_scale = 1;\nfruit_diameter = 12 * fruit_scale;\nstem_length = 40 * fruit_scale;\ncluster_radius = 25 * fruit_scale;\nwall_thickness = 1.2;\n\n// Create a single butia fruit (drupe)\nmodule single_fruit(diameter, seed_ratio) {\n    difference() {\n        // Main fruit body - slightly elongated sphere\n        scale([1, 1, 1.2])\n        sphere(d = diameter);\n        \n        // Small indent at top where stem attaches\n        translate([0, 0, diameter * 0.6])\n        cylinder(h = diameter * 0.3, r1 = diameter * 0.15, r2 = 0, $fn = 16);\n    }\n    \n    // Tiny stem remnant\n    translate([0, 0, diameter * 0.6])\n    cylinder(h = diameter * 0.2, r = diameter * 0.05, $fn = 8);\n}\n\n// Create seed inside fruit (for printing as hollow shell)\nmodule fruit_shell(outer_d, thickness) {\n    difference() {\n        // Outer shell\n        scale([1, 1, 1.2])\n        sphere(d = outer_d);\n        \n        // Inner hollow space\n        scale([1, 1, 1.2])\n        sphere(d = outer_d - thickness * 2);\n    }\n}\n\n// Main fruit cluster\nmodule fruit_cluster() {\n    // Central stem structure\n    color(\"saddlebrown\")\n    translate([0, 0, -stem_length/2])\n    cylinder(h = stem_length, r1 = 3, r2 = 2, $fn = 12);\n    \n    // Stem detail - fibrous texture rings\n    for(i = [1:3]) {\n        translate([0, 0, -stem_length/2 + i * 10])\n        cylinder(h = 2, r = 3.5, $fn = 12);\n    }\n    \n    // Fruit arrangement - golden yellow/orange drupes\n    color(\"goldenrod\")\n    for(i = [0:4]) {\n        // First ring of fruits\n        rotate([0, 0, i * 72])\n        translate([cluster_radius * 0.7, 0, 0])\n        rotate([90, 0, 0])\n        single_fruit(fruit_diameter, 0.7);\n        \n        // Second ring slightly offset\n        rotate([0, 0, i * 72 + 36])\n        translate([cluster_radius * 0.9, 0, -8])\n        rotate([100, 0, 0])\n        single_fruit(fruit_diameter * 0.9, 0.7);\n        \n        // Top fruits\n        rotate([0, 0, i * 72 + 18])\n        translate([cluster_radius * 0.5, 0, 12])\n        rotate([60, 0, 0])\n        single_fruit(fruit_diameter * 0.8, 0.7);\n    }\n    \n    // Center top fruit\n    translate([0, 0, 15])\n    rotate([0, 0, 0])\n    single_fruit(fruit_diameter * 1.1, 0.7);\n}\n\n// Base with stem connection for stability\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = 5, r = 8, $fn = 32);\n        \n        // Hole for support material removal\n        cylinder(h = 5, r = 4, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit cluster\n    fruit_cluster();\n    \n    // Base at bottom\n    translate([0, 0, -stem_length/2 - 2.5])\n    base();\n    \n    // Additional small fruits hanging lower\n    color(\"goldenrod\")\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([cluster_radius * 0.3, 0, -25])\n        rotate([120, 0, 0])\n        single_fruit(fruit_diameter * 0.7, 0.7);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "pequi",
    "openscad_code": "// Pequi (Caryocar brasiliense) - Realistic medium complexity model\n// Size: ~70mm diameter\n\n// Basic parameters\n$fn = 36;\npequi_radius = 35;\n\n// Main body with characteristic pequi shape\nmodule pequi_body() {\n    // Main rounded body\n    difference() {\n        scale([1, 1, 1.2])\n            sphere(r=pequi_radius);\n        \n        // Flatten top slightly\n        translate([0, 0, pequi_radius*1.1])\n            cylinder(r=pequi_radius*1.1, h=pequi_radius*0.5, $fn=64);\n    }\n}\n\n// Create the characteristic \"spines\" or ridges\nmodule body_ridges() {\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, -pequi_radius*0.5])\n                scale([1, 0.15, 1])\n                    cylinder(r=pequi_radius*0.95, h=pequi_radius*2);\n    }\n}\n\n// Pequi has 4-5 large \"valves\" or segments\nmodule segments() {\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, -pequi_radius*0.2])\n                scale([0.9, 0.9, 1.1])\n                    sphere(r=pequi_radius*0.85);\n    }\n}\n\n// Create the woody shell texture\nmodule shell_texture() {\n    difference() {\n        pequi_body();\n        \n        // Add small pits for texture\n        for(i = [0:15:359]) {\n            for(j = [-30:15:30]) {\n                rotate([0, j, i])\n                    translate([pequi_radius*0.9, 0, pequi_radius*0.4*sin(j)])\n                        sphere(r=1.5);\n            }\n        }\n    }\n}\n\n// Top crown where fruit opens\nmodule top_crown() {\n    difference() {\n        translate([0, 0, pequi_radius*1.1])\n            cylinder(r=pequi_radius*0.6, h=pequi_radius*0.3);\n        \n        // Central cavity\n        translate([0, 0, pequi_radius*1.1])\n            cylinder(r=pequi_radius*0.3, h=pequi_radius*0.4);\n        \n        // Segment lines\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n                translate([0, 0, pequi_radius*1.1])\n                    cube([pequi_radius*0.6, 1, pequi_radius*0.3], center=true);\n        }\n    }\n}\n\n// Internal edible part (arils)\nmodule edible_arils() {\n    color(\"yellow\")\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n            translate([pequi_radius*0.4, 0, pequi_radius*0.2])\n                scale([0.7, 0.4, 0.6])\n                    sphere(r=pequi_radius*0.25);\n    }\n}\n\n// Main assembly\nunion() {\n    // Outer shell with texture\n    shell_texture();\n    \n    // Body ridges for realism\n    body_ridges();\n    \n    // Segments\n    segments();\n    \n    // Top crown\n    top_crown();\n    \n    // Internal parts (remove for printing)\n    // edible_arils();\n}\n\n// Add small stem\ntranslate([0, 0, pequi_radius*1.4])\n    cylinder(r1=4, r2=2, h=8);",
    "renders": true
  },
  {
    "fruit": "buriti",
    "openscad_code": "// Buriti Palm Fruit - Realistic Style, Medium Complexity\n// Overall dimensions: ~70mm height, includes fruit body and leaf crown\n\n$fn = 36; // Smooth curves for 3D printing\n\n// Main parameters\nfruit_body_d = 45;\nfruit_body_h = 40;\nleaf_length = 35;\nleaf_width = 8;\nleaf_thickness = 1.5;\nscale_tip = 0.2; // Scale factor for leaf tips\nwall = 2; // 3D printable wall thickness\n\n// Main fruit body (oval shape)\nmodule fruit_body() {\n    difference() {\n        // Outer shell\n        scale([1, 1, 0.9])\n            sphere(d = fruit_body_d);\n        \n        // Hollow inside\n        scale([1 - wall/fruit_body_d, 1 - wall/fruit_body_d, 0.9 - wall/fruit_body_d])\n            sphere(d = fruit_body_d);\n        \n        // Bottom flat cut for stability\n        translate([0, 0, -fruit_body_d/2])\n            cube([fruit_body_d * 2, fruit_body_d * 2, fruit_body_d], center = true);\n    }\n}\n\n// Individual scale/leaf segment\nmodule scale_segment(angle, length) {\n    rotate([0, 0, angle])\n        translate([0, fruit_body_d/2 - 2, 0])\n            linear_extrude(height = leaf_thickness, center = true)\n                polygon(points = [\n                    [0, 0],\n                    [-leaf_width/2, 0],\n                    [-leaf_width/2 * scale_tip, -length],\n                    [0, -length - 3],\n                    [leaf_width/2 * scale_tip, -length],\n                    [leaf_width/2, 0]\n                ]);\n}\n\n// Crown of scales/leaves at top\nmodule scale_crown() {\n    for (i = [0:15:360-15]) {\n        scale_segment(i, leaf_length);\n    }\n    \n    // Inner ring of shorter scales\n    for (i = [7.5:15:360-7.5]) {\n        scale_segment(i, leaf_length * 0.7);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_texture() {\n    for (i = [0:30:330]) {\n        for (j = [0:30:150]) {\n            rotate([0, j, i])\n                translate([0, 0, -fruit_body_h/2 + 5 + j/5])\n                    sphere(d = 2);\n        }\n    }\n}\n\n// Stem stub at bottom\nmodule stem_stub() {\n    cylinder(h = 5, d1 = 8, d2 = 6);\n}\n\n// Assembly\ntranslate([0, 0, fruit_body_h/2]) {\n    union() {\n        // Main fruit body with texture\n        union() {\n            fruit_body();\n            surface_texture();\n        }\n        \n        // Crown of scales on top\n        translate([0, 0, fruit_body_h/2 - 3])\n            scale_crown();\n            \n        // Stem stub at bottom\n        translate([0, 0, -fruit_body_h/2])\n            stem_stub();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "acerola",
    "openscad_code": "// Acerola (Barbados cherry) – medium-complexity, realistic style\n// Overall height ~60 mm, printable without support\n\n$fn = 36;  // smooth curves\n\n// Main body\nmodule acerola_body() {\n    difference() {\n        // Core cherry shape\n        sphere(d = 30);\n\n        // Top dimple\n        translate([0, 0, 15])\n            sphere(d = 9);\n\n        // Bottom dimple\n        translate([0, 0, -15])\n            sphere(d = 7);\n    }\n}\n\n// Crown ridges\nmodule ridges() {\n    for (a = [0 : 20 : 340]) {\n        rotate([0, 0, a])\n            translate([0, 0, 14])\n                scale([1, 0.35, 0.9])\n                    sphere(d = 8);\n    }\n}\n\n// Calyx lobes\nmodule calyx_lobe() {\n    translate([0, 0, 15])\n        rotate_extrude(angle = 45, $fn = 8)\n            translate([3.5, 0, 0])\n                polygon(points=[[0,0],[1.5,-4],[0,-8]]);\n}\n\nmodule calyx() {\n    for (a = [0 : 72 : 360])\n        rotate([0, 0, a])\n            calyx_lobe();\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20])\n        cylinder(h = 12, d1 = 2.5, d2 = 2);\n}\n\n// Surface bumps for realism\nmodule bumps() {\n    for (a = [0 : 45 : 359])\n        for (b = [-45 : 30 : 45]) {\n            rotate([b, 0, a])\n                translate([0, 0, 15])\n                    sphere(d = 1.2);\n        }\n}\n\n// Final union\nunion() {\n    acerola_body();\n    ridges();\n    calyx();\n    stem();\n    bumps();\n}",
    "renders": true
  },
  {
    "fruit": "ciruela",
    "openscad_code": "// OpenSCAD Realistic Ciruela (Plum)\n// Medium complexity, 3D-printable, ~55 mm tall\n\n$fn = 36;               // General smoothness\nfruit_color = \"#5e2a5e\";\n\nmodule stem_base() {\n    // Cylindrical stem base, 2 mm thick walls\n    difference() {\n        cylinder(h = 6, d = 7.5, center = true);\n        translate([0, 0, 0.2])\n            cylinder(h = 6.4, d = 3.5, center = true);\n    }\n}\n\nmodule stem() {\n    // Main stem, 5 mm long\n    translate([0, 0, 3])\n        rotate([0, 0, rand(0, 5)])\n            cylinder(h = 5, d1 = 3, d2 = 2, center = false);\n}\n\nmodule leaf() {\n    // Small oval leaf with slight twist\n    scale([1.2, 0.6, 0.3])\n        rotate([rand(-5, 5), rand(5, 8), rand(10, 20)])\n            sphere(d = 10);\n}\n\nmodule fruit_body() {\n    // Main plum body – elongated sphere\n    scale([1.1, 1, 1.25])\n        sphere(d = 45);\n}\n\nmodule suture_line() {\n    // Shallow groove from top to bottom\n    for (i = [-22.5 : 0.5 : 22.5])\n        translate([0, 0, i])\n            scale([1.05, 0.96, 0.98])\n                sphere(d = 45);\n}\n\nmodule blossom_end() {\n    // Small dimple at bottom\n    translate([0, 0, -22])\n        sphere(d = 6, $fn = 24);\n}\n\nmodule ciruela() {\n    color(fruit_color) {\n        union() {\n            difference() {\n                fruit_body();\n                // Remove suture groove\n                intersection() {\n                    fruit_body();\n                    suture_line();\n                }\n                // Blossom end dimple\n                translate([0, 0, -24])\n                    sphere(d = 8);\n            }\n            \n            // Stem assembly on top\n            translate([0, 0, 22.5])\n                union() {\n                    stem_base();\n                    stem();\n                    // Add two small leaves\n                    translate([3.5, 0, 7])\n                        leaf();\n                    translate([-3.5, 0, 7])\n                        rotate([0, 0, 180])\n                            leaf();\n                }\n        }\n    }\n}\n\n// Utility for slight random variation\nfunction rand(min, max) = min + (max - min) * 0.2;\n\n// Render the complete fruit\nciruela();",
    "renders": true
  },
  {
    "fruit": "mombin",
    "openscad_code": "// Mombin (Spondias purpurea) - Realistic medium complexity model\n// Wall thickness: 2mm for 3D printing\n\nmodule mombin_fruit() {\n    // Main fruit body - slightly ovoid shape\n    scale([1, 1.2, 1]) \n    sphere(d=45);\n    \n    // Add slight bulge for realistic shape\n    translate([0, -5, 5])\n    scale([1.1, 1.3, 1.1])\n    sphere(d=40);\n}\n\nmodule stem_base() {\n    // Stem connection point\n    translate([0, 0, 25])\n    cylinder(h=8, d1=8, d2=5);\n    \n    // Stem itself\n    translate([0, 0, 33])\n    cylinder(h=15, d=5);\n    \n    // Small leaf scar details\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([4, 0, 33])\n        scale([0.3, 0.1, 0.3])\n        sphere(d=3);\n    }\n}\n\nmodule surface_texture() {\n    // Small surface bumps for realistic texture\n    difference() {\n        union() {\n            for(i=[0:30:360]) {\n                rotate([0, 0, i])\n                for(j=[0:15:60]) {\n                    rotate([0, j, 0])\n                    translate([20, 0, 10])\n                    sphere(d=1.5);\n                }\n            }\n        }\n        \n        // Hollow out interior for printing\n        sphere(d=41);\n    }\n}\n\nmodule calyx_remains() {\n    // Remains of calyx at top\n    translate([0, 0, 23])\n    difference() {\n        cylinder(h=2, d=12);\n        cylinder(h=3, d=8);\n    }\n    \n    // Calyx lobes\n    for(i=[0:72:360]) {\n        rotate([0, 0, i])\n        translate([6, 0, 23])\n        rotate([0, -90, 0])\n        cylinder(h=3, d1=2, d2=1);\n    }\n}\n\nmodule longitudinal_ridges() {\n    // Subtle longitudinal ridges\n    for(i=[0:30:360]) {\n        rotate([0, 0, i]) {\n            translate([22, -1, 0])\n            cube([2, 2, 40]);\n            \n            translate([22, -0.5, -10])\n            rotate([0, 5, 0])\n            cube([1.5, 1, 50]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollow fruit body\n    difference() {\n        union() {\n            mombin_fruit();\n            calyx_remains();\n            longitudinal_ridges();\n        }\n        sphere(d=41);\n    }\n    \n    // Solid parts\n    stem_base();\n    \n    // Surface texture layer\n    surface_texture();\n}\n\n// Position for printing\ntranslate([0, 0, -25])\nrotate([0, 180, 0])",
    "renders": true
  },
  {
    "fruit": "jocote",
    "openscad_code": "// Jocote (Spondias purpurea) – medium-complexity, 3D-printable\n// Overall height ≈ 65 mm, max diameter ≈ 40 mm\n\n$fn = 48;\nwall = 1.5;\n\nmodule jocote_body() {\n    // Main ellipsoid body\n    translate([0,0,30]) scale([1, 0.9, 1.3]) sphere(d = 40);\n    \n    // Slight ridge along the “seam”\n    for (i = [-1,1]) {\n        translate([0, i*1.5, 30]) rotate([0,90,0]) \n            cylinder(h = 52, d = 3, center = true);\n    }\n}\n\nmodule stem() {\n    // Short woody stem\n    translate([0,0,62]) rotate([90,0,0])\n        cylinder(h = 6, d1 = 6, d2 = 4);\n    \n    // Tiny calyx lobes\n    for (a = [0:60:359]) {\n        rotate([90,0,a]) translate([0,0,65]) \n            rotate([0,-20,0]) cylinder(h = 2.5, d = 2.5);\n    }\n}\n\nmodule seed_chamber() {\n    // Central cavity for realism & material saving\n    translate([0,0,30]) scale([0.6,0.5,0.7])\n        sphere(d = 28, $fn = 24);\n}\n\nmodule surface_spots() {\n    // Random lenticel-like bumps\n    spots = [\n        [10, 6, 55], [-8, -7, 48], [7, -9, 60],\n        [-9, 8, 40], [12, -4, 52], [-6, 12, 45]\n    ];\n    for (p = spots) {\n        translate(p) sphere(d = 2.5);\n    }\n}\n\n// Assemble the solid fruit\nunion() {\n    difference() {\n        jocote_body();\n        seed_chamber();\n    }\n    stem();\n    surface_spots();\n}",
    "renders": true
  },
  {
    "fruit": "nance",
    "openscad_code": "// Realistic Nance (medium complexity) – ~80 mm tall\n// All dimensions in millimetres\n\n$fn = 48;           // Smooth curves for printing\n\n// Wall thickness for printability\nwall = 1.6;\n\n// Main stem\nmodule stem(h=55, d=6){\n    cylinder(h=h, d=d, $fn=24);\n    // Slight taper\n    translate([0,0,h-1])\n        cylinder(h=1, d1=d, d2=d*0.9, $fn=24);\n}\n\n// Petiole (leaf stalk) attaches leaf to stem\nmodule petiole(len=12, thick=1.2){\n    rotate([0,90,0])\n        cylinder(h=len, d=thick, $fn=12);\n}\n\n// Single leaflet with realistic elliptical blade\nmodule leaflet(l=28, w=18, thick=wall){\n    difference(){\n        // Blade body\n        scale([1, w/l, 1])\n            sphere(d=l);\n        \n        // Taper tip\n        translate([ l/2 - 2 , 0 , 0 ])\n            rotate([0,90,0])\n                cylinder(h=w, d1=w, d2=0, $fn=3);\n        \n        // Mid-rib groove (thin)\n        translate([0,0,-thick/2 - 0.1])\n            cube([l*0.9, 1.4, thick+0.2], center=true);\n    }\n    // Petiole\n    translate([-l/2, 0, 0])\n        petiole(len=10, thick=1.2);\n}\n\n// Compound leaf – 4 leaflets arranged pinnately\nmodule compound_leaf(){\n    // Central rachis\n    rachis_len = 30;\n    color(\"forestgreen\")\n    rotate([0,90,0])\n        cylinder(h=rachis_len, d=1.6, $fn=8);\n    \n    // Leaflets\n    for(i=[0:3]){\n        angle = (i%2==0? 1:-1) * 45;     // Alternate sides\n        translate([0, 0, (i-1.5)*7.5]){\n            rotate([0,0, angle])\n                translate([0, 7, 0])\n                    rotate([0, 90, 0])\n                        leaflet(l=25-i*2, w=16-i*2);\n        }\n    }\n}\n\n// Whole nance plant\nmodule nance(){\n    // Stem\n    color(\"saddlebrown\")\n    stem(h=55, d=6);\n    \n    // Attach leaves – whorled at nodes\n    for(h=[10:15:50]){\n        for(a=[0:120:359]){\n            translate([0,0,h])\n                rotate([0,0,a])\n                    translate([6,0,0])\n                        rotate([0,-30,0])\n                            compound_leaf();\n        }\n    }\n    \n    // Inflorescence – simple raceme of tiny flowers\n    color(\"goldenrod\")\n    translate([0,0,58])\n        for(i=[0:10]){\n            rotate([0,0,i*36])\n                translate([8,0,0])\n                    sphere(d=3);\n        }\n}\n\n// Render\nnance();",
    "renders": true
  },
  {
    "fruit": "sapote",
    "openscad_code": "$fn = 36;\n\n// Overall scale\nscale(0.5)\nunion() {\n\n    // Main fruit body – slightly flattened ellipsoid\n    color(\"saddlebrown\")\n    difference() {\n        scale([1.0, 0.9, 0.8])\n            sphere(d = 80);\n\n        // Small cavity at stem end\n        translate([0, 0, 30])\n            cylinder(h = 10, r1 = 8, r2 = 0, $fn = 6);\n    }\n\n    // Stem stub\n    color(\"darkolivegreen\")\n    translate([0, 0, 33])\n    difference() {\n        cylinder(h = 12, r1 = 6, r2 = 5);\n        translate([0, 0, -1])\n            cylinder(h = 14, r1 = 4, r2 = 4);\n    }\n\n    // Bottom bump\n    color(\"saddlebrown\")\n    translate([0, 0, -40])\n    sphere(d = 18);\n\n    // Surface texture: shallow dimples\n    module dimple(a, b) {\n        rotate([b, 0, a])\n        translate([0, 0, 39.9])\n        sphere(d = 3.5, $fn = 12);\n    }\n    color(\"saddlebrown\")\n    difference() {\n        sphere(d = 80.1);\n        for (a = [0:30:330])\n            for (b = [20:20:160])\n                dimple(a, b);\n    }\n\n    // Calyx lobes (5 small petals around stem)\n    module calyx_lobe(angle) {\n        color(\"forestgreen\")\n        rotate([0, 0, angle])\n        translate([0, 7, 31])\n        rotate([90, 0, 0])\n        scale([1.5, 1, 0.5])\n        cylinder(h = 6, r1 = 3, r2 = 1);\n    }\n    for (i = [0:72:360-72]) {\n        calyx_lobe(i);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "mameysapote",
    "openscad_code": "// Mamey Sapote 3D Model - Realistic Style\n// Dimensions: ~70mm length, 55mm diameter\n\n$fn = 50;\n\n// Main body - ellipsoid shape\nmodule mamey_body() {\n    // Base ellipsoid for main fruit body\n    scale([1, 1.2, 1.3]) sphere(25);\n}\n\n// Pointed tip at the bottom\nmodule pointed_tip() {\n    translate([0, 0, -32.5])\n        cylinder(h=15, r1=5, r2=0);\n}\n\n// Stem connector area\nmodule stem_base() {\n    difference() {\n        translate([0, 0, 32.5])\n            cylinder(h=8, r1=15, r2=12);\n        \n        // Hollow out stem area\n        translate([0, 0, 32.5])\n            cylinder(h=10, r1=8, r2=5);\n    }\n}\n\n// Surface texture - raised bumps and ridges\nmodule surface_texture() {\n    // Create bump pattern\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([20 + sin(i*5)*3, 0, -25 + i*3.5])\n            rotate([90, 0, 0])\n                scale([1.2, 1, 0.8])\n                    sphere(1.5);\n    }\n    \n    // Vertical ridges\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([22, 0, 0])\n            scale([0.5, 1, 1.3])\n                sphere(3);\n    }\n}\n\n// Natural indentations and imperfections\nmodule indentations() {\n    difference() {\n        union() {\n            // Main body\n            mamey_body();\n            pointed_tip();\n            stem_base();\n            surface_texture();\n        }\n        \n        // Small indentations\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60 + 15])\n            translate([20, 0, -15 + i*10])\n                sphere(3.5);\n        }\n        \n        // Larger indent near stem\n        translate([0, 0, 25])\n            sphere(8);\n    }\n}\n\n// Calyx remnants at top\nmodule calyx() {\n    difference() {\n        translate([0, 0, 36])\n            cylinder(h=3, r1=12, r2=15);\n        \n        // Cut star pattern\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, -15, 35])\n                cube([30, 30, 5], center=true);\n        }\n    }\n}\n\n// Final assembly\nunion() {\n    indentations();\n    calyx();\n    \n    // Ensure printable bottom\n    translate([0, 0, -35])\n        cube([50, 50, 1], center=true);\n}",
    "renders": true
  },
  {
    "fruit": "green",
    "openscad_code": "// Realistic Green Pepper (Bell Pepper) - Medium Complexity\n// 3D printable with no overhangs, approximately 60mm height\n\nmodule pepper_body() {\n    // Main body - slightly flattened sphere\n    scale([1, 0.9, 1.1]) \n    sphere(d=35, $fn=50);\n}\n\nmodule pepper_top() {\n    // Top crown with 4 lobes\n    for (i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 8, 17])\n        rotate([45, 0, 0])\n        scale([1.2, 0.8, 1])\n        sphere(d=12, $fn=15);\n    }\n}\n\nmodule bottom_bumps() {\n    // 3 small bumps at bottom\n    for (i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, 10, -16])\n        sphere(d=5, $fn=12);\n    }\n}\n\nmodule stem_base() {\n    // Stem connection point\n    translate([0, 0, 19])\n    cylinder(h=5, d1=8, d2=6, $fn=20);\n}\n\nmodule stem() {\n    // Curved stem\n    translate([0, 0, 24])\n    rotate([0, 0, 10])\n    cylinder(h=15, d1=5, d2=3, $fn=8);\n    \n    // Small leaf\n    translate([2, 2, 30])\n    rotate([0, 15, 45])\n    scale([1, 0.5, 0.1])\n    sphere(d=8, $fn=12);\n}\n\nmodule surface_details() {\n    // Vertical ridges for texture\n    for (i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([15, 0, 0])\n        scale([0.3, 1, 1])\n        sphere(d=30, $fn=6);\n    }\n}\n\n// Color - emerald green\ncolor(\"forestgreen\") {\n    union() {\n        // Main pepper parts\n        pepper_body();\n        pepper_top();\n        bottom_bumps();\n        \n        // Stem assembly\n        stem_base();\n        stem();\n        \n        // Surface texture\n        surface_details();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "chico",
    "openscad_code": "// OpenSCAD Realistic Chico (Medium Complexity)\n// Height ~80 mm, base diameter ~40 mm\n// Designed for 3D printing – no overhangs ≥ 50°\n\n// Global parameters\n$fn = 64;               // Smoother curves\nbody_h = 55;            // Overall body height\nbody_r = 20;            // Main radius\nhead_r = 18;            // Head sphere radius\nneck_h = 6;             // Neck cylinder\nneck_r = 10;\narm_len = 25;\narm_r = 7;\nleg_len = 20;\nleg_r = 9;\nhat_h = 15;\nhat_r = 14;\n\n// Utility module: rounded top cylinder\nmodule rounded_cyl(h, r, r_top = r) {\n    hull() {\n        cylinder(h = h, r1 = r, r2 = r);\n        translate([0, 0, h]) sphere(r = r_top);\n    }\n}\n\n// Main body (torso + hips)\nmodule torso() {\n    union() {\n        // Upper torso\n        rounded_cyl(body_h * 0.65, body_r, body_r * 0.9);\n        // Wider hips\n        translate([0, 0, -body_h * 0.35])\n            rounded_cyl(body_h * 0.35, body_r * 1.1, body_r);\n    }\n}\n\n// Head with simple facial features\nmodule head() {\n    union() {\n        // Basic sphere\n        sphere(r = head_r);\n        \n        // Eyes (indentations)\n        for (x = [-head_r * 0.33, head_r * 0.33])\n            translate([x, head_r * 0.6, head_r * 0.2])\n                difference() {\n                    sphere(r = head_r * 0.15);\n                    translate([0, 0, 1])    // Flatten back\n                        cube([head_r * 0.3, head_r * 0.3, 2], center = true);\n                }\n        \n        // Nose\n        translate([0, head_r * 0.8, head_r * 0.0])\n            rotate([90, 0, 0])\n                cylinder(h = head_r * 0.25, r1 = head_r * 0.1, r2 = 0);\n        \n        // Mouth line\n        translate([0, head_r * 0.9, head_r * 0.1])\n            rotate([0, 90, 0])\n                cylinder(h = head_r * 0.4, r = 1.2);\n    }\n}\n\n// Simple beanie cap\nmodule hat() {\n    difference() {\n        union() {\n            // Main cap\n            cylinder(h = hat_h, r = hat_r);\n            // Pom-pom\n            translate([0, 0, hat_h])\n                sphere(r = hat_r * 0.4);\n        }\n        // Inside cavity for fit\n        translate([0, 0, -1])\n            cylinder(h = hat_h + 2, r = head_r * 0.9);\n    }\n}\n\n// Single arm\nmodule arm() {\n    hull() {\n        cylinder(h = arm_len * 0.7, r = arm_r);\n        translate([0, 0, arm_len * 0.7])\n            sphere(r = arm_r * 0.9);\n    }\n}\n\n// Single leg\nmodule leg() {\n    union() {\n        cylinder(h = leg_len * 0.9, r = leg_r);\n        translate([0, 0, leg_len * 0.9])\n            sphere(r = leg_r * 1.05);\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_len + body_h * 0.5]) {\n    // Hat on head\n    translate([0, 0, head_r + hat_h * 0.5]) hat();\n    \n    // Head on neck\n    translate([0, 0, body_h * 0.5 + neck_h + head_r]) head();\n    \n    // Neck\n    translate([0, 0, body_h * 0.5 + neck_h * 0.5])\n        cylinder(h = neck_h, r = neck_r);\n    \n    // Torso\n    torso();\n    \n    // Arms\n    for (side = [-1, 1])\n        translate([side * (body_r + arm_r * 0.4), 0, body_h * 0.3])\n            rotate([0, side * 20, 0])\n                arm();\n    \n    // Legs\n    for (side = [-1, 1])\n        translate([side * (body_r * 0.45), 0, -body_h * 0.35 - leg_len * 0.5])\n            leg();\n}",
    "renders": true
  },
  {
    "fruit": "abiu",
    "openscad_code": "// Realistic Abiu Fruit Model for 3D Printing\n// Medium complexity using basic OpenSCAD primitives\n\n// Overall dimensions: ~60mm height, ~50mm diameter\n// Designed for FDM printing with no overhangs\n\n// Main fruit body - slightly oval shape\nmodule fruit_body() {\n    difference() {\n        union() {\n            // Main ellipsoid body\n            scale([1, 1, 1.1]) \n                sphere(d=45, $fn=64);\n            \n            // Slight bulge at bottom for realistic shape\n            translate([0, 0, -15])\n                scale([1.05, 1.05, 0.6])\n                    sphere(d=45, $fn=64);\n        }\n        \n        // Slight indent at top where stem attaches\n        translate([0, 0, 22])\n            rotate([0, 180, 0])\n                cylinder(h=10, r1=8, r2=12, $fn=32);\n    }\n}\n\n// Stem with realistic taper\nmodule stem() {\n    color(\"saddlebrown\")\n    translate([0, 0, 25])\n        cylinder(h=12, r1=3.5, r2=2.5, $fn=16);\n}\n\n// Small leaf attached to stem\nmodule leaf() {\n    color(\"forestgreen\")\n    translate([5, 0, 30])\n        rotate([90, 0, 30])\n            scale([1, 0.4, 0.1])\n                sphere(d=12, $fn=32);\n}\n\n// Create realistic skin texture with small bumps\nmodule skin_bumps() {\n    // Generate random-like bumps using golden angle\n    for(i = [0:89]) {\n        rotate([0, 0, i * 137.508]) {\n            rotate([i * 1.5, 0, 0]) {\n                // Position bumps on surface\n                translate([0, 0, 22.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=0.3, r=0.8, $fn=8);\n            }\n        }\n    }\n}\n\n// Main fruit with skin texture\nmodule textured_fruit() {\n    difference() {\n        fruit_body();\n        \n        // Create slight surface variation for realism\n        scale([0.98, 0.98, 0.98])\n            skin_bumps();\n    }\n}\n\n// Bottom navel feature\nmodule navel() {\n    color(\"darkgoldenrod\")\n    translate([0, 0, -22.5])\n        difference() {\n            cylinder(h=2, r=3, $fn=16);\n            cylinder(h=3, r=2, $fn=16);\n        }\n}\n\n// Main assembly\nunion() {\n    // Main fruit body with realistic color\n    color(\"gold\") \n    textured_fruit();\n    \n    // Stem assembly\n    stem();\n    leaf();\n    \n    // Bottom navel\n    navel();\n    \n    // Very subtle vertical ridges for realism\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            color(\"goldenrod\")\n            translate([0, 21.5, 0])\n                scale([0.5, 1, 1])\n                    cube([3, 1, 40], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "pouteria",
    "openscad_code": "// Pouteria (sapodilla-like fruit) realistic medium-complexity model\n// Overall size ~70 mm tall\n\n$fn = 50;  // smooth curves\n\nmodule pouteria_fruit() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 1.2, 1.3])\n            sphere(d=40, center=true);\n\n        // Flatten bottom slightly\n        translate([0, 0, -22])\n            cube([50, 50, 10], center=true);\n\n        // Slight indent at stem end\n        translate([0, 0, 22])\n            sphere(d=12, center=true);\n    }\n\n    // Tiny stem stub\n    translate([0, 0, 25])\n        cylinder(d1=4, d2=2, h=4, center=false);\n}\n\nmodule pouteria_skin_texture() {\n    // Small bumps across surface\n    for (phi = [10:20:170]) {\n        for (theta = [0:30:350]) {\n            translate([\n                20 * sin(phi) * cos(theta),\n                24 * sin(phi) * sin(theta),\n                26 * cos(phi) - 5\n            ]) {\n                scale([1, 1.2, 0.7])\n                    sphere(d=1.6);\n            }\n        }\n    }\n}\n\nmodule pouteria() {\n    union() {\n        pouteria_fruit();\n        pouteria_skin_texture();\n    }\n}\n\n// Center and render\ntranslate([0, 0, 0])\n    pouteria();",
    "renders": true
  },
  {
    "fruit": "lucuma",
    "openscad_code": "// Lucuma - medium complexity realistic style\n// Overall size ~60mm diameter\n\n// Main parameters\n$fn = 32;\nfruit_diameter = 55;\nstem_length = 8;\nstem_diameter = 4;\n\n// Main fruit body (ovoid shape)\nmodule lucuma_body() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 0.85, 1.1])\n            sphere(d = fruit_diameter);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -fruit_diameter*0.55])\n            cube([fruit_diameter*1.2, fruit_diameter*1.2, fruit_diameter*0.3], center = true);\n    }\n}\n\n// Stem at top\nmodule stem() {\n    translate([0, 0, fruit_diameter*0.55])\n        cylinder(h = stem_length, d1 = stem_diameter, d2 = stem_diameter*0.7);\n}\n\n// Surface texture - create small bumps in a grid pattern\nmodule surface_bumps() {\n    bump_height = 0.8;\n    bump_diameter = 2.5;\n    rows = 12;\n    \n    // Generate bumps in spiral pattern\n    for (i = [0:rows-1]) {\n        angle = i * 360 / rows;\n        lat = i * 180 / rows - 90;\n        \n        for (j = [0:8]) {\n            lon = j * 45;\n            bump_x = cos(lat) * cos(lon + angle) * (fruit_diameter/2 - 1);\n            bump_y = cos(lat) * sin(lon + angle) * (fruit_diameter/2 - 1) * 0.85;\n            bump_z = sin(lat) * (fruit_diameter/2 - 1) * 1.1;\n            \n            translate([bump_x, bump_y, bump_z])\n                sphere(d = bump_diameter);\n        }\n    }\n}\n\n// Natural seam lines\nmodule seam_lines() {\n    seam_depth = 0.5;\n    seam_width = 1.5;\n    \n    // Vertical seam from stem to bottom\n    rotate([0, 0, 0])\n        translate([0, -seam_width/2, -fruit_diameter/2])\n            cube([seam_width, seam_width, fruit_diameter]);\n    \n    rotate([0, 0, 180])\n        translate([0, -seam_width/2, -fruit_diameter/2])\n            cube([seam_width, seam_width, fruit_diameter]);\n    \n    // Horizontal seam around middle\n    rotate([90, 0, 0])\n        translate([0, 0, -seam_width/2])\n            cylinder(h = seam_width, r = fruit_diameter/2 - 1, center = true);\n}\n\n// Calyx remnants at stem base\nmodule calyx() {\n    calyx_size = 3;\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([stem_diameter*0.8, 0, fruit_diameter*0.55])\n                rotate([30, 0, 0])\n                    scale([0.3, 1, 0.2])\n                        sphere(d = calyx_size);\n    }\n}\n\n// Assemble the complete fruit\nunion() {\n    // Main body with surface texture\n    union() {\n        lucuma_body();\n        \n        // Add subtle bumps for texture\n        intersection() {\n            surface_bumps();\n            lucuma_body();\n        }\n    }\n    \n    // Stem and calyx\n    stem();\n    calyx();\n    \n    // Subtle seam lines\n    difference() {\n        lucuma_body();\n        seam_lines();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "miracle",
    "openscad_code": "// Miracle of the Loaves and Fishes – realistic, medium complexity\n// 3D-printable, ~70 mm tall, no steep overhangs\n\n$fn=64;        // smooth curves\n\n// overall scale factor\nscaleFactor = 0.35;\n\n// base plate\nmodule basePlate() {\n    difference() {\n        cylinder(h=4, r=50*scaleFactor);\n        translate([0,0,3.5])\n            cylinder(h=2, r=48*scaleFactor); // slight recess\n    }\n}\n\n// simple basket weave texture\nmodule weaveBand(a) {\n    rotate([0,0,a])\n    translate([0, 20*scaleFactor, 2])\n    cube([2, 4*scaleFactor, 1.5], center=true);\n}\n\n// basket body\nmodule basket() {\n    difference() {\n        cylinder(h=20*scaleFactor, r1=22*scaleFactor, r2=20*scaleFactor);\n        // hollow\n        translate([0,0,2])\n            cylinder(h=20*scaleFactor, r1=19*scaleFactor, r2=17*scaleFactor);\n    }\n    // add weave\n    for (i=[0:15:165]) weaveBand(i);\n}\n\n// fish – stylized but recognizable\nmodule fish() {\n    union() {\n        // body\n        scale([1,0.6,0.3])\n            sphere(r=8*scaleFactor);\n        // tail\n        translate([8*scaleFactor,0,0])\n            rotate([0,90,0])\n            cylinder(h=6*scaleFactor, r1=6*scaleFactor, r2=0);\n        // dorsal fin\n        translate([0,0,4*scaleFactor])\n            rotate([90,0,0])\n            cylinder(h=4*scaleFactor, r1=4*scaleFactor, r2=0);\n    }\n}\n\n// loaf – elongated oval\nmodule loaf() {\n    scale([1.5,0.7,0.7])\n        sphere(r=6*scaleFactor);\n}\n\n// arrangement of 5 loaves\nmodule loaves() {\n    translate([0,-5*scaleFactor,22*scaleFactor]) rotate([0,0,0])   loaf();\n    translate([10*scaleFactor,0,22*scaleFactor]) rotate([0,0,20])  loaf();\n    translate([-10*scaleFactor,2*scaleFactor,22*scaleFactor]) rotate([0,0,-25]) loaf();\n    translate([5*scaleFactor,8*scaleFactor,22*scaleFactor]) rotate([0,0,45])  loaf();\n    translate([-6*scaleFactor,-7*scaleFactor,22*scaleFactor]) rotate([0,0,-35]) loaf();\n}\n\n// arrangement of 2 fishes\nmodule fishes() {\n    translate([0,13*scaleFactor,22*scaleFactor]) rotate([0,0,90]) fish();\n    translate([0,-13*scaleFactor,22*scaleFactor]) rotate([0,0,-90]) mirror([0,1,0]) fish();\n}\n\n// combined miracle scene\nunion() {\n    basePlate();\n    translate([0,0,4*scaleFactor])\n        basket();\n    loaves();\n    fishes();\n}",
    "renders": true
  },
  {
    "fruit": "noni",
    "openscad_code": "// Realistic Noni Fruit - Medium Complexity\n// Overall height ~60mm, suitable for 3D printing\n\n$fn = 48;  // Smooth curves for printing\n\n// Main parameters\nfruit_diameter = 45;\nfruit_height = 50;\nstem_length = 8;\nstem_diameter = 6;\nsurface_bump_height = 1.5;\neye_count = 130;\nwall_thickness = 1.5;\n\n// Main fruit body with egg-like shape\nmodule noni_body() {\n    // Create egg-shaped base\n    scale([1, 1, 1.2])\n        sphere(d = fruit_diameter);\n    \n    // Add slight flattening on bottom\n    translate([0, 0, -fruit_height/2 + 3])\n        difference() {\n            sphere(d = fruit_diameter * 0.98);\n            translate([0, 0, -5])\n                cube([fruit_diameter * 1.2, fruit_diameter * 1.2, 10], center = true);\n        }\n}\n\n// Surface texture with small bumps\nmodule surface_texture() {\n    for (i = [0:eye_count-1]) {\n        // Distribute bumps using golden angle for even coverage\n        theta = i * 137.508 * 3.14159 / 180;\n        phi = acos(1 - 2*(i + 0.5)/eye_count);\n        \n        // Map spherical coordinates to surface\n        x = (fruit_diameter/2) * cos(theta) * sin(phi);\n        y = (fruit_diameter/2) * sin(theta) * sin(phi);\n        z = (fruit_diameter/2 * 1.2) * cos(phi);\n        \n        // Skip bottom 15% to avoid printing issues\n        if (z > -fruit_height/2 + 5) {\n            translate([x, y, z]) {\n                // Orient bump to surface normal\n                rotate([0, 0, theta])\n                rotate([0, -phi*180/3.14159, 0])\n                    scale([1, 1, 0.6])\n                        sphere(d = surface_bump_height * 2);\n            }\n        }\n    }\n}\n\n// Stem with slight curve\nmodule stem() {\n    translate([0, 0, fruit_height/2 + stem_length/2]) {\n        // Main stem cylinder\n        rotate([5, 0, 0])\n            cylinder(h = stem_length, d1 = stem_diameter, d2 = stem_diameter * 0.8);\n        \n        // Stem base flare\n        translate([0, 0, -stem_length/4])\n            cylinder(h = 3, d1 = stem_diameter * 1.4, d2 = stem_diameter);\n    }\n}\n\n// Eye spots pattern (characteristic of noni)\nmodule eye_spots() {\n    // Ring of larger spots around middle\n    for (a = [0:30:359]) {\n        rotate([0, 0, a]) {\n            translate([fruit_diameter/2 - 4, 0, 0]) {\n                scale([1, 0.7, 0.3])\n                    sphere(d = 3);\n            }\n        }\n    }\n    \n    // Additional scattered spots\n    for (i = [0:45]) {\n        angle = i * 47.3;\n        height = sin(i * 0.8) * 15;\n        translate([\n            (fruit_diameter/2 - 2) * cos(angle),\n            (fruit_diameter/2 - 2) * sin(angle),\n            height\n        ]) {\n            sphere(d = 1.5);\n        }\n    }\n}\n\n// Hollow out for 3D printing\nmodule hollow_center() {\n    translate([0, 0, -2])\n        sphere(d = fruit_diameter - wall_thickness * 2);\n}\n\n// Assembly\nunion() {\n    // Main body\n    difference() {\n        union() {\n            noni_body();\n            surface_texture();\n        }\n        hollow_center();\n    }\n    \n    // Stem\n    stem();\n    \n    // Eye spots\n    eye_spots();\n}",
    "renders": true
  },
  {
    "fruit": "gac",
    "openscad_code": "// Realistic Gac Fruit (Baby Jackfruit) - Medium Complexity\n// Overall dimensions: ~70mm length, ~50mm diameter\n\n// Main parameters for easy adjustment\nfruit_length = 70;\nfruit_diameter = 50;\nspine_count = 18;\nspine_height = 8;\nsegment_count = 6;\nwall_thickness = 2;\n\nmodule gac_body() {\n    // Main body - elongated sphere with slight taper\n    hull() {\n        translate([0, 0, -fruit_length/4])\n            scale([1, 1, 1.3])\n                sphere(d=fruit_diameter, $fn=50);\n        \n        translate([0, 0, fruit_length/4])\n            scale([1.1, 1.1, 1])\n                sphere(d=fruit_diameter * 0.9, $fn=50);\n    }\n}\n\nmodule spines() {\n    // Create spines around the fruit body\n    for(i = [0:spine_count-1]) {\n        rotate([0, 0, i * (360/spine_count)]) {\n            translate([0, fruit_diameter/2, 0]) {\n                // Base of spine\n                translate([0, 0, -spine_height/2])\n                    cylinder(h=spine_height, d1=6, d2=3, $fn=6);\n                \n                // Tip of spine\n                translate([0, 0, spine_height/2])\n                    cylinder(h=spine_height/1.5, d1=3, d2=0.5, $fn=6);\n            }\n        }\n    }\n}\n\nmodule segments() {\n    // Create longitudinal segments with slight indentations\n    difference() {\n        gac_body();\n        \n        for(i = [0:segment_count-1]) {\n            rotate([0, 0, i * (360/segment_count) + (360/segment_count/2)]) {\n                translate([0, 0, -fruit_length/2])\n                    cube([fruit_diameter/20, fruit_diameter*1.2, fruit_length], center=true);\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Stem at top of fruit\n    translate([0, 0, fruit_length/2 + 5]) {\n        cylinder(h=12, d1=8, d2=6, $fn=8);\n        \n        // Stem cap\n        translate([0, 0, 6])\n            sphere(d=10, $fn=16);\n    }\n}\n\nmodule base_flattening() {\n    // Slightly flatten the base for stable printing\n    difference() {\n        union() {\n            segments();\n            spines();\n            stem();\n        }\n        \n        // Flatten bottom\n        translate([0, 0, -fruit_length/2 - 1])\n            cube([fruit_diameter*1.5, fruit_diameter*1.5, 2], center=true);\n    }\n}\n\n// Main assembly\nbase_flattening();",
    "renders": true
  },
  {
    "fruit": "bignay",
    "openscad_code": "// Bignay (Antidesma bunius) - Realistic medium-complexity model\n// Based on fruit cluster with individual berries\n\n// Overall dimensions (mm)\nberry_d = 12;\nberry_h = 15;\ncluster_w = 60;\ncluster_h = 80;\nstem_d = 3;\npeduncle_d = 1.5;\n\n// Berry module\nmodule berry(angle=0, radius=0, height=0) {\n    translate([0, radius, height])\n    rotate([angle, 0, 0])\n    difference() {\n        // Main berry body - slightly elongated sphere\n        scale([1, 1, 1.2])\n        sphere(d=berry_d, $fn=20);\n        \n        // Small indent at top\n        translate([0, 0, berry_d/2])\n        cylinder(d=berry_d/3, h=2, $fn=12);\n        \n        // Bottom nipple\n        translate([0, 0, -berry_d/1.2])\n        rotate([180,0,0])\n        cylinder(d1=berry_d/4, d2=0, h=berry_d/4, $fn=8);\n    }\n}\n\n// Stem connection\nmodule peduncle(length=10) {\n    color(\"brown\")\n    cylinder(d=peduncle_d, h=length, $fn=8);\n}\n\n// Main cluster\nmodule bignay_cluster() {\n    // Central stem\n    color(\"brown\")\n    cylinder(d=stem_d, h=cluster_h, $fn=12);\n    \n    // Berries arranged in spiral cluster\n    for(i=[0:35]) {\n        angle = i * 137.5;  // Golden angle for natural spacing\n        radius = 15 + (i * 0.8);\n        height = i * 2.2;\n        \n        // Skip some positions for natural spacing\n        if(i % 2 == 0 && height < cluster_h - 10) {\n            rotate([0, 0, angle])\n            translate([0, 0, height])\n            union() {\n                peduncle(5);\n                rotate([90, 0, 0])\n                berry(45, radius, 0);\n            }\n        }\n    }\n    \n    // Top berries\n    for(i=[0:7]) {\n        angle = i * 51.4;\n        rotate([0, 0, angle])\n        translate([0, 0, cluster_h - 5])\n        rotate([30, 0, 0])\n        union() {\n            peduncle(4);\n            rotate([90, 0, 0])\n            berry(30, 10, 0);\n        }\n    }\n}\n\n// Optional base for printing stability\nmodule base() {\n    translate([0, 0, -5])\n    cylinder(d=cluster_w + 10, h=5, $fn=32);\n}\n\n// Assembly\nbignay_cluster();\nbase();",
    "renders": true
  },
  {
    "fruit": "antidesma",
    "openscad_code": "// Antidesma (Antidesma bunius) – bignay/currant tree branch with fruit\n// Realistic style, medium complexity\n// Target print size ≈ 75 mm tall\n\n$fn = 36;          // Good balance between smoothness & printability\nwall = 1.2;        // 3-perimeter wall @ 0.4 mm nozzle\n\n// Whole model centred at origin\ndifference() {\n    union() {\n        main_branch();\n        fruit_cluster();\n    }\n    // Remove inner void for light-weight printing\n    translate([0,0,2]) scale([0.7,0.7,0.9]) main_branch();\n}\n\n// --------------------------------------------------\nmodule main_branch() {\n    // Trunk segment\n    difference() {\n        cylinder(h = 50, d1 = 10, d2 = 7, center = false);\n        translate([0,0,-1]) cylinder(h = 52, d1 = 7.6, d2 = 4.6, center = false);\n    }\n    \n    // First lateral twig\n    translate([0,0,35]) rotate([0,110,0])\n        twig(30, 5, 2.5);\n    \n    // Second lateral twig\n    translate([0,0,25]) rotate([0,70,-40])\n        twig(25, 4.5, 2);\n    \n    // Small side twig for balance\n    translate([0,0,15]) rotate([0,90,160])\n        twig(15, 3, 1.5);\n}\n\n// --------------------------------------------------\nmodule twig(h, d1, d2) {\n    difference() {\n        cylinder(h = h, d1 = d1, d2 = d2, center = false);\n        translate([0,0,-1]) cylinder(h = h+2, d1 = d1-wall, d2 = d2-wall, center = false);\n    }\n    \n    // Tiny leaf stems\n    for(a = [20:30:110])\n        translate([0,0,h*0.8]) rotate([0,120,a])\n            scale([1,1,0.3]) sphere(d = d1*0.7);\n}\n\n// --------------------------------------------------\nmodule fruit_cluster() {\n    // Re-usable single berry\n    module berry(pos, size) {\n        translate(pos) {\n            difference() {\n                sphere(d = size);\n                translate([0,0,-size/2-1])\n                    cylinder(h = size/2+2, d = size-wall, center = false);\n            }\n            // Tiny calyx\n            translate([0,0,size/2]) cylinder(h = 1.2, d1 = 1.8, d2 = 1, center = false);\n        }\n    }\n    \n    // Main bunch around first twig end\n    for(i = [0:12]) {\n        angle = i*137.5;\n        h = 2 + 4*sin(i*40);\n        r = 8 + 1.5*cos(i*40);\n        berry([r*cos(angle), r*sin(angle), 35+h], 6.5);\n    }\n    \n    // Secondary bunch around second twig\n    for(i = [0:8]) {\n        angle = i*140;\n        h = 1 + 3*sin(i*50);\n        r = 6 + cos(i*50);\n        berry([r*cos(angle), r*sin(angle), 25+h], 5.5);\n    }\n    \n    // Sparse berries along trunk\n    for(i = [0:5]) {\n        berry([3*cos(i*70), 3*sin(i*70), 10+i*6], 4);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "ramin",
    "openscad_code": "// Ramen bowl with noodles, egg, and scallions\n// Designed for 3D printing with no overhangs\n\n// Main parameters\nbowl_d = 70;\nbowl_h = 35;\nwall_thick = 2;\nnoodle_thick = 1.5;\negg_d = 20;\negg_h = 10;\n\n// Main module\nmodule ramen() {\n    // Bowl\n    difference() {\n        cylinder(h=bowl_h, d=bowl_d, $fn=64);\n        translate([0, 0, wall_thick])\n            cylinder(h=bowl_h, d=bowl_d-wall_thick*2, $fn=64);\n    }\n    \n    // Noodles\n    translate([0, 0, bowl_h-wall_thick-1])\n        noodles();\n    \n    // Egg\n    translate([15, 0, bowl_h-wall_thick-1])\n        rotate([90, 0, 0])\n            egg_half();\n    \n    // Scallions\n    for(i=[0:2]) {\n        rotate(i*120)\n            translate([25, 0, bowl_h-wall_thick-0.5])\n                scallion();\n    }\n}\n\n// Noodle swirl module\nmodule noodles() {\n    // Create spiral noodles using torus segments\n    for(i=[0:5:180]) {\n        rotate([0, 0, i])\n            translate([i/5, 0, 0])\n                rotate([90, i*2, 0])\n                    torus_segment(noodle_thick, 3);\n    }\n}\n\n// Torus segment for noodles\nmodule torus_segment(r, R) {\n    rotate_extrude($fn=16)\n        translate([R, 0, 0])\n            circle(r=r, $fn=16);\n}\n\n// Half egg\nmodule egg_half() {\n    difference() {\n        scale([1, 1, 0.7])\n            sphere(d=egg_d, $fn=32);\n        translate([0, 0, -egg_h/2])\n            cube([egg_d+2, egg_d+2, egg_h], center=true);\n    }\n}\n\n// Scallion pieces\nmodule scallion() {\n    for(i=[0:3]) {\n        rotate([0, 90, 0])\n            translate([i*3-4.5, 0, 0])\n                cylinder(h=12, d=1.5, $fn=8);\n    }\n}\n\n// Render the ramen\nramen();",
    "renders": true
  },
  {
    "fruit": "raisin",
    "openscad_code": "// Realistic Raisin Model - Medium Complexity\n// Approx 70mm length, 3D printable\n\nmodule raisin_body() {\n    // Main body - elongated sphere with slight flattening\n    scale([1, 0.85, 1.3]) \n    sphere(15, $fn=60);\n    \n    // Add slight bulge at center\n    translate([0, 0, 5])\n    scale([1.1, 1.1, 0.9])\n    sphere(8, $fn=40);\n}\n\nmodule wrinkles() {\n    // Generate realistic wrinkles using subtracted cylinders\n    for (i = [0:20:160]) {\n        rotate([0, i, 0])\n        translate([0, 0, -20])\n        rotate([90, 0, 0])\n        scale([1, 1.2, 1])\n        cylinder(h=40, r1=1.5, r2=0, $fn=8);\n    }\n    \n    // Cross wrinkles\n    for (j = [0:30:150]) {\n        rotate([j, 0, 0])\n        translate([0, 0, -20])\n        rotate([0, 90, 0])\n        scale([1.2, 1, 1])\n        cylinder(h=40, r1=1.2, r2=0, $fn=8);\n    }\n}\n\nmodule stem_attachment() {\n    // Stem connection point\n    translate([0, 0, 19])\n    rotate([0, 0, 0])\n    cylinder(h=3, r1=2.5, r2=2, $fn=16);\n    \n    // Small indent around stem\n    translate([0, 0, 17])\n    rotate([0, 0, 0])\n    cylinder(h=2, r1=3, r2=3.5, $fn=16);\n}\n\nmodule surface_details() {\n    // Small surface indentations\n    for (a = [0:45:180]) {\n        for (b = [0:60:360]) {\n            rotate([a, b, 0])\n            translate([0, 0, 14])\n            sphere(1.2, $fn=8);\n        }\n    }\n}\n\nmodule raisin_complete() {\n    difference() {\n        union() {\n            // Main body\n            raisin_body();\n            \n            // Stem attachment\n            stem_attachment();\n            \n            // Surface details\n            surface_details();\n        }\n        \n        // Subtract wrinkles\n        wrinkles();\n    }\n}\n\n// Scale to final size (70mm length)\nscale([0.7, 0.7, 0.7])\nraisin_complete();",
    "renders": true
  },
  {
    "fruit": "beach",
    "openscad_code": "// Beach scene - 3D printable, medium complexity\n// Dimensions: 80 x 60 x 15 mm (L x W x H)\n\n$fn = 24; // Smooth curves for printing\n\n// Main beach base\nmodule beach_base() {\n    difference() {\n        // Main sand area\n        cube([80, 60, 3], center = false);\n        \n        // Gentle slope towards water\n        translate([0, 0, 3])\n            cube([80, 60, 2], center = false);\n    }\n}\n\n// Water area\nmodule water() {\n    color([0.2, 0.5, 0.8, 0.8])\n    translate([0, 20, 2.9])\n        cube([80, 40, 2], center = false);\n}\n\n// Sand dunes with gentle slopes\nmodule sand_dune(x, y, height, radius) {\n    color([0.9, 0.85, 0.6])\n    translate([x, y, 3])\n    scale([radius/5, radius/5, height/5])\n        sphere(r = 5);\n}\n\n// Beach umbrella\nmodule umbrella(x, y) {\n    // Pole\n    color([0.9, 0.9, 0.9])\n    translate([x, y, 5])\n        cylinder(h = 10, r = 1.5, center = false);\n    \n    // Umbrella top\n    color([0.9, 0.1, 0.1])\n    translate([x, y, 15])\n    rotate([90, 0, 0])\n    cylinder(h = 0.5, r1 = 8, r2 = 0, center = false);\n}\n\n// Palm tree trunk\nmodule palm_trunk(x, y) {\n    color([0.6, 0.4, 0.2])\n    translate([x, y, 5])\n    cylinder(h = 12, r = 1.5, center = false);\n}\n\n// Palm frond\nmodule palm_frond(x, y, angle) {\n    color([0.1, 0.5, 0.1])\n    translate([x, y, 17])\n    rotate([0, 0, angle])\n    scale([0.5, 6, 0.2])\n        cube([1, 1, 1], center = true);\n}\n\n// Seashell\nmodule seashell(x, y) {\n    color([0.9, 0.8, 0.7])\n    translate([x, y, 3.2])\n    scale([1, 1.5, 0.5])\n        sphere(r = 1.5);\n}\n\n// Beach towel\nmodule towel(x, y) {\n    color([0.2, 0.6, 0.8])\n    translate([x, y, 3.1])\n    cube([8, 12, 0.2], center = false);\n}\n\n// Main assembly\nunion() {\n    // Base beach\n    beach_base();\n    \n    // Water\n    water();\n    \n    // Sand dunes\n    for(i = [0:5]) {\n        sand_dune(5 + i * 12, 5 + (i % 3) * 8, 3 + i, 6 + i);\n    }\n    \n    // Umbrella\n    umbrella(25, 10);\n    \n    // Palm tree\n    palm_trunk(60, 45);\n    \n    // Palm fronds\n    for(i = [0:4]) {\n        palm_frond(60, 45, i * 72);\n    }\n    \n    // Seashells\n    seashell(15, 35);\n    seashell(45, 25);\n    seashell(70, 15);\n    \n    // Beach towel\n    towel(35, 15);\n}",
    "renders": true
  },
  {
    "fruit": "coco",
    "openscad_code": "// Realistic 3D-Printable Coconut (Coco) – Medium Complexity\n// Approx. 70 mm long, split in half for support-free printing\n\n// Main body split into two halves\ndifference() {\n    union() {\n        // Bottom half shell\n        coconut_half(false);\n        \n        // Top half shell (offset for printing)\n        translate([0, 0, 35 + 2])\n            coconut_half(true);\n    }\n    \n    // Hollow cavity for both halves\n    difference() {\n        // Bottom cavity\n        translate([0, 0, 2])\n            scale([0.75, 0.75, 0.7])\n                coconut_half(false);\n        \n        // Top cavity\n        translate([0, 0, 35 + 2])\n            scale([0.75, 0.75, 0.7])\n                coconut_half(true);\n    }\n}\n\n// Module for one half of the coconut\nmodule coconut_half(is_top)\n{\n    // Main ellipsoid body\n    scale([1, 0.8, 0.9])\n        sphere(d = 70, $fn = 60);\n    \n    // Three “eyes” on top\n    if (is_top) {\n        translate([0, 0, 31.5])\n            rotate([0, 0, 0])\n                eyes();\n        translate([0, 0, 31.5])\n            rotate([0, 0, 120])\n                eyes();\n        translate([0, 0, 31.5])\n            rotate([0, 0, 240])\n                eyes();\n    }\n    \n    // Fibrous husk ridges\n    for (i = [0 : 7]) {\n        rotate([0, 0, i * 45])\n            translate([0, 0, 0])\n                linear_extrude(height = 0.5, center = true)\n                    offset(delta = 1)\n                        projection()\n                            intersection() {\n                                translate([0, 0, -35])\n                                    cube([150, 150, 70], center = true);\n                                scale([1.05, 0.85, 1])\n                                    sphere(d = 70, $fn = 60);\n                            }\n    }\n}\n\n// Small eye indents\nmodule eyes()\n{\n    translate([0, 12, 0])\n        rotate_extrude(angle = 360, $fn = 20)\n            translate([2, 0, 0])\n                circle(d = 3);\n}\n\n// Optional stand pegs for printing stability\ntranslate([0, 0, -2])\n    cylinder(h = 2, d = 10, $fn = 20);\ntranslate([0, 0, 70 + 2])\n    cylinder(h = 2, d = 10, $fn = 20);",
    "renders": true
  },
  {
    "fruit": "palm",
    "openscad_code": "// Realistic 3D Printable Palm – medium complexity\nhand_scale = 1;               // overall scale factor\npalm_length = 60 * hand_scale;\npalm_width  = 45 * hand_scale;\npalm_thick  = 12 * hand_scale;\n\n// safe printer limits\nwall = 1.2;\n\nmodule palm_base() {\n    // main palm body – slightly curved\n    hull() {\n        translate([0, -palm_width/3, 0])\n            sphere(d = palm_thick*1.6, $fn=24);\n        translate([0,  palm_width/3, 0])\n            sphere(d = palm_thick*1.6, $fn=24);\n        translate([palm_length*0.4, 0, -palm_thick/2])\n            sphere(d = palm_thick*1.3, $fn=24);\n    }\n}\n\nmodule thumb() {\n    // thumb root at base of palm\n    translate([-palm_length*0.4, -palm_width/2 + 3*hand_scale, -palm_thick/2])\n        rotate([0, 0, -30])\n        cylinder(h = 22*hand_scale, d1 = 12*hand_scale, d2 = 8*hand_scale, $fn=12);\n    // thumb tip\n    translate([-palm_length*0.4 - 18*hand_scale, -palm_width/2 - 2*hand_scale, -palm_thick/2])\n        sphere(d = 8*hand_scale, $fn=12);\n}\n\nmodule finger(len, pos_y, bend=0) {\n    // finger with 3 segments\n    // base segment\n    translate([palm_length*0.7, pos_y, 0])\n        rotate([bend, 0, 0])\n        cylinder(h = len*0.45, d = 7*hand_scale, $fn=10);\n    // middle segment\n    translate([palm_length*0.7 + len*0.45, pos_y, 0])\n        rotate([bend*1.2, 0, 0])\n        cylinder(h = len*0.35, d = 6*hand_scale, $fn=10);\n    // distal segment\n    translate([palm_length*0.7 + len*0.8, pos_y, 0])\n        rotate([bend*1.4, 0, 0])\n        cylinder(h = len*0.25, d = 5*hand_scale, $fn=10);\n    // fingertip\n    translate([palm_length*0.7 + len, pos_y, 0])\n        sphere(d = 5*hand_scale, $fn=10);\n}\n\nmodule fingers() {\n    // five fingers with decreasing length\n    finger(38*hand_scale,  palm_width/2 - 2*hand_scale, -8);\n    finger(42*hand_scale,  palm_width/3 - 1*hand_scale, -6);\n    finger(45*hand_scale,  0, -4);\n    finger(40*hand_scale, -palm_width/3 + 1*hand_scale, -2);\n}\n\nmodule wrist() {\n    // wrist cylinder\n    translate([-palm_length*0.5, 0, -palm_thick/2])\n        cylinder(h = 15*hand_scale, d = 20*hand_scale, $fn=20);\n    // smooth transition\n    hull() {\n        translate([-palm_length*0.5, 0, -palm_thick/2])\n            sphere(d = 20*hand_scale, $fn=20);\n        translate([-palm_length*0.3, 0, -palm_thick/2])\n            sphere(d = 18*hand_scale, $fn=20);\n    }\n}\n\nmodule lifeline() {\n    // shallow groove\n    difference() {\n        palm_base();\n        translate([palm_length*0.2, -palm_width/4, -palm_thick/2])\n            rotate([90, 0, 0])\n            cylinder(h = wall*3, d = 3*hand_scale, $fn=12);\n    }\n}\n\n// assemble\nunion() {\n    lifeline();\n    thumb();\n    fingers();\n    wrist();\n}",
    "renders": true
  },
  {
    "fruit": "acai",
    "openscad_code": "// Basic acai berry cluster module\n// Designed for 3D printing - no overhangs, 2mm walls\n\n$fn = 32;  // Smooth curves\n\n// Main cluster\nmodule acai_cluster() {\n    difference() {\n        union() {\n            // Stem\n            stem();\n            \n            // Main berries in cluster\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                translate([0, 8, 0])\n                rotate([rand(15, 25), rand(-10, 10), 0])\n                berry(6 + rand(-1, 1));\n            }\n            \n            // Secondary berries\n            for(i = [0:8]) {\n                rotate([0, 0, i * 45 + 22.5])\n                translate([0, 13, 0])\n                rotate([rand(20, 35), rand(-15, 15), 0])\n                berry(4 + rand(-0.5, 0.5));\n            }\n        }\n        \n        // Remove bottom flat for printing\n        translate([-20, -20, -1])\n        cube([40, 40, 2]);\n    }\n}\n\n// Individual berry with realistic shape\nmodule berry(radius) {\n    difference() {\n        union() {\n            // Main berry body - slightly elongated\n            scale([1, 1, 1.2])\n            sphere(r = radius);\n            \n            // Small top bulge\n            translate([0, 0, radius * 1.2])\n            scale([0.7, 0.7, 0.5])\n            sphere(r = radius);\n            \n            // Tiny stem attachment\n            translate([0, 0, radius * 1.6])\n            cylinder(h = 0.5, r1 = 0.3, r2 = 0.2);\n        }\n        \n        // Indentation groove\n        rotate([0, 90, 0])\n        translate([0, 0, -radius - 1])\n        cylinder(h = radius * 2 + 2, r = 0.8);\n    }\n}\n\n// Stem structure\nmodule stem() {\n    // Main stem\n    cylinder(h = 15, r1 = 1.5, r2 = 0.8);\n    \n    // Stem branches\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 0, 5 + i * 2])\n        rotate([90, 0, 0])\n        cylinder(h = 8 - i, r1 = 0.8, r2 = 0.4);\n    }\n    \n    // Small leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 120])\n        translate([0, 7, 10])\n        rotate([45, 0, 0])\n        scale([0.5, 1.5, 0.1])\n        sphere(r = 2);\n    }\n}\n\n// Random helper\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Scale to 70mm height\nscale([2.5, 2.5, 2.5])\nacai_cluster();",
    "renders": true
  },
  {
    "fruit": "maqui",
    "openscad_code": "// Maqui berry branch with realistic details\n// Medium complexity 3D printable model\n\n// Overall scale\nscale_factor = 0.8;\n\n// Create a single maqui berry\nmodule maqui_berry(r=4, h=7, tilt=15) {\n    // Main berry body\n    difference() {\n        sphere(r=r, $fn=32);\n        // Small indent at top\n        translate([0, 0, r-0.5])\n            cylinder(r1=r*0.4, r2=0, h=1.5, $fn=16);\n    }\n    \n    // Calyx (star shape at top)\n    translate([0, 0, r-0.3])\n    rotate([90, 0, 0])\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, r*0.3, 0])\n        scale([0.5, 1, 0.3])\n        sphere(r=0.8, $fn=8);\n    }\n    \n    // Stem attachment\n    translate([0, 0, r])\n    rotate([0, 0, tilt])\n    cylinder(r1=0.5, r2=0.3, h=1.5, $fn=8);\n}\n\n// Berry cluster\nmodule berry_cluster(x, y, z, count=5) {\n    translate([x, y, z])\n    for(i=[0:count-1]) {\n        angle = i * 360/count;\n        radius = 6 + sin(i*45)*2;\n        translate([cos(angle)*radius, sin(angle)*radius, 0])\n        rotate([0, 0, angle + 90])\n        maqui_berry(r=3.5+sin(i*30)*0.5, tilt=20 + i*5);\n    }\n}\n\n// Main branch\nmodule branch() {\n    // Central stem\n    color(\"saddlebrown\")\n    difference() {\n        cylinder(h=45, r1=2.5, r2=1.5, $fn=16);\n        // Remove bottom for flat print\n        translate([0, 0, -1])\n        cube([6, 6, 2], center=true);\n    }\n    \n    // Side branches with berries\n    for(i=[0:2]) {\n        height = 5 + i*15;\n        angle = i*40 - 40;\n        \n        // Side branch\n        translate([0, 0, height])\n        rotate([0, 0, angle])\n        color(\"saddlebrown\")\n        cylinder(h=20, r1=1.8, r2=1, $fn=12);\n        \n        // Berry cluster on side branch\n        translate([cos(angle)*5, sin(angle)*5, height+3])\n        rotate([0, 0, angle])\n        berry_cluster(0, 0, 0, 4-i);\n    }\n    \n    // Top cluster\n    translate([0, 0, 42])\n    berry_cluster(0, 0, 0, 3);\n    \n    // Leaves\n    color(\"darkgreen\")\n    for(i=[0:3]) {\n        height = 10 + i*10;\n        angle = i*90;\n        \n        translate([cos(angle)*8, sin(angle)*8, height])\n        rotate([0, 0, angle])\n        rotate([20, 0, 0])\n        scale([1, 1.8, 0.2])\n        sphere(r=4, $fn=16);\n    }\n}\n\n// Base platform for stable printing\nmodule base() {\n    color(\"darkgreen\")\n    difference() {\n        cylinder(h=2, r=15, $fn=32);\n        // Hollow center\n        cylinder(h=3, r=12, $fn=32);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\ntranslate([0, 0, 2])\nunion() {\n    base();\n    translate([0, 0, 2])\n    branch();\n}",
    "renders": true
  },
  {
    "fruit": "pichuberry",
    "openscad_code": "// Pichuberry - Realistic Style, Medium Complexity\n// A physalis peruviana (golden berry) with calyx and fruit\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main dimensions (in mm)\nberry_diameter = 18;\ncalyx_length = 35;\ncalyx_base_diameter = 22;\nstem_length = 8;\nstem_diameter = 3;\n\nmodule pichuberry() {\n    union() {\n        // Stem\n        translate([0, 0, calyx_length + berry_diameter/2 + stem_length/2])\n            cylinder(h = stem_length, d = stem_diameter, $fn = 8);\n        \n        // Calyx (lantern-like husk)\n        translate([0, 0, berry_diameter/2])\n            calyx();\n        \n        // Berry inside calyx\n        translate([0, 0, berry_diameter/2])\n            berry();\n    }\n}\n\nmodule calyx() {\n    difference() {\n        // Main calyx structure\n        union() {\n            // Base cone\n            cylinder(h = calyx_length * 0.3, d1 = calyx_base_diameter, d2 = calyx_base_diameter * 0.8);\n            \n            // Upper section with gentle taper\n            translate([0, 0, calyx_length * 0.3])\n                cylinder(h = calyx_length * 0.7, d1 = calyx_base_diameter * 0.8, d2 = calyx_base_diameter * 0.4);\n        }\n        \n        // Hollow out for berry\n        translate([0, 0, -1])\n            cylinder(h = calyx_length + 2, d = berry_diameter + 2);\n        \n        // Create calyx segments (10 sections)\n        for (i = [0:9]) {\n            rotate([0, 0, i * 36])\n                translate([calyx_base_diameter/2 - 1, 0, 0])\n                    cube([calyx_base_diameter/2 + 2, 2, calyx_length], center = true);\n        }\n    }\n}\n\nmodule berry() {\n    // Main berry sphere with slight deformation for realism\n    scale([1, 0.95, 1.05])\n        sphere(d = berry_diameter);\n    \n    // Add small surface details\n    for (i = [0:20]) {\n        rotate([rand(0, 360), rand(0, 360), rand(0, 360)])\n            translate([0, 0, berry_diameter/2])\n                sphere(d = berry_diameter * 0.05);\n    }\n    \n    // Bottom indent\n    translate([0, 0, -berry_diameter/2])\n        sphere(d = berry_diameter * 0.3);\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Render the complete model\npichuberry();",
    "renders": true
  },
  {
    "fruit": "aguaymanto",
    "openscad_code": "// Aguaymanto (Physalis peruviana) - Golden Berry / Cape Gooseberry\n// Realistic style, medium complexity\n\n// Main parameters\n$fn = 36;\nberry_d = 20;\ncalyx_h = 35;\ncalyx_w = 32;\nstem_d = 3;\nstem_h = 10;\n\n// Main berry\nmodule berry() {\n    color(\"gold\") \n    difference() {\n        sphere(d = berry_d);\n        // Small indent at top\n        translate([0, 0, 9])\n        sphere(d = 4);\n    }\n}\n\n// Calyx (lantern) structure\nmodule calyx() {\n    color(\"greenyellow\", 0.7)\n    difference() {\n        // Main outer shell\n        union() {\n            for (i = [0:11]) {\n                rotate([0, 0, i * 30])\n                translate([-1.5, -calyx_w/2, 0])\n                cube([3, calyx_w, calyx_h]);\n            }\n        }\n        \n        // Hollow out interior\n        cylinder(h = calyx_h + 2, d = berry_d + 6, center = false);\n        \n        // Opening at top\n        translate([0, 0, calyx_h - 2])\n        cylinder(h = 5, d = 15);\n        \n        // Bottom opening\n        translate([0, 0, -1])\n        cylinder(h = 5, d = 8);\n    }\n}\n\n// Veins on calyx\nmodule calyx_veins() {\n    color(\"darkgreen\")\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([-0.5, 0, 0])\n        cube([1, calyx_w - 3, calyx_h - 5]);\n    }\n}\n\n// Stem with leaves\nmodule stem() {\n    color(\"darkgreen\")\n    union() {\n        // Main stem\n        translate([0, 0, calyx_h + stem_h/2])\n        cylinder(h = stem_h, d = stem_d, center = true);\n        \n        // Leaf 1\n        translate([0, 5, calyx_h + stem_h - 2])\n        rotate([90, 0, 30])\n        scale([1, 1.5, 1])\n        cylinder(h = 8, d1 = 0, d2 = 6);\n        \n        // Leaf 2\n        translate([0, -5, calyx_h + stem_h - 4])\n        rotate([90, 0, -30])\n        scale([1, 1.5, 1])\n        cylinder(h = 8, d1 = 0, d2 = 6);\n    }\n}\n\n// Sepals at calyx base\nmodule sepals() {\n    color(\"forestgreen\")\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72 + 36])\n        translate([0, 5, -2])\n        rotate([30, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = 6, d1 = 4, d2 = 0);\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit\n    translate([0, 0, calyx_h/2])\n    berry();\n    \n    // Calyx surrounding berry\n    calyx();\n    \n    // Veins on calyx\n    calyx_veins();\n    \n    // Sepals at base\n    sepals();\n    \n    // Stem\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "physalis",
    "openscad_code": "// Physalis (Cape Gooseberry) - Realistic Style, Medium Complexity\n// Printable size ~60mm height\n\n$fn = 64;  // Smooth curves\n\n// Main stem\nmodule stem() {\n    color(\"saddlebrown\")\n    union() {\n        // Central stem\n        cylinder(h=35, d=4, center=false);\n        \n        // Small angled side stems\n        translate([0,0,25]) rotate([0,20,0]) cylinder(h=8, d=2);\n        translate([0,0,20]) rotate([0,-25,30]) cylinder(h=6, d=2);\n    }\n}\n\n// Leaf shape with veins\nmodule leaf(width=15, length=25) {\n    color(\"forestgreen\")\n    difference() {\n        // Basic leaf shape\n        scale([width/20, length/20, 1]) sphere(d=20);\n        \n        // Cut bottom flat\n        translate([0,-length/2,0]) cube([width+2,length,2], center=true);\n        \n        // Veins - subtract thin cylinders\n        for(i=[-width/3:width/8:width/3]) {\n            rotate([0,90,0]) \n            translate([i,0,0]) \n            scale([1,1,0.1]) \n            cylinder(h=length, d=0.6);\n        }\n    }\n}\n\n// Detailed calyx (lantern) with vein structure\nmodule calyx() {\n    color(\"goldenrod\") {\n        difference() {\n            // Outer lantern shape\n            rotate_extrude(angle=360)\n                translate([0,18,0])\n                circle(r=20);\n            \n            // Hollow interior\n            scale([0.8,0.8,0.8])\n                rotate_extrude(angle=360)\n                    translate([0,18,0])\n                    circle(r=20);\n            \n            // Bottom opening\n            translate([0,0,-18]) cylinder(h=36, d=4);\n            \n            // Top opening\n            translate([0,0,18]) cylinder(h=36, d=8);\n        }\n        \n        // Vein lines on surface\n        for(i=[0:30:330]) {\n            rotate([0,i,0]) \n            translate([0,0,18]) \n            scale([0.2,1,1]) \n            cylinder(h=36, d=1.5);\n        }\n    }\n}\n\n// Berry inside\nmodule berry() {\n    color(\"goldenrod\")\n    translate([0,0,-5]) \n    sphere(d=18);\n}\n\n// Assembly\ntranslate([0,0,0]) {\n    // Stem\n    stem();\n    \n    // Calyx attached near top\n    translate([0,0,32]) calyx();\n    \n    // Berry inside calyx\n    translate([0,0,32]) berry();\n    \n    // Leaves\n    translate([0,0,25]) rotate([0,0,45]) rotate([0,-60,0]) leaf(12,20);\n    translate([0,0,20]) rotate([0,0,-30]) rotate([0,70,20]) leaf(10,18);\n    translate([0,0,28]) rotate([0,0,180]) rotate([0,50,-20]) leaf(14,22);\n}\n\n// Base for printing stability\ntranslate([0,0,-2]) \ncolor(\"saddlebrown\") \ncylinder(h=2, d=8);",
    "renders": true
  },
  {
    "fruit": "tomatillo",
    "openscad_code": "// Tomatillo model - medium complexity realistic style\n// Approximate size: 70mm tall including husk\n\n// Main parameters for easy adjustment\n$fn = 32;\ntomatillo_radius = 15;\nhusk_length = 35;\nhusk_radius = 25;\n\n// Main tomatillo fruit (green berry)\nmodule tomatillo_fruit() {\n    color(\"limegreen\")\n    difference() {\n        // Main body with slight oval shape\n        scale([1, 1, 1.1])\n        sphere(r=tomatillo_radius);\n        \n        // Small indent at stem end\n        translate([0, 0, tomatillo_radius - 2])\n        cylinder(r=3, h=5, $fn=16);\n    }\n}\n\n// Husk segments (papery leaves)\nmodule husk_segment(height, angle, curl) {\n    // Create one segment of the husk\n    translate([0, 0, height])\n    rotate([0, 0, angle])\n    rotate([90 + curl, 0, 0])\n    linear_extrude(height=0.5, center=true)\n    polygon(points=[\n        [0, 0],\n        [husk_radius * 0.8, -husk_length * 0.3],\n        [husk_radius * 1.2, -husk_length * 0.7],\n        [husk_radius * 0.9, -husk_length],\n        [0, -husk_length * 1.1]\n    ]);\n}\n\n// Complete husk structure\nmodule husk() {\n    color(\"beige\", 0.8)\n    union() {\n        // Generate 8 husk segments around the fruit\n        for(i = [0:7]) {\n            husk_segment(tomatillo_radius * 0.8, i * 45, sin(i * 45) * 10);\n        }\n        \n        // Stem at the top\n        translate([0, 0, tomatillo_radius * 0.8])\n        cylinder(r=2, h=8, $fn=8);\n    }\n}\n\n// Surface texture for the fruit\nmodule fruit_texture() {\n    // Small bumps on surface using spheres\n    for(i = [0:15]) {\n        angle = i * 137.5;\n        radius = tomatillo_radius + 0.5;\n        h = sin(i * 0.5) * 5;\n        \n        rotate([0, 0, angle])\n        translate([radius * cos(h), radius * sin(h), sin(i * 0.3) * 5])\n        sphere(r=0.8, $fn=8);\n    }\n}\n\n// Veins on husk segments\nmodule husk_veins() {\n    color(\"tan\", 0.5)\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, tomatillo_radius * 0.8])\n        for(j = [0.2:0.2:0.9]) {\n            hull() {\n                translate([0, 0, 0])\n                sphere(r=0.3);\n                translate([husk_radius * j * 0.8, -husk_length * j, -husk_length * j * 0.3])\n                sphere(r=0.3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit with texture\n    union() {\n        tomatillo_fruit();\n        fruit_texture();\n    }\n    \n    // Husk with veins\n    union() {\n        husk();\n        husk_veins();\n    }\n}\n\n// Add a small flat base for printing stability\ntranslate([0, 0, -tomatillo_radius - 0.5])\ncylinder(r=tomatillo_radius + 2, h=1, $fn=32);",
    "renders": true
  },
  {
    "fruit": "naranjilla",
    "openscad_code": "// Naranjilla (Solanum quitoense) - medium complexity realistic style\n// Approx. 80 mm tall, 3D-printable with 1 mm wall thickness\n\n$fn = 36;  // Smooth curves for spheres\n\nmodule naranjilla() {\n    // Main fruit body - slightly flattened sphere\n    translate([0, 0, 40]) {\n        scale([1, 1, 0.8])\n        sphere(d = 60);\n    }\n    \n    // Crown calyx with 5 pointed lobes\n    translate([0, 0, 70]) {\n        for(i = [0:72:359]) {\n            rotate([0, 0, i])\n            translate([0, 25, 0])\n            rotate([0, -20, 0])\n            cylinder(h = 12, d1 = 8, d2 = 4);\n        }\n    }\n    \n    // Central calyx dome\n    translate([0, 0, 70])\n    sphere(d = 15);\n    \n    // Small hairs/fuzz on surface using tiny spheres\n    for(i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            for(j = [0:20:359]) {\n                rotate([j, 0, 0])\n                translate([0, 28, 40 + 8 * sin(j)])\n                sphere(d = 1.5);\n            }\n        }\n    }\n    \n    // Characteristic indentations - 8 evenly spaced\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([22, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h = 15, d = 8, $fn = 8);\n    }\n    \n    // Stem attachment point\n    translate([0, 0, 78])\n    cylinder(h = 5, d1 = 6, d2 = 4);\n}\n\n// Create the complete fruit\nnaranjilla();",
    "renders": true
  },
  {
    "fruit": "lulo",
    "openscad_code": "// Lulo (Solanum quitoense) - Realistic style, medium complexity\n// Approximately 70 mm diameter\n\n$fn = 36;  // Smooth curves for printing\n\n// Main fruit body\nmodule lulo_body() {\n    // Core sphere slightly flattened\n    scale([1.1, 1.1, 0.9]) sphere(d = 60);\n}\n\n// Create the characteristic lobes (4 main lobes)\nmodule lobes() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([25, 0, 0])\n        scale([1.2, 0.6, 0.8])\n        sphere(d = 35);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_bumps() {\n    difference() {\n        union() {\n            lulo_body();\n            lobes();\n        }\n        \n        // Create bump pattern\n        for(z = [-25:10:25]) {\n            for(a = [0:30:359]) {\n                translate([\n                    28 * cos(a),\n                    28 * sin(a),\n                    z\n                ])\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Calyx (green leafy top)\nmodule calyx() {\n    color(\"green\")\n    translate([0, 0, 26])\n    difference() {\n        // Main calyx base\n        cylinder(h = 8, d1 = 25, d2 = 18);\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cylinder(h = 10, d = 12);\n    }\n}\n\n// Calyx segments\nmodule calyx_segments() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([10, 0, 30])\n        rotate([45, 0, 0])\n        scale([1.5, 0.5, 1])\n        cylinder(h = 15, d1 = 6, d2 = 2);\n    }\n}\n\n// Stem attachment\nmodule stem_base() {\n    color(\"darkgreen\")\n    translate([0, 0, 32])\n    cylinder(h = 5, d = 6);\n}\n\n// Main assembly\nunion() {\n    // Orange-yellow fruit color\n    color(\"orange\")\n    surface_bumps();\n    \n    // Green parts\n    calyx();\n    calyx_segments();\n    stem_base();\n}\n\n// Flatten bottom for stable printing\ntranslate([0, 0, -30])\ndifference() {\n    cylinder(h = 2, d = 50);\n    translate([0, 0, -1])\n    cylinder(h = 4, d = 48);\n}",
    "renders": true
  },
  {
    "fruit": "tamarillo",
    "openscad_code": "// Tamarillo (tree tomato) - realistic medium complexity\n// 3D printable model with no overhangs\n\n$fn = 32;  // Circle resolution\n\n// Main parameters\nt_height = 65;      // Total height\nt_width = 45;       // Maximum width\nstem_len = 8;       // Stem length\ncalyx_size = 12;    // Calyx diameter\nwall_th = 2;        // Wall thickness for printing\n\n// Create the whole tamarillo\nmodule tamarillo() {\n    // Main body - ellipsoid shape\n    translate([0, 0, t_height/2])\n        scale([1, 0.9, 1.3])\n            sphere(d = t_width);\n    \n    // Flatten bottom slightly for printing\n    translate([0, 0, 1])\n        difference() {\n            sphere(d = t_width);\n            translate([0, 0, -t_width])\n                cube([t_width*2, t_width*2, t_width], center = true);\n        }\n    \n    // Small indent at stem end\n    translate([0, 0, t_height-5])\n        difference() {\n            sphere(d = t_width*0.8);\n            translate([0, 0, -t_width])\n                cube([t_width*2, t_width*2, t_width], center = true);\n        }\n}\n\n// Create the stem\nmodule stem() {\n    translate([0, 0, t_height-3])\n        rotate([0, 15, 0])\n            cylinder(h = stem_len, d1 = 5, d2 = 3);\n}\n\n// Create calyx (sepals) with 5 petals\nmodule calyx() {\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, calyx_size/3, t_height+stem_len-2])\n                rotate([30, 0, 0])\n                    scale([0.4, 1, 0.2])\n                        sphere(d = calyx_size);\n        }\n    }\n}\n\n// Add subtle surface texture with small bumps\nmodule surface_texture() {\n    for(i = [0:15]) {\n        angle = i * 24;\n        for(j = [0:7]) {\n            height = j * 8 + 5;\n            rotate([0, 0, angle])\n                translate([t_width/2 * 0.85, 0, height])\n                    sphere(d = 3);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main fruit body\n    tamarillo();\n    \n    // Stem\n    color(\"brown\")\n        stem();\n    \n    // Calyx\n    color(\"darkgreen\")\n        calyx();\n    \n    // Surface texture\n    color(\"red\")  // Tamarillo color\n        %surface_texture();\n}\n\n// Add a small flat base for printing\ntranslate([0, 0, 1])\n    cylinder(h = 2, d = 25);",
    "renders": true
  },
  {
    "fruit": "pepino",
    "openscad_code": "// Pepino Melon - Realistic Medium Complexity\n// Size: ~80mm length, optimized for 3D printing\n\n$fn = 32;\n\nmodule pepino_body() {\n    // Main body with characteristic elongated shape\n    difference() {\n        scale([1, 0.8, 1.2])\n            sphere(d = 60, center = true);\n        \n        // Flatten the bottom slightly\n        translate([0, 0, -31])\n            cube([70, 70, 10], center = true);\n    }\n}\n\nmodule longitudinal_stripes() {\n    // Create 4-6 longitudinal purple stripes\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 29.5, 0])\n                scale([0.15, 1, 1.2])\n                    cylinder(h = 72, d = 3, center = true);\n    }\n}\n\nmodule stem_end() {\n    // Stem attachment point with slight indentation\n    translate([0, 0, 35])\n        difference() {\n            cylinder(h = 8, d1 = 8, d2 = 6, center = false);\n            translate([0, 0, 4])\n                cylinder(h = 5, d1 = 4, d2 = 6, center = false);\n        }\n}\n\nmodule blossom_end() {\n    // Slight protrusion at blossom end\n    translate([0, 0, -36])\n        sphere(d = 8);\n}\n\nmodule surface_texture() {\n    // Small bumps covering the surface\n    for(i = [0:25]) {\n        angle1 = i * 137.5;\n        angle2 = i * 73.2;\n        r = 29 - (i * 0.8);\n        z = sin(i * 15) * 15;\n        \n        translate([\n            cos(angle1) * sin(angle2) * r,\n            sin(angle1) * sin(angle2) * r,\n            cos(angle2) * r + z\n        ])\n            sphere(d = 1.5);\n    }\n}\n\nmodule pepino_complete() {\n    union() {\n        // Main body\n        pepino_body();\n        \n        // Purple longitudinal stripes\n        color(\"purple\")\n            longitudinal_stripes();\n        \n        // Stem end\n        color(\"darkgreen\")\n            stem_end();\n        \n        // Blossom end\n        color(\"green\")\n            blossom_end();\n        \n        // Surface texture\n        color(\"lightgreen\")\n            surface_texture();\n    }\n}\n\n// Render the complete pepino\npepino_complete();",
    "renders": true
  },
  {
    "fruit": "melongena",
    "openscad_code": "// Melongena (Eggplant) - Realistic Style, Medium Complexity\n// Overall size ~70mm tall, 3D printable with no overhangs\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nstem_d = 6;\nstem_h = 15;\nbody_h = 55;\nbody_max_d = 35;\ncalyx_d = 15;\nwall_t = 1.5;\n\nmodule stem() {\n    // Main stem cylinder\n    translate([0, 0, body_h + stem_h/2]) \n        cylinder(h = stem_h, d1 = stem_d, d2 = stem_d * 0.8, center = true);\n    \n    // Stem cap detail\n    translate([0, 0, body_h + stem_h]) \n        sphere(d = stem_d * 1.2);\n    \n    // Small leaf-like structures\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([stem_d/2, 0, body_h + stem_h - 3])\n            rotate([90, 0, 0])\n            scale([0.4, 1.5, 0.2])\n                cylinder(h = 8, d = stem_d, center = true);\n    }\n}\n\nmodule body() {\n    // Main body - egg shaped\n    translate([0, 0, body_h/2])\n        scale([1, 1, 1.3])\n            sphere(d = body_max_d);\n    \n    // Lower bulge for realistic shape\n    translate([0, 0, body_h * 0.3])\n        scale([1.1, 1.1, 0.8])\n            sphere(d = body_max_d * 0.9);\n}\n\nmodule calyx() {\n    // Calyx (green crown) at top\n    difference() {\n        // Main calyx shape\n        translate([0, 0, body_h - 2])\n            cylinder(h = 5, d1 = calyx_d, d2 = calyx_d * 1.2);\n        \n        // Hollow center for stem\n        translate([0, 0, body_h - 3])\n            cylinder(h = 7, d = stem_d * 0.8);\n    }\n    \n    // Calyx segments\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([0, calyx_d/2 * 0.8, body_h])\n            rotate([90 - 30, 0, 0])\n            scale([0.3, 1, 0.1])\n                cylinder(h = 8, d = calyx_d);\n    }\n}\n\nmodule texture() {\n    // Subtle vertical grooves for realism\n    for(i = [0:20:340]) {\n        rotate([0, 0, i])\n        translate([body_max_d/2 - wall_t, 0, body_h/2])\n            scale([0.1, 1, 1.1])\n                sphere(d = body_max_d * 0.95);\n    }\n}\n\n// Build the eggplant\nunion() {\n    // Main body\n    difference() {\n        union() {\n            body();\n            calyx();\n        }\n        \n        // Hollow for 3D printing\n        translate([0, 0, wall_t])\n            scale([0.85, 0.85, 0.9])\n                body();\n    }\n    \n    // Stem\n    stem();\n    \n    // Surface texture\n    texture();\n}",
    "renders": true
  },
  {
    "fruit": "horned",
    "openscad_code": "// Realistic Horned Owl - Medium Complexity\n// Designed for 3D printing with no overhangs\n\nmodule owl_body() {\n    // Main body - slightly flattened sphere\n    scale([1, 0.8, 1.2])\n    sphere(20, $fn=50);\n}\n\nmodule head() {\n    // Owl head - slightly elongated sphere\n    translate([0, -5, 22])\n    scale([1.1, 1, 1.1])\n    sphere(18, $fn=50);\n}\n\nmodule beak() {\n    // Triangular beak pointing downward\n    translate([0, -8, 15])\n    rotate([0, 0, 180])\n    cylinder(h1=6, h2=0, r1=3, r2=0, $fn=3);\n}\n\nmodule eye() {\n    // Eye with pupil\n    difference() {\n        // Yellow iris\n        color([1, 0.8, 0])\n        sphere(4, $fn=20);\n        // Black pupil\n        translate([0, 0, 3.9])\n        color([0, 0, 0])\n        sphere(2, $fn=15);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([6, -5, 22])\n    eye();\n    // Right eye\n    translate([-6, -5, 22])\n    eye();\n}\n\nmodule ear_tuft() {\n    // Horn-like ear tufts\n    rotate([0, -20, 0])\n    scale([0.3, 0.3, 1])\n    cylinder(h=12, r1=4, r2=1, $fn=8);\n    translate([0, 0, 10])\n    rotate([0, -30, 0])\n    scale([0.25, 0.25, 0.8])\n    cylinder(h=8, r1=3, r=1, $fn=6);\n}\n\nmodule ear_tufts() {\n    // Left tuft\n    translate([12, 0, 28])\n    rotate([0, 0, -30])\n    ear_tuft();\n    \n    // Right tuft\n    translate([-12, 0, 28])\n    rotate([0, 0, 30])\n    mirror([1, 0, 0])\n    ear_tuft();\n}\n\nmodule wing() {\n    // Simplified wing shape\n    rotate([0, -20, 20])\n    scale([1, 0.3, 0.8])\n    cylinder(h=25, r1=8, r2=2, $fn=20);\n}\n\nmodule wings() {\n    // Left wing\n    translate([15, 0, 5])\n    wing();\n    \n    // Right wing\n    translate([-15, 0, 5])\n    mirror([1, 0, 0])\n    wing();\n}\n\nmodule tail() {\n    // Fan-shaped tail\n    translate([0, 15, -15])\n    rotate([90, 0, 0])\n    cylinder(h=2, r1=12, r2=8, $fn=20);\n}\n\nmodule feet() {\n    // Simple talons\n    for (x = [-8, 8]) {\n        translate([x, 0, -20])\n        scale([0.5, 1, 1])\n        cylinder(h=5, r=3, $fn=8);\n    }\n}\n\n// Assemble the owl\nunion() {\n    owl_body();\n    head();\n    beak();\n    eyes();\n    ear_tufts();\n    wings();\n    tail();\n    feet();\n}",
    "renders": true
  },
  {
    "fruit": "kiwano",
    "openscad_code": "// Kiwano (horned melon) - realistic style, medium complexity\n// Dimensions: ~80mm long, ~60mm diameter\n\n// Parameters\nkiwano_length = 80;\nkiwano_diameter = 60;\nwall_thickness = 2;\nhorn_count = 10;\nhorn_height = 15;\nhorn_base = 5;\nscale_detail = 0.3;\n\n// Main body module\nmodule kiwano_body() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 0.9, 1.1])\n        sphere(d=kiwano_diameter, $fn=60);\n        \n        // Hollow out inside\n        scale([1-wall_thickness/kiwano_diameter, \n               0.9-wall_thickness/kiwano_diameter, \n               1.1-wall_thickness/kiwano_diameter])\n        sphere(d=kiwano_diameter-0.5, $fn=60);\n    }\n}\n\n// Horn module with organic shape\nmodule horn(height, base) {\n    union() {\n        // Base cone\n        cylinder(h=height*0.7, d1=base, d2=base*0.5, $fn=8);\n        \n        // Tapered top\n        translate([0,0,height*0.7])\n        cylinder(h=height*0.3, d1=base*0.5, d2=base*0.2, $fn=6);\n    }\n}\n\n// Surface bump texture\nmodule surface_bumps() {\n    for(i=[0:5:350]) {\n        rotate([0, 0, i]) {\n            translate([kiwano_diameter/2-1, 0, 0])\n            scale([1, 0.7, 0.5])\n            sphere(d=3, $fn=12);\n        }\n    }\n}\n\n// Create the complete kiwano\nunion() {\n    // Main body\n    kiwano_body();\n    \n    // Add surface texture by scaling body slightly\n    scale([1+scale_detail, 1+scale_detail*0.8, 1+scale_detail*0.9])\n    kiwano_body();\n    \n    // Horns - distributed around body\n    for(i=[0:360/horn_count:359]) {\n        rotate([0, 0, i]) {\n            // Top horns\n            translate([kiwano_diameter/2-horn_base/2, 0, kiwano_length/3])\n            rotate([90, 0, 0])\n            horn(horn_height, horn_base);\n            \n            // Bottom horns\n            translate([kiwano_diameter/2-horn_base/2, 0, -kiwano_length/3])\n            rotate([-90, 0, 0])\n            horn(horn_height*0.8, horn_base*0.9);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, kiwano_length/2+2])\n    sphere(d=kiwano_diameter/4, $fn=20);\n    \n    translate([0, 0, -kiwano_length/2-2])\n    sphere(d=kiwano_diameter/4, $fn=20);\n}",
    "renders": true
  },
  {
    "fruit": "hornedmelon",
    "openscad_code": "// Horned Melon (Cucumis metuliferus) – medium-complexity realistic model\n// ~70 mm long, printable as one solid piece, no support needed\n\n$fn = 36;\n\n// Overall melon body\nmodule melon_body() {\n    difference() {\n        // Main ellipsoidal fruit\n        scale([1, 0.9, 1.2])\n            sphere(d = 60);          // 60 mm diameter\n        // Stem cavity\n        translate([0, 0, 35])\n            cylinder(d1 = 12, d2 = 8, h = 10, $fn = 24);\n    }\n}\n\n// Single horn/spike\nmodule spike(len = 12, base = 3.5) {\n    // Tapered cone with flat tip for printability\n    cylinder(h = len, d1 = base, d2 = 0.8, $fn = 8);\n}\n\n// Distributed spikes covering the surface\nmodule all_spikes() {\n    // Parameters for geodesic-like distribution\n    n_circ = 8;          // Number of latitude rings\n    spike_per_ring = [8, 11, 14, 16, 14, 11, 8, 5];\n    lat_step = 180 / (n_circ + 1);\n\n    for (ring = [0 : n_circ - 1]) {\n        lat = -90 + (ring + 1) * lat_step;\n        for (i = [0 : spike_per_ring[ring] - 1]) {\n            lon = i * 360 / spike_per_ring[ring];\n            translate(spherical_to_cartesian(30, lat, lon))\n                rotate([0, 90 - lat, lon])\n                    spike(len = 8 + 4 * sin(lat + 90), base = 3);\n        }\n    }\n}\n\n// Convert spherical to cartesian coordinates (r, lat, lon -> x,y,z)\nfunction spherical_to_cartesian(r, lat, lon) = [\n    r * cos(lat) * cos(lon),\n    r * cos(lat) * sin(lon),\n    r * sin(lat)\n];\n\n// Optional base ring for bed adhesion\nmodule base_ring() {\n    translate([0, 0, -36])\n        cylinder(h = 2, d = 64, $fn = 48);\n}\n\n// Assembly\nunion() {\n    melon_body();\n    all_spikes();\n    base_ring();\n}",
    "renders": true
  },
  {
    "fruit": "african",
    "openscad_code": "// African Bust - Realistic Medium Complexity\n// Overall height: 80mm, printable without supports\n\n// Skin tone - darker brown\nskin_color = [0.3, 0.2, 0.15];\n\n// Head module\nmodule head() {\n    color(skin_color) {\n        // Main head shape - oval\n        translate([0, 0, 40]) {\n            scale([1, 1.1, 1.3]) sphere(15, $fn=32);\n        }\n        \n        // Forehead extension\n        translate([0, 0, 55]) {\n            scale([0.8, 0.9, 0.4]) sphere(10, $fn=32);\n        }\n        \n        // Jaw and chin\n        translate([0, 0, 25]) {\n            scale([0.9, 1, 0.8]) sphere(12, $fn=32);\n        }\n    }\n}\n\n// Nose module\nmodule nose() {\n    color(skin_color) {\n        // Bridge\n        translate([0, 12, 45]) {\n            rotate([90, 0, 0]) cylinder(h=8, r1=3, r2=2, $fn=16);\n        }\n        \n        // Tip\n        translate([0, 20, 42]) {\n            sphere(3, $fn=16);\n        }\n        \n        // Nostrils\n        for(x = [-2, 2]) {\n            translate([x, 19, 40]) {\n                rotate([90, 0, 0]) cylinder(h=2, r=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    // Eye sockets\n    for(x = [-5.5, 5.5]) {\n        color(skin_color) {\n            translate([x, 12, 48]) {\n                sphere(3.5, $fn=16);\n            }\n        }\n        \n        // Eyeballs\n        color([0.1, 0.1, 0.1]) {\n            translate([x, 13, 48]) {\n                sphere(2, $fn=16);\n            }\n        }\n        \n        // Eyelids\n        color(skin_color) {\n            translate([x, 13, 50]) {\n                scale([1.2, 1, 0.3]) sphere(3, $fn=16);\n            }\n        }\n    }\n}\n\n// Lips module\nmodule lips() {\n    color([0.2, 0.12, 0.1]) {\n        // Upper lip\n        translate([0, 19, 38]) {\n            scale([1.2, 0.3, 0.5]) sphere(4, $fn=16);\n        }\n        \n        // Lower lip\n        translate([0, 21, 36]) {\n            scale([1.3, 0.4, 0.6]) sphere(4, $fn=16);\n        }\n    }\n}\n\n// Ears module\nmodule ears() {\n    color(skin_color) {\n        for(x = [-16, 16]) {\n            translate([x, 5, 45]) {\n                rotate([0, x/16 * 15, 0]) {\n                    scale([0.3, 1, 1.2]) sphere(5, $fn=16);\n                }\n            }\n            \n            // Ear hole\n            translate([x * 1.1, 5, 45]) {\n                rotate([0, x/16 * 15, 0]) {\n                    cylinder(h=3, r=1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Neck module\nmodule neck() {\n    color(skin_color) {\n        translate([0, 0, 15]) {\n            scale([0.7, 0.8, 1]) cylinder(h=15, r=8, $fn=32);\n        }\n    }\n}\n\n// Hair module - short afro texture\nmodule hair() {\n    color([0.08, 0.06, 0.05]) {\n        // Main hair volume\n        translate([0, 0, 55]) {\n            scale([1.1, 1.15, 1.1]) sphere(16, $fn=32);\n        }\n        \n        // Hair texture - small spheres\n        for(i = [0:359]) {\n            for(j = [0:30]) {\n                rotate([i, 0, 0]) {\n                    rotate([0, j * 6, 0]) {\n                        translate([15 * sin(j * 6), 0, 55 + 15 * cos(j * 6)]) {\n                            sphere(0.5, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Shoulders base\nmodule shoulders() {\n    color(skin_color) {\n        translate([0, -5, 0]) {\n            scale([1.5, 1, 0.3]) sphere(20, $fn=32);\n        }\n        \n        // Chest\n        translate([0, -10, 5]) {\n            scale([1.2, 1.5, 0.8]) sphere(15, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    shoulders();\n    neck();\n    head();\n    nose();\n    eyes();\n    lips();\n    ears();\n    hair();\n}\n\n// Base for stability\ntranslate([0, -15, -5]) {\n    color([0.4, 0.3, 0.2]) {\n        cylinder(h=5, r=25, $fn=64);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "hornedcucumber",
    "openscad_code": "// Horned Cucumber (Kiwano) - Realistic medium complexity\n// Overall length ~80mm, printable without supports\n\n$fn = 36;  // Smooth curves\n\n// Main body parameters\nbody_len = 70;\nbody_dia = 35;\nwall_thick = 1.5;\n\n// Horn parameters\nhorn_base = 3.5;\nhorn_tip = 0.8;\nhorn_len = 8;\nhorn_angles = [15, 25, 35];  // Different angles for variety\n\n// Internal cavity for hollowing\nmodule inner_cavity() {\n    translate([0, 0, -5])\n        scale([0.85, 0.85, 0.9])\n        sphere(d = body_dia - wall_thick*2);\n}\n\n// Main ellipsoid body\nmodule cucumber_body() {\n    difference() {\n        // Outer skin with bumps\n        union() {\n            scale([1, 0.85, 1.2])\n                sphere(d = body_dia);\n            \n            // Skin bumps - small spheres\n            for (i = [0:5:350]) {\n                rotate([0, 0, i])\n                    translate([body_dia/2 - 1, 0, sin(i*3)*5])\n                        sphere(d = 2.5);\n            }\n        }\n        \n        // Hollow inside\n        inner_cavity();\n    }\n}\n\n// Single horn module\nmodule horn(angle, rot) {\n    translate([0, 0, body_len/2 - 10])\n        rotate([angle, rot, 0])\n            translate([body_dia/2 - 1, 0, 0])\n                cylinder(h1 = horn_len, r1 = horn_base, r2 = horn_tip);\n}\n\n// All horns around body\nmodule all_horns() {\n    for (ring = [0:1]) {\n        for (i = [0:30:359]) {\n            rotate([0, 0, i + ring*15])\n                horn(horn_angles[ring], i/3);\n        }\n    }\n}\n\n// Stem end\nmodule stem_end() {\n    translate([0, 0, body_len/2])\n        cylinder(h = 5, r1 = 5, r2 = 3);\n}\n\n// Bottom navel\nmodule bottom_navel() {\n    translate([0, 0, -body_len/2])\n        rotate_extrude()\n            polygon(points=[[0,0],[4,0],[3,-2],[0,-1]]);\n}\n\n// Final assembly\nunion() {\n    cucumber_body();\n    all_horns();\n    stem_end();\n    bottom_navel();\n}",
    "renders": true
  },
  {
    "fruit": "bitter",
    "openscad_code": "// Realistic style bitter (beetle) - medium complexity\n// Body length ~60mm, printable without supports\n\n$fn = 36; // Smooth curves for realism\n\nmodule antenna() {\n    // Wire antenna with 3 segments\n    rotate([0, 0, -30]) {\n        cylinder(h=8, d1=0.8, d2=0.4);\n        translate([0, 0, 7.5]) rotate([15, 0, 0]) \n            cylinder(h=7, d1=0.6, d2=0.3);\n        translate([0, -1, 13.5]) rotate([25, 0, 0]) \n            cylinder(h=6, d1=0.4, d2=0.2);\n    }\n}\n\nmodule leg(side, position) {\n    // Six legs with realistic joint angles\n    translate([0, side*10, position*8-8]) {\n        rotate([0, -60, side*25]) {\n            cylinder(h=12, d1=3, d2=2.5); // Femur\n            translate([0, -10, 9]) rotate([0, 30, 0])\n                cylinder(h=10, d1=2.5, d2=2); // Tibia\n            translate([0, -8, 16]) rotate([0, 45, 0])\n                cylinder(h=8, d1=2, d2=1.5); // Tarsus\n        }\n    }\n}\n\nmodule elytra() {\n    // Wing covers with subtle texture lines\n    difference() {\n        scale([1.3, 0.7, 0.4]) \n            sphere(d=35);\n        translate([0, 0, -2]) \n            cube([40, 40, 10], center=true);\n    }\n    // Surface ridges\n    for(i = [-2:1:2]) {\n        translate([i*5, 0, 0]) \n            rotate([90, 0, 0]) \n                cylinder(h=25, d=0.5);\n    }\n}\n\nmodule thorax() {\n    // Main body segment\n    union() {\n        // Prothorax\n        translate([0, 0, 5]) \n            scale([1.2, 1, 0.8]) \n                sphere(d=20);\n        \n        // Mesothorax\n        translate([-8, 0, 8]) \n            scale([1.4, 1.1, 0.9]) \n                sphere(d=22);\n        \n        // Metathorax\n        translate([-16, 0, 9]) \n            scale([1.3, 1.2, 0.8]) \n                sphere(d=20);\n    }\n}\n\nmodule head() {\n    // Realistic head with compound eyes\n    translate([15, 0, 10]) {\n        rotate([0, 10, 0]) {\n            // Main head capsule\n            scale([0.9, 1, 0.8]) \n                sphere(d=18);\n            \n            // Compound eyes (faceted)\n            for(i = [1:18]) {\n                rotate([0, 0, i*20]) \n                    translate([8, 0, 0]) \n                        sphere(d=4);\n            }\n            \n            // Mandibles\n            translate([7, 3, -2]) rotate([0, 0, -20]) \n                scale([1, 0.5, 0.3]) \n                    sphere(d=6);\n            translate([7, -3, -2]) rotate([0, 0, 20]) \n                scale([1, 0.5, 0.3]) \n                    sphere(d=6);\n        }\n    }\n}\n\nmodule abdomen() {\n    // Segmented abdomen\n    union() {\n        for(i = [0:5]) {\n            translate([-25-i*3, 0, 6-i]) \n                scale([1.3-i*0.1, 1.2-i*0.05, 0.7]) \n                    sphere(d=20-i*2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Legs (3 pairs)\n    for(side = [-1, 1]) {\n        for(pos = [0, 1, 2]) {\n            leg(side, pos);\n        }\n    }\n    \n    // Body segments\n    head();\n    translate([0, 0, 8]) thorax();\n    translate([0, 0, 5]) elytra();\n    abdomen();\n    \n    // Antennae\n    translate([15, 0, 15]) rotate([0, 20, 0]) antenna();\n    translate([15, 0, 15]) mirror([0, 1, 0]) rotate([0, 20, 0]) antenna();\n}",
    "renders": true
  },
  {
    "fruit": "balsam",
    "openscad_code": "// Balsam - realistic style, medium complexity\n// Approx 70 mm tall, 3D-printable\n\n$fn = 36;  // smoother curves\n\n// Parameters\nstem_d = 5;\nstem_h = 40;\nleaf_l = 18;\nleaf_w = 8;\nleaf_t = 1.2;\nflower_d = 25;\nflower_h = 12;\npetal_l = 12;\npetal_w = 6;\ncenter_d = 6;\n\n// Main stem\nmodule stem() {\n    // Main vertical\n    cylinder(d1 = stem_d, d2 = stem_d*0.8, h = stem_h);\n    \n    // Small side shoots\n    for (i = [1:3]) {\n        translate([0, 0, i*stem_h/4])\n        rotate([0, 90, 60*i])\n        cylinder(d1 = stem_d*0.6, d2 = 0.5, h = stem_h/4);\n    }\n}\n\n// Leaf with midrib\nmodule leaf() {\n    difference() {\n        // Leaf blade\n        scale([1, leaf_w/leaf_l, 1])\n        sphere(d = leaf_l);\n        \n        // Taper ends\n        translate([leaf_l/2, 0, 0])\n        cube([leaf_l/2+1, leaf_w+1, leaf_t*2], center = true);\n        \n        // Midrib groove\n        translate([0, 0, -leaf_t/2])\n        cube([leaf_l, leaf_w/6, leaf_t+0.2], center = true);\n    }\n}\n\n// Single petal\nmodule petal() {\n    scale([1, petal_w/petal_l, 0.4])\n    sphere(d = petal_l);\n}\n\n// Flower head\nmodule flower() {\n    // Center disc\n    translate([0, 0, flower_h/2])\n    cylinder(d = center_d, h = flower_h, $fn = 32);\n    \n    // Petals around center\n    for (a = [0:45:359]) {\n        rotate([0, 0, a])\n        translate([flower_d/2 - petal_l/2, 0, flower_h/2])\n        petal();\n    }\n    \n    // Back cup\n    translate([0, 0, 0])\n    cylinder(d1 = flower_d, d2 = flower_d*0.7, h = flower_h/2);\n}\n\n// Assembly\ntranslate([0, 0, 0])\nstem();\n\n// Leaves in pairs\nfor (i = [1:2]) {\n    ang = i*120;\n    translate([0, 0, i*stem_h/3])\n    rotate([0, 0, ang])\n    translate([stem_d/2, 0, 0])\n    rotate([0, 90, -20])\n    leaf();\n    \n    translate([0, 0, i*stem_h/3])\n    rotate([0, 0, ang+180])\n    translate([stem_d/2, 0, 0])\n    rotate([0, 90, -20])\n    mirror([0, 1, 0])\n    leaf();\n}\n\n// Flower on top\ntranslate([0, 0, stem_h])\nflower();",
    "renders": true
  },
  {
    "fruit": "sweetsop",
    "openscad_code": "// Sweetsop (Annona squamosa) – realistic medium-complexity model\n// Overall height ≈ 70 mm, printable without supports\n\n$fn = 60;           // global smoothness\nfruit_d = 55;       // main fruit sphere diameter\nscale_factor = 1.1; // squash it slightly for natural shape\nsegment_count = 35; // number of knobby segments\nwall = 1.6;         // printable wall thickness\n\n// Main fruit body (slightly flattened sphere)\nmodule fruit_body() {\n    scale([1, 1, scale_factor])\n        sphere(d = fruit_d);\n}\n\n// Single segment knob\nmodule knob() {\n    // teardrop shape for each bump\n    hull() {\n        sphere(d = 8);\n        translate([0, 0, 6]) sphere(d = 4);\n    }\n}\n\n// Array of knobs around the surface\nmodule knobby_surface() {\n    for (i = [0 : segment_count - 1]) {\n        // golden-angle spiral distribution\n        theta = i * 137.508;\n        phi   = acos(1 - 2*(i + 0.5)/segment_count);\n        x = (fruit_d/2) * cos(theta) * sin(phi);\n        y = (fruit_d/2) * sin(theta) * sin(phi);\n        z = (fruit_d/2) * scale_factor * cos(phi);\n\n        translate([x, y, z])\n            rotate([0, 0, theta])\n            rotate([90 - phi, 0, 0])\n            knob();\n    }\n}\n\n// Flower remnant (persistent calyx) on top\nmodule calyx() {\n    // central raised ring\n    cylinder(h = 3, d1 = 10, d2 = 12, $fn = 24);\n    // short stub of the peduncle\n    translate([0, 0, 3])\n        cylinder(h = 5, d = 6, $fn = 24);\n}\n\n// Create hollow shell suitable for printing\nmodule hollow_fruit() {\n    difference() {\n        union() {\n            // outer skin with knobs\n            difference() {\n                fruit_body();\n                // remove core for hollowing\n                scale([0.8, 0.8, 0.8 * scale_factor])\n                    sphere(d = fruit_d);\n            }\n            knobby_surface();\n        }\n        // large inner cavity\n        scale([0.84, 0.84, 0.84 * scale_factor])\n            sphere(d = fruit_d);\n    }\n}\n\n// Assemble the model\ntranslate([0, 0, fruit_d/2 * scale_factor])\n    hollow_fruit();\n\n// add calyx on top\ntranslate([0, 0, fruit_d * scale_factor])\n    calyx();",
    "renders": true
  },
  {
    "fruit": "bullock",
    "openscad_code": "$fa=1; $fs=0.8;\n\n// Overall scale factor\nSCALE = 0.6;\n\n// Body\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            scale([1.2, 0.8, 1]) sphere(d=40 * SCALE);\n            // Chest extension\n            translate([15 * SCALE, 0, -5 * SCALE])\n                scale([1.4, 0.9, 0.7]) sphere(d=25 * SCALE);\n            // Rump\n            translate([-15 * SCALE, 0, -3 * SCALE])\n                scale([1, 0.9, 0.8]) sphere(d=30 * SCALE);\n        }\n        // Underbelly flattening\n        translate([0, 0, -20 * SCALE])\n            cube([60 * SCALE, 30 * SCALE, 20 * SCALE], center=true);\n    }\n}\n\n// Head\nmodule head() {\n    translate([30 * SCALE, 0, 10 * SCALE]) {\n        rotate([0, 10, 0]) {\n            difference() {\n                union() {\n                    // Skull\n                    scale([1.2, 0.8, 0.9]) sphere(d=20 * SCALE);\n                    // Snout\n                    translate([12 * SCALE, 0, -3 * SCALE])\n                        scale([1.5, 0.8, 0.7]) sphere(d=12 * SCALE);\n                }\n                // Eye sockets\n                for (side = [-1, 1])\n                    translate([8 * SCALE, side * 7 * SCALE, 4 * SCALE])\n                        sphere(d=5 * SCALE);\n            }\n            // Horns\n            for (side = [-1, 1]) {\n                translate([5 * SCALE, side * 6 * SCALE, 10 * SCALE]) {\n                    rotate([0, 30, side * 20])\n                        cylinder(h=15 * SCALE, d1=4 * SCALE, d2=2 * SCALE);\n                }\n            }\n            // Eyes\n            for (side = [-1, 1]) {\n                translate([8 * SCALE, side * 7 * SCALE, 4 * SCALE])\n                    color(\"black\") sphere(d=3 * SCALE);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for (x = [20, -20], side = [-1, 1]) {\n        translate([x * SCALE, side * 12 * SCALE, -15 * SCALE]) {\n            rotate([10, 0, 0])\n                cylinder(h=35 * SCALE, d1=8 * SCALE, d2=6 * SCALE);\n            // Hoof\n            translate([0, 0, -35 * SCALE])\n                cylinder(h=4 * SCALE, d=8 * SCALE);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-35 * SCALE, 0, 0]) {\n        rotate([0, 30, 0])\n            cylinder(h=25 * SCALE, d=4 * SCALE);\n        // Tail tuft\n        translate([-22 * SCALE, 0, 12 * SCALE])\n            sphere(d=6 * SCALE);\n    }\n}\n\n// Ears\nmodule ears() {\n    for (side = [-1, 1]) {\n        translate([23 * SCALE, side * 8 * SCALE, 15 * SCALE]) {\n            rotate([0, 20, side * 20])\n                scale([0.5, 2, 0.1])\n                    sphere(d=8 * SCALE);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    ears();\n}",
    "renders": true
  },
  {
    "fruit": "chempedak",
    "openscad_code": "// Chempedak model - medium realism\n// Overall dimensions: ~80mm long, ~50mm diameter\n\n$fn = 48;  // Smooth curves for 3D printing\n\nmodule chempedak_body() {\n    // Main body - ellipsoid with slight taper\n    difference() {\n        scale([1, 0.8, 1.2]) sphere(d = 45);\n        // Remove bottom to create flat base\n        translate([0, 0, -25]) cube([100, 100, 50], center = true);\n    }\n}\n\nmodule surface_spikes() {\n    // Create hexagonal pattern of spikes across surface\n    for (a = [0:30:330]) {\n        for (i = [15:15:60]) {\n            // Calculate position on ellipsoid surface\n            theta = a;\n            phi = i;\n            x = 22.5 * cos(theta) * sin(phi);\n            y = 18 * sin(theta) * sin(phi);\n            z = 27 * cos(phi) - 5;\n            \n            translate([x, y, z]) {\n                rotate([0, 90 - phi, theta]) {\n                    // Soft pyramid spike\n                    scale([0.4, 0.4, 1]) \n                        cylinder(h = 5 + sin(phi) * 3, r1 = 2.5, r2 = 0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule stem_end() {\n    // Top stem attachment point\n    translate([0, 0, 25]) {\n        // Stem base\n        cylinder(h = 8, r1 = 4, r2 = 3);\n        translate([0, 0, 8]) {\n            // Stem\n            rotate([90, 0, 0]) \n                cylinder(h = 15, r = 2);\n        }\n    }\n}\n\nmodule bottom_end() {\n    // Bottom tip slightly elongated\n    translate([0, 0, -22]) {\n        scale([1, 1, 1.5]) sphere(d = 15);\n    }\n}\n\nmodule skin_texture() {\n    // Subtle hexagonal pattern on skin\n    for (a = [0:45:315]) {\n        for (r = [20:10:45]) {\n            rotate([0, 0, a]) {\n                translate([r, 0, sin(r/5) * 2]) {\n                    // Shallow hexagonal indentations\n                    scale([1, 0.8, 0.2]) \n                        cylinder(h = 0.5, r = 2.5, $fn = 6);\n                }\n            }\n        }\n    }\n}\n\nmodule fruit_interior() {\n    // Hollow interior for printing\n    difference() {\n        scale([0.9, 0.72, 1.08]) sphere(d = 45);\n        scale([0.85, 0.68, 1.02]) sphere(d = 45);\n    }\n}\n\n// Main model assembly\nunion() {\n    chempedak_body();\n    surface_spikes();\n    stem_end();\n    bottom_end();\n    skin_texture();\n    // Remove interior for hollow print\n    fruit_interior();\n}",
    "renders": true
  },
  {
    "fruit": "champedak",
    "openscad_code": "// Realistic Champedak (Artocarpus integer) - medium complexity\n// Size: ~70 mm long\n\n// Spike module - small cone for fruit surface texture\nmodule spike(height = 3, base = 1.5) {\n    cylinder(h = height, r1 = base, r2 = 0.1, $fn = 8);\n}\n\n// Main fruit body - elongated ellipsoid\nmodule fruit_body() {\n    scale([1, 0.7, 1.3]) \n    sphere(r = 25, $fn = 64);\n}\n\n// Create bumpy surface pattern\nmodule bumpy_surface() {\n    difference() {\n        fruit_body();\n        \n        // Remove material to create bumps\n        for (i = [0:15]) {\n            rotate([0, 90, i * 22.5])\n            translate([0, 25, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 50, r = 2.5, center = true, $fn = 8);\n        }\n    }\n}\n\n// Add spikes to the surface\nmodule spiky_surface() {\n    union() {\n        bumpy_surface();\n        \n        // Spike pattern following fruit curvature\n        for (i = [0:7]) {\n            for (j = [0:11]) {\n                rotate([0, 0, j * 30])\n                rotate([i * 25 - 75, 0, 0])\n                translate([0, 0, 25 - abs(i * 4)])\n                spike(2.5 + sin(i * 15) * 1, 1.2);\n            }\n        }\n    }\n}\n\n// Stem connection point\nmodule stem_base() {\n    translate([0, 0, 32])\n    cylinder(h = 8, r1 = 8, r2 = 6, $fn = 16);\n}\n\n// Main stem\nmodule stem() {\n    translate([0, 0, 40])\n    rotate([0, 0, -10])\n    cylinder(h = 15, r1 = 3, r2 = 2, $fn = 8);\n}\n\n// Leaf scars at stem base\nmodule leaf_scars() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([7, 0, 36])\n        rotate([0, 90, 0])\n        cylinder(h = 3, r1 = 1.5, r2 = 0.5, $fn = 6);\n    }\n}\n\n// Natural indentations\nmodule indentations() {\n    difference() {\n        spiky_surface();\n        \n        // Subtle indentations for realism\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([15, 0, 10])\n            scale([1, 0.5, 0.5])\n            sphere(r = 8, $fn = 16);\n        }\n    }\n}\n\n// Final assembly\nunion() {\n    indentations();\n    stem_base();\n    stem();\n    leaf_scars();\n}",
    "renders": true
  },
  {
    "fruit": "kwai",
    "openscad_code": "/*\n * Realistic Koi Fish (Kwai) - OpenSCAD\n * Length ~75 mm, printable without support\n * All overhangs <=45°, walls >=1.2 mm\n */\n\n$fa = 2; $fs = 0.5;\nmodule kwai() {\n    // Main body\n    difference() {\n        hull() {\n            translate([-35, 0, 0]) scale([1, 0.4, 0.6]) sphere(10);\n            translate([ 35, 0, 0]) scale([0.3, 0.2, 0.3]) sphere(10);\n        }\n        // Carve belly cavity\n        translate([-10, 0, -6]) rotate([0, 15, 0]) cube([60, 20, 8], center=true);\n    }\n\n    // Tail fin\n    module tail_fin() {\n        difference() {\n            hull() {\n                translate([0, 0, 0]) cube([0.1, 0.1, 0.1]);\n                translate([20, 0, 0]) scale([1, 0.5, 1]) sphere(5);\n            }\n            for (i = [0:1]) mirror([0, i?0:1, 0]) {\n                rotate([0, 0, i?-25:25]) translate([10, 0, 0])\n                    cube([25, 0.5, 15], center=true);\n            }\n        }\n    }\n    translate([35, 0, 0]) rotate([0, 0, 180]) tail_fin();\n\n    // Dorsal fin\n    difference() {\n        hull() {\n            translate([-15, 0, 6]) cube([0.1, 0.1, 0.1]);\n            translate([ 5, 0, 6]) cube([0.1, 0.1, 0.1]);\n            translate([-5, 0, 11]) cube([0.1, 0.1, 0.1]);\n        }\n        for (a = [-30:20:30])\n            rotate([a, 0, 0]) translate([0, 0, 8.5]) cube([30, 1, 4], center=true);\n    }\n\n    // Pectoral fins\n    module pectoral_fin(side=1) {\n        rotate([-5, 0, side*10]) hull() {\n            translate([0, 0, 0]) cube([0.1, 0.1, 0.1]);\n            translate([8*side, 0, 0]) scale([1, 0.6, 0.2]) sphere(6);\n        }\n    }\n    translate([-10, 0, -2]) pectoral_fin(1);\n    translate([-10, 0, -2]) pectoral_fin(-1);\n\n    // Head\n    translate([-32, 0, 2]) {\n        // Mouth\n        difference() {\n            sphere(8);\n            translate([2, 0, -3]) cube([10, 8, 6], center=true);\n        }\n        // Eyes\n        for (y = [4,-4]) {\n            translate([0, y, 1]) {\n                color(\"black\") sphere(1.8);\n                translate([0, 0, 1.8]) sphere(0.5);\n            }\n        }\n        // Whiskers\n        for (y = [4,-4]) for (a = [0:60:120])\n            rotate([0, a, 0]) translate([-2, y, 0])\n                cylinder(h=6, d1=1.2, d2=0.5);\n    }\n\n    // Scale pattern\n    for (x = [-25:10:25]) for (y = [-8:5:8]) {\n        if (y != 0) {\n            translate([x, y, 0.5]) rotate([90, 0, 0])\n                cylinder(h=0.4, r1=2.2, r2=1.8);\n        }\n    }\n}\n\nkwai();",
    "renders": true
  },
  {
    "fruit": "rambai",
    "openscad_code": "// Rambai (Baccaurea motleyana) – realistic medium-complexity model\n// Overall size ≈ 70 mm tall × 55 mm wide\n// All walls ≥ 1 mm for 3D printing\n\n$fn = 36;\n\n// Main trunk\nmodule trunk() {\n    union() {\n        // Tapered main stem\n        cylinder(h1 = 40, h2 = 45, r1 = 4, r2 = 3.5, center = false);\n        // Bulge at base\n        translate([0, 0, -2])\n            cylinder(h = 10, r1 = 5.5, r2 = 4.5, center = false);\n    }\n}\n\n// Simple compound leaf (3 leaflets)\nmodule leaflet() {\n    difference() {\n        // Leaf blade\n        scale([1, 3, 0.4])\n            sphere(d = 16);\n        // Mid-rib groove\n        translate([0, -8, 1.2])\n            rotate([90, 0, 0])\n                cylinder(h = 18, r = 1, center = true);\n    }\n}\n\nmodule leaf() {\n    // Petiole\n    color(\"green\")\n    union() {\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 1.2, center = true);\n        // Three leaflets\n        translate([0, 8, 0])\n            rotate([20, 0, 0])\n                leaflet();\n        translate([7, 8, 4])\n            rotate([0, 10, 15])\n                leaflet();\n        translate([-7, 8, 4])\n            rotate([0, -10, -15])\n                leaflet();\n    }\n}\n\n// Single fruit with skin and flesh\nmodule rambai_fruit() {\n    difference() {\n        // Outer yellow-brown skin\n        color(\"goldenrod\")\n        sphere(d = 10);                // 10 mm diameter\n\n        // Inner edible white part\n        color(\"white\")\n        sphere(d = 8);\n    }\n    // Short pedicel\n    translate([0, 0, -5])\n        cylinder(h = 4, r = 1, center = true);\n}\n\n// Cluster of 5-7 fruits on a pendulous raceme\nmodule fruit_cluster() {\n    translate([0, 0, -6])\n        rotate([90, 0, 0])\n            cylinder(h = 18, r = 1.2, center = true);  // Rachis\n    for (i = [0:4]) {\n        a = i * 25;\n        translate([0, -sin(a) * 10, -cos(a) * 10])\n            rotate([90, 0, a])\n                rambai_fruit();\n    }\n}\n\n// Assemble the complete rambai\ntranslate([0, 0, 0])\n    trunk();\n\n// Attach two compound leaves\ntranslate([0, 0, 35])\n    rotate([0, -20, 0])\n        leaf();\ntranslate([0, 0, 30])\n    rotate([0, 30, 180])\n        leaf();\n\n// Two hanging fruit clusters\ntranslate([0, 10, 25])\n    fruit_cluster();\ntranslate([0, -10, 25])\n    fruit_cluster();",
    "renders": true
  },
  {
    "fruit": "lanson",
    "openscad_code": "// Lanson (Lantern) in realistic style, medium complexity\n// Dimensions in mm, designed for 3D printing\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main dimensions\nbase_height = 8;\nbase_diameter = 40;\nbody_height = 50;\nbody_diameter = 35;\ntop_height = 10;\ntop_diameter = 38;\nhandle_height = 40;\nhandle_width = 50;\nhandle_thickness = 4;\n\nmodule base() {\n    // Bottom base with slight taper\n    cylinder(h = base_height, d1 = base_diameter, d2 = base_diameter * 0.9, center = false);\n    \n    // Decorative ring\n    translate([0, 0, base_height - 2])\n        cylinder(h = 2, d = base_diameter * 1.05, center = false);\n}\n\nmodule body() {\n    // Main glass body with realistic thickness\n    difference() {\n        cylinder(h = body_height, d = body_diameter, center = false);\n        translate([0, 0, 2])\n            cylinder(h = body_height - 4, d = body_diameter - 4, center = false);\n    }\n    \n    // Horizontal bars for structure\n    for (i = [1:3]) {\n        translate([0, 0, i * (body_height / 4)])\n            difference() {\n                cylinder(h = 2, d = body_diameter + 2, center = false);\n                cylinder(h = 2.2, d = body_diameter - 2, center = false);\n            }\n    }\n    \n    // Vertical bars\n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([body_diameter/2 - 2, 0, body_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = body_height - 4, d = 2, center = true);\n    }\n}\n\nmodule top() {\n    // Top cap\n    difference() {\n        cylinder(h = top_height, d = top_diameter, center = false);\n        translate([0, 0, 2])\n            cylinder(h = top_height, d = top_diameter - 4, center = false);\n    }\n    \n    // Chimney detail\n    translate([0, 0, top_height])\n        cylinder(h = 5, d1 = top_diameter * 0.6, d2 = top_diameter * 0.4, center = false);\n}\n\nmodule handle() {\n    // Main handle arc\n    rotate([0, 90, 0])\n        translate([-handle_width/2, 0, body_height + top_height/2])\n            difference() {\n                // Outer handle\n                rotate_extrude(angle = 180, $fn = 32)\n                    translate([handle_width/2, 0, 0])\n                        circle(r = handle_thickness);\n                \n                // Inner cutout\n                rotate_extrude(angle = 180, $fn = 32)\n                    translate([handle_width/2, 0, 0])\n                        circle(r = handle_thickness - 2);\n            }\n    \n    // Handle supports\n    for (x = [-handle_width/2 + 5, handle_width/2 - 5]) {\n        translate([x, 0, body_height + top_height - 3])\n            cylinder(h = 6, d = handle_thickness, center = false);\n    }\n}\n\nmodule flame() {\n    // Realistic flame shape\n    translate([0, 0, body_height/2])\n        scale([1, 1, 1.5])\n            sphere(d = body_diameter * 0.6, center = true);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Body\n    translate([0, 0, base_height])\n        body();\n    \n    // Top\n    translate([0, 0, base_height + body_height])\n        top();\n    \n    // Handle\n    handle();\n    \n    // Optional flame (comment out if not desired)\n    %flame();\n}\n\n// Print support base\ntranslate([0, 0, -1])\n    cube([base_diameter * 1.2, base_diameter * 1.2, 1], center = true);",
    "renders": true
  },
  {
    "fruit": "santol",
    "openscad_code": "// OpenSCAD model of a Santol fruit (Sandoricum koetjape)\n// Medium complexity, realistic style, printable\n\n// Overall dimensions\nfruit_d = 65;          // mm diameter at equator\nfruit_h = 55;          // mm height\nwall_t = 2;            // mm printable wall thickness\nseg = 48;              // general $fn for curves\n\n// Stem\nmodule stem() {\n    translate([0,0,fruit_h/2+2])\n        cylinder(h=8, d1=4, d2=2.5, $fn=8);\n}\n\n// Main fruit body – slightly compressed sphere with lobes\nmodule fruit_body() {\n    difference() {\n        // Base ellipsoid\n        scale([1.05, 1.05, 0.9])\n            sphere(d=fruit_d, $fn=seg);\n\n        // Carve out three shallow lobes\n        for(a=[0:120:240])\n            rotate([0,0,a])\n                translate([fruit_d/2*0.6, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h=fruit_d/2, d=fruit_d/2*0.7, $fn=seg);\n    }\n}\n\n// Skin texture – tiny raised bumps\nmodule skin_bumps() {\n    bump_r = 1.2;\n    bump_step = 5;\n    for(i=[-fruit_d/2+bump_step : bump_step : fruit_d/2-bump_step])\n        for(j=[-90:15:90])\n            let(pos = [i, 0, sin(j)*fruit_h/2])\n                translate([pos.x, cos(j)*sqrt(pow(fruit_d/2,2)-pow(pos.x,2))*0.9, pos.z])\n                    sphere(bump_r, $fn=8);\n}\n\n// Create the complete outer fruit\nmodule santol_outer() {\n    union() {\n        fruit_body();\n        stem();\n        skin_bumps();\n    }\n}\n\n// Interior hollow cavity plus seeds\nmodule santol_inner() {\n    difference() {\n        // Hollow out\n        scale([0.9,0.9,0.85])\n            fruit_body();\n\n        // Add four large seeds\n        for(a=[45:90:315])\n            rotate([0,0,a])\n                translate([0, 0, -fruit_h/4])\n                    scale([1,0.7,1.5])\n                        sphere(d=8, $fn=12);\n    }\n}\n\n// Assemble the printable fruit as two halves\n// Top half\ntranslate([0, 0, 0])\n    difference() {\n        santol_outer();\n        translate([0,0,-fruit_h/4-wall_t])\n            cube([fruit_d*2, fruit_d*2, fruit_h/2+wall_t], center=true);\n    }\n\n// Bottom half (mirrored for printing)\ntranslate([0, fruit_d+10, 0])\n    mirror([0,0,1])\n        difference() {\n            santol_outer();\n            translate([0,0,fruit_h/4])\n                cube([fruit_d*2, fruit_d*2, fruit_h/2+wall_t], center=true);\n            santol_inner();\n        }",
    "renders": true
  },
  {
    "fruit": "santor",
    "openscad_code": "// Santor OpenSCAD Model (realistic, medium complexity)\n// Overall height ≈ 60 mm, width ≈ 48 mm, depth ≈ 30 mm\n\n// Helper for rounded edges\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (dx = [radius, size.x - radius])\n            for (dy = [radius, size.y - radius])\n                for (dz = [radius, size.z - radius])\n                    translate([dx, dy, dz])\n                        sphere(r = radius, $fn = 8);\n    }\n}\n\n// Main body\nmodule santor_body() {\n    difference() {\n        union() {\n            // Torso\n            translate([0, 0, 10])\n                scale([1.6, 1, 1])\n                sphere(d = 30, $fn = 32);\n\n            // Abdomen\n            translate([0, -5, 0])\n                scale([1.2, 0.9, 1.3])\n                sphere(d = 20, $fn = 32);\n\n            // Neck\n            translate([0, 8, 20])\n                cylinder(d1 = 12, d2 = 10, h = 8, $fn = 16);\n        }\n\n        // Cut out underside\n        translate([0, -8, -2])\n            cube([40, 20, 6], center = true);\n    }\n}\n\n// Head\nmodule santor_head() {\n    difference() {\n        union() {\n            // Skull\n            translate([0, 10, 29])\n                sphere(d = 22, $fn = 32);\n\n            // Snout\n            translate([0, 20, 27])\n                scale([0.7, 1.8, 1])\n                sphere(d = 14, $fn = 32);\n\n            // Brow ridges\n            translate([-6, 12, 31])\n                sphere(d = 6, $fn = 12);\n            translate([6, 12, 31])\n                sphere(d = 6, $fn = 12);\n        }\n\n        // Eye sockets\n        translate([-5, 15, 31])\n            sphere(d = 5, $fn = 12);\n        translate([5, 15, 31])\n            sphere(d = 5, $fn = 12);\n\n        // Nostrils\n        translate([-2, 23, 27])\n            rotate([90, 0, 0])\n                cylinder(d = 2, h = 4, $fn = 8);\n        translate([2, 23, 27])\n            rotate([90, 0, 0])\n                cylinder(d = 2, h = 4, $fn = 8);\n    }\n}\n\n// Legs (four)\nmodule leg(posX, posY, rotZ) {\n    translate([posX, posY, 0])\n        rotate([0, 0, rotZ])\n        difference() {\n            union() {\n                // Upper leg\n                translate([0, -6, 5])\n                    rotate([-30, 0, 0])\n                    cylinder(d1 = 8, d2 = 6, h = 12, $fn = 12);\n\n                // Lower leg\n                translate([0, -10, -2])\n                    rotate([30, 0, 0])\n                    cylinder(d1 = 6, d2 = 5, h = 10, $fn = 12);\n\n                // Hoof\n                translate([0, -12, -7])\n                    rotate([90, 0, 0])\n                    cylinder(d1 = 5, d2 = 4, h = 3, $fn = 8);\n            }\n\n            // Hollow for printing\n            translate([0, -6, 2])\n                rotate([-30, 0, 0])\n                cylinder(d = 4, h = 12, $fn = 8);\n        }\n}\n\n// Arms (two)\nmodule arm(posX) {\n    translate([posX, 4, 18])\n        rotate([0, 0, posX > 0 ? 20 : -20])\n        difference() {\n            union() {\n                // Upper arm\n                rotate([90, 0, 0])\n                    cylinder(d = 6, h = 10, $fn = 12);\n\n                // Forearm\n                translate([0, 0, -10])\n                    rotate([45, 0, 0])\n                    cylinder(d = 5, h = 8, $fn = 12);\n\n                // Hand\n                translate([0, -5, -15])\n                    rounded_cube([6, 8, 4], 2);\n            }\n\n            // Hollow for printing\n            rotate([90, 0, 0])\n                cylinder(d = 3, h = 10, $fn = 8);\n            translate([0, 0, -10])\n                rotate([45, 0, 0])\n                cylinder(d = 3, h = 8, $fn = 8);\n        }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -18, 5])\n        rotate([0, 90, 0])\n        rotate([0, 0, 25])\n        difference() {\n            hull() {\n                sphere(d = 8, $fn = 12);\n                translate([0, 0, -15])\n                    sphere(d = 5, $fn = 8);\n            }\n            cylinder(d = 3, h = 20, $fn = 8);\n        }\n}\n\n// Horns\nmodule horns() {\n    translate([-8, 12, 33])\n        rotate([0, -20, -20])\n        cylinder(d1 = 6, d2 = 2, h = 10, $fn = 8);\n    translate([8, 12, 33])\n        rotate([0, -20, 20])\n        cylinder(d1 = 6, d2 = 2, h = 10, $fn = 8);\n}\n\n// Ears\nmodule ear(posX) {\n    translate([posX, 10, 34])\n        rotate([0, 0, posX > 0 ? 15 : -15])\n        scale([1, 1.5, 0.4])\n        sphere(d = 6, $fn = 12);\n}\n\n// Assemble the model\nunion() {\n    santor_body();\n    santor_head();\n\n    // Legs\n    leg(-10, -5, 15);\n    leg(10, -5, -15);\n    leg(-8, -8, 10);\n    leg(8, -8, -10);\n\n    // Arms\n    arm(-12);\n    arm(12);\n\n    tail();\n    horns();\n    ear(-9);\n    ear(9);\n}",
    "renders": true
  },
  {
    "fruit": "setar",
    "openscad_code": "// Setar - Persian 3-stringed lute\n// Medium complexity, realistic style for 3D printing\n\n$fn=32;\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 35;\nbody_depth = 12;\nneck_length = 65;\nneck_width = 8;\npegbox_length = 25;\n\n// Main body - pear-shaped bowl\nmodule body() {\n    // Base bowl shape\n    difference() {\n        // Main body ellipsoid\n        scale([1, 0.8, 0.5])\n            sphere(d=body_width);\n        \n        // Hollow out the bowl\n        translate([0,0,-2])\n            scale([0.8, 0.6, 0.4])\n                sphere(d=body_width-4);\n        \n        // Sound hole\n        translate([0,0,1])\n            cylinder(h=5, d=8);\n    }\n    \n    // Soundboard/top plate\n    translate([0,0,body_depth/2-1])\n        scale([1, 0.8, 0.1])\n            sphere(d=body_width);\n}\n\n// Neck with frets\nmodule neck() {\n    // Main neck\n    translate([0,0,0])\n        rotate([90,0,0])\n            cylinder(h=neck_length, d1=neck_width, d2=neck_width*0.8);\n    \n    // Frets\n    for(i=[1:12]) {\n        translate([0, i*neck_length/13, neck_width/2])\n            rotate([90,0,0])\n                scale([1.2,1,0.5])\n                    cylinder(h=neck_width*1.1, d=0.5);\n    }\n}\n\n// Pegbox with tuning pegs\nmodule pegbox() {\n    // Main pegbox\n    translate([0,neck_length+pegbox_length/2,0])\n        rotate([90,0,0])\n            cube([neck_width*1.2, pegbox_length, neck_width*0.8], center=true);\n    \n    // Tuning pegs (3 pegs)\n    for(side=[-1,1]) {\n        for(i=[0,1]) {\n            translate([side*neck_width*0.7, neck_length+5+i*12, 0])\n                rotate([90,0,90])\n                    cylinder(h=8, d=3);\n        }\n    }\n    \n    // Nut\n    translate([0,neck_length,neck_width/2])\n        cube([neck_width*1.1, 2, 1], center=true);\n}\n\n// Bridge\nmodule bridge() {\n    translate([0,-body_width*0.3,body_depth/2])\n        cube([15, 2, 3]);\n}\n\n// Strings\nmodule strings() {\n    for(i=[-1,0,1]) {\n        translate([i*2, 0, 0])\n            cylinder(h=neck_length+pegbox_length+body_length/2, d=0.5);\n    }\n}\n\n// Tailpiece\nmodule tailpiece() {\n    translate([0,-body_width*0.4,body_depth/2-1])\n        difference() {\n            cube([12, 4, 2], center=true);\n            translate([0,0,-1])\n                cube([10, 3, 3], center=true);\n        }\n}\n\n// Main assembly\ntranslate([0,-body_length/2,0]) {\n    union() {\n        body();\n        neck();\n        pegbox();\n        bridge();\n        tailpiece();\n        strings();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "sentul",
    "openscad_code": "// Sentul (Sandoricum koetjape) fruit in realistic style - medium complexity\n// External dimensions: ~60 mm diameter\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Main parameters\ndiameter = 60;\nwall_thickness = 2;\n\nmodule sentul() {\n    // Main fruit body - slightly flattened sphere\n    translate([0, 0, 2])\n    scale([1, 1, 0.85])\n    sphere(d=diameter);\n\n    // Top indent (where stem attaches)\n    difference() {\n        sphere(d=diameter);\n        translate([0, 0, diameter*.35])\n        sphere(d=diameter*.4);\n    }\n\n    // Bottom indent (like a small dimple)\n    difference() {\n        sphere(d=diameter);\n        translate([0, 0, -diameter*.4])\n        sphere(d=diameter*.3);\n    }\n\n    // Surface texture - small bumps/segments\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            for(j=[0:9]) {\n                translate([0, sin(j*36)*diameter*.45, cos(j*36)*diameter*.45])\n                rotate([cos(j*36)*-90, 0, 0])\n                scale([1, 0.8, 0.3])\n                cylinder(h=diameter*.05, d1=diameter*.08, d2=diameter*.05, center=true);\n            }\n        }\n    }\n\n    // Stem\n    translate([0, 0, diameter*.5])\n    rotate([0, 0, 45])\n    cylinder(h=diameter*.15, d1=diameter*.08, d2=diameter*.05);\n\n    // Calyx lobes (4-5 small leaf-like structures)\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, diameter*.1, diameter*.45])\n            rotate([0, -15, i*72])\n            scale([0.3, 1, 0.1])\n            sphere(d=diameter*.15);\n        }\n    }\n\n    // Internal seed chambers (hollow out for 3D printing)\n    difference() {\n        sphere(d=diameter - wall_thickness);\n        \n        // 3 large seed compartments\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n            translate([diameter*.25, 0, -diameter*.1])\n            scale([1, 0.7, 0.6])\n            sphere(d=diameter*.35);\n        }\n        \n        // Central pith area\n        translate([0, 0, -diameter*.15])\n        sphere(d=diameter*.15);\n    }\n}\n\n// Generate the fruit\nsentul();",
    "renders": true
  },
  {
    "fruit": "kepel",
    "openscad_code": "// Kepel - Realistic Medium Complexity\n// Realistic representation of the Javanese kepel fruit\n\n// Overall dimensions (mm)\nfruit_d = 65;\nfruit_h = 70;\nstem_h = 15;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, fruit_h/2 + stem_h/2])\n    cylinder(h=stem_h, d1=8, d2=6, $fn=16);\n    \n    // Stem collar\n    translate([0, 0, fruit_h/2])\n    cylinder(h=4, d1=12, d2=8, $fn=16);\n}\n\nmodule fruit_body() {\n    // Main body - slightly elongated sphere\n    scale([1, 1, 1.1])\n    sphere(d=fruit_d, $fn=64);\n}\n\nmodule segments() {\n    // Create 5 segments using rotated cube cuts\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, -fruit_h/2])\n        rotate([0, 15, 0])\n        cube([fruit_d*1.5, 5, fruit_h], center=true);\n    }\n}\n\nmodule segment_details() {\n    // Raised ridges between segments\n    for(i=[0:4]) {\n        rotate([0, 0, i*72 + 36])\n        translate([0, fruit_d/2 - 3, 0])\n        rotate([-90, 0, 0])\n        cylinder(h=fruit_h*0.9, d=4, $fn=8);\n    }\n}\n\nmodule bottom_bump() {\n    // Small protrusion at bottom\n    translate([0, 0, -fruit_h/2])\n    cylinder(h=8, d1=12, d2=8, $fn=16);\n}\n\nmodule surface_texture() {\n    // Small dots pattern\n    for(a=[0:30:360])\n    for(b=[-60:30:60]) {\n        rotate([0, b, a])\n        translate([fruit_d/2 - 2, 0, sin(b)*fruit_h/3])\n        sphere(d=1.5, $fn=8);\n    }\n}\n\n// Assemble the fruit\nunion() {\n    // Main fruit body with segments\n    difference() {\n        union() {\n            fruit_body();\n            bottom_bump();\n        }\n        segments();\n    }\n    \n    // Add segment ridges\n    segment_details();\n    \n    // Add stem\n    stem();\n    \n    // Add surface texture\n    surface_texture();\n}\n\n// Center the model\ntranslate([0, 0, -fruit_h/4])",
    "renders": true
  },
  {
    "fruit": "kawista",
    "openscad_code": "// Kawista fruit (Limonia acidissima) - Realistic style, medium complexity\n// Dimensions: ~70mm long x ~60mm diameter\n\n// Overall scale\nscale_factor = 70;\n\n// Main body with segmented rough surface\nmodule kawista_body() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 0.9, 0.85])\n        sphere(d=scale_factor, $fn=100);\n        \n        // Surface texture - small indentations\n        for (i=[0:15]) {\n            rotate([0, 90, i*24]) \n            translate([scale_factor/2 - 2, 0, 0])\n            scale([0.2, 0.4, 0.3])\n            sphere(d=5, $fn=8);\n        }\n        \n        for (i=[0:8]) {\n            rotate([0, i*20, 0]) \n            translate([0, 0, scale_factor/2 - 2])\n            scale([0.3, 0.4, 0.2])\n            sphere(d=6, $fn=8);\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, scale_factor/2 * 0.85])\n    difference() {\n        cylinder(h=8, d1=12, d2=8, $fn=20);\n        cylinder(h=10, d=6, $fn=20);\n    }\n}\n\n// Ridges along the surface\nmodule surface_ridges() {\n    for (i=[0:5]) {\n        rotate([0, i*30 + 15, 0])\n        translate([0, 0, scale_factor/4])\n        scale([0.95, 0.9, 0.3])\n        sphere(d=scale_factor * 0.8, $fn=6);\n    }\n}\n\n// Small bumps for texture\nmodule surface_bumps() {\n    for (i=[0:20]) {\n        angle1 = rands(0, 180, 1)[0];\n        angle2 = rands(0, 360, 1)[0];\n        rotate([angle1, 0, angle2])\n        translate([scale_factor/2 * 0.9, 0, 0])\n        sphere(d=2 + rands(0, 1, 1)[0], $fn=6);\n    }\n}\n\n// Bottom indentation\nmodule bottom_indent() {\n    translate([0, 0, -scale_factor/2 * 0.85])\n    scale([1, 1, 0.3])\n    cylinder(h=10, d1=20, d2=0, $fn=20);\n}\n\n// Final assembly\nunion() {\n    kawista_body();\n    stem_base();\n    surface_ridges();\n    surface_bumps();\n    difference() {\n        kawista_body();\n        bottom_indent();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "kecapi",
    "openscad_code": "// Kecapi (Sundanese zither) - medium complexity realistic style\n// Overall dimensions: ~80mm long, ~30mm wide, ~8mm thick\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main body - hollowed for printing\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-38, -13, 0])\n                cube([76, 26, 6], center = true);\n            translate([-35, -12, -2])\n                cube([70, 24, 4], center = true);\n        }\n        \n        // Hollow cavity\n        translate([-36, -11, 0])\n            cube([72, 22, 5], center = true);\n        \n        // Sound holes - traditional floral pattern\n        for(i = [0:2]) {\n            translate([25 - i*20, 0, 2.8])\n                cylinder(h = 3, r = 3, center = true);\n        }\n    }\n}\n\n// Bridge module for strings\nmodule bridge() {\n    // Main bridge body\n    difference() {\n        hull() {\n            translate([-28, -10, 3.5])\n                cube([2, 20, 2], center = true);\n            translate([-28, -10, 4.5])\n                cube([1, 18, 1], center = true);\n        }\n        // String grooves\n        for(i = [-3:3]) {\n            translate([-28, i*2.5, 4])\n                cube([3, 0.5, 2], center = true);\n        }\n    }\n}\n\n// Tuning pegs module\nmodule pegs() {\n    for(i = [0:3]) {\n        translate([32, -7.5 + i*5, 4.5]) {\n            // Peg shaft\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 1.2);\n            // Gear knob\n            translate([10, 0, 0])\n                sphere(r = 2);\n        }\n    }\n}\n\n// String anchor module\nmodule string_anchor() {\n    difference() {\n        translate([-34, 0, 3.5]) {\n            cube([4, 20, 1.5], center = true);\n        }\n        // String holes\n        for(i = [-3:3]) {\n            translate([-34, i*2.5, 3.5])\n                cylinder(h = 2, r = 0.5, center = true);\n        }\n    }\n}\n\n// Strings module\nmodule strings() {\n    for(i = [-3:3]) {\n        hull() {\n            translate([-34, i*2.5, 4.2])\n                sphere(r = 0.3);\n            translate([32, -7.5 + (i+3)*5, 5])\n                sphere(r = 0.3);\n        }\n    }\n}\n\n// Decorative end pieces\nmodule end_pieces() {\n    // Front decorative curl\n    translate([-38, 0, 3]) {\n        rotate([0, 90, 0])\n            cylinder(h = 2, r1 = 3, r2 = 1);\n    }\n    \n    // Back decorative curl\n    translate([38, 0, 3]) {\n        rotate([0, -90, 0])\n            cylinder(h = 2, r1 = 3, r2 = 1);\n    }\n}\n\n// Assembly\nbody();\nbridge();\npegs();\nstring_anchor();\nstrings();\nend_pieces();",
    "renders": true
  },
  {
    "fruit": "kedondong",
    "openscad_code": "// Kedondong (Spondias dulcis) - Realistic medium complexity\n// Overall height ~70 mm, suitable for 3D printing\n\n$fn=50;\n\nmodule kedondong() {\n    // Main fruit body – slightly flattened ellipsoid\n    color(\"limegreen\")\n    scale([1, 1.1, 0.9])\n    sphere(d=38);\n\n    // Small bulge at top for stem attachment\n    translate([0, 0, 19])\n    scale([1.1, 1, 0.7])\n    sphere(d=12);\n\n    // Stem stub\n    translate([0, 0, 26])\n    rotate([90, 0, 0])\n    cylinder(h=8, d1=3.5, d2=2.5, $fn=8);\n\n    // Surface longitudinal ridges (8 evenly spaced)\n    for (i=[0:45:360-45]) {\n        rotate([0, 0, i])\n        translate([0, 19.5, 0])\n        scale([1, 0.15, 0.8])\n        sphere(d=10);\n    }\n\n    // Tiny lenticel dots scattered over surface\n    for (p=[[ 7, 14, 10], [-10, 11, -8], [ 8,-12,  5],\n           [-9, -9, 12], [12, -5, -11], [-11, 7, -9],\n           [0, 18,  2], [-6, 15,  7], [ 9, -15, -3]]) {\n        translate(p)\n        sphere(d=1.2);\n    }\n\n    // Bottom slight indentation\n    translate([0, 0, -19])\n    rotate([0, 0, 0])\n    cylinder(h=2, d1=8, d2=0, $fn=30);\n}\n\nkedondong();",
    "renders": true
  },
  {
    "fruit": "ambarella",
    "openscad_code": "// Ambarella (Spondias dulcis) - Realistic medium-complexity model\n// 3D-printable, no overhangs, wall thickness 1.2mm\n\n$fn = 36;\n\nmodule ambarella_fruit() {\n    // Main fruit body - slightly flattened ellipsoid\n    difference() {\n        scale([1, 1.1, 0.85])\n            sphere(d = 40);\n        \n        // Top indentation for stem attachment\n        translate([0, 0, 20])\n            cylinder(h = 8, d1 = 8, d2 = 12, $fn = 24);\n    }\n    \n    // 8 longitudinal ridges for realistic texture\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([19.5, 0, 0])\n                scale([1, 0.3, 0.8])\n                    rotate([90, 0, 0])\n                        cylinder(h = 38, d = 3, $fn = 8);\n    }\n    \n    // Bottom point\n    translate([0, 0, -20])\n        cylinder(h = 5, d1 = 0, d2 = 8, $fn = 16);\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, 22])\n        rotate([10, 0, 0])\n            cylinder(h = 15, d1 = 5, d2 = 3, $fn = 16);\n    \n    // Stem collar\n    translate([0, 0, 22])\n        cylinder(h = 2, d = 8, $fn = 16);\n}\n\nmodule seed_chambers() {\n    // Central core with 5 seed chambers\n    difference() {\n        // Core\n        translate([0, 0, -5])\n            cylinder(h = 30, d = 12, $fn = 20);\n        \n        // Seed chambers (5 radially arranged)\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([4, 0, 0])\n                    scale([1, 2, 1])\n                        cylinder(h = 30, d = 5, $fn = 16);\n        }\n    }\n}\n\nmodule flesh_layer() {\n    // Hollow out for flesh thickness\n    difference() {\n        ambarella_fruit();\n        \n        // Inner hollow\n        scale([0.75, 0.75, 0.75])\n            sphere(d = 40);\n        \n        // Seed chamber space\n        translate([0, 0, -5])\n            cylinder(h = 30, d = 14, $fn = 20);\n    }\n}\n\n// Assembly\nunion() {\n    flesh_layer();\n    stem();\n    \n    // Internal structure (not printed, for reference)\n    // %seed_chambers();\n}",
    "renders": true
  },
  {
    "fruit": "wani",
    "openscad_code": "// Wani (Japanese crocodilian dragon) - Realistic style, medium complexity\n// Total length ~80 mm, height ~25 mm, designed for FDM printing\n\n$fn = 64;\n\nmodule body() {\n    // Main torso - elongated ellipsoid\n    difference() {\n        scale([1.6, 1, 0.8]) sphere(d=30);\n        // Belly flattening\n        translate([0, 0, -11]) cube([50, 30, 10], center=true);\n    }\n}\n\nmodule head() {\n    // Crocodilian snout\n    translate([-38, 0, 2]) rotate([0, 10, 0]) {\n        union() {\n            // Upper jaw\n            scale([2, 0.6, 0.4]) sphere(d=15);\n            // Lower jaw\n            translate([0, 0, -5]) scale([1.8, 0.5, 0.3]) sphere(d=12);\n        }\n        \n        // Nostrils\n        for(x=[-2, 2]) {\n            translate([-8, x*2, 2]) rotate([0, 90, 0]) \n                cylinder(h=3, d1=2, d2=1);\n        }\n        \n        // Eye sockets\n        for(x=[-1, 1]) {\n            translate([-8, x*6, 3]) {\n                difference() {\n                    sphere(d=4);\n                    translate([0, 0, -2]) sphere(d=3.5);\n                }\n            }\n        }\n    }\n}\n\nmodule limbs() {\n    // Front legs\n    for(side=[-1, 1]) {\n        translate([-15, side*12, -8]) rotate([0, 0, side*-30]) {\n            // Upper arm\n            cylinder(h=8, d1=6, d2=4);\n            translate([0, 0, -4]) rotate([90, 0, 0]) \n                cylinder(h=6, d1=5, d2=3);\n            // Webbed hand\n            translate([0, 0, -10]) scale([1.5, 1, 0.4]) sphere(d=6);\n        }\n    }\n    \n    // Hind legs\n    for(side=[-1, 1]) {\n        translate([15, side*10, -8]) rotate([0, 0, side*45]) {\n            // Thigh\n            cylinder(h=10, d1=7, d2=5);\n            translate([0, 0, -5]) rotate([90, 0, 0]) \n                cylinder(h=8, d1=6, d2=4);\n            // Webbed foot\n            translate([0, 0, -13]) scale([1.8, 1.2, 0.4]) sphere(d=8);\n        }\n    }\n}\n\nmodule tail() {\n    // Tapered tail with armor plating\n    hull() {\n        translate([22, 0, 0]) sphere(d=10);\n        translate([45, 0, 0]) sphere(d=6);\n    }\n    \n    // Tail segments\n    for(i=[0:4]) {\n        translate([25 + i*5, 0, 0]) rotate([0, 0, i*15]) {\n            difference() {\n                scale([1.2, 1, 0.3]) sphere(d=8 - i);\n                translate([0, 0, -2]) cube([10, 10, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule armor_plates() {\n    // Dorsal scutes\n    for(i=[-2:2]) {\n        translate([i*8, 0, 12]) {\n            rotate([20, 0, 0]) \n                cube([6, 3, 2], center=true);\n        }\n    }\n    \n    // Lateral scales\n    for(i=[-3:3]) for(side=[-1, 1]) {\n        translate([i*7, side*12, 4]) {\n            rotate([0, 0, side*30]) \n                scale([1, 0.7, 0.3]) sphere(d=3);\n        }\n    }\n}\n\nmodule teeth() {\n    // Upper teeth\n    for(i=[0:4]) {\n        translate([-35 + i*3, 5 - i*0.5, 0]) rotate([0, 0, -10]) {\n            cylinder(h=3, d1=1, d2=0.5);\n        }\n    }\n    \n    // Lower teeth\n    for(i=[0:3]) {\n        translate([-33 + i*3, 3 - i*0.5, -4]) rotate([0, 0, 10]) {\n            cylinder(h=2.5, d1=1, d2=0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    limbs();\n    tail();\n    armor_plates();\n    teeth();\n}\n\n// Base support for printing\ntranslate([0, 0, -15]) \n    cube([60, 30, 3], center=true);",
    "renders": true
  },
  {
    "fruit": "bali",
    "openscad_code": "// Bali (Penis) - Realistic Style with Medium Complexity\n// Main dimensions in mm\n\n$fn = 50;  // Smooth curves\n\nmodule glans() {\n    // Glans head - ellipsoid shape\n    scale([1, 1, 1.2])\n    sphere(d=28);\n}\n\nmodule corona() {\n    // Corona ridge around glans\n    difference() {\n        cylinder(h=3, d1=28, d2=30);\n        translate([0, 0, 3])\n        cylinder(h=3, d1=26, d2=28);\n    }\n}\n\nmodule frenulum() {\n    // Frenulum on underside\n    translate([0, -13.5, -8])\n    rotate([90, 0, 0])\n    scale([1, 0.8, 0.5])\n    cylinder(h=8, d1=3, d2=0);\n}\n\nmodule shaft() {\n    // Main shaft with slight taper\n    cylinder(h1=0, h2=50, r1=12, r2=11);\n}\n\nmodule urethral_opening() {\n    // Urethral opening on glans\n    translate([0, 0, 16.5])\n    rotate([90, 0, 0])\n    cylinder(h=3, d=3);\n}\n\nmodule dorsal_vein() {\n    // Main dorsal vein\n    translate([0, 0, 10])\n    for(i=[0:5:45]) {\n        translate([0, 0, -i])\n        scale([0.15, 0.15, 1])\n        sphere(d=3);\n    }\n}\n\nmodule lateral_veins() {\n    // Side veins\n    for(side=[-1, 1]) {\n        translate([side*3, 0, 20])\n        for(i=[0:8:30]) {\n            translate([0, 0, -i])\n            rotate([0, 15*side, 0])\n            scale([0.2, 0.2, 1])\n            sphere(d=2.5);\n        }\n    }\n}\n\nmodule testicles() {\n    // Testicles (simplified)\n    for(x=[-20, 20]) {\n        translate([x, 0, -55])\n        scale([1, 1.2, 1])\n        sphere(d=22);\n    }\n}\n\nmodule scrotum() {\n    // Scrotum sack connecting testicles\n    hull() {\n        translate([-20, 0, -55])\n        sphere(d=22);\n        translate([20, 0, -55])\n        sphere(d=22);\n    }\n}\n\nmodule base() {\n    // Base where shaft meets scrotum\n    translate([0, 0, -5])\n    cylinder(h=5, d=26);\n}\n\n// Assembly\nunion() {\n    // Main shaft assembly\n    translate([0, 0, -50])\n    union() {\n        shaft();\n        base();\n    }\n    \n    // Glans assembly\n    translate([0, 0, 0])\n    union() {\n        glans();\n        corona();\n    }\n    \n    // Details\n    translate([0, 0, 0])\n    union() {\n        urethral_opening();\n        translate([0, 13.5, 0])\n        mirror([0, 1, 0])\n        frenulum();\n    }\n    \n    // Veins\n    dorsal_vein();\n    lateral_veins();\n    \n    // Testicles and scrotum\n    testicles();\n    scrotum();\n}",
    "renders": true
  },
  {
    "fruit": "kuini",
    "openscad_code": "// Kuini (Hawaiian squirrelfish) – medium complexity, realistic style\n// Approx. 80 mm total length, printable without support\n\n$fn = 36;               // smooth curves\n\n// overall scale\nscale(0.8) {\n\n// ---------- BODY ----------\nmodule body() {\n    difference() {\n        // main body oval\n        scale([1, 0.55, 0.45])\n            sphere(d = 50);\n\n        // tail notch\n        translate([23, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 25, d = 20);\n    }\n}\n\n// ---------- HEAD ----------\nmodule head() {\n    translate([-25, 0, 2])\n    union() {\n        // skull\n        scale([0.7, 0.6, 0.6])\n            sphere(d = 28);\n        // snout\n        translate([-7, 0, -2])\n            rotate([-10, 0, 0])\n            scale([0.8, 0.55, 0.5])\n                cylinder(h = 14, d1 = 12, d2 = 10);\n    }\n}\n\n// ---------- MOUTH ----------\nmodule mouth() {\n    translate([-35, 0, -5])\n    rotate([10, 0, 0])\n    scale([1, 0.2, 0.1])\n        sphere(d = 10);\n}\n\n// ---------- EYE ----------\nmodule eye() {\n    translate([-30, 7.5, 4])\n    rotate([0, 10, 0])\n    union() {\n        sphere(d = 6);          // eyeball\n        translate([0, 0, 3.2])\n            scale([0.7, 0.7, 0.1])\n                sphere(d = 6);  // lens\n    }\n}\n\n// ---------- DORSAL SPINES ----------\nmodule dorsal_spines(count = 6) {\n    for(i = [0:count-1]) {\n        angle = -20 + i * 8;\n        height = 4 + i * 1.5;\n        translate([5 - i * 5.5, 0, 10 + sin(i * 30) * 2])\n            rotate([angle, 0, 0])\n                cylinder(h = height, d1 = 2.5, d2 = 0.8);\n    }\n}\n\n// ---------- PELVIC FIN ----------\nmodule pelvic_fin(side = 1) {   // side 1=right, -1=left\n    translate([-8, side * 8, -3])\n    rotate([0, 0, side * -30])\n    union() {\n        scale([1.2, 0.2, 0.8])\n            sphere(d = 8);\n        translate([3, 0, 0])\n            rotate([0, 0, side * -20])\n            scale([1, 0.15, 0.7])\n                sphere(d = 7);\n    }\n}\n\n// ---------- ANAL FIN ----------\nmodule anal_fin() {\n    translate([10, 0, -9])\n    rotate([20, 0, 0])\n    scale([1, 0.15, 0.8])\n        sphere(d = 12);\n}\n\n// ---------- TAIL ----------\nmodule tail() {\n    translate([25, 0, 0])\n    rotate([0, 0, 90])\n    difference() {\n        scale([1, 0.15, 1.2])\n            sphere(d = 22);\n        translate([0, 5, 0])\n            cube([30, 10, 30], center = true);\n    }\n}\n\n// ---------- PECTORAL FIN ----------\nmodule pectoral_fin(side = 1) {\n    translate([-15, side * 9, -2])\n    rotate([0, 0, side * 20])\n    union() {\n        scale([0.8, 0.15, 0.7])\n            sphere(d = 10);\n        translate([2, 0, 0])\n            rotate([0, 0, side * 15])\n            scale([0.7, 0.12, 0.6])\n                sphere(d = 8);\n    }\n}\n\n// ---------- ASSEMBLE ----------\nunion() {\n    body();\n    head();\n    mouth();\n    eye();\n    mirror([0, 1, 0]) eye();\n    dorsal_spines();\n    pelvic_fin(1);\n    pelvic_fin(-1);\n    anal_fin();\n    tail();\n    pectoral_fin(1);\n    pectoral_fin(-1);\n}\n\n} // end overall scale",
    "renders": true
  },
  {
    "fruit": "kweni",
    "openscad_code": "// Kweni (Ethiopian traditional milk vessel) - Realistic style, medium complexity\n// Overall height ~80 mm, suitable for 3D printing\n\n$fn = 36;  // Smooth curves\n\n// Main body - bulbous base\nmodule body() {\n    difference() {\n        // Outer shell\n        rotate_extrude(angle = 360, convexity = 10) {\n            polygon(points=[\n                [0, 0], [22, 0], [25, 10], [28, 25], [26, 45], [22, 65], [18, 75], [0, 80]\n            ]);\n        }\n        // Hollow interior\n        rotate_extrude(angle = 360, convexity = 10) {\n            polygon(points=[\n                [0, 5], [19, 5], [21, 15], [23, 30], [21, 50], [17, 60], [15, 70], [0, 75]\n            ]);\n        }\n    }\n}\n\n// Neck - narrower opening\nmodule neck() {\n    difference() {\n        cylinder(h = 15, r1 = 18, r2 = 15, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 15, r1 = 15, r2 = 12, center = false);\n    }\n}\n\n// Rim - decorative edge\nmodule rim() {\n    difference() {\n        cylinder(h = 3, r = 18);\n        cylinder(h = 3, r = 16);\n    }\n}\n\n// Handle - attached to side\nmodule handle() {\n    translate([26, 0, 40])\n        rotate([90, 0, 0])\n            difference() {\n                union() {\n                    // Main handle curve\n                    rotate_extrude(angle = 180, convexity = 10) {\n                        polygon(points=[\n                            [0, 0], [3, 0], [3.5, 15], [2.5, 25], [0, 28]\n                        ]);\n                    }\n                    // Top connection\n                    translate([0, 0, 28])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, r = 3, center = true);\n                }\n                // Hollow handle\n                rotate_extrude(angle = 180, convexity = 10) {\n                    polygon(points=[\n                        [0, 2], [2, 2], [2.5, 15], [1.5, 24], [0, 26]\n                    ]);\n                }\n            }\n}\n\n// Base ring - stabilizing foot\nmodule base_ring() {\n    difference() {\n        cylinder(h = 5, r = 25);\n        cylinder(h = 5, r = 22);\n    }\n}\n\n// Decorative bands - traditional patterns\nmodule bands() {\n    for(i = [1:3]) {\n        translate([0, 0, 20 + i * 15])\n            difference() {\n                cylinder(h = 2, r = 25 - i * 1.5);\n                cylinder(h = 2, r = 24 - i * 1.5);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    body();\n    translate([0, 0, 75]) neck();\n    translate([0, 0, 90]) rim();\n    translate([0, 0, -5]) base_ring();\n    \n    // Handle - mirror for symmetry\n    handle();\n    mirror([1, 0, 0]) handle();\n    \n    // Decorative elements\n    bands();\n}",
    "renders": true
  },
  {
    "fruit": "asam",
    "openscad_code": "// Asam fruit module - realistic style, medium complexity\n// Overall size: ~60mm tall, 3D printable with 1.2mm walls\n\n// Parameters\n$fn=32; // circle resolution\nwall_thickness = 1.2;\n\n// Main module\nmodule asam() {\n    // Central body with slight taper\n    difference() {\n        // Main body\n        hull() {\n            translate([0,0,25]) cylinder(h=10, r1=22, r2=20);\n            translate([0,0,35]) cylinder(h=5, r1=20, r2=18);\n        }\n        \n        // Top cavity\n        translate([0,0,35]) cylinder(h=8, r=16);\n        \n        // Bottom cavity\n        translate([0,0,0]) cylinder(h=15, r=18);\n    }\n    \n    // Outer ridges\n    for(i=[0:30:330]) {\n        rotate([0,0,i]) translate([20,0,15]) rotate([90,0,0]) \n            cylinder(h=25, r1=2, r2=1.5);\n    }\n    \n    // Seed compartments\n    for(i=[0:120:240]) {\n        rotate([0,0,i]) translate([12,0,20]) \n            difference() {\n                sphere(d=8);\n                translate([0,0,-4]) sphere(d=7.5);\n            }\n    }\n    \n    // Stem base\n    translate([0,0,38]) cylinder(h=3, r1=4, r2=2);\n    \n    // Stem\n    translate([0,0,41]) cylinder(h=5, r=1.5);\n    \n    // Surface texture - small bumps\n    for(i=[0:15:345]) {\n        for(j=[5:6:30]) {\n            rotate([0,0,i]) translate([18,0,j]) sphere(d=1.2);\n        }\n    }\n    \n    // Bottom indentations\n    for(i=[0:72:288]) {\n        rotate([0,0,i]) translate([15,0,2]) \n            difference() {\n                sphere(d=4);\n                translate([0,0,2]) sphere(d=4.5);\n            }\n    }\n}\n\n// Create the fruit\nasam();",
    "renders": true
  },
  {
    "fruit": "belanda",
    "openscad_code": "// Belanda (Malaysian traditional fishing boat) - Realistic style, medium complexity\n\n// Overall dimensions (mm)\nlength = 80;\nwidth = 25;\nheight = 12;\n\n// Hull thickness for 3D printing\nwall = 1.2;\n\n// Main hull shape\nmodule hull() {\n    difference() {\n        // Outer hull - curved bottom with pointed bow and stern\n        union() {\n            // Main hull body\n            hull() {\n                translate([-length/2, 0, 0]) \n                    cylinder(h=height*0.7, r1=width/2, r2=width/2.5, $fn=20);\n                translate([length/2, 0, 0]) \n                    cylinder(h=height*0.5, r1=width/3, r2=0, $fn=20);\n            }\n            \n            // Deck surface\n            translate([0, 0, height*0.7])\n                cube([length*0.9, width*0.8, wall], center=true);\n        }\n        \n        // Inner hollow for printing\n        translate([0, 0, wall])\n            scale([0.85, 0.8, 0.7])\n                children();\n    }\n}\n\n// Side supports (outrigger style)\nmodule outriggers() {\n    for(side = [-1, 1]) {\n        translate([0, side*width*0.7, height*0.3])\n            rotate([90, 0, 0])\n                cylinder(h=width*0.4, r1=3, r2=2, $fn=8);\n    }\n}\n\n// Bench seating\nmodule benches() {\n    for(pos = [-length/3, 0, length/3]) {\n        translate([pos, 0, height*0.75])\n            cube([length/4, width*0.6, wall*0.8], center=true);\n    }\n}\n\n// Storage compartments at bow and stern\nmodule storage_boxes() {\n    for(pos = [-length/2+5, length/2-5]) {\n        translate([pos, 0, height*0.75])\n            cube([8, width*0.5, 4], center=true);\n    }\n}\n\n// Oar locks\nmodule oar_locks() {\n    for(side = [-1, 1]) {\n        for(pos = [-length/4, length/4]) {\n            translate([pos, side*width/2, height*0.85])\n                difference() {\n                    cylinder(h=4, r1=2, r2=2, $fn=8);\n                    translate([0, 0, -0.1])\n                        cylinder(h=4.2, r1=1, r1=1, $fn=8);\n                }\n        }\n    }\n}\n\n// Decorative carving on bow\nmodule bow_carving() {\n    translate([length/2-2, 0, height*0.75+wall])\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 1.5, 0])\n                    cylinder(h=0.5, r1=0.3, r2=0, $fn=6);\n        }\n}\n\n// Combine all parts\nunion() {\n    // Main hull structure\n    hull() {\n        hull();\n    }\n    \n    // Add structural elements\n    outriggers();\n    benches();\n    storage_boxes();\n    oar_locks();\n    bow_carving();\n}",
    "renders": true
  },
  {
    "fruit": "gandaria",
    "openscad_code": "// Gandaria (Bouea macrophylla) - Realistic style, medium complexity\n// Overall dimensions: ~60mm height, ~45mm width\n\n$fn = 64;  // Smooth curves\n\n// Main fruit body with slight oval shape\nmodule fruit_body() {\n    // Core ellipsoid body\n    scale([1, 0.85, 1.1]) \n    sphere(d=35);\n}\n\n// Skin layer with slight thickness\nmodule fruit_skin() {\n    difference() {\n        scale([1.02, 0.87, 1.12]) \n        sphere(d=35);\n        \n        scale([0.98, 0.83, 1.08]) \n        sphere(d=35);\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 18]) {\n        cylinder(h=3, d1=8, d2=6);\n    }\n}\n\n// Main stem\nmodule stem() {\n    translate([0, 0, 21]) {\n        rotate([10, 0, 5])\n        cylinder(h=12, d=4);\n    }\n}\n\n// Small leaf at stem\nmodule small_leaf() {\n    translate([2, 3, 28]) {\n        rotate([30, 20, 45])\n        scale([0.3, 1, 0.05])\n        sphere(d=8);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_bumps() {\n    for(i = [0:15]) {\n        rotate([0, 0, i*24])\n        translate([15*sin(i*137.5), 15*cos(i*137.5), 0])\n        for(j = [-1:1]) {\n            rotate([0, 0, j*120])\n            translate([0, 8, 5*sin(i*20)])\n            scale([1, 1, 0.3])\n            sphere(d=2.5);\n        }\n    }\n}\n\n// Suture line (natural seam)\nmodule suture_line() {\n    rotate([90, 0, 0])\n    translate([0, 0, 0]) {\n        for(i = [-15:15]) {\n            translate([0, 0, i*1.2]) {\n                scale([0.05, 0.8, 0.05])\n                sphere(d=35);\n            }\n        }\n    }\n}\n\n// Bottom indentation\nmodule bottom_indent() {\n    translate([0, 0, -18]) {\n        rotate([180, 0, 0])\n        cylinder(h=3, d1=12, d2=0);\n    }\n}\n\n// Color variation patches\nmodule color_patches() {\n    // Lighter green patches\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([8, 0, 5])\n        scale([1, 0.7, 0.3])\n        sphere(d=8);\n    }\n}\n\n// Complete gandaria assembly\nunion() {\n    // Main fruit components\n    union() {\n        fruit_body();\n        fruit_skin();\n    }\n    \n    // Stem and leaf\n    union() {\n        stem_base();\n        stem();\n        small_leaf();\n    }\n    \n    // Surface details\n    union() {\n        surface_bumps();\n        suture_line();\n        bottom_indent();\n        color_patches();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "maprang",
    "openscad_code": "// Realistic Maprang (Mango) Model - Medium Complexity\n\n// Overall dimensions\n$fn = 50; // Smooth curves\n\n// Main body parameters\nbody_length = 70;\nbody_width = 45;\nbody_height = 40;\nstem_length = 15;\nstem_diameter = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main mango body - kidney bean shape\nmodule mango_body() {\n    // Start with ellipsoid base\n    difference() {\n        // Main body\n        scale([1, 0.8, 0.6])\n            sphere(d=body_width);\n        \n        // Create kidney bean indentation\n        translate([-body_width/4, 0, 0])\n            scale([1.2, 0.9, 0.8])\n            sphere(d=body_width * 0.9);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -body_height/2 + 5])\n            cube([body_length, body_width, 10], center=true);\n    }\n    \n    // Add characteristic bump near top\n    translate([0, body_width/3, body_height/4])\n        scale([1.2, 1, 0.8])\n        sphere(d=body_width/3);\n}\n\n// Stem with realistic details\nmodule mango_stem() {\n    // Main stem cylinder\n    translate([0, 0, body_height/2 + stem_length/2])\n        cylinder(h=stem_length, d=stem_diameter);\n    \n    // Stem base flare\n    translate([0, 0, body_height/2])\n        cylinder(h=3, d1=stem_diameter * 1.5, d2=stem_diameter);\n    \n    // Small leaf scars\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([stem_diameter/2 + 1, 0, body_height/2 + stem_length - 3])\n                scale([0.3, 0.15, 0.1])\n                    sphere(d=4);\n    }\n}\n\n// Surface texture details\nmodule mango_surface() {\n    // Small pores/dots\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n            for(j = [0:10:body_length-10]) {\n                translate([j - body_length/2, 0, 0])\n                    rotate([90, 0, 0])\n                        translate([0, body_width*0.4*sin(j*2) - 5, 0])\n                            cylinder(h=0.5, d1=1.5, d2=0.5);\n            }\n    }\n    \n    // Slight ridges following mango contours\n    for(i = [-1:0.5:1]) {\n        translate([i * body_length/4, 0, 0])\n            scale([1, 1 - abs(i)*0.3, 0.9])\n                sphere(d=body_width * 0.8);\n    }\n}\n\n// Hollow interior for printing\nmodule hollow_interior() {\n    difference() {\n        // Outer shape\n        mango_body();\n        \n        // Inner hollow\n        translate([0, 0, wall_thickness/2])\n            scale([0.8, 0.75, 0.7])\n                mango_body();\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    hollow_interior();\n    \n    // Stem\n    mango_stem();\n    \n    // Surface details\n    mango_surface();\n}\n\n// Add small drainage hole at bottom\ntranslate([0, 0, -body_height/2 + 1])\n    cylinder(h=5, d=3);",
    "renders": true
  },
  {
    "fruit": "mayong",
    "openscad_code": "// Majong tile - medium complexity realistic style\n// Dimensions approximately 37mm x 27mm x 19mm\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges\n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([size[0]-radius, radius, radius]) sphere(r=radius);\n        translate([radius, size[1]-radius, radius]) sphere(r=radius);\n        translate([size[0]-radius, size[1]-radius, radius]) sphere(r=radius);\n        translate([radius, radius, size[2]-radius]) sphere(r=radius);\n        translate([size[0]-radius, radius, size[2]-radius]) sphere(r=radius);\n        translate([radius, size[1]-radius, size[2]-radius]) sphere(r=radius);\n        translate([size[0]-radius, size[1]-radius, size[2]-radius]) sphere(r=radius);\n    }\n}\n\nmodule bamboo_stalk(x, y, height, thickness) {\n    // Single bamboo segment\n    translate([x, y, 0]) {\n        cylinder(h=height, r=thickness, $fn=20);\n    }\n}\n\nmodule bamboo_leaf(x, y, angle) {\n    // Stylized bamboo leaf\n    translate([x, y, 10]) {\n        rotate([0, 0, angle]) {\n            scale([2, 1, 0.5]) {\n                sphere(2, $fn=8);\n            }\n        }\n    }\n}\n\n// Main tile body\ndifference() {\n    // Base tile\n    translate([0, 0, 0]) {\n        rounded_cube([37, 27, 19], 2);\n    }\n    \n    // Carved indentation\n    translate([2, 2, 15]) {\n        rounded_cube([33, 23, 5], 1.5);\n    }\n}\n\n// Bamboo design for 8 of bamboo (realistic style)\n// Main stalks\nfor(i = [0:1:2]) {\n    bamboo_stalk(18.5 + (i-1)*8, 13.5, 12, 1.2);\n}\n\n// Additional stalks for 8\nbamboo_stalk(10.5, 13.5, 8, 1.0);\nbamboo_stalk(26.5, 13.5, 8, 1.0);\nbamboo_stalk(14.5, 13.5, 6, 0.8);\nbamboo_stalk(22.5, 13.5, 6, 0.8);\n\n// Bamboo joints (horizontal lines)\nfor(stalk = [0:4]) {\n    x_pos = 10.5 + stalk*4;\n    for(joint = [0:1:1]) {\n        translate([x_pos, 13.5, 3 + joint*6]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=2.4, r=0.3, $fn=12);\n            }\n        }\n    }\n}\n\n// Small leaves at top\nbamboo_leaf(16, 8, 30);\nbamboo_leaf(20, 6, -30);\nbamboo_leaf(24, 8, 15);\n\n// Bottom leaves\nbamboo_leaf(14, 20, -45);\nbamboo_leaf(28, 20, 45);\n\n// Center dot for 8\ntranslate([18.5, 13.5, 15.5]) {\n    sphere(0.75, $fn=12);\n}\n\n// Side markings (realistic texture)\nmodule side_markings() {\n    translate([0, 0, 9.5]) {\n        for(i = [1:1:5]) {\n            rotate([0, 0, i*72]) {\n                translate([18.5, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=0.3, r=0.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add side texture only on front and back faces\ntranslate([0, 0, 0]) side_markings();\ntranslate([0, 0, 19]) rotate([180, 0, 0]) side_markings();",
    "renders": true
  },
  {
    "fruit": "marian",
    "openscad_code": "// Realistic Marian statue for 3D printing\n// Size: 80mm tall, proper wall thickness for FDM printing\n\n// Main parameters\nbody_height = 80;\nhead_radius = 8;\nrobe_thickness = 2;\n\nmodule marian() {\n    // Base platform\n    translate([0, 0, 0])\n        cylinder(h=3, r1=18, r2=20, $fn=64);\n    \n    // Feet - slightly visible under robe\n    translate([-4, 0, 3])\n        cube([8, 12, 5], center=true);\n    \n    // Main robe body\n    translate([0, 0, 8])\n        cylinder(h=45, r1=15, r2=10, $fn=32);\n    \n    // Robe folds\n    for(i=[0:30:360]) {\n        rotate([0, 0, i])\n            translate([12, 0, 25])\n                rotate([0, 45, 0])\n                    cube([1.5, 15, 25], center=true);\n    }\n    \n    // Torso\n    translate([0, 0, 53])\n        cylinder(h=15, r1=8, r2=10, $fn=32);\n    \n    // Arms\n    module arm(side) {\n        translate([side * 10, 0, 58])\n            rotate([0, 0, side * 15])\n                cylinder(h=12, r=2.5, $fn=16);\n        \n        // Hands\n        translate([side * 18, 0, 58])\n            sphere(r=2.5, $fn=16);\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Head\n    translate([0, 0, 68])\n        sphere(r=head_radius, $fn=32);\n    \n    // Veil\n    translate([0, 0, 66])\n        cylinder(h=12, r1=head_radius + 2, r2=head_radius + 8, $fn=32);\n    \n    // Veil drape detail\n    for(i=[0:45:360]) {\n        rotate([0, 0, i])\n            translate([head_radius + 5, 0, 66])\n                rotate([45, 0, 0])\n                    cube([0.8, 8, 12], center=true);\n    }\n    \n    // Face features\n    // Eyes\n    translate([3, head_radius - 1, 71])\n        sphere(r=1, $fn=8);\n    translate([-3, head_radius - 1, 71])\n        sphere(r=1, $fn=8);\n    \n    // Nose\n    translate([0, head_radius - 2, 69])\n        cube([1, 1.5, 2], center=true);\n    \n    // Mouth\n    translate([0, head_radius - 2, 67])\n        cube([2, 0.5, 0.5], center=true);\n    \n    // Halo\n    translate([0, 0, 78])\n        cylinder(h=1, r1=10, r2=10, $fn=64);\n    difference() {\n        translate([0, 0, 78])\n            cylinder(h=1, r1=10, r2=10, $fn=64);\n        translate([0, 0, 78])\n            cylinder(h=1.1, r1=7, r2=7, $fn=64);\n    }\n}\n\n// Generate the model\nmarian();",
    "renders": true
  },
  {
    "fruit": "kasturi",
    "openscad_code": "// Kasturi (Musk Deer) - Realistic Style, Medium Complexity\n// Approximate size: 80mm long\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Torso\n    difference() {\n        scale([1.2, 0.8, 1]) sphere(d=35);\n        translate([0, 0, 18]) cube([40, 40, 20], center=true);\n    }\n    \n    // Belly\n    translate([0, 0, -12])\n    scale([1.1, 0.7, 0.5]) sphere(d=30);\n}\n\n// Head\nmodule head() {\n    translate([-20, 0, 8])\n    rotate([0, 20, 0])\n    union() {\n        // Skull\n        scale([1, 0.8, 0.9]) sphere(d=20);\n        \n        // Snout\n        translate([-8, 0, -2])\n        scale([1.2, 0.6, 0.6]) sphere(d=12);\n        \n        // Nose\n        translate([-13, 0, -3])\n        sphere(d=4);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([-2, side*8, 6])\n            rotate([0, side*10, 0])\n            scale([0.3, 0.8, 1.5])\n            cylinder(h=8, d1=6, d2=4);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([-7, side*6, 2])\n            sphere(d=3);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([-10, side*8, -15])\n        rotate([0, 5, 0])\n        union() {\n            cylinder(h=22, d=6);\n            translate([0, 0, -22])\n            cylinder(h=5, d1=6, d2=4);\n        }\n        \n        // Hind legs\n        translate([15, side*7, -15])\n        rotate([0, -5, 0])\n        union() {\n            cylinder(h=25, d=7);\n            translate([0, 0, -25])\n            cylinder(h=5, d1=7, d2=5);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([20, 0, -5])\n    rotate([0, 30, 0])\n    scale([0.5, 0.5, 1.2])\n    sphere(d=8);\n}\n\n// Musk gland\nmodule musk_gland() {\n    translate([5, 0, -10])\n    scale([0.8, 1.2, 0.6])\n    sphere(d=10);\n}\n\n// Antlers (male)\nmodule antlers() {\n    // Left antler\n    translate([-18, -6, 12])\n    rotate([0, -20, -30])\n    union() {\n        cylinder(h=15, d=2);\n        translate([0, 0, 15])\n        rotate([0, 0, 45])\n        cylinder(h=8, d=1.5);\n        translate([0, 0, 15])\n        rotate([0, 0, -45])\n        cylinder(h=7, d=1.5);\n    }\n    \n    // Right antler\n    translate([-18, 6, 12])\n    rotate([0, -20, 30])\n    union() {\n        cylinder(h=15, d=2);\n        translate([0, 0, 15])\n        rotate([0, 0, -45])\n        cylinder(h=8, d=1.5);\n        translate([0, 0, 15])\n        rotate([0, 0, 45])\n        cylinder(h=7, d=1.5);\n    }\n}\n\n// Hooves\nmodule hooves() {\n    for(x = [-10, 15], y = [-8, 8]) {\n        translate([x, y, -37])\n        cylinder(h=3, d1=4, d2=6);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    musk_gland();\n    antlers();\n    hooves();\n}",
    "renders": true
  },
  {
    "fruit": "bacang",
    "openscad_code": "// Bacang (sticky-rice dumpling) in realistic style\n// Overall size ~60 mm long\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Outer leaf wrapper\nmodule leaf_wrapper() {\n    difference() {\n        // Main body of the leaf\n        hull() {\n            translate([0, 0, 0]) sphere(d = 30, $fn = 32);\n            translate([0, 0, 40]) sphere(d = 25, $fn = 32);\n        }\n        // Hollow out the inside\n        translate([0, 0, -2])\n            scale([0.9, 0.9, 0.9])\n            hull() {\n                translate([0, 0, 0]) sphere(d = 30, $fn = 32);\n                translate([0, 0, 40]) sphere(d = 25, $fn = 32);\n            }\n    }\n}\n\n// Leaf seam/pleat lines\nmodule leaf_pleats() {\n    for (i = [0:30:150]) {\n        rotate([i, 0, 0])\n            translate([0, 0, 20])\n                rotate([0, 90, 0])\n                    linear_extrude(height = 40, center = true)\n                        polygon(points = [[-15, 0], [-14, 2], [14, 2], [15, 0]]);\n    }\n}\n\n// Inner rice filling\nmodule rice() {\n    difference() {\n        hull() {\n            translate([0, 0, 2]) sphere(d = 26, $fn = 32);\n            translate([0, 0, 38]) sphere(d = 22, $fn = 32);\n        }\n        // Remove core for filling\n        translate([0, 0, 20])\n            scale([0.5, 0.5, 0.5])\n            sphere(d = 20, $fn = 32);\n    }\n}\n\n// Pork belly cube\nmodule pork() {\n    color(\"red\")\n    translate([0, 0, 20])\n        cube([10, 8, 6], center = true);\n}\n\n// Mushroom slice\nmodule mushroom() {\n    color(\"brown\")\n    translate([0, 3, 20])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d1 = 6, d2 = 8, $fn = 16);\n}\n\n// Salted egg yolk\nmodule yolk() {\n    color(\"yellow\")\n    translate([0, -4, 20])\n        sphere(d = 7, $fn = 16);\n}\n\n// Cotton string ties\nmodule string_ties() {\n    for (z = [5, 15, 25, 35, 45]) {\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([16, 0, 0])\n                square([0.8, 2.5]);\n    }\n}\n\n// Assembly\nunion() {\n    // Leaf wrapper\n    leaf_wrapper();\n    \n    // Leaf surface details\n    leaf_pleats();\n    \n    // String ties around the bacang\n    string_ties();\n    \n    // Internal contents\n    translate([0, 0, 0]) {\n        rice();\n        pork();\n        mushroom();\n        yolk();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "rata",
    "openscad_code": "// Realistic Rat model - Medium complexity\n// Overall dimensions: ~80mm nose-to-tail, 35mm tall\n\n$fn = 30;\n\n// Body parameters\nbody_length = 45;\nbody_height = 20;\nbody_width = 22;\n\n// Head parameters\nhead_length = 18;\nhead_height = 15;\nhead_width = 14;\n\n// Tail parameters\ntail_length = 35;\ntail_diameter = 4;\n\n// Leg parameters\nleg_length = 12;\nleg_diameter = 5;\n\n// Ear parameters\near_size = 6;\n\n// Position body\ntranslate([0, 0, leg_length]) {\n    // Main body - tapered ellipsoid\n    scale([1, 0.8, 0.6]) sphere(d=body_width);\n    translate([body_length/3, 0, 0]) scale([1.2, 0.9, 0.7]) sphere(d=body_width);\n    \n    // Head\n    translate([body_length/2 + head_length/2, 0, body_height/2 - 5]) {\n        scale([1.2, 1, 1]) sphere(d=head_width);\n        \n        // Snout extension\n        translate([head_length/2 + 2, 0, -head_height/4]) \n            scale([1.5, 0.8, 0.6]) sphere(d=head_width/2);\n    }\n    \n    // Ears\n    translate([body_length/2 + head_length/3, head_width/2, body_height/2 + 3]) {\n        rotate([0, -30, 0]) \n            scale([0.8, 0.3, 1.2]) sphere(d=ear_size);\n    }\n    translate([body_length/2 + head_length/3, -head_width/2, body_height/2 + 3]) {\n        rotate([0, 30, 0]) \n            scale([0.8, 0.3, 1.2]) sphere(d=ear_size);\n    }\n    \n    // Eyes\n    translate([body_length/2 + head_length/2, head_width/3, body_height/2 - 2]) {\n        sphere(d=2);\n    }\n    translate([body_length/2 + head_length/2, -head_width/3, body_height/2 - 2]) {\n        sphere(d=2);\n    }\n    \n    // Nose\n    translate([body_length/2 + head_length + 3, 0, body_height/2 - 5]) {\n        sphere(d=2.5);\n    }\n}\n\n// Tail - curved cylinder\nmodule tail_segment() {\n    cylinder(h=2, d1=tail_diameter, d2=tail_diameter*0.95);\n}\n\nfor(i=[0:tail_length/2-1]) {\n    translate([-body_length/2 - tail_length/2 + i*2, 0, leg_length - 5 + sin(i*8)*2]) {\n        rotate([0, sin(i*8)*10, 0]) {\n            tail_segment();\n        }\n    }\n}\n\n// Legs\nmodule leg() {\n    difference() {\n        cylinder(h=leg_length, d=leg_diameter);\n        translate([0, 0, leg_length-2]) \n            sphere(d=leg_diameter*1.2);\n    }\n}\n\n// Front legs\ntranslate([body_length/4, body_width/2 - 2, 0]) leg();\ntranslate([body_length/4, -body_width/2 + 2, 0]) leg();\n\n// Back legs\ntranslate([-body_length/3, body_width/2 - 3, 0]) {\n    rotate([10, 0, 0]) leg();\n}\ntranslate([-body_length/3, -body_width/2 + 3, 0]) {\n    rotate([10, 0, 0]) leg();\n}\n\n// Whiskers\nfor(i=[-2:2]) {\n    if(i != 0) {\n        translate([body_length/2 + head_length + 3, i*2, body_height/2 - 5]) {\n            rotate([0, i*5, 0]) \n                cylinder(h=8, d=0.5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "kandis",
    "openscad_code": "// Realistic Kandis (candied fruit with sugar crust) – medium complexity\n// Overall size ~65 mm diameter, printable without supports\n\n$fn = 36;          // Good balance of smoothness vs polygon count\nwall = 1.5;        // Minimum printable wall thickness\nsegments = 8;      // For radial symmetry of the fruit body\n\n// Main module\nmodule kandis() {\n    union() {\n        // Sugary crust shell\n        difference() {\n            // Outer crust sphere\n            sphere(d = 65);\n            // Hollow out for fruit core\n            sphere(d = 62 - 2*wall);\n        }\n\n        // Fruit core (orange slice style)\n        fruit_core();\n\n        // Sugary crystalline bumps on surface\n        surface_crystals();\n    }\n}\n\n// Fruit core made of stacked segments\nmodule fruit_core() {\n    color(\"orange\")\n    for (i = [0 : segments-1]) {\n        rotate([0, 0, i * 360/segments])\n        translate([0, 0, -wall/2])\n        linear_extrude(height = wall)\n        circle(d = 60 - 2*wall, $fn = 3);  // Triangular cross-section for segment look\n    }\n}\n\n// Random small sugar crystals on crust surface\nmodule surface_crystals() {\n    color(\"white\")\n    for (i = [0 : 9]) {\n        a = rands(0, 360, 1)[0];\n        b = rands(-80, 80, 1)[0];\n        r = 32.5;  // Radius of crust sphere\n        translate(spherical_to_xyz(r, a, b))\n        sphere(d = rands(2.5, 5, 1)[0]);\n    }\n}\n\n// Convert spherical (r,θ,φ) to cartesian\nfunction spherical_to_xyz(r, theta, phi) = [\n    r * cos(phi) * cos(theta),\n    r * cos(phi) * sin(theta),\n    r * sin(phi)\n];\n\n// Center the model on the build plate\ntranslate([0, 0, 32.5])\nkandis();",
    "renders": true
  },
  {
    "fruit": "meyerlemon",
    "openscad_code": "// Meyer Lemon - Realistic Style, Medium Complexity\n// Overall dimensions: ~65mm diameter\n\n$fn = 64;  // Smooth curves for 3D printing\n\nmodule lemon_body() {\n    difference() {\n        // Main lemon body - slightly elongated sphere\n        scale([1, 1, 0.85]) sphere(d = 60);\n        \n        // Stem indentation at top\n        translate([0, 0, 25.5]) \n            cylinder(h = 6, d1 = 8, d2 = 6, $fn = 32);\n    }\n}\n\nmodule lemon_texture() {\n    // Realistic dimpled surface using small spheres\n    for (i = [0 : 15]) {\n        rotate([0, 0, i * 24]) {\n            for (j = [0 : 8]) {\n                angle = j * 20;\n                translate([\n                    30 * cos(angle),\n                    30 * sin(angle),\n                    25 * sin(angle * 0.7)\n                ]) {\n                    // Small dimples\n                    translate([0, 0, 0]) \n                        sphere(d = 2.5);\n                }\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Lemon stem with realistic taper\n    translate([0, 0, 28]) {\n        // Main stem\n        cylinder(h = 8, d1 = 5, d2 = 3, $fn = 16);\n        \n        // Small leaf\n        rotate([90, 0, 30]) {\n            scale([0.8, 0.4, 0.1]) \n                sphere(d = 10);\n            translate([2, 0, 0]) \n                scale([0.6, 0.3, 0.1]) \n                    sphere(d = 8);\n        }\n    }\n}\n\nmodule blossom_end() {\n    // Bottom blossom end detail\n    translate([0, 0, -25.5]) {\n        difference() {\n            cylinder(h = 2, d = 8, $fn = 32);\n            cylinder(h = 3, d = 4, $fn = 32);\n        }\n        \n        // Small radial grooves\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60]) {\n                translate([2.5, 0, 1]) \n                    cube([3, 0.5, 2]);\n            }\n        }\n    }\n}\n\nmodule surface_detail() {\n    // Oil gland dots using tiny spheres\n    union() {\n        for (lat = [-60 : 30 : 60]) {\n            for (lon = [0 : 30 : 330]) {\n                rotate([lat, 0, lon]) {\n                    if (abs(lat) < 80) {\n                        translate([30, 0, 0]) \n                            sphere(d = 0.8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base lemon shape\n    lemon_body();\n    \n    // Surface texture (subtractive for dimples)\n    difference() {\n        scale([1.02, 1.02, 1.02]) lemon_body();\n        lemon_texture();\n    }\n    \n    // Add stem and details\n    stem();\n    blossom_end();\n    \n    // Surface oil glands (additive)\n    color(\"orange\") surface_detail();\n}",
    "renders": true
  },
  {
    "fruit": "eureka",
    "openscad_code": "// Realistic Eureka moment figure in medium complexity\n// Overall size: ~80mm tall\n\n// Main parameters\nbody_height = 40;\nbody_radius = 12;\nhead_radius = 15;\narm_length = 30;\nleg_length = 35;\nbase_thickness = 5;\n\n// Body module\nmodule torso() {\n    // Main torso\n    difference() {\n        union() {\n            // Upper body\n            cylinder(h=body_height, r1=body_radius, r2=body_radius*0.9, $fn=32);\n            // Chest protrusion\n            translate([0, body_radius*0.7, body_height*0.6])\n                scale([1.2, 0.6, 0.8])\n                sphere(r=body_radius*0.5, $fn=32);\n        }\n        // Waist indentation\n        translate([0, 0, body_height*0.3])\n            cylinder(h=body_height*0.4, r1=body_radius*0.85, r2=body_radius*0.8, $fn=32);\n    }\n}\n\n// Head module with raised finger\nmodule head_and_arm() {\n    // Head\n    translate([0, 0, body_height + head_radius*0.8])\n        sphere(r=head_radius, $fn=32);\n    \n    // Neck\n    translate([0, 0, body_height])\n        cylinder(h=head_radius*0.3, r1=body_radius*0.7, r2=head_radius*0.8, $fn=32);\n    \n    // Raised arm with finger\n    translate([body_radius+2, -arm_length*0.3, body_height+head_radius*0.5]) {\n        rotate([0, -30, 45]) {\n            // Upper arm\n            cylinder(h=arm_length*0.5, r=4, $fn=16);\n            // Lower arm\n            translate([0, 0, arm_length*0.5])\n                rotate([0, 45, 0])\n                cylinder(h=arm_length*0.5, r=3.5, $fn=16);\n            // Hand\n            translate([0, 0, arm_length*0.9])\n                sphere(r=4, $fn=16);\n            // Pointing finger\n            translate([0, 0, arm_length*0.9+3])\n                cylinder(h=8, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Left leg\n    translate([-body_radius*0.5, 0, -leg_length-base_thickness]) {\n        cylinder(h=leg_length, r1=5, r2=4, $fn=16);\n        // Foot\n        translate([0, 3, -base_thickness])\n            cube([10, 15, base_thickness+2], center=true);\n    }\n    \n    // Right leg\n    translate([body_radius*0.5, 0, -leg_length-base_thickness]) {\n        cylinder(h=leg_length, r1=5, r2=4, $fn=16);\n        // Foot\n        translate([0, 3, -base_thickness])\n            cube([10, 15, base_thickness+2], center=true);\n    }\n}\n\n// Static arm\nmodule other_arm() {\n    translate([-body_radius-2, -arm_length*0.2, body_height*0.7]) {\n        rotate([0, -20, -20]) {\n            cylinder(h=arm_length*0.6, r=4, $fn=16);\n            translate([0, 0, arm_length*0.6])\n                rotate([0, 30, 0])\n                cylinder(h=arm_length*0.4, r=3.5, $fn=16);\n            translate([0, 0, arm_length])\n                sphere(r=4, $fn=16);\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, -base_thickness-2])\n        cylinder(h=base_thickness+2, r1=30, r2=25, $fn=32);\n}\n\n// Facial features\nmodule face() {\n    // Eyes\n    translate([head_radius*0.4, -head_radius*0.7, body_height+head_radius*1.2])\n        sphere(r=2, $fn=16);\n    translate([-head_radius*0.4, -head_radius*0.7, body_height+head_radius*1.2])\n        sphere(r=2, $fn=16);\n    \n    // Mouth (open in excitement)\n    translate([0, -head_radius*0.9, body_height+head_radius*0.9])\n        scale([2, 1, 1.5])\n        sphere(r=1.5, $fn=16);\n}\n\n// Assemble the figure\nunion() {\n    torso();\n    head_and_arm();\n    legs();\n    other_arm();\n    base();\n    face();\n}",
    "renders": true
  },
  {
    "fruit": "lisbon",
    "openscad_code": "// Lisbon Tram 28 in 1:100 scale (approx 75mm long)\n// Medium complexity realistic style\n\n// Overall dimensions\ntram_length = 75;\ntram_width = 20;\ntram_height = 28;\n\n// Wheel parameters\nwheel_d = 8;\nwheel_w = 3;\naxle_spacing = 45;\n\n// Roof details\nroof_arc = 12;\n\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, d=wheel_d, $fn=20);\n        translate([0,0,-1]) cylinder(h=wheel_w+2, d=2, $fn=10);\n    }\n}\n\nmodule wheel_set() {\n    translate([-axle_spacing/2, 0, wheel_d/2]) wheel();\n    translate([axle_spacing/2, 0, wheel_d/2]) wheel();\n}\n\nmodule chassis() {\n    difference() {\n        // Main frame\n        translate([0, 0, wheel_d/2 + 1])\n            cube([tram_length, tram_width-2, 4], center=true);\n        \n        // Wheel cutouts\n        translate([-axle_spacing/2, 0, wheel_d/2 + 1])\n            cube([wheel_w+2, tram_width, 6], center=true);\n        translate([axle_spacing/2, 0, wheel_d/2 + 1])\n            cube([wheel_w+2, tram_width, 6], center=true);\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main body box\n        translate([0, 0, wheel_d/2 + 5])\n            cube([tram_length-4, tram_width-1, 18], center=true);\n        \n        // Windows\n        for(i=[-25:15:25]) {\n            translate([i, tram_width/2-0.5, wheel_d/2 + 10])\n                cube([8, 1, 8], center=true);\n            translate([i, -tram_width/2+0.5, wheel_d/2 + 10])\n                cube([8, 1, 8], center=true);\n        }\n        \n        // Doors\n        translate([-15, tram_width/2-0.5, wheel_d/2 + 5])\n            cube([6, 1, 16], center=true);\n        translate([15, tram_width/2-0.5, wheel_d/2 + 5])\n            cube([6, 1, 16], center=true);\n    }\n}\n\nmodule roof() {\n    difference() {\n        // Curved roof\n        translate([0, 0, wheel_d/2 + 23])\n            scale([tram_length/2, tram_width/2, roof_arc])\n                sphere(d=2, $fn=20);\n        \n        // Flatten bottom\n        translate([0, 0, wheel_d/2 + 23 - roof_arc])\n            cube([tram_length+2, tram_width+2, roof_arc*2], center=true);\n    }\n}\n\nmodule pantograph() {\n    // Simplified pantograph on roof\n    translate([-20, 0, wheel_d/2 + 23 + roof_arc - 2])\n        cube([8, 1, 4], center=true);\n    translate([-20, 0, wheel_d/2 + 23 + roof_arc])\n        cube([1, 1, 2], center=true);\n}\n\nmodule front() {\n    // Front cab\n    translate([-tram_length/2+2, 0, wheel_d/2 + 5])\n        cube([4, tram_width-1, 12], center=true);\n    \n    // Front windshield\n    translate([-tram_length/2+0.5, 0, wheel_d/2 + 12])\n        cube([1, tram_width-4, 8], center=true);\n}\n\nmodule back() {\n    // Rear platform\n    translate([tram_length/2-2, 0, wheel_d/2 + 5])\n        cube([4, tram_width-1, 12], center=true);\n    \n    // Rear railing\n    for(i=[-8:4:8]) {\n        translate([tram_length/2-2, i, wheel_d/2 + 17])\n            cylinder(h=1, d=0.8, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    wheel_set();\n    chassis();\n    body();\n    roof();\n    pantograph();\n    front();\n    back();\n}",
    "renders": true
  },
  {
    "fruit": "bearss",
    "openscad_code": "// Bear model - realistic style, medium complexity\n// Overall size ~70mm tall\n\n$fn = 32; // Smooth curves\n\nmodule ear() {\n    difference() {\n        union() {\n            scale([1, 0.8, 1.2]) sphere(8);\n            translate([0, 0, -2]) cylinder(h=4, r1=8, r2=6);\n        }\n        translate([0, 0, 2]) scale([0.7, 0.6, 1]) sphere(6);\n    }\n}\n\nmodule paw() {\n    union() {\n        translate([0, 0, 5]) sphere(8);\n        translate([0, 0, 0]) cylinder(h=10, r1=7, r2=6);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i*4, 6, 0]) rotate([0, 90, 0]) \n            cylinder(h=6, r1=3, r2=2);\n        }\n    }\n}\n\nmodule leg() {\n    union() {\n        cylinder(h=25, r1=9, r2=8);\n        translate([0, 0, -12]) paw();\n    }\n}\n\nmodule snout() {\n    difference() {\n        union() {\n            translate([0, 0, -3]) sphere(12);\n            translate([0, 15, -3]) cylinder(h=6, r1=12, r2=10);\n        }\n        \n        // Nose\n        translate([0, 18, 3]) scale([1.2, 1, 0.8]) sphere(5);\n        \n        // Mouth area\n        translate([0, 12, 2]) scale([0.7, 0.8, 0.5]) sphere(8);\n    }\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // Main head shape\n            scale([1.1, 1.2, 1]) sphere(20);\n            \n            // Snout\n            translate([0, 18, -5]) snout();\n            \n            // Ears\n            translate([-15, -5, 15]) rotate([0, -20, -30]) ear();\n            translate([15, -5, 15]) mirror([1, 0, 0]) rotate([0, -20, -30]) ear();\n        }\n        \n        // Eye sockets\n        translate([-8, 8, 8]) sphere(4);\n        translate([8, 8, 8]) sphere(4);\n        \n        // Eye balls\n        translate([-8, 10, 8]) color(\"black\") sphere(2.5);\n        translate([8, 10, 8]) color(\"black\") sphere(2.5);\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            translate([0, 0, 15]) scale([1.3, 1, 1.2]) sphere(25);\n            \n            // Belly\n            translate([0, -10, 10]) scale([1, 0.8, 0.9]) sphere(20);\n            \n            // Neck connection\n            translate([0, 25, 25]) cylinder(h=10, r1=12, r2=15);\n        }\n        \n        // Tail\n        translate([0, -35, 10]) rotate([45, 0, 0]) \n        scale([0.8, 0.8, 1.2]) sphere(8);\n    }\n}\n\nmodule arm() {\n    union() {\n        translate([0, 0, -5]) rotate([0, 90, 0]) \n        cylinder(h=20, r1=7, r2=6);\n        translate([0, -15, 0]) rotate([0, 90, 0]) paw();\n    }\n}\n\n// Assembly\ntranslate([0, 0, 25]) head();\ntranslate([0, 0, 0]) body();\n\n// Front legs\ntranslate([-15, 15, -5]) rotate([10, 0, 15]) leg();\ntranslate([15, 15, -5]) rotate([10, 0, -15]) leg();\n\n// Rear legs\ntranslate([-12, -25, -5]) rotate([10, 0, -5]) leg();\ntranslate([12, -25, -5]) rotate([10, 0, 5]) leg();\n\n// Arms\ntranslate([-22, 5, 15]) rotate([0, 0, -20]) arm();\ntranslate([22, 5, 15]) rotate([0, 0, 20]) mirror([1, 0, 0]) arm();",
    "renders": true
  },
  {
    "fruit": "persian",
    "openscad_code": "// Persian Cat - Realistic Style, Medium Complexity\n// 3D Printable - Approx 60mm length\n\n$fn = 48;\n\n// Main body\nmodule body() {\n    // Torso\n    translate([0, 0, 10])\n    scale([1, 0.6, 0.7])\n    sphere(20);\n    \n    // Chest extension\n    translate([0, 15, 5])\n    scale([0.8, 0.4, 0.5])\n    sphere(15);\n}\n\n// Head with flat bottom for printing\nmodule head() {\n    // Main head shape\n    translate([0, -25, 25])\n    scale([0.9, 1.1, 0.8])\n    sphere(15);\n    \n    // Snout\n    translate([0, -35, 22])\n    scale([0.6, 0.7, 0.5])\n    sphere(8);\n}\n\n// Flat ears for printing\nmodule ear(pos) {\n    translate(pos)\n    rotate([0, 0, pos[0] > 0 ? -20 : 20])\n    linear_extrude(height=2)\n    scale([0.3, 1])\n    circle(8);\n}\n\n// Leg with paw\nmodule leg(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos])\n    rotate([angle, 0, 0])\n    union() {\n        // Upper leg\n        cylinder(h=12, r1=4, r2=3);\n        \n        // Lower leg\n        translate([0, 0, 12])\n        cylinder(h=10, r1=3, r2=3);\n        \n        // Paw (flat bottom)\n        translate([0, 0, 22])\n        sphere(4);\n    }\n}\n\n// Tail curved upward\nmodule tail() {\n    translate([20, 0, 10])\n    rotate([0, 90, 0])\n    rotate([0, 0, -30])\n    for(i=[0:5]) {\n        translate([0, 0, i*3])\n        rotate([i*5, 0, 0])\n        sphere(3);\n    }\n}\n\n// Eyes (indentations)\nmodule eyes() {\n    for(side=[-1:2:1]) {\n        translate([side*5, -35, 27])\n        rotate([0, side*10, 0])\n        scale([0.8, 1, 0.5])\n        sphere(2);\n    }\n}\n\n// Nose\nmodule nose() {\n    translate([0, -42, 23])\n    scale([1, 1.5, 0.7])\n    sphere(2);\n}\n\n// Whiskers as thin cylinders\nmodule whiskers() {\n    for(side=[-1:2:1]) {\n        for(angle=[-30, 0, 30]) {\n            translate([side*7, -40, 22])\n            rotate([0, 0, side*angle])\n            cylinder(h=8, r=0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    \n    // Ears positioned for printing\n    ear([-8, -25, 32]);\n    ear([8, -25, 32]);\n    \n    // Legs\n    leg(-12, 5, 8, 15);\n    leg(12, 5, 8, 15);\n    leg(-10, -15, 8, -15);\n    leg(10, -15, 8, -15);\n    \n    tail();\n    \n    // Facial features (subtracted)\n    difference() {\n        union() {\n            eyes();\n            nose();\n            whiskers();\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "keylime",
    "openscad_code": "// Keylime - Realistic style, medium complexity\n// 3D printable keylime with realistic details\n\n// Parameters\n$fn = 30;\nlime_radius = 25;\nstem_length = 8;\nstem_diameter = 3;\nsegment_count = 8;\nwrinkle_depth = 1.5;\nwall_thickness = 2;\n\n// Main lime body with segments\nmodule lime_body() {\n    difference() {\n        // Main sphere\n        sphere(r = lime_radius);\n        \n        // Create segments by subtracting wedges\n        for(i = [0:segment_count-1]) {\n            rotate([0, 0, i * (360/segment_count)]) {\n                translate([0, 0, -lime_radius - 2]) {\n                    cylinder(h = lime_radius * 2 + 4, r1 = lime_radius * 0.9, r2 = 0, $fn = 3);\n                }\n            }\n        }\n        \n        // Add wrinkle details\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24 + (i % 2) * 12]) {\n                translate([0, 0, -lime_radius - 1]) {\n                    cylinder(h = lime_radius * 2 + 2, r = wrinkle_depth, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, lime_radius]) {\n        // Main stem\n        cylinder(h = stem_length, d = stem_diameter);\n        \n        // Stem base flare\n        translate([0, 0, -1]) {\n            cylinder(h = 2, d1 = stem_diameter + 2, d2 = stem_diameter);\n        }\n        \n        // Small leaves\n        for(angle = [30, -30]) {\n            rotate([0, 0, angle]) {\n                translate([stem_diameter/2 + 1, 0, stem_length - 2]) {\n                    rotate([90, 0, 90]) {\n                        scale([0.3, 1, 0.1]) {\n                            sphere(r = 5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bottom dimple\nmodule bottom_dimple() {\n    translate([0, 0, -lime_radius]) {\n        difference() {\n            sphere(r = 3);\n            translate([0, 0, 2]) {\n                cube([10, 10, 5], center = true);\n            }\n        }\n    }\n}\n\n// Top indentation\nmodule top_indent() {\n    translate([0, 0, lime_radius - 2]) {\n        difference() {\n            sphere(r = 5);\n            translate([0, 0, 5]) {\n                cube([10, 10, 10], center = true);\n            }\n        }\n    }\n}\n\n// Surface texture module\nmodule surface_texture() {\n    difference() {\n        union() {\n            lime_body();\n            stem();\n            bottom_dimple();\n            top_indent();\n        }\n        \n        // Add small pores for realistic texture\n        for(i = [0:30]) {\n            rotate([rand(i) * 180, rand(i+1) * 360, rand(i+2) * 360]) {\n                translate([0, 0, -lime_radius - 0.5]) {\n                    cylinder(h = 1, r = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nsurface_texture();",
    "renders": true
  },
  {
    "fruit": "kaffirlime",
    "openscad_code": "// Kaffir Lime - Realistic Medium Complexity\n// Overall dimensions: ~60mm diameter\n\n// Main lime body with slight oval shape\nmodule lime_body() {\n    difference() {\n        // Main slightly flattened sphere\n        scale([1, 1, 0.85]) sphere(d=50, $fn=64);\n        \n        // Stem indentation at top\n        translate([0, 0, 21]) rotate([90, 0, 0]) \n            cylinder(h=8, d1=8, d2=3, $fn=16);\n        \n        // Bottom dimple\n        translate([0, 0, -21]) rotate([90, 0, 0]) \n            cylinder(h=5, d1=6, d2=3, $fn=16);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_texture() {\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            for(j = [0:5]) {\n                rotate([0, 0, j*60]) {\n                    // Create bumps at various positions\n                    translate([20, 0, -15 + j*6]) \n                        sphere(d=2.5, $fn=8);\n                    translate([22, 0, -12 + j*6]) \n                        sphere(d=2, $fn=8);\n                    translate([18, 0, -10 + j*6]) \n                        sphere(d=2.2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Stem at top\nmodule stem() {\n    translate([0, 0, 21]) {\n        // Main stem\n        cylinder(h=12, d1=4, d2=2.5, $fn=12);\n        \n        // Small leaf bud\n        translate([0, 0, 13]) rotate([30, 0, 0]) \n            scale([1, 0.3, 0.5]) sphere(d=3, $fn=8);\n    }\n}\n\n// Leaf attachment scars\nmodule leaf_scars() {\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle]) {\n            translate([23, 0, 5]) rotate([90, 0, 0]) \n                cylinder(h=2, d1=3, d2=2, $fn=8);\n        }\n    }\n}\n\n// Oil gland indentations\nmodule oil_glands() {\n    for(i = [0:30]) {\n        a = i*137.5; // Golden angle for even distribution\n        r = 22 + 3*sin(i*3);\n        z = 15*sin(i*0.5);\n        translate([r*cos(a), r*sin(a), z]) {\n            sphere(d=1.5, $fn=6);\n        }\n    }\n}\n\n// Main model assembly\nunion() {\n    lime_body();\n    \n    // Add surface details\n    difference() {\n        color(\"limegreen\") lime_body();\n        color(\"darkgreen\") surface_texture();\n    }\n    \n    // Add stem\n    color(\"saddlebrown\") stem();\n    \n    // Add leaf scars\n    color(\"olivedrab\") leaf_scars();\n    \n    // Add oil glands\n    color(\"darkolivegreen\") oil_glands();\n}\n\n// Ensure manifold geometry\n$fn = 32;",
    "renders": true
  },
  {
    "fruit": "rangpur",
    "openscad_code": "// Rangpur (Citrus × limonia) - medium complexity realistic style\n// Overall size ~60mm diameter\n\nmodule rangpur() {\n    // Main fruit body - slightly flattened sphere\n    scale([1, 1, 0.9]) sphere(d = 60, $fn = 64);\n}\n\nmodule stem() {\n    // Stem at top\n    translate([0, 0, 29])\n        rotate([0, 0, rand()])\n        cylinder(h = 8, d1 = 6, d2 = 4, $fn = 16);\n}\n\nmodule leaf() {\n    // Single leaf with central vein\n    translate([0, 0, 3])\n    rotate([90, 0, 0])\n    difference() {\n        // Leaf blade\n        scale([1, 2.5, 1])\n        rotate_extrude(angle = 5, $fn = 64)\n        translate([10, 0, 0])\n        circle(d = 8, $fn = 32);\n        \n        // Central vein\n        translate([0, -12, 0])\n        cube([1, 24, 2]);\n    }\n}\n\nmodule leaves() {\n    // Two leaves attached to stem\n    translate([3, 0, 35])\n    rotate([0, 0, 45])\n    leaf();\n    \n    translate([-3, 0, 35])\n    rotate([0, 0, -45])\n    mirror([1, 0, 0])\n    leaf();\n}\n\nmodule texture_lines() {\n    // Surface texture - fine longitudinal ridges\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([0, -1, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 60, d = 0.8, $fn = 8);\n    }\n}\n\nmodule dimples() {\n    // Oil gland dimples\n    for(a = [0:30:359]) {\n        for(b = [-60:30:60]) {\n            rotate([b, 0, a])\n            translate([28, 0, 0])\n            sphere(d = 1.2, $fn = 8);\n        }\n    }\n}\n\n// Build the complete rangpur\nunion() {\n    difference() {\n        rangpur();\n        texture_lines();\n    }\n    \n    union() {\n        stem();\n        leaves();\n    }\n    \n    intersection() {\n        rangpur();\n        dimples();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "kabosu",
    "openscad_code": "// Kabosu citrus fruit – realistic, medium complexity, 3D-printable\n// All dimensions in millimetres, final height ≈ 65 mm\n\n$fn = 36;            // global circle smoothness\nfruit_d = 60;        // main body diameter\nstem_h = 6;          // stem height\nstem_d = 5;          // stem diameter\nwrinkle_depth = 1.2; // skin wrinkle depth\nwall_t = 1.5;        // minimum wall thickness for printing\n\n// Main solid body\nmodule kabosu_body() {\n    difference() {\n        // slightly flattened sphere for citrus shape\n        scale([1, 1, 0.88])\n            sphere(d = fruit_d);\n\n        // hollow interior for printing economy\n        scale([1, 1, 0.88])\n            sphere(d = fruit_d - 2 * wall_t);\n    }\n}\n\n// Stylised calyx (top indent)\nmodule calyx() {\n    translate([0, 0, (fruit_d/2 * 0.88) - 0.5])\n        rotate_extrude(angle = 360, $fn = 24)\n            translate([0, 0])\n                polygon(points = [\n                    [0, 0],\n                    [7, -2],\n                    [10, -1],\n                    [9, 0]\n                ]);\n}\n\n// Small stem\nmodule stem() {\n    translate([0, 0, (fruit_d/2 * 0.88) + stem_h/2])\n        cylinder(h = stem_h, d = stem_d, $fn = 16);\n}\n\n// Surface wrinkles generated with small subtractive spheres\nmodule wrinkles() {\n    for (i = [0 : 15]) {\n        rotate([0, 90, i * 360/15])\n            translate([0, 0, (fruit_d/2 * 0.88) - wrinkle_depth])\n                scale([0.9, 0.9, 0.5])\n                    sphere(d = fruit_d * 0.22);\n    }\n}\n\n// Assemble the fruit\nunion() {\n    difference() {\n        kabosu_body();\n        calyx();\n        wrinkles();\n    }\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "dancy",
    "openscad_code": "// Realistic medium-complexity Dancy (small dancing figure) for 3D printing\n// Overall height ≈ 75 mm, wall thickness ≈ 2 mm, no steep overhangs\n\n$fn = 32;                      // smooth curves\nwall = 2;                      // 3D-printable wall thickness\nscale = 1;                     // set to 0.7 to print ~50 mm tall\n\n// ---- color for preview only ----\ncolor(\"LightSalmon\")\n\nscale([scale,scale,scale]) {\n\n// ---- HEAD ----\nmodule head() {\n    translate([0,0,69])\n    difference() {\n        sphere(d=18);                      // skull\n        translate([0,0,-1])\n        sphere(d=20);                      // trim bottom for neck socket\n    }\n}\n\n// ---- NECK ----\nmodule neck() {\n    translate([0,0,62])\n    cylinder(h=7, d1=8, d2=12, center=false);\n}\n\n// ---- TORSO ----\nmodule torso() {\n    difference() {\n        union() {\n            // chest\n            translate([0,0,40])\n            scale([1, 0.7, 1])\n            sphere(d=28);\n\n            // abdomen\n            translate([0,0,28])\n            cylinder(h=18, d1=24, d2=20, center=false);\n        }\n        // hollow cavity\n        translate([0,0,30])\n        scale([0.8,0.5,0.8])\n        sphere(d=22);\n    }\n}\n\n// ---- PELVIS ----\nmodule pelvis() {\n    translate([0,0,17])\n    difference() {\n        scale([1.2, 0.6, 0.6])\n        sphere(d=22);\n        translate([0,0,10])\n        cube([30,30,30], center=true);     // flatten bottom\n    }\n}\n\n// ---- ARM MODULE ----\nmodule arm(side) {          // side = 1 for right, -1 for left\n    mirror([side,0,0]) {\n        // shoulder\n        translate([13,0,55])\n        sphere(d=10);\n\n        // upper arm\n        rotate([0,0,25*side])\n        translate([13,0,50])\n        rotate([0,-35,0])\n        cylinder(h=18, d=8, center=false);\n\n        // elbow joint\n        translate([22*cos(35)+13,0,50-18*sin(35)])\n        sphere(d=7);\n\n        // forearm\n        rotate([0,-35,0])\n        translate([22*cos(35)+13,0,50-18*sin(35)])\n        rotate([0,25,0])\n        cylinder(h=16, d=6, center=false);\n\n        // hand\n        translate([22*cos(35)+13+16*cos(25),0,50-18*sin(35)-16*sin(25)])\n        sphere(d=8);\n    }\n}\n\n// ---- LEG MODULE ----\nmodule leg(side) {          // side = 1 for right, -1 for left\n    mirror([side,0,0]) {\n        // hip joint\n        translate([8*side,0,15])\n        sphere(d=10);\n\n        // thigh\n        rotate([0,0,10*side])\n        translate([8*side,0,15])\n        rotate([0,-45,0])\n        cylinder(h=20, d=9, center=false);\n\n        // knee\n        translate([8*side+20*cos(45),0,15-20*sin(45)])\n        sphere(d=8);\n\n        // shin\n        rotate([0,-45,0])\n        translate([8*side+20*cos(45),0,15-20*sin(45)])\n        rotate([0,45,0])\n        cylinder(h=18, d=7, center=false);\n\n        // ankle\n        translate([8*side+20*cos(45)+18*cos(45),0,15-20*sin(45)-18*sin(45)])\n        sphere(d=7);\n\n        // foot\n        translate([8*side+20*cos(45)+18*cos(45)+5,0,15-20*sin(45)-18*sin(45)-3])\n        scale([1, 0.4, 0.3])\n        cube([18,10,8], center=true);\n    }\n}\n\n// ---- ASSEMBLE ----\nunion() {\n    head();\n    neck();\n    torso();\n    pelvis();\n    arm(1);     // right arm\n    arm(-1);    // left arm\n    leg(1);     // right leg\n    leg(-1);    // left leg\n}\n\n} // scale",
    "renders": true
  },
  {
    "fruit": "honeybell",
    "openscad_code": "// Honeybell orange (Citrus × honeybell) – medium-complexity realistic model\n// Overall height ≈ 75 mm, max diameter ≈ 65 mm, wall ≈ 2 mm\n// Printed upside-down: no overhangs, all angles ≥ 45°\n\n$fn = 48;\n\n// Main body -------------------------------------------------\nmodule bell_body() {\n    difference() {\n        // Outer bell profile (sphere + stretched bottom)\n        hull() {\n            sphere(d = 58);                          // upper sphere\n            translate([0, 0, -22])\n                scale([0.9, 0.9, 1.3])\n                    sphere(d = 52);                  // lower bulge\n        }\n\n        // Hollow interior\n        translate([0, 0, -2])\n            scale([0.93, 0.93, 0.93])\n                hull() {\n                    sphere(d = 54);\n                    translate([0, 0, -20])\n                        scale([0.9, 0.9, 1.3])\n                            sphere(d = 48);\n                }\n\n        // Calyx cavity on top\n        translate([0, 0, 27])\n            cylinder(h = 8, d1 = 12, d2 = 8);\n    }\n}\n\n// Calyx (flower remnant) ------------------------------------\nmodule calyx() {\n    // Small lobes around cavity rim\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([5.5, 0, 27])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, d1 = 3, d2 = 2);\n    }\n}\n\n// Navel protrusion ------------------------------------------\nmodule navel() {\n    translate([0, 0, -36])\n        rotate_extrude()\n            translate([11, 0, 0])\n                circle(d = 9);\n}\n\n// Surface dimples (peel texture) ----------------------------\nmodule dimples() {\n    for (lat = [20:15:160]) {\n        for (lon = [0:30:359]) {\n            rotate([0, lat, lon]) {\n                // randomize slightly for realism\n                translate([0, 0, 28 + sin(lat) * 5])\n                    sphere(d = 1.8);\n            }\n        }\n    }\n}\n\n// Stem stub -------------------------------------------------\nmodule stem_stub() {\n    translate([0, 0, 31])\n        cylinder(h = 4, d1 = 4, d2 = 2.5);\n}\n\n// Assemble the fruit ----------------------------------------\nunion() {\n    bell_body();\n    calyx();\n    navel();\n    stem_stub();\n    %dimples();        // render dimples as cosmetic only\n}",
    "renders": true
  },
  {
    "fruit": "mineola",
    "openscad_code": "// Mineola (tangerine-like citrus fruit) - realistic medium complexity\n// Overall dimensions: ~60mm diameter\n\nmodule fruit_body() {\n    // Main spherical body with slight flattening at top/bottom\n    difference() {\n        scale([1, 1, 0.9]) sphere(d=60, $fn=64);\n        \n        // Create slight dimple at top\n        translate([0, 0, 28]) \n            cylinder(h=10, r1=8, r2=12, $fn=32);\n        \n        // Create slight dimple at bottom\n        translate([0, 0, -28]) \n            cylinder(h=10, r1=8, r2=12, $fn=32);\n    }\n}\n\nmodule skin_texture() {\n    // Create tiny bumps for realistic orange peel texture\n    for (i = [0:359]) {\n        rotate([0, 0, i]) {\n            for (j = [0:30]) {\n                translate([\n                    30 * cos(j * 12) * (1 + 0.05 * sin(i * 5)),\n                    30 * sin(j * 12) * (1 + 0.05 * sin(i * 5)),\n                    0\n                ]) {\n                    rotate([90, 0, 0])\n                        translate([0, 0, 30])\n                            sphere(d=0.8 + 0.4 * sin(i * 12), $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Small stem at top\n    translate([0, 0, 27])\n        rotate([0, 0, rand(360)])\n            cylinder(h=4, r1=2, r2=1.5, $fn=12);\n}\n\nmodule leaf() {\n    // Single small leaf\n    translate([0, 4, 29])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                polygon(points=[\n                    [0, 0], [8, 2], [15, 1], [12, 0], [15, -1], [8, -2], [0, 0]\n                ]);\n}\n\nmodule segments() {\n    // Create interior segments (visible if cut)\n    difference() {\n        sphere(d=55, $fn=64);\n        \n        // Create 10 wedge-shaped segments\n        for (i = [0:9]) {\n            rotate([0, 0, i * 36]) {\n                translate([0, 0, -27])\n                    cube([55, 2, 54], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Outer skin with texture\n        union() {\n            fruit_body();\n            skin_texture();\n        }\n        \n        stem();\n        leaf();\n    }\n    \n    // Remove interior to make hollow and show segments\n    scale([0.9, 0.9, 0.85])\n        segments();\n}\n\n// Add small air gap for 3D printing\n%translate([0, 0, 0])\n    sphere(d=56, $fn=64);",
    "renders": true
  },
  {
    "fruit": "fallglo",
    "openscad_code": "// Fallglo (Tangerine-like citrus fruit) – realistic, medium complexity\n// Overall size ≈ 70 mm diameter\n\n$fn = 36;                   // smooth curves\n\nmodule fallglo_body() {\n    // Main sphere slightly flattened top & bottom\n    scale([1, 1, 0.92])\n    sphere(d = 70);\n}\n\nmodule rind_texture() {\n    // Random shallow dimples\n    for (a = [0:30:359])\n    for (b = [-60:30:60]) {\n        rotate([0, b, a])\n        translate([0, 0, 34.5])\n        scale([1, 1, 0.2])\n        sphere(d = rands(3.5, 5.5, 1)[0]);\n    }\n}\n\nmodule stem() {\n    // Short cylindrical stem with slight taper\n    translate([0, 0, 33])\n    cylinder(h1 = 6, r1 = 3.2, r2 = 2.4, center = true);\n}\n\nmodule calyx() {\n    // Five-pointed calyx around stem base\n    for (i = [0:4]) {\n        rotate([90, 0, i*72])\n        translate([0, 0, 33])\n        rotate([0, 25, 0])\n        scale([1, 0.7, 0.3])\n        cylinder(h = 5, r1 = 2.8, r2 = 0.2);\n    }\n}\n\nmodule segment_walls() {\n    // Internal radial walls (0.8 mm thick)\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([0, 0, 0])\n        linear_extrude(height = 64, center = true, scale = 0.1)\n        polygon([[0,0], [30,0], [30,0.8], [0,0.8]]);\n    }\n}\n\nmodule pulp_vesicles() {\n    // Tiny spheres inside each segment\n    for (i = [0:11]) {\n        rotate([0, 0, i*30 + 15])\n        translate([10, 0, 0])\n        for (z = [-20:10:20]) {\n            translate([0, 0, z])\n            sphere(d = 2.2);\n        }\n    }\n}\n\nmodule peel() {\n    difference() {\n        fallglo_body();\n        // Hollow core\n        scale([0.92, 0.92, 0.85])\n        sphere(d = 70);\n    }\n}\n\n// Assembly\nunion() {\n    peel();\n    rind_texture();\n    stem();\n    calyx();\n}\n\n// Optional: show half-cut for realism\n// translate([50,0,0])\n// difference() {\n//     union() {\n//         peel();\n//         rind_texture();\n//         stem();\n//         calyx();\n//     }\n//     cube([100,100,100], center = true);\n// }",
    "renders": true
  },
  {
    "fruit": "sunburst",
    "openscad_code": "// Realistic 3D-printable sunburst (≈70 mm Ø)\n// Designed for FDM: no overhangs >45°, 1 mm walls\n\nmodule solid_core(r=5,h=4){\n    // slightly domed center\n    difference(){\n        cylinder(r=r,h=h,$fn=60);\n        translate([0,0,h-1.5])\n            sphere(r=r,$fn=60);\n    }\n}\n\nmodule ray(l=30,w=2,t=2,flare=3){\n    // tapered ray with thickened root for strength\n    hull(){\n        translate([0,0,0])\n            cube([w,t,2],center=true);\n        translate([l-flare,0,0])\n            scale([flare/w,1,1])\n                cube([w,t,2],center=true);\n    }\n}\n\nmodule sunburst(){\n    union(){\n        // golden core\n        color(\"gold\")\n        solid_core(r=7,h=5);\n\n        // twelve rays\n        for(i=[0:11]){\n            rotate([0,0,i*30])\n            translate([7,0,2.5])   // sit on core\n            ray(l=28,w=2.2,t=2.2);\n        }\n\n        // eight secondary shorter rays\n        for(i=[0:7]){\n            rotate([0,0,i*45+22.5])\n            translate([7,0,2.5])\n            ray(l=20,w=1.8,t=1.8,flare=2);\n        }\n\n        // raised ring for definition\n        difference(){\n            cylinder(r=34,h=1.2,$fn=90);\n            cylinder(r=31,h=1.3,$fn=90);\n        }\n    }\n}\n\nsunburst();",
    "renders": true
  },
  {
    "fruit": "fairchild",
    "openscad_code": "// Fairchild (realistic style, medium complexity)\n// Approx 80mm tall, 3D printable with moderate detail\n\n$fn=32;\n\nmodule body() {\n    // Main torso\n    difference() {\n        union() {\n            translate([0,0,25]) scale([1,0.8,1.2]) sphere(15);\n            translate([0,0,10]) scale([0.9,0.7,1]) cylinder(h=20, r=15);\n        }\n        // Hollow cavity\n        translate([0,0,10]) scale([0.8,0.6,0.9]) cylinder(h=20, r=12);\n    }\n}\n\nmodule head() {\n    // Skull\n    translate([0,0,45]) scale([0.7,0.7,0.9]) sphere(12);\n    \n    // Snout\n    translate([0,-8,40]) rotate([30,0,0]) scale([0.8,1.2,0.8]) cylinder(h=12, r=5);\n    \n    // Eyes\n    for(i=[-1,1]) {\n        translate([i*4,-3,48]) sphere(2);\n    }\n    \n    // Ears\n    for(i=[-1,1]) {\n        translate([i*6,0,52]) rotate([i*20,0,0]) scale([0.3,0.3,1]) cylinder(h=8, r=3);\n    }\n}\n\nmodule tail() {\n    // Curved tail\n    for(i=[0:5]) {\n        rotate([0,i*15,0]) \n        translate([0,12-i*2,18-i*3]) \n        rotate([90,0,0]) \n        scale([1,1,0.3]) \n        cylinder(h=8, r=3);\n    }\n}\n\nmodule legs() {\n    // Four legs\n    for(pos=[[-8,8,0], [8,8,0], [-8,-8,0], [8,-8,0]]) {\n        translate(pos) {\n            // Upper leg\n            rotate([45,0,0]) cylinder(h=12, r=3);\n            \n            // Lower leg\n            translate([0,0,8]) rotate([30,0,0]) cylinder(h=10, r=2.5);\n            \n            // Paw\n            translate([0,0,16]) sphere(3);\n        }\n    }\n}\n\nmodule arms() {\n    // Two arms\n    for(side=[-1,1]) {\n        translate([side*10,0,30]) {\n            rotate([0,0,side*30]) {\n                // Upper arm\n                rotate([90,0,0]) cylinder(h=10, r=2.5);\n                \n                // Lower arm\n                translate([0,0,10]) rotate([60,0,0]) cylinder(h=8, r=2);\n                \n                // Hand\n                translate([0,0,17]) sphere(2.5);\n            }\n        }\n    }\n}\n\n// Assemble the fairchild\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n    arms();\n}",
    "renders": true
  },
  {
    "fruit": "daisy",
    "openscad_code": "// Realistic 3D printable daisy – medium complexity\n// Petals, disk florets, stem and leaves, sized for 50-100 mm print\n// All parts printable without support (no overhangs >45°)\n\n$fn = 36;          // smooth curves, tweak if needed\n\n// overall scale factor\nSCALE = 1.4;\n\n// petal dimensions\npetalL = 25 * SCALE;\npetalW = 7  * SCALE;\npetalT = 1.4;       // thickness for 3D printing\n\n// disk floret dimensions\ndiskH = 4 * SCALE;\ndiskR = 8 * SCALE;\n\n// stem & leaf\nstemH = 60 * SCALE;\nstemR = 2 * SCALE;\nleafL = 25 * SCALE;\nleafW = 12 * SCALE;\nleafT = 2;\n\nmodule petal() {\n    // single curved petal, base sits at origin\n    difference() {\n        // main petal body\n        scale([1, petalW/petalL, 1])\n            cylinder(h = petalT, r1 = petalL, r2 = petalL*0.6);\n\n        // carve underside so base sits flat\n        translate([0, -petalW, -petalT])\n            cube([petalL*2, petalW*2, petalT*2], center = true);\n    }\n}\n\nmodule petals() {\n    // 16 petals around a circle\n    for(i = [0:15]) {\n        rotate([0, 0, i*360/16])\n            translate([diskR*0.5, 0, 0])\n                rotate([0, -10, 0])   // slight upward tilt\n                    petal();\n    }\n}\n\nmodule diskFloret() {\n    // central yellow disk made of many tiny cylinders\n    difference() {\n        cylinder(h = diskH, r = diskR);\n        // hollow out underside\n        translate([0, 0, -1])\n            cylinder(h = diskH+2, r = diskR-2);\n    }\n    // add texture with small cylinders\n    for(a = [0:30:359])\n        for(r = [diskR*0.2:diskR*0.25:diskR*0.9]) {\n            rotate([0, 0, a])\n                translate([r, 0, diskH-0.5])\n                    cylinder(h = 1.2, r = 0.6);\n        }\n}\n\nmodule leaf() {\n    // simple elongated leaf shape\n    linear_extrude(height = leafT, scale = 0.1, center = true)\n        difference() {\n            scale([leafL, leafW, 1])\n                circle(r = 1, $fn = 32);\n            translate([leafL/3, 0, 0])\n                scale([leafL/2, leafW*0.7, 1])\n                    circle(r = 1, $fn = 32);\n        }\n}\n\nmodule stem() {\n    difference() {\n        cylinder(h = stemH, r = stemR);\n        // hollow for material saving\n        translate([0, 0, -1])\n            cylinder(h = stemH+2, r = stemR-1.2);\n    }\n    // attach leaves\n    translate([0, 0, stemH*0.3])\n        rotate([0, 90, 30])\n            leaf();\n    translate([0, 0, stemH*0.6])\n        rotate([0, 90, -35])\n            mirror([0,1,0])\n                leaf();\n}\n\n// assemble the flower\nunion() {\n    // disk\n    diskFloret();\n\n    // petals array\n    translate([0, 0, diskH])\n        petals();\n\n    // stem\n    translate([0, 0, -stemH])\n        stem();\n}",
    "renders": true
  },
  {
    "fruit": "pixie",
    "openscad_code": "// Pixie figure - medium complexity with realistic proportions\n// Overall height ~70mm, designed for FDM printing\n\n$fn = 32;\n\n// Main assembly\nmodule pixie() {\n    union() {\n        // Head\n        head();\n        \n        // Torso\n        torso();\n        \n        // Arms\n        left_arm();\n        right_arm();\n        \n        // Legs\n        left_leg();\n        right_leg();\n        \n        // Wings\n        wings();\n        \n        // Hair\n        hair();\n    }\n}\n\n// Head module\nmodule head() {\n    translate([0, 0, 60])\n    union() {\n        // Skull\n        sphere(8);\n        \n        // Face\n        translate([0, -7, 0])\n        scale([1, 1.2, 1.1])\n        sphere(7);\n        \n        // Eyes\n        translate([-2.5, -12, 2])\n        sphere(1);\n        translate([2.5, -12, 2])\n        sphere(1);\n        \n        // Nose\n        translate([0, -10, 0])\n        cylinder(h=3, r1=1, r2=0.5);\n        \n        // Mouth\n        translate([0, -10, -2])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r1=2, r2=1.5);\n        \n        // Ears\n        translate([-7, 0, 0])\n        rotate([0, 0, -30])\n        scale([1, 0.3, 2])\n        sphere(2);\n        \n        translate([7, 0, 0])\n        rotate([0, 0, 30])\n        scale([1, 0.3, 2])\n        sphere(2);\n    }\n}\n\n// Torso module\nmodule torso() {\n    translate([0, 0, 35])\n    union() {\n        // Chest\n        scale([1, 0.6, 1.2])\n        sphere(10);\n        \n        // Waist\n        translate([0, 0, -8])\n        scale([0.8, 0.5, 0.8])\n        sphere(8);\n        \n        // Back\n        translate([0, 3, 0])\n        scale([1, 0.4, 1])\n        sphere(9);\n    }\n}\n\n// Left arm\nmodule left_arm() {\n    translate([-12, 0, 45])\n    rotate([0, 0, -20])\n    union() {\n        // Upper arm\n        rotate([90, 0, 0])\n        cylinder(h=12, r1=2, r2=1.5);\n        \n        // Lower arm\n        translate([0, 0, -14])\n        rotate([90, 0, 0])\n        cylinder(h=10, r1=1.5, r2=1);\n        \n        // Hand\n        translate([0, 0, -26])\n        sphere(1.5);\n    }\n}\n\n// Right arm\nmodule right_arm() {\n    translate([12, 0, 45])\n    rotate([0, 0, 20])\n    union() {\n        // Upper arm\n        rotate([90, 0, 0])\n        cylinder(h=12, r1=2, r2=1.5);\n        \n        // Lower arm\n        translate([0, 0, -14])\n        rotate([90, 0, 0])\n        cylinder(h=10, r1=1.5, r2=1);\n        \n        // Hand\n        translate([0, 0, -26])\n        sphere(1.5);\n    }\n}\n\n// Left leg\nmodule left_leg() {\n    translate([-3, 0, 25])\n    union() {\n        // Thigh\n        rotate([90, 0, 0])\n        cylinder(h=15, r1=2.5, r2=2);\n        \n        // Calf\n        translate([0, 0, -17])\n        rotate([90, 0, 0])\n        cylinder(h=12, r1=2, r2=1.5);\n        \n        // Foot\n        translate([0, 0, -31])\n        scale([1.2, 2, 0.5])\n        sphere(2);\n    }\n}\n\n// Right leg\nmodule right_leg() {\n    translate([3, 0, 25])\n    union() {\n        // Thigh\n        rotate([90, 0, 0])\n        cylinder(h=15, r1=2.5, r2=2);\n        \n        // Calf\n        translate([0, 0, -17])\n        rotate([90, 0, 0])\n        cylinder(h=12, r1=2, r2=1.5);\n        \n        // Foot\n        translate([0, 0, -31])\n        scale([1.2, 2, 0.5])\n        sphere(2);\n    }\n}\n\n// Wings\nmodule wings() {\n    translate([0, 5, 45])\n    union() {\n        // Left wing\n        translate([-8, 0, 0])\n        rotate([0, 0, -30])\n        scale([1, 0.1, 2])\n        sphere(6);\n        \n        // Right wing\n        translate([8, 0, 0])\n        rotate([0, 0, 30])\n        scale([1, 0.1, 2])\n        sphere(6);\n        \n        // Wing membranes\n        for(i = [0:3]) {\n            translate([-8 - i*2, 0, 2 - i])\n            rotate([0, 0, -30 - i*5])\n            scale([1, 0.05, 1.5 - i*0.2])\n            sphere(4 - i);\n            \n            translate([8 + i*2, 0, 2 - i])\n            rotate([0, 0, 30 + i*5])\n            scale([1, 0.05, 1.5 - i*0.2])\n            sphere(4 - i);\n        }\n    }\n}\n\n// Hair\nmodule hair() {\n    translate([0, 0, 68])\n    union() {\n        // Main hair\n        scale([0.8, 1, 1.5])\n        sphere(10);\n        \n        // Bangs\n        for(i = [-2:2]) {\n            translate([i*2, -8, 0])\n            rotate([90, 0, 0])\n            cylinder(h=5, r1=1, r2=0.5);\n        }\n        \n        // Hair strands\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([0, 8, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=1, r2=0.3);\n        }\n    }\n}\n\n// Generate the pixie\npixie();",
    "renders": true
  },
  {
    "fruit": "nova",
    "openscad_code": "// Nova Explosion - Realistic Medium Complexity\n// Size: 80mm diameter at widest point, 15mm thick core\n\n$fn=30; // Smooth curves for realistic look\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main nova structure\nmodule nova_explosion() {\n    // Central white dwarf star\n    difference() {\n        sphere(d=15 * scale_factor);\n        // Hollow core for material efficiency\n        sphere(d=12 * scale_factor);\n    }\n    \n    // Main ejecta shell\n    union() {\n        // Primary explosion ring\n        rotate([0, 0, 0]) ejecta_ring(40, 8, 3);\n        rotate([0, 0, 45]) ejecta_ring(35, 7, 2.5);\n        rotate([0, 0, -30]) ejecta_ring(38, 6, 2.8);\n        \n        // Secondary debris streams\n        for(i = [0:30:359]) {\n            rotate([0, 0, i]) ejecta_stream(20 + i/5, 8);\n        }\n        \n        // Tertiary filaments\n        for(j = [15:45:359]) {\n            rotate([0, 0, j]) filament(j/3, 15 + j/10, 1.5);\n        }\n    }\n    \n    // Inner shock wave details\n    shock_wave(25, 1.5);\n}\n\n// Ejecta ring module for main explosion shell\nmodule ejecta_ring(radius, height, thickness) {\n    difference() {\n        cylinder(h=height * scale_factor, r1=radius * scale_factor, r2=(radius + 5) * scale_factor);\n        cylinder(h=height * scale_factor + 1, r1=(radius - thickness) * scale_factor, r2=(radius + 5 - thickness) * scale_factor);\n    }\n}\n\n// Ejecta stream module for debris trails\nmodule ejecta_stream(length, width) {\n    translate([(15 + length/2) * scale_factor, 0, 0])\n    rotate([90, 0, 0])\n    scale([length * scale_factor, width * scale_factor, width * scale_factor])\n    sphere(d=1);\n}\n\n// Thin filament structures\nmodule filament(angle, length, thickness) {\n    rotate([0, 0, angle])\n    translate([(15 + length/2) * scale_factor, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=length * scale_factor, r=thickness * scale_factor, center=true);\n}\n\n// Shock wave details\nmodule shock_wave(radius, thickness) {\n    intersection() {\n        sphere(d=(30 + radius) * scale_factor);\n        difference() {\n            sphere(d=(30 + radius + thickness) * scale_factor);\n            sphere(d=(30 + radius - thickness) * scale_factor);\n        }\n    }\n}\n\n// Generate the complete nova\nnova_explosion();",
    "renders": true
  },
  {
    "fruit": "osceola",
    "openscad_code": "// Osceola Wild Turkey Hen – medium-complexity realistic style\n// Approx 80 mm tall, 65 mm long – printable without supports\n// All wall thickness ≥ 1.2 mm, no large overhangs\n\n$fn = 36;\n\n// Main body\ndifference() {\n    union() {\n        // Torso\n        scale([1, 0.7, 0.9])\n            sphere(d = 42, center = true);\n\n        // Neck\n        translate([0, 18, 6])\n            rotate([0, 30, 0])\n                cylinder(h = 25, d1 = 14, d2 = 8, center = true);\n\n        // Head\n        translate([0, 34, 12])\n            sphere(d = 14);\n\n        // Tail fan support\n        translate([-20, -12, 0])\n            rotate([0, 20, -10])\n                scale([1.2, 0.3, 1.3])\n                    cylinder(h = 30, d = 20, center = true);\n    }\n\n    // Remove underside hollow\n    translate([0, 0, -25])\n        cube([60, 60, 30], center = true);\n}\n\n// Beak\ntranslate([0, 41, 11])\n    rotate([0, -20, 0])\n        cylinder(h = 10, d1 = 4, d2 = 2);\n\n// Wattles under beak\ntranslate([0, 39, 8])\n    sphere(d = 5);\n\n// Eyes\nfor (s = [-1, 1]) {\n    translate([s * 4, 34, 14])\n        sphere(d = 3);\n}\n\n// Tail feathers (12 vanes)\nfor (i = [0:11]) {\n    angle = i * 15 - 80;\n    length = 25 + (i % 2) * 8;\n    translate([-20, -15, 0])\n        rotate([0, 20 + i * 1.5, angle])\n            scale([0.1, 0.8, 1])\n                cylinder(h = length, d = 12, center = true);\n}\n\n// Wing on each side\nmodule wing() {\n    difference() {\n        translate([0, -8, 5])\n            rotate([0, 0, -20])\n                scale([0.3, 1, 0.8])\n                    sphere(d = 30);\n        // Feather texture slots\n        for (y = [-10:5:10]) {\n            translate([0, y, 5])\n                rotate([0, 90, 0])\n                    cube([0.6, 8, 0.6], center = true);\n        }\n    }\n}\n\n// Place wings\nfor (side = [-1, 1]) {\n    translate([side * 20, 0, 5])\n        mirror([side, 0, 0])\n            wing();\n}\n\n// Legs\nmodule leg() {\n    translate([0, 0, -25])\n        cylinder(h = 25, d = 4);\n    translate([0, 0, -25])\n        sphere(d = 5);\n}\n\n// Feet\nmodule foot() {\n    difference() {\n        union() {\n            translate([0, 0, -26])\n                cube([12, 5, 3], center = true);\n            for (t = [1:3])\n                translate([t * 3 - 6, 0, -27])\n                    cube([2, 5, 5], center = true);\n        }\n        // Remove underside\n        translate([0, 0, -28])\n            cube([15, 7, 2], center = true);\n    }\n}\n\n// Place legs and feet\nfor (side = [-1, 1]) {\n    translate([side * 10, 5, 0])\n        leg();\n    translate([side * 10, 5, 0])\n        foot();\n}",
    "renders": true
  },
  {
    "fruit": "robinson",
    "openscad_code": "// Robinson R22-style helicopter\n// Scale: ~1:100, rotor tip-to-tail ~85 mm, fits on most FDM beds\n// All walls ≥1 mm, no unsupported overhangs >45°\n\n$fn = 36;\n\nmodule main_rotor() {\n    // hub cylinder\n    cylinder(h=4, d=6, center=true);\n    // four blades, swept back 5° for realism\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([0, 17.5, 0])\n                rotate([0, 0, -5])\n                    cube([2, 35, 1.5], center=true);\n}\n\nmodule tail_rotor() {\n    rotate([0, 90, 0])\n        cylinder(h=12, d=2, center=true);\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([6, 0, 0])\n                cube([12, 1.2, 0.8], center=true);\n}\n\nmodule fuselage() {\n    // main cabin shell\n    hull() {\n        translate([0, 0, 5])\n            sphere(d=20);\n        translate([0, 20, 0])\n            sphere(d=22);\n        translate([-14, 0, -2])\n            sphere(d=18);\n    }\n    // tail boom\n    translate([-22, 0, -1])\n        rotate([0, 0, -3])\n            cube([35, 8, 6], center=true);\n    // skids\n    translate([0, 0, -15])\n        union() {\n            for (x = [-15, 10])\n                translate([x, 0, 0])\n                    cube([2, 50, 2], center=true);\n            for (y = [-20, 20])\n                translate([-2.5, y, -2])\n                    cube([25, 2, 4], center=true);\n        }\n}\n\nmodule cockpit() {\n    // windshield\n    translate([0, 7, 7])\n        rotate([70, 0, 0])\n            scale([1, 1.2, 0.5])\n                sphere(d=18);\n    // side windows\n    difference() {\n        translate([0, 0, 2])\n            sphere(d=22);\n        translate([0, 0, 2])\n            sphere(d=20.5);\n    }\n}\n\nmodule engine_cover() {\n    translate([2, -6, 9])\n        rotate([45, 0, 0])\n            cylinder(h=10, d1=10, d2=6);\n}\n\n// assembly\nunion() {\n    fuselage();\n    cockpit();\n    engine_cover();\n    translate([0, 0, 12])\n        main_rotor();\n    translate([-38.5, 0, -1.5])\n        tail_rotor();\n}",
    "renders": true
  },
  {
    "fruit": "page",
    "openscad_code": "// Realistic 3D printable page\n// Overall dimensions: 80 x 60 x 2mm\n\n// Page thickness and dimensions\npage_thk = 1.2;\npage_w = 80;\npage_h = 60;\n\n// Corner radius for realistic page\ncorner_r = 3;\n\n// Text line parameters\nline_h = 3.5;\nline_spacing = 1.8;\nnum_lines = 12;\ntext_depth = 0.3;\n\n// Hole punch parameters\nhole_d = 4;\nhole_dist = 8;\nhole_y_offset = 5;\nnum_holes = 3;\n\n// Page curl parameters\ncurl_height = 0.8;\ncurl_segments = 20;\n\nmodule rounded_rect(w, h, r, t) {\n    difference() {\n        // Main page body\n        linear_extrude(height = t, convexity = 10) {\n            offset(r = r) {\n                offset(delta = -r) {\n                    square([w, h]);\n                }\n            }\n        }\n    }\n}\n\nmodule page_body() {\n    // Main page with rounded corners\n    translate([0, 0, 0]) {\n        rounded_rect(page_w, page_h, corner_r, page_thk);\n    }\n    \n    // Add subtle curl at bottom right corner\n    for (i = [0:curl_segments-1]) {\n        angle = 90 * i / curl_segments;\n        x_pos = page_w - corner_r + corner_r * cos(angle);\n        y_pos = page_h - corner_r + corner_r * sin(angle);\n        z_pos = curl_height * sin(angle * 2);\n        \n        translate([x_pos, y_pos, z_pos]) {\n            rotate([0, -angle/2, 0]) {\n                cube([page_thk, corner_r*2/curl_segments, page_thk + z_pos/5], center = true);\n            }\n        }\n    }\n}\n\nmodule text_lines() {\n    // Generate realistic text lines as slight indentations\n    for (i = [0:num_lines-1]) {\n        y_pos = page_h - 10 - i * (line_h + line_spacing);\n        translate([12, y_pos, page_thk - text_depth]) {\n            // Main text line\n            cube([page_w - 24, line_h, text_depth]);\n            \n            // Add some variation for realistic text appearance\n            for (j = [0:5]) {\n                x_var = 12 + j * 11 + rand(i*10 + j) * 2;\n                w_var = 3 + rand(i*10 + j + 5) * 4;\n                translate([x_var, 0.5, 0]) {\n                    cube([w_var, line_h - 1, text_depth]);\n                }\n            }\n        }\n    }\n}\n\nmodule margin_lines() {\n    // Left margin line (red)\n    translate([10, 5, page_thk - text_depth]) {\n        color([0.8, 0.2, 0.2]) {\n            cube([0.5, page_h - 10, text_depth]);\n        }\n    }\n    \n    // Top margin line\n    translate([10, page_h - 8, page_thk - text_depth]) {\n        cube([page_w - 20, 0.5, text_depth]);\n    }\n}\n\nmodule hole_punches() {\n    // Create hole punches on left side\n    for (i = [0:num_holes-1]) {\n        y_pos = (page_h / 2) + (i - 1) * hole_dist;\n        translate([-1, y_pos, -0.1]) {\n            cylinder(h = page_thk + 0.2, d = hole_d, $fn = 32);\n        }\n    }\n}\n\nmodule paper_texture() {\n    // Add subtle texture to surface\n    for (x = [5:5:page_w-5]) {\n        for (y = [5:5:page_h-5]) {\n            if (rand(x*100 + y) > 0.7) {\n                translate([x, y, page_thk - 0.05]) {\n                    sphere(d = 0.15, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main assembly\nunion() {\n    // Base page\n    page_body();\n    \n    // Add text and lines\n    difference() {\n        page_body();\n        text_lines();\n        margin_lines();\n    }\n    \n    // Hole punches\n    difference() {\n        page_body();\n        hole_punches();\n    }\n    \n    // Surface texture\n    paper_texture();\n}",
    "renders": true
  },
  {
    "fruit": "parsonbrown",
    "openscad_code": "// ParsonBrown – realistic citrus fruit (orange) on a short stem with small leaf\n// Overall height ≈ 65 mm, max diameter ≈ 50 mm\n\n// Wall thickness for printing\n$fn = 36;\n\nmodule fruit_body(){\n    difference(){\n        // Main orange sphere\n        sphere(d = 48);\n        \n        // Small dimple at top (blossom end)\n        translate([0,0,23])\n            rotate([0,180,0])\n            cylinder(h = 5, r1 = 3, r2 = 0, $fn = 16);\n            \n        // Slight flattening on bottom\n        translate([0,0,-25])\n            cube([50,50,5], center = true);\n    }\n}\n\nmodule texture_segments(){\n    // 10 longitudinal grooves (segments)\n    for(a = [0:36:359]){\n        rotate([0,0,a])\n        translate([0,0,-25])\n            difference(){\n                cylinder(h = 50, r = 24.5, $fn = 3);\n                cylinder(h = 50, r = 22, $fn = 3);\n            }\n    }\n}\n\nmodule stem(){\n    // Short woody stem\n    translate([0,0,24.5])\n        rotate([90,0,0])\n        cylinder(h = 8, r1 = 3, r2 = 2, $fn = 12);\n}\n\nmodule leaf(){\n    // Simple elongated citrus leaf\n    translate([0,-5.5,30])\n        rotate([30,0,-30])\n        scale([1,0.4,0.2])\n            difference(){\n                sphere(d = 18);\n                translate([0,-10,0])\n                    cube([20,20,20], center = true);\n            }\n}\n\nmodule leaf_vein(){\n    // Central vein on leaf\n    translate([0,-5.5,30.5])\n        rotate([30,0,-30])\n        scale([1,0.05,0.05])\n            cylinder(h = 12, r = 1, $fn = 6);\n}\n\n// Assembly\nunion(){\n    union(){\n        fruit_body();\n        texture_segments();\n    }\n    stem();\n    leaf();\n    leaf_vein();\n}",
    "renders": true
  },
  {
    "fruit": "hamlin",
    "openscad_code": "// Hamlin (hamster) 3D printable model – realistic style, medium complexity\n// Final size ≈ 60 mm (nose to tail)\n\n// Basic parameters\nbody_len = 40;       // main body length\nbody_h   = 22;       // body height\nbody_w   = 30;       // body width\nhead_d   = 18;       // head depth\nhead_h   = 15;       // head height\near_size = 7;        // ear diameter\nleg_len  = 8;        // leg length\ntail_len = 20;       // tail length\nfur_ball_r = 3;      // tiny spheres for fur texture\n\nmodule body() {\n    // Core rounded body (ellipsoid)\n    scale([1, 0.8, 0.6])\n        sphere(d=body_len, $fn=40);\n\n    // Belly bulge\n    translate([0, 0, -body_h*0.3])\n        scale([1, 1, 0.4])\n            sphere(d=body_len*1.1, $fn=40);\n}\n\nmodule head() {\n    // Main head sphere\n    translate([body_len/2+2, 0, body_h*0.5])\n        sphere(d=head_d, $fn=32);\n\n    // Snout\n    translate([body_len/2+head_d/2+5, 0, body_h*0.5])\n        scale([1.5, 1, 1])\n            sphere(d=head_d*0.6, $fn=32);\n}\n\nmodule ears() {\n    // Left ear\n    translate([body_len/2+head_d/2-2, head_d/2-1, body_h*0.5+head_h*0.5])\n        rotate([0, 15, -30])\n            difference() {\n                sphere(d=ear_size, $fn=20);\n                translate([0, 0, -ear_size/2])\n                    cube(ear_size+1, center=true);\n            }\n\n    // Right ear\n    translate([body_len/2+head_d/2-2, -head_d/2+1, body_h*0.5+head_h*0.5])\n        rotate([0, -15, 30])\n            difference() {\n                sphere(d=ear_size, $fn=20);\n                translate([0, 0, -ear_size/2])\n                    cube(ear_size+1, center=true);\n            }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([body_len/2+head_d/2+3, head_d/3, body_h*0.5+1])\n        sphere(d=2.5, $fn=16);\n\n    // Right eye\n    translate([body_len/2+head_d/2+3, -head_d/3, body_h*0.5+1])\n        sphere(d=2.5, $fn=16);\n}\n\nmodule nose() {\n    translate([body_len/2+head_d/2+8, 0, body_h*0.5])\n        sphere(d=2, $fn=12);\n}\n\nmodule legs() {\n    // Front left\n    translate([body_len/2-5, body_w/3, -body_h*0.5])\n        rotate([90, 0, 10])\n            cylinder(h=leg_len, d1=4, d2=3, $fn=16);\n\n    // Front right\n    translate([body_len/2-5, -body_w/3, -body_h*0.5])\n        rotate([90, 0, -10])\n            cylinder(h=leg_len, d1=4, d2=3, $fn=16);\n\n    // Rear left\n    translate([-body_len/2+5, body_w/3, -body_h*0.5])\n        rotate([90, 0, -10])\n            cylinder(h=leg_len, d1=4, d2=3, $fn=16);\n\n    // Rear right\n    translate([-body_len/2+5, -body_w/3, -body_h*0.5])\n        rotate([90, 0, 10])\n            cylinder(h=leg_len, d1=4, d2=3, $fn=16);\n}\n\nmodule tail() {\n    // Curved tail using hull of spheres\n    for (i=[0:2:tail_len]) {\n        rotate([0, 0, i*3.5])\n            translate([i-tail_len-5, 0, sin(i*10)*3])\n                sphere(d=6-i*0.2, $fn=16);\n    }\n}\n\nmodule fur_texture() {\n    // Simple fur: scatter tiny spheres across body surface\n    for (a=[-160:20:160], b=[-80:20:80]) {\n        rx = cos(a)*sin(b)*body_len/2*0.9;\n        ry = sin(a)*sin(b)*body_w/2*0.9;\n        rz = cos(b)*body_h/2*0.9;\n        translate([rx, ry, rz])\n            sphere(d=fur_ball_r, $fn=8);\n    }\n}\n\n// Assemble the hamlin\nunion() {\n    body();\n    head();\n    ears();\n    eyes();\n    nose();\n    legs();\n    tail();\n    fur_texture();\n}",
    "renders": true
  },
  {
    "fruit": "valencia",
    "openscad_code": "// Valencia Orange - Realistic Style\n// Medium complexity, 3D printable\n\n// Main parameters\n$fn = 32;\ndiameter = 60;\nheight = 55;\nwall_thickness = 2;\n\n// Orange texture module\nmodule orange_texture() {\n    difference() {\n        children();\n        // Small dimples for realistic texture\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24]) {\n                translate([diameter/2 - 5, 0, height/2]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=3, d1=2, d2=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n        // Additional texture on sides\n        for(j = [1:3]) {\n            for(i = [0:20]) {\n                rotate([0, 0, i * 18]) {\n                    translate([diameter/2 - 8, -3 + j*2, height/2 - 10 + j*5]) {\n                        sphere(d=1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, height/2 + 1]) {\n        cylinder(h=8, d1=4, d2=2, $fn=16);\n    }\n}\n\n// Leaf module\nmodule leaf() {\n    translate([0, 5, height/2 + 8]) {\n        rotate([0, 110, 0]) {\n            scale([1, 0.5, 0.1]) {\n                sphere(d=20, $fn=32);\n            }\n        }\n    }\n}\n\n// Navel module\nmodule navel() {\n    translate([0, 0, -height/2]) {\n        cylinder(h=3, d1=8, d2=6, $fn=16);\n    }\n}\n\n// Main orange body\ndifference() {\n    // Basic orange shape (slightly flattened sphere)\n    scale([1, 1, 0.9]) {\n        sphere(d=diameter);\n    }\n    \n    // Hollow out the inside\n    scale([1, 1, 0.9]) {\n        sphere(d=diameter - wall_thickness*2);\n    }\n}\n\n// Apply orange texture\norange_texture() {\n    scale([1, 1, 0.9]) {\n        sphere(d=diameter);\n    }\n}\n\n// Add stem\nstem();\n\n// Add leaf\nleaf();\n\n// Add navel at bottom\nnavel();\n\n// Small calyx remnants\nfor(i = [0:5]) {\n    rotate([0, 0, i * 60]) {\n        translate([diameter/2 - 2, 0, height/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=2, d1=1.5, d2=0.5, $fn=6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "navel",
    "openscad_code": "// Realistic navel model (medium complexity)\n// Overall dimensions: ~50mm diameter, ~20mm height\n\n// Main parameters\n$fn = 60;\nbelly_diameter = 50;\nbelly_height = 20;\nnavel_depth = 6;\nwall_thickness = 2;\n\n// Base belly dome\nmodule belly_dome() {\n    difference() {\n        sphere(d = belly_diameter);\n        translate([0, 0, -belly_height/2]) \n            cube([belly_diameter*2, belly_diameter*2, belly_height], center = true);\n    }\n}\n\n// Central navel cavity\nmodule navel_cavity() {\n    // Upper funnel\n    translate([0, 0, -navel_depth/2]) \n        cylinder(h = navel_depth, \n                 r1 = belly_diameter * 0.15, \n                 r2 = belly_diameter * 0.08);\n    \n    // Lower rounded base\n    translate([0, 0, -navel_depth]) \n        sphere(d = belly_diameter * 0.16);\n}\n\n// Fold lines around navel\nmodule skin_folds() {\n    for(i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([belly_diameter * 0.18, 0, -1]) \n                scale([1, 0.3, 1]) \n                    cylinder(h = navel_depth + 2, \n                             r1 = belly_diameter * 0.05, \n                             r2 = belly_diameter * 0.02);\n        }\n    }\n}\n\n// Radial wrinkles\nmodule radial_wrinkles() {\n    for(i = [0:15:359]) {\n        rotate([0, 0, i]) {\n            translate([belly_diameter * 0.25, 0, -0.5]) \n                scale([1, 0.2, 0.5]) \n                    cylinder(h = navel_depth * 0.8, \n                             r1 = belly_diameter * 0.03, \n                             r2 = 0);\n        }\n    }\n}\n\n// Skin texture bumps\nmodule skin_texture() {\n    for(a = [0:45:359]) {\n        for(r = [0.3:0.1:0.45]) {\n            rotate([0, 0, a + r*100]) {\n                translate([belly_diameter * r, 0, -0.5]) \n                    sphere(d = belly_diameter * 0.015);\n            }\n        }\n    }\n}\n\n// Hollow base for 3D printing\nmodule hollow_base() {\n    difference() {\n        belly_dome();\n        scale([0.85, 0.85, 0.85]) \n            translate([0, 0, wall_thickness]) \n                belly_dome();\n    }\n}\n\n// Final assembly\ndifference() {\n    hollow_base();\n    navel_cavity();\n    skin_folds();\n    radial_wrinkles();\n}\n\n// Add subtle texture on surface\ntranslate([0, 0, 0.5]) \n    skin_texture();",
    "renders": true
  },
  {
    "fruit": "bloodorange",
    "openscad_code": "// Bloodorange – medium-complexity realistic style\n// Outer dimensions ≈ 70 mm (fits in 50-100 mm range)\n// Wall thickness ≥ 1.2 mm for reliable FDM printing\n\nmodule peel() {\n    // Main peel shell (hollow sphere)\n    difference() {\n        sphere(d = 70, $fn = 100);\n        sphere(d = 67.6, $fn = 100);   // 1.2 mm wall\n    }\n    \n    // Peel texture: shallow dimples\n    for (i = [0 : 30]) {\n        rotate([0, 0, i * 12]) {\n            translate([0, 35, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 2, d1 = 4, d2 = 2, $fn = 12);\n                }\n            }\n        }\n    }\n}\n\nmodule segments() {\n    // 10 radial segments\n    for (a = [0 : 36 : 324]) {\n        rotate([0, 0, a]) {\n            difference() {\n                // Segment wedge\n                intersection() {\n                    translate([0, 0, -5]) cube([70, 6, 40], center = true);\n                    sphere(d = 65, $fn = 100);\n                }\n                // Remove center to form membrane gap\n                translate([0, 0, -5]) cube([68, 2.5, 38], center = true);\n            }\n        }\n    }\n}\n\nmodule flesh() {\n    // Inner flesh sphere\n    color(\"darkred\") {\n        sphere(d = 65, $fn = 100);\n    }\n    \n    // Random vesicles for realism\n    for (i = [0 : 80]) {\n        rotate([rand(i) * 180, rand(i + 100) * 180, rand(i + 200) * 180]) {\n            translate([rand(i + 300) * 20 + 5, 0, 0]) {\n                sphere(d = rand(i + 400) * 2 + 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Utility random helper\nfunction rand(n) = (n * 13.73) % 1;\n\n// Assembly\ndifference() {\n    union() {\n        peel();\n        segments();\n    }\n    \n    // Opening at the top for printing support removal\n    translate([0, 0, 34]) cylinder(h = 10, d = 15, $fn = 32);\n}\n\n// Optional stem stub on top\ntranslate([0, 0, 35]) {\n    cylinder(h = 8, d1 = 6, d2 = 4, $fn = 16);\n}",
    "renders": true
  },
  {
    "fruit": "cara",
    "openscad_code": "// Realistic Car - Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm walls)\n\n$fn = 32;\n\n// Main dimensions (mm)\ncar_length = 80;\ncar_width = 35;\ncar_height = 25;\nwheel_diameter = 12;\nwheel_width = 6;\n\nmodule car_body() {\n    // Main chassis\n    difference() {\n        // Base body shape\n        hull() {\n            translate([-car_length/2+5, -car_width/2, 0])\n                cube([car_length-10, car_width, car_height/2]);\n            translate([-car_length/2+10, -car_width/2+3, car_height/2])\n                cube([car_length-20, car_width-6, car_height/2]);\n        }\n        \n        // Wheel wells (4 wheels)\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*25, y*(car_width/2-2), 2])\n                    rotate([0, 0, 0])\n                        cylinder(h=10, d=wheel_diameter+2);\n            }\n        }\n    }\n    \n    // Hood slope\n    translate([-car_length/2+5, -car_width/2, car_height/2])\n        cube([car_length/3, car_width, car_height/4]);\n    \n    // Roof\n    translate([-car_length/4, -car_width/2+5, car_height*0.75])\n        cube([car_length/2, car_width-10, car_height/4]);\n}\n\nmodule windows() {\n    // Windshield\n    translate([-car_length/2+15, -car_width/2+3, car_height*0.75])\n        rotate([0, -20, 0])\n            cube([10, car_width-6, car_height/4]);\n    \n    // Rear window\n    translate([car_length/2-25, -car_width/2+3, car_height*0.75])\n        rotate([0, 20, 0])\n            cube([10, car_width-6, car_height/4]);\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([-5, side*(car_width/2-1), car_height*0.8])\n            cube([25, 2, car_height/4]);\n    }\n}\n\nmodule wheels() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*25, y*(car_width/2-2), wheel_diameter/2+2]) {\n                // Tire\n                color(\"black\")\n                    cylinder(h=wheel_width, d=wheel_diameter);\n                \n                // Rim\n                color(\"gray\")\n                    translate([0, 0, wheel_width/2])\n                        cylinder(h=1, d=wheel_diameter-4);\n            }\n        }\n    }\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([-car_length/2+2, 0, car_height/4])\n        cube([5, car_width-4, car_height/3]);\n    \n    // Rear bumper\n    translate([car_length/2-7, 0, car_height/4])\n        cube([5, car_width-4, car_height/3]);\n}\n\nmodule lights() {\n    // Headlights\n    for(side = [-1, 1]) {\n        translate([-car_length/2+3, side*(car_width/2-5), car_height/2])\n            cube([3, 4, 2]);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([car_length/2-6, side*(car_width/2-5), car_height/2])\n            cube([3, 4, 2]);\n    }\n}\n\nmodule doors() {\n    // Door lines\n    translate([-15, -car_width/2, car_height/2])\n        cube([30, 0.5, car_height/2]);\n    translate([5, -car_width/2, car_height/2])\n        cube([25, 0.5, car_height/2]);\n}\n\n// Assemble the car\nunion() {\n    color(\"blue\") car_body();\n    color(\"lightblue\") windows();\n    color(\"gray\") bumpers();\n    color(\"yellow\") lights();\n    color(\"black\") doors();\n}\nwheels();",
    "renders": true
  },
  {
    "fruit": "tarocco",
    "openscad_code": "// Tarocco (Blood Orange) - Realistic Medium Complexity\n// Approximate size: 70mm diameter\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Main parameters\norange_diameter = 70;\npeel_thickness = 2.5;\nsegment_count = 12;\nstem_height = 8;\nstem_diameter = 5;\n\nmodule stem() {\n    // Orange stem with slight taper\n    translate([0, 0, orange_diameter/2 + stem_height/2]) {\n        cylinder(h = stem_height, d1 = stem_diameter, d2 = stem_diameter * 0.7, $fn = 8);\n        // Small leaf\n        translate([stem_diameter/2, 0, stem_height/2]) {\n            rotate([0, 90, 0]) {\n                scale([2, 1, 0.5]) {\n                    sphere(d = stem_diameter * 1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule peel_texture() {\n    // Subtle dimples across peel surface\n    for (i = [0:15]) {\n        rotate([0, 0, i * 360/16]) {\n            for (j = [0:3]) {\n                angle = j * 30 + 15;\n                translate([\n                    sin(angle) * (orange_diameter/2 - peel_thickness/2),\n                    cos(angle) * (orange_diameter/2 - peel_thickness/2),\n                    0\n                ]) {\n                    sphere(d = peel_thickness * 0.4, $fn = 12);\n                }\n            }\n        }\n    }\n}\n\nmodule peel() {\n    // Main orange peel with thickness\n    difference() {\n        sphere(d = orange_diameter);\n        \n        // Hollow out the inside\n        sphere(d = orange_diameter - peel_thickness * 2);\n        \n        // Remove top and bottom for opening\n        translate([0, 0, orange_diameter/2 - peel_thickness]) {\n            cube([orange_diameter, orange_diameter, peel_thickness * 2], center = true);\n        }\n        translate([0, 0, -orange_diameter/2 + peel_thickness]) {\n            cube([orange_diameter, orange_diameter, peel_thickness * 2], center = true);\n        }\n    }\n    \n    // Add peel texture\n    peel_texture();\n}\n\nmodule segment_vesicles() {\n    // Small juice vesicles inside segments\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([orange_diameter/4, 0, 0]) {\n                for (j = [0:5]) {\n                    translate([j * 2 - 5, 0, 0]) {\n                        sphere(d = 1.5, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule segment() {\n    // Individual orange segment with pulp\n    difference() {\n        // Basic segment shape\n        intersection() {\n            sphere(d = orange_diameter - peel_thickness * 2 - 2);\n            rotate([0, 0, 15]) {\n                cube([orange_diameter/2, orange_diameter/2, orange_diameter], center = true);\n            }\n        }\n        \n        // Thin membrane between segments\n        translate([0, 0, -orange_diameter/4]) {\n            cube([orange_diameter, 0.5, orange_diameter/2], center = true);\n        }\n    }\n    \n    // Add vesicles\n    segment_vesicles();\n}\n\nmodule orange_interior() {\n    // All segments inside\n    for (i = [0:segment_count-1]) {\n        rotate([0, 0, i * 360/segment_count]) {\n            translate([0, 0, peel_thickness - orange_diameter/4]) {\n                scale([0.9, 0.9, 1]) {\n                    color([0.9, 0.4, 0.3]) {\n                        segment();\n                    }\n                }\n            }\n        }\n    }\n    \n    // Central pith\n    color([0.95, 0.95, 0.85]) {\n        cylinder(h = orange_diameter - peel_thickness * 2 - 2, d = 6, center = true);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Orange peel\n    color([0.9, 0.45, 0.15]) {\n        peel();\n    }\n    \n    // Interior segments\n    color([0.95, 0.3, 0.2]) {\n        orange_interior();\n    }\n    \n    // Stem\n    color([0.2, 0.5, 0.2]) {\n        stem();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "moro",
    "openscad_code": "// Moro model - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, 1.2mm wall thickness\n\n$fn = 36;\n\n// Main parameters\nbody_h = 45;\nbody_w = 25;\nhead_d = 20;\narm_len = 30;\nleg_len = 35;\nwall_t = 1.2;\n\nmodule moro() {\n    // Head - spherical with flattened bottom\n    translate([0, 0, body_h + head_d/2 - 3])\n    difference() {\n        sphere(d = head_d);\n        translate([0, 0, -head_d/2])\n        cube([head_d*2, head_d*2, head_d], center = true);\n    }\n    \n    // Body - egg shape made from spheres\n    translate([0, 0, body_h/2])\n    scale([1, 0.8, 1.2])\n    sphere(d = body_w);\n    \n    // Arms - tapered cylinders with rounded ends\n    for(side = [-1, 1]) {\n        translate([side * (body_w/2 + 2), 0, body_h - 8])\n        rotate([0, side * 20, -side * 15])\n        union() {\n            cylinder(h = arm_len, d1 = 6, d2 = 4, center = true);\n            translate([0, 0, arm_len/2])\n            sphere(d = 4);\n        }\n    }\n    \n    // Legs - tapered cylinders with feet\n    for(side = [-1, 1]) {\n        translate([side * 6, 0, -2])\n        rotate([0, 0, side * 5])\n        union() {\n            cylinder(h = leg_len, d1 = 7, d2 = 5);\n            translate([0, 0, -leg_len/2 - 3])\n            scale([1.2, 1.5, 0.8])\n            sphere(d = 8);\n        }\n    }\n    \n    // Eyes - small spheres\n    for(side = [-1, 1]) {\n        translate([side * 5, -head_d/2 + 3, body_h + head_d - 6])\n        sphere(d = 3);\n    }\n    \n    // Mouth - small cylinder indentation\n    translate([0, -head_d/2 + 1, body_h + head_d - 10])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d = 4, $fn = 16);\n    \n    // Ears - small spheres on sides\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, body_h + head_d - 5])\n        sphere(d = 4);\n    }\n}\n\n// Create the moro\nmoro();",
    "renders": true
  },
  {
    "fruit": "bergamia",
    "openscad_code": "// Bergamot orange (Citrus bergamia)\n// Medium-complexity realistic 3D printable model\n// Approx. 60 mm tall, 55 mm wide\n\n$fn = 48;           // Global smoothness\nrind_thick = 2;     // Wall thickness for printing\n\n// Main fruit body\nmodule fruit_body() {\n    difference() {\n        // Overall ellipsoid shape\n        scale([1, 1, 1.15])\n            sphere(d = 50);\n\n        // Flatten top and bottom slightly\n        translate([0, 0, 29])\n            cylinder(h = 10, d1 = 30, d2 = 0, $fn = 36);\n        translate([0, 0, -29])\n            cylinder(h = 10, d1 = 30, d2 = 0, $fn = 36);\n    }\n}\n\n// Surface dimples (characteristic oil glands)\nmodule oil_dimples() {\n    for(a = [0 : 30 : 359])\n        for(e = [20 : 20 : 160]) {\n            rotate([0, e, a])\n                translate([0, 0, 25])\n                    sphere(d = 3.5);\n        }\n}\n\n// Calyx (top with persistent sepals)\nmodule calyx() {\n    difference() {\n        // Central bump\n        translate([0, 0, 28])\n            cylinder(h = 4, d1 = 8, d2 = 5);\n        \n        // Hollow center\n        translate([0, 0, 28])\n            cylinder(h = 5, d = 2.5);\n    }\n    \n    // Sepals\n    for(i = [0 : 72 : 359]) {\n        rotate([0, 0, i])\n            translate([3.5, 0, 28])\n                rotate([90, 0, 90])\n                    cylinder(h = 6, d1 = 1.5, d2 = 0.7);\n    }\n}\n\n// Stylar scar (bottom navel)\nmodule stylar_scar() {\n    translate([0, 0, -28.5])\n        cylinder(h = 1.5, d1 = 6, d2 = 4);\n}\n\n// Peel with thickness\nmodule peel() {\n    difference() {\n        union() {\n            fruit_body();\n            calyx();\n            stylar_scar();\n        }\n        \n        // Hollow core\n        scale([1, 1, 1.15])\n            sphere(d = 50 - rind_thick * 2);\n        \n        // Flatten inner top & bottom\n        translate([0, 0, 27.5])\n            cylinder(h = 10, d1 = 30 - rind_thick, d2 = 0, $fn = 36);\n        translate([0, 0, -27.5])\n            cylinder(h = 10, d1 = 30 - rind_thick, d2 = 0, $fn = 36);\n    }\n}\n\n// Assembly\ndifference() {\n    peel();\n    // Subtract dimples to create surface texture\n    translate([0, 0, 1])\n        scale([0.98, 0.98, 0.98])\n            oil_dimples();\n}",
    "renders": true
  },
  {
    "fruit": "pompia",
    "openscad_code": "// Pompia (Citrus medica tuberosa) – realistic medium-complexity model\n// Overall envelope ≈ 80 mm\n\n// Constants for easy scaling\n$rind_thick = 2.5;\n$wall = 1.8;           // 3D-printable wall thickness\n$main_d = 65;\n$h_main = 60;\n$stalk_len = 18;\n$stalk_d = 6;\n$nodules = 5;          // typical lumpy protrusions\n\nmodule stalk() {\n    // Curved central stalk with slight taper\n    translate([0,0,$h_main/2+$stalk_len/2-5])\n        rotate([90,0,0])\n        cylinder(h=$stalk_len, d1=$stalk_d, d2=$stalk_d*0.7, $fn=20);\n}\n\nmodule rind() {\n    // Basic ellipsoid body\n    difference() {\n        scale([1,1,$h_main/$main_d])\n            sphere(d=$main_d, $fn=80);\n        \n        // Hollow inside\n        scale([1,1,$h_main/$main_d])\n            sphere(d=$main_d - 2*$rind_thick, $fn=70);\n    }\n}\n\nmodule nodule(i) {\n    // Random-looking bumps\n    angle = i * 137.5;  // golden angle for organic spread\n    h = $h_main/2 - $rind_thick;\n    r = ($main_d/2 - $rind_thick*2) * 0.9;\n    \n    translate([r*cos(angle), r*sin(angle), h*sin(i*0.8)])\n        scale([1,1,0.7])\n            sphere(d=$rind_thick*3, $fn=15);\n}\n\nmodule surface_texture() {\n    // Slight wrinkled skin using tiny random bumps\n    for (i=[0:20]) {\n        rotate([rands(0,10,1)[0], rands(0,360,1)[0], rands(0,360,1)[0]])\n            translate([\n                rands(-$main_d/2+$rind_thick, $main_d/2-$rind_thick,1)[0],\n                rands(-$main_d/2+$rind_thick, $main_d/2-$rind_thick,1)[0],\n                rands(-$h_main/2+$rind_thick, $h_main/2-$rind_thick,1)[0]\n            ])\n                sphere(d=1.5, $fn=6);\n    }\n}\n\nmodule body() {\n    union() {\n        rind();\n        // Add protruding nodules\n        for (i=[0:$nodules-1]) nodule(i);\n        // External texture layer\n        surface_texture();\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    stalk();\n}",
    "renders": true
  },
  {
    "fruit": "melogold",
    "openscad_code": "// Melogold (pummelo × grapefruit hybrid) - Realistic Style\n// Size: ~70 mm diameter\n\n$fn = 48;\n\nmodule melogold() {\n    // Main fruit body\n    difference() {\n        // Outer sphere with slight squash\n        scale([1, 1, 0.9])\n        sphere(d = 65);\n        \n        // Stem cavity\n        translate([0, 0, 32])\n        cylinder(h = 8, d1 = 8, d2 = 12, center = true);\n    }\n    \n    // Thick peel (2mm)\n    difference() {\n        scale([1, 1, 0.9])\n        sphere(d = 69);\n        scale([1, 1, 0.9])\n        sphere(d = 65);\n    }\n    \n    // Stem\n    translate([0, 0, 32])\n    rotate([0, 180, 0])\n    cylinder(h = 6, d1 = 6, d2 = 8);\n    \n    // Leaf attachment\n    translate([0, 6, 34])\n    rotate([110, 0, 0])\n    scale([1, 0.4, 1])\n    cylinder(h = 12, d1 = 8, d2 = 4);\n    \n    // Leaf\n    translate([0, 4, 34])\n    rotate([110, 0, 0])\n    scale([1, 0.4, 2.5])\n    sphere(d = 12);\n    \n    // Surface dimples - create using small spheres\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([0, 32, 0])\n        rotate([90, 0, 0])\n        rotate([i * 12, 0, 0])\n        translate([0, 0, 0])\n        for (j = [0:3]) {\n            rotate([0, j * 30, 0])\n            translate([0, 0, 30])\n            scale([1, 1, 0.3])\n            sphere(d = 3);\n        }\n    }\n    \n    // Bottom navel\n    translate([0, 0, -30])\n    sphere(d = 6);\n    \n    // Peel texture ridges\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, 33, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 60, d = 2, center = true);\n    }\n}\n\n// Render the melogold\nmelogold();",
    "renders": true
  },
  {
    "fruit": "oroblanco",
    "openscad_code": "// Oroblanco (sweetie) – medium–complexity realistic model\n// 1:1 scale, 80 mm Ø, printable without support\n\n// General parameters\ndia        = 80;           // fruit diameter (mm)\npeel       = 3;            // peel thickness\nsegments   = 64;           // sphere smoothness\npith       = 1.8;          // white pith layer\nwedge_cnt  = 12;           // number of wedges\ncore_r     = 8;            // central pith core radius\n\nmodule oroblanco() {\n    // --- peel (yellow rind with slightly flattened poles)\n    color(\"gold\")\n    difference() {\n        scale([1, 1, 0.95]) sphere(d = dia, $fn = segments);\n        // hollow out\n        scale([1, 1, 0.95]) sphere(d = dia - 2*peel, $fn = segments);\n    }\n\n    // --- white pith layer (inner peel)\n    color(\"ivory\")\n    difference() {\n        scale([1, 1, 0.95]) sphere(d = dia - 2*peel, $fn = segments);\n        scale([1, 1, 0.95]) sphere(d = dia - 2*(peel+pith), $fn = segments);\n    }\n\n    // --- fruit flesh (light yellow)\n    color(\"lemonchiffon\")\n    difference() {\n        scale([1, 1, 0.95]) sphere(d = dia - 2*(peel+pith), $fn = segments);\n\n        // remove core\n        cylinder(h = dia, r = core_r, $fn = segments, center = true);\n    }\n\n    // --- wedges (segments)\n    for (i = [0 : wedge_cnt-1])\n        rotate([0, 0, i * 360/wedge_cnt])\n            wedge();\n}\n\n// single wedge\nmodule wedge() {\n    // thickness tapers toward center\n    outer_r = (dia - 2*(peel+pith))/2;\n    inner_r = core_r;\n    h = outer_r - inner_r;\n\n    difference() {\n        // wedge body\n        translate([0, 0, -outer_r])\n            union() {\n                // outer curved face\n                cylinder(h = outer_r*2, r = outer_r, $fn = 6);\n                // inner curved face\n                cylinder(h = outer_r*2, r = inner_r, $fn = 6);\n            }\n\n        // cut sides\n        rotate([0, 0, 180/wedge_cnt])\n            cube([dia, dia, dia], center = true);\n        rotate([0, 0, -180/wedge_cnt])\n            cube([dia, dia, dia], center = true);\n\n        // flatten top/bottom\n        translate([0, 0, outer_r-0.1])\n            cube([dia, dia, 0.2], center = true);\n        translate([0, 0, -(outer_r-0.1)])\n            cube([dia, dia, 0.2], center = true);\n    }\n}\n\n// small stem stub\ntranslate([0, 0, (dia/2)*0.95])\n    cylinder(h = 3, r1 = 4, r2 = 2, $fn = 16);\n\noroblanco();",
    "renders": true
  },
  {
    "fruit": "chandler",
    "openscad_code": "// Realistic Chandler (medium complexity)\n// Size: ~80mm tall, 3D printable with no overhangs\n\n$fn = 36;  // Smooth curves\n\n// Main module\nmodule chandler() {\n    // Base plate\n    union() {\n        // Circular base\n        cylinder(h = 3, d = 60, center = true);\n        \n        // Mounting ring\n        translate([0, 0, -1.5])\n            cylinder(h = 5, d1 = 40, d2 = 35, center = true);\n        \n        // Central pole\n        translate([0, 0, 1.5])\n            cylinder(h = 40, d = 8, center = false);\n        \n        // Top arm assembly\n        translate([0, 0, 41.5])\n            top_arms();\n        \n        // Candle holders\n        candle_holders();\n        \n        // Decorative rings\n        decorative_rings();\n    }\n}\n\n// Top arms module\nmodule top_arms() {\n    for(a = [0, 60, 120, 180, 240, 300]) {\n        rotate([0, 0, a])\n            translate([27, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 30, d = 4, center = true);\n    }\n    \n    // Central hub\n    sphere(d = 12);\n}\n\n// Candle holders module\nmodule candle_holders() {\n    // Positions for 6 arms\n    for(a = [0, 60, 120, 180, 240, 300]) {\n        rotate([0, 0, a])\n            translate([45, 0, 20])\n                candle_cup();\n    }\n}\n\n// Individual candle cup\nmodule candle_cup() {\n    difference() {\n        // Main cup\n        cylinder(h = 8, d1 = 12, d2 = 10);\n        \n        // Candle hole\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 8);\n        \n        // Drip tray\n        translate([0, 0, 7])\n            cylinder(h = 2, d = 16);\n    }\n    \n    // Support arm\n    translate([0, 0, 4])\n        rotate([0, 90, 0])\n            cylinder(h = 45, d = 4);\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    // Lower ring\n    translate([0, 0, 10])\n        torus(30, 2);\n    \n    // Middle ring\n    translate([0, 0, 25])\n        torus(25, 1.5);\n    \n    // Upper ring\n    translate([0, 0, 38])\n        torus(20, 1);\n}\n\n// Simple torus for decoration\nmodule torus(r_major, r_minor) {\n    rotate_extrude()\n        translate([r_major, 0, 0])\n            circle(r = r_minor);\n}\n\n// Render the chandler\nchandler();",
    "renders": true
  },
  {
    "fruit": "marsh",
    "openscad_code": "// Realistic 3D printable marsh diorama\n// Dimensions: 80 x 60 x 15 mm\n\n// Base water layer\nmodule water_base() {\n    difference() {\n        cube([80, 60, 3], center = true);\n        translate([0, 0, 1.5]) cube([78, 58, 3], center = true);\n    }\n}\n\n// Mud banks\nmodule mud_bank(x, y, rot, length, width) {\n    translate([x, y, -1]) rotate([0, 0, rot]) {\n        difference() {\n            cube([length, width, 2], center = true);\n            translate([0, 0, 1]) scale([0.9, 0.9, 1]) cube([length, width, 2], center = true);\n        }\n    }\n}\n\n// Reed stalk module\nmodule reed(x, y, height, angle) {\n    translate([x, y, 0]) rotate([angle, 0, 0]) {\n        // Main stalk\n        cylinder(h = height, d1 = 1.2, d2 = 0.8, $fn = 8);\n        // Seed head\n        translate([0, 0, height]) sphere(d = 2, $fn = 12);\n    }\n}\n\n// Lily pad module\nmodule lily_pad(x, y, size, rot) {\n    translate([x, y, 1.5]) rotate([0, 0, rot]) {\n        difference() {\n            scale([1, 0.8, 0.3]) sphere(d = size, $fn = 32);\n            translate([0, 0, -0.5]) cylinder(h = 1, d = size * 0.3, $fn = 16);\n        }\n    }\n}\n\n// Cattail module\nmodule cattail(x, y, height) {\n    translate([x, y, 0]) {\n        // Stem\n        cylinder(h = height, d = 0.8, $fn = 6);\n        // Brown cattail head\n        translate([0, 0, height]) rotate([90, 0, 0]) \n            scale([1, 1, 2]) sphere(d = 2.5, $fn = 16);\n    }\n}\n\n// Create the marsh scene\nunion() {\n    // Water layer\n    color(\"darkblue\") water_base();\n    \n    // Mud banks around edges\n    for (i = [0:45:315]) {\n        mud_bank(\n            35 * cos(i), \n            25 * sin(i), \n            i, \n            20 + 5 * sin(i/2), \n            8 + 3 * cos(i/3)\n        );\n    }\n    \n    // Reeds along back edge\n    for (i = [-35:5:35]) {\n        reed(i, 25, 12 + 3 * sin(i*2), -2 + 1 * cos(i));\n    }\n    \n    // More reeds scattered\n    for (i = [0:7:5]) {\n        reed(\n            -30 + 60 * (i/5), \n            -20 + 10 * sin(i*3), \n            8 + 2 * (i%3), \n            -3 + 2 * (i%2)\n        );\n    }\n    \n    // Lily pads\n    lily_pad(-15, 5, 8, 15);\n    lily_pad(10, -8, 6, -30);\n    lily_pad(20, 12, 10, 45);\n    lily_pad(-5, -15, 7, 0);\n    \n    // Cattails\n    cattail(-25, 20, 14);\n    cattail(-22, 18, 12);\n    cattail(25, -20, 15);\n    cattail(28, -18, 13);\n    \n    // Small rocks\n    translate([15, 15, 1]) scale([1, 0.7, 0.5]) sphere(d = 4, $fn = 16);\n    translate([-20, -10, 1]) scale([1.2, 1, 0.6]) sphere(d = 3, $fn = 16);\n    translate([5, -25, 1]) scale([0.8, 1.1, 0.4]) sphere(d = 3.5, $fn = 16);\n}",
    "renders": true
  },
  {
    "fruit": "rubyred",
    "openscad_code": "// Rubyred - realistic style, medium complexity\n// Overall size: 60mm tall, 3D-printable\n\n$fn = 36;\n\n// Main body parameters\nbody_height = 30;\nbody_width = 18;\nbody_depth = 22;\n\n// Head parameters\nhead_radius = 12;\nbeak_length = 7;\nbeak_width = 3;\neye_radius = 2.5;\n\n// Wing parameters\nwing_span = 28;\nwing_thickness = 2.5;\n\n// Tail parameters\ntail_length = 20;\ntail_height = 15;\n\n// Feet parameters\nfoot_length = 8;\nfoot_width = 3;\ntoe_length = 4;\n\n// Color definitions\nrubyred_color = [0.8, 0.1, 0.2];\n\n// Main module\nmodule rubyred() {\n    // Body\n    union() {\n        // Torso\n        translate([0, 0, body_height/2])\n            scale([body_width, body_depth, body_height])\n                sphere(r = 1);\n        \n        // Head\n        translate([0, 0, body_height + head_radius - 3])\n            sphere(r = head_radius);\n        \n        // Beak\n        translate([head_radius, 0, body_height + head_radius - 1])\n            rotate([0, 90, 0])\n                cylinder(h1 = beak_length, h2 = beak_length*0.7, r1 = beak_width, r2 = 0);\n        \n        // Eyes\n        translate([-head_radius*0.3, head_radius*0.6, body_height + head_radius*0.8])\n            sphere(r = eye_radius);\n        translate([-head_radius*0.3, -head_radius*0.6, body_height + head_radius*0.8])\n            sphere(r = eye_radius);\n        \n        // Wings\n        // Left wing\n        translate([-body_width/2 - wing_thickness/2, 0, body_height*0.7])\n            rotate([0, 0, -20])\n                wing();\n        \n        // Right wing\n        translate([body_width/2 + wing_thickness/2, 0, body_height*0.7])\n            rotate([0, 0, 20])\n                mirror([0, 1, 0])\n                    wing();\n        \n        // Tail\n        translate([0, -body_depth/2 - 2, body_height*0.6])\n            tail();\n        \n        // Feet\n        translate([-body_width/3, 0, 0])\n            foot();\n        translate([body_width/3, 0, 0])\n            foot();\n    }\n}\n\n// Wing module\nmodule wing() {\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([0, 0, 0])\n                cube([wing_thickness, wing_span/3, wing_span/2]);\n            translate([0, wing_span/2, wing_span/3])\n                cube([wing_thickness, wing_span/4, wing_span/4]);\n        }\n        \n        // Wing detail - feather cuts\n        for(i = [1:3]) {\n            translate([0, i*wing_span/4, wing_span/4])\n                rotate([0, 45, 0])\n                    cube([wing_thickness*2, wing_span/6, wing_span/6]);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    union() {\n        // Main tail feathers\n        for(i = [-1:1]) {\n            translate([i*tail_length/4, 0, 0])\n                rotate([0, i*5, 0])\n                    cube([tail_length/3, tail_length/8, tail_height - abs(i)*3]);\n        }\n        \n        // Central tail\n        translate([0, 0, tail_height/2])\n            cube([tail_length, tail_length/10, tail_height/3]);\n    }\n}\n\n// Foot module\nmodule foot() {\n    union() {\n        // Leg\n        translate([0, 0, foot_length/2])\n            cylinder(h = foot_length, r = foot_width/2);\n        \n        // Foot base\n        translate([0, foot_length/2, foot_length/2])\n            cube([foot_width, foot_length, foot_width/2]);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i*foot_width/2, foot_length + toe_length/2, foot_width/2])\n                cube([foot_width/3, toe_length, foot_width/3]);\n        }\n    }\n}\n\n// Apply color\ncolor(rubyred_color)\n    rubyred();",
    "renders": true
  },
  {
    "fruit": "starruby",
    "openscad_code": "// Star Ruby (medium complexity – realistic style)\n// Overall height ≈ 65 mm, printable without supports\n\n// Basic geometric parameters\nr = 20;          // outer radius of the ruby body\nh = 40;          // total height\ncore_h = 35;     // height of the main body\npin_h = 5;       // height of the printing pin / base\nstar_h = 0.8;    // depth of the star cut\nfacet_depth = 1.5; // how much each facet cuts in\n\n// Facet angles for a realistic ruby crown\nfacet_angles = [ [35,0], [25,30], [15,60], [5,90], [-5,120], [-15,150], [-25,180],\n                 [-15,210], [-5,240], [5,270], [15,300], [25,330] ];\n\n// Main body (truncated cone + printing pin)\nmodule ruby_body() {\n    union() {\n        cylinder(h = core_h, r1 = r, r2 = r * 0.7, $fn = 72);\n        cylinder(h = pin_h,  r1 = r * 0.7, r2 = r * 0.7, $fn = 72);\n    }\n}\n\n// Crown facets – 12 triangular planes cut into the top\nmodule crown_facets() {\n    difference() {\n        ruby_body();\n        for(a = facet_angles) {\n            rotate([a[0], 0, a[1]])\n                translate([0, 0, core_h])\n                    cube([r * 4, r * 4, facet_depth], center = true);\n        }\n    }\n}\n\n// Star cut – raised 6-point star on the table\nmodule star_cut() {\n    difference() {\n        // thin disc on the table\n        translate([0,0,core_h - star_h/2])\n            cylinder(h = star_h, r = r * 0.6, $fn = 72);\n\n        // six radial cut-outs for the star\n        for(i = [0:5]) {\n            rotate([0,0,i*60])\n                translate([0, r * 0.3, core_h - star_h/2])\n                    cube([r * 0.12, r * 0.6, star_h * 1.2], center = true);\n        }\n    }\n}\n\n// Girdle ring – thin ridge for realism\nmodule girdle_ring() {\n    color(\"red\")\n    translate([0,0,core_h * 0.3])\n        cylinder(h = 1.5, r1 = r + 1, r2 = r + 1, $fn = 72);\n}\n\n// Assemble the final model\nunion() {\n    crown_facets();\n    star_cut();\n    girdle_ring();\n}",
    "renders": true
  },
  {
    "fruit": "flame",
    "openscad_code": "// Realistic flame model for 3D printing\n// Medium complexity - roughly 80mm tall\n\n// Main parameters\nflame_height = 80;\nbase_radius = 15;\nwall_thickness = 2;\n\n// Module for a single flame lobe\nmodule flame_lobe(height, radius, twist) {\n    union() {\n        // Outer shell\n        rotate([0, 0, twist]) \n            cylinder(h=height, r1=radius, r2=radius*0.3, center=false, $fn=32);\n        \n        // Inner void for hollow printing\n        translate([0, 0, wall_thickness])\n            rotate([0, 0, twist])\n                cylinder(h=height-wall_thickness*2, r1=radius-wall_thickness, \n                        r2=(radius*0.3)-wall_thickness, center=false, $fn=32);\n    }\n}\n\n// Base module for stability\nmodule flame_base() {\n    difference() {\n        cylinder(h=wall_thickness*2, r=base_radius, $fn=48);\n        translate([0, 0, wall_thickness])\n            cylinder(h=wall_thickness*2, r=base_radius-wall_thickness, $fn=48);\n    }\n}\n\n// Create realistic flame with multiple lobes\nmodule flame() {\n    union() {\n        // Solid base\n        flame_base();\n        \n        // Central core\n        translate([0, 0, wall_thickness*2])\n            flame_lobe(flame_height*0.8, base_radius*0.7, 0);\n        \n        // Front lobe\n        translate([0, 2, wall_thickness*2])\n            flame_lobe(flame_height*0.7, base_radius*0.5, 10);\n        \n        // Back lobe\n        translate([0, -3, wall_thickness*2])\n            flame_lobe(flame_height*0.75, base_radius*0.45, -15);\n        \n        // Left lobe\n        translate([-3, 0, wall_thickness*2])\n            flame_lobe(flame_height*0.6, base_radius*0.4, -20);\n        \n        // Right lobe\n        translate([3, 0, wall_thickness*2])\n            flame_lobe(flame_height*0.65, base_radius*0.42, 25);\n        \n        // Top curl\n        translate([0, 0, flame_height*0.8])\n            rotate([0, -20, 0])\n            scale([1.2, 1, 0.8])\n                sphere(r=base_radius*0.4, $fn=32);\n    }\n}\n\n// Generate the flame\nflame();",
    "renders": true
  },
  {
    "fruit": "rio",
    "openscad_code": "// Rio - Realistic style, medium complexity\n// Overall dimensions: 80mm length at 1:1 scale\n\n$fn = 32;\n\nmodule body() {\n    // Main torso\n    difference() {\n        scale([1.5, 0.8, 1])\n            sphere(d = 20);\n        \n        // Remove bottom for flat base\n        translate([0, 0, -10])\n            cube([50, 50, 10], center = true);\n    }\n}\n\nmodule head() {\n    // Head sphere\n    translate([0, 0, 12])\n        sphere(d = 15);\n    \n    // Beak cone\n    translate([7.5, 0, 12])\n        rotate([0, -20, 0])\n            cylinder(h = 12, d1 = 2, d2 = 0);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([4, side * 3, 14])\n            sphere(d = 2);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-5, 0, 5])\n        rotate([0, 30, 0])\n            scale([0.3, 1.2, 1])\n                sphere(d = 15);\n    \n    // Right wing\n    translate([5, 0, 5])\n        rotate([0, -30, 180])\n            scale([0.3, 1.2, 1])\n                sphere(d = 15);\n}\n\nmodule tail() {\n    // Tail feathers\n    for(i = [0:2]) {\n        rotate([0, 0, i * 15 - 15])\n            translate([-12, 0, 0])\n                scale([1.5, 0.2, 0.5])\n                    sphere(d = 10);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-2, -2, -8])\n        cylinder(h = 8, d = 2);\n    \n    // Left foot\n    translate([-2, -4, -16])\n        cube([4, 6, 1], center = true);\n    \n    // Right leg\n    translate([2, -2, -8])\n        cylinder(h = 8, d = 2);\n    \n    // Right foot\n    translate([2, -4, -16])\n        cube([4, 6, 1], center = true);\n}\n\nmodule feather_detail() {\n    // Chest feathers - subtle ridges\n    for(i = [1:3]) {\n        translate([0, 0, 5 - i * 2])\n            scale([0.8, 0.9, 0.1])\n                sphere(d = 10);\n    }\n    \n    // Wing feather lines\n    for(i = [0:4]) {\n        // Left wing detail\n        translate([-8 - i * 2, 0, 5])\n            rotate([0, 30, 0])\n                scale([0.2, 0.1, 0.5])\n                    sphere(d = 15 - i * 2);\n        \n        // Right wing detail\n        translate([8 + i * 2, 0, 5])\n            rotate([0, -30, 180])\n                scale([0.2, 0.1, 0.5])\n                    sphere(d = 15 - i * 2);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wings();\n    tail();\n    legs();\n    feather_detail();\n}\n\n// Scale to final size\nscale(3.2);",
    "renders": true
  },
  {
    "fruit": "oro",
    "openscad_code": "// Oro (goldfish) in realistic style, medium complexity\n// Dimensions: ~70mm long, ~40mm tall, ~25mm wide\n// Designed for FDM printing with no supports\n\n$fn = 36;\n\n// Overall body\nmodule body() {\n    // Main body - elongated sphere\n    translate([0, 0, 15])\n    scale([1.6, 1, 1])\n    sphere(d=30);\n    \n    // Tail section - tapered\n    translate([-30, 0, 10])\n    scale([1.5, 0.8, 0.6])\n    sphere(d=25);\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    translate([0, 0, 30])\n    rotate([90, 0, 0])\n    difference() {\n        // Main fin shape\n        scale([1, 0.2, 1])\n        cylinder(h=20, d1=15, d2=5);\n        \n        // Fin rays\n        for(i = [-5:2:5]) {\n            translate([i, 0, 0])\n            rotate([0, 90, 0])\n            cube([15, 0.5, 2], center=true);\n        }\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    translate([-45, 0, 10])\n    rotate([0, 0, 0])\n    union() {\n        // Left lobe\n        rotate([0, 0, 20])\n        translate([0, 10, 0])\n        scale([0.8, 1.2, 0.2])\n        sphere(d=25);\n        \n        // Right lobe\n        rotate([0, 0, -20])\n        translate([0, -10, 0])\n        scale([0.8, 1.2, 0.2])\n        sphere(d=25);\n        \n        // Center connection\n        translate([5, 0, 0])\n        scale([1.2, 0.3, 0.1])\n        sphere(d=15);\n    }\n}\n\n// Pectoral fins (side fins)\nmodule pectoral_fin(side) {\n    translate([5, side*12, 10])\n    rotate([0, 90, -side*30])\n    scale([0.5, 1, 0.2])\n    sphere(d=15);\n}\n\n// Eyes\nmodule eye(side) {\n    translate([12, side*12, 20])\n    union() {\n        // Eye ball\n        sphere(d=5);\n        \n        // Pupil\n        translate([2, 0, 0])\n        color(\"black\")\n        sphere(d=2);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    translate([18, 0, 8])\n    rotate([90, 0, 0])\n    difference() {\n        sphere(d=8);\n        translate([0, 0, -5])\n        cube(15, center=true);\n    }\n}\n\n// Scales pattern on body\nmodule scales() {\n    difference() {\n        body();\n        \n        // Create scale pattern using small spheres\n        for(x = [-20:5:15]) {\n            for(y = [-10:5:10]) {\n                for(z = [10:5:25]) {\n                    translate([x, y, z])\n                    sphere(d=2);\n                }\n            }\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main body with scales texture\n    scales();\n    \n    // Fins\n    dorsal_fin();\n    tail_fin();\n    pectoral_fin(1);  // Left fin\n    pectoral_fin(-1); // Right fin\n    \n    // Head features\n    eye(1);   // Left eye\n    eye(-1);  // Right eye\n    mouth();\n}",
    "renders": true
  },
  {
    "fruit": "thompson",
    "openscad_code": "// Thompson sub-machine gun - realistic mid-complexity model\n// Overall length ~85 mm, printable without support\n\n$fn = 50;               // Smooth curves\nbarrel_d = 5;           // Main barrel diameter\nreceiver_w = 12;        // Receiver width\nreceiver_h = 10;        // Receiver height\nreceiver_l = 30;        // Receiver length\ngrip_w = 8;             // Pistol grip width\ngrip_h = 20;            // Pistol grip height\nmag_w = 12;             // Magazine width\nmag_l = 25;             // Magazine length\nmag_d = 4;              // Magazine depth\n\nmodule thompson() {\n    // Rear sight block\n    translate([receiver_l/2 - 5, 0, receiver_h/2 + 1])\n        cube([2, 3, 2], center=true);\n\n    // Front sight post\n    translate([receiver_l/2 + 15, 0, receiver_h/2 + 2])\n        cylinder(h=2, d=2);\n\n    // Receiver body\n    difference() {\n        translate([0, 0, 0])\n            cube([receiver_l, receiver_w, receiver_h], center=true);\n        // Ejection port\n        translate([receiver_l/2 - 8, 0, receiver_h/2 - 1])\n            cube([6, receiver_w + 1, 3]);\n    }\n\n    // Barrel jacket/cooling fins\n    for(i = [0:3]) {\n        translate([receiver_l/2 + 5 + i*5, 0, 0])\n            difference() {\n                cylinder(h=3, d=barrel_d + 4);\n                cylinder(h=4, d=barrel_d);\n            }\n    }\n\n    // Barrel\n    translate([receiver_l/2 + 15, 0, 0])\n        cylinder(h=30, d=barrel_d);\n\n    // Compensator\n    translate([receiver_l/2 + 30, 0, 0])\n        cylinder(h=4, d=barrel_d + 2);\n\n    // Pistol grip\n    translate([receiver_l/2 - 15, 0, -receiver_h/2 - grip_h/2])\n        difference() {\n            cube([grip_w, grip_w, grip_h], center=true);\n            // Grip texture grooves\n            for(i = [1:3]) {\n                translate([0, grip_w/2, -grip_h/2 + i*6])\n                    cube([grip_w - 2, 0.5, 3], center=true);\n            }\n        }\n\n    // Trigger guard\n    translate([receiver_l/2 - 10, 0, -receiver_h/2 - 3])\n        difference() {\n            cube([10, grip_w + 2, 4], center=true);\n            translate([0, 0, -1])\n                cube([8, grip_w, 6], center=true);\n        }\n\n    // Trigger\n    translate([receiver_l/2 - 10, 0, -receiver_h/2 - 1])\n        cube([2, 1, 3]);\n\n    // Magazine well\n    translate([receiver_l/2 - 5, 0, -receiver_h/2 - grip_h - mag_d/2])\n        cube([mag_w, mag_w, mag_d], center=true);\n\n    // Magazine\n    translate([receiver_l/2 - 5, 0, -receiver_h/2 - grip_h - mag_d - mag_l/2])\n        difference() {\n            cube([mag_w - 1, mag_w - 1, mag_l], center=true);\n            // Cartridge windows\n            for(i = [1:4]) {\n                translate([0, mag_w/2 - 0.5, -mag_l/2 + i*5])\n                    cube([mag_w - 2, 0.5, 2], center=true);\n            }\n        }\n\n    // Stock\n    difference() {\n        translate([-receiver_l/2 - 15, 0, 0])\n            rotate([0, 10, 0])\n            cube([30, receiver_w - 2, receiver_h - 2], center=true);\n        // Stock hollow\n        translate([-receiver_l/2 - 15, 0, 0])\n            rotate([0, 10, 0])\n            cube([28, receiver_w - 4, receiver_h - 4], center=true);\n    }\n\n    // Charging handle\n    translate([receiver_l/2 - 5, receiver_w/2 + 1, 0])\n        cube([5, 2, 2], center=true);\n}\n\nthompson();",
    "renders": true
  },
  {
    "fruit": "duncan",
    "openscad_code": "// Realistic Duncan yo-yo\n// Medium complexity, 3D printable\n\n// Parameters\ndiameter = 55;           // Overall diameter\nwidth = 34;              // Overall width\naxle_dia = 4;            // Axle hole diameter\nbearing_seat = 6;        // Bearing seat diameter\nwall = 2;                // Wall thickness\nedge_radius = 3;         // Rounded edge radius\nstep_height = 3;         // Step detail height\ngrip_depth = 0.8;        // Grip ring depth\ngrip_width = 1.5;        // Grip ring width\nnum_grips = 8;           // Number of grip rings\n\n// Main yo-yo half\nmodule duncan_half() {\n    difference() {\n        // Main body\n        union() {\n            // Outer cylinder\n            cylinder(h=width/2, r=diameter/2, center=true);\n            \n            // Rounded edges\n            translate([0, 0, width/4])\n                cylinder(h=edge_radius, r1=diameter/2-edge_radius, r2=diameter/2, center=true);\n            translate([0, 0, -width/4])\n                cylinder(h=edge_radius, r1=diameter/2, r2=diameter/2-edge_radius, center=true);\n            \n            // Center step\n            translate([0, 0, 0])\n                cylinder(h=step_height, r1=diameter/4, r2=diameter/3, center=true);\n        }\n        \n        // Axle hole\n        cylinder(h=width, r=axle_dia/2, center=true);\n        \n        // Bearing seat\n        cylinder(h=step_height, r=bearing_seat/2, center=true);\n        \n        // Grip rings\n        for (i = [1:num_grips]) {\n            translate([0, 0, -width/4 + i*(width/2/num_grips)])\n                cylinder(h=grip_width, r1=diameter/2-grip_depth, r2=diameter/2-grip_depth, center=true);\n        }\n    }\n}\n\n// Create complete yo-yo with two halves\ntranslate([0, 0, width/4])\n    duncan_half();\n\nmirror([0, 0, 1])\n    translate([0, 0, width/4])\n        duncan_half();",
    "renders": true
  },
  {
    "fruit": "chinotto",
    "openscad_code": "// Chinotto (Citrus myrtifolia) - Realistic style, medium complexity (~90 lines)\n// All dimensions in mm, model ~80 mm tall\n\n// Main body parameters\nbody_r = 22;\nbody_h = 40;\nsegments = 64;\n\n// Calyx parameters\ncalyx_r = 4.2;\ncalyx_depth = 2.5;\ncalyx_petals = 5;\n\n// Stem parameters\nstem_r = 2.8;\nstem_h = 15;\n\n// Surface detail\ndimple_r = 3.5;\ndimple_depth = 1.2;\ndimple_rows = 4;\n\nmodule chinotto_body() {\n    // Main spheroid body\n    scale([1, 1, 1.2])\n    sphere(r=body_r, $fn=segments);\n    \n    // Flatten bottom slightly for printing\n    translate([0, 0, -body_r*1.2])\n    cylinder(r=body_r*0.9, h=3, $fn=segments);\n    \n    // Surface dimples for texture\n    for (row = [0 : dimple_rows-1]) {\n        angle = 45 + row * 20;\n        count = 6 + row * 2;\n        for (i = [0 : count-1]) {\n            rotate([0, 0, i * 360/count])\n            rotate([angle, 0, 0])\n            translate([0, 0, body_r - dimple_depth/2])\n            sphere(r=dimple_r, $fn=16);\n        }\n    }\n}\n\nmodule calyx() {\n    // Base of calyx\n    translate([0, 0, body_r*1.2 - 1])\n    cylinder(r1=calyx_r, r2=calyx_r*0.7, h=calyx_depth, $fn=segments);\n    \n    // Petals around calyx\n    for (i = [0 : calyx_petals-1]) {\n        rotate([0, 0, i * 360/calyx_petals])\n        translate([calyx_r*0.6, 0, body_r*1.2 + calyx_depth/2])\n        rotate([90, 0, 0])\n        cylinder(r1=1.2, r2=0.4, h=3, $fn=8);\n    }\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, body_r*1.2 + calyx_depth + stem_h/2])\n    cylinder(r=stem_r, h=stem_h, $fn=16);\n    \n    // Stem tip\n    translate([0, 0, body_r*1.2 + calyx_depth + stem_h])\n    sphere(r=stem_r*0.8, $fn=16);\n    \n    // Small leaf\n    translate([stem_r*1.5, 0, body_r*1.2 + calyx_depth + stem_h*0.7])\n    rotate([0, -30, 0])\n    scale([1, 0.4, 1])\n    sphere(r=4, $fn=8);\n}\n\n// Construct the chinotto\nunion() {\n    difference() {\n        chinotto_body();\n        // Remove dimples to create indentations\n        for (row = [0 : dimple_rows-1]) {\n            angle = 45 + row * 20;\n            count = 6 + row * 2;\n            for (i = [0 : count-1]) {\n                rotate([0, 0, i * 360/count])\n                rotate([angle, 0, 0])\n                translate([0, 0, body_r - dimple_depth])\n                sphere(r=dimple_r*1.2, $fn=16);\n            }\n        }\n    }\n    calyx();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "myrtle",
    "openscad_code": "// Myrtle plant with realistic medium complexity\n// Overall height ~80mm, suitable for 3D printing\n\n// Basic parameters\nstem_d = 3;\nstem_h = 40;\nleaf_l = 12;\nleaf_w = 6;\nleaf_t = 0.8;\nflower_d = 8;\npetal_l = 4;\nberry_d = 5;\n\n// Stem\nmodule stem() {\n    cylinder(d=stem_d, h=stem_h, $fn=8);\n}\n\n// Single myrtle leaf - lanceolate shape\nmodule leaf() {\n    difference() {\n        // Main leaf blade\n        scale([1, leaf_w/leaf_l, leaf_t/leaf_l])\n            sphere(d=leaf_l, $fn=16);\n        \n        // Cut to make pointed tip\n        translate([leaf_l/2, 0, 0])\n            cube([leaf_l, leaf_w*2, leaf_t*2], center=true);\n        \n        // Cut to make base\n        translate([-leaf_l/2, 0, 0])\n            cube([leaf_l, leaf_w*2, leaf_t*2], center=true);\n    }\n}\n\n// Leaf pair at a node\nmodule leaf_pair(angle) {\n    rotate([0, 0, angle])\n    translate([0, stem_d/2, 0])\n    union() {\n        // Left leaf\n        rotate([0, 30, -25])\n            leaf();\n        \n        // Right leaf\n        mirror([0, 1, 0])\n            rotate([0, 30, -25])\n                leaf();\n    }\n}\n\n// Single flower with 5 petals\nmodule flower() {\n    translate([0, 0, flower_d/2])\n    union() {\n        // Center\n        sphere(d=flower_d/3, $fn=16);\n        \n        // 5 petals around center\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n            translate([0, flower_d/3, 0])\n            rotate([90, 0, 0])\n            scale([0.6, 1, 0.6])\n                cylinder(d1=flower_d/2, d2=0, h=petal_l, $fn=16);\n        }\n    }\n}\n\n// Berry cluster\nmodule berries() {\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, berry_d, 0])\n            sphere(d=berry_d, $fn=16);\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Main stem\n    stem();\n    \n    // Leaves along stem\n    for(i=[1:5]) {\n        translate([0, 0, i*stem_h/6])\n        leaf_pair(i*45);\n    }\n    \n    // Flowers at top\n    translate([0, 0, stem_h])\n    union() {\n        flower();\n        \n        // Additional flowers around top\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n            translate([stem_d*1.5, 0, 0])\n                flower();\n        }\n    }\n    \n    // Berries below flowers\n    translate([0, 0, stem_h - 5])\n    berries();\n}",
    "renders": true
  },
  {
    "fruit": "papeda",
    "openscad_code": "// Papeda (Citrus hystrix) fruit model\n// Realistic style, medium complexity\n// Total height ~70mm, width ~60mm\n\n// Main fruit body\nmodule fruit_body() {\n    // Main body - slightly flattened sphere\n    scale([1.1, 1, 0.9])\n    sphere(d=55, $fn=64);\n}\n\n// Wrinkled surface texture\nmodule surface_texture() {\n    difference() {\n        fruit_body();\n        \n        // Create wrinkles across surface\n        for(i=[0:45]) {\n            rotate([0, i*4, i*15])\n            translate([0, 0, -30])\n            scale([0.02, 0.3, 1])\n            sphere(d=60, $fn=6);\n        }\n        \n        // Additional wrinkle details\n        for(i=[0:30]) {\n            rotate([i*12, i*8, 0])\n            translate([0, 0, -25])\n            scale([0.3, 0.02, 1])\n            sphere(d=60, $fn=6);\n        }\n    }\n}\n\n// Crown/top of fruit\nmodule fruit_crown() {\n    translate([0, 0, 27])\n    difference() {\n        cylinder(h=8, d1=22, d2=18, $fn=32);\n        cylinder(h=10, d1=16, d2=12, $fn=32);\n    }\n}\n\n// Stem attachment\nmodule stem_attachment() {\n    translate([0, 0, 35])\n    cylinder(h=6, d1=4, d2=2, $fn=16);\n}\n\n// Bottom dimple\nmodule bottom_dimple() {\n    translate([0, 0, -27])\n    difference() {\n        sphere(d=8, $fn=32);\n        translate([0, 0, 4])\n        cube([20, 20, 10], center=true);\n    }\n}\n\n// Oil glands on surface\nmodule oil_glands() {\n    for(i=[0:60]) {\n        rotate([rand_vec(i)[0]*180, rand_vec(i)[1]*180, rand_vec(i)[2]*360])\n        translate([rand_vec(i)[0]*27, rand_vec(i)[1]*27, rand_vec(i)[2]*27])\n        scale([1, 1, 0.3])\n        sphere(d=1.5, $fn=8);\n    }\n}\n\n// Helper function for random vectors\nfunction rand_vec(seed) = [\n    0.5 + 0.5 * sin(seed * 123.456),\n    0.5 + 0.5 * cos(seed * 456.789),\n    0.5 + 0.5 * sin(seed * 789.123)\n];\n\n// Main assembly\nunion() {\n    // Core fruit structure\n    surface_texture();\n    \n    // Crown and stem\n    fruit_crown();\n    stem_attachment();\n    \n    // Bottom features\n    bottom_dimple();\n    \n    // Surface details\n    oil_glands();\n}\n\n// Ensure 3D printability - no overhangs greater than 45 degrees\n$fa = 2;\n$fs = 0.5;",
    "renders": true
  },
  {
    "fruit": "trifoliata",
    "openscad_code": "// Trifoliata (Citrus trifoliata) - realistic medium complexity\n// Overall size ~70mm tall\n\n// Leaf parameters\nleaf_length = 30;\nleaf_width = 20;\nleaf_thickness = 1.2;\nstem_diameter = 3;\nstem_length = 40;\npetiole_length = 8;\n\n// Thorns\nthorn_length = 5;\nthorn_diameter = 1.5;\n\n// Fruit\nfruit_diameter = 12;\nfruit_segments = 10;\n\n// Helper module for leaf blade with realistic shape\nmodule leaf_blade() {\n    difference() {\n        // Main leaf body with elliptical shape\n        scale([1, 0.7, 1])\n        resize([leaf_length, leaf_width, leaf_thickness])\n        sphere(d=leaf_width, $fn=50);\n        \n        // Tri-lobe cuts\n        translate([leaf_length/3, 0, -leaf_thickness/2])\n        cube([leaf_length/2, leaf_width/2, leaf_thickness*2], center=true);\n        \n        mirror([1, 0, 0])\n        translate([leaf_length/3, 0, -leaf_thickness/2])\n        cube([leaf_length/2, leaf_width/2, leaf_thickness*2], center=true);\n        \n        // Central lobe cut\n        translate([-leaf_length/4, 0, -leaf_thickness/2])\n        cube([leaf_length/2, leaf_width/1.5, leaf_thickness*2], center=true);\n    }\n    \n    // Vein details\n    color(\"darkgreen\")\n    for(i = [-1:1]) {\n        rotate([0, 0, i*45])\n        translate([leaf_length/4, 0, leaf_thickness/2])\n        scale([0.8, 0.1, 0.3])\n        sphere(d=leaf_width/3, $fn=8);\n    }\n}\n\n// Thorn module\nmodule thorn() {\n    color(\"brown\")\n    rotate([0, -90, 0])\n    cylinder(h=thorn_length, d1=thorn_diameter, d2=0, $fn=6);\n}\n\n// Compound leaf with 3 leaflets\nmodule compound_leaf() {\n    union() {\n        // Central stem\n        color(\"brown\")\n        rotate([90, 0, 0])\n        cylinder(h=stem_length, d=stem_diameter, $fn=8);\n        \n        // Terminal leaflet\n        translate([0, 0, stem_length - petiole_length])\n        rotate([0, 15, 0])\n        leaf_blade();\n        \n        // Lateral leaflets\n        for(side = [-1, 1]) {\n            translate([side*stem_diameter, 0, stem_length*0.6])\n            rotate([0, side*15, side*25])\n            translate([side*leaf_length/3, 0, 0])\n            leaf_blade();\n            \n            // Thorns at leaflet bases\n            translate([side*stem_diameter*2, 0, stem_length*0.65])\n            thorn();\n        }\n        \n        // Additional thorns\n        translate([0, 0, stem_length*0.3])\n        rotate([0, 0, 120])\n        thorn();\n    }\n}\n\n// Realistic trifoliata fruit\nmodule trifoliata_fruit() {\n    color(\"goldenrod\")\n    union() {\n        // Main body with segments\n        difference() {\n            sphere(d=fruit_diameter, $fn=fruit_segments*2);\n            \n            // Segment grooves\n            for(i = [0:fruit_segments-1]) {\n                rotate([0, 0, i*(360/fruit_segments)])\n                translate([0, -fruit_diameter/2, -fruit_diameter/2])\n                cube([2, fruit_diameter, fruit_diameter], center=true);\n            }\n        }\n        \n        // Stem attachment\n        translate([0, 0, fruit_diameter/2])\n        rotate([0, 0, 180])\n        cylinder(h=2, d1=3, d2=2, $fn=8);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0])\ncompound_leaf();\n\ntranslate([leaf_length, 0, stem_length/2])\ntrifoliata_fruit();",
    "renders": true
  },
  {
    "fruit": "citrange",
    "openscad_code": "// Citrange (Citrange orange) - medium complexity realistic style\n// Roughly 70mm long\n\n// Parameters\nfruit_length = 65;\nfruit_diameter = 45;\nstem_length = 8;\nstem_diameter = 4;\nnavel_depth = 5;\ntexture_depth = 0.5;\nsegment_count = 10;\nwall_thickness = 2;\n\n// Main fruit body\nmodule citrange_body() {\n    difference() {\n        // Basic orange shape - slightly elongated sphere\n        scale([1, 1, 1.15]) \n        sphere(d = fruit_diameter, $fn = 48);\n        \n        // Navel indentation at bottom\n        translate([0, 0, -(fruit_diameter/2 + navel_depth - 1)])\n        sphere(d = navel_depth * 2.5, $fn = 24);\n        \n        // Hollow out the center for 3D printing\n        scale([0.8, 0.8, 0.8])\n        sphere(d = fruit_diameter - wall_thickness*2, $fn = 48);\n    }\n}\n\n// Surface texture - small dimples\nmodule surface_texture() {\n    difference() {\n        citrange_body();\n        \n        // Create dimples using small spheres\n        for (i = [0:segment_count-1]) {\n            rotate([0, 0, i * 360/segment_count])\n            for (j = [-1:1]) {\n                rotate([0, 20 * j, 0])\n                translate([0, 0, -fruit_diameter/2 + 5 + abs(j)*5])\n                sphere(d = texture_depth * 4, $fn = 8);\n            }\n        }\n    }\n}\n\n// Stem with leaf scars\nmodule stem() {\n    // Main stem\n    translate([0, 0, fruit_diameter/2 * 1.15])\n    cylinder(h = stem_length, d1 = stem_diameter, d2 = stem_diameter * 0.8, $fn = 12);\n    \n    // Leaf scar rings\n    for (i = [1:3]) {\n        translate([0, 0, fruit_diameter/2 * 1.15 + i * 1.5])\n        cylinder(h = 0.3, d1 = stem_diameter * 1.3, d2 = stem_diameter * 1.3, $fn = 16);\n    }\n}\n\n// Optional small leaf\nmodule small_leaf() {\n    translate([0, stem_diameter/2 + 3, fruit_diameter/2 * 1.15 + stem_length - 3])\n    rotate([0, -90, 0])\n    scale([1, 0.3, 1])\n    cylinder(h = 12, d1 = 0, d2 = 6, $fn = 3);\n}\n\n// Combine all parts\nunion() {\n    surface_texture();\n    stem();\n    small_leaf();\n}",
    "renders": true
  },
  {
    "fruit": "citrumelo",
    "openscad_code": "// Citrumelo (grapefruit x trifoliate orange hybrid)\n// Realistic style, medium complexity\n// Overall dimensions ~75mm diameter\n\n$fn = 48;\n\n// Main fruit body\nmodule fruit_body() {\n    difference() {\n        // Main spherical body with slight flattening\n        scale([1.0, 1.0, 0.9])\n        sphere(d = 70);\n        \n        // Calyx cavity at top\n        translate([0, 0, 30])\n        rotate([0, 180, 0])\n        cylinder(h = 15, d1 = 12, d2 = 8);\n        \n        // Small indentations for realistic surface\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([25, 0, 15])\n            sphere(d = 5);\n        }\n    }\n}\n\n// Calyx (flower remnant at top)\nmodule calyx() {\n    union() {\n        // Central raised portion\n        translate([0, 0, 33])\n        cylinder(h = 3, d = 8);\n        \n        // Sepal remnants radiating outward\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([6, 0, 33])\n            rotate([-30, 0, 0])\n            scale([1, 0.5, 0.3])\n            cylinder(h = 8, d1 = 4, d2 = 2);\n        }\n    }\n}\n\n// Pedicel (stem attachment)\nmodule pedicel() {\n    translate([0, 0, 35])\n    rotate([0, 180, 0])\n    cylinder(h = 8, d1 = 6, d2 = 4, center = true);\n}\n\n// Surface pores (oil glands)\nmodule oil_glands() {\n    // Randomly placed small depressions\n    for(i = [0:20]) {\n        a = i * 137.5;  // Golden angle for distribution\n        h = 35 * sin(i * 15);\n        translate([\n            35 * cos(a),\n            35 * sin(a),\n            h\n        ])\n        sphere(d = 1.5);\n    }\n}\n\n// Main fruit assembly\nunion() {\n    // Base fruit\n    fruit_body();\n    \n    // Top structures\n    calyx();\n    pedicel();\n    \n    // Surface texture (subtracted)\n    difference() {\n        children();\n        oil_glands();\n    }\n    \n    // Slight blemishes for realism\n    difference() {\n        union() {\n            // Subtle color variation spots\n            translate([20, 15, 10])\n            sphere(d = 8);\n            \n            translate([-15, -10, 5])\n            sphere(d = 6);\n            \n            translate([0, -25, 0])\n            sphere(d = 7);\n        }\n    }\n}\n\n// Base flattening for 3D printing stability\ntranslate([0, 0, -35])\ncylinder(h = 2, d = 30);",
    "renders": true
  },
  {
    "fruit": "citrangequat",
    "openscad_code": "// Citrangequat - Medium complexity realistic model\n// A citrangequat is a hybrid of citrange and kumquat, oval with slight taper\n\n$fn=50;\n\nmodule citrangequat_body() {\n    // Main body - oval shape with slight taper\n    difference() {\n        // Main ellipsoid body\n        scale([1, 0.8, 1.2])\n            sphere(d=40);\n        \n        // Flattened bottom for printing stability\n        translate([0, 0, -21])\n            cube([60, 60, 10], center=true);\n    }\n}\n\nmodule stem_end() {\n    // Stem attachment point\n    translate([0, 0, 22])\n    union() {\n        // Main stem base\n        cylinder(h=4, d1=6, d2=4);\n        \n        // Stem details\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([2, 0, 3])\n                    cylinder(h=2, d=1);\n        }\n    }\n}\n\nmodule blossom_end() {\n    // Bottom blossom end with slight nipple\n    translate([0, 0, -20])\n    union() {\n        cylinder(h=3, d1=2, d2=4);\n        \n        // Small petals around blossom\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([2.5, 0, 0])\n                    scale([0.3, 0.1, 0.3])\n                        sphere(d=2);\n        }\n    }\n}\n\nmodule surface_texture() {\n    // Slight surface bumps for realistic texture\n    difference() {\n        union() {\n            // Base body\n            citrangequat_body();\n            \n            // Add slight bumps across surface\n            for(lat=[-30:15:30]) {\n                for(lon=[0:30:330]) {\n                    rotate([lat, 0, lon])\n                        translate([0, 0, 19])\n                            sphere(d=0.8);\n                }\n            }\n        }\n        \n        // Remove bumps from bottom\n        translate([0, 0, -21])\n            cube([60, 60, 10], center=true);\n    }\n}\n\nmodule citrus_oil_glands() {\n    // Tiny oil glands visible on surface\n    color(\"darkorange\")\n    for(lat=[-20:20:20]) {\n        for(lon=[0:45:315]) {\n            rotate([lat, 0, lon])\n                translate([0, 19, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=0.3, d=0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body with texture\n    color(\"orange\")\n    surface_texture();\n    \n    // Stem end\n    color(\"green\")\n    stem_end();\n    \n    // Blossom end\n    color(\"darkorange\")\n    blossom_end();\n    \n    // Surface details\n    citrus_oil_glands();\n}",
    "renders": true
  },
  {
    "fruit": "calamondin",
    "openscad_code": "// Calamondin (Citrus × microcarpa) – realistic, 3D-printable\n// Overall height ≈ 65 mm (stem to bottom)\n\n// ---- Parameters ----\nfruit_d = 32;            // diameter of main fruit body\nstem_h = 8;              // stem height\nstem_d = 3.5;            // stem diameter\ncalyx_h = 2.5;           // calyx disk thickness\ncalyx_petals = 6;        // number of calyx lobes\ndimple_d = 4;            // top dimple diameter\ndimple_h = 1.2;          // dimple depth\noil_glands = 18;         // number of oil-gland dots\nskin_th = 1.6;           // wall thickness for printing\nsegments = 48;           // sphere resolution\n\n// ---- Main fruit body (thin-walled hollow sphere) ----\ndifference() {\n    sphere(d = fruit_d, $fn = segments);\n    translate([0, 0, -skin_th])\n        sphere(d = fruit_d - 2*skin_th, $fn = segments);\n}\n\n// ---- Top dimple (blossom end) ----\ntranslate([0, 0, fruit_d/2 - dimple_h])\n    cylinder(h = dimple_h + 1, d1 = dimple_d, d2 = 0, $fn = 16);\n\n// ---- Calyx disk under stem ----\ntranslate([0, 0, fruit_d/2 + calyx_h/2])\n    cylinder(h = calyx_h, d = fruit_d * 0.48, $fn = calyx_petals*2);\n\n// ---- Stem ----\ntranslate([0, 0, fruit_d/2 + calyx_h + stem_h/2])\n    cylinder(h = stem_h, d = stem_d, $fn = 12);\n\n// ---- Calyx lobes (petal-like) ----\nmodule calyx_lobe() {\n    difference() {\n        translate([0, -fruit_d*0.20, 0])\n            cube([fruit_d*0.08, fruit_d*0.20, calyx_h*1.5], center = true);\n        translate([0, -fruit_d*0.25, 0])\n            rotate([0, 45, 0])\n                cube([fruit_d*0.12, fruit_d*0.30, calyx_h*2], center = true);\n    }\n}\n\nfor (i = [0 : calyx_petals-1]) {\n    rotate([0, 0, i*360/calyx_petals])\n        translate([0, 0, fruit_d/2 + calyx_h])\n            calyx_lobe();\n}\n\n// ---- Surface oil-gland dots (slight bumps) ----\nmodule gland() {\n    sphere(d = 1.2, $fn = 8);\n}\n\nr = fruit_d/2 + 0.2;  // slightly above surface\nfor (j = [0 : oil_glands-1]) {\n    theta = 90 * (j / (oil_glands/2.0));\n    phi   = 137.5 * j;  // golden angle for even distribution\n    x = r * sin(theta) * cos(phi);\n    y = r * sin(theta) * sin(phi);\n    z = r * cos(theta);\n    translate([x, y, z])\n        gland();\n}\n\n// ---- Bottom navel (stem end) ----\ntranslate([0, 0, -fruit_d/2])\n    cylinder(h = 1.5, d1 = 5, d2 = 2.5, $fn = 20);",
    "renders": true
  },
  {
    "fruit": "limequat",
    "openscad_code": "// Limequat - Realistic Style, Medium Complexity\n// Approximately 60mm tall, 3D printable\n\n$fn=36;\n\n// Main fruit body\nmodule limequat_body() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 1.2, 0.9])\n        sphere(20);\n        \n        // Small indentations for texture\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([15, 0, -10])\n            rotate([90, 0, 0])\n            scale([1, 1, 0.3])\n            cylinder(h=5, r1=3, r2=0);\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 18])\n    difference() {\n        cylinder(h=5, r=4);\n        cylinder(h=6, r=2.5);\n    }\n}\n\n// Small leaf\nmodule leaf() {\n    translate([0, 4, 20])\n    rotate([110, 0, 0])\n    scale([0.8, 1, 0.1])\n    difference() {\n        sphere(8);\n        translate([0, 8, 0])\n        sphere(7);\n    }\n}\n\n// Seed segments inside (for realism)\nmodule internal_structure() {\n    // Hollow out center\n    translate([0, 0, 0])\n    scale([0.9, 0.9, 0.85])\n    sphere(18);\n    \n    // Seed chambers\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([8, 0, -5])\n        scale([1.2, 0.8, 1])\n        sphere(3);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_bumps() {\n    for(i = [0:15]) {\n        rotate([0, 0, i*24])\n        for(j = [-1:1]) {\n            translate([16, j*8, -5])\n            sphere(0.8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    difference() {\n        union() {\n            limequat_body();\n            stem_base();\n            leaf();\n            surface_bumps();\n        }\n        internal_structure();\n    }\n    \n    // Stem\n    translate([0, 0, 23])\n    rotate([5, 0, 0])\n    cylinder(h=15, r=1.5);\n}\n\n// Small calyx leaves\nfor(i = [0:4]) {\n    rotate([0, 0, i*72])\n    translate([3, 0, 18])\n    rotate([120, 0, 45])\n    scale([0.5, 0.2, 0.05])\n    sphere(5);\n}",
    "renders": true
  },
  {
    "fruit": "orangequat",
    "openscad_code": "// Orangequat - hybrid citrus fruit (orange + kumquat)\n// Medium complexity realistic model\n\n// Parameters\nfruit_diameter = 45;\nstem_length = 8;\nstem_diameter = 5;\ntexture_segments = 18;\npeel_thickness = 2.5;\nsegment_count = 10;\n\n// Main fruit body with realistic shape\nmodule orangequat_body() {\n    difference() {\n        // Main fruit - slightly elongated sphere\n        scale([1, 1.1, 0.9])\n        sphere(d = fruit_diameter, $fn = 60);\n        \n        // Top indent for stem\n        translate([0, 0, fruit_diameter/2 - 2])\n        cylinder(h = 5, d1 = stem_diameter + 4, d2 = stem_diameter, $fn = 20);\n        \n        // Bottom indent\n        translate([0, 0, -fruit_diameter/2])\n        cylinder(h = 3, d1 = 3, d2 = 5, $fn = 20);\n    }\n}\n\n// Realistic peel texture with pores\nmodule peel_texture() {\n    difference() {\n        // Base peel layer\n        scale([1, 1.1, 0.9])\n        sphere(d = fruit_diameter + 1, $fn = 60);\n        \n        // Pock marks for realistic orange texture\n        for (i = [0:360/texture_segments:359]) {\n            rotate([0, 0, i])\n            translate([fruit_diameter/2 - 1, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 1.5, d1 = 1.2, d2 = 0.6, $fn = 8);\n        }\n        \n        // Segment lines\n        for (i = [0:360/segment_count:359]) {\n            rotate([0, 0, i])\n            translate([0, 0, -fruit_diameter/2])\n            cube([0.5, fruit_diameter, fruit_diameter], center = true);\n        }\n    }\n}\n\n// Stem with realistic details\nmodule stem() {\n    union() {\n        // Main stem\n        translate([0, 0, fruit_diameter/2])\n        cylinder(h = stem_length, d = stem_diameter, $fn = 8);\n        \n        // Stem collar\n        translate([0, 0, fruit_diameter/2])\n        cylinder(h = 2, d1 = stem_diameter + 2, d2 = stem_diameter, $fn = 8);\n        \n        // Small leaf\n        translate([stem_diameter/2, 0, fruit_diameter/2 + stem_length - 2])\n        rotate([90, 0, 0])\n        scale([0.8, 2, 0.3])\n        sphere(d = 6, $fn = 20);\n    }\n}\n\n// Calyx (bottom flower part)\nmodule calyx() {\n    difference() {\n        // Base calyx shape\n        translate([0, 0, -fruit_diameter/2 - 1])\n        cylinder(h = 2, d1 = 8, d2 = 6, $fn = 8);\n        \n        // Calyx segments\n        for (i = [0:45:315]) {\n            rotate([0, 0, i + 22.5])\n            translate([0, 2, -fruit_diameter/2])\n            cube([8, 1, 2], center = true);\n        }\n    }\n}\n\n// Assemble the complete orangequat\nunion() {\n    // Hollowed fruit body\n    difference() {\n        orangequat_body();\n        // Hollow interior\n        scale([0.85, 0.85, 0.75])\n        sphere(d = fruit_diameter - peel_thickness*2, $fn = 60);\n    }\n    \n    // Peel texture layer\n    peel_texture();\n    \n    // Stem\n    stem();\n    \n    // Calyx at bottom\n    calyx();\n}",
    "renders": true
  },
  {
    "fruit": "salmonberry",
    "openscad_code": "// Salmonberry - medium complexity realistic style\n// Approx 60mm long, designed for 3D printing\n\n$fn = 32;  // Smooth curves for printability\n\n// Main module\nmodule salmonberry() {\n    // Stem\n    translate([0, 0, 20]) rotate([90, 0, 0]) \n        cylinder(h=15, d1=4, d2=2);\n    \n    // Berry cluster base\n    union() {\n        // Central berry\n        translate([0, 0, 15])\n            berry(12);\n        \n        // Side berries in spiral pattern\n        for(i = [1:5]) {\n            angle = i * 72;\n            radius = 8 + i * 0.5;\n            z = 15 - i * 1.5;\n            \n            translate([radius * cos(angle), radius * sin(angle), z])\n                rotate([0, 0, angle])\n                berry(10 - i * 0.8);\n        }\n    }\n    \n    // Leaves\n    translate([-8, -5, 18]) rotate([0, -20, -30])\n        leaf(15, 8);\n    translate([6, -7, 17]) rotate([0, -15, 45])\n        leaf(12, 7);\n    translate([-3, 8, 16]) rotate([0, -30, 180])\n        leaf(13, 7.5);\n}\n\n// Individual berry module\nmodule berry(size) {\n    // Main berry body\n    difference() {\n        sphere(d=size);\n        \n        // Top indent\n        translate([0, 0, size/2 - 0.5])\n            sphere(d=size * 0.6);\n        \n        // Bottom indent\n        translate([0, 0, -size/2 + 1])\n            sphere(d=size * 0.4);\n    }\n    \n    // Berry segments (druplets)\n    for(seg = [0:11]) {\n        rotate([0, 0, seg * 30])\n        translate([size/2 * 0.7, 0, 0])\n        scale([0.3, 0.3, 0.9])\n            sphere(d=size * 0.4);\n    }\n    \n    // Calyx remnants\n    translate([0, 0, size/2])\n    rotate([0, 0, 45])\n    for(petal = [0:4]) {\n        rotate([0, 0, petal * 72])\n        translate([size * 0.2, 0, 0])\n        scale([1, 0.5, 0.3])\n            cylinder(h=size * 0.15, d=size * 0.15);\n    }\n}\n\n// Leaf module with serrated edges\nmodule leaf(length, width) {\n    difference() {\n        // Main leaf shape\n        scale([1, 0.6, 1])\n        rotate([90, 0, 0])\n        cylinder(h=length, d1=width, d2=width * 0.7);\n        \n        // Leaf tip\n        translate([0, length/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=length * 0.3, d1=width * 0.7, d2=0);\n        \n        // Vein indent\n        translate([0, -length/2, 0])\n        rotate([90, 0, 0])\n        cube([width * 0.1, length, width * 0.05], center=true);\n    }\n    \n    // Serrations\n    for(s = [0:6]) {\n        y = -length/2 + s * length/6;\n        \n        // Left serrations\n        translate([-width/2, y, 0])\n        rotate([0, 0, 30])\n        cube([width * 0.15, width * 0.1, width * 0.05]);\n        \n        // Right serrations\n        translate([width/2, y, 0])\n        rotate([0, 0, -30])\n        cube([width * 0.15, width * 0.1, width * 0.05]);\n    }\n    \n    // Side veins\n    for(v = [1:3]) {\n        y = -length/3 + v * length/3;\n        x = width/4;\n        \n        translate([x, y, 0])\n        rotate([0, 0, 45])\n        cube([width * 0.4, width * 0.03, width * 0.03]);\n        \n        translate([-x, y, 0])\n        rotate([0, 0, -45])\n        cube([width * 0.4, width * 0.03, width * 0.03]);\n    }\n}\n\n// Generate the model\nsalmonberry();",
    "renders": true
  },
  {
    "fruit": "thimbleberry",
    "openscad_code": "// Thimbleberry (Rubus parviflorus) - Realistic medium complexity\n// Overall height ~70 mm, 3D-printable with 1 mm wall thickness\n\n$fn = 36;\n\n// Main parameters\nberry_height = 60;\nberry_radius = 22;\ndruplet_rows = 6;\ndruplet_cols = 8;\ncalyx_height = 6;\ncalyx_radius = 24;\nstem_length = 8;\nstem_radius = 3;\n\n// Berry body (aggregate of druplets)\nmodule berry_body() {\n    difference() {\n        union() {\n            // Core sphere\n            sphere(r = berry_radius);\n            \n            // Create druplet bumps in a dome pattern\n            for (a = [0 : 360/druplet_cols : 360-360/druplet_cols])\n            for (b = [30 : 30/druplet_rows : 90-30/druplet_rows]) {\n                rotate([b, 0, a])\n                translate([0, 0, berry_radius * 0.9])\n                scale([1, 1, 0.7])\n                sphere(r = 4.5);\n            }\n        }\n        \n        // Hollow inside for printability\n        sphere(r = berry_radius - 1.5);\n        \n        // Bottom opening\n        translate([0, 0, -berry_radius])\n        cylinder(r = calyx_radius - 2, h = berry_radius * 2);\n    }\n}\n\n// Individual sepal\nmodule sepal() {\n    difference() {\n        // Main sepal shape\n        rotate([0, -10, 0])\n        scale([1, 1.8, 0.4])\n        sphere(r = 5);\n        \n        // Remove inner portion for thinness\n        scale([0.7, 0.7, 1])\n        translate([0, 0, -1])\n        sphere(r = 5);\n    }\n}\n\n// Calyx with sepals\nmodule calyx() {\n    difference() {\n        union() {\n            // Base ring\n            cylinder(h = calyx_height, r1 = calyx_radius, r2 = calyx_radius * 0.9);\n            \n            // Sepals\n            for (i = [0 : 60 : 300]) {\n                rotate([0, 0, i])\n                translate([calyx_radius * 0.7, 0, calyx_height * 0.8])\n                sepal();\n            }\n        }\n        \n        // Hollow center\n        cylinder(h = calyx_height * 2, r1 = berry_radius - 4, r2 = berry_radius - 4);\n    }\n}\n\n// Stem\nmodule stem() {\n    color(\"darkgreen\")\n    cylinder(h = stem_length, r = stem_radius, center = true);\n}\n\n// Assemble the thimbleberry\ntranslate([0, 0, berry_height/2])\nberry_body();\n\ntranslate([0, 0, 0])\ncalyx();\n\ntranslate([0, 0, -stem_length/2])\nstem();",
    "renders": true
  },
  {
    "fruit": "wineberry",
    "openscad_code": "// Wineberry cluster - medium complexity realistic style\n// Overall size: ~70mm tall, 40mm wide\n\nmodule berry(radius, height) {\n    // Main berry body - slightly elongated sphere\n    translate([0, 0, height/2])\n        scale([1, 1, 1.3])\n        sphere(r=radius, $fn=20);\n    \n    // Crown at top of berry\n    translate([0, 0, height*1.3])\n        cylinder(h=radius*0.3, r1=radius*0.6, r2=0, $fn=8);\n}\n\nmodule drupelet() {\n    // Individual small sphere for berry texture\n    sphere(r=1.2, $fn=12);\n}\n\nmodule textured_berry(radius, height) {\n    union() {\n        // Main berry shape\n        berry(radius, height);\n        \n        // Add drupelets in spiral pattern\n        for(i=[0:35]) {\n            angle = i * 137.5;  // Golden angle for natural spacing\n            row = floor(i / 7);\n            row_height = (row / 6) * height * 1.2 - height * 0.6;\n            radius_at_height = sqrt(1 - pow(row_height / (height * 0.65), 2)) * radius;\n            \n            if(row_height < height * 0.6) {\n                translate([\n                    cos(angle) * radius_at_height * 0.9,\n                    sin(angle) * radius_at_height * 0.9,\n                    row_height + height * 0.4\n                ]) {\n                    rotate([0, 0, angle])\n                    drupelet();\n                }\n            }\n        }\n    }\n}\n\nmodule berry_cluster() {\n    // Main stem\n    translate([0, 0, -5])\n        cylinder(h=30, r1=2, r2=1.5, $fn=12);\n    \n    // Berry positions - natural cluster arrangement\n    berry_positions = [\n        [0, 0, 25, 8],      // Center berry\n        [12, 0, 22, 7],     // Right\n        [-12, 0, 22, 7],    // Left\n        [6, 10, 18, 6.5],   // Front-right\n        [-6, 10, 18, 6.5],  // Front-left\n        [8, -8, 15, 6],     // Back-right\n        [-8, -8, 15, 6],    // Back-left\n        [0, -12, 12, 5.5],  // Back-center\n        [15, 5, 10, 5],     // Far-right\n        [-15, 5, 10, 5]     // Far-left\n    ];\n    \n    for(pos = berry_positions) {\n        translate([pos[0], pos[1], pos[2]])\n        rotate([0, 0, pos[0] * 2])  // Slight rotation for natural look\n        textured_berry(pos[3], pos[3] * 1.3);\n    }\n    \n    // Connecting stems\n    for(pos = berry_positions) {\n        if(pos[0] != 0 || pos[1] != 0) {\n            hull() {\n                translate([0, 0, 25])\n                    sphere(r=1.2, $fn=8);\n                translate([pos[0]*0.7, pos[1]*0.7, pos[2] + pos[3]*0.8])\n                    sphere(r=1, $fn=8);\n            }\n        }\n    }\n    \n    // Small leaves at base\n    color(\"darkgreen\")\n    for(i=[0:4]) {\n        angle = i * 72;\n        translate([\n            cos(angle) * 8,\n            sin(angle) * 8,\n            25\n        ]) {\n            rotate([0, 0, angle + 90])\n            scale([1, 1.5, 0.3])\n            sphere(r=4, $fn=6);\n        }\n    }\n}\n\n// Render the complete wineberry cluster\nberry_cluster();",
    "renders": true
  },
  {
    "fruit": "hackberry",
    "openscad_code": "// Hackberry fruit branch module\n// Realistic medium-complexity OpenSCAD model\n// Designed for 3D printing - no overhangs >45°, solid base\n\n// Overall scale factor\nscale_factor = 1.5;\n\n// Main branch\nmodule branch() {\n    color(\"saddlebrown\")\n    union() {\n        // Main stem\n        cylinder(h=50*scale_factor, r1=4*scale_factor, r2=3*scale_factor, $fn=8);\n        \n        // Secondary branches\n        for(i = [0:15:45]) {\n            rotate([0,0,i]) translate([0,0,15*scale_factor]) \n            rotate([0,15,0]) \n            cylinder(h=20*scale_factor, r1=2*scale_factor, r2=1.5*scale_factor, $fn=6);\n        }\n        \n        // Small twigs for fruit\n        for(i = [5:20:40]) {\n            rotate([0,0,i]) translate([0,0,30*scale_factor]) \n            rotate([0,25,0]) \n            cylinder(h=8*scale_factor, r1=1.2*scale_factor, r2=0.8*scale_factor, $fn=5);\n        }\n    }\n}\n\n// Hackberry fruit (drupe)\nmodule fruit(pos=[0,0,0]) {\n    translate(pos) {\n        color(\"darkorange\")\n        union() {\n            // Main fruit body - slightly elliptical\n            scale([1.1,1,1.2]) sphere(d=8*scale_factor, $fn=20);\n            \n            // Bottom ridge\n            translate([0,0,-3*scale_factor])\n            difference() {\n                cylinder(h=1*scale_factor, r=4*scale_factor, $fn=20);\n                sphere(d=7*scale_factor, $fn=20);\n            }\n            \n            // Stem attachment point\n            color(\"saddlebrown\")\n            translate([0,0,4.5*scale_factor])\n            cylinder(h=2*scale_factor, r=0.8*scale_factor, $fn=6);\n        }\n    }\n}\n\n// Leaf with hackberry characteristics (asymmetrical base, pointed tip)\nmodule leaf(pos=[0,0,0], angle=0) {\n    translate(pos) rotate([0,0,angle]) {\n        color(\"forestgreen\")\n        union() {\n            // Main leaf blade - roughly ovate with asymmetrical base\n            linear_extrude(height=0.6*scale_factor, convexity=10)\n            polygon(points=[\n                [0,0], [3*scale_factor,-6*scale_factor], [8*scale_factor,-8*scale_factor],\n                [14*scale_factor,-7*scale_factor], [18*scale_factor,-4*scale_factor],\n                [20*scale_factor,0], [19*scale_factor,5*scale_factor], [15*scale_factor,8*scale_factor],\n                [9*scale_factor,9*scale_factor], [4*scale_factor,7*scale_factor], [0,0]\n            ]);\n            \n            // Petiole (leaf stem)\n            color(\"saddlebrown\")\n            translate([0,0,0.3*scale_factor])\n            rotate([90,0,0])\n            cylinder(h=8*scale_factor, r=0.5*scale_factor, $fn=5);\n            \n            // Midrib\n            color(\"forestgreen\")\n            translate([0,0,0.65*scale_factor])\n            linear_extrude(height=0.2*scale_factor)\n            polygon(points=[\n                [0,0], [1,0.5], [19,0], [19,-0.5], [0,0]\n            ]);\n        }\n    }\n}\n\n// Complete hackberry branch\ntranslate([0,0,5*scale_factor]) {\n    branch();\n    \n    // Add fruits along twigs\n    for(i = [5:20:40]) {\n        a = i;\n        x = sin(a) * 25*scale_factor;\n        y = cos(a) * 25*scale_factor;\n        z = 30*scale_factor;\n        fruit([x,y,z]);\n    }\n    \n    // Add fruits to secondary branches\n    for(i = [0:15:45]) {\n        a = i;\n        x = sin(a+15) * 12*scale_factor;\n        y = cos(a+15) * 12*scale_factor;\n        z = 25*scale_factor;\n        fruit([x,y,z]);\n    }\n    \n    // Add leaves along main branch\n    for(i = [10:25:50]) {\n        a = i;\n        x = sin(a+90) * 8*scale_factor;\n        y = cos(a+90) * 8*scale_factor;\n        z = 20*scale_factor;\n        leaf([x,y,z], a+90);\n    }\n    \n    // Add leaves to secondary branches\n    for(i = [7:20:47]) {\n        a = i;\n        x = sin(a-45) * 15*scale_factor;\n        y = cos(a-45) * 15*scale_factor;\n        z = 20*scale_factor;\n        leaf([x,y,z], a-45);\n    }\n}\n\n// Base for stability\ntranslate([0,0,-2*scale_factor])\ncolor(\"saddlebrown\")\ncylinder(h=4*scale_factor, r=6*scale_factor, $fn=20);",
    "renders": true
  },
  {
    "fruit": "partridgeberry",
    "openscad_code": "// Partridgeberry (Mitchella repens) - medium complexity realistic model\n// Overall size ~60mm long, good for 3D printing\n\nmodule berry_pair() {\n    // Main berries (8mm diameter spheres with slight flattening)\n    union() {\n        // Left berry\n        translate([-4, 0, 0])\n            scale([1, 1, 0.9])\n            sphere(d=8, $fn=32);\n        \n        // Right berry\n        translate([4, 0, 0])\n            scale([1, 1, 0.9])\n            sphere(d=8, $fn=32);\n        \n        // Connection between berries\n        hull() {\n            translate([-4, 0, -1])\n                sphere(d=3, $fn=16);\n            translate([4, 0, -1])\n                sphere(d=3, $fn=16);\n        }\n    }\n}\n\nmodule calyx_lobes() {\n    // Four calyx lobes (pointed sepals)\n    for(i=[0:90:359]) {\n        rotate([0, 0, i])\n        translate([0, 4.5, 1])\n            rotate([30, 0, 0])\n            scale([0.6, 1, 0.3])\n            cylinder(h=3, d1=1.5, d2=0.2, $fn=8);\n    }\n}\n\nmodule stem_connection() {\n    // Small stem remnant\n    translate([0, 0, 3.5])\n        rotate([0, 15, 0])\n        cylinder(h=4, d1=1.2, d2=0.8, $fn=8);\n}\n\nmodule surface_texture() {\n    // Tiny dots for texture (slightly raised)\n    for(theta=[0:30:359]) {\n        for(phi=[30:30:150]) {\n            rotate([0, phi, theta])\n            translate([0, 0, 3.8])\n                sphere(d=0.3, $fn=6);\n        }\n    }\n}\n\nmodule single_berry_cluster() {\n    union() {\n        // Main berries\n        berry_pair();\n        \n        // Calyx at top of each berry\n        translate([-4, 0, 3.5])\n            calyx_lobes();\n        translate([4, 0, 3.5])\n            calyx_lobes();\n        \n        // Stem connection\n        stem_connection();\n        \n        // Surface texture\n        translate([-4, 0, 0])\n            surface_texture();\n        translate([4, 0, 0])\n            surface_texture();\n    }\n}\n\n// Main model - create three berry clusters in typical arrangement\ntranslate([0, -15, 0])\n    single_berry_cluster();\n\ntranslate([-12, 0, 0])\n    rotate([0, 0, 25])\n    single_berry_cluster();\n\ntranslate([12, 0, 0])\n    rotate([0, 0, -25])\n    single_berry_cluster();\n\n// Add some small leaves for context\nmodule leaf() {\n    // Simple oval leaf shape\n    linear_extrude(height=0.8, center=true)\n    scale([1, 1.5, 1])\n    circle(d=8, $fn=32);\n    \n    // Leaf veins\n    for(i=[-2:1:2]) {\n        rotate([0, 0, i*15])\n        translate([0, 2, 0.5])\n            scale([0.1, 1, 0.1])\n            cylinder(h=3, d=0.3, $fn=4);\n    }\n}\n\n// Position leaves under berries\ntranslate([0, -20, -6])\n    rotate([90, 0, 0])\n    leaf();\n\ntranslate([-15, -5, -6])\n    rotate([90, 0, 30])\n    leaf();\n\ntranslate([15, -5, -6])\n    rotate([90, 0, -30])\n    leaf();",
    "renders": true
  },
  {
    "fruit": "checkerberry",
    "openscad_code": "// Checkerberry (Wintergreen) realistic model\n// Medium complexity 3D printable version\n\nberry_d = 8;\nberry_h = 10;\nleaf_l = 25;\nleaf_w = 12;\nleaf_t = 1.5;\nstem_d = 2;\nstem_l = 30;\n\n// Main berry body\nmodule berry_body() {\n    difference() {\n        union() {\n            // Main berry sphere slightly elongated\n            scale([1, 1, 1.25])\n                sphere(d = berry_d, $fn = 32);\n            \n            // Small calyx at top\n            translate([0, 0, berry_h/2])\n                cylinder(h = 2, d1 = 3, d2 = 2, $fn = 16);\n        }\n        \n        // Subtle indentations for realism\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([berry_d/3, 0, 0])\n                    scale([0.3, 1, 0.8])\n                        sphere(d = berry_d/2, $fn = 16);\n        }\n    }\n}\n\n// Leaf with central vein\nmodule leaf() {\n    difference() {\n        // Basic leaf shape\n        scale([1, 0.4, 0.1])\n            sphere(d = leaf_l, $fn = 32);\n        \n        // Taper leaf tip\n        translate([leaf_l/2, 0, -leaf_t])\n            cube([leaf_l/2, leaf_w, leaf_t*2], center = true);\n        \n        // Leaf base indentation\n        translate([-leaf_l/2, 0, -leaf_t])\n            cylinder(h = leaf_t*2, d = leaf_w/2, $fn = 16);\n    }\n    \n    // Central vein\n    translate([0, 0, leaf_t/2 + 0.1])\n        scale([1, 0.05, 0.05])\n            sphere(d = leaf_l * 0.8, $fn = 16);\n}\n\n// Stem with gentle curve\nmodule curved_stem() {\n    union() {\n        // Main stem\n        for (i = [0:5]) {\n            translate([0, 0, i * stem_l/6])\n                rotate([i * 3, 0, 0])\n                    cylinder(h = stem_l/6 + 1, d = stem_d, $fn = 16);\n        }\n        \n        // Small connecting stem to berry\n        translate([0, 0, stem_l])\n            rotate([20, 0, 0])\n                cylinder(h = 8, d = stem_d * 0.8, $fn = 16);\n    }\n}\n\n// Position leaves around stem\nmodule leaves_cluster() {\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([stem_d * 2, 0, stem_l * 0.7])\n                rotate([0, 90, 30])\n                    leaf();\n    }\n    \n    // Additional smaller leaf\n    translate([-stem_d * 3, 0, stem_l * 0.5])\n        rotate([0, 90, -45])\n        scale(0.7)\n            leaf();\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Stem base\n    curved_stem();\n    \n    // Berry at top\n    translate([0, 0, stem_l + 8])\n        rotate([20, 0, 0])\n            berry_body();\n    \n    // Leaf cluster\n    leaves_cluster();\n}",
    "renders": true
  },
  {
    "fruit": "wintergreen",
    "openscad_code": "// Wintergreen plant (Gaultheria procumbens) - realistic style, medium complexity\n// Overall height ~70 mm, suitable for 3D printing\n\n// Parameters\nleaf_length = 20;\nleaf_width = 10;\nleaf_thick = 1.2;\nberry_d = 7;\nberry_count = 8;\nstem_d = 2.5;\nstem_h = 30;\n\n// Main plant structure\nmodule wintergreen() {\n    union() {\n        // Central stem\n        central_stem();\n        \n        // Leaves in whorls of 4-5\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, 0, i * 7 + 5])\n                    leaf_whorl();\n        }\n        \n        // Berries at top\n        berries();\n    }\n}\n\n// Central stem\nmodule central_stem() {\n    color(\"darkgreen\")\n    cylinder(d = stem_d, h = stem_h, $fn = 12);\n}\n\n// Single leaf with realistic shape\nmodule leaf() {\n    // Basic elliptical leaf shape\n    difference() {\n        scale([leaf_length/2, leaf_width/2, leaf_thick/2])\n            sphere($fn = 32);\n        \n        // Trim to ellipse shape\n        translate([leaf_length/2, 0, 0])\n            cube(leaf_length, center = true);\n        \n        // Leaf tip\n        translate([leaf_length/2 - 2, 0, 0])\n            sphere(d = 4, $fn = 16);\n    }\n    \n    // Leaf veins\n    for(i = [-2:1:2]) {\n        translate([0, i * 2, leaf_thick/2])\n            rotate([90, 0, 0])\n                cylinder(d1 = 0.3, d2 = 0.1, h = leaf_length/2 - abs(i), $fn = 8);\n    }\n}\n\n// Whorl of leaves around stem\nmodule leaf_whorl() {\n    for(angle = [0:72:359]) {\n        rotate([0, 0, angle])\n            translate([stem_d/2 + leaf_width/4, 0, 0])\n                rotate([0, -30, 0])\n                    color(\"forestgreen\")\n                        leaf();\n    }\n}\n\n// Berries at top of stem\nmodule berries() {\n    for(i = [0:berry_count-1]) {\n        rotate([0, 0, i * 360/berry_count])\n            translate([stem_d/2 + 3, 0, stem_h + berry_d/2])\n                berry();\n    }\n}\n\n// Individual berry\nmodule berry() {\n    color(\"crimson\")\n    sphere(d = berry_d, $fn = 20);\n    \n    // Berry calyx (tiny sepals)\n    for(j = [0:4]) {\n        rotate([0, 0, j * 72])\n            translate([0, berry_d/2, 0])\n                scale([0.5, 0.3, 0.2])\n                    color(\"darkgreen\")\n                        rotate([90, 0, 0])\n                            cylinder(d1 = 2, d2 = 0, h = 1.5, $fn = 6);\n    }\n}\n\n// Base to ensure printability\nmodule print_base() {\n    color(\"brown\")\n    translate([0, 0, -2])\n        cylinder(d = 15, h = 2, $fn = 32);\n}\n\n// Assemble the model\nunion() {\n    wintergreen();\n    print_base();\n}",
    "renders": true
  },
  {
    "fruit": "teaberry",
    "openscad_code": "// Teaberry (Gaultheria procumbens) - realistic style, medium complexity\n$fn = 50;  // Smooth curves for printing\n\nmodule teaberry_fruit() {\n    // Main berry body - ellipsoid shape\n    translate([0, 0, 4])\n    scale([1, 1, 1.2])\n    sphere(d = 8);\n    \n    // Calyx at top - small green structure\n    translate([0, 0, 9])\n    cylinder(h = 1.5, d1 = 3, d2 = 2, $fn = 6);\n    \n    // Stem attachment point\n    translate([0, 0, 10.5])\n    cylinder(h = 2, d = 1.5, $fn = 8);\n}\n\nmodule teaberry_leaf() {\n    // Main leaf blade - elliptical with pointed tip\n    translate([0, 0, 0])\n    scale([1, 0.6, 0.05])\n    sphere(d = 20);\n    \n    // Leaf tip extension\n    translate([0, 10, 0])\n    scale([0.3, 0.3, 0.05])\n    sphere(d = 10);\n    \n    // Leaf base (rounded)\n    translate([0, -10, 0])\n    scale([0.7, 0.5, 0.05])\n    sphere(d = 10);\n}\n\nmodule leaf_veins() {\n    // Central vein\n    translate([0, -8, 0.3])\n    scale([0.1, 16, 0.05])\n    cube([1, 1, 1], center = true);\n    \n    // Side veins (3 pairs)\n    for(i = [-1, 0, 1]) {\n        translate([i * 3, i * 4, 0.3])\n        rotate([0, 0, i * 30])\n        scale([0.05, 6, 0.05])\n        cube([1, 1, 1], center = true);\n        \n        translate([i * -3, i * 4, 0.3])\n        rotate([0, 0, i * -30])\n        scale([0.05, 6, 0.05])\n        cube([1, 1, 1], center = true);\n    }\n}\n\nmodule teaberry_plant() {\n    // Base stem\n    cylinder(h = 15, d = 2, center = true);\n    \n    // Main leaves in whorl pattern\n    for(i = [0:45:360-45]) {\n        rotate([0, 0, i])\n        translate([12, 0, 0])\n        rotate([0, 0, -45])\n        teaberry_leaf();\n        \n        // Add veins to each leaf\n        rotate([0, 0, i])\n        translate([12, 0, 0])\n        rotate([0, 0, -45])\n        leaf_veins();\n    }\n    \n    // Berries in cluster\n    for(j = [0:120:240]) {\n        rotate([0, 0, j])\n        translate([8, 0, 8])\n        rotate([0, 0, j/2])\n        teaberry_fruit();\n    }\n    \n    // Additional berries higher up\n    for(k = [60:120:180]) {\n        rotate([0, 0, k])\n        translate([6, 0, 12])\n        rotate([0, 0, -k/3])\n        teaberry_fruit();\n    }\n}\n\n// Main assembly\nteaberry_plant();",
    "renders": true
  },
  {
    "fruit": "squawberry",
    "openscad_code": "// Squawberry (Viburnum edule) - realistic medium-complexity model\n// Overall height ~80 mm, suitable for 3D printing\n\n$fn = 24;\n\n// Main berry cluster module\nmodule squawberry_cluster() {\n    union() {\n        // Central stem\n        color(\"saddlebrown\")\n        cylinder(h = 40, d1 = 2.5, d2 = 1.5, center = false);\n        \n        // Generate berries around the stem in a spiral\n        for (i = [0:7]) {\n            rotate([0, 0, i * 50])\n            translate([0, 0, i * 4.5])\n            single_berry(i);\n        }\n        \n        // Topmost berry\n        translate([0, 0, 38])\n        scale([1.1, 1.1, 1.1])\n        single_berry(8);\n    }\n}\n\n// Single berry with calyx and subtle shape\nmodule single_berry(index) {\n    berry_radius = 4.5 + sin(index * 0.8) * 0.5;\n    \n    union() {\n        // Main berry body - slightly ovoid\n        color(\"firebrick\")\n        scale([1.0, 1.0, 1.1])\n        sphere(r = berry_radius);\n        \n        // Tiny calyx remnant on top\n        translate([0, 0, berry_radius * 1.08])\n        color(\"darkgreen\")\n        cylinder(h = 0.6, r = 1.2, center = false);\n        \n        // Stylized sepals\n        for (j = [0:4]) {\n            rotate([0, 0, j * 72])\n            translate([0, berry_radius * 0.65, berry_radius * 0.9])\n            rotate([90, 0, 0])\n            scale([0.3, 1.2, 0.2])\n            cylinder(h = 2, r = 0.6);\n        }\n    }\n}\n\n// Small leaf pair at base\nmodule basal_leaves() {\n    union() {\n        // Left leaf\n        translate([-8, -5, 2])\n        rotate([0, 20, -25])\n        scale([1, 0.7, 0.1])\n        leaf_shape();\n        \n        // Right leaf\n        translate([8, -5, 2])\n        mirror([1, 0, 0])\n        rotate([0, 20, -25])\n        scale([1, 0.7, 0.1])\n        leaf_shape();\n    }\n}\n\n// Simple leaf outline (3-lobed)\nmodule leaf_shape() {\n    color(\"forestgreen\")\n    difference() {\n        union() {\n            // Central lobe\n            translate([0, 0, 0])\n            scale([1, 1.8, 1])\n            cylinder(h = 0.5, r = 5);\n            \n            // Side lobes\n            translate([-3.5, 2, 0])\n            rotate([0, 0, 30])\n            scale([0.7, 1.2, 1])\n            cylinder(h = 0.5, r = 3);\n            \n            translate([3.5, 2, 0])\n            rotate([0, 0, -30])\n            scale([0.7, 1.2, 1])\n            cylinder(h = 0.5, r = 3);\n        }\n        \n        // Vein indentations\n        for (k = [-1:1]) {\n            translate([k * 2, -0.5, 0])\n            scale([0.2, 2, 1.2])\n            cube([0.5, 4, 1]);\n        }\n    }\n}\n\n// Assemble complete model\nunion() {\n    // Main berry cluster\n    squawberry_cluster();\n    \n    // Basal leaves\n    translate([0, 0, 0])\n    basal_leaves();\n}",
    "renders": true
  },
  {
    "fruit": "bunchberry",
    "openscad_code": "// Bunchberry (Cornus canadensis) - Medium Realistic 3D Printable\n// Overall height ≈ 70 mm\n\n// Petals\nmodule petal() {\n    difference() {\n        union() {\n            // Main petal body\n            scale([1, 1.4, 0.25]) sphere(d = 15, $fn = 24);\n            // Slight curl\n            translate([0, -8, 0]) rotate([0, -20, 0]) \n                scale([0.8, 0.6, 0.2]) sphere(d = 10, $fn = 16);\n        }\n        // Thicken bottom for printing\n        translate([0, 0, -1]) cube([20, 20, 2], center = true);\n    }\n}\n\n// Flower head with 4 petals\nmodule flower() {\n    for (a = [0:90:270]) {\n        rotate([0, 0, a]) translate([0, 12, 0]) petal();\n    }\n    // Center cluster of tiny flowers\n    for (i = [0:29]) {\n        rotate([0, 0, i * 12]) translate([0, 6, 0]) \n            sphere(d = 2.5, $fn = 8);\n    }\n}\n\n// Leaf with pointed tip\nmodule leaf() {\n    difference() {\n        scale([1, 2.5, 0.2]) sphere(d = 20, $fn = 24);\n        // Remove bottom for flat print base\n        translate([0, 0, -2]) cube([40, 40, 4], center = true);\n    }\n    // Vein line\n    translate([0, 0, 0.3]) cube([0.5, 20, 0.4], center = true);\n}\n\n// Stem segment\nmodule stem_segment(h = 10) {\n    cylinder(h = h, d = 3, $fn = 8);\n}\n\n// Whorl of 6 leaves at node\nmodule whorl(height) {\n    translate([0, 0, height]) {\n        for (a = [0:60:300]) {\n            rotate([0, 0, a]) translate([0, 25, 0]) \n                rotate([0, 0, 15]) leaf();\n        }\n    }\n}\n\n// Main plant structure\nmodule bunchberry() {\n    // Flower on top\n    translate([0, 0, 65]) flower();\n    \n    // Stem\n    for (i = [0:4]) {\n        translate([0, 0, i * 12]) stem_segment(12);\n    }\n    \n    // Two whorls of leaves\n    whorl(45);\n    whorl(25);\n}\n\n// Generate the model\nbunchberry();",
    "renders": true
  },
  {
    "fruit": "soapberry",
    "openscad_code": "// Soapberry – realistic, medium complexity\n// Overall size ≈ 60 mm\n\n$fn = 60;                 // smooth curves\nwall = 1.2;               // printable wall thickness\n\nmodule soapberry(){\n    // main translucent berry body\n    difference(){\n        sphere(d = 45);           // outer shell\n        sphere(d = 45 - 2*wall);  // hollow inside\n    }\n\n    // slightly flattened top & bottom for realism\n    translate([0,0, 22.5])\n        cube([46,46,5], center=true);\n    translate([0,0,-22.5])\n        cube([46,46,5], center=true);\n\n    // stem stub on top\n    translate([0,0, 24])\n        cylinder(h = 6, d1 = 6, d2 = 4, center=false);\n\n    // surface lenticels (small pores)\n    for(a = [0:30:330]){\n        for(t = [25:15:40]){\n            rotate(a, [0,0,1])\n                translate([t,0,0])\n                    rotate([90,0,0])\n                        cylinder(h = 1.2, d = 1.5, center=true);\n        }\n    }\n\n    // slight crease line along longitudinal axis\n    intersection(){\n        sphere(d = 45);\n        translate([-0.5,-25,-45])\n            cube([1,50,90]);\n    }\n\n    // bottom light ridge for realistic indent\n    translate([0,0,-23])\n        rotate_extrude(angle = 360)\n            translate([18,0,0])\n                circle(r = 1);\n}\n\n// display\nsoapberry();",
    "renders": true
  },
  {
    "fruit": "wolfberry",
    "openscad_code": "// Wolfberry (Goji berry) – realistic style, medium complexity\n// Approx. 55 mm long × 18 mm diameter\n\n// overall parameters\nberry_length = 55;            // total length including stem\nberry_diam   = 18;            // maximum berry diameter\nwall         = 1.0;           // printable wall thickness\n\n// stem\nmodule stem() {\n    translate([0,0,berry_length])\n        cylinder(h=8, d1=4, d2=2, $fn=24);\n}\n\n// main berry body – elongated ellipsoid\nmodule berry_body() {\n    scale([1,1,1.35])\n        sphere(d=berry_diam, $fn=64);\n}\n\n// shallow longitudinal wrinkles\nmodule wrinkles() {\n    for (i=[0:35]) {\n        rotate([0,0,i*10])\n            translate([berry_diam/2 - 0.6, 0, 0])\n                scale([0.25, 1.2, 1.3])\n                    sphere(d=berry_diam, $fn=8);\n    }\n}\n\n// small circular calyx remnants at blossom end\nmodule calyx_dots() {\n    for (a=[0:45:315]) {\n        rotate([0,0,a])\n            translate([berry_diam/2*0.65, 0, -berry_length/2*0.9])\n                cylinder(h=0.8, d=1.3, $fn=12);\n    }\n}\n\n// assembly (all parts fused)\nunion() {\n    stem();\n    difference() {\n        berry_body();\n        wrinkles();\n    }\n    calyx_dots();\n}",
    "renders": true
  },
  {
    "fruit": "goji",
    "openscad_code": "// Goji berry - realistic style, medium complexity\n// Dimensions: ~15mm berry size, cluster ~60mm long\n\n$fn = 32;  // Smooth curves for printing\n\n// Main cluster module\nmodule goji_cluster() {\n    union() {\n        // Central berry\n        goji_berry(0, 0, 0, 1);\n        \n        // Berries arranged along stem\n        for(i = [0:5]) {\n            angle = i * 35 + 15;\n            radius = 8 + i * 2;\n            translate([radius * cos(angle), radius * sin(angle), i * 5 - 12])\n                rotate([0, 90 + i * 5, angle])\n                goji_berry(0, 0, 0, 0.8 + i * 0.05);\n        }\n        \n        // Stem\n        stem();\n    }\n}\n\n// Individual goji berry with realistic features\nmodule goji_berry(x, y, z, scale) {\n    translate([x, y, z]) {\n        scale([scale, scale, scale]) {\n            // Main berry body - ellipsoid shape\n            color(\"darkred\")\n            scale([1, 0.9, 1.2])\n            sphere(7.5);\n            \n            // Calyx (green leafy top)\n            translate([0, 0, 8.5])\n            rotate([0, 0, 0])\n            calyx();\n            \n            // Surface texture - small bumps\n            for(i = [0:8]) {\n                rotate([0, 0, i * 45])\n                translate([5 + i * 0.3, 0, 3 + sin(i) * 2])\n                scale([0.8, 0.8, 0.5])\n                sphere(0.8);\n            }\n            \n            // Highlight ridge\n            translate([0, -6.5, 0])\n            scale([0.5, 0.1, 0.8])\n            sphere(7.5);\n        }\n    }\n}\n\n// Calyx (green leafy part at top)\nmodule calyx() {\n    color(\"darkgreen\")\n    union() {\n        // Central tube\n        cylinder(h=3, r1=2, r2=1.5);\n        \n        // Five sepals radiating out\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([1.5, 0, 1.5])\n            rotate([45, 0, 0])\n            scale([0.8, 0.3, 1.5])\n            cylinder(h=3, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Stem connecting berries\nmodule stem() {\n    color(\"brown\")\n    union() {\n        // Main stem curve\n        translate([0, 0, -20])\n        rotate([0, 90, 0])\n        scale([0.5, 0.5, 1])\n        cylinder(h=40, r1=1.5, r2=1);\n        \n        // Small connecting stems to berries\n        for(i = [0:5]) {\n            angle = i * 35 + 15;\n            radius = 8 + i * 2;\n            translate([radius * cos(angle) * 0.5, radius * sin(angle) * 0.5, i * 5 - 12])\n            rotate([0, 90 + i * 5, angle])\n            scale([0.3, 0.3, 1])\n            cylinder(h=10, r1=1, r2=0.5);\n        }\n    }\n}\n\n// Generate the complete model\ngoji_cluster();",
    "renders": true
  },
  {
    "fruit": "juniper",
    "openscad_code": "// Juniper plant - realistic style, medium complexity\n// Approx 60mm tall, 3D printable\n\n// Main parameters\ntrunk_height = 25;\ntrunk_diameter = 6;\nfoliage_radius = 20;\nbase_radius = 12;\n\n// Create trunk\nmodule trunk() {\n    // Main trunk cylinder\n    cylinder(h=trunk_height, d=trunk_diameter, $fn=8);\n    \n    // Trunk texture - slight bulges\n    for(i=[0:4]) {\n        translate([0, 0, i*trunk_height/5])\n        scale([1.1, 1.1, 0.3])\n        cylinder(h=2, d=trunk_diameter, $fn=8);\n    }\n    \n    // Small branch stubs\n    for(i=[1:3]) {\n        rotate([0, 0, i*120])\n        translate([trunk_diameter/2, 0, trunk_height/2 + i*3])\n        rotate([30, 0, 0])\n        cylinder(h=5, d1=2, d2=1, $fn=6);\n    }\n}\n\n// Create foliage cluster\nmodule foliage_cluster(radius, height, angle, rotation) {\n    rotate([0, 0, rotation])\n    translate([0, 0, height])\n    rotate([angle, 0, 0])\n    scale([1, 1, 0.7])\n    sphere(d=radius, $fn=16);\n}\n\n// Main foliage structure\nmodule foliage() {\n    // Base foliage - larger clusters\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([base_radius/2, 0, trunk_height-5])\n        foliage_cluster(base_radius*0.8, 0, -20, 0);\n    }\n    \n    // Middle layer - medium clusters\n    for(i=[0:8]) {\n        rotate([0, 0, i*45])\n        translate([base_radius*0.6, 0, trunk_height+8])\n        foliage_cluster(base_radius*0.6, 0, -30, 0);\n    }\n    \n    // Top layer - smaller clusters\n    for(i=[0:10]) {\n        rotate([0, 0, i*36])\n        translate([base_radius*0.4, 0, trunk_height+18])\n        foliage_cluster(base_radius*0.4, 0, -40, 0);\n    }\n    \n    // Very top - small sphere\n    translate([0, 0, trunk_height+25])\n    sphere(d=8, $fn=12);\n}\n\n// Create base for stability\nmodule base() {\n    translate([0, 0, -2])\n    cylinder(h=2, d=base_radius*1.2, $fn=32);\n}\n\n// Combine all parts\nunion() {\n    base();\n    trunk();\n    foliage();\n}",
    "renders": true
  },
  {
    "fruit": "bayberry",
    "openscad_code": "// Realistic Bayberry (Myrica rubra) - Medium Complexity\n// Features: Clustered drupes, textured surface, branch stub, realistic proportions\n\n$fn = 36;  // Smooth curves for realism\n\n// Main parameters\nberry_radius = 6;      // Individual berry size\ncluster_diameter = 45;  // Overall cluster size\nbranch_diameter = 4;   // Stem thickness\nberry_count = 20;      // Number of berries in cluster\n\nmodule berry(radius, texture_depth) {\n    // Single berry with realistic bumpy surface\n    difference() {\n        sphere(r = radius);\n        \n        // Surface bumps for realistic texture\n        for (i = [0:5:360]) {\n            for (j = [0:10:80]) {\n                translate([\n                    radius * 0.8 * cos(i) * sin(j),\n                    radius * 0.8 * sin(i) * sin(j),\n                    radius * 0.8 * cos(j)\n                ]) {\n                    sphere(r = texture_depth, $fn = 12);\n                }\n            }\n        }\n    }\n}\n\nmodule berry_cluster() {\n    // Create realistic berry cluster using golden spiral\n    union() {\n        for (i = [0:berry_count-1]) {\n            // Golden spiral distribution for natural look\n            theta = i * 137.508 * 3.14159 / 180;\n            phi = acos(1 - 2 * (i + 0.5) / berry_count);\n            \n            // Position berries in spherical cluster\n            x = cluster_diameter/2 * 0.35 * cos(theta) * sin(phi);\n            y = cluster_diameter/2 * 0.35 * sin(theta) * sin(phi);\n            z = cluster_diameter/2 * 0.35 * cos(phi) - cluster_diameter/4;\n            \n            translate([x, y, z]) {\n                rotate([0, 0, theta * 57.2958]) {\n                    // Vary berry sizes slightly for realism\n                    scale([1 + 0.1 * sin(i*3), 1 + 0.1 * cos(i*2), 1]) {\n                        berry(berry_radius * (0.8 + 0.4 * (1 - phi/3.14159)), 0.3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule branch_stub() {\n    // Realistic branch connection point\n    union() {\n        // Main branch\n        cylinder(h = 8, r1 = branch_diameter/2, r2 = branch_diameter/3, center = false);\n        \n        // Branch scar texture\n        translate([0, 0, 7.5]) {\n            difference() {\n                cylinder(h = 1, r = branch_diameter/2 + 1, center = false);\n                for (i = [0:45:360]) {\n                    rotate([0, 0, i]) {\n                        translate([branch_diameter/3, 0, 0]) {\n                            cylinder(h = 2, r = 0.3, center = false);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule leaf_scar() {\n    // Small leaf attachment scars on some berries\n    translate([0, 0, berry_radius - 0.5]) {\n        scale([1, 0.3, 0.2]) {\n            sphere(r = 1);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 5]) {\n    // Position branch at top\n    rotate([180, 0, 0]) {\n        branch_stub();\n    }\n    \n    // Main berry cluster\n    berry_cluster();\n    \n    // Add a few visible leaf scars\n    translate([berry_radius * 0.7, 0, 0]) {\n        leaf_scar();\n    }\n    translate([-berry_radius * 0.7, 0, 0]) {\n        rotate([0, 0, 180]) leaf_scar();\n    }\n    translate([0, berry_radius * 0.7, 0]) {\n        rotate([0, 0, 90]) leaf_scar();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "waxberry",
    "openscad_code": "// Waxberry (Myrica rubra) in realistic style, medium complexity\n// Overall size ~70mm height, 3D-printable with no steep overhangs\n\n$fn = 48; // smooth curves\n\n// Main berry body\nmodule berry_body() {\n    difference() {\n        // Outer surface\n        scale([1, 1, 1.1])\n            sphere(d = 35);\n        \n        // Core cavity for 1mm wall\n        translate([0,0,-1])\n            sphere(d = 33);\n    }\n}\n\n// Surface bumps (vesicles)\nmodule bumps() {\n    for(i = [0:35]) {\n        // Fibonacci-like distribution on sphere\n        phi = 137.508 * i;\n        theta = asin(-1 + 2*i/35);\n        \n        translate([\n            17.5 * cos(theta) * cos(phi),\n            17.5 * cos(theta) * sin(phi),\n            17.5 * sin(theta) * 1.1\n        ]) {\n            // Randomize bump size slightly\n            bump_scale = 0.7 + 0.3 * sin(i*3.7);\n            scale([bump_scale, bump_scale, bump_scale])\n                sphere(d = 3.5);\n        }\n    }\n}\n\n// Calyx (top where stem attaches)\nmodule calyx() {\n    difference() {\n        // Main calyx shape\n        translate([0,0,17.5])\n            cylinder(h = 5, r1 = 7, r2 = 4);\n        \n        // Center hole for stem\n        translate([0,0,16])\n            cylinder(h = 7, r = 1.5);\n    }\n    \n    // Calyx lobes\n    for(i = [0:4]) {\n        rotate([0,0,72*i])\n            translate([4.5,0,17.5])\n                rotate([90,0,0])\n                    cylinder(h = 4, r1 = 1.2, r2 = 0.5);\n    }\n}\n\n// Stem\nmodule stem() {\n    // Main stem\n    translate([0,0,22])\n        cylinder(h = 20, r1 = 1.5, r2 = 1);\n    \n    // Stem tip\n    translate([0,0,42])\n        sphere(d = 2);\n}\n\n// Base assembly\nmodule waxberry() {\n    union() {\n        berry_body();\n        bumps();\n        calyx();\n        stem();\n    }\n}\n\n// Render the waxberry\nwaxberry();",
    "renders": true
  },
  {
    "fruit": "miraclefruit",
    "openscad_code": "// Miraclefruit (Synsepalum dulcificum) – medium realism\n// Overall length ≈ 70 mm, max diameter ≈ 30 mm\n// Designed for 3-D printing with no support\n\n$fn = 60;          // smooth curves\nwall = 1.2;        // printable wall thickness\n\nmodule berry() {\n    // Main ellipsoid body\n    difference() {\n        scale([1, 1, 1.4])\n            sphere(d = 30);\n        // Flatten bottom slightly so it sits\n        translate([0, 0, -21])\n            cube([40, 40, 10], center = true);\n    }\n\n    // Equatorial ridge\n    translate([0, 0, 6])\n    rotate_extrude()\n        translate([16, 0, 0])\n            circle(r = 1.5);\n\n    // Calyx scar – shallow dimple at top\n    translate([0, 0, 22])\n        sphere(d = 8);\n}\n\nmodule sepal() {\n    // 5 thin sepals radiating from calyx\n    for (a = [0:72:360-1]) {\n        rotate([0, 0, a])\n            translate([0, 9, 21])\n                rotate([50, 0, 0])\n                    cylinder(h1 = 6, h2 = 0, r1 = 2, r2 = 0.5);\n    }\n}\n\nmodule stem() {\n    // Short peduncle\n    translate([0, 0, 21])\n        cylinder(h = 5, r = 2.2, center = false);\n}\n\nmodule miraclefruit() {\n    union() {\n        berry();\n        sepal();\n        stem();\n    }\n}\n\n// Center model on platform\ntranslate([0, 0, 0])\n    miraclefruit();",
    "renders": true
  },
  {
    "fruit": "surinamcherry",
    "openscad_code": "// Surinam Cherry (Eugenia uniflora) – medium-complexity, printable, realistic\n// Overall height ≈ 60 mm\n\n// Stem module (8 ribs for stiffness, no overhangs)\nmodule stem(h=20, r_top=2.2, r_bot=3.0) {\n    difference() {\n        cylinder(h=h, r1=r_bot, r2=r_top, $fn=8);         // main body\n        for(i=[0:3])                                        // 4 shallow grooves\n            rotate([0,0,i*90])\n                translate([0,-0.5,0])\n                    cube([1.2,h,1],center=true);\n    }\n}\n\n// Calyx (star-shaped, printed flat on top)\nmodule calyx() {\n    difference() {\n        cylinder(h=4.5, r=9, $fn=12);                      // basic disk\n        for (a=[0:30:330])                                 // 12 triangular notches\n            rotate([0,0,a])\n                translate([0,7.5,-1])\n                    cube([3,6,7],center=true);\n    }\n}\n\n// Single longitudinal ridge on fruit\nmodule ridge(len=24) {\n    hull() {\n        sphere(d=2.2,$fn=8);\n        translate([0,0,len]) sphere(d=1.4,$fn=8);\n    }\n}\n\n// Fruit body – eight lobes with ridges\nmodule fruit_body() {\n    difference() {\n        sphere(d=36,$fn=80);                               // smooth base sphere\n        // hollow cavity\n        translate([0,0,-2])\n            sphere(d=30,$fn=80);\n    }\n    for (i=[0:45:315]) {                                  // add 8 ridges\n        rotate([0,0,i])\n            translate([0,18-2,0])\n                rotate([90,0,0])\n                    ridge();\n    }\n}\n\n// Final assembly\nunion() {\n    // Calyx sitting on fruit\n    translate([0,0,18.5]) calyx();\n    \n    // Fruit\n    fruit_body();\n    \n    // Stem emerging straight up from calyx center\n    translate([0,0,22.5]) stem();\n}",
    "renders": true
  },
  {
    "fruit": "camucamu",
    "openscad_code": "// Camu Camu Fruit - Realistic Medium Complexity\n// Overall size: ~60mm diameter\n\n$fn=36;\n\n// Main fruit body - slightly flattened sphere\nmodule fruit_body() {\n    difference() {\n        scale([1, 1, 0.85]) sphere(d=50);\n        \n        // Indentation at top where stem attaches\n        translate([0, 0, 21]) \n            scale([0.3, 0.3, 0.5]) sphere(d=10);\n            \n        // Small dimples for realistic texture\n        for(i=[0:15]) {\n            rotate([0, 0, i*24]) \n                translate([22, 0, rand(5,15)]) \n                    sphere(d=rand(2,4));\n        }\n    }\n}\n\n// Stem attachment\nmodule stem_base() {\n    translate([0, 0, 21.5]) {\n        cylinder(h=3, d1=4, d2=2);\n        translate([0, 0, 2.5]) \n            scale([0.5, 0.5, 1]) sphere(d=3);\n    }\n}\n\n// Small leaves around stem\nmodule leaves() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([3.5, 0, 23.5]) {\n                rotate([90, 0, 0]) {\n                    scale([0.8, 0.4, 0.1]) \n                        cylinder(h=8, d1=1, d2=0);\n                }\n            }\n        }\n    }\n}\n\n// Surface bumps for realistic texture\nmodule surface_bumps() {\n    difference() {\n        union() {\n            for(i=[0:35]) {\n                rotate([0, rand(0,360), rand(0,360)]) {\n                    translate([rand(20,23), 0, rand(-15,15)]) {\n                        scale([1, 1, 0.6]) sphere(d=rand(3,5));\n                    }\n                }\n            }\n        }\n        // Ensure bumps don't extend beyond fruit bounds\n        scale([1, 1, 0.85]) sphere(d=50);\n    }\n}\n\n// Bottom indentation\nmodule bottom_indent() {\n    translate([0, 0, -21]) {\n        scale([0.2, 0.2, 0.3]) sphere(d=15);\n    }\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max-min)*sin(12345*$children)/2+0.5;\n\n// Main assembly\nunion() {\n    fruit_body();\n    stem_base();\n    leaves();\n    surface_bumps();\n    bottom_indent();\n}",
    "renders": true
  },
  {
    "fruit": "guarana",
    "openscad_code": "// Guarana Fruit - Realistic Style, Medium Complexity\n// 3D printable model, ~60mm tall\n\n// Parameters\n$fn = 32;\nfruit_diameter = 25;\nfruit_height = 30;\nstem_length = 8;\nstem_diameter = 3;\nleaf_length = 25;\nleaf_width = 12;\nleaf_thickness = 1.5;\ncapsule_radius = 5;\ncapsule_height = 8;\ncapsule_count = 12;\n\n// Main fruit body - slightly elongated sphere\nmodule fruit_body() {\n    difference() {\n        // Main rounded body\n        scale([1, 1, 1.2])\n            sphere(d = fruit_diameter);\n        \n        // Flattened bottom\n        translate([0, 0, -fruit_diameter/2 - 1])\n            cube([fruit_diameter + 2, fruit_diameter + 2, 2], center = true);\n    }\n}\n\n// Stem with slight curve\nmodule stem() {\n    translate([0, 0, fruit_height/2 + stem_length/2])\n        rotate([5, 0, 0])\n            cylinder(h = stem_length, d = stem_diameter);\n}\n\n// Single leaf with central vein\nmodule leaf() {\n    color(\"darkgreen\")\n    difference() {\n        // Leaf shape - tapered ellipsoid\n        scale([leaf_width/leaf_length, 1, leaf_thickness/leaf_length])\n            sphere(d = leaf_length);\n        \n        // Remove bottom half\n        translate([0, 0, -leaf_thickness])\n            cube([leaf_length*2, leaf_length*2, leaf_thickness*2], center = true);\n        \n        // Central vein\n        translate([0, 0, leaf_thickness/2])\n            cube([leaf_length*0.9, 0.5, leaf_thickness*0.3], center = true);\n    }\n}\n\n// Guarana capsule cluster\nmodule capsule_cluster() {\n    for (i = [0:capsule_count-1]) {\n        rotate([0, 0, i * 360/capsule_count])\n            translate([fruit_diameter/2 - 2, 0, fruit_height/2 - capsule_height/2])\n                capsule();\n    }\n}\n\n// Single capsule with opening\nmodule capsule() {\n    color(\"saddlebrown\")\n    difference() {\n        // Capsule body\n        cylinder(h = capsule_height, r = capsule_radius);\n        \n        // Opening at top\n        translate([0, 0, capsule_height - 1])\n            cylinder(h = 2, r = capsule_radius * 0.7);\n        \n        // Seed cavity\n        translate([0, 0, 1])\n            cylinder(h = capsule_height - 2, r = capsule_radius * 0.5);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_texture() {\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([fruit_diameter/2 - 0.5, 0, sin(i * 30) * 5])\n                sphere(d = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit\n    color(\"firebrick\")\n    union() {\n        fruit_body();\n        surface_texture();\n    }\n    \n    // Stem\n    color(\"saddlebrown\")\n    stem();\n    \n    // Leaves - three at top\n    translate([0, 0, fruit_height/2 + stem_length])\n    union() {\n        rotate([0, 0, 0])\n            translate([5, 0, 0])\n                rotate([15, 0, 45])\n                    leaf();\n        \n        rotate([0, 0, 120])\n            translate([5, 0, 0])\n                rotate([15, 0, 45])\n                    leaf();\n        \n        rotate([0, 0, 240])\n            translate([5, 0, 0])\n                rotate([15, 0, 45])\n                    leaf();\n    }\n    \n    // Capsules around equator\n    translate([0, 0, 5])\n        rotate([0, 0, 15])\n            capsule_cluster();\n}",
    "renders": true
  },
  {
    "fruit": "cupuassu",
    "openscad_code": "// Cupuassu 3D model - realistic style, medium complexity\n// Overall size: ~60mm length, ~40mm height, ~40mm width\n// Wall thickness: 2mm for 3D printing\n\n$fn = 36; // Smooth curves\n\n// Main fruit body\nmodule cupuassu_body() {\n    difference() {\n        // Outer shell\n        scale([1, 0.7, 0.8])\n        sphere(20);\n        \n        // Hollow interior\n        scale([0.9, 0.6, 0.7])\n        sphere(18.5);\n    }\n}\n\n// Top ridge pattern\nmodule top_ridge() {\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([0, 12, 10])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=2, r2=1);\n    }\n}\n\n// Bottom ridge pattern\nmodule bottom_ridge() {\n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n        translate([0, 13, -15])\n        rotate([90, 0, 0])\n        cylinder(h=6, r1=1.5, r2=0.5);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20])\n    rotate([0, 0, 10])\n    cylinder(h=15, r1=4, r2=2);\n}\n\n// Seeds inside (simplified)\nmodule seeds() {\n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n        translate([8, 0, -5])\n        scale([1.5, 1, 1])\n        sphere(3);\n    }\n}\n\n// Surface texture bumps\nmodule surface_bumps() {\n    for(a = [0:30:359]) {\n        for(b = [30:30:150]) {\n            rotate([b, 0, a])\n            translate([0, 0, 18])\n            sphere(1);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    cupuassu_body();\n    \n    // Top features\n    top_ridge();\n    stem();\n    \n    // Bottom features\n    bottom_ridge();\n    \n    // Surface texture\n    surface_bumps();\n    \n    // Seeds visible through opening\n    seeds();\n}",
    "renders": true
  },
  {
    "fruit": "dokong",
    "openscad_code": "// Dokong (Duku Langsat) in realistic medium-complexity style\n// Overall dimensions: ~60 mm long × ~30 mm wide × ~30 mm tall\n\nmodule dokong() {\n    // Main body – slightly flattened ellipsoid\n    difference() {\n        scale([1, 0.8, 0.7])\n            sphere(d = 30, $fn = 50);\n\n        // Flatten bottom slightly so it sits\n        translate([0, 0, -11])\n            cube([40, 40, 20], center = true);\n    }\n\n    // Stem stub on top\n    translate([0, 0, 10])\n        cylinder(h = 4, d1 = 4, d2 = 2.5, $fn = 16);\n\n    // Surface pores (lenticel texture)\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            for (b = [20:25:70]) {\n                rotate([b, 0, 0])\n                    translate([0, 0, 15])\n                        sphere(d = 1.2, $fn = 8);\n            }\n    }\n\n    // Subtle bulge seam along longitude\n    difference() {\n        sphere(d = 31, $fn = 50);\n        translate([0.5, 0, 0])\n            scale([0.98, 0.98, 0.98])\n                sphere(d = 31.2, $fn = 50);\n    }\n\n    // Small calyx remnants at bottom\n    difference() {\n        translate([0, 0, -10.5])\n            cylinder(h = 1.5, d = 4, $fn = 12);\n        translate([0, -2.5, -11])\n            cube([4, 5, 3], center = true);\n    }\n}\n\n// Optional: slice in half to show interior\n// %translate([40, 0, 0])\n//     intersection() {\n//         dokong();\n//         translate([20, 0, 0])\n//             cube([40, 40, 40], center = true);\n//     }\n\ndokong();",
    "renders": true
  },
  {
    "fruit": "mata",
    "openscad_code": "// Realistic Mata OpenSCAD Model - Medium Complexity\n// 3D printable mask with anatomical features\n\n$fn=50;\n\n// Main parameters\nmask_width = 85;\nmask_height = 65;\nmask_depth = 35;\nwall_thickness = 2.5;\n\nmodule eye_hole() {\n    // Teardrop shaped eye hole\n    rotate([0, 0, 20])\n    translate([0, -5, 0])\n    union() {\n        cylinder(h=wall_thickness*2, r1=8, r2=8);\n        translate([0, 8, 0])\n        scale([1, 0.7, 1])\n        sphere(r=7);\n    }\n}\n\nmodule eye_socket(x_pos, y_pos) {\n    // Eye socket with surrounding detail\n    translate([x_pos, y_pos, -mask_depth/4]) {\n        // Socket cavity\n        difference() {\n            sphere(r=12);\n            translate([0, 0, -12])\n            cube([30, 30, 30], center=true);\n        }\n        \n        // Eye ridge above\n        translate([0, 10, 3])\n        rotate([30, 0, 0])\n        scale([1.5, 0.5, 0.8])\n        sphere(r=8);\n    }\n}\n\nmodule nostril() {\n    // Oval nostril shape\n    rotate([90, 0, 0])\n    scale([1.2, 0.8, 1])\n    cylinder(h=wall_thickness*2, r1=3, r2=2);\n}\n\nmodule mouth_detail() {\n    // Subtle mouth line\n    translate([0, -mask_height/3, mask_depth/4])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    cylinder(h=wall_thickness, r1=12, r2=8);\n}\n\nmodule forehead_ridges() {\n    // Series of horizontal ridges\n    for(i=[1:3]) {\n        translate([0, mask_height/3 - i*6, mask_depth/6 + i*1.5])\n        rotate([-10 + i*5, 0, 0])\n        scale([1 - i*0.1, 0.3, 0.5])\n        cube([mask_width - i*10, 5, 2], center=true);\n    }\n}\n\nmodule cheek_detail(x_pos) {\n    // Cheekbone area\n    translate([x_pos, -mask_height/6, -mask_depth/6])\n    rotate([0, -20, x_pos > 0 ? 15 : -15])\n    scale([0.8, 1.2, 0.6])\n    sphere(r=10);\n}\n\nmodule mask_base() {\n    // Main mask shape - slightly curved face\n    difference() {\n        // Outer shell\n        translate([0, 0, -mask_depth/2])\n        scale([1, 1.2, 1])\n        sphere(r=mask_width/2);\n        \n        // Hollow out back\n        translate([0, -5, -mask_depth/2 - 2])\n        scale([0.85, 1.1, 0.8])\n        sphere(r=mask_width/2.2);\n        \n        // Flatten back slightly\n        translate([0, 0, -mask_depth/2 - 5])\n        cube([mask_width*2, mask_height*2, 10], center=true);\n    }\n    \n    // Flatten face slightly\n    translate([0, 0, mask_depth/2])\n    cube([mask_width*2, mask_height*2, mask_depth], center=true);\n}\n\nmodule mask_details() {\n    // Eye sockets and holes\n    eye_socket(-mask_width/4, mask_height/4);\n    eye_socket(mask_width/4, mask_height/4);\n    \n    difference() {\n        // Eye holes\n        translate([-mask_width/4, mask_height/4, mask_depth/6])\n        rotate([0, -10, 0])\n        eye_hole();\n        \n        translate([mask_width/4, mask_height/4, mask_depth/6])\n        mirror([1, 0, 0])\n        rotate([0, -10, 0])\n        eye_hole();\n    }\n    \n    // Nose area\n    translate([0, 0, mask_depth/6])\n    scale([1, 1.5, 1])\n    sphere(r=8);\n    \n    // Nostrils\n    translate([-4, -mask_height/6, mask_depth/6])\n    nostril();\n    translate([4, -mask_height/6, mask_depth/6])\n    nostril();\n    \n    // Mouth\n    mouth_detail();\n    \n    // Forehead details\n    forehead_ridges();\n    \n    // Cheek details\n    cheek_detail(-mask_width/3);\n    cheek_detail(mask_width/3);\n}\n\n// Assembly\nunion() {\n    mask_base();\n    mask_details();\n}",
    "renders": true
  },
  {
    "fruit": "limeberry",
    "openscad_code": "// Limeberry - realistic medium-complexity model\n// A small, clustered berry with lime-green color and glossy surface\n// Designed for 3D printing with no overhangs\n\n// Main parameters\nberry_diameter = 8;\ncluster_radius = 20;\nnum_berries = 12;\nstem_length = 15;\nstem_diameter = 3;\nleaf_length = 12;\nleaf_width = 6;\n\n// Berry module with realistic surface detail\nmodule berry(d=8, detail=16) {\n    // Main berry body with slight ellipsoid shape\n    scale([1, 1, 1.1])\n    sphere(d=d, $fn=detail);\n    \n    // Surface texture - small bumps\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, d/2-0.5, d/4])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d1=0.8, d2=0.4, $fn=6);\n    }\n}\n\n// Leaf module with veining\nmodule leaf(length=12, width=6) {\n    // Main leaf shape\n    scale([1, 0.6, 0.1])\n    sphere(d=length, $fn=16);\n    \n    // Central vein\n    translate([0, 0, 0.2])\n    scale([1, 0.1, 0.1])\n    rotate([90, 0, 0])\n    cylinder(h=length-2, d=width/4, $fn=4);\n    \n    // Side veins\n    for(i=[-1, 1]) {\n        translate([i*width/4, 0, 0.2])\n        rotate([90, i*30, 0])\n        scale([0.7, 0.1, 0.1])\n        cylinder(h=length/2, d=width/6, $fn=4);\n    }\n}\n\n// Stem module with natural curve\nmodule stem() {\n    // Main stem\n    rotate([0, -10, 0])\n    cylinder(h=stem_length, d=stem_diameter, $fn=12);\n    \n    // Small branch nodes\n    for(i=[0.3, 0.6, 0.9]) {\n        translate([0, 0, stem_length*i])\n        rotate([0, 90, 0])\n        cylinder(h=stem_diameter*1.5, d=stem_diameter*0.7, $fn=8);\n    }\n}\n\n// Berry cluster arrangement\nmodule berry_cluster() {\n    // Main berries in spherical arrangement\n    for(i=[0:num_berries-1]) {\n        angle = i*360/num_berries + (i%2)*30;\n        tilt = 30 + (i%3)*20;\n        \n        rotate([tilt, 0, angle])\n        translate([cluster_radius, 0, 0])\n        berry(d=berry_diameter + (i%3)*2);\n    }\n    \n    // Central connecting berries\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([cluster_radius/2, 0, 0])\n        berry(d=berry_diameter*0.8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Stem at base\n    translate([0, 0, -stem_length])\n    stem();\n    \n    // Berry cluster\n    berry_cluster();\n    \n    // Small leaves at top\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([cluster_radius*0.8, 0, cluster_radius/2])\n        rotate([0, 0, -30])\n        leaf(length=leaf_length, width=leaf_width);\n    }\n}\n\n// Add small calyx at each berry connection point\nmodule calyx() {\n    difference() {\n        cylinder(h=1.5, d=berry_diameter*0.8, $fn=8);\n        translate([0, 0, -0.5])\n        cylinder(h=2, d=berry_diameter*0.6, $fn=8);\n    }\n}\n\n// Add calyx to some berries\nfor(i=[0, 3, 6, 9]) {\n    angle = i*360/num_berries;\n    tilt = 30;\n    \n    rotate([tilt, 0, angle])\n    translate([cluster_radius, 0, -berry_diameter/2])\n    calyx();\n}",
    "renders": true
  },
  {
    "fruit": "citrus",
    "openscad_code": "// Realistic 3D printable citrus (orange)\n// Dimensions fit within 60 mm sphere\n\n$fn = 48;\n\n// Main parameters\ndiameter = 58;               // Overall fruit diameter\npeel_thickness = 2.4;        // Peel thickness for printing\nsegment_count = 10;          // Number of orange segments\nstem_diameter = 4;           // Stem width\ndimple_depth = 3.5;          // Skin pore depth\n\nmodule citrus() {\n    difference() {\n        // Main fruit body (sphere)\n        sphere(d = diameter);\n\n        // Hollow center for material saving\n        translate([0, 0, -peel_thickness/2])\n            sphere(d = diameter - 2 * peel_thickness);\n\n        // Create segments by subtracting radial wedges\n        for (i = [0 : segment_count - 1]) {\n            rotate([0, 0, i * 360 / segment_count])\n                translate([0, diameter/2, 0])\n                    cube([diameter, diameter, diameter], center = true);\n        }\n\n        // Top stem cavity\n        translate([0, 0, diameter/2])\n            cylinder(h = 5, d = stem_diameter + 2, $fn = 16);\n    }\n\n    // Add stem on top\n    translate([0, 0, diameter/2])\n        cylinder(h = 6, d = stem_diameter, $fn = 12);\n\n    // Add peel texture with small dimples\n    for (i = [0 : 35]) {\n        rotate([0, i * 10, 0]) {\n            for (j = [0 : 17]) {\n                rotate([0, 0, j * 20]) {\n                    // Randomize dimple placement slightly\n                    theta = 30 + rand(i * 20 + j) * 120;\n                    phi = rand(i * 30 + j) * 360;\n                    x = cos(phi) * sin(theta) * (diameter/2 - dimple_depth/2);\n                    y = sin(phi) * sin(theta) * (diameter/2 - dimple_depth/2);\n                    z = cos(theta) * (diameter/2 - dimple_depth/2);\n                    \n                    translate([x, y, z])\n                        sphere(d = dimple_depth * 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random values (0-1)\nfunction rand(seed) = (sin(seed * 127.1 + 43758.5453) * 43758.5453) % 1;\n\n// Render the citrus\ncitrus();",
    "renders": true
  },
  {
    "fruit": "sunquat",
    "openscad_code": "// Sunquat (Kumquat × Sunquat hybrid) – medium-realistic 3D printable model\n// Overall size: ~70 mm tall\n\n// Basic parameters\nfruit_d = 38;           // Equatorial Ø\nfruit_h = 35;           // Polar height\nwall_t = 1.6;           // Shell thickness for printing\nsegments = 48;          // Resolution for curved surfaces\n\n// Small helper for a rounded segment (half-sphere) used for segments\nmodule segment_half(d){\n    difference(){\n        sphere(d=d/2,$fn=segments);\n        translate([0,0,-d/4]) cube(d*2,center=true);\n    }\n}\n\n// Main fruit body – slightly compressed sphere\nmodule fruit_body(){\n    scale([1,1,fruit_h/fruit_d])\n    sphere(d=fruit_d,$fn=segments);\n}\n\n// Peel surface texture – array of tiny domes\nmodule peel_texture(){\n    n=24;                   // rings\n    m=32;                   // points per ring\n    step_a=360/m;\n    step_b=180/n;\n    for(i=[0:n-1])\n        for(j=[0:m-1])\n            rotate([i*step_b,j*step_a,0])\n            translate([0,0,fruit_d/2-0.3])\n            scale([0.7,0.7,0.3])\n            sphere(d=2,$fn=8);\n}\n\n// Peel (shell) with thickness and texture\nmodule peel(){\n    difference(){\n        union(){\n            fruit_body();\n            peel_texture();\n        }\n        scale([1,1,fruit_h/fruit_d])\n        sphere(d=fruit_d-wall_t*2,$fn=segments);\n    }\n}\n\n// Calyx (top green crown)\nmodule calyx(){\n    translate([0,0,fruit_h/2+0.2]){\n        color(\"darkgreen\")\n        difference(){\n            cylinder(h=4,d1=8,d2=5,$fn=8);\n            cylinder(h=5,d1=6,d2=3,$fn=8);\n        }\n        // 5 sepals\n        for(k=[0:4])\n            rotate([0,0,k*72])\n            translate([3.5,0,2])\n            rotate([30,0,0])\n            scale([1,0.5,0.2])\n            cylinder(h=4,d1=2.5,d2=0,$fn=6);\n    }\n}\n\n// Internal flesh (solid for printing – remove if hollowing later)\nmodule flesh(){\n    color(\"orange\")\n    scale([1,1,fruit_h/fruit_d])\n    sphere(d=fruit_d-wall_t*2,$fn=segments);\n}\n\n// Central void for printability\nmodule hollow(){\n    scale([1,1,fruit_h/fruit_d])\n    sphere(d=fruit_d-wall_t*4,$fn=segments);\n}\n\n// Assembly\nunion(){\n    peel();\n    calyx();\n    difference(){\n        flesh();\n        hollow();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "nagami",
    "openscad_code": "// Nagami (Kumquat) Fruit with Leaves - Realistic Medium Complexity\n// 3D printable model, ~60mm tall\n\n$fn = 48;  // Smooth curves\n\nmodule leaf(length, width, thickness, twist) {\n    difference() {\n        // Main leaf body\n        translate([0, 0, thickness/2])\n        scale([length, width, 1])\n        sphere(thickness);\n        \n        // Leaf tip taper\n        translate([length*0.4, 0, -thickness])\n        cube([length*0.6, width*1.2, thickness*2], center=true);\n        \n        // Central vein\n        translate([0, 0, thickness*0.6])\n        rotate([90, 0, 0])\n        cylinder(h=length*1.1, d=width*0.15, $fn=8);\n        \n        // Side veins\n        for(i = [-1, 1]) {\n            translate([length*0.1, width*i*0.3, thickness*0.6])\n            rotate([90, 0, 45*i])\n            cylinder(h=length*0.7, d=width*0.08, $fn=6);\n            \n            translate([length*0.3, width*i*0.35, thickness*0.6])\n            rotate([90, 0, 25*i])\n            cylinder(h=length*0.5, d=width*0.08, $fn=6);\n        }\n    }\n    \n    // Add twist\n    rotate([0, 0, twist]) children();\n}\n\nmodule fruit(radius) {\n    difference() {\n        // Main fruit body\n        sphere(radius);\n        \n        // Stem indentation\n        translate([0, 0, radius*0.9])\n        cylinder(h=radius*0.3, d=radius*0.4, $fn=16);\n        \n        // Bottom dimple\n        translate([0, 0, -radius*0.95])\n        sphere(radius*0.3);\n        \n        // Surface texture - small indentations\n        for(i = [0:20]) {\n            rotate([0, 0, i*18])\n            translate([radius*0.8, 0, sin(i*3)*radius*0.1])\n            sphere(radius*0.03);\n        }\n    }\n}\n\nmodule stem() {\n    // Main stem\n    cylinder(h=8, d=2, $fn=8);\n    \n    // Small branch\n    translate([0, 1.5, 4])\n    rotate([30, 0, 0])\n    cylinder(h=6, d=1.5, $fn=6);\n}\n\n// Main assembly\nunion() {\n    // Base fruit\n    translate([0, 0, 10])\n    fruit(15);\n    \n    // Stem\n    translate([0, 0, 25])\n    stem();\n    \n    // Large leaf\n    translate([10, 0, 22])\n    rotate([0, -20, -30])\n    leaf(25, 12, 2, 5);\n    \n    // Medium leaf\n    translate([-8, -8, 20])\n    rotate([0, 10, 45])\n    leaf(20, 10, 1.5, -10);\n    \n    // Small leaf\n    translate([5, -12, 18])\n    rotate([0, 15, 60])\n    leaf(15, 8, 1, 15);\n    \n    // Second fruit (smaller)\n    translate([12, 8, 5])\n    scale(0.7)\n    fruit(10);\n    \n    // Third fruit (tiny)\n    translate([-10, 12, 8])\n    scale(0.5)\n    fruit(8);\n}",
    "renders": true
  },
  {
    "fruit": "marumi",
    "openscad_code": "// Marumi (Citrus) - Realistic Style, Medium Complexity\n// OpenSCAD code for 3D printable citrus fruit model\n\n// Main parameters\nfruit_d = 55;          // Main fruit diameter\nstem_d = 4;            // Stem diameter\nstem_h = 8;            // Stem height\ncalyx_d = 12;          // Calyx diameter\ncalyx_h = 3;           // Calyx height\nsegments = 64;         // Smoothness\nwall_t = 2;            // Wall thickness for hollow fruit\n\n// Main fruit body (slightly flattened sphere)\nmodule fruit_body() {\n    difference() {\n        // Outer skin\n        scale([1, 1, 0.9])\n            sphere(d = fruit_d, $fn = segments);\n        \n        // Hollow interior\n        scale([1, 1, 0.9])\n            sphere(d = fruit_d - 2*wall_t, $fn = segments);\n    }\n}\n\n// Textured skin surface with dimples\nmodule textured_skin() {\n    // Create random dimples across surface\n    for (i = [0:20:360]) {\n        for (j = [20:20:160]) {\n            rotate([j, 0, i])\n            translate([0, 0, fruit_d/2 - 2])\n            rotate([90, 0, 0])\n            cylinder(h = 1.5, d1 = 3, d2 = 2, $fn = 8);\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    // Calyx (flower end)\n    translate([0, 0, fruit_d/2 * 0.9 - calyx_h/2])\n    cylinder(h = calyx_h, d = calyx_d, $fn = segments);\n    \n    // Stem\n    translate([0, 0, fruit_d/2 * 0.9 + stem_h/2])\n    cylinder(h = stem_h, d = stem_d, $fn = 16);\n    \n    // Stem collar\n    translate([0, 0, fruit_d/2 * 0.9])\n    cylinder(h = 1.5, d = stem_d * 1.8, $fn = 16);\n}\n\n// Navel (bottom end)\nmodule navel() {\n    translate([0, 0, -fruit_d/2 * 0.9])\n    difference() {\n        cylinder(h = 3, d = 8, $fn = 32);\n        translate([0, 0, -0.5])\n        cylinder(h = 4, d = 5, $fn = 32);\n    }\n}\n\n// Surface segments (realistic citrus segments visible through skin)\nmodule segments() {\n    for (i = [0:30:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, 0])\n        difference() {\n            // Segment lines\n            cube([1, fruit_d/2 - 5, 0.5], center = true);\n            // Rounded ends\n            translate([0, fruit_d/4, 0])\n            sphere(d = 0.5, $fn = 8);\n            translate([0, -fruit_d/4, 0])\n            sphere(d = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit\n    fruit_body();\n    \n    // External features\n    stem_base();\n    navel();\n    \n    // Surface details\n    translate([0, 0, 0])\n    scale([1, 1, 0.9])\n    segments();\n    \n    // Skin texture\n    translate([0, 0, 0])\n    textured_skin();\n}\n\n// Optional: Cutaway view for printing\n// %translate([-fruit_d - 10, 0, 0])\n// fruit_body();",
    "renders": true
  },
  {
    "fruit": "meiwakumquat",
    "openscad_code": "// Meiwakumquat - realistic style, medium complexity\n// A small citrus fruit with segmented peel and textured skin\n\n// Parameters\nfruit_d = 35;           // Main fruit diameter in mm\nstem_d = 2.5;           // Stem diameter\nstem_h = 8;             // Stem height\nsegment_count = 8;      // Vertical segments in peel\ntexture_depth = 0.6;    // Depth of surface texture\nwall_thickness = 1.5;   // 3D printable wall thickness\n\n// Main fruit body with subtle ellipsoid shape\nmodule fruit_body() {\n    difference() {\n        // Main ellipsoid shape\n        scale([1, 1.1, 0.9]) \n            sphere(d = fruit_d, $fn = 64);\n        \n        // Hollow out the inside\n        scale([1, 1.1, 0.9]) \n            sphere(d = fruit_d - 2*wall_thickness, $fn = 64);\n    }\n}\n\n// Create vertical segments in peel\nmodule peel_segments() {\n    for(i = [0:segment_count-1]) {\n        rotate([0, 0, i * 360/segment_count])\n            translate([0, 0, -fruit_d/2])\n                // Thin wedge to create segment lines\n                difference() {\n                    cylinder(h = fruit_d, d = fruit_d + 2, $fn = 64);\n                    rotate([0, 0, -1]) \n                        cylinder(h = fruit_d + 2, d = fruit_d + 2, $fn = 64);\n                }\n    }\n}\n\n// Surface texture - small dimples\nmodule surface_texture() {\n    // Create random-looking pattern using golden ratio\n    for(i = [0:60]) {\n        angle = i * 137.5;  // Golden angle\n        radius = 0.4 * fruit_d * sqrt(i/60);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, 0])\n                rotate([90, 0, 0])\n                    // Small spherical dimples\n                    translate([0, 0, -fruit_d/2 - texture_depth])\n                        sphere(d = 2.5, $fn = 16);\n    }\n}\n\n// Stem attachment point with slight indentation\nmodule stem_base() {\n    difference() {\n        // Raised collar around stem\n        translate([0, 0, fruit_d/2 * 0.9])\n            cylinder(h = 2, d1 = 6, d2 = 4, $fn = 32);\n        \n        // Indentation for stem\n        translate([0, 0, fruit_d/2 * 0.9 + 2])\n            cylinder(h = 2, d = stem_d + 1, $fn = 32);\n    }\n}\n\n// Actual stem\nmodule stem() {\n    translate([0, 0, fruit_d/2 * 0.9 + 2])\n        cylinder(h = stem_h, d = stem_d, $fn = 16);\n}\n\n// Calyx (star-shaped leaf base)\nmodule calyx() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60 + 30])\n            translate([0, 2.5, fruit_d/2 * 0.9 + 1])\n                rotate([45, 0, 0])\n                    scale([0.3, 1, 0.1])\n                        sphere(d = 5, $fn = 8);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Basic fruit structure\n        fruit_body();\n        \n        // Add peel segments as raised lines\n        peel_segments();\n        \n        // Stem base and stem\n        stem_base();\n        stem();\n        \n        // Calyx around stem\n        calyx();\n    }\n    \n    // Surface texture - subtract dimples\n    surface_texture();\n}",
    "renders": true
  },
  {
    "fruit": "mandelo",
    "openscad_code": "// MANDELO – a medium-complexity, realistic mandarin-grapefruit hybrid\n// Overall size ≈ 70 mm tall, 64 mm wide; wall 2 mm; fully 3-D printable\n\n$fn = 50;           // smooth curves for printing\n\n// ---------- PARAMETERS ----------\nr_major = 32;       // equatorial radius (mm)\nr_minor = 28;       // polar radius – slightly flattened\nwall    = 2;        // peel thickness\nstem_h  = 6;        // stem height\nstem_r  = 3.5;      // stem radius\nseg     = 10;       // number of juice vesicles per segment\nseg_cnt = 12;       // total segment count\npith_t  = 1.5;      // white pith thickness inside peel\n\n// ---------- MAIN PEEL ----------\nmodule peel() {\n    difference() {\n        // outer orange peel\n        scale([1, 1, r_minor/r_major])\n            sphere(r = r_major);\n\n        // hollow interior\n        scale([(r_major-wall)/r_major,\n               (r_major-wall)/r_major,\n               (r_minor-wall)/r_major])\n            sphere(r = r_major);\n    }\n}\n\n// ---------- STEM ----------\nmodule stem() {\n    translate([0, 0, r_minor + stem_h/2])\n        cylinder(h = stem_h, r1 = stem_r, r2 = stem_r*0.7, center = true);\n}\n\n// ---------- PITH LINING ----------\nmodule pith() {\n    color(\"lemonchiffon\")\n    difference() {\n        scale([(r_major-wall)/r_major,\n               (r_major-wall)/r_major,\n               (r_minor-wall)/r_major])\n            sphere(r = r_major);\n\n        scale([(r_major-wall-pith_t)/r_major,\n               (r_major-wall-pith_t)/r_major,\n               (r_minor-wall-pith_t)/r_major])\n            sphere(r = r_major);\n    }\n}\n\n// ---------- JUICE VESICLES ----------\nmodule vesicle() {\n    // small teardrop-shaped vesicle\n    scale([1, 0.6, 0.4])\n        sphere(r = 2.5);\n}\n\nmodule segment_vesicles(a) {\n    // place vesicles along one radial segment\n    for (i = [0:seg-1])\n        rotate([0, 0, a])\n            translate([r_major - wall - pith_t - 3, 0, 0])\n                rotate([0, 90, 0])\n                    translate([0, 0, -r_major/2 + i*5])\n                        vesicle();\n}\n\n// ---------- FRUIT FLESH ----------\nmodule flesh() {\n    color(\"orangered\")\n    difference() {\n        scale([(r_major-wall-pith_t)/r_major,\n               (r_major-wall-pith_t)/r_major,\n               (r_minor-wall-pith_t)/r_major])\n            sphere(r = r_major);\n\n        // radial segment cuts\n        for (i = [0:seg_cnt-1])\n            rotate([0, 0, i*360/seg_cnt])\n                translate([0, -r_major, 0])\n                    cube([r_major*2, r_major*2, r_minor*2], center = true);\n    }\n\n    // add vesicles to each segment\n    for (i = [0:seg_cnt-1])\n        segment_vesicles(i*360/seg_cnt);\n}\n\n// ---------- ASSEMBLY ----------\npeel();\nstem();\ntranslate([0, 0, 0])\n    pith();\ntranslate([0, 0, 0])\n    flesh();",
    "renders": true
  },
  {
    "fruit": "tangelolo",
    "openscad_code": "// Tangelolo - Realistic Style, Medium Complexity\n// Based on a cross between tangerine and pomelo\n// Printable at ~75mm diameter\n\n$fn = 64;\n\nmodule tangelolo_body() {\n    // Main body - slightly flattened sphere\n    translate([0, 0, 36])\n    scale([1, 1, 0.85])\n    sphere(36);\n    \n    // Bottom flattening for printability\n    translate([0, 0, 0])\n    cube([72, 72, 2], center = true);\n}\n\nmodule navel() {\n    // Small navel at top\n    translate([0, 0, 66])\n    cylinder(h = 5, r1 = 6, r2 = 4);\n}\n\nmodule segment_lines() {\n    // Create subtle segment lines on surface\n    for (i = [0:12]) {\n        rotate([0, 0, i * 30])\n        translate([0, -2, 36])\n        rotate_extrude(angle = 30)\n        translate([36 - 0.5, 0, 0])\n        square([1, 1]);\n    }\n}\n\nmodule peel_texture() {\n    // Small pores across surface\n    for (a = [0:30:150]) {\n        for (b = [0:30:330]) {\n            rotate([a, b, 0])\n            translate([0, 36, 36])\n            rotate([90, 0, 0])\n            cylinder(h = 0.5, r = 0.3);\n        }\n    }\n}\n\nmodule stem() {\n    // Small stem remnant\n    translate([0, 0, 69])\n    rotate([0, 0, 0])\n    cylinder(h = 4, r1 = 2.5, r2 = 2);\n}\n\nmodule leaf() {\n    // Simple leaf attached to stem\n    translate([4, 0, 71])\n    rotate([0, 110, 0])\n    scale([1, 0.5, 0.1])\n    sphere(6);\n}\n\nmodule dimple() {\n    // Characteristic tangelolo dimple at top\n    translate([0, 0, 66])\n    sphere(8);\n}\n\n// Main assembly\nunion() {\n    difference() {\n        tangelolo_body();\n        // Remove dimple from top\n        translate([0, 0, 66])\n        sphere(8);\n    }\n    \n    navel();\n    stem();\n    leaf();\n    \n    // Add subtle surface details\n    translate([0, 0, 36])\n    scale([1, 1, 0.85])\n    segment_lines();\n    \n    peel_texture();\n}",
    "renders": true
  },
  {
    "fruit": "sourorange",
    "openscad_code": "// Sour Orange (Citrus aurantium) – medium-complexity realistic model\n// ~70 mm diameter, printable solid with 2 mm wall thickness\n\nmodule sourorange() {\n    $fn = 60;               // global segment resolution\n\n    // main fruit body\n    difference() {\n        sphere(d = 70);     // 70 mm Ø\n        // cavity for hollow shell\n        sphere(d = 66);\n    }\n\n    // slightly flattened top & bottom for realism\n    difference() {\n        children(0);\n        translate([0, 0,  35]) cube([80, 80,  8], center = true);\n        translate([0, 0, -35]) cube([80, 80,  8], center = true);\n    }\n\n    // surface pores (oil glands)\n    for(a = [0:15:165]) {\n        rotate([0, 0, a]) {\n            for(e = [15:15:165]) {\n                rotate([e, 0, 0]) {\n                    translate([0, 0, 35]) {\n                        // tiny dimples\n                        difference() {\n                            sphere(d = 2.2);\n                            sphere(d = 3.0);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // calyx (top green collar)\n    translate([0, 0, 34.5]) {\n        color(\"green\") {\n            cylinder(h = 5, d1 = 12, d2 = 10, $fn = 20);\n        }\n    }\n\n    // stem stub\n    translate([0, 0, 39.5]) {\n        color(\"darkolivegreen\") {\n            cylinder(h = 2.5, d = 4, $fn = 12);\n        }\n    }\n\n    // stylized blossom scar (bottom)\n    translate([0, 0, -34.5]) {\n        color(\"darkgreen\") {\n            difference() {\n                cylinder(h = 1, d = 8, $fn = 20);\n                cylinder(h = 1.2, d = 4, $fn = 20);\n            }\n        }\n    }\n\n    // subtle equatorial bulge for realism\n    scale([1.02, 1.02, 1.0]) {\n        intersection() {\n            sphere(d = 70);\n            cube([74, 74, 20], center = true);\n        }\n    }\n}\n\n// render the model\nsourorange();",
    "renders": true
  },
  {
    "fruit": "sweetlime",
    "openscad_code": "// Sweetlime (Citrus limetta) – medium-complexity, 3-D printable\n// Overall height ≈ 60 mm, max Ø ≈ 55 mm\n\n$fn = 50;                // global smoothness\nwall = 1.2;              // printable shell thickness\n\n// Main fruit body ----------------------------------------------------------\nmodule fruit_body(){\n    difference(){\n        // outer peel (slightly flattened sphere)\n        scale([1, 1, 0.9])\n        sphere(d = 55);\n\n        // hollow interior\n        scale([1, 1, 0.9])\n        sphere(d = 55 - 2*wall);\n    }\n}\n\n// Peel texture – small dimples in staggered rows ---------------------------\nmodule peel_dimples(){\n    rows   = 12;               // number of latitude rows\n    cols(r) = max(8, floor(24 * r/27)); // columns scale with radius\n    \n    for (row = [0:rows-1]){\n        theta = 90 - row * 180/rows;          // -90 … +90 degrees\n        r     = 27 * cos(theta);              // radius of that latitude\n        y     = 27 * sin(theta);\n\n        for (col = [0:cols(r)-1]){\n            phi = col * 360/cols(r) + (row%2)*180/cols(r); // stagger\n            translate([r*cos(phi), y, r*sin(phi)])\n            rotate([0, theta, 0])\n            rotate([0, 0, phi])\n            // shallow spherical dent\n            difference(){\n                sphere(d = 2.5);\n                translate([0,0,-1]) sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Calyx (top “button”) ------------------------------------------------------\nmodule calyx(){\n    difference(){\n        // raised ring\n        cylinder(h = 2.5, d1 = 9, d2 = 7, center = false);\n        // central hole\n        translate([0,0,-0.1]) cylinder(h = 3, d = 3);\n    }\n}\n\n// Navel / blossom scar at bottom -------------------------------------------\nmodule navel(){\n    difference(){\n        cylinder(h = 1.5, d = 6);\n        translate([0,0,-0.1]) cylinder(h = 2, d = 3);\n    }\n}\n\n// Optional segment suggestion (only outside, printable) --------------------\nmodule segment_lines(){\n    n = 10;                    // typical 8-12 segments\n    for (i = [0:n-1]){\n        rotate([0, 0, i*360/n])\n        translate([0, 27.5-wall/2, 0])\n        cube([wall, 55, 0.6], center = true);\n    }\n}\n\n// Assembly ------------------------------------------------------------------\nunion(){\n    fruit_body();\n    \n    // apply peel texture by subtraction\n    difference(){\n        sphere(d = 55);\n        peel_dimples();\n    }\n    \n    // top calyx\n    translate([0, 0, 27*0.9 + 1])\n    calyx();\n    \n    // bottom navel\n    translate([0, 0, -27*0.9])\n    navel();\n    \n    // faint segment ridges\n    segment_lines();\n}",
    "renders": true
  },
  {
    "fruit": "persianlime",
    "openscad_code": "// Persian Lime - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main lime body\nmodule lime_body() {\n    // Slight oval shape more characteristic of Persian lime\n    scale([1, 1.1, 0.9]) \n    sphere(d = 60);\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 27])\n    rotate([0, 0, 0])\n    cylinder(h = 5, d1 = 8, d2 = 6);\n}\n\n// Calyx (green leafy part at stem)\nmodule calyx() {\n    translate([0, 0, 30])\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        rotate([30, 0, 0])\n        scale([0.3, 1, 0.1])\n        sphere(d = 12);\n    }\n}\n\n// Surface texture - small dimples\nmodule surface_dimples() {\n    difference() {\n        lime_body();\n        // Create realistic dimple pattern\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n            for(j = [0:5]) {\n                rotate([j * 30, 0, 0])\n                translate([28, 0, 0])\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Optional cut section to show interior\nmodule lime_half() {\n    difference() {\n        union() {\n            surface_dimples();\n            stem_base();\n            calyx();\n        }\n        // Cut at slight angle like real lime\n        translate([0, 0, -5])\n        rotate([0, 10, 0])\n        cube([100, 100, 100], center = true);\n    }\n}\n\n// Hollow shell for 3D printing\nmodule hollow_lime() {\n    difference() {\n        union() {\n            surface_dimples();\n            stem_base();\n            calyx();\n        }\n        // Interior hollow with 2mm walls\n        scale([0.93, 0.93, 0.93])\n        lime_body();\n    }\n}\n\n// Create the complete lime\nhollow_lime();",
    "renders": true
  },
  {
    "fruit": "etrog",
    "openscad_code": "// Etrog (citron fruit) with realistic medium complexity\n// Designed for 3D printing - no overhangs >45 degrees\n\n// Main parameters\netrog_length = 80;\netrog_width = 50;\netrog_height = 40;\nwall_thickness = 2;\n\n// Stem parameters\nstem_length = 8;\nstem_diameter = 4;\n\n// Pitted surface parameters\npits = 40;\npit_radius = 1.5;\npit_depth = 1;\n\n// Knob parameters\nknob_size = 6;\n\n// Main body module\nmodule etrog_body() {\n    difference() {\n        // Main ellipsoid shape\n        scale([1, 0.8, 0.6])\n        sphere(d=etrog_length, $fn=60);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -etrog_length/3])\n        cube([etrog_width*1.2, etrog_width*1.2, etrog_length/3], center=true);\n    }\n}\n\n// Surface texture for realistic pitting\nmodule surface_pits() {\n    for(i = [0:pits-1]) {\n        rotate([rand(0,45), rand(0,360), rand(0,360)])\n        translate([\n            rand(-etrog_length/3, etrog_length/3),\n            rand(-etrog_width/3, etrog_width/3),\n            rand(-etrog_height/3, etrog_height/3)\n        ])\n        sphere(r=pit_radius, $fn=8);\n    }\n}\n\n// Stem module with natural curve\nmodule etrog_stem() {\n    translate([0, 0, etrog_height/2])\n    rotate([0, 90, 0])\n    union() {\n        // Main stem\n        cylinder(h=stem_length, d=stem_diameter, $fn=8);\n        \n        // Leafy part\n        translate([0, stem_length, 0])\n        rotate([0, 0, 45])\n        scale([0.3, 1, 0.1])\n        sphere(d=knob_size*2, $fn=6);\n    }\n}\n\n// Knobby end (pitom)\nmodule etrog_pitom() {\n    translate([0, -etrog_width/2 + 5, -etrog_height/4])\n    union() {\n        // Base knob\n        sphere(d=knob_size, $fn=10);\n        \n        // Extended tip\n        translate([0, -knob_size/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=knob_size, d=knob_size/1.5, $fn=6);\n    }\n}\n\n// Create wavy surface\nmodule wavy_surface() {\n    difference() {\n        union() {\n            // Main body\n            etrog_body();\n            \n            // Add slight bumps for realism\n            translate([etrog_length/4, 0, 0])\n            sphere(d=etrog_width/3, $fn=20);\n            \n            translate([-etrog_length/4, 0, 0])\n            sphere(d=etrog_width/3, $fn=20);\n        }\n        \n        // Carve out pits\n        surface_pits();\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit body\n    wavy_surface();\n    \n    // Stem\n    color(\"green\")\n    etrog_stem();\n    \n    // Pitom\n    color(\"brown\")\n    etrog_pitom();\n}",
    "renders": true
  },
  {
    "fruit": "kunquat",
    "openscad_code": "// Realistic 3D-printable Kunquat (medium complexity)\n// Approx 50 mm tall, no support needed\n\n$fn = 48;            // Smoothness for curved surfaces\n\n// Overall scale factor\nmodule kumquat() {\n    // Main body – slightly flattened sphere\n    translate([0,0,5])\n        scale([1, 1, 0.85])\n        sphere(d = 30);\n\n    // Top neck / stem base\n    translate([0,0,17])\n        cylinder(d1 = 8, d2 = 5, h = 5);\n\n    // Stem\n    translate([0,0,22])\n        rotate([5,0,0])\n        cylinder(d = 2.2, h = 12);\n}\n\n// Surface dimples (oil glands)\nmodule dimples() {\n    for(i = [0:35]) {\n        angle = i * 137.5;           // Phyllotaxis angle\n        elev = 70 + (i % 3) * 10;    // Vary elevation\n        translate(\n            spherical_to_xyz(15, elev, angle)\n        )\n        rotate([90 - elev, 0, -angle])\n        scale([1,1,0.5])\n        sphere(d = 2.5);\n    }\n}\n\n// Helper for spherical coordinates\nfunction spherical_to_xyz(r, elev, azim) =\n    [r * cos(elev) * cos(azim),\n     r * cos(elev) * sin(azim),\n     r * sin(elev)];\n\n// Leaf\nmodule leaf() {\n    translate([-10, -4, 23])\n        rotate([0, 30, -110])\n        scale([1, 0.4, 0.05])\n        sphere(d = 20);\n}\n\n// Union all parts\nunion() {\n    difference() {\n        kumquat();\n        dimples();\n    }\n    leaf();\n}",
    "renders": true
  },
  {
    "fruit": "watermelon",
    "openscad_code": "// Realistic 3D Printable Watermelon\n// Main body dimensions\nwatermelon_radius = 25;\nwatermelon_length = 70;\n\n// Shell thickness for 3D printing\nshell_thickness = 2;\n\n// Seed parameters\nseed_length = 5;\nseed_width = 2.5;\nseed_height = 1;\nseed_count = 12;\n\n// Color definitions\n$fs = 0.5;\n$fa = 2;\n\n// Main watermelon body - hollow for 3D printing\ndifference() {\n    // Outer green skin\n    color(\"darkgreen\") {\n        scale([1, 1, 1.2]) {\n            sphere(watermelon_radius);\n        }\n    }\n    \n    // Hollow inside\n    translate([0, 0, shell_thickness]) {\n        scale([1, 0.8, 1]) {\n            sphere(watermelon_radius - shell_thickness);\n        }\n    }\n}\n\n// White inner rind layer\ndifference() {\n    color(\"beige\") {\n        scale([0.9, 0.9, 1.1]) {\n            sphere(watermelon_radius - 1.5);\n        }\n    }\n    \n    // Hollow center\n    translate([0, 0, shell_thickness + 1]) {\n        scale([0.85, 0.75, 0.95]) {\n            sphere(watermelon_radius - shell_thickness - 2);\n        }\n    }\n}\n\n// Red flesh\ndifference() {\n    color(\"red\") {\n        scale([0.8, 0.8, 1]) {\n            sphere(watermelon_radius - 2.5);\n        }\n    }\n    \n    // Hollow center\n    translate([0, 0, shell_thickness + 2]) {\n        scale([0.75, 0.65, 0.9]) {\n            sphere(watermelon_radius - shell_thickness - 3);\n        }\n    }\n}\n\n// Module for creating a single seed\nmodule seed() {\n    color(\"darkbrown\") {\n        // Seed body\n        scale([1, 0.8, 0.3]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = seed_length, r1 = seed_width/2, r2 = seed_width/4, $fn = 8);\n            }\n        }\n    }\n}\n\n// Place seeds in spiral pattern inside watermelon\nfor(i = [0:seed_count-1]) {\n    angle = i * 360 / seed_count;\n    radius = (watermelon_radius - 8) * (0.6 + 0.2 * sin(i * 15));\n    height = (watermelon_radius - 5) * sin(angle * 2) * 0.3;\n    \n    translate([\n        radius * cos(angle),\n        radius * sin(angle),\n        height\n    ]) {\n        rotate([0, 0, angle + 90]) {\n            seed();\n        }\n    }\n}\n\n// Light green stripes on outer skin\nmodule stripe() {\n    color(\"green\") {\n        // Create raised stripe with proper overhang angles\n        difference() {\n            // Main stripe body\n            translate([0, 0, -watermelon_radius]) {\n                cylinder(h = watermelon_radius * 2.4, r = watermelon_radius + 0.5, $fn = 60);\n            }\n            \n            // Remove excess to create thin stripe\n            translate([0, 0, -watermelon_radius]) {\n                cylinder(h = watermelon_radius * 2.4, r = watermelon_radius - 0.5, $fn = 60);\n            }\n            \n            // Cut ends at watermelon surface\n            translate([0, 0, watermelon_radius]) {\n                sphere(watermelon_radius + 1);\n            }\n            translate([0, 0, -watermelon_radius]) {\n                sphere(watermelon_radius + 1);\n            }\n        }\n    }\n}\n\n// Create 6 stripes around watermelon\nfor(i = [0:5]) {\n    rotate([0, i * 30, 0]) {\n        stripe();\n    }\n}\n\n// Stem at top\ntranslate([0, 0, watermelon_radius * 1.2]) {\n    color(\"darkgreen\") {\n        rotate([90, 0, 0]) {\n            cylinder(h = 5, r1 = 3, r2 = 2, $fn = 8);\n        }\n    }\n}\n\n// Bottom flat surface for 3D printing stability\ntranslate([0, 0, -watermelon_radius]) {\n    difference() {\n        // Flat base\n        cylinder(h = 2, r = watermelon_radius * 0.9, $fn = 60);\n        \n        // Slight curve to match watermelon bottom\n        translate([0, 0, -1]) {\n            sphere(watermelon_radius * 0.9);\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "cantaloupe",
    "openscad_code": "// Cantaloupe - Realistic style, medium complexity\n// Size: ~70mm diameter\n\n$fn = 32;\n\n// Main melon body\nmodule melon_body() {\n    difference() {\n        // Base sphere with slight elongation\n        scale([1, 1, 0.95])\n        sphere(d = 70);\n        \n        // Stem cavity\n        translate([0, 0, 35])\n        cylinder(h = 8, d1 = 12, d2 = 8, $fn = 16);\n        \n        // Bottom flattening\n        translate([0, 0, -40])\n        cube([80, 80, 20], center = true);\n    }\n}\n\n// Surface texture segments\nmodule segments() {\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([0, 0, 30])\n        linear_extrude(height = 0.5, scale = 1.05)\n        offset(delta = -1.5)\n        circle(d = 70);\n    }\n}\n\n// Surface netting pattern\nmodule netting() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 30])\n        translate([0, 0, 34.5])\n        for (j = [0:8]) {\n            rotate([0, 0, j * 40])\n            translate([0, 32 - j * 4, 0])\n            scale([1, 0.3, 0.3])\n            sphere(d = 3);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 35])\n    rotate([90, 0, 0])\n    cylinder(h = 12, d1 = 8, d2 = 6, $fn = 12);\n}\n\n// Creases between segments\nmodule creases() {\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36 + 18])\n        translate([0, 0, 30])\n        linear_extrude(height = 1, scale = 0.98)\n        offset(delta = -2)\n        circle(d = 70);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base body with wall thickness\n    difference() {\n        melon_body();\n        scale([0.9, 0.9, 0.9])\n        translate([0, 0, -2])\n        melon_body();\n    }\n    \n    // Surface details\n    segments();\n    creases();\n    netting();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "honeydew",
    "openscad_code": "// Honeydew melon – medium-realistic OpenSCAD model\n// Approx 65 mm long, printable without supports\n\n$fn = 32;\n\nmodule melon_body() {\n    // Main ellipsoidal body\n    scale([1, 0.9, 1.1])\n    sphere(30);\n}\n\nmodule equatorial_rind_seam() {\n    // Slight raised seam that runs around the equator\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 1.4, r1 = 31, r2 = 31.4, center = true);\n        cylinder(h = 1.5, r1 = 29, r2 = 29, center = true);\n    }\n}\n\nmodule stem_end() {\n    // Small stem scar on top\n    translate([0, 0, 31.5])\n    rotate([0, 0, 0])\n    difference() {\n        cylinder(h = 3, r1 = 4.5, r2 = 3.2);\n        cylinder(h = 3.2, r1 = 2.8, r2 = 1.5);\n    }\n}\n\nmodule blossom_end() {\n    // Tiny blossom scar on bottom\n    translate([0, 0, -32])\n    rotate([180, 0, 0])\n    cylinder(h = 1.5, r1 = 2, r2 = 1);\n}\n\nmodule shallow_grooves() {\n    // 10 shallow longitudinal grooves for realism\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([0, 30.5, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 60, r1 = 1.8, r2 = 0.4);\n            translate([0, 0, -1])\n            cube([8, 2, 62], center = true);\n        }\n    }\n}\n\nmodule subtle_spots() {\n    // Random small bumps / speckles\n    spots = [\n        [12, 18,  5],\n        [-18, -10, 10],\n        [ 8, -20, -15],\n        [-25,  5,  20],\n        [ 5, 25, -10]\n    ];\n    for (p = spots) {\n        translate(p)\n        sphere(1.2);\n    }\n}\n\n// Build the complete honeydew\nunion() {\n    melon_body();\n    equatorial_rind_seam();\n    stem_end();\n    blossom_end();\n    shallow_grooves();\n    subtle_spots();\n}",
    "renders": true
  },
  {
    "fruit": "muskmelon",
    "openscad_code": "// Muskmelon OpenSCAD Model - Medium Complexity Realistic Style\n// Overall size ~80mm diameter, printable without supports\n\nmodule muskmelon() {\n    // Main body - slightly flattened sphere\n    translate([0, 0, -5])\n    scale([1, 1, 0.9])\n    sphere(r=40, $fn=64);\n    \n    // Surface texture - netting pattern\n    difference() {\n        union() {\n            // Main body\n            translate([0, 0, -5])\n            scale([1, 1, 0.9])\n            sphere(r=40, $fn=64);\n            \n            // Raised netting ridges\n            for(i = [0:15:360]) {\n                rotate([0, 0, i])\n                translate([0, 0, -5])\n                rotate_extrude(angle=360, $fn=128)\n                translate([40, 0, 0])\n                circle(r=1.5, $fn=8);\n            }\n            \n            for(i = [-60:15:60]) {\n                rotate([i, 0, 0])\n                translate([0, 0, -5])\n                rotate_extrude(angle=360, $fn=128)\n                translate([40, 0, 0])\n                circle(r=1.5, $fn=8);\n            }\n        }\n        \n        // Carve out netting valleys\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n            translate([0, 0, -5])\n            rotate_extrude(angle=360, $fn=128)\n            translate([40, 0, 0])\n            circle(r=2.5, $fn=8);\n        }\n        \n        for(i = [-60:15:60]) {\n            rotate([i, 0, 0])\n            translate([0, 0, -5])\n            rotate_extrude(angle=360, $fn=128)\n            translate([40, 0, 0])\n            circle(r=2.5, $fn=8);\n        }\n    }\n    \n    // Stem\n    translate([0, 0, 35])\n    cylinder(h=15, r1=6, r2=4, $fn=8);\n    \n    // Stem texture\n    rotate([0, 0, 45])\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([0, 0, 35])\n        linear_extrude(height=15, twist=30)\n        circle(r=0.5, $fn=8);\n    }\n    \n    // Bottom blossom scar\n    translate([0, 0, -40.5])\n    cylinder(h=1, r=8, $fn=32);\n    \n    // Surface segments - slight grooves\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, -5])\n        rotate_extrude(angle=2, $fn=2)\n        translate([40, 0, 0])\n        square([1, 5]);\n    }\n}\n\n// Render the muskmelon\nmuskmelon();",
    "renders": true
  },
  {
    "fruit": "pumpkin",
    "openscad_code": "// Realistic Medium-Complexity Pumpkin\n// Approx. 80 mm tall, 3 mm wall thickness, 3D-printable\n\n// Overall scale factor\nsf = 1;\n\nmodule pumpkin_body() {\n    difference() {\n        // Main pumpkin form: slightly flattened sphere with vertical stretch\n        scale([1, 1, 1.1])\n        sphere(d = 80 * sf, $fn = 120);\n\n        // Carve 16 vertical grooves for pumpkin ribs\n        for (i = [0:15]) {\n            rotate([0, 0, i * 360 / 16])\n            translate([40 * sf, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 90 * sf, r1 = 4 * sf, r2 = 0, $fn = 3);\n        }\n    }\n}\n\nmodule stem() {\n    translate([0, 0, 44 * sf]) {\n        // Stem base cylinder\n        cylinder(h = 18 * sf, r1 = 7 * sf, r2 = 5 * sf, $fn = 8);\n\n        // Bend stem slightly\n        rotate([10, 0, 0])\n        translate([0, 0, 18 * sf])\n        cylinder(h = 12 * sf, r1 = 5 * sf, r2 = 3 * sf, $fn = 8);\n    }\n}\n\nmodule leaf() {\n    difference() {\n        // Basic leaf shape\n        scale([1, 0.4, 0.1])\n        sphere(d = 20 * sf, $fn = 30);\n\n        // Central vein\n        translate([0, 0, -1 * sf])\n        scale([1, 0.05, 0.2])\n        sphere(d = 20 * sf, $fn = 30);\n    }\n}\n\nmodule vine() {\n    // Simple curly vine segment\n    for (a = [0:15:180]) {\n        rotate([0, 0, a])\n        translate([8 * sf + a / 3 * sf, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 2 * sf, r = 1 * sf, $fn = 6);\n    }\n}\n\nmodule pumpkin() {\n    union() {\n        pumpkin_body();\n        stem();\n        \n        // Attach two leaves near stem base\n        translate([0, 0, 42 * sf])\n        rotate([60, 0, 40]) leaf();\n        \n        translate([0, 0, 42 * sf])\n        rotate([60, 0, -50]) mirror([0, 1, 0]) leaf();\n        \n        // Attach small vine\n        translate([0, 0, 42 * sf])\n        rotate([0, 0, 120])\n        vine();\n    }\n}\n\n// Render the pumpkin\npumpkin();",
    "renders": true
  },
  {
    "fruit": "squash",
    "openscad_code": "// Realistic Squash - Medium Complexity\n// Designed for 3D printing without supports\n\n// Overall dimensions\nsquash_length = 80;\nsquash_width = 60;\nsquash_height = 70;\n\n// Main body with realistic bulbous shape\nmodule squash_body() {\n    // Base shape - slightly flattened sphere\n    scale([1, 0.9, 1.1])\n    sphere(d = squash_width, $fn = 64);\n    \n    // Add bulge for bottom\n    translate([0, 0, -squash_height/4])\n    scale([1.1, 1.1, 0.6])\n    sphere(d = squash_width * 0.8, $fn = 48);\n    \n    // Narrow the neck\n    difference() {\n        // Upper extension\n        translate([0, 0, squash_height/2])\n        scale([0.7, 0.7, 1.2])\n        sphere(d = squash_width * 0.6, $fn = 32);\n        \n        // Carve out neck\n        translate([0, 0, squash_height/2 + 10])\n        cylinder(h = 30, r1 = squash_width * 0.25, r2 = squash_width * 0.15, $fn = 32);\n    }\n}\n\n// Stem with realistic texture\nmodule stem() {\n    // Main stem\n    translate([0, 0, squash_height/2 + 5])\n    cylinder(h = 12, r1 = 6, r2 = 4, $fn = 8);\n    \n    // Stem base flare\n    translate([0, 0, squash_height/2])\n    cylinder(h = 5, r1 = 8, r2 = 6, $fn = 8);\n    \n    // Small stems\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([4, 0, squash_height/2 + 8])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r1 = 1.5, r2 = 0.5, $fn = 6);\n    }\n}\n\n// Surface ridges for realistic texture\nmodule ridges() {\n    // Vertical ridges along the body\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, -squash_width/2, 0])\n        rotate_extrude(angle = 30, $fn = 32)\n        translate([squash_width/2 - 2, 0, 0])\n        circle(r = 2, $fn = 8);\n    }\n    \n    // Horizontal banding\n    for(z = [-20:10:30]) {\n        translate([0, 0, z])\n        rotate_extrude(angle = 360, $fn = 64)\n        translate([squash_width/2 - 1, 0, 0])\n        circle(r = 1, $fn = 8);\n    }\n}\n\n// Bottom indentation\nmodule bottom_mark() {\n    translate([0, 0, -squash_height/2 + 5])\n    difference() {\n        sphere(d = 10, $fn = 32);\n        translate([0, 0, -5])\n        cube([20, 20, 10], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main squash body\n    squash_body();\n    \n    // Add surface details\n    ridges();\n    \n    // Stem on top\n    stem();\n    \n    // Bottom details\n    bottom_mark();\n}\n\n// Ensure flat bottom for printing\ntranslate([0, 0, -squash_height/2])\ncube([squash_width * 1.5, squash_width * 1.5, 0.2], center = true);",
    "renders": true
  },
  {
    "fruit": "zucchini",
    "openscad_code": "// Zucchini - Realistic Style - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\nmodule zucchini_body() {\n    // Main body - tapered cylinder with slight curve\n    hull() {\n        translate([0, 0, 5]) \n            scale([1, 1.2, 1]) \n                sphere(r=8);\n        translate([0, 2, 35]) \n            scale([0.8, 1, 1]) \n                sphere(r=7);\n        translate([0, 3, 65]) \n            scale([0.5, 0.7, 1]) \n                sphere(r=5);\n    }\n}\n\nmodule stem() {\n    // Stem at the top\n    translate([0, 0, 70]) {\n        rotate([0, 15, 0]) {\n            cylinder(h=8, r1=3, r2=2);\n        }\n    }\n}\n\nmodule ribs() {\n    // Vertical ridges along the body\n    for(i = [0:15]) {\n        rotate([0, 0, i * 360/16]) {\n            translate([7.5, -0.5, 35]) {\n                scale([1, 0.15, 1]) {\n                    cylinder(h=60, r1=1.5, r2=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule bottom_curve() {\n    // Rounded bottom\n    translate([0, 3, 0]) {\n        sphere(r=8);\n    }\n}\n\nmodule blossom_end() {\n    // Small indentation at the bottom\n    difference() {\n        bottom_curve();\n        translate([0, 3, -2]) {\n            sphere(r=7);\n        }\n    }\n}\n\nmodule surface_detail() {\n    // Small bumps for realistic texture\n    for(i = [0:20]) {\n        translate([\n            sin(i * 137.5) * (6 + i * 0.2),\n            cos(i * 137.5) * (6 + i * 0.2),\n            10 + i * 2.5\n        ]) {\n            sphere(r=0.3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core structure\n    union() {\n        zucchini_body();\n        stem();\n        blossom_end();\n    }\n    \n    // Surface details\n    ribs();\n    surface_detail();\n}",
    "renders": true
  },
  {
    "fruit": "butternut",
    "openscad_code": "// Realistic Butternut Squash – medium complexity, 3D-printable\n// Overall height ≈ 75 mm, max diameter ≈ 45 mm\n\n// Parameters\n$fn = 32;               // Global smoothness\nwall = 1.6;             // 3D-print wall thickness\nstem_h = 12;            // Stem height\nstem_r = 4;             // Stem radius\nbulb_major = 22;        // Largest bulb radius\nbulb_minor = 35;        // Largest bulb height\nneck_major = 8;         // Neck radius\nneck_minor = 30;        // Neck length\nsegments = 12;          // Vertical slices for bulb shaping\n\n// Utility: rounded cylinder with elliptical cross-section\nmodule ell_cylinder(h, rx, ry, twist = 0) {\n    linear_extrude(height = h, twist = twist, scale = [1, 1])\n        scale([rx, ry, 1])\n            circle(r = 1);\n}\n\n// Main bulbous body built as stacked ellipses\nmodule bulb_body() {\n    union() {\n        for (i = [0 : segments]) {\n            h = i * bulb_minor / segments;\n            taper = sin(90 * i / segments);          // 0→1 bulb profile\n            rx = bulb_major * taper;\n            ry = bulb_major * 0.8 * taper;           // Slightly oval\n            translate([0, 0, h])\n                ell_cylinder(\n                    bulb_minor / segments + 0.1,  // overlap for union\n                    rx, ry,\n                    twist = 10 * i / segments     // slight spiral\n                );\n        }\n    }\n}\n\n// Elongated neck\nmodule neck() {\n    translate([0, 0, bulb_minor])\n        ell_cylinder(neck_minor, neck_major, neck_major * 0.9, twist = 15);\n}\n\n// Stem emerging from neck top\nmodule stem() {\n    translate([0, 0, bulb_minor + neck_minor])\n        cylinder(h = stem_h, r1 = stem_r, r2 = stem_r * 0.7);\n}\n\n// Shallow grooves running lengthwise\nmodule grooves() {\n    difference() {\n        union() {\n            bulb_body();\n            neck();\n            stem();\n        }\n        for (a = [0 : 30 : 150]) {\n            rotate([0, 0, a])\n                translate([bulb_major * 0.9, 0, -5])\n                    cube([wall * 1.5, neck_major + 2, bulb_minor + neck_minor + stem_h + 10], center = true);\n        }\n    }\n}\n\n// Hollow out for 3D printing\nmodule hollow() {\n    difference() {\n        grooves();\n        translate([0, 0, -5])\n            ell_cylinder(bulb_minor + neck_minor + stem_h + 10,\n                         bulb_major - wall,\n                         (bulb_major - wall) * 0.8);\n    }\n}\n\n// Final assembly\nhollow();",
    "renders": true
  },
  {
    "fruit": "acorn",
    "openscad_code": "// Realistic 3D-printable acorn – medium complexity\n// Overall height ≈ 65 mm, max diameter ≈ 32 mm\n\n$fa = 2; $fs = 0.5;\n\n// Main body (nut)\nmodule acorn_body() {\n    difference() {\n        // Basic ellipsoid\n        scale([1, 1, 1.3]) sphere(d = 30);\n\n        // Flatten bottom slightly\n        translate([0, 0, -20])\n            cylinder(h = 10, d = 25, $fn = 48);\n\n        // Top indent for cup\n        translate([0, 0, 18])\n            sphere(d = 22);\n    }\n}\n\n// Cup (cap / involucre)\nmodule acorn_cup() {\n    difference() {\n        union() {\n            // Main cup shell\n            difference() {\n                cylinder(h = 18, d1 = 32, d2 = 20, $fn = 48);\n                cylinder(h = 20, d1 = 30, d2 = 18, $fn = 48);\n            }\n\n            // Rim lip for printability\n            translate([0, 0, 18])\n                cylinder(h = 2, d = 32, $fn = 48);\n        }\n\n        // Hollow interior\n        translate([0, 0, 1])\n            cylinder(h = 19, d1 = 28, d2 = 16, $fn = 48);\n    }\n}\n\n// Scales on cup\nmodule cup_scales() {\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([13.5, 0, 9])\n                rotate([0, 90, 0])\n                    scale([1, 0.6, 0.25])\n                        sphere(d = 6);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20])\n        rotate([0, 0, 5])\n            cylinder(h = 8, d1 = 3.5, d2 = 2, $fn = 12);\n}\n\n// Main assembly\nunion() {\n    color(\"SaddleBrown\") acorn_body();\n    color(\"DimGray\") {\n        acorn_cup();\n        cup_scales();\n    }\n    color(\"DarkOliveGreen\") stem();\n}",
    "renders": true
  },
  {
    "fruit": "kabocha",
    "openscad_code": "// Kabocha squash - realistic medium complexity\n// Overall size: ~80mm diameter\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main squash body\nmodule kabocha_body() {\n    difference() {\n        // Primary rounded squash shape\n        scale([1, 1.1, 0.85]) \n        sphere(d = 80);\n        \n        // Flatten bottom slightly for stable printing\n        translate([0, 0, -40])\n        cube([100, 100, 10], center = true);\n    }\n}\n\n// Deep ribbing characteristic of kabocha\nmodule ribs() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, -5])\n        scale([0.15, 1, 1.1])\n        difference() {\n            sphere(d = 82);\n            sphere(d = 78);\n        }\n    }\n}\n\n// Stem with realistic curvature\nmodule stem() {\n    color(\"darkgreen\")\n    translate([0, 0, 35])\n    rotate([15, 0, 0])\n    difference() {\n        // Main stem cylinder\n        cylinder(h = 18, d1 = 12, d2 = 8);\n        \n        // Hollow center for realism\n        translate([0, 0, 2])\n        cylinder(h = 16, d1 = 6, d2 = 4);\n    }\n    \n    // Stem base flare\n    translate([0, 0, 35])\n    scale([1.2, 1.2, 0.5])\n    cylinder(h = 4, d = 14);\n}\n\n// Surface bumps and imperfections\nmodule surface_detail() {\n    for (j = [0:11]) {\n        for (k = [0:5]) {\n            rotate([0, 0, j * 30])\n            translate([30 + k * 5, 0, sin(j * 30) * 10])\n            scale([1, 0.7, 0.5])\n            sphere(d = 2 + (j % 3));\n        }\n    }\n}\n\n// Assemble the kabocha\nunion() {\n    kabocha_body();\n    ribs();\n    stem();\n    surface_detail();\n}",
    "renders": true
  },
  {
    "fruit": "delicata",
    "openscad_code": "// Delicata squash - realistic medium complexity\n// Main body with longitudinal ridges and stem\n\nmodule delicata() {\n    // Parameters\n    overall_len = 80;\n    max_dia = 40;\n    wall_thk = 2;\n    ridges = 10;\n    ridge_depth = 2.5;\n    \n    // Main squash body - scaled sphere to create elongated oval\n    difference() {\n        scale([1, 1, 1.8]) sphere(d=max_dia, $fn=60);\n        \n        // Hollow interior for 3D printing\n        scale([1, 1, 1.8]) sphere(d=max_dia-wall_thk*2, $fn=60);\n    }\n    \n    // Create longitudinal ridges along body\n    for(i=[0:ridges-1]) {\n        rotate([0, 0, i*360/ridges]) {\n            translate([0, 0, -overall_len/2+5]) {\n                difference() {\n                    // Ridge protrusion\n                    scale([1, 0.15, 1]) \n                        cylinder(h=overall_len-10, d=max_dia+ridge_depth*2, $fn=3);\n                    \n                    // Remove excess beyond squash surface\n                    scale([1, 1, 1.8]) sphere(d=max_dia, $fn=60);\n                }\n            }\n        }\n    }\n    \n    // Stem at top\n    translate([0, 0, overall_len/2-5]) {\n        cylinder(h=8, d1=12, d2=8, $fn=20);\n    }\n    \n    // Tapered bottom end\n    translate([0, 0, -overall_len/2+5]) {\n        cylinder(h=10, d1=max_dia-8, d2=0, $fn=30);\n    }\n}\n\n// Render the delicata\ndelicata();",
    "renders": true
  },
  {
    "fruit": "spaghetti",
    "openscad_code": "// Realistic spaghetti noodle module\n// Scale: 1 unit = 1 mm\n// Total length: 80 mm\n// Diameter: 2 mm (standard spaghetti size)\n\n// Parameters\nspaghetti_length = 80;\nspaghetti_diameter = 2;\nsegments = 80; // Number of segments for smooth curve\nwave_amplitude = 4;\ntwist_frequency = 0.3;\n\n// Create realistic spaghetti noodle\nmodule realistic_spaghetti() {\n    // Main noodle body - built as series of connected cylinders\n    for (i = [0 : segments - 1]) {\n        // Calculate positions along the curve\n        t1 = i * 1.0 / segments;\n        t2 = (i + 1) * 1.0 / segments;\n        \n        // Create natural sag curve with slight wave\n        x1 = t1 * spaghetti_length;\n        y1 = sin(t1 * 4 * 3.14159) * wave_amplitude * (1 - t1);\n        z1 = -20 * t1 * (t1 - 1) + sin(t1 * 6 * 3.14159) * 2;\n        \n        x2 = t2 * spaghetti_length;\n        y2 = sin(t2 * 4 * 3.14159) * wave_amplitude * (1 - t2);\n        z2 = -20 * t2 * (t2 - 1) + sin(t2 * 6 * 3.14159) * 2;\n        \n        // Calculate segment vector\n        dx = x2 - x1;\n        dy = y2 - y1;\n        dz = z2 - z1;\n        length = sqrt(dx*dx + dy*dy + dz*dz);\n        \n        // Calculate rotation angles\n        angle_xy = atan2(dy, dx);\n        angle_z = atan2(dz, sqrt(dx*dx + dy*dy));\n        \n        // Create cylinder segment with slight twist\n        translate([x1, y1, z1]) {\n            rotate([0, -angle_z, 0]) {\n                rotate([0, 0, angle_xy]) {\n                    rotate([0, 0, t1 * 360 * twist_frequency]) {\n                        cylinder(\n                            h = length,\n                            r = spaghetti_diameter/2,\n                            $fn = 8\n                        );\n                    }\n                }\n            }\n        }\n    }\n    \n    // Add subtle surface texture - small bumps\n    for (i = [0 : 15]) {\n        t = i * 0.066;\n        x = t * spaghetti_length;\n        y = sin(t * 4 * 3.14159) * wave_amplitude * (1 - t);\n        z = -20 * t * (t - 1) + sin(t * 6 * 3.14159) * 2;\n        \n        translate([x, y, z + spaghetti_diameter/2]) {\n            sphere(r = 0.15, $fn = 6);\n        }\n    }\n    \n    // Tapered ends\n    // First end\n    translate([0, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 2, r1 = spaghetti_diameter/2, r2 = 0.3, $fn = 8);\n        }\n    }\n    \n    // Second end\n    translate([spaghetti_length, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 2, r1 = spaghetti_diameter/2, r2 = 0.3, $fn = 8);\n        }\n    }\n}\n\n// Create base for stability during printing\nmodule print_base() {\n    difference() {\n        // Flat base\n        translate([-5, -5, -1]) {\n            cube([90, 10, 1]);\n        }\n        \n        // Cutout for noodle\n        translate([40, 0, -1]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 10, r = spaghetti_diameter/2 + 0.2, $fn = 16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main spaghetti\n    realistic_spaghetti();\n    \n    // Optional base for printing stability\n    // Comment out to print just the noodle\n    // print_base();\n}",
    "renders": true
  },
  {
    "fruit": "hubbard",
    "openscad_code": "// Hubbard squash - realistic medium-complexity model\n// Overall height ≈ 70 mm, suitable for 3D printing\n\n$fn = 48;           // Smooth curves\nwall = 2;           // Safe wall thickness for printing\n\n// Main body: elongated sphere with slight taper\nmodule body() {\n    difference() {\n        scale([1, 0.9, 1.3])\n            sphere(d = 50);\n        // Flatten bottom slightly\n        translate([0, 0, -35])\n            cube([60, 60, 35], center = true);\n    }\n}\n\n// Stem attachment\nmodule stem_base() {\n    translate([0, 0, 30])\n        cylinder(h = 15, d1 = 12, d2 = 8);\n}\n\n// Curved stem\nmodule stem() {\n    translate([0, 0, 45])\n    rotate([0, 15, 0])\n    translate([0, 0, 7.5])\n        cylinder(h = 15, d = 6);\n}\n\n// Bulbous end of stem\nmodule stem_tip() {\n    translate([0, 3.9, 60])\n        sphere(d = 10);\n}\n\n// Shallow ribbing along length\nmodule ribs() {\n    for (i = [-25:5:25]) {\n        translate([0, 0, i])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 60, d = 51, center = true);\n                cylinder(h = 61, d = 49, center = true);\n            }\n    }\n}\n\n// Slight blossom end indentation\nmodule blossom_end() {\n    translate([0, 0, -30])\n        sphere(d = 15);\n}\n\n// Calyx scar (small circle)\nmodule scar() {\n    translate([0, 0, 35])\n        cylinder(h = 2, d = 10);\n}\n\n// Combine all parts\nunion() {\n    difference() {\n        union() {\n            body();\n            stem_base();\n            stem();\n            stem_tip();\n            ribs();\n        }\n        // Remove blossom_end to create indentation\n        blossom_end();\n    }\n    scar();\n}",
    "renders": true
  },
  {
    "fruit": "buttercup",
    "openscad_code": "$fa = 0.5;\n$fs = 0.5;\n\nmodule buttercup() {\n    // Stem\n    color(\"green\")\n    cylinder(h = 50, r = 2, center = true);\n    \n    // Sepals (green cup base)\n    color(\"green\")\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 6, 0])\n        rotate([0, 30, 0])\n        scale([1, 0.5, 0.7])\n        sphere(r = 3);\n    }\n    \n    // Main flower cup\n    color(\"yellow\")\n    difference() {\n        union() {\n            // Outer cup shape\n            scale([1, 1, 0.6])\n            sphere(r = 12);\n            \n            // Top rim detail\n            translate([0, 0, 6])\n            cylinder(h = 2, r1 = 12, r2 = 13);\n        }\n        \n        // Hollow out center\n        translate([0, 0, -5])\n        cylinder(h = 15, r = 8);\n    }\n    \n    // Petals\n    color(\"yellow\")\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 9, 2])\n        rotate([60, 0, 0])\n        scale([1.2, 0.8, 0.3])\n        sphere(r = 8);\n    }\n    \n    // Inner stamens\n    color(\"gold\")\n    for (i = [0:7]) {\n        rotate([0, 0, i * 51.4])\n        translate([0, 4, 7])\n        cylinder(h = 3, r = 0.8);\n    }\n    \n    // Central pistils\n    color(\"yellow\")\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 1, 7])\n        cylinder(h = 4, r = 0.5);\n    }\n}\n\n// Scale for 3D printing\nscale([0.8, 0.8, 0.8])\nbuttercup();",
    "renders": true
  },
  {
    "fruit": "turban",
    "openscad_code": "// Realistic Turban (medium complexity)\n// Approx 80 mm diameter, 35 mm height, printable without supports\n\nmodule turban_base() {\n    // Main wrapped cloth base - torus-like wrap\n    difference() {\n        rotate_extrude(angle = 360, $fn = 128)\n            translate([30, 0, 0])\n                circle(r = 8, $fn = 32);\n        // Hollow center for head\n        rotate_extrude(angle = 360, $fn = 128)\n            translate([20, 0, 0])\n                circle(r = 7, $fn = 32);\n    }\n}\n\nmodule cloth_layers() {\n    // Multiple overlapping cloth wraps\n    for (i = [0:5]) {\n        rotate([0, 0, i * 30])\n            translate([0, 0, i * 3])\n                scale([1 + i * 0.05, 1 + i * 0.05, 1])\n                    difference() {\n                        cylinder(h = 4, r1 = 32 - i, r2 = 30 - i, $fn = 64);\n                        cylinder(h = 5, r1 = 25 - i, r2 = 23 - i, $fn = 64);\n                    }\n    }\n}\n\nmodule top_knot() {\n    // Central knot detail on top\n    translate([0, 0, 30])\n        difference() {\n            sphere(d = 18, $fn = 32);\n            cylinder(h = 10, r = 6, $fn = 32);\n        }\n    \n    // Knot wrapping detail\n    for (j = [0:3]) {\n        rotate([0, 0, j * 90])\n            translate([0, 6, 30])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, r1 = 3, r2 = 2, $fn = 16);\n    }\n}\n\nmodule side_wrap() {\n    // Asymmetric side wrap detail\n    rotate([0, 0, 135])\n        for (k = [0:4]) {\n            translate([35 - k * 3, 0, 15 + k * 2])\n                rotate([0, 90, 0])\n                    scale([1, 1.2, 1])\n                        cylinder(h = 15 - k * 2, r = 3, $fn = 16);\n        }\n}\n\nmodule decorative_band() {\n    // Thin decorative band around base\n    rotate_extrude(angle = 360, $fn = 128)\n        translate([28, 0, 0])\n            square([1.5, 3]);\n}\n\n// Assembly\nunion() {\n    turban_base();\n    cloth_layers();\n    top_knot();\n    side_wrap();\n    decorative_band();\n}",
    "renders": true
  },
  {
    "fruit": "cavendish",
    "openscad_code": "// Cavendish banana - realistic style, medium complexity\n// Total height ~90mm, suitable for 3D printing\n\nmodule banana_body() {\n    difference() {\n        // Main curved body\n        rotate([0, -15, 0])\n        hull() {\n            translate([0, -5, 0]) sphere(d = 12, $fn = 32);\n            translate([0, 5, 0]) sphere(d = 12, $fn = 32);\n            translate([0, 0, 75]) sphere(d = 10, $fn = 32);\n        }\n        \n        // Carve curved shape\n        for(i = [0:5:70]) {\n            rotate([0, -i/3, 0])\n            translate([0, 0, i])\n            cylinder(h = 10, d1 = 16 - i/7, d2 = 14 - i/7, $fn = 32);\n        }\n    }\n}\n\nmodule stem() {\n    // Stem at top\n    translate([0, 0, 78])\n    rotate([0, -15, 0])\n    cylinder(h = 8, d1 = 6, d2 = 4, $fn = 16);\n    \n    // Stem base flare\n    translate([0, 0, 78])\n    rotate([0, -15, 0])\n    cylinder(h = 3, d1 = 8, d2 = 6, $fn = 16);\n}\n\nmodule natural_curves() {\n    // Gentle ridges along length\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([4, 0, 0])\n        scale([1, 0.8, 1])\n        hull() {\n            for(z = [0:10:70]) {\n                translate([0, 0, z])\n                sphere(d = 2.5, $fn = 12);\n            }\n        }\n    }\n}\n\nmodule bottom_tip() {\n    // Rounded bottom tip\n    translate([0, 0, -5])\n    sphere(d = 8, $fn = 32);\n}\n\nmodule surface_details() {\n    // Subtle surface imperfections\n    for(i = [10:15:70]) {\n        for(j = [0:30:330]) {\n            rotate([0, 0, j])\n            translate([rand(i*2)*3, 0, i])\n            sphere(d = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    banana_body();\n    stem();\n    natural_curves();\n    bottom_tip();\n    // surface_details(); // Optional texture\n}\n\n// Ensure manifold geometry\n$fn = 32;",
    "renders": true
  },
  {
    "fruit": "plantain",
    "openscad_code": "// Realistic 3D printable plantain model\n// Medium complexity, ~120 lines, no overhangs\n\n$fn = 50;\nplantain_length = 80;\nbase_d = 10;\ntip_d = 6;\nsegments = 12;\nskin_thickness = 1.2;\n\nmodule plantain_body() {\n    // Main curved body built from stacked ellipsoids\n    for (i = [0 : segments-1]) {\n        h = i / (segments - 1);\n        angle = -20 * sin(h * 180);  // gentle banana curve\n        \n        // Varying radius along length\n        r = base_d/2 * (1 - h * 0.5);\n        \n        translate([0, 0, h * plantain_length])\n        rotate([0, angle, 0])\n        scale([1, 0.8, 0.4])  // elliptical cross-section\n        sphere(r);\n    }\n}\n\nmodule peel_lines() {\n    // Subtle ridges running lengthwise\n    for (a = [0 : 30 : 150]) {\n        rotate([0, 0, a])\n        translate([base_d/2 * 0.85, 0, plantain_length/2])\n        scale([0.1, 0.1, plantain_length/2 + 2])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, d = 0.8);\n    }\n}\n\nmodule stem() {\n    // Thick stem at top\n    translate([0, 0, plantain_length + 1])\n    rotate([5, 0, 0])\n    cylinder(h = 8, d1 = 6, d2 = 4);\n    \n    // Stem collar\n    translate([0, 0, plantain_length])\n    cylinder(h = 2, d = 8);\n}\n\nmodule tip() {\n    // Tapered blackened tip\n    translate([0, 0, -2])\n    rotate([10, 0, 0])\n    cylinder(h = 5, d1 = tip_d, d2 = 0);\n    \n    color(\"black\")\n    translate([0, 0, -2.5])\n    sphere(d = tip_d + 1);\n}\n\nmodule flesh() {\n    // Inner edible part (slightly smaller)\n    scale([0.9, 0.9, 0.95])\n    plantain_body();\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Outer skin\n        plantain_body();\n        \n        // Surface details\n        peel_lines();\n        \n        // Stem and tip\n        stem();\n        tip();\n    }\n    \n    // Hollow out for 3D printing\n    flesh();\n}\n\n// Flat base for printing stability\ntranslate([0, 0, -5])\ncolor(\"darkgreen\")\ncylinder(h = 5, d = 15);",
    "renders": true
  },
  {
    "fruit": "redbanana",
    "openscad_code": "// Realistic Red Banana - 3D Printable\n// Medium complexity, built from primitives\n\n// Parameters\nscale_factor = 0.8;  // Adjust overall size\nlength = 90 * scale_factor;\nwidth = 30 * scale_factor;\nthickness = 25 * scale_factor;\nwall_thickness = 2;\nsegments = 36;\n\n// Main banana body module\nmodule banana_body() {\n    // Create curved banana shape using hull of spheres\n    hull() {\n        // Tip segment\n        translate([length*0.9, 0, 0])\n            scale([0.8, 0.6, 0.6])\n            sphere(d=width*0.8, $fn=segments);\n            \n        // Middle segments for curve\n        for(i=[0.6:0.1:0.9]) {\n            translate([length*i, -width*0.3*sin(i*3.14), 0])\n                sphere(d=width*(1-i*0.3), $fn=segments);\n        }\n        \n        // Stem end\n        translate([0, 0, 0])\n            sphere(d=width*1.1, $fn=segments);\n    }\n}\n\n// Banana peel segments\nmodule peel_segment(start_angle, end_angle, height) {\n    difference() {\n        // Main peel piece\n        rotate([0, 0, start_angle])\n            translate([0, width*0.5, 0])\n                cube([length*0.8, wall_thickness*3, height], center=true);\n        \n        // Taper the end\n        rotate([0, 0, start_angle])\n            translate([length*0.4, width*0.5, 0])\n                cube([length*0.5, wall_thickness*5, height*1.2], center=true);\n    }\n}\n\n// Surface details - banana ridges\nmodule ridges() {\n    for(i=[0:15:length-5]) {\n        translate([i, -width*0.25, 0])\n            rotate([0, 0, -10])\n                scale([0.3, 1, 0.1])\n                cylinder(h=width*0.5, d=thickness*0.3, $fn=8);\n    }\n}\n\n// Stem detail\nmodule stem() {\n    translate([-length*0.05, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=length*0.15, d=width*0.6, $fn=segments);\n    \n    // Stem cap\n    translate([-length*0.1, 0, 0])\n        sphere(d=width*0.7, $fn=segments);\n}\n\n// Main assembly\nunion() {\n    // Hollow banana body\n    difference() {\n        // Outer banana\n        color(\"crimson\")\n        scale([1, 1, 0.9])\n        banana_body();\n        \n        // Inner hollow\n        scale([0.85, 0.85, 0.75])\n        translate([0, 0, -wall_thickness])\n        banana_body();\n    }\n    \n    // Peel segments at top\n    for(angle=[-30, -10, 10, 30]) {\n        translate([length*0.1, 0, thickness*0.4])\n            rotate([90, 0, 0])\n                peel_segment(angle, angle+20, thickness*0.8);\n    }\n    \n    // Surface texture\n    ridges();\n    \n    // Stem\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "bluejava",
    "openscad_code": "$fn = 60;\n\n// Bluejava Banana parameters\nlength = 85;\nbase_dia = 18;\ntip_dia = 12;\n\n// Helper: banana cross-section\nmodule banana_slice(d, rot=0) {\n    rotate([0,0,rot])\n        scale([1, 0.9, 1])\n            circle(d=d);\n}\n\n// Main banana body\nmodule banana_body() {\n    hull() {\n        translate([0,0,0])\n            linear_extrude(height=3, center=true)\n                banana_slice(base_dia, 0);\n        translate([length*0.25, 0, 0])\n            linear_extrude(height=3, center=true)\n                banana_slice(base_dia*0.9, 5);\n        translate([length*0.5, 0, 0])\n            linear_extrude(height=3, center=true)\n                banana_slice(base_dia*0.8, 10);\n        translate([length*0.75, 0, 0])\n            linear_extrude(height=3, center=true)\n                banana_slice(base_dia*0.7, 15);\n        translate([length, 0, 0])\n            linear_extrude(height=3, center=true)\n                banana_slice(tip_dia, 20);\n    }\n}\n\n// Create curved banana by sweeping slices\nmodule banana_sweep() {\n    for (i=[0:9]) {\n        t = i/9;\n        ang = t * 20; // degrees of bend\n        translate([t*length*cos(ang), 0, t*length*sin(ang)])\n            rotate([0, -ang, 0])\n                scale([1 - t*0.3, 1 - t*0.3, 1 - t*0.3])\n                    banana_slice(base_dia * (1 - t*0.5));\n    }\n}\n\n// Smooth body from sweep\nmodule smooth_body() {\n    rotate([0,90,0])\n        linear_extrude(height = length, center = false, twist = 90, slices = 30)\n            scale([1, 0.9, 1])\n                circle(d = base_dia);\n\n    // Taper and bend\n    intersection() {\n        union() {\n            translate([0,0,0])\n                rotate([0,90,0])\n                    linear_extrude(height = length, center = false, twist = 90, slices = 30)\n                        scale([1, 0.9, 1])\n                            circle(d = base_dia);\n            translate([0,0,0])\n                rotate([0,90,0])\n                    linear_extrude(height = length, center = false, twist = 0, slices = 1)\n                        circle(d = base_dia);\n        }\n        // Bend mask\n        hull() {\n            translate([0, -base_dia, 0])\n                sphere(d=base_dia);\n            translate([length*cos(20), 0, length*sin(20)])\n                sphere(d=tip_dia);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([-5, 0, base_dia/2])\n        rotate([90,0,0])\n            cylinder(h = 8, d1 = 8, d2 = 6, $fn = 6);\n}\n\n// Peel segments\nmodule peel_segment(angle, offset) {\n    rotate([0, angle, 0])\n        translate([0, 0, offset])\n            linear_extrude(height = 3, center = true)\n                difference() {\n                    union() {\n                        translate([base_dia*0.5, 0, 0])\n                            circle(d = base_dia*0.5);\n                        translate([base_dia, 0, 0])\n                            circle(d = tip_dia*0.5);\n                    }\n                    translate([base_dia*0.5, 0, 0])\n                        circle(d = base_dia*0.3);\n                }\n}\n\n// Peel texture - subtle ridges\nmodule peel_texture() {\n    for (i=[0:3]) {\n        rotate([0, 0, i*90])\n            hull() {\n                peel_segment(5, base_dia*0.5);\n                peel_segment(-5, base_dia*0.5);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    color(\"cornflowerblue\")\n        difference() {\n            smooth_body();\n            // Hollow core\n            translate([0,0,0])\n                rotate([0,90,0])\n                    linear_extrude(height = length+5, center = false, twist = 90, slices = 30)\n                        scale([0.6, 0.6, 1])\n                            circle(d = base_dia*0.8);\n        }\n    color(\"darkblue\")\n        stem();\n    // Optional subtle peel lines\n    // peel_texture();\n}",
    "renders": true
  },
  {
    "fruit": "goldfinger",
    "openscad_code": "// Realistic Goldfinger - Medium Complexity\n// Approx 70mm tall, printable with no supports\n\n$fn = 32; // Smooth curves\n\nmodule finger_base() {\n    // Palm base\n    difference() {\n        cube([20, 35, 15], center=true);\n        translate([0, -15, 7]) {\n            sphere(9);\n        }\n    }\n    \n    // Thumb stub\n    translate([-12, -15, 0]) {\n        rotate([0, 0, -30]) {\n            cylinder(h=20, r1=6, r2=4);\n        }\n    }\n}\n\nmodule finger_segment(length, radius, taper=0.8) {\n    // Single finger segment with knuckle\n    cylinder(h=length, r1=radius, r2=radius*taper);\n    \n    // Knuckle joint\n    translate([0, 0, length/2]) {\n        sphere(r=radius*1.15);\n    }\n}\n\nmodule gold_finger() {\n    // Main palm\n    finger_base();\n    \n    // Finger segments\n    // Proximal phalanx\n    translate([0, 12, 5]) {\n        finger_segment(18, 5.5);\n        \n        // Middle phalanx\n        translate([0, 0, 18]) {\n            finger_segment(15, 4.5);\n            \n            // Distal phalanx\n            translate([0, 0, 15]) {\n                finger_segment(12, 3.5, 0.6);\n                \n                // Fingernail\n                translate([0, 1.5, 11]) {\n                    difference() {\n                        scale([1.2, 0.8, 0.3]) {\n                            sphere(3);\n                        }\n                        translate([0, -0.5, -0.1]) {\n                            cube([4, 2, 0.5], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Skin texture - subtle horizontal grooves\n    for(z = [5:4:35]) {\n        translate([0, 0, z]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=0.3, r=6.5);\n                    cylinder(h=0.4, r=5.8);\n                }\n            }\n        }\n    }\n    \n    // Side details\n    difference() {\n        // Main finger body\n        translate([0, 12, 0]) {\n            cube([11, 45, 9], center=true);\n        }\n        \n        // Hollow center for printability\n        translate([0, 12, 0]) {\n            cube([7, 41, 5], center=true);\n        }\n    }\n    \n    // Fingertip pad\n    translate([0, 12, 42]) {\n        sphere(3.5);\n    }\n}\n\n// Generate the goldfinger\ngold_finger();",
    "renders": true
  },
  {
    "fruit": "pisangraja",
    "openscad_code": "// Pisang Raja (realistic, medium complexity)\n// Banana cultivar with distinctive angular shape and slight curve\n\n// Main banana body\nmodule banana_body() {\n    // Create curved banana shape using hull of spheres\n    difference() {\n        union() {\n            // Generate curved spine of banana\n            for (i = [0:10]) {\n                translate([\n                    sin(i * 18) * 5,\n                    0,\n                    cos(i * 18) * 25 - 25\n                ])\n                rotate([0, i * 1.8, 0])\n                scale([1 - i * 0.05, 1 - i * 0.08, 1])\n                sphere(d = 18 - i);\n            }\n        }\n        \n        // Carve out hollow interior for printing\n        translate([0, 0, -25])\n        scale([0.7, 0.7, 0.9])\n        banana_body_solid();\n    }\n}\n\n// Solid version for carving\nmodule banana_body_solid() {\n    union() {\n        for (i = [0:10]) {\n            translate([\n                sin(i * 18) * 5,\n                0,\n                cos(i * 18) * 25 - 25\n            ])\n            rotate([0, i * 1.8, 0])\n            scale([1 - i * 0.05, 1 - i * 0.08, 1])\n            sphere(d = 18 - i);\n        }\n    }\n}\n\n// Banana tip\nmodule banana_tip() {\n    translate([5, 0, -48])\n    rotate([0, 10, 0])\n    scale([0.6, 0.6, 1.5])\n    cylinder(h = 8, d1 = 12, d2 = 0);\n}\n\n// Stem end\nmodule banana_stem() {\n    translate([-3, 0, 2])\n    rotate([0, -15, 0])\n    union() {\n        // Main stem\n        cylinder(h = 6, d = 8);\n        \n        // Stem collar\n        translate([0, 0, -1])\n        cylinder(h = 2, d = 12);\n    }\n}\n\n// Surface ridges for realistic texture\nmodule banana_ridges() {\n    difference() {\n        banana_body();\n        \n        // Create longitudinal ridges\n        for (angle = [0:30:150]) {\n            rotate([0, 0, angle])\n            translate([0, -20, -30])\n            cube([40, 2, 60]);\n        }\n    }\n}\n\n// Small blemishes for realism\nmodule banana_blemishes() {\n    // Random small spots\n    for (i = [1:20]) {\n        translate([\n            sin(i * 73) * 8,\n            cos(i * 73) * 3,\n            (i - 10) * 3\n        ])\n        sphere(d = 0.5 + i % 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main banana with ridges\n    banana_ridges();\n    \n    // Tip and stem\n    banana_tip();\n    banana_stem();\n    \n    // Surface details\n    color(\"darkolivegreen\")\n    banana_blemishes();\n}\n\n// Flat base for printing\ntranslate([-10, -10, -50])\ncube([20, 20, 1]);",
    "renders": true
  },
  {
    "fruit": "burro",
    "openscad_code": "$fa = 1;\n$fs = 1;\n\n// Overall scale\nburro_scale = 60;\n\n// Helper module for rounded cylinders\nmodule rounded_cylinder(h, r1, r2) {\n    cylinder(h=h, r1=r1, r2=r2, $fn=16);\n}\n\n// Helper module for ellipsoid\nmodule ellipsoid(rx, ry, rz) {\n    scale([rx, ry, rz]) sphere(1, $fn=32);\n}\n\n// Body of the burro\nmodule burro_body() {\n    // Main torso\n    translate([0, 0, 10]) \n    scale([1.2, 0.8, 1]) \n    ellipsoid(20, 15, 15);\n    \n    // Belly\n    translate([0, 0, 5]) \n    scale([1.1, 0.7, 0.6]) \n    ellipsoid(18, 12, 10);\n}\n\n// Head of the burro\nmodule burro_head() {\n    // Main head shape\n    translate([-22, 0, 20]) \n    rotate([0, 10, 0]) \n    scale([0.8, 0.7, 0.9]) \n    ellipsoid(15, 12, 14);\n    \n    // Muzzle\n    translate([-32, 0, 17]) \n    scale([0.6, 0.5, 0.5]) \n    ellipsoid(10, 8, 8);\n    \n    // Ears - left\n    translate([-20, 12, 28]) \n    rotate([-20, 0, -10]) \n    scale([0.3, 0.1, 1]) \n    rounded_cylinder(12, 3, 2);\n    \n    // Ears - right\n    translate([-20, -12, 28]) \n    rotate([-20, 0, 10]) \n    scale([0.3, 0.1, 1]) \n    rounded_cylinder(12, 3, 2);\n}\n\n// Legs module\nmodule burro_leg(x_pos, y_pos, z_rot) {\n    translate([x_pos, y_pos, 0]) \n    rotate([0, 0, z_rot]) {\n        // Upper leg\n        translate([0, 0, 8]) \n        rounded_cylinder(12, 4, 3.5);\n        \n        // Lower leg\n        translate([0, 0, 2]) \n        rounded_cylinder(10, 3.5, 3);\n        \n        // Hoof\n        translate([0, 0, -2]) \n        cylinder(h=4, r1=3.5, r2=2.5, $fn=16);\n    }\n}\n\n// Tail\nmodule burro_tail() {\n    translate([20, 0, 15]) \n    rotate([30, 0, 0]) {\n        // Tail base\n        rounded_cylinder(8, 3, 2);\n        \n        // Tail tuft\n        translate([0, 0, -8]) \n        scale([0.8, 0.8, 1.2]) \n        sphere(4, $fn=16);\n    }\n}\n\n// Mane\nmodule burro_mane() {\n    for(i = [-20:2:-12]) {\n        translate([i, 0, 28 + (i + 20)/2]) \n        rotate([90 + (i + 20)*2, 0, 0]) \n        scale([0.3, 0.3, 1]) \n        rounded_cylinder(6, 2, 1);\n    }\n}\n\n// Eyes\nmodule burro_eyes() {\n    // Left eye\n    translate([-30, 5, 22]) \n    scale([0.8, 0.5, 0.5]) \n    sphere(2, $fn=16);\n    \n    // Right eye\n    translate([-30, -5, 22]) \n    scale([0.8, 0.5, 0.5]) \n    sphere(2, $fn=16);\n}\n\n// Complete burro assembly\nscale(burro_scale/100) {\n    union() {\n        // Main body parts\n        burro_body();\n        burro_head();\n        \n        // Legs - front\n        burro_leg(-15, 10, 5);\n        burro_leg(-15, -10, -5);\n        \n        // Legs - back\n        burro_leg(15, 10, -5);\n        burro_leg(15, -10, 5);\n        \n        // Tail and mane\n        burro_tail();\n        burro_mane();\n        \n        // Eyes\n        color(\"black\") burro_eyes();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "manzano",
    "openscad_code": "// Realistic Manzano (Banana) - Medium Complexity\n// Dimensions: ~90mm long, ~25mm diameter\n\n$fn = 32;\n\nmodule manzano_banana() {\n    difference() {\n        // Main banana body - curved cylinder\n        union() {\n            // Base curved cylinder\n            rotate([0, 0, -20]) \n                hull() {\n                    for(i = [0:10:90]) {\n                        translate([\n                            35 * sin(i * 0.7) * cos(i * 0.3),\n                            35 * (cos(i * 0.7) - 1),\n                            i\n                        ]) {\n                            rotate([0, 90, 0])\n                                scale([0.9 + 0.2 * cos(i * 0.2), 1, 0.9 + 0.2 * cos(i * 0.2)])\n                                cylinder(h = 2, r = 12 - i * 0.08);\n                        }\n                    }\n                }\n            \n            // Stem at top\n            translate([-8, 0, 90]) \n                rotate([-10, 0, 0])\n                    cylinder(h = 15, r1 = 4, r2 = 3);\n        }\n        \n        // Remove internal hollow space\n        rotate([0, 0, -20]) \n            hull() {\n                for(i = [5:10:85]) {\n                    translate([\n                        35 * sin(i * 0.7) * cos(i * 0.3),\n                        35 * (cos(i * 0.7) - 1),\n                        i\n                    ]) {\n                        rotate([0, 90, 0])\n                            scale([0.9 + 0.2 * cos(i * 0.2), 1, 0.9 + 0.2 * cos(i * 0.2)])\n                            cylinder(h = 2, r = 10 - i * 0.08);\n                    }\n                }\n            }\n    }\n    \n    // Segmentation lines\n    for(angle = [0:30:150]) {\n        rotate([0, 0, -20]) {\n            hull() {\n                for(i = [10:5:80]) {\n                    translate([\n                        35 * sin(i * 0.7) * cos(i * 0.3) + 12 * cos(angle) * (0.9 + 0.2 * cos(i * 0.2)),\n                        35 * (cos(i * 0.7) - 1) + 12 * sin(angle) * (0.9 + 0.2 * cos(i * 0.2)),\n                        i\n                    ]) {\n                        sphere(0.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bottom tip detail\n    translate([28, -22, 0]) {\n        sphere(r = 5);\n        difference() {\n            sphere(r = 6);\n            translate([0, 0, -6])\n                cube([20, 20, 6], center = true);\n        }\n    }\n}\n\n// Generate the banana\nmanzano_banana();",
    "renders": true
  },
  {
    "fruit": "icecream",
    "openscad_code": "// Realistic Ice-Cream Cone – medium complexity\n// Designed for 3-D printing; no steep overhangs, 2 mm walls everywhere\n\n// Overall scale factor\nscale_factor = 0.35;\n\n// ---------- CONE ----------\nmodule cone() {\n    // Main cone body – built from stacked cylinders for printing\n    union() {\n        for (i = [0 : 5]) {\n            h = 1.5 * i;\n            r = 18 - 2.8 * h;\n            translate([0, 0, h])\n                cylinder(h = 1.5, r1 = r, r2 = r - 2.8, $fn = 48);\n        }\n    }\n    \n    // Waffle pattern – subtracted grooves\n    difference() {\n        children();\n        for (j = [0 : 15]) {\n            rotate([0, 0, j * 360 / 16])\n                translate([0, 0, -1])\n                    cube([2, 40, 25], center = true);\n        }\n    }\n}\n\n// ---------- ICE-CREAM SCOOP ----------\nmodule scoop() {\n    // Main sphere slightly flattened on bottom\n    scale([1, 1, 0.85])\n        sphere(d = 40, $fn = 64);\n    \n    // Melting drips\n    for (a = [30 : 60 : 330]) {\n        rotate([0, 0, a])\n            translate([0, 20, -10])\n                rotate([90, 0, 0])\n                    cylinder(h1 = 0, h = 8, r1 = 0, r2 = 3, $fn = 16);\n    }\n}\n\n// ---------- CHOCOLATE TOPPING ----------\nmodule topping() {\n    // Thin shell on top of scoop\n    difference() {\n        scale([1, 1, 0.15])\n            sphere(d = 40, $fn = 64);\n        scale([0.8, 0.8, 0.2])\n            sphere(d = 40, $fn = 64);\n    }\n}\n\n// ---------- SPRINKLES ----------\nmodule sprinkles() {\n    // Random small cylinders\n    for (i = [0 : 30]) {\n        angle = rands(0, 360, 1)[0];\n        rad = rands(8, 18, 1)[0];\n        translate([rad * cos(angle), rad * sin(angle), 5])\n            rotate([90, 0, angle])\n                cylinder(h = 2.5, r = 0.8, $fn = 8);\n    }\n}\n\n// ---------- ASSEMBLY ----------\nscale(scale_factor)\nunion() {\n    color(\"chocolate\") cone();\n    \n    translate([0, 0, 25])\n        color(\"snow\") scoop();\n    \n    translate([0, 0, 25 + 16])\n        color(\"brown\") topping();\n    \n    translate([0, 0, 25 + 18])\n        color(\"hotpink\") sprinkles();\n}",
    "renders": true
  },
  {
    "fruit": "ataulfo",
    "openscad_code": "// Ataulfo mango - medium complexity realistic style\n// Approx 80mm long, 3D printable with no overhangs\n\n$fn = 32;\n\nmodule mango_body() {\n    // Main body using stacked ellipsoids for realistic shape\n    hull() {\n        translate([0, 0, -30]) scale([1.2, 1, 1]) sphere(d=40);\n        translate([0, 0, -10]) scale([1.5, 1.2, 0.9]) sphere(d=40);\n        translate([0, 0, 10]) scale([1.8, 1.4, 0.8]) sphere(d=40);\n        translate([0, 0, 25]) scale([1.6, 1.3, 0.7]) sphere(d=35);\n        translate([0, 0, 35]) scale([1.2, 1, 0.5]) sphere(d=25);\n    }\n}\n\nmodule stem_attachment() {\n    // Small stem base at top\n    translate([0, 0, 40])\n    rotate([0, 0, 180])\n    cylinder(h=5, d1=8, d2=5);\n}\n\nmodule cheeks() {\n    // Subtle cheek bulges on sides\n    for(i = [-1, 1]) {\n        translate([i*15, 0, 5])\n        scale([0.6, 1.2, 1])\n        sphere(d=20);\n    }\n}\n\nmodule seed_shape() {\n    // Flattened oval seed inside for wall thickness\n    translate([0, 0, 0])\n    scale([1.4, 0.7, 0.3])\n    sphere(d=35);\n}\n\nmodule skin_texture() {\n    // Subtle surface indentations for realistic skin\n    for(a = [0:30:330]) {\n        rotate([0, 0, a])\n        translate([0, 20, 5])\n        scale([0.1, 0.1, 0.05])\n        sphere(d=5);\n    }\n    \n    for(a = [15:30:345]) {\n        rotate([0, 0, a])\n        translate([0, 15, -5])\n        scale([0.08, 0.08, 0.04])\n        sphere(d=4);\n    }\n}\n\n// Main model assembly\ndifference() {\n    union() {\n        // Main body with cheeks\n        union() {\n            mango_body();\n            cheeks();\n        }\n        \n        // Stem\n        stem_attachment();\n        \n        // Surface texture\n        skin_texture();\n    }\n    \n    // Hollow out for printing\n    scale([0.85, 0.85, 0.85])\n    mango_body();\n    \n    // Seed cavity\n    scale([1.1, 0.9, 0.5])\n    seed_shape();\n}\n\n// Flat base for printing\ntranslate([0, 0, -40])\ncylinder(h=1, d=50);",
    "renders": true
  },
  {
    "fruit": "kent",
    "openscad_code": "// Kent cigarette pack - realistic medium complexity\n// Overall dimensions: 85mm x 45mm x 20mm (standard pack size)\n\nmodule rounded_box(w, h, d, r) {\n    // Create a box with rounded edges\n    hull() {\n        translate([r, r, r]) sphere(r = r);\n        translate([w - r, r, r]) sphere(r = r);\n        translate([w - r, h - r, r]) sphere(r = r);\n        translate([r, h - r, r]) sphere(r = r);\n        translate([r, r, d - r]) sphere(r = r);\n        translate([w - r, r, d - r]) sphere(r = r);\n        translate([w - r, h - r, d - r]) sphere(r = r);\n        translate([r, h - r, d - r]) sphere(r = r);\n    }\n}\n\nmodule kent_pack() {\n    // Main pack body\n    difference() {\n        rounded_box(85, 45, 20, 3);\n        // Hollow out the center\n        translate([2, 2, 2]) rounded_box(81, 41, 18, 2);\n    }\n    \n    // Top foil opening\n    translate([10, 5, 19.5]) \n        cube([65, 35, 0.5]);\n    \n    // Front label base\n    color([0.95, 0.95, 0.95]) {\n        translate([0.5, 5, 19.8]) \n            cube([84, 35, 0.3]);\n    }\n    \n    // Kent logo area\n    color([0.9, 0.1, 0.1]) {\n        translate([10, 15, 20.2]) \n            cube([65, 15, 0.2]);\n    }\n    \n    // \"KENT\" text (simplified as raised blocks)\n    translate([25, 19, 20.4]) {\n        // K\n        cube([3, 10, 0.3]);\n        translate([0, 7, 0]) cube([5, 3, 0.3]);\n        translate([0, 0, 0]) cube([5, 3, 0.3]);\n        \n        // E\n        translate([8, 0, 0]) cube([3, 10, 0.3]);\n        translate([11, 0, 0]) cube([4, 3, 0.3]);\n        translate([11, 3.5, 0]) cube([3, 3, 0.3]);\n        translate([11, 7, 0]) cube([4, 3, 0.3]);\n        \n        // N\n        translate([18, 0, 0]) cube([3, 10, 0.3]);\n        translate([21, 0, 0]) cube([2, 10, 0.3]);\n        translate([23, 10, 0]) rotate([0, 0, -30]) cube([2, 12, 0.3]);\n        translate([26, 0, 0]) cube([3, 10, 0.3]);\n        \n        // T\n        translate([32, 0, 0]) cube([8, 3, 0.3]);\n        translate([34.5, 0, 0]) cube([3, 10, 0.3]);\n    }\n    \n    // Health warning box\n    color([1, 1, 0.8]) {\n        translate([5, 2, 19.8]) \n            cube([75, 10, 0.3]);\n    }\n    \n    // Side health warning text\n    translate([0.5, 2, 10]) rotate([0, 90, 0]) {\n        color([0.2, 0.2, 0.2]) \n            cube([18, 83, 0.2]);\n    }\n    \n    // Bottom seal\n    color([0.7, 0.7, 0.7]) {\n        translate([5, 0, 0.5]) \n            cube([75, 1, 19]);\n    }\n    \n    // Tax stamp on top\n    color([0.8, 0.8, 0.8]) {\n        translate([35, 0, 19.8]) \n            cube([15, 45, 0.3]);\n    }\n    \n    // Small ventilation holes pattern (simplified)\n    for(i = [0:4]) {\n        for(j = [0:1]) {\n            translate([12 + i*15, 30 + j*8, 20.4]) \n                cylinder(h = 0.3, r = 1, $fn = 8);\n        }\n    }\n}\n\n// Render the pack\nkent_pack();",
    "renders": true
  },
  {
    "fruit": "tommyatkins",
    "openscad_code": "// Tommy Atkins WW1 British Infantry Soldier\n// Medium complexity, realistic style\n\n$fn = 32;\nbody_height = 45;\nhead_size = 8;\nhelmet_size = 10;\nrifle_length = 25;\n\nmodule helmet() {\n    // Brodie helmet\n    difference() {\n        union() {\n            translate([0, 0, helmet_size/2])\n                sphere(d=helmet_size);\n            translate([0, 0, -helmet_size/3])\n                cylinder(h=helmet_size/2, d1=helmet_size*1.1, d2=helmet_size*1.2);\n        }\n        translate([0, 0, -helmet_size/4])\n            sphere(d=helmet_size*0.85);\n    }\n}\n\nmodule head() {\n    translate([0, 0, body_height/2 + head_size/2])\n    union() {\n        sphere(d=head_size);  // head\n        translate([0, 0, head_size/2])\n            helmet();\n    }\n}\n\nmodule torso() {\n    difference() {\n        // Main torso\n        translate([0, 0, 0])\n            cube([body_height/2.2, body_height/3, body_height/1.8], center=true);\n        \n        // Neck hole\n        translate([0, 0, body_height/1.8/2])\n            cylinder(h=3, d=head_size*0.8);\n    }\n}\n\nmodule arm(is_left=false) {\n    mult = is_left ? 1 : -1;\n    translate([mult*body_height/4.5, 0, body_height/6])\n    rotate([0, 0, is_left ? 15 : -15])\n    union() {\n        // Upper arm\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=body_height/3.5, d=body_height/8);\n        \n        // Lower arm\n        translate([0, body_height/3.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=body_height/4, d=body_height/10);\n        \n        // Hand with rifle\n        if (!is_left) {\n            translate([0, body_height/3.5 + body_height/4, 0])\n                sphere(d=body_height/12);\n        }\n    }\n}\n\nmodule leg(is_left=false) {\n    mult = is_left ? 1 : -1;\n    translate([mult*body_height/6, 0, -body_height/1.8/2 - body_height/6])\n    rotate([0, 0, is_left ? -5 : 5])\n    union() {\n        // Thigh\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=body_height/2.5, d=body_height/7);\n        \n        // Lower leg\n        translate([0, body_height/2.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=body_height/3, d=body_height/8);\n        \n        // Boot\n        translate([0, body_height/2.5 + body_height/3, 0])\n            cube([body_height/10, body_height/6, body_height/12], center=true);\n    }\n}\n\nmodule rifle() {\n    translate([body_height/2.5, -body_height/4, 0])\n    rotate([0, 90, 0])\n    union() {\n        // Stock\n        translate([0, 0, -rifle_length/2])\n            cube([rifle_length/15, rifle_length/6, rifle_length], center=true);\n        \n        // Barrel\n        translate([0, 0, -rifle_length/4])\n            cylinder(h=rifle_length*0.7, d=rifle_length/25);\n        \n        // Magazine\n        translate([0, -rifle_length/15, -rifle_length/2 + rifle_length/10])\n            cube([rifle_length/10, rifle_length/15, rifle_length/6]);\n    }\n}\n\nmodule equipment() {\n    // Web gear belt\n    translate([0, 0, -body_height/12])\n        cube([body_height/2, body_height/20, body_height/15], center=true);\n    \n    // Ammunition pouches\n    for(i = [-1:1]) {\n        translate([i*body_height/8, body_height/6, -body_height/10])\n            cube([body_height/12, body_height/15, body_height/10], center=true);\n    }\n    \n    // Backpack\n    translate([0, -body_height/5, 0])\n        cube([body_height/2.5, body_height/4, body_height/4], center=true);\n}\n\n// Assembly\nunion() {\n    head();\n    torso();\n    arm(true);    // Left arm\n    arm(false);   // Right arm\n    leg(true);    // Left leg\n    leg(false);   // Right leg\n    rifle();\n    equipment();\n}",
    "renders": true
  },
  {
    "fruit": "keitt",
    "openscad_code": "// Keitt mango in realistic style - medium complexity\n// Approximate size: 70mm length, 35mm width, 40mm height\n\n$fn = 32;\n\n// Main body parameters\nbody_length = 65;\nbody_width = 30;\nbody_height = 35;\nstem_length = 8;\nstem_diameter = 4;\n\n// Skin texture parameters\ntexture_depth = 0.3;\ntexture_spacing = 2.5;\n\nmodule mango_body() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 0.8, 0.9])\n        sphere(d=body_width);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -body_height/2 - 1])\n        cube([body_length, body_width*1.2, 2], center=true);\n    }\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, body_height/2 + stem_length/2])\n    cylinder(h=stem_length, d=stem_diameter, center=true);\n    \n    // Stem base flare\n    translate([0, 0, body_height/2])\n    cylinder(h=2, d1=stem_diameter*1.5, d2=stem_diameter);\n}\n\nmodule skin_texture() {\n    // Create realistic skin texture with small indentations\n    for (i = [0:5:180]) {\n        for (j = [0:10:360]) {\n            rotate([i, j, 0])\n            translate([0, 0, body_height/2 - 5])\n            rotate([90, 0, 0])\n            cylinder(h=texture_depth, d1=1.2, d2=0.6);\n        }\n    }\n}\n\nmodule cheek_bulge() {\n    // Create the characteristic mango cheek bulge\n    translate([body_length/4, body_width/4, 0])\n    scale([1.2, 1.1, 1])\n    sphere(d=body_width/2);\n}\n\nmodule seed_cavity() {\n    // Interior seed cavity (for realistic thickness)\n    translate([0, 0, 0])\n    scale([0.7, 0.5, 0.6])\n    sphere(d=body_width - 4);\n}\n\nmodule color_variation() {\n    // Subtle color variations with small bumps\n    for (a = [0:15:360]) {\n        rotate([0, 0, a])\n        translate([body_width/2 - 2, 0, 0])\n        sphere(d=1.2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core mango body\n    mango_body();\n    \n    // Add cheek bulge for realistic shape\n    cheek_bulge();\n    \n    // Add stem\n    stem();\n    \n    // Add skin texture\n    skin_texture();\n    \n    // Add color variation spots\n    color_variation();\n    \n    // Add slight asymmetry for realism\n    translate([2, -1, 1])\n    scale([1.05, 0.98, 1.02])\n    mango_body();\n}\n\n// Create hollow interior for 3D printing\ndifference() {\n    // Keep the main union\n    children();\n    \n    // Remove seed cavity\n    translate([0, 0, -2])\n    seed_cavity();\n    \n    // Add drainage hole at bottom\n    translate([0, 0, -body_height/2 - 1])\n    cylinder(h=3, d=4);\n}",
    "renders": true
  },
  {
    "fruit": "haden",
    "openscad_code": "// Realistic Haden (medium complexity)\n// Approx 70 mm tall, 3 mm walls, printable without supports\n// Head + neck + shoulders in relaxed pose\n\n$fn = 30;\n\nmodule head() {\n    // Main skull\n    difference() {\n        scale([0.9, 1.1, 1.05])\n        sphere(d = 28);\n        \n        // Eye sockets (left)\n        translate([-7, 12, 4])\n        rotate([0, 30, 0])\n        scale([1.2, 1, 1.2])\n        sphere(d = 7);\n        \n        // Eye sockets (right)\n        translate([7, 12, 4])\n        rotate([0, -30, 0])\n        scale([1.2, 1, 1.2])\n        sphere(d = 7);\n        \n        // Nasal cavity\n        translate([0, 11, -7])\n        rotate([30, 0, 0])\n        cube([6, 10, 8], center = true);\n        \n        // Mouth cavity\n        translate([0, 5, -12])\n        cube([12, 6, 8], center = true);\n    }\n    \n    // Jaw\n    difference() {\n        translate([0, -2, -20])\n        rotate([10, 0, 0])\n        cube([22, 18, 15], center = true);\n        \n        // Mouth hole\n        translate([0, 0, -26])\n        cube([18, 8, 12], center = true);\n    }\n    \n    // Ears (left)\n    translate([-14, 0, 0])\n    rotate([0, 10, 0])\n    scale([0.5, 0.3, 1])\n    cylinder(h = 10, d1 = 8, d2 = 6);\n    \n    // Ears (right)\n    translate([14, 0, 0])\n    rotate([0, -10, 0])\n    scale([0.5, 0.3, 1])\n    cylinder(h = 10, d1 = 8, d2 = 6);\n    \n    // Neck connector\n    translate([0, -5, -30])\n    cylinder(h = 15, d1 = 20, d2 = 15);\n}\n\nmodule neck() {\n    // Cylinder neck\n    cylinder(h = 25, d1 = 15, d2 = 22);\n    \n    // Thyroid cartilage (Adam's apple)\n    translate([0, -3, 8])\n    rotate([10, 0, 0])\n    scale([1.2, 0.6, 1])\n    sphere(d = 8);\n}\n\nmodule shoulders() {\n    // Collarbone area\n    translate([0, -5, -15])\n    cube([50, 20, 10], center = true);\n    \n    // Shoulder balls (left)\n    translate([-25, 0, -10])\n    sphere(d = 18);\n    \n    // Shoulder balls (right)\n    translate([25, 0, -10])\n    sphere(d = 18);\n    \n    // Upper chest curve\n    translate([0, 5, -10])\n    scale([1.2, 1, 0.8])\n    sphere(d = 30);\n}\n\n// Assembly\nunion() {\n    translate([0, 0, 25])\n    head();\n    \n    neck();\n    \n    translate([0, 0, -25])\n    shoulders();\n}",
    "renders": true
  },
  {
    "fruit": "alphonso",
    "openscad_code": "// Realistic Alphonso Mango (medium complexity)\n// Size: ~60mm tall, 3D-printable with 1.2 mm walls\n\n$fn = 36;  // smooth curves\n\n// Mango body (main shape)\nmodule mango_body() {\n    // Base ellipsoid\n    difference() {\n        scale([1, 1.3, 1.1]) \n            sphere(d = 50);\n        \n        // Flat bottom for printing\n        translate([0, 0, -25.5])\n            cube([60, 60, 10], center = true);\n    }\n}\n\n// Beak / nose tip\nmodule beak() {\n    rotate([0, 30, 0])\n    translate([22, 0, 5])\n    scale([1.8, 1.2, 1.8])\n        cylinder(h = 15, d1 = 6, d2 = 0);\n}\n\n// Cheek bulge on one side\nmodule cheek() {\n    translate([0, 18, -5])\n    scale([1.3, 0.7, 1.2])\n        sphere(d = 20);\n}\n\n// Stem cavity\nmodule stem_cavity() {\n    translate([0, 0, 26])\n    rotate([0, 0, 0])\n    cylinder(h = 10, d1 = 8, d2 = 10, $fn = 6);\n}\n\n// Crease down the front\nmodule crease() {\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    scale([0.15, 1, 1])\n    cylinder(h = 55, d = 50);\n}\n\n// Surface bumps for texture\nmodule surface_bumps() {\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n        translate([8 + 3*sin(a*2), 18*cos(a*2), 0])\n        sphere(d = 2.5);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main body and features\n    union() {\n        mango_body();\n        beak();\n        cheek();\n    }\n    \n    // Surface details\n    intersection() {\n        surface_bumps();\n        mango_body();\n    }\n}\n\n// Hollow out and add stem cavity\ndifference() {\n    // Previous union\n    children(0);\n    \n    // Hollow interior\n    scale([0.9, 0.9, 0.9])\n    mango_body();\n    \n    // Stem cavity\n    stem_cavity();\n    \n    // Crease\n    scale([1.1, 1, 1])\n    crease();\n}\n\n// Optional: small drainage hole in bottom\ntranslate([0, 0, -24])\ncylinder(h = 5, d = 3);",
    "renders": true
  },
  {
    "fruit": "dasheri",
    "openscad_code": "// Dasheri mango - medium complexity realistic style\n// Approx 65mm tall, 55mm wide, 60mm deep\n// Designed for 3D printing - no overhangs >45°\n\n$fn = 32; // Smooth curves\n\n// Main mango body\nmodule mango_body() {\n    // Base ellipsoid shape\n    scale([1, 0.9, 1.1])\n    sphere(30);\n    \n    // Add asymmetrical bulge on one side\n    translate([5, 15, -5])\n    scale([1.2, 1.3, 0.8])\n    sphere(15);\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 33])\n    cylinder(h=8, r1=6, r2=4);\n}\n\n// Stem with 3 segments\nmodule stem() {\n    translate([0, 0, 41])\n    rotate([0, 0, -10])\n    cylinder(h=12, r1=3, r2=2.5);\n    \n    translate([0, 0, 53])\n    rotate([0, 0, -15])\n    cylinder(h=10, r1=2.5, r2=2);\n    \n    translate([0, 0, 63])\n    rotate([0, 0, -20])\n    cylinder(h=8, r1=2, r2=1.5);\n}\n\n// Characteristic dasheri beak\nmodule beak() {\n    translate([0, -25, 5])\n    rotate([30, 0, 0])\n    scale([0.8, 1.2, 1])\n    cylinder(h=20, r1=8, r2=3);\n}\n\n// Surface indentations for realism\nmodule indentations() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([20, 0, 10])\n        scale([0.8, 1, 0.5])\n        sphere(5);\n    }\n    \n    // Additional indentations on bottom\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120 + 30])\n        translate([15, 0, -20])\n        scale([0.7, 1, 0.6])\n        sphere(4);\n    }\n}\n\n// Small blemishes for realism\nmodule blemishes() {\n    // Random small spots\n    translate([10, 20, 15])\n    sphere(1.5);\n    \n    translate([-15, 10, 8])\n    sphere(2);\n    \n    translate([5, -15, 12])\n    sphere(1.8);\n    \n    translate([-8, -18, -5])\n    sphere(1.5);\n}\n\n// Complete mango assembly\nunion() {\n    // Main body with indentations\n    difference() {\n        mango_body();\n        indentations();\n    }\n    \n    // Stem assembly\n    union() {\n        stem_base();\n        stem();\n    }\n    \n    // Beak\n    beak();\n    \n    // Surface details\n    blemishes();\n}",
    "renders": true
  },
  {
    "fruit": "chaunsa",
    "openscad_code": "// Chaunsa Mango - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 50; // Smooth curves for printing\nwall = 1.5; // Wall thickness for 3D printing\n\nmodule mango_body() {\n    // Main body - combination of spheres and cylinders\n    difference() {\n        // Outer shape - ellipsoid\n        scale([1, 0.8, 1.3]) \n            sphere(d=50);\n        \n        // Hollow out center\n        scale([1, 0.8, 1.3]) \n            sphere(d=50 - wall*2);\n    }\n}\n\nmodule stem_attachment() {\n    // Stem base - slightly raised\n    translate([0, 0, 32])\n        cylinder(h=3, d1=8, d2=6);\n    \n    // Main stem\n    translate([0, 0, 35])\n        cylinder(h=15, d=3);\n    \n    // Stem details - small branches\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([0, 2, 42])\n                rotate([30, 0, 0])\n                    cylinder(h=8, d=1.5);\n    }\n}\n\nmodule cheek_definition() {\n    // Subtle cheek bulges on sides\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 0])\n            scale([1, 1.2, 0.8])\n                sphere(d=15);\n    }\n}\n\nmodule tip_point() {\n    // Pointed tip at bottom\n    difference() {\n        translate([0, 0, -25])\n            cylinder(h=8, d1=8, d2=0);\n        \n        // Hollow tip\n        translate([0, 0, -25])\n            cylinder(h=8, d1=8-wall*2, d2=0);\n    }\n}\n\nmodule surface_texture() {\n    // Subtle ridges along the length\n    for(i = [0:22.5:180]) {\n        rotate([0, 0, i])\n            translate([0, 0, 0])\n                scale([1, 0.2, 1])\n                    rotate([0, 90, 0])\n                        cylinder(h=50, d=1);\n    }\n}\n\n// Combine all parts\nunion() {\n    mango_body();\n    \n    // Add cheek definition\n    translate([0, 0, 5])\n        cheek_definition();\n    \n    // Add surface texture\n    surface_texture();\n    \n    // Add tip\n    tip_point();\n    \n    // Add stem\n    stem_attachment();\n}\n\n// Ensure model sits flat on build plate\ntranslate([0, 0, 0])\n    rotate([0, 0, 0])\n        scale([1, 1, 1])\n            children();",
    "renders": true
  },
  {
    "fruit": "kensington",
    "openscad_code": "// Kensington lock slot - realistic style, medium complexity\n// Overall dimensions: 50mm x 15mm x 8mm\n\n// Main body of the slot\nmodule kensington_body() {\n    // Outer housing - rounded rectangle with chamfered edges\n    difference() {\n        // Main rounded block\n        minkowski() {\n            cube([50, 15, 8], center=true);\n            sphere(1.5);\n        }\n        \n        // Top chamfer\n        translate([0, 0, 4.5])\n            scale([1, 1, 0.5])\n                cube([52, 17, 2], center=true);\n        \n        // Bottom chamfer\n        translate([0, 0, -4.5])\n            scale([1, 1, 0.5])\n                cube([52, 17, 2], center=true);\n    }\n}\n\n// Slot opening - the actual kensington slot shape\nmodule slot_opening() {\n    // Main T-shaped slot\n    difference() {\n        // Outer slot\n        translate([0, -2, 0])\n            cube([20, 7, 4], center=true);\n        \n        // Inner rounded part\n        translate([0, 0, 0])\n            cube([15, 5, 4.5], center=true);\n        \n        // Keyhole curves\n        for(i = [-1, 1]) {\n            translate([i * 7.5, 0, 0])\n                cylinder(h=5, r=2.5, center=true);\n        }\n    }\n}\n\n// Mounting holes for screws\nmodule mounting_holes() {\n    for(pos = [[-20, 0], [20, 0]]) {\n        translate([pos[0], pos[1], 0])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=2.1, center=true, $fn=16);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 15, 0, 0])\n            difference() {\n                cube([2, 12, 6], center=true);\n                translate([0, 0, 3.5])\n                    cube([2.5, 12.5, 1], center=true);\n            }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Main body\n        kensington_body();\n        \n        // Reinforcement structure\n        ribs();\n    }\n    \n    // Slot opening\n    slot_opening();\n    \n    // Mounting holes\n    mounting_holes();\n    \n    // Cable clearance\n    translate([0, 8.5, 0])\n        rotate([0, 90, 0])\n            cylinder(h=20, r=4, center=true);\n}\n\n// Alignment markers for orientation\nmodule markers() {\n    for(i = [-1, 1]) {\n        translate([i * 25, 0, 4.5])\n            sphere(0.5);\n    }\n}\n\n// Add markers\n%markers();",
    "renders": true
  },
  {
    "fruit": "palmer",
    "openscad_code": "// Realistic medium-complexity palm tree (palmer)\n// Overall height ≈ 90 mm, printable without supports\n\n// Trunk parameters\ntrunk_h = 55;\ntrunk_r = 3.5;\n\n// Frond parameters\nnum_fronds = 7;\nfrond_len = 32;\nfrond_w = 5;\nfrond_t = 1.2;\n\n// Coconuts\ncoco_r = 4.5;\nnum_cocos = 4;\n\n// Base ring for stability\nbase_h = 3;\nbase_r = 7;\n\nmodule trunk_segment(h, r_top, r_bot) {\n    cylinder(h = h, r1 = r_bot, r2 = r_top, $fn = 24);\n}\n\nmodule trunk() {\n    // Slight taper for realism\n    union() {\n        trunk_segment(10, 3.5, 4);\n        translate([0, 0, 10])\n            trunk_segment(10, 3.3, 3.5);\n        translate([0, 0, 20])\n            trunk_segment(10, 3.1, 3.3);\n        translate([0, 0, 30])\n            trunk_segment(10, 2.9, 3.1);\n        translate([0, 0, 40])\n            trunk_segment(15, 2.7, 2.9);\n    }\n}\n\nmodule frond_segment(l, w, t, bend) {\n    hull() {\n        translate([0, 0, 0])\n            cube([t, w, t], center = true);\n        translate([l * 0.4, w * 0.3, -bend * 0.4])\n            scale([0.7, 0.7, 0.7])\n                cube([t * 1.2, w * 0.8, t], center = true);\n        translate([l, w * 0.1, -bend])\n            scale([0.4, 0.3, 0.3])\n                cube([t, w * 0.5, t], center = true);\n    }\n}\n\nmodule single_frond(len, wid, thick, angle, elev) {\n    translate([0, 0, elev])\n    rotate([0, 0, angle])\n    rotate([elev * 1.5, 0, 0]) // slight droop\n    frond_segment(len, wid, thick, len * 0.25);\n}\n\nmodule fronds() {\n    for (i = [0 : num_fronds - 1]) {\n        rotate([0, 0, i * 360 / num_fronds])\n            single_frond(frond_len, frond_w, frond_t, 0, trunk_h);\n    }\n}\n\nmodule coconut() {\n    sphere(r = coco_r, $fn = 16);\n}\n\nmodule coconuts() {\n    for (i = [0 : num_cocos - 1]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([0, 5, trunk_h - 5])\n            coconut();\n    }\n}\n\nmodule base() {\n    cylinder(h = base_h, r = base_r, $fn = 32);\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, base_h])\n        trunk();\n    translate([0, 0, base_h])\n        coconuts();\n    translate([0, 0, base_h])\n        fronds();\n}",
    "renders": true
  },
  {
    "fruit": "maradol",
    "openscad_code": "// Maradol papaya - realistic style, medium complexity\n// Overall height ~80 mm\n\n$fn = 36;               // Smooth curves\nwall = 1.6;             // 3D-print friendly wall thickness\nh = 80;                 // Total height\nr_top = 22;             // Top radius\nr_mid = 30;             // Widest radius\nr_bottom = 18;          // Stem-end radius\nsegments = 12;          // Vertical segments for lobes\n\n// Main fruit body with 5 vertical lobes\nmodule fruit_body() {\n    difference() {\n        // Overall ellipsoid shape\n        scale([1, 1, 1.2])\n        sphere(d = r_mid * 2);\n\n        // Carve 5 vertical grooves for lobes\n        for(i = [0 : segments - 1]) {\n            rotate([0, 0, i * 360 / segments])\n            translate([r_mid - 1, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = r_mid * 3, r1 = 5, r2 = 3, center = true);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, h / 2])\n    rotate([0, 0, 0])\n    cylinder(h = 12, r1 = 3, r2 = 2);\n}\n\n// Small stem leaves (3 pieces)\nmodule stem_leaves() {\n    for(i = [0 : 120 : 240]) {\n        rotate([0, 0, i])\n        translate([5, 0, h / 2 + 6])\n        rotate([30, 0, 0])\n        scale([1, 0.6, 0.1])\n        sphere(d = 8);\n    }\n}\n\n// Skin surface details: small bumps\nmodule skin_bumps() {\n    // Evenly distribute bumps on surface\n    for(lat = [-60 : 30 : 60]) {\n        for(lon = [0 : 30 : 330]) {\n            rotate([lat, 0, lon])\n            translate([r_mid - 0.6, 0, 0])\n            sphere(d = 1.2);\n        }\n    }\n}\n\n// Interior hollow cavity for printing economy\nmodule hollow_core() {\n    translate([0, 0, -8])\n    scale([0.7, 0.7, 0.7])\n    sphere(d = r_mid * 1.8);\n}\n\n// Bottom cavity for drainage\nmodule bottom_drain() {\n    translate([0, 0, -h / 2 + 3])\n    cylinder(h = 6, r1 = 6, r2 = 4, $fn = 6);\n}\n\n// Assemble the maradol\nunion() {\n    difference() {\n        union() {\n            fruit_body();\n            skin_bumps();\n        }\n        hollow_core();\n        bottom_drain();\n    }\n    stem();\n    stem_leaves();\n}",
    "renders": true
  },
  {
    "fruit": "solo",
    "openscad_code": "// OpenSCAD Solo Cup – realistic, medium complexity\n// Total height ≈ 85 mm, max diameter ≈ 55 mm (printable without support)\n\n// Wall thickness\nwall = 1.6;\n\n// Base module\nmodule cup_base() {\n    difference() {\n        // Solid frustum\n        cylinder(h = 5, r1 = 26, r2 = 28, $fn = 60);\n        // Drain hole\n        cylinder(h = 6, r = 3, $fn = 30);\n    }\n}\n\n// Tapered body\nmodule cup_body() {\n    difference() {\n        // Outer frustum\n        cylinder(h = 75, r1 = 28, r2 = 27.5, $fn = 60);\n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h = 75, r1 = 28 - wall, r2 = 27.5 - wall, $fn = 60);\n    }\n}\n\n// Rolled rim lip\nmodule rolled_rim() {\n    difference() {\n        // Torus-like ring\n        rotate_extrude($fn = 60)\n            translate([26.8, 0, 0])\n                circle(r = wall * 1.1, $fn = 20);\n        // Remove inner excess\n        rotate_extrude($fn = 60)\n            translate([25.5, 0, 0])\n                circle(r = wall * 0.9, $fn = 20);\n    }\n}\n\n// Stack ribs on the exterior\nmodule ribs() {\n    for (i = [5 : 5 : 70]) {\n        translate([0, 0, i])\n            difference() {\n                // Rib ring\n                cylinder(h = 1.2, r1 = 28.0, r2 = 27.5, $fn = 60);\n                // Cut back to wall\n                cylinder(h = 1.4, r1 = 26.8, r2 = 26.3, $fn = 60);\n            }\n    }\n}\n\n// Solo logo (simplified)\nmodule solo_logo() {\n    // Red diamond\n    color(\"red\")\n    translate([0, 29.2, 42])\n        rotate([90, 0, 0])\n            scale([1, 0.7, 1])\n                linear_extrude(height = 0.6)\n                    polygon(points = [[-4, -3], [4, -3], [0, 3]]);\n    // White \"SOLO\" text\n    color(\"white\")\n    translate([0, 29.2, 42.3])\n        rotate([90, 0, 0])\n            linear_extrude(height = 0.4) {\n                // S\n                translate([-3.8, 0, 0]) square([1.2, 0.8], center = true);\n                translate([-3.2, 0.4, 0]) square([0.6, 0.8], center = true);\n                translate([-3.8, -0.8, 0]) square([1.2, 0.8], center = true);\n                // O\n                translate([-2.2, 0, 0]) circle(r = 0.6, $fn = 16);\n                // L\n                translate([-0.9, -0.3, 0]) square([0.6, 1.2], center = true);\n                translate([-0.3, -0.9, 0]) square([1.2, 0.6], center = true);\n                // O\n                translate([0.9, 0, 0]) circle(r = 0.6, $fn = 16);\n            }\n}\n\n// Assemble the cup\nunion() {\n    cup_base();\n    translate([0, 0, 5]) cup_body();\n    translate([0, 0, 80]) rolled_rim();\n    ribs();\n    solo_logo();\n}",
    "renders": true
  },
  {
    "fruit": "sunrise",
    "openscad_code": "// Sunrise scene - 3D printable medium complexity\n// Dimensions: 80mm wide x 50mm deep x 40mm tall\n\nmodule sun() {\n    // Main sun sphere\n    translate([0, 0, 35])\n    sphere(d=25, $fn=64);\n    \n    // Sun rays\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n        translate([12.5, -1, 35])\n        cube([10, 2, 1]);\n    }\n}\n\nmodule clouds() {\n    // Cloud 1\n    translate([-25, 10, 30])\n    scale([1.5, 1, 0.8])\n    sphere(d=15, $fn=32);\n    \n    translate([-20, 12, 30])\n    sphere(d=12, $fn=32);\n    \n    translate([-30, 12, 30])\n    sphere(d=10, $fn=32);\n    \n    // Cloud 2\n    translate([20, 15, 25])\n    scale([1.3, 1, 0.7])\n    sphere(d=18, $fn=32);\n    \n    translate([15, 18, 25])\n    sphere(d=14, $fn=32);\n    \n    translate([25, 18, 25])\n    sphere(d=16, $fn=32);\n}\n\nmodule horizon() {\n    difference() {\n        // Base land\n        cube([80, 50, 10], center=true);\n        \n        // Cut bottom to create flat base\n        translate([0, 0, -6])\n        cube([82, 52, 10], center=true);\n    }\n}\n\nmodule mountains() {\n    // Mountain 1\n    translate([-30, 0, 5])\n    rotate([0, 0, 15])\n    cylinder(h1=20, h2=0, r1=15, r2=0, $fn=3);\n    \n    // Mountain 2\n    translate([-10, 5, 5])\n    rotate([0, 0, -20])\n    cylinder(h1=15, h2=0, r1=12, r2=0, $fn=3);\n    \n    // Mountain 3\n    translate([15, -5, 5])\n    rotate([0, 0, 10])\n    cylinder(h1=18, h2=0, r1=14, r2=0, $fn=3);\n}\n\nmodule birds() {\n    // Bird 1\n    translate([-15, 20, 32])\n    rotate([0, 0, 20])\n    scale(0.5)\n    cube([8, 1, 2]);\n    \n    // Bird 2\n    translate([10, 25, 30])\n    rotate([0, 0, -15])\n    scale(0.4)\n    cube([6, 1, 1.5]);\n    \n    // Bird 3\n    translate([0, 22, 33])\n    rotate([0, 0, 5])\n    scale(0.45)\n    cube([7, 1, 1.8]);\n}\n\n// Main assembly\nunion() {\n    translate([0, 0, 5])\n    color(\"gold\") sun();\n    \n    color(\"white\") clouds();\n    \n    translate([0, 0, -5])\n    color(\"darkgreen\") mountains();\n    \n    color(\"darkgreen\") horizon();\n    \n    color(\"black\") birds();\n}",
    "renders": true
  },
  {
    "fruit": "sunset",
    "openscad_code": "// Sunset Scene - Realistic Style, Medium Complexity\n// Dimensions: ~70mm wide x 50mm tall x 20mm deep\n\n$fn = 50; // Smooth curves for realistic look\n\n// Base plate for 3D printing stability\nmodule base() {\n    difference() {\n        cube([70, 50, 5], center=true);\n        translate([0, 0, -2.5])\n            cube([66, 46, 5], center=true);\n    }\n}\n\n// Ocean surface with gentle waves\nmodule ocean() {\n    for(i = [-35:5:35]) {\n        translate([i, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r1=3, r2=2.8);\n    }\n    for(i = [-35:5:35]) {\n        translate([i+2.5, 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=0.7, r1=2.5, r2=2.3);\n    }\n}\n\n// Sun disk with realistic glow\nmodule sun() {\n    // Main sun body\n    translate([0, 15, 2])\n        sphere(r=12);\n    \n    // Sun rays using cylinders\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([15, 15, 2])\n                cylinder(h=1, r1=2, r2=0);\n    }\n}\n\n// Layered sky colors as horizontal planes\nmodule sky() {\n    // Dark blue top\n    translate([0, -5, 15])\n        color([0.1, 0.2, 0.4])\n            cube([80, 50, 0.5], center=true);\n    \n    // Orange middle\n    translate([0, -2, 10])\n        color([1, 0.5, 0.2])\n            cube([80, 50, 0.5], center=true);\n    \n    // Yellow-red near sun\n    translate([0, 10, 5])\n        color([1, 0.3, 0.1])\n            cube([80, 50, 0.5], center=true);\n}\n\n// Cloud silhouettes\nmodule clouds() {\n    // First cloud group\n    for(pos = [[-20, 20], [10, 25], [-10, 30]]) {\n        translate([pos[0], pos[1], 18])\n            scale([1, 0.5, 0.3])\n                sphere(r=8);\n    }\n    \n    // Second cloud group\n    for(pos = [[25, 15], [30, 22], [-25, 25]]) {\n        translate([pos[0], pos[1], 16])\n            scale([0.8, 0.4, 0.2])\n                sphere(r=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base();\n    \n    // Ocean on top of base\n    translate([0, -10, 2.5])\n        ocean();\n    \n    // Sky layers\n    sky();\n    \n    // Sun\n    color([1, 0.9, 0.3]) sun();\n    \n    // Clouds in dark silhouette\n    color([0.2, 0.2, 0.2]) clouds();\n}",
    "renders": true
  },
  {
    "fruit": "redlady",
    "openscad_code": "// RedLady - Realistic Female Torso\n// Medium complexity, 3D printable\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 100]) sphere(15);\n\n    // Neck\n    translate([0, 0, 85]) cylinder(h=20, r1=7, r2=5);\n\n    // Nose\n    translate([0, 14.5, 100]) cube([3, 4, 2], center=true);\n\n    // Eyes\n    for(x = [-5, 5]) {\n        translate([x, 12, 103]) sphere(1.5);\n    }\n\n    // Lips\n    translate([0, 16, 98]) cube([8, 1, 2], center=true);\n}\n\nmodule torso() {\n    // Chest\n    translate([0, 0, 50]) scale([1.2, 0.8, 1.5]) sphere(20);\n\n    // Waist\n    translate([0, 0, 30]) cylinder(h=25, r1=18, r2=15);\n\n    // Hips\n    translate([0, 0, 15]) scale([1.5, 1, 1]) sphere(15);\n}\n\nmodule breasts() {\n    for(x = [-10, 10]) {\n        // Main breast\n        translate([x, 10, 70]) sphere(8);\n\n        // Nipple\n        translate([x, 18, 70]) sphere(2);\n    }\n}\n\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 22, 0, 65]) \n            rotate([0, 20, 0]) \n            cylinder(h=25, r1=4, r2=3.5);\n\n        // Lower arm\n        translate([side * 28, 5, 45]) \n            rotate([0, 30, 0]) \n            cylinder(h=25, r1=3.5, r2=3);\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([side * 8, 0, 0]) \n            rotate([0, 0, 20]) \n            cylinder(h=35, r1=5, r2=4);\n\n        // Lower leg\n        translate([side * 8, 5, -30]) \n            cylinder(h=35, r1=4, r2=3);\n\n        // Foot\n        translate([side * 8, 12, -65]) \n            scale([1.5, 2, 1]) \n            cube([6, 10, 4], center=true);\n    }\n}\n\n// Main model\nunion() {\n    head();\n    torso();\n    breasts();\n    arms();\n    legs();\n}\n\n// Base for stability\ntranslate([0, 0, -70]) \n    cube([30, 20, 5], center=true);",
    "renders": true
  },
  {
    "fruit": "blood",
    "openscad_code": "// Realistic 3D printable blood droplet\n// Medium complexity - anatomical accuracy with printable geometry\n\n$fn = 36;  // Smooth curves\n\n// Overall scale\nscale_factor = 1;\nfinal_height = 80 * scale_factor;\nfinal_width = 50 * scale_factor;\n\n// Main droplet body\nmodule blood_droplet() {\n    difference() {\n        // Outer smooth teardrop shape\n        union() {\n            // Upper spherical part\n            translate([0, 0, final_height * 0.7])\n                sphere(r = final_width * 0.4);\n            \n            // Lower tapered part\n            cylinder(h = final_height * 0.5, \n                    r1 = final_width * 0.4, \n                    r2 = final_width * 0.15,\n                    center = false);\n        }\n        \n        // Hollow out center for printability\n        translate([0, 0, -1])\n            cylinder(h = final_height + 2, \n                    r1 = final_width * 0.3, \n                    r2 = final_width * 0.05,\n                    center = false);\n    }\n}\n\n// Surface tension ridge at top\nmodule surface_tension() {\n    difference() {\n        torus();\n        // Remove bottom half\n        translate([0, 0, -final_width * 0.1])\n            cube([final_width * 2, final_width * 2, final_width * 0.2], center = true);\n    }\n}\n\n// Helper torus\nmodule torus() {\n    rotate_extrude()\n        translate([final_width * 0.3, 0, 0])\n            circle(r = final_width * 0.05);\n}\n\n// Blood coagulation spots\nmodule coagulation_spots() {\n    for(i = [0:15]) {\n        angle = i * 137.5;  // Golden angle for natural distribution\n        radius = final_width * 0.3 * (0.4 + 0.6 * sin(i * 73));  // Organic spacing\n        \n        translate([\n            radius * cos(angle),\n            radius * sin(angle),\n            final_height * 0.6 - i * 2\n        ]) {\n            scale([1, 1, 0.7])\n                sphere(r = 0.5 + 0.3 * sin(i * 5));\n        }\n    }\n}\n\n// Tail formation\nmodule tail_formation() {\n    hull() {\n        // Connection point\n        translate([0, 0, 0])\n            sphere(r = final_width * 0.15);\n        \n        // Tail tip\n        translate([final_width * 0.1, 0, -final_height * 0.4])\n            sphere(r = final_width * 0.05);\n        \n        // Secondary tail\n        translate([-final_width * 0.05, final_width * 0.08, -final_height * 0.3])\n            sphere(r = final_width * 0.08);\n    }\n}\n\n// Base plate for printing stability\nmodule base_plate() {\n    difference() {\n        // Main base\n        translate([0, 0, -final_height * 0.05])\n            cube([final_width * 1.2, final_width * 1.2, final_height * 0.1], center = true);\n        \n        // Drainage hole\n        cylinder(h = final_height * 0.15, r = final_width * 0.1, center = true);\n    }\n}\n\n// Assemble the complete model\nunion() {\n    // Main droplet\n    blood_droplet();\n    \n    // Surface tension effect\n    translate([0, 0, final_height * 0.7])\n        surface_tension();\n    \n    // Coagulation details\n    coagulation_spots();\n    \n    // Tail\n    translate([0, 0, -final_height * 0.45])\n        tail_formation();\n    \n    // Stabilizing base\n    base_plate();\n}\n\n// Optional: Add slight tilt for realism\nrotate([5, 0, 15]) {\n    // Model is already positioned\n}",
    "renders": true
  },
  {
    "fruit": "meyer",
    "openscad_code": "// Realistic Meyer Lemon (medium complexity)\n// Overall dimensions: ~60mm diameter\n\n$fn = 48;\n\n// Main body\nmodule lemon_body() {\n    difference() {\n        // Main lemon shape - slightly elongated sphere\n        scale([1.1, 1, 0.9])\n        sphere(d = 50);\n        \n        // Stem indentation\n        translate([0, 0, 25])\n        rotate([0, 0, 0])\n        cylinder(h = 5, r1 = 3, r2 = 5, $fn = 16);\n        \n        // Bottom nipple\n        translate([0, 0, -22.5])\n        rotate([0, 0, 0])\n        cylinder(h = 5, r1 = 2, r2 = 0, $fn = 16);\n    }\n}\n\n// Lemon texture - small dimples\nmodule lemon_texture() {\n    for(i = [0:15]) {\n        rotate([0, i * 12, 0])\n        for(j = [0:11]) {\n            rotate([0, 0, j * 30])\n            translate([20 * cos(i * 12), 20 * sin(i * 12), 0])\n            if(i % 3 != j % 3) // Skip some for natural look\n            difference() {\n                sphere(d = 1.5);\n                translate([0, 0, 1])\n                sphere(d = 2);\n            }\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 25.5])\n    rotate([0, 0, 0])\n    cylinder(h = 8, r1 = 1.5, r2 = 2, $fn = 8);\n    \n    translate([0, 0, 33])\n    rotate([0, 0, 0])\n    sphere(d = 3);\n}\n\n// Leaf\nmodule leaf() {\n    translate([3, 3, 32])\n    rotate([0, -20, 45])\n    scale([1, 0.4, 0.1])\n    sphere(d = 12);\n    \n    // Leaf vein\n    translate([3, 3, 32.5])\n    rotate([0, -20, 45])\n    scale([0.8, 0.05, 0.05])\n    cube([12, 1, 1], center = true);\n}\n\n// Main assembly\nunion() {\n    // Lemon body with texture\n    union() {\n        lemon_body();\n        // Color difference() {\n        //     lemon_texture();\n        // }\n    }\n    \n    // Stem and leaf\n    stem();\n    leaf();\n}",
    "renders": true
  },
  {
    "fruit": "pummelo",
    "openscad_code": "// Pummelo (grapefruit-like citrus) - medium complexity realistic style\n// Overall dimensions: ~70mm diameter\n\n// Main parameters\n$fn = 36;  // Smoother curves\npummelo_radius = 35;\nwall_thickness = 2.5;\nsegment_count = 12;\n\n// Stem base\nmodule stem_base() {\n    translate([0, 0, pummelo_radius - 1])\n    difference() {\n        cylinder(h = 8, r1 = 7, r2 = 4, center = false);\n        translate([0, 0, -0.1])\n        cylinder(h = 8.2, r1 = 4, r2 = 2, center = false);\n    }\n}\n\n// Slight bumps for realistic surface\nmodule surface_bumps() {\n    for (i = [0 : segment_count - 1]) {\n        angle = i * 360 / segment_count;\n        for (j = [0 : 3]) {\n            rotate([0, 0, angle])\n            translate([pummelo_radius - 2, 0, j * 15 - 22])\n            rotate([90, 0, 0])\n            scale([1, 1, 0.4])\n            sphere(r = 3);\n        }\n    }\n}\n\n// Create slightly flattened sphere (realistic pummelo shape)\nmodule pummelo_body() {\n    scale([1, 1, 0.9])\n    sphere(r = pummelo_radius);\n}\n\n// Thin peel with inner flesh removed (hollow shell)\nmodule peel_shell() {\n    difference() {\n        pummelo_body();\n        translate([0, 0, -1])  // Move slightly down for flat bottom\n        scale([1, 1, 0.88])\n        sphere(r = pummelo_radius - wall_thickness);\n    }\n}\n\n// Subtle texture lines running top to bottom\nmodule texture_lines() {\n    for (i = [0 : segment_count - 1]) {\n        rotate([0, 0, i * 360 / segment_count])\n        translate([pummelo_radius - 0.5, 0, -pummelo_radius])\n        rotate([90, 0, 0])\n        cylinder(h = pummelo_radius * 2, r = 0.8, center = true);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main peel structure\n    peel_shell();\n    \n    // Add surface details\n    difference() {\n        union() {\n            surface_bumps();\n            texture_lines();\n        }\n        // Ensure details don't penetrate inside\n        scale([1, 1, 0.88])\n        sphere(r = pummelo_radius - wall_thickness - 1);\n    }\n    \n    // Stem at top\n    stem_base();\n}",
    "renders": true
  },
  {
    "fruit": "smooth",
    "openscad_code": "// Realistic Smooth Stone - Medium Complexity\n// A smooth river stone suitable for 3D printing\n// Dimensions: ~65mm x 45mm x 35mm\n\n$fn = 64; // Smooth curves\n\nmodule stone_base() {\n    // Main elliptical body\n    scale([1.3, 1, 0.8])\n    sphere(25);\n}\n\nmodule stone_depression() {\n    // Hollow on top surface\n    translate([0, 0, -5])\n    scale([0.8, 0.9, 0.4])\n    sphere(20);\n}\n\nmodule erosion_mark(x, y, angle, size) {\n    // Small erosion grooves\n    translate([x, y, 5])\n    rotate([0, 0, angle])\n    scale([size, size * 2, size * 0.3])\n    cylinder(h = 3, r = 2);\n}\n\nmodule chip_mark(x, y, z, size) {\n    // Small chips/nicks\n    translate([x, y, z])\n    sphere(size);\n}\n\nmodule surface_texture() {\n    // Add subtle surface bumps\n    for(i = [0:15]) {\n        angle = i * 137.5;\n        radius = 15 + sin(i * 2) * 8;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        z = 5 + sin(i * 3) * 2;\n        \n        translate([x, y, z])\n        scale([0.8, 1, 0.6])\n        sphere(1.5);\n    }\n}\n\n// Main stone construction\ndifference() {\n    union() {\n        // Base stone shape\n        stone_base();\n        \n        // Surface texture\n        surface_texture();\n    }\n    \n    // Top depression\n    stone_depression();\n    \n    // Erosion marks\n    erosion_mark(10, 8, 30, 1.2);\n    erosion_mark(-12, -5, -45, 1.5);\n    erosion_mark(5, -15, 60, 1.1);\n    \n    // Chip marks around edges\n    chip_mark(20, 0, 0, 2.5);\n    chip_mark(-18, 12, -3, 2);\n    chip_mark(0, -22, -2, 2.2);\n    chip_mark(15, 18, -1, 1.8);\n    \n    // Bottom flattening for printing\n    translate([0, 0, -21])\n    cube([50, 50, 5], center = true);\n}\n\n// Add subtle base ring for stability\ndifference() {\n    translate([0, 0, -20])\n    cylinder(h = 1, r = 30);\n    \n    translate([0, 0, -21])\n    cylinder(h = 3, r = 28);\n}",
    "renders": true
  },
  {
    "fruit": "queen",
    "openscad_code": "// Queen chess piece - Realistic style, medium complexity\n// Suitable for 3D printing, ~80mm tall, 35mm base diameter\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule queen() {\n    // Crown with 5 points\n    union() {\n        // Crown base\n        cylinder(h=6, d=28, center=true);\n        \n        // Crown points\n        for(i=[0:4]) {\n            rotate([0, 0, i*72]) \n                translate([10, 0, 3])\n                    scale([0.8, 1, 1])\n                        cylinder(h=8, d1=6, d2=2, center=false);\n        }\n        \n        // Small sphere decorations on crown points\n        for(i=[0:4]) {\n            rotate([0, 0, i*72]) \n                translate([10, 0, 8.5])\n                    sphere(d=3);\n        }\n    }\n    \n    // Head\n    translate([0, 0, -8])\n        sphere(d=22);\n    \n    // Neck\n    translate([0, 0, -16])\n        cylinder(h=6, d=18);\n    \n    // Torso with draped robes\n    translate([0, 0, -26])\n        difference() {\n            // Main torso\n            cylinder(h=20, d1=24, d2=30, center=false);\n            \n            // Carved waist\n            translate([0, 0, 8])\n                cylinder(h=12, d=22);\n        }\n    \n    // Decorative collar\n    translate([0, 0, -22])\n        cylinder(h=3, d=28);\n    \n    // Base of torso\n    translate([0, 0, -35])\n        cylinder(h=6, d=32);\n    \n    // First tier of base\n    translate([0, 0, -42])\n        cylinder(h=4, d=34);\n    \n    // Second tier of base\n    translate([0, 0, -46])\n        cylinder(h=4, d=36);\n    \n    // Third tier of base\n    translate([0, 0, -50])\n        cylinder(h=4, d=38);\n    \n    // Bottom base\n    translate([0, 0, -54])\n        cylinder(h=6, d=40);\n    \n    // Facial features (simplified but recognizable)\n    // Eyes\n    translate([-7, -10, -8])\n        sphere(d=3);\n    translate([7, -10, -8])\n        sphere(d=3);\n    \n    // Nose\n    translate([0, -11, -10])\n        scale([1, 0.5, 1])\n            sphere(d=4);\n    \n    // Mouth\n    translate([0, -11, -13])\n        scale([2, 0.5, 0.5])\n            sphere(d=3);\n}\n\n// Create the queen centered at origin\ntranslate([0, 0, 30])\n    queen();",
    "renders": true
  },
  {
    "fruit": "red",
    "openscad_code": "// Realistic Red Apple - OpenSCAD\n// Medium complexity, 3D printable\n\n// Parameters\napple_diameter = 45;\nstem_length = 12;\nstem_diameter = 3;\ncalyx_height = 3;\ndimple_depth = 2;\n\n// Main apple body\nmodule apple_body() {\n    // Main sphere with slight scaling for realistic shape\n    scale([1, 1, 0.9]) \n    sphere(d=apple_diameter, $fn=64);\n    \n    // Top indent for stem\n    translate([0, 0, apple_diameter/2 - dimple_depth/2])\n    rotate([0, 0, 0])\n    cylinder(h=dimple_depth, d=8, $fn=32);\n    \n    // Bottom dimple\n    translate([0, 0, -apple_diameter/2 + dimple_depth/2])\n    rotate([0, 0, 0])\n    cylinder(h=dimple_depth, d=6, $fn=32);\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, apple_diameter/2 + stem_length/2 - 2])\n    rotate([0, 0, 0])\n    cylinder(h=stem_length, d=stem_diameter, $fn=16);\n    \n    // Small leaf\n    translate([3, 3, apple_diameter/2 + stem_length - 2])\n    rotate([90, 0, 45])\n    scale([1, 0.5, 0.1])\n    sphere(d=8, $fn=16);\n}\n\n// Calyx (bottom star pattern)\nmodule calyx() {\n    difference() {\n        // Base cylinder\n        translate([0, 0, -apple_diameter/2])\n        cylinder(h=calyx_height, d=10, $fn=32);\n        \n        // Cut star pattern\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([0, 0, -apple_diameter/2 - 0.1])\n            cube([3, 8, calyx_height+0.2], center=true);\n        }\n    }\n}\n\n// Surface details - small bumps for realistic texture\nmodule surface_bumps() {\n    // Random small spheres for texture\n    for(i=[0:20]) {\n        rotate([i*73, i*37, 0])\n        translate([\n            sin(i*137.5)*apple_diameter/2.2,\n            cos(i*137.5)*apple_diameter/2.2,\n            sin(i*89)*apple_diameter/4\n        ])\n        sphere(d=1.5, $fn=8);\n    }\n}\n\n// Color the apple red\ncolor(\"red\") {\n    union() {\n        apple_body();\n        stem();\n        calyx();\n        // Uncomment for texture\n        // surface_bumps();\n    }\n}\n\n// Optional: Cut in half to show interior\n// %translate([50, 0, 0]) difference() {\n//     apple_body();\n//     translate([0, -25, 0]) cube([50, 50, 50]);\n// }",
    "renders": true
  },
  {
    "fruit": "sugarloaf",
    "openscad_code": "// Realistic Sugarloaf with Medium Complexity\n// A traditional cone-shaped sugarloaf with paper wrapper and base\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\nloaf_height = 60;\nloaf_base_diameter = 35;\nwrapper_height = 25;\nwrapper_top_diameter = 8;\nbase_thickness = 3;\n\nmodule sugarloaf_body() {\n    // Tapered cone shape for the sugar\n    cylinder(h=loaf_height, d1=loaf_base_diameter, d2=0, center=false);\n    \n    // Add slight imperfections for realism\n    for(i=[0:15:360]) {\n        rotate([0, 0, i])\n        translate([loaf_base_diameter/2 - 2, 0, loaf_height/2])\n        scale([0.8, 0.8, 1])\n        sphere(d=3, $fn=8);\n    }\n}\n\nmodule wrapper() {\n    // Paper wrapper around the base\n    difference() {\n        // Outer wrapper cone\n        cylinder(h=wrapper_height, d1=loaf_base_diameter + 2, d2=wrapper_top_diameter + 1, center=false);\n        \n        // Inner hollow space\n        translate([0, 0, -0.1])\n        cylinder(h=wrapper_height + 0.2, d1=loaf_base_diameter, d2=wrapper_top_diameter, center=false);\n    }\n    \n    // Wrapper top edge detail\n    for(i=[0:30:360]) {\n        rotate([0, 0, i])\n        translate([wrapper_top_diameter/2 + 0.5, 0, wrapper_height])\n        cube([1, 0.5, 2], center=true);\n    }\n}\n\nmodule base_ring() {\n    // Decorative base ring for stability\n    difference() {\n        cylinder(h=base_thickness, d=loaf_base_diameter + 6, center=false);\n        cylinder(h=base_thickness + 0.2, d=loaf_base_diameter + 2, center=false);\n    }\n    \n    // Small feet for printing support\n    for(i=[0:90:360]) {\n        rotate([0, 0, i])\n        translate([loaf_base_diameter/2 + 2, 0, 0])\n        cylinder(h=base_thickness, d=4, center=false);\n    }\n}\n\nmodule sugar_texture() {\n    // Subtle surface texture\n    for(z=[loaf_height*0.2:5:loaf_height*0.8]) {\n        radius = loaf_base_diameter/2 * (1 - z/loaf_height);\n        for(i=[0:45:360]) {\n            rotate([0, 0, i])\n            translate([radius - 1, 0, z])\n            sphere(d=1.5, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base ring\n    base_ring();\n    \n    // Sugarloaf body\n    translate([0, 0, base_thickness])\n    sugarloaf_body();\n    \n    // Surface texture\n    translate([0, 0, base_thickness])\n    sugar_texture();\n    \n    // Wrapper\n    translate([0, 0, base_thickness])\n    wrapper();\n}",
    "renders": true
  },
  {
    "fruit": "ananas",
    "openscad_code": "// Pineapple (Ananas) - Realistic style, medium complexity\n// Total height: ~80 mm, printable without supports\n\n// Global parameters\n$fn = 32;  // Smooth curves\n\nmodule ananas() {\n    // Main body (cylinder with slight taper)\n    color(\"gold\") \n    union() {\n        // Body segments (stacked cylinders with decreasing radius)\n        for(i=[0:5]) {\n            translate([0, 0, i*10]) \n            cylinder(h=10, r1=25-i*2, r2=25-(i+1)*2);\n        }\n        \n        // Top dome\n        translate([0, 0, 60]) \n        sphere(r=20);\n    }\n    \n    // Diamond pattern on body (eyes)\n    color(\"goldenrod\") \n    for(z=[10:10:60]) {\n        for(a=[0:30:330]) {\n            translate([0, 0, z]) \n            rotate([0, 0, a]) \n            translate([20, 0, 0]) \n            rotate([0, 90, 0]) \n            scale([0.8, 1, 1]) \n            cylinder(h=5, r1=3, r2=2);\n        }\n    }\n    \n    // Crown leaves (spiral arrangement)\n    color(\"darkgreen\") \n    for(i=[0:35]) {\n        rotate([0, 0, i*137.5]) \n        translate([0, 15, 80]) \n        rotate([90-i*2, 0, 0]) \n        scale([0.7, 0.7, 1]) \n        cylinder(h=30+sin(i*10)*5, r1=2.5, r2=1.5);\n    }\n    \n    // Base cut (to sit flat)\n    translate([0, 0, -0.5]) \n    cube([50, 50, 1], center=true);\n}\n\n// Render the complete pineapple\nananas();",
    "renders": true
  },
  {
    "fruit": "king",
    "openscad_code": "// King Chess Piece - Realistic Style, Medium Complexity\n// Designed for 3D printing, 80mm tall\n\n// Main parameters\nking_height = 80;\nbase_diameter = 25;\nwall_thickness = 2;\n\n// Create the complete king\nunion() {\n    // Base/cylinder\n    cylinder(h=8, d=base_diameter, $fn=64);\n    \n    // Pedestal detail\n    translate([0, 0, 8])\n        cylinder(h=3, d1=base_diameter, d2=base_diameter*0.9, $fn=64);\n    \n    // Main body - robe\n    translate([0, 0, 11])\n        cylinder(h=20, d1=base_diameter*0.9, d2=base_diameter*0.8, $fn=64);\n    \n    // Torso\n    translate([0, 0, 31])\n        cylinder(h=15, d1=base_diameter*0.8, d2=base_diameter*0.6, $fn=64);\n    \n    // Shoulders\n    translate([0, 0, 46])\n        cylinder(h=8, d1=base_diameter*0.7, d2=base_diameter*0.5, $fn=64);\n    \n    // Neck\n    translate([0, 0, 54])\n        cylinder(h=4, d=base_diameter*0.3, $fn=32);\n    \n    // Head\n    translate([0, 0, 58])\n        sphere(d=base_diameter*0.45, $fn=32);\n    \n    // Crown base\n    translate([0, 0, 58.2])\n        cylinder(h=3, d=base_diameter*0.5, $fn=32);\n    \n    // Crown points\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n            translate([base_diameter*0.18, 0, 61.2])\n                cylinder(h=6, d1=base_diameter*0.12, d2=base_diameter*0.08, $fn=8);\n    }\n    \n    // Cross on crown\n    translate([0, 0, 67.2])\n        union() {\n            cube([base_diameter*0.08, base_diameter*0.08, 5], center=true);\n            cube([base_diameter*0.12, base_diameter*0.04, 5], center=true);\n        }\n    \n    // Robe folds\n    module robe_folds() {\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n                translate([base_diameter*0.35, 0, 21])\n                    cube([wall_thickness, base_diameter*0.1, 18], center=true);\n        }\n    }\n    \n    // Add robe folds\n    translate([0, 0, 0])\n        robe_folds();\n    \n    // Facial features - eyes\n    translate([base_diameter*0.12, base_diameter*0.1, 58.3])\n        sphere(d=base_diameter*0.04, $fn=16);\n    \n    translate([base_diameter*0.12, -base_diameter*0.1, 58.3])\n        sphere(d=base_diameter*0.04, $fn=16);\n    \n    // Nose\n    translate([base_diameter*0.12, 0, 58])\n        cube([base_diameter*0.08, base_diameter*0.04, base_diameter*0.08], center=true);\n    \n    // Beard\n    difference() {\n        translate([base_diameter*0.12, 0, 57.5])\n            sphere(d=base_diameter*0.4, $fn=32);\n        translate([base_diameter*0.12, 0, 58])\n            sphere(d=base_diameter*0.35, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "tall",
    "openscad_code": "// OpenSCAD code for a 3D printable realistic-style tall (tree)\n// Height: 90 mm, optimized for FDM printing with no overhangs > 45°\n\n$fn = 36;               // Circle resolution for smooth curves\n\n// Main trunk\nmodule trunk() {\n    // Base root flare\n    difference() {\n        cylinder(h = 30, d1 = 18, d2 = 14);\n        for (i = [0:60:300])\n            rotate([0, 0, i])\n                translate([7, 0, 0])\n                    cylinder(h = 32, d = 4);\n    }\n    \n    // Main trunk\n    translate([0, 0, 30])\n        cylinder(h = 60, d1 = 14, d2 = 10);\n}\n\n// Primary branch\nmodule branch(angle, rot) {\n    translate([0, 0, 75])\n    rotate([0, 0, rot])\n    rotate([angle, 0, 0]) {\n        // Branch stem\n        cylinder(h = 25, d1 = 8, d2 = 4);\n        \n        // Sub-branches\n        translate([0, 0, 20])\n            rotate([0, 0, 45])\n            cylinder(h = 15, d1 = 4, d2 = 2);\n        \n        translate([0, 0, 20])\n            rotate([0, 0, -30])\n            cylinder(h = 12, d1 = 4, d2 = 2);\n    }\n}\n\n// Foliage cluster (realistic pine-style)\nmodule foliage_cluster(height, radius, layers) {\n    for (i = [0:layers-1]) {\n        translate([0, 0, height - i * 5])\n            cylinder(h = 8, d = radius - i * 2.5);\n    }\n}\n\n// Bark texture via small boolean cuts\nmodule bark_texture() {\n    difference() {\n        children();\n        for (z = [5:5:85])\n            for (a = [0:30:330])\n                translate([cos(a) * 6, sin(a) * 6, z])\n                    rotate([90, 0, a])\n                        cylinder(h = 3, d = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Textured trunk\n    bark_texture() trunk();\n    \n    // Three main branches at different angles\n    branch(-35, 0);\n    branch(-40, 120);\n    branch(-38, 240);\n    \n    // Foliage on branches\n    translate([0, 0, 75])\n        foliage_cluster(25, 20, 5);\n    \n    translate([sin(0) * 20, cos(0) * 20, 85])\n        foliage_cluster(15, 12, 3);\n    \n    translate([sin(120) * 18, cos(120) * 18, 83])\n        foliage_cluster(18, 14, 4);\n    \n    translate([sin(240) * 19, cos(240) * 19, 84])\n        foliage_cluster(16, 13, 3);\n}",
    "renders": true
  },
  {
    "fruit": "dwarf",
    "openscad_code": "// Realistic Dwarf - Medium Complexity\n// Total height ~70mm\n\n$fn=32;\n\n// Main assembly\nunion() {\n    // Head\n    translate([0,0,58]) head();\n    \n    // Body\n    translate([0,0,30]) body();\n    \n    // Arms\n    translate([-12,0,45]) arm(1);\n    translate([12,0,45]) mirror([1,0,0]) arm(1);\n    \n    // Legs\n    translate([-5,0,15]) leg();\n    translate([5,0,15]) leg();\n    \n    // Beard\n    translate([0,-2,48]) beard();\n    \n    // Axe\n    translate([20,8,35]) axe();\n}\n\nmodule head() {\n    difference() {\n        // Skull\n        sphere(7);\n        \n        // Eye sockets\n        translate([-2.5,3.5,1]) rotate([0,20,0]) scale([1.5,1,1]) sphere(1);\n        translate([2.5,3.5,1]) rotate([0,-20,0]) scale([1.5,1,1]) sphere(1);\n        \n        // Nose bridge\n        translate([0,5.5,0]) cube([3,2,2], center=true);\n        \n        // Mouth area\n        translate([0,2,-3]) cube([6,3,2], center=true);\n    }\n    \n    // Nose\n    translate([0,5.5,-1]) sphere(1.8);\n    \n    // Eyebrows\n    translate([-3.5,5,1]) cube([2,0.5,0.5]);\n    translate([3.5,5,1]) cube([2,0.5,0.5]);\n}\n\nmodule body() {\n    difference() {\n        // Torso\n        scale([1.2,0.8,1.5]) sphere(10);\n        \n        // Neck hole\n        translate([0,0,13]) cylinder(3,3,3);\n    }\n    \n    // Belt\n    translate([0,0,20]) scale([1.3,1,0.5]) cylinder(3,10,10);\n    \n    // Belt buckle\n    translate([0,-10,20]) cube([4,1,3]);\n}\n\nmodule arm(side) {\n    rotate([0,0,-20*side]) {\n        // Upper arm\n        translate([0,0,0]) rotate([90,0,0]) cylinder(10,3,2.5);\n        \n        // Forearm\n        translate([0,0,-12]) rotate([40,0,0]) cylinder(8,2.5,2);\n        \n        // Hand\n        translate([0,-2,-20]) sphere(2.5);\n    }\n}\n\nmodule leg() {\n    rotate([0,0,10]) {\n        // Thigh\n        translate([0,0,0]) rotate([90,0,0]) cylinder(12,3.5,3);\n        \n        // Boot\n        translate([0,0,-14]) {\n            difference() {\n                scale([1.2,1.5,1]) sphere(5);\n                translate([0,0,-4.5]) cube([6,4,4], center=true);\n            }\n        }\n    }\n}\n\nmodule beard() {\n    // Main beard volume\n    scale([1,1,1.2]) sphere(6);\n    \n    // Beard layers\n    for(i=[0:3]) {\n        translate([0,-2-i,2-i]) scale([1.2-i*0.1,1,0.5]) sphere(6-i);\n    }\n    \n    // Mustache\n    translate([0,5,0]) {\n        rotate([0,20,0]) scale([1,0.5,1]) sphere(3);\n        rotate([0,-20,0]) scale([1,0.5,1]) sphere(3);\n    }\n}\n\nmodule axe() {\n    rotate([0,0,45]) {\n        // Handle\n        translate([0,0,-8]) rotate([90,0,0]) cylinder(20,1.5,1.5);\n        \n        // Axe head\n        translate([0,0,10]) {\n            difference() {\n                // Blade\n                rotate([90,0,0]) scale([0.5,1,2]) cylinder(8,8,0);\n                \n                // Back spike\n                rotate([90,0,0]) translate([0,0,-10]) cylinder(5,2,0);\n                \n                // Handle hole\n                rotate([90,0,0]) translate([0,0,0]) cylinder(3,2,2);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "macapuno",
    "openscad_code": "// Macapuno (coconut sport) - realistic medium-complexity model\n// Overall dimensions ~80 mm long, ~60 mm diameter\n\n// Main coconut shell\nmodule coconut_shell() {\n    difference() {\n        // Outer shell\n        scale([1, 1, 1.2]) \n        sphere(d=60, $fn=80);\n        \n        // Hollow interior\n        scale([0.9, 0.9, 1.1]) \n        sphere(d=55, $fn=80);\n        \n        // Opening cut\n        translate([0, 30, 0])\n        rotate([90, 0, 0])\n        cylinder(h=40, d1=35, d2=25, $fn=60);\n    }\n}\n\n// Fibrous husk texture\nmodule husk_texture() {\n    for (i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([0, 30, 0])\n        rotate([90, 0, 0])\n        cylinder(h=1.5, d=2, $fn=6);\n    }\n    \n    for (j = [0:10:350]) {\n        for (k = [-30:10:30]) {\n            rotate([0, j, 0])\n            translate([30*cos(j), k, 30*sin(j)])\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Macapuno flesh - translucent jelly-like strands\nmodule macapuno_flesh() {\n    // Main jelly mass\n    translate([0, 20, 0])\n    scale([1, 0.7, 1])\n    sphere(d=35, $fn=50);\n    \n    // Individual strands\n    for (i = [0:20:340]) {\n        rotate([0, i, 0])\n        translate([15, 15, 0])\n        rotate([90, 0, 0])\n        cylinder(h=25, d1=3, d2=2, $fn=12);\n    }\n    \n    for (j = [0:30:330]) {\n        rotate([0, 0, j])\n        translate([8, 15, 0])\n        rotate([45, 0, 0])\n        cylinder(h=20, d=2.5, $fn=10);\n    }\n    \n    // Cross fibers\n    for (k = [5:15:35]) {\n        translate([k-20, 25, 0])\n        rotate([0, 90, 0])\n        cylinder(h=30, d=2, $fn=8);\n    }\n}\n\n// Coconut water pool at bottom\nmodule coconut_water() {\n    translate([0, -25, 0])\n    scale([1, 0.3, 1])\n    sphere(d=40, $fn=40);\n}\n\n// Outer husk layer\nmodule husk_layer() {\n    difference() {\n        scale([1.05, 1.05, 1.1]) \n        sphere(d=65, $fn=60);\n        \n        scale([1, 1, 1.05]) \n        sphere(d=62, $fn=60);\n    }\n}\n\n// Assembly\nunion() {\n    // Main coconut\n    coconut_shell();\n    \n    // Add husk texture to shell\n    translate([0, 0, 0])\n    husk_texture();\n    \n    // Visible macapuno flesh\n    macapuno_flesh();\n    \n    // Thin layer of coconut water\n    coconut_water();\n    \n    // Outer fibrous husk (partial for realistic look)\n    translate([0, -10, 0])\n    rotate([0, 15, 0])\n    husk_layer();\n}",
    "renders": true
  },
  {
    "fruit": "monthong",
    "openscad_code": "// Monthong Durian - Realistic Style, Medium Complexity\n// OpenSCAD 3D printable model\n\n// Parameters\n$fn = 50;\ndurian_length = 80;\ndurian_width = 60;\ndurian_height = 70;\nthorns_per_row = 12;\nthorns_per_column = 6;\nwall_thickness = 2;\n\n// Main body module\nmodule durian_body() {\n    // Base ellipsoid shape\n    difference() {\n        scale([1, 0.8, 1.1])\n            sphere(d=durian_width);\n        \n        // Bottom flattening\n        translate([0, 0, -durian_height/2 - 1])\n            cube([durian_width*2, durian_width*2, durian_height], center=true);\n        \n        // Top cavity\n        translate([0, 0, durian_height/4])\n            scale([0.8, 0.7, 0.6])\n                sphere(d=durian_width*0.8);\n    }\n}\n\n// Individual thorn module\nmodule thorn() {\n    // Base cone for thorn\n    cylinder(h1=8, h2=12, r1=4, r2=1);\n    \n    // Sharp tip\n    translate([0, 0, 12])\n        cylinder(h=3, r1=1, r2=0.1);\n}\n\n// Thorn placement module\nmodule thorns() {\n    // Main body thorns\n    for (i = [0:thorns_per_row-1]) {\n        for (j = [0:thorns_per_column-1]) {\n            angle = i * 360 / thorns_per_row;\n            height = -durian_height/2 + j * (durian_height / thorns_per_column) + 10;\n            \n            // Skip some thorns for natural look\n            if ((i + j) % 2 == 0) {\n                rotate([0, 0, angle])\n                    translate([durian_width/2 * 0.9, 0, height])\n                        rotate([90, 0, 0])\n                            thorn();\n            }\n        }\n    }\n    \n    // Top thorns (shorter)\n    for (i = [0:thorns_per_row-1]) {\n        angle = i * 360 / thorns_per_row;\n        rotate([0, 0, angle])\n            translate([durian_width/2 * 0.7, 0, durian_height/2 - 5])\n                rotate([60, 0, 0])\n                    scale([0.7, 0.7, 0.7])\n                        thorn();\n    }\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, durian_height/2 + 5])\n        rotate([0, 0, 0])\n            union() {\n                // Main stem\n                cylinder(h=15, r=4);\n                \n                // Stem branches\n                for (i = [0:3]) {\n                    rotate([0, 0, i * 90])\n                        translate([2, 0, 10])\n                            rotate([30, 0, 0])\n                                cylinder(h=8, r=1.5);\n                }\n            }\n}\n\n// Bottom seam detail\nmodule bottom_seam() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([durian_width/2 * 0.3, 0, -durian_height/2 + 2])\n                scale([0.3, 1, 0.5])\n                    cylinder(h=5, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit body\n    durian_body();\n    \n    // Thorns\n    thorns();\n    \n    // Stem\n    stem();\n    \n    // Bottom details\n    bottom_seam();\n}",
    "renders": true
  },
  {
    "fruit": "chanee",
    "openscad_code": "// Realistic Chanee (Gibbon) Model - Medium Complexity\n// 3D printable with no overhangs\n\n// Overall dimensions: ~80mm height\n\nmodule torso() {\n    // Main torso body\n    difference() {\n        hull() {\n            translate([0, 0, 30]) sphere(r=12);\n            translate([0, 0, 45]) sphere(r=10);\n        }\n        \n        // Hollow out for printing\n        translate([0, 0, 30]) scale([0.8, 0.7, 0.9]) sphere(r=12);\n    }\n}\n\nmodule head() {\n    // Head assembly\n    translate([0, 0, 55]) {\n        // Main head sphere\n        sphere(r=8);\n        \n        // Muzzle/snout\n        translate([0, 7, -2]) {\n            difference() {\n                scale([1.3, 1.5, 1.2]) sphere(r=5);\n                translate([0, -6, 0]) cube([20, 12, 10], center=true);\n            }\n        }\n        \n        // Eye sockets\n        translate([-3, 5, 1]) sphere(r=1.5);\n        translate([3, 5, 1]) sphere(r=1.5);\n        \n        // Nostrils\n        translate([-1.5, 9, -2]) rotate([90, 0, 0]) cylinder(h=2, r=0.5);\n        translate([1.5, 9, -2]) rotate([90, 0, 0]) cylinder(h=2, r=0.5);\n    }\n}\n\nmodule arm() {\n    // Upper arm\n    rotate([0, 0, 30]) {\n        translate([0, 0, 15]) rotate([90, 0, 0]) cylinder(h=20, r1=3, r2=2);\n        \n        // Lower arm\n        translate([0, 18, 2]) rotate([90, 0, 0]) cylinder(h=25, r1=2, r2=1.5);\n        \n        // Hand\n        translate([0, 40, 2]) rotate([90, 0, 0]) cylinder(h=8, r=2.5);\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    rotate([0, 0, 15]) {\n        translate([0, 0, 10]) rotate([90, 0, 0]) cylinder(h=18, r1=3, r2=2.5);\n        \n        // Lower leg\n        translate([0, 16, -2]) rotate([90, 0, 0]) cylinder(h=20, r1=2.5, r2=2);\n        \n        // Foot\n        translate([0, 34, -4]) cube([3, 8, 2], center=true);\n    }\n}\n\nmodule tail() {\n    // Curved tail\n    for(i = [0:5:30]) {\n        rotate([0, i/3, 0]) {\n            translate([0, -8 - i/2, 25 - i/4]) \n            rotate([90, 0, 0]) \n            cylinder(h=3, r1=2.5 - i/20, r2=2.3 - i/20);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    torso();\n    head();\n    \n    // Left arm\n    translate([-12, 0, 45]) rotate([0, 0, -45]) arm();\n    \n    // Right arm\n    translate([12, 0, 45]) mirror([1, 0, 0]) rotate([0, 0, -45]) arm();\n    \n    // Left leg\n    translate([-6, 0, 25]) rotate([15, 0, 0]) leg();\n    \n    // Right leg\n    translate([6, 0, 25]) rotate([15, 0, 0]) leg();\n    \n    // Tail\n    translate([0, -10, 25]) tail();\n}\n\n// Base for stability\ntranslate([0, 0, -5]) {\n    difference() {\n        cylinder(h=5, r=15);\n        cylinder(h=5.1, r=13);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "puangmanee",
    "openscad_code": "// Puangmanee (Thai mandarin) - realistic style, medium complexity\n// Overall dimensions: ~70 mm diameter\n\n$fn = 36;  // Good balance between smooth curves and printability\n\n// Main parameters\ndiameter = 70;\nsegment_count = 10;\npeel_thickness = 2.5;\nstem_diameter = 4;\nstem_length = 8;\n\n// Main fruit body\nmodule fruit_body() {\n    difference() {\n        // Outer peel with slight texture\n        union() {\n            sphere(d = diameter);\n            \n            // Subtle segment ridges\n            for (i = [0:segment_count-1]) {\n                rotate([0, 0, i * 360/segment_count]) {\n                    translate([diameter/2 - peel_thickness/2, -1, 0])\n                        scale([1, 0.2, 1])\n                        sphere(d = peel_thickness * 2);\n                }\n            }\n        }\n        \n        // Hollow interior\n        sphere(d = diameter - peel_thickness * 2);\n    }\n}\n\n// Stem at top\nmodule stem() {\n    translate([0, 0, diameter/2]) {\n        // Main stem\n        cylinder(h = stem_length, d = stem_diameter);\n        \n        // Stem base flare\n        translate([0, 0, -0.5])\n            cylinder(h = 2, d1 = stem_diameter * 1.8, d2 = stem_diameter);\n    }\n}\n\n// Leaf attached to stem\nmodule leaf() {\n    translate([0, stem_diameter/2 + 1, diameter/2 + stem_length - 2]) {\n        rotate([90, 0, 0]) {\n            scale([1, 0.4, 1]) {\n                // Leaf body\n                difference() {\n                    sphere(d = 15);\n                    translate([0, -8, 0])\n                        cube([30, 16, 30], center = true);\n                }\n                \n                // Leaf veins\n                for (i = [-1, 0, 1]) {\n                    rotate([0, 0, i * 25])\n                        translate([0, 2, -0.5])\n                            scale([0.1, 0.03, 1])\n                            sphere(d = 12);\n                }\n            }\n        }\n    }\n}\n\n// Small dimple at bottom\nmodule bottom_dimple() {\n    translate([0, 0, -diameter/2 + 1]) {\n        sphere(d = 8);\n    }\n}\n\n// Assembly\nunion() {\n    fruit_body();\n    stem();\n    leaf();\n    difference() {\n        fruit_body();\n        bottom_dimple();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "kanyao",
    "openscad_code": "// Kanyao (Koi Fish) - Realistic Style, Medium Complexity\n// Size: 90mm length, 50mm height, 30mm width\n\n$fn = 32;\n\n// Main body module\nmodule body() {\n    // Fish body - elongated ellipsoid\n    scale([1.8, 1, 0.8])\n        sphere(25);\n}\n\n// Head module with mouth\nmodule head() {\n    translate([-35, 0, 0]) {\n        // Main head shape\n        scale([1.5, 1.2, 1])\n            sphere(15);\n        \n        // Mouth opening\n        translate([-10, 0, -5])\n            rotate([0, 30, 0])\n                difference() {\n                    scale([1.5, 1, 0.8])\n                        sphere(10);\n                    translate([5, 0, 0])\n                        scale([1.8, 1.2, 1.2])\n                            sphere(9);\n                }\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    translate([45, 0, 0]) {\n        rotate([0, 0, -10])\n            for(i = [-1, 1]) {\n                mirror([0, i, 0])\n                    translate([0, 0, 0])\n                        rotate([0, 0, i * 20])\n                            scale([1.5, 0.5, 0.1])\n                                cylinder(h = 30, r1 = 15, r2 = 5);\n            }\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    translate([0, 0, 20]) {\n        for(i = [0:20:40]) {\n            translate([i - 20, 0, 0])\n                rotate([0, 0, -5 + i/4])\n                    scale([0.3, 1, 1])\n                        cylinder(h = 12 - i/4, r1 = 5, r2 = 2);\n        }\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fins() {\n    for(side = [-1, 1]) {\n        translate([-10, side * 20, -5]) {\n            rotate([0, 90, side * 20])\n                scale([1.2, 0.8, 0.3])\n                    cylinder(h = 15, r1 = 8, r2 = 4);\n        }\n    }\n}\n\n// Scales pattern\nmodule scales() {\n    for(x = [-30:5:30]) {\n        for(y = [-15:5:15]) {\n            if(x*x/900 + y*y/225 < 0.9) {\n                translate([x, y, 25.5])\n                    rotate([90, 0, 0])\n                        scale([1, 0.7, 0.2])\n                            cylinder(h = 0.5, r = 2);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([-25, side * 12, 5]) {\n            // Eye socket\n            difference() {\n                sphere(3);\n                translate([0, 0, -2])\n                    cylinder(h = 4, r = 2.5);\n            }\n            // Eye ball\n            translate([0, 0, -1])\n                sphere(2);\n        }\n    }\n}\n\n// Barbel whiskers\nmodule barbels() {\n    for(side = [-1, 1]) {\n        // Side barbels\n        translate([-30, side * 15, -8])\n            rotate([0, 0, side * 30])\n                cylinder(h = 10, r1 = 1.5, r2 = 0.5);\n        \n        // Front barbels\n        translate([-40, side * 5, -3])\n            rotate([0, 20, side * 10])\n                cylinder(h = 12, r1 = 1.5, r2 = 0.5);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    tail_fin();\n    dorsal_fin();\n    pectoral_fins();\n    scales();\n    eyes();\n    barbels();\n}",
    "renders": true
  },
  {
    "fruit": "nangka",
    "openscad_code": "// Nangka (Jackfruit) - Realistic Medium Complexity\n// Overall size: ~80mm long x ~60mm wide\n\n// Main body parameters\nbody_length = 70;\nbody_width = 55;\nbody_height = 45;\nwall_thickness = 2;\n\n// Spike parameters\nspike_height = 6;\nspike_base = 2.5;\nspike_rows = 10;\nspike_cols = 8;\n\n// Stem parameters\nstem_length = 12;\nstem_diameter = 8;\n\n// Color\ncolor(\"darkolivegreen\")\n\n// Main body with slight ellipsoid shape\ndifference() {\n    scale([1, 0.9, 0.8])\n        sphere(d=body_width);\n    \n    // Hollow out for printing\n    scale([1, 0.9, 0.8])\n        sphere(d=body_width - wall_thickness*2);\n}\n\n// Create spiky surface pattern\nmodule spike(x, y, z, height, angle) {\n    translate([x, y, z])\n        rotate([0, angle, 0])\n            cylinder(h=height, d1=spike_base, d2=0.5, $fn=6);\n}\n\n// Generate spikes in a diamond pattern\nfor (i = [-spike_rows/2: spike_rows/2]) {\n    for (j = [-spike_cols/2: spike_cols/2]) {\n        // Skip some positions for natural look\n        if ((i+j)%2 == 0) {\n            // Calculate position on ellipsoid surface\n            theta = 180 * (i + spike_rows/2) / spike_rows;\n            phi = 360 * (j + spike_cols/2) / spike_cols;\n            \n            // Convert spherical to cartesian\n            x = (body_width/2) * sin(theta) * cos(phi);\n            y = (body_width/2) * 0.9 * sin(theta) * sin(phi);\n            z = (body_width/2) * 0.8 * cos(theta);\n            \n            // Calculate surface normal angle\n            angle = atan2(z, sqrt(x*x + y*y));\n            \n            spike(x, y, z, spike_height, angle);\n        }\n    }\n}\n\n// Stem at top\ntranslate([0, 0, body_height/2])\n    cylinder(h=stem_length, d=stem_diameter, $fn=8);\n\n// Add natural indentations between spike rows\nmodule indentation(depth) {\n    difference() {\n        sphere(d=body_width/3);\n        translate([0, 0, -depth])\n            sphere(d=body_width/3 + depth);\n    }\n}\n\n// Add 3 indentations for natural look\nfor (k = [0:2]) {\n    rotate([0, 0, k*120])\n        translate([body_width/3, 0, 0])\n            scale([0.3, 0.3, 0.2])\n                indentation(2);\n}\n\n// Bottom flat spot for printing stability\ntranslate([0, 0, -body_height/2])\n    cylinder(h=2, d=20, $fn=16);",
    "renders": true
  },
  {
    "fruit": "breadfruit",
    "openscad_code": "// Breadfruit model - realistic style, medium complexity\n// Overall dimensions: ~70mm diameter\n\n// Main parameters\n$fn = 48;\nfruit_diameter = 70;\nskin_thickness = 2;\nsegment_count = 10;\nsegment_depth = 4;\n\n// Create the main body\nmodule breadfruit_body() {\n    difference() {\n        // Main spherical body\n        sphere(d = fruit_diameter);\n        \n        // Flatten top and bottom slightly\n        translate([0, 0, fruit_diameter/2 - 5])\n            cylinder(h = 10, r = fruit_diameter/2 + 1, center = true);\n        translate([0, 0, -fruit_diameter/2 + 5])\n            cylinder(h = 10, r = fruit_diameter/2 + 1, center = true);\n    }\n}\n\n// Create the characteristic segments\nmodule segments() {\n    for (i = [0:segment_count-1]) {\n        rotate([0, 0, i * 360/segment_count]) {\n            // Main segment groove\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = fruit_diameter, r = fruit_diameter/2 - segment_depth, center = true);\n                        cylinder(h = fruit_diameter + 2, r = fruit_diameter/2 - segment_depth - 1, center = true);\n                    }\n            \n            // Subtle raised ridges between segments\n            translate([0, 0, 0])\n                rotate([90, 0, 180/segment_count])\n                    rotate([0, 0, 0])\n                        scale([1, 0.3, 1])\n                            cylinder(h = fruit_diameter, r = 1.5, center = true);\n        }\n    }\n}\n\n// Create the stem area\nmodule stem_area() {\n    // Stem base\n    translate([0, 0, fruit_diameter/2 - 8])\n        cylinder(h = 8, r1 = 6, r2 = 4);\n    \n    // Stem itself\n    translate([0, 0, fruit_diameter/2])\n        cylinder(h = 15, r = 2.5);\n    \n    // Stem attachment ridge\n    translate([0, 0, fruit_diameter/2 - 5])\n        cylinder(h = 3, r = 8, center = true);\n}\n\n// Create surface texture bumps\nmodule surface_bumps() {\n    // Random small bumps across surface\n    for (theta = [15:30:165]) {\n        for (phi = [0:30:330]) {\n            translate([\n                fruit_diameter/2 * sin(theta) * cos(phi),\n                fruit_diameter/2 * sin(theta) * sin(phi),\n                fruit_diameter/2 * cos(theta)\n            ]) {\n                rotate([0, theta, phi])\n                    sphere(d = 2.5);\n            }\n        }\n    }\n}\n\n// Hollow out the interior for 3D printing\nmodule hollow_interior() {\n    difference() {\n        children();\n        scale([0.9, 0.9, 0.9])\n            sphere(d = fruit_diameter);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body with segments\n    difference() {\n        hollow_interior() {\n            breadfruit_body();\n        }\n        segments();\n    }\n    \n    // Add stem and surface details\n    stem_area();\n    surface_bumps();\n}",
    "renders": true
  },
  {
    "fruit": "taro",
    "openscad_code": "// Realistic Taro Root - Medium Complexity\n// Overall dimensions: ~70mm long x 50mm wide x 40mm tall\n// 3D-printable with no overhangs >45°\n\n// Main body parameters\nbody_l = 60;\nbody_w = 45;\nbody_h = 35;\nwall = 2;               // wall thickness for hollow center\n\n// Surface bumps\nbump_r = 3;\nbump_h = 2;\n\n// Root hairs\nhair_r = 1.2;\nhair_l = 8;\n\n// Stem\nstem_r = 6;\nstem_h = 10;\n\n// Helper module: single bump\nmodule bump(r, h) {\n    difference() {\n        sphere(r);\n        translate([0, 0, -r*0.7])\n            cube([r*2.2, r*2.2, r*1.5], center = true);\n    }\n}\n\n// Helper module: root hair\nmodule hair(r, l) {\n    rotate([90, 0, 0])\n        cylinder(r1 = r, r2 = 0.3, h = l, $fn = 8);\n}\n\n// Main taro body\nmodule taro_body() {\n    difference() {\n        // Outer shell\n        scale([1, 0.85, 0.75])\n            sphere(d = body_w, $fn = 60);\n\n        // Hollow center for printing\n        translate([0, 0, 2])\n            scale([1 - wall/body_w, 1 - wall/body_w, 1 - wall/(body_h*0.75)])\n                sphere(d = body_w - 2*wall, $fn = 60);\n\n        // Flatten bottom slightly\n        translate([0, 0, -body_h/2 - 2])\n            cube([body_l, body_w, body_h], center = true);\n    }\n\n    // Surface bumps arranged in rows\n    for (a = [0:30:360]) {\n        for (step = [0.7:0.15:0.9]) {\n            translate(\n                [\n                    cos(a) * body_w/2 * step,\n                    sin(a) * body_w/2 * step * 0.85,\n                    (step - 0.7) * body_h/2 - 4\n                ]\n            ) {\n                bump(bump_r * (0.7 + 0.3*step), bump_h);\n            }\n        }\n    }\n}\n\n// Cluster of root hairs\nmodule root_cluster(cx, cy, rot) {\n    translate([cx, cy, -body_h/2])\n    rotate([0, 0, rot])\n    for (i = [0:8]) {\n        rotate([0, 0, i * 45])\n            translate([hair_r*3, 0, 0])\n                rotate([0, 0, (i % 2) * 10])\n                    hair(hair_r, hair_l);\n    }\n}\n\n// Stem with gentle taper\nmodule stem() {\n    translate([0, 0, body_h/2])\n        cylinder(r1 = stem_r, r2 = stem_r*0.7, h = stem_h, $fn = 32);\n}\n\n// Assemble the taro\nunion() {\n    taro_body();\n    stem();\n\n    // Root hair clusters at bottom\n    root_cluster(15, 0, 0);\n    root_cluster(-12, 8, 30);\n    root_cluster(-10, -10, -20);\n}",
    "renders": true
  },
  {
    "fruit": "custard",
    "openscad_code": "// Realistic custard dessert\n// Dimensions in mm\n\nmodule custard_body() {\n    // Main custard base - slightly flattened ellipsoid\n    scale([1, 1, 0.7])\n    sphere(d=70, $fn=64);\n}\n\nmodule caramelized_top() {\n    // Thin caramelized sugar layer on top\n    translate([0, 0, -0.5])\n    scale([1, 1, 0.1])\n    sphere(d=70, $fn=64);\n}\n\nmodule custard_wobble_lines() {\n    // Subtle surface imperfections for realism\n    for(i=[-25:10:25]) {\n        for(j=[-25:10:25]) {\n            if(i*i + j*j < 625) {\n                translate([i, j, -35 + 0.1*(i*i + j*j)/10])\n                sphere(d=1.5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule bubbles() {\n    // Small air bubbles trapped during setting\n    for(i=[1:30]) {\n        theta = 360*i/30;\n        r = 20 + 15*sin(i*137.5);\n        h = -15 + 8*sin(i*73.2);\n        translate([r*cos(theta), r*sin(theta), h])\n        sphere(d=1 + 0.5*sin(i*42.3), $fn=8);\n    }\n}\n\nmodule serving_dish() {\n    // Simple shallow dish\n    difference() {\n        cylinder(h=8, d=85, $fn=64);\n        translate([0, 0, 2])\n        cylinder(h=8, d=75, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    // Main custard\n    difference() {\n        custard_body();\n        // Hollow out for material saving\n        translate([0, 0, -45])\n        scale([0.8, 0.8, 1])\n        sphere(d=60, $fn=64);\n    }\n    \n    // Caramelized surface\n    caramelized_top();\n    \n    // Surface details\n    translate([0, 0, -24.5])\n    custard_wobble_lines();\n    \n    translate([0, 0, -24.5])\n    bubbles();\n    \n    // Serving dish\n    color(\"white\")\n    translate([0, 0, -35])\n    serving_dish();\n}",
    "renders": true
  },
  {
    "fruit": "guanabana",
    "openscad_code": "// Guanabana (Soursop) - Medium Complexity Realistic Style\n// Overall dimensions: ~60mm diameter\n\n// Main body parameters\nbody_radius = 30;\nbody_height = 40;\nscale_factor = 0.9; // Slight oval shape\n\n// Spike parameters\nspike_length = 8;\nspike_base = 3;\nspike_count = 60;\nspike_rows = 4;\n\n// Stem parameters\nstem_length = 15;\nstem_radius = 4;\n\n// Skin thickness for 3D printing\nwall_thickness = 1.5;\n\nmodule guanabana_body() {\n    // Main oval body\n    scale([scale_factor, 1, 0.8])\n        sphere(r = body_radius, $fn = 50);\n}\n\nmodule spike(x, y, z, angle) {\n    // Individual curved spike\n    translate([x, y, z]) {\n        rotate([0, angle, 0]) {\n            // Curved spike using cylinder segments\n            for(i = [0:2]) {\n                rotate([0, i*15, 0])\n                    translate([0, 0, i*2])\n                        cylinder(h = spike_length/3, r1 = spike_base - i*0.8, r2 = spike_base - (i+1)*0.8, $fn = 6);\n            }\n        }\n    }\n}\n\nmodule spikes() {\n    // Generate spikes over the surface\n    for(i = [0:spike_count-1]) {\n        theta = i * 360 / spike_count;\n        row = floor(i / (spike_count / spike_rows));\n        \n        // Calculate position on ellipsoid surface\n        phi = row * 180 / (spike_rows - 1);\n        x = body_radius * scale_factor * cos(theta) * sin(phi) * 0.9;\n        y = body_radius * sin(theta) * sin(phi) * 0.9;\n        z = body_radius * 0.8 * cos(phi) * 0.9;\n        \n        // Adjust spike angle based on surface normal\n        normal_angle = atan2(z, sqrt(x*x + y*y));\n        \n        spike(x, y, z, normal_angle);\n    }\n}\n\nmodule stem() {\n    // Curved stem\n    translate([0, 0, body_height * 0.8 - 5]) {\n        rotate([90, 0, 0]) {\n            for(i = [0:stem_length/2]) {\n                translate([sin(i*5)*2, 0, i*2])\n                    rotate([0, 90 - i*3, 0])\n                        cylinder(h = 2, r1 = stem_radius - i*0.15, r2 = stem_radius - (i+1)*0.15, $fn = 8);\n            }\n        }\n    }\n}\n\nmodule leaf() {\n    // Simple leaf shape\n    translate([0, -body_radius - 5, body_height * 0.5]) {\n        rotate([0, 30, 0]) {\n            scale([2, 1, 0.3])\n                sphere(r = 8, $fn = 8);\n            translate([8, 0, 0])\n                scale([3, 0.5, 0.3])\n                    sphere(r = 6, $fn = 8);\n        }\n    }\n}\n\n// Create hollow body for 3D printing\ndifference() {\n    // Outer body with spikes\n    union() {\n        guanabana_body();\n        spikes();\n        stem();\n        leaf();\n    }\n    \n    // Inner hollow space\n    scale([scale_factor, 1, 0.8])\n        sphere(r = body_radius - wall_thickness, $fn = 50);\n}\n\n// Base flat surface for printing\ntranslate([0, 0, -body_height * 0.8])\n    cylinder(h = 2, r = body_radius * scale_factor * 0.7, $fn = 30);",
    "renders": true
  },
  {
    "fruit": "papaw",
    "openscad_code": "// Realistic Papaya (Papaw) Model - Medium Complexity\n// Designed for 3D printing with no overhangs\n\nmodule papaya_body() {\n    // Main body using ellipsoid-like shape\n    scale([1, 0.8, 1.2])\n    sphere(d=40, $fn=60);\n}\n\nmodule papaya_cavity() {\n    // Hollow center for realism and printability\n    difference() {\n        scale([1, 0.8, 1.2])\n        sphere(d=37, $fn=50);\n        translate([0, 0, -5])\n        scale([0.7, 0.6, 1.1])\n        sphere(d=35, $fn=50);\n    }\n}\n\nmodule papaya_skin_details() {\n    // Surface ridges running lengthwise\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n        translate([0, 19, 0])\n        scale([0.1, 0.2, 5])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d=2, $fn=4);\n    }\n}\n\nmodule stem_end() {\n    // Stem attachment point\n    translate([0, 0, 25])\n    rotate_extrude($fn=20)\n    translate([3.5, 0, 0])\n    circle(d=5);\n    translate([0, 0, 25])\n    cylinder(h=3, d=2, $fn=8);\n}\n\nmodule blossom_end() {\n    // Bottom blossom scar\n    translate([0, 0, -23])\n    rotate_extrude($fn=20)\n    translate([2, 0, 0])\n    circle(d=3);\n}\n\nmodule papaya_seeds() {\n    // Internal seeds in cavity\n    color(\"black\")\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([0, 8, -5])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=1, $fn=6);\n    }\n}\n\nmodule papaya_flesh() {\n    // Orange flesh visible from cut\n    color(\"orange\")\n    translate([0, 0, -10])\n    scale([0.7, 0.6, 0.8])\n    sphere(d=35, $fn=50);\n}\n\n// Assembly\nunion() {\n    // Main papaya structure\n    difference() {\n        papaya_body();\n        papaya_cavity();\n    }\n    \n    // External details\n    papaya_skin_details();\n    stem_end();\n    blossom_end();\n    \n    // Cross-section view showing internals\n    translate([25, 0, 0]) {\n        // Half papaya showing flesh\n        intersection() {\n            papaya_body();\n            translate([0, -20, 0])\n            cube([50, 20, 50], center=true);\n        }\n        papaya_flesh();\n        papaya_seeds();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "sugar",
    "openscad_code": "// OpenSCAD Sugar Cube - Realistic Style, Medium Complexity\n// Dimensions: 24x24x16 mm sugar cube with slightly rounded edges and realistic crystal texture\n\nmodule sugar_crystal(x, y, z) {\n    // Small irregular crystal shape using scaled spheres\n    translate([x, y, z]) {\n        scale([1 + rand(0.3), 1 + rand(0.3), 1 + rand(0.3)]) \n        sphere(d = 1.5, $fn = 8);\n    }\n}\n\n// Random helper function for crystal variation\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges using cylinders and spheres\n    s = size - 2 * radius;\n    \n    // Center cube\n    translate([0, 0, radius])\n    cube([s, s, size[2] - 2 * radius], center = true);\n    \n    // Side edges\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([i * s/2, j * s/2, radius])\n            cylinder(h = size[2] - 2 * radius, r = radius, $fn = 16);\n        }\n    }\n    \n    // Corners\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            for(k = [-1, 1]) {\n                translate([i * s/2, j * s/2, k * (size[2]/2 - radius)])\n                sphere(r = radius, $fn = 16);\n            }\n        }\n    }\n    \n    // Top and bottom faces\n    translate([0, 0, size[2]/2 - radius])\n    cube([s, s, 2 * radius], center = true);\n    translate([0, 0, -size[2]/2 + radius])\n    cube([s, s, 2 * radius], center = true);\n    \n    // Side faces\n    rotate([0, 90, 0])\n    translate([0, 0, size[2]/2 - radius])\n    cube([s, size[2] - 2 * radius, 2 * radius], center = true);\n    rotate([90, 0, 0])\n    translate([0, 0, size[2]/2 - radius])\n    cube([size[2] - 2 * radius, s, 2 * radius], center = true);\n}\n\nmodule sugar_cube() {\n    difference() {\n        // Main rounded cube body\n        rounded_cube([24, 24, 16], 2);\n        \n        // Small indentations on top surface for realistic appearance\n        for(i = [0:4]) {\n            for(j = [0:4]) {\n                translate([\n                    -9 + i * 4.5, \n                    -9 + j * 4.5, \n                    8.1\n                ]) {\n                    scale([1, 1, 0.3])\n                    sphere(d = 2.5, $fn = 12);\n                }\n            }\n        }\n    }\n    \n    // Add surface crystals for realistic texture\n    // Top surface crystals\n    for(i = [0:15]) {\n        for(j = [0:15]) {\n            if((i + j) % 3 == 0) {\n                sugar_crystal(\n                    -11 + rand(i * j) * 22,\n                    -11 + rand(j * i) * 22,\n                    8.5 + rand(i + j) * 0.5\n                );\n            }\n        }\n    }\n    \n    // Side surface crystals\n    for(i = [0:10]) {\n        for(j = [0:5]) {\n            if((i + j) % 4 == 0) {\n                // Front face\n                sugar_crystal(\n                    -11 + rand(i * j) * 22,\n                    12.5,\n                    -7 + rand(i + j) * 14\n                );\n                \n                // Back face\n                sugar_crystal(\n                    -11 + rand(i * j) * 22,\n                    -12.5,\n                    -7 + rand(i + j) * 14\n                );\n                \n                // Left face\n                rotate([0, 90, 0])\n                sugar_crystal(\n                    -11 + rand(i * j) * 22,\n                    12.5,\n                    -7 + rand(i + j) * 14\n                );\n                \n                // Right face\n                rotate([0, 90, 0])\n                sugar_crystal(\n                    -11 + rand(i * j) * 22,\n                    -12.5,\n                    -7 + rand(i + j) * 14\n                );\n            }\n        }\n    }\n}\n\n// Main model\nsugar_cube();",
    "renders": true
  },
  {
    "fruit": "pineberry",
    "openscad_code": "// Pineberry - white strawberry with red seeds\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main dimensions\nberry_diameter = 30;\nberry_height = 25;\nseed_count = 150;\n\n// Main berry body - slightly flattened sphere\nmodule berry_body() {\n    difference() {\n        scale([1, 1, 0.8])\n            sphere(d = berry_diameter);\n        \n        // Flat bottom for printing\n        translate([0, 0, -berry_height/2])\n            cube([berry_diameter*2, berry_diameter*2, berry_height], center = true);\n    }\n}\n\n// Individual seed module\nmodule seed() {\n    // Red achene (seed) with small stem\n    color(\"red\")\n    union() {\n        // Main seed body\n        scale([1, 1, 0.5])\n            sphere(d = 2.2);\n        \n        // Small stem\n        translate([0, 0, 0.8])\n            cylinder(h = 1.2, d1 = 1.2, d2 = 0.8);\n    }\n}\n\n// Leaf structure\nmodule leaf() {\n    color(\"darkgreen\")\n    difference() {\n        // Main leaf shape\n        scale([1, 0.4, 0.1])\n            sphere(d = 8);\n        \n        // Leaf veins\n        for(i = [-1:1]) {\n            rotate([0, 0, i * 30])\n                translate([0, -2, -0.5])\n                    cube([6, 0.5, 1], center = true);\n        }\n    }\n}\n\n// Crown leaves\nmodule crown_leaves() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, berry_diameter/2 - 2, berry_height/2 - 2])\n                rotate([20, 0, 0])\n                    leaf();\n    }\n}\n\n// Distribute seeds over berry surface\nmodule distribute_seeds() {\n    // Fibonacci sphere distribution for natural seed placement\n    rnd = 1;\n    offset = 2;\n    increment = PI * (3 - sqrt(5));\n    \n    for(i = [0:seed_count-1]) {\n        y = ((i * offset) / seed_count) * 2 - 1 + (1 / seed_count);\n        r = sqrt(1 - y * y);\n        phi = ((i + rnd) % seed_count) * increment;\n        x = cos(phi) * r;\n        z = sin(phi) * r;\n        \n        // Only place seeds on upper hemisphere\n        if(z > -0.2) {\n            // Calculate position on berry surface\n            pos_x = x * berry_diameter/2;\n            pos_y = y * berry_diameter/2;\n            pos_z = z * berry_height/2 * 0.8;\n            \n            // Rotate seed to face outward\n            translate([pos_x, pos_y, pos_z])\n                rotate([0, 0, atan2(pos_y, pos_x)])\n                    rotate([90 - degrees(asin(z)), 0, 0])\n                        seed();\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // White berry body\n    color(\"white\")\n    berry_body();\n    \n    // Red seeds on surface\n    distribute_seeds();\n    \n    // Crown leaves at top\n    crown_leaves();\n}\n\n// Flat base for printing\ntranslate([0, 0, -berry_height/2 - 0.5])\n    color(\"white\")\n    cylinder(h = 1, d = berry_diameter * 0.8, $fn = 64);",
    "renders": true
  },
  {
    "fruit": "kiwi",
    "openscad_code": "// Kiwi model (medium complexity)\n// Overall size ~75mm long, 50mm diameter\n\n// Main body parameters\nbody_length = 75;\nbody_diameter = 50;\nskin_thickness = 1.5;\n\n// Fur texture parameters\nfur_height = 0.8;\nfur_density = 12;\n\n// Stem parameters\nstem_length = 8;\nstem_diameter = 4;\n\n// Internal color parameters\ncenter_radius = 20;\nseed_radius = 1.2;\nseed_count = 36;\n\n// Skin color\nskin_color = [150/255, 120/255, 80/255];\n\nmodule kiwi_body() {\n    // Main ellipsoid body\n    scale([1, 0.9, 1.3])\n    sphere(d=body_diameter, $fn=60);\n}\n\nmodule kiwi_skin() {\n    color(skin_color)\n    difference() {\n        kiwi_body();\n        \n        // Hollow out for internal structure\n        translate([0, 0, -5])\n        scale([0.9, 0.8, 1.15])\n        sphere(d=body_diameter - 2*skin_thickness, $fn=60);\n    }\n}\n\nmodule fur_texture() {\n    // Create fur texture on surface\n    for(i = [0:fur_density-1]) {\n        rotate([0, 0, i * 360/fur_density]) {\n            for(j = [-fur_density/2:fur_density/2]) {\n                rotate([j * 15, 0, 0]) {\n                    translate([0, 0, body_diameter/2 - 2])\n                    rotate([90, 0, 0])\n                    cylinder(h=fur_height, d1=0.5, d2=0.2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Brown stem at top\n    color([101/255, 67/255, 33/255])\n    translate([0, 0, body_diameter/2 * 1.3 + stem_length/2])\n    rotate([15, 0, 0])\n    cylinder(h=stem_length, d=stem_diameter, $fn=12);\n}\n\nmodule internal_structure() {\n    // Internal green flesh\n    color([134/255, 174/255, 82/255])\n    translate([0, 0, -5])\n    scale([0.9, 0.8, 1.15])\n    sphere(d=body_diameter - 2*skin_thickness, $fn=60);\n    \n    // Central white core\n    color([240/255, 240/255, 220/255])\n    translate([0, 0, -5])\n    sphere(d=center_radius, $fn=40);\n    \n    // Seeds in ring pattern\n    color([10/255, 10/255, 10/255])\n    for(i = [0:seed_count-1]) {\n        rotate([0, 0, i * 360/seed_count])\n        translate([center_radius * 0.7, 0, 0])\n        sphere(d=seed_radius, $fn=8);\n    }\n}\n\n// Assemble the kiwi\nunion() {\n    // External skin with texture\n    difference() {\n        kiwi_skin();\n        \n        // Cut in half for viewing interior\n        translate([-body_diameter, 0, 0])\n        cube([body_diameter*2, body_diameter*2, body_diameter*2]);\n    }\n    \n    // Add fur texture to visible surface\n    translate([0, 0, 0])\n    fur_texture();\n    \n    // Stem\n    stem();\n    \n    // Internal structure (only on cut half)\n    translate([body_diameter/4, 0, 0])\n    internal_structure();\n}",
    "renders": true
  },
  {
    "fruit": "dragon",
    "openscad_code": "// Dragon - Realistic Style, Medium Complexity\n// Dimensions: ~80mm nose to tail, 40mm tall\n\n// Body segments\nmodule bodySegment(r, h, taper=1) {\n    cylinder(r1=r, r2=r*taper, h=h, $fn=20);\n}\n\n// Leg with clawed foot\nmodule leg(len, thick) {\n    translate([0,0,len/4])\n        rotate([90,0,0])\n            cylinder(r=thick, h=len, $fn=12);\n    translate([0,0,0])\n        sphere(r=thick*1.2, $fn=12);\n    for(i=[-1,0,1]) {\n        rotate([0,0,i*30])\n            translate([i*thick/2, thick, -thick/2])\n                cube([thick/3, thick*1.5, thick/2], center=true);\n    }\n}\n\n// Wing with membrane\nmodule wing(span) {\n    difference() {\n        // Wing frame\n        for(i=[0,1]) {\n            mirror([i,0,0])\n                hull() {\n                    translate([0,0,0])\n                        sphere(r=span/15, $fn=8);\n                    translate([span/2,-span/4,0])\n                        sphere(r=span/20, $fn=8);\n                    translate([span,0,0])\n                        sphere(r=span/25, $fn=8);\n                }\n        }\n        \n        // Membrane holes\n        for(i=[1:3]) {\n            translate([i*span/4, -i*span/8, -1])\n                cube([span/6, span/5, span/5], center=true);\n        }\n    }\n}\n\n// Tail segments\nmodule tail(seg) {\n    for(i=[0:seg-1]) {\n        translate([0,0,-i*8])\n            scale([1-i*0.05, 1-i*0.05, 1])\n                rotate([0, i*5, 0])\n                    bodySegment(12-i, 8, 0.9);\n    }\n}\n\n// Head with snout and horns\nmodule head() {\n    union() {\n        // Main head\n        scale([1.2,1,1])\n            sphere(r=15, $fn=20);\n        \n        // Snout\n        translate([15,0,0])\n            scale([1.5,0.8,0.8])\n                sphere(r=10, $fn=16);\n        \n        // Horns\n        for(i=[-1,1]) {\n            translate([5,i*8,10])\n                rotate([i*-10,-20,0])\n                    cylinder(r1=3, r2=1, h=15, $fn=8);\n        }\n        \n        // Eyes\n        for(i=[-1,1]) {\n            translate([8,i*6,4])\n                sphere(r=3, $fn=8);\n        }\n    }\n}\n\n// Main dragon assembly\nunion() {\n    // Head\n    translate([25,0,20])\n        head();\n    \n    // Neck\n    translate([10,0,15])\n        bodySegment(10, 20, 0.7);\n    \n    // Body\n    translate([-10,0,12])\n        bodySegment(15, 35, 0.8);\n    \n    // Tail\n    translate([-45,0,10])\n        tail(5);\n    \n    // Legs\n    for(pos=[[-5,-10,5], [-5,10,5], [-25,-8,5], [-25,8,5]]) {\n        translate(pos)\n            leg(20, 4);\n    }\n    \n    // Wings\n    for(i=[-1,1]) {\n        translate([-5,i*15,25])\n            rotate([0,0,i*10])\n                rotate([0,-10,0])\n                    wing(40);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "pitaya",
    "openscad_code": "// Pitaya (Dragon Fruit) - Realistic Medium Complexity\n// Designed for 3D printing, ~70mm tall\n\n$fn = 36; // Smooth curves for printing\n\nmodule pitaya_body() {\n    // Main body - elongated ellipsoid\n    scale([1, 0.9, 1.3])\n    sphere(30);\n}\n\nmodule scales() {\n    // Generate overlapping scales across the body\n    for (a = [-60:20:60]) {\n        for (b = [0:45:315]) {\n            rotate([0, 0, b])\n            translate([0, 25 * cos(a), 35 * sin(a)])\n            rotate([90 - a, 0, 0])\n            scale([1, 0.7, 0.3])\n            cylinder(h = 8, r1 = 5, r2 = 2);\n        }\n    }\n}\n\nmodule leaf_cluster(height) {\n    // Create a cluster of leaves at top\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([0, 8, height])\n        rotate([90 - i/3, 0, 0])\n        scale([0.3, 1, 0.2])\n        cylinder(h = 15 + i/20, r1 = 3, r2 = 1);\n    }\n}\n\nmodule flower_remains() {\n    // Small dried flower parts at top\n    difference() {\n        cylinder(h = 5, r = 8);\n        translate([0, 0, -1])\n        cylinder(h = 7, r = 6);\n    }\n}\n\nmodule stem() {\n    // Flat bottom stem area for printing stability\n    translate([0, 0, -39])\n    cylinder(h = 2, r = 10);\n}\n\n// Main assembly\nunion() {\n    // Base body\n    pitaya_body();\n    \n    // Scales covering the surface\n    scales();\n    \n    // Top features\n    translate([0, 0, 39])\n    union() {\n        leaf_cluster(0);\n        flower_remains();\n    }\n    \n    // Flat bottom for printing\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "yellow",
    "openscad_code": "// Realistic yellow lemon for 3D printing\n// Medium complexity ~90 lines, no overhangs, 60 mm length\n\n// Lemon body parameters\nbody_length = 60;\nbody_diameter = 35;\ntip_length = 8;\nstem_diameter = 6;\nstem_length = 8;\n\n// Segment details\nsegments = 12;\nsegment_depth = 1.5;\nsegment_width = 1.2;\n\n// Surface texture bumps\nbumps_per_row = 8;\nbumps_rows = 6;\nbump_radius = 1.2;\n\nmodule lemon_body() {\n    // Main lemon shape\n    difference() {\n        hull() {\n            // Front tip\n            translate([body_length/2 - tip_length/2, 0, 0])\n                sphere(d=body_diameter);\n            // Rear stem end\n            translate([-body_length/2 + tip_length/2, 0, 0])\n                sphere(d=body_diameter);\n        }\n        \n        // Segment grooves\n        for(i = [0:segments-1]) {\n            rotate([0, 90, i * 360/segments])\n                translate([0, 0, -body_diameter/2 - 1])\n                    cube([body_length + 2, segment_width, body_diameter], center=true);\n        }\n    }\n}\n\nmodule surface_bumps() {\n    // Realistic porous texture\n    for(row = [0:bumps_rows-1]) {\n        for(col = [0:bumps_per_row-1]) {\n            rotate([0, 0, col * 360/bumps_per_row + row * 30])\n                translate([\n                    -body_length/2 + tip_length + row * (body_length - 2*tip_length)/bumps_rows,\n                    body_diameter/2 * cos(row * 30),\n                    body_diameter/2 * sin(row * 30)\n                ])\n                    sphere(d=bump_radius);\n        }\n    }\n}\n\nmodule stem() {\n    // Lemon stem with realistic taper\n    union() {\n        // Main stem\n        translate([-body_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(d1=stem_diameter, d2=stem_diameter*0.7, h=stem_length);\n        \n        // Stem base flare\n        translate([-body_length/2 - stem_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(d1=stem_diameter*1.3, d2=stem_diameter, h=stem_length/3);\n    }\n}\n\n// Main assembly\ncolor(\"yellow\") {\n    union() {\n        lemon_body();\n        \n        // Add surface texture\n        difference() {\n            lemon_body();\n            scale([0.98, 0.98, 0.98]) lemon_body();\n        }\n        \n        // Surface bumps\n        surface_bumps();\n        \n        // Green stem\n        color(\"darkgreen\") stem();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "white",
    "openscad_code": "// Realistic White Mouse - Medium Complexity\n// 3D printable model using only basic primitives\n\n// Overall dimensions: ~80mm long\n\n// Body parameters\nbody_len = 50;\nbody_wid = 30;\nbody_height = 25;\n\n// Head parameters\nhead_len = 20;\nhead_wid = 18;\nhead_height = 15;\n\n// Ears parameters\near_rad = 6;\near_thick = 2;\n\n// Tail parameters\ntail_len = 40;\ntail_rad = 3;\n\n// Leg parameters\nleg_len = 8;\nleg_rad = 4;\n\n// Paw parameters\npaw_rad = 5;\npaw_height = 2;\n\n// Eye parameters\neye_rad = 2.5;\n\n// Nose parameters\nnose_rad = 1.5;\n\n// Wall thickness for printing\nwall = 1.2;\n\n// Main body - rounded teardrop shape\nmodule body() {\n    // Main body using spheres and cubes\n    difference() {\n        union() {\n            // Central body - ellipsoid approximation\n            scale([body_len/2, body_wid/2, body_height/2])\n                sphere(d=body_height);\n            \n            // Tapered rear using scaled cube\n            translate([body_len/3, 0, -body_height/4])\n                scale([body_len/2, body_wid/1.5, body_height/3])\n                    cube([1,1,1], center=true);\n        }\n        \n        // Hollow out for 3D printing\n        scale([body_len/2 - wall, body_wid/2 - wall, body_height/2 - wall])\n            sphere(d=body_height - wall*2);\n    }\n}\n\n// Head - smaller sphere\nmodule head() {\n    difference() {\n        scale([head_len/2, head_wid/2, head_height/2])\n            sphere(d=head_height);\n        \n        // Hollow head\n        scale([head_len/2 - wall, head_wid/2 - wall, head_height/2 - wall])\n            sphere(d=head_height - wall*2);\n    }\n}\n\n// Ear - realistic mouse ear shape\nmodule ear() {\n    difference() {\n        // Outer ear - flattened sphere\n        scale([ear_rad, ear_rad, ear_thick])\n            sphere(d=ear_rad*2);\n        \n        // Inner ear detail\n        translate([0, 0, -0.2])\n            scale([ear_rad - 2, ear_rad - 2, ear_thick/2])\n                sphere(d=(ear_rad-2)*2);\n    }\n}\n\n// Leg with paw\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=leg_len, r=leg_rad, $fn=16);\n        \n        // Paw - slightly flattened sphere\n        translate([0, 0, leg_len])\n            scale([paw_rad, paw_rad, paw_height])\n                sphere(d=paw_rad*2);\n    }\n}\n\n// Tail - curved cylinder\nmodule tail() {\n    // Create curved tail using multiple cylinders\n    for(i=[0:5]) {\n        rotate([0, i*15, 0])\n            translate([0, 0, -i*tail_len/6])\n                cylinder(h=tail_len/6, r1=tail_rad - i*0.2, r2=tail_rad - (i+1)*0.2, $fn=12);\n    }\n}\n\n// Eye\nmodule eye() {\n    difference() {\n        sphere(r=eye_rad);\n        // Pupil\n        translate([eye_rad/2, 0, 0])\n            sphere(r=eye_rad/2);\n    }\n}\n\n// Nose\nmodule nose() {\n    sphere(r=nose_rad);\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side=[-1, 1]) {\n        for(i=[-15:15:15]) {\n            rotate([0, side*i, 0])\n                translate([0, side*8, 0])\n                    cylinder(h=8, r=0.3);\n        }\n    }\n}\n\n// Assemble the mouse\nunion() {\n    // Main body\n    body();\n    \n    // Head attached to body\n    translate([body_len/2 - 5, 0, body_height/2 - 5])\n        head();\n    \n    // Ears\n    translate([body_len/2 - 2, head_wid/2, head_height/2 + 2])\n        rotate([30, 0, 0])\n            ear();\n    translate([body_len/2 - 2, -head_wid/2, head_height/2 + 2])\n        rotate([30, 0, 0])\n            mirror([0,1,0])\n                ear();\n    \n    // Eyes\n    translate([body_len/2 + head_len/2 - 3, head_wid/4, head_height/2])\n        eye();\n    translate([body_len/2 + head_len/2 - 3, -head_wid/4, head_height/2])\n        eye();\n    \n    // Nose\n    translate([body_len/2 + head_len/2, 0, head_height/4])\n        nose();\n    \n    // Whiskers\n    translate([body_len/2 + head_len/2, 0, head_height/4])\n        whiskers();\n    \n    // Legs - positioned for 3D printing\n    translate([body_len/3, body_wid/2 - 2, -body_height/2])\n        leg();\n    translate([body_len/3, -body_wid/2 + 2, -body_height/2])\n        leg();\n    translate([-body_len/4, body_wid/2 - 2, -body_height/2])\n        leg();\n    translate([-body_len/4, -body_wid/2 + 2, -body_height/2])\n        leg();\n    \n    // Tail\n    translate([-body_len/2, 0, 0])\n        rotate([0, 90, 0])\n            tail();\n}",
    "renders": true
  },
  {
    "fruit": "passion",
    "openscad_code": "// Passion flower - realistic style, medium complexity\n// Size: 85mm diameter, optimized for 3D printing\n\n$fn = 36;  // Smooth curves for realistic appearance\n\nmodule petal(length, width, thickness) {\n    // Create an organic petal shape using stacked cylinders\n    union() {\n        for (i = [0:4]) {\n            h = thickness * (1 - i * 0.15);\n            translate([0, i * length/5, 0])\n                scale([width * (1 - i * 0.1), length/5, 1])\n                    cylinder(h=h, center=true);\n        }\n    }\n}\n\nmodule stamen(count) {\n    // Central reproductive parts\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count])\n            translate([8, 0, 0]) {\n                // Filament\n                color(\"yellow\")\n                    cylinder(h=12, d=1.2);\n                // Anther\n                translate([0, 0, 12])\n                    sphere(d=2.5);\n            }\n    }\n}\n\nmodule corona_filament(radius, height, count) {\n    // Distinctive passion flower corona\n    for (i = [0:count-1]) {\n        angle = i * 360/count;\n        rotate([0, 0, angle])\n            translate([radius, 0, 0]) {\n                // Base thickness\n                cylinder(h=height, d=2.5);\n                // Wavy top\n                translate([0, 0, height])\n                    rotate([0, 90, 0])\n                        rotate([0, 0, -angle])\n                            cylinder(h=5, d=1.5);\n            }\n    }\n}\n\nmodule passion_flower() {\n    // Base thickness for printing\n    base_thickness = 2;\n    \n    // Outer petals (10 petals)\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n            translate([0, 18, 0])\n                rotate([10, 0, -15])\n                    petal(25, 12, base_thickness);\n    }\n    \n    // Inner petals (5 petals)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72 + 36])\n            translate([0, 10, 0.5])\n                rotate([5, 0, -10])\n                    petal(20, 8, base_thickness);\n    }\n    \n    // Corona - two rings\n    translate([0, 0, 1])\n        corona_filament(10, 8, 60);\n    \n    translate([0, 0, 2])\n        corona_filament(8, 6, 40);\n    \n    // Central column\n    translate([0, 0, 2])\n        cylinder(h=10, d=6);\n    \n    // Stigma\n    translate([0, 0, 12])\n        sphere(d=8);\n    \n    // Stamens\n    stamen(20);\n    \n    // Base plate for printing stability\n    translate([0, 0, -1])\n        cylinder(h=2, d=85);\n}\n\n// Main model\nscale(0.85)\n    passion_flower();",
    "renders": true
  },
  {
    "fruit": "granadilla",
    "openscad_code": "// Granadilla (Passiflora edulis) – medium-complexity realistic model\n// Approx. 70 mm tall, printable without supports\n\n$fn = 36;               // general resolution\nwall = 1.2;             // 3D-printable wall thickness\n\n// ---- whole fruit ----------------------------------------------------------\nmodule granadilla() {\n    // outer shell\n    difference() {\n        // basic ellipsoid body\n        scale([1, 1, 1.15])\n        sphere(d = 55);\n\n        // hollow it\n        translate([0,0,-1])\n        scale([1-wall/27.5, 1-wall/27.5, 1.15-wall/27.5])\n        sphere(d = 55);\n    }\n\n    // wrinkled surface made by subtracting small spheres\n    for (a = [0:30:359])\n        for (b = [-60:30:60]) {\n            rotate([b, 0, a])\n            translate([0, 26.5, 0])\n            difference() {\n                sphere(d = 6);\n                translate([0, -1, 0])\n                sphere(d = 6.5);\n            }\n        }\n\n    // stem stub\n    translate([0, 0, 31])\n    cylinder(h1 = 8, h2 = 4, r1 = 4, r2 = 2, center = true);\n}\n\n// ---- internal pulp --------------------------------------------------------\nmodule pulp() {\n    color(\"darkorange\")\n    difference() {\n        // overall pulp volume\n        scale([0.85, 0.85, 0.9])\n        sphere(d = 50);\n\n        // hollow core\n        scale([0.85-wall/25, 0.85-wall/25, 0.9-wall/25])\n        sphere(d = 50);\n    }\n\n    // edible seeds (ellipsoids)\n    seed_count = 120;\n    for (i = [0:seed_count-1]) {\n        rand_phi = rands(0, 360, 1)[0];\n        rand_theta = rands(-80, 80, 1)[0];\n        rand_r = rands(5, 22, 1)[0];\n        rotate([rand_theta, 0, rand_phi])\n        translate([0, 0, rand_r])\n        rotate([90, 0, 0])\n        scale([1, 1.6, 1])\n        sphere(d = 2.4);\n    }\n}\n\n// ---- final assembly --------------------------------------------------------\ntranslate([0, 0, 35])\ngranadilla();\n\ntranslate([0, 0, 0])\npulp();",
    "renders": true
  },
  {
    "fruit": "tacso",
    "openscad_code": "// Realistic Taco Model - OpenSCAD\n// Medium complexity with proper 3D printing considerations\n\n$fn = 32;  // Smooth curves for printing\n\n// Main taco shell module\nmodule taco_shell() {\n    // Outer shell curved shape\n    difference() {\n        // Main curved shell body\n        rotate([90, 0, 0])\n        scale([1, 0.7, 1])\n        cylinder(h = 60, r1 = 25, r2 = 25);\n        \n        // Hollow out the inside\n        translate([0, 0, -1])\n        rotate([90, 0, 0])\n        scale([1, 0.7, 1])\n        cylinder(h = 62, r1 = 22, r2 = 22);\n        \n        // Cut to make semi-circle shape\n        translate([0, -30, 0])\n        cube([60, 30, 60], center = true);\n    }\n    \n    // Add shell texture ridges\n    for(i = [0:5]) {\n        rotate([0, 0, i * 15 - 37.5])\n        translate([0, 25, 0])\n        scale([1, 0.1, 1])\n        cylinder(h = 3, r = 24);\n    }\n}\n\n// Ground beef filling\nmodule ground_beef() {\n    translate([0, -5, 12])\n    rotate([90, 0, 0])\n    scale([1, 0.6, 0.3])\n    cylinder(h = 40, r1 = 20, r2 = 18);\n}\n\n// Lettuce strips\nmodule lettuce() {\n    color(\"green\")\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, -2, 15])\n        scale([0.1, 1, 0.5])\n        cube([15, 8, 3], center = true);\n    }\n}\n\n// Tomato cubes\nmodule tomatoes() {\n    color(\"red\")\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60 + 30])\n        translate([rand(8, 12), rand(-3, 3), 17])\n        cube([3, 3, 3], center = true);\n    }\n}\n\n// Shredded cheese\nmodule cheese() {\n    color(\"yellow\")\n    for(i = [0:12]) {\n        rotate([0, 0, i * 30])\n        translate([rand(5, 15), rand(-5, 5), 19])\n        scale([0.3, 2, 0.3])\n        cube([1, 3, 1], center = true);\n    }\n}\n\n// Sour cream dollop\nmodule sour_cream() {\n    color(\"white\")\n    translate([0, 0, 21])\n    sphere(r = 4);\n}\n\n// Assemble the complete taco\nunion() {\n    // Main shell\n    taco_shell();\n    \n    // Fillings - positioned to avoid overhangs\n    ground_beef();\n    lettuce();\n    tomatoes();\n    cheese();\n    sour_cream();\n}",
    "renders": true
  },
  {
    "fruit": "bananapass",
    "openscad_code": "// BananaPass.scad – medium-complexity realistic banana with NFC tag cavity\n// Overall length ≈ 95 mm, max width ≈ 30 mm, printable without supports\n\n$fn=36;\n\n// Main parameters -----------------------------------------------------------\ntotal_len = 95;     // total length of banana\nbase_rad  = 15;     // max radius at center\nwall      = 2.0;    // printable wall thickness\nnfc_len   = 42;     // NFC sticker length\nnfc_wid   = 25;     // NFC sticker width\nnfc_dep   = 0.4;    // cavity depth for sticker\n\n// Utility module for rounded ends ------------------------------------------\nmodule rounded_end(h, r) {\n    difference() {\n        sphere(r);\n        translate([0,0,-r])\n            cube([r*2.1, r*2.1, r], center=true);\n    }\n    translate([0,0,-h/2])\n        cylinder(h=h, r=r, center=true);\n}\n\n// Banana body ---------------------------------------------------------------\nmodule banana_body() {\n    union() {\n        // create curved body from stacked ellipses\n        for (i=[-45:5:45]) {\n            h = total_len * 0.55;\n            z = sin(i) * h;\n            x = cos(i) * (total_len/2);\n            sc = 1 - abs(i)/60;            // taper ends\n            translate([x, 0, z])\n                scale([sc, 1.0*sc, 0.8*sc])\n                rotate([0,90,0])\n                    cylinder(h=base_rad*2*sc, r1=base_rad*sc, r2=base_rad*sc*0.9, center=true);\n        }\n        // round tips\n        translate([-total_len/2, 0, -sin(45)*h]) rotate([0,0,-45])\n            rounded_end(base_rad*0.7, base_rad*0.7);\n        translate([ total_len/2, 0,  sin(45)*h]) rotate([0,0, 45])\n            rounded_end(base_rad*0.7, base_rad*0.7);\n    }\n}\n\n// NFC cavity inside banana --------------------------------------------------\nmodule nfc_cavity() {\n    // flat recess in upper inner curve\n    translate([0,0, sin(20)*total_len*0.55 - base_rad*0.4]) {\n        rotate([0,20,0]) {\n            cube([nfc_len, nfc_wid, nfc_dep + 0.1], center=true);\n        }\n    }\n}\n\n// Surface details -----------------------------------------------------------\nmodule banana_details() {\n    // subtle ridges along length\n    for (ang=[0:30:150]) {\n        rotate([0,0,ang])\n        translate([0,0, -base_rad*0.3])\n            scale([1,0.1,0.05])\n                cylinder(h=total_len*0.9, r=base_rad*1.1, center=true);\n    }\n    // small stem stub\n    translate([-total_len/2 - 2, 0, -sin(45)*total_len*0.55]) {\n        rotate([0,90,-90])\n            cylinder(h=6, r1=4, r2=2);\n    }\n}\n\n// Build the model -----------------------------------------------------------\ndifference() {\n    union() {\n        banana_body();\n        banana_details();\n    }\n    nfc_cavity();\n}\n\n// Optional flat base for printing stability\n%translate([0,0,-base_rad*0.8])\n    cube([total_len*1.1, base_rad*2.2, 0.2], center=true);",
    "renders": true
  },
  {
    "fruit": "granada",
    "openscad_code": "// Granada (pineapple grenade) – OpenSCAD\n// Scale: ~70 mm total length\n$fn=36;            // Good curves for medium complexity prints\n\n// Main body – cast-iron pineapple\nmodule body() {\n    difference() {\n        // Outer segmented shell\n        union() {\n            cylinder(h=55, d=50, $fn=50);               // main tube\n            // Segments (8 rows × 8 columns for the “pineapple” look)\n            for (row=[0:7]) {\n                for (col=[0:7]) {\n                    translate([\n                        25*cos(col*45),\n                        25*sin(col*45),\n                        5+row*6.5\n                    ])\n                    rotate([0, 0, col*45])\n                    cube([3, 3, 7], center=true);\n                }\n            }\n        }\n\n        // Hollow core\n        cylinder(h=57, d=30); \n    }\n}\n\n// Safety lever (thin curved arm)\nmodule lever() {\n    difference() {\n        // Arm shape\n        translate([0, 0, 55])\n        rotate([0, 90, 0])\n        linear_extrude(height=5, center=true)\n        polygon(points=[\n            [0,0], [2,0], [2,5], [0,5]\n        ]);\n        \n        // Cutaway for grip\n        translate([1, 0, 55])\n        rotate([0, 90, 0])\n        cylinder(h=6, d=1.5, center=true);\n    }\n}\n\n// Pin ring\nmodule pin() {\n    translate([0, 15, 55])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=3, d=4, center=true);\n        cylinder(h=4, d=2, center=true);\n    }\n}\n\n// Fuse cap on top\nmodule fuseCap() {\n    translate([0, 0, 55])\n    difference() {\n        cylinder(h=8, d=28);\n        cylinder(h=9, d=20);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    lever();\n    pin();\n    fuseCap();\n}",
    "renders": true
  },
  {
    "fruit": "black",
    "openscad_code": "// Black bass (Micropterus salmoides)\n// Realistic medium-complexity 3D printable model\n\n$fn = 36;\nwall = 1.2;\n\nmodule body() {\n    // Main body hull\n    hull() {\n        translate([-20,0,0]) sphere(d=20);\n        translate([25,0,0]) sphere(d=15);\n    }\n    \n    // Tail section\n    translate([30,0,0]) rotate([0,0,20]) cylinder(h=15, d1=12, d2=8);\n    translate([30,0,0]) rotate([0,0,-20]) cylinder(h=15, d1=12, d2=8);\n}\n\nmodule dorsal_fin() {\n    // First dorsal\n    for(i=[-5:5:15]) {\n        translate([i,0,12]) cube([4, 1.5, 8-i/2], center=true);\n    }\n    \n    // Second dorsal\n    for(i=[15:5:30]) {\n        translate([i,0,10-i/6]) cube([4, 1.5, 6-i/8], center=true);\n    }\n}\n\nmodule anal_fin() {\n    for(i=[20:5:35]) {\n        translate([i,0,-8+i/6]) cube([4, 1.5, 6-i/8], center=true);\n    }\n}\n\nmodule pectoral_fin() {\n    // Left fin\n    translate([0,-10,0]) rotate([0,30,90]) \n        cylinder(h=15, d1=8, d2=4);\n    \n    // Right fin\n    mirror([0,1,0]) translate([0,-10,0]) rotate([0,30,90]) \n        cylinder(h=15, d1=8, d2=4);\n}\n\nmodule pelvic_fin() {\n    // Left pelvic\n    translate([5,-7,-5]) rotate([0,45,45])\n        cylinder(h=12, d1=6, d2=3);\n    \n    // Right pelvic\n    mirror([0,1,0]) translate([5,-7,-5]) rotate([0,45,45])\n        cylinder(h=12, d1=6, d2=3);\n}\n\nmodule caudal_fin() {\n    // Upper lobe\n    translate([42,0,0]) rotate([0,0,20])\n        cylinder(h=20, d1=12, d2=2);\n    \n    // Lower lobe\n    translate([42,0,0]) rotate([0,0,-20])\n        cylinder(h=20, d1=12, d2=2);\n}\n\nmodule head_features() {\n    // Mouth\n    difference() {\n        translate([-22,0,-3]) sphere(d=8);\n        translate([-26,0,-3]) cube([10,6,6], center=true);\n    }\n    \n    // Eye socket left\n    difference() {\n        translate([-15,-7,2]) sphere(d=5);\n        translate([-15,-9,2]) sphere(d=3);\n    }\n    \n    // Eye socket right\n    mirror([0,1,0]) translate([-15,-7,2]) sphere(d=5);\n    \n    // Eyes\n    color(\"black\") {\n        translate([-15,-7.5,2]) sphere(d=2.5);\n        mirror([0,1,0]) translate([-15,-7.5,2]) sphere(d=2.5);\n    }\n}\n\nmodule gill_plates() {\n    for(angle=[0:15:45]) {\n        rotate([0,0,angle]) \n            translate([-10,-12,0]) cube([0.5,8,6], center=true);\n    }\n}\n\nmodule lateral_line() {\n    for(i=[-10:5:30]) {\n        translate([i,0,0]) sphere(d=1.5);\n    }\n}\n\n// Assembly\nscale([1,0.7,0.8]) {\n    union() {\n        // Main body\n        body();\n        \n        // Fins\n        dorsal_fin();\n        anal_fin();\n        pectoral_fin();\n        pelvic_fin();\n        caudal_fin();\n        \n        // Head details\n        head_features();\n        \n        // Scales pattern\n        gill_plates();\n        lateral_line();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "medjool",
    "openscad_code": "// Medjool date - medium complexity realistic style\n// Approx 60mm long x 20mm diameter\n\n// Main body parameters\nlength = 60;\nmax_diameter = 20;\ntip_taper = 0.7;\n\n// Surface details\nwrinkle_count = 12;\nwrinkle_depth = 1.5;\nwrinkle_width = 2;\n\n// Stem parameters\nstem_length = 8;\nstem_diameter = 3;\n\n// Skin texture parameters\ntexture_bumps = 30;\nbump_size = 0.5;\n\nmodule medjool_body() {\n    // Create main ellipsoid shape\n    scale([1, max_diameter/length, max_diameter/length]) \n        sphere(d=length, $fn=64);\n    \n    // Taper one end to create pointed tip\n    translate([length/2, 0, 0])\n        scale([tip_taper, tip_taper, tip_taper])\n            sphere(d=max_diameter, $fn=32);\n}\n\nmodule longitudinal_wrinkles() {\n    // Create wrinkle grooves along the length\n    for(i = [0:wrinkle_count-1]) {\n        rotate([0, 0, i * 360/wrinkle_count])\n            translate([0, max_diameter/2 + wrinkle_depth/2, 0])\n                scale([length * 1.1, wrinkle_width, wrinkle_depth])\n                    cube([1, 1, 1], center=true);\n    }\n}\n\nmodule surface_texture() {\n    // Add small bumps for realistic skin texture\n    for(i = [0:texture_bumps-1]) {\n        theta = rands(0, 360, 1)[0];\n        phi = rands(0, 180, 1)[0];\n        x = (length/2) * cos(phi) * 0.8;\n        y = (max_diameter/2) * sin(phi) * cos(theta) * 0.8;\n        z = (max_diameter/2) * sin(phi) * sin(theta) * 0.8;\n        \n        translate([x, y, z])\n            sphere(d=bump_size, $fn=8);\n    }\n}\n\nmodule stem() {\n    // Create the stem at the top\n    translate([-length/2 - stem_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=stem_length, d=stem_diameter, $fn=12);\n    \n    // Stem base flare\n    translate([-length/2, 0, 0])\n        sphere(d=stem_diameter * 1.5, $fn=12);\n}\n\n// Main construction\ndifference() {\n    union() {\n        // Main body\n        medjool_body();\n        \n        // Surface texture\n        surface_texture();\n    }\n    \n    // Cut longitudinal wrinkles\n    longitudinal_wrinkles();\n}\n\n// Add stem\nstem();",
    "renders": true
  },
  {
    "fruit": "barhi",
    "openscad_code": "// Barhi Date Palm Fruit - Realistic Style, Medium Complexity\n// Overall dimensions: ~75mm length\n\n// Main fruit body\nmodule fruit_body() {\n    // Core date shape - elongated oval\n    rotate([90, 0, 0])\n        scale([1, 1.2, 0.8])\n        sphere(d=20, $fn=32);\n}\n\n// Wrinkled skin texture using small subtracted cylinders\nmodule skin_texture() {\n    difference() {\n        fruit_body();\n        \n        // Create wrinkle pattern along length\n        for (i = [0:5:170]) {\n            rotate([90, i, 0])\n                translate([0, 0, -12])\n                    cylinder(h=25, d1=2, d2=1, $fn=8);\n        }\n        \n        // Add cross wrinkles\n        for (i = [-8:2:8]) {\n            rotate([0, 90, 0])\n                translate([i, 0, -12])\n                    cylinder(h=25, d1=1.5, d2=1, $fn=8);\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 10, 0])\n        rotate([90, 0, 0])\n            cylinder(h=8, d1=6, d2=4, $fn=16);\n}\n\n// Calyx (dried flower remnants)\nmodule calyx() {\n    difference() {\n        translate([0, 11, 0])\n            sphere(d=7, $fn=16);\n            \n        // Create star pattern\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([2.5, 10.5, 0])\n                    cube([5, 3, 3], center=true);\n        }\n    }\n}\n\n// Main stem\nmodule stem() {\n    translate([0, 11, 0])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=2, $fn=8);\n}\n\n// Natural indentations from growth\nmodule growth_marks() {\n    difference() {\n        skin_texture();\n        \n        // Lengthwise indentations\n        for (i = [0:30:150]) {\n            rotate([90, i, 0])\n                translate([0, 0, -11])\n                    cylinder(h=22, d1=4, d2=2, $fn=6);\n        }\n    }\n}\n\n// Slight asymmetry for realism\nmodule realistic_shape() {\n    scale([1, 1.05, 0.95])\n        growth_marks();\n}\n\n// Combine all parts\nunion() {\n    realistic_shape();\n    stem_base();\n    calyx();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "deglet",
    "openscad_code": "$fn = 50;\n\n// Overall scale factor (1 unit = 1 mm)\nscale_factor = 1.5;\n\n// Main body parameters\nbody_length = 60 * scale_factor;\nbody_width  = 12 * scale_factor;\nbody_height = 8  * scale_factor;\n\n// Stem parameters\nstem_length = 30 * scale_factor;\nstem_width  = 4  * scale_factor;\nstem_height = 4  * scale_factor;\n\n// Seed row parameters\nseed_rows   = 6;\nseeds_per_row = 10;\nseed_radius = 1.1 * scale_factor;\nseed_spacing = body_length / (seeds_per_row + 1);\n\n// Calyx (crown) parameters\ncalyx_petals = 5;\npetal_length = 7 * scale_factor;\npetal_width  = 3 * scale_factor;\npetal_thick  = 0.8 * scale_factor;\n\n// Main deglet module\nmodule deglet_nour() {\n    union() {\n        // Main body (elongated ellipsoid)\n        scale([1, 0.5, 0.5]) sphere(d = body_width);\n\n        // Stretch body forward\n        translate([body_length/2 - body_width/2, 0, 0])\n            scale([body_length/body_width, 0.5, 0.5])\n                sphere(d = body_width);\n\n        // Tapered rear\n        translate([-body_length/2 + body_width/2, 0, 0])\n            scale([0.5, 0.35, 0.35])\n                sphere(d = body_width);\n\n        // Stem\n        translate([-body_length/2 - stem_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = stem_length, d = stem_width);\n\n        // Seed rows\n        for (row = [0 : seed_rows-1]) {\n            angle = row * 360 / seed_rows;\n            for (i = [1 : seeds_per_row]) {\n                x = -body_length/2 + i * seed_spacing;\n                y = sin(angle) * (body_width/2 - seed_radius*2);\n                z = cos(angle) * (body_height/2 - seed_radius*2);\n                translate([x, y, z])\n                    sphere(r = seed_radius);\n            }\n        }\n\n        // Calyx petals\n        for (i = [0 : calyx_petals-1]) {\n            rotate([0, 0, i * 360 / calyx_petals])\n                translate([body_length/2 - 1, 0, 0])\n                    rotate([90, 0, -30])\n                        scale([petal_length, petal_width, petal_thick])\n                            sphere(d = 1);\n        }\n    }\n}\n\n// Create the deglet\ndeglet_nour();",
    "renders": true
  },
  {
    "fruit": "coconutdate",
    "openscad_code": "// Realistic Coconut Date\n// Medium complexity, 3D printable, ~70mm long\n\n// Main parameters\n$fn = 50;\nscale_factor = 1.5;\n\n// Coconut body\nmodule coconut_body() {\n    difference() {\n        // Main coconut sphere\n        scale([1, 0.9, 1.1]) sphere(d=50);\n        \n        // Three depressions at top\n        for(i=[0:120:240]) {\n            rotate([0, 0, i]) \n                translate([0, 20, 25]) \n                    rotate([15, 0, 0]) \n                        cylinder(h=10, d1=8, d2=4);\n        }\n        \n        // Bottom flat area\n        translate([0, 0, -25]) \n            cylinder(h=5, d=30);\n    }\n}\n\n// Coconut husk fibers\nmodule husk_fibers() {\n    for(angle=[0:15:360]) {\n        rotate([0, 0, angle]) {\n            translate([25, 0, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(h=50, d=2);\n            translate([20, 0, 10]) \n                rotate([60, 0, 0]) \n                    cylinder(h=40, d=1.5);\n            translate([15, 0, -10]) \n                rotate([120, 0, 0]) \n                    cylinder(h=35, d=1.5);\n        }\n    }\n}\n\n// Date fruit inside\nmodule date_fruit() {\n    color(\"saddlebrown\") {\n        translate([0, 0, -15]) {\n            // Main date body\n            scale([0.8, 0.6, 1.2]) sphere(d=35);\n            \n            // Wrinkle details\n            for(i=[0:30:330]) {\n                rotate([0, 0, i]) \n                    translate([10, 0, 5]) \n                        rotate([0, 45, 0]) \n                            cylinder(h=15, d1=3, d2=1);\n            }\n            \n            // Stem end\n            translate([0, 0, 22]) \n                cylinder(h=5, d=4);\n        }\n    }\n}\n\n// Coconut shell thickness\nmodule coconut_shell() {\n    difference() {\n        coconut_body();\n        scale([0.9, 0.8, 0.9]) \n            translate([0, 0, 2]) \n                sphere(d=48);\n    }\n}\n\n// Assembly\ndifference() {\n    // Full coconut with husk\n    union() {\n        coconut_shell();\n        husk_fibers();\n    }\n    \n    // Cutaway to show date inside\n    translate([-15, 0, 0]) \n        cube([40, 60, 100], center=true);\n}\n\n// Date visible in cutaway\ndate_fruit();\n\n// Print orientation helper\n%translate([0, 0, -30]) \n    color(\"gray\", 0.2) \n        cube([80, 80, 2], center=true);",
    "renders": true
  },
  {
    "fruit": "olive",
    "openscad_code": "// Realistic Olive Model (Medium Complexity)\n// 3D printable olive with stem and subtle surface detail\n\n// Main olive body\nmodule olive_body() {\n    difference() {\n        // Main body - slightly elongated sphere\n        scale([1.0, 1.0, 1.3])\n            sphere(d=40, $fn=100);\n            \n        // Subtle dents for realistic texture\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([0, 20, 0])\n                    scale([0.4, 0.4, 0.3])\n                        sphere(d=15, $fn=20);\n        }\n        \n        // Small imperfections\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 15, 15])\n                    scale([0.3, 0.3, 0.2])\n                        sphere(d=8, $fn=15);\n        }\n    }\n}\n\n// Stem attachment\nmodule stem_base() {\n    difference() {\n        // Main stem base - conical\n        union() {\n            cylinder(h=8, d1=6, d2=4, $fn=20);\n            translate([0, 0, 8])\n                scale([0.8, 0.8, 1])\n                    sphere(d=4, $fn=20);\n        }\n        \n        // Hollow center\n        cylinder(h=10, d=2, $fn=10);\n    }\n}\n\n// Stem with natural bend\nmodule stem() {\n    // Main stem\n    translate([0, 0, 8])\n        rotate([85, 0, 0])\n            difference() {\n                // Stem body\n                cylinder(h=25, d=3, $fn=12);\n                \n                // Core hole for printing\n                cylinder(h=25, d=1.5, $fn=8);\n            }\n    \n    // Natural bend segments\n    for(i=[0:3]) {\n        translate([0, 0, 8+i*6])\n            rotate([90-i*5, 0, 0])\n                translate([0, 0, 3])\n                    cylinder(h=3, d=2.5, $fn=8);\n    }\n}\n\n// Surface details for realistic look\nmodule surface_details() {\n    // Small bumps\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n            translate([0, 18, 10+sin(i*30)*5])\n                sphere(d=2, $fn=8);\n    }\n    \n    // Tiny indentations\n    for(i=[0:20]) {\n        rotate([0, 0, i*18])\n            translate([0, 19, 15+cos(i*20)*3])\n                scale([0.5, 0.5, 0.3])\n                    sphere(d=3, $fn=6);\n    }\n}\n\n// Assemble the olive\nunion() {\n    // Main body\n    olive_body();\n    \n    // Stem assembly\n    translate([0, 0, 40*1.3/2])\n        rotate([0, 0, 0])\n            union() {\n                stem_base();\n                stem();\n            }\n    \n    // Surface texture\n    translate([0, 0, 0])\n        surface_details();\n}",
    "renders": true
  },
  {
    "fruit": "mission",
    "openscad_code": "// Spanish Mission Building - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 60mm x 45mm\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main module\nmodule spanish_mission() {\n    \n    // Base foundation\n    translate([0, 0, 2]) \n        cube([80, 60, 4], center = true);\n    \n    // Main church building\n    translate([0, 0, 15]) \n        cube([70, 50, 26], center = true);\n    \n    // Bell tower\n    translate([-30, -15, 25]) {\n        // Tower base\n        cube([15, 15, 35], center = true);\n        \n        // Tower roof\n        translate([0, 0, 20]) \n            cylinder(h = 8, r1 = 10, r2 = 12);\n        \n        // Bell openings\n        for (i = [0:90:270]) {\n            rotate([0, 0, i]) \n                translate([0, 7, 18]) \n                    cube([6, 2, 6], center = true);\n        }\n    }\n    \n    // Front facade with arches\n    translate([0, 30, 15]) {\n        // Main arch\n        difference() {\n            cube([30, 5, 20], center = true);\n            translate([0, 3, 0]) \n                cylinder(h = 6, r = 10);\n        }\n        \n        // Side arches\n        for (x = [-20, 20]) {\n            translate([x, 0, 0]) {\n                difference() {\n                    cube([12, 5, 15], center = true);\n                    translate([0, 3, 0]) \n                        cylinder(h = 6, r = 5);\n                }\n            }\n        }\n    }\n    \n    // Roof tiles\n    translate([0, 0, 28]) {\n        // Main roof\n        difference() {\n            cube([74, 54, 6], center = true);\n            translate([0, 0, -3]) \n                cube([70, 50, 6], center = true);\n        }\n        \n        // Mission-style curved tiles\n        for (y = [-20:4:20]) {\n            translate([0, y, 3]) \n                cylinder(h = 70, r = 2);\n        }\n    }\n    \n    // Windows\n    module window() {\n        difference() {\n            cube([8, 4, 12], center = true);\n            translate([0, 2.5, 0]) \n                cylinder(h = 5, r = 3);\n        }\n    }\n    \n    // Side windows\n    for (y = [-15:15:15]) {\n        translate([35, y, 15]) \n            rotate([0, 90, 0]) \n                window();\n        translate([-35, y, 15]) \n            rotate([0, 90, 0]) \n                window();\n    }\n    \n    // Front door\n    translate([0, 32.5, 10]) {\n        difference() {\n            cube([12, 3, 18], center = true);\n            translate([0, 2, 0]) \n                cylinder(h = 5, r = 5);\n        }\n    }\n    \n    // Cross on bell tower\n    translate([-30, -15, 46]) {\n        cube([2, 10, 2], center = true);\n        cube([10, 2, 2], center = true);\n    }\n    \n    // Side buttresses for support\n    for (x = [-30, 30]) {\n        translate([x, 0, 15]) \n            cube([4, 50, 26], center = true);\n    }\n}\n\n// Render the mission\nspanish_mission();",
    "renders": true
  },
  {
    "fruit": "manzanilla",
    "openscad_code": "// Manzanilla (Chamomile flower) - realistic style, medium complexity\n// Approx 70 mm high stem with 45 mm flower head\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Stem height and flower parameters\nstem_h = 70;\nflower_r = 22.5;\npetal_l = 15;\npetal_w = 4;\ndisk_h = 6;\n\nmodule stem() {\n    // Main stem - slightly tapered\n    cylinder(h = stem_h, r1 = 2, r2 = 1.5, center = false);\n\n    // Small leaf pair 1/3 way up\n    translate([0, 0, stem_h * 0.35]) rotate([0, 0, 120]) {\n        difference() {\n            scale([0.3, 1, 0.1]) sphere(r = 10);\n            translate([-1, 7, 0]) rotate([90, 0, 0]) cylinder(h = 4, r = 1, center = true);\n        }\n    }\n\n    // Second leaf pair higher up\n    translate([0, 0, stem_h * 0.6]) rotate([0, 0, -45]) {\n        difference() {\n            scale([0.3, 1, 0.1]) sphere(r = 8);\n            translate([-1, 5.5, 0]) rotate([90, 0, 0]) cylinder(h = 3, r = 0.8, center = true);\n        }\n    }\n}\n\nmodule disk_florets() {\n    // Central disk of tiny florets\n    cylinder(h = disk_h, r = flower_r * 0.4, center = false);\n\n    // Small spheres for florets\n    for (i = [0:5:360]) {\n        rotate([0, 0, i]) translate([flower_r * 0.3, 0, disk_h * 0.7]) \n            sphere(r = 0.6);\n    }\n    for (i = [0:5:360]) {\n        rotate([0, 0, i + 2.5]) translate([flower_r * 0.25, 0, disk_h * 0.5]) \n            sphere(r = 0.5);\n    }\n}\n\nmodule white_petals() {\n    // 12 white petals around disk\n    for (i = [0:30:360]) {\n        rotate([0, 0, i]) translate([0, flower_r * 0.4, disk_h * 0.9]) {\n            rotate([90, 0, 0]) scale([petal_w, petal_l, 1]) \n                cylinder(h = 0.8, r = petal_w * 0.5, center = true);\n        }\n    }\n}\n\nmodule flower_head() {\n    translate([0, 0, stem_h]) {\n        // Central yellow disk\n        color(\"gold\") disk_florets();\n\n        // White petals\n        color(\"white\") white_petals();\n    }\n}\n\n// Assemble the plant\nstem();\nflower_head();",
    "renders": true
  },
  {
    "fruit": "kalamata",
    "openscad_code": "// Kalamata olive - realistic style, medium complexity\n// Designed for 3D printing, no overhangs, proper wall thickness\n// Scale: ~70mm length\n// Wall thickness: 1.5mm for durability\n\n// Main parameters\nolive_length = 70;\nolive_width = 35;\nstem_length = 12;\nstem_diameter = 4;\nwall_thickness = 1.5;\n$fn = 64;\n\n// Main olive body - almond shape\nmodule olive_body() {\n    // Create almond shape using scaled spheres\n    translate([0, 0, 0])\n    scale([1, 0.6, 1])\n    sphere(r = olive_width/2);\n}\n\n// Stem attachment point - slightly recessed\nmodule stem_base() {\n    translate([0, 0, olive_length/2 - 2])\n    cylinder(h = 4, r1 = stem_diameter/2 + 2, r2 = stem_diameter/2 + 1);\n}\n\n// Stem - slightly curved for realism\nmodule stem() {\n    translate([0, 0, olive_length/2])\n    rotate([0, -5, 0])\n    cylinder(h = stem_length, r = stem_diameter/2);\n}\n\n// Characteristic wrinkle patterns on olive surface\nmodule wrinkles() {\n    // Longitudinal wrinkles\n    for (i = [0:15:345]) {\n        rotate([0, 0, i])\n        translate([olive_width/2 - 1, -0.5, 0])\n        scale([1, 0.3, 1.2])\n        sphere(r = 1.5);\n    }\n}\n\n// Surface texture - small pits\nmodule surface_pits() {\n    // Random small indentations\n    for (i = [0:30:359]) {\n        for (j = [20:20:olive_length-20]) {\n            rotate([0, i, 0])\n            translate([olive_width/2 * sin(i) * 0.8, 0, j - olive_length/2])\n            sphere(r = 0.8);\n        }\n    }\n}\n\n// Hollow center for 3D printing\nmodule hollow_center() {\n    // Scale slightly smaller for hollow center\n    scale([0.85, 0.5, 0.85])\n    olive_body();\n}\n\n// Small drainage hole at bottom\nmodule drainage_hole() {\n    translate([0, 0, -olive_length/2 + 2])\n    cylinder(h = 5, r = 2);\n}\n\n// Assemble the complete olive\nunion() {\n    // Main olive body shell\n    difference() {\n        olive_body();\n        hollow_center();\n    }\n    \n    // Stem base\n    stem_base();\n    \n    // Stem\n    stem();\n    \n    // Surface details\n    intersection() {\n        wrinkles();\n        olive_body();\n    }\n    \n    // Add subtle surface texture\n    difference() {\n        olive_body();\n        surface_pits();\n    }\n    \n    // Drainage hole for hollow print\n    drainage_hole();\n}\n\n// Add subtle color indication (commented for printing)\n// color([0.2, 0.15, 0.1]) olive_body();",
    "renders": true
  },
  {
    "fruit": "gordal",
    "openscad_code": "// OpenSCAD Gordal Olive – realistic, medium complexity\n// Overall height ≈ 68 mm, printable without supports\n\nscale_factor = 1.0;\n$fn = 36;\n\n// ---- main body ----\nmodule olive_body() {\n    difference() {\n        // outer ellipsoid\n        scale([1, 1, 1.15])\n        sphere(d = 46 * scale_factor);\n\n        // longitudinal groove\n        translate([0, -1, -25 * scale_factor])\n        rotate([0, 0, 0])\n        cube([2 * scale_factor, 60 * scale_factor, 50 * scale_factor], center = true);\n    }\n}\n\n// ---- stylized pedicel (stem) ----\nmodule stem() {\n    translate([0, 0, 24 * scale_factor])\n    rotate([0, 0, 5]) // slight natural kink\n    cylinder(d1 = 3.5 * scale_factor, d2 = 2.0 * scale_factor, h = 12 * scale_factor, $fn = 12);\n}\n\n// ---- small lenticel spots ----\nmodule lenticel(pos) {\n    translate(pos)\n    sphere(d = 1.2 * scale_factor);\n}\n\n// ---- surface bumps for realism ----\nmodule bumps() {\n    for (i = [0:5:60]) {\n        rotate([0, 90, i])\n        translate([23 * scale_factor, 0, 0])\n        sphere(d = 2.5 * scale_factor);\n    }\n}\n\n// ---- final assembly ----\nunion() {\n    olive_body();\n    stem();\n\n    // lenticels scattered on surface\n    lenticel([15, 10, 18]);\n    lenticel([-12, 8, 15]);\n    lenticel([8, -14, 12]);\n    lenticel([-10, -10, 20]);\n    lenticel([5, 15, 10]);\n\n    // subtle bumps\n    bumps();\n}",
    "renders": true
  },
  {
    "fruit": "chinese",
    "openscad_code": "// Chinese Dragon Head - Realistic Style, Medium Complexity\n// Designed for 3D printing (50mm x 40mm x 30mm)\n\n$fn = 30;\n\n// Main module\nmodule dragon_head() {\n    // Head base\n    union() {\n        // Skull structure\n        skull();\n        \n        // Eyes\n        left_eye();\n        right_eye();\n        \n        // Nose\n        nose();\n        \n        // Mouth\n        mouth();\n        \n        // Horns\n        left_horn();\n        right_horn();\n        \n        // Whiskers\n        whiskers();\n        \n        // Neck base\n        neck();\n    }\n}\n\n// Skull structure with proper wall thickness\nmodule skull() {\n    difference() {\n        // Main head shape\n        scale([1.2, 0.8, 1])\n            sphere(15);\n        \n        // Hollow interior for printing\n        scale([1.1, 0.7, 0.9])\n            sphere(14);\n        \n        // Eye sockets\n        translate([-8, 10, 5])\n            sphere(4);\n        translate([8, 10, 5])\n            sphere(4);\n        \n        // Nostril holes\n        translate([-3, -12, 0])\n            rotate([0, 40, 0])\n            cylinder(h=8, r=2);\n        translate([3, -12, 0])\n            rotate([0, 40, 0])\n            cylinder(h=8, r=2);\n    }\n}\n\n// Eye with proper thickness\nmodule left_eye() {\n    translate([-8, 10, 5]) {\n        // Eyeball\n        color(\"white\")\n        sphere(3);\n        \n        // Pupil\n        color(\"black\")\n        translate([0, 0, 2.5])\n        scale([0.8, 0.8, 0.2])\n        sphere(2);\n    }\n}\n\nmodule right_eye() {\n    translate([8, 10, 5]) {\n        color(\"white\")\n        sphere(3);\n        \n        color(\"black\")\n        translate([0, 0, 2.5])\n        scale([0.8, 0.8, 0.2])\n        sphere(2);\n    }\n}\n\n// Nose ridge\nmodule nose() {\n    translate([0, -10, 3]) {\n        difference() {\n            // Main nose bridge\n            scale([1, 0.4, 0.3])\n            cube([8, 15, 5], center=true);\n            \n            // Hollow center\n            scale([0.8, 0.3, 0.2])\n            cube([8, 15, 5], center=true);\n        }\n    }\n}\n\n// Mouth with teeth\nmodule mouth() {\n    difference() {\n        // Upper jaw\n        translate([0, -15, -5])\n        rotate([20, 0, 0])\n        scale([1, 0.5, 0.3])\n        cube([12, 8, 5], center=true);\n        \n        // Mouth cavity\n        translate([0, -15, -5])\n        rotate([20, 0, 0])\n        scale([0.8, 0.4, 0.2])\n        cube([12, 8, 5], center=true);\n    }\n    \n    // Teeth\n    for(i = [-5:2:5]) {\n        translate([i, -15, -3])\n        rotate([20, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=2, r=1);\n    }\n}\n\n// Left horn\nmodule left_horn() {\n    translate([-10, 0, 15]) {\n        rotate([0, 0, -20])\n        scale([0.5, 0.5, 1])\n        cylinder(h=12, r1=3, r2=1);\n    }\n}\n\n// Right horn\nmodule right_horn() {\n    translate([10, 0, 15]) {\n        rotate([0, 0, 20])\n        scale([0.5, 0.5, 1])\n        cylinder(h=12, r1=3, r2=1);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    // Left whiskers\n    for(i = [0:30:120]) {\n        translate([-15, -8, -3]) {\n            rotate([0, 0, i])\n            scale([0.2, 0.2, 1])\n            cylinder(h=8, r=0.5);\n        }\n    }\n    \n    // Right whiskers\n    for(i = [60:30:180]) {\n        translate([15, -8, -3]) {\n            rotate([0, 0, i])\n            scale([0.2, 0.2, 1])\n            cylinder(h=8, r=0.5);\n        }\n    }\n}\n\n// Neck connection\nmodule neck() {\n    translate([0, 0, -15]) {\n        scale([0.8, 0.8, 1])\n        cylinder(h=10, r1=10, r2=8);\n    }\n}\n\n// Scale to proper printing size\nscale([1.5, 1.5, 1.5])\ndragon_head();",
    "renders": true
  },
  {
    "fruit": "indian",
    "openscad_code": "// Indian Figure - Realistic Style, Medium Complexity\n// Height: 80mm, 3D-printable with 2mm wall thickness\n\n$fn = 30;\n\n// Main module\nmodule indian_figure() {\n    // Body proportions\n    head_height = 14;\n    torso_height = 30;\n    legs_height = 36;\n    \n    // Head\n    translate([0, 0, torso_height + legs_height + head_height/2])\n        head(head_height);\n    \n    // Torso\n    translate([0, 0, legs_height + torso_height/2])\n        torso(torso_height);\n    \n    // Legs\n    translate([0, 0, legs_height/2])\n        legs(legs_height);\n    \n    // Arms\n    // Left arm\n    translate([-8, 0, legs_height + torso_height - 8])\n        rotate([0, 0, 15])\n            arm();\n    \n    // Right arm\n    translate([8, 0, legs_height + torso_height - 8])\n        rotate([0, 0, -15])\n            arm();\n}\n\nmodule head(h) {\n    // Skull\n    difference() {\n        sphere(h/2);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([side * 3, h/2 - 2, 0])\n                sphere(2);\n        }\n        \n        // Mouth cavity\n        translate([0, h/2 - 1, -3])\n            cube([6, 3, 2], center=true);\n    }\n    \n    // Nose\n    translate([0, h/2 - 1, 0])\n        rotate([90, 0, 0])\n            cylinder(h=5, r1=2, r2=1);\n    \n    // Turban\n    difference() {\n        // Main turban wrap\n        cylinder(h=8, r1=h/2 + 4, r2=h/2 + 3);\n        \n        // Head hole\n        translate([0, 0, -1])\n            cylinder(h=10, r=h/2);\n    }\n    \n    // Turban detail\n    for(i = [0:6]) {\n        rotate([0, 0, i * 60])\n            translate([h/2 + 3.5, 0, 4])\n                cube([2, 1, 2], center=true);\n    }\n}\n\nmodule torso(h) {\n    // Chest\n    difference() {\n        scale([1.2, 0.8, 1])\n            cylinder(h=h, r1=10, r2=8);\n        \n        // Neck hole\n        translate([0, 0, h])\n            cylinder(h=5, r=4);\n    }\n    \n    // Kurta collar\n    translate([0, 0, h - 2])\n        difference() {\n            cylinder(h=3, r1=11, r2=10);\n            cylinder(h=3, r1=7, r2=6);\n        }\n    \n    // Dhoti\n    translate([0, 0, -2])\n        cylinder(h=12, r1=9, r2=10);\n}\n\nmodule legs(h) {\n    // Left leg\n    translate([-3, 0, 0]) {\n        difference() {\n            cylinder(h=h, r=4);\n            // Foot space\n            translate([0, 0, -h/2 - 1])\n                cube([8, 10, 2], center=true);\n        }\n        \n        // Foot\n        translate([0, 2, -h/2])\n            cube([6, 12, 4], center=true);\n    }\n    \n    // Right leg (mirrored)\n    translate([3, 0, 0])\n        mirror([1, 0, 0])\n            children(0);\n}\n\nmodule arm() {\n    // Upper arm\n    rotate([90, 0, 0])\n        cylinder(h=12, r=2.5);\n    \n    // Lower arm\n    translate([0, 12, 0])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=2);\n    \n    // Hand\n    translate([0, 22, 0])\n        sphere(2.5);\n}\n\n// Generate figure\nindian_figure();",
    "renders": true
  },
  {
    "fruit": "starfruit",
    "openscad_code": "$fn=90;\n\n// Overall dimensions\nfruit_d = 60;           // diameter across ribs\nfruit_l = 80;           // length along axis\nwall_t = 2;             // printable wall thickness\n\n// Rib parameters\nribs = 5;               // number of ridges (starfruit has 5)\nrib_w = 8;              // width of each rib at base\nrib_h = 6;              // height of rib above core\nrib_taper = 0.7;        // how much rib shrinks toward tips\n\n// Ridge details\nridge_w = 1.5;          // small ridge along the top of each rib\nridge_h = 1.0;\n\n// End details\ntip_r = 3;              // radius of rounded tips\nstem_r = 4;             // radius of stem remnant\nstem_h = 3;\n\nmodule starfruit_core(){\n    // Central ellipsoid body\n    scale([1, 1, fruit_l/fruit_d])\n    sphere(d=fruit_d - 2*rib_h);\n}\n\nmodule single_rib(id){\n    // Angle for this rib\n    a = id*360/ribs;\n    \n    rotate([0, 0, a])\n    translate([0, 0, -fruit_l/2])\n    union(){\n        // Main rib body as tapered hull\n        hull(){\n            // Base of rib\n            translate([0, fruit_d/2 - rib_h - wall_t, 0])\n                cube([rib_w, rib_h, wall_t], center=true);\n                \n            // Mid-rib\n            translate([0, fruit_d/2 - rib_h/2 - wall_t, fruit_l/4])\n                cube([rib_w*rib_taper, rib_h*rib_taper, wall_t], center=true);\n                \n            // Tip of rib\n            translate([0, fruit_d/2 - rib_h*rib_taper/2 - wall_t, fruit_l/2 - tip_r])\n                cube([rib_w*rib_taper*rib_taper, rib_h*rib_taper*rib_taper, wall_t], center=true);\n        }\n        \n        // Small ridge along top of rib\n        hull(){\n            for(z=[0:fruit_l/8:fruit_l]){\n                scale([1-z/(fruit_l*2), 1-z/(fruit_l*2), 1])\n                translate([0, fruit_d/2 - wall_t, z])\n                    cube([ridge_w, ridge_h, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule end_rounding(){\n    // Round the tips for realism\n    translate([0, 0, fruit_l/2])\n        sphere(r=tip_r);\n    \n    translate([0, 0, -fruit_l/2])\n        sphere(r=tip_r);\n}\n\nmodule stem_remant(){\n    // Small stem on one end\n    translate([0, 0, fruit_l/2 + stem_h/2])\n        cylinder(r1=stem_r, r2=stem_r*0.8, h=stem_h, $fn=20);\n}\n\n// Build the fruit\ndifference(){\n    union(){\n        // Core body\n        starfruit_core();\n        \n        // Ribs around the body\n        for(i=[0:ribs-1]){\n            single_rib(i);\n        }\n        \n        // End rounding\n        end_rounding();\n        \n        // Stem\n        stem_remant();\n    }\n    \n    // Hollow out the inside for printing\n    scale([0.8, 0.8, 0.9])\n    translate([0, 0, -fruit_l/2])\n    cylinder(d=fruit_d - 2*rib_h - 2*wall_t, h=fruit_l + 2, $fn=60);\n}",
    "renders": true
  },
  {
    "fruit": "fuyu",
    "openscad_code": "// Realistic Fuyu Persimmon - Medium complexity, 3D printable\n// Approx 60mm diameter\n\n$fn = 48;\n\n// Main parameters\nfruit_d = 58;\nfruit_h = 45;\ncalyx_d = 20;\ncalyx_h = 8;\nstem_l = 15;\nstem_d = 6;\n\nmodule fuyu_persimmon() {\n    // Main fruit body - slightly flattened sphere\n    difference() {\n        // Base shape - ellipsoid\n        scale([1, 1, 0.8])\n        sphere(d = fruit_d);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -fruit_h/2])\n        cube([fruit_d*1.2, fruit_d*1.2, 5], center = true);\n        \n        // Create calyx cavity\n        translate([0, 0, fruit_h/2 - 2])\n        cylinder(h = 8, d1 = calyx_d + 2, d2 = calyx_d, center = false);\n    }\n    \n    // Add slight indentations for realistic shape\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([fruit_d/2 - 5, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = 15, d1 = 8, d2 = 0, center = true);\n    }\n    \n    // Calyx (leafy top)\n    translate([0, 0, fruit_h/2])\n    calyx();\n    \n    // Stem\n    translate([0, 0, fruit_h/2 + calyx_h])\n    rotate([0, 0, 15])\n    cylinder(h = stem_l, d = stem_d, center = false);\n}\n\nmodule calyx() {\n    // Base calyx disk\n    difference() {\n        cylinder(h = calyx_h, d = calyx_d);\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cylinder(h = calyx_h + 2, d = stem_d);\n    }\n    \n    // Calyx leaves\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([calyx_d/2 - 2, 0, calyx_h/2])\n        rotate([90, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = 12, d1 = 6, d2 = 3, center = true);\n    }\n}\n\n// Create the fruit\nfuyu_persimmon();",
    "renders": true
  },
  {
    "fruit": "hachiya",
    "openscad_code": "// Realistic Hachiya Persimmon Model - Medium Complexity\n// 3D printable with no overhangs, approximately 70mm tall\n\n$fn = 48;\n\n// Main parameters\nfruit_height = 70;\nfruit_width = 65;\ncalyx_size = 15;\nstem_length = 12;\nstem_diameter = 4;\n\n// Main fruit body - acorn shape\nmodule fruit_body() {\n    // Base sphere for main shape\n    translate([0, 0, fruit_height/3])\n    scale([1, 1, 1.3])\n    sphere(d = fruit_width);\n    \n    // Add bottom bulge for characteristic hachiya shape\n    translate([0, 0, -fruit_height/4])\n    scale([1.2, 1.2, 0.8])\n    sphere(d = fruit_width * 0.9);\n}\n\n// Four-lobed calyx at top\nmodule calyx() {\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, calyx_size/3, fruit_height/1.5])\n        scale([0.7, 1, 1])\n        sphere(d = calyx_size);\n    }\n    \n    // Central calyx sphere\n    translate([0, 0, fruit_height/1.5])\n    sphere(d = calyx_size * 0.8);\n}\n\n// Stem with slight curve\nmodule stem() {\n    // Main stem\n    translate([0, 0, fruit_height/1.5 + stem_length/2])\n    cylinder(h = stem_length, d = stem_diameter, center = true);\n    \n    // Stem tip\n    translate([0, 0, fruit_height/1.5 + stem_length])\n    sphere(d = stem_diameter * 1.2);\n    \n    // Small stem segments for realistic texture\n    for (z = [0:3:stem_length-3]) {\n        translate([0, 0, fruit_height/1.5 + z])\n        cylinder(h = 2, d = stem_diameter * 1.1);\n    }\n}\n\n// Surface indentations for realistic texture\nmodule surface_details() {\n    // Vertical ridges around fruit\n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([fruit_width/2 - 1, 0, 0])\n        scale([1, 0.3, 1])\n        rotate([90, 0, 0])\n        cylinder(h = fruit_height * 0.8, d = 3, center = true);\n    }\n    \n    // Horizontal band details\n    for (z = [-20:10:20]) {\n        translate([0, 0, z])\n        scale([1, 1, 0.2])\n    rotate_extrude()\n        translate([fruit_width/2 - 1, 0, 0])\n        circle(d = 2);\n    }\n}\n\n// Bottom indentation\nmodule bottom_indent() {\n    translate([0, 0, -fruit_height/3])\n    scale([1, 1, 0.5])\n    sphere(d = fruit_width * 0.4);\n}\n\n// Assemble the complete hachiya\nunion() {\n    // Main fruit\n    difference() {\n        fruit_body();\n        \n        // Hollow for 3D printing\n        translate([0, 0, -5])\n        scale([0.9, 0.9, 0.9])\n        fruit_body();\n    }\n    \n    calyx();\n    \n    stem();\n    \n    // Add surface details\n    difference() {\n        union() {\n            fruit_body();\n        }\n        // Don't subtract details, just use them for surface\n    }\n    \n    // Bottom indentation\n    difference() {\n        union() {\n            fruit_body();\n        }\n        bottom_indent();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "jiro",
    "openscad_code": "// JiRo (Japanese Sandal) - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions\nsole_length = 85;\nsole_width = 35;\nsole_thickness = 8;\nthong_height = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Sole with tread pattern\nmodule sole() {\n    difference() {\n        // Main sole shape\n        hull() {\n            cube([sole_length, sole_width, sole_thickness], center=true);\n            translate([0, 0, -sole_thickness/2])\n                cylinder(h=sole_thickness, d=sole_width*0.9, center=true);\n        }\n        \n        // Tread grooves - cut from bottom\n        translate([0, 0, -sole_thickness/2 + 0.5])\n            for (i = [-3:3]) {\n                translate([i*10, 0, 0])\n                    cube([2, sole_width*0.9, 1], center=true);\n            }\n        \n        // Arch support cavity\n        translate([0, 0, -sole_thickness/2 + 2])\n            cylinder(h=4, d1=sole_width*0.6, d2=sole_width*0.4, center=true);\n    }\n}\n\n// Thong post between toes\nmodule thong_post() {\n    // Main post\n    cylinder(h=thong_height, d=6, center=false);\n    \n    // Rounded top for comfort\n    translate([0, 0, thong_height])\n        sphere(d=6);\n}\n\n// Side straps\nmodule side_straps() {\n    // Left strap\n    translate([-sole_length/4, sole_width/2 - wall_thickness, sole_thickness])\n        rotate([0, 30, 0])\n            cylinder(h=20, d=wall_thickness*2, center=false);\n    \n    // Right strap\n    translate([sole_length/4, sole_width/2 - wall_thickness, sole_thickness])\n        rotate([0, -30, 0])\n            cylinder(h=20, d=wall_thickness*2, center=false);\n    \n    // Strap connectors\n    hull() {\n        translate([-sole_length/4, sole_width/2 - wall_thickness, sole_thickness + 10])\n            sphere(d=wall_thickness*2);\n        translate([sole_length/4, sole_width/2 - wall_thickness, sole_thickness + 10])\n            sphere(d=wall_thickness*2);\n        translate([0, 0, sole_thickness + thong_height])\n            sphere(d=wall_thickness*2);\n    }\n}\n\n// Heel cup for stability\nmodule heel_cup() {\n    difference() {\n        // Curved heel support\n        translate([sole_length/2 - 10, 0, sole_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=sole_width*1.1, center=true);\n        \n        // Remove center to create cup shape\n        translate([sole_length/2 - 10, 0, sole_thickness/2])\n            cube([25, sole_width*0.9, sole_thickness*2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main sole\n    sole();\n    \n    // Thong post\n    translate([0, 0, sole_thickness])\n        thong_post();\n    \n    // Side straps\n    side_straps();\n    \n    // Heel cup\n    heel_cup();\n}",
    "renders": true
  },
  {
    "fruit": "giant",
    "openscad_code": "// Giant - Realistic style, medium complexity\n// Height ~80mm, printable without supports\n\n// Basic proportions module\nmodule giant_body() {\n    // Torso\n    union() {\n        // Chest\n        translate([0, 0, 30])\n            scale([1, 0.7, 1.3])\n                sphere(12, $fn=20);\n        \n        // Abdomen\n        translate([0, 0, 20])\n            scale([1.1, 0.8, 1])\n                cylinder(h=15, r1=10, r2=9, $fn=20);\n                \n        // Pelvis\n        translate([0, -5, 15])\n            scale([1.3, 0.8, 0.8])\n                sphere(8, $fn=16);\n    }\n}\n\nmodule giant_arms() {\n    // Left arm\n    translate([-16, 0, 35]) {\n        rotate([0, 0, 15])\n            union() {\n                // Upper arm\n                cylinder(h=20, r=4, $fn=12);\n                \n                // Elbow\n                translate([0, 0, -20])\n                    sphere(4.5, $fn=12);\n                \n                // Forearm\n                translate([0, 0, -20])\n                    rotate([0, 0, -30])\n                        cylinder(h=18, r=3.5, $fn=12);\n                \n                // Hand\n                translate([0, 0, -38])\n                    scale([0.8, 0.4, 1])\n                        sphere(5, $fn=12);\n            }\n    }\n    \n    // Right arm (mirrored)\n    mirror([1, 0, 0]) \n        translate([-16, 0, 35]) {\n            rotate([0, 0, 15])\n                union() {\n                    cylinder(h=20, r=4, $fn=12);\n                    translate([0, 0, -20])\n                        sphere(4.5, $fn=12);\n                    translate([0, 0, -20])\n                        rotate([0, 0, -30])\n                            cylinder(h=18, r=3.5, $fn=12);\n                    translate([0, 0, -38])\n                        scale([0.8, 0.4, 1])\n                            sphere(5, $fn=12);\n                }\n        }\n}\n\nmodule giant_legs() {\n    // Left leg\n    translate([-6, -5, 0]) {\n        union() {\n            // Thigh\n            cylinder(h=25, r=5, $fn=16);\n            \n            // Knee\n            translate([0, 0, -25])\n                sphere(5.5, $fn=16);\n            \n            // Shin\n            translate([0, 0, -25])\n                rotate([0, 0, 5])\n                    cylinder(h=22, r=4.5, $fn=16);\n            \n            // Foot\n            translate([0, -8, -47])\n                scale([1.2, 2, 0.6])\n                    cube([10, 15, 6], center=true);\n        }\n    }\n    \n    // Right leg\n    translate([6, -5, 0]) {\n        union() {\n            cylinder(h=25, r=5, $fn=16);\n            translate([0, 0, -25])\n                sphere(5.5, $fn=16);\n            translate([0, 0, -25])\n                rotate([0, 0, -5])\n                    cylinder(h=22, r=4.5, $fn=16);\n            translate([0, -8, -47])\n                scale([1.2, 2, 0.6])\n                    cube([10, 15, 6], center=true);\n        }\n    }\n}\n\nmodule giant_head() {\n    translate([0, 0, 47]) {\n        union() {\n            // Skull\n            scale([0.9, 0.8, 1.1])\n                sphere(10, $fn=20);\n            \n            // Jaw\n            translate([0, -6, -7])\n                scale([0.7, 0.6, 0.8])\n                    sphere(6, $fn=16);\n            \n            // Nose\n            translate([0, -3, 2])\n                scale([0.4, 0.6, 0.8])\n                    sphere(3, $fn=12);\n            \n            // Eyes (sockets)\n            for(x = [-3, 3]) {\n                translate([x, -2, 3])\n                    difference() {\n                        sphere(2, $fn=12);\n                        translate([0, 0, 1])\n                            sphere(1.5, $fn=12);\n                    }\n            }\n            \n            // Eyebrows\n            translate([0, -1, 5])\n                scale([2, 0.3, 0.5])\n                    cube([6, 2, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    giant_body();\n    giant_arms();\n    giant_legs();\n    giant_head();\n}",
    "renders": true
  },
  {
    "fruit": "chiku",
    "openscad_code": "// Chiku (Sapodilla) - Realistic style, medium complexity\n// Model size: ~70mm diameter\n\n$fn = 36;  // Smooth curves\n\n// Main parameters\ndiameter = 70;\nheight = 65;\nstem_height = 8;\nstem_diameter = 6;\nscale_factor = 0.92;\n\n// Main body - slightly flattened sphere\nmodule chiku_body() {\n    difference() {\n        // Main ellipsoid shape\n        scale([1, 1, 0.85]) sphere(d=diameter);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -diameter/2*0.85-1])\n            cube(diameter, center=true);\n        \n        // Create subtle indentations for realism\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([diameter/2*0.8, 0, -diameter/4])\n                    rotate([90, 0, 0])\n                        cylinder(h=diameter/2, d1=8, d2=0, center=true);\n        }\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_texture() {\n    difference() {\n        chiku_body();\n        \n        // Tiny pores across surface\n        for(theta = [0:15:180]) {\n            for(phi = [0:30:360]) {\n                rotate([0, theta, phi])\n                    translate([diameter/2*0.95, 0, 0])\n                        sphere(d=0.8);\n            }\n        }\n    }\n}\n\n// Stem attachment\nmodule stem_base() {\n    difference() {\n        // Main stem\n        translate([0, 0, height/2*0.85+stem_height/2])\n            cylinder(h=stem_height, d=stem_diameter, center=true);\n        \n        // Taper stem\n        translate([0, 0, height/2*0.85+stem_height])\n            cylinder(h=stem_height*1.5, d1=stem_diameter*1.2, d2=0, center=true);\n    }\n}\n\n// Calyx (flower remnants) at top\nmodule calyx() {\n    // 5-pointed calyx\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, stem_diameter*0.8, height/2*0.85+stem_height-1])\n                rotate([45, 0, 0])\n                    scale([1, 0.3, 0.8])\n                        cylinder(h=4, d=3);\n    }\n}\n\n// Bottom scar from flower\nmodule bottom_scar() {\n    difference() {\n        translate([0, 0, -height/2*0.85])\n            cylinder(h=2, d=diameter/8, center=true);\n        \n        translate([0, 0, -height/2*0.85-1])\n            sphere(d=diameter/10);\n    }\n}\n\n// Main assembly\nunion() {\n    // Scaled main body with texture\n    scale([scale_factor, scale_factor, scale_factor]) {\n        surface_texture();\n    }\n    \n    // Stem and attachments\n    stem_base();\n    calyx();\n    bottom_scar();\n}",
    "renders": true
  },
  {
    "fruit": "naseberry",
    "openscad_code": "// Naseberry (Sapodilla) - Realistic style, medium complexity\n// Approx. 70mm long, 3D-printable with no overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// Main body parameters\nbody_length = 70;\nbody_width = 50;\nbody_height = 45;\nwall_thickness = 2;\n\nmodule naseberry_body() {\n    // Main ellipsoid body\n    scale([1, 0.75, 0.65])\n        sphere(d=body_length);\n    \n    // Add slight asymmetry for realism\n    translate([body_length/8, 0, 0])\n        scale([0.25, 0.3, 0.2])\n            sphere(d=body_length);\n}\n\nmodule surface_texture() {\n    // Small bumps across surface\n    for(i = [0:15]) {\n        rotate([0, 0, i*24])\n            translate([body_length/2 - 8, 0, 0])\n                for(j = [0:5]) {\n                    rotate([0, j*30 + 15, 0])\n                        translate([0, body_width/3 - j*3, 0])\n                            scale([1, 1, 0.7])\n                                sphere(d=2 + sin(i*j)*0.5);\n                }\n    }\n}\n\nmodule stem() {\n    // Stem at top\n    translate([0, 0, body_height/2 - 2])\n        cylinder(h=8, d1=6, d2=4);\n    \n    // Calyx (flower remnants)\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 3, body_height/2 + 6])\n                scale([0.3, 1, 0.1])\n                    sphere(d=4);\n    }\n}\n\nmodule skin_detail() {\n    // Slight surface irregularities\n    difference() {\n        naseberry_body();\n        \n        // Tiny pits\n        for(i = [0:20]) {\n            random_seed = 1234 + i*17;\n            x = (sin(random_seed) * body_length/2.2);\n            y = (cos(random_seed) * body_width/2.2);\n            z = (sin(random_seed*2) * body_height/2.2);\n            \n            translate([x, y, z])\n                sphere(d=1.2);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main body with texture\n    union() {\n        skin_detail();\n        surface_texture();\n    }\n    \n    // Stem\n    stem();\n}\n\n// Flatten bottom for printing\ntranslate([0, 0, -body_height/2 - 1])\n    cube([body_length, body_width, 2], center=true);",
    "renders": true
  },
  {
    "fruit": "longberry",
    "openscad_code": "// Longberry for 3D printing – realistic style, medium complexity\n// Overall length ≈ 80 mm, max diameter ≈ 12 mm, wall ≥ 1 mm\n\n// Parameters\nberry_len = 80;\nberry_dia = 12;\ncrown_len = 4;\nseed_dia = 2.2;\nseed_count = 6;\nwall = 1.2;               // printable wall thickness\n$fn = 48;                 // smooth curves\n\n// Main berry shell (hollow for printing)\nmodule berry_shell() {\n    difference() {\n        // outer berry body\n        hull() {\n            translate([0,0, crown_len])\n                sphere(d = berry_dia);\n            translate([0,0, berry_len - crown_len])\n                sphere(d = berry_dia * 0.9);\n        }\n        // inner void\n        hull() {\n            translate([0,0, crown_len])\n                sphere(d = berry_dia - 2*wall);\n            translate([0,0, berry_len - crown_len])\n                sphere(d = (berry_dia * 0.9) - 2*wall);\n        }\n    }\n}\n\n// Crown at stem end\nmodule crown() {\n    difference() {\n        // outer crown disk\n        cylinder(h = crown_len, d = berry_dia * 0.8, center=false);\n        // inner void\n        cylinder(h = crown_len, d = berry_dia * 0.8 - 2*wall, center=false);\n    }\n}\n\n// Realistic seeds (small ellipsoids, radially placed)\nmodule seeds() {\n    for(i=[0:seed_count-1])\n        rotate([0, 0, i*360/seed_count])\n            translate([0, (berry_dia/2 - seed_dia/2 - wall)*0.7, berry_len * 0.4])\n                rotate([90,0,0])\n                    scale([1,1.5,1])\n                        sphere(d = seed_dia);\n}\n\n// Surface texture: shallow longitudinal ridges\nmodule ridges() {\n    ridge_w = 0.4;\n    ridge_h = 0.2;\n    ridge_n = 12;\n    for(i=[0:ridge_n-1])\n        rotate([0, 0, i*360/ridge_n])\n            translate([berry_dia/2 - wall/2, 0, crown_len])\n                linear_extrude(height = berry_len - 2*crown_len, center=false)\n                    square([ridge_w, ridge_h], center=true);\n}\n\n// Assembly\nunion() {\n    berry_shell();\n    crown();\n    seeds();\n    ridges();\n}",
    "renders": true
  },
  {
    "fruit": "plinia",
    "openscad_code": "// Plinia (Jabuticaba) – medium-complexity realistic 3D-printable model\n// Overall size ≈ 65 mm tall × 70 mm wide\n\n// Stem\nmodule stem() {\n    // Main vertical trunk\n    cylinder(h = 8, d = 8, $fn = 16);\n    // Slight taper at top\n    translate([0, 0, 8])\n        cylinder(h = 5, d1 = 8, d2 = 6, $fn = 16);\n    // Small branch stubs\n    for (a = [0:120:359]) {\n        rotate([0, 0, a])\n        translate([3.5, 0, 3])\n            rotate([0, 90, 0])\n                cylinder(h = 7, d = 2.5, $fn = 8);\n    }\n}\n\n// Calyx ring\nmodule calyx() {\n    difference() {\n        cylinder(h = 2, d = 12, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = 2.2, d = 8, $fn = 32);\n    }\n}\n\n// Single berry with subtle dimple on top\nmodule berry(r = 10) {\n    difference() {\n        sphere(r, $fn = 32);\n        // Top dimple\n        translate([0, 0, r - 1.2])\n            sphere(r = 2.5, $fn = 16);\n    }\n}\n\n// Cluster of berries grown directly on trunk\nmodule berry_cluster() {\n    // Central berry\n    berry();\n    // Ring of six berries\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n        translate([10, 0, 0])\n            berry();\n    }\n    // Second ring offset\n    for (i = [30:60:359]) {\n        rotate([0, 0, i])\n        translate([17, 0, -3])\n            scale([0.9, 0.9, 0.9])\n                berry();\n    }\n}\n\n// Main assembly\nunion() {\n    // Stem\n    stem();\n    \n    // Calyx just above stem\n    translate([0, 0, 13])\n        calyx();\n    \n    // Berry cluster starting below calyx\n    translate([0, 0, 13])\n        berry_cluster();\n}",
    "renders": true
  },
  {
    "fruit": "jaboticaba",
    "openscad_code": "// Jaboticaba (Plinia cauliflora) – medium-complexity realistic model\n// Outer dimensions: ≈ 80 mm total height, printable as a single solid piece\n\n// Overall scale factor – tweak if you need a slightly larger / smaller print\nscale_factor = 1;\n\n// Parameters -------------------------------------------------------------\ntrunk_d   = 16 * scale_factor;    // Main trunk diameter\ntrunk_h   = 25 * scale_factor;    // Trunk height before branching\nbranch_d  = 8 * scale_factor;     // Branch diameter\nfruit_d   = 8 * scale_factor;     // Single fruit diameter\nn_fruits  = 14;                   // Number of visible fruits\nwall_t    = 1.5 * scale_factor;   // Minimum wall thickness for printing\n$fn       = 36;                   // Resolution for curved primitives\n\n// Main trunk cylinder with slight taper\nmodule trunk() {\n    difference() {\n        cylinder(d1 = trunk_d, d2 = trunk_d * 0.8, h = trunk_h);\n        // Hollow core for material saving\n        translate([0, 0, wall_t])\n            cylinder(d1 = trunk_d - 2*wall_t, d2 = trunk_d*0.8 - 2*wall_t, h = trunk_h - wall_t*2);\n    }\n}\n\n// Short stubby branches emerging from upper trunk\nmodule branches() {\n    for (i = [0 : 120 : 360]) {\n        rotate([0, 0, i])\n        translate([trunk_d/2 * 0.9, 0, trunk_h - 3])\n        rotate([90 - 15, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(d = branch_d, h = 12 * scale_factor);\n    }\n}\n\n// Single jaboticaba fruit (simple sphere with stem stub)\nmodule fruit() {\n    union() {\n        // Fruit body\n        sphere(d = fruit_d);\n        // Tiny stem stub on top\n        translate([0, 0, fruit_d/2])\n            cylinder(d = fruit_d * 0.3, h = 1.2 * scale_factor);\n    }\n}\n\n// Cluster of fruits attached to trunk / branches\nmodule fruit_cluster() {\n    // Fruits on main trunk\n    for (z = [trunk_h - 8 : 4 : trunk_h + 2]) {\n        for (a = [0 : 45 : 359]) {\n            // Distribute in spiral around trunk\n            phi = a + z * 15;\n            r = trunk_d/2 + fruit_d/2 - 1;\n            translate([r * cos(phi), r * sin(phi), z])\n                fruit();\n        }\n    }\n\n    // Extra fruits on branch tips\n    for (i = [0 : 120 : 360]) {\n        rotate([0, 0, i])\n        translate([trunk_d/2 * 0.9 + 12 * cos(75), 0, trunk_h - 3 + 12 * sin(75)])\n        rotate([90 - 15, 0, 0])\n        translate([0, 0, branch_d/2 + fruit_d/2])\n            fruit();\n    }\n}\n\n// Ground disc for stable printing\nmodule base() {\n    cylinder(d = trunk_d * 2, h = 2 * scale_factor);\n}\n\n// Assembly ---------------------------------------------------------------\nunion() {\n    base();\n    trunk();\n    branches();\n    fruit_cluster();\n}",
    "renders": true
  },
  {
    "fruit": "bael",
    "openscad_code": "// Realistic Bael (Aegle marmelos) fruit - medium complexity\n// Approx 70mm diameter, 3D printable with no overhangs\n\n$fn = 36;  // Smooth curves for printing\n\n// Main parameters\nfruit_d = 70;          // Overall diameter\nshell_t = 3;           // Wall thickness for printing\nsegment_count = 8;     // Number of segments around circumference\nsegment_depth = 6;     // Depth of segment grooves\ntop_flat = 8;          // Flat top diameter\nbase_flat = 12;        // Flat base diameter\n\n// Stem parameters\nstem_h = 15;\nstem_d = 8;\nstem_taper = 0.7;\n\nmodule bael_fruit() {\n    union() {\n        // Main spherical body with flattened ends\n        difference() {\n            // Basic ellipsoid shape\n            scale([1, 1, 1.1])\n            sphere(d = fruit_d);\n            \n            // Flatten top\n            translate([0, 0, fruit_d/2 - 2])\n            cylinder(h = fruit_d/2, d1 = top_flat, d2 = top_flat + 5, $fn = 32);\n            \n            // Flatten bottom\n            translate([0, 0, -fruit_d/2 + 2])\n            cylinder(h = fruit_d/2, d1 = base_flat + 5, d2 = base_flat, $fn = 32);\n        }\n        \n        // Create segmented surface texture\n        for(i = [0:segment_count-1]) {\n            rotate([0, 0, i * 360/segment_count])\n            translate([0, 0, -fruit_d/2 - 1])\n            difference() {\n                cylinder(h = fruit_d + 2, d = fruit_d + 2, $fn = 32);\n                \n                // Remove material between segments\n                for(j = [0:1]) {\n                    rotate([0, 0, j * 45/segment_count])\n                    translate([0, -fruit_d/4 - 1, 0])\n                    cube([fruit_d + 2, fruit_d/2 + 2, fruit_d + 2], center = true);\n                }\n            }\n        }\n        \n        // Add subtle bumps for realistic texture\n        for(i = [0:20]) {\n            rotate([0, 0, i * 137.5])  // Golden angle for natural distribution\n            bump_pos = fruit_d/2 * 0.85;\n            translate([bump_pos * cos(i * 137.5), bump_pos * sin(i * 137.5), \n                      (sin(i * 3) * 5) - 5])\n            sphere(d = 3 + sin(i * 2) * 1.5);\n        }\n        \n        // Stem\n        translate([0, 0, fruit_d/2 * 1.1 - 2])\n        cylinder(h = stem_h, d1 = stem_d * stem_taper, d2 = stem_d);\n        \n        // Stem collar\n        translate([0, 0, fruit_d/2 * 1.1 - 2])\n        cylinder(h = 2, d1 = stem_d * 1.5, d2 = stem_d * 1.2);\n    }\n}\n\n// Create hollow shell for 3D printing\ndifference() {\n    bael_fruit();\n    \n    // Hollow interior with floor\n    translate([0, 0, -fruit_d/2 + shell_t])\n    sphere(d = fruit_d - shell_t * 2);\n}\n\n// Add drainage hole in base (for printing support material)\ntranslate([0, 0, -fruit_d/2 + 1])\ncylinder(h = 3, d = 6, $fn = 16);",
    "renders": true
  },
  {
    "fruit": "araza",
    "openscad_code": "// Araza (Eugenia stipitata) – medium-detail 3D printable fruit\n// ~65 mm tall, printable without supports, 1 mm walls\n\n$fn = 36;          // smooth curves\n\n// Overall scale and wall thickness\nfruit_d  = 30;     // equatorial diameter\nfruit_h  = 35;     // polar height\nwall_t   = 1.2;    // printable wall\n\n// Stem\nstem_l   = 8;\nstem_r   = 2.5;\n\n// Calyx lobes\nlobe_n   = 5;\nlobe_len = 3.5;\nlobe_w   = 2.2;\n\n// Surface bumps\nbump_n   = 25;\nbump_r   = 1.2;\n\nmodule fruit_body() {\n    // Main lobed spheroid\n    difference() {\n        // Outer shell\n        scale([1, 1, fruit_h/fruit_d])\n            sphere(d = fruit_d);\n\n        // Hollow inside\n        scale([(fruit_d - 2*wall_t)/fruit_d,\n               (fruit_d - 2*wall_t)/fruit_d,\n               (fruit_h - 2*wall_t)/fruit_h])\n            sphere(d = fruit_d);\n    }\n\n    // Surface bumps for realism\n    for(i = [0 : bump_n-1]) {\n        a1 = rands(0, 360, 1)[0];\n        a2 = rands(-70, 70, 1)[0];\n        translate(\n            [fruit_d/2 * cos(a1) * cos(a2),\n             fruit_d/2 * sin(a1) * cos(a2),\n             fruit_h/2 * sin(a2)])\n            sphere(r = bump_r);\n    }\n}\n\nmodule calyx() {\n    // Central calyx disc\n    cylinder(h = 0.8, r1 = stem_r + 2, r2 = stem_r + 1.6);\n    \n    // Lobes\n    for(i = [0 : lobe_n-1]) {\n        rotate([0, 0, i * 360/lobe_n])\n            translate([stem_r + lobe_w/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = lobe_len, r1 = lobe_w/2, r2 = 0.1);\n    }\n}\n\nmodule stem() {\n    // Simple tapered stem\n    cylinder(h = stem_l, r1 = stem_r, r2 = stem_r*0.7);\n}\n\n// Assembly\nunion() {\n    fruit_body();\n    translate([0, 0, fruit_h/2])\n        calyx();\n    translate([0, 0, fruit_h/2 + 0.8])\n        stem();\n}",
    "renders": true
  },
  {
    "fruit": "bacuri",
    "openscad_code": "// Bacuri fruit - realistic style, medium complexity\n// Overall dimensions: ~60mm diameter, 70mm tall\n\n$fn = 36;\n\n// Main parameters\nfruit_diameter = 55;\nfruit_height = 65;\nstem_length = 8;\nstem_diameter = 4;\nsegment_count = 5;\nwall_thickness = 2;\n\nmodule bacuri_fruit() {\n    // Main body - segmented sphere slightly flattened\n    translate([0, 0, fruit_height/2 - 5])\n    scale([1, 1, 0.85])\n    sphere(d = fruit_diameter);\n    \n    // Create segments by subtracting wedges\n    for (i = [0:segment_count-1]) {\n        rotate([0, 0, i * (360/segment_count)])\n        translate([0, 0, -5])\n        cube([fruit_diameter + 10, 3, fruit_height + 10], center = true);\n    }\n    \n    // Top indentations between segments\n    for (i = [0:segment_count-1]) {\n        rotate([0, 0, i * (360/segment_count) + (360/segment_count/2)])\n        translate([0, fruit_diameter/2 * 0.7, fruit_height * 0.8])\n        rotate([45, 0, 0])\n        scale([1, 0.5, 1])\n        sphere(d = 8);\n    }\n    \n    // Small surface bumps for texture\n    for (j = [1:3]) {\n        for (i = [0:8]) {\n            rotate([0, 0, i * 40])\n            translate([fruit_diameter/2 * 0.6 * sin(j * 30), \n                      fruit_diameter/2 * 0.6 * cos(j * 30), \n                      j * 15])\n            sphere(d = 2.5);\n        }\n    }\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, fruit_height + stem_length/2])\n    cylinder(h = stem_length, d = stem_diameter, center = true);\n    \n    // Stem base flare\n    translate([0, 0, fruit_height])\n    cylinder(h = 3, d1 = stem_diameter * 1.5, d2 = stem_diameter, center = true);\n    \n    // Small leaf remnants\n    rotate([30, 0, 45])\n    translate([0, 0, fruit_height + 2])\n    scale([0.3, 1, 0.1])\n    sphere(d = 10);\n    \n    rotate([-20, 0, -30])\n    translate([0, 0, fruit_height + 3])\n    scale([0.4, 0.8, 0.1])\n    sphere(d = 8);\n}\n\nmodule bottom_detail() {\n    // Small dimple at bottom\n    translate([0, 0, 2])\n    sphere(d = 8);\n    \n    // Radial ridges from bottom center\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 3, 1])\n        scale([1, 0.3, 0.5])\n        cube([15, 3, 3], center = true);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        bacuri_fruit();\n        stem();\n    }\n    \n    // Hollow out for 3D printing\n    translate([0, 0, fruit_height/2 - 5])\n    scale([1, 1, 0.85])\n    sphere(d = fruit_diameter - wall_thickness * 2);\n    \n    // Remove bottom to create drainage hole\n    translate([0, 0, -1])\n    cylinder(h = 5, d = 10, center = true);\n    \n    bottom_detail();\n}",
    "renders": true
  },
  {
    "fruit": "biriba",
    "openscad_code": "// Biriba (Rollinia deliciosa) – medium-complexity realistic OpenSCAD model\n// Overall size ~85 mm along longest axis\n\n// Basic parameters\nskin_color  = \"forestgreen\";\nscale_color = \"darkolivegreen\";\nflesh_color = \"ivory\";\nwall        = 1.2;           // 3D-print friendly wall\n\nmodule half_ellipsoid(rx,ry,rz){\n    scale([rx,ry,rz]) sphere(1,$fn=60);\n}\n\n// Central fruit body\nmodule fruit_body(){\n    color(skin_color)\n    difference(){\n        union(){\n            // Main ovoid\n            scale([1,1,0.8]) half_ellipsoid(22,22,28);\n\n            // Slight asymmetry\n            translate([0,0,-3]) scale([0.9,1.1,0.7]) sphere(25,$fn=60);\n        }\n        // Hollow for printability\n        translate([0,0,-1]) scale([1-wall/22,1-wall/22,0.8]) sphere(21,$fn=60);\n    }\n}\n\n// Individual scale\nmodule single_scale(w,l,h){\n    hull(){\n        translate([0,0,0]) cube([w,l,h],center=true);\n        translate([0,0,h*0.8]) scale([0.4,0.4,1]) sphere(w*0.4,$fn=12);\n    }\n}\n\n// Scales covering the fruit\nmodule scales(){\n    color(scale_color)\n    for(a=[0:15:345])\n        for(z=[0:7]){\n            ang = a + (z%2)*7.5;\n            tilt = 25 + z*8;\n            translate([0,0,-10 + z*7.5])\n            rotate([90-tilt,0,ang])\n            translate([0,0,23])\n            single_scale(6.5 - z*0.4, 10 - z*0.6, 2.5 - z*0.1);\n        }\n}\n\n// Stem stub\nmodule stem(){\n    difference(){\n        union(){\n            color(\"saddlebrown\")\n            translate([0,0,28]) cylinder(h=8,r1=5,r2=3,$fn=20);\n            translate([0,0,36]) sphere(4,$fn=20);\n        }\n        // Hollow\n        translate([0,0,28]) cylinder(h=10,r1=3.5,r2=2,$fn=20);\n    }\n}\n\n// Cross-section view (optional)\nmodule cross_section(){\n    color(flesh_color,0.6)\n    intersection(){\n        fruit_body();\n        translate([-30,-30,0]) cube([60,60,40]);\n    }\n}\n\n// Assembly\nfruit_body();\nscales();\nstem();\n\n// Uncomment below to see internal flesh\n// %cross_section();",
    "renders": true
  },
  {
    "fruit": "siriguela",
    "openscad_code": "// Siriguela (Spondias purpurea) – realistic medium-complexity OpenSCAD model\n// Overall height ≈ 65 mm, printable without supports\n\n$fn = 48;               // smooth curves\nwall = 1.2;             // 3D-print friendly wall thickness\n\nmodule fruit_body(){\n    // Main ovoid fruit\n    difference(){\n        scale([1, 1.2, 1.1]) sphere(d = 30);\n        // Small stem cavity on top\n        translate([0, 0, 15]) cylinder(h = 5, d = 6, $fn = 16);\n    }\n}\n\nmodule longitudinal_ridges(){\n    // 5 subtle longitudinal ridges\n    for(a = [0:72:359]){\n        rotate([0, 0, a])\n        translate([0, 15, 0])\n        rotate([90, 0, 0])\n            scale([1.8, 1, 1])\n            cylinder(h = 32, d = 2, $fn = 8);\n    }\n}\n\nmodule stem(){\n    // Short woody peduncle\n    color(\"brown\")\n    translate([0, 0, 15.5])\n    cylinder(h = 8, d1 = 4, d2 = 2.5, $fn = 12);\n}\n\nmodule lenticels(){\n    // Tiny dots scattered over surface\n    for(i = [0:3:120]){\n        ang1 = rands(0, 360, 1)[0];\n        ang2 = rands(-80, 80, 1)[0];\n        r = 15;\n        translate([\n            r * sin(ang1) * cos(ang2),\n            r * cos(ang1) * cos(ang2),\n            r * sin(ang2) + 1\n        ])\n        sphere(d = 0.8);\n    }\n}\n\nmodule calyx_remains(){\n    // 4 dried calyx lobes around stem base\n    for(a = [0:90:359]){\n        rotate([0, 0, a + 45])\n        translate([0, 2.8, 15.2])\n        rotate([0, 70, 0])\n        scale([0.5, 0.2, 1.2])\n        sphere(d = 3);\n    }\n}\n\n// Assemble complete fruit\nunion(){\n    fruit_body();\n    longitudinal_ridges();\n    stem();\n    color(\"darkolivegreen\") calyx_remains();\n    color(\"saddlebrown\") lenticels();\n}",
    "renders": true
  },
  {
    "fruit": "uchuva",
    "openscad_code": "// OpenSCAD code for a realistic 3D-printable uchuva (Physalis peruviana / golden berry)\n// Overall size: ~70 mm height, ~65 mm diameter\n\n/* PARAMETERS */\n$fn = 36;                  // global resolution\nwall = 0.8;                // wall thickness for 3D printing (2×0.4 mm nozzles)\nhuskScale = 1.05;          // slightly larger than berry for clearance\n\n/* MAIN */\nunion() {\n    // 1. Lantern (papery husk)\n    translate([0,0, 8])\n    lantern();\n\n    // 2. Berry\n    translate([0,0,-2])\n    berry();\n\n    // 3. Calyx scars at top\n    translate([0,0, 18])\n    rotate([0,0,rands(0,360,1)[0]])\n    calyxScars();\n}\n\n/* MODULE: papery lantern-shaped husk with ribs */\nmodule lantern() {\n    difference() {\n        // outer shell\n        scale([1,1,1.7])\n        sphere(d=62);\n\n        // hollow it out\n        scale([huskScale,huskScale,1.6])\n        sphere(d=62-wall*2);\n\n        // opening at bottom\n        translate([0,0,-50])\n        cylinder(h=100, d=40);\n    }\n\n    // longitudinal ribs for texture\n    for(a=[0:20:340]) {\n        rotate([0,0,a])\n        translate([27,0,-32])\n        rotate([90,0,0])\n        cylinder(h=65, d=1.2, center=true);\n    }\n}\n\n/* MODULE: the fleshy berry inside */\nmodule berry() {\n    // main sphere\n    difference() {\n        sphere(d=42);\n\n        // small dimple at bottom\n        translate([0,0,-21.5])\n        sphere(d=8);\n    }\n\n    // subtle vertical ridges\n    for(a=[0:30:330]) {\n        rotate([0,0,a])\n        translate([20.5,0,0])\n        rotate([90,0,0])\n        scale([1,1,0.2])\n        cylinder(h=42, d=1.8, center=true);\n    }\n}\n\n/* MODULE: dried calyx scars at stem end */\nmodule calyxScars() {\n    difference() {\n        cylinder(h=4, d=18, center=true);\n        // tiny holes\n        for(a=[0:60:300])\n            rotate([0,0,a])\n            translate([5,0,0])\n            cylinder(h=5,d=1.2,center=true);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "uvaia",
    "openscad_code": "// Uvaia (Eugenia uvalha) - realistic style, medium complexity\n// Overall dimensions: ~70mm diameter, printable without supports\n\n$fn = 36;\n\nmodule uvaia_fruit() {\n    // Main body - slightly flattened sphere\n    translate([0, 0, 25])\n    scale([1, 1, 0.8])\n    sphere(r = 25, center = true);\n    \n    // Crown - 4-lobed calyx remnant at top\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 7, 40])\n        scale([3, 7, 5])\n        rotate([30, 0, 0])\n        cylinder(h = 8, r1 = 3, r2 = 1);\n    }\n    \n    // Small bump at bottom where fruit attached\n    translate([0, 0, 5])\n    sphere(r = 3);\n}\n\nmodule surface_texture() {\n    // Random small bumps for realistic surface\n    for (i = [0:15]) {\n        theta = i * 137.5; // Golden angle\n        phi = 30 + i * 8;\n        r = 23 + sin(i * 1.2) * 2;\n        \n        translate([\n            r * cos(theta) * cos(phi),\n            r * sin(theta) * cos(phi),\n            25 + r * sin(phi) * 0.8\n        ])\n        rotate([90 - phi, 0, theta])\n        scale([1, 1, 0.3])\n        sphere(r = 1.5);\n    }\n    \n    // Subtle vertical ribs\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([0, 24.5, 25])\n        scale([1, 0.5, 1])\n        cylinder(h = 40, r = 1, center = true);\n    }\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, 45])\n    rotate([0, 0, 10])\n    cylinder(h = 12, r1 = 3, r2 = 2);\n    \n    // Small leaf pair\n    translate([2, 3, 52])\n    rotate([0, 30, 0])\n    scale([1, 0.3, 1])\n    rotate([0, 0, 45])\n    cylinder(h = 8, r1 = 6, r2 = 2);\n    \n    translate([-2, -3, 52])\n    rotate([0, -30, 0])\n    scale([1, 0.3, 1])\n    rotate([0, 0, -45])\n    cylinder(h = 8, r1 = 6, r2 = 2);\n}\n\n// Hollow out for 3D printing\ndifference() {\n    union() {\n        uvaia_fruit();\n        surface_texture();\n        stem();\n    }\n    \n    // Internal hollow (2mm wall thickness)\n    translate([0, 0, 25])\n    scale([1, 1, 0.8])\n    sphere(r = 23, center = true);\n    \n    // Drain hole at bottom\n    translate([0, 0, 0])\n    cylinder(h = 10, r = 5);\n}\n\n// Ensure flat bottom for printing\ndifference() {\n    children();\n    translate([0, 0, -5])\n    cube([100, 100, 10], center = true);\n}",
    "renders": true
  },
  {
    "fruit": "inga",
    "openscad_code": "// Inga (Ice-cream-bean) pod – realistic, medium complexity\n// Overall length ≈ 80 mm, printable without support\n\n$fn=36;\n\n// Pod body\nmodule pod_body() {\n    difference() {\n        // Main hull\n        hull() {\n            for(i=[-1,1])\n                translate([0,0,i*30])\n                    scale([1,0.7,1])\n                        sphere(d=20);\n        }\n        \n        // Carve longitudinal groove\n        for(a=[0:40:320])\n            rotate([0,0,a])\n                translate([0,-10,0])\n                    cube([40,20,80], center=true);\n        \n        // Carve opening slit\n        translate([0,0,30])\n            rotate([90,0,0])\n                cylinder(h=40, d1=10, d2=4);\n    }\n}\n\n// Single seed\nmodule seed() {\n    scale([0.8,1,1])\n        sphere(d=10);\n}\n\n// Row of seeds inside\nmodule seed_row() {\n    for(z=[-20:10:20])\n        translate([0,-3,z])\n            rotate([0,0,5*z])\n                seed();\n}\n\n// Thin skin shell\nmodule skin() {\n    difference() {\n        minkowski() {\n            pod_body();\n            sphere(d=1);\n        }\n        pod_body();\n    }\n}\n\n// Calyx knob at stalk end\nmodule calyx() {\n    translate([0,0,-31])\n        rotate([90,0,0])\n            cylinder(h=4, d1=8, d2=4);\n}\n\n// Render full pod\nunion() {\n    skin();\n    %pod_body();        // inner reference\n    seed_row();\n    calyx();\n}",
    "renders": true
  },
  {
    "fruit": "icecreambean",
    "openscad_code": "// Icecream Bean (Inga edulis) - Realistic medium-complexity model\n// Pods hang in long, twisted chains with white cottony pulp around seeds\n\n$fn = 30;  // Smooth curves for printing\n\n// Overall parameters\npod_length = 80;\npod_thickness = 12;\nseed_count = 8;\nwall_thick = 1.2;\n\n// Main pod body\nmodule pod_body() {\n    difference() {\n        // Outer curved shell\n        hull() {\n            translate([0, 0, pod_length/2]) \n                scale([1, 0.4, 1]) \n                    sphere(d = pod_thickness);\n            translate([0, 0, -pod_length/2]) \n                scale([1, 0.4, 1]) \n                    sphere(d = pod_thickness * 0.8);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([0, 0, pod_length/2]) \n                scale([1, 0.3, 1]) \n                    sphere(d = pod_thickness - wall_thick*2);\n            translate([0, 0, -pod_length/2]) \n                scale([1, 0.3, 1]) \n                    sphere(d = (pod_thickness - wall_thick*2) * 0.8);\n        }\n        \n        // Seam opening along one side\n        rotate([0, 90, 0])\n            cube([pod_length, pod_thickness, wall_thick*2], center=true);\n    }\n}\n\n// Internal seeds surrounded by pulp\nmodule seeds() {\n    for(i = [1:seed_count]) {\n        translate([0, 0, -pod_length/2 + (i*pod_length/(seed_count+1))]) {\n            // Seed sphere (dark)\n            color(\"saddlebrown\")\n                sphere(d = 4);\n            \n            // Pulp around seed (white fluffy)\n            color(\"ivory\")\n                for(a = [0:60:359])\n                    rotate([0, 0, a])\n                        translate([2, 0, 0])\n                            scale([1, 0.3, 0.3])\n                                sphere(d = 3);\n        }\n    }\n}\n\n// Pod surface texture - subtle ridges\nmodule pod_texture() {\n    difference() {\n        pod_body();\n        \n        // Create longitudinal ridges by subtracting small cylinders\n        for(i = [0:8]) {\n            rotate([0, 0, i*45])\n                translate([pod_thickness/2 - 1, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = pod_length + 2, r = 0.5, center=true);\n        }\n    }\n}\n\n// Stalk end cap\nmodule stalk_end() {\n    translate([0, 0, pod_length/2 + 3])\n        cylinder(h = 6, r1 = 3, r2 = 2);\n}\n\n// Main assembly\nunion() {\n    pod_texture();\n    stalk_end();\n    \n    // Internal contents (seeds)\n    seeds();\n}",
    "renders": true
  },
  {
    "fruit": "aguaje",
    "openscad_code": "// Aguaje fruit in medium-complexity realistic style\n// Overall height ~80 mm, printable without supports\n\n$fn = 36;\n\nmodule aguaje_body() {\n    // Main ellipsoid body\n    scale([1, 0.9, 1.3]) sphere(d = 45);\n}\n\nmodule scaly_texture() {\n    // Overlapping scales on the surface\n    for (i = [0:14]) {\n        rotate([0, 0, i * 24]) {\n            translate([0, 22.5, 0]) {\n                scale([1, 0.6, 0.2]) sphere(d = 8);\n                translate([0, 0, 3]) scale([1, 0.5, 0.15]) sphere(d = 7);\n            }\n            translate([0, 22.5, 6]) {\n                scale([1, 0.6, 0.2]) sphere(d = 7);\n                translate([0, 0, 2.5]) scale([1, 0.5, 0.15]) sphere(d = 6);\n            }\n        }\n    }\n}\n\nmodule cap() {\n    // Crown-like cap at top\n    difference() {\n        union() {\n            cylinder(h = 8, d1 = 18, d2 = 22);\n            translate([0, 0, 8]) cylinder(h = 4, d1 = 22, d2 = 20);\n        }\n        // Hollow inside\n        translate([0, 0, -1]) cylinder(h = 12, d = 15);\n    }\n}\n\nmodule stem() {\n    // Small stem on top of cap\n    translate([0, 0, 12]) rotate([0, 0, 0]) cylinder(h = 8, d1 = 4, d2 = 2);\n}\n\nmodule surface_detail() {\n    // Fine dimples for realistic texture\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            for (j = [0:2]) {\n                rotate([0, 90, 0]) {\n                    translate([0, 0, 10 + j * 15]) {\n                        rotate([0, 0, 15 + i * 5]) {\n                            translate([0, 22 - j * 3, 0]) {\n                                sphere(d = 1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule aguaje() {\n    union() {\n        // Main body with scales\n        difference() {\n            aguaje_body();\n            // Hollow inside for printability\n            translate([0, 0, -5]) scale([0.9, 0.8, 0.9]) sphere(d = 45);\n        }\n        \n        // Add scales as protrusions\n        intersection() {\n            aguaje_body();\n            scaly_texture();\n        }\n        \n        // Cap assembly\n        translate([0, 0, 29]) cap();\n        stem();\n        \n        // Surface detail\n        difference() {\n            aguaje_body();\n            scale([0.99, 0.99, 0.99]) surface_detail();\n        }\n    }\n}\n\n// Render the complete fruit\naguaje();",
    "renders": true
  },
  {
    "fruit": "bacaba",
    "openscad_code": "// Bacaba Palm Fruit (Oenocarpus bacaba) - Realistic Style, Medium Complexity\n// Approx 70mm tall, 3D-printable with no overhangs\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Main parameters\nfruit_d = 30;      // Main fruit diameter\nstem_d = 6;        // Stem diameter\nstem_h = 8;        // Stem height\nscale_major = 0.9; // Major axis scaling\nscale_minor = 0.8; // Minor axis scaling\n\n// Color constants for reference (OpenSCAD ignores these)\n// Dark purple-black: #2E0854\n// Olive green: #556B2F\n\nmodule main_fruit() {\n    // Create ellipsoid shape for realistic bacaba\n    scale([scale_major, scale_minor, 1])\n    sphere(d = fruit_d);\n}\n\nmodule stem_attachment() {\n    // Stem base with slight taper\n    translate([0, 0, fruit_d/2 * scale_minor]) {\n        cylinder(h1 = stem_h, h2 = stem_h*0.7, r1 = stem_d/2, r2 = stem_d/3);\n    }\n    \n    // Stem collar\n    translate([0, 0, fruit_d/2 * scale_minor]) {\n        cylinder(h = 2, r = stem_d/2 * 1.2);\n    }\n}\n\nmodule surface_texture() {\n    // Subtle surface bumps for realistic texture\n    for(i = [0:15]) {\n        rotate([0, 0, i*24]) {\n            for(j = [0:3]) {\n                theta = j*45 + (i%2)*22.5;\n                phi = 30 + j*20;\n                r = fruit_d/2 - 1;\n                \n                translate([\n                    r * cos(theta) * sin(phi) * scale_major,\n                    r * sin(theta) * sin(phi) * scale_minor,\n                    r * cos(phi)\n                ]) {\n                    sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule calyx_remains() {\n    // Small triangular remnants of calyx at top\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, stem_d/2, fruit_d/2 * scale_minor + 1]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = 1.5) {\n                        polygon(points=[\n                            [0, 0],\n                            [1.5, 2],\n                            [3, 0]\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule fruit_body() {\n    difference() {\n        union() {\n            main_fruit();\n            stem_attachment();\n            surface_texture();\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -2]) {\n            scale([scale_major*0.85, scale_minor*0.85, 0.85])\n            sphere(d = fruit_d);\n        }\n        \n        // Drain hole at bottom\n        translate([0, 0, -fruit_d/2 - 1]) {\n            cylinder(h = 3, r = 2);\n        }\n    }\n}\n\n// Scale to final size (70mm total height)\nscale([1, 1, 1]) {\n    fruit_body();\n    calyx_remains();\n}",
    "renders": true
  },
  {
    "fruit": "baru",
    "openscad_code": "// Realistic Medium-Complexity Baru (Brazilian Seed)\n// Total length ~60 mm\n\n// Main body\nmodule body() {\n    difference() {\n        hull() {\n            // Central seed core\n            translate([0, 0, 0]) scale([1, 0.6, 0.4]) sphere(d = 30, $fn = 40);\n            // Front bulge\n            translate([-12, 0, 0]) scale([0.9, 0.7, 0.45]) sphere(d = 28, $fn = 40);\n            // Rear taper\n            translate([12, 0, 0]) scale([0.7, 0.5, 0.35]) sphere(d = 24, $fn = 40);\n        }\n        \n        // Ventral groove\n        translate([0, -0.1, -6]) rotate([0, 90, 0]) cylinder(h = 25, d1 = 3, d2 = 1, $fn = 20);\n        \n        // Dorsal ridge hollow\n        translate([0, 0, 7]) rotate([0, 90, 0]) cylinder(h = 30, d1 = 2, d2 = 0.5, $fn = 20);\n    }\n}\n\n// Surface texture\nmodule surface_texture() {\n    // Small dimples across surface\n    for (a = [0:30:330]) {\n        for (b = [-20:10:20]) {\n            rotate([a, b, 0]) {\n                translate([0, 0, 15]) {\n                    difference() {\n                        sphere(d = 1.5, $fn = 8);\n                        translate([0, 0, 0.8]) sphere(d = 1.2, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Hinge line detail\nmodule hinge() {\n    // Central hinge\n    translate([-2, 0, 0]) rotate([90, 0, 0]) cylinder(h = 4, d = 1.5, $fn = 16);\n    \n    // Seam lines\n    for (i = [-12:3:12]) {\n        translate([i, 0, 0]) rotate([90, 0, 0]) cylinder(h = 0.5, d = 0.8, $fn = 8);\n    }\n}\n\n// Wing-like ridges\nmodule ridges() {\n    // Left ridge\n    translate([5, 8, 0]) rotate([0, 0, -20]) scale([1, 0.3, 0.2]) cylinder(h = 15, d = 8, $fn = 20);\n    \n    // Right ridge\n    translate([5, -8, 0]) rotate([0, 0, 20]) scale([1, 0.3, 0.2]) cylinder(h = 15, d = 8, $fn = 20);\n}\n\n// Stem scar\nmodule stem_scar() {\n    translate([-16, 0, 0]) rotate([0, 90, 0]) cylinder(h = 2, d = 4, $fn = 20);\n    difference() {\n        translate([-16.5, 0, 0]) sphere(d = 3, $fn = 20);\n        translate([-17.5, 0, 0]) sphere(d = 2.5, $fn = 20);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    surface_texture();\n    hinge();\n    ridges();\n    stem_scar();\n}",
    "renders": true
  },
  {
    "fruit": "borojo",
    "openscad_code": "// Realistic Borojo (Borojoa patinoi) – medium complexity\n// Approx. 80 mm tall, printable upright (0.4 mm wall, 1 mm base)\n\n$fn = 40;               // global smoothness\n\n// overall sizing\nfruit_d  = 55;          // widest diameter of fruit body\nfruit_h  = 75;          // total height\nstem_h   = 8;           // woody stem\nbase_h   = 3;           // flat bottom for printability\n\n// wall thickness\nwall = 1.2;\n\nmodule fruit_body() {\n    // main oblong ellipsoid\n    translate([0,0,base_h + fruit_h/2])\n        scale([1, 0.9, 1.3])\n            sphere(d = fruit_d);\n\n    // flatten the base slightly for printing\n    translate([0,0,base_h/2])\n        cylinder(d = fruit_d*0.9, h = base_h, $fn = 64);\n}\n\nmodule skin_texture() {\n    // subtle bumps for realistic feel\n    difference() {\n        fruit_body();\n        for (a = [0:30:150]) {\n            rotate([0,0,a])\n                for (z = [20:15:65]) {\n                    translate([0, fruit_d/2 - 2, base_h + z])\n                        sphere(d = 2.5);\n                }\n        }\n    }\n}\n\nmodule stem() {\n    // woody cylinder on top\n    translate([0,0,base_h + fruit_h - 1])\n        cylinder(d1 = 8, d2 = 5, h = stem_h, $fn = 12);\n}\n\nmodule calyx_lobes() {\n    // 5 persistent calyx lobes bent outward\n    for (i = [0:4]) {\n        rotate([0,0,i*72])\n            translate([0, 4.5, base_h + fruit_h + stem_h - 2])\n                rotate([35,0,0])\n                    scale([1,0.6,2])\n                        sphere(d = 6);\n    }\n}\n\n// hollow out the fruit for printing speed\nmodule hollow() {\n    translate([0,0,base_h + wall])\n        scale([0.82, 0.75, 0.78])\n            fruit_body();\n}\n\n// assembly\nunion() {\n    difference() {\n        skin_texture();\n        hollow();\n    }\n    stem();\n    calyx_lobes();\n}",
    "renders": true
  },
  {
    "fruit": "cagaita",
    "openscad_code": "// Cagaita (Eugenia dysenterica) - realistic style, medium complexity\n// Approx 60 mm tall, 3D printable with 2 mm wall thickness\n\n$fn = 36;  // Smooth curves for printing\n\nmodule cagaita_fruit() {\n    // Main spherical body with slight squash\n    scale([1, 1, 0.9])\n    sphere(r = 15);\n}\n\nmodule cagaita_calyx() {\n    // Persistent calyx at top - 4 sepals\n    difference() {\n        // Base calyx\n        translate([0, 0, 15.5])\n        cylinder(h = 3, r1 = 8, r2 = 6);\n        \n        // Sepal gaps\n        for (i = [0:90:270]) {\n            rotate([0, 0, i + 45])\n            translate([5, 0, 15.5])\n            cube([10, 2, 4], center = true);\n        }\n    }\n    \n    // Individual sepals\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, 7, 16])\n        rotate([30, 0, 0])\n        scale([0.3, 1, 0.2])\n        sphere(r = 4);\n    }\n}\n\nmodule surface_texture() {\n    // Small bumps for realistic texture\n    for (i = [0:15:359]) {\n        rotate([0, 0, i])\n        for (j = [5:10:25]) {\n            translate([j * cos(i), j * sin(i), 15 * sin(i * 0.1) * 0.3])\n            sphere(r = 0.5);\n        }\n    }\n}\n\nmodule stem_attachment() {\n    // Where fruit was attached to tree\n    difference() {\n        translate([0, 0, 15])\n        cylinder(h = 2, r1 = 3, r2 = 2);\n        \n        // Hollow for stem scar\n        translate([0, 0, 15])\n        cylinder(h = 2.5, r = 1.5);\n    }\n}\n\nmodule cagaita_complete() {\n    union() {\n        // Main fruit body\n        cagaita_fruit();\n        \n        // Calyx structure\n        cagaita_calyx();\n        \n        // Stem attachment point\n        stem_attachment();\n        \n        // Surface texture\n        surface_texture();\n    }\n}\n\n// Generate the fruit\n// Scale to 60mm height\nscale([2, 2, 2])\ncagaita_complete();",
    "renders": true
  },
  {
    "fruit": "caimbé",
    "openscad_code": "// Caimbé (Brazilian freshwater crocodilian) - Realistic style, medium complexity\n// Approx 80 mm long, 3D-printable\n\n// Basic parameters\nbody_length = 80;\nbody_height = 15;\nhead_length = 22;\ntail_length = 35;\n\n// Head module with snout and eyes\nmodule head() {\n    // Main head block\n    translate([0, 0, 0])\n        scale([1, 0.6, 0.5])\n        sphere(d=head_length, $fn=32);\n    \n    // Snout extension\n    translate([head_length/2 - 3, 0, 0])\n        scale([0.6, 0.4, 0.3])\n        sphere(d=head_length*0.8, $fn=32);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([head_length/4, side*head_length/3, head_length/6])\n            sphere(d=3, $fn=16);\n        \n        // Eyeballs\n        translate([head_length/4 + 0.5, side*head_length/3, head_length/6])\n            color(\"black\")\n            sphere(d=2, $fn=16);\n    }\n    \n    // Nostrils\n    translate([head_length/2 - 2, 0, head_length/8])\n        cylinder(h=2, d1=1.5, d2=0.5, $fn=12);\n}\n\n// Body module with scutes\nmodule body() {\n    // Main body\n    translate([-body_length/4, 0, 0])\n        scale([1.2, 0.8, 0.4])\n        sphere(d=body_length/2, $fn=32);\n    \n    // Scutes along back\n    for(i = [-4:4]) {\n        translate([i*5, 0, body_height/2 + 1])\n            rotate([90, 0, 0])\n            cylinder(h=2, d1=3, d2=1.5, $fn=6);\n    }\n}\n\n// Leg module\nmodule leg(position, angle) {\n    translate(position)\n        rotate([0, 0, angle]) {\n        // Upper leg\n        translate([0, 0, -2])\n            rotate([90, 0, 0])\n            cylinder(h=8, d1=4, d2=3, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -10])\n            rotate([90, 0, 0])\n            cylinder(h=6, d1=3, d2=2, $fn=12);\n        \n        // Foot\n        translate([0, 0, -16])\n            scale([1.5, 1, 0.5])\n            sphere(d=4, $fn=12);\n    }\n}\n\n// Tail module with ridges\nmodule tail() {\n    // Main tail\n    translate([-body_length/2 - tail_length/2, 0, -2])\n        scale([1, 0.3, 0.2])\n        sphere(d=tail_length, $fn=32);\n    \n    // Tail ridges\n    for(i = [0:6]) {\n        translate([-body_length/2 - i*5, 0, -2 + i*0.5])\n            rotate([0, 90, 0])\n            cube([tail_length/8, 0.5, 2 + i*0.3], center=true);\n    }\n}\n\n// Jaw module\nmodule jaw() {\n    // Lower jaw\n    translate([0, 0, -head_length/4])\n        scale([0.9, 0.5, 0.3])\n        sphere(d=head_length, $fn=32);\n    \n    // Teeth\n    for(i = [-3:3]) {\n        translate([head_length/2 - 2 - abs(i)*2, i*2.5, -head_length/3])\n            rotate([0, 90, 0])\n            cylinder(h=2, d1=0.5, d2=0.8, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Head\n    translate([body_length/2 - 5, 0, body_height/2])\n        head();\n    \n    // Jaw\n    translate([body_length/2 - 5, 0, body_height/2])\n        jaw();\n    \n    // Body\n    translate([0, 0, 0])\n        body();\n    \n    // Legs\n    leg([body_length/4, body_length/4, -body_height/2], 30);\n    leg([body_length/4, -body_length/4, -body_height/2], -30);\n    leg([-body_length/4, body_length/4, -body_height/2], 45);\n    leg([-body_length/4, -body_length/4, -body_height/2], -45);\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "fruit": "cajá",
    "openscad_code": "// Cajá (Spondias mombin) fruit – realistic medium-complexity model\n// Overall height ~70 mm, printable without support\n\n$fn = 48;  // smooth curves for realistic look\n\n// Fruit body – slightly asymmetric ellipsoid\nmodule fruit_body() {\n    // Main body\n    difference() {\n        scale([1.0, 0.9, 1.15])\n            sphere(d = 42);\n\n        // Flatten the bottom slightly for stable print\n        translate([0, 0, -21.5])\n            cube([50, 50, 5], center = true);\n    }\n\n    // Subtle vertical ridges\n    for (a = [0:30:150]) {\n        rotate([0, 0, a])\n            translate([19, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 44, d = 2.5, center = true);\n    }\n}\n\n// Stem stub\nmodule stem_stub() {\n    translate([0, 0, 23])\n        rotate([0, 10, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4);\n}\n\n// Tiny sepals remaining at top\nmodule sepals() {\n    for (a = [30:72:330]) {\n        rotate([0, 0, a])\n            translate([0, 4, 24])\n                rotate([90 + 30, 0, 0])\n                    cylinder(h = 4, d1 = 2.5, d2 = 1.5);\n    }\n}\n\n// Surface lenticels (small dots)\nmodule lenticels() {\n    // Random-ish pattern using golden angle\n    for (i = [0:89]) {\n        a = i * 137.5;\n        polar = 19 * sqrt(i / 90);\n        translate([polar * cos(a), polar * sin(a), 21 * (1 + 0.1 * sin(i))])\n            sphere(d = 1.0);\n    }\n}\n\n// Prepare for printing\nunion() {\n    fruit_body();\n    stem_stub();\n    sepals();\n    lenticels();\n}",
    "renders": true
  },
  {
    "fruit": "camapu",
    "openscad_code": "// Camapu (Brazilian sweet) – realistic 3D-printable model\n// Medium complexity, ~50–100 mm overall\n\n// Global parameters\n$fn = 36;  // Smooth curves\n\n// Overall scale – 60 mm long\nscale_factor = 60 / 47;\n\n// Camapu = soft caramel cube coated in fine sugar\nmodule camapu() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Soft caramel core\n        color(\"chocolate\") difference() {\n            // Main cube with rounded edges\n            minkowski() {\n                cube([40, 40, 15], center = true);\n                sphere(d = 7);\n            }\n            // Carve a shallow dimple on top to show softness\n            translate([0, 0, 9])\n                sphere(d = 20);\n        }\n\n        // Sugar crystals – small bumps across surface\n        color(\"white\") {\n            for (sx = [-20:10:20])\n                for (sy = [-20:10:20])\n                    for (sz = [-7:7:7]) {\n                        // Skip the bottom to sit flat\n                        if (sz > -6) {\n                            translate([sx, sy, sz])\n                                sphere(d = 2.4);\n                        }\n                    }\n        }\n\n        // Wrapper fold lines (thin indentations)\n        color(\"chocolate\") {\n            // Horizontal fold\n            translate([0, 0, 7.5])\n                cube([50, 1, 1], center = true);\n            // Vertical fold\n            translate([0, 0, 7.5])\n                rotate([0, 0, 90])\n                    cube([50, 1, 1], center = true);\n        }\n    }\n}\n\n// Render the single camapu centered on build plate\ntranslate([0, 0, 30 * scale_factor])\n    camapu();",
    "renders": true
  },
  {
    "fruit": "cambuci",
    "openscad_code": "// Cambuci (Campomanesia phaea) – medium-complexity realistic model\n// Height ≈ 65 mm, max Ø ≈ 55 mm – printable upright with 0.8 mm walls\n\n$fn = 36;           // Nice curves without overload\n\n// Basic dimensions\nfruit_h = 60;       // Overall height\nbase_d  = 50;       // Widest diameter\nstem_d  = 8;        // Calyx/stem diameter\ncrown_d = 35;       // Top crown diameter\nwall_t  = 1.6;      // Printable wall thickness\n\nmodule cambuci() {\n    // Main fruit body – four stacked & blended spheroids\n    union() {\n        // Bottom bulge\n        translate([0,0, fruit_h*0.15])\n            scale([1, 1, 0.7])\n                sphere(d = base_d);\n\n        // Mid bulge\n        translate([0,0, fruit_h*0.45])\n            scale([1, 1, 0.9])\n                sphere(d = base_d*1.02);\n\n        // Upper taper\n        translate([0,0, fruit_h*0.75])\n            scale([0.85, 0.85, 0.8])\n                sphere(d = crown_d*1.1);\n\n        // Very top sphere for calyx seat\n        translate([0,0, fruit_h - 2])\n            sphere(d = crown_d);\n    }\n}\n\n// Create outer shell\ndifference() {\n    cambuci();\n\n    // Hollow out (printable shell)\n    translate([0,0, -1])\n        scale([1-wall_t/base_d, 1-wall_t/base_d, 1-wall_t/fruit_h*2])\n            cambuci();\n}\n\n// Calyx – small lobes around stem\nmodule calyx_lobe(a) {\n    rotate([0,0,a])\n        translate([crown_d/2 - 3, 0, fruit_h - 1])\n            rotate([90,0,0])\n                cylinder(h = 6, d1 = 4, d2 = 2);\n}\n\n// Stem\ntranslate([0,0, fruit_h])\n    cylinder(h = 8, d1 = stem_d, d2 = stem_d*0.7);\n\n// Five calyx lobes evenly spaced\nfor(i=[0:72:359])\n    calyx_lobe(i);\n\n// Optional – slight flattening on bottom for stable printing\ntranslate([0,0,-0.5])\n    cube([base_d*0.8, base_d*0.8, 1], center=true);",
    "renders": true
  },
  {
    "fruit": "cupui",
    "openscad_code": "// OpenSCAD Cupuaçu (Cupu-í) – medium-complexity realistic style\n// Overall height ~60 mm, printable without supports\n\n$fn = 36;      // Smooth curves\n\n// Main body: ellipsoid\nmodule body() {\n    difference() {\n        scale([1, 0.85, 1.2]) sphere(d = 48);       // Overall volume\n        // Flatten top\n        translate([0, 0, 20]) cube([60, 60, 40], center = true);\n    }\n}\n\n// Central ridge seam\nmodule seam() {\n    for (a = [-4:4]) {\n        translate([0, a*2.5, 0])\n        rotate([90, 0, 0])\n        cylinder(d1 = 3, d2 = 1.5, h = 55);\n    }\n}\n\n// Segmented peel texture\nmodule peel_segments() {\n    difference() {\n        body();\n        // Cut shallow grooves\n        for (i = [0:11]) {\n            rotate([0, 0, i*30])\n            translate([0, 0, -30])\n            cube([1.5, 60, 70], center = true);\n        }\n    }\n}\n\n// Stem stub\nmodule stem_stub() {\n    translate([0, 0, 26])\n    cylinder(d1 = 12, d2 = 8, h = 8);\n}\n\n// Soft pulp cavity (hollow for printing)\nmodule cavity() {\n    translate([0, 0, 5])\n    scale([0.5, 0.45, 0.7])\n    sphere(d = 45);\n}\n\n// Seed array – 5% larger than true seed for printability\nmodule seed() {\n    scale([1, 1.2, 1])\n    sphere(d = 12);\n}\n\nmodule seed_cluster() {\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([8, 0, 0])\n        seed();\n    }\n}\n\n// Assembly\nunion() {\n    peel_segments();\n    seam();\n    stem_stub();\n}\n\n// Remove interior for realistic hollow fruit\ndifference() {\n    body();\n    cavity();\n    // Place seeds inside cavity\n    translate([0, 0, -5]) seed_cluster();\n}",
    "renders": true
  },
  {
    "fruit": "curuba",
    "openscad_code": "// Curuba (banana passionfruit) - realistic medium complexity\n// Dimensions: ~80mm length, ~25mm diameter at widest\n\n$fn = 36;\n\n// Main parameters\nlength = 80;\nmax_diameter = 25;\ntip_length = 8;\nstem_length = 15;\n\nmodule curuba_body() {\n    // Create the main elongated body with slight curve\n    hull() {\n        // Tip\n        translate([0, 0, -length/2]) \n            scale([0.3, 0.3, 1]) \n                sphere(d=tip_length);\n        \n        // Main bulge\n        translate([0, 0, 0]) \n            scale([1, 0.9, 1.2]) \n                sphere(d=max_diameter);\n        \n        // Upper section\n        translate([0, 0, length/2 - stem_length]) \n            scale([0.8, 0.8, 1]) \n                sphere(d=max_diameter * 0.8);\n    }\n}\n\nmodule surface_ribs() {\n    // Create longitudinal ribs for texture\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, max_diameter/2 * 0.85, 0]) \n                scale([0.15, 0.15, 1]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=length * 0.9, d=max_diameter * 0.1, center=true);\n        }\n    }\n}\n\nmodule stem() {\n    // Stem with slight curve\n    translate([0, 0, length/2 + stem_length/2 - 5])\n        rotate([15, 0, 0])\n            cylinder(h=stem_length, d1=4, d2=3);\n    \n    // Stem base flare\n    translate([0, 0, length/2 - 5])\n        cylinder(h=3, d1=6, d2=4);\n}\n\nmodule seeds() {\n    // Add seed compartments inside\n    difference() {\n        curuba_body();\n        \n        // Create hollow interior with seed chambers\n        translate([0, 0, -length/4])\n            scale([0.7, 0.7, 0.8])\n                cylinder(h=length * 0.8, d=max_diameter * 0.7, center=true);\n        \n        // Seed details (small spheres)\n        for(z = [-length/3:8:length/3]) {\n            for(a = [0:60:360]) {\n                rotate([0, 0, a]) {\n                    translate([max_diameter * 0.25, 0, z])\n                        sphere(d=2);\n                }\n            }\n        }\n    }\n}\n\nmodule skin_texture() {\n    // Add fine bumpy texture\n    difference() {\n        union() {\n            curuba_body();\n            surface_ribs();\n        }\n        \n        // Tiny dimples for realistic skin\n        for(z = [-length/2 + 5:5:length/2 - stem_length - 5]) {\n            for(a = [0:30:360]) {\n                rotate([0, 0, a]) {\n                    translate([max_diameter/2 * cos(a * 3), \n                              max_diameter/2 * sin(a * 3), z])\n                        sphere(d=0.8);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete fruit\nunion() {\n    skin_texture();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "goiaba",
    "openscad_code": "// Realistic 3D Printable Goiaba (Guava)\n// Overall dimensions ~70 mm length\n\n$fn = 36;              // Smoother curves for realistic look\nwall = 1.5;            // 3D-print friendly wall thickness\n\nmodule fruit_body() {\n    // Main fruit – slightly lumpy sphere stretched along Z\n    scale([1, 0.9, 1.15])\n    sphere(d = 50);\n}\n\nmodule calyx_top() {\n    // Five sepals in a star pattern\n    for(a = [0:72:359])\n        rotate([0, 0, a])\n        translate([0, 13, 25.5])\n        rotate([90, 0, 0])\n        scale([1, 0.6, 1])\n        cylinder(h = 8, r1 = 4.5, r2 = 3, $fn = 6);\n}\n\nmodule blossom_end() {\n    // Small protruding remnant of style\n    translate([0, 0, -26])\n    rotate_extrude(angle = 360, $fn = 24)\n    translate([0, 2])\n    circle(r = 1.5);\n}\n\nmodule skin_texture() {\n    // Light bumps across surface for realistic guava skin\n    for(i = [10:20:320]) {\n        for(j = [5:15:175]) {\n            rotate([i, j, 0])\n            translate([0, 0, 25])\n            rotate([90, 0, 0])\n            scale([1, 1, 0.4])\n            cylinder(h = 1, r1 = 1.3, r2 = 0.8);\n        }\n    }\n}\n\nmodule hollow_core() {\n    // Remove inner flesh to save material and avoid sink marks\n    difference() {\n        fruit_body();\n        translate([0, 0, -2])\n        scale([0.7, 0.7, 0.8])\n        sphere(d = 50 - 2*wall);\n    }\n}\n\n// Assemble the complete fruit\ndifference() {\n    union() {\n        hollow_core();\n        calyx_top();\n        blossom_end();\n        skin_texture();\n    }\n    // Optional drainage hole at bottom for printing\n    translate([0, 0, -30])\n    cylinder(h = 5, d = 3, $fn = 12);\n}",
    "renders": true
  },
  {
    "fruit": "graviola",
    "openscad_code": "// Graviola (Soursop) Fruit - Realistic Style, Medium Complexity\n// External dimensions ~70 mm\n\n$fn = 36;  // Smooth curves\n\nmodule graviola_body() {\n    union() {\n        // Main fruit body - slightly asymmetric ellipsoid\n        scale([1.0, 0.9, 1.1])\n        sphere(d = 60);\n        \n        // Small bump protrusions for realistic texture\n        for (i = [0 : 15 : 345]) {\n            rotate([0, 0, i])\n            translate([0, 28, 0])\n            rotate([0, 90, 0])\n            scale([0.5, 0.5, 1.0])\n            cylinder(d1 = 8, d2 = 4, h = 5);\n        }\n    }\n}\n\nmodule graviola_spines() {\n    // Soft spiky surface\n    for (i = [0 : 30 : 359]) {\n        for (j = [20 : 20 : 60]) {\n            rotate([0, 0, i])\n            translate([0, j, 0])\n            rotate([90, 0, 0])\n            scale([0.4, 0.4, 1.0])\n            cylinder(d1 = 3, d2 = 1, h = 8);\n        }\n    }\n}\n\nmodule stem_attachment() {\n    // Stem base with small leaf remnant\n    translate([0, 0, 30])\n    rotate([0, 0, 0])\n    cylinder(d1 = 12, d2 = 8, h = 10);\n    \n    // Small dried leaf\n    translate([6, 0, 35])\n    rotate([0, 110, 0])\n    scale([0.5, 0.3, 0.1])\n    sphere(d = 20);\n}\n\nmodule graviola_surface_detail() {\n    difference() {\n        union() {\n            graviola_body();\n            graviola_spines();\n            stem_attachment();\n        }\n        \n        // Remove bottom flat surface for printing\n        translate([0, 0, -35])\n        cube([100, 100, 35], center = true);\n    }\n}\n\n// Main assembly\ngraviola_surface_detail();",
    "renders": true
  },
  {
    "fruit": "guabiju",
    "openscad_code": "// Guabiju (medium-complexity, realistic style)\n// Overall dimensions: ~70 mm long, 40 mm high, 30 mm wide\n\n// Scale factor for easy resizing\nscaleFactor = 1;\n\n// Main body\nmodule body() {\n    difference() {\n        hull() {\n            // Central torso\n            translate([0, 0, 10]) scale([1.2, 1, 1]) sphere(d = 25 * scaleFactor, $fn = 32);\n            // Rear abdomen\n            translate([-20, 0, 8]) scale([1.5, 1.2, 0.8]) sphere(d = 20 * scaleFactor, $fn = 32);\n            // Front thorax\n            translate([15, 0, 12]) scale([0.8, 0.9, 1.1]) sphere(d = 18 * scaleFactor, $fn = 32);\n        }\n        // Ventral hollow to reduce weight\n        translate([0, 0, -5]) cube([50, 30, 10], center = true);\n    }\n}\n\n// Head with mandibles\nmodule head() {\n    translate([25, 0, 18]) rotate([0, -10, 0]) {\n        union() {\n            // Head capsule\n            scale([1.3, 1.1, 1]) sphere(d = 15 * scaleFactor, $fn = 32);\n            // Left mandible\n            translate([5, -5, 0]) rotate([0, 0, 30]) \n                cylinder(h = 12 * scaleFactor, r1 = 2.5 * scaleFactor, r2 = 1 * scaleFactor);\n            // Right mandible\n            translate([5, 5, 0]) rotate([0, 0, -30]) \n                cylinder(h = 12 * scaleFactor, r1 = 2.5 * scaleFactor, r2 = 1 * scaleFactor);\n            // Antennae\n            translate([0, -3, 7]) rotate([0, -20, 20]) \n                cylinder(h = 10 * scaleFactor, r = 0.8 * scaleFactor);\n            translate([0, 3, 7]) rotate([0, -20, -20]) \n                cylinder(h = 10 * scaleFactor, r = 0.8 * scaleFactor);\n        }\n    }\n}\n\n// Elytra (wing covers)\nmodule elytra() {\n    for (y = [-1, 1]) {\n        translate([0, y * 6, 12]) rotate([0, 0, y * 10]) {\n            difference() {\n                hull() {\n                    translate([-5, 0, 0]) sphere(d = 12 * scaleFactor, $fn = 16);\n                    translate([-20, 0, 0]) sphere(d = 10 * scaleFactor, $fn = 16);\n                }\n                // Groove between elytra\n                translate([0, -y * 2, -2]) cube([30, 4, 10], center = true);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for (side = [-1, 1]) {\n        // Front legs\n        translate([20, side * 12, 10]) rotate([0, 0, side * -30]) {\n            cylinder(h = 15 * scaleFactor, r = 1.5 * scaleFactor);\n            translate([0, 0, 15 * scaleFactor]) rotate([90, 0, 0]) {\n                cylinder(h = 8 * scaleFactor, r = 1 * scaleFactor);\n            }\n        }\n        // Mid legs\n        translate([5, side * 15, 8]) rotate([0, 0, side * -20]) {\n            cylinder(h = 12 * scaleFactor, r = 1.5 * scaleFactor);\n            translate([0, 0, 12 * scaleFactor]) rotate([90, 0, 0]) {\n                cylinder(h = 10 * scaleFactor, r = 1 * scaleFactor);\n            }\n        }\n        // Hind legs\n        translate([-15, side * 12, 8]) rotate([0, 0, side * -15]) {\n            cylinder(h = 14 * scaleFactor, r = 2 * scaleFactor);\n            translate([0, 0, 14 * scaleFactor]) rotate([90, 0, 0]) {\n                cylinder(h = 12 * scaleFactor, r = 1.2 * scaleFactor);\n            }\n        }\n    }\n}\n\n// Segmented abdomen detail\nmodule abdomenSegments() {\n    for (i = [0:4]) {\n        translate([-25 + i * 5, 0, 8 - i * 1.5]) {\n            difference() {\n                cube([6 * scaleFactor, 18 * scaleFactor, 3 * scaleFactor], center = true);\n                translate([0, 0, 2]) cube([6.2 * scaleFactor, 18.2 * scaleFactor, 2 * scaleFactor], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    elytra();\n    legs();\n    abdomenSegments();\n}",
    "renders": true
  },
  {
    "fruit": "imbu",
    "openscad_code": "// Realistic medium-complexity Imbu (humanoid skull)\n// Overall height ≈ 75 mm, wall-thickness 2 mm for printing\n\nwall = 2;\n\nmodule skull() {\n    // Cranial vault\n    difference() {\n        scale([1, 0.9, 1]) sphere(d = 55, $fn = 48);\n        translate([0, 0, -5]) cube([60, 60, 60], center = true);\n    }\n\n    // Forehead slope\n    translate([0, -5, 25])\n        difference() {\n            scale([1, 0.8, 0.7]) sphere(d = 50, $fn = 32);\n            translate([0, 0, -10]) cube([60, 60, 60], center = true);\n        }\n\n    // Eye sockets\n    for (x = [-20, 20]) {\n        translate([x, 0, 10])\n            rotate([0, 15 * (x > 0 ? -1 : 1), 0])\n            difference() {\n                scale([1, 1.2, 1.2]) sphere(d = 18, $fn = 24);\n                translate([0, 0, 10]) cube([30, 30, 30], center = true);\n            }\n    }\n\n    // Nasal cavity\n    translate([0, -20, 5])\n        rotate([15, 0, 0])\n        difference() {\n            cylinder(h = 25, d1 = 14, d2 = 10, $fn = 24);\n            translate([0, 0, 15]) cube([16, 16, 16], center = true);\n        }\n\n    // Cheek zygomatic arches\n    for (x = [-30, 30]) {\n        translate([x, -15, -5])\n            rotate([0, 0, x > 0 ? -20 : 20])\n            difference() {\n                scale([1, 0.4, 0.4]) sphere(d = 18, $fn = 20);\n                translate([0, 0, 10]) cube([20, 20, 20], center = true);\n            }\n    }\n\n    // Upper jaw\n    translate([0, -28, -10])\n        difference() {\n            union() {\n                cube([45, 25, 20], center = true);\n                translate([0, 0, -10]) cylinder(h = 15, d = 45, $fn = 32);\n            }\n            // Hollow inside\n            translate([0, 0, -5])\n                cube([45 - 2*wall, 25 - 2*wall, 20], center = true);\n        }\n\n    // Teeth\n    for (i = [-3:3]) {\n        translate([i*6, -40, -15])\n            cylinder(h = 8, d = 5, $fn = 16);\n    }\n\n    // Mandible\n    translate([0, -35, -25])\n        difference() {\n            union() {\n                // Chin\n                translate([0, -8, -5]) sphere(d = 20, $fn = 32);\n                // Ramus sides\n                for (x = [-25, 25]) {\n                    translate([x, 0, 0])\n                        rotate([0, 0, x > 0 ? 15 : -15])\n                        cube([8, 25, 30], center = true);\n                }\n            }\n            // Hollow\n            translate([0, -5, -5])\n                cube([50 - 2*wall, 25 - 2*wall, 25], center = true);\n        }\n\n    // Lower teeth\n    for (i = [-3:3]) {\n        translate([i*6, -40, -30])\n            cylinder(h = 6, d = 4, $fn = 16);\n    }\n}\n\n// Make printable shell\ndifference() {\n    skull();\n    // Inner hollow\n    translate([0, 0, 5]) scale([0.8, 0.8, 0.75]) skull();\n}",
    "renders": true
  },
  {
    "fruit": "ingá",
    "openscad_code": "// Ingá (Inga edulis) - realistic medium complexity\n// Dimensions in mm, printable at ~80mm length\n\n$fa = 2;\n$fs = 0.5;\n\nmodule pod_half(length, width, thickness) {\n    // Main pod wall\n    difference() {\n        // Outer curved shell\n        hull() {\n            translate([0,0,0])\n                sphere(d=width);\n            translate([length,0,0])\n                sphere(d=width*0.7);\n        }\n        \n        // Inner hollow\n        translate([0,0,-thickness])\n            scale([1,1,0.8])\n            hull() {\n                translate([0,0,0])\n                    sphere(d=width*0.7);\n                translate([length,0,0])\n                    sphere(d=width*0.5);\n            }\n    }\n}\n\nmodule seeds(count) {\n    // Generate realistic seeds inside pod\n    for(i=[0:count-1]) {\n        translate([15 + i*12, 0, -2])\n            rotate([0,90,0])\n                scale([1,1.2,1])\n                    difference() {\n                        sphere(d=8);  // Main seed body\n                        translate([2,0,0])\n                            sphere(d=6);  // Flattened side\n                    }\n    }\n}\n\nmodule pod_texture() {\n    // Realistic surface texture - longitudinal ridges\n    for(i=[-6:6]) {\n        translate([0, i*3, 0])\n            rotate([90,0,0])\n                cylinder(h=80, d1=2, d2=1, $fn=8);\n    }\n}\n\nmodule stem_connector() {\n    // Connection point to tree\n    translate([-5,0,0])\n        rotate([0,90,0])\n            cylinder(h=15, d1=8, d2=5, $fn=12);\n}\n\nmodule complete_pod() {\n    // Main pod assembly\n    union() {\n        // Bottom half\n        pod_half(70, 25, 3);\n        \n        // Top half (mirrored)\n        translate([0,0,0])\n            mirror([0,0,1])\n                pod_half(70, 25, 3);\n        \n        // Seeds inside\n        seeds(5);\n        \n        // Surface texture\n        pod_texture();\n        \n        // Stem\n        stem_connector();\n    }\n}\n\n// Generate the complete ingá pod\nrotate([0,0,10])\n    complete_pod();",
    "renders": true
  },
  {
    "fruit": "jambo",
    "openscad_code": "// Jambo (elephant) in realistic medium detail style\n// Overall size: ~80mm long, 50mm tall\n\n$fn = 36;  // Smooth curves\n\n// Main body\nmodule body() {\n    difference() {\n        // Torso\n        scale([1.2, 0.8, 0.7])\n            sphere(20);\n        \n        // Neck hole front\n        translate([20, 0, 5])\n            rotate([0, -20, 0])\n                cylinder(h=25, r=8);\n        \n        // Neck hole back\n        translate([-20, 0, 5])\n            rotate([0, 20, 0])\n                cylinder(h=25, r=8);\n    }\n}\n\n// Head with trunk\nmodule head() {\n    translate([30, 0, 15]) {\n        // Skull\n        scale([1.5, 1.2, 1])\n            sphere(15);\n        \n        // Trunk\n        translate([-10, 0, -10]) {\n            rotate([0, 30, 0])\n                cylinder(h=35, r1=8, r2=5);\n            translate([35*cos(30)-10, 0, 35*sin(30)-10]) {\n                rotate([0, 60, 0])\n                    cylinder(h=25, r1=5, r2=4);\n                translate([25*cos(60), 0, 25*sin(60)]) {\n                    rotate([0, 90, 0])\n                        cylinder(h=20, r1=4, r2=3);\n                }\n            }\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([0, side*15, 5]) {\n                rotate([0, side*20, 0])\n                    scale([0.3, 1, 0.8])\n                        sphere(12);\n            }\n        }\n        \n        // Tusks\n        for(side = [-1, 1]) {\n            translate([20, side*5, -8]) {\n                rotate([0, -30, side*15])\n                    cylinder(h=15, r1=3, r2=1);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([20, side*7, 3]) {\n                difference() {\n                    sphere(3);\n                    translate([0, 0, 2])\n                        sphere(2.5);\n                }\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(height) {\n    cylinder(h=height, r1=6, r2=5);\n    translate([0, 0, height])\n        sphere(5);\n}\n\n// Four legs\nmodule legs() {\n    positions = [[-15, -10, -15], [-15, 10, -15], [15, -10, -15], [15, 10, -15]];\n    for(pos = positions) {\n        translate(pos)\n            leg(20);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-25, 0, 0]) {\n        rotate([0, 30, 0])\n            cylinder(h=20, r1=4, r2=2);\n        translate([20*cos(30), 0, 20*sin(30)])\n            rotate([0, 60, 0])\n                cylinder(h=15, r1=2, r2=1);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "fruit": "jenipapo",
    "openscad_code": "// Jenipapo fruit - medium complexity realistic style\n// Approx 70mm diameter\n\n$fn = 50;  // Smooth curves\n\nmodule jenipapo() {\n    // Main fruit body - slightly flattened sphere\n    scale([1, 1, 0.85])\n    sphere(35);\n    \n    // Top indentation\n    translate([0, 0, 29])\n    difference() {\n        sphere(8);\n        translate([0, 0, -5])\n        cylinder(r=10, h=15, center=true);\n    }\n    \n    // Bottom indentation\n    translate([0, 0, -29])\n    difference() {\n        sphere(6);\n        translate([0, 0, 5])\n        cylinder(r=8, h=15, center=true);\n    }\n    \n    // Surface texture - small bumps\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24 + 12])\n        for (j = [0:5]) {\n            rotate([j * 30 + 15, 0, 0])\n            translate([0, 0, 32 - j * 5])\n            scale([1, 1, 0.5])\n            sphere(1.5);\n        }\n    }\n    \n    // Stem remnant\n    translate([0, 0, 30])\n    cylinder(r1=3, r2=2, h=8);\n    \n    // Calyx remnants - small triangular sepals\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 7, 30])\n        rotate([0, 0, 35])\n        rotate([90, 0, 0])\n        linear_extrude(height=0.8)\n        polygon(points=[[0,0], [3,2], [0,4]]);\n    }\n    \n    // Light surface ridges\n    for (i = [0:7]) {\n        rotate([0, 0, i * 25.7])\n        translate([0, 0, 0])\n        scale([1, 1, 0.9])\n        rotate_extrude(angle=60)\n        translate([34, 0, 0])\n        circle(r=0.5);\n    }\n}\n\n// Create the fruit\njenipapo();",
    "renders": true
  },
  {
    "fruit": "lobeira",
    "openscad_code": "// Lobeira - Wolf's Apple (Solanum lycocarpum)\n// Realistic medium-complexity model for 3D printing\n\nmodule lobeira() {\n    difference() {\n        // Main fruit body - slightly flattened sphere\n        scale([1, 1, 0.85])\n        sphere(d=50, $fn=64);\n        \n        // Stem cavity\n        translate([0, 0, 25])\n        cylinder(h=8, d1=8, d2=5, $fn=32);\n    }\n    \n    // Stem\n    translate([0, 0, 25])\n    cylinder(h=12, d1=5, d2=7, $fn=16);\n    \n    // Calyx lobes (5 parts)\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 25, 23])\n        rotate([0, 45, 0])\n        scale([0.3, 1, 0.2])\n        sphere(d=8, $fn=16);\n    }\n    \n    // Surface texture - small bumps\n    for(a=[0:15:359]) {\n        for(b=[-60:30:60]) {\n            rotate([b, 0, a])\n            translate([0, 0, 25])\n            scale([0.1, 0.1, 0.05])\n            sphere(d=3, $fn=8);\n        }\n    }\n    \n    // Base flattening\n    translate([0, 0, -25])\n    cube([52, 52, 3], center=true);\n}\n\n// Create the lobeira\nlobeira();",
    "renders": true
  },
  {
    "fruit": "marolo",
    "openscad_code": "// Marolo (Mario mushroom) - Realistic medium complexity\n// Size: ~60mm height, 3D printable\n\n$fn = 32;\n\n// Main dimensions\ncap_height = 35;\ncap_radius = 30;\nstem_height = 25;\nstem_radius = 22;\n\n// Cap spots\nspot_radius = 7;\nspots = [\n    [0, 0, 1.0],\n    [12, 0, 0.9],\n    [-12, 0, 0.9],\n    [0, 12, 0.9],\n    [0, -12, 0.9],\n    [8, 8, 0.8],\n    [-8, 8, 0.8],\n    [8, -8, 0.8],\n    [-8, -8, 0.8]\n];\n\n// Stem details\ngill_height = 3;\ngill_depth = 1.5;\ngill_count = 12;\n\nmodule mushroom_cap() {\n    // Main cap with rounded dome\n    difference() {\n        union() {\n            // Upper dome\n            translate([0, 0, cap_height * 0.4])\n                scale([1, 1, 0.8])\n                sphere(r = cap_radius);\n            \n            // Lower rim flare\n            translate([0, 0, stem_height / 2])\n                cylinder(h = cap_height * 0.6, r1 = cap_radius * 0.85, r2 = cap_radius * 1.05);\n        }\n        \n        // Hollow underside\n        translate([0, 0, stem_height / 2])\n            cylinder(h = cap_height, r = stem_radius * 1.1);\n    }\n    \n    // Surface spots\n    for (spot = spots) {\n        translate([spot[0], spot[1], cap_height * 0.7])\n            scale([1, 1, 0.5])\n            sphere(r = spot_radius * spot[2]);\n    }\n}\n\nmodule mushroom_stem() {\n    // Main stem with slight taper\n    cylinder(h = stem_height, r1 = stem_radius * 0.9, r2 = stem_radius * 0.95);\n    \n    // Gills underneath cap\n    for (i = [0:gill_count - 1]) {\n        rotate([0, 0, i * 360 / gill_count])\n            translate([stem_radius * 0.7, -gill_depth / 2, stem_height - gill_height])\n                cube([gill_depth, gill_depth, gill_height]);\n    }\n    \n    // Base ring\n    translate([0, 0, 0])\n        cylinder(h = 3, r1 = stem_radius, r2 = stem_radius * 1.1);\n}\n\nmodule mushroom() {\n    union() {\n        // Cap\n        color(\"red\")\n        mushroom_cap();\n        \n        // Stem\n        translate([0, 0, 0])\n            color(\"beige\")\n            mushroom_stem();\n    }\n}\n\n// Generate the mushroom\nmushroom();",
    "renders": true
  },
  {
    "fruit": "murici",
    "openscad_code": "// Murici (Byrsonima crassifolia) - Realistic 3D Printable Model\n// Medium complexity with basic primitives\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 1.2;\n\nmodule murici() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main fruit body - ellipsoid shape\n        color(\"darkgreen\")\n        scale([1.2, 1, 0.8])\n        sphere(r=10);\n        \n        // Top calyx remains\n        translate([0, 0, 8])\n        rotate([0, 0, 0])\n        cylinder(h=3, r1=4, r2=2);\n        \n        // Individual calyx lobes\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n            translate([2.5, 0, 8])\n            rotate([30, 0, 0])\n            cylinder(h=1.5, r1=1, r2=0.5);\n        }\n        \n        // Surface texture - small bumps\n        for(i=[0:15]) {\n            rotate([i*24, 0, 0])\n            for(j=[0:8]) {\n                rotate([0, j*45, 0])\n                translate([8*cos(i*24), 8*sin(i*24), 0])\n                sphere(r=0.3 + (sin(i*24) * 0.2));\n            }\n        }\n        \n        // Bottom indentation\n        difference() {\n            sphere(r=10);\n            translate([0, 0, -10])\n            cylinder(h=5, r1=0, r2=3);\n        }\n        \n        // Small stem scar\n        translate([0, 0, -9.5])\n        cylinder(h=1, r1=1.5, r2=1);\n    }\n}\n\n// Create the murici\nmurici();",
    "renders": true
  },
  {
    "fruit": "pindaíba",
    "openscad_code": "// Pindaíba (Maranta arundinacea) rhizome – realistic, medium complexity\n// Overall size ≈ 80 mm long, 30 mm diameter\n\n$fn = 36;          // smooth curves\n\n// ---------- PARAMETERS ----------\nroot_len = 80;\nroot_dia = 30;\nwall = 1.6;        // 3D-print friendly wall\nseg_num = 5;       // rhizome segments\nscale_taper = 0.8; // tip taper\nknob_dia = 4;\nknob_num = 12;\n\n// ---------- MAIN RHIZOME ----------\nmodule rhizome() {\n    difference() {\n        // outer tapered body\n        hull() {\n            for(i = [0:seg_num-1])\n                translate([i*(root_len/seg_num), 0, 0])\n                    scale([1 - (i/seg_num)*(1-scale_taper),\n                           1 - (i/seg_num)*(1-scale_taper),\n                           1 - (i/seg_num)*(1-scale_taper)])\n                        sphere(d = root_dia);\n        }\n        // hollow core\n        hull() {\n            for(i = [0:seg_num-1])\n                translate([i*(root_len/seg_num), 0, 0])\n                    scale([1 - (i/seg_num)*(1-scale_taper),\n                           1 - (i/seg_num)*(1-scale_taper),\n                           1 - (i/seg_num)*(1-scale_taper)])\n                        sphere(d = root_dia - 2*wall);\n        }\n    }\n}\n\n// ---------- EYE KNOBS (axillary buds) ----------\nmodule eye_knobs() {\n    for(i = [1:knob_num]) {\n        angle = 360 * i / knob_num;\n        pos = root_len * 0.35 + (i % 2) * root_len * 0.2;\n        rotate([90, 0, angle])\n            translate([pos, 0, root_dia/2])\n                sphere(d = knob_dia);\n    }\n}\n\n// ---------- ROOT SCARS ----------\nmodule root_scars() {\n    for(i = [1:3]) {\n        z = (-root_dia/2.5) + i * 6;\n        rotate([90, 0, 0])\n            translate([root_len * 0.6, 0, z])\n                difference() {\n                    cylinder(h = 2, d = 6, center = true);\n                    cylinder(h = 3, d = 4, center = true);\n                }\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    rhizome();\n    eye_knobs();\n    root_scars();\n}",
    "renders": true
  },
  {
    "fruit": "pupunha",
    "openscad_code": "// Pupunha Palm Fruit - Realistic Style, Medium Complexity\n// Size: ~60mm x 35mm x 35mm\n\n$fn = 32;\n\n// Main fruit body - elongated oval shape\nmodule fruit_body() {\n    hull() {\n        // Top bulb\n        translate([0, 0, 20])\n            scale([1, 1, 1.2])\n            sphere(r=15);\n        \n        // Middle section\n        translate([0, 0, 5])\n            scale([1.1, 1.1, 0.8])\n            sphere(r=14);\n        \n        // Bottom taper\n        translate([0, 0, -10])\n            scale([0.9, 0.9, 1.1])\n            sphere(r=12);\n    }\n}\n\n// Crown at top of fruit\nmodule crown() {\n    // Central cone\n    translate([0, 0, 35])\n        cylinder(h=8, r1=4, r2=2);\n    \n    // Crown scales in layers\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, 32])\n                scale([1 - i * 0.1, 1 - i * 0.1, 1])\n                cylinder(h=6, r1=6, r2=3);\n    }\n}\n\n// Surface texture - hexagonal patterns\nmodule surface_texture() {\n    // Create a pattern of bumps\n    for (angle = [0:30:360]) {\n        rotate([0, 0, angle]) {\n            for (z = [-25:5:25]) {\n                translate([14 * cos(angle), 14 * sin(angle), z])\n                    sphere(r=1.5);\n            }\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    difference() {\n        // Main stem base\n        translate([0, 0, 30])\n            cylinder(h=6, r=6, r1=5);\n        \n        // Hollow center for printing\n        translate([0, 0, 30])\n            cylinder(h=7, r=2);\n    }\n}\n\n// Base flattening for printing stability\nmodule print_base() {\n    translate([0, 0, -15])\n        cylinder(h=2, r=12);\n}\n\n// Create complete pupunha\nunion() {\n    // Main fruit body\n    fruit_body();\n    \n    // Crown\n    crown();\n    \n    // Stem base\n    stem_base();\n    \n    // Printing base\n    print_base();\n    \n    // Surface texture (subtle)\n    surface_texture();\n}",
    "renders": true
  },
  {
    "fruit": "sapoti",
    "openscad_code": "// Realistic Sapoti (Chikoo) - Medium Complexity\n// Overall size ~70mm diameter, 3D-printable without supports\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nsapoti_radius = 35;\nsapoti_height = 40;\nwall_thickness = 2;\n\nmodule sapoti() {\n    // Main body - slightly flattened sphere with subtle bumps\n    difference() {\n        // Outer skin\n        union() {\n            // Base ellipsoid shape\n            scale([1, 1, 0.9])\n            sphere(sapoti_radius);\n            \n            // Add subtle bumps for realistic texture\n            for(i = [0:15]) {\n                rotate([0, 0, i*137.5])  // Golden angle for natural spacing\n                translate([sapoti_radius*0.85, 0, sin(i*3)*3])\n                scale([1, 1, 0.7])\n                sphere(2 + sin(i*5)*0.5);\n            }\n        }\n        \n        // Hollow interior for 3D printing\n        translate([0, 0, -wall_thickness])\n        scale([1, 1, 0.85])\n        sphere(sapoti_radius - wall_thickness);\n    }\n    \n    // Top indentation where stem was attached\n    translate([0, 0, sapoti_radius*0.85])\n    rotate_extrude()\n    difference() {\n        circle(sapoti_radius*0.15);\n        translate([0, -2])\n        square([sapoti_radius*0.3, 2]);\n    }\n    \n    // Bottom flattening for stability\n    translate([0, 0, -sapoti_radius*0.85])\n    cylinder(h=2, r=sapoti_radius, $fn=64);\n    \n    // Surface scarring from fruit picking\n    for(i = [1:5]) {\n        rotate([0, 0, i*60 + 30])\n        translate([sapoti_radius*0.7, 0, sapoti_radius*0.3])\n        scale([1, 0.5, 0.2])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n    }\n    \n    // Small brown spots (natural imperfections)\n    color(\"saddlebrown\")\n    for(i = [1:12]) {\n        rotate([0, 0, i*97])\n        translate([sapoti_radius*0.75, 0, sapoti_radius*0.4 + sin(i*2)*2])\n        sphere(0.8);\n    }\n}\n\n// Create the sapoti centered at origin\nsapoti();",
    "renders": true
  },
  {
    "fruit": "taperebá",
    "openscad_code": "// Taperebá (Spondias mombin) – realistic medium-detail model\n// All dimensions in mm. Largest dimension ≈ 80 mm. 3D-printable, no overhangs.\n\n$fn = 36;\n\n// Main fruit body\nmodule fruit_body() {\n    // Overall ellipsoid\n    difference() {\n        scale([1, 0.9, 1.2])\n            sphere(d = 45);                 // 54 mm tall\n        // Slight indentation at the top\n        translate([0, 0, 25])\n            cylinder(h = 12, d = 22, $fn = 32);\n    }\n}\n\n// Knobbly surface bumps (tiny spheres)\nmodule bumps() {\n    for(a = [0:30:359])\n        for(b = [30:30:150]) {\n            rotate([b, 0, a])\n                translate([0, 0, 22.5])\n                    sphere(d = 2.2);\n        }\n}\n\n// Stem stub\nmodule stem() {\n    translate([0, 0, 26.5])\n        cylinder(h = 10, d1 = 6, d2 = 4);\n}\n\n// Five longitudinal ribs (subtle ridges)\nmodule ribs() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([20, 0, 0])\n                rotate([90, 0, 90])\n                    cylinder(h = 55, d = 2.5);\n    }\n}\n\n// Thin equatorial “waist” groove\nmodule waist() {\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 1.8, d = 47.2);\n}\n\n// Calyx remnants at the base\nmodule calyx() {\n    translate([0, 0, -27])\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([8, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 4, d = 2);\n        }\n}\n\n// Final assembly\nunion() {\n    difference() {\n        // Main fruit with ribs\n        union() {\n            fruit_body();\n            ribs();\n        }\n        // Remove waist groove\n        waist();\n    }\n    bumps();\n    stem();\n    calyx();\n}",
    "renders": true
  },
  {
    "fruit": "tucuma",
    "openscad_code": "// Tucuma Palm Fruit Model - Realistic Medium Complexity\n// ~70mm length, 3D printable with no overhangs\n\n// Main fruit body\nmodule tucuma_body() {\n    difference() {\n        // Outer ellipsoid shape\n        scale([1, 0.7, 1.3])\n        sphere(d=45, $fn=48);\n        \n        // Bottom flat cut\n        translate([0, 0, -25])\n        cube([50, 50, 30], center=true);\n        \n        // Top indent for stem\n        translate([0, 0, 28])\n        cylinder(h=10, r1=8, r2=5, $fn=24);\n    }\n}\n\n// Surface texture pattern\nmodule surface_pattern() {\n    for(a=[0:30:330]) {\n        rotate([0, 0, a])\n        translate([0, 22, 0])\n        scale([1, 0.3, 0.15])\n        rotate([90, 0, 0])\n        cylinder(h=40, r1=2, r2=0.5, $fn=6);\n    }\n}\n\n// Stem attachment\nmodule stem_base() {\n    union() {\n        // Main stem\n        translate([0, 0, 30])\n        cylinder(h=15, r1=6, r2=4, $fn=16);\n        \n        // Stem collar\n        translate([0, 0, 28])\n        cylinder(h=3, r1=9, r2=9, $fn=32);\n    }\n}\n\n// Characteristic grooves\nmodule fruit_grooves() {\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([0, 0, 0])\n        scale([1, 1, 1.3])\n        rotate([90, 0, 0])\n        cylinder(h=50, r1=0.5, r2=0.5, $fn=3);\n    }\n}\n\n// Bottom point\nmodule bottom_tip() {\n    translate([0, 0, -22])\n    cylinder(h=5, r1=2, r2=0.1, $fn=16);\n}\n\n// Main assembly\nunion() {\n    // Solid body with wall thickness\n    difference() {\n        tucuma_body();\n        \n        // Hollow interior for printing\n        scale([0.85, 0.85, 0.85])\n        translate([0, 0, -5])\n        tucuma_body();\n    }\n    \n    // Add surface details\n    surface_pattern();\n    \n    // Add stem\n    stem_base();\n    \n    // Add grooves\n    fruit_grooves();\n    \n    // Add bottom tip\n    bottom_tip();\n}",
    "renders": true
  },
  {
    "fruit": "uxi",
    "openscad_code": "// Uxi (UFO on wheels) - Medium complexity realistic style\n// Dimensions: ~60mm diameter, 30mm height\n\n$fn = 48;  // Smooth curves for 3D printing\n\n// Main parameters\ndome_diameter = 50;\nbody_height = 15;\nwheel_diameter = 8;\nwheel_width = 4;\nwheel_gap = 3;\n\nmodule dome() {\n    // Upper dome with realistic thickness\n    difference() {\n        sphere(d = dome_diameter);\n        translate([0, 0, -2])\n            sphere(d = dome_diameter - 2);\n    }\n}\n\nmodule body() {\n    // Main saucer body\n    difference() {\n        cylinder(h = body_height, d = dome_diameter + 8, center = true);\n        \n        // Hollow out center\n        translate([0, 0, 2])\n            cylinder(h = body_height + 2, d = dome_diameter, center = true);\n        \n        // Landing gear wells\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([dome_diameter/2 + 2, 0, -body_height/2])\n                    cube([wheel_diameter + wheel_gap, wheel_width + 2, body_height + 2], center = true);\n        }\n    }\n    \n    // Bottom detail ring\n    translate([0, 0, -body_height/2 - 0.5])\n        cylinder(h = 1, d = dome_diameter + 6);\n}\n\nmodule landing_gear() {\n    // Single wheel assembly\n    rotate([0, 90, 0]) {\n        // Wheel\n        cylinder(h = wheel_width, d = wheel_diameter, center = true);\n        \n        // Axle\n        translate([0, 0, wheel_width/2 + 1])\n            cylinder(h = 2, d = 3);\n    }\n}\n\nmodule lights() {\n    // Navigation lights around rim\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([dome_diameter/2 + 2, 0, 0])\n                sphere(d = 2);\n    }\n    \n    // Center beacon\n    translate([0, 0, dome_diameter/2 - 2])\n        sphere(d = 3);\n}\n\n// Assemble the uxi\nunion() {\n    // Main structure\n    translate([0, 0, body_height/2 + 1])\n        dome();\n    \n    body();\n    \n    // Landing gear wheels\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([dome_diameter/2 + 2, 0, -body_height/2 - wheel_diameter/2])\n                landing_gear();\n    }\n    \n    // Lights\n    color(\"red\") lights();\n}",
    "renders": true
  },
  {
    "fruit": "araçá",
    "openscad_code": "// Araçá - Realistic style, medium complexity\n\n$fn = 36;\nfruit_diameter = 35;\nfruit_height = 30;\nstem_length = 8;\nstem_diameter = 3;\nsepal_count = 5;\nsepal_length = 8;\nsepal_width = 5;\nbump_count = 12;\nbump_size = 1.5;\n\nmodule fruit_body() {\n    difference() {\n        // Main fruit body - slightly flattened sphere\n        scale([1, 1, 0.85])\n        sphere(d = fruit_diameter);\n        \n        // Small bumps for texture\n        for (i = [0:bump_count-1]) {\n            rotate([0, 0, i * 360/bump_count])\n            translate([fruit_diameter/2 - 2, 0, 0])\n            sphere(d = bump_size * 2);\n        }\n    }\n}\n\nmodule stem() {\n    // Main stem\n    cylinder(h = stem_length, d = stem_diameter);\n    \n    // Small stem details\n    translate([0, 0, stem_length/2])\n    cylinder(h = stem_length/2, d1 = stem_diameter, d2 = stem_diameter * 0.7);\n}\n\nmodule sepals() {\n    for (i = [0:sepal_count-1]) {\n        rotate([0, 0, i * 360/sepal_count])\n        translate([0, fruit_diameter/2 - 2, fruit_height/2 - 5])\n        rotate([70, 0, 0])\n        scale([1, 0.7, 0.3])\n        cylinder(h = sepal_length, d1 = sepal_width, d2 = sepal_width * 0.3);\n    }\n}\n\nmodule calyx_depression() {\n    // Slight depression at top where sepals attach\n    translate([0, 0, fruit_height/2 - 3])\n    rotate_extrude(angle = 360, $fn = 24)\n    translate([fruit_diameter/2 - 5, 0])\n    circle(r = 3);\n}\n\n// Main assembly\nunion() {\n    // Fruit body\n    fruit_body();\n    \n    // Stem with slight angle\n    translate([0, 0, fruit_height/2])\n    rotate([5, 0, 0])\n    stem();\n    \n    // Sepals at top\n    sepals();\n    \n    // Calyx depression\n    difference() {\n        fruit_body();\n        calyx_depression();\n    }\n}\n\n// Base support for printing\ntranslate([0, 0, -10])\ncylinder(h = 3, d1 = fruit_diameter + 8, d2 = fruit_diameter + 4);",
    "renders": true
  },
  {
    "fruit": "bacupari",
    "openscad_code": "// Bacupari (Garcinia brasiliensis) - Realistic style, medium complexity\n// Overall size: ~55 mm\n\n$fn = 36;\n\n// Main parameters\nfruit_d = 38;\nfruit_h = 35;\nstem_d = 4;\nstem_h = 6;\nsegment_count = 8;\nwall = 1.2;\n\nmodule bacupari_fruit() {\n    // Main rounded body\n    difference() {\n        scale([1, 1, 0.9])\n        sphere(d = fruit_d);\n        \n        // Hollow inside for 3D printing\n        translate([0, 0, wall])\n        scale([1, 1, 0.9])\n        sphere(d = fruit_d - wall*2);\n    }\n    \n    // Segments ridges\n    for (i = [0 : segment_count-1]) {\n        rotate([0, 0, i * 360/segment_count])\n        translate([0, fruit_d/2 - 2, 0])\n        rotate([90, 0, 0])\n        cylinder(h = fruit_h * 0.9, d1 = 3, d2 = 1.5, center = true);\n    }\n    \n    // Top crown with slight bumps\n    for (i = [0 : segment_count-1]) {\n        rotate([0, 0, i * 360/segment_count + 360/segment_count/2])\n        translate([0, fruit_d/2 * 0.6, fruit_h * 0.4])\n        sphere(d = 4);\n    }\n    \n    // Bottom flattened area\n    translate([0, 0, -fruit_h * 0.4])\n    difference() {\n        cylinder(h = fruit_h * 0.2, d = fruit_d * 0.6);\n        translate([0, 0, -1])\n        cylinder(h = fruit_h * 0.3, d = fruit_d * 0.5);\n    }\n}\n\nmodule stem() {\n    // Stem\n    translate([0, 0, fruit_h * 0.4 + stem_h/2])\n    cylinder(h = stem_h, d = stem_d);\n    \n    // Stem collar\n    translate([0, 0, fruit_h * 0.4])\n    cylinder(h = 1.5, d = stem_d * 1.8);\n}\n\nmodule surface_texture() {\n    // Small surface dots\n    for (i = [0 : 50]) {\n        rotate([rand(0,360), rand(0,360), rand(0,360)])\n        translate([\n            rand(-fruit_d/2 + 5, fruit_d/2 - 5),\n            rand(-fruit_d/2 + 5, fruit_d/2 - 5),\n            rand(-fruit_h/2 + 5, fruit_h/2 - 5)\n        ])\n        sphere(d = 0.6);\n    }\n}\n\nunion() {\n    bacupari_fruit();\n    stem();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "fruit": "biribá",
    "openscad_code": "// Biribá (Rollinia deliciosa) - Realistic medium-complexity model\n// Overall dimensions: ~75 mm length\n\n$fn = 36; // Better curves for realism\n\n// Main fruit body\nmodule fruit_body() {\n    difference() {\n        // Main ellipsoid shape\n        scale([1, 1.2, 0.9])\n        sphere(d = 50);\n        \n        // Flatten top and bottom slightly\n        translate([0, 0, 22])\n        cylinder(h = 10, d1 = 35, d2 = 30, $fn = 32);\n        translate([0, 0, -22])\n        cylinder(h = 10, d1 = 35, d2 = 30, $fn = 32);\n    }\n}\n\n// Scaly surface pattern\nmodule scales() {\n    // Create a diamond pattern of raised scales\n    for (i = [-3:3]) {\n        for (j = [-4:4]) {\n            if ((i + j) % 2 == 0) {\n                translate([\n                    i * 7 + ((j % 2) * 3.5),\n                    j * 6,\n                    25 - (abs(i) + abs(j)) * 1.5\n                ]) {\n                    rotate([90, 0, 0])\n                    scale([1, 1.2, 0.3])\n                    cylinder(h = 3, d1 = 6, d2 = 8);\n                }\n            }\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 26])\n    difference() {\n        cylinder(h = 8, d1 = 12, d2 = 10);\n        cylinder(h = 10, d = 8);\n    }\n}\n\n// Main stem\nmodule stem() {\n    translate([0, 0, 34])\n    rotate([0, 0, -10])\n    cylinder(h = 15, d1 = 8, d2 = 5);\n}\n\n// Leaf scars on stem\nmodule leaf_scars() {\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([4, 0, 36 + i * 2])\n        rotate([0, 90, 0])\n        scale([1, 0.5, 1])\n        cylinder(h = 3, d = 4);\n    }\n}\n\n// Bottom navel indentation\nmodule navel() {\n    translate([0, 0, -25])\n    difference() {\n        sphere(d = 10);\n        translate([0, 0, -5])\n        sphere(d = 12);\n    }\n}\n\n// Surface texture details\nmodule surface_details() {\n    // Small indentations between scales\n    for (i = [-3:3]) {\n        for (j = [-4:4]) {\n            if ((i + j) % 2 == 1) {\n                translate([\n                    i * 7 + ((j % 2) * 3.5),\n                    j * 6,\n                    22 - (abs(i) + abs(j)) * 1.5\n                ]) {\n                    sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core fruit structure\n    fruit_body();\n    \n    // Attach stem and base\n    stem_base();\n    stem();\n    leaf_scars();\n    \n    // Surface features\n    translate([0, 0, -2])\n    scale([0.95, 0.95, 0.95])\n    union() {\n        scales();\n        surface_details();\n    }\n    \n    // Bottom features\n    navel();\n}",
    "renders": true
  },
  {
    "fruit": "camboinha",
    "openscad_code": "// Camboinha (Brazilian spinning top) - realistic style, medium complexity\n// Overall dimensions: ~65mm height, ~35mm max diameter\n\n$fn = 36;  // Smooth curves for realism\n\n// Main body parameters\nbody_height = 35;\nbody_radius = 15;\nneck_height = 8;\nneck_radius = 8;\ntip_length = 22;\ntip_radius_base = 3;\n\n// Handle parameters\nhandle_length = 25;\nhandle_radius = 4;\ngrip_rings = 3;\ngrip_depth = 0.5;\n\n// Decorative rings\nring_thickness = 1.5;\nring_height = 2;\nring_gap = 3;\n\nmodule spinning_top() {\n    union() {\n        // Tip (metal spike)\n        translate([0, 0, 0])\n            cylinder(h=tip_length, r1=tip_radius_base, r2=0.5);\n        \n        // Main body (weighted bottom)\n        translate([0, 0, tip_length])\n            cylinder(h=body_height, r=body_radius);\n        \n        // Neck transition\n        translate([0, 0, tip_length + body_height])\n            cylinder(h=neck_height, r1=body_radius, r2=neck_radius);\n        \n        // Decorative rings on body\n        for (i = [0:2]) {\n            translate([0, 0, tip_length + body_height*0.3 + i*ring_gap])\n                difference() {\n                    cylinder(h=ring_height, r=body_radius + 0.5);\n                    cylinder(h=ring_height + 0.1, r=body_radius - ring_thickness);\n                }\n        }\n        \n        // Handle\n        translate([0, 0, tip_length + body_height + neck_height])\n            cylinder(h=handle_length, r=handle_radius);\n        \n        // Grip rings on handle\n        for (i = [0:grip_rings-1]) {\n            translate([0, 0, tip_length + body_height + neck_height + handle_length*0.2 + i*handle_length*0.25])\n                difference() {\n                    cylinder(h=2, r=handle_radius + grip_depth);\n                    cylinder(h=2.1, r=handle_radius - grip_depth);\n                }\n        }\n        \n        // Top knob\n        translate([0, 0, tip_length + body_height + neck_height + handle_length])\n            sphere(r=handle_radius + 1);\n        \n        // Balance weights (hidden inside)\n        translate([0, 0, tip_length + body_height*0.7])\n            sphere(r=body_radius*0.6);\n    }\n}\n\n// Add subtle texture lines for realism\nmodule texture_lines() {\n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([body_radius - 0.5, 0, tip_length])\n                cube([1, 0.5, body_height*0.8]);\n    }\n}\n\n// Combine main body with texture\nunion() {\n    spinning_top();\n    texture_lines();\n}",
    "renders": true
  },
  {
    "fruit": "cerejeira",
    "openscad_code": "// Cerejeira (cherry tree) – realistic style, medium complexity\n// ~70 mm tall, printable (no steep overhangs, 1 mm minimum walls)\n\n$fa = 1; $fs = 0.8;\n\n// PARAMETERS\ntrunk_h = 35; trunk_r = 5;          // trunk\nbranch_len = 18; branch_r = 2.5;    // main branches\ntwig_len = 8; twig_r = 1;           // twigs\nleaf_l = 5; leaf_w = 2; leaf_t = 0.4; // cherry leaves\nfruit_r = 2;                         // cherries\n\n// TRUNK with slight taper\nmodule trunk() {\n    difference() {\n        cylinder(h = trunk_h, r1 = trunk_r, r2 = trunk_r * 0.8);\n        // subtle bark grooves\n        for(i = [0:30:330])\n            rotate([0, 0, i])\n                translate([trunk_r * 0.8, -0.5, 0])\n                    cube([1, 1, trunk_h]);\n    }\n}\n\n// BRANCHES radiating out at 45°\nmodule branches() {\n    union() {\n        for(a = [30, 150, 270]) {\n            rotate([0, 0, a])\n                translate([0, trunk_r * 0.8, trunk_h * 0.6])\n                    rotate([45, 0, 0])\n                        cylinder(h = branch_len, r = branch_r);\n        }\n    }\n}\n\n// TWIGS along branches\nmodule twigs() {\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, trunk_h * 0.7 + branch_len * 0.4])\n                rotate([55, 0, 0])\n                    cylinder(h = twig_len, r = twig_r);\n    }\n}\n\n// CHERRY LEAF (elliptical)\nmodule leaf() {\n    scale([leaf_l, leaf_w, leaf_t])\n        sphere(r = 1);\n}\n\n// FRUIT (cherry)\nmodule cherry() {\n    color(\"darkred\")\n        sphere(r = fruit_r);\n}\n\n// ASSEMBLE CROWN\nmodule crown() {\n    union() {\n        // place leaves\n        for(z = [trunk_h + 5 : 5 : trunk_h + 25])\n            for(a = [0:45:359])\n                translate([sin(a) * 20, cos(a) * 20, z])\n                    rotate([0, 0, a + 90])\n                        leaf();\n        // place cherries\n        for(z = [trunk_h + 8 : 8 : trunk_h + 20])\n            for(a = [15:60:359])\n                translate([sin(a) * 18, cos(a) * 18, z + 2])\n                    cherry();\n    }\n}\n\n// MAIN MODEL\nunion() {\n    trunk();\n    branches();\n    twigs();\n    crown();\n}",
    "renders": true
  },
  {
    "fruit": "cupu",
    "openscad_code": "// Cupu (Capybara) - Realistic style, medium complexity\n// Overall dimensions: ~80mm long x ~40mm wide x ~45mm tall\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main torso - elongated ellipsoid\n        scale([1.6, 1, 1]) \n            sphere(r = 20);\n        \n        // Undercut for legs\n        translate([0, -20, -15])\n            cube([60, 40, 20], center = true);\n    }\n}\n\n// Head module\nmodule head() {\n    translate([-30, 0, 10]) {\n        // Main head shape\n        scale([1.2, 1, 1.1])\n            sphere(r = 15);\n        \n        // Snout extension\n        translate([-15, 0, -3])\n            scale([1.5, 0.8, 0.7])\n                sphere(r = 8);\n    }\n}\n\n// Ears module\nmodule ears() {\n    // Left ear\n    translate([-35, 12, 22]) {\n        rotate([0, -20, -30])\n            scale([0.5, 1, 1.5])\n                cylinder(h = 8, r1 = 5, r2 = 3);\n    }\n    \n    // Right ear\n    translate([-35, -12, 22]) {\n        rotate([0, -20, 30])\n            scale([0.5, 1, 1.5])\n                cylinder(h = 8, r1 = 5, r2 = 3);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    translate([-38, 7, 12]) {\n        color(\"black\")\n            sphere(r = 2.5);\n    }\n    \n    // Right eye\n    translate([-38, -7, 12]) {\n        color(\"black\")\n            sphere(r = 2.5);\n    }\n}\n\n// Nose module\nmodule nose() {\n    translate([-45, 0, 6]) {\n        color(\"black\")\n            scale([1, 0.8, 0.5])\n                sphere(r = 3);\n    }\n}\n\n// Leg module - reusable for all legs\nmodule leg(position, angle) {\n    translate(position) {\n        rotate([0, angle, 0]) {\n            // Upper leg\n            translate([0, 0, -5])\n                cylinder(h = 15, r = 6);\n            \n            // Lower leg\n            translate([0, 0, -20])\n                cylinder(h = 15, r = 5);\n            \n            // Foot\n            translate([0, 0, -32])\n                scale([1.2, 1.5, 0.5])\n                    sphere(r = 5);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([30, 0, 5]) {\n        rotate([0, 20, 0])\n            scale([0.3, 0.3, 1])\n                cylinder(h = 15, r = 6, r2 = 4);\n    }\n}\n\n// Fur texture - simplified as small bumps\nmodule fur_texture() {\n    for (i = [-2:2]) {\n        for (j = [-1:1]) {\n            translate([i * 10, j * 10, 20 + sin(i * 45) * 2])\n                sphere(r = 1);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    head();\n    ears();\n    eyes();\n    nose();\n    tail();\n    \n    // Legs - positioned for stability\n    leg([20, 15, -20], 10);   // Front right\n    leg([20, -15, -20], 10);  // Front left\n    leg([-20, 15, -20], -10); // Back right\n    leg([-20, -15, -20], -10); // Back left\n    \n    // Fur texture on back\n    fur_texture();\n}",
    "renders": true
  },
  {
    "fruit": "embaúba",
    "openscad_code": "// Embaúba (Cecropia) tree - realistic medium complexity\n// 3D printable model with proper wall thickness\n\n// Parameters\ntrunk_d = 12;\ntrunk_h = 50;\nwall = 1.2;\nleaf_scale = 1.0;\n\nmodule trunk() {\n    // Main trunk cylinder\n    cylinder(h=trunk_h, d=trunk_d, $fn=20);\n    \n    // Hollow center for printing\n    translate([0,0,wall])\n        cylinder(h=trunk_h-wall*2, d=trunk_d-wall*2, $fn=20);\n    \n    // Ring nodes along trunk\n    for(i = [1:5:trunk_h-5]) {\n        translate([0,0,i])\n            cylinder(h=2, d=trunk_d+3, $fn=20);\n    }\n}\n\nmodule palmately_lobed_leaf(size=1.0) {\n    // Central lobe\n    translate([0,0,0])\n        scale([1,3,0.5]) sphere(d=size*8, $fn=20);\n    \n    // Side lobes in fan pattern\n    for(angle = [30, 60, 90, 120, 150]) {\n        rotate([0,0,angle-90])\n            translate([0,size*6,0])\n                scale([0.7,2.5,0.5]) sphere(d=size*8, $fn=20);\n    }\n    \n    // Petiole\n    translate([0,-size*10,0])\n        rotate([90,0,0])\n            cylinder(h=size*8, d=size, $fn=8);\n}\n\nmodule leaf_cluster() {\n    // Attach multiple leaves at different angles\n    for(i = [0:3]) {\n        rotate([0,0,i*90])\n            translate([trunk_d/2+5,0,trunk_h-5])\n                rotate([45,0,0])\n                    palmately_lobed_leaf(leaf_scale);\n    }\n    \n    // Additional leaves higher up\n    for(i = [0:2]) {\n        rotate([0,0,i*120])\n            translate([trunk_d/2+3,0,trunk_h-2])\n                rotate([30,0,0])\n                    scale(0.7) palmately_lobed_leaf(leaf_scale);\n    }\n}\n\nmodule fruits() {\n    // Cluster of small cylindrical fruits\n    for(i = [0:5]) {\n        rotate([0,0,i*60])\n            translate([trunk_d/2+8,0,trunk_h-12])\n                cylinder(h=3, d=2, $fn=8);\n    }\n}\n\nmodule base() {\n    // Flared base for stability\n    cylinder(h=5, d1=trunk_d+4, d2=trunk_d, $fn=20);\n}\n\n// Main assembly\nunion() {\n    base();\n    trunk();\n    leaf_cluster();\n    fruits();\n}",
    "renders": true
  },
  {
    "fruit": "gabiroba",
    "openscad_code": "// Gabiroba (Campomanesia xanthocarpa) – realistic medium-complexity model\n// Overall height ≈ 55 mm, max diameter ≈ 40 mm – 3D-print friendly\n\n// Wall thickness / support parameters\nwall = 1.2;          // 1.2 mm walls\n$fn = 48;            // Smooth curves\n\nmodule fruit_body() {\n    // Main rounded body – sphere slightly flattened top & bottom\n    difference() {\n        scale([1, 1, 0.85]) sphere(d = 38);\n        // Hollow it out\n        scale([1, 1, 0.85]) sphere(d = 38 - 2*wall);\n    }\n}\n\nmodule calyx_disk() {\n    // Persistent calyx: thin star-shaped disk at top\n    difference() {\n        cylinder(h = 1.2, d1 = 18, d2 = 16, center = false);\n        // Central hole\n        cylinder(h = 2, d = 5, center = false);\n    }\n}\n\nmodule sepals() {\n    // Five triangular sepals radiating from calyx\n    for(a = [0:72:359]) {\n        rotate([0, 0, a])\n        translate([0, 7.5, 1.2])\n        rotate([90, 0, 0])\n        linear_extrude(height = 1.2)\n        polygon(points = [[0,0], [2.5,6], [5,0]]);\n    }\n}\n\nmodule stem() {\n    // Short woody peduncle\n    translate([0, 0, 0.5])\n    cylinder(h = 8, d1 = 4.5, d2 = 3.5, center = false);\n}\n\nmodule surface_pits() {\n    // Shallow circular depressions for realism\n    for(a = [15:30:345]) {\n        for(b = [-30:30:30]) {\n            rotate([b, 0, a])\n            translate([0, 0, 19 - 0.5])\n            rotate([180, 0, 0])\n            cylinder(h1 = 1.5, h2 = 0, r1 = 2.5, r2 = 0, center = false);\n        }\n    }\n}\n\nmodule gabiroba() {\n    union() {\n        fruit_body();\n        translate([0, 0, 19*0.85])   // Position calyx on top\n        union() {\n            calyx_disk();\n            sepals();\n            stem();\n        }\n        surface_pits();\n    }\n}\n\n// Render\ngabiroba();",
    "renders": true
  },
  {
    "fruit": "guabiroba",
    "openscad_code": "// Guabiroba (Campomanesia xanthocarpa) – realistic style, medium complexity\n// Overall height ≈ 55 mm – 3D-print ready\n\n$fn = 36;               // smooth curves\nwall = 1.2;             // 1.2 mm shell thickness for FDM printing\nbase_scale = 1;         // global scaling knob\n\nmodule guabiroba() {\n    // 1. Main fruit body – slightly flattened sphere\n    translate([0,0,15])\n    scale([1.0, 0.9, 0.75])\n    sphere(d = 35, $fn = 60);\n\n    // 2. Calyx remnants – 5 short triangular sepals at top\n    for(i=[0:4])\n        rotate([0,0,i*72])\n        translate([0,7.5,27.5])\n        rotate([0,25,0])\n        scale([1.2,1,0.7])\n        cylinder(h = 4, r1 = 2.5, r2 = 0.5, $fn = 3);\n\n    // 3. Persistent style – thin cylinder\n    translate([0,0,29])\n    cylinder(h = 8, d = 2, center = false);\n\n    // 4. Small surface bumps – 18 randomly placed low domes\n    for(i=[0:17])\n        rotate([0,0,i*20 + 7])\n        translate([rand(i)*11, 0, rand(i+1)*5 + 12])\n        scale([1,0.7,0.4])\n        sphere(d = 2.5);\n\n    // 5. Bottom navel – shallow dimple\n    translate([0,0,0])\n    difference() {\n        cylinder(h = 2, d = 6, $fn = 30);\n        translate([0,0,-0.1])\n        sphere(d = 6.2);\n    }\n\n    // 6. Internal cavity (hollow core) – 3 mm wall\n    translate([0,0,5])\n    scale([0.75, 0.75, 0.7])\n    sphere(d = 35 - 2*wall);\n}\n\n// helper for pseudo-random offset [-1..1]\nfunction rand(n) = (n*13 % 17)/8.5 - 1;\n\n// Build the fruit\nguabiroba();",
    "renders": true
  },
  {
    "fruit": "guaraná",
    "openscad_code": "// Guaraná fruit - realistic style, medium complexity\n// Overall height: 70mm, width: 40mm\n\n$fn = 36; // Smooth curves\n\n// Main module\nmodule guarana() {\n    // Fruit body - 3 connected spheres forming cluster\n    union() {\n        // Central sphere\n        translate([0, 0, 15])\n            scale([1, 1.2, 1.1])\n            sphere(d = 30);\n        \n        // Left sphere\n        translate([-12, -8, 12])\n            scale([0.9, 1.1, 0.9])\n            sphere(d = 22);\n        \n        // Right sphere\n        translate([12, -6, 14])\n            scale([0.85, 1, 0.9])\n            sphere(d = 20);\n        \n        // Stem connection\n        translate([0, 0, 30])\n            cylinder(h = 8, d1 = 12, d2 = 8);\n    }\n    \n    // Surface details - realistic bumps and imperfections\n    difference() {\n        union() {\n            // Main body\n            children(0);\n            \n            // Small surface bumps\n            for(i = [0:15]) {\n                rotate([rand(i*5)*360, rand(i*7)*180, 0])\n                translate([\n                    sin(i*47)*15,\n                    cos(i*31)*12,\n                    15 + sin(i*23)*8\n                ])\n                sphere(d = 1.5 + rand(i*3)*1.5);\n            }\n        }\n        \n        // Seed indentations\n        for(i = [0:11]) {\n            angle = i * 30;\n            for(j = [0:2]) {\n                rotate([0, 0, angle + j*10])\n                translate([\n                    15 - j*3,\n                    0,\n                    15 + j*5\n                ])\n                rotate([90, 0, 0])\n                scale([1, 1.5, 0.5])\n                sphere(d = 4);\n            }\n        }\n    }\n    \n    // Stem\n    translate([0, 0, 38])\n    rotate([0, 10, 0])\n    cylinder(h = 15, d1 = 6, d2 = 4);\n    \n    // Stem details\n    difference() {\n        union() {\n            // Main stem\n            translate([0, 0, 38])\n            rotate([0, 10, 0])\n            cylinder(h = 15, d1 = 6, d2 = 4);\n            \n            // Stem ridges\n            for(i = [0:3]) {\n                rotate([0, 10, i*90])\n                translate([2.5, 0, 38])\n                cylinder(h = 15, d = 1);\n            }\n        }\n        \n        // Stem hollow for printing\n        translate([0, 0, 38])\n        rotate([0, 10, 0])\n        cylinder(h = 15, d = 2);\n    }\n}\n\n// Helper function for randomness\nfunction rand(n) = (n * 123.456) % 1;\n\n// Generate the fruit\nguarana();",
    "renders": true
  },
  {
    "fruit": "jatobá",
    "openscad_code": "// Jatobá (Hymenaea courbaril) seed pod – realistic style, medium complexity\n// Overall size ≈ 80 mm (length)\n\n$fn = 36;               // smooth curves\nwall = 1.2;             // 3D-printable wall thickness\n\nmodule seedPod() {\n    // Main pod body – flattened ellipsoid\n    intersection() {\n        scale([1, 0.55, 0.35])\n            sphere(d = 75);\n        translate([0,0,-15])\n            cube([80,50,30], center=true);\n    }\n}\n\nmodule suture() {\n    // Raised dorsal suture line along pod\n    for(i=[-35:5:35])\n        translate([i, 0, 12.5])\n            rotate([90,0,0])\n                cylinder(d1=3, d2=1.5, h=2.5, $fn=8);\n}\n\nmodule seedCavity() {\n    // Create 3 internal cavities for seeds\n    for(pos = [[-20, 0, -5], [0, 0, -5], [20, 0, -5]])\n        translate(pos)\n            scale([1, 0.7, 0.6])\n                sphere(d = 18);\n}\n\nmodule seedHoles() {\n    // Small circular openings on ventral face\n    for(pos = [[-20, 0, -12.5], [0, 0, -12.5], [20, 0, -12.5]])\n        translate(pos)\n            cylinder(d = 6, h = wall+1, $fn=16);\n}\n\nmodule pedicel() {\n    // Stem attaching pod to tree\n    translate([0, 0, 15])\n        rotate([90,0,0])\n            cylinder(d1 = 8, d2 = 5, h = 15);\n}\n\nmodule jatoba() {\n    difference() {\n        union() {\n            seedPod();\n            suture();\n            pedicel();\n        }\n        seedCavity();\n        seedHoles();\n    }\n}\n\n// Render the model\njatoba();",
    "renders": true
  },
  {
    "fruit": "juçara",
    "openscad_code": "// Juçara Palm Heart (Euterpe edulis) - Realistic Medium Complexity\n// Model height: ~75 mm, optimized for 3D printing\n\n$fn=36;\n\n// Main stem/trunk\nmodule stem() {\n    // Central pith cylinder\n    difference() {\n        cylinder(h=50, d1=12, d2=8, center=true);\n        translate([0,0,10]) cylinder(h=45, d1=10, d2=6, center=true);\n    }\n    \n    // Outer fibrous layers - stacked cones for texture\n    for(i=[0:3:45]) {\n        translate([0,0,-25+i]) \n        rotate([0,0,i*5]) \n        cylinder(h=3, d1=14-i*0.1, d2=13.5-i*0.1, center=true);\n    }\n}\n\n// Leaf sheath base\nmodule leaf_sheath() {\n    for(i=[0:60:300]) {\n        rotate([0,0,i]) {\n            translate([6,0,-5]) \n            rotate([90,0,0]) \n            cylinder(h=8, r1=3, r2=2, center=true);\n            \n            translate([6,0,-9]) \n            rotate([80,0,0]) \n            scale([1,0.8,1]) \n            sphere(d=4);\n        }\n    }\n}\n\n// Pinnate leaf structure\nmodule leaflets() {\n    for(i=[-30:10:30]) {\n        translate([0,0,i]) rotate([0,i,0]) {\n            // Rachis segment\n            translate([0,0,0]) \n            rotate([90,0,0]) \n            cylinder(h=30-i*0.2, r=0.8, center=true);\n            \n            // Leaflets pairs\n            for(j=[5:5:25]) {\n                translate([0,0,j]) rotate([0,90,0]) {\n                    // Left leaflet\n                    translate([-j*0.4,0,0]) \n                    rotate([0,-30-i*0.5,0]) \n                    scale([0.3,1,0.05]) \n                    sphere(d=j*0.6);\n                    \n                    // Right leaflet\n                    translate([j*0.4,0,0]) \n                    rotate([0,30+i*0.5,0]) \n                    scale([0.3,1,0.05]) \n                    sphere(d=j*0.6);\n                }\n            }\n        }\n    }\n}\n\n// Root primordia at base\nmodule roots() {\n    for(i=[0:45:315]) {\n        rotate([0,0,i]) {\n            translate([5,0,-25]) \n            rotate([20,0,0]) \n            cylinder(h=8, r1=1.5, r2=0.5, center=true);\n            \n            translate([5,0,-25]) \n            rotate([30,0,0]) \n            cylinder(h=6, r1=1, r2=0.3, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base stem\n    stem();\n    \n    // Sheath bases\n    translate([0,0,20]) leaf_sheath();\n    \n    // Emerging leaves\n    translate([0,0,25]) leaflets();\n    \n    // Root structures\n    roots();\n    \n    // Crownshaft detail\n    difference() {\n        translate([0,0,22]) cylinder(h=10, d1=16, d2=14, center=true);\n        translate([0,0,20]) cylinder(h=15, d1=13, d2=11, center=true);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "jussara",
    "openscad_code": "// Jussara Palm Heart / Euterpe edulis\n// Realistic medium-complexity OpenSCAD model\n// Overall height ≈ 80 mm, printable without supports\n\n$fn = 36;          // Smooth curves\nstem_h = 70;       // Main stem height\nstem_d = 12;       // Stem diameter\nfrond_n = 6;       // Number of fronds\nfrond_l = 25;      // Frond length\nfrond_w = 2;       // Frond thickness\n\nmodule stem() {\n    // Central fibrous stem with slight taper\n    cylinder(h = stem_h, d1 = stem_d, d2 = stem_d * 0.8, $fn = 20);\n}\n\nmodule leaf_segment(l, w, ang) {\n    // Single pinnate leaf segment\n    translate([0, 0, l/2])\n        rotate([0, ang, 0])\n            scale([1, 0.2, 1])\n                cube([w, w, l], center = true);\n}\n\nmodule frond() {\n    // Compound pinnate frond\n    translate([0, 0, stem_h - 5])\n        rotate([0, 0, 0])\n            for (i = [0:12]) {\n                angle = (i - 6) * 5;          // Natural drooping curve\n                y_ofs = (i - 6) * 1.8;\n                translate([0, y_ofs, 0])\n                    leaf_segment(frond_l - abs(i - 6) * 1.2,\n                                 frond_w,\n                                 angle);\n            }\n}\n\nmodule crownshaft() {\n    // Smooth green crownshaft at top of stem\n    translate([0, 0, stem_h - 10])\n        cylinder(h = 15, d = stem_d * 1.4, $fn = 20);\n}\n\nmodule roots() {\n    // Aerial prop roots emerging from base\n    for (r = [0:45:360-45]) {\n        rotate([0, 0, r])\n            translate([stem_d/2 + 2, 0, 0])\n                rotate([-30, 0, 0])\n                    cylinder(h = 8, d1 = 3, d2 = 1, $fn = 8);\n    }\n}\n\nmodule trunk_texture() {\n    // Light vertical striations\n    for (s = [0:15:360-15]) {\n        rotate([0, 0, s])\n            translate([stem_d/2 - 0.2, 0, 0])\n                cube([0.4, 0.4, stem_h]);\n    }\n}\n\n// Main assembly\nunion() {\n    difference() {\n        union() {\n            // Stem with texture\n            stem();\n            trunk_texture();\n        }\n        // Hollow core for printability\n        translate([0, 0, 2])\n            cylinder(h = stem_h, d = stem_d - 4, $fn = 20);\n    }\n    \n    crownshaft();\n    \n    // Attach fronds radially\n    for (f = [0:360/frond_n:360-360/frond_n]) {\n        rotate([0, 0, f])\n            frond();\n    }\n    \n    roots();\n}",
    "renders": true
  },
  {
    "fruit": "mangarito",
    "openscad_code": "// Mangarito (Mango Parakeet) - Realistic Medium Complexity OpenSCAD Model\n// Dimensions approximately 70mm tall\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Torso\n            scale([1, 0.8, 1.2])\n                sphere(15);\n            \n            // Belly\n            translate([0, -5, -10])\n                scale([0.9, 0.7, 0.6])\n                    sphere(12);\n        }\n        \n        // Hollow for printing\n        translate([0, 0, -5])\n            scale([0.8, 0.6, 1])\n                sphere(13);\n    }\n}\n\n// Head\nmodule head() {\n    difference() {\n        union() {\n            // Main head shape\n            translate([0, 0, 20])\n                scale([0.9, 0.85, 1])\n                    sphere(12);\n            \n            // Beak\n            translate([0, -15, 18])\n                rotate([0, -20, 0])\n                    scale([1, 2.5, 0.8])\n                        cylinder(8, 3, 0);\n            \n            // Cheek patches\n            translate([-8, -8, 15])\n                sphere(4);\n            translate([8, -8, 15])\n                sphere(4);\n        }\n        \n        // Eye sockets\n        translate([-4, -6, 22])\n            sphere(2.5);\n        translate([4, -6, 22])\n            sphere(2.5);\n    }\n}\n\n// Wings\nmodule wing() {\n    difference() {\n        union() {\n            // Primary wing\n            translate([0, 0, 0])\n                rotate([0, 0, -20])\n                    scale([1, 2.5, 0.3])\n                        cylinder(10, 6, 2);\n            \n            // Secondary feathers\n            for(i = [0:2]) {\n                translate([0, -5 - i*3, -2 - i])\n                    rotate([0, 0, -30 - i*5])\n                        scale([0.8, 1.5, 0.2])\n                            cylinder(8 - i, 4 - i*0.5, 1);\n            }\n        }\n        \n        // Feather texture cuts\n        for(i = [1:3]) {\n            translate([0, -i*4, 0])\n                rotate([0, 0, -25])\n                    scale([0.9, 1, 0.4])\n                        cube([12, 1, 2], center=true);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    union() {\n        for(i = [0:3]) {\n            rotate([0, 0, i*5 - 7.5])\n                translate([0, -25 - i*2, -8 + i])\n                    scale([0.8 - i*0.1, 2, 0.1])\n                        cube([8, 12, 2], center=true);\n        }\n    }\n}\n\n// Legs and feet\nmodule leg() {\n    union() {\n        // Leg\n        translate([0, 0, 0])\n            cylinder(8, 2, 1.5);\n        \n        // Foot\n        translate([0, -2, -8.5])\n            rotate([0, 90, 0])\n                scale([1, 0.8, 0.5])\n                    cylinder(4, 2, 1);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i*1.5, -4, -8.5])\n                rotate([90, 0, i*20])\n                    scale([0.3, 0.3, 1])\n                        cylinder(3, 1, 0.5);\n        }\n    }\n}\n\n// Eye detail\nmodule eye() {\n    difference() {\n        sphere(2.5);\n        translate([0, 0, 2])\n            sphere(1.5);\n    }\n}\n\n// Assemble the complete model\nunion() {\n    // Main body\n    body();\n    \n    // Head\n    head();\n    \n    // Eyes\n    color(\"black\") {\n        translate([-4, -6, 22])\n            eye();\n        translate([4, -6, 22])\n            eye();\n    }\n    \n    // Wings\n    translate([12, 0, 5])\n        rotate([0, 0, 30])\n            wing();\n    \n    translate([-12, 0, 5])\n        rotate([0, 0, -30])\n            mirror([1, 0, 0])\n                wing();\n    \n    // Tail\n    translate([0, -15, -10])\n        rotate([20, 0, 0])\n            tail();\n    \n    // Legs\n    translate([5, 0, -18])\n        leg();\n    translate([-5, 0, -18])\n        leg();\n}",
    "renders": true
  },
  {
    "fruit": "maracujá",
    "openscad_code": "// Maracujá (Passion Fruit) – medium complexity, 3D-printable\n// Outer dimensions ≈ 55 mm Ø × 60 mm height\n\n// Wall thickness for FDM printing\nwall = 1.2;\n\n// Main body\nmodule fruit_body() {\n    difference() {\n        sphere(d = 55, $fn = 64);               // whole fruit\n        sphere(d = 55 - 2*wall, $fn = 64);      // hollow core\n    }\n}\n\n// Raised equatorial “belt”\nmodule belt() {\n    color(\"darkgreen\") rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 3, d1 = 56, d2 = 56, $fn = 64);\n        cylinder(h = 3.2, d1 = 54, d2 = 54, $fn = 64);\n    }\n}\n\n// Radial ribs\nmodule ribs() {\n    for (i = [0 : 15 : 359]) {\n        rotate([0, i, 0])\n        translate([0, 0, 27.5 - 1.5])\n        color(\"darkgreen\")\n        difference() {\n            cube([wall, 2, 3], center = true);\n            sphere(d = 55 - 0.5, $fn = 64);     // trim to surface\n        }\n    }\n}\n\n// Apical tip / remnant of flower\nmodule tip() {\n    color(\"darkgreen\")\n    translate([0, 0, 27.5])\n    cylinder(h = 4, d1 = 3, d2 = 0, $fn = 16);\n}\n\n// Peduncle stub\nmodule stalk() {\n    color(\"darkgreen\")\n    rotate([180, 0, 0])\n    translate([0, 0, 27.5])\n    cylinder(h = 6, d1 = 6, d2 = 4, $fn = 16);\n}\n\n// Interior seed cavity plug (easy removal)\nmodule plug() {\n    difference() {\n        sphere(d = 54, $fn = 64);\n        sphere(d = 54 - 2*wall, $fn = 64);\n    }\n}\n\n// Assembly\nfruit_body();\nbelt();\nribs();\ntip();\nstalk();\ntranslate([0, 0, -28]) plug();",
    "renders": true
  },
  {
    "fruit": "sapucaia",
    "openscad_code": "// Sapucaia (Lecythis pisonis) medium-complexity realistic model\n// Overall bounding box ≈ 80 mm tall × 60 mm diameter\n\n$fn = 40;            // moderate smoothness for printing\nwall = 1.2;          // printable wall thickness\nscale = 1;\n\nmodule half_ellipsoid(rx, ry, rz) {\n    // helper: upper half of an ellipsoid\n    scale([rx, ry, rz]) sphere(1);\n}\n\nmodule stem() {\n    // woody peduncle with slight curve\n    translate([0, 0, 40]) rotate([5, 0, 0])\n        cylinder(h = 15, r1 = 4, r2 = 2.5, $fn = 8);\n}\n\nmodule fruit_body() {\n    difference() {\n        union() {\n            // main rounded base\n            scale([30, 30, 35]) half_ellipsoid(1, 1, 1);\n\n            // collar rim around operculum\n            translate([0, 0, 35])\n                cylinder(h = 4, r1 = 24, r2 = 26, $fn = 40);\n        }\n\n        // hollow cavity\n        difference() {\n            scale([27, 27, 33]) half_ellipsoid(1, 1, 1);\n            translate([0, 0, 35]) cube([100, 100, 5], center = true);\n        }\n\n        // operculum opening (10 mm diameter)\n        translate([0, 0, 39]) cylinder(h = 5, r = 5, $fn = 30);\n\n        // external vertical grooves – decorative & printable\n        for (a = [0 : 30 : 330]) {\n            rotate([0, 0, a])\n                translate([29, 0, 0]) cube([2, 2, 35]);\n        }\n    }\n}\n\nmodule seeds() {\n    // 6 seeds inside cavity, realistic size\n    color(\"saddlebrown\")\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 25 - i * 3])\n                scale([3.5, 2.5, 6])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1, r1 = 1, r2 = 0.5, $fn = 12);\n    }\n}\n\n// Assemble the model\nunion() {\n    fruit_body();\n    stem();\n    // seeds are optional for printing; uncomment to include\n    // seeds();\n}",
    "renders": true
  },
  {
    "fruit": "tamarindo",
    "openscad_code": "// Tamarindo (Tamarind) pod with medium realism\n// Designed for 3D printing, no overhangs, proper wall thickness\n// Dimensions: ~80mm length, ~25mm width, ~15mm height\n\n$fn = 36; // Smooth curves\n\n// Main pod shell\nmodule pod_shell() {\n    difference() {\n        // Outer shell - main body\n        hull() {\n            translate([-35, 0, 0]) scale([1, 0.8, 0.6]) sphere(d = 20);\n            translate([35, 0, 0]) scale([0.7, 0.6, 0.5]) sphere(d = 20);\n        }\n        \n        // Hollow out the inside\n        scale([0.9, 0.85, 0.8]) hull() {\n            translate([-35, 0, 0]) scale([1, 0.8, 0.6]) sphere(d = 20);\n            translate([35, 0, 0]) scale([0.7, 0.6, 0.5]) sphere(d = 20);\n        }\n        \n        // Split line for pod opening\n        translate([0, 0, -10]) cube([80, 1, 20], center = true);\n    }\n}\n\n// Pod seam ridges\nmodule seam_ridges() {\n    for (i = [-30:10:30]) {\n        translate([i, 0, 8]) rotate([90, 0, 0]) \n            cylinder(h = 2, d1 = 3, d2 = 2, center = true);\n    }\n}\n\n// Individual tamarind seed compartments\nmodule seed_compartments() {\n    for (i = [-25:8:25]) {\n        translate([i, 0, 4]) {\n            difference() {\n                // Seed compartment bulge\n                scale([1.2, 0.8, 0.4]) sphere(d = 8);\n                \n                // Indent for seed\n                translate([0, 0, -1]) \n                    scale([0.8, 0.6, 0.3]) sphere(d = 6);\n            }\n        }\n    }\n}\n\n// Stem connection point\nmodule stem() {\n    translate([-38, 0, 0]) rotate([0, -20, 0]) \n        cylinder(h = 8, d1 = 6, d2 = 4);\n}\n\n// Pod texture lines\nmodule texture_lines() {\n    for (angle = [0:30:150]) {\n        rotate([0, 0, angle]) {\n            translate([0, -12, 7]) \n                scale([1, 0.1, 0.1]) cube([80, 1, 1], center = true);\n        }\n    }\n}\n\n// Curved pod edges\nmodule pod_edges() {\n    // Top edge curve\n    translate([0, 0, 8]) \n        scale([40, 12, 1]) sphere(d = 2);\n    \n    // Bottom edge curve\n    translate([0, 0, -7]) \n        scale([40, 12, 1]) sphere(d = 2);\n}\n\n// Assembly\nunion() {\n    // Main pod body\n    pod_shell();\n    \n    // Surface details\n    seam_ridges();\n    seed_compartments();\n    pod_edges();\n    \n    // Stem\n    stem();\n    \n    // Subtle texture\n    %texture_lines();\n}",
    "renders": true
  },
  {
    "fruit": "umbu",
    "openscad_code": "// OpenSCAD code for a realistic umbu (Spondias tuberosa) fruit\n// Medium complexity – anatomical shape with 3D-printable walls\n\n// Overall scale factor\nfull_scale = 80;        // mm – longest axis of the fruit\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main fruit body – slightly flattened ellipsoid\nmodule fruit_body() {\n    difference() {\n        scale([1, 0.85, 1.1])\n            sphere(d = full_scale, $fn = 100);\n        // Hollow it out\n        scale([1, 0.85, 1.1])\n            sphere(d = full_scale - 2*wall, $fn = 100);\n    }\n}\n\n// Five longitudinal ridges (realistic feature)\nmodule ridges() {\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, -full_scale/2])\n        difference() {\n            // Ridge as a thin raised strip\n            scale([0.08, 1, 1])\n                cube([full_scale, 0.15*full_scale, full_scale], center = true);\n            // Hollow inside ridge\n            scale([0.08, 1, 1])\n                cube([full_scale - 2*wall, 0.15*full_scale - 2*wall, full_scale - 2*wall], center = true);\n        }\n    }\n}\n\n// Stem stub (peduncle) at top\nmodule stem_stub() {\n    difference() {\n        translate([0, 0, full_scale*0.55])\n            cylinder(h = full_scale*0.08, d1 = full_scale*0.18, d2 = full_scale*0.12, $fn = 32);\n        // Hollow\n        translate([0, 0, wall])\n            cylinder(h = full_scale*0.08 - wall, d1 = full_scale*0.18 - 2*wall, d2 = full_scale*0.12 - 2*wall, $fn = 32);\n    }\n}\n\n// Small apical tip (persistent style)\nmodule apical_tip() {\n    difference() {\n        translate([0, 0, full_scale*0.58])\n            sphere(d = full_scale*0.06, $fn = 20);\n        // Hollow\n        translate([0, 0, wall])\n            sphere(d = full_scale*0.06 - 2*wall, $fn = 20);\n    }\n}\n\n// Surface pores (lenticels) – drilled shallow cylinders\nmodule lenticels() {\n    // Distribute along a spiral for realism\n    n = 30;\n    for(i = [0:n-1]) {\n        theta = i*137.5;            // golden angle\n        phi   = 30 + i*5;           // elevation\n        r     = full_scale/2 * sin(phi);\n        translate([r*cos(theta), r*sin(theta), full_scale/2*cos(phi)])\n            rotate([90 - phi, 0, theta])\n                cylinder(h = wall + 0.5, d = 1.4, $fn = 8);\n    }\n}\n\n// Assemble the umbu\nunion() {\n    fruit_body();\n    ridges();\n    stem_stub();\n    apical_tip();\n    difference() {\n        fruit_body();\n        lenticels();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "xixá",
    "openscad_code": "// Realistic 3D-Printable Xixá (Brazilian Rattlesnake Head)\n// Overall length ~80 mm, wall thickness 2 mm\n\nmodule head_shell() {\n    difference() {\n        // Main head volume\n        scale([1, 0.7, 0.8])\n        sphere(d = 40, $fn = 60);\n        \n        // Hollow inside\n        scale([0.85, 0.6, 0.65])\n        sphere(d = 40, $fn = 60);\n        \n        // Flat base for printing\n        translate([0, 0, -25])\n        cube([100, 100, 50], center = true);\n    }\n}\n\nmodule eye_socket() {\n    rotate([0, 20, 0])\n    sphere(d = 8, $fn = 20);\n}\n\nmodule eye_pupil() {\n    rotate([0, 20, 0])\n    cylinder(h = 5, d1 = 5, d2 = 0, $fn = 12);\n}\n\nmodule nostril() {\n    rotate([0, -30, 0])\n    cylinder(h = 5, d1 = 3, d2 = 5, $fn = 8);\n}\n\nmodule scale_row(y_offset, z_offset) {\n    for (i = [0:7]) {\n        translate([0, y_offset + i * 3.5, z_offset + sin(i * 25) * 1.5])\n        rotate([0, 0, i * 5])\n        scale([1.2, 1, 0.4])\n        sphere(d = 4, $fn = 6);\n    }\n}\n\nmodule heat_pit() {\n    rotate([0, -15, 0])\n    cylinder(h = 3, d1 = 2.5, d2 = 0.5, $fn = 8);\n}\n\nmodule fang() {\n    rotate([0, -20, 0])\n    cylinder(h = 15, d1 = 2.5, d2 = 0, $fn = 8);\n}\n\nmodule rattle_segment(index) {\n    scale([0.9 - index * 0.05, 0.9 - index * 0.05, 1])\n    difference() {\n        cylinder(h = 5, d = 10 - index * 0.8, $fn = 20);\n        translate([0, 0, 1])\n        cylinder(h = 5, d = 5 - index * 0.5, $fn = 20);\n    }\n}\n\n// Build the model\nunion() {\n    // Head\n    head_shell();\n    \n    // Eyes\n    translate([12, 12, 5]) eye_socket();\n    translate([12, -12, 5]) eye_socket();\n    \n    // Pupils\n    translate([16.5, 12, 8]) color(\"black\") eye_pupil();\n    translate([16.5, -12, 8]) color(\"black\") eye_pupil();\n    \n    // Nostrils\n    translate([19, 5, -2]) nostril();\n    translate([19, -5, -2]) nostril();\n    \n    // Heat pits\n    translate([19, 7, 0]) heat_pit();\n    translate([19, -7, 0]) heat_pit();\n    \n    // Scales around eyes\n    scale_row(8, 8);\n    scale_row(-8, 8);\n    \n    // Fangs\n    translate([15, 3, -10]) fang();\n    translate([15, -3, -10]) fang();\n    \n    // Rattle segments\n    for (i = [0:4]) {\n        translate([0, 0, -25 - i * 4])\n        rattle_segment(i);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "yerba",
    "openscad_code": "// Yerba Mate Gourd (Medium Complexity Realistic Style)\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n// Main parameters\ngourd_height = 75;\ngourd_width = 60;\ntop_diameter = 45;\nwall_thickness = 2;\n\n// Base shape - elliptical gourd\nmodule gourd_body() {\n    difference() {\n        // Outer shell - scaled sphere\n        scale([1, 0.8, 1.2])\n        sphere(d = gourd_width, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n        scale([1, 0.75, 1.1])\n        sphere(d = gourd_width - wall_thickness*2, $fn = 64);\n        \n        // Flatten bottom\n        translate([0, 0, -gourd_height/2])\n        cube([gourd_width*2, gourd_width*2, gourd_height], center = true);\n    }\n}\n\n// Neck transition\nmodule neck_transition() {\n    difference() {\n        // Tapered neck\n        cylinder(h = 15, d1 = gourd_width*0.7, d2 = top_diameter, $fn = 32);\n        \n        // Hollow neck\n        translate([0, 0, -1])\n        cylinder(h = 17, d1 = gourd_width*0.7 - wall_thickness*2, d2 = top_diameter - wall_thickness*2, $fn = 32);\n    }\n}\n\n// Rim edge\nmodule rim() {\n    difference() {\n        // Outer rim\n        cylinder(h = 5, d = top_diameter + 4, $fn = 32);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n        cylinder(h = 7, d = top_diameter + 2, $fn = 32);\n    }\n}\n\n// Decorative metal ring\nmodule metal_ring() {\n    color(\"silver\")\n    difference() {\n        // Main band\n        cylinder(h = 8, d = gourd_width*0.75 + 4, $fn = 32);\n        \n        // Inner hole\n        cylinder(h = 10, d = gourd_width*0.75, $fn = 32);\n    }\n}\n\n// Surface texture - vertical grooves\nmodule surface_texture() {\n    for(i = [0:15]) {\n        rotate([0, 0, i*24])\n        translate([gourd_width/2 - 2, -2, -gourd_height/2])\n        scale([1, 0.2, 1.5])\n        cube([4, 4, gourd_height]);\n    }\n}\n\n// Small base foot\nmodule base_foot() {\n    difference() {\n        // Outer foot\n        cylinder(h = 3, d = gourd_width*0.4, $fn = 32);\n        \n        // Inner relief\n        cylinder(h = 4, d = gourd_width*0.4 - wall_thickness*2, $fn = 32);\n    }\n}\n\n// Assembly\ntranslate([0, 0, gourd_height/2])\ngourd_body();\n\ntranslate([0, 0, gourd_height - 7])\nneck_transition();\n\ntranslate([0, 0, gourd_height + 8])\nrim();\n\ntranslate([0, 0, gourd_height*0.3])\nmetal_ring();\n\ntranslate([0, 0, 0])\nbase_foot();\n\n// Optional texture overlay\n// translate([0, 0, gourd_height/2])\n// surface_texture();",
    "renders": true
  },
  {
    "fruit": "zapote",
    "openscad_code": "// Zapote (Mamey Sapote) – realistic, medium complexity\n// Approx. 70 mm tall, printable without supports\n\n$fn = 36;\n\n// Overall scale\nscale(1.8)  // 40 mm base → 72 mm height\n\n/* Main fruit body */\ndifference() {\n    // Ellipsoid core\n    scale([1, 1, 1.2])\n        sphere(d = 40);\n\n    // Stem cavity\n    translate([0, 0, 23])\n        cylinder(h = 8, d1 = 6, d2 = 10, $fn = 24);\n\n    // Four shallow longitudinal grooves\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([-21, -1.5, 0])\n                cube([42, 3, 46]);\n}\n\n/* Stem */\ntranslate([0, 0, 24])\n    cylinder(h = 12, d1 = 4, d2 = 5);\n\n/* Persistent calyx lobes: 5 small wedges around stem */\nmodule calyxLobe() {\n    difference() {\n        translate([-1.5, 0, 0])\n            cube([3, 2, 4]);\n        translate([0, 1, 2])\n            sphere(d = 3.5);\n    }\n}\n\nfor (i = [0:72:288])\n    rotate([0, 0, i])\n        translate([3, 0, 24])\n            calyxLobe();\n\n/* Skin texture – low bumps in staggered grid */\nmodule bump() sphere(d = 1.8);\n\nskinOffset = 20;\nskinHeight = 0.9;\n\nfor (row = [-2:1:2])\n    for (col = [-6:2:6]) {\n        translate([col + (row % 2), row * 3.5, skinOffset])\n            scale([1, 1, skinHeight])\n                bump();\n    }",
    "renders": true
  }
]