[
  {
    "fruit": "apple",
    "openscad_code": "// Realistic Apple - Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n// Overall dimensions\napple_radius = 25;\nstem_length = 12;\nstem_radius = 2;\n\n// Apple body with indentations\nmodule apple_body() {\n    // Main apple shape - slightly flattened sphere\n    scale([1, 1, 0.9])\n    sphere(r = apple_radius, $fn = 64);\n    \n    // Top indentation for stem\n    translate([0, 0, apple_radius * 0.9])\n    rotate_extrude(angle = 360, $fn = 32)\n    translate([0, 0])\n    polygon(points = [[0, 0], [apple_radius * 0.2, -apple_radius * 0.3], [0, -apple_radius * 0.3]]);\n    \n    // Bottom indentation\n    translate([0, 0, -apple_radius * 0.9])\n    rotate_extrude(angle = 360, $fn = 32)\n    translate([0, 0])\n    polygon(points = [[0, 0], [apple_radius * 0.15, apple_radius * 0.2], [0, apple_radius * 0.2]]);\n}\n\n// Apple stem with slight curve\nmodule apple_stem() {\n    // Main stem body\n    translate([0, 0, apple_radius * 0.9 + stem_length * 0.5])\n    rotate([0, 5, 0])\n    cylinder(h = stem_length, r = stem_radius, $fn = 16);\n    \n    // Stem base flare\n    translate([0, 0, apple_radius * 0.9])\n    cylinder(h = 2, r1 = stem_radius * 1.5, r2 = stem_radius, $fn = 16);\n}\n\n// Apple leaf\nmodule apple_leaf() {\n    translate([stem_radius * 1.5, 0, apple_radius * 0.9 + stem_length * 0.8])\n    rotate([0, 30, 45])\n    scale([1, 0.6, 0.1])\n    sphere(r = 8, $fn = 32);\n    \n    // Leaf stem\n    translate([stem_radius * 1.5, 0, apple_radius * 0.9 + stem_length * 0.8])\n    rotate([0, 30, 45])\n    translate([8, 0, 0])\n    cylinder(h = 4, r = 0.5, $fn = 8);\n}\n\n// Apple calyx (bottom star pattern)\nmodule apple_calyx() {\n    difference() {\n        // Base shape\n        translate([0, 0, -apple_radius * 0.85])\n        cylinder(h = 2, r = apple_radius * 0.15, $fn = 32);\n        \n        // Star pattern cuts\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([apple_radius * 0.08, 0, -apple_radius * 0.87])\n            cube([apple_radius * 0.12, 2, 4], center = true);\n        }\n    }\n}\n\n// Apple surface details - subtle bumps\nmodule apple_surface() {\n    // No actual surface details for 3D printing simplicity\n    // Could add bump texture here if needed\n}\n\n// Main apple assembly\nunion() {\n    // Main apple body\n    apple_body();\n    \n    // Stem assembly\n    union() {\n        apple_stem();\n        apple_leaf();\n    }\n    \n    // Calyx at bottom\n    apple_calyx();\n    \n    // Optional: Small imperfections for realism\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([apple_radius * 0.7, 0, apple_radius * 0.2])\n        sphere(r = 1.5, $fn = 8);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "pear",
    "openscad_code": "// Realistic Pear - Medium Complexity\n// 3D printable, ~70mm height\n\npear_size = 70;\nstem_length = 8;\nstem_diameter = 3;\n\nmodule pear_body() {\n    // Main pear body - combination of spheres with tapering\n    union() {\n        // Upper bulb (shoulders)\n        translate([0, 0, 25])\n            scale([1, 1, 0.8])\n            sphere(d=35, $fn=60);\n        \n        // Lower bulb (bulbous bottom)\n        translate([0, 0, 8])\n            scale([1.2, 1.2, 1.1])\n            sphere(d=40, $fn=60);\n        \n        // Tapering bottom\n        translate([0, 0, -5])\n            scale([0.7, 0.7, 0.6])\n            sphere(d=30, $fn=60);\n    }\n}\n\nmodule stem() {\n    // Main stem cylinder\n    translate([0, 0, 38])\n        cylinder(h=stem_length, d=stem_diameter, $fn=20);\n    \n    // Stem flare at base\n    translate([0, 0, 38])\n        cylinder(h=2, d1=stem_diameter*1.5, d2=stem_diameter, $fn=20);\n}\n\nmodule leaf() {\n    // Single leaf shape using scaled sphere and cube\n    translate([0, 12, 42])\n        rotate([0, -20, 30])\n        union() {\n            // Leaf body\n            scale([2, 0.8, 0.1])\n                sphere(d=8, $fn=30);\n            \n            // Leaf tip extension\n            translate([8, 0, 0])\n                scale([0.5, 0.5, 0.1])\n                sphere(d=6, $fn=20);\n        }\n}\n\nmodule pear_detail() {\n    // Vertical indent lines for texture\n    for(i=[0:15:360]) {\n        rotate([0, 0, i])\n            translate([17, 0, 0])\n                scale([0.1, 1, 1])\n                cube([1, 0.5, 60], center=true);\n    }\n    \n    // Small indent at bottom\n    translate([0, 0, -5])\n        rotate_extrude($fn=30)\n            translate([8, 0, 0])\n                circle(d=3, $fn=20);\n}\n\n// Main pear assembly\nunion() {\n    pear_body();\n    stem();\n    leaf();\n    pear_detail();\n}\n\n// Flatten bottom for printing\ntranslate([0, 0, -7])\n    cube([40, 40, 2], center=true);",
    "renders": true
  },
  {
    "fruit": "peach",
    "openscad_code": "// Peach 3D Model - Realistic Style, Medium Complexity\n// Size: ~70mm tall\n\nmodule peach_body() {\n    // Main peach body - slightly flattened sphere for realistic shape\n    translate([0, 0, 5]) \n        scale([1.1, 1, 0.9]) \n        sphere(d=55, $fn=64);\n    \n    // Bottom indentation\n    translate([0, 0, -25])\n        rotate([0, 0, 0])\n        cylinder(h=10, d1=15, d2=8, $fn=32);\n}\n\nmodule peach_crease() {\n    // Vertical crease line\n    difference() {\n        peach_body();\n        translate([0, -27, 5])\n            rotate([0, 90, 0])\n            cylinder(h=60, d=3, $fn=32);\n    }\n}\n\nmodule stem() {\n    // Stem base\n    translate([0, 0, 30])\n        rotate([20, 0, 0])\n        cylinder(h=8, d=8, $fn=16);\n    \n    // Stem extension\n    translate([0, 0, 35])\n        rotate([30, 0, 0])\n        cylinder(h=12, d=5, $fn=16);\n    \n    // Small leaf\n    translate([5, 5, 40])\n        rotate([45, 30, 45])\n        scale([1, 0.3, 1])\n        sphere(d=8, $fn=16);\n}\n\nmodule dimples() {\n    // Create realistic peach dimples using small spheres\n    for(a = [0:30:150]) {\n        for(b = [30:30:150]) {\n            rotate([a, b, 0])\n            translate([0, 0, 25])\n                difference() {\n                    sphere(d=55, $fn=64);\n                    translate([sin(a)*cos(b)*25, sin(a)*sin(b)*25, cos(a)*25])\n                        sphere(d=8, $fn=16);\n                }\n        }\n    }\n}\n\nmodule realistic_peach() {\n    // Combine all parts\n    union() {\n        // Main body with crease\n        peach_crease();\n        \n        // Add stem\n        stem();\n        \n        // Add subtle dimples for texture\n        difference() {\n            sphere(d=55, $fn=64);\n            dimples();\n        }\n    }\n}\n\n// Render the complete peach\nscale([1, 1, 1])\nrealistic_peach();",
    "renders": true
  },
  {
    "fruit": "plum",
    "openscad_code": "// Realistic Plum - Medium Complexity\n// Designed for 3D printing at ~60mm height\n\n// Main plum body\nmodule plum_body() {\n    // Base ellipsoid shape\n    difference() {\n        union() {\n            // Main body - slightly flattened sphere\n            scale([1, 1.2, 0.9])\n            sphere(d=40, $fn=64);\n            \n            // Bottom bulge for realistic plum shape\n            translate([0, 0, -18])\n            scale([0.8, 1, 0.6])\n            sphere(d=25, $fn=32);\n            \n            // Top depression\n            translate([0, 0, 18])\n            scale([0.7, 0.7, 0.3])\n            sphere(d=15, $fn=32);\n        }\n        \n        // Stem cavity\n        translate([0, 0, 20])\n        cylinder(h=8, d1=4, d2=2, $fn=16);\n        \n        // Natural seam groove\n        rotate([0, 90, 0])\n        translate([0, 0, -20])\n        scale([0.05, 1, 1])\n        cube([40, 40, 40], center=true);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20])\n    rotate([0, 0, rand(5, 15)])\n    cylinder(h=12, d1=2.5, d2=1.5, $fn=8);\n}\n\n// Leaf\nmodule leaf() {\n    translate([0, 8, 20])\n    rotate([0, -20, 0])\n    scale([1, 0.6, 0.1])\n    sphere(d=12, $fn=32);\n    \n    // Leaf vein\n    translate([0, 8, 20.5])\n    rotate([0, -20, 0])\n    scale([0.05, 0.4, 0.01])\n    cube([10, 10, 1], center=true);\n}\n\n// Surface bumps for realistic texture\nmodule surface_texture() {\n    for(i = [0:15]) {\n        rotate([rand(0, 360), rand(0, 360), rand(0, 360)])\n        translate([\n            rand(-18, 18),\n            rand(-18, 18),\n            rand(-15, 15)\n        ]) {\n            scale([1, 1, 0.7])\n            sphere(d=rand(2, 4), $fn=8);\n        }\n    }\n}\n\n// Bloom (natural powdery coating)\nmodule bloom() {\n    difference() {\n        scale([1.02, 1.02, 1.02])\n        plum_body();\n        plum_body();\n    }\n}\n\n// Bloom surface texture\nmodule bloom_texture() {\n    %surface_texture();\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assembly\nunion() {\n    // Main plum with hollow interior for printing\n    difference() {\n        plum_body();\n        scale([0.9, 0.9, 0.9])\n        translate([0, 0, -2])\n        plum_body();\n    }\n    \n    // Surface details\n    union() {\n        stem();\n        leaf();\n        surface_texture();\n    }\n    \n    // Light bloom coating\n    bloom();\n}",
    "renders": true
  },
  {
    "fruit": "cherry",
    "openscad_code": "// Cherry with stem - 3D printable medium complexity realistic style\n// Overall size ~55 mm tall\n\n$fn = 64;  // Smooth surfaces\n\n// Main cherry body\nmodule cherry_body() {\n    // Core sphere\n    sphere(20);\n    \n    // Slight bulge at bottom for realistic shape\n    translate([0,0,-3])\n        scale([1.1,1.1,0.7])\n            sphere(20);\n    \n    // Small indent at top for stem\n    translate([0,0,19])\n        rotate_extrude()\n            translate([8,0,0])\n                circle(r=3);\n}\n\n// Stem structure\nmodule stem() {\n    // Main stem\n    translate([0,0,20])\n        rotate([0,15,0])\n            cylinder(h=35, r1=2.5, r2=1.5);\n    \n    // Stem tip\n    translate([0,0,54.5])\n        rotate([0,15,0])\n            sphere(1.5);\n    \n    // Small leaf\n    translate([5,0,45])\n        rotate([0,15,-30])\n            scale([1,0.6,0.1])\n                sphere(8);\n}\n\n// Surface details - small bumps and dimples\nmodule cherry_surface() {\n    for (i = [0:30]) {\n        rotate([0, i*12, i*7.5])\n            translate([20,0,0])\n                sphere(0.5);\n    }\n    \n    // Tiny indent at bottom\n    translate([0,0,-20])\n        sphere(1);\n}\n\n// Create full cherry\nunion() {\n    // Main body with surface details\n    difference() {\n        union() {\n            cherry_body();\n            cherry_surface();\n        }\n        \n        // Remove indent for stem connection\n        translate([0,0,19])\n            cylinder(h=5, r=2.5);\n    }\n    \n    // Add stem\n    stem();\n}\n\n// Optional: Flatten bottom slightly for printing stability\ntranslate([0,0,-21])\n    cube([40,40,1], center=true);",
    "renders": true
  },
  {
    "fruit": "apricot",
    "openscad_code": "// Realistic apricot, medium complexity\n// Designed for 3D printing, no overhangs, 50 mm tall\n\n$fn = 32;\n\n// Main apricot body\nmodule apricot_body() {\n    difference() {\n        // Main sphere slightly squashed\n        scale([1.05, 1, 0.9])\n        sphere(d=45);\n        \n        // Stem cavity\n        translate([0, 0, 20])\n        rotate([0, 0, 0])\n        cylinder(h=8, d1=6, d2=3, $fn=16);\n        \n        // Bottom indent\n        translate([0, 0, -20.5])\n        sphere(d=8);\n    }\n}\n\n// Surface indentations for realism\nmodule surface_detail() {\n    for (i = [0:15]) {\n        rotate([0, 0, i*24])\n        translate([18, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        sphere(d=3);\n    }\n    \n    for (j = [0:11]) {\n        rotate([0, 0, j*30 + 15])\n        translate([12, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        sphere(d=2.5);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20.5])\n    rotate([0, 0, 5])\n    cylinder(h=12, d1=2.5, d2=1.5, $fn=8);\n}\n\n// Leaf\nmodule leaf() {\n    translate([0, 8, 21])\n    rotate([0, 110, -10])\n    scale([0.4, 1, 0.1])\n    difference() {\n        sphere(d=15);\n        translate([0, -8, 0])\n        scale([1, 1, 10])\n        cube([20, 8, 2], center=true);\n    }\n}\n\n// Crease line\nmodule crease() {\n    translate([0, -22.5, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.8, 0.05])\n    cylinder(h=45, d=45);\n}\n\n// Assembly\nunion() {\n    difference() {\n        apricot_body();\n        surface_detail();\n    }\n    stem();\n    leaf();\n    crease();\n}",
    "renders": true
  },
  {
    "fruit": "nectarine",
    "openscad_code": "// Realistic Nectarine – OpenSCAD\n// Approx. 65 mm tall, 3 mm wall thickness, overhang-safe\n\n$fn = 48;              // Smooth curves\nwall = 3;              // 3D-printable wall thickness\n\nmodule nectarine() {\n    // Main fruit body – slightly flattened sphere\n    translate([0, 0, 0])\n        scale([1, 1, 0.9])\n        sphere(d = 60);\n\n    // Crease line along the natural seam\n    difference() {\n        translate([0, 0, 0])\n            scale([1, 1, 0.9])\n            sphere(d = 60);\n        translate([0, -30, 0])\n            rotate([0, 0, 90])\n            cube([60, 0.5, 30], center = true);\n    }\n\n    // Stylized stem cavity – shallow cone\n    difference() {\n        translate([0, 0, 0])\n            scale([1, 1, 0.9])\n            sphere(d = 60);\n        translate([0, 0, 27])\n            cylinder(h = 10, d1 = 8, d2 = 12, $fn = 32);\n    }\n\n    // Stem stub – short cylinder\n    translate([0, 0, 30])\n        cylinder(h = 8, d = 6, center = true);\n\n    // Surface bumps / pores – small spheres half-embedded\n    for (i = [0 : 5 : 360]) {\n        a = i;\n        b = (i * 137.5) % 360;   // Fibonacci spread\n        r = 29;\n        x = sin(a) * cos(b) * r;\n        y = cos(a) * cos(b) * r;\n        z = sin(b) * r * 0.9 + 5;\n        translate([x, y, z])\n            sphere(d = 2.5);\n    }\n\n    // Leaf – two thin cylinders at stem\n    color(\"darkgreen\")\n    translate([3, 0, 30])\n    rotate([0, -15, 30])\n    scale([1, 0.3, 1])\n    cylinder(h = 15, d = 8, center = true);\n\n    color(\"darkgreen\")\n    translate([-3, 0, 30])\n    rotate([0, 15, -30])\n    scale([1, 0.3, 1])\n    cylinder(h = 15, d = 8, center = true);\n}\n\n// Hollow shell for printing\ndifference() {\n    nectarine();\n    scale([1, 1, 0.9])\n    sphere(d = 60 - wall * 2);\n}\n\n// Small flat spot on bottom for stable printing\ndifference() {\n    translate([0, 0, -30])\n        sphere(d = 60);\n    translate([0, 0, -30.5])\n        cube([60, 60, 1], center = true);\n}",
    "renders": true
  },
  {
    "fruit": "grape",
    "openscad_code": "// Realistic 3D printable grape\n// Overall size ~65 mm tall\n\n// Stem parameters\nstem_dia = 5;\nstem_h = 25;\n\n// Berry parameters\nberry_dia = 12;\nberry_step = 11;  // center-to-center spacing\nrows = 5;\nberries_per_row = [5, 7, 9, 7, 5];\n\n// Calyx (top part) parameters\ncalyx_h = 4;\ncalyx_dia = 18;\n\n// Small indent parameters for realism\nindent_dia = 1.5;\nindent_depth = 0.8;\n\n// Union all parts\nunion() {\n\n    // Main stem\n    translate([0, 0, stem_h / 2])\n        cylinder(h = stem_h, d = stem_dia, $fn = 20);\n\n    // Calyx disc on top of stem\n    translate([0, 0, stem_h])\n        cylinder(h = calyx_h, d = calyx_dia, $fn = 30);\n\n    // Generate berries in a tapered cluster\n    for (i = [0 : rows - 1]) {\n        angle_step = 360 / berries_per_row[i];\n        radius = (rows - 1 - i) * berry_step / 2;\n        z = stem_h - i * berry_step * 0.8;\n\n        for (j = [0 : berries_per_row[i] - 1]) {\n            angle = j * angle_step;\n            x = radius * cos(angle);\n            y = radius * sin(angle);\n\n            // Individual berry with indent for realism\n            translate([x, y, z])\n                difference() {\n                    sphere(d = berry_dia, $fn = 20);\n\n                    // Four tiny indents on each berry surface\n                    for (k = [0 : 3]) {\n                        rot = k * 90;\n                        translate([\n                            0,\n                            berry_dia / 2 * cos(rot),\n                            berry_dia / 2 * sin(rot)\n                        ])\n                            rotate([0, 90 * sin(rot), 0])\n                                cylinder(\n                                    h = indent_depth + 1,\n                                    d = indent_dia,\n                                    $fn = 8\n                                );\n                    }\n                }\n        }\n    }\n\n    // Small connecting stems between berries\n    for (i = [0 : rows - 2]) {\n        curr_cnt = berries_per_row[i];\n        next_cnt = berries_per_row[i + 1];\n        curr_z = stem_h - i * berry_step * 0.8;\n        next_z = stem_h - (i + 1) * berry_step * 0.8;\n\n        for (j = [0 : curr_cnt - 1]) {\n            angle = j * 360 / curr_cnt;\n            x1 = (rows - 1 - i) * berry_step / 2 * cos(angle);\n            y1 = (rows - 1 - i) * berry_step / 2 * sin(angle);\n\n            // Connect to closest berries in next row\n            for (k = [0 : next_cnt - 1]) {\n                angle2 = k * 360 / next_cnt;\n                x2 = (rows - 1 - (i + 1)) * berry_step / 2 * cos(angle2);\n                y2 = (rows - 1 - (i + 1)) * berry_step / 2 * sin(angle2);\n\n                // Simple thin cylinder connector\n                translate([x1, y1, curr_z])\n                    rotate([0, 90 + atan2(next_z - curr_z, sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))), atan2(y2 - y1, x2 - x1)])\n                        cylinder(h = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (next_z - curr_z) * (next_z - curr_z)), d = 1, $fn = 6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "strawberry",
    "openscad_code": "// Realistic Strawberry Model\n// Medium complexity, 3D printable\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body parameters\nbody_radius = 30 * scale_factor;\nbody_height = 35 * scale_factor;\nbody_segments = 48;\n\n// Leaf parameters\nleaf_count = 6;\nleaf_length = 15 * scale_factor;\nleaf_width = 12 * scale_factor;\nleaf_thickness = 2 * scale_factor;\n\n// Seed parameters\nseed_radius = 1.2 * scale_factor;\nseed_rows = 8;\nseeds_per_row = 12;\n\n// Stem parameters\nstem_radius = 4 * scale_factor;\nstem_height = 8 * scale_factor;\n\nmodule strawberry_body() {\n    // Main body - ellipsoid with slight taper\n    difference() {\n        scale([1, 1, 1.1])\n        sphere(d=body_radius*2, $fn=body_segments);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -body_radius])\n        cube([body_radius*2, body_radius*2, body_radius], center=true);\n        \n        // Hollow out slightly for material saving\n        translate([0, 0, -5*scale_factor])\n        scale([0.85, 0.85, 0.9])\n        sphere(d=body_radius*1.8, $fn=body_segments);\n    }\n}\n\nmodule leaf_shape() {\n    // Basic leaf shape\n    hull() {\n        translate([0, leaf_length/3, 0])\n        sphere(d=leaf_width/2, $fn=8);\n        \n        translate([0, -leaf_length/3, 0])\n        sphere(d=leaf_width/3, $fn=8);\n    }\n}\n\nmodule leaves() {\n    // Calyx leaves around top\n    for(i = [0:leaf_count-1]) {\n        rotate([0, 0, i * 360/leaf_count])\n        translate([0, body_radius*0.6, body_height*0.85])\n        rotate([90, 0, -30])\n        scale([1, 1, leaf_thickness/leaf_width])\n        leaf_shape();\n    }\n}\n\nmodule seeds() {\n    // Surface seeds arranged in spiral pattern\n    for(row = [0:seed_rows-1]) {\n        row_height = body_height * 0.8 * (row + 1) / seed_rows;\n        row_radius = sqrt(pow(body_radius, 2) - pow(row_height - body_height/2, 2)) * 0.9;\n        \n        for(seed = [0:seeds_per_row-1]) {\n            angle = seed * 360/seeds_per_row + row * 15;\n            x = cos(angle) * row_radius;\n            y = sin(angle) * row_radius;\n            z = row_height - body_height/2;\n            \n            // Calculate surface normal\n            normal_angle = atan2(sqrt(x*x + y*y), z);\n            rotate_x = 90 - normal_angle;\n            \n            translate([x, y, z])\n            rotate([rotate_x, 0, angle])\n            sphere(d=seed_radius*2, $fn=8);\n        }\n    }\n}\n\nmodule stem() {\n    // Small stem at top\n    translate([0, 0, body_height*0.9])\n    cylinder(h=stem_height, r1=stem_radius, r2=stem_radius*0.7, $fn=16);\n}\n\n// Main assembly\nunion() {\n    strawberry_body();\n    leaves();\n    stem();\n    \n    // Add seeds as protrusions\n    translate([0, 0, body_height/2])\n    seeds();\n}",
    "renders": true
  },
  {
    "fruit": "raspberry",
    "openscad_code": "// Raspberry - Realistic style, medium complexity\n// Designed for 3D printing without supports\n\n// Overall dimensions: ~70mm tall, ~60mm diameter\n\n$fn = 32;  // Smooth curves for printing\n\n// Main raspberry body\nmodule raspberry_body() {\n    difference() {\n        // Core berry shape - ellipsoid\n        scale([1, 1, 1.2])\n        sphere(d = 50);\n        \n        // Hollow out center for printing\n        scale([0.8, 0.8, 1])\n        sphere(d = 45);\n    }\n}\n\n// Individual drupelet (raspberry segment)\nmodule drupelet(size, angle1, angle2) {\n    // Position on spherical surface\n    translate([0, 0, 15])\n    rotate([angle1, 0, angle2])\n    translate([0, 25, 0])\n    \n    // Drupelet shape - slightly flattened sphere\n    scale([1, 1, 0.7])\n    sphere(d = size);\n}\n\n// Layer of drupelets around the berry\nmodule drupelet_layer(height, count, size) {\n    for (i = [0 : count - 1]) {\n        rotate([0, 0, i * 360 / count])\n        translate([0, 0, height])\n        drupelet(size, 15, 0);\n    }\n}\n\n// Create the berry with multiple layers of drupelets\nmodule berry() {\n    union() {\n        // Core structure\n        raspberry_body();\n        \n        // Bottom layer - 12 drupelets\n        for (i = [0 : 11]) {\n            rotate([0, 0, i * 30])\n            translate([0, 22, -15])\n            drupelet(8, 45, 0);\n        }\n        \n        // Middle layer - 10 drupelets\n        for (i = [0 : 9]) {\n            rotate([0, 0, i * 36])\n            translate([0, 24, -5])\n            drupelet(9, 25, 0);\n        }\n        \n        // Upper layer - 8 drupelets\n        for (i = [0 : 7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 20, 5])\n            drupelet(8, 10, 0);\n        }\n        \n        // Top layer - 6 drupelets\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 15, 15])\n            drupelet(7, -15, 0);\n        }\n    }\n}\n\n// Raspberry stem/calyx\nmodule stem() {\n    // Main stem\n    translate([0, 0, 30])\n    cylinder(h = 15, d1 = 8, d2 = 5);\n    \n    // Sepals (green leaves around stem)\n    for (i = [0 : 4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 6, 30])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 0.3])\n        cylinder(h = 8, d = 4);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main berry\n    berry();\n    \n    // Stem on top\n    stem();\n}\n\n// Add small details - tiny hairs on drupelets\nmodule hairs() {\n    for (i = [0 : 30]) {\n        rotate([0, 0, i * 12])\n        translate([0, 25 + sin(i) * 5, -20 + i])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d = 0.5);\n    }\n}\n\n// Uncomment to add hairs (may affect printability)\n// %hairs();",
    "renders": true
  },
  {
    "fruit": "blueberry",
    "openscad_code": "// Blueberry - Realistic & 3D-printable\n// ~20 mm diameter\n\n/* ---------- PARAMETERS ---------- */\ndiam = 20;            // overall berry diameter (mm)\nwall = 1.2;           // minimum printable wall thickness (mm)\nn_petals = 5;         // calyx lobes\nsepal_len = 3;        // length of each sepal\nsepal_t = 0.8;        // sepal thickness\ncrown_h = 1.5;        // height of calyx crown\nstem_d = 1.6;         // stem diameter\nstem_h = 7;           // stem protrusion\n\n/* ---------- MAIN BERRY ---------- */\ndifference() {\n    // Smooth main body\n    sphere(d = diam, $fn = 100);\n\n    // Remove inner cavity for shell printing\n    translate([0,0, -wall/2])\n        sphere(d = diam - 2*wall, $fn = 100);\n\n    // Small flat base so it sits without rolling\n    translate([0,0, -diam/2 - 0.1])\n        cube([diam*1.1, diam*1.1, 1], center = true);\n}\n\n/* ---------- DETAILED CALYX (TOP) ---------- */\nmodule sepal() {\n    // petal-shaped sepal\n    difference() {\n        union() {\n            // main blade\n            scale([1, 1.3, 1])\n                sphere(d = sepal_len*2, $fn = 20);\n            // small stem-like base\n            cylinder(h = sepal_t*2, d = sepal_t*2.5, $fn = 10);\n        }\n        // taper tip\n        translate([0, sepal_len*0.9, 0])\n            rotate([90,0,0])\n                cylinder(h = sepal_len*1.5, d1 = sepal_len*1.3, d2 = 0, $fn = 10);\n    }\n}\n\n// circular crown base for sepals\ntranslate([0,0, diam/2 - crown_h/2])\n    cylinder(h = crown_h, d = diam*0.6, $fn = 50);\n\n// distribute sepals radially\nfor (i = [0 : n_petals-1]) {\n    angle = i*360/n_petals;\n    translate([0,0, diam/2])\n        rotate([0,0, angle])\n            translate([0, diam*0.20, 0])\n                rotate([80,0,0])\n                    sepal();\n}\n\n/* ---------- STEM ---------- */\ntranslate([0,0, diam/2 + crown_h])\n    cylinder(h = stem_h, d = stem_d, $fn = 20);\n\n// slight bulb at stem end\ntranslate([0,0, diam/2 + crown_h + stem_h])\n    sphere(d = stem_d*1.4, $fn = 20);\n\n/* ---------- FIVE LIGHT DOTS (bloom) ---------- */\ndots = [[0.3,0.8],[-0.7,0.5],[0.6,-0.6],[-0.2,-0.85],[0.8,0.1]];\nfor (p = dots) {\n    translate([p[0]*diam/2, p[1]*diam/2, sqrt((diam/2)^2 - (p[0]*diam/2)^2 - (p[1]*diam/2)^2) - 0.2])\n        sphere(d = 0.6, $fn = 8);\n}",
    "renders": true
  },
  {
    "fruit": "blackberry",
    "openscad_code": "// Blackberry - realistic style with medium complexity\n// Approx 70mm tall\n\n// Main parameters\nberry_diameter = 32;  // Overall berry diameter\ndruplet_size = 5;     // Individual druplet sphere size\nstem_length = 35;     // Stem length\nbase_wall = 1.5;      // Wall thickness for 3D printing\n\n// Create the blackberry fruit\nmodule blackberry() {\n    difference() {\n        union() {\n            // Core structure - slightly flattened sphere\n            scale([1, 1, 0.8])\n                sphere(d = berry_diameter);\n            \n            // Add druplets in layered pattern\n            for (layer = [0:4]) {\n                rotate([0, 0, layer * 36]) {\n                    for (angle = [0:30:330]) {\n                        rotate([0, 0, angle]) {\n                            translate([0, berry_diameter/2 - 5, layer * 5 - 8]) {\n                                sphere(d = druplet_size);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Additional druplets for fuller appearance\n            for (layer = [1:3]) {\n                rotate([0, 0, layer * 72 + 18]) {\n                    for (angle = [0:45:315]) {\n                        rotate([0, 0, angle]) {\n                            translate([0, berry_diameter/2 - 8, layer * 6 - 6]) {\n                                sphere(d = druplet_size * 0.9);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Top druplets\n            rotate([0, 0, 45]) {\n                for (angle = [0:60:300]) {\n                    rotate([0, 0, angle]) {\n                        translate([0, berry_diameter/4, berry_diameter/2 - 5]) {\n                            sphere(d = druplet_size * 0.8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hollow out center for printing\n        scale([0.8, 0.8, 0.7])\n            sphere(d = berry_diameter - base_wall * 2);\n    }\n}\n\n// Create stem with realistic texture\nmodule stem() {\n    union() {\n        // Main stem cylinder\n        cylinder(h = stem_length, d1 = 4, d2 = 2.5, $fn = 8);\n        \n        // Add small bumps for texture\n        for (i = [0:3:stem_length-5]) {\n            translate([0, 0, i]) {\n                rotate([0, 0, i * 45]) {\n                    translate([2.2, 0, 0]) {\n                        sphere(d = 0.8);\n                    }\n                }\n            }\n        }\n        \n        // Stem connection to berry\n        translate([0, 0, stem_length]) {\n            cylinder(h = 3, d1 = 2.5, d2 = 4, $fn = 8);\n        }\n    }\n}\n\n// Create calyx leaves at stem connection\nmodule calyx() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            rotate([30, 0, 0]) {\n                translate([0, 0, stem_length - 1]) {\n                    scale([1, 0.6, 0.3]) {\n                        sphere(d = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, stem_length]) {\n    rotate([180, 0, 0]) {\n        union() {\n            blackberry();\n            calyx();\n        }\n    }\n}\n\nstem();",
    "renders": true
  },
  {
    "fruit": "mulberry",
    "openscad_code": "// Realistic Mulberry Model for 3D Printing\n// Medium complexity with proper structure for printing\n\nmodule mulberry_body() {\n    // Main berry body - ellipsoid shape\n    scale([1, 0.8, 1.2])\n        sphere(15, $fn=32);\n}\n\nmodule berry_cluster() {\n    // Generate the clustered drupelets characteristic of mulberries\n    for(i = [0:35]) {\n        // Fibonacci-like distribution for natural clustering\n        angle = i * 137.5;\n        radius = 8 + 2 * sin(i * 2);\n        height = 10 * sin(i * 0.3);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, height])\n                rotate([0, 90, 0])\n                    scale([1, 0.7, 0.7])\n                        cylinder(h=8, r1=3, r2=1.5, $fn=8);\n    }\n}\n\nmodule stem_connection() {\n    // Stem attachment point with smooth transition\n    translate([0, 0, 20])\n        cylinder(h=8, r1=3, r2=2, $fn=16);\n    \n    // Add small calyx leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([2.5, 0, 20])\n                rotate([45, 0, 90])\n                    scale([0.5, 1, 0.1])\n                        cylinder(h=4, r=2, $fn=6);\n    }\n}\n\nmodule surface_detail() {\n    // Add subtle surface texture with small bumps\n    for(i = [0:50]) {\n        angle = i * 73.2;\n        radius = 12 * sqrt(i / 50);\n        height = 15 + 2 * (i % 2);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, height])\n                sphere(0.8, $fn=6);\n    }\n}\n\nmodule leaf_attachment() {\n    // Small leaf remnants at base\n    translate([0, 0, 15])\n        rotate([0, 0, 30])\n            scale([1, 0.3, 0.05])\n                cube([8, 6, 1], center=true);\n    \n    translate([0, 0, 15])\n        rotate([0, 0, -45])\n            scale([0.8, 0.25, 0.05])\n                cube([7, 5, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    // Core body\n    mulberry_body();\n    \n    // Add clustered drupelets\n    berry_cluster();\n    \n    // Surface texture\n    surface_detail();\n    \n    // Stem connection\n    stem_connection();\n    \n    // Leaf remnants\n    leaf_attachment();\n}\n\n// Optional: Add a small print base\ntranslate([0, 0, -3])\n    cylinder(h=3, r=18, $fn=32);",
    "renders": true
  },
  {
    "fruit": "gooseberry",
    "openscad_code": "// Gooseberry - Realistic style, medium complexity\n// Basic dimensions (mm)\ngooseberry_diameter = 25;\ngooseberry_height = 30;\nstem_length = 8;\nstem_diameter = 3;\nvein_count = 8;\nridge_height = 1.2;\n\n// Main body module with longitudinal ridges\nmodule gooseberry_body() {\n    difference() {\n        // Main sphere shape\n        sphere(d = gooseberry_diameter, $fn = 64);\n        \n        // Flatten the bottom slightly\n        translate([0, 0, -gooseberry_diameter/2 - 1])\n            cube([gooseberry_diameter + 2, gooseberry_diameter + 2, 2], center = true);\n        \n        // Create longitudinal ridges by subtracting grooves\n        for (i = [0:vein_count-1]) {\n            rotate([0, 0, i * (360/vein_count)])\n                translate([0, 0, -gooseberry_diameter/2 - 1])\n                    cube([gooseberry_diameter * 0.3, ridge_height * 2, gooseberry_diameter + 2], center = true);\n        }\n    }\n    \n    // Add the ridges back as raised features\n    for (i = [0:vein_count-1]) {\n        rotate([0, 0, i * (360/vein_count) + (360/vein_count/2)])\n            translate([0, gooseberry_diameter/2 - 2, 0])\n                scale([1, 0.3, 0.8])\n                    sphere(d = ridge_height * 4, $fn = 16);\n    }\n}\n\n// Stem with leaves\nmodule stem_and_leaves() {\n    // Main stem\n    translate([0, 0, gooseberry_height/2])\n        cylinder(h = stem_length, d = stem_diameter, $fn = 16);\n    \n    // Small leaves at stem base\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([stem_diameter/2 + 1.5, 0, gooseberry_height/2 + stem_length/2])\n                rotate([90, 0, 0])\n                    scale([0.8, 1.2, 0.3])\n                        cylinder(h = 4, d1 = 3, d2 = 1, $fn = 3);\n    }\n}\n\n// Add subtle surface bumps for realism\nmodule surface_bumps() {\n    // Random small bumps across the surface\n    for (i = [15:135]) {\n        rotate([i * 7.5, i * 11.25, 0])\n            translate([0, 0, gooseberry_diameter/2 - 2])\n                sphere(d = 0.8 + (i % 3) * 0.3, $fn = 8);\n    }\n}\n\n// Final assembly\nunion() {\n    // Main gooseberry body\n    gooseberry_body();\n    \n    // Surface texture\n    surface_bumps();\n    \n    // Stem and leaves\n    stem_and_leaves();\n}\n\n// Position for printing\ntranslate([0, 0, -gooseberry_height/2])\n    rotate([0, 0, 0]);",
    "renders": true
  },
  {
    "fruit": "currant",
    "openscad_code": "// Realistic 3D Currant (medium complexity)\n// Outer diameter ~15 mm, full cluster ~70 mm\n// Designed for 3D printing: no steep overhangs, 1 mm wall thickness\n\n// Main cluster parameters\n$fn = 30;\nberry_d = 15;          // diameter of one berry\nwall = 1;              // printable wall thickness\nstem_d = 2.5;          // diameter of main stem\nberry_count = 12;      // number of berries\nrand_seed = 42;        // fixed seed for reproducible randomization\n\n// Berry module: slightly flattened sphere with calyx scar\nmodule berry(pos=[0,0,0], scale=1, rot=[0,0,0]) {\n    translate(pos)\n    rotate(rot)\n    scale([scale, scale, scale*0.85])  // slightly flattened vertically\n    union() {\n        // Main body\n        difference() {\n            sphere(d=berry_d);\n            // Calyx scar – small conical hollow\n            translate([0,0,-berry_d/2])\n            cylinder(d1=berry_d/4, d2=0, h=berry_d/6, $fn=12);\n        }\n        // Subtle vertical ribs\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n            translate([0,0,-berry_d/2])\n            scale([0.1, 0.05, 1])\n            sphere(d=berry_d*1.05);\n        }\n    }\n}\n\n// Tiny calyx remnants on top\nmodule calyx(pos=[0,0,0], ang=[0,0,0]) {\n    translate(pos)\n    rotate(ang)\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n        translate([0,berry_d/2.3,0])\n        rotate([90,0,0])\n        cylinder(d1=1.5, d2=0.7, h=2, $fn=6);\n    }\n}\n\n// Main stem (curved)\nmodule stem() {\n    // Create a smooth arc\n    hull() {\n        translate([0,0,0])\n        rotate([0,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n        translate([0,0,60])\n        rotate([20,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n        translate([0,0,120])\n        rotate([40,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n    }\n    // thicken via spheres\n    for(z=[0:5:120]) {\n        ang = 40*(z/120);\n        translate([0,0,z])\n        rotate([ang,90,0])\n        sphere(d=stem_d*1.1, $fn=12);\n    }\n}\n\n// Generate berry positions with random offsets\nmodule cluster() {\n    stem();\n    for(i=[0:berry_count-1]) {\n        // Random angles and radius\n        seed = rand_seed + i*100;\n        a = rands(0,360,1,seed)[0];\n        b = rands(0,180,1,seed+5)[0];\n        r = rands(berry_d*1.5, berry_d*2.5,1,seed+10)[0];\n        // Position along curved stem\n        stem_z = rands(15,105,1,seed+15)[0];\n        stem_ang = 40*(stem_z/120);\n        x = r * sin(b) * cos(a);\n        y = r * sin(b) * sin(a);\n        z = r * cos(b) + stem_z;\n        // Rotate berry to face outward from stem\n        angle_to_stem = atan2(y,x);\n        // Create berry\n        berry([x,y,z], rands(0.9,1.05,1,seed+20)[0], [0,0,angle_to_stem]);\n        calyx([x,y,z], [0,0,angle_to_stem]);\n    }\n}\n\n// Render the full cluster\ncluster();",
    "renders": true
  },
  {
    "fruit": "redcurrant",
    "openscad_code": "// Redcurrant 3D model - medium complexity\n// Designed for 3D printing, realistic style\n\n// Overall dimensions\n$fn = 24;\n\n// Main parameters\nberry_diameter = 5;\nberry_rows = 4;\nberries_per_row = [8, 6, 4, 2];\nstem_thickness = 1.2;\nstem_length = 25;\ncluster_height = 35;\n\n// Berry module with realistic shape\nmodule berry() {\n    difference() {\n        // Main berry body\n        sphere(d = berry_diameter);\n        \n        // Calyx scar on top\n        translate([0, 0, berry_diameter/2 - 0.3])\n            cylinder(h = 1, d1 = 2.5, d2 = 1.5, $fn = 12);\n        \n        // Small indentations for texture\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([berry_diameter/2 - 0.8, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1.5, d = 0.6, $fn = 8);\n        }\n    }\n}\n\n// Stem with realistic branching\nmodule stem() {\n    // Main stem\n    cylinder(h = stem_length, d = stem_thickness);\n    \n    // Side branches\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([0, 0, stem_length - 5 - i * 5])\n                rotate([30, 0, 0])\n                    cylinder(h = 8, d1 = stem_thickness, d2 = 0.8);\n    }\n    \n    // Top curl\n    translate([0, 0, stem_length])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d = stem_thickness);\n}\n\n// Berry cluster\nmodule berry_cluster() {\n    // Stem first\n    stem();\n    \n    // Berries arranged in rows\n    for(row = [0:berry_rows-1]) {\n        berries = berries_per_row[row];\n        angle_step = 360 / berries;\n        height = cluster_height - row * 8;\n        radius = 12 - row * 2.5;\n        \n        for(i = [0:berries-1]) {\n            angle = i * angle_step;\n            // Calculate position on spiral\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            // Each berry with slight random rotation\n            translate([x, y, height])\n                rotate([rand(row*10+i)*10, rand(row*10+i+1)*10, angle])\n                    berry();\n        }\n    }\n}\n\n// Helper function for pseudo-random rotation\nfunction rand(n) = (n * 13.7) % 1 - 0.5;\n\n// Create the complete redcurrant\nberry_cluster();",
    "renders": true
  },
  {
    "fruit": "blackcurrant",
    "openscad_code": "// Blackcurrant (realistic style, medium complexity)\n// Overall dimensions: ~65mm tall × ~35mm wide\n\n$fn = 30;  // Smooth curves\n\n// Main body of the blackcurrant cluster\nmodule blackcurrant_cluster() {\n    // Central stem\n    stem();\n    \n    // Generate berries in a realistic cluster pattern\n    for (i = [0:7]) {\n        angle = i * 45 + (i % 2) * 22.5;\n        radius = 8 + (i % 3) * 2;\n        height = 15 + sin(i * 30) * 5;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([90 + (i % 2) * 10, 0, angle])\n            berry(6 + (i % 3) * 0.5);\n    }\n    \n    // Additional berries for fullness\n    for (i = [0:5]) {\n        angle = i * 60 + 30;\n        radius = 10 + (i % 2) * 3;\n        height = 25 + cos(i * 45) * 3;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([85 + (i % 3) * 5, 0, angle])\n            berry(5.5 + (i % 2) * 0.8);\n    }\n    \n    // Top berries\n    for (i = [0:3]) {\n        angle = i * 90;\n        radius = 4;\n        height = 35;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([60 + i * 5, 0, angle])\n            berry(4.5);\n    }\n}\n\n// Individual berry with realistic features\nmodule berry(size) {\n    color(\"darkmagenta\")\n    union() {\n        // Main berry body\n        sphere(d = size * 2);\n        \n        // Calyx (dried flower remnants) at top\n        translate([0, 0, size])\n        rotate([0, 0, 45])\n        calyx(size * 0.4);\n        \n        // Surface texture - small dimples\n        for (j = [0:8]) {\n            theta = j * 40;\n            for (k = [1:3]) {\n                phi = k * 30 + j * 10;\n                dimple_pos = size * 0.9;\n                \n                translate([\n                    dimple_pos * sin(phi) * cos(theta),\n                    dimple_pos * sin(phi) * sin(theta),\n                    dimple_pos * cos(phi)\n                ])\n                sphere(d = size * 0.15);\n            }\n        }\n    }\n}\n\n// Calyx structure\nmodule calyx(size) {\n    difference() {\n        // Base of calyx\n        cylinder(h = size, d = size * 1.8);\n        \n        // Petal indentations\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([size * 0.3, 0, -0.1])\n            cube([size * 0.6, size * 0.2, size + 0.2], center = true);\n        }\n    }\n}\n\n// Main stem structure\nmodule stem() {\n    color(\"darkgreen\")\n    union() {\n        // Central stalk\n        cylinder(h = 40, d = 3);\n        \n        // Side branches\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n            translate([0, 0, 10 + i * 8])\n            rotate([110 - i * 10, 0, 0])\n            cylinder(h = 12, d = 1.5);\n        }\n        \n        // Small leaf remnants\n        translate([0, 0, 38])\n        rotate([0, 0, 30])\n        scale([1, 0.6, 0.1])\n        sphere(d = 8);\n    }\n}\n\n// Generate the complete blackcurrant\nblackcurrant_cluster();",
    "renders": true
  },
  {
    "fruit": "whitecurrant",
    "openscad_code": "// Whitecurrant model - realistic style, medium complexity\n// Overall size ~70mm height\n\n$fn = 32;\nberry_diameter = 8;\nberry_spacing = 10;\ncluster_height = 70;\nstem_thickness = 2;\npeduncle_length = 15;\n\n// Berries arranged in a cluster\nmodule berry_cluster() {\n    // Main berries in spiral pattern\n    for(i = [0:9]) {\n        translate([\n            sin(i * 40) * (5 + i * 0.5),\n            cos(i * 40) * (5 + i * 0.5),\n            -i * 7\n        ]) {\n            rotate([0, 0, i * 25]) {\n                difference() {\n                    sphere(d = berry_diameter);\n                    // Calyx indentation\n                    translate([0, 0, berry_diameter/2 - 1])\n                        cylinder(h = 2, d1 = 3, d2 = 1.5, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Additional side berries\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([8, 0, -20]) {\n                rotate([0, 30, 0]) {\n                    sphere(d = berry_diameter * 0.9);\n                }\n            }\n        }\n    }\n    \n    // Top berries\n    for(i = [0:4]) {\n        translate([\n            sin(i * 72) * 4,\n            cos(i * 72) * 4,\n            -5\n        ]) {\n            sphere(d = berry_diameter * 0.8);\n        }\n    }\n}\n\n// Main stem structure\nmodule main_stem() {\n    // Central peduncle\n    linear_extrude(height = peduncle_length, twist = 5)\n        circle(d = stem_thickness, $fn = 8);\n    \n    // Branched stems for berries\n    for(i = [0:9]) {\n        translate([0, 0, -i * 7]) {\n            rotate([0, 0, i * 40]) {\n                translate([5 + i * 0.5, 0, 0]) {\n                    rotate([90, 0, -30]) {\n                        cylinder(h = 8, d = stem_thickness * 0.6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaves\nmodule leaves() {\n    // Main leaf\n    translate([0, 15, -25]) {\n        rotate([0, 20, 0]) {\n            difference() {\n                scale([1, 1.5, 0.5])\n                    sphere(d = 12);\n                // Leaf vein indentations\n                translate([0, -2, 0])\n                    cube([0.5, 8, 3], center = true);\n                translate([0, -2, 0])\n                    rotate([0, 0, 30])\n                        cube([0.5, 4, 2.5], center = true);\n                translate([0, -2, 0])\n                    rotate([0, 0, -30])\n                        cube([0.5, 4, 2.5], center = true);\n            }\n        }\n    }\n    \n    // Second leaf\n    translate([-10, -10, -30]) {\n        rotate([0, -15, -30]) {\n            scale([0.8, 1.2, 0.4])\n                sphere(d = 10);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, cluster_height]) {\n    union() {\n        // Stem and berries\n        main_stem();\n        berry_cluster();\n        \n        // Leaves\n        leaves();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "elderberry",
    "openscad_code": "// Elderberry cluster with realistic style - medium complexity\n// Overall height ~70mm, printable without supports\n\n// Global parameters\nberry_d = 5;          // Individual berry diameter\nberry_gap = 1.5;      // Gap between berries\nstem_d = 2.5;         // Stem diameter\nstem_segments = 8;    // Stem resolution\numbel_radius = 20;    // Main cluster radius\nberry_wall = 0.8;     // Wall thickness for printing\n\n// Main module\nmodule elderberry_cluster() {\n    // Central stem\n    color(\"saddlebrown\")\n    translate([0,0,-5])\n    cylinder(d1=stem_d*1.5, d2=stem_d, h=35, $fn=stem_segments);\n    \n    // First umbel layer\n    elder_umbel(umbel_radius*0.7, 25, 0);\n    \n    // Second umbel layer\n    elder_umbel(umbel_radius*0.85, 32, 180);\n    \n    // Top umbel layer  \n    elder_umbel(umbel_radius, 40, 0);\n}\n\n// Generate a single umbel layer\nmodule elder_umbel(radius, height, rot_offset) {\n    berry_count = floor(360 / (berry_d + berry_gap));\n    angle_step = 360 / berry_count;\n    \n    for(i = [0:berry_count-1]) {\n        angle = i * angle_step + rot_offset;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        // Main berry\n        translate([x, y, height])\n        rotate([0,0,angle])\n        elder_berry();\n        \n        // Supporting pedicel\n        color(\"saddlebrown\")\n        translate([0,0,height-2])\n        rotate([0,0,angle])\n        rotate([90,0,0])\n        cylinder(d=stem_d*0.6, h=radius, $fn=6);\n    }\n    \n    // Center berries\n    for(j = [0:2]) {\n        offset = j * 120;\n        dist = radius * 0.3;\n        cx = cos(offset) * dist;\n        cy = sin(offset) * dist;\n        \n        translate([cx, cy, height])\n        elder_berry();\n    }\n}\n\n// Individual berry with realistic features\nmodule elder_berry() {\n    difference() {\n        // Main berry body\n        sphere(d=berry_d, $fn=12);\n        \n        // Calyx scar at top\n        translate([0,0,berry_d/2-0.2])\n        cylinder(d=berry_d*0.25, h=0.5, $fn=6);\n        \n        // Hollow interior for printing\n        translate([0,0,-berry_wall])\n        sphere(d=berry_d-berry_wall*2, $fn=12);\n    }\n    \n    // Surface texture rings\n    for(z = [-2:1:2]) {\n        translate([0,0,z])\n        rotate([90,0,0])\n        difference() {\n            cylinder(d=berry_d+0.2, h=0.3, $fn=16);\n            cylinder(d=berry_d-0.2, h=0.4, $fn=16);\n        }\n    }\n}\n\n// Render the model\nelderberry_cluster();",
    "renders": true
  },
  {
    "fruit": "cloudberry",
    "openscad_code": "// Cloudberry – realistic, medium complexity\n// 2024-04-XX\n\n// General parameters\n$fn = 36;\nfruit_d  = 12;        // diameter of one drupelet\nfruit_h  = 10;        // height of one drupelet\ncore_r   = 8;         // core radius that drupelets attach to\nstem_d   = 4;         // main stem diameter\nstem_h   = 25;        // stem height\nleaf_l   = 22;        // leaf length\nleaf_w   = 11;        // leaf width\nscale_factor = 3;     // enlarge whole berry for printing\n\n// Petal-like leaves at top\nmodule leaves() {\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([0,core_r*2.2,fruit_h*1.5])\n                rotate([90,0,0])\n                    scale([1,0.6,1])\n                        cylinder(h=leaf_l, r1=leaf_w, r2=leaf_w/2, center=true);\n    }\n}\n\n// One drupelet (segment of raspberry-like berry)\nmodule drupelet(row, pos) {\n    // polar angle for this row\n    theta = (row==0) ? 0 : 45 + row*25;   // rows 0,1,2\n    // azimuthal angle for each drupelet in row\n    phi_step = (row==0) ? 0 : 360/(row*6);\n    phi = pos*phi_step;\n    \n    // position vector on sphere\n    x = core_r * sin(theta) * cos(phi);\n    y = core_r * sin(theta) * sin(phi);\n    z = core_r * cos(theta);\n    \n    translate([x,y,z])\n        sphere(d=fruit_d);\n}\n\n// Build the berry by stacking rows of drupelets\nmodule berry() {\n    union() {\n        // central core (for strength & easier printing)\n        sphere(d=core_r*2);\n        \n        // rows of drupelets\n        for(row=[0:2]) {\n            count = (row==0) ? 1 : row*6;\n            for(pos=[1:count])\n                drupelet(row, pos);\n        }\n    }\n}\n\n// Main stem\nmodule stem() {\n    cylinder(h=stem_h, d=stem_d);\n}\n\n// Base with gentle slope to avoid overhang\nmodule base() {\n    difference() {\n        cylinder(h=3, d=stem_d+6);\n        translate([0,0,-1])\n            cylinder(h=5, d=stem_d-1);\n    }\n}\n\n// Final assembly\nscale([scale_factor,scale_factor,scale_factor])\nunion() {\n    stem();\n    translate([0,0,stem_h])\n        base();\n    translate([0,0,stem_h+3])\n        berry();\n    translate([0,0,stem_h+3])\n        leaves();\n}",
    "renders": true
  },
  {
    "fruit": "lingonberry",
    "openscad_code": "// Lingonberry model - realistic style, medium complexity\n\n// Overall dimensions (mm)\nberry_diameter = 10;\nberry_length = 12;\ncrown_size = 3;\nstem_length = 15;\n\n// 3D print settings\n$fn = 32;\nwall_thickness = 1.2;\n\nmodule lingonberry() {\n    // Main berry body - slightly elongated sphere\n    color(\"red\")\n    union() {\n        // Main body\n        translate([0, 0, 0])\n        scale([1, 1, 1.2])\n        sphere(d = berry_diameter);\n        \n        // Crown at top - small lobes\n        translate([0, 0, berry_length/2])\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([crown_size/2, 0, 0])\n            scale([0.6, 0.6, 0.8])\n            sphere(d = crown_size);\n        }\n        \n        // Surface texture - small bumps\n        for(phi = [0:30:150]) {\n            for(theta = [0:20:340]) {\n                rotate([phi, 0, theta])\n                translate([berry_diameter/2 - 0.3, 0, 0])\n                scale([0.3, 0.3, 0.3])\n                sphere(d = 1);\n            }\n        }\n    }\n    \n    // Stem attachment point\n    color(\"darkgreen\")\n    translate([0, 0, -berry_length/2])\n    cylinder(h = 2, d1 = 2, d2 = 1.5);\n    \n    // Main stem with slight curve\n    color(\"darkgreen\")\n    translate([0, 0, -berry_length/2 - 1])\n    rotate([5, 0, 0])\n    cylinder(h = stem_length, d = 1.5);\n    \n    // Stem details - small leaves\n    translate([0, 0, -berry_length/2 - 3])\n    rotate([15, 0, 45])\n    scale([0.8, 2, 0.2])\n    sphere(d = 3);\n    \n    translate([0, 0, -berry_length/2 - 5])\n    rotate([10, 0, -30])\n    scale([0.8, 2, 0.2])\n    sphere(d = 3);\n}\n\n// Create a cluster of 3 berries for realism\ntranslate([-10, 0, 0])\nlingonberry();\n\ntranslate([5, 8, 2])\nrotate([0, 0, 20])\nlingonberry();\n\ntranslate([8, -5, -1])\nrotate([0, 0, -15])\nlingonberry();",
    "renders": true
  },
  {
    "fruit": "bilberry",
    "openscad_code": "// Bilberry - realistic style, medium complexity\n// Overall size ~60 mm\n\n$fn = 36; // smooth curves\n\n// Main berry body\nmodule berry_body() {\n    difference() {\n        // Main sphere with slight flattening\n        scale([1, 1, 0.9])\n        sphere(d = 12);\n\n        // Top indent\n        translate([0, 0, 5.5])\n        cylinder(h = 3, d1 = 3, d2 = 0, $fn = 20);\n\n        // Bottom indent\n        translate([0, 0, -5.5])\n        cylinder(h = 2, d1 = 2, d2 = 0, $fn = 20);\n    }\n}\n\n// Surface bumps for realistic texture\nmodule surface_texture() {\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([5.5, 0, sin(i * 15) * 2])\n        rotate([90, 0, 0])\n        scale([0.4, 0.4, 1])\n        sphere(d = 1.2);\n    }\n}\n\n// Crown at top\nmodule crown() {\n    difference() {\n        // Main crown shape\n        translate([0, 0, 6.5])\n        cylinder(h = 2.5, d1 = 4.5, d2 = 2.5);\n        \n        // Central hole\n        translate([0, 0, 6.5])\n        cylinder(h = 3, d = 1.5);\n    }\n    \n    // Crown petals\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([1.8, 0, 7.8])\n        rotate([30, 0, 0])\n        scale([0.6, 0.3, 1.2])\n        sphere(d = 2);\n    }\n}\n\n// Small leaves\nmodule leaves() {\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180 + 30])\n        translate([2.5, 0, 7.5])\n        rotate([45, 0, 0])\n        scale([1.2, 0.8, 0.2])\n        sphere(d = 3);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 8.5])\n    rotate([0, 0, 15])\n    cylinder(h = 8, d1 = 1.5, d2 = 0.8);\n}\n\n// Complete bilberry\nunion() {\n    // Main body with texture\n    union() {\n        berry_body();\n        surface_texture();\n    }\n    \n    // Top features\n    crown();\n    leaves();\n    stem();\n}\n\n// Add a subtle base for printing stability\ntranslate([0, 0, -6])\ncylinder(h = 0.5, d = 12.5);",
    "renders": true
  },
  {
    "fruit": "huckleberry",
    "openscad_code": "// Realistic 3D Huckleberry for 3D printing\n// Medium complexity model with anatomical detail\n\n// Main parameters\nberry_diameter = 18;           // Main berry body diameter\ncrown_height = 4;              // Crown height at top\ncrown_diameter = 12;           // Crown diameter\nseed_count = 8;                // Number of seeds inside\nstem_length = 6;               // Stem length\nstem_diameter = 2.5;           // Stem thickness\nsurface_bump_height = 0.8;     // Surface bump height\nwall_thickness = 1.2;          // Wall thickness for 3D printing\noverall_scale = 4;             // Scale factor for final size\n\n// Color\n$fn = 32;                      // Smooth curves\n\n// Hollow sphere module for berry body\nmodule hollow_sphere(outer_d, inner_d) {\n    difference() {\n        sphere(d = outer_d);\n        sphere(d = inner_d);\n    }\n}\n\n// Surface bump module for realistic texture\nmodule surface_bump(pos, height) {\n    translate(pos) {\n        scale([0.7, 0.7, 1])\n        sphere(d = height * 2);\n    }\n}\n\n// Internal seed module\nmodule seed(pos, angle) {\n    translate(pos) {\n        rotate([0, angle, 0])\n        scale([0.6, 0.3, 0.8])\n        sphere(d = 2);\n    }\n}\n\n// Crown module (top structure)\nmodule berry_crown() {\n    // Main crown base\n    translate([0, 0, berry_diameter/2 - 1]) {\n        cylinder(h = crown_height, d1 = crown_diameter, d2 = crown_diameter * 0.7);\n    }\n    \n    // Crown segments\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([crown_diameter/2 - 2, 0, berry_diameter/2 + crown_height/2]) {\n                rotate([0, 90, 0])\n                cylinder(h = 3, d = 2);\n            }\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, berry_diameter/2 + crown_height + stem_length/2]) {\n        cylinder(h = stem_length, d = stem_diameter);\n    }\n}\n\n// Main berry assembly\nmodule huckleberry() {\n    // Main berry body with hollow interior\n    hollow_sphere(berry_diameter, berry_diameter - wall_thickness * 2);\n    \n    // Crown at top\n    berry_crown();\n    \n    // Stem\n    stem();\n    \n    // Surface bumps for realistic texture\n    // Arrange bumps in Fibonacci-like spiral pattern\n    bump_positions = [\n        [5, 2, 6], [-5, 2, 6], [2, -5, 6], [-2, -5, 6],\n        [6, 0, 4], [-6, 0, 4], [0, 6, 4], [0, -6, 4],\n        [4, 4, 5], [-4, 4, 5], [4, -4, 5], [-4, -4, 5]\n    ];\n    \n    for(pos = bump_positions) {\n        surface_bump(pos, surface_bump_height);\n    }\n    \n    // Internal seeds (only visible if cut open)\n    for(i = [0:seed_count-1]) {\n        angle = i * 360/seed_count;\n        radius = berry_diameter/2 - wall_thickness - 2;\n        x = radius * cos(angle) * 0.4;\n        y = radius * sin(angle) * 0.4;\n        z = -berry_diameter/6 + i * 0.5;\n        seed([x, y, z], angle);\n    }\n}\n\n// Create the final model with proper scale\nscale(overall_scale)\nhuckleberry();",
    "renders": true
  },
  {
    "fruit": "boysenberry",
    "openscad_code": "// Boysenberry - Realistic Style, Medium Complexity\n// Overall dimensions: ~45mm tall, ~35mm diameter\n\n// Base parameters\nberry_diameter = 32;\nberry_height = 40;\nsegment_count = 8;\ndrupelet_count = 35;\n\n// Main berry body\nmodule berry_body() {\n    difference() {\n        // Main ellipsoid shape\n        scale([1, 1, 1.25])\n        sphere(d=berry_diameter, $fn=32);\n        \n        // Top indentation\n        translate([0, 0, berry_height/2 - 2])\n        cylinder(h=10, d1=12, d2=8, $fn=16);\n    }\n}\n\n// Individual drupelet (small sphere with stem base)\nmodule drupelet(size, stem_length) {\n    union() {\n        // Main drupelet body\n        sphere(d=size, $fn=8);\n        \n        // Tiny stem connection\n        translate([0, 0, size/2])\n        cylinder(h=stem_length, d=size/3, $fn=6);\n    }\n}\n\n// Generate drupelets across berry surface\nmodule surface_drupelets() {\n    for(i = [0:drupelet_count-1]) {\n        // Fibonacci spiral for even distribution\n        theta = i * 137.5;\n        phi = acos(1 - 2*(i+0.5)/drupelet_count);\n        \n        // Convert spherical to cartesian coordinates\n        x = berry_diameter/2 * 0.9 * cos(theta*3.14159/180) * sin(phi);\n        y = berry_diameter/2 * 0.9 * sin(theta*3.14159/180) * sin(phi);\n        z = berry_height/2 * 0.9 * cos(phi);\n        \n        translate([x, y, z])\n        rotate([0, acos(z/sqrt(x*x+y*y+z*z))*180/3.14159, atan2(y,x)*180/3.14159])\n        drupelet(2.5 + 0.5*sin(i*3), 0.5);\n    }\n}\n\n// Calyx (leafy top) with 5 lobes\nmodule calyx() {\n    difference() {\n        // Base calyx disc\n        translate([0, 0, berry_height/2 - 1])\n        scale([1, 1, 0.3])\n        cylinder(h=3, d=berry_diameter*0.8, $fn=32);\n        \n        // Center hole\n        translate([0, 0, berry_height/2 - 1])\n        cylinder(h=4, d=6, $fn=16);\n    }\n    \n    // Calyx lobes\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, berry_diameter*0.3, berry_height/2])\n        rotate([45, 0, 0])\n        scale([1, 1.5, 0.5])\n        cylinder(h=8, d1=6, d2=4, $fn=4);\n    }\n}\n\n// Stem connection\nmodule stem() {\n    translate([0, 0, berry_height/2 + 2])\n    cylinder(h=10, d1=4, d2=2, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Core berry\n    berry_body();\n    \n    // Surface texture\n    surface_drupelets();\n    \n    // Top structures\n    calyx();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "loganberry",
    "openscad_code": "// Loganberry - medium complexity realistic style\n// Overall dimensions: ~70mm long, ~35mm wide, ~35mm tall\n\nmodule berry_body() {\n    // Main berry body - elongated ellipsoid\n    scale([1.2, 1, 0.8])\n        sphere(d=30, $fn=50);\n    \n    // Add slight bulge in middle\n    translate([0, 0, -2])\n        scale([1.3, 1.1, 0.6])\n            sphere(d=20, $fn=40);\n}\n\nmodule drupelets() {\n    // Create surface texture with small spheres (drupelets)\n    for (i = [0:35]) {\n        angle1 = i * 137.5;  // Golden angle for natural distribution\n        angle2 = (i * 73) % 180;\n        radius = 15 + sin(i * 0.5) * 3;\n        \n        translate([\n            cos(angle1) * sin(angle2) * radius,\n            sin(angle1) * sin(angle2) * radius,\n            cos(angle2) * radius - 5\n        ]) {\n            scale([1, 1, 0.7])\n                sphere(d=2.5 + sin(i) * 0.5, $fn=12);\n        }\n    }\n}\n\nmodule calyx() {\n    // Top calyx with 5 sepals\n    translate([0, 0, 12.5])\n        cylinder(h=3, d1=8, d2=6, $fn=20);\n    \n    // Sepal lobes\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 3.5, 12])\n                rotate([30, 0, 0])\n                    scale([1, 0.5, 1])\n                        cylinder(h=6, d1=2, d2=0.5, $fn=8);\n    }\n}\n\nmodule stem_attachment() {\n    // Small stem scar\n    translate([0, 0, 15])\n        cylinder(h=1, d=4, $fn=20);\n    \n    // Tiny center depression\n    translate([0, 0, 15.5])\n        cylinder(h=1, d=2, $fn=10);\n}\n\nmodule loganberry() {\n    union() {\n        // Main berry structure\n        berry_body();\n        \n        // Surface drupelets\n        drupelets();\n        \n        // Top calyx\n        calyx();\n        \n        // Stem attachment point\n        stem_attachment();\n    }\n}\n\n// Position the berry upright for printing\nrotate([0, 180, 0])\n    loganberry();",
    "renders": true
  },
  {
    "fruit": "tayberry",
    "openscad_code": "// Tayberry model - realistic medium complexity\n// Dimensions: ~60mm long, 25mm diameter\n// Designed for FDM 3D printing (0.8mm walls, minimal supports)\n\n// Main parameters\nberry_length = 60;\nberry_diameter = 25;\nsegment_count = 12;\ndruplet_rows = 8;\ndruplet_size = 1.4;\n\n// Berry core\nmodule berry_core() {\n    difference() {\n        union() {\n            // Main body segments\n            for(i = [0:segment_count-1]) {\n                translate([0, 0, i * berry_length/segment_count])\n                rotate([0, 0, i * 15])\n                scale([1 - i*0.02, 1 - i*0.015, 1])\n                sphere(d=berry_diameter * (1 - i*0.03), $fn=24);\n            }\n        }\n        \n        // Hollow core for printing\n        translate([0, 0, -2])\n        cylinder(d=berry_diameter-4, h=berry_length+4, $fn=32);\n    }\n}\n\n// Individual druplet\nmodule druplet(x, y, z, angle) {\n    translate([x, y, z])\n    rotate([0, 0, angle])\n    sphere(d=druplet_size, $fn=8);\n}\n\n// Druplet pattern on berry surface\nmodule druplets() {\n    for(seg = [0:segment_count-1]) {\n        seg_z = seg * berry_length/segment_count;\n        radius = (berry_diameter/2) * (1 - seg*0.03);\n        \n        for(row = [0:druplet_rows-1]) {\n            angle = row * 360/druplet_rows;\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            // Offset alternate rows\n            offset = (seg % 2) * 180/druplet_rows;\n            \n            // Top hemisphere druplets\n            druplet(x, y, seg_z + 2, angle + offset);\n            \n            // Bottom hemisphere druplets\n            if(seg_z > 0) {\n                druplet(x, y, seg_z - 2, angle + offset + 180);\n            }\n        }\n    }\n}\n\n// Calyx (leafy top)\nmodule calyx() {\n    translate([0, 0, berry_length])\n    union() {\n        // Central core\n        cylinder(d=8, h=3, $fn=16);\n        \n        // Sepals\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            translate([0, 3.5, 0])\n            rotate([25, 0, 0])\n            scale([1, 1.2, 0.3])\n            sphere(d=6, $fn=8);\n        }\n        \n        // Small sepals between main ones\n        for(i = [0:4]) {\n            rotate([0, 0, i*72 + 36])\n            translate([0, 2.5, -0.5])\n            rotate([35, 0, 0])\n            scale([0.7, 0.9, 0.2])\n            sphere(d=4, $fn=6);\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, berry_length+3])\n    rotate([0, 0, 15])\n    cylinder(d1=3, d2=2, h=15, $fn=12);\n}\n\n// Assembly\nunion() {\n    // Main berry with druplets\n    difference() {\n        union() {\n            berry_core();\n            druplets();\n        }\n        \n        // Remove internal supports\n        translate([0, 0, -1])\n        cylinder(d=berry_diameter-3.2, h=berry_length+2, $fn=32);\n    }\n    \n    // Top parts\n    calyx();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "olallieberry",
    "openscad_code": "// Olallieberry - medium complexity realistic style\n// Size: ~70mm long, designed for 3D printing\n\n// Main berry body\nmodule berry_body() {\n    difference() {\n        // Main oblong body\n        scale([1.2, 1, 0.8])\n        sphere(d=40, $fn=50);\n        \n        // Top indentation\n        translate([0, 0, 15])\n        scale([0.4, 0.4, 0.5])\n        sphere(d=40, $fn=30);\n        \n        // Bottom point\n        translate([0, 0, -16])\n        scale([0.2, 0.2, 0.5])\n        sphere(d=40, $fn=20);\n    }\n}\n\n// Individual drupelet\nmodule drupelet(size=2.5, height=1.5) {\n    difference() {\n        // Main drupelet sphere\n        scale([1, 1, 0.7])\n        sphere(d=size, $fn=10);\n        \n        // Top dimple\n        translate([0, 0, height/2])\n        sphere(d=size*0.6, $fn=8);\n    }\n}\n\n// Generate drupelet positions on berry surface\nmodule drupelets() {\n    // Top ring\n    for(i=[0:15]) {\n        angle = i * 22.5;\n        translate([0, 0, 15])\n        rotate([90, 0, angle])\n        translate([0, 20, 0])\n        drupelet(3, 2);\n    }\n    \n    // Middle rings\n    for(ring=[1:2]) {\n        z = 15 - ring * 8;\n        radius = 20 - ring * 3;\n        for(i=[0:20]) {\n            angle = i * 18;\n            translate([0, 0, z])\n            rotate([90, 0, angle])\n            translate([0, radius, 0])\n            drupelet(2.5, 1.5);\n        }\n    }\n    \n    // Bottom ring\n    for(i=[0:12]) {\n        angle = i * 30;\n        translate([0, 0, -5])\n        rotate([90, 0, angle])\n        translate([0, 15, 0])\n        drupelet(2, 1);\n    }\n    \n    // Bottom tip\n    translate([0, 0, -12])\n    scale([0.8, 0.8, 1])\n    drupelet(2, 1);\n}\n\n// Calyx (leafy top)\nmodule calyx() {\n    difference() {\n        // Base calyx\n        cylinder(h=3, r1=8, r2=5, $fn=8);\n        \n        // Center hole\n        cylinder(h=4, r1=2, r2=1.5, $fn=8);\n    }\n    \n    // Calyx leaves\n    for(i=[0:5]) {\n        rotate([0, 0, i * 60])\n        translate([5, 0, 1.5])\n        rotate([0, 110, 0])\n        scale([0.4, 1, 0.5])\n        cylinder(h=8, r1=3, r2=0.5, $fn=3);\n    }\n}\n\n// Stem\nmodule stem() {\n    difference() {\n        // Main stem cylinder\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=12, r1=1, r2=0.8, $fn=8);\n        \n        // Cut bottom flat\n        translate([0, 0, -1])\n        cube([20, 20, 2], center=true);\n    }\n}\n\n// Assemble the olallieberry\nunion() {\n    // Main berry with drupelets\n    union() {\n        berry_body();\n        color(\"darkmagenta\")\n        drupelets();\n    }\n    \n    // Calyx and stem\n    translate([0, 0, 16])\n    color(\"darkgreen\")\n    calyx();\n    \n    translate([0, 0, 18])\n    color(\"saddlebrown\")\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "marionberry",
    "openscad_code": "// Marionberry 3D model\n// Medium complexity, realistic style\n// Designed for 3D printing - approximately 60mm long\n\n// Main parameters\nberry_length = 60;\nberry_width = 45;\nberry_height = 35;\nberry_segments = 12;\nsegment_depth = 3;\nsegment_width = 2;\n\n// Druplet parameters\ndruplet_radius = 2.5;\ndruplet_rows = 8;\ndruplets_per_row = [6, 8, 10, 12, 12, 10, 8, 6];\ndruplet_offset = 1.5;\n\n// Core parameters\ncore_radius = 8;\ncore_length = 55;\n\n// Stem parameters\nstem_length = 8;\nstem_radius = 3;\n\nmodule marionberry_core() {\n    // Central core - slightly elongated sphere\n    scale([1, 1.2, 0.8])\n    sphere(r = core_radius, $fn = 20);\n}\n\nmodule druplet_cluster() {\n    // Create cluster of individual druplets around the core\n    for (row = [0 : druplet_rows - 1]) {\n        row_angle = 180 * row / (druplet_rows - 1);\n        y_offset = (row_angle - 90) * berry_height / 180;\n        \n        for (i = [0 : druplets_per_row[row] - 1]) {\n            angle = 360 * i / druplets_per_row[row];\n            x_pos = cos(angle) * (berry_width/2 - druplet_radius);\n            z_pos = sin(angle) * (berry_length/2 - druplet_radius) * 0.8;\n            y_pos = y_offset;\n            \n            translate([x_pos, y_pos, z_pos])\n            sphere(r = druplet_radius, $fn = 8);\n        }\n    }\n}\n\nmodule berry_segments() {\n    // Create raised segments along berry surface\n    difference() {\n        union() {\n            // Main berry body\n            scale([1, 0.9, 0.7])\n            sphere(r = berry_width/2, $fn = berry_segments * 2);\n            \n            // Raised segments\n            for (i = [0 : berry_segments - 1]) {\n                rotate([0, 0, i * 360/berry_segments])\n                translate([0, 0, -berry_length/4])\n                linear_extrude(height = berry_length/2, twist = 15)\n                offset(r = segment_width)\n                offset(r = -segment_width)\n                circle(r = berry_width/2 - segment_depth, $fn = 3);\n            }\n        }\n        \n        // Hollow out center for printing\n        translate([0, 0, -5])\n        cylinder(h = berry_length + 10, r1 = core_radius - 2, r2 = core_radius - 2, $fn = 20);\n    }\n}\n\nmodule berry_stem() {\n    // Create stem at top of berry\n    translate([0, berry_height/2 - 2, 0])\n    rotate([90, 0, 0])\n    cylinder(h = stem_length, r = stem_radius, $fn = 8);\n    \n    // Stem collar\n    translate([0, berry_height/2 - 2, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 3, r1 = stem_radius + 2, r2 = stem_radius, $fn = 8);\n}\n\n// Main assembly\nunion() {\n    // Base berry shape with segments\n    berry_segments();\n    \n    // Add druplet details\n    druplet_cluster();\n    \n    // Add stem\n    berry_stem();\n    \n    // Optional: Add small hole for keychain or string\n    // translate([0, berry_height/2 + 3, 0])\n    // rotate([90, 0, 0])\n    // cylinder(h = 10, r = 1.5, $fn = 8);\n}",
    "renders": true
  },
  {
    "fruit": "saskatoon",
    "openscad_code": "// Saskatoon berry cluster for 3D printing\n// Medium complexity realistic style\n// Size: ~60 mm tall\n\n// Main parameters\nberry_diameter = 6;\nberry_rows = 4;\nberries_per_row = [5,4,3,2];\ncluster_height = 45;\nstem_diameter = 3;\nstem_length = 20;\nwall_thickness = 1.2;\n\n// Berry module with realistic shape\nmodule realistic_berry(d=berry_diameter) {\n    // Main berry body\n    sphere(d=d, $fn=32);\n    \n    // Calyx at top\n    translate([0,0,d/2])\n    difference() {\n        cylinder(h=d/4, d1=d/2.5, d2=d/4.5, $fn=16);\n        // Hollow center\n        cylinder(h=d/3, d1=d/4, d2=d/6, $fn=8);\n    }\n    \n    // Small indentations for texture\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n        translate([d*0.35,0,d*0.4])\n        rotate([90,0,0])\n        scale([1,0.7,0.7])\n        sphere(d=d/8, $fn=8);\n    }\n}\n\n// Main berry cluster\nmodule berry_cluster() {\n    // Create the berries in a natural cluster shape\n    for(row=[0:berry_rows-1]) {\n        row_height = row * (berry_diameter * 0.8);\n        row_angle = row * 15;\n        \n        for(i=[0:berries_per_row[row]-1]) {\n            angle = 360 / berries_per_row[row] * i + row * 10;\n            radius = (berry_rows - row) * berry_diameter * 0.6;\n            \n            rotate([row_angle,0,angle])\n            translate([radius,0,row_height])\n            rotate([0,0,rand()*30])\n            rotate([rand()*15-7.5, rand()*15-7.5, 0])\n            realistic_berry();\n        }\n    }\n    \n    // Central berry at top\n    translate([0,0,cluster_height-berry_diameter])\n    realistic_berry(berry_diameter*1.1);\n}\n\n// Stem with leaves\nmodule stem_and_leaves() {\n    // Main stem\n    color(\"saddlebrown\")\n    rotate([0,0,5])\n    cylinder(h=stem_length+cluster_height, d=stem_diameter, $fn=8);\n    \n    // Small branching stems\n    for(i=[0:3]) {\n        rotate([0,0,i*90+15])\n        translate([0,0,cluster_height - i*8])\n        rotate([75,0,0])\n        cylinder(h=8, d1=stem_diameter*0.6, d2=stem_diameter*0.3, $fn=6);\n    }\n    \n    // Leaves\n    color(\"forestgreen\")\n    for(i=[0:2]) {\n        rotate([0,0,i*120+30])\n        translate([0,0,cluster_height/2 + i*10])\n        rotate([45,0,0])\n        scale([1,0.6,0.1])\n        sphere(d=15, $fn=32);\n    }\n}\n\n// Base for 3D printing\nmodule print_base() {\n    // Flatten bottom for printing\n    translate([0,0,-wall_thickness])\n    cylinder(h=wall_thickness*2, d=30, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Add base\n    print_base();\n    \n    // Add stem and leaves\n    stem_and_leaves();\n    \n    // Add berry cluster\n    translate([0,0,stem_length])\n    berry_cluster();\n}",
    "renders": true
  },
  {
    "fruit": "serviceberry",
    "openscad_code": "// Serviceberry (Amelanchier) - Realistic Medium Complexity\n// Dimensions: approx 90mm tall x 60mm wide\n// 3D printable with 2mm wall thickness\n\nmodule branch_segment(r=3, h=20, twist=0) {\n    // Tapered branch segment with slight angle\n    for(i=[0:5]) {\n        translate([0,0,i*h/5])\n        rotate([0,0,twist*i/5])\n        cylinder(h1=r*(1-i/10), h2=r*(0.9-i/10), h=h/5+0.1, $fn=8);\n    }\n}\n\nmodule leaf() {\n    // Oval leaf with serrated edge approximation\n    scale([1, 1.5, 0.2])\n    difference() {\n        sphere(12, $fn=16);\n        // Remove bottom half for flat leaf\n        translate([0,-15,0])\n        cube([30,30,30], center=true);\n    }\n}\n\nmodule berry_cluster() {\n    // 5-7 berries in natural cluster\n    for(i=[0:30:180]) {\n        rotate([0,0,i])\n        translate([8,0,0])\n        sphere(4, $fn=12);\n    }\n    // Central berry\n    sphere(5, $fn=12);\n}\n\nmodule main_branch() {\n    // Primary trunk with realistic angles\n    branch_segment(r=4, h=35, twist=5);\n    \n    translate([0,0,30])\n    rotate([10,0,5])\n    branch_segment(r=3, h=25, twist=-3);\n    \n    translate([0,0,25])\n    rotate([15,0,-10])\n    branch_segment(r=2.5, h=20, twist=8);\n}\n\nmodule leaves() {\n    // Multiple leaves at branch tips\n    translate([0,0,50])\n    rotate([0,0,45])\n    leaf();\n    \n    translate([5,5,45])\n    rotate([20,30,-30])\n    leaf();\n    \n    translate([-8,3,42])\n    rotate([-15,-20,60])\n    leaf();\n    \n    translate([3,-6,48])\n    rotate([10,-25,90])\n    leaf();\n}\n\nmodule berries() {\n    // Berries at leaf nodes\n    translate([2,8,52])\n    rotate([0,0,30])\n    berry_cluster();\n    \n    translate([-5,5,47])\n    rotate([0,0,-45])\n    berry_cluster();\n}\n\n// Main assembly\nunion() {\n    // Trunk and branches\n    main_branch();\n    \n    // Leaves\n    leaves();\n    \n    // Berries\n    berries();\n    \n    // Small twigs\n    translate([0,0,40])\n    rotate([30,0,120])\n    branch_segment(r=1.5, h=12, twist=15);\n    \n    translate([0,0,45])\n    rotate([-25,0,-60])\n    branch_segment(r=1.5, h=10, twist=-10);\n}",
    "renders": true
  },
  {
    "fruit": "rowanberry",
    "openscad_code": "// Rowanberry Cluster - Realistic Medium Complexity\n// Overall dimensions: ~60mm height, ~40mm width\n\n$fn = 36;  // Smooth curves for 3D printing\n\nmodule berry(radius=4, height=5) {\n    // Slightly elongated berry with pointed tip\n    union() {\n        sphere(r=radius);\n        translate([0,0,height/2]) \n            scale([0.8,0.8,1.2]) \n                sphere(r=radius*0.8);\n    }\n}\n\nmodule leaf(length=15, width=8) {\n    // Pinnate leaf with serrated edges\n    difference() {\n        // Main leaf shape\n        scale([1,0.6,0.1]) \n            cylinder(h=length, r1=width/2, r2=width/4);\n        \n        // Leaflets cuts\n        for(i=[-1:1]) {\n            translate([0, i*2.5, length/2-5]) \n                rotate([0,90,0]) \n                    cylinder(h=width*0.7, r=1.5, $fn=6);\n        }\n        \n        // Serrated edges\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) \n                translate([width/2-0.5,0,length/2]) \n                    cube([1,2,3], center=true);\n        }\n    }\n}\n\nmodule berry_cluster() {\n    // Central stem\n    color(\"brown\") \n        cylinder(h=30, r=0.8);\n    \n    // Berries arranged in umbrella shape\n    for(i=[0:4]) {\n        angle = i*72;\n        for(j=[0:2]) {\n            radius = 10 + j*3;\n            translate([\n                cos(angle)*radius,\n                sin(angle)*radius,\n                20 - j*3\n            ]) {\n                color(\"darkorange\") berry(3.5, 4.5);\n                \n                // Tiny calyx on top\n                color(\"darkgreen\") \n                    translate([0,0,4.5]) \n                        cylinder(h=0.5, r1=1, r2=0.5);\n            }\n        }\n    }\n}\n\nmodule full_branch() {\n    union() {\n        // Main branch\n        color(\"brown\") {\n            rotate([10,0,0]) \n                cylinder(h=50, r=1.2);\n            \n            // Secondary branches\n            for(i=[0:3]) {\n                rotate([0,0,i*90]) \n                    translate([0,0,15+i*10]) \n                        rotate([30,0,0]) \n                            cylinder(h=20, r=0.8);\n            }\n        }\n        \n        // Berry clusters\n        translate([0,0,35]) berry_cluster();\n        translate([10,5,25]) rotate([0,0,45]) berry_cluster();\n        translate([-8,-3,30]) rotate([0,0,-30]) berry_cluster();\n        \n        // Leaves at branch ends\n        translate([0,0,50]) \n            rotate([90,0,0]) \n                leaf(15, 8);\n        translate([15,10,35]) \n            rotate([60,0,45]) \n                leaf(12, 6);\n        translate([-12,-8,40]) \n            rotate([80,0,-30]) \n                leaf(13, 7);\n    }\n}\n\n// Main assembly\nfull_branch();\n\n// Add base for stability\ntranslate([0,0,-2]) \n    color(\"brown\")\n        cylinder(h=2, r=5);",
    "renders": true
  },
  {
    "fruit": "hawthorn",
    "openscad_code": "// Hawthorn branch with leaves and berries - realistic style\n// Medium complexity, 3D printable\n\n$fn = 32;  // Smooth curves\n\n// Main dimensions\nbranch_dia = 4;\nbranch_len = 60;\nberry_dia = 6;\nleaf_len = 20;\nleaf_width = 15;\nleaf_thick = 1.2;\n\nmodule hawthorn() {\n    union() {\n        // Main branch\n        translate([0, 0, 0])\n            cylinder(h = branch_len, d1 = branch_dia*1.5, d2 = branch_dia, center = false);\n        \n        // Side branches\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, i*18])\n            rotate([30, 0, 0])\n            cylinder(h = 25, d1 = branch_dia*0.8, d2 = branch_dia*0.5, center = false);\n        }\n        \n        // Leaves and berries on each side branch\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, 18 + i*3])\n            rotate([30, 0, 0])\n            leaf_cluster();\n        }\n        \n        // Top leaf cluster\n        translate([0, 0, branch_len])\n        rotate([0, 0, 0])\n        leaf_cluster();\n    }\n}\n\nmodule leaf_cluster() {\n    union() {\n        // Berries in cluster\n        for(j = [1:5]) {\n            rotate([0, 0, j*72])\n            translate([10, 0, 15])\n            sphere(d = berry_dia);\n        }\n        \n        // Leaves around berries\n        for(j = [1:5]) {\n            rotate([0, 0, j*72 + 36])\n            translate([8, 0, 12])\n            rotate([0, 0, 30])\n            hawthorn_leaf();\n        }\n    }\n}\n\nmodule hawthorn_leaf() {\n    // Leaf blade with lobed shape\n    difference() {\n        // Main leaf shape\n        scale([1, 0.6, 1])\n        rotate([90, 0, 0])\n        cylinder(h = leaf_len, r1 = leaf_width/2, r2 = 2, center = false);\n        \n        // Lobes on sides\n        for(k = [1:3]) {\n            translate([0, k*5, leaf_len*0.3])\n            rotate([0, 90, 0])\n            cylinder(h = leaf_width*0.4, r = 2, center = true);\n        }\n    }\n    \n    // Leaf stem\n    translate([0, 0, -2])\n    rotate([90, 0, 0])\n    cylinder(h = 4, d = 1.5, center = false);\n    \n    // Veins\n    translate([0, 0, leaf_thick/2])\n    rotate([90, 0, 0])\n    cylinder(h = leaf_len-2, d = 0.5, center = false);\n    \n    for(m = [1:3]) {\n        translate([0, 0, leaf_thick/2])\n        rotate([90, 0, 30])\n        translate([0, 0, m*5])\n        rotate([0, 90, 0])\n        cylinder(h = leaf_width*0.3, d = 0.3, center = true);\n    }\n}\n\n// Generate the hawthorn\nhawthorn();",
    "renders": true
  },
  {
    "fruit": "juneberry",
    "openscad_code": "// Juneberry 3D model - medium complexity realistic style\n// Dimensions approximately 60mm tall x 35mm diameter\n\n$fn = 32;  // Smooth curves for printing\n\nmodule juneberry() {\n    // Main berry body - slightly elongated sphere\n    translate([0, 0, 15])\n    scale([1, 1, 1.2])\n    sphere(d = 30);\n    \n    // Crown/sepals at top\n    translate([0, 0, 33])\n    union() {\n        // Five sepals arranged in a star pattern\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 6, 0])\n            rotate([20, 0, 0])\n            scale([0.8, 1, 0.3])\n            cylinder(h = 8, d1 = 5, d2 = 2);\n        }\n    }\n    \n    // Small indent at blossom end\n    translate([0, 0, 33])\n    rotate([0, 0, 36])\n    cube([5, 2, 1], center = true);\n    \n    // Surface texture - small bumps\n    difference() {\n        union() {\n            // Base berry\n            translate([0, 0, 15])\n            scale([1, 1, 1.2])\n            sphere(d = 30);\n            \n            // Tiny surface bumps\n            for(a = [0:30:150]) {\n                for(b = [0:45:135]) {\n                    rotate([a, b, 0])\n                    translate([0, 0, 16])\n                    sphere(d = 1.5);\n                }\n            }\n        }\n        \n        // Create slight indent between bumps\n        for(a = [15:30:165]) {\n            for(b = [22.5:45:157.5]) {\n                rotate([a, b, 0])\n                translate([0, 0, 16])\n                sphere(d = 1.2);\n            }\n        }\n    }\n    \n    // Stem attachment point\n    translate([0, 0, 33])\n    cylinder(h = 2, d = 3);\n    \n    // Small color variation spots\n    for(i = [0:7]) {\n        rotate([0, 0, i * 51.4])\n        translate([8, 0, 20 + sin(i) * 3])\n        sphere(d = 2.5);\n    }\n    \n    // Bottom slightly flattened\n    translate([0, 0, 0])\n    cube([35, 35, 5], center = true);\n}\n\n// Render the berry\njuneberry();",
    "renders": true
  },
  {
    "fruit": "cranberry",
    "openscad_code": "// Realistic Cranberry for 3D printing\n// Medium complexity with natural dimples and stem\n\n$fn = 48;  // Smooth curves for printing\n\nmodule stem() {\n    // Small stem connector\n    translate([0, 0, 15]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 8, r1 = 2, r2 = 1.5);\n        }\n    }\n}\n\nmodule dimple(x, y, z, size) {\n    // Creates indented dimples for realistic texture\n    translate([x, y, z]) {\n        sphere(r = size);\n    }\n}\n\nmodule cranberry_body() {\n    // Main body - slightly squashed sphere for natural look\n    scale([1, 1, 0.9]) {\n        sphere(r = 25);\n    }\n    \n    // Add subtle surface irregularities\n    for (i = [0:35]) {\n        rotate([rand_vec[i][0], rand_vec[i][1], rand_vec[i][2]]) {\n            translate([rand_vec[i][3]*22, 0, 0]) {\n                scale([1, 0.8, 0.8]) {\n                    sphere(r = 1.5 + rand_vec[i][4]);\n                }\n            }\n        }\n    }\n}\n\n// Pre-computed random vectors for natural look\nrand_vec = [\n    [12, 34, 56, 0.92, 0.3], [45, 67, 23, 0.85, 0.2], [78, 12, 89, 0.95, 0.4],\n    [23, 45, 67, 0.88, 0.5], [56, 78, 12, 0.91, 0.3], [89, 23, 45, 0.87, 0.2],\n    [34, 56, 78, 0.93, 0.4], [67, 89, 23, 0.86, 0.3], [12, 34, 56, 0.94, 0.5],\n    [45, 67, 78, 0.89, 0.2], [78, 12, 34, 0.92, 0.4], [23, 45, 67, 0.88, 0.3],\n    [56, 78, 89, 0.91, 0.5], [89, 12, 23, 0.87, 0.2], [34, 56, 78, 0.93, 0.4],\n    [67, 89, 12, 0.90, 0.3], [12, 23, 34, 0.88, 0.5], [45, 56, 67, 0.92, 0.2],\n    [78, 89, 12, 0.89, 0.4], [23, 34, 45, 0.91, 0.3], [56, 67, 78, 0.87, 0.5],\n    [89, 12, 23, 0.93, 0.2], [34, 45, 56, 0.90, 0.4], [67, 78, 89, 0.88, 0.3],\n    [12, 23, 34, 0.92, 0.5], [45, 56, 67, 0.89, 0.2], [78, 89, 12, 0.91, 0.4],\n    [23, 34, 45, 0.87, 0.3], [56, 67, 78, 0.93, 0.5], [89, 12, 23, 0.90, 0.2],\n    [34, 45, 56, 0.88, 0.4], [67, 78, 89, 0.92, 0.3], [12, 23, 34, 0.89, 0.5],\n    [45, 56, 67, 0.91, 0.2], [78, 89, 12, 0.87, 0.4]\n];\n\nmodule surface_dimples() {\n    // Create realistic dimples on surface\n    difference() {\n        cranberry_body();\n        \n        // Top dimples\n        dimple(5, 8, 15, 4);\n        dimple(-8, -5, 12, 3.5);\n        dimple(7, -6, 18, 3);\n        \n        // Side dimples\n        dimple(18, 12, 5, 3.5);\n        dimple(-15, 10, -8, 4);\n        dimple(12, -15, -5, 3);\n        \n        // Bottom dimples\n        dimple(-5, -7, -18, 3.5);\n        dimple(8, 5, -15, 4);\n        dimple(-6, 8, -12, 3);\n        \n        // Additional micro-dimples for texture\n        for (i = [0:15]) {\n            rotate([i*22.5, 0, 0]) {\n                translate([23, 0, i*2 - 15]) {\n                    sphere(r = 1.2);\n                }\n            }\n        }\n    }\n}\n\nmodule final_cranberry() {\n    union() {\n        // Main body with texture\n        surface_dimples();\n        \n        // Add stem\n        stem();\n    }\n}\n\n// Generate the cranberry centered at origin\nfinal_cranberry();",
    "renders": true
  },
  {
    "fruit": "bearberry",
    "openscad_code": "// Bearberry (Arctostaphylos uva-ursi)\n// Medium complexity realistic model\n// Safe for 3D printing – no steep overhangs, 1.5 mm wall thickness\n\n// Overall dimensions: ~65 mm tall, 75 mm wide\n$fn = 24;        // Smoother curves\n\nmodule berry(r = 3, h = 4){\n    // Single red berry – slightly flattened sphere on a short cylinder\n    translate([0,0,h*0.3])\n        sphere(r);\n    cylinder(h, r*0.8, r*0.8);\n}\n\nmodule leaf(l = 12, w = 5, t = 1.5){\n    // Oval leaf with gentle taper toward tip\n    // Extruded 2D shape for clean print\n    linear_extrude(height = t, center = true, scale = [1, 1, 0.8])\n        hull(){\n            circle(d = w, $fn = 20);\n            translate([l - w/2, 0, 0]) circle(d = w*0.6, $fn = 20);\n        }\n}\n\nmodule stem_segment(h = 10, r = 1.2){\n    // Small cylindrical segment\n    cylinder(h, r, r);\n}\n\nmodule berry_cluster(n = 5){\n    // Group of berries on short curved stems\n    union(){\n        for(i = [0 : n-1]){\n            a = i * 360 / n + 15*sin(i*40);\n            r = 4 + 1.2*i;\n            translate([r*cos(a), r*sin(a), 0]){\n                rotate([0, 90 - i*5, a + 90])\n                    stem_segment(4 + i*0.5);\n                translate([0, 4 + i*0.5, 0])\n                    berry(2.5 + 0.2*i);\n            }\n        }\n    }\n}\n\nmodule simple_veins(){\n    // Subtle raised veins on leaf surface\n    // Two main veins plus secondary\n    color(\"darkgreen\")\n    for(v = [-45, 0, 45]){\n        rotate([0, 0, v])\n            translate([0, -0.75, 0.8])\n                cube([6, 0.4, 0.3], center = true);\n    }\n}\n\nmodule foliage_pair(){\n    // Two opposite leaves with gentle upward angle\n    union(){\n        // Left leaf\n        rotate([0, -10, -20])\n            leaf();\n        // Right leaf\n        mirror([1, 0, 0])\n            rotate([0, -10, -20])\n                leaf();\n    }\n}\n\nmodule branch_with_leaves(len = 30){\n    // Central woody twig with leaves and berries\n    union(){\n        // Main twig\n        color(\"brown\")\n        cylinder(len, 1.4, 1.1);\n        // Leaves in pairs every 8 mm\n        for(z = [len*0.2 : 8 : len*0.8]){\n            translate([0, 0, z])\n                rotate([0, 0, 60*z/len])\n                    foliage_pair();\n        }\n        // Berry cluster at tip\n        translate([0, 0, len + 2])\n            berry_cluster();\n    }\n}\n\n// Assembly\nunion(){\n    // Base stem (main trunk)\n    color(\"brown\")\n    cylinder(8, 2, 1.8);\n    \n    // Three main branches radiating out\n    for(a = [0, 120, 240]){\n        rotate([0, 0, a])\n            translate([0, 0, 8])\n                rotate([a*0.5 - 30, 0, 0])\n                    branch_with_leaves(25 + a*0.08);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "crowberry",
    "openscad_code": "// Crowberry (Empetrum nigrum) - realistic medium complexity\n// Size: ~85 mm total length\n\n// Main parameters\nberry_radius = 4;\nstem_thickness = 1.5;\nleaf_length = 12;\nleaf_width = 2.5;\nberry_count = 12;\nbranch_thickness = 3;\n\n// Berry module with slight imperfections\nmodule berry(r) {\n    difference() {\n        // Main berry body\n        sphere(r);\n        \n        // Small indentations for texture\n        for(i = [0:20]) {\n            rotate([rand(0,360), rand(0,360), rand(0,360)])\n                translate([0, 0, r-0.2])\n                    sphere(r/8);\n        }\n        \n        // Calyx scar at top\n        translate([0, 0, r-0.1])\n            cylinder(r1=r/3, r2=r/4, h=0.5, $fn=8);\n    }\n}\n\n// Leaf with realistic shape\nmodule leaf() {\n    difference() {\n        // Basic leaf shape\n        scale([1, leaf_width/leaf_length, 0.3])\n            rotate_extrude(angle=180, $fn=40)\n                translate([leaf_length/2, 0, 0])\n                    circle(d=leaf_length, $fn=20);\n        \n        // Central vein\n        translate([0, 0, -0.2])\n            cube([leaf_length, 0.3, 0.8], center=true);\n        \n        // Side veins\n        for(i = [-3:3]) {\n            rotate([0, 0, 15*i])\n                translate([leaf_length/4, 0, -0.1])\n                    scale([1, 0.3, 0.5])\n                        cube([leaf_length/2, 0.2, 0.4], center=true);\n        }\n    }\n}\n\n// Main branch with berries\nmodule crowberry_branch() {\n    // Main stem\n    rotate([90, 0, 0])\n        cylinder(h=50, r=branch_thickness, $fn=8);\n    \n    // Side branches\n    for(i = [0:berry_count-1]) {\n        angle = i * 30;\n        height = 5 + i * 3.5;\n        \n        // Side branch\n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                translate([branch_thickness, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=8, r=stem_thickness, $fn=6);\n        \n        // Berry cluster\n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                translate([branch_thickness + 6, 0, 0])\n                    for(j = [0:2]) {\n                        rotate([j*120, 0, 0])\n                            translate([0, berry_radius*1.2, 0])\n                                berry(berry_radius);\n                    }\n        \n        // Leaves\n        if(i % 2 == 0) {\n            translate([0, 0, height+3])\n                rotate([0, 0, angle-60])\n                    rotate([0, 30, 0])\n                        leaf();\n            \n            translate([0, 0, height+3])\n                rotate([0, 0, angle+60])\n                    rotate([0, -30, 0])\n                        scale([1, -1, 1])\n                            leaf();\n        }\n    }\n}\n\n// Generate the model\ncrowberry_branch();",
    "renders": true
  },
  {
    "fruit": "cowberry",
    "openscad_code": "// Cowberry (Vaccinium vitis-idaea) - realistic style, medium complexity\n// Approx. 60mm long, 3D printable\n\n$fn = 32;\n\n// Main berry body\nmodule berry_body() {\n    // Main sphere slightly flattened\n    scale([1, 1, 0.85])\n    sphere(d = 12);\n}\n\n// Small indent at top\nmodule top_indent() {\n    translate([0, 0, 5.1])\n    rotate([180, 0, 0])\n    cylinder(h = 3, r1 = 2.5, r2 = 0);\n}\n\n// Calyx at top\nmodule calyx() {\n    difference() {\n        translate([0, 0, 6])\n        scale([1, 1, 0.5])\n        sphere(d = 7);\n        \n        translate([0, 0, 5])\n        sphere(d = 8);\n    }\n}\n\n// Small sepals\nmodule sepal() {\n    // Create 5 small sepals around the top\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([3.5, 0, 6.5])\n        rotate([30, 0, 0])\n        scale([0.3, 1, 0.1])\n        cylinder(h = 3, r = 1);\n    }\n}\n\n// Surface texture - small bumps\nmodule surface_bumps() {\n    // Random small bumps for realistic texture\n    for(a = [0:30:179]) {\n        for(b = [0:45:359]) {\n            rotate([a, 0, b])\n            translate([0, 0, 6])\n            scale([0.2, 0.2, 0.1])\n            sphere(d = 1.5);\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, -5.5])\n    cylinder(h = 2, r1 = 2, r2 = 1.5);\n}\n\n// Complete cowberry\nmodule cowberry() {\n    difference() {\n        union() {\n            // Main body\n            berry_body();\n            \n            // Calyx\n            calyx();\n            \n            // Sepals\n            sepal();\n            \n            // Stem base\n            stem_base();\n            \n            // Surface texture\n            surface_bumps();\n        }\n        \n        // Remove bottom flat part\n        translate([0, 0, -7])\n        cube([20, 20, 5], center = true);\n        \n        // Top indent\n        top_indent();\n    }\n}\n\n// Scale to realistic size\nscale([5, 5, 5])\ncowberry();",
    "renders": true
  },
  {
    "fruit": "dewberry",
    "openscad_code": "// Dewberry model - realistic style, medium complexity\n// Sized for 3D printing (~60mm length)\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule drupelet(pos, size) {\n    // Individual small drupelet (berry segment)\n    translate(pos)\n        sphere(d = size);\n}\n\nmodule berry_cluster() {\n    // Main berry body - cluster of drupelets\n    union() {\n        // Central core\n        color(\"darkpurple\")\n        sphere(d = 25);\n        \n        // Ring of drupelets around middle\n        for (i = [0:15]) {\n            angle = i * 22.5;\n            x = 12 * cos(angle);\n            y = 12 * sin(angle);\n            z = 0;\n            drupelet([x, y, z], 8);\n        }\n        \n        // Upper ring slightly offset\n        for (i = [0:12]) {\n            angle = i * 30 + 15;\n            x = 10 * cos(angle);\n            y = 10 * sin(angle);\n            z = 8;\n            drupelet([x, y, z], 7);\n        }\n        \n        // Lower ring\n        for (i = [0:12]) {\n            angle = i * 30 + 15;\n            x = 10 * cos(angle);\n            y = 10 * sin(angle);\n            z = -8;\n            drupelet([x, y, z], 7);\n        }\n        \n        // Top dome\n        drupelet([0, 0, 12], 6);\n        \n        // Bottom slightly flattened for printing\n        translate([0, 0, -12])\n            scale([1, 1, 0.3])\n                sphere(d = 20);\n    }\n}\n\nmodule stem() {\n    // Main stem connecting to plant\n    color(\"darkgreen\")\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d1 = 4, d2 = 2.5);\n}\n\nmodule sepals() {\n    // Green sepals at top of berry\n    color(\"green\")\n    for (i = [0:4]) {\n        angle = i * 72;\n        rotate([0, 0, angle])\n            translate([0, 8, 15])\n                rotate([30, 0, 0])\n                    scale([1, 0.5, 0.3])\n                        sphere(d = 8);\n    }\n}\n\nmodule leaf() {\n    // Single compound leaf with 3 leaflets\n    color(\"green\")\n    translate([-15, 0, 5])\n        rotate([0, -20, 45])\n            scale([0.8, 1, 0.2])\n                sphere(d = 25);\n    \n    translate([-25, -5, 3])\n        rotate([0, -30, 60])\n            scale([0.7, 0.9, 0.2])\n                sphere(d = 20);\n    \n    translate([-20, 10, 4])\n        rotate([0, -15, 30])\n            scale([0.75, 0.85, 0.2])\n                sphere(d = 22);\n}\n\n// Main assembly\nunion() {\n    // Berry positioned for printing\n    translate([0, 0, -12])\n        berry_cluster();\n    \n    stem();\n    sepals();\n    leaf();\n}\n\n// Flat base for stable printing\ntranslate([0, 0, -13])\n    cube([30, 30, 1], center = true);",
    "renders": true
  },
  {
    "fruit": "whortleberry",
    "openscad_code": "// Whortleberry (Vaccinium myrtillus) – realistic, 3D-printable\n// Overall height ≈ 70 mm, max diameter ≈ 45 mm\n\n$fn = 64;            // smoothness for curved surfaces\nwall = 1.2;          // printable wall thickness\n\nmodule berry() {\n    // Main berry body: slightly flattened sphere\n    translate([0,0,30])\n        scale([1, 1, 0.75])\n        sphere(d=40);\n\n    // Crown / calyx on top\n    difference() {\n        translate([0,0,55])\n            cylinder(h=7, d1=15, d2=10, center=false);\n        // inner cavity so it prints hollow\n        translate([0,0,55+wall])\n            cylinder(h=7, d1=15-2*wall, d2=10-2*wall, center=false);\n    }\n\n    // 5 calyx lobes\n    for (a=[0:72:359]) {\n        rotate([0,0,a])\n        translate([0,7.5,55+7])\n            rotate([90,0,0])\n            cylinder(h=5, d1=3, d2=1);\n    }\n}\n\nmodule surface_bumps() {\n    // Random small bumps for realism\n    seed = 42;\n    for (i=[0:35]) {\n        r = 20;\n        phi = rands(0,360,1,seed+i)[0];\n        theta = rands(20,160,1,seed+i+1)[0];\n        x = r * sin(theta) * cos(phi);\n        y = r * sin(theta) * sin(phi);\n        z = 30 + 15 * cos(theta);\n        translate([x,y,z])\n            sphere(d=2);\n    }\n}\n\nmodule stem() {\n    // Short stem for printing upright\n    difference() {\n        translate([0,0,-7])\n            cylinder(h=7, d=4);\n        translate([0,0,-7])\n            cylinder(h=7+0.1, d=4-2*wall);\n    }\n}\n\n// Assembly\nunion() {\n    difference() {               // hollow berry\n        berry();\n        translate([0,0,30])\n            scale([1,1,0.75])\n            sphere(d=40-2*wall);\n    }\n    surface_bumps();\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "barberry",
    "openscad_code": "// Realistic medium-complexity barberry (Berberis vulgaris) branch\n// Main branch with alternate leaves and hanging raceme flower cluster\n// Scaled for 3D printing: ≈70 mm tall\n\n// Parameters\nbranch_d = 4;          // branch diameter (mm)\nleaf_l = 20;           // leaf length (mm)\nleaf_w = 8;            // leaf width (mm)\nleaf_thick = 0.8;      // leaf thickness (mm), printable\nberry_d = 4;           // berry diameter (mm)\nberries = 8;           // berries per raceme\nspine_l = 4;           // leaf spine length (mm)\nspine_d = 0.6;         // spine diameter (mm)\n\n// Main branch\nmodule branch() {\n    // Central woody stem\n    color(\"saddlebrown\")\n    union() {\n        // Main vertical stem\n        translate([0, 0, 10])\n        cylinder(h = 60, d = branch_d, $fn = 12);\n\n        // Slight side branch for flowers\n        translate([0, 0, 45])\n        rotate([0, 20, 30])\n        cylinder(h = 20, d = branch_d * 0.7, $fn = 10);\n    }\n}\n\n// Single leaf with correct alternate arrangement and spines\nmodule leaf(pos, angle, flip = false) {\n    // Leaf blade: spatulate shape\n    color(\"forestgreen\")\n    translate(pos)\n    rotate([0, 0, angle + (flip ? 180 : 0)])\n    rotate([0, 80, 0])\n    linear_extrude(height = leaf_thick, scale = [1, 0.3], center = true)\n    polygon(points = [\n        [-leaf_l/2, 0],\n        [-leaf_l/2 + 2, -leaf_w/2],\n        [leaf_l/2 - 5, -leaf_w/2],\n        [leaf_l/2, 0],\n        [leaf_l/2 - 5, leaf_w/2],\n        [-leaf_l/2 + 2, leaf_w/2]\n    ]);\n\n    // Marginal spines (3 each side)\n    color(\"darkgreen\")\n    for (i = [0:2]) {\n        // Left side\n        translate(pos)\n        rotate([0, 0, angle + (flip ? 180 : 0)])\n        translate([-leaf_l/2 + 5 + i*5, leaf_w/2 + 0.5, leaf_thick/2])\n        rotate([0, 0, 45])\n        cylinder(h = spine_l, d = spine_d, $fn = 6);\n\n        // Right side\n        translate(pos)\n        rotate([0, 0, angle + (flip ? 180 : 0)])\n        translate([-leaf_l/2 + 5 + i*5, -leaf_w/2 - 0.5, leaf_thick/2])\n        rotate([0, 0, -45])\n        cylinder(h = spine_l, d = spine_d, $fn = 6);\n    }\n}\n\n// Berry cluster (raceme)\nmodule berries_cluster() {\n    color(\"darkred\")\n    translate([0, 0, 55])\n    rotate([0, 20, 30])\n    union() {\n        // Peduncle\n        color(\"saddlebrown\")\n        cylinder(h = 12, d = 1.5, $fn = 8);\n\n        // Individual berries on pedicels\n        for (i = [0:berries-1]) {\n            translate([0, 0, 12 - i*1.5])\n            rotate([0, 0, i*45])\n            translate([3, 0, 0])\n            sphere(d = berry_d, $fn = 12);\n        }\n    }\n}\n\n// Assembly\nbranch();\n\n// Alternate leaves along stem\nfor (z = [15:10:45]) {\n    // Left side leaves\n    translate([0, 0, z])\n    leaf([branch_d/2 + 1, 0, 0], 30 + (z % 2 ? 15 : 0), false);\n\n    // Right side leaves (180° rotated)\n    translate([0, 0, z + 5])\n    leaf([-branch_d/2 - 1, 0, 0], 210 + (z % 2 ? 15 : 0), true);\n}\n\n// Berry cluster at tip\nberries_cluster();",
    "renders": true
  },
  {
    "fruit": "buffaloberry",
    "openscad_code": "// Buffaloberry (Shepherdia argentea)\n// Realistic style, medium complexity\n// Overall size ~60 mm\n\n// Main berry cluster\nmodule berry_cluster() {\n    // Central berry (largest)\n    translate([0, 0, 0])\n        sphere(d = 12, $fn = 32);\n    \n    // Secondary berries around central\n    for(i = [0:4]) {\n        angle = i * 72;  // 360/5 = 72 degrees\n        translate([\n            8 * cos(angle),\n            8 * sin(angle),\n            3\n        ])\n        sphere(d = 9, $fn = 32);\n    }\n    \n    // Tertiary berries (smaller)\n    for(i = [0:4]) {\n        angle = i * 72 + 36;\n        translate([\n            12 * cos(angle),\n            12 * sin(angle),\n            -2\n        ])\n        sphere(d = 6, $fn = 32);\n    }\n}\n\n// Leaf structure\nmodule leaf() {\n    difference() {\n        // Main leaf body\n        scale([1, 2.5, 0.3])\n            sphere(d = 15, $fn = 32);\n        \n        // Leaf tip\n        translate([0, 8, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 8, d2 = 0, $fn = 32);\n        \n        // Vein indentation\n        translate([0, -2, 0.5])\n            scale([0.2, 2.5, 0.1])\n                sphere(d = 15, $fn = 32);\n    }\n}\n\n// Stem system\nmodule stem() {\n    // Main stem\n    rotate([80, 0, 0])\n        cylinder(h = 25, d = 3, $fn = 16);\n    \n    // Berry stems\n    for(i = [0:11]) {\n        angle = i * 30;\n        translate([\n            5 * cos(angle),\n            5 * sin(angle),\n            2\n        ])\n        rotate([0, 90 - angle, 0])\n            cylinder(h = 6, d1 = 2, d2 = 1, $fn = 8);\n    }\n}\n\n// Calyx remnants\nmodule calyx() {\n    difference() {\n        // Base\n        translate([0, 0, 6])\n            cylinder(h = 2, d = 14, $fn = 32);\n        \n        // Star-shaped cutout\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([0, 3.5, 7])\n                    cube([7, 7, 2], center = true);\n        }\n    }\n}\n\n// Complete buffaloberry\nunion() {\n    // Main berries\n    berry_cluster();\n    \n    // Calyx on top\n    calyx();\n    \n    // Stem system\n    stem();\n    \n    // Leaves\n    translate([-15, -5, 10])\n        rotate([0, 0, -30])\n            leaf();\n    \n    translate([12, -8, 8])\n        rotate([0, 0, 45])\n            mirror([1, 0, 0])\n                leaf();\n    \n    translate([8, 12, 5])\n        rotate([0, 0, 120])\n            leaf();\n}\n\n// Base for 3D printing stability\ntranslate([0, 0, -3])\n    cylinder(h = 3, d = 30, $fn = 64);",
    "renders": true
  },
  {
    "fruit": "snowberry",
    "openscad_code": "// Snowberry (Symphoricarpos albus) – realistic, medium complexity\n// ~75 mm tall, printable without supports\n\n$fn = 32;           // global smoothness\n\n// overall dimensions\nstem_h  = 60;       // total stem height\nberry_d = 12;       // average berry diameter\nberry_gap = 2.5;    // spacing between berries\nwall_t    = 1.4;    // wall thickness for printing\n\n// stem module\nmodule stem() {\n    // main stalk\n    cylinder(h = stem_h, d1 = 3, d2 = 2.5);\n    \n    // tiny twigs for berries\n    for(i = [0:20:140]) {\n        rotate([0, 0, i]) translate([0, 0, stem_h * 0.5]) \n            rotate([90, 0, 0]) cylinder(h = 8, d1 = 1.4, d2 = 0.8);\n    }\n}\n\n// single berry with slight oval shape\nmodule berry() {\n    difference() {\n        // outer shell (elongated sphere)\n        scale([1, 1, 1.2]) sphere(d = berry_d);\n        \n        // hollow inside\n        scale([1, 1, 1.2]) sphere(d = berry_d - wall_t * 2);\n        \n        // small opening at bottom\n        translate([0, 0, -berry_d/2 - 1])\n            cylinder(h = 3, d = berry_d * 0.35);\n    }\n}\n\n// generate berry clusters along stem\nmodule berries() {\n    // bottom cluster\n    for(a = [0:60:300]) {\n        rotate([0, 0, a]) translate([0, 8, stem_h * 0.2])\n            berry();\n    }\n    \n    // middle cluster\n    for(a = [30:60:330]) {\n        rotate([0, 0, a]) translate([0, 8.5, stem_h * 0.5])\n            berry();\n    }\n    \n    // top cluster (smaller, tighter)\n    for(a = [15:45:345]) {\n        rotate([0, 0, a]) translate([0, 7, stem_h * 0.8])\n            scale(0.85) berry();\n    }\n}\n\n// leafy bract at top\nmodule top_bract() {\n    translate([0, 0, stem_h + 2])\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        rotate([0, 20, 0])\n        scale([1, 0.6, 0.1])\n        translate([0, 0, 0])\n        sphere(d = 8);\n    }\n}\n\n// union all parts\nunion() {\n    stem();\n    berries();\n    top_bract();\n}",
    "renders": true
  },
  {
    "fruit": "winterberry",
    "openscad_code": "// Winterberry (Ilex verticillata) – medium realism, 3D-printable\n// Approx. 80 mm tall, 55 mm wide cluster\n\n// General parameters\nberry_d = 8;               // berry diameter\nberry_wall = 0.8;          // wall thickness for hollow berries\nstem_d = 3;                // main stem diameter\nbranch_d = 1.6;            // twig diameter\npedicel_l = 4;             // short stalk holding each berry\ncluster_radius = 25;       // max radius of berry cluster\nbase_h = 6;                // height of woody base\n$fn = 24;                  // global facet resolution\n\n// Main module\nmodule winterberry_cluster() {\n    union() {\n        // Woody base\n        woody_base();\n\n        // Central stem\n        translate([0, 0, base_h])\n            cylinder(d = stem_d, h = 30, center = false);\n\n        // Berry whorls along the stem\n        for (i = [1:3]) {\n            translate([0, 0, base_h + i * 6])\n                berry_whorl(r = cluster_radius - i * 5, count = 5 + 2 * i, z_rot = i * 30);\n        }\n\n        // Top berry\n        translate([0, 0, base_h + 30 + pedicel_l])\n            pedicel_and_berry();\n    }\n}\n\n// Berry with internal hollow and pedicel\nmodule pedicel_and_berry() {\n    union() {\n        // Pedicel\n        cylinder(d = branch_d, h = pedicel_l, center = false);\n\n        // Berry shell\n        translate([0, 0, pedicel_l])\n            difference() {\n                sphere(d = berry_d);\n                translate([0, 0, berry_wall])\n                    sphere(d = berry_d - 2 * berry_wall);\n            }\n    }\n}\n\n// Whorl of berries around stem\nmodule berry_whorl(r, count, z_rot = 0) {\n    for (i = [0 : count - 1]) {\n        angle = 360 / count * i + z_rot;\n        translate([r * cos(angle), r * sin(angle), 0])\n            rotate([90, 0, angle])\n                pedicel_and_berry();\n    }\n}\n\n// Woody base with slight taper\nmodule woody_base() {\n    difference() {\n        cylinder(d1 = 12, d2 = 8, h = base_h, center = false);\n\n        // Small cavity on bottom to reduce material\n        translate([0, 0, -0.01])\n            cylinder(d = 6, h = base_h / 2 + 0.02, center = false);\n    }\n}\n\n// Render\nwinterberry_cluster();",
    "renders": true
  },
  {
    "fruit": "chokeberry",
    "openscad_code": "// Chokeberry (medium-complexity realistic)\n// Approx 60 mm tall, 35 mm wide; printable without supports\n\n// Main parameters\nberry_d = 12;        // single berry diameter (mm)\nberry_count = 9;     // berries in cluster\nstem_d = 3;          // stem thickness\ncalyx_d = 4;         // calyx disk on top of berry\nwall = 1.2;          // printable wall thickness\n\nmodule berry(d) {\n    // Basic berry body\n    difference() {\n        sphere(d = d);\n        // Flatten bottom slightly for printing\n        translate([0, 0, -d/2])\n            cube([d*2, d*2, d/4], center = true);\n    }\n    \n    // Top calyx disk (slightly inset)\n    translate([0, 0, d/2 - 0.3])\n        cylinder(d1 = calyx_d, d2 = calyx_d*0.8, h = 1);\n    \n    // Light surface bumps for texture\n    for (i = [0:30]) {\n        rotate([rand(0, 360), rand(0, 360), 0])\n            translate([rand(0, d/2 - 1), 0, 0])\n                sphere(d = 0.6);\n    }\n}\n\nmodule stem() {\n    // Central support stem\n    cylinder(d = stem_d, h = 40);\n    \n    // Branching stems (3 levels)\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([0, 0, 35])\n                rotate([45, 0, 0])\n                    cylinder(d = stem_d * 0.7, h = 15);\n        \n        for (b = [0:90:270]) {\n            rotate([0, 0, a + b])\n                translate([0, 0, 25])\n                    rotate([30, 0, 0])\n                        cylinder(d = stem_d * 0.5, h = 12);\n        }\n    }\n}\n\n// Build cluster\nunion() {\n    stem();\n    \n    // Berries attached to branch ends\n    // Level 1 (top)\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([0, 0, 48])\n                rotate([45, 0, 0])\n                    translate([0, 0, 15])\n                        berry(berry_d);\n    }\n    \n    // Level 2 (middle ring)\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([0, 0, 35])\n                rotate([30, 0, 0])\n                    translate([0, 0, 12])\n                        berry(berry_d * 0.85);\n    }\n    \n    // Level 3 (bottom ring)\n    for (a = [0:60:300]) {\n        rotate([0, 0, a])\n            translate([0, 0, 22])\n                rotate([20, 0, 0])\n                    translate([0, 0, 10])\n                        berry(berry_d * 0.9);\n    }\n    \n    // Center berry\n    translate([0, 0, 15])\n        berry(berry_d * 1.05);\n}",
    "renders": true
  },
  {
    "fruit": "chokecherry",
    "openscad_code": "// Chokecherry (Prunus virginiana) – medium–complexity realistic style\n// 3D-printable, ~70 mm overall height, no overhangs >45°\n\n$fn = 32;                       // global circle quality\nwall = 1.2;                     // shell thickness for printing\n\nmodule berry(d = 8, h = 10) {  // single chokecherry\n    // main fruit body – slightly flattened sphere\n    translate([0, 0, h/2])\n        scale([1, 1, 0.8])\n        sphere(d = d);\n    // recessed stem scar on top\n    translate([0, 0, h - 0.4])\n        cylinder(d1 = d/2.5, d2 = d/3, h = 0.6, $fn = 12);\n}\n\nmodule fruit_cluster() {\n    // central berry\n    berry();\n    // ring of 6 berries at 60°, slightly smaller\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([8, 0, 0])\n                berry(d = 7, h = 9);\n    }\n}\n\nmodule leaf(l = 30, w = 15, t = wall) {\n    // simple elliptical leaf\n    linear_extrude(height = t, scale = 0.9, twist = 5)\n        scale([1, 0.55])\n        circle(d = l);\n\n    // center vein (raised)\n    translate([0, -l/2, t])\n        cube([l/20, l, t/2], center = true);\n}\n\nmodule petiole(len = 15) {\n    // leaf stem\n    cylinder(h = len, d1 = 2, d2 = 1.5);\n}\n\nmodule twig(len = 25) {\n    // woody twig, tapered\n    cylinder(h = len, d1 = 3.5, d2 = 2);\n}\n\nmodule chokecherry_branch() {\n    // upright twig\n    twig(25);\n\n    // attach fruit cluster\n    translate([0, 0, 25])\n        rotate([20, 0, 0])\n        fruit_cluster();\n\n    // two leaves opposite each other\n    rotate([0, 0, 120])\n        translate([0, 0, 20])\n        rotate([30, 0, 0])\n        petiole(10);\n\n    rotate([0, 0, 120])\n        translate([0, -10, 20])\n        rotate([30, 0, 0])\n        leaf();\n\n    rotate([0, 0, -60])\n        translate([0, 0, 15])\n        rotate([-40, 0, 0])\n        petiole(12);\n\n    rotate([0, 0, -60])\n        translate([0, -10, 15])\n        rotate([-40, 0, 0])\n        leaf();\n}\n\n// final model, centered for printing\nrotate([0, 180, 0])\n    translate([0, 0, 0])\n    chokecherry_branch();",
    "renders": true
  },
  {
    "fruit": "pincherry",
    "openscad_code": "// Pincherry (Prunus pensylvanica) – realistic, medium complexity, 3D-printable\n// Overall height ≈ 65 mm, berry diameter ≈ 12 mm\n\n// Wall thickness for printing\n$fn = 32;\nwall = 1.2;\n\n// Main model\nunion() {\n    // Stem\n    stem();\n\n    // Cluster of cherries\n    translate([0,0,18])\n        cherry_cluster();\n}\n\n// ---------- Modules ----------\n\nmodule stem() {\n    // Main stem\n    cylinder(h = 60, d = 4, center = false);\n\n    // Small side twigs\n    for(i = [0:1:3]) {\n        rotate([0,0,i*90 + 45])\n            translate([0,0,15 + i*10])\n                rotate([30,0,0])\n                    cylinder(h = 12, d1 = 2.5, d2 = 1.5);\n    }\n\n    // Leaf pair\n    translate([0,0,30])\n        rotate([0,0,rands(-30,30,1)[0]])\n            leaf_pair();\n}\n\nmodule leaf_pair() {\n    // Petiole\n    cylinder(h = 6, d = 1.6);\n\n    // Two leaves mirrored\n    mirror([1,0,0])\n        translate([0,3,3])\n            rotate([90,0,0])\n                leaf();\n}\n\nmodule leaf() {\n    // Elliptical leaf blade\n    linear_extrude(height = wall)\n        scale([1,1.7,1])\n            circle(d = 18);\n\n    // Central vein\n    translate([0,-9,wall/2])\n        cube([0.6,18,wall*1.2], center = true);\n}\n\nmodule cherry_cluster() {\n    // 7 berries in a compact raceme\n    for(i = [0:1:6]) {\n        // Evenly spaced on a 120° arc\n        angle = i * 30 - 90;\n        radius = 8 + (i%2)*2;\n        translate([radius*cos(angle), radius*sin(angle), 0])\n            cherry();\n    }\n}\n\nmodule cherry() {\n    // Berry body\n    sphere(d = 12);\n\n    // Small calyx scar on top\n    translate([0,0,6])\n        cylinder(h = 2, d1 = 3, d2 = 2);\n\n    // Subtle seam\n    translate([0,-6,0])\n        cube([0.5,12,12], center = true);\n}\n\n// End",
    "renders": true
  },
  {
    "fruit": "sandcherry",
    "openscad_code": "// Sandcherry (Prunus pumila) – medium-complexity realistic model\n// Overall bounding box ≈ 45 × 45 × 65 mm\n\n$fn = 36;\n\n// Base stem\nmodule base_stem() {\n    translate([0, 0, 10]) {\n        cylinder(h = 35, d1 = 5, d2 = 3, center = false);\n    }\n}\n\n// Main fruit body\nmodule cherry_body() {\n    // Slightly compressed sphere for realistic shape\n    scale([1.1, 1.1, 0.9])\n        sphere(d = 20);\n}\n\n// Suture line (subtle groove)\nmodule suture() {\n    translate([0, -10.5, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 21, d = 1.5, center = true);\n}\n\n// Calyx remnants at top\nmodule calyx_lobes() {\n    for (a = [0:60:300]) {\n        rotate([0, 0, a])\n            translate([0, 7, 9.3])\n                scale([0.4, 0.8, 1])\n                    rotate([0, 30, 0])\n                        cylinder(h = 3, d1 = 3, d2 = 1, center = false);\n    }\n}\n\n// Petiole (fruit stem)\nmodule petiole() {\n    translate([0, 0, 9])\n        rotate([20, 0, 0])\n            cylinder(h = 15, d1 = 2.2, d2 = 1.5, center = false);\n}\n\n// Small lenticel dots\nmodule lenticels() {\n    for (i = [1:15]) {\n        r = 11 * sqrt(rands(0.3, 1, 1)[0]);\n        ang = rands(0, 360, 1)[0];\n        translate([r * cos(ang), r * sin(ang), 10 * sin(ang / 7) - 1])\n            sphere(d = 0.8);\n    }\n}\n\n// Leaf\nmodule leaf() {\n    translate([-12, 0, 20])\n        rotate([0, -20, 30])\n            linear_extrude(height = 0.8, scale = 1.02) {\n                // Simple elliptical leaf shape\n                rotate([0, 0, 90])\n                    scale([0.4, 1])\n                        circle(d = 25);\n                // Leaf tip\n                translate([0, 12.5, 0])\n                    circle(d = 3);\n            }\n}\n\n// Veins\nmodule veins() {\n    for (a = [-30, -15, 0, 15, 30]) {\n        rotate([0, 0, a])\n            translate([-5, 0, 20.9])\n                rotate([0, -20, 30])\n                    scale([0.4, 1])\n                        rotate([0, 0, 90])\n                            translate([0, 5, 0])\n                                cube([0.6, 10, 0.4], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Cherry\n    difference() {\n        union() {\n            cherry_body();\n            lenticels();\n        }\n        suture();\n    }\n\n    // Stem structures\n    union() {\n        petiole();\n        calyx_lobes();\n    }\n\n    // Optional base stem for display\n    // base_stem();\n\n    // Optional leaf\n    // leaf();\n    // veins();\n}",
    "renders": true
  },
  {
    "fruit": "nankingcherry",
    "openscad_code": "// Nanking Cherry (Prunus tomentosa) - Realistic style, medium complexity\n\n// Overall dimensions (mm)\ncherry_diameter = 12;\nstem_length = 25;\nstem_diameter = 3;\ncalyx_size = 4;\nfruit_count = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main cherry fruit module\nmodule cherry(diameter, stem_offset=0) {\n    // Main fruit body - slightly flattened sphere\n    translate([0, 0, -diameter/10])\n    scale([1, 1, 0.9])\n    sphere(d=diameter, $fn=48);\n    \n    // Small indentation at top where stem connects\n    translate([0, 0, diameter/2])\n    rotate([0, 180, 0])\n    cylinder(h=diameter/10, d1=diameter/4, d2=0, $fn=16);\n    \n    // Subtle vertical ridges for realism\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([diameter/2 - wall_thickness, 0, 0])\n        scale([1, 0.1, 0.95])\n        sphere(d=diameter/8, $fn=8);\n    }\n}\n\n// Calyx (the green leafy part at top)\nmodule calyx() {\n    // Base ring\n    cylinder(h=1, d=calyx_size*2, $fn=32);\n    \n    // Five calyx lobes\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([calyx_size*0.7, 0, 0])\n        rotate([30, 0, 0])\n        scale([0.8, 0.3, 1])\n        sphere(d=calyx_size/2, $fn=16);\n    }\n}\n\n// Stem with realistic taper\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_length, d1=stem_diameter, d2=stem_diameter*0.7, $fn=16);\n    \n    // Small leaf near top\n    translate([0, stem_diameter, stem_length*0.3])\n    rotate([0, 90, 0])\n    scale([1, 0.2, 0.5])\n    sphere(d=stem_diameter*2.5, $fn=16);\n}\n\n// Cluster of cherries on a branch\nmodule cherry_cluster() {\n    // Main branch\n    rotate([90, 0, 0])\n    cylinder(h=30, d1=5, d2=3, $fn=16);\n    \n    // Individual cherries\n    for(i=[0:fruit_count-1]) {\n        angle = i*60;\n        height = (i%2)*15;\n        translate([sin(angle)*20, cos(angle)*20, height])\n        rotate([0, 0, angle+90])\n        union() {\n            // Cherry\n            cherry(cherry_diameter);\n            \n            // Calyx on top\n            translate([0, 0, cherry_diameter/2])\n            calyx();\n            \n            // Stem\n            translate([0, 0, cherry_diameter/2 + 2])\n            stem();\n        }\n    }\n}\n\n// Generate the complete model centered\ntranslate([0, 0, 15])\nrotate([0, 0, 30])\ncherry_cluster();",
    "renders": true
  },
  {
    "fruit": "corneliancherry",
    "openscad_code": "// Cornelian Cherry (Cornus mas) - Realistic Medium Complexity\n// Dimensions: ~60mm tall cherry cluster\n\n// Main parameters\ncherry_radius = 6;\nstem_thickness = 1.5;\nstem_length = 25;\nfruit_spacing = 14;\ncluster_count = 3;\n\n// Module for single cherry\nmodule cherry(radius, stem_len) {\n    // Cherry body\n    difference() {\n        sphere(r = radius);\n        \n        // Small indent at stem attachment\n        translate([0, 0, radius * 0.9])\n            cylinder(h = radius * 0.3, r1 = radius * 0.3, r2 = radius * 0.4, $fn = 16);\n    }\n    \n    // Stem\n    translate([0, 0, radius])\n        rotate([0, 10, 0])\n            cylinder(h = stem_len, r = stem_thickness, $fn = 8);\n}\n\n// Module for cherry cluster\nmodule cherry_cluster(count, spacing) {\n    for(i = [0:count-1]) {\n        angle = i * 120;\n        radius_offset = spacing * 0.6;\n        \n        translate([\n            cos(angle) * radius_offset,\n            sin(angle) * radius_offset,\n            0\n        ]) {\n            // Main cherry\n            cherry(cherry_radius, stem_length);\n            \n            // Secondary smaller cherry\n            translate([3, 2, -2])\n                scale([0.7, 0.7, 0.7])\n                    cherry(cherry_radius * 0.8, stem_length * 0.8);\n        }\n    }\n}\n\n// Main branch with leaves\nmodule branch_with_leaves() {\n    // Main branch\n    translate([-5, 0, 0])\n        rotate([0, 0, -15])\n            cylinder(h = 40, r1 = 3, r2 = 2, $fn = 12);\n    \n    // Side branches\n    for(i = [0:2]) {\n        translate([i * 8 - 5, 0, 15])\n            rotate([0, 0, i * 30 - 30])\n                cylinder(h = 20, r1 = 2, r2 = 1, $fn = 8);\n    }\n    \n    // Leaves (elliptical)\n    for(i = [0:5]) {\n        translate([\n            sin(i * 60) * 15,\n            cos(i * 60) * 15,\n            20 + i * 2\n        ]) {\n            rotate([0, 0, i * 60])\n                rotate([90, 0, 0])\n                    scale([1, 2.5, 0.5])\n                        cylinder(h = 8, r = 3, $fn = 16);\n        }\n    }\n}\n\n// Assemble the model\nunion() {\n    // Cherry clusters\n    translate([0, 0, 0])\n        cherry_cluster(cluster_count, fruit_spacing);\n    \n    // Branch structure\n    translate([0, 0, -5])\n        branch_with_leaves();\n}\n\n// Base for printing stability\ntranslate([0, 0, -10])\n    cylinder(h = 2, r = 25, $fn = 32);",
    "renders": true
  },
  {
    "fruit": "jujube",
    "openscad_code": "// Realistic 3D printable jujube (Chinese red date)\n// Overall size ~60 mm\n$fn = 64;\n\n// Main body of the jujube\nmodule jujube_body() {\n    // Main ellipsoid body\n    scale([1.2, 1, 1]) sphere(d = 45);\n    \n    // Add slight bottom flattening to ensure printability\n    difference() {\n        scale([1.2, 1, 1]) sphere(d = 45);\n        translate([0, 0, -23])\n            cube([50, 50, 5], center = true);\n    }\n}\n\n// Surface wrinkle pattern\nmodule wrinkles() {\n    // Longitudinal wrinkles\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([18, 0, 0])\n                scale([0.2, 0.5, 1])\n                    rotate([0, 90, 0])\n                        cylinder(h = 40, d = 3, center = true);\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    translate([0, 0, 23])\n        cylinder(h = 4, d1 = 6, d2 = 4);\n}\n\n// Small stem\nmodule stem() {\n    translate([0, 0, 27])\n        rotate([0, 0, 5])\n            cylinder(h = 8, d = 3);\n}\n\n// Calyx (bottom flower remnant)\nmodule calyx() {\n    translate([0, 0, -23])\n        cylinder(h = 2, d = 8);\n    \n    // 5 calyx lobes\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([4, 0, -23])\n                scale([0.5, 1, 0.3])\n                    sphere(d = 6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body\n    jujube_body();\n    \n    // Surface details\n    difference() {\n        union() {\n            wrinkles();\n            stem_base();\n            calyx();\n        }\n        \n        // Smooth out wrinkles slightly for printability\n        scale([1.05, 1.05, 1.05])\n            jujube_body();\n    }\n    \n    // Stem\n    stem();\n}",
    "renders": true
  },
  {
    "fruit": "persimmon",
    "openscad_code": "// Persimmon Model - Realistic Style, Medium Complexity\n// Overall size: ~70mm height\n\n$fn = 36; // Smooth curves for printing\n\n// Main fruit body - slightly flattened sphere\nmodule persimmon_body() {\n    difference() {\n        // Main shape - scaled sphere for realistic persimmon form\n        scale([1.1, 1.1, 0.85])\n            sphere(d = 60);\n        \n        // Indentation at bottom\n        translate([0, 0, -25])\n            cylinder(h = 15, r1 = 12, r2 = 8);\n    }\n}\n\n// Four-lobed calyx at top\nmodule calyx() {\n    // Central base\n    cylinder(h = 8, r = 8);\n    \n    // Four lobes rotated around center\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([5, 0, 0])\n                scale([1.2, 0.6, 0.8])\n                    rotate([0, 30, 0])\n                        sphere(d = 10);\n    }\n}\n\n// Stem emerging from calyx\nmodule stem() {\n    // Main stem\n    translate([0, 0, 8])\n        cylinder(h = 15, r1 = 3, r2 = 2);\n    \n    // Small bulge at base\n    translate([0, 0, 8])\n        sphere(d = 6);\n}\n\n// Surface texture - subtle bumps for realistic skin\nmodule skin_texture() {\n    // Random small bumps across surface\n    for (i = [1:8]) {\n        for (j = [0:35]) {\n            rotate([0, i * 20, j * 10])\n                translate([30, 0, -20 + i * 5])\n                    sphere(d = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main fruit\n    persimmon_body();\n    \n    // Calyx at top center\n    translate([0, 0, 25])\n        calyx();\n    \n    // Stem on calyx\n    translate([0, 0, 25])\n        stem();\n    \n    // Skin texture\n    skin_texture();\n}\n\n// Flatten bottom for stable printing\ntranslate([0, 0, -25])\n    cylinder(h = 1, r = 30);",
    "renders": true
  },
  {
    "fruit": "quince",
    "openscad_code": "// Quince - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\n$fn = 36;  // Smooth curves for printing\n\n// Main parameters\nquince_diameter = 60;\nquince_height = 65;\nstem_length = 15;\nstem_diameter = 6;\ncalyx_depth = 8;\n\n// Main body - slightly asymmetrical pear shape\nmodule quince_body() {\n    // Base bulbous part\n    translate([0, 0, -5])\n    scale([1, 1.1, 1.2])\n    sphere(d = quince_diameter);\n    \n    // Upper tapering part\n    translate([0, 0, 20])\n    scale([0.8, 0.9, 0.9])\n    sphere(d = quince_diameter * 0.9);\n    \n    // Slight asymmetry for realism\n    translate([3, -2, 10])\n    scale([1.05, 0.95, 1])\n    sphere(d = quince_diameter * 0.3);\n}\n\n// Stem with slight curve and texture\nmodule stem() {\n    // Main stem\n    translate([0, 0, quince_height/2])\n    rotate([5, 0, 10])\n    cylinder(h = stem_length, d1 = stem_diameter, d2 = stem_diameter * 0.7);\n    \n    // Stem texture rings\n    for(i = [1:3]) {\n        translate([0, 0, quince_height/2 + i*4])\n        rotate([5, 0, 10])\n        cylinder(h = 1, d = stem_diameter + 1);\n    }\n}\n\n// Calyx (bottom indentation)\nmodule calyx() {\n    difference() {\n        // Base shape\n        sphere(d = quince_diameter);\n        \n        // Central cavity\n        translate([0, 0, -quince_diameter/2])\n        cylinder(h = calyx_depth, d = quince_diameter * 0.3);\n        \n        // Five calyx lobes\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            translate([quince_diameter * 0.2, 0, -quince_diameter/2])\n            rotate([90, 0, 0])\n            cylinder(h = calyx_depth * 1.5, d1 = quince_diameter * 0.15, d2 = 0);\n        }\n    }\n}\n\n// Surface texture - subtle bumps\nmodule surface_texture() {\n    // Random small bumps across surface\n    for(i = [0:15]) {\n        angle = i * 137.5;  // Golden angle for distribution\n        h = i * 4 - 30;\n        r = quince_diameter/2 * 0.9 + sin(i*3) * 3;\n        \n        rotate([0, 0, angle])\n        translate([r * cos(h/10), r * sin(h/10), h])\n        sphere(d = 2);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main quince body\n    quince_body();\n    \n    // Stem\n    stem();\n    \n    // Calyx at bottom\n    translate([0, 0, -quince_height/2 - 5])\n    scale([1, 1, 0.8])\n    calyx();\n    \n    // Surface texture\n    surface_texture();\n}\n\n// Hollow interior for printing\ndifference() {\n    children();\n    \n    // Hollow cavity\n    scale([0.8, 0.8, 0.8])\n    translate([0, 0, 5])\n    quince_body();\n}",
    "renders": true
  },
  {
    "fruit": "medlar",
    "openscad_code": "// Medlar fruit (Mespilus germanica)\n// Realistic style, medium complexity, 3D printable\n\n$fn = 36;\n\nmodule medlar_fruit() {\n    // Main body - slightly flattened sphere with narrowing bottom\n    translate([0, 0, 25]) \n    scale([1.2, 1, 0.8])\n    sphere(d = 50);\n    \n    // Crown region - flattened top with calyx remnants\n    difference() {\n        translate([0, 0, 45])\n        scale([1.1, 1.1, 0.3])\n        sphere(d = 50);\n        \n        // Calyx cavity\n        translate([0, 0, 45])\n        cylinder(h = 8, d1 = 20, d2 = 15, $fn = 8);\n    }\n    \n    // Calyx leaves (5 sepals)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 18, 42])\n        rotate([20, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h = 12, d1 = 8, d2 = 5);\n    }\n    \n    // Vertical ridges on surface\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 24, 15])\n        scale([1, 0.2, 1])\n        cylinder(h = 30, d = 3);\n    }\n    \n    // Bottom nipple\n    translate([0, 0, 2])\n    cylinder(h = 5, d1 = 8, d2 = 6);\n    \n    // Small stem remnant\n    translate([0, 12, 45])\n    rotate([30, 0, 0])\n    cylinder(h = 8, d1 = 3, d2 = 2);\n    \n    // Surface texture - small bumps\n    for (i = [0:15]) {\n        angle = i * 137.5;\n        radius = 20 + sin(i * 2) * 5;\n        height = 25 + cos(i * 3) * 10;\n        translate([cos(angle) * radius, sin(angle) * radius, height])\n        sphere(d = 2 + sin(i) * 1);\n    }\n}\n\n// Create the medlar centered on build plate\nmedlar_fruit();",
    "renders": true
  },
  {
    "fruit": "loquat",
    "openscad_code": "// Loquat (Eriobotrya japonica) – medium-complexity realistic model\n// Overall height ≈ 55 mm\n\n$fn = 32;\n\n// Main body module\nmodule loquat_body() {\n    // Core ellipsoid\n    translate([0, 0, 20])\n        scale([1, 1.2, 0.9])\n        sphere(d = 35);\n\n    // Flesh bulge at bottom\n    translate([0, 0, 5])\n        scale([0.9, 1.0, 0.6])\n        sphere(d = 32);\n\n    // Small indent at stylar end\n    difference() {\n        sphere(d = 35);\n        translate([0, 0, 30])\n            cylinder(h = 5, r = 3, $fn = 16);\n    }\n}\n\n// Crown (persistent calyx lobes)\nmodule crown() {\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 11, 40])\n                rotate([70, 0, 0])\n                    scale([1, 0.7, 0.2])\n                        cylinder(h = 12, r = 4, center = true);\n    }\n}\n\n// Skin texture – subtle bumps\nmodule skin_bumps() {\n    for (theta = [0:30:359]) {\n        for (phi = [30:30:150]) {\n            rotate([0, 0, theta])\n                rotate([0, phi, 0])\n                    translate([17.5, 0, 0])\n                        sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Stem stub\nmodule stem_stub() {\n    translate([0, 0, 42])\n        rotate([0, 0, 20])\n            cylinder(h = 8, r1 = 2.5, r2 = 1.8);\n}\n\n// Small lenticel spots\nmodule lenticels() {\n    spots = [\n        [ 7,  8, 28],\n        [-9,  5, 24],\n        [ 5, -6, 30],\n        [-6, -7, 26],\n        [ 0,  9, 22],\n        [ 8,  0, 25]\n    ];\n    for (p = spots) {\n        translate(p)\n            sphere(d = 1.2, $fn = 8);\n    }\n}\n\n// Assemble fruit\nunion() {\n    loquat_body();\n    crown();\n    skin_bumps();\n    lenticels();\n    stem_stub();\n}",
    "renders": true
  },
  {
    "fruit": "kumquat",
    "openscad_code": "// Realistic Kumquat - Medium Complexity\n// Size: ~65mm diameter\n\n$fn = 32;\nfruit_diameter = 35;\nstem_length = 8;\nstem_diameter = 4;\n\nmodule kumquat_body() {\n    // Main fruit body with slight oval shape\n    difference() {\n        scale([1.1, 1, 1.05])\n            sphere(d = fruit_diameter);\n        \n        // Indentation at stem end\n        translate([0, 0, fruit_diameter/2 - 2])\n            cylinder(h = 5, d1 = stem_diameter + 4, d2 = stem_diameter, $fn = 16);\n        \n        // Bottom indentation\n        translate([0, 0, -fruit_diameter/2 + 1])\n            sphere(d = 8);\n    }\n}\n\nmodule stem() {\n    // Main stem\n    translate([0, 0, fruit_diameter/2 - 1])\n        cylinder(h = stem_length, d = stem_diameter, $fn = 8);\n    \n    // Stem collar\n    translate([0, 0, fruit_diameter/2 - 3])\n        cylinder(h = 3, d1 = stem_diameter + 3, d2 = stem_diameter, $fn = 8);\n}\n\nmodule leaf() {\n    // Single leaf with realistic shape\n    translate([0, fruit_diameter/2 + 3, fruit_diameter/2])\n    rotate([90, 0, 0])\n    scale([1, 0.4, 1])\n    difference() {\n        sphere(d = 12);\n        \n        // Leaf tip\n        translate([5, 0, 0])\n            rotate([0, 0, 30])\n            cube([8, 6, 6], center = true);\n        \n        // Leaf base\n        translate([-6, 0, 0])\n            sphere(d = 8);\n    }\n}\n\nmodule fruit_texture() {\n    // Surface bumps for realistic texture\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([fruit_diameter/2 - 2, 0, sin(i * 2) * 3])\n        sphere(d = 1.5 + sin(i) * 0.5);\n    }\n    \n    // Additional small bumps\n    for(i = [0:8]) {\n        rotate([i * 45, 0, i * 20])\n        translate([fruit_diameter/2 - 1.5, 0, cos(i * 3) * 2])\n        sphere(d = 0.8);\n    }\n}\n\nmodule calyx() {\n    // Star-shaped calyx at stem end\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([stem_diameter/2 + 1, 0, fruit_diameter/2])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 0.3])\n        cylinder(h = 3, d1 = 2, d2 = 0.5);\n    }\n}\n\n// Assemble the kumquat\nunion() {\n    // Main fruit\n    difference() {\n        kumquat_body();\n        // Hollow center for printing\n        scale([0.85, 0.85, 0.85])\n            sphere(d = fruit_diameter);\n    }\n    \n    // Stem and attachments\n    union() {\n        stem();\n        leaf();\n        calyx();\n    }\n    \n    // Surface texture\n    intersection() {\n        kumquat_body();\n        fruit_texture();\n    }\n}\n\n// Print orientation - flat on base\nrotate([180, 0, 0])\ntranslate([0, 0, -fruit_diameter/2])",
    "renders": true
  },
  {
    "fruit": "mandarin",
    "openscad_code": "// Mandarin orange (realistic style, medium complexity)\n\n$fn = 36; // Smooth curves\n\n// Main parameters\nmandarin_d = 55; // Overall diameter\nmandarin_h = 50;\npeel_thickness = 2.5;\nstem_d = 4;\nstem_h = 8;\nleaf_l = 25;\nleaf_w = 12;\n\n// Mandarin body with segments\nmodule mandarin_body() {\n    difference() {\n        // Outer peel\n        sphere(d = mandarin_d);\n        \n        // Hollow inside\n        translate([0, 0, peel_thickness])\n            sphere(d = mandarin_d - 2*peel_thickness);\n        \n        // Segment grooves\n        for (i = [0:9]) {\n            rotate([0, 0, i*36])\n                translate([0, 0, -peel_thickness/2])\n                    cube([peel_thickness*0.8, mandarin_d/2, peel_thickness*2], center=true);\n        }\n    }\n}\n\n// Textured peel surface\nmodule peel_texture() {\n    difference() {\n        mandarin_body();\n        \n        // Small dimples\n        for (i = [0:15]) {\n            rotate([0, 0, i*24 + 12])\n                for (j = [1:3]) {\n                    translate([0, mandarin_d/2 - j*8 - 5, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=1.5, d1=2.5, d2=1.5, $fn=8);\n                }\n        }\n    }\n}\n\n// Stem at top\nmodule stem() {\n    translate([0, 0, mandarin_h/2])\n        cylinder(h=stem_h, d=stem_d);\n    \n    // Stem base flare\n    translate([0, 0, mandarin_h/2])\n        cylinder(h=3, d1=stem_d*1.8, d2=stem_d);\n}\n\n// Small leaf\nmodule leaf() {\n    translate([stem_d/2, 0, mandarin_h/2 + stem_h])\n        rotate([0, 110, 0])\n            scale([1, 0.5, 0.1])\n                sphere(d=leaf_l);\n    \n    // Leaf midrib\n    translate([stem_d/2, 0, mandarin_h/2 + stem_h])\n        rotate([0, 110, 0])\n            scale([1, 0.1, 0.02])\n                cylinder(h=leaf_l*0.9, d=leaf_w/3);\n}\n\n// Create complete mandarin\nunion() {\n    peel_texture();\n    stem();\n    leaf();\n}",
    "renders": true
  },
  {
    "fruit": "tangerine",
    "openscad_code": "// Tangerine - Realistic Medium Complexity\n// Size: ~60mm diameter, 3D printable with no overhangs\n\n$fn = 48;\nwall_thickness = 1.2;\n\n// Main tangerine body\nmodule tangerine_body() {\n    difference() {\n        // Outer peel\n        sphere(d = 60);\n        \n        // Hollow interior\n        sphere(d = 60 - wall_thickness * 2);\n    }\n}\n\n// Peel texture segments\nmodule peel_segments() {\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36]) {\n            translate([0, 0, 30]) {\n                difference() {\n                    // Segment ridge\n                    cylinder(h = 2, r1 = 5, r2 = 6, center = true);\n                    \n                    // Taper the ends\n                    translate([0, 0, 1.5]) {\n                        cylinder(h = 2, r1 = 0, r2 = 4, center = true);\n                    }\n                    translate([0, 0, -1.5]) {\n                        cylinder(h = 2, r1 = 4, r2 = 0, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_base() {\n    difference() {\n        // Main stem protrusion\n        translate([0, 0, 30]) {\n            cylinder(h = 4, r1 = 4, r2 = 2, center = true);\n        }\n        \n        // Hollow center\n        translate([0, 0, 32]) {\n            cylinder(h = 4, r = 1.5, center = true);\n        }\n    }\n}\n\n// Porous peel texture\nmodule peel_pores() {\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24]) {\n            for (j = [0:3]) {\n                theta = j * 30 + 15;\n                phi = i * 24;\n                x = 30 * cos(theta) * cos(phi);\n                y = 30 * cos(theta) * sin(phi);\n                z = 30 * sin(theta);\n                \n                translate([x, y, z]) {\n                    rotate([0, 90 - theta, phi]) {\n                        difference() {\n                            sphere(d = 1.5);\n                            translate([0, 0, 0.8]) {\n                                sphere(d = 1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Minor indentations for realistic peel\nmodule peel_dimples() {\n    for (i = [0:20]) {\n        theta = rands(0, 180, 1)[0];\n        phi = rands(0, 360, 1)[0];\n        x = 30.5 * cos(theta) * cos(phi);\n        y = 30.5 * cos(theta) * sin(phi);\n        z = 30.5 * sin(theta);\n        \n        translate([x, y, z]) {\n            rotate([0, 90 - theta, phi]) {\n                difference() {\n                    sphere(d = 1);\n                    translate([0, 0, 0.5]) {\n                        sphere(d = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bottom navel\nmodule bottom_navel() {\n    difference() {\n        // Raised navel\n        translate([0, 0, -30]) {\n            cylinder(h = 2, r1 = 3, r2 = 4, center = true);\n        }\n        \n        // Center dimple\n        translate([0, 0, -29]) {\n            sphere(d = 4);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    tangerine_body();\n    peel_segments();\n    stem_base();\n    bottom_navel();\n    \n    // Add surface details\n    peel_pores();\n    peel_dimples();\n}",
    "renders": true
  },
  {
    "fruit": "clementine",
    "openscad_code": "// Clementine - Realistic style, medium complexity\n// Diameter ~60mm, 3D-printable\n\n// Main parameters\nclementine_d = 60;              // Outer diameter\npeel_thickness = 2;             // Peel thickness\nsegment_count = 10;             // Number of segments\nsurface_pits = 30;              // Small pits on peel\n\n// Stem parameters\nstem_d = 4;\nstem_h = 6;\nstem_taper = 0.7;\n\n// Leaf parameters\nleaf_l = 12;\nleaf_w = 6;\nleaf_t = 1.5;\n\n// Internal segments\nmodule segments() {\n    for(i = [0:segment_count-1]) {\n        rotate([0, 0, i*360/segment_count])\n        translate([0, 0, -peel_thickness/2])\n        difference() {\n            // Main segment wedge\n            intersection() {\n                sphere(d = clementine_d - peel_thickness*2);\n                rotate([0, 0, -180/segment_count])\n                cube([clementine_d, clementine_d, clementine_d], center=true);\n                rotate([0, 0, 180/segment_count])\n                cube([clementine_d, clementine_d, clementine_d], center=true);\n            }\n            \n            // Membrane between segments\n            for(j = [0:1]) {\n                rotate([0, 0, j*360/segment_count + 180/segment_count])\n                translate([0, 0, -clementine_d/2])\n                cube([0.5, clementine_d, clementine_d], center=true);\n            }\n        }\n    }\n}\n\n// Peel surface texture\nmodule peel_texture() {\n    difference() {\n        sphere(d = clementine_d);\n        \n        // Random pits for texture\n        for(i = [0:surface_pits-1]) {\n            rotate([rands(0, 180, 1)[0], rands(0, 360, 1)[0], 0])\n            translate([0, 0, clementine_d/2])\n            sphere(d = rands(2, 4, 1)[0]);\n        }\n        \n        // Segment lines on peel\n        for(i = [0:segment_count-1]) {\n            rotate([0, 0, i*360/segment_count])\n            translate([0, 0, -clementine_d/2])\n            cube([0.3, clementine_d, clementine_d], center=true);\n        }\n    }\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, clementine_d/2])\n    cylinder(h1 = stem_h, r1 = stem_d/2, r2 = stem_d/2 * stem_taper, $fn=8);\n}\n\n// Leaf module\nmodule leaf() {\n    translate([0, stem_d/2, clementine_d/2 + stem_h - 1])\n    rotate([110, 0, 30])\n    scale([1, 0.4, 1])\n    difference() {\n        sphere(d = leaf_l);\n        \n        // Leaf vein\n        translate([0, 0, -leaf_l/2])\n        cube([leaf_l, 0.5, leaf_l], center=true);\n        \n        // Cut in half\n        translate([0, 0, -leaf_l/2])\n        cube([leaf_l, leaf_l, leaf_l], center=true);\n    }\n}\n\n// Assemble the clementine\nunion() {\n    // Outer peel\n    peel_texture();\n    \n    // Internal segments\n    %segments();\n    \n    // Stem and leaf\n    stem();\n    leaf();\n}",
    "renders": true
  },
  {
    "fruit": "satsuma",
    "openscad_code": "// Satsuma (medium-realistic, 3D-printable)\n// 2024 OpenSCAD – 50 mm tall\n\n// Overall scale\nscale(1.5) {\n\n    // Main fruit body – slightly squashed sphere\n    translate([0,0,3])\n    scale([1,1,0.9])\n    sphere(d=34, $fn=64);\n\n    // Top indentation\n    translate([0,0,9])\n    scale([1,1,0.5])\n    sphere(d=7, $fn=32);\n\n    // Bottom indentation\n    translate([0,0,-9.5])\n    scale([1,1,0.5])\n    sphere(d=6, $fn=32);\n\n    // Peel thickness (hollow fruit)\n    difference() {\n        scale([1,1,0.9])\n        sphere(d=34, $fn=64);\n        scale([0.9,0.9,0.9])\n        sphere(d=32, $fn=64);\n    }\n\n    // Small segment bulges\n    for(i=[0:11]) {\n        rotate([0,0,i*30])\n        translate([16,0,0])\n        scale([0.8,0.5,1])\n        sphere(d=4, $fn=8);\n    }\n\n    // Leaf crown (3 leaves)\n    module leaf() {\n        rotate([0,0,120])\n        scale([0.5,1,0.1])\n        cylinder(h=12, d1=8, d2=3, $fn=2);\n    }\n    translate([0,0,16])\n    for(j=[0:2])\n        rotate([0,0,j*120])\n        leaf();\n\n    // Stem stub\n    translate([0,0,16])\n    cylinder(h=4, d=3, $fn=16);\n\n    // Tiny pedicel ring\n    translate([0,0,16.5])\n    cylinder(h=1, d=4, $fn=16);\n\n}",
    "renders": true
  },
  {
    "fruit": "yuzu",
    "openscad_code": "// Yuzu citrus fruit - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 64;  // Smooth curves for printing\nyuzu_radius = 25;  // Main fruit radius in mm\n\nmodule yuzu_body() {\n    difference() {\n        // Main spherical body with slight flattening\n        scale([1, 1, 0.9])\n        sphere(yuzu_radius);\n        \n        // Top indent for stem\n        translate([0, 0, yuzu_radius * 0.9])\n        rotate([90, 0, 0])\n        cylinder(h=5, r1=3, r2=0, $fn=16);\n    }\n}\n\nmodule yuzu_skin_texture() {\n    // Create bumpy surface texture\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        for(j = [0:3]) {\n            translate([\n                cos(j * 30) * yuzu_radius * 0.6,\n                sin(j * 30) * yuzu_radius * 0.6,\n                yuzu_radius * 0.7\n            ])\n            scale([1, 1, 0.5])\n            sphere(1.5);\n        }\n    }\n}\n\nmodule yuzu_segments() {\n    // Internal segments visible through thin skin\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, 0, -yuzu_radius * 0.3])\n        rotate([90, 0, 0])\n        cylinder(h=yuzu_radius * 1.6, r1=3, r2=8, $fn=6);\n    }\n}\n\nmodule yuzu_peel() {\n    // Thin outer peel layer\n    difference() {\n        scale([1.02, 1.02, 0.92])\n        sphere(yuzu_radius + 0.5);\n        \n        scale([0.98, 0.98, 0.88])\n        sphere(yuzu_radius - 0.5);\n    }\n}\n\nmodule yuzu_stem() {\n    // Small stem at top\n    translate([0, 0, yuzu_radius * 0.9])\n    cylinder(h=3, r=1, $fn=8);\n    \n    // Tiny leaf\n    translate([0, -1.5, yuzu_radius * 0.9 + 2])\n    rotate([0, 110, 0])\n    scale([0.3, 1.5, 0.1])\n    sphere(2);\n}\n\nmodule yuzu() {\n    union() {\n        // Main fruit assembly\n        union() {\n            yuzu_body();\n            yuzu_peel();\n            yuzu_skin_texture();\n        }\n        \n        // Stem and leaf\n        yuzu_stem();\n    }\n}\n\n// Create the yuzu\nyuzu();",
    "renders": true
  },
  {
    "fruit": "pomelo",
    "openscad_code": "// Pomelo OpenSCAD Model - Medium Complexity - Realistic Style\n// Overall dimensions: ~80mm diameter\n\n// Main parameters\npomelo_radius = 40;\npeel_thickness = 4;\nsegment_count = 12;\n\nmodule pomelo_peel() {\n    difference() {\n        // Outer peel\n        sphere(r = pomelo_radius, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            sphere(r = pomelo_radius - peel_thickness, $fn = 64);\n        \n        // Stem indent at top\n        translate([0, 0, pomelo_radius - 3])\n            cylinder(r1 = 6, r2 = 4, h = 5, $fn = 16);\n        \n        // Bottom indent\n        translate([0, 0, -(pomelo_radius - 2)])\n            cylinder(r1 = 4, r2 = 2, h = 3, $fn = 16);\n    }\n}\n\nmodule peel_texture() {\n    // Create dimpled texture on peel surface\n    for (i = [0:segment_count - 1]) {\n        rotate([0, 0, i * 30])\n            translate([pomelo_radius - 1, 0, 0])\n                rotate([90, 0, 0])\n                    scale([1, 1.2, 0.3])\n                        cylinder(r = 2, h = 2, $fn = 8);\n    }\n    \n    // Additional random dimples for realism\n    for (j = [0:20]) {\n        rotate([rand(j) * 180, rand(j + 5) * 360])\n            translate([pomelo_radius - 1, 0, 0])\n                rotate([90, 0, 0])\n                    scale([0.8 + rand(j) * 0.5, 1, 0.2])\n                        cylinder(r = 1.5, h = 1.5, $fn = 6);\n    }\n}\n\nmodule pomelo_segments() {\n    // Create inner fruit segments\n    color(\"lightyellow\") {\n        difference() {\n            sphere(r = pomelo_radius - peel_thickness - 2, $fn = 48);\n            \n            // Segment dividers\n            for (i = [0:segment_count - 1]) {\n                rotate([0, 0, i * 30])\n                    translate([0, 0, 0])\n                        cube([pomelo_radius * 2, 0.5, pomelo_radius * 2], center = true);\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Top stem\n    color(\"darkgreen\") {\n        translate([0, 0, pomelo_radius + 1])\n            cylinder(r = 2.5, h = 8, $fn = 12);\n        \n        // Stem leaves\n        rotate([0, 30, 0])\n            translate([0, 0, pomelo_radius + 5])\n                scale([1, 0.3, 1])\n                    cylinder(r = 4, h = 6, $fn = 6);\n        \n        rotate([0, -30, 180])\n            translate([0, 0, pomelo_radius + 5])\n                scale([1, 0.3, 1])\n                    cylinder(r = 4, h = 6, $fn = 6);\n    }\n}\n\n// Combine all parts\ndifference() {\n    union() {\n        // Main peel with texture\n        pomelo_peel();\n        \n        // Apply texture as indentations\n        peel_texture();\n    }\n    \n    // Remove texture from interior\n    scale([0.98, 0.98, 0.98])\n        sphere(r = pomelo_radius, $fn = 64);\n}\n\n// Add stem\nstem();\n\n// Optional: show inner segments (comment out for full fruit)\n// translate([0, 0, 0])\n//     pomelo_segments();",
    "renders": true
  },
  {
    "fruit": "kaffir",
    "openscad_code": "// Kaffir (Kaffir lime) in realistic style\n// Size ~60 mm tall, 3D-printable (no steep overhangs)\n\n$fn = 36;\n\nmodule leaf(l=40, w=20, t=1.6) {\n    difference() {\n        // Main leaf body\n        union() {\n            hull() {\n                translate([-l/2, -w/5, 0]) sphere(d=w/3);\n                translate([ l/2, -w/5, 0]) sphere(d=w/3);\n                translate([0, w/2, 0]) sphere(d=w/2);\n            }\n            hull() {\n                translate([-l/2, w/5, 0]) sphere(d=w/3);\n                translate([ l/2, w/5, 0]) sphere(d=w/3);\n                translate([0, -w/2, 0]) sphere(d=w/2);\n            }\n        }\n        // Central vein groove\n        translate([-l/2-1, 0, -t]) cube([l+2, t/3, t*2]);\n        // Side vein grooves\n        for (i=[-1:1]) {\n            rotate([0,0,i*15]) {\n                translate([-l/2-1, 0, -t]) cube([l+2, t/4, t*2]);\n            }\n        }\n    }\n}\n\nmodule fruit(r=18) {\n    difference() {\n        // Main sphere\n        sphere(r=r);\n        \n        // Bumpy surface\n        for (a=[0:30:150]) {\n            for (b=[0:30:330]) {\n                rotate([a, b, 0]) {\n                    translate([r-1.5, 0, 0])\n                        sphere(d=3);\n                }\n            }\n        }\n        \n        // Top neck\n        translate([0,0,r-3]) {\n            cylinder(h=3, r1=r/4, r2=0);\n        }\n    }\n}\n\nmodule stem(d=3, h=12) {\n    cylinder(h=h, d=d);\n}\n\n// Assemble the model\ntranslate([0,0,0]) {\n    // Fruit\n    fruit(r=18);\n    \n    // Stem on top\n    translate([0,0,18]) {\n        stem();\n    }\n}\n\n// Leaf attached to stem\ntranslate([0,-15,18+8]) {\n    rotate([90,0,45]) {\n        leaf();\n    }\n}\n\n// Second leaf\ntranslate([0,15,18+8]) {\n    rotate([90,0,-45])\n        mirror([0,1,0]) {\n            leaf();\n        }\n}",
    "renders": true
  },
  {
    "fruit": "citron",
    "openscad_code": "// Citron - medium complexity, realistic style\n// Overall size: ~70mm length, ~40mm width\n\n// Main citron body with slight oval shape\nmodule citron_body() {\n    // Base ellipsoid for main body\n    scale([1.2, 1, 0.9])\n        sphere(d = 40, $fn = 64);\n    \n    // Elongated tip with slight curve\n    translate([20, 0, 0])\n        rotate([0, 15, 0])\n        scale([1.5, 0.7, 0.6])\n        sphere(d = 20, $fn = 32);\n}\n\n// Create bumpy surface texture\nmodule bumpy_surface() {\n    difference() {\n        citron_body();\n        \n        // Random small dimples for realistic texture\n        for(i = [0:45]) {\n            rotate([rand(i*2)*360, rand(i*3)*360, rand(i*5)*360])\n            translate([rand(i*7)*35-17.5, rand(i*11)*35-17.5, rand(i*13)*35-17.5])\n            sphere(d = 1 + rand(i*17)*2, $fn = 8);\n        }\n    }\n}\n\n// Thick peel layer\nmodule peel() {\n    difference() {\n        scale([1.05, 1.05, 1.05]) \n            bumpy_surface();\n        bumpy_surface();\n    }\n}\n\n// Citron flesh (lighter color inside)\nmodule flesh() {\n    color(\"lightyellow\")\n    scale([0.95, 0.95, 0.95])\n    bumpy_surface();\n}\n\n// Central pith structure\nmodule pith() {\n    color(\"ivory\")\n    scale([0.6, 0.6, 0.6])\n    sphere(d = 30, $fn = 32);\n}\n\n// Segment dividers\nmodule segments() {\n    color(\"lightyellow\")\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 0, 0])\n        linear_extrude(height = 30, center = true)\n        polygon(points = [[0,0], [15,0], [15,2], [0,2]]);\n    }\n}\n\n// Generate random values for texture\nfunction rand(x) = (sin(x*12.9898 + 78.233)*43758.5453) % 1;\n\n// Main citron assembly\nunion() {\n    // Outer peel\n    color(\"darkolivegreen\") peel();\n    \n    // Inner flesh\n    flesh();\n    \n    // Central pith\n    translate([0, 0, -5]) pith();\n    \n    // Segments\n    segments();\n}\n\n// Small stem at top\ntranslate([0, 0, 20])\nrotate([0, 0, 0])\ncolor(\"saddlebrown\")\ncylinder(h = 5, d1 = 4, d2 = 2, $fn = 8);\n\n// Optional: Calyx leaves around stem\nfor(i = [0:4]) {\n    rotate([0, 0, i*72])\n    translate([2.5, 0, 22])\n    rotate([45, 0, 0])\n    color(\"darkgreen\")\n    scale([1, 0.5, 0.1])\n    sphere(d = 5, $fn = 16);\n}",
    "renders": true
  },
  {
    "fruit": "bergamot",
    "openscad_code": "// Bergamot - medium complexity realistic style\n// Approx 60mm diameter, printable without supports\n\n$fn=64;  // Smooth curves for realism\n\n// Main bergamot body - slightly flattened sphere\nmodule bergamot_body() {\n    scale([1, 0.9, 0.8])  // Slightly flattened\n    sphere(30);\n}\n\n// Characteristic bergamot bump at stem end\nmodule stem_bump() {\n    translate([0, 0, 24])\n    scale([0.6, 0.6, 0.4])\n    sphere(8);\n}\n\n// Stem attachment point\nmodule stem() {\n    difference() {\n        cylinder(h=8, r1=4, r2=2);\n        // Hollow for printability\n        translate([0, 0, -1])\n        cylinder(h=10, r1=3, r2=1);\n    }\n}\n\n// Bergamot characteristic segments (14 segments)\nmodule segments() {\n    for(i = [0:13]) {\n        rotate([0, 0, i * 360/14]) {\n            // Each segment is slightly raised\n            translate([0, 0, -25])\n            scale([1.02, 1.02, 0.1])\n            cylinder(h=50, r=30);\n        }\n    }\n}\n\n// Surface texture - small pores\nmodule pores() {\n    for(i = [0:30]) {\n        rotate([0, 0, i * 12])\n        for(j = [0:5]) {\n            translate([random(25), random(25), random(5, 25)])\n            sphere(0.5);\n        }\n    }\n}\n\n// Bergamot leaf - simple realistic shape\nmodule leaf() {\n    translate([25, 0, 20])\n    rotate([0, 30, 0])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0, 0],\n        [5, 8],\n        [15, 12],\n        [25, 10],\n        [30, 5],\n        [28, 0],\n        [30, -5],\n        [25, -10],\n        [15, -12],\n        [5, -8],\n        [0, 0]\n    ]);\n}\n\n// Main assembly\nunion() {\n    // Main body with segments\n    difference() {\n        union() {\n            bergamot_body();\n            stem_bump();\n        }\n        segments();\n    }\n    \n    // Stem\n    translate([0, 0, 24])\n    rotate([0, 0, 0])\n    stem();\n    \n    // Small leaf attached\n    leaf();\n}\n\n// Add subtle surface texture\ntranslate([0, 0, 0])\nscale(0.98)\npores();",
    "renders": true
  },
  {
    "fruit": "lime",
    "openscad_code": "// Realistic Lime - Medium complexity\n// 3D printable lime with peel texture, stem and sliced view\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Main module\nmodule lime() {\n    // Outer peel\n    difference() {\n        // Main body\n        union() {\n            // Main lime body - slightly squashed sphere\n            scale([1, 1, 0.85]) sphere(d = 50);\n            \n            // Stem base\n            translate([0, 0, 21.5]) cylinder(h = 5, d1 = 8, d2 = 5);\n        }\n        \n        // Indentation at stem end\n        translate([0, 0, 23]) cylinder(h = 8, d1 = 6, d2 = 8, $fn = 32);\n    }\n    \n    // Stem\n    translate([0, 0, 24]) rotate([0, 0, rand() * 360]) \n        cylinder(h = 12, d = 3, $fn = 8);\n    \n    // Peel texture - small bumps\n    for(i = [0:10:350]) {\n        for(j = [15:15:165]) {\n            rotate([0, 0, i]) \n                rotate([0, j, 0]) \n                    translate([0, 0, 25 * cos(j)]) \n                        sphere(d = 2, $fn = 8);\n        }\n    }\n}\n\n// Internal structure (optional - for sliced view)\nmodule lime_interior() {\n    // Pulp layers\n    difference() {\n        // Main pulp\n        scale([1, 1, 0.82]) sphere(d = 45);\n        \n        // Core\n        translate([0, 0, -8]) cylinder(h = 40, d = 8);\n        \n        // Segments (6 sections)\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, -8]) \n                    cube([40, 2, 40], center = true);\n            }\n        }\n    }\n    \n    // Juice vesicles\n    for(i = [0:30:359]) {\n        for(j = [0:8:35]) {\n            rotate([0, 0, i]) \n                translate([10 + j * 0.8, 0, -5 + j * 0.5]) \n                    sphere(d = 1.5, $fn = 6);\n        }\n    }\n}\n\n// Create complete lime\nunion() {\n    // Main lime\n    lime();\n    \n    // Optional: Add sliced half (uncomment to show interior)\n    // translate([60, 0, 0]) {\n    //     difference() {\n    //         lime();\n    //         translate([0, -25, 0]) cube([50, 50, 50]);\n    //     }\n    //     lime_interior();\n    // }\n}\n\n// Add small nub at bottom\ntranslate([0, 0, -21.5]) sphere(d = 3);",
    "renders": true
  },
  {
    "fruit": "lemon",
    "openscad_code": "// Realistic Lemon - Medium Complexity\n// ~70mm length, 3D-printable with 1.2mm wall thickness\n\nmodule lemon_body() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 1.2, 1.4]) sphere(d = 50, $fn = 64);\n\n        // Flatten bottom slightly for printing\n        translate([0, 0, -36])\n            cube([60, 60, 10], center = true);\n\n        // Create slight indent for stem\n        translate([0, 0, 34])\n            rotate([0, 180, 0])\n                cylinder(h = 8, d1 = 6, d2 = 12, $fn = 32);\n    }\n}\n\nmodule stem() {\n    // Stem structure\n    translate([0, 0, 36])\n        rotate([0, 180, 0])\n            cylinder(h = 8, d1 = 4, d2 = 6, $fn = 16);\n    \n    // Small leaf base\n    translate([4, 0, 40])\n        rotate([90, 0, 30])\n            scale([0.3, 1, 0.6])\n                cylinder(h = 12, d = 8, $fn = 8);\n}\n\nmodule lemon_texture() {\n    // Create dimple pattern using small spheres\n    for (i = [0:5:355]) {\n        rotate([0, 0, i])\n            for (j = [30:10:150]) {\n                rotate([0, j, 0])\n                    translate([0, 0, 22])\n                        sphere(d = 2.5, $fn = 12);\n            }\n    }\n}\n\nmodule end_bumps() {\n    // Top bumps around stem\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([8, 0, 32])\n                sphere(d = 4, $fn = 16);\n    }\n    \n    // Bottom nipple\n    translate([0, 0, -34])\n        sphere(d = 6, $fn = 32);\n}\n\n// Main assembly\nunion() {\n    // Core lemon body\n    difference() {\n        lemon_body();\n        \n        // Hollow out for 3D printing\n        scale([0.88, 0.88, 0.88]) {\n            translate([0, 0, -2])\n                scale([1, 1.2, 1.4]) sphere(d = 50, $fn = 64);\n        }\n    }\n    \n    // External features\n    stem();\n    end_bumps();\n    \n    // Surface texture (optional - comment out for smoother print)\n    difference() {\n        lemon_texture();\n        scale([0.88, 0.88, 0.88]) {\n            lemon_texture();\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "orange",
    "openscad_code": "// Realistic Orange - Medium Complexity\n// Approx 70mm diameter, 3D-printable\n\n// Main parameters\n$fn = 64;  // Smooth curves\norange_d = 70;\nstem_h = 8;\nstem_d = 6;\nsegments = 12;  // Number of orange segments\n\n// Colors for preview (ignored by slicer)\ncolor([1, 0.5, 0]) {\n\n// Main orange body\ndifference() {\n    sphere(d = orange_d);  // Core orange sphere\n    \n    // Create segment indentations\n    for(i = [0 : segments-1]) {\n        rotate([0, 0, i * 360/segments]) {\n            translate([0, orange_d/2 - 2, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = orange_d, d1 = 8, d2 = 4, center = true);\n                }\n            }\n        }\n    }\n    \n    // Top hole for stem\n    translate([0, 0, orange_d/2 - 1]) {\n        cylinder(h = 4, d = stem_d + 2, $fn = 32);\n    }\n    \n    // Bottom dimple\n    translate([0, 0, -orange_d/2 + 2]) {\n        sphere(d = 10);\n    }\n}\n\n// Orange peel texture - small bumps\nmodule peel_bump() {\n    translate([0, 0, -0.5]) {\n        difference() {\n            sphere(d = 2.5);\n            translate([0, 0, -1.5]) {\n                cube([3, 3, 3], center = true);\n            }\n        }\n    }\n}\n\n// Distribute bumps across surface\nfor(a = [15 : 30 : 150]) {\n    for(b = [0 : 30 : 330]) {\n        rotate([0, a, b]) {\n            translate([0, 0, orange_d/2 - 1]) {\n                peel_bump();\n            }\n        }\n    }\n}\n\n}\n\n// Stem\ntranslate([0, 0, orange_d/2]) {\n    color([0.4, 0.2, 0]) {\n        cylinder(h = stem_h, d = stem_d);\n        \n        // Stem cap\n        translate([0, 0, stem_h]) {\n            sphere(d = stem_d + 2);\n        }\n        \n        // Small leaf\n        translate([stem_d/2 + 1, 0, stem_h - 2]) {\n            rotate([0, 90, 30]) {\n                scale([1, 0.4, 1]) {\n                    sphere(d = 8);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "grapefruit",
    "openscad_code": "// Grapefruit model - Realistic style, medium complexity\n// Overall dimensions: ~70mm diameter\n\n// Main parameters\n$fn = 48;\ngrapefruit_radius = 35;\nwall_thickness = 2;\nsegment_count = 12;\n\n// Main grapefruit body with slightly flattened bottom\nmodule grapefruit_body() {\n    difference() {\n        // Main sphere\n        scale([1, 1, 0.9]) \n            sphere(r = grapefruit_radius);\n        \n        // Flatten bottom slightly for stable printing\n        translate([0, 0, -grapefruit_radius * 0.9 - 1])\n            cube([grapefruit_radius * 2.2, grapefruit_radius * 2.2, 2], center = true);\n            \n        // Hollow out interior\n        scale([1, 1, 0.9]) \n            sphere(r = grapefruit_radius - wall_thickness);\n    }\n}\n\n// Create individual segment membranes\nmodule segment_membranes() {\n    membrane_height = grapefruit_radius * 1.8;\n    membrane_width = 1.5;\n    \n    for(i = [0 : segment_count - 1]) {\n        rotate([0, 0, i * 360 / segment_count]) {\n            translate([0, 0, -membrane_height / 2])\n                scale([1, membrane_width / (grapefruit_radius * sin(180/segment_count)), 1])\n                    cube([grapefruit_radius * sin(180/segment_count) * 2, membrane_width, membrane_height], center = true);\n        }\n    }\n}\n\n// Central column/pith\nmodule central_pith() {\n    cylinder(h = grapefruit_radius * 1.8, r = 5, center = true);\n}\n\n// Peel texture - small dimples\nmodule peel_texture() {\n    bump_radius = 1.2;\n    bump_depth = 0.4;\n    rows = 8;\n    bumps_per_row = 16;\n    \n    for(row = [0 : rows - 1]) {\n        row_angle = 180 * (row + 0.5) / rows;\n        for(bump = [0 : bumps_per_row - 1]) {\n            rotate([0, row_angle, bump * 360 / bumps_per_row]) {\n                translate([0, 0, grapefruit_radius * 0.9 * cos(row_angle)])\n                    sphere(r = bump_radius);\n            }\n        }\n    }\n}\n\n// Stem attachment point\nmodule stem_attachment() {\n    translate([0, 0, grapefruit_radius * 0.9 - 1])\n        cylinder(h = 3, r1 = 4, r2 = 2);\n}\n\n// Bottom navel\nmodule bottom_navel() {\n    translate([0, 0, -grapefruit_radius * 0.9 + 1])\n        cylinder(h = 2, r1 = 3, r2 = 5);\n}\n\n// Assemble the complete grapefruit\nunion() {\n    // Main body\n    grapefruit_body();\n    \n    // Internal structure (visible through cutaway)\n    %segment_membranes();\n    %central_pith();\n    \n    // External features\n    peel_texture();\n    stem_attachment();\n    bottom_navel();\n}",
    "renders": true
  },
  {
    "fruit": "pomegranate",
    "openscad_code": "// Realistic Pomegranate - Medium Complexity\n// Designed for 3D printing, no overhangs, ~75mm diameter\n\n$fn = 32;  // Smooth curves for printing\n\n// Main pomegranate body with realistic shape\nmodule pomegranate_body() {\n    // Base sphere slightly flattened\n    scale([1, 1, 0.85])\n    sphere(d = 75);\n    \n    // Crown at top\n    translate([0, 0, 32])\n    scale([0.3, 0.3, 1])\n    sphere(d = 20);\n}\n\n// Realistic crown structure\nmodule crown() {\n    // Central crown base\n    translate([0, 0, 37])\n    cylinder(h = 8, d1 = 15, d2 = 10);\n    \n    // Crown petals\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([5, 0, 42])\n        rotate([90, 0, 0])\n        scale([0.8, 1, 0.3])\n        cylinder(h = 10, d = 8);\n    }\n}\n\n// Realistic skin texture with bumps\nmodule skin_texture() {\n    difference() {\n        pomegranate_body();\n        \n        // Hexagonal pattern for pomegranate sections\n        for(a = [0:30:150]) {\n            for(b = [0:30:150]) {\n                if(a*a + b*b < 4000) {\n                    // Calculate 3D positions on sphere\n                    theta = atan(b, a);\n                    phi = atan(sqrt(a*a + b*b), 35);\n                    \n                    rotate([0, phi, theta])\n                    translate([0, 0, 37])\n                    sphere(d = 3);\n                }\n            }\n        }\n        \n        // Bottom indentation\n        translate([0, 0, -38])\n        sphere(d = 15);\n    }\n}\n\n// Stem at the crown\nmodule stem() {\n    translate([0, 0, 45])\n    cylinder(h = 5, d = 3);\n}\n\n// Main assembly\nunion() {\n    skin_texture();\n    crown();\n    stem();\n    \n    // Add subtle ridges for realism\n    for(i = [0:6]) {\n        rotate([0, 0, i * 30 + 15])\n        translate([0, -37, 0])\n        scale([1, 0.05, 1])\n        sphere(d = 75);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "fig",
    "openscad_code": "// Realistic 3D printable fig (medium complexity)\n// Overall size ~60mm high, ~45mm wide\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nstem_d = 6;\nstem_h = 12;\nbody_d = 40;\nbody_h1 = 25;\nbody_h2 = 15;\nneck_d = 18;\nneck_h = 8;\nskin_thick = 2;\n\n// Stem\nmodule stem() {\n    difference() {\n        // Main stem\n        cylinder(d1=stem_d*0.8, d2=stem_d*1.2, h=stem_h);\n        // Remove center for hollow printing\n        translate([0,0,-1])\n            cylinder(d=stem_d*0.5, h=stem_h+2);\n    }\n}\n\n// Neck (narrow part under stem)\nmodule neck() {\n    difference() {\n        // Tapered neck\n        cylinder(d1=neck_d, d2=neck_d*0.8, h=neck_h);\n        // Hollow center\n        translate([0,0,-1])\n            cylinder(d=neck_d*0.5, h=neck_h+2);\n    }\n}\n\n// Main body of fig\nmodule fig_body() {\n    difference() {\n        // Bottom bulbous part\n        translate([0,0,0])\n            sphere(d=body_d);\n        \n        // Top flattened area\n        translate([0,0,body_h1])\n            cube([body_d*2, body_d*2, body_d], center=true);\n        \n        // Hollow center\n        sphere(d=body_d-skin_thick*2);\n    }\n}\n\n// Surface texture - small dimples\nmodule surface_dimples() {\n    for(r=[-45:15:45]) {\n        rotate([r,0,0]) {\n            for(a=[0:30:330]) {\n                rotate([0,0,a]) {\n                    translate([body_d/2*0.85, 0, body_h2*sin(r)+5]) {\n                        sphere(d=2.5, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bottom opening (where fig attaches to tree)\nmodule bottom_opening() {\n    translate([0,0,-body_d/2+2])\n        cylinder(d=stem_d*1.5, h=5);\n}\n\n// Calyx (leaves at top)\nmodule calyx() {\n    for(i=[0:72:360-1]) {\n        rotate([0,0,i]) {\n            translate([0, neck_d/2, stem_h+neck_h]) {\n                rotate([30,0,0])\n                    scale([1, 0.6, 0.3])\n                        cylinder(d1=8, d2=3, h=6);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Stem\n    translate([0,0,body_h2+body_h1]) {\n        stem();\n    }\n    \n    // Neck\n    translate([0,0,body_h2+body_h1-stem_h]) {\n        neck();\n    }\n    \n    // Body\n    translate([0,0,body_h2]) {\n        union() {\n            fig_body();\n            // Surface texture\n            difference() {\n                surface_dimples();\n                sphere(d=body_d-skin_thick);\n            }\n        }\n    }\n    \n    // Calyx leaves\n    calyx();\n    \n    // Bottom opening\n    difference() {\n        sphere(d=body_d);\n        bottom_opening();\n    }\n}\n\n// Flatten bottom for stable printing\ntranslate([0,0,-body_d/2+1])\n    cube([body_d*1.5, body_d*1.5, 2], center=true);",
    "renders": true
  },
  {
    "fruit": "date",
    "openscad_code": "// Realistic Date (Phoenix dactylifera)\n// Medium complexity 3D printable model\n// ~70mm tall\n\n// Main parameters\n$fn = 50;\nscale_factor = 0.8;\n\nmodule date_body() {\n    // Main ellipsoid body\n    scale([1, 0.7, 1.3]) \n    sphere(r=15);\n    \n    // Wrinkled texture using small subtracted spheres\n    for (i = [0:30]) {\n        rotate([rand(0,360), rand(0,360), rand(0,360)])\n        translate([rand(-12,12), rand(-8,8), rand(-18,18)])\n        scale([1, 0.5, 0.3])\n        sphere(r=rand(0.5,2));\n    }\n}\n\nmodule stem_end() {\n    // Wrinkled top where stem was attached\n    translate([0, 0, 19])\n    difference() {\n        cylinder(h=3, r1=3, r2=2);\n        for (i = [0:8]) {\n            rotate([0, 0, i*45])\n            translate([1.5, 0, 1])\n            cube([0.8, 0.8, 3], center=true);\n        }\n    }\n    \n    // Small stem remnant\n    translate([0, 0, 22])\n    cylinder(h=2, r=1);\n}\n\nmodule date_flesh() {\n    // Soft flesh visible where date was bitten\n    difference() {\n        // Main flesh shape\n        translate([0, -5, -10])\n        scale([0.9, 0.6, 0.9])\n        sphere(r=12);\n        \n        // Remove uneven bite pattern\n        for (i = [0:15]) {\n            rotate([rand(0,30), rand(0,30), rand(0,360)])\n            translate([rand(-8,8), rand(-8,0), rand(-8,8)])\n            sphere(r=rand(1,3));\n        }\n    }\n}\n\nmodule seed() {\n    // Central seed visible in bite\n    translate([0, -5, -5])\n    rotate([90, 0, 0])\n    scale([0.3, 0.15, 1])\n    cylinder(h=15, r1=5, r2=3);\n}\n\nmodule surface_ripples() {\n    // Vertical surface ripples for realism\n    for (i = [0:12]) {\n        rotate([0, 0, i*30])\n        translate([13, 0, 0])\n        rotate([90, 0, 0])\n        scale([0.3, 0.1, 1])\n        cylinder(h=30, r=3);\n    }\n}\n\n// Build the complete date\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    difference() {\n        union() {\n            date_body();\n            stem_end();\n            surface_ripples();\n        }\n        \n        // Bite mark\n        translate([0, 10, -5])\n        rotate([0, 15, 0])\n        scale([1.2, 1, 1.2])\n        sphere(r=12);\n    }\n    \n    // Exposed flesh and seed\n    date_flesh();\n    seed();\n}\n\n// Helper function for random numbers\nfunction rand(min, max) = min + (max - min) * (rands(0,1,1)[0]);",
    "renders": true
  },
  {
    "fruit": "papaya",
    "openscad_code": "// Realistic Papaya - 3D printable\n// Medium complexity model using basic OpenSCAD primitives\n\n$fn = 32;  // Smooth curves for printing\n\n// Main papaya body - oval shape with slight curve\nmodule papaya_body() {\n    // Create the main oval body\n    translate([0, 0, 30]) \n        rotate([90, 0, 0])\n            scale([1, 1.2, 1.4])  // Slightly wider than tall\n                sphere(d = 50);\n    \n    // Add bottom taper\n    translate([0, 0, 10])\n        rotate([90, 0, 0])\n            scale([0.8, 0.9, 1.2])\n                sphere(d = 45);\n    \n    // Add top taper\n    translate([0, 0, 50])\n        rotate([90, 0, 0])\n            scale([0.7, 0.8, 1])\n                sphere(d = 40);\n}\n\n// Surface texture - small bumps for realistic skin\nmodule skin_texture() {\n    for(i = [0:15:180]) {\n        rotate([0, 0, i])\n            for(j = [30:10:150]) {\n                rotate([0, j, 0])\n                    translate([25, 0, 0])\n                        sphere(d = 2.5);\n            }\n    }\n}\n\n// Seed cavity - hollow center\nmodule seed_cavity() {\n    translate([0, 0, 30])\n        rotate([90, 0, 0])\n            scale([0.4, 0.5, 0.6])\n                sphere(d = 40);\n}\n\n// Stem at top\nmodule stem() {\n    translate([0, 0, 53])\n        rotate([0, 0, 10])  // Slight angle\n            cylinder(h = 8, d1 = 6, d2 = 4);\n}\n\n// Papaya ridges - longitudinal grooves\nmodule ridges() {\n    for(angle = [0:30:150]) {\n        rotate([0, 0, angle])\n            translate([12, 0, 30])\n                rotate([90, 0, 0])\n                    scale([0.3, 1, 1])\n                        cylinder(h = 50, d = 8);\n    }\n}\n\n// Create the complete papaya\nunion() {\n    // Main body\n    difference() {\n        papaya_body();\n        seed_cavity();\n    }\n    \n    // Surface details\n    skin_texture();\n    \n    // Stem\n    stem();\n    \n    // Ridges\n    difference() {\n        papaya_body();\n        ridges();\n    }\n}\n\n// Make it printable - ensure manifold geometry\n// Add a small flat base for stability\ntranslate([0, 0, 5])\n    cylinder(h = 2, d = 30, $fn = 32);",
    "renders": true
  },
  {
    "fruit": "pawpaw",
    "openscad_code": "// Pawpaw Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~70mm length, ~40mm width\n\n// Main body parameters\nbody_length = 70;\nbody_width = 40;\nbody_height = 35;\nstem_length = 8;\nstem_diameter = 4;\n\n// Skin texture parameters\nbump_size = 1.5;\nbump_rows = 12;\nbump_cols = 8;\n\nmodule pawpaw_body() {\n    // Create the main body shape using scaled spheres\n    difference() {\n        // Main body - elongated sphere\n        scale([1.3, 1, 0.9]) sphere(d=body_width);\n        \n        // Flatten the bottom slightly for stability\n        translate([0, 0, -body_height/2])\n            cube([body_length*2, body_width*2, 10], center=true);\n    }\n}\n\nmodule stem() {\n    // Create the stem at the top\n    translate([0, 0, body_height/2 + stem_length/2])\n        cylinder(h=stem_length, d=stem_diameter);\n}\n\nmodule skin_texture() {\n    // Add bumps for realistic skin texture\n    difference() {\n        union() {\n            for(i = [0:bump_rows-1]) {\n                for(j = [0:bump_cols-1]) {\n                    // Calculate position using spherical coordinates\n                    theta = 360/bump_rows * i;\n                    phi = 180/bump_cols * j;\n                    \n                    translate([\n                        sin(phi) * cos(theta) * body_width/2 * 0.9,\n                        sin(phi) * sin(theta) * body_width/2 * 0.9,\n                        cos(phi) * body_height/2 * 0.9\n                    ])\n                        sphere(d=bump_size);\n                }\n            }\n        }\n        \n        // Remove bumps from bottom third to prevent printing issues\n        translate([0, 0, -body_height/2])\n            cube([body_length*2, body_width*2, body_height/3], center=true);\n    }\n}\n\nmodule pawpaw() {\n    union() {\n        // Main body\n        pawpaw_body();\n        \n        // Stem\n        stem();\n        \n        // Skin texture\n        skin_texture();\n    }\n}\n\n// Generate the pawpaw\npawpaw();",
    "renders": true
  },
  {
    "fruit": "kiwifruit",
    "openscad_code": "// Kiwifruit – medium-complexity realistic style\n// Approx. 60 × 50 × 50 mm, printable without supports\n\n$fn = 36;           // smooth curves\nskin_thick = 1.4;   // printable wall\nscale_factor = 0.9; // subtle flattening\n\n// Main fruit body\nmodule body() {\n    difference() {\n        scale([1, 1, scale_factor])\n            sphere(d = 50);\n        // hollow core\n        scale([1, 1, scale_factor])\n            sphere(d = 50 - 2 * skin_thick);\n    }\n}\n\n// fuzzy “hair” made from tiny cylinders\nmodule fuzz(h = 1.6, r = 0.4) {\n    cylinder(h = h, r1 = r, r2 = 0);\n}\n\n// distribute fuzz over surface using fibonacci spiral\nmodule surface_fuzz(n = 200) {\n    for (i = [0 : n - 1]) {\n        theta = i * 137.508 * 1;      // golden angle\n        phi   = acos(1 - 2 * (i + 0.5) / n);\n        x = (50/2) * cos(theta) * sin(phi);\n        y = (50/2) * sin(theta) * sin(phi);\n        z = (50/2) * scale_factor * cos(phi);\n\n        // skip polar regions for printability\n        if (abs(z) < 20)\n            translate([x, y, z])\n                rotate([90 - phi * 57.3, 0, theta])\n                    fuzz();\n    }\n}\n\n// Stem stub at top\nmodule stem() {\n    translate([0, 0, 25 * scale_factor + 1])\n        cylinder(h = 6, r1 = 4, r2 = 2);\n}\n\n// Central white core with radial seed pockets\nmodule core() {\n    difference() {\n        // white pith cylinder\n        cylinder(h = 46 * scale_factor, r = 6, center = true);\n        // hollow center\n        cylinder(h = 48 * scale_factor, r = 2, center = true);\n    }\n}\n\n// Single kiwifruit seed\nmodule seed() {\n    scale([1, 0.6, 0.3])\n        sphere(d = 2);\n}\n\n// Ring of seeds around core\nmodule seed_ring(n = 12) {\n    for (a = [0 : 360 / n : 359])\n        rotate([0, 0, a])\n            translate([8, 0, 0])\n                seed();\n}\n\n// Main assembly\nunion() {\n    // outer skin\n    body();\n    // fuzz layer\n    surface_fuzz();\n    // stem\n    stem();\n    // internal details (remove after slicing if not needed)\n    translate([0, 0, 0])\n        color(\"white\")\n            core();\n    translate([0, 0, 0])\n        color(\"darkgreen\")\n            seed_ring();\n}",
    "renders": true
  },
  {
    "fruit": "hardykiwi",
    "openscad_code": "// Hardykiwi (Actinidia arguta) - Realistic Medium Complexity\n// Total length ~70mm, printable without supports\n\n$fn = 32; // Smooth curves\n\nmodule kiwi_flesh() {\n    // Main fruit body - slightly elongated ellipsoid\n    scale([1, 0.85, 1.2])\n    sphere(d = 35);\n}\n\nmodule kiwi_skin() {\n    // Thin outer skin layer\n    difference() {\n        scale([1.02, 0.87, 1.22])\n        sphere(d = 35.5);\n        kiwi_flesh();\n    }\n}\n\nmodule longitudinal_ridges() {\n    // Subtle longitudinal ridges on skin surface\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([17.5, 0, 0])\n        rotate([0, 90, 0])\n        scale([0.3, 0.3, 36])\n        cylinder(d = 2, h = 1);\n    }\n}\n\nmodule stem_end() {\n    // Stem attachment point\n    translate([0, 0, 21])\n    rotate_extrude(angle = 360)\n    translate([2, 0, 0])\n    circle(d = 4);\n    \n    // Small stem remnant\n    translate([0, 0, 22])\n    cylinder(d1 = 2, d2 = 1.5, h = 3);\n}\n\nmodule blossom_end() {\n    // Blossom scar at bottom\n    translate([0, 0, -21])\n    rotate_extrude(angle = 360)\n    translate([1.5, 0, 0])\n    circle(d = 3);\n}\n\nmodule internal_structure() {\n    // Central core with seeds\n    difference() {\n        // Core cylinder\n        translate([0, 0, -15])\n        rotate([90, 0, 0])\n        cylinder(d = 4, h = 30);\n        \n        // Seed cavities\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, 2, 0])\n            sphere(d = 1.5);\n        }\n    }\n    \n    // Radial septa (fruit partitions)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, -15])\n        cube([0.5, 15, 30], center = true);\n    }\n}\n\nmodule hardykiwi_complete() {\n    union() {\n        // Visible exterior\n        kiwi_skin();\n        longitudinal_ridges();\n        stem_end();\n        blossom_end();\n        \n        // Internal structure (optional - for cutaway view)\n        // Uncomment to see inside\n        // %internal_structure();\n    }\n}\n\n// Main assembly\nhardskiwi_complete();\n\n// Add cutting plane for half-kiwi view\n// %translate([0, 50, 0])\n// difference() {\n//     hardykiwi_complete();\n//     translate([0, 0, 0])\n//     cube([100, 100, 0.1], center = true);\n// }",
    "renders": true
  },
  {
    "fruit": "aronia",
    "openscad_code": "// Aronia berry cluster - realistic medium complexity\n// Overall size: 60mm tall cluster, berries ~8mm diameter\n// Optimized for FDM printing without support\n\n$fn = 32;  // Smooth curves\n\n// Main cluster stem\nmodule stem() {\n    color(\"saddlebrown\")\n    union() {\n        // Main stem\n        cylinder(h = 40, d1 = 3, d2 = 2);\n        \n        // Branching stems\n        for (i = [0:45:315]) {\n            rotate([0, 0, i]) \n            translate([0, 1.2, 35 - i/15])\n            rotate([110 + i/10, 0, 0])\n            cylinder(h = 15 + i/20, d1 = 2, d2 = 1);\n        }\n    }\n}\n\n// Individual berry with proper anatomy\nmodule berry(pos, angle, size) {\n    translate(pos)\n    rotate([0, 0, angle])\n    color(\"darkpurple\")\n    union() {\n        // Main berry body\n        scale([1, 1, 1.2])\n        sphere(d = size);\n        \n        // Calyx at top\n        translate([0, 0, size*0.6])\n        rotate([0, 0, 30])\n        cylinder(h = size/4, d1 = size/2.5, d2 = size/3.5);\n        \n        // Small stem attachment\n        translate([0, 0, size*0.7 + size/8])\n        cylinder(h = size/5, d = size/10);\n    }\n}\n\n// Leaf structure\nmodule leaf(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    color(\"forestgreen\")\n    difference() {\n        // Leaf body\n        scale([1, 1.5, 0.1])\n        sphere(d = 12);\n        \n        // Veins\n        translate([0, -5, 0.2])\n        scale([0.1, 10, 0.3])\n        cube([1, 1, 1]);\n        \n        for (i = [-3, 3]) {\n            translate([i, -3, 0.2])\n            rotate([0, 0, i*30])\n            scale([0.05, 6, 0.2])\n            cube([1, 1, 1]);\n        }\n    }\n}\n\n// Berry cluster arrangement\nmodule berry_cluster() {\n    union() {\n        // Berries along main stem\n        for (i = [0:20:100]) {\n            berry([sin(i*3)*4, cos(i*3)*4, 35 - i/5], i*17, 7.5 + sin(i*2));\n        }\n        \n        // Berries on branches\n        for (angle = [0:45:315]) {\n            for (i = [0:8:32]) {\n                berry([\n                    sin(angle)*cos(i*5)*3 + sin(angle)*3,\n                    cos(angle)*cos(i*5)*3 + cos(angle)*3,\n                    30 - angle/15 - i/2\n                ], angle + i*11, 6 + cos(i*3));\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    stem();\n    \n    // Berry cluster\n    translate([0, 0, 5])\n    berry_cluster();\n    \n    // Leaves at top\n    leaf([0, 0, 38], 0);\n    leaf([-5, 3, 36], 35);\n    leaf([5, -3, 37], -25);\n    leaf([3, 5, 39], 140);\n    leaf([-3, -4, 35], -120);\n}",
    "renders": true
  },
  {
    "fruit": "aroniaberry",
    "openscad_code": "// Aroniaberry 3D model - medium complexity realistic style\n// Size: ~60mm height, 3D printable with no overhangs\n\n$fn = 32; // Smooth curves\n\n// Main berry cluster\nmodule berry_cluster() {\n    union() {\n        // Central berry\n        translate([0, 0, 20])\n            scale([1, 1, 1.2])\n                sphere(d = 12);\n        \n        // Berry 1\n        translate([8, 0, 25])\n            rotate([0, 15, 0])\n            scale([0.85, 0.85, 1])\n                sphere(d = 10);\n        \n        // Berry 2\n        translate([-7, 4, 22])\n            rotate([0, -20, 30])\n            scale([0.9, 0.9, 1.1])\n                sphere(d = 11);\n        \n        // Berry 3\n        translate([0, -8, 24])\n            rotate([0, -10, -25])\n            scale([0.8, 0.8, 0.95])\n                sphere(d = 9);\n        \n        // Berry 4\n        translate([-5, -6, 18])\n            rotate([0, 25, -15])\n            scale([0.75, 0.75, 0.9])\n                sphere(d = 8);\n        \n        // Berry 5\n        translate([6, -5, 19])\n            rotate([0, 20, 25])\n            scale([0.8, 0.8, 0.95])\n                sphere(d = 9);\n    }\n}\n\n// Calyx with 5 pointed sepals\nmodule calyx() {\n    union() {\n        // Base calyx\n        translate([0, 0, 36])\n            cylinder(h = 3, d1 = 12, d2 = 8);\n        \n        // Sepals\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 5.5, 36])\n                rotate([0, -30, 0])\n                scale([0.8, 0.3, 1])\n                    cylinder(h = 6, d1 = 3, d2 = 1);\n        }\n    }\n}\n\n// Stem connection\nmodule stem() {\n    // Main stem\n    translate([0, 0, 39])\n        cylinder(h = 15, d1 = 3, d2 = 2);\n    \n    // Small branch\n    translate([0, 2, 45])\n        rotate([0, -20, 30])\n        cylinder(h = 8, d1 = 1.5, d2 = 1);\n}\n\n// Surface details - small bumps\nmodule surface_details() {\n    difference() {\n        union() {\n            berry_cluster();\n            calyx();\n            stem();\n        }\n        \n        // Add small indentations for realism\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 5.5, 20 + i * 1.5])\n                sphere(d = 1.5);\n        }\n    }\n}\n\n// Final assembly\nsurface_details();",
    "renders": true
  },
  {
    "fruit": "sea",
    "openscad_code": "// OpenSCAD: Realistic Sea – 3D-printable miniature diorama\n// Total footprint ~80 mm (X) × 55 mm (Y) × 12 mm (Z)\n\n//////////////////////\n// Global parameters\n//////////////////////\nbase_thickness = 2;        // solid base under the water\nwater_depth   = 5;         // average water height\nwave_height   = 1.5;       // crest height above average\nwave_pitch    = 6;         // distance between wave crests\nmodel_l       = 80;        // length (X)\nmodel_w       = 55;        // width  (Y)\nwall_t        = 1.2;       // printable wall thickness\n$fn           = 32;        // smooth curves\n\n//////////////////////\n// Base plate (solid)\n//////////////////////\nmodule base() {\n    difference() {\n        // main slab\n        translate([0, 0, base_thickness/2])\n            cube([model_l, model_w, base_thickness], center = true);\n        \n        // printing-friendly chamfer around the edge\n        translate([0, 0, base_thickness-0.3])\n            cube([model_l+2, model_w+2, 1], center = true);\n    }\n}\n\n//////////////////////\n// Water surface with rolling waves\n//////////////////////\nmodule water() {\n    difference() {\n        // outer water block\n        translate([0, 0, base_thickness + water_depth/2])\n            cube([model_l, model_w, water_depth], center = true);\n        \n        // subtract underside to give uniform wall_thickness shell\n        translate([0, 0, base_thickness - 0.1])\n            cube([model_l - 2*wall_t, model_w - 2*wall_t, water_depth + 0.2], center = true);\n        \n        // carve wave troughs into the top face\n        for (x = [-model_l/2 + wave_pitch/2 : wave_pitch : model_l/2 - wave_pitch/2])\n            for (y = [-model_w/2 + wave_pitch/2 : wave_pitch : model_w/2 - wave_pitch/2]) {\n                translate([x, y, base_thickness + water_depth])\n                    rotate([0, 45, 0])\n                        scale([1, 1.8, 1])\n                            sphere(d = wave_height * 2.8, $fn = 24);\n            }\n    }\n    \n    // add wave crests on top\n    for (x = [-model_l/2 + wave_pitch/2 : wave_pitch : model_l/2 - wave_pitch/2])\n        for (y = [-model_w/2 + wave_pitch/2 : wave_pitch : model_w/2 - wave_pitch/2]) {\n            translate([x, y, base_thickness + water_depth + wave_height/2])\n                scale([1, 1.8, 0.6])\n                    sphere(d = wave_height * 2.2, $fn = 24);\n        }\n}\n\n//////////////////////\n// Tiny boat for recognizability\n//////////////////////\nmodule boat() {\n    // hull shell thickness = wall_t\n    hull_width = 6;\n    hull_length = 14;\n    hull_thick = wall_t;\n    \n    difference() {\n        // outer hull\n        translate([model_l/2 - 20, 0, base_thickness + water_depth + 0.4]) {\n            scale([1, 0.5, 0.3])\n                sphere(d = hull_width, $fn = 24);\n            translate([hull_length/2 - hull_width/2, 0, 0])\n                cube([hull_length, hull_width, hull_width * 0.3], center = true);\n            scale([1, 0.5, 0.3])\n                translate([hull_length, 0, 0])\n                    sphere(d = hull_width, $fn = 24);\n        }\n        \n        // inner cavity\n        translate([model_l/2 - 20, 0, base_thickness + water_depth + 0.4 + hull_thick]) {\n            scale([1, 0.5, 0.3])\n                sphere(d = hull_width - 2*hull_thick, $fn = 24);\n            translate([hull_length/2 - hull_width/2, 0, 0])\n                cube([hull_length - 2*hull_thick, hull_width - 2*hull_thick, hull_width * 0.3], center = true);\n            scale([1, 0.5, 0.3])\n                translate([hull_length, 0, 0])\n                    sphere(d = hull_width - 2*hull_thick, $fn = 24);\n        }\n    }\n    \n    // mast\n    mast_h = 8;\n    translate([model_l/2 - 20 + hull_length/2, 0, base_thickness + water_depth + 0.4 + hull_width*0.3])\n        cylinder(h = mast_h, d = 1.4);\n}\n\n//////////////////////\n// Assembly\n//////////////////////\nunion() {\n    base();\n    water();\n    boat();\n}",
    "renders": true
  },
  {
    "fruit": "buckthorn",
    "openscad_code": "// Realistic Buckthorn (Rhamnus cathartica)\n// Medium complexity model for 3D printing\n// Overall dimensions: ~80mm height, ~60mm width\n\n// Parameters\nbranch_diameter = 4;\nberry_diameter = 2.5;\nleaf_length = 12;\nleaf_width = 6;\nleaf_thickness = 0.8;\nwall_thickness = 1.2;\n\n// Main trunk\nmodule trunk() {\n    union() {\n        // Main trunk segment\n        cylinder(h=50, d1=6, d2=4, $fn=8);\n        \n        // Add some irregularities\n        for(i = [0:3]) {\n            rotate([0, 0, i*90+15])\n            translate([3, 0, 10+i*10])\n            scale([0.7, 0.7, 1])\n            sphere(d=3);\n        }\n    }\n}\n\n// Branch segment\nmodule branch(height, angle, length) {\n    translate([0, 0, height])\n    rotate([angle, 0, 0])\n    cylinder(h=length, d=branch_diameter, $fn=6);\n}\n\n// Leaf with realistic shape\nmodule leaf() {\n    // Main leaf body - elliptical with pointed tip\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n            sphere(d=leaf_width);\n            translate([leaf_length-2, 0, 0])\n            sphere(d=leaf_width*0.8);\n            translate([leaf_length, 0, 0])\n            sphere(d=leaf_width*0.2);\n        }\n        \n        // Cut to flat thickness\n        translate([0, 0, -leaf_thickness/2-0.1])\n        cube([leaf_length+2, leaf_width+2, leaf_thickness], center=true);\n    }\n    \n    // Central vein\n    translate([leaf_length/2, 0, leaf_thickness/2+0.1])\n    cube([leaf_length*0.9, 0.3, leaf_thickness*0.5], center=true);\n    \n    // Side veins\n    for(i = [1:3]) {\n        translate([leaf_length/4*i, 0, leaf_thickness/2+0.1])\n        rotate([0, 0, 25])\n        cube([leaf_length/3, 0.2, leaf_thickness*0.3], center=true);\n        \n        translate([leaf_length/4*i, 0, leaf_thickness/2+0.1])\n        rotate([0, 0, -25])\n        cube([leaf_length/3, 0.2, leaf_thickness*0.3], center=true);\n    }\n}\n\n// Berry cluster\nmodule berry_cluster(count, radius) {\n    for(i = [0:count-1]) {\n        angle = i * 360/count;\n        r = radius * (0.7 + sin(i*45)/5);\n        translate([r*cos(angle), r*sin(angle), 0])\n        sphere(d=berry_diameter);\n    }\n}\n\n// Thorn\nmodule thorn() {\n    // Curved thorn\n    rotate_extrude(angle=90, $fn=8)\n    translate([2, 0, 0])\n    polygon(points=[[0,0],[1,0],[0,3]]);\n}\n\n// Main assembly\nunion() {\n    // Trunk\n    trunk();\n    \n    // Main branches\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        branch(20, 30, 25);\n        \n        rotate([0, 0, i*60+30])\n        branch(35, -25, 20);\n    }\n    \n    // Leaves on upper branches\n    for(i = [0:4]) {\n        rotate([0, 0, i*90])\n        translate([8, 0, 45])\n        rotate([0, -30, i*90])\n        leaf();\n    }\n    \n    // More leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i*120])\n        translate([12, 0, 30])\n        rotate([0, -45, i*120+60])\n        leaf();\n    }\n    \n    // Berry clusters\n    for(i = [0:3]) {\n        rotate([0, 0, i*120+60])\n        translate([10, 0, 50])\n        berry_cluster(4, 3);\n    }\n    \n    // Thorns - alternate pattern\n    for(i = [0:7]) {\n        rotate([0, 0, i*45+22.5])\n        translate([3, 0, 5+i*6])\n        rotate([0, -90, 0])\n        thorn();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "goumi",
    "openscad_code": "// Goumi (Elaeagnus multiflora) – realistic medium-detail model\n// Overall length ≈ 70 mm\n\n// ---------- parameters ----------\nberry_d      =  9;   // berry diameter\nberry_rows   =  6;   // berries in each longitudinal ring\nberry_cols   =  4;   // rings along the stem\nberry_wall   =  1.2; // printable wall thickness\n\ncalyx_d      =  5.5; // calyx diameter\ncalyx_h      =  3;   // calyx height\nstem_d       =  3.5; // stem diameter\nstem_l       = 20;   // stem length\nleaf_l       = 28;   // leaf length\nleaf_w       = 18;   // leaf max width\nleaf_t       =  1.5; // leaf thickness\npetiole_l    =  6;   // petiole length\n\n// ---------- berry module ----------\nmodule berry(r=berry_d/2){\n    difference(){\n        sphere(r);                          // main body\n        // small dimple on top for realism\n        translate([0,0,r*0.9])\n            sphere(r*0.4);\n    }\n    // printable wall\n    difference(){\n        sphere(r);\n        sphere(r-berry_wall);\n    }\n}\n\n// ---------- calyx module ----------\nmodule calyx(){\n    difference(){\n        cylinder(h=calyx_h, d1=calyx_d, d2=calyx_d*0.6, $fn=16);\n        cylinder(h=calyx_h, d1=calyx_d-berry_wall*2,\n                           d2=calyx_d*0.6-berry_wall*2, $fn=16);\n    }\n}\n\n// ---------- leaf module ----------\nmodule leaf(){\n    // central vein for printability\n    linear_extrude(height=leaf_t)\n        polygon([\n            [0,0],\n            [leaf_l*0.1, -leaf_w/2],\n            [leaf_l*0.9, -leaf_w/2],\n            [leaf_l, 0],\n            [leaf_l*0.9,  leaf_w/2],\n            [leaf_l*0.1,  leaf_w/2]\n        ]);\n    // petiole\n    translate([leaf_t/2,0,leaf_t/2])\n        rotate([90,0,0])\n            cylinder(h=petiole_l, d=stem_d/2, $fn=8);\n}\n\n// ---------- assembly ----------\nunion(){\n    // berries cluster\n    translate([0,0,stem_l])\n        for(i=[0:berry_cols-1])\n            rotate([0,0,i*360/berry_cols])\n                for(j=[0:berry_rows-1])\n                    translate([0, (berry_d+1)*j, 0])\n                        union(){\n                            berry();\n                            // calyx on top row only\n                            if(j==0){\n                                translate([0,0,berry_d/2])\n                                    calyx();\n                            }\n                        }\n\n    // stem\n    cylinder(h=stem_l, d=stem_d, $fn=16);\n\n    // leaf pair\n    translate([0,0,stem_l-5])\n        rotate([0,90,0])\n            leaf();\n    translate([0,0,stem_l-5])\n        rotate([0,-90,0])\n            mirror([1,0,0])\n                leaf();\n}",
    "renders": true
  },
  {
    "fruit": "autberry",
    "openscad_code": "// Raspberry (Autberry) - Realistic Style, Medium Complexity\n// Approx 60mm tall, 3D-printable with no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\nmodule berry_body() {\n    // Main berry body - slightly flattened sphere\n    translate([0, 0, 25])\n    scale([1, 1, 0.8])\n    sphere(d = 40);\n}\n\nmodule drupelet(x, y, z, size) {\n    // Individual drupelet - small sphere with flattened bottom\n    translate([x, y, z])\n    scale([1, 1, 0.7])\n    sphere(d = size);\n}\n\nmodule drupelet_layer(height, radius, count, size) {\n    // Create a ring of drupelets at given height\n    for (i = [0:count-1]) {\n        angle = i * 360 / count;\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        drupelet(x, y, height, size);\n    }\n}\n\nmodule all_drupelets() {\n    // Generate realistic drupelet pattern - 5 layers\n    drupelet_layer(20, 0, 1, 8);        // Top center\n    drupelet_layer(18, 6, 6, 7);        // Second layer\n    drupelet_layer(15, 11, 8, 7);       // Third layer\n    drupelet_layer(12, 15, 10, 6);      // Fourth layer\n    drupelet_layer(8, 18, 12, 5);       // Fifth layer\n    \n    // Fill gaps with smaller drupelets\n    for (i = [0:5]) {\n        angle = i * 60;\n        x = 9 * cos(angle);\n        y = 9 * sin(angle);\n        drupelet(x, y, 17, 5);\n    }\n}\n\nmodule stem_hole() {\n    // Hollow stem cavity for realism and printing\n    translate([0, 0, 35])\n    rotate([0, 0, 0])\n    cylinder(h = 15, d1 = 8, d2 = 6, $fn = 16);\n}\n\nmodule calyx() {\n    // Green leafy top (calyx) - 5 sepals\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 6, 32])\n        rotate([30, 0, 0])\n        scale([1, 0.4, 1])\n        cylinder(h = 8, d1 = 6, d2 = 4);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core berry structure\n    difference() {\n        berry_body();\n        stem_hole();\n    }\n    \n    // Surface drupelets\n    all_drupelets();\n    \n    // Top calyx\n    calyx();\n}\n\n// Add small bottom flattening for stable printing\ntranslate([0, 0, -0.5])\nscale([1, 1, 0.1])\nsphere(d = 40);",
    "renders": true
  },
  {
    "fruit": "shipova",
    "openscad_code": "// Shipova (Sorbus x domestica) - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nfruit_diameter = 25;\nfruit_height = 30;\nstem_length = 8;\nstem_diameter = 3;\ncalyx_diameter = 8;\ncalyx_height = 4;\n\n// Realistic shipova shape - more pear-like than apple\nmodule shipova_body() {\n    // Main body - pear shape using scaled spheres\n    union() {\n        // Lower bulbous part\n        translate([0, 0, fruit_height/3])\n            scale([1, 1, 1.2])\n            sphere(d = fruit_diameter);\n        \n        // Upper tapering part\n        translate([0, 0, fruit_height/1.5])\n            scale([0.9, 0.9, 0.8])\n            sphere(d = fruit_diameter * 0.9);\n    }\n}\n\n// Realistic stem with slight curve\nmodule stem() {\n    // Create curved stem using hull of cylinders\n    color(\"brown\")\n    union() {\n        // Base connection\n        cylinder(h = 2, d = stem_diameter * 1.2);\n        \n        // Main stem segments for curve\n        for(i = [0:3]) {\n            translate([sin(i*5)*0.5, 0, i*2])\n                rotate([0, 0, sin(i*5)*2])\n                cylinder(h = 2, d = stem_diameter * (1 - i*0.1));\n        }\n        \n        // Tip\n        translate([sin(15)*0.5, 0, stem_length])\n            sphere(d = stem_diameter * 0.5);\n    }\n}\n\n// Realistic calyx with sepals\nmodule calyx() {\n    color(\"darkgreen\")\n    difference() {\n        // Main calyx base\n        cylinder(h = calyx_height, d1 = calyx_diameter, d2 = calyx_diameter * 0.7);\n        \n        // Central hole for stem\n        translate([0, 0, -1])\n            cylinder(h = calyx_height + 2, d = stem_diameter);\n    }\n    \n    // Sepals - 5 pointed leaves\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, calyx_diameter/2, calyx_height/2])\n            rotate([30, 0, 0])\n            scale([0.3, 1, 0.1])\n            sphere(d = calyx_diameter/2);\n    }\n}\n\n// Realistic surface texture - small dimples\nmodule surface_texture() {\n    // Random small dimples for realistic skin\n    seed = 42;\n    for(i = [1:20]) {\n        angle = rands(0, 360, 1, seed+i)[0];\n        height = rands(5, fruit_height-5, 1, seed+i)[0];\n        radius = rands(fruit_diameter/3, fruit_diameter/2.2, 1, seed+i)[0];\n        \n        rotate([0, 0, angle])\n        translate([radius, 0, height])\n            sphere(d = 1.5, $fn=8);\n    }\n}\n\n// Main fruit assembly\nmodule shipova() {\n    difference() {\n        union() {\n            // Main body\n            shipova_body();\n            \n            // Surface texture\n            surface_texture();\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, 2])\n            scale([0.85, 0.85, 0.85])\n            shipova_body();\n    }\n    \n    // Calyx on top\n    translate([0, 0, fruit_height-2])\n    calyx();\n    \n    // Stem through calyx\n    translate([0, 0, fruit_height-2])\n    stem();\n}\n\n// Create the shipova centered\ntranslate([0, 0, 0])\nshipova();",
    "renders": true
  },
  {
    "fruit": "mountainash",
    "openscad_code": "// Mountain Ash Tree - OpenSCAD\n// Realistic style, medium complexity\n// 3D printable, ~70mm height\n\n// Parameters\ntrunk_height = 40;\ntrunk_radius_bottom = 4;\ntrunk_radius_top = 2.5;\ncrown_radius = 25;\ncrown_height = 30;\nberry_radius = 1.2;\nleaf_length = 6;\nleaf_width = 1.5;\nleaf_thickness = 0.4;\n$fn = 32;\n\n// Main module\nmodule mountainash() {\n    union() {\n        // Trunk\n        trunk();\n        \n        // Crown\n        translate([0, 0, trunk_height]) {\n            crown();\n        }\n        \n        // Berries\n        berries();\n    }\n}\n\n// Trunk with slight taper\nmodule trunk() {\n    cylinder(h = trunk_height, r1 = trunk_radius_bottom, r2 = trunk_radius_top, center = false);\n    \n    // Add some branches\n    for (i = [1:4]) {\n        rotate([0, 0, i * 90 + 15]) {\n            translate([trunk_radius_top * 1.5, 0, trunk_height * 0.7]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h = 8, r1 = 1.5, r2 = 0.8, center = false);\n                }\n            }\n        }\n    }\n}\n\n// Crown with compound leaves\nmodule crown() {\n    // Main crown sphere\n    sphere(r = crown_radius);\n    \n    // Add leaf clusters\n    for (i = [1:8]) {\n        rotate([0, 0, i * 45]) {\n            for (j = [1:3]) {\n                rotate([0, j * 30 - 30, 0]) {\n                    translate([crown_radius * 0.6, 0, crown_radius * 0.3]) {\n                        leaf_cluster();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaf cluster module\nmodule leaf_cluster() {\n    // Central stem\n    cylinder(h = leaf_length * 0.8, r = 0.3, center = false);\n    \n    // Individual leaflets\n    for (k = [1:7]) {\n        rotate([0, 0, k * 51]) {\n            translate([0, 0, leaf_length * 0.1 * k]) {\n                rotate([60, 0, 30]) {\n                    scale([1, 0.5, 0.2]) {\n                        sphere(r = leaf_width, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Berries arranged in clusters\nmodule berries() {\n    // Main berry clusters\n    for (i = [1:5]) {\n        rotate([0, 0, i * 72]) {\n            translate([crown_radius * 0.7, 0, trunk_height + crown_height * 0.8]) {\n                berry_cluster();\n            }\n        }\n    }\n}\n\n// Single berry cluster\nmodule berry_cluster() {\n    // Central stem\n    cylinder(h = 5, r = 0.5, center = false);\n    \n    // Berries\n    for (j = [1:10]) {\n        rotate([j * 36, j * 15, 0]) {\n            translate([0, 2.5, j * 0.4]) {\n                sphere(r = berry_radius);\n            }\n        }\n    }\n}\n\n// Generate the tree\nmountainash();",
    "renders": true
  },
  {
    "fruit": "service",
    "openscad_code": "// OpenSCAD code for a realistic-style service revolver (medium complexity)\n// Overall size: ~100mm barrel length\n\n// Parameters\n$fn = 32;\nbarrel_length = 100;\nbarrel_diameter = 10;\ncylinder_diameter = 22;\ncylinder_length = 30;\ngrip_length = 70;\ngrip_width = 12;\ngrip_thickness = 30;\nframe_thickness = 8;\nhammer_height = 12;\ntrigger_guard_radius = 12;\n\n// Main assembly\nunion() {\n    // Barrel\n    translate([0, 0, barrel_diameter/2])\n    difference() {\n        // Outer barrel\n        cylinder(h=barrel_length, d=barrel_diameter);\n        // Inner barrel hole\n        translate([0, 0, -1])\n        cylinder(h=barrel_length+2, d=6);\n    }\n    \n    // Front sight\n    translate([0, barrel_length-2, barrel_diameter/2+2])\n    cube([2, 4, 4], center=true);\n    \n    // Frame\n    translate([0, barrel_length-15, 0])\n    difference() {\n        union() {\n            // Main frame block\n            cube([frame_thickness, 30, 25], center=true);\n            // Top strap\n            translate([0, 5, 12])\n            cube([frame_thickness, 20, 4], center=true);\n        }\n        // Cylinder recess\n        translate([0, -5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=frame_thickness+2, d=cylinder_diameter+2, center=true);\n    }\n    \n    // Cylinder\n    translate([0, barrel_length-25, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Cylinder body\n        cylinder(h=cylinder_length, d=cylinder_diameter, center=true);\n        // Chambers (6 holes)\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([cylinder_diameter/2-8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=5, d=6, center=true);\n        }\n        // Center pin hole\n        cylinder(h=cylinder_length+2, d=4, center=true);\n    }\n    \n    // Hammer\n    translate([frame_thickness/2+2, barrel_length-15, 15])\n    difference() {\n        union() {\n            // Main hammer body\n            cube([4, 8, hammer_height], center=true);\n            // Hammer spur\n            translate([0, 6, hammer_height/2-2])\n            cube([6, 4, 3], center=true);\n        }\n        // Cocking notch\n        translate([0, 4, 0])\n        cube([2, 2, hammer_height-4], center=true);\n    }\n    \n    // Grip\n    translate([0, barrel_length-40, -grip_width/2])\n    difference() {\n        // Main grip\n        scale([1, 1, 1.2])\n        cube([grip_thickness, grip_length, grip_width], center=true);\n        // Grip hollow\n        translate([0, -10, 0])\n        scale([0.8, 0.9, 0.8])\n        cube([grip_thickness-4, grip_length-10, grip_width-6], center=true);\n    }\n    \n    // Trigger guard\n    translate([0, barrel_length-35, -15])\n    difference() {\n        // Outer guard\n        rotate_extrude(angle=180, convexity=10)\n        translate([trigger_guard_radius, 0, 0])\n        circle(d=3);\n        // Inner opening\n        rotate_extrude(angle=180, convexity=10)\n        translate([trigger_guard_radius, 0, 0])\n        circle(d=5);\n    }\n    \n    // Trigger\n    translate([0, barrel_length-35, -trigger_guard_radius])\n    rotate([0, 0, -15])\n    cube([3, 15, 5], center=true);\n    \n    // Rear sight\n    translate([0, barrel_length-15, 20])\n    cube([frame_thickness, 8, 2], center=true);\n}",
    "renders": true
  },
  {
    "fruit": "tree",
    "openscad_code": "// Realistic Tree - Medium Complexity\n// 3D printable with no severe overhangs\n\n$fn = 32;\n\n// Overall scale\ntree_scale = 1;\n\nmodule trunk() {\n    // Main trunk\n    difference() {\n        cylinder(h=35, d1=10, d2=7, center=false);\n        // Hollow for material savings and printability\n        translate([0, 0, 5])\n            cylinder(h=30, d1=8, d2=5.5, center=false);\n    }\n    \n    // Trunk texture - bark segments\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([5, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=30, d1=2, d2=1.5, center=false);\n    }\n}\n\nmodule branches() {\n    // Branch 1\n    translate([0, 0, 30])\n    rotate([25, 0, 30])\n    cylinder(h=15, d1=5, d2=3);\n    \n    // Branch 2\n    translate([0, 0, 28])\n    rotate([-20, 0, -45])\n    cylinder(h=12, d1=4, d2=2.5);\n    \n    // Branch 3\n    translate([0, 0, 25])\n    rotate([15, 0, 120])\n    cylinder(h=10, d1=3.5, d2=2);\n}\n\nmodule foliage_cluster(x, y, z, scale) {\n    translate([x, y, z])\n    scale([scale, scale, scale])\n    union() {\n        sphere(d=15);\n        translate([4, 3, 2])\n        sphere(d=12);\n        translate([-3, -2, 3])\n        sphere(d=10);\n        translate([2, -4, -1])\n        sphere(d=8);\n    }\n}\n\nmodule foliage() {\n    // Create organic looking foliage with multiple overlapping spheres\n    foliage_cluster(0, 0, 40, 1);\n    foliage_cluster(8, 5, 38, 0.8);\n    foliage_cluster(-6, -4, 36, 0.7);\n    foliage_cluster(3, -7, 42, 0.6);\n    foliage_cluster(-5, 6, 39, 0.75);\n    \n    // Additional smaller clusters on branches\n    translate([4, 2, 42])\n    rotate([25, 0, 30])\n    foliage_cluster(0, 0, 0, 0.5);\n    \n    translate([-3, -2, 38])\n    rotate([-20, 0, -45])\n    foliage_cluster(0, 0, 0, 0.4);\n}\n\nmodule base() {\n    // Sturdy base for stability\n    translate([0, 0, -2])\n    cylinder(h=2, d=12);\n}\n\n// Assembly\nscale([tree_scale, tree_scale, tree_scale])\nunion() {\n    base();\n    trunk();\n    branches();\n    foliage();\n}",
    "renders": true
  },
  {
    "fruit": "vine",
    "openscad_code": "// Realistic Vine - Medium Complexity\n// 3D printable vine with leaves and tendrils\n\n$fn = 32;  // Increase resolution for smoother curves\n\nmodule vine_segment(height, start_radius, end_radius, twist) {\n    // Create tapered vine segment with slight twist\n    linear_extrude(height = height, twist = twist, slices = 20)\n        scale([start_radius, end_radius])\n            circle(r = 1);\n}\n\nmodule leaf(length, width, thickness) {\n    // Create a realistic leaf shape\n    difference() {\n        // Main leaf body\n        scale([length, width, thickness])\n            sphere(r = 1);\n        \n        // Cut leaf shape to be more realistic\n        translate([0, -width/2, 0])\n            cube([length*2, width, thickness*2], center = true);\n        \n        // Add leaf tip\n        translate([length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = width/3, r1 = width/4, r2 = 0);\n    }\n    \n    // Add leaf veins\n    for(i = [-0.3:0.2:0.3]) {\n        translate([i * width/2, 0, thickness/2 + 0.1])\n            rotate([90, 0, 0])\n                cylinder(h = length*0.8, r = thickness/4, center = true);\n    }\n}\n\nmodule tendril(coil_radius, coil_height, thickness) {\n    // Create curly tendril for realism\n    for(i = [0:5:360]) {\n        rotate([0, 0, i])\n            translate([coil_radius, 0, i * coil_height/360])\n                rotate([90, 0, 0])\n                    cylinder(h = coil_height/72, r = thickness, center = true);\n    }\n}\n\n// Main vine structure\nunion() {\n    // Base/main stem\n    translate([0, 0, 0])\n        vine_segment(40, 3, 2.5, 30);\n    \n    // Second segment with branch\n    translate([0, 0, 40])\n        vine_segment(30, 2.5, 2, 45);\n    \n    // Third segment curving\n    translate([5, 5, 70])\n        rotate([15, -10, 0])\n            vine_segment(25, 2, 1.5, 60);\n    \n    // Branches\n    // Branch 1\n    translate([8, 3, 25])\n        rotate([30, 0, 45])\n            vine_segment(20, 1.5, 1, 20);\n    \n    // Branch 2\n    translate([-7, -2, 45])\n        rotate([25, 0, -30])\n            vine_segment(15, 1.2, 0.8, 15);\n    \n    // Leaves\n    // Leaf on branch 1\n    translate([15, 8, 40])\n        rotate([0, -30, 45])\n            leaf(8, 5, 0.8);\n    \n    // Leaf on main stem\n    translate([-5, 8, 35])\n        rotate([0, 30, -20])\n            leaf(10, 6, 1);\n    \n    // Leaf on branch 2\n    translate([-12, -5, 55])\n        rotate([0, 20, -45])\n            leaf(7, 4.5, 0.7);\n    \n    // Leaf at top\n    translate([8, 10, 95])\n        rotate([0, -45, 30])\n            leaf(9, 5.5, 0.9);\n    \n    // Tendrils\n    // Tendril 1\n    translate([3, 3, 20])\n        rotate([0, 90, 0])\n            tendril(4, 8, 0.3);\n    \n    // Tendril 2\n    translate([-5, -3, 50])\n        rotate([0, 90, 45])\n            tendril(3.5, 6, 0.25);\n    \n    // Tendril 3\n    translate([7, -2, 75])\n        rotate([0, 90, -30])\n            tendril(5, 7, 0.3);\n}\n\n// Base connector for printing stability\ntranslate([0, 0, -2])\n    cylinder(h = 2, r = 5, center = false);",
    "renders": true
  },
  {
    "fruit": "bush",
    "openscad_code": "// Realistic Bush - Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;  // Smooth curves for better print quality\nwall_thickness = 1.2;  // Suitable for FDM printing\n\nmodule trunk() {\n    // Main trunk - slightly tapered cylinder\n    cylinder(h = 15, r1 = 5, r2 = 4, center = false);\n    \n    // Root flare at base\n    translate([0, 0, -2])\n        cylinder(h = 4, r1 = 6, r2 = 5, center = false);\n    \n    // Secondary branches\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([3, 0, 8])\n                rotate([30 - i * 10, 0, 0])\n                    cylinder(h = 10, r1 = 2.5, r2 = 1.5, center = false);\n    }\n}\n\nmodule leaf_cluster(x, y, z, scale_factor, rotation_angle) {\n    translate([x, y, z])\n        rotate([0, 0, rotation_angle])\n            scale([scale_factor, scale_factor, scale_factor]) {\n                // Main leaf mass - ellipsoid shape\n                sphere(r = 8);\n                \n                // Add irregularity with smaller spheres\n                for (j = [0:5]) {\n                    rotate([j * 60, j * 20, j * 40])\n                        translate([random(3, 5), random(2, 4), random(1, 3)])\n                            sphere(r = random(3, 5));\n                }\n                \n                // Hollow out interior to save material\n                difference() {\n                    scale([1, 1, 1]);\n                    sphere(r = 6.5);\n                }\n            }\n}\n\nmodule bush() {\n    // Base trunk structure\n    trunk();\n    \n    // Main foliage clusters arranged in layers\n    // Bottom layer - larger clusters\n    for (layer = [0:3]) {\n        for (i = [0:7]) {\n            angle = i * 45 + layer * 11;\n            radius = 12 + layer * 3;\n            height = 15 + layer * 6;\n            scale_factor = 1.0 - layer * 0.15;\n            \n            leaf_cluster(\n                cos(angle) * radius,\n                sin(angle) * radius,\n                height,\n                scale_factor,\n                angle + 30\n            );\n        }\n    }\n    \n    // Top clusters - smaller and denser\n    for (k = [0:5]) {\n        angle = k * 72;\n        leaf_cluster(\n            cos(angle) * 8,\n            sin(angle) * 8,\n            35 + k * 2,\n            0.7,\n            angle\n        );\n    }\n    \n    // Central cluster on top\n    leaf_cluster(0, 0, 42, 1.2, 0);\n}\n\n// Generate the complete bush\nbush();",
    "renders": true
  },
  {
    "fruit": "thorn",
    "openscad_code": "// Realistic Thorn - Medium Complexity\n// Basic dimensions\nbase_d = 8;\ntip_d = 1;\nlength = 60;\nbase_h = 3;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main thorn body - hollow cone with wall thickness\nmodule thorn_body() {\n    difference() {\n        // Outer cone\n        cylinder(h=length, d1=tip_d*2, d2=base_d, $fn=32);\n        \n        // Inner hollow\n        translate([0,0,wall])\n        cylinder(h=length-wall, d1=tip_d*2-wall*2, d2=base_d-wall*2, $fn=32);\n    }\n}\n\n// Realistic surface ridges\nmodule ridges() {\n    ridge_count = 12;\n    \n    for(i=[0:ridge_count-1]) {\n        rotate([0,0,i*360/ridge_count])\n        translate([base_d/2-0.5, 0, 0])\n        rotate([90,0,0])\n        scale([1, 0.3, 1])\n        cylinder(h=length*0.8, d1=0.5, d2=0.1, $fn=8);\n    }\n}\n\n// Base attachment point\nmodule thorn_base() {\n    // Main base\n    difference() {\n        cylinder(h=base_h, d=base_d+2, $fn=32);\n        // Hollow base\n        cylinder(h=base_h, d=base_d, $fn=32);\n    }\n    \n    // Attachment ridges\n    for(i=[0:8]) {\n        rotate([0,0,i*45])\n        translate([base_d/2+0.5, 0, base_h/2])\n        rotate([90,0,0])\n        scale([0.5, 0.3, 1])\n        cylinder(h=base_h, d=1.5, $fn=8);\n    }\n}\n\n// Slight curve for realism\nmodule curved_thorn() {\n    // Create curve using hull of spheres\n    hull() {\n        // Tip\n        translate([0,0,length])\n        sphere(d=tip_d*2, $fn=16);\n        \n        // Mid point offset\n        translate([2,0,length/2])\n        sphere(d=tip_d*3, $fn=16);\n        \n        // Base\n        translate([0,0,0])\n        sphere(d=base_d, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    thorn_base();\n    \n    // Curved body\n    translate([0,0,base_h])\n    rotate([0,-5,0])\n    thorn_body();\n    \n    // Surface details\n    translate([0,0,base_h+wall])\n    rotate([0,-5,0])\n    ridges();\n}",
    "renders": true
  },
  {
    "fruit": "fruit",
    "openscad_code": "// Realistic 3D-printable Apple\n// Medium complexity (~100 lines)\n\nmodule apple_body() {\n    difference() {\n        // Main apple shape\n        sphere(d = 50, $fn = 64);\n        \n        // Indentation at top\n        translate([0, 0, 20])\n            cylinder(h = 10, d1 = 12, d2 = 0, $fn = 32);\n        \n        // Indentation at bottom\n        translate([0, 0, -25])\n            cylinder(h = 10, d1 = 0, d2 = 12, $fn = 32);\n    }\n}\n\nmodule stem() {\n    // Stem with slight curve\n    translate([0, 0, 25])\n        rotate([0, 10, 0])\n            cylinder(h = 15, d1 = 3, d2 = 2, $fn = 16);\n    \n    // Small leaf\n    translate([2, 5, 30])\n        rotate([0, -20, 45])\n            scale([1, 0.6, 0.1])\n                sphere(d = 8, $fn = 16);\n}\n\nmodule calyx() {\n    // Sepals around stem\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 4, 23])\n                rotate([60, 0, 0])\n                    cylinder(h = 6, d1 = 2, d2 = 1, $fn = 8);\n    }\n}\n\nmodule apple() {\n    union() {\n        apple_body();\n        stem();\n        calyx();\n        \n        // Slight asymmetry for realism\n        translate([3, -2, 0])\n            scale([1.05, 1, 1])\n                sphere(d = 50, $fn = 64);\n    }\n}\n\n// Generate the apple\napple();",
    "renders": true
  }
]