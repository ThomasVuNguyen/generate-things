[
  {
    "fruit": "apple",
    "openscad_code": "// Realistic Apple - Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n// Overall dimensions\napple_radius = 25;\nstem_length = 12;\nstem_radius = 2;\n\n// Apple body with indentations\nmodule apple_body() {\n    // Main apple shape - slightly flattened sphere\n    scale([1, 1, 0.9])\n    sphere(r = apple_radius, $fn = 64);\n    \n    // Top indentation for stem\n    translate([0, 0, apple_radius * 0.9])\n    rotate_extrude(angle = 360, $fn = 32)\n    translate([0, 0])\n    polygon(points = [[0, 0], [apple_radius * 0.2, -apple_radius * 0.3], [0, -apple_radius * 0.3]]);\n    \n    // Bottom indentation\n    translate([0, 0, -apple_radius * 0.9])\n    rotate_extrude(angle = 360, $fn = 32)\n    translate([0, 0])\n    polygon(points = [[0, 0], [apple_radius * 0.15, apple_radius * 0.2], [0, apple_radius * 0.2]]);\n}\n\n// Apple stem with slight curve\nmodule apple_stem() {\n    // Main stem body\n    translate([0, 0, apple_radius * 0.9 + stem_length * 0.5])\n    rotate([0, 5, 0])\n    cylinder(h = stem_length, r = stem_radius, $fn = 16);\n    \n    // Stem base flare\n    translate([0, 0, apple_radius * 0.9])\n    cylinder(h = 2, r1 = stem_radius * 1.5, r2 = stem_radius, $fn = 16);\n}\n\n// Apple leaf\nmodule apple_leaf() {\n    translate([stem_radius * 1.5, 0, apple_radius * 0.9 + stem_length * 0.8])\n    rotate([0, 30, 45])\n    scale([1, 0.6, 0.1])\n    sphere(r = 8, $fn = 32);\n    \n    // Leaf stem\n    translate([stem_radius * 1.5, 0, apple_radius * 0.9 + stem_length * 0.8])\n    rotate([0, 30, 45])\n    translate([8, 0, 0])\n    cylinder(h = 4, r = 0.5, $fn = 8);\n}\n\n// Apple calyx (bottom star pattern)\nmodule apple_calyx() {\n    difference() {\n        // Base shape\n        translate([0, 0, -apple_radius * 0.85])\n        cylinder(h = 2, r = apple_radius * 0.15, $fn = 32);\n        \n        // Star pattern cuts\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([apple_radius * 0.08, 0, -apple_radius * 0.87])\n            cube([apple_radius * 0.12, 2, 4], center = true);\n        }\n    }\n}\n\n// Apple surface details - subtle bumps\nmodule apple_surface() {\n    // No actual surface details for 3D printing simplicity\n    // Could add bump texture here if needed\n}\n\n// Main apple assembly\nunion() {\n    // Main apple body\n    apple_body();\n    \n    // Stem assembly\n    union() {\n        apple_stem();\n        apple_leaf();\n    }\n    \n    // Calyx at bottom\n    apple_calyx();\n    \n    // Optional: Small imperfections for realism\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([apple_radius * 0.7, 0, apple_radius * 0.2])\n        sphere(r = 1.5, $fn = 8);\n    }\n}",
    "renders": true
  },
  {
    "fruit": "pear",
    "openscad_code": "// Realistic Pear - Medium Complexity\n// 3D printable, ~70mm height\n\npear_size = 70;\nstem_length = 8;\nstem_diameter = 3;\n\nmodule pear_body() {\n    // Main pear body - combination of spheres with tapering\n    union() {\n        // Upper bulb (shoulders)\n        translate([0, 0, 25])\n            scale([1, 1, 0.8])\n            sphere(d=35, $fn=60);\n        \n        // Lower bulb (bulbous bottom)\n        translate([0, 0, 8])\n            scale([1.2, 1.2, 1.1])\n            sphere(d=40, $fn=60);\n        \n        // Tapering bottom\n        translate([0, 0, -5])\n            scale([0.7, 0.7, 0.6])\n            sphere(d=30, $fn=60);\n    }\n}\n\nmodule stem() {\n    // Main stem cylinder\n    translate([0, 0, 38])\n        cylinder(h=stem_length, d=stem_diameter, $fn=20);\n    \n    // Stem flare at base\n    translate([0, 0, 38])\n        cylinder(h=2, d1=stem_diameter*1.5, d2=stem_diameter, $fn=20);\n}\n\nmodule leaf() {\n    // Single leaf shape using scaled sphere and cube\n    translate([0, 12, 42])\n        rotate([0, -20, 30])\n        union() {\n            // Leaf body\n            scale([2, 0.8, 0.1])\n                sphere(d=8, $fn=30);\n            \n            // Leaf tip extension\n            translate([8, 0, 0])\n                scale([0.5, 0.5, 0.1])\n                sphere(d=6, $fn=20);\n        }\n}\n\nmodule pear_detail() {\n    // Vertical indent lines for texture\n    for(i=[0:15:360]) {\n        rotate([0, 0, i])\n            translate([17, 0, 0])\n                scale([0.1, 1, 1])\n                cube([1, 0.5, 60], center=true);\n    }\n    \n    // Small indent at bottom\n    translate([0, 0, -5])\n        rotate_extrude($fn=30)\n            translate([8, 0, 0])\n                circle(d=3, $fn=20);\n}\n\n// Main pear assembly\nunion() {\n    pear_body();\n    stem();\n    leaf();\n    pear_detail();\n}\n\n// Flatten bottom for printing\ntranslate([0, 0, -7])\n    cube([40, 40, 2], center=true);",
    "renders": true
  },
  {
    "fruit": "peach",
    "openscad_code": "// Peach 3D Model - Realistic Style, Medium Complexity\n// Size: ~70mm tall\n\nmodule peach_body() {\n    // Main peach body - slightly flattened sphere for realistic shape\n    translate([0, 0, 5]) \n        scale([1.1, 1, 0.9]) \n        sphere(d=55, $fn=64);\n    \n    // Bottom indentation\n    translate([0, 0, -25])\n        rotate([0, 0, 0])\n        cylinder(h=10, d1=15, d2=8, $fn=32);\n}\n\nmodule peach_crease() {\n    // Vertical crease line\n    difference() {\n        peach_body();\n        translate([0, -27, 5])\n            rotate([0, 90, 0])\n            cylinder(h=60, d=3, $fn=32);\n    }\n}\n\nmodule stem() {\n    // Stem base\n    translate([0, 0, 30])\n        rotate([20, 0, 0])\n        cylinder(h=8, d=8, $fn=16);\n    \n    // Stem extension\n    translate([0, 0, 35])\n        rotate([30, 0, 0])\n        cylinder(h=12, d=5, $fn=16);\n    \n    // Small leaf\n    translate([5, 5, 40])\n        rotate([45, 30, 45])\n        scale([1, 0.3, 1])\n        sphere(d=8, $fn=16);\n}\n\nmodule dimples() {\n    // Create realistic peach dimples using small spheres\n    for(a = [0:30:150]) {\n        for(b = [30:30:150]) {\n            rotate([a, b, 0])\n            translate([0, 0, 25])\n                difference() {\n                    sphere(d=55, $fn=64);\n                    translate([sin(a)*cos(b)*25, sin(a)*sin(b)*25, cos(a)*25])\n                        sphere(d=8, $fn=16);\n                }\n        }\n    }\n}\n\nmodule realistic_peach() {\n    // Combine all parts\n    union() {\n        // Main body with crease\n        peach_crease();\n        \n        // Add stem\n        stem();\n        \n        // Add subtle dimples for texture\n        difference() {\n            sphere(d=55, $fn=64);\n            dimples();\n        }\n    }\n}\n\n// Render the complete peach\nscale([1, 1, 1])\nrealistic_peach();",
    "renders": true
  },
  {
    "fruit": "plum",
    "openscad_code": "// Realistic Plum - Medium Complexity\n// Designed for 3D printing at ~60mm height\n\n// Main plum body\nmodule plum_body() {\n    // Base ellipsoid shape\n    difference() {\n        union() {\n            // Main body - slightly flattened sphere\n            scale([1, 1.2, 0.9])\n            sphere(d=40, $fn=64);\n            \n            // Bottom bulge for realistic plum shape\n            translate([0, 0, -18])\n            scale([0.8, 1, 0.6])\n            sphere(d=25, $fn=32);\n            \n            // Top depression\n            translate([0, 0, 18])\n            scale([0.7, 0.7, 0.3])\n            sphere(d=15, $fn=32);\n        }\n        \n        // Stem cavity\n        translate([0, 0, 20])\n        cylinder(h=8, d1=4, d2=2, $fn=16);\n        \n        // Natural seam groove\n        rotate([0, 90, 0])\n        translate([0, 0, -20])\n        scale([0.05, 1, 1])\n        cube([40, 40, 40], center=true);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20])\n    rotate([0, 0, rand(5, 15)])\n    cylinder(h=12, d1=2.5, d2=1.5, $fn=8);\n}\n\n// Leaf\nmodule leaf() {\n    translate([0, 8, 20])\n    rotate([0, -20, 0])\n    scale([1, 0.6, 0.1])\n    sphere(d=12, $fn=32);\n    \n    // Leaf vein\n    translate([0, 8, 20.5])\n    rotate([0, -20, 0])\n    scale([0.05, 0.4, 0.01])\n    cube([10, 10, 1], center=true);\n}\n\n// Surface bumps for realistic texture\nmodule surface_texture() {\n    for(i = [0:15]) {\n        rotate([rand(0, 360), rand(0, 360), rand(0, 360)])\n        translate([\n            rand(-18, 18),\n            rand(-18, 18),\n            rand(-15, 15)\n        ]) {\n            scale([1, 1, 0.7])\n            sphere(d=rand(2, 4), $fn=8);\n        }\n    }\n}\n\n// Bloom (natural powdery coating)\nmodule bloom() {\n    difference() {\n        scale([1.02, 1.02, 1.02])\n        plum_body();\n        plum_body();\n    }\n}\n\n// Bloom surface texture\nmodule bloom_texture() {\n    %surface_texture();\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assembly\nunion() {\n    // Main plum with hollow interior for printing\n    difference() {\n        plum_body();\n        scale([0.9, 0.9, 0.9])\n        translate([0, 0, -2])\n        plum_body();\n    }\n    \n    // Surface details\n    union() {\n        stem();\n        leaf();\n        surface_texture();\n    }\n    \n    // Light bloom coating\n    bloom();\n}",
    "renders": true
  },
  {
    "fruit": "cherry",
    "openscad_code": "// Cherry with stem - 3D printable medium complexity realistic style\n// Overall size ~55 mm tall\n\n$fn = 64;  // Smooth surfaces\n\n// Main cherry body\nmodule cherry_body() {\n    // Core sphere\n    sphere(20);\n    \n    // Slight bulge at bottom for realistic shape\n    translate([0,0,-3])\n        scale([1.1,1.1,0.7])\n            sphere(20);\n    \n    // Small indent at top for stem\n    translate([0,0,19])\n        rotate_extrude()\n            translate([8,0,0])\n                circle(r=3);\n}\n\n// Stem structure\nmodule stem() {\n    // Main stem\n    translate([0,0,20])\n        rotate([0,15,0])\n            cylinder(h=35, r1=2.5, r2=1.5);\n    \n    // Stem tip\n    translate([0,0,54.5])\n        rotate([0,15,0])\n            sphere(1.5);\n    \n    // Small leaf\n    translate([5,0,45])\n        rotate([0,15,-30])\n            scale([1,0.6,0.1])\n                sphere(8);\n}\n\n// Surface details - small bumps and dimples\nmodule cherry_surface() {\n    for (i = [0:30]) {\n        rotate([0, i*12, i*7.5])\n            translate([20,0,0])\n                sphere(0.5);\n    }\n    \n    // Tiny indent at bottom\n    translate([0,0,-20])\n        sphere(1);\n}\n\n// Create full cherry\nunion() {\n    // Main body with surface details\n    difference() {\n        union() {\n            cherry_body();\n            cherry_surface();\n        }\n        \n        // Remove indent for stem connection\n        translate([0,0,19])\n            cylinder(h=5, r=2.5);\n    }\n    \n    // Add stem\n    stem();\n}\n\n// Optional: Flatten bottom slightly for printing stability\ntranslate([0,0,-21])\n    cube([40,40,1], center=true);",
    "renders": true
  },
  {
    "fruit": "apricot",
    "openscad_code": "// Realistic apricot, medium complexity\n// Designed for 3D printing, no overhangs, 50 mm tall\n\n$fn = 32;\n\n// Main apricot body\nmodule apricot_body() {\n    difference() {\n        // Main sphere slightly squashed\n        scale([1.05, 1, 0.9])\n        sphere(d=45);\n        \n        // Stem cavity\n        translate([0, 0, 20])\n        rotate([0, 0, 0])\n        cylinder(h=8, d1=6, d2=3, $fn=16);\n        \n        // Bottom indent\n        translate([0, 0, -20.5])\n        sphere(d=8);\n    }\n}\n\n// Surface indentations for realism\nmodule surface_detail() {\n    for (i = [0:15]) {\n        rotate([0, 0, i*24])\n        translate([18, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        sphere(d=3);\n    }\n    \n    for (j = [0:11]) {\n        rotate([0, 0, j*30 + 15])\n        translate([12, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        sphere(d=2.5);\n    }\n}\n\n// Stem\nmodule stem() {\n    translate([0, 0, 20.5])\n    rotate([0, 0, 5])\n    cylinder(h=12, d1=2.5, d2=1.5, $fn=8);\n}\n\n// Leaf\nmodule leaf() {\n    translate([0, 8, 21])\n    rotate([0, 110, -10])\n    scale([0.4, 1, 0.1])\n    difference() {\n        sphere(d=15);\n        translate([0, -8, 0])\n        scale([1, 1, 10])\n        cube([20, 8, 2], center=true);\n    }\n}\n\n// Crease line\nmodule crease() {\n    translate([0, -22.5, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.8, 0.05])\n    cylinder(h=45, d=45);\n}\n\n// Assembly\nunion() {\n    difference() {\n        apricot_body();\n        surface_detail();\n    }\n    stem();\n    leaf();\n    crease();\n}",
    "renders": true
  },
  {
    "fruit": "nectarine",
    "openscad_code": "// Realistic Nectarine – OpenSCAD\n// Approx. 65 mm tall, 3 mm wall thickness, overhang-safe\n\n$fn = 48;              // Smooth curves\nwall = 3;              // 3D-printable wall thickness\n\nmodule nectarine() {\n    // Main fruit body – slightly flattened sphere\n    translate([0, 0, 0])\n        scale([1, 1, 0.9])\n        sphere(d = 60);\n\n    // Crease line along the natural seam\n    difference() {\n        translate([0, 0, 0])\n            scale([1, 1, 0.9])\n            sphere(d = 60);\n        translate([0, -30, 0])\n            rotate([0, 0, 90])\n            cube([60, 0.5, 30], center = true);\n    }\n\n    // Stylized stem cavity – shallow cone\n    difference() {\n        translate([0, 0, 0])\n            scale([1, 1, 0.9])\n            sphere(d = 60);\n        translate([0, 0, 27])\n            cylinder(h = 10, d1 = 8, d2 = 12, $fn = 32);\n    }\n\n    // Stem stub – short cylinder\n    translate([0, 0, 30])\n        cylinder(h = 8, d = 6, center = true);\n\n    // Surface bumps / pores – small spheres half-embedded\n    for (i = [0 : 5 : 360]) {\n        a = i;\n        b = (i * 137.5) % 360;   // Fibonacci spread\n        r = 29;\n        x = sin(a) * cos(b) * r;\n        y = cos(a) * cos(b) * r;\n        z = sin(b) * r * 0.9 + 5;\n        translate([x, y, z])\n            sphere(d = 2.5);\n    }\n\n    // Leaf – two thin cylinders at stem\n    color(\"darkgreen\")\n    translate([3, 0, 30])\n    rotate([0, -15, 30])\n    scale([1, 0.3, 1])\n    cylinder(h = 15, d = 8, center = true);\n\n    color(\"darkgreen\")\n    translate([-3, 0, 30])\n    rotate([0, 15, -30])\n    scale([1, 0.3, 1])\n    cylinder(h = 15, d = 8, center = true);\n}\n\n// Hollow shell for printing\ndifference() {\n    nectarine();\n    scale([1, 1, 0.9])\n    sphere(d = 60 - wall * 2);\n}\n\n// Small flat spot on bottom for stable printing\ndifference() {\n    translate([0, 0, -30])\n        sphere(d = 60);\n    translate([0, 0, -30.5])\n        cube([60, 60, 1], center = true);\n}",
    "renders": true
  },
  {
    "fruit": "grape",
    "openscad_code": "// Realistic 3D printable grape\n// Overall size ~65 mm tall\n\n// Stem parameters\nstem_dia = 5;\nstem_h = 25;\n\n// Berry parameters\nberry_dia = 12;\nberry_step = 11;  // center-to-center spacing\nrows = 5;\nberries_per_row = [5, 7, 9, 7, 5];\n\n// Calyx (top part) parameters\ncalyx_h = 4;\ncalyx_dia = 18;\n\n// Small indent parameters for realism\nindent_dia = 1.5;\nindent_depth = 0.8;\n\n// Union all parts\nunion() {\n\n    // Main stem\n    translate([0, 0, stem_h / 2])\n        cylinder(h = stem_h, d = stem_dia, $fn = 20);\n\n    // Calyx disc on top of stem\n    translate([0, 0, stem_h])\n        cylinder(h = calyx_h, d = calyx_dia, $fn = 30);\n\n    // Generate berries in a tapered cluster\n    for (i = [0 : rows - 1]) {\n        angle_step = 360 / berries_per_row[i];\n        radius = (rows - 1 - i) * berry_step / 2;\n        z = stem_h - i * berry_step * 0.8;\n\n        for (j = [0 : berries_per_row[i] - 1]) {\n            angle = j * angle_step;\n            x = radius * cos(angle);\n            y = radius * sin(angle);\n\n            // Individual berry with indent for realism\n            translate([x, y, z])\n                difference() {\n                    sphere(d = berry_dia, $fn = 20);\n\n                    // Four tiny indents on each berry surface\n                    for (k = [0 : 3]) {\n                        rot = k * 90;\n                        translate([\n                            0,\n                            berry_dia / 2 * cos(rot),\n                            berry_dia / 2 * sin(rot)\n                        ])\n                            rotate([0, 90 * sin(rot), 0])\n                                cylinder(\n                                    h = indent_depth + 1,\n                                    d = indent_dia,\n                                    $fn = 8\n                                );\n                    }\n                }\n        }\n    }\n\n    // Small connecting stems between berries\n    for (i = [0 : rows - 2]) {\n        curr_cnt = berries_per_row[i];\n        next_cnt = berries_per_row[i + 1];\n        curr_z = stem_h - i * berry_step * 0.8;\n        next_z = stem_h - (i + 1) * berry_step * 0.8;\n\n        for (j = [0 : curr_cnt - 1]) {\n            angle = j * 360 / curr_cnt;\n            x1 = (rows - 1 - i) * berry_step / 2 * cos(angle);\n            y1 = (rows - 1 - i) * berry_step / 2 * sin(angle);\n\n            // Connect to closest berries in next row\n            for (k = [0 : next_cnt - 1]) {\n                angle2 = k * 360 / next_cnt;\n                x2 = (rows - 1 - (i + 1)) * berry_step / 2 * cos(angle2);\n                y2 = (rows - 1 - (i + 1)) * berry_step / 2 * sin(angle2);\n\n                // Simple thin cylinder connector\n                translate([x1, y1, curr_z])\n                    rotate([0, 90 + atan2(next_z - curr_z, sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))), atan2(y2 - y1, x2 - x1)])\n                        cylinder(h = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (next_z - curr_z) * (next_z - curr_z)), d = 1, $fn = 6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "fruit": "strawberry",
    "openscad_code": "// Realistic Strawberry Model\n// Medium complexity, 3D printable\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body parameters\nbody_radius = 30 * scale_factor;\nbody_height = 35 * scale_factor;\nbody_segments = 48;\n\n// Leaf parameters\nleaf_count = 6;\nleaf_length = 15 * scale_factor;\nleaf_width = 12 * scale_factor;\nleaf_thickness = 2 * scale_factor;\n\n// Seed parameters\nseed_radius = 1.2 * scale_factor;\nseed_rows = 8;\nseeds_per_row = 12;\n\n// Stem parameters\nstem_radius = 4 * scale_factor;\nstem_height = 8 * scale_factor;\n\nmodule strawberry_body() {\n    // Main body - ellipsoid with slight taper\n    difference() {\n        scale([1, 1, 1.1])\n        sphere(d=body_radius*2, $fn=body_segments);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -body_radius])\n        cube([body_radius*2, body_radius*2, body_radius], center=true);\n        \n        // Hollow out slightly for material saving\n        translate([0, 0, -5*scale_factor])\n        scale([0.85, 0.85, 0.9])\n        sphere(d=body_radius*1.8, $fn=body_segments);\n    }\n}\n\nmodule leaf_shape() {\n    // Basic leaf shape\n    hull() {\n        translate([0, leaf_length/3, 0])\n        sphere(d=leaf_width/2, $fn=8);\n        \n        translate([0, -leaf_length/3, 0])\n        sphere(d=leaf_width/3, $fn=8);\n    }\n}\n\nmodule leaves() {\n    // Calyx leaves around top\n    for(i = [0:leaf_count-1]) {\n        rotate([0, 0, i * 360/leaf_count])\n        translate([0, body_radius*0.6, body_height*0.85])\n        rotate([90, 0, -30])\n        scale([1, 1, leaf_thickness/leaf_width])\n        leaf_shape();\n    }\n}\n\nmodule seeds() {\n    // Surface seeds arranged in spiral pattern\n    for(row = [0:seed_rows-1]) {\n        row_height = body_height * 0.8 * (row + 1) / seed_rows;\n        row_radius = sqrt(pow(body_radius, 2) - pow(row_height - body_height/2, 2)) * 0.9;\n        \n        for(seed = [0:seeds_per_row-1]) {\n            angle = seed * 360/seeds_per_row + row * 15;\n            x = cos(angle) * row_radius;\n            y = sin(angle) * row_radius;\n            z = row_height - body_height/2;\n            \n            // Calculate surface normal\n            normal_angle = atan2(sqrt(x*x + y*y), z);\n            rotate_x = 90 - normal_angle;\n            \n            translate([x, y, z])\n            rotate([rotate_x, 0, angle])\n            sphere(d=seed_radius*2, $fn=8);\n        }\n    }\n}\n\nmodule stem() {\n    // Small stem at top\n    translate([0, 0, body_height*0.9])\n    cylinder(h=stem_height, r1=stem_radius, r2=stem_radius*0.7, $fn=16);\n}\n\n// Main assembly\nunion() {\n    strawberry_body();\n    leaves();\n    stem();\n    \n    // Add seeds as protrusions\n    translate([0, 0, body_height/2])\n    seeds();\n}",
    "renders": true
  },
  {
    "fruit": "raspberry",
    "openscad_code": "// Raspberry - Realistic style, medium complexity\n// Designed for 3D printing without supports\n\n// Overall dimensions: ~70mm tall, ~60mm diameter\n\n$fn = 32;  // Smooth curves for printing\n\n// Main raspberry body\nmodule raspberry_body() {\n    difference() {\n        // Core berry shape - ellipsoid\n        scale([1, 1, 1.2])\n        sphere(d = 50);\n        \n        // Hollow out center for printing\n        scale([0.8, 0.8, 1])\n        sphere(d = 45);\n    }\n}\n\n// Individual drupelet (raspberry segment)\nmodule drupelet(size, angle1, angle2) {\n    // Position on spherical surface\n    translate([0, 0, 15])\n    rotate([angle1, 0, angle2])\n    translate([0, 25, 0])\n    \n    // Drupelet shape - slightly flattened sphere\n    scale([1, 1, 0.7])\n    sphere(d = size);\n}\n\n// Layer of drupelets around the berry\nmodule drupelet_layer(height, count, size) {\n    for (i = [0 : count - 1]) {\n        rotate([0, 0, i * 360 / count])\n        translate([0, 0, height])\n        drupelet(size, 15, 0);\n    }\n}\n\n// Create the berry with multiple layers of drupelets\nmodule berry() {\n    union() {\n        // Core structure\n        raspberry_body();\n        \n        // Bottom layer - 12 drupelets\n        for (i = [0 : 11]) {\n            rotate([0, 0, i * 30])\n            translate([0, 22, -15])\n            drupelet(8, 45, 0);\n        }\n        \n        // Middle layer - 10 drupelets\n        for (i = [0 : 9]) {\n            rotate([0, 0, i * 36])\n            translate([0, 24, -5])\n            drupelet(9, 25, 0);\n        }\n        \n        // Upper layer - 8 drupelets\n        for (i = [0 : 7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 20, 5])\n            drupelet(8, 10, 0);\n        }\n        \n        // Top layer - 6 drupelets\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 15, 15])\n            drupelet(7, -15, 0);\n        }\n    }\n}\n\n// Raspberry stem/calyx\nmodule stem() {\n    // Main stem\n    translate([0, 0, 30])\n    cylinder(h = 15, d1 = 8, d2 = 5);\n    \n    // Sepals (green leaves around stem)\n    for (i = [0 : 4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 6, 30])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 0.3])\n        cylinder(h = 8, d = 4);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main berry\n    berry();\n    \n    // Stem on top\n    stem();\n}\n\n// Add small details - tiny hairs on drupelets\nmodule hairs() {\n    for (i = [0 : 30]) {\n        rotate([0, 0, i * 12])\n        translate([0, 25 + sin(i) * 5, -20 + i])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d = 0.5);\n    }\n}\n\n// Uncomment to add hairs (may affect printability)\n// %hairs();",
    "renders": true
  },
  {
    "fruit": "blueberry",
    "openscad_code": "// Blueberry - Realistic & 3D-printable\n// ~20 mm diameter\n\n/* ---------- PARAMETERS ---------- */\ndiam = 20;            // overall berry diameter (mm)\nwall = 1.2;           // minimum printable wall thickness (mm)\nn_petals = 5;         // calyx lobes\nsepal_len = 3;        // length of each sepal\nsepal_t = 0.8;        // sepal thickness\ncrown_h = 1.5;        // height of calyx crown\nstem_d = 1.6;         // stem diameter\nstem_h = 7;           // stem protrusion\n\n/* ---------- MAIN BERRY ---------- */\ndifference() {\n    // Smooth main body\n    sphere(d = diam, $fn = 100);\n\n    // Remove inner cavity for shell printing\n    translate([0,0, -wall/2])\n        sphere(d = diam - 2*wall, $fn = 100);\n\n    // Small flat base so it sits without rolling\n    translate([0,0, -diam/2 - 0.1])\n        cube([diam*1.1, diam*1.1, 1], center = true);\n}\n\n/* ---------- DETAILED CALYX (TOP) ---------- */\nmodule sepal() {\n    // petal-shaped sepal\n    difference() {\n        union() {\n            // main blade\n            scale([1, 1.3, 1])\n                sphere(d = sepal_len*2, $fn = 20);\n            // small stem-like base\n            cylinder(h = sepal_t*2, d = sepal_t*2.5, $fn = 10);\n        }\n        // taper tip\n        translate([0, sepal_len*0.9, 0])\n            rotate([90,0,0])\n                cylinder(h = sepal_len*1.5, d1 = sepal_len*1.3, d2 = 0, $fn = 10);\n    }\n}\n\n// circular crown base for sepals\ntranslate([0,0, diam/2 - crown_h/2])\n    cylinder(h = crown_h, d = diam*0.6, $fn = 50);\n\n// distribute sepals radially\nfor (i = [0 : n_petals-1]) {\n    angle = i*360/n_petals;\n    translate([0,0, diam/2])\n        rotate([0,0, angle])\n            translate([0, diam*0.20, 0])\n                rotate([80,0,0])\n                    sepal();\n}\n\n/* ---------- STEM ---------- */\ntranslate([0,0, diam/2 + crown_h])\n    cylinder(h = stem_h, d = stem_d, $fn = 20);\n\n// slight bulb at stem end\ntranslate([0,0, diam/2 + crown_h + stem_h])\n    sphere(d = stem_d*1.4, $fn = 20);\n\n/* ---------- FIVE LIGHT DOTS (bloom) ---------- */\ndots = [[0.3,0.8],[-0.7,0.5],[0.6,-0.6],[-0.2,-0.85],[0.8,0.1]];\nfor (p = dots) {\n    translate([p[0]*diam/2, p[1]*diam/2, sqrt((diam/2)^2 - (p[0]*diam/2)^2 - (p[1]*diam/2)^2) - 0.2])\n        sphere(d = 0.6, $fn = 8);\n}",
    "renders": true
  },
  {
    "fruit": "blackberry",
    "openscad_code": "// Blackberry - realistic style with medium complexity\n// Approx 70mm tall\n\n// Main parameters\nberry_diameter = 32;  // Overall berry diameter\ndruplet_size = 5;     // Individual druplet sphere size\nstem_length = 35;     // Stem length\nbase_wall = 1.5;      // Wall thickness for 3D printing\n\n// Create the blackberry fruit\nmodule blackberry() {\n    difference() {\n        union() {\n            // Core structure - slightly flattened sphere\n            scale([1, 1, 0.8])\n                sphere(d = berry_diameter);\n            \n            // Add druplets in layered pattern\n            for (layer = [0:4]) {\n                rotate([0, 0, layer * 36]) {\n                    for (angle = [0:30:330]) {\n                        rotate([0, 0, angle]) {\n                            translate([0, berry_diameter/2 - 5, layer * 5 - 8]) {\n                                sphere(d = druplet_size);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Additional druplets for fuller appearance\n            for (layer = [1:3]) {\n                rotate([0, 0, layer * 72 + 18]) {\n                    for (angle = [0:45:315]) {\n                        rotate([0, 0, angle]) {\n                            translate([0, berry_diameter/2 - 8, layer * 6 - 6]) {\n                                sphere(d = druplet_size * 0.9);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Top druplets\n            rotate([0, 0, 45]) {\n                for (angle = [0:60:300]) {\n                    rotate([0, 0, angle]) {\n                        translate([0, berry_diameter/4, berry_diameter/2 - 5]) {\n                            sphere(d = druplet_size * 0.8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hollow out center for printing\n        scale([0.8, 0.8, 0.7])\n            sphere(d = berry_diameter - base_wall * 2);\n    }\n}\n\n// Create stem with realistic texture\nmodule stem() {\n    union() {\n        // Main stem cylinder\n        cylinder(h = stem_length, d1 = 4, d2 = 2.5, $fn = 8);\n        \n        // Add small bumps for texture\n        for (i = [0:3:stem_length-5]) {\n            translate([0, 0, i]) {\n                rotate([0, 0, i * 45]) {\n                    translate([2.2, 0, 0]) {\n                        sphere(d = 0.8);\n                    }\n                }\n            }\n        }\n        \n        // Stem connection to berry\n        translate([0, 0, stem_length]) {\n            cylinder(h = 3, d1 = 2.5, d2 = 4, $fn = 8);\n        }\n    }\n}\n\n// Create calyx leaves at stem connection\nmodule calyx() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            rotate([30, 0, 0]) {\n                translate([0, 0, stem_length - 1]) {\n                    scale([1, 0.6, 0.3]) {\n                        sphere(d = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, stem_length]) {\n    rotate([180, 0, 0]) {\n        union() {\n            blackberry();\n            calyx();\n        }\n    }\n}\n\nstem();",
    "renders": true
  },
  {
    "fruit": "mulberry",
    "openscad_code": "// Realistic Mulberry Model for 3D Printing\n// Medium complexity with proper structure for printing\n\nmodule mulberry_body() {\n    // Main berry body - ellipsoid shape\n    scale([1, 0.8, 1.2])\n        sphere(15, $fn=32);\n}\n\nmodule berry_cluster() {\n    // Generate the clustered drupelets characteristic of mulberries\n    for(i = [0:35]) {\n        // Fibonacci-like distribution for natural clustering\n        angle = i * 137.5;\n        radius = 8 + 2 * sin(i * 2);\n        height = 10 * sin(i * 0.3);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, height])\n                rotate([0, 90, 0])\n                    scale([1, 0.7, 0.7])\n                        cylinder(h=8, r1=3, r2=1.5, $fn=8);\n    }\n}\n\nmodule stem_connection() {\n    // Stem attachment point with smooth transition\n    translate([0, 0, 20])\n        cylinder(h=8, r1=3, r2=2, $fn=16);\n    \n    // Add small calyx leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([2.5, 0, 20])\n                rotate([45, 0, 90])\n                    scale([0.5, 1, 0.1])\n                        cylinder(h=4, r=2, $fn=6);\n    }\n}\n\nmodule surface_detail() {\n    // Add subtle surface texture with small bumps\n    for(i = [0:50]) {\n        angle = i * 73.2;\n        radius = 12 * sqrt(i / 50);\n        height = 15 + 2 * (i % 2);\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, height])\n                sphere(0.8, $fn=6);\n    }\n}\n\nmodule leaf_attachment() {\n    // Small leaf remnants at base\n    translate([0, 0, 15])\n        rotate([0, 0, 30])\n            scale([1, 0.3, 0.05])\n                cube([8, 6, 1], center=true);\n    \n    translate([0, 0, 15])\n        rotate([0, 0, -45])\n            scale([0.8, 0.25, 0.05])\n                cube([7, 5, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    // Core body\n    mulberry_body();\n    \n    // Add clustered drupelets\n    berry_cluster();\n    \n    // Surface texture\n    surface_detail();\n    \n    // Stem connection\n    stem_connection();\n    \n    // Leaf remnants\n    leaf_attachment();\n}\n\n// Optional: Add a small print base\ntranslate([0, 0, -3])\n    cylinder(h=3, r=18, $fn=32);",
    "renders": true
  },
  {
    "fruit": "gooseberry",
    "openscad_code": "// Gooseberry - Realistic style, medium complexity\n// Basic dimensions (mm)\ngooseberry_diameter = 25;\ngooseberry_height = 30;\nstem_length = 8;\nstem_diameter = 3;\nvein_count = 8;\nridge_height = 1.2;\n\n// Main body module with longitudinal ridges\nmodule gooseberry_body() {\n    difference() {\n        // Main sphere shape\n        sphere(d = gooseberry_diameter, $fn = 64);\n        \n        // Flatten the bottom slightly\n        translate([0, 0, -gooseberry_diameter/2 - 1])\n            cube([gooseberry_diameter + 2, gooseberry_diameter + 2, 2], center = true);\n        \n        // Create longitudinal ridges by subtracting grooves\n        for (i = [0:vein_count-1]) {\n            rotate([0, 0, i * (360/vein_count)])\n                translate([0, 0, -gooseberry_diameter/2 - 1])\n                    cube([gooseberry_diameter * 0.3, ridge_height * 2, gooseberry_diameter + 2], center = true);\n        }\n    }\n    \n    // Add the ridges back as raised features\n    for (i = [0:vein_count-1]) {\n        rotate([0, 0, i * (360/vein_count) + (360/vein_count/2)])\n            translate([0, gooseberry_diameter/2 - 2, 0])\n                scale([1, 0.3, 0.8])\n                    sphere(d = ridge_height * 4, $fn = 16);\n    }\n}\n\n// Stem with leaves\nmodule stem_and_leaves() {\n    // Main stem\n    translate([0, 0, gooseberry_height/2])\n        cylinder(h = stem_length, d = stem_diameter, $fn = 16);\n    \n    // Small leaves at stem base\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([stem_diameter/2 + 1.5, 0, gooseberry_height/2 + stem_length/2])\n                rotate([90, 0, 0])\n                    scale([0.8, 1.2, 0.3])\n                        cylinder(h = 4, d1 = 3, d2 = 1, $fn = 3);\n    }\n}\n\n// Add subtle surface bumps for realism\nmodule surface_bumps() {\n    // Random small bumps across the surface\n    for (i = [15:135]) {\n        rotate([i * 7.5, i * 11.25, 0])\n            translate([0, 0, gooseberry_diameter/2 - 2])\n                sphere(d = 0.8 + (i % 3) * 0.3, $fn = 8);\n    }\n}\n\n// Final assembly\nunion() {\n    // Main gooseberry body\n    gooseberry_body();\n    \n    // Surface texture\n    surface_bumps();\n    \n    // Stem and leaves\n    stem_and_leaves();\n}\n\n// Position for printing\ntranslate([0, 0, -gooseberry_height/2])\n    rotate([0, 0, 0]);",
    "renders": true
  },
  {
    "fruit": "currant",
    "openscad_code": "// Realistic 3D Currant (medium complexity)\n// Outer diameter ~15 mm, full cluster ~70 mm\n// Designed for 3D printing: no steep overhangs, 1 mm wall thickness\n\n// Main cluster parameters\n$fn = 30;\nberry_d = 15;          // diameter of one berry\nwall = 1;              // printable wall thickness\nstem_d = 2.5;          // diameter of main stem\nberry_count = 12;      // number of berries\nrand_seed = 42;        // fixed seed for reproducible randomization\n\n// Berry module: slightly flattened sphere with calyx scar\nmodule berry(pos=[0,0,0], scale=1, rot=[0,0,0]) {\n    translate(pos)\n    rotate(rot)\n    scale([scale, scale, scale*0.85])  // slightly flattened vertically\n    union() {\n        // Main body\n        difference() {\n            sphere(d=berry_d);\n            // Calyx scar – small conical hollow\n            translate([0,0,-berry_d/2])\n            cylinder(d1=berry_d/4, d2=0, h=berry_d/6, $fn=12);\n        }\n        // Subtle vertical ribs\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n            translate([0,0,-berry_d/2])\n            scale([0.1, 0.05, 1])\n            sphere(d=berry_d*1.05);\n        }\n    }\n}\n\n// Tiny calyx remnants on top\nmodule calyx(pos=[0,0,0], ang=[0,0,0]) {\n    translate(pos)\n    rotate(ang)\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n        translate([0,berry_d/2.3,0])\n        rotate([90,0,0])\n        cylinder(d1=1.5, d2=0.7, h=2, $fn=6);\n    }\n}\n\n// Main stem (curved)\nmodule stem() {\n    // Create a smooth arc\n    hull() {\n        translate([0,0,0])\n        rotate([0,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n        translate([0,0,60])\n        rotate([20,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n        translate([0,0,120])\n        rotate([40,90,0])\n            cylinder(d=stem_d, h=0.1, $fn=12);\n    }\n    // thicken via spheres\n    for(z=[0:5:120]) {\n        ang = 40*(z/120);\n        translate([0,0,z])\n        rotate([ang,90,0])\n        sphere(d=stem_d*1.1, $fn=12);\n    }\n}\n\n// Generate berry positions with random offsets\nmodule cluster() {\n    stem();\n    for(i=[0:berry_count-1]) {\n        // Random angles and radius\n        seed = rand_seed + i*100;\n        a = rands(0,360,1,seed)[0];\n        b = rands(0,180,1,seed+5)[0];\n        r = rands(berry_d*1.5, berry_d*2.5,1,seed+10)[0];\n        // Position along curved stem\n        stem_z = rands(15,105,1,seed+15)[0];\n        stem_ang = 40*(stem_z/120);\n        x = r * sin(b) * cos(a);\n        y = r * sin(b) * sin(a);\n        z = r * cos(b) + stem_z;\n        // Rotate berry to face outward from stem\n        angle_to_stem = atan2(y,x);\n        // Create berry\n        berry([x,y,z], rands(0.9,1.05,1,seed+20)[0], [0,0,angle_to_stem]);\n        calyx([x,y,z], [0,0,angle_to_stem]);\n    }\n}\n\n// Render the full cluster\ncluster();",
    "renders": true
  },
  {
    "fruit": "redcurrant",
    "openscad_code": "// Redcurrant 3D model - medium complexity\n// Designed for 3D printing, realistic style\n\n// Overall dimensions\n$fn = 24;\n\n// Main parameters\nberry_diameter = 5;\nberry_rows = 4;\nberries_per_row = [8, 6, 4, 2];\nstem_thickness = 1.2;\nstem_length = 25;\ncluster_height = 35;\n\n// Berry module with realistic shape\nmodule berry() {\n    difference() {\n        // Main berry body\n        sphere(d = berry_diameter);\n        \n        // Calyx scar on top\n        translate([0, 0, berry_diameter/2 - 0.3])\n            cylinder(h = 1, d1 = 2.5, d2 = 1.5, $fn = 12);\n        \n        // Small indentations for texture\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([berry_diameter/2 - 0.8, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1.5, d = 0.6, $fn = 8);\n        }\n    }\n}\n\n// Stem with realistic branching\nmodule stem() {\n    // Main stem\n    cylinder(h = stem_length, d = stem_thickness);\n    \n    // Side branches\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([0, 0, stem_length - 5 - i * 5])\n                rotate([30, 0, 0])\n                    cylinder(h = 8, d1 = stem_thickness, d2 = 0.8);\n    }\n    \n    // Top curl\n    translate([0, 0, stem_length])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d = stem_thickness);\n}\n\n// Berry cluster\nmodule berry_cluster() {\n    // Stem first\n    stem();\n    \n    // Berries arranged in rows\n    for(row = [0:berry_rows-1]) {\n        berries = berries_per_row[row];\n        angle_step = 360 / berries;\n        height = cluster_height - row * 8;\n        radius = 12 - row * 2.5;\n        \n        for(i = [0:berries-1]) {\n            angle = i * angle_step;\n            // Calculate position on spiral\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            // Each berry with slight random rotation\n            translate([x, y, height])\n                rotate([rand(row*10+i)*10, rand(row*10+i+1)*10, angle])\n                    berry();\n        }\n    }\n}\n\n// Helper function for pseudo-random rotation\nfunction rand(n) = (n * 13.7) % 1 - 0.5;\n\n// Create the complete redcurrant\nberry_cluster();",
    "renders": true
  },
  {
    "fruit": "blackcurrant",
    "openscad_code": "// Blackcurrant (realistic style, medium complexity)\n// Overall dimensions: ~65mm tall × ~35mm wide\n\n$fn = 30;  // Smooth curves\n\n// Main body of the blackcurrant cluster\nmodule blackcurrant_cluster() {\n    // Central stem\n    stem();\n    \n    // Generate berries in a realistic cluster pattern\n    for (i = [0:7]) {\n        angle = i * 45 + (i % 2) * 22.5;\n        radius = 8 + (i % 3) * 2;\n        height = 15 + sin(i * 30) * 5;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([90 + (i % 2) * 10, 0, angle])\n            berry(6 + (i % 3) * 0.5);\n    }\n    \n    // Additional berries for fullness\n    for (i = [0:5]) {\n        angle = i * 60 + 30;\n        radius = 10 + (i % 2) * 3;\n        height = 25 + cos(i * 45) * 3;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([85 + (i % 3) * 5, 0, angle])\n            berry(5.5 + (i % 2) * 0.8);\n    }\n    \n    // Top berries\n    for (i = [0:3]) {\n        angle = i * 90;\n        radius = 4;\n        height = 35;\n        \n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([60 + i * 5, 0, angle])\n            berry(4.5);\n    }\n}\n\n// Individual berry with realistic features\nmodule berry(size) {\n    color(\"darkmagenta\")\n    union() {\n        // Main berry body\n        sphere(d = size * 2);\n        \n        // Calyx (dried flower remnants) at top\n        translate([0, 0, size])\n        rotate([0, 0, 45])\n        calyx(size * 0.4);\n        \n        // Surface texture - small dimples\n        for (j = [0:8]) {\n            theta = j * 40;\n            for (k = [1:3]) {\n                phi = k * 30 + j * 10;\n                dimple_pos = size * 0.9;\n                \n                translate([\n                    dimple_pos * sin(phi) * cos(theta),\n                    dimple_pos * sin(phi) * sin(theta),\n                    dimple_pos * cos(phi)\n                ])\n                sphere(d = size * 0.15);\n            }\n        }\n    }\n}\n\n// Calyx structure\nmodule calyx(size) {\n    difference() {\n        // Base of calyx\n        cylinder(h = size, d = size * 1.8);\n        \n        // Petal indentations\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([size * 0.3, 0, -0.1])\n            cube([size * 0.6, size * 0.2, size + 0.2], center = true);\n        }\n    }\n}\n\n// Main stem structure\nmodule stem() {\n    color(\"darkgreen\")\n    union() {\n        // Central stalk\n        cylinder(h = 40, d = 3);\n        \n        // Side branches\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n            translate([0, 0, 10 + i * 8])\n            rotate([110 - i * 10, 0, 0])\n            cylinder(h = 12, d = 1.5);\n        }\n        \n        // Small leaf remnants\n        translate([0, 0, 38])\n        rotate([0, 0, 30])\n        scale([1, 0.6, 0.1])\n        sphere(d = 8);\n    }\n}\n\n// Generate the complete blackcurrant\nblackcurrant_cluster();",
    "renders": true
  },
  {
    "fruit": "whitecurrant",
    "openscad_code": "// Whitecurrant model - realistic style, medium complexity\n// Overall size ~70mm height\n\n$fn = 32;\nberry_diameter = 8;\nberry_spacing = 10;\ncluster_height = 70;\nstem_thickness = 2;\npeduncle_length = 15;\n\n// Berries arranged in a cluster\nmodule berry_cluster() {\n    // Main berries in spiral pattern\n    for(i = [0:9]) {\n        translate([\n            sin(i * 40) * (5 + i * 0.5),\n            cos(i * 40) * (5 + i * 0.5),\n            -i * 7\n        ]) {\n            rotate([0, 0, i * 25]) {\n                difference() {\n                    sphere(d = berry_diameter);\n                    // Calyx indentation\n                    translate([0, 0, berry_diameter/2 - 1])\n                        cylinder(h = 2, d1 = 3, d2 = 1.5, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Additional side berries\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([8, 0, -20]) {\n                rotate([0, 30, 0]) {\n                    sphere(d = berry_diameter * 0.9);\n                }\n            }\n        }\n    }\n    \n    // Top berries\n    for(i = [0:4]) {\n        translate([\n            sin(i * 72) * 4,\n            cos(i * 72) * 4,\n            -5\n        ]) {\n            sphere(d = berry_diameter * 0.8);\n        }\n    }\n}\n\n// Main stem structure\nmodule main_stem() {\n    // Central peduncle\n    linear_extrude(height = peduncle_length, twist = 5)\n        circle(d = stem_thickness, $fn = 8);\n    \n    // Branched stems for berries\n    for(i = [0:9]) {\n        translate([0, 0, -i * 7]) {\n            rotate([0, 0, i * 40]) {\n                translate([5 + i * 0.5, 0, 0]) {\n                    rotate([90, 0, -30]) {\n                        cylinder(h = 8, d = stem_thickness * 0.6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaves\nmodule leaves() {\n    // Main leaf\n    translate([0, 15, -25]) {\n        rotate([0, 20, 0]) {\n            difference() {\n                scale([1, 1.5, 0.5])\n                    sphere(d = 12);\n                // Leaf vein indentations\n                translate([0, -2, 0])\n                    cube([0.5, 8, 3], center = true);\n                translate([0, -2, 0])\n                    rotate([0, 0, 30])\n                        cube([0.5, 4, 2.5], center = true);\n                translate([0, -2, 0])\n                    rotate([0, 0, -30])\n                        cube([0.5, 4, 2.5], center = true);\n            }\n        }\n    }\n    \n    // Second leaf\n    translate([-10, -10, -30]) {\n        rotate([0, -15, -30]) {\n            scale([0.8, 1.2, 0.4])\n                sphere(d = 10);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, cluster_height]) {\n    union() {\n        // Stem and berries\n        main_stem();\n        berry_cluster();\n        \n        // Leaves\n        leaves();\n    }\n}",
    "renders": true
  },
  {
    "fruit": "elderberry",
    "openscad_code": "// Elderberry cluster with realistic style - medium complexity\n// Overall height ~70mm, printable without supports\n\n// Global parameters\nberry_d = 5;          // Individual berry diameter\nberry_gap = 1.5;      // Gap between berries\nstem_d = 2.5;         // Stem diameter\nstem_segments = 8;    // Stem resolution\numbel_radius = 20;    // Main cluster radius\nberry_wall = 0.8;     // Wall thickness for printing\n\n// Main module\nmodule elderberry_cluster() {\n    // Central stem\n    color(\"saddlebrown\")\n    translate([0,0,-5])\n    cylinder(d1=stem_d*1.5, d2=stem_d, h=35, $fn=stem_segments);\n    \n    // First umbel layer\n    elder_umbel(umbel_radius*0.7, 25, 0);\n    \n    // Second umbel layer\n    elder_umbel(umbel_radius*0.85, 32, 180);\n    \n    // Top umbel layer  \n    elder_umbel(umbel_radius, 40, 0);\n}\n\n// Generate a single umbel layer\nmodule elder_umbel(radius, height, rot_offset) {\n    berry_count = floor(360 / (berry_d + berry_gap));\n    angle_step = 360 / berry_count;\n    \n    for(i = [0:berry_count-1]) {\n        angle = i * angle_step + rot_offset;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        // Main berry\n        translate([x, y, height])\n        rotate([0,0,angle])\n        elder_berry();\n        \n        // Supporting pedicel\n        color(\"saddlebrown\")\n        translate([0,0,height-2])\n        rotate([0,0,angle])\n        rotate([90,0,0])\n        cylinder(d=stem_d*0.6, h=radius, $fn=6);\n    }\n    \n    // Center berries\n    for(j = [0:2]) {\n        offset = j * 120;\n        dist = radius * 0.3;\n        cx = cos(offset) * dist;\n        cy = sin(offset) * dist;\n        \n        translate([cx, cy, height])\n        elder_berry();\n    }\n}\n\n// Individual berry with realistic features\nmodule elder_berry() {\n    difference() {\n        // Main berry body\n        sphere(d=berry_d, $fn=12);\n        \n        // Calyx scar at top\n        translate([0,0,berry_d/2-0.2])\n        cylinder(d=berry_d*0.25, h=0.5, $fn=6);\n        \n        // Hollow interior for printing\n        translate([0,0,-berry_wall])\n        sphere(d=berry_d-berry_wall*2, $fn=12);\n    }\n    \n    // Surface texture rings\n    for(z = [-2:1:2]) {\n        translate([0,0,z])\n        rotate([90,0,0])\n        difference() {\n            cylinder(d=berry_d+0.2, h=0.3, $fn=16);\n            cylinder(d=berry_d-0.2, h=0.4, $fn=16);\n        }\n    }\n}\n\n// Render the model\nelderberry_cluster();",
    "renders": true
  },
  {
    "fruit": "cloudberry",
    "openscad_code": "// Cloudberry – realistic, medium complexity\n// 2024-04-XX\n\n// General parameters\n$fn = 36;\nfruit_d  = 12;        // diameter of one drupelet\nfruit_h  = 10;        // height of one drupelet\ncore_r   = 8;         // core radius that drupelets attach to\nstem_d   = 4;         // main stem diameter\nstem_h   = 25;        // stem height\nleaf_l   = 22;        // leaf length\nleaf_w   = 11;        // leaf width\nscale_factor = 3;     // enlarge whole berry for printing\n\n// Petal-like leaves at top\nmodule leaves() {\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([0,core_r*2.2,fruit_h*1.5])\n                rotate([90,0,0])\n                    scale([1,0.6,1])\n                        cylinder(h=leaf_l, r1=leaf_w, r2=leaf_w/2, center=true);\n    }\n}\n\n// One drupelet (segment of raspberry-like berry)\nmodule drupelet(row, pos) {\n    // polar angle for this row\n    theta = (row==0) ? 0 : 45 + row*25;   // rows 0,1,2\n    // azimuthal angle for each drupelet in row\n    phi_step = (row==0) ? 0 : 360/(row*6);\n    phi = pos*phi_step;\n    \n    // position vector on sphere\n    x = core_r * sin(theta) * cos(phi);\n    y = core_r * sin(theta) * sin(phi);\n    z = core_r * cos(theta);\n    \n    translate([x,y,z])\n        sphere(d=fruit_d);\n}\n\n// Build the berry by stacking rows of drupelets\nmodule berry() {\n    union() {\n        // central core (for strength & easier printing)\n        sphere(d=core_r*2);\n        \n        // rows of drupelets\n        for(row=[0:2]) {\n            count = (row==0) ? 1 : row*6;\n            for(pos=[1:count])\n                drupelet(row, pos);\n        }\n    }\n}\n\n// Main stem\nmodule stem() {\n    cylinder(h=stem_h, d=stem_d);\n}\n\n// Base with gentle slope to avoid overhang\nmodule base() {\n    difference() {\n        cylinder(h=3, d=stem_d+6);\n        translate([0,0,-1])\n            cylinder(h=5, d=stem_d-1);\n    }\n}\n\n// Final assembly\nscale([scale_factor,scale_factor,scale_factor])\nunion() {\n    stem();\n    translate([0,0,stem_h])\n        base();\n    translate([0,0,stem_h+3])\n        berry();\n    translate([0,0,stem_h+3])\n        leaves();\n}",
    "renders": true
  },
  {
    "fruit": "lingonberry",
    "openscad_code": "// Lingonberry model - realistic style, medium complexity\n\n// Overall dimensions (mm)\nberry_diameter = 10;\nberry_length = 12;\ncrown_size = 3;\nstem_length = 15;\n\n// 3D print settings\n$fn = 32;\nwall_thickness = 1.2;\n\nmodule lingonberry() {\n    // Main berry body - slightly elongated sphere\n    color(\"red\")\n    union() {\n        // Main body\n        translate([0, 0, 0])\n        scale([1, 1, 1.2])\n        sphere(d = berry_diameter);\n        \n        // Crown at top - small lobes\n        translate([0, 0, berry_length/2])\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([crown_size/2, 0, 0])\n            scale([0.6, 0.6, 0.8])\n            sphere(d = crown_size);\n        }\n        \n        // Surface texture - small bumps\n        for(phi = [0:30:150]) {\n            for(theta = [0:20:340]) {\n                rotate([phi, 0, theta])\n                translate([berry_diameter/2 - 0.3, 0, 0])\n                scale([0.3, 0.3, 0.3])\n                sphere(d = 1);\n            }\n        }\n    }\n    \n    // Stem attachment point\n    color(\"darkgreen\")\n    translate([0, 0, -berry_length/2])\n    cylinder(h = 2, d1 = 2, d2 = 1.5);\n    \n    // Main stem with slight curve\n    color(\"darkgreen\")\n    translate([0, 0, -berry_length/2 - 1])\n    rotate([5, 0, 0])\n    cylinder(h = stem_length, d = 1.5);\n    \n    // Stem details - small leaves\n    translate([0, 0, -berry_length/2 - 3])\n    rotate([15, 0, 45])\n    scale([0.8, 2, 0.2])\n    sphere(d = 3);\n    \n    translate([0, 0, -berry_length/2 - 5])\n    rotate([10, 0, -30])\n    scale([0.8, 2, 0.2])\n    sphere(d = 3);\n}\n\n// Create a cluster of 3 berries for realism\ntranslate([-10, 0, 0])\nlingonberry();\n\ntranslate([5, 8, 2])\nrotate([0, 0, 20])\nlingonberry();\n\ntranslate([8, -5, -1])\nrotate([0, 0, -15])\nlingonberry();",
    "renders": true
  }
]