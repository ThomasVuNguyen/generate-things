[
  {
    "toy": "ball",
    "openscad_code": "// Realistic 3D Printable Ball Toy – Medium Complexity\n// Diameter ≈ 80 mm, wall thickness 2 mm, hollow inside\n\n// Parameters\nball_d = 80;           // outer diameter in mm\nwall_t = 2;            // wall thickness\npanel_w = 12;          // width of each colored panel\nridge_h = 1.5;         // height of seam ridges\nnum_panels = 6;        // longitudinal colored panels\nnum_rings  = 3;        // latitudinal colored rings\npeg_d = 6;             // axle peg diameter\npeg_l = 10;            // peg length\n\n// Main hollow ball\nmodule ball_shell()\n{\n    difference() {\n        sphere(d = ball_d, $fn = 120);\n        sphere(d = ball_d - 2*wall_t, $fn = 120);\n    }\n}\n\n// Raised seam ridges between panels\nmodule seam_ridges() {\n    for (i = [0 : num_panels - 1]) {\n        rotate([0, 0, i * 360/num_panels])\n            translate([0, 0, -ball_d/2]) {\n                rotate_extrude($fn = 120)\n                    polygon(points = [\n                        [0,0],\n                        [ridge_h, 0],\n                        [ridge_h, ball_d],\n                        [0, ball_d]\n                    ]);\n            }\n    }\n}\n\n// Latitudinal rings for extra grip\nmodule grip_rings() {\n    for (i = [1 : num_rings]) {\n        translate([0, 0, -ball_d/2 + i*(ball_d/(num_rings+1))]) {\n            rotate_extrude($fn = 120)\n                polygon(points = [\n                    [ball_d/2 - ridge_h, 0],\n                    [ball_d/2, 0],\n                    [ball_d/2, ridge_h],\n                    [ball_d/2 - ridge_h, ridge_h]\n                ]);\n        }\n    }\n}\n\n// Decorative colored panels (thin shells)\nmodule colored_panels() {\n    for (i = [0 : num_panels - 1]) {\n        rotate([0, 0, i * 360/num_panels + 360/num_panels/2])\n            translate([0, 0, -ball_d/2]) {\n                difference() {\n                    rotate_extrude(angle = 360/num_panels, $fn = 20)\n                        polygon(points = [\n                            [ball_d/2 - wall_t, 0],\n                            [ball_d/2 - wall_t, ball_d],\n                            [ball_d/2 - 0.2, ball_d],\n                            [ball_d/2 - 0.2, 0]\n                        ]);\n                    // small cutouts for color separation\n                    translate([ball_d/2 - wall_t/2, ball_d/2])\n                        cube([wall_t*2, wall_t, wall_t], center = true);\n                }\n            }\n    }\n}\n\n// Small pegs for axle inserts (print separately or use support)\nmodule axle_pegs() {\n    for (axis = [[1,0,0], [0,1,0], [0,0,1]]) {\n        translate(v = axis * (ball_d/2 - peg_l/2))\n            rotate([0, 90*axis.y, 90*axis.x])\n                cylinder(d = peg_d, h = peg_l, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    ball_shell();\n    seam_ridges();\n    grip_rings();\n    colored_panels();\n    axle_pegs();\n}",
    "renders": true
  },
  {
    "toy": "football",
    "openscad_code": "// Realistic Toy Football - Medium Complexity\n// Size: ~100mm diameter, 3D printable with 2mm walls\n\n// Main parameters\nball_diameter = 100;\nwall_thickness = 2;\npanel_thickness = 3;\nseam_width = 1.5;\n\n// Create football with panels\nmodule football() {\n    // Main ball shell\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            sphere(d = ball_diameter - 2*wall_thickness);\n    }\n    \n    // Add toy valve for inflation\n    translate([0, 0, ball_diameter/2])\n        union() {\n            // Valve base\n            cylinder(h = 4, d1 = 8, d2 = 6, $fn = 16);\n            // Valve top\n            translate([0, 0, 4])\n                cylinder(h = 2, d = 4, $fn = 16);\n        }\n    \n    // Create pentagon panels\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([0, ball_diameter/2 - panel_thickness/2, 0])\n                pentagon_panel();\n    }\n    \n    // Create hexagon panels\n    for(i = [0:19]) {\n        rotate([0, 0, i * 18])\n            translate([ball_diameter/4, ball_diameter/4 - panel_thickness/2, 0])\n                rotate([90, 0, 0])\n                    hexagon_panel();\n    }\n}\n\n// Pentagon panel module\nmodule pentagon_panel() {\n    linear_extrude(height = panel_thickness)\n        offset(r = -seam_width)\n            polygon(points=[\n                [0, 20], [19, 6], [12, -16], [-12, -16], [-19, 6]\n            ]);\n}\n\n// Hexagon panel module\nmodule hexagon_panel() {\n    linear_extrude(height = panel_thickness)\n        offset(r = -seam_width)\n            polygon(points=[\n                [17, 0], [9, 15], [-9, 15], [-17, 0], [-9, -15], [9, -15]\n            ]);\n}\n\n// Add toy grip texture\nmodule grip_texture() {\n    for(a = [0:45:315]) {\n        rotate([0, 0, a])\n            for(r = [30:10:70]) {\n                translate([r, 0, ball_diameter/2 - 1])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1, d = 3, $fn = 8);\n            }\n    }\n}\n\n// Add toy brand logo placeholder\nmodule logo() {\n    translate([0, 0, ball_diameter/2 - 0.5])\n        rotate([90, 0, 0])\n            linear_extrude(height = 0.5)\n                text(\"TOY\", size = 10, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\nunion() {\n    football();\n    grip_texture();\n    logo();\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -ball_diameter/2 - 5])\n    cylinder(h = 5, d = 30, $fn = 32);",
    "renders": true
  },
  {
    "toy": "baseball",
    "openscad_code": "// Realistic 3D printable baseball toy (medium complexity)\n// Overall diameter ≈ 60 mm, wall thickness 2 mm\n\nmodule baseball_shell() {\n    // Main hollow sphere\n    difference() {\n        sphere(d = 60, $fn = 128);                // outer skin\n        sphere(d = 56, $fn = 128);                // inner hollow\n    }\n}\n\nmodule seam_line(angle) {\n    // Raised seam running along great circle\n    rotate([0, 0, angle])\n    rotate_extrude(angle = 180, $fn = 64)\n    translate([29, 0, 0])\n    polygon(points = [[0, 0], [2, 0.75], [2, 1.25], [0, 2]]);\n}\n\nmodule stitch_holes(seam_angle) {\n    // 108 holes along each seam (every 3.333°)\n    for(i = [0:3.333:360]) {\n        rotate([0, 0, seam_angle])\n        rotate([0, 0, i])\n        translate([29.75, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2.5, d = 1.2, $fn = 12);\n    }\n}\n\nmodule stitches(seam_angle) {\n    // Raised V-shaped stitches\n    for(i = [0:6.666:360]) {\n        rotate([0, 0, seam_angle])\n        rotate([0, 0, i])\n        translate([29.75, 0, 0]) {\n            // Left thread\n            rotate([0, 0, 15])\n            cylinder(h = 3, d = 0.6, $fn = 8);\n            // Right thread\n            rotate([0, 0, -15])\n            cylinder(h = 3, d = 0.6, $fn = 8);\n        }\n    }\n}\n\nmodule internal_support() {\n    // Internal cross structure for rigidity (printable without supports)\n    intersection() {\n        sphere(d = 55, $fn = 32);                 // stay inside shell\n        // X-shaped rib\n        cube([60, 2, 2], center = true);\n        rotate([0, 0, 90])\n        cube([60, 2, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    baseball_shell();\n    seam_line(0);        // first seam\n    seam_line(90);       // second seam\n    stitches(0);         // stitches on seam A\n    stitches(90);        // stitches on seam B\n    difference() {\n        union() {\n            stitches(0);\n            stitches(90);\n        }\n        stitch_holes(0);   // cut holes for thread look\n        stitch_holes(90);\n    }\n    internal_support();  // hidden inside\n}",
    "renders": true
  },
  {
    "toy": "basketball",
    "openscad_code": "// Basketball Toy (Medium complexity, realistic style)\n// Standard size 7 basketball scaled to 120mm diameter\n// 3D-printable with 2mm walls and minimal overhangs\n\n// Main parameters\nball_diameter = 120;\nwall_thickness = 2;\nrib_width = 3;\nrib_depth = 1.5;\n\n// Panel dimensions\npanel_width = 50;\npanel_height = 25;\n\n// Valve detail\nvalve_radius = 4;\nvalve_height = 3;\n\n// Toy-specific features\nhandle_radius = 8;\nhandle_clearance = 25;\n\n// Create hollow ball with ribs\nmodule basketball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness*2, $fn = 64);\n    }\n}\n\n// Create single rib segment\nmodule rib_segment(length, width, depth) {\n    difference() {\n        // Main rib body\n        cube([length, width, depth], center = true);\n        \n        // Rounded edges\n        translate([0, 0, depth/2])\n        cylinder(h = depth, r = width/2, $fn = 16);\n    }\n}\n\n// Create horizontal ribs\nmodule horizontal_ribs() {\n    // Top rib\n    translate([0, 0, ball_diameter/2 - 25])\n    rotate([90, 0, 0])\n    rib_segment(panel_width, rib_width, rib_depth);\n    \n    // Bottom rib\n    translate([0, 0, -ball_diameter/2 + 25])\n    rotate([90, 0, 0])\n    rib_segment(panel_width, rib_width, rib_depth);\n}\n\n// Create vertical ribs\nmodule vertical_ribs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([ball_diameter/2 - 25, 0, 0])\n        rotate([0, 90, 0])\n        rib_segment(panel_height*2, rib_width, rib_depth);\n    }\n}\n\n// Create curved panel lines\nmodule panel_lines() {\n    // Top panels\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, ball_diameter/2 - 15])\n        rotate([90, 0, 0])\n        cylinder(h = 1.5, r1 = 15, r2 = 20, $fn = 4);\n    }\n    \n    // Bottom panels\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, -ball_diameter/2 + 15])\n        rotate([90, 0, 0])\n        cylinder(h = 1.5, r1 = 15, r2 = 20, $fn = 4);\n    }\n}\n\n// Create valve detail\nmodule valve() {\n    // Valve base\n    translate([0, ball_diameter/2 - 5, 0])\n    rotate([-90, 0, 0])\n    difference() {\n        cylinder(h = valve_height, r = valve_radius, $fn = 16);\n        cylinder(h = valve_height + 1, r = valve_radius - 1, $fn = 16);\n    }\n    \n    // Valve stem\n    translate([0, ball_diameter/2 - 3, 0])\n    rotate([-90, 0, 0])\n    cylinder(h = 2, r = 1.5, $fn = 8);\n}\n\n// Create toy handle feature\nmodule toy_handle() {\n    // Handle loop\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer handle\n        rotate_extrude(angle = 180, $fn = 32)\n        translate([handle_clearance + handle_radius, 0, 0])\n        circle(r = handle_radius, $fn = 16);\n        \n        // Inner clearance\n        rotate_extrude(angle = 180, $fn = 32)\n        translate([handle_clearance + handle_radius, 0, 0])\n        circle(r = handle_radius - wall_thickness, $fn = 16);\n    }\n}\n\n// Create grip texture\nmodule grip_texture() {\n    // Small bumps for grip\n    for (theta = [0:30:180]) {\n        for (phi = [0:30:360]) {\n            rotate([theta, 0, phi])\n            translate([ball_diameter/2 - wall_thickness, 0, 0])\n            sphere(r = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Basic basketball shell\n    basketball_shell();\n    \n    // External ribs and details\n    union() {\n        horizontal_ribs();\n        vertical_ribs();\n        panel_lines();\n        valve();\n    }\n    \n    // Toy-specific handle (optional - can be commented out)\n    // toy_handle();\n    \n    // Grip texture (optional - for better handling)\n    // grip_texture();\n}\n\n// Add subtle seams between panels\nfor (i = [0:5]) {\n    rotate([0, 0, i * 60])\n    translate([ball_diameter/2 - 1, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 2, r = 0.5, $fn = 8);\n}",
    "renders": true
  },
  {
    "toy": "soccerball",
    "openscad_code": "// Realistic Toy Soccer Ball - Medium Complexity\n// 3D printable soccer ball toy with realistic panel pattern\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Parameters\nball_diameter = 60;  // 60mm toy soccer ball\npanel_thickness = 2;  // 2mm wall thickness for printing\nseam_width = 1.5;    // Realistic seam between panels\ninflation_valve_size = 3;\n\n// Main ball structure\nmodule soccer_ball() {\n    difference() {\n        // Solid ball core\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - panel_thickness*2);\n        \n        // Inflation valve hole\n        translate([0, 0, ball_diameter/2 - panel_thickness])\n            rotate([90, 0, 0])\n                cylinder(h = panel_thickness + 1, d = inflation_valve_size);\n    }\n}\n\n// Pentagon panel\nmodule pentagon_panel() {\n    difference() {\n        // Outer pentagon surface\n        linear_extrude(height = panel_thickness) {\n            circle(d = ball_diameter/4, $fn = 5);\n        }\n        \n        // Inner pentagon for wall thickness\n        translate([0, 0, panel_thickness/2])\n            linear_extrude(height = panel_thickness/2 + 0.1) {\n                circle(d = ball_diameter/4 - 1, $fn = 5);\n            }\n    }\n}\n\n// Hexagon panel\nmodule hexagon_panel() {\n    difference() {\n        // Outer hexagon surface\n        linear_extrude(height = panel_thickness) {\n            circle(d = ball_diameter/4.5, $fn = 6);\n        }\n        \n        // Inner hexagon for wall thickness\n        translate([0, 0, panel_thickness/2])\n            linear_extrude(height = panel_thickness/2 + 0.1) {\n                circle(d = ball_diameter/4.5 - 1, $fn = 6);\n            }\n    }\n}\n\n// Position panels on sphere surface\nmodule panel_positions() {\n    // Pentagon panels (top and bottom)\n    translate([0, 0, ball_diameter/2 - panel_thickness/2])\n        rotate([0, 0, 0])\n            pentagon_panel();\n    \n    translate([0, 0, -ball_diameter/2 + panel_thickness/2])\n        rotate([180, 0, 0])\n            pentagon_panel();\n    \n    // Pentagon panel (front)\n    translate([0, ball_diameter/2 - panel_thickness/2, 0])\n        rotate([90, 0, 0])\n            pentagon_panel();\n    \n    // Hexagon panels around equator\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            // Upper ring\n            translate([0, \n                      (ball_diameter/2 - panel_thickness/2) * sin(37.4), \n                      (ball_diameter/2 - panel_thickness/2) * cos(37.4)])\n                rotate([37.4, 0, 0])\n                    hexagon_panel();\n            \n            // Lower ring\n            translate([0, \n                      (ball_diameter/2 - panel_thickness/2) * sin(37.4), \n                      -(ball_diameter/2 - panel_thickness/2) * cos(37.4)])\n                rotate([-37.4, 0, 0])\n                    hexagon_panel();\n        }\n    }\n    \n    // Additional hexagon panels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([(ball_diameter/2 - panel_thickness/2) * sin(63.4), \n                      0, \n                      (ball_diameter/2 - panel_thickness/2) * cos(63.4)])\n                rotate([0, 90, 63.4])\n                    hexagon_panel();\n            \n            translate([-(ball_diameter/2 - panel_thickness/2) * sin(63.4), \n                      0, \n                      (ball_diameter/2 - panel_thickness/2) * cos(63.4)])\n                rotate([0, 90, -63.4])\n                    hexagon_panel();\n        }\n    }\n}\n\n// Seams between panels\nmodule seams() {\n    color(\"black\") {\n        // Create raised seams\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([0, 0, ball_diameter/2 - seam_width/2])\n                    cylinder(h = seam_width, d = seam_width, $fn = 8);\n            }\n        }\n        \n        // Additional seam elements\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, \n                          (ball_diameter/2 - seam_width/2) * sin(37.4), \n                          (ball_diameter/2 - seam_width/2) * cos(37.4)])\n                    rotate([0, 37.4, 0])\n                        cylinder(h = seam_width, d = seam_width, $fn = 8);\n            }\n        }\n    }\n}\n\n// Toy-specific features\nmodule toy_features() {\n    // Small grip texture bumps\n    for(i = [0:20]) {\n        rotate([rand(360), rand(360), rand(360)]) {\n            translate([rand(ball_diameter/3), rand(ball_diameter/3), rand(ball_diameter/3)])\n                sphere(d = 1);\n        }\n    }\n    \n    // Toy safety valve cap\n    translate([0, 0, ball_diameter/2 + 1])\n        cylinder(h = 2, d = inflation_valve_size + 2);\n}\n\n// Main assembly\nunion() {\n    // Base ball structure\n    soccer_ball();\n    \n    // Position all panels\n    panel_positions();\n    \n    // Add seams\n    seams();\n    \n    // Add toy features\n    toy_features();\n}",
    "renders": true
  },
  {
    "toy": "tennisball",
    "openscad_code": "// Tennis Ball Toy - Realistic Style, Medium Complexity\n// Diameter: 67mm, Wall thickness: 2mm for 3D printing\n// Includes hollow core, seam lines, and toy-friendly features\n\n$fn = 48;\n\n// Main parameters\nball_diameter = 67;\nwall_thickness = 2;\nseam_width = 1.5;\nseam_depth = 1;\nfurrow_width = 3;\nfurrow_depth = 0.5;\n\n// Create hollow tennis ball shell\nmodule tennis_ball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Inner hollow\n        sphere(d = ball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Create curved seam line\nmodule seam_curve(angle) {\n    rotate([0, angle, 0]) {\n        // Create curved seam by differencing a torus segment\n        difference() {\n            // Main seam body\n            rotate_extrude(angle = 180, $fn = 64) {\n                translate([ball_diameter/2 - seam_depth, 0, 0]) {\n                    square([seam_width, seam_depth], center = true);\n                }\n            }\n            \n            // Smooth edges\n            rotate_extrude(angle = 180, $fn = 64) {\n                translate([ball_diameter/2 - seam_depth/2, 0, 0]) {\n                    circle(r = seam_depth/2, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Create furrow pattern for toy grip\nmodule furrows() {\n    // Generate furrows along seam lines\n    for (i = [0:15:345]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, ball_diameter/2 - furrow_depth]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = furrow_depth + 1, r = furrow_width/2, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Create toy-friendly solid core (optional fill)\nmodule solid_core() {\n    // Small inner sphere for structural integrity\n    sphere(d = ball_diameter - 4 * wall_thickness);\n}\n\n// Assembly module\nmodule tennis_ball_toy() {\n    // Main shell\n    tennis_ball_shell();\n    \n    // Add seam lines at 45 degree angles\n    seam_curve(45);\n    seam_curve(-45);\n    \n    // Add grip furrows\n    furrows();\n    \n    // Optional solid core - uncomment for solid toy\n    // translate([0, 0, 0]) {\n    //     color(\"lightgreen\") solid_core();\n    // }\n    \n    // Add toy safety features - rounded edges\n    translate([0, 0, ball_diameter/2]) {\n        cylinder(h = 2, r1 = 3, r2 = 1, $fn = 16);\n    }\n    translate([0, 0, -ball_diameter/2]) {\n        cylinder(h = 2, r1 = 1, r2 = 3, $fn = 16);\n    }\n}\n\n// Render the model\ntennis_ball_toy();",
    "renders": true
  },
  {
    "toy": "volleyball",
    "openscad_code": "// Realistic toy volleyball\n// Diameter: 100 mm, wall thickness: 2 mm\n// Features: Panel seams, inflation valve, toy-like proportions\n\n// Main parameters\nvolleyball_d = 100;          // 100 mm diameter\nwall_thickness = 2;          // 2 mm wall thickness for 3D printing\nseam_width = 1.5;            // Width of panel seams\nvalve_size = 6;              // Inflation valve diameter\n\n// Panel parameters – volleyball has 18 panels (6 identical stripes)\npanel_angle = 360/6;         // 60 degrees per repeating pattern\n\n// Helper module to create a single panel strip\nmodule panel_strip(height, width, thickness) {\n    difference() {\n        // Main panel shape – curved strip\n        linear_extrude(height = thickness, center = true, convexity = 10)\n        polygon(points = [\n            [0, -width/2],\n            [height*0.8, -width/2*0.9],\n            [height*0.9, 0],\n            [height*0.8, width/2*0.9],\n            [0, width/2]\n        ]);\n        \n        // Cut edges to make curved shape\n        translate([height*0.45, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = width*1.5, r = height*0.55, center = true);\n    }\n}\n\n// Helper module to create seam between panels\nmodule seam(length, width, height) {\n    color(\"gray20\")\n    translate([0, 0, -height/2])\n        cube([length, width, height], center = true);\n}\n\n// Main volleyball shell with hollow interior\nmodule volleyball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = volleyball_d, $fn = 100);\n        \n        // Inner hollow sphere\n        sphere(d = volleyball_d - wall_thickness*2, $fn = 100);\n    }\n}\n\n// Create raised panel seams\nmodule panel_seams() {\n    // First set of seams (vertical)\n    for (i = [0:5]) {\n        rotate([0, 0, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.9, seam_width*2, seam_width*2);\n    }\n    \n    // Second set of seams (rotated 90 degrees)\n    for (i = [0:5]) {\n        rotate([0, 90, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.9, seam_width*2, seam_width*2);\n    }\n    \n    // Third set of seams (angled)\n    for (i = [0:5]) {\n        rotate([45, 0, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.7, seam_width*2, seam_width*2);\n    }\n}\n\n// Inflation valve detail\nmodule inflation_valve() {\n    color(\"gray30\")\n    translate([0, 0, volleyball_d/2])\n    difference() {\n        // Valve base\n        cylinder(h = 3, r = valve_size/2, $fn = 20);\n        \n        // Valve hole\n        translate([0, 0, -1])\n            cylinder(h = 5, r = valve_size/4, $fn = 20);\n    }\n}\n\n// Toy-specific details – small bumps for grip texture\nmodule grip_texture() {\n    // Create small bumps across the surface\n    for (theta = [0:30:180]) {\n        for (phi = [0:45:360]) {\n            translate([\n                (volleyball_d/2 - 1) * cos(phi) * sin(theta),\n                (volleyball_d/2 - 1) * sin(phi) * sin(theta),\n                (volleyball_d/2 - 1) * cos(theta)\n            ]) {\n                sphere(d = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    volleyball_shell();\n    \n    // Panel seams\n    panel_seams();\n    \n    // Inflation valve\n    inflation_valve();\n    \n    // Grip texture\n    grip_texture();\n}",
    "renders": true
  },
  {
    "toy": "beachball",
    "openscad_code": "// Beachball toy - realistic style, medium complexity\n// Overall dimensions: 100mm diameter ball with 2mm wall thickness\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nball_diameter = 100;\nwall_thickness = 2;\nseam_width = 4;\nvalve_length = 15;\nvalve_diameter = 6;\npanel_segments = 6;  // Classic 6-panel beachball\n\n// Color definitions (classic beachball colors)\ncolors = [\"red\", \"white\", \"blue\", \"white\", \"yellow\", \"white\"];\n\n// Main hollow ball structure\nmodule beachball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Inner hollow sphere\n        sphere(d = ball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Panel dividing seams\nmodule panel_seams() {\n    for(i = [0:panel_segments-1]) {\n        rotate([0, 0, i * 360/panel_segments]) {\n            // Vertical seam\n            translate([0, 0, -ball_diameter/2 - 1]) {\n                cylinder(h = ball_diameter + 2, d = seam_width, center = true);\n            }\n            \n            // Horizontal seam (latitude)\n            rotate([90, 0, 0]) {\n                translate([0, 0, 0]) {\n                    cylinder(h = ball_diameter, d = seam_width, center = true);\n                }\n            }\n        }\n    }\n    \n    // Equatorial seam\n    rotate([0, 90, 0]) {\n        cylinder(h = ball_diameter, d = seam_width, center = true);\n    }\n}\n\n// Valve assembly for inflation\nmodule inflation_valve() {\n    // Valve base attached to ball\n    translate([ball_diameter/2 - wall_thickness/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Outer valve tube\n                cylinder(h = valve_length, d = valve_diameter + 2, center = true);\n                \n                // Inner hole\n                cylinder(h = valve_length + 2, d = valve_diameter, center = true);\n            }\n        }\n    }\n    \n    // Valve cap\n    translate([ball_diameter/2 + valve_length/2 + 2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Cap body\n                cylinder(h = 8, d = valve_diameter + 4, center = true);\n                \n                // Grip ridges\n                for(i = [0:5]) {\n                    rotate([0, 0, i * 60]) {\n                        translate([0, -valve_diameter/2 - 1, 0]) {\n                            cube([valve_diameter + 4, 2, 8], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Panel color segments (represented as indentations)\nmodule panel_details() {\n    for(i = [0:panel_segments-1]) {\n        rotate([0, 0, i * 360/panel_segments + 30]) {\n            translate([0, 0, 0]) {\n                difference() {\n                    sphere(d = ball_diameter - 0.5);\n                    \n                    // Cut panel shape\n                    rotate([0, 0, -30]) {\n                        intersection() {\n                            sphere(d = ball_diameter - 0.1);\n                            cube([ball_diameter, ball_diameter, ball_diameter], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    beachball_shell();\n    \n    // Panel seams for realistic look\n    panel_seams();\n    \n    // Inflation valve\n    inflation_valve();\n    \n    // Panel details\n    panel_details();\n}",
    "renders": true
  },
  {
    "toy": "golfball",
    "openscad_code": "// Realistic Golf Ball Toy - Medium Complexity\n// Diameter: 42.67mm (regulation size)\n\nmodule golf_ball() {\n    ball_diameter = 42.67;\n    wall_thickness = 2;\n    \n    // Main hollow ball\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness * 2);\n    }\n    \n    // Dimples - 336 total in icosahedral pattern\n    dimple_depth = 0.5;\n    dimple_radius = 2.5;\n    \n    // Top pentagon dimples\n    for (i = [0:4]) {\n        angle = i * 72;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 3, ball_diameter/2 - 5])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Second ring\n    for (i = [0:9]) {\n        angle = i * 36;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 8, ball_diameter/2 - 6])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Third ring\n    for (i = [0:14]) {\n        angle = i * 24;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 12, ball_diameter/2 - 7])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Equator\n    for (i = [0:19]) {\n        angle = i * 18;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 15, 0])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Bottom symmetric dimples (mirror top)\n    mirror([0, 0, 1]) {\n        // Bottom pentagon\n        for (i = [0:4]) {\n            angle = i * 72;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 3, ball_diameter/2 - 5])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n        \n        // Second bottom ring\n        for (i = [0:9]) {\n            angle = i * 36;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 8, ball_diameter/2 - 6])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n        \n        // Third bottom ring\n        for (i = [0:14]) {\n            angle = i * 24;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 12, ball_diameter/2 - 7])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n    }\n    \n    // Toy safety features - rounded edges\n    difference() {\n        sphere(d = ball_diameter + 0.5);\n        sphere(d = ball_diameter + 0.1);\n    }\n    \n    // Internal support structure for 3D printing\n    support_radius = 2;\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 0, -ball_diameter/4])\n        cylinder(h = ball_diameter/2, r = support_radius, $fn = 6);\n    }\n    \n    // Alignment mark for putting practice\n    difference() {\n        translate([0, -ball_diameter/2 + 0.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r1 = 1, r2 = 0.5, $fn = 3);\n        translate([0, -ball_diameter/2 - 1, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 0.8, $fn = 3);\n    }\n}\n\nmodule dimple(radius, depth) {\n    difference() {\n        sphere(r = radius);\n        translate([0, 0, -radius - depth])\n        sphere(r = radius + depth);\n    }\n}\n\n// Generate the golf ball\ngolf_ball();",
    "renders": true
  },
  {
    "toy": "bowlingball",
    "openscad_code": "// Bowling Ball Toy - Realistic Style, Medium Complexity\n// 3D printable toy bowling ball with finger holes and toy-style details\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\nball_diameter = 80;  // Reasonable toy size\nwall_thickness = 2;  // For 3D printing\nhole_depth = 12;\nhole_radius = 8;\n\nmodule bowling_ball() {\n    difference() {\n        // Main ball body\n        sphere(d = ball_diameter);\n        \n        // Finger holes - realistic spacing\n        translate([15, 0, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius, $fn = 32);\n                \n        translate([-7, -12, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius * 0.9, $fn = 32);\n                \n        translate([-7, 12, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius * 0.8, $fn = 32);\n    }\n}\n\n// Toy-style seam line around equator for manufacturing look\nmodule seam_line() {\n    difference() {\n        cylinder(h = 1.5, r = ball_diameter/2 + 0.5, center = true);\n        cylinder(h = 2, r = ball_diameter/2 - 0.5, center = true);\n    }\n}\n\n// Decorative toy-style dots (manufacturing marks)\nmodule toy_dots() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([ball_diameter/2 * 0.7, 0, 0]) {\n                sphere(r = 1.5);\n            }\n            translate([ball_diameter/2 * 0.5, 0, 15]) {\n                sphere(r = 1);\n            }\n            translate([ball_diameter/2 * 0.5, 0, -15]) {\n                sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Toy safety features - rounded edges and reinforcements\nmodule safety_ring() {\n    difference() {\n        sphere(d = ball_diameter + 1);\n        sphere(d = ball_diameter - wall_thickness);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball\n    bowling_ball();\n    \n    // Add seam line\n    translate([0, 0, 0]) \n        seam_line();\n    \n    // Add toy dots\n    color(\"gray\") \n        toy_dots();\n    \n    // Internal reinforcement\n    %safety_ring();\n}",
    "renders": true
  },
  {
    "toy": "handball",
    "openscad_code": "// Handball toy - realistic style, medium complexity\n// Overall size: 75mm diameter ball + 15mm finger grip ridges\n\nmodule finger_groove(angle, depth) {\n    // Create curved groove for finger grip\n    rotate([0, 0, angle])\n    translate([0, 37.5, 0])\n    difference() {\n        cylinder(h=5, r1=6, r2=6, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=7, r1=4, r2=4, $fn=32);\n    }\n}\n\nmodule panel_line(angle) {\n    // Create raised panel lines for realistic ball texture\n    rotate([0, 0, angle])\n    translate([0, 0, 0])\n    difference() {\n        sphere(d=76, $fn=64);\n        translate([0, 0, -1])\n        sphere(d=73, $fn=64);\n    }\n}\n\nmodule valve_stem() {\n    // Small valve stem detail\n    translate([0, 0, 37.5])\n    cylinder(h=3, r1=2, r2=2, $fn=16);\n    translate([0, 0, 40.5])\n    sphere(d=4.5, $fn=16);\n}\n\nmodule handball_toy() {\n    // Main ball body - hollow for 3D printing\n    difference() {\n        // Outer shell\n        sphere(d=75, $fn=128);\n        \n        // Inner hollow space\n        sphere(d=71, $fn=128);\n    }\n    \n    // Add finger grip grooves around circumference\n    for(i = [0:30:330]) {\n        finger_groove(i, 2);\n    }\n    \n    // Add realistic panel lines\n    panel_line(0);\n    panel_line(120);\n    panel_line(240);\n    \n    // Add valve stem detail\n    valve_stem();\n    \n    // Add subtle texture dots for grip\n    for(i = [0:15:345]) {\n        rotate([0, 0, i])\n        translate([0, 35, 35])\n        sphere(d=1.5, $fn=8);\n    }\n    \n    for(i = [7.5:15:352.5]) {\n        rotate([0, 0, i])\n        translate([0, 30, 30])\n        sphere(d=1.5, $fn=8);\n    }\n}\n\n// Render the complete handball toy\nhandball_toy();",
    "renders": true
  },
  {
    "toy": "dodgeball",
    "openscad_code": "// Dodgeball Toy - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main parameters\nball_diameter = 80;  // 80mm diameter - good size for toy\nwall_thickness = 2;  // Standard 3D printing wall thickness\ngrip_depth = 3;      // Shallow grip pattern depth\n\nmodule dodgeball_toy() {\n    difference() {\n        // Main ball body\n        sphere(d = ball_diameter);\n        \n        // Panel seams - 8 panels like real dodgeball\n        for (i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                // Vertical seam grooves\n                translate([0, 0, -ball_diameter/2 - 1])\n                    cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n            }\n        }\n        \n        // Horizontal seam grooves\n        rotate([90, 0, 0]) {\n            translate([0, 0, -ball_diameter/2 - 1])\n                cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n        }\n        rotate([0, 90, 0]) {\n            translate([0, 0, -ball_diameter/2 - 1])\n                cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n        }\n    }\n    \n    // Textured grip pattern - small circles across surface\n    module grip_pattern() {\n        // Generate grip dots in spiral pattern\n        for (lat = [-60:15:60]) {\n            for (lon = [0:30:360]) {\n                rotate([0, lat, lon]) {\n                    translate([0, 0, ball_diameter/2 - grip_depth/2])\n                        cylinder(h = grip_depth + 0.5, d = 4, center = true);\n                }\n            }\n        }\n    }\n    \n    // Apply grip pattern\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Create hollow interior\n        sphere(d = ball_diameter - 2*wall_thickness);\n        \n        // Remove grip pattern\n        grip_pattern();\n    }\n    \n    // Valve detail - realistic inflation valve\n    translate([0, 0, ball_diameter/2 - 2])\n        cylinder(h = 4, d = 8, center = true);\n    \n    // Valve cap\n    translate([0, 0, ball_diameter/2])\n        cylinder(h = 2, d = 6, center = true);\n    \n    // Valve threads (simplified)\n    for (i = [0:0.5:2]) {\n        translate([0, 0, ball_diameter/2 - 2 + i])\n            cylinder(h = 0.3, d = 7 - i*0.5, center = true);\n    }\n}\n\n// Render the complete dodgeball\ndodgeball_toy();",
    "renders": true
  }
]