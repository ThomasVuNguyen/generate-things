[
  {
    "toy": "ball",
    "openscad_code": "// Realistic 3D Printable Ball Toy – Medium Complexity\n// Diameter ≈ 80 mm, wall thickness 2 mm, hollow inside\n\n// Parameters\nball_d = 80;           // outer diameter in mm\nwall_t = 2;            // wall thickness\npanel_w = 12;          // width of each colored panel\nridge_h = 1.5;         // height of seam ridges\nnum_panels = 6;        // longitudinal colored panels\nnum_rings  = 3;        // latitudinal colored rings\npeg_d = 6;             // axle peg diameter\npeg_l = 10;            // peg length\n\n// Main hollow ball\nmodule ball_shell()\n{\n    difference() {\n        sphere(d = ball_d, $fn = 120);\n        sphere(d = ball_d - 2*wall_t, $fn = 120);\n    }\n}\n\n// Raised seam ridges between panels\nmodule seam_ridges() {\n    for (i = [0 : num_panels - 1]) {\n        rotate([0, 0, i * 360/num_panels])\n            translate([0, 0, -ball_d/2]) {\n                rotate_extrude($fn = 120)\n                    polygon(points = [\n                        [0,0],\n                        [ridge_h, 0],\n                        [ridge_h, ball_d],\n                        [0, ball_d]\n                    ]);\n            }\n    }\n}\n\n// Latitudinal rings for extra grip\nmodule grip_rings() {\n    for (i = [1 : num_rings]) {\n        translate([0, 0, -ball_d/2 + i*(ball_d/(num_rings+1))]) {\n            rotate_extrude($fn = 120)\n                polygon(points = [\n                    [ball_d/2 - ridge_h, 0],\n                    [ball_d/2, 0],\n                    [ball_d/2, ridge_h],\n                    [ball_d/2 - ridge_h, ridge_h]\n                ]);\n        }\n    }\n}\n\n// Decorative colored panels (thin shells)\nmodule colored_panels() {\n    for (i = [0 : num_panels - 1]) {\n        rotate([0, 0, i * 360/num_panels + 360/num_panels/2])\n            translate([0, 0, -ball_d/2]) {\n                difference() {\n                    rotate_extrude(angle = 360/num_panels, $fn = 20)\n                        polygon(points = [\n                            [ball_d/2 - wall_t, 0],\n                            [ball_d/2 - wall_t, ball_d],\n                            [ball_d/2 - 0.2, ball_d],\n                            [ball_d/2 - 0.2, 0]\n                        ]);\n                    // small cutouts for color separation\n                    translate([ball_d/2 - wall_t/2, ball_d/2])\n                        cube([wall_t*2, wall_t, wall_t], center = true);\n                }\n            }\n    }\n}\n\n// Small pegs for axle inserts (print separately or use support)\nmodule axle_pegs() {\n    for (axis = [[1,0,0], [0,1,0], [0,0,1]]) {\n        translate(v = axis * (ball_d/2 - peg_l/2))\n            rotate([0, 90*axis.y, 90*axis.x])\n                cylinder(d = peg_d, h = peg_l, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    ball_shell();\n    seam_ridges();\n    grip_rings();\n    colored_panels();\n    axle_pegs();\n}",
    "renders": true
  },
  {
    "toy": "football",
    "openscad_code": "// Realistic Toy Football - Medium Complexity\n// Size: ~100mm diameter, 3D printable with 2mm walls\n\n// Main parameters\nball_diameter = 100;\nwall_thickness = 2;\npanel_thickness = 3;\nseam_width = 1.5;\n\n// Create football with panels\nmodule football() {\n    // Main ball shell\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            sphere(d = ball_diameter - 2*wall_thickness);\n    }\n    \n    // Add toy valve for inflation\n    translate([0, 0, ball_diameter/2])\n        union() {\n            // Valve base\n            cylinder(h = 4, d1 = 8, d2 = 6, $fn = 16);\n            // Valve top\n            translate([0, 0, 4])\n                cylinder(h = 2, d = 4, $fn = 16);\n        }\n    \n    // Create pentagon panels\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([0, ball_diameter/2 - panel_thickness/2, 0])\n                pentagon_panel();\n    }\n    \n    // Create hexagon panels\n    for(i = [0:19]) {\n        rotate([0, 0, i * 18])\n            translate([ball_diameter/4, ball_diameter/4 - panel_thickness/2, 0])\n                rotate([90, 0, 0])\n                    hexagon_panel();\n    }\n}\n\n// Pentagon panel module\nmodule pentagon_panel() {\n    linear_extrude(height = panel_thickness)\n        offset(r = -seam_width)\n            polygon(points=[\n                [0, 20], [19, 6], [12, -16], [-12, -16], [-19, 6]\n            ]);\n}\n\n// Hexagon panel module\nmodule hexagon_panel() {\n    linear_extrude(height = panel_thickness)\n        offset(r = -seam_width)\n            polygon(points=[\n                [17, 0], [9, 15], [-9, 15], [-17, 0], [-9, -15], [9, -15]\n            ]);\n}\n\n// Add toy grip texture\nmodule grip_texture() {\n    for(a = [0:45:315]) {\n        rotate([0, 0, a])\n            for(r = [30:10:70]) {\n                translate([r, 0, ball_diameter/2 - 1])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1, d = 3, $fn = 8);\n            }\n    }\n}\n\n// Add toy brand logo placeholder\nmodule logo() {\n    translate([0, 0, ball_diameter/2 - 0.5])\n        rotate([90, 0, 0])\n            linear_extrude(height = 0.5)\n                text(\"TOY\", size = 10, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\nunion() {\n    football();\n    grip_texture();\n    logo();\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -ball_diameter/2 - 5])\n    cylinder(h = 5, d = 30, $fn = 32);",
    "renders": true
  },
  {
    "toy": "baseball",
    "openscad_code": "// Realistic 3D printable baseball toy (medium complexity)\n// Overall diameter ≈ 60 mm, wall thickness 2 mm\n\nmodule baseball_shell() {\n    // Main hollow sphere\n    difference() {\n        sphere(d = 60, $fn = 128);                // outer skin\n        sphere(d = 56, $fn = 128);                // inner hollow\n    }\n}\n\nmodule seam_line(angle) {\n    // Raised seam running along great circle\n    rotate([0, 0, angle])\n    rotate_extrude(angle = 180, $fn = 64)\n    translate([29, 0, 0])\n    polygon(points = [[0, 0], [2, 0.75], [2, 1.25], [0, 2]]);\n}\n\nmodule stitch_holes(seam_angle) {\n    // 108 holes along each seam (every 3.333°)\n    for(i = [0:3.333:360]) {\n        rotate([0, 0, seam_angle])\n        rotate([0, 0, i])\n        translate([29.75, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2.5, d = 1.2, $fn = 12);\n    }\n}\n\nmodule stitches(seam_angle) {\n    // Raised V-shaped stitches\n    for(i = [0:6.666:360]) {\n        rotate([0, 0, seam_angle])\n        rotate([0, 0, i])\n        translate([29.75, 0, 0]) {\n            // Left thread\n            rotate([0, 0, 15])\n            cylinder(h = 3, d = 0.6, $fn = 8);\n            // Right thread\n            rotate([0, 0, -15])\n            cylinder(h = 3, d = 0.6, $fn = 8);\n        }\n    }\n}\n\nmodule internal_support() {\n    // Internal cross structure for rigidity (printable without supports)\n    intersection() {\n        sphere(d = 55, $fn = 32);                 // stay inside shell\n        // X-shaped rib\n        cube([60, 2, 2], center = true);\n        rotate([0, 0, 90])\n        cube([60, 2, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    baseball_shell();\n    seam_line(0);        // first seam\n    seam_line(90);       // second seam\n    stitches(0);         // stitches on seam A\n    stitches(90);        // stitches on seam B\n    difference() {\n        union() {\n            stitches(0);\n            stitches(90);\n        }\n        stitch_holes(0);   // cut holes for thread look\n        stitch_holes(90);\n    }\n    internal_support();  // hidden inside\n}",
    "renders": true
  },
  {
    "toy": "basketball",
    "openscad_code": "// Basketball Toy (Medium complexity, realistic style)\n// Standard size 7 basketball scaled to 120mm diameter\n// 3D-printable with 2mm walls and minimal overhangs\n\n// Main parameters\nball_diameter = 120;\nwall_thickness = 2;\nrib_width = 3;\nrib_depth = 1.5;\n\n// Panel dimensions\npanel_width = 50;\npanel_height = 25;\n\n// Valve detail\nvalve_radius = 4;\nvalve_height = 3;\n\n// Toy-specific features\nhandle_radius = 8;\nhandle_clearance = 25;\n\n// Create hollow ball with ribs\nmodule basketball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness*2, $fn = 64);\n    }\n}\n\n// Create single rib segment\nmodule rib_segment(length, width, depth) {\n    difference() {\n        // Main rib body\n        cube([length, width, depth], center = true);\n        \n        // Rounded edges\n        translate([0, 0, depth/2])\n        cylinder(h = depth, r = width/2, $fn = 16);\n    }\n}\n\n// Create horizontal ribs\nmodule horizontal_ribs() {\n    // Top rib\n    translate([0, 0, ball_diameter/2 - 25])\n    rotate([90, 0, 0])\n    rib_segment(panel_width, rib_width, rib_depth);\n    \n    // Bottom rib\n    translate([0, 0, -ball_diameter/2 + 25])\n    rotate([90, 0, 0])\n    rib_segment(panel_width, rib_width, rib_depth);\n}\n\n// Create vertical ribs\nmodule vertical_ribs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([ball_diameter/2 - 25, 0, 0])\n        rotate([0, 90, 0])\n        rib_segment(panel_height*2, rib_width, rib_depth);\n    }\n}\n\n// Create curved panel lines\nmodule panel_lines() {\n    // Top panels\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, ball_diameter/2 - 15])\n        rotate([90, 0, 0])\n        cylinder(h = 1.5, r1 = 15, r2 = 20, $fn = 4);\n    }\n    \n    // Bottom panels\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, -ball_diameter/2 + 15])\n        rotate([90, 0, 0])\n        cylinder(h = 1.5, r1 = 15, r2 = 20, $fn = 4);\n    }\n}\n\n// Create valve detail\nmodule valve() {\n    // Valve base\n    translate([0, ball_diameter/2 - 5, 0])\n    rotate([-90, 0, 0])\n    difference() {\n        cylinder(h = valve_height, r = valve_radius, $fn = 16);\n        cylinder(h = valve_height + 1, r = valve_radius - 1, $fn = 16);\n    }\n    \n    // Valve stem\n    translate([0, ball_diameter/2 - 3, 0])\n    rotate([-90, 0, 0])\n    cylinder(h = 2, r = 1.5, $fn = 8);\n}\n\n// Create toy handle feature\nmodule toy_handle() {\n    // Handle loop\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer handle\n        rotate_extrude(angle = 180, $fn = 32)\n        translate([handle_clearance + handle_radius, 0, 0])\n        circle(r = handle_radius, $fn = 16);\n        \n        // Inner clearance\n        rotate_extrude(angle = 180, $fn = 32)\n        translate([handle_clearance + handle_radius, 0, 0])\n        circle(r = handle_radius - wall_thickness, $fn = 16);\n    }\n}\n\n// Create grip texture\nmodule grip_texture() {\n    // Small bumps for grip\n    for (theta = [0:30:180]) {\n        for (phi = [0:30:360]) {\n            rotate([theta, 0, phi])\n            translate([ball_diameter/2 - wall_thickness, 0, 0])\n            sphere(r = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Basic basketball shell\n    basketball_shell();\n    \n    // External ribs and details\n    union() {\n        horizontal_ribs();\n        vertical_ribs();\n        panel_lines();\n        valve();\n    }\n    \n    // Toy-specific handle (optional - can be commented out)\n    // toy_handle();\n    \n    // Grip texture (optional - for better handling)\n    // grip_texture();\n}\n\n// Add subtle seams between panels\nfor (i = [0:5]) {\n    rotate([0, 0, i * 60])\n    translate([ball_diameter/2 - 1, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 2, r = 0.5, $fn = 8);\n}",
    "renders": true
  },
  {
    "toy": "soccerball",
    "openscad_code": "// Realistic Toy Soccer Ball - Medium Complexity\n// 3D printable soccer ball toy with realistic panel pattern\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Parameters\nball_diameter = 60;  // 60mm toy soccer ball\npanel_thickness = 2;  // 2mm wall thickness for printing\nseam_width = 1.5;    // Realistic seam between panels\ninflation_valve_size = 3;\n\n// Main ball structure\nmodule soccer_ball() {\n    difference() {\n        // Solid ball core\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - panel_thickness*2);\n        \n        // Inflation valve hole\n        translate([0, 0, ball_diameter/2 - panel_thickness])\n            rotate([90, 0, 0])\n                cylinder(h = panel_thickness + 1, d = inflation_valve_size);\n    }\n}\n\n// Pentagon panel\nmodule pentagon_panel() {\n    difference() {\n        // Outer pentagon surface\n        linear_extrude(height = panel_thickness) {\n            circle(d = ball_diameter/4, $fn = 5);\n        }\n        \n        // Inner pentagon for wall thickness\n        translate([0, 0, panel_thickness/2])\n            linear_extrude(height = panel_thickness/2 + 0.1) {\n                circle(d = ball_diameter/4 - 1, $fn = 5);\n            }\n    }\n}\n\n// Hexagon panel\nmodule hexagon_panel() {\n    difference() {\n        // Outer hexagon surface\n        linear_extrude(height = panel_thickness) {\n            circle(d = ball_diameter/4.5, $fn = 6);\n        }\n        \n        // Inner hexagon for wall thickness\n        translate([0, 0, panel_thickness/2])\n            linear_extrude(height = panel_thickness/2 + 0.1) {\n                circle(d = ball_diameter/4.5 - 1, $fn = 6);\n            }\n    }\n}\n\n// Position panels on sphere surface\nmodule panel_positions() {\n    // Pentagon panels (top and bottom)\n    translate([0, 0, ball_diameter/2 - panel_thickness/2])\n        rotate([0, 0, 0])\n            pentagon_panel();\n    \n    translate([0, 0, -ball_diameter/2 + panel_thickness/2])\n        rotate([180, 0, 0])\n            pentagon_panel();\n    \n    // Pentagon panel (front)\n    translate([0, ball_diameter/2 - panel_thickness/2, 0])\n        rotate([90, 0, 0])\n            pentagon_panel();\n    \n    // Hexagon panels around equator\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            // Upper ring\n            translate([0, \n                      (ball_diameter/2 - panel_thickness/2) * sin(37.4), \n                      (ball_diameter/2 - panel_thickness/2) * cos(37.4)])\n                rotate([37.4, 0, 0])\n                    hexagon_panel();\n            \n            // Lower ring\n            translate([0, \n                      (ball_diameter/2 - panel_thickness/2) * sin(37.4), \n                      -(ball_diameter/2 - panel_thickness/2) * cos(37.4)])\n                rotate([-37.4, 0, 0])\n                    hexagon_panel();\n        }\n    }\n    \n    // Additional hexagon panels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([(ball_diameter/2 - panel_thickness/2) * sin(63.4), \n                      0, \n                      (ball_diameter/2 - panel_thickness/2) * cos(63.4)])\n                rotate([0, 90, 63.4])\n                    hexagon_panel();\n            \n            translate([-(ball_diameter/2 - panel_thickness/2) * sin(63.4), \n                      0, \n                      (ball_diameter/2 - panel_thickness/2) * cos(63.4)])\n                rotate([0, 90, -63.4])\n                    hexagon_panel();\n        }\n    }\n}\n\n// Seams between panels\nmodule seams() {\n    color(\"black\") {\n        // Create raised seams\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([0, 0, ball_diameter/2 - seam_width/2])\n                    cylinder(h = seam_width, d = seam_width, $fn = 8);\n            }\n        }\n        \n        // Additional seam elements\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, \n                          (ball_diameter/2 - seam_width/2) * sin(37.4), \n                          (ball_diameter/2 - seam_width/2) * cos(37.4)])\n                    rotate([0, 37.4, 0])\n                        cylinder(h = seam_width, d = seam_width, $fn = 8);\n            }\n        }\n    }\n}\n\n// Toy-specific features\nmodule toy_features() {\n    // Small grip texture bumps\n    for(i = [0:20]) {\n        rotate([rand(360), rand(360), rand(360)]) {\n            translate([rand(ball_diameter/3), rand(ball_diameter/3), rand(ball_diameter/3)])\n                sphere(d = 1);\n        }\n    }\n    \n    // Toy safety valve cap\n    translate([0, 0, ball_diameter/2 + 1])\n        cylinder(h = 2, d = inflation_valve_size + 2);\n}\n\n// Main assembly\nunion() {\n    // Base ball structure\n    soccer_ball();\n    \n    // Position all panels\n    panel_positions();\n    \n    // Add seams\n    seams();\n    \n    // Add toy features\n    toy_features();\n}",
    "renders": true
  },
  {
    "toy": "tennisball",
    "openscad_code": "// Tennis Ball Toy - Realistic Style, Medium Complexity\n// Diameter: 67mm, Wall thickness: 2mm for 3D printing\n// Includes hollow core, seam lines, and toy-friendly features\n\n$fn = 48;\n\n// Main parameters\nball_diameter = 67;\nwall_thickness = 2;\nseam_width = 1.5;\nseam_depth = 1;\nfurrow_width = 3;\nfurrow_depth = 0.5;\n\n// Create hollow tennis ball shell\nmodule tennis_ball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Inner hollow\n        sphere(d = ball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Create curved seam line\nmodule seam_curve(angle) {\n    rotate([0, angle, 0]) {\n        // Create curved seam by differencing a torus segment\n        difference() {\n            // Main seam body\n            rotate_extrude(angle = 180, $fn = 64) {\n                translate([ball_diameter/2 - seam_depth, 0, 0]) {\n                    square([seam_width, seam_depth], center = true);\n                }\n            }\n            \n            // Smooth edges\n            rotate_extrude(angle = 180, $fn = 64) {\n                translate([ball_diameter/2 - seam_depth/2, 0, 0]) {\n                    circle(r = seam_depth/2, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Create furrow pattern for toy grip\nmodule furrows() {\n    // Generate furrows along seam lines\n    for (i = [0:15:345]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, ball_diameter/2 - furrow_depth]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = furrow_depth + 1, r = furrow_width/2, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Create toy-friendly solid core (optional fill)\nmodule solid_core() {\n    // Small inner sphere for structural integrity\n    sphere(d = ball_diameter - 4 * wall_thickness);\n}\n\n// Assembly module\nmodule tennis_ball_toy() {\n    // Main shell\n    tennis_ball_shell();\n    \n    // Add seam lines at 45 degree angles\n    seam_curve(45);\n    seam_curve(-45);\n    \n    // Add grip furrows\n    furrows();\n    \n    // Optional solid core - uncomment for solid toy\n    // translate([0, 0, 0]) {\n    //     color(\"lightgreen\") solid_core();\n    // }\n    \n    // Add toy safety features - rounded edges\n    translate([0, 0, ball_diameter/2]) {\n        cylinder(h = 2, r1 = 3, r2 = 1, $fn = 16);\n    }\n    translate([0, 0, -ball_diameter/2]) {\n        cylinder(h = 2, r1 = 1, r2 = 3, $fn = 16);\n    }\n}\n\n// Render the model\ntennis_ball_toy();",
    "renders": true
  },
  {
    "toy": "volleyball",
    "openscad_code": "// Realistic toy volleyball\n// Diameter: 100 mm, wall thickness: 2 mm\n// Features: Panel seams, inflation valve, toy-like proportions\n\n// Main parameters\nvolleyball_d = 100;          // 100 mm diameter\nwall_thickness = 2;          // 2 mm wall thickness for 3D printing\nseam_width = 1.5;            // Width of panel seams\nvalve_size = 6;              // Inflation valve diameter\n\n// Panel parameters – volleyball has 18 panels (6 identical stripes)\npanel_angle = 360/6;         // 60 degrees per repeating pattern\n\n// Helper module to create a single panel strip\nmodule panel_strip(height, width, thickness) {\n    difference() {\n        // Main panel shape – curved strip\n        linear_extrude(height = thickness, center = true, convexity = 10)\n        polygon(points = [\n            [0, -width/2],\n            [height*0.8, -width/2*0.9],\n            [height*0.9, 0],\n            [height*0.8, width/2*0.9],\n            [0, width/2]\n        ]);\n        \n        // Cut edges to make curved shape\n        translate([height*0.45, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = width*1.5, r = height*0.55, center = true);\n    }\n}\n\n// Helper module to create seam between panels\nmodule seam(length, width, height) {\n    color(\"gray20\")\n    translate([0, 0, -height/2])\n        cube([length, width, height], center = true);\n}\n\n// Main volleyball shell with hollow interior\nmodule volleyball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = volleyball_d, $fn = 100);\n        \n        // Inner hollow sphere\n        sphere(d = volleyball_d - wall_thickness*2, $fn = 100);\n    }\n}\n\n// Create raised panel seams\nmodule panel_seams() {\n    // First set of seams (vertical)\n    for (i = [0:5]) {\n        rotate([0, 0, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.9, seam_width*2, seam_width*2);\n    }\n    \n    // Second set of seams (rotated 90 degrees)\n    for (i = [0:5]) {\n        rotate([0, 90, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.9, seam_width*2, seam_width*2);\n    }\n    \n    // Third set of seams (angled)\n    for (i = [0:5]) {\n        rotate([45, 0, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.7, seam_width*2, seam_width*2);\n    }\n}\n\n// Inflation valve detail\nmodule inflation_valve() {\n    color(\"gray30\")\n    translate([0, 0, volleyball_d/2])\n    difference() {\n        // Valve base\n        cylinder(h = 3, r = valve_size/2, $fn = 20);\n        \n        // Valve hole\n        translate([0, 0, -1])\n            cylinder(h = 5, r = valve_size/4, $fn = 20);\n    }\n}\n\n// Toy-specific details – small bumps for grip texture\nmodule grip_texture() {\n    // Create small bumps across the surface\n    for (theta = [0:30:180]) {\n        for (phi = [0:45:360]) {\n            translate([\n                (volleyball_d/2 - 1) * cos(phi) * sin(theta),\n                (volleyball_d/2 - 1) * sin(phi) * sin(theta),\n                (volleyball_d/2 - 1) * cos(theta)\n            ]) {\n                sphere(d = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    volleyball_shell();\n    \n    // Panel seams\n    panel_seams();\n    \n    // Inflation valve\n    inflation_valve();\n    \n    // Grip texture\n    grip_texture();\n}",
    "renders": true
  },
  {
    "toy": "beachball",
    "openscad_code": "// Beachball toy - realistic style, medium complexity\n// Overall dimensions: 100mm diameter ball with 2mm wall thickness\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nball_diameter = 100;\nwall_thickness = 2;\nseam_width = 4;\nvalve_length = 15;\nvalve_diameter = 6;\npanel_segments = 6;  // Classic 6-panel beachball\n\n// Color definitions (classic beachball colors)\ncolors = [\"red\", \"white\", \"blue\", \"white\", \"yellow\", \"white\"];\n\n// Main hollow ball structure\nmodule beachball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Inner hollow sphere\n        sphere(d = ball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Panel dividing seams\nmodule panel_seams() {\n    for(i = [0:panel_segments-1]) {\n        rotate([0, 0, i * 360/panel_segments]) {\n            // Vertical seam\n            translate([0, 0, -ball_diameter/2 - 1]) {\n                cylinder(h = ball_diameter + 2, d = seam_width, center = true);\n            }\n            \n            // Horizontal seam (latitude)\n            rotate([90, 0, 0]) {\n                translate([0, 0, 0]) {\n                    cylinder(h = ball_diameter, d = seam_width, center = true);\n                }\n            }\n        }\n    }\n    \n    // Equatorial seam\n    rotate([0, 90, 0]) {\n        cylinder(h = ball_diameter, d = seam_width, center = true);\n    }\n}\n\n// Valve assembly for inflation\nmodule inflation_valve() {\n    // Valve base attached to ball\n    translate([ball_diameter/2 - wall_thickness/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Outer valve tube\n                cylinder(h = valve_length, d = valve_diameter + 2, center = true);\n                \n                // Inner hole\n                cylinder(h = valve_length + 2, d = valve_diameter, center = true);\n            }\n        }\n    }\n    \n    // Valve cap\n    translate([ball_diameter/2 + valve_length/2 + 2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Cap body\n                cylinder(h = 8, d = valve_diameter + 4, center = true);\n                \n                // Grip ridges\n                for(i = [0:5]) {\n                    rotate([0, 0, i * 60]) {\n                        translate([0, -valve_diameter/2 - 1, 0]) {\n                            cube([valve_diameter + 4, 2, 8], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Panel color segments (represented as indentations)\nmodule panel_details() {\n    for(i = [0:panel_segments-1]) {\n        rotate([0, 0, i * 360/panel_segments + 30]) {\n            translate([0, 0, 0]) {\n                difference() {\n                    sphere(d = ball_diameter - 0.5);\n                    \n                    // Cut panel shape\n                    rotate([0, 0, -30]) {\n                        intersection() {\n                            sphere(d = ball_diameter - 0.1);\n                            cube([ball_diameter, ball_diameter, ball_diameter], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    beachball_shell();\n    \n    // Panel seams for realistic look\n    panel_seams();\n    \n    // Inflation valve\n    inflation_valve();\n    \n    // Panel details\n    panel_details();\n}",
    "renders": true
  },
  {
    "toy": "golfball",
    "openscad_code": "// Realistic Golf Ball Toy - Medium Complexity\n// Diameter: 42.67mm (regulation size)\n\nmodule golf_ball() {\n    ball_diameter = 42.67;\n    wall_thickness = 2;\n    \n    // Main hollow ball\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness * 2);\n    }\n    \n    // Dimples - 336 total in icosahedral pattern\n    dimple_depth = 0.5;\n    dimple_radius = 2.5;\n    \n    // Top pentagon dimples\n    for (i = [0:4]) {\n        angle = i * 72;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 3, ball_diameter/2 - 5])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Second ring\n    for (i = [0:9]) {\n        angle = i * 36;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 8, ball_diameter/2 - 6])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Third ring\n    for (i = [0:14]) {\n        angle = i * 24;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 12, ball_diameter/2 - 7])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Equator\n    for (i = [0:19]) {\n        angle = i * 18;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 15, 0])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Bottom symmetric dimples (mirror top)\n    mirror([0, 0, 1]) {\n        // Bottom pentagon\n        for (i = [0:4]) {\n            angle = i * 72;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 3, ball_diameter/2 - 5])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n        \n        // Second bottom ring\n        for (i = [0:9]) {\n            angle = i * 36;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 8, ball_diameter/2 - 6])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n        \n        // Third bottom ring\n        for (i = [0:14]) {\n            angle = i * 24;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 12, ball_diameter/2 - 7])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n    }\n    \n    // Toy safety features - rounded edges\n    difference() {\n        sphere(d = ball_diameter + 0.5);\n        sphere(d = ball_diameter + 0.1);\n    }\n    \n    // Internal support structure for 3D printing\n    support_radius = 2;\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 0, -ball_diameter/4])\n        cylinder(h = ball_diameter/2, r = support_radius, $fn = 6);\n    }\n    \n    // Alignment mark for putting practice\n    difference() {\n        translate([0, -ball_diameter/2 + 0.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r1 = 1, r2 = 0.5, $fn = 3);\n        translate([0, -ball_diameter/2 - 1, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 0.8, $fn = 3);\n    }\n}\n\nmodule dimple(radius, depth) {\n    difference() {\n        sphere(r = radius);\n        translate([0, 0, -radius - depth])\n        sphere(r = radius + depth);\n    }\n}\n\n// Generate the golf ball\ngolf_ball();",
    "renders": true
  },
  {
    "toy": "bowlingball",
    "openscad_code": "// Bowling Ball Toy - Realistic Style, Medium Complexity\n// 3D printable toy bowling ball with finger holes and toy-style details\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\nball_diameter = 80;  // Reasonable toy size\nwall_thickness = 2;  // For 3D printing\nhole_depth = 12;\nhole_radius = 8;\n\nmodule bowling_ball() {\n    difference() {\n        // Main ball body\n        sphere(d = ball_diameter);\n        \n        // Finger holes - realistic spacing\n        translate([15, 0, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius, $fn = 32);\n                \n        translate([-7, -12, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius * 0.9, $fn = 32);\n                \n        translate([-7, 12, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius * 0.8, $fn = 32);\n    }\n}\n\n// Toy-style seam line around equator for manufacturing look\nmodule seam_line() {\n    difference() {\n        cylinder(h = 1.5, r = ball_diameter/2 + 0.5, center = true);\n        cylinder(h = 2, r = ball_diameter/2 - 0.5, center = true);\n    }\n}\n\n// Decorative toy-style dots (manufacturing marks)\nmodule toy_dots() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([ball_diameter/2 * 0.7, 0, 0]) {\n                sphere(r = 1.5);\n            }\n            translate([ball_diameter/2 * 0.5, 0, 15]) {\n                sphere(r = 1);\n            }\n            translate([ball_diameter/2 * 0.5, 0, -15]) {\n                sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Toy safety features - rounded edges and reinforcements\nmodule safety_ring() {\n    difference() {\n        sphere(d = ball_diameter + 1);\n        sphere(d = ball_diameter - wall_thickness);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball\n    bowling_ball();\n    \n    // Add seam line\n    translate([0, 0, 0]) \n        seam_line();\n    \n    // Add toy dots\n    color(\"gray\") \n        toy_dots();\n    \n    // Internal reinforcement\n    %safety_ring();\n}",
    "renders": true
  },
  {
    "toy": "handball",
    "openscad_code": "// Handball toy - realistic style, medium complexity\n// Overall size: 75mm diameter ball + 15mm finger grip ridges\n\nmodule finger_groove(angle, depth) {\n    // Create curved groove for finger grip\n    rotate([0, 0, angle])\n    translate([0, 37.5, 0])\n    difference() {\n        cylinder(h=5, r1=6, r2=6, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=7, r1=4, r2=4, $fn=32);\n    }\n}\n\nmodule panel_line(angle) {\n    // Create raised panel lines for realistic ball texture\n    rotate([0, 0, angle])\n    translate([0, 0, 0])\n    difference() {\n        sphere(d=76, $fn=64);\n        translate([0, 0, -1])\n        sphere(d=73, $fn=64);\n    }\n}\n\nmodule valve_stem() {\n    // Small valve stem detail\n    translate([0, 0, 37.5])\n    cylinder(h=3, r1=2, r2=2, $fn=16);\n    translate([0, 0, 40.5])\n    sphere(d=4.5, $fn=16);\n}\n\nmodule handball_toy() {\n    // Main ball body - hollow for 3D printing\n    difference() {\n        // Outer shell\n        sphere(d=75, $fn=128);\n        \n        // Inner hollow space\n        sphere(d=71, $fn=128);\n    }\n    \n    // Add finger grip grooves around circumference\n    for(i = [0:30:330]) {\n        finger_groove(i, 2);\n    }\n    \n    // Add realistic panel lines\n    panel_line(0);\n    panel_line(120);\n    panel_line(240);\n    \n    // Add valve stem detail\n    valve_stem();\n    \n    // Add subtle texture dots for grip\n    for(i = [0:15:345]) {\n        rotate([0, 0, i])\n        translate([0, 35, 35])\n        sphere(d=1.5, $fn=8);\n    }\n    \n    for(i = [7.5:15:352.5]) {\n        rotate([0, 0, i])\n        translate([0, 30, 30])\n        sphere(d=1.5, $fn=8);\n    }\n}\n\n// Render the complete handball toy\nhandball_toy();",
    "renders": true
  },
  {
    "toy": "dodgeball",
    "openscad_code": "// Dodgeball Toy - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main parameters\nball_diameter = 80;  // 80mm diameter - good size for toy\nwall_thickness = 2;  // Standard 3D printing wall thickness\ngrip_depth = 3;      // Shallow grip pattern depth\n\nmodule dodgeball_toy() {\n    difference() {\n        // Main ball body\n        sphere(d = ball_diameter);\n        \n        // Panel seams - 8 panels like real dodgeball\n        for (i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                // Vertical seam grooves\n                translate([0, 0, -ball_diameter/2 - 1])\n                    cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n            }\n        }\n        \n        // Horizontal seam grooves\n        rotate([90, 0, 0]) {\n            translate([0, 0, -ball_diameter/2 - 1])\n                cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n        }\n        rotate([0, 90, 0]) {\n            translate([0, 0, -ball_diameter/2 - 1])\n                cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n        }\n    }\n    \n    // Textured grip pattern - small circles across surface\n    module grip_pattern() {\n        // Generate grip dots in spiral pattern\n        for (lat = [-60:15:60]) {\n            for (lon = [0:30:360]) {\n                rotate([0, lat, lon]) {\n                    translate([0, 0, ball_diameter/2 - grip_depth/2])\n                        cylinder(h = grip_depth + 0.5, d = 4, center = true);\n                }\n            }\n        }\n    }\n    \n    // Apply grip pattern\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Create hollow interior\n        sphere(d = ball_diameter - 2*wall_thickness);\n        \n        // Remove grip pattern\n        grip_pattern();\n    }\n    \n    // Valve detail - realistic inflation valve\n    translate([0, 0, ball_diameter/2 - 2])\n        cylinder(h = 4, d = 8, center = true);\n    \n    // Valve cap\n    translate([0, 0, ball_diameter/2])\n        cylinder(h = 2, d = 6, center = true);\n    \n    // Valve threads (simplified)\n    for (i = [0:0.5:2]) {\n        translate([0, 0, ball_diameter/2 - 2 + i])\n            cylinder(h = 0.3, d = 7 - i*0.5, center = true);\n    }\n}\n\n// Render the complete dodgeball\ndodgeball_toy();",
    "renders": true
  },
  {
    "toy": "kickball",
    "openscad_code": "// Realistic Kickball Toy (Medium Complexity)\n// Overall diameter: 100mm, 3D printable, wall thickness 2mm\n\nmodule kickball() {\n    // Main inflated ball body\n    difference() {\n        sphere(d = 100, $fn = 64);  // Outer shell\n        sphere(d = 96, $fn = 64);   // Hollow cavity\n    }\n\n    // Valve stem for inflation\n    translate([0, 0, 50])\n        cylinder(h = 8, d1 = 6, d2 = 4, $fn = 16);\n\n    // Valve cap\n    translate([0, 0, 58])\n        cylinder(h = 4, d = 5, $fn = 16);\n\n    // Raised pentagonal panels (traditional kickball pattern)\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([0, 0, 49])\n                panel();\n    }\n\n    // Internal baffle structure for rigidity\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, 0])\n                baffle();\n    }\n}\n\nmodule panel() {\n    // Raised pentagon shape\n    linear_extrude(height = 2)\n        polygon(\n            points = [\n                [0, 30],\n                [28.5, 9.3],\n                [17.6, -24.3],\n                [-17.6, -24.3],\n                [-28.5, 9.3]\n            ]\n        );\n}\n\nmodule baffle() {\n    // Internal cross support ring\n    difference() {\n        cylinder(h = 100, d = 30, center = true, $fn = 6);\n        cylinder(h = 102, d = 26, center = true, $fn = 6);\n    }\n}\n\n// Seam detail around equator\nmodule seam() {\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 2, d = 100.5, center = true, $fn = 64);\n            cylinder(h = 3, d = 97.5, center = true, $fn = 64);\n        }\n}\n\n// Assembly with seam\nunion() {\n    kickball();\n    translate([0, 0, 0])\n        seam();\n}\n\n// Add subtle texture dots for grip\nfor (i = [0:35]) {\n    rotate([i * 10, 0, 0])\n        rotate([0, i * 20, 0])\n            translate([0, 0, 48.5])\n                sphere(d = 2, $fn = 8);\n}",
    "renders": true
  },
  {
    "toy": "netball",
    "openscad_code": "// Netball Toy – 3D printable, ~75 mm diameter\n\n// Global parameters\nball_d = 75;                 // overall diameter\nwall_t = 2;                  // wall thickness for 3D printing\ngrip_width = 6;              // width of finger-grips\ngrip_depth = 2.5;            // how far the grips sink into the ball\nsegments = 32;               // sphere resolution\n\n// Netball color\ncolor(\"orange\")\ndifference() {\n    // Outer sphere\n    sphere(d = ball_d, $fn = segments);\n\n    // Six equally-spaced finger-grip panels\n    for (rot = [0 : 60 : 300]) {\n        rotate([0, 90, rot])\n            translate([0, 0, ball_d/2 - grip_depth])\n                cube([grip_width, grip_width, grip_depth*2], center = true);\n    }\n\n    // Central cavity (hollow ball)\n    sphere(d = ball_d - 2*wall_t, $fn = segments);\n}\n\n// Valve stem – small protruding cylinder\ntranslate([0, 0, ball_d/2])\n    cylinder(h = 5, d = 6, $fn = 12);\n\n// Toy-style “joint” rings around equator for structural look\nmodule equator_ring(height, depth) {\n    rotate_extrude($fn = segments)\n        translate([ball_d/2 - depth/2, 0])\n            square([depth, height]);\n}\n\n// Upper equator ring\ntranslate([0, 0, ball_d/4])\n    equator_ring(height = 3, depth = 2.5);\n\n// Lower equator ring\ntranslate([0, 0, -ball_d/4])\n    equator_ring(height = 3, depth = 2.5);\n\n// Small support feet (three tiny spheres for stability on print bed)\nfor (a = [0 : 120 : 240]) {\n    rotate([0, 0, a])\n        translate([ball_d/2 * 0.85, 0, -ball_d/2 - 1])\n            sphere(d = 4);\n}",
    "renders": true
  },
  {
    "toy": "softball",
    "openscad_code": "// Realistic Softball Toy (Medium Complexity)\n// Overall diameter: 96mm (regulation-size toy)\n\n$fn = 50;  // Good surface quality for 3D printing\n\n// Main parameters\nsoftball_diameter = 96;           // Regulation toy softball size\nwall_thickness = 2;               // 3D-printable wall\nseam_depth = 1.5;                 // Stitched seam recess\nstitch_width = 0.8;\nstitch_length = 4;\nstitch_count = 88;                // Realistic stitch count\nlemon_peel_segments = 2;          // Two curved panels\npanel_thickness = 1.5;            // Raised panel ridges\n\n// Softball core (hollow sphere)\nmodule softball_core() {\n    difference() {\n        sphere(d = softball_diameter);\n        sphere(d = softball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Raised seam running along the equator\nmodule raised_seam() {\n    rotate([90, 0, 0])\n    difference() {\n        // Main seam ring\n        torus(softball_diameter / 2 - seam_depth / 2, seam_depth / 2);\n        \n        // Stitch holes along seam\n        for(i = [0 : stitch_count - 1]) {\n            rotate([0, 0, i * 360 / stitch_count])\n            translate([softball_diameter / 2 - seam_depth, 0, 0])\n            cube([stitch_length, stitch_width, seam_depth * 1.2], center = true);\n        }\n    }\n}\n\n// Lemon-peel style panels\nmodule lemon_peel_panels() {\n    // Panel ridges\n    for(i = [0 : lemon_peel_segments - 1]) {\n        rotate([0, 0, i * 180])\n        panel_arc();\n    }\n}\n\nmodule panel_arc() {\n    // Left panel ridge\n    translate([0, 0, -panel_thickness / 2])\n    rotate([0, 90, 0])\n    linear_extrude(height = panel_thickness)\n    offset(r = 2)\n    arc(softball_diameter / 2 - 8, [160, 200]);\n    \n    // Right panel ridge\n    translate([0, 0, -panel_thickness / 2])\n    rotate([0, 90, 0])\n    linear_extrude(height = panel_thickness)\n    offset(r = 2)\n    arc(softball_diameter / 2 - 8, [-20, 20]);\n}\n\n// Helper: Create 2D arc for panel outlines\nmodule arc(radius, angles) {\n    intersection() {\n        circle(r = radius);\n        sector(angles[0], angles[1], radius * 2);\n    }\n}\n\nmodule sector(start, end, radius) {\n    difference() {\n        circle(r = radius);\n        rotate(start) square(radius * 2);\n        rotate(end) square(radius * 2);\n    }\n}\n\n// Helper: Create torus\nmodule torus(major, minor) {\n    rotate_extrude()\n    translate([major, 0])\n    circle(r = minor);\n}\n\n// Toy safety features\nmodule safety_features() {\n    // Rounded edges on all protrusions\n    minkowski() {\n        union() {\n            softball_core();\n            raised_seam();\n            lemon_peel_panels();\n        }\n        sphere(r = 0.5);\n    }\n}\n\n// Assembly\nsafety_features();\n\n// Optional: Add small alignment dots for seams\nmodule alignment_dots() {\n    for(i = [0 : 3]) {\n        rotate([0, 0, i * 90])\n        translate([softball_diameter / 2 - 10, 0, 0])\n        sphere(d = 1.5);\n    }\n}\n\n// Uncomment to add alignment dots\n// alignment_dots();",
    "renders": true
  },
  {
    "toy": "wiffleball",
    "openscad_code": "// Wiffleball Toy - Realistic Style, Medium Complexity\n// Diameter: 75mm, Wall thickness: 2mm\n\n// Main parameters\nball_diameter = 75;\nwall_thickness = 2;\nhole_diameter = 15;\nnum_holes = 8;\n\n// Create hollow ball with holes\nmodule wiffleball() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Inner hollow space\n        sphere(d = ball_diameter - 2 * wall_thickness, $fn = 64);\n        \n        // Create holes around the ball\n        for(i = [0 : num_holes - 1]) {\n            // First set of holes\n            rotate([0, 90, i * 360 / num_holes]) \n                translate([0, 0, ball_diameter / 2]) \n                cylinder(h = wall_thickness + 2, d = hole_diameter, $fn = 32);\n            \n            // Second set offset by 45 degrees\n            rotate([45, 90, i * 360 / num_holes + 22.5]) \n                translate([0, 0, ball_diameter / 2]) \n                cylinder(h = wall_thickness + 2, d = hole_diameter * 0.8, $fn = 32);\n            \n            // Third set on equator\n            rotate([0, 0, i * 360 / num_holes]) \n                translate([ball_diameter / 2, 0, 0]) \n                cylinder(h = wall_thickness + 2, d = hole_diameter * 0.6, $fn = 32);\n        }\n        \n        // Reinforcement ring inside\n        difference() {\n            rotate([0, 90, 0])\n                cylinder(h = wall_thickness, d = ball_diameter * 0.7, $fn = 64);\n            rotate([0, 90, 0])\n                cylinder(h = wall_thickness + 1, d = ball_diameter * 0.6, $fn = 64);\n        }\n    }\n    \n    // Add seam line detail\n    difference() {\n        union() {\n            // Top seam half\n            rotate([0, 90, 0])\n                translate([0, 0, -wall_thickness/2])\n                    cylinder(h = wall_thickness, d = ball_diameter, $fn = 64);\n            \n            // Bottom seam half\n            rotate([0, 90, 0])\n                translate([0, 0, wall_thickness/2])\n                    cylinder(h = wall_thickness, d = ball_diameter, $fn = 64);\n        }\n        \n        // Cut away everything except thin seam\n        sphere(d = ball_diameter + 1, $fn = 64);\n        sphere(d = ball_diameter - 1, $fn = 64);\n    }\n    \n    // Add small vent holes for printing\n    for(i = [0 : 3]) {\n        rotate([0, 0, i * 90])\n            translate([ball_diameter/2 - wall_thickness, 0, 0])\n                cylinder(h = wall_thickness * 2, d = wall_thickness, $fn = 8);\n    }\n}\n\n// Render the complete wiffleball\nwiffleball();",
    "renders": true
  },
  {
    "toy": "squashball",
    "openscad_code": "// Squashball toy with realistic proportions and toy features\n// Overall size: 80mm diameter squashball with 2mm shell thickness\n\n// Parameters\nball_diameter = 80;\nwall_thickness = 2;\nseam_height = 1.5;\nseam_width = 6;\ntexture_depth = 0.8;\nhole_diameter = 12;\nconnector_size = 8;\nconnector_gap = 3;\n\n// Main squashball shell\nmodule squashball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness*2, $fn = 64);\n    }\n}\n\n// Seam around the equator\nmodule seam() {\n    rotate([90, 0, 0]) {\n        difference() {\n            // Outer ring\n            cylinder(h = seam_height, d = ball_diameter + 1, $fn = 64);\n            \n            // Inner ring\n            cylinder(h = seam_height + 0.1, d = ball_diameter - seam_width, $fn = 64);\n        }\n    }\n}\n\n// Small dimples for realistic squashball texture\nmodule texture_dimples() {\n    // Create dimples in a pattern\n    for (phi = [0:30:150]) {\n        for (theta = [0:45:359]) {\n            rotate([phi, 0, theta]) {\n                translate([0, 0, ball_diameter/2 - texture_depth]) {\n                    rotate([0, 0, 0]) {\n                        sphere(d = texture_depth*2, $fn = 12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Toy connector holes for building system\nmodule connector_holes() {\n    // Top hole\n    translate([0, 0, ball_diameter/2 - wall_thickness/2]) {\n        rotate([0, 0, 0]) {\n            cylinder(h = wall_thickness*2, d = hole_diameter, $fn = 32);\n        }\n    }\n    \n    // Bottom hole\n    translate([0, 0, -ball_diameter/2 + wall_thickness/2]) {\n        rotate([0, 0, 0]) {\n            cylinder(h = wall_thickness*2, d = hole_diameter, $fn = 32);\n        }\n    }\n}\n\n// Reinforcement ribs inside for structural integrity\nmodule internal_ribs() {\n    // Vertical rib\n    translate([0, 0, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = ball_diameter - wall_thickness*2, d = wall_thickness*3, $fn = 16);\n                cylinder(h = ball_diameter - wall_thickness*2 + 0.1, d = wall_thickness, $fn = 16);\n            }\n        }\n    }\n    \n    // Horizontal rib\n    rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h = ball_diameter - wall_thickness*2, d = wall_thickness*3, $fn = 16);\n            cylinder(h = ball_diameter - wall_thickness*2 + 0.1, d = wall_thickness, $fn = 16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shell\n    squashball_shell();\n    \n    // Seam\n    seam();\n    \n    // Texture (subtract from surface)\n    difference() {\n        // Dummy placeholder for union\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Actual texture subtraction\n        translate([0, 0, 0]) {\n            texture_dimples();\n        }\n    }\n    \n    // Connector holes\n    difference() {\n        // Dummy placeholder\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Actual holes\n        connector_holes();\n    }\n    \n    // Internal structure\n    internal_ribs();\n}",
    "renders": true
  },
  {
    "toy": "racquetball",
    "openscad_code": "// Racquetball Toy Set - Realistic Racquet and Ball\n// 3D printable medium complexity toy racquetball set\n\n// Parameters\n$fa = 1;\n$fs = 0.4;\n\n// Racquet dimensions (mm)\nhandle_length = 80;\nhandle_diameter = 22;\nhead_width = 110;\nhead_height = 190;\nhead_thickness = 18;\nstring_diameter = 2;\nstring_spacing = 12;\n\n// Ball dimensions\nball_diameter = 57;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Racquet head with string pattern\nmodule racquet_head() {\n    difference() {\n        // Main head shape - oval\n        scale([1, 1.7, 1])\n            cylinder(h=head_thickness, d=head_width, center=true);\n        \n        // Inner cavity for hollow printing\n        scale([1, 1.7, 1])\n            cylinder(h=head_thickness+1, d=head_width-wall_thickness*2, center=true);\n        \n        // String holes\n        for (x = [-head_width/2+10 : string_spacing : head_width/2-10]) {\n            for (y = [-head_height/2+15 : string_spacing : head_height/2-15]) {\n                translate([x, y, 0])\n                    cylinder(h=head_thickness+2, d=3, center=true);\n            }\n        }\n    }\n}\n\n// Racquet handle with grip\nmodule racquet_handle() {\n    difference() {\n        // Main handle\n        cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip indentations\n        for (i = [handle_diameter/4 : handle_diameter/4 : handle_length-handle_diameter/2]) {\n            translate([0, 0, i])\n                rotate([0, 90, 0])\n                    cylinder(h=handle_diameter*1.2, d=handle_diameter-wall_thickness, center=true);\n        }\n    }\n    \n    // Grip rings\n    for (i = [5 : 10 : handle_length-10]) {\n        translate([0, 0, i])\n            cylinder(h=2, d=handle_diameter+2);\n    }\n}\n\n// Racquet throat connecting head to handle\nmodule racquet_throat() {\n    difference() {\n        hull() {\n            // Connection to head\n            translate([0, -head_height/2+5, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=head_thickness, d=handle_diameter+10, center=true);\n            \n            // Connection to handle\n            translate([0, -handle_length/2-5, 0])\n                cylinder(h=head_thickness, d=handle_diameter, center=true);\n        }\n        \n        // Hollow center\n        hull() {\n            translate([0, -head_height/2+5, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=head_thickness+2, d=handle_diameter+6, center=true);\n            \n            translate([0, -handle_length/2-5, 0])\n                cylinder(h=head_thickness+2, d=handle_diameter-wall_thickness*2, center=true);\n        }\n    }\n}\n\n// Complete racquet assembly\nmodule racquet() {\n    union() {\n        // Racquet head\n        translate([0, head_height/2, 0])\n            racquet_head();\n        \n        // Racquet handle\n        translate([0, -handle_length/2, 0])\n            rotate([90, 0, 0])\n                racquet_handle();\n        \n        // Throat\n        translate([0, 0, 0])\n            racquet_throat();\n    }\n}\n\n// Racquetball with toy-style seam\nmodule racquetball() {\n    difference() {\n        // Main ball\n        sphere(d=ball_diameter);\n        \n        // Hollow center\n        sphere(d=ball_diameter-wall_thickness*2);\n    }\n    \n    // Toy seam\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h=ball_diameter+2, d=ball_diameter, center=true);\n            cylinder(h=ball_diameter+4, d=ball_diameter-wall_thickness*2, center=true);\n        }\n    \n    // Small dimples for grip texture\n    for (i = [0 : 30 : 359]) {\n        rotate([0, i, 0])\n            translate([0, 0, ball_diameter/2-1])\n                sphere(d=3);\n    }\n}\n\n// Racquet display stand\nmodule racquet_stand() {\n    difference() {\n        // Base\n        cube([120, 60, 10], center=true);\n        \n        // Handle slot\n        translate([0, 0, 5])\n            cube([handle_diameter+4, handle_diameter+4, 12], center=true);\n    }\n    \n    // Decorative elements\n    translate([40, 0, 5])\n        cylinder(h=10, d=8);\n    translate([-40, 0, 5])\n        cylinder(h=10, d=8);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    racquet();\n\ntranslate([80, 60, ball_diameter/2])\n    racquetball();\n\ntranslate([-80, 60, 5])\n    racquet_stand();",
    "renders": true
  },
  {
    "toy": "puck",
    "openscad_code": "// Puck Toy - Realistic Medium Complexity\n// Dimensions: 76mm diameter, 25mm height (standard toy hockey puck)\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main puck body\nmodule puck_body() {\n    difference() {\n        // Solid cylinder base\n        cylinder(h = 25, d = 76, center = true);\n        \n        // Hollow center cavity (2mm walls)\n        cylinder(h = 26, d = 72, center = true);\n        \n        // Bottom recess for logo area\n        translate([0, 0, 11.5])\n            cylinder(h = 2, d = 50, center = true);\n    }\n}\n\n// Side grip pattern - raised ridges\nmodule grip_ridges() {\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([38, 0, 0])\n                cube([2, 2, 25], center = true);\n    }\n}\n\n// Top surface texture - concentric rings\nmodule top_texture() {\n    for (r = [15:5:35]) {\n        translate([0, 0, 12.5])\n            cylinder(h = 0.5, d = r * 2, center = true);\n    }\n}\n\n// Bottom logo area with toy brand text\nmodule logo_area() {\n    translate([0, 0, 10.5])\n        difference() {\n            cylinder(h = 1, d = 48, center = true);\n            // Simple star pattern\n            for (i = [0:4]) {\n                rotate([0, 0, i * 72])\n                    translate([15, 0, 0])\n                        cube([20, 2, 2], center = true);\n            }\n        }\n}\n\n// Impact bumpers - rubber-like edges\nmodule bumpers() {\n    color(\"darkgray\")\n    translate([0, 0, 12.5])\n        difference() {\n            cylinder(h = 27, d = 80, center = true);\n            cylinder(h = 28, d = 76, center = true);\n        }\n}\n\n// Assembly\nunion() {\n    puck_body();\n    grip_ridges();\n    top_texture();\n    logo_area();\n    bumpers();\n}",
    "renders": true
  },
  {
    "toy": "disc",
    "openscad_code": "// Disc toy - realistic style, medium complexity\n// Flying disc with grip ring and decorative elements\n\n$fn = 36;  // Smooth curves for realism\n\n// Main disc body\nmodule disc_body() {\n    difference() {\n        // Outer disc shell\n        cylinder(h=8, d=120, center=true);\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, 1])\n            cylinder(h=10, d=116, center=true);\n    }\n}\n\n// Grip ring on top\nmodule grip_ring() {\n    difference() {\n        // Main ring\n        cylinder(h=4, d=90, center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=6, d=80, center=true);\n    }\n}\n\n// Decorative spokes\nmodule spokes() {\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([25, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d=3, center=true);\n    }\n}\n\n// Center hub detail\nmodule center_hub() {\n    difference() {\n        // Outer hub\n        cylinder(h=6, d=25, center=true);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=8, d=15, center=true);\n    }\n}\n\n// Edge grip texture\nmodule edge_grip() {\n    // Create small bumps around edge\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([60, 0, 0])\n                sphere(d=4);\n    }\n}\n\n// Bottom structural ribs\nmodule ribs() {\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, -3.5])\n                cube([60, 2, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main disc\n    disc_body();\n    \n    // Top grip ring\n    translate([0, 0, 4])\n        grip_ring();\n    \n    // Decorative spokes on top\n    translate([0, 0, 6])\n        spokes();\n    \n    // Center hub\n    translate([0, 0, 6])\n        center_hub();\n    \n    // Edge grip texture\n    translate([0, 0, 4])\n        edge_grip();\n    \n    // Bottom ribs for structure\n    ribs();\n}",
    "renders": true
  },
  {
    "toy": "frisbee",
    "openscad_code": "// Realistic Toy Frisbee - 3D printable design\n// Overall diameter: 120 mm, thickness: 6 mm\n\nmodule frisbee_body() {\n    // Main disc body with slight curvature\n    difference() {\n        // Outer curved top surface\n        translate([0, 0, 3])\n            cylinder(h=6, r=60, $fn=120);\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, 5])\n            cylinder(h=4, r=58, $fn=120);\n    }\n    \n    // Bottom surface with raised edge\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h=3, r=60, $fn=120);\n        translate([0, 0, 0])\n            cylinder(h=3, r=58, $fn=120);\n    }\n}\n\nmodule grip_rings() {\n    // Concentric grip rings on top surface\n    for(i=[1:3]) {\n        translate([0, 0, 8.5])\n            difference() {\n                cylinder(h=0.5, r=60 - (i * 12), $fn=120);\n                cylinder(h=0.5, r=59 - (i * 12), $fn=120);\n            }\n    }\n    \n    // Radial grip lines\n    for(angle=[0:15:359]) {\n        rotate([0, 0, angle])\n            translate([30, -1, 8.5])\n                cube([30, 2, 0.5]);\n    }\n}\n\nmodule toy_details() {\n    // Decorative center emblem\n    translate([0, 0, 9])\n        difference() {\n            cylinder(h=1, r=8, $fn=32);\n            translate([0, 0, -0.1])\n                cylinder(h=1.2, r=6, $fn=32);\n        }\n    \n    // Small flight stability nubs (4 pieces)\n    for(angle=[45:90:315]) {\n        rotate([0, 0, angle])\n            translate([55, 0, 1])\n                sphere(r=2, $fn=16);\n    }\n    \n    // Strengthening ribs on bottom\n    for(angle=[0:45:315]) {\n        rotate([0, 0, angle])\n            translate([30, -1.5, 0])\n                cube([30, 3, 1.5]);\n    }\n}\n\nmodule safety_edge() {\n    // Rounded safety edge all around\n    rotate_extrude($fn=120)\n        translate([60, 0])\n            circle(r=3);\n}\n\n// Assembly\nunion() {\n    frisbee_body();\n    grip_rings();\n    toy_details();\n    translate([0, 0, 3])\n        safety_edge();\n}",
    "renders": true
  },
  {
    "toy": "boomerang",
    "openscad_code": "// Realistic toy boomerang - medium complexity\n// Overall size: ~120mm tip-to-tip, ~25mm thick\n\n// Parameters\nboomerang_length = 120;\nboomerang_width = 25;\nboomerang_thickness = 6;\ncore_thickness = 3;\nwing_taper = 0.4;\ngrip_radius = 8;\ngrip_holes = 5;\ngrip_hole_radius = 1.5;\n\n// Helper module for rounded edges\nmodule rounded_cube(size, radius) {\n    offset = radius * [1,1,1];\n    hull() {\n        for (x = [0,1], y = [0,1], z = [0,1]) {\n            translate([x*(size.x-2*radius), y*(size.y-2*radius), z*(size.z-2*radius)])\n                sphere(r=radius);\n        }\n    }\n}\n\n// Main boomerang body with three wings\nmodule boomerang_body() {\n    difference() {\n        union() {\n            // Central hub\n            cylinder(h=boomerang_thickness, r=boomerang_width/2, $fn=32);\n            \n            // Three wings at 120 degree intervals\n            for (i = [0:120:240]) {\n                rotate([0,0,i]) {\n                    translate([boomerang_width/2, 0, 0]) {\n                        // Wing base\n                        linear_extrude(height=boomerang_thickness) {\n                            polygon(points=[\n                                [0, -boomerang_width/4],\n                                [boomerang_length*0.4, -boomerang_width/3],\n                                [boomerang_length*0.7, 0],\n                                [boomerang_length*0.4, boomerang_width/3],\n                                [0, boomerang_width/4]\n                            ]);\n                        }\n                        \n                        // Wing tip rounding\n                        translate([boomerang_length*0.7, 0, boomerang_thickness/2]) {\n                            sphere(r=boomerang_width/3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hollow out center for weight reduction\n        cylinder(h=boomerang_thickness+1, r=boomerang_width/3, $fn=32);\n    }\n}\n\n// Ergonomic grip with finger grooves\nmodule ergonomic_grip() {\n    difference() {\n        // Grip base\n        cylinder(h=boomerang_thickness+4, r=grip_radius, $fn=32);\n        \n        // Finger grooves\n        for (i = [1:grip_holes]) {\n            angle = -60 + i * 30;\n            rotate([0,0,angle]) {\n                translate([grip_radius/2, 0, 0]) {\n                    cylinder(h=boomerang_thickness+5, r=grip_hole_radius, $fn=16);\n                }\n            }\n        }\n        \n        // Center hole for string attachment\n        cylinder(h=boomerang_thickness+5, r=2, $fn=16);\n    }\n}\n\n// Decorative ridges for aerodynamics\nmodule aerodynamic_ridges() {\n    for (i = [0:120:240]) {\n        rotate([0,0,i]) {\n            translate([boomerang_width/2, 0, boomerang_thickness/2]) {\n                for (j = [0.1:0.15:0.7]) {\n                    translate([j*boomerang_length, 0, 0]) {\n                        scale([0.8, 0.1, 0.3]) {\n                            rotate([90,0,0]) {\n                                cylinder(h=boomerang_width/4, r=boomerang_width/8, $fn=3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    boomerang_body();\n    \n    // Grip on top\n    translate([0, 0, boomerang_thickness/2]) {\n        ergonomic_grip();\n    }\n    \n    // Aerodynamic details\n    aerodynamic_ridges();\n}\n\n// Add fillets for 3D printing\ntranslate([0, 0, -0.5]) {\n    cylinder(h=1, r=boomerang_width/2+2, $fn=32);\n}",
    "renders": true
  },
  {
    "toy": "dart",
    "openscad_code": "// Toy dart with realistic proportions and structural elements\n// Overall length: 120mm, printable with 2mm walls\n\nmodule dart_body() {\n    // Main cylindrical shaft\n    difference() {\n        cylinder(h=70, d=8, $fn=32); // 70mm long, 8mm diameter\n        \n        // Hollow core for weight reduction\n        translate([0,0,-1])\n            cylinder(h=72, d=4, $fn=32);\n    }\n}\n\nmodule dart_tip() {\n    // Conical steel tip\n    translate([0,0,70])\n        cylinder(h1=0, h2=20, r1=4, r2=0.5, $fn=32); // 20mm long tip\n}\n\nmodule dart_flights() {\n    // Four stabilizing flights\n    for(i=[0:90:360-1]) {\n        rotate([0,0,i])\n            translate([-12,0,0])\n                difference() {\n                    // Main flight shape\n                    rotate([90,0,0])\n                        cylinder(h=24, r1=12, r2=0, $fn=3);\n                    \n                    // Hollow center\n                    rotate([90,0,0])\n                        translate([0,0,-1])\n                            cylinder(h=26, r1=2, r2=0, $fn=3);\n                }\n    }\n}\n\nmodule dart_shaft_grip() {\n    // Textured grip rings\n    for(i=[0:5:65]) {\n        translate([0,0,i])\n            difference() {\n                cylinder(h=2, d=10, $fn=32); // Ring protrusion\n                cylinder(h=2.2, d=8, $fn=32); // Remove center\n            }\n    }\n}\n\nmodule dart_weight() {\n    // Rear weight balance ring\n    translate([0,0,-10])\n        difference() {\n            cylinder(h=8, d=12, $fn=32); // Weight ring\n            cylinder(h=9, d=8, $fn=32); // Hollow center\n        }\n}\n\n// Assembly\nunion() {\n    dart_body();\n    dart_tip();\n    dart_flights();\n    dart_shaft_grip();\n    dart_weight();\n}",
    "renders": true
  },
  {
    "toy": "shuttlecock",
    "openscad_code": "// Realistic Shuttlecock Toy (Medium Complexity)\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Global parameters\n$fn = 32;  // Smoothness for curved surfaces\nbase_d = 35;  // Base diameter (mm)\ncork_h = 20;  // Cork base height (mm)\nfeather_l = 60;  // Feather length (mm)\nfeather_w = 12;  // Feather width (mm)\nfeather_t = 1.5;  // Feather thickness (mm)\ncone_d = 25;  // Feather cone base diameter (mm)\n\n// Cork base with toy-style segments\nmodule cork_base() {\n    // Main cork cylinder\n    difference() {\n        cylinder(h=cork_h, d1=base_d, d2=base_d-5);\n        \n        // Toy-style grip rings\n        for(i = [1:3]) {\n            translate([0, 0, cork_h/4*i])\n                cylinder(h=2, d=base_d+1);\n        }\n        \n        // Hollow center for weight reduction\n        cylinder(h=cork_h-2, d=base_d-10);\n    }\n    \n    // Toy-friendly rounded bottom\n    translate([0, 0, cork_h])\n        sphere(d=base_d-5);\n}\n\n// Realistic feather simulation with toy-safe edges\nmodule feather() {\n    // Actual feather shape\n    difference() {\n        union() {\n            // Main feather blade\n            translate([0, 0, feather_l/2])\n                cube([feather_t, feather_w, feather_l], center=true);\n            \n            // Feather tip\n            translate([0, 0, feather_l])\n                sphere(d=feather_t);\n            \n            // Base connection\n            translate([0, 0, 0])\n                sphere(d=feather_t*2);\n        }\n        \n        // Hollow interior for printability\n        translate([0, 0, feather_l/2])\n            cube([feather_t+0.5, feather_w-2, feather_l-2], center=true);\n    }\n}\n\n// Feather assembly in cone shape\nmodule feather_cone() {\n    // Center support structure\n    cylinder(h=feather_l, d=cone_d-5);\n    \n    // 16 feathers arranged in cone\n    for(i = [0:15]) {\n        angle = i * 22.5;\n        radius = cone_d/2 + 2;\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, 0])\n                rotate([90, 0, 90])\n                    feather();\n    }\n    \n    // Toy-friendly safety cap\n    translate([0, 0, feather_l])\n        sphere(d=cone_d+5);\n}\n\n// Main shuttlecock assembly\nunion() {\n    // Cork base at bottom\n    translate([0, 0, 0])\n        cork_base();\n    \n    // Feather cone on top\n    translate([0, 0, cork_h])\n        feather_cone();\n    \n    // Reinforcement ring for toy durability\n    translate([0, 0, cork_h/2])\n        torus(base_d/2-2, 2);\n}\n\n// Hidden support structure for 3D printing\ntranslate([0, 0, cork_h-5])\n    cylinder(h=10, d=cone_d-8);",
    "renders": true
  },
  {
    "toy": "jugglingball",
    "openscad_code": "// Realistic medium-complexity 3D-printable juggling ball toy\n// Overall diameter ≈ 65 mm, wall thickness 2 mm\n\n// Main parameters\nball_d = 65;            // outer diameter in mm\nwall_t = 2;             // wall thickness for printing\npattern_h = 1.5;        // groove depth for grip pattern\nsegments = 36;          // $fn for smooth spheres\n\n// Color bands\nband_w = 7;             // width of each colored stripe\nband_gap = 3;           // gap between stripes\nband_depth = 0.8;       // slight recess for paint guidance\n\n// Internal hollow sphere\nmodule hollow_ball(outer_d, thickness) {\n    difference() {\n        sphere(d = outer_d, $fn = segments);                 // outer shell\n        sphere(d = outer_d - 2 * thickness, $fn = segments); // inner void\n    }\n}\n\n// Grip groove running along latitude\nmodule latitude_groove(lat, depth) {\n    r = ball_d / 2;\n    y = r * sin(lat);\n    groov_r = r * cos(lat);\n\n    translate([0, y, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 2.2 * wall_t, r1 = groov_r + wall_t, r2 = groov_r + wall_t, $fn = segments);\n        cylinder(h = 2.2 * wall_t, r1 = groov_r - depth,  r2 = groov_r - depth,  $fn = segments);\n    }\n}\n\n// Grip groove running along longitude\nmodule longitude_groove(lon, depth) {\n    r = ball_d / 2;\n    rotate([0, 0, lon])\n    intersection() {\n        sphere(d = ball_d, $fn = segments);\n        translate([0, 0, -r])\n        cube([2 * r, depth * 2, 2 * r], center = true);\n    }\n}\n\n// Color-guiding stripe band recessed slightly\nmodule color_band(y_pos, width, depth) {\n    r = ball_d / 2;\n    translate([0, y_pos, 0])\n    difference() {\n        sphere(d = ball_d, $fn = segments);\n        translate([0, 0, -r - 1])\n        cube([2 * r, width, 2 * r + 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Hollow shell\n    hollow_ball(ball_d, wall_t);\n\n    // Latitude grip grooves\n    for (a = [30:60:150])\n        latitude_groove(a, pattern_h);\n\n    // Longitude grip grooves\n    for (a = [0:60:300])\n        longitude_groove(a, pattern_h);\n\n    // Decorative recessed bands for painting guides\n    for (y = [-25:band_w + band_gap:25])\n        if (abs(y) + band_w / 2 < ball_d / 2 - wall_t)\n            color_band(y, band_w, band_depth);\n}",
    "renders": true
  },
  {
    "toy": "medicineball",
    "openscad_code": "// Toy Medicine Ball - Realistic Style, Medium Complexity\n// Diameter: 80mm, wall thickness: 2mm\n\n// Parameters\nball_diameter = 80;\nwall_thickness = 2;\ngrip_depth = 3;\ngrip_width = 8;\npanel_thickness = 2;\n\n// Main module\nmodule medicine_ball() {\n    difference() {\n        // Outer ball shell\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness * 2, $fn = 64);\n    }\n    \n    // Add grip seams and panels\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, 0])\n        grip_panel();\n    }\n    \n    // Add toy valve detail\n    valve_detail();\n    \n    // Add surface texture dots\n    texture_dots();\n}\n\n// Grip panel module\nmodule grip_panel() {\n    // Main panel\n    translate([0, ball_diameter/2 - panel_thickness/2, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = panel_thickness, d = 25, $fn = 3);\n        \n        // Grip indentation\n        translate([0, 0, -1])\n        cylinder(h = grip_depth + 1, d = grip_width, $fn = 32);\n    }\n    \n    // Panel border\n    translate([0, ball_diameter/2 - panel_thickness, 0])\n    rotate([90, 0, 0])\n    cylinder(h = panel_thickness/2, d1 = 27, d2 = 25, $fn = 3);\n}\n\n// Valve detail module\nmodule valve_detail() {\n    translate([0, 0, ball_diameter/2 - wall_thickness])\n    difference() {\n        // Valve base\n        cylinder(h = 4, d = 8, $fn = 32);\n        \n        // Valve hole\n        cylinder(h = 5, d = 4, $fn = 32);\n    }\n    \n    // Valve cap\n    translate([0, 0, ball_diameter/2 - wall_thickness + 2])\n    cylinder(h = 2, d = 6, $fn = 32);\n}\n\n// Surface texture dots\nmodule texture_dots() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        for (j = [1:3]) {\n            rotate([0, 30 * j, 0])\n            translate([0, 0, ball_diameter/2 - wall_thickness/2])\n            sphere(d = 1.5, $fn = 16);\n        }\n    }\n}\n\n// Render the toy\nmedicine_ball();",
    "renders": true
  },
  {
    "toy": "exerciseball",
    "openscad_code": "// Exercise Ball Toy (Medium Complexity)\n// Realistic style with proper proportions and toy details\n\n// Parameters\n$fn = 30;\nball_diameter = 60;\nwall_thickness = 2;\nbase_height = 8;\nvalve_length = 5;\nvalve_diameter = 3;\ntexture_depth = 0.5;\nseam_width = 1;\n\n// Main module\nmodule exercise_ball() {\n    // Outer ball shell\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness * 2);\n        \n        // Valve hole\n        translate([0, 0, ball_diameter/2 - valve_length/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = valve_length + 2, d = valve_diameter, center = true);\n            }\n        }\n    }\n    \n    // Valve stem\n    translate([0, 0, ball_diameter/2 - valve_length/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = valve_length, d = valve_diameter, center = true);\n            translate([0, 0, valve_length/2 + 0.5]) {\n                sphere(d = valve_diameter * 1.2);\n            }\n        }\n    }\n    \n    // Surface texture - longitudinal seams\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, 0, -ball_diameter/2]) {\n                linear_extrude(height = ball_diameter) {\n                    difference() {\n                        square([seam_width, ball_diameter * 0.8], center = true);\n                        offset(r = -texture_depth) {\n                            square([seam_width, ball_diameter * 0.8], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Horizontal seam\n    rotate([90, 0, 0]) {\n        translate([0, 0, -ball_diameter/2]) {\n            linear_extrude(height = ball_diameter) {\n                difference() {\n                    square([seam_width, ball_diameter * 0.8], center = true);\n                    offset(r = -texture_depth) {\n                        square([seam_width, ball_diameter * 0.8], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Toy base/stand\n    translate([0, 0, -ball_diameter/2 - base_height/2]) {\n        difference() {\n            cylinder(h = base_height, d1 = ball_diameter * 0.4, d2 = ball_diameter * 0.6);\n            cylinder(h = base_height + 1, d1 = ball_diameter * 0.4 - wall_thickness, d2 = ball_diameter * 0.6 - wall_thickness);\n        }\n        \n        // Base supports\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([ball_diameter * 0.25, 0, -base_height/2]) {\n                    cube([ball_diameter * 0.15, wall_thickness, base_height], center = true);\n                }\n            }\n        }\n    }\n    \n    // Small decorative grip points\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([ball_diameter * 0.48, 0, 0]) {\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Assembly\nexercise_ball();",
    "renders": true
  },
  {
    "toy": "stabilityball",
    "openscad_code": "// Stability Ball Toy - Realistic style, medium complexity\n// 3D printable with 2mm wall thickness, ~80mm diameter\n\n$fn = 50;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main ball body\nmodule ball_body() {\n    // Hollow sphere with 2mm wall thickness\n    difference() {\n        sphere(d = 80 * scale_factor);\n        sphere(d = 76 * scale_factor);\n    }\n}\n\n// Air valve detail\nmodule air_valve() {\n    translate([0, 0, 40 * scale_factor]) {\n        // Valve base\n        cylinder(h = 5 * scale_factor, d1 = 8 * scale_factor, d2 = 6 * scale_factor);\n        \n        // Valve stem\n        translate([0, 0, 5 * scale_factor]) {\n            cylinder(h = 8 * scale_factor, d = 4 * scale_factor);\n        }\n        \n        // Valve cap\n        translate([0, 0, 13 * scale_factor]) {\n            cylinder(h = 3 * scale_factor, d = 5 * scale_factor);\n        }\n    }\n}\n\n// Surface texture - hexagonal pattern for grip\nmodule grip_pattern() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            for (j = [-3:3]) {\n                for (k = [-3:3]) {\n                    if (sqrt(pow(j * 7, 2) + pow(k * 7, 2)) < 35) {\n                        translate([j * 7, k * 7, 0]) {\n                            rotate([90, 0, 0]) {\n                                linear_extrude(height = 2 * scale_factor) {\n                                    circle(d = 3 * scale_factor);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Seams between panels\nmodule panel_seams() {\n    // Vertical seams\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, -40 * scale_factor]) {\n                linear_extrude(height = 80 * scale_factor) {\n                    polygon(points = [\n                        [-0.5, -40],\n                        [0.5, -40],\n                        [0.5, 40],\n                        [-0.5, 40]\n                    ]);\n                }\n            }\n        }\n    }\n    \n    // Horizontal seams\n    for (z = [-20:20:20]) {\n        rotate_extrude(angle = 360) {\n            translate([40 * scale_factor, 0, 0]) {\n                square([0.5, 2 * scale_factor]);\n            }\n        }\n    }\n}\n\n// Reinforcement ring around valve\nmodule valve_reinforcement() {\n    translate([0, 0, 40 * scale_factor]) {\n        difference() {\n            cylinder(h = 3 * scale_factor, d = 20 * scale_factor);\n            cylinder(h = 3.5 * scale_factor, d = 10 * scale_factor);\n        }\n    }\n}\n\n// Anti-slip base ring\nmodule base_ring() {\n    translate([0, 0, -38 * scale_factor]) {\n        difference() {\n            cylinder(h = 4 * scale_factor, d = 60 * scale_factor);\n            cylinder(h = 4.5 * scale_factor, d = 56 * scale_factor);\n        }\n    }\n    \n    // Base ring texture\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([29 * scale_factor, 0, -36 * scale_factor]) {\n                cube([2 * scale_factor, 10 * scale_factor, 2 * scale_factor], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    ball_body();\n    \n    // Add surface details\n    difference() {\n        union() {\n            grip_pattern();\n            panel_seams();\n        }\n        sphere(d = 76 * scale_factor);\n    }\n    \n    // Structural elements\n    air_valve();\n    valve_reinforcement();\n    base_ring();\n}",
    "renders": true
  },
  {
    "toy": "foamroller",
    "openscad_code": "// Foam Roller Toy - Realistic Medium Complexity\n// Overall dimensions: 120mm length, 45mm diameter\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main roller body with hollow core\nmodule roller_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = 120, d = 45, center = true);\n        \n        // Hollow center for weight reduction\n        cylinder(h = 122, d = 25, center = true);\n        \n        // End cap grooves\n        for(i = [-1, 1]) {\n            translate([0, 0, i * 55]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h = 3, d = 42, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Foam texture pattern\nmodule foam_texture() {\n    difference() {\n        roller_body();\n        \n        // Create dimpled texture across surface\n        for(angle = [0:30:360]) {\n            for(z = [-55:10:55]) {\n                rotate([0, 0, angle]) {\n                    translate([22.5, 0, z]) {\n                        sphere(d = 4, $fn = 20);\n                    }\n                }\n            }\n        }\n        \n        // Spiral groove pattern\n        for(t = [0:1:360]) {\n            rotate([0, 0, t]) {\n                translate([22.5, 0, t/3 - 60]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 2, d = 3, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// End caps with grip texture\nmodule end_caps() {\n    // Left cap\n    translate([0, 0, -60]) {\n        difference() {\n            // Main cap body\n            cylinder(h = 8, d = 45);\n            \n            // Central hole for bearing\n            cylinder(h = 10, d = 12);\n            \n            // Grip ridges\n            for(i = [0:30:360]) {\n                rotate([0, 0, i]) {\n                    translate([20, -2, 4]) {\n                        cube([4, 4, 1]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right cap (mirrored)\n    translate([0, 0, 60]) {\n        mirror([0, 0, 1]) {\n            difference() {\n                cylinder(h = 8, d = 45);\n                cylinder(h = 10, d = 12);\n                \n                for(i = [0:30:360]) {\n                    rotate([0, 0, i]) {\n                        translate([20, -2, 4]) {\n                            cube([4, 4, 1]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Internal support structure\nmodule support_structure() {\n    difference() {\n        // Inner support ring\n        cylinder(h = 100, d = 27, center = true);\n        \n        // Lightening holes\n        for(angle = [0:60:360]) {\n            rotate([0, 0, angle]) {\n                translate([10, 0, 0]) {\n                    cylinder(h = 102, d = 8, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main textured roller\n    foam_texture();\n    \n    // Internal supports\n    support_structure();\n    \n    // End caps\n    end_caps();\n    \n    // Decorative band\n    for(i = [-1, 1]) {\n        translate([0, 0, i * 40]) {\n            difference() {\n                cylinder(h = 2, d = 46, center = true);\n                cylinder(h = 3, d = 42, center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "jumpball",
    "openscad_code": "// Jumpball Toy (Medium Complexity)\n// Realistic style, 3D printable, 80mm diameter ball\n\n$fn = 36;\n\n// Main parameters\nball_d = 80;\nball_wall = 2;\nhandle_d = 12;\nhandle_l = 100;\nspring_coils = 10;\nspring_radius = 15;\nspring_wire = 2;\nbaseplate_w = 100;\nbaseplate_h = 8;\nfoot_h = 5;\nfoot_r = 6;\n\n// Colors (for preview)\ncolor_ball = \"red\";\ncolor_handle = \"blue\";\ncolor_spring = \"silver\";\ncolor_base = \"black\";\n\nmodule ball() {\n    // Hollow sphere with handle mount\n    difference() {\n        sphere(d = ball_d);\n        sphere(d = ball_d - 2 * ball_wall);\n    }\n    \n    // Handle mount tube inside ball\n    translate([0, 0, -ball_d/2 + ball_wall])\n        cylinder(h = ball_d/2, d = handle_d + 2*ball_wall, $fn = 24);\n}\n\nmodule handle() {\n    // Main handle rod\n    color(color_handle)\n    cylinder(h = handle_l, d = handle_d, $fn = 24);\n    \n    // Grip rings\n    for(i = [1:4]) {\n        translate([0, 0, i * handle_l/5])\n            cylinder(h = 3, d = handle_d + 4, $fn = 24);\n    }\n}\n\nmodule spring() {\n    // Spring assembly\n    color(color_spring)\n    for(i = [0:spring_coils-1]) {\n        rotate([0, 0, i * 360/spring_coils])\n            translate([spring_radius, 0, i * handle_l/(spring_coils * 2)])\n                rotate([90, 0, 0])\n                    torus(r1 = spring_wire, r2 = spring_wire);\n    }\n}\n\nmodule torus(r1, r2) {\n    rotate_extrude()\n        translate([r1, 0, 0])\n            circle(r = r2);\n}\n\nmodule base() {\n    // Base plate\n    color(color_base)\n    difference() {\n        cube([baseplate_w, baseplate_w, baseplate_h], center = true);\n        // Lightening holes\n        for(x = [-30, 30])\n            for(y = [-30, 30])\n                translate([x, y, -baseplate_h/2])\n                    cylinder(h = baseplate_h + 1, d = 15, $fn = 20);\n    }\n    \n    // Feet\n    for(x = [-baseplate_w/2 + 20, baseplate_w/2 - 20])\n        for(y = [-baseplate_w/2 + 20, baseplate_w/2 - 20])\n            translate([x, y, -baseplate_h/2 - foot_h/2])\n                cylinder(h = foot_h, r = foot_r, $fn = 20);\n    \n    // Handle socket\n    translate([0, 0, baseplate_h/2])\n        cylinder(h = 15, d = handle_d + 4, $fn = 24);\n}\n\n// Assemble the toy\ntranslate([0, 0, baseplate_h/2 + foot_h])\n    base();\n\ntranslate([0, 0, baseplate_h/2 + foot_h + 15 + handle_l/2])\n    handle();\n\ntranslate([0, 0, baseplate_h/2 + foot_h + 15 + handle_l])\n    spring();\n\ncolor(color_ball)\ntranslate([0, 0, baseplate_h/2 + foot_h + 15 + handle_l + handle_l/2 + spring_coils * handle_l/(spring_coils * 2)])\n    ball();",
    "renders": true
  },
  {
    "toy": "spikeball",
    "openscad_code": "// Realistic Spikeball Toy - Medium Complexity\n// 3D printable, ~90mm diameter\n\n// Parameters\nball_d = 80;\nspike_length = 20;\nspike_base_d = 10;\nspike_tip_d = 2;\nwall_thickness = 2;\npattern_rows = 6;\nspikes_per_row = 6;\n\nmodule spike() {\n    // Main spike body with gradual taper\n    union() {\n        // Base cylinder for structural strength\n        cylinder(h=spike_length*0.3, d1=spike_base_d, d2=spike_base_d*0.8, $fn=16);\n        \n        // Tapered middle section\n        translate([0,0,spike_length*0.3])\n            cylinder(h=spike_length*0.5, d1=spike_base_d*0.8, d2=spike_tip_d*2, $fn=16);\n        \n        // Sharp tip\n        translate([0,0,spike_length*0.8])\n            cylinder(h=spike_length*0.2, d1=spike_tip_d*2, d2=spike_tip_d, $fn=8);\n    }\n}\n\nmodule hollow_sphere() {\n    // Create hollow sphere using difference\n    difference() {\n        sphere(d=ball_d, $fn=100);\n        sphere(d=ball_d - wall_thickness*2, $fn=100);\n    }\n}\n\nmodule spike_pattern() {\n    // Generate geodesic pattern of spikes\n    for (row = [0:pattern_rows-1]) {\n        row_angle = 180/pattern_rows * row;\n        for (i = [0:spikes_per_row-1]) {\n            angle = 360/spikes_per_row * i;\n            \n            // Skip poles to avoid clustering\n            if (row_angle > 15 && row_angle < 165) {\n                rotate([0, row_angle, angle])\n                    translate([0, 0, ball_d/2])\n                        spike();\n            }\n            \n            // Add poles separately\n            if (row == 1) {\n                rotate([0, 0, angle])\n                    translate([0, 0, ball_d/2])\n                        spike();\n            }\n            if (row == pattern_rows-2) {\n                rotate([180, 0, angle])\n                    translate([0, 0, ball_d/2])\n                        spike();\n            }\n        }\n    }\n}\n\nmodule surface_texture() {\n    // Add small bumps for grip\n    for (i = [0:20]) {\n        theta = 360 * i / 20;\n        phi = 180 * (i % 3) / 3;\n        rotate([0, phi, theta])\n            translate([0, 0, ball_d/2 - wall_thickness])\n                sphere(d=3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollow ball body\n    hollow_sphere();\n    \n    // Apply surface texture\n    surface_texture();\n    \n    // Spike array\n    spike_pattern();\n}\n\n// Add alignment mark for toy packaging\nrotate([90, 0, 0])\n    translate([0, -ball_d/2 + 1, 0])\n        cube([5, 2, 1], center=true);",
    "renders": true
  },
  {
    "toy": "whiffleball",
    "openscad_code": "// Whiffle Ball (realistic toy style, medium complexity)\n// Diameter: 75 mm, wall thickness: 2 mm, hole diameter: 12 mm\n\nmodule whiffle_ball() {\n    // Basic sphere shell with 2 mm walls\n    difference() {\n        sphere(d = 75, $fn = 100);                   // outer sphere\n        \n        // Hollow interior\n        sphere(d = 75 - 4, $fn = 100);               // inner sphere (75 - 2*2mm wall)\n    }\n\n    // Eight large holes on cardinal directions (octahedral pattern)\n    for (a = [0, 90, 180, 270])\n    rotate([0, 0, a])\n    translate([0, 75/2, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 5, d = 12, $fn = 30);              // hole through wall\n    \n    for (a = [0, 90, 180, 270])\n    rotate([0, a, 0])\n    translate([0, 0, 75/2])\n    cylinder(h = 5, d = 12, $fn = 30);              // holes around equator\n    \n    rotate([90, 0, 0])\n    translate([0, 0, 75/2])\n    cylinder(h = 5, d = 12, $fn = 30);              // top hole\n    \n    rotate([90, 0, 0])\n    translate([0, 0, -75/2])\n    cylinder(h = 5, d = 12, $fn = 30);              // bottom hole\n\n    // Additional 6 medium holes at 45° angles for classic whiffle pattern\n    for (theta = [45, 135])\n    for (phi = [0:60:359])\n    rotate([0, theta, phi])\n    translate([0, 0, 75/2])\n    cylinder(h = 5, d = 8, $fn = 20);               // 8 mm holes\n    \n    // Internal reinforcing ribs for toy durability\n    difference() {\n        union() {\n            // Two perpendicular ribs inside\n            rotate([0, 90, 0])\n            cube([2, 2, 75 - 8], center = true);    // vertical rib\n            \n            rotate([90, 0, 0]) \n            cube([2, 2, 75 - 8], center = true);    // horizontal rib\n            \n            rotate([0, 0, 90])\n            cube([2, 2, 75 - 8], center = true);    // depth rib\n        }\n        \n        // Remove rib material near holes\n        for (a = [0:45:359])\n        rotate([0, 0, a])\n        translate([0, 75/2 - 6, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 10, d = 15, $fn = 30);         // clearance around holes\n    }\n\n    // External seam detail for toy molding line\n    difference() {\n        sphere(d = 75.2, $fn = 100);                // slightly larger seam band\n        \n        sphere(d = 75, $fn = 100);                  // cut back to surface\n    }\n    \n    // Six small grip nubs for toy texture\n    for (i = [0:5]) {\n        angle = i * 60;\n        rotate([0, 30, angle])\n        translate([0, 0, 75/2])\n        cylinder(h = 1, d1 = 4, d2 = 2, $fn = 12);  // tapered grip nub\n    }\n}\n\n// Render the ball centered at origin\nwhiffle_ball();",
    "renders": true
  },
  {
    "toy": "teeball",
    "openscad_code": "// Realistic Teeball Toy - Medium Complexity\n// Overall height: 120mm, base: 80mm diameter\n\nmodule teeball_base() {\n    // Main base cylinder\n    difference() {\n        cylinder(h=15, d=80, $fn=64);\n        // Hollow center for weight reduction\n        cylinder(h=16, d=76, $fn=64);\n    }\n    \n    // Base rim for stability\n    difference() {\n        cylinder(h=5, d=85, $fn=64);\n        translate([0,0,-0.1])\n            cylinder(h=5.2, d=83, $fn=64);\n    }\n    \n    // Screw holes for assembly\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([30,0,-1])\n                cylinder(h=17, d=4, $fn=16);\n    }\n}\n\nmodule tee_post() {\n    // Main post tube\n    difference() {\n        cylinder(h=85, d=20, $fn=32);\n        cylinder(h=86, d=16, $fn=32);\n    }\n    \n    // Height adjustment holes\n    for(i=[0:4]) {\n        translate([0,0,15+i*15])\n            rotate([90,0,0])\n                cylinder(h=20, d=4, center=true, $fn=16);\n    }\n    \n    // Base flange\n    translate([0,0,-2])\n        difference() {\n            cylinder(h=5, d=30, $fn=32);\n            cylinder(h=5.2, d=22, $fn=32);\n        }\n}\n\nmodule tee_ball_holder() {\n    // Ball cup\n    difference() {\n        sphere(d=35, $fn=32);\n        translate([0,0,-5])\n            sphere(d=32, $fn=32);\n    }\n    \n    // Support ribs for strength\n    for(i=[0:3]) {\n        rotate([0,0,i*120])\n            translate([0,12,-5])\n                cube([2,10,10], center=true);\n    }\n    \n    // Mounting peg\n    translate([0,0,-15])\n        cylinder(h=15, d=16, $fn=32);\n}\n\nmodule bat() {\n    // Bat handle\n    translate([0,0,-60])\n        cylinder(h=60, d1=8, d2=12, $fn=16);\n    \n    // Bat barrel\n    translate([0,0,0])\n        cylinder(h=40, d=20, $fn=32);\n    \n    // Grip rings\n    for(i=[0:3]) {\n        translate([0,0,-50+i*10])\n            difference() {\n                cylinder(h=3, d=14, $fn=16);\n                cylinder(h=3.2, d=12, $fn=16);\n            }\n    }\n}\n\n// Assembly\ntranslate([0,0,15])\n    teeball_base();\n\ntranslate([0,0,15])\n    tee_post();\n\ntranslate([0,0,100])\n    tee_ball_holder();\n\n// Optional bat placement\ntranslate([50,50,15])\n    rotate([0,90,0])\n        bat();",
    "renders": true
  },
  {
    "toy": "trainingball",
    "openscad_code": "// Training Ball Toy - Realistic Style (Medium Complexity)\n// A classic rubber training ball with grip rings and valve detail\n\nball_diameter = 80;          // Main ball size in mm\nwall_thickness = 2;          // Wall thickness for 3D printing\ngrip_ring_width = 6;         // Width of each grip ring\ngrip_ring_depth = 1.5;       // Depth of grip rings\nnum_grip_rings = 6;          // Number of grip rings around ball\nvalve_size = 8;              // Air valve diameter\nvalve_height = 4;            // Air valve protrusion\n\n// Main hollow ball with proper wall thickness\nmodule hollow_ball(outer_d, wall) {\n    difference() {\n        sphere(d = outer_d);\n        sphere(d = outer_d - 2*wall);\n    }\n}\n\n// Individual grip ring\nmodule grip_ring(radius, width, depth) {\n    difference() {\n        // Outer ring\n        cylinder(h = width, r1 = radius, r2 = radius, center = true);\n        \n        // Inner cutout to create ring shape\n        cylinder(h = width + 0.1, r1 = radius - depth, r2 = radius - depth, center = true);\n    }\n}\n\n// Ball valve detail\nmodule valve(d, h) {\n    union() {\n        // Valve base\n        cylinder(h = h, d = d, $fn = 20);\n        \n        // Valve top cap\n        translate([0, 0, h])\n        cylinder(h = 1, d = d - 1, $fn = 20);\n        \n        // Valve stem detail\n        translate([0, 0, h + 1])\n        cylinder(h = 1.5, d = d/3, $fn = 16);\n    }\n}\n\n// Assemble the training ball\nunion() {\n    // Main ball structure\n    hollow_ball(ball_diameter, wall_thickness);\n    \n    // Grip rings - arranged in three orthogonal planes\n    // X-axis rings\n    for(i = [0:num_grip_rings-1]) {\n        rotate([0, 90, 0])\n        rotate([0, 0, i * 360/num_grip_rings])\n        translate([0, 0, 0])\n        grip_ring(ball_diameter/2, grip_ring_width, grip_ring_depth);\n    }\n    \n    // Y-axis rings (offset from x-axis rings)\n    for(i = [0:num_grip_rings-1]) {\n        rotate([90, 0, 0])\n        rotate([0, 0, i * 360/num_grip_rings + 360/(2*num_grip_rings)])\n        translate([0, 0, 0])\n        grip_ring(ball_diameter/2, grip_ring_width, grip_ring_depth);\n    }\n    \n    // Z-axis rings (offset from both x and y)\n    for(i = [0:num_grip_rings-1]) {\n        rotate([0, 0, i * 360/num_grip_rings])\n        translate([0, 0, 0])\n        grip_ring(ball_diameter/2, grip_ring_width, grip_ring_depth);\n    }\n    \n    // Valve positioned on top of ball\n    translate([0, 0, ball_diameter/2])\n    valve(valve_size, valve_height);\n}\n\n// Add subtle texture pattern for realistic grip\ndifference() {\n    sphere(d = ball_diameter);\n    \n    // Micro texture dots for grip\n    for(i = [0:30]) {\n        for(j = [0:15]) {\n            rotate([i * 12, j * 24, 0])\n            translate([ball_diameter/2 - 0.5, 0, 0])\n            sphere(d = 1.2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "reactionball",
    "openscad_code": "// Reactionball Toy – OpenSCAD\n// Medium-complexity, realistic style, 3D-printable\n\n$fa = 2; $fs = 0.5;  // smooth curves\n\n// ===== Parameters =====\nball_d = 70;           // main reaction-ball Ø\nwall_t = 2;            // wall thickness\ngrip_d = 8;            // small grip spheres Ø\ngrip_rows = 6;         // grip spheres per row\ngrip_cols = 3;         // rows along axis\ngrip_clear = 1;        // clearance for 3D print\n\n// ===== Module : main hollow ball =====\nmodule hollow_sphere(od, t){\n    difference(){\n        sphere(d = od);\n        sphere(d = od - 2*t);\n    }\n}\n\n// ===== Module : grip bumps =====\nmodule grip_pattern(){\n    step_a = 360 / grip_rows;\n    step_h = (ball_d*0.9) / (grip_cols + 1);\n    for(i = [0 : grip_rows-1]){\n        for(j = [1 : grip_cols]){\n            rotate([0, 0, i*step_a])\n                translate([0, \n                           ball_d/2 - wall_t - grip_d/2 - grip_clear,\n                           -ball_d/2 + j*step_h])\n                    sphere(d = grip_d);\n        }\n    }\n}\n\n// ===== Module : seam ring for realism =====\nmodule seam_ring(){\n    rotate_extrude()\n        translate([(ball_d - wall_t)/2, 0, 0])\n            square([wall_t, wall_t*2]);\n}\n\n// ===== Assembly =====\ndifference(){\n    union(){\n        // outer shell\n        hollow_sphere(ball_d, wall_t);\n        \n        // internal grip bumps\n        grip_pattern();\n        \n        // equatorial seam\n        seam_ring();\n    }\n    \n    // drainage / key-ring hole\n    rotate([0, 90, 0])\n        cylinder(h = ball_d, d = 4, $fn = 16);\n}",
    "renders": true
  },
  {
    "toy": "agilityball",
    "openscad_code": "// Agility Ball Toy - Realistic Style with Medium Complexity\n// 3D printable toy ball with grip holes and internal structure\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nball_diameter = 80;\nwall_thickness = 2.5;\ngrip_hole_diameter = 12;\ninternal_support = 1.5;\n\n// Main ball shell\nmodule ball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Hollow center\n        sphere(d = ball_diameter - 2 * wall_thickness);\n        \n        // Grip holes on surface\n        for (i = [0:4]) {\n            rotate([0, 90 * (i % 2), 72 * i])\n                translate([0, 0, ball_diameter/2 + 1])\n                    cylinder(h = wall_thickness + 2, d = grip_hole_diameter, $fn = 32);\n        }\n        \n        // Additional grip holes at 45 degrees\n        for (j = [0:3]) {\n            rotate([45, 0, 90 * j])\n                translate([0, 0, ball_diameter/2 + 1])\n                    cylinder(h = wall_thickness + 2, d = grip_hole_diameter * 0.8, $fn = 32);\n        }\n    }\n}\n\n// Internal support structure\nmodule internal_supports() {\n    // Central hub\n    sphere(d = ball_diameter * 0.3);\n    \n    // Radial supports\n    for (i = [0:5]) {\n        rotate([0, 0, 60 * i])\n            translate([ball_diameter * 0.15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = ball_diameter * 0.15, d = wall_thickness * 0.8, $fn = 16);\n    }\n    \n    // Ring supports\n    for (z = [-1, 0, 1]) {\n        translate([0, 0, z * ball_diameter * 0.25])\n            rotate_extrude(angle = 360, $fn = 64)\n                translate([ball_diameter * 0.35, 0, 0])\n                    circle(d = wall_thickness * 0.8);\n    }\n}\n\n// Surface texture rings for grip\nmodule grip_rings() {\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Create grooved texture\n        for (i = [1:3]) {\n            sphere(d = ball_diameter + 0.1 - i * 1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    ball_shell();\n    \n    // Internal supports (comment out for hollow print)\n    // internal_supports();\n    \n    // Surface grip rings\n    grip_rings();\n}\n\n// Small alignment marks for 3D printing orientation\nmodule alignment_marks() {\n    for (i = [0:3]) {\n        rotate([0, 90, i * 90])\n            translate([0, 0, ball_diameter/2 - 1])\n                cube([2, 0.5, 1], center = true);\n    }\n}\n\n// Add alignment marks\nalignment_marks();",
    "renders": true
  },
  {
    "toy": "reflexball",
    "openscad_code": "// Reflex Ball Toy - Medium Complexity Realistic Style\n// A classic reflex training ball with weighted base and elastic cord\n\n// Parameters (in mm)\nbase_diameter = 80;\nbase_height = 25;\nball_diameter = 50;\ncord_length = 120;\ncord_diameter = 3;\nstem_height = 30;\nstem_diameter = 12;\n\n// Main module\nmodule reflex_ball_toy() {\n    // Weighted base\n    union() {\n        // Base cylinder\n        difference() {\n            cylinder(h=base_height, d=base_diameter, $fn=64);\n            \n            // Bottom recess for weight cavity\n            translate([0, 0, base_height-10])\n                cylinder(h=8, d=base_diameter-10, $fn=64);\n            \n            // Center hole for stem\n            translate([0, 0, -1])\n                cylinder(h=base_height+2, d=stem_diameter+4, $fn=32);\n        }\n        \n        // Base rim detail\n        translate([0, 0, base_height-2])\n            cylinder(h=4, d1=base_diameter-4, d2=base_diameter, $fn=64);\n    }\n    \n    // Stem with cord attachment\n    union() {\n        // Main stem\n        translate([0, 0, base_height])\n            cylinder(h=stem_height, d=stem_diameter, $fn=32);\n        \n        // Cord guide cylinder\n        translate([0, 0, base_height+stem_height])\n            cylinder(h=8, d=stem_diameter+6, $fn=32);\n        \n        // Cord hole\n        translate([0, 0, base_height+stem_height+4])\n            rotate([90, 0, 0])\n                cylinder(h=stem_diameter+6, d=cord_diameter+1, $fn=16);\n    }\n    \n    // Elastic cord segments\n    for(i = [0:1]) {\n        translate([0, 0, base_height+stem_height+4 + i*60])\n            rotate([90, 0, 0])\n                cylinder(h=cord_diameter, d=cord_diameter, $fn=8);\n    }\n    \n    // Ball with attachment point\n    translate([0, cord_length, base_height+stem_height+4 + cord_length/2])\n        union() {\n            // Main ball\n            sphere(d=ball_diameter, $fn=32);\n            \n            // Attachment nub\n            translate([0, -ball_diameter/2, 0])\n                rotate([0, 0, 90])\n                    cylinder(h=8, d1=cord_diameter+2, d2=cord_diameter, $fn=16);\n        }\n    \n    // Anti-slip base pads\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([(base_diameter-10)/2, 0, 0])\n                cylinder(h=2, d=8, $fn=16);\n    }\n    \n    // Decorative ring around stem base\n    translate([0, 0, base_height])\n        cylinder(h=3, d=stem_diameter+10, $fn=32);\n    \n    // Grip texture on base\n    difference() {\n        translate([0, 0, base_height/2])\n            cylinder(h=base_height-4, d=base_diameter-2, $fn=64);\n        \n        // Texture grooves\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([base_diameter/2-15, 0, 0])\n                    cube([30, 2, base_height-2], center=true);\n        }\n    }\n}\n\n// Create the toy\nreflex_ball_toy();",
    "renders": true
  },
  {
    "toy": "rhythmball",
    "openscad_code": "// Rhythmball - 3D printable toy with internal beads and grip rings\n// Overall diameter 90 mm, 2 mm wall thickness\n\n$fn = 90;\n\nmodule ball_shell() {\n    difference() {\n        sphere(d = 90);  // outer shell\n        \n        // hollow interior\n        sphere(d = 90 - 4);  // 2 mm wall\n        \n        // sound holes (4 mm diameter)\n        for (a = [0:60:359]) {\n            rotate([a, 0, 0])\n                translate([0, 0, 45])\n                    cylinder(h = 5, d = 4, center = true);\n        }\n    }\n}\n\nmodule grip_ring(height) {\n    difference() {\n        cylinder(h = 6, d = 100);  // outer ring\n        \n        // cut center\n        cylinder(h = 7, d = 90);\n        \n        // finger grooves (6 grooves)\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([50, 0, 0])\n                    cube([12, 8, 7], center = true);\n        }\n    }\n}\n\nmodule bead(radius) {\n    sphere(r = radius);\n}\n\nmodule internal_beads() {\n    // 6 small beads inside for sound\n    for (i = [1:6]) {\n        rotate([i*60, 0, 0])\n            translate([0, 25, 0])\n                bead(r = 3.5);\n    }\n}\n\nmodule assembly() {\n    union() {\n        // main ball\n        ball_shell();\n        \n        // grip rings at poles\n        translate([0, 0, 45])\n            grip_ring(6);\n        \n        translate([0, 0, -45])\n            rotate([0, 180, 0])\n                grip_ring(6);\n        \n        // internal beads\n        color(\"gold\")\n            internal_beads();\n    }\n}\n\n// render the rhythmball\nassembly();",
    "renders": true
  },
  {
    "toy": "gymball",
    "openscad_code": "// Gymball Toy - Realistic Style, Medium Complexity\n// Diameter: 65mm (scale-appropriate toy size)\n\n// Parameters\n$fn=48;\nball_d = 65;\nwall_t = 2;\npump_d = 12;\npump_h = 15;\nseam_w = 3;\nseam_d = 1;\nvalve_d = 4;\nvalve_h = 3;\ngrip_r = 2;\ngrip_h = 1;\n\n// Main ball body with realistic wall thickness\ndifference() {\n    sphere(d=ball_d);                      // Outer sphere\n    \n    // Hollow interior\n    translate([0,0,-wall_t/2])\n        sphere(d=ball_d-wall_t*2);\n}\n\n// Equator seam line (mold line)\ndifference() {\n    rotate([90,0,0])\n        cylinder(h=seam_w, d=ball_d+0.2, center=true);\n    rotate([90,0,0])\n        cylinder(h=seam_w+0.2, d=ball_d-seam_d*2, center=true);\n}\n\n// Vertical seam lines (2 perpendicular)\nfor(angle=[0,90]) {\n    rotate([0,0,angle])\n    difference() {\n        rotate([90,0,0])\n            cylinder(h=seam_w, d=ball_d+0.2, center=true);\n        rotate([90,0,0])\n            cylinder(h=seam_w+0.2, d=ball_d-seam_d*2, center=true);\n    }\n}\n\n// Inflation valve assembly\ntranslate([0,0,ball_d/2-wall_t/2]) {\n    // Valve base\n    cylinder(h=pump_h, d=pump_d, center=true);\n    \n    // Valve stem hole\n    translate([0,0,pump_h/2])\n        cylinder(h=valve_h+2, d=valve_d);\n    \n    // Valve cap\n    translate([0,0,pump_h/2+valve_h/2+1])\n        cylinder(h=valve_h, d=valve_d+2);\n    \n    // Grip ridges on valve\n    for(z=[-grip_h,0,grip_h]) {\n        translate([0,0,z])\n            cylinder(h=0.5, d=pump_d+1);\n    }\n}\n\n// Realistic surface texture - small bumps\nmodule grip_bump(x,y,z) {\n    translate([x,y,z])\n        sphere(r=grip_r);\n}\n\n// Generate grip bumps in pattern\nfor(phi=[15:30:165]) {\n    for(theta=[0:45:315]) {\n        x = (ball_d/2)*cos(theta)*sin(phi);\n        y = (ball_d/2)*sin(theta)*sin(phi);\n        z = (ball_d/2)*cos(phi);\n        grip_bump(x,y,z);\n    }\n}\n\n// Bottom reinforcement ring\ntranslate([0,0,-ball_d/2+wall_t])\n    cylinder(h=wall_t*2, d=ball_d/4, center=true);",
    "renders": true
  },
  {
    "toy": "pilatesball",
    "openscad_code": "// Pilates Ball Toy - Realistic Style, Medium Complexity\n// Diameter: 60mm, wall thickness: 2mm, includes valve and seam details\n\n// Ball parameters\nball_d = 60;           // Overall diameter\nwall_t = 2;            // Wall thickness for 3D printing\nsegments = 64;         // Smooth sphere surface\n\n// Valve details\nvalve_d = 6;\nvalve_h = 8;\nvalve_pos = ball_d/2 * 0.8;  // Position valve 80% up from center\n\n// Seam parameters\nseam_w = 1.5;\nseam_d = 0.5;\n\n// Panel lines (decorative grooves)\ngroove_w = 0.8;\ngroove_d = 0.3;\n\n// Main ball module\nmodule pilates_ball() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_d, $fn = segments);\n        \n        // Hollow interior\n        sphere(d = ball_d - 2*wall_t, $fn = segments);\n    }\n}\n\n// Valve module for inflation point\nmodule valve() {\n    translate([0, 0, valve_pos]) {\n        rotate([90, 0, 0]) {\n            // Valve base\n            difference() {\n                cylinder(h = valve_h, d1 = valve_d, d2 = valve_d * 0.8, $fn = 32);\n                \n                // Hollow valve\n                cylinder(h = valve_h + 1, d1 = valve_d - wall_t, d2 = (valve_d - wall_t) * 0.8, $fn = 32);\n            }\n            \n            // Valve cap\n            translate([0, 0, valve_h]) {\n                cylinder(h = 3, d = valve_d + 1, $fn = 32);\n            }\n        }\n    }\n}\n\n// Horizontal seam around the ball\nmodule horizontal_seam() {\n    for (z = [-ball_d/3, ball_d/3]) {\n        translate([0, 0, z]) {\n            difference() {\n                cylinder(h = seam_d * 2, d = ball_d, $fn = segments);\n                \n                // Create groove\n                translate([0, 0, seam_d]) {\n                    cylinder(h = seam_d * 2, d = ball_d - seam_w, $fn = segments);\n                }\n                \n                // Limit to sphere surface\n                sphere(d = ball_d + 1, $fn = segments);\n            }\n        }\n    }\n}\n\n// Vertical seam lines\nmodule vertical_seams() {\n    for (angle = [0:60:359]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, -ball_d/2]) {\n                difference() {\n                    cylinder(h = ball_d, d = ball_d, $fn = segments);\n                    \n                    // Create groove\n                    translate([0, 0, -1]) {\n                        cylinder(h = ball_d + 2, d = ball_d - seam_w, $fn = segments);\n                    }\n                    \n                    // Limit to sphere surface\n                    sphere(d = ball_d + 1, $fn = segments);\n                }\n            }\n        }\n    }\n}\n\n// Decorative panel grooves\nmodule panel_grooves() {\n    // Latitude grooves\n    for (lat = [-30, 0, 30]) {\n        rotate([0, 0, 0]) {\n            rotate([lat, 0, 0]) {\n                translate([0, 0, 0]) {\n                    difference() {\n                        sphere(d = ball_d + 0.5, $fn = segments);\n                        \n                        // Create groove\n                        rotate([lat + 2, 0, 0]) {\n                            sphere(d = ball_d - groove_w, $fn = segments);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Longitude grooves\n    for (lon = [0:45:359]) {\n        rotate([0, 0, lon]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    sphere(d = ball_d + 0.5, $fn = segments);\n                    \n                    // Create groove\n                    rotate([0, 92, 0]) {\n                        sphere(d = ball_d - groove_w, $fn = segments);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball\n    pilates_ball();\n    \n    // Valve\n    valve();\n    \n    // Seams and details\n    // Only add surface details to outer shell\n    translate([0, 0, 0]) {\n        // Horizontal seams\n        difference() {\n            sphere(d = ball_d + 2, $fn = segments);\n            sphere(d = ball_d - 1, $fn = segments);\n        }\n        \n        // Cut seam grooves\n        horizontal_seam();\n        vertical_seams();\n        panel_grooves();\n    }\n}",
    "renders": true
  },
  {
    "toy": "kickboard",
    "openscad_code": "// Toy Kickboard - Realistic Style, Medium Complexity\n\n// Overall dimensions (mm)\nkickboard_length = 120;\nkickboard_width = 60;\nkickboard_height = 25;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Main deck with slight curvature\nmodule deck() {\n    // Base deck\n    difference() {\n        // Main curved deck body\n        hull() {\n            translate([kickboard_length/2-5, 0, kickboard_height/2])\n                scale([1, 0.8, 0.3])\n                    sphere(d=kickboard_width);\n            translate([5, 0, kickboard_height/2])\n                scale([1, 0.8, 0.3])\n                    sphere(d=kickboard_width);\n        }\n        \n        // Hollow out center\n        translate([0, 0, -1])\n            cube([kickboard_length-10, kickboard_width-10, kickboard_height], center=true);\n    }\n}\n\n// Front steering column\nmodule steering_column() {\n    translate([kickboard_length-15, 0, kickboard_height]) {\n        // Column tube\n        difference() {\n            cylinder(h=25, d=8, center=false);\n            translate([0, 0, wall_thickness])\n                cylinder(h=25, d=8-wall_thickness*2, center=false);\n        }\n        \n        // Handlebar\n        translate([0, 0, 25]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cube([20, 6, 6], center=true);\n                    cube([20-wall_thickness*2, 6-wall_thickness*2, 6-wall_thickness*2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Rear wheel assembly\nmodule rear_wheels() {\n    for (y = [-kickboard_width/3, kickboard_width/3]) {\n        translate([5, y, 0]) {\n            // Wheel mount\n            difference() {\n                cube([8, 8, 12], center=true);\n                cube([8-wall_thickness*2, 8-wall_thickness*2, 12], center=true);\n            }\n            \n            // Wheel\n            translate([0, 0, -6])\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cylinder(h=8, d=12, center=true);\n                        cylinder(h=8, d=12-wall_thickness*2, center=true);\n                    }\n                    // Tread pattern\n                    for (i = [0:11]) {\n                        rotate([0, 0, i*30]) {\n                            translate([0, 6, 0])\n                                cube([1, 2, 8.1], center=true);\n                        }\n                    }\n                }\n        }\n    }\n}\n\n// Front wheel assembly\nmodule front_wheel() {\n    translate([kickboard_length-15, 0, 0]) {\n        // Fork\n        difference() {\n            cube([10, 16, 12], center=true);\n            cube([10-wall_thickness*2, 16-wall_thickness*2, 12], center=true);\n        }\n        \n        // Wheel\n        translate([0, 0, -6])\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=10, d=15, center=true);\n                    cylinder(h=10, d=15-wall_thickness*2, center=true);\n                }\n                // Tread pattern\n                for (i = [0:11]) {\n                    rotate([0, 0, i*30]) {\n                        translate([0, 7.5, 0])\n                            cube([1, 2, 10.1], center=true);\n                    }\n                }\n            }\n    }\n}\n\n// Grip tape pattern on deck\nmodule grip_pattern() {\n    translate([0, 0, kickboard_height-0.5]) {\n        for (x = [-kickboard_length/2+10 : 5 : kickboard_length/2-20]) {\n            for (y = [-kickboard_width/2+5 : 5 : kickboard_width/2-5]) {\n                translate([x, y, 0])\n                    cube([4, 1, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    deck();\n    steering_column();\n    rear_wheels();\n    front_wheel();\n    grip_pattern();\n    \n    // Additional details\n    // Side reflectors\n    translate([kickboard_length/2, kickboard_width/2+1, kickboard_height/2])\n        cube([4, 0.5, 8], center=true);\n    translate([kickboard_length/2, -kickboard_width/2-1, kickboard_height/2])\n        cube([4, 0.5, 8], center=true);\n    \n    // Logo area\n    translate([kickboard_length/2, 0, kickboard_height+1])\n        cube([20, 10, 1], center=true);\n}",
    "renders": true
  },
  {
    "toy": "paddleboard",
    "openscad_code": "// Toy Paddleboard - Realistic Style, Medium Complexity\n// Total length ~120mm, width ~35mm, thickness ~12mm\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 36;\n\nmodule paddleboard_body() {\n    // Main deck with slight rocker (curved bottom)\n    hull() {\n        // Top deck surface\n        translate([0, 0, 10])\n            scale([1, 0.9, 1])\n            cube([120, 35, 2], center = true);\n        \n        // Bottom curved surface\n        translate([0, 0, 0])\n            scale([1, 0.8, 0.3])\n            cube([120, 35, 8], center = true);\n    }\n}\n\nmodule fin_box() {\n    // Fin box for removable toy fin\n    translate([-55, 0, 5])\n        difference() {\n            // Main box structure\n            cube([8, 12, 8], center = true);\n            \n            // Slot for fin insertion\n            translate([0, 0, 3])\n                cube([4, 10, 6], center = true);\n        }\n}\n\nmodule toy_fin() {\n    // Removable toy fin\n    color(\"darkblue\")\n    translate([-55, 0, 1])\n        union() {\n            // Base that fits in box\n            translate([0, 0, 2])\n                cube([4, 8, 4], center = true);\n            \n            // Fin blade\n            translate([0, 0, 6])\n                cube([1.5, 8, 8], center = true);\n        }\n}\n\nmodule deck_pad() {\n    // EVA foam-like deck pad pattern\n    for (x = [-40:10:40]) {\n        for (y = [-12:6:12]) {\n            translate([x, y, 11])\n                scale([1, 0.8, 1])\n                cylinder(h = 1, r = 3, center = true);\n        }\n    }\n}\n\nmodule carry_handle() {\n    // Center carry handle\n    translate([0, 0, 11])\n        difference() {\n            // Handle base\n            cube([25, 15, 3], center = true);\n            \n            // Handle opening\n            translate([0, 0, -1])\n                cube([20, 10, 5], center = true);\n        }\n}\n\nmodule leash_plug() {\n    // Leash attachment point at tail\n    translate([55, 0, 11])\n        union() {\n            // Base\n            cylinder(h = 3, r = 4, center = true);\n            \n            // Plug post\n            translate([0, 0, 2])\n                cylinder(h = 4, r = 2);\n            \n            // Hole for leash string\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = 1, center = true);\n        }\n}\n\nmodule rail_tape() {\n    // Decorative rail tape\n    difference() {\n        // Outer rail\n        hull() {\n            translate([0, 0, 5])\n                scale([1, 1, 0.2])\n                cube([122, 37, 10], center = true);\n            \n            translate([0, 0, 6])\n                scale([1, 1, 0.2])\n                cube([122, 37, 10], center = true);\n        }\n        \n        // Remove inner part to leave thin rail\n        hull() {\n            translate([0, 0, 5])\n                scale([0.95, 0.9, 0.2])\n                cube([122, 37, 10], center = true);\n            \n            translate([0, 0, 6])\n                scale([0.95, 0.9, 0.2])\n                cube([122, 37, 10], center = true);\n        }\n    }\n}\n\nmodule nose_rocker() {\n    // Rounded nose tip\n    hull() {\n        translate([60, 0, 10])\n            sphere(r = 6);\n        translate([60, 0, 8])\n            sphere(r = 6);\n    }\n}\n\nmodule tail_rocker() {\n    // Slightly uplifted tail\n    hull() {\n        translate([-60, 0, 8])\n            sphere(r = 5);\n        translate([-60, 0, 6])\n            sphere(r = 5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    paddleboard_body();\n    \n    // Structural elements\n    fin_box();\n    carry_handle();\n    leash_plug();\n    \n    // Surface details\n    deck_pad();\n    rail_tape();\n    \n    // Shape refinements\n    nose_rocker();\n    tail_rocker();\n}\n\n// Optional removable fin\n// toy_fin();",
    "renders": true
  },
  {
    "toy": "skateboard",
    "openscad_code": "// Realistic Toy Skateboard – 90 mm long\n// All dimensions in mm, wall thickness 2 mm where hollow\n$fn = 32;\n\n// Overall scale factor for easy re-sizing\nscale_factor = 1;\n\n// Main deck profile\nmodule deck(){\n    // Solid core\n    difference(){\n        // Tapered deck body\n        hull(){\n            translate([-40,0,0]) cube([80,20,5], center=true);\n            translate([-30,0,0]) cube([60,35,5], center=true);\n            translate([ 30,0,0]) cube([60,35,5], center=true);\n            translate([ 40,0,0]) cube([80,20,5], center=true);\n        }\n        // Light-weight cavity on bottom side\n        translate([0,0,-2.5])\n            cube([76,31,3.5], center=true);\n    }\n}\n\n// Nose & tail kick-ups\nmodule kick(angle){\n    rotate([angle,0,0])\n        translate([0,0,2.5])\n            cube([18,35,2.5], center=true);\n}\n\n// Truck base\nmodule truck(){\n    // Base plate\n    difference(){\n        cube([16,32,4], center=true);\n        // Screw recesses\n        for(x=[-6,6], y=[-12,12])\n            translate([x,y,-1]) cylinder(h=5,r=2,$fn=8);\n    }\n    // Hanger\n    translate([0,0,4])\n        cube([8,50,6], center=true);\n    // Axle\n    translate([0,0,7])\n        rotate([0,90,0])\n            cylinder(h=60,d=3,center=true);\n}\n\n// Wheel\nmodule wheel(){\n    difference(){\n        cylinder(h=8,r=11,center=true);\n        translate([0,0,-4.1])\n            cylinder(h=8.2,r=3);\n    }\n}\n\n// Wheel assembly (4 wheels)\nmodule wheels(){\n    for(side=[-1,1]){\n        translate([0,side*25,7])\n            truck();\n        for(x=[-22,22])\n            translate([x,side*25,-4])\n                wheel();\n    }\n}\n\n// Grip-tape texture lines\nmodule grip(){\n    for(i=[-35:5:35]){\n        translate([i,-17,2.51])\n            cube([0.5,34,0.2]);\n    }\n}\n\n// Hardware bolts\nmodule bolts(){\n    for(side=[-1,1]){\n        for(x=[-10,10]){\n            translate([x,side*12,2.5])\n                cylinder(h=3,r=1.5,$fn=6);\n        }\n    }\n}\n\n// Main assembly\nscale(scale_factor){\n    union(){\n        // Deck parts\n        deck();\n        translate([-31,0,0]) kick(25);\n        translate([ 31,0,0]) kick(-25);\n        \n        // Trucks & wheels\n        wheels();\n        \n        // Surface details\n        grip();\n        bolts();\n    }\n}",
    "renders": true
  },
  {
    "toy": "rollerblade",
    "openscad_code": "// Toy Rollerblade - Realistic Style, Medium Complexity\n// Dimensions: ~120mm long, ~45mm wide, ~50mm tall\n\n// Main parameters\n$fn = 24;\nwheel_radius = 8;\nwheel_width = 6;\nframe_thickness = 3;\nboot_length = 110;\nboot_width = 42;\nboot_height = 35;\ntoe_stop_radius = 5;\n\n// Main boot shell\nmodule boot_shell() {\n    difference() {\n        // Main boot body\n        union() {\n            // Base shell\n            translate([-boot_length/2, -boot_width/2, 0])\n                cube([boot_length, boot_width, boot_height]);\n            \n            // Toe cap\n            translate([boot_length/2 - 20, 0, boot_height/2])\n                sphere(r=20);\n            \n            // Heel support\n            translate([-boot_length/2 + 15, 0, boot_height])\n                cylinder(r1=15, r2=20, h=15);\n            \n            // Ankle cuff\n            translate([-boot_length/2 + 30, 0, boot_height + 10])\n                rotate([90, 0, 0])\n                    cylinder(r1=20, r2=15, h=25);\n        }\n        \n        // Remove inside for foot space\n        translate([-boot_length/2 + 5, -boot_width/2 + 5, 5])\n            cube([boot_length - 10, boot_width - 10, boot_height]);\n        \n        // Lace holes\n        for(i = [-1:1]) {\n            translate([boot_length/2 - 30 + i*15, 0, boot_height - 5])\n                cylinder(r=2, h=10, center=true);\n        }\n    }\n}\n\n// Wheel frame\nmodule frame() {\n    // Main frame rails\n    translate([-40, -frame_thickness/2, -wheel_radius - frame_thickness])\n        cube([80, frame_thickness, frame_thickness]);\n    \n    translate([-40, boot_width/2 - frame_thickness, -wheel_radius - frame_thickness])\n        cube([80, frame_thickness, frame_thickness]);\n    \n    // Axle mounts\n    for(i = [0:3]) {\n        x_pos = -30 + i*20;\n        translate([x_pos, 0, -wheel_radius - frame_thickness/2])\n            cube([frame_thickness*2, boot_width, frame_thickness]);\n    }\n}\n\n// Wheels with bearings\nmodule wheel() {\n    difference() {\n        // Wheel tire\n        cylinder(r=wheel_radius, h=wheel_width, center=true);\n        \n        // Bearing hole\n        cylinder(r=3, h=wheel_width + 1, center=true);\n        \n        // Hub detail\n        cylinder(r=wheel_radius - 3, h=wheel_width - 2, center=true);\n    }\n}\n\n// Toe stop\nmodule toe_stop() {\n    translate([boot_length/2 - 5, 0, -wheel_radius - 5])\n        rotate([0, 90, 0])\n            cylinder(r=toe_stop_radius, h=10);\n}\n\n// Laces\nmodule laces() {\n    color(\"white\")\n    for(i = [-2:2]) {\n        translate([boot_length/2 - 40 + i*10, -boot_width/4, boot_height - 2])\n            rotate([90, 0, 0])\n                cylinder(r=1, h=boot_width/2);\n    }\n}\n\n// Buckle details\nmodule buckles() {\n    // Ankle strap\n    translate([-boot_length/2 + 40, boot_width/2, boot_height + 15])\n        cube([40, 5, 2]);\n    \n    // Cuff buckle\n    translate([-boot_length/2 + 20, boot_width/2 + 10, boot_height + 20])\n        rotate([0, 0, 15])\n            cube([25, 5, 3]);\n}\n\n// Assembly\nunion() {\n    // Main boot\n    boot_shell();\n    \n    // Frame and wheels\n    frame();\n    for(i = [0:3]) {\n        x_pos = -30 + i*20;\n        translate([x_pos, 0, -wheel_radius - frame_thickness/2])\n            wheel();\n    }\n    \n    // Toe stop\n    toe_stop();\n    \n    // Details\n    laces();\n    buckles();\n}\n\n// Print orientation - flat on bed\ntranslate([0, 0, 0])\n    color(\"lightgray\")\n    children();\n    \n// Add small support under toe for stability\ntranslate([boot_length/2 - 10, 0, -wheel_radius - frame_thickness - 2])\n    cube([20, 2, 2]);",
    "renders": true
  },
  {
    "toy": "scooter",
    "openscad_code": "// Realistic Toy Scooter - Medium Complexity\n// Overall size: ~110mm long, ~70mm tall, ~35mm wide\n\n$fn = 32;\n\n// Main module\nmodule scooter() {\n    color(\"lightgray\") {\n        union() {\n            // Deck assembly\n            translate([0, 0, 15]) deck();\n            \n            // Front fork and steering\n            translate([-45, 0, 35]) front_fork();\n            \n            // Handlebars\n            translate([-45, 0, 70]) handlebar();\n            \n            // Rear wheel\n            translate([40, 0, 15]) wheel(15);\n            \n            // Front wheel\n            translate([-55, 0, 15]) wheel(15);\n        }\n    }\n}\n\n// Main deck with grip pattern\nmodule deck() {\n    difference() {\n        // Main deck body\n        translate([0, 0, 0]) {\n            cube([100, 30, 5], center=true);\n        }\n        \n        // Grip pattern holes\n        for (x = [-45:5:45]) {\n            for (y = [-12:5:12]) {\n                translate([x, y, 2.6]) {\n                    cylinder(h=3, d=3, center=true);\n                }\n            }\n        }\n    }\n    \n    // Reinforcement ribs underneath\n    for (x = [-40:10:40]) {\n        translate([x, 0, 12.5]) {\n            cube([8, 28, 5], center=true);\n        }\n    }\n}\n\n// Front fork assembly\nmodule front_fork() {\n    // Fork tubes\n    union() {\n        // Left fork\n        translate([0, 12, -10]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=40, d=6, center=false);\n            }\n        }\n        \n        // Right fork\n        translate([0, -12, -10]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=40, d=6, center=false);\n            }\n        }\n        \n        // Steering column\n        translate([0, 0, 30]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=40, d=8, center=false);\n            }\n        }\n        \n        // Fork crown\n        translate([0, 0, 10]) {\n            cube([30, 30, 6], center=true);\n        }\n    }\n}\n\n// Handlebar assembly\nmodule handlebar() {\n    // Main bar\n    rotate([0, 90, 0]) {\n        cylinder(h=40, d=8, center=true);\n    }\n    \n    // Grips\n    for (y = [-15, 15]) {\n        translate([0, y, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=15, d=12, center=true);\n            }\n        }\n    }\n    \n    // Handlebar stem\n    translate([20, 0, 0]) {\n        rotate([0, 0, 90]) {\n            cylinder(h=30, d=10, center=true);\n        }\n    }\n}\n\n// Wheel module with spokes\nmodule wheel(radius) {\n    // Wheel rim\n    rotate_extrude(angle=360, convexity=10) {\n        translate([radius, 0, 0]) {\n            polygon(points=[\n                [0, 0],\n                [2, 0],\n                [2, 8],\n                [0, 8]\n            ]);\n        }\n    }\n    \n    // Tire\n    rotate_extrude(angle=360, convexity=10) {\n        translate([radius + 2, 0, 0]) {\n            polygon(points=[\n                [0, 0],\n                [2, 0],\n                [2, 8],\n                [0, 8]\n            ]);\n        }\n    }\n    \n    // Spokes\n    for (i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([1, 0, 4]) {\n                cube([radius - 2, 2, 0.5], center=true);\n            }\n        }\n    }\n    \n    // Hub\n    rotate_extrude(angle=360, convexity=10) {\n        translate([3, 0, 0]) {\n            polygon(points=[\n                [0, 0],\n                [3, 0],\n                [3, 8],\n                [0, 8]\n            ]);\n        }\n    }\n}\n\n// Generate the scooter\nscooter();",
    "renders": true
  },
  {
    "toy": "trampoline",
    "openscad_code": "// Trampoline toy with realistic proportions and structural details\n// Overall footprint ~100mm diameter, ~30mm height\n\n// Parameters\ndia = 100;              // Overall diameter\nframe_r = 2;            // Frame tube radius\nspring_r = 1.2;         // Spring radius\nspring_n = 16;          // Number of springs\nleg_h = 18;             // Leg height\nmat_thick = 1.5;        // Mat thickness\nnet_h = 25;             // Safety net height\npole_r = 1.8;           // Net pole radius\n\n// Main trampoline frame\nmodule frame() {\n    difference() {\n        // Outer ring\n        cylinder(h=frame_r*2, r=dia/2, $fn=60);\n        // Hollow center\n        translate([0,0,-0.1])\n            cylinder(h=frame_r*2+0.2, r=dia/2-frame_r*2, $fn=60);\n    }\n}\n\n// Mat with realistic texture\nmodule mat() {\n    translate([0,0,frame_r*2])\n    difference() {\n        cylinder(h=mat_thick, r=dia/2-frame_r*3, $fn=60);\n        \n        // Perforated texture\n        for(i=[0:5:359]) {\n            rotate([0,0,i])\n            translate([dia/2*0.7,0,-0.1])\n            cube([2, 2, mat_thick+0.2], center=true);\n        }\n    }\n}\n\n// Individual spring\nmodule spring() {\n    translate([0,0,frame_r*2])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=6, r=spring_r, $fn=12);\n        translate([0,0,-0.1])\n        cylinder(h=6.2, r=spring_r-0.6, $fn=12);\n    }\n}\n\n// All springs around the mat\nmodule springs() {\n    for(i=[0:spring_n-1]) {\n        angle = i * 360/spring_n;\n        translate([cos(angle)*(dia/2-frame_r), sin(angle)*(dia/2-frame_r), 0])\n        rotate([0,0,angle])\n        spring();\n    }\n}\n\n// Support leg\nmodule leg() {\n    translate([0,0,-leg_h/2])\n    difference() {\n        cylinder(h=leg_h, r=frame_r*1.2, $fn=12);\n        translate([frame_r*0.5,0,-0.1])\n        cylinder(h=leg_h+0.2, r=frame_r*0.6, $fn=12);\n    }\n}\n\n// All legs\nmodule legs() {\n    for(i=[0:3]) {\n        angle = i * 90 + 45;\n        translate([cos(angle)*dia/3, sin(angle)*dia/3, 0])\n        rotate([0,0,angle+90])\n        rotate([20,0,0])\n        leg();\n    }\n}\n\n// Safety net pole\nmodule net_pole() {\n    translate([0,0,frame_r*2])\n    rotate([0,0,45])\n    translate([dia/2-frame_r*2,0,0])\n    rotate([10,0,0])\n    cylinder(h=net_h, r=pole_r, $fn=12);\n}\n\n// All net poles\nmodule net_poles() {\n    for(i=[0:3]) {\n        angle = i * 90 + 45;\n        rotate([0,0,angle])\n        net_pole();\n    }\n}\n\n// Net mesh\nmodule net() {\n    translate([0,0,frame_r*2+net_h/2])\n    difference() {\n        cylinder(h=net_h, r=dia/2-frame_r*2, $fn=60);\n        translate([0,0,-0.1])\n        cylinder(h=net_h+0.2, r=dia/2-frame_r*4, $fn=60);\n    }\n}\n\n// Assembly\nframe();\nmat();\nsprings();\nlegs();\nnet_poles();\nnet();",
    "renders": true
  },
  {
    "toy": "pogo",
    "openscad_code": "// Pogo Toy - Realistic Medium Complexity\n// Designed for 3D printing with 2mm walls\n\n$fn = 36;\n\n// Main module\nmodule pogo_toy() {\n    // Main pole assembly\n    union() {\n        // Handle bars\n        translate([0, 0, 85])\n            handle_assembly();\n        \n        // Main pole\n        translate([0, 0, 0])\n            pole_assembly();\n            \n        // Spring assembly\n        translate([0, 0, -5])\n            spring_assembly();\n            \n        // Foot base\n        translate([0, 0, -35])\n            foot_assembly();\n    }\n}\n\n// Handle bars with grips\nmodule handle_assembly() {\n    difference() {\n        // Main handle bar tube\n        rotate([90, 0, 0])\n            cylinder(h=30, d=12);\n            \n        // Left grip\n        translate([-12, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=16);\n            \n        // Right grip\n        translate([12, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=16);\n    }\n    \n    // Grip textures\n    for(i = [-1, 1]) {\n        translate([i * 12, 0, 0])\n            rotate([90, 0, 0])\n            for(j = [0:3]) {\n                translate([0, 0, -10 + j * 5])\n                    cylinder(h=3, d1=15, d2=15.5);\n            }\n    }\n}\n\n// Main pole with safety markings\nmodule pole_assembly() {\n    difference() {\n        // Main pole tube\n        cylinder(h=90, d=18);\n        \n        // Interior hollow\n        cylinder(h=90, d=14);\n    }\n    \n    // Safety stripes\n    for(i = [1:4]) {\n        color(\"red\")\n        translate([0, 0, 15 + i * 15])\n            cylinder(h=3, d=19);\n    }\n}\n\n// Spring mechanism\nmodule spring_assembly() {\n    difference() {\n        // Spring housing\n        cylinder(h=25, d=40);\n        \n        // Interior cavity\n        cylinder(h=25, d=36);\n        \n        // Bottom opening for pole\n        cylinder(h=10, d=20);\n    }\n    \n    // Spring coils\n    for(i = [0:8]) {\n        translate([0, 0, 2 + i * 2.5])\n            rotate([0, 0, i * 30])\n            difference() {\n                cylinder(h=2, d=38);\n                cylinder(h=2, d=34);\n            }\n    }\n}\n\n// Foot base with grip pattern\nmodule foot_assembly() {\n    difference() {\n        // Main foot platform\n        cylinder(h=8, d=60);\n        \n        // Center hole\n        cylinder(h=8, d=18);\n    }\n    \n    // Grip pattern on top\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([0, 20, 8])\n                cube([3, 10, 1], center=true);\n    }\n    \n    // Bottom grip rings\n    for(r = [15:10:45]) {\n        translate([0, 0, 0])\n            cylinder(h=1, d=r * 2);\n    }\n}\n\n// Render the toy\npogo_toy();",
    "renders": true
  },
  {
    "toy": "stilts",
    "openscad_code": "// Stilts toy for kids – realistic medium-complexity model\n// Overall height: 120 mm\n// Foot platform size: 90 x 35 mm\n// Wall thickness: 2 mm everywhere\n\n// ---------- Parameters ----------\n$fn = 24;\nwall = 2;\npole_r = 10;\npole_h = 110;\nfoot_w = 90;\nfoot_d = 35;\nfoot_h = 12;\ngrip_r = 12;\ngrip_h = 120;\nrib_spacing = 20;\nrib_w = 4;\nrib_h = 4;\n\n// ---------- Pole with ribs ----------\nmodule pole() {\n    difference() {\n        union() {\n            // Main pole tube\n            cylinder(h = pole_h, r = pole_r, center = false);\n            // Ribs for grip\n            for (i = [0 : rib_spacing : pole_h - rib_spacing]) {\n                translate([0, 0, i + rib_spacing/2])\n                rotate([0, 90, 0])\n                cylinder(h = pole_r*2, r = rib_w, center = true);\n            }\n        }\n        // Hollow core\n        translate([0, 0, -1])\n        cylinder(h = pole_h + 2, r = pole_r - wall, center = false);\n    }\n}\n\n// ---------- Foot plate ----------\nmodule footplate() {\n    difference() {\n        union() {\n            // Plate body\n            translate([-foot_w/2, -foot_d/2, 0])\n            cube([foot_w, foot_d, foot_h]);\n            // Reinforcement ribs underneath\n            for (x = [-foot_w/2 + 10 : 15 : foot_w/2 - 10]) {\n                translate([x, 0, -rib_h])\n                cube([rib_w, foot_d, rib_h]);\n            }\n        }\n        // Mounting hole for pole\n        translate([0, 0, -1])\n        cylinder(h = foot_h + 2, r = pole_r + 0.2, center = false);\n        // Foot surface texture (anti-slip dimples)\n        for (x = [-foot_w/2 + 5 : 10 : foot_w/2 - 5])\n        for (y = [-foot_d/2 + 5 : 10 : foot_d/2 - 5]) {\n            translate([x, y, foot_h - 1])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// ---------- Hand grip sleeve ----------\nmodule handgrip() {\n    difference() {\n        union() {\n            // Grip sleeve tube\n            cylinder(h = grip_h, r = grip_r, center = false);\n            // End cap\n            translate([0, 0, grip_h])\n            cylinder(h = 3, r = grip_r + 1, center = false);\n        }\n        // Inner hole\n        translate([0, 0, -1])\n        cylinder(h = grip_h + 2, r = grip_r - wall, center = false);\n    }\n}\n\n// ---------- Assembly ----------\n// Left stilt\ntranslate([-pole_r - foot_w/2 - 5, 0, 0]) {\n    pole();\n    translate([0, 0, 0])\n    footplate();\n    translate([0, 0, pole_h - grip_h])\n    handgrip();\n}\n\n// Right stilt (mirror of left)\ntranslate([pole_r + foot_w/2 + 5, 0, 0]) {\n    mirror([1, 0, 0]) {\n        pole();\n        translate([0, 0, 0])\n        footplate();\n        translate([0, 0, pole_h - grip_h])\n        handgrip();\n    }\n}",
    "renders": true
  },
  {
    "toy": "pogostick",
    "openscad_code": "// Toy Pogostick - Realistic Style, Medium Complexity\n// Total height: 120mm\n\nmodule pogostick() {\n    // Main tube\n    translate([0, 0, 60]) \n        cylinder(h=60, d1=12, d2=12, $fn=32);\n\n    // Bottom foot plate with grip pattern\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h=10, d=20, $fn=32);\n            // Grip pattern holes\n            for(i=[0:5]) {\n                rotate([0, 0, i*60]) \n                    translate([7, 0, -1])\n                        cube([2, 1, 12], center=true);\n            }\n        }\n\n    // Top handle bar\n    translate([0, 0, 110])\n        rotate([90, 0, 0])\n            cylinder(h=40, d=8, $fn=32);\n\n    // Handle grips\n    translate([-18, 0, 110])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=10, $fn=32);\n    translate([18, 0, 110])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=10, $fn=32);\n\n    // Spring housing\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h=35, d=16, $fn=32);\n            cylinder(h=37, d=12, $fn=32);\n        }\n\n    // Visible spring coils\n    module spring_coil() {\n        for(i=[0:8]) {\n            translate([0, 0, 22 + i*3])\n                rotate([0, 0, i*30])\n                    difference() {\n                        cylinder(h=2, d=14, $fn=32);\n                        cylinder(h=3, d=10, $fn=32);\n                    }\n        }\n    }\n    spring_coil();\n\n    // Support brackets\n    module bracket(y) {\n        translate([0, y, 45])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=15, d=6, $fn=16);\n                    translate([0, 0, -1])\n                        cube([15, 3, 8], center=true);\n                }\n    }\n    bracket(8);\n    bracket(-8);\n\n    // Foot pegs\n    module foot_peg(x) {\n        translate([x, 0, 45])\n            rotate([0, 90, 0])\n                union() {\n                    cylinder(h=12, d=6, $fn=16);\n                    translate([0, 0, 12])\n                        sphere(d=8, $fn=16);\n                }\n    }\n    foot_peg(12);\n    foot_peg(-12);\n\n    // Safety bumper ring\n    translate([0, 0, 18])\n        cylinder(h=3, d=24, $fn=32);\n\n    // Top cap detail\n    translate([0, 0, 120])\n        cylinder(h=5, d=14, $fn=32);\n}\n\n// Scale to reasonable toy size\nscale([1, 1, 1])\n    pogostick();",
    "renders": true
  },
  {
    "toy": "balancebeam",
    "openscad_code": "// Balance Beam Toy - Realistic Medium Complexity\n// Dimensions: 120mm long × 20mm wide × 40mm high\n\n// Parameters\nbeam_length = 120;\nbeam_width = 20;\nbeam_height = 8;\nleg_height = 30;\nleg_width = 8;\nfoot_length = 25;\nfoot_width = 15;\nfoot_height = 2;\nsupport_radius = 3;\nsupport_height = 25;\n\n// Main beam with rounded edges\nmodule main_beam() {\n    difference() {\n        // Main beam body\n        cube([beam_length, beam_width, beam_height], center=true);\n        \n        // Rounded edges - subtract half-cylinders\n        translate([beam_length/2-1, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=2, r=beam_height/2, center=true);\n        translate([-beam_length/2+1, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=2, r=beam_height/2, center=true);\n    }\n    \n    // Add rounded caps\n    translate([beam_length/2-beam_height/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=beam_height, r=beam_height/2, center=true);\n    translate([-beam_length/2+beam_height/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=beam_height, r=beam_height/2, center=true);\n}\n\n// Support leg with foot\nmodule support_leg(x_pos, angle) {\n    translate([x_pos, 0, 0]) {\n        rotate([0, angle, 0]) {\n            // Main leg\n            translate([0, 0, -leg_height/2-foot_height])\n                cube([leg_width, leg_width, leg_height], center=true);\n            \n            // Foot base\n            translate([0, 0, -leg_height-foot_height])\n                cube([foot_length, foot_width, foot_height], center=true);\n            \n            // Support struts\n            for(i = [-1:1]) {\n                translate([leg_width/2*i, 0, -leg_height/2-foot_height])\n                    rotate([0, 90, 0])\n                    cylinder(h=support_height, r=support_radius, center=true);\n            }\n        }\n    }\n}\n\n// Center support structure\nmodule center_support() {\n    translate([0, 0, -leg_height/2-foot_height-beam_height/2]) {\n        // Main center post\n        cube([leg_width*1.5, leg_width*1.5, leg_height], center=true);\n        \n        // Stabilizing arms\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle]) {\n                translate([leg_width*0.75+foot_length/2, 0, -leg_height/2+foot_height])\n                    cube([foot_length, leg_width*0.8, leg_height*0.8], center=true);\n            }\n        }\n    }\n}\n\n// Safety end caps\nmodule end_caps() {\n    for(side = [-1, 1]) {\n        translate([side*beam_length/2, 0, 0]) {\n            // Main cap\n            difference() {\n                cylinder(h=beam_height*1.5, r=beam_width/2+2, center=true);\n                cylinder(h=beam_height*1.5+0.1, r=beam_width/2-2, center=true);\n            }\n            \n            // Grip texture\n            for(i = [1:3]) {\n                rotate([90, 0, 0])\n                translate([0, 0, -beam_height/2+i*2])\n                    cylinder(h=beam_width+4, r=0.5, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main beam on top\n    translate([0, 0, leg_height+beam_height/2+foot_height])\n        main_beam();\n    \n    // End caps\n    translate([0, 0, leg_height+beam_height/2+foot_height])\n        end_caps();\n    \n    // Support legs\n    support_leg(beam_length/3, 15);\n    support_leg(-beam_length/3, -15);\n    \n    // Center support\n    center_support();\n}",
    "renders": true
  },
  {
    "toy": "hurdle",
    "openscad_code": "// Hurdle toy for 3D printing – realistic style, medium complexity\n// Overall footprint ~100 mm wide × 30 mm deep × 60 mm high\n\n// Parameters\nhurdle_width = 100;       // total width\nrail_height  = 55;        // top of the rail\nrail_thick   = 3;         // thickness of the top rail\nrail_width   = 3;         // depth of the rail\nleg_thick    = 6;         // square leg cross-section\nleg_taper    = 2;         // taper at bottom\nfoot_diam    = 12;        // disk-shaped foot\nfoot_h       = 2;\nbrace_h      = 10;        // lateral brace height\nbrace_t      = 2;\ncross_t      = 2;         // cross-brace thickness\ncross_h      = 20;\nslot_w       = 10;        // peg-and-slot connection feature\nslot_d       = 5;\nslot_h       = 3;\n\n// Utility: square post with slight taper\nmodule tapered_post(h, base, top) {\n    difference() {\n        hull() {\n            translate([0,0,0]) cube([base,base,0.1], center=true);\n            translate([0,0,h])  cube([top, top,0.1], center=true);\n        }\n        translate([0,0,-0.1]) cube([base-2*leg_taper, base-2*leg_taper, h+0.2], center=true);\n    }\n}\n\n// Single leg assembly with foot and peg\nmodule leg_with_foot(x_pos) {\n    translate([x_pos, 0, 0]) {\n        // Leg\n        translate([0,0,foot_h]) tapered_post(rail_height-foot_h, leg_thick, leg_thick-leg_taper);\n\n        // Foot disk\n        cylinder(h=foot_h, d=foot_diam, $fn=32);\n\n        // Peg on inside face for slotting\n        translate([-leg_thick/2-slot_w/2, 0, rail_height-slot_h/2])\n            cube([slot_w, slot_d, slot_h], center=true);\n    }\n}\n\n// Cross-brace between legs\nmodule cross_brace() {\n    // horizontal brace\n    translate([0,0,brace_h/2+foot_h])\n        cube([hurdle_width-leg_thick*2-4, cross_t, brace_h], center=true);\n\n    // diagonal supports\n    for (side = [-1, 1]) {\n        rotate([0,0,side*15])\n            translate([0,0,foot_h+cross_h/2])\n                cube([hurdle_width-leg_thick*2-4, cross_t, cross_h], center=true);\n    }\n}\n\n// Top rail with rounded edges\nmodule top_rail() {\n    hull() {\n        translate([-hurdle_width/2+2,0,rail_height])\n            cube([rail_width, rail_width, rail_thick], center=true);\n        translate([hurdle_width/2-2,0,rail_height])\n            cube([rail_width, rail_width, rail_thick], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Legs\n    leg_with_foot(-hurdle_width/2 + leg_thick/2);\n    leg_with_foot( hurdle_width/2 - leg_thick/2);\n\n    // Cross-bracing\n    cross_brace();\n\n    // Top rail\n    top_rail();\n}",
    "renders": true
  },
  {
    "toy": "cones",
    "openscad_code": "// Realistic Toy Cones Set - Medium Complexity\n// A set of traffic cones with realistic proportions and toy features\n\nmodule cone_body(height, base_d, wall_t) {\n    // Main cone body with hollow interior\n    difference() {\n        cylinder(h=height, d1=base_d, d2=base_d*0.3, $fn=32);\n        translate([0, 0, wall_t])\n            cylinder(h=height-wall_t*2, d1=base_d-wall_t*2, d2=base_d*0.3-wall_t*2, $fn=32);\n    }\n    \n    // Add weight ring at bottom\n    translate([0, 0, 0])\n        cylinder(h=wall_t*2, d=base_d*0.95, $fn=32);\n}\n\nmodule base_ring(base_d, height) {\n    // Wide base ring for stability\n    difference() {\n        cylinder(h=height*0.1, d=base_d*1.3, $fn=32);\n        cylinder(h=height*0.1+1, d=base_d*1.1, $fn=32);\n    }\n}\n\nmodule reflective_stripe(height, base_d, stripe_h) {\n    // High-visibility reflective stripe\n    color(\"white\", 0.8)\n    translate([0, 0, height*0.6])\n        cylinder(h=stripe_h, d1=base_d*0.7, d2=base_d*0.5, $fn=32);\n}\n\nmodule handle_slot(height, base_d) {\n    // Finger grip slot for easy carrying\n    slot_w = base_d * 0.4;\n    slot_h = height * 0.15;\n    slot_d = base_d * 0.3;\n    \n    translate([0, base_d*0.35, height*0.4])\n        rotate([90, 0, 0])\n            cube([slot_w, slot_h, slot_d], center=true);\n}\n\nmodule toy_connector(height, base_d) {\n    // Interlocking connector on top\n    connector_h = height * 0.1;\n    connector_d = base_d * 0.25;\n    \n    translate([0, 0, height])\n        cylinder(h=connector_h, d=connector_d, $fn=16);\n    \n    // Matching socket on bottom\n    translate([0, 0, -connector_h])\n        cylinder(h=connector_h+1, d=connector_d+0.5, $fn=16);\n}\n\nmodule cone_set() {\n    // Small cone (50mm)\n    translate([-40, 0, 0]) {\n        cone_body(50, 25, 2);\n        base_ring(25, 50);\n        reflective_stripe(50, 25, 4);\n        handle_slot(50, 25);\n        toy_connector(50, 25);\n    }\n    \n    // Medium cone (75mm)\n    translate([0, 0, 0]) {\n        cone_body(75, 35, 2.5);\n        base_ring(35, 75);\n        reflective_stripe(75, 35, 5);\n        handle_slot(75, 35);\n        toy_connector(75, 35);\n    }\n    \n    // Large cone (100mm)\n    translate([50, 0, 0]) {\n        cone_body(100, 45, 3);\n        base_ring(45, 100);\n        reflective_stripe(100, 45, 6);\n        handle_slot(100, 45);\n        toy_connector(100, 45);\n    }\n}\n\n// Generate the complete cone set\ncone_set();",
    "renders": true
  },
  {
    "toy": "marker",
    "openscad_code": "// Toy Marker - Realistic Style with Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions\nlength = 120;\nbarrel_d = 14;\ntip_length = 15;\ncap_length = 40;\n\nmodule marker_body() {\n    // Main barrel\n    difference() {\n        cylinder(h=length, d=barrel_d, $fn=32);\n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=length+2, d=barrel_d-4, $fn=32);\n    }\n    \n    // Tip\n    translate([0, 0, length])\n        cylinder(h=tip_length, d1=barrel_d, d2=2, $fn=16);\n}\n\nmodule marker_cap() {\n    // Cap body\n    difference() {\n        translate([0, 0, -cap_length])\n            cylinder(h=cap_length, d=barrel_d+2, $fn=32);\n        // Inner cavity\n        translate([0, 0, -cap_length-1])\n            cylinder(h=cap_length+2, d=barrel_d+0.5, $fn=32);\n    }\n    \n    // Clip\n    translate([barrel_d/2+0.5, 0, -cap_length/2])\n        rotate([90, 0, 0])\n            difference() {\n                cube([20, 2, 8], center=true);\n                translate([0, -1, 0])\n                    cube([20, 2, 7], center=true);\n            }\n    \n    // Grip ridges\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([barrel_d/2+1, 0, -cap_length+5])\n                cube([1.5, 1, 10], center=true);\n    }\n}\n\nmodule marker_details() {\n    // Brand label band\n    translate([0, 0, length/2])\n        difference() {\n            cylinder(h=15, d=barrel_d+0.2, $fn=32);\n            cylinder(h=15.2, d=barrel_d-0.5, $fn=32);\n        }\n    \n    // Color indicator ring\n    translate([0, 0, length-10])\n        difference() {\n            cylinder(h=3, d=barrel_d+1, $fn=32);\n            cylinder(h=3.2, d=barrel_d-1, $fn=32);\n        }\n    \n    // End cap detail\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=5, d=barrel_d, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=7, d=barrel_d-4, $fn=32);\n        }\n    \n    // Small vent holes\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n            translate([barrel_d/2-1, 0, length/4])\n                rotate([90, 0, 0])\n                    cylinder(h=2, d=1, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    marker_body();\n    translate([0, 0, length+tip_length+5])\n        marker_cap();\n    marker_details();\n}",
    "renders": true
  },
  {
    "toy": "ladder",
    "openscad_code": "// Ladder toy - realistic medium-complexity design\n// Overall height 120mm, width 40mm, depth 12mm\n\n// Parameters\nladder_height = 120;\nladder_width = 40;\nladder_depth = 12;\nrail_thickness = 3;\nrung_thickness = 2.5;\nrung_spacing = 18;\nrung_count = 6;\nhandle_diameter = 8;\nhandle_length = 15;\nbase_thickness = 4;\n\n// Colors (for preview only)\ncolor_rail = \"GoldenRod\";\ncolor_rung = \"SaddleBrown\";\n\nmodule ladder_rail(height, width, depth) {\n    // Main vertical rail with rounded top\n    difference() {\n        union() {\n            // Main rail body\n            cube([width, depth, height - 5]);\n            // Rounded top cap\n            translate([width/2, depth/2, height - 5])\n                cylinder(h=5, r1=width/2, r2=width/2, $fn=20);\n        }\n        // Safety hole for finger grip\n        translate([width/2, depth/2, height - 15])\n            rotate([90, 0, 0])\n                cylinder(h=width+1, r1=3, r2=3, $fn=20);\n    }\n}\n\nmodule ladder_rung(length, thickness) {\n    // Cylindrical rung with end caps\n    union() {\n        // Main rung cylinder\n        cylinder(h=length, r1=thickness/2, r2=thickness/2, $fn=16);\n        // End caps for better grip\n        translate([0, 0, 0])\n            cylinder(h=2, r1=thickness/2 + 1, r2=thickness/2, $fn=16);\n        translate([0, 0, length - 2])\n            cylinder(h=2, r1=thickness/2, r2=thickness/2 + 1, $fn=16);\n    }\n}\n\nmodule ladder_base(width, depth, thickness) {\n    // Wide base for stability with rounded edges\n    difference() {\n        union() {\n            // Main base\n            cube([width + 8, depth + 4, thickness]);\n            // Rounded front edge\n            translate([(width + 8)/2, (depth + 4)/2, thickness])\n                cylinder(h=thickness, r1=(depth + 4)/2, r2=(depth + 4)/2, $fn=20);\n        }\n        // Weight reduction holes\n        for(x=[-1, 1])\n            translate([(width + 8)/4 * x + (width + 8)/2, (depth + 4)/2, thickness/2])\n                cube([8, depth, thickness + 0.1], center=true);\n    }\n}\n\nmodule ladder_handle(diameter, length) {\n    // Curved handle for carrying\n    difference() {\n        union() {\n            // Main handle tube\n            rotate([90, 0, 0])\n                cylinder(h=length, r1=diameter/2, r2=diameter/2, $fn=16);\n            // Mounting brackets\n            for(side=[-1, 1])\n                translate([0, side * (length/2 - 2), 0])\n                    cube([diameter + 4, 4, diameter + 4], center=true);\n        }\n        // Grip texture\n        for(i=[0:3])\n            translate([0, -length/2 + 5 + i * 3, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=diameter + 1, r1=diameter/2 - 1, r2=diameter/2 - 1, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Left rail\n    translate([0, 0, 0])\n        color(color_rail)\n            ladder_rail(ladder_height, rail_thickness, ladder_depth);\n    \n    // Right rail\n    translate([ladder_width - rail_thickness, 0, 0])\n        color(color_rail)\n            ladder_rail(ladder_height, rail_thickness, ladder_depth);\n    \n    // Rungs\n    for(i=[0:rung_count-1]) {\n        translate([rail_thickness + 1, ladder_depth/2, rung_spacing/2 + i * rung_spacing])\n            rotate([90, 0, 0])\n                color(color_rung)\n                    ladder_rung(ladder_width - 2 * rail_thickness - 2, rung_thickness);\n    }\n    \n    // Base\n    translate([-4, -2, 0])\n        ladder_base(ladder_width, ladder_depth, base_thickness);\n    \n    // Top handle\n    translate([ladder_width/2 - handle_diameter/2 - 2, ladder_depth/2, ladder_height - 5])\n        ladder_handle(handle_diameter, handle_length);\n    \n    // Safety end caps\n    for(side=[0, 1]) {\n        translate([side * (ladder_width - rail_thickness), 0, ladder_height - 5])\n            cylinder(h=rail_thickness, r1=rail_thickness + 1, r2=rail_thickness + 1, $fn=20);\n    }\n}",
    "renders": true
  },
  {
    "toy": "parachute",
    "openscad_code": "// Parachute Toy - Realistic Medium Complexity\n// Overall height ~120mm, canopy diameter ~150mm\n\n// Canopy Parameters\ncanopy_d = 150;           // mm\ncanopy_segments = 16;     // Number of canopy segments\ncanopy_thick = 2;         // mm wall thickness\ncanopy_height = 45;        // mm\n\n// Shroud Lines Parameters\nline_thick = 2;           // mm diameter\nline_length = 75;         // mm\nline_count = 8;           // Number of shroud lines\n\n// Paratrooper Figure Parameters\nfigure_h = 35;            // mm total height\nhead_r = 6;               // mm\nbody_w = 12, body_h = 18, body_d = 6;\narm_l = 10, arm_r = 3;\nleg_l = 12, leg_r = 3;\n\n// Central Hub Parameters\nhub_r = 7;                // mm\nhub_h = 12;               // mm\n\n// Module: Create a single canopy segment\nmodule canopy_segment(r_outer, r_inner, height, angle_span) {\n    rotate([0, 0, -angle_span/2])\n    difference() {\n        // Outer shell of segment\n        cylinder(h=height, r1=r_outer, r2=r_outer*0.8, $fn=50);\n        // Remove inner part for hollow shell\n        translate([0, 0, -0.1])\n        cylinder(h=height+0.2, r1=r_inner, r2=r_inner*0.8, $fn=50);\n        // Cut sides for segment separation\n        rotate([0, 0, angle_span/2])\n        translate([r_outer*cos(angle_span/2), 0, -0.1])\n        cube([r_outer*2, 0.5, height+0.2], center=true);\n        rotate([0, 0, -angle_span/2])\n        translate([r_outer*cos(angle_span/2), 0, -0.1])\n        cube([r_outer*2, 0.5, height+0.2], center=true);\n    }\n}\n\n// Module: Paratrooper Figure\nmodule paratrooper() {\n    // Head\n    translate([0, 0, figure_h - head_r])\n    sphere(r=head_r, $fn=20);\n    \n    // Body\n    translate([0, 0, figure_h - 2*head_r - body_h/2])\n    cube([body_w, body_d, body_h], center=true);\n    \n    // Arms (spread out for parachute harness)\n    translate([-body_w/2 - arm_l/2, 0, figure_h - 2*head_r - body_h/2 + body_h/4])\n    cube([arm_l, arm_r*2, arm_r*2], center=true);\n    \n    translate([body_w/2 + arm_l/2, 0, figure_h - 2*head_r - body_h/2 + body_h/4])\n    cube([arm_l, arm_r*2, arm_r*2], center=true);\n    \n    // Legs\n    translate([-body_w/4, 0, leg_l/2])\n    cylinder(h=leg_l, r=leg_r, $fn=10);\n    \n    translate([body_w/4, 0, leg_l/2])\n    cylinder(h=leg_l, r=leg_r, $fn=10);\n}\n\n// Module: Central Hub with string attachment points\nmodule central_hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(h=hub_h, r=hub_r, $fn=20);\n        // Hollow center for weight reduction\n        cylinder(h=hub_h+0.2, r=hub_r-2, $fn=20);\n    }\n    \n    // String attachment loops\n    for(i=[0:line_count-1]) {\n        rotate([0, 0, i*360/line_count])\n        translate([hub_r+2, 0, hub_h/2])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=1.5, $fn=8);\n    }\n}\n\n// Module: Shroud Lines\nmodule shroud_lines() {\n    for(i=[0:line_count-1]) {\n        angle = i*360/line_count;\n        // Top attachment point on canopy edge\n        x1 = (canopy_d/2 - canopy_thick) * cos(angle);\n        y1 = (canopy_d/2 - canopy_thick) * sin(angle);\n        z1 = canopy_height;\n        \n        // Bottom attachment point on hub\n        x2 = (hub_r+2) * cos(angle);\n        y2 = (hub_r+2) * sin(angle);\n        z2 = 0;\n        \n        // Create line as cylinder between points\n        translate([x1, y1, z1]) {\n            rotate([0, atan2(z2-z1, sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))), atan2(y2-y1, x2-x1)])\n            cylinder(h=sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)), r=line_thick/2, $fn=6);\n        }\n    }\n}\n\n// Main Assembly\nunion() {\n    // Canopy Assembly\n    translate([0, 0, 0]) {\n        difference() {\n            // Outer canopy shell segments\n            for(i=[0:canopy_segments-1]) {\n                rotate([0, 0, i*360/canopy_segments])\n                canopy_segment(canopy_d/2, canopy_d/2 - canopy_thick, canopy_height, 360/canopy_segments);\n            }\n            \n            // Central hole at top for printing support\n            cylinder(h=canopy_height+5, r=5, $fn=20);\n        }\n        \n        // Reinforcement ring at bottom edge\n        translate([0, 0, 0])\n        cylinder(h=canopy_thick*2, r1=canopy_d/2 - canopy_thick, r2=canopy_d/2 - canopy_thick, $fn=50);\n    }\n    \n    // Shroud Lines\n    shroud_lines();\n    \n    // Central Hub\n    translate([0, 0, 0])\n    central_hub();\n    \n    // Paratrooper Figure\n    translate([0, 0, -line_length - figure_h/2])\n    paratrooper();\n}",
    "renders": true
  },
  {
    "toy": "kite",
    "openscad_code": "// Realistic Toy Kite – 3D-printable, medium complexity\n// Overall height ≈ 110 mm, wingspan ≈ 110 mm, thickness ≈ 18 mm\n// Wall thickness ≈ 2 mm, minimal overhangs\n\n$fa = 2;  // smoother curves\n$fs = 1;\n\n// Main body module\nmodule kite() {\n    // Central diamond frame\n    difference() {\n        hull() {\n            rotate([0,0,45]) cube([110,110,2], center=true);\n        }\n        // Inner hole (hollow frame)\n        rotate([0,0,45]) cube([106,106,4], center=true);\n    }\n\n    // Cross spars – printed integral, 2 mm thick\n    // Vertical spar\n    translate([0,0,-0.5]) cube([3,110,3], center=true);\n    // Horizontal spar\n    translate([0,0,-0.5]) cube([110,3,3], center=true);\n}\n\n// Tail ribbon segments\nmodule tailSegment() {\n    // Simple tube for printability (no overhang)\n    cylinder(h = 8, d = 4, $fn = 12);\n}\n\n// Attach 5 tail segments in a chain\nmodule tail() {\n    for (i=[1:5]) {\n        translate([0, -55 - i*12, 0]) tailSegment();\n    }\n}\n\n// Bridle line (single printed cylinder)\nmodule bridle() {\n    translate([0, 55, 0]) rotate([90,0,0]) cylinder(h = 40, d = 2, $fn = 8);\n}\n\n// Handle with winder drum\nmodule handle() {\n    // Handle grip\n    translate([0, 0, 0]) rotate([90,0,0]) {\n        difference() {\n            cylinder(h = 70, d = 15, $fn = 20);\n            cylinder(h = 72, d = 11, $fn = 20); // hollow core\n        }\n        // End knob\n        translate([0,0,70]) sphere(d = 18);\n    }\n\n    // Drum flanges for line storage (no overhang)\n    for (z=[0, 60]) {\n        translate([0,0,z]) rotate([90,0,0]) cylinder(h = 2, d = 25, $fn = 20);\n    }\n}\n\n// Assembly\nkite();\ntail();\nbridle();\n\n// Position handle below kite for printing\ntranslate([0, 110, -50]) handle();",
    "renders": true
  },
  {
    "toy": "yoyo",
    "openscad_code": "// YoYo Toy - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\nyoyo_diameter = 58;      // Standard yo-yo size\nyoyo_width = 36;\naxle_diameter = 5;\nwall_thickness = 2;\nstring_gap = 2;\n\n// Colors for visualization (not printed)\ncolor_body = [0.8, 0.8, 0.8];\ncolor_axle = [0.3, 0.3, 0.3];\ncolor_grip = [0.2, 0.2, 0.2];\n\n// Module for rounded edges\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, 1], dy = [0, 1], dz = [0, 1]) {\n            translate([dx*(size[0]-2*radius), dy*(size[1]-2*radius), dz*(size[2]-2*radius)])\n                sphere(r=radius);\n        }\n    }\n}\n\n// YoYo half body with starburst response system\nmodule yoyo_half(depth, starburst = true) {\n    difference() {\n        // Main body\n        cylinder(h=depth, d=yoyo_diameter);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=depth-wall_thickness, d=yoyo_diameter-2*wall_thickness);\n        \n        // Axle hole\n        cylinder(h=depth*2, d=axle_diameter);\n        \n        // String gap\n        translate([0, 0, depth])\n            cylinder(h=string_gap, d=yoyo_diameter-2*wall_thickness);\n    }\n    \n    // Starburst response system\n    if(starburst) {\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([yoyo_diameter/2 - 8, 0, depth-1])\n                    cube([6, 1, 1], center=true);\n        }\n    }\n    \n    // Grip rings on outer edge\n    for(i = [0:3]) {\n        translate([0, 0, depth - i*1.5 - 0.5])\n            difference() {\n                cylinder(h=1, d=yoyo_diameter - i*2);\n                cylinder(h=1.1, d=yoyo_diameter - i*2 - 2);\n            }\n    }\n}\n\n// Bearing seat\nmodule bearing_seat() {\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h=3, d=12);\n            cylinder(h=3.1, d=6);\n        }\n}\n\n// Axle\nmodule axle() {\n    cylinder(h=yoyo_width-2*string_gap, d=axle_diameter);\n}\n\n// String\nmodule string(length = 1000) {\n    color(\"white\")\n        for(i = [0:length/5]) {\n            translate([0, 0, -i*5])\n                rotate([0, 0, i*360/10])\n                    cylinder(h=5, d=0.5);\n        }\n}\n\n// Assembly\nunion() {\n    // First half\n    translate([0, 0, -yoyo_width/2])\n        yoyo_half(yoyo_width/2 - string_gap/2);\n    \n    // Second half (mirrored)\n    mirror([0, 0, 1])\n        translate([0, 0, -yoyo_width/2])\n            yoyo_half(yoyo_width/2 - string_gap/2);\n    \n    // Bearing seat on first half\n    translate([0, 0, -string_gap/2])\n        bearing_seat();\n    \n    // Axle\n    axle();\n    \n    // String loop (visual only)\n    translate([0, 0, -yoyo_width/2 - 10])\n        string(20);\n}",
    "renders": true
  },
  {
    "toy": "diabolo",
    "openscad_code": "// Diabolo Toy - realistic style, medium complexity\n// Overall height ~120mm, diameter ~100mm\n// No overhangs, 2mm wall thickness throughout\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main parameters\ncup_d = 100;\ncup_h = 45;\naxle_d = 12;\naxle_l = 110;\nstring_d = 4;\nstring_l = 1200;\n\n// Cup profile - shallow cone with rounded edge\nmodule cup() {\n    difference() {\n        // Outer shell\n        union() {\n            cylinder(d1=cup_d, d2=cup_d*0.9, h=cup_h, center=true);\n            translate([0,0,cup_h/2-1])\n                cylinder(d=cup_d*0.9, h=2, center=true);\n        }\n        \n        // Hollow interior\n        translate([0,0,-2])\n            cylinder(d1=cup_d-4, d2=cup_d*0.9-4, h=cup_h, center=true);\n        \n        // Center hole for axle\n        cylinder(d=axle_d+2, h=cup_h+4, center=true);\n    }\n}\n\n// Axle with bearing races\nmodule axle() {\n    difference() {\n        // Main axle tube\n        cylinder(d=axle_d, h=axle_l, center=true);\n        \n        // Bearing race grooves\n        for(i=[-1,1]) {\n            translate([0,0,i*axle_l/4])\n                cylinder(d=axle_d+4, h=2, center=true);\n        }\n        \n        // String groove in center\n        translate([0,0,0])\n            cylinder(d=axle_d+6, h=6, center=true);\n    }\n    \n    // End caps\n    for(i=[-1,1]) {\n        translate([0,0,i*(axle_l/2+3)])\n            cylinder(d=axle_d+6, h=6, center=true);\n    }\n}\n\n// Decorative rings on cups\nmodule rings(count=3) {\n    for(i=[1:count]) {\n        color(\"gold\")\n        translate([0,0,-cup_h/2 + i*(cup_h/(count+1))])\n            cylinder(d=cup_d-2*i*5, h=2, center=true);\n    }\n}\n\n// String segments (simplified representation)\nmodule string() {\n    color(\"red\")\n    for(i=[0:5]) {\n        rotate([90,0,i*60])\n            translate([0,0,-string_l/2])\n                cylinder(d=string_d, h=string_l, center=true);\n    }\n}\n\n// Assembly\ntranslate([0,0,0])\n    cup();\n\ntranslate([0,0,cup_h+axle_l/2])\n    axle();\n\ntranslate([0,0,cup_h+axle_l])\n    mirror([0,0,1])\n        cup();\n\n// Add rings to both cups\ntranslate([0,0,0])\n    rings();\n\ntranslate([0,0,cup_h+axle_l])\n    rings();\n\n// Optional string representation\ntranslate([0,0,cup_h+axle_l+cup_h+50])\n    string();",
    "renders": true
  },
  {
    "toy": "kendama",
    "openscad_code": "// Realistic Kendama Toy - Medium Complexity\n// Based on standard kendama dimensions scaled for 3D printing\n\n// Main dimensions (in mm)\nball_d = 38;\nsara_d = 40;\nken_length = 105;\nhandle_d = 20;\nstring_hole_d = 3;\nstring_d = 2;\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\n// Module for the ken (handle and spike)\nmodule ken() {\n    // Handle body\n    difference() {\n        cylinder(h = ken_length, d = handle_d, $fn = 32);\n        // Hollow interior\n        translate([0, 0, wall_t])\n            cylinder(h = ken_length - wall_t*2, d = handle_d - wall_t*2, $fn = 32);\n    }\n    \n    // Spike\n    translate([0, 0, ken_length])\n    union() {\n        cylinder(h = 25, d1 = handle_d, d2 = 6, $fn = 32);\n        translate([0, 0, 25])\n            cylinder(h = 3, d = 6, $fn = 32);\n    }\n    \n    // Sara (cup)\n    translate([0, handle_d/2 + 15, ken_length - 25])\n    rotate([0, 90, 0])\n    difference() {\n        // Main cup\n        cylinder(h = 15, d = sara_d, $fn = 64);\n        // Inner cavity\n        translate([0, 0, wall_t])\n            cylinder(h = 15 - wall_t, d = sara_d - wall_t*2, $fn = 64);\n        // Hole for string\n        translate([0, 0, -1])\n            cylinder(h = 17, d = string_hole_d, $fn = 16);\n    }\n    \n    // Base cup\n    translate([0, handle_d/2 + 15, ken_length/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 12, d = sara_d * 0.85, $fn = 64);\n        translate([0, 0, wall_t])\n            cylinder(h = 12 - wall_t, d = sara_d * 0.85 - wall_t*2, $fn = 64);\n    }\n    \n    // Small cup\n    translate([0, -handle_d/2 - 15, ken_length - 35])\n    rotate([0, -90, 0])\n    difference() {\n        cylinder(h = 10, d = sara_d * 0.7, $fn = 64);\n        translate([0, 0, wall_t])\n            cylinder(h = 10 - wall_t, d = sara_d * 0.7 - wall_t*2, $fn = 64);\n    }\n}\n\n// Module for the tama (ball)\nmodule tama() {\n    difference() {\n        // Main ball\n        sphere(d = ball_d, $fn = 64);\n        // Hollow interior\n        sphere(d = ball_d - wall_t*2, $fn = 64);\n        \n        // String hole\n        translate([0, 0, ball_d/2])\n            cylinder(h = ball_d, d = string_hole_d, $fn = 16);\n        \n        // Bevel edge for string hole\n        translate([0, 0, ball_d/2 - 2])\n            cylinder(h = 4, d1 = string_hole_d + 3, d2 = string_hole_d, $fn = 16);\n    }\n    \n    // Paint line\n    translate([0, 0, -ball_d/2 + 3])\n    rotate([90, 0, 0])\n    cylinder(h = ball_d, d = ball_d - 2, $fn = 64);\n}\n\n// Module for string\nmodule string() {\n    // Simplified string representation\n    color(\"red\")\n    translate([0, 0, ken_length])\n    rotate([0, 90, 0])\n    cylinder(h = 40, d = string_d, $fn = 8);\n}\n\n// Assembly\ntranslate([0, 0, 0])\nken();\n\ntranslate([0, 60, ken_length + 20])\ntama();\n\n// String connection\ntranslate([0, handle_d/2 + 15, ken_length - 10])\nrotate([0, 90, 0])\nstring();",
    "renders": true
  },
  {
    "toy": "hackysack",
    "openscad_code": "// Hackysack / Footbag - Realistic Medium Complexity\n// 3D printable hackysack with realistic panels and stitching details\n\n// Overall dimensions\nhackysack_diameter = 60;  // 60mm diameter fits well in hand\npanel_thickness = 2.5;    // 2.5mm wall thickness for 3D printing\nstitch_depth = 0.5;       // Depth of stitched seams\nseam_width = 1.5;         // Width of seam lines\n\n// Create main hackysack body using pentagonal/hexagonal panels\nmodule hackysack_body() {\n    union() {\n        // Base sphere for overall shape\n        difference() {\n            sphere(d = hackysack_diameter);\n            \n            // Hollow out the inside for fill material\n            sphere(d = hackysack_diameter - (2 * panel_thickness));\n        }\n        \n        // Add panel seams using difference operations\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([0, hackysack_diameter/2 - 2, 0])\n            difference() {\n                // Main seam groove\n                cube([seam_width, 4, hackysack_diameter], center = true);\n                \n                // Stitching details along seam\n                for (j = [-5:5]) {\n                    translate([0, j * 3, 0])\n                    cube([seam_width + 0.5, 0.5, stitch_depth * 2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Add fill port for adding beans/rice\nmodule fill_port() {\n    difference() {\n        // Port base - small cylinder\n        translate([0, 0, hackysack_diameter/2 - 1])\n        cylinder(h = 3, r = 6, $fn = 20);\n        \n        // Port hole\n        translate([0, 0, hackysack_diameter/2 - 0.5])\n        cylinder(h = 5, r = 4, $fn = 20);\n    }\n    \n    // Port cap with grip ridges\n    translate([0, 0, hackysack_diameter/2 + 2])\n    difference() {\n        cylinder(h = 4, r = 6.5, $fn = 20);\n        cylinder(h = 5, r = 4.5, $fn = 20);\n    }\n    \n    // Grip ridges on cap\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([5, 0, hackysack_diameter/2 + 2])\n        cube([1, 0.5, 4], center = true);\n    }\n}\n\n// Add wear patches at common contact points\nmodule wear_patches() {\n    // Top wear patch\n    translate([0, 0, hackysack_diameter/2 - panel_thickness/2])\n    scale([1, 1, 0.3])\n    sphere(d = 20);\n    \n    // Bottom wear patch\n    translate([0, 0, -hackysack_diameter/2 + panel_thickness/2])\n    scale([1, 1, 0.3])\n    sphere(d = 20);\n    \n    // Side wear patches\n    rotate([0, 90, 0])\n    translate([0, 0, hackysack_diameter/2 - panel_thickness/2])\n    scale([1, 1, 0.3])\n    sphere(d = 15);\n    \n    rotate([90, 0, 0])\n    translate([0, 0, hackysack_diameter/2 - panel_thickness/2])\n    scale([1, 1, 0.3])\n    sphere(d = 15);\n}\n\n// Add brand/logo area\nmodule logo_area() {\n    translate([0, 0, hackysack_diameter/2 - 1])\n    difference() {\n        // Raised logo platform\n        cylinder(h = 0.5, r = 8, $fn = 30);\n        \n        // Recessed logo space\n        cylinder(h = 0.3, r = 6.5, $fn = 30);\n    }\n}\n\n// Main assembly\nunion() {\n    hackysack_body();\n    fill_port();\n    wear_patches();\n    logo_area();\n}",
    "renders": true
  },
  {
    "toy": "footbag",
    "openscad_code": "// Realistic footbag (hacky sack) toy with medium complexity\n// Diameter ~70mm, printable with 2mm wall thickness\n\n// Parameters\ndiameter = 70;\nwall_thickness = 2;\npanel_count = 6;\npanel_depth = 3;\n\nmodule footbag() {\n    // Main body - hollow sphere\n    difference() {\n        sphere(d=diameter);\n        sphere(d=diameter - 2*wall_thickness);\n    }\n    \n    // Hexagonal panels stitched together\n    for (i = [0:panel_count-1]) {\n        rotate([0, 0, i * 360/panel_count]) {\n            // Panel stitching lines\n            translate([0, 0, diameter/2 - panel_depth]) {\n                difference() {\n                    cylinder(h=panel_depth*2, d=diameter/3, $fn=6);\n                    cylinder(h=panel_depth*2+1, d=diameter/3 - 2*wall_thickness, $fn=6);\n                }\n            }\n            \n            // Cross-stitching detail\n            rotate([90, 0, 0]) {\n                translate([diameter/4, 0, 0]) {\n                    scale([1, 0.2, 0.2]) {\n                        sphere(d=wall_thickness);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Filling port (like a real footbag)\n    translate([0, 0, diameter/2 - 3]) {\n        difference() {\n            cylinder(h=4, d=8, $fn=20);\n            cylinder(h=5, d=4, $fn=20);\n        }\n    }\n    \n    // Seam details around equator\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10]) {\n            translate([0, diameter/2 - 1, 0]) {\n                rotate([90, 0, 0]) {\n                    scale([1, 1, 0.5]) {\n                        sphere(d=3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bottom wear pad (extra thickness for durability)\n    translate([0, 0, -diameter/2 + 1]) {\n        difference() {\n            cylinder(h=3, d=diameter/4);\n            cylinder(h=4, d=diameter/4 - 2*wall_thickness);\n        }\n    }\n    \n    // Top logo area\n    translate([0, 0, diameter/2 - 2]) {\n        rotate([0, 180, 0]) {\n            linear_extrude(height=1) {\n                text(\"FB\", size=8, halign=\"center\", valign=\"center\");\n            }\n        }\n    }\n}\n\n// Render the footbag\nfootbag();",
    "renders": true
  },
  {
    "toy": "beanbag",
    "openscad_code": "// Realistic Beanbag Toy Chair\n// Dimensions: 100mm x 100mm x 85mm\n\nmodule beanbag_body() {\n    // Main beanbag cushion - slightly flattened sphere\n    translate([0, 0, 35]) {\n        scale([1, 1, 0.7])\n            sphere(d=90, $fn=50);\n    }\n}\n\nmodule backrest() {\n    // Backrest cushion - elongated sphere\n    translate([0, -35, 55]) {\n        rotate([75, 0, 0]) {\n            scale([0.9, 1, 0.6])\n                sphere(d=80, $fn=40);\n        }\n    }\n}\n\nmodule seam_lines() {\n    // Horizontal seam around center\n    rotate_extrude(angle=360, $fn=100) {\n        translate([45, 0, 0]) {\n            square([2, 1]);\n        }\n    }\n    \n    // Vertical seams at 4 positions\n    for(i = [0:90:359]) {\n        rotate([0, 0, i]) {\n            linear_extrude(height=2) {\n                difference() {\n                    circle(d=90, $fn=50);\n                    circle(d=86, $fn=50);\n                }\n            }\n        }\n    }\n}\n\nmodule stitching_detail() {\n    // Stitching along seams - small spheres as stitches\n    for(i = [0:10:350]) {\n        rotate([0, 0, i]) {\n            translate([45, 0, 35]) {\n                sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\nmodule bean_filling_texture() {\n    // Subtle surface texture to suggest filled fabric\n    for(x = [-40:15:40]) {\n        for(y = [-40:15:40]) {\n            translate([x, y, 35 + 35*cos(x/20)*sin(y/20)]) {\n                sphere(d=2, $fn=6);\n            }\n        }\n    }\n}\n\nmodule base_support() {\n    // Flattened bottom for stability\n    difference() {\n        cylinder(h=5, d=85, $fn=50);\n        cylinder(h=6, d=83, $fn=50);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollow shell construction\n    difference() {\n        union() {\n            beanbag_body();\n            backrest();\n            base_support();\n        }\n        \n        // Inner hollow space\n        translate([0, 0, 37]) {\n            scale([1, 1, 0.7])\n                sphere(d=84, $fn=50);\n        }\n        \n        translate([0, -35, 57]) {\n            rotate([75, 0, 0]) {\n                scale([0.9, 1, 0.6])\n                    sphere(d=74, $fn=40);\n            }\n        }\n    }\n    \n    // External details\n    seam_lines();\n    stitching_detail();\n    bean_filling_texture();\n}",
    "renders": true
  },
  {
    "toy": "cornhole",
    "openscad_code": "// Toy Cornhole Board - Realistic Style - Medium Complexity\n// Overall dimensions: 120mm x 60mm x 25mm (scaled down for toy)\n\n$fn = 32;\n\n// Main parameters\nboard_length = 120;\nboard_width = 60;\nboard_thickness = 4;\nhole_diameter = 30;\nhole_offset = 20;\nleg_length = 20;\nleg_thickness = 3;\nframe_thickness = 2;\n\n// Main board surface\nmodule board_surface() {\n    difference() {\n        // Main board\n        cube([board_length, board_width, board_thickness], center=true);\n        \n        // Center hole\n        translate([0, 0, board_thickness/2 + 0.1])\n        cylinder(h=board_thickness + 0.2, d=hole_diameter, center=true);\n        \n        // Rounded front edge\n        translate([board_length/2 - 2, 0, board_thickness/2])\n        cube([4, board_width, board_thickness], center=true);\n    }\n}\n\n// Side frame pieces\nmodule side_frame() {\n    difference() {\n        // Outer frame\n        cube([board_length, frame_thickness, board_thickness + 4], center=true);\n        \n        // Inner groove for board\n        translate([0, 0, 2])\n        cube([board_length - 4, frame_thickness + 0.2, board_thickness], center=true);\n    }\n}\n\n// End frame pieces\nmodule end_frame() {\n    difference() {\n        // Outer frame\n        cube([frame_thickness, board_width, board_thickness + 4], center=true);\n        \n        // Inner groove for board\n        translate([0, 0, 2])\n        cube([frame_thickness + 0.2, board_width - 4, board_thickness], center=true);\n    }\n}\n\n// Support legs\nmodule leg() {\n    difference() {\n        // Main leg\n        translate([0, 0, -leg_length/2])\n        cube([leg_thickness, leg_thickness, leg_length], center=true);\n        \n        // Chamfer bottom\n        translate([0, 0, -leg_length + 1])\n        cube([leg_thickness + 0.2, leg_thickness + 0.2, 2], center=true);\n        \n        // Cut angle for stability\n        rotate([45, 0, 0])\n        translate([0, 0, -leg_length/2 - 2])\n        cube([leg_thickness + 2, leg_thickness + 2, leg_length], center=true);\n    }\n}\n\n// Hinge detail for folding legs\nmodule hinge() {\n    cylinder(h=leg_thickness + 2, d=leg_thickness + 1, center=true);\n}\n\n// Handle cutout on side\nmodule handle() {\n    translate([-board_length/2 - 1, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=frame_thickness + 0.2, d=8, center=true);\n}\n\n// Assembly\nmodule cornhole_board() {\n    // Main board assembly\n    translate([0, 0, board_thickness/2 + 2])\n    board_surface();\n    \n    // Frame pieces\n    translate([0, board_width/2 + frame_thickness/2, 0])\n    side_frame();\n    \n    translate([0, -board_width/2 - frame_thickness/2, 0])\n    side_frame();\n    \n    translate([board_length/2 + frame_thickness/2, 0, 0])\n    end_frame();\n    \n    translate([-board_length/2 - frame_thickness/2, 0, 0])\n    difference() {\n        end_frame();\n        handle();\n    }\n    \n    // Folding legs - back corners\n    translate([board_length/2 - 10, board_width/2 - 5, -leg_length/2 + 2])\n    union() {\n        hinge();\n        leg();\n    }\n    \n    translate([board_length/2 - 10, -board_width/2 + 5, -leg_length/2 + 2])\n    union() {\n        hinge();\n        leg();\n    }\n    \n    // Surface texture - painted lines\n    translate([0, 0, board_thickness + 4.1])\n    cube([board_length - 20, 1, 0.5], center=true);\n    \n    translate([0, 0, board_thickness + 4.1])\n    cube([1, board_width - 20, 0.5], center=true);\n}\n\n// Render the complete toy cornhole\ncornhole_board();",
    "renders": true
  },
  {
    "toy": "ringtoss",
    "openscad_code": "// Ringtoss Toy Set - Realistic Style\n// Medium complexity 3D printable ringtoss game base and rings\n\n// Base parameters\nbase_diameter = 100;\nbase_height = 8;\npost_height = 60;\npost_diameter = 6;\n\n// Ring parameters\nring_outer_diameter = 25;\nring_inner_diameter = 20;\nring_thickness = 3;\nnum_rings = 5;\n\n// Structural details\nfoot_width = 30;\nfoot_thickness = 4;\nrib_thickness = 2;\n\nmodule base_foot() {\n    // Create one stabilizing foot\n    translate([-foot_width/2, -base_diameter/2 - foot_thickness/2, 0])\n        cube([foot_width, foot_thickness, base_height]);\n}\n\nmodule base_structure() {\n    // Main circular base\n    cylinder(h=base_height, d=base_diameter, $fn=64);\n    \n    // Add stabilizing feet\n    for (i = [0:2]) {\n        rotate([0, 0, i*120])\n            base_foot();\n    }\n    \n    // Add ribbing for strength\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([0, base_diameter/2 - rib_thickness, 0])\n                cube([rib_thickness, base_diameter/4, base_height]);\n    }\n}\n\nmodule target_post() {\n    // Center post\n    cylinder(h=post_height, d=post_diameter, $fn=32);\n    \n    // Post base collar\n    translate([0, 0, 0])\n        cylinder(h=4, d=post_diameter+4, $fn=32);\n    \n    // Pointed top for easier ring catching\n    translate([0, 0, post_height])\n        cylinder(h=8, d1=post_diameter, d2=0, $fn=32);\n}\n\nmodule ring(index) {\n    // Create a single ring with slight offset for printing\n    color([0.8, 0.2, 0.2])  // Red rings\n    difference() {\n        cylinder(h=ring_thickness, d=ring_outer_diameter, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=ring_thickness+2, d=ring_inner_diameter, $fn=64);\n    }\n}\n\n// Assemble the toy\n// Base assembly\nunion() {\n    color([0.1, 0.4, 0.1])  // Green base\n    base_structure();\n    \n    // Center post\n    translate([0, 0, base_height])\n        color([0.8, 0.8, 0.8])  // Gray post\n        target_post();\n    \n    // Additional scoring posts\n    translate([25, 0, base_height])\n        color([0.2, 0.2, 0.8])  // Blue post\n        cylinder(h=45, d=post_diameter, $fn=32);\n    \n    translate([-25, 0, base_height])\n        color([0.8, 0.8, 0.2])  // Yellow post\n        cylinder(h=35, d=post_diameter, $fn=32);\n}\n\n// Rings positioned for display\nfor (i = [0:num_rings-1]) {\n    translate([-40 + i*15, -40, base_height + 5])\n        rotate([0, 90, 0])\n            ring(i);\n}",
    "renders": true
  },
  {
    "toy": "quoits",
    "openscad_code": "// Quoits Toy Set - Realistic Style\n// A complete quoits game with 5 rope rings and a post with base\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main dimensions\nbase_diameter = 80 * scale_factor;\nbase_height = 8 * scale_factor;\npost_diameter = 12 * scale_factor;\npost_height = 120 * scale_factor;\nring_outer_diameter = 35 * scale_factor;\nring_inner_diameter = 20 * scale_factor;\nring_thickness = 8 * scale_factor;\nrope_coil_diameter = 3 * scale_factor;\n\n// Render entire set\nunion() {\n    // Base and post assembly\n    translate([0, 0, 0])\n        quoits_post_assembly();\n    \n    // Five rope rings in starting positions\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([45, 0, base_height + post_height/2 + i * 5])\n                rope_ring();\n    }\n}\n\n// Post assembly with base\nmodule quoits_post_assembly() {\n    union() {\n        // Weighted base\n        difference() {\n            // Main base cylinder\n            cylinder(h = base_height, d = base_diameter, $fn = 64);\n            \n            // Decorative groove around base\n            translate([0, 0, base_height/2])\n                cylinder(h = 2, d = base_diameter * 0.9, $fn = 64);\n        }\n        \n        // Base top detail\n        translate([0, 0, base_height])\n            cylinder(h = 2, d = post_diameter * 2, $fn = 32);\n        \n        // Main post\n        translate([0, 0, base_height])\n            cylinder(h = post_height, d = post_diameter, $fn = 32);\n        \n        // Post top detail\n        translate([0, 0, base_height + post_height])\n            sphere(d = post_diameter * 1.2, $fn = 32);\n    }\n}\n\n// Detailed rope ring with twisted texture\nmodule rope_ring() {\n    rotate([90, 0, 0]) {\n        difference() {\n            // Main ring body\n            torus(ring_outer_diameter/2, ring_thickness/2);\n            \n            // Hollow center\n            torus(ring_inner_diameter/2, ring_thickness/2 - 1);\n        }\n        \n        // Rope texture - twisted strands\n        for (strand = [0:2]) {\n            rotate([0, 0, strand * 120])\n                rope_strand();\n        }\n    }\n}\n\n// Helper module for torus shape\nmodule torus(major_radius, minor_radius) {\n    rotate_extrude($fn = 64) {\n        translate([major_radius, 0, 0])\n            circle(r = minor_radius, $fn = 32);\n    }\n}\n\n// Individual rope strand detail\nmodule rope_strand() {\n    // Create twisted rope appearance using multiple cylinders\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([ring_outer_diameter/2 - ring_thickness/2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = ring_thickness * 1.1, d = rope_coil_diameter, $fn = 8);\n    }\n}\n\n// Optional: Small pegs for ring storage\nmodule ring_pegs() {\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72 + 36])\n            translate([base_diameter/2 + 5, 0, base_height/2])\n                cylinder(h = 15, d = 5, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "toy": "bocce",
    "openscad_code": "// Bocce Ball Toy (Medium complexity)\n// Realistic style with toy characteristics\n\n// Main parameters\nball_diameter = 90;  // Standard bocce ball size for toy\nwall_thickness = 2;   // 3D printable walls\ndetail_level = 32;    // Smooth curves\n\n// Color definitions for rendering\nball_color = \"green\";\nstripe_color = \"white\";\n\n// Main ball body\nmodule bocce_ball_body() {\n    // Hollow sphere shell for material efficiency\n    difference() {\n        sphere(d = ball_diameter, $fn = detail_level);\n        sphere(d = ball_diameter - 2 * wall_thickness, $fn = detail_level);\n    }\n}\n\n// Traditional bocce ball stripes\nmodule stripes() {\n    // Three equatorial stripes typical on toy bocce balls\n    for (i = [0:2]) {\n        rotate([0, 90 * (i % 2), 120 * i]) {\n            // Stripe body\n            translate([0, 0, -wall_thickness]) {\n                difference() {\n                    // Main stripe ring\n                    cylinder(h = 2 * wall_thickness, \n                             r1 = ball_diameter/2, \n                             r2 = ball_diameter/2, \n                             center = true, \n                             $fn = detail_level);\n                    \n                    // Inner cutout for hollow effect\n                    cylinder(h = 3 * wall_thickness, \n                             r1 = ball_diameter/2 - wall_thickness, \n                             r2 = ball_diameter/2 - wall_thickness, \n                             center = true, \n                             $fn = detail_level);\n                }\n            }\n        }\n    }\n}\n\n// Toy-specific grip texture pattern\nmodule grip_pattern() {\n    // Small bumps for better grip in toy version\n    for (i = [0:15]) {\n        rotate([0, 0, 22.5 * i]) {\n            for (j = [0:3]) {\n                rotate([90, 0, 90 * j]) {\n                    translate([0, ball_diameter/2 - wall_thickness, 0]) {\n                        // Grip dimples\n                        sphere(d = 4, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly points for toy construction\nmodule assembly_pins() {\n    // Pin holes for toy assembly\n    translate([0, 0, ball_diameter/2 - wall_thickness]) {\n        cylinder(h = wall_thickness * 2, \n                 r = wall_thickness/2, \n                 center = true, \n                 $fn = 8);\n    }\n    \n    translate([0, 0, -(ball_diameter/2 - wall_thickness)]) {\n        cylinder(h = wall_thickness * 2, \n                 r = wall_thickness/2, \n                 center = true, \n                 $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main ball structure\n    bocce_ball_body();\n    \n    // Apply toy-specific features\n    children();\n}\n\n// Color the ball\ncolor(\"green\") {\n    bocce_ball_body();\n}\n\n// Add stripes\ncolor(\"white\") {\n    stripes();\n}\n\n// Add grip pattern\ngrip_pattern();\n\n// Add assembly features\nassembly_pins();\n\n// Optional: Add toy logo area\ntranslate([ball_diameter/2 - wall_thickness, 0, 0]) {\n    rotate([0, 90, 0]) {\n        cylinder(h = wall_thickness, \n                 r = 8, \n                 center = true, \n                 $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "toy": "boules",
    "openscad_code": "// Boules (Petanque) Toy Set - Realistic Style\n// Medium complexity model with proper toy proportions\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\nball_diameter = 72;  // Standard petanque ball size\nwall_thickness = 2.2;  // Printable wall thickness\ngroove_depth = 1.5;\ngroove_width = 3;\n\n// Material colors\ncolor_plastic = \"#2F4F4F\";  // Dark gray plastic\ncolor_metal = \"#B87333\";    // Bronze/metallic look\n\n// Main boule ball\nmodule boule_ball() {\n    // Hollow sphere with wall thickness\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness*2);\n    }\n    \n    // Add decorative grooves for grip\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 0, -ball_diameter/2]) {\n                difference() {\n                    cylinder(h = ball_diameter, d = ball_diameter - groove_depth*2, center = true);\n                    cylinder(h = ball_diameter + 1, d = ball_diameter - groove_depth*2 - groove_width, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Small jack (cochonnet)\nmodule jack() {\n    // Smaller target ball\n    color(\"yellow\") {\n        sphere(d = 30);\n    }\n    \n    // Add red stripe detail\n    color(\"red\") {\n        translate([0, 0, -15]) {\n            cylinder(h = 3, d = 30.1, center = true);\n        }\n    }\n}\n\n// Measuring string with beads\nmodule measuring_string() {\n    // String holder\n    translate([0, 0, -5]) {\n        cylinder(h = 10, d = 15);\n    }\n    \n    // String wrapped around\n    for (i = [0:4]) {\n        rotate([90, 0, i * 72]) {\n            translate([7.5, 0, 0]) {\n                cylinder(h = 60, d = 1.5);\n            }\n        }\n    }\n    \n    // Beads on string\n    for (i = [0:3]) {\n        translate([0, 15 + i * 15, 0]) {\n            sphere(d = 5);\n        }\n    }\n}\n\n// Carrying case handle\nmodule handle() {\n    // Main handle grip\n    translate([0, 0, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 80, d = 12);\n                cylinder(h = 82, d = 8);\n            }\n        }\n    }\n    \n    // Handle supports\n    for (offset = [-35, 35]) {\n        translate([offset, 0, 0]) {\n            cylinder(h = 15, d = 8);\n        }\n    }\n}\n\n// Assemble complete toy set\nmodule boules_toy_set() {\n    // First boule\n    translate([-80, 0, 0]) {\n        color(color_plastic) boule_ball();\n    }\n    \n    // Second boule\n    translate([0, 0, 0]) {\n        color(color_metal) boule_ball();\n    }\n    \n    // Third boule (slightly different)\n    translate([80, 0, 0]) {\n        color(\"#1C1C1C\") boule_ball();\n    }\n    \n    // Jack ball\n    translate([0, -60, 0]) {\n        jack();\n    }\n    \n    // Measuring string\n    translate([0, 60, 0]) {\n        measuring_string();\n    }\n    \n    // Handle for carrying\n    translate([0, 0, 50]) {\n        handle();\n    }\n}\n\n// Render the complete set\nboules_toy_set();",
    "renders": true
  },
  {
    "toy": "petanque",
    "openscad_code": "// Petanque ball toy with realistic proportions and 3D-printable features\n// Overall size: 75mm diameter ball with 3mm thick shell for toy safety\n\n$fn = 64; // Smooth curves for realistic appearance\n\n// Main parameters\nball_diameter = 75;\nwall_thickness = 3;\ngroove_depth = 1.5;\ngroove_width = 6;\nnum_grooves = 6;\n\n// Calculate internal diameter for hollow ball\ninner_diameter = ball_diameter - (2 * wall_thickness);\n\n// Hollow petanque ball with grooves\nmodule petanque_ball() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = inner_diameter);\n        \n        // Cut grooves around the ball\n        for (i = [0:num_grooves-1]) {\n            rotate([0, 0, i * (360/num_grooves)]) {\n                // Create groove using difference operation\n                translate([0, 0, -ball_diameter/2 - groove_depth]) {\n                    cylinder(h = ball_diameter + 2*groove_depth, \n                            r1 = groove_width/2, \n                            r2 = groove_width/2, \n                            center = true);\n                }\n            }\n        }\n    }\n}\n\n// Realistic toy markings - concentric rings on poles\nmodule toy_markings() {\n    // Top marking\n    translate([0, 0, ball_diameter/2 - 1]) {\n        difference() {\n            cylinder(h = 2, r1 = 8, r2 = 8);\n            cylinder(h = 3, r1 = 6, r2 = 6);\n        }\n    }\n    \n    // Bottom marking\n    translate([0, 0, -ball_diameter/2 + 1]) {\n        difference() {\n            cylinder(h = 2, r1 = 8, r2 = 8);\n            cylinder(h = 3, r1 = 6, r2 = 6);\n        }\n    }\n}\n\n// Toy safety features - rounded edges and internal support structure\nmodule safety_features() {\n    // Internal support ribs for structural integrity\n    for (i = [0:3]) {\n        rotate([0, 90 * i, 0]) {\n            translate([0, 0, 0]) {\n                scale([1, 0.3, 1]) {\n                    sphere(d = inner_diameter - 2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly of complete petanque toy\nunion() {\n    // Main ball structure\n    petanque_ball();\n    \n    // Toy markings for realistic appearance\n    toy_markings();\n    \n    // Internal safety features\n    %safety_features();\n}\n\n// Optional: Add small alignment nub for string attachment\ntranslate([0, 0, ball_diameter/2 + 2]) {\n    cylinder(h = 4, r1 = 2, r2 = 1.5);\n}",
    "renders": true
  },
  {
    "toy": "croquet",
    "openscad_code": "// Croquet Toy Set - Medium Complexity Realistic Style\n// Overall dimensions: ~120mm wide, ~80mm deep, ~50mm tall\n\n// Color definitions for rendering\ncolor_wood = \"#8B4513\";\ncolor_red = \"#DC143C\";\ncolor_blue = \"#4169E1\";\ncolor_yellow = \"#FFD700\";\ncolor_green = \"#228B22\";\n\nmodule croquet_mallet() {\n    // Mallet head - 35mm wide, 25mm tall, 25mm deep\n    translate([0, 0, 0]) {\n        difference() {\n            // Main head block\n            color(color_wood) cube([35, 25, 25], center = true);\n            \n            // Center hole for handle\n            rotate([90, 0, 0]) \n                cylinder(h = 35.1, d = 8, center = true);\n            \n            // Rounded edges on striking faces\n            translate([17.5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 25.1, d = 25, center = true);\n            translate([-17.5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 25.1, d = 25, center = true);\n        }\n    }\n    \n    // Handle - 60mm long, 8mm diameter\n    translate([0, 0, 42.5]) {\n        // Tapered handle\n        cylinder(h = 60, d1 = 8, d2 = 7, center = false);\n        \n        // Grip rings\n        for(i = [1:5]) {\n            translate([0, 0, i * 10])\n                cylinder(h = 2, d = 9, center = false);\n        }\n    }\n}\n\nmodule croquet_ball(color_name) {\n    // Ball - 25mm diameter\n    color(color_name) sphere(d = 25, $fn = 32);\n    \n    // Surface texture lines\n    for(i = [0:6]) {\n        rotate([0, 0, i * 60])\n            rotate([90, 0, 0])\n                cylinder(h = 25.1, d = 0.5, center = true);\n    }\n}\n\nmodule croquet_wicket() {\n    // Base plate - 40mm wide, 5mm thick, 15mm deep\n    translate([0, 0, 2.5]) {\n        color(color_green) cube([40, 15, 5], center = true);\n        \n        // Decorative stripes\n        for(i = [-15:5:15]) {\n            translate([i, 0, 2.6])\n                color(color_yellow) cube([2, 15, 0.5], center = true);\n        }\n    }\n    \n    // Upright posts - 30mm tall, 5mm diameter\n    translate([-15, 0, 20]) {\n        color(color_green) cylinder(h = 30, d = 5, center = false);\n    }\n    translate([15, 0, 20]) {\n        color(color_green) cylinder(h = 30, d = 5, center = false);\n    }\n    \n    // Curved top\n    translate([0, 0, 35]) {\n        difference() {\n            // Main arch\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 30, center = true);\n            \n            // Hollow center\n            rotate([90, 0, 0])\n                cylinder(h = 30.1, d = 20, center = true);\n        }\n    }\n}\n\nmodule croquet_stake() {\n    // Main post - 50mm tall, 8mm diameter\n    color(color_wood) cylinder(h = 50, d = 8, center = false);\n    \n    // Tapered top\n    translate([0, 0, 50]) {\n        cylinder(h = 10, d1 = 8, d2 = 2, center = false);\n    }\n    \n    // Color bands\n    translate([0, 0, 10])\n        color(color_red) cylinder(h = 5, d = 10, center = false);\n    translate([0, 0, 20])\n        color(color_blue) cylinder(h = 5, d = 10, center = false);\n    translate([0, 0, 30])\n        color(color_yellow) cylinder(h = 5, d = 10, center = false);\n    translate([0, 0, 40])\n        color(color_green) cylinder(h = 5, d = 10, center = false);\n}\n\n// Assemble complete croquet toy set\n// Mallet\ntranslate([-60, 0, 0]) croquet_mallet();\n\n// Balls in starting positions\ntranslate([0, -20, 12.5]) croquet_ball(color_red);\ntranslate([0, 0, 12.5]) croquet_ball(color_blue);\ntranslate([0, 20, 12.5]) croquet_ball(color_yellow);\ntranslate([0, 40, 12.5]) croquet_ball(color_green);\n\n// Wickets\ntranslate([40, -30, 0]) croquet_wicket();\ntranslate([40, 0, 0]) rotate([0, 0, 45]) croquet_wicket();\ntranslate([40, 30, 0]) rotate([0, 0, 90]) croquet_wicket();\n\n// Finishing stake\ntranslate([70, 0, 0]) croquet_stake();",
    "renders": true
  },
  {
    "toy": "mallet",
    "openscad_code": "// Toy Mallet - Realistic Style, Medium Complexity\n// Overall length ~120mm, suitable for 3D printing\n\n// Parameters\nhandle_d = 12;\nhandle_h = 90;\nhead_w = 30;\nhead_h = 25;\nhead_d = 20;\nring_d = 14;\nring_h = 8;\npeg_d = 4;\npeg_h = 5;\nwall = 2;\n\n// Colors for visualization\n$fn = 32;\n\n// Handle with grip rings\nmodule handle() {\n    // Main handle shaft\n    cylinder(d=handle_d, h=handle_h, center=true);\n    \n    // Grip rings\n    for(i = [-1:1]) {\n        translate([0, 0, handle_h/2 - 10 + i*15])\n            cylinder(d=handle_d+3, h=3, center=true);\n    }\n    \n    // End cap\n    translate([0, 0, handle_h/2 - 3])\n        cylinder(d=handle_d+2, h=6, center=true);\n}\n\n// Mallet head with peg connection\nmodule head() {\n    // Main head - rectangular block\n    translate([0, 0, 0])\n        cube([head_w, head_d, head_h], center=true);\n    \n    // Rounded striking faces\n    translate([head_w/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=head_d, h=head_w/2, center=true);\n    \n    translate([-head_w/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=head_d, h=head_w/2, center=true);\n    \n    // Peg hole for handle connection\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=handle_d+1, h=head_d+2, center=true);\n}\n\n// Connection peg between handle and head\nmodule peg() {\n    // Main peg body\n    cylinder(d=peg_d, h=peg_h, center=true);\n    \n    // Flared ends\n    translate([0, 0, peg_h/2])\n        cylinder(d=peg_d+2, h=1, center=true);\n    translate([0, 0, -peg_h/2])\n        cylinder(d=peg_d+2, h=1, center=true);\n}\n\n// Safety ring around head connection\nmodule safety_ring() {\n    difference() {\n        cylinder(d=ring_d+wall, h=ring_h, center=true);\n        cylinder(d=ring_d, h=ring_h+0.1, center=true);\n    }\n}\n\n// Assemble the mallet\nunion() {\n    // Handle assembly\n    translate([0, 0, -handle_h/2 - head_h/2 - 2])\n        handle();\n    \n    // Connection peg\n    translate([0, 0, head_h/2 + 2])\n        rotate([90, 0, 0])\n            peg();\n    \n    // Head\n    translate([0, 0, head_h/2 + 2])\n        head();\n    \n    // Safety ring around connection\n    translate([0, 0, head_h/2 + 2])\n        safety_ring();\n}\n\n// Optional - add toy manufacturer logo on head\nmodule logo() {\n    translate([head_w/2+1, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height=1)\n                text(\"TOY\", size=5, halign=\"center\", valign=\"center\");\n}\n\n// Uncomment to add logo\n// translate([0, 0, head_h/2 + 2])\n//     logo();",
    "renders": true
  },
  {
    "toy": "wicket",
    "openscad_code": "// Toy Wicket - Realistic Style, Medium Complexity\n// Approximate dimensions: 120mm wide x 90mm tall x 60mm deep\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 0.8;\n\n// Main module\nmodule wicket_toy() {\n    // Base structure\n    difference() {\n        union() {\n            // Main frame assembly\n            frame_assembly();\n            \n            // Horizontal crossbar\n            crossbar();\n            \n            // Bails\n            bails();\n            \n            // Stumps top details\n            stumps_details();\n        }\n        \n        // Hollow out for 3D printing\n        hollow_out();\n    }\n}\n\n// Stumps and frame assembly\nmodule frame_assembly() {\n    // Left stump\n    translate([-45, 0, 0]) {\n        stump();\n    }\n    \n    // Middle stump\n    translate([0, 0, 0]) {\n        stump();\n    }\n    \n    // Right stump\n    translate([45, 0, 0]) {\n        stump();\n    }\n    \n    // Base platform\n    translate([0, -5, -2]) {\n        cube([120, 10, 4], center = true);\n    }\n}\n\n// Individual stump module\nmodule stump() {\n    // Main stump body\n    difference() {\n        cylinder(h = 85, r = 8);\n        // Groove for bails\n        translate([0, 0, 82]) {\n            cube([20, 4, 6], center = true);\n        }\n    }\n    \n    // Stump top dome\n    translate([0, 0, 85]) {\n        sphere(r = 8);\n    }\n    \n    // Stump base flare\n    translate([0, 0, -2]) {\n        cylinder(h = 4, r1 = 10, r2 = 8);\n    }\n}\n\n// Crossbar between stumps\nmodule crossbar() {\n    // Left to middle\n    translate([-22.5, 0, 65]) {\n        cube([45, 6, 4], center = true);\n    }\n    \n    // Middle to right\n    translate([22.5, 0, 65]) {\n        cube([45, 6, 4], center = true);\n    }\n}\n\n// Bails module\nmodule bails() {\n    // Left bail\n    translate([-22.5, 2, 84]) {\n        rotate([0, 0, 5]) {\n            bail();\n        }\n    }\n    \n    // Right bail\n    translate([22.5, 2, 84]) {\n        rotate([0, 0, -5]) {\n            bail();\n        }\n    }\n}\n\n// Individual bail\nmodule bail() {\n    union() {\n        // Main bail body\n        cube([40, 3, 3], center = true);\n        \n        // Bail ends\n        translate([-20, 0, 0]) {\n            sphere(r = 2);\n        }\n        translate([20, 0, 0]) {\n            sphere(r = 2);\n        }\n    }\n}\n\n// Stumps top decorative details\nmodule stumps_details() {\n    // Left stump rings\n    translate([-45, 0, 30]) {\n        stump_rings();\n    }\n    \n    // Middle stump rings\n    translate([0, 0, 30]) {\n        stump_rings();\n    }\n    \n    // Right stump rings\n    translate([45, 0, 30]) {\n        stump_rings();\n    }\n}\n\n// Decorative rings on stumps\nmodule stump_rings() {\n    for(i = [0:2]) {\n        translate([0, 0, i * 15]) {\n            difference() {\n                cylinder(h = 2, r = 9);\n                cylinder(h = 3, r = 7.5);\n            }\n        }\n    }\n}\n\n// Hollow out for 3D printing\nmodule hollow_out() {\n    // Main hollow\n    translate([0, 0, 40]) {\n        cube([110, 8, 80], center = true);\n    }\n    \n    // Stump hollows\n    for(x = [-45, 0, 45]) {\n        translate([x, 0, 40]) {\n            cylinder(h = 85, r = 5.5);\n        }\n    }\n}\n\n// Generate the wicket\nwicket_toy();",
    "renders": true
  },
  {
    "toy": "stick",
    "openscad_code": "// Realistic Stick Toy - Medium Complexity\n// Toy walking stick with classic knob handle and ferrule tip\n\n$fn = 32;  // Smooth curves for realism\n\n// Main parameters in mm\nstick_length = 120;\nstick_diameter = 8;\nhandle_height = 35;\nhandle_sphere_diameter = 22;\nferrule_height = 8;\nring_thickness = 2;\n\nmodule ferrule_tip() {\n    // Metal ferrule at bottom with proper wall thickness\n    difference() {\n        cylinder(h = ferrule_height, d1 = stick_diameter + 4, d2 = stick_diameter + 2);\n        translate([0, 0, -0.1])\n        cylinder(h = ferrule_height + 0.2, d1 = stick_diameter, d2 = stick_diameter - 2);\n    }\n    // Rubber tip detail\n    translate([0, 0, ferrule_height])\n    cylinder(h = 2, d = stick_diameter + 1);\n}\n\nmodule handle_knob() {\n    // Classic rounded knob handle\n    union() {\n        // Main sphere\n        sphere(d = handle_sphere_diameter);\n        \n        // Neck transition\n        translate([0, 0, -handle_sphere_diameter/2 - 2])\n        cylinder(h = 6, d1 = handle_sphere_diameter * 0.7, d2 = stick_diameter);\n        \n        // Decorative ring below sphere\n        translate([0, 0, -handle_sphere_diameter/2 - 2])\n        cylinder(h = ring_thickness, d = handle_sphere_diameter * 0.8);\n    }\n}\n\nmodule stick_shaft() {\n    // Main shaft with slight taper\n    cylinder(h = stick_length, d1 = stick_diameter, d2 = stick_diameter * 0.9);\n    \n    // Add subtle texture rings for grip\n    for(i = [1:10:stick_length-10]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h = 1, d = stick_diameter + 0.5);\n            cylinder(h = 1.2, d = stick_diameter);\n        }\n    }\n}\n\nmodule decorative_bands() {\n    // Upper decorative band below handle\n    translate([0, 0, stick_length - 15])\n    difference() {\n        cylinder(h = 3, d = stick_diameter + 3);\n        cylinder(h = 3.2, d = stick_diameter);\n    }\n    \n    // Lower decorative band\n    translate([0, 0, 20])\n    difference() {\n        cylinder(h = 3, d = stick_diameter + 2);\n        cylinder(h = 3.2, d = stick_diameter);\n    }\n}\n\n// Assemble the complete stick\nunion() {\n    // Main shaft\n    stick_shaft();\n    \n    // Handle at top\n    translate([0, 0, stick_length])\n    handle_knob();\n    \n    // Ferrule at bottom\n    translate([0, 0, 0])\n    ferrule_tip();\n    \n    // Decorative elements\n    decorative_bands();\n}",
    "renders": true
  },
  {
    "toy": "goalpost",
    "openscad_code": "// Toy Goalpost for 3D printing\n// Realistic style, medium complexity\n\n$fn=32;\n\n/*----------------------------------------\n  Dimensions (toy scale 1:100, ~120 mm)\n----------------------------------------*/\npost_diam = 6;            // 6 mm diameter posts\nwall_thk  = 2.5;          // printable wall thickness\ngoal_w    = 90;           // inner goal width\ngoal_h    = 50;           // inner goal height\ngoal_d    = 30;           // goal depth (net area)\nbase_h    = 6;            // base plate height\npeg_d     = 3.2;          // mounting peg\npeg_h     = 4;\n\n/*----------------------------------------\n  Main assembly\n----------------------------------------*/\nunion() {\n    // Ground base plate with pegs for modular fun\n    base_assembly();\n    \n    // Goal frame\n    translate([0,0,base_h])\n        goal_frame();\n    \n    // Back stays\n    translate([0,0,base_h])\n        back_stays();\n    \n    // Net supports\n    translate([0,0,base_h])\n        net_mesh();\n}\n\n/*----------------------------------------\n  Base with toy pegs\n----------------------------------------*/\nmodule base_assembly() {\n    difference() {\n        // Main plate\n        cube([goal_w + 2*post_diam + 20, goal_d + 2*post_diam + 20, base_h], center=true);\n        \n        // Rounded corners (for toy safety)\n        for(x=[-1,1])\n            for(y=[-1,1])\n                translate([x*(goal_w/2 + post_diam + 10), y*(goal_d/2 + post_diam + 10), base_h/2])\n                    rotate([90,0,0])\n                        cylinder(h=base_h*2, r=6, center=true);\n    }\n    \n    // Pegs for connecting other toys\n    for(pos = [[-25, -10], [25, -10], [-25, 10], [25, 10]]) {\n        translate([pos[0], pos[1], base_h])\n            cylinder(h=peg_h, d=peg_d);\n    }\n}\n\n/*----------------------------------------\n  Goal frame\n----------------------------------------*/\nmodule goal_frame() {\n    // Left post\n    post(-goal_w/2, 0, goal_h);\n    \n    // Right post\n    post(goal_w/2, 0, goal_h);\n    \n    // Crossbar\n    translate([0, 0, goal_h])\n        rotate([90,0,0])\n            cylinder(h=goal_w + post_diam, d=post_diam);\n}\n\n/*----------------------------------------\n  Single goal post with socket detail\n----------------------------------------*/\nmodule post(x, y, h) {\n    union() {\n        // Main pole\n        translate([x, y, 0])\n            cylinder(h=h, d=post_diam);\n        \n        // Toy socket ring (decorative)\n        translate([x, y, 0])\n            cylinder(h=wall_thk, d=post_diam + 2);\n    }\n}\n\n/*----------------------------------------\n  Back stays (triangular supports)\n----------------------------------------*/\nmodule back_stays() {\n    angle = atan(goal_h / (goal_d/2));\n    \n    // Left stay\n    translate([-goal_w/2 - post_diam/2, 0, 0])\n        stay(angle);\n    \n    // Right stay\n    translate([goal_w/2 + post_diam/2, 0, 0])\n        mirror([1,0,0])\n            stay(angle);\n}\n\nmodule stay(angle) {\n    // Diagonal strut\n    rotate([0,-angle,0])\n        translate([-post_diam/2, 0, 0])\n            cube([post_diam, post_diam, goal_h / sin(angle)]);\n    \n    // Ground foot\n    translate([0, -goal_d/2 - post_diam/2, 0])\n        cube([post_diam, post_diam, wall_thk]);\n}\n\n/*----------------------------------------\n  Toy net mesh (simplified diamond pattern)\n----------------------------------------*/\nmodule net_mesh() {\n    net_thk = 1.2;\n    \n    // Vertical cords\n    for(x=[-goal_w/2:4:goal_w/2])\n        translate([x, 0, 0])\n            cube([net_thk, goal_d, goal_h]);\n    \n    // Horizontal cords\n    for(z=[2:3.5:goal_h-2])\n        translate([0, 0, z])\n            rotate([90,0,0])\n                cylinder(h=goal_d, d=net_thk);\n    \n    // Top cross cords\n    for(x=[-goal_w/2:4:goal_w/2])\n        translate([x, -goal_d/2, goal_h/2])\n            rotate([0,90,atan2(goal_h, goal_d)])\n                cylinder(h=sqrt(goal_h*goal_h + (goal_d/2)*(goal_d/2)), d=net_thk);\n}",
    "renders": true
  },
  {
    "toy": "backboard",
    "openscad_code": "// Toy backboard for miniature basketball hoop\n// Overall dimensions: 120mm wide x 80mm tall x 12mm deep\n\nmodule backboard() {\n    // Main backboard panel with rounded edges\n    difference() {\n        // Main rectangular panel\n        translate([-60, -40, 0])\n            cube([120, 80, 10]);\n        \n        // Rounded corners on front face\n        translate([0, 0, 10])\n            cylinder(h=10, r=5, $fn=20);\n        translate([0, 0, 10])\n            mirror([1, 0, 0]) cylinder(h=10, r=5, $fn=20);\n        translate([0, 0, 10])\n            mirror([0, 1, 0]) cylinder(h=10, r=5, $fn=20);\n        translate([0, 0, 10])\n            mirror([1, 1, 0]) cylinder(h=10, r=5, $fn=20);\n        \n        // Cut rounded edges\n        translate([-55, -35, 0])\n            cube([110, 70, 12]);\n    }\n}\n\nmodule rim_mount() {\n    // Mounting bracket for basketball rim\n    difference() {\n        // Rectangular bracket\n        translate([-15, -30, 10])\n            cube([30, 8, 15]);\n        \n        // Screw holes for rim attachment\n        for(x = [-10, 10]) {\n            translate([x, -26, 12])\n                cylinder(h=15, r=2, $fn=12);\n        }\n    }\n}\n\nmodule rear_bracing() {\n    // Structural support triangles on back\n    for(x = [-40, 40]) {\n        translate([x, -35, 0])\n            rotate([0, 0, 90])\n            linear_extrude(height=2)\n                polygon(points=[[0,0], [20,0], [0,20]]);\n    }\n}\n\nmodule mounting_holes() {\n    // Keyhole mounting slots for wall attachment\n    for(y = [-25, 25]) {\n        translate([0, y, -1])\n            cylinder(h=12, r=8, $fn=20);\n        translate([0, y, -1])\n            cylinder(h=4, r=3, $fn=20);\n    }\n}\n\nmodule scoreboard() {\n    // Miniature electronic scoreboard detail\n    difference() {\n        translate([-25, 15, 10])\n            cube([50, 15, 5]);\n        \n        // Display area\n        translate([-20, 18, 15])\n            cube([40, 9, 1]);\n        \n        // Control buttons\n        for(x = [-15, -5, 5, 15]) {\n            translate([x, 20, 15.5])\n                cylinder(h=1, r=1.5, $fn=8);\n        }\n    }\n}\n\nmodule decoration_lines() {\n    // Painted border lines detail\n    color(\"red\")\n    for(offset = [0, 5, 10]) {\n        translate([-55+offset, -35+offset, 10.1])\n            cube([110-2*offset, 2, 1]);\n        translate([-55+offset, 33-offset, 10.1])\n            cube([110-2*offset, 2, 1]);\n        translate([-55+offset, -35+offset, 10.1])\n            cube([2, 70-2*offset, 1]);\n        translate([53-offset, -35+offset, 10.1])\n            cube([2, 70-2*offset, 1]);\n    }\n}\n\nunion() {\n    backboard();\n    rim_mount();\n    scoreboard();\n    \n    // Add rear structural elements\n    translate([0, 0, -2])\n        rear_bracing();\n    \n    // Create mounting system\n    difference() {\n        translate([0, 0, 0])\n            backboard();\n        mounting_holes();\n    }\n    \n    // Decorative elements\n    decoration_lines();\n}",
    "renders": true
  },
  {
    "toy": "rim",
    "openscad_code": "// Toy Rim - Medium Complexity\n// Realistic toy-style rim with structural details and toy characteristics\n\n// Overall scale\nscale_factor = 0.8;\n\n// Main rim dimensions\nrim_diameter = 80 * scale_factor;\nrim_width = 30 * scale_factor;\nrim_thickness = 3 * scale_factor;\n\n// Spoke details\nspoke_count = 6;\nspoke_width = 4 * scale_factor;\nspoke_thickness = 2.5 * scale_factor;\n\n// Hub details\nhub_diameter = 20 * scale_factor;\nhub_length = 25 * scale_factor;\nhub_hole_diameter = 8 * scale_factor;\n\n// Tire details\ntire_width = 12 * scale_factor;\ntire_thickness = 8 * scale_factor;\n\n// Toy connector peg\npeg_diameter = 5 * scale_factor;\npeg_length = 8 * scale_factor;\n\nmodule rim_tire() {\n    // Main tire body\n    difference() {\n        cylinder(h = tire_width, d = rim_diameter + tire_thickness*2, center = true);\n        cylinder(h = tire_width + 2, d = rim_diameter, center = true);\n    }\n    \n    // Tire tread pattern\n    for (i = [0:15]) {\n        rotate([0, 0, i * 360/16]) {\n            translate([rim_diameter/2 + tire_thickness/2, 0, 0])\n                cube([tire_thickness, 2, tire_width], center = true);\n        }\n    }\n}\n\nmodule rim_spokes() {\n    // Central hub\n    difference() {\n        cylinder(h = hub_length, d = hub_diameter, center = true);\n        cylinder(h = hub_length + 2, d = hub_hole_diameter, center = true);\n    }\n    \n    // Spokes\n    for (i = [0:spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count + 360/spoke_count/2]) {\n            // Main spoke\n            translate([rim_diameter/2 - spoke_width - hub_diameter/2, 0, 0])\n                cube([rim_diameter/2 - hub_diameter/2 - spoke_width, spoke_width, spoke_thickness], center = true);\n            \n            // Spoke reinforcement\n            translate([rim_diameter/2 - spoke_width*2 - hub_diameter/2, 0, 0])\n                cube([spoke_width, spoke_width*1.5, spoke_thickness], center = true);\n        }\n    }\n    \n    // Inner rim ring\n    difference() {\n        cylinder(h = rim_width - 4, d = rim_diameter - rim_thickness*2, center = true);\n        cylinder(h = rim_width - 2, d = rim_diameter - rim_thickness*4, center = true);\n    }\n}\n\nmodule rim_outer() {\n    // Outer rim structure\n    difference() {\n        cylinder(h = rim_width, d = rim_diameter, center = true);\n        cylinder(h = rim_width + 2, d = rim_diameter - rim_thickness*2, center = true);\n    }\n    \n    // Mounting holes for toy connectors\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([rim_diameter/2 - rim_thickness, 0, rim_width/2 - 2])\n                cylinder(h = 4, d = peg_diameter, center = false);\n        }\n    }\n}\n\nmodule toy_connector_peg() {\n    // Connector peg for toy assembly\n    translate([0, 0, hub_length/2 + peg_length/2])\n        cylinder(h = peg_length, d = peg_diameter, center = true);\n    \n    // Peg base\n    translate([0, 0, hub_length/2])\n        cylinder(h = 2, d = peg_diameter * 1.5, center = false);\n}\n\n// Main assembly\nunion() {\n    // Assemble all parts\n    union() {\n        // Rim structure\n        rim_outer();\n        \n        // Spokes and hub\n        rim_spokes();\n        \n        // Tire\n        translate([0, 0, rim_width/2 + tire_width/2 + 1])\n            rim_tire();\n        translate([0, 0, -rim_width/2 - tire_width/2 - 1])\n            rim_tire();\n    }\n    \n    // Toy connector pegs\n    toy_connector_peg();\n    mirror([0, 0, 1]) toy_connector_peg();\n}",
    "renders": true
  },
  {
    "toy": "net",
    "openscad_code": "// Toy Net - Medium Complexity\n// Realistic style with proper proportions and toy characteristics\n\n// Parameters\n$fn = 32;\nnet_width = 100;\nnet_height = 80;\nnet_depth = 100;\npost_diameter = 8;\nmesh_thickness = 2;\nbase_thickness = 5;\n\n// Main assembly\nmodule toy_net() {\n    // Base frame\n    union() {\n        // Bottom base rectangle\n        translate([-net_width/2 - 10, -net_depth/2 - 10, 0])\n            cube([net_width + 20, net_depth + 20, base_thickness]);\n        \n        // Side posts\n        for(x = [-net_width/2, net_width/2]) {\n            for(y = [-net_depth/2, net_depth/2]) {\n                translate([x, y, base_thickness/2])\n                    cylinder(h = net_height, d = post_diameter, center = true);\n            }\n        }\n        \n        // Top frame rectangle\n        translate([0, 0, net_height + base_thickness])\n            cube([net_width + post_diameter, net_depth + post_diameter, mesh_thickness], center = true);\n        \n        // Net mesh pattern\n        mesh_pattern();\n    }\n}\n\n// Net mesh creation\nmodule mesh_pattern() {\n    mesh_spacing = 6;\n    mesh_height = net_height - 10;\n    \n    // Vertical strings\n    for(x = [-net_width/2 + mesh_spacing : mesh_spacing : net_width/2 - mesh_spacing]) {\n        translate([x, 0, base_thickness + mesh_height/2])\n            cube([mesh_thickness, net_depth + post_diameter, mesh_height], center = true);\n    }\n    \n    // Horizontal strings\n    for(y = [-net_depth/2 + mesh_spacing : mesh_spacing : net_depth/2 - mesh_spacing]) {\n        translate([0, y, base_thickness + mesh_height/2])\n            cube([net_width + post_diameter, mesh_thickness, mesh_height], center = true);\n    }\n    \n    // Diagonal reinforcements\n    diagonal_support(45);\n    diagonal_support(-45);\n}\n\n// Diagonal support strings\nmodule diagonal_support(angle) {\n    support_thickness = 1.5;\n    translate([0, 0, base_thickness + (net_height - 10)/2])\n        rotate([0, 0, angle])\n            cube([net_width * 1.2, support_thickness, net_height - 10], center = true);\n}\n\n// Toy details - corner joints\nmodule corner_joints() {\n    joint_size = 4;\n    for(x = [-net_width/2 - post_diameter/2, net_width/2 + post_diameter/2]) {\n        for(y = [-net_depth/2 - post_diameter/2, net_depth/2 + post_diameter/2]) {\n            translate([x, y, base_thickness])\n                sphere(d = joint_size);\n        }\n    }\n}\n\n// Assembly with corner joints\nunion() {\n    toy_net();\n    corner_joints();\n}",
    "renders": true
  },
  {
    "toy": "hoop",
    "openscad_code": "// Realistic toy hoop with handle and decorative elements\n// Overall dimensions: ~120mm diameter, ~40mm handle length\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main parameters\nhoop_diameter = 100;\nhoop_thickness = 5;\nhandle_length = 40;\nhandle_diameter = 12;\nwall_thickness = 2;\n\nmodule hoop_toy() {\n    // Main hoop ring with realistic proportions\n    difference() {\n        // Outer ring\n        rotate_extrude(angle = 360) {\n            translate([hoop_diameter/2, 0, 0]) \n                square([hoop_thickness, hoop_thickness*1.2], center = true);\n        }\n        \n        // Inner hole (creates the hollow part)\n        rotate_extrude(angle = 360) {\n            translate([hoop_diameter/2 - wall_thickness, 0, 0]) \n                square([wall_thickness, hoop_thickness*1.2], center = true);\n        }\n    }\n    \n    // Handle attachment point - reinforced joint\n    translate([0, 0, -hoop_thickness/2]) {\n        cylinder(h = hoop_thickness*1.2, r = handle_diameter/2 + 3, center = true);\n    }\n    \n    // Decorative grip ridges on handle\n    for(i = [0:3:handle_length-3]) {\n        translate([handle_length/2 - i, 0, -handle_diameter/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = handle_diameter*0.8, r = handle_diameter/2 + 0.5, center = true);\n            }\n        }\n    }\n    \n    // Handle shaft\n    translate([handle_length/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Main handle cylinder\n                cylinder(h = handle_length, r = handle_diameter/2, center = true);\n                \n                // Hollow core for weight reduction\n                cylinder(h = handle_length + 2, r = handle_diameter/2 - wall_thickness, center = true);\n            }\n        }\n    }\n    \n    // Handle cap with grip pattern\n    translate([handle_length, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = handle_diameter, r = handle_diameter/2 + 1, center = true);\n            \n            // Grip rings on cap\n            for(j = [0:2]) {\n                translate([0, 0, -handle_diameter/2 + j*2 + 1]) {\n                    torus(r1 = handle_diameter/2 + 0.8, r2 = 0.5);\n                }\n            }\n        }\n    }\n    \n    // Reinforcement ribs around hoop (structural elements)\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle]) {\n            translate([hoop_diameter/2 - hoop_thickness/2, 0, 0]) {\n                cube([hoop_thickness*1.5, wall_thickness, hoop_thickness*0.8], center = true);\n            }\n        }\n    }\n}\n\n// Helper module for torus shapes (decorative rings)\nmodule torus(r1, r2) {\n    rotate_extrude(angle = 360) {\n        translate([r1, 0, 0]) \n            circle(r = r2);\n    }\n}\n\n// Generate the complete toy\nhoop_toy();",
    "renders": true
  },
  {
    "toy": "target",
    "openscad_code": "// Toy Target – archery-style with fold-out stand\n// Total height ~110 mm, Ø ~90 mm\n// Wall thickness 2 mm for 3D printing\n\n$fa = 2; $fs = 1;\n\n// Overall scale\nscale(0.8) target_assembly();\n\nmodule target_assembly(){\n    // Central target face\n    difference(){\n        union(){\n            target_face();           // coloured rings\n            rear_stand_housing();    // cylindrical back box\n        }\n        // Central hole for arrow\n        translate([0,0,-1]) cylinder(h=20, d=10, center=true);\n    }\n\n    // Fold-out tripod legs\n    for(a=[-120,0,120])\n        rotate([0,0,a])\n            translate([0,35,0])\n                rotate([90,0,0])\n                    foldable_leg();\n}\n\nmodule target_face(){\n    // Ring thickness 2 mm\n    rings = [[45,\"red\"],[35,\"white\"],[25,\"blue\"],\n             [15,\"black\"],[5,\"yellow\"]];\n    for(i=[0:len(rings)-1]){\n        r=rings[i][0]; col=rings[i][1];\n        color(col) translate([0,0,i*2])\n            cylinder(h=2.1, d=r*2, center=true);\n    }\n}\n\nmodule rear_stand_housing(){\n    // 2 mm thick cylinder closed at back\n    difference(){\n        cylinder(h=25, d=92, center=false);\n        translate([0,0,2]) cylinder(h=30, d=88, center=false);\n    }\n}\n\nmodule foldable_leg(){\n    // Single leg, printed folded up; user rotates down\n    // Hinge pin\n    pin_r = 2;\n    translate([0,0,0]) rotate([0,-90,0]) cylinder(h=8, d=pin_r*2, center=true);\n\n    // Leg panel\n    leg_w = 6; leg_l = 40; leg_t = 2;\n    translate([0,leg_l/2,-leg_w/2])\n        cube([leg_t, leg_l, leg_w], center=true);\n\n    // Foot disk\n    translate([0,leg_l,0]) cylinder(h=2, d=12, center=true);\n}",
    "renders": true
  },
  {
    "toy": "archery",
    "openscad_code": "// Toy Archery Set - Medium Complexity Realistic Style\n// Overall dimensions: ~120mm bow length, 30mm width, 10mm thick\n\n$fn = 32;  // Smooth curves for printing\n\nmodule bow_limb() {\n    // Single bow limb - 60mm long\n    difference() {\n        // Outer curved limb\n        hull() {\n            translate([0, 0, -5]) cylinder(h=10, r=15);\n            translate([0, 60, -5]) cylinder(h=10, r=10);\n        }\n        // Inner hollow for weight reduction\n        translate([0, 30, 0]) scale([0.7, 1, 0.6]) cylinder(h=15, r=12);\n    }\n}\n\nmodule bow_handle() {\n    // Ergonomic handle grip\n    difference() {\n        // Main handle body\n        hull() {\n            translate([-10, 0, -5]) cylinder(h=10, r=5);\n            translate([10, 0, -5]) cylinder(h=10, r=5);\n            translate([0, -15, -5]) cylinder(h=10, r=7);\n        }\n        // Finger grooves\n        for(i = [-1, 0, 1]) {\n            translate([i*6, -10, 0]) rotate([90, 0, 0]) \n                cylinder(h=15, r=2, $fn=16);\n        }\n    }\n}\n\nmodule bow_string() {\n    // Thin string connecting limbs\n    color(\"white\")\n    for(side = [-1, 1]) {\n        translate([0, 0, side*4]) \n            cylinder(h=120, r=0.5);\n    }\n}\n\nmodule arrow() {\n    // 80mm toy arrow\n    union() {\n        // Arrow shaft\n        color(\"brown\")\n        rotate([90, 0, 0]) cylinder(h=80, r=1.5);\n        \n        // Arrow head\n        translate([0, 0, 80]) \n            color(\"gray\")\n            cylinder(h=8, r1=0, r2=3, $fn=3);\n        \n        // Fletching\n        for(i = [0:120:240]) {\n            rotate([90, 0, i]) {\n                translate([0, -5, -3]) \n                    color(\"red\")\n                    cube([0.5, 10, 3]);\n            }\n        }\n    }\n}\n\nmodule quiver() {\n    // Arrow holder - 50mm tall\n    difference() {\n        // Main tube\n        cylinder(h=50, r=8);\n        // Hollow interior\n        translate([0, 0, -1]) cylinder(h=52, r=6);\n    }\n    \n    // Belt loop\n    translate([0, -12, 25]) rotate([90, 0, 0])\n        difference() {\n            cylinder(h=5, r=3);\n            translate([0, 0, -1]) cylinder(h=7, r=1.5);\n        }\n    \n    // Quiver bottom\n    translate([0, 0, -2]) cylinder(h=2, r=8);\n}\n\nmodule target() {\n    // 40mm diameter target face\n    difference() {\n        // Target backing\n        cylinder(h=5, r=20);\n        // Mounting hole\n        translate([0, 0, -1]) cylinder(h=7, r=2);\n    }\n    \n    // Target rings\n    for(r = [18, 14, 10, 6, 2]) {\n        color(r % 4 == 0 ? \"red\" : \"white\")\n        translate([0, 0, 5.1]) cylinder(h=0.5, r=r);\n    }\n    \n    // Stand legs\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([15, 0, -15]) rotate([90, 0, 0])\n                cylinder(h=20, r=2);\n    }\n}\n\n// Assembly\n// Bow assembly\ntranslate([0, 0, 0]) {\n    bow_handle();\n    translate([0, -15, 0]) rotate([0, 0, 180]) bow_limb();\n    translate([0, 15, 0]) bow_limb();\n    bow_string();\n}\n\n// Arrow set\ntranslate([30, 20, 0]) arrow();\ntranslate([35, 20, 0]) arrow();\ntranslate([40, 20, 0]) arrow();\n\n// Quiver\ntranslate([50, 0, 0]) rotate([0, 0, 15]) quiver();\n\n// Target\ntranslate([-50, 30, 0]) target();",
    "renders": true
  },
  {
    "toy": "arrow",
    "openscad_code": "// Realistic Toy Arrow - Medium Complexity\n// Overall dimensions: 150mm long, 25mm diameter shaft\n\nmodule arrow_head() {\n    // Main arrow head body (hollow cone with wall thickness)\n    difference() {\n        cylinder(h=30, d1=20, d2=0, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=28, d1=16, d2=0, $fn=32);\n    }\n    \n    // Reinforcement ring at base\n    translate([0, 0, -1])\n        cylinder(h=3, d1=22, d2=20, $fn=32);\n    \n    // Decorative grooves\n    for(i=[1:3]) {\n        translate([0, 0, i*8])\n            difference() {\n                cylinder(h=1, d1=20-(i*2), d2=20-(i*2), $fn=32);\n                cylinder(h=1.2, d1=18-(i*2), d2=18-(i*2), $fn=32);\n            }\n    }\n}\n\nmodule arrow_shaft() {\n    // Main hollow shaft tube\n    difference() {\n        cylinder(h=100, d=12, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=96, d=8, $fn=32);\n    }\n    \n    // Grip texture rings\n    for(i=[0:5]) {\n        translate([0, 0, 15+i*12])\n            cylinder(h=2, d=13, $fn=32);\n    }\n}\n\nmodule arrow_fletching() {\n    // Three fletches at 120 degree intervals\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, 10, -5])\n            rotate([90, 0, 0])\n                difference() {\n                    // Main fletch shape\n                    union() {\n                        cube([25, 2, 8], center=true);\n                        translate([10, 0, 0])\n                            sphere(d=8);\n                    }\n                    // Hollow out for 3D printability\n                    translate([0, 1.2, 0])\n                        cube([23, 0.5, 6], center=true);\n                }\n    }\n}\n\nmodule arrow_nock() {\n    // Nock base\n    translate([0, 0, -10])\n        difference() {\n            cylinder(h=10, d=12, $fn=32);\n            cylinder(h=11, d=8, $fn=32);\n        }\n    \n    // Nock slot\n    translate([0, -2, -15])\n        cube([4, 4, 10], center=true);\n}\n\n// Assemble the arrow\nunion() {\n    translate([0, 0, 100])\n        arrow_head();\n    \n    arrow_shaft();\n    \n    translate([0, 0, -5])\n        arrow_fletching();\n    \n    arrow_nock();\n}",
    "renders": true
  },
  {
    "toy": "quiver",
    "openscad_code": "// Toy Quiver - Realistic Style, Medium Complexity\n// Safe 3D-printable version for toy arrows\n\n// Overall dimensions (fits 3-4 toy arrows ~200mm long)\nquiver_height = 120;\nquiver_diameter = 30;\nwall_thickness = 2;\n\n// Bottom thickness and foot ring\nbase_thickness = 4;\nfoot_ring_height = 6;\n\n// Strap loops\nloop_width = 8;\nloop_thickness = 3;\nloop_clearance = 5;\n\n// Decorative band\nband_height = 8;\nband_offset = 30;\n\n// Arrow separator grid inside\nseparator_thickness = 1.5;\nnum_arrows = 4;\n\nmodule quiver_body() {\n    difference() {\n        // Main tube\n        cylinder(h = quiver_height, d = quiver_diameter, $fn = 48);\n        \n        // Hollow inside\n        translate([0, 0, -0.1])\n            cylinder(h = quiver_height + 0.2, \n                     d = quiver_diameter - 2*wall_thickness, \n                     $fn = 48);\n    }\n}\n\nmodule solid_base() {\n    difference() {\n        // Base disc\n        translate([0, 0, 0])\n            cylinder(h = base_thickness, d = quiver_diameter, $fn = 48);\n        \n        // Lightening cavity (keeps bottom solid for strength)\n        translate([0, 0, -0.1])\n            cylinder(h = base_thickness - 1, \n                     d = quiver_diameter - 2*wall_thickness, \n                     $fn = 48);\n    }\n}\n\nmodule foot_ring() {\n    // Decorative ring at bottom\n    translate([0, 0, base_thickness])\n        cylinder(h = foot_ring_height, \n                 d1 = quiver_diameter, \n                 d2 = quiver_diameter + 4, \n                 $fn = 48);\n}\n\nmodule strap_loops() {\n    // Two loops for threading a toy strap\n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([quiver_diameter/2 + loop_thickness/2, 0, \n                       quiver_height - band_offset])\n                rotate([90, 0, 0])\n                    difference() {\n                        // Outer loop\n                        cylinder(h = loop_width, \n                                 d = loop_thickness, \n                                 $fn = 16);\n                        // Inner clearance\n                        translate([0, 0, -0.1])\n                            cylinder(h = loop_width + 0.2, \n                                     d = loop_thickness - 2*loop_clearance, \n                                     $fn = 16);\n                    }\n    }\n}\n\nmodule decorative_band() {\n    // Raised decorative band near top\n    translate([0, 0, quiver_height - band_offset])\n        cylinder(h = band_height, \n                 d = quiver_diameter + 2, \n                 $fn = 48);\n}\n\nmodule arrow_separator() {\n    // Internal \"+\" shaped separator to hold arrows apart\n    for (angle = [0, 90]) {\n        rotate([0, 0, angle])\n            translate([0, 0, base_thickness])\n                cube([separator_thickness, \n                      quiver_diameter - 2*wall_thickness - 2, \n                      quiver_height - base_thickness - 2], center = true);\n    }\n}\n\nmodule rim_reinforcement() {\n    // Thicker rim to prevent splitting\n    translate([0, 0, quiver_height - 2])\n        cylinder(h = 4, \n                 d = quiver_diameter + 2, \n                 $fn = 48);\n}\n\n// Assembly\nunion() {\n    quiver_body();\n    solid_base();\n    foot_ring();\n    decorative_band();\n    strap_loops();\n    rim_reinforcement();\n    \n    // Only add separator if arrows are inserted\n    // % makes it visible but not part of the print\n    %arrow_separator();\n}",
    "renders": true
  },
  {
    "toy": "shield",
    "openscad_code": "// Toy Shield - Realistic Style with Medium Complexity\n// 3D Printable toy shield with rivets, handle, and structural details\n\n$fn = 32;  // Smooth curves\n\nmodule shield_body() {\n    // Main shield body - curved top, flat bottom\n    union() {\n        // Central shield plate\n        difference() {\n            // Outer curved shield shape\n            union() {\n                // Main rectangular portion\n                cube([80, 60, 4], center=true);\n                \n                // Curved top extension\n                translate([0, 30, 0])\n                    cylinder(h=4, r1=40, r2=40);\n            }\n            \n            // Inner hollow for weight reduction\n            translate([0, 0, -1])\n                cube([76, 56, 6], center=true);\n            translate([0, 30, -1])\n                cylinder(h=6, r1=38, r2=38);\n        }\n    }\n}\n\nmodule shield_rivets() {\n    // Decorative rivets around shield edge\n    module rivet(pos) {\n        translate(pos)\n            cylinder(h=2, r=2.5, $fn=16);\n    }\n    \n    // Bottom edge rivets\n    for(i = [-35:10:35]) {\n        rivet([i, -28, 2]);\n    }\n    \n    // Side edge rivets\n    for(i = [-25:10:25]) {\n        rivet([38, i, 2]);\n        rivet([-38, i, 2]);\n    }\n    \n    // Top curved edge rivets\n    for(angle = [-70:10:70]) {\n        x = 40 * sin(angle);\n        y = 30 + 40 * cos(angle);\n        rivet([x, y, 2]);\n    }\n}\n\nmodule shield_handle() {\n    // Reinforced handle on back\n    difference() {\n        // Handle grip\n        translate([0, 0, -8])\n            rotate([90, 0, 0])\n                cylinder(h=30, r1=6, r2=6);\n        \n        // Grip hole\n        translate([0, 0, -8])\n            rotate([90, 0, 0])\n                cylinder(h=32, r1=3, r2=3);\n    }\n    \n    // Handle supports\n    for(x = [-12, 12]) {\n        translate([x, 0, -4])\n            cube([4, 8, 8], center=true);\n    }\n}\n\nmodule shield_emblem() {\n    // Central decorative emblem\n    // Base circle\n    translate([0, 5, 2.1])\n        cylinder(h=2, r=15, $fn=32);\n    \n    // Star shape cutout\n    translate([0, 5, 2.2])\n        linear_extrude(height=2) {\n            union() {\n                // Vertical beam\n                square([4, 20], center=true);\n                // Horizontal beam\n                square([20, 4], center=true);\n                // Diagonal beams\n                rotate(45) square([14, 4], center=true);\n                rotate(-45) square([14, 4], center=true);\n            }\n        }\n}\n\nmodule shield_reinforcement() {\n    // Structural reinforcement ribs\n    // Vertical rib\n    translate([0, 0, -2])\n        cube([4, 56, 2], center=true);\n    \n    // Horizontal ribs\n    translate([0, 15, -2])\n        cube([76, 4, 2], center=true);\n    translate([0, -15, -2])\n        cube([76, 4, 2], center=true);\n}\n\n// Assembly\nunion() {\n    shield_body();\n    shield_rivets();\n    shield_emblem();\n    \n    // Back side components\n    translate([0, 0, 0]) {\n        shield_handle();\n        shield_reinforcement();\n    }\n}",
    "renders": true
  },
  {
    "toy": "foam",
    "openscad_code": "// Foam toy armchair for kids\n// Dimensions: 100mm wide x 90mm deep x 90mm tall\n\nmodule rounded_cube(size, radius, center=false) {\n    // Create cube with rounded edges\n    translate([0, 0, radius])\n    minkowski() {\n        cube(size - [radius*2, radius*2, radius*2], center=center);\n        sphere(r=radius);\n    }\n}\n\nmodule armchair() {\n    // Main seat cushion - 60mm thick foam\n    translate([0, 0, 30])\n    rounded_cube([80, 70, 60], 8);\n    \n    // Backrest cushion - 50mm thick foam\n    translate([0, -25, 60])\n    rounded_cube([80, 20, 50], 8);\n    \n    // Left armrest\n    translate([-45, 25, 45])\n    rounded_cube([20, 20, 50], 5);\n    \n    // Right armrest\n    translate([45, 25, 45])\n    rounded_cube([20, 20, 50], 5);\n    \n    // Front support bar\n    translate([0, 30, 15])\n    rounded_cube([76, 8, 8], 3);\n    \n    // Back support bar\n    translate([0, -30, 15])\n    rounded_cube([76, 8, 8], 3);\n    \n    // Left side support\n    translate([-38, 0, 15])\n    rounded_cube([8, 66, 8], 3);\n    \n    // Right side support\n    translate([38, 0, 15])\n    rounded_cube([8, 66, 8], 3);\n    \n    // Decorative foam buttons on seat\n    for (x = [-25, 0, 25]) {\n        for (y = [-20, 0, 20]) {\n            translate([x, y, 63])\n            cylinder(h=3, r=4, $fn=20);\n        }\n    }\n    \n    // Backrest buttons\n    for (x = [-25, 0, 25]) {\n        translate([x, -25, 83])\n        cylinder(h=3, r=4, $fn=20);\n    }\n    \n    // Armrest top buttons\n    translate([-45, 25, 73])\n    cylinder(h=3, r=4, $fn=20);\n    \n    translate([45, 25, 73])\n    cylinder(h=3, r=4, $fn=20);\n}\n\n// Create the foam toy armchair\narmchair();",
    "renders": true
  },
  {
    "toy": "nerf",
    "openscad_code": "// Nerf N-Strike Elite Rough Cut 2x4 (realistic medium complexity)\n// Scale: 1:2 toy replica for 3D printing (~130mm long)\n\n// Wall thickness\nwall = 2;\n\n// Main dimensions (mm)\nlength = 130;\nwidth = 45;\nheight = 35;\n\n// Barrel dimensions\nbarrel_d = 8;\nbarrel_spacing = 12;\nbarrel_rows = 2;\nbarrel_cols = 4;\n\n// Handle dimensions\nhandle_width = 25;\nhandle_height = 80;\nhandle_thickness = 12;\n\n// Grip dimensions\ngrip_width = 20;\ngrip_height = 30;\ngrip_length = 25;\n\n// Stock dimensions\nstock_length = 60;\nstock_width = 35;\nstock_height = 25;\n\nmodule main_body() {\n    difference() {\n        // Main body shell\n        hull() {\n            translate([-length/2, -width/2, 0])\n                cube([length, width, height]);\n            translate([-length/2+10, -width/2+5, -5])\n                cube([length-20, width-10, height+5]);\n        }\n        \n        // Internal cavity\n        translate([-length/2+wall, -width/2+wall, wall])\n            cube([length-2*wall, width-2*wall, height-wall]);\n            \n        // Barrel holes\n        for(i = [0:barrel_cols-1]) {\n            for(j = [0:barrel_rows-1]) {\n                translate([\n                    -length/2 + 20 + i*barrel_spacing,\n                    -width/2 + 15 + j*barrel_spacing,\n                    height/2\n                ])\n                    rotate([0, 90, 0])\n                        cylinder(h=length/2, d=barrel_d, $fn=16);\n            }\n        }\n    }\n}\n\nmodule handle() {\n    translate([length/2-20, -handle_width/2, 0]) {\n        difference() {\n            // Main handle\n            hull() {\n                cube([handle_thickness, handle_width, handle_height]);\n                translate([0, 0, -handle_height/2])\n                    cube([handle_thickness+5, grip_width, grip_height]);\n            }\n            \n            // Grip cavity\n            translate([wall, wall, wall])\n                cube([handle_thickness-wall, handle_width-2*wall, handle_height-2*wall]);\n        }\n        \n        // Trigger guard\n        translate([-5, handle_width/2-5, handle_height/2-5])\n            difference() {\n                cube([15, 10, 15]);\n                translate([wall, wall, wall])\n                    cube([15-2*wall, 10-2*wall, 15-2*wall]);\n            }\n    }\n}\n\nmodule stock() {\n    translate([-length/2-stock_length, -stock_width/2, 0]) {\n        difference() {\n            // Stock body\n            hull() {\n                cube([stock_length, stock_width, stock_height]);\n                translate([stock_length-20, 0, 0])\n                    cube([20, stock_width-10, stock_height-5]);\n            }\n            \n            // Stock cavity\n            translate([wall, wall, wall])\n                cube([stock_length-wall, stock_width-2*wall, stock_height-wall]);\n                \n            // Butt pad\n            translate([stock_length-wall-2, wall+2, wall+2])\n                cube([wall, stock_width-4*wall, stock_height-4*wall]);\n        }\n        \n        // Stock details\n        for(i = [1:3]) {\n            translate([stock_length/2, -stock_width/2+i*stock_width/4, 0])\n                cube([stock_length/4, 2, stock_height]);\n        }\n    }\n}\n\nmodule priming_grip() {\n    translate([0, width/2+2, height/2]) {\n        difference() {\n            // Grip slide\n            hull() {\n                cube([grip_length, grip_width, grip_height]);\n                translate([0, 0, grip_height/2])\n                    cube([grip_length+5, grip_width-5, grip_height/2]);\n            }\n            \n            // Grip cavity\n            translate([wall, wall, wall])\n                cube([grip_length-wall, grip_width-2*wall, grip_height-2*wall]);\n                \n            // Grip texture\n            translate([wall+2, wall+2, wall+2])\n                for(i = [0:2]) {\n                    cube([grip_length-4*wall, 1.5, grip_height-4*wall]);\n                    translate([0, i*3, 0])\n                        cube([grip_length-4*wall, 1.5, 1]);\n                }\n        }\n    }\n}\n\nmodule tactical_rail() {\n    translate([-length/2+40, -width/2-1, height-3]) {\n        difference() {\n            // Rail base\n            cube([40, 6, 3]);\n            \n            // Rail slots\n            for(i = [0:3]) {\n                translate([i*10+2, 0, 0])\n                    cube([6, 6, 3]);\n            }\n        }\n    }\n}\n\n// Assemble the blaster\nunion() {\n    main_body();\n    handle();\n    stock();\n    priming_grip();\n    tactical_rail();\n    \n    // Front sight\n    translate([-length/2+5, 0, height+2]) {\n        cube([2, 2, 5]);\n        translate([-1, -1, 0])\n            cube([4, 4, 1]);\n    }\n    \n    // Rear sight\n    translate([length/2-35, 0, height+2]) {\n        cube([2, 10, 5]);\n        translate([-1, -5, 0])\n            cube([4, 10, 1]);\n    }\n}",
    "renders": true
  },
  {
    "toy": "blaster",
    "openscad_code": "// Realistic Blaster Toy - Medium Complexity\n// Overall length ~120mm\n\n$fn = 32;\n\n// Main parameters\nbarrel_length = 60;\nbody_length = 50;\nhandle_height = 25;\nhandle_width = 12;\nscope_height = 15;\n\n// Wall thickness\nwall = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Main body block\n            cube([body_length, 25, 20], center=true);\n            \n            // Grip texture\n            for(i=[-10:5:10]) {\n                translate([5, i, 11])\n                cube([body_length-5, 3, 1], center=true);\n            }\n        }\n        \n        // Magazine slot\n        translate([0, 0, -10])\n        cube([8, 15, 8], center=true);\n    }\n}\n\n// Barrel assembly\nmodule barrel() {\n    union() {\n        // Outer barrel\n        translate([barrel_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=barrel_length, r1=4, r2=4);\n        \n        // Barrel shroud\n        translate([barrel_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=barrel_length-8, r1=6, r2=6);\n        \n        // Muzzle brake\n        translate([barrel_length-2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=4, r1=5, r2=6);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        translate([-body_length/2-5, 0, -handle_height/2-10])\n        cube([handle_width, 20, handle_height], center=true);\n        \n        // Trigger guard\n        translate([-body_length/2-8, 0, -19])\n        cube([4, 15, 10], center=true);\n        \n        // Grip texture\n        for(i=[-8:3:8]) {\n            translate([-body_length/2-5, i, -handle_height/2-5])\n            cube([handle_width-2, 1, 3], center=true);\n        }\n    }\n}\n\n// Scope\nmodule scope() {\n    union() {\n        // Scope base\n        translate([0, 0, 12])\n        cube([20, 6, 4], center=true);\n        \n        // Scope tube\n        translate([5, 0, 17])\n        rotate([0, 90, 0])\n        cylinder(h=30, r1=3, r2=3);\n        \n        // Scope caps\n        translate([-8, 0, 17])\n        rotate([0, 90, 0])\n        cylinder(h=1, r1=4, r2=4);\n        \n        translate([18, 0, 17])\n        rotate([0, 90, 0])\n        cylinder(h=1, r1=4, r2=4);\n    }\n}\n\n// Stock\nmodule stock() {\n    difference() {\n        // Main stock\n        translate([-body_length/2-25, 0, -5])\n        cube([30, 18, 15], center=true);\n        \n        // Stock hole\n        translate([-body_length/2-30, 0, -5])\n        cube([10, 10, 8], center=true);\n    }\n}\n\n// Magazine\nmodule magazine() {\n    translate([0, 0, -20])\n    cube([6, 12, 20], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    translate([body_length/2, 0, 0])\n    barrel();\n    handle();\n    scope();\n    stock();\n    magazine();\n}",
    "renders": true
  },
  {
    "toy": "launcher",
    "openscad_code": "// Toy Ballista Launcher\n// Overall dimensions: ~120mm long, 80mm wide, 90mm tall\n\n$fn = 36;\n\n// Main dimensions\nbase_w = 60;\nbase_l = 100;\nbase_h = 8;\n\nwheel_r = 12;\nwheel_w = 6;\n\nframe_w = 8;\nframe_h = 70;\n\nbow_l = 90;\nbow_h = 40;\nbow_th = 6;\n\nslider_l = 70;\nslider_w = 20;\nslider_h = 6;\n\n// Base platform\nmodule base() {\n    difference() {\n        union() {\n            // Main base\n            cube([base_l, base_w, base_h], center=true);\n            \n            // Reinforcement ribs underneath\n            for (x = [-30, 0, 30]) {\n                translate([x, 0, -base_h/2 - 3])\n                    cube([6, base_w - 10, 6], center=true);\n            }\n        }\n        \n        // Mounting holes\n        for (x = [-35, 35])\n            for (y = [-20, 20])\n                translate([x, y, -base_h/2 - 1])\n                    cylinder(h=base_h + 2, r=2.5, center=true);\n    }\n}\n\n// Wheels with axles\nmodule wheels() {\n    for (side = [-1, 1]) {\n        translate([-base_l/2 + 15, side * (base_w/2 + wheel_w/2 + 2), -base_h/2 - wheel_r])\n            rotate([90, 0, 0])\n                cylinder(h=wheel_w, r=wheel_r, center=true);\n        \n        // Axle between wheels\n        translate([-base_l/2 + 15, 0, -base_h/2 - wheel_r])\n            rotate([90, 0, 0])\n                cylinder(h=base_w + 10, r=2.5, center=true);\n    }\n}\n\n// Upright frame supports\nmodule frame() {\n    for (side = [-1, 1]) {\n        translate([0, side * (base_w/2 - frame_w/2 - 2), base_h/2 + frame_h/2])\n            cube([frame_w, frame_w, frame_h], center=true);\n    }\n    \n    // Cross beam\n    translate([0, 0, base_h/2 + frame_h - frame_w/2])\n        cube([frame_w + 10, base_w - 10, frame_w], center=true);\n}\n\n// Bow arms\nmodule bow() {\n    // Left arm\n    translate([-bow_l/4, -base_w/2 + 5, base_h/2 + frame_h - bow_h/2])\n        cube([bow_l/2, bow_th, bow_h], center=true);\n    \n    // Right arm\n    translate([-bow_l/4, base_w/2 - 5, base_h/2 + frame_h - bow_h/2])\n        cube([bow_l/2, bow_th, bow_h], center=true);\n    \n    // Bowstring loops\n    for (side = [-1, 1]) {\n        translate([-bow_l/2 - 3, side * (base_w/2 - 5), base_h/2 + frame_h - bow_h/2])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=6, r=4, center=true);\n                    cylinder(h=7, r=2, center=true);\n                }\n    }\n}\n\n// Projectile slider\nmodule slider() {\n    translate([bow_l/4, 0, base_h/2 + frame_h - slider_h - 5])\n        cube([slider_l, slider_w, slider_h], center=true);\n    \n    // Guide rails\n    for (side = [-1, 1]) {\n        translate([bow_l/4, side * (slider_w/2 - 2), base_h/2 + frame_h - slider_h/2 - 5])\n            cube([slider_l, 3, slider_h + 4], center=true);\n    }\n    \n    // Cocking handle\n    translate([bow_l/4 + slider_l/2 - 5, 0, base_h/2 + frame_h + 5])\n        cube([10, 8, 10], center=true);\n}\n\n// Trigger mechanism\nmodule trigger() {\n    translate([bow_l/4 - slider_l/2 + 5, 0, base_h/2 + frame_h - 20])\n        union() {\n            // Trigger guard\n            difference() {\n                cube([20, 15, 15], center=true);\n                translate([0, 0, -2])\n                    cube([22, 17, 12], center=true);\n            }\n            \n            // Trigger lever\n            translate([-3, 0, 0])\n                rotate([0, 10, 0])\n                    cube([8, 4, 10], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    wheels();\n    frame();\n    bow();\n    slider();\n    trigger();\n}",
    "renders": true
  },
  {
    "toy": "slingshot",
    "openscad_code": "// Realistic Slingshot Toy - Medium Complexity\n// 3D printable toy slingshot with proper proportions and structural elements\n\n// Main parameters\n$fn = 30;\nhandle_length = 80;\nhandle_width = 15;\nhandle_thickness = 12;\nfork_width = 45;\nfork_height = 25;\nfork_thickness = 6;\nband_width = 8;\nband_thickness = 2;\npouch_size = 12;\n\n// Main handle module\nmodule handle() {\n    // Handle base with rounded edges\n    difference() {\n        // Main handle body\n        translate([0, 0, handle_length/2])\n            cube([handle_width, handle_thickness, handle_length], center=true);\n        \n        // Rounded bottom\n        translate([0, 0, -handle_length/2 + handle_width/2])\n            rotate([90, 0, 0])\n                cylinder(h=handle_thickness, r=handle_width/2, center=true);\n        \n        // Finger grooves\n        for(i = [-1, 0, 1]) {\n            translate([0, handle_thickness/2 + 1, i * 15])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_width - 4, r=3, center=true);\n        }\n    }\n    \n    // Handle grip texture\n    for(i = [-30, -15, 0, 15, 30]) {\n        translate([0, handle_thickness/2 + 0.5, i])\n            cube([handle_width - 2, 0.5, 3], center=true);\n    }\n}\n\n// Fork arms module\nmodule fork_arms() {\n    // Left fork arm\n    translate([-fork_width/2, 0, handle_length/2])\n        rotate([45, 0, 0])\n            cube([fork_thickness, fork_thickness, fork_height], center=true);\n    \n    // Right fork arm\n    translate([fork_width/2, 0, handle_length/2])\n        rotate([-45, 0, 0])\n            cube([fork_thickness, fork_thickness, fork_height], center=true);\n    \n    // Fork tips with band attachment points\n    translate([-fork_width/2, 0, handle_length/2 + fork_height * 0.7])\n        rotate([90, 0, 0])\n            cylinder(h=fork_thickness, r=4, center=true);\n    \n    translate([fork_width/2, 0, handle_length/2 + fork_height * 0.7])\n        rotate([90, 0, 0])\n            cylinder(h=fork_thickness, r=4, center=true);\n}\n\n// Band attachment system\nmodule bands() {\n    // Left band\n    translate([-fork_width/2, 0, handle_length/2 + fork_height * 0.7])\n        rotate([0, 90, 0])\n            cube([band_width, fork_height * 0.8, band_thickness], center=true);\n    \n    // Right band\n    translate([fork_width/2, 0, handle_length/2 + fork_height * 0.7])\n        rotate([0, 90, 0])\n            cube([band_width, fork_height * 0.8, band_thickness], center=true);\n    \n    // Pouch\n    translate([0, 0, handle_length/2 + fork_height * 0.8])\n        sphere(r=pouch_size/2);\n    \n    // Pouch attachment rings\n    translate([-pouch_size/2, 0, handle_length/2 + fork_height * 0.8])\n        rotate([90, 0, 0])\n            cylinder(h=2, r=3, center=true);\n    \n    translate([pouch_size/2, 0, handle_length/2 + fork_height * 0.8])\n        rotate([90, 0, 0])\n            cylinder(h=2, r=3, center=true);\n}\n\n// Reinforcement braces\nmodule braces() {\n    // Front brace between forks\n    translate([0, 0, handle_length/2 + fork_height * 0.3])\n        rotate([45, 0, 0])\n            cube([fork_width - fork_thickness, 2, 2], center=true);\n    \n    // Side braces\n    translate([-fork_width/2 - 2, 0, handle_length/2])\n        rotate([0, 45, 0])\n            cube([2, 2, fork_height * 0.5], center=true);\n    \n    translate([fork_width/2 + 2, 0, handle_length/2])\n        rotate([0, -45, 0])\n            cube([2, 2, fork_height * 0.5], center=true);\n}\n\n// Assembly\nunion() {\n    // Main handle\n    handle();\n    \n    // Fork structure\n    fork_arms();\n    \n    // Bands and pouch\n    bands();\n    \n    // Structural braces\n    braces();\n}",
    "renders": true
  },
  {
    "toy": "catapult",
    "openscad_code": "// Catapult Toy - Realistic Medium Complexity\n// Overall dimensions: 100mm x 80mm x 95mm\n\n$fn = 32;\n\n// Base assembly\nmodule base_assembly() {\n    // Main base platform\n    difference() {\n        cube([80, 60, 8], center=true);\n        // Lightening holes for material saving\n        for(x = [-25, 0, 25]) {\n            for(y = [-20, 0, 20]) {\n                translate([x, y, -4])\n                    cylinder(h=9, d=8, center=true);\n            }\n        }\n    }\n    \n    // Support towers\n    module tower(x) {\n        translate([x, 0, 4]) {\n            // Tower body\n            cube([12, 30, 40], center=true);\n            \n            // Axle hole\n            translate([0, 0, 15])\n                rotate([90, 0, 0])\n                    cylinder(h=15, d=5, center=true);\n            \n            // Bracing gussets\n            for(side = [-1, 1]) {\n                translate([0, side * 10, 0])\n                    rotate([0, side * 30, 0])\n                        cube([12, 8, 30], center=true);\n            }\n        }\n    }\n    \n    tower(25);\n    tower(-25);\n}\n\n// Torsion spring assembly\nmodule torsion_spring() {\n    for(side = [-1, 1]) {\n        translate([side * 25, 0, 24]) {\n            rotate([0, 90, 0]) {\n                // Spring coils\n                for(i = [0:5]) {\n                    rotate([i * 60, 0, 0])\n                        translate([0, side * 3, 0])\n                            cylinder(h=2, d=6, center=true);\n                }\n                \n                // Axle rod\n                cylinder(h=30, d=4, center=true);\n            }\n        }\n    }\n}\n\n// Launching arm\nmodule launching_arm() {\n    // Main arm beam\n    difference() {\n        translate([0, 0, 24])\n            rotate([0, 90, 0])\n                cube([6, 6, 70], center=true);\n        \n        // Torsion rope channel\n        translate([0, 0, 30])\n            cube([8, 3, 20], center=true);\n    }\n    \n    // Arm reinforcements\n    translate([0, 0, 24])\n        rotate([0, -30, 0])\n            cube([4, 4, 50], center=true);\n    \n    // Projectile cup\n    translate([0, 0, 59])\n        rotate([0, 90, 0])\n            difference() {\n                sphere(d=18);\n                translate([0, 10, 0])\n                    sphere(d=18);\n                translate([0, 0, -10])\n                    cube([20, 20, 20], center=true);\n            }\n}\n\n// Support frame\nmodule support_frame() {\n    // Front support beam\n    translate([0, 30, 4])\n        cube([70, 8, 8], center=true);\n    \n    // Rear support beam\n    translate([0, -30, 4])\n        cube([70, 8, 8], center=true);\n    \n    // Cross braces\n    for(y = [-25, 25]) {\n        translate([y, 0, 4])\n            rotate([0, 0, 45])\n                cube([8, 8, 45], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base_assembly();\n    support_frame();\n    torsion_spring();\n    launching_arm();\n    \n    // Stabilizing feet\n    for(x = [-35, 35]) {\n        for(y = [-25, 25]) {\n            translate([x, y, -6])\n                cylinder(h=4, d=12, center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "rocket",
    "openscad_code": "// Realistic Toy Rocket - Medium Complexity\n// 120mm tall model with 2mm walls suitable for 3D printing\n\n$fn = 32;  // Smooth curves for printing\n\nmodule main_body() {\n    // Main cylindrical body 60mm tall, 30mm diameter\n    cylinder(h = 60, r = 15);\n    \n    // Nose cone - tapered cylinder segments\n    translate([0, 0, 60])\n    cylinder(h1 = 30, h2 = 0, r1 = 15, r2 = 0);\n}\n\nmodule engine_section() {\n    // Engine nozzle at base\n    difference() {\n        // Main engine bell\n        cylinder(h = 20, r1 = 18, r2 = 12);\n        \n        // Hollow out for 2mm walls\n        translate([0, 0, 2])\n        cylinder(h = 18, r1 = 16, r2 = 10);\n    }\n}\n\nmodule fins() {\n    // Four stabilizing fins\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, 15, 10])\n        union() {\n            // Main fin body\n            linear_extrude(height = 2)\n            polygon(points = [[0, 0], [20, 0], [20, 30], [0, 25]]);\n            \n            // Reinforcement ridge\n            translate([1, 1, 0])\n            cube([18, 2, 2]);\n        }\n    }\n}\n\nmodule window_detail() {\n    // Three circular windows around body\n    for (z = [20, 35, 50]) {\n        rotate([0, 90, 0])\n        translate([0, 0, z])\n        difference() {\n            // Window frame\n            cylinder(h = 2, r = 5);\n            \n            // Actual window\n            cylinder(h = 3, r = 3);\n        }\n    }\n}\n\nmodule landing_legs() {\n    // Four retractable landing legs\n    for (i = [45:90:315]) {\n        rotate([0, 0, i])\n        translate([12, 0, -5])\n        rotate([30, 0, 0])\n        union() {\n            // Upper strut\n            cube([4, 4, 15], center = true);\n            \n            // Lower foot\n            translate([0, 0, -9])\n            cube([8, 8, 2], center = true);\n        }\n    }\n}\n\nmodule payload_fairing() {\n    // Payload section with separation line\n    difference() {\n        // Main fairing\n        cylinder(h = 25, r = 16);\n        \n        // Hollow for 2mm walls\n        translate([0, 0, 2])\n        cylinder(h = 23, r = 14);\n    }\n    \n    // Separation ring detail\n    translate([0, 0, 2])\n    cylinder(h = 2, r = 17);\n}\n\n// Assembly\nunion() {\n    // Main rocket assembly\n    color(\"lightgray\")\n    main_body();\n    \n    // Engine section\n    color(\"darkgray\")\n    translate([0, 0, -20])\n    engine_section();\n    \n    // Fins\n    color(\"red\")\n    translate([0, 0, -20])\n    fins();\n    \n    // Windows\n    color(\"lightblue\")\n    window_detail();\n    \n    // Landing legs\n    color(\"silver\")\n    landing_legs();\n    \n    // Payload fairing\n    color(\"white\")\n    translate([0, 0, 60])\n    payload_fairing();\n}\n\n// Alignment guide (remove before printing)\n%translate([0, 0, 60])\ncylinder(h = 120, r = 1);",
    "renders": true
  },
  {
    "toy": "missile",
    "openscad_code": "// Toy Missile - Realistic Style, Medium Complexity\n// Overall size ~120mm length, 3D printable with 2mm walls\n\n// Main parameters\n$fn = 32;\nbody_d = 20;\nbody_l = 80;\nnose_l = 25;\nfin_w = 12;\nfin_h = 25;\nfin_t = 2;\n\nmodule missile_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h=body_l, d=body_d, center=false);\n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h=body_l-4, d=body_d-4, center=false);\n    }\n}\n\nmodule nose_cone() {\n    // Conical nose with hollow tip\n    difference() {\n        cylinder(h=nose_l, d1=body_d, d2=2, center=false);\n        // Hollow space\n        translate([0, 0, 2])\n            cylinder(h=nose_l-2, d1=body_d-4, d2=0, center=false);\n    }\n}\n\nmodule stabilizer_fins() {\n    // Four symmetric stabilizer fins\n    for (i = [0:90:359]) {\n        rotate([0, 0, i])\n            translate([body_d/2 + fin_t/2, 0, body_l - fin_h - 10])\n                cube([fin_t, fin_w, fin_h], center=true);\n    }\n}\n\nmodule guidance_section() {\n    // Ring around body for guidance system\n    difference() {\n        // Outer ring\n        translate([0, 0, body_l/2])\n            cylinder(h=8, d=body_d+6, center=true);\n        // Inner cutout\n        translate([0, 0, body_l/2])\n            cylinder(h=10, d=body_d+2, center=true);\n    }\n    \n    // Small sensor bumps\n    for (i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([body_d/2 + 3, 0, body_l/2])\n                sphere(d=3);\n    }\n}\n\nmodule exhaust_nozzle() {\n    // Rear nozzle with thrust vectoring details\n    difference() {\n        // Outer nozzle\n        translate([0, 0, -5])\n            cylinder(h=10, d1=body_d, d2=body_d+4, center=false);\n        // Inner nozzle\n        translate([0, 0, -4])\n            cylinder(h=10, d1=body_d-4, d2=body_d-2, center=false);\n    }\n    \n    // Nozzle vanes\n    for (i = [0:90:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, -2])\n                cube([1, body_d/2, 4], center=true);\n    }\n}\n\nmodule launch_lug() {\n    // Small launch lug on side\n    translate([body_d/2 + 3, 0, body_l - 30])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=4, center=true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    missile_body();\n    \n    translate([0, 0, body_l])\n        nose_cone();\n    \n    stabilizer_fins();\n    \n    guidance_section();\n    \n    translate([0, 0, 0])\n        exhaust_nozzle();\n    \n    launch_lug();\n}",
    "renders": true
  },
  {
    "toy": "dartboard",
    "openscad_code": "// Realistic Toy Dartboard\n// Size: ~120mm diameter, 3D printable with 2mm walls\n\n// Main board parameters\nboard_d = 120;\nboard_t = 8;\nwall_t = 2;\n\n// Wire thickness and height\nwire_h = 2;\nwire_t = 1.5;\n\n// Numbers ring\nring_outer = board_d + 10;\nring_inner = board_d;\nring_t = 4;\n\n// Mounting bracket\nbracket_w = 30;\nbracket_h = 15;\nbracket_t = 6;\n\n// Darts holder\nholder_r = 8;\nholder_h = 25;\nholder_sep = 20;\n\nmodule dartboard() {\n    // Main board body\n    difference() {\n        cylinder(h=board_t, d=board_d, $fn=100);\n        \n        // Cut center hole for wire mounting\n        cylinder(h=board_t+1, d=12, $fn=32);\n    }\n    \n    // Back mounting bracket\n    translate([0, 0, -bracket_t]) {\n        cube([bracket_w, bracket_h, bracket_t], center=true);\n    }\n    \n    // Numbers ring\n    difference() {\n        cylinder(h=ring_t, d=ring_outer, $fn=100);\n        cylinder(h=ring_t+1, d=ring_inner, $fn=100);\n    }\n    \n    // Wire segments for scoring areas\n    for (i = [0:19]) {\n        rotate([0, 0, i * 18]) {\n            // Radial wires\n            translate([0, 0, board_t]) {\n                cube([wire_t, board_d/2, wire_h], center=true);\n            }\n            \n            // Concentric ring wires\n            translate([0, 0, board_t + wire_h/2]) {\n                // Double ring outer\n                rotate_extrude($fn=100) \n                    translate([board_d/2 - 8, 0, 0]) \n                        square([wire_t, wire_h]);\n                \n                // Triple ring inner\n                rotate_extrude($fn=100) \n                    translate([board_d/2 - 32, 0, 0]) \n                        square([wire_t, wire_h]);\n                \n                // Outer bull wire\n                rotate_extrude($fn=100) \n                    translate([16, 0, 0]) \n                        square([wire_t, wire_h]);\n                \n                // Inner bull wire\n                rotate_extrude($fn=100) \n                    translate([6, 0, 0]) \n                        square([wire_t, wire_h]);\n            }\n        }\n    }\n    \n    // Color zones (simplified as raised areas)\n    // Red double ring\n    translate([0, 0, board_t + wire_h]) {\n        rotate_extrude($fn=100) \n            translate([board_d/2 - 8 - 3, 0, 0]) \n                square([6, 1]);\n    }\n    \n    // Green triple ring\n    translate([0, 0, board_t + wire_h]) {\n        rotate_extrude($fn=100) \n            translate([board_d/2 - 32 - 3, 0, 0]) \n                square([6, 1]);\n    }\n    \n    // Red bull\n    translate([0, 0, board_t + wire_h]) {\n        cylinder(h=1, d=32, $fn=100);\n    }\n    \n    // Green inner bull\n    translate([0, 0, board_t + wire_h + 0.5]) {\n        cylinder(h=1, d=12, $fn=100);\n    }\n}\n\nmodule darts_holder() {\n    // Base plate\n    translate([0, -board_d/2 - 30, 0]) {\n        cube([60, 20, 4], center=true);\n        \n        // Three dart holders\n        for (i = [-1:1]) {\n            translate([i * holder_sep, 0, 2]) {\n                cylinder(h=holder_h, r=holder_r, $fn=32);\n                \n                // Dart shaft hole\n                translate([0, 0, -1]) {\n                    cylinder(h=holder_h + 2, r=3, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    dartboard();\n    darts_holder();\n}",
    "renders": true
  },
  {
    "toy": "targetball",
    "openscad_code": "// Targetball Toy - Realistic Style, Medium Complexity\n// A classic carnival-style target ball with stand and base\n\n// Overall dimensions\nball_diameter = 60;\nstand_height = 40;\nbase_diameter = 80;\nwall_thickness = 2;\n\n// Colors (for preview)\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule target_ball() {\n    // Main ball with realistic proportions\n    color(\"red\") \n    sphere(d = ball_diameter);\n    \n    // Target rings around the ball\n    for (i = [1:3]) {\n        rotate([0, 0, i * 120])\n        translate([0, 0, ball_diameter/2 - i * 5])\n        color(\"white\")\n        cylinder(h = 2, d1 = 15 + i * 5, d2 = 15 + i * 5);\n    }\n    \n    // Center target dot\n    color(\"yellow\")\n    translate([0, 0, ball_diameter/2])\n    cylinder(h = 3, d = 8);\n}\n\nmodule ball_stand() {\n    // Main support post\n    color(\"gray\")\n    cylinder(h = stand_height, d = 20);\n    \n    // Reinforcement ring at base\n    translate([0, 0, 5])\n    color(\"gray\")\n    cylinder(h = 5, d = 25);\n    \n    // Top support ring for ball\n    translate([0, 0, stand_height])\n    color(\"gray\")\n    cylinder(h = 3, d = 30);\n    \n    // Ball socket (slight depression)\n    translate([0, 0, stand_height])\n    color(\"gray\")\n    difference() {\n        cylinder(h = 8, d = 30);\n        sphere(d = ball_diameter + 2);\n    }\n}\n\nmodule base_platform() {\n    // Main base\n    color(\"darkgreen\")\n    cylinder(h = 8, d = base_diameter);\n    \n    // Base rim detail\n    translate([0, 0, 1])\n    color(\"black\")\n    cylinder(h = 6, d = base_diameter - 4);\n    \n    // Decorative target pattern on base\n    for (i = [1:3]) {\n        rotate([0, 0, i * 120])\n        translate([base_diameter/2 - 10, 0, 7])\n        color(\"white\")\n        cylinder(h = 1, d = 6);\n    }\n    \n    // Center bullseye on base\n    translate([0, 0, 7])\n    color(\"red\")\n    cylinder(h = 1, d = 10);\n}\n\nmodule support_braces() {\n    // Triangular support braces (3 for stability)\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([10, 0, stand_height/2])\n        rotate([90, 0, 0])\n        color(\"gray\")\n        linear_extrude(height = 2)\n        polygon(points=[[0,0], [15,stand_height/2], [-15,stand_height/2]]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 8])  // Base height offset\nbase_platform();\n\ntranslate([0, 0, 8])\nball_stand();\n\ntranslate([0, 0, 8 + stand_height + 3])\ntarget_ball();\n\ntranslate([0, 0, 8])\nsupport_braces();",
    "renders": true
  },
  {
    "toy": "skillball",
    "openscad_code": "// OpenSCAD skillball toy (medium complexity, realistic style)\n// 3D-printable ball-in-maze toy, 100 mm diameter, 2 mm wall thickness\n\n$fa = 1; $fs = 1;\n\nmodule skillball() {\n    // Main transparent sphere shell\n    difference() {\n        sphere(d = 100);                          // outer shell\n        sphere(d = 96);                           // inner cavity\n    }\n\n    // Equatorial maze ring\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 8, d1 = 96, d2 = 96, center = true);  // ring\n        cylinder(h = 10, d1 = 90, d2 = 90, center = true); // inner cut\n    }\n\n    // Maze walls on ring\n    for (a = [0:15:345]) {\n        rotate([0, 90, a])\n        translate([0, 0, 0])\n        cube([6, 2, 8], center = true);\n    }\n\n    // Top entry tunnel\n    translate([0, 0, 50])\n    difference() {\n        cylinder(h = 10, d1 = 12, d2 = 12);\n        translate([0, 0, -1])\n        cylinder(h = 12, d1 = 8, d2 = 8);\n    }\n\n    // Bottom exit tunnel\n    translate([0, 0, -50])\n    difference() {\n        cylinder(h = 10, d1 = 12, d2 = 12);\n        translate([0, 0, -1])\n        cylinder(h = 12, d1 = 8, d2 = 8);\n    }\n\n    // Internal orthogonal rails (X direction)\n    for (z = [-30:30:30]) {\n        translate([0, 0, z])\n        cube([90, 2, 2], center = true);\n    }\n\n    // Internal orthogonal rails (Y direction)\n    for (z = [-45:30:45]) {\n        translate([0, 0, z])\n        cube([2, 90, 2], center = true);\n    }\n\n    // Ball\n    translate([30, 20, 0])\n    sphere(d = 6);\n}\n\n// Optional stand ring for display\nmodule stand() {\n    difference() {\n        cylinder(h = 8, d1 = 60, d2 = 50);\n        translate([0, 0, -1])\n        cylinder(h = 10, d1 = 54, d2 = 44);\n    }\n}\n\n// Assembly\nskillball();\ntranslate([0, 0, -60])\nrotate([0, 0, 180])\nstand();",
    "renders": true
  },
  {
    "toy": "powerball",
    "openscad_code": "// Realistic Powerball toy gyroscope model\n// Outer shell with ball-grip texture, visible central rotor and clearances for rotation\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Overall size: ~80 mm diameter\n\n// Main shell module\nmodule powerball_shell() {\n    // Outer sphere with grip grooves\n    difference() {\n        sphere(d = 80);\n        \n        // Grip grooves – 6 longitudinal cuts\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([-50, -6, -50])\n                    cube([100, 12, 100]);\n        }\n    }\n    \n    // Shell wall – hollow out inside\n    difference() {\n        sphere(d = 76);  // 2 mm wall\n        sphere(d = 72);\n    }\n}\n\n// Central rotor assembly\nmodule rotor() {\n    // Rotor core\n    rotate([90, 0, 0])\n        cylinder(h = 30, d = 20);\n    \n    // Rotor rim for momentum\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 4, d = 40);\n        cylinder(h = 5, d = 36);\n    }\n    \n    // Three spokes\n    for (i = [0:120:359]) {\n        rotate([0, i, 0])\n            translate([0, 0, -2])\n                cube([3, 18, 4], center = true);\n    }\n    \n    // Central shaft stub (decorative)\n    rotate([90, 0, 0]) {\n        cylinder(h = 10, d = 8);\n        translate([0, 0, 10])\n            cylinder(h = 5, d = 6);\n    }\n}\n\n// Start cord hole\nmodule start_cord_hole() {\n    translate([0, 40, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 4);\n}\n\n// LED indicator windows (toy detail)\nmodule led_windows() {\n    for (ang = [30, 150, 270]) {\n        rotate([0, 0, ang])\n            translate([36, 0, -2])\n                cube([6, 3, 4]);\n    }\n}\n\n// Assemble the toy\nunion() {\n    powerball_shell();\n    \n    // Internal rotor (with clearance gap for toy realism)\n    translate([0, 0, 0])\n        rotor();\n    \n    // Cut cord hole\n    start_cord_hole();\n    \n    // Cut LED windows\n    led_windows();\n}",
    "renders": true
  },
  {
    "toy": "speedball",
    "openscad_code": "// Speedball Toy - Realistic Style, Medium Complexity\n// Overall height: ~120mm, suitable for 3D printing\n\n// Parameters\n$fn = 50;\nball_d = 60;\nstem_h = 50;\nstem_d = 20;\nbase_h = 25;\nbase_d = 80;\nspring_coils = 8;\nspring_wire = 2.5;\nspring_d = 30;\nwall_t = 2;\n\n// Main module\nmodule speedball_toy() {\n    // Base\n    difference() {\n        cylinder(h=base_h, d=base_d, center=true);\n        translate([0,0,-base_h/2-1])\n            cylinder(h=base_h+2, d=base_d-wall_t*2, center=true);\n    }\n    \n    // Stem connector\n    translate([0,0,base_h/2])\n        cylinder(h=5, d=stem_d+4, center=true);\n    \n    // Spring\n    translate([0,0,base_h/2+2.5])\n        spring();\n    \n    // Stem\n    translate([0,0,base_h/2+2.5+spring_coils*spring_wire])\n        cylinder(h=stem_h, d=stem_d, center=true);\n    \n    // Ball mount\n    translate([0,0,base_h/2+2.5+spring_coils*spring_wire+stem_h/2])\n        cylinder(h=8, d=stem_d+6, center=true);\n    \n    // Ball\n    translate([0,0,base_h/2+2.5+spring_coils*spring_wire+stem_h+4])\n        ball();\n}\n\n// Ball module with realistic details\nmodule ball() {\n    // Main ball\n    difference() {\n        sphere(d=ball_d, center=true);\n        // Hollow inside for printing\n        sphere(d=ball_d-wall_t*2, center=true);\n    }\n    \n    // Panel lines\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([0,0,0])\n                panel_line();\n    }\n    \n    // Mounting point\n    translate([0,0,-ball_d/2-4])\n        cylinder(h=8, d=stem_d+6, center=true);\n}\n\nmodule panel_line() {\n    difference() {\n        sphere(d=ball_d+0.2, center=true);\n        translate([0,-2,-ball_d/2])\n            cube([ball_d, 4, ball_d], center=true);\n    }\n}\n\n// Spring module\nmodule spring() {\n    for(i=[0:spring_coils-1]) {\n        translate([0,0,i*spring_wire])\n            rotate([0,0,i*30])\n                cylinder(h=spring_wire, d=spring_d, center=true);\n    }\n    \n    // Central support rod\n    cylinder(h=spring_coils*spring_wire, d=spring_d-4, center=false);\n}\n\nspeedball_toy();",
    "renders": true
  },
  {
    "toy": "zigzagball",
    "openscad_code": "// ZigzagBall Toy - Realistic Style, Medium Complexity\n// A 3D-printable ball with zigzag ridges and toy-like proportions\n\n// Overall parameters\nball_diameter = 80;\nwall_thickness = 2.5;\nridge_height = 8;\nridge_width = 3;\nnum_ridges = 6;\n\nmodule zigzag_ridge(radius, height, width, angle) {\n    // Create a single zigzag ridge segment\n    linear_extrude(height = height, center = true, convexity = 10, twist = angle)\n        polygon(points = [\n            [-width/2, -radius*0.9],\n            [width/2, -radius*0.9],\n            [width/2*0.7, radius*0.9],\n            [-width/2*0.7, radius*0.9]\n        ]);\n}\n\nmodule ball_shell(diameter, thickness) {\n    // Hollow spherical shell for the main body\n    difference() {\n        sphere(d = diameter);\n        sphere(d = diameter - thickness*2);\n    }\n}\n\nmodule zigzag_pattern(radius, ridges, height, width) {\n    // Generate zigzag ridges around the sphere\n    rotate([0, 0, 0])\n    for (i = [0:ridges-1]) {\n        rotate([0, 0, i * 360/ridges])\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        zigzag_ridge(radius, height, width, 15);\n    }\n}\n\nmodule connector_pins() {\n    // Small pins for connecting multiple balls\n    pin_diameter = 4;\n    pin_height = 6;\n    \n    // Top pin\n    translate([0, 0, ball_diameter/2 - wall_thickness])\n    cylinder(d = pin_diameter, h = pin_height, $fn = 16);\n    \n    // Bottom socket\n    translate([0, 0, -ball_diameter/2 + wall_thickness])\n    cylinder(d = pin_diameter + 0.5, h = -pin_height - 1, $fn = 16);\n}\n\nmodule surface_texture() {\n    // Add small bumps for tactile feedback\n    bump_radius = 1.5;\n    bump_height = 1;\n    \n    for (theta = [0:30:150]) {\n        for (phi = [0:45:315]) {\n            rotate([theta, 0, phi])\n            translate([0, 0, ball_diameter/2 - wall_thickness/2])\n            sphere(d = bump_radius*2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollow ball structure\n    ball_shell(ball_diameter, wall_thickness);\n    \n    // Zigzag ridges\n    zigzag_pattern(ball_diameter/2, num_ridges, ridge_height, ridge_width);\n    \n    // Connector pins\n    connector_pins();\n    \n    // Surface texture\n    surface_texture();\n}\n\n// Add a small alignment mark\ntranslate([ball_diameter/2 - wall_thickness - 1, 0, 0])\nrotate([0, 90, 0])\ncylinder(d = 3, h = 2, $fn = 16);",
    "renders": true
  },
  {
    "toy": "twisterball",
    "openscad_code": "// TwisterBall - Medium complexity realistic toy model\n// A classic twist-together spherical puzzle toy\n\n$fn = 50;  // Smooth curves for realism\n\n// Overall dimensions (100mm diameter toy)\nball_diameter = 100;\nwall_thickness = 2.5;\nsegment_clearance = 0.4;\n\n// Create a single segment of the twisterball\nmodule ball_segment(angle, twist_angle, color_index) {\n    // Segment proportions\n    segment_angle = 60;  // 6 segments per layer\n    \n    // Main curved wall\n    difference() {\n        // Outer spherical shell segment\n        rotate([0, 0, angle])\n        translate([0, 0, 0])\n        difference() {\n            sphere(d = ball_diameter);\n            sphere(d = ball_diameter - wall_thickness * 2);\n        }\n        \n        // Cut to segment shape\n        rotate([0, 0, angle + segment_angle/2])\n        translate([0, 0, -ball_diameter/2])\n        cube([ball_diameter, ball_diameter, ball_diameter], center = true);\n        \n        rotate([0, 0, angle - segment_angle/2])\n        translate([0, 0, -ball_diameter/2])\n        cube([ball_diameter, ball_diameter, ball_diameter], center = true);\n    }\n    \n    // Add twist mechanism ridge\n    rotate([0, 0, angle + twist_angle])\n    translate([0, 0, (ball_diameter - wall_thickness)/2 - 1])\n    linear_extrude(height = 2)\n    circle(d = 8);\n}\n\n// Create internal mechanism core\nmodule twist_core() {\n    // Central hub\n    cylinder(h = ball_diameter * 0.8, d = 20, center = true);\n    \n    // Six radial spokes\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([10, 0, 0])\n        cube([20, 4, ball_diameter * 0.75], center = true);\n    }\n}\n\n// Create ball layer\nmodule ball_layer(layer_height, twist_offset) {\n    // Create 6 segments for this layer\n    for(i = [0:5]) {\n        translate([0, 0, layer_height])\n        ball_segment(i * 60, twist_offset, i);\n    }\n}\n\n// Main assembly\nmodule twisterball() {\n    // Bottom layer (fixed)\n    ball_layer(-ball_diameter/3, 0);\n    \n    // Middle layer (twists 30 degrees)\n    ball_layer(0, 30);\n    \n    // Top layer (twists 60 degrees)\n    ball_layer(ball_diameter/3, 60);\n    \n    // Central core (hidden inside)\n    color(\"gray\", 0.3)\n    twist_core();\n    \n    // External grip rings\n    for(layer = [-1, 0, 1]) {\n        translate([0, 0, layer * ball_diameter/3])\n        rotate([90, 0, 0])\n        cylinder(h = 3, d1 = 110, d2 = 105, center = true);\n    }\n}\n\n// Render the complete toy\ntwisterball();\n\n// Add small alignment dots for visual reference\nmodule alignment_dots() {\n    dot_positions = [\n        [45, 0, 30], [-45, 0, 30],\n        [0, 45, 0], [0, -45, 0],\n        [45, 0, -30], [-45, 0, -30]\n    ];\n    \n    for(pos = dot_positions) {\n        translate(pos)\n        sphere(d = 3);\n    }\n}\n\n// Uncomment to add reference dots\n// alignment_dots();",
    "renders": true
  },
  {
    "toy": "flingball",
    "openscad_code": "$fn = 36;\n\n// Overall dimensions (mm)\noverall_length = 110;\noverall_width  = 55;\noverall_height = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule flingball() {\n    // Outer shell (hollow sphere)\n    difference() {\n        sphere(d = 50);                  // outer skin\n        sphere(d = 50 - 2*wall);         // inner cavity\n    }\n\n    // Launch rail (slightly curved, printed flat)\n    translate([0, -15, 45]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                hull() {\n                    cylinder(h = 55, d = 8);               // main rail body\n                    translate([0, 55, 0])\n                        cylinder(h = 1, d = 10);           // flared end\n                }\n                cylinder(h = 57, d = 6);                   // hollow channel\n            }\n        }\n    }\n\n    // Trigger button\n    translate([0, -5, 52]) {\n        difference() {\n            cube([14, 12, 4], center = true);              // button housing\n            translate([0, 0, -1])\n                cube([10, 8, 6], center = true);           // hollow inside\n        }\n    }\n\n    // Four finger-grip rings for spinning\n    for (a = [0 : 90 : 270]) {\n        rotate([0, 0, a])\n            translate([0, 23, 0]) {\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = 5, d = 12);           // ring wall\n                        cylinder(h = 7, d = 12 - 2*wall);  // hollow inside\n                    }\n            }\n    }\n\n    // Stability feet (printed flat)\n    translate([0, 0, -25])\n        for (p = [[-25, -25], [25, -25], [-25, 25], [25, 25]]) {\n            translate(p)\n                cylinder(h = 4, d = 6);\n        }\n\n    // Decorative stripes\n    for (z = [-20, -10, 10, 20]) {\n        color(\"red\")\n            translate([0, 0, z])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, d = 51);\n    }\n}\n\n// Assemble the toy\nflingball();",
    "renders": true
  },
  {
    "toy": "flashball",
    "openscad_code": "// Flashball toy - realistic style, medium complexity\n// Overall size ~80mm diameter, 3D printable with 2mm walls\n\n// Main parameters\nball_d = 80; // Main ball diameter\nwall_t = 2;  // Wall thickness\ncore_d = 20; // Inner core diameter\ngrip_w = 12; // Grip width\ngrip_h = 8;  // Grip height\nbutton_d = 8; // Flash button diameter\nled_d = 6;   // LED diameter\nled_h = 4;   // LED protrusion\n\n// Main hollow ball with wall thickness\nmodule ball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_d);\n        // Inner hollow space\n        sphere(d = ball_d - 2*wall_t);\n    }\n}\n\n// Central grip ring around equator\nmodule grip_ring() {\n    rotate([90, 0, 0]) {\n        // Main grip band\n        difference() {\n            cylinder(h = grip_h, d = ball_d + 4, center = true);\n            cylinder(h = grip_h + 1, d = ball_d - 2, center = true);\n        }\n        \n        // Grip texture - raised ridges\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                translate([0, ball_d/2 + 1, 0]) {\n                    cube([grip_w, 3, grip_h - 1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Flash button on grip\nmodule flash_button() {\n    translate([0, ball_d/2 + grip_h/2 + 2, 0]) {\n        // Button base\n        cylinder(h = 3, d = button_d + 4);\n        // Button top\n        translate([0, 0, 3]) {\n            cylinder(h = 2, d = button_d);\n        }\n    }\n}\n\n// LED arrays - 6 around the ball\nmodule led_arrays() {\n    for(angle = [0:60:300]) {\n        rotate([angle, 0, 0]) {\n            translate([0, 0, ball_d/2 - 2]) {\n                // LED housing\n                cylinder(h = led_h, d = led_d + 4);\n                // LED lens\n                translate([0, 0, led_h]) {\n                    cylinder(h = 1, d = led_d);\n                }\n            }\n        }\n    }\n}\n\n// Ventilation holes for speaker\nmodule vent_holes() {\n    rotate([90, 0, 0]) {\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle]) {\n                translate([0, 0, ball_d/2 - 10]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = ball_d/2, d = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Battery compartment door\nmodule battery_door() {\n    translate([0, 0, -ball_d/2 + 5]) {\n        difference() {\n            // Door frame\n            cube([25, 15, 3], center = true);\n            // Latch hole\n            translate([10, 0, -1]) {\n                cube([3, 8, 4], center = true);\n            }\n        }\n        // Door hinge\n        translate([-12.5, 0, -1.5]) {\n            cylinder(h = 3, d = 3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball shell\n    ball_shell();\n    \n    // Grip ring\n    grip_ring();\n    \n    // Flash button\n    flash_button();\n    \n    // LED arrays\n    led_arrays();\n    \n    // Ventilation holes\n    vent_holes();\n    \n    // Battery compartment\n    battery_door();\n}",
    "renders": true
  },
  {
    "toy": "glowball",
    "openscad_code": "// Glowball Toy - Realistic Medium Complexity\n// Dimensions: 80mm diameter with 2mm wall thickness\n\n// Parameters\nball_d = 80;\nwall_thickness = 2;\nglow_core_d = 40;\nbase_ring_h = 8;\nbase_ring_d = 30;\ngrip_ring_w = 4;\ngrip_ring_d = 6;\ngrip_ring_count = 6;\nglow_port_d = 8;\nglow_port_count = 12;\n\n// Main module for the complete toy\nmodule glowball() {\n    // Outer translucent shell\n    difference() {\n        sphere(d=ball_d);\n        \n        // Hollow interior\n        sphere(d=ball_d - 2*wall_thickness);\n        \n        // Base opening for electronics access\n        translate([0, 0, -ball_d/2 + wall_thickness])\n            cylinder(h=wall_thickness+1, d=base_ring_d, $fn=32);\n    }\n    \n    // Internal glow core chamber\n    difference() {\n        translate([0, 0, 0])\n            sphere(d=glow_core_d);\n            \n        translate([0, 0, 0])\n            sphere(d=glow_core_d - wall_thickness);\n    }\n    \n    // Grip rings around equator for handling\n    for (i = [0:grip_ring_count-1]) {\n        rotate([0, 0, i * 360/grip_ring_count])\n            translate([ball_d/2 - grip_ring_d/2 - wall_thickness, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=grip_ring_w, d=grip_ring_d, $fn=16);\n    }\n    \n    // Base ring for stability when placed down\n    translate([0, 0, -ball_d/2])\n        difference() {\n            cylinder(h=base_ring_h, d=base_ring_d, $fn=32);\n            \n            // Center hole for electronics wire\n            cylinder(h=base_ring_h+1, d=base_ring_d/2, $fn=32);\n        }\n    \n    // Light ports for glow diffusion\n    for (i = [0:glow_port_count-1]) {\n        rotate([0, 0, i * 360/glow_port_count])\n            translate([0, 0, -ball_d/2 + 5])\n                rotate([90 - i * 15, 0, 0])\n                    cylinder(h=wall_thickness+1, d=glow_port_d, $fn=8);\n    }\n    \n    // Internal support ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, -ball_d/4])\n                cube([wall_thickness, ball_d/4, ball_d/2], center=true);\n    }\n    \n    // Small alignment peg for base\n    translate([0, 0, -ball_d/2 - 1])\n        cylinder(h=2, d=4, $fn=8);\n}\n\n// Generate the toy\nglowball();",
    "renders": true
  },
  {
    "toy": "aria",
    "openscad_code": "// Aria Toy Chair (realistic style, medium complexity)\n// Overall size: ~100 mm tall, 90 mm wide, 100 mm deep\n\n// Basic parameters\nseat_h = 50;         // seat height\nseat_w = 90;          // seat width\nseat_d = 100;         // seat depth\nback_h = 50;          // backrest height above seat\nleg_h = seat_h;       // leg height (down from seat)\nleg_t = 6;            // leg thickness\nwall_t = 2;           // wall thickness for 3D printing\n\n// Helper module for rounded edges\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([w-r, r, r]) sphere(r);\n        translate([r, h-r, r]) sphere(r);\n        translate([w-r, h-r, r]) sphere(r);\n        translate([r, r, d-r]) sphere(r);\n        translate([w-r, r, d-r]) sphere(r);\n        translate([r, h-r, d-r]) sphere(r);\n        translate([w-r, h-r, d-r]) sphere(r);\n    }\n}\n\n// Seat module\nmodule aria_seat() {\n    difference() {\n        rounded_box(seat_w, seat_d, wall_t*3, 5);\n        translate([wall_t, wall_t, wall_t]) \n            rounded_box(seat_w-wall_t*2, seat_d-wall_t*2, wall_t*3, 4);\n    }\n}\n\n// Backrest module with slats\nmodule aria_backrest() {\n    union() {\n        // Main backrest frame\n        difference() {\n            translate([-5, 0, 0]) rounded_box(seat_w+10, wall_t*3, back_h, 5);\n            translate([wall_t-5, wall_t, wall_t]) \n                rounded_box(seat_w+10-wall_t*2, wall_t*3, back_h-wall_t*2, 4);\n        }\n        \n        // Slats\n        for (z = [10:15:back_h-10]) {\n            translate([5, wall_t*1.5, z]) cube([seat_w-10, wall_t*3, 5]);\n        }\n    }\n}\n\n// Leg module with stretchers\nmodule aria_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, -leg_h]) {\n        difference() {\n            rounded_box(leg_t, leg_t, leg_h, 3);\n            translate([wall_t, wall_t, wall_t]) \n                rounded_box(leg_t-wall_t*2, leg_t-wall_t*2, leg_h-wall_t, 2);\n        }\n    }\n}\n\n// Front stretcher (between front legs)\nmodule front_stretcher() {\n    translate([leg_t, leg_t, -leg_h/2]) {\n        difference() {\n            rounded_box(seat_w-leg_t*2, leg_t, leg_t, 3);\n            translate([wall_t, wall_t, wall_t]) \n                rounded_box(seat_w-leg_t*2-wall_t*2, leg_t-wall_t*2, leg_t-wall_t*2, 2);\n        }\n    }\n}\n\n// Side stretchers\nmodule side_stretcher() {\n    rotate([0, 0, 90]) {\n        translate([leg_t, leg_t, -leg_h/2]) {\n            difference() {\n                rounded_box(seat_d-leg_t*2, leg_t, leg_t, 3);\n                translate([wall_t, wall_t, wall_t]) \n                    rounded_box(seat_d-leg_t*2-wall_t*2, leg_t-wall_t*2, leg_t-wall_t*2, 2);\n            }\n        }\n    }\n}\n\n// Cushion detail\nmodule aria_cushion() {\n    translate([0, 0, wall_t*3+2]) {\n        difference() {\n            rounded_box(seat_w-10, seat_d-10, 8, 4);\n            translate([wall_t, wall_t, wall_t]) \n                rounded_box(seat_w-10-wall_t*2, seat_d-10-wall_t*2, 8-wall_t, 3);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, leg_h]) {\n    // Seat\n    aria_seat();\n    \n    // Cushion\n    aria_cushion();\n    \n    // Backrest\n    translate([0, seat_d-wall_t*3, wall_t*3]) {\n        aria_backrest();\n    }\n    \n    // Legs\n    aria_leg(0, 0);\n    aria_leg(seat_w-leg_t, 0);\n    aria_leg(0, seat_d-leg_t);\n    aria_leg(seat_w-leg_t, seat_d-leg_t);\n    \n    // Stretchers\n    front_stretcher();\n    side_stretcher();\n}",
    "renders": true
  },
  {
    "toy": "blaze",
    "openscad_code": "// Blaze Toy - Realistic Style\n// Medium complexity OpenSCAD model\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 1;\n\n// Main dimensions\nblaze_width = 50;\nblaze_height = 60;\nblaze_depth = 25;\nrod_diameter = 5;\nrod_length = 80;\n\n// Blaze head module\nmodule blaze_head() {\n    // Main head block\n    translate([0, 0, blaze_height/2])\n    cube([blaze_width, blaze_depth, blaze_height], center=true);\n    \n    // Rounded top corners\n    translate([0, 0, blaze_height - 5])\n    scale([1, 0.8, 0.5])\n    sphere(d=blaze_width);\n    \n    // Eyes\n    for(x = [-blaze_width/3, blaze_width/3]) {\n        translate([x, blaze_depth/2 + 1, blaze_height/2 + 5])\n        rotate([0, 0, 0])\n        color(\"yellow\")\n        cylinder(h=wall_thickness, d=6);\n        \n        // Eye pupils\n        translate([x, blaze_depth/2 + 2, blaze_height/2 + 5])\n        color(\"black\")\n        cylinder(h=wall_thickness + 0.5, d=3);\n    }\n    \n    // Mouth\n    translate([0, blaze_depth/2 + 1, blaze_height/2 - 10])\n    color(\"darkorange\")\n    cube([20, wall_thickness, 8], center=true);\n}\n\n// Flame details\nmodule flames() {\n    // Top flames\n    for(i = [-1, 0, 1]) {\n        translate([i * 8, 0, blaze_height + 5])\n        rotate([0, i * 10, 0])\n        scale([1, 0.8, 1.5])\n        color(\"orange\")\n        cylinder(h1=8, h2=0, d1=6, d2=0);\n    }\n    \n    // Side flames\n    for(side = [-1, 1]) {\n        for(i = [-1, 1]) {\n            translate([side * blaze_width/2, i * 8, blaze_height/2 - 5])\n            rotate([90, 0, side * 10])\n            color(\"red\")\n            cylinder(h1=10, h2=0, d1=4, d2=0);\n        }\n    }\n}\n\n// Handle rod\nmodule handle_rod() {\n    // Main rod\n    translate([0, -rod_length/2 - blaze_depth/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=rod_length, d=rod_diameter);\n    \n    // Handle grip\n    translate([0, -rod_length - blaze_depth/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=15, d=rod_diameter + 4);\n    \n    // Grip rings\n    for(pos = [-5, 0, 5]) {\n        translate([0, -rod_length - blaze_depth/2 + pos, 0])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=rod_diameter + 8);\n    }\n}\n\n// Connection joint\nmodule connection_joint() {\n    // Reinforcement ring\n    translate([0, blaze_depth/2, 0])\n    cylinder(h=wall_thickness + 2, d=rod_diameter + 8);\n    \n    // Support brackets\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate([rod_diameter/2 + 3, blaze_depth/2, 0])\n        cube([6, 8, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    blaze_head();\n    flames();\n    \n    // Color transition\n    translate([0, 0, -5])\n    color(\"gray\")\n    cube([blaze_width + 4, blaze_depth + 4, 10], center=true);\n    \n    connection_joint();\n    handle_rod();\n}\n\n// Print support base\ntranslate([0, -rod_length - blaze_depth/2 - 10, -5])\ncube([rod_diameter + 20, 5, 10], center=true);",
    "renders": true
  },
  {
    "toy": "comet",
    "openscad_code": "// Comet Toy - Realistic Medium Complexity\n// Overall dimensions: ~100mm long, ~40mm tall\n\n$fn = 32;\n\n// Main comet nucleus with hollow core for 3D printing\nmodule nucleus() {\n    difference() {\n        // Outer icy surface\n        sphere(d = 35);\n        \n        // Hollow core\n        sphere(d = 31);\n        \n        // Flat bottom for stable printing\n        translate([0, 0, -17.5])\n            cube([35, 35, 17.5], center = true);\n    }\n}\n\n// Impact crater details\nmodule crater(x, y, z, size) {\n    translate([x, y, z])\n        difference() {\n            sphere(d = size);\n            translate([0, 0, -size/2])\n                cube([size*2, size*2, size], center = true);\n        }\n}\n\n// Comet tail structure with toy-safe rounded edges\nmodule tail() {\n    // Main tail body\n    translate([0, 0, -5])\n        difference() {\n            // Tail cone\n            cylinder(h1 = 0, h2 = 25, r1 = 20, r2 = 5, center = true);\n            \n            // Hollow for printing\n            cylinder(h1 = 0, h2 = 25, r1 = 18, r2 = 3, center = true);\n        }\n    \n    // Tail support structure (toy-safe)\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([10, 0, -15])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, r = 2, center = true);\n    }\n}\n\n// Surface texture bumps for realistic icy appearance\nmodule ice_bumps() {\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([16, 0, 5])\n                sphere(d = 4);\n    }\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([12, 0, -5])\n                sphere(d = 3);\n    }\n}\n\n// Toy wheels for rolling action\nmodule wheels() {\n    // Wheel mounts\n    translate([-15, 0, -20])\n        rotate([0, 90, 0])\n            cylinder(h = 6, r = 3, center = true);\n    translate([15, 0, -20])\n        rotate([0, 90, 0])\n            cylinder(h = 6, r = 3, center = true);\n    \n    // Wheels\n    translate([-15, 0, -20])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 4, r = 8, center = true);\n                cylinder(h = 5, r = 4, center = true);\n            }\n    translate([15, 0, -20])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 4, r = 8, center = true);\n                cylinder(h = 5, r = 4, center = true);\n            }\n}\n\n// Assembly\nunion() {\n    // Main body\n    nucleus();\n    \n    // Surface details\n    crater(-8, 8, 5, 6);\n    crater(10, -5, 3, 4);\n    crater(-5, -10, -2, 5);\n    \n    ice_bumps();\n    \n    // Tail attachment\n    translate([0, 0, -17])\n        tail();\n    \n    // Toy wheels\n    wheels();\n    \n    // Handle for play\n    translate([0, 0, 25])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 20, r = 6, center = true);\n                cylinder(h = 21, r = 3.5, center = true);\n            }\n}",
    "renders": true
  },
  {
    "toy": "delta",
    "openscad_code": "// Delta Toy Robot - Realistic Style\n// Overall dimensions: ~80mm tall\n\n// Parameters\n$fn = 32;\nwall = 2;\nbody_h = 35;\nbody_r = 25;\nhead_r = 18;\nleg_l = 30;\nleg_r = 6;\narm_l = 20;\narm_r = 4;\n\nmodule body() {\n    // Main body cylinder\n    difference() {\n        cylinder(h=body_h, r=body_r);\n        // Hollow interior\n        translate([0, 0, wall]) \n            cylinder(h=body_h-wall*2, r=body_r-wall);\n    }\n    \n    // Top dome detail\n    translate([0, 0, body_h])\n        sphere(r=head_r);\n    \n    // Side panels\n    for(i=[-1,1]) {\n        translate([i*body_r, 0, body_h/2]) {\n            rotate([0,90,0])\n                cylinder(h=body_h*0.8, r=body_r*0.6);\n            // Panel detail\n            translate([body_r*0.2, 0, 0])\n                cube([wall, body_h*0.9, body_r*0.3], center=true);\n        }\n    }\n}\n\nmodule head() {\n    // Head sphere\n    difference() {\n        sphere(r=head_r);\n        // Hollow top\n        translate([0, 0, head_r-wall])\n            sphere(r=head_r-wall);\n    }\n    \n    // Eye details\n    for(i=[-1,1]) {\n        translate([i*head_r*0.4, -head_r*0.8, head_r*0.5]) {\n            rotate([0,90,0])\n                cylinder(h=head_r*0.1, r=head_r*0.15);\n            // Eye socket\n            translate([0, -head_r*0.05, 0])\n                sphere(r=head_r*0.12);\n        }\n    }\n}\n\nmodule arm(side=1) {\n    // Upper arm\n    translate([side*(body_r-5), 0, body_h*0.7]) {\n        rotate([-30*side, 0, 0])\n            cylinder(h=arm_l, r=arm_r);\n        \n        // Shoulder joint\n        sphere(r=arm_r*1.2);\n        \n        // Lower arm\n        translate([0, 0, arm_l])\n            rotate([45*side, 0, 0])\n                cylinder(h=arm_l*0.8, r=arm_r*0.8);\n    }\n}\n\nmodule leg(side=1) {\n    // Upper leg\n    translate([side*(body_r-8), 0, 0]) {\n        rotate([15*side, 0, 0])\n            cylinder(h=leg_l*0.6, r=leg_r);\n        \n        // Hip joint\n        sphere(r=leg_r*1.3);\n        \n        // Lower leg\n        translate([0, 0, leg_l*0.6])\n            rotate([-15*side, 0, 0])\n                cylinder(h=leg_l*0.4, r=leg_r*0.9);\n    }\n}\n\nmodule foot(side=1) {\n    // Basic foot\n    translate([side*(body_r-8), 0, -leg_l*0.4]) {\n        cube([leg_r*2.5, leg_r*3, leg_r*1.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Body\n    body();\n    \n    // Head on top\n    translate([0, 0, body_h + head_r*0.8])\n        head();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Feet\n    foot(1);\n    foot(-1);\n}",
    "renders": true
  },
  {
    "toy": "echo",
    "openscad_code": "// Echo toy - realistic style\n// Dimensions: ~60mm tall\n\n$fn=32;\n\n// Main body shell\nmodule shell() {\n    difference() {\n        // Outer shell\n        union() {\n            cylinder(h=50, r1=28, r2=25, center=true);\n            translate([0,0,-20]) sphere(r=28);\n        }\n        \n        // Inner cavity\n        translate([0,0,-5]) cylinder(h=45, r1=25, r2=22, center=true);\n        translate([0,0,-20]) sphere(r=25);\n        \n        // Top hole\n        translate([0,0,26]) cylinder(h=10, r=6, center=true);\n    }\n}\n\n// Ring details\nmodule rings() {\n    for(i=[0:2]) {\n        translate([0,0,10-i*15]) \n            difference() {\n                cylinder(h=2, r=28.5, center=true);\n                cylinder(h=3, r=26, center=true);\n            }\n    }\n}\n\n// Bottom button array\nmodule buttons() {\n    // Play button\n    translate([0,-18,-20]) \n        difference() {\n            cube([12,6,3], center=true);\n            translate([0,0,1.5]) cube([10,4,3], center=true);\n        }\n    \n    // Volume buttons\n    translate([-10,-18,-20]) \n        difference() {\n            cube([6,4,2], center=true);\n            translate([0,0,1]) cube([4,2,2], center=true);\n        }\n    \n    translate([10,-18,-20]) \n        difference() {\n            cube([6,4,2], center=true);\n            translate([0,0,1]) cube([4,2,2], center=true);\n        }\n}\n\n// Microphone grille\nmodule mic_grille() {\n    translate([0,20,-5]) {\n        difference() {\n            cylinder(h=8, r=8, center=true);\n            cylinder(h=9, r=6, center=true);\n        }\n        \n        // Grille holes\n        for(a=[0:45:315]) {\n            rotate([0,0,a])\n                translate([7,0,-5]) \n                    cylinder(h=10, r=0.5, center=true);\n        }\n    }\n}\n\n// LED ring\nmodule led_ring() {\n    translate([0,0,25]) {\n        difference() {\n            cylinder(h=3, r=25, center=true);\n            cylinder(h=4, r=22, center=true);\n        }\n        \n        // LED dots\n        for(a=[0:30:330]) {\n            rotate([0,0,a])\n                translate([23.5,0,25]) \n                    sphere(r=1.5);\n        }\n    }\n}\n\n// Power connector\nmodule power_port() {\n    translate([0,0,-20]) {\n        difference() {\n            cylinder(h=5, r=4, center=true);\n            cylinder(h=6, r=2.5, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    shell();\n    rings();\n    buttons();\n    mic_grille();\n    led_ring();\n    power_port();\n}",
    "renders": true
  },
  {
    "toy": "frost",
    "openscad_code": "// Frost Toy - Realistic Style, Medium Complexity\n// A child's wooden frost toy chest with hinged lid and safety hinges\n\n$fn = 36;\n\n// Overall dimensions\nlength = 120;\nwidth = 70;\nheight = 65;\n\n// Wall thickness\nwall = 2.5;\n\n// Leg dimensions\nleg_height = 12;\nleg_width = 8;\n\n// Hinge dimensions\nhinge_radius = 2.5;\nhinge_length = 15;\n\nmodule frost_body() {\n    difference() {\n        // Main chest body\n        cube([length, width, height]);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([length - 2*wall, width - 2*wall, height - wall]);\n        \n        // Rounded top edge\n        translate([0, 0, height - wall])\n            cube([length, width, wall]);\n    }\n}\n\nmodule lid() {\n    difference() {\n        // Main lid\n        translate([-2, -wall, height])\n            cube([length + 4, width + 2*wall, wall * 2]);\n        \n        // Rounded edge\n        translate([-2, -wall, height + wall])\n            cube([length + 4, width + 2*wall, wall]);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    translate([leg_width/2, leg_width/2, 0])\n        cube([leg_width, leg_width, leg_height]);\n    translate([length - leg_width*1.5, leg_width/2, 0])\n        cube([leg_width, leg_width, leg_height]);\n    \n    // Back legs\n    translate([leg_width/2, width - leg_width*1.5, 0])\n        cube([leg_width, leg_width, leg_height]);\n    translate([length - leg_width*1.5, width - leg_width*1.5, 0])\n        cube([leg_width, leg_width, leg_height]);\n}\n\nmodule hinges() {\n    // Left hinge\n    translate([wall, -wall/2, height - wall])\n        rotate([90, 0, 0])\n            cylinder(h = hinge_length, r = hinge_radius);\n    \n    // Right hinge\n    translate([length - wall, -wall/2, height - wall])\n        rotate([90, 0, 0])\n            cylinder(h = hinge_length, r = hinge_radius);\n}\n\nmodule handles() {\n    // Front handles\n    translate([length/4, wall/2, height/2])\n        rotate([0, 90, 0])\n            cylinder(h = wall*4, r = wall);\n    translate([3*length/4, wall/2, height/2])\n        rotate([0, 90, 0])\n            cylinder(h = wall*4, r = wall);\n}\n\nmodule safety_corners() {\n    // Rounded corners for child safety\n    for(i = [0, 1]) {\n        for(j = [0, 1]) {\n            translate([i ? length : 0, j ? width : 0, height - wall])\n                sphere(r = wall*1.5);\n        }\n    }\n}\n\nmodule wood_grain() {\n    // Simplified wood grain texture\n    for(i = [1:5:length-5]) {\n        translate([i, 0, height + 0.1])\n            cube([0.5, width, 0.2]);\n    }\n}\n\n// Assembly\nunion() {\n    frost_body();\n    lid();\n    legs();\n    hinges();\n    handles();\n    safety_corners();\n    wood_grain();\n}",
    "renders": true
  },
  {
    "toy": "glimmer",
    "openscad_code": "// Realistic 3D-printable Glimmer toy chair\n// Overall size: ~100 mm height\n\n$fn = 36;\n\n// Main module\nmodule glimmerChair() {\n    // Seat cushion\n    translate([0, 0, 45]) \n        roundedCube([50, 50, 10], 5);\n\n    // Backrest\n    translate([0, -22, 75]) \n        rotate([10, 0, 0])\n        roundedCube([48, 8, 60], 4);\n\n    // Backrest vertical spindles\n    for (x = [-15, -5, 5, 15]) {\n        translate([x, -25, 75]) \n            rotate([10, 0, 0])\n            cylinder(h = 60, r = 2.2);\n    }\n\n    // Legs with stretchers\n    // Front left\n    translate([-20, 20, 0]) \n        cylinder(h = 45, r = 4);\n\n    // Front right\n    translate([20, 20, 0]) \n        cylinder(h = 45, r = 4);\n\n    // Rear left\n    translate([-20, -20, 0]) \n        cylinder(h = 45, r = 4);\n\n    // Rear right\n    translate([20, -20, 0]) \n        cylinder(h = 45, r = 4);\n\n    // Side stretchers\n    translate([0, 20, 22]) \n        rotate([0, 90, 0])\n        cylinder(h = 40, r = 2);\n\n    translate([0, -20, 22]) \n        rotate([0, 90, 0])\n        cylinder(h = 40, r = 2);\n\n    // Front & back stretchers\n    translate([-20, 0, 22]) \n        rotate([90, 0, 0])\n        cylinder(h = 40, r = 2);\n\n    translate([20, 0, 22]) \n        rotate([90, 0, 0])\n        cylinder(h = 40, r = 2);\n\n    // Decorative finials on backrest\n    translate([-20, -22, 108]) \n        sphere(r = 3);\n\n    translate([20, -22, 108]) \n        sphere(r = 3);\n\n    // Toy-style rounded feet\n    translate([-20, 20, -3]) \n        sphere(r = 5);\n\n    translate([20, 20, -3]) \n        sphere(r = 5);\n\n    translate([-20, -20, -3]) \n        sphere(r = 5);\n\n    translate([20, -20, -3]) \n        sphere(r = 5);\n}\n\n// Helper module for rounded cubes\nmodule roundedCube(size, radius) {\n    hull() {\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                for (z = [-1, 1])\n                    translate([x * (size[0]/2 - radius),\n                               y * (size[1]/2 - radius),\n                               z * (size[2]/2 - radius)])\n                        sphere(r = radius);\n    }\n}\n\nglimmerChair();",
    "renders": true
  },
  {
    "toy": "hawk",
    "openscad_code": "$fn=50;\n\n// Overall dimensions (mm)\nbody_length = 80;\nbody_width = 30;\nbody_height = 40;\nwing_span = 100;\nhead_size = 20;\ntail_length = 35;\nleg_length = 15;\nfoot_size = 8;\n\n// Toy-style joints\njoint_radius = 3;\njoint_gap = 1;\n\nmodule hawk_toy() {\n    // Main body with toy-like proportions\n    union() {\n        // Central body\n        translate([0, 0, body_height/2])\n            scale([1, 0.7, 0.6])\n                sphere(d=body_width);\n        \n        // Head\n        translate([body_length/2 - 5, 0, body_height/2 + 5])\n            sphere(d=head_size);\n        \n        // Beak\n        translate([body_length/2 + 8, 0, body_height/2 + 5])\n            rotate([0, -20, 0])\n                cylinder(h=12, r1=4, r2=1);\n        \n        // Eyes (toy buttons)\n        translate([body_length/2 - 2, -6, body_height/2 + 7])\n            sphere(d=4);\n        translate([body_length/2 - 2, 6, body_height/2 + 7])\n            sphere(d=4);\n        \n        // Wings with toy joint connections\n        for(side = [-1, 1]) {\n            // Wing root joint\n            translate([-body_length/4, side*body_width/2, body_height/2])\n                cylinder(h=joint_radius*2, r=joint_radius);\n            \n            // Wing panel\n            translate([-wing_span/4, side*(body_width/2 + 5), body_height/2])\n                rotate([0, 0, side*20])\n                    scale([1.5, 0.3, 0.1])\n                        cube([wing_span/2, 20, 2]);\n            \n            // Wing tip\n            translate([-wing_span/2 - 10, side*(body_width/2 + 10), body_height/2])\n                sphere(d=8);\n        }\n        \n        // Tail feathers in toy style\n        for(i=[0:2]) {\n            translate([-body_length/2 - tail_length/2, (i-1)*8, body_height/2 - 5])\n                rotate([0, 10, 0])\n                    scale([1, 0.3, 0.1])\n                        cube([tail_length, 6, 2]);\n        }\n        \n        // Legs with ball joints\n        for(side = [-1, 1]) {\n            // Upper leg\n            translate([-body_length/4, side*body_width/3, body_height/4])\n                rotate([30, 0, 0])\n                    cylinder(h=leg_length, r=4);\n            \n            // Lower leg joint\n            translate([-body_length/4, side*body_width/3, body_height/4 - leg_length])\n                sphere(r=joint_radius);\n            \n            // Foot/talon\n            translate([-body_length/4 - 5, side*body_width/3, body_height/4 - leg_length - 5])\n                rotate([0, 30, 0])\n                    cube([foot_size, 6, 3]);\n        }\n        \n        // Toy safety features - rounded edges\n        difference() {\n            // Main body smoothing\n            translate([0, 0, body_height/2])\n                sphere(d=body_width + 4);\n            \n            // Hollow center for weight reduction\n            translate([0, 0, body_height/2])\n                sphere(d=body_width - 4);\n        }\n    }\n}\n\n// Generate the hawk toy\nhawk_toy();",
    "renders": true
  },
  {
    "toy": "indigo",
    "openscad_code": "// Indigo Toy Chair - Realistic Style, Medium Complexity\n// Scale: ~100mm tall\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 75;\nchair_height = 100;\nseat_height = 45;\nback_height = 55;\n\n// Wall thickness\nwall = 2;\n\nmodule chair_frame() {\n    // Seat frame - top rectangle\n    translate([0, 0, seat_height])\n        cube([chair_width, chair_depth, wall], center=true);\n    \n    // Seat frame - bottom rectangle\n    translate([0, 0, seat_height-wall])\n        cube([chair_width-wall*2, chair_depth-wall*2, wall], center=true);\n    \n    // Back frame - top bar\n    translate([0, -chair_depth/2+wall, seat_height+back_height])\n        cube([chair_width-wall*4, wall, wall], center=true);\n    \n    // Back frame - vertical bars\n    for(x = [-chair_width/4, 0, chair_width/4]) {\n        translate([x, -chair_depth/2+wall*2, seat_height+back_height/2])\n            cube([wall, wall*2, back_height], center=true);\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat cushion\n    translate([0, 0, seat_height+wall])\n        cube([chair_width-wall*4, chair_depth-wall*4, 8], center=true);\n    \n    // Cushion piping detail\n    color(\"indigo\")\n    translate([0, 0, seat_height+wall+4])\n        cube([chair_width-wall*3, chair_depth-wall*3, 1], center=true);\n}\n\nmodule back_cushion() {\n    // Main back cushion\n    translate([0, -chair_depth/2+wall*2, seat_height+back_height/2])\n        cube([chair_width-wall*4, wall*2, back_height-wall*2], center=true);\n    \n    // Cushion tufting details\n    for(y = [seat_height+10, seat_height+30, seat_height+45]) {\n        translate([0, -chair_depth/2+wall*2, y])\n            sphere(r=3, $fn=16);\n    }\n}\n\nmodule legs() {\n    leg_positions = [\n        [-chair_width/2+wall*2, chair_depth/2-wall*2, 0],\n        [chair_width/2-wall*2, chair_depth/2-wall*2, 0],\n        [-chair_width/2+wall*2, -chair_depth/2+wall*2, 0],\n        [chair_width/2-wall*2, -chair_depth/2+wall*2, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        translate(pos)\n            cylinder(h=seat_height-wall, r1=4, r2=3, $fn=12);\n    }\n    \n    // Leg stretchers\n    translate([0, chair_depth/2-wall*2, seat_height/2])\n        cube([chair_width-wall*4, wall, wall], center=true);\n    translate([0, -chair_depth/2+wall*2, seat_height/2])\n        cube([chair_width-wall*4, wall, wall], center=true);\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2, 0, seat_height+15])\n        cube([wall*3, chair_depth/2, wall*3], center=true);\n    translate([-chair_width/2, chair_depth/4, seat_height+15])\n        cube([wall*3, wall*3, 20], center=true);\n    \n    // Right armrest\n    translate([chair_width/2, 0, seat_height+15])\n        cube([wall*3, chair_depth/2, wall*3], center=true);\n    translate([chair_width/2, chair_depth/4, seat_height+15])\n        cube([wall*3, wall*3, 20], center=true);\n}\n\n// Assembly\nunion() {\n    // Frame structure\n    chair_frame();\n    \n    // Cushions\n    color(\"indigo\")\n    seat_cushion();\n    back_cushion();\n    \n    // Support structure\n    legs();\n    \n    // Armrests\n    armrests();\n}\n\n// Scale to 100mm height\nscale(100/chair_height);",
    "renders": true
  },
  {
    "toy": "jade",
    "openscad_code": "// Jade Toy Rocking Chair\n// Realistic style, medium complexity\n\nmodule leg(x_pos, z_pos) {\n    // Rocking chair curved leg\n    translate([x_pos, -15, z_pos]) {\n        difference() {\n            // Main curved leg\n            rotate([0, 90, 0])\n                cylinder(h=25, r1=4, r2=4, $fn=20);\n            \n            // Inner hollow for material saving\n            rotate([0, 90, 0])\n                cylinder(h=25, r1=2.5, r2=2.5, $fn=20);\n        }\n        \n        // Rocking curve\n        translate([0, 0, -12.5]) {\n            difference() {\n                rotate([90, 0, 0])\n                    cylinder(h=8, r1=20, r2=20, $fn=30);\n                rotate([90, 0, 0])\n                    cylinder(h=8.2, r1=16, r2=16, $fn=30);\n            }\n        }\n    }\n}\n\nmodule slat(count, spacing) {\n    // Backrest slats\n    for(i = [0:count-1]) {\n        translate([i*spacing - 15, -8, 0]) {\n            difference() {\n                cube([3, 2, 30]);\n                translate([0.5, 0.5, 0.5])\n                    cube([2, 1, 29]);\n            }\n        }\n    }\n}\n\n// Seat base\ntranslate([0, 0, 20]) {\n    difference() {\n        cube([40, 30, 5]);\n        translate([2, 2, 2])\n            cube([36, 26, 3]);\n    }\n}\n\n// Backrest frame\ntranslate([0, -8, 37.5]) {\n    difference() {\n        cube([38, 2, 25]);\n        translate([2, 0.5, 2])\n            cube([34, 1, 21]);\n    }\n}\n\n// Backrest slats\nslat(12, 3);\n\n// Armrests\ntranslate([-23, 0, 32.5]) {\n    difference() {\n        rotate([0, 0, 15])\n            cube([4, 20, 2]);\n        translate([1, 1, 1])\n            cube([2, 18, 1]);\n    }\n}\n\ntranslate([23, 0, 32.5]) {\n    difference() {\n        rotate([0, 0, -15])\n            cube([4, 20, 2]);\n        translate([1, 1, 1])\n            cube([2, 18, 1]);\n    }\n}\n\n// Legs\nleg(-15, 17.5);\nleg(15, 17.5);\n\n// Armrest supports\ntranslate([-21.5, -12, 22.5]) {\n    difference() {\n        cube([2, 2, 10]);\n        translate([0.5, 0.5, 0.5])\n            cube([1, 1, 9]);\n    }\n}\n\ntranslate([21.5, -12, 22.5]) {\n    difference() {\n        cube([2, 2, 10]);\n        translate([0.5, 0.5, 0.5])\n            cube([1, 1, 9]);\n    }\n}\n\n// Decorative jade spheres on armrests\ntranslate([-23, 10, 34]) {\n    sphere(r=2, $fn=16);\n}\n\ntranslate([23, 10, 34]) {\n    sphere(r=2, $fn=16);\n}",
    "renders": true
  },
  {
    "toy": "kairo",
    "openscad_code": "// Realistic Kairo (Japanese Kotatsu) Toy - Medium Complexity\n// Overall dimensions: 120mm x 120mm x 80mm\n\n$fn = 32;\n\n// Main parameters\ntable_top_size = 120;\ntable_top_thickness = 8;\nleg_height = 60;\nleg_width = 10;\nheater_box_size = 80;\nheater_box_height = 12;\nblanket_thickness = 3;\nblanket_overhang = 15;\n\nmodule table_top() {\n    // Main tabletop surface\n    difference() {\n        cube([table_top_size, table_top_size, table_top_thickness], center=true);\n        \n        // Recessed area for heater\n        translate([0, 0, -table_top_thickness/2 + 0.5])\n            cube([heater_box_size + 4, heater_box_size + 4, table_top_thickness], center=true);\n    }\n    \n    // Rounded edges\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i * (table_top_size/2 - 4), j * (table_top_size/2 - 4), 0])\n                cylinder(h=table_top_thickness, r1=4, r2=4, center=true);\n        }\n    }\n}\n\nmodule table_leg(pos_x, pos_y) {\n    // Leg base\n    translate([pos_x, pos_y, -leg_height/2 - table_top_thickness/2]) {\n        difference() {\n            cube([leg_width, leg_width, leg_height], center=true);\n            // Hollow for material saving\n            cube([leg_width - 4, leg_width - 4, leg_height - 4], center=true);\n        }\n        \n        // Bracing blocks\n        translate([0, 0, -leg_height/2 + 5])\n            cube([leg_width + 2, leg_width + 2, 8], center=true);\n    }\n}\n\nmodule heater_unit() {\n    translate([0, 0, -table_top_thickness/2 - heater_box_height/2]) {\n        // Heater housing\n        difference() {\n            cube([heater_box_size, heater_box_size, heater_box_height], center=true);\n            cube([heater_box_size - 4, heater_box_size - 4, heater_box_height - 2], center=true);\n        }\n        \n        // Heater coil pattern\n        for (i = [-2:2]) {\n            for (j = [-2:2]) {\n                translate([i * 12, j * 12, heater_box_height/2 - 1])\n                    cylinder(h=2, r=3, $fn=6);\n            }\n        }\n        \n        // Vent slots\n        for (i = [-3:3]) {\n            translate([i * 10, heater_box_size/2 - 1, 0])\n                cube([2, 2, heater_box_height], center=true);\n            translate([heater_box_size/2 - 1, i * 10, 0])\n                cube([2, 2, heater_box_height], center=true);\n        }\n    }\n}\n\nmodule blanket() {\n    // Quilted blanket\n    color(\"darkred\")\n    translate([0, 0, table_top_thickness/2 + blanket_thickness/2]) {\n        difference() {\n            cube([table_top_size + blanket_overhang*2, table_top_size + blanket_overhang*2, blanket_thickness], center=true);\n            // Hole in center for heater\n            translate([0, 0, -blanket_thickness/2])\n                cube([heater_box_size - 10, heater_box_size - 10, blanket_thickness + 1], center=true);\n        }\n        \n        // Quilt stitching pattern\n        for (i = [-4:4]) {\n            for (j = [-4:4]) {\n                if (abs(i) > 2 || abs(j) > 2) {\n                    translate([i * 12, j * 12, blanket_thickness/2])\n                        cylinder(h=0.5, r=0.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule power_cord() {\n    // Power cord connector\n    translate([table_top_size/2 - 5, 0, -table_top_thickness/2 - heater_box_height - 3]) {\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=4, r2=2);\n        translate([0, -4, 0])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=1.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    table_top();\n    \n    // Four legs\n    table_leg((table_top_size/2 - leg_width), (table_top_size/2 - leg_width));\n    table_leg(-(table_top_size/2 - leg_width), (table_top_size/2 - leg_width));\n    table_leg((table_top_size/2 - leg_width), -(table_top_size/2 - leg_width));\n    table_leg(-(table_top_size/2 - leg_width), -(table_top_size/2 - leg_width));\n    \n    heater_unit();\n    power_cord();\n}\n\n// Optional blanket (can be printed separately)\n// blanket();",
    "renders": true
  },
  {
    "toy": "luna",
    "openscad_code": "// Luna Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 90mm x 100mm (W x D x H)\n\n// Wall thickness constant\nwall = 2;\n\n// Main seat module\nmodule seat() {\n    // Seat base with rounded edges\n    difference() {\n        // Main seat block\n        translate([0, 0, 45])\n            rounded_cube([80, 90, 8], 3);\n        \n        // Hollow interior for weight reduction\n        translate([0, 0, 47])\n            rounded_cube([76, 86, 6], 2);\n        \n        // Drain holes (3D printing friendly)\n        for(x = [-25, 0, 25])\n            for(y = [-30, 0, 30])\n                translate([x, y, 45])\n                    cylinder(h=10, d=4, $fn=8);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -40, 85])\n        difference() {\n            // Outer curved shape\n            scale([1, 1.2, 1])\n                rotate([90, 0, 0])\n                    cylinder(h=80, d1=80, d2=75, $fn=40);\n            \n            // Inner hollow\n            translate([0, 0, -1])\n                scale([0.9, 1.1, 0.9])\n                    rotate([90, 0, 0])\n                        cylinder(h=82, d1=76, d2=71, $fn=40);\n            \n            // Top edge rounding\n            translate([0, 0, -5])\n                cube([100, 10, 10], center=true);\n        }\n    \n    // Backrest support bars\n    for(x = [-25, 0, 25]) {\n        translate([x, -42, 60])\n            rounded_cube([6, 4, 30], 2);\n    }\n}\n\n// Leg module\nmodule leg(x, y, angle) {\n    translate([x, y, 0])\n        rotate([0, 0, angle])\n            difference() {\n                // Main leg post\n                cylinder(h=45, d=12, $fn=20);\n                \n                // Hollow interior\n                translate([0, 0, 2])\n                    cylinder(h=41, d=8, $fn=20);\n                \n                // Foot detail\n                translate([0, 0, -1])\n                    cylinder(h=6, d1=14, d2=12, $fn=20);\n            }\n}\n\n// Cross support bars\nmodule support_bar(x1, y1, x2, y2, z) {\n    length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n    angle = atan2(y2-y1, x2-x1);\n    \n    translate([(x1+x2)/2, (y1+y2)/2, z])\n        rotate([0, 0, angle])\n            difference() {\n                cube([length, 8, 6], center=true);\n                cube([length-2*wall, 4, 4], center=true);\n            }\n}\n\n// Rounded cube helper module\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [-1, 1])\n            for(dy = [-1, 1])\n                for(dz = [-1, 1])\n                    translate([dx*(size[0]/2-radius), \n                              dy*(size[1]/2-radius), \n                              dz*(size[2]/2-radius)])\n                        sphere(r=radius, $fn=16);\n    }\n}\n\n// Cushion detail\nmodule cushion() {\n    translate([0, 0, 53])\n        difference() {\n            // Main cushion\n            rounded_cube([74, 84, 6], 5);\n            \n            // Tufted details\n            for(x = [-25, 25])\n                for(y = [-30, 30])\n                    translate([x, y, 5.5])\n                        sphere(d=12, $fn=20);\n        }\n}\n\n// Assembly\nunion() {\n    // Main components\n    seat();\n    backrest();\n    \n    // Legs at corners\n    leg(-35, -35, 0);\n    leg(35, -35, 0);\n    leg(-35, 35, 0);\n    leg(35, 35, 0);\n    \n    // Support structure\n    support_bar(-35, -35, 35, -35, 25);\n    support_bar(-35, 35, 35, 35, 25);\n    support_bar(-35, -35, -35, 35, 25);\n    support_bar(35, -35, 35, 35, 25);\n    \n    // X-shaped support\n    support_bar(-35, -35, 35, 35, 15);\n    support_bar(35, -35, -35, 35, 15);\n    \n    // Cushion\n    cushion();\n    \n    // Decorative backrest top\n    translate([0, -40, 100])\n        difference() {\n            cylinder(h=4, d=70, $fn=40);\n            cylinder(h=5, d=66, $fn=40);\n        }\n}",
    "renders": true
  },
  {
    "toy": "mako",
    "openscad_code": "// Mako shark toy - realistic style, medium complexity\n// Overall length: 120mm, height: 40mm\n\nmodule body() {\n    // Main body - ellipsoid shape\n    scale([1, 0.6, 0.3]) sphere(d=80, $fn=40);\n}\n\nmodule tail() {\n    // Upper tail lobe - crescent shape\n    translate([40, 0, 0]) rotate([0, 0, -15]) scale([1.2, 0.3, 0.15]) sphere(d=40, $fn=30);\n    \n    // Lower tail lobe\n    translate([35, 0, -8]) rotate([0, 0, 15]) scale([0.8, 0.2, 0.1]) sphere(d=30, $fn=30);\n}\n\nmodule dorsal_fin() {\n    // Main dorsal fin - triangular\n    translate([10, 0, 12]) rotate([0, 0, 0]) \n    linear_extrude(height=20, scale=0.1)\n    polygon([[0, 0], [10, 15], [20, 0]]);\n    \n    // Second dorsal fin\n    translate([25, 0, 8]) rotate([0, 0, 0])\n    linear_extrude(height=12, scale=0.1)\n    polygon([[0, 0], [6, 10], [12, 0]]);\n}\n\nmodule pectoral_fin() {\n    // Left pectoral fin\n    translate([-10, -20, -5]) rotate([0, 30, -20])\n    scale([1, 0.3, 0.1]) sphere(d=25, $fn=20);\n    \n    // Right pectoral fin\n    translate([-10, 20, -5]) rotate([0, -30, 20])\n    scale([1, 0.3, 0.1]) sphere(d=25, $fn=20);\n}\n\nmodule mouth() {\n    // Mouth cavity\n    translate([-35, 0, -8]) \n    scale([0.8, 0.3, 0.2]) sphere(d=20, $fn=20);\n}\n\nmodule gills() {\n    // Five gill slits on each side\n    for(i=[1:5]) {\n        // Left side\n        translate([-20 + i*4, -22, -5 + i*1.5])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d1=3, d2=1, $fn=8);\n        \n        // Right side\n        translate([-20 + i*4, 22, -5 + i*1.5])\n        rotate([90, 0, 180])\n        cylinder(h=0.5, d1=3, d2=1, $fn=8);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-30, -12, 5])\n    sphere(d=6, $fn=20);\n    \n    // Right eye\n    translate([-30, 12, 5])\n    sphere(d=6, $fn=20);\n}\n\nmodule toy_features() {\n    // Wheels for toy functionality\n    translate([-40, -15, -15])\n    rotate([90, 0, 0])\n    cylinder(h=3, d=8, $fn=12);\n    \n    translate([-40, 15, -15])\n    rotate([90, 0, 0])\n    cylinder(h=3, d=8, $fn=12);\n    \n    // Tail wheel\n    translate([45, 0, -10])\n    rotate([90, 0, 0])\n    cylinder(h=3, d=6, $fn=12);\n    \n    // Pull string hole\n    translate([-45, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=5, d=4, $fn=12);\n}\n\n// Assembly\ndifference() {\n    union() {\n        body();\n        tail();\n        dorsal_fin();\n        pectoral_fin();\n        eyes();\n        toy_features();\n    }\n    \n    // Hollow out body for 3D printing\n    scale([0.9, 0.9, 0.9]) body();\n    \n    // Mouth cavity\n    mouth();\n    \n    // Gill details\n    gills();\n}",
    "renders": true
  },
  {
    "toy": "nova",
    "openscad_code": "// Nova Toy Sofa - Realistic Style Medium Complexity\n// Overall dimensions: 120mm width x 60mm depth x 65mm height\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nseat_height = 30;\nleg_height = 25;\narmrest_height = 45;\n\n// Main sofa body\nmodule sofa_body() {\n    // Base frame\n    difference() {\n        // Main block\n        translate([0, 0, seat_height/2 + leg_height])\n            cube([110, 55, seat_height], center=true);\n        \n        // Hollow interior\n        translate([0, 2.5, seat_height/2 + leg_height])\n            cube([106, 50, seat_height - wall_thickness], center=true);\n    }\n    \n    // Backrest\n    difference() {\n        // Backrest block\n        translate([0, -27.5, seat_height + leg_height + 30])\n            cube([110, 5, 35], center=true);\n        \n        // Hollow backrest\n        translate([0, -27.5, seat_height + leg_height + 30])\n            cube([106, wall_thickness, 31], center=true);\n    }\n    \n    // Armrests\n    difference() {\n        // Left armrest\n        translate([-55, 0, seat_height + leg_height + 15])\n            cube([5, 50, 30], center=true);\n        \n        // Hollow left armrest\n        translate([-55, 0, seat_height + leg_height + 15])\n            cube([wall_thickness, 46, 26], center=true);\n    }\n    \n    difference() {\n        // Right armrest\n        translate([55, 0, seat_height + leg_height + 15])\n            cube([5, 50, 30], center=true);\n        \n        // Hollow right armrest\n        translate([55, 0, seat_height + leg_height + 15])\n            cube([wall_thickness, 46, 26], center=true);\n    }\n}\n\n// Cushions\nmodule cushions() {\n    // Seat cushions (2 cushions)\n    for(i = [-1, 1]) {\n        translate([i * 27.5, 0, seat_height + leg_height + 3])\n            cube([52, 48, 6], center=true);\n    }\n    \n    // Backrest cushions\n    for(i = [-1, 1]) {\n        translate([i * 27.5, -25, seat_height + leg_height + 30])\n            scale([1, 0.8, 1])\n                cube([52, 5, 30], center=true);\n    }\n}\n\n// Legs\nmodule legs() {\n    // Four legs with rounded tops\n    for(x = [-50, 50])\n    for(y = [-20, 20]) {\n        // Leg post\n        translate([x, y, leg_height/2])\n            cylinder(h = leg_height, r = 3);\n            \n        // Decorative foot\n        translate([x, y, 1])\n            cylinder(h = 2, r1 = 4, r2 = 3);\n    }\n}\n\n// Decorative buttons on cushions\nmodule buttons() {\n    for(x = [-35, 0, 35])\n    for(y = [-15, 0, 15]) {\n        translate([x, y, seat_height + leg_height + 6.5])\n            sphere(r = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    sofa_body();\n    \n    // Add cushions\n    cushions();\n    \n    // Add legs\n    legs();\n    \n    // Add buttons on cushions\n    buttons();\n}",
    "renders": true
  },
  {
    "toy": "orion",
    "openscad_code": "// Orion Toy Chair - Realistic Style, Medium Complexity\n// Overall size: ~80mm width x 80mm depth x 90mm height\n\n// Parameters for toy proportions\nseat_w = 60;\nseat_d = 60;\nseat_h = 6;\nleg_h = 45;\nback_h = 35;\nback_t = 6;\narmrest_h = 20;\narmrest_w = 8;\nback_post_w = 10;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chair_leg(x, y) {\n    translate([x, y, 0])\n        difference() {\n            cylinder(h = leg_h, d1 = 12, d2 = 10, $fn = 16);  // Tapered leg\n            translate([0, 0, -1])  // Hollow for material saving\n                cylinder(h = leg_h + 2, d1 = 8, d2 = 6, $fn = 16);\n        }\n}\n\nmodule seat_cushion() {\n    difference() {\n        // Main seat block\n        translate([-seat_w/2, -seat_d/2, leg_h])\n            cube([seat_w, seat_d, seat_h]);\n        \n        // Cushion indent\n        translate([-seat_w/2 + wall, -seat_d/2 + wall, leg_h + wall])\n            cube([seat_w - 2*wall, seat_d - 2*wall, seat_h - wall + 1]);\n    }\n    \n    // Cushion piping detail\n    for (i = [0, 1]) {\n        translate([i ? seat_w/2 - 2 : -seat_w/2 + 2, 0, leg_h + seat_h - 1])\n            rotate([0, 90, 0])\n                cylinder(h = seat_d - 4, d = 2, $fn = 8);\n        translate([0, i ? seat_d/2 - 2 : -seat_d/2 + 2, leg_h + seat_h - 1])\n            cylinder(h = seat_w - 4, d = 2, $fn = 8);\n    }\n}\n\nmodule backrest() {\n    translate([-seat_w/2, -seat_d/2 + back_t/2, leg_h + seat_h])\n        difference() {\n            // Main backrest panel\n            cube([seat_w, back_t, back_h]);\n            \n            // Backrest cutout for lighter weight\n            translate([wall, wall/2, wall])\n                cube([seat_w - 2*wall, back_t - wall, back_h - 2*wall]);\n        }\n    \n    // Backrest posts\n    translate([-seat_w/2 + back_post_w/2, -seat_d/2 + back_t/2, leg_h + seat_h])\n        cube([back_post_w, back_t, back_h]);\n    translate([seat_w/2 - back_post_w/2, -seat_d/2 + back_t/2, leg_h + seat_h])\n        cube([back_post_w, back_t, back_h]);\n}\n\nmodule armrest(side) {\n    translate([side * (seat_w/2 - armrest_w/2), 0, leg_h + seat_h + armrest_h/2])\n        difference() {\n            // Main armrest\n            cube([armrest_w, seat_d - 10, armrest_h]);\n            \n            // Armrest hollow\n            translate([wall, wall, wall])\n                cube([armrest_w - 2*wall, seat_d - 10 - 2*wall, armrest_h - 2*wall]);\n        }\n    \n    // Armrest support\n    translate([side * (seat_w/2 - armrest_w/2), seat_d/2 - 5, leg_h + seat_h/2])\n        rotate([0, -side * 10, 0])\n            difference() {\n                cube([armrest_w, 8, seat_h/2 + armrest_h/2]);\n                translate([wall, wall, wall])\n                    cube([armrest_w - 2*wall, 6, seat_h/2 + armrest_h/2 - wall]);\n            }\n}\n\n// Assembly\nunion() {\n    // Legs\n    chair_leg(-seat_w/2 + 8, -seat_d/2 + 8);\n    chair_leg(seat_w/2 - 8, -seat_d/2 + 8);\n    chair_leg(-seat_w/2 + 8, seat_d/2 - 8);\n    chair_leg(seat_w/2 - 8, seat_d/2 - 8);\n    \n    // Seat\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "toy": "pixel",
    "openscad_code": "// Pixel Toy Sofa - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm wide x 60mm deep x 70mm tall\n\nmodule pixel_block(x=1, y=1, z=1) {\n    cube([8*x, 8*y, 8*z], center=true);\n}\n\n// Sofa base frame\nmodule sofa_base() {\n    difference() {\n        // Main base block\n        translate([0, 0, 6])\n            pixel_block(15, 7, 1.5);\n        \n        // Leg cutouts underneath\n        for(x=[-48, 48])\n            for(y=[-20, 20])\n                translate([x, y, 0])\n                    pixel_block(2, 2, 1.5);\n    }\n}\n\n// Sofa legs\nmodule sofa_legs() {\n    for(x=[-48, 48])\n        for(y=[-20, 20]) {\n            translate([x, y, -2])\n                difference() {\n                    pixel_block(2, 2, 2);\n                    // Hollow inside for material saving\n                    translate([0, 0, 6])\n                        scale([0.7, 0.7, 0.7])\n                        pixel_block(2, 2, 2);\n                }\n        }\n}\n\n// Seat cushions\nmodule seat_cushions() {\n    difference() {\n        // Main cushion block\n        translate([0, 0, 14])\n            pixel_block(15, 7, 2);\n        \n        // Cushion separation lines\n        for(x=[-32, 0, 32])\n            translate([x, 0, 14])\n                pixel_block(0.2, 7.2, 2.2);\n        \n        // Cushion dimples\n        for(x=[-48, -16, 16, 48])\n            for(y=[-20, 20])\n                translate([x, y, 18])\n                    sphere(d=4, $fn=8);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -28, 34])\n        difference() {\n            pixel_block(15, 1.5, 7);\n            \n            // Backrest curve\n            translate([0, 4, 20])\n                scale([15, 1.5, 7])\n                sphere(d=8, $fn=16);\n            \n            // Ventilation holes\n            for(x=[-40, -20, 0, 20, 40])\n                translate([x, 0, 34])\n                    cylinder(h=3, d=3, center=true, $fn=12);\n        }\n    \n    // Backrest cushions\n    translate([0, -20, 30])\n        difference() {\n            pixel_block(15, 1, 6);\n            \n            // Cushion divisions\n            for(x=[-32, 0, 32])\n                translate([x, 0, 30])\n                    pixel_block(0.2, 1.2, 6.2);\n        }\n}\n\n// Armrests\nmodule armrests() {\n    for(side=[-1, 1]) {\n        // Main armrest\n        translate([60*side, 0, 24])\n            difference() {\n                pixel_block(1.5, 7, 4.5);\n                \n                // Rounded top\n                translate([0, 0, 30])\n                    scale([1.5, 7, 1])\n                    sphere(d=8, $fn=12);\n                \n                // Inner curve\n                translate([-4*side, 0, 24])\n                    scale([1, 1, 4.5])\n                    sphere(d=8, $fn=12);\n            }\n        \n        // Armrest cushion\n        translate([60*side, 0, 34])\n            pixel_block(1.5, 6, 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Structural elements\n    sofa_base();\n    sofa_legs();\n    \n    // Comfort elements\n    seat_cushions();\n    backrest();\n    armrests();\n    \n    // Decorative elements\n    // Throw pillows\n    for(x=[-32, 32])\n        translate([x, 10, 26])\n            scale([0.8, 0.8, 0.6])\n            pixel_block(3, 3, 2);\n}",
    "renders": true
  },
  {
    "toy": "quake",
    "openscad_code": "// Quake Toy Rocking Horse - Realistic Medium Complexity\n// Overall size: ~120mm length x 80mm height x 45mm width\n\n// Main body assembly\nmodule rocking_horse() {\n    // Rockers - curved base for rocking motion\n    difference() {\n        // Outer rocker shape\n        translate([0, -10, 0])\n            scale([1, 0.3, 1])\n                cylinder(h=10, d=110, $fn=64);\n        \n        // Hollow out for material saving\n        translate([0, -8, 0])\n            scale([0.8, 0.3, 0.8])\n                cylinder(h=12, d=100, $fn=64);\n    }\n    \n    // Second rocker (mirrored)\n    mirror([1, 0, 0]) {\n        difference() {\n            translate([0, -10, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=10, d=110, $fn=64);\n            translate([0, -8, 0])\n                scale([0.8, 0.3, 0.8])\n                    cylinder(h=12, d=100, $fn=64);\n        }\n    }\n    \n    // Body - horse torso\n    union() {\n        // Main body\n        translate([0, 0, 15])\n            scale([1, 0.6, 0.8])\n                cube([60, 40, 50], center=true);\n        \n        // Neck\n        translate([25, 5, 35])\n            rotate([0, -15, 0])\n                scale([0.6, 0.5, 1.2])\n                    cylinder(h=30, d1=20, d2=15, center=true);\n        \n        // Head\n        translate([45, 10, 45])\n            scale([0.8, 0.6, 0.7])\n                sphere(d=25, $fn=32);\n    }\n    \n    // Legs - simplified cylindrical\n    module leg(x_pos, z_pos) {\n        translate([x_pos, -15, z_pos])\n            rotate([0, 0, 0])\n                cylinder(h=40, d=12, $fn=16);\n    }\n    \n    // Front legs\n    leg(20, 25);\n    leg(-20, 25);\n    \n    // Back legs\n    leg(15, 15);\n    leg(-15, 15);\n    \n    // Tail\n    translate([-35, 0, 25])\n        rotate([0, 45, 0])\n            scale([0.3, 0.3, 1])\n                cylinder(h=30, d=8, $fn=16);\n    \n    // Mane - series of small cylinders\n    for(i = [0:3]) {\n        translate([35 + i*4, 15 - i*2, 50 - i*3])\n            rotate([0, 10 + i*5, 0])\n                cylinder(h=8, d=6, $fn=8);\n    }\n    \n    // Saddle\n    difference() {\n        // Saddle base\n        translate([0, 0, 40])\n            scale([0.8, 0.7, 0.3])\n                cube([50, 35, 10], center=true);\n        \n        // Saddle hollow\n        translate([0, 0, 42])\n            scale([0.7, 0.6, 0.4])\n                cube([45, 30, 10], center=true);\n    }\n    \n    // Ears\n    module ear(x_pos, rot) {\n        translate([45 + x_pos, 15, 55])\n            rotate([0, rot, 0])\n                scale([0.3, 0.15, 0.6])\n                    cylinder(h=15, d=8, $fn=8);\n    }\n    \n    ear(5, -30);\n    ear(-5, 30);\n    \n    // Eyes - simple spheres\n    translate([50, 12, 48])\n        sphere(d=6, $fn=16);\n    translate([50, 8, 48])\n        sphere(d=6, $fn=16);\n    \n    // Handle bar for safety\n    translate([45, 20, 45])\n        rotate([0, -30, 0])\n            cylinder(h=50, d=8, $fn=16);\n    \n    // Support braces between rockers\n    for(i = [-1:1]) {\n        translate([i*25, -5, 0])\n            cube([4, 10, 8], center=true);\n    }\n}\n\n// Main assembly\nrocking_horse();",
    "renders": true
  },
  {
    "toy": "raven",
    "openscad_code": "// Raven Toy (Realistic Style, Medium Complexity)\n// Designed for 3D printing, approximately 100mm tall\n\n// Overall dimensions\nbody_length = 60;\nbody_height = 30;\nbody_width = 25;\n\n// Head dimensions\nhead_length = 25;\nhead_height = 22;\nhead_width = 20;\n\n// Beak dimensions\nbeak_length = 18;\nbeak_diameter = 4;\n\n// Wing dimensions\nwing_length = 35;\nwing_width = 15;\nwing_thickness = 2;\n\n// Tail dimensions\ntail_length = 30;\ntail_height = 12;\ntail_width = 20;\n\n// Leg dimensions\nleg_height = 15;\nleg_diameter = 4;\nfoot_size = 8;\n\n// Eye dimensions\neye_radius = 3;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\n// Main module\nmodule raven_toy() {\n    // Body\n    union() {\n        // Main body - ellipsoid shape\n        translate([0, 0, leg_height])\n        scale([1, body_width/body_length, body_height/body_length])\n        sphere(d=body_length);\n        \n        // Head\n        translate([body_length/2 + head_length/2 - 5, 0, leg_height + body_height/2])\n        scale([1.2, head_width/head_length, head_height/head_length])\n        sphere(d=head_length);\n        \n        // Beak\n        translate([body_length/2 + head_length + beak_length/2 - 10, 0, leg_height + body_height/2 + 5])\n        rotate([0, 90, 0])\n        cylinder(h=beak_length, d1=beak_diameter*1.5, d2=beak_diameter);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([body_length/2 + head_length/2 - 10, side*head_width/3, leg_height + body_height/2 + 5])\n            sphere(r=eye_radius);\n        }\n        \n        // Wings\n        for(side = [-1, 1]) {\n            // Upper wing\n            translate([body_length/4, side*(body_width/2 + wing_thickness/2), leg_height + body_height/2 + 10])\n            rotate([0, 0, side*20])\n            cube([wing_length, wing_thickness, wing_width], center=true);\n            \n            // Lower wing detail\n            translate([body_length/4 - 5, side*(body_width/2 + wing_thickness/2), leg_height + body_height/2])\n            rotate([0, 0, side*30])\n            cube([wing_length*0.7, wing_thickness, wing_width*0.6], center=true);\n        }\n        \n        // Tail\n        translate([-body_length/2 - tail_length/2, 0, leg_height + body_height/2 - 5])\n        cube([tail_length, tail_width, tail_height], center=true);\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side*body_width/3, 0, leg_height/2])\n            cylinder(h=leg_height, d=leg_diameter, center=true);\n            \n            // Feet\n            translate([side*body_width/3, foot_size/2, 0])\n            cube([leg_diameter, foot_size, leg_diameter], center=true);\n            \n            // Toes\n            for(toe = [-1, 0, 1]) {\n                translate([side*body_width/3 + toe*2, foot_size, 0])\n                cylinder(h=leg_diameter/2, d=leg_diameter/2, center=true);\n            }\n        }\n    }\n}\n\n// Generate the toy\nraven_toy();",
    "renders": true
  },
  {
    "toy": "skye",
    "openscad_code": "// Skye Toy Helicopter (realistic style, medium complexity)\n// Overall dimensions: ~120mm length, ~80mm width, ~45mm height\n\n// Parameters\nbody_w = 60;\nbody_l = 90;\nbody_h = 25;\nrotor_d = 110;\nrotor_h = 5;\ntail_l = 35;\ntail_h = 15;\nleg_h = 18;\nleg_w = 6;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main body\n        hull() {\n            translate([-body_l/2, -body_w/2, 0])\n                cube([body_l, body_w, body_h]);\n            translate([-body_l/2+5, -body_w/2+5, body_h])\n                cube([body_l-10, body_w-10, body_h/2]);\n        }\n        \n        // Cockpit window cutout\n        translate([-body_l/2+15, -body_w/2+10, body_h-2])\n            cube([body_l-30, body_w-20, body_h/2+2]);\n        \n        // Tail boom hole\n        translate([body_l/2-5, -5, body_h/2-5])\n            cube([15, 10, 10]);\n    }\n}\n\n// Cockpit interior\nmodule cockpit() {\n    color(\"lightblue\")\n    translate([-body_l/2+17, -body_w/2+12, body_h/2])\n        cube([body_l-34, body_w-24, body_h/2-2]);\n}\n\n// Rotor mast\nmodule rotor_mast() {\n    // Main mast\n    translate([0, 0, body_h+body_h/2])\n        cylinder(h=body_h/2, d1=8, d2=6);\n    \n    // Rotor hub\n    translate([0, 0, body_h+body_h])\n        cylinder(h=rotor_h, d=15);\n}\n\n// Main rotor blades (4 blades)\nmodule main_rotor() {\n    translate([0, 0, body_h+body_h+rotor_h]) {\n        for(i=[0:90:360-1]) {\n            rotate([0, 0, i])\n                translate([rotor_d/4, -rotor_h/2, 0])\n                    cube([rotor_d/2, rotor_h, 3]);\n        }\n    }\n}\n\n// Tail boom\nmodule tail_boom() {\n    color(\"pink\")\n    translate([body_l/2, 0, body_h/2]) {\n        rotate([0, 0, -5])\n            hull() {\n                cube([tail_l, 8, 8]);\n                translate([tail_l-5, -2, 0])\n                    cube([10, 4, 4]);\n            }\n    }\n}\n\n// Tail rotor\nmodule tail_rotor() {\n    translate([body_l/2+tail_l, 0, body_h/2+5]) {\n        rotate([90, 0, 0])\n            cylinder(h=2, d=30);\n        rotate([0, 90, 0])\n            for(i=[0:90:360-1]) {\n                rotate([0, 0, i])\n                    translate([0, 15-2, -1])\n                        cube([4, 15, 2]);\n            }\n    }\n}\n\n// Landing skids\nmodule landing_skids() {\n    module skid_side(offset) {\n        translate([offset, 0, 0]) {\n            // Front leg\n            translate([-body_l/2+10, -body_w/2-5, 0])\n                cylinder(h=leg_h, d=leg_w);\n            translate([-body_l/2+10, -body_w/2-5+leg_w/2, leg_h-leg_w/2])\n                rotate([90, 0, 0])\n                    cylinder(h=body_w+10, d=leg_w);\n            \n            // Rear leg\n            translate([body_l/2-15, -body_w/2-5, 0])\n                cylinder(h=leg_h, d=leg_w);\n            translate([body_l/2-15, -body_w/2-5+leg_w/2, leg_h-leg_w/2])\n                rotate([90, 0, 0])\n                    cylinder(h=body_w+10, d=leg_w);\n            \n            // Cross brace\n            translate([-body_l/2+10+25, -body_w/2-5+leg_w/2, leg_h-leg_w/2-leg_w])\n                rotate([0, 90, 0])\n                    cylinder(h=30, d=leg_w-2);\n        }\n    }\n    \n    skid_side(0);\n}\n\n// Wings with pontoons\nmodule wings() {\n    module wing_side(y) {\n        translate([0, y*body_w/2, body_h/2]) {\n            // Wing\n            color(\"pink\")\n            translate([-10, -5, 0])\n                cube([body_l/2, 10, 8]);\n            \n            // Pontoon\n            color(\"white\")\n            translate([body_l/4, y*5, -5])\n                hull() {\n                    sphere(d=8);\n                    translate([15, 0, 0])\n                        sphere(d=8);\n                }\n        }\n    }\n    \n    wing_side(1);\n    wing_side(-1);\n}\n\n// Assemble the helicopter\nunion() {\n    body_shell();\n    cockpit();\n    rotor_mast();\n    main_rotor();\n    tail_boom();\n    tail_rotor();\n    landing_skids();\n    wings();\n}",
    "renders": true
  },
  {
    "toy": "talon",
    "openscad_code": "$fn=32;\n\n// Talon Toy Parameters\ntalon_length = 80;\ntalon_width = 35;\ntalon_height = 45;\nwall_thickness = 2;\n\n// Base claw structure\nmodule claw_base() {\n    difference() {\n        // Main claw body\n        union() {\n            // Curved claw\n            rotate([0, 0, 20]) {\n                hull() {\n                    translate([-5, 0, 0]) sphere(d=8);\n                    translate([talon_length-15, 0, 0]) sphere(d=12);\n                }\n            }\n            \n            // Base joint connector\n            translate([-15, 0, 0]) {\n                rotate([0, 0, 0]) cylinder(h=20, d=25, center=true);\n            }\n        }\n        \n        // Hollow interior\n        translate([-5, 0, 0]) {\n            rotate([0, 0, 20]) {\n                hull() {\n                    translate([-3, 0, 0]) sphere(d=4);\n                    translate([talon_length-17, 0, 0]) sphere(d=8);\n                }\n            }\n        }\n        \n        // Joint hole\n        translate([-15, 0, 0]) {\n            rotate([0, 90, 0]) cylinder(h=30, d=10, center=true);\n        }\n    }\n}\n\n// Grip ridges\nmodule grip_ridges() {\n    for(i=[1:3]) {\n        translate([i*15-10, -5, -5]) {\n            rotate([0, 90, 0]) cylinder(h=10, d1=3, d2=5);\n        }\n    }\n}\n\n// Nail tip\nmodule nail_tip() {\n    translate([talon_length-8, 0, 0]) {\n        rotate([0, 90, 0]) cylinder(h=15, d1=10, d2=5);\n    }\n}\n\n// Textured pads\nmodule pads() {\n    // Bottom pad\n    translate([10, 0, -talon_height/2+2]) {\n        cube([talon_length-20, talon_width-10, 2], center=true);\n    }\n    \n    // Side pads\n    for(side=[-1, 1]) {\n        translate([10, side*(talon_width/2-3), 0]) {\n            cube([talon_length-20, 4, talon_height-4], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main claw\n    claw_base();\n    \n    // Attach details\n    grip_ridges();\n    nail_tip();\n    pads();\n}\n\n// Add small connection peg for toy assembly\ntranslate([-25, 0, 0]) {\n    rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=8, d=12);\n            cylinder(h=10, d=8);\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "ursa",
    "openscad_code": "// Ursa Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm W x 90mm D x 100mm H\n\n// Chair parameters\nseat_width = 70;\nseat_depth = 60;\nseat_thickness = 8;\nleg_height = 45;\nleg_diameter = 12;\nback_height = 50;\nback_thickness = 6;\narmrest_height = 25;\narmrest_width = 8;\n\n// Cushion parameters\ncushion_thickness = 10;\ncushion_radius = 3;\n\n// Side support bars\nbar_diameter = 6;\nbar_spacing = 35;\n\n// Main chair module\nmodule ursa_chair() {\n    // Seat base with rounded edges\n    translate([0, 0, leg_height])\n    difference() {\n        minkowski() {\n            cube([seat_width, seat_depth, seat_thickness], center = true);\n            sphere(cushion_radius);\n        }\n        translate([0, 0, -cushion_radius - 1])\n        cube([seat_width + 2, seat_depth + 2, seat_thickness + 2], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, leg_height + seat_thickness/2 + cushion_thickness/2])\n    difference() {\n        minkowski() {\n            cube([seat_width - 10, seat_depth - 10, cushion_thickness], center = true);\n            sphere(cushion_radius * 1.5);\n        }\n        translate([0, 0, -cushion_radius * 1.5 - 1])\n        cube([seat_width - 8, seat_depth - 8, cushion_thickness + 2], center = true);\n    }\n    \n    // Backrest\n    translate([0, -seat_depth/2 + back_thickness/2, leg_height + seat_thickness + back_height/2])\n    difference() {\n        minkowski() {\n            cube([seat_width, back_thickness, back_height], center = true);\n            sphere(2);\n        }\n        translate([0, 0, -3])\n        cube([seat_width + 4, back_thickness + 4, back_height - 6], center = true);\n    }\n    \n    // Backrest cushion\n    translate([0, -seat_depth/2 + back_thickness/2, leg_height + seat_thickness + back_height/2])\n    difference() {\n        minkowski() {\n            cube([seat_width - 10, back_thickness + 2, back_height - 10], center = true);\n            sphere(3);\n        }\n        translate([0, 0, -4])\n        cube([seat_width - 8, back_thickness + 6, back_height - 6], center = true);\n    }\n    \n    // Legs with rounded edges\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, leg_height/2])\n        minkowski() {\n            cylinder(h = leg_height, d = leg_diameter, center = true);\n            sphere(2);\n        }\n    }\n    \n    // Front legs\n    leg(seat_width/2 - leg_diameter/2 - 5, seat_depth/2 - leg_diameter/2 - 5);\n    leg(-seat_width/2 + leg_diameter/2 + 5, seat_depth/2 - leg_diameter/2 - 5);\n    \n    // Back legs\n    leg(seat_width/2 - leg_diameter/2 - 5, -seat_depth/2 + leg_diameter/2 + 5);\n    leg(-seat_width/2 + leg_diameter/2 + 5, -seat_depth/2 + leg_diameter/2 + 5);\n    \n    // Armrests\n    module armrest(x_pos) {\n        translate([x_pos, 0, leg_height + seat_thickness + armrest_height/2])\n        cube([armrest_width, seat_depth * 0.8, armrest_height], center = true);\n    }\n    \n    armrest(seat_width/2 + armrest_width/2);\n    armrest(-seat_width/2 - armrest_width/2);\n    \n    // Side support bars\n    module support_bar(z_pos) {\n        // Left side\n        translate([-seat_width/2 + leg_diameter/2, 0, z_pos])\n        rotate([90, 0, 0])\n        cylinder(h = seat_depth - leg_diameter, d = bar_diameter, center = true);\n        \n        // Right side\n        translate([seat_width/2 - leg_diameter/2, 0, z_pos])\n        rotate([90, 0, 0])\n        cylinder(h = seat_depth - leg_diameter, d = bar_diameter, center = true);\n    }\n    \n    support_bar(leg_height/2);\n    support_bar(leg_height/2 + bar_spacing);\n    \n    // Back support bars\n    module back_bar(y_pos) {\n        translate([0, y_pos, leg_height + seat_thickness/2])\n        rotate([0, 90, 0])\n        cylinder(h = seat_width - leg_diameter, d = bar_diameter, center = true);\n    }\n    \n    back_bar(-seat_depth/2 + leg_diameter/2);\n    back_bar(-seat_depth/2 + leg_diameter/2 + bar_spacing);\n}\n\n// Generate the chair\nursa_chair();",
    "renders": true
  },
  {
    "toy": "vector",
    "openscad_code": "// Toy Vector Chair - Realistic Medium Complexity\n// Overall dimensions: 60mm W x 55mm D x 80mm H\n\n// Parameters\nseat_width = 60;\nseat_depth = 55;\nseat_thickness = 4;\nleg_height = 40;\nleg_size = 6;\nback_height = 40;\nback_thickness = 3;\narmrest_height = 20;\narmrest_width = 5;\n\n// Leg module\nmodule leg() {\n    difference() {\n        // Main leg\n        cube([leg_size, leg_size, leg_height], center=true);\n        \n        // Chamfer bottom\n        translate([0, 0, -leg_height/2 + 2])\n            cube([leg_size+1, leg_size+1, 4], center=true);\n    }\n}\n\n// Backrest slat module\nmodule back_slat(width, height, thickness) {\n    cube([width, thickness, height], center=true);\n}\n\n// Armrest module\nmodule armrest() {\n    difference() {\n        // Main armrest\n        translate([0, 0, armrest_height/2])\n            cube([armrest_width, seat_depth*0.7, armrest_height], center=true);\n        \n        // Rounded top\n        translate([0, 0, armrest_height])\n            sphere(r=armrest_width/2, $fn=16);\n    }\n}\n\n// Seat cushion\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Cushion detail\n        translate([0, 0, leg_height + seat_thickness + 1])\n            cube([seat_width-4, seat_depth-4, 2], center=true);\n    }\n}\n\n// Backrest assembly\nmodule backrest() {\n    translate([0, -seat_depth/2 + back_thickness/2, leg_height + seat_thickness + back_height/2])\n        union() {\n            // Frame\n            difference() {\n                // Outer frame\n                cube([seat_width, back_thickness, back_height], center=true);\n                \n                // Inner cutout\n                translate([0, 1, 0])\n                    cube([seat_width-8, back_thickness+2, back_height-8], center=true);\n            }\n            \n            // Slats\n            for(i = [-1:1]) {\n                translate([i * 15, 0, 0])\n                    back_slat(8, back_height-12, back_thickness-1);\n            }\n        }\n}\n\n// Main assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Legs\n    translate([seat_width/2 - leg_size/2 - 5, seat_depth/2 - leg_size/2 - 5, 0])\n        leg();\n    translate([-seat_width/2 + leg_size/2 + 5, seat_depth/2 - leg_size/2 - 5, 0])\n        leg();\n    translate([seat_width/2 - leg_size/2 - 5, -seat_depth/2 + leg_size/2 + 5, 0])\n        leg();\n    translate([-seat_width/2 + leg_size/2 + 5, -seat_depth/2 + leg_size/2 + 5, 0])\n        leg();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    translate([seat_width/2 + armrest_width/2, 0, leg_height + seat_thickness])\n        armrest();\n    translate([-seat_width/2 - armrest_width/2, 0, leg_height + seat_thickness])\n        mirror([1,0,0])\n            armrest();\n    \n    // Support bars\n    translate([0, seat_depth/2 - leg_size/2 - 5, leg_height/2])\n        cube([seat_width - leg_size*2 - 10, leg_size, leg_size], center=true);\n    translate([0, -seat_depth/2 + leg_size/2 + 5, leg_height/2])\n        cube([seat_width - leg_size*2 - 10, leg_size, leg_size], center=true);\n}",
    "renders": true
  },
  {
    "toy": "wisp",
    "openscad_code": "// Wisp Toy Chair - Realistic Medium Complexity\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 70;\nchair_height = 100;\nseat_height = 45;\n\n// Material thickness\nwall = 2;\n\n// Leg dimensions\nleg_width = 6;\nleg_height = seat_height - wall;\nleg_depth = 6;\n\n// Backrest slat dimensions\nslat_width = 5;\nslat_height = 40;\nslat_spacing = 8;\n\n// Armrest dimensions\narmrest_width = 8;\narmrest_height = 4;\narmrest_length = 25;\n\n// Cushion dimensions\ncushion_thickness = 6;\ncushion_width = chair_width - 20;\ncushion_depth = chair_depth - 20;\n\nmodule chair_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0])\n        cube([leg_width, leg_depth, leg_height]);\n}\n\nmodule back_slat(x_pos) {\n    translate([x_pos, -chair_depth/2 + wall, seat_height])\n        cube([slat_width, wall, slat_height]);\n}\n\nmodule armrest() {\n    // Side support\n    translate([chair_width/2 - wall, -chair_depth/2 + 10, seat_height])\n        cube([wall, armrest_length, armrest_height + 20]);\n    \n    // Top armrest\n    translate([chair_width/2 - armrest_width, -chair_depth/2 + 10, seat_height + armrest_height + 20])\n        cube([armrest_width, armrest_length, armrest_height]);\n}\n\nmodule seat_cushion() {\n    translate([0, 0, seat_height])\n        cube([cushion_width, cushion_depth, cushion_thickness], center=true);\n}\n\n// Main chair assembly\nunion() {\n    // Seat frame\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n            cube([chair_width, chair_depth, seat_height], center=true);\n        \n        // Hollow out seat\n        translate([0, 0, seat_height/2 + wall])\n            cube([chair_width - 2*wall, chair_depth - 2*wall, seat_height - wall], center=true);\n    }\n    \n    // Backrest frame\n    difference() {\n        // Main backrest\n        translate([0, -chair_depth/2 + wall/2, seat_height + slat_height/2])\n            cube([chair_width, wall, slat_height], center=true);\n        \n        // Hollow out backrest\n        translate([0, -chair_depth/2, seat_height + slat_height/2])\n            cube([chair_width - 2*wall, wall + 1, slat_height - 2*wall], center=true);\n    }\n    \n    // Legs\n    chair_leg(-chair_width/2 + leg_width/2 + 5, chair_depth/2 - leg_depth/2 - 5);\n    chair_leg(chair_width/2 - leg_width/2 - 5, chair_depth/2 - leg_depth/2 - 5);\n    chair_leg(-chair_width/2 + leg_width/2 + 5, -chair_depth/2 + leg_depth/2 + 5);\n    chair_leg(chair_width/2 - leg_width/2 - 5, -chair_depth/2 + leg_depth/2 + 5);\n    \n    // Backrest slats\n    for (x = [-chair_width/2 + 15 : slat_spacing + slat_width : chair_width/2 - 15]) {\n        back_slat(x);\n    }\n    \n    // Armrests\n    armrest();\n    mirror([1, 0, 0]) armrest();\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Decorative front apron\n    translate([0, chair_depth/2 - wall/2, seat_height/2])\n        cube([chair_width - 10, wall, seat_height - 10], center=true);\n    \n    // Back support brace\n    translate([0, -chair_depth/2 + 20, seat_height - 5])\n        cube([chair_width - 10, wall, 10], center=true);\n}",
    "renders": true
  },
  {
    "toy": "xeno",
    "openscad_code": "// Xeno Toy – medium-complexity 3D-printable figure\n// Overall height ~110 mm, wall thickness 2 mm\n\n$fn = 36;\n\n// Main assembly\nmodule xeno_toy() {\n    // Central body\n    body();\n\n    // Head\n    translate([0, 0, 55]) head();\n\n    // Tail\n    translate([0, -28, 20]) tail();\n\n    // Legs\n    for (side = [-1, 1]) {\n        translate([side * 14, 0, 0]) leg(side);\n    }\n\n    // Arms\n    for (side = [-1, 1]) {\n        translate([side * 22, 0, 38]) arm(side);\n    }\n\n    // Inner back tubes\n    for (i = [0:4]) {\n        rotate([0, 0, -30 + i * 15])\n            translate([0, -12, 45])\n            cylinder(h = 20, r1 = 2, r2 = 1.5);\n    }\n}\n\n// Body shell with cavity\nmodule body() {\n    difference() {\n        // Outer shell\n        union() {\n            hull() {\n                translate([0, 0, 30]) sphere(d = 42);\n                translate([0, 0, 5]) sphere(d = 32);\n            }\n            // Back ridge\n            for (i = [0:5]) {\n                rotate([0, 0, -35 + i * 14])\n                    translate([0, -18, 30])\n                    cube([6, 3, 8], center = true);\n            }\n        }\n\n        // Hollow cavity\n        translate([0, 0, 15]) sphere(d = 36);\n        translate([0, 0, 35]) sphere(d = 36);\n    }\n}\n\n// Head with elongated dome\nmodule head() {\n    difference() {\n        union() {\n            // Skull\n            scale([1, 1.2, 1.4]) sphere(d = 28);\n            // Snout\n            translate([0, 18, -2])\n                rotate([-15, 0, 0])\n                cylinder(h = 20, r1 = 7, r2 = 4);\n            // Back crest\n            translate([0, -10, 5])\n                rotate([20, 0, 0])\n                cylinder(h = 15, r1 = 6, r2 = 9);\n        }\n        // Eye sockets\n        for (side = [-1, 1]) {\n            translate([side * 7, 15, 6])\n                sphere(d = 6);\n        }\n    }\n}\n\n// Tail segments\nmodule tail() {\n    for (i = [0:3]) {\n        translate([0, -8 - i * 10, -i * 2])\n            rotate([0, 0, i * 10])\n            cylinder(h = 10, r1 = 8 - i * 1.5, r2 = 7 - i * 1.5);\n    }\n}\n\n// Leg with claws\nmodule leg(side) {\n    union() {\n        // Upper leg\n        translate([side * 5, 0, 0])\n            rotate([0, side * 20, 0])\n            cylinder(h = 25, r1 = 6, r2 = 5);\n\n        // Lower leg\n        translate([side * 10, 0, -22])\n            rotate([0, side * 30, 0])\n            cylinder(h = 20, r1 = 5, r2 = 4);\n\n        // Foot\n        translate([side * 12, 0, -40])\n            rotate([0, side * 5, 0])\n            scale([1.5, 1, 0.8])\n            sphere(d = 10);\n\n        // Claws\n        for (j = [-1, 0, 1]) {\n            translate([side * 12 + j * 2, 0, -45])\n                rotate([0, side * 5, 0])\n                cylinder(h = 5, r1 = 1.5, r2 = 0.5);\n        }\n    }\n}\n\n// Arm with claws\nmodule arm(side) {\n    union() {\n        // Upper arm\n        translate([side * 8, 0, 0])\n            rotate([0, side * -20, 0])\n            cylinder(h = 20, r1 = 5, r2 = 4);\n\n        // Forearm\n        translate([side * 15, 0, -15])\n            rotate([0, side * -30, 0])\n            cylinder(h = 18, r1 = 4, r2 = 3);\n\n        // Hand\n        translate([side * 18, 0, -28])\n            sphere(d = 8);\n\n        // Fingers / claws\n        for (k = [-1, 0, 1]) {\n            translate([side * 18 + k * 2, 0, -33])\n                cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n        }\n    }\n}\n\nxeno_toy();",
    "renders": true
  },
  {
    "toy": "yara",
    "openscad_code": "// Yara Toy Chair - Realistic Medium Complexity\n// Overall dimensions: 60mm W x 55mm D x 75mm H\n\n// Main seat module\nmodule seat() {\n    // Seat base\n    translate([0, 0, 30]) \n    cube([50, 45, 5], center=true);\n    \n    // Seat cushion\n    translate([0, 0, 33]) \n    scale([1.05, 1.05, 1]) \n    cylinder(h=8, r=25, $fn=32);\n}\n\n// Backrest module\nmodule backrest() {\n    // Backrest frame\n    translate([0, 17.5, 62.5]) \n    cube([48, 5, 35], center=true);\n    \n    // Backrest slats\n    for(i = [-15:10:15]) {\n        translate([i, 17.5, 62.5]) \n        cube([8, 5, 30], center=true);\n    }\n    \n    // Top rail\n    translate([0, 17.5, 80]) \n    cube([52, 5, 6], center=true);\n}\n\n// Leg module\nmodule leg(x_pos, z_pos) {\n    translate([x_pos, 0, z_pos]) \n    cylinder(h=30, r=3, $fn=16);\n}\n\n// Front legs with stretchers\nmodule front_leg_assembly() {\n    // Left front leg\n    leg(-20, 15);\n    \n    // Right front leg\n    leg(20, 15);\n    \n    // Front stretcher\n    translate([0, 22.5, 5]) \n    cube([44, 4, 4], center=true);\n}\n\n// Rear legs with stretchers\nmodule rear_leg_assembly() {\n    // Left rear leg\n    leg(-20, -15);\n    \n    // Right rear leg\n    leg(20, -15);\n    \n    // Side stretchers\n    translate([-20, 0, 5]) \n    cube([4, 45, 4], center=true);\n    translate([20, 0, 5]) \n    cube([4, 45, 4], center=true);\n    \n    // Rear stretcher\n    translate([0, -22.5, 5]) \n    cube([44, 4, 4], center=true);\n}\n\n// Armrest module\nmodule armrest(side) {\n    // Support post\n    translate([side * 25, 0, 45]) \n    cylinder(h=15, r=2.5, $fn=16);\n    \n    // Armrest top\n    translate([side * 25, 0, 52.5]) \n    cube([30, 5, 3], center=true);\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    front_leg_assembly();\n    rear_leg_assembly();\n    armrest(-1);  // Left armrest\n    armrest(1);   // Right armrest\n    \n    // Decorative cap on backrest\n    translate([0, 17.5, 83]) \n    sphere(r=3, $fn=16);\n}",
    "renders": true
  },
  {
    "toy": "zephyr",
    "openscad_code": "// Zephyr Toy Chair - Realistic Style, Medium Complexity\n// A child-sized toy chair inspired by modern zephyr design\n// Dimensions: 100mm width x 110mm depth x 130mm height\n// Wall thickness: 2mm throughout\n\n// Seat module with rounded edges\nmodule seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, 60])\n            minkowski() {\n                cube([80, 80, 20], center = true);\n                sphere(r = 5, $fn = 16);\n            }\n        \n        // Hollow out seat\n        translate([0, 0, 62])\n            minkowski() {\n                cube([76, 76, 16], center = true);\n                sphere(r = 3, $fn = 16);\n            }\n    }\n}\n\n// Backrest with curved profile\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -35, 105])\n            rotate([10, 0, 0])\n            union() {\n                // Lower backrest\n                cube([74, 10, 50], center = true);\n                \n                // Upper curve\n                translate([0, 0, 25])\n                    scale([1, 0.8, 1])\n                    sphere(r = 37, $fn = 32);\n            }\n        \n        // Hollow out backrest\n        translate([0, -32, 105])\n            rotate([10, 0, 0])\n            union() {\n                cube([70, 6, 46], center = true);\n                \n                translate([0, 0, 25])\n                    scale([1, 0.8, 1])\n                    sphere(r = 33, $fn = 32);\n            }\n    }\n}\n\n// Chair leg with support\nmodule leg(x_pos, y_pos) {\n    union() {\n        // Main leg\n        translate([x_pos, y_pos, 30])\n            difference() {\n                cylinder(h = 60, r = 8, $fn = 16);\n                cylinder(h = 60, r = 6, $fn = 16);\n            }\n        \n        // Support brace\n        translate([x_pos * 0.7, y_pos * 0.7, 15])\n            rotate([90, 0, atan2(y_pos, x_pos)])\n            difference() {\n                cylinder(h = sqrt(x_pos*x_pos + y_pos*y_pos) * 0.6, r = 5, $fn = 12);\n                cylinder(h = sqrt(x_pos*x_pos + y_pos*y_pos) * 0.6, r = 3, $fn = 12);\n            }\n    }\n}\n\n// Side armrest\nmodule armrest(side) {\n    translate([side * 40, 30, 90])\n        union() {\n            // Armrest pad\n            translate([0, 0, 5])\n                minkowski() {\n                    cube([40, 15, 10], center = true);\n                    sphere(r = 3, $fn = 8);\n                }\n            \n            // Support post\n            translate([0, -10, -10])\n                difference() {\n                    cylinder(h = 30, r = 6, $fn = 12);\n                    cylinder(h = 30, r = 4, $fn = 12);\n                }\n        }\n}\n\n// Cross support bars\nmodule cross_support() {\n    // Front bar\n    translate([0, 35, 20])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 70, r = 4, $fn = 12);\n            cylinder(h = 70, r = 2, $fn = 12);\n        }\n    \n    // Back bar\n    translate([0, -35, 20])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 70, r = 4, $fn = 12);\n            cylinder(h = 70, r = 2, $fn = 12);\n        }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    \n    // Four legs\n    leg(35, 35);\n    leg(-35, 35);\n    leg(35, -35);\n    leg(-35, -35);\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Support structure\n    cross_support();\n}",
    "renders": true
  },
  {
    "toy": "bolt",
    "openscad_code": "// Realistic Toy Bolt - Medium Complexity\n// 3D printable bolt toy with threaded shaft and hex head\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Overall dimensions (mm)\nbolt_length = 100;\nbolt_diameter = 20;\nhead_height = 12;\nhead_width = 32;\n\n// Thread parameters\nthread_pitch = 4;\nthread_depth = 1.5;\nthread_turns = bolt_length / thread_pitch;\n\n// Toy features\ngrip_diameter = 6;\ngrip_spacing = 8;\ngrip_count = 6;\n\nmodule bolt_head() {\n    difference() {\n        // Main hex head\n        cylinder(h = head_height, d = head_width, $fn = 6);\n        \n        // Chamfer edges\n        translate([0, 0, -0.1])\n            cylinder(h = head_height + 0.2, d1 = head_width - 4, d2 = head_width + 2, $fn = 6);\n        \n        // Center hole for toy axle\n        translate([0, 0, -1])\n            cylinder(h = head_height + 2, d = 8);\n        \n        // Grip rings for toy functionality\n        for(i = [0:grip_count-1]) {\n            rotate([0, 0, i * 60])\n            translate([head_width/2 - 2, 0, head_height/2])\n                rotate([90, 0, 0])\n                cylinder(h = 4, d = grip_diameter);\n        }\n    }\n}\n\nmodule threaded_shaft() {\n    difference() {\n        // Main shaft cylinder\n        translate([0, 0, -bolt_length/2])\n            cylinder(h = bolt_length, d = bolt_diameter);\n        \n        // Threads\n        for(i = [0:thread_turns-1]) {\n            translate([0, 0, -bolt_length/2 + i * thread_pitch])\n                rotate_extrude(angle = 360, $fn = 36)\n                    translate([bolt_diameter/2 - thread_depth, 0, 0])\n                        square([thread_depth, thread_pitch * 0.8]);\n        }\n        \n        // Toy safety - rounded tip\n        translate([0, 0, bolt_length/2 - 5])\n            sphere(d = bolt_diameter);\n    }\n}\n\nmodule toy_features() {\n    // Add toy-friendly grips on shaft\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([bolt_diameter/2 + 1, 0, -bolt_length/2 + 15 + i * 15])\n            sphere(d = 4);\n    }\n    \n    // Add decorative ring near head\n    translate([0, 0, -bolt_length/2 - 2])\n        cylinder(h = 3, d = bolt_diameter + 4);\n    \n    // Add alignment marks\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([head_width/2 - 1, 0, head_height - 2])\n            cube([2, 8, 1], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    bolt_head();\n    \n    translate([0, 0, head_height/2])\n    threaded_shaft();\n    \n    toy_features();\n}\n\n// Print orientation helper\n%translate([0, 0, -bolt_length/2 - 20])\n    cube([head_width + 10, head_width + 10, 1], center = true);",
    "renders": true
  },
  {
    "toy": "cyra",
    "openscad_code": "// Cyra Toy Chair - Realistic Medium Complexity\n\n// Overall dimensions (mm)\nchair_width = 60;\nchair_depth = 55;\nchair_height = 85;\nseat_height = 45;\nbackrest_height = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Leg dimensions\nleg_width = 6;\nleg_depth = 6;\nleg_height = seat_height - wall_thickness;\n\n// Backrest slats\nslat_width = 4;\nslat_height = 35;\nslat_spacing = 8;\nnum_slats = 5;\n\n// Seat cushion\ncushion_thickness = 8;\ncushion_width = chair_width - 10;\ncushion_depth = chair_depth - 10;\n\n// Armrests\narmrest_height = 15;\narmrest_width = 4;\narmrest_length = chair_depth * 0.6;\n\n// Support bars\nsupport_bar_diameter = 3;\n\nmodule chair_legs() {\n    // Front left leg\n    translate([leg_width/2, leg_depth/2, 0])\n        cube([leg_width, leg_depth, leg_height], center=false);\n    \n    // Front right leg\n    translate([chair_width - leg_width*1.5, leg_depth/2, 0])\n        cube([leg_width, leg_depth, leg_height], center=false);\n    \n    // Back left leg\n    translate([leg_width/2, chair_depth - leg_depth*1.5, 0])\n        cube([leg_width, leg_depth, leg_height], center=false);\n    \n    // Back right leg\n    translate([chair_width - leg_width*1.5, chair_depth - leg_depth*1.5, 0])\n        cube([leg_width, leg_depth, leg_height], center=false);\n}\n\nmodule seat_frame() {\n    // Main seat frame\n    translate([0, 0, leg_height])\n        cube([chair_width, chair_depth, wall_thickness], center=false);\n}\n\nmodule seat_cushion() {\n    translate([(chair_width - cushion_width)/2, (chair_depth - cushion_depth)/2, leg_height + wall_thickness])\n        cube([cushion_width, cushion_depth, cushion_thickness], center=false);\n}\n\nmodule backrest_frame() {\n    // Bottom rail\n    translate([0, chair_depth - wall_thickness, leg_height + wall_thickness])\n        cube([chair_width, wall_thickness, wall_thickness], center=false);\n    \n    // Side rails\n    translate([0, chair_depth - wall_thickness - backrest_height, leg_height + wall_thickness])\n        cube([wall_thickness, backrest_height, wall_thickness], center=false);\n    \n    translate([chair_width - wall_thickness, chair_depth - wall_thickness - backrest_height, leg_height + wall_thickness])\n        cube([wall_thickness, backrest_height, wall_thickness], center=false);\n    \n    // Top rail\n    translate([0, chair_depth - wall_thickness - backrest_height, leg_height + wall_thickness + backrest_height - wall_thickness])\n        cube([chair_width, wall_thickness, wall_thickness], center=false);\n}\n\nmodule backrest_slats() {\n    for(i = [0:num_slats-1]) {\n        translate([\n            wall_thickness + (chair_width - 2*wall_thickness - num_slats*slat_width - (num_slats-1)*slat_spacing)/2 + i*(slat_width + slat_spacing),\n            chair_depth - wall_thickness - backrest_height + wall_thickness,\n            leg_height + wall_thickness + wall_thickness\n        ])\n        cube([slat_width, wall_thickness, slat_height - 2*wall_thickness], center=false);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([0, leg_depth/2, leg_height + cushion_thickness + wall_thickness])\n        cube([armrest_width, armrest_length, armrest_height], center=false);\n    \n    // Right armrest\n    translate([chair_width - armrest_width, leg_depth/2, leg_height + cushion_thickness + wall_thickness])\n        cube([armrest_width, armrest_length, armrest_height], center=false);\n}\n\nmodule support_bars() {\n    // Front support\n    translate([chair_width/2, leg_depth/2 + leg_depth/4, leg_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width - leg_width, d=support_bar_diameter, center=true);\n    \n    // Side support left\n    translate([leg_width/2, chair_depth/2, leg_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=chair_depth - leg_depth, d=support_bar_diameter, center=true);\n    \n    // Side support right\n    translate([chair_width - leg_width/2, chair_depth/2, leg_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=chair_depth - leg_depth, d=support_bar_diameter, center=true);\n    \n    // Back support\n    translate([chair_width/2, chair_depth - leg_depth*1.5, leg_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width - leg_width, d=support_bar_diameter, center=true);\n}\n\n// Main assembly\nunion() {\n    chair_legs();\n    seat_frame();\n    seat_cushion();\n    backrest_frame();\n    backrest_slats();\n    armrests();\n    support_bars();\n}",
    "renders": true
  },
  {
    "toy": "drift",
    "openscad_code": "// OpenSCAD Drift Car Toy (Medium Complexity)\n// Overall size: ~100 mm long, printable in one piece\n\n// Color definitions\ncolor_body = [0.2,0.2,0.8];      // metallic blue\ncolor_wheels = [0.1,0.1,0.1];   // black\ncolor_windows = [0.7,0.9,1];    // light blue\ncolor_lights = [1,1,0.8];       // white\ncolor_exhaust = [0.4,0.4,0.4];  // grey\n\n// Basic dimensions\nwheel_d = 24;\nwheel_w = 10;\nbody_l = 90;\nbody_w = 40;\nbody_h = 25;\n\n// Wheel module with tire tread pattern\nmodule wheel()\n{\n    difference()\n    {\n        // Main wheel\n        cylinder(d=wheel_d, h=wheel_w, $fn=48);\n        \n        // Center hub\n        cylinder(d=10, h=wheel_w+0.1, center=true, $fn=32);\n        \n        // Tread grooves\n        for(i=[0:3])\n            rotate([0,0,i*90])\n                translate([0,-1,0])\n                    cube([wheel_d, 2, wheel_w], center=true);\n    }\n}\n\n// Body shell with curves\nmodule body_shell()\n{\n    hull()\n    {\n        // Front section\n        translate([-body_l/2+5,0,0])\n            scale([1.2,0.9,0.8])\n                sphere(d=body_w, $fn=32);\n        \n        // Rear section\n        translate([body_l/2-15,0,0])\n            scale([1.5,1,1])\n                sphere(d=body_w+5, $fn=32);\n    }\n}\n\n// Window module\nmodule window()\n{\n    color(color_windows)\n    difference()\n    {\n        // Main windshield\n        translate([0,0,body_h/2+2])\n            cube([50, body_w-6, 15], center=true);\n        \n        // Rounded top\n        translate([0,0,body_h/2+9.5])\n            sphere(d=body_w-6, $fn=32);\n    }\n}\n\n// Spoiler module\nmodule spoiler()\n{\n    // Supports\n    for(side=[-1,1])\n        translate([body_l/2-20, side*(body_w/2-4), body_h-5])\n            cube([4, 4, 10]);\n    \n    // Wing\n    translate([body_l/2-20, 0, body_h+5])\n        cube([35, body_w, 2], center=true);\n}\n\n// Headlights\nmodule headlights()\n{\n    color(color_lights)\n    for(side=[-1,1])\n        translate([-body_l/2+3, side*(body_w/2-5), 0])\n            sphere(d=6, $fn=16);\n}\n\n// Exhaust pipes\nmodule exhaust()\n{\n    color(color_exhaust)\n    for(side=[-1,1])\n    {\n        // Pipe\n        translate([body_l/2-5, side*8, -5])\n            rotate([90,0,0])\n                cylinder(d=4, h=15, $fn=16);\n        \n        // Tip\n        translate([body_l/2+7, side*8, -5])\n            sphere(d=5, $fn=16);\n    }\n}\n\n// Main assembly\nunion()\n{\n    // Main body\n    color(color_body)\n    difference()\n    {\n        body_shell();\n        \n        // Hollow interior\n        translate([0,0,-2])\n            scale([0.8,0.8,0.6])\n                body_shell();\n    }\n    \n    // Windows\n    window();\n    \n    // Spoiler\n    spoiler();\n    \n    // Headlights\n    headlights();\n    \n    // Exhaust\n    exhaust();\n    \n    // Wheels (4 wheels)\n    for(pos=[-1,1])\n    {\n        color(color_wheels)\n        {\n            // Front wheels\n            translate([-body_l/3, pos*(body_w/2+wheel_w/2), -wheel_d/2])\n                rotate([90,0,0])\n                    wheel();\n            \n            // Rear wheels\n            translate([body_l/3, pos*(body_w/2+wheel_w/2), -wheel_d/2])\n                rotate([90,0,0])\n                    wheel();\n        }\n    }\n    \n    // Underside support strut\n    translate([0,0,-wheel_d/2-2])\n        cube([body_l, body_w-10, 4], center=true);\n}",
    "renders": true
  },
  {
    "toy": "ember",
    "openscad_code": "// OpenSCAD code for a realistic toy ember\n// Dimensions: ~65mm tall, ~80mm long, ~50mm wide\n// Wall thickness: 2mm for 3D printing\n\n// Ember body - main glowing core\nmodule ember_core() {\n    difference() {\n        // Main glowing body - slightly irregular sphere cluster\n        union() {\n            translate([0, 0, 15]) sphere(d=30, $fn=32);\n            translate([8, 5, 12]) sphere(d=22, $fn=24);\n            translate([-6, -3, 10]) sphere(d=25, $fn=24);\n        }\n        \n        // Hollow interior for toy structure\n        translate([0, 0, 15]) sphere(d=26, $fn=32);\n    }\n}\n\n// Protective wire cage around ember\nmodule wire_cage() {\n    // Bottom ring\n    cylinder(h=3, d1=45, d2=45, $fn=64);\n    \n    // Vertical wires\n    for(i=[0:15]) {\n        rotate([0, 0, i*22.5]) \n            translate([22.5, 0, 1.5]) \n                cylinder(h=30, d=2, $fn=8);\n    }\n    \n    // Top ring\n    translate([0, 0, 31.5]) cylinder(h=3, d1=35, d2=35, $fn=64);\n    \n    // Connecting rings\n    translate([0, 0, 10]) cylinder(h=2, d1=42, d2=42, $fn=48);\n    translate([0, 0, 20]) cylinder(h=2, d1=38, d2=38, $fn=48);\n}\n\n// Toy base stand with legs\nmodule toy_base() {\n    // Main base platform\n    difference() {\n        cylinder(h=5, d=60, $fn=64);\n        translate([0, 0, 2]) cylinder(h=3, d=56, $fn=64);\n    }\n    \n    // Decorative legs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) \n            translate([25, 0, -8]) \n                cylinder(h=13, d=6, $fn=12);\n    }\n    \n    // Cross supports between legs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45]) \n            translate([20, 0, -2]) \n                cube([20, 3, 3], center=true);\n    }\n}\n\n// Handle for toy interaction\nmodule toy_handle() {\n    // Main handle shaft\n    translate([0, -30, 18]) rotate([90, 0, 0]) \n        cylinder(h=35, d=8, $fn=16);\n    \n    // Handle grip\n    translate([0, -35, 18]) rotate([90, 0, 0]) \n        cylinder(h=15, d1=12, d2=12, $fn=20);\n    \n    // Connection bracket to cage\n    translate([0, -22, 18]) rotate([0, 0, 45]) \n        cube([8, 15, 5], center=true);\n}\n\n// Glowing coal texture details\nmodule coal_texture() {\n    // Random bumps for texture\n    for(i=[0:20]) {\n        rotate([0, 0, i*17.2]) \n            translate([rand(i*3)*10+5, 0, rand(i*7)*15+5]) \n                sphere(d=rand(i*2)*3+2, $fn=8);\n    }\n    \n    // Small holes for porous appearance\n    for(i=[0:15]) {\n        rotate([0, 0, i*24]) \n            translate([rand(i*5)*8+3, 0, 15]) \n                sphere(d=rand(i*3)*1.5+1, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Toy base\n    toy_base();\n    \n    // Ember assembly\n    translate([0, 0, 5]) {\n        // Wire cage\n        wire_cage();\n        \n        // Ember core inside cage\n        ember_core();\n        \n        // Surface texture\n        translate([0, 0, 5]) coal_texture();\n    }\n    \n    // Handle for play\n    toy_handle();\n}",
    "renders": true
  },
  {
    "toy": "fang",
    "openscad_code": "// Realistic Fang Toy - Medium Complexity\n// Overall length ~120mm, suitable for 3D printing\n\nmodule fang_toy() {\n    // Main fang body with slight curve\n    translate([0, 0, 10]) rotate([0, -5, 0]) {\n        difference() {\n            // Outer enamel shell\n            scale([1, 0.8, 1]) sphere(d = 22, $fn = 32);\n            \n            // Inner cavity for hollowing\n            translate([0, 0, 2]) scale([0.85, 0.7, 0.9]) sphere(d = 20, $fn = 32);\n        }\n    }\n    \n    // Root attachment base\n    translate([0, 0, -8]) {\n        cylinder(h = 8, d1 = 18, d2 = 22, $fn = 24);\n    }\n    \n    // Sharp tip with realistic taper\n    translate([0, 0, 18]) {\n        cylinder(h = 15, d1 = 2, d2 = 12, $fn = 16);\n    }\n    \n    // Enamel ridges along the sides\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([8, 0, 5]) {\n                scale([0.3, 1, 0.8]) rotate([0, 90, 0]) \n                    cylinder(h = 20, d = 3, $fn = 8);\n            }\n        }\n    }\n    \n    // Dentin core visible at base\n    translate([0, 0, -5]) {\n        difference() {\n            cylinder(h = 8, d = 16, $fn = 32);\n            translate([0, 0, 2]) cylinder(h = 8, d = 12, $fn = 32);\n        }\n    }\n    \n    // Pulp chamber opening\n    translate([0, 0, -2]) {\n        #cylinder(h = 3, d = 6, $fn = 16);\n    }\n    \n    // Realistic gum line texture\n    translate([0, 0, -10]) {\n        difference() {\n            cylinder(h = 4, d = 24, $fn = 64);\n            for (i = [0:23]) {\n                rotate([0, 0, i * 15]) {\n                    translate([12, 0, -1]) \n                        cube([3, 1, 6], center = true);\n                }\n            }\n        }\n    }\n    \n    // Root canal entrance at base\n    translate([0, 0, -12]) {\n        cylinder(h = 3, d1 = 4, d2 = 2, $fn = 12);\n    }\n    \n    // Surface texture lines\n    for (z = [-5:5:15]) {\n        rotate_extrude($fn = 64) {\n            translate([11, 0, z]) circle(d = 0.5, $fn = 8);\n        }\n    }\n    \n    // Toy safety features - rounded edges\n    for (edge = [[11, 0, 5], [-11, 0, 5], [0, 9, 5], [0, -9, 5]]) {\n        translate(edge) sphere(d = 2, $fn = 16);\n    }\n}\n\n// Render the complete fang\nfang_toy();",
    "renders": true
  },
  {
    "toy": "ghost",
    "openscad_code": "// Realistic Ghost Toy - Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n// Overall dimensions: 80mm tall, 60mm wide, 50mm deep\n\nmodule ghost_body() {\n    // Main ghost body - hollow construction\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 40]) sphere(d=50, $fn=32);\n            translate([0, 0, 10]) cylinder(h=30, d1=40, d2=50, $fn=32);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5]) \n            scale([0.92, 0.92, 0.9])\n            hull() {\n                translate([0, 0, 45]) sphere(d=50, $fn=32);\n                translate([0, 0, 15]) cylinder(h=30, d1=40, d2=50, $fn=32);\n            }\n    }\n}\n\nmodule ghost_eyes() {\n    // Left eye socket\n    translate([-12, 20, 35]) \n        rotate([0, 10, 0])\n        cylinder(h=8, d=8, $fn=16);\n    \n    // Right eye socket\n    translate([12, 20, 35]) \n        rotate([0, 10, 0])\n        cylinder(h=8, d=8, $fn=16);\n    \n    // Eye balls\n    translate([-12, 22, 35]) sphere(d=6, $fn=16);\n    translate([12, 22, 35]) sphere(d=6, $fn=16);\n}\n\nmodule ghost_mouth() {\n    // Sad mouth curve\n    for(i = [-20:2:20]) {\n        translate([i, 15 + abs(i)*0.2, 25])\n            sphere(d=3, $fn=8);\n    }\n}\n\nmodule ghost_arms() {\n    // Left arm\n    translate([-25, 10, 20]) {\n        rotate([0, 0, -30])\n        hull() {\n            sphere(d=12, $fn=16);\n            translate([-15, 0, -10]) sphere(d=8, $fn=16);\n        }\n    }\n    \n    // Right arm\n    translate([25, 10, 20]) {\n        rotate([0, 0, 30])\n        mirror([1, 0, 0])\n        hull() {\n            sphere(d=12, $fn=16);\n            translate([-15, 0, -10]) sphere(d=8, $fn=16);\n        }\n    }\n}\n\nmodule ghost_wavy_bottom() {\n    // Wavy bottom edge\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([25, 0, 5 + sin(i*3)*3])\n            cube([8, 2, 10 + cos(i*2)*5], center=true);\n    }\n}\n\nmodule ghost_keychain_loop() {\n    // Attachment loop for toy keychain\n    translate([0, -25, 50]) {\n        difference() {\n            torus(5, 2, $fn=24);\n            translate([0, 0, -5]) cube([15, 15, 10], center=true);\n        }\n    }\n}\n\nmodule torus(outer, inner, $fn) {\n    rotate_extrude($fn=$fn)\n        translate([outer, 0, 0])\n            circle(r=inner, $fn=$fn);\n}\n\n// Assemble the ghost toy\nunion() {\n    difference() {\n        union() {\n            ghost_body();\n            ghost_arms();\n            ghost_wavy_bottom();\n        }\n        \n        // Eye and mouth cutouts\n        ghost_eyes();\n        ghost_mouth();\n    }\n    \n    // Keychain attachment\n    ghost_keychain_loop();\n}",
    "renders": true
  },
  {
    "toy": "halo",
    "openscad_code": "// Halo Toy Furniture - Medium Complexity Realistic Style\n// A 1:12 scale halo-style armchair toy (approx 60mm wide)\n\n// Overall dimensions\nchair_width = 55;\nchair_depth = 50;\nchair_height = 60;\nseat_height = 30;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Cushion thickness\ncushion = 6;\n\n// Main frame structure\nmodule frame() {\n    // Left side frame\n    translate([-chair_width/2 + wall, 0, wall/2]) {\n        difference() {\n            cube([wall, chair_depth - wall*2, chair_height - seat_height - wall]);\n            // Cutout for weight reduction\n            translate([wall/2, wall, wall*2]) \n                cube([wall*2, chair_depth - wall*4, chair_height - seat_height - wall*5]);\n        }\n    }\n    \n    // Right side frame (mirror of left)\n    translate([chair_width/2 - wall, 0, wall/2]) {\n        mirror([1,0,0]) \n            difference() {\n                cube([wall, chair_depth - wall*2, chair_height - seat_height - wall]);\n                translate([wall/2, wall, wall*2]) \n                    cube([wall*2, chair_depth - wall*4, chair_height - seat_height - wall*5]);\n            }\n    }\n    \n    // Back support bar\n    translate([0, -chair_depth/2 + wall, chair_height - wall*2]) {\n        rotate([90,0,0])\n            cylinder(h=chair_width - wall*2, r=wall/2, $fn=12);\n    }\n    \n    // Front support bar\n    translate([0, chair_depth/2 - wall*2, seat_height/2]) {\n        rotate([90,0,0])\n            cylinder(h=chair_width - wall*2, r=wall/2, $fn=12);\n    }\n}\n\n// Seat cushion with realistic tufting\nmodule seat_cushion() {\n    translate([0, 0, seat_height - cushion/2]) {\n        difference() {\n            // Main cushion\n            cube([chair_width - wall*4, chair_depth - wall*4, cushion], center=true);\n            \n            // Tufted indents\n            for(x = [-chair_width/4, 0, chair_width/4]) {\n                for(y = [-chair_depth/6, chair_depth/6]) {\n                    translate([x, y, cushion/2 - 1])\n                        sphere(r=2, $fn=12);\n                }\n            }\n        }\n        \n        // Cushion piping detail\n        color(\"darkgray\")\n        for(i = [0, 90, 180, 270]) {\n            rotate([0,0,i])\n                translate([chair_width/2 - wall*2, chair_depth/2 - wall*2, 0])\n                    cylinder(h=cushion, r=1, $fn=8);\n        }\n    }\n}\n\n// Backrest with halo curve\nmodule backrest() {\n    translate([0, -chair_depth/2 + wall*2, seat_height + (chair_height - seat_height)/2]) {\n        difference() {\n            // Main backrest shape with halo curve\n            scale([1, 0.8, 1])\n                rotate([90,0,0])\n                    cylinder(h=chair_height - seat_height - wall, r=chair_width/2 - wall*2, $fn=32);\n            \n            // Hollow center\n            scale([0.7, 0.7, 1])\n                rotate([90,0,0])\n                    cylinder(h=chair_height - seat_height - wall + 2, r=chair_width/2 - wall*2 - 2, $fn=32);\n            \n            // Flatten bottom\n            translate([0, 0, -(chair_height - seat_height - wall)/2])\n                cube([chair_width*2, chair_width*2, chair_height - seat_height - wall], center=true);\n        }\n        \n        // Backrest cushion\n        translate([0, -wall*2, cushion/2])\n            difference() {\n                scale([0.9, 0.6, 1])\n                    cube([chair_width - wall*6, chair_height - seat_height - wall*4, cushion], center=true);\n                \n                // Tufts\n                for(y = [-(chair_height - seat_height - wall*4)/3, 0, (chair_height - seat_height - wall*4)/3]) {\n                    translate([0, y, cushion/2 - 1])\n                        sphere(r=2, $fn=12);\n                }\n            }\n    }\n}\n\n// Armrests with realistic joint detail\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 + wall/2, 0, seat_height + cushion/2]) {\n        // Vertical support\n        cylinder(h=seat_height - cushion/2, r=wall*1.5, $fn=12);\n        \n        // Horizontal rest\n        translate([0, chair_depth/4, seat_height - cushion/2]) {\n            rotate([90,0,0])\n                cylinder(h=chair_depth/2, r=wall*1.5, $fn=12);\n            \n            // Armrest pad\n            translate([0, chair_depth/4, wall*1.5])\n                cube([wall*3, chair_depth/4, wall*2], center=true);\n        }\n    }\n    \n    // Right armrest (mirror)\n    translate([chair_width/2 - wall/2, 0, seat_height + cushion/2]) {\n        mirror([1,0,0]) {\n            cylinder(h=seat_height - cushion/2, r=wall*1.5, $fn=12);\n            \n            translate([0, chair_depth/4, seat_height - cushion/2]) {\n                rotate([90,0,0])\n                    cylinder(h=chair_depth/2, r=wall*1.5, $fn=12);\n                \n                translate([0, chair_depth/4, wall*1.5])\n                    cube([wall*3, chair_depth/4, wall*2], center=true);\n            }\n        }\n    }\n}\n\n// Legs with realistic joint brackets\nmodule legs() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(chair_width/2 - wall*2), y*(chair_depth/2 - wall*2), 0]) {\n                // Main leg\n                cylinder(h=seat_height - cushion, r=wall, $fn=8);\n                \n                // Bracket detail\n                translate([0,0,seat_height - cushion - wall])\n                    rotate([0,0,45])\n                        cube([wall*3, wall*3, wall], center=true);\n            }\n        }\n    }\n}\n\n// Assemble the complete toy chair\nunion() {\n    frame();\n    seat_cushion();\n    backrest();\n    armrests();\n    legs();\n}",
    "renders": true
  },
  {
    "toy": "ion",
    "openscad_code": "// Ion Toy - Realistic Style Medium Complexity\n// A medium-sized wooden toy ion with realistic proportions and toy details\n\n// Global parameters\nwall_thickness = 2;\nmain_color = \"Brown\";\naccent_color = \"Beige\";\n\n// Overall dimensions\nion_length = 80;\nion_width = 45;\nion_height = 75;\n\n// Leg dimensions\nleg_height = 60;\nleg_width = 6;\nleg_depth = 6;\n\n// Backrest dimensions\nbackrest_height = 35;\nbackrest_thickness = 4;\n\n// Seat dimensions\nseat_thickness = 8;\n\n// Armrest dimensions\narmrest_height = 20;\narmrest_width = 6;\n\n// Toy-specific details\npeg_radius = 3;\npeg_height = 4;\nslot_width = 4;\nslot_depth = 2;\n\nmodule leg() {\n    difference() {\n        union() {\n            // Main leg post\n            cube([leg_width, leg_depth, leg_height], center=true);\n            \n            // Decorative foot detail\n            translate([0, 0, -leg_height/2 + 2])\n                cylinder(r=leg_width*0.8, h=4);\n            \n            // Peg for connecting to other parts\n            translate([0, leg_depth/2, leg_height/2 - peg_height])\n                cylinder(r=peg_radius, h=peg_height);\n        }\n        \n        // Slot for receiving pegs\n        translate([0, -leg_depth/2 - 0.1, leg_height/2 - peg_height - slot_depth])\n            cube([slot_width, slot_depth + 0.2, slot_depth + 0.2], center=true);\n    }\n}\n\nmodule seat() {\n    difference() {\n        // Main seat\n        cube([ion_width - 2*wall_thickness, ion_length - 2*wall_thickness, seat_thickness], center=true);\n        \n        // Peg holes for legs\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x*(ion_width/2 - leg_width - wall_thickness), \n                          y*(ion_length/2 - leg_width - wall_thickness), \n                          -seat_thickness/2])\n                    cylinder(r=peg_radius + 0.2, h=seat_thickness + 0.2);\n        \n        // Peg holes for backrest\n        for(x = [-1, 1])\n            translate([x*(ion_width/2 - leg_width - wall_thickness), \n                      -ion_length/2 + leg_width + wall_thickness, \n                      -seat_thickness/2])\n                cylinder(r=peg_radius + 0.2, h=seat_thickness + 0.2);\n    }\n}\n\nmodule backrest() {\n    difference() {\n        union() {\n            // Main backrest panel\n            translate([0, -ion_length/2 + wall_thickness, backrest_height/2 + seat_thickness/2])\n                cube([ion_width - 2*wall_thickness, backrest_thickness, backrest_height], center=true);\n            \n            // Top rail\n            translate([0, -ion_length/2 + wall_thickness, backrest_height + seat_thickness/2])\n                cube([ion_width - 2*wall_thickness, backrest_thickness, wall_thickness], center=true);\n            \n            // Vertical slats\n            for(x = [-0.5, 0, 0.5])\n                translate([x*(ion_width/2 - 2*wall_thickness), \n                          -ion_length/2 + wall_thickness, \n                          backrest_height/2 + seat_thickness/2])\n                    cube([wall_thickness*1.5, backrest_thickness, backrest_height - wall_thickness], center=true);\n            \n            // Pegs for connecting to seat\n            for(x = [-1, 1])\n                translate([x*(ion_width/2 - leg_width - wall_thickness), \n                          -ion_length/2 + wall_thickness, \n                          -peg_height/2])\n                    cylinder(r=peg_radius, h=peg_height);\n        }\n        \n        // Slot for receiving pegs\n        for(x = [-1, 1])\n            translate([x*(ion_width/2 - leg_width - wall_thickness), \n                      -ion_length/2 + wall_thickness - backrest_thickness/2 - 0.1, \n                      -peg_height - slot_depth/2])\n                cube([slot_width, slot_depth + 0.2, slot_depth + 0.2], center=true);\n    }\n}\n\nmodule armrest() {\n    difference() {\n        // Main armrest\n        translate([0, 0, 0])\n            cube([armrest_width, ion_length/2 - leg_width - wall_thickness, armrest_height], center=true);\n        \n        // Peg holes\n        translate([0, ion_length/4, -armrest_height/2])\n            cylinder(r=peg_radius + 0.2, h=armrest_height + 0.2);\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x*(ion_width/2 - leg_width - wall_thickness), \n                      y*(ion_length/2 - leg_width - wall_thickness), \n                      leg_height/2])\n                leg();\n    \n    // Seat\n    translate([0, 0, leg_height + seat_thickness/2])\n        seat();\n    \n    // Backrest\n    translate([0, 0, leg_height + seat_thickness])\n        backrest();\n    \n    // Armrests\n    for(x = [-1, 1])\n        translate([x*(ion_width/2 - wall_thickness - armrest_width/2), \n                  0, \n                  leg_height + seat_thickness + armrest_height/2])\n            armrest();\n}",
    "renders": true
  },
  {
    "toy": "jett",
    "openscad_code": "// Jett Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm width x 85mm depth x 100mm height\n\n// Parameters\nchair_width = 80;\nchair_depth = 85;\nchair_height = 100;\nleg_height = 45;\nseat_thickness = 8;\nback_height = 55;\nback_thickness = 10;\n\n// Main chair module\nmodule jett_chair() {\n    // Seat base\n    union() {\n        // Seat cushion\n        translate([0, 0, leg_height])\n            rounded_cube([chair_width - 10, chair_depth - 10, seat_thickness], 3);\n        \n        // Seat frame\n        translate([0, 0, leg_height])\n            difference() {\n                cube([chair_width, chair_depth, seat_thickness], center = true);\n                translate([0, 0, -1])\n                    cube([chair_width - 10, chair_depth - 10, seat_thickness + 2], center = true);\n            }\n        \n        // Backrest\n        translate([0, -chair_depth/2 + back_thickness/2, leg_height + seat_thickness + back_height/2])\n            difference() {\n                rounded_cube([chair_width - 5, back_thickness, back_height], 2);\n                translate([0, 1, 5])\n                    cube([chair_width - 25, back_thickness + 2, back_height - 15], center = true);\n            }\n        \n        // Backrest support bars\n        for(i = [-1:1]) {\n            translate([i * 20, -chair_depth/2 + back_thickness/2, leg_height + seat_thickness + 25])\n                cylinder(h = back_height - 15, r = 3, center = true);\n        }\n        \n        // Legs with stretchers\n        legs_and_stretchers();\n        \n        // Armrests\n        armrests();\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                for(z = [-1, 1])\n                    translate([x * (size[0]/2 - radius), \n                              y * (size[1]/2 - radius), \n                              z * (size[2]/2 - radius)])\n                        sphere(r = radius);\n    }\n}\n\n// Legs module with stretchers\nmodule legs_and_stretchers() {\n    // Four legs\n    for(x = [-1, 1])\n        for(y = [-1, 1]) {\n            translate([x * (chair_width/2 - 8), \n                      y * (chair_depth/2 - 8), \n                      leg_height/2])\n                cylinder(h = leg_height, r = 4, center = true);\n        }\n    \n    // Front stretcher\n    translate([0, chair_depth/2 - 8, leg_height/2 - 10])\n        cube([chair_width - 30, 6, 6], center = true);\n    \n    // Side stretchers\n    translate([chair_width/2 - 8, 0, leg_height/2 - 10])\n        rotate([0, 0, 90])\n            cube([chair_depth - 30, 6, 6], center = true);\n    \n    translate([-(chair_width/2 - 8), 0, leg_height/2 - 10])\n        rotate([0, 0, 90])\n            cube([chair_depth - 30, 6, 6], center = true);\n}\n\n// Armrests module\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 + 5, 0, leg_height + seat_thickness + 15])\n        difference() {\n            union() {\n                // Support post\n                cylinder(h = 30, r = 4, center = true);\n                // Armrest pad\n                translate([0, chair_depth/4, 10])\n                    rounded_cube([8, chair_depth/2, 6], 2);\n            }\n            // Hollow post\n            translate([0, 0, 0])\n                cylinder(h = 32, r = 2, center = true);\n        }\n    \n    // Right armrest\n    translate([chair_width/2 - 5, 0, leg_height + seat_thickness + 15])\n        difference() {\n            union() {\n                // Support post\n                cylinder(h = 30, r = 4, center = true);\n                // Armrest pad\n                translate([0, chair_depth/4, 10])\n                    rounded_cube([8, chair_depth/2, 6], 2);\n            }\n            // Hollow post\n            translate([0, 0, 0])\n                cylinder(h = 32, r = 2, center = true);\n        }\n}\n\n// Create the chair\njett_chair();",
    "renders": true
  },
  {
    "toy": "kestrel",
    "openscad_code": "// Kestrel Toy - Medium Complexity Realistic Style\n// Designed for 3D printing, 2mm walls, no overhangs\n\nmodule kestrel_toy() {\n    // Overall dimensions: 120mm wingspan, 80mm body length\n    \n    // Body core\n    union() {\n        // Main body - elongated oval\n        scale([1, 0.7, 0.8])\n            sphere(d=40, $fn=40);\n        \n        // Chest bulge\n        translate([0, 10, 0])\n            sphere(d=30, $fn=30);\n        \n        // Tail base\n        translate([-25, 0, 0])\n            scale([1.5, 0.6, 0.5])\n                sphere(d=25, $fn=30);\n    }\n    \n    // Head\n    translate([20, 0, 15])\n        scale([0.8, 0.9, 1.1])\n            sphere(d=35, $fn=40);\n    \n    // Beak\n    translate([35, 0, 15])\n        rotate([0, -20, 0])\n            cylinder(h=15, d1=10, d2=5, $fn=20);\n    \n    // Wings\n    module wing(side) {\n        mirror([side, 0, 0]) {\n            // Wing root\n            translate([5, 20*side, 5])\n                rotate([0, 0, -30*side])\n                    scale([1.5, 0.3, 0.05])\n                        sphere(d=30, $fn=30);\n            \n            // Wing tip\n            translate([-5, 40*side, 8])\n                rotate([0, 0, -45*side])\n                    scale([1.2, 0.3, 0.05])\n                        sphere(d=25, $fn=30);\n            \n            // Wing feathers - using cylinders for layered effect\n            for(i=[0:4]) {\n                translate([-10 + i*5, (35 + i*3)*side, 5])\n                    rotate([0, 0, -30*side])\n                        cylinder(h=2, d1=8, d2=6, $fn=10);\n            }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Tail\n    module tail() {\n        union() {\n            // Tail base\n            translate([-35, 0, 2])\n                scale([2, 0.8, 0.3])\n                    sphere(d=20, $fn=30);\n            \n            // Tail feathers\n            for(i=[-1:0.5:1]) {\n                translate([-45, i*8, 3])\n                    rotate([0, 0, i*20])\n                        cylinder(h=15, d1=6, d2=4, $fn=10);\n            }\n        }\n    }\n    \n    tail();\n    \n    // Legs\n    module leg(side) {\n        translate([5, 8*side, -20])\n            union() {\n                // Upper leg\n                cylinder(h=15, d=8, $fn=20);\n                \n                // Lower leg\n                translate([0, 0, -15])\n                    rotate([0, 15, 0])\n                        cylinder(h=12, d=6, $fn=20);\n                \n                // Foot\n                translate([-2, 0, -25])\n                    rotate([0, 90, 0])\n                        scale([1.5, 0.3, 1])\n                            sphere(d=12, $fn=20);\n                \n                // Toes\n                for(j=[-1:1]) {\n                    translate([j*4, 0, -25])\n                        rotate([0, 90, 0])\n                            cylinder(h=8, d=3, $fn=10);\n                }\n            }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Eyes\n    module eye(side) {\n        translate([30, 8*side, 20])\n            difference() {\n                sphere(d=8, $fn=20);\n                translate([2, 0, 2])\n                    sphere(d=5, $fn=15);\n            }\n    }\n    \n    eye(1);\n    eye(-1);\n    \n    // Toy connector peg on bottom\n    translate([0, 0, -28])\n        cylinder(h=10, d=12, $fn=20);\n}\n\n// Display the toy\nkestrel_toy();",
    "renders": true
  },
  {
    "toy": "lumen",
    "openscad_code": "// Toy Lumen Chair Module\n// Realistic style, medium complexity, child-safe 3D printable\n\nchair_width = 80;\nchair_depth = 75;\nchair_height = 90;\nseat_thickness = 8;\nleg_size = 4;\nback_height = 50;\n\nmodule seat() {\n    // Main seat cushion with rounded top\n    translate([0, 0, seat_thickness/2]) {\n        difference() {\n            // Base cushion\n            cube([chair_width, chair_depth, seat_thickness], center=true);\n            // Rounded top edges\n            translate([0, 0, seat_thickness/2 - 1])\n                minkowski() {\n                    cube([chair_width - 4, chair_depth - 4, 2], center=true);\n                    sphere(2);\n                }\n        }\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with slats\n    translate([0, -chair_depth/2 + 5, seat_thickness + back_height/2]) {\n        difference() {\n            // Main back frame\n            cube([chair_width - 10, 6, back_height], center=true);\n            // Cut slats\n            for(i = [-1, 0, 1]) {\n                translate([i * 20, 0, 0])\n                    cube([6, 8, back_height - 10], center=true);\n            }\n        }\n    }\n    // Top rail\n    translate([0, -chair_depth/2 + 5, seat_thickness + back_height - 2])\n        cube([chair_width - 5, 8, 4], center=true);\n}\n\nmodule legs() {\n    // Four rounded legs with stretchers\n    leg_positions = [\n        [-chair_width/2 + leg_size, chair_depth/2 - leg_size],\n        [chair_width/2 - leg_size, chair_depth/2 - leg_size],\n        [-chair_width/2 + leg_size, -chair_depth/2 + leg_size],\n        [chair_width/2 - leg_size, -chair_depth/2 + leg_size]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], seat_thickness/2]) {\n            // Main leg\n            cylinder(h = chair_height - seat_thickness/2, r = leg_size, center=false);\n            // Leg foot detail\n            translate([0, 0, chair_height - seat_thickness/2 - 3])\n                sphere(5);\n        }\n    }\n    \n    // Front and back stretchers\n    translate([0, chair_depth/2 - leg_size, seat_thickness/2 + 20])\n        cube([chair_width - 2*leg_size, leg_size, leg_size], center=true);\n    translate([0, -chair_depth/2 + leg_size, seat_thickness/2 + 20])\n        cube([chair_width - 2*leg_size, leg_size, leg_size], center=true);\n}\n\nmodule armrests() {\n    // Simple armrests with rounded tops\n    armrest_positions = [-chair_width/2 + 10, chair_width/2 - 10];\n    for(x = armrest_positions) {\n        // Vertical supports\n        translate([x, chair_depth/2 - 15, seat_thickness + 15])\n            cylinder(h = 30, r = 3, center=false);\n        // Horizontal arm\n        translate([x, chair_depth/2 - 25, seat_thickness + 30])\n            cube([6, 20, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    legs();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "myst",
    "openscad_code": "// MYST Toy – rotating, hinged “linking book” stand\n// realistic style, medium complexity, 3D-printable\n// overall width ≈ 100 mm, height ≈ 110 mm\n\n$fn = 60;\n\n/////////////////////////////////////////////////////////////////\n// PARAMETERS – tweak for printability or aesthetics\n/////////////////////////////////////////////////////////////////\nwall = 2;          // uniform wall thickness\nwood_w = 100;      // total width at feet\nwood_d = 70;       // total depth at feet\nwood_h = 100;      // total height\nseat_r = 28;       // radius of circular seat\nback_angle = 12;   // recline of back-rest in degrees\nleg_splay = 5;     // outward angle of rear legs\npost_d = 6;        // diameter of hinge posts\nbook_t = 6;        // book thickness\n\n/////////////////////////////////////////////////////////////////\n// HELPER : rounded cube for softer edges\n/////////////////////////////////////////////////////////////////\nmodule rounded_cube(s, r=2, center=false) {\n    translate(center?[0,0,0]:[r,r,r])\n        minkowski() {\n            cube(s-[2*r,2*r,2*r], center=true);\n            sphere(r);\n        }\n}\n\n/////////////////////////////////////////////////////////////////\n// FOUR LEGS – simple cylinders with feet\n/////////////////////////////////////////////////////////////////\nmodule leg(len=95, foot_r=10, foot_h=3) {\n    union() {\n        cylinder(h=len, d=8, center=false);\n        translate([0,0,len])\n            cylinder(h=foot_h, r1=foot_r, r2=foot_r-1, center=false);\n    }\n}\n\nmodule legs() {\n    // front pair (straight)\n    translate([wood_w/2-10, wood_d/2-10, 0])\n        leg();\n    translate([-wood_w/2+10, wood_d/2-10, 0])\n        leg();\n\n    // rear pair (splayed outward)\n    translate([wood_w/2-10, -wood_d/2+10, 0])\n        rotate([0,0, leg_splay])\n            leg();\n    translate([-wood_w/2+10, -wood_d/2+10, 0])\n        rotate([0,0,-leg_splay])\n            leg();\n}\n\n/////////////////////////////////////////////////////////////////\n// CIRCULAR SEAT WITH CUSHION\n/////////////////////////////////////////////////////////////////\nmodule seat() {\n    difference() {\n        // seat disk\n        cylinder(h=wall*2, r=seat_r, center=false);\n        // slight dish\n        translate([0,0,wall])\n            cylinder(h=wall, r=seat_r-wall, center=false);\n    }\n    // cushion\n    color(\"darkslategray\")\n    translate([0,0,wall*2])\n        cylinder(h=wall*2.5, r=seat_r-wall, center=false);\n}\n\n/////////////////////////////////////////////////////////////////\n// BACKREST – curved, slats\n/////////////////////////////////////////////////////////////////\nmodule backrest() {\n    difference() {\n        // main curved panel\n        translate([0,0,seat_r+wall*2+wall*2.5])\n            rotate([back_angle,0,0])\n                rounded_cube([seat_r*2, wall*3, wood_h-seat_r-wall*4.5], r=3, center=true);\n        // cut slots for slats\n        for(i=[-2:2])\n            translate([i*10,0,0])\n                cube([3,wall+1,wood_h-seat_r-wall*2], center=true);\n    }\n}\n\n/////////////////////////////////////////////////////////////////\n// HINGED “BOOK” – rotates on rear posts\n/////////////////////////////////////////////////////////////////\nmodule book() {\n    // left page\n    translate([-book_t/2, 0, 0])\n        rounded_cube([book_t, seat_r*1.2, seat_r*1.6], r=book_t/4, center=true);\n    // right page\n    translate([book_t/2, 0, 0])\n        rounded_cube([book_t, seat_r*1.2, seat_r*1.6], r=book_t/4, center=true);\n    // spine\n    color(\"saddlebrown\")\n    translate([0, -seat_r*1.2/2-book_t/2, 0])\n        rounded_cube([book_t*2.2, book_t, seat_r*1.6], r=book_t/4, center=true);\n    // myst symbol (raised circle)\n    color(\"gold\")\n    translate([0,0,seat_r*1.6/2+0.5])\n        cylinder(h=1, r=book_t*0.7);\n}\n\nmodule hinged_book() {\n    // hinge posts on backrest top\n    translate([0, seat_r-10, wood_h-20])\n    rotate([0,90,0])\n    rotate([0,0,30*sin($t*360)])  // animate swing for demo\n    book();\n}\n\n/////////////////////////////////////////////////////////////////\n// FULL ASSEMBLY\n/////////////////////////////////////////////////////////////////\nunion() {\n    legs();\n    translate([0,0,95])\n        seat();\n    backrest();\n    hinged_book();\n}",
    "renders": true
  },
  {
    "toy": "nix",
    "openscad_code": "// Realistic Nix Toy Chair (medium complexity)\n// Approx 80mm tall, 3D-printable with 2mm walls\n\nchair_width = 60;\nchair_depth = 55;\nchair_height = 80;\nleg_thick = 4;\nrail_thick = 3;\nseat_thick = 6;\nback_thick = 3;\n\nmodule leg() {\n    // Simple round leg with slight taper\n    cylinder(h = chair_height - seat_thick, r1 = leg_thick/2, r2 = leg_thick/2 - 0.5, $fn = 16);\n}\n\nmodule stretcher() {\n    // Horizontal rail between legs\n    cube([chair_width - leg_thick*2, rail_thick, leg_thick]);\n}\n\nmodule seat() {\n    // Cushioned seat with rounded top\n    difference() {\n        translate([0, 0, chair_height - seat_thick])\n            minkowski() {\n                cube([chair_width, chair_depth, seat_thick], center = true);\n                sphere(r = 2, $fn = 16);\n            }\n        translate([0, 0, chair_height - seat_thick + 1])\n            cube([chair_width - 4, chair_depth - 4, seat_thick + 2], center = true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with slats\n    difference() {\n        // Overall back panel\n        translate([0, chair_depth/2 - back_thick/2, chair_height - seat_thick/2])\n            rotate([10, 0, 0])\n            cube([chair_width, back_thick, chair_height/2], center = true);\n        \n        // Cutouts for slats effect\n        for (i = [-1:1]) {\n            translate([i * 15, 0, 0])\n                cube([8, back_thick + 1, chair_height/2 - 10], center = true);\n        }\n        \n        // Top arc cut\n        translate([0, chair_depth/2 - back_thick/2, chair_height - seat_thick/2 + 25])\n            rotate([10, 0, 0])\n            sphere(r = chair_width/2 - 5, $fn = 32);\n    }\n}\n\nmodule chair() {\n    union() {\n        // Four legs\n        translate([chair_width/2 - leg_thick/2, chair_depth/2 - leg_thick/2, 0])\n            leg();\n        translate([-chair_width/2 + leg_thick/2, chair_depth/2 - leg_thick/2, 0])\n            leg();\n        translate([chair_width/2 - leg_thick/2, -chair_depth/2 + leg_thick/2, 0])\n            leg();\n        translate([-chair_width/2 + leg_thick/2, -chair_depth/2 + leg_thick/2, 0])\n            leg();\n        \n        // Side stretchers\n        translate([0, chair_depth/2 - leg_thick/2, chair_height/3])\n            rotate([0, 90, 0])\n            stretcher();\n        translate([0, -chair_depth/2 + leg_thick/2, chair_height/3])\n            rotate([0, 90, 0])\n            stretcher();\n        \n        // Back stretcher\n        translate([-chair_width/2 + leg_thick/2, 0, chair_height/3])\n            rotate([90, 0, 0])\n            cube([leg_thick, chair_depth - leg_thick, rail_thick]);\n        \n        // Seat\n        seat();\n        \n        // Backrest\n        backrest();\n    }\n}\n\nchair();",
    "renders": true
  },
  {
    "toy": "onyx",
    "openscad_code": "// Realistic Onyx Chair Toy - Medium Complexity\n// Dimensions: ~100mm height, 80mm width, 90mm depth\n\n// Parameters\nchair_height = 100;\nseat_height = 50;\nseat_width = 80;\nseat_depth = 90;\nback_height = 50;\nleg_height = seat_height - 8;\nleg_thickness = 8;\narmrest_height = 75;\narmrest_width = 6;\nback_thickness = 6;\ncushion_thickness = 8;\n\n// Main module\nmodule onyx_chair() {\n    // Seat base with cushion\n    union() {\n        // Seat frame\n        difference() {\n            cube([seat_width, seat_depth, 8], center=true);\n            translate([0, 0, 2])\n                cube([seat_width-4, seat_depth-4, 8], center=true);\n        }\n        \n        // Cushion\n        translate([0, 0, 4])\n            cube([seat_width-4, seat_depth-4, cushion_thickness], center=true);\n    }\n    \n    // Backrest\n    translate([0, -seat_depth/2 + back_thickness/2, back_height/2 + 4])\n        cube([seat_width - 20, back_thickness, back_height], center=true);\n    \n    // Backrest slats\n    for(i = [-1:1]) {\n        translate([i * 30, -seat_depth/2 + back_thickness/2, back_height/2 + 4])\n            cube([8, back_thickness, back_height], center=true);\n    }\n    \n    // Legs\n    module leg(x, y) {\n        translate([x, y, -leg_height/2 + 4])\n            cylinder(h=leg_height, r=leg_thickness/2, $fn=8);\n    }\n    \n    leg(seat_width/2 - 10, seat_depth/2 - 10);\n    leg(-seat_width/2 + 10, seat_depth/2 - 10);\n    leg(seat_width/2 - 10, -seat_depth/2 + 10);\n    leg(-seat_width/2 + 10, -seat_depth/2 + 10);\n    \n    // Support bars between legs\n    module support_bar(x1, y1, x2, y2) {\n        length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n        angle = atan2(y2-y1, x2-x1);\n        translate([(x1+x2)/2, (y1+y2)/2, -leg_height/2 + 15])\n            rotate([0, 0, angle])\n                cube([length, 4, 4], center=true);\n    }\n    \n    support_bar(seat_width/2 - 10, seat_depth/2 - 10, -seat_width/2 + 10, seat_depth/2 - 10);\n    support_bar(seat_width/2 - 10, -seat_depth/2 + 10, -seat_width/2 + 10, -seat_depth/2 + 10);\n    support_bar(seat_width/2 - 10, seat_depth/2 - 10, seat_width/2 - 10, -seat_depth/2 + 10);\n    support_bar(-seat_width/2 + 10, seat_depth/2 - 10, -seat_width/2 + 10, -seat_depth/2 + 10);\n    \n    // Armrests\n    module armrest(side) {\n        // Vertical post\n        translate([side * (seat_width/2 - 5), seat_depth/2 - 15, armrest_height/2])\n            cylinder(h=armrest_height - 4, r=4, $fn=8);\n        \n        // Horizontal rest\n        translate([side * (seat_width/2 - 5), seat_depth/2 - 15, armrest_height])\n            cube([armrest_width, seat_depth/3, 4], center=true);\n    }\n    \n    armrest(1);\n    armrest(-1);\n    \n    // Decorative backrest curve\n    translate([0, -seat_depth/2 + back_thickness/2 + 2, back_height + 4])\n        difference() {\n            cube([seat_width - 10, 4, 10], center=true);\n            translate([0, 0, -2])\n                sphere(r=seat_width/2 - 5);\n        }\n}\n\n// Render the chair\nonyx_chair();",
    "renders": true
  },
  {
    "toy": "pulse",
    "openscad_code": "// Toy Pulse Chair - Realistic Medium Complexity\n// Overall dimensions: 100mm wide x 110mm deep x 120mm high\n\nmodule chair_frame() {\n    // Main seat frame - 2mm thick walls\n    difference() {\n        cube([90, 90, 8], center=true);\n        translate([0, 0, 1])\n            cube([86, 86, 10], center=true);\n    }\n    \n    // Backrest frame\n    translate([0, 40, 55])\n    difference() {\n        cube([90, 8, 110], center=true);\n        translate([0, 0, 1])\n            cube([86, 10, 108], center=true);\n    }\n}\n\nmodule legs() {\n    // Four legs with rounded feet\n    for(x = [-35, 35])\n        for(y = [-35, 35])\n            translate([x, y, -28])\n            union() {\n                // Leg post\n                cylinder(h=50, r=4, center=true);\n                // Rounded foot\n                translate([0, 0, -27])\n                sphere(r=6);\n            }\n}\n\nmodule seat_cushion() {\n    // Padded seat cushion\n    translate([0, 0, 8])\n    minkowski() {\n        cube([80, 80, 12], center=true);\n        sphere(r=4);\n    }\n}\n\nmodule backrest_cushion() {\n    // Padded backrest with slight curve\n    translate([0, 40, 60])\n    difference() {\n        minkowski() {\n            cube([80, 6, 90], center=true);\n            sphere(r=4);\n        }\n        // Create slight curve by subtracting cylinder\n        translate([0, -10, 0])\n            rotate([90, 0, 0])\n            cylinder(h=100, r=200, center=true);\n    }\n}\n\nmodule armrests() {\n    // Left and right armrests\n    for(side = [-1, 1]) {\n        translate([side * 45, 25, 35])\n        union() {\n            // Vertical support\n            cylinder(h=40, r=4, center=true);\n            // Horizontal rest\n            translate([0, 0, 20])\n            rotate([90, 0, 90])\n            cylinder(h=50, r=4, center=true);\n            // Armrest pad\n            translate([0, 15, 20])\n            scale([1, 1.5, 0.5])\n            sphere(r=8);\n        }\n    }\n}\n\nmodule support_braces() {\n    // Cross braces between legs for stability\n    for(x = [-35, 35]) {\n        // Front to back braces\n        translate([x, 0, -20])\n        rotate([90, 0, 0])\n        cylinder(h=70, r=2, center=true);\n    }\n    \n    for(y = [-35, 35]) {\n        // Side to side braces\n        translate([0, y, -20])\n        rotate([0, 90, 0])\n        cylinder(h=70, r=2, center=true);\n    }\n}\n\n// Assembly the complete chair\nunion() {\n    chair_frame();\n    legs();\n    support_braces();\n    seat_cushion();\n    backrest_cushion();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "quorra",
    "openscad_code": "// Quorra Chair Toy - Medium Complexity Realistic Style\n// Total height 80mm, seat height 40mm, suitable for 3D printing\n\n// Parameters\nchair_scale = 1;  // Overall scale factor\nwall_thick = 2;   // Wall thickness for 3D printing\n\n// Main chair module\nmodule quorra_chair() {\n    \n    // Chair frame structure\n    color(\"lightgray\") {\n        // Front legs (angled outward slightly)\n        for(side = [-1, 1]) {\n            translate([side * 18, 0, 0]) {\n                rotate([0, side * 5, 0]) {\n                    cylinder(h = 40, d1 = 6, d2 = 4, $fn = 16);\n                }\n            }\n        }\n        \n        // Rear legs (taller for backrest support)\n        for(side = [-1, 1]) {\n            translate([side * 18, -15, 0]) {\n                rotate([0, side * -5, 0]) {\n                    cylinder(h = 50, d1 = 6, d2 = 4, $fn = 16);\n                }\n            }\n        }\n        \n        // Front crossbar support\n        translate([0, 0, 8]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 36, d = 4, $fn = 16);\n            }\n        }\n        \n        // Rear crossbar support\n        translate([0, -15, 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 36, d = 4, $fn = 16);\n            }\n        }\n        \n        // Side support bars\n        for(side = [-1, 1]) {\n            translate([side * 18, -7.5, 25]) {\n                rotate([0, 90, 90]) {\n                    cylinder(h = 15, d = 3, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Seat platform\n    color(\"darkgray\") {\n        translate([0, -5, 40]) {\n            // Main seat base\n            difference() {\n                cube([40, 35, 4], center = true);\n                // Hollow out bottom for material saving\n                translate([0, 0, -1]) {\n                    cube([36, 31, 2], center = true);\n                }\n            }\n            \n            // Seat cushion with rounded edges\n            translate([0, 0, 2]) {\n                minkowski() {\n                    cube([38, 33, 3], center = true);\n                    sphere(d = 2, $fn = 16);\n                }\n                // Hollow cushion\n                translate([0, 0, 1]) {\n                    cube([34, 29, 2], center = true);\n                }\n            }\n        }\n    }\n    \n    // Backrest frame\n    color(\"lightgray\") {\n        // Left and right backrest posts\n        for(side = [-1, 1]) {\n            translate([side * 15, -15, 50]) {\n                rotate([0, side * -5, 0]) {\n                    cylinder(h = 30, d1 = 5, d2 = 4, $fn = 16);\n                }\n            }\n        }\n        \n        // Top backrest bar\n        translate([0, -15, 80]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 30, d = 4, $fn = 16);\n            }\n        }\n    }\n    \n    // Backrest slats (Quorra characteristic parallel lines)\n    color(\"darkgray\") {\n        for(i = [0:3]) {\n            translate([0, -15 + i * 8, 65]) {\n                cube([30, 2, 15], center = true);\n            }\n        }\n    }\n    \n    // Decorative circular elements on backrest\n    color(\"lightgray\") {\n        for(i = [0:1]) {\n            translate([0, -15 + i * 16, 70]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 1, d = 12, $fn = 32);\n                    // Central hole\n                    cylinder(h = 2, d = 6, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Armrests (optional toy feature)\n    color(\"lightgray\") {\n        for(side = [-1, 1]) {\n            translate([side * 20, 5, 50]) {\n                // Support post\n                cylinder(h = 10, d = 4, $fn = 16);\n                // Armrest bar\n                translate([0, 5, 5]) {\n                    rotate([90, 0, 90]) {\n                        cylinder(h = 15, d = 3, $fn = 16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the chair\nscale(chair_scale) quorra_chair();",
    "renders": true
  },
  {
    "toy": "reef",
    "openscad_code": "// Realistic Reef Toy - Coral Formation with Play Features\n// Medium complexity design with 3D printable features\n\n$fn = 24;  // Smooth curves for printing\n\n// Main reef base structure\nmodule reef_base() {\n    difference() {\n        // Main reef body - oval base\n        scale([1.2, 1, 0.6])\n            cylinder(h = 40, d = 80, center = true);\n        \n        // Hollow interior for toy storage\n        translate([0, 0, -5])\n            scale([1.1, 0.9, 0.5])\n                cylinder(h = 50, d = 70, center = true);\n    }\n}\n\n// Coral branch structure\nmodule coral_branch(base_x, base_y, height, angle, thickness) {\n    translate([base_x, base_y, 20]) {\n        rotate([0, angle, 0]) {\n            // Main branch\n            cylinder(h = height, d = thickness, center = false);\n            \n            // Branch segments\n            for(i = [1:3]) {\n                translate([0, 0, i * height/4])\n                    sphere(d = thickness * 1.2);\n            }\n            \n            // Small side branches\n            for(i = [1:2]) {\n                translate([0, 0, i * height/3])\n                rotate([0, 90, 45 * i])\n                    cylinder(h = height/3, d = thickness * 0.7);\n            }\n        }\n    }\n}\n\n// Play feature - removable treasure chest\nmodule treasure_chest() {\n    translate([0, 0, -15]) {\n        // Chest base\n        cube([25, 20, 15], center = true);\n        \n        // Chest lid\n        translate([0, 0, 8])\n            rotate([30, 0, 0])\n                cube([25, 20, 3], center = true);\n        \n        // Chest details\n        for(i = [-8, 8]) {\n            translate([i, 0, 0])\n                cube([2, 22, 16], center = true);\n        }\n    }\n}\n\n// Sea anemone clusters\nmodule anemone(x, y) {\n    translate([x, y, 25]) {\n        // Base\n        sphere(d = 12);\n        \n        // Tentacles\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([5, 0, 5])\n                    cylinder(h = 8, d = 3);\n        }\n    }\n}\n\n// Starfish decoration\nmodule starfish(x, y) {\n    translate([x, y, 22]) {\n        // Simple star shape using cubes\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([0, 5, 0])\n                    cube([3, 10, 2], center = true);\n        }\n        \n        // Center\n        cylinder(h = 3, d = 6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main reef structure\n    reef_base();\n    \n    // Coral formations\n    coral_branch(-20, -15, 30, 15, 8);\n    coral_branch(25, 10, 35, -20, 10);\n    coral_branch(-10, 20, 25, 10, 6);\n    coral_branch(15, -25, 28, 5, 7);\n    \n    // Small coral details\n    for(i = [0:5]) {\n        angle = i * 60;\n        coral_branch(\n            35 * cos(angle), \n            35 * sin(angle), \n            15 + i * 3, \n            -30 + i * 5, \n            4 + i\n        );\n    }\n    \n    // Sea anemones\n    anemone(-30, 0);\n    anemone(30, -20);\n    anemone(0, 30);\n    \n    // Starfish decorations\n    starfish(-15, -25);\n    starfish(20, 15);\n    starfish(-25, 20);\n    \n    // Toy features - treasure chest cavity\n    difference() {\n        translate([0, 0, -10])\n            cube([30, 25, 20], center = true);\n    }\n    \n    // Play holes for marbles\n    for(i = [0:3]) {\n        angle = i * 90;\n        translate([30 * cos(angle), 30 * sin(angle), 10])\n            cylinder(h = 20, d = 12);\n    }\n}\n\n// Optional: Treasure chest insert (print separately)\n// translate([0, 0, -30])\n//     treasure_chest();",
    "renders": true
  },
  {
    "toy": "sable",
    "openscad_code": "// Sable Toy Chair - Realistic Style (Medium Complexity)\n// Overall dimensions: 60mm wide x 55mm deep x 75mm high\n\n// Parameters\nseat_height = 35;\nseat_width = 50;\nseat_depth = 45;\nback_height = 75 - seat_height;\nleg_height = seat_height - 8;\nleg_diameter = 8;\nback_thickness = 6;\narmrest_height = 20;\n\n// Main module\nmodule sable_chair() {\n    \n    // Chair legs\n    for (x = [-1, 1])\n        for (z = [-1, 1]) {\n            translate([x * (seat_width/2 - leg_diameter/2 - 5), \n                      leg_height/2, \n                      z * (seat_depth/2 - leg_diameter/2 - 5)]) {\n                rotate([90, 0, 0])\n                    cylinder(h = leg_height, d = leg_diameter, $fn = 12);\n            }\n        }\n    \n    // Seat frame\n    difference() {\n        // Main seat block\n        translate([0, leg_height, 0])\n            cube([seat_width, back_thickness, seat_depth], center = true);\n        \n        // Cushion recess\n        translate([0, leg_height + 1, 0])\n            cube([seat_width - 10, back_thickness - 2, seat_depth - 10], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, leg_height + back_thickness/2 + 2, 0]) {\n        // Main cushion\n        cube([seat_width - 12, 4, seat_depth - 12], center = true);\n        \n        // Cushion edge details\n        for (x = [-1, 1]) {\n            translate([x * (seat_width/2 - 6), 0, 0])\n                cube([2, 4, seat_depth - 12], center = true);\n        }\n        for (z = [-1, 1]) {\n            translate([0, 0, z * (seat_depth/2 - 6)])\n                cube([seat_width - 12, 4, 2], center = true);\n        }\n    }\n    \n    // Backrest frame\n    translate([0, seat_height + back_height/2, -seat_depth/2 + back_thickness/2 + 5]) {\n        difference() {\n            cube([seat_width - 10, back_height, back_thickness], center = true);\n            // Backrest slats\n            for (y = [1, 3, 5]) {\n                translate([0, back_height/2 - y * 10 - 5, 0])\n                    cube([seat_width - 16, 8, back_thickness - 2], center = true);\n            }\n        }\n    }\n    \n    // Backrest cushion\n    translate([0, seat_height + back_height/2 - 5, -seat_depth/2 + back_thickness + 2]) {\n        cube([seat_width - 14, back_height - 15, 3], center = true);\n    }\n    \n    // Armrest supports\n    for (x = [-1, 1]) {\n        translate([x * (seat_width/2 - 3), seat_height + armrest_height/2, 0]) {\n            cube([6, armrest_height, seat_depth/2 - 5], center = true);\n        }\n    }\n    \n    // Armrests\n    for (x = [-1, 1]) {\n        translate([x * (seat_width/2 - 3), seat_height + armrest_height + 2, 0]) {\n            cube([6, 4, seat_depth/2], center = true);\n            \n            // Armrest end caps\n            translate([0, 0, (seat_depth/2 - 2)])\n                sphere(d = 6, $fn = 12);\n        }\n    }\n    \n    // Cross support bars\n    for (z = [-1, 1]) {\n        translate([0, leg_height/2 + 5, z * (seat_depth/2 - leg_diameter/2 - 5)])\n            cube([seat_width - leg_diameter - 10, 6, 6], center = true);\n    }\n}\n\n// Render the chair\nsable_chair();",
    "renders": true
  },
  {
    "toy": "tide",
    "openscad_code": "// Toy Tide Laundry Detergent Bottle – 1:8 scale, 3D-print friendly\n// All walls ≥ 2 mm; no unsupported over-angles; printable upright\n\n$fn = 32;           // smooth curves\nwall = 2;           // uniform wall thickness\nscale_factor = 0.125;  // 1:8 toy scale\n\n// Main body profile (simplified hour-glass bottle)\nmodule bottle_body() {\n    difference() {\n        // outer shell\n        union() {\n            cylinder(h = 80 * scale_factor, r1 = 28 * scale_factor, r2 = 30 * scale_factor);\n            translate([0, 0, 80 * scale_factor])\n                cylinder(h = 40 * scale_factor, r1 = 30 * scale_factor, r2 = 25 * scale_factor);\n            translate([0, 0, 120 * scale_factor])\n                cylinder(h = 20 * scale_factor, r1 = 25 * scale_factor, r2 = 12 * scale_factor); // neck\n        }\n\n        // hollow inside\n        translate([0, 0, -1])\n            cylinder(h = 142 * scale_factor, r1 = (28 - wall) * scale_factor, r2 = (12 - wall) * scale_factor);\n    }\n}\n\n// Screw cap\nmodule cap() {\n    difference() {\n        union() {\n            // cap top\n            cylinder(h = 10 * scale_factor, r = 14 * scale_factor);\n            // grip ridges\n            for (a = [0:30:330])\n                rotate([0, 0, a])\n                    translate([12 * scale_factor, 0, 5 * scale_factor])\n                        cube([4 * scale_factor, 2 * scale_factor, 10 * scale_factor], center = true);\n        }\n        // internal thread cavity\n        translate([0, 0, -1])\n            cylinder(h = 12 * scale_factor, r = 10 * scale_factor);\n    }\n}\n\n// Handle loop\nmodule handle() {\n    difference() {\n        // outer loop\n        rotate_extrude(angle = 360)\n            translate([34 * scale_factor, 0, 0])\n                square([wall * scale_factor, 12 * scale_factor]);\n        // inner hole\n        rotate_extrude(angle = 360)\n            translate([34 * scale_factor, 0, 0])\n                square([wall * scale_factor, (12 - 2 * wall) * scale_factor]);\n    }\n}\n\n// Curved label panel recess\nmodule label_recess() {\n    difference() {\n        cube([50 * scale_factor, 1 * scale_factor, 70 * scale_factor], center = true);\n        translate([0, 1, 0])\n            resize([50 * scale_factor, 5 * scale_factor, 70 * scale_factor])\n                sphere(r = 30 * scale_factor);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) bottle_body();\ntranslate([0, 0, 120 * scale_factor + 10 * scale_factor]) cap();\ntranslate([0, 34 * scale_factor, 50 * scale_factor]) rotate([90, 0, 0]) handle();\ntranslate([0, 30 * scale_factor + 1, 45 * scale_factor]) label_recess();",
    "renders": true
  },
  {
    "toy": "umbra",
    "openscad_code": "// Umbra toy chair - realistic style, medium complexity\n// Overall dimensions: 60mm W x 55mm D x 85mm H\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main chair module\nmodule umbra_chair() {\n    // Seat frame - 2mm wall thickness\n    difference() {\n        // Outer seat frame\n        cube([58, 50, 6], center=true);\n        \n        // Inner hollow for seat frame\n        translate([0, 0, -1])\n            cube([54, 46, 8], center=true);\n    }\n    \n    // Seat cushion - slightly curved top\n    translate([0, 0, 5])\n    difference() {\n        // Main cushion\n        minkowski() {\n            cube([54, 46, 8], center=true);\n            sphere(2, $fn=20);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            minkowski() {\n                cube([50, 42, 10], center=true);\n                sphere(1.5, $fn=20);\n            }\n    }\n    \n    // Backrest frame\n    translate([0, -20, 25])\n    difference() {\n        // Outer backrest\n        cube([56, 2, 50], center=true);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cube([52, 4, 48], center=true);\n    }\n    \n    // Backrest slats - realistic spacing\n    for(i = [-20:10:20]) {\n        translate([i, -19, 25])\n        difference() {\n            cube([6, 2, 48], center=true);\n            translate([0, 0, -1])\n                cube([4, 4, 46], center=true);\n        }\n    }\n    \n    // Legs - tapered design for stability\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, -35])\n        difference() {\n            // Tapered outer leg\n            cylinder(h1=40, h2=40, r1=4, r2=3, center=true, $fn=16);\n            \n            // Hollow center\n            cylinder(h1=42, h2=42, r1=2, r2=1, center=true, $fn=16);\n        }\n    }\n    \n    // Position legs at corners with proper spacing\n    leg(24, 21);\n    leg(-24, 21);\n    leg(24, -21);\n    leg(-24, -21);\n    \n    // Front support bar between legs\n    translate([0, 21, -20])\n    difference() {\n        cube([46, 2, 4], center=true);\n        translate([0, 0, -1])\n            cube([42, 4, 6], center=true);\n    }\n    \n    // Rear support bar\n    translate([0, -21, -20])\n    difference() {\n        cube([46, 2, 4], center=true);\n        translate([0, 0, -1])\n            cube([42, 4, 6], center=true);\n    }\n    \n    // Side support bars\n    translate([24, 0, -20])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=42, r=2, center=true, $fn=16);\n        cylinder(h=44, r=1, center=true, $fn=16);\n    }\n    \n    translate([-24, 0, -20])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=42, r=2, center=true, $fn=16);\n        cylinder(h=44, r=1, center=true, $fn=16);\n    }\n    \n    // Armrests\n    module armrest(side) {\n        translate([side * 30, 0, 15])\n        difference() {\n            // Main armrest\n            rotate([0, 10, 0])\n            cube([4, 40, 20], center=true);\n            \n            // Hollow interior\n            translate([0, 0, -1])\n                rotate([0, 10, 0])\n                cube([2, 38, 22], center=true);\n        }\n    }\n    \n    armrest(1);\n    armrest(-1);\n    \n    // Armrest supports\n    module arm_support(side) {\n        translate([side * 28, 15, 5])\n        difference() {\n            cube([4, 2, 20], center=true);\n            translate([0, 0, -1])\n                cube([2, 4, 22], center=true);\n        }\n    }\n    \n    arm_support(1);\n    arm_support(-1);\n}\n\n// Create the chair centered at origin\numbra_chair();",
    "renders": true
  },
  {
    "toy": "vex",
    "openscad_code": "// VEX Toy Chair - Realistic Style, Medium Complexity\n// 3D printable toy chair with realistic proportions and structural details\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 75;\nchair_height = 100;\nseat_height = 50;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Leg dimensions\nleg_width = 8;\nleg_depth = 8;\n\n// Seat cushion dimensions\ncushion_thickness = 8;\ncushion_overhang = 3;\n\n// Backrest dimensions\nbackrest_height = 50;\nbackrest_thickness = 6;\nbackrest_slat_width = 6;\nbackrest_slat_gap = 4;\n\nmodule chair_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        // Main leg post\n        cube([leg_width, leg_depth, seat_height], center=false);\n        \n        // Leg support braces\n        translate([0, 0, seat_height/2]) {\n            rotate([0, 45, 0]) {\n                cube([leg_width, leg_width*1.4, wall_thickness], center=false);\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat base\n    translate([0, 0, seat_height]) {\n        cube([chair_width, chair_depth, cushion_thickness], center=true);\n        \n        // Overhanging cushion top\n        translate([0, 0, cushion_thickness/2]) {\n            cube([chair_width + cushion_overhang*2, \n                  chair_depth + cushion_overhang*2, \n                  cushion_thickness/2], center=true);\n        }\n        \n        // Cushion rounding effect\n        for(x = [-chair_width/2 + 5:5:chair_width/2 - 5]) {\n            for(y = [-chair_depth/2 + 5:5:chair_depth/2 - 5]) {\n                translate([x, y, cushion_thickness + cushion_thickness/4]) {\n                    sphere(d=3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    translate([0, -chair_depth/2 + backrest_thickness/2, \n               seat_height + cushion_thickness + backrest_height/2]) {\n        \n        // Main backrest frame\n        difference() {\n            cube([chair_width - 10, backrest_thickness, backrest_height], center=true);\n            \n            // Cut slats pattern\n            for(i = [-1, 0, 1]) {\n                translate([i * (backrest_slat_width + backrest_slat_gap), \n                          0, 0]) {\n                    cube([backrest_slat_width, backrest_thickness + 2, backrest_height], center=true);\n                }\n            }\n        }\n        \n        // Top backrest rail\n        translate([0, 0, backrest_height/2 + 3]) {\n            cube([chair_width - 5, backrest_thickness + 2, 6], center=true);\n        }\n        \n        // Bottom backrest support\n        translate([0, 0, -backrest_height/2 + 3]) {\n            cube([chair_width - 8, backrest_thickness + 1, 4], center=true);\n        }\n    }\n}\n\nmodule stretcher() {\n    // Side stretchers\n    translate([-chair_width/2 + leg_width/2, 0, seat_height/3]) {\n        cube([wall_thickness, chair_depth - leg_depth*2, leg_width], center=true);\n    }\n    translate([chair_width/2 - leg_width/2, 0, seat_height/3]) {\n        cube([wall_thickness, chair_depth - leg_depth*2, leg_width], center=true);\n    }\n    \n    // Front stretcher\n    translate([0, -chair_depth/2 + leg_depth/2, seat_height/3]) {\n        cube([chair_width - leg_width*2, wall_thickness, leg_width], center=true);\n    }\n    \n    // Rear stretcher\n    translate([0, chair_depth/2 - leg_depth/2, seat_height/3]) {\n        cube([chair_width - leg_width*2, wall_thickness, leg_width], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    chair_leg(-chair_width/2 + leg_width/2, -chair_depth/2 + leg_depth/2);\n    chair_leg(chair_width/2 - leg_width/2, -chair_depth/2 + leg_depth/2);\n    chair_leg(-chair_width/2 + leg_width/2, chair_depth/2 - leg_depth/2);\n    chair_leg(chair_width/2 - leg_width/2, chair_depth/2 - leg_depth/2);\n    \n    // Structural stretchers\n    stretcher();\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n}",
    "renders": true
  },
  {
    "toy": "wren",
    "openscad_code": "// Wren toy bird - realistic style, medium complexity\n// Total height ~70mm, designed for 3D printing\n\n// Main body module\nmodule wren_body() {\n    // Central body core\n    difference() {\n        scale([1.2, 0.8, 1]) sphere(d=20, $fn=32);  // Main body\n        \n        // Tail notch\n        translate([10, 0, -8]) cube([8, 6, 6], center=true);\n    }\n}\n\n// Head module\nmodule wren_head() {\n    translate([0, 0, 18]) {\n        // Head sphere\n        sphere(d=14, $fn=32);\n        \n        // Beak\n        translate([7, 0, 0]) rotate([0, -20, 0]) \n            cylinder(h=8, d1=4, d2=2, $fn=8);\n    }\n}\n\n// Wing module\nmodule wren_wing(side) {\n    mirror([side, 0, 0]) {\n        translate([-2, 8, 8]) rotate([0, 20, 0]) {\n            // Main wing\n            scale([1.2, 0.3, 0.8]) sphere(d=12, $fn=16);\n            \n            // Wing tip\n            translate([8, 0, 2]) rotate([0, -10, 10])\n                scale([0.8, 0.3, 0.6]) sphere(d=8, $fn=16);\n        }\n    }\n}\n\n// Tail module\nmodule wren_tail() {\n    translate([-12, 0, -2]) rotate([20, 0, 0]) {\n        // Main tail feathers\n        for(i=[-1:0.5:1]) {\n            translate([0, i*3, i*2]) rotate([0, i*10, 0])\n                scale([1.5, 0.3, 0.8]) sphere(d=10, $fn=8);\n        }\n    }\n}\n\n// Leg and foot module\nmodule wren_leg(side) {\n    mirror([side, 0, 0]) {\n        // Upper leg\n        translate([0, 4, -12]) rotate([30, 0, 0])\n            cylinder(h=6, d=3, $fn=8);\n        \n        // Lower leg\n        translate([0, 5, -17]) rotate([60, 0, 0])\n            cylinder(h=5, d=2.5, $fn=8);\n        \n        // Feet - three toes\n        translate([0, 6, -21]) {\n            for(angle=[-30, 0, 30]) {\n                rotate([90, 0, angle])\n                    cylinder(h=4, d=1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Eye detail\nmodule wren_eye(side) {\n    mirror([side, 0, 0]) {\n        translate([5, 3.5, 18]) {\n            // White part\n            color(\"white\") sphere(d=3, $fn=16);\n            // Pupil\n            translate([0.5, 0, 0.5]) color(\"black\") sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Chest detail\nmodule wren_chest() {\n    translate([0, 0, 8]) {\n        // Feather texture lines\n        for(z=[0:3:12]) {\n            rotate([0, 0, 90]) \n                translate([z-6, 0, z/2]) \n                cylinder(h=0.5, d=10-z/2, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    wren_body();\n    wren_head();\n    \n    // Appendages\n    wren_wing(1);    // Right wing\n    wren_wing(-1);   // Left wing\n    wren_tail();\n    \n    // Legs and feet\n    wren_leg(1);     // Right leg\n    wren_leg(-1);    // Left leg\n    \n    // Details\n    wren_eye(1);     // Right eye\n    wren_eye(-1);    // Left eye\n    wren_chest();\n}",
    "renders": true
  },
  {
    "toy": "xyla",
    "openscad_code": "// Toy Xyla (Rocking Chair) - Realistic Medium Complexity\n// Dimensions: 100mm width, 120mm depth, 90mm height\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nseat_width = 80;\nseat_depth = 60;\nback_height = 40;\nrocker_radius = 300;\n\n// Main seat platform\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, 45])\n            cube([seat_width, seat_depth, 5], center=true);\n        \n        // Remove inner cavity for weight reduction\n        translate([0, 0, 46])\n            cube([seat_width-4, seat_depth-4, 6], center=true);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Back frame\n    difference() {\n        translate([0, seat_depth/2-5, 65])\n            cube([seat_width, 5, back_height*2], center=true);\n        \n        // Inner cavity\n        translate([0, seat_depth/2-4, 65])\n            cube([seat_width-4, 7, back_height*2-4], center=true);\n    }\n    \n    // Slats\n    for(i = [-30:15:30]) {\n        translate([i, seat_depth/2-5, 65])\n            cube([10, 5, 30], center=true);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left arm\n    translate([-seat_width/2-5, 0, 60])\n        cube([5, seat_depth-10, 15], center=true);\n    \n    // Right arm\n    translate([seat_width/2+5, 0, 60])\n        cube([5, seat_depth-10, 15], center=true);\n}\n\n// Rockers\nmodule rockers() {\n    // Left rocker\n    difference() {\n        translate([-seat_width/2+10, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=seat_depth+20, r=rocker_radius, center=true);\n        \n        // Create flat bottom\n        translate([-seat_width/2+10, 0, -5])\n            cube([seat_width, seat_depth+40, 50], center=true);\n    }\n    \n    // Right rocker\n    difference() {\n        translate([seat_width/2-10, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=seat_depth+20, r=rocker_radius, center=true);\n        \n        // Create flat bottom\n        translate([seat_width/2-10, 0, -5])\n            cube([seat_width, seat_depth+40, 50], center=true);\n    }\n}\n\n// Support beams\nmodule supports() {\n    // Front support\n    translate([0, -seat_depth/2+10, 30])\n        cube([seat_width-10, 5, 30], center=true);\n    \n    // Rear support\n    translate([0, seat_depth/2-10, 30])\n        cube([seat_width-10, 5, 30], center=true);\n}\n\n// Decorative buttons on backrest\nmodule buttons() {\n    for(i = [-30:15:30]) {\n        translate([i, seat_depth/2-8, 80])\n            sphere(r=2);\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    armrests();\n    rockers();\n    supports();\n    buttons();\n}",
    "renders": true
  },
  {
    "toy": "yuki",
    "openscad_code": "// Yuki toy chair - realistic style, medium complexity\n// Dimensions: 80mm x 90mm x 100mm (seat height 50mm)\n\n// Parameters\nseat_width = 40;\nseat_depth = 40;\nseat_thickness = 3;\nback_height = 50;\nleg_height = 50;\nleg_thickness = 4;\narmrest_height = 30;\narmrest_width = 6;\n\n// Main chair module\nmodule yuki_chair() {\n    // Chair legs with rounded feet\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (seat_width/2 - leg_thickness), \n                      y * (seat_depth/2 - leg_thickness), 0]) {\n                // Leg post\n                cylinder(h=leg_height, r=leg_thickness, $fn=12);\n                // Rounded foot\n                translate([0, 0, leg_height]) {\n                    sphere(r=leg_thickness + 1);\n                }\n            }\n        }\n    }\n    \n    // Seat base\n    translate([0, 0, leg_height]) {\n        // Main seat\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Seat cushion detail\n        translate([0, 0, seat_thickness/2 + 1]) {\n            cube([seat_width - 4, seat_depth - 4, 2], center=true);\n        }\n    }\n    \n    // Backrest posts\n    for (x = [-seat_width/2 + 3, seat_width/2 - 3]) {\n        translate([x, -seat_depth/2 + 3, leg_height + seat_thickness]) {\n            cylinder(h=back_height, r=2, $fn=8);\n        }\n    }\n    \n    // Backrest panel\n    translate([0, -seat_depth/2 + 2, leg_height + seat_thickness + back_height/2]) {\n        cube([seat_width - 6, 3, back_height - 4], center=true);\n    }\n    \n    // Armrests\n    for (side = [-1, 1]) {\n        translate([side * (seat_width/2 + armrest_width/2), 0, \n                  leg_height + seat_thickness + armrest_height/2]) {\n            cube([armrest_width, seat_depth - 8, armrest_height], center=true);\n            // Armrest support\n            translate([0, 0, -armrest_height/2]) {\n                cylinder(h=armrest_height, r=2, $fn=8);\n            }\n        }\n    }\n    \n    // Cross support bars\n    translate([0, -seat_depth/2 + leg_thickness, leg_height/2]) {\n        cube([seat_width - leg_thickness*2, leg_thickness, leg_thickness], center=true);\n    }\n    \n    // Back support bar\n    rotate([90, 0, 0]) {\n        translate([0, leg_height + seat_thickness/2, seat_depth/2 - leg_thickness]) {\n            cube([seat_width - leg_thickness*2, leg_thickness, leg_thickness], center=true);\n        }\n    }\n}\n\n// Create the chair\nyuki_chair();",
    "renders": true
  },
  {
    "toy": "zane",
    "openscad_code": "// Zane Toy Chair - Realistic Medium Complexity\n// Overall dimensions: 60mm W x 55mm D x 80mm H\n\n$fn = 32;  // Smooth curves for printing\n\n// Main assembly\nmodule zane_chair() {\n    // Chair frame\n    union() {\n        // Seat base\n        seat_base();\n        \n        // Backrest\n        backrest();\n        \n        // Legs\n        legs();\n        \n        // Armrests\n        armrests();\n        \n        // Support bars\n        support_bars();\n        \n        // Decorative elements\n        decorative_elements();\n    }\n}\n\n// Seat base with cushion\nmodule seat_base() {\n    // Seat frame\n    translate([0, 0, 40])\n    difference() {\n        cube([50, 45, 8], center = true);\n        translate([0, 0, -1])\n        cube([46, 41, 10], center = true);\n    }\n    \n    // Cushion\n    translate([0, 0, 48])\n    difference() {\n        // Main cushion\n        minkowski() {\n            cube([48, 43, 6], center = true);\n            sphere(r = 2);\n        }\n        \n        // Tuck lines\n        for (i = [-15:15:15]) {\n            translate([i, 0, 3])\n            cube([0.5, 40, 4], center = true);\n        }\n        for (j = [-12:12:12]) {\n            translate([0, j, 3])\n            cube([46, 0.5, 4], center = true);\n        }\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Back frame\n    translate([0, -20, 65])\n    difference() {\n        cube([48, 4, 30], center = true);\n        translate([0, 0, -1])\n        cube([44, 6, 32], center = true);\n    }\n    \n    // Back slats\n    for (i = [-20:10:20]) {\n        translate([i, -20, 60])\n        cube([4, 3, 20], center = true);\n    }\n    \n    // Top rail\n    translate([0, -20, 80])\n    difference() {\n        cube([50, 5, 4], center = true);\n        translate([0, 0, -1])\n        cube([46, 7, 6], center = true);\n    }\n}\n\n// Four legs with stretchers\nmodule legs() {\n    // Front legs\n    translate([-20, 20, 20])\n    leg();\n    translate([20, 20, 20])\n    leg();\n    \n    // Back legs\n    translate([-20, -20, 20])\n    leg();\n    translate([20, -20, 20])\n    leg();\n}\n\n// Single leg module\nmodule leg() {\n    difference() {\n        cylinder(h = 40, r = 3);\n        translate([0, 0, -1])\n        cylinder(h = 42, r = 2.5);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-27, 0, 55])\n    union() {\n        // Support post\n        cylinder(h = 15, r = 2.5);\n        \n        // Arm pad\n        translate([0, 0, 8])\n        cube([4, 25, 3], center = true);\n    }\n    \n    // Right armrest\n    translate([27, 0, 55])\n    mirror([1, 0, 0])\n    union() {\n        cylinder(h = 15, r = 2.5);\n        translate([0, 0, 8])\n        cube([4, 25, 3], center = true);\n    }\n}\n\n// Support bars between legs\nmodule support_bars() {\n    // Front support\n    translate([0, 20, 10])\n    cube([44, 2, 3], center = true);\n    \n    // Back support\n    translate([0, -20, 10])\n    cube([44, 2, 3], center = true);\n    \n    // Side supports\n    translate([-20, 0, 10])\n    cube([2, 40, 3], center = true);\n    translate([20, 0, 10])\n    cube([2, 40, 3], center = true);\n}\n\n// Decorative elements (rivets and caps)\nmodule decorative_elements() {\n    // Rivets on seat frame\n    for (x = [-22:11:22]) {\n        for (y = [-17:17:17]) {\n            translate([x, y, 40])\n            sphere(r = 1);\n        }\n    }\n    \n    // Caps on leg tops\n    for (x = [-20:40:40]) {\n        for (y = [-20:40:40]) {\n            translate([x, y, 40])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Render the chair\nzane_chair();",
    "renders": true
  },
  {
    "toy": "armor",
    "openscad_code": "// Toy armor chest plate - realistic style, medium complexity\n// Overall size: 120mm tall x 100mm wide x 40mm deep\n\n// Main body thickness\nwall = 2;\n\n// Torso dimensions\ntorso_h = 120;\ntorso_w = 100;\ntorso_d = 35;\n\n// Shoulder width\nshoulder_w = 35;\nshoulder_l = 25;\n\n// Neck hole\nneck_r = 18;\nneck_h = 30;\n\n// Ab plate pattern\nab_plates = 4;\nab_h = torso_h * 0.4 / ab_plates;\n\nmodule torso_base() {\n    difference() {\n        // Main torso block\n        cube([torso_w, torso_d, torso_h], center=true);\n        \n        // Hollow inside\n        translate([0, 2, 0])\n            cube([torso_w-wall*2, torso_d-wall, torso_h-wall*2], center=true);\n        \n        // Neck hole\n        translate([0, torso_d/2 - 2, torso_h/2 - neck_h/2])\n            cylinder(h=neck_h+2, r=neck_r, center=false);\n        \n        // Arm holes\n        translate([torso_w/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=30, r=18, center=true);\n        translate([-torso_w/2 + 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=30, r=18, center=true);\n    }\n}\n\nmodule shoulder_guard(side) {\n    translate([side * (torso_w/2 - shoulder_w/2), 0, torso_h/2 - shoulder_l/2]) {\n        difference() {\n            // Shoulder pad\n            cube([shoulder_w, torso_d + 10, shoulder_l], center=true);\n            \n            // Chamfer edges\n            translate([0, torso_d/2 + 5, shoulder_l/2])\n                cube([shoulder_w, 10, 5], center=true);\n            translate([0, -torso_d/2 - 5, shoulder_l/2])\n                cube([shoulder_w, 10, 5], center=true);\n        }\n        \n        // Rivets\n        for(x = [-shoulder_w/3, shoulder_w/3]) {\n            for(z = [-shoulder_l/3, shoulder_l/3]) {\n                translate([x, torso_d/2 + 2, z])\n                    sphere(r=2);\n            }\n        }\n    }\n}\n\nmodule ab_section() {\n    for(i = [0:ab_plates-1]) {\n        translate([0, 0, -torso_h/2 + 10 + i * ab_h]) {\n            difference() {\n                // Ab plate\n                cube([torso_w - 20, torso_d, ab_h - 1], center=true);\n                \n                // Groove lines\n                translate([0, 0, ab_h/2 - 0.5])\n                    cube([torso_w - 15, torso_d + 2, 1], center=true);\n                translate([0, 0, -ab_h/2 + 0.5])\n                    cube([torso_w - 15, torso_d + 2, 1], center=true);\n            }\n            \n            // Side rivets\n            for(side = [-1, 1]) {\n                translate([side * (torso_w/2 - 15), 0, 0])\n                    sphere(r=2);\n            }\n        }\n    }\n}\n\nmodule back_strap() {\n    translate([0, -torso_d/2 - 2, 0]) {\n        // Central back strap\n        cube([20, 4, torso_h - 20], center=true);\n        \n        // Attachment loops\n        for(y = [-torso_h/3, 0, torso_h/3]) {\n            translate([0, -3, y]) {\n                cube([15, 2, 8], center=true);\n                translate([0, -1, 0])\n                    cube([11, 2, 4], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main torso\n    torso_base();\n    \n    // Shoulder guards\n    shoulder_guard(1);\n    shoulder_guard(-1);\n    \n    // Ab section plates\n    ab_section();\n    \n    // Back strap\n    back_strap();\n}",
    "renders": true
  },
  {
    "toy": "byte",
    "openscad_code": "// Toy Byte (Furniture-style Storage Block)\n// 3D printable toy representing a stylized data byte as a small storage cabinet\n// Dimensions: 60mm x 40mm x 50mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main module for the byte toy\nmodule byte_toy() {\n    // Base cabinet structure\n    difference() {\n        // Main cabinet body\n        cube([60, 40, 50], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([60-wall*2, 40-wall*2, 50-wall], center = true);\n    }\n    \n    // Top surface detail - bit indicators\n    for(x = [-20:10:20]) {\n        translate([x, -15, 25.1]) {\n            cylinder(h=1, r=3, $fn=16);\n        }\n    }\n    \n    // Front drawer faces (8 bits)\n    for(i = [0:7]) {\n        drawer_face(i);\n    }\n    \n    // Side ventilation slits\n    for(z = [-15:10:15]) {\n        translate([30.1, 0, z])\n            cube([0.5, 30, 2]);\n    }\n    \n    // Back connection port\n    translate([0, -20, 0])\n        connection_port();\n    \n    // Bottom feet\n    foot_positions = [[-25, -15], [25, -15], [-25, 15], [25, 15]];\n    for(pos = foot_positions) {\n        translate([pos[0], pos[1], -26])\n            cylinder(h=4, r=3, $fn=16);\n    }\n    \n    // Handle bar on top\n    translate([0, 0, 30])\n        rotate([90, 0, 0])\n            cylinder(h=50, r=2, $fn=16);\n}\n\n// Individual drawer face module\nmodule drawer_face(bit_index) {\n    x_pos = -22.5 + bit_index * 6.5;\n    \n    // Drawer face\n    translate([x_pos, 19.9, 12.5 - bit_index * 2.5])\n        cube([5, 0.5, 4]);\n    \n    // Drawer handle (knob)\n    translate([x_pos, 21, 12.5 - bit_index * 2.5])\n        sphere(r=1.5, $fn=16);\n}\n\n// Connection port on back\nmodule connection_port() {\n    // Port housing\n    difference() {\n        translate([0, -20.1, 0])\n            cube([20, 2, 15], center = true);\n        \n        // Port opening\n        translate([0, -21, 0])\n            cube([16, 3, 11], center = true);\n    }\n    \n    // Port pins\n    for(pin = [-6:3:6]) {\n        translate([pin, -21, 0])\n            cylinder(h=2, r=1, $fn=8);\n    }\n}\n\n// Render the complete toy\nbyte_toy();",
    "renders": true
  },
  {
    "toy": "crash",
    "openscad_code": "// Crash Toy Car - Realistic Style\n// Includes reinforced bumper, crumple zones, and detachable wheels for toy safety\n\n$fn=30;\n\nmodule crash_car() {\n    // Main body shell (crumpled effect)\n    difference() {\n        hull() {\n            // Front hood with crumple zone\n            translate([-30,0,10]) scale([1,0.8,0.3]) sphere(r=15);\n            translate([25,0,12]) scale([1.2,1,0.4]) sphere(r=18);\n            // Cabin area\n            translate([10,0,20]) scale([1.5,1.1,0.6]) sphere(r=15);\n        }\n        \n        // Crumple zone indentations\n        for(i=[-20:10:10]) {\n            translate([i,0,15]) rotate([0,90,0]) cylinder(h=25,r=3);\n        }\n        \n        // Side impact crumples\n        for(side=[-1,1]) {\n            translate([5,side*12,12]) rotate([90,0,0]) cylinder(h=8,r=2.5);\n            translate([-10,side*12,8]) rotate([90,0,0]) cylinder(h=6,r=2);\n        }\n    }\n    \n    // Reinforced bumper (2mm walls)\n    difference() {\n        translate([-35,0,5]) cube([10,30,10], center=true);\n        translate([-35,0,5]) cube([6,26,6], center=true);\n    }\n    \n    // Wheels with toy-style axles\n    module wheel(pos, angle=0) {\n        translate(pos) rotate([0,0,angle]) {\n            // Tire\n            color(\"black\") cylinder(h=8, r=10);\n            // Rim\n            color(\"gray\") translate([0,0,1]) cylinder(h=6, r=7);\n            // Hub\n            color(\"silver\") translate([0,0,4]) cylinder(h=2, r=5);\n        }\n    }\n    \n    // Position wheels\n    wheel([-20, -20, 0]);\n    wheel([-20, 20, 0]);\n    wheel([20, -20, 0]);\n    wheel([20, 20, 0]);\n    \n    // Windshield frame\n    difference() {\n        translate([5,0,25]) cube([20,30,15], center=true);\n        translate([6,0,26]) cube([22,28,13], center=true);\n    }\n    \n    // Side mirrors (toy-safe rounded)\n    for(side=[-1,1]) {\n        translate([0, side*15, 28]) sphere(r=3);\n    }\n    \n    // Roof reinforcement bar\n    color(\"gray\") translate([5,0,35]) cube([25,5,3], center=true);\n    \n    // Undercarriage protection plate\n    color(\"darkgray\") translate([0,0,-2]) cube([60,40,2], center=true);\n    \n    // Crash test markings\n    color(\"white\") {\n        translate([-25,0,12]) cube([5,2,0.5]);\n        translate([0,0,12]) cube([5,2,0.5]);\n        translate([25,0,12]) cube([5,2,0.5]);\n    }\n}\n\n// Scale to 100mm length\nscale(0.8) crash_car();",
    "renders": true
  },
  {
    "toy": "dune",
    "openscad_code": "// Dune Toy Buggy - Realistic Style with Medium Complexity\n// Dimensions: 120mm long x 70mm wide x 45mm tall\n\n$fn = 32;\n\n// Main body module\nmodule buggy_body() {\n    difference() {\n        // Main chassis\n        hull() {\n            translate([0, 0, 10]) cube([100, 60, 15], center = true);\n            translate([30, 0, 25]) cube([70, 55, 8], center = true);\n        }\n        \n        // Cockpit cutout\n        translate([0, 0, 15])\n            scale([0.8, 0.9, 1])\n            cube([90, 50, 20], center = true);\n        \n        // Windshield opening\n        translate([-35, 0, 28])\n            cube([30, 40, 15], center = true);\n    }\n    \n    // Windshield frame\n    difference() {\n        translate([-35, 0, 35])\n            rotate([15, 0, 0])\n            cube([35, 55, 3], center = true);\n        translate([-35, 0, 35])\n            rotate([15, 0, 0])\n            scale([0.9, 0.9, 1])\n            cube([35, 55, 4], center = true);\n    }\n    \n    // Rear spoiler\n    translate([45, 0, 35])\n        rotate([5, 0, 0])\n        cube([50, 60, 2], center = true);\n}\n\n// Wheel module with tire treads\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire\n            cylinder(h = 10, r = 15);\n            \n            // Tread pattern\n            for(i = [0:30:330]) {\n                rotate([0, 0, i])\n                    translate([0, 13.5, 0])\n                        cube([3, 1, 10], center = true);\n            }\n            \n            // Rim\n            translate([0, 0, 5])\n                cylinder(h = 5, r = 8);\n            \n            // Hub detail\n            translate([0, 0, 7.5])\n                cylinder(h = 2, r = 5);\n        }\n        \n        // Center hole for axle\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 2);\n    }\n}\n\n// Suspension arm module\nmodule suspension_arm() {\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([20, 8, 4], center = true);\n            translate([15, 0, 0])\n                cube([8, 6, 3], center = true);\n        }\n        \n        // Mounting holes\n        translate([15, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r = 1.5);\n    }\n}\n\n// Roll cage module\nmodule roll_cage() {\n    // Main hoop\n    translate([10, 0, 30])\n        rotate([0, 20, 0])\n        cylinder(h = 60, r = 2);\n    \n    // Side bars\n    for(side = [-1, 1]) {\n        translate([0, side * 25, 30])\n            rotate([0, 10, 0])\n            cylinder(h = 50, r = 2);\n        \n        // Cross bars\n        translate([0, 0, 40])\n            rotate([90, 0, 90])\n            cylinder(h = 50, r = 2);\n    }\n    \n    // Support bars\n    for(side = [-1, 1]) {\n        hull() {\n            translate([30, side * 20, 25])\n                sphere(r = 2);\n            translate([40, side * 25, 35])\n                sphere(r = 2);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    difference() {\n        hull() {\n            translate([50, 20, 20])\n                cylinder(h = 5, r = 4);\n            translate([65, 25, 22])\n                cylinder(h = 5, r = 3);\n        }\n        \n        // Hollow pipe\n        translate([50, 20, 20])\n            cylinder(h = 5, r = 2);\n        translate([65, 25, 22])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Headlight module\nmodule headlight() {\n    difference() {\n        // Housing\n        translate([-45, 0, 15])\n            rotate([0, 10, 0])\n            cube([8, 15, 8], center = true);\n        \n        // Lens\n        translate([-45, 0, 15])\n            rotate([0, 10, 0])\n            scale([0.8, 0.8, 0.8])\n            cube([8, 15, 8], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    buggy_body();\n    \n    // Wheels with suspension\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([-30, side * 35, 10])\n            rotate([90, 0, 0])\n            wheel();\n        \n        // Rear wheels\n        translate([30, side * 35, 10])\n            rotate([90, 0, 0])\n            wheel();\n        \n        // Suspension arms\n        translate([-30, side * 25, 10])\n            suspension_arm();\n        translate([30, side * 25, 10])\n            rotate([180, 0, 0])\n            suspension_arm();\n    }\n    \n    // Structural elements\n    roll_cage();\n    exhaust();\n    \n    // Lights\n    for(side = [-1, 1]) {\n        translate([-45, side * 20, 15])\n            headlight();\n    }\n}",
    "renders": true
  },
  {
    "toy": "flare",
    "openscad_code": "// Toy Flare for 3D printing – realistic medium-complexity design\n// Overall length ≈ 95 mm, Ø 20 mm, wall 2 mm, no support needed\n\n$fn = 36;            // smooth curves\n\nmodule flare() {\n    // Main tube body\n    difference() {\n        cylinder(h = 70, d = 20, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 66, d = 16, center = false); // hollow core\n    }\n\n    // Red translucent cap (removable toy detail)\n    translate([0, 0, 70])\n        cylinder(h = 15, d1 = 22, d2 = 20, center = false);\n\n    // Ignition button on side\n    translate([0, 10, 55])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 6, d = 6, center = true);\n            translate([0, 0, -1])\n                cube([4, 4, 8], center = true);\n        }\n\n    // Belt clip / bracket (functional toy detail)\n    translate([0, -11, 30])\n        rotate([0, 90, 0])\n        difference() {\n            union() {\n                cylinder(h = 20, d = 6, center = true);\n                translate([0, 0, 10])\n                    cube([20, 2, 6], center = true);\n            }\n            translate([0, 0, 0])\n                cylinder(h = 20, d = 3, center = true);\n        }\n\n    // Safety ring under cap\n    translate([0, 0, 68])\n        difference() {\n            cylinder(h = 2, d = 24, center = false);\n            cylinder(h = 3, d = 20, center = false);\n        }\n\n    // Thread grip bands around body\n    for (z = [5:10:65]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 2, d = 21, center = false);\n                cylinder(h = 3, d = 19, center = false);\n            }\n    }\n}\n\nflare();",
    "renders": true
  },
  {
    "toy": "gear",
    "openscad_code": "// Realistic Toy Gear - Medium Complexity (3D Printable)\n// Size: 80mm diameter, 12mm thick\n\n// Parameters\n$fn = 36;  // Smooth curves for 3D printing\ngear_diameter = 80;\nhub_diameter = 20;\nshaft_diameter = 6;\nthickness = 12;\nteeth_count = 20;\ntooth_height = 8;\nwall_thickness = 2;\nhandle_length = 30;\nhandle_diameter = 8;\n\n// Main gear body with teeth\nmodule gear_body() {\n    difference() {\n        // Base cylinder\n        cylinder(h=thickness, d=gear_diameter, center=true);\n        \n        // Central shaft hole\n        translate([0, 0, -thickness/2 - 1])\n            cylinder(h=thickness + 2, d=shaft_diameter, center=true);\n    }\n}\n\n// Individual tooth module\nmodule tooth() {\n    // Trapezoidal tooth shape for realistic look\n    linear_extrude(height=thickness, center=true, convexity=10)\n        polygon(points=[\n            [gear_diameter/2 - tooth_height, -2.5],\n            [gear_diameter/2, -1.5],\n            [gear_diameter/2, 1.5],\n            [gear_diameter/2 - tooth_height, 2.5]\n        ]);\n}\n\n// All teeth array\nmodule all_teeth() {\n    for (i = [0:teeth_count-1]) {\n        rotate([0, 0, i * 360/teeth_count])\n            tooth();\n    }\n}\n\n// Hub with spokes for structural reinforcement\nmodule hub_with_spokes() {\n    difference() {\n        // Main hub cylinder\n        cylinder(h=thickness, d=hub_diameter, center=true);\n        \n        // Central shaft hole\n        translate([0, 0, -thickness/2 - 1])\n            cylinder(h=thickness + 2, d=shaft_diameter, center=true);\n    }\n    \n    // Spokes (4 radial supports)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([hub_diameter/2 + 5, 0, 0])\n                cube([15, wall_thickness*2, thickness], center=true);\n    }\n}\n\n// Crank handle for turning\nmodule crank_handle() {\n    // Handle shaft\n    rotate([0, 90, 0])\n        translate([0, 0, -handle_length/2])\n            cylinder(h=handle_length, d=handle_diameter);\n    \n    // Handle grip (knob)\n    translate([0, handle_length, 0])\n        sphere(d=handle_diameter * 1.5);\n    \n    // Connection to gear\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=hub_diameter/2 + 5, d=wall_thickness*2);\n}\n\n// Assembly\nunion() {\n    // Main gear body\n    gear_body();\n    \n    // Teeth around the perimeter\n    all_teeth();\n    \n    // Central hub with spokes\n    hub_with_spokes();\n    \n    // Crank handle attached to hub\n    translate([0, 0, thickness/2 + 2])\n        crank_handle();\n}\n\n// Add small decorative holes for toy aesthetic\nfor (i = [0:5]) {\n    angle = i * 60;\n    radius = gear_diameter/2 - tooth_height - 5;\n    translate([cos(angle) * radius, sin(angle) * radius, 0])\n        cylinder(h=thickness + 2, d=3, center=true);\n}",
    "renders": true
  },
  {
    "toy": "hex",
    "openscad_code": "// Hexagonal Toy Table with Realistic Proportions\n// Overall hex table ~120mm diameter, ~60mm height\n\n// Parameters\ntable_height = 60;\ntable_radius = 60;\nleg_height = 50;\nleg_radius = 4;\ntop_thickness = 8;\nframe_thickness = 4;\nedge_height = 3;\n\n// Hexagonal table top\nmodule hex_top() {\n    difference() {\n        // Main hexagonal top\n        cylinder(h=top_thickness, r=table_radius, $fn=6);\n        \n        // Chamfered edges for realism\n        translate([0, 0, top_thickness-2])\n            cylinder(h=2, r1=table_radius-2, r2=table_radius, $fn=6);\n        \n        // Underside chamfer\n        translate([0, 0, 0])\n            cylinder(h=2, r1=table_radius-2, r2=table_radius, $fn=6);\n    }\n}\n\n// Support frame structure\nmodule support_frame() {\n    inner_radius = table_radius - 10;\n    \n    // Outer hexagonal frame\n    difference() {\n        cylinder(h=frame_thickness, r=inner_radius, $fn=6);\n        cylinder(h=frame_thickness, r=inner_radius-4, $fn=6);\n    }\n    \n    // Inner hexagonal frame\n    difference() {\n        cylinder(h=frame_thickness, r=inner_radius-10, $fn=6);\n        cylinder(h=frame_thickness, r=inner_radius-14, $fn=6);\n    }\n    \n    // Radial supports (6 arms)\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, inner_radius/2, 0])\n                cube([frame_thickness, inner_radius, frame_thickness], center=true);\n    }\n}\n\n// Individual leg with foot\nmodule leg() {\n    union() {\n        // Main leg cylinder\n        cylinder(h=leg_height, r=leg_radius, $fn=16);\n        \n        // Tapered foot\n        translate([0, 0, leg_height-3])\n            cylinder(h=5, r1=leg_radius+1, r2=leg_radius+2, $fn=16);\n        \n        // Leg cap at top\n        translate([0, 0, -1])\n            cylinder(h=2, r=leg_radius+0.5, $fn=16);\n    }\n}\n\n// Edge detail for realistic appearance\nmodule edge_detail() {\n    // Raised lip around edge\n    difference() {\n        cylinder(h=edge_height, r=table_radius, $fn=6);\n        cylinder(h=edge_height+0.1, r=table_radius-3, $fn=6);\n    }\n}\n\n// Assemble complete table\nunion() {\n    // Table top with edge\n    translate([0, 0, leg_height]) {\n        union() {\n            hex_top();\n            translate([0, 0, top_thickness])\n                edge_detail();\n        }\n    }\n    \n    // Support frame\n    translate([0, 0, leg_height-frame_thickness])\n        support_frame();\n    \n    // Hexagonal leg arrangement (6 legs)\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([table_radius-15, 0, 0])\n                leg();\n    }\n}",
    "renders": true
  },
  {
    "toy": "iris",
    "openscad_code": "// Realistic Iris Toy Chair - Medium Complexity\n// Dimensions: 60mm wide x 60mm deep x 85mm tall\n// Wall thickness: 2mm throughout\n\n// Seat frame module\nmodule seat_frame() {\n    difference() {\n        // Outer frame\n        cube([60, 60, 6], center=true);\n        // Inner cutout\n        translate([0, 0, 2])\n            cube([56, 56, 6], center=true);\n    }\n}\n\n// Iris petal module\nmodule petal() {\n    difference() {\n        // Main petal shape\n        union() {\n            cylinder(h=20, d1=25, d2=20, center=true);\n            translate([0, 0, -10])\n                cube([24, 18, 20], center=true);\n        }\n        // Petal cavity\n        translate([0, 0, -8])\n            cylinder(h=20, d1=22, d2=17, center=true);\n    }\n}\n\n// Backrest assembly\nmodule backrest() {\n    // Central stem\n    translate([0, 0, 42.5])\n        cylinder(h=35, d=8, center=true);\n    \n    // Petals array\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 20, 42.5])\n        petal();\n    }\n}\n\n// Leg assembly\nmodule legs() {\n    // Front legs\n    translate([24, 24, -35])\n        cylinder(h=70, d=4, center=true);\n    translate([-24, 24, -35])\n        cylinder(h=70, d=4, center=true);\n    \n    // Rear legs\n    translate([24, -24, -35])\n        cylinder(h=70, d=4, center=true);\n    translate([-24, -24, -35])\n        cylinder(h=70, d=4, center=true);\n    \n    // Cross supports\n    translate([0, 24, -55])\n        cube([52, 2, 2], center=true);\n    translate([0, -24, -55])\n        cube([52, 2, 2], center=true);\n    translate([24, 0, -55])\n        cube([2, 52, 2], center=true);\n    translate([-24, 0, -55])\n        cube([2, 52, 2], center=true);\n}\n\n// Seat cushion\nmodule cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, 5])\n            cube([56, 56, 8], center=true);\n        \n        // Cushion details\n        translate([0, 0, 9])\n            cube([52, 52, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat frame\n    seat_frame();\n    \n    // Backrest\n    backrest();\n    \n    // Legs\n    legs();\n    \n    // Cushion\n    cushion();\n}",
    "renders": true
  },
  {
    "toy": "jinx",
    "openscad_code": "// Jinx Toy - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm x 60mm x 80mm\n\n$fn = 32;\n\n// Main module\nmodule jinx_toy() {\n    // Head\n    translate([0, 0, 60]) {\n        difference() {\n            sphere(d = 30);\n            // Eyes\n            translate([8, -10, 5]) sphere(d = 8);\n            translate([-8, -10, 5]) sphere(d = 8);\n            // Mouth\n            translate([0, -12, -5]) cube([10, 2, 5], center = true);\n        }\n    }\n    \n    // Ears\n    translate([12, 0, 72]) rotate([45, 0, 0]) cylinder(h = 15, d1 = 8, d2 = 4);\n    translate([-12, 0, 72]) rotate([45, 0, 0]) cylinder(h = 15, d1 = 8, d2 = 4);\n    \n    // Body\n    union() {\n        // Torso\n        difference() {\n            translate([0, 0, 30]) cube([35, 25, 35], center = true);\n            // Hollow body\n            translate([0, 0, 30]) cube([31, 21, 31], center = true);\n        }\n        \n        // Arms\n        for (x = [-20, 20]) {\n            translate([x, 0, 50]) rotate([0, 0, x > 0 ? 20 : -20]) \n                cylinder(h = 20, d = 8);\n            // Hands\n            translate([x + (x > 0 ? 8 : -8), 0, 32]) sphere(d = 10);\n        }\n        \n        // Legs\n        for (x = [-10, 10]) {\n            translate([x, 0, 15]) cylinder(h = 20, d = 10);\n            // Feet\n            translate([x, 0, 5]) cube([12, 20, 8], center = true);\n        }\n        \n        // Tail\n        translate([0, 15, 25]) rotate([0, 90, 0]) \n            cylinder(h = 25, d1 = 12, d2 = 8);\n    }\n    \n    // Decorative elements\n    // Collar\n    translate([0, 0, 52]) difference() {\n        cylinder(h = 4, d = 20);\n        cylinder(h = 5, d = 16);\n    }\n    \n    // Whiskers\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle]) \n            translate([17, 0, 55]) cube([15, 1, 0.5], center = true);\n    }\n}\n\n// Generate the toy\njinx_toy();",
    "renders": true
  },
  {
    "toy": "knox",
    "openscad_code": "// Knox (Knoll) style toy armchair\n// Overall size: ~80 mm wide x 80 mm deep x 75 mm tall\n// Wall thickness: 2 mm\n\nmodule chair() {\n    // Seat frame – outer cube minus inner cube\n    difference() {\n        cube([80, 80, 12], center = true);\n        translate([0, 0, 2])\n            cube([76, 76, 10], center = true);\n    }\n\n    // Seat cushion\n    translate([0, 0, 7])\n        cube([74, 74, 8], center = true);\n\n    // Backrest frame\n    difference() {\n        translate([0, 35, 37])\n            cube([80, 8, 50], center = true);\n        translate([0, 35, 37])\n            cube([76, 6, 46], center = true);\n    }\n\n    // Backrest cushion\n    translate([0, 31, 37])\n        cube([74, 4, 46], center = true);\n\n    // Left armrest\n    difference() {\n        translate([-41, 0, 20])\n            cube([8, 80, 26], center = true);\n        translate([-41, 0, 22])\n            cube([6, 78, 24], center = true);\n    }\n\n    // Right armrest\n    mirror([1, 0, 0])\n        difference() {\n            translate([-41, 0, 20])\n                cube([8, 80, 26], center = true);\n            translate([-41, 0, 22])\n                cube([6, 78, 24], center = true);\n        }\n\n    // Four legs\n    for(x = [-30, 30], y = [-30, 30])\n        translate([x, y, -19])\n            cylinder(h = 40, r = 4, $fn = 20);\n\n    // Small cylindrical connectors between legs (realistic toy bracing)\n    for(x = [-30, 30], y = [-30, 30])\n        translate([x, y, -8])\n            rotate([90, 0, 0])\n                cylinder(h = 60, r = 2, $fn = 20);\n    for(x = [-30, 30], y = [-30, 30])\n        translate([x, y, -8])\n            rotate([0, 90, 0])\n                cylinder(h = 60, r = 2, $fn = 20);\n}\n\nchair();",
    "renders": true
  },
  {
    "toy": "lyra",
    "openscad_code": "// Lyra toy furniture - medium complexity realistic style\n// Kid-sized toy lyra chair with proper proportions and structural elements\n\n// Overall dimensions\nchair_width = 70;\nchair_depth = 65;\nchair_height = 80;\nseat_height = 40;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Seat module\nmodule seat() {\n    // Main seat platform\n    difference() {\n        cube([chair_width, chair_depth, 6], center=true);\n        \n        // Hollow interior for material saving\n        translate([0, 0, -1])\n            cube([chair_width - wall*2, chair_depth - wall*2, 8], center=true);\n    }\n    \n    // Front edge rounding\n    translate([0, chair_depth/2 - 3, 0])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width, r=3, center=true);\n}\n\n// Backrest module\nmodule backrest() {\n    // Main backrest panel\n    difference() {\n        translate([0, -chair_depth/2 + 3, chair_height/2 - seat_height])\n            cube([chair_width, 6, chair_height - seat_height], center=true);\n        \n        // Hollow interior\n        translate([0, -chair_depth/2 + 3, chair_height/2 - seat_height])\n            cube([chair_width - wall*2, 8, chair_height - seat_height - wall*2], center=true);\n    }\n    \n    // Top edge rounding\n    translate([0, -chair_depth/2 + 3, chair_height - seat_height - 3])\n        rotate([0, 90, 0])\n            cylinder(h=chair_width, r=3, center=true);\n}\n\n// Leg module with stretchers\nmodule leg_with_stretchers(x_pos, y_pos) {\n    // Main leg\n    translate([x_pos, y_pos, seat_height/2 - 3])\n        difference() {\n            cube([8, 8, seat_height], center=true);\n            \n            // Hollow leg\n            translate([x_pos, y_pos, seat_height/2 - 3])\n                cube([8 - wall*2, 8 - wall*2, seat_height], center=true);\n        }\n    \n    // Front stretcher\n    if (y_pos > 0) {\n        translate([x_pos, y_pos/2, seat_height/3])\n            difference() {\n                cube([8, abs(y_pos), 8], center=true);\n                translate([x_pos, y_pos/2, seat_height/3])\n                    cube([8 - wall*2, abs(y_pos), 8 - wall*2], center=true);\n            }\n    }\n    \n    // Side stretcher\n    if (abs(x_pos) > 0) {\n        translate([x_pos/2, y_pos, seat_height/3])\n            difference() {\n                cube([abs(x_pos), 8, 8], center=true);\n                translate([x_pos/2, y_pos, seat_height/3])\n                    cube([abs(x_pos), 8 - wall*2, 8 - wall*2], center=true);\n            }\n    }\n}\n\n// Back support bars\nmodule back_supports() {\n    // Vertical supports\n    for (x = [-chair_width/3, 0, chair_width/3]) {\n        translate([x, -chair_depth/2 + 3, chair_height/2 - seat_height])\n            difference() {\n                cube([6, 6, chair_height - seat_height], center=true);\n                translate([x, -chair_depth/2 + 3, chair_height/2 - seat_height])\n                    cube([6 - wall*2, 6 - wall*2, chair_height - seat_height], center=true);\n            }\n    }\n    \n    // Horizontal bars\n    for (z = [15, 30, 45]) {\n        translate([0, -chair_depth/2 + 6, z])\n            difference() {\n                cube([chair_width - 20, 6, 6], center=true);\n                translate([0, -chair_depth/2 + 6, z])\n                    cube([chair_width - 20 - wall*2, 6 - wall*2, 6 - wall*2], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main seat\n    translate([0, 0, seat_height + 3])\n        seat();\n    \n    // Backrest\n    backrest();\n    \n    // Four legs with stretchers\n    leg_with_stretchers(chair_width/2 - 4, chair_depth/2 - 4);\n    leg_with_stretchers(-chair_width/2 + 4, chair_depth/2 - 4);\n    leg_with_stretchers(chair_width/2 - 4, -chair_depth/2 + 4);\n    leg_with_stretchers(-chair_width/2 + 4, -chair_depth/2 + 4);\n    \n    // Back support structure\n    back_supports();\n}",
    "renders": true
  },
  {
    "toy": "moss",
    "openscad_code": "// Moss plush toy - realistic style with medium complexity\n// Overall size: ~100mm diameter ball shape\n\n// Main moss ball body\nmodule moss_body() {\n    difference() {\n        // Main rounded body\n        sphere(d=100, $fn=48);\n        \n        // Flat bottom for stability\n        translate([0, 0, -49])\n            cube([100, 100, 50], center=true);\n    }\n}\n\n// Individual moss strand module\nmodule moss_strand(height, angle, thickness) {\n    translate([0, 0, -2])\n        cylinder(h=height, r=thickness, $fn=8);\n}\n\n// Create cluster of moss strands\nmodule moss_cluster(count, radius, max_height, min_height) {\n    for(i=[0:count-1]) {\n        angle = i * 360/count;\n        dist = radius * (0.3 + 0.7 * sin(i * 73));\n        height = min_height + (max_height - min_height) * (0.5 + 0.5 * cos(i * 47));\n        thickness = 1.5 + 0.5 * cos(i * 23);\n        \n        translate([dist * cos(angle), dist * sin(angle), 0])\n            rotate([0, 0, angle])\n            rotate([90, 0, 0])\n            moss_strand(height, angle, thickness);\n    }\n}\n\n// Create moss patches across the surface\nmodule moss_patches() {\n    // Top patch\n    translate([0, 0, 45])\n        rotate([0, 0, 0])\n        moss_cluster(12, 20, 15, 8);\n    \n    // Side patches\n    for(theta=[30:60:150]) {\n        for(phi=[0:72:360]) {\n            x = 45 * sin(theta) * cos(phi);\n            y = 45 * sin(theta) * sin(phi);\n            z = 45 * cos(theta);\n            \n            translate([x, y, z])\n                rotate([0, theta, phi])\n                moss_cluster(8, 12, 12, 6);\n        }\n    }\n}\n\n// Toy face details\nmodule toy_face() {\n    // Safety eyes (embedded)\n    translate([-20, 30, 20])\n        sphere(d=12, $fn=16);\n    translate([20, 30, 20])\n        sphere(d=12, $fn=16);\n    \n    // Mouth (simple smile)\n    translate([0, 20, 10])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=15, r2=15, $fn=32);\n    translate([0, 20, 10])\n        cube([30, 2, 8], center=true);\n}\n\n// Soft toy seam lines\nmodule seam_lines() {\n    // Vertical seam\n    translate([0, -50, 0])\n        cube([2, 100, 100], center=true);\n    \n    // Horizontal seam (partial)\n    for(angle=[0:30:150]) {\n        rotate([0, 0, angle])\n        translate([0, -50, 0])\n            cube([2, 100, 50], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with 2mm wall thickness\n    difference() {\n        moss_body();\n        translate([0, 0, 0])\n            sphere(d=96, $fn=48);\n    }\n    \n    // Moss texture\n    moss_patches();\n    \n    // Toy details\n    toy_face();\n    \n    // Seam details (subtle)\n    %seam_lines();\n}",
    "renders": true
  },
  {
    "toy": "nebula",
    "openscad_code": "// Nebula Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm wide x 110mm deep x 130mm high\n\n// Main module for the nebula chair\nmodule nebula_chair() {\n    // Chair frame base\n    union() {\n        // Seat base - hollow for 3D printing\n        difference() {\n            // Outer seat shell (rounded top)\n            translate([0, 0, 45]) \n                scale([60, 55, 15]) \n                    sphere(d=100, $fn=50);\n            \n            // Inner hollow space\n            translate([0, 0, 42]) \n                scale([56, 51, 12]) \n                    sphere(d=96, $fn=50);\n        }\n        \n        // Backrest frame - curved to mimic nebula swirl\n        for (i = [0:10:60]) {\n            rotate([i/2, 0, i]) \n                translate([0, 0, 45 + i/1.5]) \n                    cylinder(h=5, d1=8-i/20, d2=4-i/20, $fn=16);\n        }\n        \n        // Backrest support posts\n        translate([-45, 0, 75]) \n            cylinder(h=50, d=8, $fn=16);\n        translate([45, 0, 75]) \n            cylinder(h=50, d=8, $fn=16);\n        \n        // Backrest panel with nebula holes\n        difference() {\n            translate([0, -25, 100]) \n                rotate([90, 0, 0]) \n                    scale([55, 50, 4]) \n                        sphere(d=100, $fn=50);\n            \n            // Nebula swirl holes\n            for (a = [0:30:359]) {\n                rotate([0, 0, a]) \n                    translate([25*cos(a*3), 25*sin(a*3), 100]) \n                        sphere(d=8, $fn=8);\n            }\n        }\n        \n        // Front legs - tapered for stability\n        translate([-40, -45, 22.5]) \n            cylinder(h=45, d1=12, d2=8, $fn=16);\n        translate([40, -45, 22.5]) \n            cylinder(h=45, d1=12, d2=8, $fn=16);\n        \n        // Rear legs\n        translate([-40, 45, 22.5]) \n            cylinder(h=45, d=10, $fn=16);\n        translate([40, 45, 22.5]) \n            cylinder(h=45, d=10, $fn=16);\n        \n        // Support beams between legs\n        translate([0, 0, 12]) \n            cube([80, 90, 4], center=true);\n        translate([0, 0, 8]) \n            cube([76, 86, 4], center=true);\n        \n        // Armrest supports\n        translate([-60, 0, 70]) \n            cylinder(h=30, d=8, $fn=16);\n        translate([60, 0, 70]) \n            cylinder(h=30, d=8, $fn=16);\n        \n        // Armrests\n        translate([-60, 0, 85]) \n            scale([8, 50, 4]) \n                sphere(d=16, $fn=16);\n        translate([60, 0, 85]) \n            scale([8, 50, 4]) \n                sphere(d=16, $fn=16);\n        \n        // Decorative nebula details on seat\n        for (i = [0:15:359]) {\n            rotate([0, 0, i]) \n                translate([20*cos(i*2), 20*sin(i*2), 58]) \n                    sphere(d=3, $fn=6);\n        }\n        \n        // Backrest cross-brace\n        translate([0, -22, 80]) \n            cube([90, 4, 8], center=true);\n    }\n}\n\n// Generate the chair\nnebula_chair();",
    "renders": true
  },
  {
    "toy": "omega",
    "openscad_code": "// Omega-shaped rocking toy\n// Realistic style, medium complexity\n\n// Parameters\nseat_thickness = 8;\nseat_width = 40;\nseat_length = 60;\nback_height = 35;\nrocker_thickness = 6;\nrocker_radius = 80;\nrocker_width = 45;\nleg_size = 8;\nleg_height = 30;\narmrest_height = 20;\narmrest_width = 10;\narmrest_length = 35;\nslat_width = 8;\nslat_gap = 4;\nnum_slats = 5;\n\nmodule rocker_profile() {\n    difference() {\n        union() {\n            // Main rocker arc\n            translate([0, rocker_radius, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=rocker_width, r=rocker_radius, center=true);\n            \n            // Flat bottom contact\n            translate([0, rocker_radius - 10, 0])\n                cube([rocker_width, 20, rocker_thickness], center=true);\n        }\n        \n        // Hollow out\n        translate([0, rocker_radius, 0])\n            rotate([90, 0, 0])\n                cylinder(h=rocker_width + 2, r=rocker_radius - rocker_thickness, center=true);\n    }\n}\n\nmodule rocker() {\n    difference() {\n        union() {\n            // Left rocker\n            translate([-seat_width/2 - leg_size, 0, 0])\n                rocker_profile();\n            \n            // Right rocker\n            translate([seat_width/2 + leg_size, 0, 0])\n                rocker_profile();\n            \n            // Front cross brace\n            translate([0, rocker_radius - 20, leg_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h=seat_width + 2*leg_size + 2*rocker_thickness, r=leg_size/2, center=true);\n            \n            // Rear cross brace\n            translate([0, -rocker_radius + 20, leg_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h=seat_width + 2*leg_size + 2*rocker_thickness, r=leg_size/2, center=true);\n        }\n        \n        // Clearance cuts\n        translate([0, 0, -5])\n            cube([seat_width + 2*leg_size + 2*rocker_thickness + 4, 2*rocker_radius + 4, 10], center=true);\n    }\n}\n\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width, seat_length, seat_thickness], center=true);\n        \n        // Comfort contour\n        translate([0, 0, leg_height + seat_thickness - 2])\n            cube([seat_width - 4, seat_length - 4, 4], center=true);\n    }\n}\n\nmodule backrest() {\n    // Back frame\n    translate([0, -seat_length/2 - leg_size/2, leg_height + seat_thickness + back_height/2])\n        cube([seat_width + 4, leg_size, back_height], center=true);\n    \n    // Slats\n    for (i = [0:num_slats-1]) {\n        translate([0, -seat_length/2 - leg_size/2, \n                  leg_height + seat_thickness + 5 + i*(back_height-10)/(num_slats-1)])\n            cube([seat_width - 4, leg_size - 2, slat_width], center=true);\n    }\n    \n    // Top rail\n    translate([0, -seat_length/2 - leg_size/2, leg_height + seat_thickness + back_height - 2])\n        cube([seat_width + 4, leg_size, 4], center=true);\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - armrest_width/2, 0, leg_height + seat_thickness + armrest_height/2])\n        cube([armrest_width, armrest_length, armrest_height], center=true);\n    \n    // Right armrest\n    translate([seat_width/2 + armrest_width/2, 0, leg_height + seat_thickness + armrest_height/2])\n        cube([armrest_width, armrest_length, armrest_height], center=true);\n    \n    // Support posts\n    for (y = [-seat_length/4, seat_length/4]) {\n        translate([-seat_width/2 - armrest_width/2, y, leg_height + seat_thickness/2])\n            cube([armrest_width, armrest_width, seat_thickness], center=true);\n            \n        translate([seat_width/2 + armrest_width/2, y, leg_height + seat_thickness/2])\n            cube([armrest_width, armrest_width, seat_thickness], center=true);\n    }\n}\n\nmodule legs() {\n    // Corner legs\n    for (x = [-seat_width/2 + leg_size/2, seat_width/2 - leg_size/2])\n    for (y = [-seat_length/2 + leg_size/2, seat_length/2 - leg_size/2]) {\n        translate([x, y, leg_height/2])\n            cube([leg_size, leg_size, leg_height], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    rocker();\n    legs();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "prism",
    "openscad_code": "// Prism Toy - Realistic Style with Medium Complexity\n// A translucent triangular prism toy with internal light scattering features\n\n// Main dimensions (mm)\nprism_length = 100;\nprism_base = 50;\nprism_height = 43.3;  // Equilateral triangle height\nwall_thickness = 2;\n\n// Internal light scattering features\nfeature_radius = 3;\nfeature_spacing = 8;\n\nmodule prism_shell() {\n    difference() {\n        // Outer prism\n        linear_extrude(height=prism_length, center=true, convexity=10)\n            polygon(points=[\n                [0, 0],\n                [prism_base, 0],\n                [prism_base/2, prism_height]\n            ]);\n        \n        // Inner hollow space\n        translate([0, 0, 0])\n            linear_extrude(height=prism_length+4, center=true, convexity=10)\n                polygon(points=[\n                    [wall_thickness, wall_thickness],\n                    [prism_base-wall_thickness, wall_thickness],\n                    [prism_base/2, prism_height-wall_thickness*2]\n                ]);\n    }\n}\n\nmodule decorative_edges() {\n    // Rounded edges along prism length\n    for(i=[0:1:2]) {\n        rotate([0, 0, i*120])\n            translate([prism_base/2, prism_height/3, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=prism_length, r=wall_thickness, center=true);\n    }\n}\n\nmodule internal_features() {\n    // Light scattering spheres inside\n    for(z=[-prism_length/2+5:feature_spacing:prism_length/2-5]) {\n        for(y=[prism_height/4:feature_spacing:prism_height-wall_thickness-5]) {\n            x_start = wall_thickness + (y * (prism_base/2 - wall_thickness*2) / prism_height);\n            x_range = prism_base - wall_thickness*2 - x_start*2;\n            for(x=[-x_range/2+5:feature_spacing:x_range/2-5]) {\n                translate([x + prism_base/2, y, z])\n                    sphere(r=feature_radius);\n            }\n        }\n    }\n}\n\nmodule connector_pins() {\n    // Attachment pins for connecting multiple prisms\n    pin_length = 6;\n    pin_radius = 3;\n    \n    // End face pins\n    for(angle=[0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([prism_base/2, prism_height/2, prism_length/2]) {\n                cylinder(h=pin_length, r=pin_radius);\n                mirror([0, 0, 1])\n                    translate([0, 0, -prism_length/2-pin_length/2])\n                        cylinder(h=pin_length, r=pin_radius);\n            }\n    }\n}\n\nmodule grip_texture() {\n    // Raised hexagonal pattern for grip\n    hex_size = 3;\n    hex_height = 0.5;\n    \n    for(z=[-prism_length/2+5:hex_size*2:prism_length/2-5]) {\n        for(y=[prism_height/6:hex_size*2:prism_height*5/6]) {\n            x_start = wall_thickness + (y * (prism_base/2 - wall_thickness) / prism_height);\n            x_range = prism_base - wall_thickness*2 - x_start*2;\n            for(x=[-x_range/2+2:hex_size*2:x_range/2-2]) {\n                translate([x + prism_base/2, y, z]) {\n                    linear_extrude(height=hex_height)\n                        circle(r=hex_size, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    prism_shell();\n    \n    difference() {\n        decorative_edges();\n        // Remove internal parts of edge cylinders\n        prism_shell();\n    }\n    \n    // Internal features only visible when printed translucent\n    %internal_features();\n    \n    connector_pins();\n    \n    grip_texture();\n}",
    "renders": true
  },
  {
    "toy": "quest",
    "openscad_code": "// Toy Quest Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm wide x ~80mm deep x ~110mm high\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 50;\n\n// Main module for the toy chair\nmodule toy_chair() {\n    // Chair backrest frame\n    color(\"red\")\n    union() {\n        // Backrest posts\n        translate([-30, 30, 0])\n            cylinder(h=60, d=6);\n        translate([30, 30, 0])\n            cylinder(h=60, d=6);\n        \n        // Top rail\n        translate([0, 30, 60])\n            rotate([90, 0, 0])\n            cylinder(h=60, d=6);\n    }\n    \n    // Backrest slats\n    color(\"red\")\n    for(i = [1:3]) {\n        translate([0, 30, i * 15])\n            rotate([90, 0, 0])\n            cylinder(h=50, d=4);\n    }\n    \n    // Seat frame\n    color(\"blue\")\n    union() {\n        // Side rails\n        translate([-30, 0, 0])\n            cube([60, 2, 10]);\n        translate([-30, -30, 0])\n            cube([60, 2, 10]);\n        \n        // Front and back rails\n        translate([-30, -30, 0])\n            cube([2, 30, 10]);\n        translate([28, -30, 0])\n            cube([2, 30, 10]);\n    }\n    \n    // Seat cushion\n    color(\"yellow\")\n    translate([-28, -28, 10])\n        cube([56, 26, 8]);\n    \n    // Legs\n    color(\"brown\")\n    for(x = [-25, 25])\n    for(y = [-25, 25]) {\n        translate([x, y, -40])\n            cylinder(h=40, d=8);\n    }\n    \n    // Front stretcher\n    color(\"brown\")\n    translate([0, -25, -30])\n        rotate([90, 0, 0])\n        cylinder(h=50, d=6);\n    \n    // Side stretchers\n    color(\"brown\")\n    for(y = [-25, 25]) {\n        translate([-25, y, -30])\n            rotate([90, 90, 0])\n            cylinder(h=50, d=6);\n    }\n    \n    // Decorative knobs on backrest posts\n    color(\"gold\")\n    translate([-30, 30, 63])\n        sphere(d=8);\n    translate([30, 30, 63])\n        sphere(d=8);\n    \n    // Small quest scroll tied to back\n    color(\"parchment\")\n    translate([0, 35, 45])\n        rotate([0, 90, 0])\n        cylinder(h=20, d=3);\n}\n\n// Create the chair centered on build plate\ntranslate([0, 0, 40])\n    toy_chair();",
    "renders": true
  },
  {
    "toy": "rift",
    "openscad_code": "// Realistic toy rift (fractured portal) – 3D-printable medium-complexity model\n// Overall size ≈ 110 mm tall, 80 mm wide, 40 mm thick\n\n// ---------- PARAMETERS ----------\nwall = 2;               // 2 mm printing wall thickness\nscaleFactor = 1;        // global resizing knob\nmainH = 100*scaleFactor;\nmainW = 70*scaleFactor;\nmainD = 30*scaleFactor;\ncrackInset = 3;         // how far cracks go inside the frame\nedgeRad = 2;            // slight rounding for safety/printability\n\n// ---------- MODULES ----------\n\n// Outer frame with gentle rounding on edges\nmodule frame() {\n    difference() {\n        // Solid outer block\n        minkowski() {\n            cube([mainW, mainH, mainD], center=true);\n            sphere(edgeRad);\n        }\n        // Hollow inside\n        minkowski() {\n            cube([mainW-2*wall, mainH-2*wall, mainD+1], center=true);\n            sphere(edgeRad-0.5);\n        }\n    }\n}\n\n// Jagged crack path generator\nmodule crackPath(steps=8) {\n    for (i=[0:steps-1]) {\n        angle = i*45;\n        len = 5 + (i%3)*2;\n        translate([0,0,-mainD/2])\n            linear_extrude(height=mainD+1)\n                polygon([\n                    [0,0],\n                    [len*cos(angle), len*sin(angle)],\n                    [len*cos(angle+20), len*sin(angle+20)]\n                ]);\n    }\n}\n\n// Central rift portal surface\nmodule riftSurface() {\n    difference() {\n        // Base portal disc\n        translate([0,0,0])\n            scale([1,1.2,1])\n                cylinder(h=wall, d=mainW-10, center=true, $fn=60);\n        // Cracks\n        crackPath();\n        // Inner glow ring\n        cylinder(h=wall+1, d=mainW-30, center=true, $fn=60);\n    }\n}\n\n// Back stand so toy stands upright\nmodule backStand() {\n    translate([0,-mainH/2+10, -mainD/2-5])\n        cube([mainW/3, 10, 10], center=true);\n}\n\n// Toy-safe handle on top\nmodule handle() {\n    translate([0,mainH/2-5,0])\n        rotate([90,0,0])\n            cylinder(h=20, d1=10, d2=10, center=true, $fn=20);\n}\n\n// ---------- MAIN MODEL ----------\nunion() {\n    frame();\n    riftSurface();\n    backStand();\n    handle();\n}",
    "renders": true
  },
  {
    "toy": "spark",
    "openscad_code": "// Spark toy generator - Realistic style, medium complexity\n// 2mm wall thickness throughout, no overhangs >60°\n\n// Main parameters\nleg_h = 40;          // Leg height\nseat_w = 80;         // Seat width\nseat_d = 60;         // Seat depth\nseat_h = 8;          // Seat thickness\nback_h = 45;         // Backrest height\nback_t = 4;          // Backrest thickness\nwheel_r = 8;         // Wheel radius\naxle_r = 3;          // Axle radius\n\n// Main seat plate with rounded edges\nmodule seat() {\n    // Base seat block\n    difference() {\n        union() {\n            // Main seat\n            translate([0, 0, leg_h + seat_h/2])\n                rounded_cube([seat_w, seat_d, seat_h], 3);\n            \n            // Reinforcement ribs underneath\n            for (x = [-seat_w/3, 0, seat_w/3]) {\n                translate([x, 0, leg_h + 2])\n                    cube([8, seat_d - 4, 4], center = true);\n            }\n        }\n        \n        // Mounting holes for legs\n        for (x = [-seat_w/2 + 15, seat_w/2 - 15])\n            for (y = [-seat_d/2 + 15, seat_d/2 - 15])\n                translate([x, y, leg_h + seat_h])\n                    cylinder(h = 10, r = 4, $fn = 16);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (dx = [-(size[0]/2 - radius), size[0]/2 - radius])\n            for (dy = [-(size[1]/2 - radius), size[1]/2 - radius])\n                for (dz = [-(size[2]/2 - radius), size[2]/2 - radius])\n                    translate([dx, dy, dz])\n                        sphere(r = radius, $fn = 12);\n    }\n}\n\n// Sturdy leg with mounting peg\nmodule leg() {\n    difference() {\n        // Leg body\n        union() {\n            cylinder(h = leg_h, r = 6, $fn = 16);\n            // Foot base\n            translate([0, 0, 0])\n                cylinder(h = 4, r = 8, $fn = 16);\n        }\n        \n        // Wheel axle hole\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = axle_r, $fn = 12);\n    }\n    \n    // Mounting peg\n    translate([0, 0, leg_h])\n        cylinder(h = 8, r = 4, $fn = 12);\n}\n\n// Wheel assembly\nmodule wheel() {\n    difference() {\n        // Wheel\n        cylinder(h = 6, r = wheel_r, $fn = 20);\n        \n        // Tread pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([0, wheel_r - 1, -1])\n                    cube([wheel_r * 0.8, 2, 8], center = true);\n        }\n    }\n    \n    // Axle pin\n    translate([0, 0, -3])\n        cylinder(h = 20, r = axle_r, $fn = 12);\n}\n\n// Backrest with realistic details\nmodule backrest() {\n    // Main back panel\n    difference() {\n        union() {\n            // Curved back\n            translate([0, 0, leg_h + seat_h + back_h/2])\n                rotate([0, 15, 0])\n                    rounded_cube([seat_w - 10, back_t, back_h], 2);\n            \n            // Support brackets\n            for (x = [-seat_w/2 + 20, seat_w/2 - 20]) {\n                translate([x, seat_d/2 - back_t/2, leg_h + seat_h + back_h/4])\n                    cube([8, back_t, back_h/2], center = true);\n            }\n        }\n        \n        // Ventilation holes\n        for (y = [0:2]) {\n            translate([0, seat_d/2, leg_h + seat_h + 10 + y * 12])\n                cylinder(h = back_t + 2, r = 3, $fn = 12);\n        }\n    }\n}\n\n// Assembly\nseat();\n\n// Legs with wheels\nfor (x = [-seat_w/2 + 15, seat_w/2 - 15])\n    for (y = [-seat_d/2 + 15, seat_d/2 - 15]) {\n        translate([x, y, 0])\n            leg();\n        translate([x, y, 0])\n            rotate([90, 0, 0])\n                wheel();\n    }\n\n// Backrest\nbackrest();\n\n// Safety handle\ntranslate([0, -seat_d/2 + 5, leg_h + seat_h + 25])\n    rotate([0, 0, 0])\n        difference() {\n            cylinder(h = 40, r = 4, $fn = 16);\n            cylinder(h = 40, r = 2, $fn = 16);\n        }",
    "renders": true
  },
  {
    "toy": "thorn",
    "openscad_code": "// Thorn Toy - Realistic Style, Medium Complexity\n// A 3D printable thorn toy with realistic proportions and toy characteristics\n\n// Parameters\nthickness = 2;\nbase_height = 12;\nbase_diameter = 35;\nstem_height = 80;\nstem_diameter = 6;\nthorn_count = 8;\nthorn_length = 12;\nthorn_base = 5;\nball_diameter = 8;\n\n// Main stem with spherical tip\nmodule stem() {\n    // Base cylinder\n    cylinder(h=stem_height, d=stem_diameter, $fn=32);\n    \n    // Spherical tip\n    translate([0, 0, stem_height])\n        sphere(d=ball_diameter, $fn=32);\n}\n\n// Individual thorn with realistic shape\nmodule thorn(angle, height_pos) {\n    // Position on stem\n    rotate([0, 0, angle])\n    translate([stem_diameter/2 + thorn_base/2, 0, height_pos]) {\n        \n        // Thorn base (conical frustum)\n        cylinder(h1=thorn_length*0.4, h2=thorn_length*0.2, r1=thorn_base/2, r2=thorn_base/3, $fn=16);\n        \n        // Thorn tip (cone)\n        translate([0, 0, thorn_length*0.4])\n            cylinder(h=thorn_length*0.6, r1=thorn_base/3, r2=0.1, $fn=16);\n    }\n}\n\n// Toy base with rounded edges for safety\nmodule toy_base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, d=base_diameter, $fn=64);\n        \n        // Bottom chamfer for printability\n        translate([0, 0, -0.1])\n            cylinder(h=base_height*0.3, d1=base_diameter*0.8, d2=base_diameter, $fn=64);\n    }\n    \n    // Safety ring around top edge\n    translate([0, 0, base_height-2])\n        cylinder(h=2, d=base_diameter+4, $fn=64);\n}\n\n// Assembly\nunion() {\n    // Toy base\n    toy_base();\n    \n    // Stem positioned on base\n    translate([0, 0, base_height])\n        stem();\n    \n    // Thorns arranged in a spiral pattern\n    for(i = [0:thorn_count-1]) {\n        angle = i * (360/thorn_count);\n        height_pos = base_height + stem_height * (0.2 + 0.6 * i/thorn_count);\n        \n        // Add thorns with slight random variation\n        thorn(angle + (i%2)*15, height_pos);\n    }\n    \n    // Toy safety features - rounded edges on thorns\n    for(i = [0:thorn_count-1]) {\n        angle = i * (360/thorn_count);\n        height_pos = base_height + stem_height * (0.2 + 0.6 * i/thorn_count);\n        \n        // Safety ball on thorn tips\n        rotate([0, 0, angle])\n        translate([stem_diameter/2 + thorn_base + thorn_length - 1, 0, height_pos + thorn_length*0.4])\n            sphere(d=2, $fn=16);\n    }\n    \n    // Structural reinforcement ring\n    translate([0, 0, base_height + stem_height*0.3])\n        cylinder(h=thickness, d=stem_diameter+4, $fn=32);\n}\n\n// Print support - minimal base\ntranslate([0, 0, -1])\n    cylinder(h=1, d=base_diameter*1.1, $fn=64);",
    "renders": true
  },
  {
    "toy": "unity",
    "openscad_code": "// Unity toy armchair in realistic style\n// Overall size: 120mm wide x 100mm deep x 110mm high\n\n$fn = 32;\n\n// Main seat module\nmodule seat() {\n    // Seat base with rounded edges\n    translate([0, 0, 45])\n    difference() {\n        // Main seat block\n        cube([90, 80, 12], center = true);\n        \n        // Rounded front edge\n        translate([0, 35, 6])\n        rotate([90, 0, 0])\n        cylinder(h = 90, r = 6, center = true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    translate([0, -35, 85])\n    difference() {\n        // Main backrest\n        cube([90, 8, 80], center = true);\n        \n        // Top rounded edge\n        translate([0, 0, 40])\n        rotate([0, 90, 0])\n        cylinder(h = 90, r = 4, center = true);\n    }\n}\n\n// Armrest module (right side)\nmodule armrest(side = 1) {\n    // Horizontal armrest\n    translate([45 * side, 0, 75])\n    cube([8, 80, 6], center = true);\n    \n    // Vertical support\n    translate([45 * side, 35, 55])\n    cube([8, 8, 40], center = true);\n}\n\n// Leg module for one corner\nmodule leg(x, y) {\n    translate([x, y, 25])\n    cylinder(h = 40, r = 6, center = true);\n}\n\n// Cushion detail\nmodule cushion() {\n    translate([0, 0, 52])\n    difference() {\n        // Main cushion\n        cube([85, 75, 10], center = true);\n        \n        // Slight indent\n        translate([0, 0, 5])\n        cube([80, 70, 5], center = true);\n    }\n}\n\n// Back cushion\nmodule back_cushion() {\n    translate([0, -31, 80])\n    difference() {\n        // Main cushion\n        cube([85, 6, 75], center = true);\n        \n        // Slight indent\n        translate([0, 0, 0])\n        cube([80, 4, 70], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Structure\n    seat();\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs\n    leg(40, 35);\n    leg(-40, 35);\n    leg(40, -35);\n    leg(-40, -35);\n    \n    // Cushions\n    cushion();\n    back_cushion();\n    \n    // Support bars\n    // Front support\n    translate([0, 35, 25])\n    cube([80, 4, 4], center = true);\n    \n    // Side supports\n    translate([40, 0, 25])\n    cube([4, 70, 4], center = true);\n    translate([-40, 0, 25])\n    cube([4, 70, 4], center = true);\n}",
    "renders": true
  },
  {
    "toy": "volt",
    "openscad_code": "// OpenSCAD code for a realistic toy volt (electric chair with battery terminals)\n// Medium complexity toy model with structural details\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 85;\nchair_height = 120;\nseat_height = 45;\nback_height = chair_height - seat_height;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Battery terminal parameters\nterminal_d = 12;\nterminal_h = 8;\nterminal_spacing = 30;\n\n// Helper module for rounded edges\nmodule rounded_cube(size, radius, center=false) {\n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([radius, radius, size.z-radius]) sphere(r=radius);\n        translate([radius, size.y-radius, radius]) sphere(r=radius);\n        translate([radius, size.y-radius, size.z-radius]) sphere(r=radius);\n        translate([size.x-radius, radius, radius]) sphere(r=radius);\n        translate([size.x-radius, radius, size.z-radius]) sphere(r=radius);\n        translate([size.x-radius, size.y-radius, radius]) sphere(r=radius);\n        translate([size.x-radius, size.y-radius, size.z-radius]) sphere(r=radius);\n    }\n}\n\n// Seat module with cushion detail\nmodule seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, 0]) rounded_cube([chair_width, chair_depth, wall*2], 5);\n        \n        // Cushion indentation\n        translate([wall*2, wall*2, wall]) rounded_cube([chair_width-wall*4, chair_depth-wall*4, wall], 3);\n        \n        // Cable routing holes\n        for(x = [-terminal_spacing/2, terminal_spacing/2]) {\n            translate([chair_width/2 + x, chair_depth/2 - 5, -1]) \n                cylinder(h=wall+2, d=wall, $fn=8);\n        }\n    }\n}\n\n// Backrest module with support bars\nmodule backrest() {\n    union() {\n        // Main backrest panel\n        translate([0, 0, seat_height]) rounded_cube([chair_width, wall*3, back_height], 5);\n        \n        // Support bars\n        for(x = [-chair_width/3, 0, chair_width/3]) {\n            translate([chair_width/2 + x, wall*1.5, seat_height + back_height/2])\n                cylinder(h=back_height, d=wall*2, $fn=8);\n        }\n        \n        // Headrest\n        translate([chair_width/2, wall*2, seat_height + back_height - wall*3])\n            rounded_cube([chair_width/2, wall*4, wall*3], 3);\n    }\n}\n\n// Leg module with cross-bracing\nmodule legs() {\n    union() {\n        // Four legs\n        for(x = [wall*3, chair_width-wall*3]) {\n            for(y = [wall*3, chair_depth-wall*3]) {\n                translate([x, y, -seat_height/2]) \n                    cylinder(h=seat_height, d=wall*3, $fn=8);\n            }\n        }\n        \n        // Cross braces\n        translate([chair_width/2, wall*3, seat_height/4])\n            rounded_cube([chair_width-wall*6, wall*2, wall*2], 2);\n        translate([chair_width/2, chair_depth-wall*3, seat_height/4])\n            rounded_cube([chair_width-wall*6, wall*2, wall*2], 2);\n        translate([wall*3, chair_depth/2, seat_height/4])\n            rounded_cube([wall*2, chair_depth-wall*6, wall*2], 2);\n        translate([chair_width-wall*3, chair_depth/2, seat_height/4])\n            rounded_cube([wall*2, chair_depth-wall*6, wall*2], 2);\n    }\n}\n\n// Battery terminals (positive and negative)\nmodule battery_terminals() {\n    union() {\n        // Positive terminal (red)\n        translate([chair_width/2 + terminal_spacing/2, chair_depth/2, seat_height + wall*2])\n            cylinder(h=terminal_h, d=terminal_d, $fn=16);\n        translate([chair_width/2 + terminal_spacing/2, chair_depth/2, seat_height + wall*2 + terminal_h/2])\n            sphere(d=terminal_d*1.2, $fn=16);\n        \n        // Negative terminal (black)\n        translate([chair_width/2 - terminal_spacing/2, chair_depth/2, seat_height + wall*2])\n            difference() {\n                cylinder(h=terminal_h, d=terminal_d, $fn=16);\n                translate([0, 0, terminal_h - wall]) \n                    cylinder(h=terminal_h, d=terminal_d - wall*2, $fn=16);\n            }\n    }\n}\n\n// Control panel with switches\nmodule control_panel() {\n    translate([chair_width/2, chair_depth - wall*4, seat_height + 10]) {\n        difference() {\n            rounded_cube([chair_width/3, wall*4, 20], 3);\n            // Switch holes\n            for(i = [0:2]) {\n                translate([-chair_width/6 + i*10, 0, 10])\n                    cylinder(h=wall+2, d=wall*2, $fn=8);\n            }\n        }\n    }\n}\n\n// Armrests with safety straps\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([chair_width/2 + side*(chair_width/2 - wall*2), chair_depth/2, seat_height + 10]) {\n            difference() {\n                rounded_cube([wall*4, chair_depth/2, 20], 3);\n                // Strap slots\n                translate([0, chair_depth/4, 10])\n                    cube([wall*4.1, wall*2, 5], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    legs();\n    seat();\n    backrest();\n    \n    // Electrical components\n    battery_terminals();\n    control_panel();\n    \n    // Safety features\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "whirl",
    "openscad_code": "// Whirl Toy - Spinning Top with Handle\n// Realistic style, medium complexity\n\n// Main dimensions (in mm)\nhandle_length = 40;\nhandle_diameter = 8;\ntop_height = 35;\ntop_diameter = 50;\nstem_height = 15;\nstem_diameter = 6;\nbase_height = 8;\nbase_diameter = 25;\nwall_thickness = 2;\n\n// Handle grip texture parameters\ngrip_segments = 12;\ngrip_depth = 0.5;\n\n// Top decorative rings\nring_count = 3;\nring_height = 2;\nring_spacing = 8;\n\n// Stem reinforcing ribs\nrib_count = 4;\nrib_width = 2;\nrib_height = 10;\n\n// Base stability ring\nbase_ring_height = 3;\nbase_ring_width = 3;\n\n// Main module to create the whirl toy\nmodule whirl_toy() {\n    // Handle assembly\n    translate([0, 0, top_height + stem_height + base_height + handle_length/2]) {\n        // Handle shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Handle grip texture\n        for(i = [0:grip_segments-1]) {\n            rotate([0, 0, i * 360/grip_segments])\n            translate([handle_diameter/2 - grip_depth/2, 0, -handle_length/2])\n            cube([grip_depth, handle_diameter * 0.8, handle_length * 0.9], center=true);\n        }\n        \n        // Handle end cap\n        translate([0, 0, handle_length/2 + 1])\n        cylinder(h=2, d=handle_diameter + 2, $fn=32);\n    }\n    \n    // Top spinning part\n    translate([0, 0, stem_height + base_height + handle_length]) {\n        // Main top body - hollow for weight reduction\n        difference() {\n            cylinder(h=top_height, d=top_diameter, $fn=64);\n            translate([0, 0, wall_thickness])\n            cylinder(h=top_height - wall_thickness, d=top_diameter - 2*wall_thickness, $fn=64);\n        }\n        \n        // Decorative rings on top\n        for(i = [0:ring_count-1]) {\n            translate([0, 0, top_height - (i+1) * ring_spacing])\n            cylinder(h=ring_height, d=top_diameter + 2, $fn=64);\n        }\n        \n        // Top point for spinning\n        translate([0, 0, top_height])\n        cylinder(h=5, d1=top_diameter/4, d2=0, $fn=32);\n    }\n    \n    // Stem connecting top to base\n    translate([0, 0, base_height + handle_length]) {\n        // Main stem\n        cylinder(h=stem_height, d=stem_diameter, $fn=32);\n        \n        // Reinforcing ribs\n        for(i = [0:rib_count-1]) {\n            rotate([0, 0, i * 360/rib_count])\n            translate([stem_diameter/2 + rib_width/2, 0, 0])\n            cube([rib_width, stem_diameter * 0.6, rib_height], center=true);\n        }\n    }\n    \n    // Base assembly\n    translate([0, 0, handle_length]) {\n        // Main base\n        difference() {\n            cylinder(h=base_height, d=base_diameter, $fn=64);\n            translate([0, 0, wall_thickness])\n            cylinder(h=base_height - wall_thickness, d=base_diameter - 2*wall_thickness, $fn=64);\n        }\n        \n        // Stability ring at bottom\n        translate([0, 0, -base_ring_height/2])\n        cylinder(h=base_ring_height, d=base_diameter + 2*base_ring_width, $fn=64);\n        \n        // Central bearing point\n        translate([0, 0, -base_height/2])\n        cylinder(h=base_height, d1=stem_diameter, d2=2, $fn=32);\n    }\n}\n\n// Create the whirl toy\nwhirl_toy();",
    "renders": true
  },
  {
    "toy": "xion",
    "openscad_code": "// XION Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm(W) x 75mm(D) x 85mm(H)\n\n// Parameters\nchair_width = 80;\nchair_depth = 75;\nseat_height = 45;\nback_height = 40;\nleg_height = 43;\nleg_size = 8;\ncushion_thickness = 8;\nwall_thickness = 2;\n\nmodule chair_leg() {\n    difference() {\n        // Main leg\n        cube([leg_size, leg_size, leg_height], center=true);\n        // Hollow bottom\n        translate([0, 0, -leg_height/2 + wall_thickness/2])\n            cube([leg_size - wall_thickness*2, leg_size - wall_thickness*2, leg_height], center=true);\n    }\n}\n\nmodule backrest_spindle() {\n    // Vertical spindle for backrest\n    cylinder(h=back_height, r=3, center=false);\n}\n\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, seat_height + cushion_thickness/2])\n            cube([chair_width - 10, chair_depth - 10, cushion_thickness], center=true);\n        // Cushion indentation\n        translate([0, 0, seat_height + cushion_thickness - 1])\n            cube([chair_width - 14, chair_depth - 14, 3], center=true);\n    }\n}\n\nmodule backrest_panel() {\n    difference() {\n        // Main backrest\n        translate([0, -chair_depth/2 + 5, seat_height + back_height/2])\n            cube([chair_width - 10, 10, back_height], center=true);\n        // Decorative cutouts\n        for(i = [-1, 0, 1]) {\n            translate([i * 20, 0, 0])\n                cylinder(h=12, r=4, center=true);\n        }\n    }\n}\n\nmodule support_brace(pos_x, pos_z) {\n    // Diagonal support brace\n    translate([pos_x, 0, pos_z])\n        rotate([0, 45, 0])\n            cube([10, 5, 5], center=true);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    translate([chair_width/2 - leg_size/2 - 5, chair_depth/2 - leg_size/2 - 5, leg_height/2])\n        chair_leg();\n    translate([-chair_width/2 + leg_size/2 + 5, chair_depth/2 - leg_size/2 - 5, leg_height/2])\n        chair_leg();\n    translate([chair_width/2 - leg_size/2 - 5, -chair_depth/2 + leg_size/2 + 5, leg_height/2])\n        chair_leg();\n    translate([-chair_width/2 + leg_size/2 + 5, -chair_depth/2 + leg_size/2 + 5, leg_height/2])\n        chair_leg();\n    \n    // Seat frame\n    difference() {\n        translate([0, 0, seat_height/2])\n            cube([chair_width, chair_depth, seat_height], center=true);\n        translate([0, 0, seat_height/2])\n            cube([chair_width - wall_thickness*2, chair_depth - wall_thickness*2, seat_height], center=true);\n    }\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Backrest assembly\n    backrest_panel();\n    \n    // Backrest spindles\n    for(i = [-1, 0, 1]) {\n        translate([i * 25, -chair_depth/2 + 10, seat_height])\n            backrest_spindle();\n    }\n    \n    // Support braces between legs\n    translate([chair_width/2 - leg_size - 5, 0, leg_height/2 + 10])\n        support_brace(0, 0);\n    translate([-chair_width/2 + leg_size + 5, 0, leg_height/2 + 10])\n        support_brace(0, 0);\n    \n    // Front cross brace\n    translate([0, chair_depth/2 - leg_size/2 - 5, leg_height/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width - leg_size*2 - 10, r=3, center=true);\n}",
    "renders": true
  },
  {
    "toy": "yarrow",
    "openscad_code": "// Yarrow Toy Chair - Realistic Style, Medium Complexity\n// Dimensions: 60mm wide x 55mm deep x 75mm tall\n\n// Parameters\nthickness = 2;\nleg_width = 4;\nseat_height = 40;\nback_height = 35;\narmrest_height = 55;\n\n// Main chair module\nmodule yarrow_chair() {\n    // Chair legs\n    union() {\n        // Front left leg\n        translate([-25, -20, 0])\n            leg();\n        \n        // Front right leg\n        translate([25, -20, 0])\n            leg();\n        \n        // Back left leg\n        translate([-25, 20, 0])\n            leg();\n        \n        // Back right leg\n        translate([25, 20, 0])\n            leg();\n        \n        // Seat frame\n        seat();\n        \n        // Backrest\n        backrest();\n        \n        // Armrests\n        armrests();\n    }\n}\n\n// Individual leg module\nmodule leg() {\n    difference() {\n        // Main leg\n        cube([leg_width, leg_width, seat_height], center=true);\n        \n        // Hollow out for 3D printing\n        translate([0, 0, 0])\n            cube([leg_width-thickness*2, leg_width-thickness*2, seat_height-thickness], center=true);\n    }\n}\n\n// Seat module\nmodule seat() {\n    difference() {\n        // Main seat platform\n        translate([0, 0, seat_height/2])\n            cube([60, 55, thickness*2], center=true);\n        \n        // Cushion detail - top surface\n        translate([0, 0, seat_height/2+thickness])\n            cube([58, 53, thickness], center=true);\n        \n        // Hollow underside\n        translate([0, 0, seat_height/2-thickness/2])\n            cube([56, 51, thickness], center=true);\n    }\n    \n    // Cushion quilting pattern\n    for(i = [-1:1]) {\n        for(j = [-1:1]) {\n            translate([i*15, j*12.5, seat_height+thickness+0.5])\n                cube([8, 8, 0.5], center=true);\n        }\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    // Backrest posts\n    translate([-22, 20, seat_height+back_height/2])\n        cube([thickness, thickness, back_height], center=true);\n    \n    translate([22, 20, seat_height+back_height/2])\n        cube([thickness, thickness, back_height], center=true);\n    \n    // Backrest slats\n    for(i = [0:3]) {\n        translate([0, 20, seat_height+5+i*8])\n            cube([40, thickness, 3], center=true);\n    }\n    \n    // Top rail\n    translate([0, 20, seat_height+back_height-2])\n        cube([46, thickness, 4], center=true);\n}\n\n// Armrests module\nmodule armrests() {\n    // Left armrest\n    translate([-30, 0, armrest_height/2+seat_height/2])\n        difference() {\n            cube([8, 40, armrest_height-seat_height], center=true);\n            translate([0, 0, 0])\n                cube([4, 36, armrest_height-seat_height-4], center=true);\n        }\n    \n    // Right armrest\n    translate([30, 0, armrest_height/2+seat_height/2])\n        difference() {\n            cube([8, 40, armrest_height-seat_height], center=true);\n            translate([0, 0, 0])\n                cube([4, 36, armrest_height-seat_height-4], center=true);\n        }\n    \n    // Armrest tops\n    translate([-30, 0, armrest_height+2])\n        cube([10, 42, 3], center=true);\n    \n    translate([30, 0, armrest_height+2])\n        cube([10, 42, 3], center=true);\n}\n\n// Generate the chair\nyarrow_chair();",
    "renders": true
  },
  {
    "toy": "zest",
    "openscad_code": "$fn=50;\n\n// Toy armchair parameters\nseat_w = 60;\nseat_d = 55;\nseat_h = 20;\nback_h = 60;\narm_h = 35;\nleg_h = 25;\nleg_r = 4;\nwall_t = 2;\n\nmodule rounded_box(w,d,h,r) {\n    translate([r,r,0]) cube([w-2*r,d-2*r,h]);\n    translate([r,0,0]) cylinder(r=r,h=h);\n    translate([w-r,0,0]) cylinder(r=r,h=h);\n    translate([r,d,0]) cylinder(r=r,h=h);\n    translate([w-r,d,0]) cylinder(r=r,h=h);\n    translate([0,r,0]) cube([w,d-2*r,h]);\n    translate([0,0,0]) cube([w,d,h]);\n}\n\nmodule armchair() {\n    difference() {\n        union() {\n            // Seat cushion\n            translate([-seat_w/2, -seat_d/2, leg_h]) rounded_box(seat_w, seat_d, seat_h, 8);\n            \n            // Backrest\n            translate([-seat_w/2, -seat_d/2, leg_h+seat_h]) rounded_box(seat_w, seat_d/2, back_h, 8);\n            \n            // Left armrest\n            translate([-seat_w/2-10, -seat_d/2, leg_h+seat_h-5]) rounded_box(10, seat_d, arm_h, 5);\n            \n            // Right armrest\n            translate([seat_w/2, -seat_d/2, leg_h+seat_h-5]) rounded_box(10, seat_d, arm_h, 5);\n            \n            // Front legs\n            translate([-seat_w/2+5, -seat_d/2+5, 0]) cylinder(r=leg_r, h=leg_h);\n            translate([seat_w/2-5, -seat_d/2+5, 0]) cylinder(r=leg_r, h=leg_h);\n            \n            // Back legs\n            translate([-seat_w/2+5, seat_d/2-5, 0]) cylinder(r=leg_r, h=leg_h);\n            translate([seat_w/2-5, seat_d/2-5, 0]) cylinder(r=leg_r, h=leg_h);\n        }\n        \n        // Hollow seat\n        translate([-seat_w/2+wall_t, -seat_d/2+wall_t, leg_h+wall_t]) rounded_box(seat_w-wall_t*2, seat_d-wall_t*2, seat_h-wall_t*2, 6);\n        \n        // Hollow backrest\n        translate([-seat_w/2+wall_t, -seat_d/2+wall_t, leg_h+seat_h+wall_t]) rounded_box(seat_w-wall_t*2, seat_d/2-wall_t, back_h-wall_t*2, 6);\n        \n        // Hollow armrests\n        translate([-seat_w/2-10+wall_t, -seat_d/2+wall_t, leg_h+seat_h-5+wall_t]) rounded_box(10-wall_t, seat_d-wall_t*2, arm_h-wall_t*2, 3);\n        translate([seat_w/2+wall_t, -seat_d/2+wall_t, leg_h+seat_h-5+wall_t]) rounded_box(10-wall_t, seat_d-wall_t*2, arm_h-wall_t*2, 3);\n    }\n    \n    // Decorative buttons on seat\n    for(i=[-1,1]) {\n        for(j=[-1,1]) {\n            translate([i*15, j*15, leg_h+seat_h-1]) sphere(r=3);\n            translate([i*15, j*15, leg_h+seat_h-3]) cylinder(r=3, h=2);\n        }\n    }\n    \n    // Backrest vertical slats\n    for(i=[-20,0,20]) {\n        translate([i, -seat_d/2+10, leg_h+seat_h+wall_t]) rounded_box(8, seat_d/2-20, back_h-wall_t*2, 4);\n    }\n}\n\narmchair();",
    "renders": true
  },
  {
    "toy": "aero",
    "openscad_code": "// Toy Aeron Chair - Realistic Style\n// Overall dimensions: ~120mm height, 90mm width, 110mm depth\n\n// Parameters\nseat_height = 45;\nseat_width = 65;\nseat_depth = 55;\nbackrest_height = 75;\nbackrest_width = 60;\narmrest_height = 65;\nleg_height = 35;\nmesh_thickness = 2;\npole_radius = 5;\n\n// Base star leg module\nmodule star_leg() {\n    difference() {\n        // Central pole\n        cylinder(h=leg_height, r=pole_radius+2, $fn=20);\n        \n        // Hollow center\n        translate([0,0,-1])\n            cylinder(h=leg_height+2, r=pole_radius, $fn=20);\n    }\n    \n    // Five legs with wheels\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) {\n            // Main leg\n            translate([0,0,leg_height-5])\n                cube([40, 10, 5], center=true);\n            \n            // Wheel\n            translate([35,0,2])\n                sphere(r=4, $fn=20);\n        }\n    }\n}\n\n// Mesh pattern for backrest\nmodule mesh_pattern(width, height, thickness) {\n    for(y=[0:5:height-5]) {\n        // Horizontal ribs\n        translate([-width/2, y, 0])\n            cube([width, 3, thickness]);\n    }\n    for(x=[-width/2+5:5:width/2-5]) {\n        // Vertical ribs\n        translate([x, 0, 0])\n            cube([3, height, thickness]);\n    }\n}\n\n// Seat module\nmodule seat() {\n    // Seat base\n    difference() {\n        translate([0,0,seat_height/2])\n            cube([seat_width, seat_depth, seat_height], center=true);\n        // Hollow bottom\n        translate([0,0,-1])\n            cube([seat_width-4, seat_depth-4, seat_height], center=true);\n    }\n    \n    // Seat cushion\n    translate([0,0,seat_height])\n        cube([seat_width+4, seat_depth+4, 8], center=true);\n    \n    // Seat mesh detail\n    translate([0,0,seat_height+4])\n        mesh_pattern(seat_width-10, seat_depth-10, 2);\n}\n\n// Backrest module\nmodule backrest() {\n    // Main backrest frame\n    translate([0,-seat_depth/2+5,seat_height+backrest_height/2])\n        difference() {\n            cube([backrest_width, 8, backrest_height], center=true);\n            translate([0,0,15])\n                cube([backrest_width-8, 12, backrest_height-20], center=true);\n        }\n    \n    // Backrest mesh\n    translate([0,-seat_depth/2+9,seat_height+15])\n        mesh_pattern(backrest_width-8, backrest_height-20, 2);\n    \n    // Headrest support\n    translate([0,-seat_depth/2+5,seat_height+backrest_height+10])\n        cylinder(h=15, r=3, $fn=16);\n    \n    // Headrest\n    translate([0,-seat_depth/2+5,seat_height+backrest_height+20])\n        cube([35, 15, 8], center=true);\n}\n\n// Armrests module\nmodule armrests() {\n    for(side=[-1,1]) {\n        // Vertical support\n        translate([side*seat_width/2+side*15,0,armrest_height/2])\n            difference() {\n                cube([5, 30, armrest_height], center=true);\n                translate([0,0,-1])\n                    cube([3, 28, armrest_height+2], center=true);\n            }\n        \n        // Horizontal arm pad\n        translate([side*seat_width/2+side*15,15,armrest_height+5])\n            cube([30, 8, 5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    star_leg();\n    \n    // Gas lift pole\n    translate([0,0,leg_height])\n        cylinder(h=10, r=pole_radius, $fn=20);\n    \n    // Seat mechanism\n    translate([0,0,leg_height+10])\n        cube([20, 20, 5], center=true);\n    \n    // Main chair parts\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "blitz",
    "openscad_code": "// Blitz toy armchair – realistic, medium complexity\n// Overall size ~110 mm tall x 90 mm wide x 90 mm deep\n// 2 mm wall thickness, printable without supports\n\n// Parameters\nwall = 2;       // 2 mm walls\nscale = 1;      // easy resize for printing\n\n// Cushion module – rounded top, flat base\nmodule cushion(w, d, h, r = 3) {\n    difference() {\n        minkowski() {\n            cube([w, d, h - r], center = true);\n            sphere(r);\n        }\n        translate([0, 0, -h/2 - 1])\n            cube([w + 2, d + 2, h], center = true);\n    }\n}\n\n// Slat module used for backrest\nmodule slat(len, wid) {\n    cube([len, wid, wall], center = true);\n}\n\n// Main chair body\nmodule armchair() {\n    // Seat frame – outer shell\n    difference() {\n        cube([90, 90, 45], center = true);\n        translate([0, 0, wall])\n            cube([90 - 2*wall, 90 - 2*wall, 45 - wall], center = true);\n    }\n\n    // Seat cushion\n    translate([0, 0, 22.5 + 8/2])\n        cushion(86 - 2*wall, 86 - 2*wall, 8);\n\n    // Backrest frame – upright rectangle\n    translate([0, -45 + 45/2, 45/2 + 45])\n    difference() {\n        cube([90, 45, 90], center = true);\n        translate([0, 0, wall])\n            cube([90 - 2*wall, 45 - 2*wall, 90 - wall], center = true);\n    }\n\n    // Backrest slats\n    for (z = [60 : 15 : 120]) {\n        translate([0, -45 + wall/2, z])\n            slat(90 - 2*wall, 8);\n    }\n\n    // Left armrest\n    translate([-45 + wall/2, 0, 45 + 20]) {\n        difference() {\n            cube([wall, 90, 40], center = true);\n            translate([0, 0, 20])\n                cube([wall, 90 - 2*wall, 40 - 2*wall], center = true);\n        }\n    }\n\n    // Right armrest\n    translate([45 - wall/2, 0, 45 + 20]) {\n        difference() {\n            cube([wall, 90, 40], center = true);\n            translate([0, 0, 20])\n                cube([wall, 90 - 2*wall, 40 - 2*wall], center = true);\n        }\n    }\n\n    // Legs – 4 simple cylinders\n    leg_pos = [[-40, -40], [40, -40], [-40, 40], [40, 40]];\n    for (p = leg_pos) {\n        translate([p.x, p.y, -22.5 - 20/2])\n            cylinder(h = 20, d = 10, center = true);\n    }\n}\n\n// Assembly\nscale(scale)\n    armchair();",
    "renders": true
  },
  {
    "toy": "cobalt",
    "openscad_code": "// Cobalt toy chair - realistic style, medium complexity\n// Overall size: ~100mm height x 70mm width x 70mm depth\n\nmodule leg(x_pos, z_pos) {\n    // Each leg: 6mm diameter, 45mm height\n    translate([x_pos, z_pos, 0]) {\n        difference() {\n            cylinder(h=45, d=6, $fn=20);\n            // Add slight taper for toy-like appearance\n            translate([0, 0, 2]) cylinder(h=43, d1=5.5, d2=5.5, $fn=20);\n        }\n    }\n}\n\nmodule backrest() {\n    // Backrest frame: 2mm thick walls\n    difference() {\n        // Outer frame\n        translate([-35, 30, 45]) cube([70, 4, 35]);\n        \n        // Inner cutouts for slats\n        for(i = [-20:10:20]) {\n            translate([i, 31, 45]) cube([8, 6, 35]);\n        }\n        \n        // Top curve cut\n        translate([0, 32, 78]) rotate([90, 0, 0]) cylinder(h=70, d=35, $fn=50);\n    }\n    \n    // Horizontal supports\n    for(z = [50:7:75]) {\n        translate([-30, 32, z]) cube([60, 3, 2]);\n    }\n}\n\nmodule seat() {\n    // Main seat cushion: 60mm x 60mm x 8mm\n    difference() {\n        translate([-30, -30, 45]) cube([60, 60, 8]);\n        // Rounded edges\n        translate([0, -30, 49]) rotate([0, 90, 0]) cylinder(h=60, d=8, $fn=20);\n        translate([0, 30, 49]) rotate([0, 90, 0]) cylinder(h=60, d=8, $fn=20);\n        translate([-30, 0, 49]) rotate([90, 0, 0]) cylinder(h=60, d=8, $fn=20);\n        translate([30, 0, 49]) rotate([90, 0, 0]) cylinder(h=60, d=8, $fn=20);\n    }\n    \n    // Seat surface detail\n    difference() {\n        translate([-28, -28, 52]) cube([56, 56, 1]);\n        for(x = [-20:10:20]) {\n            for(y = [-20:10:20]) {\n                translate([x, y, 53]) cube([8, 8, 1]);\n            }\n        }\n    }\n}\n\nmodule back_support() {\n    // Vertical supports connecting seat to backrest\n    translate([-25, 27, 45]) cube([4, 3, 8]);\n    translate([21, 27, 45]) cube([4, 3, 8]);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    leg(-25, -25);\n    leg(25, -25);\n    leg(-25, 25);\n    leg(25, 25);\n    \n    // Seat\n    seat();\n    \n    // Backrest assembly\n    backrest();\n    \n    // Support structure\n    back_support();\n    \n    // Cross-bracing between legs\n    translate([-25, 0, 20]) cube([50, 2, 4]);\n    translate([0, -25, 20]) cube([2, 50, 4]);\n}",
    "renders": true
  },
  {
    "toy": "dagger",
    "openscad_code": "// Toy Dagger - Realistic Style, Medium Complexity\n// Overall length ~120mm\n\n$fn=30;\n\nmodule blade() {\n    // Main blade body\n    union() {\n        // Central ridge\n        translate([0, 0, 30]) \n            scale([1, 0.3, 6])\n                cube([8, 10, 10], center=true);\n        \n        // Left blade half\n        translate([-2, 0, 30])\n            rotate([0, 8, 0])\n                polyhedron(\n                    points=[[0, -5, 0], [4, -5, 0], [4, 5, 0], [0, 5, 0],\n                           [0, 0, 60], [2, 0, 60]],\n                    faces=[[0,1,4], [1,2,5,4], [2,3,5], [3,0,4,5],\n                          [0,3,2,1], [4,5]] // bottom face\n                );\n        \n        // Right blade half (mirror)\n        translate([2, 0, 30])\n            rotate([0, -8, 0])\n                mirror([1,0,0])\n                    polyhedron(\n                        points=[[0, -5, 0], [4, -5, 0], [4, 5, 0], [0, 5, 0],\n                               [0, 0, 60], [2, 0, 60]],\n                        faces=[[0,1,4], [1,2,5,4], [2,3,5], [3,0,4,5],\n                              [0,3,2,1], [4,5]]\n                    );\n    }\n}\n\nmodule guard() {\n    // Crossguard base\n    difference() {\n        union() {\n            // Main bar\n            translate([0, 0, 8])\n                cube([30, 12, 6], center=true);\n            \n            // Decorative ends\n            translate([15, 0, 8])\n                cylinder(h=6, r1=6, r2=6);\n            translate([-15, 0, 8])\n                cylinder(h=6, r1=6, r2=6);\n        }\n        \n        // Finger grooves\n        for(i=[-1, 0, 1]) {\n            translate([i*8, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r1=3, r2=3);\n        }\n    }\n}\n\nmodule handle() {\n    // Main grip\n    difference() {\n        union() {\n            // Grip core\n            cylinder(h=40, r1=5, r2=4);\n            \n            // Grip rings\n            for(i=[0:3]) {\n                translate([0, 0, 5+i*10])\n                    cylinder(h=2, r1=6, r2=6);\n            }\n        }\n        \n        // Rivet details\n        translate([0, 5, 20])\n            rotate([90, 0, 0])\n                cylinder(h=3, r1=2, r2=2);\n        translate([0, -5, 20])\n            rotate([90, 0, 0])\n                cylinder(h=3, r1=2, r2=2);\n    }\n}\n\nmodule pommel() {\n    // Pommel sphere\n    sphere(r=7);\n    \n    // Decorative ring\n    translate([0, 0, -6])\n        cylinder(h=3, r1=8, r2=8);\n}\n\n// Assemble the dagger\nunion() {\n    // Blade at top\n    translate([0, 0, 40]) blade();\n    \n    // Guard below blade\n    guard();\n    \n    // Handle below guard\n    translate([0, 0, -20]) handle();\n    \n    // Pommel at bottom\n    translate([0, 0, -42]) pommel();\n}",
    "renders": true
  },
  {
    "toy": "fable",
    "openscad_code": "// Toy Fable Bench (realistic medium complexity)\n// A 3D printable toy bench inspired by classic fables\n// Dimensions: 80mm length x 40mm width x 45mm height\n\n// Parameters\nbench_len = 80;\nbench_width = 40;\nbench_height = 45;\nleg_height = 30;\nleg_width = 6;\nseat_thickness = 4;\nback_height = 20;\nslat_width = 8;\nslat_gap = 2;\n\n// Main bench assembly\nmodule toy_bench() {\n    union() {\n        // Seat with rounded edges\n        seat();\n        \n        // Four legs\n        leg_assembly();\n        \n        // Backrest with slats\n        backrest();\n        \n        // Decorative armrests\n        armrests();\n        \n        // Carved story details\n        story_details();\n    }\n}\n\n// Rounded seat with slight curvature\nmodule seat() {\n    translate([0, 0, leg_height])\n    difference() {\n        // Main seat block\n        minkowski() {\n            cube([bench_len, bench_width, seat_thickness], center=true);\n            sphere(r=1.5, $fn=16);\n        }\n        \n        // Gentle curve on top\n        translate([0, 0, 2])\n        cube([bench_len+2, bench_width-10, seat_thickness], center=true);\n    }\n}\n\n// Four legs with toy-style joints\nmodule leg_assembly() {\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (bench_len/2 - leg_width), \n                  y * (bench_width/2 - leg_width), \n                  leg_height/2])\n        leg();\n    }\n}\n\n// Single leg with toy joint detail\nmodule leg() {\n    difference() {\n        // Main leg post\n        cylinder(h=leg_height, d=leg_width, $fn=16);\n        \n        // Toy joint ring\n        translate([0, 0, leg_height/2])\n        cylinder(h=3, d=leg_width+2, $fn=16);\n    }\n    \n    // Base foot\n    translate([0, 0, -leg_height/2])\n    cylinder(h=3, d=leg_width+2, $fn=16);\n}\n\n// Backrest with vertical slats\nmodule backrest() {\n    translate([0, bench_width/2 - 2, leg_height + seat_thickness/2])\n    union() {\n        // Top rail\n        translate([0, 0, back_height/2])\n        cube([bench_len-10, 4, 6], center=true);\n        \n        // Bottom rail\n        translate([0, 0, -back_height/2 + 3])\n        cube([bench_len-10, 4, 6], center=true);\n        \n        // Vertical slats\n        for(i = [-3:3]) {\n            translate([i * 10, -1, 0])\n            cube([slat_width, 3, back_height-3], center=true);\n        }\n    }\n}\n\n// Decorative armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([side * (bench_len/2 - 5), 0, leg_height + seat_thickness + 5])\n        rotate([0, side * 15, 0])\n        union() {\n            // Armrest post\n            cylinder(h=10, d=4, $fn=16);\n            \n            // Armrest top\n            translate([0, 0, 6])\n            cube([10, 6, 3], center=true);\n        }\n    }\n}\n\n// Carved story details\nmodule story_details() {\n    // Fox carving on left side\n    translate([-bench_len/2 + 5, 0, leg_height + 2])\n    scale([0.8, 0.3, 0.8])\n    rotate([90, 0, 0])\n    fox_silhouette();\n    \n    // Grapes carving on right side\n    translate([bench_len/2 - 5, 0, leg_height + 2])\n    scale([0.6, 0.3, 0.6])\n    grapes_cluster();\n}\n\n// Simple fox silhouette\nmodule fox_silhouette() {\n    union() {\n        // Body\n        cylinder(h=2, d=8, $fn=32);\n        \n        // Head\n        translate([0, 5, 0])\n        sphere(d=6, $fn=32);\n        \n        // Ears\n        translate([-2, 6, 2])\n        rotate([30, 0, 0])\n        cylinder(h=3, d1=0, d2=2, $fn=3);\n        translate([2, 6, 2])\n        rotate([30, 0, 0])\n        cylinder(h=3, d1=0, d2=2, $fn=3);\n    }\n}\n\n// Simple grapes cluster\nmodule grapes_cluster() {\n    for(i = [0:2])\n    for(j = [0:i]) {\n        translate([j*3 - i*1.5, 0, -i*2.5])\n        sphere(d=4, $fn=16);\n    }\n    // Stem\n    translate([0, -2, 5])\n    cylinder(h=5, d=1, $fn=8);\n}\n\n// Generate the toy bench\ntoy_bench();",
    "renders": true
  },
  {
    "toy": "glitch",
    "openscad_code": "// Glitch Toy Chair - Medium Complexity\n// A chair toy with intentional glitches for 3D printing\n\n$fn = 50; // Smooth curves\n\n// Overall dimensions\nchair_width = 60;\nchair_depth = 55;\nchair_height = 80;\nseat_height = 45;\nback_height = chair_height - seat_height;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule glitch_cube(x,y,z, glitch_amount=2) {\n    // Randomly offset cube for glitch effect\n    translate([rand(0,glitch_amount)-glitch_amount/2, \n               rand(0,glitch_amount)-glitch_amount/2, \n               rand(0,glitch_amount)-glitch_amount/2])\n    cube([x,y,z], center=true);\n}\n\nmodule chair_frame() {\n    // Main chair structure with glitches\n    difference() {\n        // Seat base\n        union() {\n            // Hollow seat box\n            difference() {\n                cube([chair_width, chair_depth, seat_height/3], center=true);\n                translate([0,0,-wall/2])\n                cube([chair_width-wall*2, chair_depth-wall*2, seat_height/3], center=true);\n            }\n            \n            // Legs - slightly offset for glitch effect\n            for(x=[-chair_width/2+5, chair_width/2-5])\n            for(y=[-chair_depth/2+5, chair_depth/2-5]) {\n                translate([x, y, -seat_height/2]) {\n                    // Front legs\n                    glitch_cube(5, 5, seat_height);\n                    // Back legs (taller)\n                    translate([0,0,-back_height/2])\n                    glitch_cube(5, 5, back_height);\n                }\n            }\n        }\n        \n        // Hollow out interior\n        translate([0,0,-seat_height/2])\n        cube([chair_width-wall*2, chair_depth-wall*2, seat_height], center=true);\n    }\n}\n\nmodule backrest() {\n    // Backrest with slats\n    translate([0, -chair_depth/2+wall, seat_height/2]) {\n        difference() {\n            // Main backrest frame\n            cube([chair_width, wall, back_height], center=true);\n            // Hollow out\n            translate([0,0,0])\n            cube([chair_width-wall*2, wall+0.1, back_height-wall*2], center=true);\n        }\n        \n        // Slats with glitch\n        for(i=[-2:2]) {\n            translate([i*10, 0, rand(-2,2)])\n            cube([8, wall+0.2, back_height-5], center=true);\n        }\n    }\n}\n\nmodule armrests() {\n    // Armrests on sides\n    for(side=[-1,1]) {\n        translate([side*chair_width/2, 0, seat_height/2]) {\n            // Support post\n            difference() {\n                cube([wall, chair_depth/3, 15], center=true);\n                translate([0,0,0])\n                cube([wall-1, chair_depth/3-2, 15], center=true);\n            }\n            \n            // Armrest surface\n            translate([side*5, 0, 7.5])\n            rotate([0,0,side*rand(-5,5)])\n            difference() {\n                cube([15, chair_depth/3+5, wall], center=true);\n                translate([0,0,0])\n                cube([13, chair_depth/3+3, wall], center=true);\n            }\n        }\n    }\n}\n\nmodule cushion() {\n    // Seat cushion with buttons\n    translate([0, 0, seat_height/3+3]) {\n        // Main cushion\n        difference() {\n            cube([chair_width-10, chair_depth-10, 8], center=true);\n            translate([0,0,-wall/2])\n            cube([chair_width-10-wall*2, chair_depth-10-wall*2, 8], center=true);\n        }\n        \n        // Cushion buttons (offset for glitch)\n        for(x=[-15,0,15])\n        for(y=[-10,0,10]) {\n            translate([x+rand(-2,2), y+rand(-2,2), 4.5])\n            sphere(2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    backrest();\n    armrests();\n    cushion();\n    \n    // Extra glitch elements\n    translate([rand(-5,5), rand(-5,5), rand(0,10)])\n    cube([10,10,10], center=true);\n    \n    // Misaligned support beam\n    translate([0, chair_depth/4, seat_height/2])\n    rotate([0,0,rand(-8,8)])\n    difference() {\n        cube([chair_width-20, wall, 5], center=true);\n        cube([chair_width-22, wall+0.2, 3], center=true);\n    }\n}",
    "renders": true
  },
  {
    "toy": "haven",
    "openscad_code": "// Toy Haven Armchair (realistic style, medium complexity)\n// Dimensions: 80mm L x 75mm W x 80mm H\n\nmodule armchair() {\n    // Color definitions\n    color_chair = \"SaddleBrown\";\n    color_cushion = \"DarkOrange\";\n    color_detail = \"Sienna\";\n    \n    // Main seat frame\n    difference() {\n        union() {\n            // Seat base - 2mm walls\n            translate([0, 0, 10]) cube([80, 75, 20], center=true);\n            \n            // Backrest frame\n            translate([0, 27.5, 45]) cube([70, 20, 50], center=true);\n            \n            // Left armrest support\n            translate([-35, 0, 25]) cube([10, 75, 30], center=true);\n            \n            // Right armrest support\n            translate([35, 0, 25]) cube([10, 75, 30], center=true);\n            \n            // Back legs\n            translate([-25, -27.5, 0]) cylinder(h=20, d=8, center=false);\n            translate([25, -27.5, 0]) cylinder(h=20, d=8, center=false);\n            \n            // Front legs\n            translate([-25, 27.5, 0]) cylinder(h=20, d=8, center=false);\n            translate([25, 27.5, 0]) cylinder(h=20, d=8, center=false);\n        }\n        \n        // Hollow out seat for toy material efficiency\n        translate([0, 0, 12]) cube([76, 71, 16], center=true);\n        translate([0, 27.5, 45]) cube([66, 16, 46], center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 5, 22]) cube([70, 65, 8], center=true);\n    \n    // Back cushion\n    translate([0, 27.5, 45]) cube([65, 15, 45], center=true);\n    \n    // Armrest tops\n    translate([-35, 0, 40]) cube([10, 65, 4], center=true);\n    translate([35, 0, 40]) cube([10, 65, 4], center=true);\n    \n    // Decorative buttons on cushions\n    for(x=[-20, 0, 20]) {\n        for(y=[-15, 0, 15]) {\n            translate([x, y, 28]) cylinder(h=2, d=4, center=true);\n        }\n    }\n    \n    // Back cushion buttons\n    for(x=[-20, 0, 20]) {\n        for(z=[25, 40, 55]) {\n            translate([x, 27.5, z]) cylinder(h=2, d=4, center=true);\n        }\n    }\n}\n\n// Generate the toy haven armchair\narmchair();",
    "renders": true
  },
  {
    "toy": "ivory",
    "openscad_code": "// Toy Ivory Chair (realistic style, medium complexity)\n// Overall dimensions: 80mm W x 85mm D x 100mm H\n\n$fn = 64;\n\n// Main seating surface\nmodule seat() {\n    // Seat base with rounded edges\n    difference() {\n        translate([0, 0, 40]) cube([70, 75, 8], center = true);\n        translate([0, 0, 44]) cube([66, 71, 8], center = true);\n    }\n    // Seat cushion\n    translate([0, 0, 48]) cube([64, 69, 6], center = true);\n}\n\n// Backrest with vertical spindles\nmodule backrest() {\n    // Backrest frame\n    difference() {\n        translate([0, 32, 75]) cube([66, 6, 50], center = true);\n        translate([0, 29, 75]) cube([62, 6, 46], center = true);\n    }\n    \n    // Vertical spindles\n    for(i = [-25:10:25]) {\n        translate([i, 32, 75]) cylinder(h = 50, r = 2);\n    }\n    \n    // Top rail\n    translate([0, 32, 100]) cube([70, 6, 8], center = true);\n}\n\n// Leg assembly\nmodule legs() {\n    // Front left leg\n    translate([-30, -32, 20]) cylinder(h = 40, r = 4);\n    translate([-30, -32, 0]) cube([8, 8, 40], center = true);\n    \n    // Front right leg\n    translate([30, -32, 20]) cylinder(h = 40, r = 4);\n    translate([30, -32, 0]) cube([8, 8, 40], center = true);\n    \n    // Back left leg\n    translate([-30, 32, 20]) cylinder(h = 40, r = 4);\n    translate([-30, 32, 0]) cube([8, 8, 40], center = true);\n    \n    // Back right leg\n    translate([30, 32, 20]) cylinder(h = 40, r = 4);\n    translate([30, 32, 0]) cube([8, 8, 40], center = true);\n}\n\n// Support stretchers\nmodule stretchers() {\n    // Front stretcher\n    translate([0, -32, 10]) cube([60, 4, 4], center = true);\n    \n    // Back stretcher\n    translate([0, 32, 10]) cube([60, 4, 4], center = true);\n    \n    // Side stretchers\n    translate([-30, 0, 10]) cube([4, 64, 4], center = true);\n    translate([30, 0, 10]) cube([4, 64, 4], center = true);\n}\n\n// Decorative details\nmodule details() {\n    // Armrest supports\n    translate([-35, 0, 65]) cube([4, 40, 30], center = true);\n    translate([35, 0, 65]) cube([4, 40, 30], center = true);\n    \n    // Armrest tops\n    translate([-35, 0, 80]) cube([4, 40, 4], center = true);\n    translate([35, 0, 80]) cube([4, 40, 4], center = true);\n    \n    // Corner blocks\n    for(x = [-30, 30]) {\n        for(y = [-32, 32]) {\n            translate([x, y, 36]) cube([6, 6, 8], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    legs();\n    stretchers();\n    details();\n}",
    "renders": true
  },
  {
    "toy": "jolt",
    "openscad_code": "// Jolt toy (rocking horse) in realistic style\n// Overall dimensions: ~120mm long, ~80mm high, ~40mm wide\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nseat_width = 30;\nseat_length = 60;\nrocker_radius = 80;\nrocker_width = 35;\n\n// Main assembly\nmodule jolt_rocking_horse() {\n    // Rockers (base)\n    rockers();\n    \n    // Seat structure\n    seat();\n    \n    // Head and neck\n    head_assembly();\n    \n    // Tail\n    tail();\n    \n    // Support bars\n    support_bars();\n}\n\n// Rocking base - curved rockers\nmodule rockers() {\n    // Left rocker\n    translate([-seat_width/2 - wall_thickness, 0, 0])\n        rocker_arc();\n    \n    // Right rocker\n    translate([seat_width/2 + wall_thickness, 0, 0])\n        rocker_arc();\n}\n\n// Single rocker arc\nmodule rocker_arc() {\n    difference() {\n        // Outer rocker\n        translate([0, 0, rocker_radius - 25])\n            rotate([90, 0, 0])\n                cylinder(h=rocker_width, r=rocker_radius, center=true);\n        \n        // Inner cutout for hollow structure\n        translate([0, 0, rocker_radius - 25])\n            rotate([90, 0, 0])\n                cylinder(h=rocker_width - 2*wall_thickness, r=rocker_radius - wall_thickness, center=true);\n    }\n}\n\n// Seat structure\nmodule seat() {\n    // Main seat\n    translate([0, 0, 40])\n        cube([seat_length, seat_width, 8], center=true);\n    \n    // Seat backrest\n    translate([-seat_length/2 + 15, 0, 48])\n        cube([30, seat_width, 16], center=true);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([0, side*seat_width/2, 44])\n            cube([seat_length, wall_thickness, 12], center=true);\n    }\n}\n\n// Head and neck assembly\nmodule head_assembly() {\n    // Neck\n    translate([seat_length/2 - 5, 0, 48])\n        rotate([30, 0, 0])\n            cylinder(h=25, r=6, center=true);\n    \n    // Head\n    translate([seat_length/2 + 15, 0, 60])\n        sphere(r=12);\n    \n    // Ears\n    for(angle = [-30, 30]) {\n        rotate([0, 0, angle])\n            translate([seat_length/2 + 15, 0, 72])\n                cylinder(h=8, r1=4, r2=2);\n    }\n    \n    // Muzzle\n    translate([seat_length/2 + 25, 0, 58])\n        sphere(r=7);\n}\n\n// Tail\nmodule tail() {\n    // Tail base\n    translate([-seat_length/2 - 5, 0, 44])\n        rotate([0, 30, 0])\n            cylinder(h=15, r=5);\n    \n    // Tail tuft\n    translate([-seat_length/2 - 15, 0, 42])\n        sphere(r=8);\n}\n\n// Support bars between rockers and seat\nmodule support_bars() {\n    // Front support\n    translate([seat_length/2 - 20, 0, 20])\n        cube([wall_thickness, seat_width + 2*wall_thickness, 40]);\n    \n    // Rear support\n    translate([-seat_length/2 + 20, 0, 20])\n        cube([wall_thickness, seat_width + 2*wall_thickness, 40]);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([0, side*seat_width/2, 30])\n            cube([seat_length - 40, wall_thickness, 20]);\n    }\n}\n\n// Generate the complete jolt toy\njolt_rocking_horse();",
    "renders": true
  },
  {
    "toy": "karma",
    "openscad_code": "// Karma armchair toy - realistic medium complexity\n// Overall dimensions: 90mm x 90mm x 85mm (W x D x H)\n\n$fn = 32;\n\n// Main body dimensions\nseat_width = 80;\nseat_depth = 80;\nseat_thickness = 8;\nback_height = 45;\narmrest_height = 30;\nleg_height = 35;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule karma_chair() {\n    union() {\n        // Seat base - hollowed cube\n        difference() {\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n            translate([0, 0, -1])\n            cube([seat_width-wall*2, seat_depth-wall*2, seat_thickness+2], center=true);\n        }\n        \n        // Backrest with curved top\n        translate([0, -seat_depth/2 + wall, back_height/2 + seat_thickness/2])\n        difference() {\n            union() {\n                cube([seat_width-wall*2, wall*2, back_height], center=true);\n                translate([0, 0, back_height/2 - wall])\n                cylinder(h=wall*2, r=seat_width/2 - wall);\n            }\n            translate([0, 0, -1])\n            cube([seat_width-wall*4, wall*2 + 2, back_height+2], center=true);\n        }\n        \n        // Left armrest\n        translate([-seat_width/2 + wall/2, 0, armrest_height/2 + seat_thickness/2])\n        difference() {\n            cube([wall, seat_depth - wall*2, armrest_height], center=true);\n            translate([0, 0, 0])\n            cube([wall - 1, seat_depth - wall*4, armrest_height - wall], center=true);\n        }\n        \n        // Right armrest\n        translate([seat_width/2 - wall/2, 0, armrest_height/2 + seat_thickness/2])\n        difference() {\n            cube([wall, seat_depth - wall*2, armrest_height], center=true);\n            translate([0, 0, 0])\n            cube([wall - 1, seat_depth - wall*4, armrest_height - wall], center=true);\n        }\n        \n        // Four legs with rounded edges\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (seat_width/2 - wall*3), y * (seat_depth/2 - wall*3), -leg_height/2 + seat_thickness/2])\n                difference() {\n                    cylinder(h=leg_height, r=wall*2);\n                    translate([0, 0, wall])\n                    cylinder(h=leg_height - wall, r=wall*2 - 1);\n                }\n            }\n        }\n        \n        // Cushion details on seat\n        translate([0, 0, seat_thickness/2 + 1])\n        for(i = [-1, 0, 1]) {\n            for(j = [-1, 0, 1]) {\n                translate([i * 20, j * 20, 0])\n                cube([15, 15, 2], center=true);\n            }\n        }\n        \n        // Backrest cushion pattern\n        translate([0, -seat_depth/2 + wall*2, seat_thickness/2 + back_height/2])\n        for(i = [-1, 0, 1]) {\n            for(j = [0, 1, 2]) {\n                translate([i * 20, 0, j * 12])\n                cube([15, wall, 8], center=true);\n            }\n        }\n        \n        // Armrest top details\n        translate([-seat_width/2 + wall/2, 0, seat_thickness/2 + armrest_height - 2])\n        cube([wall + 1, seat_depth - wall*4, 4], center=true);\n        \n        translate([seat_width/2 - wall/2, 0, seat_thickness/2 + armrest_height - 2])\n        cube([wall + 1, seat_depth - wall*4, 4], center=true);\n    }\n}\n\n// Assemble the chair\nkarma_chair();",
    "renders": true
  },
  {
    "toy": "lurk",
    "openscad_code": "// Lurk Toy Chair - Realistic Style\n// Overall dimensions: 120mm height, 80mm width, 100mm depth\n\n// Parameters\nleg_diameter = 8;\nleg_height = 50;\nseat_thickness = 5;\nseat_width = 80;\nseat_depth = 70;\nbackrest_height = 60;\nbackrest_thickness = 8;\narmrest_height = 40;\narmrest_width = 8;\narmrest_length = 30;\nsupport_bar_diameter = 6;\n\n// Main module\nmodule lurk_chair() {\n    // Legs - four legs positioned at corners\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, 0])\n            cylinder(h=leg_height, d=leg_diameter, $fn=20);\n    }\n    \n    // Seat\n    module seat() {\n        translate([0, 0, leg_height])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n    }\n    \n    // Backrest with slats\n    module backrest() {\n        difference() {\n            // Main backrest frame\n            translate([0, -seat_depth/2 + backrest_thickness/2, leg_height + seat_thickness/2 + backrest_height/2])\n                cube([seat_width, backrest_thickness, backrest_height], center=true);\n            \n            // Slat openings\n            for(i = [-30:15:30]) {\n                translate([i, -seat_depth/2 + backrest_thickness/2, leg_height + seat_thickness/2 + backrest_height/2])\n                    cube([8, backrest_thickness + 1, backrest_height - 20], center=true);\n            }\n        }\n    }\n    \n    // Armrests\n    module armrest() {\n        // Left armrest\n        translate([-seat_width/2 - armrest_width/2, 0, leg_height + seat_thickness/2 + armrest_height/2])\n            cube([armrest_width, armrest_length, armrest_height], center=true);\n        \n        // Right armrest\n        translate([seat_width/2 + armrest_width/2, 0, leg_height + seat_thickness/2 + armrest_height/2])\n            cube([armrest_width, armrest_length, armrest_height], center=true);\n    }\n    \n    // Support bars between legs\n    module support_bar() {\n        // Front support\n        translate([0, seat_depth/2 - 10, leg_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=seat_width - leg_diameter, d=support_bar_diameter, $fn=20);\n        \n        // Back support\n        translate([0, -seat_depth/2 + 10, leg_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=seat_width - leg_diameter, d=support_bar_diameter, $fn=20);\n        \n        // Left support\n        translate([-seat_width/2 + 10, 0, leg_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=seat_depth - leg_diameter, d=support_bar_diameter, $fn=20);\n        \n        // Right support\n        translate([seat_width/2 - 10, 0, leg_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=seat_depth - leg_diameter, d=support_bar_diameter, $fn=20);\n    }\n    \n    // Cushion\n    module cushion() {\n        translate([0, 0, leg_height + seat_thickness + 8])\n            scale([1, 1, 0.3])\n                sphere(d=seat_width - 10, $fn=30);\n    }\n    \n    // Assembly\n    union() {\n        // Legs\n        leg(-seat_width/2 + leg_diameter/2, seat_depth/2 - leg_diameter/2);\n        leg(seat_width/2 - leg_diameter/2, seat_depth/2 - leg_diameter/2);\n        leg(-seat_width/2 + leg_diameter/2, -seat_depth/2 + leg_diameter/2);\n        leg(seat_width/2 - leg_diameter/2, -seat_depth/2 + leg_diameter/2);\n        \n        // Seat\n        seat();\n        \n        // Backrest\n        backrest();\n        \n        // Armrests\n        armrest();\n        \n        // Support bars\n        support_bar();\n        \n        // Cushion\n        cushion();\n    }\n}\n\n// Render the chair\nlurk_chair();",
    "renders": true
  },
  {
    "toy": "mirth",
    "openscad_code": "// Mirth Toy Rocking Chair - Realistic Style\n// Overall dimensions: 120mm H x 90mm W x 110mm D\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule chair_seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, 45]) cube([80, 90, 8], center=true);\n        \n        // Hollow out seat\n        translate([0, 0, 47]) cube([76, 86, 8], center=true);\n        \n        // Rounded front edge\n        translate([0, 40, 45]) cube([80, 10, 8], center=true);\n    }\n}\n\nmodule chair_back() {\n    difference() {\n        // Main backrest\n        translate([0, -35, 75]) cube([75, 8, 60], center=true);\n        \n        // Hollow out backrest\n        translate([0, -35, 75]) cube([71, 4, 56], center=true);\n        \n        // Top curve\n        translate([0, -35, 105]) cube([75, 8, 8], center=true);\n    }\n    \n    // Back slats\n    for(i = [-25, -15, -5, 5, 15, 25]) {\n        translate([i, -35, 75]) cube([4, 6, 50], center=true);\n    }\n}\n\nmodule chair_arms() {\n    // Left arm\n    difference() {\n        translate([-42, 0, 65]) cube([8, 45, 25], center=true);\n        translate([-42, 0, 77]) cube([4, 41, 23], center=true);\n    }\n    \n    // Right arm\n    difference() {\n        translate([42, 0, 65]) cube([8, 45, 25], center=true);\n        translate([42, 0, 77]) cube([4, 41, 23], center=true);\n    }\n}\n\nmodule rocker_base() {\n    // Left rocker\n    difference() {\n        translate([-35, 0, 15]) scale([1, 1.2, 0.3]) \n            rotate([90, 0, 0]) cylinder(h=100, r1=35, r2=35);\n        translate([-35, 0, 14]) scale([0.9, 1.1, 0.4]) \n            rotate([90, 0, 0]) cylinder(h=100, r1=32, r2=32);\n    }\n    \n    // Right rocker\n    difference() {\n        translate([35, 0, 15]) scale([1, 1.2, 0.3]) \n            rotate([90, 0, 0]) cylinder(h=100, r1=35, r2=35);\n        translate([35, 0, 14]) scale([0.9, 1.1, 0.4]) \n            rotate([90, 0, 0]) cylinder(h=100, r1=32, r2=32);\n    }\n    \n    // Support bars\n    rotate([90, 0, 0]) cylinder(h=70, r=3, center=true);\n    translate([0, -35, 30]) rotate([90, 0, 0]) cylinder(h=70, r=3, center=true);\n    translate([0, 35, 30]) rotate([90, 0, 0]) cylinder(h=70, r=3, center=true);\n}\n\nmodule chair_legs() {\n    // Front left leg\n    translate([-35, 30, 30]) cylinder(h=30, r=3);\n    \n    // Front right leg\n    translate([35, 30, 30]) cylinder(h=30, r=3);\n    \n    // Back left leg\n    translate([-35, -30, 30]) cylinder(h=30, r=3);\n    \n    // Back right leg\n    translate([35, -30, 30]) cylinder(h=30, r=3);\n}\n\n// Assemble the chair\nunion() {\n    chair_seat();\n    chair_back();\n    chair_arms();\n    rocker_base();\n    chair_legs();\n}\n\n// Cushion detail\ntranslate([0, 10, 53]) cube([70, 50, 6], center=true);\ntranslate([0, 10, 56]) \n    for(x = [-30:10:30]) \n        for(y = [-20:10:20]) \n            translate([x, y, 0]) cube([8, 8, 2]);",
    "renders": true
  },
  {
    "toy": "nimbus",
    "openscad_code": "// Nimbus Toy - Realistic Style (Medium Complexity)\n// A 3D printable toy cloud with rainbow details\n\n// Main parameters\n$fn = 50;  // Resolution for smooth curves\nwall_thickness = 2;  // 3D printing wall thickness\nnimbus_length = 80;  // Overall length in mm\nnimbus_width = 50;\nnimbus_height = 35;\n\n// Rainbow colors module\nmodule rainbow_arc(height, width, thickness, segments) {\n    color_step = width / segments;\n    colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"];\n    \n    for (i = [0:segments-1]) {\n        translate([i * color_step, 0, 0]) {\n            color(colors[i % len(colors)])\n            cube([color_step, thickness, height]);\n        }\n    }\n}\n\n// Cloud puff module with toy-like rounded appearance\nmodule cloud_puff(radius, x, y, z) {\n    translate([x, y, z]) {\n        // Main puff body\n        sphere(r = radius);\n        \n        // Additional smaller puffs for realistic cloud appearance\n        translate([radius * 0.6, radius * 0.4, radius * 0.3])\n            sphere(r = radius * 0.7);\n        translate([-radius * 0.4, radius * 0.5, radius * 0.2])\n            sphere(r = radius * 0.6);\n        translate([0, -radius * 0.6, radius * 0.4])\n            sphere(r = radius * 0.5);\n    }\n}\n\n// Hollow shell for 3D printing\nmodule hollow_shell(outer, inner, height) {\n    difference() {\n        // Outer shape\n        cube([outer, outer, height], center = true);\n        \n        // Inner hollow space\n        translate([0, 0, -wall_thickness/2])\n            cube([inner, inner, height + wall_thickness], center = true);\n    }\n}\n\n// Main nimbus cloud body\nmodule nimbus_body() {\n    difference() {\n        union() {\n            // Central main body\n            cloud_puff(nimbus_width/2, 0, 0, 0);\n            \n            // Left extension\n            cloud_puff(nimbus_width/3, -nimbus_length/3, 0, nimbus_height/4);\n            \n            // Right extension\n            cloud_puff(nimbus_width/3, nimbus_length/3, 0, nimbus_height/4);\n            \n            // Front puff\n            cloud_puff(nimbus_width/4, 0, nimbus_width/3, nimbus_height/6);\n            \n            // Back puff\n            cloud_puff(nimbus_width/4, 0, -nimbus_width/3, nimbus_height/6);\n        }\n        \n        // Hollow out the bottom for 3D printing\n        translate([0, 0, -nimbus_height])\n            cube([nimbus_length * 1.5, nimbus_width * 1.5, nimbus_height * 2], center = true);\n    }\n}\n\n// Rainbow attachment structure\nmodule rainbow_bridge() {\n    // Support arches underneath\n    translate([0, 0, -nimbus_height/2]) {\n        rotate([90, 0, 0]) {\n            // Left arch\n            translate([-nimbus_length/3, 0, 0])\n                cylinder(h = nimbus_width * 0.8, r = wall_thickness * 2, center = true);\n            \n            // Right arch\n            translate([nimbus_length/3, 0, 0])\n                cylinder(h = nimbus_width * 0.8, r = wall_thickness * 2, center = true);\n        }\n    }\n    \n    // Rainbow stripes on top\n    translate([-nimbus_length/2.5, 0, nimbus_height/2]) {\n        rotate([0, 90, 0]) {\n            rainbow_arc(\n                height = nimbus_width/3,\n                width = nimbus_length/1.25,\n                thickness = wall_thickness,\n                segments = 7\n            );\n        }\n    }\n}\n\n// Toy connection points (studs for interlocking)\nmodule connection_studs() {\n    stud_radius = 4;\n    stud_height = 3;\n    \n    // Bottom studs for connecting to other toys\n    translate([0, 0, -nimbus_height/2 - stud_height/2]) {\n        // Central stud\n        cylinder(h = stud_height, r = stud_radius);\n        \n        // Additional studs for stability\n        for (x = [-nimbus_length/4, nimbus_length/4]) {\n            for (y = [-nimbus_width/4, nimbus_width/4]) {\n                translate([x, y, 0])\n                    cylinder(h = stud_height, r = stud_radius * 0.8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main cloud body in toy white\n    color(\"white\") nimbus_body();\n    \n    // Rainbow decoration\n    rainbow_bridge();\n    \n    // Connection studs\n    color(\"lightblue\") connection_studs();\n}\n\n// Print orientation indicator (text on bottom)\ntranslate([0, 0, -nimbus_height/2 - 5])\n    rotate([180, 0, 0])\n        linear_extrude(height = 1)\n            text(\"NIMBUS\", size = 8, halign = \"center\", valign = \"center\");",
    "renders": true
  },
  {
    "toy": "outlaw",
    "openscad_code": "// Outlaw Toy - Wanted Poster with Stand\n// A 3D printable toy featuring a \"WANTED\" poster on a wooden stand\n// Total height: 80mm, suitable for small hands\n\n// Parameters\nposter_w = 40;\nposter_h = 55;\nposter_t = 2;\nframe_t = 3;\nstand_base_w = 50;\nstand_base_d = 25;\nstand_base_h = 8;\npost_dia = 6;\npost_h = 20;\ntext_depth = 1;\nbolt_dia = 4;\nbolt_h = 6;\n\n// Main assembly\nunion() {\n    // Poster with frame\n    translate([0, 0, stand_base_h + post_h + frame_t]) {\n        // Frame\n        difference() {\n            // Outer frame\n            cube([poster_w + 2*frame_t, poster_h + 2*frame_t, frame_t], center=true);\n            // Inner cutout\n            translate([0, 0, -0.1])\n                cube([poster_w, poster_h, frame_t + 0.2], center=true);\n        }\n        \n        // Poster paper\n        translate([0, 0, -0.5])\n            cube([poster_w, poster_h, poster_t], center=true);\n            \n        // WANTED text\n        translate([0, poster_h/4, -poster_t - 0.1])\n            linear_extrude(height=text_depth + 0.1)\n                text(\"WANTED\", size=8, halign=\"center\", font=\"Arial:style=Bold\");\n                \n        // Reward text\n        translate([0, -poster_h/4, -poster_t - 0.1])\n            linear_extrude(height=text_depth + 0.1)\n                text(\"$500 REWARD\", size=5, halign=\"center\");\n                \n        // Sketchy portrait (simple circles for features)\n        translate([0, 5, -poster_t - 0.1]) {\n            // Head\n            cylinder(h=text_depth + 0.1, r=8, $fn=32);\n            // Eyes\n            translate([-3, 2, 0])\n                cylinder(h=text_depth + 0.1, r=1.5, $fn=16);\n            translate([3, 2, 0])\n                cylinder(h=text_depth + 0.1, r=1.5, $fn=16);\n            // Mouth\n            translate([0, -3, 0])\n                cube([6, 1.5, text_depth + 0.1], center=true);\n        }\n    }\n    \n    // Support post\n    translate([0, 0, stand_base_h])\n        cylinder(h=post_h, r=post_dia/2, $fn=32);\n    \n    // Base stand (wooden platform)\n    translate([0, 0, stand_base_h/2])\n        cube([stand_base_w, stand_base_d, stand_base_h], center=true);\n    \n    // Decorative bolts on base\n    module bolt(x, y) {\n        translate([x, y, stand_base_h - 1])\n            cylinder(h=bolt_h, r=bolt_dia/2, $fn=16);\n    }\n    \n    bolt(stand_base_w/2 - bolt_dia, stand_base_d/2 - bolt_dia);\n    bolt(-stand_base_w/2 + bolt_dia, stand_base_d/2 - bolt_dia);\n    bolt(stand_base_w/2 - bolt_dia, -stand_base_d/2 + bolt_dia);\n    bolt(-stand_base_w/2 + bolt_dia, -stand_base_d/2 + bolt_dia);\n    \n    // Reinforcement ribs under base\n    module rib(angle) {\n        rotate([0, 0, angle])\n            translate([0, -stand_base_d/4, stand_base_h/4])\n                cube([stand_base_w/2, stand_base_d/2, stand_base_h/2], center=true);\n    }\n    \n    rib(0);\n    rib(180);\n}",
    "renders": true
  },
  {
    "toy": "pyre",
    "openscad_code": "// Toy Pyre - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 120mm x 100mm total height\n\n$fn = 32;\n\n// Main parameters\npyre_width = 120;\npyre_depth = 120;\npyre_height = 100;\nlog_diameter = 8;\nlog_length = 60;\nwall_thickness = 2;\n\nmodule base_platform() {\n    // Wooden base platform\n    difference() {\n        // Main platform\n        cube([pyre_width, pyre_depth, 15], center=true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -2])\n            cube([pyre_width - 8, pyre_depth - 8, 19], center=true);\n    }\n}\n\nmodule support_legs() {\n    // Four support legs with toy-style rounded edges\n    for(x = [-50, 50])\n    for(y = [-50, 50]) {\n        translate([x, y, -7.5])\n            difference() {\n                cylinder(h=15, d=12);\n                translate([0, 0, -1])\n                    cylinder(h=17, d=8);\n            }\n    }\n}\n\nmodule log_stack() {\n    // Stack of logs in criss-cross pattern\n    // Bottom layer - horizontal\n    for(i = [-20:10:20]) {\n        translate([i, 0, 7.5 + log_diameter/2])\n            rotate([0, 90, 0])\n                cylinder(h=log_length, d=log_diameter);\n    }\n    \n    // Middle layer - vertical\n    for(i = [-20:10:20]) {\n        translate([0, i, 7.5 + log_diameter*1.5])\n            rotate([90, 0, 0])\n                cylinder(h=log_length, d=log_diameter);\n    }\n    \n    // Top layer - diagonal\n    translate([0, 0, 7.5 + log_diameter*2.5])\n        rotate([45, 0, 45])\n            cylinder(h=log_length*0.8, d=log_diameter);\n}\n\nmodule flame_elements() {\n    // Toy-safe flame elements (rounded tops)\n    module flame_tip() {\n        translate([0, 0, 15])\n            scale([1, 0.7, 2])\n                sphere(d=12);\n    }\n    \n    // Central flame cluster\n    for(angle = [0:60:359]) {\n        translate([0, 0, 7.5 + log_diameter*3])\n            rotate([0, 0, angle])\n                translate([8, 0, 0])\n                    flame_tip();\n    }\n    \n    // Smaller secondary flames\n    for(angle = [30:60:389]) {\n        translate([0, 0, 7.5 + log_diameter*3.5])\n            rotate([0, 0, angle])\n                translate([15, 0, 5])\n                    scale(0.7)\n                        flame_tip();\n    }\n}\n\nmodule safety_ring() {\n    // Protective ring around the pyre\n    difference() {\n        // Outer ring\n        translate([0, 0, 7.5])\n            cylinder(h=8, d=pyre_width + 10);\n        \n        // Inner cutout\n        translate([0, 0, 7.5])\n            cylinder(h=10, d=pyre_width + 6);\n    }\n    \n    // Decorative studs\n    for(angle = [0:30:359]) {\n        rotate([0, 0, angle])\n            translate([(pyre_width + 8)/2, 0, 11.5])\n                sphere(d=4);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_platform();\n    support_legs();\n    \n    // Pyre elements\n    log_stack();\n    \n    // Safety features\n    safety_ring();\n    \n    // Flame elements (toy-safe rounded)\n    flame_elements();\n}",
    "renders": true
  },
  {
    "toy": "rune",
    "openscad_code": "// Rune toy chair with authentic proportions and structural details\n// Overall dimensions: 60mm width x 55mm depth x 75mm height\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main chair module\nmodule rune_chair() {\n    // Chair seat - 40mm x 40mm x 10mm thick\n    translate([0, 0, 35]) {\n        difference() {\n            // Base seat cube with rounded edges\n            minkowski() {\n                cube([40, 40, 10], center = true);\n                cylinder(h=0.1, r=2);\n            }\n            \n            // Rune symbol carved into seat (Ansuz rune)\n            translate([0, 0, 4.5]) {\n                linear_extrude(height=3) {\n                    polygon(points=[\n                        [-8, -12], [-8, 12], [-4, 12], [-4, 2], \n                        [4, 2], [4, 12], [8, 12], [8, -12],\n                        [4, -12], [4, -2], [-4, -2], [-4, -12]\n                    ]);\n                }\n            }\n        }\n    }\n    \n    // Backrest - 40mm wide x 30mm high x 5mm thick\n    translate([0, 17.5, 57.5]) {\n        difference() {\n            // Main backrest panel\n            cube([40, 5, 30], center = true);\n            \n            // Decorative cutouts - rune patterns\n            for(x = [-15, -5, 5, 15]) {\n                translate([x, 2.6, 5]) {\n                    cylinder(h=3, r=3);\n                }\n                translate([x, 2.6, -5]) {\n                    cylinder(h=3, r=3);\n                }\n            }\n        }\n    }\n    \n    // Chair legs - 4 cylindrical legs with reinforcement rings\n    module leg() {\n        difference() {\n            // Main leg cylinder - 25mm height, 6mm diameter\n            cylinder(h=35, r=3);\n            \n            // Hollow center for material saving\n            cylinder(h=35, r=1.5);\n            \n            // Foot detail - rounded base\n            translate([0, 0, -1]) {\n                sphere(r=3.5);\n            }\n        }\n        \n        // Reinforcement ring 10mm from bottom\n        translate([0, 0, 10]) {\n            cylinder(h=3, r=4);\n        }\n    }\n    \n    // Position legs at corners\n    translate([17.5, 17.5, 17.5]) leg();\n    translate([-17.5, 17.5, 17.5]) leg();\n    translate([17.5, -17.5, 17.5]) leg();\n    translate([-17.5, -17.5, 17.5]) leg();\n    \n    // Support stretchers between legs\n    module stretcher() {\n        cube([30, 3, 3], center = true);\n    }\n    \n    // Front stretcher\n    translate([0, 17.5, 10]) rotate([0, 90, 0]) stretcher();\n    \n    // Side stretchers\n    translate([17.5, 0, 10]) rotate([90, 0, 0]) stretcher();\n    translate([-17.5, 0, 10]) rotate([90, 0, 0]) stretcher();\n    \n    // Back stretcher\n    translate([0, -17.5, 10]) rotate([0, 90, 0]) stretcher();\n    \n    // Armrests - 5mm thick, curved top\n    module armrest() {\n        difference() {\n            // Main armrest shape\n            hull() {\n                translate([0, 0, 0]) sphere(r=3);\n                translate([0, 15, 0]) sphere(r=3);\n                translate([0, 15, 10]) sphere(r=3);\n                translate([0, 0, 10]) sphere(r=3);\n            }\n            \n            // Hollow underside\n            translate([0, 7.5, 2]) scale([0.7, 0.7, 0.8]) \n                cube([6, 15, 8], center = true);\n        }\n    }\n    \n    // Position armrests\n    translate([22.5, 0, 45]) armrest();\n    mirror([1, 0, 0]) translate([22.5, 0, 45]) armrest();\n}\n\n// Create the chair centered at origin\nrune_chair();",
    "renders": true
  },
  {
    "toy": "siren",
    "openscad_code": "// Toy Siren\n// Realistic style, medium complexity\n// Approx 120mm tall\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameter\noverall_height = 120;\n\n// Base\nmodule base() {\n    difference() {\n        cylinder(h = 15, d = 60, center = false);\n        translate([0, 0, -1])\n            cylinder(h = 17, d = 56, center = false);\n    }\n}\n\n// Vertical post\nmodule post() {\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h = 70, d = 12, center = false);\n            translate([0, 0, -1])\n                cylinder(h = 72, d = 8, center = false);\n        }\n}\n\n// Siren dome shell\nmodule dome() {\n    difference() {\n        sphere(d = 50);\n        translate([0, 0, -5])\n            sphere(d = 46);\n    }\n}\n\n// Siren light lens\nmodule lens() {\n    translate([0, 0, 0])\n        sphere(d = 42);\n}\n\n// Grill slots for sound exit\nmodule grill_slots() {\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([0, 22, -5])\n                cube([2, 4, 20], center = true);\n    }\n}\n\n// Mounting ring for dome\nmodule mount_ring() {\n    translate([0, 0, 85])\n        difference() {\n            cylinder(h = 8, d = 54, center = false);\n            translate([0, 0, -1])\n                cylinder(h = 10, d = 50, center = false);\n        }\n}\n\n// Control knob detail\nmodule control_knob() {\n    translate([-8, 0, 25])\n        union() {\n            difference() {\n                cylinder(h = 8, d = 10, center = false);\n                translate([0, 0, -1])\n                    cylinder(h = 10, d = 6, center = false);\n            }\n            translate([0, 0, 8])\n                rotate([0, 0, 0])\n                    cube([2, 6, 2], center = true);\n        }\n}\n\n// Siren horn flare\nmodule horn() {\n    translate([0, 0, 93])\n        rotate([0, 0, 0])\n            difference() {\n                cylinder(h1 = 0, h2 = 20, r1 = 20, r2 = 15, center = false);\n                translate([0, 0, -1])\n                    cylinder(h1 = 0, h2 = 22, r1 = 18, r2 = 13, center = false);\n            }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base();\n    post();\n    \n    // Dome assembly\n    translate([0, 0, 93])\n        union() {\n            color(\"silver\") dome();\n            color(\"red\") lens();\n            color(\"gray\") grill_slots();\n            mount_ring();\n        }\n    \n    // Details\n    color(\"black\") control_knob();\n    color(\"gray\") horn();\n}",
    "renders": true
  },
  {
    "toy": "tonic",
    "openscad_code": "// Realistic Tonic Toy Chair\n// Medium complexity OpenSCAD code for 3D printing\n// Overall dimensions: 80mm width x 85mm depth x 100mm height\n\n// Main chair module\nmodule tonic_chair() {\n    // Chair seat with rounded edges\n    translate([0, 0, 45]) {\n        difference() {\n            // Main seat block (2mm walls)\n            minkowski() {\n                cube([65, 60, 10], center=true);\n                sphere(r=3, $fn=16);\n            }\n            // Hollow interior\n            translate([0, 0, -1]) {\n                minkowski() {\n                    cube([61, 56, 12], center=true);\n                    sphere(r=2, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Chair backrest with slats\n    translate([0, 25, 85]) {\n        difference() {\n            // Backrest frame\n            cube([70, 8, 70], center=true);\n            // Hollow center\n            cube([66, 12, 66], center=true);\n        }\n        \n        // Backrest slats (5 slats, 2mm thick)\n        for(i = [-2:2]) {\n            translate([i * 12, 0, 0]) {\n                cube([8, 6, 64], center=true);\n            }\n        }\n    }\n    \n    // Front legs (2mm thick walls)\n    translate([-25, -25, 22.5]) {\n        difference() {\n            // Leg 1\n            cylinder(h=45, r1=6, r2=4, $fn=16);\n            // Hollow\n            cylinder(h=45, r1=4, r2=2, $fn=16);\n        }\n    }\n    \n    translate([25, -25, 22.5]) {\n        difference() {\n            // Leg 2\n            cylinder(h=45, r1=6, r2=4, $fn=16);\n            // Hollow\n            cylinder(h=45, r1=4, r2=2, $fn=16);\n        }\n    }\n    \n    // Back legs (angled outward slightly)\n    translate([-25, 25, 22.5]) {\n        rotate([0, 5, 0]) {\n            difference() {\n                cylinder(h=45, r1=6, r2=4, $fn=16);\n                cylinder(h=45, r1=4, r2=2, $fn=16);\n            }\n        }\n    }\n    \n    translate([25, 25, 22.5]) {\n        rotate([0, -5, 0]) {\n            difference() {\n                cylinder(h=45, r1=6, r2=4, $fn=16);\n                cylinder(h=45, r1=4, r2=2, $fn=16);\n            }\n        }\n    }\n    \n    // Support stretchers between legs\n    // Front stretcher\n    translate([0, -25, 15]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=50, r=3, $fn=16);\n                cylinder(h=50, r=1, $fn=16);\n            }\n        }\n    }\n    \n    // Side stretchers\n    translate([-25, 0, 15]) {\n        rotate([90, 90, 0]) {\n            difference() {\n                cylinder(h=50, r=3, $fn=16);\n                cylinder(h=50, r=1, $fn=16);\n            }\n        }\n    }\n    \n    translate([25, 0, 15]) {\n        rotate([90, 90, 0]) {\n            difference() {\n                cylinder(h=50, r=3, $fn=16);\n                cylinder(h=50, r=1, $fn=16);\n            }\n        }\n    }\n    \n    // Cushion detail on seat\n    translate([0, 0, 51]) {\n        difference() {\n            // Cushion top\n            minkowski() {\n                cube([55, 50, 5], center=true);\n                sphere(r=2, $fn=16);\n            }\n            // Cushion tufting\n            translate([0, 0, -3]) {\n                cube([51, 46, 9], center=true);\n            }\n        }\n        \n        // Tufting buttons\n        for(x = [-15, 0, 15]) {\n            for(y = [-15, 0, 15]) {\n                translate([x, y, 53.5]) {\n                    sphere(r=2, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Decorative backrest top rail\n    translate([0, 29, 120]) {\n        difference() {\n            // Top rail\n            cube([75, 12, 10], center=true);\n            // Decorative curve\n            translate([0, -2, -2]) {\n                minkowski() {\n                    cube([71, 8, 6], center=true);\n                    sphere(r=3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntonic_chair();",
    "renders": true
  },
  {
    "toy": "uplink",
    "openscad_code": "// Uplink toy item - realistic style, medium complexity\n// Overall dimensions: 110mm x 80mm x 100mm\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nleg_diameter = 10;\nleg_height = 60;\nseat_width = 80;\nseat_depth = 70;\nseat_thickness = 8;\nbackrest_height = 40;\nbackrest_thickness = 6;\narmrest_height = 20;\narmrest_width = 8;\narmrest_length = 30;\n\nmodule chair_leg(pos_x, pos_z) {\n    translate([pos_x, seat_depth/2 - 10, pos_z]) {\n        difference() {\n            cylinder(h = leg_height, d = leg_diameter);\n            // Hollow leg for weight reduction\n            translate([0, 0, wall_thickness]) {\n                cylinder(h = leg_height - wall_thickness*2, d = leg_diameter - wall_thickness*2);\n            }\n        }\n    }\n}\n\nmodule seat_panel() {\n    // Main seat\n    difference() {\n        cube([seat_width, seat_depth, seat_thickness], center = true);\n        // Hollow bottom\n        translate([0, 0, -seat_thickness/2 + wall_thickness]) {\n            cube([seat_width - wall_thickness*2, seat_depth - wall_thickness*2, seat_thickness - wall_thickness], center = true);\n        }\n    }\n    \n    // Seat cushion pattern\n    for (x = [-seat_width/2 + 15 : 15 : seat_width/2 - 15]) {\n        for (y = [-seat_depth/2 + 15 : 15 : seat_depth/2 - 15]) {\n            translate([x, y, seat_thickness/2 - 1]) {\n                cylinder(h = 3, d = 6);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    translate([0, -seat_depth/2 + 2, leg_height + seat_thickness/2 + backrest_height/2]) {\n        difference() {\n            cube([seat_width - 20, backrest_thickness, backrest_height], center = true);\n            // Hollow backrest\n            translate([0, 0, 0]) {\n                cube([seat_width - 20 - wall_thickness*2, backrest_thickness - wall_thickness*2, backrest_height - wall_thickness*2], center = true);\n            }\n        }\n    }\n    \n    // Backrest slats\n    for (i = [-1:1]) {\n        translate([i * 25, -seat_depth/2 + 2, leg_height + seat_thickness + 10]) {\n            cube([6, backrest_thickness + 2, 20]);\n        }\n    }\n}\n\nmodule armrest(side) {\n    translate([side * (seat_width/2 - armrest_width/2), 0, leg_height + seat_thickness/2 + armrest_height/2]) {\n        cube([armrest_width, armrest_length, armrest_height], center = true);\n    }\n    \n    // Armrest support\n    translate([side * (seat_width/2 - armrest_width/2), seat_depth/2 - 15, leg_height + seat_thickness/2]) {\n        cylinder(h = armrest_height, d = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    chair_leg(-seat_width/2 + 15, 0);\n    chair_leg(seat_width/2 - 15, 0);\n    chair_leg(-seat_width/2 + 15, -seat_depth + 20);\n    chair_leg(seat_width/2 - 15, -seat_depth + 20);\n    \n    // Seat\n    translate([0, 0, leg_height + seat_thickness/2]) {\n        seat_panel();\n    }\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Cross support bars\n    translate([0, seat_depth/2 - 10, leg_height/2]) {\n        cube([seat_width - 30, 6, 6], center = true);\n    }\n    translate([0, -seat_depth/2 + 10, leg_height/2]) {\n        cube([seat_width - 30, 6, 6], center = true);\n    }\n}",
    "renders": true
  },
  {
    "toy": "vigil",
    "openscad_code": "// Vigil Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm width x 90mm depth x 100mm height\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nseat_height = 45;\nleg_height = 40;\n\n// Main module\nmodule vigil_chair() {\n    // Chair backrest with vigil-style cutouts\n    union() {\n        // Backrest frame\n        translate([0, -35, 70]) {\n            difference() {\n                // Main backrest panel\n                cube([70, 10, 50], center=true);\n                \n                // Central cutout pattern - vigil symbol\n                translate([0, 0, 10]) {\n                    cylinder(h=12, r=15, center=true);\n                }\n                translate([0, 0, -10]) {\n                    cube([30, 12, 20], center=true);\n                }\n                \n                // Side cutouts for lighter appearance\n                for(i = [-25, 25]) {\n                    translate([i, 0, 0]) {\n                        cube([15, 12, 40], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Backrest support posts\n        for(x = [-25, 25]) {\n            translate([x, -30, 45]) {\n                cylinder(h=50, r=3);\n            }\n        }\n        \n        // Seat\n        translate([0, 0, seat_height]) {\n            difference() {\n                // Main seat with rounded edges\n                minkowski() {\n                    cube([70, 70, 6], center=true);\n                    sphere(r=3);\n                }\n                \n                // Cushion indentations\n                translate([0, 0, 2]) {\n                    cube([60, 60, 4], center=true);\n                }\n            }\n        }\n        \n        // Legs with toy-style joints\n        for(x = [-25, 25]) {\n            for(y = [-25, 25]) {\n                translate([x, y, leg_height/2]) {\n                    // Main leg\n                    difference() {\n                        cylinder(h=leg_height, r=4);\n                        // Hollow for toy joint\n                        translate([0, 0, -1]) {\n                            cylinder(h=leg_height+2, r=2);\n                        }\n                    }\n                    \n                    // Toy joint detail at top\n                    translate([0, 0, leg_height]) {\n                        sphere(r=5);\n                    }\n                }\n            }\n        }\n        \n        // Support bars between legs\n        // Front bar\n        translate([0, -25, 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=50, r=2);\n            }\n        }\n        \n        // Side bars\n        translate([-25, 0, 15]) {\n            rotate([90, 90, 0]) {\n                cylinder(h=50, r=2);\n            }\n        }\n        \n        translate([25, 0, 15]) {\n            rotate([90, 90, 0]) {\n                cylinder(h=50, r=2);\n            }\n        }\n        \n        // Back bar\n        translate([0, 25, 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=50, r=2);\n            }\n        }\n        \n        // Armrests\n        for(side = [-1, 1]) {\n            translate([side * 35, 0, 65]) {\n                // Armrest support\n                difference() {\n                    cube([6, 50, 20], center=true);\n                    // Hollow for toy appearance\n                    translate([0, 0, -5]) {\n                        cube([3, 45, 15], center=true);\n                    }\n                }\n                \n                // Armrest top\n                translate([0, 15, 10]) {\n                    cube([8, 20, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Generate the chair\nvigil_chair();",
    "renders": true
  },
  {
    "toy": "ward",
    "openscad_code": "// Toy Ward - Realistic Medium Complexity Wardrobe with Hinged Doors and Drawers\n// Overall dimensions: 120mm (H) x 80mm (W) x 45mm (D)\n\n$fn = 32;\n\n// Main module\nmodule toy_ward() {\n    // Main wardrobe body\n    difference() {\n        // Outer shell\n        cube([78, 40, 118], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            cube([74, 36, 114], center = true);\n    }\n    \n    // Back panel (2mm thick)\n    translate([0, -21, 0])\n        cube([78, 2, 118], center = true);\n    \n    // Base frame\n    translate([0, 0, -60])\n        cube([82, 44, 8], center = true);\n    \n    // Top frame\n    translate([0, 0, 60])\n        cube([82, 44, 8], center = true);\n    \n    // Left door\n    translate([-39.5, 0, -30])\n        rotate([0, -15, 0])\n        door_panel();\n    \n    // Right door\n    translate([39.5, 0, -30])\n        rotate([0, 15, 0])\n        mirror([1, 0, 0])\n        door_panel();\n    \n    // Door handles\n    translate([-25, 18, -30])\n        door_handle();\n    \n    translate([25, 18, -30])\n        door_handle();\n    \n    // Internal shelf\n    translate([0, 0, 20])\n        shelf();\n    \n    // Hanging rail\n    translate([0, -15, 40])\n        hanging_rail();\n    \n    // Bottom drawer\n    translate([0, 0, -45])\n        drawer();\n    \n    // Decorative panel details\n    panel_details();\n    \n    // Side supports\n    side_supports();\n}\n\n// Door panel module\nmodule door_panel() {\n    difference() {\n        // Door frame\n        cube([38, 36, 86]);\n        \n        // Inner panel recess\n        translate([2, 2, 2])\n            cube([34, 32, 82]);\n    }\n}\n\n// Door handle module\nmodule door_handle() {\n    color(\"gold\")\n    difference() {\n        // Handle base\n        translate([0, 0, -10])\n            cylinder(h = 20, r = 3);\n        \n        // Handle grip hole\n        translate([0, 0, -8])\n            cylinder(h = 16, r = 2);\n    }\n}\n\n// Shelf module\nmodule shelf() {\n    difference() {\n        // Shelf platform\n        cube([74, 35, 3], center = true);\n        \n        // Ventilation holes\n        for(x = [-30:15:30])\n            for(y = [-12:12:12])\n                translate([x, y, 0])\n                    cylinder(h = 4, r = 2, center = true);\n    }\n}\n\n// Hanging rail module\nmodule hanging_rail() {\n    // Rail bar\n    color(\"silver\")\n    rotate([90, 0, 0])\n        cylinder(h = 70, r = 2);\n    \n    // Support brackets\n    translate([-35, 0, 0])\n        cube([4, 8, 4], center = true);\n    \n    translate([35, 0, 0])\n        cube([4, 8, 4], center = true);\n}\n\n// Drawer module\nmodule drawer() {\n    // Drawer front\n    difference() {\n        cube([74, 36, 8], center = true);\n        \n        // Drawer recess\n        translate([0, 0, 1])\n            cube([70, 32, 6], center = true);\n    }\n    \n    // Drawer handle\n    color(\"gold\")\n    translate([0, 18, 5])\n        cube([30, 4, 2], center = true);\n}\n\n// Panel details module\nmodule panel_details() {\n    // Top panel molding\n    translate([0, 0, 54])\n        cube([78, 40, 2], center = true);\n    \n    // Side panel details\n    for(side = [-1, 1]) {\n        translate([side * 40, 0, 0])\n            cube([2, 40, 114], center = true);\n    }\n}\n\n// Side supports module\nmodule side_supports() {\n    // Left support\n    translate([-41, 0, 0])\n        cube([4, 40, 118], center = true);\n    \n    // Right support\n    translate([41, 0, 0])\n        cube([4, 40, 118], center = true);\n}\n\n// Render the toy ward\ntoy_ward();",
    "renders": true
  },
  {
    "toy": "block",
    "openscad_code": "// Toy block furniture – a miniature wooden toy chair\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\nchair_w = 60;        // seat width\nchair_d = 55;        // seat depth\nchair_h = 65;        // total height\nleg_d = 8;           // leg diameter\nleg_h = 35;          // leg height\nback_h = 30;         // backrest height above seat\nslat_w = 6;          // backrest slat thickness\nseat_t = 4;          // seat plate thickness\nwall_t = 2;          // 3D-print wall thickness\n\n// Main chair module\nmodule toy_chair() {\n    // Seat plate\n    difference() {\n        translate([0, 0, leg_h])\n            cube([chair_w, chair_d, seat_t], center = true);\n        // Lightening cavity underneath\n        translate([0, 0, leg_h - 0.01])\n            cube([chair_w - 2*wall_t, chair_d - 2*wall_t, seat_t + 0.02], center = true);\n    }\n\n    // Four cylindrical legs\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(chair_w/2 - leg_d/2), y*(chair_d/2 - leg_d/2), leg_h/2])\n                cylinder(h = leg_h, d = leg_d, $fn = 20);\n\n    // Backrest frame\n    // Left post\n    translate([-chair_w/2 + leg_d/2, -chair_d/2 + leg_d/2, leg_h + seat_t + back_h/2])\n        cube([leg_d, leg_d, back_h], center = true);\n    // Right post\n    translate([chair_w/2 - leg_d/2, -chair_d/2 + leg_d/2, leg_h + seat_t + back_h/2])\n        cube([leg_d, leg_d, back_h], center = true);\n    // Top rail\n    translate([0, -chair_d/2 + leg_d/2, leg_h + seat_t + back_h - leg_d/2])\n        cube([chair_w - leg_d, leg_d, leg_d], center = true);\n\n    // Backrest slats (3 horizontal)\n    for (i = [0:2]) {\n        translate([0, -chair_d/2 + leg_d/2 + wall_t, \n                   leg_h + seat_t + leg_d + i*(back_h - 2*leg_d)/2])\n            cube([chair_w - 2*leg_d, slat_w, slat_w], center = true);\n    }\n}\n\n// Optional rounded edges using hull for realism\nmodule rounded_seat() {\n    difference() {\n        hull() {\n            translate([0, 0, leg_h + seat_t/2 + 0.5])\n                cube([chair_w - 2, chair_d - 2, 1], center = true);\n            translate([0, 0, leg_h + seat_t/2 - 0.5])\n                cube([chair_w, chair_d, 1], center = true);\n        }\n        // Hollow underside\n        translate([0, 0, leg_h + seat_t/2 - wall_t - 0.5])\n            cube([chair_w - 2*wall_t, chair_d - 2*wall_t, seat_t + wall_t + 0.5], center = true);\n    }\n}\n\n// Replace plain seat with rounded seat\ndifference() {\n    toy_chair();\n    translate([0, 0, leg_h])\n        cube([chair_w, chair_d, seat_t], center = true);\n}\nrounded_seat();",
    "renders": true
  },
  {
    "toy": "brick",
    "openscad_code": "// Realistic Toy Brick – 2×4 classic LEGO-compatible stud brick\n// 63 mm long × 31 mm wide × 38 mm high (including studs)\n// Designed for 3D printing: 2 mm walls, no steep overhangs\n\n$fn = 36;\n\n// Overall dimensions\nbrick_l = 63;          // 8 mm * 8 mm * 2 studs = 63 mm\nbrick_w = 31;          // 8 mm * 4 mm * 1 stud  = 31 mm\nbrick_h = 36;          // 9.6 mm * 3.2 mm * 3 bricks = 36 mm (actual)\nstud_d  = 4.8;         // Ø 4.8 mm stud\nstud_h  = 1.7;         // 1.7 mm stud height\nwall    = 2;           // 2 mm wall thickness for printability\ntube_d  = 6.5;         // Ø 6.5 mm support tube\ntube_h  = 5.5;         // 5.5 mm tube height\nclearance = 0.2;       // slight clearance for fit\n\nmodule main_brick() {\n    difference() {\n        // Outer shell\n        cube([brick_l, brick_w, brick_h], center = true);\n\n        // Hollow interior\n        translate([0, 0, -wall/2])\n            cube([\n                brick_l - 2*wall,\n                brick_w - 2*wall,\n                brick_h + 1\n            ], center = true);\n    }\n}\n\nmodule stud() {\n    cylinder(h = stud_h, d = stud_d, center = false);\n}\n\nmodule tube() {\n    // Support tubes under the brick\n    difference() {\n        cylinder(h = tube_h, d = tube_d + 2*wall, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = tube_h + 0.2, d = tube_d, center = false);\n    }\n}\n\nmodule studs_row(count) {\n    for (i = [0 : count - 1]) {\n        translate([-(brick_l - stud_d)/2 + i * 8, 0, brick_h/2])\n            stud();\n    }\n}\n\nmodule tubes_grid(rows, cols) {\n    for (r = [0 : rows - 1]) {\n        for (c = [0 : cols - 1]) {\n            translate([\n                -(brick_l - 8)/2 + r * 8,\n                -(brick_w - 8)/2 + c * 8,\n                -brick_h/2\n            ])\n                tube();\n        }\n    }\n}\n\n// Build the brick\nunion() {\n    main_brick();\n    \n    // Top studs: 2 rows × 4 studs\n    translate([0,  brick_w/2 - 4, 0]) studs_row(4);\n    translate([0, -brick_w/2 + 4, 0]) studs_row(4);\n    \n    // Bottom tubes: 1 row × 2 columns\n    tubes_grid(2, 1);\n}",
    "renders": true
  },
  {
    "toy": "lego",
    "openscad_code": "// LEGO Toy Chair - Realistic Medium Complexity\n// Based on actual LEGO chair dimensions and proportions\n\n// Basic LEGO unit = 8mm (stud spacing)\nunit = 8;\n\n// LEGO chair dimensions\nseat_width = 4 * unit;      // 4 studs wide\nseat_depth = 4 * unit;      // 4 studs deep\nseat_thickness = unit/2;    // 4mm thick\nback_height = 5 * unit;     // 5 bricks high\nleg_height = 3 * unit;      // 3 bricks high\n\n// LEGO stud dimensions\nstud_diameter = 4.8;\nstud_height = 1.7;\n\n// LEGO brick wall thickness\nwall_thickness = 1.6;\n\n// Main module for the LEGO chair\nmodule lego_chair() {\n    // Seat assembly\n    union() {\n        // Main seat plate\n        translate([0, 0, leg_height])\n            seat_plate();\n        \n        // Backrest assembly\n        translate([0, -seat_depth/2 + wall_thickness, leg_height + seat_thickness])\n            backrest();\n        \n        // Four legs\n        leg_positions = [\n            [-seat_width/2 + unit/2, -seat_depth/2 + unit/2, 0],\n            [seat_width/2 - unit/2, -seat_depth/2 + unit/2, 0],\n            [-seat_width/2 + unit/2, seat_depth/2 - unit/2, 0],\n            [seat_width/2 - unit/2, seat_depth/2 - unit/2, 0]\n        ];\n        \n        for(pos = leg_positions) {\n            translate(pos)\n                chair_leg();\n        }\n        \n        // Bottom support beams\n        translate([0, 0, leg_height/2])\n            support_beams();\n    }\n}\n\n// Seat plate with studs on top\nmodule seat_plate() {\n    difference() {\n        // Main seat block\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Hollow underside\n        translate([0, 0, -seat_thickness/2 + wall_thickness])\n            cube([seat_width - 2*wall_thickness, seat_depth - 2*wall_thickness, wall_thickness], center=true);\n    }\n    \n    // Top studs (4x4 grid)\n    for(x = [-1.5, -0.5, 0.5, 1.5]) {\n        for(y = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([x * unit, y * unit, seat_thickness/2])\n                cylinder(h=stud_height, d=stud_diameter, $fn=16);\n        }\n    }\n}\n\n// Backrest with realistic LEGO brick pattern\nmodule backrest() {\n    union() {\n        // Main backrest panel\n        cube([seat_width, wall_thickness*2, back_height], center=true);\n        \n        // Horizontal support bars\n        for(i = [0.5, 1.5, 2.5, 3.5]) {\n            translate([0, 0, i * unit - back_height/2])\n                cube([seat_width - wall_thickness, wall_thickness*2, wall_thickness], center=true);\n        }\n        \n        // Vertical support pillars\n        for(x = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([x * unit, 0, 0])\n                cube([wall_thickness, wall_thickness*2, back_height], center=true);\n        }\n    }\n    \n    // Top edge detail\n    translate([0, 0, back_height/2])\n        cube([seat_width, wall_thickness*2, wall_thickness], center=true);\n}\n\n// Chair leg module (hollow LEGO brick style)\nmodule chair_leg() {\n    difference() {\n        // Main leg block\n        cube([unit, unit, leg_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cube([unit - 2*wall_thickness, unit - 2*wall_thickness, leg_height - wall_thickness], center=true);\n    }\n    \n    // Side tubes for connection\n    for(side = [-1, 1]) {\n        translate([side * (unit/2 - wall_thickness/2), 0, leg_height/2 - wall_thickness])\n            rotate([90, 0, 0])\n                cylinder(h=unit - 2*wall_thickness, d=wall_thickness*1.2, center=true, $fn=12);\n    }\n}\n\n// Support beams between legs\nmodule support_beams() {\n    // Front beam\n    translate([0, -seat_depth/2 + unit/2, 0])\n        cube([seat_width - unit, wall_thickness, wall_thickness*2], center=true);\n    \n    // Back beam\n    translate([0, seat_depth/2 - unit/2, 0])\n        cube([seat_width - unit, wall_thickness, wall_thickness*2], center=true);\n    \n    // Side beams\n    translate([-seat_width/2 + unit/2, 0, 0])\n        cube([wall_thickness, seat_depth - unit, wall_thickness*2], center=true);\n    \n    translate([seat_width/2 - unit/2, 0, 0])\n        cube([wall_thickness, seat_depth - unit, wall_thickness*2], center=true);\n}\n\n// Render the chair centered on build plate\ntranslate([0, 0, 0])\n    lego_chair();",
    "renders": true
  },
  {
    "toy": "stacker",
    "openscad_code": "// Stackable wooden ring stacker toy (5 rings + base)\n// Realistic proportions, 3D-printable, ~120mm tall\n\n$fn = 50;  // Smooth curves for better realism\nwall = 2.5; // Wall thickness for sturdy printing\n\n// Overall dimensions\nbase_d = 60;\nbase_h = 15;\npost_d = 12;\npost_h = 105;\nring_h = 12;\nring_gap = 2;\n\n// Realistic ring set: 5 decreasing sizes\nrings = [\n    [50, 8],   // largest\n    [44, 8],\n    [38, 8],\n    [32, 8],\n    [26, 8]    // smallest\n];\n\n// Main assembly\nunion() {\n    // Base with rounded edges\n    base();\n\n    // Central post\n    translate([0, 0, base_h])\n        post();\n\n    // Rings stacked in display order\n    for (i = [0 : len(rings)-1]) {\n        translate([0, 0, base_h + ring_h*i + ring_gap*i])\n            ring(rings[i][0], rings[i][1]);\n    }\n}\n\n// Base module: beveled edges and center hole\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_h, d = base_d);\n\n        // Top bevel edge\n        translate([0, 0, base_h - 2])\n            cylinder(h = 2, d1 = base_d - 4, d2 = base_d);\n\n        // Bottom bevel edge\n        translate([0, 0, 0])\n            cylinder(h = 2, d1 = base_d, d2 = base_d - 4);\n\n        // Center post hole\n        translate([0, 0, -1])\n            cylinder(h = base_h + 2, d = post_d, $fn = 32);\n    }\n\n    // Decorative bottom ring\n    difference() {\n        translate([0, 0, 1])\n            cylinder(h = 1.5, d = base_d - 4);\n        cylinder(h = 2, d = base_d - 8);\n    }\n}\n\n// Post module: tapered top, rounded edges\nmodule post() {\n    union() {\n        // Main post\n        cylinder(h = post_h, d = post_d);\n\n        // Rounded top cap\n        translate([0, 0, post_h])\n            sphere(d = post_d + 1);\n\n        // Subtle taper at top\n        translate([0, 0, post_h - 5])\n            cylinder(h = 5, d1 = post_d - 1, d2 = post_d);\n    }\n}\n\n// Ring module: realistic wood-like profile\nmodule ring(outer_d, thickness) {\n    inner_d = post_d + 1.5;  // Loose fit for stacking\n    \n    difference() {\n        // Outer ring body\n        cylinder(h = ring_h, d = outer_d);\n\n        // Inner hole for post\n        translate([0, 0, -1])\n            cylinder(h = ring_h + 2, d = inner_d);\n\n        // Chamfer top edge\n        translate([0, 0, ring_h - 2])\n            cylinder(h = 2, d1 = outer_d, d2 = outer_d - 3);\n\n        // Chamfer bottom edge\n        translate([0, 0, 0])\n            cylinder(h = 2, d1 = outer_d - 3, d2 = outer_d);\n    }\n\n    // Reinforcement ridge inside ring\n    translate([0, 0, ring_h/2])\n        difference() {\n            cylinder(h = 3, d = inner_d + 6);\n            cylinder(h = 3.1, d = inner_d + 0.5);\n        }\n\n    // Subtle grip texture lines\n    for (i = [1 : 3]) {\n        rotate([0, 0, i*120])\n            translate([outer_d/2 - 3, -1, ring_h/2])\n                cube([6, 2, ring_h - 2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "toy": "constructo",
    "openscad_code": "// Constructo Wooden Toy Chair - Realistic Style\n// Overall height: 90mm, Seat height: 50mm, Width: 60mm, Depth: 65mm\n\n// Parameters\nchair_width = 60;\nchair_depth = 65;\nseat_height = 50;\nback_height = 90;\nleg_size = 8;\nback_slats = 5;\nslat_width = 6;\nwall_thickness = 2;\n\n// Main module\nmodule constructo_chair() {\n    union() {\n        // Seat frame\n        translate([0, 0, seat_height/2])\n            cube([chair_width, chair_depth, wall_thickness], center=true);\n        \n        // Seat surface with rounded edges\n        translate([0, 0, seat_height + wall_thickness/2])\n            cube([chair_width - 2*wall_thickness, chair_depth - 2*wall_thickness, wall_thickness], center=true);\n        \n        // Backrest posts\n        translate([-chair_width/2 + leg_size/2, -chair_depth/2 + leg_size/2, back_height/2])\n            cube([leg_size, leg_size, back_height], center=true);\n        translate([chair_width/2 - leg_size/2, -chair_depth/2 + leg_size/2, back_height/2])\n            cube([leg_size, leg_size, back_height], center=true);\n        \n        // Backrest slats\n        for(i = [1:back_slats-2]) {\n            translate([0, -chair_depth/2 + leg_size + 5, seat_height + (back_height - seat_height)/(back_slats-1)*i])\n                cube([chair_width - 2*leg_size - 4, slat_width, wall_thickness], center=true);\n        }\n        \n        // Top backrest rail\n        translate([0, -chair_depth/2 + leg_size + 10, back_height - wall_thickness/2])\n            cube([chair_width - 2*leg_size + 4, slat_width, wall_thickness], center=true);\n        \n        // Front legs\n        translate([-chair_width/2 + leg_size/2, chair_depth/2 - leg_size/2, seat_height/2])\n            cube([leg_size, leg_size, seat_height], center=true);\n        translate([chair_width/2 - leg_size/2, chair_depth/2 - leg_size/2, seat_height/2])\n            cube([leg_size, leg_size, seat_height], center=true);\n        \n        // Back legs (extend from backrest posts)\n        translate([-chair_width/2 + leg_size/2, -chair_depth/2 + leg_size/2, seat_height/2])\n            cube([leg_size, leg_size, seat_height], center=true);\n        translate([chair_width/2 - leg_size/2, -chair_depth/2 + leg_size/2, seat_height/2])\n            cube([leg_size, leg_size, seat_height], center=true);\n        \n        // Cross support - front to back\n        translate([0, 0, seat_height/4])\n            cube([wall_thickness, chair_depth - 2*leg_size - 4, wall_thickness], center=true);\n        \n        // Side supports\n        translate([-chair_width/2 + leg_size + 2, 0, seat_height/3])\n            cube([wall_thickness, chair_depth - 2*leg_size - 4, wall_thickness], center=true);\n        translate([chair_width/2 - leg_size - 2, 0, seat_height/3])\n            cube([wall_thickness, chair_depth - 2*leg_size - 4, wall_thickness], center=true);\n        \n        // Corner braces\n        for(x = [-chair_width/2 + leg_size/2, chair_width/2 - leg_size/2])\n            for(y = [-chair_depth/2 + leg_size/2, chair_depth/2 - leg_size/2])\n                translate([x, y, seat_height/4])\n                    rotate([0, 0, 45])\n                    cube([wall_thickness*1.5, wall_thickness*1.5, seat_height/2], center=true);\n        \n        // Dowel peg details\n        for(x = [-chair_width/2 + leg_size + 2, chair_width/2 - leg_size - 2])\n            for(y = [-chair_depth/2 + leg_size + 2, chair_depth/2 - leg_size - 2])\n                translate([x, y, seat_height - wall_thickness])\n                    cylinder(h=wall_thickness*2, r=wall_thickness/2, center=true);\n    }\n}\n\nconstructo_chair();",
    "renders": true
  },
  {
    "toy": "planko",
    "openscad_code": "// Planko toy furniture set - medium complexity realistic style\n// A classic stackable toy planko with pegs and holes\n\n$fn = 50;\n\n// Main dimensions\nplanko_width = 80;\nplanko_height = 12;\nplanko_depth = 40;\npeg_height = 8;\npeg_diameter = 6;\nhole_diameter = 7;\nhole_depth = 6;\nwall_thickness = 2;\n\nmodule planko_base() {\n    difference() {\n        // Main body\n        cube([planko_width, planko_depth, planko_height], center=true);\n        \n        // Rounded edges - chamfer\n        translate([0, 0, planko_height/2 - 1])\n        scale([0.95, 0.95, 1])\n        cube([planko_width - 2, planko_depth - 2, 2], center=true);\n    }\n}\n\nmodule peg(x, y) {\n    translate([x, y, planko_height/2 + peg_height/2])\n    cylinder(h = peg_height, d = peg_diameter, center=true);\n}\n\nmodule hole(x, y) {\n    translate([x, y, -planko_height/2])\n    cylinder(h = hole_depth + 1, d = hole_diameter, center=false);\n}\n\nmodule peg_pattern() {\n    // Create 2x3 grid of pegs\n    for (x = [-planko_width/3, 0, planko_width/3]) {\n        for (y = [-planko_depth/4, planko_depth/4]) {\n            peg(x, y);\n        }\n    }\n}\n\nmodule hole_pattern() {\n    // Matching hole pattern on bottom\n    for (x = [-planko_width/3, 0, planko_width/3]) {\n        for (y = [-planko_depth/4, planko_depth/4]) {\n            hole(x, y);\n        }\n    }\n}\n\nmodule side_detail() {\n    // Side grooves for grip\n    translate([planko_width/2, 0, 0])\n    rotate([0, 90, 0])\n    for (i = [-1:1]) {\n        translate([0, i * 10, 0])\n        difference() {\n            cylinder(h = 2, d = 6, center=true);\n            cylinder(h = 3, d = 4, center=true);\n        }\n    }\n}\n\nmodule planko() {\n    union() {\n        // Main body\n        planko_base();\n        \n        // Pegs on top\n        peg_pattern();\n        \n        // Side details\n        side_detail();\n        mirror([1, 0, 0]) side_detail();\n    }\n    \n    // Holes on bottom\n    difference() {\n        children();\n        hole_pattern();\n    }\n}\n\n// Create the planko\nplanko();",
    "renders": true
  },
  {
    "toy": "buildo",
    "openscad_code": "// Buildo Toy Chair - Realistic Style\n// Medium complexity 3D printable toy furniture\n\n// Overall dimensions\nchair_width = 60;\nchair_depth = 65;\nchair_height = 90;\nleg_height = 40;\nseat_thickness = 8;\nbackrest_height = 50;\n\n// Construction parameters\nwall_thickness = 2;\nleg_size = 8;\nbackrest_slats = 5;\n\n// Seat module\nmodule seat() {\n    difference() {\n        // Main seat platform\n        translate([0, 0, leg_height])\n            cube([chair_width, chair_depth, seat_thickness], center=true);\n        \n        // Underside cavity for weight reduction\n        translate([0, 0, leg_height - wall_thickness/2])\n            cube([chair_width - 2*wall_thickness, chair_depth - 2*wall_thickness, seat_thickness + wall_thickness], center=true);\n    }\n}\n\n// Leg module\nmodule leg(x_pos, y_pos) {\n    // Main leg post\n    translate([x_pos, y_pos, leg_height/2])\n        cylinder(h=leg_height, r=leg_size/2, center=true);\n    \n    // Leg brace\n    translate([x_pos, y_pos, leg_height/4])\n        cube([leg_size, leg_size, leg_height/2], center=true);\n}\n\n// Backrest module\nmodule backrest() {\n    // Backrest frame\n    difference() {\n        // Outer frame\n        translate([0, -chair_depth/2 + wall_thickness, leg_height + seat_thickness + backrest_height/2])\n            cube([chair_width, wall_thickness, backrest_height], center=true);\n        \n        // Inner cavity\n        translate([0, -chair_depth/2 + wall_thickness + wall_thickness/2, leg_height + seat_thickness + backrest_height/2])\n            cube([chair_width - 2*wall_thickness, wall_thickness + 1, backrest_height], center=true);\n    }\n    \n    // Vertical slats\n    for(i = [0:backrest_slats-1]) {\n        slat_width = (chair_width - 2*wall_thickness - (backrest_slats-1)*4) / backrest_slats;\n        x_offset = -chair_width/2 + wall_thickness + slat_width/2 + i*(slat_width + 4);\n        \n        translate([x_offset, -chair_depth/2 + wall_thickness, leg_height + seat_thickness + backrest_height/2])\n            cube([slat_width, wall_thickness, backrest_height - wall_thickness], center=true);\n    }\n    \n    // Top rail\n    translate([0, -chair_depth/2 + wall_thickness, leg_height + seat_thickness + backrest_height - wall_thickness/2])\n        cube([chair_width, wall_thickness*1.5, wall_thickness*1.5], center=true);\n}\n\n// Back support braces\nmodule back_support() {\n    // Side braces\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - wall_thickness), -chair_depth/2 + wall_thickness/2, leg_height + seat_thickness/2])\n            rotate([0, 45, 0])\n            cube([wall_thickness, wall_thickness, chair_depth/2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Legs\n    leg_pos = chair_width/2 - leg_size/2 - 5;\n    for(x = [-leg_pos, leg_pos]) {\n        for(y = [-leg_pos, leg_pos]) {\n            leg(x, y);\n        }\n    }\n    \n    // Backrest\n    backrest();\n    \n    // Support structure\n    back_support();\n    \n    // Optional armrests\n    armrest_height = 20;\n    for(side = [-1, 1]) {\n        translate([side * chair_width/2, 0, leg_height + seat_thickness + armrest_height/2])\n            cube([wall_thickness*2, chair_depth/3, armrest_height], center=true);\n    }\n}",
    "renders": true
  },
  {
    "toy": "snapbrick",
    "openscad_code": "// Realistic medium-complexity snapbrick toy chair\n// Designed for 3D printing, wall thickness = 2 mm\n\nmodule stud() {\n    cylinder(h = 1.7, r = 2.4, $fn = 16);   // LEGO-like stud\n}\n\nmodule stud_ring() {\n    difference() {\n        cylinder(h = 1.7, r = 3.2, $fn = 32);\n        cylinder(h = 1.8, r = 2.5, $fn = 32);\n    }\n}\n\nmodule snapbrick_base(w, d) {\n    // Main brick body\n    cube([w*8, d*8, 9.6], center = true);\n    \n    // Top studs\n    for (x = [-(w-1)/2:(w-1)/2])\n        for (y = [-(d-1)/2:(d-1)/2])\n            translate([x*8, y*8, 9.6/2 + 1.7/2])\n                stud();\n}\n\nmodule snapbrick_bottom(w, d) {\n    // Bottom tubes for clutch power\n    for (x = [-(w-1)/2:(w-1)/2])\n        for (y = [-(d-1)/2:(d-1)/2])\n            translate([x*8, y*8, -9.6/2 + 1.7/2])\n                rotate([180, 0, 0])\n                    stud_ring();\n}\n\nmodule chair_seat() {\n    difference() {\n        union() {\n            snapbrick_base(6, 6);\n            snapbrick_bottom(6, 6);\n        }\n        \n        // Hollow interior for material saving\n        translate([0, 0, 0])\n            cube([6*8-4, 6*8-4, 9.6-4], center = true);\n    }\n}\n\nmodule chair_back() {\n    difference() {\n        union() {\n            snapbrick_base(6, 2);\n            snapbrick_bottom(6, 2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([6*8-4, 2*8-4, 9.6-4], center = true);\n    }\n}\n\nmodule chair_backrest() {\n    // Vertical brick stack for backrest\n    for (i = [0:3]) {\n        translate([0, 0, i*9.6 + 9.6/2])\n            chair_back();\n    }\n    \n    // Top horizontal brick\n    translate([0, 8, 3*9.6 + 9.6/2])\n        rotate([0, 0, 90])\n            chair_back();\n}\n\nmodule chair_legs() {\n    // Four legs\n    for (x = [-20, 20])\n        for (y = [-20, 20]) {\n            translate([x, y, -15]) {\n                difference() {\n                    union() {\n                        // Leg brick\n                        snapbrick_base(2, 2);\n                        snapbrick_bottom(2, 2);\n                    }\n                    cube([2*8-4, 2*8-4, 9.6-4], center = true);\n                }\n            }\n            \n            // Second brick for height\n            translate([x, y, -15-9.6]) {\n                difference() {\n                    union() {\n                        snapbrick_base(2, 2);\n                        snapbrick_bottom(2, 2);\n                    }\n                    cube([2*8-4, 2*8-4, 9.6-4], center = true);\n                }\n            }\n        }\n}\n\n// Assembly\ntranslate([0, 0, 15])\n    chair_seat();\n\ntranslate([0, -32, 15+9.6*2])\n    chair_backrest();\n\nchair_legs();",
    "renders": true
  },
  {
    "toy": "buildbit",
    "openscad_code": "// Buildbit Toy Chair - Realistic Style (Medium Complexity)\n// Overall dimensions: 80mm W x 85mm D x 90mm H\n\nmodule chair_leg(x_pos, z_pos) {\n    // Single chair leg with rounded edges\n    translate([x_pos, 0, z_pos]) {\n        difference() {\n            // Main leg structure\n            minkowski() {\n                cube([8, 8, 35]);\n                sphere(1.5);\n            }\n            // Hollow center for material saving\n            translate([2, 2, 2]) {\n                cube([4, 4, 31]);\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Padded seat with rounded top\n    translate([0, 0, 35]) {\n        difference() {\n            // Main cushion\n            minkowski() {\n                cube([60, 55, 10]);\n                sphere(2);\n            }\n            // Slight indentation\n            translate([5, 5, 8]) {\n                cube([50, 45, 3]);\n            }\n        }\n    }\n}\n\nmodule backrest_support() {\n    // Backrest frame structure\n    translate([0, -25, 45]) {\n        // Left support\n        translate([-25, 0, 0]) {\n            cube([4, 4, 40]);\n        }\n        // Right support\n        translate([25, 0, 0]) {\n            cube([4, 4, 40]);\n        }\n        // Top crossbar\n        translate([0, 0, 38]) {\n            cube([58, 4, 4]);\n        }\n    }\n}\n\nmodule backrest_slats() {\n    // Vertical slats in backrest\n    for(i = [-20:10:20]) {\n        translate([i, -23, 55]) {\n            cube([6, 8, 25]);\n        }\n    }\n}\n\nmodule armrest(side) {\n    // Armrest with support\n    translate([side * 30, 0, 45]) {\n        union() {\n            // Horizontal armrest\n            cube([4, 25, 8]);\n            // Support post\n            translate([0, 10, -10]) {\n                cube([4, 4, 10]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    chair_leg(-25, 0);\n    chair_leg(25, 0);\n    chair_leg(-25, -20);\n    chair_leg(25, -20);\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Backrest assembly\n    union() {\n        backrest_support();\n        backrest_slats();\n    }\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}\n\n// Floor clearance indicator (remove before printing)\n%translate([0, 0, -1]) {\n    cube([100, 100, 0.5]);\n}",
    "renders": true
  },
  {
    "toy": "stacklet",
    "openscad_code": "// Stacklet Toy Chair - Realistic Medium Complexity\n// A classic children's stacking chair with hollow cavity for nesting\n\n// Overall dimensions (mm)\nchair_height = 65;\nchair_width = 75;\nchair_depth = 75;\nseat_thickness = 4;\nleg_height = 45;\nleg_thickness = 6;\nwall_thickness = 2;\n\n// Color definition\ncolor(\"tomato\")\n\n// Main chair assembly\ndifference() {\n    // Solid chair body\n    union() {\n        // Seat with rounded edges\n        translate([0, 0, leg_height]) {\n            rounded_cube([chair_width, chair_depth, seat_thickness], 4);\n        }\n        \n        // Backrest posts\n        for(x = [-chair_width/2 + 15, chair_width/2 - 15]) {\n            translate([x, 0, leg_height + seat_thickness]) {\n                rounded_cube([8, 4, 20], 2);\n            }\n        }\n        \n        // Backrest crossbar\n        translate([0, -chair_depth/2 + 2, leg_height + seat_thickness + 15]) {\n            rounded_cube([chair_width - 20, 4, 6], 2);\n        }\n        \n        // Legs\n        for(x = [-chair_width/2 + 10, chair_width/2 - 10])\n        for(y = [-chair_depth/2 + 10, chair_depth/2 - 10]) {\n            translate([x, y, 0]) {\n                rounded_cube([leg_thickness, leg_thickness, leg_height], 2);\n            }\n        }\n        \n        // Leg support beams\n        for(offset = [-chair_width/2 + 10, chair_width/2 - 10]) {\n            translate([offset, 0, leg_height/2]) {\n                rounded_cube([leg_thickness, chair_depth - 20, leg_thickness], 2);\n            }\n        }\n        \n        for(offset = [-chair_depth/2 + 10, chair_depth/2 - 10]) {\n            translate([0, offset, leg_height/2]) {\n                rounded_cube([chair_width - 20, leg_thickness, leg_thickness], 2);\n            }\n        }\n    }\n    \n    // Hollow cavity for stacking (with draft angle)\n    translate([0, 0, 0]) {\n        scale([0.8, 0.8, 1]) {\n            translate([0, 0, -1]) {\n                cylinder(h=chair_height + 2, r1=chair_width/2 - 15, r2=chair_width/2 - 10, $fn=32);\n            }\n        }\n    }\n    \n    // Drain hole for printing\n    translate([0, 0, 3]) {\n        cylinder(h=10, r=3, $fn=16);\n    }\n}\n\n// Cushion detail\ntranslate([0, 0, leg_height + seat_thickness]) {\n    difference() {\n        rounded_cube([chair_width - 10, chair_depth - 10, 2], 3);\n        for(i = [-1, 1])\n        for(j = [-1, 1]) {\n            translate([i * 20, j * 20, -0.1]) {\n                cube([15, 15, 2.2]);\n            }\n        }\n    }\n}\n\n// Decorative backrest slats\nmodule slat(width, height, depth) {\n    rounded_cube([width, height, depth], 1);\n}\n\nfor(i = [-1, 0, 1]) {\n    translate([i * 20, -chair_depth/2 + 6, leg_height + seat_thickness + 8]) {\n        slat(6, 3, 12);\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [0, 1])\n        for(y = [0, 1])\n        for(z = [0, 1]) {\n            translate([x * size[0] - radius, y * size[1] - radius, z * size[2] - radius]) {\n                sphere(r=radius, $fn=8);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "buildup",
    "openscad_code": "// Realistic Toy Armchair - Medium Complexity Buildup\n// Overall dimensions: 100mm wide x 95mm deep x 110mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main seating dimensions\nseat_width = 90;\nseat_depth = 85;\nseat_height = 45;\n\n// Backrest dimensions\nback_height = 65;\nback_thickness = 8;\n\n// Armrest dimensions\narm_height = 65;\narm_width = 12;\n\n// Leg dimensions\nleg_height = 40;\nleg_thickness = 8;\n\nmodule armchair() {\n    difference() {\n        union() {\n            // Main seat cushion\n            translate([0, 0, seat_height/2])\n                rounded_cube([seat_width, seat_depth, seat_height], 5);\n            \n            // Backrest\n            translate([0, -seat_depth/2 + back_thickness/2, seat_height + back_height/2])\n                rounded_cube([seat_width - 20, back_thickness, back_height], 5);\n            \n            // Left armrest\n            translate([-seat_width/2 - arm_width/2, 0, arm_height/2])\n                rounded_cube([arm_width, seat_depth - 10, arm_height], 3);\n            \n            // Right armrest\n            translate([seat_width/2 + arm_width/2, 0, arm_height/2])\n                rounded_cube([arm_width, seat_depth - 10, arm_height], 3);\n            \n            // Four legs\n            for(x = [-1, 1]) {\n                for(y = [-1, 1]) {\n                    translate([x * (seat_width/2 - leg_thickness), \n                              y * (seat_depth/2 - leg_thickness), \n                              leg_height/2])\n                        cylinder(h = leg_height, d = leg_thickness, $fn = 20);\n                }\n            }\n            \n            // Front support beam\n            translate([0, seat_depth/2 - leg_thickness/2, leg_height/2 + 2])\n                cube([seat_width - leg_thickness*2, leg_thickness, 4]);\n            \n            // Side support beams\n            translate([-seat_width/2 + leg_thickness/2, 0, leg_height/2 + 2])\n                cube([leg_thickness, seat_depth - leg_thickness*2, 4]);\n            translate([seat_width/2 - leg_thickness/2, 0, leg_height/2 + 2])\n                cube([leg_thickness, seat_depth - leg_thickness*2, 4]);\n        }\n        \n        // Hollow out seat cushion\n        translate([0, 0, seat_height/2 + 2])\n            rounded_cube([seat_width - 4, seat_depth - 4, seat_height - 2], 3);\n        \n        // Hollow out backrest\n        translate([0, -seat_depth/2 + back_thickness/2 + 2, seat_height + back_height/2])\n            rounded_cube([seat_width - 24, back_thickness - 4, back_height - 4], 3);\n        \n        // Hollow out armrests\n        translate([-seat_width/2 - arm_width/2, 0, arm_height/2])\n            rounded_cube([arm_width - 4, seat_depth - 14, arm_height - 4], 2);\n        translate([seat_width/2 + arm_width/2, 0, arm_height/2])\n            rounded_cube([arm_width - 4, seat_depth - 14, arm_height - 4], 2);\n        \n        // Hollow out legs\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (seat_width/2 - leg_thickness), \n                          y * (seat_depth/2 - leg_thickness), \n                          leg_height/2 + 2])\n                    cylinder(h = leg_height - 4, d = leg_thickness - 4, $fn = 20);\n            }\n        }\n    }\n    \n    // Add cushion details - tufted buttons\n    for(x = [-30, 0, 30]) {\n        for(y = [-25, 0, 25]) {\n            translate([x, y, seat_height + 2])\n                cylinder(h = 3, d = 6, $fn = 16);\n            translate([x, y, seat_height + 5])\n                sphere(d = 6, $fn = 16);\n        }\n    }\n    \n    // Backrest tufted buttons\n    for(x = [-30, 0, 30]) {\n        for(y = [10, 30, 50]) {\n            translate([x, -seat_depth/2 + back_thickness/2, seat_height + y])\n                cylinder(h = 3, d = 6, $fn = 16);\n            translate([x, -seat_depth/2 + back_thickness/2, seat_height + y + 3])\n                sphere(d = 6, $fn = 16);\n        }\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    x = size[0];\n    y = size[1];\n    z = size[2];\n    \n    hull() {\n        for(dx = [-1, 1]) {\n            for(dy = [-1, 1]) {\n                for(dz = [-1, 1]) {\n                    translate([dx * (x/2 - radius), \n                              dy * (y/2 - radius), \n                              dz * (z/2 - radius)])\n                        sphere(r = radius, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Render the armchair\narmchair();",
    "renders": true
  },
  {
    "toy": "cubelet",
    "openscad_code": "// OpenSCAD Cubelet Toy – Realistic Style, Medium Complexity\n// Overall size ~100 mm (approx. 4″) on edge\n\n// Basic dimensions\ncubelet_size = 100;          // main cube body\nwall_th = 2;                 // printable wall thickness\nstud_dia = 8;\nstud_h = 4.5;\nstud_pitch = 8;              // spacing for 5×5 studs on each face\nstud_clear = 1;              // clearance between stud and socket\nsocket_dia = stud_dia + stud_clear;\nsocket_h = 3;\n\n// Helper module: single stud\nmodule stud() {\n    cylinder(h = stud_h, d = stud_dia, $fn = 20);\n}\n\n// Helper module: single socket (negative)\nmodule socket() {\n    cylinder(h = socket_h + 0.2, d = socket_dia, $fn = 20);\n}\n\n// Helper module: 5×5 pattern on one face\nmodule stud_pattern() {\n    for (i = [-2:2])\n        for (j = [-2:2])\n            translate([i * stud_pitch, j * stud_pitch, 0])\n                stud();\n}\n\n// Helper module: 5×5 socket pattern (negative)\nmodule socket_pattern() {\n    for (i = [-2:2])\n        for (j = [-2:2])\n            translate([i * stud_pitch, j * stud_pitch, 0])\n                socket();\n}\n\n// Main cube body with thickened walls\nmodule cube_body() {\n    difference() {\n        // outer cube\n        cube([cubelet_size, cubelet_size, cubelet_size], center = true);\n        // hollow interior\n        cube([cubelet_size - 2*wall_th,\n              cubelet_size - 2*wall_th,\n              cubelet_size - 2*wall_th], center = true);\n    }\n}\n\n// Assemble one face: studs on outer side, sockets on inner side\nmodule face_with_studs_and_sockets(axis, angle) {\n    rotate(angle, axis)\n    translate([0, 0, cubelet_size/2 - wall_th/2])\n    difference() {\n        union() {\n            // outer plate (thin wall)\n            cube([cubelet_size, cubelet_size, wall_th], center = true);\n            // studs protrude\n            translate([0, 0, wall_th/2])\n                stud_pattern();\n        }\n        // sockets on inner surface (recessed)\n        translate([0, 0, -wall_th/2 - socket_h/2])\n            socket_pattern();\n    }\n}\n\n// Main assembly\nunion() {\n    // central body\n    cube_body();\n\n    // each face gets studs + sockets\n    face_with_studs_and_sockets([1,0,0], 0);\n    face_with_studs_and_sockets([1,0,0], 180);\n    face_with_studs_and_sockets([0,1,0], 90);\n    face_with_studs_and_sockets([0,1,0], -90);\n    face_with_studs_and_sockets([0,0,1], [90,0,0]);\n    face_with_studs_and_sockets([0,0,1], [-90,0,0]);\n}\n\n// Optional: add a small brand mark on one face\ntranslate([0, 0, cubelet_size/2 + stud_h + 0.5])\n    rotate([180,0,0])\n    linear_extrude(height = 1)\n    text(\"C\", size = 12, halign = \"center\", valign = \"center\");",
    "renders": true
  },
  {
    "toy": "linklet",
    "openscad_code": "// Realistic Toy Linklet Chair\n// Medium complexity, 3D printable design\n\nmodule chair_frame() {\n    // Main seat frame - hollow box construction\n    difference() {\n        // Outer frame\n        cube([45, 45, 4], center=true);\n        \n        // Inner cutout for weight reduction\n        translate([0, 0, -1])\n            cube([41, 41, 6], center=true);\n    }\n}\n\nmodule chair_back() {\n    // Backrest assembly\n    translate([0, -22, 17]) {\n        // Main back panel\n        difference() {\n            cube([45, 4, 34], center=true);\n            // Cutouts for toy aesthetic\n            for(i = [-15, -5, 5, 15]) {\n                translate([i, 0, 5])\n                    cylinder(h=5, d=8, center=true);\n            }\n        }\n        \n        // Top rail\n        translate([0, 0, 19])\n            cube([47, 6, 4], center=true);\n    }\n}\n\nmodule chair_legs() {\n    // Four legs with stretchers\n    for(x = [-18, 18])\n        for(y = [-18, 18]) {\n            // Main leg\n            translate([x, y, -20]) {\n                difference() {\n                    cylinder(h=40, d=6, center=false);\n                    translate([0, 0, 2])\n                        cylinder(h=36, d=3, center=false);\n                }\n                \n                // Foot detail\n                translate([0, 0, -1])\n                    sphere(d=8);\n            }\n            \n            // Lower stretchers\n            if(y == -18) {\n                translate([x, -y/2, -35])\n                    rotate([0, 90, 0])\n                        difference() {\n                            cylinder(h=36, d=4, center=true);\n                            cylinder(h=36, d=2, center=true);\n                        }\n            }\n            \n            // Side stretchers\n            if(x == -18) {\n                translate([-x/2, y, -35])\n                    rotate([90, 0, 0])\n                        difference() {\n                            cylinder(h=36, d=4, center=true);\n                            cylinder(h=36, d=2, center=true);\n                        }\n            }\n        }\n}\n\nmodule chair_seat() {\n    // Cushion detail on seat\n    translate([0, 0, 4])\n        difference() {\n            // Main cushion\n            cube([43, 43, 6], center=true);\n            \n            // Tapered sides\n            for(dx = [-1, 1])\n                for(dy = [-1, 1])\n                    translate([dx*20.5, dy*20.5, -3])\n                        cube([3, 3, 12], center=true);\n            \n            // Top surface rounding\n            translate([0, 0, 3])\n                cube([41, 41, 4], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Frame structure\n    chair_frame();\n    \n    // Seat cushion\n    chair_seat();\n    \n    // Backrest\n    chair_back();\n    \n    // Leg assembly\n    chair_legs();\n    \n    // Decorative back splat\n    translate([0, -20, 12])\n        for(i = [-12, -4, 4, 12])\n            translate([i, 0, 0])\n                cube([3, 2, 20], center=true);\n}",
    "renders": true
  },
  {
    "toy": "lockbrick",
    "openscad_code": "// Realistic lockbrick toy furniture - medium complexity\n// A stackable toy chair with classic lockbrick studs and anti-stud base\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main dimensions\nchair_width = 40;\nchair_depth = 40;\nchair_height = 60;\nseat_thickness = 6;\nback_height = 35;\nleg_height = 20;\n\n// Lockbrick standard dimensions\nstud_diameter = 5;\nstud_height = 1.7;\nstud_spacing = 8;\nwall_thickness = 2;\n\nmodule lockbrick_stud() {\n    // Classic cylindrical stud with slight taper\n    cylinder(h = stud_height, d1 = stud_diameter, d2 = stud_diameter * 0.9);\n}\n\nmodule anti_stud_cavity(depth = 3) {\n    // Hollow cylinder for connecting to other bricks\n    difference() {\n        cube([stud_spacing - 0.2, stud_spacing - 0.2, depth], center = true);\n        cylinder(h = depth + 0.1, d = stud_diameter + 0.2, $fn = 16);\n    }\n}\n\nmodule chair_seat() {\n    // Main seat platform with studs on top\n    difference() {\n        // Solid seat base\n        cube([chair_width, chair_depth, seat_thickness]);\n        \n        // Rounded edges for realistic look\n        translate([wall_thickness, wall_thickness, -0.1])\n            cube([chair_width - 2*wall_thickness, chair_depth - 2*wall_thickness, seat_thickness + 0.2]);\n    }\n    \n    // Add studs on top surface\n    for (x = [-1, 0, 1, 2]) {\n        for (y = [-1, 0, 1, 2]) {\n            translate([x * stud_spacing + chair_width/2 - stud_spacing/2, \n                      y * stud_spacing + chair_depth/2 - stud_spacing/2, \n                      seat_thickness])\n                lockbrick_stud();\n        }\n    }\n}\n\nmodule chair_back() {\n    // Backrest with realistic proportions\n    difference() {\n        // Main backrest panel\n        translate([-wall_thickness/2, -wall_thickness/2, 0])\n            cube([chair_width + wall_thickness, wall_thickness, back_height]);\n        \n        // Cutouts for toy aesthetic\n        for (i = [0:2]) {\n            translate([i * 10 + 10, -wall_thickness/2 - 0.1, 10])\n                cube([6, wall_thickness + 0.2, 15]);\n        }\n    }\n    \n    // Add horizontal support bar\n    translate([0, -wall_thickness/2 - 1, back_height/2])\n        cube([chair_width, 2, 3]);\n}\n\nmodule chair_leg(pos_x, pos_y) {\n    // Hollow leg with anti-stud base\n    difference() {\n        // Main leg structure\n        translate([pos_x, pos_y, -leg_height/2])\n            cube([6, 6, leg_height]);\n        \n        // Hollow interior for weight reduction\n        translate([pos_x, pos_y, -leg_height/2])\n            cube([3, 3, leg_height - 2]);\n        \n        // Anti-stud cavity at bottom\n        translate([pos_x, pos_y, -leg_height + 1])\n            rotate([90, 0, 0])\n                anti_stud_cavity(3);\n    }\n}\n\nmodule chair_assembly() {\n    union() {\n        // Main seat\n        chair_seat();\n        \n        // Backrest attached to rear\n        translate([0, chair_depth/2 - wall_thickness, seat_thickness])\n            chair_back();\n        \n        // Four legs\n        leg_offset = 5;\n        chair_leg(chair_width/2 - leg_offset, chair_depth/2 - leg_offset);\n        chair_leg(-chair_width/2 + leg_offset, chair_depth/2 - leg_offset);\n        chair_leg(chair_width/2 - leg_offset, -chair_depth/2 + leg_offset);\n        chair_leg(-chair_width/2 + leg_offset, -chair_depth/2 + leg_offset);\n        \n        // Cross-bracing between legs\n        translate([0, chair_depth/2 - leg_offset - 3, -leg_height/2 + 5])\n            cube([chair_width - 2*leg_offset, 2, 3]);\n        translate([chair_width/2 - leg_offset - 3, 0, -leg_height/2 + 5])\n            rotate([0, 0, 90])\n                cube([chair_depth - 2*leg_offset, 2, 3]);\n    }\n}\n\n// Render the complete chair\nchair_assembly();",
    "renders": true
  },
  {
    "toy": "snaplet",
    "openscad_code": "// Toy Snaplet Chair (Medium complexity, realistic style)\n// Dimensions: ~80mm tall overall\n\n// Parameters\nseat_w = 40;\nseat_d = 40;\nseat_h = 4;\nleg_len = 40;\nleg_w = 6;\nback_h = 35;\nback_w = 38;\nback_t = 3;\narm_w = 5;\narm_h = 20;\narm_len = 25;\nrail_h = 8;\n\n// Main seat platform\nmodule seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, leg_len + seat_h/2])\n            cube([seat_w, seat_d, seat_h], center=true);\n        \n        // Rounded underside hollow\n        translate([0, 0, leg_len + seat_h - 0.5])\n            scale([1, 1, 0.3])\n                sphere(d=seat_w - 4, $fn=32);\n    }\n}\n\n// Single leg with rounded foot\nmodule leg(x, y) {\n    translate([x, y, leg_len/2])\n        cylinder(h=leg_len, d=leg_w, $fn=16);\n    \n    // Rounded foot\n    translate([x, y, 0])\n        sphere(d=leg_w + 1, $fn=16);\n}\n\n// Backrest with vertical slats\nmodule backrest() {\n    union() {\n        // Main back frame\n        translate([0, -seat_d/2 - back_t/2, leg_len + seat_h + back_h/2])\n            cube([back_w, back_t, back_h], center=true);\n        \n        // Top rail\n        translate([0, -seat_d/2 - back_t/2, leg_len + seat_h + back_h - rail_h/2])\n            cube([back_w, back_t + 2, rail_h], center=true);\n        \n        // Vertical slats\n        for (i=[-1:1]) {\n            translate([i * (back_w/3), -seat_d/2 - back_t/2 - 0.5, leg_len + seat_h + rail_h/2 + 2])\n                cube([back_w/6, back_t + 2, back_h - rail_h - 2], center=true);\n        }\n    }\n}\n\n// Armrest\nmodule armrest(side) {\n    translate([side * (seat_w/2 + arm_w/2), 0, leg_len + seat_h + arm_h/2])\n        cube([arm_w, arm_len, arm_h], center=true);\n    \n    // Arm support post\n    translate([side * (seat_w/2 + arm_w/2), seat_d/2 - arm_len/2, leg_len + seat_h/2])\n        cube([arm_w, arm_w, seat_h], center=true);\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Four legs\n    leg(seat_w/2 - leg_w/2, seat_d/2 - leg_w/2);\n    leg(-seat_w/2 + leg_w/2, seat_d/2 - leg_w/2);\n    leg(seat_w/2 - leg_w/2, -seat_d/2 + leg_w/2);\n    leg(-seat_w/2 + leg_w/2, -seat_d/2 + leg_w/2);\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Reinforcement rails\n    translate([0, seat_d/2 - leg_w/2, leg_len/2])\n        cube([seat_w - leg_w, leg_w, leg_w], center=true);\n    \n    translate([0, -seat_d/2 + leg_w/2, leg_len/2])\n        cube([seat_w - leg_w, leg_w, leg_w], center=true);\n    \n    translate([seat_w/2 - leg_w/2, 0, leg_len/2])\n        cube([leg_w, seat_d - leg_w, leg_w], center=true);\n    \n    translate([-seat_w/2 + leg_w/2, 0, leg_len/2])\n        cube([leg_w, seat_d - leg_w, leg_w], center=true);\n}",
    "renders": true
  },
  {
    "toy": "buildix",
    "openscad_code": "// Buildix Toy Chair (Medium Complexity - Realistic Style)\n// Dimensions: 80mm wide x 85mm deep x 100mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main seat module\nmodule seat() {\n    difference() {\n        // Seat base\n        translate([0, 0, 40])\n            cube([80, 85, 4], center=true);\n        \n        // Seat cushion contour\n        translate([0, 0, 42])\n            cube([76, 81, 2], center=true);\n    }\n}\n\n// Backrest module with slats\nmodule backrest() {\n    // Backrest frame\n    difference() {\n        // Outer frame\n        translate([0, 32, 90])\n            cube([76, 4, 50], center=true);\n        \n        // Inner cutout\n        translate([0, 32, 90])\n            cube([72, 5, 46], center=true);\n    }\n    \n    // Vertical slats\n    for (x = [-24, -12, 0, 12, 24]) {\n        translate([x, 32, 90])\n            cube([6, 4, 46], center=true);\n    }\n    \n    // Top rail\n    translate([0, 32, 114])\n        cube([80, 4, 4], center=true);\n}\n\n// Leg module with stretchers\nmodule legs() {\n    // Front left leg\n    translate([-36, -36, 20])\n        cylinder(h=40, d=8, center=true);\n    \n    // Front right leg\n    translate([36, -36, 20])\n        cylinder(h=40, d=8, center=true);\n    \n    // Back left leg\n    translate([-36, 36, 20])\n        cylinder(h=40, d=8, center=true);\n    \n    // Back right leg\n    translate([36, 36, 20])\n        cylinder(h=40, d=8, center=true);\n    \n    // Side stretchers\n    translate([0, -36, 20])\n        cube([80, 4, 4], center=true);\n    translate([0, 36, 20])\n        cube([80, 4, 4], center=true);\n    \n    // Front/back stretchers\n    translate([-36, 0, 20])\n        cube([4, 76, 4], center=true);\n    translate([36, 0, 20])\n        cube([4, 76, 4], center=true);\n}\n\n// Cushion detail\nmodule cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, 44])\n            cube([74, 79, 8], center=true);\n        \n        // Cushion top contour\n        translate([0, 0, 50])\n            cube([70, 75, 2], center=true);\n    }\n    \n    // Tufting buttons\n    for (x = [-20, 0, 20]) {\n        for (y = [-20, 0, 20]) {\n            translate([x, y, 50.5])\n                cylinder(h=1, d=4, center=true);\n        }\n    }\n}\n\n// Backrest cushion\nmodule back_cushion() {\n    difference() {\n        // Main back cushion\n        translate([0, 30, 90])\n            cube([70, 4, 40], center=true);\n        \n        // Curved top\n        translate([0, 30, 110])\n            sphere(d=70, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    legs();\n    cushion();\n    back_cushion();\n}",
    "renders": true
  },
  {
    "toy": "planklet",
    "openscad_code": "// Toy Planklet - Realistic Medium Complexity\n// Dimensions: 120mm x 80mm x 40mm (L x W x H)\n\n// Parameters\n$fn = 32;\nplank_width = 80;\nplank_length = 120;\nplank_thickness = 8;\nleg_height = 32;\nleg_diameter = 12;\njoint_radius = 6;\njoint_depth = 3;\n\n// Main plank body with rounded edges\nmodule plank_body() {\n    // Main rectangular plank\n    difference() {\n        union() {\n            // Central plank\n            cube([plank_length, plank_width, plank_thickness], center=true);\n            \n            // Rounded edges along length\n            for(i = [-1, 1]) {\n                translate([0, i*(plank_width/2 - plank_thickness/2), 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=plank_length, r=plank_thickness/2, center=true);\n            }\n            \n            // Rounded edges along width\n            for(i = [-1, 1]) {\n                translate([i*(plank_length/2 - plank_thickness/2), 0, 0])\n                    cylinder(h=plank_width, r=plank_thickness/2, center=true);\n            }\n        }\n        \n        // Corner rounding cuts\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*(plank_length/2 - plank_thickness/2), \n                          y*(plank_width/2 - plank_thickness/2), \n                          0])\n                    sphere(r=plank_thickness/2);\n            }\n        }\n    }\n}\n\n// Toy connecting peg\nmodule connector_peg() {\n    // Main peg cylinder\n    cylinder(h=joint_depth*2, r=joint_radius, center=true);\n    \n    // Tapered top\n    translate([0, 0, joint_depth])\n        cylinder(h=joint_depth/2, r1=joint_radius, r2=joint_radius*0.7);\n    \n    // Collar detail\n    translate([0, 0, -joint_depth/2])\n        cylinder(h=joint_depth/4, r=joint_radius*1.2);\n}\n\n// Toy connecting hole\nmodule connector_hole() {\n    // Main hole\n    cylinder(h=joint_depth*2.5, r=joint_radius*1.1, center=true);\n    \n    // Chamfer entry\n    translate([0, 0, joint_depth*1.25])\n        cylinder(h=joint_depth/2, r1=joint_radius*1.1, r2=joint_radius*1.3);\n}\n\n// Structural reinforcement ribs\nmodule reinforcement_ribs() {\n    // Longitudinal ribs\n    for(i = [-0.3, 0, 0.3]) {\n        translate([0, i*plank_width/2, -plank_thickness/2 - 2])\n            cube([plank_length*0.8, 4, 4], center=true);\n    }\n    \n    // Transverse ribs\n    for(i = [-0.4, 0, 0.4]) {\n        translate([i*plank_length/2, 0, -plank_thickness/2 - 2])\n            cube([4, plank_width*0.8, 4], center=true);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    for(x = [-0.75, 0.75]) {\n        for(y = [-0.75, 0.75]) {\n            translate([x*plank_length/2, y*plank_width/2, -leg_height/2 - plank_thickness/2])\n                cylinder(h=leg_height, r=leg_diameter/2);\n                \n            // Leg base pad\n            translate([x*plank_length/2, y*plank_width/2, -leg_height - plank_thickness/2])\n                cylinder(h=2, r=leg_diameter/2 + 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main plank\n    plank_body();\n    \n    // Structural reinforcement\n    reinforcement_ribs();\n    \n    // Support legs\n    support_legs();\n    \n    // Top connectors (pegs)\n    for(x = [-0.5, 0.5]) {\n        for(y = [-0.5, 0.5]) {\n            translate([x*plank_length/2.5, y*plank_width/2.5, plank_thickness/2 + joint_depth/2])\n                connector_peg();\n        }\n    }\n}\n\n// Bottom connector holes\ndifference() {\n    // Nothing to add here - holes are subtracted\n    \n    // Cut holes for stacking\n    for(x = [-0.5, 0.5]) {\n        for(y = [-0.5, 0.5]) {\n            translate([x*plank_length/2.5, y*plank_width/2.5, -plank_thickness/2 - joint_depth/2])\n                connector_hole();\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "bricklet",
    "openscad_code": "// Realistic Toy Bricklet (Medium Complexity)\n// A small furniture bricklet with drawer, legs, and realistic proportions\n\n// Overall dimensions (mm)\nbricklet_w = 40;\nbricklet_d = 30;\nbricklet_h = 35;\n\n// Wall thickness\nwall = 2;\n\n// Leg dimensions\nleg_w = 3;\nleg_h = 15;\nleg_taper = 0.8;\n\n// Drawer dimensions\ndrawer_w = bricklet_w - 2*wall - 4;\ndrawer_h = bricklet_h/2 - wall - 2;\ndrawer_d = bricklet_d - wall - 2;\n\n// Handle dimensions\nhandle_w = 12;\nhandle_h = 4;\nhandle_d = 3;\n\n// Rounding radius\nround_r = 2;\n\nmodule rounded_cube(size, r) {\n    translate([r,r,0]) cube([size.x-2*r, size.y-2*r, size.z]);\n    translate([r,r,size.z-r]) sphere(r=r);\n    translate([r,size.y-r,size.z-r]) sphere(r=r);\n    translate([size.x-r,size.y-r,size.z-r]) sphere(r=r);\n    translate([size.x-r,r,size.z-r]) sphere(r=r);\n    translate([r,r,r]) sphere(r=r);\n    translate([r,size.y-r,r]) sphere(r=r);\n    translate([size.x-r,size.y-r,r]) sphere(r=r);\n    translate([size.x-r,r,r]) sphere(r=r);\n    \n    hull() {\n        translate([r,0,0]) cube([size.x-2*r, size.y, size.z]);\n        translate([0,r,0]) cube([size.x, size.y-2*r, size.z]);\n    }\n}\n\nmodule leg() {\n    linear_extrude(height=leg_h, scale=[leg_taper, leg_taper], center=false)\n        square([leg_w, leg_w], center=true);\n}\n\nmodule drawer() {\n    difference() {\n        // Drawer body\n        rounded_cube([drawer_w, drawer_d, drawer_h], round_r);\n        \n        // Hollow inside\n        translate([wall, wall, 0])\n            rounded_cube([drawer_w-2*wall, drawer_d-wall, drawer_h-wall], round_r-1);\n        \n        // Handle hole\n        translate([drawer_w/2, drawer_d+0.1, drawer_h/2-handle_h/2])\n            cube([handle_w, handle_d, handle_h]);\n    }\n    \n    // Handle\n    translate([drawer_w/2, drawer_d+handle_d/2, drawer_h/2])\n        rotate([90,0,0])\n            cylinder(h=handle_w, r=handle_d/2, center=true);\n}\n\nmodule bricklet() {\n    difference() {\n        // Main body\n        rounded_cube([bricklet_w, bricklet_d, bricklet_h], round_r);\n        \n        // Hollow inside for drawer\n        translate([wall, wall, wall])\n            rounded_cube([bricklet_w-2*wall, bricklet_d-wall, bricklet_h-wall], round_r-1);\n    }\n    \n    // Top surface detail - slight lip\n    translate([0,0,bricklet_h-2])\n        rounded_cube([bricklet_w, bricklet_d, 2], round_r);\n    \n    // Legs\n    for(x = [leg_w, bricklet_w-leg_w])\n        for(y = [leg_w, bricklet_d-leg_w])\n            translate([x, y, 0])\n                leg();\n    \n    // Drawer in place\n    translate([wall+2, wall+1, wall+1])\n        drawer();\n    \n    // Side panel details\n    for(side = [0, 1]) {\n        mirror([side,0,0])\n            translate([0, bricklet_d/2, bricklet_h/2])\n                rotate([0,90,0])\n                    cylinder(h=1, r=round_r);\n    }\n}\n\n// Render the bricklet\nbricklet();",
    "renders": true
  },
  {
    "toy": "buildon",
    "openscad_code": "// Toy Chair - Realistic Style (OpenSCAD)\n\n// Basic dimensions in mm\nchair_width = 100;\nchair_depth = 110;\nchair_height = 120;\nleg_height = 60;\nleg_size = 10;\nseat_thickness = 8;\nbackrest_height = 60;\narmrest_height = 70;\narmrest_width = 8;\narmrest_length = 50;\n\n// Wall thickness for 3D print\nwall = 2;\n\n// Main module\nmodule toy_chair() {\n    union() {\n        // Seat base\n        translate([0, 0, leg_height])\n            seat_base();\n        \n        // Backrest\n        translate([0, -chair_depth/2 + wall, leg_height + seat_thickness])\n            backrest();\n        \n        // Armrests\n        armrests();\n        \n        // Legs\n        legs();\n        \n        // Center support rod\n        center_support();\n        \n        // Decorative slats on backrest\n        backrest_slats();\n    }\n}\n\n// Seat with rounded edges\nmodule seat_base() {\n    difference() {\n        // Main seat\n        cube([chair_width, chair_depth, seat_thickness], center=true);\n        \n        // Hollow out seat\n        translate([0, 0, -wall/2])\n            cube([chair_width - 2*wall, chair_depth - 2*wall, seat_thickness + 1], center=true);\n        \n        // Rounding edges\n        translate([0, chair_depth/2 - seat_thickness/2, seat_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=chair_width, r=seat_thickness/2, center=true);\n        \n        translate([0, -chair_depth/2 + seat_thickness/2, seat_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=chair_width, r=seat_thickness/2, center=true);\n    }\n}\n\n// Backrest with rounded top\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, 0, backrest_height/2])\n            cube([chair_width - 20, wall, backrest_height], center=true);\n        \n        // Hollow out backrest\n        translate([0, 0, backrest_height/2])\n            cube([chair_width - 20 - 2*wall, wall + 1, backrest_height - 2*wall], center=true);\n        \n        // Rounded top\n        translate([0, 0, backrest_height])\n            rotate([90, 0, 0])\n                cylinder(h=chair_width - 20, r=wall/2, center=true);\n    }\n}\n\n// Four legs\nmodule legs() {\n    for(x = [-chair_width/2 + leg_size, chair_width/2 - leg_size])\n        for(y = [-chair_depth/2 + leg_size, chair_depth/2 - leg_size])\n            translate([x, y, leg_height/2])\n                cylinder(h=leg_height, r=leg_size/2, center=true);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 - armrest_width/2, 0, leg_height + armrest_height/2])\n        cube([armrest_width, armrest_length, armrest_height], center=true);\n    \n    // Right armrest\n    translate([chair_width/2 + armrest_width/2, 0, leg_height + armrest_height/2])\n        cube([armrest_width, armrest_length, armrest_height], center=true);\n    \n    // Armrest supports\n    translate([-chair_width/2 - armrest_width/2, armrest_length/2 - 5, leg_height/2 + 20])\n        cube([armrest_width, wall, leg_height - 20], center=true);\n    \n    translate([chair_width/2 + armrest_width/2, armrest_length/2 - 5, leg_height/2 + 20])\n        cube([armrest_width, wall, leg_height - 20], center=true);\n}\n\n// Center support between legs\nmodule center_support() {\n    translate([0, 0, leg_height/2 - 5])\n        rotate([90, 0, 0])\n            cylinder(h=chair_depth - 2*leg_size, r=leg_size/3, center=true);\n}\n\n// Decorative slats on backrest\nmodule backrest_slats() {\n    slat_width = 6;\n    slat_spacing = 12;\n    num_slats = floor((chair_width - 20 - 2*wall) / slat_spacing);\n    \n    for(i = [0:num_slats-1]) {\n        translate([-chair_width/2 + 10 + wall + slat_spacing/2 + i*slat_spacing, \n                   -chair_depth/2 + wall, \n                   leg_height + seat_thickness + wall + backrest_height/2])\n            cube([slat_width, wall, backrest_height - 2*wall], center=true);\n    }\n}\n\n// Generate the chair\ntoy_chair();",
    "renders": true
  },
  {
    "toy": "stackix",
    "openscad_code": "// Realistic Stackix Toy Chair - Medium Complexity\n// Overall dimensions: 80mm wide x 90mm deep x 100mm tall\n\n// Parameters\nseat_height = 45;\nseat_width = 60;\nseat_depth = 55;\nback_height = 55;\nleg_height = 45;\nleg_size = 8;\nback_bar_width = 6;\nback_bar_spacing = 12;\n\n// Main chair module\nmodule stackix_chair() {\n    // Chair legs\n    for (x = [-1, 1])\n        for (z = [-1, 1])\n            translate([x * (seat_width/2 - leg_size/2), -leg_size/2, z * (seat_depth/2 - leg_size/2)])\n                cylinder(h = leg_height, r = leg_size/2, $fn = 16);\n    \n    // Seat platform\n    translate([0, leg_height, 0])\n        cube([seat_width, seat_depth, 8], center = true);\n    \n    // Seat cushion\n    translate([0, leg_height + 4, 0])\n        cube([seat_width - 4, seat_depth - 4, 6], center = true);\n    \n    // Back support posts\n    for (x = [-1, 1])\n        translate([x * (seat_width/2 - 6), leg_height + 8 + back_height/2, 0])\n            cube([6, 12, back_height], center = true);\n    \n    // Back horizontal bars\n    for (y = [1:3]) {\n        translate([0, leg_height + 8 + y * back_bar_spacing, 0])\n            cube([seat_width - 8, back_bar_width, 6], center = true);\n    }\n    \n    // Armrest supports\n    for (x = [-1, 1])\n        translate([x * (seat_width/2 - 4), leg_height + 20, -seat_depth/2 + 8])\n            cube([6, 30, 6], center = true);\n    \n    // Armrests\n    for (x = [-1, 1])\n        translate([x * (seat_width/2 - 4), leg_height + 35, -seat_depth/2 + 15])\n            cube([6, 6, 30], center = true);\n    \n    // Decorative back panel\n    translate([0, leg_height + 8 + back_height/2, 0])\n        difference() {\n            cube([seat_width - 20, 4, back_height - 10], center = true);\n            for (i = [-2:2])\n                for (j = [-1:1])\n                    translate([i * 8, 0, j * 8])\n                        sphere(r = 3, $fn = 16);\n        }\n    \n    // Front support bar\n    translate([0, leg_height/2, -seat_depth/2 + leg_size/2])\n        cube([seat_width - 20, leg_height, 6], center = true);\n    \n    // Side support bars\n    for (x = [-1, 1])\n        translate([x * (seat_width/2 - leg_size/2), leg_height/2, 0])\n            rotate([90, 0, 90])\n                cylinder(h = seat_depth - leg_size, r = 3, $fn = 16);\n}\n\n// Render the chair\nstackix_chair();",
    "renders": true
  },
  {
    "toy": "snapix",
    "openscad_code": "// Snapix toy armchair\n// Overall size: ~100 mm wide × 95 mm deep × 85 mm tall\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall thickness\nwall = 2;\n\n// Main body module\nmodule armchair() {\n    // Seat frame\n    translate([0, 20, 35])\n        cube([60, 50, wall], center = true);\n\n    // Seat cushion\n    translate([0, 20, 40])\n        cube([55, 45, 10], center = true);\n\n    // Backrest frame\n    translate([0, -5, 65])\n        cube([60, wall, 50], center = true);\n\n    // Backrest cushion\n    translate([0, -5, 67])\n        cube([55, 8, 45], center = true);\n\n    // Left armrest\n    translate([-30, 0, 50])\n        cube([wall, 40, 30], center = true);\n\n    // Right armrest\n    translate([30, 0, 50])\n        cube([wall, 40, 30], center = true);\n\n    // Front left leg\n    translate([-25, 40, 17.5])\n        cube([8, 8, 35], center = true);\n\n    // Front right leg\n    translate([25, 40, 17.5])\n        cube([8, 8, 35], center = true);\n\n    // Back left leg\n    translate([-25, -20, 17.5])\n        cube([8, 8, 35], center = true);\n\n    // Back right leg\n    translate([25, -20, 17.5])\n        cube([8, 8, 35], center = true);\n\n    // Cross support front\n    translate([0, 35, 2])\n        cube([50, wall, 4], center = true);\n\n    // Cross support back\n    translate([0, -15, 2])\n        cube([50, wall, 4], center = true);\n\n    // Side support left\n    translate([-25, 10, 2])\n        cube([wall, 50, 4], center = true);\n\n    // Side support right\n    translate([25, 10, 2])\n        cube([wall, 50, 4], center = true);\n\n    // Armrest top left\n    translate([-30, 0, 65])\n        cube([10, 40, wall], center = true);\n\n    // Armrest top right\n    translate([30, 0, 65])\n        cube([10, 40, wall], center = true);\n\n    // Decorative buttons on seat cushion\n    for (x = [-20, 0, 20])\n        for (y = [5, 20, 35]) {\n            translate([x, y, 46])\n                cylinder(h = 2, r = 2, $fn = 16);\n        }\n\n    // Decorative buttons on backrest\n    for (x = [-20, 0, 20])\n        for (z = [50, 62, 74]) {\n            translate([x, -5, z])\n                cylinder(h = 2, r = 2, $fn = 16);\n        }\n}\n\n// Render the toy\narmchair();",
    "renders": true
  },
  {
    "toy": "blocklet",
    "openscad_code": "// Realistic Blocklet Toy Chair\n// Total height: 100mm, suitable for 3D printing\n\n// Parameters\n$fn = 100;\nwall_thickness = 2;\nseat_size = 40;\nseat_thickness = 6;\nback_height = 60;\nleg_height = 45;\nleg_width = 4;\n\n// Main chair module\nmodule chair() {\n    union() {\n        // Seat with rounded edges\n        translate([0, 0, leg_height]) {\n            rounded_cube([seat_size, seat_size, seat_thickness], 4);\n        }\n        \n        // Backrest\n        translate([0, -seat_size/2 + wall_thickness, leg_height + seat_thickness]) {\n            backrest();\n        }\n        \n        // Four legs with rounded feet\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (seat_size/2 - leg_width), \n                          y * (seat_size/2 - leg_width), 0]) {\n                    leg();\n                }\n            }\n        }\n        \n        // Support beams between legs\n        support_beams();\n    }\n}\n\n// Rounded cube helper function\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [radius, size[0] - radius]) {\n            for (y = [radius, size[1] - radius]) {\n                for (z = [radius, size[2] - radius]) {\n                    translate([x, y, z]) sphere(r = radius);\n                }\n            }\n        }\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    difference() {\n        // Main backrest frame\n        rounded_cube([seat_size, wall_thickness, back_height], 3);\n        \n        // Slat cutouts\n        slats_cutout();\n    }\n    \n    // Backrest top rail\n    translate([0, 0, back_height - wall_thickness]) {\n        rounded_cube([seat_size, wall_thickness + 2, wall_thickness], 2);\n    }\n}\n\n// Create slat pattern in backrest\nmodule slats_cutout() {\n    for (i = [1:3]) {\n        translate([i * seat_size/4 - seat_size/2, -1, wall_thickness*2]) {\n            cube([wall_thickness*2, wall_thickness + 2, back_height - wall_thickness*3]);\n        }\n    }\n}\n\n// Chair leg with rounded foot\nmodule leg() {\n    union() {\n        // Main leg post\n        cylinder(h = leg_height, d = leg_width*2, center = false);\n        \n        // Rounded foot\n        translate([0, 0, -2]) {\n            sphere(d = leg_width*2.5);\n        }\n    }\n}\n\n// Support beams between legs\nmodule support_beams() {\n    // Front beam\n    translate([0, -seat_size/2 + wall_thickness, leg_height/2]) {\n        rounded_cube([seat_size - leg_width*2, wall_thickness, wall_thickness], 2);\n    }\n    \n    // Side beams\n    rotate([0, 0, 90]) {\n        translate([0, -seat_size/2 + leg_width, leg_height/2]) {\n            rounded_cube([seat_size - leg_width*2, wall_thickness, wall_thickness], 2);\n        }\n    }\n    \n    rotate([0, 0, 90]) {\n        translate([0, seat_size/2 - leg_width, leg_height/2]) {\n            rounded_cube([seat_size - leg_width*2, wall_thickness, wall_thickness], 2);\n        }\n    }\n}\n\n// Generate the chair\nchair();",
    "renders": true
  },
  {
    "toy": "buildz",
    "openscad_code": "// Buildz Toy Chair - Realistic Style\n// Overall size: 100mm wide x 95mm deep x 120mm tall\n\n// Chair parameters\nchair_width = 100;\nchair_depth = 95;\nchair_height = 120;\nleg_height = 60;\nseat_thickness = 8;\nbackrest_height = 60;\nbackrest_thickness = 8;\narmrest_height = 75;\narmrest_width = 15;\nslat_width = 8;\nslat_gap = 4;\n\n// Chair legs module\nmodule chair_leg() {\n    // Main leg post\n    difference() {\n        cylinder(h=leg_height, d=12, $fn=16);\n        // Taper inner\n        cylinder(h=leg_height-2, d=10, $fn=16);\n    }\n    \n    // Foot detail\n    translate([0, 0, -2])\n    cylinder(h=4, d1=14, d2=12, $fn=16);\n}\n\n// Backrest slat module\nmodule back_slat(height) {\n    cube([chair_width - 2*armrest_width - 8, slat_width, height]);\n}\n\n// Seat module\nmodule seat() {\n    // Main seat\n    difference() {\n        cube([chair_width, chair_depth, seat_thickness]);\n        // Relief on top\n        translate([5, 5, seat_thickness-3])\n        cube([chair_width-10, chair_depth-10, 3]);\n    }\n    \n    // Rounded front edge\n    translate([0, chair_depth, 0])\n    rotate([90, 0, 0])\n    cylinder(h=chair_width, d=seat_thickness*2, $fn=64);\n}\n\n// Armrest module\nmodule armrest() {\n    // Support post\n    translate([0, -chair_depth/2 + 10, 0])\n    cube([armrest_width, 10, armrest_height - seat_thickness]);\n    \n    // Top armrest\n    translate([0, -chair_depth/2 + 5, armrest_height - seat_thickness])\n    cube([armrest_width, chair_depth/2 - 5, 8]);\n}\n\n// Main chair assembly\nunion() {\n    // Four legs\n    translate([chair_width/2 - 8, chair_depth/2 - 8, 0])\n    chair_leg();\n    \n    translate([-chair_width/2 + 8, chair_depth/2 - 8, 0])\n    chair_leg();\n    \n    translate([chair_width/2 - 8, -chair_depth/2 + 8, 0])\n    chair_leg();\n    \n    translate([-chair_width/2 + 8, -chair_depth/2 + 8, 0])\n    chair_leg();\n    \n    // Seat\n    translate([0, 0, leg_height])\n    seat();\n    \n    // Backrest frame\n    translate([0, -chair_depth/2 + backrest_thickness/2, leg_height + seat_thickness + backrest_height/2])\n    cube([chair_width, backrest_thickness, backrest_height]);\n    \n    // Backrest slats\n    for(i = [1:3]) {\n        translate([0, -chair_depth/2 + backrest_thickness + 2, leg_height + seat_thickness + i*(backrest_height/4)])\n        back_slat(backrest_thickness - 4);\n    }\n    \n    // Armrests\n    translate([chair_width/2 - armrest_width/2, 0, leg_height + seat_thickness])\n    armrest();\n    \n    mirror([1, 0, 0])\n    translate([chair_width/2 - armrest_width/2, 0, leg_height + seat_thickness])\n    armrest();\n}",
    "renders": true
  },
  {
    "toy": "brickz",
    "openscad_code": "// Realistic Brickz Sofa Toy - Medium Complexity\n// Dimensions: 80mm wide, 50mm deep, 45mm high\n\n// Main parameters\nwidth = 80;\ndepth = 50;\nheight = 45;\nwall = 2;  // Wall thickness for 3D printing\nstud_diameter = 5;\nstud_height = 2;\n\n// Surface studs module\nmodule studs() {\n    for (x = [-width/2+8:16:width/2-8]) {\n        for (z = [-depth/2+8:16:depth/2-8]) {\n            translate([x, stud_height, z]) {\n                cylinder(h=stud_height, d=stud_diameter, $fn=20);\n            }\n        }\n    }\n}\n\n// Armrest module with curved shape\nmodule armrest(x_pos, y_pos) {\n    union() {\n        // Main armrest body\n        translate([x_pos, y_pos, 0]) {\n            scale([1, 0.8, 1]) {\n                sphere(d=18, $fn=32);\n            }\n        }\n        // Flattened top surface\n        translate([x_pos, y_pos+8, 0]) {\n            cube([15, 2, 20], center=true);\n        }\n    }\n}\n\n// Cushion module with rounded edges\nmodule cushion(x_pos, z_pos) {\n    translate([x_pos, -5, z_pos]) {\n        difference() {\n            // Main cushion body\n            minkowski() {\n                cube([width-20, 6, depth-20], center=true);\n                sphere(d=4, $fn=16);\n            }\n            // Hollow interior\n            translate([0, -1, 0]) {\n                scale([0.7, 0.5, 0.7]) {\n                    cube([width-20, 6, depth-20], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main sofa body\nmodule sofa_body() {\n    difference() {\n        union() {\n            // Base frame\n            translate([0, height/2-10, 0]) {\n                cube([width, height-10, depth], center=true);\n            }\n            // Backrest\n            translate([0, height-5, -depth/2+15]) {\n                cube([width, height-5, 10], center=true);\n            }\n            // Curved backrest top\n            translate([0, height-2.5, -depth/2+15]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=width, r=height/2-2.5, $fn=50);\n                }\n            }\n        }\n        \n        // Hollow interior\n        translate([0, height/2-5, 0]) {\n            cube([width-wall*2, height-15, depth-wall*2], center=true);\n        }\n        \n        // Backrest hollow\n        translate([0, height-7.5, -depth/2+15]) {\n            cube([width-wall*2, height-9, 10-wall*2], center=true);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    for (x = [-width/2+10, width/2-10]) {\n        for (z = [-depth/2+8, depth/2-8]) {\n            translate([x, 5, z]) {\n                difference() {\n                    // Leg body\n                    cylinder(h=10, d=8, $fn=20);\n                    // Hollow interior\n                    translate([0, -5, 0]) {\n                        cylinder(h=10, d=4, $fn=20);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main sofa structure\n    sofa_body();\n    \n    // Armrests\n    armrest(-width/2+5, height-15);\n    armrest(width/2-5, height-15);\n    \n    // Cushions\n    cushion(0, 0);\n    cushion(0, -depth/2+15);\n    \n    // Legs\n    legs();\n    \n    // Bottom studs\n    translate([0, 0, 0]) {\n        studs();\n    }\n}\n\n// Slight bevel on edges for realism\nminkowski() {\n    children();\n    sphere(d=1, $fn=8);\n}",
    "renders": true
  },
  {
    "toy": "stackz",
    "openscad_code": "// Stackz toy chair - realistic style with medium complexity\n// Dimensions: 80mm height x 60mm width x 60mm depth\n\n// Parameters\nseat_height = 40;\nseat_width = 50;\nseat_depth = 50;\nback_height = 40;\nleg_height = 38;\nleg_size = 6;\nback_slats = 5;\narmrest_height = 25;\nwall_thickness = 2;\n\nmodule chair() {\n    union() {\n        // Seat\n        difference() {\n            cube([seat_width, seat_depth, 6], center=true);\n            translate([0, 0, wall_thickness])\n                cube([seat_width-wall_thickness*2, seat_depth-wall_thickness*2, 6], center=true);\n        }\n        \n        // Legs\n        translate([seat_width/2-leg_size/2, seat_depth/2-leg_size/2, -leg_height/2-3])\n            cylinder(h=leg_height, r=leg_size/2, $fn=12);\n        translate([-seat_width/2+leg_size/2, seat_depth/2-leg_size/2, -leg_height/2-3])\n            cylinder(h=leg_height, r=leg_size/2, $fn=12);\n        translate([seat_width/2-leg_size/2, -seat_depth/2+leg_size/2, -leg_height/2-3])\n            cylinder(h=leg_height, r=leg_size/2, $fn=12);\n        translate([-seat_width/2+leg_size/2, -seat_depth/2+leg_size/2, -leg_height/2-3])\n            cylinder(h=leg_height, r=leg_size/2, $fn=12);\n        \n        // Backrest frame\n        translate([0, seat_depth/2-3, back_height/2+3])\n            cube([seat_width, 6, back_height], center=true);\n        \n        // Backrest slats\n        for(i=[-2:1:2]) {\n            translate([i*10, seat_depth/2-3, back_height/2+3])\n                cube([8, 6, back_height], center=true);\n        }\n        \n        // Armrests\n        difference() {\n            // Left armrest\n            translate([-seat_width/2-3, 0, armrest_height/2+3]) {\n                cube([6, seat_depth*0.8, armrest_height], center=true);\n            }\n            // Right armrest\n            translate([seat_width/2+3, 0, armrest_height/2+3]) {\n                cube([6, seat_depth*0.8, armrest_height], center=true);\n            }\n        }\n        \n        // Armrest tops\n        translate([-seat_width/2-3, 0, armrest_height+3])\n            cube([10, seat_depth*0.8, 4], center=true);\n        translate([seat_width/2+3, 0, armrest_height+3])\n            cube([10, seat_depth*0.8, 4], center=true);\n        \n        // Support bars\n        translate([0, 0, -leg_height+5])\n            cube([seat_width-leg_size, 4, 4], center=true);\n        translate([0, 0, -leg_height+10])\n            cube([4, seat_depth-leg_size, 4], center=true);\n    }\n}\n\n// Assemble the chair\nchair();",
    "renders": true
  },
  {
    "toy": "blockix",
    "openscad_code": "// Blockix Chair - Realistic Style, Medium Complexity\n// Dimensions: 45mm x 45mm x 80mm (WxDxH)\n// All parts designed for 3D printing with 2mm wall thickness\n\nmodule chair_leg(x_pos, z_pos) {\n    // Single chair leg with rounded edges\n    translate([x_pos, 0, z_pos]) {\n        union() {\n            // Main leg structure\n            difference() {\n                translate([0, 0, 20]) cylinder(h=40, r1=4, r2=4, $fn=16);\n                translate([0, 0, 20]) cylinder(h=40, r1=2.5, r2=2.5, $fn=16);\n            }\n            // Foot detail\n            translate([0, 0, 0]) cylinder(h=3, r1=4.5, r2=4.5, $fn=16);\n            // Top connector\n            translate([0, 0, 60]) cylinder(h=5, r1=5, r2=5, $fn=16);\n        }\n    }\n}\n\nmodule chair_seat() {\n    // Main seat with cushion detail\n    translate([0, 0, 60]) {\n        difference() {\n            // Seat base\n            cube([45, 45, 8], center=true);\n            // Hollow interior\n            cube([41, 41, 8], center=true);\n        }\n        \n        // Cushion detail on top\n        translate([0, 0, 4]) {\n            difference() {\n                cube([43, 43, 4], center=true);\n                cube([39, 39, 4], center=true);\n            }\n        }\n        \n        // Seat surface texture\n        for(x = [-15, -5, 5, 15]) {\n            for(y = [-15, -5, 5, 15]) {\n                translate([x, y, 8]) cylinder(h=1, r=1.5, $fn=8);\n            }\n        }\n    }\n}\n\nmodule chair_back() {\n    // Chair backrest assembly\n    translate([0, -20, 77]) {\n        rotate([105, 0, 0]) {\n            // Backrest frame\n            difference() {\n                cube([45, 5, 35], center=true);\n                cube([41, 5, 31], center=true);\n            }\n            \n            // Vertical slats\n            for(pos = [-15, -5, 5, 15]) {\n                translate([pos, 0, 0]) {\n                    difference() {\n                        cube([3, 4, 33], center=true);\n                        cube([2, 4, 32], center=true);\n                    }\n                }\n            }\n            \n            // Top rail\n            translate([0, 0, 17]) {\n                difference() {\n                    cube([47, 6, 3], center=true);\n                    cube([43, 6, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule back_supports() {\n    // Support beams connecting seat to back\n    translate([15, -10, 67]) {\n        rotate([115, 0, 0]) {\n            difference() {\n                cube([3, 3, 25], center=true);\n                cube([2, 2, 25], center=true);\n            }\n        }\n    }\n    \n    translate([-15, -10, 67]) {\n        rotate([115, 0, 0]) {\n            difference() {\n                cube([3, 3, 25], center=true);\n                cube([2, 2, 25], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Four chair legs\n    chair_leg(16, 0);\n    chair_leg(-16, 0);\n    chair_leg(16, -16);\n    chair_leg(-16, -16);\n    \n    // Seat assembly\n    chair_seat();\n    \n    // Backrest assembly\n    chair_back();\n    \n    // Support beams\n    back_supports();\n    \n    // Cross-bracing between legs\n    translate([0, -8, 30]) {\n        difference() {\n            cube([34, 3, 3], center=true);\n            cube([32, 3, 2], center=true);\n        }\n    }\n    \n    translate([-8, 0, 30]) {\n        rotate([0, 0, 90]) {\n            difference() {\n                cube([34, 3, 3], center=true);\n                cube([32, 3, 2], center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "plankix",
    "openscad_code": "// Plankix toy chair in realistic style\n// Overall dimensions: 60mm x 55mm x 85mm (W x D x H)\n\n// Parameters\nseat_width = 60;\nseat_depth = 55;\nseat_thickness = 4;\nleg_height = 40;\nleg_size = 5;\nback_height = 45;\nback_thickness = 3;\narmrest_height = 20;\narmrest_width = 7;\nback_slats = 7;\nslat_width = 3;\n\n// Main seat\nmodule seat() {\n    // Seat base\n    translate([0, 0, leg_height])\n        cube([seat_width, seat_depth, seat_thickness], center = true);\n    \n    // Seat cushion\n    translate([0, 0, leg_height + seat_thickness + 2])\n        scale([1, 1, 0.4])\n            cube([seat_width - 8, seat_depth - 8, 5], center = true);\n}\n\n// Legs\nmodule legs() {\n    positions = [\n        [-seat_width/2 + leg_size, -seat_depth/2 + leg_size, 0],\n        [seat_width/2 - leg_size, -seat_depth/2 + leg_size, 0],\n        [-seat_width/2 + leg_size, seat_depth/2 - leg_size, 0],\n        [seat_width/2 - leg_size, seat_depth/2 - leg_size, 0]\n    ];\n    \n    for (pos = positions) {\n        translate(pos)\n            cylinder(h = leg_height, d = leg_size * 2, center = false);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    // Back frame\n    translate([0, -seat_depth/2 + back_thickness/2, leg_height + seat_thickness + back_height/2])\n        cube([seat_width - 10, back_thickness, back_height], center = true);\n    \n    // Back slats\n    for (i = [0 : back_slats - 1]) {\n        x_pos = -seat_width/2 + 10 + i * ((seat_width - 20) / (back_slats - 1));\n        translate([x_pos, -seat_depth/2 + back_thickness, leg_height + seat_thickness + 5])\n            cube([slat_width, back_thickness, back_height - 10], center = false);\n    }\n    \n    // Top rail\n    translate([0, -seat_depth/2 + back_thickness/2, leg_height + seat_thickness + back_height])\n        cube([seat_width - 10, back_thickness + 1, 5], center = true);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - armrest_width/2, 0, leg_height + seat_thickness + armrest_height/2])\n        cube([armrest_width, seat_depth - 10, armrest_height], center = true);\n    \n    // Right armrest\n    translate([seat_width/2 + armrest_width/2, 0, leg_height + seat_thickness + armrest_height/2])\n        cube([armrest_width, seat_depth - 10, armrest_height], center = true);\n    \n    // Armrest tops\n    translate([-seat_width/2 - armrest_width/2, 0, leg_height + seat_thickness + armrest_height + 2])\n        cube([armrest_width + 2, seat_depth - 12, 3], center = true);\n    \n    translate([seat_width/2 + armrest_width/2, 0, leg_height + seat_thickness + armrest_height + 2])\n        cube([armrest_width + 2, seat_depth - 12, 3], center = true);\n}\n\n// Support bars\nmodule supports() {\n    // Front support\n    translate([0, -seat_depth/2 + leg_size, leg_height/2])\n        cube([seat_width - 2 * leg_size, leg_size * 0.8, leg_size * 0.8], center = true);\n    \n    // Side supports\n    translate([-seat_width/2 + leg_size, 0, leg_height/2])\n        rotate([0, 90, 0])\n            cube([seat_depth - 2 * leg_size, leg_size * 0.8, leg_size * 0.8], center = true);\n    \n    translate([seat_width/2 - leg_size, 0, leg_height/2])\n        rotate([0, 90, 0])\n            cube([seat_depth - 2 * leg_size, leg_size * 0.8, leg_size * 0.8], center = true);\n}\n\n// Assembly\nunion() {\n    seat();\n    legs();\n    backrest();\n    armrests();\n    supports();\n}",
    "renders": true
  },
  {
    "toy": "snapo",
    "openscad_code": "// Snapo-style realistic armchair toy\n// Medium complexity, 50-150 lines\n\n// Parameters\nchair_width = 40;\nchair_depth = 45;\nchair_height = 55;\nleg_height = 25;\nleg_diameter = 6;\nback_height = 30;\narmrest_height = 20;\ncushion_thickness = 8;\nwall_thickness = 2;\n\nmodule leg() {\n    // Cylindrical leg with rounded bottom\n    union() {\n        cylinder(h=leg_height, d=leg_diameter, $fn=16);\n        translate([0, 0, leg_height])\n            sphere(d=leg_diameter, $fn=16);\n    }\n}\n\nmodule armrest() {\n    // Curved armrest with rounded edges\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(d=8, $fn=8);\n            translate([0, chair_depth-10, 0])\n                sphere(d=8, $fn=8);\n            translate([0, 0, armrest_height-8])\n                sphere(d=8, $fn=8);\n            translate([0, chair_depth-10, armrest_height-8])\n                sphere(d=8, $fn=8);\n        }\n        translate([-5, -5, -5])\n            cube([10, chair_depth, armrest_height+10]);\n    }\n}\n\nmodule cushion() {\n    // Puffy cushion with rounded top\n    difference() {\n        union() {\n            translate([0, 0, cushion_thickness/2])\n                cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, cushion_thickness], center=true);\n            translate([0, 0, cushion_thickness])\n                minkowski() {\n                    cube([chair_width-wall_thickness*2-4, chair_depth-wall_thickness*2-4, 1], center=true);\n                    sphere(d=4, $fn=8);\n                }\n        }\n        translate([0, 0, cushion_thickness])\n            cube([chair_width-wall_thickness*2+2, chair_depth-wall_thickness*2+2, cushion_thickness], center=true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with slats\n    union() {\n        // Main back panel\n        difference() {\n            translate([0, chair_depth/2-wall_thickness, back_height/2+leg_height+cushion_thickness])\n                cube([chair_width-wall_thickness*2, wall_thickness, back_height], center=true);\n            // Cut slats pattern\n            for(i = [-1:1]) {\n                translate([i*12, chair_depth/2-wall_thickness-1, back_height/2+leg_height+cushion_thickness])\n                    cube([8, wall_thickness+2, back_height-4], center=true);\n            }\n        }\n        // Top rail\n        translate([0, chair_depth/2-wall_thickness, leg_height+cushion_thickness+back_height])\n            rotate([90, 0, 0])\n                cylinder(h=chair_width-wall_thickness*2, d=6, center=true, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat base\n    difference() {\n        translate([0, 0, leg_height+cushion_thickness/2])\n            cube([chair_width, chair_depth, cushion_thickness], center=true);\n        translate([0, 0, leg_height+cushion_thickness/2])\n            cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, cushion_thickness+2], center=true);\n    }\n    \n    // Cushion\n    translate([0, 0, leg_height+cushion_thickness/2])\n        cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Legs\n    translate([chair_width/2-leg_diameter/2-wall_thickness, chair_depth/2-leg_diameter/2-wall_thickness, 0])\n        leg();\n    translate([-chair_width/2+leg_diameter/2+wall_thickness, chair_depth/2-leg_diameter/2-wall_thickness, 0])\n        leg();\n    translate([chair_width/2-leg_diameter/2-wall_thickness, -chair_depth/2+leg_diameter/2+wall_thickness, 0])\n        leg();\n    translate([-chair_width/2+leg_diameter/2+wall_thickness, -chair_depth/2+leg_diameter/2+wall_thickness, 0])\n        leg();\n    \n    // Armrests\n    translate([chair_width/2-wall_thickness-4, 0, leg_height+cushion_thickness])\n        armrest();\n    mirror([1, 0, 0])\n        translate([chair_width/2-wall_thickness-4, 0, leg_height+cushion_thickness])\n            armrest();\n}",
    "renders": true
  },
  {
    "toy": "stacko",
    "openscad_code": "// Stacko realistic style toy - medium complexity\n// A wooden style stacking stool with realistic proportions and details\n\n// Overall dimensions\nstool_width = 90;\nstool_depth = 90;\nstool_height = 100;\nleg_diameter = 20;\nleg_height = 85;\nseat_thickness = 15;\nstretcher_offset = 35;\n\n// Material thickness for 3D printing\nwall_thickness = 2;\n\nmodule stool_leg() {\n    // Main leg cylinder\n    cylinder(h=leg_height, d=leg_diameter, $fn=32);\n    \n    // Leg foot detail - slightly wider base\n    translate([0, 0, 0])\n        cylinder(h=5, d1=leg_diameter+4, d2=leg_diameter, $fn=32);\n    \n    // Leg top detail - rounded edge\n    translate([0, 0, leg_height-2])\n        cylinder(h=4, d1=leg_diameter, d2=leg_diameter-2, $fn=32);\n}\n\nmodule stretcher_bar(length) {\n    // Horizontal support bar between legs\n    rotate([90, 0, 0])\n        cylinder(h=length, d=leg_diameter*0.6, $fn=32);\n}\n\nmodule seat_surface() {\n    // Main seat top\n    difference() {\n        // Seat base\n        cube([stool_width, stool_depth, seat_thickness], center=true);\n        \n        // Rounded edges - chamfer\n        translate([0, 0, seat_thickness/2-1])\n            minkowski() {\n                cube([stool_width-4, stool_depth-4, 2], center=true);\n                cylinder(h=1, r=2, $fn=16);\n            }\n    }\n    \n    // Seat cushion detail - slight indent\n    translate([0, 0, -seat_thickness/2+1])\n        cube([stool_width-20, stool_depth-20, 2], center=true);\n}\n\nmodule corner_brace() {\n    // Decorative corner brace\n    difference() {\n        // Main brace\n        translate([leg_diameter/2, leg_diameter/2, 0])\n            cube([wall_thickness*2, wall_thickness*2, leg_height/2]);\n        \n        // Rounded corner\n        translate([leg_diameter/2+wall_thickness, leg_diameter/2+wall_thickness, 0])\n            cylinder(h=leg_height/2, r=wall_thickness*2, $fn=16);\n    }\n}\n\n// Main stool assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_height+seat_thickness/2])\n        seat_surface();\n    \n    // Leg positions\n    leg_positions = [\n        [-stool_width/2+leg_diameter/2, -stool_depth/2+leg_diameter/2, leg_height/2],\n        [stool_width/2-leg_diameter/2, -stool_depth/2+leg_diameter/2, leg_height/2],\n        [stool_width/2-leg_diameter/2, stool_depth/2-leg_diameter/2, leg_height/2],\n        [-stool_width/2+leg_diameter/2, stool_depth/2-leg_diameter/2, leg_height/2]\n    ];\n    \n    // Place legs\n    for(pos = leg_positions) {\n        translate(pos)\n            stool_leg();\n    }\n    \n    // Stretcher bars\n    // Front-back bars\n    translate([0, -stool_depth/2+leg_diameter/2, stretcher_offset])\n        stretcher_bar(stool_width-leg_diameter);\n    translate([0, stool_depth/2-leg_diameter/2, stretcher_offset])\n        stretcher_bar(stool_width-leg_diameter);\n    \n    // Left-right bars\n    translate([-stool_width/2+leg_diameter/2, 0, stretcher_offset])\n        rotate([0, 0, 90])\n            stretcher_bar(stool_depth-leg_diameter);\n    translate([stool_width/2-leg_diameter/2, 0, stretcher_offset])\n        rotate([0, 0, 90])\n            stretcher_bar(stool_depth-leg_diameter);\n    \n    // Corner braces for stability\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], leg_height/4])\n            corner_brace();\n    }\n    \n    // Center support ring\n    translate([0, 0, stretcher_offset])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness*3, r1=leg_diameter*0.8, r2=leg_diameter*0.8, $fn=32);\n}",
    "renders": true
  },
  {
    "toy": "bricko",
    "openscad_code": "// Bricko Toy Sofa – realistic “mini-dollhouse” scale\n// Overall footprint 60 mm wide × 30 mm deep × 30 mm high\n// Wall thickness 2 mm everywhere for easy FDM printing\n\nmodule stud() {                // classic 4.8 mm bricko stud\n    cylinder(h=1.6, d=4.8, $fn=20);\n}\n\nmodule studs_grid(x0, y0, nx, ny) {   // helper to place a grid of studs\n    for (ix=[0:nx-1])\n        for (iy=[0:ny-1])\n            translate([x0+ix*8, y0+iy*8, 0])\n                stud();\n}\n\n// Main sofa body\ndifference() {\n    // Outer shell\n    union() {\n        translate([-30, -15, 0])\n            cube([60, 30, 20]);          // seat block\n        translate([-30, -15, 18])\n            cube([60, 5, 10]);           // backrest\n    }\n\n    // Hollow interior (2 mm walls)\n    translate([-28, -13, 2])\n        cube([56, 26, 16]);              // seat cavity\n    translate([-28, -13, 18])\n        cube([56, 1, 8]);                // backrest cavity\n}\n\n// Cushions on seat\nfor (sx=[-20,-4,12]) {\n    translate([sx, -12, 20]) {\n        color([0.9,0.1,0.1])             // red cushion\n        difference() {\n            cube([16, 24, 6]);\n            translate([1, 1, 1])\n                cube([14, 22, 4]);       // hollow to keep 2 mm walls\n            // Soft top rounding\n            translate([8, 12, 5])\n                sphere(d=15.8, $fn=30);\n        }\n    }\n}\n\n// Backrest cushions\nfor (sx=[-20,-4,12]) {\n    translate([sx, -4, 28]) {\n        color([0.9,0.1,0.1])\n        difference() {\n            cube([16, 6, 8]);\n            translate([1, 1, 1])\n                cube([14, 4, 6]);\n        }\n    }\n}\n\n// Arms\ntranslate([-32, -15, 0]) {\n    color([0.2,0.2,0.2])\n    difference() {\n        cube([4, 30, 22]);\n        translate([2, 2, 2])\n            cube([2, 26, 18]);\n    }\n}\ntranslate([28, -15, 0]) {\n    color([0.2,0.2,0.2])\n    difference() {\n        cube([4, 30, 22]);\n        translate([0, 2, 2])\n            cube([2, 26, 18]);\n    }\n}\n\n// Bricko studs on arms for playability\nstuds_grid(-30, -12, 1, 3);\nstuds_grid(28, -12, 1, 3);\n\n// Four simple legs (no overhang)\nmodule leg() {\n    color([0.2,0.2,0.2])\n    difference() {\n        cube([6, 6, 2]);\n        translate([1, 1, 0])\n            cube([4, 4, 2]);\n    }\n}\n\ntranslate([-24, -10, -2]) leg();\ntranslate([18, -10, -2]) leg();\ntranslate([-24, 4, -2]) leg();\ntranslate([18, 4, -2]) leg();",
    "renders": true
  },
  {
    "toy": "brickix",
    "openscad_code": "// Brickix Toy Armchair - Realistic Medium Complexity\n// Overall dimensions: 100 x 100 x 90 mm\n\n// Parameters\n$fn = 50;\nseat_width = 80;\nseat_depth = 80;\nseat_thickness = 10;\nback_height = 50;\narmrest_height = 30;\nleg_height = 35;\nleg_diameter = 12;\nwall_thickness = 2.5;\nstud_diameter = 5;\nstud_height = 1.6;\nstud_spacing = 8;\n\n// Main module\nmodule brickix_armchair() {\n    // Base frame\n    union() {\n        // Seat base\n        difference() {\n            // Outer shell\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n            // Hollow interior\n            translate([0, 0, seat_thickness/2 - wall_thickness])\n                cube([seat_width - 2*wall_thickness, seat_depth - 2*wall_thickness, seat_thickness], center=true);\n        }\n        \n        // Backrest\n        translate([0, seat_depth/2 - wall_thickness, (seat_thickness + back_height)/2])\n            difference() {\n                cube([seat_width - 20, wall_thickness*2, back_height], center=true);\n                translate([0, 0, back_height/2 - wall_thickness])\n                    cube([seat_width - 20 - 2*wall_thickness, wall_thickness*2, back_height - wall_thickness], center=true);\n            }\n        \n        // Left armrest\n        translate([-seat_width/2 + wall_thickness, 0, (seat_thickness + armrest_height)/2])\n            difference() {\n                cube([wall_thickness*2, seat_depth - 20, armrest_height], center=true);\n                translate([0, 0, armrest_height/2 - wall_thickness])\n                    cube([wall_thickness*2, seat_depth - 20 - 2*wall_thickness, armrest_height - wall_thickness], center=true);\n            }\n        \n        // Right armrest\n        translate([seat_width/2 - wall_thickness, 0, (seat_thickness + armrest_height)/2])\n            difference() {\n                cube([wall_thickness*2, seat_depth - 20, armrest_height], center=true);\n                translate([0, 0, armrest_height/2 - wall_thickness])\n                    cube([wall_thickness*2, seat_depth - 20 - 2*wall_thickness, armrest_height - wall_thickness], center=true);\n            }\n        \n        // Legs\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*(seat_width/2 - 15), y*(seat_depth/2 - 15), -leg_height/2 - seat_thickness/2])\n                    difference() {\n                        cylinder(h=leg_height, d=leg_diameter, center=true);\n                        translate([0, 0, leg_height/2 - wall_thickness])\n                            cylinder(h=leg_height, d=leg_diameter - 2*wall_thickness, center=true);\n                    }\n            }\n        }\n        \n        // Cushion detail\n        translate([0, 0, seat_thickness/2 + 5])\n            difference() {\n                cube([seat_width - 30, seat_depth - 30, 10], center=true);\n                translate([0, 0, 5 - wall_thickness])\n                    cube([seat_width - 30 - 2*wall_thickness, seat_depth - 30 - 2*wall_thickness, 10], center=true);\n            }\n        \n        // Back cushion\n        translate([0, seat_depth/2 - 10, (seat_thickness + back_height)/2 + 5])\n            difference() {\n                cube([seat_width - 40, wall_thickness*2, back_height - 20], center=true);\n                translate([0, 0, (back_height - 20)/2 - wall_thickness])\n                    cube([seat_width - 40 - 2*wall_thickness, wall_thickness*2, back_height - 20], center=true);\n            }\n        \n        // Brick studs on bottom\n        for(i = [-3:3]) {\n            for(j = [-3:3]) {\n                if(abs(i) < 3 && abs(j) < 3) {\n                    translate([i*stud_spacing, j*stud_spacing, -seat_thickness/2 - stud_height/2])\n                        cylinder(h=stud_height, d=stud_diameter, $fn=16);\n                }\n            }\n        }\n        \n        // Armrest studs\n        for(side = [-1, 1]) {\n            for(pos = [-2:2]) {\n                translate([side*(seat_width/2 - wall_thickness), pos*15, armrest_height - 5])\n                    cylinder(h=stud_height, d=stud_diameter, $fn=16);\n            }\n        }\n    }\n}\n\n// Render the chair\nbrickix_armchair();",
    "renders": true
  },
  {
    "toy": "buildlet",
    "openscad_code": "// Toy Buildlet Chair - Realistic Medium Complexity\n// Overall dimensions: 60mm W x 55mm D x 80mm H\n\n// Parameters\nseat_height = 40;\nseat_width = 60;\nseat_depth = 55;\nback_height = 40;\nleg_height = 38;\nleg_thickness = 8;\ncushion_height = 8;\nback_thickness = 6;\narmrest_height = 20;\n\n// Main seat assembly\nmodule seat_assembly() {\n    // Cushion with rounded edges\n    translate([0, 0, seat_height + cushion_height/2])\n    difference() {\n        // Main cushion\n        minkowski() {\n            cube([seat_width - 4, seat_depth - 4, cushion_height], center = true);\n            sphere(2);\n        }\n        // Remove bottom sphere for flat surface\n        translate([0, 0, -cushion_height/2 - 1])\n        cube([seat_width - 4, seat_depth - 4, cushion_height + 2], center = true);\n    }\n    \n    // Seat base\n    translate([0, 0, seat_height/2])\n    cube([seat_width, seat_depth, seat_height/5], center = true);\n}\n\n// Backrest\nmodule backrest() {\n    translate([0, -seat_depth/2 + back_thickness/2, seat_height + back_height/2])\n    difference() {\n        // Main back panel\n        cube([seat_width - 10, back_thickness, back_height], center = true);\n        \n        // Decorative slats\n        for(i = [-1:1]) {\n            translate([i * 15, 0, 0])\n            cube([8, back_thickness + 1, back_height - 10], center = true);\n        }\n    }\n    \n    // Top rail\n    translate([0, -seat_depth/2 + back_thickness/2, seat_height + back_height - 3])\n    cube([seat_width - 8, back_thickness + 2, 6], center = true);\n}\n\n// Leg assembly\nmodule legs() {\n    // Front legs\n    translate([seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2, leg_height/2])\n    rounded_leg();\n    \n    mirror([1, 0, 0])\n    translate([seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2, leg_height/2])\n    rounded_leg();\n    \n    // Back legs\n    translate([seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2, leg_height/2])\n    rounded_leg();\n    \n    mirror([1, 0, 0])\n    translate([seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2, leg_height/2])\n    rounded_leg();\n}\n\n// Rounded leg design\nmodule rounded_leg() {\n    difference() {\n        // Main leg\n        cylinder(h = leg_height, d = leg_thickness, $fn = 20);\n        \n        // Add decorative groove\n        translate([0, 0, leg_height * 0.6])\n        cylinder(h = 2, d = leg_thickness - 2, $fn = 20);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - 5, 0, seat_height + armrest_height/2])\n    difference() {\n        // Armrest post\n        cube([6, seat_depth * 0.7, armrest_height], center = true);\n        \n        // Remove center for hollow feel\n        translate([0, 0, 0])\n        cube([3, seat_depth * 0.7 - 4, armrest_height - 4], center = true);\n    }\n    \n    // Right armrest\n    mirror([1, 0, 0])\n    translate([-seat_width/2 - 5, 0, seat_height + armrest_height/2])\n    difference() {\n        cube([6, seat_depth * 0.7, armrest_height], center = true);\n        translate([0, 0, 0])\n        cube([3, seat_depth * 0.7 - 4, armrest_height - 4], center = true);\n    }\n}\n\n// Cross support bars\nmodule supports() {\n    // Front support\n    translate([0, seat_depth/2 - leg_thickness/2, leg_height * 0.6])\n    cube([seat_width - leg_thickness, leg_thickness/2, leg_thickness/2], center = true);\n    \n    // Side supports\n    translate([seat_width/2 - leg_thickness/2, 0, leg_height * 0.4])\n    rotate([0, 0, 90])\n    cube([seat_depth - leg_thickness, leg_thickness/2, leg_thickness/2], center = true);\n    \n    mirror([1, 0, 0])\n    translate([seat_width/2 - leg_thickness/2, 0, leg_height * 0.4])\n    rotate([0, 0, 90])\n    cube([seat_depth - leg_thickness, leg_thickness/2, leg_thickness/2], center = true);\n}\n\n// Assembly\nunion() {\n    seat_assembly();\n    backrest();\n    legs();\n    armrests();\n    supports();\n}",
    "renders": true
  },
  {
    "toy": "racer",
    "openscad_code": "// Toy Racer Car - Realistic Medium Complexity\n// Overall dimensions: 120mm L x 55mm W x 35mm H\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main body\n        hull() {\n            translate([-15, -25, 8]) cube([30, 50, 12], center=true);\n            translate([-40, -20, 10]) cube([80, 40, 8], center=true);\n            translate([-55, -15, 6]) cube([20, 30, 10], center=true);\n            translate([55, -15, 6]) cube([20, 30, 10], center=true);\n        }\n        \n        // Cockpit opening\n        translate([10, -20, 15]) cube([40, 40, 10], center=true);\n        \n        // Front air intake\n        translate([-55, 0, 2]) cylinder(h=8, r1=10, r2=8, center=true);\n    }\n}\n\n// Wheels with tires\nmodule wheel() {\n    difference() {\n        // Tire\n        color(\"black\")\n        cylinder(h=12, r=12, center=true);\n        \n        // Rim\n        color(\"silver\")\n        translate([0, 0, -1])\n        cylinder(h=14, r=8, center=true);\n        \n        // Spokes\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([0, 4, 0])\n            cube([2, 8, 12], center=true);\n        }\n        \n        // Hub hole\n        translate([0, 0, -7])\n        cylinder(h=14, r=3, center=true);\n    }\n}\n\n// Front wing assembly\nmodule front_wing() {\n    union() {\n        // Main wing\n        translate([-60, 0, 5])\n        cube([8, 50, 3], center=true);\n        \n        // Wing supports\n        translate([-55, -25, 8])\n        cube([4, 3, 8], center=true);\n        translate([-55, 25, 8])\n        cube([4, 3, 8], center=true);\n        \n        // End plates\n        translate([-60, -26, 8])\n        cube([6, 2, 15], center=true);\n        translate([-60, 26, 8])\n        cube([6, 2, 15], center=true);\n    }\n}\n\n// Rear wing assembly\nmodule rear_wing() {\n    union() {\n        // Main wing\n        translate([55, 0, 20])\n        cube([6, 45, 3], center=true);\n        \n        // Wing supports\n        translate([52, -15, 12])\n        cube([3, 3, 18], center=true);\n        translate([52, 15, 12])\n        cube([3, 3, 18], center=true);\n        \n        // DRS flap\n        translate([58, 0, 24])\n        cube([2, 35, 2], center=true);\n    }\n}\n\n// Side pods\nmodule side_pods() {\n    for(side=[-1, 1]) {\n        translate([0, side*30, 8])\n        scale([1, 0.8, 0.6])\n        cylinder(h=15, r=15, center=true);\n    }\n}\n\n// Exhaust pipes\nmodule exhaust() {\n    for(i=[-1, 1]) {\n        translate([60, i*8, 12])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    color(\"red\")\n    body_shell();\n    \n    // Side pods\n    color(\"red\")\n    side_pods();\n    \n    // Wings\n    color(\"black\")\n    front_wing();\n    rear_wing();\n    \n    // Exhaust\n    color(\"gray\")\n    exhaust();\n    \n    // Wheels - front\n    translate([-35, -27, 6])\n    rotate([90, 0, 0])\n    wheel();\n    translate([-35, 27, 6])\n    rotate([90, 0, 0])\n    wheel();\n    \n    // Wheels - rear\n    translate([35, -27, 6])\n    rotate([90, 0, 0])\n    wheel();\n    translate([35, 27, 6])\n    rotate([90, 0, 0])\n    wheel();\n    \n    // Driver headrest\n    color(\"black\")\n    translate([25, 0, 18])\n    cube([15, 20, 8], center=true);\n}",
    "renders": true
  },
  {
    "toy": "hauler",
    "openscad_code": "// Toy hauler truck\n// Length: 120 mm, Width: 50 mm, Height: 45 mm\n$fn = 36;\n\n// Overall scale factor for resizing\nscale_factor = 1;\n\n// Main body module\nmodule hauler() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Chassis frame\n            chassis();\n            \n            // Cab\n            cab();\n            \n            // Cargo bed\n            cargo_bed();\n            \n            // Wheels\n            wheels();\n            \n            // Details\n            details();\n        }\n    }\n}\n\n// Chassis frame\nmodule chassis() {\n    // Main frame rails\n    translate([-10, -25, 0]) {\n        cube([140, 4, 3]);\n    }\n    translate([-10, 21, 0]) {\n        cube([140, 4, 3]);\n    }\n    \n    // Cross members\n    translate([20, -25, 0]) {\n        cube([2, 50, 3]);\n    }\n    translate([60, -25, 0]) {\n        cube([2, 50, 3]);\n    }\n    translate([100, -25, 0]) {\n        cube([2, 50, 3]);\n    }\n}\n\n// Driver cab\nmodule cab() {\n    // Cab base\n    translate([0, -20, 3]) {\n        cube([30, 40, 15]);\n    }\n    \n    // Cab roof\n    translate([0, -20, 18]) {\n        cube([30, 40, 8]);\n    }\n    \n    // Cab front slope\n    translate([30, -20, 3]) {\n        for(i = [0:2:15]) {\n            translate([i, 0, i * 0.5]) {\n                cube([2, 40, 15 - i * 0.5]);\n            }\n        }\n    }\n    \n    // Windshield\n    translate([30, -18, 8]) {\n        difference() {\n            cube([1, 36, 10]);\n            translate([0.5, 2, 2]) {\n                cube([2, 32, 6]);\n            }\n        }\n    }\n}\n\n// Cargo bed\nmodule cargo_bed() {\n    // Bed floor\n    translate([30, -22, 6]) {\n        cube([90, 44, 2]);\n    }\n    \n    // Bed sides\n    // Left side\n    translate([30, -22, 8]) {\n        cube([90, 2, 15]);\n    }\n    \n    // Right side\n    translate([30, 20, 8]) {\n        cube([90, 2, 15]);\n    }\n    \n    // Tailgate\n    translate([120, -22, 8]) {\n        rotate([0, 0, 0]) {\n            cube([2, 44, 15]);\n        }\n    }\n    \n    // Headboard\n    translate([30, -22, 8]) {\n        cube([2, 44, 15]);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    // Front left wheel\n    translate([10, -30, 0]) {\n        wheel();\n    }\n    \n    // Front right wheel\n    translate([10, 30, 0]) {\n        wheel();\n    }\n    \n    // Rear left wheels\n    translate([90, -30, 0]) {\n        wheel();\n    }\n    \n    // Rear right wheels\n    translate([90, 30, 0]) {\n        wheel();\n    }\n    \n    // Additional rear wheels\n    translate([110, -30, 0]) {\n        wheel();\n    }\n    \n    translate([110, 30, 0]) {\n        wheel();\n    }\n}\n\n// Single wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h = 8, r1 = 12, r2 = 12);\n        \n        // Rim\n        translate([0, 0, 1]) {\n            cylinder(h = 6, r1 = 8, r2 = 8);\n        }\n        \n        // Hub hole\n        translate([0, 0, 2]) {\n            cylinder(h = 8, r1 = 3, r2 = 3);\n        }\n    }\n}\n\n// Additional details\nmodule details() {\n    // Headlights\n    translate([30, -15, 10]) {\n        sphere(r = 2);\n    }\n    translate([30, 15, 10]) {\n        sphere(r = 2);\n    }\n    \n    // Exhaust pipe\n    translate([5, 25, 20]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 15, r1 = 2, r2 = 2);\n        }\n    }\n    \n    // Side mirrors\n    translate([15, -25, 18]) {\n        cube([5, 2, 2]);\n    }\n    translate([15, 23, 18]) {\n        cube([5, 2, 2]);\n    }\n    \n    // Cargo bed texture (simulated planks)\n    for(i = [0:5:80]) {\n        translate([35 + i, -20, 8]) {\n            cube([5, 40, 1]);\n        }\n    }\n}\n\n// Generate model\nhauler();",
    "renders": true
  },
  {
    "toy": "jet",
    "openscad_code": "// Jet Toy - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm long, 80mm wingspan, 30mm tall\n\n$fn = 32;\nwall = 2;\n\nmodule fuselage() {\n    // Main body\n    difference() {\n        hull() {\n            // Front tapered section\n            translate([-50, 0, 0])\n                scale([1, 0.6, 0.6])\n                sphere(d = 20);\n            // Mid section\n            translate([0, 0, 0])\n                scale([1, 0.8, 0.8])\n                sphere(d = 22);\n            // Rear section\n            translate([40, 0, 0])\n                scale([1, 0.7, 0.7])\n                sphere(d = 18);\n        }\n        \n        // Cockpit cutout\n        translate([-25, 0, 8])\n            scale([1.2, 1, 1])\n            sphere(d = 12);\n    }\n    \n    // Cockpit canopy\n    translate([-25, 0, 8])\n        scale([1.1, 0.9, 0.5])\n        sphere(d = 10);\n}\n\nmodule wings() {\n    // Left wing\n    difference() {\n        translate([0, -40, -2])\n            rotate([0, 0, -5])\n            cube([35, 25, wall], center = false);\n        // Wing tip curve\n        translate([30, -30, -3])\n            cylinder(h = 5, d = 25);\n    }\n    \n    // Right wing\n    mirror([0, 1, 0])\n        difference() {\n            translate([0, -40, -2])\n                rotate([0, 0, -5])\n                cube([35, 25, wall], center = false);\n            translate([30, -30, -3])\n                cylinder(h = 5, d = 25);\n        }\n    \n    // Wing connectors\n    for (x = [-10, 10, 30]) {\n        translate([x, 0, -2])\n            cylinder(h = 4, d = 8);\n    }\n}\n\nmodule tail() {\n    // Vertical stabilizer\n    difference() {\n        translate([38, 0, 8])\n            rotate([0, 0, 0])\n            cube([15, wall, 18], center = true);\n        translate([45, 0, 16])\n            sphere(d = 8);\n    }\n    \n    // Horizontal stabilizers\n    for (y = [-1, 1]) {\n        translate([42, y * 20, 2])\n            rotate([0, 0, y * -10])\n            cube([20, 12, wall], center = true);\n    }\n}\n\nmodule engines() {\n    // Left engine\n    difference() {\n        translate([-5, -25, -8])\n            cylinder(h = 30, d = 12);\n        translate([-5, -25, -8.5])\n            cylinder(h = 5, d = 10);\n    }\n    \n    // Right engine\n    difference() {\n        translate([-5, 25, -8])\n            cylinder(h = 30, d = 12);\n        translate([-5, 25, -8.5])\n            cylinder(h = 5, d = 10);\n    }\n    \n    // Engine mounts\n    for (y = [-1, 1]) {\n        hull() {\n            translate([0, y * 15, -4])\n                sphere(d = 8);\n            translate([-5, y * 25, -6])\n                sphere(d = 6);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Front wheel\n    translate([-30, 0, -15])\n        cylinder(h = 10, d = 6);\n    translate([-30, 0, -15])\n        sphere(d = 6);\n    \n    // Main wheels\n    for (y = [-1, 1]) {\n        translate([10, y * 20, -15])\n            rotate([0, 90, 0])\n            cylinder(h = 10, d = 8);\n        translate([10, y * 20, -15])\n            sphere(d = 8);\n    }\n}\n\nmodule details() {\n    // Panel lines\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, 0])\n            cube([0.5, 16, 0.5], center = true);\n    }\n    \n    // Windows\n    for (x = [-35, -45]) {\n        translate([x, 0, 3])\n            sphere(d = 3);\n    }\n}\n\n// Assemble the jet\nunion() {\n    fuselage();\n    wings();\n    tail();\n    engines();\n    landing_gear();\n    details();\n}",
    "renders": true
  },
  {
    "toy": "chopper",
    "openscad_code": "// Chopper Toy Motorcycle - Medium Complexity\n// Realistic toy-style chopper with proper proportions and 3D-printable design\n\n// Main parameters\nwheel_d = 24;          // Wheel diameter\nwheel_w = 8;           // Wheel width\nbody_length = 100;     // Total length\nbody_height = 50;      // Total height\nhandlebar_width = 50;  // Handlebar width\n\n// Wheel module with tire and rim\nmodule wheel() {\n    // Tire\n    color(\"black\")\n    cylinder(d=wheel_d, h=wheel_w, $fn=60);\n    \n    // Rim\n    translate([0, 0, wheel_w/2])\n    color(\"gray\")\n    cylinder(d=wheel_d*0.7, h=wheel_w*0.2, $fn=30);\n    \n    // Spokes\n    for(i=[0:5:359]) {\n        rotate([0, 0, i])\n        translate([0, wheel_d*0.3, wheel_w/2])\n        cube([wheel_d*0.05, wheel_d*0.1, wheel_w*0.2], center=true);\n    }\n}\n\n// Front fork assembly\nmodule front_fork() {\n    // Main fork tube\n    color(\"silver\")\n    cylinder(d=6, h=35, $fn=20);\n    \n    // Fork legs\n    translate([0, 0, -35])\n    for(x=[-wheel_d/2+2, wheel_d/2-2]) {\n        translate([x, 0, 0])\n        cylinder(d=3, h=35, $fn=10);\n    }\n}\n\n// Handlebar assembly\nmodule handlebar() {\n    // Main bar\n    color(\"silver\")\n    rotate([90, 0, 0])\n    cylinder(d=4, h=handlebar_width, center=true, $fn=20);\n    \n    // Grips\n    for(x=[-handlebar_width/2+2, handlebar_width/2-2]) {\n        translate([x, 0, 0])\n        rotate([90, 0, 0])\n        color(\"black\")\n        cylinder(d=6, h=8, center=true, $fn=20);\n    }\n}\n\n// Fuel tank\nmodule fuel_tank() {\n    color(\"red\")\n    difference() {\n        // Main tank body\n        translate([-5, 0, 0])\n        scale([1.5, 1, 0.8])\n        sphere(d=20, $fn=30);\n        \n        // Cut bottom flat\n        translate([0, 0, -10])\n        cube([50, 50, 20], center=true);\n    }\n}\n\n// Seat\nmodule seat() {\n    color(\"brown\")\n    translate([-20, 0, 5])\n    scale([1.2, 0.8, 0.5])\n    sphere(d=25, $fn=30);\n}\n\n// Engine block\nmodule engine() {\n    color(\"darkgray\")\n    translate([-5, 0, -5])\n    cube([15, 12, 10], center=true);\n    \n    // Cylinders\n    for(i=[0:1]) {\n        translate([2, -3+i*6, 8])\n        color(\"silver\")\n        cylinder(d=5, h=8, $fn=20);\n    }\n}\n\n// Exhaust pipes\nmodule exhaust() {\n    color(\"silver\")\n    translate([0, -10, -8])\n    rotate([0, 20, 0])\n    cylinder(d=3, h=30, $fn=20);\n    \n    translate([0, 10, -8])\n    rotate([0, 20, 0])\n    cylinder(d=3, h=30, $fn=20);\n}\n\n// Main body frame\nmodule frame() {\n    color(\"silver\")\n    // Main tube\n    rotate([0, -15, 0])\n    cylinder(d=4, h=60, $fn=20);\n    \n    // Rear supports\n    translate([-40, 0, 0])\n    rotate([0, 30, 0])\n    cylinder(d=3, h=30, $fn=20);\n    \n    // Cross bar\n    translate([-30, 0, 15])\n    rotate([90, 0, 0])\n    cylinder(d=3, h=20, center=true, $fn=20);\n}\n\n// Rear fender\nmodule rear_fender() {\n    color(\"black\")\n    translate([-40, 0, 8])\n    rotate([90, 0, 0])\n    cylinder(d=wheel_d+4, h=12, center=true, $fn=60);\n    \n    // Cut top half\n    translate([-40, 0, 15])\n    cube([wheel_d+10, wheel_d+10, 20], center=true);\n}\n\n// Assembly\ntranslate([0, 0, wheel_d/2])\nunion() {\n    // Front wheel and fork\n    translate([body_length/2-5, 0, 0])\n    union() {\n        front_fork();\n        translate([0, 0, -35-wheel_w/2])\n        wheel();\n    }\n    \n    // Rear wheel\n    translate([-body_length/2+15, 0, 0])\n    wheel();\n    \n    // Frame assembly\n    frame();\n    \n    // Fuel tank\n    translate([5, 0, 15])\n    fuel_tank();\n    \n    // Seat\n    translate([-15, 0, 15])\n    seat();\n    \n    // Engine\n    translate([0, 0, 0])\n    engine();\n    \n    // Exhaust\n    exhaust();\n    \n    // Handlebar\n    translate([body_length/2-5, 0, 35])\n    handlebar();\n    \n    // Rear fender\n    rear_fender();\n}",
    "renders": true
  },
  {
    "toy": "engine",
    "openscad_code": "// Toy Engine Block - Medium Complexity Realistic Style\n// Overall size: ~100mm long x 60mm wide x 80mm tall\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main engine block\nmodule engine_block() {\n    difference() {\n        // Main block body\n        union() {\n            // Central cylinder block\n            translate([0, 0, 20])\n                cube([80, 50, 40], center=true);\n            \n            // Front timing cover\n            translate([-45, 0, 20])\n                cube([20, 50, 35], center=true);\n            \n            // Rear transmission mount\n            translate([45, 0, 15])\n                cube([20, 45, 30], center=true);\n        }\n        \n        // Cylinder bores - 4 cylinders\n        for(i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([0, i * 10, 35])\n                cylinder(h=15, r=8);\n        }\n        \n        // Oil drain plug hole\n        translate([20, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=4);\n    }\n}\n\n// Cylinder head\nmodule cylinder_head() {\n    difference() {\n        translate([0, 0, 50])\n            cube([70, 55, 20], center=true);\n        \n        // Spark plug holes\n        for(i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([10, i * 10, 60])\n                rotate([90, 0, 0])\n                    cylinder(h=15, r=3);\n        }\n    }\n}\n\n// Intake manifold\nmodule intake_manifold() {\n    translate([0, 32, 35])\n        cube([60, 15, 25], center=true);\n}\n\n// Exhaust manifold\nmodule exhaust_manifold() {\n    union() {\n        // Main exhaust pipe\n        translate([0, -32, 30])\n            cube([60, 15, 20], center=true);\n        \n        // Exhaust pipes\n        for(i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([i * 15, -42, 30])\n                cylinder(h=15, r=4);\n        }\n    }\n}\n\n// Oil pan\nmodule oil_pan() {\n    difference() {\n        translate([0, 0, 5])\n            cube([75, 45, 10], center=true);\n        \n        // Drain bolt access\n        translate([20, 0, 5])\n            cylinder(h=12, r=5);\n    }\n}\n\n// Pulleys and belts\nmodule pulley_system() {\n    // Main crank pulley\n    translate([-55, 0, 35])\n        cylinder(h=10, r=15);\n    \n    // Alternator pulley\n    translate([-45, 20, 50])\n        cylinder(h=8, r=8);\n    \n    // Water pump pulley\n    translate([-45, -20, 50])\n        cylinder(h=8, r=8);\n    \n    // Drive belt\n    translate([-50, 0, 42])\n        rotate([0, 90, 0])\n            cylinder(h=30, r=2);\n}\n\n// Engine mounts\nmodule engine_mounts() {\n    // Front mount\n    translate([-45, 0, 10])\n        cube([10, 20, 5], center=true);\n    \n    // Rear mounts\n    translate([45, 15, 10])\n        cube([10, 10, 5], center=true);\n    translate([45, -15, 10])\n        cube([10, 10, 5], center=true);\n}\n\n// Assembly\nunion() {\n    engine_block();\n    cylinder_head();\n    intake_manifold();\n    exhaust_manifold();\n    oil_pan();\n    pulley_system();\n    engine_mounts();\n}",
    "renders": true
  },
  {
    "toy": "yacht",
    "openscad_code": "// Yacht Toy - Realistic Medium Complexity\n// Hull, deck, cabin, mast, rigging, keel, rudder, railings\n\n// Overall dimensions\nyacht_length = 120;\nyacht_width = 30;\nhull_height = 15;\ndeck_thickness = 2;\ncabin_height = 18;\n\n// Hull with rounded bow and squared stern\nmodule hull() {\n    difference() {\n        // Main hull body (tapered)\n        hull_union();\n        // Remove bottom to create hollow shell\n        translate([0, 0, -hull_height/2 - 1])\n            cube([yacht_length + 2, yacht_width + 2, hull_height], center = true);\n    }\n}\n\nmodule hull_union() {\n    union() {\n        // Main hull block\n        translate([0, 0, 0])\n            scale([1, 0.8, 1])\n                cube([yacht_length, yacht_width, hull_height], center = true);\n        \n        // Rounded bow (half cylinder)\n        translate([yacht_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = yacht_width * 0.8, r = yacht_width/2, center = true);\n        \n        // Hull bottom curve (keel shape)\n        translate([0, 0, -hull_height/2 + 2])\n            cube([yacht_length - 10, yacht_width - 4, 4], center = true);\n    }\n}\n\n// Deck with openings\nmodule deck() {\n    difference() {\n        // Main deck\n        translate([0, 0, hull_height/2])\n            cube([yacht_length - 5, yacht_width - 2, deck_thickness], center = true);\n        \n        // Cabin opening\n        translate([-yacht_length/4, 0, hull_height/2])\n            cube([yacht_length/2, yacht_width/2, deck_thickness + 1], center = true);\n    }\n}\n\n// Cabin superstructure\nmodule cabin() {\n    translate([-yacht_length/4, 0, hull_height/2 + deck_thickness + cabin_height/2])\n        difference() {\n            // Main cabin block\n            cube([yacht_length/2 - 10, yacht_width/2 - 4, cabin_height], center = true);\n            \n            // Cabin roof slope\n            translate([0, 0, cabin_height/2 - 1])\n                cube([yacht_length/2 - 10, yacht_width/2 - 4, 2], center = true);\n            \n            // Windows (port and starboard)\n            for (y = [-yacht_width/4 + 2, yacht_width/4 - 2]) {\n                translate([y, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 2, r = 2, center = true);\n            }\n        }\n}\n\n// Cabin roof\nmodule cabin_roof() {\n    translate([-yacht_length/4, 0, hull_height/2 + deck_thickness + cabin_height + 1])\n        scale([1, 0.7, 0.3])\n            cube([yacht_length/2 - 8, yacht_width/2 - 2, 4], center = true);\n}\n\n// Mast\nmodule mast() {\n    translate([yacht_length/6, 0, hull_height/2 + deck_thickness])\n        cylinder(h = yacht_length * 0.8, r = 2, center = false);\n}\n\n// Boom\nmodule boom() {\n    translate([yacht_length/6, 0, hull_height/2 + deck_thickness + yacht_length * 0.4])\n        rotate([90, 0, 0])\n            cylinder(h = yacht_length/3, r = 1.5, center = false);\n}\n\n// Keel (weighted fin)\nmodule keel() {\n    difference() {\n        translate([0, 0, -hull_height/2 - 8])\n            cube([8, 4, 16], center = true);\n        \n        // Tapered bottom\n        translate([0, 0, -hull_height/2 - 16])\n            cylinder(h = 8, r1 = 4, r2 = 1, center = false);\n    }\n}\n\n// Rudder\nmodule rudder() {\n    translate([-yacht_length/2 + 5, 0, -hull_height/2 - 2])\n        cube([4, 2, 8], center = true);\n}\n\n// Railings (simplified as posts)\nmodule railings() {\n    for (x = [-yacht_length/2 + 5 : 10 : yacht_length/2 - 5]) {\n        for (y = [-yacht_width/2 + 2, yacht_width/2 - 2]) {\n            translate([x, y, hull_height/2 + deck_thickness + 3])\n                cylinder(h = 6, r = 1, center = false);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    deck();\n    cabin();\n    cabin_roof();\n    mast();\n    boom();\n    keel();\n    rudder();\n    railings();\n}",
    "renders": true
  },
  {
    "toy": "speedster",
    "openscad_code": "// Speedster Toy Car - Realistic Style, Medium Complexity\n// Overall dimensions: ~110mm long x 45mm wide x 35mm high\n\n// Car body module\nmodule car_body() {\n    // Main chassis\n    difference() {\n        hull() {\n            translate([0, 0, 4]) cube([85, 40, 10], center=true);\n            translate([-15, 0, 0]) cube([50, 38, 8], center=true);\n            translate([25, 0, 6]) cube([30, 35, 12], center=true);\n        }\n        \n        // Cockpit cutout\n        translate([15, 0, 10]) cube([35, 30, 20], center=true);\n    }\n    \n    // Hood slope\n    translate([-20, 0, 5]) rotate([15, 0, 0]) cube([30, 38, 8], center=true);\n    \n    // Rear spoiler\n    translate([35, 0, 15]) cube([25, 35, 3], center=true);\n    translate([42, 0, 17]) cube([10, 30, 5], center=true);\n}\n\n// Wheel module with tire and rim\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=10, r=10, center=true, $fn=32);\n        \n        // Rim cutout\n        cylinder(h=12, r=6, center=true, $fn=32);\n    }\n    \n    // Rim detail\n    color(\"gray\") {\n        for(i=[0:60:359]) {\n            rotate([0, 0, i]) translate([8, 0, 0]) cube([2, 1, 10], center=true);\n        }\n    }\n}\n\n// Axle module\nmodule axle() {\n    cylinder(h=50, r=3, center=true, $fn=16);\n}\n\n// Headlight module\nmodule headlight() {\n    translate([0, 0, 3]) sphere(r=4, $fn=16);\n    translate([0, 0, 0]) cylinder(h=6, r=3, center=false, $fn=16);\n}\n\n// Side mirror module\nmodule side_mirror() {\n    translate([0, 0, 0]) cube([8, 2, 2], center=true);\n    translate([4, 0, 2]) sphere(r=2, $fn=16);\n}\n\n// Main assembly\nunion() {\n    // Car body\n    color(\"red\") car_body();\n    \n    // Wheels - front left\n    translate([-25, -22, -8]) rotate([90, 0, 0]) color(\"black\") wheel();\n    \n    // Wheels - front right\n    translate([-25, 22, -8]) rotate([90, 0, 0]) color(\"black\") wheel();\n    \n    // Wheels - rear left\n    translate([25, -22, -8]) rotate([90, 0, 0]) color(\"black\") wheel();\n    \n    // Wheels - rear right\n    translate([25, 22, -8]) rotate([90, 0, 0]) color(\"black\") wheel();\n    \n    // Front axle\n    translate([-25, 0, -8]) rotate([0, 90, 0]) color(\"gray\") axle();\n    \n    // Rear axle\n    translate([25, 0, -8]) rotate([0, 90, 0]) color(\"gray\") axle();\n    \n    // Headlights - left\n    translate([-38, -15, 5]) color(\"yellow\") headlight();\n    \n    // Headlights - right\n    translate([-38, 15, 5]) color(\"yellow\") headlight();\n    \n    // Side mirrors - left\n    translate([5, -20, 14]) color(\"red\") side_mirror();\n    \n    // Side mirrors - right\n    translate([5, 20, 14]) color(\"red\") side_mirror();\n    \n    // Windshield\n    translate([10, 0, 15]) rotate([60, 0, 0]) \n        color(\"blue\", 0.3) cube([30, 35, 2], center=true);\n    \n    // Exhaust pipes\n    translate([42, -8, 0]) rotate([0, 10, 0]) color(\"gray\") \n        cylinder(h=15, r=2, center=false, $fn=16);\n    translate([42, 8, 0]) rotate([0, 10, 0]) color(\"gray\") \n        cylinder(h=15, r=2, center=false, $fn=16);\n}",
    "renders": true
  },
  {
    "toy": "bulldozer",
    "openscad_code": "// Bulldozer Toy - Realistic Style, Medium Complexity\n// Dimensions: ~120mm L x 60mm W x 55mm H\n\nmodule main_track() {\n    // Single track segment with tread pattern\n    difference() {\n        cube([30, 12, 6]);  // Track base\n        for (i = [0:2:24]) {\n            translate([i, 2, 0])\n                cube([2, 8, 3]);  // Tread gaps\n        }\n    }\n}\n\nmodule tracks() {\n    // Left track assembly\n    translate([-15, -35, 2]) {\n        for (i = [0:8]) {\n            rotate([0, 0, i * 40])\n                translate([0, 0, -i * 2])\n                    main_track();\n        }\n        // Track frame\n        cube([6, 70, 8]);\n    }\n    \n    // Right track assembly\n    translate([-15, 35, 2]) {\n        for (i = [0:8]) {\n            rotate([0, 0, i * 40])\n                translate([0, 0, -i * 2])\n                    main_track();\n        }\n        // Track frame\n        cube([6, 70, 8]);\n    }\n}\n\nmodule body() {\n    // Main body - slightly tapered\n    hull() {\n        translate([-10, -30, 8]) cube([50, 60, 25]);\n        translate([50, -25, 8]) cube([40, 50, 30]);\n    }\n    \n    // Engine compartment detail\n    translate([45, -15, 35])\n        cube([25, 30, 15]);\n    \n    // Exhaust pipe\n    translate([55, 0, 50])\n        cylinder(h=12, r=3);\n}\n\nmodule cab() {\n    // Cab structure\n    translate([20, -20, 33]) {\n        difference() {\n            cube([25, 40, 20]);\n            // Windshield\n            translate([23, 5, 5])\n                cube([3, 30, 15]);\n            // Side windows\n            translate([5, 38, 5])\n                cube([20, 3, 15]);\n        }\n    }\n    \n    // Roof\n    translate([20, -20, 53])\n        cube([25, 40, 3]);\n}\n\nmodule blade() {\n    // Blade assembly\n    translate([-25, -35, 10]) {\n        // Main blade\n        difference() {\n            rotate([0, 15, 0])\n                cube([8, 70, 35]);\n            // Blade curve\n            translate([4, 0, 15])\n                rotate([0, 15, 0])\n                    cylinder(h=10, r=30, $fn=20);\n        }\n        \n        // Blade supports\n        translate([0, -25, 0])\n            cube([15, 5, 8]);\n        translate([0, 25, 0])\n            cube([15, 5, 8]);\n        \n        // Push arms\n        translate([5, -40, 15])\n            rotate([0, -30, 0])\n                cube([30, 5, 5]);\n        translate([5, 40, 15])\n            rotate([0, -30, 0])\n                cube([30, 5, 5]);\n    }\n}\n\nmodule lights() {\n    // Headlights\n    translate([45, -20, 35])\n        cylinder(h=5, r=4);\n    translate([45, 20, 35])\n        cylinder(h=5, r=4);\n}\n\n// Assembly\ntracks();\nbody();\ncab();\nblade();\nlights();",
    "renders": true
  },
  {
    "toy": "glider",
    "openscad_code": "// Toy Glider - medium complexity realistic style\n// Overall dimensions: ~120mm wingspan, ~100mm length\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nwing_span = 120;\nfuselage_length = 100;\nfuselage_diameter = 12;\ntail_span = 40;\n\n// Fuselage\nmodule fuselage() {\n    // Main body tube\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = fuselage_length, d = fuselage_diameter, $fn = 16);\n    \n    // Nose cone\n    translate([0, 0, fuselage_length/2])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d1 = fuselage_diameter, d2 = 5, $fn = 16);\n    \n    // Tail cone\n    translate([0, 0, -fuselage_length/2 - 5])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d1 = 5, d2 = fuselage_diameter, $fn = 16);\n}\n\n// Main wing\nmodule main_wing() {\n    // Wing root\n    translate([0, 0, 0])\n        cube([fuselage_diameter + 4, 8, 4], center = true);\n    \n    // Left wing\n    difference() {\n        translate([-wing_span/4, 0, 0])\n            cube([wing_span/2 - 5, 4, 2], center = true);\n        \n        // Wing tip rounding\n        translate([-wing_span/2 + 2.5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 4, r = 2, $fn = 8);\n    }\n    \n    // Right wing\n    difference() {\n        translate([wing_span/4, 0, 0])\n            cube([wing_span/2 - 5, 4, 2], center = true);\n        \n        // Wing tip rounding\n        translate([wing_span/2 - 2.5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 4, r = 2, $fn = 8);\n    }\n    \n    // Wing struts\n    for (x = [-30, 30]) {\n        translate([x, 0, -10])\n            cylinder(h = 10, d = 2, $fn = 8);\n        \n        translate([x, 0, -10])\n            rotate([90, 0, 0])\n            cylinder(h = 5, d = 2, $fn = 8);\n    }\n}\n\n// Horizontal tail\nmodule horizontal_tail() {\n    // Tail boom\n    translate([0, 0, -fuselage_length/2 - 12])\n        cube([fuselage_diameter, 4, 8], center = true);\n    \n    // Left stabilizer\n    translate([-tail_span/4, 0, -fuselage_length/2 - 12])\n        cube([tail_span/2 - 5, 2, 3], center = true);\n    \n    // Right stabilizer\n    translate([tail_span/4, 0, -fuselage_length/2 - 12])\n        cube([tail_span/2 - 5, 2, 3], center = true);\n}\n\n// Vertical fin\nmodule vertical_fin() {\n    // Fin base\n    translate([0, 0, -fuselage_length/2 - 12])\n        cube([4, 2, 15], center = true);\n    \n    // Fin\n    translate([0, 0, -fuselage_length/2 - 12 + 8])\n        cube([2, 2, 10], center = true);\n}\n\n// Cockpit\nmodule cockpit() {\n    // Cockpit opening\n    difference() {\n        translate([0, 0, 15])\n            rotate([90, 0, 0])\n            cylinder(h = 25, d = 8, $fn = 16);\n    }\n    \n    // Pilot figure (simplified)\n    translate([0, 0, 25])\n        sphere(d = 5, $fn = 8);\n}\n\n// Landing skid\nmodule landing_skid() {\n    // Left skid\n    translate([-10, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 3, $fn = 8);\n    \n    // Right skid\n    translate([10, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 3, $fn = 8);\n    \n    // Cross brace\n    translate([0, 0, -15])\n        cube([20, 3, 3], center = true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    fuselage();\n    main_wing();\n    horizontal_tail();\n    vertical_fin();\n    cockpit();\n    landing_skid();\n    \n    // Decorative details\n    // Registration number\n    translate([0, -2, 20])\n        rotate([0, 90, 0])\n        cube([8, 1, 6]);\n    \n    // Wing stripes\n    for (x = [-40:20:40]) {\n        translate([x, 0, 1])\n            cube([15, 5, 0.5], center = true);\n    }\n}",
    "renders": true
  },
  {
    "toy": "copter",
    "openscad_code": "// Toy RC Copter – realistic medium-complexity printable model\n// Approx. 130 mm rotor tip-to-tail, 40 mm height\n$fa = 2; $fs = 1;\n\nmodule main() {\n    body();\n    tail_boom();\n    landing_skids();\n    rotor_assembly(\"top\");\n    rotor_assembly(\"tail\");\n    stabilizers();\n}\n\n// Central fuselage\nmodule body() {\n    // Main shell\n    hull() {\n        translate([0,0,15]) cube([60,24,30], center=true);\n        translate([0,0,25]) sphere(d=26);\n    }\n    // Cockpit window\n    difference() {\n        translate([0,0,25]) sphere(d=26);\n        translate([0,12,25]) sphere(d=24);\n    }\n    // Toy motor bumps\n    for(x=[-20,20]) translate([x,0,10]) cylinder(h=8,d=12);\n}\n\n// Thin tail boom\nmodule tail_boom() {\n    translate([-35,0,15])\n        rotate([0,90,0]) cylinder(h=60, d=10, center=true);\n}\n\n// Landing skids with struts\nmodule landing_skids() {\n    module strut(x) {\n        translate([x,0,0]) cylinder(h=15, d=4);\n    }\n    module rail() {\n        translate([0,-12,0]) cube([50,3,3], center=true);\n    }\n\n    for(side=[-1,1]) {\n        translate([0,side*12,0]) {\n            // rails\n            translate([5,0,2]) rail();\n            // struts\n            strut( -20);\n            strut(  10);\n        }\n    }\n}\n\n// Rotor assembly: top or tail\nmodule rotor_assembly(loc) {\n    if(loc==\"top\") {\n        // mast\n        translate([0,0,45]) cylinder(h=15, d=6);\n        // rotor hub\n        translate([0,0,60]) cylinder(h=6, d=12);\n        // blades\n        for(a=[0:120:240]) {\n            rotate([0,0,a]) {\n                translate([40,0,60]) cube([80,4,1.5], center=true);\n            }\n        }\n    }\n    if(loc==\"tail\") {\n        // tail rotor\n        translate([-65,0,15]) rotate([0,90,0]) {\n            cylinder(h=4, d=6);               // hub\n            for(a=[0:90:270]) {\n                rotate([a,0,0])\n                    translate([0,10,0]) cube([15,20,2], center=true);\n            }\n        }\n    }\n}\n\n// Tail stabilizers\nmodule stabilizers() {\n    // vertical fin\n    translate([-60,0,30]) rotate([0,90-20,0])\n        cube([25,2,15], center=true);\n    // horizontal stabilizer\n    translate([-55,0,20]) rotate([0,0,0])\n        cube([20,40,1.5], center=true);\n}\n\n// Print it\nmain();",
    "renders": true
  },
  {
    "toy": "locomotive",
    "openscad_code": "// Locomotive Toy - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm (length) x 40mm (width) x 60mm (height)\n\n// Base parameters\n$fn = 32;\nlength = 120;\nwidth = 40;\nheight = 60;\nwall = 2;\n\nmodule main() {\n    // Locomotive body\n    color(\"darkgreen\")\n    translate([-length/2, -width/2, 0])\n    cube([length, width, height*0.6]);\n\n    // Cab\n    color(\"black\")\n    translate([length*0.3, -width/2, height*0.6])\n    cube([length*0.4, width, height*0.4]);\n\n    // Boiler\n    color(\"red\")\n    translate([-length*0.3, -width*0.3, height*0.6])\n    cylinder(h=length*0.6, r=width*0.3);\n\n    // Smokestack\n    color(\"darkgray\")\n    translate([-length*0.45, 0, height*0.6+width*0.3])\n    cylinder(h=height*0.3, r1=width*0.1, r2=width*0.08);\n\n    // Wheels\n    for(i=[-1, 1]) {\n        translate([i*length*0.3, -width/2-wall, wall]) rotate([90,0,0])\n        wheel();\n        translate([i*length*0.1, -width/2-wall, wall]) rotate([90,0,0])\n        wheel();\n        translate([-i*length*0.3, -width/2-wall, wall]) rotate([90,0,0])\n        wheel();\n    }\n\n    // Front coupling\n    color(\"gray\")\n    translate([-length/2-5, 0, wall*2])\n    cube([10, width*0.1, wall]);\n\n    // Headlight\n    color(\"yellow\")\n    translate([-length/2+5, 0, height*0.8])\n    sphere(r=width*0.15);\n}\n\nmodule wheel() {\n    difference() {\n        // Outer wheel\n        cylinder(h=wall*2, r=width*0.25);\n        \n        // Spokes\n        for(i=[0:45:135]) {\n            rotate([0,0,i])\n            translate([width*0.1, -wall-1, -1])\n            cube([width*0.15, wall+2, wall+2]);\n        }\n        \n        // Center hole\n        cylinder(h=wall*2, r=width*0.1);\n    }\n}\n\nmain();",
    "renders": true
  },
  {
    "toy": "sailboat",
    "openscad_code": "// Realistic Toy Sailboat - Medium Complexity\n// Overall length ~120mm, width ~40mm, height ~110mm\n\n// Parameters\nhull_length = 100;\nhull_width = 35;\nhull_height = 20;\ndeck_thickness = 2;\nmast_height = 80;\nboom_length = 45;\nkeel_depth = 15;\nrudder_height = 20;\n\n// Hull - main body of the boat\nmodule hull() {\n    difference() {\n        // Main hull shape\n        hull_shape();\n        \n        // Hollow out the hull for printing\n        translate([0, 0, -keel_depth/2])\n            scale([0.85, 0.85, 0.9])\n                hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    hull_points = [\n        [-hull_length/2, -hull_width/2, 0],\n        [hull_length/2, -hull_width/2, 0],\n        [hull_length/2, hull_width/2, 0],\n        [-hull_length/2, hull_width/2, 0],\n        [-hull_length/2 + 10, -hull_width/2 + 5, hull_height],\n        [hull_length/2 - 20, -hull_width/2 + 5, hull_height],\n        [hull_length/2 - 20, hull_width/2 - 5, hull_height],\n        [-hull_length/2 + 10, hull_width/2 - 5, hull_height]\n    ];\n    hull() {\n        for (pt = hull_points) translate(pt) sphere(d=2);\n    }\n}\n\n// Deck surface\nmodule deck() {\n    translate([0, 0, hull_height])\n        cube([hull_length - 10, hull_width - 10, deck_thickness], center=true);\n}\n\n// Mast with reinforcement\nmodule mast() {\n    // Main mast pole\n    translate([0, 0, hull_height + deck_thickness + mast_height/2])\n        cylinder(h=mast_height, d=4, center=true);\n    \n    // Mast base reinforcement\n    translate([0, 0, hull_height + deck_thickness])\n        cylinder(h=5, d1=8, d2=4, center=false);\n}\n\n// Boom (horizontal spar)\nmodule boom() {\n    translate([boom_length/2 - 10, 0, hull_height + deck_thickness + mast_height*0.7])\n        rotate([90, 0, 0])\n            cylinder(h=boom_length, d=3, center=false);\n}\n\n// Sails\nmodule sail() {\n    // Main sail\n    color(\"white\") {\n        translate([-10, 0, hull_height + deck_thickness + mast_height*0.7])\n            rotate([90, 0, 0])\n                linear_extrude(height=2)\n                    polygon(points=[\n                        [0, 0],\n                        [boom_length - 10, 0],\n                        [boom_length - 20, -mast_height*0.6],\n                        [0, -mast_height*0.6 + 5]\n                    ]);\n    }\n}\n\n// Keel for stability\nmodule keel() {\n    translate([0, 0, -keel_depth/2])\n        cube([hull_length*0.3, hull_width*0.1, keel_depth], center=true);\n}\n\n// Rudder\nmodule rudder() {\n    translate([-hull_length/2 + 5, 0, hull_height/2])\n        rotate([0, 10, 0])\n            cube([3, hull_width*0.6, rudder_height], center=true);\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([hull_length/4, 0, hull_height + deck_thickness])\n        cube([hull_length*0.3, hull_width*0.6, hull_height*0.6], center=true);\n    \n    // Cabin roof\n    translate([hull_length/4, 0, hull_height + deck_thickness + hull_height*0.4])\n        cube([hull_length*0.35, hull_width*0.7, 2], center=true);\n}\n\n// Porthole details\nmodule portholes() {\n    for (i = [0:2]) {\n        translate([hull_length/4 - 10 + i*15, hull_width/2 - 3, hull_height/2 + 5])\n            rotate([0, 90, 0])\n                cylinder(h=2, d=4, center=true);\n        translate([hull_length/4 - 10 + i*15, -hull_width/2 + 3, hull_height/2 + 5])\n            rotate([0, 90, 0])\n                cylinder(h=2, d=4, center=true);\n    }\n}\n\n// Railings\nmodule railings() {\n    // Stanchions\n    for (i = [-4:4]) {\n        translate([i*10, hull_width/2 - 3, hull_height + deck_thickness + 5])\n            cylinder(h=8, d=2, center=false);\n        translate([i*10, -hull_width/2 + 3, hull_height + deck_thickness + 5])\n            cylinder(h=8, d=2, center=false);\n    }\n    \n    // Top rail\n    translate([0, hull_width/2 - 3, hull_height + deck_thickness + 9])\n        cube([hull_length - 15, 2, 2], center=true);\n    translate([0, -hull_width/2 + 3, hull_height + deck_thickness + 9])\n        cube([hull_length - 15, 2, 2], center=true);\n}\n\n// Assembly\nunion() {\n    hull();\n    deck();\n    keel();\n    mast();\n    boom();\n    sail();\n    rudder();\n    cabin();\n    portholes();\n    railings();\n}",
    "renders": true
  },
  {
    "toy": "coupe",
    "openscad_code": "// Coupe toy car - medium complexity realistic style\n// Overall dimensions: ~120mm long, ~50mm wide, ~35mm high\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Lower chassis\n    difference() {\n        hull() {\n            cube([85, 50, 12], center = true);\n            translate([30, 0, 0]) cube([25, 45, 12], center = true);\n            translate([-30, 0, 0]) cube([25, 45, 12], center = true);\n        }\n        \n        // Wheel wells\n        translate([-35, -25, -6]) cylinder(h = 15, r = 12);\n        translate([-35, 25, -6]) cylinder(h = 15, r = 12);\n        translate([35, -25, -6]) cylinder(h = 15, r = 12);\n        translate([35, 25, -6]) cylinder(h = 15, r = 12);\n    }\n}\n\n// Cabin\nmodule cabin() {\n    difference() {\n        hull() {\n            cube([60, 45, 18], center = true);\n            translate([0, 0, 8]) cube([55, 42, 15], center = true);\n            translate([0, 0, 15]) cube([50, 38, 8], center = true);\n        }\n        \n        // Windows\n        translate([0, 0, 12]) cube([48, 40, 10], center = true);\n    }\n}\n\n// Hood\nmodule hood() {\n    hull() {\n        cube([40, 48, 10], center = true);\n        translate([0, 0, 5]) cube([38, 46, 8], center = true);\n    }\n}\n\n// Trunk\nmodule trunk() {\n    hull() {\n        translate([-45, 0, 0]) cube([20, 46, 8], center = true);\n        translate([-45, 0, 3]) cube([18, 44, 6], center = true);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    module wheel(pos_x, pos_y) {\n        translate([pos_x, pos_y, -7]) {\n            difference() {\n                // Tire\n                cylinder(h = 14, r = 12);\n                \n                // Hub\n                cylinder(h = 15, r = 8);\n                \n                // Axle hole\n                cylinder(h = 16, r = 3);\n            }\n            \n            // Rim details\n            for(i = [0:3:359]) {\n                rotate([0, 0, i]) \n                    translate([6, 0, 7]) \n                    cube([1, 1, 2], center = true);\n            }\n        }\n    }\n    \n    wheel(-35, -25);\n    wheel(-35, 25);\n    wheel(35, -25);\n    wheel(35, 25);\n}\n\n// Headlights\nmodule headlights() {\n    translate([42, -15, 2]) cylinder(h = 5, r = 4);\n    translate([42, 15, 2]) cylinder(h = 5, r = 4);\n}\n\n// Taillights\nmodule taillights() {\n    translate([-52, -15, 2]) cylinder(h = 5, r = 4);\n    translate([-52, 15, 2]) cylinder(h = 5, r = 4);\n}\n\n// Exhaust\nmodule exhaust() {\n    translate([-55, -18, -2]) \n        rotate([90, 0, 0]) \n        cylinder(h = 15, r = 2);\n}\n\n// Windshield frame\nmodule windshield() {\n    difference() {\n        translate([0, 0, 18]) cube([50, 42, 2], center = true);\n        translate([0, 0, 19]) cube([48, 40, 1], center = true);\n    }\n}\n\n// Door handles\nmodule door_handles() {\n    translate([15, 20, 3]) cube([8, 3, 2], center = true);\n    translate([-15, 20, 3]) cube([8, 3, 2], center = true);\n}\n\n// Side mirrors\nmodule mirrors() {\n    translate([20, 25, 12]) {\n        cylinder(h = 8, r = 2);\n        translate([0, 5, 4]) cube([4, 4, 3], center = true);\n    }\n    translate([20, -25, 12]) {\n        cylinder(h = 8, r = 2);\n        translate([0, -5, 4]) cube([4, 4, 3], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([20, 0, 8]) hood();\n    translate([-35, 0, 8]) trunk();\n    translate([0, 0, 15]) cabin();\n    wheels();\n    headlights();\n    taillights();\n    exhaust();\n    windshield();\n    door_handles();\n    mirrors();\n}",
    "renders": true
  },
  {
    "toy": "dumper",
    "openscad_code": "// Dumper truck toy - realistic style, medium complexity\n// Overall dimensions: ~120mm long x ~60mm wide x ~65mm high\n\n// Main truck body\nmodule truck_body() {\n    // Cabin base\n    translate([0, 0, 8]) cube([30, 50, 25], center=true);\n    \n    // Cabin roof\n    translate([0, 0, 24]) cube([26, 46, 8], center=true);\n    \n    // Windshield\n    difference() {\n        translate([-14, 0, 15]) cube([4, 42, 18], center=true);\n        translate([-16, 0, 15]) cube([8, 38, 14], center=true);\n    }\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([0, side * 22, 18]) cube([26, 2, 12], center=true);\n    }\n}\n\n// Dumper bed\nmodule dumper_bed() {\n    // Main bed\n    translate([40, 0, 30]) rotate([0, -20, 0]) cube([50, 48, 20], center=true);\n    \n    // Bed sides\n    for(side = [-1, 1]) {\n        translate([40, side * 24, 30]) rotate([0, -20, 0]) cube([50, 4, 24], center=true);\n    }\n    \n    // Bed back\n    translate([65, 0, 30]) rotate([0, -20, 0]) cube([4, 44, 24], center=true);\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=12, center=true, $fn=20);\n        cylinder(h=10, r=4, center=true, $fn=16);\n    }\n}\n\n// Suspension blocks\nmodule suspension_block() {\n    cube([8, 8, 12], center=true);\n}\n\n// Headlights\nmodule headlight() {\n    sphere(r=3);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([0, 0, 0]) cylinder(h=20, r=4, center=false);\n    translate([0, 0, 20]) sphere(r=5);\n}\n\n// Chassis\nmodule chassis() {\n    // Main frame\n    translate([15, 0, 4]) cube([70, 40, 8], center=true);\n    \n    // Front bumper\n    translate([-18, 0, 8]) cube([8, 44, 10], center=true);\n    \n    // Rear support\n    translate([55, 0, 4]) cube([8, 40, 12], center=true);\n}\n\n// Main assembly\nunion() {\n    // Chassis\n    chassis();\n    \n    // Truck body\n    truck_body();\n    \n    // Dumper bed\n    dumper_bed();\n    \n    // Wheels\n    translate([-10, 25, 8]) wheel();\n    translate([-10, -25, 8]) wheel();\n    translate([20, 25, 8]) wheel();\n    translate([20, -25, 8]) wheel();\n    translate([50, 25, 8]) wheel();\n    translate([50, -25, 8]) wheel();\n    \n    // Suspension blocks\n    translate([-10, 25, 2]) suspension_block();\n    translate([-10, -25, 2]) suspension_block();\n    translate([20, 25, 2]) suspension_block();\n    translate([20, -25, 2]) suspension_block();\n    translate([50, 25, 2]) suspension_block();\n    translate([50, -25, 2]) suspension_block();\n    \n    // Headlights\n    translate([-18, 20, 16]) headlight();\n    translate([-18, -20, 16]) headlight();\n    \n    // Exhaust pipe\n    translate([0, 20, 30]) exhaust();\n    \n    // Dumper hinge\n    translate([25, 0, 20]) rotate([0, 90, 0]) cylinder(h=50, r=4, center=true, $fn=16);\n}",
    "renders": true
  },
  {
    "toy": "fighter",
    "openscad_code": "// Fighter toy - realistic style, medium complexity\n// Wingspan ~120mm, length ~90mm, designed for 3D printing with 2mm walls\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nwing_span = 120;\nfuselage_length = 90;\nbody_height = 25;\nwing_thickness = 4;\n\nmodule fuselage() {\n    // Central body\n    difference() {\n        hull() {\n            // Main body segment\n            translate([0, 0, 0]) \n                scale([1, 0.7, 0.4]) \n                sphere(d=body_height*2.5);\n            // Nose cone\n            translate([fuselage_length/2-5, 0, 0])\n                scale([0.8, 0.6, 0.3])\n                sphere(d=body_height*2);\n            // Tail taper\n            translate([-fuselage_length/2+5, 0, 0])\n                scale([0.6, 0.5, 0.3])\n                sphere(d=body_height*1.8);\n        }\n        // Cockpit cavity\n        translate([10, 0, body_height/2])\n            scale([1.5, 0.8, 0.5])\n            sphere(d=body_height*1.2);\n    }\n    \n    // Cockpit canopy\n    translate([15, 0, body_height/2+2])\n        scale([1.2, 0.7, 0.4])\n        sphere(d=body_height);\n}\n\nmodule wings() {\n    // Main wings\n    difference() {\n        // Left wing\n        translate([-wing_span/4, 0, 0])\n            rotate([0, 0, 15])\n            scale([wing_span/2, wing_thickness, body_height*1.5])\n            cube([1, 1, 1], center=true);\n        // Wing root cutout\n        translate([0, 0, 0])\n            sphere(d=body_height*1.8);\n    }\n    \n    mirror([1, 0, 0]) {\n        translate([-wing_span/4, 0, 0])\n            rotate([0, 0, 15])\n            scale([wing_span/2, wing_thickness, body_height*1.5])\n            cube([1, 1, 1], center=true);\n    }\n    \n    // Wing tips with missile pylons\n    for (x = [-wing_span/2+5, wing_span/2-5]) {\n        translate([x, 0, -body_height/2])\n            cylinder(h=8, d=6);\n    }\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    translate([-fuselage_length/2+5, 0, body_height])\n        rotate([0, 15, 0])\n        scale([0.8, 0.15, 2])\n        cube([25, wing_thickness, 20], center=true);\n    \n    // Horizontal stabilizers\n    translate([-fuselage_length/2+3, 0, body_height/2])\n        rotate([0, 0, 30])\n        scale([0.8, 0.15, 1.5])\n        cube([35, wing_thickness, 15], center=true);\n    \n    mirror([0, 1, 0]) {\n        translate([-fuselage_length/2+3, 0, body_height/2])\n            rotate([0, 0, 30])\n            scale([0.8, 0.15, 1.5])\n            cube([35, wing_thickness, 15], center=true);\n    }\n}\n\nmodule engines() {\n    // Engine nacelles under wings\n    for (x = [-wing_span/3, wing_span/3]) {\n        translate([x, 0, -body_height/2-8])\n            rotate([90, 0, 0])\n            cylinder(h=20, d1=10, d2=8);\n        \n        // Engine intake\n        translate([x, 0, -body_height/2-8])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=12);\n    }\n}\n\nmodule landing_gear() {\n    // Main gear\n    for (x = [-wing_span/3, wing_span/3]) {\n        translate([x, 0, -body_height/2-12])\n            cylinder(h=8, d=3);\n        translate([x, 0, -body_height/2-20])\n            sphere(d=6);\n    }\n    \n    // Nose gear\n    translate([fuselage_length/2-20, 0, -body_height/2-10])\n        cylinder(h=12, d=3);\n    translate([fuselage_length/2-20, 0, -body_height/2-22])\n        sphere(d=6);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    tail_fin();\n    engines();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "toy": "whirly",
    "openscad_code": "// Whirly Toy - Realistic Style with Medium Complexity\n// A spinning top toy with handle and decorative elements\n\n// Parameters\n$fa = 1;\n$fs = 0.5;\nhandle_length = 50;\nhandle_diameter = 8;\ntop_base_diameter = 40;\ntop_height = 25;\nspindle_diameter = 6;\nspindle_height = 15;\ntip_angle = 30;\nwall_thickness = 2;\n\nmodule handle() {\n    // Main handle grip\n    difference() {\n        // Handle shaft\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip rings\n        for(i = [-20:10:20]) {\n            translate([0, 0, i]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=handle_diameter, d=handle_diameter+4, center=true);\n                        cylinder(h=handle_diameter+2, d=handle_diameter, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Handle end cap\n    translate([0, 0, handle_length/2 + 2]) {\n        sphere(d=handle_diameter + 4);\n    }\n}\n\nmodule spinning_top() {\n    // Main top body\n    difference() {\n        // Outer shell\n        cylinder(h=top_height, d=top_base_diameter, center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness]) {\n            cylinder(h=top_height - wall_thickness*2, d=top_base_diameter - wall_thickness*2, center=true);\n        }\n    }\n    \n    // Decorative rings\n    for(i = [-top_height/2 + 5:5:top_height/2 - 5]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h=2, d=top_base_diameter + 2, center=true);\n                cylinder(h=3, d=top_base_diameter, center=true);\n            }\n        }\n    }\n    \n    // Spindle\n    translate([0, 0, top_height/2 + spindle_height/2]) {\n        cylinder(h=spindle_height, d=spindle_diameter, center=true);\n    }\n    \n    // Pointed tip\n    translate([0, 0, -top_height/2 - 5]) {\n        difference() {\n            cylinder(h=10, d1=spindle_diameter, d2=1, center=false);\n            // Hollow tip\n            cylinder(h=8, d1=spindle_diameter-wall_thickness*2, d2=1, center=false);\n        }\n    }\n    \n    // Decorative spiral pattern\n    for(i = [0:30:360]) {\n        rotate([0, 0, i]) {\n            translate([top_base_diameter/2 - wall_thickness, 0, -top_height/2 + 5]) {\n                cube([wall_thickness, 3, top_height - 10], center=true);\n            }\n        }\n    }\n}\n\nmodule whirly_toy() {\n    union() {\n        // Handle\n        translate([0, 0, handle_length/2 + top_height/2 + spindle_height]) {\n            handle();\n        }\n        \n        // Spinning top\n        translate([0, 0, 0]) {\n            spinning_top();\n        }\n        \n        // Connection joint\n        translate([0, 0, top_height/2 + spindle_height]) {\n            difference() {\n                sphere(d=spindle_diameter + 4);\n                cylinder(h=spindle_diameter + 5, d=spindle_diameter - 2, center=true);\n            }\n        }\n    }\n}\n\n// Render the complete toy\nwhirly_toy();",
    "renders": true
  },
  {
    "toy": "caboose",
    "openscad_code": "// Realistic Toy Caboose - Medium Complexity\n// Overall size: 100mm long x 45mm wide x 55mm tall\n\n// Main body module\nmodule caboose_body() {\n    // Underframe\n    cube([90, 40, 5], center=true);\n    \n    // Main cabin\n    translate([0, 0, 12.5])\n        cube([85, 38, 25], center=true);\n    \n    // Cupola\n    translate([0, 0, 32])\n        cube([40, 30, 20], center=true);\n}\n\n// Roof module\nmodule caboose_roof() {\n    // Main roof\n    translate([0, 0, 45])\n        rotate([0, 90, 0])\n            cylinder(h=85, r1=19, r2=19, center=true);\n    \n    // Cupola roof\n    translate([0, 0, 52])\n        rotate([0, 90, 0])\n            cylinder(h=40, r1=15, r2=12, center=true);\n}\n\n// Wheels module\nmodule wheels() {\n    for(i=[-30, 30]) {\n        translate([i, 0, -5])\n            cylinder(h=8, r=8, center=true);\n        translate([i, 0, -5])\n            cylinder(h=12, r=3, center=true);\n    }\n    for(i=[-10, 10]) {\n        translate([i, 0, -5])\n            cylinder(h=8, r=8, center=true);\n        translate([i, 0, -5])\n            cylinder(h=12, r=3, center=true);\n    }\n}\n\n// Couplers\nmodule couplers() {\n    // Front coupler\n    translate([-45, 0, 0])\n        cube([10, 12, 8], center=true);\n    translate([-45, 0, 0])\n        cylinder(h=12, r=6, center=true);\n    \n    // Rear coupler\n    translate([45, 0, 0])\n        cube([10, 12, 8], center=true);\n    translate([45, 0, 0])\n        cylinder(h=12, r=6, center=true);\n}\n\n// Windows\nmodule windows() {\n    // Side windows\n    for(i=[-25, -10, 10, 25]) {\n        translate([i, 19, 15])\n            cube([8, 1, 10], center=true);\n        translate([i, -19, 15])\n            cube([8, 1, 10], center=true);\n    }\n    \n    // Cupola windows\n    for(i=[-10, 10]) {\n        translate([i, 15, 40])\n            cube([6, 1, 8], center=true);\n        translate([i, -15, 40])\n            cube([6, 1, 8], center=true);\n    }\n}\n\n// Details\nmodule details() {\n    // Ladders\n    for(side=[-1, 1]) {\n        translate([40, side*20, 15])\n            for(i=[-15, -5, 5, 15]) {\n                translate([0, 0, i])\n                    cube([2, 3, 1], center=true);\n            }\n    }\n    \n    // Handrails\n    for(side=[-1, 1]) {\n        translate([0, side*19, 25])\n            rotate([90, 0, 0])\n                cylinder(h=85, r=1, center=true);\n    }\n    \n    // Smokestack\n    translate([30, 0, 32])\n        cylinder(h=8, r=4, center=true);\n    \n    // Tool boxes\n    translate([-30, 15, 7.5])\n        cube([15, 8, 5], center=true);\n    translate([-30, -15, 7.5])\n        cube([15, 8, 5], center=true);\n}\n\n// Main assembly\nunion() {\n    caboose_body();\n    caboose_roof();\n    wheels();\n    couplers();\n    windows();\n    details();\n}",
    "renders": true
  },
  {
    "toy": "skiff",
    "openscad_code": "// Toy Skiff (realistic style, medium complexity)\n// Overall dimensions: ~120mm long, ~40mm wide, ~25mm high\n\n// Basic hull shape\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Cockpit cutout\n        translate([0, 0, 5])\n            cube([80, 30, 20], center=true);\n        \n        // Drain holes\n        for(x = [-30, 30])\n            translate([x, 0, 2])\n                cylinder(h=5, d=4, center=true);\n    }\n}\n\n// Hull base shape with proper boat curves\nmodule hull_shape() {\n    union() {\n        // Main hull body using hull of cylinders\n        hull() {\n            translate([-55, 0, 0])\n                cylinder(h=40, d1=35, d2=25, center=true);\n            translate([55, 0, 0])\n                cylinder(h=40, d1=25, d2=35, center=true);\n            translate([-55, 0, 10])\n                sphere(d=35);\n            translate([55, 0, 10])\n                sphere(d=35);\n        }\n        \n        // Hull bottom reinforcement\n        translate([0, 0, -15])\n            cube([110, 40, 5], center=true);\n    }\n}\n\n// Seats for the skiff\nmodule seats() {\n    // Front seat\n    translate([-25, 0, 8])\n        seat();\n    \n    // Rear seat\n    translate([25, 0, 8])\n        seat();\n}\n\nmodule seat() {\n    difference() {\n        // Seat base\n        cube([15, 35, 3], center=true);\n        \n        // Lightening holes\n        for(y = [-12, 0, 12])\n            translate([0, y, 1.5])\n                cylinder(h=3.5, d=8, center=true);\n    }\n}\n\n// Oars\nmodule oars() {\n    // Port oar\n    translate([-10, 20, 10])\n        rotate([90, 0, 0])\n            oar();\n    \n    // Starboard oar\n    translate([-10, -20, 10])\n        rotate([90, 0, 180])\n            oar();\n}\n\nmodule oar() {\n    union() {\n        // Handle\n        cylinder(h=50, d=4, center=true);\n        \n        // Blade\n        translate([0, 0, 30])\n            scale([1, 3, 0.3])\n                sphere(d=8);\n        \n        // Handle grip\n        translate([0, 0, -25])\n            cylinder(h=10, d=6, center=true);\n    }\n}\n\n// Side railings\nmodule railings() {\n    // Port railing\n    translate([0, 18, 15])\n        railing();\n    \n    // Starboard railing\n    translate([0, -18, 15])\n        railing();\n}\n\nmodule railing() {\n    // Top rail\n    translate([0, 0, 0])\n        cube([100, 2, 2], center=true);\n    \n    // Support posts\n    for(x = [-40, -20, 0, 20, 40])\n        translate([x, 0, -6.5])\n            cube([2, 2, 15], center=true);\n}\n\n// Bow eye for towing\nmodule bow_eye() {\n    translate([55, 0, 5])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=4, center=true);\n}\n\n// Assembly\nunion() {\n    // Main hull\n    hull();\n    \n    // Seats\n    seats();\n    \n    // Railings\n    railings();\n    \n    // Oars (mounted)\n    oars();\n    \n    // Bow fitting\n    bow_eye();\n}",
    "renders": true
  },
  {
    "toy": "roadster",
    "openscad_code": "// Roadster Toy Car - Medium Complexity\n// Size: ~120mm length, printable without supports\n\n$fn = 32;\nmodule main() {\n    // Car body shell\n    difference() {\n        hull() {\n            // Front hood\n            translate([-45, 0, 8]) cube([50, 35, 12], center=true);\n            // Cabin\n            translate([0, 0, 15]) cube([55, 40, 25], center=true);\n            // Rear deck\n            translate([35, 0, 12]) cube([40, 35, 15], center=true);\n        }\n        \n        // Cockpit cutout\n        translate([5, 0, 22]) cube([45, 38, 20], center=true);\n        \n        // Windshield opening\n        translate([-12, 0, 25]) rotate([0, 15, 0]) \n            cube([25, 35, 20], center=true);\n    }\n    \n    // Chassis base\n    translate([0, 0, 2]) \n        cube([110, 45, 6], center=true);\n    \n    // Wheels\n    for(x=[-35, 35])\n        for(y=[-20, 20])\n            wheel(x, y);\n    \n    // Headlights\n    for(x=[-42, -42])\n        translate([x, 15, 12]) \n            sphere(4);\n    \n    // Taillights\n    for(x=[42, 42])\n        translate([x, 15, 14]) \n            sphere(3);\n    \n    // Exhaust pipes\n    translate([45, -12, 8]) {\n        cylinder(h=20, r=3);\n        translate([0, 6, 0]) cylinder(h=20, r=3);\n    }\n    \n    // Side mirrors\n    for(side=[-1, 1])\n        translate([-15, side*20, 22]) {\n            cube([8, 4, 4], center=true);\n            translate([4, 0, 2]) sphere(3);\n        }\n    \n    // Spoiler\n    translate([40, 0, 28]) {\n        cube([30, 2, 12], center=true);\n        for(side=[-1, 1])\n            translate([0, side*15, -6])\n                cube([2, 8, 12], center=true);\n    }\n}\n\nmodule wheel(x, y) {\n    translate([x, y, 0]) {\n        difference() {\n            // Tire\n            cylinder(h=10, r=12);\n            // Rim cutout\n            cylinder(h=11, r=8);\n        }\n        // Rim\n        color(\"silver\") \n            cylinder(h=10, r=7.5);\n    }\n}\n\n// Print-ready orientation\nrotate([0, 180, 0]) main();",
    "renders": true
  },
  {
    "toy": "pickup",
    "openscad_code": "// Toy Pickup Truck - Medium Complexity\n// Overall dimensions: 120mm long, 50mm wide, 45mm tall\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main cab and bed\n        union() {\n            // Cab\n            translate([0, 0, 10])\n                cube([50, 45, 25], center=true);\n            \n            // Truck bed\n            translate([-45, 0, 10])\n                cube([70, 40, 15], center=true);\n        }\n        \n        // Wheel wells\n        translate([-30, 20, 10])\n            cylinder(h=20, r=12);\n        translate([-30, -20, 10])\n            cylinder(h=20, r=12);\n        translate([30, 20, 10])\n            cylinder(h=20, r=12);\n        translate([30, -20, 10])\n            cylinder(h=20, r=12);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for(x = [-30, 30])\n    for(y = [-20, 20]) {\n        translate([x, y, 0])\n            cylinder(h=8, r=10);\n        translate([x, y, 8])\n            cylinder(h=2, r=8);\n        translate([x, y, 0])\n            cylinder(h=1, r=9);\n    }\n}\n\n// Cab details\nmodule cab_details() {\n    // Windshield\n    translate([20, 0, 22])\n        cube([20, 35, 0.5], center=true);\n    \n    // Windows\n    translate([10, 15, 22])\n        cube([25, 10, 12], center=true);\n    translate([10, -15, 22])\n        cube([25, 10, 12], center=true);\n    \n    // Roof\n    translate([0, 0, 35])\n        cube([45, 40, 2], center=true);\n}\n\n// Truck bed details\nmodule bed_details() {\n    // Bed walls\n    translate([-45, 0, 18])\n        cube([70, 38, 2], center=true);\n    translate([-45, 20, 12])\n        cube([70, 2, 12], center=true);\n    translate([-45, -20, 12])\n        cube([70, 2, 12], center=true);\n    \n    // Tailgate\n    translate([-80, 0, 12])\n        cube([2, 35, 12], center=true);\n}\n\n// Headlights\nmodule headlights() {\n    translate([25, 18, 15])\n        sphere(r=4);\n    translate([25, -18, 15])\n        sphere(r=4);\n}\n\n// Grille\nmodule grille() {\n    translate([25, 0, 15])\n        cube([2, 20, 10], center=true);\n    \n    // Grille bars\n    for(y = [-8:4:8])\n        translate([25, y, 15])\n            cube([2, 2, 10], center=true);\n}\n\n// Bumpers\nmodule bumpers() {\n    // Front bumper\n    translate([25, 0, 5])\n        cube([5, 48, 5], center=true);\n    \n    // Rear bumper\n    translate([-80, 0, 5])\n        cube([5, 48, 5], center=true);\n}\n\n// Side mirrors\nmodule mirrors() {\n    translate([15, 25, 25])\n        cube([8, 2, 2], center=true);\n    translate([15, -25, 25])\n        cube([8, 2, 2], center=true);\n}\n\n// Combine all parts\nunion() {\n    body();\n    wheels();\n    cab_details();\n    bed_details();\n    headlights();\n    grille();\n    bumpers();\n    mirrors();\n}",
    "renders": true
  },
  {
    "toy": "bomber",
    "openscad_code": "// Toy bomber airplane - realistic style, medium complexity\n// Wingspan ≈ 100 mm, fuselage ≈ 80 mm, suitable for 3D printing\n\nmodule fuselage() {\n    // Main body\n    difference() {\n        hull() {\n            // Front tapered section\n            translate([-30, 0, 0]) scale([1, 0.8, 0.8]) sphere(d=20, $fn=32);\n            // Mid section\n            translate([0, 0, 0]) sphere(d=22, $fn=32);\n            // Rear section\n            translate([25, 0, 0]) scale([0.9, 0.8, 0.8]) sphere(d=20, $fn=32);\n        }\n        \n        // Cockpit cutout\n        translate([5, 0, 8]) cube([20, 12, 8], center=true);\n        \n        // Tail cutout\n        translate([35, 0, 0]) cube([10, 15, 15], center=true);\n    }\n    \n    // Cockpit canopy\n    translate([15, 0, 12]) scale([1.2, 1, 0.8]) sphere(d=12, $fn=32);\n}\n\nmodule wings() {\n    // Left wing\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cube([6, 40, 2], center=true);\n            translate([5, 35, 0]) cube([4, 25, 1.5], center=true);\n        }\n        \n        // Engine cutouts\n        for (y = [-15, 15]) {\n            translate([0, y, 0]) cylinder(h=3, d=8, center=true, $fn=16);\n        }\n    }\n    \n    // Right wing (mirror)\n    mirror([0, 1, 0]) children();\n}\n\nmodule engines() {\n    // Left engines\n    for (y = [-15, 15]) {\n        translate([0, y, -6]) {\n            difference() {\n                cylinder(h=12, d=10, $fn=16);\n                translate([0, 0, -1]) cylinder(h=14, d=6, $fn=16);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Horizontal stabilizer\n    translate([38, 0, 5]) {\n        cube([4, 35, 2], center=true);\n    }\n    \n    // Vertical stabilizer\n    translate([42, 0, 12]) {\n        difference() {\n            cube([2, 4, 15], center=true);\n            translate([0, 0, -8]) cube([4, 8, 2], center=true);\n        }\n    }\n}\n\nmodule bomb_bay() {\n    // Bomb doors\n    difference() {\n        translate([5, 0, -8]) cube([30, 20, 2], center=true);\n        translate([5, 0, -9]) cube([28, 18, 2], center=true);\n    }\n    \n    // Bomb rack\n    for (x = [-5, 5, 15]) {\n        translate([x, 0, -10]) {\n            cylinder(h=8, d=3, $fn=8);\n            translate([0, 0, -4]) sphere(d=4);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Front gear\n    translate([-20, 0, -12]) {\n        cylinder(h=12, d=3, $fn=8);\n        translate([0, 0, -6]) rotate([90, 0, 0]) cylinder(h=15, d=2, center=true);\n    }\n    \n    // Main gear\n    for (y = [-25, 25]) {\n        translate([5, y, -12]) {\n            cylinder(h=12, d=4, $fn=8);\n            translate([0, 0, -6]) rotate([90, 0, 0]) cylinder(h=20, d=2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    \n    wings();\n    wings();\n    \n    engines();\n    mirror([0, 1, 0]) engines();\n    \n    tail();\n    \n    bomb_bay();\n    \n    landing_gear();\n}",
    "renders": true
  },
  {
    "toy": "rotor",
    "openscad_code": "// Rotor Toy (Helicopter Rotor Assembly)\n// Medium complexity realistic toy design\n\n// Parameters\n$fn = 32;\nblade_length = 60;\nblade_width = 12;\nblade_thickness = 2;\nhub_diameter = 20;\nhub_height = 15;\nshaft_diameter = 6;\nshaft_length = 30;\ngrip_size = 8;\ngrip_length = 25;\nconnector_size = 4;\n\n// Main rotor assembly\nmodule rotor_assembly() {\n    union() {\n        // Central hub\n        color(\"darkgreen\")\n        cylinder(d=hub_diameter, h=hub_height, center=true);\n        \n        // Shaft\n        color(\"gray\")\n        translate([0, 0, -shaft_length/2 - hub_height/2])\n        cylinder(d=shaft_diameter, h=shaft_length);\n        \n        // Blades (4 blades)\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n            blade();\n        }\n        \n        // Safety grip handle\n        translate([0, 0, hub_height/2 + grip_length/2 + 2])\n        rotate([90, 0, 0])\n        grip_handle();\n        \n        // Connector pins\n        for(i = [45:90:315]) {\n            rotate([0, 0, i])\n            translate([hub_diameter/2 - 2, 0, 0])\n            connector_pin();\n        }\n    }\n}\n\n// Individual rotor blade\nmodule blade() {\n    difference() {\n        // Main blade body\n        union() {\n            // Tapered blade shape\n            hull() {\n                translate([hub_diameter/2 + 5, 0, 0])\n                cube([blade_length, blade_width, blade_thickness], center=true);\n                \n                translate([hub_diameter/2 + blade_length - 5, 0, 0])\n                cube([blade_length/2, blade_width*0.7, blade_thickness], center=true);\n            }\n            \n            // Blade root reinforcement\n            translate([hub_diameter/4, 0, 0])\n            cube([hub_diameter/2, blade_width*1.2, blade_thickness*1.5], center=true);\n        }\n        \n        // Weight reduction holes (toy safety)\n        for(pos = [20:15:50]) {\n            translate([hub_diameter/2 + pos, 0, 0])\n            cylinder(d=3, h=blade_thickness+1, center=true);\n        }\n    }\n}\n\n// Safety grip handle for spinning\nmodule grip_handle() {\n    difference() {\n        // Handle body\n        cylinder(d=grip_size, h=grip_length, center=true);\n        \n        // Finger grooves\n        for(pos = [-8:4:8]) {\n            translate([0, 0, pos])\n            rotate([0, 90, 0])\n            cylinder(d=grip_size-2, h=2, center=true);\n        }\n        \n        // Center hole for shaft\n        cylinder(d=shaft_diameter+1, h=grip_length+2, center=true);\n    }\n}\n\n// Connector pins for assembly\nmodule connector_pin() {\n    union() {\n        cylinder(d=connector_size, h=hub_height, center=true);\n        translate([0, 0, hub_height/2])\n        sphere(d=connector_size*1.2);\n    }\n}\n\n// Base stand for display\nmodule display_stand() {\n    difference() {\n        // Main base\n        cube([80, 40, 5], center=true);\n        \n        // Shaft hole\n        translate([0, 0, 2.5])\n        cylinder(d=shaft_diameter+1, h=10, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Rotor assembly\n    rotor_assembly();\n    \n    // Display stand\n    translate([0, 0, -shaft_length - 5])\n    display_stand();\n}",
    "renders": true
  },
  {
    "toy": "tender",
    "openscad_code": "// Toy Tender (small sofa) - OpenSCAD model\n// Overall size: 120mm wide x 60mm deep x 70mm high\n// All walls 2mm thick for 3D printing\n\n$fn = 32;\n\nmodule leg(x, y) {\n    translate([x, y, 0])\n    difference() {\n        cylinder(h = 25, d = 12);           // Leg body\n        cylinder(h = 26, d = 8);            // Hollow center\n    }\n}\n\nmodule back_bar(x) {\n    translate([x, 4, 42])\n    cube([8, 4, 20], center = true);\n}\n\nmodule cushion() {\n    difference() {\n        cube([116, 56, 12], center = true); // Main cushion\n        translate([0, 0, 2])\n        cube([112, 52, 12], center = true); // Hollow bottom\n    }\n}\n\n// Main frame\ndifference() {\n    cube([120, 60, 40], center = false);   // Main body\n    translate([2, 2, 2])\n    cube([116, 56, 38], center = false);   // Hollow inside\n}\n\n// Backrest frame\ntranslate([0, 0, 40])\ndifference() {\n    cube([120, 8, 30], center = false);    // Backrest base\n    translate([2, 2, 2])\n    cube([116, 4, 26], center = false);    // Hollow back\n}\n\n// Legs\nleg(6, 6);\nleg(114, 6);\nleg(6, 54);\nleg(114, 54);\n\n// Backrest bars\nfor (x = [10:20:110]) {\n    back_bar(x);\n}\n\n// Armrests\ntranslate([0, 0, 30])\ndifference() {\n    cube([8, 60, 20], center = false);     // Left armrest\n    translate([2, 2, 2])\n    cube([4, 56, 16], center = false);\n}\n\ntranslate([112, 0, 30])\ndifference() {\n    cube([8, 60, 20], center = false);     // Right armrest\n    translate([2, 2, 2])\n    cube([4, 56, 16], center = false);\n}\n\n// Cushion\ntranslate([60, 30, 28])\ncolor(\"red\")\ncushion();",
    "renders": true
  },
  {
    "toy": "cruiser",
    "openscad_code": "// Cruiser toy - realistic style with medium complexity\n// Overall size: 120mm length x 50mm width x 75mm height\n\n// Main parameters\n$fn=32;\nwall_thickness = 2;\nscale_factor = 1;\n\n// Main hull module\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull() {\n            // Front tapered section\n            translate([50,0,25]) scale([1,0.8,0.6]) sphere(r=20);\n            // Rear wide section\n            translate([-50,0,20]) scale([1,1,0.5]) sphere(r=25);\n            // Middle connecting hull\n            translate([0,0,15]) cube([120,50,30], center=true);\n        }\n        \n        // Deck cutout for cockpit\n        translate([0,0,35]) cube([80,40,10], center=true);\n        \n        // Bottom smoothing\n        translate([0,0,-5]) cube([140,60,10], center=true);\n    }\n}\n\n// Cockpit seating area\nmodule cockpit() {\n    // Seat base\n    translate([0,0,25]) \n        cube([70,35,wall_thickness], center=true);\n    \n    // Seat back\n    translate([-25,0,32.5]) \n        rotate([10,0,0])\n        cube([wall_thickness,35,15], center=true);\n    \n    // Dashboard\n    translate([30,0,32]) \n        cube([wall_thickness,35,12], center=true);\n}\n\n// Windscreen\nmodule windscreen() {\n    translate([25,0,40]) \n        rotate([30,0,0])\n        cube([wall_thickness,40,25], center=true);\n}\n\n// Side fins\nmodule fins() {\n    for(side=[-1,1]) {\n        translate([0,side*25,20]) {\n            rotate([0,side*20,0])\n            cube([30,wall_thickness,15]);\n        }\n    }\n}\n\n// Engine details\nmodule engine() {\n    translate([-55,0,15]) {\n        // Engine block\n        cube([15,30,20], center=true);\n        \n        // Exhaust ports\n        for(i=[-1,1]) {\n            translate([-5,i*10,0])\n                cylinder(h=10, r=3);\n        }\n    }\n}\n\n// Mast and sail\nmodule mast_sail() {\n    // Mast\n    translate([0,0,40])\n        cylinder(h=40, r=2);\n    \n    // Boom\n    rotate([90,0,0])\n        translate([0,0,40])\n            cylinder(h=50, r=1.5);\n    \n    // Sail\n    translate([0,5,65])\n        rotate([100,0,0])\n        scale([1,0.7,1])\n        cube([50,wall_thickness,40]);\n}\n\n// Railing details\nmodule railings() {\n    color(\"silver\")\n    for(pos=[-30,-10,10,30]) {\n        translate([pos,22,35])\n            cylinder(h=8, r=1);\n        translate([pos,-22,35])\n            cylinder(h=8, r=1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    hull();\n    cockpit();\n    windscreen();\n    fins();\n    engine();\n    mast_sail();\n    railings();\n    \n    // Additional details\n    // Anchor\n    translate([45,0,28])\n        rotate([90,0,0])\n        cylinder(h=5, r=2);\n    \n    // Life ring\n    translate([-45,0,35])\n        rotate_extrude()\n        translate([8,0,0])\n        circle(r=2);\n}",
    "renders": true
  },
  {
    "toy": "hotrod",
    "openscad_code": "$fn = 32;\n\n// Overall toy hotrod dimensions\nbody_len = 80;\nbody_w = 35;\nbody_h = 22;\nwheel_d = 20;\nwheel_w = 10;\naxle_offset = 5;\n\nmodule hotrod() {\n    // Main body shell\n    difference() {\n        hull() {\n            // Front hood\n            translate([body_len/2 - 15, 0, body_h/2])\n                scale([1, 0.6, 0.5])\n                    sphere(d=body_w);\n            // Cabin\n            translate([0, 0, body_h/2 + 5])\n                cube([body_len/2, body_w - 10, body_h], center=true);\n            // Rear\n            translate([-body_len/2 + 10, 0, body_h/2])\n                cube([body_len/3, body_w - 5, body_h + 5], center=true);\n        }\n        // Cockpit cutout\n        translate([body_len/4 - 5, 0, body_h + 2])\n            cube([body_len/3, body_w - 15, body_h], center=true);\n    }\n\n    // Chassis frame\n    translate([0, 0, wheel_d/2])\n        cube([body_len + 10, body_w - 8, 4], center=true);\n\n    // Engine block visible at rear\n    translate([-body_len/2 + 5, 0, body_h + 5])\n        cube([20, body_w/2, 15], center=true);\n\n    // Exhaust pipes\n    for (y = [-body_w/2 - 3, body_w/2 + 3]) {\n        translate([-body_len/2 + 10, y, wheel_d/2 + 5])\n            rotate([0, 90, 0])\n                cylinder(h=body_len/3, d=4, center=true);\n    }\n\n    // Wheels with axle pins\n    for (x = [-body_len/2 + wheel_d/2 + axle_offset, body_len/2 - wheel_d/2 - axle_offset]) {\n        for (y = [-body_w/2 - wheel_w/2 - 2, body_w/2 + wheel_w/2 + 2]) {\n            // Wheel\n            translate([x, y, wheel_d/2])\n                cylinder(h=wheel_w, d=wheel_d, center=true);\n            // Tire tread pattern rings\n            for (i = [-1, 0, 1]) {\n                translate([x, y, wheel_d/2 + i * 2])\n                    cylinder(h=1.5, d=wheel_d + 2, center=true);\n            }\n            // Axle pin for toy rotation\n            translate([x, y, wheel_d/2])\n                cylinder(h=wheel_w + 4, d=4, center=true);\n        }\n    }\n\n    // Front grille\n    translate([body_len/2 - 2, 0, body_h/2])\n        cube([4, body_w - 10, body_h - 4], center=true);\n\n    // Headlights\n    for (y = [-body_w/4, body_w/4]) {\n        translate([body_len/2 + 2, y, body_h/2])\n            sphere(d=6);\n    }\n\n    // Rear lights\n    for (y = [-body_w/4, body_w/4]) {\n        translate([-body_len/2, y, body_h/2 + 2])\n            cube([4, 4, 4], center=true);\n    }\n\n    // Steering wheel for toy figure\n    translate([body_len/4 - 5, 0, body_h + 10])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=10, d=12, center=true);\n                cylinder(h=12, d=6, center=true);\n            }\n\n    // Small spoiler\n    translate([-body_len/2 + 5, 0, body_h + 15])\n        cube([body_w/2, 2, 8], center=true);\n}\n\n// Render the toy\nhotrod();",
    "renders": true
  },
  {
    "toy": "semi",
    "openscad_code": "// Toy Semi-Truck in realistic style\n// Overall dimensions: ~120mm long, ~40mm wide, ~50mm tall\n\n$fn=32;\n\n// Main module\nmodule toy_semi() {\n    // Scale to reasonable toy size\n    scale([1,1,1])\n    union() {\n        // Cab\n        translate([-40,0,10]) \n        cab();\n        \n        // Trailer\n        translate([30,0,15]) \n        trailer();\n        \n        // Fifth wheel connector\n        translate([-10,0,5]) \n        fifth_wheel();\n    }\n}\n\n// Cab module\nmodule cab() {\n    union() {\n        // Cab body\n        translate([0,0,0]) \n        cube([40,35,30], center=true);\n        \n        // Cab roof with slight curve\n        translate([0,0,20]) \n        scale([1,0.9,0.5]) \n        sphere(d=35);\n        \n        // Hood\n        translate([-25,0,5]) \n        cube([20,30,15], center=true);\n        \n        // Grille\n        translate([-35,0,8]) \n        cube([2,20,10], center=true);\n        \n        // Headlights\n        translate([-35,12,12]) \n        sphere(d=6);\n        translate([-35,-12,12]) \n        sphere(d=6);\n        \n        // Wheels\n        translate([-20,20,0]) \n        wheel();\n        translate([-20,-20,0]) \n        wheel();\n    }\n}\n\n// Trailer module\nmodule trailer() {\n    difference() {\n        // Main trailer box\n        translate([0,0,10]) \n        cube([80,35,40], center=true);\n        \n        // Door cutouts for detail\n        for(x=[-20, 0, 20]) {\n            translate([x,18,10]) \n            cube([15,2,20], center=true);\n        }\n        \n        // Window cutouts\n        for(x=[-25, -5, 15]) {\n            translate([x,18,25]) \n            cube([10,2,10], center=true);\n        }\n    }\n    \n    // Trailer wheels - double axle\n    for(side=[-1,1]) {\n        for(pos=[10,30]) {\n            translate([pos,side*20,0]) \n            wheel();\n        }\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=8, d=16, center=true);\n        \n        // Rim\n        translate([0,0,-1]) \n        cylinder(h=10, d=10, center=true);\n        \n        // Hub\n        translate([0,0,-2]) \n        cylinder(h=12, d=6, center=true);\n    }\n}\n\n// Fifth wheel connector\nmodule fifth_wheel() {\n    union() {\n        // Base plate\n        cube([15,25,2], center=true);\n        \n        // Kingpin\n        translate([0,0,-3]) \n        cylinder(h=6, d=5, center=true);\n    }\n}\n\n// Generate the model\ntoy_semi();",
    "renders": true
  },
  {
    "toy": "stealth",
    "openscad_code": "// Stealth Bomber Toy - Medium Complexity, Realistic Style\n// Overall dimensions: ~140mm wingspan, ~60mm length, ~30mm height\n\n// Main wing thickness\nwing_thickness = 4;\n\n// Cockpit module\nmodule cockpit() {\n    // Main fuselage body\n    translate([0, 0, 10])\n        scale([1, 0.6, 0.4])\n        cube([40, 20, 15], center=true);\n    \n    // Cockpit bubble\n    translate([15, 0, 18])\n        scale([1.2, 0.8, 0.6])\n        sphere(8);\n    \n    // Cockpit frame\n    difference() {\n        translate([15, 0, 18])\n            scale([1.4, 1, 0.8])\n            sphere(8.5);\n        translate([15, 0, 18])\n            scale([1.2, 0.8, 0.6])\n            sphere(8.5);\n    }\n}\n\n// Main wing\nmodule main_wing() {\n    // Left wing\n    translate([-35, 0, wing_thickness/2])\n        rotate([0, 0, 30])\n        scale([1.5, 0.3, 1])\n        cube([50, 30, wing_thickness]);\n    \n    // Right wing\n    translate([35, 0, wing_thickness/2])\n        rotate([0, 0, -30])\n        scale([1.5, 0.3, 1])\n        cube([50, 30, wing_thickness]);\n    \n    // Wing tips - left\n    translate([-60, -15, wing_thickness/2])\n        rotate([0, 0, 30])\n        cube([10, 5, wing_thickness]);\n    \n    // Wing tips - right\n    translate([60, -15, wing_thickness/2])\n        rotate([0, 0, -30])\n        cube([10, 5, wing_thickness]);\n}\n\n// Engine nacelles\nmodule engines() {\n    // Left engine\n    translate([-25, -8, 5])\n        rotate([0, 0, 30])\n        cylinder(h=15, r1=6, r2=4);\n    \n    // Right engine\n    translate([25, -8, 5])\n        rotate([0, 0, -30])\n        cylinder(h=15, r1=6, r2=4);\n    \n    // Engine exhausts\n    translate([-25, -8, 0])\n        rotate([0, 0, 30])\n        cylinder(h=3, r=4);\n    \n    translate([25, -8, 0])\n        rotate([0, 0, -30])\n        cylinder(h=3, r=4);\n}\n\n// Tail surfaces\nmodule tail() {\n    // Vertical stabilizers\n    // Left\n    translate([-45, 0, 25])\n        rotate([0, 30, 30])\n        cube([15, 2, 20]);\n    \n    // Right\n    translate([45, 0, 25])\n        rotate([0, 30, -30])\n        cube([15, 2, 20]);\n    \n    // Horizontal stabilizer\n    translate([0, -5, 30])\n        scale([0.8, 0.2, 1])\n        cube([80, 15, 3]);\n}\n\n// Landing gear bay doors\nmodule gear_doors() {\n    // Main gear doors\n    translate([0, 0, 3])\n        cube([30, 10, 1]);\n    \n    // Nose gear door\n    translate([15, 0, 3])\n        cube([8, 6, 1]);\n}\n\n// Panel lines and details\nmodule panel_details() {\n    // Wing panel lines\n    for(i = [0:2]) {\n        translate([-55 + i*20, -15, wing_thickness/2 + 0.1])\n            cube([15, 0.5, 0.2]);\n    }\n    \n    for(i = [0:2]) {\n        translate([40 + i*20, -15, wing_thickness/2 + 0.1])\n            cube([15, 0.5, 0.2]);\n    }\n    \n    // Fuselage panel lines\n    translate([0, 0, 12])\n        cube([50, 0.5, 0.2]);\n    \n    translate([0, 0, 14])\n        cube([50, 0.5, 0.2]);\n}\n\n// Assembly\nunion() {\n    cockpit();\n    main_wing();\n    engines();\n    tail();\n    gear_doors();\n    panel_details();\n}",
    "renders": true
  },
  {
    "toy": "hover",
    "openscad_code": "// Hover Toy (Air-Hockey Puck) – realistic style, medium complexity\n// Wall thickness = 2 mm, printable without supports\n\n$fn = 50;               // smooth curves\nth = 2;                 // wall / shell thickness\ndia = 70;               // outer diameter\nh   = 25;               // total height\nrim = 4;                // top rim height\npostH = 6;              // central post height\nfanBlades = 8;          // number of fan blades\nbladeLen = 18;          // fan blade length\n\nmodule puckShell() {\n    // main hollow cylinder\n    difference() {\n        cylinder(h = h, d = dia, center = true);\n        cylinder(h = h+0.2, d = dia - 2*th, center = true);\n    }\n}\n\nmodule topRim() {\n    // decorative rim on top\n    translate([0,0,h/2 - rim/2])\n        difference() {\n            cylinder(h = rim, d1 = dia, d2 = dia - 2*th);\n            cylinder(h = rim+0.2, d = dia - 4*th, center = true);\n        }\n}\n\nmodule airOutletHoles() {\n    // circular pattern of small outlet holes\n    for(i=[0:23]) {\n        rotate([0,0,i*15])\n            translate([dia/2 - th - 2, 0, -h/2 + 3])\n                rotate([90,0,0])\n                    cylinder(h = th, d = 2.2, $fn = 8); // tiny vents\n    }\n}\n\nmodule centralPost() {\n    // central motor post\n    translate([0,0,-h/2 + postH/2 + 2])\n        difference() {\n            cylinder(h = postH, d = 12);\n            cylinder(h = postH+0.2, d = 8); // hollow\n        }\n}\n\nmodule fanBlade() {\n    // single blade, printable without support\n    difference() {\n        union() {\n            translate([-bladeLen/2, -2, 0])\n                cube([bladeLen, 4, 1.5]);\n            translate([bladeLen/2-2, -1, 0])\n                cube([2, 2, 1.5]);\n        }\n        // taper\n        translate([-bladeLen/2-1, -3, -0.1])\n            cube([bladeLen+2, 6, 2]);\n    }\n}\n\nmodule fanAssembly() {\n    // radial fan blades around motor post\n    for(i=[0:fanBlades-1]) {\n        rotate([0,0,i*360/fanBlades])\n            translate([6,0, -h/2 + 2 + postH + 1])\n                fanBlade();\n    }\n}\n\nmodule gripRing() {\n    // rubbery grip ring inset on top\n    translate([0,0,h/2 - rim - 1])\n        difference() {\n            cylinder(h = 2, d = dia - 8);\n            cylinder(h = 2.2, d = dia - 12);\n        }\n}\n\n// Assembly\nunion() {\n    puckShell();\n    topRim();\n    airOutletHoles();\n    centralPost();\n    fanAssembly();\n    gripRing();\n}",
    "renders": true
  },
  {
    "toy": "express",
    "openscad_code": "// Express toy train (realistic style, medium complexity)\n// Overall length ~120mm, printable in one piece\n\n$fn = 32;  // Smooth curves for printing\nwall = 2;  // 2mm printable walls\n\nmodule train_body() {\n    // Main locomotive shell\n    difference() {\n        hull() {\n            translate([0,0,18]) cube([65,30,20], center=true);\n            translate([0,0,10]) cube([70,34,12], center=true);\n            translate([0,0,5]) cube([75,38,6], center=true);\n        }\n        \n        // Cabin cutout\n        translate([-20,0,15]) cube([25,28,25], center=true);\n        \n        // Front windows\n        for(x=[-12,12]) {\n            translate([x,16,17]) rotate([0,0,0]) cylinder(h=wall+1, r=4, center=true);\n        }\n    }\n}\n\nmodule chimney() {\n    // Stack on top front\n    translate([30,0,30]) {\n        cylinder(h=12, r1=5, r2=3);\n        translate([0,0,12]) cylinder(h=3, r=4);\n    }\n}\n\nmodule front_bumper() {\n    // Cowcatcher at front\n    for(i=[0:4]) {\n        translate([38-i*3, 0, 5+i*2]) cube([2, 0.5+i*2, 1], center=true);\n        mirror([0,1,0]) translate([38-i*3, 0, 5+i*2]) cube([2, 0.5+i*2, 1], center=true);\n    }\n}\n\nmodule wheels() {\n    // Drive wheels\n    for(pos=[-25,-5,15]) {\n        translate([pos, 0, 0]) {\n            difference() {\n                cylinder(h=wall+2, r=12, center=true);\n                cylinder(h=wall+3, r=3, center=true);  // axle hole\n            }\n        }\n        // Side rods\n        translate([pos, -12, 0]) cube([20,wall,wall], center=true);\n    }\n    \n    // Front bogie wheels\n    for(pos=[35,42]) {\n        translate([pos, 0, 0]) {\n            cylinder(h=wall+2, r=8, center=true);\n        }\n    }\n}\n\nmodule cabin_interior() {\n    // Engineer seat\n    translate([-20,0,10]) {\n        difference() {\n            cube([16,14,6], center=true);\n            translate([0,0,3]) cube([14,12,4], center=true);\n        }\n    }\n    \n    // Controls\n    translate([-15,0,17]) rotate([90,0,0]) cylinder(h=6, r=1.5);\n}\n\nmodule details() {\n    // Headlamp\n    translate([38,0,22]) sphere(r=4);\n    \n    // Handrails\n    for(side=[-1,1]) {\n        translate([0, side*17, 20]) cube([70,wall,wall], center=true);\n        for(x=[-30,-10,10,30]) {\n            translate([x, side*17, 12]) cube([wall,wall,10], center=true);\n        }\n    }\n}\n\n// Assemble the train\nunion() {\n    train_body();\n    chimney();\n    front_bumper();\n    wheels();\n    cabin_interior();\n    details();\n}",
    "renders": true
  },
  {
    "toy": "kayak",
    "openscad_code": "// Kayak Toy - Realistic Style, Medium Complexity\n// Overall length: 120mm, width: 30mm, height: 15mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main kayak hull\nmodule hull() {\n    difference() {\n        // Outer hull shape\n        hull_profile();\n        \n        // Inner hollow cavity\n        translate([0, 0, -wall])\n            scale([0.8, 0.8, 0.9])\n            hull_profile();\n    }\n}\n\n// Basic hull profile shape\nmodule hull_profile() {\n    hull_length = 120;\n    hull_width = 30;\n    hull_height = 15;\n    \n    // Create hull using spheres and cylinders\n    translate([0, 0, hull_height/2])\n    hull() {\n        // Front sphere\n        translate([hull_length/2 - 8, 0, 0])\n            sphere(8);\n            \n        // Rear sphere\n        translate([-hull_length/2 + 8, 0, 0])\n            sphere(8);\n            \n        // Mid section\n        for(i = [-hull_length/2 + 15 : 5 : hull_length/2 - 15]) {\n            translate([i, 0, 0])\n                sphere(hull_width/2);\n        }\n    }\n}\n\n// Cockpit opening\nmodule cockpit() {\n    cockpit_length = 50;\n    cockpit_width = 20;\n    \n    difference() {\n        hull();\n        \n        // Cockpit cutout\n        translate([0, 0, 5])\n            rotate([0, 0, 0])\n            linear_extrude(20)\n                difference() {\n                    scale([1, 0.6, 1])\n                        circle(d=cockpit_length);\n                    translate([-cockpit_length/4, 0, 0])\n                        square([cockpit_length/2, 2]);\n                }\n    }\n    \n    // Cockpit rim\n    translate([0, 0, 11])\n        linear_extrude(wall)\n            scale([1, 0.6, 1])\n                circle(d=cockpit_length + wall);\n}\n\n// Seat inside cockpit\nmodule seat() {\n    translate([0, 0, 2])\n        color(\"darkblue\")\n        difference() {\n            // Seat base\n            cube([40, 15, 3], center=true);\n            \n            // Seat back\n            translate([0, -7, 1.5])\n                cube([30, 3, 6], center=true);\n        }\n}\n\n// Deck rigging (elastic cords)\nmodule rigging() {\n    // Front deck rigging\n    for(i = [20 : 20 : 40]) {\n        translate([i, 0, 12])\n            rotate([90, 0, 0])\n                cylinder(h=25, r=0.5, $fn=8);\n    }\n    \n    // Rear deck rigging\n    for(i = [-40 : 20 : -20]) {\n        translate([i, 0, 12])\n            rotate([90, 0, 0])\n                cylinder(h=25, r=0.5, $fn=8);\n    }\n    \n    // Side grab loops\n    translate([0, 15, 10])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=1, $fn=6);\n    translate([0, -15, 10])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=1, $fn=6);\n}\n\n// Skeg (small fin at rear)\nmodule skeg() {\n    translate([-55, 0, 1])\n        linear_extrude(4)\n            polygon(points=[[0,0], [8,0], [4,-3]]);\n}\n\n// Main assembly\nhull();\ncockpit();\nseat();\nrigging();\nskeg();",
    "renders": true
  },
  {
    "toy": "convertible",
    "openscad_code": "// Toy Convertible Car - Realistic Style, Medium Complexity\n// Dimensions: 120mm length, 50mm width, 35mm height\n\n// Main body and chassis\nmodule car_body() {\n    // Lower chassis with wheel wells\n    difference() {\n        cube([120, 50, 15], center=true);\n        // Front wheel wells\n        translate([40, 25, 0]) cylinder(h=20, d=20, center=true);\n        translate([40, -25, 0]) cylinder(h=20, d=20, center=true);\n        // Rear wheel wells\n        translate([-40, 25, 0]) cylinder(h=20, d=20, center=true);\n        translate([-40, -25, 0]) cylinder(h=20, d=20, center=true);\n    }\n    \n    // Upper body with convertible top down\n    difference() {\n        hull() {\n            translate([50, 0, 7.5]) cube([20, 45, 10], center=true);\n            translate([-50, 0, 7.5]) cube([25, 40, 12], center=true);\n        }\n        // Cabin space\n        translate([0, 0, 10]) cube([70, 35, 15], center=true);\n    }\n}\n\n// Wheels with tread pattern\nmodule wheel() {\n    difference() {\n        cylinder(h=8, d=18, center=true, $fn=30);\n        // Tread grooves\n        for(i=[0:5:360]) {\n            rotate([0, 0, i]) translate([0, 9, 0]) cube([1, 1, 8], center=true);\n        }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    translate([55, 15, 10]) sphere(d=6);\n    translate([55, -15, 10]) sphere(d=6);\n}\n\n// Taillights\nmodule taillights() {\n    translate([-55, 15, 10]) sphere(d=5);\n    translate([-55, -15, 10]) sphere(d=5);\n}\n\n// Windshield frame\nmodule windshield() {\n    translate([25, 0, 20]) cube([2, 50, 15], center=true);\n    translate([15, 22.5, 27.5]) cube([20, 5, 2], center=true);\n    translate([15, -22.5, 27.5]) cube([20, 5, 2], center=true);\n}\n\n// Side mirrors\nmodule mirrors() {\n    translate([35, 25, 25]) cube([5, 8, 3], center=true);\n    translate([35, -25, 25]) cube([5, 8, 3], center=true);\n}\n\n// Seats\nmodule seats() {\n    // Driver seat\n    translate([10, 12, 15]) cube([20, 18, 10], center=true);\n    // Passenger seat\n    translate([10, -12, 15]) cube([20, 18, 10], center=true);\n}\n\n// Steering wheel\nmodule steering() {\n    translate([30, 12, 20]) rotate([90, 0, 0]) cylinder(h=3, d=12, $fn=16);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-55, -18, 5]) rotate([90, 0, 0]) cylinder(h=15, d=4);\n}\n\n// Assemble the car\nunion() {\n    car_body();\n    \n    // Wheels\n    translate([40, 25, -8]) wheel();\n    translate([40, -25, -8]) wheel();\n    translate([-40, 25, -8]) wheel();\n    translate([-40, -25, -8]) wheel();\n    \n    headlights();\n    taillights();\n    windshield();\n    mirrors();\n    seats();\n    steering();\n    exhaust();\n}",
    "renders": true
  },
  {
    "toy": "rig",
    "openscad_code": "// Toy Rig - Medium Complexity with Realistic Styling\n// Overall size: ~120mm long x 40mm wide x 80mm tall\n\n// Parameters\nleg_diameter = 6;\nleg_height = 35;\nframe_thickness = 4;\nseat_width = 32;\nseat_depth = 28;\nseat_thickness = 3;\nback_height = 35;\nback_width = 34;\nback_thickness = 3;\narmrest_height = 20;\narmrest_width = 5;\narmrest_length = 20;\n\nmodule leg() {\n    difference() {\n        cylinder(d=leg_diameter, h=leg_height);\n        translate([0, 0, -0.1])\n            cylinder(d=leg_diameter-3, h=leg_height+0.2);\n    }\n}\n\nmodule side_frame() {\n    // Front post\n    translate([0, 0, 0])\n        cylinder(d=frame_thickness, h=leg_height);\n    // Rear post\n    translate([0, seat_depth-frame_thickness, 0])\n        cylinder(d=frame_thickness, h=leg_height);\n    // Bottom rail\n    translate([0, frame_thickness/2, frame_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(d=frame_thickness, h=seat_depth-frame_thickness);\n    // Top rail\n    translate([0, frame_thickness/2, leg_height-frame_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(d=frame_thickness, h=seat_depth-frame_thickness);\n}\n\nmodule seat() {\n    difference() {\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        translate([0, 0, -seat_thickness/2-0.1])\n            cube([seat_width-4, seat_depth-4, seat_thickness+0.2], center=true);\n    }\n}\n\nmodule backrest() {\n    difference() {\n        cube([back_width, back_thickness, back_height], center=true);\n        // Decorative slots\n        for(i = [-12:6:12]) {\n            translate([i, 0, 5])\n                cube([2, back_thickness+0.2, back_height-10], center=true);\n        }\n    }\n}\n\nmodule armrest() {\n    difference() {\n        // Main armrest\n        translate([0, 0, armrest_height/2])\n            cube([armrest_width, armrest_length, armrest_height], center=true);\n        // Rounded edge\n        translate([0, armrest_length/2-armrest_width/2, armrest_height-armrest_width/2])\n            rotate([90, 0, 0])\n                cylinder(d=armrest_width, h=armrest_width);\n    }\n}\n\n// Assembly\nunion() {\n    // Legs\n    translate([seat_width/2-leg_diameter/2, seat_depth/2-leg_diameter/2, 0])\n        leg();\n    translate([-seat_width/2+leg_diameter/2, seat_depth/2-leg_diameter/2, 0])\n        leg();\n    translate([seat_width/2-leg_diameter/2, -seat_depth/2+leg_diameter/2, 0])\n        leg();\n    translate([-seat_width/2+leg_diameter/2, -seat_depth/2+leg_diameter/2, 0])\n        leg();\n    \n    // Side frames\n    translate([seat_width/2-frame_thickness/2, 0, 0])\n        side_frame();\n    translate([-seat_width/2+frame_thickness/2, 0, 0])\n        mirror([1, 0, 0])\n            side_frame();\n    \n    // Seat\n    translate([0, 0, leg_height])\n        seat();\n    \n    // Backrest\n    translate([0, seat_depth/2-back_thickness/2, leg_height+back_height/2])\n        backrest();\n    \n    // Armrests\n    translate([seat_width/2+armrest_width/2, 0, leg_height+seat_thickness+armrest_height/2])\n        armrest();\n    translate([-seat_width/2-armrest_width/2, 0, leg_height+seat_thickness+armrest_height/2])\n        mirror([1, 0, 0])\n            armrest();\n}",
    "renders": true
  },
  {
    "toy": "sikorsky",
    "openscad_code": "// Sikorsky toy helicopter - medium complexity realistic style\n// Overall size: ~120mm length x 40mm width x 35mm height\n\n$fn = 32;\n\n// Main body module\nmodule helicopter_body() {\n    // Main fuselage\n    difference() {\n        hull() {\n            translate([0, 0, 15]) cylinder(h = 20, r1 = 8, r2 = 10);\n            translate([-20, 0, 15]) cylinder(h = 20, r1 = 10, r2 = 8);\n        }\n        \n        // Cockpit windows\n        translate([-15, 0, 22]) cube([20, 6, 8], center = true);\n        translate([5, 0, 22]) cube([10, 4, 6], center = true);\n    }\n    \n    // Tail boom\n    translate([-30, 0, 15]) cylinder(h = 40, r1 = 5, r2 = 3);\n    \n    // Tail fin\n    translate([-60, 0, 25]) cube([15, 2, 12], center = true);\n    translate([-60, 0, 15]) cube([8, 8, 2], center = true);\n}\n\n// Main rotor module\nmodule main_rotor() {\n    // Rotor mast\n    translate([0, 0, 35]) cylinder(h = 8, r = 2);\n    \n    // Rotor hub\n    translate([0, 0, 43]) cylinder(h = 3, r = 4);\n    \n    // Rotor blades (4 blades)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([20, 0, 43]) cube([40, 3, 1], center = true);\n            translate([40, 0, 43]) cube([5, 5, 1], center = true);\n        }\n    }\n}\n\n// Tail rotor module\nmodule tail_rotor() {\n    // Tail rotor mast\n    translate([-65, 0, 25]) rotate([90, 0, 0]) cylinder(h = 5, r = 1.5);\n    \n    // Tail rotor hub\n    translate([-65, 2.5, 25]) sphere(r = 2);\n    \n    // Tail rotor blades (2 blades)\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180]) {\n            translate([-65, 2.5, 25]) rotate([0, 90, 0]) \n                cube([15, 2, 1], center = true);\n        }\n    }\n}\n\n// Landing skids module\nmodule landing_skids() {\n    // Left skid\n    translate([0, -12, 8]) cube([30, 2, 2], center = true);\n    translate([-10, -12, 8]) cylinder(h = 2, r = 2);\n    translate([10, -12, 8]) cylinder(h = 2, r = 2);\n    \n    // Right skid\n    translate([0, 12, 8]) cube([30, 2, 2], center = true);\n    translate([-10, 12, 8]) cylinder(h = 2, r = 2);\n    translate([10, 12, 8]) cylinder(h = 2, r = 2);\n    \n    // Cross supports\n    translate([-5, 0, 8]) cube([2, 24, 2], center = true);\n    translate([5, 0, 8]) cube([2, 24, 2], center = true);\n}\n\n// Side details\nmodule side_details() {\n    // Windows\n    for (i = [0:2]) {\n        translate([-10 + i * 8, 10, 18]) cylinder(h = 3, r = 2);\n        translate([-10 + i * 8, -10, 18]) cylinder(h = 3, r = 2);\n    }\n    \n    // Door outline\n    translate([-5, 10, 15]) cube([15, 1, 20], center = true);\n    translate([-5, -10, 15]) cube([15, 1, 20], center = true);\n}\n\n// Assembly\nunion() {\n    helicopter_body();\n    main_rotor();\n    tail_rotor();\n    landing_skids();\n    side_details();\n}",
    "renders": true
  },
  {
    "toy": "streamliner",
    "openscad_code": "// Streamliner toy train car\n// 1:87 scale (HO scale) - 150mm overall length\n\nmodule wheel(d=8, w=4) {\n    // Basic wheel with 2mm thick rim\n    difference() {\n        cylinder(h=w, d=d, $fn=32);\n        translate([0,0,-1]) cylinder(h=w+2, d=d-4, $fn=32);\n    }\n    // Axle stub\n    translate([0,0,w/2]) cylinder(h=2, d=3, $fn=16);\n}\n\nmodule bogie() {\n    // Bogie frame - 2mm thick\n    difference() {\n        // Main frame\n        translate([0,0,2]) cube([20,16,4], center=true);\n        // Wheel cutouts\n        for(x=[-7, 7])\n            translate([x,0,2]) cylinder(h=5, d=10, $fn=32);\n    }\n    // Side frames\n    translate([0,8,2]) cube([18,2,4], center=true);\n    translate([0,-8,2]) cube([18,2,4], center=true);\n    \n    // Wheels\n    for(x=[-7, 7])\n        translate([x,0,0]) wheel();\n}\n\nmodule body() {\n    // Main shell - streamlined shape\n    hull() {\n        // Front tapered section\n        translate([65,0,15]) scale([1,0.4,0.4]) sphere(d=30, $fn=32);\n        // Rear section\n        translate([-65,0,15]) sphere(d=35, $fn=32);\n        // Middle section\n        translate([0,0,18]) cube([120,25,20], center=true);\n    }\n    \n    // Cut windows\n    for(x=[-40, -20, 0, 20, 40]) {\n        translate([x,13,22]) cube([15,1,8], center=true);\n        translate([x,-13,22]) cube([15,1,8], center=true);\n    }\n    \n    // Roof detail - vent\n    translate([0,0,35]) cube([80,20,3], center=true);\n    \n    // Underframe detail\n    translate([0,0,8]) cube([130,28,4], center=true);\n}\n\nmodule coupler() {\n    // Standard hook coupler\n    difference() {\n        union() {\n            translate([0,0,10]) cube([8,6,4], center=true);\n            translate([4,0,10]) cube([4,4,4], center=true);\n        }\n        translate([4,0,10]) rotate([0,90,0]) cylinder(h=6, d=2, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Front bogie\n    translate([40,0,8]) rotate([0,0,180]) bogie();\n    \n    // Rear bogie\n    translate([-40,0,8]) rotate([0,0,180]) bogie();\n    \n    // Front coupler\n    translate([75,0,8]) coupler();\n    \n    // Rear coupler\n    translate([-75,0,8]) mirror([1,0,0]) coupler();\n}",
    "renders": true
  },
  {
    "toy": "canoe",
    "openscad_code": "// Toy Canoe - Realistic Style, Medium Complexity\n// Dimensions: ~120mm L x 30mm W x 15mm H\n\n$fn = 32;\n\n// Main canoe hull\nmodule canoe_hull() {\n    // Outer hull shape\n    difference() {\n        union() {\n            // Main hull body - elongated ellipse\n            scale([1, 0.4, 0.15])\n                sphere(r = 50);\n            \n            // Tapered ends\n            translate([45, 0, 0])\n                scale([0.3, 0.35, 0.12])\n                    sphere(r = 30);\n            translate([-45, 0, 0])\n                scale([0.3, 0.35, 0.12])\n                    sphere(r = 30);\n            \n            // Hull bottom reinforcement\n            translate([0, 0, -7.5])\n                cube([110, 25, 2], center = true);\n        }\n        \n        // Hollow interior\n        difference() {\n            scale([0.9, 0.85, 0.9])\n                sphere(r = 45);\n            translate([0, 0, -15])\n                cube([200, 200, 30], center = true);\n        }\n    }\n}\n\n// Seats for toy figures\nmodule seats() {\n    // Front seat\n    translate([25, 0, -4])\n        seat();\n    \n    // Rear seat\n    translate([-25, 0, -4])\n        seat();\n}\n\nmodule seat() {\n    // Seat base\n    cube([20, 22, 2], center = true);\n    \n    // Seat back\n    translate([0, 8, 3])\n        cube([18, 2, 6], center = true);\n    \n    // Support struts\n    for(x = [-7, 7]) {\n        translate([x, 0, -1])\n            cylinder(h = 2, r = 1.5);\n    }\n}\n\n// Side gunnels (top edges)\nmodule gunnels() {\n    for(side = [-1, 1]) {\n        translate([0, side * 12, 2.5])\n            rotate([90, 0, 0])\n                cylinder(h = 110, r = 2);\n    }\n}\n\n// Internal ribs for structure\nmodule ribs() {\n    for(x = [-40, -20, 0, 20, 40]) {\n        translate([x, 0, -5])\n            difference() {\n                scale([0.5, 1, 1])\n                    cylinder(h = 22, r = 2);\n                translate([-2, -11, -1])\n                    cube([4, 22, 4]);\n            }\n    }\n}\n\n// Toy paddle holders\nmodule paddle_holders() {\n    for(side = [-1, 1]) {\n        translate([side * 30, side * 15, 0])\n            paddle_holder();\n    }\n}\n\nmodule paddle_holder() {\n    // Base mount\n    cube([8, 4, 3], center = true);\n    \n    // Ring holder\n    translate([0, 0, 3])\n        cylinder(h = 4, r1 = 3.5, r2 = 3.5);\n}\n\n// Drain plug detail\nmodule drain_plug() {\n    translate([0, -8, -7])\n        cylinder(h = 2, r = 3);\n}\n\n// Assembly\nunion() {\n    canoe_hull();\n    seats();\n    gunnels();\n    ribs();\n    paddle_holders();\n    drain_plug();\n}",
    "renders": true
  },
  {
    "toy": "sedan",
    "openscad_code": "// Sedan Toy Car - Realistic style, medium complexity\n// Dimensions: 100mm length, 45mm width, 35mm height\n// Wall thickness: 2mm for 3D printing\n\n// Main body module\nmodule sedan_body() {\n    // Lower chassis - main body\n    difference() {\n        // Main chassis block\n        translate([-5, -22, 0])\n            cube([90, 44, 15], center=false);\n        \n        // Wheel arches - front\n        translate([15, -25, 0])\n            cylinder(h=16, d=22, $fn=32);\n        translate([15, 25, 0])\n            cylinder(h=16, d=22, $fn=32);\n        \n        // Wheel arches - rear\n        translate([70, -25, 0])\n            cylinder(h=16, d=22, $fn=32);\n        translate([70, 25, 0])\n            cylinder(h=16, d=22, $fn=32);\n    }\n    \n    // Upper cabin\n    difference() {\n        // Cabin roof\n        translate([25, -20, 15])\n            cube([45, 40, 12], center=false);\n        \n        // Windshield\n        translate([28, -19, 15])\n            cube([15, 38, 12], center=false);\n        \n        // Rear window\n        translate([55, -19, 15])\n            cube([12, 38, 12], center=false);\n    }\n    \n    // Hood\n    translate([0, -18, 15])\n        cube([25, 36, 8], center=false);\n    \n    // Trunk\n    translate([70, -18, 15])\n        cube([15, 36, 8], center=false);\n}\n\n// Wheels module\nmodule wheels() {\n    // Create four wheels\n    for (x = [15, 70]) {\n        for (y = [-28, 28]) {\n            // Tire\n            translate([x, y, 0])\n                cylinder(h=8, d=20, $fn=32);\n            \n            // Rim\n            translate([x, y, 1])\n                cylinder(h=6, d=16, $fn=6);\n            \n            // Hub center\n            translate([x, y, 4])\n                cylinder(h=2, d=8, $fn=16);\n        }\n    }\n}\n\n// Windows module\nmodule windows() {\n    // Side windows - left\n    translate([30, 20.5, 20])\n        cube([40, 1.5, 8], center=false);\n    \n    // Side windows - right\n    translate([30, -21.5, 20])\n        cube([40, 1.5, 8], center=false);\n    \n    // Windshield glass\n    translate([28, -19, 22])\n        cube([15, 38, 1], center=false);\n    \n    // Rear glass\n    translate([55, -19, 22])\n        cube([12, 38, 1], center=false);\n}\n\n// Lights module\nmodule lights() {\n    // Headlights\n    translate([1, -15, 20])\n        cube([4, 8, 4], center=false);\n    translate([1, 7, 20])\n        cube([4, 8, 4], center=false);\n    \n    // Taillights\n    translate([84, -15, 20])\n        cube([4, 8, 4], center=false);\n    translate([84, 7, 20])\n        cube([4, 8, 4], center=false);\n}\n\n// Door handles module\nmodule door_handles() {\n    // Front door handles\n    translate([35, 20.5, 18])\n        cube([8, 1, 3], center=false);\n    translate([35, -21.5, 18])\n        cube([8, 1, 3], center=false);\n    \n    // Rear door handles\n    translate([55, 20.5, 18])\n        cube([8, 1, 3], center=false);\n    translate([55, -21.5, 18])\n        cube([8, 1, 3], center=false);\n}\n\n// Bumper module\nmodule bumpers() {\n    // Front bumper\n    translate([-1, -20, 8])\n        cube([4, 40, 6], center=false);\n    \n    // Rear bumper\n    translate([85, -20, 8])\n        cube([4, 40, 6], center=false);\n}\n\n// Main assembly\nunion() {\n    // Body\n    sedan_body();\n    \n    // Wheels\n    color(\"black\")\n        wheels();\n    \n    // Windows\n    color(\"lightblue\")\n        windows();\n    \n    // Lights\n    color(\"yellow\")\n        lights();\n    \n    // Door handles\n    color(\"silver\")\n        door_handles();\n    \n    // Bumpers\n    color(\"gray\")\n        bumpers();\n}",
    "renders": true
  },
  {
    "toy": "tanker",
    "openscad_code": "// Tanker Toy Truck - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm long, ~35mm wide, ~45mm tall\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;\n\n// Main module\nmodule tanker_truck() {\n    // Cab section\n    translate([0, 0, 0]) cab();\n    \n    // Tank section\n    translate([35, 0, 8]) tank();\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([8, side * 20, 0]) wheel();\n        translate([8, side * 20, 0]) wheel_well();\n        \n        // Rear wheels\n        translate([65, side * 20, 0]) wheel();\n        translate([65, side * 20, 0]) wheel_well();\n        \n        // Tank support wheels\n        translate([100, side * 20, 0]) wheel();\n        translate([100, side * 20, 0]) wheel_well();\n    }\n    \n    // Connectors between cab and tank\n    translate([25, 0, 15]) connector();\n}\n\n// Cab module\nmodule cab() {\n    difference() {\n        // Main cab body\n        union() {\n            // Cab base\n            translate([-5, 0, 5]) cube([30, 40, 20]);\n            \n            // Cab roof\n            translate([5, 0, 25]) cube([20, 38, 15]);\n            \n            // Cab front slope\n            translate([-5, 0, 20]) cube([10, 40, 10]);\n        }\n        \n        // Windows\n        translate([0, 10, 15]) cube([25, 8, 10]);\n        translate([0, -18, 15]) cube([25, 8, 10]);\n        \n        // Windshield\n        translate([-4, -12, 18]) cube([8, 24, 8]);\n    }\n    \n    // Headlights\n    translate([-5, 15, 15]) sphere(d=4);\n    translate([-5, -15, 15]) sphere(d=4);\n    \n    // Exhaust pipe\n    translate([15, 20, 30]) cylinder(h=10, d=4);\n}\n\n// Tank module\nmodule tank() {\n    // Main tank cylinder\n    difference() {\n        rotate([0, 90, 0]) cylinder(h=80, d=30);\n        \n        // Hollow interior\n        rotate([0, 90, 0]) translate([2, 0, 0]) cylinder(h=78, d=26);\n    }\n    \n    // Tank end caps\n    difference() {\n        translate([40, 0, 0]) sphere(d=30);\n        translate([40, 0, 0]) sphere(d=26);\n    }\n    \n    translate([-40, 0, 0]) sphere(d=30);\n    translate([-40, 0, 0]) sphere(d=26);\n    \n    // Tank support straps\n    for(pos = [-20, 0, 20]) {\n        translate([pos, 0, -8]) cube([8, 32, 2]);\n        translate([pos, 0, 8]) cube([8, 32, 2]);\n    }\n    \n    // Access hatch\n    translate([0, 15, 15]) rotate([0, 90, 0]) cylinder(h=8, d=10);\n    translate([0, 15, 15]) rotate([0, 90, 0]) cylinder(h=2, d=6);\n}\n\n// Wheel module\nmodule wheel() {\n    // Tire\n    color(\"black\") {\n        difference() {\n            cylinder(h=8, d=16);\n            translate([0, 0, 2]) cylinder(h=4, d=10);\n        }\n    }\n    \n    // Rim\n    color(\"gray\") {\n        translate([0, 0, 2]) cylinder(h=4, d=10);\n        translate([0, 0, 4]) cylinder(h=2, d=8);\n    }\n}\n\n// Wheel well\nmodule wheel_well() {\n    // Cutout for wheel clearance\n    translate([0, 0, 8]) rotate([90, 0, 0]) cylinder(h=20, d=18);\n}\n\n// Connector between cab and tank\nmodule connector() {\n    cube([10, 30, 4]);\n    translate([0, 0, 4]) cube([10, 26, 4]);\n}\n\n// Generate the complete model\ntanker_truck();",
    "renders": true
  },
  {
    "toy": "strato",
    "openscad_code": "// Strato Toy Chair - Realistic Medium Complexity\n// Overall dimensions: ~120mm tall, 100mm wide, 110mm deep\n\n// Parameters\nseat_height = 70;\nseat_width = 100;\nseat_depth = 110;\nback_height = 50;\nleg_height = 65;\nleg_width = 8;\nwall_thickness = 2.5;\n\n// Main chair module\nmodule strato_chair() {\n    // Seat frame\n    difference() {\n        // Outer seat base\n        translate([0, 0, leg_height + wall_thickness])\n            cube([seat_width, seat_depth, wall_thickness * 2], center=true);\n        \n        // Hollow center\n        translate([0, 0, leg_height + wall_thickness])\n            cube([seat_width - wall_thickness*2, seat_depth - wall_thickness*2, wall_thickness*3], center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, leg_height + wall_thickness*2.5])\n        rounded_cushion(seat_width - wall_thickness*3, seat_depth - wall_thickness*3, 8);\n    \n    // Backrest frame\n    difference() {\n        // Outer backrest\n        translate([0, (seat_depth - wall_thickness)/2, leg_height + wall_thickness + back_height/2])\n            cube([seat_width, wall_thickness*2, back_height], center=true);\n        \n        // Hollow center\n        translate([0, (seat_depth - wall_thickness)/2, leg_height + wall_thickness + back_height/2])\n            cube([seat_width - wall_thickness*2, wall_thickness*3, back_height - wall_thickness*2], center=true);\n    }\n    \n    // Backrest cushion\n    translate([0, (seat_depth - wall_thickness)/2, leg_height + wall_thickness + back_height/2])\n        rounded_cushion(seat_width - wall_thickness*3, wall_thickness*1.5, back_height - wall_thickness*2);\n    \n    // Four legs with cross-bracing\n    // Front left leg\n    translate([(seat_width - leg_width)/2 - leg_width/2, (seat_depth - leg_width)/2 - leg_width/2, leg_height/2])\n        cylinder(h=leg_height, r=leg_width/2, $fn=16);\n    \n    // Front right leg\n    translate([-(seat_width - leg_width)/2 + leg_width/2, (seat_depth - leg_width)/2 - leg_width/2, leg_height/2])\n        cylinder(h=leg_height, r=leg_width/2, $fn=16);\n    \n    // Back left leg\n    translate([(seat_width - leg_width)/2 - leg_width/2, -(seat_depth - leg_width)/2 + leg_width/2, leg_height/2])\n        cylinder(h=leg_height, r=leg_width/2, $fn=16);\n    \n    // Back right leg\n    translate([-(seat_width - leg_width)/2 + leg_width/2, -(seat_depth - leg_width)/2 + leg_width/2, leg_height/2])\n        cylinder(h=leg_height, r=leg_width/2, $fn=16);\n    \n    // Side cross-braces\n    translate([0, (seat_depth - leg_width)/2 - leg_width/2, leg_height/3])\n        cube([seat_width - leg_width*2, leg_width/2, leg_width/2], center=true);\n    \n    translate([0, -(seat_depth - leg_width)/2 + leg_width/2, leg_height/3])\n        cube([seat_width - leg_width*2, leg_width/2, leg_width/2], center=true);\n    \n    // Back cross-brace\n    translate([(seat_width - leg_width)/2 - leg_width/2, 0, leg_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=seat_depth - leg_width*2, r=leg_width/3, $fn=12);\n    \n    // Front cross-brace\n    translate([-(seat_width - leg_width)/2 + leg_width/2, 0, leg_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=seat_depth - leg_width*2, r=leg_width/3, $fn=12);\n    \n    // Decorative corner joints\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(seat_width - leg_width)/2, y*(seat_depth - leg_width)/2, leg_height + wall_thickness])\n                cylinder(h=wall_thickness*2, r=wall_thickness*1.5, $fn=8);\n        }\n    }\n}\n\n// Rounded cushion module\nmodule rounded_cushion(w, d, h) {\n    difference() {\n        // Main cushion body\n        translate([0, 0, h/2])\n            minkowski() {\n                cube([w, d, h/2], center=true);\n                sphere(r=h/4, $fn=16);\n            }\n        \n        // Rounded top\n        translate([0, 0, h*0.8])\n            cube([w*1.1, d*1.1, h], center=true);\n    }\n}\n\n// Render the chair\nstrato_chair();",
    "renders": true
  },
  {
    "toy": "gyro",
    "openscad_code": "// Gyro Toy - Realistic Medium Complexity\n// Overall dimensions: 80mm diameter, 40mm height\n\n// Parameters\n$fn = 36;\nouter_d = 80;\ninner_d = 60;\nheight = 40;\nwall_thickness = 2;\nspoke_count = 8;\nspoke_width = 4;\naxle_d = 8;\nbearing_d = 12;\n\n// Main gyro ring\nmodule gyro_ring() {\n    difference() {\n        // Outer ring\n        cylinder(d=outer_d, h=height, center=true);\n        \n        // Inner cavity\n        cylinder(d=inner_d, h=height+2, center=true);\n    }\n    \n    // Spokes\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count])\n            translate([0, (outer_d+inner_d)/4, 0])\n                cube([spoke_width, (outer_d-inner_d)/2 - wall_thickness, height], center=true);\n    }\n    \n    // Central hub\n    difference() {\n        cylinder(d=inner_d/2, h=height, center=true);\n        cylinder(d=axle_d, h=height+2, center=true);\n    }\n}\n\n// Bearing balls\nmodule bearings() {\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count + 22.5])\n            translate([(outer_d+inner_d)/4, 0, 0])\n                sphere(d=bearing_d);\n    }\n}\n\n// Top decorative cap\nmodule top_cap() {\n    translate([0, 0, height/2 + wall_thickness/2])\n        difference() {\n            cylinder(d=inner_d/2 + wall_thickness, h=wall_thickness*2, center=true);\n            cylinder(d=axle_d, h=wall_thickness*2 + 1, center=true);\n        }\n}\n\n// Bottom decorative cap\nmodule bottom_cap() {\n    translate([0, 0, -height/2 - wall_thickness/2])\n        mirror([0, 0, 1])\n            top_cap();\n}\n\n// Grip texture on outer ring\nmodule grip_texture() {\n    difference() {\n        gyro_ring();\n        \n        // Grip grooves\n        for(i = [0:47]) {\n            rotate([0, 0, i * 7.5])\n                translate([outer_d/2 - wall_thickness, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(d=wall_thickness*2, h=wall_thickness*2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    grip_texture();\n    top_cap();\n    bottom_cap();\n    \n    // Add bearings\n    translate([0, 0, 0])\n        bearings();\n}",
    "renders": true
  },
  {
    "toy": "freight",
    "openscad_code": "// Toy Freight Truck – OpenSCAD\n// 1:64 toy scale, fits a 40 mm container\n// Designed for FDM printing, 2 mm wall thickness, no overhangs\n\n$fn = 32;\n\n// overall scale factor – set to 1 for 1:64 toy\nsf = 1;\n\n// truck length ~ 130 mm\ntruck_length = 130 * sf;\ntruck_width  = 50 * sf;\ntruck_height = 40 * sf;\n\n// container size\nbox_l = 80 * sf;\nbox_w = 30 * sf;\nbox_h = 30 * sf;\n\n// wheel dimensions\nwheel_d = 16 * sf;\nwheel_w = 8 * sf;\n\n// helper module for rounded cube\nmodule roundedCube(s=[1,1,1], r=2, center=false){\n    translate(center?[0,0,0]:[r,r,r])\n    minkowski(){\n        cube([s.x-2*r,s.y-2*r,s.z-2*r], center=true);\n        sphere(r=r,$fn=16);\n    }\n}\n\n// single wheel\nmodule wheel(){\n    difference(){\n        cylinder(d=wheel_d, h=wheel_w, center=true);\n        cylinder(d=wheel_d-4, h=wheel_w+0.2, center=true);\n    }\n}\n\n// axle with two wheels\nmodule axle(){\n    rotate([90,0,0]){\n        for(side=[-1,1])\n            translate([0, side*(truck_width/2 - wheel_w/2), 0])\n                wheel();\n        cylinder(d=6, h=truck_width, center=true);\n    }\n}\n\n// chassis with frame rails\nmodule chassis(){\n    difference(){\n        // main frame\n        union(){\n            translate([0,0,-truck_height/2-5*sf])\n                roundedCube([truck_length, truck_width, 10*sf], r=2*sf);\n            // frame rails\n            for(side=[-1,1])\n                translate([0, side*(truck_width/2-6*sf), -truck_height/2-7*sf])\n                    cube([truck_length-10*sf, 4*sf, 4*sf], center=true);\n        }\n        // axle cutouts\n        translate([-truck_length/4,0,-truck_height/2-10*sf])\n            cube([20*sf, truck_width+2, 20*sf], center=true);\n        translate([ truck_length/4,0,-truck_height/2-10*sf])\n            cube([20*sf, truck_width+2, 20*sf], center=true);\n    }\n}\n\n// cab with rounded roof\nmodule cab(){\n    difference(){\n        union(){\n            // cab body\n            translate([truck_length/2-25*sf,0,0])\n                roundedCube([30*sf, truck_width, 25*sf], r=4*sf);\n            // roof\n            translate([truck_length/2-25*sf,0,12.5*sf])\n                roundedCube([28*sf, truck_width-4*sf, 15*sf], r=6*sf);\n        }\n        // windshield\n        translate([truck_length/2-10*sf,0,5*sf])\n            cube([20*sf, truck_width-8*sf, 15*sf], center=true);\n    }\n}\n\n// container box\nmodule container(){\n    difference(){\n        roundedCube([box_l, box_w, box_h], r=2*sf);\n        // door lines\n        translate([box_l/2-1*sf,0,0])\n            cube([2*sf, box_w+1, box_h+1], center=true);\n        // small latch\n        translate([box_l/2-1*sf, box_w/2-2*sf, -box_h/2+4*sf])\n            cube([2*sf,4*sf,2*sf]);\n    }\n}\n\n// assembly\ntranslate([0,0,wheel_d/2])\nunion(){\n    chassis();\n    translate([0,0,wheel_d/2+5*sf])\n        cab();\n    translate([-truck_length/2+box_l/2+10*sf,0,wheel_d/2+5*sf+box_h/2])\n        container();\n    // front axle\n    translate([truck_length/4,0,0])\n        axle();\n    // rear axle\n    translate([-truck_length/4,0,0])\n        axle();\n}",
    "renders": true
  },
  {
    "toy": "rowboat",
    "openscad_code": "// Toy Rowboat - Realistic Style, Medium Complexity\n// Dimensions: ~120mm long, ~40mm wide, ~25mm high\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule hull() {\n    // Main hull shape - elongated half-cylinder\n    difference() {\n        // Outer hull\n        scale([1.1, 0.6, 0.4])\n            rotate([90, 0, 0])\n                cylinder(h=120, d=40, $fn=50);\n        \n        // Hollow interior\n        translate([0, 0, -wall])\n            scale([1.05, 0.55, 0.35])\n                rotate([90, 0, 0])\n                    cylinder(h=120, d=40, $fn=50);\n    }\n    \n    // Flatten bottom for stability\n    translate([0, 0, -wall/2])\n        cube([130, 50, wall], center=true);\n}\n\nmodule seats() {\n    // Front seat\n    translate([-35, 0, 8])\n        cube([25, 30, wall], center=true);\n    \n    // Rear seat\n    translate([35, 0, 8])\n        cube([25, 30, wall], center=true);\n    \n    // Center support ribs\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, 4])\n            cube([2, 28, 8], center=true);\n    }\n}\n\nmodule oarlocks() {\n    // Left oarlock\n    translate([-25, 18, 12])\n        union() {\n            cylinder(h=6, d=4, $fn=16);\n            translate([0, 0, 6])\n                cylinder(h=3, d=6, $fn=16);\n        }\n    \n    // Right oarlock\n    translate([-25, -18, 12])\n        union() {\n            cylinder(h=6, d=4, $fn=16);\n            translate([0, 0, 6])\n                cylinder(h=3, d=6, $fn=16);\n        }\n}\n\nmodule gunwale() {\n    // Top edge reinforcement\n    hull_top = 12;\n    difference() {\n        // Outer gunwale\n        translate([0, 0, hull_top])\n            scale([1.15, 0.65, 0.2])\n                rotate([90, 0, 0])\n                    cylinder(h=125, d=40, $fn=50);\n        \n        // Remove interior\n        translate([0, 0, hull_top-0.5])\n            scale([1.12, 0.62, 0.3])\n                rotate([90, 0, 0])\n                    cylinder(h=125, d=40, $fn=50);\n    }\n}\n\nmodule toy_details() {\n    // Rounded bow cap\n    translate([-60, 0, 6])\n        rotate([0, 90, 0])\n            cylinder(h=30, d=12, $fn=30);\n    \n    // Stern handle\n    translate([60, 0, 6])\n        rotate([90, 0, 0])\n            union() {\n                cylinder(h=10, d=4, $fn=16);\n                translate([5, 0, 0])\n                    sphere(d=6, $fn=16);\n            }\n    \n    // Drain plug at bottom\n    translate([40, 0, 0])\n        cylinder(h=2, d=6, $fn=12);\n}\n\n// Assemble the rowboat\nunion() {\n    hull();\n    seats();\n    gunwale();\n    oarlocks();\n    toy_details();\n}",
    "renders": true
  },
  {
    "toy": "hatchback",
    "openscad_code": "// Realistic Hatchback Toy Car - Medium Complexity\n// Overall size: ~100mm long x 45mm wide x 35mm high\n\n// Basic parameters\nbody_length = 100;\nbody_width = 45;\nbody_height = 25;\nwheel_diameter = 18;\nwheel_width = 8;\nwheelbase = 60;\n\n// Main body module\nmodule car_body() {\n    // Lower body with slight taper\n    hull() {\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        translate([5, 0, body_height/2 + 5])\n            cube([body_length - 10, body_width - 8, body_height - 5], center=true);\n    }\n    \n    // Hood slope\n    difference() {\n        translate([body_length/4, 0, body_height + 8])\n            cube([body_length/2, body_width, 16], center=true);\n        translate([body_length/2 + 5, 0, body_height + 8])\n            rotate([0, 20, 0])\n                cube([body_length/2 + 10, body_width + 10, 20], center=true);\n    }\n    \n    // Roof and hatchback\n    hull() {\n        translate([-body_length/4, 0, body_height + 15])\n            cube([body_length/2, body_width - 10, 10], center=true);\n        translate([-body_length/2 + 5, 0, body_height + 10])\n            cube([body_length/4, body_width - 15, 15], center=true);\n    }\n}\n\n// Windows module\nmodule windows() {\n    // Windshield\n    translate([15, 0, body_height + 10])\n        rotate([0, -30, 0])\n            cube([20, body_width - 12, 0.5], center=true);\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([0, side * (body_width/2 - 1), body_height + 10])\n            cube([40, 0.5, 8], center=true);\n    }\n    \n    // Rear window\n    translate([-body_length/2 + 10, 0, body_height + 12])\n        rotate([0, 45, 0])\n            cube([15, body_width - 15, 0.5], center=true);\n}\n\n// Wheels module\nmodule wheels() {\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([wheelbase/2, side * (body_width/2 + wheel_width/2 + 2), wheel_diameter/2])\n            rotate([0, 0, 90])\n                cylinder(h=wheel_width, d=wheel_diameter, $fn=20);\n        \n        // Rear wheels\n        translate([-wheelbase/2, side * (body_width/2 + wheel_width/2 + 2), wheel_diameter/2])\n            rotate([0, 0, 90])\n                cylinder(h=wheel_width, d=wheel_diameter, $fn=20);\n                \n        // Wheel hubs\n        for(pos = [wheelbase/2, -wheelbase/2]) {\n            translate([pos, side * (body_width/2 + wheel_width/2 + 2), wheel_diameter/2])\n                cylinder(h=wheel_width + 0.5, d=8, $fn=16);\n        }\n    }\n}\n\n// Headlights and taillights\nmodule lights() {\n    // Headlights\n    for(side = [-1, 1]) {\n        translate([body_length/2 - 3, side * (body_width/3), body_height/2])\n            cube([3, 6, 4], center=true);\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([-body_length/2 + 3, side * (body_width/3), body_height/2])\n            cube([3, 6, 4], center=true);\n    }\n}\n\n// Door details\nmodule doors() {\n    // Door lines\n    translate([0, 0, body_height/2])\n        cube([body_length - 10, body_width - 2, 0.5], center=true);\n    \n    // Door handles\n    for(side = [-1, 1]) {\n        translate([5, side * (body_width/2 - 2), body_height/2 + 3])\n            cube([6, 1, 1.5], center=true);\n    }\n}\n\n// Grille\nmodule grille() {\n    translate([body_length/2 - 2, 0, body_height/2])\n        cube([2, body_width/2, 6], center=true);\n    \n    // Grille bars\n    for(i = [-1, 0, 1]) {\n        translate([body_length/2 - 2, i * 5, body_height/2])\n            cube([2, 0.5, 5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    car_body();\n    windows();\n    wheels();\n    lights();\n    doors();\n    grille();\n}",
    "renders": true
  },
  {
    "toy": "lorry",
    "openscad_code": "// Toy Lorry - OpenSCAD\n// Realistic medium-complexity toy lorry for 3D printing\n// Overall dimensions: 120mm long, 50mm wide, 60mm tall\n\n$fn = 32;\n\n// Main module\nmodule lorry() {\n    // Base chassis\n    chassis();\n    \n    // Cabin\n    cabin();\n    \n    // Wheels\n    wheels();\n    \n    // Cargo bed\n    cargo_bed();\n    \n    // Details\n    details();\n}\n\n// Chassis frame\nmodule chassis() {\n    translate([0, 0, 15]) {\n        // Main frame rails\n        difference() {\n            cube([100, 40, 10], center = true);\n            cube([96, 36, 6], center = true);\n        }\n        \n        // Front bumper\n        translate([-48, 0, -2]) {\n            cube([8, 45, 6], center = true);\n        }\n        \n        // Rear bumper\n        translate([48, 0, -2]) {\n            cube([8, 45, 6], center = true);\n        }\n    }\n}\n\n// Cabin module\nmodule cabin() {\n    // Cabin base\n    translate([-25, 0, 25]) {\n        difference() {\n            cube([45, 38, 30], center = true);\n            // Cabin interior\n            translate([0, 0, -5]) {\n                cube([41, 34, 25], center = true);\n            }\n        }\n        \n        // Windshield\n        translate([-5, 0, 10]) {\n            difference() {\n                cube([20, 35, 15], center = true);\n                translate([0, 0, -1]) {\n                    cube([21, 37, 13], center = true);\n                }\n            }\n        }\n        \n        // Side windows\n        for(side = [-1, 1]) {\n            translate([-10, side * 17, 10]) {\n                cube([30, 1, 12]);\n            }\n        }\n        \n        // Roof\n        translate([0, 0, 30]) {\n            cube([45, 40, 2], center = true);\n        }\n    }\n}\n\n// Wheels\nmodule wheels() {\n    // Front wheels\n    for(side = [-1, 1]) {\n        translate([-30, side * 25, 10]) {\n            wheel();\n        }\n    }\n    \n    // Rear wheels (dual)\n    for(side = [-1, 1]) {\n        for(offset = [0, 3]) {\n            translate([30 + offset, side * 25, 10]) {\n                wheel();\n            }\n        }\n    }\n}\n\n// Single wheel module\nmodule wheel() {\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h = 8, r = 12);\n            cylinder(h = 10, r = 6);\n        }\n        \n        // Tire tread\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([8.5, 0, 0]) {\n                    cube([3, 1, 8], center = true);\n                }\n            }\n        }\n        \n        // Hub cap\n        translate([0, 0, 4]) {\n            cylinder(h = 2, r = 8);\n        }\n    }\n}\n\n// Cargo bed\nmodule cargo_bed() {\n    translate([25, 0, 25]) {\n        difference() {\n            // Bed floor\n            cube([50, 40, 3], center = true);\n            \n            // Bed sides\n            translate([0, 0, 12]) {\n                cube([50, 40, 22], center = true);\n            }\n        }\n        \n        // Side walls\n        for(side = [-1, 1]) {\n            translate([0, side * 19, 12]) {\n                cube([50, 2, 20], center = true);\n            }\n        }\n        \n        // Back gate\n        translate([49, 0, 12]) {\n            cube([2, 36, 20], center = true);\n        }\n        \n        // Front wall\n        translate([0, 0, 12]) {\n            cube([2, 36, 20], center = true);\n        }\n    }\n}\n\n// Additional details\nmodule details() {\n    // Headlights\n    for(side = [-1, 1]) {\n        translate([-48, side * 15, 20]) {\n            sphere(r = 3);\n        }\n    }\n    \n    // Taillights\n    for(side = [-1, 1]) {\n        translate([48, side * 15, 20]) {\n            cube([3, 6, 3], center = true);\n        }\n    }\n    \n    // Exhaust pipe\n    translate([-5, 20, 35]) {\n        cylinder(h = 20, r = 2);\n    }\n    \n    // Mirrors\n    for(side = [-1, 1]) {\n        translate([-42, side * 20, 30]) {\n            rotate([0, 30 * side, 0]) {\n                cube([8, 1, 3], center = true);\n            }\n        }\n    }\n}\n\n// Render the lorry\nlorry();",
    "renders": true
  },
  {
    "toy": "skyhawk",
    "openscad_code": "// Skyhawk Toy Airplane - Realistic Medium Complexity\n// Dimensions: 120mm wingspan, 100mm length, 30mm height\n\nmodule main_body() {\n    // Fuselage - main body tube\n    hull() {\n        // Nose cone\n        translate([0, 0, 10])\n            cylinder(h=25, d1=12, d2=8, $fn=16);\n        \n        // Main fuselage\n        translate([0, 0, -10])\n            cylinder(h=50, d=12, $fn=16);\n        \n        // Tail boom\n        translate([0, 0, -45])\n            cylinder(h=30, d=6, $fn=16);\n    }\n}\n\nmodule wings() {\n    // Main wing\n    union() {\n        // Left wing\n        translate([-30, 0, 0])\n            cube([60, 8, 3], center=true);\n        \n        // Wing tips\n        translate([-35, 0, 0])\n            cube([5, 8, 3], center=true);\n        translate([35, 0, 0])\n            cube([5, 8, 3], center=true);\n        \n        // Wing struts\n        for(x = [-25, -15, 15, 25]) {\n            translate([x, 0, -8])\n                cylinder(h=8, d=2, $fn=6);\n        }\n    }\n}\n\nmodule tail_assembly() {\n    union() {\n        // Horizontal stabilizer\n        translate([0, 0, -45])\n            cube([35, 5, 2], center=true);\n        \n        // Vertical stabilizer\n        translate([0, 2.5, -42])\n            cube([2, 5, 12], center=true);\n        \n        // Tail support\n        translate([0, 0, -30])\n            cylinder(h=15, d=3, $fn=8);\n    }\n}\n\nmodule cockpit() {\n    // Cockpit canopy\n    difference() {\n        translate([0, 0, 5])\n            sphere(d=10, $fn=16);\n        \n        // Cut bottom half\n        translate([0, 0, 0])\n            cube([20, 20, 10], center=true);\n    }\n    \n    // Pilot figure\n    translate([0, 0, 5])\n        sphere(d=6, $fn=8);\n}\n\nmodule propeller() {\n    rotate([0, 0, $t*360])\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([6, 0, 20])\n            cube([12, 2, 1], center=true);\n    }\n    \n    // Propeller hub\n    translate([0, 0, 20])\n        cylinder(h=3, d=4, $fn=8);\n}\n\nmodule landing_gear() {\n    // Front wheel\n    translate([0, 0, -20])\n    union() {\n        cylinder(h=10, d=2, $fn=8);\n        translate([0, 0, -5])\n            sphere(d=6, $fn=8);\n    }\n    \n    // Main gear\n    for(side = [-1, 1]) {\n        translate([15*side, 0, -20])\n        union() {\n            cylinder(h=10, d=2, $fn=8);\n            translate([0, 0, -5])\n                sphere(d=6, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    wings();\n    tail_assembly();\n    cockpit();\n    propeller();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "toy": "huey",
    "openscad_code": "// Huey Toy Helicopter - Realistic Style (Medium Complexity)\n// Overall size ~120mm long, 40mm wide, 40mm tall\n\n// Main body parameters\nbody_length = 90;\nbody_width = 32;\nbody_height = 25;\nwall_thickness = 2;\n\n// Cockpit\nmodule cockpit() {\n    translate([0, 0, body_height/2 + 5])\n    difference() {\n        hull() {\n            cube([body_length - 20, body_width, 15], center=true);\n            translate([0, 0, 5])\n            cube([body_length - 25, body_width - 8, 8], center=true);\n        }\n        translate([0, 0, -2])\n        cube([body_length - 22, body_width - 4, 20], center=true);\n    }\n}\n\n// Main fuselage\nmodule fuselage() {\n    difference() {\n        hull() {\n            // Main body\n            translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n            \n            // Nose\n            translate([body_length/2 - 5, 0, body_height/2])\n            cube([20, body_width - 8, body_height - 5], center=true);\n            \n            // Tail boom start\n            translate([-body_length/2 + 10, 0, body_height/2])\n            cube([20, body_width - 12, body_height - 5], center=true);\n        }\n        \n        // Cockpit opening\n        translate([body_length/4, 0, body_height + 5])\n        cube([body_length/2, body_width - 8, 15], center=true);\n        \n        // Windows\n        for(i = [-1, 1]) {\n            translate([body_length/4 + 15, i * (body_width/2 - 5), body_height/2 + 5])\n            rotate([0, 90, 0])\n            cylinder(h=20, d1=8, d2=6, center=true);\n        }\n    }\n}\n\n// Tail boom\nmodule tail_boom() {\n    translate([-body_length/2 - 25, 0, body_height/2])\n    cube([50, body_width - 16, body_height - 10], center=true);\n}\n\n// Tail rotor\nmodule tail_rotor() {\n    translate([-body_length - 20, 0, body_height/2 + 5])\n    rotate([0, 90, 0])\n    cylinder(h=30, d=4, center=true);\n    \n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([-body_length - 20, 0, body_height/2 + 5])\n        cube([15, 2, 1], center=true);\n    }\n}\n\n// Main rotor assembly\nmodule main_rotor() {\n    // Rotor mast\n    translate([0, 0, body_height + 15])\n    cylinder(h=15, d=6, center=true);\n    \n    // Rotor head\n    translate([0, 0, body_height + 25])\n    sphere(d=8);\n    \n    // Main rotor blades (4 blades)\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 0, body_height + 25])\n        cube([80, 3, 1], center=true);\n    }\n}\n\n// Landing skids\nmodule landing_skids() {\n    module skid() {\n        translate([0, 0, -8])\n        difference() {\n            hull() {\n                translate([body_length/2 - 15, 0, 0])\n                sphere(d=6);\n                translate([-body_length/2 + 15, 0, 0])\n                sphere(d=6);\n            }\n            translate([0, 0, -2])\n            cube([body_length + 10, 5, 4], center=true);\n        }\n    }\n    \n    // Front skid\n    translate([0, body_width/2 + 5, 0])\n    skid();\n    \n    // Rear skid\n    translate([0, -body_width/2 - 5, 0])\n    skid();\n    \n    // Cross braces\n    for(x = [-body_length/4, body_length/4]) {\n        translate([x, 0, -8])\n        cube([3, body_width + 10, 6], center=true);\n    }\n}\n\n// Side details\nmodule side_details() {\n    // Doors\n    translate([0, body_width/2 + 0.1, body_height/2])\n    cube([body_length - 40, 0.5, body_height - 5], center=true);\n    \n    translate([0, -body_width/2 - 0.1, body_height/2])\n    cube([body_length - 40, 0.5, body_height - 5], center=true);\n    \n    // Fuel tanks\n    for(side = [-1, 1]) {\n        translate([0, side * (body_width/2 + 6), body_height/2 - 5])\n        rotate([90, 0, 0])\n        cylinder(h=body_length - 20, d=8, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    cockpit();\n    tail_boom();\n    tail_rotor();\n    main_rotor();\n    landing_skids();\n    side_details();\n}",
    "renders": true
  },
  {
    "toy": "gondola",
    "openscad_code": "// Gondola Toy - Realistic Medium Complexity\n// Overall length ~110mm, height ~50mm, width ~40mm\n\n// Parameters\nhull_length = 90;\nhull_width = 35;\nhull_height = 20;\nbow_tilt = 15;\nstern_tilt = 20;\nwall_thickness = 2;\nseat_count = 3;\n\n// Main hull shape\nmodule gondola_hull() {\n    difference() {\n        // Main hull body\n        union() {\n            // Central section\n            translate([0, 0, hull_height/2])\n                cube([hull_length - 20, hull_width, hull_height], center=true);\n            \n            // Bow (front)\n            translate([(hull_length - 20)/2, 0, hull_height/2])\n                rotate([0, -bow_tilt, 0])\n                scale([1.5, 1, 0.8])\n                sphere(d=hull_width);\n            \n            // Stern (back)\n            translate([-(hull_length - 20)/2, 0, hull_height/2])\n                rotate([0, stern_tilt, 0])\n                scale([1.2, 1, 0.7])\n                sphere(d=hull_width);\n        }\n        \n        // Hollow interior\n        translate([0, 0, hull_height/2 + wall_thickness])\n            cube([hull_length - 20 - wall_thickness*2, \n                  hull_width - wall_thickness*2, \n                  hull_height - wall_thickness], center=true);\n    }\n}\n\n// Seats for passengers\nmodule seats() {\n    seat_width = hull_width - 10;\n    seat_thickness = 3;\n    seat_spacing = (hull_length - 40) / (seat_count + 1);\n    \n    for(i = [1:seat_count]) {\n        translate([-hull_length/2 + 20 + i * seat_spacing, 0, hull_height + seat_thickness/2])\n            cube([seat_width, seat_width - 5, seat_thickness], center=true);\n    }\n}\n\n// Risers (supports between hull and seats)\nmodule risers() {\n    riser_height = 8;\n    seat_spacing = (hull_length - 40) / (seat_count + 1);\n    \n    for(i = [1:seat_count]) {\n        translate([-hull_length/2 + 20 + i * seat_spacing, 0, hull_height + riser_height/2])\n            cube([4, hull_width - 10, riser_height], center=true);\n    }\n}\n\n// Ferro (ornamental prow)\nmodule ferro() {\n    translate([hull_length/2 + 5, 0, hull_height - 5])\n        union() {\n            // Main blade\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=8, r2=0, center=true);\n            \n            // Side curls\n            translate([5, 8, 0])\n                rotate([90, 0, 45])\n                    cylinder(h=8, r1=4, r2=0, center=true);\n            translate([5, -8, 0])\n                rotate([90, 0, -45])\n                    cylinder(h=8, r1=4, r2=0, center=true);\n        }\n}\n\n// Gondolier's stand\nmodule gondolier_stand() {\n    stand_width = 15;\n    stand_length = 20;\n    \n    difference() {\n        // Main platform\n        translate([-hull_length/2 + 10, 0, hull_height + 12])\n            cube([stand_length, stand_width, 4], center=true);\n        \n        // Lightening holes\n        for(x = [-5:5:5])\n            for(y = [-4:4:4])\n                translate([-hull_length/2 + 10 + x, y, hull_height + 12])\n                    cylinder(h=5, r=1.5, center=true);\n    }\n}\n\n// Oar lock posts\nmodule oar_locks() {\n    post_height = 12;\n    post_diameter = 4;\n    \n    // Right side\n    translate([-hull_length/4, hull_width/2 - 2, hull_height + post_height/2])\n        cylinder(h=post_height, d=post_diameter, center=true);\n    \n    // Left side\n    translate([-hull_length/4, -hull_width/2 + 2, hull_height + post_height/2])\n        cylinder(h=post_height, d=post_diameter, center=true);\n}\n\n// Assembly\nunion() {\n    gondola_hull();\n    seats();\n    risers();\n    ferro();\n    gondolier_stand();\n    oar_locks();\n}",
    "renders": true
  },
  {
    "toy": "cougar",
    "openscad_code": "// Realistic Medium-Complexity Cougar Toy\n// Total length ~110 mm, wall thickness 2 mm, printable without supports\n\n$fn=36;\n\nmodule cougar() {\n    // Body: elongated ellipsoid 60 mm long, 30 mm high, 25 mm wide\n    difference() {\n        scale([1.2,0.65,0.8])\n            sphere(d=50);           // main body\n        translate([0,0,-25])\n            cube([100,100,50],center=true); // flatten bottom\n    }\n\n    // Head: sphere 20 mm diameter\n    translate([35,0,16])\n        sphere(d=22);\n\n    // Snout: tapered cylinder\n    translate([47,0,14])\n        rotate([0,90,0])\n        cylinder(d1=18,d2=12,h=15);\n\n    // Ears: two small spheres\n    translate([33,9,24])\n        sphere(d=8);\n    translate([33,-9,24])\n        sphere(d=8);\n\n    // Neck\n    translate([25,0,12])\n        rotate([0,-10,0])\n        cylinder(d1=15,d2=20,h=12);\n\n    // Tail: curved cylinder\n    color(\"orange\")\n    for (a=[0:15:90]) {\n        translate([sin(a)*-30-30, 0, 10+cos(a)*-20])\n            rotate([0,90+a,0])\n            cylinder(d1=10,d2=8,h=6);\n    }\n\n    // Legs\n    module leg() {\n        difference() {\n            union() {\n                // upper leg\n                translate([0,0,8])\n                    rotate([0,15,0])\n                    cylinder(d1=10,d2=8,h=20);\n                // lower leg\n                translate([0,0,0])\n                    cylinder(d=6,h=20);\n            }\n            translate([0,0,-5])\n                cube([100,100,10],center=true); // flatten bottom\n        }\n    }\n\n    // Front legs\n    translate([20,12,0])\n        leg();\n    translate([20,-12,0])\n        leg();\n\n    // Rear legs\n    translate([-20,8,0])\n        leg();\n    translate([-20,-8,0])\n        leg();\n\n    // Eyes: small spheres\n    translate([43,6,18])\n        sphere(d=3);\n    translate([43,-6,18])\n        sphere(d=3);\n\n    // Nose\n    translate([52,0,15])\n        sphere(d=2);\n\n    // Stripes on tail\n    for (i=[0:3]) {\n        translate([-30-i*10,0,12])\n            rotate([90,0,0])\n            cylinder(d=10,h=2);\n    }\n\n    // Paws: simple flat cylinders\n    module paw() {\n        cylinder(d=9,h=2);\n    }\n\n    // Attach paws\n    translate([20,12,-10])\n        paw();\n    translate([20,-12,-10])\n        paw();\n    translate([-20,8,-10])\n        paw();\n    translate([-20,-8,-10])\n        paw();\n}\n\n// Scale to desired size (110 mm)\nscale(1.1)\n    cougar();",
    "renders": true
  },
  {
    "toy": "clipper",
    "openscad_code": "// Toy Clipper (Hair Clipper) - Realistic Style, Medium Complexity\n\n// Overall dimensions\nclipper_length = 100;\nclipper_width = 60;\nclipper_height = 40;\n\n// Wall thickness\nwall = 2;\n\n// Main body module\nmodule clipper_body() {\n    difference() {\n        // Main housing - rounded box shape\n        hull() {\n            translate([0, 0, 0])\n                cube([clipper_length, clipper_width, clipper_height], center=true);\n            translate([0, 0, clipper_height/2 - 5])\n                sphere(d=clipper_width - 10);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            cube([clipper_length - wall*2, clipper_width - wall*2, clipper_height - wall], center=true);\n    }\n}\n\n// Blade guard with teeth\nmodule blade_guard() {\n    difference() {\n        // Guard base\n        translate([clipper_length/2 - 5, 0, 0])\n            cube([10, clipper_width - 20, 10], center=true);\n        \n        // Teeth slots\n        for(i = [-clipper_width/2 + 10 : 5 : clipper_width/2 - 10]) {\n            translate([clipper_length/2 - 5, i, 2])\n                cube([12, 3, 8], center=true);\n        }\n    }\n    \n    // Individual teeth\n    for(i = [-clipper_width/2 + 12.5 : 5 : clipper_width/2 - 12.5]) {\n        translate([clipper_length/2, i, 5])\n            cube([2, 2, 5], center=true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([-clipper_length/2 + 15, 0, clipper_height/2 - 5])\n        difference() {\n            // Button housing\n            cylinder(h=8, d=12, center=true);\n            // Button indent\n            cylinder(h=9, d=8, center=true);\n        }\n}\n\n// Grip pattern\nmodule grip_pattern() {\n    // Side grips\n    for(i = [-clipper_length/2 + 20 : 10 : clipper_length/2 - 20]) {\n        translate([i, clipper_width/2 - 1, 0])\n            cube([8, 2, clipper_height - 10], center=true);\n        translate([i, -clipper_width/2 + 1, 0])\n            cube([8, 2, clipper_height - 10], center=true);\n    }\n}\n\n// Adjustment lever\nmodule adjustment_lever() {\n    // Lever base\n    translate([0, clipper_width/2 + 5, clipper_height/2 - 10])\n        rotate([0, 90, 0])\n            cylinder(h=15, d=5, center=true);\n    \n    // Lever handle\n    translate([0, clipper_width/2 + 12, clipper_height/2 - 10])\n        rotate([0, 90, 0])\n            cylinder(h=8, d=8, center=true);\n}\n\n// Cord attachment\nmodule cord_attachment() {\n    translate([-clipper_length/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, d1=12, d2=8, center=true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    clipper_body();\n    \n    // Blade guard\n    blade_guard();\n    \n    // Power button\n    power_button();\n    \n    // Grip patterns\n    grip_pattern();\n    \n    // Adjustment lever\n    adjustment_lever();\n    \n    // Cord attachment\n    cord_attachment();\n}",
    "renders": true
  },
  {
    "toy": "transporter",
    "openscad_code": "// Toy Transporter Truck\n// 100 mm long, 45 mm wide, 35 mm tall\n// Realistic toy-style with 2 mm walls and no overhangs\n\n// Parameters\n$fn = 36;\nwall = 2;\nscale = 1;\n\n// Main truck body\nmodule truck_body() {\n    difference() {\n        // Outer shell\n        cube([70, 40, 25]);\n        \n        // Hollow inside\n        translate([wall, wall, wall])\n            cube([70 - 2*wall, 40 - 2*wall, 25 - wall]);\n    }\n}\n\n// Cab\nmodule cab() {\n    union() {\n        // Main cab block\n        difference() {\n            translate([-25, 5, 15])\n                cube([25, 30, 20]);\n            // Windshield cut\n            translate([-25, 15, 28])\n                rotate([0, -20, 0])\n                    cube([20, 20, 15]);\n            // Hollow cab\n            translate([-25 + wall, 5 + wall, 15 + wall])\n                cube([25 - 2*wall, 30 - 2*wall, 20 - wall]);\n        }\n        \n        // Cab roof\n        translate([-12.5, 20, 35])\n            cube([25, 10, 3]);\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=10);\n        // Tire tread pattern\n        for(i=[0:30:360]) {\n            rotate([0, 0, i])\n                translate([8, 0, 0])\n                    cube([4, 3, 8]);\n        }\n        // Hub hole\n        cylinder(h=10, r=3);\n    }\n}\n\n// Wheel assembly\nmodule wheel_set() {\n    for(side=[-1, 1]) {\n        translate([0, side*25, 0])\n            wheel();\n    }\n}\n\n// Cargo bed\nmodule cargo_bed() {\n    difference() {\n        // Bed floor\n        translate([0, 0, 25])\n            cube([70, 40, 3]);\n        \n        // Side walls\n        union() {\n            // Left side\n            translate([-5, 0, 25])\n                cube([5, 40, 10]);\n            // Right side\n            translate([70, 0, 25])\n                cube([5, 40, 10]);\n            // Back\n            translate([0, 0, 25])\n                cube([70, 5, 10]);\n        }\n        \n        // Hollow sides\n        translate([-5 + wall, wall, 25 + wall])\n            cube([5 - wall, 40 - 2*wall, 10 - wall]);\n        translate([70, wall, 25 + wall])\n            cube([5 - wall, 40 - 2*wall, 10 - wall]);\n        translate([wall, 0, 25 + wall])\n            cube([70 - 2*wall, 5 - wall, 10 - wall]);\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(side=[-1, 1]) {\n        translate([-25, side*12, 20])\n            sphere(r=3);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-5, 20, 35])\n        cylinder(h=15, r=2);\n}\n\n// Assemble the transporter\nunion() {\n    // Main components\n    truck_body();\n    cab();\n    cargo_bed();\n    \n    // Wheels - front\n    translate([0, 0, 0])\n        wheel_set();\n    \n    // Wheels - rear\n    translate([50, 0, 0])\n        wheel_set();\n    \n    // Details\n    headlights();\n    exhaust();\n    \n    // Bumper\n    translate([-25, 0, 10])\n        cube([3, 38, 5]);\n}",
    "renders": true
  },
  {
    "toy": "mustang",
    "openscad_code": "// Mustang Toy Car - Medium Complexity\n// Scale: 1:64 toy car size (~75mm length)\n\n$fn = 32;\n\n// Main body parameters\nbody_length = 70;\nbody_width = 30;\nbody_height = 15;\nwall_thickness = 2;\n\nmodule car_body() {\n    // Main chassis\n    difference() {\n        hull() {\n            // Front hood\n            translate([body_length/2 - 10, 0, 0])\n                cube([20, body_width, body_height], center=true);\n            // Main cabin\n            translate([-10, 0, 5])\n                cube([40, body_width - 4, body_height + 5], center=true);\n            // Rear trunk\n            translate([-body_length/2 + 5, 0, 0])\n                cube([15, body_width - 2, body_height], center=true);\n        }\n        \n        // Wheel wells\n        for(x = [-20, 20])\n            translate([x, body_width/2 - 3, -1])\n                rotate([90, 0, 0])\n                    cylinder(h=body_height + 2, r=6, center=true);\n        for(x = [-20, 20])\n            translate([x, -body_width/2 + 3, -1])\n                rotate([90, 0, 0])\n                    cylinder(h=body_height + 2, r=6, center=true);\n    }\n}\n\nmodule wheels() {\n    // Create four wheels with axles\n    for(x = [-20, 20])\n    for(y = [body_width/2 - 3, -body_width/2 + 3]) {\n        translate([x, y, -5]) {\n            // Tire\n            difference() {\n                cylinder(h=4, r=5, center=true);\n                cylinder(h=5, r=3.5, center=true);\n            }\n            // Rim\n            color(\"silver\")\n            translate([0, 0, 2.5])\n                cylinder(h=0.5, r=3.4, center=true);\n        }\n    }\n}\n\nmodule windows() {\n    // Windshield\n    color(\"lightblue\", 0.7)\n    translate([5, 0, body_height + 2])\n        cube([15, body_width - 10, 8], center=true);\n    \n    // Rear window\n    translate([-15, 0, body_height + 2])\n        cube([10, body_width - 10, 6], center=true);\n    \n    // Side windows\n    translate([0, body_width/2 - 1, body_height + 3])\n        cube([25, 2, 7], center=true);\n    translate([0, -body_width/2 + 1, body_height + 3])\n        cube([25, 2, 7], center=true);\n}\n\nmodule mustang_details() {\n    // Front grille\n    color(\"darkgray\")\n    translate([body_length/2 - 2, 0, body_height/2])\n        cube([4, body_width - 10, body_height/4], center=true);\n    \n    // Headlights\n    color(\"white\")\n    translate([body_length/2 - 1, body_width/2 - 5, body_height/2])\n        sphere(r=2);\n    translate([body_length/2 - 1, -body_width/2 + 5, body_height/2])\n        sphere(r=2);\n    \n    // Tail lights\n    color(\"red\")\n    translate([-body_length/2 + 2, body_width/2 - 5, body_height/2])\n        cube([2, 3, 2], center=true);\n    translate([-body_length/2 + 2, -body_width/2 + 5, body_height/2])\n        cube([2, 3, 2], center=true);\n    \n    // Mustang logo (simplified running horse)\n    color(\"silver\")\n    translate([body_length/2 - 12, 0, body_height + 1])\n        rotate([0, 0, 90])\n            scale([0.5, 0.5, 0.5])\n                cube([8, 4, 0.5], center=true);\n    \n    // Exhaust pipes\n    color(\"gray\")\n    translate([-body_length/2 + 3, body_width/2 - 2, 0])\n        cylinder(h=8, r=1, center=true);\n    translate([-body_length/2 + 3, -body_width/2 + 2, 0])\n        cylinder(h=8, r=1, center=true);\n    \n    // Spoiler\n    color(\"black\")\n    translate([-body_length/2 + 8, 0, body_height + 5])\n        cube([8, body_width - 4, 1], center=true);\n}\n\n// Assemble the toy car\nunion() {\n    car_body();\n    wheels();\n    windows();\n    mustang_details();\n}",
    "renders": true
  },
  {
    "toy": "tomcat",
    "openscad_code": "// Tomcat toy - realistic style, medium complexity\n// Designed for 3D printing, 100mm tall\n\n// Overall dimensions\ncat_height = 100;\ncat_length = 80;\ncat_width = 35;\n\n// Wall thickness for printing\nwall = 2;\n\nmodule body() {\n    // Main torso - oval shape\n    hull() {\n        translate([0, 0, cat_height/2])\n            sphere(d=cat_width);\n        translate([10, 0, cat_height/2])\n            sphere(d=cat_width);\n    }\n    \n    // Chest area\n    translate([-cat_length/4, 0, cat_height/3])\n        sphere(d=cat_width*1.1);\n}\n\nmodule head() {\n    // Main head sphere\n    translate([-cat_length/2.5, 0, cat_height*0.7])\n        sphere(d=cat_width*0.9);\n    \n    // Snout\n    translate([-cat_length/2.2, 0, cat_height*0.65])\n        sphere(d=cat_width*0.5);\n    \n    // Ears\n    for(y = [-1, 1]) {\n        translate([-cat_length/2.3, y*cat_width/2.2, cat_height*0.85])\n            rotate([0, y*15, 0])\n            cylinder(h=cat_height*0.15, d1=cat_width*0.3, d2=0);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(x = [-cat_length/3.5, -cat_length/4.5])\n        for(y = [-cat_width/3, cat_width/3]) {\n            translate([x, y, cat_height*0.15])\n                cylinder(h=cat_height*0.35, d=cat_width*0.25);\n        }\n    \n    // Back legs\n    for(y = [-cat_width/3.5, cat_width/3.5]) {\n        translate([cat_length/4, y, cat_height*0.15])\n            cylinder(h=cat_height*0.3, d=cat_width*0.3);\n    }\n}\n\nmodule tail() {\n    // Curved tail\n    rotate([0, 40, 0])\n    translate([cat_length/2.2, 0, cat_height/2])\n    for(i = [0:5:45]) {\n        rotate([0, 0, i])\n        translate([i*0.8, 0, 0])\n        sphere(d=cat_width*0.3*(1-i/60));\n    }\n}\n\nmodule facial_features() {\n    // Eyes\n    for(y = [-1, 1]) {\n        translate([-cat_length/2.15, y*cat_width/4, cat_height*0.7])\n            sphere(d=cat_width*0.15);\n        translate([-cat_length/2.1, y*cat_width/4, cat_height*0.71])\n            sphere(d=cat_width*0.08);\n    }\n    \n    // Nose\n    translate([-cat_length/2.05, 0, cat_height*0.62])\n        sphere(d=cat_width*0.12);\n    \n    // Whiskers\n    for(y = [-1, 1])\n        for(z = [-1, 0, 1]) {\n            translate([-cat_length/2.1, y*cat_width/3, cat_height*0.6+z*5])\n                rotate([0, 15, 0])\n                cylinder(h=cat_length*0.15, d=wall);\n        }\n}\n\nmodule stripes() {\n    // Body stripes\n    for(i = [1:4])\n        translate([i*cat_length/7, 0, cat_height/2])\n            scale([1, 1.5, 0.3])\n            sphere(d=cat_width*0.9);\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    facial_features();\n    stripes();\n}",
    "renders": true
  },
  {
    "toy": "shuttle",
    "openscad_code": "// Toy Space Shuttle - Realistic Style, Medium Complexity\n// Dimensions: ~120mm length, ~80mm wingspan, ~40mm height\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule main_body() {\n    // Main fuselage\n    hull();\n    nose_cone();\n    tail_fin();\n}\n\nmodule hull() {\n    // Main cylindrical body\n    translate([0, 0, 15])\n        cylinder(h = 60, r1 = 10, r2 = 10);\n    \n    // Main body extension\n    translate([0, 0, 5])\n        cylinder(h = 20, r1 = 12, r2 = 10);\n    \n    // Bottom flat section for stability\n    translate([0, 0, 0])\n        cube([24, 12, 5], center = true);\n}\n\nmodule nose_cone() {\n    // Nose cone\n    translate([0, 0, 80])\n        cylinder(h = 15, r1 = 0, r2 = 10);\n    \n    // Nose tip\n    translate([0, 0, 95])\n        sphere(r = 2);\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            linear_extrude(height = 15)\n                polygon(points = [[0, 0], [5, 0], [0, 20]]);\n    \n    // Fin thickness\n    translate([0, 0, -7.5])\n        cube([5, 15, wall_thickness], center = true);\n}\n\nmodule wings() {\n    // Left wing\n    translate([-15, -15, 10])\n        rotate([0, 0, 30])\n            wing_half();\n    \n    // Right wing\n    mirror([1, 0, 0])\n        translate([-15, -15, 10])\n            rotate([0, 0, 30])\n                wing_half();\n    \n    // Wing struts\n    for (i = [-1, 1]) {\n        translate([i * 20, 0, 15])\n            cylinder(h = 8, r = 2);\n    }\n}\n\nmodule wing_half() {\n    // Main wing panel\n    translate([0, 0, 0])\n        cube([30, 15, 3]);\n    \n    // Wing tip\n    translate([30, 0, 1.5])\n        sphere(r = 3);\n    \n    // Wing leading edge\n    translate([15, -7.5, 1.5])\n        rotate([0, 90, 0])\n            cylinder(h = 30, r = 1.5);\n}\n\nmodule engines() {\n    // Main engines (3)\n    for (i = [-1, 0, 1]) {\n        translate([i * 5, 0, 0])\n            engine();\n    }\n    \n    // Engine fairing\n    translate([0, 0, -5])\n        cylinder(h = 5, r1 = 12, r2 = 10);\n}\n\nmodule engine() {\n    // Engine bell\n    translate([0, 0, -8])\n        cylinder(h = 8, r1 = 3, r2 = 2);\n    \n    // Engine nozzle\n    translate([0, 0, -10])\n        cylinder(h = 2, r = 1.5);\n}\n\nmodule cockpit() {\n    // Cockpit window\n    translate([0, 0, 65])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r1 = 8, r2 = 8);\n    \n    // Window frame\n    translate([0, 0, 65])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r1 = 8.5, r2 = 8.5);\n    \n    // Cockpit details\n    translate([0, 0, 75])\n        sphere(r = 8);\n}\n\nmodule landing_gear() {\n    // Nose gear\n    translate([0, -10, 0])\n        landing_strut();\n    \n    // Main gear\n    for (i = [-1, 1]) {\n        translate([i * 12, 0, 0])\n            landing_strut();\n    }\n}\n\nmodule landing_strut() {\n    // Strut\n    translate([0, 0, -2])\n        cylinder(h = 8, r = 1.5);\n    \n    // Wheel\n    translate([0, 0, -10])\n        rotate([90, 0, 0])\n            cylinder(h = 3, r = 3);\n}\n\nmodule cargo_bay() {\n    // Bay doors\n    translate([0, 0, 35])\n        cube([20, 30, 1], center = true);\n    \n    // Bay details\n    translate([0, 0, 36])\n        for (i = [-10:5:10]) {\n            translate([i, 0, 0])\n                cube([1, 28, 0.5]);\n        }\n}\n\n// Assembly\nunion() {\n    main_body();\n    wings();\n    engines();\n    cockpit();\n    landing_gear();\n    cargo_bay();\n}",
    "renders": true
  },
  {
    "toy": "steamer",
    "openscad_code": "// Toy Steamer (Clothes Steamer) - Realistic Style, Medium Complexity\n// Approximate size: 120mm tall, 60mm wide, 80mm deep\n\n$fn = 50;\n\n// Main body dimensions\nbody_w = 50;\nbody_d = 40;\nbody_h = 80;\n\n// Water tank dimensions\ntank_w = 35;\ntank_d = 30;\ntank_h = 40;\n\n// Handle dimensions\nhandle_r = 6;\nhandle_h = 60;\n\n// Head dimensions\nhead_w = 45;\nhead_d = 25;\nhead_h = 15;\n\n// Steam holes\nhole_r = 2;\n\nmodule steamer_body() {\n    union() {\n        // Main body - slightly tapered\n        hull() {\n            cylinder(h=body_h, r1=body_w/2, r2=body_w/2-3, center=true);\n            translate([0,0,-body_h/2]) cube([body_w, body_d, 2], center=true);\n        }\n        \n        // Water tank - transparent blue cylinder\n        translate([0,0,body_h/2+tank_h/2-5])\n            cylinder(h=tank_h, r=tank_w/2, center=true);\n    }\n}\n\nmodule handle() {\n    // Curved handle with grip texture\n    translate([0,body_d/2+handle_r+5,body_h-20])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=handle_h, r=handle_r, center=true);\n                // Grip rings\n                for(i = [-20:5:20]) {\n                    translate([0,0,i]) \n                        scale([0.9,0.9,0.2]) \n                            cylinder(h=1, r=handle_r+1, center=true);\n                }\n            }\n}\n\nmodule steamer_head() {\n    translate([0,0,body_h/2+tank_h+head_h/2])\n        union() {\n            // Main head\n            cube([head_w, head_d, head_h], center=true);\n            \n            // Steam plate\n            translate([0,0,-head_h/2-1])\n                cube([head_w+4, head_d+4, 3], center=true);\n            \n            // Steam holes\n            for(x = [-15:7:15])\n                for(y = [-8:7:8]) {\n                    translate([x,y,-head_h/2-2])\n                        cylinder(h=5, r=hole_r, center=true);\n                }\n            \n            // Connection to body\n            translate([0,0,-head_h/2-tank_h/2+5])\n                cylinder(h=tank_h, r=10, center=true);\n        }\n}\n\nmodule power_cord() {\n    // Simple cord coming from base\n    translate([body_w/2-5,0,-body_h/2-10])\n        rotate([90,0,0])\n            cylinder(h=20, r=2.5, center=true);\n}\n\nmodule control_panel() {\n    // Buttons and LED\n    translate([body_w/2-8,0,body_h/4])\n        union() {\n            // Power button\n            translate([-5,0,0])\n                cylinder(h=3, r=4, center=true);\n            \n            // Steam button\n            translate([5,0,0])\n                cylinder(h=3, r=4, center=true);\n            \n            // LED indicator\n            translate([0,body_d/2+3,0])\n                sphere(r=2);\n        }\n}\n\n// Main assembly\nunion() {\n    steamer_body();\n    handle();\n    steamer_head();\n    power_cord();\n    control_panel();\n}",
    "renders": true
  },
  {
    "toy": "buggy",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall buggy dimensions\nwheel_d = 20;\nwheel_w = 4;\nbase_w = 40;\nbase_l = 80;\nbase_h = 6;\nhandle_h = 70;\nhandle_r = 4;\n\n// Main chassis platform\nmodule chassis() {\n    difference() {\n        // Main base plate\n        translate([0, 0, base_h/2])\n            cube([base_l, base_w, base_h], center=true);\n        \n        // Lightening holes\n        for (x = [-30, -10, 10, 30])\n            translate([x, 0, base_h])\n                cylinder(h=base_h+1, r=7, center=false);\n    }\n}\n\n// Wheel including tyre and hub\nmodule wheel() {\n    difference() {\n        union() {\n            // Tyre\n            color(\"black\")\n            cylinder(h=wheel_w, r=wheel_d/2, center=true);\n            \n            // Rim\n            color(\"silver\")\n            translate([0, 0, 1])\n                cylinder(h=wheel_w-2, r=wheel_d/2 - 3, center=true);\n        }\n        // Axle hole\n        cylinder(h=wheel_w+1, r=2, center=true);\n    }\n}\n\n// Axle with wheels\nmodule axle(x_pos) {\n    // Axle rod\n    color(\"gray\")\n    translate([x_pos, 0, wheel_d/2])\n        rotate([90, 0, 0])\n            cylinder(h=base_w+10, r=2, center=true);\n    \n    // Wheels\n    translate([x_pos, -base_w/2-5, wheel_d/2])\n        wheel();\n    translate([x_pos,  base_w/2+5, wheel_d/2])\n        wheel();\n}\n\n// Side rail for toy safety\nmodule side_rail(y_pos) {\n    color(\"red\")\n    translate([0, y_pos, base_h+10])\n        cube([base_l-10, 2, 20], center=true);\n}\n\n// Backrest for baby\nmodule backrest() {\n    color(\"blue\")\n    translate([-base_l/2+2, 0, base_h+10])\n        cube([2, base_w-6, 25], center=false);\n}\n\n// Handle bar for pushing\nmodule handle() {\n    // Vertical pole\n    color(\"silver\")\n    translate([base_l/2-5, 0, 0])\n        cylinder(h=handle_h, r=handle_r);\n    \n    // Push bar\n    translate([base_l/2-5, 0, handle_h])\n        rotate([90, 0, 0])\n            cylinder(h=base_w+20, r=handle_r, center=true);\n}\n\n// Seat cushion\nmodule seat() {\n    color(\"yellow\")\n    translate([0, 0, base_h+2])\n        cube([base_l-20, base_w-10, 4], center=true);\n}\n\n// Canopy support\nmodule canopy() {\n    color(\"green\")\n    translate([0, 0, base_h+25])\n        cube([base_l-10, base_w-5, 2], center=true);\n    \n    // Canopy roof\n    color(\"darkgreen\")\n    translate([0, 0, base_h+28])\n        cube([base_l, base_w+5, 1], center=true);\n}\n\n// Assembly\nchassis();\n\n// Front and rear axles\naxle(base_l/2-10);\naxle(-base_l/2+10);\n\n// Safety rails\nside_rail(base_w/2-1);\nside_rail(-base_w/2+1);\n\n// Backrest\nbackrest();\n\n// Seat\nseat();\n\n// Canopy\ncanopy();\n\n// Handle for parent\nhandle();",
    "renders": true
  },
  {
    "toy": "convoy",
    "openscad_code": "// Convoy Toy – Realistic Style, Medium Complexity\n// Overall size: ~110 mm long, ~60 mm high, ~45 mm wide\n// Wall thickness: 2 mm minimum for 3D-printing\n\n$fn = 36;               // Circle quality\n\n// --------------------------\n// Wheel module (solid, no overhangs)\nmodule wheel(d = 20, w = 8){\n    difference(){\n        cylinder(h = w, d = d, center = true);\n        // Central axle hole (Ø3 mm) for toy rod\n        rotate([90,0,0]) cylinder(h = w + 1, d = 3, center = true);\n    }\n}\n\n// --------------------------\n// Cabin module – driver’s compartment\nmodule cabin(){\n    // Base box wall 2 mm\n    difference(){\n        cube([42, 38, 30], center = true);\n        translate([0,0,-1]) cube([38, 34, 28], center = true);\n    }\n    // Roof\n    translate([0,0,16]) difference(){\n        cube([44, 40, 4], center = true);\n        translate([0,0,-1]) cube([40, 36, 6], center = true);\n    }\n    // Windshield\n    translate([0, 16, 8]) rotate([-110,0,0]) cube([36,1,16], center = true);\n    // Side windows (left and right)\n    translate([20,0,8]) rotate([0,90,0]) cube([1,16,12], center = true);\n    translate([-20,0,8]) rotate([0,90,0]) cube([1,16,12], center = true);\n}\n\n// --------------------------\n// Box-bed cargo module\nmodule box_bed(){\n    // Main bed walls 2 mm\n    difference(){\n        cube([90, 44, 28], center = true);\n        translate([0,0,-1]) cube([86, 40, 24], center = true);\n    }\n    // Front wall against cabin\n    translate([-46,0,14]) cube([2,44,28], center = true);\n    // Rear drop gate (hinged, closed position)\n    translate([46,0,2]) cube([2,44,24], center = true);\n}\n\n// --------------------------\n// Chassis frame\nmodule chassis(){\n    // Side rails\n    for(y = [-18, 18])\n        translate([0, y, -8]) cube([110, 4, 12], center = true);\n    // Cross beams\n    for(x = [-40, 0, 40])\n        translate([x, 0, -8]) cube([4, 40, 12], center = true);\n}\n\n// --------------------------\n// Assemble the convoy toy\nunion(){\n    // Chassis sits on wheels\n    chassis();\n\n    // Four wheels\n    for(x = [-35, 35])\n        for(side = [-1, 1])\n            translate([x, side*25, -15]) wheel();\n\n    // Cabin mounted front\n    translate([-20, 0, -1]) cabin();\n\n    // Box bed mounted rear\n    translate([25, 0, 0]) box_bed();\n}",
    "renders": true
  },
  {
    "toy": "falcon",
    "openscad_code": "// Falcon Toy - Realistic Style, Medium Complexity\n// Dimensions: ~100mm wingspan, ~85mm length, ~35mm height\n// Wall thickness: 2mm for 3D printing\n\nmodule falcon_toy() {\n    // Main body - oval shape with slight curvature\n    difference() {\n        // Main body shell\n        union() {\n            // Upper body\n            translate([0, 0, 5])\n            scale([1.2, 1.5, 0.8])\n            sphere(d=40, $fn=32);\n            \n            // Lower body\n            translate([0, 0, -5])\n            scale([1.1, 1.6, 0.6])\n            sphere(d=40, $fn=32);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 5])\n        scale([1.1, 1.4, 0.7])\n        sphere(d=38, $fn=32);\n    }\n    \n    // Head\n    translate([20, 0, 10])\n    difference() {\n        scale([1.3, 1, 1.1])\n        sphere(d=22, $fn=32);\n        \n        // Hollow head\n        scale([1.2, 0.9, 1])\n        sphere(d=20, $fn=32);\n    }\n    \n    // Beak\n    translate([32, 0, 10])\n    rotate([0, -10, 0])\n    difference() {\n        cylinder(h=15, d1=8, d2=4, $fn=16);\n        // Hollow beak\n        translate([0, 0, 1])\n        cylinder(h=13, d1=6, d2=2, $fn=16);\n    }\n    \n    // Eyes - left and right\n    for (x = [-24, -24]) {\n        translate([x, 5, 12])\n        sphere(d=3, $fn=16);\n        translate([x, -5, 12])\n        sphere(d=3, $fn=16);\n    }\n    \n    // Wings - left and right\n    for (side = [-1, 1]) {\n        // Main wing\n        translate([0, side * 25, 5])\n        rotate([0, 0, side * 20])\n        difference() {\n            scale([1.2, 0.8, 0.15])\n            cube([40, 30, 4], center=true);\n            \n            // Wing feather details\n            for (i = [1:3]) {\n                translate([i * 8 - 15, 0, 2.5])\n                rotate([0, 0, side * 5])\n                scale([0.8, 0.9, 1])\n                cube([8, 28 - i * 4, 3], center=true);\n            }\n            \n            // Hollow wing\n            scale([1.1, 0.7, 0.8])\n            cube([38, 28, 3.5], center=true);\n        }\n        \n        // Wing support structure\n        translate([5, side * 15, -3])\n        rotate([0, 0, side * -30])\n        cylinder(h=8, d=3, $fn=16);\n    }\n    \n    // Tail feathers\n    difference() {\n        translate([-25, 0, 0])\n        rotate([0, 0, 0])\n        scale([0.8, 1.2, 0.15])\n        cube([20, 25, 4], center=true);\n        \n        // Feather separation\n        for (i = [-1:1]) {\n            translate([-25, i * 7, 2])\n            cube([22, 2, 4], center=true);\n        }\n        \n        // Hollow tail\n        scale([0.7, 1.1, 0.8])\n        cube([18, 23, 3.5], center=true);\n    }\n    \n    // Legs and feet\n    for (side = [-1, 1]) {\n        // Leg\n        translate([5, side * 8, -15])\n        cylinder(h=15, d=4, $fn=16);\n        \n        // Foot base\n        translate([5, side * 8, -22.5])\n        difference() {\n            cube([12, 8, 3], center=true);\n            cube([10, 6, 2], center=true);\n        }\n        \n        // Toes\n        for (toe = [-1, 0, 1]) {\n            translate([toe * 3 + 5, side * 12, -22.5])\n            cylinder(h=4, d=2, $fn=8);\n        }\n    }\n    \n    // Structural support ring inside body\n    translate([0, 0, -5])\n    difference() {\n        cylinder(h=2, d=35, $fn=32);\n        cylinder(h=2, d=31, $fn=32);\n    }\n}\n\n// Assembly\nfalcon_toy();\n\n// Base stand for stability\ntranslate([0, 0, -25])\ndifference() {\n    cylinder(h=3, d=50, $fn=64);\n    cylinder(h=3, d=46, $fn=64);\n}",
    "renders": true
  },
  {
    "toy": "osprey",
    "openscad_code": "// Osprey Toy Design - Realistic Style, Medium Complexity\n// Size: ~100mm wingspan, 3D printable with 2mm walls\n\n$fn = 32;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main body module\nmodule osprey_body() {\n    // Central body - elongated ellipsoid\n    translate([0, 0, 10])\n    scale([1.5, 1, 1])\n    sphere(r=15);\n    \n    // Chest/belly bulge\n    translate([0, -5, 5])\n    scale([1.3, 0.8, 0.7])\n    sphere(r=12);\n    \n    // Tail base\n    translate([-20, 0, 8])\n    rotate([0, 10, 0])\n    scale([2, 0.5, 0.3])\n    cylinder(r1=10, r2=5, h=15);\n}\n\n// Head module\nmodule osprey_head() {\n    // Main head shape\n    translate([20, 0, 15])\n    scale([1.2, 1, 1.1])\n    sphere(r=10);\n    \n    // Beak\n    translate([30, 0, 15])\n    rotate([0, -20, 0])\n    scale([1, 0.3, 0.3])\n    cylinder(r1=5, r2=0, h=10);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([25, side*5, 18])\n        sphere(r=3);\n    }\n}\n\n// Wing module with feather details\nmodule osprey_wing(side) {\n    // Mirror for left/right\n    mirror([side, 0, 0]) {\n        // Main wing structure\n        translate([0, -side*30, 15])\n        rotate([0, 0, side*20])\n        scale([2.5, 0.2, 1])\n        cube([40, 20, 3]);\n        \n        // Wing tip\n        translate([35, -side*35, 20])\n        rotate([0, 0, side*30])\n        scale([0.8, 0.1, 0.5])\n        cylinder(r1=10, r2=5, h=15);\n        \n        // Primary feathers\n        for(i = [0:4]) {\n            translate([25 + i*3, -side*(32 + i*2), 15])\n            rotate([0, 0, side*(10 + i*5)])\n            scale([0.3, 0.05, 1])\n            cube([8, 15, 1]);\n        }\n    }\n}\n\n// Leg module\nmodule osprey_leg(side) {\n    translate([5, side*8, 0]) {\n        // Upper leg\n        rotate([0, -side*10, 0])\n        cylinder(r=3, h=12);\n        \n        // Lower leg\n        translate([0, 0, -12])\n        rotate([0, side*20, 0])\n        cylinder(r=2.5, h=15);\n        \n        // Foot with toes\n        translate([0, 0, -27])\n        rotate([90, 0, 0])\n        cylinder(r=2, h=8);\n        \n        // Toes\n        for(angle = [-30, 0, 30]) {\n            rotate([0, 0, angle])\n            translate([6, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(r=1, h=6);\n        }\n    }\n}\n\n// Tail feathers\nmodule osprey_tail() {\n    // Central tail\n    translate([-25, 0, 8])\n    rotate([0, 20, 0])\n    scale([0.5, 0.1, 2])\n    cube([15, 20, 2]);\n    \n    // Side tail feathers\n    for(side = [-1, 1]) {\n        translate([-25, side*8, 8])\n        rotate([0, 20, side*10])\n        scale([0.4, 0.1, 1.5])\n        cube([12, 15, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    osprey_body();\n    osprey_head();\n    osprey_tail();\n    \n    // Wings\n    osprey_wing(1);   // Right wing\n    osprey_wing(-1);  // Left wing\n    \n    // Legs\n    osprey_leg(1);    // Right leg\n    osprey_leg(-1);   // Left leg\n    \n    // Structural support beam (toy feature)\n    translate([0, 0, -30])\n    cube([60, 5, 2]);\n}\n\n// Print orientation support\ntranslate([0, 0, -35])\nrotate([90, 0, 0])\ncylinder(r=20, h=2);",
    "renders": true
  },
  {
    "toy": "trawler",
    "openscad_code": "// Toy Trawler Boat - Realistic Style, Medium Complexity\n// Scale: ~120mm length, designed for 3D printing\n\n$fn = 32;\n\n// Main dimensions\nhull_length = 120;\nhull_width = 35;\nhull_height = 20;\nsuperstructure_height = 25;\n\n// Hull module with rounded edges and tapered shape\nmodule hull() {\n    difference() {\n        // Main hull body - tapered\n        hull_shape();\n        \n        // Hollow out interior for 3D printing\n        translate([5, 2, 2])\n            scale([0.9, 0.85, 0.8])\n            hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // Create tapered hull with rounded edges\n    hull() {\n        // Front\n        translate([hull_length/2 - 5, 0, 0])\n            sphere(d = hull_width);\n        // Back\n        translate([-hull_length/2 + 5, 0, 0])\n            sphere(d = hull_width);\n        // Bottom\n        translate([0, 0, -hull_height/2])\n            sphere(d = hull_width * 0.8);\n        // Top\n        translate([0, 0, hull_height/2])\n            sphere(d = hull_width * 1.1);\n    }\n}\n\n// Cabin/superstructure\nmodule cabin() {\n    difference() {\n        // Main cabin block\n        translate([0, 0, hull_height + superstructure_height/2])\n            cube([hull_length * 0.6, hull_width * 0.7, superstructure_height], center = true);\n        \n        // Door opening\n        translate([hull_length * 0.15, 0, hull_height + 5])\n            cube([8, hull_width * 0.5, 12], center = true);\n        \n        // Windows\n        for(i = [-1, 1]) {\n            translate([hull_length * 0.25 * i, hull_width * 0.35, hull_height + superstructure_height/2])\n                cube([6, 2, 8], center = true);\n        }\n    }\n}\n\n// Bridge/wheelhouse\nmodule bridge() {\n    translate([hull_length * 0.3, 0, hull_height + superstructure_height + 8])\n        difference() {\n            cube([hull_length * 0.4, hull_width * 0.6, 16], center = true);\n            // Windows\n            for(i = [-1, 1]) {\n                translate([0, hull_width * 0.3 * i, 2])\n                    cube([hull_length * 0.35, 2, 8], center = true);\n            }\n        }\n}\n\n// Smokestack\nmodule smokestack() {\n    translate([-hull_length * 0.2, 0, hull_height + superstructure_height + 16])\n        cylinder(h = 20, d1 = 8, d2 = 6);\n}\n\n// Mast with radar\nmodule mast() {\n    translate([hull_length * 0.4, 0, hull_height + superstructure_height + 8])\n        union() {\n            // Mast pole\n            cylinder(h = 40, d = 3);\n            // Radar dome\n            translate([0, 0, 35])\n                sphere(d = 8);\n            // Cross beams\n            for(i = [0.7, 0.9]) {\n                rotate([0, 90, 0])\n                    translate([0, 0, 40 * i])\n                        cube([30, 1, 1], center = true);\n            }\n        }\n}\n\n// Lifeboat\nmodule lifeboat() {\n    translate([-hull_length * 0.3, hull_width * 0.5, hull_height + superstructure_height - 5])\n        rotate([0, 10, 0])\n            hull() {\n                cube([20, 8, 6], center = true);\n                translate([0, 0, 3])\n                    cube([20, 8, 2], center = true);\n            }\n}\n\n// Fishing net equipment\nmodule net_equipment() {\n    // Net drum at rear\n    translate([-hull_length/2 + 10, 0, hull_height - 5])\n        rotate([90, 0, 0])\n            cylinder(h = hull_width * 0.8, d = 12);\n    \n    // Crane/arm for net\n    translate([-hull_length/2 + 5, hull_width * 0.3, hull_height + 5])\n        rotate([0, 0, -30])\n            union() {\n                cube([25, 2, 2], center = true);\n                translate([12, 0, 0])\n                    sphere(d = 3);\n            }\n}\n\n// Railings around deck\nmodule railings() {\n    for(side = [-1, 1]) {\n        translate([0, side * hull_width/2, hull_height + 1])\n            for(x = [-hull_length/2 + 10 : 20 : hull_length/2 - 10]) {\n                translate([x, 0, 0])\n                    union() {\n                        // Posts\n                        cylinder(h = 6, d = 2);\n                        // Top rail\n                        translate([0, 0, 6])\n                            cube([20, 1, 1], center = true);\n                    }\n            }\n    }\n}\n\n// Anchor\nmodule anchor() {\n    translate([hull_length/2 - 5, 0, hull_height - 2])\n        union() {\n            // Main shank\n            cube([2, 2, 10]);\n            // Arms\n            for(side = [-1, 1]) {\n                translate([0, side * 4, -4])\n                    rotate([0, side * 30, 0])\n                        cube([2, 2, 6]);\n            }\n        }\n}\n\n// Assemble the trawler\nunion() {\n    hull();\n    cabin();\n    bridge();\n    smokestack();\n    mast();\n    lifeboat();\n    net_equipment();\n    railings();\n    anchor();\n}",
    "renders": true
  },
  {
    "toy": "roadrunner",
    "openscad_code": "// Roadrunner Toy - Realistic Style, Medium Complexity\n// Dimensions: ~100mm length, 60mm height, 30mm width\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule bird_body() {\n    difference() {\n        // Main body\n        scale([1.8, 1, 1.2])\n        sphere(d = 40);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n        scale([1.7, 0.9, 1.1])\n        sphere(d = 36);\n    }\n}\n\nmodule head() {\n    difference() {\n        // Head sphere\n        translate([28, 0, 18])\n        scale([1.2, 1, 1.1])\n        sphere(d = 25);\n        \n        // Hollow interior\n        translate([28, 0, 17])\n        scale([1.1, 0.9, 1])\n        sphere(d = 21);\n    }\n}\n\nmodule beak() {\n    // Upper beak\n    translate([42, 0, 22])\n    rotate([0, -20, 0])\n    scale([1, 0.6, 0.3])\n    cylinder(h = 25, d1 = 8, d2 = 3);\n    \n    // Lower beak\n    translate([42, 0, 18])\n    rotate([0, 15, 0])\n    scale([1, 0.6, 0.25])\n    cylinder(h = 20, d1 = 8, d2 = 3);\n}\n\nmodule eye() {\n    // Eye socket\n    translate([35, -6, 24])\n    sphere(d = 6);\n    \n    // Eye pupil\n    translate([36.5, -7, 25])\n    sphere(d = 3);\n}\n\nmodule tail() {\n    // Tail feathers\n    for(i = [0:2]) {\n        rotate([0, i*15-15, 0])\n        translate([-25, 0, 10])\n        scale([0.3, 1, 0.1])\n        cylinder(h = 35, d = 25);\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    translate([0, -8, -8])\n    rotate([0, 0, -30])\n    cylinder(h = 15, d = 6);\n    \n    // Lower leg\n    translate([0, -15, -18])\n    rotate([0, 0, 0])\n    cylinder(h = 20, d = 5);\n    \n    // Foot\n    translate([0, -20, -35])\n    rotate([90, 0, 0])\n    scale([1, 0.4, 0.2])\n    cylinder(h = 15, d = 10);\n}\n\nmodule wing() {\n    // Left wing\n    translate([0, 15, 10])\n    rotate([0, 0, -20])\n    scale([1, 0.3, 0.8])\n    cylinder(h = 30, d = 20);\n    \n    // Wing detail\n    for(i = [0:3]) {\n        translate([-5 + i*5, 15, 8 + i*3])\n        scale([0.8, 0.1, 0.05])\n        cube([10, 2, 3]);\n    }\n}\n\nmodule crest() {\n    // Head crest feathers\n    for(i = [0:4]) {\n        translate([30, 0, 35 + i*3])\n        rotate([0, i*5-10, 0])\n        scale([0.2, 0.2, 1])\n        cylinder(h = 8, d = 3);\n    }\n}\n\n// Assembly\nunion() {\n    bird_body();\n    head();\n    beak();\n    eye();\n    mirror([0, 1, 0]) eye();\n    tail();\n    \n    // Legs\n    translate([5, 0, -20]) leg();\n    translate([-5, 0, -20]) leg();\n    \n    // Wings\n    wing();\n    mirror([0, 1, 0]) wing();\n    \n    crest();\n}",
    "renders": true
  },
  {
    "toy": "raptor",
    "openscad_code": "// Velociraptor Toy - Realistic Style\n// Medium complexity, 3D printable raptor figure\n// Approx 100mm long, 50mm tall, 30mm wide\n\nmodule raptor_body() {\n    // Main torso - oval shape\n    difference() {\n        scale([1.2, 0.8, 0.6]) sphere(d=40);\n        // Hollow interior for material saving\n        translate([0, 0, -5]) scale([1.1, 0.7, 0.5]) sphere(d=36);\n    }\n}\n\nmodule raptor_head() {\n    // Snout and head assembly\n    union() {\n        // Main head shape\n        translate([-45, 0, 12]) scale([1.5, 0.8, 0.8]) sphere(d=20);\n        \n        // Snout extension\n        translate([-55, 0, 10]) scale([2, 0.4, 0.4]) sphere(d=15);\n        \n        // Jaw detail\n        translate([-50, 0, 5]) scale([1.8, 0.3, 0.2]) cube([15, 8, 3]);\n    }\n}\n\nmodule raptor_tail() {\n    // Segmented tail with decreasing segments\n    for(i = [0:4]) {\n        translate([20 + i*8, 0, 8 - i*1.5]) \n        scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1]) \n        rotate([0, 0, -i*8]) \n        sphere(d=15 - i*2.5);\n    }\n}\n\nmodule raptor_leg(side) {\n    // side: 1 for right, -1 for left\n    mirror([0, side, 0]) {\n        // Upper leg\n        translate([10, side*8, -5]) rotate([15, 0, 0]) \n        scale([0.8, 0.8, 1.2]) cylinder(d1=10, d2=8, h=15);\n        \n        // Lower leg\n        translate([10, side*10, -18]) rotate([15, 0, 0]) \n        cylinder(d1=8, d2=6, h=12);\n        \n        // Foot with toes\n        translate([8, side*12, -28]) union() {\n            // Main foot\n            scale([1.2, 0.6, 0.4]) sphere(d=10);\n            \n            // Toes\n            for(toe = [0:2]) {\n                translate([-2 + toe*3, side*(2 + toe*1.5), -3]) \n                scale([0.3, 0.2, 0.3]) cylinder(d=4, h=8);\n            }\n        }\n    }\n}\n\nmodule raptor_arm(side) {\n    // side: 1 for right, -1 for left\n    mirror([0, side, 0]) {\n        // Shoulder to elbow\n        translate([-20, side*12, 5]) rotate([0, 0, -side*30]) \n        scale([0.3, 0.3, 0.8]) sphere(d=15);\n        \n        // Claw hand\n        translate([-28, side*18, 3]) rotate([0, 0, -side*45]) {\n            // Palm\n            scale([0.4, 0.3, 0.6]) sphere(d=8);\n            \n            // Claws\n            for(claw = [0:2]) {\n                translate([-2, side*(claw - 1)*2, -2]) \n                rotate([0, side*20, 0]) \n                scale([0.2, 0.2, 1]) cylinder(d=3, h=6);\n            }\n        }\n    }\n}\n\nmodule raptor_spines() {\n    // Back ridge spines\n    for(i = [0:5]) {\n        translate([-25 + i*10, 0, 18 - i*1.5]) \n        rotate([0, 0, i*5]) \n        scale([0.3, 0.1, 1]) cylinder(d1=8, d2=2, h=12);\n    }\n}\n\nmodule raptor_eye(side) {\n    // side: 1 for right, -1 for left\n    mirror([0, side, 0]) {\n        translate([-48, side*5, 15]) scale([1, 1, 0.5]) sphere(d=4);\n        translate([-49, side*5, 15.5]) sphere(d=2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body components\n    raptor_body();\n    raptor_head();\n    raptor_tail();\n    \n    // Limbs\n    raptor_leg(1);    // Right leg\n    raptor_leg(-1);   // Left leg\n    raptor_arm(1);    // Right arm\n    raptor_arm(-1);   // Left arm\n    \n    // Details\n    raptor_spines();\n    \n    // Eyes\n    color(\"yellow\") raptor_eye(1);\n    color(\"yellow\") raptor_eye(-1);\n    \n    // Nostrils\n    translate([-52, 3, 12]) sphere(d=1.5);\n    translate([-52, -3, 12]) sphere(d=1.5);\n}",
    "renders": true
  },
  {
    "toy": "chinook",
    "openscad_code": "// Chinook Toy Helicopter\n// Medium complexity toy version with rotating parts\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size.x - radius*2])\n            for(dy = [0, size.y - radius*2])\n                for(dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r = radius);\n    }\n}\n\nmodule main_fuselage() {\n    // Main body - rounded rectangular\n    translate([0, 0, 10])\n        scale([1, 0.7, 0.4])\n            rounded_cube([60, 20, 15], 5);\n    \n    // Cockpit nose\n    translate([25, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 20, r1 = 8, r2 = 5);\n    \n    // Rear ramp bottom\n    translate([-25, 0, 7])\n        cube([15, 18, 3]);\n}\n\nmodule tail_boom() {\n    // Main tail boom\n    translate([-35, 0, 15])\n        rotate([0, -5, 0])\n            scale([1, 0.8, 0.8])\n                cylinder(h = 40, r = 7);\n    \n    // Vertical stabilizer\n    translate([-65, 0, 25])\n        rotate([0, 0, 0])\n            cube([2, 12, 8], center = true);\n}\n\nmodule rotor_mast(position) {\n    // Rotor mast\n    translate(position)\n        cylinder(h = 15, r = 3);\n    \n    // Rotor hub\n    translate([position.x, position.y, position.z + 15])\n        sphere(r = 4);\n}\n\nmodule rotor_blades(position, angle = 0) {\n    translate(position)\n        rotate([0, 0, angle])\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([0, 0, 15])\n                        cube([30, 2, 0.5], center = true);\n            }\n}\n\nmodule landing_gear() {\n    // Front gear\n    translate([15, 0, 0])\n        cylinder(h = 8, r = 2);\n    \n    // Rear gear left\n    translate([-15, -10, 0])\n        cylinder(h = 8, r = 2);\n    \n    // Rear gear right\n    translate([-15, 10, 0])\n        cylinder(h = 8, r = 2);\n    \n    // Skid tubes\n    translate([0, -10, 4])\n        cube([40, 2, 2]);\n    translate([0, 10, 4])\n        cube([40, 2, 2]);\n}\n\nmodule side_doors() {\n    // Left door\n    translate([5, 9.5, 12])\n        cube([20, 1, 8]);\n    \n    // Right door\n    translate([5, -10.5, 12])\n        cube([20, 1, 8]);\n}\n\nmodule windows() {\n    // Cockpit windows\n    translate([25, 4, 18])\n        cube([8, 1, 4]);\n    translate([25, -4, 18])\n        cube([8, 1, 4]);\n    \n    // Side windows\n    for(pos = [[10, 7, 15], [-5, 7, 15], [-20, 7, 15]]) {\n        translate(pos)\n            cube([8, 1, 4]);\n    }\n    for(pos = [[10, -7, 15], [-5, -7, 15], [-20, -7, 15]]) {\n        translate(pos)\n            cube([8, 1, 4]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main structure\n    main_fuselage();\n    tail_boom();\n    \n    // Rotor systems\n    rotor_mast([0, 0, 25]);\n    rotor_mast([-20, 0, 25]);\n    \n    // Static rotors (for 3D printing - no moving parts)\n    rotor_blades([0, 0, 0], 0);\n    rotor_blades([-20, 0, 0], 45);\n    \n    // Landing gear\n    landing_gear();\n    \n    // Doors and windows\n    side_doors();\n    windows();\n}",
    "renders": true
  },
  {
    "toy": "catamaran",
    "openscad_code": "// Catamaran toy - realistic style, medium complexity\n// Overall length ~120mm, width ~70mm, height ~35mm\n\n// Dimensions\nhull_length = 110;\nhull_width = 18;\nhull_height = 25;\nhull_separation = 40;\ndeck_thickness = 3;\nmast_height = 60;\nmast_diameter = 5;\nboom_length = 45;\nsail_width = 35;\nsail_height = 50;\n\n// Hull module with rounded edges\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Outer hull shape\n        hull_outer();\n        \n        // Hollow interior\n        translate([0, 0, -2])\n        scale([0.85, 0.85, 0.9])\n        hull_outer();\n    }\n    \n    // Deck surface\n    translate([0, 0, hull_height])\n    cube([hull_length, hull_width, deck_thickness], center=true);\n}\n\n// Helper for outer hull shape\nmodule hull_outer() {\n    difference() {\n        // Main rounded block\n        translate([0, 0, hull_height/2])\n        cube([hull_length, hull_width, hull_height], center=true);\n        \n        // Tapered ends\n        translate([hull_length/2 - 10, 0, hull_height/2])\n        rotate([0, 90, 0])\n        cylinder(h=20, r1=10, r2=0, $fn=20);\n        \n        translate([-hull_length/2 + 10, 0, hull_height/2])\n        rotate([0, 90, 0])\n        cylinder(h=20, r1=10, r2=0, $fn=20);\n    }\n}\n\n// Cross-beams\nmodule crossbeam(x_pos) {\n    translate([x_pos, 0, hull_height + deck_thickness/2])\n    cube([12, hull_separation + hull_width, deck_thickness], center=true);\n}\n\n// Mast support structure\nmodule mast_support() {\n    // Base block\n    translate([0, 0, hull_height + deck_thickness])\n    cube([15, 15, 8], center=true);\n    \n    // Mast hole\n    translate([0, 0, hull_height + deck_thickness + 4])\n    cylinder(h=10, d=mast_diameter + 2, $fn=16, center=true);\n}\n\n// Mast with boom\nmodule mast_assembly() {\n    // Mast\n    translate([0, 0, hull_height + deck_thickness + 8])\n    cylinder(h=mast_height, d=mast_diameter, $fn=16);\n    \n    // Boom\n    translate([0, 0, hull_height + deck_thickness + 8 + mast_height/2])\n    rotate([90, 0, 0])\n    cylinder(h=boom_length, d=3, $fn=12);\n}\n\n// Sail\nmodule sail() {\n    color(\"white\")\n    translate([0, boom_length/2 - 5, hull_height + deck_thickness + 8 + mast_height/2])\n    rotate([90, 0, 0])\n    linear_extrude(height=1)\n    polygon(points=[\n        [0, 0],\n        [sail_width/2, sail_height],\n        [-sail_width/2, sail_height]\n    ]);\n}\n\n// Rudder\nmodule rudder() {\n    translate([-hull_length/2 + 5, 0, hull_height/2])\n    cube([15, 3, 20]);\n}\n\n// Assembly\nmodule catamaran() {\n    // Left hull\n    translate([0, -hull_separation/2, 0])\n    hull();\n    \n    // Right hull\n    translate([0, hull_separation/2, 0])\n    hull();\n    \n    // Cross-beams\n    crossbeam(-hull_length/4);\n    crossbeam(0);\n    crossbeam(hull_length/4);\n    \n    // Mast support\n    mast_support();\n    \n    // Mast and boom\n    mast_assembly();\n    \n    // Sail\n    sail();\n    \n    // Rudders\n    translate([0, -hull_separation/2, 0])\n    rudder();\n    \n    translate([0, hull_separation/2, 0])\n    rudder();\n}\n\n// Render the catamaran\ncatamaran();",
    "renders": true
  },
  {
    "toy": "speeder",
    "openscad_code": "// Toy Speeder - Realistic Style, Medium Complexity\n// Dimensions: ~110mm length, ~70mm width, ~35mm height\n// Wall thickness: 2mm for 3D printing\n\n// Main body module\nmodule speeder_body() {\n    difference() {\n        // Main hull\n        hull() {\n            translate([-45, -25, 0]) cube([90, 50, 15], center=true);\n            translate([-35, -20, 8]) cube([70, 40, 10], center=true);\n            translate([-20, -15, 15]) cube([40, 30, 8], center=true);\n        }\n        \n        // Cockpit cavity\n        translate([-25, -15, 5]) cube([50, 30, 12], center=true);\n        \n        // Front intake\n        translate([-47, 0, 5]) rotate([0, 90, 0]) cylinder(h=20, r1=8, r2=6, center=true);\n    }\n}\n\n// Repetitive engine module\nmodule engine(x_pos) {\n    translate([x_pos, 0, 0]) {\n        // Engine housing\n        difference() {\n            cylinder(h=15, r=10, center=true);\n            translate([0, 0, -2]) cylinder(h=19, r=8, center=true);\n        }\n        \n        // Engine nozzle\n        translate([0, 0, -9]) cylinder(h=8, r1=8, r2=6, center=true);\n        \n        // Engine details\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) translate([7, 0, 0]) cube([4, 2, 12], center=true);\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    translate([0, side * 30, 5]) {\n        rotate([0, 0, side * -10]) {\n            difference() {\n                // Main wing\n                translate([-15, 0, 0]) cube([30, 25, 4], center=true);\n                \n                // Wing cutout\n                translate([-10, side * 5, 0]) cube([20, 15, 5], center=true);\n            }\n            \n            // Wing tip details\n            translate([12, 0, 0]) cylinder(h=4, r=3, center=true);\n            translate([12, 0, 2]) sphere(r=2);\n        }\n    }\n}\n\n// Seat module\nmodule seat() {\n    translate([-5, 0, 12]) {\n        // Seat base\n        cube([20, 18, 4], center=true);\n        \n        // Seat back\n        translate([5, 0, 4]) cube([10, 16, 8], center=true);\n        \n        // Headrest\n        translate([10, 0, 8]) cube([6, 12, 4], center=true);\n    }\n}\n\n// Repetitive detail modules\nmodule vents() {\n    for(i = [0:4]) {\n        translate([35 - i * 8, 0, 10]) cube([4, 22, 1], center=true);\n    }\n}\n\nmodule control_stick() {\n    translate([-15, 0, 15]) {\n        cylinder(h=8, r=3, center=true);\n        translate([0, 0, 5]) sphere(r=4);\n    }\n}\n\n// Landing strut module\nmodule strut(x_pos, y_pos) {\n    translate([x_pos, y_pos, -8]) {\n        // Strut\n        cylinder(h=10, r=2, center=true);\n        \n        // Foot\n        translate([0, 0, -5]) {\n            difference() {\n                cylinder(h=3, r=4, center=true);\n                translate([0, 0, -2]) cylinder(h=5, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    speeder_body();\n    \n    // Engines (two engines at rear)\n    engine(40);\n    engine(30);\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Seat inside cockpit\n    seat();\n    \n    // Vents on sides\n    vents();\n    \n    // Control stick\n    control_stick();\n    \n    // Landing struts\n    strut(-30, 20);\n    strut(-30, -20);\n    strut(25, 15);\n    strut(25, -15);\n    \n    // Rear stabilizer\n    translate([45, 0, 15]) {\n        rotate([0, 15, 0]) cube([8, 35, 3], center=true);\n    }\n}",
    "renders": true
  },
  {
    "toy": "mack",
    "openscad_code": "// Medium-complexity realistic Mack toy truck (approx. 1:64 scale, 120 mm long)\n// Wall thickness ≥ 2 mm for all shells\n\n$fn=32;          // Smooth curves for printing\ntruck_len=120;   // Overall length\ntruck_wid=50;    // Overall width  \ntruck_hgt=50;    // Overall height\n\n// Cab module\nmodule cab() {\n    // Main cab shell\n    difference() {\n        hull() {\n            translate([-20,0,0]) cube([40,42,35], center=true);\n            translate([-10,0,10]) cube([30,38,30], center=true);\n        }\n        // Windshield recess\n        translate([  8,0,18]) cube([14,38,22], center=true);\n        // Side windows\n        translate([  0,22,18]) cube([30,2,18], center=true);\n        translate([  0,-22,18]) cube([30,2,18], center=true);\n    }\n    // Roof visor\n    translate([0,0,38]) cube([36,44,2], center=true);\n    // Hood/bonnet\n    translate([-24,0,10]) cube([18,46,20], center=true);\n    // Grille detail\n    for(i=[-4:2:4])\n        translate([-32,i,8]) cube([2,2,16], center=true);\n    // Bumper\n    translate([-35,0,4]) cube([4,48,8], center=true);\n    // Headlights\n    translate([-34,15,10]) sphere(3);\n    translate([-34,-15,10]) sphere(3);\n}\n\n// Sleeper box\nmodule sleeper() {\n    difference() {\n        translate([18,0,10]) cube([32,44,30], center=true);\n        // Door recess\n        translate([33,0,10]) cube([2,20,24], center=true);\n    }\n}\n\n// Chassis frame\nmodule chassis() {\n    // Side rails\n    for(y=[-20,20])\n        translate([0,y,3]) cube([100,4,6], center=true);\n    // Cross-members\n    for(x=[-30:20:30])\n        translate([x,0,3]) cube([2,44,6], center=true);\n}\n\n// Wheels (simple discs)\nmodule wheel() {\n    difference() {\n        cylinder(h=8, r=11, center=true);\n        cylinder(h=9, r=3, center=true);\n    }\n}\n\n// Axles and wheels\nmodule axles() {\n    // Front axle\n    translate([-25,0,5]) rotate([90,0,0]) cylinder(h=50, r=3, center=true);\n    translate([-25, 22,5]) wheel();\n    translate([-25,-22,5]) wheel();\n    \n    // Drive axles (tandem)\n    for(dx=[5,25]) {\n        translate([dx,0,5]) rotate([90,0,0]) cylinder(h=50, r=3, center=true);\n        translate([dx, 22,5]) wheel();\n        translate([dx,-22,5]) wheel();\n    }\n}\n\n// Fifth wheel plate\nmodule fifth_wheel() {\n    translate([40,0,12]) cube([20,30,3], center=true);\n    // Kingpin slot\n    translate([50,0,10.5]) cube([4,12,6], center=true);\n}\n\n// Exhaust stack\nmodule exhaust() {\n    translate([10,25,25]) cylinder(h=30, r=3);\n    // Stack cap\n    translate([10,25,40]) sphere(r=4);\n}\n\n// Fuel tanks\nmodule tanks() {\n    for(side=[-1,1])\n        translate([0,side*17,8]) rotate([90,0,0]) cylinder(h=28, r=8);\n}\n\n// Assemble the truck\nunion() {\n    chassis();\n    cab();\n    sleeper();\n    axles();\n    fifth_wheel();\n    exhaust();\n    tanks();\n}",
    "renders": true
  },
  {
    "toy": "phantom",
    "openscad_code": "// Phantom Toy Chair - Realistic Style with Medium Complexity\n// Overall dimensions: ~120mm height x 90mm width x 90mm depth\n\n$fn = 32;\n\nmodule phantomChair() {\n    // Main seat platform - ghostly white\n    color(\"ghostwhite\")\n    translate([0, 0, 40])\n    difference() {\n        cube([80, 80, 8], center = true);\n        // Hollow seat cavity\n        translate([0, 0, -2])\n        cube([76, 76, 10], center = true);\n    }\n    \n    // Backrest - flowing phantom shape\n    color(\"ghostwhite\")\n    translate([0, -35, 75])\n    difference() {\n        // Main backrest form\n        hull() {\n            sphere(25);\n            translate([0, 0, -20])\n            scale([1.5, 0.8, 1])\n            sphere(20);\n        }\n        \n        // Ghostly face cutouts\n        translate([0, -8, 5])\n        scale([1.2, 0.5, 1])\n        sphere(8);\n        \n        translate([-8, 0, 0])\n        sphere(3);\n        \n        translate([8, 0, 0])\n        sphere(3);\n        \n        // Hollow backrest\n        scale([0.8, 0.7, 0.8])\n        sphere(22);\n    }\n    \n    // Four ghostly legs with rounded feet\n    for(x = [-30, 30])\n    for(y = [-30, 30]) {\n        color(\"ghostwhite\")\n        translate([x, y, 20])\n        difference() {\n            // Leg cylinder\n            cylinder(h = 40, d1 = 12, d2 = 8);\n            \n            // Hollow leg\n            translate([0, 0, 2])\n            cylinder(h = 36, d1 = 8, d2 = 4);\n        }\n        \n        // Ghostly foot pad\n        color(\"ghostwhite\")\n        translate([x, y, 0])\n        sphere(6);\n    }\n    \n    // Phantom arms - wispy extensions\n    color(\"ghostwhite\")\n    translate([40, 0, 55])\n    rotate([0, -10, 0])\n    difference() {\n        hull() {\n            sphere(8);\n            translate([0, 0, -15])\n            sphere(6);\n        }\n        \n        scale([0.6, 0.6, 0.6])\n        sphere(8);\n    }\n    \n    mirror([1, 0, 0])\n    translate([40, 0, 55])\n    rotate([0, -10, 0])\n    difference() {\n        hull() {\n            sphere(8);\n            translate([0, 0, -15])\n            sphere(6);\n        }\n        \n        scale([0.6, 0.6, 0.6])\n        sphere(8);\n    }\n    \n    // Ghostly chain details (toy safety loops)\n    for(i = [-1, 1]) {\n        color(\"silver\")\n        translate([i * 35, 0, 30])\n        rotate([90, 0, 0])\n        difference() {\n            torus(5, 2);\n            translate([0, 0, -2])\n            cylinder(h = 4, r = 3.5);\n        }\n    }\n    \n    // Phantom swirl decorations\n    color(\"lightsteelblue\")\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([0, -30, 45])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        cylinder(h = 15, r1 = 3, r2 = 1);\n    }\n}\n\n// Generate the phantom chair\nphantomChair();",
    "renders": true
  },
  {
    "toy": "whirlibird",
    "openscad_code": "// Whirlibird Toy Helicopter\n// Realistic style, medium complexity\n// 3D printable with 2mm walls, no overhangs\n\n// Overall dimensions: 120mm length, 80mm width, 50mm height\n\nmodule body() {\n    // Main fuselage with rounded edges\n    hull() {\n        translate([0, 0, 15]) cube([80, 30, 25], center=true);\n        translate([0, 0, 15]) cube([75, 25, 20], center=true);\n    }\n    \n    // Nose cone\n    translate([40, 0, 15]) rotate([90, 0, 0]) \n        cylinder(h=20, r1=15, r2=5, center=false);\n    \n    // Tail boom\n    translate([-45, 0, 15]) rotate([90, 0, 0]) \n        cylinder(h=30, r=8, center=false);\n    \n    // Landing skids\n    for(x=[-20, 20]) {\n        translate([x, 0, 2]) cube([5, 40, 4], center=true);\n    }\n    translate([0, 20, 4]) cube([45, 5, 5], center=true);\n    translate([0, -20, 4]) cube([45, 5, 5], center=true);\n}\n\nmodule main_rotor() {\n    // Rotor hub\n    translate([0, 0, 40]) cylinder(h=8, r=5, center=true);\n    \n    // Rotor blades (3 blades)\n    for(i=[0:120:359]) {\n        rotate([0, 0, i]) {\n            translate([0, 35, 40]) cube([70, 6, 2], center=true);\n            // Blade supports\n            translate([0, 17, 38]) rotate([0, 15, 0]) \n                cube([30, 3, 4], center=true);\n        }\n    }\n    \n    // Rotor mast\n    translate([0, 0, 40]) cylinder(h=25, r=3, center=false);\n}\n\nmodule tail_rotor() {\n    // Tail rotor assembly\n    translate([-60, 0, 15]) rotate([0, 90, 0]) {\n        // Rotor hub\n        cylinder(h=6, r=4, center=true);\n        \n        // Rotor blades (2 blades)\n        for(i=[0:90:179]) {\n            rotate([0, i, 0]) {\n                translate([0, 15, 0]) cube([30, 4, 2], center=true);\n            }\n        }\n        \n        // Drive shaft\n        cylinder(h=20, r=2, center=false);\n    }\n}\n\nmodule windows() {\n    // Cockpit windows\n    difference() {\n        translate([15, 0, 22]) cube([30, 25, 15], center=true);\n        translate([15, 0, 22]) cube([26, 21, 16], center=true);\n    }\n    \n    // Side windows\n    for(y=[-12, 12]) {\n        translate([0, y, 22]) cube([20, 8, 8], center=true);\n    }\n}\n\nmodule details() {\n    // Engine exhaust\n    translate([25, 12, 25]) rotate([90, 0, 0]) \n        cylinder(h=10, r=3, center=false);\n    \n    // Tail fin\n    translate([-55, 0, 25]) cube([15, 2, 15], center=true);\n    \n    // Horizontal stabilizer\n    translate([-50, 0, 20]) cube([20, 30, 2], center=true);\n    \n    // Antenna\n    translate([30, 0, 35]) cylinder(h=15, r=1, center=false);\n}\n\n// Assembly\nunion() {\n    body();\n    main_rotor();\n    tail_rotor();\n    windows();\n    details();\n}",
    "renders": true
  },
  {
    "toy": "tugboat",
    "openscad_code": "// Tugboat Toy - Realistic Medium Complexity\n// Dimensions: 120mm length, 45mm width, 60mm height\n\nhull_length = 120;\nhull_width = 45;\nhull_height = 30;\n\nmodule tugboat_hull() {\n    // Main hull with rounded front\n    translate([0, 0, hull_height/2])\n    difference() {\n        hull();\n        // Remove interior for hollow hull\n        scale([0.9, 0.85, 0.9])\n        translate([0, 0, -2])\n        hull();\n    }\n}\n\nmodule hull() {\n    // Create rounded hull shape\n    union() {\n        // Main rectangular section\n        cube([hull_length*0.7, hull_width, hull_height], center=true);\n        \n        // Tapered front\n        translate([-hull_length*0.35, 0, 0])\n        scale([1, 0.8, 1])\n        rotate([0, 0, 90])\n        cylinder(h=hull_width, r=hull_height/2, center=true);\n        \n        // Stern\n        translate([hull_length*0.35, 0, 0])\n        cube([hull_length*0.3, hull_width, hull_height], center=true);\n    }\n}\n\nmodule superstructure() {\n    // Cabin structure\n    translate([0, 0, hull_height + 15])\n    union() {\n        // Main cabin\n        difference() {\n            cube([hull_length*0.6, hull_width*0.7, 20], center=true);\n            // Door opening\n            translate([hull_length*0.25, 0, -10])\n            cube([10, 15, 15], center=true);\n        }\n        \n        // Bridge\n        translate([hull_length*0.1, 0, 12])\n        cube([hull_length*0.4, hull_width*0.5, 15], center=true);\n        \n        // Smokestack\n        translate([-hull_length*0.2, 0, 25])\n        cylinder(h=20, r1=8, r2=6, center=false);\n    }\n}\n\nmodule lifeboats() {\n    // Two lifeboats on sides\n    for(side = [-1, 1]) {\n        translate([hull_length*0.15, side*25, hull_height + 15])\n        rotate([0, 90, 0])\n        scale([1, 0.6, 0.6])\n        cylinder(h=20, r=5, center=true);\n    }\n}\n\nmodule railings() {\n    // Guard rails around superstructure\n    for(x = [-hull_length*0.25, -hull_length*0.15, -hull_length*0.05, hull_length*0.05, hull_length*0.15, hull_length*0.25]) {\n        translate([x, hull_width*0.35, hull_height + 20])\n        cylinder(h=8, r=1, center=false);\n    }\n}\n\nmodule propeller() {\n    // Propeller at stern\n    translate([hull_length*0.5, 0, hull_height/2])\n    union() {\n        // Hub\n        cylinder(h=5, r=4, center=true);\n        \n        // Blades\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n            translate([6, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=3, r2=1, center=true);\n        }\n    }\n}\n\nmodule deck_details() {\n    // Winch at front\n    translate([-hull_length*0.35, 0, hull_height + 2])\n    union() {\n        // Winch body\n        cylinder(h=8, r=6, center=false);\n        \n        // Drum\n        translate([0, 0, 4])\n        cylinder(h=4, r=4, center=false);\n    }\n    \n    // Bollards\n    for(x = [-hull_length*0.3, hull_length*0.3]) {\n        for(y = [-hull_width*0.3, hull_width*0.3]) {\n            translate([x, y, hull_height + 2])\n            cylinder(h=5, r=2, center=false);\n        }\n    }\n}\n\nmodule wheelhouse() {\n    // Bridge windows\n    translate([hull_length*0.1, 0, hull_height + 22])\n    difference() {\n        cube([hull_length*0.35, hull_width*0.4, 8], center=true);\n        // Windows\n        for(x = [-hull_length*0.1, 0, hull_length*0.1]) {\n            translate([x, 0, 0])\n            cube([hull_length*0.08, hull_width*0.35, 6], center=true);\n        }\n    }\n}\n\n// Assemble tugboat\nunion() {\n    tugboat_hull();\n    superstructure();\n    lifeboats();\n    railings();\n    propeller();\n    deck_details();\n    wheelhouse();\n}",
    "renders": true
  },
  {
    "toy": "hercules",
    "openscad_code": "// Hercules Toy Figure - OpenSCAD\n// Realistic medium-complexity toy figure\n\n// Overall scale\nscale_factor = 1;\n\n// Dimensions in mm\nbody_height = 40 * scale_factor;\nbody_width = 30 * scale_factor;\nbody_depth = 20 * scale_factor;\n\nhead_diameter = 22 * scale_factor;\narm_length = 25 * scale_factor;\nleg_length = 30 * scale_factor;\nclub_length = 50 * scale_factor;\nclub_radius = 5 * scale_factor;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule hercules_figure() {\n    // Head\n    translate([0, 0, body_height + head_diameter/2 - 5])\n        sphere(d = head_diameter);\n\n    // Hair - simplified as textured sphere\n    translate([0, 0, body_height + head_diameter/2 - 3])\n        difference() {\n            sphere(d = head_diameter + 4);\n            sphere(d = head_diameter);\n        }\n\n    // Body\n    translate([0, 0, body_height/2])\n        cube([body_width, body_depth, body_height], center = true);\n\n    // Chest muscles\n    translate([0, body_depth/2 + 0.5, body_height - 10])\n        cube([body_width - 10, 2, 15], center = true);\n\n    // Arms\n    // Left arm (holding club)\n    translate([-body_width/2 - arm_length/2, 0, body_height - 15])\n        rotate([0, 0, -30])\n        cube([arm_length, 8, 8], center = true);\n\n    // Right arm\n    translate([body_width/2 + arm_length/2, 0, body_height - 15])\n        rotate([0, 0, 30])\n        cube([arm_length, 8, 8], center = true);\n\n    // Hands\n    // Left hand (wrapped around club)\n    translate([-body_width/2 - arm_length - 5, 0, body_height - 15])\n        sphere(d = 10);\n\n    // Right hand\n    translate([body_width/2 + arm_length + 5, 0, body_height - 15])\n        sphere(d = 10);\n\n    // Legs\n    // Left leg\n    translate([-body_width/4, 0, -leg_length/2])\n        cube([12, body_depth - 4, leg_length], center = true);\n\n    // Right leg\n    translate([body_width/4, 0, -leg_length/2])\n        cube([12, body_depth - 4, leg_length], center = true);\n\n    // Feet\n    translate([-body_width/4, 0, -leg_length - 5])\n        cube([14, body_depth, 8], center = true);\n\n    translate([body_width/4, 0, -leg_length - 5])\n        cube([14, body_depth, 8], center = true);\n\n    // Lion pelt - simplified as textured cape\n    translate([0, body_depth/2 + 2, body_height/2])\n        difference() {\n            cube([body_width + 4, 4, body_height - 5], center = true);\n            // Texture pattern\n            for (i = [-body_width/2:4:body_width/2]) {\n                for (j = [5:5:body_height-10]) {\n                    translate([i, body_depth/2 + 3, j])\n                        sphere(d = 2);\n                }\n            }\n        }\n\n    // Belt\n    translate([0, 0, body_height - 20])\n        cube([body_width + 4, body_depth + 4, 6], center = true);\n\n    // Club\n    translate([-body_width/2 - arm_length - 15, 0, body_height - 15])\n        rotate([90, 0, 0])\n        cylinder(h = club_length, r = club_radius, center = true);\n\n    // Club head\n    translate([-body_width/2 - arm_length - 15, 0, body_height - 15 - club_length/2])\n        sphere(d = club_radius * 2.5);\n\n    // Facial features\n    // Eyes\n    translate([-head_diameter/4, head_diameter/2 - 2, body_height + head_diameter/2])\n        sphere(d = 4);\n\n    translate([head_diameter/4, head_diameter/2 - 2, body_height + head_diameter/2])\n        sphere(d = 4);\n\n    // Nose\n    translate([0, head_diameter/2 - 1, body_height + head_diameter/2 - 5])\n        sphere(d = 3);\n\n    // Mouth\n    translate([0, head_diameter/2 - 3, body_height + head_diameter/2 - 10])\n        cube([6, 2, 2], center = true);\n\n    // Knee joints\n    translate([-body_width/4, 0, -leg_length/2 + 10])\n        sphere(d = 10);\n\n    translate([body_width/4, 0, -leg_length/2 + 10])\n        sphere(d = 10);\n\n    // Elbow joints\n    translate([-body_width/2 - arm_length/2, 0, body_height - 15])\n        sphere(d = 8);\n\n    translate([body_width/2 + arm_length/2, 0, body_height - 15])\n        sphere(d = 8);\n}\n\n// Create the figure\nhercules_figure();",
    "renders": true
  },
  {
    "toy": "blackhawk",
    "openscad_code": "// Blackhawk Toy Helicopter - Realistic Medium Complexity\n// Overall length ~120mm, suitable for 3D printing\n\n// Parameters\nbody_length = 100;\nbody_width = 20;\nbody_height = 25;\ntail_length = 40;\nmain_rotor_diameter = 120;\ntail_rotor_diameter = 30;\n\n// Main body\nmodule main_body() {\n    // Fuselage\n    difference() {\n        hull() {\n            // Cockpit front\n            translate([body_length/2-10, 0, body_height/2])\n                scale([1, 0.8, 0.6]) sphere(d=20, $fn=32);\n            // Main body\n            translate([-body_length/2, 0, 0])\n                cube([body_length, body_width, body_height], center=true);\n        }\n        // Cockpit windows\n        translate([body_length/2-15, 0, body_height/2])\n            cube([20, 10, 8], center=true);\n    }\n    \n    // Side doors\n    for(side = [-1, 1]) {\n        translate([body_length/4-10, side*body_width/2, 0])\n            cube([30, 2, 18], center=true);\n    }\n}\n\n// Tail boom\nmodule tail_boom() {\n    translate([-body_length/2-tail_length/2, 0, body_height/2-5])\n        rotate([0, -5, 0])\n        cube([tail_length, 12, 8], center=true);\n}\n\n// Landing gear\nmodule landing_gear() {\n    for(side = [-1, 1]) {\n        // Main struts\n        translate([body_length/4, side*body_width/2, -body_height/2-8])\n            cylinder(h=15, r=2, $fn=12);\n        translate([-body_length/4, side*body_width/2, -body_height/2-8])\n            cylinder(h=15, r=2, $fn=12);\n        \n        // Skids\n        translate([0, side*body_width/2, -body_height/2-15])\n            cube([body_length*0.8, 3, 3], center=true);\n    }\n}\n\n// Main rotor assembly\nmodule main_rotor() {\n    rotate([0, 0, $t*360]) {\n        // Hub\n        translate([0, 0, body_height/2+5])\n            cylinder(h=5, r=5, $fn=20);\n        \n        // Blades\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([main_rotor_diameter/4, 0, body_height/2+7])\n                    cube([main_rotor_diameter/2, 2, 1], center=true);\n        }\n    }\n    \n    // Mast\n    translate([0, 0, body_height/2])\n        cylinder(h=5, r=3, $fn=12);\n}\n\n// Tail rotor\nmodule tail_rotor() {\n    rotate([0, 90, $t*1440]) {\n        // Tail rotor hub\n        translate([-body_length/2-tail_length+5, 0, body_height/2+2])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=3, $fn=12);\n        \n        // Blades\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([-body_length/2-tail_length+5, tail_rotor_diameter/4, body_height/2+2])\n                    cube([tail_rotor_diameter/2, 2, 1], center=true);\n        }\n    }\n}\n\n// Toy details\nmodule toy_details() {\n    // Windows along sides\n    for(pos = [30, 10, -10, -30]) {\n        translate([pos, body_width/2+1, 5])\n            cube([8, 1, 6], center=true);\n        translate([pos, -body_width/2-1, 5])\n            cube([8, 1, 6], center=true);\n    }\n    \n    // Antenna\n    translate([body_length/2-20, 0, body_height/2+3])\n        cylinder(h=8, r=1, $fn=8);\n}\n\n// Assembly\nunion() {\n    main_body();\n    tail_boom();\n    landing_gear();\n    main_rotor();\n    tail_rotor();\n    toy_details();\n}",
    "renders": true
  },
  {
    "toy": "schooner",
    "openscad_code": "// Toy Schooner - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm long, 100mm tall, 30mm wide\n// All walls 2mm thick for 3D printing\n\nhull_length = 120;\nhull_width = 30;\nhull_height = 15;\n\n// Main hull with slight curve\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Hollow out interior\n        translate([2, 2, 2])\n            scale([0.9, 0.87, 0.7])\n                hull_shape();\n    }\n}\n\n// Helper for curved hull shape\nmodule hull_shape() {\n    hull_points = [\n        [0, 0, 0],\n        [hull_length, 0, 0],\n        [hull_length-10, hull_width/2, 0],\n        [hull_length-10, -hull_width/2, 0],\n        [10, hull_width/2, 0],\n        [10, -hull_width/2, 0],\n        [0, 0, hull_height],\n        [hull_length-5, 0, hull_height*1.5],\n        [hull_length-15, hull_width/2-2, hull_height*0.8],\n        [hull_length-15, -hull_width/2+2, hull_height*0.8],\n        [5, hull_width/2-2, hull_height*0.8],\n        [5, -hull_width/2+2, hull_height*0.8]\n    ];\n    \n    hull() {\n        for(p = hull_points) translate(p) sphere(1);\n    }\n}\n\n// Deck\nmodule deck() {\n    translate([0, 0, hull_height])\n        cube([hull_length-4, hull_width-4, 2], center=true);\n}\n\n// Main mast\nmodule mast(x_pos, height) {\n    translate([x_pos, 0, hull_height+2])\n        cylinder(h=height, r=2, $fn=16);\n}\n\n// Boom (horizontal spar)\nmodule boom(mast_x, mast_height, length) {\n    translate([mast_x+2, 0, hull_height+mast_height-5])\n        rotate([90, 0, 90])\n            cylinder(h=length, r=1.5, $fn=12);\n}\n\n// Sail\nmodule sail(mast_x, mast_height, boom_length) {\n    // Main sail\n    translate([mast_x+2, 0, hull_height+mast_height-5])\n        rotate([0, 90, 0])\n            linear_extrude(height=1.5)\n                polygon(points=[\n                    [0, 0],\n                    [boom_length-5, 0],\n                    [boom_length-15, -mast_height*0.7],\n                    [0, -mast_height*0.8]\n                ]);\n}\n\n// Cabin\nmodule cabin() {\n    translate([hull_length*0.7, 0, hull_height+2])\n        difference() {\n            cube([20, hull_width-8, 12], center=true);\n            translate([1, 1, 1])\n                cube([18, hull_width-10, 10], center=true);\n        }\n}\n\n// Portholes\nmodule portholes() {\n    for(i = [1:3]) {\n        translate([hull_length*0.3*i, hull_width/2+1, hull_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=2, $fn=20);\n        translate([hull_length*0.3*i, -hull_width/2-1, hull_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=2, $fn=20);\n    }\n}\n\n// Rudder\nmodule rudder() {\n    translate([hull_length+1, 0, hull_height/2])\n        rotate([0, 90, 0])\n            linear_extrude(height=2)\n                polygon(points=[\n                    [0, 0],\n                    [0, -hull_width/4],\n                    [8, -hull_width/6],\n                    [8, hull_width/6],\n                    [0, hull_width/4]\n                ]);\n}\n\n// Bow spirit\nmodule bowspirit() {\n    translate([-2, 0, hull_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=1.5, $fn=12);\n}\n\n// Assembly\nunion() {\n    hull();\n    deck();\n    cabin();\n    \n    // Main mast and sail\n    mast(hull_length*0.4, 45);\n    boom(hull_length*0.4, 45, 35);\n    sail(hull_length*0.4, 45, 35);\n    \n    // Fore mast and sail\n    mast(hull_length*0.75, 35);\n    boom(hull_length*0.75, 35, 25);\n    sail(hull_length*0.75, 35, 25);\n    \n    portholes();\n    rudder();\n    bowspirit();\n}",
    "renders": true
  },
  {
    "toy": "dragster",
    "openscad_code": "// Toy Dragster Car - Realistic Medium Complexity\n// Overall length: 120mm, width: 50mm, height: 30mm\n\n$fn = 32;\n\n// Main assembly\nmodule dragster() {\n    union() {\n        // Chassis frame\n        chassis();\n        \n        // Front wheels (2x)\n        translate([-40, -20, 0]) front_wheel();\n        translate([-40, 20, 0]) front_wheel();\n        \n        // Rear wheels (2x, larger)\n        translate([40, -25, 0]) rear_wheel();\n        translate([40, 25, 0]) rear_wheel();\n        \n        // Engine block\n        translate([30, 0, 8]) engine();\n        \n        // Driver cockpit\n        translate([0, 0, 10]) cockpit();\n        \n        // Exhaust pipes\n        translate([45, -15, 12]) exhaust();\n        translate([45, 15, 12]) exhaust();\n        \n        // Wing\n        translate([50, 0, 25]) rear_wing();\n        \n        // Front spoiler\n        translate([-50, 0, 5]) front_spoiler();\n    }\n}\n\n// Chassis frame with structural beams\nmodule chassis() {\n    difference() {\n        // Main frame rails\n        union() {\n            // Left rail\n            translate([0, -20, 4]) cube([110, 4, 8], center = true);\n            // Right rail\n            translate([0, 20, 4]) cube([110, 4, 8], center = true);\n            // Cross members\n            for (x = [-40, -10, 20, 50]) {\n                translate([x, 0, 4]) cube([4, 44, 8], center = true);\n            }\n        }\n        \n        // Lightening holes in frame\n        for (x = [-25, -5, 15, 35]) {\n            translate([x, -20, 4]) cylinder(h = 10, r = 1.5, center = true);\n            translate([x, 20, 4]) cylinder(h = 10, r = 1.5, center = true);\n        }\n    }\n}\n\n// Front wheel with tire and rim\nmodule front_wheel() {\n    rotate([90, 0, 0]) difference() {\n        // Tire\n        cylinder(h = 8, r = 10);\n        \n        // Rim\n        translate([0, 0, -1]) cylinder(h = 10, r = 7);\n        \n        // Spokes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) \n                translate([0, 0, 3]) cube([2, 12, 6], center = true);\n        }\n        \n        // Axle hole\n        cylinder(h = 12, r = 2);\n    }\n}\n\n// Rear wheel (larger)\nmodule rear_wheel() {\n    rotate([90, 0, 0]) difference() {\n        // Tire\n        cylinder(h = 12, r = 15);\n        \n        // Rim\n        translate([0, 0, -1]) cylinder(h = 14, r = 11);\n        \n        // Spokes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([0, 0, 5]) cube([3, 16, 10], center = true);\n        }\n        \n        // Axle hole\n        cylinder(h = 16, r = 3);\n    }\n}\n\n// Engine block with cylinders\nmodule engine() {\n    difference() {\n        union() {\n            // Main block\n            cube([20, 25, 15], center = true);\n            \n            // Cylinder heads\n            for (i = [-1, 1]) {\n                translate([i * 8, 0, 12]) rotate([90, 0, 0]) \n                    cylinder(h = 8, r = 5);\n            }\n        }\n        \n        // Cooling fins\n        for (z = [2:2:10]) {\n            translate([0, 0, z]) cube([20, 25, 1], center = true);\n        }\n    }\n}\n\n// Driver cockpit\nmodule cockpit() {\n    difference() {\n        union() {\n            // Cockpit tub\n            translate([0, 0, 5]) cube([25, 20, 8], center = true);\n            \n            // Roll bar\n            translate([-10, 0, 12]) rotate([0, 90, 0]) \n                cylinder(h = 20, r = 2);\n        }\n        \n        // Seating area\n        translate([0, 0, 5]) cube([23, 18, 6], center = true);\n    }\n}\n\n// Exhaust pipes\nmodule exhaust() {\n    rotate([-15, 0, 0]) union() {\n        // Headers\n        for (i = [-1, 1]) {\n            translate([i * 3, 0, 0]) rotate([90, 0, 0]) \n                cylinder(h = 15, r = 2);\n        }\n        \n        // Collector\n        translate([0, 0, -15]) rotate([90, 0, 0]) \n            cylinder(h = 20, r = 3);\n    }\n}\n\n// Rear wing with supports\nmodule rear_wing() {\n    union() {\n        // Wing element\n        cube([25, 50, 3], center = true);\n        \n        // End plates\n        translate([0, 25, 0]) cube([25, 2, 15], center = true);\n        translate([0, -25, 0]) cube([25, 2, 15], center = true);\n        \n        // Support struts\n        translate([0, 15, -9]) cube([3, 3, 15], center = true);\n        translate([0, -15, -9]) cube([3, 3, 15], center = true);\n    }\n}\n\n// Front spoiler/wing\nmodule front_spoiler() {\n    union() {\n        // Spoiler blade\n        cube([3, 45, 8], center = true);\n        \n        // Support brackets\n        for (y = [-20, 20]) {\n            translate([0, y, -4]) cube([3, 3, 8], center = true);\n        }\n    }\n}\n\n// Render the dragster\ndragster();",
    "renders": true
  },
  {
    "toy": "flatbed",
    "openscad_code": "// Toy Flatbed Truck - Realistic Medium Complexity\n// Scale: 1:50 toy size, ~120mm length\n\n$fn = 32;\nwall = 2;\n\nmodule chassis() {\n    // Main frame rails\n    difference() {\n        cube([100, 30, 4]);\n        for (i = [0:1]) {\n            translate([10 + i*80, 5, 2])\n                cube([15, 20, 2.5]);\n        }\n    }\n    \n    // Cross members\n    for (pos = [15, 45, 75]) {\n        translate([pos, -1, 0])\n            cube([8, 32, 4]);\n    }\n}\n\nmodule cab() {\n    // Cab base\n    translate([5, 10, 4])\n        cube([25, 25, 20]);\n    \n    // Cab roof\n    translate([5, 12, 24])\n        cube([25, 21, 8]);\n    \n    // Windshield\n    difference() {\n        translate([29, 13, 12])\n            cube([1, 19, 12]);\n        translate([29.5, 15, 14])\n            cube([2, 15, 8]);\n    }\n    \n    // Side windows (left)\n    translate([17, 9.5, 15])\n        cube([1, 1, 8]);\n    translate([17, 9.5, 8])\n        cube([1, 1, 4]);\n    \n    // Side windows (right)\n    translate([17, 34.5, 15])\n        cube([1, 1, 8]);\n    translate([17, 34.5, 8])\n        cube([1, 1, 4]);\n}\n\nmodule wheels() {\n    module wheel() {\n        difference() {\n            cylinder(h=6, r=10);\n            cylinder(h=7, r=3);\n        }\n        // Tire tread pattern\n        for (i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([8, 0, 3])\n                    cube([4, 1, 6]);\n        }\n    }\n    \n    // Front wheels\n    translate([15, 8, -2])\n        wheel();\n    translate([15, 32, -2])\n        wheel();\n    \n    // Rear wheels\n    translate([75, 8, -2])\n        wheel();\n    translate([75, 32, -2])\n        wheel();\n}\n\nmodule flatbed() {\n    // Bed floor\n    difference() {\n        translate([30, 10, 8])\n            cube([70, 25, 2]);\n        // Wood plank texture\n        for (i = [0:6]) {\n            translate([32 + i*10, 10, 9.5])\n                cube([8, 25, 0.5]);\n        }\n    }\n    \n    // Side rails\n    translate([30, 10, 10])\n        cube([70, 2, 5]);\n    translate([30, 33, 10])\n        cube([70, 2, 5]);\n    \n    // Headboard\n    translate([30, 10, 10])\n        cube([2, 25, 8]);\n    \n    // Support posts\n    for (pos = [40, 60, 80, 95]) {\n        translate([pos, 10, 8])\n            cube([2, 2, 5]);\n        translate([pos, 33, 8])\n            cube([2, 2, 5]);\n    }\n}\n\nmodule details() {\n    // Headlights\n    translate([29, 15, 12])\n        sphere(2);\n    translate([29, 30, 12])\n        sphere(2);\n    \n    // Exhaust pipe\n    translate([20, 35, 25])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=1.5);\n    \n    // Mud flaps\n    translate([55, 8, 4])\n        cube([2, 12, 8]);\n    translate([55, 28, 4])\n        cube([2, 12, 8]);\n}\n\n// Assembly\nunion() {\n    chassis();\n    cab();\n    wheels();\n    flatbed();\n    details();\n}",
    "renders": true
  },
  {
    "toy": "eagle",
    "openscad_code": "// Eagle Toy - Realistic Style Medium Complexity\n// 3D printable with 2mm wall thickness and no steep overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule eagle_body() {\n    // Central torso\n    difference() {\n        hull() {\n            translate([0, 0, 10]) sphere(r=12);\n            translate([0, 0, 30]) sphere(r=15);\n            translate([0, 0, 50]) sphere(r=12);\n        }\n        \n        // Hollow interior for 2mm walls\n        translate([0, 0, 10]) scale([0.85, 0.85, 0.85]) hull() {\n            translate([0, 0, 10]) sphere(r=12);\n            translate([0, 0, 30]) sphere(r=15);\n            translate([0, 0, 50]) sphere(r=12);\n        }\n    }\n    \n    // Neck connection\n    translate([0, 0, 52]) cylinder(h=15, r1=10, r2=8);\n}\n\n// Head with beak\nmodule eagle_head() {\n    // Head sphere\n    difference() {\n        sphere(r=15);\n        sphere(r=13);\n    }\n    \n    // Beak\n    translate([0, 18, 0]) rotate([90, 0, 0]) \n    difference() {\n        cylinder(h=20, r1=5, r2=0);\n        translate([0, -10, 0]) cube([20, 20, 20], center=true);\n    }\n    \n    // Eye sockets\n    translate([5, 10, 5]) sphere(r=4);\n    translate([-5, 10, 5]) sphere(r=4);\n}\n\n// Wing module\nmodule wing(angle) {\n    rotate([0, 0, angle]) {\n        // Main wing\n        difference() {\n            translate([-30, 0, 0]) cube([60, 25, 5], center=true);\n            translate([-30, 0, 0]) scale([0.85, 0.85, 0.85]) cube([60, 25, 5], center=true);\n        }\n        \n        // Wing feathers\n        for(i = [1:3]) {\n            translate([-50 + i*15, 0, 0]) \n            rotate([0, i*5, 0])\n            cube([15, 8, 3], center=true);\n        }\n    }\n}\n\n// Tail assembly\nmodule tail() {\n    translate([-30, 0, 25]) rotate([0, 30, 0]) {\n        for(i = [0:2]) {\n            rotate([0, 0, i*15 - 15]) \n            translate([0, 0, i*3]) \n            cube([25, 5, 2], center=true);\n        }\n    }\n}\n\n// Leg and talon assembly\nmodule leg(side) {\n    translate([side*10, 0, 0]) {\n        // Upper leg\n        rotate([0, 30, 0]) \n        difference() {\n            cylinder(h=20, r=4);\n            cylinder(h=20, r=2);\n        }\n        \n        // Lower leg\n        translate([15, 0, -15]) rotate([0, -30, 0])\n        difference() {\n            cylinder(h=15, r=3);\n            cylinder(h=15, r=1);\n        }\n        \n        // Talons\n        translate([25, 0, -25]) {\n            for(i = [-1:1]) {\n                rotate([0, 90, i*30]) \n                cylinder(h=8, r1=2, r2=1);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Body\n    eagle_body();\n    \n    // Head\n    translate([0, 0, 65]) eagle_head();\n    \n    // Wings\n    translate([0, 0, 35]) wing(20);\n    translate([0, 0, 35]) wing(-20);\n    \n    // Tail\n    tail();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "toy": "cyclone",
    "openscad_code": "// Cyclone Toy Table - Realistic Style, Medium Complexity\n// A playful toy table with swirling cyclone-shaped legs and cloud-like tabletop\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n$fn = 32;\n\n// Main module for the cyclone table\nmodule cyclone_table() {\n    // Overall dimensions\n    table_height = 80;\n    table_diameter = 120;\n    \n    // Cloud-shaped tabletop\n    union() {\n        // Main cloud platform\n        translate([0, 0, table_height - 5])\n            cloud_tabletop(table_diameter, 8);\n        \n        // Cyclone legs\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([35, 35, 0])\n                    cyclone_leg(table_height - 8);\n        }\n        \n        // Central support ring\n        translate([0, 0, 40])\n            cylinder(h = 2, r1 = 45, r2 = 45, $fn = 64);\n    }\n}\n\n// Cloud-shaped tabletop with puffy edges\nmodule cloud_tabletop(diameter, thickness) {\n    difference() {\n        // Main cloud shape\n        union() {\n            // Central platform\n            cylinder(h = thickness, r = diameter/2 - 5, $fn = 64);\n            \n            // Puffy cloud bumps around edge\n            for (i = [0:7]) {\n                rotate([0, 0, i * 45])\n                    translate([diameter/2 - 8, 0, thickness/2])\n                        sphere(r = 8);\n            }\n        }\n        \n        // Hollow out for material savings\n        translate([0, 0, 2])\n            cylinder(h = thickness, r = diameter/2 - 7, $fn = 64);\n    }\n}\n\n// Swirling cyclone leg\nmodule cyclone_leg(height) {\n    // Parameters\n    base_radius = 12;\n    top_radius = 6;\n    twists = 3;\n    \n    // Create spiraling leg\n    for (i = [0:height/2 - 1]) {\n        // Calculate position along height\n        h = i * 2;\n        \n        // Calculate radius at this height\n        r = base_radius - (base_radius - top_radius) * (h / height);\n        \n        // Calculate twist angle\n        angle = h * (360 * twists) / height;\n        \n        // Create segment\n        translate([0, 0, h])\n            rotate([0, 0, angle])\n                cylinder(h = 2.2, r1 = r, r2 = r - 0.1, $fn = 16);\n    }\n    \n    // Add decorative wind swirls\n    for (j = [0:2]) {\n        rotate([0, 0, j * 120])\n            translate([10, 0, height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, r1 = 2, r2 = 1, $fn = 8);\n    }\n    \n    // Base pad for stability\n    translate([0, 0, -2])\n        cylinder(h = 4, r1 = 15, r2 = 12, $fn = 32);\n}\n\n// Generate the complete toy table\ncyclone_table();",
    "renders": true
  },
  {
    "toy": "barge",
    "openscad_code": "// Toy Barge - Realistic Medium Complexity\n// Overall dimensions: 120mm x 40mm x 25mm\n\n// Wall thickness\nwall = 2;\n\n// Main hull module\nmodule hull() {\n    difference() {\n        // Outer hull shape\n        hull_shape();\n        \n        // Hollow out interior\n        translate([wall, wall, wall])\n        scale([0.92, 0.9, 0.85])\n        hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    union() {\n        // Main rectangular body\n        cube([100, 35, 15], center=true);\n        \n        // Tapered bow\n        translate([45, 0, 0])\n        scale([0.8, 1, 1])\n        cube([20, 35, 15], center=true);\n        \n        // Rounded edges\n        translate([0, 17.5, 7.5])\n        cylinder(h=15, r=2, center=true);\n        translate([0, -17.5, 7.5])\n        cylinder(h=15, r=2, center=true);\n        translate([50, 17.5, 7.5])\n        cylinder(h=15, r=2, center=true);\n        translate([50, -17.5, 7.5])\n        cylinder(h=15, r=2, center=true);\n    }\n}\n\n// Cargo hold walls\nmodule cargo_walls() {\n    for (i = [-1, 0, 1]) {\n        translate([i * 25, 0, 10])\n        cube([20, 31, 10], center=true);\n    }\n}\n\n// Railing posts\nmodule railing_posts() {\n    for (x = [-40, -20, 0, 20, 40]) {\n        for (y = [-14, 14]) {\n            translate([x, y, 16])\n            cylinder(h=8, r=1.5);\n        }\n    }\n}\n\n// Railing rails\nmodule railing_rails() {\n    // Top rail\n    translate([0, 14, 20])\n    cube([100, 1.5, 1.5], center=true);\n    translate([0, -14, 20])\n    cube([100, 1.5, 1.5], center=true);\n    \n    // Mid rail\n    translate([0, 14, 18])\n    cube([100, 1.5, 1.5], center=true);\n    translate([0, -14, 18])\n    cube([100, 1.5, 1.5], center=true);\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([-30, 0, 15])\n    difference() {\n        // Cabin body\n        cube([30, 25, 12], center=true);\n        \n        // Door opening\n        translate([-12, 0, 3])\n        cube([4, 8, 6], center=true);\n        \n        // Windows\n        for (i = [-8, 4]) {\n            translate([i, 10, 4])\n            cube([6, 1, 4], center=true);\n            translate([i, -10, 4])\n            cube([6, 1, 4], center=true);\n        }\n    }\n}\n\n// Anchor point\nmodule anchor_point() {\n    translate([48, 0, 8])\n    cylinder(h=8, r=3);\n    translate([48, 0, 12])\n    cube([2, 8, 2], center=true);\n}\n\n// Deck details\nmodule deck_details() {\n    // Hatch covers\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, 15])\n        cube([15, 20, 1], center=true);\n    }\n    \n    // Bollards\n    for (pos = [[-35, 12], [-35, -12], [35, 12], [35, -12]]) {\n        translate([pos[0], pos[1], 15])\n        cylinder(h=3, r=2);\n        translate([pos[0], pos[1], 17])\n        sphere(r=2.5);\n    }\n}\n\n// Assemble the barge\nunion() {\n    hull();\n    cargo_walls();\n    railing_posts();\n    railing_rails();\n    cabin();\n    anchor_point();\n    deck_details();\n}",
    "renders": true
  },
  {
    "toy": "viper",
    "openscad_code": "// Viper Toy Model\n// Medium complexity 3D printable viper toy\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 100;\nbody_width = 20;\nbody_height = 15;\nhead_length = 25;\nhead_width = 18;\nhead_height = 12;\n\nmodule viper_body() {\n    // Main body segments\n    for (i = [0:4]) {\n        translate([i * 18, 0, 0]) {\n            scale([1 - i * 0.08, 1 - i * 0.05, 1 - i * 0.03]) {\n                difference() {\n                    // Body segment\n                    cylinder(h = 15, r1 = body_width/2, r2 = body_width/2 - 2);\n                    // Scale pattern\n                    for (j = [0:2]) {\n                        rotate([0, 0, j * 120]) {\n                            translate([0, 0, 5]) {\n                                cube([body_width * 0.8, 2, 2], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule viper_head() {\n    // Head base\n    translate([body_length - 5, 0, body_height/2]) {\n        rotate([0, -10, 0]) {\n            difference() {\n                // Head shape\n                hull() {\n                    sphere(r = head_width/2);\n                    translate([head_length - head_width/2, 0, 0]) \n                        sphere(r = head_width/2 - 3);\n                }\n                \n                // Eye sockets\n                translate([head_length - 12, head_width/3, -head_height/4]) \n                    sphere(r = 4);\n                translate([head_length - 12, -head_width/3, -head_height/4]) \n                    sphere(r = 4);\n                \n                // Mouth opening\n                translate([head_length - 15, 0, -head_height/2 - 1]) \n                    cube([8, head_width * 0.6, 4], center = true);\n            }\n            \n            // Eyes\n            color(\"black\") {\n                translate([head_length - 12, head_width/3, -head_height/4]) \n                    sphere(r = 2);\n                translate([head_length - 12, -head_width/3, -head_height/4]) \n                    sphere(r = 2);\n            }\n            \n            // Nostrils\n            translate([head_length - 18, head_width/4, -head_height/6]) \n                cylinder(h = 2, r = 1.5);\n            translate([head_length - 18, -head_width/4, -head_height/6]) \n                cylinder(h = 2, r = 1.5);\n        }\n    }\n}\n\nmodule viper_tail() {\n    // Tail segments\n    for (i = [0:6]) {\n        translate([-i * 12 - 10, 0, 0]) {\n            scale([1 - i * 0.12, 1 - i * 0.12, 1 - i * 0.1]) {\n                rotate([0, 0, i * -15]) {\n                    cylinder(h = 10, r1 = body_width/2 - 3, r2 = body_width/2 - 5);\n                }\n            }\n        }\n    }\n}\n\nmodule viper_scales() {\n    // Raised scales along back\n    for (i = [0:5]) {\n        translate([i * 15 + 10, 0, body_height/2 + 1]) {\n            rotate([0, 0, i * 5]) {\n                cube([8, 3, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule viper_fangs() {\n    // Fangs\n    translate([body_length - 5, head_width/4, -body_height/2 - 3]) {\n        rotate([0, 0, 15]) {\n            cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n        }\n    }\n    translate([body_length - 5, -head_width/4, -body_height/2 - 3]) {\n        rotate([0, 0, -15]) {\n            cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n        }\n    }\n}\n\nmodule viper_base() {\n    // Flat base for stability\n    translate([body_length/2 - 10, 0, -body_height/2 - 2]) {\n        cube([body_length + 20, body_width + 10, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    viper_body();\n    viper_head();\n    viper_tail();\n    \n    // Details\n    viper_scales();\n    viper_fangs();\n    \n    // Base for 3D printing stability\n    viper_base();\n}",
    "renders": true
  },
  {
    "toy": "carrier",
    "openscad_code": "// Toy Wooden Baby Carrier (Crane-style)\n// Medium complexity realistic style\n// Overall size ~90mm wide x 60mm deep x 85mm high\n// 2mm wall thickness throughout\n\n$fn = 32;\n\nmodule main_body() {\n    // Main basket\n    difference() {\n        // Outer shell\n        translate([0, 0, 30])\n            cube([80, 50, 50], center=true);\n        // Inner cavity\n        translate([0, 0, 31])\n            cube([76, 46, 48], center=true);\n    }\n    \n    // Base\n    translate([0, 0, 5])\n        cube([82, 52, 10], center=true);\n    \n    // Rounded top edge\n    translate([0, 0, 55])\n        rotate([90, 0, 0])\n            cylinder(h=80, d=54, center=true);\n    translate([0, 0, 55])\n        rotate([0, 90, 0])\n            cylinder(h=50, d=84, center=true);\n}\n\nmodule handle() {\n    // Handle arch\n    rotate([0, 90, 0])\n        translate([0, 0, 40])\n            difference() {\n                cylinder(h=100, d=12, center=true);\n                cylinder(h=102, d=8, center=true);\n            }\n    \n    // Handle supports\n    translate([0, 0, 50])\n        rotate([0, 90, 0])\n            cylinder(h=20, d=12, center=true);\n    translate([0, 0, 50])\n        rotate([0, 90, 0])\n            cylinder(h=20, d=12, center=true);\n}\n\nmodule legs() {\n    // Four rounded legs\n    positions = [[-30, -20], [30, -20], [-30, 20], [30, 20]];\n    for (pos = positions) {\n        translate([pos[0], pos[1], 5])\n            difference() {\n                cylinder(h=20, d=10, center=false);\n                cylinder(h=20, d=6, center=false);\n            }\n    }\n}\n\nmodule bedding() {\n    // Mattress\n    translate([0, 0, 20])\n        cube([74, 44, 6], center=true);\n    \n    // Pillow\n    translate([0, 15, 26])\n        cube([40, 20, 8], center=true);\n}\n\nmodule safety_bars() {\n    // Vertical bars around perimeter\n    for (x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n        translate([x, 0, 42])\n            difference() {\n                cylinder(h=28, d=4, center=true);\n                cylinder(h=28, d=2, center=true);\n            }\n    }\n    \n    // Horizontal top rail\n    translate([0, 0, 56])\n        difference() {\n            cube([82, 52, 4], center=true);\n            cube([78, 48, 4], center=true);\n        }\n}\n\nmodule decorative_details() {\n    // Heart cutouts on sides\n    for (side = [-1, 1]) {\n        translate([0, side * 25, 40])\n            rotate([0, 90 * side, 0])\n                linear_extrude(height=2)\n                    scale([0.3, 0.3, 1])\n                        heart();\n    }\n}\n\nmodule heart() {\n    // Simple heart shape\n    rotate([180, 0, 0])\n        union() {\n            translate([-5, 0, 0])\n                circle(r=5);\n            translate([5, 0, 0])\n                circle(r=5);\n            translate([0, -5, 0])\n                square([10, 5], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    main_body();\n    handle();\n    legs();\n    bedding();\n    safety_bars();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "toy": "lightning",
    "openscad_code": "// Lightning Bolt Toy - Realistic Style, Medium Complexity\n// 3D printable toy lightning bolt with structural reinforcements\n\n// Overall dimensions: 120mm height, 80mm width, 20mm depth\n$fn = 32;\n\n// Main lightning bolt body\nmodule lightning_body() {\n    // Central spine for structural integrity\n    union() {\n        // Main zig-zag bolt shape\n        translate([0, 0, 10]) {\n            difference() {\n                // Primary bolt form\n                union() {\n                    // Top vertical segment\n                    translate([0, 0, 50]) cube([12, 20, 40], center=true);\n                    \n                    // First diagonal segment\n                    rotate([0, 0, 30]) translate([0, 15, 25]) cube([12, 20, 35], center=true);\n                    \n                    // Horizontal segment\n                    translate([20, 25, 0]) cube([40, 20, 12], center=true);\n                    \n                    // Second diagonal segment\n                    rotate([0, 0, -30]) translate([30, 0, -15]) cube([12, 20, 35], center=true);\n                    \n                    // Bottom vertical segment\n                    translate([20, -15, -50]) cube([12, 20, 30], center=true);\n                }\n                \n                // Hollow out center for material savings\n                union() {\n                    translate([0, 0, 50]) cube([8, 16, 36], center=true);\n                    rotate([0, 0, 30]) translate([0, 15, 25]) cube([8, 16, 31], center=true);\n                    translate([20, 25, 0]) cube([36, 16, 8], center=true);\n                    rotate([0, 0, -30]) translate([30, 0, -15]) cube([8, 16, 31], center=true);\n                    translate([20, -15, -50]) cube([8, 16, 26], center=true);\n                }\n            }\n        }\n        \n        // Reinforcement ribs every 20mm\n        for(z = [-40, -20, 0, 20, 40]) {\n            translate([0, 0, z]) cube([15, 22, 2], center=true);\n        }\n    }\n}\n\n// Safety rounded edges\nmodule rounded_edges() {\n    // Top cap\n    translate([0, 0, 70]) sphere(d=14);\n    \n    // Bottom cap  \n    translate([20, -15, -65]) sphere(d=14);\n    \n    // Corner fillets\n    translate([35, 25, 0]) sphere(d=10);\n    translate([-8, 0, 30]) sphere(d=10);\n}\n\n// Child-safe mounting features\nmodule mounting_features() {\n    // Keyhole slot for wall mounting\n    difference() {\n        translate([-5, 0, 0]) cube([10, 6, 15], center=true);\n        translate([-5, 0, 5]) cylinder(d1=6, d2=4, h=8);\n    }\n    \n    // Grip texture lines\n    for(i = [-60:10:60]) {\n        rotate([0, 90, 0]) translate([i, 0, 0]) cylinder(d=2, h=20);\n    }\n}\n\n// Assembly\nunion() {\n    lightning_body();\n    rounded_edges();\n    \n    // Mirror for symmetrical toy\n    mirror([1, 0, 0]) {\n        lightning_body();\n        rounded_edges();\n    }\n    \n    // Central connector\n    translate([0, 0, 0]) cube([25, 20, 120], center=true);\n    \n    mounting_features();\n}",
    "renders": true
  },
  {
    "toy": "sloop",
    "openscad_code": "// Toy Sloop - Realistic Style, Medium Complexity\n// Overall length ~120mm\n\nmodule hull() {\n    // Main hull body\n    difference() {\n        hull() {\n            // Lower hull - curved bottom\n            translate([0, 0, 0])\n                scale([1, 0.7, 1])\n                    sphere(d=40, $fn=60);\n            \n            // Upper hull - straight sides\n            translate([0, 0, 15])\n                cube([60, 25, 30], center=true);\n        }\n        \n        // Hull hollow - cockpit\n        translate([0, 0, 10])\n            cube([55, 20, 25], center=true);\n            \n        // Drain holes\n        for(i=[-20:20:20]) {\n            translate([i, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=3);\n        }\n    }\n    \n    // Deck surface\n    translate([0, 0, 25])\n        cube([62, 27, 2], center=true);\n}\n\nmodule mast() {\n    // Main mast\n    translate([-10, 0, 25])\n        cylinder(h=70, d1=4, d2=3);\n        \n    // Mast base reinforcement\n    translate([-10, 0, 25])\n        cylinder(h=5, d=8);\n}\n\nmodule boom() {\n    // Boom arm\n    translate([-10, 0, 85])\n        rotate([0, 90, 0])\n            cylinder(h=45, d=3);\n            \n    // Boom pivot\n    translate([-10, 0, 85])\n        sphere(d=5);\n}\n\nmodule sail() {\n    // Main sail\n    translate([-10, 0, 60])\n        rotate([0, 90, 0])\n            linear_extrude(height=2)\n                polygon(points=[\n                    [0, 0],\n                    [40, 0],\n                    [35, 60],\n                    [5, 55]\n                ]);\n                \n    // Jib sail\n    translate([25, 0, 65])\n        rotate([0, -45, 0])\n            linear_extrude(height=1.5)\n                polygon(points=[\n                    [0, 0],\n                    [30, 0],\n                    [25, 35],\n                    [5, 30]\n                ]);\n}\n\nmodule rudder() {\n    // Rudder post\n    translate([28, 0, 20])\n        cylinder(h=15, d=4);\n        \n    // Rudder blade\n    translate([28, 0, 10])\n        cube([12, 2, 15], center=true);\n}\n\nmodule keel() {\n    // Centerboard slot\n    translate([0, 0, 5])\n        cube([2, 22, 10], center=true);\n        \n    // Keel fin\n    translate([0, 0, -5])\n        cube([3, 25, 10], center=true);\n}\n\nmodule rigging() {\n    // Forestay\n    translate([25, 0, 85])\n        rotate([0, 90, 0])\n            cylinder(h=35, d=0.8);\n            \n    // Backstay\n    translate([-40, 0, 85])\n        rotate([0, 90, 0])\n            cylinder(h=35, d=0.8);\n            \n    // Shrouds\n    for(side=[-1, 1]) {\n        translate([-10, side*12, 85])\n            rotate([0, 90, 0])\n                cylinder(h=20, d=0.8);\n    }\n}\n\n// Assembly\nunion() {\n    hull();\n    mast();\n    boom();\n    sail();\n    rudder();\n    keel();\n    rigging();\n}\n\n// Toy wheels for play on surfaces\nmodule wheels() {\n    for(pos=[-20, 20]) {\n        translate([pos, 0, 8])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=8);\n    }\n}\n\n// Uncomment to add wheels\n// wheels();",
    "renders": true
  },
  {
    "toy": "interceptor",
    "openscad_code": "// Interceptor Toy Airplane - Medium Complexity\n// Realistic styling with proper proportions for 3D printing\n\n// Overall dimensions (150mm wingspan)\n$fn = 32;\n\nmodule fuselage() {\n    // Main body - cylindrical shape with nose cone\n    union() {\n        // Main fuselage body\n        cylinder(h = 80, r1 = 12, r2 = 10, center = true);\n        \n        // Cockpit section\n        translate([0, 0, 30])\n            cylinder(h = 20, r1 = 11, r2 = 9, center = true);\n        \n        // Nose cone\n        translate([0, 0, 50])\n            cylinder(h = 15, r1 = 10, r2 = 0, center = true);\n        \n        // Tail section\n        translate([0, 0, -45])\n            cylinder(h = 20, r1 = 10, r2 = 8, center = true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([0, -35, 0]) {\n        // Main wing\n        difference() {\n            cube([70, 8, 3], center = true);\n            // Wing tip cut\n            translate([35, 0, 0])\n                cube([2, 12, 5], center = true);\n        }\n        \n        // Wing gun pod\n        translate([25, 0, -3])\n            cylinder(h = 6, r = 2);\n    }\n    \n    // Right wing (mirror of left)\n    mirror([0, 1, 0]) {\n        translate([0, -35, 0]) {\n            difference() {\n                cube([70, 8, 3], center = true);\n                translate([35, 0, 0])\n                    cube([2, 12, 5], center = true);\n            }\n            translate([25, 0, -3])\n                cylinder(h = 6, r = 2);\n        }\n    }\n}\n\nmodule tail_assembly() {\n    // Vertical stabilizer\n    translate([0, 0, -50]) {\n        rotate([0, 10, 0])\n            cube([3, 20, 25], center = true);\n        \n        // Horizontal stabilizers\n        translate([0, 0, -10]) {\n            cube([40, 3, 8], center = true);\n        }\n        \n        // Tail cone\n        translate([0, 0, -60])\n            cylinder(h = 15, r1 = 8, r2 = 4, center = true);\n    }\n}\n\nmodule jet_intakes() {\n    // Left intake\n    translate([15, -10, -10]) {\n        difference() {\n            cylinder(h = 12, r = 5);\n            // Hollow interior\n            cylinder(h = 13, r = 3);\n        }\n    }\n    \n    // Right intake\n    translate([15, 10, -10]) {\n        difference() {\n            cylinder(h = 12, r = 5);\n            cylinder(h = 13, r = 3);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Front landing gear\n    translate([20, 0, -55]) {\n        cylinder(h = 8, r = 2);\n        translate([0, 0, -4])\n            sphere(r = 2.5);\n    }\n    \n    // Main landing gear (left)\n    translate([-15, -20, -55]) {\n        cylinder(h = 8, r = 2);\n        translate([0, 0, -4])\n            sphere(r = 2.5);\n    }\n    \n    // Main landing gear (right)\n    translate([-15, 20, -55]) {\n        cylinder(h = 8, r = 2);\n        translate([0, 0, -4])\n            sphere(r = 2.5);\n    }\n}\n\nmodule cockpit_details() {\n    // Cockpit canopy\n    translate([0, 0, 40]) {\n        difference() {\n            sphere(r = 8);\n            translate([0, 0, -5])\n                cube([20, 15, 10], center = true);\n        }\n    }\n    \n    // Cockpit frame\n    translate([0, 0, 35])\n        cube([16, 12, 0.5], center = true);\n}\n\nmodule exhaust_ports() {\n    // Left exhaust\n    translate([-15, -5, -55]) {\n        difference() {\n            cylinder(h = 8, r = 3);\n            cylinder(h = 9, r = 2);\n        }\n    }\n    \n    // Right exhaust\n    translate([-15, 5, -55]) {\n        difference() {\n            cylinder(h = 8, r = 3);\n            cylinder(h = 9, r = 2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    fuselage();\n    wings();\n    tail_assembly();\n    jet_intakes();\n    cockpit_details();\n    exhaust_ports();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "toy": "thunder",
    "openscad_code": "// Thunder Toy - Realistic Style (Medium Complexity)\n// A 3D printable thunder toy with proper proportions and structural elements\n\n// Overall dimensions\nthunder_length = 80;\nthunder_width = 45;\nthunder_height = 15;\n\n// Thickness for 3D printing\nwall_thickness = 2;\n\n// Main bolt body\nmodule thunder_body() {\n    difference() {\n        // Main zigzag shape\n        union() {\n            // First segment\n            translate([0, 0, 0]) cube([30, 10, thunder_height], center=true);\n            \n            // Second segment (angled)\n            translate([20, -10, 0]) rotate([0, 0, -30]) cube([25, 10, thunder_height], center=true);\n            \n            // Third segment\n            translate([35, -20, 0]) cube([20, 10, thunder_height], center=true);\n            \n            // Fourth segment (angled)\n            translate([45, -10, 0]) rotate([0, 0, 30]) cube([25, 10, thunder_height], center=true);\n            \n            // Fifth segment\n            translate([60, 0, 0]) cube([20, 10, thunder_height], center=true);\n            \n            // Top spike\n            translate([0, 0, thunder_height/2 + 5]) cube([8, 8, 10], center=true);\n            \n            // Bottom spike\n            translate([60, 0, -thunder_height/2 - 5]) cube([8, 8, 10], center=true);\n        }\n        \n        // Hollow out center\n        translate([0, 0, 0]) cube([thunder_length-4, thunder_width-4, thunder_height-4], center=true);\n    }\n}\n\n// Decorative edge ridges\nmodule ridges() {\n    for(i = [-30:10:50]) {\n        translate([i, 0, thunder_height/2 + 1]) cube([2, thunder_width, 3], center=true);\n    }\n    for(i = [-30:10:50]) {\n        translate([i, 0, -thunder_height/2 - 1]) cube([2, thunder_width, 3], center=true);\n    }\n}\n\n// Connection points for toy assembly\nmodule connection_pins() {\n    // Left connector\n    translate([-40, 0, 0]) {\n        difference() {\n            cylinder(h=10, r=3, $fn=16);\n            translate([0, 0, 2]) cylinder(h=6, r=2, $fn=16);\n        }\n    }\n    \n    // Right connector\n    translate([100, 0, 0]) {\n        difference() {\n            cylinder(h=10, r=3, $fn=16);\n            translate([0, 0, 2]) cylinder(h=6, r=2, $fn=16);\n        }\n    }\n}\n\n// Safety rounded edges\nmodule rounded_edges() {\n    for(x = [-30:15:60]) {\n        translate([x, 0, 0]) {\n            for(z = [-1, 1]) {\n                translate([0, 0, z*thunder_height/2]) {\n                    sphere(r=wall_thickness+1, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    thunder_body();\n    \n    // Structural elements\n    translate([0, 0, 0]) ridges();\n    translate([0, 0, 0]) rounded_edges();\n    \n    // Connection points\n    connection_pins();\n}\n\n// Print orientation marker\ntranslate([-50, -30, -10]) {\n    color(\"red\") cube([5, 5, 2]);\n    translate([0, 0, 2]) color(\"green\") cube([3, 3, 2]);\n}",
    "renders": true
  },
  {
    "toy": "scull",
    "openscad_code": "// Realistic Toy Scull - Medium Complexity\n// Size: ~80mm tall, 3D printable with 2mm walls\n\n// Overall scale factor\nscale_factor = 1;\n\n// Basic dimensions (mm)\nscull_height = 80 * scale_factor;\nscull_width = 60 * scale_factor;\nscull_depth = 70 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule scull() {\n    // Main cranium\n    translate([0, 0, scull_height * 0.6])\n    scale([1, 0.9, 1.1])\n    sphere(d=scull_width * 0.8, $fn=32);\n    \n    // Jaw\n    translate([0, scull_depth * 0.3, scull_height * 0.15])\n    rotate([0, 20, 0])\n    scale([0.8, 0.7, 0.6])\n    cube([scull_width * 0.8, scull_depth * 0.4, scull_height * 0.3], center=true);\n    \n    // Eye sockets\n    for (x = [-scull_width * 0.2, scull_width * 0.2]) {\n        translate([x, scull_depth * 0.15, scull_height * 0.7])\n        rotate([0, 15, 0])\n        scale([1, 1.2, 0.8])\n        sphere(d=scull_width * 0.18, $fn=16);\n    }\n    \n    // Nasal cavity\n    translate([0, scull_depth * 0.25, scull_height * 0.5])\n    rotate([0, 20, 0])\n    scale([1.2, 0.6, 1])\n    cylinder(h=scull_height * 0.15, d1=scull_width * 0.15, d2=scull_width * 0.1, $fn=16);\n    \n    // Teeth\n    for (i = [-2:2]) {\n        translate([i * scull_width * 0.08, scull_depth * 0.35, scull_height * 0.08])\n        cube([scull_width * 0.06, scull_depth * 0.05, scull_height * 0.08]);\n    }\n    \n    // Temporal bones\n    for (x = [-scull_width * 0.35, scull_width * 0.35]) {\n        translate([x, 0, scull_height * 0.6])\n        rotate([0, 90, 0])\n        cylinder(h=scull_width * 0.15, d=scull_width * 0.25, $fn=16);\n    }\n    \n    // Toy connection peg (neck joint)\n    translate([0, -scull_depth * 0.4, 0])\n    cylinder(h=scull_height * 0.2, d=scull_width * 0.3, $fn=32);\n    \n    // Hollow interior for printing\n    difference() {\n        // Outer shell\n        translate([0, 0, scull_height * 0.6])\n        scale([1, 0.9, 1.1])\n        sphere(d=scull_width * 0.8 - wall_thickness * 2, $fn=32);\n        \n        // Jaw hollow\n        translate([0, scull_depth * 0.3, scull_height * 0.15])\n        rotate([0, 20, 0])\n        scale([0.8 - wall_thickness*2/scull_width, 0.7, 0.6 - wall_thickness*2/scull_height])\n        cube([scull_width * 0.8 - wall_thickness*2, scull_depth * 0.4 - wall_thickness*2, scull_height * 0.3 - wall_thickness*2], center=true);\n    }\n}\n\n// Main assembly\nscull();",
    "renders": true
  },
  {
    "toy": "barracuda",
    "openscad_code": "// Barracuda Toy Fish - Realistic Style, Medium Complexity\n// Size: ~120mm length, designed for 3D printing with 2mm walls\n\n$fn = 36;  // Smooth curves for printing\n\n// Main body module\nmodule barracuda_body() {\n    // Central body tube with taper\n    hull() {\n        // Head section\n        translate([-50, 0, 0]) \n            scale([1.2, 0.8, 0.8]) \n                sphere(d=20);\n        \n        // Mid body\n        translate([-20, 0, 0]) \n            sphere(d=18);\n        \n        // Tail section\n        translate([25, 0, 0]) \n            scale([0.6, 0.4, 0.4]) \n                sphere(d=12);\n    }\n}\n\n// Upper jaw with teeth\nmodule upper_jaw() {\n    difference() {\n        // Jaw shape\n        translate([-60, 0, 3])\n            rotate([0, -20, 0])\n                scale([1.5, 0.6, 0.4])\n                    cube([20, 15, 8], center=true);\n        \n        // Teeth cutouts\n        for(i = [-8:4:8]) {\n            translate([-55, i, 6])\n                rotate([0, -20, 0])\n                    cylinder(h=10, d1=2, d2=0.5, center=true);\n        }\n    }\n}\n\n// Lower jaw\nmodule lower_jaw() {\n    translate([-58, 0, -3])\n        rotate([0, 15, 0])\n            scale([1.3, 0.5, 0.3])\n                cube([18, 12, 6], center=true);\n}\n\n// Dorsal fin with segmented spines\nmodule dorsal_fin() {\n    union() {\n        // Main fin base\n        translate([-15, 0, 10])\n            rotate([90, 0, 0])\n                cylinder(h=25, d1=2, d2=8, center=true);\n        \n        // Fin spines\n        for(i = [-20:5:10]) {\n            translate([i, 0, 12])\n                rotate([110, 0, 0])\n                    scale([0.3, 1, 1])\n                        cylinder(h=8, d1=4, d2=1);\n        }\n    }\n}\n\n// Pectoral fins (side fins)\nmodule pectoral_fin(side) {\n    translate([-25, side*8, -3])\n        rotate([0, 0, side*-20])\n            scale([1.2, 0.3, 0.8])\n                cube([12, 8, 3], center=true);\n}\n\n// Tail fin with forked design\nmodule tail_fin() {\n    union() {\n        // Upper lobe\n        translate([35, 0, 5])\n            rotate([0, -30, 0])\n                scale([0.8, 0.2, 2])\n                    cube([15, 10, 2], center=true);\n        \n        // Lower lobe\n        translate([35, 0, -5])\n            rotate([0, 30, 0])\n                scale([0.8, 0.2, 2])\n                    cube([15, 10, 2], center=true);\n        \n        // Central tail support\n        translate([30, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=6);\n    }\n}\n\n// Eye with socket\nmodule eye(side) {\n    difference() {\n        // Eye socket\n        translate([-52, side*6, 3])\n            sphere(d=6);\n        \n        // Eye ball\n        translate([-53, side*6.5, 3.5])\n            sphere(d=4);\n        \n        // Pupil\n        translate([-54, side*7, 4])\n            sphere(d=2);\n    }\n}\n\n// Gill slits\nmodule gills() {\n    for(i = [1:3]) {\n        translate([-35-i*3, 0, 2])\n            rotate([0, 90, 0])\n                scale([0.3, 1, 1])\n                    cylinder(h=8, d=2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body structure\n    barracuda_body();\n    \n    // Head features\n    upper_jaw();\n    lower_jaw();\n    \n    // Fins\n    dorsal_fin();\n    pectoral_fin(1);   // Right fin\n    pectoral_fin(-1);  // Left fin\n    tail_fin();\n    \n    // Details\n    eye(1);   // Right eye\n    eye(-1);  // Left eye\n    gills();\n    \n    // Toy connection peg (for mounting/display)\n    translate([0, 0, -15])\n        cylinder(h=5, d=8);\n}",
    "renders": true
  },
  {
    "toy": "vortex",
    "openscad_code": "$fn = 50;\n\n// overall size control\nscale_factor = 1;\nunit_size = 15 * scale_factor;\n\n// vortex spinner toy parameters\nbase_d = 80 * scale_factor;\nbase_h = 8  * scale_factor;\ncenter_pillar_d = 12 * scale_factor;\ncenter_pillar_h = 35 * scale_factor;\nblade_t = 2 * scale_factor;          // wall thickness for printability\nblade_h = 12 * scale_factor;\nblade_count = 6;\nblade_outer_r = 30 * scale_factor;\nblade_inner_r = 8 * scale_factor;\nhandle_d = 6 * scale_factor;\nhandle_h = 20 * scale_factor;\n\n// base disk with rounded edges\nmodule base() {\n    difference() {\n        cylinder(d = base_d, h = base_h, $fn = 100);\n        translate([0, 0, -0.1])\n            cylinder(d = base_d - 2*blade_t, h = base_h + 0.2, $fn = 100);\n    }\n}\n\n// central pillar (hollow for weight saving)\nmodule pillar() {\n    difference() {\n        cylinder(d = center_pillar_d, h = center_pillar_h, $fn = 50);\n        translate([0, 0, blade_t])\n            cylinder(d = center_pillar_d - 2*blade_t, h = center_pillar_h, $fn = 50);\n    }\n}\n\n// single helical blade\nmodule blade(angle) {\n    rotate([0, 0, angle])\n    translate([0, 0, 0])\n    difference() {\n        // full blade volume created by stacking and rotating cubes\n        union() {\n            for (i = [0: blade_h/2]) {\n                rotate([0, 0, i*15])  // twist\n                translate([blade_inner_r + blade_outer_r/2, 0, i*2])\n                    cube([blade_outer_r, blade_t, blade_t], center = true);\n            }\n        }\n        // remove inner part to make it a thin wall\n        cylinder(h = blade_h + 1, d = blade_inner_r*2, center = true);\n        cylinder(h = blade_h + 1, d = blade_outer_r*2 + 2, center = true);\n    }\n}\n\n// spinner handle (kid-friendly ball on top)\nmodule handle() {\n    translate([0, 0, center_pillar_h + handle_h/2])\n    union() {\n        cylinder(d = handle_d, h = handle_h, $fn = 30);\n        translate([0, 0, handle_h/2])\n            sphere(d = handle_d + 2, $fn = 30);\n    }\n}\n\n// assembly\nunion() {\n    base();\n    pillar();\n    for (i = [0: blade_count-1]) {\n        rotate([0, 0, i*360/blade_count])\n        translate([0, 0, base_h])\n        blade(i*360/blade_count);\n    }\n    handle();\n}",
    "renders": true
  },
  {
    "toy": "galleon",
    "openscad_code": "// Toy Galleon - Medium Complexity\n// Overall dimensions: ~120mm long, ~90mm wide, ~45mm high\n\n$fn = 32;\n\nmodule hull_body() {\n    difference() {\n        union() {\n            // Main hull shape\n            hull() {\n                translate([-55, 0, 0]) cube([110, 45, 15], center=true);\n                translate([-40, 0, 7]) cube([80, 40, 8], center=true);\n                translate([-20, 0, 12]) cube([40, 35, 5], center=true);\n            }\n            // Raised stern\n            translate([40, 0, 8]) cube([30, 35, 25], center=true);\n            // Raised bow\n            translate([-50, 0, 5]) cube([20, 40, 18], center=true);\n        }\n        // Hollow out hull\n        translate([0, 0, 2]) cube([100, 35, 30], center=true);\n    }\n}\n\nmodule deck() {\n    difference() {\n        // Main deck\n        translate([0, 0, 15]) cube([100, 45, 2], center=true);\n        // Cargo hatch\n        translate([0, 0, 16]) cube([30, 20, 2], center=true);\n    }\n}\n\nmodule mast(section, height) {\n    translate([section, 0, 15]) {\n        cylinder(h=height, r1=2, r2=1.5);\n        // Yard\n        rotate([0, 90, 0]) \n            translate([0, 0, height*0.7]) \n                cube([35, 1.5, 1.5], center=true);\n    }\n}\n\nmodule sail(mast_x, mast_h) {\n    translate([mast_x, -17, 15 + mast_h*0.7]) {\n        // Main sail\n        cube([25, 34, 0.5]);\n        // Small top sail\n        translate([0, 0, 12]) cube([15, 20, 0.5]);\n    }\n}\n\nmodule cannons() {\n    for(side = [-1, 1]) {\n        for(i = [-35, -20, -5, 10, 25]) {\n            translate([i, side*22, 8]) {\n                rotate([0, 90, 0]) \n                    cylinder(h=8, r=1.5);\n            }\n        }\n    }\n}\n\nmodule crow_nest(mast_x, mast_h) {\n    translate([mast_x, 0, 15 + mast_h - 3]) {\n        cylinder(h=4, r=4);\n        // Simple railing\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle]) \n                translate([3.5, 0, 2]) \n                    cube([7, 0.5, 2]);\n        }\n    }\n}\n\nmodule stern_castle() {\n    difference() {\n        // Main structure\n        translate([45, 0, 20]) cube([20, 40, 20], center=true);\n        // Window openings\n        for(z = [25, 30]) {\n            for(y = [-15, -7.5, 0, 7.5, 15]) {\n                translate([55, y, z]) cube([2, 4, 4], center=true);\n            }\n        }\n    }\n    // Deck rail\n    translate([45, 0, 30]) cube([22, 42, 2], center=true);\n}\n\nmodule bow_sprit() {\n    translate([-55, 0, 15]) {\n        rotate([0, -30, 0]) \n            cylinder(h=20, r1=3, r2=1.5);\n    }\n}\n\nmodule anchor() {\n    translate([-65, 0, 5]) {\n        // Anchor shank\n        cylinder(h=10, r=1);\n        // Anchor flukes\n        rotate([0, 0, 30]) translate([0, -2.5, 0]) cube([5, 0.5, 2]);\n        rotate([0, 0, -30]) translate([0, 2.5, 0]) cube([5, 0.5, 2]);\n    }\n}\n\nmodule rudder() {\n    translate([55, 0, 5]) {\n        cube([2, 8, 15]);\n    }\n}\n\n// Assembly\nunion() {\n    hull_body();\n    deck();\n    cannons();\n    stern_castle();\n    bow_sprit();\n    anchor();\n    rudder();\n    \n    // Main mast\n    mast(-10, 35);\n    sail(-10, 35);\n    crow_nest(-10, 35);\n    \n    // Fore mast\n    mast(-30, 25);\n    sail(-30, 25);\n    \n    // Mizzen mast\n    mast(20, 20);\n    sail(20, 20);\n}",
    "renders": true
  },
  {
    "toy": "jumbo",
    "openscad_code": "// Jumbo Toy Armchair - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm width x 90mm depth x 90mm height\n\n// Main body module\nmodule armchair() {\n    // Seat base - 2mm wall thickness\n    difference() {\n        // Outer seat box\n        cube([80, 70, 15], center=true);\n        // Inner hollow\n        translate([0, 0, 2])\n            cube([76, 66, 14], center=true);\n    }\n    \n    // Backrest\n    translate([0, -32.5, 7.5])\n    difference() {\n        // Outer backrest\n        cube([80, 10, 60], center=true);\n        // Inner hollow\n        translate([0, 0, 2])\n            cube([76, 6, 58], center=true);\n    }\n    \n    // Left armrest\n    translate([-42.5, 0, 15])\n    difference() {\n        // Outer armrest\n        cube([15, 65, 40], center=true);\n        // Inner hollow\n        translate([0, 0, 2])\n            cube([11, 61, 38], center=true);\n    }\n    \n    // Right armrest\n    translate([42.5, 0, 15])\n    difference() {\n        // Outer armrest\n        cube([15, 65, 40], center=true);\n        // Inner hollow\n        translate([0, 0, 2])\n            cube([11, 61, 38], center=true);\n    }\n    \n    // Legs - 4 legs with rounded edges\n    leg_positions = [[-35, -30, -7.5], [35, -30, -7.5], [-35, 30, -7.5], [35, 30, -7.5]];\n    for(pos = leg_positions) {\n        translate(pos)\n        cylinder(h=15, r=4, center=true, $fn=20);\n    }\n    \n    // Cushion on seat\n    translate([0, 0, 10])\n    difference() {\n        // Main cushion\n        cube([70, 60, 8], center=true);\n        // Rounded cushion top\n        translate([0, 0, 4])\n            scale([1, 1, 0.3])\n                sphere(r=35, center=true, $fn=50);\n    }\n    \n    // Backrest cushion\n    translate([0, -32.5, 22.5])\n    difference() {\n        // Main cushion\n        cube([70, 6, 30], center=true);\n        // Rounded cushion front\n        translate([0, 3, 0])\n            scale([1, 0.3, 1])\n                sphere(r=35, center=true, $fn=50);\n    }\n    \n    // Decorative buttons on cushions\n    button_positions = [[-20, 0, 15], [20, 0, 15], [-20, -32.5, 22.5], [20, -32.5, 22.5]];\n    for(pos = button_positions) {\n        translate(pos)\n            sphere(r=2, $fn=16);\n    }\n    \n    // Armrest caps - rounded tops\n    armrest_caps = [[-42.5, 0, 35], [42.5, 0, 35]];\n    for(pos = armrest_caps) {\n        translate(pos)\n        scale([1, 1.5, 1])\n            sphere(r=7.5, $fn=20);\n    }\n}\n\n// Create the armchair\narmchair();",
    "renders": true
  },
  {
    "toy": "skycrane",
    "openscad_code": "// Skycrane toy model - realistic style, medium complexity\n// Overall length: ~120mm (rotor tip to tail)\n// Main fuselage: ~80mm long, ~20mm diameter\n// Landing gear: ~30mm tall\n\n// Constants\n$fn = 36;\n\n// Main module\nmodule skycrane() {\n    // Main fuselage\n    rotate([0, 0, 0]) {\n        // Central body\n        translate([0, 0, 30])\n            cylinder(h=60, d1=18, d2=15);\n        \n        // Cockpit section\n        translate([0, 0, 90])\n            cylinder(h=15, d1=15, d2=12);\n        \n        // Cockpit windows\n        translate([0, 7, 95])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=8);\n        \n        // Tail boom\n        translate([0, 0, 0])\n            cylinder(h=30, d1=15, d2=8);\n        \n        // Tail fin\n        translate([-15, 0, 5])\n            rotate([0, 90, 0])\n            cube([10, 3, 20]);\n        \n        // Horizontal stabilizer\n        translate([-5, 0, 12])\n            rotate([90, 0, 0])\n            cube([25, 3, 8]);\n    }\n    \n    // Main rotor assembly\n    translate([0, 0, 105])\n        rotorAssembly();\n    \n    // Tail rotor\n    translate([-30, 0, 12])\n        rotate([0, 90, 0])\n        tailRotor();\n    \n    // Landing gear\n    landingGear();\n    \n    // Cargo hook mechanism\n    cargoHook();\n    \n    // Engine details\n    engineDetails();\n}\n\n// Main rotor module\nmodule rotorAssembly() {\n    // Rotor mast\n    cylinder(h=15, d=6);\n    \n    // Rotor head\n    translate([0, 0, 15])\n        sphere(d=10);\n    \n    // Main rotor blades (4 blades)\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, 15])\n                rotorBlade();\n    }\n    \n    // Blade supports\n    translate([0, 0, 15])\n        cylinder(h=2, d=20);\n}\n\n// Single rotor blade\nmodule rotorBlade() {\n    translate([35, 0, 0])\n        scale([1, 0.2, 0.05])\n            cube([35, 1, 1], center=true);\n    \n    // Blade tip\n    translate([70, 0, 0])\n        sphere(d=3);\n}\n\n// Tail rotor\nmodule tailRotor() {\n    // Tail rotor hub\n    cylinder(h=4, d=5);\n    \n    // Tail rotor blades (2 blades)\n    for(i = [0:1]) {\n        rotate([0, 0, i * 180])\n            translate([0, 7, 0])\n                cube([1, 12, 0.5], center=true);\n    }\n}\n\n// Landing gear\nmodule landingGear() {\n    // Left skid\n    translate([10, -12, 15])\n        landingSkid();\n    \n    // Right skid\n    translate([10, 12, 15])\n        landingSkid();\n    \n    // Support struts\n    for(x = [20, -5]) {\n        // Left struts\n        translate([x, -12, 25])\n            strut();\n        \n        // Right struts\n        translate([x, 12, 25])\n            strut();\n    }\n}\n\n// Landing skid\nmodule landingSkid() {\n    difference() {\n        // Main skid tube\n        rotate([90, 0, 0])\n            cylinder(h=50, d=3);\n        \n        // End caps\n        translate([0, 0, -2])\n            sphere(d=4);\n        translate([0, 0, 52])\n            sphere(d=4);\n    }\n}\n\n// Support strut\nmodule strut() {\n    cylinder(h=15, d=2);\n}\n\n// Cargo hook mechanism\nmodule cargoHook() {\n    // Hook assembly housing\n    translate([0, 0, 20])\n        cylinder(h=8, d=12);\n    \n    // Actual hook\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h=5, d=2);\n            translate([1, 0, -1])\n                cube([3, 2, 7]);\n        }\n    \n    // Cable guides\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([6, 0, 24])\n                cylinder(h=3, d=1);\n    }\n}\n\n// Engine details\nmodule engineDetails() {\n    // Engine housing\n    translate([5, 0, 75])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=15);\n    \n    // Exhaust pipes\n    translate([0, -8, 70])\n        rotate([0, -30, 0])\n            cylinder(h=15, d=2);\n    \n    translate([0, 8, 70])\n        rotate([0, -30, 0])\n            cylinder(h=15, d=2);\n}\n\n// Generate the model\nskycrane();",
    "renders": true
  },
  {
    "toy": "storm",
    "openscad_code": "// Storm cloud toy (realistic medium complexity)\n// Overall dimensions: 80mm x 80mm x 70mm\n\n$fn = 50;\n\nmodule cloud_base() {\n    // Main cloud body - 5 overlapping spheres\n    union() {\n        translate([0, 0, 35]) sphere(35);  // Center\n        translate([-25, -15, 30]) sphere(25);\n        translate([25, -15, 30]) sphere(25);\n        translate([-15, 20, 32]) sphere(28);\n        translate([15, 20, 32]) sphere(28);\n    }\n}\n\nmodule cloud_hollow() {\n    // Hollow interior for material saving\n    difference() {\n        cloud_base();\n        scale([0.85, 0.85, 0.85]) cloud_base();\n    }\n}\n\nmodule lightning_bolt() {\n    // Lightning bolt - zigzag shape\n    union() {\n        // Top segment\n        translate([0, 0, 15]) cube([3, 3, 20]);\n        translate([-5, -3, 10]) cube([8, 3, 3]);\n        \n        // Middle segment\n        translate([0, 0, 5]) cube([3, 3, 10]);\n        translate([5, -3, 0]) cube([8, 3, 3]);\n        \n        // Bottom segment\n        translate([0, 0, -5]) cube([3, 3, 10]);\n        translate([-5, -3, -10]) cube([8, 3, 3]);\n        \n        // Final point\n        translate([0, 0, -15]) cube([3, 3, 10]);\n    }\n}\n\nmodule raindrops() {\n    // Generate 8 raindrops around the cloud\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([20, 0, -15])\n        scale([1, 1, 1.5])\n        sphere(3);\n    }\n}\n\nmodule eyes() {\n    // Eyes for toy character\n    difference() {\n        // Left eye\n        translate([-12, 15, 40]) {\n            sphere(5);\n            translate([0, 0, 3]) sphere(3);\n        }\n        // Right eye\n        translate([12, 15, 40]) {\n            sphere(5);\n            translate([0, 0, 3]) sphere(3);\n        }\n    }\n}\n\nmodule eyebrows() {\n    // Angry eyebrows\n    union() {\n        // Left eyebrow\n        translate([-15, 25, 50])\n        rotate([0, 20, -30])\n        scale([8, 3, 2])\n        cube([1, 1, 1]);\n        \n        // Right eyebrow\n        translate([15, 25, 50])\n        rotate([0, 20, 30])\n        scale([8, 3, 2])\n        cube([1, 1, 1]);\n    }\n}\n\nmodule mouth() {\n    // Frowning mouth\n    difference() {\n        // Mouth base\n        translate([0, 10, 25])\n        scale([15, 8, 5])\n        cube([1, 1, 1]);\n        \n        // Cutout for frown\n        translate([0, 15, 28])\n        rotate([0, 0, 0])\n        scale([12, 5, 8])\n        sphere(5);\n    }\n}\n\nmodule support_base() {\n    // Flat base for stability\n    translate([0, 0, -25])\n    scale([1.2, 1.2, 0.5])\n    cylinder(r=35, h=5);\n}\n\n// Final assembly\nunion() {\n    // Main cloud structure\n    difference() {\n        cloud_hollow();\n        // Lightning bolt hole\n        translate([0, -10, 0])\n        lightning_bolt();\n    }\n    \n    // Lightning bolt\n    translate([0, -10, 0])\n    lightning_bolt();\n    \n    // Raindrops\n    raindrops();\n    \n    // Face details\n    eyes();\n    eyebrows();\n    mouth();\n    \n    // Support base\n    support_base();\n}",
    "renders": true
  },
  {
    "toy": "ram",
    "openscad_code": "// Ram toy - realistic style, medium complexity\n// Size: ~100mm long, 70mm tall, 50mm wide\n\n$fn=32;\n\nmodule ram_body() {\n    // Main body hull - rounded shape\n    hull() {\n        translate([-15,0,15]) sphere(15);\n        translate([15,0,15]) sphere(15);\n        translate([0,0,35]) sphere(12);\n    }\n    \n    // Belly detail\n    translate([0,0,8]) scale([1.2,1,0.8]) sphere(18);\n}\n\nmodule ram_head() {\n    // Head base\n    translate([-25,0,45]) rotate([0,10,0]) {\n        // Main head shape\n        difference() {\n            hull() {\n                translate([0,0,0]) sphere(12);\n                translate([0,0,15]) sphere(8);\n            }\n            // Eye sockets\n            translate([5,8,12]) sphere(5);\n            translate([5,-8,12]) sphere(5);\n        }\n        \n        // Eyes\n        translate([7,6,12]) sphere(3);\n        translate([7,-6,12]) sphere(3);\n        \n        // Nose\n        translate([10,0,8]) sphere(4);\n    }\n}\n\nmodule ram_horns() {\n    // Left horn\n    translate([-20,12,55]) rotate([0,-30,45]) {\n        difference() {\n            cylinder(h=25, r1=6, r2=2);\n            translate([0,0,12]) rotate([0,0,0]) cylinder(h=15, r1=4, r2=1);\n        }\n    }\n    \n    // Right horn\n    translate([-20,-12,55]) rotate([0,-30,-45]) {\n        difference() {\n            cylinder(h=25, r1=6, r2=2);\n            translate([0,0,12]) rotate([0,0,0]) cylinder(h=15, r1=4, r2=1);\n        }\n    }\n}\n\nmodule ram_legs() {\n    // Front legs\n    for(side=[-1,1]) {\n        translate([10,side*15,0]) {\n            // Upper leg\n            translate([0,0,15]) rotate([30,0,0]) \n                cylinder(h=20, r1=6, r2=5);\n            // Lower leg\n            translate([8,0,8]) rotate([90,0,0]) \n                cylinder(h=15, r1=5, r2=4);\n            // Hoof\n            translate([10,0,2]) rotate([90,0,0]) \n                cylinder(h=4, r1=4, r2=3);\n        }\n    }\n    \n    // Back legs\n    for(side=[-1,1]) {\n        translate([-15,side*12,0]) {\n            // Upper leg\n            translate([0,0,15]) rotate([-30,0,0]) \n                cylinder(h=20, r1=6, r2=5);\n            // Lower leg\n            translate([-8,0,8]) rotate([90,0,0]) \n                cylinder(h=15, r1=5, r2=4);\n            // Hoof\n            translate([-10,0,2]) rotate([90,0,0]) \n                cylinder(h=4, r1=4, r2=3);\n        }\n    }\n}\n\nmodule ram_tail() {\n    // Tail base\n    translate([-25,0,30]) rotate([0,30,0]) {\n        // Tail tuft\n        hull() {\n            translate([0,0,0]) sphere(5);\n            translate([0,0,-10]) sphere(7);\n        }\n    }\n}\n\nmodule ram_ears() {\n    // Left ear\n    translate([-20,10,50]) rotate([0,-20,30]) {\n        difference() {\n            cylinder(h=10, r1=5, r2=3);\n            translate([0,0,5]) rotate([0,0,0]) cylinder(h=8, r1=2.5, r2=1.5);\n        }\n    }\n    \n    // Right ear\n    translate([-20,-10,50]) rotate([0,-20,-30]) {\n        difference() {\n            cylinder(h=10, r1=5, r2=3);\n            translate([0,0,5]) rotate([0,0,0]) cylinder(h=8, r1=2.5, r2=1.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    ram_body();\n    ram_head();\n    ram_horns();\n    ram_legs();\n    ram_tail();\n    ram_ears();\n}",
    "renders": true
  },
  {
    "toy": "dinghy",
    "openscad_code": "// Toy Dinghy - medium complexity realistic style\n// Approx 120 mm long, 60 mm wide, 30 mm high\n\n// Overall dimensions\nhull_length = 120;\nhull_width = 60;\nhull_height = 25;\n\n// Wall thickness\nwall = 2;\n\n// Hull module\nmodule hull() {\n    // Main hull body - tapered\n    hull_profile = hull_height * 0.8;\n    translate([0, 0, hull_height/2])\n    scale([1, 0.7, 0.4])\n    sphere(d = hull_width, $fn=64);\n    \n    // Flat bottom\n    translate([0, 0, wall/2])\n    cube([hull_length, hull_width, wall], center=true);\n    \n    // Bow point\n    translate([hull_length/2 - 5, 0, 5])\n    rotate([90, 0, 0])\n    cylinder(h=10, d1=20, d2=0, $fn=32);\n}\n\n// Seats module\nmodule seats() {\n    // Front seat\n    translate([-hull_length/4, 0, wall + 2])\n    cube([hull_length/3, hull_width*0.7, wall], center=true);\n    \n    // Rear seat\n    translate([hull_length/4, 0, wall + 2])\n    cube([hull_length/3, hull_width*0.7, wall], center=true);\n}\n\n// Oarlocks module\nmodule oarlocks() {\n    for(side = [-1, 1]) {\n        // Left and right oarlocks\n        translate([0, side * (hull_width/2 - wall), wall + 8])\n        rotate([0, 90, 0])\n        cylinder(h=wall*2, d=wall*3, center=true);\n        \n        // Reinforcement block\n        translate([0, side * (hull_width/2 - wall*2), wall + 4])\n        cube([wall*3, wall*3, wall*4], center=true);\n    }\n}\n\n// Ribs for structure\nmodule ribs() {\n    for(pos = [-hull_length/3, 0, hull_length/3]) {\n        translate([pos, 0, wall])\n        rotate([0, 90, 0])\n        cylinder(h=hull_width*0.9, d=wall*1.5, center=true);\n    }\n}\n\n// Drain plug detail\nmodule drain_plug() {\n    translate([-hull_length/2 + 10, 0, wall])\n    rotate([90, 0, 0])\n    cylinder(h=wall*2, d=wall*3, $fn=16);\n    \n    // Plug handle\n    translate([-hull_length/2 + 10, 0, wall + 2])\n    cube([wall*2, wall*0.5, wall], center=true);\n}\n\n// Main assembly\nunion() {\n    // Hull structure\n    difference() {\n        hull();\n        // Hollow out interior\n        translate([0, 0, wall])\n        scale([0.85, 0.65, 0.3])\n        sphere(d=hull_width, $fn=64);\n    }\n    \n    // Internal components\n    seats();\n    oarlocks();\n    ribs();\n    drain_plug();\n    \n    // Toy handles on bow and stern\n    translate([hull_length/2 - 5, 0, wall + 10])\n    rotate([90, 0, 0])\n    cylinder(h=15, d=wall*2, center=true);\n    \n    translate([-hull_length/2 + 5, 0, wall + 10])\n    rotate([90, 0, 0])\n    cylinder(h=15, d=wall*2, center=true);\n}",
    "renders": true
  },
  {
    "toy": "top",
    "openscad_code": "// Wooden Toy Top with Handle and Decorative Rings\n// Overall height: 110 mm, max diameter: 60 mm\n// Designed for 3D printing with no overhangs >45° and 2 mm wall thickness\n\nmodule handle() {\n    // Central handle shaft\n    rotate([0, 0, 0]) {\n        cylinder(h = 25, r = 4, $fn = 32); // grip section\n    }\n    // Tapered transition\n    translate([0, 0, 25])\n        cylinder(h = 8, r1 = 4, r2 = 6, $fn = 32);\n}\n\nmodule stem() {\n    // Main stem connecting handle to body\n    translate([0, 0, 33])\n        cylinder(h = 20, r = 6, $fn = 32);\n}\n\nmodule body() {\n    // Main spinning body - inverted funnel shape\n    difference() {\n        // Outer body\n        translate([0, 0, 53])\n            cylinder(h = 25, r1 = 25, r2 = 30, $fn = 64);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 53])\n            cylinder(h = 25, r1 = 23, r2 = 28, $fn = 64);\n    }\n    \n    // Decorative rings around body\n    for(i = [0:2]) {\n        translate([0, 0, 55 + i * 8])\n            difference() {\n                cylinder(h = 2, r = 30.5, $fn = 64);\n                cylinder(h = 2, r = 27, $fn = 64);\n            }\n    }\n}\n\nmodule tip() {\n    // Conical spinning tip\n    translate([0, 0, 78])\n        cylinder(h = 15, r1 = 0.5, r2 = 5, $fn = 32);\n    \n    // Reinforced base of tip\n    translate([0, 0, 78])\n        cylinder(h = 5, r = 5, $fn = 32);\n}\n\nmodule grip_texture() {\n    // Cross-hatch texture on handle for better grip\n    for(i = [0:17]) {\n        rotate([0, 0, i * 20])\n            translate([0, 4, 12])\n                cube([0.5, 0.5, 14], center = true);\n        rotate([0, 0, i * 20 + 10])\n            translate([4, 0, 12])\n                cube([0.5, 0.5, 14], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    grip_texture();\n    stem();\n    body();\n    tip();\n}",
    "renders": true
  },
  {
    "toy": "jacks",
    "openscad_code": "// Jacks toy - realistic style, medium complexity\n// Overall size ~80mm diameter\n\n// Parameters\n$fn = 36;\nrod_radius = 4;      // 8mm diameter rods\nrod_length = 40;     // 40mm long rods\nball_radius = 8;     // 16mm diameter balls\nwall_thickness = 2;  // 2mm wall thickness for 3D printing\ncenter_ball = true;\n\n// Main module for one jack\nmodule jack() {\n    // Central ball\n    sphere(r=ball_radius);\n    \n    // Create 6 rods in 3D space\n    for (i = [0:5]) {\n        // Calculate positions for 3D cross\n        angle = i * 60;\n        x = cos(angle) * rod_length/2;\n        y = sin(angle) * rod_length/2;\n        z = (i % 2 == 0) ? rod_length/2 : -rod_length/2;\n        \n        // Rod with end ball\n        translate([x, y, z]) {\n            rotate([0, 0, angle])\n            rotate([(i % 2 == 0) ? 45 : -45, 0, 0])\n            cylinder(h=rod_length, r=rod_radius, center=true);\n            \n            // End ball\n            translate([0, 0, rod_length/2])\n            sphere(r=ball_radius);\n        }\n    }\n    \n    // Additional connecting structure for realism\n    for (i = [0:5]) {\n        angle = i * 60;\n        x = cos(angle) * (rod_length/2 - ball_radius);\n        y = sin(angle) * (rod_length/2 - ball_radius);\n        z = (i % 2 == 0) ? (rod_length/2 - ball_radius) : -(rod_length/2 - ball_radius);\n        \n        // Reinforcement struts\n        translate([x/2, y/2, z/2])\n        rotate([0, 0, angle])\n        rotate([(i % 2 == 0) ? 45 : -45, 0, 0])\n        scale([0.6, 0.6, 1])\n        cylinder(h=rod_length/2, r=rod_radius*0.8, center=true);\n    }\n    \n    // Central reinforcement ring\n    difference() {\n        cylinder(h=wall_thickness*2, r=rod_radius*1.5, center=true);\n        cylinder(h=wall_thickness*2.2, r=rod_radius*0.8, center=true);\n    }\n    \n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=wall_thickness*2, r=rod_radius*1.5, center=true);\n        cylinder(h=wall_thickness*2.2, r=rod_radius*0.8, center=true);\n    }\n    \n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=wall_thickness*2, r=rod_radius*1.5, center=true);\n        cylinder(h=wall_thickness*2.2, r=rod_radius*0.8, center=true);\n    }\n}\n\n// Generate the complete jack\njack();",
    "renders": true
  },
  {
    "toy": "marbles",
    "openscad_code": "// Realistic Toy Marbles Set with Storage Box\n// Medium complexity design with proper proportions and toy-like features\n\n// Main parameters\nmarble_diameter = 14;\nbox_length = 120;\nbox_width = 80;\nbox_height = 25;\nwall_thickness = 2;\nleg_height = 8;\n\n// Marble module with realistic toy appearance\nmodule marble(d=marble_diameter, color_name=\"red\") {\n    // Main sphere\n    sphere(d=d);\n    \n    // Add small swirl detail inside\n    translate([0, 0, -d/4]) {\n        scale([0.3, 0.3, 0.8]) {\n            rotate([0, 90, 45]) {\n                cylinder(h=d*0.9, d1=d*0.15, d2=d*0.05, $fn=6);\n            }\n        }\n    }\n}\n\n// Storage box for marbles with toy-like proportions\nmodule marble_box() {\n    difference() {\n        // Outer shell\n        cube([box_length, box_width, box_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness]) {\n            cube([box_length-wall_thickness*2, box_width-wall_thickness*2, box_height-wall_thickness]);\n        }\n        \n        // Rounded corners for toy safety\n        for(x=[wall_thickness*2, box_length-wall_thickness*2]) {\n            for(y=[wall_thickness*2, box_width-wall_thickness*2]) {\n                translate([x, y, wall_thickness]) {\n                    cylinder(h=box_height-wall_thickness*2, d=wall_thickness*4, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Add toy-style legs\n    for(x=[10, box_length-10]) {\n        for(y=[10, box_width-10]) {\n            translate([x, y, -leg_height]) {\n                cylinder(h=leg_height, d=6, $fn=12);\n            }\n        }\n    }\n    \n    // Decorative rim around top edge\n    translate([0, 0, box_height-wall_thickness]) {\n        difference() {\n            cube([box_length, box_width, wall_thickness]);\n            translate([wall_thickness, wall_thickness, -0.1]) {\n                cube([box_length-wall_thickness*2, box_width-wall_thickness*2, wall_thickness+0.2]);\n            }\n        }\n    }\n}\n\n// Create realistic toy marbles with slight variations\nmodule create_marbles() {\n    // Small marbles (standard size)\n    for(i=[0:4]) {\n        translate([15 + i*20, box_width/2 - 15, box_height+marble_diameter/2+5]) {\n            marble(marble_diameter - (i%2)*2);\n        }\n    }\n    \n    // Larger shooter marble\n    translate([box_length/2, box_width/2 - 30, box_height+marble_diameter/2+5]) {\n        marble(marble_diameter*1.3);\n    }\n    \n    // Additional marbles in storage position\n    for(row=[0:1]) {\n        for(col=[0:2]) {\n            translate([20 + col*25, 20 + row*25, box_height-marble_diameter/2-1]) {\n                marble(marble_diameter);\n            }\n        }\n    }\n}\n\n// Assembly\nmarble_box();\ncreate_marbles();",
    "renders": true
  },
  {
    "toy": "doll",
    "openscad_code": "// Doll Toy - Realistic Style\n// Overall height: 100mm\n$fn = 32;\n\n// Main module\nmodule doll() {\n    // Head\n    translate([0, 0, 85])\n        head();\n    \n    // Neck\n    translate([0, 0, 78])\n        cylinder(h = 7, r = 5.5);\n    \n    // Torso\n    translate([0, 0, 42])\n        torso();\n    \n    // Arms\n    translate([-10, 0, 70])\n        rotate([15, 0, 0])\n        arm();\n    translate([10, 0, 70])\n        rotate([15, 0, 180])\n        arm();\n    \n    // Legs\n    translate([-5, 0, 40])\n        leg();\n    translate([5, 0, 40])\n        leg();\n}\n\n// Head module\nmodule head() {\n    difference() {\n        // Head sphere\n        sphere(r = 12);\n        \n        // Eye sockets\n        translate([-4, -10, 3])\n            sphere(r = 2.2);\n        translate([4, -10, 3])\n            sphere(r = 2.2);\n        \n        // Mouth\n        translate([0, -11, -2])\n            sphere(r = 1.5);\n    }\n    \n    // Eyes\n    translate([-4, -11, 3])\n        sphere(r = 1.8);\n    translate([4, -11, 3])\n        sphere(r = 1.8);\n    \n    // Nose\n    translate([0, -9, 4])\n        sphere(r = 1.2);\n    \n    // Hair\n    translate([0, 0, 12])\n        scale([1.1, 1.1, 0.8])\n        sphere(r = 12);\n}\n\n// Torso module\nmodule torso() {\n    union() {\n        // Upper torso\n        scale([1, 0.7, 1])\n        cylinder(h = 20, r1 = 12, r2 = 10);\n        \n        // Lower torso\n        translate([0, 0, -18])\n            scale([1, 0.6, 1])\n            cylinder(h = 18, r1 = 10, r2 = 8);\n        \n        // Dress detail\n        translate([0, 0, -8])\n            cylinder(h = 2, r = 11.5);\n    }\n}\n\n// Arm module\nmodule arm() {\n    union() {\n        // Upper arm\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 20, r = 3.5);\n        \n        // Lower arm\n        translate([0, 0, -20])\n            rotate([90, 0, 0])\n            cylinder(h = 18, r = 3);\n        \n        // Hand\n        translate([0, 0, -38])\n            sphere(r = 4);\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 25, r = 4);\n        \n        // Lower leg\n        translate([0, 0, -25])\n            rotate([90, 0, 0])\n            cylinder(h = 22, r = 3.5);\n        \n        // Foot\n        translate([0, 0, -47])\n            scale([1.3, 1.8, 0.8])\n            sphere(r = 5);\n    }\n}\n\n// Create the doll\ndoll();",
    "renders": true
  },
  {
    "toy": "train",
    "openscad_code": "// Toy Train - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm long, ~35mm wide, ~50mm high\n\nmodule wheel() {\n    // Single wheel with axle hole\n    difference() {\n        cylinder(h=6, d=24, $fn=32);\n        translate([0,0,-1])\n            cylinder(h=8, d=8, $fn=32);\n    }\n}\n\nmodule bogie() {\n    // Train bogie (wheel assembly)\n    difference() {\n        // Main bogie frame\n        translate([0,0,3])\n            cube([40,20,6], center=true);\n        \n        // Wheel cutouts\n        translate([-15,0,-1])\n            cube([30,22,8], center=true);\n    }\n    \n    // Wheels\n    for(x=[-12, 12])\n        translate([x, 0, 0])\n            wheel();\n}\n\nmodule chimney() {\n    // Locomotive chimney\n    translate([0,0,12])\n        cylinder(h=15, d1=12, d2=10, $fn=24);\n}\n\nmodule cabin() {\n    // Driver's cabin\n    difference() {\n        // Main cabin\n        translate([0,0,20])\n            cube([30,30,25], center=true);\n        \n        // Cabin roof angle\n        translate([0,0,32.5])\n            rotate([0,45,0])\n                cube([30,30,30], center=true);\n        \n        // Cabin door\n        translate([-13,0,20])\n            cube([2,15,20], center=true);\n    }\n}\n\nmodule boiler() {\n    // Main boiler section\n    translate([0,0,15])\n        cylinder(h=60, d=28, $fn=32);\n    \n    // Front dome\n    translate([0,0,30])\n        sphere(d=20, $fn=32);\n}\n\nmodule tender() {\n    // Coal tender car\n    difference() {\n        // Main tender body\n        translate([0,0,15])\n            cube([40,28,30], center=true);\n        \n        // Coal space\n        translate([0,0,20])\n            cube([36,24,25], center=true);\n        \n        // Connector hole\n        translate([-21,0,10])\n            rotate([0,90,0])\n                cylinder(h=5, d=8, $fn=16);\n    }\n}\n\nmodule passenger_car() {\n    // Passenger carriage\n    difference() {\n        // Main body\n        translate([0,0,20])\n            cube([50,30,40], center=true);\n        \n        // Windows\n        for(x=[-15, -5, 5, 15])\n            translate([x, 0, 25])\n                cube([8,2,15], center=true);\n        \n        // Door\n        translate([-24,0,20])\n            cube([2,20,30], center=true);\n    }\n    \n    // Roof\n    translate([0,0,40])\n        cube([50,30,4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Locomotive\n    translate([-40,0,0])\n        union() {\n            boiler();\n            translate([25,0,0])\n                cabin();\n            translate([-25,0,0])\n                chimney();\n            translate([0,0,-3])\n                bogie();\n        }\n    \n    // Tender\n    translate([20,0,0])\n        union() {\n            tender();\n            translate([0,0,-3])\n                bogie();\n        }\n    \n    // Passenger car\n    translate([70,0,0])\n        union() {\n            passenger_car();\n            translate([0,0,-3])\n                bogie();\n        }\n}\n\n// Coupling hooks between cars\ntranslate([0,0,8])\n    rotate([90,0,0])\n        cylinder(h=3, d=6, $fn=16);\ntranslate([40,0,8])\n    rotate([90,0,0])\n        cylinder(h=3, d=6, $fn=16);",
    "renders": true
  },
  {
    "toy": "boat",
    "openscad_code": "// Toy Boat - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm long x 50mm wide x 35mm tall\n\nhull_thickness = 2;\ndeck_height = 8;\nhull_length = 120;\nhull_width = 50;\nhull_height = 25;\n\n// Main Hull\nmodule hull() {\n    // Bottom hull shape\n    difference() {\n        hull_base();\n        \n        // Hollow out the hull\n        translate([0, 0, hull_thickness])\n            scale([0.9, 0.9, 0.8])\n            hull_base();\n    }\n}\n\nmodule hull_base() {\n    // Create smooth hull shape with cubes\n    union() {\n        // Front tapered section\n        for (i = [0:5]) {\n            translate([i * 10 - 60, 0, 0])\n                scale([1 - i * 0.15, 1 - i * 0.1, 1])\n                cube([20, hull_width - i * 4, hull_height - i * 3], center = true);\n        }\n        \n        // Rear section\n        translate([30, 0, 0])\n            cube([60, hull_width, hull_height], center = true);\n            \n        // Transom (flat back)\n        translate([59, 0, 0])\n            cube([hull_thickness * 2, hull_width, hull_height], center = true);\n    }\n}\n\n// Deck with seating area\nmodule deck() {\n    translate([0, 0, hull_height/2 + deck_height/2])\n        difference() {\n            // Main deck\n            cube([hull_length - 20, hull_width - hull_thickness*2, deck_height], center = true);\n            \n            // Cockpit opening\n            translate([10, 0, -deck_height/2 + hull_thickness])\n                cube([hull_length - 60, hull_width - 20, deck_height], center = true);\n        }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([0, 0, hull_height + deck_height])\n        difference() {\n            // Main cabin\n            cube([40, 35, 20], center = true);\n            \n            // Door opening\n            translate([-15, 0, -5])\n                cube([10, 15, 15], center = true);\n                \n            // Windows\n            for (x = [-10, 10]) {\n                translate([x, 15, 5])\n                    cube([8, hull_thickness, 8], center = true);\n                translate([x, -15, 5])\n                    cube([8, hull_thickness, 8], center = true);\n            }\n        }\n}\n\n// Cabin roof\nmodule cabin_roof() {\n    translate([0, 0, hull_height + deck_height + 20])\n        difference() {\n            // Main roof\n            cube([45, 40, 3], center = true);\n            \n            // Rounded edges\n            translate([0, 0, 1.5])\n                minkowski() {\n                    cube([41, 36, 0.1], center = true);\n                    cylinder(h = 0.1, r = 2, $fn = 16);\n                }\n        }\n}\n\n// Seating benches\nmodule benches() {\n    // Left bench\n    translate([-20, -15, hull_height + deck_height/2])\n        cube([30, 8, 6], center = true);\n    \n    // Right bench\n    translate([-20, 15, hull_height + deck_height/2])\n        cube([30, 8, 6], center = true);\n        \n    // Front bench\n    translate([20, 0, hull_height + deck_height/2])\n        cube([20, 8, 6], center = true);\n}\n\n// Steering wheel\nmodule steering_wheel() {\n    translate([25, 0, hull_height + deck_height + 12])\n        union() {\n            // Wheel base\n            cylinder(h = 8, r = 3, $fn = 16);\n            \n            // Wheel\n            translate([0, 0, 8])\n                difference() {\n                    cylinder(h = 2, r = 8, $fn = 32);\n                    cylinder(h = 3, r = 5, $fn = 32);\n                }\n                \n            // Spokes\n            for (i = [0:45:315]) {\n                rotate([0, 0, i])\n                    translate([6, 0, 9])\n                        cube([12, 1, 1], center = true);\n            }\n        }\n}\n\n// Railings around deck\nmodule railings() {\n    // Left railing\n    for (x = [-40:20:40]) {\n        translate([x, -hull_width/2 + hull_thickness, hull_height + deck_height/2 + 5])\n            cylinder(h = 10, r = 1.5, $fn = 8);\n    }\n    \n    // Right railing\n    for (x = [-40:20:40]) {\n        translate([x, hull_width/2 - hull_thickness, hull_height + deck_height/2 + 5])\n            cylinder(h = 10, r = 1.5, $fn = 8);\n    }\n    \n    // Top rails\n    translate([0, -hull_width/2 + hull_thickness, hull_height + deck_height/2 + 10])\n        cube([hull_length - 20, 3, 3], center = true);\n    translate([0, hull_width/2 - hull_thickness, hull_height + deck_height/2 + 10])\n        cube([hull_length - 20, 3, 3], center = true);\n}\n\n// Anchor\nmodule anchor() {\n    translate([55, 0, hull_height - 5])\n        rotate([90, 0, 0])\n            union() {\n                // Shank\n                cylinder(h = 15, r = 2, $fn = 8);\n                \n                // Arms\n                translate([0, 0, 15])\n                    rotate([90, 0, 0])\n                        union() {\n                            cube([20, 2, 2], center = true);\n                            translate([8, 0, 0])\n                                rotate([0, 90, 0])\n                                    cylinder(h = 2, r = 8, $fn = 16);\n                            translate([-8, 0, 0])\n                                rotate([0, 90, 0])\n                                    cylinder(h = 2, r = 8, $fn = 16);\n                        }\n            }\n}\n\n// Assemble the boat\nunion() {\n    hull();\n    deck();\n    cabin();\n    cabin_roof();\n    benches();\n    steering_wheel();\n    railings();\n    anchor();\n}",
    "renders": true
  },
  {
    "toy": "car",
    "openscad_code": "// Toy Car - Realistic Style, Medium Complexity\n// Dimensions: 120mm length x 55mm width x 45mm height\n\n// Wheel module for all 4 wheels\nmodule wheel() {\n    difference() {\n        // Main tire\n        cylinder(h=10, d=22, $fn=32);\n        // Rim cavity\n        translate([0, 0, 2])\n            cylinder(h=6, d=16, $fn=32);\n        // Center hole for axle\n        translate([0, 0, -1])\n            cylinder(h=12, d=4, $fn=16);\n    }\n}\n\n// Wheel assembly including hubcap\nmodule wheel_assembly() {\n    union() {\n        // Tire\n        wheel();\n        // Hubcap\n        translate([0, 0, 10])\n            cylinder(h=2, d=18, $fn=32);\n    }\n}\n\n// Main car body\nmodule car_body() {\n    difference() {\n        // Main body block\n        translate([-60, -27, 10])\n            cube([120, 54, 20]);\n        \n        // Wheel arches (front left)\n        translate([-45, -30, 10])\n            rotate([0, 0, 25])\n            cube([20, 25, 20]);\n        \n        // Wheel arches (front right)\n        translate([-45, 30, 10])\n            rotate([0, 0, -25])\n            cube([20, 25, 20]);\n        \n        // Wheel arches (rear left)\n        translate([45, -30, 10])\n            rotate([0, 0, -25])\n            cube([20, 25, 20]);\n        \n        // Wheel arches (rear right)\n        translate([45, 30, 10])\n            rotate([0, 0, 25])\n            cube([20, 25, 20]);\n    }\n}\n\n// Car cabin/roof\nmodule car_cabin() {\n    difference() {\n        // Main cabin\n        translate([-50, -25, 30])\n            cube([100, 50, 15]);\n        \n        // Windshield slope\n        translate([-50, -25, 30])\n            cube([35, 50, 15]);\n        \n        // Rear window slope\n        translate([15, -25, 30])\n            cube([35, 50, 15]);\n        \n        // Side windows left\n        translate([-30, -25, 32])\n            cube([60, 2, 11]);\n        \n        // Side windows right\n        translate([-30, 23, 32])\n            cube([60, 2, 11]);\n    }\n}\n\n// Front bumper\nmodule front_bumper() {\n    translate([-60, -20, 10])\n        cube([5, 40, 10]);\n}\n\n// Rear bumper\nmodule rear_bumper() {\n    translate([55, -20, 10])\n        cube([5, 40, 10]);\n}\n\n// Headlights\nmodule headlights() {\n    // Left headlight\n    translate([-60, -15, 18])\n        sphere(d=8);\n    \n    // Right headlight\n    translate([-60, 15, 18])\n        sphere(d=8);\n}\n\n// Taillights\nmodule taillights() {\n    // Left taillight\n    translate([60, -15, 18])\n        sphere(d=8);\n    \n    // Right taillight\n    translate([60, 15, 18])\n        sphere(d=8);\n}\n\n// Assemble the car\nunion() {\n    // Main body components\n    car_body();\n    car_cabin();\n    front_bumper();\n    rear_bumper();\n    headlights();\n    taillights();\n    \n    // Wheels - front left\n    translate([-45, -30, 0])\n        rotate([90, 0, 0])\n        wheel_assembly();\n    \n    // Wheels - front right\n    translate([-45, 30, 0])\n        rotate([90, 0, 0])\n        wheel_assembly();\n    \n    // Wheels - rear left\n    translate([45, -30, 0])\n        rotate([90, 0, 0])\n        wheel_assembly();\n    \n    // Wheels - rear right\n    translate([45, 30, 0])\n        rotate([90, 0, 0])\n        wheel_assembly();\n}\n\n// Roof details (sunroof)\ntranslate([-20, -12, 45])\n    cube([40, 24, 1]);",
    "renders": true
  },
  {
    "toy": "rockinghorse",
    "openscad_code": "// Rocking Horse Toy - Realistic Style, Medium Complexity\n// Dimensions: ~120mm length x ~60mm height x ~40mm width\n\n// Rockers - curved base\nmodule rockers() {\n    // Left rocker\n    translate([-35, 0, 0]) {\n        difference() {\n            // Main rocker curve\n            rotate([0, 90, 0])\n                cylinder(h=70, r1=35, r2=35, $fn=50);\n            \n            // Hollow out bottom\n            translate([0, 0, -5])\n                rotate([0, 90, 0])\n                    cylinder(h=80, r1=32, r2=32, $fn=50);\n            \n            // Flatten bottom for stability\n            translate([0, 0, -32])\n                cube([100, 70, 30], center=true);\n        }\n    }\n    \n    // Right rocker - mirror of left\n    mirror([1, 0, 0]) rockers();\n}\n\n// Horse body\nmodule horse_body() {\n    // Main body\n    translate([0, 0, 35]) {\n        scale([1, 0.6, 1])\n            sphere(r=25, $fn=30);\n    }\n    \n    // Neck\n    translate([0, 20, 45]) {\n        rotate([0, 0, -15])\n            cylinder(h=30, r1=10, r2=7, $fn=20);\n    }\n    \n    // Head\n    translate([5, 35, 52]) {\n        sphere(r=12, $fn=20);\n    }\n    \n    // Snout\n    translate([10, 42, 50]) {\n        scale([1.5, 1, 0.8])\n            sphere(r=8, $fn=15);\n    }\n    \n    // Ears\n    for(x = [-4, 4]) {\n        translate([x, 35, 62]) {\n            rotate([x * 5, 0, 0])\n                cylinder(h=10, r1=3, r2=2, $fn=8);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    // Front legs\n    for(x = [-15, 15]) {\n        translate([x, 10, 25]) {\n            cylinder(h=25, r=4, $fn=12);\n        }\n    }\n    \n    // Back legs\n    for(x = [-20, 20]) {\n        translate([x, -15, 25]) {\n            cylinder(h=25, r=4.5, $fn=12);\n        }\n    }\n}\n\n// Seat and support structure\nmodule seat() {\n    // Saddle\n    translate([0, 0, 50]) {\n        // Seat base\n        scale([1.2, 1, 0.2])\n            sphere(r=20, $fn=30);\n        \n        // Seat back\n        translate([0, -15, 5]) {\n            rotate([15, 0, 0])\n                cube([30, 5, 15], center=true);\n        }\n        \n        // Seat front\n        translate([0, 15, 2]) {\n            rotate([-30, 0, 0])\n                cube([30, 5, 8], center=true);\n        }\n    }\n    \n    // Support beams\n    for(x = [-25, 25]) {\n        translate([x, 0, 30]) {\n            cube([4, 4, 20], center=true);\n        }\n    }\n}\n\n// Mane and tail details\nmodule details() {\n    // Mane\n    for(i = [0:5]) {\n        translate([sin(i*30)*3, 25 + i*2, 58 - i*3]) {\n            rotate([0, 90, 0])\n                cylinder(h=2, r=1.5, $fn=6);\n        }\n    }\n    \n    // Tail\n    translate([0, -35, 30]) {\n        for(i = [0:4]) {\n            rotate([0, 0, i*15 - 30])\n                translate([0, -5 - i*2, 0])\n                    cylinder(h=3, r=2, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    rockers();\n    \n    translate([0, 0, 0]) {\n        horse_body();\n        legs();\n        seat();\n        details();\n    }\n}",
    "renders": true
  },
  {
    "toy": "teddy",
    "openscad_code": "// Teddy Bear Toy - Realistic Medium Complexity\n// Overall height ~100mm, suitable for 3D printing\n\nmodule teddy_bear() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 25]) {\n            scale([1.2, 1, 1.2]) \n            sphere(r=20, $fn=32);\n        }\n        \n        // Head\n        translate([0, 0, 55]) {\n            sphere(r=18, $fn=32);\n        }\n        \n        // Snout\n        translate([0, 14, 50]) {\n            scale([0.7, 0.8, 0.7])\n            sphere(r=10, $fn=24);\n        }\n        \n        // Nose\n        translate([0, 19, 55]) {\n            sphere(r=3, $fn=16);\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 18, 0, 45]) {\n                rotate([20, 0, side * 30])\n                scale([0.4, 0.4, 1])\n                sphere(r=12, $fn=16);\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 8, -5, 10]) {\n                rotate([10, 0, 0])\n                scale([0.6, 0.6, 1.2])\n                sphere(r=12, $fn=16);\n            }\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 68]) {\n                scale([0.8, 0.8, 0.5])\n                sphere(r=8, $fn=16);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 7, 12, 60]) {\n                cylinder(h=2, r1=3, r2=2, $fn=12);\n            }\n        }\n        \n        // Mouth\n        translate([0, 15, 48]) {\n            scale([0.3, 0.15, 0.3])\n            sphere(r=6, $fn=16);\n        }\n        \n        // Stitched seam detail on belly\n        translate([0, 0, 23]) {\n            for(i = [-2:1:2]) {\n                translate([0, i * 5, 0])\n                sphere(r=1.5, $fn=8);\n            }\n        }\n        \n        // Paw pads\n        for(side = [-1, 1]) {\n            // Front paws\n            translate([side * 22, 2, 35]) {\n                rotate([0, 90, 0])\n                cylinder(h=2, r=6, $fn=16);\n            }\n            // Feet pads\n            translate([side * 8, -8, 5]) {\n                rotate([90, 0, 0])\n                cylinder(h=2, r=8, $fn=16);\n            }\n        }\n        \n        // Tail\n        translate([0, -15, 20]) {\n            scale([0.8, 0.8, 0.8])\n            sphere(r=8, $fn=16);\n        }\n    }\n}\n\n// Hollow out the bear for 3D printing (2mm wall thickness)\ndifference() {\n    teddy_bear();\n    \n    scale([0.9, 0.9, 0.9])\n    teddy_bear();\n}\n\n// Add small drainage hole in bottom\ntranslate([0, 0, 0])\nrotate([180, 0, 0])\ncylinder(h=1, r1=2, r2=3, $fn=12);",
    "renders": true
  },
  {
    "toy": "puzzle",
    "openscad_code": "// Puzzle Toy: Interlocking Cube Maze (Medium Complexity)\n// A 4x4x4 sliding cube puzzle with interlocking tracks\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\ncube_size = 80;\nwall_thickness = 2;\ngap = 0.4;\n\n// Individual piece dimensions\npiece_size = (cube_size - 5*wall_thickness)/4;\n\n// Puzzle frame\nmodule frame() {\n    difference() {\n        // Outer cube\n        cube([cube_size, cube_size, cube_size], center=true);\n        \n        // Hollow center\n        translate([0,0,wall_thickness/2])\n            cube([cube_size-wall_thickness*2, cube_size-wall_thickness*2, cube_size-wall_thickness], center=true);\n        \n        // Front opening\n        translate([0,0,-cube_size/2+wall_thickness/2])\n            cube([cube_size-wall_thickness*2, cube_size-wall_thickness*2, wall_thickness], center=true);\n    }\n}\n\n// Individual puzzle piece\nmodule puzzle_piece(x_track, y_track) {\n    // Main cube body\n    difference() {\n        cube([piece_size-gap, piece_size-gap, piece_size-gap], center=true);\n        \n        // X-direction track (horizontal)\n        if (x_track != 0) {\n            translate([(x_track > 0 ? piece_size/4 : -piece_size/4), 0, 0])\n                cube([piece_size/2 - gap, piece_size/3 - gap, piece_size/4], center=true);\n        }\n        \n        // Y-direction track (vertical)\n        if (y_track != 0) {\n            translate([0, (y_track > 0 ? piece_size/4 : -piece_size/4), 0])\n                cube([piece_size/3 - gap, piece_size/2 - gap, piece_size/4], center=true);\n        }\n    }\n    \n    // Top grip handle\n    translate([0, 0, piece_size/2 - gap/2])\n        cylinder(h=piece_size/6, r=piece_size/6, center=true);\n}\n\n// Generate all pieces with tracks\nmodule all_pieces() {\n    // Corner pieces (no tracks)\n    for (i = [-1.5, 1.5]) {\n        for (j = [-1.5, 1.5]) {\n            translate([i*(piece_size+wall_thickness), j*(piece_size+wall_thickness), 0])\n                puzzle_piece(0, 0);\n        }\n    }\n    \n    // Edge pieces (single tracks)\n    for (i = [-0.5, 0.5, 1.5]) {\n        for (j = [-1.5, 1.5]) {\n            // Horizontal edges\n            translate([i*(piece_size+wall_thickness), j*(piece_size+wall_thickness), 0])\n                puzzle_piece(1, 0);\n                \n            // Vertical edges\n            translate([j*(piece_size+wall_thickness), i*(piece_size+wall_thickness), 0])\n                puzzle_piece(0, 1);\n        }\n    }\n    \n    // Center pieces (cross tracks)\n    for (i = [-0.5, 0.5]) {\n        for (j = [-0.5, 0.5]) {\n            translate([i*(piece_size+wall_thickness), j*(piece_size+wall_thickness), 0])\n                puzzle_piece(1, 1);\n        }\n    }\n}\n\n// Base platform with feet\nmodule base() {\n    difference() {\n        // Main base\n        cube([cube_size+10, cube_size+10, 8], center=true);\n        \n        // Recess for frame\n        translate([0,0,4])\n            cube([cube_size+2, cube_size+2, 8], center=true);\n    }\n    \n    // Support feet\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i*(cube_size/2-10), j*(cube_size/2-10), -6])\n                cylinder(h=6, r=5, center=false);\n        }\n    }\n}\n\n// Assembly\ntranslate([0,0,10])\n    base();\n\ntranslate([0,0,14])\n    frame();\n\ntranslate([0,0,14+cube_size/2-piece_size/2+wall_thickness/2])\n    all_pieces();",
    "renders": true
  },
  {
    "toy": "spinningtop",
    "openscad_code": "// Realistic 3D-printable spinning top toy, medium complexity\n// Overall height ≈ 95 mm, max diameter ≈ 52 mm\n\n$fn = 36;  // smooth curves for printing\n\nmodule handle() {\n    // 8 mm diameter grip with ergonomic bulge\n    translate([0,0,85])\n    difference() {\n        cylinder(h = 15, d1 = 8, d2 = 6);      // main grip\n        cylinder(h = 15.1, d = 3);             // central hole for finger\n    }\n}\n\nmodule stem() {\n    // tapered shaft 30 mm long\n    translate([0,0,40])\n    cylinder(h = 45, d1 = 12, d2 = 8);\n}\n\nmodule flywheel() {\n    // heavy rim for long spin, 2 mm walls\n    difference() {\n        union() {\n            cylinder(h = 12, d = 52);               // outer rim\n            cylinder(h = 12, d = 30);               // inner web\n        }\n        // lighten the rim with 6 holes\n        for (a = [0:60:359])\n            rotate([0,0,a])\n                translate([19,0,6])\n                    rotate([90,0,0])\n                        cylinder(h = 14, d = 5);\n    }\n}\n\nmodule tip() {\n    // replaceable 5 mm radius steel-ball tip\n    translate([0,0,-0.1])\n    difference() {\n        cylinder(h = 5, d1 = 10, d2 = 4);           // conical tip\n        sphere(d = 4.2);                            // cavity for 4 mm ball\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    stem();\n    flywheel();\n    tip();\n}",
    "renders": true
  },
  {
    "toy": "cupandball",
    "openscad_code": "// Cup-and-Ball Toy – medium complexity, realistic style\n// Overall height 120 mm, printable without supports\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main sizes\nball_d = 32;\ncup_outer_d = 44;\ncup_inner_d = cup_outer_d - 2*wall;\ncup_height = 60;\nhandle_len = 100;\nhandle_d = 8;\nstring_len = 80;\nstring_d = 2;\nrim_h = 6;\n\n// -----\n// Ball with mould line\nmodule ball() {\n    difference() {\n        sphere(d = ball_d, $fn = 48);\n\n        // mould line groove\n        rotate([90,0,0])\n        cylinder(h = 0.6, d = ball_d - 0.4, center = true, $fn = 64);\n    }\n}\n\n// -----\n// Cup body\nmodule cup() {\n    difference() {\n        // outer cup profile\n        cylinder(h = cup_height, d = cup_outer_d, $fn = 64);\n\n        // inner cavity\n        translate([0,0,rim_h])\n        cylinder(h = cup_height - rim_h + 1, d = cup_inner_d, $fn = 64);\n\n        // bottom hole for string\n        cylinder(h = cup_height + 2, d = string_d + 1, center = true, $fn = 12);\n    }\n\n    // rim lip\n    translate([0,0,rim_h])\n    cylinder(h = wall, d1 = cup_outer_d, d2 = cup_outer_d + 2*wall, $fn = 64);\n}\n\n// -----\n// Handle stick\nmodule handle() {\n    // shaft\n    rotate([90,0,0])\n    cylinder(h = handle_len, d = handle_d, $fn = 32);\n\n    // knob at end\n    translate([handle_len/2, 0, 0])\n    sphere(d = handle_d + 4, $fn = 24);\n\n    // small ring for string\n    translate([-handle_len/2, 0, 0])\n    rotate([90,0,0])\n    cylinder(h = handle_d + 2, d = handle_d + 2, $fn = 16);\n}\n\n// -----\n// String with knot detail\nmodule string() {\n    // main cord\n    translate([0, 0, -(string_len/2 + cup_height/2)])\n    rotate([90,0,0])\n    cylinder(h = string_len, d = string_d, center = true, $fn = 8);\n\n    // tiny knot at ball end\n    translate([0, 0, -(cup_height/2 + string_len)])\n    sphere(d = string_d * 2.5, $fn = 12);\n}\n\n// -----\n// Assembly\ntranslate([0, 0, cup_height/2])\ncup();\n\ntranslate([cup_outer_d/2 + handle_len/2 + 8, 0, 0])\nhandle();\n\ntranslate([0, 0, -(cup_height/2 + string_len + ball_d/2)])\nunion() {\n    string();\n    ball();\n}",
    "renders": true
  },
  {
    "toy": "domino",
    "openscad_code": "// Domino toy - realistic style\n// Dimensions: 60mm x 30mm x 8mm (standard toy domino size)\n\n// Overall domino parameters\ndomino_width = 30;\ndomino_length = 60;\ndomino_height = 8;\ncorner_radius = 3;\nwall_thickness = 2;\n\n// Dot parameters\ndot_radius = 2.5;\ndot_depth = 1.5;\ndot_spacing = 8;\ndot_offset_x = domino_length/4;\ndot_offset_y = domino_width/2;\n\n// Create rounded rectangle base\nmodule rounded_rectangle(w, l, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([w-r, r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([w-r, l-r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([r, l-r, 0]) cylinder(h=h, r=r, $fn=20);\n    }\n}\n\n// Create a single dot indentation\nmodule dot(x, y) {\n    translate([x, y, domino_height]) \n        cylinder(h=dot_depth, r=dot_radius, $fn=20);\n}\n\n// Create dot pattern for numbers 0-6\nmodule dots(number, side) {\n    x_pos = side == 1 ? domino_length - dot_offset_x : dot_offset_x;\n    \n    if (number == 1) {\n        dot(x_pos, dot_offset_y);\n    }\n    \n    if (number == 2) {\n        dot(x_pos, dot_offset_y - dot_spacing/2);\n        dot(x_pos, dot_offset_y + dot_spacing/2);\n    }\n    \n    if (number == 3) {\n        dot(x_pos, dot_offset_y - dot_spacing/2);\n        dot(x_pos, dot_offset_y);\n        dot(x_pos, dot_offset_y + dot_spacing/2);\n    }\n    \n    if (number == 4) {\n        dot(x_pos, dot_offset_y - dot_spacing/2);\n        dot(x_pos, dot_offset_y + dot_spacing/2);\n        dot(x_pos - dot_spacing/2, dot_offset_y - dot_spacing/2);\n        dot(x_pos - dot_spacing/2, dot_offset_y + dot_spacing/2);\n    }\n    \n    if (number == 5) {\n        dot(x_pos, dot_offset_y - dot_spacing/2);\n        dot(x_pos, dot_offset_y + dot_spacing/2);\n        dot(x_pos - dot_spacing/2, dot_offset_y - dot_spacing/2);\n        dot(x_pos - dot_spacing/2, dot_offset_y + dot_spacing/2);\n        dot(x_pos - dot_spacing/4, dot_offset_y);\n    }\n    \n    if (number == 6) {\n        for (i = [-1, 0, 1]) {\n            dot(x_pos, dot_offset_y + i * dot_spacing/2);\n            dot(x_pos - dot_spacing/2, dot_offset_y + i * dot_spacing/2);\n        }\n    }\n}\n\n// Create center line divider\nmodule center_line() {\n    translate([domino_length/2 - wall_thickness/2, wall_thickness, domino_height - 0.5]) \n        cube([wall_thickness, domino_width - 2*wall_thickness, 0.5]);\n}\n\n// Main domino body\ndifference() {\n    // Base domino shape\n    rounded_rectangle(domino_length, domino_width, domino_height, corner_radius);\n    \n    // Add subtle edge rounding on top\n    translate([0, 0, domino_height - 1])\n        minkowski() {\n            cube([domino_length, domino_width, 1], center=true);\n            cylinder(h=0.1, r=0.5, $fn=20);\n        }\n    \n    // Center divider line groove\n    translate([domino_length/2 - wall_thickness/2, 0, domino_height - 0.5])\n        cube([wall_thickness, domino_width, 0.5]);\n    \n    // Dots for number 3 and 4 (example configuration)\n    dots(3, 0);\n    dots(4, 1);\n}\n\n// Add subtle texture lines on edges for grip\nmodule grip_lines() {\n    for (i = [1:3]) {\n        translate([i * domino_length/4, 0, domino_height/2])\n            cube([0.5, domino_width, domino_height/4]);\n        translate([0, i * domino_width/4, domino_height/2])\n            cube([domino_length, 0.5, domino_height/4]);\n    }\n}\n\n// Apply grip texture\ndifference() {\n    children();\n    grip_lines();\n}",
    "renders": true
  },
  {
    "toy": "skippingrope",
    "openscad_code": "// Skipping rope toy - realistic style, medium complexity\n\n// Parameters\nrope_length = 85;\nhandle_length = 45;\nhandle_diameter = 12;\ngrip_diameter = 14;\ngrip_length = 35;\nrope_diameter = 3;\nbearing_diameter = 8;\nbearing_thickness = 4;\nconnector_length = 10;\nconnector_diameter = 6;\nknurl_height = 0.5;\nknurl_spacing = 2;\n\n$fn = 32;\n\nmodule knurled_grip() {\n    difference() {\n        // Main grip cylinder\n        cylinder(h=grip_length, d=grip_diameter, center=true);\n        \n        // Knurling pattern\n        for (i = [-grip_length/2+knurl_spacing : knurl_spacing : grip_length/2-knurl_spacing]) {\n            translate([0, 0, i]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=knurl_height*2, d=grip_diameter+0.2, center=true);\n                        cylinder(h=knurl_height*2+0.2, d=grip_diameter-1, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule handle_end_cap() {\n    // End cap with rounded edges\n    difference() {\n        union() {\n            cylinder(h=handle_diameter/2, d=handle_diameter, center=false);\n            translate([0, 0, handle_diameter/2]) \n                sphere(d=handle_diameter);\n        }\n        translate([0, 0, -1]) \n            cylinder(h=handle_diameter+2, d=handle_diameter-4, center=false);\n    }\n}\n\nmodule handle_assembly() {\n    difference() {\n        // Main handle body\n        union() {\n            // Handle tube\n            cylinder(h=handle_length, d=handle_diameter, center=false);\n            \n            // End cap\n            translate([0, 0, handle_length]) \n                handle_end_cap();\n            \n            // Grip section\n            translate([0, 0, handle_length/2]) \n                knurled_grip();\n            \n            // Bearing housing\n            translate([0, 0, -bearing_thickness/2]) \n                cylinder(h=bearing_thickness, d=bearing_diameter+4, center=true);\n        }\n        \n        // Handle hollow center\n        cylinder(h=handle_length+handle_diameter/2+1, d=handle_diameter-4, center=false);\n        \n        // Bearing cavity\n        translate([0, 0, -bearing_thickness/2]) \n            cylinder(h=bearing_thickness+0.2, d=bearing_diameter, center=true);\n    }\n}\n\nmodule rope_connector() {\n    // Connector piece between rope and bearing\n    difference() {\n        union() {\n            cylinder(h=connector_length, d=connector_diameter, center=true);\n            translate([0, 0, connector_length/2]) \n                sphere(d=connector_diameter);\n            translate([0, 0, -connector_length/2]) \n                sphere(d=connector_diameter);\n        }\n        // Hole for rope\n        rotate([90, 0, 0]) \n            cylinder(h=connector_diameter+2, d=rope_diameter+0.5, center=true);\n    }\n}\n\nmodule rope_segment(segments=10) {\n    // Create rope as chain of small cylinders and spheres\n    segment_length = rope_length / segments;\n    \n    for (i = [0 : segments-1]) {\n        translate([0, 0, -rope_length/2 + i*segment_length + segment_length/2]) {\n            // Rope segment\n            cylinder(h=segment_length-1, d=rope_diameter, center=true);\n            \n            // Connection sphere between segments\n            if (i < segments-1) {\n                translate([0, 0, segment_length/2]) \n                    sphere(d=rope_diameter);\n            }\n        }\n    }\n}\n\n// Main assembly\n// Left handle\ntranslate([0, -rope_length/2 - connector_length/2, 0]) {\n    handle_assembly();\n    \n    // Connector\n    translate([0, rope_length/2 + connector_length/2 + handle_length/2, 0]) {\n        rope_connector();\n    }\n}\n\n// Right handle\ntranslate([0, rope_length/2 + connector_length/2, 0]) {\n    mirror([0, 1, 0]) {\n        handle_assembly();\n        \n        // Connector\n        translate([0, rope_length/2 + connector_length/2 + handle_length/2, 0]) {\n            rope_connector();\n        }\n    }\n}\n\n// Rope\nrope_segment(15);",
    "renders": true
  },
  {
    "toy": "kaleidoscope",
    "openscad_code": "// Realistic Kaleidoscope Toy (Medium Complexity)\n// Approx 120mm long, 40mm diameter, 2mm wall thickness\n\n$fa = 2;\n$fs = 0.5;\n\n// Main kaleidoscope body\nmodule kaleidoscope() {\n    // Outer tube - main body\n    difference() {\n        cylinder(h=100, d=40, center=false);\n        cylinder(h=102, d=36, center=false);\n    }\n    \n    // Eyepiece end cap\n    translate([0, 0, 100]) {\n        difference() {\n            cylinder(h=10, d=42, center=false);\n            cylinder(h=12, d=38, center=false);\n        }\n        \n        // Eyepiece ring detail\n        difference() {\n            cylinder(h=3, d=44, center=false);\n            translate([0, 0, -0.1]) cylinder(h=3.2, d=40, center=false);\n        }\n    }\n    \n    // Viewing end cap with peephole\n    translate([0, 0, -2]) {\n        difference() {\n            cylinder(h=12, d=42, center=false);\n            cylinder(h=14, d=38, center=false);\n        }\n        \n        // Peephole\n        translate([0, 0, 11.5]) {\n            difference() {\n                cylinder(h=5, d=15, center=false);\n                cylinder(h=6, d=10, center=false);\n            }\n        }\n    }\n    \n    // Rotating drum section for patterns\n    rotate([0, 0, 0]) {\n        translate([0, 0, 85]) {\n            difference() {\n                cylinder(h=15, d=45, center=false);\n                cylinder(h=17, d=41, center=false);\n            }\n            \n            // Grip rings on drum\n            for(i=[0:2]) {\n                translate([0, 0, i*4]) {\n                    difference() {\n                        cylinder(h=1, d=47, center=false);\n                        cylinder(h=1.2, d=43, center=false);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Support ridges along body\n    for(i=[1:3]) {\n        translate([0, 0, i*25]) {\n            difference() {\n                cylinder(h=2, d=42, center=false);\n                cylinder(h=2.2, d=38, center=false);\n            }\n        }\n    }\n    \n    // Decorative end beads\n    translate([0, 0, -4]) {\n        sphere(d=8);\n    }\n    \n    translate([0, 0, 112]) {\n        sphere(d=8);\n    }\n    \n    // Hanging loop\n    translate([0, -21, 105]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=8, d=6, center=true);\n                cylinder(h=9, d=3, center=true);\n            }\n        }\n    }\n}\n\n// Internal mirror system (for reference/understanding)\nmodule internal_mirrors() {\n    // This would be printed separately and inserted\n    translate([0, 0, 50]) {\n        // Three mirrors at 60 degrees\n        for(i=[0:2]) {\n            rotate([0, 0, i*120]) {\n                translate([0, -8.5, 0]) {\n                    cube([40, 2, 90], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Pattern disk (rotating element)\nmodule pattern_disk() {\n    translate([0, 0, 92.5]) {\n        difference() {\n            cylinder(h=2, d=39, center=true);\n            \n            // Pattern holes\n            for(i=[0:5]) {\n                rotate([0, 0, i*60]) {\n                    translate([12, 0, 0]) {\n                        cylinder(h=3, d=4, center=true);\n                    }\n                    translate([18, 0, 0]) {\n                        cylinder(h=3, d=3, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nkaleidoscope();\ntranslate([50, 0, 0]) pattern_disk();",
    "renders": true
  },
  {
    "toy": "drum",
    "openscad_code": "// Toy Drum Set - Realistic Style, Medium Complexity\n// Size: ~100mm diameter, 3D printable, no overhangs\n\n// Global parameters\ndrum_diameter = 80;\ndrum_height = 45;\nwall_thickness = 2;\nsegments = 36;\n\n// Main drum shell\nmodule drum_shell() {\n    difference() {\n        // Outer shell\n        cylinder(h = drum_height, d = drum_diameter, $fn = segments);\n        \n        // Hollow out inside\n        translate([0, 0, wall_thickness])\n            cylinder(h = drum_height - wall_thickness*2, d = drum_diameter - wall_thickness*2, $fn = segments);\n    }\n}\n\n// Drum top membrane\nmodule drum_membrane() {\n    color(\"white\")\n    translate([0, 0, drum_height - 0.1])\n        cylinder(h = 0.5, d = drum_diameter - 2, $fn = segments);\n}\n\n// Tension ring with tuning lugs\nmodule tension_ring() {\n    // Ring\n    color(\"gold\")\n    difference() {\n        cylinder(h = 4, d = drum_diameter, $fn = segments);\n        translate([0, 0, -0.1])\n            cylinder(h = 4.2, d = drum_diameter - 6, $fn = segments);\n    }\n    \n    // Tuning lugs\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([(drum_diameter - 10)/2, 0, drum_height - 2])\n                cube([6, 3, 4], center = true);\n    }\n}\n\n// Drum legs\nmodule drum_legs() {\n    leg_height = 35;\n    leg_width = 8;\n    \n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([(drum_diameter/2 - leg_width/2 - 5), 0, -leg_height/2])\n                cube([leg_width, leg_width, leg_height], center = true);\n    }\n}\n\n// Drum sticks\nmodule drum_sticks() {\n    stick_length = 70;\n    stick_diameter = 4;\n    \n    // Stick 1\n    translate([40, 20, -5])\n        rotate([45, 0, 0])\n            cylinder(h = stick_length, d = stick_diameter, $fn = 12);\n    \n    // Stick 2\n    translate([-40, 20, -5])\n        rotate([45, 0, 30])\n            cylinder(h = stick_length, d = stick_diameter, $fn = 12);\n}\n\n// Drum base for stability\nmodule drum_base() {\n    base_diameter = drum_diameter + 20;\n    base_height = 8;\n    \n    translate([0, 0, -base_height/2])\n        cylinder(h = base_height, d = base_diameter, $fn = segments);\n}\n\n// Assembly\nunion() {\n    // Main drum assembly\n    drum_base();\n    drum_legs();\n    drum_shell();\n    drum_membrane();\n    tension_ring();\n    \n    // Drums sticks positioned nearby\n    drum_sticks();\n}",
    "renders": true
  },
  {
    "toy": "horn",
    "openscad_code": "// Toy Horn - Realistic Style, Medium Complexity\n// 3D printable toy horn with mouthpiece, bell flare, and decorative elements\n\n$fn = 48;  // Smooth curves for realism\n\n// Overall dimensions: ~120mm length, 50mm bell diameter\nwall_thickness = 2;\n\nmodule horn_body() {\n    // Main curved horn body with consistent wall thickness\n    difference() {\n        // Outer body - curved tube\n        hull() {\n            // Mouthpiece end\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=15, d1=12, d2=18);\n            \n            // First bend\n            translate([20, 0, 15])\n                rotate([0, 60, 0])\n                    cylinder(h=20, d1=18, d2=22);\n            \n            // Second bend\n            translate([45, 0, 35])\n                rotate([0, 30, 0])\n                    cylinder(h=25, d1=22, d2=28);\n            \n            // Bell flare start\n            translate([75, 0, 45])\n                rotate([0, 15, 0])\n                    cylinder(h=30, d1=28, d2=38);\n            \n            // Bell end\n            translate([110, 0, 50])\n                rotate([0, 0, 0])\n                    cylinder(h=10, d1=38, d2=50);\n        }\n        \n        // Inner hollow - creates wall thickness\n        scale([0.8, 0.8, 0.8])\n            hull() {\n                translate([2, 0, 2])\n                    rotate([0, 90, 0])\n                        cylinder(h=15, d1=8, d2=14);\n                \n                translate([22, 0, 17])\n                    rotate([0, 60, 0])\n                        cylinder(h=20, d1=14, d2=18);\n                \n                translate([47, 0, 37])\n                    rotate([0, 30, 0])\n                        cylinder(h=25, d1=18, d2=24);\n                \n                translate([77, 0, 47])\n                    rotate([0, 15, 0])\n                        cylinder(h=30, d1=24, d2=34);\n                \n                translate([112, 0, 52])\n                    rotate([0, 0, 0])\n                        cylinder(h=10, d1=34, d2=46);\n            }\n    }\n}\n\nmodule mouthpiece() {\n    // Detachable toy mouthpiece with rounded edges\n    translate([-8, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                // Main mouthpiece shape\n                union() {\n                    cylinder(h=10, d1=14, d2=12);\n                    translate([0, 0, 10])\n                        cylinder(h=5, d1=12, d2=10);\n                }\n                \n                // Inner bore\n                cylinder(h=15, d=6);\n            }\n}\n\nmodule bell_rim() {\n    // Reinforced bell rim for durability\n    translate([110, 0, 50])\n        rotate([0, 0, 0])\n            difference() {\n                // Outer rim\n                cylinder(h=4, d1=54, d2=52);\n                \n                // Inner taper\n                cylinder(h=4, d1=48, d2=46);\n            }\n}\n\nmodule valve_casings() {\n    // Decorative valve casings (non-functional for toy)\n    for(i = [1:3]) {\n        rotate([0, 15 + i*10, 0])\n            translate([30 + i*15, 0, 20 + i*5])\n                difference() {\n                    // Valve casing body\n                    cylinder(h=12, d=8);\n                    \n                    // Hollow center\n                    cylinder(h=12, d=4);\n                }\n    }\n}\n\nmodule finger_hook() {\n    // Small finger hook for holding\n    translate([50, 0, 25])\n        rotate([90, 0, 0])\n            difference() {\n                // Hook shape\n                union() {\n                    cylinder(h=4, d=6);\n                    translate([0, 4, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h=8, d=4);\n                }\n                \n                // Mounting hole\n                cylinder(h=6, d=2);\n            }\n}\n\nmodule water_key() {\n    // Decorative water key\n    translate([65, 12, 40])\n        rotate([0, 0, 45])\n            difference() {\n                // Key lever\n                cube([10, 3, 2], center=true);\n                \n                // Mounting hole\n                cylinder(h=4, d=2);\n            }\n}\n\n// Assemble the complete toy horn\nunion() {\n    horn_body();\n    mouthpiece();\n    bell_rim();\n    valve_casings();\n    finger_hook();\n    water_key();\n}",
    "renders": true
  },
  {
    "toy": "xylophone",
    "openscad_code": "// Realistic toy xylophone, medium complexity\n// Overall size: 120mm x 60mm x 60mm\n\n// Colors\ncolor_frame = \"BurlyWood\";\ncolor_bars = [ \"Red\", \"Orange\", \"Yellow\", \"Green\", \"Cyan\", \"Blue\", \"Purple\" ];\n\n// Main body frame\nmodule frame() {\n    color(color_frame)\n    union() {\n        // Base\n        translate([0, 0, 5])\n            cube([110, 50, 10], center = true);\n        \n        // Side rails\n        translate([50, 0, 30])\n            cube([10, 50, 50], center = true);\n        translate([-50, 0, 30])\n            cube([10, 50, 50], center = true);\n        \n        // End caps\n        translate([0, 25, 30])\n            cube([110, 10, 50], center = true);\n        translate([0, -25, 30])\n            cube([110, 10, 50], center = true);\n    }\n}\n\n// Mallet\nmodule mallet() {\n    translate([-70, 0, 0])\n    rotate([90, 0, 0])\n    union() {\n        // Handle\n        color(\"Tan\")\n        cylinder(h = 60, d = 6, $fn = 16);\n        \n        // Head\n        translate([0, 0, 62])\n        color(\"Red\")\n        sphere(d = 14, $fn = 16);\n    }\n}\n\n// Xylophone bars\nmodule bars() {\n    for(i = [0:6]) {\n        // Calculate positions and sizes\n        x_pos = -45 + i * 15;\n        bar_length = 40 - i * 3;\n        bar_width = 12;\n        bar_height = 6;\n        \n        translate([x_pos, 0, 20])\n        color(color_bars[i])\n        cube([bar_length, bar_width, bar_height], center = true);\n        \n        // Support pegs\n        translate([x_pos - bar_length/2 + 3, 0, 10])\n        color(color_frame)\n        cylinder(h = 10, d = 4, $fn = 8);\n        translate([x_pos + bar_length/2 - 3, 0, 10])\n        color(color_frame)\n        cylinder(h = 10, d = 4, $fn = 8);\n    }\n}\n\n// Legs with rounded edges\nmodule legs() {\n    for(side = [-1, 1]) {\n        for(end = [-1, 1]) {\n            translate([end * 45, side * 20, -5])\n            rotate([0, 0, 0])\n            difference() {\n                // Main leg\n                cube([8, 8, 20], center = true);\n                \n                // Rounded edges\n                translate([4, 4, 0])\n                sphere(d = 8, $fn = 8);\n                translate([-4, 4, 0])\n                sphere(d = 8, $fn = 8);\n                translate([4, -4, 0])\n                sphere(d = 8, $fn = 8);\n                translate([-4, -4, 0])\n                sphere(d = 8, $fn = 8);\n            }\n        }\n    }\n}\n\n// Assembly\nframe();\nbars();\nlegs();\nmallet();",
    "renders": true
  },
  {
    "toy": "whistle",
    "openscad_code": "// Realistic Toy Whistle - Medium Complexity\n// Overall dimensions: ~90mm x 30mm x 25mm\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nbody_length = 75;\nbody_diameter = 22;\nmouthpiece_length = 20;\nmouthpiece_diameter = 12;\nwindow_width = 8;\nwindow_height = 4;\npea_diameter = 6;\n\nmodule whistle_body() {\n    // Main cylindrical body\n    difference() {\n        // Outer shell\n        union() {\n            cylinder(h=body_length, d=body_diameter);\n            // Mouthpiece extension\n            translate([0, 0, body_length])\n            cylinder(h=mouthpiece_length, d1=body_diameter, d2=mouthpiece_diameter);\n        }\n        \n        // Inner bore\n        translate([0, 0, -1])\n        cylinder(h=body_length + mouthpiece_length + 2, d=body_diameter - 2*wall_thickness);\n    }\n}\n\nmodule sound_window() {\n    // Air exit window\n    translate([0, body_diameter/2 - window_height/2, body_length - window_width/2])\n    rotate([90, 0, 0])\n    cube([window_width, window_height, wall_thickness], center=true);\n    \n    // Sharp edge\n    translate([0, body_diameter/2 - 1, body_length - window_width/2])\n    rotate([90, 0, 0])\n    cube([window_width, 1, wall_thickness], center=true);\n}\n\nmodule pea_chamber() {\n    // Chamber for the pea\n    translate([0, 0, body_length - 25])\n    difference() {\n        sphere(d=pea_diameter + 4);\n        sphere(d=pea_diameter);\n    }\n}\n\nmodule mouthpiece_details() {\n    // Lip rest\n    translate([0, 0, body_length])\n    difference() {\n        cylinder(h=5, d=mouthpiece_diameter + 4);\n        cylinder(h=6, d=mouthpiece_diameter);\n    }\n    \n    // Air channel narrowing\n    translate([0, 0, body_length + 10])\n    difference() {\n        cylinder(h=10, d1=mouthpiece_diameter, d2=mouthpiece_diameter - 2);\n        cylinder(h=11, d=mouthpiece_diameter - 2*wall_thickness);\n    }\n}\n\nmodule hanging_ring() {\n    // Attachment ring\n    translate([0, -body_diameter/2 - 5, 0])\n    rotate([90, 0, 0])\n    difference() {\n        rotate_extrude()\n            translate([5, 0, 0])\n            circle(r=2);\n        rotate_extrude()\n            translate([3, 0, 0])\n            circle(r=1.5);\n    }\n}\n\nmodule grip_textures() {\n    // Raised rings for grip\n    for(i=[0:5]) {\n        translate([0, 0, 10 + i*10])\n        difference() {\n            cylinder(h=2, d=body_diameter + 1);\n            cylinder(h=3, d=body_diameter);\n        }\n    }\n}\n\nmodule manufacturer_mark() {\n    // Raised text \"TOY\"\n    translate([body_diameter/2 + 1, 0, body_length/2])\n    rotate([0, 90, 0])\n    linear_extrude(height=1)\n        text(\"TOY\", size=5, halign=\"center\", valign=\"center\");\n}\n\n// Main assembly\nunion() {\n    whistle_body();\n    sound_window();\n    pea_chamber();\n    mouthpiece_details();\n    hanging_ring();\n    grip_textures();\n    manufacturer_mark();\n}",
    "renders": true
  },
  {
    "toy": "flute",
    "openscad_code": "// Toy Flute - OpenSCAD\n// Realistic style with medium complexity\n// 3D printable design\n\n// Main parameters\nflute_length = 150;\nbody_diameter = 15;\nwall_thickness = 2;\n\n// Head joint\nmodule head_joint() {\n    difference() {\n        // Main body\n        cylinder(h=40, d=body_diameter, $fn=32);\n        \n        // Embouchure hole\n        translate([0, body_diameter/2 - 2, 35])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=8, $fn=16);\n        \n        // Bore\n        translate([0, 0, -1])\n            cylinder(h=42, d=body_diameter - wall_thickness*2, $fn=32);\n        \n        // Lip plate\n        translate([0, body_diameter/2 + 1, 33])\n            cube([12, 4, 2], center=true);\n    }\n    \n    // Crown\n    translate([0, 0, 40])\n        cylinder(h=8, d=body_diameter + 2, $fn=32);\n}\n\n// Body joint\nmodule body_joint() {\n    difference() {\n        // Main tube\n        cylinder(h=80, d=body_diameter, $fn=32);\n        \n        // Bore\n        translate([0, 0, -1])\n            cylinder(h=82, d=body_diameter - wall_thickness*2, $fn=32);\n        \n        // Tone holes - 8 holes\n        for(i = [0:7]) {\n            angle = i * 45;\n            y_pos = sin(angle) * (body_diameter/2 - 1);\n            x_pos = cos(angle) * (body_diameter/2 - 1);\n            z_pos = 10 + i * 8;\n            \n            translate([x_pos, y_pos, z_pos])\n                rotate([90, 0, angle])\n                    cylinder(h=3, d=6, $fn=16);\n        }\n        \n        // Keys\n        for(i = [1,3,5,7]) {\n            angle = i * 45;\n            y_pos = sin(angle) * (body_diameter/2 + 3);\n            x_pos = cos(angle) * (body_diameter/2 + 3);\n            z_pos = 10 + i * 8;\n            \n            translate([x_pos, y_pos, z_pos - 1])\n                cube([10, 2, 4], center=true);\n        }\n    }\n    \n    // Tenons\n    translate([0, 0, 0])\n        cylinder(h=5, d=body_diameter - 2, $fn=32);\n    translate([0, 0, 80])\n        cylinder(h=5, d=body_diameter - 2, $fn=32);\n}\n\n// Foot joint\nmodule foot_joint() {\n    difference() {\n        // Main tube\n        cylinder(h=35, d=body_diameter, $fn=32);\n        \n        // Bore\n        translate([0, 0, -1])\n            cylinder(h=37, d=body_diameter - wall_thickness*2, $fn=32);\n        \n        // End hole\n        translate([0, 0, 33])\n            cylinder(h=3, d=10, $fn=16);\n        \n        // Little finger keys\n        translate([body_diameter/2 + 2, 0, 25])\n            cube([6, 3, 8], center=true);\n        translate([-body_diameter/2 - 2, 0, 20])\n            cube([6, 3, 6], center=true);\n    }\n    \n    // Tenon\n    translate([0, 0, 0])\n        cylinder(h=5, d=body_diameter - 2, $fn=32);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    head_joint();\ntranslate([0, 0, 35])\n    body_joint();\ntranslate([0, 0, 120])\n    foot_joint();",
    "renders": true
  },
  {
    "toy": "accordion",
    "openscad_code": "$fn=30;\n\n// Accordion parameters\noverall_width = 100;\noverall_height = 60;\ndepth_closed = 35;\ndepth_open_extra = 25;\nbellows_thickness = 2;\nbellows_fold_height = 5;\nbellows_folds = 6;\n\n// Keyboard side\nkeyboard_width = overall_width * 0.4;\nkeyboard_height = overall_height * 0.7;\nkeyboard_depth = depth_closed * 0.5;\nkey_width = keyboard_width / 10;\nkey_height = keyboard_height / 2;\nkey_depth = 2;\n\n// Button side\nbutton_side_width = overall_width * 0.35;\nbutton_side_height = overall_height * 0.6;\nbutton_radius = 2.5;\nbutton_rows = 4;\nbutton_cols = 6;\n\n// Straps\nstrap_width = 8;\nstrap_thickness = 1.5;\nstrap_length = 30;\n\n// Helper module for rounded box\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        translate([r, r, r]) sphere(r=r);\n        translate([w-r, r, r]) sphere(r=r);\n        translate([r, h-r, r]) sphere(r=r);\n        translate([w-r, h-r, r]) sphere(r=r);\n        translate([r, r, d-r]) sphere(r=r);\n        translate([w-r, r, d-r]) sphere(r=r);\n        translate([r, h-r, d-r]) sphere(r=r);\n        translate([w-r, h-r, d-r]) sphere(r=r);\n    }\n}\n\n// Bellows folds\nmodule bellows() {\n    for (i = [0:bellows_folds-1]) {\n        color([0.8,0.8,0.8])\n        translate([0, 0, i * bellows_fold_height * 2])\n        difference() {\n            rounded_box(overall_width, overall_height, bellows_thickness, 3);\n            translate([bellows_thickness, bellows_thickness, -1])\n            rounded_box(overall_width - 2*bellows_thickness, overall_height - 2*bellows_thickness, bellows_thickness + 2, 2);\n        }\n    }\n}\n\n// Keyboard side panel\nmodule keyboard_side() {\n    color([0.6,0.3,0.1])\n    translate([0, 0, bellows_folds * bellows_fold_height * 2])\n    difference() {\n        // Main box\n        rounded_box(keyboard_width, keyboard_height, keyboard_depth, 3);\n        \n        // Hollow inside\n        translate([3, 3, -1])\n        rounded_box(keyboard_width - 6, keyboard_height - 6, keyboard_depth + 2, 2);\n    }\n    \n    // White keys\n    color([0.95,0.95,0.95])\n    for (i = [0:9]) {\n        translate([i * key_width + 1, keyboard_height - key_height - 1, keyboard_depth - key_depth])\n        cube([key_width - 1, key_height, key_depth]);\n    }\n    \n    // Black keys\n    color([0.1,0.1,0.1])\n    for (i = [0:6]) {\n        if (i != 2 && i != 6) {\n            translate([i * key_width + key_width * 0.7, keyboard_height - key_height * 1.3, keyboard_depth - key_depth * 1.5])\n            cube([key_width * 0.6, key_height * 0.8, key_depth * 1.5]);\n        }\n    }\n}\n\n// Button side panel\nmodule button_side() {\n    color([0.8,0.1,0.1])\n    translate([overall_width - button_side_width, 0, bellows_folds * bellows_fold_height * 2])\n    difference() {\n        rounded_box(button_side_width, button_side_height, keyboard_depth, 3);\n        \n        // Hollow inside\n        translate([3, 3, -1])\n        rounded_box(button_side_width - 6, button_side_height - 6, keyboard_depth + 2, 2);\n    }\n    \n    // Buttons\n    color([0.9,0.9,0.9])\n    for (row = [0:button_rows-1]) {\n        for (col = [0:button_cols-1]) {\n            translate([\n                overall_width - button_side_width + 5 + col * (button_side_width - 10) / (button_cols - 1),\n                5 + row * (button_side_height - 10) / (button_rows - 1),\n                keyboard_depth + button_radius\n            ])\n            sphere(r=button_radius);\n        }\n    }\n}\n\n// Top handle\nmodule handle() {\n    color([0.7,0.7,0.7])\n    translate([overall_width/2 - 15, overall_height + 5, bellows_folds * bellows_fold_height * 2 + 10])\n    rotate([90, 0, 0])\n    cylinder(h=30, r1=3, r2=3);\n}\n\n// Straps\nmodule straps() {\n    color([0.4,0.2,0.1])\n    // Left strap\n    translate([-strap_width - 2, overall_height/2 - strap_length/2, bellows_folds * bellows_fold_height * 2 + overall_height/2 - strap_length/2])\n    cube([strap_width, strap_length, strap_thickness]);\n    \n    // Right strap\n    translate([overall_width + 2, overall_height/2 - strap_length/2, bellows_folds * bellows_fold_height * 2 + overall_height/2 - strap_length/2])\n    cube([strap_width, strap_length, strap_thickness]);\n}\n\n// Main assembly\nunion() {\n    // Bellows in middle\n    translate([0, 0, 0])\n    bellows();\n    \n    // Keyboard side\n    keyboard_side();\n    \n    // Button side\n    button_side();\n    \n    // Handle\n    handle();\n    \n    // Straps\n    straps();\n}",
    "renders": true
  },
  {
    "toy": "harmonica",
    "openscad_code": "// Realistic Toy Harmonica (Medium Complexity)\n// Dimensions: 100mm x 25mm x 18mm (toy-sized)\n// Wall thickness: 2mm for 3D printing\n\n// Main body module\nmodule harmonica_body() {\n    difference() {\n        // Outer shell\n        translate([-50, -12.5, 0])\n            cube([100, 25, 18]);\n        \n        // Hollow interior (2mm walls)\n        translate([-48, -10.5, 2])\n            cube([96, 21, 14]);\n        \n        // Mouth holes (10 holes across top)\n        for(i = [0:9]) {\n            translate([-45 + i*10, -8.5, 16])\n                cylinder(h=4, d=6, $fn=16);\n        }\n    }\n}\n\n// Mouthpiece with curved edges\nmodule mouthpiece() {\n    // Top mouthpiece\n    translate([-52, -14.5, 16])\n        cube([104, 29, 2]);\n    \n    // Rounded edges\n    translate([-52, -14.5, 16])\n        cube([104, 2, 2]);\n    translate([-52, 12.5, 16])\n        cube([104, 2, 2]);\n    \n    // Bottom mouthpiece\n    translate([-52, -14.5, 0])\n        cube([104, 29, 2]);\n}\n\n// Side covers with screws\nmodule side_covers() {\n    // Left cover\n    translate([-52, -14.5, 2])\n        cube([2, 29, 14]);\n    \n    // Right cover  \n    translate([50, -14.5, 2])\n        cube([2, 29, 14]);\n    \n    // Screws on left side\n    for(i = [1:3]) {\n        translate([-53, -10 + i*8, 9])\n            cylinder(h=4, d=3, $fn=12);\n    }\n    \n    // Screws on right side\n    for(i = [1:3]) {\n        translate([53, -10 + i*8, 9])\n            cylinder(h=4, d=3, $fn=12);\n    }\n}\n\n// Reed plates (visible through slots)\nmodule reed_plates() {\n    // Top reed plate\n    translate([-48, -10, 12])\n        cube([96, 20, 2]);\n    \n    // Bottom reed plate\n    translate([-48, -10, 4])\n        cube([96, 20, 2]);\n    \n    // Reed slots (simplified)\n    for(i = [0:9]) {\n        translate([-45 + i*10, -8, 4.5])\n            cube([2, 16, 1]);\n    }\n}\n\n// Toy-style rounded corners for safety\nmodule rounded_corners() {\n    // Front left corner\n    translate([-50, -12.5, 0])\n        sphere(d=4, $fn=16);\n    translate([-50, -12.5, 18])\n        sphere(d=4, $fn=16);\n    \n    // Front right corner\n    translate([50, -12.5, 0])\n        sphere(d=4, $fn=16);\n    translate([50, -12.5, 18])\n        sphere(d=4, $fn=16);\n    \n    // Back left corner\n    translate([-50, 12.5, 0])\n        sphere(d=4, $fn=16);\n    translate([-50, 12.5, 18])\n        sphere(d=4, $fn=16);\n    \n    // Back right corner\n    translate([50, 12.5, 0])\n        sphere(d=4, $fn=16);\n    translate([50, 12.5, 18])\n        sphere(d=4, $fn=16);\n}\n\n// Assembly\nunion() {\n    harmonica_body();\n    mouthpiece();\n    side_covers();\n    reed_plates();\n    rounded_corners();\n}",
    "renders": true
  },
  {
    "toy": "slinky",
    "openscad_code": "// Realistic 3D-printable plastic Slinky Toy (medium complexity)\n// Overall size: ~80 mm diameter, ~70 mm tall, 2 mm wall thickness\n// 30 coils, 2 mm thick rings, 2 mm air gap between rings for printability\n\n$fn = 40;  // Smooth circular profiles\n\n// Global parameters\ncoil_outer_d = 80;     // mm\ncoil_inner_d = coil_outer_d - 4;  // 2 mm wall each side\ncoil_height = 70;      // mm\nring_thick = 2;        // mm\nnum_coils = 30;\npitch = coil_height / num_coils;  // vertical spacing per coil\ngap = 2;               // mm gap between rings for printing clearance\n\nmodule ring(od, id, h) {\n    // Single torus-like ring built from cylinders\n    difference() {\n        cylinder(d = od, h = h, center = true);\n        cylinder(d = id, h = h + 0.1, center = true);  // +0.1 to prevent Z-fighting\n    }\n}\n\nmodule slinky_coils() {\n    for (i = [0 : num_coils - 1]) {\n        // Each coil is rotated slightly to create the helix\n        angle = i * 15;  // 15 degrees per coil for nice twist\n        translate([0, 0, i * pitch])\n            rotate([0, 0, angle])\n                ring(coil_outer_d, coil_inner_d, ring_thick);\n    }\n}\n\n// Optional end-cap rings for a finished appearance\nmodule end_cap(top) {\n    // Thicker ring at top and bottom for toy-like look\n    z_pos = top ? coil_height + ring_thick/2 : -ring_thick/2;\n    translate([0, 0, z_pos])\n        ring(coil_outer_d + 2, coil_inner_d - 2, ring_thick * 1.5);\n}\n\n// Build the slinky\nunion() {\n    slinky_coils();\n    // Add end caps for realistic toy look\n    end_cap(true);\n    end_cap(false);\n}",
    "renders": true
  },
  {
    "toy": "tambourine",
    "openscad_code": "// 3D Printable Toy Tambourine\n// Medium complexity realistic style\n\n// Parameters\n$fn = 50;\ntamb_diameter = 100;\ntamb_thickness = 22;\nrim_width = 8;\nrim_thickness = 3;\nhandle_length = 70;\nhandle_diameter = 12;\njingle_diameter = 18;\njingle_thickness = 2.5;\njingle_gap = 3;\njingle_count = 8;\nwall_thickness = 2;\n\n// Main tambourine body\nmodule tambourine_body() {\n    difference() {\n        // Outer rim\n        cylinder(h = tamb_thickness, r = tamb_diameter/2, center = true);\n        \n        // Inner cavity\n        cylinder(h = tamb_thickness + 1, r = tamb_diameter/2 - rim_width, center = true);\n        \n        // Handle hole\n        rotate([90, 0, 0])\n            translate([0, 0, tamb_diameter/2 - rim_width/2])\n                cylinder(h = rim_width + 1, r = handle_diameter/2 - wall_thickness, center = true);\n    }\n}\n\n// Handle\nmodule handle() {\n    intersection() {\n        union() {\n            // Main handle\n            rotate([90, 0, 0])\n                translate([0, 0, tamb_diameter/2 - rim_width/2])\n                    cylinder(h = handle_length, r = handle_diameter/2, center = true);\n            \n            // Handle support ring\n            rotate([90, 0, 0])\n                translate([0, 0, tamb_diameter/2 - rim_width/2])\n                    cylinder(h = rim_width, r = tamb_diameter/2 - rim_width/2 + 1, center = true);\n        }\n        \n        // Cut to fit\n        cube([tamb_diameter + 1, handle_length + 1, tamb_thickness + 1], center = true);\n    }\n}\n\n// Jingle (zill)\nmodule jingle() {\n    // Main jingle disc\n    cylinder(h = jingle_thickness, r = jingle_diameter/2, center = true);\n    \n    // Slot for sound\n    difference() {\n        translate([0, 0, jingle_thickness/2])\n            cube([jingle_diameter * 0.6, jingle_thickness * 0.8, jingle_thickness + 0.1], center = true);\n        translate([0, 0, -jingle_thickness/2])\n            cube([jingle_thickness * 0.8, jingle_diameter * 0.6, jingle_thickness + 0.1], center = true);\n    }\n}\n\n// Jingle pair with connector\nmodule jingle_pair(angle) {\n    rotate([0, 0, angle])\n        translate([tamb_diameter/2 - rim_width/2 - jingle_diameter/4, 0, 0])\n            rotate([90, 0, 0]) {\n                // Jingles\n                translate([0, jingle_gap/2, 0])\n                    jingle();\n                translate([0, -jingle_gap/2, 0])\n                    jingle();\n                \n                // Connector bar\n                cube([jingle_diameter * 0.3, jingle_gap + jingle_thickness, jingle_thickness * 0.5], center = true);\n            }\n}\n\n// Assemble the tambourine\nunion() {\n    // Main body\n    tambourine_body();\n    \n    // Handle\n    handle();\n    \n    // Jingles around the rim\n    for(i = [0 : jingle_count - 1]) {\n        jingle_pair(i * 360/jingle_count);\n    }\n}",
    "renders": true
  },
  {
    "toy": "cymbals",
    "openscad_code": "// Toy Cymbals Set\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 36;\n\n// Overall dimensions\ncymbal_d = 70;\ncymbal_t = 3;\nstand_h = 90;\nbase_d = 60;\nbase_h = 8;\npedal_w = 35;\npedal_l = 20;\npedal_t = 4;\n\n// Wall thickness for printing\nwall = 2;\n\n// Main cymbal module with radial grooves\nmodule cymbal(d, t) {\n    difference() {\n        // Main disc\n        cylinder(d = d, h = t, center = true);\n        \n        // Center hole\n        cylinder(d = 6, h = t + 0.2, center = true);\n        \n        // Radial grooves for texture\n        for (i = [0:15]) {\n            rotate([0, 0, i * 360/16])\n                translate([d/2 - 5, 0, -t/2 - 0.1])\n                    cube([10, 1, t + 0.2]);\n        }\n    }\n}\n\n// Cymbal holder with joint\nmodule cymbal_holder() {\n    // Vertical post\n    cylinder(d = 6, h = 12);\n    \n    // Pivot joint\n    translate([0, 0, 12])\n        sphere(d = 8);\n    \n    // Horizontal arm\n    translate([0, 0, 12])\n        rotate([90, 0, 0])\n            cylinder(d = 6, h = 20);\n    \n    // Cymbal attachment\n    translate([0, 20, 12])\n        rotate([90, 0, 0])\n            cylinder(d = 5, h = 8);\n}\n\n// Stand base\nmodule stand_base() {\n    difference() {\n        cylinder(d = base_d, h = base_h);\n        // Weight reduction hollow\n        translate([0, 0, wall])\n            cylinder(d = base_d - 2*wall, h = base_h);\n    }\n    \n    // Tripod legs\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([base_d/2 - 5, 0, 0])\n                cube([10, wall, base_h]);\n    }\n}\n\n// Foot pedal assembly\nmodule pedal() {\n    // Pedal plate\n    translate([-pedal_w/2, 0, 0])\n        cube([pedal_w, pedal_l, pedal_t]);\n    \n    // Hinge\n    translate([0, pedal_l, pedal_t/2])\n        rotate([90, 0, 0])\n            cylinder(d = 4, h = 6);\n    \n    // Spring post\n    translate([0, pedal_l, pedal_t])\n        cylinder(d = 3, h = 8);\n}\n\n// Main assembly\nmodule cymbals_toy() {\n    // Base\n    stand_base();\n    \n    // Main stand post\n    translate([0, 0, base_h])\n        cylinder(d = 12, h = stand_h - base_h);\n    \n    // Top crossbar\n    translate([0, 0, stand_h - 15])\n        rotate([0, 90, 0])\n            cylinder(d = 10, h = 60);\n    \n    // Left cymbal\n    translate([-25, 0, stand_h - 10])\n        rotate([0, 0, 10])\n            cymbal(cymbal_d, cymbal_t);\n    \n    // Right cymbal\n    translate([25, 0, stand_h - 10])\n        rotate([0, 0, -10])\n            cymbal(cymbal_d, cymbal_t);\n    \n    // Connection arms\n    translate([-25, 0, stand_h - 10])\n        rotate([0, 0, 10])\n            cymbal_holder();\n    \n    translate([25, 0, stand_h - 10])\n        rotate([0, 0, -10])\n            cymbal_holder();\n    \n    // Pedal and linkage\n    translate([-20, 30, 0])\n        pedal();\n    \n    // Linkage rod\n    translate([-20, 30 + pedal_l, pedal_t + 4])\n        cylinder(d = 3, h = stand_h - pedal_t - 4);\n    \n    // Spring\n    translate([-20, 30 + pedal_l, pedal_t + 4])\n        for (i = [0:10])\n            translate([0, 0, i * 2])\n                rotate([0, 0, i * 30])\n                    cylinder(d = 4, h = 1.5);\n}\n\n// Render the toy\ncymbals_toy();",
    "renders": true
  },
  {
    "toy": "maraca",
    "openscad_code": "// Realistic Toy Maraca - Medium Complexity\n// 3D printable maraca toy with handle, bulb, beads inside, and decorative stripes\n\n// Overall dimensions: ~120mm long, bulb ~50mm diameter, handle ~15mm diameter\n$fn = 32;  // Smooth curves for realistic appearance\nwall_thickness = 2;\n\nmodule maraca() {\n    // Main handle\n    color(\"saddlebrown\")\n    translate([0, 0, -60])\n    cylinder(h=90, d1=12, d2=15, center=false);\n    \n    // Handle grip rings\n    for(i = [1:3]) {\n        color(\"burlywood\")\n        translate([0, 0, -60 + i*25])\n        cylinder(h=4, d=16, center=true);\n    }\n    \n    // Main bulb (hollow sphere)\n    difference() {\n        // Outer bulb\n        color(\"firebrick\")\n        sphere(d=50);\n        \n        // Inner cavity\n        sphere(d=46);\n    }\n    \n    // Bulb neck connecting to handle\n    difference() {\n        color(\"firebrick\")\n        translate([0, 0, -25])\n        cylinder(h=15, d1=15, d2=25, center=false);\n        \n        // Hollow neck\n        translate([0, 0, -25])\n        cylinder(h=15, d1=11, d2=21, center=false);\n    }\n    \n    // Decorative stripes around bulb\n    for(angle = [0:45:315]) {\n        rotate([90, 0, angle])\n        translate([25, 0, 0])\n        color(\"gold\")\n        rotate([0, 90, 0])\n        cylinder(h=50, d=2.5, center=true);\n    }\n    \n    // Internal beads (4 small spheres)\n    for(i = [0:3]) {\n        rotate([i*30 + 15, i*45, 0])\n        translate([8 + i*3, 0, -5 + i*4])\n        color(\"ivory\")\n        sphere(d=5);\n    }\n    \n    // Handle end cap\n    color(\"goldenrod\")\n    translate([0, 0, -65])\n    cylinder(h=5, d=14, center=true);\n    \n    // Safety ring at handle top\n    color(\"darkgoldenrod\")\n    translate([0, 0, 30])\n    rotate_extrude(angle=360)\n    translate([20, 0, 0])\n    circle(d=3);\n}\n\nmaraca();",
    "renders": true
  },
  {
    "toy": "rattle",
    "openscad_code": "// Baby Rattle Toy - Realistic Style\n// Overall size: ~120mm long, 50mm diameter handle, 60mm diameter rings\n\nmodule handle() {\n    // Main handle rod with ergonomic grip\n    difference() {\n        // Main handle cylinder\n        cylinder(h=100, d1=15, d2=18, $fn=32);\n        \n        // Grip rings carved into handle\n        for(i = [10:20:80]) {\n            translate([0, 0, i])\n                cylinder(h=3, d=12, $fn=32);\n        }\n        \n        // Safety hole for string/clip\n        translate([0, -20, 50])\n            rotate([90, 0, 0])\n                cylinder(h=40, d=4, $fn=16);\n    }\n}\n\nmodule rattle_end() {\n    // Large hollow sphere with internal noise makers\n    difference() {\n        // Outer sphere shell\n        sphere(d=50, $fn=64);\n        \n        // Hollow interior\n        sphere(d=46, $fn=64);\n        \n        // Internal noise beads (carved spaces)\n        for(i = [0:120:359]) {\n            rotate([0, i, 0])\n                translate([15, 0, 0])\n                    sphere(d=6, $fn=16);\n        }\n    }\n    \n    // Connection collar\n    cylinder(h=8, d=16, $fn=32);\n}\n\nmodule rattle_rings() {\n    // Three loose rings that slide on handle\n    for(pos = [35, 55, 75]) {\n        translate([0, 0, pos]) {\n            difference() {\n                // Outer ring\n                rotate_extrude($fn=64)\n                    translate([20, 0, 0])\n                        circle(r=3, $fn=32);\n                \n                // Inner hole for handle\n                cylinder(h=20, d=20, $fn=32);\n            }\n        }\n    }\n}\n\nmodule safety_ball() {\n    // Second rattle end with different texture\n    difference() {\n        sphere(d=45, $fn=64);\n        \n        // Hollow interior\n        sphere(d=41, $fn=64);\n        \n        // Textured bumps on surface\n        for(phi = [0:45:135]) {\n            for(theta = [0:30:150]) {\n                rotate([theta, 0, phi])\n                    translate([22, 0, 0])\n                        sphere(d=2.5, $fn=8);\n            }\n        }\n    }\n    \n    // Connection collar\n    cylinder(h=8, d=16, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Handle\n    handle();\n    \n    // First rattle end\n    translate([0, 0, 100])\n        rattle_end();\n    \n    // Second rattle end (rotated for interest)\n    translate([0, 0, 0])\n        rotate([180, 0, 0])\n            safety_ball();\n    \n    // Rattle rings on handle\n    rattle_rings();\n}",
    "renders": true
  },
  {
    "toy": "teether",
    "openscad_code": "// Realistic baby teether toy - medium complexity\n// Overall size: ~80mm diameter ring with 25mm thick body\n\n$fn = 32;\n\nmodule teether_ring() {\n    // Main ring body with 2mm wall thickness\n    difference() {\n        // Outer torus\n        rotate_extrude()\n            translate([38, 0, 0])\n                circle(r=12.5);\n                \n        // Inner hollow\n        rotate_extrude()\n            translate([36, 0, 0])\n                circle(r=10.5);\n    }\n}\n\nmodule textured_grip() {\n    // Soft grip texture with bumps for teething\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([38, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r1=3, r2=3.5, center=true);\n    }\n}\n\nmodule animal_head() {\n    // Bear head shape - rounded and safe\n    union() {\n        // Main head sphere\n        translate([0, 0, 38])\n            sphere(r=15);\n            \n        // Ears\n        translate([-10, 10, 48])\n            sphere(r=6);\n        translate([10, 10, 48])\n            sphere(r=6);\n            \n        // Snout\n        translate([0, 12, 35])\n            sphere(r=8);\n            \n        // Eyes (indents for safety)\n        translate([-5, 8, 42])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=2, center=true);\n        translate([5, 8, 42])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=2, center=true);\n                \n        // Nose\n        translate([0, 16, 35])\n            sphere(r=3);\n    }\n}\n\nmodule safety_ring() {\n    // Additional safety ring with smooth edges\n    difference() {\n        // Outer ring\n        torus(30, 4);\n        \n        // Inner cut\n        torus(27.5, 3.5);\n    }\n}\n\nmodule torus(r, r2) {\n    rotate_extrude()\n        translate([r, 0, 0])\n            circle(r=r2);\n}\n\nmodule handle_grip() {\n    // Handle section for easy gripping\n    rotate([0, 90, 0])\n        difference() {\n            // Main handle\n            cylinder(h=25, r=8, center=true);\n            \n            // Hollow center\n            cylinder(h=27, r=6, center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Base teether ring\n    teether_ring();\n    \n    // Add textured grips around ring\n    textured_grip();\n    \n    // Attach animal features\n    animal_head();\n    \n    // Add safety ring attachment point\n    translate([0, -50, 0])\n        safety_ring();\n        \n    // Add handle grip\n    translate([0, 0, -38])\n        handle_grip();\n}\n\n// Add small ventilation holes for safety\nfor (i = [0:3]) {\n    rotate([0, 0, i*90])\n        translate([38, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=1.5, center=true);\n}",
    "renders": true
  },
  {
    "toy": "blocks",
    "openscad_code": "// Toy Wooden Blocks Set - Realistic Style\n// A collection of realistic toy wooden blocks with studs and hollow bottoms\n// Designed for 3D printing with proper clearances and wall thickness\n\n// Global parameters\nblock_wall = 2;           // Wall thickness for 3D printing\nstud_height = 1.8;        // Height of connecting studs\nstud_diameter = 4.8;      // Diameter of studs (slightly undersized)\nstud_spacing = 8;         // Distance between stud centers\nblock_height = 9.6;       // Standard block height (3.2mm * 3)\nclearance = 0.2;          // Printing clearance between parts\n\n// 2x4 block module (8x16 studs)\nmodule block_2x4(length) {\n    // Main block body with hollow bottom\n    difference() {\n        // Outer block\n        cube([length*stud_spacing, 4*stud_spacing, block_height], center=true);\n        \n        // Hollow bottom cavity\n        translate([0, 0, -block_height/2 + block_wall])\n            cube([(length*stud_spacing) - 2*block_wall, \n                  (4*stud_spacing) - 2*block_wall, \n                  block_height - block_wall], center=true);\n        \n        // Rounded edges (chamfers)\n        translate([length*stud_spacing/2 - 1, 4*stud_spacing/2 - 1, -block_height/2])\n            cube([2, 2, block_height], center=true);\n        translate([-length*stud_spacing/2 + 1, 4*stud_spacing/2 - 1, -block_height/2])\n            cube([2, 2, block_height], center=true);\n        translate([length*stud_spacing/2 - 1, -4*stud_spacing/2 + 1, -block_height/2])\n            cube([2, 2, block_height], center=true);\n        translate([-length*stud_spacing/2 + 1, -4*stud_spacing/2 + 1, -block_height/2])\n            cube([2, 2, block_height], center=true);\n    }\n    \n    // Add studs on top\n    for(x = [-(length-1)/2 : (length-1)/2]) {\n        for(y = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([x*stud_spacing, y*stud_spacing, block_height/2])\n                cylinder(h=stud_height, d=stud_diameter, $fn=20);\n        }\n    }\n}\n\n// 2x2 block module\nmodule block_2x2() {\n    difference() {\n        // Main block\n        cube([2*stud_spacing, 2*stud_spacing, block_height], center=true);\n        \n        // Hollow bottom\n        translate([0, 0, -block_height/2 + block_wall])\n            cube([2*stud_spacing - 2*block_wall, \n                  2*stud_spacing - 2*block_wall, \n                  block_height - block_wall], center=true);\n    }\n    \n    // Four studs\n    for(x = [-0.5, 0.5]) {\n        for(y = [-0.5, 0.5]) {\n            translate([x*stud_spacing, y*stud_spacing, block_height/2])\n                cylinder(h=stud_height, d=stud_diameter, $fn=20);\n        }\n    }\n}\n\n// 1x2 block module\nmodule block_1x2() {\n    difference() {\n        cube([2*stud_spacing, 1*stud_spacing, block_height], center=true);\n        \n        translate([0, 0, -block_height/2 + block_wall])\n            cube([2*stud_spacing - 2*block_wall, \n                  1*stud_spacing - 2*block_wall, \n                  block_height - block_wall], center=true);\n    }\n    \n    // Two studs\n    for(x = [-0.5, 0.5]) {\n        translate([x*stud_spacing, 0, block_height/2])\n            cylinder(h=stud_height, d=stud_diameter, $fn=20);\n    }\n}\n\n// Create a set of blocks arranged for printing\n// First block - 2x4\ntranslate([-20, -8, 0])\n    block_2x4(2);\n\n// Second block - 2x4 rotated\ntranslate([0, 0, 0])\n    rotate([0, 0, 90])\n    block_2x4(4);\n\n// Third block - 2x2\ntranslate([20, 0, 0])\n    block_2x2();\n\n// Fourth block - 1x2\ntranslate([-20, 12, 0])\n    block_1x2();\n\n// Fifth block - 2x4 (long)\ntranslate([0, 20, 0])\n    block_2x4(6);\n\n// Add wood grain texture with slight imperfections\nmodule wood_texture() {\n    // Subtle surface variations for realistic wood appearance\n    for(i = [-2:2]) {\n        translate([i*0.1, 0, 0])\n            cube([0.05, 50, 0.05], center=true);\n    }\n}\n\n// Apply texture to blocks (commented out for faster preview)\n// %translate([-20, -8, block_height/2 + 0.1])\n//     wood_texture();",
    "renders": true
  },
  {
    "toy": "crayons",
    "openscad_code": "// Realistic crayon toy set with holder\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n$fn = 32;\n\n// Global dimensions\ncrayon_height = 65;\ncrayon_diameter = 8;\nholder_width = 115;\nholder_depth = 35;\nholder_height = 15;\nwall_thickness = 2;\n\n// Crayon module with paper wrapper and tip\nmodule crayon(color, length, label) {\n    // Main wax body\n    translate([0, 0, 0])\n        cylinder(h = length, d = crayon_diameter);\n    \n    // Paper wrapper (slightly larger than wax)\n    translate([0, 0, 0])\n        cylinder(h = length * 0.75, d = crayon_diameter + 0.5);\n    \n    // Color stripe on wrapper\n    color(color)\n    translate([0, 0, length * 0.1])\n        cube([crayon_diameter + 0.5, 1, length * 0.6], center = true);\n    \n    // Crayon tip (cone)\n    translate([0, 0, length])\n        cylinder(h = crayon_diameter * 0.7, d1 = crayon_diameter, d2 = 1);\n    \n    // Label text area\n    translate([0, 0, length * 0.5])\n        rotate([0, 0, 0])\n        linear_extrude(height = 0.3)\n            text(label, size = 3, halign = \"center\", valign = \"center\");\n}\n\n// Crayon holder with holes\nmodule crayon_holder() {\n    // Base plate\n    translate([0, 0, 0])\n        cube([holder_width, holder_depth, wall_thickness], center = true);\n    \n    // Side walls\n    // Front wall\n    translate([0, holder_depth/2 - wall_thickness/2, holder_height/2])\n        cube([holder_width, wall_thickness, holder_height], center = true);\n    \n    // Back wall\n    translate([0, -holder_depth/2 + wall_thickness/2, holder_height/2])\n        cube([holder_width, wall_thickness, holder_height], center = true);\n    \n    // Left wall\n    translate([-holder_width/2 + wall_thickness/2, 0, holder_height/2])\n        cube([wall_thickness, holder_depth - 2*wall_thickness, holder_height], center = true);\n    \n    // Right wall\n    translate([holder_width/2 - wall_thickness/2, 0, holder_height/2])\n        cube([wall_thickness, holder_depth - 2*wall_thickness, holder_height], center = true);\n    \n    // Crayon holes (8 holes)\n    for (i = [0:7]) {\n        x_pos = -holder_width/2 + 10 + i * 13;\n        translate([x_pos, 0, -1])\n            cylinder(h = holder_height + 2, d = crayon_diameter + 1);\n    }\n    \n    // Rounded corners for safety\n    translate([holder_width/2, holder_depth/2, 0])\n        sphere(r = wall_thickness);\n    translate([-holder_width/2, holder_depth/2, 0])\n        sphere(r = wall_thickness);\n    translate([holder_width/2, -holder_depth/2, 0])\n        sphere(r = wall_thickness);\n    translate([-holder_width/2, -holder_depth/2, 0])\n        sphere(r = wall_thickness);\n}\n\n// Assemble the crayon set\n// Holder\ncolor(\"burlywood\")\ncrayon_holder();\n\n// Crayons in holder\ncolors = [\n    [\"red\", \"RED\"],\n    [\"blue\", \"BLUE\"],\n    [\"green\", \"GREEN\"],\n    [\"yellow\", \"YELLOW\"],\n    [\"orange\", \"ORANGE\"],\n    [\"purple\", \"PURPLE\"],\n    [\"brown\", \"BROWN\"],\n    [\"black\", \"BLACK\"]\n];\n\nfor (i = [0:7]) {\n    x_pos = -holder_width/2 + 10 + i * 13;\n    translate([x_pos, 0, holder_height + wall_thickness])\n        crayon(colors[i][0], crayon_height, colors[i][1]);\n}",
    "renders": true
  },
  {
    "toy": "paint",
    "openscad_code": "// Realistic Toy Paint Can – OpenSCAD\n// Medium complexity, 3D-print-ready, 100 mm tall\n\n$fa = 2; $fs = 0.5;\n\n// Overall scale factor (100 mm height)\nscale_factor = 1;\n\nmodule can_body() {\n    // Main steel can wall (2 mm thick)\n    difference() {\n        cylinder(h = 65 * scale_factor, d = 75 * scale_factor, $fn = 64);\n        translate([0, 0, 2 * scale_factor])\n            cylinder(h = 63 * scale_factor, d = 71 * scale_factor, $fn = 64);\n    }\n}\n\nmodule can_base() {\n    // Bottom double-seam base\n    difference() {\n        cylinder(h = 7 * scale_factor, d = 75 * scale_factor, $fn = 64);\n        translate([0, 0, 5 * scale_factor])\n            cylinder(h = 3 * scale_factor, d = 71 * scale_factor, $fn = 64);\n    }\n}\n\nmodule can_lip() {\n    // Top rolled lip for lid seating\n    difference() {\n        cylinder(h = 5 * scale_factor, d = 78 * scale_factor, $fn = 64);\n        translate([0, 0, 3 * scale_factor])\n            cylinder(h = 3 * scale_factor, d = 75 * scale_factor, $fn = 64);\n    }\n}\n\nmodule handle() {\n    // Arched metal bail handle\n    color(\"Gray\")\n    rotate([0, 90, 0])\n    for (side = [-1, 1])\n        translate([0, side * 38 * scale_factor, 0])\n            rotate([0, 0, 90])\n                cylinder(h = 4 * scale_factor, d = 4 * scale_factor, $fn = 16);\n\n    rotate([0, 90, 0])\n    rotate_extrude(angle = 180, $fn = 64)\n        translate([38 * scale_factor, 0, 0])\n            circle(d = 4 * scale_factor, $fn = 16);\n}\n\nmodule label_band() {\n    // Recessed label area\n    difference() {\n        cylinder(h = 35 * scale_factor, d = 75.2 * scale_factor, $fn = 64);\n        translate([0, 0, 2 * scale_factor])\n            cylinder(h = 33 * scale_factor, d = 74.6 * scale_factor, $fn = 64);\n    }\n}\n\nmodule drips() {\n    // Paint drips down outside\n    color(\"FireBrick\")\n    for (a = [30 : 45 : 330])\n        rotate([0, 0, a])\n        translate([37.5 * scale_factor, 0, 66 * scale_factor])\n            scale([1, 1, 2.5 * scale_factor])\n                sphere(d = 4 * scale_factor, $fn = 8);\n}\n\nmodule lid() {\n    // Press-fit lid with pry-tab\n    translate([0, 0, 70 * scale_factor])\n    difference() {\n        cylinder(h = 4 * scale_factor, d = 75 * scale_factor, $fn = 64);\n        translate([0, 0, 2 * scale_factor])\n            cylinder(h = 3 * scale_factor, d = 71 * scale_factor, $fn = 64);\n    }\n    // Tab\n    translate([0, 38 * scale_factor, 72 * scale_factor])\n        cube([20 * scale_factor, 6 * scale_factor, 2 * scale_factor], center = true);\n}\n\n// Assembly\nunion() {\n    color(\"Silver\")\n    union() {\n        can_body();\n        translate([0, 0, 65 * scale_factor])\n            can_lip();\n        translate([0, 0, -7 * scale_factor])\n            can_base();\n    }\n    color(\"Silver\")\n    handle();\n    color(\"White\")\n    translate([0, 0, 25 * scale_factor])\n        label_band();\n    drips();\n    color(\"Silver\")\n    lid();\n}",
    "renders": true
  },
  {
    "toy": "clay",
    "openscad_code": "// Toy Clay Chair – OpenSCAD\n// A chunky, child-friendly clay chair (≈80 mm tall) – safe 2 mm walls, no steep overhangs\n\nwall = 2;                 // uniform printable wall thickness\nscaleFactor = 1;          // scale whole toy if desired\n\nmodule chair() {\n    // Helper: rounded block with 2 mm wall shell\n    module hollowBlock(s, wall, r=2) {\n        hull() {\n            translate([r,r,0]) cube([s.x-2*r, s.y-2*r, s.z]);\n            translate([r,r,r]) cube([s.x-2*r, s.y-2*r, s.z-2*r]);\n        }\n        difference() {\n            cube(s, center=false);\n            translate([wall, wall, wall])\n                cube([s.x-2*wall, s.y-2*wall, s.z-wall]);\n        }\n    }\n\n    // Seat\n    seatSize = [50, 50, 10];\n    translate([0,0,0])\n        hollowBlock(seatSize, wall);\n\n    // Backrest\n    backSize = [50, 6, 40];\n    translate([0, seatSize.y-wall, seatSize.z-wall])\n        hollowBlock(backSize, wall);\n\n    // Legs\n    legH = 30;\n    legR = 5;\n    legPos = [\n        [5, 5],\n        [seatSize.x-5, 5],\n        [5, seatSize.y-5],\n        [seatSize.x-5, seatSize.y-5]\n    ];\n    for (p = legPos) {\n        translate([p.x, p.y, -legH])\n            difference() {\n                cylinder(h=legH+wall, r=legR, $fn=20);\n                translate([0,0,wall])\n                    cylinder(h=legH, r=legR-wall, $fn=20);\n            }\n    }\n\n    // Chunky armrests\n    armSize = [5, 20, 20];\n    for (side = [-1, 1]) {\n        translate([side*(seatSize.x/2 + armSize.x/2 - wall), seatSize.y/2, seatSize.z-wall])\n            hollowBlock(armSize, wall);\n    }\n\n    // Tiny drawer front (decorative)\n    drawerW = 20;\n    drawerH = 6;\n    drawerD = 2;\n    translate([(seatSize.x-drawerW)/2, seatSize.y-drawerD, seatSize.z/2])\n        cube([drawerW, drawerD, drawerH]);\n    // Drawer knob\n    translate([seatSize.x/2, seatSize.y-drawerD-2, seatSize.z/2+drawerH/2])\n        sphere(r=2);\n}\n\n// Assemble\nscale([scaleFactor,scaleFactor,scaleFactor])\n    chair();",
    "renders": true
  },
  {
    "toy": "chalk",
    "openscad_code": "// Toy Chalk Set with Holder - Realistic Style\n// Chalk dimensions based on standard classroom chalk: 8mm x 8mm x 80mm\n\nmodule chalk_body(length=80, width=8, height=8) {\n    // Main chalk body with slightly rounded edges\n    difference() {\n        // Main rectangular body\n        translate([0, 0, length/2])\n            minkowski() {\n                cube([width, height, length], center=true);\n                sphere(1);\n            }\n        \n        // Create worn tip effect\n        translate([0, 0, length-5])\n            rotate([45, 0, 0])\n                cube([width+2, height+2, 10], center=true);\n    }\n}\n\nmodule chalk_with_label(color_name) {\n    // Individual chalk piece with color indication\n    chalk_body();\n    \n    // Color band at the bottom\n    translate([0, 0, 5])\n        color(color_name)\n            cylinder(h=2, r=4.5, center=true);\n}\n\nmodule chalk_holder() {\n    // Main holder base - hexagonal prism\n    cylinder(h=12, r=30, $fn=6);\n    \n    // Chamfered top edge\n    translate([0, 0, 12])\n        cylinder(h=3, r1=30, r2=28, $fn=6);\n    \n    // Central hole for chalk storage\n    translate([0, 0, -1])\n        cylinder(h=15, r=15, $fn=6);\n    \n    // Individual chalk slots (6 total)\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([20, 0, 0])\n                cylinder(h=12, r=5, $fn=8);\n    }\n    \n    // Support ribs between slots\n    for(i=[0:5]) {\n        rotate([0, 0, i*60 + 30])\n            translate([15, 0, 6])\n                cube([10, 2, 12], center=true);\n    }\n    \n    // Base plate with feet\n    translate([0, 0, -3])\n        cylinder(h=3, r=32, $fn=6);\n    \n    // Feet\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n            translate([25, 0, -5])\n                cylinder(h=2, r=5, $fn=6);\n    }\n}\n\n// Assemble the toy chalk set\n// Holder first\ntranslate([0, 0, 0])\n    chalk_holder();\n\n// Chalk pieces in holder\ncolors = [\"white\", \"yellow\", \"pink\", \"blue\", \"green\", \"orange\"];\nfor(i=[0:5]) {\n    color(colors[i])\n        rotate([0, 0, i*60])\n            translate([20, 0, 6])\n                chalk_with_label(colors[i]);\n}\n\n// Extra loose chalk piece\ntranslate([50, 0, 5])\n    rotate([0, 90, 0])\n        color(\"white\")\n            chalk_body();",
    "renders": true
  },
  {
    "toy": "abacus",
    "openscad_code": "// Realistic Toy Abacus - Medium Complexity\n// Overall size: ~90mm x 60mm x 70mm\n\n// Parameters\n$fn = 32;\nframe_thickness = 2.5;\nrod_diameter = 3;\nbead_diameter = 10;\nbead_hole = 3.5;\nbeads_per_rod = 5;\nnum_rods = 9;\ngap_between_beads = 1;\n\n// Calculated dimensions\nrod_spacing = 10;\nrod_length = (beads_per_rod * (bead_diameter + gap_between_beads)) + 10;\nframe_width = (num_rods * rod_spacing) + 20;\nframe_height = rod_length + 20;\nframe_depth = bead_diameter + 15;\n\n// Main frame\nmodule frame() {\n    difference() {\n        // Outer frame\n        union() {\n            // Bottom base\n            translate([0, 0, 0])\n                cube([frame_width, frame_depth, frame_thickness], center=true);\n            \n            // Top beam\n            translate([0, 0, frame_height - frame_thickness])\n                cube([frame_width, frame_depth, frame_thickness], center=true);\n            \n            // Left post\n            translate([-frame_width/2 + frame_thickness/2, 0, frame_height/2])\n                cube([frame_thickness, frame_depth, frame_height], center=true);\n            \n            // Right post\n            translate([frame_width/2 - frame_thickness/2, 0, frame_height/2])\n                cube([frame_thickness, frame_depth, frame_height], center=true);\n            \n            // Decorative corner brackets\n            corner_bracket(-frame_width/2 + frame_thickness, 0);\n            corner_bracket(frame_width/2 - frame_thickness, 0);\n        }\n        \n        // Rounded edges for safety\n        for(x = [-frame_width/2 + 5, frame_width/2 - 5])\n            for(z = [5, frame_height - 5])\n                translate([x, 0, z])\n                    sphere(3);\n    }\n}\n\n// Corner bracket details\nmodule corner_bracket(x_pos, y_pos) {\n    translate([x_pos, y_pos, frame_height/2])\n    union() {\n        // Top bracket\n        translate([0, 0, frame_height/2 - 5])\n            cube([frame_thickness*2, frame_depth/2, frame_thickness*2], center=true);\n        \n        // Bottom bracket\n        translate([0, 0, -frame_height/2 + 5])\n            cube([frame_thickness*2, frame_depth/2, frame_thickness*2], center=true);\n    }\n}\n\n// Single bead with hole\nmodule bead() {\n    difference() {\n        // Outer bead\n        sphere(bead_diameter/2);\n        \n        // Center hole\n        rotate([90, 0, 0])\n            cylinder(h=bead_diameter+2, d=bead_hole, center=true);\n        \n        // Finger grip grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, 0, bead_diameter/4])\n                    cube([bead_diameter*0.8, 0.5, bead_diameter/2], center=true);\n        }\n    }\n}\n\n// Complete rod with beads\nmodule rod_with_beads() {\n    for(b = [0:beads_per_rod-1]) {\n        translate([0, 0, b * (bead_diameter + gap_between_beads) + bead_diameter/2 + 5])\n            bead();\n    }\n    \n    // Rod shaft\n    color(\"Burlywood\")\n    cylinder(h=rod_length, d=rod_diameter);\n}\n\n// Divider bar\nmodule divider_bar() {\n    translate([0, 0, rod_length/2 - 2])\n        cube([frame_width - frame_thickness*2 - 4, frame_depth - 10, 3], center=true);\n}\n\n// Assembly\ntranslate([0, 0, frame_thickness])\nunion() {\n    // Main frame\n    frame();\n    \n    // Rods and beads\n    for(i = [0:num_rods-1]) {\n        translate([-frame_width/2 + 10 + i*rod_spacing, 0, frame_thickness + 5])\n            rod_with_beads();\n    }\n    \n    // Divider bar between upper and lower beads\n    translate([0, 0, frame_thickness + rod_length/2 - 5])\n        divider_bar();\n    \n    // Bottom support feet\n    foot(-frame_width/2 + 15);\n    foot(frame_width/2 - 15);\n}\n\n// Support feet for stability\nmodule foot(x_pos) {\n    translate([x_pos, 0, -frame_thickness - 2])\n    difference() {\n        cylinder(h=5, d=8, center=false);\n        cylinder(h=6, d=4, center=false);\n    }\n}",
    "renders": true
  },
  {
    "toy": "globe",
    "openscad_code": "// Realistic Toy Globe - Medium complexity\n// Globe on a tilted stand with rotation mechanism and toy proportions\n\n// Parameters\nglobe_d = 80;           // Globe diameter\nwall_t = 2;             // Wall thickness for 3D printing\nstand_h = 60;           // Stand height\nbase_d = 40;            // Base diameter\naxis_t = 8;             // Rotation axis thickness\n\n// Globe Module - Hollow sphere with continents\nmodule globe() {\n    difference() {\n        // Outer sphere\n        sphere(d = globe_d);\n        \n        // Inner hollow space\n        sphere(d = globe_d - wall_t*2);\n        \n        // Continents - simplified shapes\n        translate([0, 0, globe_d/2 - wall_t]) {\n            // North America\n            translate([-20, 10, 0])\n                scale([1.2, 0.8, 1])\n                sphere(d = 20);\n            \n            // Europe/Asia\n            translate([15, 15, 0])\n                rotate([0, 0, 30])\n                scale([2, 1, 1])\n                sphere(d = 25);\n            \n            // Africa\n            translate([5, -5, 0])\n                scale([0.8, 1.2, 1])\n                sphere(d = 20);\n            \n            // South America\n            translate([-15, -15, 0])\n                rotate([0, 0, -30])\n                scale([0.6, 1.4, 1])\n                sphere(d = 15);\n            \n            // Australia\n            translate([20, -20, 0])\n                sphere(d = 10);\n        }\n    }\n}\n\n// Stand base with anti-slip ring\nmodule stand_base() {\n    union() {\n        // Main base cylinder\n        cylinder(h = 10, d = base_d);\n        \n        // Anti-slip ring detail\n        translate([0, 0, 0.1])\n            difference() {\n                cylinder(h = 3, d = base_d - 5);\n                cylinder(h = 3.2, d = base_d - 10);\n            }\n        \n        // Decorative ring\n        translate([0, 0, 10])\n            cylinder(h = 2, d = base_d + 2);\n    }\n}\n\n// Stand pole with joint mechanism\nmodule stand_pole() {\n    union() {\n        // Main pole\n        cylinder(h = stand_h - 20, d = 12);\n        \n        // Joint housing\n        translate([0, 0, stand_h - 20])\n            union() {\n                cylinder(h = 15, d = 16);\n                \n                // Axis hole\n                rotate([90, 0, 0])\n                    cylinder(h = 20, d = axis_t + 2);\n            }\n    }\n}\n\n// Rotation axis\nmodule rotation_axis() {\n    // Axis pin\n    rotate([90, 0, 0])\n        cylinder(h = 30, d = axis_t);\n    \n    // End caps\n    translate([0, -15, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d = axis_t + 4);\n    \n    translate([0, 15, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d = axis_t + 4);\n}\n\n// Globe mounting brackets\nmodule globe_mounts() {\n    // Left bracket\n    translate([-globe_d/2 - 5, 0, 0])\n        union() {\n            cube([10, axis_t + 4, axis_t + 4], center = true);\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h = axis_t + 4, d = axis_t + 4);\n        }\n    \n    // Right bracket\n    translate([globe_d/2 + 5, 0, 0])\n        union() {\n            cube([10, axis_t + 4, axis_t + 4], center = true);\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h = axis_t + 4, d = axis_t + 4);\n        }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Stand assembly\n    union() {\n        // Base\n        stand_base();\n        \n        // Pole\n        translate([0, 0, 10])\n            stand_pole();\n    }\n    \n    // Globe assembly\n    translate([0, 0, stand_h - 5])\n        rotate([0, -20, 0])  // Tilt angle\n        union() {\n            // Globe\n            globe();\n            \n            // Mounting brackets\n            globe_mounts();\n            \n            // Axis through brackets\n            rotate([0, 0, 0])\n                rotation_axis();\n        }\n}",
    "renders": true
  },
  {
    "toy": "puppet",
    "openscad_code": "// Puppet Toy - Realistic Marionette Style\n// Overall height ~120mm, designed for 3D printing with 2mm walls\n\n$fn=30;\n\n// Main module\nmodule puppet() {\n    // Head\n    translate([0,0,100]) head();\n    \n    // Torso\n    translate([0,0,65]) torso();\n    \n    // Arms\n    translate([15,0,80]) rotate([0,0,30]) arm(\"right\");\n    translate([-15,0,80]) rotate([0,0,-30]) arm(\"left\");\n    \n    // Legs\n    translate([8,0,45]) leg(\"right\");\n    translate([-8,0,45]) leg(\"left\");\n    \n    // Control bar\n    translate([0,0,130]) control_bar();\n    \n    // Strings\n    strings();\n}\n\n// Head module\nmodule head() {\n    // Main head sphere\n    sphere(d=22);\n    \n    // Hat\n    translate([0,0,11]) cylinder(h=8, d1=20, d2=16);\n    \n    // Eyes\n    translate([6,7,5]) sphere(d=4);\n    translate([-6,7,5]) sphere(d=4);\n    \n    // Eye pupils\n    translate([6.5,8.5,6]) sphere(d=2);\n    translate([-5.5,8.5,6]) sphere(d=2);\n    \n    // Nose\n    translate([0,8,0]) sphere(d=3);\n    \n    // Mouth\n    translate([0,10,-5]) cube([8,2,2]);\n}\n\n// Torso module\nmodule torso() {\n    // Main body\n    cylinder(h=25, d1=18, d2=15);\n    \n    // Decorative buttons\n    for(i=[-8:8:16]) {\n        translate([0,9,i]) sphere(d=3);\n    }\n}\n\n// Arm module\nmodule arm(side) {\n    // Upper arm\n    cylinder(h=12, d=7);\n    \n    // Elbow joint hole\n    translate([0,0,10]) rotate([0,90,0]) cylinder(h=10, d=4, center=true);\n    \n    // Lower arm\n    translate([0,0,12]) rotate([60,0,0]) {\n        cylinder(h=15, d=6);\n        \n        // Hand\n        translate([0,0,15]) sphere(d=7);\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    // Upper leg\n    cylinder(h=15, d=8);\n    \n    // Knee joint hole\n    translate([0,0,13]) rotate([0,90,0]) cylinder(h=10, d=4, center=true);\n    \n    // Lower leg\n    translate([0,0,15]) rotate([-30,0,0]) {\n        cylinder(h=18, d=7);\n        \n        // Shoe\n        translate([0,0,18]) cube([12,6,8], center=true);\n    }\n}\n\n// Control bar module\nmodule control_bar() {\n    // Main bar\n    translate([0,0,0]) rotate([90,0,0]) cylinder(h=60, d=6);\n    \n    // Cross bar\n    translate([0,0,-30]) rotate([0,90,0]) cylinder(h=40, d=4);\n    \n    // End caps\n    translate([0,0,-30]) rotate([0,90,0]) {\n        translate([20,0,0]) sphere(d=5);\n        translate([-20,0,0]) sphere(d=5);\n    }\n}\n\n// Strings module\nmodule strings() {\n    // Head string\n    cylinder(h=10, d=1, center=true);\n    \n    // Arm strings\n    translate([15,0,80]) cylinder(h=50, d=1, center=true);\n    translate([-15,0,80]) cylinder(h=50, d=1, center=true);\n    \n    // Leg strings\n    translate([8,0,45]) cylinder(h=85, d=1, center=true);\n    translate([-8,0,45]) cylinder(h=85, d=1, center=true);\n}\n\n// Generate the puppet\npuppet();",
    "renders": true
  },
  {
    "toy": "mask",
    "openscad_code": "// Toy Mask - Realistic Style\n\n// Overall dimensions\nmask_width = 120;\nmask_height = 80;\nmask_depth = 50;\n\n// Wall thickness\nwall = 2;\n\n// Basic mask shell\nmodule mask_shell() {\n    difference() {\n        // Main outer shell\n        hull() {\n            translate([0, 0, 0]) sphere(d=mask_width, $fn=32);\n            translate([0, 0, mask_height/2]) sphere(d=mask_width*0.9, $fn=32);\n        }\n        \n        // Inner cavity for face\n        translate([0, 0, -5])\n            scale([0.85, 0.8, 0.85])\n                sphere(d=mask_width, $fn=32);\n    }\n}\n\n// Eye holes\nmodule eye_holes() {\n    for(x = [-mask_width/4, mask_width/4]) {\n        translate([x, mask_height/4, mask_depth/2])\n            rotate([0, 20, 0])\n                cylinder(h=mask_depth, d1=mask_width/6, d2=mask_width/8, $fn=16);\n    }\n}\n\n// Nose bridge\nmodule nose_bridge() {\n    translate([0, -mask_height/6, mask_depth/3])\n        scale([1, 0.8, 0.6])\n            sphere(d=mask_width/4, $fn=16);\n}\n\n// Breathing vents\nmodule breathing_vents() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, -mask_height/3, mask_depth/2])\n                cylinder(h=wall+1, d=mask_width/10, $fn=8);\n    }\n}\n\n// Elastic strap mounts\nmodule strap_mounts() {\n    for(side = [-1, 1]) {\n        translate([side*mask_width/2, 0, 0])\n            difference() {\n                cube([wall*2, wall*4, wall*4], center=true);\n                translate([0, 0, -wall])\n                    cylinder(h=wall*4+1, d=wall*2, $fn=8);\n            }\n    }\n}\n\n// Toy details - decorative rivets\nmodule rivets() {\n    for(side = [-1, 1]) {\n        for(pos = [-0.3, 0.3]) {\n            translate([side*mask_width/2.5, pos*mask_height/2, mask_depth/2+1])\n                sphere(d=wall*1.5, $fn=8);\n        }\n    }\n}\n\n// Forehead ridge\nmodule forehead_ridge() {\n    translate([0, mask_height/3, mask_depth/3])\n        rotate([30, 0, 0])\n            scale([1.2, 0.3, 0.5])\n                cube([mask_width/2, wall*2, mask_depth/3], center=true);\n}\n\n// Assembly\nunion() {\n    // Main mask structure\n    difference() {\n        mask_shell();\n        eye_holes();\n    }\n    \n    // Additional features\n    nose_bridge();\n    breathing_vents();\n    strap_mounts();\n    rivets();\n    forehead_ridge();\n}",
    "renders": true
  },
  {
    "toy": "sword",
    "openscad_code": "// Toy Sword - Realistic style, medium complexity\n// Dimensions: ~120mm total length\n\n$fn = 32;\n\nmodule sword() {\n    // Blade\n    translate([0, 0, 80]) {\n        difference() {\n            // Main blade\n            rotate([0, 90, 0]) {\n                cylinder(h = 60, r1 = 6, r2 = 3);\n            }\n            \n            // Fuller groove\n            rotate([0, 90, 0]) {\n                translate([0, 0, -1]) {\n                    cylinder(h = 62, r1 = 2.5, r2 = 1.5);\n                }\n            }\n            \n            // Blade tip\n            translate([0, 0, 60]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 10, r1 = 3, r2 = 0);\n                }\n            }\n        }\n    }\n    \n    // Guard\n    translate([0, 0, 65]) {\n        // Main guard body\n        difference() {\n            cube([40, 8, 20], center = true);\n            \n            // Handle hole\n            translate([0, 0, -10]) {\n                cylinder(h = 20, r = 5.5);\n            }\n            \n            // Decorative cutouts\n            for(i = [-15, 0, 15]) {\n                translate([i, 0, 0]) {\n                    cube([6, 8.1, 12], center = true);\n                }\n            }\n        }\n        \n        // Guard edge details\n        translate([0, 0, 10]) {\n            cube([44, 10, 2], center = true);\n        }\n        translate([0, 0, -10]) {\n            cube([44, 10, 2], center = true);\n        }\n    }\n    \n    // Handle\n    union() {\n        // Main handle\n        translate([0, 0, 35]) {\n            cylinder(h = 30, r = 5.5);\n        }\n        \n        // Handle grip rings\n        for(i = [0:5:25]) {\n            translate([0, 0, 25 + i]) {\n                cylinder(h = 2, r = 6.5);\n            }\n        }\n    }\n    \n    // Pommel\n    translate([0, 0, 20]) {\n        // Main pommel body\n        difference() {\n            sphere(r = 9);\n            cube([20, 20, 20], center = true);\n        }\n        \n        // Pommel ring\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 3, r = 11);\n                cylinder(h = 4, r = 8);\n            }\n        }\n    }\n    \n    // Toy safety features\n    // Rounded blade edges\n    translate([0, 0, 80]) {\n        rotate([0, 90, 0]) {\n            // Top edge\n            translate([0, 6, 0]) {\n                cylinder(h = 60, r = 1);\n            }\n            // Bottom edge\n            translate([0, -6, 0]) {\n                cylinder(h = 60, r = 1);\n            }\n        }\n    }\n    \n    // Structural reinforcement\n    translate([0, 0, 50]) {\n        cylinder(h = 30, r = 3.5);\n    }\n}\n\nsword();",
    "renders": true
  },
  {
    "toy": "wand",
    "openscad_code": "// Realistic Wand Toy - Medium Complexity\n// 3D printable toy wand with handle, shaft, and decorative head\n// Total length ~150mm, safe rounded edges, 2mm wall thickness\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main wand module\nmodule wand() {\n    // Handle grip section\n    union() {\n        // Main handle - ergonomic shape\n        translate([0, 0, 10])\n            cylinder(h=60, d1=18, d2=15, center=false);\n        \n        // Grip rings for better hold\n        for(i = [0:2]) {\n            translate([0, 0, 15 + i*15])\n                cylinder(h=5, d=20, center=false);\n        }\n        \n        // Pommel at base\n        translate([0, 0, 0])\n            sphere(d=22);\n    }\n    \n    // Shaft section\n    translate([0, 0, 70])\n        cylinder(h=70, d=10, center=false);\n    \n    // Decorative head assembly\n    translate([0, 0, 140])\n        wand_head();\n}\n\n// Wand head with star motif\nmodule wand_head() {\n    union() {\n        // Central star core\n        cylinder(h=12, d=14, center=true);\n        \n        // Star points\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n                translate([8, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, d1=6, d2=3, center=true);\n        }\n        \n        // Safety ball at tip\n        translate([0, 0, 8])\n            sphere(d=10);\n        \n        // Decorative ring below head\n        translate([0, 0, -8])\n            cylinder(h=3, d=16, center=false);\n    }\n}\n\n// Create the wand\nwand();\n\n// Optional base for display\ntranslate([0, 0, -5])\n    cylinder(h=2, d=25, center=false);",
    "renders": true
  },
  {
    "toy": "crown",
    "openscad_code": "// Crown Toy - Realistic Style, Medium Complexity\n// Overall dimensions: ~70mm diameter, ~50mm tall\n// Wall thickness: 2mm throughout\n\n$fn = 32;  // Smooth curves for printing\n\nmodule crown_base() {\n    // Main circular base ring\n    difference() {\n        cylinder(h=8, d=68, center=true);\n        cylinder(h=10, d=64, center=true);\n    }\n}\n\nmodule gem_mount(x_pos, y_pos) {\n    // Individual gem setting for crown jewels\n    translate([x_pos, y_pos, 8]) {\n        // Gem base\n        difference() {\n            cylinder(h=3, d=6);\n            cylinder(h=4, d=4);\n        }\n        // Gem stone\n        translate([0, 0, 3]) {\n            sphere(d=5);\n        }\n    }\n}\n\nmodule crown_point(angle, height) {\n    // Individual crown point/spike\n    rotate([0, 0, angle]) {\n        translate([32, 0, 4]) {\n            // Point base\n            cylinder(h=2, d=8);\n            // Point body\n            translate([0, 0, 2]) {\n                cylinder(h1=height, h2=0, d1=6, d2=2);\n            }\n            // Ball on top\n            translate([0, 0, height+2]) {\n                sphere(d=4);\n            }\n        }\n    }\n}\n\nmodule inner_support() {\n    // Structural support ring inside crown\n    difference() {\n        cylinder(h=6, d=60, center=true);\n        cylinder(h=8, d=56, center=true);\n    }\n}\n\nmodule cross_braces() {\n    // Cross braces for structural integrity\n    for(i = [0:45:135]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, 0]) {\n                cube([2, 28, 6], center=true);\n            }\n        }\n    }\n}\n\nmodule crown() {\n    // Main crown assembly\n    union() {\n        // Base structure\n        crown_base();\n        \n        // Inner support structure\n        translate([0, 0, -1]) {\n            inner_support();\n        }\n        \n        // Cross braces for toy durability\n        translate([0, 0, 2]) {\n            cross_braces();\n        }\n        \n        // Crown points - 8 points total\n        for(i = [0:45:315]) {\n            crown_point(i, 12);\n        }\n        \n        // Additional taller points at front/back\n        crown_point(0, 16);\n        crown_point(180, 16);\n        \n        // Gem decorations\n        for(i = [0:60:300]) {\n            rotate([0, 0, i]) {\n                gem_mount(20, 0);\n            }\n        }\n        \n        // Front center gem\n        gem_mount(25, 0);\n        \n        // Side gems\n        gem_mount(-10, 20);\n        gem_mount(-10, -20);\n    }\n}\n\n// Render the crown\ncrown();",
    "renders": true
  },
  {
    "toy": "tiara",
    "openscad_code": "// Tiara Toy - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;\n\n// Main tiara parameters\ntiara_width = 120;\ntiara_height = 40;\ntiara_thickness = 4;\nband_height = 10;\n\n// Gem parameters\ngem_diameter = 8;\ngem_height = 6;\n\n// Spike parameters\nspike_base = 6;\nspike_height = 15;\nspike_angle = 30;\n\n// Heart motif parameters\nheart_width = 20;\nheart_height = 18;\nheart_thickness = 3;\n\nmodule tiara_band() {\n    // Main curved band\n    difference() {\n        // Outer curved band\n        linear_extrude(height = band_height, center = true, convexity = 10)\n            offset(delta = tiara_thickness)\n                arc(width = tiara_width, height = tiara_height, thickness = tiara_thickness);\n        \n        // Inner cutout\n        linear_extrude(height = band_height + 2, center = true, convexity = 10)\n            offset(delta = tiara_thickness - 2)\n                arc(width = tiara_width - 4, height = tiara_height - 4, thickness = tiara_thickness);\n    }\n}\n\nmodule arc(width, height, thickness) {\n    // Create curved arc shape\n    hull() {\n        for(i = [-width/2:width/10:width/2]) {\n            translate([i, -height * sin(180 * abs(i) / width), 0])\n                circle(d = thickness);\n        }\n    }\n}\n\nmodule central_gem() {\n    // Large central gem setting\n    translate([0, -tiara_height/2 + 5, band_height/2]) {\n        // Gem base\n        cylinder(h = gem_height, d = gem_diameter + 4, center = true);\n        \n        // Gem\n        translate([0, 0, gem_height/2])\n            cylinder(h = gem_height, d = gem_diameter, center = true);\n    }\n}\n\nmodule spikes() {\n    // Decorative spikes along top\n    for(i = [-tiara_width/3, -tiara_width/6, 0, tiara_width/6, tiara_width/3]) {\n        translate([i, -tiara_height/2 + 10 - abs(i)/3, band_height/2 + spike_height/2]) {\n            rotate([0, spike_angle * (i/40), 0])\n                cylinder(h = spike_height, d1 = spike_base, d2 = spike_base/2, center = true);\n        }\n    }\n}\n\nmodule heart_motifs() {\n    // Heart shapes on sides\n    for(side = [-1, 1]) {\n        translate([side * tiara_width/4, -tiara_height/2 + 20, band_height/2 + heart_height/2]) {\n            rotate([0, 0, side * 15])\n                heart_shape();\n        }\n    }\n}\n\nmodule heart_shape() {\n    // Create heart shape from primitives\n    hull() {\n        // Left lobe\n        translate([-heart_width/4, 0, 0])\n            sphere(d = heart_width/2);\n        // Right lobe\n        translate([heart_width/4, 0, 0])\n            sphere(d = heart_width/2);\n        // Point\n        translate([0, -heart_height/2, 0])\n            sphere(d = heart_width/3);\n    }\n    scale([1, 1, heart_thickness/heart_width])\n        sphere(d = heart_width);\n}\n\nmodule small_gems() {\n    // Small accent gems\n    for(i = [-tiara_width/2:tiara_width/8:tiara_width/2]) {\n        if(abs(i) > tiara_width/6) {\n            translate([i, -tiara_height/2 + 5 - abs(i)/6, band_height/2]) {\n                cylinder(h = gem_height/2, d = gem_diameter/2);\n            }\n        }\n    }\n}\n\nmodule support_bridges() {\n    // Structural bridges for 3D printing\n    for(i = [-tiara_width/2.5:tiara_width/5:tiara_width/2.5]) {\n        if(i != 0) {\n            translate([i, -tiara_height/2 + 15, 0])\n                cube([2, 10, band_height], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    tiara_band();\n    central_gem();\n    spikes();\n    heart_motifs();\n    small_gems();\n    support_bridges();\n}",
    "renders": true
  },
  {
    "toy": "necklace",
    "openscad_code": "// Necklace Toy - Realistic Style, Medium Complexity\n// A toy necklace with beads, clasp, and pendant suitable for 3D printing\n\n$fn = 30;  // Smooth curves for printing\n\n// Main parameters\nbead_diameter = 12;\nbead_wall = 2;\nchain_length = 120;\nnum_beads = 8;\nclasp_size = 15;\npendant_size = 25;\n\nmodule bead(d=12, wall=2) {\n    difference() {\n        sphere(d=d);  // Outer sphere\n        sphere(d=d - wall*2);  // Hollow center\n    }\n}\n\nmodule chain_link(length=10, diameter=4) {\n    // Simple chain link for toy necklace\n    rotate([90, 0, 0])\n    cylinder(h=length, d=diameter, center=true);\n}\n\nmodule clasp() {\n    // Toy clasp mechanism - simplified hook\n    translate([0, 0, clasp_size/2])\n    union() {\n        // Hook body\n        cylinder(h=clasp_size, d=6);\n        \n        // Hook curve\n        translate([0, 3, 0])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=4);\n        \n        // Loop for connection\n        translate([0, 0, -clasp_size/2 - 5])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=4);\n    }\n}\n\nmodule pendant() {\n    // Heart-shaped pendant for toy necklace\n    scale([1, 1.2, 0.5])\n    union() {\n        // Main heart body\n        translate([0, 5, 0])\n        sphere(d=pendant_size);\n        \n        translate([-pendant_size/2, 0, 0])\n        sphere(d=pendant_size);\n        \n        translate([pendant_size/2, 0, 0])\n        sphere(d=pendant_size);\n        \n        // Connection loop\n        translate([0, pendant_size, 0])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=4);\n    }\n}\n\n// Assemble the necklace\ntranslate([0, -chain_length/2, 0]) {\n    // Left side chain\n    for(i = [0:num_beads-1]) {\n        translate([0, i * 15, 0])\n        bead(bead_diameter, bead_wall);\n    }\n    \n    // Left clasp\n    translate([0, num_beads * 15, 0])\n    clasp();\n}\n\n// Right side chain\ntranslate([0, chain_length/2, 0]) {\n    rotate([0, 180, 0]) {\n        for(i = [0:num_beads-1]) {\n            translate([0, -i * 15, 0])\n            bead(bead_diameter, bead_wall);\n        }\n    }\n}\n\n// Center pendant\ntranslate([0, 0, 0])\npendent();",
    "renders": true
  },
  {
    "toy": "bracelet",
    "openscad_code": "// Realistic Toy Bracelet\n// Medium complexity with toy-like details and 3D printable design\n\n$fn = 50;\n\n// Main bracelet parameters\nbracelet_outer_diameter = 60;\nbracelet_inner_diameter = 45;\nbracelet_height = 12;\nwall_thickness = 2;\n\n// Toy details\nbead_diameter = 8;\nbead_spacing = 15;\nconnector_width = 4;\nconnector_height = 3;\n\n// Hinge parameters\nhinge_pin_diameter = 3;\nhinge_barrel_diameter = 6;\nhinge_barrel_length = 10;\n\n// Clip mechanism\nclip_width = 14;\nclip_thickness = 2;\nclip_gap = 1;\n\nmodule bracelet_band() {\n    difference() {\n        // Main torus shape\n        difference() {\n            cylinder(h = bracelet_height, d = bracelet_outer_diameter, center = true);\n            cylinder(h = bracelet_height + 1, d = bracelet_inner_diameter, center = true);\n        }\n        \n        // Cut the band for hinge\n        translate([0, 0, -bracelet_height/2 - 1])\n            cube([bracelet_outer_diameter + 2, 10, bracelet_height + 2], center = true);\n    }\n}\n\nmodule decorative_beads() {\n    // Add toy-like beads around the band\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([(bracelet_outer_diameter + bracelet_inner_diameter)/4, 0, 0])\n            sphere(d = bead_diameter);\n    }\n    \n    // Connectors between beads\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([(bracelet_outer_diameter + bracelet_inner_diameter)/4, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = connector_width, d = connector_height, center = true);\n    }\n}\n\nmodule hinge_half(pos_x = 1) {\n    // Hinge barrel\n    translate([pos_x * (bracelet_outer_diameter/2 + hinge_barrel_diameter/2), 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = hinge_barrel_length, d = hinge_barrel_diameter);\n    \n    // Hinge knuckles\n    for(i = [0:1]) {\n        translate([pos_x * (bracelet_outer_diameter/2 + hinge_barrel_diameter/2), 0, \n                  (i - 0.5) * (hinge_barrel_length/2 + 1)])\n        rotate([90, 0, 0])\n        cylinder(h = hinge_barrel_length/2, d = hinge_barrel_diameter + 2);\n    }\n}\n\nmodule clip_mechanism() {\n    // Male clip part\n    translate([bracelet_outer_diameter/2 + 5, 0, -bracelet_height/4])\n    union() {\n        cube([clip_width, clip_thickness, clip_width], center = true);\n        translate([clip_width/2 + 1, 0, 0])\n        cylinder(h = clip_thickness, d = clip_width);\n    }\n    \n    // Female clip part\n    translate([-bracelet_outer_diameter/2 - 5, 0, -bracelet_height/4])\n    difference() {\n        cube([clip_width, clip_thickness, clip_width], center = true);\n        translate([clip_width/2 + 1, 0, 0])\n        cylinder(h = clip_thickness + 2, d = clip_width + clip_gap, center = true);\n    }\n}\n\nmodule toy_texture() {\n    // Add raised dots for toy-like texture\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([(bracelet_outer_diameter + bracelet_inner_diameter)/4, 0, bracelet_height/2 - 1])\n        sphere(d = 3);\n    }\n    \n    // Inner ring ridge for strength\n    difference() {\n        cylinder(h = bracelet_height, d = bracelet_inner_diameter + wall_thickness*2, center = true);\n        cylinder(h = bracelet_height + 1, d = bracelet_inner_diameter + wall_thickness, center = true);\n    }\n}\n\n// Assemble the bracelet\nunion() {\n    // Main band\n    bracelet_band();\n    \n    // Toy details\n    translate([0, 0, 0])\n    decorative_beads();\n    \n    // Hinge mechanism\n    hinge_half(1);\n    hinge_half(-1);\n    \n    // Clip mechanism\n    clip_mechanism();\n    \n    // Toy texture\n    toy_texture();\n}",
    "renders": true
  },
  {
    "toy": "ring",
    "openscad_code": "// Toy Ring - Medium Complexity Realistic Style\n// 3D printable toy ring with decorative elements and proper proportions\n\n// Main parameters\nring_outer_d = 40;      // Outer diameter of ring band\nring_inner_d = 32;      // Inner diameter (finger hole)\nring_width = 12;        // Width of ring band at top\nring_thickness = 2.5;   // Thickness of band for printing\n\n// Gem settings\nmain_gem_d = 8;         // Large center gem diameter\nmain_gem_h = 6;         // Height of main gem\nsmall_gem_d = 3;        // Small accent gems diameter\nsmall_gem_h = 2;        // Height of accent gems\n\n// Decorative elements\nbead_d = 3;             // Decorative bead diameter\nbead_rows = 3;          // Number of bead rows\nbead_cols = 8;          // Beads per row\n\n// Ring band module\nmodule ring_band() {\n    difference() {\n        // Main band shape\n        cylinder(h=ring_width, d=ring_outer_d, $fn=100);\n        \n        // Finger hole\n        translate([0, 0, -0.1])\n            cylinder(h=ring_width+0.2, d=ring_inner_d, $fn=100);\n    }\n    \n    // Taper bottom edge for comfort\n    difference() {\n        translate([0, 0, -0.1])\n            cylinder(h=ring_width/3, d1=ring_outer_d, d2=ring_outer_d-2, $fn=100);\n        translate([0, 0, -0.2])\n            cylinder(h=ring_width/3+0.2, d=ring_inner_d, $fn=100);\n    }\n}\n\n// Main gem setting\nmodule main_gem() {\n    // Prongs\n    for(i=[0:60:359]) {\n        rotate([0, 0, i])\n            translate([main_gem_d/2+1, 0, ring_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=main_gem_h+1, d=1.5, $fn=8);\n    }\n    \n    // Gem\n    translate([0, 0, ring_width/2 + main_gem_h/2])\n        scale([1, 1, 0.7])\n            sphere(d=main_gem_d, $fn=20);\n}\n\n// Accent gems\nmodule accent_gems() {\n    // Left side\n    translate([-main_gem_d/2-3, 0, ring_width/2])\n        cylinder(h=small_gem_h, d=small_gem_d, $fn=10);\n    \n    // Right side\n    translate([main_gem_d/2+3, 0, ring_width/2])\n        cylinder(h=small_gem_h, d=small_gem_d, $fn=10);\n}\n\n// Decorative beads\nmodule decorative_beads() {\n    for(row=[1:bead_rows]) {\n        ring_r = (ring_outer_d + ring_inner_d)/4 + row*2;\n        for(i=[0:360/bead_cols:359]) {\n            rotate([0, 0, i])\n                translate([ring_r, 0, ring_width/2 + (row-2)*bead_d])\n                    sphere(d=bead_d, $fn=8);\n        }\n    }\n}\n\n// Side decorations\nmodule side_decorations() {\n    // Left scroll\n    translate([-ring_outer_d/2-2, 0, ring_width/2])\n        rotate([90, 0, 0])\n            cylinder(h=4, d1=3, d2=5, $fn=20);\n    \n    // Right scroll\n    translate([ring_outer_d/2+2, 0, ring_width/2])\n        rotate([90, 0, 0])\n            cylinder(h=4, d1=3, d2=5, $fn=20);\n    \n    // Bottom decorative ball\n    translate([0, -ring_outer_d/2+1, ring_width/2])\n        sphere(d=4, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Main ring structure\n    ring_band();\n    \n    // Gem setting\n    main_gem();\n    accent_gems();\n    \n    // Decorative elements\n    decorative_beads();\n    side_decorations();\n}",
    "renders": true
  },
  {
    "toy": "glove",
    "openscad_code": "// Toy Glove - Realistic Style, Medium Complexity\n// Overall size approximately 120mm length\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main palm dimensions\npalm_w = 40;\npalm_l = 65;\npalm_h = 12;\n\n// Finger dimensions\nfinger_base = 10;\nfinger_len = 35;\nfinger_taper = 6;\nknuckle_h = 8;\n\n// Thumb dimensions\nthumb_len = 25;\nthumb_base = 8;\n\n// Wrist dimensions\nwrist_w = 35;\nwrist_l = 25;\nwrist_h = 10;\n\nmodule palm_shell() {\n    difference() {\n        // Outer palm shape\n        hull() {\n            translate([-palm_w/2, -palm_l/2, 0])\n                cube([palm_w, palm_l, palm_h], center=false);\n            translate([-palm_w/2 + 5, palm_l/2 - 10, 0])\n                cube([palm_w - 10, 20, palm_h + 5], center=false);\n        }\n        \n        // Inner hollow\n        translate([-palm_w/2 + wall, -palm_l/2 + wall, wall])\n            cube([palm_w - 2*wall, palm_l - 2*wall, palm_h - wall], center=false);\n    }\n}\n\nmodule finger_segment(pos_x, pos_y, rot_z, len) {\n    translate([pos_x, pos_y, palm_h]) {\n        rotate([0, 0, rot_z]) {\n            difference() {\n                // Outer finger\n                hull() {\n                    cylinder(h=len, r1=finger_base/2, r2=finger_taper/2, center=false);\n                    translate([0, 0, len])\n                        sphere(finger_taper/2);\n                }\n                \n                // Inner hollow\n                translate([0, 0, wall])\n                    cylinder(h=len - wall, r1=finger_base/2 - wall, r2=finger_taper/2 - wall, center=false);\n            }\n        }\n    }\n}\n\nmodule thumb() {\n    translate([palm_w/2 - 5, -palm_l/2 + 10, palm_h/2]) {\n        rotate([0, -30, 45]) {\n            difference() {\n                // Outer thumb\n                hull() {\n                    cylinder(h=thumb_len, r1=thumb_base/2, r2=thumb_base/3, center=false);\n                    translate([0, 0, thumb_len])\n                        sphere(thumb_base/2.5);\n                }\n                \n                // Inner hollow\n                translate([0, 0, wall])\n                    cylinder(h=thumb_len - wall, r1=thumb_base/2 - wall, r2=thumb_base/3 - wall, center=false);\n            }\n        }\n    }\n}\n\nmodule knuckles() {\n    for(i = [-1.5:1:1.5]) {\n        translate([i * 8, palm_l/2 - 5, palm_h]) {\n            sphere(knuckle_h/2);\n        }\n    }\n}\n\nmodule wrist_cuff() {\n    difference() {\n        // Outer cuff\n        hull() {\n            translate([-wrist_w/2, -palm_l/2 - wrist_l, 0])\n                cube([wrist_w, wrist_l, wrist_h], center=false);\n            translate([-wrist_w/2 - 5, -palm_l/2 - wrist_l - 5, 0])\n                cube([wrist_w + 10, 5, wrist_h + 2], center=false);\n        }\n        \n        // Inner cuff hollow\n        translate([-wrist_w/2 + wall, -palm_l/2 - wrist_l + wall, wall])\n            cube([wrist_w - 2*wall, wrist_l - wall, wrist_h - wall], center=false);\n    }\n}\n\nmodule finger_crease(y_pos) {\n    translate([0, y_pos, palm_h - 1])\n        cube([palm_w - 10, 1, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    palm_shell();\n    \n    // Fingers (4 fingers)\n    finger_segment(-15, palm_l/2 - 5, 0, finger_len);\n    finger_segment(-5, palm_l/2 - 5, 0, finger_len - 2);\n    finger_segment(5, palm_l/2 - 5, 0, finger_len - 2);\n    finger_segment(15, palm_l/2 - 5, 0, finger_len - 4);\n    \n    // Thumb\n    thumb();\n    \n    // Wrist cuff\n    wrist_cuff();\n    \n    // Decorative elements\n    knuckles();\n    \n    // Finger creases\n    finger_crease(palm_l/2 - 15);\n    finger_crease(palm_l/2 - 25);\n}",
    "renders": true
  },
  {
    "toy": "scarf",
    "openscad_code": "// Toy Scarf - Realistic Medium Detail\n// Designed for 3D printing with 2mm wall thickness\n\n// Main parameters\nscarf_length = 120;\nscarf_width = 18;\nscarf_thickness = 4;\n\n// Knit pattern parameters\nknit_size = 2.5;\nknit_rows = 8;\nknit_cols = floor(scarf_length / knit_size);\n\n// Tassel parameters\ntassel_length = 15;\ntassel_diameter = 1.5;\ntassel_count = 12;\n\n// Fringed edge parameters\nfringe_length = 8;\nfringe_diameter = 1.2;\nfringe_count = 16;\n\nmodule knit_pattern() {\n    difference() {\n        // Main scarf body\n        cube([scarf_length, scarf_width, scarf_thickness], center=true);\n        \n        // Knit stitch depressions\n        for (i = [0:knit_cols-1]) {\n            for (j = [0:knit_rows-1]) {\n                x = -scarf_length/2 + knit_size/2 + i * knit_size;\n                y = -scarf_width/2 + knit_size/2 + j * knit_size;\n                z = scarf_thickness/2;\n                \n                translate([x, y, z])\n                    sphere(knit_size/3, $fn=8);\n            }\n        }\n    }\n}\n\nmodule tassel(x_pos) {\n    translate([x_pos, 0, -scarf_thickness/2 - tassel_length/2])\n        difference() {\n            // Tassel body\n            cylinder(h=tassel_length, d=tassel_diameter, $fn=8);\n            \n            // Thread detail grooves\n            for (i = [1:3]) {\n                translate([0, 0, -tassel_length/2 + i*tassel_length/4])\n                    cylinder(h=0.3, d=tassel_diameter+0.5, $fn=8);\n            }\n        }\n}\n\nmodule fringe(x_pos) {\n    for (i = [0:fringe_count-1]) {\n        y_offset = -scarf_width/2 + (i+0.5) * (scarf_width/fringe_count);\n        translate([x_pos, y_offset, -scarf_thickness/2 - fringe_length/2])\n            cylinder(h=fringe_length, d=fringe_diameter, $fn=6);\n    }\n}\n\nmodule scarf_body() {\n    union() {\n        // Main scarf with knit pattern\n        knit_pattern();\n        \n        // Left end tassels\n        for (i = [0:tassel_count-1]) {\n            angle = i * 360/tassel_count;\n            radius = scarf_width/3;\n            x = -scarf_length/2 - tassel_length/2;\n            y = cos(angle) * radius;\n            translate([0, y, 0])\n                tassel(x);\n        }\n        \n        // Right end tassels\n        for (i = [0:tassel_count-1]) {\n            angle = i * 360/tassel_count;\n            radius = scarf_width/3;\n            x = scarf_length/2 + tassel_length/2;\n            y = cos(angle) * radius;\n            translate([0, y, 0])\n                tassel(x);\n        }\n        \n        // Left fringe\n        fringe(-scarf_length/2 - 1);\n        \n        // Right fringe\n        fringe(scarf_length/2 + 1);\n        \n        // Brand tag\n        translate([scarf_length/4, scarf_width/2 + 1, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cube([8, 6, 1], center=true);\n                translate([0, 0, 0.6])\n                    cube([6, 4, 1], center=true);\n            }\n    }\n}\n\n// Create the complete scarf\nscarf_body();",
    "renders": true
  },
  {
    "toy": "hat",
    "openscad_code": "// Toy Hat - Realistic Medium Complexity\n// Dimensions: ~110mm width x 90mm depth x 70mm height\n\n// Main parameters\nhat_width = 100;\nhat_depth = 80;\ncrown_height = 45;\nbrim_width = 15;\nwall_thickness = 2;\n\n// Crown of the hat\nmodule crown() {\n    difference() {\n        // Outer shell\n        cylinder(h=crown_height, d1=hat_width*0.7, d2=hat_width*0.65, $fn=60);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h=crown_height-wall_thickness, d1=hat_width*0.7-wall_thickness*2, d2=hat_width*0.65-wall_thickness*2, $fn=60);\n    }\n}\n\n// Brim of the hat\nmodule brim() {\n    difference() {\n        // Outer brim\n        translate([0, 0, -brim_width/2])\n        scale([1, hat_depth/hat_width, 1])\n        cylinder(h=brim_width, d1=hat_width*1.3, d2=hat_width*1.35, $fn=80);\n        \n        // Inner cutout\n        translate([0, 0, -brim_width/2-1])\n        scale([1, hat_depth/hat_width, 1])\n        cylinder(h=brim_width+2, d1=hat_width*0.7+1, d2=hat_width*0.65+1, $fn=60);\n    }\n}\n\n// Hat band detail\nmodule hat_band() {\n    color(\"brown\")\n    translate([0, 0, crown_height*0.4])\n    difference() {\n        cylinder(h=8, d=hat_width*0.72, $fn=60);\n        cylinder(h=8.5, d=hat_width*0.68, $fn=60);\n    }\n}\n\n// Buckle detail on band\nmodule buckle() {\n    color(\"gold\")\n    translate([hat_width*0.3, 0, crown_height*0.44])\n    rotate([90, 0, 0])\n    difference() {\n        cube([12, 8, 2], center=true);\n        cube([8, 4, 3], center=true);\n    }\n}\n\n// Air vent holes\nmodule vent_holes() {\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([hat_width*0.3, 0, crown_height*0.7])\n        rotate([90, 0, 0])\n        cylinder(h=wall_thickness+1, d=4, $fn=12);\n    }\n}\n\n// Inner head support ribs\nmodule support_ribs() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, (hat_width*0.3-wall_thickness)/2, crown_height/2])\n        cube([wall_thickness, hat_width*0.3-wall_thickness, crown_height-wall_thickness*2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main hat structure\n    crown();\n    brim();\n    \n    // Detailing\n    hat_band();\n    buckle();\n    vent_holes();\n    \n    // Internal structure for 3D printing\n    support_ribs();\n}\n\n// Position for printing\ntranslate([0, 0, brim_width/2])\nrotate([180, 0, 0]) {\n    crown();\n    brim();\n    hat_band();\n    buckle();\n    vent_holes();\n    support_ribs();\n}",
    "renders": true
  },
  {
    "toy": "shoe",
    "openscad_code": "// Realistic toy shoe with medium complexity\n// Overall dimensions: 110mm long x 40mm wide x 50mm high\n\n// Main parameters\nshoe_length = 110;\nshoe_width = 40;\nshoe_height = 50;\nwall_thickness = 2;\n\nmodule shoe_sole() {\n    // Create shoe sole with curved bottom\n    translate([0, 0, 0])\n    union() {\n        // Main sole block\n        difference() {\n            cube([shoe_length, shoe_width, 8], center=true);\n            translate([0, 0, 4])\n            cube([shoe_length-4, shoe_width-4, 8], center=true);\n        }\n        \n        // Heel block\n        translate([-shoe_length/2 + 15, 0, -4])\n        cube([30, shoe_width-4, 12], center=true);\n        \n        // Tread pattern\n        for(i = [-4:1:4]) {\n            translate([i*10, 0, 4.5])\n            cube([1, shoe_width-6, 1], center=true);\n        }\n    }\n}\n\nmodule shoe_upper() {\n    // Main shoe body\n    translate([0, 0, 12])\n    difference() {\n        // Outer shell\n        hull() {\n            translate([shoe_length/2 - 35, 0, 0])\n            sphere(d=35);\n            translate([-shoe_length/2 + 25, 0, 5])\n            sphere(d=25);\n            translate([shoe_length/2 - 5, 0, 0])\n            sphere(d=25);\n        }\n        \n        // Inner cavity\n        scale([0.85, 0.85, 0.9])\n        hull() {\n            translate([shoe_length/2 - 35, 0, 0])\n            sphere(d=35);\n            translate([-shoe_length/2 + 25, 0, 5])\n            sphere(d=25);\n            translate([shoe_length/2 - 5, 0, 0])\n            sphere(d=25);\n        }\n        \n        // Bottom opening\n        translate([0, 0, -20])\n        cube([shoe_length, shoe_width, 40], center=true);\n    }\n}\n\nmodule shoe_laces() {\n    // Eyelets for laces\n    for(i = [-3:1:3]) {\n        translate([shoe_length/2 - 40 - i*10, shoe_width/2 - 3, 20])\n        cylinder(h=wall_thickness*2, d=3, center=true);\n        translate([shoe_length/2 - 40 - i*10, -shoe_width/2 + 3, 20])\n        cylinder(h=wall_thickness*2, d=3, center=true);\n    }\n    \n    // Lace loops\n    for(i = [-2.5:1:2.5]) {\n        translate([shoe_length/2 - 35 - i*10, 0, 25 + abs(i)*2])\n        rotate([90, 0, 0])\n        cylinder(h=shoe_width - 10, d=1.5, center=true);\n    }\n}\n\nmodule toe_cap() {\n    // Reinforced toe area\n    translate([shoe_length/2 - 20, 0, 8])\n    difference() {\n        // Outer toe cap\n        scale([1, 1.2, 0.8])\n        sphere(d=30);\n        \n        // Inner cutout\n        scale([0.9, 1.1, 0.7])\n        sphere(d=30);\n    }\n}\n\nmodule heel_counter() {\n    // Stiff heel support\n    translate([-shoe_length/2 + 20, 0, 15])\n    rotate([0, 15, 0])\n    difference() {\n        // Outer heel cup\n        cube([25, shoe_width - 4, 30], center=true);\n        \n        // Inner curve\n        translate([5, 0, 0])\n        cube([25, shoe_width - 8, 30], center=true);\n    }\n}\n\nmodule shoe_details() {\n    // Side stripe\n    translate([0, shoe_width/2 - 1, 15])\n    rotate([0, 90, 0])\n    cylinder(h=60, d=3);\n    \n    // Logo area\n    translate([shoe_length/2 - 50, shoe_width/2 - 1, 20])\n    cube([15, 2, 8]);\n    \n    // Ventilation holes\n    for(x = [-20:10:20]) {\n        for(z = [0:5:10]) {\n            translate([shoe_length/2 - 50 + x, 0, 15 + z])\n            cylinder(h=shoe_width, d=2, center=true);\n        }\n    }\n}\n\n// Assemble the shoe\nunion() {\n    shoe_sole();\n    shoe_upper();\n    toe_cap();\n    heel_counter();\n    shoe_laces();\n    shoe_details();\n}\n\n// Add toy connector peg at heel\ntranslate([-shoe_length/2, 0, 30])\ncylinder(h=8, d=6, center=true);\n\n// Add toy connector hole at toe\ntranslate([shoe_length/2, 0, 30])\ncylinder(h=8, d=6, center=true);",
    "renders": true
  },
  {
    "toy": "skates",
    "openscad_code": "// Toy Skates - Realistic Style\n// Overall dimensions: ~100mm long, ~40mm wide, ~35mm high\n\n// Parameters\n$fn = 32;\nwheel_d = 12;\nwheel_w = 6;\naxle_d = 4;\nplate_th = 3;\nboot_h = 30;\nboot_l = 70;\nboot_w = 35;\ntoe_stop_d = 15;\nlace_holes = 5;\n\n// Main assembly\nmodule skates() {\n    // Boot\n    difference() {\n        // Main boot shape\n        union() {\n            // Boot body\n            translate([0, 0, boot_h/2])\n                scale([boot_l/2, boot_w/2, boot_h/2])\n                sphere(1);\n            \n            // Heel reinforcement\n            translate([-boot_l/4, 0, boot_h/4])\n                cube([boot_l/2, boot_w, boot_h/2], center=true);\n            \n            // Ankle support\n            translate([boot_l/4, 0, boot_h*0.75])\n                cube([boot_l/3, boot_w*0.8, boot_h/2], center=true);\n        }\n        \n        // Hollow inside\n        translate([0, 0, boot_h/2])\n            scale([(boot_l-4)/2, (boot_w-4)/2, (boot_h-2)/2])\n            sphere(1);\n        \n        // Lace holes\n        for(i = [0:lace_holes-1]) {\n            translate([boot_l/2 - 5 - i*12, 0, boot_h - 5 - i*3])\n                rotate([90, 0, 0])\n                    cylinder(h=boot_w, d=1.5, center=true);\n        }\n    }\n    \n    // Sole plate\n    translate([0, 0, 1])\n        cube([boot_l, boot_w, plate_th], center=true);\n    \n    // Wheels assembly\n    wheel_assembly();\n    \n    // Toe stop\n    translate([boot_l/2 - 5, 0, -5])\n        cylinder(h=8, d1=toe_stop_d, d2=toe_stop_d/2);\n}\n\n// Wheels and trucks\nmodule wheel_assembly() {\n    // Front truck\n    truck(-boot_l/3);\n    \n    // Rear truck\n    truck(-boot_l*0.4);\n}\n\nmodule truck(pos) {\n    // Truck base\n    translate([pos, 0, 0])\n        cube([20, boot_w*0.8, 5], center=true);\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        // Axle\n        translate([pos, side*(boot_w/2 + wheel_w/2), -wheel_d/2 - 2])\n            rotate([0, 90, 0])\n                cylinder(h=boot_w/2, d=axle_d);\n        \n        // Wheel\n        translate([pos, side*(boot_w/2 + wheel_w/2), -wheel_d/2 - 2])\n            rotate([0, 90, 0])\n                cylinder(h=wheel_w, d=wheel_d);\n        \n        // Wheel hub\n        translate([pos, side*(boot_w/2 + wheel_w/2), -wheel_d/2 - 2])\n            rotate([0, 90, 0])\n                cylinder(h=wheel_w+1, d=axle_d+2);\n    }\n}\n\n// Create both skates (left and right)\ntranslate([-boot_w/2 - 5, 0, 0])\n    skates();\nmirror([1, 0, 0])\n    translate([-boot_w/2 - 5, 0, 0])\n        skates();",
    "renders": true
  },
  {
    "toy": "tricycle",
    "openscad_code": "// Toy Tricycle - Realistic style, medium complexity\n// Dimensions: ~120mm length x ~80mm width x ~70mm height\n\n$fn = 36;\n\n// Main assembly\nmodule tricycle() {\n    // Frame and body\n    union() {\n        // Rear frame assembly\n        rear_frame();\n        \n        // Front fork and wheel\n        front_assembly();\n        \n        // Seat\n        seat();\n        \n        // Handlebars\n        handlebars();\n        \n        // Pedals and chain\n        pedals();\n        \n        // Decorative details\n        details();\n    }\n}\n\n// Rear frame with two wheels\nmodule rear_frame() {\n    // Main frame tube\n    color(\"red\")\n    translate([-40, 0, 25])\n    rotate([0, 90, 0])\n    cylinder(h=70, r=4, center=true);\n    \n    // Rear axle\n    color(\"gray\")\n    translate([-40, 0, 10])\n    rotate([0, 90, 0])\n    cylinder(h=60, r=3, center=true);\n    \n    // Rear wheels (left and right)\n    for(side = [-1, 1]) {\n        // Wheel\n        color(\"black\")\n        translate([-40, side * 25, 10])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=15);\n        \n        // Hub\n        color(\"gray\")\n        translate([-40, side * 25, 10])\n        sphere(r=5);\n    }\n}\n\n// Front fork and wheel\nmodule front_assembly() {\n    // Fork stem\n    color(\"red\")\n    translate([40, 0, 35])\n    rotate([0, 90, 0])\n    cylinder(h=50, r=4, center=true);\n    \n    // Fork legs\n    for(side = [-1, 1]) {\n        color(\"red\")\n        translate([40, side * 15, 25])\n        rotate([0, 0, 90])\n        cylinder(h=30, r=2);\n    }\n    \n    // Front wheel\n    color(\"black\")\n    translate([40, 0, 10])\n    rotate([90, 0, 0])\n    cylinder(h=10, r=18);\n    \n    // Front hub\n    color(\"gray\")\n    translate([40, 0, 10])\n    sphere(r=6);\n}\n\n// Comfortable seat\nmodule seat() {\n    // Seat base\n    color(\"blue\")\n    translate([0, 0, 40])\n    cube([30, 25, 3], center=true);\n    \n    // Seat back\n    color(\"blue\")\n    translate([-10, 0, 48])\n    cube([20, 25, 15], center=true);\n    \n    // Seat cushion detail\n    color(\"lightblue\")\n    translate([0, 0, 42])\n    cube([28, 23, 2], center=true);\n}\n\n// Handlebars\nmodule handlebars() {\n    // Stem\n    color(\"red\")\n    translate([30, 0, 55])\n    rotate([0, 90, 0])\n    cylinder(h=25, r=3, center=true);\n    \n    // Handlebar\n    color(\"gray\")\n    translate([30, 0, 68])\n    rotate([0, 90, 0])\n    cylinder(h=50, r=2, center=true);\n    \n    // Grips\n    for(side = [-1, 1]) {\n        color(\"black\")\n        translate([30, side * 20, 68])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=3);\n    }\n}\n\n// Pedals and chain assembly\nmodule pedals() {\n    // Chainring\n    color(\"gray\")\n    translate([20, 0, 25])\n    rotate([0, 90, 0])\n    cylinder(h=4, r=12);\n    \n    // Chainring teeth detail\n    for(i = [0:15]) {\n        color(\"gray\")\n        rotate([0, i * 22.5, 0])\n        translate([20, 0, 25])\n        cube([2, 1, 4], center=true);\n    }\n    \n    // Crank arms\n    color(\"gray\")\n    translate([20, 0, 27])\n    rotate([0, 90, 0])\n    cylinder(h=25, r=2, center=true);\n    \n    // Pedals\n    for(side = [-1, 1]) {\n        color(\"black\")\n        translate([20, side * 15, 27])\n        cube([12, 6, 3], center=true);\n    }\n}\n\n// Additional details\nmodule details() {\n    // Head tube\n    color(\"red\")\n    translate([35, 0, 45])\n    rotate([0, 90, 0])\n    cylinder(h=15, r=5, center=true);\n    \n    // Cross brace\n    color(\"red\")\n    translate([-10, 0, 25])\n    rotate([0, 0, 30])\n    cube([50, 3, 3], center=true);\n    \n    // Fender over rear wheels\n    color(\"red\")\n    translate([-40, 0, 25])\n    rotate([90, 0, 0])\n    cylinder(h=2, r1=25, r2=20);\n    \n    // Bell\n    color(\"yellow\")\n    translate([30, 0, 68])\n    sphere(r=3);\n}\n\n// Scale and position for 3D printing\nscale(0.8)\ntranslate([0, 0, 0])\ntricycle();",
    "renders": true
  },
  {
    "toy": "bicycle",
    "openscad_code": "// Miniature Toy Bicycle - Realistic Style\n// Overall length ~110mm, good for desktop toy\n\n$fn = 32;  // smooth curves\n\n// Main module\nmodule bicycle() {\n    // Frame color\n    color(\"red\")\n    union() {\n        frame();\n        wheels();\n        handlebars();\n        saddle();\n        crankset();\n        toy_details();\n    }\n}\n\n// Main triangular frame\nmodule frame() {\n    // Bottom bracket shell\n    translate([0, 0, 28]) \n        rotate([90, 0, 0])\n            cylinder(h = 12, d = 12);\n\n    // Down tube\n    translate([0, 0, 45])\n        rotate([90, 0, 0])\n            cylinder(h = 60, d = 10);\n\n    // Seat tube\n    translate([0, 0, 45])\n        rotate([0, 0, 0])\n            cylinder(h = 50, d = 12);\n\n    // Top tube\n    translate([0, 0, 70])\n        rotate([90, 0, 90])\n            cylinder(h = 50, d = 8);\n\n    // Head tube\n    translate([40, 0, 70])\n        rotate([0, 0, 0])\n            cylinder(h = 30, d = 12);\n\n    // Seat stays\n    translate([-25, 0, 70])\n        rotate([0, 0, -35])\n            cylinder(h = 40, d = 6);\n\n    // Chain stays\n    translate([-25, 0, 28])\n        rotate([0, 0, -35])\n            cylinder(h = 35, d = 6);\n}\n\n// Wheels with tires\nmodule wheels() {\n    // Rear wheel\n    translate([-45, 0, 28])\n        rotate([0, 90, 0])\n            wheel();\n\n    // Front wheel\n    translate([40, 0, 28])\n        rotate([0, 90, 0])\n            wheel();\n}\n\n// Single wheel assembly\nmodule wheel() {\n    // Rim\n    difference() {\n        cylinder(h = 10, d = 38);\n        translate([0, 0, -1])\n            cylinder(h = 12, d = 32);\n    }\n\n    // Tire\n    color(\"black\")\n    translate([0, 0, 4])\n        cylinder(h = 10, d = 42);\n\n    // Spokes (simplified as disc)\n    color(\"silver\")\n    translate([0, 0, 5])\n        cylinder(h = 0.8, d = 34);\n}\n\n// Handlebars\nmodule handlebars() {\n    color(\"silver\")\n    union() {\n        // Stem\n        translate([40, 0, 85])\n            rotate([0, 0, 0])\n                cylinder(h = 20, d = 8);\n\n        // Handlebar\n        translate([40, 0, 105])\n            rotate([0, 0, 90])\n                cylinder(h = 40, d = 6);\n\n        // Grips\n        color(\"black\")\n        translate([40, 20, 105])\n            cylinder(h = 10, d = 8);\n        translate([40, -20, 105])\n            cylinder(h = 10, d = 8);\n    }\n}\n\n// Saddle\nmodule saddle() {\n    color(\"black\")\n    translate([-5, 0, 95])\n        scale([1.5, 0.8, 0.3])\n            sphere(d = 20);\n}\n\n// Crankset and pedals\nmodule crankset() {\n    // Chainring\n    color(\"silver\")\n    translate([0, 0, 34])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 3, d = 25);\n                cylinder(h = 4, d = 20);\n            }\n\n    // Crank arms\n    color(\"silver\")\n    translate([0, 10, 28])\n        rotate([90, 0, 0])\n            cylinder(h = 25, d = 4);\n    translate([0, -10, 28])\n        rotate([90, 0, 0])\n            cylinder(h = 25, d = 4);\n\n    // Pedals\n    color(\"black\")\n    translate([0, 35, 28])\n        cube([15, 8, 3], center = true);\n    translate([0, -35, 28])\n        cube([15, 8, 3], center = true);\n}\n\n// Toy-specific details\nmodule toy_details() {\n    // Bell on handlebar\n    color(\"silver\")\n    translate([40, 15, 105])\n        cylinder(h = 8, d = 6);\n\n    // Reflectors\n    color(\"red\")\n    translate([-45, 0, 28])\n        cube([4, 2, 4], center = true);\n    translate([40, 0, 28])\n        cube([4, 2, 4], center = true);\n\n    // Kickstand\n    color(\"silver\")\n    translate([-15, 0, 15])\n        rotate([0, 0, 15])\n            cylinder(h = 25, d = 4);\n}\n\n// Render the bicycle\nbicycle();",
    "renders": true
  },
  {
    "toy": "wagon",
    "openscad_code": "// Toy Wagon - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm L x 60mm W x 50mm H\n\n$fn = 36;\n\n// Main parameters\nwheel_d = 24;\nwheel_w = 6;\naxle_d = 4;\nbody_l = 90;\nbody_w = 50;\nbody_h = 25;\nwall_t = 2;\nhandle_l = 60;\nhandle_d = 6;\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(d=wheel_d, h=wheel_w);\n        \n        // Spokes\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n                translate([0,0,-1])\n                    cube([2, wheel_d*0.4, wheel_w+2], center=true);\n        }\n        \n        // Center hole\n        cylinder(d=axle_d+2, h=wheel_w+2, center=true);\n    }\n}\n\n// Wheel with axle\nmodule wheel_assembly() {\n    union() {\n        // Wheel\n        wheel();\n        \n        // Axle spacer\n        translate([0,0,wheel_w/2])\n            cylinder(d=axle_d+4, h=2);\n    }\n}\n\n// Wagon body\nmodule wagon_body() {\n    difference() {\n        // Main body\n        union() {\n            // Base\n            translate([0,0,body_h/2])\n                cube([body_l, body_w, body_h], center=true);\n            \n            // Front wall\n            translate([0,body_w/2-wall_t/2,body_h+wall_t/2])\n                cube([body_l-wall_t*2, wall_t, wall_t*2], center=true);\n            \n            // Back wall\n            translate([0,-body_w/2+wall_t/2,body_h+wall_t/2])\n                cube([body_l-wall_t*2, wall_t, wall_t*2], center=true);\n            \n            // Side walls\n            for(side=[-1,1]) {\n                translate([side*(body_l/2-wall_t/2),0,body_h+wall_t/2])\n                    cube([wall_t, body_w-wall_t*2, wall_t*2], center=true);\n            }\n        }\n        \n        // Interior cavity\n        translate([0,0,body_h/2+2])\n            cube([body_l-wall_t*2, body_w-wall_t*2, body_h-2], center=true);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    union() {\n        // Main handle bar\n        translate([body_l/2+handle_l/2,0,body_h/2])\n            rotate([90,0,0])\n                cylinder(d=handle_d, h=handle_l);\n        \n        // Handle grip\n        translate([body_l/2+handle_l,0,body_h/2])\n            rotate([0,90,0])\n                cylinder(d=handle_d*1.2, h=handle_d*4);\n        \n        // Support bracket\n        translate([body_l/2-5,0,body_h/2])\n            rotate([45,0,0])\n                cylinder(d1=handle_d*1.5, d2=handle_d, h=15);\n    }\n}\n\n// Assemble the wagon\nunion() {\n    // Wagon body\n    wagon_body();\n    \n    // Handle\n    handle();\n    \n    // Wheels and axles\n    for(side=[-1,1]) {\n        // Front axle\n        translate([body_l/2-15, side*body_w/2, wheel_d/2])\n            rotate([90,0,0])\n                cylinder(d=axle_d, h=body_w);\n        \n        // Front wheels\n        translate([body_l/2-15, side*(body_w/2+wheel_w/2+2), wheel_d/2])\n            wheel_assembly();\n        \n        // Rear axle\n        translate([-body_l/2+15, side*body_w/2, wheel_d/2])\n            rotate([90,0,0])\n                cylinder(d=axle_d, h=body_w);\n        \n        // Rear wheels\n        translate([-body_l/2+15, side*(body_w/2+wheel_w/2+2), wheel_d/2])\n            wheel_assembly();\n    }\n}",
    "renders": true
  },
  {
    "toy": "sled",
    "openscad_code": "// Toy sled - realistic style, medium complexity\n// Overall dimensions: ~100mm long x 45mm wide x 30mm high\n\n$fa = 2;\n$fs = 0.5;\n\nmodule sled_base() {\n    // Main curved runners\n    difference() {\n        union() {\n            // Left runner\n            translate([-20, -20, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=5, r=20, $fn=50);\n            \n            // Right runner\n            translate([20, -20, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=5, r=20, $fn=50);\n        }\n        \n        // Hollow out runners\n        translate([-20, -20, -1])\n            scale([0.8, 0.25, 1.2])\n                cylinder(h=7, r=18, $fn=50);\n        \n        translate([20, -20, -1])\n            scale([0.8, 0.25, 1.2])\n                cylinder(h=7, r=18, $fn=50);\n    }\n    \n    // Connecting cross bars\n    for(i = [-15, 0, 15]) {\n        translate([0, i, 2.5])\n            rotate([90, 0, 0])\n                cylinder(h=40, r=2.5, $fn=16);\n    }\n}\n\nmodule seat() {\n    // Main seat platform\n    translate([0, 0, 5])\n        cube([40, 45, 3], center=true);\n    \n    // Seat backrest\n    translate([0, 18, 12])\n        cube([38, 3, 15], center=true);\n    \n    // Side rails\n    difference() {\n        // Left rail\n        translate([-21, 0, 8])\n            cube([3, 45, 10]);\n        \n        // Right rail\n        translate([21, 0, 8])\n            cube([3, 45, 10]);\n        \n        // Rounded top edges\n        translate([-19.5, -23, 17])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=5, $fn=20);\n        \n        translate([19.5, -23, 17])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=5, $fn=20);\n    }\n}\n\nmodule steering_bar() {\n    // Front curved bar\n    translate([0, -25, 15])\n        rotate([90, 0, 0])\n            rotate_extrude(angle=180, $fn=50)\n                translate([15, 0, 0])\n                    circle(r=2.5, $fn=16);\n    \n    // Handle grips\n    translate([-15, -25, 15])\n        rotate([0, 90, 0])\n            cylinder(h=10, r=3, $fn=16);\n    \n    translate([15, -25, 15])\n        rotate([0, 90, 0])\n            cylinder(h=10, r=3, $fn=16);\n}\n\nmodule decorative_details() {\n    // Front tip reinforcement\n    translate([0, -23, 2.5])\n        rotate([90, 0, 0])\n            cylinder(h=5, r=4, $fn=20);\n    \n    // Rope attachment loops\n    for(x = [-15, 15]) {\n        translate([x, -23, 5])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=5, r=3, $fn=16);\n                    cylinder(h=5.5, r=1.5, $fn=16);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    sled_base();\n    seat();\n    steering_bar();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "toy": "sleigh",
    "openscad_code": "// Toy Sleigh\n// Realistic style, medium complexity\n// Dimensions: 100 x 45 x 40 mm\n\n$fn = 36;\n\n// Main body\nmodule sleigh_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 10]) cube([90, 40, 20], center = true);\n            translate([30, 0, 0]) cube([30, 35, 15], center = true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 12]) cube([86, 36, 16], center = true);\n        translate([32, 0, 0]) cube([26, 31, 12], center = true);\n    }\n}\n\n// Curved front\nmodule sleigh_front() {\n    difference() {\n        hull() {\n            translate([-40, 0, 10]) sphere(d = 38);\n            translate([-35, 0, 10]) cube([10, 36, 20], center = true);\n        }\n        \n        translate([-40, 0, 15]) sphere(d = 34);\n        translate([-35, 0, 10]) cube([12, 32, 18], center = true);\n    }\n}\n\n// Runners with supports\nmodule runner() {\n    // Runner blade\n    difference() {\n        translate([0, 0, -5]) cube([100, 6, 4], center = true);\n        translate([0, 0, -3]) cube([96, 2, 2], center = true);\n    }\n    \n    // Support brackets\n    for (x = [-35, -15, 5, 25, 45]) {\n        translate([x, 0, -2.5]) cube([4, 6, 9], center = true);\n    }\n}\n\n// Seat backrest\nmodule backrest() {\n    difference() {\n        translate([40, 0, 25]) cube([20, 38, 30], center = true);\n        translate([41, 0, 25]) cube([18, 34, 28], center = true);\n    }\n}\n\n// Decorative side rails\nmodule side_rail() {\n    for (x = [-30, 30]) {\n        translate([x, 0, 18]) cube([4, 42, 4], center = true);\n    }\n}\n\n// Handle bar\nmodule handle_bar() {\n    translate([42, 0, 35]) {\n        rotate([90, 0, 0]) cylinder(h = 25, d = 6, center = true);\n        translate([0, 0, 12.5]) cube([4, 30, 4], center = true);\n    }\n}\n\n// Assembly\nsleigh_body();\nsleigh_front();\n\ntranslate([0, -19.5, -5]) runner();\ntranslate([0, 19.5, -5]) runner();\n\nbackrest();\nside_rail();\nhandle_bar();",
    "renders": true
  },
  {
    "toy": "roller",
    "openscad_code": "// Roller toy - realistic style, medium complexity\n// Overall length ~110 mm, suitable for 3D printing\n\n// Main body cylinder with rounded ends\nmodule body() {\n    difference() {\n        hull() {\n            // Front rounded end\n            translate([0, 0, 0])\n                sphere(d = 30);\n            // Rear rounded end\n            translate([100, 0, 0])\n                sphere(d = 30);\n            // Cylindrical mid-section\n            translate([50, 0, 0])\n                cylinder(h = 100, d = 30, center = true);\n        }\n        // Hollow core for weight reduction\n        translate([50, 0, 0])\n            cylinder(h = 110, d = 26, center = true);\n    }\n}\n\n// Handle bar assembly\nmodule handle_bar() {\n    // Main horizontal bar\n    rotate([0, 90, 0])\n        cylinder(h = 40, d = 8);\n    \n    // Grips at ends\n    for (i = [-1, 1]) {\n        translate([i * 20, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 12);\n    }\n    \n    // Central mounting block\n    translate([0, 0, -5])\n        cube([15, 15, 10], center = true);\n}\n\n// Axle and wheels\nmodule axle_wheel() {\n    // Axle rod\n    color(\"silver\")\n        rotate([0, 90, 0])\n            cylinder(h = 130, d = 6);\n    \n    // Wheels - 4 wheels for stability\n    for (pos = [0, 100]) {\n        for (side = [-1, 1]) {\n            translate([pos, side * 65, 0])\n                difference() {\n                    // Wheel disc\n                    cylinder(h = 8, d = 35);\n                    // Tread pattern - 8 grooves\n                    for (a = [0:45:315]) {\n                        rotate([0, 0, a])\n                            translate([0, -17.5, -1])\n                                cube([35, 2, 10]);\n                    }\n                    // Central hole\n                    cylinder(h = 10, d = 6.5);\n                }\n        }\n    }\n}\n\n// Decorative stripes\nmodule stripes() {\n    color(\"red\")\n    for (x = [15:20:85]) {\n        translate([x, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 2, d = 30.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    color(\"yellow\")\n        body();\n    \n    // Stripes on body\n    stripes();\n    \n    // Handle bar mounting\n    translate([50, 0, 15])\n        rotate([90, 0, 0])\n            handle_bar();\n    \n    // Axle and wheels\n    translate([0, 0, -15])\n        axle_wheel();\n    \n    // Safety end caps\n    color(\"blue\")\n    for (x = [0, 100]) {\n        translate([x, 0, 0])\n            sphere(d = 8);\n    }\n}",
    "renders": true
  },
  {
    "toy": "jumpingjack",
    "openscad_code": "// Jumping Jack Toy - Medium Complexity (Realistic Style)\n\n// Overall dimensions (mm)\nbody_height = 70;\nbody_width = 35;\narm_length = 30;\nleg_length = 45;\ntotal_height = body_height + leg_length + 10;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Colors for preview (not printed)\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule jumping_jack() {\n    // Body\n    union() {\n        // Torso\n        translate([0, 0, leg_length + body_height/2])\n            cube([body_width, 15, body_height], center=true);\n        \n        // Head\n        translate([0, 0, leg_length + body_height + 12])\n            sphere(10);\n        \n        // Arms\n        // Left arm assembly\n        translate([-body_width/2 - arm_length/2, 0, leg_length + body_height - 10])\n            rotate([0, 0, 30])\n            union() {\n                // Upper arm\n                cube([arm_length, 8, 8], center=true);\n                \n                // Lower arm\n                translate([arm_length/2 + 10, 0, 0])\n                    cube([20, 6, 6], center=true);\n                \n                // Hand\n                translate([arm_length + 15, 0, 0])\n                    sphere(5);\n            }\n        \n        // Right arm assembly (mirrored)\n        mirror([1, 0, 0])\n            translate([-body_width/2 - arm_length/2, 0, leg_length + body_height - 10])\n            rotate([0, 0, -30])\n            union() {\n                // Upper arm\n                cube([arm_length, 8, 8], center=true);\n                \n                // Lower arm\n                translate([arm_length/2 + 10, 0, 0])\n                    cube([20, 6, 6], center=true);\n                \n                // Hand\n                translate([arm_length + 15, 0, 0])\n                    sphere(5);\n            }\n        \n        // Legs\n        // Left leg\n        translate([-body_width/4, 0, leg_length/2])\n            union() {\n                // Thigh\n                cube([12, 8, leg_length/2], center=true);\n                \n                // Shin\n                translate([0, 0, -leg_length/2 - 10])\n                    cube([10, 8, leg_length/2], center=true);\n                \n                // Foot\n                translate([0, 5, -leg_length - 3])\n                    cube([14, 10, 6], center=true);\n            }\n        \n        // Right leg\n        translate([body_width/4, 0, leg_length/2])\n            union() {\n                // Thigh\n                cube([12, 8, leg_length/2], center=true);\n                \n                // Shin\n                translate([0, 0, -leg_length/2 - 10])\n                    cube([10, 8, leg_length/2], center=true);\n                \n                // Foot\n                translate([0, 5, -leg_length - 3])\n                    cube([14, 10, 6], center=true);\n            }\n        \n        // Joints - create holes for string attachment\n        // Head joint\n        translate([0, 0, leg_length + body_height + 25])\n            rotate([90, 0, 0])\n            cylinder(h=5, r=1.5, $fn=8);\n        \n        // Arm joints\n        for (x = [-1, 1]) {\n            translate([x * (body_width/2 + 5), 0, leg_length + body_height - 10])\n                rotate([90, 0, 0])\n                cylinder(h=5, r=1.5, $fn=8);\n        }\n        \n        // Leg joints\n        for (x = [-1, 1]) {\n            translate([x * body_width/4, 0, leg_length - 5])\n                rotate([90, 0, 0])\n                cylinder(h=5, r=1.5, $fn=8);\n        }\n        \n        // Control bar at bottom\n        translate([0, 0, -leg_length - 10])\n            cube([60, 4, 4], center=true);\n        \n        // Face details\n        translate([0, 8, leg_length + body_height + 12])\n            union() {\n                // Eyes\n                translate([-3, 0, 2])\n                    sphere(1.5);\n                translate([3, 0, 2])\n                    sphere(1.5);\n                \n                // Mouth\n                translate([0, 0, -2])\n                    rotate([30, 0, 0])\n                    cylinder(h=1, r1=3, r2=3, $fn=16);\n            }\n        \n        // Buttons on torso\n        for (i = [1:3]) {\n            translate([0, 8, leg_length + body_height - 15 + i * 10])\n                sphere(3);\n        }\n    }\n}\n\n// Generate the model\njumping_jack();",
    "renders": true
  },
  {
    "toy": "jackinthebox",
    "openscad_code": "// Jack-in-the-Box Toy - Medium Complexity\n// Overall dimensions: ~100mm diameter, ~110mm tall when closed\n\n$fn = 36; // Smooth curves for 3D printing\n\n// Main body - cylindrical box\nmodule box_body() {\n    difference() {\n        // Outer cylinder with 2mm walls\n        cylinder(h = 70, r = 50, center = false);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h = 66, r = 48, center = false);\n        \n        // Bottom opening for spring mechanism\n        translate([0, 0, -1])\n            cylinder(h = 5, r = 20, center = false);\n    }\n}\n\n// Box lid with handle\nmodule box_lid() {\n    union() {\n        // Main lid disk\n        difference() {\n            cylinder(h = 8, r = 52, center = false);\n            translate([0, 0, 2])\n                cylinder(h = 6, r = 48, center = false);\n        }\n        \n        // Handle on top\n        translate([0, 0, 8])\n            rotate_extrude(angle = 360, $fn = 20)\n                translate([20, 0, 0])\n                    circle(r = 3);\n    }\n}\n\n// Spring mechanism (simplified coil)\nmodule spring() {\n    color(\"gold\")\n    for (i = [0:5:50]) {\n        rotate([0, 0, i * 15])\n            translate([15 * sin(i/5), 15 * cos(i/5), i])\n                cylinder(h = 3, r = 2, center = false);\n    }\n}\n\n// Clown head\nmodule clown_head() {\n    union() {\n        // Main head sphere\n        sphere(r = 25);\n        \n        // Nose\n        color(\"red\")\n        translate([0, 22, 5])\n            sphere(r = 5);\n        \n        // Eyes\n        color(\"white\")\n        translate([-8, 20, 8])\n            sphere(r = 4);\n        translate([8, 20, 8])\n            sphere(r = 4);\n        \n        // Eye pupils\n        color(\"black\")\n        translate([-8, 22, 8])\n            sphere(r = 2);\n        translate([8, 22, 8])\n            sphere(r = 2);\n        \n        // Mouth\n        color(\"red\")\n        translate([0, 22, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r1 = 8, r2 = 0, center = false);\n        \n        // Hat\n        color(\"blue\")\n        translate([0, 0, 25])\n            cylinder(h = 20, r1 = 20, r2 = 10, center = false);\n        \n        // Pom pom on hat\n        color(\"red\")\n        translate([0, 0, 45])\n            sphere(r = 5);\n    }\n}\n\n// Decorative stripes around box\nmodule box_stripes() {\n    color(\"red\")\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([49, 0, 10])\n                cube([2, 5, 50], center = true);\n    }\n}\n\n// Hinge for lid\nmodule box_hinge() {\n    translate([50, 0, 60])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = 2, center = false);\n    \n    translate([-50, 0, 60])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = 2, center = false);\n}\n\n// Wind-up key\nmodule windup_key() {\n    translate([50, 0, 35])\n        rotate([90, 0, 0])\n            union() {\n                // Key shaft\n                cylinder(h = 15, r = 3, center = false);\n                \n                // Key handle\n                translate([0, 0, 15])\n                    rotate_extrude(angle = 360, $fn = 20)\n                        translate([8, 0, 0])\n                            circle(r = 2);\n            }\n}\n\n// Base assembly\ncolor(\"yellow\") box_body();\ncolor(\"green\") translate([0, 0, 70]) box_lid();\ncolor(\"silver\") translate([0, 0, 10]) spring();\ncolor(\"beige\") translate([0, 0, 65]) clown_head();\ncolor(\"red\") box_stripes();\ncolor(\"gray\") box_hinge();\ncolor(\"gold\") windup_key();",
    "renders": true
  },
  {
    "toy": "popgun",
    "openscad_code": "// Popgun Toy - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm long, ~40mm wide, ~80mm high\n\n// Parameters\nbarrel_d = 20;\nbarrel_l = 90;\nhandle_h = 60;\nhandle_w = 12;\nhandle_d = 20;\ntrigger_gap = 8;\nwall = 2;\n\n// Colors\ncolor_pop = \"red\";\ncolor_handle = \"brown\";\n\nmodule popgun() {\n    union() {\n        // Main barrel assembly\n        translate([0,0,0])\n            barrel();\n\n        // Handle/grip\n        translate([0,0,-handle_h/2])\n            handle();\n\n        // Trigger guard and trigger\n        translate([-barrel_d/2-5,0,-handle_h/2+10])\n            trigger_assembly();\n\n        // Muzzle flare\n        translate([barrel_l/2,0,0])\n            muzzle();\n\n        // Rear sight\n        translate([-barrel_l/2+5,0,barrel_d/2+5])\n            sight();\n\n        // Front sight\n        translate([barrel_l/2-5,0,barrel_d/2+5])\n            sight();\n    }\n}\n\nmodule barrel() {\n    color(color_pop)\n    union() {\n        // Main barrel tube\n        difference() {\n            cylinder(h=barrel_l, d=barrel_d, center=true);\n            cylinder(h=barrel_l+2, d=barrel_d-2*wall, center=true);\n        }\n\n        // Barrel rings for grip\n        for(i=[-barrel_l/2+15:20:barrel_l/2-15]) {\n            translate([i,0,0])\n                cylinder(h=3, d=barrel_d+2, center=true);\n        }\n    }\n}\n\nmodule handle() {\n    color(color_handle)\n    difference() {\n        // Main grip\n        cube([handle_d, handle_w, handle_h], center=true);\n\n        // Finger grooves\n        for(i=[-handle_h/2+10:12:handle_h/2-10]) {\n            translate([0,0,i])\n                difference() {\n                    cube([handle_d, handle_w, 3], center=true);\n                    translate([0,0,0])\n                        cube([handle_d+2, handle_w-4, 5], center=true);\n                }\n        }\n    }\n}\n\nmodule trigger_assembly() {\n    union() {\n        // Trigger guard\n        difference() {\n            cylinder(h=handle_d+4, d=20, center=true);\n            cylinder(h=handle_d+6, d=20-2*wall, center=true);\n        }\n\n        // Trigger\n        translate([0,0,-2])\n            cube([wall+2, trigger_gap, 15], center=true);\n    }\n}\n\nmodule muzzle() {\n    color(color_pop)\n    difference() {\n        // Muzzle flare\n        cylinder(h=5, d=barrel_d+6, center=true);\n        cylinder(h=7, d=barrel_d-2*wall, center=true);\n    }\n}\n\nmodule sight() {\n    union() {\n        // Sight base\n        cube([8, wall, 4], center=true);\n        \n        // Sight post\n        translate([0,0,2])\n            cube([2, wall, 3], center=true);\n    }\n}\n\n// Render the popgun\npopgun();",
    "renders": true
  },
  {
    "toy": "bow",
    "openscad_code": "// Realistic Toy Bow - Medium Complexity\n// 3D printable bow toy with structural elements and realistic proportions\n\nmodule bow_limb(thickness=2) {\n    // Main curved limb of the bow\n    hull() {\n        translate([0, -2, 0]) cylinder(h=thickness, r=3, $fn=8);\n        translate([0, 2, 0]) cylinder(h=thickness, r=4, $fn=8);\n    }\n}\n\nmodule bow_grip() {\n    // Central grip/handle with ergonomic shape\n    difference() {\n        // Main grip body\n        hull() {\n            translate([-3, -8, 0]) cylinder(h=6, r=5, $fn=16);\n            translate([3, -8, 0]) cylinder(h=6, r=5, $fn=16);\n            translate([0, 8, 0]) cylinder(h=6, r=6, $fn=16);\n        }\n        \n        // Finger grooves\n        for(i=[-1, 0, 1]) {\n            translate([i*4, 2, -1]) cylinder(h=8, r=1.5, $fn=8);\n        }\n    }\n}\n\nmodule bow_string() {\n    // String connecting the bow limbs\n    linear_extrude(height=1.5) {\n        polygon(points=[\n            [-40, 0], [-38, -2], [-35, -1], [-30, 0], [-25, 1], [-20, 1.5],\n            [-15, 1.8], [-10, 2], [-5, 2], [0, 2], [5, 2], [10, 2],\n            [15, 1.8], [20, 1.5], [25, 1], [30, 0], [35, -1], [38, -2], [40, 0]\n        ]);\n    }\n}\n\nmodule limb_tip() {\n    // Decorative tip for bow limbs\n    difference() {\n        // Main tip shape\n        hull() {\n            cylinder(h=4, r1=3, r2=2, $fn=8);\n            translate([0, 0, 4]) cylinder(h=2, r1=2, r2=1, $fn=8);\n        }\n        \n        // String notch\n        translate([0, 1.5, 2]) cube([1, 3, 2], center=true);\n    }\n}\n\nmodule arrow_rest() {\n    // Small rest for the arrow\n    translate([0, 8, 3]) {\n        difference() {\n            // Main rest body\n            cube([8, 2, 1], center=true);\n            \n            // Arrow groove\n            translate([0, 0, 0.5]) cube([2, 2, 1], center=true);\n        }\n    }\n}\n\nmodule reinforcement_ring(pos=[0, 0, 0]) {\n    // Decorative reinforcement rings\n    translate(pos) {\n        difference() {\n            cylinder(h=2, r=4.5, $fn=16);\n            cylinder(h=3, r=3.5, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Left limb\n    translate([-45, 0, 0]) {\n        rotate([0, 0, -20]) {\n            union() {\n                limb_tip();\n                translate([0, 0, 3]) rotate([0, 0, 20]) bow_limb();\n                reinforcement_ring([0, -15, 3]);\n            }\n        }\n    }\n    \n    // Right limb\n    translate([45, 0, 0]) {\n        rotate([0, 0, 20]) {\n            mirror([1, 0, 0]) {\n                union() {\n                    limb_tip();\n                    translate([0, 0, 3]) rotate([0, 0, -20]) bow_limb();\n                    reinforcement_ring([0, -15, 3]);\n                }\n            }\n        }\n    }\n    \n    // Central grip\n    translate([0, -5, 0]) bow_grip();\n    \n    // Arrow rest\n    arrow_rest();\n    \n    // String (positioned slightly above limbs)\n    translate([0, 0, 4.5]) bow_string();\n    \n    // Additional structural reinforcements\n    reinforcement_ring([-25, -10, 3]);\n    reinforcement_ring([25, -10, 3]);\n}",
    "renders": true
  },
  {
    "toy": "pinwheel",
    "openscad_code": "// Pinwheel Toy - Realistic Style\n// Medium complexity 3D printable pinwheel toy\n\n// Parameters\npin_radius = 3;\npin_length = 40;\nhandle_length = 80;\nhandle_diameter = 8;\nwheel_diameter = 100;\nwheel_thickness = 5;\nblade_count = 6;\nblade_width = 25;\nblade_length = 40;\nhub_diameter = 15;\nhub_thickness = 10;\naxle_clearance = 1;\nwall_thickness = 2;\n\n// Main assembly\nmodule pinwheel_toy() {\n    // Handle with grip texture\n    translate([0, 0, -handle_length/2]) {\n        // Main handle shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [0:8]) {\n            translate([0, 0, -handle_length/2 + i*10]) {\n                cylinder(h=2, d=handle_diameter + 2, $fn=32);\n            }\n        }\n    }\n    \n    // Pin shaft\n    translate([0, 0, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=pin_length, d=pin_radius*2, $fn=32);\n            \n            // Pin head\n            translate([0, 0, pin_length]) {\n                sphere(d=pin_radius*3, $fn=32);\n            }\n        }\n    }\n    \n    // Rotating wheel assembly\n    translate([0, pin_radius + wheel_thickness/2 + 2, 0]) {\n        rotate([0, 90, 0]) {\n            // Wheel hub with bearing\n            difference() {\n                cylinder(h=hub_thickness, d=hub_diameter, $fn=32);\n                translate([0, 0, -1]) {\n                    cylinder(h=hub_thickness + 2, d=pin_radius*2 + axle_clearance, $fn=32);\n                }\n            }\n            \n            // Blades\n            for(i = [0:blade_count-1]) {\n                rotate([0, 0, i*360/blade_count]) {\n                    translate([hub_diameter/2 + blade_length/2, 0, 0]) {\n                        // Blade body\n                        cube([blade_length, blade_width, wheel_thickness], center=true);\n                        \n                        // Blade reinforcement\n                        translate([-blade_length/2, 0, 0]) {\n                            cube([wall_thickness*2, blade_width - 4, wheel_thickness + 2], center=true);\n                        }\n                        \n                        // Blade tip curve\n                        translate([blade_length/2, 0, 0]) {\n                            rotate([0, 90, 0]) {\n                                cylinder(h=blade_width - 4, r=3, $fn=16);\n                            }\n                        }\n                    }\n                    \n                    // Decorative center ring\n                    translate([hub_diameter/2 + blade_length/4, 0, wheel_thickness/2 + 1]) {\n                        cylinder(h=1, d=blade_width/2, $fn=16);\n                    }\n                }\n            }\n            \n            // Outer rim for stability\n            difference() {\n                cylinder(h=wheel_thickness + 4, d=wheel_diameter, $fn=64);\n                cylinder(h=wheel_thickness + 6, d=wheel_diameter - wall_thickness*2, $fn=64);\n            }\n        }\n    }\n    \n    // Safety cap on pin end\n    translate([0, pin_radius + wheel_thickness/2 + 2, 0]) {\n        rotate([0, 90, 0]) {\n            translate([0, 0, -hub_thickness/2 - 5]) {\n                difference() {\n                    cylinder(h=5, d=hub_diameter*0.8, $fn=32);\n                    translate([0, 0, -1]) {\n                        cylinder(h=7, d=pin_radius*2, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the toy\npinwheel_toy();",
    "renders": true
  },
  {
    "toy": "balloon",
    "openscad_code": "// Toy Balloon – OpenSCAD\n// Dimensions: ≈ 100 mm tall, 3D-printable with 2 mm walls\n\n$fa = 2;\n$fs = 0.5;\n\nmodule balloon_shell() {\n    // Main inflated body – 2 mm thick shell for printing\n    difference() {\n        scale([1, 1, 1.3]) sphere(d = 70);         // outer\n        scale([1, 1, 1.3]) sphere(d = 66);         // inner\n    }\n}\n\nmodule balloon_knot() {\n    // Small rolled knot at the bottom\n    translate([0, 0, -38])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 15, d1 = 12, d2 = 8);\n        cylinder(h = 16, d1 = 8, d2 = 4);          // hollow\n    }\n}\n\nmodule string_segment(h) {\n    // Single segment of the string\n    cylinder(h = h, d = 2.2, $fn = 8);\n}\n\nmodule string() {\n    // Coiled toy string hanging from knot\n    for (i = [0 : 9]) {\n        translate([3*sin(i*35), 3*cos(i*35), -40 - 3*i])\n        rotate([0, 0, i*35])\n        string_segment(3);\n    }\n}\n\nmodule highlight_stripe(a) {\n    // Stylised printed highlight band\n    rotate([0, 0, a])\n    translate([0, -35.1, 0])\n    scale([1.02, 0.2, 1.02])\n    sphere(d = 70);\n}\n\nmodule highlights() {\n    // Three shiny printed bands\n    for (ang = [0 : 120 : 240])\n    color(\"lightblue\")\n    highlight_stripe(ang);\n}\n\nmodule toy_balloon() {\n    union() {\n        balloon_shell();\n        balloon_knot();\n        string();\n        highlights();\n    }\n}\n\ntoy_balloon();",
    "renders": true
  },
  {
    "toy": "bubble",
    "openscad_code": "// Realistic Bubble Wand Toy (Medium Complexity)\n// A complete 3D printable bubble wand with reservoir, wand, and decorative elements\n\n$fn = 32;\n\nmodule handle() {\n    // Main handle - cylindrical with ergonomic grip\n    difference() {\n        // Main handle cylinder\n        cylinder(h=80, d1=25, d2=22, center=false);\n        \n        // Grip rings - subtract for better grip\n        for(i = [10:15:70]) {\n            translate([0, 0, i])\n                cylinder(h=3, d=20, center=false);\n        }\n        \n        // Hanging hole\n        translate([0, 12, 75])\n            rotate([90, 0, 0])\n                cylinder(h=30, d=5, center=true);\n    }\n}\n\nmodule reservoir() {\n    // Bubble solution reservoir\n    difference() {\n        union() {\n            // Main reservoir body\n            translate([0, 0, 80])\n                sphere(d=45);\n            \n            // Neck for wand storage\n            translate([0, 0, 80])\n                cylinder(h=15, d1=30, d2=35, center=false);\n        }\n        \n        // Hollow center\n        translate([0, 0, 80])\n            sphere(d=38);\n        \n        // Fill opening\n        translate([0, 0, 102])\n            cylinder(h=10, d=15, center=false);\n    }\n}\n\nmodule wand_rod() {\n    // Main wand rod\n    cylinder(h=90, d=5, center=false);\n}\n\nmodule wand_ring() {\n    // Bubble ring at end of wand\n    translate([0, 0, 90])\n        difference() {\n            // Outer ring\n            cylinder(h=3, d=35, center=true);\n            \n            // Inner opening\n            translate([0, 0, -1])\n                cylinder(h=5, d=30, center=true);\n            \n            // Decorative spokes\n            for(i = [0:60:359]) {\n                rotate([0, 0, i])\n                    translate([12, 0, 0])\n                        cube([24, 1.5, 3], center=true);\n            }\n        }\n}\n\nmodule cap() {\n    // Cap for reservoir\n    difference() {\n        // Main cap shape\n        translate([0, 0, 107])\n            cylinder(h=12, d1=20, d2=18, center=false);\n        \n        // Internal thread space\n        translate([0, 0, 107])\n            cylinder(h=10, d=13, center=false);\n        \n        // Grip ridges\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([9, 0, 111])\n                    cube([2, 2, 6], center=true);\n        }\n    }\n}\n\nmodule decorative_bubbles() {\n    // Decorative bubble elements on reservoir\n    translate([15, 15, 85])\n        sphere(d=8);\n    translate([-12, -10, 90])\n        sphere(d=6);\n    translate([10, -15, 87])\n        sphere(d=7);\n    translate([-8, 18, 92])\n        sphere(d=5);\n}\n\n// Assembly\nunion() {\n    // Handle and reservoir\n    handle();\n    reservoir();\n    \n    // Wand assembly - positioned as if inserted\n    translate([0, 0, 95])\n        rotate([0, 20, 0])\n            union() {\n                wand_rod();\n                wand_ring();\n            }\n    \n    // Cap - slightly offset to show it's removable\n    cap();\n    \n    // Decorative elements\n    decorative_bubbles();\n}",
    "renders": true
  },
  {
    "toy": "plane",
    "openscad_code": "// Toy Airplane - Realistic Medium Complexity\n// Wingspan ~120mm, Length ~110mm\n\nmodule wing_section(length, width, thickness) {\n    difference() {\n        // Main wing shape with rounded tips\n        hull() {\n            translate([0, -width/2, 0]) cube([length*0.9, thickness, thickness]);\n            translate([0, width/2, 0]) cube([length*0.9, thickness, thickness]);\n            translate([length*0.95, 0, 0]) sphere(d=thickness*2);\n        }\n        // Cut airfoil shape\n        difference() {\n            translate([length*0.1, -width/2-1, -thickness/2-1]) \n                cube([length*0.8, width+2, thickness*2]);\n            translate([length*0.1, -width/2-1, -thickness/4]) \n                cube([length*0.8, width+2, thickness*1.5]);\n        }\n    }\n}\n\nmodule fuselage() {\n    // Main body\n    hull() {\n        // Nose\n        translate([0, 0, 0]) sphere(d=18);\n        // Tail\n        translate([-90, 0, 0]) sphere(d=14);\n        // Mid section\n        translate([-45, 0, 0]) sphere(d=16);\n    }\n    \n    // Cockpit\n    difference() {\n        translate([-20, 0, 8]) sphere(d=14);\n        translate([-30, 0, 8]) sphere(d=14);\n    }\n    \n    // Engine nacelles (simplified)\n    for(side = [-1, 1]) {\n        translate([-35, side*25, -8]) \n            cylinder(h=12, d1=10, d2=8);\n    }\n}\n\nmodule tail_section() {\n    // Vertical stabilizer\n    difference() {\n        translate([-85, 0, 15]) cube([15, 3, 25]);\n        translate([-85, -2, 15]) cube([15, 7, 20]);\n    }\n    \n    // Horizontal stabilizer\n    wing_section(35, 20, 3);\n}\n\nmodule landing_gear() {\n    // Main gear supports\n    for(side = [-1, 1]) {\n        translate([-40, side*20, -12]) {\n            // Wheel\n            rotate([0, 90, 0]) \n                cylinder(h=6, d=8);\n            // Strut\n            translate([0, 0, -3]) \n                cylinder(h=8, d=3);\n        }\n    }\n    \n    // Nose gear\n    translate([-5, 0, -12]) {\n        rotate([0, 90, 0]) \n            cylinder(h=6, d=6);\n        translate([0, 0, -3]) \n            cylinder(h=8, d=3);\n    }\n}\n\nmodule propeller() {\n    // Spinner\n    translate([10, 0, 0]) \n        cylinder(h=8, d1=10, d2=8);\n    \n    // Blades\n    for(i = [0:2]) {\n        rotate([0, 0, i*120]) {\n            translate([8, 0, 0]) \n                rotate([0, 90, 0]) \n                    cylinder(h=25, d1=8, d2=2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Fuselage\n    fuselage();\n    \n    // Wings\n    translate([-35, 0, 0]) {\n        rotate([0, 0, 0]) \n            wing_section(60, 60, 4);\n    }\n    \n    // Tail\n    translate([-85, 0, 12]) {\n        tail_section();\n    }\n    \n    // Landing gear\n    landing_gear();\n    \n    // Propeller\n    propeller();\n    \n    // Wing supports\n    for(side = [-1, 1]) {\n        translate([-35, side*20, -4]) \n            cylinder(h=8, d=5);\n    }\n}",
    "renders": true
  },
  {
    "toy": "helicopter",
    "openscad_code": "// Helicopter Toy (realistic style, medium complexity)\n// Dimensions: ~110 mm long, ~20 mm wide, ~35 mm tall\n// Wall thickness: 2 mm for 3D printing\n\n$fn = 32;\n\n// Main assembly\nmodule helicopter() {\n    // Fuselage\n    union() {\n        // Main body\n        translate([0, 0, 10]) {\n            hull() {\n                // Front nose\n                translate([40, 0, 0])\n                    scale([1, 0.6, 0.6])\n                    sphere(r = 10);\n                // Main cabin\n                translate([0, 0, 0])\n                    scale([1.2, 1, 0.8])\n                    sphere(r = 12);\n                // Tail boom\n                translate([-50, 0, 0])\n                    rotate([0, 10, 0])\n                    scale([2, 0.7, 0.7])\n                    cylinder(h = 30, r1 = 8, r2 = 5);\n            }\n        }\n        \n        // Landing skids\n        translate([0, 0, 0]) {\n            difference() {\n                // Left skid\n                translate([0, -15, 0])\n                    cube([80, 4, 3], center = true);\n                // Left skid hollow\n                translate([0, -15, 0])\n                    cube([76, 2, 1.5], center = true);\n            }\n            difference() {\n                // Right skid\n                translate([0, 15, 0])\n                    cube([80, 4, 3], center = true);\n                // Right skid hollow\n                translate([0, 15, 0])\n                    cube([76, 2, 1.5], center = true);\n            }\n            // Cross supports\n            for(x = [-30, 0, 30]) {\n                difference() {\n                    translate([x, 0, 1.5])\n                        cube([4, 30, 3], center = true);\n                    translate([x, 0, 1.5])\n                        cube([2, 28, 1.5], center = true);\n                }\n            }\n        }\n        \n        // Main rotor mast\n        translate([0, 0, 25]) {\n            difference() {\n                cylinder(h = 15, r = 4);\n                cylinder(h = 15, r = 2);\n            }\n        }\n        \n        // Main rotor blades (4 blades)\n        translate([0, 0, 40]) {\n            rotate([0, 0, 0])\n                rotor_blade();\n            rotate([0, 0, 90])\n                rotor_blade();\n            rotate([0, 0, 180])\n                rotor_blade();\n            rotate([0, 0, 270])\n                rotor_blade();\n        }\n        \n        // Tail rotor\n        translate([-60, 0, 12]) {\n            rotate([0, 90, 0])\n                rotate([0, 0, 0])\n                    tail_rotor_blade();\n            rotate([0, 90, 0])\n                rotate([0, 0, 120])\n                    tail_rotor_blade();\n            rotate([0, 90, 0])\n                rotate([0, 0, 240])\n                    tail_rotor_blade();\n        }\n        \n        // Tail fin\n        translate([-60, 0, 22]) {\n            difference() {\n                cube([2, 15, 10]);\n                translate([0.5, 0, 2])\n                    cube([1, 13, 6]);\n            }\n        }\n        \n        // Cabin windows\n        translate([10, 0, 15]) {\n            difference() {\n                sphere(r = 8);\n                sphere(r = 6);\n            }\n        }\n        translate([-10, 8, 15]) {\n            difference() {\n                sphere(r = 6);\n                sphere(r = 4.5);\n            }\n        }\n        translate([-10, -8, 15]) {\n            difference() {\n                sphere(r = 6);\n                sphere(r = 4.5);\n            }\n        }\n    }\n}\n\n// Rotor blade module\nmodule rotor_blade() {\n    difference() {\n        hull() {\n            cube([4, 4, 2], center = true);\n            translate([40, 0, 0])\n                cube([4, 2, 1], center = true);\n        }\n        hull() {\n            cube([2.5, 2.5, 1], center = true);\n            translate([40, 0, 0])\n                cube([2.5, 1.5, 0.5], center = true);\n        }\n    }\n}\n\n// Tail rotor blade module\nmodule tail_rotor_blade() {\n    difference() {\n        hull() {\n            cube([3, 3, 1.5], center = true);\n            translate([15, 0, 0])\n                cube([3, 1.5, 0.75], center = true);\n        }\n        hull() {\n            cube([2, 2, 1], center = true);\n            translate([15, 0, 0])\n                cube([2, 1, 0.5], center = true);\n        }\n    }\n}\n\n// Generate the model\nhelicopter();",
    "renders": true
  },
  {
    "toy": "spaceship",
    "openscad_code": "// Realistic toy spaceship - medium complexity\n// Overall dimensions: ~120mm long, ~80mm wide, ~35mm tall\n\n$fn=32;\n\nmodule main_body() {\n    // Central fuselage - 2mm thick walls\n    difference() {\n        translate([0,0,12]) scale([1,0.6,0.4]) sphere(d=70);\n        translate([0,0,12]) scale([0.9,0.5,0.35]) sphere(d=70);\n    }\n}\n\nmodule cockpit() {\n    // Forward cockpit dome\n    translate([-25,0,15]) scale([1.2,1,0.8]) sphere(d=30);\n    // Cockpit window detail\n    difference() {\n        translate([-25,0,15]) scale([1.1,0.9,0.7]) sphere(d=30);\n        translate([-25,0,15]) scale([1.05,0.85,0.65]) sphere(d=30);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([0,-35,8]) {\n        difference() {\n            rotate([0,0,20]) cube([45,25,6]);\n            translate([5,5,-1]) cube([35,15,8]);\n        }\n    }\n    // Right wing\n    translate([0,35,8]) {\n        difference() {\n            rotate([0,0,-20]) cube([45,25,6]);\n            translate([5,-5,-1]) cube([35,15,8]);\n        }\n    }\n}\n\nmodule engines() {\n    // Rear engine cluster\n    for(i=[-1,0,1]) {\n        translate([30,i*12,8]) {\n            cylinder(h=25,d1=18,d2=14);\n            // Engine nozzle\n            translate([0,0,-5]) cylinder(h=8,d1=14,d2=16);\n            // Engine detail rings\n            for(j=[5,15,20]) {\n                translate([0,0,j]) cylinder(h=2,d=19);\n            }\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Front landing strut\n    translate([-20,0,-2]) {\n        cylinder(h=10,d=6);\n        // Wheel\n        translate([0,0,-5]) rotate([90,0,0]) cylinder(h=8,d=12);\n    }\n    // Rear landing struts\n    for(side=[-1,1]) {\n        translate([15,side*25,-2]) {\n            cylinder(h=10,d=6);\n            translate([0,0,-5]) rotate([90,0,0]) cylinder(h=8,d=12);\n        }\n    }\n}\n\nmodule antenna() {\n    // Communication dish\n    translate([-30,0,22]) {\n        cylinder(h=2,d=8);\n        translate([0,0,2]) sphere(d=12);\n    }\n}\n\nmodule wing_details() {\n    // Wing tip lights\n    for(side=[-1,1]) {\n        translate([-15,side*45,11]) {\n            sphere(d=6);\n            translate([0,0,3]) sphere(d=4);\n        }\n    }\n    // Wing surface details\n    for(side=[-1,1]) {\n        translate([5,side*30,15]) {\n            cube([30,2,3]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    main_body();\n    cockpit();\n    wings();\n    engines();\n    landing_gear();\n    antenna();\n    wing_details();\n}",
    "renders": true
  },
  {
    "toy": "robot",
    "openscad_code": "// Robot Toy - Medium Complexity\n// Overall height ~100mm\n\n$fn = 32;\nwall = 2;\n\nmodule head() {\n    // Main head block\n    difference() {\n        cube([28, 26, 30], center=true);\n        translate([0, 0, 15])\n            cube([24, 22, 30], center=true);\n    }\n    \n    // Eyes\n    translate([-8, 11, 0])\n        sphere(d=6);\n    translate([8, 11, 0])\n        sphere(d=6);\n        \n    // Antenna\n    translate([0, 0, 17])\n        cylinder(h=12, d1=6, d2=2);\n}\n\nmodule torso() {\n    // Main body\n    difference() {\n        cube([40, 30, 45], center=true);\n        translate([0, 0, -22])\n            cube([36, 26, 45], center=true);\n    }\n    \n    // Control panel\n    translate([0, -14, 0])\n        difference() {\n            cube([20, 2, 8], center=true);\n            translate([0, 1, 0])\n                cube([16, 2, 6], center=true);\n        }\n}\n\nmodule arm(side=1) {\n    translate([side*22, 0, 0]) {\n        rotate([0, 0, side*10]) {\n            // Shoulder joint\n            sphere(d=10);\n            \n            // Upper arm\n            translate([0, 0, -15])\n                rotate([side*15, 0, 0])\n                    cylinder(h=25, d=8);\n                    \n            // Elbow\n            translate([0, 0, -30])\n                sphere(d=8);\n                \n            // Lower arm\n            translate([0, 0, -40])\n                rotate([side*15, 0, 0])\n                    cylinder(h=20, d=7);\n                    \n            // Hand\n            translate([0, 0, -52])\n                cube([8, 5, 4], center=true);\n        }\n    }\n}\n\nmodule leg(side=1) {\n    translate([side*10, 0, -52]) {\n        // Hip joint\n        sphere(d=12);\n        \n        // Upper leg\n        translate([0, 0, -20])\n            cylinder(h=30, d=10);\n            \n        // Knee\n        translate([0, 0, -38])\n            sphere(d=9);\n            \n        // Lower leg\n        translate([0, 0, -55])\n            cylinder(h=25, d=8);\n            \n        // Foot\n        translate([0, 0, -70])\n            cube([20, 12, 8], center=true);\n    }\n}\n\nmodule wheel(side=1) {\n    translate([side*15, 0, -78]) {\n        rotate([90, 0, 0])\n            cylinder(h=6, d=12);\n    }\n}\n\n// Assembly\nunion() {\n    // Head assembly\n    translate([0, 0, 60])\n        head();\n        \n    // Torso\n    torso();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Wheels for mobility\n    wheel(1);\n    wheel(-1);\n}",
    "renders": true
  },
  {
    "toy": "dinosaur",
    "openscad_code": "// Realistic Dinosaur Toy - Medium Complexity\n// Dimensions: ~120mm long, ~60mm high, ~40mm wide\n// Wall thickness: 2mm throughout\n\nmodule main_body() {\n    // Central torso\n    translate([0, 0, 20]) {\n        difference() {\n            scale([1.2, 0.8, 0.7]) sphere(d=50);\n            translate([0, 0, -15]) cube([60, 60, 30], center=true);\n        }\n    }\n}\n\nmodule neck() {\n    // Neck connecting to head\n    translate([-25, 0, 40]) {\n        rotate([0, 15, 0]) {\n            scale([1.5, 1, 1]) cylinder(h=25, d1=20, d2=15);\n        }\n    }\n}\n\nmodule head() {\n    // Dinosaur head with snout\n    translate([-45, 0, 50]) {\n        union() {\n            // Main head\n            sphere(d=25);\n            // Snout\n            translate([-10, 0, -5]) scale([2, 0.8, 0.8]) sphere(d=15);\n            // Jaw\n            translate([-5, 0, -12]) cube([20, 10, 8], center=true);\n            // Eyes\n            translate([-5, 8, 5]) sphere(d=5);\n            translate([-5, -8, 5]) sphere(d=5);\n        }\n    }\n}\n\nmodule tail() {\n    // Long tail with taper\n    translate([30, 0, 15]) {\n        rotate([0, -10, 0]) {\n            for(i = [0:5]) {\n                translate([i*8, 0, -i*2]) {\n                    scale([1, 1-i*0.1, 1-i*0.1]) {\n                        sphere(d=25-i*3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule leg(pos_x, pos_y, angle) {\n    // Single leg with foot\n    translate([pos_x, pos_y, 0]) {\n        rotate([0, 0, angle]) {\n            union() {\n                // Upper leg\n                translate([0, 0, 10]) cylinder(h=25, d1=12, d2=10);\n                // Lower leg\n                translate([0, 0, -5]) cylinder(h=20, d1=10, d2=8);\n                // Foot\n                translate([0, 0, -15]) scale([1.5, 2, 0.8]) sphere(d=12);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Four legs - two front, two back\n    leg(-15, 12, -15);\n    leg(-15, -12, 15);\n    leg(15, 12, -15);\n    leg(15, -12, 15);\n}\n\nmodule spine_plates() {\n    // Triangular plates along back\n    for(i = [-20:10:30]) {\n        translate([i, 0, 45+i*0.3]) {\n            rotate([0, 90, 0]) {\n                linear_extrude(height=2) {\n                    polygon(points=[[0,0], [5,10], [10,0]]);\n                }\n            }\n        }\n    }\n}\n\nmodule arms() {\n    // Small front arms\n    translate([-30, 10, 30]) {\n        rotate([0, 0, -45]) {\n            union() {\n                cylinder(h=15, d1=6, d2=4);\n                translate([0, 0, -8]) sphere(d=5);\n            }\n        }\n    }\n    translate([-30, -10, 30]) {\n        rotate([0, 0, 45]) {\n            union() {\n                cylinder(h=15, d1=6, d2=4);\n                translate([0, 0, -8]) sphere(d=5);\n            }\n        }\n    }\n}\n\n// Assemble the dinosaur\nunion() {\n    main_body();\n    neck();\n    head();\n    tail();\n    legs();\n    spine_plates();\n    arms();\n}",
    "renders": true
  },
  {
    "toy": "farm",
    "openscad_code": "// Toy Farm Shed - Medium Complexity, Realistic Style\n// Overall dimensions: 70mm x 50mm x 45mm (L x W x H)\n\nmodule wall(width, height, depth) {\n    difference() {\n        cube([width, height, depth]);\n        // Window cutout\n        translate([width*0.7, height*0.3, -1])\n            cube([width*0.2, height*0.3, depth+2]);\n    }\n}\n\nmodule roof_tile(x, y, z) {\n    translate([x, y, z])\n        cube([8, 3, 1.5]);\n}\n\nmodule roof() {\n    // Main roof structure\n    union() {\n        // Left slope\n        translate([-5, 0, 40])\n            rotate([0, 0, 30])\n            cube([60, 2, 35]);\n            \n        // Right slope  \n        translate([75, 0, 40])\n            rotate([0, 0, -30])\n            cube([60, 2, 35]);\n            \n        // Ridge cap\n        translate([35, 1, 57])\n            cube([10, 2, 5]);\n            \n        // Roof tiles pattern\n        for(i = [0:3]) {\n            for(j = [0:6]) {\n                roof_tile(-5 + j*10, 2, 40 - i*8);\n                roof_tile(75 - j*10, 2, 40 - i*8);\n            }\n        }\n    }\n}\n\nmodule door() {\n    // Main door panel\n    translate([2, -1, 0])\n        cube([10, 2, 25]);\n        \n    // Door handle\n    translate([9, 0, 12])\n        cylinder(h=2, r=1);\n        \n    // Horizontal planks\n    for(i = [0:3]) {\n        translate([2, -1, i*6])\n            cube([10, 2, 3]);\n    }\n}\n\nmodule window_shutters() {\n    // Left shutter\n    translate([49, -1.5, 15])\n        cube([6, 2, 12]);\n        \n    // Right shutter\n    translate([55, -1.5, 15])\n        cube([6, 2, 12]);\n        \n    // Shutter details\n    for(i = [0:1]) {\n        translate([49 + i*6, -1, 15])\n            cube([6, 2, 1]);\n        translate([49 + i*6, -1, 26])\n            cube([6, 2, 1]);\n    }\n}\n\nmodule foundation() {\n    // Concrete base\n    translate([-5, -5, -3])\n        cube([80, 60, 3]);\n        \n    // Support posts\n    for(pos = [[0,0], [70,0], [0,50], [70,50]]) {\n        translate([pos[0], pos[1], -3])\n            cylinder(h=3, r=2);\n    }\n}\n\nmodule barn() {\n    // Foundation\n    foundation();\n    \n    // Front wall with door\n    translate([0, 0, 0])\n        wall(70, 2, 40);\n    translate([5, 0, 0])\n        door();\n    translate([15, 0, 30])\n        window_shutters();\n    \n    // Back wall\n    translate([0, 48, 0])\n        wall(70, 2, 40);\n    \n    // Left wall\n    translate([0, 2, 0])\n        rotate([0, 0, 90])\n        wall(46, 2, 70);\n    \n    // Right wall\n    translate([68, 2, 0])\n        rotate([0, 0, 90])\n        wall(46, 2, 70);\n    \n    // Roof\n    roof();\n    \n    // Ventilation cupola\n    translate([30, 20, 57])\n        union() {\n            cube([10, 10, 8]);\n            translate([4, 4, 8])\n                cylinder(h=5, r=2);\n        }\n}\n\n// Scale for 3D printing\nscale([1, 1, 1])\n    barn();",
    "renders": true
  },
  {
    "toy": "zoo",
    "openscad_code": "// Zoo Toy Playset - Realistic Medium Complexity\n// Features: enclosure walls, entrance gate, animal platform, and toy animals\n\n// Base dimensions\nbase_w = 100;\nbase_d = 80;\nbase_h = 4;\n\n// Wall thickness\nwall_t = 2;\n\n// Enclosure parameters\nenclosure_w = 90;\nenclosure_d = 70;\nwall_h = 25;\n\n// Gate parameters\ngate_w = 20;\ngate_h = 20;\ngate_post_w = 3;\n\n// Animal platform\nplatform_w = 30;\nplatform_d = 20;\nplatform_h = 8;\n\n// Lion dimensions (toy style)\nlion_body_r = 6;\nlion_head_r = 4;\nlion_leg_r = 1.5;\nlion_leg_h = 5;\n\n// Elephant dimensions (toy style)\nelephant_body_r = 8;\nelephant_head_r = 5;\nelephant_trunk_l = 12;\nelephant_leg_r = 2;\nelephant_leg_h = 6;\n\n// Module for enclosure walls\nmodule enclosure_walls() {\n    difference() {\n        // Main enclosure\n        cube([enclosure_w, enclosure_d, wall_h]);\n        \n        // Hollow out center\n        translate([wall_t, wall_t, wall_t])\n            cube([enclosure_w-2*wall_t, enclosure_d-2*wall_t, wall_h]);\n        \n        // Gate opening\n        translate([(enclosure_w-gate_w)/2, -1, 0])\n            cube([gate_w, wall_t+1, gate_h]);\n    }\n}\n\n// Module for entrance gate\nmodule entrance_gate() {\n    // Left post\n    translate([(enclosure_w-gate_w)/2 - gate_post_w, -gate_post_w, 0])\n        cube([gate_post_w, gate_post_w, gate_h]);\n    \n    // Right post  \n    translate([(enclosure_w+gate_w)/2, -gate_post_w, 0])\n        cube([gate_post_w, gate_post_w, gate_h]);\n    \n    // Top beam\n    translate([(enclosure_w-gate_w)/2 - gate_post_w, -gate_post_w, gate_h-2])\n        cube([gate_w + 2*gate_post_w, gate_post_w, 2]);\n}\n\n// Module for animal platform\nmodule animal_platform() {\n    // Base platform\n    cube([platform_w, platform_d, platform_h]);\n    \n    // Steps\n    for(i = [0:1]) {\n        translate([platform_w - 10 - i*5, platform_d - 5, i*2.5])\n            cube([5 + i*5, 5, platform_h - i*2.5]);\n    }\n}\n\n// Module for toy lion\nmodule toy_lion() {\n    union() {\n        // Body\n        translate([0, 0, lion_leg_h])\n            sphere(r=lion_body_r);\n        \n        // Head\n        translate([0, lion_body_r + lion_head_r - 2, lion_leg_h + lion_body_r - 2])\n            sphere(r=lion_head_r);\n        \n        // Legs\n        for(x = [-lion_body_r/2, lion_body_r/2])\n            for(y = [-lion_body_r/2, lion_body_r/2]) {\n                translate([x, y, 0])\n                    cylinder(r=lion_leg_r, h=lion_leg_h);\n            }\n        \n        // Tail\n        translate([-lion_body_r, 0, lion_leg_h + lion_body_r/2])\n            rotate([90, 0, 45])\n                cylinder(r=1, h=8);\n    }\n}\n\n// Module for toy elephant\nmodule toy_elephant() {\n    union() {\n        // Body\n        translate([0, 0, elephant_leg_h])\n            sphere(r=elephant_body_r);\n        \n        // Head\n        translate([elephant_body_r + elephant_head_r - 3, 0, elephant_leg_h + elephant_body_r/2])\n            sphere(r=elephant_head_r);\n        \n        // Trunk\n        translate([elephant_body_r + elephant_head_r*2 - 3, 0, elephant_leg_h + elephant_body_r/2])\n            rotate([0, 90, 0])\n                cylinder(r=2, h=elephant_trunk_l);\n        \n        // Legs\n        for(x = [-elephant_body_r*0.7, elephant_body_r*0.7])\n            for(y = [-elephant_body_r*0.7, elephant_body_r*0.7]) {\n                translate([x, y, 0])\n                    cylinder(r=elephant_leg_r, h=elephant_leg_h);\n            }\n        \n        // Ears\n        translate([elephant_body_r, elephant_head_r, elephant_leg_h + elephant_body_r])\n            rotate([0, 0, 90])\n                cylinder(r=4, h=1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    cube([base_w, base_d, base_h]);\n    \n    // Enclosure walls\n    translate([(base_w-enclosure_w)/2, (base_d-enclosure_d)/2, base_h])\n        enclosure_walls();\n    \n    // Entrance gate\n    translate([(base_w-enclosure_w)/2, (base_d-enclosure_d)/2, base_h])\n        entrance_gate();\n    \n    // Animal platform\n    translate([(base_w-platform_w)/2, 15, base_h])\n        animal_platform();\n    \n    // Toy lion on platform\n    translate([(base_w-platform_w)/2 + platform_w/2 - 5, 25, base_h + platform_h])\n        scale([0.8, 0.8, 0.8])\n            toy_lion();\n    \n    // Toy elephant on ground\n    translate([20, base_d - 30, base_h])\n        scale([0.7, 0.7, 0.7])\n            toy_elephant();\n}",
    "renders": true
  },
  {
    "toy": "circus",
    "openscad_code": "// Circus Toy - Big Top Circus Tent\n// Medium complexity realistic style circus toy for 3D printing\n\n$fn = 32;\n\n// Main dimensions\ntent_base_diameter = 80;\ntent_height = 60;\nwall_thickness = 2;\npole_diameter = 4;\nflag_pole_height = 15;\n\n// Colors (for reference)\n// Red: #FF0000\n// White: #FFFFFF\n// Yellow: #FFFF00\n\nmodule circus_tent() {\n    // Main tent body - striped cone\n    union() {\n        // Base ring foundation\n        difference() {\n            cylinder(h=wall_thickness*2, d=tent_base_diameter+wall_thickness*2, center=true);\n            cylinder(h=wall_thickness*2+0.1, d=tent_base_diameter, center=true);\n        }\n        \n        // Main tent cone\n        difference() {\n            cylinder(h=tent_height, d1=tent_base_diameter, d2=0, center=false);\n            // Hollow interior\n            translate([0, 0, wall_thickness])\n            cylinder(h=tent_height-wall_thickness*2, d1=tent_base_diameter-wall_thickness*2, d2=4, center=false);\n        }\n        \n        // Entrance flap\n        translate([0, tent_base_diameter/2 - 10, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=25, d1=20, d2=15, center=true);\n            translate([0, 0, wall_thickness])\n            cylinder(h=25+0.2, d1=20-wall_thickness*2, d2=15-wall_thickness*2, center=true);\n        }\n        \n        // Flag pole on top\n        translate([0, 0, tent_height])\n        rotate([0, 0, 0])\n        cylinder(h=flag_pole_height, d=pole_diameter, center=false);\n        \n        // Flag\n        translate([pole_diameter/2+1, 0, tent_height+flag_pole_height-5])\n        rotate([0, 90, 0])\n        cube([15, 10, wall_thickness]);\n    }\n    \n    // Decorative stripes\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 0, wall_thickness])\n        color(\"red\")\n        difference() {\n            cylinder(h=tent_height-wall_thickness, d1=tent_base_diameter-wall_thickness*2, d2=4, center=false);\n            translate([0, 0, -0.1])\n            cylinder(h=tent_height-wall_thickness+0.2, d1=tent_base_dimension*2-wall_thickness*2-15, d2=1, center=false);\n        }\n    }\n    \n    // Support poles around perimeter\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([tent_base_diameter/2 - pole_diameter, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=tent_height-10, d=pole_diameter, center=true);\n    }\n    \n    // Base platform\n    translate([0, 0, -wall_thickness*2])\n    difference() {\n        cylinder(h=wall_thickness*2, d=tent_base_diameter+20, center=false);\n        cylinder(h=wall_thickness*2+0.1, d=tent_base_diameter+20-wall_thickness*2, center=false);\n    }\n    \n    // Circus sign\n    translate([0, -tent_base_diameter/2 - 15, tent_height/2])\n    rotate([0, 0, 0])\n    union() {\n        // Sign backing\n        cube([50, 5, 15], center=true);\n        \n        // Sign supports\n        translate([-20, 0, -10])\n        cube([5, 5, 20], center=true);\n        translate([20, 0, -10])\n        cube([5, 5, 20], center=true);\n    }\n}\n\n// Render the complete circus tent\ncircus_tent();",
    "renders": true
  },
  {
    "toy": "castle",
    "openscad_code": "// Castle Toy - Realistic Style, Medium Complexity\n// Approximate dimensions: 80x80x100mm\n\n$fn = 32;\n\n// Main castle body\nmodule castle_body() {\n    // Base platform\n    difference() {\n        cube([80, 80, 8], center=true);\n        translate([0, 0, 2]) cube([76, 76, 8], center=true);\n    }\n    \n    // Main walls\n    translate([0, 0, 4]) {\n        difference() {\n            cube([70, 70, 40], center=true);\n            translate([0, 0, 2]) cube([66, 66, 40], center=true);\n        }\n    }\n}\n\n// Corner towers\nmodule tower(x, y) {\n    translate([x, y, 0]) {\n        // Tower base\n        difference() {\n            cylinder(h=50, r=12);\n            translate([0, 0, 2]) cylinder(h=50, r=10);\n        }\n        \n        // Tower top\n        translate([0, 0, 48]) {\n            difference() {\n                cylinder(h=15, r=14);\n                translate([0, 0, 2]) cylinder(h=15, r=12);\n            }\n        }\n        \n        // Cone roof\n        translate([0, 0, 61]) {\n            cylinder(h=18, r1=14, r2=0);\n        }\n    }\n}\n\n// Battlements\nmodule battlements() {\n    for(i = [-30:10:30]) {\n        if(abs(i) != 30) {\n            // Front wall\n            translate([i, 35, 44]) cube([8, 6, 8], center=true);\n            // Back wall\n            translate([i, -35, 44]) cube([8, 6, 8], center=true);\n            // Side walls\n            translate([35, i, 44]) cube([6, 8, 8], center=true);\n            translate([-35, i, 44]) cube([6, 8, 8], center=true);\n        }\n    }\n}\n\n// Gatehouse\nmodule gatehouse() {\n    translate([0, 35, 0]) {\n        // Main gate structure\n        difference() {\n            cube([30, 15, 35], center=true);\n            translate([0, 0, 2]) cube([26, 11, 35], center=true);\n        }\n        \n        // Gate arch\n        translate([0, 8, 10]) {\n            difference() {\n                cube([16, 4, 20], center=true);\n                translate([0, 0, 10]) cylinder(h=6, r=8, center=true);\n            }\n        }\n        \n        // Gatehouse battlements\n        for(i = [-10:10:10]) {\n            translate([i, 42, 34]) cube([8, 6, 8], center=true);\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    // Front windows\n    for(pos = [[-20, 35], [20, 35], [-20, -35], [20, -35]]) {\n        translate([pos[0], pos[1], 25]) {\n            difference() {\n                cube([10, 2, 12], center=true);\n                translate([0, 0, 2]) cube([8, 2.1, 10], center=true);\n            }\n        }\n    }\n    \n    // Side windows\n    for(pos = [[35, -15], [35, 15], [-35, -15], [-35, 15]]) {\n        translate([pos[0], pos[1], 25]) {\n            difference() {\n                cube([2, 10, 12], center=true);\n                translate([0, 0, 2]) cube([2.1, 8, 10], center=true);\n            }\n        }\n    }\n}\n\n// Flag\nmodule flag() {\n    translate([0, 0, 79]) {\n        // Flag pole\n        cylinder(h=25, r=1.5);\n        \n        // Flag\n        translate([0, 1.5, 25]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cube([15, 10, 1], center=true);\n                    translate([5, 0, 0]) cube([3, 8, 1.1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    castle_body();\n    \n    // Four corner towers\n    tower(30, 30);\n    tower(30, -30);\n    tower(-30, 30);\n    tower(-30, -30);\n    \n    battlements();\n    gatehouse();\n    windows();\n    flag();\n}",
    "renders": true
  },
  {
    "toy": "fort",
    "openscad_code": "// Toy Fort - Realistic Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\nfort_width = 80;\nfort_depth = 60;\nfort_height = 50;\n\nwall_thickness = 2;\nbase_height = 8;\ntower_size = 20;\nparapet_height = 6;\n\nmodule base() {\n    difference() {\n        // Main base platform\n        cube([fort_width, fort_depth, base_height], center=true);\n        \n        // Hollow out base\n        translate([0, 0, -1])\n            cube([fort_width - wall_thickness*2, \n                  fort_depth - wall_thickness*2, \n                  base_height + 2], center=true);\n    }\n}\n\nmodule tower(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        difference() {\n            // Tower body\n            cylinder(h=fort_height, r=tower_size/2, center=false);\n            \n            // Hollow tower\n            translate([0, 0, wall_thickness])\n                cylinder(h=fort_height, r=tower_size/2 - wall_thickness, center=false);\n        }\n        \n        // Tower top with battlements\n        translate([0, 0, fort_height]) {\n            difference() {\n                cylinder(h=parapet_height, r=tower_size/2, center=false);\n                \n                // Battlements cutouts\n                for(i = [0:7]) {\n                    rotate([0, 0, i * 45])\n                        translate([tower_size/2 - wall_thickness, \n                                  -wall_thickness, \n                                  -1])\n                            cube([wall_thickness*2, wall_thickness*2, parapet_height + 2]);\n                }\n            }\n        }\n    }\n}\n\nmodule wall(x_pos, y_pos, width, height, rotation=0) {\n    translate([x_pos, y_pos, base_height]) {\n        rotate([0, 0, rotation]) {\n            difference() {\n                cube([width, wall_thickness*2, height], center=true);\n                \n                // Doorway\n                translate([0, 0, height/4])\n                    cube([width/3, wall_thickness*2 + 1, height/2], center=true);\n                \n                // Arrow slits\n                for(i = [-1:1]) {\n                    translate([i * width/4, 0, height*0.7])\n                        cube([width/10, wall_thickness*2 + 1, height/5], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule flag() {\n    translate([0, 0, fort_height + parapet_height]) {\n        // Flag pole\n        cylinder(h=15, r=1, center=false);\n        \n        // Flag\n        translate([0, 1.5, 12])\n            cube([8, wall_thickness, 6], center=false);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Corner towers\n    tower(fort_width/2 - tower_size/2, fort_depth/2 - tower_size/2);\n    tower(-fort_width/2 + tower_size/2, fort_depth/2 - tower_size/2);\n    tower(fort_width/2 - tower_size/2, -fort_depth/2 + tower_size/2);\n    tower(-fort_width/2 + tower_size/2, -fort_depth/2 + tower_size/2);\n    \n    // Connecting walls\n    wall(0, fort_depth/2 - tower_size/2, \n         fort_width - tower_size, \n         fort_height - base_height);\n    wall(0, -fort_depth/2 + tower_size/2, \n         fort_width - tower_size, \n         fort_height - base_height);\n    wall(fort_width/2 - tower_size/2, 0, \n         fort_depth - tower_size, \n         fort_height - base_height, 90);\n    wall(-fort_width/2 + tower_size/2, 0, \n         fort_depth - tower_size, \n         fort_height - base_height, 90);\n    \n    // Flag on front tower\n    translate([fort_width/2 - tower_size/2, fort_depth/2 - tower_size/2, 0])\n        flag();\n}",
    "renders": true
  },
  {
    "toy": "dollhouse",
    "openscad_code": "// Dollhouse miniature realistic wooden toy bed with mattress and quilt\n// Overall footprint: 80 mm x 60 mm x 55 mm (printable on most FDM beds)\n\n// Parameters\n$fn = 24;\nwall = 2;        // 2 mm walls for printing\nbed_w = 80;\nbed_d = 60;\nbed_h = 55;\nleg_h = 30;\nmattress_h = 8;\nframe_t = 4;     // frame thickness\nheadboard_h = 25;\n\n// Wooden bed frame module\nmodule bed_frame() {\n    // Headboard\n    translate([0, 0, leg_h])\n        difference() {\n            cube([bed_w, frame_t, headboard_h], center = false);\n            // Decorative cutout arch\n            translate([bed_w/2, frame_t+0.1, headboard_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = bed_w-10, r = headboard_h/2 - 5, center = true);\n        }\n\n    // Footboard (lower)\n    translate([0, bed_d - frame_t, leg_h])\n        cube([bed_w, frame_t, headboard_h - 5], center = false);\n\n    // Side rails\n    translate([0, frame_t, leg_h + frame_t/2])\n        cube([frame_t, bed_d - 2*frame_t, frame_t], center = false);\n    translate([bed_w - frame_t, frame_t, leg_h + frame_t/2])\n        cube([frame_t, bed_d - 2*frame_t, frame_t], center = false);\n\n    // Slatted base\n    for (i = [frame_t : 7 : bed_w - frame_t - 7])\n        translate([i, frame_t, leg_h + frame_t])\n            cube([7, bed_d - 2*frame_t, 2], center = false);\n}\n\n// Legs module with rounded edges\nmodule bed_legs() {\n    for (x = [0, bed_w - 2*wall])\n        for (y = [0, bed_d - 2*wall])\n            translate([x + wall, y + wall, 0])\n                cylinder(h = leg_h, r = 3, center = false);\n}\n\n// Mattress\nmodule mattress() {\n    translate([wall + 2, wall + 2, leg_h + frame_t + 2])\n        cube([bed_w - 2*(wall + 2), bed_d - 2*(wall + 2), mattress_h], center = false);\n}\n\n// Quilt with rounded top\nmodule quilt() {\n    translate([wall + 2, wall + 2, leg_h + frame_t + 2 + mattress_h])\n        minkowski() {\n            cube([bed_w - 2*(wall + 2) - 2, bed_d - 2*(wall + 2) - 2, 1], center = false);\n            sphere(r = 1, $fn = 12);\n        }\n}\n\n// Pillow\nmodule pillow() {\n    translate([bed_w/2 - 10, bed_d/2 - 10, leg_h + frame_t + 2 + mattress_h + 2])\n        scale([1, 1.5, 0.6])\n            sphere(r = 10, $fn = 32);\n}\n\n// Assembly\nunion() {\n    bed_frame();\n    bed_legs();\n    mattress();\n    quilt();\n    pillow();\n}",
    "renders": true
  },
  {
    "toy": "kitchen",
    "openscad_code": "// Toy Kitchen Stove - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm(W) x 60mm(D) x 100mm(H)\n\n// Wall thickness\nwall = 2;\n\n// Main body module\nmodule stove_body() {\n    // Base cabinet\n    difference() {\n        // Main box\n        cube([120, 60, 80]);\n        \n        // Hollow inside\n        translate([wall, wall, wall])\n            cube([120-wall*2, 60-wall*2, 80-wall]);\n            \n        // Bottom recess for feet\n        translate([wall, wall, 0])\n            cube([120-wall*2, 60-wall*2, 10]);\n    }\n}\n\n// Stove top module\nmodule stove_top() {\n    // Top surface\n    translate([0, 0, 80])\n        cube([120, 60, 5]);\n    \n    // Burner grates\n    for(x = [30, 90]) {\n        translate([x, 15, 85.5])\n            cylinder(h=1.5, r=15, $fn=32);\n        translate([x, 15, 85.5])\n            cylinder(h=1.5, r=12, $fn=32);\n    }\n    \n    // Burner caps\n    for(x = [30, 90]) {\n        translate([x, 15, 87])\n            cylinder(h=2, r=8, $fn=32);\n    }\n}\n\n// Control panel module\nmodule control_panel() {\n    // Back panel\n    translate([0, 0, 85])\n        cube([120, 10, 15]);\n    \n    // Control knobs\n    for(x = [20, 40, 60, 80, 100]) {\n        translate([x, 7, 95])\n            cylinder(h=5, r=4, $fn=16);\n    }\n}\n\n// Oven door module\nmodule oven_door() {\n    // Door panel\n    translate([10, -0.5, 20])\n        cube([50, 2, 40]);\n    \n    // Door handle\n    translate([15, -2.5, 35])\n        cube([40, 2, 10]);\n    \n    // Window\n    translate([15, 0, 25])\n        cube([30, 0.5, 20]);\n}\n\n// Feet module\nmodule feet() {\n    // Four feet\n    for(x = [10, 110]) {\n        for(y = [10, 50]) {\n            translate([x, y, 0])\n                cylinder(h=10, r=4, $fn=16);\n        }\n    }\n}\n\n// Drawer module\nmodule drawers() {\n    // Top drawer\n    translate([70, -0.5, 60])\n        cube([45, 2, 15]);\n    \n    // Bottom drawer\n    translate([70, -0.5, 40])\n        cube([45, 2, 15]);\n    \n    // Drawer handles\n    translate([92.5, -1.5, 67.5])\n        cube([20, 1, 2]);\n    translate([92.5, -1.5, 47.5])\n        cube([20, 1, 2]);\n}\n\n// Assembly\nunion() {\n    stove_body();\n    stove_top();\n    control_panel();\n    oven_door();\n    feet();\n    drawers();\n}",
    "renders": true
  },
  {
    "toy": "tea",
    "openscad_code": "// Toy Tea Set - Realistic Style\n// Tea pot with lid, sugar bowl, creamer and two cups with saucers\n\n// Overall scale factor for easy resizing\nscale_factor = 1.0;\n\n// Tea Pot\nmodule tea_pot() {\n    // Main body\n    difference() {\n        scale([scale_factor, scale_factor, scale_factor])\n        rotate_extrude(angle = 360, $fn = 64)\n        translate([25, 0, 0])\n        polygon(points=[[0,0],[15,0],[18,20],[16,40],[12,60],[0,65]]);\n        \n        // Hollow interior\n        scale([scale_factor, scale_factor, scale_factor])\n        rotate_extrude(angle = 360, $fn = 64)\n        translate([25, 0, 0])\n        polygon(points=[[2,5],[13,5],[15,20],[13,40],[10,55],[2,60]]);\n    }\n    \n    // Spout\n    translate([45*scale_factor, 0, 35*scale_factor])\n    rotate([90, 0, -30])\n    cylinder(h = 25*scale_factor, r1 = 4*scale_factor, r2 = 2*scale_factor, $fn = 16);\n    \n    // Handle\n    translate([-5*scale_factor, 0, 35*scale_factor])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 30*scale_factor, r = 4*scale_factor, $fn = 16);\n        cylinder(h = 30*scale_factor, r = 2*scale_factor, $fn = 16);\n    }\n    \n    // Lid\n    translate([0, 0, 65*scale_factor])\n    difference() {\n        cylinder(h = 5*scale_factor, r = 15*scale_factor, $fn = 32);\n        cylinder(h = 5*scale_factor, r = 13*scale_factor, $fn = 32);\n    }\n    \n    // Lid knob\n    translate([0, 0, 70*scale_factor])\n    sphere(d = 8*scale_factor, $fn = 16);\n}\n\n// Sugar Bowl\nmodule sugar_bowl() {\n    // Bowl body\n    difference() {\n        scale([scale_factor, scale_factor, scale_factor])\n        cylinder(h = 20, r = 15, $fn = 32);\n        translate([0, 0, 2])\n        cylinder(h = 18, r = 13, $fn = 32);\n    }\n    \n    // Lid\n    translate([0, 0, 20*scale_factor])\n    difference() {\n        cylinder(h = 3*scale_factor, r = 15*scale_factor, $fn = 32);\n        cylinder(h = 3*scale_factor, r = 13*scale_factor, $fn = 32);\n    }\n    \n    // Lid handle\n    translate([0, 0, 23*scale_factor])\n    sphere(d = 6*scale_factor, $fn = 16);\n}\n\n// Creamer\nmodule creamer() {\n    // Body\n    difference() {\n        scale([scale_factor, scale_factor, scale_factor])\n        rotate_extrude(angle = 360, $fn = 32)\n        translate([10, 0, 0])\n        polygon(points=[[0,0],[8,0],[10,15],[8,20],[0,22]]);\n        \n        // Hollow\n        scale([scale_factor, scale_factor, scale_factor])\n        rotate_extrude(angle = 360, $fn = 32)\n        translate([10, 0, 0])\n        polygon(points=[[1,2],[7,2],[9,15],[7,18],[1,20]]);\n    }\n    \n    // Spout\n    translate([10*scale_factor, 0, 15*scale_factor])\n    rotate([90, 0, 45])\n    cylinder(h = 10*scale_factor, r1 = 3*scale_factor, r2 = 1.5*scale_factor, $fn = 8);\n    \n    // Handle\n    translate([-2*scale_factor, 0, 12*scale_factor])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 12*scale_factor, r = 2.5*scale_factor, $fn = 8);\n        cylinder(h = 12*scale_factor, r = 1*scale_factor, $fn = 8);\n    }\n}\n\n// Cup and Saucer\nmodule cup_and_saucer() {\n    // Saucer\n    difference() {\n        cylinder(h = 2*scale_factor, r1 = 15*scale_factor, r2 = 12*scale_factor, $fn = 32);\n        cylinder(h = 2*scale_factor, r1 = 8*scale_factor, r2 = 6*scale_factor, $fn = 32);\n    }\n    \n    // Cup\n    translate([0, 0, 2*scale_factor])\n    difference() {\n        cylinder(h = 15*scale_factor, r1 = 8*scale_factor, r2 = 6*scale_factor, $fn = 32);\n        translate([0, 0, 2*scale_factor])\n        cylinder(h = 13*scale_factor, r1 = 6.5*scale_factor, r2 = 4.5*scale_factor, $fn = 32);\n    }\n    \n    // Handle\n    translate([8*scale_factor, 0, 10*scale_factor])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 12*scale_factor, r = 3*scale_factor, $fn = 8);\n        cylinder(h = 12*scale_factor, r = 1.5*scale_factor, $fn = 8);\n    }\n}\n\n// Arrange the tea set\ntea_pot();\n\ntranslate([60*scale_factor, 0, 0])\nsugar_bowl();\n\ntranslate([100*scale_factor, 0, 0])\ncreamer();\n\ntranslate([0, -40*scale_factor, 0])\ncup_and_saucer();\n\ntranslate([30*scale_factor, -40*scale_factor, 0])\ncup_and_saucer();",
    "renders": true
  },
  {
    "toy": "garden",
    "openscad_code": "// Toy Garden Watering Can\n// Designed for 3D printing with 2mm walls and no overhangs\n// Overall size: ~80mm tall x 70mm long x 30mm wide\n\n// Main parameters\nwall_thickness = 2;\nscale_factor = 1;\n\nmodule watering_can_body() {\n    // Main body - oval cylinder\n    difference() {\n        scale([1.3, 1, 1]) \n            cylinder(h=45, r=15, $fn=32);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            scale([1.3 - (wall_thickness/15), 1 - (wall_thickness/15), 1])\n                cylinder(h=45 - wall_thickness, r=15 - wall_thickness, $fn=32);\n        \n        // Top opening\n        translate([0, 0, 42])\n            cylinder(h=5, r=10, $fn=32);\n    }\n}\n\nmodule spout() {\n    // Curved spout with holes\n    translate([-20, 0, 35])\n        rotate([0, -30, 0])\n            union() {\n                // Main spout tube\n                difference() {\n                    cylinder(h=30, r=4, $fn=16);\n                    translate([0, 0, wall_thickness])\n                        cylinder(h=30 - wall_thickness, r=4 - wall_thickness, $fn=16);\n                }\n                \n                // Rose head (sprinkler)\n                translate([0, 0, -15])\n                    difference() {\n                        cylinder(h=8, r=6, $fn=32);\n                        translate([0, 0, wall_thickness])\n                            cylinder(h=8 - wall_thickness, r=6 - wall_thickness, $fn=32);\n                        \n                        // Water holes\n                        for(i = [0:5]) {\n                            rotate([0, 0, i * 60])\n                                for(j = [2.5:2.5:5]) {\n                                    translate([j, 0, 4])\n                                        rotate([90, 0, 0])\n                                            cylinder(h=wall_thickness + 1, r=0.5, $fn=8);\n                                }\n                        }\n                    }\n            }\n}\n\nmodule handle() {\n    // Arc handle\n    translate([5, 0, 40])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer arc\n                rotate_extrude(angle=180, $fn=32)\n                    translate([20, 0, 0])\n                        circle(r=3, $fn=16);\n                \n                // Inner hollow\n                rotate_extrude(angle=180, $fn=32)\n                    translate([20, 0, 0])\n                        circle(r=3 - wall_thickness, $fn=16);\n            }\n}\n\nmodule support_brace() {\n    // Brace between handle and body\n    translate([0, 0, 20])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=20, r=3, $fn=16);\n                translate([0, 0, wall_thickness])\n                    cylinder(h=20 - wall_thickness, r=3 - wall_thickness, $fn=16);\n            }\n}\n\nmodule decorative_ribbing() {\n    // Horizontal ribs for grip\n    for(i = [1:3:13]) {\n        translate([0, 0, i * 3])\n            difference() {\n                scale([1.35, 1.05, 1])\n                    cylinder(h=1, r=15.5, $fn=32);\n                scale([1.25, 0.95, 1])\n                    cylinder(h=1.5, r=15.5, $fn=32);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    watering_can_body();\n    spout();\n    handle();\n    support_brace();\n    \n    // Decorative elements\n    decorative_ribbing();\n}",
    "renders": true
  },
  {
    "toy": "sandbox",
    "openscad_code": "// Sandbox Toy - Realistic Style\n// Dimensions: 120mm x 80mm x 35mm (L x W x H)\n\n// Main sandbox box\nmodule sandbox_box() {\n    difference() {\n        // Outer box\n        cube([120, 80, 35], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 2.5])\n            cube([116, 76, 32], center=true);\n    }\n}\n\n// Corner support posts\nmodule corner_post(x, y) {\n    translate([x, y, -17.5])\n        cylinder(h=35, d=10, center=true);\n}\n\n// Sandbox base with drainage holes\nmodule sandbox_base() {\n    difference() {\n        // Solid base plate\n        translate([0, 0, -17.5])\n            cube([120, 80, 4], center=true);\n        \n        // Drainage holes (4 small holes)\n        for(x = [-40, 40])\n            for(y = [-25, 25])\n                translate([x, y, -15.5])\n                    cylinder(h=5, d=6, center=true);\n    }\n}\n\n// Bench seats on each side\nmodule bench_seat(length, width) {\n    difference() {\n        // Seat top\n        translate([0, -width/2 - 2, 0])\n            cube([length, 8, 8], center=true);\n        \n        // Underside cavity\n        translate([0, -width/2 - 2, -2])\n            cube([length - 4, 4, 6], center=true);\n    }\n}\n\n// Bench legs\nmodule bench_leg(x, y, rot) {\n    rotate([0, 0, rot])\n        translate([x, y, 0])\n            cube([6, 6, 12], center=true);\n}\n\n// Sandbox toy bucket\nmodule toy_bucket() {\n    difference() {\n        // Bucket body\n        cylinder(h=20, d1=18, d2=22, center=true);\n        \n        // Hollow inside\n        translate([0, 0, 1])\n            cylinder(h=20, d1=14, d2=18, center=true);\n    }\n    \n    // Bucket handle\n    rotate([90, 0, 0])\n        translate([0, 0, 12])\n            rotate_extrude(angle=180, $fn=20)\n                translate([12, 0, 0])\n                    circle(d=2);\n}\n\n// Sandbox shovel\nmodule toy_shovel() {\n    // Shovel blade\n    translate([0, 0, -5])\n        rotate([45, 0, 0])\n            scale([1, 0.8, 0.3])\n                sphere(d=15, center=true);\n    \n    // Shovel handle\n    translate([0, 0, 5])\n        cylinder(h=20, d=4, center=true);\n}\n\n// Sandbox rake\nmodule toy_rake() {\n    // Rake handle\n    translate([0, 0, 5])\n        cylinder(h=20, d=4, center=true);\n    \n    // Rake head\n    translate([0, 0, -5])\n        cube([20, 8, 3], center=true);\n    \n    // Rake teeth\n    for(i = [-8:4:8])\n        translate([i, 0, -7])\n            cube([2, 8, 3], center=true);\n}\n\n// Main assembly\nmodule sandbox_toy() {\n    // Box structure\n    sandbox_box();\n    \n    // Base with drainage\n    sandbox_base();\n    \n    // Corner posts for realistic structure\n    corner_post(55, 35);\n    corner_post(-55, 35);\n    corner_post(55, -35);\n    corner_post(-55, -35);\n    \n    // Bench seats on long sides\n    translate([0, 40, 0])\n        bench_seat(100, 80);\n    translate([0, -40, 0])\n        bench_seat(100, 80);\n    \n    // Bench legs\n    for(x = [-45, 45])\n        for(y = [34, -34])\n            bench_leg(x, y, 0);\n    \n    // Toy accessories\n    // Bucket in corner\n    translate([40, 20, -10])\n        toy_bucket();\n    \n    // Shovel\n    translate([-40, 20, -10])\n        toy_shovel();\n    \n    // Rake\n    translate([0, -20, -10])\n        toy_rake();\n}\n\n// Render the complete sandbox toy\nsandbox_toy();",
    "renders": true
  },
  {
    "toy": "seesaw",
    "openscad_code": "// Realistic 3D-printable seesaw toy (medium complexity)\n// Overall length ~120 mm, height ~45 mm, thickness ~2-3 mm\n\n// Parameters\nboard_l   = 100;\nboard_w   = 20;\nboard_t   = 3;\nfulcrum_h = 35;\nfulcrum_r = 10;\nleg_h     = 30;\nleg_r     = 4;\nhandle_r  = 5;\nhandle_h  = 10;\nseat_r    = 10;\nseat_h    = 2;\npin_r     = 2;\n\n// Colors (for preview only)\ncolor_board   = \"BurlyWood\";\ncolor_fulcrum = \"SaddleBrown\";\ncolor_seat    = \"RoyalBlue\";\ncolor_handle  = \"Silver\";\n\nmodule board() {\n    // Main plank with rounded ends\n    hull() {\n        translate([-board_l/2, 0, 0]) cylinder(h=board_t, r=board_w/2, $fn=20);\n        translate([ board_l/2, 0, 0]) cylinder(h=board_t, r=board_w/2, $fn=20);\n    }\n    // Reinforcement ribs underneath (print-friendly)\n    for(x=[-board_l/2+10:20:board_l/2-10])\n        translate([x, 0, -board_t/2])\n            cube([2, board_w-4, board_t], center=true);\n}\n\nmodule fulcrum() {\n    // Central pivot post\n    difference() {\n        cylinder(h=fulcrum_h, r=fulcrum_r, $fn=30);\n        translate([0, 0, -1])\n            cylinder(h=fulcrum_h+2, r=fulcrum_r-2, $fn=30);\n    }\n    // Decorative rings\n    for(z=[fulcrum_h*0.3, fulcrum_h*0.7])\n        translate([0, 0, z])\n            cylinder(h=2, r=fulcrum_r+1, $fn=30);\n}\n\nmodule leg() {\n    // Triangular support leg with fillet\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h=leg_h, r=leg_r, $fn=16);\n            translate([0, 0, -1])\n                cylinder(h=leg_h+2, r=leg_r-2, $fn=16);\n        }\n}\n\nmodule seat(pos=[0,0,0]) {\n    // Rounded seat pad\n    translate(pos)\n        cylinder(h=seat_h, r=seat_r, $fn=30);\n}\n\nmodule handle(pos=[0,0,0]) {\n    // Vertical grip post plus cross-bar\n    translate(pos) {\n        cylinder(h=handle_h, r=handle_r/2, $fn=12);\n        translate([0, 0, handle_h])\n            rotate([90,0,0])\n                cylinder(h=handle_r*3, r=handle_r/2, $fn=12);\n    }\n}\n\nmodule pin() {\n    // Simple pivot pin printed separately\n    cylinder(h=fulcrum_r*2+2, r=pin_r, $fn=12);\n}\n\n// Assembly\nunion() {\n    // Color board\n    color(color_board)\n        board();\n    \n    // Color fulcrum\n    color(color_fulcrum)\n        translate([0, 0, -fulcrum_h/2])\n            fulcrum();\n    \n    // Legs\n    color(color_fulcrum) {\n        translate([0,  fulcrum_r+3, -leg_h/2]) leg();\n        translate([0, -fulcrum_r-3, -leg_h/2]) leg();\n    }\n    \n    // Seats\n    color(color_seat) {\n        seat([-board_l/2+seat_r+5, 0, board_t+seat_h/2]);\n        seat([ board_l/2-seat_r-5, 0, board_t+seat_h/2]);\n    }\n    \n    // Handles\n    color(color_handle) {\n        handle([-board_l/2+seat_r+5, 0, board_t+handle_r/2+seat_h]);\n        handle([ board_l/2-seat_r-5, 0, board_t+handle_r/2+seat_h]);\n    }\n}\n\n// Optional separate pivot pin (print lying down)\ntranslate([0, -fulcrum_r-10, 0])\n    rotate([90,0,0])\n        pin();",
    "renders": true
  },
  {
    "toy": "swing",
    "openscad_code": "// Swing Toy – 3D-printable, realistic style, medium complexity\n// Overall ~90 mm tall; all walls ≥2 mm\n\n// Basic dimensions\nseat_w = 30;\nseat_d = 20;\nseat_t = 2;\n\nframe_h = 85;\nframe_d = 45;\nframe_t = 4;\n\nrope_d = 3;\nrope_h = 35;\n\n// Colors for preview (ignored by slicer)\ncolor(\"chocolate\") frame();\ncolor(\"saddlebrown\") swing();\ncolor(\"gold\") ropes();\n\nmodule frame() {\n    // Left A-frame leg\n    translate([-seat_w/2 - 5, 0, 0])\n        rotate([0, -10, 0])\n        leg();\n\n    // Right A-frame leg\n    translate([seat_w/2 + 5, 0, 0])\n        mirror([1, 0, 0])\n        rotate([0, -10, 0])\n        leg();\n\n    // Top cross-bar (thin rod)\n    translate([0, frame_d/2, frame_h - frame_t])\n        rotate([90, 0, 0])\n        cylinder(h = seat_w + 20, d = frame_t, $fn = 12);\n}\n\nmodule leg() {\n    // A-frame width\n    a = 8;\n    // Two angled posts\n    for(side = [-1, 1])\n        translate([0, side*a, 0])\n            cube([frame_t, frame_t, frame_h]);\n    // Feet pads for print stability\n    for(side = [-1, 1])\n        translate([0, side*a, 0])\n            cube([frame_t + 4, 6, 2]);\n}\n\nmodule swing() {\n    // Seat plank\n    translate([0, 0, rope_h])\n        cube([seat_w, seat_d, seat_t], center = true);\n\n    // Back-rest (slightly tilted)\n    translate([0, -seat_d/2 + 1, rope_h + seat_t/2 + 7])\n        rotate([100, 0, 0])\n        cube([seat_w - 4, seat_d - 8, 2], center = true);\n\n    // Side rails\n    for(x = [-seat_w/2 + 2, seat_w/2 - 2])\n        translate([x, 0, rope_h])\n            cube([2, seat_d, 1.5]);\n}\n\nmodule ropes() {\n    // Four vertical ropes\n    for(x = [-seat_w/2 + rope_d, seat_w/2 - rope_d])\n        for(y = [-seat_d/2 + rope_d, seat_d/2 - rope_d]) {\n            translate([x, y, rope_h + seat_t/2])\n                cylinder(h = rope_h, d = rope_d, $fn = 8);\n        }\n}\n\n// Assembly\nframe();\nswing();\nropes();",
    "renders": true
  },
  {
    "toy": "slide",
    "openscad_code": "// Toy Slide - Realistic Style, Medium Complexity\n// Dimensions: ~100mm long, ~60mm wide, ~80mm high\n\n// Main parameters\nslide_height = 80;\nslide_width = 60;\nslide_length = 100;\nwall_thickness = 2;\nstep_count = 5;\npost_diameter = 6;\n\n// Slide module\nmodule slide_structure() {\n    // Slide chute - angled at 30 degrees\n    translate([0, 0, slide_height * 0.6])\n    rotate([0, -30, 0])\n    difference() {\n        // Main chute\n        cube([slide_length * 0.9, slide_width * 0.8, wall_thickness], center=true);\n        \n        // Hollow out the chute\n        translate([0, 0, -1])\n        cube([slide_length * 0.9 - wall_thickness*2, slide_width * 0.8 - wall_thickness*2, 5], center=true);\n    }\n    \n    // Slide sides\n    for(side = [-1, 1]) {\n        translate([0, side * slide_width * 0.4, slide_height * 0.6])\n        rotate([0, -30, 0])\n        translate([0, 0, slide_length * 0.45])\n        cube([slide_length * 0.9, wall_thickness, 15], center=true);\n    }\n}\n\n// Support posts\nmodule support_posts() {\n    // Front posts\n    for(x = [-slide_length * 0.35, slide_length * 0.35]) {\n        translate([x, -slide_width * 0.3, slide_height * 0.3])\n        cylinder(h=slide_height * 0.7, d=post_diameter, center=false);\n    }\n    \n    // Rear posts\n    for(x = [-slide_length * 0.35, slide_length * 0.35]) {\n        translate([x, slide_width * 0.3, 0])\n        cylinder(h=slide_height * 0.6, d=post_diameter, center=false);\n    }\n}\n\n// Steps module\nmodule steps() {\n    step_height = slide_height * 0.6 / step_count;\n    step_depth = slide_length * 0.3 / step_count;\n    \n    for(i = [0:step_count-1]) {\n        // Step tread\n        translate([-slide_length * 0.45 + i * step_depth, slide_width * 0.35, i * step_height + step_height/2])\n        cube([step_depth * 0.9, slide_width * 0.3, wall_thickness], center=true);\n        \n        // Step riser\n        translate([-slide_length * 0.45 + i * step_depth + step_depth/2, slide_width * 0.35, i * step_height])\n        cube([wall_thickness, slide_width * 0.3, step_height], center=true);\n    }\n}\n\n// Safety rails\nmodule safety_rails() {\n    // Top platform rails\n    translate([0, 0, slide_height * 0.6])\n    difference() {\n        // Platform base\n        cube([slide_length * 0.3, slide_width * 0.8, wall_thickness], center=true);\n        \n        // Cut hole for access\n        translate([slide_length * 0.1, 0, -1])\n        cube([slide_length * 0.15, slide_width * 0.6, 5], center=true);\n    }\n    \n    // Platform posts\n    for(pos = [[-slide_length * 0.15, -slide_width * 0.35], \n               [-slide_length * 0.15, slide_width * 0.35],\n               [slide_length * 0.15, -slide_width * 0.35], \n               [slide_length * 0.15, slide_width * 0.35]]) {\n        translate([pos[0], pos[1], slide_height * 0.6 + 5])\n        cylinder(h=10, d=post_diameter * 0.7, center=false);\n    }\n    \n    // Top rail\n    translate([-slide_length * 0.15, 0, slide_height * 0.6 + 15])\n    cube([slide_length * 0.3, slide_width * 0.8, wall_thickness], center=true);\n}\n\n// Ladder support bar\nmodule ladder_support() {\n    translate([-slide_length * 0.45, slide_width * 0.35, slide_height * 0.3])\n    rotate([0, 90, 0])\n    cylinder(h=slide_length * 0.3, d=post_diameter * 0.8, center=false);\n    \n    translate([-slide_length * 0.45, -slide_width * 0.35, slide_height * 0.3])\n    rotate([0, 90, 0])\n    cylinder(h=slide_length * 0.3, d=post_diameter * 0.8, center=false);\n}\n\n// Base frame\nmodule base_frame() {\n    // Front crossbar\n    translate([0, -slide_width * 0.3, 0])\n    rotate([90, 0, 0])\n    cylinder(h=slide_length * 0.7, d=post_diameter, center=true);\n    \n    // Rear crossbar\n    translate([0, slide_width * 0.3, 0])\n    rotate([90, 0, 0])\n    cylinder(h=slide_length * 0.7, d=post_diameter, center=true);\n}\n\n// Assemble the complete slide\nunion() {\n    slide_structure();\n    support_posts();\n    steps();\n    safety_rails();\n    ladder_support();\n    base_frame();\n}",
    "renders": true
  },
  {
    "toy": "teetertotter",
    "openscad_code": "// Teetertotter Toy - Realistic Medium Complexity\n// Overall dimensions: 120mm length x 40mm width x 50mm height\n\n// Base parameters\nbase_length = 120;\nbase_width = 40;\nbase_height = 6;\nwall_thickness = 2;\nseat_size = 30;\nseat_thickness = 3;\nhandle_diameter = 5;\nhandle_height = 20;\n\n// Pivot mechanism\npivot_radius = 8;\npivot_height = 10;\n\n// Colors (for preview)\ncolor_seat = [0.8, 0.2, 0.2];\ncolor_base = [0.1, 0.1, 0.3];\ncolor_handle = [0.9, 0.9, 0.9];\ncolor_pivot = [0.5, 0.5, 0.5];\n\n// Main base with rounded ends\nmodule base_platform() {\n    difference() {\n        // Main base shape\n        hull() {\n            translate([-base_length/2, -base_width/2, 0])\n                cube([base_length, base_width, base_height]);\n            translate([-base_length/2, base_width/2, 0])\n                cube([base_length, base_width, base_height]);\n            translate([base_length/2, -base_width/2, 0])\n                cube([base_length, base_width, base_height]);\n            translate([base_length/2, base_width/2, 0])\n                cube([base_length, base_width, base_height]);\n        }\n        \n        // Rounded ends\n        translate([-base_length/2, 0, base_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=base_width+2, r=base_width/2, center=true);\n        translate([base_length/2, 0, base_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=base_width+2, r=base_width/2, center=true);\n    }\n}\n\n// Pivot assembly\nmodule pivot_assembly() {\n    union() {\n        // Central pivot cylinder\n        translate([0, 0, base_height])\n            cylinder(h=pivot_height, r=pivot_radius);\n            \n        // Pivot caps for smooth rotation\n        translate([0, 0, base_height + pivot_height])\n            sphere(r=pivot_radius);\n        translate([0, 0, base_height])\n            sphere(r=pivot_radius);\n    }\n}\n\n// Seat with rounded edges\nmodule seat(position) {\n    translate([position, 0, base_height + pivot_height + seat_thickness/2]) {\n        // Main seat\n        difference() {\n            hull() {\n                cube([seat_size, seat_size, seat_thickness], center=true);\n                for(i = [-1, 1]) {\n                    translate([i * (seat_size/2 - seat_thickness/2), 0, 0])\n                        sphere(r=seat_thickness/2);\n                }\n            }\n            \n            // Hollow bottom for weight reduction\n            translate([0, 0, -seat_thickness/2 + wall_thickness])\n                cube([seat_size - wall_thickness*2, seat_size - wall_thickness*2, seat_thickness], center=true);\n        }\n        \n        // Handle assembly\n        translate([0, 0, seat_thickness/2 + handle_height/2]) {\n            // Handle post\n            cylinder(h=handle_height, r=handle_diameter/2);\n            \n            // Handle grip\n            translate([0, 0, handle_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=seat_size - 10, r=handle_diameter/2);\n        }\n    }\n}\n\n// Support struts for stability\nmodule support_struts() {\n    strut_width = 3;\n    strut_height = 15;\n    \n    for(side = [-1, 1]) {\n        translate([side * base_length/4, 0, base_height/2]) {\n            // Front strut\n            rotate([0, atan2(strut_height, base_length/4), 0])\n                translate([0, -base_width/2 + strut_width/2, 0])\n                    cube([strut_height, strut_width, strut_width], center=true);\n                    \n            // Back strut\n            rotate([0, atan2(strut_height, base_length/4), 0])\n                translate([0, base_width/2 - strut_width/2, 0])\n                    cube([strut_height, strut_width, strut_width], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Color assignments for preview\n    color(color_base) base_platform();\n    color(color_pivot) pivot_assembly();\n    color(color_seat) {\n        seat(-base_length/3);\n        seat(base_length/3);\n    }\n    color(color_handle) {\n        translate([-base_length/3, 0, base_height + pivot_height + seat_thickness + handle_height/2]) {\n            rotate([90, 0, 0])\n                cylinder(h=seat_size - 10, r=handle_diameter/2);\n        }\n        translate([base_length/3, 0, base_height + pivot_height + seat_thickness + handle_height/2]) {\n            rotate([90, 0, 0])\n                cylinder(h=seat_size - 10, r=handle_diameter/2);\n        }\n    }\n    color(color_base) support_struts();\n}\n\n// Safety bumpers\nmodule bumpers() {\n    bumper_radius = 8;\n    bumper_height = 8;\n    \n    for(side = [-1, 1]) {\n        translate([side * base_length/2, 0, bumper_height/2]) {\n            cylinder(h=bumper_height, r=bumper_radius);\n        }\n    }\n}\n\n// Add bumpers\ncolor([0.2, 0.2, 0.2]) bumpers();",
    "renders": true
  },
  {
    "toy": "merrygoround",
    "openscad_code": "// Merry-go-round toy (realistic style, medium complexity)\n// Overall dimensions: Ø100 mm × 60 mm, printable without supports\n\n// Parameters\n$fn = 36;\npole_r = 3;\npole_h = 45;\nbase_h = 8;\nroof_h = 4;\nseat_h = 6;\nseat_r = 8;\narm_r = 2;\n\n// Central pole assembly\nmodule pole() {\n    // Main pole\n    cylinder(h = pole_h, r = pole_r);\n    // Top knob\n    translate([0, 0, pole_h])\n        sphere(r = pole_r * 1.5);\n}\n\n// Base platform\nmodule base() {\n    difference() {\n        // Main disk\n        cylinder(h = base_h, r = 50);\n        // Pole hole\n        translate([0, 0, -1])\n            cylinder(h = base_h + 2, r = pole_r + 2);\n        // Decorative ring pattern\n        for (r = [40, 30, 20]) {\n            translate([0, 0, base_h - 2])\n                cylinder(h = 2, r1 = r, r2 = r - 1);\n        }\n    }\n}\n\n// Roof\nmodule roof() {\n    translate([0, 0, pole_h - 5]) {\n        difference() {\n            // Conical roof\n            cylinder(h = roof_h, r1 = 55, r2 = 45);\n            // Pole hole\n            translate([0, 0, -1])\n                cylinder(h = roof_h + 2, r = pole_r + 2);\n        }\n    }\n}\n\n// Seat\nmodule seat(rot) {\n    rotate([0, 0, rot])\n        translate([0, 35, 0]) {\n            // Seat platform\n            translate([0, 0, pole_h - 15])\n                cube([seat_r * 2, seat_r * 2, seat_h], center = true);\n            // Backrest\n            translate([0, seat_r - 1, pole_h - 15 + seat_h / 2 + seat_r - 3])\n                cube([seat_r * 2, 2, seat_r * 2], center = true);\n            // Support arm\n            rotate([90, 0, 0])\n                translate([0, 0, 0])\n                    cylinder(h = 35, r = arm_r);\n        }\n}\n\n// Decorative elements\nmodule decoration() {\n    // Ball finials on roof edge\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([50, 0, pole_h - 5 + roof_h])\n                sphere(r = 3);\n    }\n}\n\n// Assembly\nbase();\npole();\nroof();\nfor (a = [0:60:300]) {\n    seat(a);\n}\ndecoration();",
    "renders": true
  },
  {
    "toy": "pingpongball",
    "openscad_code": "// PingPong Ball Toy – realistic style, medium complexity\n// Diameter: 40 mm (official size), 2 mm wall for printability\n// Includes molded seam, tiny star logo, and toy-like support stand\n\n$fn = 64;                 // smooth sphere\nball_d = 40;              // official pingpong diameter\nwall = 2;                 // wall thickness for 3D printing\nseam_w = 1.2;             // molded seam width\nseam_h = 0.6;             // seam height above surface\nlogo_size = 8;            // star logo diameter\nstand_h = 15;             // stand height\nstand_r = 10;             // stand radius\n\nmodule ball_shell() {\n    // hollow sphere with wall thickness\n    difference() {\n        sphere(d = ball_d);\n        sphere(d = ball_d - 2*wall);\n    }\n}\n\nmodule molded_seam() {\n    // equatorial seam as raised ring\n    rotate([90,0,0])\n    cylinder(h = seam_w, d1 = ball_d + seam_h*2, d2 = ball_d + seam_h*2, $fn=128);\n}\n\nmodule star_logo() {\n    // tiny 5-point star on surface\n    translate([0, 0, ball_d/2]) {\n        linear_extrude(height=0.8)\n        scale([1,1,1])\n        polygon(points=[\n            [0,4], [1,1.5], [4,1], [1.5,-0.5], [2.5,-3],\n            [0,-1.5], [-2.5,-3], [-1.5,-0.5], [-4,1], [-1,1.5]\n        ]);\n    }\n}\n\nmodule support_stand() {\n    // simple toy stand to display ball\n    union() {\n        // cylindrical base\n        cylinder(h = stand_h, r = stand_r);\n        // gentle cradle cup\n        translate([0,0,stand_h])\n        cylinder(h = 4, r1 = stand_r, r2 = stand_r * 0.8);\n        // hollow cavity to lighten print\n        translate([0,0,-1])\n        cylinder(h = stand_h + 2, r = stand_r - wall);\n    }\n}\n\n// final assembly\nunion() {\n    // the ball itself\n    union() {\n        ball_shell();\n        molded_seam();\n        star_logo();\n    }\n    // display stand below\n    translate([0, 0, -stand_h - ball_d/2 - 2])\n    support_stand();\n}",
    "renders": true
  },
  {
    "toy": "lacrosseball",
    "openscad_code": "// Lacrosse Ball Toy (Realistic, Medium Complexity)\n// Diameter: 63.5 mm (official size)\n// Wall thickness: 2mm for 3D printability\n\nmodule lacrosse_ball() {\n    // Main ball body with 2mm wall thickness\n    difference() {\n        // Outer shell\n        sphere(d = 64);\n        \n        // Hollow interior\n        sphere(d = 60);\n    }\n}\n\n// Surface texture pattern - toy-friendly raised bumps\nmodule surface_texture() {\n    // Latitude circles\n    for (theta = [15:15:165]) {\n        rotate([0, theta, 0]) {\n            translate([0, 0, 0]) {\n                rotate_extrude() {\n                    translate([30, 0, 0]) {\n                        circle(d = 4);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Longitude ribs\n    for (phi = [0:15:345]) {\n        rotate([0, 0, phi]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 64, d = 4, center = true, $fn = 16);\n            }\n        }\n    }\n}\n\n// Toy safety features - rounded edges and grip pattern\nmodule grip_pattern() {\n    // Raised dots for grip\n    for (i = [0:19]) {\n        for (j = [0:9]) {\n            rotate([j*36, i*18, 0]) {\n                translate([0, 0, 31]) {\n                    sphere(d = 2.5);\n                }\n            }\n        }\n    }\n}\n\n// Joint connector for toy accessories\nmodule connector() {\n    // Female connector on ball surface\n    translate([0, 0, 32]) {\n        difference() {\n            cylinder(h = 8, d = 10, $fn = 20);\n            cylinder(h = 10, d = 6, $fn = 20);\n        }\n    }\n    \n    // Male connector protrusion\n    translate([0, 0, -32]) {\n        cylinder(h = 6, d = 6, $fn = 20);\n    }\n}\n\n// Assembly\nunion() {\n    lacrosse_ball();\n    \n    // Apply surface texture with slight offset\n    translate([0, 0, 0.5]) {\n        surface_texture();\n    }\n    \n    // Add grip pattern\n    grip_pattern();\n    \n    // Add toy connectors\n    connector();\n    \n    // Additional toy features - small handle indentations\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([15, 0, 0]) {\n                difference() {\n                    sphere(d = 8);\n                    sphere(d = 6);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "polo",
    "openscad_code": "// Realistic Medium-Complexity Polo Toy\n// Overall dimensions: ~120 mm length, 80 mm width, 40 mm height\n\n// Wall thickness = 2 mm\n$fn = 36;\n\n// Main horse body\nmodule horse_body() {\n    union() {\n        // Torso\n        translate([0, 0, 8])\n            scale([1.2, 0.7, 0.6])\n            sphere(d = 70);\n\n        // Neck\n        translate([30, 0, 20])\n            rotate([0, -20, 0])\n            scale([1, 0.8, 0.8])\n            cylinder(h = 35, d1 = 25, d2 = 20);\n\n        // Head\n        translate([50, 0, 25])\n            rotate([0, -30, 0])\n            scale([1.2, 0.7, 0.7])\n            sphere(d = 30);\n\n        // Tail\n        translate([-38, 0, 10])\n            rotate([0, 20, 10])\n            scale([0.8, 0.3, 0.3])\n            cylinder(h = 40, d1 = 20, d2 = 10);\n    }\n}\n\n// Legs\nmodule leg(x, y, angle) {\n    translate([x, y, 0]) {\n        rotate([angle, 0, 0]) {\n            // Upper leg\n            translate([0, 0, 8])\n                cylinder(h = 25, d = 18);\n\n            // Lower leg\n            translate([0, 0, 8])\n                rotate([30, 0, 0])\n                translate([0, -12, 0])\n                cylinder(h = 25, d = 15);\n\n            // Hoof\n            translate([0, -20, -6])\n                cylinder(h = 8, d1 = 15, d2 = 12);\n        }\n    }\n}\n\n// Mane and tail details\nmodule mane() {\n    for (i = [-2:2]) {\n        translate([35 + i*5, 8, 20 - abs(i)*2])\n            rotate([0, 90 - abs(i)*10, 0])\n            scale([1, 0.3, 0.1])\n            cylinder(h = 15, d = 8);\n    }\n}\n\n// Saddle\nmodule saddle() {\n    difference() {\n        // Saddle base\n        translate([0, 0, 25])\n            scale([0.8, 0.6, 0.3])\n            sphere(d = 60);\n\n        // Saddle cavity\n        translate([0, 0, 28])\n            scale([0.7, 0.5, 0.2])\n            sphere(d = 60);\n    }\n\n    // Saddle flaps\n    translate([0, 15, 18])\n        cube([40, 4, 15], center = true);\n\n    translate([0, -15, 18])\n        cube([40, 4, 15], center = true);\n}\n\n// Reins\nmodule reins() {\n    // Left rein\n    translate([45, 5, 22])\n        rotate([0, -30, 10])\n        cylinder(h = 40, d = 2);\n\n    // Right rein\n    translate([45, -5, 22])\n        rotate([0, -30, -10])\n        cylinder(h = 40, d = 2);\n}\n\n// Ears\nmodule ears() {\n    // Left ear\n    translate([55, 8, 32])\n        rotate([0, 0, -20])\n        cylinder(h = 12, d1 = 8, d2 = 4);\n\n    // Right ear\n    translate([55, -8, 32])\n        rotate([0, 0, 20])\n        cylinder(h = 12, d1 = 8, d2 = 4);\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([52, 6, 28])\n        sphere(d = 4);\n\n    // Right eye\n    translate([52, -6, 28])\n        sphere(d = 4);\n}\n\n// Nostrils\nmodule nostrils() {\n    // Left nostril\n    translate([58, 3, 22])\n        rotate([0, 45, 0])\n        cylinder(h = 5, d = 3);\n\n    // Right nostril\n    translate([58, -3, 22])\n        rotate([0, 45, 0])\n        cylinder(h = 5, d = 3);\n}\n\n// Assemble the polo toy\nunion() {\n    // Main body\n    horse_body();\n\n    // Legs\n    leg(20, 20, 15);\n    leg(20, -20, 15);\n    leg(-20, 20, -15);\n    leg(-20, -20, -15);\n\n    // Details\n    mane();\n    saddle();\n    reins();\n    ears();\n    eyes();\n    nostrils();\n}",
    "renders": true
  },
  {
    "toy": "racket",
    "openscad_code": "// Toy Tennis Racket – 3D-printable, medium complexity\n// Total length ≈ 120 mm, head width ≈ 60 mm\n// All walls ≥ 2 mm, no steep overhangs\n\n// Parameters\n$fn = 36;\nhandle_len   = 65;   // including grip flare\nhandle_d     = 14;   // shaft diameter\nhead_w       = 60;   // outer head width\nhead_h       = 70;   // outer head height\nth           = 2;    // wall / string thickness\nrim_depth    = 6;    // rim extrusion toward grip\nstring_pitch = 4;    // center-to-center string spacing\n\n// -------- Main assembly --------\nmodule racket() {\n    union() {\n        // Shaft / handle\n        translate([0, 0, handle_len/2])\n            handle();\n\n        // Head frame\n        translate([0, 0, handle_len + rim_depth/2])\n            rotate([90, 0, 0])\n            head_frame();\n\n        // String bed\n        translate([0, 0, handle_len + rim_depth - th/2])\n            rotate([90, 0, 0])\n            string_bed();\n    }\n}\n\n// -------- Handle --------\nmodule handle() {\n    // Main shaft\n    cylinder(h = handle_len, d1 = handle_d, d2 = handle_d, center = true);\n\n    // Butt flare\n    translate([0, 0, handle_len/2])\n    cylinder(h = 10, d1 = handle_d, d2 = handle_d + 6, center = false);\n\n    // Decorative rings\n    for(z = [handle_len*0.3, handle_len*0.5, handle_len*0.7])\n        translate([0, 0, z - handle_len/2])\n        cylinder(h = 2, d = handle_d + 2, center = true);\n}\n\n// -------- Head frame --------\nmodule head_frame() {\n    // Oval outer rim\n    difference() {\n        scale([1, head_h/head_w, 1])\n            cylinder(h = rim_depth, d = head_w, center = true);\n        // Hollow center\n        scale([(head_w-2*th)/head_w, (head_h-2*th)/head_h, 1])\n            cylinder(h = rim_depth + 0.1, d = head_w, center = true);\n    }\n\n    // Throat connection to shaft\n    hull() {\n        // Attachment to shaft\n        translate([0, -handle_d/2 - 2, 0])\n            cube([handle_d + 4, 4, rim_depth], center = true);\n        // Attachment to head bottom\n        translate([0, -head_h/2 + rim_depth/2, 0])\n            cube([th*2, rim_depth, rim_depth], center = true);\n    }\n}\n\n// -------- String bed --------\nmodule string_bed() {\n    // Vertical strings\n    for(x = [-head_w/2 + th : string_pitch : head_w/2 - th])\n        translate([x, 0, 0])\n            cube([th, head_h - 2*th, th], center = true);\n\n    // Horizontal strings\n    for(y = [-head_h/2 + th : string_pitch : head_h/2 - th])\n        translate([0, y, 0])\n            cube([head_w - 2*th, th, th], center = true);\n}\n\n// Render the toy racket\nracket();",
    "renders": true
  },
  {
    "toy": "bat",
    "openscad_code": "// Realistic Toy Bat - Medium Complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\n// Overall dimensions: 120mm wingspan, 60mm length, 25mm thick\n\nmodule bat_body() {\n    // Main body - elongated teardrop shape\n    rotate([0, 0, 90])\n    scale([1, 1.2, 0.8])\n    sphere(d=25, $fn=20);\n}\n\nmodule bat_head() {\n    // Rounded head with ears\n    translate([12, 0, 0])\n    union() {\n        // Head sphere\n        sphere(d=18, $fn=20);\n        \n        // Left ear\n        translate([0, -7, 8])\n        rotate([30, 0, 0])\n        cylinder(h=12, d1=6, d2=2, $fn=8);\n        \n        // Right ear\n        translate([0, 7, 8])\n        rotate([30, 0, 0])\n        cylinder(h=12, d1=6, d2=2, $fn=8);\n    }\n}\n\nmodule bat_face() {\n    // Eyes and nose details\n    translate([20, 0, 0])\n    union() {\n        // Eyes\n        translate([0, -5, 3])\n        sphere(d=3);\n        \n        translate([0, 5, 3])\n        sphere(d=3);\n        \n        // Nose\n        translate([2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=4, d=3);\n    }\n}\n\nmodule wing_segment(angle, length) {\n    // Single wing rib segment\n    rotate([0, 0, angle])\n    translate([0, 0, -1])\n    cube([length, 2, 2], center=true);\n}\n\nmodule bat_wing(side) {\n    // Complete wing structure\n    translate([0, side * 25, 0])\n    rotate([0, 0, side * 30])\n    union() {\n        // Main wing membrane\n        translate([0, 0, 0])\n        scale([1, 1, 0.3])\n        sphere(d=50, $fn=6);\n        \n        // Wing ribs for structure\n        for(i = [0:15:60]) {\n            wing_segment(i + (side * 15), 35 - i/2);\n            wing_segment(-i + (side * 15), 35 - i/2);\n        }\n        \n        // Wing tip\n        translate([25, 0, 0])\n        rotate([0, 0, side * -20])\n        cylinder(h=15, d1=8, d2=4, $fn=8);\n    }\n}\n\nmodule bat_toy() {\n    union() {\n        // Main body assembly\n        bat_body();\n        bat_head();\n        \n        // Face details (recessed)\n        difference() {\n            bat_face();\n            translate([22, 0, 0])\n            scale([1.1, 1.1, 1.1])\n            bat_face();\n        }\n        \n        // Wings\n        bat_wing(1);  // Right wing\n        bat_wing(-1); // Left wing\n        \n        // Support nubs for 3D printing\n        translate([0, 0, -12])\n        cylinder(h=3, d=8, $fn=16);\n    }\n}\n\n// Main render\nbat_toy();",
    "renders": true
  },
  {
    "toy": "club",
    "openscad_code": "// Toy Club - Realistic Style with Medium Complexity\n// Overall dimensions: ~120mm length, 50mm head width, 35mm grip diameter\n\n$fn = 32; // Smooth curves for printing\n\n// Main parameters\nclub_length = 120;\ngrip_length = 45;\nhead_width = 50;\nhead_thickness = 25;\nwall_thickness = 2;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, 1], dy = [0, 1], dz = [0, 1]) {\n            translate([dx * (size[0] - 2*radius), dy * (size[1] - 2*radius), dz * (size[2] - 2*radius)])\n                sphere(r = radius);\n        }\n    }\n}\n\nmodule grip_texture() {\n    // Grip pattern - raised rings for better hold\n    for(i = [0:5]) {\n        translate([0, 0, i * 7])\n            difference() {\n                cylinder(h = 2, r = 17.5, center = false);\n                cylinder(h = 3, r = 15.5, center = false);\n            }\n    }\n}\n\nmodule shaft() {\n    // Main shaft\n    difference() {\n        cylinder(h = grip_length, r = 17.5);\n        translate([0, 0, -1])\n            cylinder(h = grip_length + 2, r = 15.5);\n    }\n    \n    // Grip texture\n    grip_texture();\n    \n    // Shaft transition\n    translate([0, 0, grip_length])\n        cylinder(h = 5, r1 = 17.5, r2 = 12);\n}\n\nmodule club_head() {\n    // Main head body\n    difference() {\n        rounded_cube([head_width, head_thickness, 35], 5);\n        translate([0, 0, 5])\n            rounded_cube([head_width - 4, head_thickness - 4, 30], 4);\n    }\n    \n    // Face grooves\n    for(i = [-20:5:20]) {\n        translate([i, head_thickness/2 - 1, 15])\n            cube([1, 2, 20]);\n    }\n    \n    // Back reinforcements\n    for(i = [-15:10:15]) {\n        translate([i, -head_thickness/2 + 2, 12])\n            cylinder(h = 10, r = 3);\n    }\n    \n    // Connection neck\n    translate([-head_width/2 + 10, 0, -15])\n        rotate([0, 90, 0])\n            cylinder(h = 20, r1 = 12, r2 = 15);\n}\n\nmodule hosel() {\n    // Hosel connection\n    difference() {\n        cylinder(h = 15, r = 8);\n        cylinder(h = 16, r = 6);\n    }\n    \n    // Hosel reinforcement rings\n    for(i = [2:3:12]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h = 1, r = 10);\n                cylinder(h = 2, r = 7);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Shaft and grip\n    translate([0, 0, 0])\n        shaft();\n    \n    // Hosel at transition\n    translate([0, 0, grip_length + 5])\n        hosel();\n    \n    // Club head\n    translate([head_width/2 - 10, 0, grip_length + 20])\n        rotate([0, -30, 0])\n            club_head();\n}\n\n// Toy safety features\n// Rounded edges on all corners\n// No sharp points\n// Solid construction for durability",
    "renders": true
  },
  {
    "toy": "tee",
    "openscad_code": "// Realistic toy tee (T-shaped table) for 3D printing\n// Medium complexity, ~110 lines\n\n// Overall dimensions\nteeWidth = 80;\nteeDepth = 60;\nteeHeight = 90;\nwallThickness = 2;\n\n// Table top parameters\ntopThickness = 6;\ntopWidth = teeWidth;\ntopDepth = teeDepth;\n\n// Leg parameters\nlegWidth = 20;\nlegDepth = 20;\nlegHeight = teeHeight - topThickness;\n\n// Shelf parameters\nshelfHeight = 35;\nshelfThickness = 4;\n\n// Rounded fillets\nfilletRadius = 3;\n$fn = 32;\n\nmodule roundedCube(size, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([size.x - r, r, r]) sphere(r);\n        translate([r, size.y - r, r]) sphere(r);\n        translate([size.x - r, size.y - r, r]) sphere(r);\n        translate([r, r, size.z - r]) sphere(r);\n        translate([size.x - r, r, size.z - r]) sphere(r);\n        translate([r, size.y - r, size.z - r]) sphere(r);\n        translate([size.x - r, size.y - r, size.z - r]) sphere(r);\n    }\n}\n\nmodule tableTop() {\n    difference() {\n        roundedCube([topWidth, topDepth, topThickness], filletRadius);\n        \n        // Add edge chamfers\n        for (x = [topThickness, topWidth - topThickness])\n            for (y = [topThickness, topDepth - topThickness])\n                translate([x, y, 0])\n                    cylinder(h = topThickness, r1 = topThickness, r2 = 0);\n    }\n}\n\nmodule leg(xOffset, yOffset) {\n    difference() {\n        roundedCube([legWidth, legDepth, legHeight], filletRadius);\n        \n        // Hollow inside for weight reduction\n        translate([wallThickness, wallThickness, 0])\n            cube([legWidth - 2*wallThickness, legDepth - 2*wallThickness, legHeight - wallThickness]);\n    }\n}\n\nmodule shelf() {\n    difference() {\n        roundedCube([topWidth - 2*legWidth + 2*wallThickness, legDepth - 2*wallThickness, shelfThickness], filletRadius);\n        \n        // Create grid pattern for toy detail\n        for (i = [-3:3]) {\n            translate([i * 8, 0, -1])\n                cube([2, legDepth - 2*wallThickness + 2, shelfThickness + 2]);\n            translate([0, i * 6, -1])\n                cube([topWidth - 2*legWidth + 2*wallThickness + 2, 2, shelfThickness + 2]);\n        }\n    }\n}\n\nmodule supportBars() {\n    // Front-back supports\n    for (x = [legWidth/2, topWidth - legWidth/2]) {\n        translate([x, wallThickness, shelfHeight + shelfThickness/2])\n            rotate([0, 90, 0])\n                cylinder(h = legDepth - 2*wallThickness, r = wallThickness/2);\n    }\n    \n    // Side supports\n    for (y = [wallThickness, legDepth - wallThickness]) {\n        translate([wallThickness, y, shelfHeight + shelfThickness/2])\n            rotate([90, 0, 0])\n                cylinder(h = topWidth - 2*wallThickness, r = wallThickness/2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Table top\n    translate([0, 0, legHeight])\n        tableTop();\n    \n    // Four legs\n    for (x = [0, topWidth - legWidth])\n        for (y = [0, topDepth - legDepth])\n            translate([x, y, 0])\n                leg(x, y);\n    \n    // Central shelf\n    translate([legWidth - wallThickness, wallThickness, shelfHeight])\n        shelf();\n    \n    // Support structure\n    supportBars();\n    \n    // Toy safety - rounded bottom edges\n    for (x = [0, topWidth - legWidth])\n        for (y = [0, topDepth - legDepth])\n            translate([x + legWidth/2, y + legDepth/2, 0])\n                sphere(r = filletRadius);\n}",
    "renders": true
  },
  {
    "toy": "mat",
    "openscad_code": "// Toy Play Mat - Realistic Style, Medium Complexity\n// Dimensions: 120x80x15mm overall\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges\n    hull() {\n        for(dx = [0, 1])\n        for(dy = [0, 1])\n        for(dz = [0, 1])\n            translate([dx*(size[0]-2*radius), dy*(size[1]-2*radius), dz*(size[2]-2*radius)])\n                sphere(r=radius, $fn=8);\n    }\n}\n\nmodule road_marking(x, y, length, width, angle) {\n    // Road marking lines\n    translate([x, y, 1])\n        rotate([0, 0, angle])\n            cube([length, width, 0.5]);\n}\n\nmodule tree_trunk(x, y) {\n    // Tree trunk\n    translate([x, y, 2])\n        cylinder(h=8, d=5, $fn=8);\n}\n\nmodule tree_top(x, y) {\n    // Tree foliage\n    translate([x, y, 10])\n        sphere(d=12, $fn=12);\n}\n\nmodule house_body(x, y) {\n    // House main body\n    translate([x, y, 2])\n        cube([15, 15, 12]);\n}\n\nmodule house_roof(x, y) {\n    // House roof\n    translate([x+7.5, y+7.5, 14])\n        rotate([0, 45, 0])\n            scale([1, 0.707, 1])\n                cube([15, 15, 10], center=true);\n}\n\nmodule toy_block(x, y, size) {\n    // Interlocking toy block\n    difference() {\n        union() {\n            translate([x, y, 2])\n                rounded_cube([size, size, size-1], 1);\n            translate([x+size/2, y+size/2, 2+size-1])\n                cylinder(h=2, d=size/2, $fn=8);\n        }\n        translate([x+size/2, y+size/2, 2+size-0.5])\n            cylinder(h=3, d=size/2-1, $fn=8);\n    }\n}\n\n// Base mat\ndifference() {\n    // Main mat body\n    translate([0, 0, 0])\n        rounded_cube([120, 80, 3], 5);\n    \n    // Corner holes for pegs\n    for(x = [7.5, 112.5])\n    for(y = [7.5, 72.5])\n        translate([x, y, -1])\n            cylinder(h=5, d=4);\n}\n\n// Road section\nunion() {\n    // Main road\n    translate([10, 30, 1])\n        rounded_cube([100, 20, 1], 2);\n    \n    // Road markings\n    for(i = [0:4])\n        road_marking(15 + i*20, 39.5, 10, 1, 0);\n}\n\n// Grass patches\nfor(x = [5, 45, 85])\n    translate([x, 5, 1])\n        rounded_cube([25, 20, 0.5], 2);\n\n// Park elements\n// Trees\ntree_trunk(30, 15);\ntree_top(30, 15);\ntree_trunk(100, 15);\ntree_top(100, 15);\n\n// Houses\nhouse_body(20, 60);\nhouse_roof(20, 60);\nhouse_body(90, 60);\nhouse_roof(90, 60);\n\n// Toy blocks scattered around\ntoy_block(50, 15, 6);\ntoy_block(70, 20, 4);\ntoy_block(25, 45, 5);\n\n// Water area (blue patch)\ntranslate([85, 50, 1])\n    rounded_cube([25, 25, 0.5], 2);\n\n// Mat border with studs for connecting mats\ntranslate([0, 0, 2.5])\n    for(x = [7.5:15:112.5])\n    for(y = [7.5, 72.5])\n        cylinder(h=1.5, d=3, $fn=8);",
    "renders": true
  },
  {
    "toy": "paddle",
    "openscad_code": "// Realistic Toy Paddle - Medium Complexity\n// Overall dimensions: ~120 mm length, 35 mm width, 12 mm thick\n\n// Main parameters\nhandle_length = 80;\nhandle_width = 12;\nhandle_thickness = 8;\npaddle_radius = 30;\npaddle_thickness = 6;\nball_radius = 8;\nelastic_length = 50;\nelastic_diameter = 1.5;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Color definitions (for preview)\n$fn = 32;\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle\n        translate([0, 0, handle_length/2])\n            cube([handle_width, handle_thickness, handle_length], center=true);\n        \n        // Grip indentations\n        for(i = [5:10:handle_length-10]) {\n            translate([0, handle_thickness/2 - 1, i])\n                cube([handle_width - 4, 2, 6], center=true);\n        }\n        \n        // Lanyard hole\n        translate([0, 0, handle_length - 15])\n            rotate([90, 0, 0])\n                cylinder(h=handle_width, r=2, center=true);\n    }\n    \n    // Grip ridges\n    for(i = [10:10:handle_length-10]) {\n        translate([0, handle_thickness/2 + 1, i])\n            cube([handle_width - 2, 2, 6], center=true);\n    }\n}\n\n// Paddle head with ball channel\nmodule paddle_head() {\n    difference() {\n        // Main paddle disc\n        cylinder(h=paddle_thickness, r=paddle_radius, center=true);\n        \n        // Ball channel\n        translate([0, 0, -1])\n            sphere(r=ball_radius + 1);\n        \n        // Air holes\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([paddle_radius/2, 0, 0])\n                    cylinder(h=paddle_thickness+2, r=2, center=true);\n        }\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, paddle_thickness/2 - 1])\n        cylinder(h=2, r=paddle_radius - 2);\n    \n    translate([0, 0, -paddle_thickness/2 + 1])\n        cylinder(h=2, r=paddle_radius - 2);\n}\n\n// Ball with connector hole\nmodule ball() {\n    difference() {\n        sphere(r=ball_radius);\n        \n        // Elastic connector hole\n        translate([0, 0, ball_radius - 2])\n            rotate([0, 90, 0])\n                cylinder(h=ball_radius*2, r=elastic_diameter/2 + 0.5, center=true);\n    }\n    \n    // Toy seam line\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h=0.5, r=ball_radius + 0.1, center=true);\n            cylinder(h=0.5, r=ball_radius - 0.1, center=true);\n        }\n}\n\n// Elastic band\nmodule elastic() {\n    color(\"red\")\n    translate([0, 0, -elastic_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=elastic_length, r=elastic_diameter/2, center=true);\n}\n\n// Assembly\ntranslate([0, 0, paddle_thickness/2])\n    paddle_head();\n\ntranslate([0, 0, paddle_thickness + handle_length/2])\n    handle();\n\n// Ball attached with elastic\ntranslate([0, 0, -elastic_length - ball_radius])\n    union() {\n        elastic();\n        translate([0, 0, -elastic_length/2 - ball_radius])\n            ball();\n    }",
    "renders": true
  },
  {
    "toy": "mitt",
    "openscad_code": "// Toy Mitt - Realistic Style, Medium Complexity\n\n// Overall dimensions (mm) - fits a small child hand\nhand_width = 70;\nhand_length = 110;\nthumb_length = 35;\nthumb_diameter = 20;\ncuff_width = 80;\ncuff_height = 30;\npalm_thickness = 12;\nwall_thickness = 2;\n\n// Main palm body\nmodule palm() {\n    difference() {\n        // Outer palm shell\n        hull() {\n            // Palm base\n            translate([0, 0, 0])\n                cube([hand_width, hand_length, palm_thickness], center=true);\n            \n            // Rounded fingertips\n            translate([0, hand_length/2 - 5, palm_thickness/2 - 2])\n                sphere(d=30);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n            cube([hand_width - wall_thickness*2, hand_length - wall_thickness*2, palm_thickness], center=true);\n    }\n}\n\n// Thumb section\nmodule thumb() {\n    // Thumb base\n    difference() {\n        hull() {\n            // Thumb connector\n            translate([-hand_width/2 + 5, -hand_length/3, 0])\n                cube([15, 15, 15], center=true);\n            \n            // Thumb main body\n            rotate([0, 0, -30])\n                translate([-hand_width/2 - 10, -hand_length/3 - 5, 0])\n                    cylinder(h=thumb_length, d=thumb_diameter);\n        }\n        \n        // Thumb hollow\n        rotate([0, 0, -30])\n            translate([-hand_width/2 - 10, -hand_length/3 - 5, -wall_thickness])\n                cylinder(h=thumb_length + wall_thickness, d=thumb_diameter - wall_thickness*2);\n    }\n}\n\n// Cuff section\nmodule cuff() {\n    difference() {\n        // Outer cuff\n        hull() {\n            // Back of mitt\n            translate([0, -hand_length/2 - 10, 0])\n                cube([cuff_width, cuff_height, palm_thickness + 10], center=true);\n            \n            // Cuff opening\n            translate([0, -hand_length/2 - 15, 0])\n                cube([cuff_width - 10, cuff_height, palm_thickness + 8], center=true);\n        }\n        \n        // Cuff interior\n        translate([0, -hand_length/2 - 12, 0])\n            cube([cuff_width - wall_thickness*2, cuff_height - wall_thickness*2, palm_thickness + 6], center=true);\n    }\n}\n\n// Stitching details\nmodule stitching() {\n    color(\"white\")\n    for(i = [-2:2]) {\n        // Palm seam\n        translate([i*10, 0, palm_thickness/2 + 0.1])\n            cube([0.5, hand_length*0.8, 0.5], center=true);\n        \n        // Thumb seam\n        rotate([0, 0, -30])\n            translate([-hand_width/2 - 10 + i*3, -hand_length/3 - 5, i*2])\n                cube([0.5, 0.5, 0.5], center=true);\n    }\n}\n\n// Fingers indication\nmodule fingers() {\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        // Finger ridges\n        translate([i*12, hand_length/4, palm_thickness/2 + 0.1])\n            cube([8, 3, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    palm();\n    thumb();\n    cuff();\n    \n    // Details\n    stitching();\n    fingers();\n}",
    "renders": true
  },
  {
    "toy": "helmet",
    "openscad_code": "// Toy soldier helmet\n// Overall size: ~100 mm (L) × 70 mm (W) × 90 mm (H)\n\n$fa = 2;\n$fs = 0.5;\n\nmodule helmet() {\n    // ---------- Main shell ----------\n    // 2 mm wall thickness, 90 mm tall, 70 mm diameter\n    difference() {\n        sphere(d = 70);                         // outer shell\n        sphere(d = 66);                         // inner cavity\n        translate([0, 0, 35]) cube([100, 100, 100], center = true); // open bottom\n    }\n\n    // ---------- Brim ----------\n    difference() {\n        cylinder(h = 2.5, d1 = 82, d2 = 78);    // top surface\n        cylinder(h = 2.6, d = 70);              // hole matching shell\n    }\n\n    // ---------- Crest holder ----------\n    translate([0, 0, 35])\n        cylinder(h = 12, d = 6);               // central post\n\n    // Crest blades (toy-friendly rounded rectangles)\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([3, 0, 41])\n                cube([22, 4, 3], center = true);\n\n    // ---------- Chinstrap loops ----------\n    module loop() {\n        rotate([90, 0, 0])\n            difference() {\n                torus(3, 1.2);                 // outer ring\n                torus(2.4, 1.2);               // inner hole\n            }\n    }\n\n    translate([-28, -30, -25]) loop();         // left loop\n    mirror([1, 0, 0]) translate([-28, -30, -25]) loop(); // right loop\n\n    // ---------- Ventilation rivets ----------\n    module rivet() {\n        translate([0, 0, 2])\n            cylinder(h = 2, d = 4, $fn = 8);\n    }\n\n    for (i = [1:2:5])\n        rotate([0, 0, i * 60])\n            translate([0, 34, 15]) rivet();\n\n    // ---------- Ear reinforcements ----------\n    module earplate() {\n        difference() {\n            hull() {\n                translate([-12, -30, 0]) sphere(d = 10);\n                translate([12, -30, 0]) sphere(d = 10);\n                translate([-12, -40, 0]) sphere(d = 10);\n                translate([12, -40, 0]) sphere(d = 10);\n            }\n            sphere(d = 68);                     // carve inside\n        }\n    }\n\n    earplate();                                // left ear\n    mirror([1, 0, 0]) earplate();              // right ear\n}\n\n// Helper torus for chinstrap loops\nmodule torus(r1, r2) {\n    rotate_extrude()\n        translate([r1, 0, 0])\n            circle(r = r2);\n}\n\nhelmet();",
    "renders": true
  },
  {
    "toy": "pads",
    "openscad_code": "// Toy Pads / Ottoman / Footstool\n// Realistic style, medium complexity\n\n// Parameters\nstool_top_d = 110;          // Diameter of the top cushion\nstool_height = 45;          // Total height including legs\nleg_h = 30;                 // Height of legs\nleg_t = 12;                 // Leg thickness\nframe_t = 6;                // Frame / apron thickness\ncushion_h = 12;             // Thickness of the top cushion\nbutton_d = 6;               // Upholstery button diameter\nbutton_h = 2;               // Upholstery button height\nseam_t = 1.5;               // Thickness of seam lines\n\n$fn = 36;\n\n// Main module\nmodule toy_pads() {\n    // Central axis\n    union() {\n        // Top cushion\n        translate([0, 0, cushion_h/2 + leg_h]) {\n            difference() {\n                // Basic cushion disc\n                cylinder(h = cushion_h, d = stool_top_d);\n\n                // Central tufting indent\n                translate([0, 0, -0.1])\n                    cylinder(h = button_h + 0.2, d = button_d + 2);\n\n                // Seam ring around edge\n                translate([0, 0, cushion_h/2 - seam_t/2])\n                    cylinder(h = seam_t + 0.1, d = stool_top_d - 10);\n            }\n\n            // Upholstery button\n            translate([0, 0, cushion_h - button_h/2])\n                cylinder(h = button_h, d = button_d);\n        }\n\n        // Support frame / apron\n        difference() {\n            // Outer cylinder\n            cylinder(h = frame_t, d = stool_top_d + 6);\n\n            // Hollow center for legs\n            translate([0, 0, -0.1])\n                cylinder(h = frame_t + 0.2, d = stool_top_d - 2*leg_t);\n        }\n\n        // Legs\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([(stool_top_d - leg_t)/2, 0, leg_h/2])\n                    cube([leg_t, leg_t, leg_h], center = true);\n        }\n\n        // Stretcher ring between legs\n        translate([0, 0, leg_h/2])\n            difference() {\n                cylinder(h = 4, d = stool_top_d - 2*leg_t + 8);\n                cylinder(h = 4.2, d = stool_top_d - 2*leg_t - 8);\n            }\n\n        // Small toy-safe feet caps\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([(stool_top_d - leg_t)/2, 0, 1])\n                    cylinder(h = 2, d = leg_t);\n        }\n    }\n}\n\n// Render the toy\ntoy_pads();",
    "renders": true
  },
  {
    "toy": "shinguards",
    "openscad_code": "// Realistic toy shinguards - medium complexity\n// Dimensions scaled for 3D printing (~120mm height)\n\n$fn = 36;\n\nmodule shinguard(is_left = true) {\n    // Main shell - curved outer surface\n    difference() {\n        // Outer curved shell\n        rotate([0, 15, 0])\n            scale([1, 1.2, 1])\n                cylinder(h = 100, r1 = 40, r2 = 35);\n        \n        // Remove inside to create hollow shell\n        translate([0, 0, 2])\n            rotate([0, 15, 0])\n                scale([0.8, 1, 0.95])\n                    cylinder(h = 100, r1 = 38, r2 = 33);\n    }\n    \n    // Inner padding layer\n    translate([0, 0, 50])\n        rotate([0, 15, 0])\n            scale([0.7, 0.9, 0.9])\n                cylinder(h = 95, r1 = 35, r2 = 30);\n    \n    // Top strap anchor points\n    for(i = [-1, 1]) {\n        translate([i * 25, 45, 95])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 5);\n    }\n    \n    // Bottom strap anchor points\n    for(i = [-1, 1]) {\n        translate([i * 25, 45, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 5);\n    }\n    \n    // Ventilation holes\n    for(y = [20, 40, 60, 80]) {\n        for(x = [-20, 0, 20]) {\n            translate([x, 45, y])\n                rotate([0, 15, 0])\n                    cylinder(h = 5, r = 3);\n        }\n    }\n    \n    // Reinforcement ridge around edges\n    difference() {\n        // Outer ridge\n        translate([0, 45, 50])\n            rotate([0, 15, 0])\n                scale([1.05, 1.25, 1.02])\n                    cylinder(h = 100, r1 = 42, r2 = 37);\n        \n        // Remove inner part\n        translate([0, 45, 50])\n            rotate([0, 15, 0])\n                scale([1.02, 1.22, 1])\n                    cylinder(h = 104, r1 = 39, r2 = 34);\n    }\n    \n    // Front protective plate\n    translate([0, 50, 50])\n        rotate([0, 15, 0])\n            cube([60, 3, 80], center = true);\n    \n    // Side hinges for adjustment\n    hinge_offset = is_left ? 35 : -35;\n    translate([hinge_offset, 45, 30])\n        rotate([0, 0, 90])\n            cylinder(h = 15, r = 4);\n    \n    translate([hinge_offset, 45, 70])\n        rotate([0, 0, 90])\n            cylinder(h = 15, r = 4);\n    \n    // Toy-style decorative elements\n    // Star pattern on front\n    for(angle = [0:60:300]) {\n        rotate([90, 0, angle])\n            translate([0, 48, 50])\n                scale([0.3, 0.3, 0.3])\n                    cylinder(h = 5, r1 = 8, r2 = 0);\n    }\n}\n\n// Create left shinguard\ntranslate([-50, 0, 0])\n    shinguard(true);\n\n// Create right shinguard (mirror)\ntranslate([50, 0, 0])\n    mirror([1, 0, 0])\n        shinguard(false);",
    "renders": true
  },
  {
    "toy": "cleats",
    "openscad_code": "$fa = 2;\n$fs = 1;\n\n// Overall scale: ~90 mm long cleats toy\nscaleFactor = 1;\n\nmodule sole() {\n    difference() {\n        // Main sole block\n        translate([-30, -20, 0])\n            cube([60, 40, 8]);\n        \n        // Heel curve\n        translate([25, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=12, $fn=20);\n        \n        // Front taper\n        translate([-30, 0, 4])\n            rotate([0, 90, 0])\n                cylinder(h=40, r=20, $fn=20);\n    }\n}\n\nmodule studs() {\n    // Circular pattern of studs on sole bottom\n    for (a = [0:30:330]) {\n        translate([0, 0, 0])\n            rotate([0, 0, a])\n                translate([15, 0, -3])\n                    cylinder(h=4, r=4, $fn=16);\n    }\n    \n    // Additional studs near edges\n    for (x = [-20:10:20]) {\n        for (y = [-15:10:15]) {\n            if (abs(x) > 15 || abs(y) > 12) {\n                translate([x, y, -3])\n                    cylinder(h=4, r=3, $fn=12);\n            }\n        }\n    }\n}\n\nmodule upper() {\n    // Main upper shell\n    difference() {\n        hull() {\n            translate([-28, -18, 8])\n                cube([56, 36, 20]);\n            translate([-25, -15, 15])\n                cube([50, 30, 25]);\n        }\n        \n        // Foot opening\n        translate([-20, -12, 15])\n            cube([40, 24, 25]);\n        \n        // Lace holes area indentation\n        translate([-18, -8, 25])\n            cube([36, 16, 5]);\n    }\n}\n\nmodule laces() {\n    // Lace holes\n    for (x = [-15:5:15]) {\n        for (y = [-5, 5]) {\n            translate([x, y, 28])\n                cylinder(h=3, r=1.5, $fn=8);\n        }\n    }\n    \n    // Simple crossed laces\n    color(\"white\")\n    for (i = [-15:5:10]) {\n        hull() {\n            translate([i, -5, 29.5])\n                sphere(r=0.8);\n            translate([i+5, 5, 29.5])\n                sphere(r=0.8);\n        }\n    }\n}\n\nmodule heelCounter() {\n    // Reinforced heel cup\n    difference() {\n        translate([20, -12, 8])\n            cube([12, 24, 25]);\n        translate([20, -12, 15])\n            cube([12, 24, 25]);\n    }\n    \n    // Heel tab\n    translate([26, -4, 30])\n        cube([4, 8, 8]);\n}\n\nmodule toeCap() {\n    // Reinforced toe area\n    difference() {\n        translate([-30, -15, 8])\n            cube([15, 30, 20]);\n        translate([-30, -12, 8])\n            cube([15, 24, 20]);\n    }\n}\n\nmodule sideDetails() {\n    // Logo area\n    translate([0, -20.5, 15])\n        cube([15, 1, 8]);\n    \n    // Side vents\n    for (z = [12:4:24]) {\n        translate([0, -20.5, z])\n            cube([8, 1, 2]);\n    }\n}\n\n// Assemble the cleats toy\nscale([scaleFactor, scaleFactor, scaleFactor])\nunion() {\n    // Sole with studs\n    union() {\n        sole();\n        studs();\n    }\n    \n    // Upper structure\n    upper();\n    \n    // Details\n    laces();\n    heelCounter();\n    toeCap();\n    sideDetails();\n    mirror([0,1,0]) sideDetails();\n}",
    "renders": true
  },
  {
    "toy": "rollerblades",
    "openscad_code": "// Rollerblades Toy Model\n// Medium complexity realistic style\n\n// Constants\n$fn = 32;\nwheel_radius = 6;\nwheel_width = 4;\nboot_length = 100;\nboot_height = 40;\nboot_width = 35;\nframe_thickness = 3;\n\n// Main module\nmodule rollerblades() {\n    // Left rollerblade\n    translate([-boot_width-5, 0, 0])\n        single_rollerblade();\n    \n    // Right rollerblade\n    translate([boot_width+5, 0, 0])\n        mirror([1,0,0])\n        single_rollerblade();\n}\n\n// Single rollerblade\nmodule single_rollerblade() {\n    union() {\n        // Boot\n        boot();\n        \n        // Frame\n        frame();\n        \n        // Wheels\n        wheels();\n        \n        // Lacing system\n        lacing();\n        \n        // Buckles\n        buckles();\n        \n        // Toe stop\n        toe_stop();\n    }\n}\n\n// Boot construction\nmodule boot() {\n    // Main boot body\n    difference() {\n        // Outer shell\n        union() {\n            // Ankle cuff\n            translate([0, boot_length/2 - 20, boot_height/2])\n                rotate([90,0,0])\n                cylinder(h=25, r1=15, r2=20, center=true);\n                \n            // Foot part\n            translate([0, 0, boot_height/2])\n                cube([boot_width-8, boot_length, boot_height], center=true);\n                \n            // Heel support\n            translate([0, -boot_length/2 + 15, boot_height/2 + 5])\n                cube([boot_width-10, 20, 15], center=true);\n        }\n        \n        // Hollow inside\n        translate([0, 5, boot_height/2])\n            cube([boot_width-12, boot_length-10, boot_height-4], center=true);\n    }\n}\n\n// Frame for wheels\nmodule frame() {\n    difference() {\n        // Main frame rails\n        for(side = [-1, 1]) {\n            translate([side * (boot_width/2 - 10), 0, wheel_radius + 3])\n                cube([frame_thickness, boot_length - 10, wheel_radius*2], center=true);\n        }\n        \n        // Axle holes\n        for(i = [0:3]) {\n            y_pos = boot_length/2 - 20 - i * 20;\n            for(side = [-1, 1]) {\n                translate([side * (boot_width/2 - 10), y_pos, wheel_radius + 3])\n                    rotate([90,0,0])\n                    cylinder(h=frame_thickness+2, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Wheels assembly\nmodule wheels() {\n    for(i = [0:3]) {\n        y_pos = boot_length/2 - 20 - i * 20;\n        \n        // Wheel\n        translate([0, y_pos, wheel_radius + 3])\n            rotate([0,90,0])\n            difference() {\n                // Wheel body\n                cylinder(h=wheel_width, r=wheel_radius, center=true);\n                \n                // Bearing hole\n                cylinder(h=wheel_width+2, r=2, center=true);\n            }\n            \n        // Axle\n        for(side = [-1, 1]) {\n            translate([side * (boot_width/2 - 10), y_pos, wheel_radius + 3])\n                rotate([90,0,0])\n                cylinder(h=boot_width-20, r=1.5, center=true);\n        }\n    }\n}\n\n// Lacing system\nmodule lacing() {\n    color(\"white\")\n    for(row = [0:4]) {\n        z_pos = boot_height/2 + 15 - row * 5;\n        y_pos = boot_length/2 - 10 - row * 10;\n        \n        // Eyelets\n        for(side = [-1, 1]) {\n            translate([side * (boot_width/2 - 5), y_pos, z_pos])\n                cylinder(h=3, r=2);\n        }\n        \n        // Lace segments\n        translate([-(boot_width/2 - 5), y_pos, z_pos])\n            cube([boot_width-10, 1, 1]);\n    }\n}\n\n// Buckles\nmodule buckles() {\n    // Ankle buckle\n    translate([0, boot_length/2 - 25, boot_height + 15])\n        union() {\n            // Buckle base\n            cube([boot_width-10, 15, 5], center=true);\n            \n            // Buckle clip\n            translate([boot_width/2 - 5, 0, 2.5])\n                cube([10, 8, 3]);\n        }\n        \n    // Cuff buckle\n    translate([0, boot_length/2 - 35, boot_height/2 + 10])\n        union() {\n            // Strap\n            cube([boot_width-10, 20, 3], center=true);\n            \n            // Buckle\n            translate([boot_width/2 - 5, 0, 1.5])\n                cube([8, 12, 3]);\n        }\n}\n\n// Toe stop\nmodule toe_stop() {\n    translate([0, -boot_length/2 + 5, wheel_radius*2 + 3])\n        rotate([0,90,0])\n        difference() {\n            // Stopper body\n            cylinder(h=10, r1=8, r2=6);\n            \n            // Mounting hole\n            cylinder(h=12, r=2);\n        }\n}\n\n// Generate the model\nrollerblades();",
    "renders": true
  },
  {
    "toy": "springboard",
    "openscad_code": "// Realistic toy springboard (diving board)\n// Overall size: 140mm x 40mm x 45mm\n// 2mm wall thickness for all parts\n\n// Parameters\n$fn = 50;\nboard_length = 120;\nboard_width = 38;\nboard_thickness = 3;\nbase_height = 20;\nbase_length = 50;\nbase_width = 35;\nspring_block_height = 8;\nspring_block_width = 15;\nspring_block_length = 25;\nleg_thickness = 4;\nsupport_angle = 25;\n\n// Main module\nmodule springboard_toy() {\n    union() {\n        // Base platform\n        translate([0, 0, base_height/2])\n            base_platform();\n        \n        // Support legs\n        translate([-base_length/2 + leg_thickness/2, 0, base_height/2])\n            support_leg();\n        translate([base_length/2 - leg_thickness/2, 0, base_height/2])\n            support_leg();\n        \n        // Spring mechanism block\n        translate([0, 0, base_height + spring_block_height/2])\n            spring_block();\n        \n        // Diving board\n        translate([board_length/2 - base_length/2, 0, base_height + spring_block_height + board_thickness/2])\n            diving_board();\n        \n        // Support brackets\n        translate([0, -board_width/2 - 2, base_height + spring_block_height/2])\n            rotate([0, support_angle, 0])\n                support_bracket();\n        translate([0, board_width/2 + 2, base_height + spring_block_height/2])\n            rotate([0, -support_angle, 0])\n                support_bracket();\n        \n        // Safety rail posts\n        for(i = [-1, 1]) {\n            translate([board_length/2 - 15, i * (board_width/2 + 2), base_height + spring_block_height + board_thickness + 8])\n                safety_post();\n        }\n        \n        // Traction strips on board\n        for(pos = [20:20:100]) {\n            translate([pos, 0, base_height + spring_block_height + board_thickness + 0.1])\n                traction_strip();\n        }\n    }\n}\n\n// Base platform with rounded edges\nmodule base_platform() {\n    difference() {\n        // Main base\n        minkowski() {\n            cube([base_length, base_width, base_height], center = true);\n            sphere(2);\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n            minkowski() {\n                cube([base_length - 4, base_width - 4, base_height], center = true);\n                sphere(1);\n            }\n    }\n}\n\n// Support leg\nmodule support_leg() {\n    cube([leg_thickness, base_width - 6, base_height], center = true);\n}\n\n// Spring mechanism block\nmodule spring_block() {\n    difference() {\n        cube([spring_block_length, spring_block_width, spring_block_height], center = true);\n        \n        // Spring details\n        for(i = [-1, 0, 1]) {\n            translate([i * 6, 0, -spring_block_height/2 - 0.5])\n                cylinder(h = spring_block_height + 1, r = 2, center = true);\n        }\n    }\n}\n\n// Diving board with rounded edges\nmodule diving_board() {\n    difference() {\n        // Main board\n        minkowski() {\n            cube([board_length, board_width, board_thickness], center = true);\n            sphere(1);\n        }\n        \n        // Hollow underside\n        translate([0, 0, -1])\n            minkowski() {\n                cube([board_length - 4, board_width - 4, board_thickness], center = true);\n                sphere(0.5);\n            }\n        \n        // Grip holes\n        for(x = [30:20:90]) {\n            translate([x, 0, board_thickness/2])\n                cylinder(h = 3, r = 3, center = true);\n        }\n    }\n}\n\n// Support bracket\nmodule support_bracket() {\n    cube([25, 2, 10], center = true);\n}\n\n// Safety post\nmodule safety_post() {\n    difference() {\n        cylinder(h = 15, r = 3, center = false);\n        translate([0, 0, -1])\n            cylinder(h = 17, r = 2, center = false);\n    }\n}\n\n// Traction strip\nmodule traction_strip() {\n    cube([3, board_width - 8, 0.5], center = true);\n}\n\n// Generate the toy\nspringboard_toy();",
    "renders": true
  },
  {
    "toy": "rebounder",
    "openscad_code": "// Mini-Rebounder Toy (Medium Complexity, Realistic Style)\n// Overall size ≈ 90 mm wide × 70 mm deep × 100 mm high\n// Wall thickness 2 mm throughout\n\n$fn = 36;\n\n// Main assembly\nmodule rebounder() {\n    // Frame base\n    base();\n    \n    // Upright posts\n    post_left();\n    post_right();\n    \n    // Rebound mesh / net\n    net();\n    \n    // Cross supports\n    support_bar_front();\n    support_bar_back();\n    \n    // Toy wheels for portability\n    wheel_assembly();\n}\n\n// Base with rounded edges\nmodule base() {\n    difference() {\n        union() {\n            // Main plate\n            translate([-45, -35, -5])\n                cube([90, 70, 5]);\n            \n            // Front lip for ball stop\n            translate([-45, -35, 0])\n                cube([90, 5, 8]);\n        }\n        \n        // Lightening holes\n        for (x = [-30, 0, 30])\n            translate([x, -15, -2.5])\n                cylinder(h = 6, r = 8);\n    }\n}\n\n// Left post\nmodule post_left() {\n    translate([-38, -30, 0])\n        cylinder(h = 95, r = 4);\n    \n    // Top cap\n    translate([-38, -30, 95])\n        sphere(r = 5);\n}\n\n// Right post\nmodule post_right() {\n    translate([38, -30, 0])\n        cylinder(h = 95, r = 4);\n    \n    // Top cap\n    translate([38, -30, 95])\n        sphere(r = 5);\n}\n\n// Net / mesh surface\nmodule net() {\n    difference() {\n        // Net frame\n        translate([-40, 0, 92])\n            cube([80, 60, 2]);\n        \n        // Net holes pattern\n        for (y = [5 : 10 : 55])\n            for (x = [-35 : 10 : 35])\n                translate([x, y, 91])\n                    cylinder(h = 3, r = 2.5);\n    }\n}\n\n// Front support bar\nmodule support_bar_front() {\n    translate([0, 30, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 76, r = 3);\n}\n\n// Back support bar\nmodule support_bar_back() {\n    translate([0, -30, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 76, r = 3);\n}\n\n// Toy wheels for rolling on floor\nmodule wheel_assembly() {\n    // Left wheel\n    translate([-45, 0, -2])\n        wheel();\n    \n    // Right wheel\n    translate([45, 0, -2])\n        wheel();\n}\n\nmodule wheel() {\n    difference() {\n        union() {\n            // Wheel disc\n            cylinder(h = 6, r = 10);\n            \n            // Axle stub\n            translate([0, 0, 3])\n                cylinder(h = 4, r = 3);\n        }\n        \n        // Spoke holes\n        for (a = [0 : 120 : 240])\n            rotate([0, 0, a])\n                translate([6, 0, 2.5])\n                    cylinder(h = 7, r = 2);\n    }\n}\n\n// Render the complete toy\nrebounder();",
    "renders": true
  },
  {
    "toy": "goalie",
    "openscad_code": "// Goalie Toy Figure - Realistic Style, Medium Complexity\n// Overall height ~90 mm, suitable for 3D printing\n\nmodule goalie() {\n    // Body torso\n    color(\"white\") difference() {\n        union() {\n            cylinder(h=30, r1=12, r2=15, $fn=32); // Main torso\n            translate([0, 0, 30]) cylinder(h=8, r1=15, r2=18, $fn=32); // Chest padding\n        }\n        // Hollow out for material savings\n        translate([0, 0, -1]) cylinder(h=40, r1=9, r2=12, $fn=32);\n    }\n    \n    // Head\n    translate([0, 0, 40]) color(\"peachpuff\") {\n        sphere(10, $fn=32);\n        // Face mask cage\n        difference() {\n            sphere(11.5, $fn=32);\n            scale([0.8, 0.8, 0.8]) sphere(12, $fn=32);\n        }\n    }\n    \n    // Arms\n    module arm(side) {\n        translate([side * 18, 0, 30]) rotate([0, 0, side * -30]) {\n            // Upper arm\n            color(\"white\") cylinder(h=20, r=4, $fn=16);\n            // Glove\n            translate([0, 0, 20]) rotate([0, side * -20, 0]) {\n                color(\"red\") scale([1.5, 1, 1]) sphere(8, $fn=16);\n            }\n        }\n    }\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    module leg(side) {\n        translate([side * 6, 0, -5]) {\n            // Upper leg\n            color(\"white\") cylinder(h=25, r=5, $fn=16);\n            // Knee pad\n            translate([0, 0, 25]) rotate([0, side * 10, 0]) {\n                color(\"red\") sphere(6, $fn=16);\n            }\n            // Lower leg\n            translate([0, 0, 30]) rotate([0, side * 20, 0]) {\n                color(\"white\") cylinder(h=20, r=4, $fn=16);\n            }\n            // Skate boot\n            translate([0, 0, 52]) {\n                color(\"black\") {\n                    cube([12, 20, 8], center=true);\n                    translate([0, 8, -4]) cube([12, 4, 2], center=true);\n                }\n            }\n        }\n    }\n    leg(1);\n    leg(-1);\n    \n    // Goalie stick\n    translate([20, 0, 15]) rotate([0, 0, 45]) {\n        color(\"saddlebrown\") {\n            cylinder(h=50, r=1.5, $fn=8); // Shaft\n            translate([0, 0, 50]) rotate([90, 0, 0]) {\n                difference() {\n                    cube([25, 12, 3], center=true); // Blade\n                    translate([10, 0, 0]) cube([20, 8, 4], center=true);\n                }\n            }\n        }\n    }\n    \n    // Jersey details\n    translate([0, 15, 20]) color(\"blue\") {\n        cube([30, 2, 10], center=true); // Team stripe\n    }\n    translate([0, -15, 20]) color(\"blue\") {\n        cube([30, 2, 10], center=true); // Team stripe\n    }\n    \n    // Number on back\n    translate([0, 18, 35]) rotate([90, 0, 0]) linear_extrude(2) {\n        text(\"1\", size=8, halign=\"center\");\n    }\n}\n\n// Base for stability\ncolor(\"gray\") translate([0, 0, -8]) {\n    cylinder(h=3, r=20, $fn=32);\n}\n\ngoalie();",
    "renders": true
  },
  {
    "toy": "keeper",
    "openscad_code": "// Keeper Toy Chest (medium complexity, realistic style)\n// 3D-printable toy chest with hinged lid and decorative details\n\n// Overall dimensions\nwidth = 80;\ndepth = 45;\nheight_body = 35;\nheight_total = 55;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main toy chest body\nmodule chest_body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height_body], center=true);\n        \n        // Hollow inside\n        translate([0, 0, -wall/2])\n            cube([width-2*wall, depth-2*wall, height_body-wall], center=true);\n    }\n}\n\n// Chest lid with curved top\nmodule chest_lid() {\n    difference() {\n        // Main lid block\n        translate([0, 0, height_body/2 + 2])\n            cube([width, depth, 8], center=true);\n        \n        // Curved top\n        translate([0, 0, height_body/2 + 6])\n            scale([1, 1, 0.5])\n            sphere(d=width-4, $fn=50);\n        \n        // Hollow underside\n        translate([0, 0, height_body/2 + 2 - wall/2])\n            cube([width-2*wall, depth-2*wall, 8-wall], center=true);\n    }\n}\n\n// Hinges (2x)\nmodule hinges() {\n    for (x = [-width/3, width/3]) {\n        translate([x, depth/2 - 1, height_body/2])\n            rotate([90, 0, 0])\n            cylinder(h=4, d1=6, d2=6, center=true);\n    }\n}\n\n// Decorative panels on front/back\nmodule panels() {\n    for (side = [-1, 1]) {\n        translate([0, side * (depth/2 - 1.5), 0])\n            cube([width-8, 1, height_body-8], center=true);\n    }\n}\n\n// Keyhole detail\nmodule keyhole() {\n    translate([0, -depth/2 + 1, 0])\n    difference() {\n        // Keyhole plate\n        cube([8, 2, 6], center=true);\n        \n        // Keyhole slot\n        translate([0, 0, -1])\n            cylinder(h=3, d1=2, d2=2, center=true);\n        translate([0, -1, -1])\n            cube([1, 2.5, 3], center=true);\n    }\n}\n\n// Reinforced corners\nmodule corners() {\n    for (x = [-1, 1])\n    for (y = [-1, 1])\n    translate([x * (width/2 - 2), y * (depth/2 - 2), 0])\n        difference() {\n            // Corner block\n            cube([4, 4, height_body], center=true);\n            \n            // Chamfer edges\n            translate([x * 2, y * 2, 0])\n                rotate([0, 0, x*y*45])\n                cube([5.66, 5.66, height_body+1], center=true);\n        }\n}\n\n// Base trim\nmodule base_trim() {\n    translate([0, 0, -height_body/2 - 1])\n    difference() {\n        // Base platform\n        cube([width+4, depth+4, 2], center=true);\n        \n        // Recess for body\n        translate([0, 0, 1])\n            cube([width, depth, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    chest_body();\n    chest_lid();\n    \n    // Structural details\n    hinges();\n    panels();\n    corners();\n    base_trim();\n    \n    // Decorative elements\n    keyhole();\n}",
    "renders": true
  },
  {
    "toy": "striker",
    "openscad_code": "// Toy striker / rocking horse\n// Overall printable size ~120 mm (length) x 60 mm (width) x 90 mm (height)\n\n// Parameters\nbody_length = 100;\nbody_width  = 40;\nbody_height = 50;\nrocker_radius = 80;\nrocker_thickness = 2.5;\nrocker_arc = 120;\nhead_radius = 18;\near_radius = 6;\nleg_length = 35;\nleg_width = 8;\ntail_length = 25;\ntail_diam = 4;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, body_height/2])\n                cube([body_length, body_width, body_height], center = true);\n            translate([-body_length/2 - 5, 0, body_height - 10])\n                sphere(d = head_radius * 2);\n        }\n        \n        // Hollow inside\n        translate([0, 0, body_height/2 + 2])\n            cube([body_length - 4, body_width - 4, body_height - 2], center = true);\n    }\n}\n\n// Rocking runners\nmodule rockers() {\n    difference() {\n        // Left rocker\n        rotate([90, 0, 0])\n            translate([-body_width/2 - rocker_thickness/2, 0, 0])\n                cylinder(h = rocker_thickness, r = rocker_radius, center = true, $fn = 60);\n        \n        // Trim to arc\n        translate([0, 0, -rocker_radius * cos(rocker_arc/2) + 5])\n            cube([rocker_radius * 2, body_width + 10, rocker_radius * 2], center = true);\n    }\n    \n    mirror([1, 0, 0])\n        difference() {\n            // Right rocker\n            rotate([90, 0, 0])\n                translate([-body_width/2 - rocker_thickness/2, 0, 0])\n                    cylinder(h = rocker_thickness, r = rocker_radius, center = true, $fn = 60);\n            \n            // Trim to arc\n            translate([0, 0, -rocker_radius * cos(rocker_arc/2) + 5])\n                cube([rocker_radius * 2, body_width + 10, rocker_radius * 2], center = true);\n        }\n}\n\n// Head with ears\nmodule head() {\n    // Head sphere\n    translate([-body_length/2 - 5, 0, body_height - 10])\n        sphere(d = head_radius * 2);\n    \n    // Left ear\n    translate([-body_length/2 - 5, head_radius * 0.7, body_height + 5])\n        sphere(d = ear_radius * 2);\n    \n    // Right ear\n    translate([-body_length/2 - 5, -head_radius * 0.7, body_height + 5])\n        sphere(d = ear_radius * 2);\n}\n\n// Front legs\nmodule front_legs() {\n    for (y = [-body_width/4, body_width/4]) {\n        translate([body_length/2 - 20, y, leg_length/2])\n            cube([leg_width, leg_width, leg_length], center = true);\n    }\n}\n\n// Rear legs\nmodule rear_legs() {\n    for (y = [-body_width/4, body_width/4]) {\n        translate([-body_length/2 + 15, y, leg_length/2])\n            cube([leg_width, leg_width, leg_length], center = true);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-body_length/2 + 5, 0, body_height - 5])\n        rotate([0, 30, 0])\n            cylinder(h = tail_length, d = tail_diam, center = true);\n}\n\n// Assemble striker\nunion() {\n    body();\n    rockers();\n    head();\n    front_legs();\n    rear_legs();\n    tail();\n}",
    "renders": true
  },
  {
    "toy": "pitcher",
    "openscad_code": "// Toy Pitcher - Realistic Style\n// Height: ~110mm\n// Wall thickness: 2mm\n// Designed for 3D printing\n\nmodule pitcher_body() {\n    // Main body - slightly tapered cylinder\n    difference() {\n        cylinder(h=50, r1=25, r2=28, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=48, r1=23, r2=26, $fn=64);\n    }\n}\n\nmodule pitcher_base() {\n    // Solid base with rounded bottom\n    union() {\n        cylinder(h=5, r=28, $fn=64);\n        translate([0, 0, -2])\n            sphere(r=28, $fn=64);\n    }\n}\n\nmodule pitcher_spout() {\n    // Curved spout with proper wall thickness\n    rotate([0, -20, 0])\n        translate([0, 28, 40])\n            difference() {\n                hull() {\n                    cylinder(h=20, r=8, $fn=32);\n                    translate([0, 15, 15])\n                        cylinder(h=8, r=6, $fn=32);\n                }\n                rotate([0, -20, 0])\n                    translate([0, 0, 2])\n                        cylinder(h=18, r=6, $fn=32);\n            }\n}\n\nmodule pitcher_handle() {\n    // C-shaped handle\n    difference() {\n        // Outer handle\n        translate([-30, 0, 25])\n            rotate([90, 0, 0])\n                rotate_extrude(angle=180, $fn=64)\n                    translate([25, 0, 0])\n                        circle(r=4, $fn=32);\n        // Inner space\n        translate([-30, 0, 25])\n            rotate([90, 0, 0])\n                rotate_extrude(angle=180, $fn=64)\n                    translate([25, 0, 0])\n                        circle(r=2, $fn=32);\n    }\n}\n\nmodule rim_detail() {\n    // Thickened rim for toy durability\n    difference() {\n        cylinder(h=6, r=29, $fn=64);\n        cylinder(h=6, r=26.5, $fn=64);\n    }\n}\n\nmodule decorative_stripes() {\n    // Horizontal stripes for grip\n    for(i = [1:3]) {\n        translate([0, 0, 8 + i*12])\n            difference() {\n                cylinder(h=2, r=27, $fn=64);\n                cylinder(h=2, r=25.5, $fn=64);\n            }\n    }\n}\n\nmodule toy_features() {\n    // Rounded edges for safety\n    translate([0, 0, 55])\n        cylinder(h=2, r=28.5, $fn=64);\n    \n    // Bottom reinforcement ring\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=3, r=30, $fn=64);\n            cylinder(h=3, r=28, $fn=64);\n        }\n}\n\n// Assembly\nunion() {\n    pitcher_body();\n    translate([0, 0, -5])\n        pitcher_base();\n    pitcher_spout();\n    pitcher_handle();\n    translate([0, 0, 50])\n        rim_detail();\n    decorative_stripes();\n    toy_features();\n}",
    "renders": true
  },
  {
    "toy": "catcher",
    "openscad_code": "// Toy Catcher (Ball Grabber) - Realistic Medium Complexity\n// Safe for 3D printing, overall ~100 mm length\n\n// Parameters\nhandle_len = 70;\nhandle_d = 12;\ncup_outer_d = 32;\ncup_inner_d = 28;\ncup_depth = 30;\nwall = 2;\nspring_coils = 8;\nspring_wire = 1.5;\n\n// Color definitions (for preview)\n$fn = 32;\n\n// Utility for rounded edges\nmodule rounded_cube(s, r) {\n    hull() {\n        for(dx=[0,s.x], dy=[0,s.y], dz=[0,s.z])\n            translate([dx?r:s.x-r, dy?r:s.y-r, dz?r:s.z-r])\n                sphere(r);\n    }\n}\n\n// Handle grip texture rings\nmodule grip_rings() {\n    for(i=[0:4]) {\n        translate([0,0,i*12])\n            difference() {\n                cylinder(h=3, d=handle_d+1);\n                cylinder(h=3.5, d=handle_d-1);\n            }\n    }\n}\n\n// Main handle shaft\nmodule handle() {\n    union() {\n        // Main tube\n        difference() {\n            cylinder(h=handle_len, d=handle_d);\n            cylinder(h=handle_len+1, d=handle_d-wall*2);\n        }\n        // End cap\n        translate([0,0,handle_len])\n            rounded_cube([handle_d,handle_d,wall*2], handle_d/2);\n        // Grip texture\n        translate([0,0,10])\n            grip_rings();\n    }\n}\n\n// Spring mechanism\nmodule spring() {\n    for(i=[0:spring_coils-1]) {\n        rotate([0,0,i*360/spring_coils])\n            translate([handle_d/2+spring_wire,0,i*10/spring_coils])\n                rotate([90,0,0])\n                    cylinder(h=handle_d+spring_wire*2, d=spring_wire);\n    }\n}\n\n// Catcher cup\nmodule cup() {\n    difference() {\n        // Outer shell\n        union() {\n            cylinder(h=cup_depth, d=cup_outer_d);\n            // Reinforcement rim\n            translate([0,0,cup_depth])\n                cylinder(h=wall*1.5, d=cup_outer_d+wall);\n        }\n        // Inner cavity\n        cylinder(h=cup_depth+1, d=cup_inner_d);\n        // Flex slots for ball entry\n        for(a=[0:120:359])\n            rotate([0,0,a])\n                translate([cup_outer_d/2-2,0,0])\n                    cube([4, wall+1, cup_depth*0.8], center=true);\n    }\n}\n\n// Trigger lever\nmodule trigger() {\n    translate([0,-handle_d/2-4,handle_len-20])\n        rotate([90,0,0])\n            difference() {\n                union() {\n                    // Lever arm\n                    cube([20,4,8], center=true);\n                    // Finger pad\n                    translate([10,0,0])\n                        rounded_cube([8,6,10], 2);\n                }\n                // Mounting hole\n                translate([-10,0,0])\n                    rotate([90,0,0])\n                        cylinder(h=20, d=3);\n            }\n}\n\n// Assembly\nunion() {\n    color(\"red\") handle();\n    color(\"lightgray\") \n        translate([0,0,handle_len-5])\n            spring();\n    color(\"blue\") \n        translate([0,0,handle_len+10])\n            cup();\n    color(\"darkgray\") trigger();\n}\n\n// Optional loop for keychain\ntranslate([0,0,-5])\n    rotate([90,0,0])\n        difference() {\n            cylinder(h=8, d=8);\n            cylinder(h=9, d=4);\n        }",
    "renders": true
  },
  {
    "toy": "batter",
    "openscad_code": "// Realistic toy batter (baseball bat) with medium complexity\n// Overall height: 120mm, designed for 3D printing with 2mm walls\n\n// Main parameters\nbat_length = 120;\nhandle_diameter = 12;\nbarrel_diameter = 22;\nknob_diameter = 18;\nknob_thickness = 4;\n\n// Taper calculations\ntaper_length = bat_length * 0.6;\nhandle_length = bat_length * 0.35;\nknob_length = bat_length * 0.05;\n\n// Create the main bat body\nmodule bat_body() {\n    union() {\n        // Handle section\n        cylinder(h=handle_length, d1=handle_diameter, d2=handle_diameter*1.1, $fn=32);\n        \n        // Tapered section\n        translate([0, 0, handle_length])\n            cylinder(h=taper_length, d1=handle_diameter*1.1, d2=barrel_diameter, $fn=32);\n        \n        // Barrel section\n        translate([0, 0, handle_length + taper_length])\n            cylinder(h=knob_length + 2, d=barrel_diameter, $fn=32);\n    }\n}\n\n// Create the knob at the end\nmodule bat_knob() {\n    translate([0, 0, -knob_thickness])\n        cylinder(h=knob_thickness, d=knob_diameter, $fn=32);\n}\n\n// Add grip rings\nmodule grip_rings() {\n    ring_width = 2;\n    ring_depth = 0.5;\n    ring_spacing = 10;\n    num_rings = 3;\n    \n    for(i=[0:num_rings-1]) {\n        translate([0, 0, i*ring_spacing + 5])\n            difference() {\n                cylinder(h=ring_width, d=handle_diameter+0.2, $fn=32);\n                cylinder(h=ring_width+0.2, d=handle_diameter-ring_depth*2, $fn=32);\n            }\n    }\n}\n\n// Add seam details for realistic look\nmodule bat_seams() {\n    seam_offset = barrel_diameter/2 + 0.1;\n    seam_length = 80;\n    \n    // Left seam\n    translate([-seam_offset, 0, handle_length])\n        rotate([90, 0, 0])\n            cylinder(h=seam_length, d=0.5, $fn=8);\n    \n    // Right seam\n    translate([seam_offset, 0, handle_length])\n        rotate([90, 0, 0])\n            cylinder(h=seam_length, d=0.5, $fn=8);\n}\n\n// Create hollow interior for material saving\nmodule hollow_interior() {\n    wall_thickness = 2;\n    \n    difference() {\n        bat_body();\n        // Hollow out handle\n        translate([0, 0, 5])\n            cylinder(h=handle_length-5, d=handle_diameter-wall_thickness*2, $fn=32);\n        \n        // Hollow out taper\n        translate([0, 0, handle_length])\n            cylinder(h=taper_length, d1=handle_diameter*1.1-wall_thickness*2, d2=barrel_diameter-wall_thickness*2, $fn=32);\n        \n        // Hollow out barrel\n        translate([0, 0, handle_length + taper_length])\n            cylinder(h=knob_length, d=barrel_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Toy label/brand area\nmodule toy_label() {\n    label_width = 15;\n    label_height = 8;\n    label_depth = 0.5;\n    \n    translate([0, -handle_diameter/2 - 0.1, 25])\n        cube([label_width, label_depth, label_height], center=true);\n}\n\n// Main assembly\nunion() {\n    // Main bat structure\n    union() {\n        hollow_interior();\n        bat_knob();\n    }\n    \n    // Details\n    grip_rings();\n    bat_seams();\n    toy_label();\n}",
    "renders": true
  },
  {
    "toy": "runner",
    "openscad_code": "// Runner toy - realistic style, medium complexity\n// Approx 120mm long x 60mm wide x 70mm tall\n\n$fn = 32;\n\n// Main parameters\nbody_length = 100;\nbody_width = 35;\nbody_height = 60;\nleg_thickness = 6;\narm_thickness = 5;\nhead_size = 22;\njoint_radius = 3;\n\nmodule runner_toy() {\n    // Head and neck\n    translate([body_length/2, 0, body_height - head_size/2 - 5])\n        sphere(d = head_size);\n    \n    translate([body_length/2 - 10, 0, body_height - 15])\n        cylinder(h = 10, d = 12);\n    \n    // Torso\n    translate([0, 0, body_height/2])\n        cube([body_length, body_width, body_height], center = true);\n    \n    // Arms\n    // Left arm\n    translate([body_length/4, body_width/2 + arm_thickness/2, body_height - 15])\n        rotate([0, 0, 45])\n        cylinder(h = 40, d = arm_thickness);\n    \n    // Right arm\n    translate([body_length/4, -body_width/2 - arm_thickness/2, body_height - 15])\n        rotate([0, 0, -45])\n        cylinder(h = 40, d = arm_thickness);\n    \n    // Legs\n    // Left leg\n    translate([-body_length/3, body_width/4, body_height/2 - 30])\n        cylinder(h = 40, d = leg_thickness);\n    \n    // Left foot\n    translate([-body_length/3 - 15, body_width/4, body_height/2 - 50])\n        cube([25, 12, 8], center = true);\n    \n    // Right leg\n    translate([-body_length/3, -body_width/4, body_height/2 - 30])\n        cylinder(h = 40, d = leg_thickness);\n    \n    // Right foot\n    translate([-body_length/3 - 15, -body_width/4, body_height/2 - 50])\n        cube([25, 12, 8], center = true);\n    \n    // Joints - knees and elbows\n    // Left knee\n    translate([-body_length/3, body_width/4, body_height/2 - 10])\n        sphere(d = joint_radius * 2);\n    \n    // Right knee\n    translate([-body_length/3, -body_width/4, body_height/2 - 10])\n        sphere(d = joint_radius * 2);\n    \n    // Left elbow\n    translate([body_length/4 + 15, body_width/2 + 15, body_height - 25])\n        sphere(d = joint_radius * 2);\n    \n    // Right elbow\n    translate([body_length/4 + 15, -body_width/2 - 15, body_height - 25])\n        sphere(d = joint_radius * 2);\n    \n    // Shoulders\n    translate([body_length/4, body_width/2 + arm_thickness/2, body_height - 15])\n        sphere(d = joint_radius * 2.5);\n    \n    translate([body_length/4, -body_width/2 - arm_thickness/2, body_height - 15])\n        sphere(d = joint_radius * 2.5);\n    \n    // Hips\n    translate([-body_length/3, body_width/4, body_height/2 - 30])\n        sphere(d = joint_radius * 2.5);\n    \n    translate([-body_length/3, -body_width/4, body_height/2 - 30])\n        sphere(d = joint_radius * 2.5);\n    \n    // Facial features\n    // Eyes\n    translate([body_length/2 + head_size/2 - 3, -6, body_height - 5])\n        sphere(d = 4);\n    \n    translate([body_length/2 + head_size/2 - 3, 6, body_height - 5])\n        sphere(d = 4);\n    \n    // Mouth\n    translate([body_length/2 + head_size/2 - 2, 0, body_height - 12])\n        cube([2, 8, 3], center = true);\n    \n    // Nose\n    translate([body_length/2 + head_size/2 - 3, 0, body_height - 8])\n        sphere(d = 3);\n    \n    // Hair detail\n    translate([body_length/2, 0, body_height])\n        cube([head_size/2, head_size, 5], center = true);\n    \n    // Shoe details\n    // Left shoe sole\n    difference() {\n        translate([-body_length/3 - 15, body_width/4, body_height/2 - 54])\n            cube([27, 14, 4]);\n        translate([-body_length/3 - 15, body_width/4, body_height/2 - 54])\n            cube([23, 10, 5], center = true);\n    }\n    \n    // Right shoe sole\n    difference() {\n        translate([-body_length/3 - 15, -body_width/4, body_height/2 - 54])\n            cube([27, 14, 4]);\n        translate([-body_length/3 - 15, -body_width/4, body_height/2 - 54])\n            cube([23, 10, 5], center = true);\n    }\n}\n\n// Render the runner toy\nrunner_toy();",
    "renders": true
  },
  {
    "toy": "juggler",
    "openscad_code": "// Juggler Toy Figure - Realistic Style, Medium Complexity\n// Height: ~100mm for 3D printing\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\n\nmodule ball(radius = 8) {\n    sphere(r = radius);\n}\n\nmodule head() {\n    // Head sphere\n    translate([0, 0, 85])\n        sphere(r = 12);\n    \n    // Eyes\n    translate([-4, 7, 88])\n        sphere(r = 2);\n    translate([4, 7, 88])\n        sphere(r = 2);\n    \n    // Nose\n    translate([0, 10, 85])\n        sphere(r = 1.5);\n    \n    // Smile\n    translate([0, 11, 82])\n        rotate([90, 0, 0])\n            cylinder(h = 1, r1 = 4, r2 = 4);\n}\n\nmodule torso() {\n    // Main body\n    translate([0, 0, 60])\n        scale([1, 0.6, 1.5])\n            sphere(r = 15);\n    \n    // Shirt details\n    translate([0, 2, 65])\n        cube([20, 2, 20], center = true);\n}\n\nmodule arm(side = 1) {\n    // Upper arm\n    translate([side * 12, 0, 75])\n        rotate([0, 0, side * 30])\n            cylinder(h = 15, r = 4);\n    \n    // Lower arm\n    translate([side * 24, 0, 75])\n        rotate([0, 0, side * 60])\n            cylinder(h = 15, r = 3.5);\n    \n    // Hand\n    translate([side * 35, 0, 75])\n        rotate([0, 0, side * 60])\n            sphere(r = 4);\n}\n\nmodule leg(side = 1) {\n    // Upper leg\n    translate([side * 5, 0, 45])\n        cylinder(h = 20, r = 5);\n    \n    // Lower leg\n    translate([side * 5, 0, 30])\n        cylinder(h = 20, r = 4.5);\n    \n    // Shoe\n    translate([side * 5, 2, 20])\n        scale([1.2, 2, 0.8])\n            sphere(r = 6);\n}\n\nmodule juggler() {\n    // Base platform\n    translate([0, 0, 10])\n        cylinder(h = 3, r = 20);\n    \n    // Body parts\n    torso();\n    head();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}\n\nmodule juggling_balls() {\n    // Three balls in juggling positions\n    translate([20, 15, 85])\n        ball(6);\n    \n    translate([0, 20, 95])\n        ball(6);\n    \n    translate([-20, 15, 75])\n        ball(6);\n}\n\n// Assembly\nunion() {\n    juggler();\n    juggling_balls();\n}",
    "renders": true
  },
  {
    "toy": "balancer",
    "openscad_code": "// Balancer Toy Seesaw\n// 3D printable toy with realistic proportions and working pivot\n\n$fn = 50;\n\n// Overall dimensions\nbase_width = 80;\nbase_depth = 40;\nbase_height = 10;\nbeam_length = 120;\nbeam_width = 15;\nbeam_height = 8;\npivot_height = 35;\npivot_diameter = 12;\nseat_size = 30;\nseat_height = 3;\nhandle_height = 25;\nhandle_diameter = 5;\n\n// Base with rounded corners\nmodule base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded edges\n        for(x = [-base_width/2 + 5, base_width/2 - 5])\n            for(y = [-base_depth/2 + 5, base_depth/2 - 5])\n                translate([x, y, base_height])\n                    cylinder(h=base_height + 2, r=5, center=false);\n    }\n}\n\n// Triangular support structure\nmodule support() {\n    union() {\n        // Left support\n        translate([-base_width/4, 0, base_height])\n            rotate([0, -30, 0])\n                cube([pivot_height, 5, 5], center=true);\n        \n        // Right support\n        translate([base_width/4, 0, base_height])\n            rotate([0, 30, 0])\n                cube([pivot_height, 5, 5], center=true);\n        \n        // Center pivot post\n        translate([0, 0, base_height + pivot_height/2])\n            cylinder(h=pivot_height, d=pivot_diameter, center=true);\n        \n        // Pivot cap\n        translate([0, 0, base_height + pivot_height])\n            sphere(d=pivot_diameter + 4);\n    }\n}\n\n// Beam with seats and handles\nmodule beam() {\n    union() {\n        // Main beam\n        translate([0, 0, base_height + pivot_height + beam_height/2])\n            cube([beam_length, beam_width, beam_height], center=true);\n        \n        // Left seat\n        translate([-beam_length/3, 0, base_height + pivot_height + beam_height + seat_height/2])\n            cube([seat_size, seat_size, seat_height], center=true);\n        \n        // Right seat\n        translate([beam_length/3, 0, base_height + pivot_height + beam_height + seat_height/2])\n            cube([seat_size, seat_size, seat_height], center=true);\n        \n        // Left handle posts\n        translate([-beam_length/3, seat_size/2 + handle_diameter/2, base_height + pivot_height + beam_height + seat_height])\n            cylinder(h=handle_height, d=handle_diameter);\n        \n        translate([-beam_length/3, -seat_size/2 - handle_diameter/2, base_height + pivot_height + beam_height + seat_height])\n            cylinder(h=handle_height, d=handle_diameter);\n        \n        // Right handle posts\n        translate([beam_length/3, seat_size/2 + handle_diameter/2, base_height + pivot_height + beam_height + seat_height])\n            cylinder(h=handle_height, d=handle_diameter);\n        \n        translate([beam_length/3, -seat_size/2 - handle_diameter/2, base_height + pivot_height + beam_height + seat_height])\n            cylinder(h=handle_height, d=handle_diameter);\n        \n        // Handle crossbars\n        translate([-beam_length/3, seat_size/2 + handle_diameter/2, base_height + pivot_height + beam_height + seat_height + handle_height - handle_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=seat_size + handle_diameter, d=handle_diameter);\n        \n        translate([beam_length/3, seat_size/2 + handle_diameter/2, base_height + pivot_height + beam_height + seat_height + handle_height - handle_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=seat_size + handle_diameter, d=handle_diameter);\n        \n        // Pivot hole\n        translate([0, 0, base_height + pivot_height])\n            rotate([90, 0, 0])\n                cylinder(h=beam_width + 2, d=pivot_diameter + 1, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    support();\n    beam();\n}",
    "renders": true
  },
  {
    "toy": "spinner",
    "openscad_code": "// Realistic 3D-printable spinner toy\n// Overall Ø90 mm, thickness 12 mm, three weighted arms\n\n$fa = 1;\n$fs = 0.5;\n\n// Main parameters\nspinner_d = 90;           // overall diameter\nthickness = 12;           // thickness of body\ncenter_d = 22;            // central bearing boss diameter\ngrip_h = 4;               // raised grip ring height\narm_w = 18;               // arm width at root\narm_tip_w = 14;           // arm width at tip\narm_len = (spinner_d - center_d) / 2 - 4; // arm length\nweight_d = 14;            // counter-weight boss diameter\nweight_h = 10;            // counter-weight boss height\nbearing_hole = 8.2;       // 608 bearing hole Ø\nwall = 2;                 // wall thickness for printing\n\nmodule arm_root() {\n    difference() {\n        // main arm body\n        translate([0, arm_len/2, 0])\n            cube([arm_w, arm_len, thickness], center = true);\n        \n        // chamfer underside\n        translate([0, arm_len/2 + arm_w/2 - 1, -thickness/2 + 1])\n            rotate([0,45,0])\n                cube([arm_w*2, arm_w*2, wall], center = true);\n    }\n}\n\nmodule arm_tip() {\n    difference() {\n        union() {\n            // tapered arm end\n            translate([0, arm_len, 0])\n                cube([arm_tip_w, arm_tip_w, thickness], center = true);\n            \n            // circular counter-weight boss\n            translate([0, arm_len + arm_tip_w/2, 0])\n                cylinder(d = weight_d, h = weight_h, $fn = 30);\n        }\n        // cut chamfer on bottom\n        translate([0, arm_len + arm_tip_w/2, -weight_h/2 + 1])\n            rotate([0,45,0])\n                cube([weight_d*2, weight_d*2, wall*2], center = true);\n    }\n}\n\nmodule spinner_arm() {\n    union() {\n        arm_root();\n        arm_tip();\n    }\n}\n\nmodule main_body() {\n    difference() {\n        union() {\n            // central disk\n            cylinder(d = center_d, h = thickness, $fn = 60);\n            \n            // raised grip ring\n            translate([0,0,thickness/2 - grip_h/2])\n                cylinder(d = center_d - 4, h = grip_h, $fn = 60);\n            \n            // three arms\n            for (a = [0, 120, 240]) {\n                rotate([0,0,a])\n                    spinner_arm();\n            }\n        }\n        \n        // central bearing hole\n        cylinder(d = bearing_hole, h = thickness + 1, $fn = 30);\n        \n        // finger grip recess\n        translate([0,0,-0.5])\n            cylinder(d = center_d - 8, h = thickness/2 + 1, $fn = 60);\n    }\n}\n\n// render the toy\nmain_body();",
    "renders": true
  },
  {
    "toy": "tosser",
    "openscad_code": "// Toy Tosser (Catapult) - Realistic Style, Medium Complexity\n// All dimensions in mm, 2mm wall thickness, 3D-printable\n\n$fn = 32;  // Smooth curves\n\n// Main body frame\nmodule frame() {\n    // Base platform\n    difference() {\n        cube([60, 80, 4], center = true);\n        translate([0, 0, 2.1])\n            cube([56, 76, 4], center = true);\n    }\n    \n    // Side supports\n    for (x = [-25, 25]) {\n        translate([x, 0, 20])\n            difference() {\n                cube([8, 76, 40], center = true);\n                translate([0, 0, 20])\n                    cube([4, 72, 38], center = true);\n            }\n    }\n}\n\n// Pivot axle\nmodule axle() {\n    rotate([90, 0, 0])\n        cylinder(h = 52, d = 6, center = true);\n}\n\n// Launching arm\nmodule arm() {\n    translate([0, 0, 40])\n        difference() {\n            // Main arm\n            rotate([0, 90, 0])\n                cylinder(h = 70, d1 = 12, d2 = 8);\n            \n            // Hollow center\n            rotate([0, 90, 0])\n                translate([0, 0, -1])\n                    cylinder(h = 72, d1 = 8, d2 = 4);\n            \n            // Cup at end\n            translate([0, 35, 0])\n                sphere(d = 16);\n            translate([0, 35, 0])\n                sphere(d = 12);\n        }\n}\n\n// Torsion spring simulation\nmodule spring() {\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([0, 0, 40])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, d = 4);\n    }\n}\n\n// Release mechanism\nmodule release() {\n    translate([0, -35, 25])\n        difference() {\n            // Trigger\n            cube([20, 6, 15], center = true);\n            translate([0, 0, 7.5])\n                cube([16, 4, 15], center = true);\n            \n            // Catch\n            translate([8, -3, 0])\n                cube([4, 6, 15], center = true);\n        }\n}\n\n// Support braces\nmodule braces() {\n    // Front brace\n    translate([0, 30, 15])\n        difference() {\n            rotate([0, 90, 0])\n                cylinder(h = 60, d1 = 6, d2 = 10);\n            rotate([0, 90, 0])\n                cylinder(h = 60, d1 = 2, d2 = 6);\n        }\n    \n    // Rear brace\n    translate([0, -30, 15])\n        difference() {\n            rotate([0, 90, 0])\n                cylinder(h = 60, d1 = 6, d2 = 10);\n            rotate([0, 90, 0])\n                cylinder(h = 60, d1 = 2, d2 = 6);\n        }\n}\n\n// Assembly\nunion() {\n    frame();\n    axle();\n    arm();\n    spring();\n    release();\n    braces();\n    \n    // Safety stop\n    translate([0, 40, 35])\n        difference() {\n            cube([30, 4, 10], center = true);\n            translate([0, 0, 5])\n                cube([26, 2, 10], center = true);\n        }\n}",
    "renders": true
  },
  {
    "toy": "thrower",
    "openscad_code": "// Realistic toy thrower (boomerang) - medium complexity\n// Overall length: 130mm, width: 30mm, thickness: 6mm\n// 3D printable with 2mm walls and no steep overhangs\n\n// Main parameters\nlength = 130;\nwidth = 30;\nthickness = 6;\nedge_radius = 3;\ngrip_holes = 3;\n\n// Main wing shape module\nmodule wing() {\n    // Central curved body\n    difference() {\n        // Main wing body with rounded edges\n        hull() {\n            // First end\n            translate([-length/2, -width/2, 0])\n                cylinder(h=thickness, r1=width/2, r2=width/2, $fn=20);\n            // Second end\n            translate([length/2, -width/2, 0])\n                cylinder(h=thickness, r1=width/2, r2=width/2, $fn=20);\n            // Middle bulge\n            translate([0, 0, 0])\n                cylinder(h=thickness, r1=width*0.8, r2=width*0.8, $fn=20);\n        }\n        \n        // Taper the ends\n        translate([-length/2 - 5, -width - 5, -1])\n            cube([10, width*2 + 10, thickness + 2]);\n        translate([length/2 - 5, -width - 5, -1])\n            cube([10, width*2 + 10, thickness + 2]);\n    }\n    \n    // Grip holes for toy fingers\n    for(i = [0:grip_holes-1]) {\n        rotate([0, 0, i * 30 - 30])\n            translate([-length/2 + 20 + i * 30, 0, thickness/2])\n                cylinder(h=thickness + 1, r1=4, r2=4, $fn=16);\n    }\n    \n    // Raised grip ridges\n    for(i = [0:4]) {\n        rotate([0, 0, i * 15 - 30])\n            translate([-length/2 + 10 + i * 25, 0, thickness])\n                cube([20, 2, 1], center=true);\n    }\n}\n\n// Cross brace for structural strength\nmodule brace() {\n    translate([0, 0, thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=width*1.5, r1=2, r2=2, $fn=12);\n}\n\n// Decorative wing tips\nmodule wing_tips() {\n    // Left tip\n    translate([-length/2 - 5, 0, thickness/2])\n        rotate([0, 0, -30])\n            cube([10, 8, thickness], center=true);\n    \n    // Right tip\n    translate([length/2 + 5, 0, thickness/2])\n        rotate([0, 0, 30])\n            cube([10, 8, thickness], center=true);\n}\n\n// Surface texture lines\nmodule texture_lines() {\n    for(i = [0:8]) {\n        rotate([0, 0, i * 20 - 80])\n            translate([0, -width, thickness/2])\n                cube([length*1.2, 0.5, thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main wing\n    wing();\n    \n    // Structural brace\n    brace();\n    \n    // Wing tips\n    wing_tips();\n    \n    // Surface details\n    texture_lines();\n}",
    "renders": true
  },
  {
    "toy": "kicker",
    "openscad_code": "// Mini wooden rocking kicker / rocking horse (toy scale)\n// Overall footprint ≈ 110 mm × 45 mm × 70 mm\n// All walls ≥ 2 mm for reliable FDM printing\n\n// Parameters\nrocker_r     = 45;   // rocker radius\nrocker_w     = 40;   // rocker width\nrocker_t     =  6;   // rocker thickness\nbody_l       = 90;   // horse body length\nbody_w       = 28;   // body width\nbody_h       = 50;   // body height\nhead_l       = 25;   // head protrusion\nhead_h       = 35;   // head height\nseat_h       =  8;   // seat cushion thickness\nleg_d        =  8;   // Ø of round legs\npost_d       =  4;   // Ø of handle posts\nhandle_w     = 60;   // handle bar width\nhandle_d     =  8;   // handle bar depth\n\n// Half-rocker profile (to be mirrored)\nmodule rocker_half() {\n    difference() {\n        // Main curved rocker\n        translate([0, -rocker_t/2, 0])\n            cube([rocker_r, rocker_t, rocker_w], center=true);\n        // Hollow the inside to leave 2 mm shell\n        translate([0, -rocker_t/2 + 1, 0])\n            cube([rocker_r - 2, rocker_t - 2, rocker_w - 2], center=true);\n        // Round the outer edge\n        translate([rocker_r, 0, 0])\n            rotate([0,90,0])\n                cylinder(h=rocker_r*2, r=rocker_t/2, center=true);\n    }\n}\n\n// Assemble full rocker base\nmodule rocker_base() {\n    translate([-rocker_r, 0, 0]) {\n        rocker_half();\n        mirror([1,0,0]) rocker_half();\n    }\n}\n\n// Horse body block\nmodule horse_body() {\n    difference() {\n        // Main body\n        translate([0, 0, body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n        // Carve underside clearance\n        translate([0, 0, -1])\n            cube([body_l - 10, body_w + 2, 2], center=true);\n        // Simple saddle recess\n        translate([0, 0, body_h - seat_h])\n            cube([body_l - 20, body_w - 6, seat_h + 1], center=true);\n    }\n}\n\n// Horse head\nmodule horse_head() {\n    difference() {\n        // Basic head block\n        translate([body_l/2 + head_l/2, 0, body_h - head_h/2 + 5])\n            cube([head_l, body_w - 10, head_h], center=true);\n        // Eye holes (simple cylinders)\n        for(x = [body_l/2 + head_l/2 + 5, body_l/2 + head_l/2 + 12])\n            translate([x, (body_w - 10)/2 - 2, body_h - head_h/2 + 25])\n                rotate([0,90,0])\n                    cylinder(h=5, r=3);\n    }\n}\n\n// Four support legs\nmodule legs() {\n    for(x = [-body_l/2 + 10, body_l/2 - 10])\n        for(y = [-body_w/2 + leg_d/2 + 2, body_w/2 - leg_d/2 - 2]) {\n            translate([x, y, leg_d/2])\n                cylinder(h=body_h - rocker_t - leg_d, r=leg_d/2, center=false);\n        }\n}\n\n// Handle bar\nmodule handle_bar() {\n    // Posts\n    for(x = [-body_l/2 + 15, body_l/2 - 15]) {\n        translate([x, 0, body_h + post_d/2])\n            cylinder(h=30, r=post_d/2);\n    }\n    // Cross-bar\n    translate([0, 0, body_h + 30 + handle_d/2])\n        rotate([0,90,0])\n            cylinder(h=handle_w, r=handle_d/2);\n}\n\n// Assemble complete kicker\nunion() {\n    rocker_base();\n    translate([0, 0, rocker_t])\n        union() {\n            horse_body();\n            horse_head();\n            legs();\n            handle_bar();\n        }\n}",
    "renders": true
  },
  {
    "toy": "dribbler",
    "openscad_code": "// Realistic Medium-Complexity Toy Dribbler (Baby High Chair)\n// Overall printable size ~120 mm tall\n\n$fn = 36;\n\n// Main body dimensions\nseat_w = 60;\nseat_d = 55;\nseat_h = 45;\nleg_h = 75;\nleg_r = 3.5;\nback_h = 70;\nback_w = seat_w;\n\n// Tray dimensions\ntray_w = seat_w + 20;\ntray_d = 35;\ntray_h = 10;\n\nmodule rounded_cube(size, r)\n{\n    x = size.x; y = size.y; z = size.z;\n    translate([r, r, r]) cube([x-2*r, y-2*r, z-2*r]);\n    for(dx=[0,x], dy=[0,y], dz=[0,z])\n        translate([dx?x-r:r, dy?y-r:r, dz?z-r:r])\n            sphere(r);\n    for(dx=[0,x]) translate([dx?x-r:r, r, r])\n        rotate([0,90,0]) cylinder(h=y-2*r, r=r);\n    for(dx=[0,x]) translate([dx?x-r:r, r, r])\n        rotate([90,0,0]) cylinder(h=z-2*r, r=r);\n    for(dy=[0,y]) translate([r, dy?y-r:r, r])\n        rotate([0,0,90]) cylinder(h=x-2*r, r=r);\n    for(dy=[0,y]) translate([r, dy?y-r:r, r])\n        rotate([90,0,0]) cylinder(h=z-2*r, r=r);\n    for(dz=[0,z]) translate([r, r, dz?z-r:r])\n        rotate([0,90,0]) cylinder(h=y-2*r, r=r);\n    for(dz=[0,z]) translate([r, r, dz?z-r:r])\n        rotate([0,0,90]) cylinder(h=x-2*r, r=r);\n}\n\n// Leg module with foot\nmodule leg()\n{\n    union()\n    {\n        cylinder(h=leg_h, r=leg_r);\n        translate([0,0,-2]) \n            rotate_extrude() translate([leg_r-2,0,0]) circle(r=2);\n    }\n}\n\n// Seat cushion detail\nmodule seat_cushion()\n{\n    difference()\n    {\n        rounded_cube([seat_w, seat_d, 8], 5);\n        translate([0,0,2]) rounded_cube([seat_w-4, seat_d-4, 8], 5);\n    }\n}\n\n// Backrest with bars\nmodule backrest()\n{\n    union()\n    {\n        // Main back panel\n        translate([-seat_w/2, -seat_d/2, 0])\n            rounded_cube([seat_w, 10, back_h], 5);\n        // Vertical bars\n        for(x = [-20:10:20])\n            translate([x, -seat_d/2+5, 0])\n                rounded_cube([4, 6, back_h-15], 2);\n    }\n}\n\n// Tray with cup holder\nmodule tray()\n{\n    difference()\n    {\n        rounded_cube([tray_w, tray_d, tray_h], 5);\n        // Cup holder recess\n        translate([tray_w/2-15, tray_d/2-15, 0])\n            cylinder(h=tray_h, r=15, $fn=32);\n    }\n}\n\n// Safety bar\nmodule safety_bar()\n{\n    difference()\n    {\n        union()\n        {\n            // Horizontal bar\n            translate([0, seat_d/2+2, seat_h/2])\n                rotate([90,0,0]) cylinder(h=seat_w+10, r=3);\n            // Side supports\n            for(x=[-seat_w/2-5, seat_w/2+5])\n                translate([x, seat_d/2+2, leg_h/2])\n                    rotate([0,90,0]) cylinder(h=leg_h/2-seat_h/2, r=3);\n        }\n        // Remove center section for baby\n        translate([0, seat_d/2+2, seat_h/2])\n            rotate([90,0,0]) cylinder(h=seat_w-20, r=3.1);\n    }\n}\n\n// Assembly\nunion()\n{\n    // Four legs\n    for(x=[-seat_w/2+10, seat_w/2-10])\n        for(y=[-seat_d/2+10, seat_d/2-10])\n            translate([x, y, 0]) leg();\n    \n    // Seat\n    translate([0, 0, leg_h-seat_h/2]) seat_cushion();\n    \n    // Backrest\n    translate([0, -seat_d/2+5, leg_h-seat_h/2+4]) backrest();\n    \n    // Tray\n    translate([0, seat_d/2+tray_d/2-5, leg_h-seat_h/2+seat_h+5]) tray();\n    \n    // Safety bar\n    safety_bar();\n}",
    "renders": true
  },
  {
    "toy": "shooter",
    "openscad_code": "// Toy Shooter - Realistic Style, Medium Complexity\n// Dimensions: ~120mm length, ~80mm height, ~30mm width\n// Wall thickness: 2mm for 3D printability\n\n$fn = 50;\n\nmodule handle() {\n    // Main grip with ergonomic curves\n    difference() {\n        // Outer shape\n        hull() {\n            translate([-5, 0, 0]) cylinder(h=80, r=12);\n            translate([5, 0, 80]) cylinder(h=20, r1=12, r2=8);\n        }\n        \n        // Hollow grip interior\n        translate([0, 0, 5]) cylinder(h=70, r=10);\n    }\n    \n    // Trigger guard\n    difference() {\n        hull() {\n            cylinder(h=15, r=3);\n            translate([0, 25, 0]) cylinder(h=15, r=3);\n        }\n        translate([0, 12.5, -1]) cube([6, 20, 17]);\n    }\n}\n\nmodule trigger() {\n    // Trigger lever\n    translate([0, 20, 35]) rotate([0, 10, 0]) {\n        difference() {\n            hull() {\n                cube([8, 2, 15]);\n                translate([0, 0, 15]) cube([6, 2, 8]);\n            }\n            translate([2, -1, 5]) cube([4, 4, 10]);\n        }\n    }\n}\n\nmodule barrel() {\n    // Main barrel assembly\n    translate([0, 0, 90]) {\n        // Outer barrel\n        difference() {\n            cylinder(h=60, r=8);\n            translate([0, 0, 5]) cylinder(h=50, r=6);\n        }\n        \n        // Front sight\n        translate([0, 8, 60]) cube([10, 2, 4]);\n    }\n}\n\nmodule magazine() {\n    // Detachable magazine\n    translate([0, -12, 55]) {\n        difference() {\n            // Magazine body\n            cube([20, 6, 30], center=true);\n            // Mag well\n            translate([0, 0, 5]) cube([16, 4, 20], center=true);\n        }\n        \n        // Base plate\n        translate([0, 0, -18]) cube([22, 8, 4], center=true);\n    }\n}\n\nmodule stock() {\n    // Collapsible stock\n    translate([0, 0, 0]) {\n        // Stock tube\n        difference() {\n            cylinder(h=25, r=10);\n            translate([0, 0, 5]) cylinder(h=20, r=8);\n        }\n        \n        // Butt pad\n        translate([0, 0, -5]) {\n            difference() {\n                cube([22, 8, 6], center=true);\n                translate([0, 0, 3]) cube([18, 6, 6], center=true);\n            }\n        }\n    }\n}\n\nmodule body() {\n    // Upper receiver\n    translate([0, 0, 80]) {\n        difference() {\n            // Main body\n            hull() {\n                cube([30, 20, 15], center=true);\n                translate([0, 0, 15]) cube([26, 18, 10], center=true);\n            }\n            \n            // Ejection port\n            translate([12, 5, 10]) cube([8, 8, 5]);\n            \n            // Charging handle slot\n            translate([-10, 0, 15]) cube([20, 4, 3]);\n        }\n    }\n    \n    // Lower receiver\n    translate([0, 0, 65]) {\n        difference() {\n            cube([25, 15, 20], center=true);\n            cube([21, 11, 20], center=true);\n        }\n    }\n}\n\nmodule charging_handle() {\n    // Movable charging handle\n    translate([-15, 0, 90]) {\n        difference() {\n            cube([8, 4, 8]);\n            translate([2, 1, 2]) cube([4, 2, 4]);\n        }\n        \n        // Handle knob\n        translate([-2, 0, 4]) sphere(r=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    handle();\n    stock();\n    body();\n    barrel();\n    \n    // Moving parts\n    trigger();\n    magazine();\n    charging_handle();\n    \n    // Safety selector\n    translate([12, 8, 75]) rotate([90, 0, 0]) {\n        cylinder(h=5, r=3);\n        translate([0, 0, 5]) cube([2, 8, 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "toy": "slam",
    "openscad_code": "// Slam toy - realistic style, medium complexity\n// Overall dimensions: 120mm long x 80mm wide x 70mm high\n\n// Parameters\nseat_length = 100;\nseat_width = 70;\nseat_thickness = 4;\nback_height = 40;\nleg_height = 25;\nleg_width = 8;\nframe_thickness = 3;\n\n// Main frame\nmodule frame() {\n    // Seat frame\n    difference() {\n        cube([seat_length + 2*frame_thickness, seat_width + 2*frame_thickness, frame_thickness]);\n        translate([frame_thickness, frame_thickness, -0.1])\n            cube([seat_length, seat_width, frame_thickness + 0.2]);\n    }\n    \n    // Back frame\n    translate([-frame_thickness, -frame_thickness, 0])\n        cube([seat_length + 2*frame_thickness, frame_thickness, back_height + frame_thickness]);\n    \n    // Side frames\n    translate([-frame_thickness, 0, 0])\n        cube([frame_thickness, seat_width + 2*frame_thickness, back_height + frame_thickness]);\n    translate([seat_length, 0, 0])\n        cube([frame_thickness, seat_width + 2*frame_thickness, back_height + frame_thickness]);\n}\n\n// Seat slats\nmodule seat_slats() {\n    slat_width = 6;\n    gap = 4;\n    num_slats = floor(seat_width / (slat_width + gap));\n    offset = (seat_width - num_slats * (slat_width + gap) + gap) / 2;\n    \n    for(i = [0:num_slats-1]) {\n        translate([5, offset + i * (slat_width + gap), frame_thickness])\n            cube([seat_length - 10, slat_width, seat_thickness]);\n    }\n}\n\n// Back slats\nmodule back_slats() {\n    slat_width = 4;\n    gap = 3;\n    num_slats = floor(seat_length / (slat_width + gap));\n    offset = (seat_length - num_slats * (slat_width + gap) + gap) / 2;\n    \n    for(i = [0:num_slats-1]) {\n        translate([offset + i * (slat_width + gap), frame_thickness, frame_thickness + seat_thickness])\n            cube([slat_width, seat_width - 2*frame_thickness, back_height]);\n    }\n}\n\n// Legs with stretchers\nmodule legs() {\n    module leg(x, y) {\n        translate([x, y, -leg_height])\n            cube([leg_width, leg_width, leg_height]);\n    }\n    \n    // Four legs\n    leg(5, 5);\n    leg(seat_length - leg_width - 5, 5);\n    leg(5, seat_width - leg_width - 5);\n    leg(seat_length - leg_width - 5, seat_width - leg_width - 5);\n    \n    // Lower stretchers\n    translate([5 + leg_width/2, 5 + leg_width/2, -leg_height/2])\n        cube([seat_length - 10 - leg_width, 3, frame_thickness]);\n    translate([5 + leg_width/2, 5 + leg_width/2, -leg_height/2])\n        rotate([0, 0, 90])\n            cube([seat_width - 10 - leg_width, 3, frame_thickness]);\n}\n\n// Armrests\nmodule armrests() {\n    armrest_height = 20;\n    armrest_width = 6;\n    \n    // Left armrest\n    translate([-armrest_width, -frame_thickness, frame_thickness + seat_thickness])\n        cube([armrest_width, seat_width/3, armrest_height]);\n    \n    // Right armrest\n    translate([seat_length + frame_thickness, -frame_thickness, frame_thickness + seat_thickness])\n        cube([armrest_width, seat_width/3, armrest_height]);\n}\n\n// Assembly\nunion() {\n    frame();\n    seat_slats();\n    back_slats();\n    legs();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "swish",
    "openscad_code": "// Toy Swish Basketball Hoop (medium complexity, realistic style)\n// Overall size: 120mm tall base to rim\n\nmodule post() {\n    // Main support post - 8mm diameter, 80mm tall\n    difference() {\n        cylinder(h=80, d=8, $fn=20);\n        // Hollow core for material saving\n        translate([0,0,2])\n            cylinder(h=76, d=4, $fn=20);\n    }\n}\n\nmodule base() {\n    // Weighted base - 50mm diameter, 15mm thick\n    difference() {\n        cylinder(h=15, d=50, $fn=30);\n        // Recessed bottom for material saving\n        translate([0,0,2])\n            cylinder(h=13, d=46, $fn=30);\n    }\n}\n\nmodule backboard() {\n    // Main backboard - 40mm x 30mm x 3mm\n    difference() {\n        cube([40, 3, 30]);\n        // Backboard inner recess\n        translate([2, 0.5, 2])\n            cube([36, 2, 26]);\n    }\n    \n    // Backboard frame detail\n    translate([-1, 1.5, -1])\n        cube([42, 1, 32]);\n    translate([-1, 1.5, -1])\n        cube([40, 1, 1]);\n    translate([-1, 1.5, 30])\n        cube([40, 1, 1]);\n    translate([-1, 1.5, -1])\n        cube([1, 1, 32]);\n    translate([40, 1.5, -1])\n        cube([1, 1, 32]);\n}\n\nmodule rim() {\n    // Basketball rim - 25mm diameter, 3mm thick\n    difference() {\n        rotate([90,0,0])\n            cylinder(h=3, d=25, $fn=32);\n        // Inner hole - 20mm diameter\n        rotate([90,0,0])\n            translate([0,0,-0.5])\n                cylinder(h=4, d=20, $fn=32);\n    }\n    \n    // Rim support brackets\n    translate([-2.5, -12.5, 0])\n        cube([5, 5, 3]);\n    translate([-2.5, 12.5, 0])\n        cube([5, -5, 3]);\n}\n\nmodule net_hooks() {\n    // 12 small hooks for net attachment\n    for(i=[0:11]) {\n        rotate([0,0,i*30])\n            translate([12.5,0,0])\n                cube([1, 1, 2]);\n    }\n}\n\nmodule backboard_support() {\n    // Angled support between post and backboard\n    translate([0, 0, 70])\n        rotate([45,0,0])\n            cube([8, 2, 15]);\n}\n\n// Assembly\nunion() {\n    // Base at bottom\n    base();\n    \n    // Post on base\n    translate([0,0,15])\n        post();\n    \n    // Backboard support\n    backboard_support();\n    \n    // Backboard\n    translate([-20, 0, 82])\n        backboard();\n    \n    // Rim attached to backboard\n    translate([0, 2, 85])\n        rim();\n    \n    // Net hooks on rim\n    translate([0, 2, 85])\n        net_hooks();\n}",
    "renders": true
  },
  {
    "toy": "curve",
    "openscad_code": "// Toy Curve Sofa - Realistic Style\n// A miniature curved sofa with proper proportions and toy-like details\n// Overall size: ~100mm wide x 50mm deep x 45mm tall\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\nsofa_width = 100;\nsofa_depth = 50;\nsofa_height = 45;\nleg_height = 12;\ncushion_thickness = 8;\narmrest_height = 20;\nbackrest_height = 25;\n\n// Base frame structure\nmodule sofa_base() {\n    difference() {\n        // Main curved base\n        hull() {\n            translate([-sofa_width/2, -sofa_depth/2, 0])\n                cylinder(r=5, h=leg_height);\n            translate([sofa_width/2, -sofa_depth/2, 0])\n                cylinder(r=5, h=leg_height);\n            translate([-sofa_width/2, sofa_depth/2, 0])\n                cylinder(r=5, h=leg_height);\n            translate([sofa_width/2, sofa_depth/2, 0])\n                cylinder(r=5, h=leg_height);\n        }\n        \n        // Hollow out base for material saving\n        translate([0, 0, 2])\n            cube([sofa_width-10, sofa_depth-10, leg_height-4], center=true);\n    }\n}\n\n// Curved backrest\nmodule backrest() {\n    difference() {\n        // Main curved back\n        translate([0, -sofa_depth/2 + 3, leg_height + cushion_thickness + backrest_height/2])\n            scale([1, 0.8, 1])\n            rotate([90, 0, 0])\n            cylinder(h=sofa_width-10, r=backrest_height/2, center=true);\n        \n        // Carve inner curve\n        translate([0, -sofa_depth/2 + 2, leg_height + cushion_thickness + backrest_height/2])\n            scale([0.85, 0.6, 0.85])\n            rotate([90, 0, 0])\n            cylinder(h=sofa_width-15, r=backrest_height/2 - 2, center=true);\n    }\n}\n\n// Seat cushions\nmodule cushions() {\n    // Main seat cushion\n    translate([0, 5, leg_height + cushion_thickness/2])\n        scale([1, 1.2, 1])\n        difference() {\n            cube([sofa_width-10, sofa_depth-15, cushion_thickness], center=true);\n            translate([0, 0, cushion_thickness-2])\n                cube([sofa_width-12, sofa_depth-17, cushion_thickness], center=true);\n        }\n    \n    // Left cushion detail\n    for(i = [-1, 1]) {\n        translate([i * 30, 5, leg_height + cushion_thickness + 1])\n            difference() {\n                cube([25, sofa_depth-15, 2], center=true);\n                translate([0, 0, 1])\n                    cube([23, sofa_depth-17, 2], center=true);\n            }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([side * (sofa_width/2 - 5), 0, leg_height + armrest_height/2])\n            difference() {\n                // Main armrest\n                cube([8, sofa_depth-10, armrest_height], center=true);\n                \n                // Rounded top\n                translate([0, 0, armrest_height/2 - 2])\n                    cube([8, sofa_depth-10, 4], center=true);\n            }\n        \n        // Armrest cushion\n        translate([side * (sofa_width/2 - 5), 0, leg_height + armrest_height + 2])\n            cube([8, sofa_depth-12, 4], center=true);\n    }\n}\n\n// Support beams\nmodule supports() {\n    // Front support\n    translate([0, sofa_depth/2 - 5, leg_height/2])\n        cube([sofa_width-15, 3, leg_height], center=true);\n    \n    // Back support\n    translate([0, -sofa_depth/2 + 5, leg_height/2])\n        cube([sofa_width-15, 3, leg_height], center=true);\n}\n\n// Legs with toy-style joints\nmodule legs() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (sofa_width/2 - 8), y * (sofa_depth/2 - 8), leg_height/2])\n                difference() {\n                    // Main leg\n                    cylinder(r=4, h=leg_height);\n                    \n                    // Joint detail\n                    translate([0, 0, leg_height - 2])\n                        cylinder(r=3, h=2);\n                }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    sofa_base();\n    \n    // Support elements\n    supports();\n    \n    // Legs\n    legs();\n    \n    // Seating elements\n    cushions();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "spiral",
    "openscad_code": "// Spiral Toy - Medium Complexity\n// A 3D printable spiral toy with realistic proportions and structural elements\n\nmodule spiral_toy() {\n    // Main spiral body - hollow cylinder with appropriate wall thickness\n    difference() {\n        // Outer spiral\n        rotate_extrude(angle = 1080, $fn = 100) {\n            translate([25, 0, 0]) {\n                square([2, 30], center = true);\n            }\n        }\n        \n        // Inner hollow space\n        rotate_extrude(angle = 1080, $fn = 100) {\n            translate([23, 0, 0]) {\n                square([1.8, 28], center = true);\n            }\n        }\n    }\n    \n    // Base platform for stability\n    translate([0, 0, -5]) {\n        difference() {\n            cylinder(h = 5, r = 35, $fn = 60);\n            cylinder(h = 6, r = 33, $fn = 60);\n        }\n    }\n    \n    // Top handle for play interaction\n    translate([0, 0, 30]) {\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([20, 20, 8], center = true);\n                cube([16, 16, 9], center = true);\n            }\n        }\n    }\n    \n    // Decorative rings along spiral\n    for (i = [1:6]) {\n        rotate([0, 0, i * 180]) {\n            translate([25 * cos(i * 60), 25 * sin(i * 60), i * 5]) {\n                difference() {\n                    cylinder(h = 3, r = 4, $fn = 20);\n                    cylinder(h = 4, r = 2, $fn = 20);\n                }\n            }\n        }\n    }\n    \n    // Support struts for structural integrity\n    module support_strut(x, y, z, angle) {\n        translate([x, y, z]) {\n            rotate([0, 0, angle]) {\n                difference() {\n                    cube([20, 3, 3], center = true);\n                    cube([18, 2.5, 2.5], center = true);\n                }\n            }\n        }\n    }\n    \n    // Add 4 support struts\n    support_strut(0, 0, 15, 0);\n    support_strut(0, 0, 15, 90);\n    support_strut(0, 0, 15, 45);\n    support_strut(0, 0, 15, 135);\n    \n    // Ball bearings inside spiral track\n    for (i = [1:5]) {\n        rotate([0, 0, i * 216]) {\n            translate([25, 0, i * 6 + 2]) {\n                sphere(r = 2.5, $fn = 20);\n            }\n        }\n    }\n    \n    // Safety edges - rounded corners\n    module safety_edge(height) {\n        translate([0, 0, height]) {\n            difference() {\n                cylinder(h = 2, r = 27, $fn = 60);\n                cylinder(h = 3, r = 25, $fn = 60);\n            }\n        }\n    }\n    \n    safety_edge(0);\n    safety_edge(30);\n}\n\n// Render the complete toy\nspiral_toy();",
    "renders": true
  },
  {
    "toy": "lob",
    "openscad_code": "// Realistic Lob Toy - Medium Complexity\n// Overall dimensions: 120mm x 80mm x 70mm\n\nmodule lob_body() {\n    // Main body - ellipsoid shape\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(d=60, $fn=64);\n        \n        // Hollow interior for weight reduction\n        translate([0, 0, -5]) scale([1.1, 0.9, 0.7]) sphere(d=56, $fn=64);\n    }\n}\n\nmodule shell_segments() {\n    // Create realistic shell segments\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, 28, 2]) {\n                difference() {\n                    scale([0.3, 1, 0.5]) cylinder(h=15, d=30, $fn=8);\n                    translate([0, 0, -1]) scale([0.25, 0.9, 0.4]) cylinder(h=17, d=30, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule claws() {\n    // Front claws\n    module claw() {\n        union() {\n            // Base segment\n            translate([0, 0, 0]) cylinder(h=8, d1=12, d2=10, $fn=16);\n            // Middle segment\n            translate([0, 0, 8]) rotate([30, 0, 0]) cylinder(h=12, d1=10, d2=8, $fn=16);\n            // Tip segment\n            translate([0, 0, 20]) rotate([60, 0, 0]) cylinder(h=10, d1=8, d2=0, $fn=16);\n        }\n    }\n    \n    // Left claw\n    translate([-25, 35, 0]) rotate([0, 0, -20]) claw();\n    \n    // Right claw\n    translate([25, 35, 0]) mirror([1, 0, 0]) rotate([0, 0, -20]) claw();\n}\n\nmodule legs() {\n    // Create 8 legs underneath\n    module single_leg() {\n        union() {\n            // Upper leg segment\n            translate([0, 0, 0]) rotate([0, 30, 0]) cylinder(h=15, d1=8, d2=6, $fn=12);\n            // Lower leg segment\n            translate([0, 0, 15]) rotate([0, 60, 0]) cylinder(h=12, d1=6, d2=4, $fn=12);\n            // Foot\n            translate([0, 0, 27]) sphere(d=5, $fn=12);\n        }\n    }\n    \n    // Position 4 legs on each side\n    for (side = [-1, 1]) {\n        for (pos = [0:3]) {\n            translate([side * 20, -15 + pos * 10, -20]) {\n                rotate([0, 0, side * 15]) single_leg();\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    // Stalks with eyes\n    module eye_stalk() {\n        // Eyestalk\n        translate([0, 0, 0]) rotate([0, -30, 0]) cylinder(h=15, d=5, $fn=12);\n        // Eye\n        translate([0, 0, 15]) sphere(d=8, $fn=16);\n        // Pupil\n        translate([0, 0, 19]) color(\"black\") sphere(d=4, $fn=16);\n    }\n    \n    // Left eye\n    translate([-15, 25, 25]) eye_stalk();\n    \n    // Right eye\n    translate([15, 25, 25]) mirror([1, 0, 0]) eye_stalk();\n}\n\nmodule tail() {\n    // Lobster tail segments\n    difference() {\n        // Main tail\n        translate([0, -40, -10]) scale([0.8, 1.2, 0.6]) sphere(d=40, $fn=32);\n        \n        // Tail segments\n        for (i = [1:5]) {\n            rotate([0, 0, (i % 2) * 180]) {\n                translate([0, -40 - i * 3, -5 + i * 2]) {\n                    scale([0.7, 0.2, 0.4]) cube([35, 8, 20], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    lob_body();\n    \n    // Shell details\n    shell_segments();\n    \n    // Tail\n    tail();\n    \n    // Eyes on stalks\n    eyes();\n    \n    // Claws\n    claws();\n    \n    // Legs underneath\n    legs();\n}",
    "renders": true
  },
  {
    "toy": "smash",
    "openscad_code": "// Realistic Smash Toy Furniture - Wooden Toy Hammer\n// Medium complexity OpenSCAD model with proper toy proportions\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions (realistic toy hammer size)\nhammer_length = 120;\nhead_width = 35;\nhead_height = 25;\nhandle_length = 100;\nhandle_diameter = 12;\n\n// Toy-safe wall thickness\nwall = 2;\n\nmodule toy_smash_hammer() {\n    // Main hammer structure\n    union() {\n        // Hammer head - classic wooden toy mallet style\n        translate([0, 0, handle_length + head_height/2]) {\n            difference() {\n                // Main head block with rounded edges\n                minkowski() {\n                    cube([head_width, head_width, head_height], center=true);\n                    sphere(r=3);\n                }\n                \n                // Handle socket hole\n                cylinder(h=head_height+2, r=handle_diameter/2-wall, center=true);\n                \n                // Decorative face details - carved lines\n                for(i = [-1:1]) {\n                    translate([0, i*head_width/4, head_height/2-1]) {\n                        cube([head_width*0.9, 2, 2], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Handle with grip texture\n        translate([0, 0, handle_length/2]) {\n            difference() {\n                // Main handle cylinder\n                cylinder(h=handle_length, r=handle_diameter/2, center=true);\n                \n                // Grip rings - carved grooves\n                for(i = [1:3:handle_length-10]) {\n                    translate([0, 0, i-handle_length/2]) {\n                        cylinder(h=wall*1.5, r=handle_diameter/2-1, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Handle collar - transition piece\n        translate([0, 0, handle_length]) {\n            cylinder(h=8, r1=handle_diameter/2, r2=head_width/2.5, center=true);\n        }\n        \n        // Safety end cap on handle bottom\n        translate([0, 0, 2]) {\n            difference() {\n                sphere(r=handle_diameter/2+2);\n                cylinder(h=handle_diameter/2+3, r=handle_diameter/2-1, center=true);\n            }\n        }\n        \n        // Toy brand stamp on hammer face\n        translate([0, 0, handle_length + head_height/2 + head_height/2 + 1]) {\n            rotate([180, 0, 0]) {\n                linear_extrude(height=1) {\n                    text(\"TOY\", size=8, halign=\"center\", valign=\"center\");\n                }\n            }\n        }\n    }\n    \n    // Additional toy safety features\n    // Rounded corners on all edges\n    minkowski() {\n        children();\n        sphere(r=0.5);\n    }\n}\n\n// Generate the complete toy\ntoy_smash_hammer();",
    "renders": true
  },
  {
    "toy": "spike",
    "openscad_code": "// Realistic Spike Toy - Medium Complexity\n// A 100mm tall spiky toy with safety ball joints and base\n\n// Parameters\n$fn = 32;\nspike_height = 100;\nbase_diameter = 40;\nball_joint_diameter = 8;\nspike_count = 12;\nwall_thickness = 2;\n\n// Spike module\nmodule spike_tip(h = 30, r = 4) {\n    cylinder(h1 = h * 0.7, r1 = r, r2 = 0.5, center = false);\n}\n\n// Safety ball joint\nmodule ball_joint() {\n    // Main ball\n    sphere(d = ball_joint_diameter);\n    \n    // Safety ring\n    translate([0, 0, -ball_joint_diameter/2 - 1])\n        cylinder(h = 2, r1 = ball_joint_diameter/2 + 1, r2 = ball_joint_diameter/2 + 1);\n}\n\n// Individual spike assembly\nmodule spike_assembly(angle, height) {\n    translate([0, 0, spike_height/2])\n    rotate([angle, 0, 0])\n    translate([0, 0, height/2])\n    union() {\n        // Ball joint connector\n        ball_joint();\n        \n        // Spike shaft\n        translate([0, 0, ball_joint_diameter/2])\n            cylinder(h = height - ball_joint_diameter/2 - 5, d = 6);\n        \n        // Spike tip\n        translate([0, 0, height - 5])\n            spike_tip(h = 5, r = 3);\n    }\n}\n\n// Base with socket holes\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = 20, d = base_diameter);\n        \n        // Socket holes for spikes\n        for(i = [0:spike_count-1]) {\n            angle = 360 * i / spike_count;\n            rotate([0, 0, angle])\n            translate([base_diameter/3, 0, 10])\n            rotate([90, 0, 0])\n            cylinder(h = 15, d = ball_joint_diameter + 0.5);\n        }\n        \n        // Center hole for weight reduction\n        cylinder(h = 20, d = 15);\n    }\n    \n    // Bottom ring for stability\n    translate([0, 0, -2])\n        cylinder(h = 4, r1 = base_diameter/2 + 2, r2 = base_diameter/2);\n}\n\n// Toy safety features\nmodule safety_features() {\n    // Rounded edges on base\n    translate([0, 0, 20])\n    difference() {\n        cylinder(h = 5, r1 = base_diameter/2 + 1, r2 = base_diameter/2);\n        translate([0, 0, -1])\n            cylinder(h = 7, r = base_diameter/2 - 1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Safety features\n    safety_features();\n    \n    // Spike array\n    for(i = [0:spike_count-1]) {\n        angle = 360 * i / spike_count;\n        rotate([0, 0, angle])\n        translate([base_diameter/3, 0, 20])\n        spike_assembly(20, 60);\n    }\n    \n    // Central spike\n    translate([0, 0, 20])\n    spike_assembly(0, 80);\n}",
    "renders": true
  },
  {
    "toy": "serve",
    "openscad_code": "// Toy Serve Tray - OpenSCAD\n// Realistic style with medium complexity\n// Overall dimensions: 120mm x 80mm x 90mm\n\n// Parameters\ntray_length = 120;\ntray_width = 80;\ntray_height = 20;\nleg_height = 70;\nleg_diameter = 10;\nhandle_length = 30;\nhandle_diameter = 8;\nwall_thickness = 2;\nfillet_radius = 3;\n\n// Main tray body\nmodule tray_body() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([tray_length, tray_width, tray_height], center=true);\n            sphere(fillet_radius);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n            minkowski() {\n                cube([tray_length-2*wall_thickness, tray_width-2*wall_thickness, tray_height], center=true);\n                sphere(fillet_radius-1);\n            }\n    }\n}\n\n// Individual leg with toy-style joint\nmodule leg() {\n    // Upper joint/ball\n    translate([0, 0, leg_height/2 - 5])\n        sphere(d=leg_diameter + 4);\n    \n    // Main leg cylinder\n    cylinder(h=leg_height - 10, d=leg_diameter, center=true);\n    \n    // Foot base\n    translate([0, 0, -leg_height/2 + 5])\n        cylinder(h=10, d1=leg_diameter + 2, d2=leg_diameter + 6, center=true);\n}\n\n// Handle with grip texture\nmodule handle() {\n    union() {\n        // Main handle bar\n        rotate([90, 0, 0])\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip rings\n        for(i = [-1:1]) {\n            translate([0, 0, i * 10])\n                rotate([90, 0, 0])\n                    cylinder(h=5, d=handle_diameter + 2, center=true);\n        }\n    }\n}\n\n// Side handles\nmodule side_handles() {\n    translate([tray_length/2 - 5, 0, 0])\n        handle();\n    \n    translate([-tray_length/2 + 5, 0, 0])\n        mirror([1, 0, 0])\n            handle();\n}\n\n// Leg assembly\nmodule legs() {\n    // Position legs at corners\n    positions = [\n        [tray_length/2 - 15, tray_width/2 - 15, -tray_height/2 - leg_height/2],\n        [-tray_length/2 + 15, tray_width/2 - 15, -tray_height/2 - leg_height/2],\n        [tray_length/2 - 15, -tray_width/2 + 15, -tray_height/2 - leg_height/2],\n        [-tray_length/2 + 15, -tray_width/2 + 15, -tray_height/2 - leg_height/2]\n    ];\n    \n    for(pos = positions) {\n        translate(pos)\n            leg();\n    }\n}\n\n// Decorative rim detail\nmodule rim_detail() {\n    translate([0, 0, tray_height/2 - 1])\n        difference() {\n            cube([tray_length + 2, tray_width + 2, 2], center=true);\n            cube([tray_length - 2, tray_width - 2, 3], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    tray_body();\n    legs();\n    side_handles();\n    rim_detail();\n}",
    "renders": true
  },
  {
    "toy": "drive",
    "openscad_code": "// Toy Wooden Toy Dump Truck (medium complexity, realistic style)\n\n// Overall dimensions\ntruck_len = 120;\ntruck_wid = 70;\ntruck_hgt = 65;\n\n// Cab\nmodule cab() {\n    // Main cab body\n    translate([truck_len*0.6, 0, 0])\n    union() {\n        // Cab shell\n        difference() {\n            translate([0,0,truck_hgt*0.45]) \n            cube([truck_len*0.35, truck_wid*0.6, truck_hgt*0.5], center=true);\n            \n            // Cab windows\n            translate([truck_len*0.05, 0, truck_hgt*0.45])\n            cube([truck_len*0.15, truck_wid*0.55, truck_hgt*0.3], center=true);\n            \n            // Door lines\n            translate([0, truck_wid*0.27, truck_hgt*0.3])\n            cube([truck_len*0.3, 1, truck_hgt*0.4]);\n        }\n        \n        // Cab roof\n        translate([0,0,truck_hgt*0.75])\n        cube([truck_len*0.33, truck_wid*0.58, 3], center=true);\n        \n        // Headlights\n        translate([truck_len*0.175, truck_wid*0.22, truck_hgt*0.35])\n        sphere(d=8);\n        translate([truck_len*0.175, -truck_wid*0.22, truck_hgt*0.35])\n        sphere(d=8);\n    }\n}\n\n// Chassis frame\nmodule chassis() {\n    difference() {\n        // Main frame\n        cube([truck_len, truck_wid, 8], center=true);\n        \n        // Wheel wells\n        for(i=[-1,1]) {\n            translate([i*truck_len*0.3, 0, 0])\n            cube([truck_wid*0.25, truck_wid*0.9, 10], center=true);\n        }\n    }\n}\n\n// Wheels\nmodule wheel() {\n    difference() {\n        cylinder(h=12, d=20, center=true);\n        cylinder(h=13, d=6, center=true);\n    }\n}\n\n// Dump bed\nmodule dump_bed() {\n    translate([-truck_len*0.2, 0, 0])\n    difference() {\n        // Main bed\n        translate([0,0,truck_hgt*0.4])\n        cube([truck_len*0.6, truck_wid*0.85, truck_hgt*0.3], center=true);\n        \n        // Bed cavity\n        translate([0,0,truck_hgt*0.45])\n        cube([truck_len*0.55, truck_wid*0.75, truck_hgt*0.2], center=true);\n        \n        // Tailgate hinge detail\n        translate([truck_len*0.28, 0, truck_hgt*0.25])\n        cube([truck_len*0.02, truck_wid*0.8, 5]);\n    }\n}\n\n// Axle supports\nmodule axle_support() {\n    for(pos = [-truck_len*0.3, truck_len*0.3]) {\n        translate([pos, 0, -6])\n        cube([6, truck_wid*0.9, 12], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Chassis\n    translate([0,0,4])\n    chassis();\n    \n    // Cab assembly\n    cab();\n    \n    // Dump bed\n    dump_bed();\n    \n    // Wheels\n    for(pos = [-truck_len*0.3, truck_len*0.3]) {\n        for(side = [-1,1]) {\n            translate([pos, side*truck_wid*0.45, -4])\n            rotate([0,90,0])\n            wheel();\n        }\n    }\n    \n    // Axle supports\n    axle_support();\n    \n    // Front bumper\n    translate([truck_len*0.48, 0, 8])\n    cube([truck_len*0.05, truck_wid*0.5, 8], center=true);\n}",
    "renders": true
  },
  {
    "toy": "putt",
    "openscad_code": "// Realistic toy putt (small chair) - medium complexity\n// Overall dimensions: 60mm W x 55mm D x 75mm H\n\n// Parameters\n$fn = 32;\nleg_size = 6;\nseat_w = 50;\nseat_d = 45;\nseat_h = 35;\nback_h = 40;\nback_angle = 15;\nwall_t = 2;\n\n// Main module\nmodule toy_putt() {\n    // Seat base\n    difference() {\n        // Main seat\n        translate([0, 0, seat_h/2])\n            rounded_cube([seat_w, seat_d, seat_h*0.4], 5);\n        // Seat cavity\n        translate([0, 0, seat_h/2 + wall_t])\n            rounded_cube([seat_w-wall_t*2, seat_d-wall_t*2, seat_h*0.4], 3);\n    }\n    \n    // Backrest\n    translate([0, -seat_d/2 + 2, seat_h + back_h/2 - 5])\n        rotate([back_angle, 0, 0])\n            difference() {\n                rounded_cube([seat_w-10, 8, back_h], 4);\n                translate([0, 0, wall_t])\n                    rounded_cube([seat_w-10-wall_t*2, 8-wall_t, back_h-wall_t*2], 3);\n            }\n    \n    // Backrest supports\n    for(x = [-seat_w/2 + 10, seat_w/2 - 10])\n        translate([x, -seat_d/2 + 4, seat_h + 5])\n            rotate([back_angle, 0, 0])\n                cylinder(h = back_h, r = 3);\n    \n    // Legs\n    leg_positions = [\n        [-seat_w/2 + leg_size, -seat_d/2 + leg_size],\n        [seat_w/2 - leg_size, -seat_d/2 + leg_size],\n        [-seat_w/2 + leg_size, seat_d/2 - leg_size],\n        [seat_w/2 - leg_size, seat_d/2 - leg_size]\n    ];\n    \n    for(pos = leg_positions)\n        translate([pos[0], pos[1], seat_h/2 - 25])\n            cylinder(h = 25, r = leg_size/2);\n    \n    // Front stretcher\n    translate([0, seat_d/2 - leg_size - 2, seat_h/2 - 20])\n        rounded_cube([seat_w - leg_size*2, 4, 4], 2);\n    \n    // Side stretchers\n    translate([-seat_w/2 + leg_size + 2, 0, seat_h/2 - 12])\n        rounded_cube([4, seat_d - leg_size*2, 4], 2);\n    \n    // Back stretcher\n    translate([0, -seat_d/2 + leg_size + 2, seat_h/2 - 5])\n        rounded_cube([seat_w - leg_size*2, 4, 4], 2);\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, r) {\n    hull() {\n        for(dx = [-size[0]/2 + r, size[0]/2 - r])\n            for(dy = [-size[1]/2 + r, size[1]/2 - r])\n                for(dz = [-size[2]/2 + r, size[2]/2 - r])\n                    translate([dx, dy, dz])\n                        sphere(r);\n    }\n}\n\ntoy_putt();",
    "renders": true
  },
  {
    "toy": "chip",
    "openscad_code": "// Realistic toy chip furniture - medium complexity\n// A toy chip chair with proper proportions and structural details\n\n$fn = 32;\n\n// Overall dimensions\nchair_width = 60;\nchair_depth = 55;\nchair_height = 75;\nseat_height = 35;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Chip thickness\nchip_thickness = 8;\n\n// Main seat module - shaped like a chip\nmodule chip_seat() {\n    // Base chip shape\n    difference() {\n        // Main chip body with curved edges\n        hull() {\n            translate([0, 0, chip_thickness/2])\n                scale([1, 1.2, 0.3])\n                    sphere(d = chair_width);\n            translate([0, 0, chip_thickness/2])\n                scale([0.8, 1, 0.3])\n                    sphere(d = chair_depth * 0.8);\n        }\n        \n        // Carve out center for seating\n        translate([0, 0, chip_thickness/2 - wall])\n            scale([0.85, 0.85, 1])\n                cube([chair_width - wall*4, chair_depth - wall*4, chip_thickness], center = true);\n        \n        // Add chip curvature on top\n        translate([0, 0, chip_thickness - wall])\n            scale([0.9, 0.9, 0.5])\n                sphere(d = chair_width * 0.9);\n    }\n}\n\n// Backrest - curved chip shape\nmodule chip_backrest() {\n    translate([0, -chair_depth/2 + 5, seat_height + chip_thickness/2]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Main backrest chip\n                hull() {\n                    translate([0, 0, chip_thickness/2])\n                        scale([1, 1.5, 0.3])\n                            sphere(d = chair_width * 0.9);\n                    translate([0, 0, chip_thickness/2])\n                        scale([0.7, 1, 0.3])\n                            sphere(d = chair_height * 0.6);\n                }\n                \n                // Hollow for weight reduction\n                translate([0, 0, chip_thickness/2 - wall])\n                    scale([0.8, 0.8, 1])\n                        cube([chair_width * 0.7, chair_height * 0.5, chip_thickness], center = true);\n            }\n        }\n    }\n}\n\n// Chair legs - cylindrical with chip-inspired details\nmodule chair_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, seat_height/2]) {\n        difference() {\n            // Main leg cylinder\n            cylinder(h = seat_height - chip_thickness/2, d = 12, center = true);\n            \n            // Hollow for weight reduction\n            cylinder(h = seat_height - chip_thickness/2 + 1, d = 12 - wall*2, center = true);\n        }\n        \n        // Chip detail rings\n        for(i = [1:3]) {\n            translate([0, 0, -seat_height/2 + i * 8])\n                scale([1, 1, 0.3])\n                    cylinder(h = 2, d = 14);\n        }\n    }\n}\n\n// Armrest supports\nmodule armrest_support(side) {\n    translate([side * (chair_width/2 - 8), 0, seat_height + 15]) {\n        difference() {\n            cylinder(h = 25, d = 10);\n            cylinder(h = 26, d = 6);\n        }\n    }\n}\n\n// Armrest - chip-shaped\nmodule armrest(side) {\n    translate([side * (chair_width/2 + 5), 0, seat_height + 25 + chip_thickness/2]) {\n        difference() {\n            // Main armrest chip\n            scale([0.5, 1.2, 0.5])\n                sphere(d = 25);\n            \n            // Hollow underside\n            translate([0, 0, -chip_thickness/4])\n                scale([0.7, 0.9, 0.3])\n                    sphere(d = 20);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    chip_seat();\n    \n    // Backrest\n    chip_backrest();\n    \n    // Legs - positioned at corners with proper spacing\n    chair_leg(chair_width/2 - 15, chair_depth/2 - 15);\n    chair_leg(-chair_width/2 + 15, chair_depth/2 - 15);\n    chair_leg(chair_width/2 - 15, -chair_depth/2 + 15);\n    chair_leg(-chair_width/2 + 15, -chair_depth/2 + 15);\n    \n    // Armrests and supports\n    armrest_support(1);\n    armrest_support(-1);\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "toy": "spin",
    "openscad_code": "// Spinning Top Toy - 3D Printable Design\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main parameters\nbody_height = 40;\nbody_radius = 25;\ntip_height = 15;\nhandle_height = 20;\nhandle_radius = 8;\n\nmodule spinning_top() {\n    // Central axis\n    rotate([0, 0, $t * 360]) {\n        union() {\n            // Main body - spinning disk\n            difference() {\n                cylinder(h=body_height, r=body_radius, center=true);\n                \n                // Decorative grooves\n                for(i = [0:5]) {\n                    rotate([0, 0, i * 60]) {\n                        translate([0, body_radius - 4, 0])\n                            cube([2, 8, body_height + 1], center=true);\n                    }\n                }\n                \n                // Center hole for handle\n                cylinder(h=body_height + 2, r=handle_radius + 1, center=true);\n            }\n            \n            // Tip - conical point\n            translate([0, 0, -body_height/2 - tip_height/2]) {\n                cylinder(h1=tip_height, h2=0, r1=body_radius/3, r2=0);\n            }\n            \n            // Handle grip\n            translate([0, 0, body_height/2 + handle_height/2]) {\n                difference() {\n                    cylinder(h=handle_height, r=handle_radius, center=true);\n                    \n                    // Grip rings\n                    for(i = [0:3]) {\n                        translate([0, 0, -handle_height/2 + i * 5 + 2.5])\n                            rotate_extrude()\n                                translate([handle_radius - 1, 0, 0])\n                                    circle(r=1);\n                    }\n                }\n                \n                // Handle top cap\n                translate([0, 0, handle_height/2]) {\n                    sphere(r=handle_radius + 2);\n                    cylinder(h=3, r=handle_radius + 2);\n                }\n            }\n            \n            // Decorative rings on body\n            for(i = [0:2]) {\n                translate([0, 0, -body_height/2 + 10 + i * 10]) {\n                    rotate_extrude()\n                        translate([body_radius - 1.5, 0, 0])\n                            circle(r=1.5);\n                }\n            }\n            \n            // Stability weights around perimeter\n            for(i = [0:8]) {\n                rotate([0, 0, i * 45]) {\n                    translate([body_radius - 4, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=6, r=2, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Base stand for display\nmodule display_stand() {\n    translate([0, 0, -body_height/2 - tip_height - 5]) {\n        difference() {\n            cylinder(h=5, r=body_radius + 10);\n            cylinder(h=6, r=body_radius/3 + 2);\n        }\n        \n        // Support ribs\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([body_radius/2, 0, 2.5])\n                    cube([body_radius, 4, 5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    spinning_top();\n    \n    // Uncomment for display stand\n    // display_stand();\n}\n\n// Print orientation helper\n%translate([0, 0, -body_height/2 - tip_height - 10]) {\n    color(\"lightblue\", 0.2) {\n        cylinder(h=100, r=body_radius + 15);\n    }\n}",
    "renders": true
  },
  {
    "toy": "roll",
    "openscad_code": "// Toy Roll – realistic style, medium complexity, 3D-printable\n// overall footprint ~100 mm length, 45 mm diameter\n// 2 mm wall thickness everywhere\n\n$fn = 36;               // smooth curves\n\nmodule wheel(r=22, h=15) {\n    // outer tire\n    difference() {\n        cylinder(r=r, h=h, center=true);\n        cylinder(r=r-2, h=h+0.2, center=true);\n    }\n\n    // spokes\n    for(a=[0:60:359])\n        rotate([0,0,a])\n            translate([r/2,0,0])\n                cube([r/2, 4, h-1], center=true);\n\n    // central hub\n    cylinder(r=6, h=h+0.2, center=true);\n}\n\nmodule axle(len=100) {\n    // main shaft\n    difference() {\n        cylinder(r=5, h=len, center=true);\n        // hollow core for string axle\n        cylinder(r=3, h=len+0.2, center=true);\n    }\n}\n\nmodule pull_string() {\n    translate([55,0,0])\n        rotate([90,0,0])\n            cylinder(r=2, h=30);\n}\n\nmodule frame_supports() {\n    // left bracket\n    translate([-40,0,0])\n        difference() {\n            cube([10, 15, 20], center=true);\n            translate([0,0,8])\n                cylinder(r=5.5, h=12, center=true);\n        }\n    // right bracket\n    translate([40,0,0])\n        difference() {\n            cube([10, 15, 20], center=true);\n            translate([0,0,8])\n                cylinder(r=5.5, h=12, center=true);\n        }\n}\n\nmodule body_shell() {\n    // decorative outer shell\n    hull() {\n        translate([-45,0,0]) sphere(r=20);\n        translate([45,0,0]) sphere(r=20);\n    }\n}\n\n// assembly\nunion() {\n    color(\"brown\") axle(100);\n    color(\"brown\") frame_supports();\n\n    // wheels\n    color(\"black\") translate([-40,0,0]) rotate([90,0,0]) wheel();\n    color(\"black\") translate([40,0,0])  rotate([90,0,0]) wheel();\n\n    color(\"red\") body_shell();\n    color(\"yellow\") pull_string();\n}",
    "renders": true
  },
  {
    "toy": "bounce",
    "openscad_code": "// Bounce Toy - Classic Springy Ride-On Horse\n// Overall size: 120mm long x 60mm wide x 80mm tall\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nseat_height = 45;\nbody_length = 90;\nbody_width = 35;\nhead_length = 30;\n\n// Main body - horse torso\nmodule body() {\n    // Main torso\n    translate([0, 0, 20])\n    scale([1, 0.7, 0.8])\n    sphere(d=body_width);\n    \n    // Front chest\n    translate([-body_length/2 - 10, 0, 15])\n    scale([1.2, 0.8, 0.6])\n    sphere(d=body_width * 0.8);\n    \n    // Rear\n    translate([body_length/2, 0, 15])\n    scale([0.8, 0.8, 0.6])\n    sphere(d=body_width * 0.7);\n}\n\n// Horse head with neck\nmodule head() {\n    // Neck\n    translate([-body_length/2 - 15, 0, 35])\n    rotate([0, 0, -20])\n    cylinder(h=25, d1=20, d2=15);\n    \n    // Head\n    translate([-body_length/2 - 35, 0, 45])\n    scale([1.2, 0.8, 1])\n    sphere(d=25);\n    \n    // Ears\n    translate([-body_length/2 - 45, 8, 52])\n    rotate([30, 0, 0])\n    cylinder(h=15, d1=6, d2=4);\n    \n    translate([-body_length/2 - 45, -8, 52])\n    rotate([30, 0, 0])\n    cylinder(h=15, d1=6, d2=4);\n}\n\n// Seat/saddle area\nmodule saddle() {\n    // Main seat\n    translate([0, 0, seat_height])\n    difference() {\n        cube([body_length - 20, body_width, 8], center=true);\n        // Hollow seat\n        translate([0, 0, -1])\n        cube([body_length - 24, body_width - 4, 10], center=true);\n    }\n    \n    // Seat front lip\n    translate([-body_length/2 + 10, 0, seat_height - 2])\n    cube([20, body_width - 4, 12], center=true);\n}\n\n// Legs - simplified spring support structure\nmodule legs() {\n    // Front legs - spring mounts\n    translate([-body_length/2 + 20, body_width/2 - 5, 10])\n    cylinder(h=15, d=8);\n    translate([-body_length/2 + 20, -body_width/2 + 5, 10])\n    cylinder(h=15, d=8);\n    \n    // Rear legs - spring mounts\n    translate([body_length/2 - 20, body_width/2 - 5, 10])\n    cylinder(h=15, d=8);\n    translate([body_length/2 - 20, -body_width/2 + 5, 10])\n    cylinder(h=15, d=8);\n    \n    // Spring coils (simplified as stacked cylinders)\n    for(i=[0:1:3]) {\n        translate([-body_length/2 + 20, body_width/2 - 5, 10 - i*4])\n        cylinder(h=3, d=12 - i);\n        translate([-body_length/2 + 20, -body_width/2 + 5, 10 - i*4])\n        cylinder(h=3, d=12 - i);\n        translate([body_length/2 - 20, body_width/2 - 5, 10 - i*4])\n        cylinder(h=3, d=12 - i);\n        translate([body_length/2 - 20, -body_width/2 + 5, 10 - i*4])\n        cylinder(h=3, d=12 - i);\n    }\n    \n    // Base plates\n    translate([-body_length/2 + 20, 0, -5])\n    cube([30, body_width + 20, 3], center=true);\n    translate([body_length/2 - 20, 0, -5])\n    cube([30, body_width + 20, 3], center=true);\n}\n\n// Mane - series of small cylinders\nmodule mane() {\n    for(i=[0:1:8]) {\n        rotate([0, 0, -20])\n        translate([-body_length/2 - 30 + i*5, 12, 45 - i*2])\n        cylinder(h=12, d=4);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([body_length/2 + 5, 0, 35])\n    rotate([0, 0, 45])\n    cylinder(h=20, d1=8, d2=5);\n}\n\n// Handles for child to hold\nmodule handles() {\n    // Left handle\n    translate([-body_length/2 - 10, body_width/2 + 5, 50])\n    rotate([0, 90, 0])\n    cylinder(h=15, d=6);\n    \n    // Right handle\n    translate([-body_length/2 - 10, -body_width/2 - 5, 50])\n    rotate([0, 90, 0])\n    cylinder(h=15, d=6);\n    \n    // Handle bar\n    translate([-body_length/2 - 10, 0, 50])\n    cube([body_width + 10, 3, 3], center=true);\n}\n\n// Assemble the complete toy\nunion() {\n    body();\n    head();\n    saddle();\n    legs();\n    mane();\n    tail();\n    handles();\n}",
    "renders": true
  },
  {
    "toy": "glide",
    "openscad_code": "// Toy Glider Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm wide x 100mm deep x 90mm high\n// Wall thickness: 2mm throughout\n\n// Main seat frame\nmodule seat_frame() {\n    // Base frame\n    difference() {\n        cube([100, 80, 4], center=true);\n        translate([0, 0, 2])\n            cube([96, 76, 4], center=true);\n    }\n    \n    // Front support beam\n    translate([0, 35, -20])\n        cube([100, 4, 40], center=true);\n    \n    // Rear support beam\n    translate([0, -35, -20])\n        cube([100, 4, 40], center=true);\n}\n\n// Gliding mechanism\nmodule gliders() {\n    // Left glider base\n    translate([-45, 0, -40]) {\n        difference() {\n            cube([10, 80, 8], center=true);\n            translate([0, 0, 4])\n                cube([6, 76, 8], center=true);\n        }\n        \n        // Rocking curve\n        translate([0, 0, -6])\n            difference() {\n                cylinder(h=10, r1=5, r2=5, center=true);\n                translate([0, 0, 2])\n                    cylinder(h=10, r1=3, r2=3, center=true);\n            }\n    }\n    \n    // Right glider base\n    translate([45, 0, -40])\n        mirror([1, 0, 0])\n            children();\n}\n\n// Seat cushion\nmodule cushion() {\n    // Main cushion\n    translate([0, 0, 6]) {\n        difference() {\n            cube([90, 70, 12], center=true);\n            translate([0, 0, 6])\n                cube([86, 66, 12], center=true);\n        }\n        \n        // Rounded edges\n        for(x = [-42, 42])\n        for(y = [-32, 32])\n            translate([x, y, 6])\n                cylinder(h=12, r=2, center=true);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    // Frame\n    translate([0, -35, 50]) {\n        difference() {\n            cube([90, 4, 80], center=true);\n            translate([0, 0, 40])\n                cube([86, 4, 76], center=true);\n        }\n        \n        // Slats\n        for(i = [-30:15:30])\n            translate([i, 0, 30])\n                cube([8, 4, 60], center=true);\n        \n        // Top rail\n        translate([0, 0, 70])\n            cube([90, 4, 8], center=true);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-50, 15, 30]) {\n        // Support post\n        difference() {\n            cube([4, 4, 60], center=true);\n            translate([0, 0, 30])\n                cube([2, 2, 60], center=true);\n        }\n        \n        // Arm pad\n        translate([0, 15, 30])\n            cube([4, 30, 4], center=true);\n    }\n    \n    // Right armrest\n    translate([50, 15, 30])\n        mirror([1, 0, 0])\n            children();\n}\n\n// Assembly\nunion() {\n    seat_frame();\n    gliders();\n    cushion();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "soar",
    "openscad_code": "// Toy Wooden Rocking Horse\n// Overall size: ~120mm long × 70mm wide × 100mm high\n\n$fn = 36;\n\nmodule horse_head() {\n    // Head block\n    translate([0, 0, 30]) cube([30, 25, 35], center=true);\n    \n    // Snout\n    translate([18, 0, 25]) cube([18, 20, 20], center=true);\n    \n    // Ears\n    translate([-10, 12, 45]) rotate([0, -15, 0]) cylinder(h=15, d1=6, d2=3);\n    translate([-10, -12, 45]) rotate([0, 15, 0]) cylinder(h=15, d1=6, d2=3);\n}\n\nmodule horse_body() {\n    // Main body\n    translate([0, 0, 15]) cube([45, 35, 30], center=true);\n    \n    // Tail\n    translate([-25, 0, 10]) cylinder(h=20, d=6);\n}\n\nmodule horse_legs() {\n    // Front legs\n    translate([15, 12, 0]) cylinder(h=30, d=8);\n    translate([15, -12, 0]) cylinder(h=30, d=8);\n    \n    // Rear legs\n    translate([-15, 12, 0]) cylinder(h=30, d=8);\n    translate([-15, -12, 0]) cylinder(h=30, d=8);\n}\n\nmodule rocker_base() {\n    // Curved rockers\n    difference() {\n        // Main rocker arcs\n        union() {\n            translate([25, 0, -25]) rotate([0, 90, 0]) cylinder(h=70, d=10);\n            translate([-25, 0, -25]) rotate([0, 90, 0]) cylinder(h=70, d=10);\n        }\n        \n        // Cutouts for weight reduction\n        for(x = [-20, 0, 20]) {\n            translate([x, 0, -25]) rotate([0, 90, 0]) cylinder(h=70, d=6);\n        }\n    }\n    \n    // Support beams between rockers\n    translate([0, 30, -25]) cube([50, 4, 8], center=true);\n    translate([0, -30, -25]) cube([50, 4, 8], center=true);\n}\n\nmodule saddle() {\n    // Seat cushion\n    translate([0, 0, 35]) difference() {\n        cube([20, 30, 8], center=true);\n        // Slight curvature\n        translate([0, 0, 39]) sphere(d=30);\n    }\n    \n    // Front pommel\n    translate([10, 0, 39]) cube([6, 20, 12], center=true);\n}\n\nmodule bridle() {\n    // Bridle straps\n    color(\"brown\") {\n        // Head strap\n        translate([5, 0, 45]) cube([20, 2, 2], center=true);\n        \n        // Bit rings\n        translate([18, 0, 30]) cylinder(h=2, d=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    rocker_base();\n    \n    // Main horse body\n    translate([0, 0, 35]) union() {\n        horse_body();\n        translate([22, 0, 0]) horse_head();\n        horse_legs();\n    }\n    \n    // Accessories\n    saddle();\n    translate([0, 0, 35]) bridle();\n}\n\n// Handles for child grip\ntranslate([0, 32, 55]) rotate([0, 0, 90]) cylinder(h=50, d=10);\ntranslate([0, -32, 55]) rotate([0, 0, 90]) cylinder(h=50, d=10);",
    "renders": true
  },
  {
    "toy": "zoom",
    "openscad_code": "// Zoom toy furniture - Realistic style medium complexity\n// A child's toy zoom chair with structural frame, seat, backrest and realistic proportions\n\n// Overall dimensions\nchair_width = 60;\nchair_depth = 50;\nchair_height = 75;\nseat_height = 35;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main chair module\nmodule zoom_chair() {\n    // Chair frame structure\n    union() {\n        // Front legs\n        for(x = [-chair_width/2 + 5, chair_width/2 - 5]) {\n            translate([x, 0, 0])\n                leg();\n        }\n        \n        // Back legs\n        for(x = [-chair_width/2 + 5, chair_width/2 - 5]) {\n            translate([x, chair_depth - 8, 0])\n                leg();\n        }\n        \n        // Seat platform\n        translate([0, chair_depth/2, seat_height])\n            seat();\n        \n        // Backrest frame\n        translate([0, chair_depth - 8, seat_height + 20])\n            backrest();\n            \n        // Support bars\n        translate([0, chair_depth/4, seat_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=chair_width - 10, r=2, $fn=16);\n                \n        translate([0, 3*chair_depth/4, seat_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=chair_width - 10, r=2, $fn=16);\n    }\n}\n\n// Leg module\nmodule leg() {\n    difference() {\n        // Main leg post\n        cylinder(h=seat_height, r=4, $fn=16);\n        \n        // Hollow center\n        translate([0, 0, wall])\n            cylinder(h=seat_height - wall, r=4 - wall, $fn=16);\n    }\n}\n\n// Seat module\nmodule seat() {\n    difference() {\n        // Seat base\n        cube([chair_width - 10, chair_depth - 16, 6], center=true);\n        \n        // Hollow underside\n        translate([0, 0, -3 + wall])\n            cube([chair_width - 10 - 2*wall, chair_depth - 16 - 2*wall, wall], center=true);\n            \n        // Top cushion contour\n        translate([0, 0, 3])\n            cube([chair_width - 12, chair_depth - 18, 4], center=true);\n    }\n    \n    // Cushion details\n    for(y = [-chair_depth/4, 0, chair_depth/4]) {\n        translate([0, y, 5])\n            cube([chair_width - 14, 2, 1], center=true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    difference() {\n        // Backrest frame\n        union() {\n            // Side posts\n            for(x = [-chair_width/2 + 7, chair_width/2 - 7]) {\n                translate([x, 0, 0])\n                    cylinder(h=30, r=3, $fn=16);\n            }\n            \n            // Top rail\n            translate([0, 0, 28])\n                cube([chair_width - 12, 4, 6], center=true);\n                \n            // Bottom rail\n            translate([0, 0, 0])\n                cube([chair_width - 12, 4, 6], center=true);\n                \n            // Vertical slats\n            for(x = [-chair_width/3, 0, chair_width/3]) {\n                translate([x, 0, 14])\n                    cube([4, 2, 20], center=true);\n            }\n        }\n        \n        // Hollow areas\n        translate([0, 0, 14])\n            cube([chair_width - 16, 2, 20], center=true);\n            \n        // Side post hollows\n        for(x = [-chair_width/2 + 7, chair_width/2 - 7]) {\n            translate([x, 0, wall])\n                cylinder(h=30 - 2*wall, r=3 - wall, $fn=16);\n        }\n    }\n}\n\n// Assembly\nzoom_chair();",
    "renders": true
  },
  {
    "toy": "dash",
    "openscad_code": "// Toy Dash: A miniature dashboard for a toy car\n// Overall dimensions: 120 x 60 x 50 mm (L x W x H)\n\nmodule main_dash() {\n    // Main dashboard body\n    difference() {\n        // Main panel\n        cube([100, 50, 20], center=true);\n        \n        // Gauge holes - 3 large gauges\n        for(i=[-35, 0, 35]) {\n            translate([i, -5, 10])\n                cylinder(h=21, r=12, center=true);\n        }\n        \n        // Small indicator lights row\n        for(i=[-45:15:45]) {\n            translate([i, 15, 10])\n                cylinder(h=21, r=3, center=true);\n        }\n    }\n}\n\nmodule steering_column() {\n    // Steering column support\n    translate([-50, 0, -15])\n        rotate([0, 10, 0])\n        difference() {\n            cylinder(h=40, r=5, center=true);\n            translate([0, 0, 20])\n                cube([10, 10, 5], center=true);\n        }\n}\n\nmodule steering_wheel() {\n    // Steering wheel\n    translate([-50, 0, 15])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=8, r=15, center=true);\n            cylinder(h=9, r=10, center=true);\n        }\n}\n\nmodule air_vent(x_pos) {\n    // Air vent with horizontal slats\n    translate([x_pos, 20, 0])\n        difference() {\n            cube([25, 8, 15], center=true);\n            // Horizontal slats\n            for(y=[-5:2.5:5]) {\n                translate([0, y, 0])\n                    cube([23, 1, 13], center=true);\n            }\n        }\n}\n\nmodule gear_shifter() {\n    // Gear shifter base\n    translate([40, 20, -20])\n        union() {\n            // Base\n            cube([15, 15, 8], center=true);\n            // Shifter stick\n            translate([0, 0, 8])\n                cylinder(h=25, r=3, center=false);\n            // Shifter knob\n            translate([0, 0, 30])\n                sphere(d=10);\n        }\n}\n\nmodule foot_pedals() {\n    // Gas pedal\n    translate([45, -15, -20])\n        rotate([30, 0, 0])\n        cube([5, 20, 3], center=true);\n    \n    // Brake pedal\n    translate([45, 0, -20])\n        rotate([30, 0, 0])\n        cube([5, 20, 3], center=true);\n    \n    // Clutch pedal\n    translate([45, 15, -20])\n        rotate([30, 0, 0])\n        cube([5, 20, 3], center=true);\n}\n\nmodule radio_unit() {\n    // Center console with radio\n    translate([0, 25, 0])\n        difference() {\n            cube([40, 10, 15], center=true);\n            // Speaker grill holes\n            for(x=[-15:3:15]) {\n                for(z=[-5:3:5]) {\n                    translate([x, 5, z])\n                        cylinder(h=11, r=1, center=true);\n                }\n            }\n        }\n}\n\nmodule support_brackets() {\n    // Left bracket\n    translate([-45, 0, -20])\n        union() {\n            cube([10, 50, 5], center=true);\n            cube([5, 50, 10], center=true);\n        }\n    \n    // Right bracket\n    translate([45, 0, -20])\n        union() {\n            cube([10, 50, 5], center=true);\n            cube([5, 50, 10], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    main_dash();\n    steering_column();\n    steering_wheel();\n    air_vent(-30);\n    air_vent(30);\n    gear_shifter();\n    foot_pedals();\n    radio_unit();\n    support_brackets();\n}",
    "renders": true
  },
  {
    "toy": "rush",
    "openscad_code": "// Rush toy - realistic style, medium complexity\n// Dimensions: 100mm length x 60mm width x 45mm height\n\n// Parameters\nleg_height = 20;\nseat_thickness = 4;\nbackrest_height = 25;\nbackrest_angle = 10;\nframe_thickness = 2.5;\ncushion_thickness = 3;\n\n// Main assembly\nmodule rush_toy() {\n    // Seat frame\n    union() {\n        // Seat base\n        translate([0, 0, leg_height])\n            cube([90, 50, seat_thickness], center=true);\n        \n        // Front frame beam\n        translate([0, 25, leg_height + seat_thickness/2])\n            cube([90, frame_thickness, seat_thickness + frame_thickness], center=true);\n        \n        // Back frame beam\n        translate([0, -25, leg_height + seat_thickness/2])\n            cube([90, frame_thickness, seat_thickness + frame_thickness], center=true);\n        \n        // Side frame beams\n        translate([45, 0, leg_height + seat_thickness/2])\n            cube([frame_thickness, 50, seat_thickness + frame_thickness], center=true);\n        translate([-45, 0, leg_height + seat_thickness/2])\n            cube([frame_thickness, 50, seat_thickness + frame_thickness], center=true);\n    }\n    \n    // Legs\n    for(x = [-35, 35])\n        for(y = [-20, 20])\n            translate([x, y, leg_height/2])\n                cylinder(h=leg_height, d1=4, d2=3, $fn=8);\n    \n    // Backrest frame\n    rotate([backrest_angle, 0, 0])\n        translate([0, -20, leg_height + seat_thickness + backrest_height/2])\n            cube([80, frame_thickness, backrest_height], center=true);\n    \n    // Backrest slats\n    for(i = [-30, -10, 10, 30])\n        rotate([backrest_angle, 0, 0])\n            translate([i, -20, leg_height + seat_thickness + backrest_height/2])\n                cube([8, frame_thickness, backrest_height * 0.8], center=true);\n    \n    // Cushion\n    translate([0, 0, leg_height + seat_thickness + cushion_thickness/2])\n        cube([85, 45, cushion_thickness], center=true);\n    \n    // Armrests\n    for(side = [-1, 1])\n        translate([side * 45, 0, leg_height + seat_thickness + 8])\n            rotate([0, side * 15, 0])\n                cube([frame_thickness, 40, 12], center=true);\n    \n    // Support stretchers\n    // Front stretcher\n    translate([0, 20, leg_height/2])\n        cube([70, frame_thickness, frame_thickness], center=true);\n    \n    // Side stretchers\n    for(side = [-1, 1])\n        translate([side * 35, 0, leg_height/2])\n            rotate([0, 0, 90])\n                cube([40, frame_thickness, frame_thickness], center=true);\n    \n    // Decorative details - rivets\n    for(x = [-40, -20, 0, 20, 40])\n        for(y = [-22.5, 22.5])\n            translate([x, y, leg_height + seat_thickness + cushion_thickness + 0.5])\n                cylinder(h=1, d=2, $fn=16);\n}\n\n// Render the toy\nrush_toy();",
    "renders": true
  },
  {
    "toy": "sprint",
    "openscad_code": "// Toy Sprint Chair - Realistic Style\n// Overall dimensions: 60mm W x 55mm D x 85mm H\n\n// Parameters\nseat_height = 45;\nseat_width = 50;\nseat_depth = 50;\nback_height = 40;\nleg_height = 40;\nleg_thickness = 8;\narmrest_height = 20;\narmrest_width = 8;\nback_slats = 5;\nslat_width = 3;\nslat_spacing = 2;\n\n// Main seat platform\nmodule seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n            cube([seat_width, seat_depth, 10], center=true);\n        \n        // Cushion contour\n        translate([0, 0, seat_height + 2])\n            cube([seat_width - 10, seat_depth - 10, 6], center=true);\n    }\n    \n    // Cushion top detail\n    translate([0, 0, seat_height + 5])\n        cube([seat_width - 8, seat_depth - 8, 2], center=true);\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Back frame\n    difference() {\n        // Main back panel\n        translate([0, -seat_depth/2 + 5, seat_height + back_height/2])\n            cube([seat_width - 10, 6, back_height], center=true);\n        \n        // Cutout for slats area\n        translate([0, -seat_depth/2 + 2, seat_height + back_height/2])\n            cube([seat_width - 20, 12, back_height - 10], center=true);\n    }\n    \n    // Vertical slats\n    for (i = [0:back_slats-1]) {\n        translate([\n            -seat_width/2 + 15 + i * (slat_width + slat_spacing),\n            -seat_depth/2 + 5,\n            seat_height + back_height/2\n        ])\n        cube([slat_width, 6, back_height - 10], center=false);\n    }\n    \n    // Top back rail\n    translate([0, -seat_depth/2 + 5, seat_height + back_height - 2])\n        cube([seat_width - 8, 6, 4], center=true);\n}\n\n// Chair legs with stretchers\nmodule legs() {\n    // Four legs\n    leg_positions = [\n        [-seat_width/2 + leg_thickness/2, -seat_depth/2 + leg_thickness/2],\n        [seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2],\n        [-seat_width/2 + leg_thickness/2, seat_depth/2 - leg_thickness/2],\n        [seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2]\n    ];\n    \n    // Legs\n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], leg_height/2])\n            difference() {\n                cube([leg_thickness, leg_thickness, leg_height], center=true);\n                \n                // Taper bottom slightly\n                translate([0, 0, -leg_height/2 + 2])\n                    cube([leg_thickness + 2, leg_thickness + 2, 4], center=true);\n            }\n    }\n    \n    // Side stretchers\n    translate([0, -seat_depth/2 + leg_thickness/2, leg_height/2 - 5])\n        cube([seat_width - leg_thickness, leg_thickness, leg_thickness], center=true);\n    \n    translate([0, seat_depth/2 - leg_thickness/2, leg_height/2 - 5])\n        cube([seat_width - leg_thickness, leg_thickness, leg_thickness], center=true);\n    \n    // Back stretcher\n    translate([-seat_width/2 + leg_thickness/2, 0, leg_height/2 - 5])\n        cube([leg_thickness, seat_depth - leg_thickness, leg_thickness], center=true);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - armrest_width/2, 0, seat_height + armrest_height/2])\n        difference() {\n            cube([armrest_width, seat_depth - 10, armrest_height], center=true);\n            \n            // Armrest top curve\n            translate([0, 0, armrest_height/2])\n                cube([armrest_width + 2, seat_depth - 10, 2], center=true);\n        }\n    \n    // Right armrest\n    translate([seat_width/2 + armrest_width/2, 0, seat_height + armrest_height/2])\n        difference() {\n            cube([armrest_width, seat_depth - 10, armrest_height], center=true);\n            \n            // Armrest top curve\n            translate([0, 0, armrest_height/2])\n                cube([armrest_width + 2, seat_depth - 10, 2], center=true);\n        }\n    \n    // Armrest supports\n    translate([-seat_width/2 - armrest_width/2, -seat_depth/2 + 10, seat_height/2 + 5])\n        cube([armrest_width, 6, seat_height], center=true);\n    \n    translate([seat_width/2 + armrest_width/2, -seat_depth/2 + 10, seat_height/2 + 5])\n        cube([armrest_width, 6, seat_height], center=true);\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    legs();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "leap",
    "openscad_code": "// Leap toy - a classic wooden rocking horse\n// Overall dimensions: 120mm long x 80mm high x 40mm wide\n\n// Base thickness\nbase_thickness = 8;\n\n// Rockers\nmodule rockers() {\n    difference() {\n        // Left rocker\n        translate([-10, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=100, r1=40, r2=40, $fn=50);\n            }\n            \n            // Rocker bottom curve\n            translate([0, 0, -2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=96, r1=38, r2=38, $fn=50);\n                }\n            }\n            \n            // Cut center for hollow\n            translate([0, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=100, r1=35, r2=35, $fn=50);\n                }\n            }\n        }\n        \n        // Right rocker\n        translate([10, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=100, r1=40, r2=40, $fn=50);\n            }\n            \n            // Rocker bottom curve\n            translate([0, 0, -2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=96, r1=38, r2=38, $fn=50);\n                }\n            }\n            \n            // Cut center for hollow\n            translate([0, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=100, r1=35, r2=35, $fn=50);\n                }\n            }\n        }\n    }\n    \n    // Connect rockers\n    translate([-10, 0, 0]) {\n        cube([20, 2, 80]);\n    }\n}\n\n// Horse body\nmodule horse_body() {\n    // Main body\n    difference() {\n        translate([0, 0, 50]) {\n            scale([1, 0.8, 0.6]) {\n                sphere(30, $fn=30);\n            }\n        }\n        \n        // Hollow inside\n        translate([0, 0, 50]) {\n            scale([0.85, 0.7, 0.5]) {\n                sphere(28, $fn=30);\n            }\n        }\n    }\n    \n    // Neck\n    difference() {\n        translate([0, -25, 65]) {\n            rotate([30, 0, 0]) {\n                cylinder(h=25, r1=12, r2=8, $fn=20);\n            }\n        }\n        \n        // Hollow neck\n        translate([0, -25, 65]) {\n            rotate([30, 0, 0]) {\n                cylinder(h=25, r1=10, r2=6, $fn=20);\n            }\n        }\n    }\n}\n\n// Horse head\nmodule horse_head() {\n    // Main head\n    difference() {\n        translate([0, -45, 80]) {\n            rotate([30, 0, 0]) {\n                scale([0.7, 1.2, 0.8]) {\n                    sphere(15, $fn=25);\n                }\n            }\n        }\n        \n        // Hollow head\n        translate([0, -45, 80]) {\n            rotate([30, 0, 0]) {\n                scale([0.6, 1.1, 0.7]) {\n                    sphere(13, $fn=25);\n                }\n            }\n        }\n    }\n    \n    // Ears\n    for(x = [-8, 8]) {\n        translate([x, -48, 90]) {\n            rotate([45, 0, 0]) {\n                cylinder(h=8, r1=3, r2=0, $fn=8);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    // Front legs\n    for(x = [-12, 12]) {\n        translate([x, 15, 35]) {\n            rotate([10, 0, 0]) {\n                cylinder(h=25, r=4, $fn=12);\n            }\n        }\n    }\n    \n    // Back legs\n    for(x = [-12, 12]) {\n        translate([x, -15, 35]) {\n            rotate([-10, 0, 0]) {\n                cylinder(h=25, r=4, $fn=12);\n            }\n        }\n    }\n}\n\n// Saddle\nmodule saddle() {\n    difference() {\n        // Main saddle\n        translate([0, 0, 62]) {\n            scale([1.2, 0.8, 0.3]) {\n                sphere(20, $fn=30);\n            }\n        }\n        \n        // Cut bottom for fit\n        translate([0, 0, 61]) {\n            cube([50, 50, 5], center=true);\n        }\n        \n        // Hollow saddle\n        translate([0, 0, 64]) {\n            scale([1.1, 0.7, 0.2]) {\n                sphere(18, $fn=30);\n            }\n        }\n    }\n    \n    // Saddle straps\n    translate([0, 0, 65]) {\n        cube([2, 30, 2], center=true);\n    }\n}\n\n// Mane and tail\nmodule hair() {\n    // Mane\n    for(i = [-6:2:6]) {\n        translate([i, -35, 75]) {\n            rotate([15, 0, 0]) {\n                cylinder(h=12, r=1.5, $fn=8);\n            }\n        }\n    }\n    \n    // Tail\n    translate([0, 25, 55]) {\n        rotate([-30, 0, 0]) {\n            cylinder(h=15, r=3, $fn=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    rockers();\n    horse_body();\n    horse_head();\n    legs();\n    saddle();\n    hair();\n}",
    "renders": true
  },
  {
    "toy": "vault",
    "openscad_code": "// Toy Vault - Medium Complexity Realistic Style\n// 3D printable toy vault with working door, hinges, and dial\n\n// Overall dimensions\nvault_width = 80;\nvault_depth = 70;\nvault_height = 100;\n\n// Wall thickness\nwall = 2;\n\n// Main safe body\nmodule safe_body() {\n    difference() {\n        // Outer shell\n        cube([vault_width, vault_depth, vault_height], center=true);\n        \n        // Hollow inside\n        translate([0, 0, wall])\n            cube([vault_width-2*wall, vault_depth-2*wall, vault_height-wall], center=true);\n    }\n}\n\n// Front door\nmodule door() {\n    door_width = vault_width * 0.8;\n    door_height = vault_height * 0.9;\n    \n    difference() {\n        // Door panel\n        translate([-door_width/2, -vault_depth/2-wall/2, -door_height/2])\n            cube([door_width, wall, door_height]);\n        \n        // Handle hole\n        translate([door_width*0.3, -vault_depth/2-wall, -door_height*0.2])\n            cylinder(h=wall+1, r=3, center=true);\n    }\n    \n    // Door handle\n    translate([door_width*0.3, -vault_depth/2-wall-2, -door_height*0.2])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=2);\n}\n\n// Combination dial\nmodule dial() {\n    dial_radius = 12;\n    \n    // Dial base\n    translate([0, -vault_depth/2-wall, vault_height*0.3])\n        cylinder(h=wall, r=dial_radius, center=true);\n    \n    // Dial ring\n    for(i=[0:9]) {\n        rotate([0, 0, i*36])\n            translate([dial_radius-2, -vault_depth/2-wall-1, vault_height*0.3])\n                cube([2, wall+2, 1], center=true);\n    }\n    \n    // Dial knob\n    translate([0, -vault_depth/2-wall-1, vault_height*0.3])\n        cylinder(h=4, r=6);\n}\n\n// Hinges\nmodule hinges() {\n    hinge_width = 8;\n    hinge_height = 15;\n    \n    for(side=[-1, 1]) {\n        translate([side*vault_width*0.35, -vault_depth/2-wall/2, vault_height*0.25])\n            cube([hinge_width, wall*2, hinge_height]);\n        \n        translate([side*vault_width*0.35, -vault_depth/2-wall/2, -vault_height*0.25])\n            cube([hinge_width, wall*2, hinge_height]);\n    }\n}\n\n// Reinforcement bands\nmodule bands() {\n    band_height = 6;\n    \n    // Top band\n    translate([0, 0, vault_height/2-band_height/2])\n        difference() {\n            cube([vault_width+4, vault_depth+4, band_height], center=true);\n            cube([vault_width, vault_depth, band_height+2], center=true);\n        }\n    \n    // Bottom band\n    translate([0, 0, -vault_height/2+band_height/2])\n        difference() {\n            cube([vault_width+4, vault_depth+4, band_height], center=true);\n            cube([vault_width, vault_depth, band_height+2], center=true);\n        }\n}\n\n// Feet\nmodule feet() {\n    foot_size = 8;\n    \n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            translate([x*vault_width*0.4, y*vault_depth*0.4, -vault_height/2-foot_size/2])\n                cube([foot_size, foot_size, foot_size], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    safe_body();\n    bands();\n    feet();\n    translate([0, 0, 0])\n        door();\n    dial();\n    hinges();\n}",
    "renders": true
  },
  {
    "toy": "flip",
    "openscad_code": "// Flip toy (desk) - medium complexity realistic style\n// Overall dimensions: 120mm wide x 60mm deep x 100mm tall\n\n// Main parameters\ndesk_width = 120;\ndesk_depth = 60;\ndesk_height = 100;\nleg_thickness = 6;\nwall_thickness = 2.5;\nedge_radius = 3;\n\n// Module for rounded cube\nmodule rounded_cube(size, r) {\n    hull() {\n        translate([r, r, r]) sphere(r=r);\n        translate([size.x-r, r, r]) sphere(r=r);\n        translate([r, size.y-r, r]) sphere(r=r);\n        translate([size.x-r, size.y-r, r]) sphere(r=r);\n        translate([r, r, size.z-r]) sphere(r=r);\n        translate([size.x-r, r, size.z-r]) sphere(r=r);\n        translate([r, size.y-r, size.z-r]) sphere(r=r);\n        translate([size.x-r, size.y-r, size.z-r]) sphere(r=r);\n    }\n}\n\n// Desktop surface\nmodule desktop() {\n    difference() {\n        rounded_cube([desk_width, desk_depth, wall_thickness*2], edge_radius);\n        \n        // Cable management hole\n        translate([desk_width/2, desk_depth/2, -1]) \n            cylinder(h=wall_thickness*2+2, r=8);\n        \n        // Rounded edges detail\n        for(x=[wall_thickness*2, desk_width-wall_thickness*2]) \n            for(y=[wall_thickness*2, desk_depth-wall_thickness*2]) \n                translate([x, y, wall_thickness]) \n                    cylinder(h=wall_thickness, r=wall_thickness);\n    }\n}\n\n// Desk leg with support brackets\nmodule desk_leg(x_pos, y_pos) {\n    difference() {\n        // Main leg\n        translate([x_pos, y_pos, 0]) \n            rounded_cube([leg_thickness, leg_thickness, desk_height], edge_radius/2);\n        \n        // Weight reduction holes\n        translate([x_pos+leg_thickness/2, y_pos+leg_thickness/2, desk_height/2]) \n            cylinder(h=desk_height-10, r=2);\n    }\n    \n    // Support brackets\n    translate([x_pos+leg_thickness/2, y_pos+leg_thickness/2, desk_height/3]) \n        rotate([90, 0, 45]) \n            rounded_cube([leg_thickness*2, leg_thickness*2, wall_thickness], edge_radius);\n}\n\n// Drawer unit\nmodule drawer_unit() {\n    translate([desk_width/2-25, 0, wall_thickness*2]) {\n        // Drawer frame\n        rounded_cube([50, desk_depth-wall_thickness*2, 40], edge_radius);\n        \n        // Drawers\n        for(i=[0:1]) {\n            translate([5, wall_thickness*2, 5+i*15]) \n                rounded_cube([40, desk_depth-wall_thickness*6, 12], edge_radius/2);\n            \n            // Drawer handles\n            translate([25, desk_depth-wall_thickness*3, 8+i*15]) \n                rounded_cube([20, 4, 2], edge_radius/2);\n        }\n    }\n}\n\n// Back panel\nmodule back_panel() {\n    translate([0, desk_depth-wall_thickness, wall_thickness*2]) \n        rounded_cube([desk_width, wall_thickness, desk_height-wall_thickness*4], edge_radius/2);\n}\n\n// Assembly\nunion() {\n    // Desktop\n    translate([0, 0, desk_height-wall_thickness*2]) \n        desktop();\n    \n    // Legs\n    desk_leg(0, 0);\n    desk_leg(desk_width-leg_thickness, 0);\n    desk_leg(0, desk_depth-leg_thickness);\n    desk_leg(desk_width-leg_thickness, desk_depth-leg_thickness);\n    \n    // Drawer unit\n    drawer_unit();\n    \n    // Back panel\n    back_panel();\n    \n    // Reinforcement bar\n    translate([leg_thickness, leg_thickness, desk_height/2]) \n        rounded_cube([desk_width-leg_thickness*2, leg_thickness, wall_thickness], edge_radius/2);\n    \n    // Toy-style knobs on legs\n    for(x=[leg_thickness/2, desk_width-leg_thickness/2]) \n        for(y=[leg_thickness/2, desk_depth-leg_thickness/2]) \n            translate([x, y, desk_height-10]) \n                sphere(r=3);\n}",
    "renders": true
  },
  {
    "toy": "twist",
    "openscad_code": "// Twist toy - realistic style, medium complexity, 3D printable\n// Rotating cube puzzle with 2mm walls, 75mm total height\n\n$fn = 32;\nwall = 2;\n\nmodule cube_face(size) {\n    // Single face of the twist cube\n    difference() {\n        cube([size, size, wall], center=true);\n        \n        // Center hole for rotation axis\n        translate([0, 0, -wall/2-0.1])\n            cylinder(h=wall+0.2, r=size/4, center=true);\n            \n        // Grip indentations\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                translate([i*size/4, j*size/4, -wall/2-0.1])\n                    cylinder(h=wall+0.2, r=size/12, center=true);\n            }\n        }\n    }\n}\n\nmodule cube_unit(size) {\n    // Single cube unit with rounded edges\n    difference() {\n        // Main cube body\n        cube([size, size, size], center=true);\n        \n        // Rounded edges\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                for (k = [-1, 1]) {\n                    translate([i*(size/2-wall), j*(size/2-wall), k*(size/2-wall)])\n                        sphere(r=wall);\n                }\n            }\n        }\n        \n        // Hollow center\n        cube([size-wall*2, size-wall*2, size-wall*2], center=true);\n    }\n    \n    // Add faces\n    color(\"red\")\n    translate([0, 0, size/2])\n        cube_face(size);\n    \n    color(\"blue\")\n    translate([0, 0, -size/2])\n        rotate([180, 0, 0])\n            cube_face(size);\n    \n    color(\"green\")\n    translate([size/2, 0, 0])\n    rotate([0, 90, 0])\n        cube_face(size);\n    \n    color(\"orange\")\n    translate([-size/2, 0, 0])\n    rotate([0, -90, 0])\n        cube_face(size);\n    \n    color(\"white\")\n    translate([0, size/2, 0])\n    rotate([-90, 0, 0])\n        cube_face(size);\n    \n    color(\"yellow\")\n    translate([0, -size/2, 0])\n    rotate([90, 0, 0])\n        cube_face(size);\n}\n\nmodule twist_core() {\n    // Central rotating core\n    cylinder(h=75, r=6, center=true);\n    \n    // Bearing surfaces\n    for (i = [-1, 1]) {\n        translate([0, 0, i*20])\n            cylinder(h=10, r=8, center=true);\n    }\n}\n\nmodule twist_toy() {\n    // Main assembly\n    \n    // Core\n    color(\"gray\")\n    twist_core();\n    \n    // Top layer - 9 cubes\n    for (i = [-1, 0, 1]) {\n        for (j = [-1, 0, 1]) {\n            if (!(i == 0 && j == 0)) {\n                translate([i*25, j*25, 25])\n                    cube_unit(20);\n            }\n        }\n    }\n    \n    // Middle layer - 8 cubes\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i*25, j*25, 0])\n                cube_unit(20);\n        }\n    }\n    \n    for (i = [-1, 1]) {\n        translate([i*25, 0, 0])\n            cube_unit(20);\n        translate([0, i*25, 0])\n            cube_unit(20);\n    }\n    \n    // Bottom layer - 9 cubes\n    for (i = [-1, 0, 1]) {\n        for (j = [-1, 0, 1]) {\n            if (!(i == 0 && j == 0)) {\n                translate([i*25, j*25, -25])\n                    cube_unit(20);\n            }\n        }\n    }\n    \n    // Center cubes (fixed)\n    color(\"darkgray\")\n    translate([0, 0, 25])\n        cube_unit(20);\n    translate([0, 0, -25])\n        cube_unit(20);\n}\n\n// Render the complete twist toy\ntwist_toy();",
    "renders": true
  },
  {
    "toy": "arc",
    "openscad_code": "// Toy Arc - OpenSCAD\n// A realistic toy arc with structural details and 3D-printable features\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\narc_width = 80;\narc_height = 60;\narc_depth = 40;\npost_width = 6;\nrail_height = 4;\n\n// Main arc module\nmodule toy_arc() {\n    // Base posts\n    translate([-arc_width/2 + post_width/2, 0, 0])\n        cylinder(h=arc_height, r=post_width/2);\n    translate([arc_width/2 - post_width/2, 0, 0])\n        cylinder(h=arc_height, r=post_width/2);\n    \n    // Arc structure\n    difference() {\n        // Outer arc\n        translate([0, 0, arc_height])\n            rotate([90, 0, 0])\n            cylinder(h=arc_width, r=arc_height/2, r1=arc_height/2);\n        \n        // Inner arc hollow\n        translate([0, 0, arc_height])\n            rotate([90, 0, 0])\n            cylinder(h=arc_width + 2, r=arc_height/2 - wall_thickness, r1=arc_height/2 - wall_thickness);\n    }\n    \n    // Side panels\n    difference() {\n        // Left panel\n        translate([-arc_width/2 - wall_thickness/2, 0, arc_height/2])\n            cube([wall_thickness, arc_depth, arc_height]);\n        \n        // Left panel cutout\n        translate([-arc_width/2 - wall_thickness/2, -arc_depth/2 + wall_thickness, wall_thickness])\n            cube([wall_thickness, arc_depth - wall_thickness*2, arc_height - wall_thickness*2]);\n    }\n    \n    difference() {\n        // Right panel\n        translate([arc_width/2 + wall_thickness/2, 0, arc_height/2])\n            cube([wall_thickness, arc_depth, arc_height]);\n        \n        // Right panel cutout\n        translate([arc_width/2 + wall_thickness/2, -arc_depth/2 + wall_thickness, wall_thickness])\n            cube([wall_thickness, arc_depth - wall_thickness*2, arc_height - wall_thickness*2]);\n    }\n    \n    // Decorative rails\n    for(i = [1:3]) {\n        rail_z = (arc_height/4) * i;\n        translate([0, 0, rail_z])\n            cube([arc_width - post_width*2, rail_height, wall_thickness]);\n    }\n    \n    // Top cap\n    translate([0, 0, arc_height + arc_height/2])\n        cube([arc_width + wall_thickness*2, arc_depth + wall_thickness*2, wall_thickness], center=true);\n    \n    // Base plate\n    translate([0, 0, 0])\n        cube([arc_width + post_width*2, arc_depth + post_width, wall_thickness], center=true);\n    \n    // Toy-style rounded corners on base\n    translate([-arc_width/2 - post_width, -arc_depth/2 - post_width/2, 0])\n        cylinder(h=wall_thickness, r=post_width/2);\n    translate([arc_width/2 + post_width, -arc_depth/2 - post_width/2, 0])\n        cylinder(h=wall_thickness, r=post_width/2);\n    translate([-arc_width/2 - post_width, arc_depth/2 + post_width/2, 0])\n        cylinder(h=wall_thickness, r=post_width/2);\n    translate([arc_width/2 + post_width, arc_depth/2 + post_width/2, 0])\n        cylinder(h=wall_thickness, r=post_width/2);\n}\n\n// Generate the toy arc\ntoy_arc();",
    "renders": true
  },
  {
    "toy": "roxie",
    "openscad_code": "// Roxie Toy Rocking Horse (Medium Complexity, Realistic Style)\n// Overall size: ~120mm long x ~80mm high x ~50mm wide\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule rockers() {\n    // Left rocker\n    difference() {\n        translate([-25, -5, 0]) rotate([0, 90, 0])\n            cylinder(h=100, r=3, center=true);\n        translate([-25, -5, 50]) cube([6, 10, 10], center=true);\n    }\n    // Right rocker\n    mirror([1,0,0]) rockers();\n}\n\nmodule body() {\n    // Main body block\n    translate([0, 0, 40]) cube([60, 20, 50], center=true);\n    \n    // Rounded seat\n    difference() {\n        translate([0, 0, 65]) cube([40, 22, 15], center=true);\n        translate([0, 0, 75]) sphere(r=12);\n    }\n    \n    // Tail\n    translate([-35, 0, 45]) rotate([0, 90, 0])\n        cylinder(h=15, r1=8, r2=5);\n}\n\nmodule head() {\n    // Head block\n    translate([35, 0, 65]) cube([25, 20, 25], center=true);\n    \n    // Snout\n    translate([48, 0, 65]) cube([15, 12, 12], center=true);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([40, side*10, 77]) rotate([0, 30*side, 0])\n            cylinder(h=12, r1=4, r2=2);\n    }\n    \n    // Mane ridge\n    for(i = [0:4]) {\n        translate([30 + i*5, 0, 77]) cylinder(h=8, r=3);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([20, side*8, 25]) cylinder(h=30, r=4);\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([-20, side*8, 25]) cylinder(h=30, r=4);\n    }\n}\n\nmodule handles() {\n    // Handle bar\n    translate([45, 0, 75]) rotate([0, 90, 0])\n        cylinder(h=30, r=3);\n    \n    // Handle grips\n    for(side = [-1, 1]) {\n        translate([45, side*15, 75]) sphere(r=4);\n    }\n}\n\nmodule details() {\n    // Eyes\n    for(side = [-1, 1]) {\n        translate([50, side*5, 68]) sphere(r=2);\n    }\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([55, side*3, 63]) sphere(r=1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    rockers();\n    body();\n    head();\n    legs();\n    handles();\n    details();\n}",
    "renders": true
  },
  {
    "toy": "vera",
    "openscad_code": "// Vera toy chair - realistic style, medium complexity\n// Dimensions: 120mm tall, 80mm wide, 90mm deep\n\n// Parameters\nleg_thickness = 8;\nseat_thickness = 8;\nback_thickness = 6;\nwall_thickness = 2.5;\nseat_width = 80;\nseat_depth = 70;\ntotal_height = 120;\n\n// Main chair module\nmodule vera_chair() {\n    // Seat cushion\n    translate([0, 0, leg_thickness]) {\n        difference() {\n            cube([seat_width, seat_depth, seat_thickness], center = true);\n            // Cushion indentation\n            translate([0, 0, -1]) {\n                cube([seat_width - 10, seat_depth - 10, seat_thickness - 2], center = true);\n            }\n        }\n    }\n    \n    // Backrest\n    translate([0, -seat_depth/2 + back_thickness/2, leg_thickness + seat_thickness/2 + back_thickness/2]) {\n        difference() {\n            cube([seat_width - 20, back_thickness, total_height - leg_thickness - seat_thickness], center = true);\n            // Backrest curve\n            for (i = [0:5]) {\n                translate([0, back_thickness/2 + 1, -total_height/2 + leg_thickness + seat_thickness + 20 + i*15]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = seat_width - 20, r1 = 5 - i*0.5, r2 = 5 - i*0.5, center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    leg_positions = [\n        [-seat_width/2 + leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0],\n        [seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0],\n        [-seat_width/2 + leg_thickness/2, seat_depth/2 - leg_thickness/2, 0],\n        [seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2, 0]\n    ];\n    \n    for (pos = leg_positions) {\n        translate(pos) {\n            cylinder(h = leg_thickness, r = leg_thickness/2, center = false, $fn = 16);\n        }\n    }\n    \n    // Support bars between legs\n    // Front bar\n    translate([0, -seat_depth/2 + leg_thickness/2, leg_thickness/2]) {\n        cube([seat_width - leg_thickness, leg_thickness, leg_thickness], center = true);\n    }\n    \n    // Side bars\n    translate([-seat_width/2 + leg_thickness/2, 0, leg_thickness/2]) {\n        rotate([0, 0, 90]) {\n            cube([seat_depth - leg_thickness, leg_thickness, leg_thickness], center = true);\n        }\n    }\n    \n    translate([seat_width/2 - leg_thickness/2, 0, leg_thickness/2]) {\n        rotate([0, 0, 90]) {\n            cube([seat_depth - leg_thickness, leg_thickness, leg_thickness], center = true);\n        }\n    }\n    \n    // Armrests\n    armrest_height = 60;\n    armrest_width = 8;\n    \n    // Left armrest\n    translate([-seat_width/2 - armrest_width/2, 0, leg_thickness + seat_thickness/2]) {\n        cube([armrest_width, seat_depth - 20, armrest_height], center = true);\n    }\n    \n    // Right armrest\n    translate([seat_width/2 + armrest_width/2, 0, leg_thickness + seat_thickness/2]) {\n        cube([armrest_width, seat_depth - 20, armrest_height], center = true);\n    }\n    \n    // Decorative back slats\n    slat_width = 4;\n    slat_spacing = 12;\n    num_slats = 5;\n    \n    for (i = [0:num_slats-1]) {\n        x_pos = -seat_width/2 + 20 + i*slat_spacing;\n        translate([x_pos, -seat_depth/2 + back_thickness/2, leg_thickness + seat_thickness + 10]) {\n            cube([slat_width, back_thickness, total_height - leg_thickness - seat_thickness - 20]);\n        }\n    }\n}\n\n// Render the chair\nvera_chair();",
    "renders": true
  },
  {
    "toy": "jax",
    "openscad_code": "// Realistic Jax Toy - Medium Complexity\n// Overall size: 100mm diameter sphere with 8 arms\n\n// Parameters\narm_length = 35;\narm_radius = 6;\nsphere_radius = 20;\njoint_radius = 8;\nbase_thickness = 5;\ndetail_radius = 2;\n\n// Central sphere\nmodule central_sphere() {\n    difference() {\n        sphere(r=sphere_radius, $fn=32);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -sphere_radius/2])\n            sphere(r=sphere_radius - 3, $fn=32);\n    }\n}\n\n// Single arm with joint\nmodule jax_arm(rotation_angle, tilt_angle) {\n    rotate([0, 0, rotation_angle])\n        rotate([tilt_angle, 0, 0])\n            union() {\n                // Arm body\n                translate([0, 0, sphere_radius])\n                    cylinder(h=arm_length, r1=arm_radius, r2=arm_radius*0.8, $fn=16);\n                \n                // Joint sphere at tip\n                translate([0, 0, sphere_radius + arm_length])\n                    sphere(r=joint_radius, $fn=16);\n                \n                // Decorative ring around arm base\n                translate([0, 0, sphere_radius - 1])\n                    cylinder(h=2, r=arm_radius + 1, r1=arm_radius + 1, $fn=16);\n                \n                // Support rib\n                rotate([0, 90, 0])\n                    for(i=[0:45:315]) {\n                        rotate([0, 0, i])\n                            translate([0, 0, sphere_radius - 2])\n                                cube([2, 8, 4], center=true);\n                    }\n            }\n}\n\n// Base connector for stability\nmodule base_connector() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_thickness, r=sphere_radius + 5, $fn=32);\n        \n        // Hollow center\n        cylinder(h=base_thickness + 1, r=sphere_radius - 2, $fn=32);\n        \n        // Drain hole\n        translate([0, 0, -1])\n            cylinder(h=base_thickness + 2, r=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Base for 3D printing stability\n    translate([0, 0, -sphere_radius - base_thickness])\n        base_connector();\n    \n    // Central sphere\n    central_sphere();\n    \n    // Eight arms in tetrahedral arrangement\n    // Top arms\n    jax_arm(0, 45);\n    jax_arm(180, 45);\n    \n    // Bottom arms\n    jax_arm(0, -45);\n    jax_arm(180, -45);\n    \n    // Side arms\n    jax_arm(90, 0);\n    jax_arm(270, 0);\n    \n    // Front/back arms\n    jax_arm(45, 0);\n    jax_arm(225, 0);\n    \n    // Decorative details on sphere surface\n    for(i=[15:30:345]) {\n        rotate([0, 0, i])\n            rotate([45, 0, 0])\n                translate([0, 0, sphere_radius - 1])\n                    sphere(r=detail_radius, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "toy": "riven",
    "openscad_code": "// Toy Riven Chair (realistic style, medium complexity)\n// Overall size: ~100mm height x 80mm width x 90mm depth\n// 2mm wall thickness throughout for 3D printing\n\n// Main chair module\nmodule riven_chair() {\n    // Chair legs - curved X shape\n    union() {\n        // Front left leg\n        translate([-28, -38, 0])\n            rotate([0, 0, 15])\n            leg();\n        \n        // Front right leg  \n        translate([28, -38, 0])\n            rotate([0, 0, -15])\n            leg();\n            \n        // Back left leg\n        translate([-28, 38, 0])\n            rotate([0, 0, -15])\n            leg();\n            \n        // Back right leg\n        translate([28, 38, 0])\n            rotate([0, 0, 15])\n            leg();\n    }\n    \n    // Seat with cushion details\n    translate([0, 0, 45])\n        seat();\n        \n    // Backrest with slats\n    translate([0, 38, 65])\n        backrest();\n        \n    // Support stretchers between legs\n    stretchers();\n}\n\n// Curved leg module\nmodule leg() {\n    difference() {\n        // Main leg shape - tapered cylinder\n        cylinder(h=45, r1=6, r2=4, $fn=20);\n        \n        // Hollow center for 2mm walls\n        translate([0, 0, -1])\n            cylinder(h=47, r1=4, r2=2, $fn=20);\n    }\n}\n\n// Seat module with cushion details\nmodule seat() {\n    difference() {\n        // Main seat platform\n        cube([60, 80, 8], center=true);\n        \n        // Hollow underside\n        translate([0, 0, -2])\n            cube([56, 76, 4], center=true);\n    }\n    \n    // Cushion details - 4 segments\n    for(y = [-25, -8, 9, 26]) {\n        translate([0, y, 4.5])\n            cube([55, 12, 3], center=true);\n    }\n}\n\n// Backrest with vertical slats\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        // Outer frame\n        cube([58, 6, 40], center=true);\n        \n        // Hollow center\n        translate([0, 0, -2])\n            cube([54, 10, 36], center=true);\n    }\n    \n    // Vertical slats\n    for(x = [-20, -10, 0, 10, 20]) {\n        translate([x, 0, 0])\n            cube([4, 6, 36], center=true);\n    }\n    \n    // Top rail detail\n    translate([0, 0, 22])\n        cube([62, 8, 4], center=true);\n}\n\n// Support stretchers between legs\nmodule stretchers() {\n    // Front stretcher\n    translate([0, -38, 22])\n        cube([56, 4, 4], center=true);\n        \n    // Back stretcher\n    translate([0, 38, 22])\n        cube([56, 4, 4], center=true);\n        \n    // Side stretchers\n    translate([-28, 0, 22])\n        rotate([0, 0, 90])\n        cube([76, 4, 4], center=true);\n        \n    translate([28, 0, 22])\n        rotate([0, 0, 90])\n        cube([76, 4, 4], center=true);\n}\n\n// Render the chair\nriven_chair();",
    "renders": true
  },
  {
    "toy": "axel",
    "openscad_code": "// Axel Toy - Realistic Style, Medium Complexity\n// A sturdy toy axel with wooden appearance and metal axle rod\n\n$fn = 32;\n\n// Overall dimensions\naxel_length = 100;\naxel_diameter = 50;\nhandle_thickness = 12;\nmetal_rod_diameter = 8;\n\nmodule wooden_wheel() {\n    difference() {\n        // Main wheel body\n        cylinder(h=10, d=axel_diameter, center=true);\n        \n        // Decorative grooves on face\n        for(i=[1:3]) {\n            rotate([0, 0, i*30])\n            translate([0, 0, -5.5])\n            cylinder(h=2, d=axel_diameter - i*8, center=true);\n        }\n        \n        // Center hole for axle rod\n        translate([0, 0, -6])\n        cylinder(h=12, d=metal_rod_diameter + 2, center=true);\n    }\n    \n    // Tread pattern on edge\n    for(i=[0:359:30]) {\n        rotate([0, 0, i])\n        translate([axel_diameter/2 - 2, 0, -5])\n        cube([4, 10, 10], center=true);\n    }\n}\n\nmodule wooden_handle() {\n    // Main handle body\n    difference() {\n        cube([axel_length, handle_thickness, handle_thickness], center=true);\n        \n        // Finger grooves on top\n        for(i=[-2:2]) {\n            translate([i*20, 0, handle_thickness/2 - 1])\n            cylinder(h=2, d=8, center=true);\n        }\n        \n        // End rounding\n        translate([-axel_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=handle_thickness, d=handle_thickness, center=true);\n        translate([axel_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=handle_thickness, d=handle_thickness, center=true);\n    }\n    \n    // Reinforcement blocks at ends\n    translate([-axel_length/2 + 10, 0, 0])\n    cube([20, handle_thickness + 4, handle_thickness + 4], center=true);\n    translate([axel_length/2 - 10, 0, 0])\n    cube([20, handle_thickness + 4, handle_thickness + 4], center=true);\n}\n\nmodule metal_axle_rod() {\n    // Central rod\n    cylinder(h=axel_length + 40, d=metal_rod_diameter, center=true);\n    \n    // End caps\n    translate([0, 0, -(axel_length/2 + 20)])\n    cylinder(h=8, d=metal_rod_diameter + 4, center=true);\n    translate([0, 0, axel_length/2 + 20])\n    cylinder(h=8, d=metal_rod_diameter + 4, center=true);\n    \n    // Threading detail\n    for(i=[-axel_length/2:5:axel_length/2]) {\n        translate([0, 0, i])\n        cylinder(h=2, d=metal_rod_diameter + 1, center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nwooden_handle();\n\ntranslate([0, 0, handle_thickness/2 + 5])\nrotate([90, 0, 0])\nmetal_axle_rod();\n\ntranslate([0, 0, handle_thickness/2 + 15])\nwooden_wheel();\n\ntranslate([0, 0, handle_thickness/2 - 15])\nmirror([0, 0, 1])\nwooden_wheel();\n\n// Decorative metal brackets\ntranslate([-axel_length/2 + 20, handle_thickness/2 + 2, 0])\ncube([8, 4, handle_thickness], center=true);\ntranslate([axel_length/2 - 20, handle_thickness/2 + 2, 0])\ncube([8, 4, handle_thickness], center=true);",
    "renders": true
  },
  {
    "toy": "mira",
    "openscad_code": "// Mira Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm height, 60mm width, 55mm depth\n\n// Parameters\nchair_height = 80;\nseat_height = 45;\nseat_width = 60;\nseat_depth = 55;\nback_height = 35;\nleg_thickness = 8;\nwall_thickness = 2.5;\n\n// Main chair module\nmodule mira_chair() {\n    // Seat base - slightly curved top surface\n    translate([0, 0, seat_height/2])\n    difference() {\n        // Main seat block\n        cube([seat_width, seat_depth, seat_height], center=true);\n        \n        // Hollow out bottom\n        translate([0, 0, -wall_thickness/2])\n        cube([seat_width-2*wall_thickness, seat_depth-2*wall_thickness, seat_height], center=true);\n        \n        // Curved top surface\n        translate([0, 0, seat_height/2])\n        cylinder(h=5, r1=seat_width/2, r2=seat_width/2-2, center=true);\n    }\n    \n    // Backrest\n    translate([0, -seat_depth/2+2, seat_height+back_height/2])\n    difference() {\n        // Main backrest panel\n        cube([seat_width-10, wall_thickness*2, back_height], center=true);\n        \n        // Decorative cutouts\n        for(i = [-1, 0, 1]) {\n            translate([i*15, 0, 0])\n            cylinder(h=wall_thickness*2+1, r=5, center=true);\n        }\n    }\n    \n    // Backrest support bars\n    for(x = [-seat_width/3, seat_width/3]) {\n        translate([x, -seat_depth/2+10, seat_height+back_height/3])\n        cylinder(h=back_height*2/3, r=3, center=false);\n    }\n    \n    // Front legs\n    module front_leg() {\n        translate([0, 0, seat_height/2])\n        difference() {\n            // Tapered leg\n            cylinder(h=seat_height, r1=leg_thickness/2, r2=leg_thickness/2-1, center=false);\n            // Hollow core\n            cylinder(h=seat_height-5, r1=leg_thickness/2-2, r2=leg_thickness/2-3, center=false);\n        }\n    }\n    \n    // Rear legs\n    module rear_leg() {\n        translate([0, 0, seat_height/2])\n        difference() {\n            // Angled leg\n            rotate([5, 0, 0])\n            cylinder(h=seat_height+5, r1=leg_thickness/2+1, r2=leg_thickness/2, center=false);\n            // Hollow core\n            rotate([5, 0, 0])\n            cylinder(h=seat_height, r1=leg_thickness/2-2, r2=leg_thickness/2-3, center=false);\n        }\n    }\n    \n    // Position legs\n    translate([seat_width/2-leg_thickness/2, seat_depth/2-leg_thickness/2, 0])\n    front_leg();\n    translate([-seat_width/2+leg_thickness/2, seat_depth/2-leg_thickness/2, 0])\n    front_leg();\n    \n    translate([seat_width/2-leg_thickness/2-2, -seat_depth/2+leg_thickness/2, 0])\n    rear_leg();\n    translate([-seat_width/2+leg_thickness/2+2, -seat_depth/2+leg_thickness/2, 0])\n    rear_leg();\n    \n    // Armrest supports\n    module armrest() {\n        translate([0, 0, seat_height/4])\n        difference() {\n            cube([5, seat_depth/3, seat_height/2], center=true);\n            cube([3, seat_depth/3-2, seat_height/2-4], center=true);\n        }\n    }\n    \n    translate([seat_width/2-2.5, 0, seat_height/2+seat_height/4])\n    armrest();\n    translate([-seat_width/2+2.5, 0, seat_height/2+seat_height/4])\n    mirror([1, 0, 0])\n    armrest();\n    \n    // Cross support bars between legs\n    translate([0, 0, 15])\n    difference() {\n        cube([seat_width-leg_thickness, 3, 3], center=true);\n        cube([seat_width-leg_thickness-4, 1, 1], center=true);\n    }\n    \n    // Decorative seat edge banding\n    translate([0, 0, seat_height-1])\n    difference() {\n        cube([seat_width+2, seat_depth+2, 2], center=true);\n        cube([seat_width-2, seat_depth-2, 3], center=true);\n    }\n}\n\n// Render the chair\nmira_chair();",
    "renders": true
  },
  {
    "toy": "crux",
    "openscad_code": "// Realistic toy crux (cross) with medium detail\n// Designed for 3D printing with 2mm wall thickness\n\n// Parameters\ncross_width = 40;\ncross_height = 100;\ncross_depth = 12;\narm_thickness = 8;\njoint_radius = 6;\nbase_size = 30;\nbase_height = 8;\n\n// Main cross body\nmodule cross_body() {\n    // Vertical stem\n    cube([cross_depth, cross_width, cross_height], center=true);\n    \n    // Horizontal arm\n    translate([0, 0, cross_height/4])\n        cube([cross_depth, cross_width*2.5, arm_thickness], center=true);\n    \n    // Rounded joints using spheres\n    translate([0, 0, cross_height/4])\n        sphere(r=joint_radius, $fn=16);\n    \n    translate([0, 0, -cross_height/4])\n        sphere(r=joint_radius, $fn=16);\n}\n\n// Decorative end caps\nmodule end_caps() {\n    // Top cap\n    translate([0, 0, cross_height/2 + cross_depth/2])\n        rotate([90, 0, 0])\n            cylinder(h=cross_depth, r=cross_width/2, $fn=32);\n    \n    // Bottom cap\n    translate([0, 0, -cross_height/2 - cross_depth/2])\n        rotate([90, 0, 0])\n            cylinder(h=cross_depth, r=cross_width/2, $fn=32);\n    \n    // Left arm cap\n    translate([0, -cross_width*1.25 - cross_depth/2, cross_height/4])\n        rotate([0, 90, 0])\n            cylinder(h=cross_depth, r=cross_width/2, $fn=32);\n    \n    // Right arm cap\n    translate([0, cross_width*1.25 + cross_depth/2, cross_height/4])\n        rotate([0, 90, 0])\n            cylinder(h=cross_depth, r=cross_width/2, $fn=32);\n}\n\n// Base for stability\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, -cross_height/2 - base_height/2])\n            cylinder(h=base_height, r1=base_size, r2=base_size*1.2, $fn=32);\n        \n        // Center hole for stem\n        translate([0, 0, -cross_height/2 - base_height/2 - 1])\n            cylinder(h=base_height+2, r=cross_width/2, $fn=32);\n    }\n}\n\n// Decorative relief pattern\nmodule relief_pattern() {\n    for(i = [-1:1]) {\n        // Vertical ribs\n        translate([cross_depth/4, i*cross_width/3, 0])\n            cube([1, 2, cross_height - 10], center=true);\n        \n        // Horizontal ribs\n        translate([cross_depth/4, 0, cross_height/4 + i*cross_width/3])\n            cube([1, cross_width*2.5 - 10, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main cross structure\n    union() {\n        cross_body();\n        end_caps();\n    }\n    \n    // Add base\n    base();\n    \n    // Add relief details\n    translate([0, 0, 0])\n        relief_pattern();\n    \n    // Mirror for other side\n    mirror([1, 0, 0])\n        translate([cross_depth, 0, 0])\n            relief_pattern();\n}",
    "renders": true
  },
  {
    "toy": "tala",
    "openscad_code": "// Tala Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm wide × 55mm deep × 85mm high\n// Wall thickness: 2mm throughout for 3D printability\n\n// Main module for the complete toy chair\nmodule tala_chair() {\n    // Chair assembly\n    union() {\n        // Seat base with slight cushion shape\n        seat_base();\n        \n        // Four legs\n        translate([-23, -20, 0]) chair_leg();\n        translate([23, -20, 0]) chair_leg();\n        translate([-23, 20, 0]) chair_leg();\n        translate([23, 20, 0]) chair_leg();\n        \n        // Backrest frame and slats\n        backrest_assembly();\n        \n        // Optional toy details - rounded corners and joints\n        toy_details();\n    }\n}\n\n// Seat cushion with 2mm wall thickness\nmodule seat_base() {\n    difference() {\n        // Outer cushion shape\n        translate([0, 0, 22]) \n            scale([1, 1, 0.4])\n                sphere(d=58, $fn=40);\n        \n        // Inner hollow space\n        translate([0, 0, 25]) \n            scale([0.93, 0.93, 0.3])\n                sphere(d=58, $fn=40);\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n            cube([100, 100, 25], center=true);\n    }\n}\n\n// Single chair leg - tapered design\nmodule chair_leg() {\n    union() {\n        // Main leg structure\n        cylinder(h1=40, h2=35, r1=3.5, r2=2.5, $fn=16);\n        \n        // Foot detail - slightly wider base\n        translate([0, 0, -1])\n            cylinder(h=3, r=4, $fn=16);\n    }\n}\n\n// Complete backrest assembly\nmodule backrest_assembly() {\n    // Backrest posts\n    translate([-22, -25, 35]) backrest_post();\n    translate([22, -25, 35]) backrest_post();\n    \n    // Top rail\n    translate([0, -25, 68])\n        cube([46, 4, 6], center=true);\n    \n    // Backrest slats\n    for(i = [-15:10:15]) {\n        translate([i, -25, 50])\n            cube([6, 2.5, 15], center=true);\n    }\n    \n    // Support bars\n    translate([0, -10, 45])\n        cube([50, 2, 8], center=true);\n}\n\n// Individual backrest post with rounded top\nmodule backrest_post() {\n    union() {\n        // Main post\n        cylinder(h=40, r=2.5, $fn=12);\n        \n        // Rounded top detail\n        translate([0, 0, 40])\n            sphere(d=5.5, $fn=12);\n    }\n}\n\n// Toy-specific details - rounded edges and joints\nmodule toy_details() {\n    // Corner rounds on seat\n    for(x = [-25, 25])\n    for(y = [-22, 22]) {\n        translate([x, y, 44])\n            sphere(d=3, $fn=8);\n    }\n    \n    // Joint details at leg connections\n    for(x = [-23, 23])\n    for(y = [-20, 20]) {\n        translate([x, y, 22])\n            cylinder(h=2, r=4.5, $fn=12);\n    }\n}\n\n// Render the complete chair\ntala_chair();",
    "renders": true
  },
  {
    "toy": "drax",
    "openscad_code": "// Drax toy construction excavator - realistic style, medium complexity\n\nmodule excavator_body() {\n    // Main body chassis\n    difference() {\n        cube([80, 35, 25], center=true);\n        translate([0, 0, 12])\n            cube([76, 31, 15], center=true);\n    }\n    \n    // Engine compartment\n    translate([-35, 0, 12])\n        cube([25, 30, 20], center=true);\n    \n    // Cab structure\n    translate([25, 0, 15])\n        cube([30, 28, 35], center=true);\n    \n    // Cab roof\n    translate([25, 0, 32])\n        cube([32, 30, 5], center=true);\n    \n    // Cab windows\n    translate([40, 0, 20])\n        cube([2, 24, 20], center=true);\n    translate([25, -13, 20])\n        cube([28, 2, 20], center=true);\n    translate([25, 13, 20])\n        cube([28, 2, 20], center=true);\n}\n\nmodule excavator_tracks() {\n    // Left track assembly\n    translate([-40, -22, -12]) {\n        // Track frame\n        cube([75, 8, 15], center=true);\n        \n        // Track pads\n        for(i = [-30:5:30]) {\n            translate([i, -4, -12])\n                cube([4.5, 2, 8], center=true);\n        }\n        \n        // Front wheel\n        translate([35, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=8, center=true);\n        \n        // Rear wheel\n        translate([-35, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=8, center=true);\n                \n        // Support rollers\n        for(i = [-20:10:20]) {\n            translate([i, 0, -5])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=6, center=true);\n        }\n    }\n    \n    // Right track assembly (mirrored)\n    mirror([0, 1, 0])\n        translate([-40, -22, -12]) {\n            // Track frame\n            cube([75, 8, 15], center=true);\n            \n            // Track pads\n            for(i = [-30:5:30]) {\n                translate([i, -4, -12])\n                    cube([4.5, 2, 8], center=true);\n            }\n            \n            // Front wheel\n            translate([35, 0, -5])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=8, center=true);\n            \n            // Rear wheel\n            translate([-35, 0, -5])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=8, center=true);\n                    \n            // Support rollers\n            for(i = [-20:10:20]) {\n                translate([i, 0, -5])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, r=6, center=true);\n            }\n        }\n}\n\nmodule excavator_arm() {\n    // Base rotation joint\n    translate([40, 0, 10])\n        rotate([0, 0, 45])\n            cylinder(h=15, r=12, center=true);\n    \n    // Main boom\n    translate([45, 0, 25])\n        rotate([0, 0, 30])\n            cube([50, 12, 10], center=true);\n    \n    // Boom cylinder\n    translate([50, 0, 15])\n        rotate([0, 0, 30])\n            cylinder(h=8, r=6, center=true);\n    \n    // Dipper arm\n    translate([75, 0, 45])\n        rotate([0, 0, -15])\n            cube([35, 10, 8], center=true);\n    \n    // Dipper cylinder\n    translate([65, 0, 35])\n        rotate([0, 0, -15])\n            cylinder(h=6, r=4, center=true);\n    \n    // Bucket\n    translate([100, 0, 40])\n        rotate([0, 0, -45])\n        difference() {\n            // Bucket body\n            cube([20, 18, 15], center=true);\n            \n            // Bucket cavity\n            translate([5, 0, -5])\n                cube([15, 14, 8], center=true);\n            \n            // Teeth\n            for(i = [-6:3:6]) {\n                translate([10, i, -7])\n                    cube([3, 2, 4], center=true);\n            }\n        }\n}\n\n// Main assembly\ntranslate([0, 0, 20]) {\n    excavator_body();\n    excavator_tracks();\n    excavator_arm();\n}",
    "renders": true
  },
  {
    "toy": "grit",
    "openscad_code": "// Toy Grit (small wooden chair) – realistic style, medium complexity\n// Overall size ≈ 70 mm (H) × 55 mm (W) × 55 mm (D)\n\n$fn = 32;\n\nmodule chair() {\n    difference() {\n        union() {\n            seat();\n            backrest();\n            legs();\n            stretchers();\n        }\n        \n        // Remove bottom-center material for 3D-printing stability\n        translate([-30,-30,-2]) cube([60,60,2]);\n    }\n}\n\nmodule seat() {\n    // 2 mm thick wooden plate with rounded top edges\n    difference() {\n        translate([0,0,34]) cube([55,55,4], center=true);\n        for (x = [-1,1])\n        for (y = [-1,1])\n            translate([x*26.5, y*26.5, 36])\n                cylinder(h=4, d=4, center=true);\n    }\n}\n\nmodule backrest() {\n    // Two vertical slats plus top rail\n    translate([0, 24.5, 52]) cube([45,4,36], center=true);   // top rail\n    \n    for (x = [-15, 15]) {\n        translate([x, 24.5, 42])\n            cube([8,4,28], center=true);                     // slats\n    }\n}\n\nmodule legs() {\n    // Cylindrical legs 8 mm Ø, 34 mm long\n    for (x = [-22, 22])\n    for (y = [-22, 22])\n        translate([x, y, 17])\n            cylinder(h=34, d=8);\n}\n\nmodule stretchers() {\n    // Front and side stretchers for toy-like rigidity\n    translate([0, 22, 17])\n        rotate([90,0,0])\n            cylinder(h=44, d=6);      // front stretcher\n    \n    translate([22, 0, 17])\n        rotate([90,0,90])\n            cylinder(h=44, d=6);      // right stretcher\n    \n    translate([-22, 0, 17])\n        rotate([90,0,90])\n            cylinder(h=44, d=6);      // left stretcher\n}\n\nchair();",
    "renders": true
  },
  {
    "toy": "zuri",
    "openscad_code": "// Realistic Zuri Chair - Medium Complexity\n// Overall dimensions: 80mm x 90mm x 100mm (W x D x H)\n\n$fn = 32;\nwall = 2;\n\nmodule leg(x, z) {\n    translate([x, -40, z]) {\n        difference() {\n            cylinder(h = 50, r1 = 5, r2 = 4);\n            translate([0, 0, -1])\n                cylinder(h = 52, r1 = 3, r2 = 2);\n        }\n    }\n}\n\nmodule back_slat(x) {\n    translate([x, -42, 75]) {\n        difference() {\n            cube([4, 2, 20]);\n            translate([1, 1, 1])\n                cube([2, 1, 18]);\n        }\n    }\n}\n\nmodule armrest() {\n    translate([35, 0, 70]) {\n        difference() {\n            cube([5, 40, 3]);\n            translate([1, 1, 1])\n                cube([3, 38, 2]);\n        }\n    }\n}\n\n// Seat base frame\ntranslate([0, 0, 50]) {\n    difference() {\n        cube([70, 80, 4]);\n        translate([wall, wall, 1])\n            cube([70-wall*2, 80-wall*2, 3]);\n    }\n}\n\n// Seat cushion\ntranslate([0, 0, 54]) {\n    difference() {\n        minkowski() {\n            cube([65, 75, 8]);\n            sphere(2);\n        }\n        translate([wall, wall, wall])\n            cube([65-wall*2, 75-wall*2, 8]);\n    }\n}\n\n// Backrest frame\ntranslate([0, -42, 75]) {\n    difference() {\n        cube([70, 4, 45]);\n        translate([wall, 1, wall])\n            cube([70-wall*2, 2, 45-wall*2]);\n    }\n}\n\n// Backrest slats\nfor (x = [-25, -15, -5, 5, 15, 25]) {\n    back_slat(x);\n}\n\n// Legs\nleg(-30, 0);\nleg(30, 0);\nleg(-30, -30);\nleg(30, -30);\n\n// Armrests\narmrest();\nmirror([1, 0, 0]) armrest();\n\n// Support bars\ntranslate([0, -20, 25]) {\n    difference() {\n        cube([74, 2, 2]);\n        translate([wall, 1, 1])\n            cube([74-wall*2, 1, 1]);\n    }\n}\n\ntranslate([0, 20, 25]) {\n    difference() {\n        cube([74, 2, 2]);\n        translate([wall, 1, 1])\n            cube([74-wall*2, 1, 1]);\n    }\n}",
    "renders": true
  },
  {
    "toy": "orin",
    "openscad_code": "// Toy Orin Armchair - Realistic Style, Medium Complexity\n// Overall dimensions: ~110mm wide x 100mm deep x 110mm tall\n// Wall thickness: 2mm throughout for 3D printability\n// No steep overhangs, all angles <= 45°\n\n// Color for preview only\ncolor(\"saddlebrown\") {\n\n// Main assembly\nunion() {\n    // Seat frame & cushion\n    seat_assembly();\n\n    // Left armrest\n    armrest(-45);\n\n    // Right armrest  \n    armrest(45);\n\n    // Backrest\n    backrest();\n\n    // Front legs\n    translate([-35, 40, 0]) leg();\n    translate([35, 40, 0]) leg();\n\n    // Rear legs\n    translate([-35, -40, 0]) leg();\n    translate([35, -40, 0]) leg();\n\n    // Support stretchers\n    stretcher_front();\n    stretcher_side();\n}\n\n// Module: Seat assembly (frame + cushion)\nmodule seat_assembly() {\n    difference() {\n        // Seat frame box\n        translate([0, 0, 40])\n            cube([90, 80, 10], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, 45])\n            cube([86, 76, 8], center=true);\n    }\n\n    // Cushion on top\n    translate([0, 0, 51])\n        scale([1, 1, 0.4])\n            sphere(d=90);\n}\n\n// Module: Armrest\nmodule armrest(side) {\n    translate([side, 0, 65]) {\n        // Support post\n        cylinder(h=30, d1=12, d2=8, center=false);\n\n        // Arm pad\n        translate([0, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h=40, r1=6, r2=8);\n    }\n}\n\n// Module: Backrest\nmodule backrest() {\n    // Back frame\n    difference() {\n        translate([0, -40, 80])\n            cube([90, 8, 80], center=true);\n\n        // Hollow out\n        translate([0, -40, 80])\n            cube([86, 12, 76], center=true);\n    }\n\n    // Back slats (vertical bars)\n    for(x = [-30, -15, 0, 15, 30]) {\n        translate([x, -40, 80])\n            cube([6, 4, 76], center=true);\n    }\n\n    // Top rail\n    translate([0, -40, 120])\n        rotate([90, 0, 0])\n            cylinder(h=90, r=4, center=true);\n}\n\n// Module: Leg\nmodule leg() {\n    cylinder(h=40, d1=12, d2=10);\n    \n    // Foot detail\n    translate([0, 0, -1])\n        sphere(d=14);\n}\n\n// Module: Front stretcher\nmodule stretcher_front() {\n    translate([0, 35, 20])\n        rotate([90, 0, 0])\n            cylinder(h=70, r=3, center=true);\n}\n\n// Module: Side stretcher\nmodule stretcher_side() {\n    translate([45, 0, 20])\n        rotate([0, 90, 0])\n            cylinder(h=80, r=3, center=true);\n}\n\n}",
    "renders": true
  },
  {
    "toy": "kael",
    "openscad_code": "// Kael Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm wide x 110mm deep x 120mm tall\n\n// Parameters\nseat_height = 60;\nseat_width = 100;\nseat_depth = 100;\nback_height = 60;\nleg_height = 60;\nleg_thickness = 8;\nwall_thickness = 2;\n\n// Main chair assembly\nmodule kael_chair() {\n    // Chair legs - four legs with stretcher support\n    union() {\n        // Front left leg\n        translate([-seat_width/2 + leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0])\n            leg();\n        \n        // Front right leg\n        translate([seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0])\n            leg();\n        \n        // Back left leg\n        translate([-seat_width/2 + leg_thickness/2, seat_depth/2 - leg_thickness/2, 0])\n            leg();\n        \n        // Back right leg\n        translate([seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2, 0])\n            leg();\n        \n        // Side stretchers\n        translate([0, -seat_depth/2 + leg_thickness/2, leg_height/3])\n            cube([seat_width - leg_thickness, leg_thickness, wall_thickness], center=true);\n        \n        translate([0, seat_depth/2 - leg_thickness/2, leg_height/3])\n            cube([seat_width - leg_thickness, leg_thickness, wall_thickness], center=true);\n        \n        // Back stretcher\n        translate([-seat_width/2 + leg_thickness/2, 0, leg_height/3])\n            cube([wall_thickness, seat_depth - leg_thickness, leg_thickness], center=true);\n    }\n    \n    // Seat with cushion detail\n    translate([0, 0, leg_height])\n        seat();\n    \n    // Backrest with slats\n    translate([0, seat_depth/2 - wall_thickness, leg_height + back_height/2])\n        backrest();\n}\n\n// Individual leg module\nmodule leg() {\n    difference() {\n        // Main leg post\n        cylinder(h=leg_height, d=leg_thickness, $fn=16);\n        \n        // Countersink hole for screw\n        translate([0, 0, -1])\n            cylinder(h=5, d1=leg_thickness-2, d2=leg_thickness-4, $fn=16);\n    }\n}\n\n// Seat module with cushion\nmodule seat() {\n    difference() {\n        // Seat base\n        cube([seat_width, seat_depth, wall_thickness*2], center=true);\n        \n        // Cushion detail - rounded top\n        translate([0, 0, wall_thickness])\n            cube([seat_width-wall_thickness*2, seat_depth-wall_thickness*2, wall_thickness], center=true);\n    }\n    \n    // Cushion tufting details\n    for(x = [-30, 0, 30]) {\n        for(y = [-30, 0, 30]) {\n            translate([x, y, wall_thickness*2])\n                sphere(d=wall_thickness*1.5, $fn=12);\n        }\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Main back frame\n    difference() {\n        // Outer frame\n        cube([seat_width, wall_thickness*3, back_height], center=true);\n        \n        // Inner cutout for slats\n        cube([seat_width-wall_thickness*4, wall_thickness*2.5, back_height-wall_thickness*2], center=true);\n    }\n    \n    // Vertical slats\n    for(x = [-35, -17.5, 0, 17.5, 35]) {\n        translate([x, 0, 0])\n            cube([wall_thickness*2, wall_thickness*2.5, back_height-wall_thickness*4], center=true);\n    }\n    \n    // Top rail detail\n    translate([0, 0, back_height/2 - wall_thickness])\n        cube([seat_width, wall_thickness*3.5, wall_thickness*2], center=true);\n}\n\n// Render the chair\nkael_chair();",
    "renders": true
  },
  {
    "toy": "sera",
    "openscad_code": "// Realistic Toy Sera (Rocking Chair)\n// Medium complexity OpenSCAD model with 3D printable features\n\n// Main parameters\nchair_width = 60;\nchair_depth = 70;\nchair_height = 85;\nseat_thickness = 8;\nbackrest_height = 45;\nrocker_radius = 150;\nrocker_thickness = 10;\n\n// Material thickness for 3D printing\nwall_thickness = 2;\n\nmodule rocker_base() {\n    // Left rocker\n    translate([-chair_width/2 - 5, 0, 0]) {\n        difference() {\n            // Main curved rocker\n            rotate([90, 0, 0])\n                cylinder(h=chair_width + 10, r=rocker_radius, $fn=50);\n            // Hollow out for material saving\n            rotate([90, 0, 0])\n                cylinder(h=chair_width + 14, r=rocker_radius - rocker_thickness, $fn=50);\n        }\n    }\n    \n    // Right rocker (mirror of left)\n    translate([chair_width/2 + 5, 0, 0]) {\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h=chair_width + 10, r=rocker_radius, $fn=50);\n            rotate([90, 0, 0])\n                cylinder(h=chair_width + 14, r=rocker_radius - rocker_thickness, $fn=50);\n        }\n    }\n    \n    // Connecting support bars\n    for(i = [-1, 1]) {\n        translate([0, i * 20, rocker_radius - 20]) {\n            rotate([90, 0, 0])\n                cylinder(h=chair_width + 10, r=5, $fn=16);\n        }\n    }\n}\n\nmodule seat() {\n    // Main seat platform\n    translate([0, 0, rocker_radius - 10]) {\n        difference() {\n            // Cushioned seat\n            cube([chair_width, chair_depth, seat_thickness], center=true);\n            // Rounded edges on top\n            translate([0, 0, seat_thickness/2 - 1])\n                cube([chair_width - 4, chair_depth - 4, 2], center=true);\n        }\n    }\n    \n    // Seat cushion details\n    for(x = [-20, 0, 20]) {\n        for(y = [-20, 0, 20]) {\n            translate([x, y, rocker_radius - 6 + seat_thickness/2]) {\n                cylinder(h=2, r=8, $fn=32);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Main backrest frame\n    translate([0, -chair_depth/2 + 5, rocker_radius - 10 + seat_thickness + backrest_height/2]) {\n        difference() {\n            // Outer frame\n            cube([chair_width - 10, 8, backrest_height], center=true);\n            // Inner cutout\n            cube([chair_width - 14, 4, backrest_height - 4], center=true);\n        }\n    }\n    \n    // Slats\n    for(i = [-2, -1, 0, 1, 2]) {\n        translate([i * 10, -chair_depth/2 + 5, rocker_radius - 10 + seat_thickness + backrest_height/2]) {\n            cube([6, 8, backrest_height - 8], center=true);\n        }\n    }\n    \n    // Top rail\n    translate([0, -chair_depth/2 + 5, rocker_radius - 10 + seat_thickness + backrest_height - 4]) {\n        cube([chair_width - 8, 10, 8], center=true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 + 5, 0, rocker_radius - 10 + seat_thickness + 15]) {\n        difference() {\n            // Main support\n            cube([10, chair_depth/2 - 10, 30], center=true);\n            // Rounded top\n            translate([0, chair_depth/4 - 5, 15])\n                sphere(r=5, $fn=32);\n        }\n    }\n    \n    // Right armrest\n    translate([chair_width/2 - 5, 0, rocker_radius - 10 + seat_thickness + 15]) {\n        difference() {\n            cube([10, chair_depth/2 - 10, 30], center=true);\n            translate([0, chair_depth/4 - 5, 15])\n                sphere(r=5, $fn=32);\n        }\n    }\n}\n\nmodule support_posts() {\n    // Front left post\n    translate([-chair_width/2 + 10, chair_depth/2 - 15, rocker_radius - 10 + seat_thickness/2]) {\n        cylinder(h=seat_thickness, r=3, $fn=16);\n    }\n    \n    // Front right post\n    translate([chair_width/2 - 10, chair_depth/2 - 15, rocker_radius - 10 + seat_thickness/2]) {\n        cylinder(h=seat_thickness, r=3, $fn=16);\n    }\n    \n    // Back posts\n    translate([-chair_width/2 + 10, -chair_depth/2 + 15, rocker_radius - 10 + seat_thickness + backrest_height/2]) {\n        cylinder(h=backrest_height, r=3, $fn=16);\n    }\n    \n    translate([chair_width/2 - 10, -chair_depth/2 + 15, rocker_radius - 10 + seat_thickness + backrest_height/2]) {\n        cylinder(h=backrest_height, r=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    rocker_base();\n    seat();\n    backrest();\n    armrests();\n    support_posts();\n}",
    "renders": true
  },
  {
    "toy": "rei",
    "openscad_code": "// Rei Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm wide x 110mm deep x 100mm tall\n\n// Parameters\nseat_height = 45;\nseat_width = 80;\nseat_depth = 85;\nback_height = 55;\nleg_height = 40;\nwall_thickness = 2;\n\n// Main chair module\nmodule rei_chair() {\n    // Seat base\n    difference() {\n        cube([seat_width, seat_depth, 8], center=true);\n        translate([0, 0, 4]) \n            cube([seat_width-wall_thickness*2, seat_depth-wall_thickness*2, 8.1], center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 4]) {\n        difference() {\n            cube([seat_width-8, seat_depth-8, 6], center=true);\n            translate([0, 0, 2.9]) \n                cube([seat_width-16, seat_depth-16, 6.1], center=true);\n        }\n    }\n    \n    // Backrest frame\n    translate([0, seat_depth/2 - 6, seat_height + back_height/2 - 4]) {\n        difference() {\n            cube([seat_width, 8, back_height], center=true);\n            translate([0, 0, 0]) \n                cube([seat_width-wall_thickness*2, 8.1, back_height-wall_thickness*2], center=true);\n        }\n    }\n    \n    // Backrest slats\n    for(i = [-1, 0, 1]) {\n        translate([i * 20, seat_depth/2 - 6, seat_height + back_height/2 - 4]) {\n            difference() {\n                cube([12, 6, back_height-4], center=true);\n                translate([0, 0, 0]) \n                    cube([10, 6.1, back_height-6], center=true);\n            }\n        }\n    }\n    \n    // Front legs\n    translate([-seat_width/2 + 6, -seat_depth/2 + 6, leg_height/2 - 4]) {\n        difference() {\n            cylinder(h=leg_height, r=5, center=true);\n            cylinder(h=leg_height+0.1, r=3, center=true);\n        }\n    }\n    \n    translate([seat_width/2 - 6, -seat_depth/2 + 6, leg_height/2 - 4]) {\n        difference() {\n            cylinder(h=leg_height, r=5, center=true);\n            cylinder(h=leg_height+0.1, r=3, center=true);\n        }\n    }\n    \n    // Back legs\n    translate([-seat_width/2 + 6, seat_depth/2 - 6, leg_height/2 - 4]) {\n        difference() {\n            cylinder(h=leg_height, r=5, center=true);\n            cylinder(h=leg_height+0.1, r=3, center=true);\n        }\n    }\n    \n    translate([seat_width/2 - 6, seat_depth/2 - 6, leg_height/2 - 4]) {\n        difference() {\n            cylinder(h=leg_height, r=5, center=true);\n            cylinder(h=leg_height+0.1, r=3, center=true);\n        }\n    }\n    \n    // Support bars between legs\n    translate([0, -seat_depth/2 + 6, leg_height/2 - 4]) {\n        difference() {\n            cube([seat_width-12, 4, 4], center=true);\n            cube([seat_width-14, 4.1, 2], center=true);\n        }\n    }\n    \n    translate([0, seat_depth/2 - 6, leg_height/2 - 4]) {\n        difference() {\n            cube([seat_width-12, 4, 4], center=true);\n            cube([seat_width-14, 4.1, 2], center=true);\n        }\n    }\n    \n    // Side support bars\n    translate([-seat_width/2 + 6, 0, leg_height/2 - 4]) {\n        rotate([0, 0, 90]) {\n            difference() {\n                cube([seat_depth-12, 4, 4], center=true);\n                cube([seat_depth-14, 4.1, 2], center=true);\n            }\n        }\n    }\n    \n    translate([seat_width/2 - 6, 0, leg_height/2 - 4]) {\n        rotate([0, 0, 90]) {\n            difference() {\n                cube([seat_depth-12, 4, 4], center=true);\n                cube([seat_depth-14, 4.1, 2], center=true);\n            }\n        }\n    }\n    \n    // Corner brackets\n    for(x = [-seat_width/2 + 6, seat_width/2 - 6]) {\n        for(y = [-seat_depth/2 + 6, seat_depth/2 - 6]) {\n            translate([x, y, leg_height - 4]) {\n                difference() {\n                    cube([8, 8, 4], center=true);\n                    translate([0, 0, 2]) \n                        cylinder(h=4.1, r=3, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Render the chair\nrei_chair();",
    "renders": true
  },
  {
    "toy": "zara",
    "openscad_code": "// Zara Chair Toy (Realistic Style, Medium Complexity)\n// Overall dimensions: ~60mm W x ~70mm D x ~90mm H\n\n// Parameters\nchair_width = 60;\nchair_depth = 70;\nchair_height = 90;\nseat_height = 45;\nleg_thickness = 4;\nback_thickness = 3;\ncushion_thickness = 8;\nframe_thickness = 2;\n\n// Chair legs module\nmodule chair_leg() {\n    difference() {\n        // Main leg\n        cube([leg_thickness, leg_thickness, seat_height - cushion_thickness], center=true);\n        \n        // Taper bottom slightly\n        translate([0, 0, -seat_height/2 + 2])\n            cube([leg_thickness + 1, leg_thickness + 1, 4], center=true);\n    }\n}\n\n// Seat cushion module\nmodule seat_cushion() {\n    // Main cushion\n    translate([0, 0, seat_height + cushion_thickness/2])\n        cube([chair_width - 10, chair_depth - 10, cushion_thickness], center=true);\n    \n    // Cushion piping detail\n    translate([0, 0, seat_height + cushion_thickness/2 + 0.5])\n        cube([chair_width - 8, chair_depth - 8, 1], center=true);\n}\n\n// Backrest slats module\nmodule back_slat(width, height) {\n    translate([0, 0, seat_height + cushion_thickness + height/2])\n        cube([width, back_thickness, height], center=true);\n}\n\n// Armrest module\nmodule armrest() {\n    // Vertical support\n    translate([chair_width/2 - 3, 0, seat_height + cushion_thickness/2 + 10])\n        cube([4, 4, 20], center=true);\n    \n    // Horizontal armrest\n    translate([chair_width/2 - 3, chair_depth/4, seat_height + cushion_thickness + 20])\n        cube([4, chair_depth/2, 4], center=true);\n}\n\n// Main chair assembly\nunion() {\n    // Seat frame\n    difference() {\n        // Main seat platform\n        translate([0, 0, seat_height/2])\n            cube([chair_width, chair_depth, frame_thickness], center=true);\n        \n        // Lightening holes\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i * 15, j * 15, seat_height/2])\n                    cylinder(h = frame_thickness + 1, r = 3, center=true, $fn=16);\n            }\n        }\n    }\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Backrest frame\n    translate([0, -chair_depth/2 + back_thickness/2, seat_height + cushion_thickness + 30])\n        cube([chair_width, back_thickness, 60], center=true);\n    \n    // Backrest slats\n    for(i = [-20, -10, 0, 10, 20]) {\n        back_slat(4, 50);\n    }\n    \n    // Legs\n    translate([-chair_width/2 + leg_thickness/2, -chair_depth/2 + leg_thickness/2, 0])\n        chair_leg();\n    translate([chair_width/2 - leg_thickness/2, -chair_depth/2 + leg_thickness/2, 0])\n        chair_leg();\n    translate([-chair_width/2 + leg_thickness/2, chair_depth/2 - leg_thickness/2, 0])\n        chair_leg();\n    translate([chair_width/2 - leg_thickness/2, chair_depth/2 - leg_thickness/2, 0])\n        chair_leg();\n    \n    // Back support stretcher\n    translate([0, -chair_depth/2 + back_thickness + 2, seat_height/2])\n        cube([chair_width - leg_thickness*2, 4, frame_thickness], center=true);\n    \n    // Side stretchers\n    translate([-chair_width/2 + leg_thickness + 2, 0, seat_height/3])\n        rotate([0, 90, 0])\n            cube([chair_depth - leg_thickness*2, 4, frame_thickness], center=true);\n    translate([chair_width/2 - leg_thickness - 2, 0, seat_height/3])\n        rotate([0, 90, 0])\n            cube([chair_depth - leg_thickness*2, 4, frame_thickness], center=true);\n    \n    // Armrests\n    armrest();\n    mirror([1, 0, 0])\n        armrest();\n}",
    "renders": true
  },
  {
    "toy": "raze",
    "openscad_code": "// Realistic toy raze (chair) - medium complexity\n// Overall size: ~100mm height x 60mm width x 65mm depth\n\n// Parameters\nleg_width = 8;\nseat_thickness = 6;\nback_height = 45;\nseat_width = 60;\nseat_depth = 65;\nback_thickness = 4;\nsupport_radius = 3;\n\n// Chair leg module with rounded edges\nmodule chair_leg(height) {\n    difference() {\n        // Main leg\n        translate([0, 0, height/2])\n            cube([leg_width, leg_width, height], center=true);\n        \n        // Chamfer bottom edges\n        translate([-leg_width/2+1, -leg_width/2+1, -height/2])\n            cube([2, 2, 2]);\n        translate([leg_width/2-1, -leg_width/2+1, -height/2])\n            cube([2, 2, 2]);\n        translate([-leg_width/2+1, leg_width/2-1, -height/2])\n            cube([2, 2, 2]);\n        translate([leg_width/2-1, leg_width/2-1, -height/2])\n            cube([2, 2, 2]);\n    }\n}\n\n// Seat cushion with rounded top\nmodule seat_cushion() {\n    union() {\n        // Base seat\n        translate([0, 0, seat_thickness/2])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Cushion top layer\n        translate([0, 0, seat_thickness + 3])\n            cube([seat_width - 6, seat_depth - 6, 6], center=true);\n        \n        // Cushion rounding\n        for (x = [-seat_width/2 + 10:5:seat_width/2 - 10])\n        for (y = [-seat_depth/2 + 10:5:seat_depth/2 - 10]) {\n            translate([x, y, seat_thickness + 7])\n                sphere(r=1.5, $fn=8);\n        }\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    difference() {\n        // Main back frame\n        translate([0, -seat_depth/2 + back_thickness/2, seat_thickness + back_height/2])\n            cube([seat_width, back_thickness, back_height], center=true);\n        \n        // Cutouts for slat appearance\n        for (y = [-seat_depth/2 + 8:8:seat_depth/2 - 12]) {\n            translate([0, y, seat_thickness + back_height/2])\n                cube([seat_width - 10, 3, back_height - 4], center=true);\n        }\n    }\n    \n    // Decorative top rail\n    translate([0, -seat_depth/2 + back_thickness/2, seat_thickness + back_height + 2])\n        cube([seat_width - 4, back_thickness + 2, 4], center=true);\n}\n\n// Cross support bar\nmodule support_bar(length, angle) {\n    rotate([0, angle, 0])\n        translate([0, 0, -length/2])\n            cylinder(h=length, r=support_radius, $fn=12);\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Legs\n    translate([seat_width/2 - leg_width/2, seat_depth/2 - leg_width/2, 0])\n        chair_leg(seat_thickness + 2);\n    translate([-seat_width/2 + leg_width/2, seat_depth/2 - leg_width/2, 0])\n        chair_leg(seat_thickness + 2);\n    translate([seat_width/2 - leg_width/2, -seat_depth/2 + leg_width/2, 0])\n        chair_leg(seat_thickness + 2);\n    translate([-seat_width/2 + leg_width/2, -seat_depth/2 + leg_width/2, 0])\n        chair_leg(seat_thickness + 2);\n    \n    // Side support bars\n    translate([seat_width/2 - leg_width/2, 0, seat_thickness/2])\n        support_bar(seat_depth - leg_width, 90);\n    translate([-seat_width/2 + leg_width/2, 0, seat_thickness/2])\n        support_bar(seat_depth - leg_width, 90);\n    \n    // Back support bars\n    translate([0, seat_depth/2 - leg_width/2 - back_thickness/2, seat_thickness/2])\n        support_bar(seat_width - leg_width, 0);\n    translate([0, -seat_depth/2 + leg_width/2 + back_thickness/2, seat_thickness/2])\n        support_bar(seat_width - leg_width, 0);\n    \n    // Backrest supports\n    translate([seat_width/2 - 15, -seat_depth/2 + back_thickness/2, seat_thickness + back_height/2 - 10])\n        cylinder(h=20, r=support_radius, $fn=12);\n    translate([-seat_width/2 + 15, -seat_depth/2 + back_thickness/2, seat_thickness + back_height/2 - 10])\n        cylinder(h=20, r=support_radius, $fn=12);\n}",
    "renders": true
  },
  {
    "toy": "lark",
    "openscad_code": "// Lark toy - medium complexity realistic style\n// Overall size approximately 100mm long\n\n$fn = 24;  // Good balance of detail and printability\n\n// Main body\nmodule body() {\n    // Main body capsule\n    translate([0, 0, 10])\n        difference() {\n            scale([1.2, 0.8, 0.6])\n                sphere(d = 30);\n            // Hollow interior\n            scale([1.1, 0.7, 0.5])\n                sphere(d = 30);\n        }\n}\n\n// Head with beak\nmodule head() {\n    union() {\n        // Head\n        translate([-20, 0, 20])\n            scale([0.8, 0.7, 0.7])\n                sphere(d = 20);\n        \n        // Beak\n        translate([-32, 0, 20])\n            rotate([0, -15, 0])\n                cylinder(h = 15, r1 = 4, r2 = 2);\n    }\n}\n\n// Wings with feather texture\nmodule wing(x_pos) {\n    difference() {\n        // Main wing\n        translate([x_pos, 0, 15])\n            rotate([0, 0, x_pos > 0 ? 30 : -30])\n                scale([1, 0.3, 0.1])\n                    sphere(d = 25);\n        \n        // Feather cutouts\n        for(i = [1:3]) {\n            translate([x_pos + (x_pos > 0 ? i*3 : -i*3), 0, 16])\n                rotate([0, 0, x_pos > 0 ? 30 : -30])\n                    scale([0.8, 0.2, 0.05])\n                        sphere(d = 20);\n        }\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    for(i = [0:2]) {\n        rotate([0, 0, i*10 - 10])\n            translate([15 + i*2, 0, 15 - i*2])\n                scale([0.8 + i*0.1, 0.1, 0.05])\n                    cube([20, 8, 2]);\n    }\n}\n\n// Legs with feet\nmodule leg(side) {\n    translate([5, side*8, 0])\n        union() {\n            // Upper leg\n            cylinder(h = 15, r = 2);\n            \n            // Lower leg\n            translate([0, 0, -15])\n                cylinder(h = 15, r = 1.5);\n            \n            // Foot\n            translate([0, side*2, -30])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r1 = 3, r2 = 2);\n            \n            // Toes\n            for(toe = [-1:1]) {\n                translate([toe*2, side*2 + toe*side, -30])\n                    rotate([90, 0, 0])\n                        cylinder(h = 4, r1 = 1, r2 = 0.5);\n            }\n        }\n}\n\n// Eyes\nmodule eye() {\n    translate([-25, 5, 22])\n        difference() {\n            sphere(d = 4);\n            sphere(d = 2);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Wings\n    wing(8);\n    wing(-8);\n    \n    // Tail\n    tail();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Eyes\n    eye();\n    mirror([0, 1, 0])\n        eye();\n}",
    "renders": true
  },
  {
    "toy": "korr",
    "openscad_code": "// Korr Toy Chair - Medium Complexity Realistic Style\n// Overall dimensions: 80mm width x 80mm depth x 90mm height\n\n// Seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, 40])\n            cube([70, 70, 15], center=true);\n        // Cushion rounding\n        translate([0, 0, 40])\n            cube([66, 66, 15], center=true);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Backrest frame\n    difference() {\n        // Main backrest panel\n        translate([0, 30, 75])\n            cube([70, 8, 50], center=true);\n        // Top rounding\n        translate([0, 30, 99])\n            sphere(d=70, $fn=32);\n    }\n    \n    // Vertical slats\n    for(x = [-20, -10, 0, 10, 20]) {\n        translate([x, 30, 75])\n            cube([6, 8, 40], center=true);\n    }\n}\n\n// Front legs\nmodule front_legs() {\n    for(x = [-25, 25]) {\n        // Main leg\n        translate([x, -25, 20])\n            cylinder(h=40, d=8, $fn=16);\n        // Leg foot\n        translate([x, -25, 0])\n            cylinder(h=4, d=12, $fn=16);\n    }\n}\n\n// Back legs\nmodule back_legs() {\n    for(x = [-25, 25]) {\n        // Main leg\n        translate([x, 25, 20])\n            cylinder(h=40, d=8, $fn=16);\n        // Leg foot\n        translate([x, 25, 0])\n            cylinder(h=4, d=12, $fn=16);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        // Armrest support\n        translate([side * 35, 0, 55])\n            cylinder(h=30, d=6, $fn=16);\n        // Armrest top\n        translate([side * 35, -15, 70])\n            cube([30, 30, 6], center=true);\n    }\n}\n\n// Cross support bars\nmodule supports() {\n    // Side supports\n    translate([35, 0, 10])\n        rotate([90, 0, 90])\n            cylinder(h=50, d=4, $fn=16);\n    translate([-35, 0, 10])\n        rotate([90, 0, 90])\n            cylinder(h=50, d=4, $fn=16);\n    \n    // Back support\n    translate([0, 25, 10])\n        rotate([90, 0, 0])\n            cylinder(h=70, d=4, $fn=16);\n}\n\n// Assembly\nunion() {\n    seat_cushion();\n    backrest();\n    front_legs();\n    back_legs();\n    armrests();\n    supports();\n}",
    "renders": true
  },
  {
    "toy": "nyx",
    "openscad_code": "// NYX Toy Item - Realistic Style Medium Complexity\n// 3D Printable Nightstand with Drawers\n\n// Overall dimensions\nwidth = 80;\ndepth = 60;\nheight = 100;\n\n// Wall thickness\nwall = 2;\n\n// Drawer dimensions\ndrawer_height = 25;\ndrawer_gap = 2;\n\n// Leg dimensions\nleg_size = 8;\nleg_height = 20;\n\n// Knob dimensions\nknob_radius = 3;\nknob_height = 4;\n\nmodule leg() {\n    difference() {\n        cube([leg_size, leg_size, leg_height], center=true);\n        translate([0, 0, -leg_height/2 + wall])\n            cube([leg_size-wall*2, leg_size-wall*2, wall], center=true);\n    }\n}\n\nmodule drawer_box(h) {\n    difference() {\n        cube([width-wall*2, depth-wall*2, h], center=true);\n        translate([0, 0, wall])\n            cube([width-wall*4, depth-wall*4, h-wall], center=true);\n    }\n}\n\nmodule drawer_front(h) {\n    difference() {\n        cube([width-wall*2, wall, h], center=true);\n        translate([0, -wall/2, 0])\n            cylinder(r=knob_radius, h=knob_height, center=true);\n    }\n}\n\nmodule nightstand() {\n    // Main body\n    difference() {\n        cube([width, depth, height], center=true);\n        translate([0, 0, wall])\n            cube([width-wall*2, depth-wall*2, height-wall], center=true);\n    }\n    \n    // Bottom shelf\n    translate([0, 0, -height/2 + wall + leg_height])\n        cube([width-wall*2, depth-wall*2, wall], center=true);\n    \n    // Top surface detail\n    translate([0, 0, height/2 - wall/2])\n        cube([width+wall*2, depth+wall*2, wall], center=true);\n    \n    // Legs\n    leg_offset_x = width/2 - leg_size/2 - wall;\n    leg_offset_y = depth/2 - leg_size/2 - wall;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * leg_offset_x, y * leg_offset_y, -height/2 + leg_height/2])\n                leg();\n        }\n    }\n    \n    // Drawers\n    drawer_y = -depth/2 + wall/2;\n    drawer_z_offset = -height/2 + leg_height + wall + drawer_height/2;\n    \n    for(i = [0:2]) {\n        // Drawer box\n        translate([0, drawer_y + drawer_gap, drawer_z_offset + i * (drawer_height + drawer_gap)])\n            drawer_box(drawer_height);\n        \n        // Drawer front\n        translate([0, drawer_y, drawer_z_offset + i * (drawer_height + drawer_gap)])\n            drawer_front(drawer_height);\n    }\n    \n    // Back panel\n    translate([0, depth/2 - wall/2, 0])\n        cube([width, wall, height-wall*2], center=true);\n}\n\n// Assembly\ntranslate([0, 0, height/2])\n    nightstand();",
    "renders": true
  },
  {
    "toy": "taro",
    "openscad_code": "// Taro Toy - Realistic Medium Complexity OpenSCAD Model\n// 3D printable taro root toy with toy-like features\n\n$fn = 36;\nwall_thickness = 2;\n\n// Main parameters\ntaro_length = 80;\ntaro_width = 50;\ntaro_height = 40;\nstem_length = 25;\nstem_diameter = 6;\n\nmodule taro_body() {\n    // Main root body - ellipsoid shape\n    difference() {\n        scale([1, 0.8, 0.6])\n        sphere(d = taro_width);\n        \n        // Remove bottom to create flat base for stability\n        translate([0, 0, -taro_height/2])\n        cube([taro_width*2, taro_width*2, taro_height], center = true);\n        \n        // Eye holes for toy character\n        translate([-taro_width/4, -5, taro_height/4])\n        sphere(d = 6);\n        translate([taro_width/4, -5, taro_height/4])\n        sphere(d = 6);\n        \n        // Mouth smile\n        translate([0, -8, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d1 = 12, d2 = 8, center = true);\n    }\n}\n\nmodule taro_stem() {\n    // Main stem\n    translate([0, 0, taro_height/2 + stem_length/2])\n    cylinder(h = stem_length, d = stem_diameter, center = true);\n    \n    // Stem leaves\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, stem_diameter/2 + 8, taro_height/2 + stem_length - 5])\n        rotate([45, 0, 0])\n        scale([1, 0.3, 1])\n        sphere(d = 20);\n    }\n}\n\nmodule toy_features() {\n    // Wheels for toy mobility\n    translate([-taro_width/3, -taro_width/2 - 8, -taro_height/2 + 4])\n    rotate([0, 90, 0])\n    cylinder(h = wall_thickness*2, d = 12);\n    \n    translate([taro_width/3, -taro_width/2 - 8, -taro_height/2 + 4])\n    rotate([0, 90, 0])\n    cylinder(h = wall_thickness*2, d = 12);\n    \n    // Pull string attachment\n    translate([0, -taro_width/2 - 12, -taro_height/2 + 8])\n    rotate([90, 0, 0])\n    cylinder(h = 8, d = 4);\n    \n    // Button nose\n    translate([0, -2, taro_height/8])\n    sphere(d = 4);\n}\n\nmodule surface_details() {\n    // Root-like texture rings\n    for(i = [1:6]) {\n        rotate([0, 0, i*30])\n        translate([0, 0, -taro_height/2 + i*6])\n        scale([1.2 - i*0.05, 1 - i*0.05, 0.3])\n        sphere(d = taro_width - i*3);\n    }\n    \n    // Small bumps for tactile interest\n    for(i = [0:8]) {\n        rotate([0, 0, i*40])\n        for(j = [0:3]) {\n            translate([taro_width/3 * cos(i*40), taro_width/3 * sin(i*40), -taro_height/2 + j*8])\n            sphere(d = 3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    taro_body();\n    taro_stem();\n    toy_features();\n    surface_details();\n}",
    "renders": true
  },
  {
    "toy": "rina",
    "openscad_code": "// Rina Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm W x 55mm D x 85mm H\n\n// Parameters for 3D printing\nwall_thickness = 2;\nseat_thickness = 3;\nleg_size = 5;\n\n// Main seat structure\nmodule seat() {\n    // Cushion\n    translate([0, 0, 40])\n    difference() {\n        // Main cushion\n        cube([50, 45, seat_thickness], center=true);\n        \n        // Cushion seam detail\n        translate([0, 0, seat_thickness/2 - 0.1])\n        cube([46, 41, 0.5], center=true);\n    }\n    \n    // Seat frame\n    translate([0, 0, 40 - seat_thickness/2 - wall_thickness/2])\n    cube([54, 49, wall_thickness], center=true);\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Back frame\n    translate([0, -22.5, 62.5])\n    cube([50, 5, 45], center=true);\n    \n    // Slats\n    for (i = [-20:10:20]) {\n        translate([i, -22.5, 62.5])\n        cube([8, 3, 40], center=true);\n    }\n    \n    // Top rail\n    translate([0, -22.5, 85])\n    cube([52, 6, 8], center=true);\n}\n\n// Leg assembly\nmodule legs() {\n    // Front legs\n    translate([-20, 20, 20])\n    cylinder(h=40, r=leg_size, center=true);\n    translate([20, 20, 20])\n    cylinder(h=40, r=leg_size, center=true);\n    \n    // Back legs\n    translate([-20, -20, 20])\n    cylinder(h=40, r=leg_size, center=true);\n    translate([20, -20, 20])\n    cylinder(h=40, r=leg_size, center=true);\n    \n    // Leg stretchers\n    translate([0, 20, 15])\n    cube([44, 3, 3], center=true);\n    translate([0, -20, 15])\n    cube([44, 3, 3], center=true);\n    translate([-20, 0, 15])\n    cube([3, 44, 3], center=true);\n    translate([20, 0, 15])\n    cube([3, 44, 3], center=true);\n}\n\n// Armrests\nmodule armrests() {\n    // Left arm\n    translate([-27.5, 0, 55])\n    union() {\n        // Support\n        cube([5, 40, 30], center=true);\n        // Rest\n        translate([0, 0, 15])\n        cube([8, 42, 5], center=true);\n    }\n    \n    // Right arm\n    translate([27.5, 0, 55])\n    union() {\n        // Support\n        cube([5, 40, 30], center=true);\n        // Rest\n        translate([0, 0, 15])\n        cube([8, 42, 5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    legs();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "flint",
    "openscad_code": "// Realistic toy flint (fire-starter) for 3D printing\n// Medium complexity, 100 mm long\n\n// Overall dimensions\nflint_len = 100;\nflint_wid = 30;\nflint_thk = 15;\n\n// Wall thickness for toy safety\nwall = 2;\n\n// Main flint body – rough stone shape\nmodule flint_body() {\n    difference() {\n        // Base rough block\n        scale([1, 0.9, 0.6])\n        sphere(d = flint_wid, $fn = 8);\n\n        // Chipped top surface\n        translate([0, 0, 5])\n        rotate([0, 0, 20])\n        cube([flint_wid*2, flint_wid*2, 10], center = true);\n\n        // Front chip\n        translate([flint_wid/2, 0, -2])\n        rotate([0, 45, 0])\n        cube([flint_wid*2, flint_wid*2, 10], center = true);\n\n        // Back chip\n        translate([-flint_wid/2, 0, -2])\n        rotate([0, -45, 0])\n        cube([flint_wid*2, flint_wid*2, 10], center = true);\n    }\n}\n\n// Handle grip for toy play\nmodule handle() {\n    // Cylindrical grip\n    translate([0, 0, -flint_thk/2 - 5])\n    cylinder(h = 15, d = 10, $fn = 16);\n\n    // Safety ring\n    translate([0, 0, -flint_thk/2 - 12])\n    torus(5, 2);\n}\n\n// Helper for torus\nmodule torus(major, minor) {\n    rotate_extrude($fn = 32)\n    translate([major, 0, 0])\n    circle(r = minor, $fn = 16);\n}\n\n// Spark ridges along top\nmodule spark_ridges(count = 6) {\n    for(i = [0:count-1]) {\n        translate([0, -flint_wid/2 + i*flint_wid/(count-1), flint_thk/2 - 1])\n        rotate([90, 0, 0])\n        cylinder(h = 3, d = 1.5, $fn = 8);\n    }\n}\n\n// Assemble toy flint\nunion() {\n    // Main flint shape\n    color([0.3, 0.3, 0.3])\n    flint_body();\n\n    // Handle attachment\n    color([0.1, 0.1, 0.1])\n    handle();\n\n    // Spark ridges\n    color([0.5, 0.5, 0.5])\n    spark_ridges();\n}",
    "renders": true
  },
  {
    "toy": "quill",
    "openscad_code": "// Toy Quill - Realistic style, medium complexity\n// Overall length: ~120mm, safe wall thickness: 2mm\n\n$fn = 30;\n\n// Main parameters\nquill_length = 120;\nshaft_diameter = 6;\nbarb_length = 25;\nbarb_width = 15;\nbarb_thickness = 2;\n\n// Shaft module\nmodule shaft() {\n    // Main hollow shaft\n    difference() {\n        cylinder(h = quill_length - barb_length, d = shaft_diameter, center = false);\n        translate([0, 0, 5])\n            cylinder(h = quill_length - barb_length - 10, d = shaft_diameter - 4, center = false);\n    }\n    \n    // Tip - rounded\n    translate([0, 0, quill_length - barb_length])\n        difference() {\n            sphere(d = shaft_diameter);\n            translate([0, 0, -shaft_diameter/2])\n                cube([shaft_diameter*2, shaft_diameter*2, shaft_diameter], center = true);\n        }\n}\n\n// Barb module with toy-safe edges\nmodule barb() {\n    // Main barb shape\n    difference() {\n        // Outer barb\n        union() {\n            // Central oval\n            scale([1.5, 1, 1])\n                cylinder(h = barb_thickness, d = barb_width, center = true);\n            \n            // Side feathers\n            for (i = [0:1]) {\n                mirror([i == 0 ? 1 : 0, 0, 0])\n                    translate([barb_width/2 - 3, 0, 0])\n                        rotate([0, 0, 30])\n                            scale([1.2, 0.6, 1])\n                                cylinder(h = barb_thickness, d = barb_width/2, center = true);\n            }\n            \n            // Top feather\n            translate([0, barb_width/2 - 2, 0])\n                rotate([0, 0, -45])\n                    scale([0.8, 0.4, 1])\n                        cylinder(h = barb_thickness, d = barb_width/2, center = true);\n        }\n        \n        // Hollow center\n        scale([1.2, 0.8, 1.1])\n            cylinder(h = barb_thickness + 1, d = barb_width/2, center = true);\n    }\n}\n\n// Connection joint\nmodule joint() {\n    // Cylindrical connector\n    difference() {\n        cylinder(h = 6, d = shaft_diameter + 2, center = true);\n        cylinder(h = 7, d = shaft_diameter - 1, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, -quill_length/2])\n    rotate([90, 0, 0])\n        union() {\n            // Shaft\n            shaft();\n            \n            // Joint at barb connection\n            translate([0, 0, quill_length - barb_length - 3])\n                joint();\n            \n            // Barb assembly\n            translate([0, 0, quill_length - barb_length])\n                barb();\n            \n            // Reinforcement ring\n            translate([0, 0, quill_length - barb_length - 8])\n                difference() {\n                    cylinder(h = 3, d = shaft_diameter + 4, center = true);\n                    cylinder(h = 4, d = shaft_diameter, center = true);\n                }\n        }\n\n// Toy grip texture rings\nmodule grip_ring() {\n    difference() {\n        cylinder(h = 3, d = shaft_diameter + 1, center = true);\n        cylinder(h = 4, d = shaft_diameter - 1, center = true);\n    }\n}\n\n// Add grip rings for toy functionality\ntranslate([0, 0, -quill_length/2])\n    rotate([90, 0, 0])\n        for (i = [0:2]) {\n            translate([0, 0, 20 + i * 25])\n                grip_ring();\n        }",
    "renders": true
  },
  {
    "toy": "kato",
    "openscad_code": "// Kato toy table with realistic proportions and medium complexity\n// Overall dimensions: 100mm x 60mm x 75mm (L x W x H)\n\n// Main tabletop with rounded edges\nmodule tabletop() {\n    difference() {\n        // Main tabletop slab\n        translate([0, 0, 72]) \n            minkowski() {\n                cube([100, 60, 6], center=true);\n                sphere(2);\n            }\n        \n        // Rounded underside\n        translate([0, 0, 68]) \n            cube([96, 56, 8], center=true);\n    }\n}\n\n// Decorative edge trim\nmodule edge_trim() {\n    for(x = [-48, 48]) {\n        translate([x, 0, 69]) \n            cube([4, 64, 4], center=true);\n    }\n    for(y = [-28, 28]) {\n        translate([0, y, 69]) \n            cube([104, 4, 4], center=true);\n    }\n}\n\n// Tapered square leg\nmodule leg(offset_x, offset_y) {\n    difference() {\n        // Tapered leg body\n        translate([offset_x, offset_y, 37.5]) {\n            hull() {\n                translate([0, 0, -35.5])\n                    cube([6, 6, 2], center=true);\n                translate([0, 0, 35.5])\n                    cube([4, 4, 2], center=true);\n            }\n        }\n        \n        // Hollow core for material saving\n        translate([offset_x, offset_y, 37.5])\n            cylinder(h=71, r=1.5, center=true);\n    }\n}\n\n// Support stretcher between legs\nmodule stretcher(x1, y1, x2, y2, height) {\n    angle = atan2(y2-y1, x2-x1);\n    length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n    \n    translate([(x1+x2)/2, (y1+y2)/2, height])\n        rotate([0, 0, angle])\n            cube([length + 4, 3, 3], center=true);\n}\n\n// Lower shelf with rounded edges\nmodule lower_shelf() {\n    translate([0, 0, 25]) {\n        difference() {\n            minkowski() {\n                cube([90, 50, 4], center=true);\n                sphere(1.5);\n            }\n            translate([0, 0, -2])\n                cube([86, 46, 6], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    tabletop();\n    edge_trim();\n    \n    // Four legs\n    leg(-45, -25);\n    leg(45, -25);\n    leg(-45, 25);\n    leg(45, 25);\n    \n    // Side stretchers\n    stretcher(-45, -25, 45, -25, 50);\n    stretcher(-45, 25, 45, 25, 50);\n    stretcher(-45, -25, -45, 25, 50);\n    stretcher(45, -25, 45, 25, 50);\n    \n    // Lower shelf\n    lower_shelf();\n}",
    "renders": true
  },
  {
    "toy": "cygnus",
    "openscad_code": "// Cygnus toy - realistic style, medium complexity\n// Size: ~120mm length, ~70mm height, ~50mm width\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main body module\nmodule body() {\n    // Central body core\n    translate([0, 0, 15]) {\n        difference() {\n            // Main ellipsoid body\n            scale([1, 0.6, 0.8]) sphere(d=40, $fn=32);\n            // Hollow cavity\n            translate([0, 0, -5]) scale([0.8, 0.4, 0.6]) sphere(d=38, $fn=32);\n        }\n    }\n    \n    // Rounded chest\n    translate([15, 0, 12]) {\n        difference() {\n            scale([0.7, 0.5, 0.6]) sphere(d=30, $fn=32);\n            translate([0, 0, -2]) scale([0.6, 0.4, 0.5]) sphere(d=28, $fn=32);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    translate([-25, 0, 35]) rotate([0, 10, 0]) {\n        difference() {\n            // Main head sphere\n            sphere(d=20, $fn=32);\n            // Hollow cavity\n            translate([0, 0, -2]) sphere(d=16, $fn=32);\n        }\n        \n        // Beak\n        translate([-12, 0, -2]) {\n            difference() {\n                rotate([0, -20, 0]) scale([2, 0.4, 0.4]) cylinder(h=15, d=8, $fn=16);\n                translate([0, 0, 2]) rotate([0, -20, 0]) scale([1.8, 0.3, 0.3]) cylinder(h=14, d=6, $fn=16);\n            }\n        }\n        \n        // Eye sockets\n        for(x=[-2, 2]) {\n            translate([-2, x, 3]) sphere(d=4, $fn=8);\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        translate([-5, 20, 25]) rotate([0, 10, -20]) {\n            difference() {\n                // Main wing shape\n                scale([0.3, 2, 1]) sphere(d=40, $fn=32);\n                // Hollow cavity\n                translate([0, -5, 0]) scale([0.25, 1.8, 0.9]) sphere(d=38, $fn=32);\n                \n                // Feather details\n                for(i=[0:3]) {\n                    translate([0, -8-i*3, -2+i]) \n                        rotate([0, 5*i, 0])\n                        scale([0.8, 0.9, 0.9])\n                        sphere(d=8, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([20, 0, 25]) rotate([0, -15, 0]) {\n        difference() {\n            // Main tail\n            scale([1.5, 0.3, 0.5]) sphere(d=30, $fn=32);\n            // Hollow cavity\n            translate([2, 0, 0]) scale([1.4, 0.25, 0.4]) sphere(d=28, $fn=32);\n        }\n    }\n}\n\n// Neck connector\nmodule neck() {\n    translate([-15, 0, 20]) {\n        rotate([0, -20, 0]) {\n            difference() {\n                cylinder(h=20, d1=12, d2=8, $fn=16);\n                translate([0, 0, 1]) cylinder(h=18, d1=10, d2=6, $fn=16);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([5, side*8, 0]) {\n        // Upper leg\n        translate([0, 0, 5]) {\n            difference() {\n                cylinder(h=15, d=8, $fn=12);\n                translate([0, 0, 1]) cylinder(h=13, d=6, $fn=12);\n            }\n        }\n        \n        // Foot\n        translate([0, 0, 0]) {\n            difference() {\n                scale([2, 1, 0.5]) sphere(d=12, $fn=16);\n                translate([0, 0, 2]) scale([1.8, 0.8, 0.4]) sphere(d=10, $fn=16);\n            }\n        }\n        \n        // Toes\n        for(i=[-1:1]) {\n            translate([i*4, side*3, -2]) {\n                scale([0.3, 0.3, 1]) sphere(d=6, $fn=8);\n            }\n        }\n    }\n}\n\n// Base stand for stability\nmodule base() {\n    translate([0, 0, -2]) {\n        difference() {\n            cylinder(h=4, d=60, $fn=32);\n            cylinder(h=4.5, d=56, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    neck();\n    head();\n    wing(1);\n    wing(-1);\n    tail();\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "toy": "riot",
    "openscad_code": "// Riot Shield Toy - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm tall x 60mm wide x 20mm deep\n\n// Main shield body\nmodule shield_body() {\n    difference() {\n        // Outer curved shape\n        translate([0, 0, 50]) scale([1, 0.8, 1]) sphere(d=100, $fn=64);\n        \n        // Remove back half\n        translate([-60, 0, 50]) cube([120, 100, 100]);\n        \n        // Taper bottom\n        translate([0, 0, -10]) cylinder(h=60, d1=80, d2=100, $fn=64);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    // Main handle bar\n    translate([0, -35, 30]) rotate([90, 0, 0]) \n        cylinder(h=50, d=8, $fn=32);\n    \n    // Handle supports\n    for(i = [-1, 1]) {\n        translate([i * 25, -35, 30]) rotate([90, 0, 0])\n            cylinder(h=20, d=8, $fn=32);\n    }\n    \n    // Grip texture rings\n    for(pos = [-20, -12, -4, 4, 12, 20]) {\n        translate([pos, -35, 30]) rotate([90, 0, 0])\n            cylinder(h=2, d=10, $fn=32);\n    }\n}\n\n// POLICE lettering\nmodule lettering() {\n    // P\n    translate([-30, 15, 2]) cube([4, 20, 2]);\n    translate([-30, 15, 2]) cube([10, 4, 2]);\n    translate([-30, 21, 2]) cube([10, 4, 2]);\n    translate([-26, 19, 2]) cube([4, 2, 2]);\n    \n    // O\n    translate([-20, 15, 2]) difference() {\n        cube([12, 12, 2]);\n        translate([2, 2, -1]) cube([8, 8, 4]);\n    }\n    \n    // L\n    translate([-5, 15, 2]) cube([4, 12, 2]);\n    translate([-5, 15, 2]) cube([10, 4, 2]);\n    \n    // I\n    translate([10, 15, 2]) cube([4, 12, 2]);\n    \n    // C\n    translate([20, 15, 2]) difference() {\n        cube([12, 12, 2]);\n        translate([8, 2, -1]) cube([4, 8, 4]);\n    }\n    \n    // E\n    translate([35, 15, 2]) cube([4, 12, 2]);\n    translate([35, 15, 2]) cube([10, 4, 2]);\n    translate([35, 19, 2]) cube([10, 4, 2]);\n    translate([35, 23, 2]) cube([10, 4, 2]);\n}\n\n// Window viewport\nmodule viewport() {\n    difference() {\n        // Window frame\n        translate([0, 0, 60]) scale([1, 0.6, 1]) sphere(d=40, $fn=64);\n        \n        // Window opening\n        translate([0, 0, 61]) scale([1, 0.6, 1]) sphere(d=36, $fn=64);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    // Vertical ribs\n    for(x = [-40, -20, 0, 20, 40]) {\n        translate([x, 0, 50]) cube([2, 10, 80]);\n    }\n    \n    // Horizontal ribs\n    for(z = [20, 40, 60, 80]) {\n        translate([0, 0, z]) cube([80, 2, 2]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Shield body with wall thickness\n    difference() {\n        shield_body();\n        translate([0, -10, 50]) scale([0.92, 0.72, 0.92]) sphere(d=100, $fn=64);\n    }\n    \n    // Handle\n    handle();\n    \n    // Viewport\n    viewport();\n    \n    // Lettering\n    lettering();\n    \n    // Ribs on back\n    ribs();\n}",
    "renders": true
  },
  {
    "toy": "titan",
    "openscad_code": "// Titan Toy Couch - Realistic Style Medium Complexity\n// Dimensions: 100mm wide x 40mm deep x 45mm high\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size[0]-radius*2])\n            for(dy = [0, size[1]-radius*2])\n                for(dz = [0, size[2]-radius*2])\n                    translate([dx+radius, dy+radius, dz+radius])\n                        sphere(r=radius, $fn=12);\n    }\n}\n\nmodule couch_back() {\n    // Main backrest\n    difference() {\n        translate([0, -37.5, 22.5]) \n            rounded_cube([100, 5, 40], 3);\n        \n        // Decorative grooves\n        for(i = [1:3]) {\n            translate([i*25-37.5, -41, 35])\n                cube([2, 10, 20]);\n        }\n    }\n}\n\nmodule couch_base() {\n    // Seat platform\n    translate([0, 0, 5])\n        rounded_cube([100, 40, 10], 3);\n    \n    // Cushions\n    for(x = [-30, -10, 10, 30]) {\n        translate([x, 0, 16])\n            rounded_cube([22, 36, 8], 2);\n    }\n}\n\nmodule armrest(side) {\n    // Armrest support\n    translate([side*47.5, 0, 10])\n        rounded_cube([5, 36, 25], 3);\n    \n    // Armrest pad\n    translate([side*47.5, 0, 32.5])\n        rounded_cube([8, 36, 5], 2);\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side*45, 18, 0])\n            cylinder(h=6, r=2.5, $fn=8);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([side*45, -18, 0])\n            cylinder(h=6, r=2.5, $fn=8);\n    }\n    \n    // Center support\n    translate([0, 0, 0])\n        cylinder(h=6, r=3, $fn=8);\n}\n\nmodule couch() {\n    union() {\n        couch_base();\n        couch_back();\n        \n        armrest(1);\n        armrest(-1);\n        \n        legs();\n        \n        // Toy safety - rounded edges on bottom\n        translate([0, 0, -1])\n            rounded_cube([102, 42, 2], 3);\n    }\n}\n\n// Main assembly\ncouch();",
    "renders": true
  },
  {
    "toy": "lira",
    "openscad_code": "// LIRA Toy Chair - Realistic Medium Complexity\n// 3D printable toy chair with realistic proportions and structural details\n\n// Overall dimensions (mm)\nchair_width = 80;\nchair_depth = 70;\nchair_height = 100;\nseat_height = 55;\nbackrest_height = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chair_leg(x, y) {\n    // Main leg structure\n    translate([x, y, 0]) {\n        difference() {\n            cylinder(h=seat_height, r=4, $fn=16);\n            translate([0, 0, wall]) \n                cylinder(h=seat_height-wall, r=4-wall, $fn=16);\n        }\n        // Leg base pad\n        translate([0, 0, -1])\n            cylinder(h=2, r=5, $fn=16);\n    }\n}\n\nmodule backrest_spindle(x, z) {\n    // Vertical spindle for backrest\n    translate([x, chair_depth/2 - wall, z]) {\n        difference() {\n            cylinder(h=backrest_height - z, r=2, $fn=12);\n            translate([0, 0, wall])\n                cylinder(h=backrest_height - z - wall, r=2-wall, $fn=12);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat with cushion detail\n    translate([0, 0, seat_height]) {\n        // Seat base\n        difference() {\n            cube([chair_width, chair_depth, wall*2], center=true);\n            translate([0, 0, wall])\n                cube([chair_width-wall*2, chair_depth-wall*2, wall*2], center=true);\n        }\n        \n        // Cushion top\n        translate([0, 0, wall*2])\n            difference() {\n                cube([chair_width-4, chair_depth-4, 4], center=true);\n                translate([0, 0, 1])\n                    cube([chair_width-8, chair_depth-8, 4], center=true);\n            }\n        \n        // Cushion tufting detail\n        for(i = [-1, 1])\n            for(j = [-1, 1])\n                translate([i*20, j*20, wall*2+4])\n                    sphere(r=1.5, $fn=16);\n    }\n}\n\nmodule backrest_frame() {\n    // Backrest outer frame\n    translate([0, chair_depth/2 - wall, seat_height+wall*2]) {\n        // Top rail\n        difference() {\n            cube([chair_width, wall*2, backrest_height], center=true);\n            translate([0, 0, wall])\n                cube([chair_width-wall*2, wall, backrest_height-wall], center=true);\n        }\n        \n        // Side rails\n        for(x = [-chair_width/2+wall, chair_width/2-wall]) {\n            difference() {\n                translate([x, 0, backrest_height/2])\n                    cube([wall*2, wall*2, backrest_height], center=true);\n                translate([x, 0, backrest_height/2])\n                    cube([wall, wall, backrest_height-wall], center=true);\n            }\n        }\n        \n        // Spindles\n        for(i = [-2:2])\n            if(i != 0)\n                backrest_spindle(i * 15, 0);\n    }\n}\n\nmodule stretchers() {\n    // Side stretchers between legs\n    translate([0, 0, seat_height/2]) {\n        // Front-back stretchers\n        for(x = [-chair_width/2+wall, chair_width/2-wall]) {\n            difference() {\n                rotate([90, 0, 0])\n                    cylinder(h=chair_depth-wall*2, r=2, $fn=12);\n                translate([0, 0, wall])\n                    rotate([90, 0, 0])\n                        cylinder(h=chair_depth-wall*2, r=1, $fn=12);\n            }\n        }\n        \n        // Left-right stretchers\n        for(y = [-chair_depth/2+wall, chair_depth/2-wall]) {\n            difference() {\n                rotate([0, 90, 0])\n                    cylinder(h=chair_width-wall*2, r=2, $fn=12);\n                translate([0, 0, wall])\n                    rotate([0, 90, 0])\n                        cylinder(h=chair_width-wall*2, r=1, $fn=12);\n            }\n        }\n    }\n}\n\n// Assemble the chair\nunion() {\n    // Four legs\n    chair_leg(-chair_width/2+wall, -chair_depth/2+wall);\n    chair_leg(chair_width/2-wall, -chair_depth/2+wall);\n    chair_leg(-chair_width/2+wall, chair_depth/2-wall);\n    chair_leg(chair_width/2-wall, chair_depth/2-wall);\n    \n    // Structural stretchers\n    stretchers();\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Backrest assembly\n    backrest_frame();\n}",
    "renders": true
  },
  {
    "toy": "drake",
    "openscad_code": "// Medium-complexity realistic toy drake\n// Overall length ~120 mm, height ~65 mm, wing span ~90 mm\n// Wall thickness 2 mm throughout\n\nmodule body_shell() {\n    // Main torso – egg-like shape made from stacked cylinders\n    for (i = [0:5]) {\n        h = 2;\n        r = 18 - i * 2.5;\n        translate([0, 0, i * h])\n            cylinder(h = h, r1 = r, r2 = r - 2, $fn = 24);\n    }\n}\n\nmodule neck() {\n    // Curved neck using rotated cylinders\n    for (a = [0:15:60]) {\n        translate([0, 0, 10])\n        rotate([0, -a, 0])\n        translate([0, 0, a * 0.4])\n            cylinder(h = 4, r1 = 6 - a * 0.05, r2 = 6 - (a + 15) * 0.05, $fn = 12);\n    }\n}\n\nmodule head() {\n    // Snout\n    translate([-25, 0, 60])\n    rotate([0, -30, 0])\n        cylinder(h = 20, r1 = 8, r2 = 4, $fn = 12);\n    // Back of head\n    translate([-12, 0, 62])\n        sphere(r = 9, $fn = 20);\n}\n\nmodule eye() {\n    // Eye socket\n    difference() {\n        sphere(r = 3, $fn = 12);\n        translate([0, 0, 2])\n            sphere(r = 3.2, $fn = 12);\n    }\n    // Pupil\n    translate([0, 0, 1.9])\n        sphere(r = 1.5, $fn = 8);\n}\n\nmodule tail() {\n    // Three-segment tail\n    for (i = [0:2]) {\n        translate([20 + i * 8, 0, 10 - i * 3])\n        rotate([0, i * 10, 0])\n            cylinder(h = 8, r1 = 7 - i * 2, r2 = 5 - i * 2, $fn = 12);\n    }\n}\n\nmodule wing() {\n    // Main wing panel\n    difference() {\n        translate([0, 0, 0])\n            cube([30, 2, 20]);\n        // Cutouts for feather gaps\n        for (y = [-8, -4, 0, 4, 8]) {\n            translate([15, y, 10])\n                cube([30, 1.2, 12], center = true);\n        }\n    }\n    // Wing root cylinder\n    translate([-15, 0, 0])\n        cylinder(h = 10, r = 3, $fn = 12);\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(h = 12, r = 4, $fn = 12);\n    // Lower leg\n    translate([0, 0, -12])\n        cylinder(h = 10, r = 3, $fn = 12);\n    // Foot\n    translate([0, -6, -22])\n        cube([12, 8, 3]);\n    // Toes\n    for (x = [-4, 0, 4]) {\n        translate([x, -10, -22])\n            cube([3, 4, 2]);\n    }\n}\n\nmodule drake() {\n    // Assemble body parts\n    union() {\n        body_shell();\n        neck();\n        head();\n        tail();\n        \n        // Left wing\n        translate([5, -25, 35])\n        rotate([0, 10, 30])\n            wing();\n        \n        // Right wing\n        mirror([0, 1, 0])\n        translate([5, -25, 35])\n        rotate([0, 10, 30])\n            wing();\n        \n        // Left eye\n        translate([-20, -5, 63])\n            eye();\n        \n        // Right eye\n        translate([-20, 5, 63])\n            eye();\n        \n        // Front left leg\n        translate([8, -10, -10])\n            leg();\n        \n        // Front right leg\n        translate([8, 10, -10])\n            leg();\n        \n        // Rear left leg\n        translate([-8, -10, -10])\n            leg();\n        \n        // Rear right leg\n        translate([-8, 10, -10])\n            leg();\n    }\n}\n\n// Create the toy\ndrake();",
    "renders": true
  },
  {
    "toy": "zola",
    "openscad_code": "// Zola Rocking Chair Toy - Realistic Style, Medium Complexity\n// Overall dimensions: 90mm width x 75mm depth x 110mm height\n\n// Parameters\nseat_width = 80;\nseat_depth = 55;\nseat_thickness = 4;\nback_height = 55;\narmrest_height = 30;\nrocker_radius = 150;\nrocker_thickness = 12;\nleg_height = 40;\npost_diameter = 8;\n\nmodule rocker_base() {\n    // Left rocker\n    translate([-seat_width/2 + rocker_thickness/2, 0, rocker_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=seat_depth + 20, r=rocker_radius, center=true, $fn=60);\n    \n    // Right rocker\n    translate([seat_width/2 - rocker_thickness/2, 0, rocker_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=seat_depth + 20, r=rocker_radius, center=true, $fn=60);\n    \n    // Connecting support beams\n    for (y = [-seat_depth/3, seat_depth/3]) {\n        translate([0, y, rocker_thickness])\n            cube([seat_width - rocker_thickness, 8, rocker_thickness], center=true);\n    }\n}\n\nmodule seat() {\n    // Main seat platform\n    translate([0, 0, leg_height + rocker_thickness + seat_thickness/2])\n        cube([seat_width - 20, seat_depth, seat_thickness], center=true);\n    \n    // Seat cushion\n    translate([0, 0, leg_height + rocker_thickness + seat_thickness + 4])\n        cube([seat_width - 24, seat_depth - 10, 8], center=true);\n    \n    // Cushion tufts\n    for (x = [-20, 0, 20]) {\n        for (y = [-15, 0, 15]) {\n            translate([x, y, leg_height + rocker_thickness + seat_thickness + 9])\n                sphere(r=2, $fn=16);\n        }\n    }\n}\n\nmodule backrest() {\n    // Main backrest frame\n    translate([0, -seat_depth/2 + 5, leg_height + rocker_thickness + seat_thickness + back_height/2])\n        cube([seat_width - 20, 6, back_height], center=true);\n    \n    // Vertical slats\n    for (x = [-25, -12.5, 0, 12.5, 25]) {\n        translate([x, -seat_depth/2 + 5, leg_height + rocker_thickness + seat_thickness + back_height/2])\n            cube([6, 4, back_height - 10], center=true);\n    }\n    \n    // Top rail\n    translate([0, -seat_depth/2 + 5, leg_height + rocker_thickness + seat_thickness + back_height - 3])\n        cube([seat_width - 15, 8, 6], center=true);\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 + 5, 0, leg_height + rocker_thickness + seat_thickness + armrest_height/2]) {\n        // Support post\n        rotate([0, 0, 90])\n            cylinder(h=armrest_height, r=post_diameter/2, center=true, $fn=16);\n        \n        // Armrest pad\n        translate([0, seat_depth/4, armrest_height/2 - 2])\n            cube([40, 8, 6], center=true);\n    }\n    \n    // Right armrest\n    translate([seat_width/2 - 5, 0, leg_height + rocker_thickness + seat_thickness + armrest_height/2]) {\n        rotate([0, 0, 90])\n            cylinder(h=armrest_height, r=post_diameter/2, center=true, $fn=16);\n        \n        translate([0, seat_depth/4, armrest_height/2 - 2])\n            cube([40, 8, 6], center=true);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for (x = [-seat_width/2 + 15, seat_width/2 - 15]) {\n        translate([x, seat_depth/2 - 10, leg_height/2 + rocker_thickness])\n            cylinder(h=leg_height, r=post_diameter/2, center=true, $fn=16);\n    }\n    \n    // Back legs\n    for (x = [-seat_width/2 + 15, seat_width/2 - 15]) {\n        translate([x, -seat_depth/2 + 10, leg_height/2 + rocker_thickness])\n            cylinder(h=leg_height, r=post_diameter/2, center=true, $fn=16);\n    }\n}\n\n// Assemble the chair\nunion() {\n    rocker_base();\n    legs();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "fenn",
    "openscad_code": "// Fenn Toy Rocking Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 110mm width x 85mm depth x 120mm height\n\n// Parameters\nwall_thickness = 2;\nseat_width = 60;\nseat_depth = 45;\nseat_thickness = 4;\nback_height = 60;\nback_thickness = 3;\narmrest_height = 35;\nleg_thickness = 4;\nrocker_radius = 120;\nrocker_thickness = 6;\n\nmodule chair_frame() {\n    // Seat platform\n    translate([0, 0, seat_thickness/2])\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n    \n    // Backrest\n    translate([0, -seat_depth/2 + back_thickness/2, seat_thickness + back_height/2])\n        cube([seat_width - 10, back_thickness, back_height], center=true);\n    \n    // Backrest slats\n    for(i = [-20:10:20]) {\n        translate([i, -seat_depth/2 + back_thickness/2, seat_thickness + back_height/2])\n            cube([6, back_thickness - 1, back_height - 10], center=true);\n    }\n    \n    // Armrests\n    // Left armrest\n    translate([-seat_width/2 - leg_thickness/2, 0, seat_thickness + armrest_height/2])\n        cube([leg_thickness, seat_depth - 10, armrest_height], center=true);\n    translate([-seat_width/2 - leg_thickness, 0, seat_thickness + armrest_height])\n        cube([leg_thickness*3, seat_depth - 15, leg_thickness], center=true);\n    \n    // Right armrest\n    translate([seat_width/2 + leg_thickness/2, 0, seat_thickness + armrest_height/2])\n        cube([leg_thickness, seat_depth - 10, armrest_height], center=true);\n    translate([seat_width/2 + leg_thickness, 0, seat_thickness + armrest_height])\n        cube([leg_thickness*3, seat_depth - 15, leg_thickness], center=true);\n}\n\nmodule rockers() {\n    // Left rocker\n    translate([-seat_width/2 + 10, 0, -rocker_thickness/2])\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h=seat_depth - 20, r=rocker_radius, center=true);\n            translate([0, 0, -rocker_thickness/2 - 1])\n                cube([rocker_radius*2, seat_depth - 20, rocker_thickness], center=true);\n        }\n    \n    // Right rocker\n    translate([seat_width/2 - 10, 0, -rocker_thickness/2])\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h=seat_depth - 20, r=rocker_radius, center=true);\n            translate([0, 0, -rocker_thickness/2 - 1])\n                cube([rocker_radius*2, seat_depth - 20, rocker_thickness], center=true);\n        }\n}\n\nmodule support_legs() {\n    // Front left leg\n    translate([-seat_width/2 + leg_thickness, seat_depth/2 - leg_thickness, seat_thickness/2])\n        cube([leg_thickness, leg_thickness, rocker_radius/2 - seat_thickness/2]);\n    \n    // Front right leg\n    translate([seat_width/2 - leg_thickness, seat_depth/2 - leg_thickness, seat_thickness/2])\n        cube([leg_thickness, leg_thickness, rocker_radius/2 - seat_thickness/2]);\n    \n    // Back left leg\n    translate([-seat_width/2 + leg_thickness, -seat_depth/2 + leg_thickness, seat_thickness/2])\n        cube([leg_thickness, leg_thickness, rocker_radius/2 - seat_thickness/2]);\n    \n    // Back right leg\n    translate([seat_width/2 - leg_thickness, -seat_depth/2 + leg_thickness, seat_thickness/2])\n        cube([leg_thickness, leg_thickness, rocker_radius/2 - seat_thickness/2]);\n}\n\nmodule cushion() {\n    // Seat cushion\n    translate([0, 0, seat_thickness + 2])\n        cube([seat_width - 8, seat_depth - 8, 6], center=true);\n    \n    // Back cushion\n    translate([0, -seat_depth/2 + back_thickness + 3, seat_thickness + back_height/2 + 3])\n        cube([seat_width - 20, back_thickness + 6, back_height - 15], center=true);\n}\n\nmodule decorative_elements() {\n    // Rocker connectors\n    for(y = [-seat_depth/2 + 10:15:seat_depth/2 - 10]) {\n        translate([0, y, -rocker_thickness/2])\n            cube([seat_width - 20, 5, rocker_thickness], center=true);\n    }\n    \n    // Armrest supports\n    // Left support\n    translate([-seat_width/2 - leg_thickness/2, seat_depth/4, seat_thickness + armrest_height/2])\n        rotate([0, 0, -30])\n            cube([leg_thickness*2, 3, armrest_height/2], center=true);\n    \n    // Right support\n    translate([seat_width/2 + leg_thickness/2, seat_depth/4, seat_thickness + armrest_height/2])\n        rotate([0, 0, 30])\n            cube([leg_thickness*2, 3, armrest_height/2], center=true);\n}\n\n// Main assembly\nunion() {\n    chair_frame();\n    rockers();\n    support_legs();\n    cushion();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "toy": "vira",
    "openscad_code": "// Toy Vira Chair - Realistic style, medium complexity\n// Overall dimensions: ~100mm tall, ~80mm wide, ~90mm deep\n\n$fn = 32;\n\n// Main chair module\nmodule toy_vira_chair() {\n    // Seat cushion\n    translate([0, 0, 45]) {\n        difference() {\n            // Main cushion\n            cube([70, 75, 15], center = true);\n            // Rounded edges\n            translate([0, 0, 2]) {\n                minkowski() {\n                    cube([66, 71, 11], center = true);\n                    sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Backrest\n    translate([0, -30, 60]) {\n        difference() {\n            // Main backrest\n            cube([65, 8, 35], center = true);\n            // Top curve\n            translate([0, 0, 15]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 63, r = 18, center = true);\n                }\n            }\n            // Bottom curve\n            translate([0, 0, -15]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 63, r = 18, center = true);\n                }\n            }\n        }\n    }\n    \n    // Backrest support posts (4 posts)\n    for(x = [-25, 25]) {\n        translate([x, -30, 52.5]) {\n            cylinder(h = 25, r = 3);\n        }\n    }\n    \n    // Legs (4 legs with stretchers)\n    // Front legs\n    for(x = [-30, 30]) {\n        for(y = [30, -30]) {\n            translate([x, y, 22.5]) {\n                cylinder(h = 45, r = 4);\n            }\n        }\n    }\n    \n    // Side stretchers\n    translate([0, 30, 15]) {\n        cube([70, 4, 4], center = true);\n    }\n    translate([0, -30, 15]) {\n        cube([70, 4, 4], center = true);\n    }\n    \n    // Front stretcher\n    translate([30, 0, 15]) {\n        rotate([0, 90, 0]) {\n            cube([65, 4, 4], center = true);\n        }\n    }\n    \n    // Back stretcher\n    translate([-30, 0, 15]) {\n        rotate([0, 90, 0]) {\n            cube([65, 4, 4], center = true);\n        }\n    }\n    \n    // Armrests\n    // Left armrest\n    translate([-35, 0, 55]) {\n        difference() {\n            cube([10, 70, 20], center = true);\n            // Rounded top\n            translate([0, 0, 10]) {\n                minkowski() {\n                    cube([6, 66, 16], center = true);\n                    sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Right armrest\n    translate([35, 0, 55]) {\n        difference() {\n            cube([10, 70, 20], center = true);\n            // Rounded top\n            translate([0, 0, 10]) {\n                minkowski() {\n                    cube([6, 66, 16], center = true);\n                    sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Armrest supports\n    // Left supports\n    translate([-35, 25, 40]) {\n        cylinder(h = 30, r = 3);\n    }\n    translate([-35, -25, 40]) {\n        cylinder(h = 30, r = 3);\n    }\n    \n    // Right supports\n    translate([35, 25, 40]) {\n        cylinder(h = 30, r = 3);\n    }\n    translate([35, -25, 40]) {\n        cylinder(h = 30, r = 3);\n    }\n    \n    // Decorative backrest slats\n    for(y = [-20, -10, 0, 10, 20]) {\n        translate([0, y, 60]) {\n            cube([55, 3, 30], center = true);\n        }\n    }\n}\n\n// Render the chair\ntoy_vira_chair();",
    "renders": true
  },
  {
    "toy": "coda",
    "openscad_code": "// Realistic Coda Toy Table\n// Medium complexity 3D printable toy furniture\n\nmodule table_top() {\n    // Main table surface with rounded edges\n    difference() {\n        // Main top block\n        cube([80, 50, 4], center=true);\n        \n        // Rounded edge cutouts\n        translate([38, 23, 2]) cylinder(h=5, r=2, $fn=16);\n        translate([-38, 23, 2]) cylinder(h=5, r=2, $fn=16);\n        translate([38, -23, 2]) cylinder(h=5, r=2, $fn=16);\n        translate([-38, -23, 2]) cylinder(h=5, r=2, $fn=16);\n    }\n}\n\nmodule drawer() {\n    // Single drawer module\n    difference() {\n        // Drawer body\n        translate([0, 0, 1.5]) cube([35, 40, 10], center=true);\n        \n        // Hollow inside\n        translate([0, 0, 3]) cube([31, 36, 8], center=true);\n        \n        // Handle hole\n        translate([0, 23, 6]) cylinder(h=8, r=2, $fn=12);\n    }\n    \n    // Drawer handle\n    translate([0, 23, 8]) \n        rotate([90, 0, 0])\n            cylinder(h=12, r=1.5, $fn=8);\n}\n\nmodule drawer_frame() {\n    // Frame for drawers with rail guides\n    difference() {\n        // Outer frame\n        cube([40, 45, 12], center=true);\n        \n        // Inner cutout\n        translate([0, 0, 2]) cube([36, 41, 12], center=true);\n    }\n    \n    // Rail guides\n    for(i = [-1, 1]) {\n        translate([i * 16, 0, 0])\n            cube([1.5, 42, 1], center=true);\n    }\n}\n\nmodule leg() {\n    // Single tapered leg\n    cylinder(h1=35, h2=35, r1=3, r2=2.5, $fn=12);\n}\n\nmodule stretcher() {\n    // Cross support between legs\n    cube([45, 2, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    // Table top positioned\n    translate([0, 0, 31])\n        table_top();\n    \n    // Drawer assembly\n    translate([0, 0, 22])\n        union() {\n            drawer_frame();\n            drawer();\n        }\n    \n    // Legs at corners\n    for(x = [-35, 35]) {\n        for(y = [-20, 20]) {\n            translate([x, y, 0])\n                leg();\n        }\n    }\n    \n    // Lower stretchers\n    translate([0, 20, 10])\n        stretcher();\n    translate([0, -20, 10])\n        stretcher();\n    translate([35, 0, 10])\n        rotate([0, 0, 90])\n            stretcher();\n    translate([-35, 0, 10])\n        rotate([0, 0, 90])\n            stretcher();\n}",
    "renders": true
  },
  {
    "toy": "brisk",
    "openscad_code": "// Brisk Toy Chair - Realistic Style\n// Size: ~120mm height, child-scale chair\n\n// Parameters\nchair_width = 80;\nchair_depth = 75;\nseat_height = 45;\nback_height = 75;\nleg_thickness = 8;\nwall_thickness = 2.5;\nleg_inset = 5;\n\n// Main module\nmodule brisk_chair() {\n    // Legs\n    difference() {\n        union() {\n            // Front left leg\n            translate([leg_inset, leg_inset, 0])\n                cylinder(h=seat_height, d=leg_thickness, $fn=20);\n            \n            // Front right leg\n            translate([chair_width-leg_inset, leg_inset, 0])\n                cylinder(h=seat_height, d=leg_thickness, $fn=20);\n            \n            // Back left leg\n            translate([leg_inset, chair_depth-leg_inset, 0])\n                cylinder(h=seat_height, d=leg_thickness, $fn=20);\n            \n            // Back right leg\n            translate([chair_width-leg_inset, chair_depth-leg_inset, 0])\n                cylinder(h=seat_height, d=leg_thickness, $fn=20);\n            \n            // Front stretcher\n            translate([chair_width/2, leg_inset, seat_height/2])\n                rotate([90,0,0])\n                cylinder(h=chair_width-leg_inset*2, d=leg_thickness*0.8, $fn=20);\n            \n            // Side stretchers\n            translate([leg_inset, chair_depth/2, seat_height/2])\n                rotate([90,0,90])\n                cylinder(h=chair_depth-leg_inset*2, d=leg_thickness*0.8, $fn=20);\n            \n            translate([chair_width-leg_inset, chair_depth/2, seat_height/2])\n                rotate([90,0,90])\n                cylinder(h=chair_depth-leg_inset*2, d=leg_thickness*0.8, $fn=20);\n        }\n    }\n    \n    // Seat\n    translate([0, 0, seat_height])\n        cube([chair_width, chair_depth, wall_thickness*2]);\n    \n    // Seat cushion detail\n    translate([wall_thickness, wall_thickness, seat_height+wall_thickness*2])\n        cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, 8]);\n    \n    // Backrest frame\n    translate([0, 0, seat_height+wall_thickness*2+8])\n        cube([chair_width, wall_thickness, back_height-seat_height]);\n    \n    translate([0, chair_depth-wall_thickness, seat_height+wall_thickness*2+8])\n        cube([chair_width, wall_thickness, back_height-seat_height]);\n    \n    translate([0, wall_thickness, seat_height+wall_thickness*2+8])\n        cube([wall_thickness, chair_depth-wall_thickness*2, back_height-seat_height]);\n    \n    translate([chair_width-wall_thickness, wall_thickness, seat_height+wall_thickness*2+8])\n        cube([wall_thickness, chair_depth-wall_thickness*2, back_height-seat_height]);\n    \n    // Backrest slats\n    for(i=[1:3]) {\n        translate([wall_thickness*2, wall_thickness, \n                  seat_height+wall_thickness*2+8 + (back_height-seat_height-wall_thickness*2)/4*i])\n            cube([chair_width-wall_thickness*4, chair_depth-wall_thickness*2, wall_thickness*1.5]);\n    }\n    \n    // Decorative backrest top rail\n    translate([wall_thickness, wall_thickness, back_height-wall_thickness])\n        cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, wall_thickness*2]);\n}\n\n// Generate the chair\nbrisk_chair();",
    "renders": true
  },
  {
    "toy": "myra",
    "openscad_code": "// Myra toy chair - medium complexity realistic style\n// Overall size ~80mm tall, 60mm wide, 60mm deep\n\nmodule chair_frame() {\n    // Main seat frame\n    difference() {\n        cube([50, 50, 4], center=true);\n        translate([0, 0, -2.1])\n            cube([46, 46, 4], center=true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest\n    translate([0, -22, 15])\n        rotate([10, 0, 0])\n        difference() {\n            cube([45, 8, 30], center=true);\n            translate([0, 0, -15.1])\n                cube([41, 12, 30], center=true);\n        }\n}\n\nmodule backrest_slats() {\n    // Vertical slats in backrest\n    for(x = [-15, -5, 5, 15]) {\n        translate([x, -22, 15])\n            rotate([10, 0, 0])\n            cube([3, 6, 28], center=true);\n    }\n}\n\nmodule legs() {\n    // Four tapered legs\n    module single_leg(x, y) {\n        translate([x, y, -20])\n            cylinder(h=40, r1=3, r2=2.5, $fn=12);\n    }\n    \n    single_leg(20, 20);\n    single_leg(-20, 20);\n    single_leg(20, -20);\n    single_leg(-20, -20);\n}\n\nmodule stretchers() {\n    // Front and side stretchers for stability\n    // Front stretcher\n    translate([0, 20, -10])\n        cube([44, 2, 2], center=true);\n    \n    // Side stretchers\n    translate([20, 0, -10])\n        rotate([0, 0, 90])\n        cube([44, 2, 2], center=true);\n    \n    translate([-20, 0, -10])\n        rotate([0, 0, 90])\n        cube([44, 2, 2], center=true);\n}\n\nmodule cushion() {\n    // Padded seat cushion\n    translate([0, 0, 4])\n        difference() {\n            minkowski() {\n                cube([48, 48, 6], center=true);\n                sphere(1.5, $fn=12);\n            }\n            translate([0, 0, -6.1])\n                cube([44, 44, 6], center=true);\n        }\n}\n\nmodule armrests() {\n    // Side armrests\n    module single_armrest(x) {\n        translate([x, 0, 8])\n            difference() {\n                // Main armrest\n                rotate([0, 15, 0])\n                translate([0, 18, 0])\n                cube([4, 6, 20], center=true);\n                \n                // Rounded top\n                translate([0, 22, 15])\n                    rotate([0, 15, 0])\n                    cube([4, 6, 10], center=true);\n            }\n    }\n    \n    single_armrest(25);\n    single_armrest(-25);\n}\n\n// Assemble the chair\nunion() {\n    chair_frame();\n    backrest();\n    backrest_slats();\n    legs();\n    stretchers();\n    cushion();\n    armrests();\n}",
    "renders": true
  },
  {
    "toy": "vale",
    "openscad_code": "// Toy Vale Bench - Realistic Style with Medium Complexity\n// Overall dimensions: 120mm wide x 60mm deep x 70mm tall\n\n// Parameters\nseat_width = 100;\nseat_depth = 50;\nseat_thickness = 4;\nleg_height = 45;\nleg_width = 6;\nback_height = 30;\narmrest_height = 20;\narmrest_width = 8;\n\n// Main seat panel\nmodule seat_panel() {\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Slat details\n        for (i = [-2:1:2]) {\n            translate([i * 20, 0, leg_height + seat_thickness - 1])\n                cube([3, seat_depth - 8, 2], center=true);\n        }\n    }\n}\n\n// Leg structure\nmodule leg(position) {\n    // Front leg\n    translate([position * (seat_width/2 - leg_width), 0, leg_height/2])\n        cube([leg_width, leg_width, leg_height], center=true);\n    \n    // Rear leg (angled back)\n    translate([position * (seat_width/2 - leg_width), seat_depth/2 - leg_width/2, leg_height/2])\n        rotate([0, -5, 0])\n        cube([leg_width, leg_width, leg_height], center=true);\n    \n    // Side support brace\n    translate([position * (seat_width/2 - leg_width), 0, leg_height/3])\n        rotate([0, 0, 30])\n        cube([leg_width * 0.8, seat_depth - leg_width, leg_width], center=true);\n}\n\n// Backrest assembly\nmodule backrest() {\n    difference() {\n        // Main back panel\n        translate([0, -seat_depth/2 + 2, leg_height + seat_thickness + back_height/2])\n            cube([seat_width - 20, 4, back_height], center=true);\n        \n        // Back slats\n        for (i = [-2:1:2]) {\n            translate([i * 18, -seat_depth/2 + 2, leg_height + seat_thickness + back_height/2])\n                cube([8, 3, back_height - 8], center=true);\n        }\n    }\n    \n    // Top rail\n    translate([0, -seat_depth/2 + 2, leg_height + seat_thickness + back_height - 2])\n        cube([seat_width - 10, 6, 4], center=true);\n}\n\n// Armrest assembly\nmodule armrest(position) {\n    // Support post\n    translate([position * (seat_width/2 - armrest_width/2), seat_depth/4, leg_height + seat_thickness + armrest_height/2])\n        cube([armrest_width, armrest_width, armrest_height], center=true);\n    \n    // Armrest top\n    translate([position * (seat_width/2 - armrest_width/2), 0, leg_height + seat_thickness + armrest_height])\n        cube([armrest_width + 10, seat_depth/2, armrest_width/2], center=true);\n}\n\n// Decorative elements\nmodule decorative_spindle() {\n    // Small turned spindle detail\n    for (i = [-2:1:2]) {\n        translate([i * 25, -seat_depth/2 + 8, leg_height + seat_thickness + 8])\n            cylinder(h=15, r1=2, r2=1.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    seat_panel();\n    \n    // Legs (four total)\n    leg(-1);\n    leg(1);\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(-1);\n    armrest(1);\n    \n    // Decorative elements\n    decorative_spindle();\n    \n    // Bottom stretcher\n    translate([0, 0, leg_width])\n        cube([seat_width - leg_width*2, leg_width, leg_width], center=true);\n}",
    "renders": true
  },
  {
    "toy": "kestra",
    "openscad_code": "// Kestra Toy Chair - Realistic Medium Complexity\n// Overall dimensions: 120mm x 100mm x 110mm (W x D x H)\n\n$fn = 32;\n\nmodule chair_leg(x, y) {\n    translate([x, y, 0]) {\n        // Main leg cylinder\n        cylinder(h = 80, d = 12, center = false);\n        \n        // Tapered base\n        translate([0, 0, -2]) {\n            cylinder(h = 4, d1 = 14, d2 = 12, center = false);\n        }\n        \n        // Support ring at mid-height\n        translate([0, 0, 40]) {\n            cylinder(h = 8, d = 16, center = false);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main cushion\n    translate([0, 0, 80]) {\n        cube([100, 80, 12], center = true);\n        \n        // Rounded top edges\n        translate([0, 0, 6]) {\n            scale([1, 0.8, 0.5]) {\n                sphere(d = 100);\n            }\n        }\n        \n        // Tufted buttons (4 buttons)\n        for (x = [-30, 30]) {\n            for (y = [-20, 20]) {\n                translate([x, y, 12]) {\n                    cylinder(h = 2, d = 10, center = false);\n                    translate([0, 0, 2]) {\n                        sphere(d = 10);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule backrest_frame() {\n    // Left post\n    translate([-45, -40, 92]) {\n        cylinder(h = 100, d = 10, center = false);\n    }\n    \n    // Right post\n    translate([45, -40, 92]) {\n        cylinder(h = 100, d = 10, center = false);\n    }\n    \n    // Top rail\n    translate([0, -40, 192]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 90, d = 12, center = false);\n        }\n    }\n}\n\nmodule backrest_slats() {\n    for (i = [1:4]) {\n        translate([0, -40, 100 + i * 18]) {\n            cube([80, 6, 8], center = true);\n        }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-55, 0, 100]) {\n        // Support post\n        cylinder(h = 30, d = 8, center = false);\n        \n        // Armrest pad\n        translate([5, 0, 30]) {\n            rotate([0, 30, 0]) {\n                cube([40, 15, 8], center = false);\n            }\n        }\n    }\n    \n    // Right armrest\n    translate([55, 0, 100]) {\n        // Support post\n        cylinder(h = 30, d = 8, center = false);\n        \n        // Armrest pad\n        translate([-45, 0, 30]) {\n            rotate([0, 30, 0]) {\n                cube([40, 15, 8], center = false);\n            }\n        }\n    }\n}\n\nmodule stretchers() {\n    // Front stretcher\n    translate([0, 30, 20]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 90, d = 8, center = false);\n        }\n    }\n    \n    // Back stretcher\n    translate([0, -30, 20]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 90, d = 8, center = false);\n        }\n    }\n    \n    // Side stretchers\n    translate([-45, 0, 20]) {\n        rotate([90, 90, 0]) {\n            cylinder(h = 60, d = 8, center = false);\n        }\n    }\n    \n    translate([45, 0, 20]) {\n        rotate([90, 90, 0]) {\n            cylinder(h = 60, d = 8, center = false);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    chair_leg(-40, 30);\n    chair_leg(40, 30);\n    chair_leg(-40, -30);\n    chair_leg(40, -30);\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Backrest assembly\n    union() {\n        backrest_frame();\n        backrest_slats();\n    }\n    \n    // Armrests\n    armrests();\n    \n    // Structural stretchers\n    stretchers();\n}",
    "renders": true
  },
  {
    "toy": "dax",
    "openscad_code": "// Realistic DAX toy armchair (medium complexity)\n// Overall size: ~90mm wide x ~90mm deep x ~100mm tall\n\nmodule dax_armchair() {\n    // Seat frame\n    difference() {\n        // Seat base\n        translate([0, 0, 40])\n            cube([80, 80, 8], center = true);\n        \n        // Hollow out seat for cushion inset\n        translate([0, 0, 44])\n            cube([74, 74, 10], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 48])\n        cube([72, 72, 6], center = true);\n    \n    // Left armrest\n    translate([-45, 0, 70])\n        cube([8, 70, 40], center = true);\n    \n    // Right armrest\n    translate([45, 0, 70])\n        cube([8, 70, 40], center = true);\n    \n    // Backrest frame\n    difference() {\n        translate([0, -45, 90])\n            cube([80, 8, 60], center = true);\n        \n        // Hollow out backrest for cushion inset\n        translate([0, -45, 90])\n            cube([74, 10, 54], center = true);\n    }\n    \n    // Backrest cushion\n    translate([0, -45, 90])\n        cube([72, 6, 52], center = true);\n    \n    // Legs - using loop for repetition\n    for (x = [-30, 30])\n        for (y = [-30, 30])\n            translate([x, y, 20])\n                cylinder(h = 40, r1 = 5, r2 = 4);\n    \n    // Decorative buttons on cushion\n    for (x = [-25, 0, 25])\n        for (y = [-25, 0, 25])\n            translate([x, y, 52])\n                sphere(2);\n    \n    // Backrest buttons\n    for (x = [-25, 0, 25])\n        for (y = [-15, 15])\n            translate([x, y - 45, 90])\n                sphere(2);\n    \n    // Armrest top pads\n    translate([-45, 0, 90])\n        cube([10, 70, 4], center = true);\n    \n    translate([45, 0, 90])\n        cube([10, 70, 4], center = true);\n    \n    // Structural support bars under seat\n    translate([0, 0, 38])\n        cube([76, 76, 4], center = true);\n    \n    // Front apron detail\n    translate([0, 45, 20])\n        cube([76, 4, 20], center = true);\n    \n    // Side apron details\n    translate([-42, 0, 20])\n        cube([4, 70, 20], center = true);\n    \n    translate([42, 0, 20])\n        cube([4, 70, 20], center = true);\n}\n\ndax_armchair();",
    "renders": true
  },
  {
    "toy": "nera",
    "openscad_code": "// Nera Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm width x 75mm depth x 90mm height\n\n// Parameters\nchair_width = 80;\nchair_depth = 75;\nchair_height = 90;\nleg_height = 45;\nseat_thickness = 8;\nback_height = 45;\nleg_thickness = 6;\nback_slats = 5;\nslat_width = 3;\n\n// Main module\nmodule nera_chair() {\n    // Chair legs - four legs with rounded corners\n    union() {\n        // Front left leg\n        translate([-chair_width/2 + leg_thickness/2, -chair_depth/2 + leg_thickness/2, 0])\n            rounded_leg();\n        \n        // Front right leg\n        translate([chair_width/2 - leg_thickness/2, -chair_depth/2 + leg_thickness/2, 0])\n            rounded_leg();\n        \n        // Back left leg\n        translate([-chair_width/2 + leg_thickness/2, chair_depth/2 - leg_thickness/2, 0])\n            rounded_leg();\n        \n        // Back right leg\n        translate([chair_width/2 - leg_thickness/2, chair_depth/2 - leg_thickness/2, 0])\n            rounded_leg();\n    }\n    \n    // Seat cushion with rounded edges\n    translate([0, 0, leg_height])\n        rounded_cushion();\n    \n    // Backrest frame\n    translate([0, chair_depth/2 - 4, leg_height + seat_thickness])\n        backrest_frame();\n    \n    // Backrest slats\n    translate([0, chair_depth/2 - 4, leg_height + seat_thickness + 4])\n        back_slats_group();\n}\n\n// Rounded leg module\nmodule rounded_leg() {\n    difference() {\n        // Main leg body\n        cube([leg_thickness, leg_thickness, leg_height], center = true);\n        \n        // Rounded corners\n        translate([leg_thickness/2 - 2, leg_thickness/2 - 2, 0])\n            cylinder(h = leg_height + 1, r = 2, center = true);\n        translate([-leg_thickness/2 + 2, leg_thickness/2 - 2, 0])\n            cylinder(h = leg_height + 1, r = 2, center = true);\n        translate([leg_thickness/2 - 2, -leg_thickness/2 + 2, 0])\n            cylinder(h = leg_height + 1, r = 2, center = true);\n        translate([-leg_thickness/2 + 2, -leg_thickness/2 + 2, 0])\n            cylinder(h = leg_height + 1, r = 2, center = true);\n    }\n}\n\n// Rounded cushion module\nmodule rounded_cushion() {\n    difference() {\n        // Main cushion\n        cube([chair_width - 8, chair_depth - 8, seat_thickness], center = true);\n        \n        // Rounded edges\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (chair_width - 8)/2, y * (chair_depth - 8)/2, 0])\n                    cylinder(h = seat_thickness + 1, r = 4, center = true);\n            }\n        }\n    }\n    \n    // Cushion details - slight indentation\n    translate([0, 0, seat_thickness/2])\n        cube([chair_width - 20, chair_depth - 20, 1], center = true);\n}\n\n// Backrest frame\nmodule backrest_frame() {\n    // Bottom rail\n    cube([chair_width - 6, 4, 6], center = true);\n    \n    // Top rail\n    translate([0, 0, back_height - 6])\n        cube([chair_width - 6, 4, 6], center = true);\n    \n    // Side rails\n    translate([-(chair_width - 6)/2 + 2, 0, back_height/2 - 3])\n        cube([4, 4, back_height - 6], center = true);\n    translate([(chair_width - 6)/2 - 2, 0, back_height/2 - 3])\n        cube([4, 4, back_height - 6], center = true);\n}\n\n// Back slats group\nmodule back_slats_group() {\n    slat_spacing = (chair_width - 20) / (back_slats - 1);\n    for(i = [0:back_slats-1]) {\n        translate([-chair_width/2 + 10 + i * slat_spacing, 0, back_height/2 - 5])\n            cube([slat_width, 3, back_height - 10], center = true);\n    }\n}\n\n// Generate the chair\nnera_chair();",
    "renders": true
  },
  {
    "toy": "jora",
    "openscad_code": "// Jora Toy Chair - Realistic Style, Medium Complexity\n// Dimensions: 80mm width x 85mm depth x 95mm height\n\n// Parameters\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule jora_chair() {\n    \n    // Chair seat\n    difference() {\n        translate([0, 0, 45])\n            cube([60, 65, 8], center=true);\n        \n        // Hollow seat for weight reduction\n        translate([0, 0, 49])\n            cube([56, 61, 4], center=true);\n    }\n    \n    // Backrest\n    difference() {\n        translate([0, -27.5, 77])\n            cube([60, 8, 64], center=true);\n        \n        // Hollow backrest\n        translate([0, -27.5, 77])\n            cube([56, 4, 60], center=true);\n    }\n    \n    // Backrest slats\n    for(i = [-20, 0, 20]) {\n        translate([i, -27.5, 77])\n            cube([8, 6, 58], center=true);\n    }\n    \n    // Front legs\n    for(x = [-25, 25]) {\n        // Leg structure\n        translate([x, 27.5, 22.5])\n            difference() {\n                cube([6, 6, 45], center=true);\n                translate([0, 0, 2])\n                    cube([4, 4, 41], center=true);\n            }\n    }\n    \n    // Back legs\n    for(x = [-25, 25]) {\n        translate([x, -27.5, 22.5])\n            difference() {\n                cube([6, 6, 45], center=true);\n                translate([0, 0, 2])\n                    cube([4, 4, 41], center=true);\n            }\n    }\n    \n    // Front support bar\n    translate([0, 15, 25])\n        difference() {\n            cube([64, 4, 6], center=true);\n            translate([0, 0, 2])\n                cube([60, 2, 4], center=true);\n        }\n    \n    // Back support bar\n    translate([0, -15, 25])\n        difference() {\n            cube([64, 4, 6], center=true);\n            translate([0, 0, 2])\n                cube([60, 2, 4], center=true);\n        }\n    \n    // Side support bars\n    for(y = [-15, 15]) {\n        translate([32.5, y, 25])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([30, 4, 6], center=true);\n                    translate([0, 0, 2])\n                        cube([26, 2, 4], center=true);\n                }\n    }\n    \n    // Rounded corners on seat\n    translate([30, 32.5, 49])\n        cylinder(h=8, r=2.5, center=true);\n    translate([-30, 32.5, 49])\n        cylinder(h=8, r=2.5, center=true);\n    translate([30, -32.5, 49])\n        cylinder(h=8, r=2.5, center=true);\n    translate([-30, -32.5, 49])\n        cylinder(h=8, r=2.5, center=true);\n    \n    // Backrest top rail\n    translate([0, -27.5, 104])\n        difference() {\n            cube([64, 8, 4], center=true);\n            translate([0, 0, -1])\n                cube([60, 4, 2], center=true);\n        }\n}\n\n// Assembly\njora_chair();",
    "renders": true
  },
  {
    "toy": "pyra",
    "openscad_code": "// Pyra Toy - Realistic Medium Complexity\n// Dimensions: 120mm height, 80mm base width\n\n$fa = 2;\n$fs = 0.5;\n\nmodule pyra_body() {\n    // Main pyramid body\n    difference() {\n        // Outer shell - 2mm walls\n        translate([0, 0, 60])\n            scale([1, 1, 0.8])\n            cylinder(h=120, r1=40, r2=0, $fn=4);\n        \n        // Hollow interior\n        translate([0, 0, 62])\n            scale([1, 1, 0.8])\n            cylinder(h=116, r1=38, r2=0, $fn=4);\n    }\n}\n\nmodule door() {\n    // Hinged door panel\n    translate([-30, -39.5, 10])\n        cube([60, 2, 40]);\n    \n    // Door handle\n    translate([15, -38, 25])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3);\n    \n    // Handle sphere\n    translate([15, -38, 33])\n        sphere(r=4);\n}\n\nmodule windows() {\n    // Front window\n    translate([0, -39, 70])\n        rotate([0, 10, 0])\n            cube([25, 1, 25]);\n    \n    // Side windows (2x)\n    for(side = [-1, 1]) {\n        rotate([0, 0, side * 90])\n            translate([0, -39, 70])\n                rotate([0, 10, 0])\n                    cube([20, 1, 20]);\n    }\n}\n\nmodule steps() {\n    // Base steps - 3 levels\n    for(i = [0:2]) {\n        translate([0, -50 - i*5, 2 + i*2])\n            cube([60 - i*10, 5, 2], center=true);\n    }\n}\n\nmodule roof_detail() {\n    // Pyramid cap\n    translate([0, 0, 120])\n        cylinder(h=10, r1=5, r2=0, $fn=4);\n    \n    // Roof ring\n    translate([0, 0, 115])\n        cylinder(h=5, r1=8, r2=8, $fn=20);\n}\n\nmodule base_platform() {\n    // Foundation slab\n    translate([0, 0, -2])\n        cube([100, 100, 4], center=true);\n}\n\n// Assembly\nunion() {\n    base_platform();\n    steps();\n    pyra_body();\n    door();\n    windows();\n    roof_detail();\n}",
    "renders": true
  },
  {
    "toy": "stryke",
    "openscad_code": "// Toy Stryke – medium-complexity realistic model\n// Overall printable size ≈ 120 mm long\n// Wall thickness ≈ 2 mm\n\n// Parameters\nbody_len = 110;\nbody_wid = 45;\nbody_h   = 28;\ntrack_w  = 12;\ntrack_h  = 8;\ntrack_clear = 3;   // clearance between tracks\naxle_r   = 4;\naxle_len = 55;\nwheel_r  = 20;\nwheel_w  = 6;\ncannon_len = 40;\ncannon_r   = 6;\nturret_r   = 22;\nturret_h   = 12;\nhatch_r    = 8;\n\n// Main body shell (hollow)\nmodule body_shell() {\n    difference() {\n        // exterior block\n        cube([body_len, body_wid, body_h], center=true);\n        // interior hollow (2 mm wall)\n        translate([0,0,-1])\n            cube([body_len-4, body_wid-4, body_h-2], center=true);\n    }\n}\n\n// Continuous track segments\nmodule track_segment() {\n    hull() {\n        cube([track_w, track_w, track_h], center=true);\n        translate([0,0,track_h/2]) sphere(d=track_w);\n    }\n}\n\n// Full left track\nmodule left_track() {\n    translate([-body_len/2 + 5, body_wid/2 + track_clear, 0]) {\n        rotate([0,0,90]) {\n            for(i=[0:4]) {\n                translate([i*22-44,0,0])\n                    track_segment();\n            }\n        }\n    }\n}\n\n// Mirror right track\nmodule right_track() {\n    mirror([0,1,0]) left_track();\n}\n\n// Wheel\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_w, r=wheel_r, center=true);\n        cylinder(h=wheel_w+1, r=axle_r+1.5, center=true);\n    }\n}\n\n// Axle assembly\nmodule axles() {\n    translate([0,0,-body_h/2 - wheel_r/2 + 2]) {\n        // axle shaft\n        rotate([90,0,0]) cylinder(h=axle_len, r=axle_r, center=true);\n        // wheels\n        translate([axle_len/2 - wheel_w/2,0,0]) wheel();\n        translate([-axle_len/2 + wheel_w/2,0,0]) wheel();\n    }\n}\n\n// Turret base\nmodule turret() {\n    translate([body_len/4, 0, body_h/2 + turret_h/2]) {\n        difference() {\n            cylinder(h=turret_h, r=turret_r, center=true);\n            translate([0,0,-1])\n                cylinder(h=turret_h+2, r=turret_r-2, center=true);\n        }\n    }\n}\n\n// Cannon barrel\nmodule cannon() {\n    translate([body_len/4 + cannon_len/2 + turret_r, 0, body_h/2 + turret_h]) {\n        rotate([0,90,0]) cylinder(h=cannon_len, r=cannon_r, center=true);\n    }\n}\n\n// Commander hatch\nmodule hatch() {\n    translate([-body_len/4, 0, body_h/2 + 2]) {\n        difference() {\n            cylinder(h=4, r=hatch_r, center=true);\n            translate([0,0,-1])\n                cylinder(h=6, r=hatch_r-2, center=true);\n        }\n    }\n}\n\n// Assemble all parts\nunion() {\n    body_shell();\n    left_track();\n    right_track();\n    turret();\n    cannon();\n    hatch();\n    axles();\n}",
    "renders": true
  },
  {
    "toy": "zinn",
    "openscad_code": "// Toy Zinn Chair (realistic style, medium complexity)\n// Overall dimensions: ~60mm wide x ~70mm deep x ~100mm tall\n\n// Parameters\nleg_d = 6;          // Leg diameter\nleg_h = 45;         // Leg height\nseat_w = 60;        // Seat width\nseat_d = 70;        // Seat depth\nseat_th = 4;        // Seat thickness\nback_h = 55;        // Backrest height above seat\nback_th = 3;        // Backrest thickness\narmrest_h = 20;     // Armrest height above seat\narmrest_w = 8;      // Armrest width\nstretcher_d = 4;    // Stretcher diameter\n\n// Leg module (cylinder with rounded top)\nmodule leg() {\n    cylinder(d=leg_d, h=leg_h, $fn=20);\n    translate([0,0,leg_h])\n        sphere(d=leg_d, $fn=20);\n}\n\n// Stretcher between legs\nmodule stretcher(len) {\n    rotate([90,0,0])\n        cylinder(d=stretcher_d, h=len, $fn=12);\n}\n\n// Armrest\nmodule armrest(len) {\n    difference() {\n        translate([-armrest_w/2, 0, 0])\n            cube([armrest_w, len, armrest_w]);\n        translate([-armrest_w/2-1, -1, -1])\n            cube([armrest_w+2, 2, armrest_w+1]);\n    }\n}\n\n// Seat with cushion impression\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([-seat_w/2, -seat_d/2, 0])\n            cube([seat_w, seat_d, seat_th]);\n        // Cushion recess\n        translate([-seat_w/2+5, -seat_d/2+5, seat_th-1])\n            cube([seat_w-10, seat_d-10, 1]);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Main back frame\n    difference() {\n        translate([-seat_w/2, -back_th/2, 0])\n            cube([seat_w, back_th, back_h]);\n        // Top curve\n        translate([0, -back_th/2-1, back_h-10])\n            rotate([0,90,0])\n                cylinder(h=seat_w+2, r=10, $fn=30);\n    }\n    \n    // Slats\n    for(i = [1:3]) {\n        translate([-seat_w/2+10, -back_th/2-0.5, i*15])\n            cube([seat_w-20, back_th+1, 8]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat\n    translate([0,0,leg_h])\n        seat();\n    \n    // Backrest\n    translate([0, seat_d/2-back_th/2, leg_h+seat_th])\n        backrest();\n    \n    // Legs\n    translate([seat_w/2-leg_d/2, seat_d/2-leg_d/2, 0])\n        leg();\n    translate([-seat_w/2+leg_d/2, seat_d/2-leg_d/2, 0])\n        leg();\n    translate([seat_w/2-leg_d/2, -seat_d/2+leg_d/2, 0])\n        leg();\n    translate([-seat_w/2+leg_d/2, -seat_d/2+leg_d/2, 0])\n        leg();\n    \n    // Side stretchers\n    translate([seat_w/2-leg_d/2, 0, leg_h/2])\n        stretcher(seat_d-leg_d);\n    translate([-seat_w/2+leg_d/2, 0, leg_h/2])\n        stretcher(seat_d-leg_d);\n    \n    // Front/back stretchers\n    translate([0, seat_d/2-leg_d/2, leg_h/3])\n        rotate([0,0,90])\n            stretcher(seat_w-leg_d);\n    translate([0, -seat_d/2+leg_d/2, leg_h/3])\n        rotate([0,0,90])\n            stretcher(seat_w-leg_d);\n    \n    // Armrests\n    translate([seat_w/2-armrest_w/2, 0, leg_h+seat_th+armrest_h-armrest_w])\n        armrest(seat_d/2);\n    translate([-seat_w/2+armrest_w/2, 0, leg_h+seat_th+armrest_h-armrest_w])\n        rotate([0,0,180])\n            armrest(seat_d/2);\n}",
    "renders": true
  },
  {
    "toy": "lumo",
    "openscad_code": "// Lumo Toy Chair – realistic style, medium complexity\n// Overall height ≈ 110 mm, seat height ≈ 55 mm, printable without supports\n\n$fn = 32;\n\nmodule rounded_cube(size, r) {\n    // helper for easy rounded boxes\n    translate([r, r, 0])\n    minkowski() {\n        cube([size.x - 2*r, size.y - 2*r, size.z]);\n        sphere(r);\n    }\n}\n\nmodule leg(x, z_offset) {\n    // single round leg, 2 mm wall thickness\n    difference() {\n        cylinder(h = 55, d = 14);\n        translate([0, 0, 2])\n        cylinder(h = 55, d = 10);\n    }\n    translate([0, 0, 55])\n    difference() {\n        cylinder(h = 4, d = 20);\n        translate([0, 0, 2])\n        cylinder(h = 4, d = 16);\n    }\n}\n\nmodule back_spindle(i) {\n    // vertical spindle in the backrest\n    translate([i*12 - 24, 0, 0])\n    difference() {\n        cylinder(h = 50, d = 8);\n        translate([0, 0, 2])\n        cylinder(h = 50, d = 4);\n    }\n}\n\nmodule armrest() {\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 30, d = 12);\n        translate([0, 0, 2])\n        cylinder(h = 30, d = 8);\n    }\n}\n\ndifference() {\n    union() {\n        // seat\n        translate([0, 0, 55])\n        rounded_cube([60, 60, 10], 5);\n\n        // backrest frame\n        translate([0, -25, 80])\n        rounded_cube([60, 10, 50], 5);\n\n        // backrest spindles\n        for (i = [0:4])\n            translate([0, -20, 105])\n            back_spindle(i);\n\n        // four legs\n        leg(-22, 0);\n        leg(22, 0);\n        leg(-22, 0);\n        leg(22, 0);\n\n        // front stretcher between legs\n        translate([0, -22, 15])\n        rounded_cube([44, 8, 8], 4);\n\n        // side stretchers\n        translate([22, 0, 15])\n        rotate([0, 0, 90])\n        rounded_cube([44, 8, 8], 4);\n\n        translate([-22, 0, 15])\n        rotate([0, 0, 90])\n        rounded_cube([44, 8, 8], 4);\n\n        // armrest posts\n        translate([30, 22, 75])\n        armrest();\n\n        translate([-30, 22, 75])\n        armrest();\n\n        // armrest rails\n        translate([0, 37, 90])\n        rounded_cube([70, 10, 8], 4);\n    }\n\n    // hollow seat interior\n    translate([0, 0, 60])\n    cube([54, 54, 8], center = true);\n\n    // hollow backrest interior\n    translate([0, -25, 105])\n    cube([54, 8, 40], center = true);\n}",
    "renders": true
  },
  {
    "toy": "voss",
    "openscad_code": "// Voss toy chair - realistic medium complexity\n// Overall dimensions: 80x75x110 mm\n\n// Parameters\nseat_width = 60;\nseat_depth = 55;\nseat_thickness = 4;\nback_height = 55;\nback_thickness = 4;\nleg_height = 45;\nleg_size = 8;\narmrest_height = 20;\narmrest_width = 6;\n\n// Seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Rounded edges\n        translate([0, 0, leg_height + seat_thickness/2 + 1])\n            cube([seat_width - 4, seat_depth - 4, seat_thickness - 2], center=true);\n    }\n}\n\n// Backrest with cushion\nmodule backrest() {\n    // Back frame\n    translate([0, seat_depth/2 - back_thickness/2, leg_height + seat_thickness + back_height/2])\n        cube([seat_width, back_thickness, back_height], center=true);\n    \n    // Back cushion\n    translate([0, seat_depth/2 - back_thickness/2 + 2, leg_height + seat_thickness + back_height/2])\n        cube([seat_width - 6, back_thickness - 2, back_height - 6], center=true);\n}\n\n// Armrest\nmodule armrest(side) {\n    translate([side * (seat_width/2 - armrest_width/2), 0, leg_height + seat_thickness + armrest_height/2])\n        cube([armrest_width, seat_depth, armrest_height], center=true);\n}\n\n// Leg structure\nmodule leg(x, y) {\n    translate([x, y, leg_height/2])\n        cube([leg_size, leg_size, leg_height], center=true);\n}\n\n// Cross support between legs\nmodule cross_support() {\n    // Front support\n    translate([0, seat_depth/2 - leg_size/2, leg_height/2])\n        cube([seat_width - leg_size*2, leg_size, leg_size], center=true);\n    \n    // Side supports\n    translate([seat_width/2 - leg_size/2, 0, leg_height/3])\n        rotate([0, 90, 0])\n            cylinder(h=seat_depth - leg_size*2, r=leg_size/2, center=true);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    leg(seat_width/2 - leg_size/2, seat_depth/2 - leg_size/2);\n    leg(-seat_width/2 + leg_size/2, seat_depth/2 - leg_size/2);\n    leg(seat_width/2 - leg_size/2, -seat_depth/2 + leg_size/2);\n    leg(-seat_width/2 + leg_size/2, -seat_depth/2 + leg_size/2);\n    \n    // Structural supports\n    cross_support();\n    \n    // Seat\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Decorative buttons on cushion\n    for (x = [-seat_width/3, 0, seat_width/3]) {\n        for (y = [-seat_depth/3, 0, seat_depth/3]) {\n            translate([x, y, leg_height + seat_thickness + 1])\n                sphere(d=3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "tamsi",
    "openscad_code": "// Tamsi Toy Chair - Realistic Medium Complexity\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 85;\nchair_height = 100;\nleg_height = 45;\nseat_thickness = 10;\nbackrest_height = 55;\n\n// Material thickness\nwall_thickness = 2;\n\n// Leg module\nmodule chair_leg() {\n    difference() {\n        // Main leg\n        translate([-wall_thickness/2, -wall_thickness/2, 0])\n            cube([wall_thickness*2, wall_thickness*2, leg_height]);\n        \n        // Chamfer bottom\n        translate([-wall_thickness, -wall_thickness, leg_height-5])\n            cube([wall_thickness*3, wall_thickness*3, 5]);\n    }\n}\n\n// Backrest slats\nmodule back_slat(width, height, depth) {\n    translate([0, 0, 0])\n        cube([width, depth, height]);\n}\n\n// Seat with cushion shape\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height])\n            cube([chair_width, chair_depth, seat_thickness]);\n        \n        // Rounded edges\n        translate([-1, -1, leg_height-1])\n            cube([chair_width+2, chair_depth+2, seat_thickness+2]);\n        translate([1, 1, leg_height])\n            cube([chair_width-2, chair_depth-2, seat_thickness]);\n    }\n    \n    // Cushion detail\n    translate([wall_thickness, wall_thickness, leg_height+seat_thickness-wall_thickness])\n        cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, wall_thickness]);\n}\n\n// Backrest frame\nmodule backrest() {\n    // Side posts\n    translate([0, 0, leg_height+seat_thickness])\n        cube([wall_thickness*2, wall_thickness*2, backrest_height]);\n    translate([chair_width-wall_thickness*2, 0, leg_height+seat_thickness])\n        cube([wall_thickness*2, wall_thickness*2, backrest_height]);\n    \n    // Top rail\n    translate([0, 0, leg_height+seat_thickness+backrest_height-wall_thickness])\n        cube([chair_width, wall_thickness*2, wall_thickness*2]);\n    \n    // Slats\n    for(i = [1:3]) {\n        translate([wall_thickness*3, wall_thickness, leg_height+seat_thickness+wall_thickness+((backrest_height-wall_thickness*3)/4)*(i-1)])\n            back_slat(chair_width-wall_thickness*6, wall_thickness*2, wall_thickness*2);\n    }\n}\n\n// Support bars\nmodule support_bar() {\n    // Front support\n    translate([wall_thickness*2, chair_depth-wall_thickness*2, 0])\n        cube([chair_width-wall_thickness*4, wall_thickness, leg_height]);\n    \n    // Side supports\n    translate([wall_thickness*2, wall_thickness*2, 0])\n        cube([wall_thickness, chair_depth-wall_thickness*4, leg_height]);\n    translate([chair_width-wall_thickness*3, wall_thickness*2, 0])\n        cube([wall_thickness, chair_depth-wall_thickness*4, leg_height]);\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    translate([wall_thickness*2, wall_thickness*2, 0])\n        chair_leg();\n    translate([chair_width-wall_thickness*3, wall_thickness*2, 0])\n        chair_leg();\n    translate([wall_thickness*2, chair_depth-wall_thickness*3, 0])\n        chair_leg();\n    translate([chair_width-wall_thickness*3, chair_depth-wall_thickness*3, 0])\n        chair_leg();\n    \n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Support structure\n    support_bar();\n}",
    "renders": true
  },
  {
    "toy": "cyrus",
    "openscad_code": "// Cyrus toy high chair - realistic medium complexity\n\n// Overall dimensions\nchair_height = 120;\nseat_height = 60;\nseat_width = 50;\nseat_depth = 45;\nback_height = 60;\n\n// Wall thickness\nwall = 2;\n\n// Leg module with tapered design and support ring\nmodule leg(height, base_width, top_width) {\n    // Main leg post\n    cylinder(h=height, r1=base_width/2, r2=top_width/2, $fn=16);\n    \n    // Support ring at mid-height\n    translate([0, 0, height/2])\n        cylinder(h=3, r=base_width/1.5, $fn=16);\n    \n    // Foot base\n    translate([0, 0, -1])\n        cylinder(h=3, r=base_width/2.2, $fn=16);\n}\n\n// Seat frame with rounded corners\nmodule seat_frame(width, depth, height) {\n    corner_radius = 4;\n    \n    // Main seat platform\n    translate([0, 0, height/2])\n        cube([width, depth, height], center=true);\n    \n    // Rounded corners using cylinders\n    for(x = [-width/2 + corner_radius, width/2 - corner_radius])\n        for(y = [-depth/2 + corner_radius, depth/2 - corner_radius]) {\n            translate([x, y, 0])\n                cylinder(h=height+1, r=corner_radius, center=true, $fn=16);\n        }\n}\n\n// Backrest with slats\nmodule backrest(width, height, thickness) {\n    slat_width = 4;\n    slat_gap = 6;\n    num_slats = floor(width / (slat_width + slat_gap));\n    \n    // Frame top\n    translate([0, 0, height - wall])\n        cube([width + wall*2, thickness, wall*2], center=true);\n    \n    // Frame sides\n    translate([-width/2 - wall, 0, height/2])\n        cube([wall, thickness + wall*2, height], center=true);\n    translate([width/2 + wall, 0, height/2])\n        cube([wall, thickness + wall*2, height], center=true);\n    \n    // Horizontal support bar\n    translate([0, 0, height/3])\n        cube([width + wall*2, thickness + wall*2, wall*2], center=true);\n    \n    // Vertical slats\n    for(i = [0:num_slats-1]) {\n        x_pos = -width/2 + slat_width/2 + i*(slat_width + slat_gap);\n        translate([x_pos, 0, height/2])\n            cube([slat_width, thickness, height], center=true);\n    }\n}\n\n// Tray with cup holder\nmodule tray(width, depth, thickness) {\n    // Main tray\n    translate([0, -depth/4, 0])\n        cube([width, depth, thickness], center=true);\n    \n    // Cup holder indent\n    cup_radius = 8;\n    translate([width/3, -depth/2 + 10, -thickness/2 - 0.1])\n        cylinder(h=thickness+0.2, r=cup_radius, $fn=32);\n    \n    // Tray edge lip\n    lip_height = 3;\n    translate([0, 0, thickness/2 + lip_height/2])\n        cube([width+2, depth+2, lip_height], center=true);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    leg_positions = [\n        [-seat_width/2 + 5, -seat_depth/2 + 5],\n        [seat_width/2 - 5, -seat_depth/2 + 5],\n        [-seat_width/2 + 5, seat_depth/2 - 5],\n        [seat_width/2 - 5, seat_depth/2 - 5]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], 0])\n            leg(seat_height, 8, 6);\n    }\n    \n    // Seat\n    translate([0, 0, seat_height])\n        seat_frame(seat_width, seat_depth, wall*2);\n    \n    // Backrest\n    translate([0, -seat_depth/2 + wall, seat_height + wall])\n        backrest(seat_width, back_height, wall);\n    \n    // Tray\n    translate([0, seat_depth/2 - 5, seat_height + 35])\n        tray(seat_width + 20, seat_depth/2, wall*2);\n    \n    // Support bars between legs\n    // Front support\n    translate([0, -seat_depth/2 + 5, 20])\n        cube([seat_width - 10, wall, wall], center=true);\n    \n    // Side supports\n    translate([-seat_width/2 + 5, 0, 30])\n        cube([wall, seat_depth - 10, wall], center=true);\n    translate([seat_width/2 - 5, 0, 30])\n        cube([wall, seat_depth - 10, wall], center=true);\n}",
    "renders": true
  },
  {
    "toy": "nyla",
    "openscad_code": "// Nyla Toy Armchair - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 110mm x 110mm (L x W x H)\n\n$fn = 50;\n\n// Main module\nmodule nyla_armchair() {\n    // Seat frame\n    difference() {\n        // Main seat block\n        translate([0, 0, 40])\n            cube([80, 80, 20], center = true);\n        \n        // Hollow center for cushion\n        translate([0, 0, 42])\n            cube([76, 76, 16], center = true);\n    }\n    \n    // Cushion\n    translate([0, 0, 52])\n        cube([74, 74, 8], center = true);\n    \n    // Backrest frame\n    difference() {\n        // Outer backrest\n        translate([0, -35, 85])\n            cube([76, 10, 70], center = true);\n        \n        // Hollow backrest\n        translate([0, -35, 85])\n            cube([72, 6, 66], center = true);\n    }\n    \n    // Backrest cushion\n    translate([0, -33, 85])\n        cube([70, 4, 64], center = true);\n    \n    // Left armrest\n    armrest(-35, 0);\n    \n    // Right armrest\n    armrest(35, 0);\n    \n    // Legs\n    for(x = [-30, 30])\n        for(y = [-30, 30])\n            leg(x, y);\n}\n\n// Armrest module\nmodule armrest(x_pos, y_pos) {\n    // Support post\n    translate([x_pos, 25, 30])\n        cylinder(h = 40, r = 4);\n    \n    // Armrest pad\n    translate([x_pos, 25, 50])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r1 = 6, r2 = 6);\n    \n    // Armrest top cushion\n    translate([x_pos, 25, 50])\n        rotate([90, 0, 0])\n            cylinder(h = 28, r1 = 5, r2 = 5);\n}\n\n// Leg module\nmodule leg(x_pos, y_pos) {\n    // Main leg\n    translate([x_pos, y_pos, 20])\n        cylinder(h = 40, r = 4);\n    \n    // Leg base\n    translate([x_pos, y_pos, 0])\n        cylinder(h = 2, r = 6);\n}\n\n// Scale and render\nscale(0.8)\n    nyla_armchair();",
    "renders": true
  },
  {
    "toy": "vero",
    "openscad_code": "// Vero toy armchair - realistic style, medium complexity\n// Overall dimensions: 100mm width × 90mm depth × 100mm height\n\nmodule chair_frame() {\n    // Main frame structure - 2mm wall thickness\n    difference() {\n        union() {\n            // Back frame outer\n            translate([-48, -43, 0]) cube([96, 6, 70]);\n            // Side frames outer\n            translate([-48, -43, 0]) cube([6, 86, 70]);\n            translate([42, -43, 0]) cube([6, 86, 70]);\n            // Front frame outer\n            translate([-48, 37, 0]) cube([96, 6, 70]);\n        }\n        \n        // Hollow out inside - 2mm wall thickness\n        difference() {\n            translate([-46, -41, 2]) cube([92, 82, 66]);\n            translate([-44, -39, 4]) cube([88, 78, 62]);\n        }\n    }\n}\n\nmodule backrest() {\n    // Backrest cushion with button detail\n    difference() {\n        // Main cushion - slightly curved top\n        translate([-45, -45, 70]) {\n            hull() {\n                translate([0, 0, 0]) cube([90, 4, 25]);\n                translate([0, 0, 2]) cube([90, 4, 23]);\n            }\n        }\n        \n        // Button details - 4 buttons in 2x2 grid\n        for(i = [0,1]) {\n            for(j = [0,1]) {\n                translate([-30 + i*60, -43, 80 + j*10]) {\n                    rotate([90, 0, 0]) cylinder(h=3, d=8, $fn=20);\n                }\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Seat cushion with rounded edges\n    difference() {\n        // Main cushion\n        translate([-45, -35, 30]) {\n            minkowski() {\n                cube([90, 70, 10]);\n                sphere(2);\n            }\n        }\n        \n        // Button details - 3 buttons in row\n        for(i = [0,1,2]) {\n            translate([-30 + i*30, 0, 42]) {\n                rotate([90, 0, 0]) cylinder(h=3, d=8, $fn=20);\n            }\n        }\n    }\n}\n\nmodule armrest(side) {\n    // Armrest with support structure\n    mirror([side, 0, 0]) {\n        translate([-48, -20, 45]) {\n            // Armrest pad\n            translate([0, 0, 10]) cube([10, 40, 5]);\n            \n            // Support strut\n            translate([2, 15, 0]) cube([6, 5, 10]);\n            translate([2, -15, 0]) cube([6, 5, 10]);\n            \n            // Decorative cap\n            translate([0, 0, 15]) cylinder(h=3, d=8, $fn=20);\n        }\n    }\n}\n\nmodule legs() {\n    // Four legs with stretchers\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*40, y*35, 0]) {\n                // Leg post\n                cylinder(h=30, d=8, $fn=20);\n                \n                // Foot pad\n                translate([0, 0, -2]) cylinder(h=4, d=12, $fn=20);\n                \n                // Stretchers between legs\n                if(x == 1 && y == 1) {\n                    // Front stretcher\n                    translate([-40, 0, 15]) cube([80, 6, 6]);\n                }\n                if(x == 1 && y == -1) {\n                    // Side stretcher\n                    translate([0, -35, 15]) cube([6, 70, 6]);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    backrest();\n    seat_cushion();\n    armrest(1);  // Left armrest\n    armrest(-1); // Right armrest\n    legs();\n}",
    "renders": true
  },
  {
    "toy": "skarn",
    "openscad_code": "// Skarn Toy Rocking Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 90mm width x 100mm depth x 110mm height\n\n// Main module for the complete toy skarn rocking chair\nmodule skarn_rocking_chair() {\n    // Rockers - curved base pieces\n    union() {\n        // Left rocker\n        translate([-40, 0, 0]) {\n            difference() {\n                rocker_base();\n                // Hollow out for lighter weight\n                translate([0, 0, 2]) scale([0.8, 0.8, 0.8]) rocker_base();\n            }\n        }\n        \n        // Right rocker\n        translate([40, 0, 0]) {\n            difference() {\n                mirror([1, 0, 0]) rocker_base();\n                // Hollow out for lighter weight\n                translate([0, 0, 2]) scale([0.8, 0.8, 0.8]) mirror([1, 0, 0]) rocker_base();\n            }\n        }\n    }\n    \n    // Seat platform connecting rockers\n    union() {\n        // Front support beam\n        translate([0, 45, 25]) cube([90, 5, 50], center=true);\n        \n        // Rear support beam\n        translate([0, -45, 35]) cube([90, 5, 50], center=true);\n        \n        // Side rails\n        translate([42.5, 0, 30]) cube([5, 95, 5], center=true);\n        translate([-42.5, 0, 30]) cube([5, 95, 5], center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 55]) {\n        difference() {\n            cube([85, 95, 15], center=true);\n            // Cushion top rounding effect\n            translate([0, 0, 7.5]) cube([83, 93, 8], center=true);\n        }\n    }\n    \n    // Backrest\n    translate([0, -45, 80]) {\n        // Backrest frame\n        union() {\n            // Left post\n            translate([-35, 0, 0]) cylinder(h=50, r=4, center=true);\n            // Right post\n            translate([35, 0, 0]) cylinder(h=50, r=4, center=true);\n            // Top rail\n            translate([0, 0, 25]) cube([78, 5, 5], center=true);\n            // Bottom rail\n            translate([0, 0, -20]) cube([78, 5, 5], center=true);\n        }\n        \n        // Backrest slats\n        for(i = [-15:10:15]) {\n            translate([i, 0, 2.5]) cube([8, 5, 40], center=true);\n        }\n        \n        // Decorative top piece\n        translate([0, 0, 35]) {\n            cylinder(h=8, r1=40, r2=35, center=true);\n        }\n    }\n    \n    // Armrests\n    // Left armrest\n    translate([-42.5, 15, 70]) {\n        union() {\n            // Support post\n            cylinder(h=30, r=3, center=true);\n            // Armrest top\n            translate([0, 10, 15]) cube([5, 20, 5], center=true);\n        }\n    }\n    \n    // Right armrest\n    translate([42.5, 15, 70]) {\n        union() {\n            // Support post\n            cylinder(h=30, r=3, center=true);\n            // Armrest top\n            translate([0, 10, 15]) cube([5, 20, 5], center=true);\n        }\n    }\n}\n\n// Module for the curved rocker base\nmodule rocker_base() {\n    difference() {\n        // Main curved shape\n        translate([0, 0, -5]) {\n            hull() {\n                // Front contact point\n                translate([0, 50, 0]) sphere(r=5);\n                // Rear contact point\n                translate([0, -50, 0]) sphere(r=5);\n                // Center pivot point\n                translate([0, 0, 15]) sphere(r=5);\n            }\n        }\n        \n        // Flatten bottom for stability\n        translate([0, 0, -10]) cube([15, 110, 10], center=true);\n    }\n}\n\n// Render the complete toy\nskarn_rocking_chair();",
    "renders": true
  },
  {
    "toy": "riva",
    "openscad_code": "// Riva Toy Speedboat (Medium Complexity)\n// Overall length 120mm, width 35mm, height 35mm\n\nmodule hull() {\n    // Main hull body - elongated ellipsoid shape\n    difference() {\n        hull_profile();\n        \n        // Cockpit cutout\n        translate([20,0,12])\n            cube([60,22,25], center=true);\n        \n        // Prop shaft tunnel\n        translate([-45,10,2])\n            rotate([0,15,0])\n                cylinder(h=30, d=6, center=false);\n    }\n}\n\nmodule hull_profile() {\n    // Create hull using scaled spheres and cubes\n    union() {\n        // Front tapered section\n        translate([40,0,4])\n            scale([1.5,0.8,0.6])\n                sphere(d=30);\n        \n        // Main mid section\n        translate([0,0,2])\n            scale([2.5,1,0.8])\n                sphere(d=30);\n        \n        // Rear section\n        translate([-40,0,3])\n            scale([1.8,1.1,0.9])\n                sphere(d=30);\n        \n        // Bottom flat section\n        translate([0,0,-2])\n            cube([110,30,4], center=true);\n    }\n}\n\nmodule deck() {\n    // Upper deck with teak planking effect\n    difference() {\n        // Main deck surface\n        translate([0,0,13])\n            cube([100,32,2], center=true);\n        \n        // Cockpit opening\n        translate([20,0,13])\n            cube([60,22,3], center=true);\n        \n        // Windshield mounting holes\n        for(x=[-5,15]) {\n            translate([x,14,13])\n                cylinder(h=3, d=3);\n        }\n    }\n}\n\nmodule windshield() {\n    // Curved windshield frame\n    difference() {\n        // Main frame\n        translate([5,0,25])\n            rotate([0,15,0])\n                scale([0.8,1,0.3])\n                    sphere(d=32);\n        \n        // Inner cutout\n        translate([5,0,25])\n            rotate([0,15,0])\n                scale([0.7,0.9,0.2])\n                    sphere(d=32);\n    }\n    \n    // Windshield supports\n    for(x=[-5,15]) {\n        translate([x,14,22])\n            cylinder(h=6, d=3);\n    }\n}\n\nmodule seats() {\n    // Driver seat\n    translate([15,-5,14])\n        cube([12,10,4], center=true);\n    \n    // Passenger seat\n    translate([15,5,14])\n        cube([12,10,4], center=true);\n    \n    // Seat backs\n    translate([15,-5,18])\n        cube([12,2,6], center=true);\n    translate([15,5,18])\n        cube([12,2,6], center=true);\n}\n\nmodule engine_details() {\n    // Engine cover\n    translate([-35,0,15])\n        cube([25,22,8], center=true);\n    \n    // Exhaust pipes\n    for(y=[-8,8]) {\n        translate([-45,y,12])\n            rotate([0,0,30])\n                cylinder(h=15, d=4);\n    }\n}\n\nmodule propeller() {\n    // Propeller hub\n    translate([-55,0,3])\n        cylinder(h=8, d=6);\n    \n    // Propeller blades\n    for(i=[0:120:359]) {\n        rotate([0,0,i])\n            translate([-55,0,3])\n                cube([12,1.5,2], center=true);\n    }\n}\n\nmodule railings() {\n    // Side railings\n    for(side=[-1,1]) {\n        translate([0,side*16,14])\n            cube([100,2,2], center=true);\n        \n        // Support posts\n        for(x=[-40,-20,0,20,40]) {\n            translate([x,side*16,13])\n                cube([2,2,4], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    deck();\n    windshield();\n    seats();\n    engine_details();\n    propeller();\n    railings();\n}",
    "renders": true
  },
  {
    "toy": "lyric",
    "openscad_code": "// Toy Lyric Rocking Chair - Realistic Style\n// Medium complexity 3D printable toy furniture\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 70;\nchair_height = 90;\nleg_thickness = 8;\nbackrest_height = 45;\nseat_thickness = 4;\nrocker_radius = 120;\nrocker_thickness = 6;\n\nmodule chair_frame() {\n    // Seat base\n    translate([0, 0, chair_height/2])\n        cube([chair_width, chair_depth, seat_thickness], center=true);\n    \n    // Backrest\n    translate([0, chair_depth/3, chair_height - backrest_height/2])\n        cube([chair_width - 20, 8, backrest_height], center=true);\n    \n    // Backrest slats\n    for(i = [-1, 0, 1]) {\n        translate([i * 20, chair_depth/3 + 2, chair_height - backrest_height/2])\n            cube([8, 4, backrest_height - 10], center=true);\n    }\n}\n\nmodule chair_legs() {\n    // Front legs\n    translate([-chair_width/2 + 10, -chair_depth/2 + 10, chair_height/2 - 5])\n        cylinder(h=chair_height/2 - 5, r=leg_thickness/2, $fn=8);\n    translate([chair_width/2 - 10, -chair_depth/2 + 10, chair_height/2 - 5])\n        cylinder(h=chair_height/2 - 5, r=leg_thickness/2, $fn=8);\n    \n    // Rear legs\n    translate([-chair_width/2 + 10, chair_depth/2 - 10, chair_height/2 - 5])\n        cylinder(h=chair_height/2 - 5, r=leg_thickness/2, $fn=8);\n    translate([chair_width/2 - 10, chair_depth/2 - 10, chair_height/2 - 5])\n        cylinder(h=chair_height/2 - 5, r=leg_thickness/2, $fn=8);\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 - 2, 0, chair_height - 15])\n        cube([4, chair_depth/2, 30]);\n    \n    // Right armrest\n    translate([chair_width/2 - 2, 0, chair_height - 15])\n        cube([4, chair_depth/2, 30]);\n}\n\nmodule rockers() {\n    // Left rocker\n    translate([-chair_width/2 + 10, 0, rocker_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=chair_width - 20, r=rocker_thickness/2, $fn=20);\n    \n    // Right rocker\n    translate([chair_width/2 - 10, 0, rocker_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=chair_width - 20, r=rocker_thickness/2, $fn=20);\n    \n    // Curved rocker base\n    difference() {\n        for(side = [-1, 1]) {\n            translate([side * (chair_width/2 - 10), 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=chair_depth + 20, r=rocker_radius, $fn=40);\n        }\n        \n        // Cut flat bottom\n        translate([0, 0, -rocker_radius - 5])\n            cube([chair_width * 2, chair_depth * 2, rocker_radius], center=true);\n        \n        // Hollow out rockers\n        for(side = [-1, 1]) {\n            translate([side * (chair_width/2 - 10), 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=chair_depth + 25, r=rocker_radius - rocker_thickness, $fn=40);\n        }\n    }\n}\n\nmodule cushion() {\n    // Seat cushion\n    translate([0, 0, chair_height/2 + seat_thickness/2 + 2])\n        scale([1, 1, 0.3])\n        sphere(d=chair_width - 10, $fn=20);\n    \n    // Back cushion\n    translate([0, chair_depth/3, chair_height - backrest_height/2 + 2])\n        scale([1, 0.2, 1])\n        sphere(d=chair_width - 30, $fn=20);\n}\n\n// Main assembly\nunion() {\n    // Structural frame\n    chair_frame();\n    chair_legs();\n    armrests();\n    \n    // Rocking base\n    rockers();\n    \n    // Soft furnishings\n    cushion();\n}",
    "renders": true
  },
  {
    "toy": "kora",
    "openscad_code": "// Kora Toy Furniture - Realistic Style Medium Complexity\n// A scaled-down children's toy kora (West African harp-lute)\n// Dimensions: ~120mm height, printable with 2mm walls\n\n$fn = 36;\n\nmodule kora_body() {\n    // Main sound chamber - gourd-like shape\n    difference() {\n        // Primary body - ellipsoid\n        scale([1, 1.2, 0.8])\n        sphere(r=25);\n        \n        // Sound hole - front\n        translate([0, 20, 0])\n        rotate([90, 0, 0])\n        cylinder(h=30, r1=8, r2=6);\n        \n        // Sound hole - back\n        translate([0, -20, 0])\n        rotate([-90, 0, 0])\n        cylinder(h=15, r1=6, r2=4);\n    }\n}\n\nmodule neck_assembly() {\n    // Main neck shaft\n    translate([0, 0, 35])\n    rotate([-15, 0, 0])\n    cylinder(h=80, r1=4, r2=3);\n    \n    // Neck headstock - wider section\n    translate([0, 0, 110])\n    rotate([-15, 0, 0])\n    cylinder(h=15, r1=5, r2=4);\n    \n    // Bridge support\n    translate([0, -20, 35])\n    cube([4, 40, 3], center=true);\n}\n\nmodule tuning_pegs() {\n    // 11 tuning pegs on each side\n    for(i=[0:10]) {\n        // Left side pegs\n        translate([-7, 0, 115-i*6])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=2);\n        \n        // Right side pegs\n        translate([7, 0, 115-i*6])\n        rotate([0, -90, 0])\n        cylinder(h=8, r=2);\n    }\n}\n\nmodule strings() {\n    // 21 strings (11 left + 10 right)\n    color(\"goldenrod\")\n    for(i=[0:20]) {\n        // String from headstock to bridge\n        translate([i%2 ? 2 : -2, -20 + i*2, 115 - floor(i/2)*6])\n        rotate([0, atan(40/80), 0])\n        cylinder(h=45, r=0.5);\n    }\n}\n\nmodule support_structure() {\n    // Base support ring for stability\n    translate([0, 0, -5])\n    cylinder(h=5, r=30);\n    \n    // Cross-braces inside body for strength\n    translate([0, 0, 10])\n    rotate([90, 0, 0])\n    cylinder(h=40, r=2);\n    \n    translate([0, 0, 10])\n    rotate([0, 90, 0])\n    cylinder(h=40, r=2);\n}\n\nmodule decorative_elements() {\n    // Traditional decorative rings\n    translate([0, 0, 30])\n    cylinder(h=2, r=27);\n    \n    translate([0, 0, 20])\n    cylinder(h=2, r=27);\n    \n    // Neck binding details\n    for(i=[0:3]) {\n        translate([0, 0, 50 + i*15])\n        rotate([-15, 0, 0])\n        cylinder(h=2, r=4.5);\n    }\n}\n\n// Main assembly\nunion() {\n    kora_body();\n    neck_assembly();\n    tuning_pegs();\n    strings();\n    support_structure();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "toy": "draco",
    "openscad_code": "// Draco Toy Chair – OpenSCAD 3D-printable model\n// Overall height ≈ 90 mm, seat at ≈ 50 mm, suitable for 1:12 toy figures\n\n$fn = 36;           // Smooth curved parts\nwall = 2;           // 3D-printable wall thickness\n\nmodule leg(pos) {\n    // Single turned-wood style chair leg\n    translate(pos)\n    union() {\n        // Central dowel\n        cylinder(h = 50, d1 = 8, d2 = 8, center = false);\n        // Turned rings for realism\n        for (i = [0:12]) {\n            translate([0, 0, i*4])\n            cylinder(h = 2, d1 = 10, d2 = 10);\n        }\n        // Foot pad to avoid overhangs\n        translate([0, 0, 50])\n        cylinder(h = 2, d = 12);\n    }\n}\n\nmodule backrest() {\n    // Curved chair back with slats\n    difference() {\n        // Overall curved shell\n        translate([0, 0, 52])\n        rotate([90, 0, 0])\n        cylinder(h = 40, d = 60, center = true);\n        \n        // Hollow interior\n        translate([0, 0, 54])\n        rotate([90, 0, 0])\n        cylinder(h = 44, d = 60 - 2*wall, center = true);\n    }\n    \n    // Slats\n    for (i = [-15:10:15]) {\n        translate([i, 22, 65])\n        cube([wall, 4, 30], center = true);\n    }\n}\n\nmodule seat() {\n    // Cushioned seat with rounded top\n    difference() {\n        // Main cushion\n        translate([0, 0, 50])\n        cylinder(h = 10, d = 56);\n        // Hollow underside\n        translate([0, 0, 50])\n        cylinder(h = 10, d = 56 - 2*wall);\n    }\n}\n\nmodule stretcher(a, b) {\n    // Horizontal support bar between legs\n    hull() {\n        translate(a)\n        sphere(d = wall*2);\n        translate(b)\n        sphere(d = wall*2);\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    \n    // Four legs\n    leg([-20, -20, 0]);\n    leg([ 20, -20, 0]);\n    leg([-20,  20, 0]);\n    leg([ 20,  20, 0]);\n    \n    // Side stretchers\n    stretcher([-20, -20, 25], [20, -20, 25]);\n    stretcher([-20,  20, 25], [20,  20, 25]);\n    \n    // Front & back stretchers\n    stretcher([-20, -20, 15], [-20, 20, 15]);\n    stretcher([ 20, -20, 15], [ 20, 20, 15]);\n}",
    "renders": true
  },
  {
    "toy": "zemi",
    "openscad_code": "// Zemi Toy Armchair - Realistic Medium Complexity\n// Overall dimensions: ~100mm width x 90mm depth x 85mm height\n\n$fn = 32;  // Smooth curves for printing\nwall_thickness = 2;  // Standard 3D printing wall thickness\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges for comfort and safety\n    hull() {\n        for (x = [radius, size.x - radius])\n            for (y = [radius, size.y - radius])\n                for (z = [radius, size.z - radius])\n                    translate([x, y, z])\n                        sphere(r = radius);\n    }\n}\n\nmodule armchair_frame() {\n    // Main seating frame structure\n    difference() {\n        // Outer frame\n        rounded_cube([90, 85, 75], 8);\n        \n        // Hollow interior for weight reduction\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([90 - 2*wall_thickness, \n                         85 - 2*wall_thickness, \n                         75 - wall_thickness], 6);\n    }\n}\n\nmodule seat_cushion() {\n    // Plush seat cushion with tufting details\n    translate([5, 10, 75]) {\n        // Main cushion body\n        rounded_cube([80, 65, 12], 6);\n        \n        // Tufting buttons\n        for (x = [-25, 0, 25])\n            for (y = [-20, 0, 20])\n                translate([45 + x, 42.5 + y, 87])\n                    cylinder(h = 2, r = 3);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with ergonomic support\n    translate([5, 5, 75]) {\n        difference() {\n            // Main backrest shape\n            rotate([15, 0, 0])\n                rounded_cube([80, 10, 50], 5);\n            \n            // Ventilation slots\n            for (i = [1:3]) {\n                translate([10 + (i-1)*25, 5, 25])\n                    cube([5, 15, 30]);\n            }\n        }\n    }\n}\n\nmodule armrest(side) {\n    // Individual armrest with support structure\n    translate([side * 40, 0, 65]) {\n        difference() {\n            // Armrest shape\n            rotate([-15, 0, 0])\n                rounded_cube([10, 75, 20], 4);\n            \n            // Cable management hole\n            translate([5, 60, 10])\n                cylinder(h = 15, r = 2.5);\n        }\n    }\n}\n\nmodule legs() {\n    // Four sturdy legs with anti-slip feet\n    for (x = [-35, 35])\n        for (y = [-35, 35]) {\n            translate([45 + x, 42.5 + y, 0]) {\n                // Leg post\n                cylinder(h = 25, r = 4);\n                \n                // Anti-slip foot pad\n                translate([0, 0, -2])\n                    cylinder(h = 3, r = 6);\n            }\n        }\n}\n\nmodule cross_support() {\n    // X-shaped support structure between legs\n    translate([45, 42.5, 12]) {\n        // Front-back support\n        rotate([0, 0, 45])\n            cube([70, wall_thickness, 8]);\n        \n        // Side support\n        rotate([0, 0, -45])\n            cube([70, wall_thickness, 8]);\n    }\n}\n\n// Assembly the complete armchair\nunion() {\n    // Main structure\n    armchair_frame();\n    \n    // Seating components\n    seat_cushion();\n    backrest();\n    \n    // Armrests\n    armrest(1);   // Left\n    armrest(-1);  // Right\n    \n    // Support structure\n    legs();\n    cross_support();\n}",
    "renders": true
  },
  {
    "toy": "fury",
    "openscad_code": "// Realistic toy armchair for stuffed animals / dolls\n// Overall footprint: ~80×70×90 mm, wall thickness 2 mm\n\n// Main cushion module\nmodule cushion(w, d, h) {\n    difference() {\n        // Main padded volume\n        translate([0, 0, h/2])\n            minkowski() {\n                cube([w, d, h], center=true);\n                sphere(3);\n            }\n        // Hollow cavity\n        translate([0, 0, h/2])\n            scale([0.9, 0.9, 0.8])\n                minkowski() {\n                    cube([w, d, h], center=true);\n                    sphere(2);\n                }\n    }\n}\n\n// Leg module (simple turned-wood style)\nmodule leg(h) {\n    difference() {\n        // Cylindrical leg\n        cylinder(h=h, d1=10, d2=8, $fn=16);\n        // Dowel hole for peg\n        translate([0, 0, -1])\n            cylinder(h=h+2, d=4, $fn=12);\n    }\n}\n\n// Armrest module\nmodule armrest() {\n    difference() {\n        // Padded armrest\n        translate([0, 0, 10])\n            minkowski() {\n                cube([12, 50, 20], center=true);\n                sphere(3);\n            }\n        // Hollow cavity\n        translate([0, 0, 10])\n            scale([0.8, 0.8, 0.7])\n                minkowski() {\n                    cube([12, 50, 20], center=true);\n                    sphere(2);\n                }\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    difference() {\n        // Curved backrest shell\n        translate([0, 0, 40])\n            rotate([0, 10, 0])\n                minkowski() {\n                    cube([70, 12, 80], center=true);\n                    sphere(3);\n                }\n        // Hollow cavity\n        translate([0, 0, 41])\n            rotate([0, 10, 0])\n                scale([0.9, 0.7, 0.9])\n                    minkowski() {\n                        cube([70, 12, 80], center=true);\n                        sphere(2);\n                    }\n    }\n}\n\n// Seat assembly\nmodule seat() {\n    union() {\n        // Cushion\n        cushion(60, 60, 12);\n        \n        // Four legs\n        for(x = [-25, 25])\n            for(y = [-25, 25])\n                translate([x, y, -20])\n                    leg(20);\n    }\n}\n\n// Entire chair\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest mounted at rear\n    translate([0, -30, 5])\n        backrest();\n    \n    // Armrests\n    translate([-35, 0, 5])\n        armrest();\n    mirror([1, 0, 0])\n        translate([-35, 0, 5])\n            armrest();\n}",
    "renders": true
  },
  {
    "toy": "vela",
    "openscad_code": "// Realistic Toy Vela (Sailboat) – medium complexity\n// Overall length ~120 mm, fits common FDM printers\n\n$fn = 36;                  // smooth curves without overkill\nwall = 2;                  // 3D-print friendly wall thickness\n\nmodule hull() {\n    difference() {\n        // main hull body\n        hull_shape();\n        // hollow it out leaving 2 mm walls\n        translate([0, 0, wall])\n            scale([0.8, 0.8, 0.9])\n            hull_shape();\n    }\n}\n\nmodule hull_shape() {\n    // pointed bow, rounded stern\n    linear_extrude(height = 30, convexity = 4)\n    difference() {\n        offset(r = 5) offset(r = -5)\n            polygon(points = [[-60, 0], [60, -20], [60, 20]]);\n        // cut a little “keel” groove\n        translate([0, -30]) square([120, 60]);\n    }\n}\n\nmodule deck() {\n    translate([0, 0, 30])\n    cube([110, 40, wall], center = true);\n}\n\nmodule cabin() {\n    translate([-20, 0, 30 + wall])\n    difference() {\n        cube([35, 30, 25]);\n        translate([wall, wall, wall])\n            cube([35 - 2*wall, 30 - 2*wall, 25 - wall]);\n    }\n}\n\nmodule mast() {\n    translate([0, 0, 30 + wall])\n    cylinder(h = 80, d = 6, center = false);\n}\n\nmodule boom() {\n    translate([0, 0, 30 + wall + 40])\n    rotate([90, 0, 0])\n    cylinder(h = 50, d = 3);\n}\n\nmodule sail() {\n    // mainsail\n    translate([0, 0, 30 + wall + 40])\n    rotate([0, 90, 0])\n    linear_extrude(height = 1)\n        polygon([[0, 0], [0, 45], [35, 45], [35, 0]]);\n}\n\nmodule keel() {\n    translate([0, 0, -15])\n    cube([80, 6, 15], center = true);\n}\n\nmodule rudder() {\n    translate([55, 0, -10])\n    rotate([0, 10, 0])\n    cube([10, 3, 20], center = true);\n}\n\nmodule toy_details() {\n    // small round windows\n    for (i = [-1, 1]) {\n        translate([-35, i*10, 42])\n        rotate([0, 90, 0])\n        cylinder(h = wall + 1, d = 8);\n    }\n    // simple hatch\n    translate([-5, 0, 30 + wall])\n    cube([20, 15, 1]);\n}\n\nunion() {\n    hull();\n    deck();\n    cabin();\n    mast();\n    boom();\n    sail();\n    keel();\n    rudder();\n    toy_details();\n}",
    "renders": true
  },
  {
    "toy": "rosc",
    "openscad_code": "// Rosc Toy Chair - Medium Complexity Realistic Style\n// 3D printable toy chair with structural details\n\n// Parameters\nchair_width = 60;\nchair_depth = 50;\nchair_height = 80;\nseat_height = 40;\nleg_thickness = 4;\nback_thickness = 3;\narmrest_height = 20;\n\n// Main chair module\nmodule chair() {\n    union() {\n        // Seat\n        seat();\n        \n        // Backrest\n        backrest();\n        \n        // Legs\n        legs();\n        \n        // Armrests\n        armrests();\n        \n        // Support bars\n        support_bars();\n    }\n}\n\n// Seat cushion module\nmodule seat() {\n    translate([0, 0, seat_height/2]) {\n        difference() {\n            // Main seat block\n            cube([chair_width, chair_depth, seat_height], center=true);\n            \n            // Rounded top edge\n            translate([0, 0, seat_height/2 - 1]) {\n                cube([chair_width - 4, chair_depth - 4, 2], center=true);\n            }\n            \n            // Cushion indent\n            translate([0, 0, seat_height/2 - 1]) {\n                cube([chair_width - 8, chair_depth - 8, 2], center=true);\n            }\n        }\n        \n        // Seat frame\n        difference() {\n            cube([chair_width + 2, chair_depth + 2, seat_height + 2], center=true);\n            cube([chair_width, chair_depth, seat_height + 4], center=true);\n        }\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    translate([0, chair_depth/2 - 2, seat_height + back_thickness/2]) {\n        difference() {\n            // Main backrest\n            cube([chair_width - 10, back_thickness, chair_height - seat_height], center=true);\n            \n            // Backrest curve\n            for(i = [-1, 1]) {\n                translate([i * (chair_width/2 - 15), 0, (chair_height - seat_height)/2 - 5]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=10, r=5, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Backrest slats\n        for(i = [-1, 0, 1]) {\n            translate([i * 15, 0, (chair_height - seat_height)/2 - 10]) {\n                cube([4, back_thickness, chair_height - seat_height - 20], center=true);\n            }\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([\n                x * (chair_width/2 - leg_thickness/2 - 5),\n                y * (chair_depth/2 - leg_thickness/2 - 5),\n                seat_height/2 - 2\n            ]) {\n                // Main leg\n                cube([leg_thickness, leg_thickness, seat_height], center=true);\n                \n                // Leg foot\n                translate([0, 0, -seat_height/2 + 2]) {\n                    cube([leg_thickness + 2, leg_thickness + 2, 4], center=true);\n                }\n                \n                // Leg brace\n                if(y == 1) {\n                    translate([0, 0, seat_height/4]) {\n                        cube([leg_thickness, leg_thickness + 2, 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Armrests module\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([\n            side * (chair_width/2 - 5),\n            0,\n            seat_height + armrest_height/2\n        ]) {\n            // Armrest post\n            cube([leg_thickness, leg_thickness, armrest_height], center=true);\n            \n            // Armrest top\n            translate([\n                side * 5,\n                -5,\n                armrest_height/2\n            ]) {\n                cube([20, 15, 3], center=true);\n            }\n        }\n    }\n}\n\n// Support bars module\nmodule support_bars() {\n    // Front support\n    translate([0, -chair_depth/2 + 10, seat_height/4]) {\n        cube([chair_width - 10, 3, 2], center=true);\n    }\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([\n            side * (chair_width/2 - 10),\n            0,\n            seat_height/4\n        ]) {\n            rotate([0, 0, 90]) {\n                cube([chair_depth - 10, 3, 2], center=true);\n            }\n        }\n    }\n}\n\n// Generate the chair\nchair();",
    "renders": true
  },
  {
    "toy": "juno",
    "openscad_code": "// Juno Toy Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm W x 70mm D x 80mm H\n\n// Parameters\nchair_width = 60;\nchair_depth = 70;\nchair_height = 80;\nseat_height = 45;\nleg_thickness = 8;\nbackrest_height = 35;\ncushion_thickness = 6;\nwall_thickness = 2;\n\n// Main chair module\nmodule juno_chair() {\n    // Back legs\n    translate([-chair_width/2 + leg_thickness/2, 0, 0]) {\n        cylinder(h=seat_height, r=leg_thickness/2, $fn=20);\n    }\n    translate([chair_width/2 - leg_thickness/2, 0, 0]) {\n        cylinder(h=seat_height, r=leg_thickness/2, $fn=20);\n    }\n    \n    // Front legs\n    translate([-chair_width/2 + leg_thickness/2, chair_depth - leg_thickness, 0]) {\n        cylinder(h=seat_height, r=leg_thickness/2, $fn=20);\n    }\n    translate([chair_width/2 - leg_thickness/2, chair_depth - leg_thickness, 0]) {\n        cylinder(h=seat_height, r=leg_thickness/2, $fn=20);\n    }\n    \n    // Seat frame\n    difference() {\n        // Outer seat\n        translate([0, chair_depth/2, seat_height/2]) {\n            cube([chair_width, chair_depth, seat_height], center=true);\n        }\n        // Inner cutout\n        translate([0, chair_depth/2, seat_height/2 + wall_thickness]) {\n            cube([chair_width - 2*wall_thickness, chair_depth - 2*wall_thickness, seat_height], center=true);\n        }\n    }\n    \n    // Seat cushion\n    translate([0, chair_depth/2, seat_height + cushion_thickness/2]) {\n        cube([chair_width - 10, chair_depth - 10, cushion_thickness], center=true);\n    }\n    \n    // Backrest posts\n    translate([-chair_width/2 + leg_thickness, chair_depth/2, seat_height + backrest_height/2]) {\n        cube([leg_thickness, leg_thickness, backrest_height]);\n    }\n    translate([chair_width/2 - 2*leg_thickness, chair_depth/2, seat_height + backrest_height/2]) {\n        cube([leg_thickness, leg_thickness, backrest_height]);\n    }\n    \n    // Backrest slats\n    for(i = [1:3]) {\n        translate([0, chair_depth/2 - 5 - (i-1)*8, seat_height + 5 + (i-1)*10]) {\n            cube([chair_width - 20, 4, 2]);\n        }\n    }\n    \n    // Armrest supports\n    translate([-chair_width/2 + leg_thickness/2, chair_depth/2, seat_height + 15]) {\n        cube([leg_thickness, leg_thickness, 20]);\n    }\n    translate([chair_width/2 - leg_thickness/2, chair_depth/2, seat_height + 15]) {\n        cube([leg_thickness, leg_thickness, 20]);\n    }\n    \n    // Armrests\n    translate([-chair_width/2 + leg_thickness/2, chair_depth/2 - 5, seat_height + 25]) {\n        cube([chair_width/4, 5, 4]);\n    }\n    translate([chair_width/2 - leg_thickness/2, chair_depth/2 - 5, seat_height + 25]) {\n        cube([-chair_width/4, 5, 4]);\n    }\n    \n    // Cross supports\n    translate([0, chair_depth/4, leg_thickness]) {\n        cube([chair_width - leg_thickness, leg_thickness, leg_thickness]);\n    }\n    translate([0, 3*chair_depth/4, leg_thickness]) {\n        cube([chair_width - leg_thickness, leg_thickness, leg_thickness]);\n    }\n}\n\n// Render the chair\njuno_chair();",
    "renders": true
  },
  {
    "toy": "siro",
    "openscad_code": "// Siro (toy rocking horse) - realistic style, medium complexity\n// Dimensions: 120mm length, 80mm height, 50mm width\n\n$fn = 32;\n\n// Main module for the complete toy\nmodule siro_rocking_horse() {\n    // Rocking base\n    union() {\n        // Rockers - curved base\n        translate([-60, -25, 0])\n            rotate([90, 0, 0])\n                cylinder(h=50, r1=25, r2=25);\n        \n        translate([60, -25, 0])\n            rotate([90, 0, 0])\n                cylinder(h=50, r1=25, r2=25);\n        \n        // Rocker connecting bars\n        translate([0, -25, 20])\n            cube([120, 4, 4], center=true);\n        translate([0, -25, 5])\n            cube([120, 4, 4], center=true);\n        \n        // Horse body\n        horse_body();\n        \n        // Head and neck\n        translate([-45, 0, 55])\n            rotate([15, 0, 0])\n                horse_head();\n        \n        // Tail\n        translate([45, 0, 40])\n            rotate([0, -20, 0])\n                horse_tail();\n        \n        // Front legs\n        translate([-30, -20, 25])\n            rotate([0, 0, 10])\n                cylinder(h=30, d=8);\n        translate([-30, 20, 25])\n            rotate([0, 0, -10])\n                cylinder(h=30, d=8);\n        \n        // Rear legs\n        translate([30, -20, 25])\n            rotate([0, 0, -10])\n                cylinder(h=30, d=8);\n        translate([30, 20, 25])\n            rotate([0, 0, 10])\n                cylinder(h=30, d=8);\n        \n        // Saddle\n        saddle();\n        \n        // Mane\n        mane();\n    }\n}\n\n// Horse body module\nmodule horse_body() {\n    union() {\n        // Main torso\n        translate([0, 0, 35])\n            scale([1.2, 0.8, 1])\n                sphere(d=40);\n        \n        // Belly\n        translate([0, 0, 20])\n            scale([1.4, 0.9, 0.6])\n                sphere(d=40);\n        \n        // Back\n        translate([0, 0, 45])\n            scale([1.3, 0.7, 0.4])\n                sphere(d=40);\n    }\n}\n\n// Horse head module\nmodule horse_head() {\n    union() {\n        // Head\n        scale([0.8, 0.7, 0.9])\n            sphere(d=25);\n        \n        // Snout\n        translate([-12, 0, -2])\n            scale([1.2, 0.8, 0.6])\n                sphere(d=15);\n        \n        // Ears\n        translate([0, 8, 10])\n            rotate([0, -20, 0])\n                cylinder(h=12, d1=4, d2=2);\n        translate([0, -8, 10])\n            rotate([0, 20, 0])\n                cylinder(h=12, d1=4, d2=2);\n    }\n}\n\n// Horse tail module\nmodule horse_tail() {\n    // Curved tail\n    for(i = [0:5:25]) {\n        translate([45 + i/2, 0, 40 - i/3])\n            rotate([0, -30 + i, 0])\n                cylinder(h=3, d=6 - i/5);\n    }\n}\n\n// Saddle module\nmodule saddle() {\n    difference() {\n        // Saddle base\n        translate([0, 0, 45])\n            scale([1.5, 0.7, 0.3])\n                cube([30, 30, 15], center=true);\n        \n        // Saddle indentation\n        translate([0, 0, 48])\n            scale([1.3, 0.6, 0.4])\n                cube([25, 25, 15], center=true);\n    }\n}\n\n// Mane module\nmodule mane() {\n    // Series of cylinders for mane\n    for(i = [-20:5:20]) {\n        translate([i/2, 0, 50 + abs(i)/3])\n            rotate([90 - abs(i), 0, 0])\n                cylinder(h=8 + abs(i)/2, d=3);\n    }\n}\n\n// Generate the complete toy\nsiro_rocking_horse();",
    "renders": true
  },
  {
    "toy": "lexi",
    "openscad_code": "// Lexi Toy - Realistic Armchair\n// Medium complexity 3D printable toy furniture\n\n$fn = 50;  // Smooth curves for realistic look\n\n// Overall dimensions\nchair_width = 70;\nchair_depth = 75;\nchair_height = 90;\nseat_height = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule armchair() {\n    // Main seat base\n    difference() {\n        // Solid seat block\n        translate([0, 0, seat_height/2])\n            cube([chair_width - 20, chair_depth - 15, seat_height], center = true);\n        \n        // Hollow out seat\n        translate([0, 0, seat_height/2])\n            cube([chair_width - 20 - wall*2, chair_depth - 15 - wall*2, seat_height - wall], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, seat_height + 6])\n        rounded_cushion(chair_width - 30, chair_depth - 30, 12);\n    \n    // Backrest frame\n    translate([0, -chair_depth/2 + 10, chair_height/2 + 20])\n        difference() {\n            cube([chair_width, 15, chair_height - 20], center = true);\n            translate([0, 0, 5])\n                cube([chair_width - wall*2, 15 + 1, chair_height - 20 - wall*2], center = true);\n        }\n    \n    // Backrest cushion\n    translate([0, -chair_depth/2 + 17, chair_height - 25])\n        rounded_cushion(chair_width - 20, 10, 25);\n    \n    // Left armrest\n    translate([-chair_width/2 + 10, 0, seat_height + 15])\n        difference() {\n            cube([20, chair_depth - 10, 30], center = true);\n            translate([wall/2, 0, 5])\n                cube([20 - wall, chair_depth - 10 - wall*2, 30 - wall*2], center = true);\n        }\n    \n    // Right armrest\n    translate([chair_width/2 - 10, 0, seat_height + 15])\n        difference() {\n            cube([20, chair_depth - 10, 30], center = true);\n            translate([-wall/2, 0, 5])\n                cube([20 - wall, chair_depth - 10 - wall*2, 30 - wall*2], center = true);\n        }\n    \n    // Armrest cushions\n    translate([-chair_width/2 + 10, 0, seat_height + 30])\n        rounded_cushion(15, chair_depth - 20, 5);\n    translate([chair_width/2 - 10, 0, seat_height + 30])\n        rounded_cushion(15, chair_depth - 20, 5);\n    \n    // Front legs\n    for(x = [-1, 1]) {\n        translate([x * (chair_width/2 - 15), chair_depth/2 - 10, 0])\n            cylinder(h = seat_height, r = 8);\n        translate([x * (chair_width/2 - 15), -chair_depth/2 + 25, 0])\n            cylinder(h = seat_height, r = 8);\n    }\n    \n    // Cross support beams\n    translate([0, chair_depth/2 - 10, seat_height/2])\n        difference() {\n            cube([chair_width - 30, 10, 8], center = true);\n            cube([chair_width - 30 - wall*2, 10 - wall*2, 8 - wall], center = true);\n        }\n    \n    translate([0, -chair_depth/2 + 25, seat_height/2])\n        difference() {\n            cube([chair_width - 30, 10, 8], center = true);\n            cube([chair_width - 30 - wall*2, 10 - wall*2, 8 - wall], center = true);\n        }\n}\n\nmodule rounded_cushion(w, d, h) {\n    // Create a rounded cushion shape\n    difference() {\n        // Main cushion body with rounded top\n        union() {\n            translate([0, 0, h/2 - 3])\n                cube([w, d, h - 3], center = true);\n            translate([0, 0, h - 3])\n                scale([1, 1, 0.3])\n                    sphere(r = min(w, d)/2);\n        }\n        \n        // Hollow out\n        translate([0, 0, h/2])\n            cube([w - wall*2, d - wall*2, h], center = true);\n    }\n}\n\n// Generate the toy armchair\narmchair();",
    "renders": true
  },
  {
    "toy": "zorn",
    "openscad_code": "// Zorn toy chair - realistic style\n// Overall dimensions: 60mm wide x 55mm deep x 85mm tall\n\nmodule leg() {\n    // Single chair leg with rounded edges and toy-style proportions\n    difference() {\n        // Main leg body\n        translate([-4, -4, 0])\n            cylinder(h = 40, d1 = 8, d2 = 6, $fn = 16);\n        \n        // Chamfer bottom edge\n        translate([-4.5, -4.5, -0.5])\n            cylinder(h = 2, d1 = 9, d2 = 7, $fn = 16);\n    }\n}\n\nmodule back_spindle() {\n    // Vertical spindle for chair back\n    cylinder(h = 35, d = 3, $fn = 8);\n}\n\nmodule seat_cushion() {\n    // Padded seat with realistic cushion appearance\n    difference() {\n        // Main cushion\n        translate([0, 0, 40])\n            cube([50, 45, 8], center = true);\n        \n        // Rounded top edges\n        for (x = [-20:20:40])\n            for (y = [-15:15:30])\n                translate([x, y, 44])\n                    sphere(d = 8, $fn = 16);\n    }\n}\n\nmodule back_support() {\n    // Chair back with horizontal slats\n    union() {\n        // Top rail\n        translate([0, -20, 75])\n            cube([50, 8, 10], center = true);\n        \n        // Bottom rail\n        translate([0, -20, 50])\n            cube([50, 8, 10], center = true);\n        \n        // Vertical spindles\n        for (x = [-15:10:15])\n            translate([x, -20, 62.5])\n                back_spindle();\n    }\n}\n\nmodule stretcher() {\n    // Horizontal support between legs\n    cube([50, 4, 4], center = true);\n}\n\n// Main chair assembly\nunion() {\n    // Four legs positioned at corners\n    translate([-20, -15, 0]) leg();\n    translate([20, -15, 0]) leg();\n    translate([-20, 15, 0]) leg();\n    translate([20, 15, 0]) leg();\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Back support assembly\n    back_support();\n    \n    // Front stretcher\n    translate([0, 0, 20])\n        stretcher();\n    \n    // Side stretchers\n    translate([0, -15, 20])\n        rotate([0, 0, 90])\n            stretcher();\n    \n    translate([0, 15, 20])\n        rotate([0, 0, 90])\n            stretcher();\n    \n    // Toy-style rounded corners on back rail\n    translate([-25, -20, 75])\n        sphere(d = 8, $fn = 16);\n    translate([25, -20, 75])\n        sphere(d = 8, $fn = 16);\n}",
    "renders": true
  },
  {
    "toy": "tavi",
    "openscad_code": "// OpenSCAD code for a realistic toy tavi (wooden toy stool)\n// Overall dimensions: 60mm wide x 60mm deep x 70mm high\n\n// Parameters\nseat_d = 60;          // Seat diameter\nseat_h = 10;          // Seat thickness\nleg_w = 8;            // Leg width\nleg_h = 55;           // Leg height\nstretcher_d = 6;      // Stretcher diameter\nstretcher_pos = 25;   // Stretcher height from ground\nedge_r = 2;           // Edge radius for safety\ntol = 0.3;            // Print tolerance for joints\n\n// Main module\nmodule tavi_toy() {\n    // Seat with rounded top\n    translate([0, 0, leg_h + seat_h]) {\n        // Main seat disc\n        cylinder(h = seat_h, d = seat_d, $fn = 64);\n        \n        // Rounded top edge\n        translate([0, 0, seat_h]) {\n            cylinder(h = edge_r, d1 = seat_d, d2 = seat_d - 2*edge_r, $fn = 64);\n        }\n        \n        // Seat handle hole (for toy functionality)\n        translate([0, 15, seat_h/2])\n            rotate([90, 0, 0])\n                cylinder(h = 40, d = 8, $fn = 32);\n    }\n    \n    // Four legs\n    leg_positions = [\n        [seat_d/2 - leg_w - 5, seat_d/2 - leg_w - 5],\n        [-seat_d/2 + leg_w + 5, seat_d/2 - leg_w - 5],\n        [seat_d/2 - leg_w - 5, -seat_d/2 + leg_w + 5],\n        [-seat_d/2 + leg_w + 5, -seat_d/2 + leg_w + 5]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], 0]) {\n            // Main leg\n            cube([leg_w, leg_w, leg_h], center = true);\n            \n            // Leg taper\n            translate([0, 0, leg_h/2 - 5]) {\n                cube([leg_w - 2, leg_w - 2, leg_h - 10], center = true);\n            }\n            \n            // Foot detail\n            translate([0, 0, -2]) {\n                cylinder(h = 4, d = leg_w + 2, $fn = 6);\n            }\n        }\n    }\n    \n    // Side stretchers (X-direction)\n    for(y = [seat_d/2 - leg_w - 5, -seat_d/2 + leg_w + 5]) {\n        translate([0, y, stretcher_pos]) {\n            cube([seat_d - 2*leg_w - 10, stretcher_d, stretcher_d], center = true);\n        }\n    }\n    \n    // Front/back stretchers (Y-direction)\n    for(x = [seat_d/2 - leg_w - 5, -seat_d/2 + leg_w + 5]) {\n        translate([x, 0, stretcher_pos]) {\n            cube([stretcher_d, seat_d - 2*leg_w - 10, stretcher_d], center = true);\n        }\n    }\n    \n    // Center support block for structure\n    translate([0, 0, stretcher_pos]) {\n        cube([stretcher_d + 2, stretcher_d + 2, stretcher_d + 2], center = true);\n    }\n    \n    // Decorative dowel details on legs\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], leg_h/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = leg_w + 2, d = 3, $fn = 16);\n            }\n        }\n    }\n    \n    // Safety chamfers on leg edges\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], leg_h/2]) {\n            // Top chamfers\n            for(x = [-1, 1])\n                for(y = [-1, 1])\n                    translate([x*(leg_w/2 - edge_r), y*(leg_w/2 - edge_r), leg_h/2 - edge_r])\n                        sphere(r = edge_r, $fn = 16);\n        }\n    }\n}\n\n// Render the toy\ntavi_toy();",
    "renders": true
  },
  {
    "toy": "nira",
    "openscad_code": "// Medium-complexity realistic NIRA toy chair (50 mm seat height, 100 mm total height)\n// Designed for 3D printing: 2 mm walls, no steep overhangs, printable upright\n\n// Main module: entire chair\nmodule nira_chair() {\n    union() {\n        // Seat\n        seat();\n\n        // Backrest\n        backrest();\n\n        // Four legs\n        for (x = [-20, 20])\n            for (z = [-20, 20])\n                translate([x, 0, z])\n                    leg();\n\n        // Stretchers between legs\n        stretchers();\n\n        // Decorative rivets\n        rivets();\n    }\n}\n\n// Seat cushion: slightly rounded top, 2 mm wall\nmodule seat() {\n    difference() {\n        // Outer cushion\n        translate([0, 0, 50])\n            minkowski() {\n                cube([50, 50, 12], center = true);\n                sphere(d = 5);\n            }\n        // Hollow inside\n        translate([0, 0, 50])\n            minkowski() {\n                cube([46, 46, 14], center = true);\n                sphere(d = 5);\n            }\n    }\n}\n\n// Curved backrest with holes\nmodule backrest() {\n    difference() {\n        // Backrest panel\n        translate([0, 25, 75])\n            rotate([90, 0, 0])\n                cylinder(h = 50, d1 = 40, d2 = 45, center = true);\n        // Hollow back\n        translate([0, 25, 75])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d1 = 36, d2 = 41, center = true);\n        // Three decorative holes\n        for (i = [-1:1])\n            translate([0, 26, 75 + i * 12])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, d = 8, center = true);\n    }\n}\n\n// Cylindrical legs, 2 mm shell\nmodule leg() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = 50, d = 12);\n        // Inner hole\n        translate([0, 0, -1])\n            cylinder(h = 52, d = 8);\n    }\n}\n\n// Horizontal stretchers between legs\nmodule stretchers() {\n    // Front stretcher\n    translate([0, 20, 25])\n        cube([44, 4, 8], center = true);\n    // Back stretcher\n    translate([0, -20, 25])\n        cube([44, 4, 8], center = true);\n    // Side stretchers\n    translate([24, 0, 25])\n        rotate([0, 0, 90])\n            cube([40, 4, 8], center = true);\n    translate([-24, 0, 25])\n        rotate([0, 0, 90])\n            cube([40, 4, 8], center = true);\n}\n\n// Toy-style rivets on joints\nmodule rivets() {\n    for (x = [-20, 20])\n        for (z = [-20, 20])\n            translate([x, 0, z])\n                cylinder(h = 2, d = 4);\n}\n\n// Render the chair\nnira_chair();",
    "renders": true
  },
  {
    "toy": "kest",
    "openscad_code": "// Toy Kest (Small Falcon) - Medium Complexity Realistic Style\n\n// Overall dimensions\nkest_length = 120;\nkest_height = 60;\nkest_wingspan = 100;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule kest_body() {\n    // Main body\n    hull() {\n        translate([-10, 0, 0]) sphere(d=25);\n        translate([25, 0, 0]) sphere(d=18);\n    }\n    \n    // Chest detail\n    translate([5, 0, -5]) scale([1, 0.8, 0.6]) sphere(d=18);\n    \n    // Tail base\n    translate([35, 0, 0]) cube([15, 8, 6], center=true);\n}\n\nmodule kest_head() {\n    // Head\n    translate([-15, 0, 8]) sphere(d=16);\n    \n    // Beak\n    translate([-25, 0, 8]) rotate([0, -20, 0]) \n        cylinder(h=12, d1=8, d2=2, center=true);\n    \n    // Eyes\n    translate([-18, 5, 10]) sphere(d=3);\n    translate([-18, -5, 10]) sphere(d=3);\n    \n    // Eye rings\n    translate([-17, 5, 10]) sphere(d=5);\n    translate([-17, -5, 10]) sphere(d=5);\n}\n\nmodule kest_wing() {\n    // Main wing shape\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(d=8);\n            translate([35, 0, 0]) sphere(d=4);\n            translate([30, 15, 2]) sphere(d=3);\n        }\n        \n        // Wing tip detail\n        translate([35, 0, 0]) sphere(d=2);\n    }\n    \n    // Wing feathers\n    for(i = [0:4]) {\n        translate([10 + i*6, 8 + i*2, 0]) \n            rotate([0, 0, -30 + i*5]) \n            cube([8, 2, 0.5], center=true);\n    }\n}\n\nmodule kest_legs() {\n    // Left leg\n    translate([5, 8, -10]) {\n        cylinder(h=12, d=4, center=true);\n        translate([0, 0, -7]) sphere(d=5);\n    }\n    \n    // Right leg\n    translate([5, -8, -10]) {\n        cylinder(h=12, d=4, center=true);\n        translate([0, 0, -7]) sphere(d=5);\n    }\n    \n    // Feet - simplified claws\n    translate([5, 12, -18]) rotate([0, 90, 0]) \n        cylinder(h=3, d1=4, d2=2);\n    translate([5, -12, -18]) rotate([0, 90, 0]) \n        cylinder(h=3, d1=4, d2=2);\n}\n\nmodule kest_tail() {\n    // Tail feathers\n    difference() {\n        hull() {\n            translate([45, 0, 2]) sphere(d=6);\n            translate([55, 0, 2]) sphere(d=4);\n            translate([52, 8, 2]) sphere(d=3);\n            translate([52, -8, 2]) sphere(d=3);\n        }\n        \n        // Tail notch\n        translate([52, 0, 2]) sphere(d=6);\n    }\n    \n    // Tail pattern\n    for(i = [0:3]) {\n        translate([48 + i*2, 0, 3]) \n            cube([1, 12 - i*2, 0.5], center=true);\n    }\n}\n\nmodule kest_back_pattern() {\n    // Feather pattern on back\n    for(i = [0:4]) {\n        translate([10 + i*5, 0, 10]) \n            rotate([45 - i*5, 0, 0]) \n            cube([6, 3, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    kest_body();\n    kest_head();\n    kest_tail();\n    \n    // Wings - left and right\n    translate([10, 0, 5]) rotate([0, 0, 20]) kest_wing();\n    translate([10, 0, 5]) mirror([0, 1, 0]) rotate([0, 0, 20]) kest_wing();\n    \n    // Legs and feet\n    kest_legs();\n    \n    // Back details\n    kest_back_pattern();\n}",
    "renders": true
  },
  {
    "toy": "plank",
    "openscad_code": "// Toy Plank - realistic medium complexity\n// A 3D printable toy plank with traditional construction details\n\n// Overall dimensions\nplank_length = 120;\nplank_width = 30;\nplank_thickness = 8;\n\n// Wood grain effect parameters\ngroove_depth = 0.5;\ngroove_spacing = 3;\n\n// Nail details\nnail_radius = 1.5;\nnail_head_radius = 2.5;\nnail_length = 3;\n\n// Rounded edge radius\nedge_radius = 2;\n\n// Main plank body with rounded edges\nmodule plank_body() {\n    difference() {\n        // Main block with rounded edges\n        minkowski() {\n            cube([plank_length - 2*edge_radius, plank_width - 2*edge_radius, plank_thickness - 2*edge_radius]);\n            sphere(edge_radius);\n        }\n        \n        // Wood grain grooves on top\n        translate([0, 0, plank_thickness - groove_depth]) {\n            for(i = [groove_spacing : groove_spacing : plank_length - groove_spacing]) {\n                translate([i, 0, 0])\n                    cube([0.5, plank_width, groove_depth + 0.1]);\n            }\n        }\n    }\n}\n\n// Nail detail module\nmodule nail(x_pos, y_pos) {\n    translate([x_pos, y_pos, plank_thickness/2]) {\n        union() {\n            // Nail shaft\n            cylinder(h = nail_length, r = nail_radius, $fn = 12);\n            // Nail head\n            translate([0, 0, nail_length])\n                cylinder(h = 1, r1 = nail_head_radius, r2 = nail_radius, $fn = 12);\n        }\n    }\n}\n\n// End grain detail\nmodule end_grain() {\n    for(i = [0 : 3 : plank_width - 3]) {\n        translate([-plank_length/2 - 0.1, i + 1.5, 0]) {\n            rotate([0, 90, 0])\n                cylinder(h = 0.5, r1 = 1, r2 = 0.7, $fn = 8);\n        }\n    }\n}\n\n// Knot hole detail\nmodule knot_hole(x_pos, y_pos) {\n    translate([x_pos, y_pos, plank_thickness/2]) {\n        rotate([90, 0, 0])\n            cylinder(h = plank_thickness + 1, r1 = 3, r2 = 2, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main plank\n    plank_body();\n    \n    // End grain details on both ends\n    translate([plank_length/2, plank_width/2, plank_thickness/2])\n        end_grain();\n    mirror([1, 0, 0])\n        translate([plank_length/2, plank_width/2, plank_thickness/2])\n            end_grain();\n    \n    // Nail details\n    nail(10, 10);\n    nail(plank_length - 10, 10);\n    nail(10, plank_width - 10);\n    nail(plank_length - 10, plank_width - 10);\n    \n    // Knot holes for realistic wood appearance\n    knot_hole(plank_length * 0.3, plank_width * 0.4);\n    knot_hole(plank_length * 0.7, plank_width * 0.6);\n    \n    // Small check crack detail\n    translate([plank_length * 0.5, 0, plank_thickness - 0.2]) {\n        cube([15, 0.5, 0.2]);\n    }\n}",
    "renders": true
  },
  {
    "toy": "slab",
    "openscad_code": "// Realistic Toy Slab (Medium Complexity)\n// Dimensions: 120mm x 80mm x 20mm (slab) + legs\n// Wall thickness: 2mm throughout\n// Designed for 3D printing - no overhangs\n\n// Main slab body\nmodule slab_body() {\n    difference() {\n        // Main slab block\n        cube([120, 80, 20], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, 2])\n            cube([116, 76, 16], center=true);\n    }\n}\n\n// Rounded corners using cylinders\nmodule rounded_corners() {\n    for(x = [-58, 58])\n        for(y = [-38, 38]) {\n            translate([x, y, 0])\n                cylinder(h=20, r=2, $fn=16, center=true);\n        }\n}\n\n// Toy-style legs with peg joints\nmodule legs() {\n    positions = [[-50, -30, -12], [50, -30, -12], [-50, 30, -12], [50, 30, -12]];\n    \n    for(pos = positions) {\n        translate(pos)\n            union() {\n                // Leg body\n                cylinder(h=12, r=4, $fn=8);\n                \n                // Peg joint on top\n                translate([0, 0, 6])\n                    cylinder(h=4, r=2.5, $fn=8);\n                \n                // Base foot\n                translate([0, 0, -7])\n                    cylinder(h=2, r=5, $fn=8);\n            }\n    }\n}\n\n// Peg holes for leg attachment\nmodule leg_holes() {\n    positions = [[-50, -30, -10], [50, -30, -10], [-50, 30, -10], [50, 30, -10]];\n    \n    for(pos = positions) {\n        translate(pos)\n            cylinder(h=6, r=2.6, $fn=8);\n    }\n}\n\n// Surface texture - toy brick studs\nmodule surface_studs() {\n    for(x = [-45:18:45])\n        for(y = [-27:18:27]) {\n            translate([x, y, 11])\n                cylinder(h=2, r=3, $fn=12);\n        }\n}\n\n// Side reinforcement ribs\nmodule side_ribs() {\n    // Long side ribs\n    for(y = [-38, 38]) {\n        translate([0, y, 0])\n            cube([114, 2, 16], center=true);\n    }\n    \n    // Short side ribs\n    for(x = [-58, 58]) {\n        translate([x, 0, 0])\n            cube([2, 74, 16], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main slab with rounded corners\n    union() {\n        slab_body();\n        rounded_corners();\n    }\n    \n    // Add legs\n    legs();\n    \n    // Add surface details\n    surface_studs();\n    \n    // Add structural ribs\n    side_ribs();\n}\n\n// Difference for leg holes\ntranslate([0, 0, 10])\n    leg_holes();",
    "renders": true
  },
  {
    "toy": "beam",
    "openscad_code": "// Wooden toy beam with realistic proportions and structural details\n// Overall dimensions: 100mm length x 20mm width x 20mm height\n\nmodule wood_texture() {\n    // Create subtle wood grain texture using small cylinders\n    for (i = [0:5:100]) {\n        translate([i, 0, -1])\n            cylinder(h = 22, r = 0.5, $fn = 6);\n    }\n}\n\nmodule beam_body() {\n    // Main beam body with rounded edges\n    difference() {\n        // Main rectangular body\n        translate([0, 0, 0])\n            cube([100, 20, 20], center = true);\n        \n        // Round the edges slightly\n        translate([48, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 100, r = 2, center = true);\n        translate([-48, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 100, r = 2, center = true);\n    }\n}\n\nmodule connector_holes() {\n    // Create holes for connecting to other beams\n    // Left connection hole\n    translate([-45, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 4, $fn = 20);\n    \n    // Right connection hole  \n    translate([45, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 4, $fn = 20);\n    \n    // Bottom connection holes\n    translate([0, 0, -8])\n        cube([8, 8, 4], center = true);\n}\n\nmodule reinforcement_plates() {\n    // Add metal reinforcement plates at stress points\n    color([0.7, 0.7, 0.7])\n    union() {\n        // Left plate\n        translate([-45, 0, 10])\n            cube([8, 18, 2], center = true);\n        \n        // Right plate\n        translate([45, 0, 10])\n            cube([8, 18, 2], center = true);\n        \n        // Bottom plate\n        translate([0, 0, -10])\n            cube([96, 18, 2], center = true);\n    }\n}\n\nmodule screw_details() {\n    // Add screw heads on reinforcement plates\n    color([0.5, 0.5, 0.5])\n    for (x = [-40, -50]) {\n        for (y = [-6, 0, 6]) {\n            translate([x, y, 11])\n                cylinder(h = 1.5, r = 2, $fn = 6);\n        }\n    }\n}\n\nmodule part_numbers() {\n    // Add part number engraving\n    translate([0, 0, 11])\n        linear_extrude(height = 0.5) {\n            text(\"BEAM-100\", size = 6, halign = \"center\", valign = \"center\");\n        }\n}\n\n// Main assembly\nunion() {\n    // Base beam structure\n    union() {\n        beam_body();\n        \n        // Wood texture overlay\n        color([0.82, 0.71, 0.55]) {\n            wood_texture();\n        }\n    }\n    \n    // Structural details\n    reinforcement_plates();\n    screw_details();\n    \n    // Functional features\n    connector_holes();\n    \n    // Identification\n    part_numbers();\n}",
    "renders": true
  },
  {
    "toy": "tile",
    "openscad_code": "$fn = 32;\n\n// Overall dimensions\ntile_width = 60;\ntile_height = 60;\ntile_thickness = 10;\n\n// Wall thickness\nwall = 2;\n\n// Stud dimensions\nstud_diameter = 5;\nstud_height = 2;\nstud_pitch = 8;\n\n// Create a single LEGO-compatible tile\nmodule tile() {\n    difference() {\n        // Main tile body\n        cube([tile_width, tile_height, tile_thickness], center = true);\n        \n        // Hollow bottom cavity\n        translate([0, 0, -tile_thickness/2 + wall])\n            cube([tile_width - 2*wall, tile_height - 2*wall, tile_thickness - wall], center = true);\n        \n        // Interior support ribs for strength\n        for (x = [-tile_width/2 + 10 : 20 : tile_width/2 - 10]) {\n            for (y = [-tile_height/2 + 10 : 20 : tile_height/2 - 10]) {\n                translate([x, y, -tile_thickness/2 + wall/2])\n                    cube([2, 2, wall], center = true);\n            }\n        }\n    }\n    \n    // Top studs for connection\n    for (x = [-tile_width/2 + stud_pitch/2 : stud_pitch : tile_width/2 - stud_pitch/2]) {\n        for (y = [-tile_height/2 + stud_pitch/2 : stud_pitch : tile_height/2 - stud_pitch/2]) {\n            translate([x, y, tile_thickness/2])\n                cylinder(d = stud_diameter, h = stud_height, center = false);\n        }\n    }\n    \n    // Bottom tubes for stud connection (anti-stud)\n    for (x = [-tile_width/2 + stud_pitch : stud_pitch*2 : tile_width/2 - stud_pitch]) {\n        for (y = [-tile_height/2 + stud_pitch : stud_pitch*2 : tile_height/2 - stud_pitch]) {\n            translate([x, y, -tile_thickness/2 + wall])\n                difference() {\n                    cylinder(d = 6.5, h = wall, center = false);\n                    translate([0, 0, -0.1])\n                        cylinder(d = 4.9, h = wall + 0.2, center = false);\n                }\n        }\n    }\n    \n    // Rounded edges on top surface\n    translate([0, 0, tile_thickness/2 - 0.5])\n        minkowski() {\n            cube([tile_width - 0.5, tile_height - 0.5, 1], center = true);\n            cylinder(d = 0.5, h = 0.1, center = true);\n        }\n}\n\n// Render the tile\ntile();",
    "renders": true
  },
  {
    "toy": "arch",
    "openscad_code": "// Toy Arch - Realistic Medium Complexity\n// 3D printable toy arch with structural details and toy-like proportions\n\nmodule arch_base() {\n    // Main arch base with realistic proportions\n    difference() {\n        // Outer arch shape\n        hull() {\n            // Left leg\n            translate([-25, 0, 0])\n                cube([10, 15, 30], center=true);\n            // Right leg\n            translate([25, 0, 0])\n                cube([10, 15, 30], center=true);\n            // Arch top\n            translate([0, 0, 28])\n                cube([60, 15, 8], center=true);\n        }\n        \n        // Inner arch opening\n        translate([0, 0, 15])\n            cube([40, 16, 28], center=true);\n    }\n}\n\nmodule arch_details() {\n    // Decorative top ridge\n    translate([0, 0, 32])\n        cube([62, 3, 2], center=true);\n    \n    // Side pillars with toy-like detailing\n    for(x = [-22, 22]) {\n        // Pillar base\n        translate([x, 0, 10])\n            cube([12, 12, 4], center=true);\n        \n        // Pillar cap\n        translate([x, 0, 25])\n            cube([12, 12, 4], center=true);\n        \n        // Vertical grooves\n        for(y = [-3, 0, 3]) {\n            translate([x, y+7, 15])\n                cube([1, 1, 10], center=true);\n        }\n    }\n}\n\nmodule arch_supports() {\n    // Internal support structure for 3D printing\n    // Cross-braces\n    for(z = [5, 15, 25]) {\n        translate([0, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h=40, d=2, center=true);\n    }\n    \n    // Base reinforcement\n    translate([0, 0, 1])\n        cube([54, 11, 2], center=true);\n}\n\nmodule arch_toy_features() {\n    // Rounded edges for toy safety\n    translate([0, 0, 30])\n        cylinder(h=2, d=60, center=true);\n    \n    // Play connectors on sides\n    for(x = [-30, 30]) {\n        translate([x, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h=5, d=4, center=true);\n    }\n    \n    // Decorative studs\n    for(x = [-18, -6, 6, 18]) {\n        translate([x, 0, 34])\n            sphere(d=3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    arch_base();\n    \n    // Add details\n    arch_details();\n    \n    // Internal supports (hidden but needed for printing)\n    %arch_supports();\n    \n    // Toy-specific features\n    arch_toy_features();\n}",
    "renders": true
  },
  {
    "toy": "pillar",
    "openscad_code": "// Toy Pillar - Realistic medium-complexity design\n// Dimensions: 60mm diameter, 120mm height, 2mm wall thickness\n\nmodule pillar_base() {\n    // Main cylindrical base with toy-friendly rounded edges\n    difference() {\n        cylinder(h = 15, d = 60, $fn = 64);\n        translate([0, 0, 13])\n            cylinder(h = 5, d = 56, $fn = 64);\n    }\n    \n    // Decorative toy ring around base\n    translate([0, 0, 12])\n        cylinder(h = 3, d = 62, $fn = 64);\n}\n\nmodule pillar_shaft() {\n    // Hollow shaft with 2mm walls\n    difference() {\n        cylinder(h = 90, d = 50, $fn = 64);\n        translate([0, 0, 2])\n            cylinder(h = 88, d = 46, $fn = 64);\n    }\n    \n    // Three decorative toy rings for grip and visual interest\n    for(i = [1:3]) {\n        translate([0, 0, i * 25])\n            cylinder(h = 4, d = 52, $fn = 64);\n    }\n    \n    // Vertical ridges for toy-like texture\n    for(angle = [0:30:359]) {\n        rotate([0, 0, angle])\n            translate([23, 0, 5])\n            cube([2, 2, 80], center = true);\n    }\n}\n\nmodule pillar_capital() {\n    // Toy-friendly capital with rounded edges\n    difference() {\n        cylinder(h = 15, d = 55, $fn = 64);\n        translate([0, 0, 13])\n            cylinder(h = 5, d = 51, $fn = 64);\n    }\n    \n    // Decorative toy scroll elements\n    for(angle = [45:90:315]) {\n        rotate([0, 0, angle])\n            translate([22, 0, 10])\n            scale([1.5, 1, 1])\n            sphere(d = 8, $fn = 16);\n    }\n    \n    // Small toy studs for playful detail\n    for(angle = [0:45:359]) {\n        rotate([0, 0, angle])\n            translate([26, 0, 13])\n            sphere(d = 3, $fn = 8);\n    }\n}\n\nmodule pillar() {\n    union() {\n        pillar_base();\n        \n        translate([0, 0, 15])\n            pillar_shaft();\n            \n        translate([0, 0, 105])\n            pillar_capital();\n    }\n}\n\n// Render the complete toy pillar\npillar();",
    "renders": true
  },
  {
    "toy": "wedge",
    "openscad_code": "// Toy Wedge Chair - Realistic Style\n// A toddler-sized wedge chair with rounded edges, safety features, and toy proportions\n\n// Configuration\nchair_width = 80;           // Overall chair width\nchair_depth = 70;          // Overall chair depth\nchair_height = 100;        // Overall chair height\nwall_thickness = 3;        // Wall thickness for 3D printing\nedge_radius = 8;           // Rounded edge radius for safety\nleg_height = 25;           // Leg height for stability\n\n// Main chair module\nmodule wedge_chair() {\n    // Base wedge structure\n    difference() {\n        // Main wedge body\n        union() {\n            // Bottom wedge\n            translate([0, 0, leg_height]) {\n                rounded_wedge(chair_width, chair_depth, chair_height - leg_height, edge_radius);\n            }\n            \n            // Legs\n            for(x = [-1, 1]) {\n                for(y = [-1, 1]) {\n                    translate([x * (chair_width/2 - 15), y * (chair_depth/2 - 15), 0]) {\n                        cylinder(h = leg_height, r = 6, $fn = 16);\n                    }\n                }\n            }\n        }\n        \n        // Seating cavity\n        translate([0, 0, leg_height + wall_thickness]) {\n            rounded_wedge(\n                chair_width - 2*wall_thickness,\n                chair_depth - 2*wall_thickness - 5,\n                chair_height - leg_height - wall_thickness,\n                edge_radius - 2\n            );\n        }\n        \n        // Backrest cutout\n        translate([0, -chair_depth/2 + wall_thickness, leg_height + chair_height/2]) {\n            cube([chair_width - 2*wall_thickness, 20, chair_height - leg_height], center = true);\n        }\n    }\n    \n    // Backrest bars\n    for(x = [-1, 0, 1]) {\n        translate([x * 20, -chair_depth/2 + wall_thickness/2, leg_height + chair_height/2 + 5]) {\n            cube([6, wall_thickness, chair_height - leg_height - 10], center = true);\n        }\n    }\n    \n    // Armrests\n    difference() {\n        // Left armrest\n        translate([-chair_width/2 - 5, 0, leg_height + 35]) {\n            cube([10, chair_depth - 20, 20]);\n        }\n        \n        // Right armrest\n        translate([chair_width/2 + 5, 0, leg_height + 35]) {\n            cube([10, chair_depth - 20, 20]);\n        }\n    }\n    \n    // Safety bumper strip\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 2), 0, leg_height + 5]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = chair_depth - 10, r = 2, $fn = 12);\n            }\n        }\n    }\n}\n\n// Helper module for rounded wedge shape\nmodule rounded_wedge(w, d, h, r) {\n    hull() {\n        // Bottom corners\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (w/2 - r), y * (d/2 - r), 0]) {\n                    cylinder(h = 0.1, r = r, $fn = 16);\n                }\n            }\n        }\n        \n        // Top edge\n        for(x = [-1, 1]) {\n            translate([x * (w/2 - r), 0, h - r]) {\n                sphere(r = r, $fn = 16);\n            }\n        }\n        \n        // Center top\n        translate([0, 0, h]) {\n            sphere(r = r, $fn = 16);\n        }\n        \n        // Create the actual wedge shape\n        translate([0, 0, h/2]) {\n            polyhedron(\n                points = [\n                    [-w/2, -d/2, 0], [w/2, -d/2, 0], [w/2, d/2, 0], [-w/2, d/2, 0],\n                    [-w/2 + r, -d/2 + r, 0], [w/2 - r, -d/2 + r, 0], [w/2 - r, d/2 - r, 0], [-w/2 + r, d/2 - r, 0],\n                    [0, 0, h]\n                ],\n                faces = [\n                    [0, 1, 2, 3], [4, 5, 1, 0], [5, 6, 2, 1], [6, 7, 3, 2], [7, 4, 0, 3],\n                    [4, 7, 8, 5], [7, 6, 8], [6, 5, 8], [5, 4, 8]\n                ]\n            );\n        }\n    }\n}\n\n// Render the chair\nwedge_chair();",
    "renders": true
  },
  {
    "toy": "stud",
    "openscad_code": "// Realistic Stud Toy Chair - Medium Complexity\n// 3D printable toy chair with studs, suitable for minifigures\n// Overall size: 60mm width x 60mm depth x 80mm height\n\n// Parameters\nstud_diameter = 6.8;\nstud_height = 2.8;\nstud_spacing = 8;\nwall_thickness = 2;\nchair_width = 60;\nchair_depth = 60;\nchair_height = 80;\nseat_height = 45;\nback_height = 35;\n\n// Main chair module\nmodule chair() {\n    // Seat with studs on top\n    union() {\n        // Seat base\n        translate([0, 0, seat_height - wall_thickness])\n            cube([chair_width, chair_depth, wall_thickness * 2], center = true);\n        \n        // Studs on seat (5x5 grid)\n        for (x = [-20:stud_spacing:20]) {\n            for (y = [-20:stud_spacing:20]) {\n                translate([x, y, seat_height + wall_thickness])\n                    cylinder(h = stud_height, d = stud_diameter, $fn = 16);\n            }\n        }\n    }\n    \n    // Backrest with studs\n    union() {\n        // Backrest panel\n        translate([0, chair_depth/2 - wall_thickness, seat_height + back_height/2])\n            cube([chair_width, wall_thickness * 2, back_height], center = true);\n        \n        // Studs on backrest (5x4 grid)\n        for (x = [-20:stud_spacing:20]) {\n            for (y = [seat_height + 5:stud_spacing:seat_height + 25]) {\n                if (y <= seat_height + back_height - 5) {\n                    translate([x, chair_depth/2 + wall_thickness, y])\n                        cylinder(h = stud_height, d = stud_diameter, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Legs (4 legs with studs on sides)\n    module leg(x_pos, y_pos) {\n        union() {\n            // Main leg\n            translate([x_pos, y_pos, seat_height/2 - wall_thickness])\n                cube([wall_thickness * 3, wall_thickness * 3, seat_height - wall_thickness * 2], center = true);\n            \n            // Studs on leg sides\n            for (z = [10:stud_spacing:seat_height - 10]) {\n                translate([x_pos + wall_thickness * 2, y_pos, z])\n                    rotate([0, 90, 0])\n                    cylinder(h = stud_height, d = stud_diameter, $fn = 16);\n                \n                translate([x_pos, y_pos + wall_thickness * 2, z])\n                    rotate([90, 0, 0])\n                    cylinder(h = stud_height, d = stud_diameter, $fn = 16);\n            }\n        }\n    }\n    \n    // Place all four legs\n    leg(chair_width/2 - wall_thickness * 2, chair_depth/2 - wall_thickness * 2);\n    leg(-chair_width/2 + wall_thickness * 2, chair_depth/2 - wall_thickness * 2);\n    leg(chair_width/2 - wall_thickness * 2, -chair_depth/2 + wall_thickness * 2);\n    leg(-chair_width/2 + wall_thickness * 2, -chair_depth/2 + wall_thickness * 2);\n    \n    // Cross support bars\n    // Front-back support\n    translate([0, chair_depth/2 - wall_thickness * 4, seat_height/3])\n        cube([wall_thickness * 2, chair_depth - wall_thickness * 8, wall_thickness * 2], center = true);\n    \n    // Side support\n    translate([chair_width/2 - wall_thickness * 4, 0, seat_height/3])\n        cube([chair_width - wall_thickness * 8, wall_thickness * 2, wall_thickness * 2], center = true);\n}\n\n// Render the chair\nchair();",
    "renders": true
  },
  {
    "toy": "connector",
    "openscad_code": "// Realistic toy-style connector block\n// Medium complexity - 50-150mm printable toy connector\n\nmodule connector_block() {\n    // Main block body - 40x40x30mm\n    difference() {\n        cube([40, 40, 30], center=true);\n        \n        // Hollow center for weight reduction\n        cube([36, 36, 26], center=true);\n    }\n}\n\nmodule stud_connector() {\n    // Top stud - LEGO compatible\n    difference() {\n        // Main stud cylinder\n        cylinder(h=5, d=12, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=7, d=8, $fn=32);\n        \n        // Side tube holes for grip\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([5, 0, 2.5])\n                    rotate([0, 90, 0])\n                        cylinder(h=3, d=3, $fn=16);\n        }\n    }\n}\n\nmodule tube_socket() {\n    // Bottom tube socket - accepts studs\n    difference() {\n        // Outer tube\n        cylinder(h=8, d=13.2, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=10, d=10.2, $fn=32);\n        \n        // Grip ridges inside\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n                translate([5.5, 0, 4])\n                    cube([1, 1, 6], center=true);\n        }\n    }\n}\n\nmodule side_pins() {\n    // Side connecting pins\n    for(side = [0:3]) {\n        rotate([0, 0, side * 90])\n            translate([20, 0, 0])\n                if(side % 2 == 0) {\n                    // Pin protrusion\n                    difference() {\n                        cylinder(h=8, d=8.2, $fn=16);\n                        translate([0, 0, 4])\n                            cylinder(h=4, d=5, $fn=16);\n                    }\n                } else {\n                    // Pin socket\n                    difference() {\n                        cylinder(h=8, d=8.2, $fn=16);\n                        translate([0, 0, -1])\n                            cylinder(h=10, d=5, $fn=16);\n                    }\n                }\n    }\n}\n\nmodule reinforcements() {\n    // Internal reinforcement ribs\n    for(angle = [0:45:135]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                cube([2, 36, 26], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main block\n    connector_block();\n    \n    // Internal structure\n    reinforcements();\n    \n    // Top connectors\n    translate([0, 0, 17.5])\n        stud_connector();\n    \n    // Bottom socket\n    translate([0, 0, -17.5])\n        tube_socket();\n    \n    // Side connectors\n    translate([0, 0, 0])\n        side_pins();\n    \n    // Corner fillets for realism\n    difference() {\n        translate([20, 20, 15])\n            sphere(d=4, $fn=16);\n        cube([4, 4, 30], center=true);\n    }\n    \n    mirror([1, 0, 0])\n        difference() {\n            translate([20, 20, 15])\n                sphere(d=4, $fn=16);\n            cube([4, 4, 30], center=true);\n        }\n    \n    mirror([0, 1, 0])\n        difference() {\n            translate([20, 20, 15])\n                sphere(d=4, $fn=16);\n            cube([4, 4, 30], center=true);\n        }\n    \n    mirror([1, 1, 0])\n        difference() {\n            translate([20, 20, 15])\n                sphere(d=4, $fn=16);\n            cube([4, 4, 30], center=true);\n        }\n}",
    "renders": true
  },
  {
    "toy": "plate",
    "openscad_code": "// Plate Toy in Realistic Style\n// Overall dimensions: 120mm diameter, 25mm height, wall 2mm thick\n\n// Main plate body\nmodule plate_body() {\n    difference() {\n        // Outer rim\n        cylinder(h = 10, d = 120, $fn = 64);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h = 10.2, d = 110, $fn = 64);\n    }\n    \n    // Bottom base\n    translate([0, 0, 10])\n        cylinder(h = 5, d = 118, $fn = 64);\n        \n    // Inner bowl\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h = 10, d = 116, $fn = 64);\n            translate([0, 0, -0.1])\n                cylinder(h = 10.2, d = 112, $fn = 64);\n        }\n}\n\n// Toy connector pegs for stacking\nmodule connector_pegs() {\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([45, 0, -1])\n                cylinder(h = 7, d = 5, $fn = 16);\n    }\n}\n\n// Decorative rim pattern\nmodule rim_pattern() {\n    for (i = [0:15:345]) {\n        rotate([0, 0, i])\n            translate([58, 0, 8])\n                cube([2, 1.5, 2], center = true);\n    }\n}\n\n// Small handles for toy grip\nmodule handles() {\n    // Left handle\n    translate([-62, 0, 10])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 15, d = 8, $fn = 16);\n                translate([0, 0, -0.1])\n                    cylinder(h = 15.2, d = 5, $fn = 16);\n            }\n    \n    // Right handle\n    translate([62, 0, 10])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 15, d = 8, $fn = 16);\n                translate([0, 0, -0.1])\n                    cylinder(h = 15.2, d = 5, $fn = 16);\n            }\n}\n\n// Assembly\nunion() {\n    plate_body();\n    connector_pegs();\n    rim_pattern();\n    handles();\n}",
    "renders": true
  },
  {
    "toy": "cube",
    "openscad_code": "// Toy Cube with drawer, handle and rounded edges\n// Designed for 3D printing with 2 mm walls and no overhangs\n\n// Basic dimensions\ncube_size = 40;\nwall_thickness = 2;\nfillet_radius = 3;\n\n// Drawer dimensions\ndrawer_width = 34;\ndrawer_height = 12;\ndrawer_depth = 36;\nhandle_width = 20;\nhandle_height = 4;\nhandle_depth = 8;\n\n// Create main cube body\nmodule main_cube() {\n    difference() {\n        // Outer rounded cube\n        minkowski() {\n            cube([cube_size, cube_size, cube_size], center = true);\n            sphere(r = fillet_radius);\n        }\n        \n        // Hollow out center\n        minkowski() {\n            cube([cube_size - 2*wall_thickness, cube_size - 2*wall_thickness, cube_size - 2*wall_thickness], center = true);\n            sphere(r = fillet_radius - wall_thickness);\n        }\n        \n        // Front drawer opening\n        translate([0, 0, -cube_size/2 + wall_thickness + drawer_height/2])\n            cube([drawer_width + 2*wall_thickness, drawer_depth + wall_thickness, drawer_height + wall_thickness], center = true);\n    }\n}\n\n// Create drawer\nmodule drawer() {\n    difference() {\n        // Drawer box\n        translate([0, drawer_depth/2 - cube_size/2 + wall_thickness, -cube_size/2 + wall_thickness + drawer_height/2])\n            cube([drawer_width, drawer_depth, drawer_height], center = true);\n        \n        // Hollow drawer\n        translate([0, drawer_depth/2 - cube_size/2 + wall_thickness + wall_thickness, -cube_size/2 + wall_thickness + drawer_height/2])\n            cube([drawer_width - 2*wall_thickness, drawer_depth - 2*wall_thickness, drawer_height - wall_thickness], center = true);\n    }\n    \n    // Drawer handle\n    translate([0, drawer_depth - cube_size/2 + wall_thickness, -cube_size/2 + wall_thickness + drawer_height/2 - handle_height/2])\n        cube([handle_width, handle_depth, handle_height], center = true);\n}\n\n// Create decorative studs on top\nmodule studs() {\n    stud_radius = 3;\n    stud_height = 2;\n    stud_spacing = 10;\n    \n    for(x = [-1:1]) {\n        for(y = [-1:1]) {\n            translate([x * stud_spacing, y * stud_spacing, cube_size/2])\n                cylinder(h = stud_height, r = stud_radius, center = false);\n        }\n    }\n}\n\n// Assembly\nmain_cube();\ndrawer();\nstuds();",
    "renders": true
  },
  {
    "toy": "rod",
    "openscad_code": "// Realistic medium-complexity toy rod (fishing-style)\n// Overall length ~120 mm, printable in one piece\n\n$fn = 32;  // good surface quality\n\n// Main parameters\nrod_length = 120;\nhandle_length = 35;\nhandle_dia = 10;\nblank_dia = 3.2;\nguide_ring_dia = 5;\nguide_ring_thick = 1.2;\nreel_seat_length = 20;\nreel_seat_dia = 8;\n\n// Colors (for preview only)\nhandle_color     = \"SaddleBrown\";\nblank_color      = \"LightGray\";\nmetal_color      = \"Silver\";\n\n//---------------- Handle assembly ----------------\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Cork/EVA grip\n        difference() {\n            cylinder(h = handle_length, d = handle_dia, center = false);\n            // Light weight cuts\n            for (i = [1:3])\n                translate([0, 0, i*handle_length/4])\n                    cylinder(h = 2, d = handle_dia - 4, center = false);\n        }\n        // End cap\n        translate([0, 0, handle_length])\n            cylinder(h = 4, d1 = handle_dia, d2 = handle_dia - 2, center = false);\n    }\n}\n\n//---------------- Reel seat ----------------\nmodule reel_seat() {\n    color(metal_color)\n    difference() {\n        // Main tube\n        cylinder(h = reel_seat_length, d = reel_seat_dia, center = false);\n        // Hood slots\n        for (z = [0, reel_seat_length - 4])\n            translate([0, 0, z])\n                cube([reel_seat_dia, 1.5, 4], center = true);\n        // Hood threads\n        for (z = [2:2:reel_seat_length - 6])\n            translate([0, 0, z])\n                rotate([90, 0, 0])\n                    cylinder(h = reel_seat_dia + 0.5, d = 0.5, center = true);\n    }\n}\n\n//---------------- Blank (rod shaft) ----------------\nmodule blank() {\n    color(blank_color)\n    hull() {\n        // Butt section\n        translate([0, 0, 0])\n            cylinder(h = rod_length - handle_length - reel_seat_length,\n                     d1 = reel_seat_dia - 2, d2 = blank_dia, center = false);\n        // Tip\n        translate([0, 0, rod_length - handle_length - reel_seat_length])\n            cylinder(h = 10, d1 = blank_dia, d2 = 1.5, center = false);\n    }\n}\n\n//---------------- Guide rings ----------------\nmodule guide_ring(pos, angle = 0) {\n    color(metal_color)\n    rotate([0, 0, angle])\n    translate([0, 0, pos])\n    difference() {\n        // Foot\n        cube([guide_ring_dia + 2, 4, 1], center = true);\n        // Ring\n        translate([0, 0, 0.5])\n            cylinder(h = guide_ring_thick, d = guide_ring_dia, center = true);\n        // Hole\n        translate([0, 0, 0.5])\n            cylinder(h = guide_ring_thick + 0.1, d = 1.6, center = true);\n    }\n}\n\n//---------------- Assemble ----------------\nmodule rod() {\n    union() {\n        // Handle\n        handle();\n        // Reel seat\n        translate([0, 0, handle_length])\n            reel_seat();\n        // Blank\n        translate([0, 0, handle_length + reel_seat_length])\n            blank();\n        // Guides\n        guide_dist = (rod_length - handle_length - reel_seat_length - 10) / 5;\n        for (i = [1:5])\n            translate([0, 0, handle_length + reel_seat_length + i*guide_dist])\n                guide_ring(0, 0);\n        // Tip-top guide\n        translate([0, 0, rod_length - 4])\n            guide_ring(0, 0);\n    }\n}\n\n// Render\nrod();",
    "renders": true
  },
  {
    "toy": "column",
    "openscad_code": "// Toy Column Set - Realistic Medium Complexity\n// A column toy piece with detachable base, capital, and fluted shaft\n// Suitable for 3D printing with 2mm wall thickness\n\n$fn = 50;  // Smooth curves for printing\n\n// Main dimensions (mm)\ncolumn_height = 100;\ncolumn_diameter = 25;\nbase_height = 15;\ncapital_height = 20;\nflute_count = 8;\nflute_depth = 1.5;\n\n// Toy connector dimensions\npeg_diameter = 6;\npeg_height = 8;\npeg_clearance = 0.3;\n\nmodule round_peg() {\n    // Toy connector peg for stacking\n    cylinder(h = peg_height, d = peg_diameter);\n}\n\nmodule round_socket() {\n    // Matching socket for peg\n    cylinder(h = peg_height + peg_clearance, d = peg_diameter + peg_clearance);\n}\n\nmodule column_base() {\n    // Flared base with decorative molding\n    difference() {\n        union() {\n            // Main base cylinder\n            cylinder(h = base_height, d = column_diameter * 1.8);\n            \n            // Top decorative ring\n            translate([0, 0, base_height - 3])\n                cylinder(h = 3, d = column_diameter * 1.6);\n            \n            // Bottom molding\n            translate([0, 0, 0])\n                cylinder(h = 5, d = column_diameter * 2);\n        }\n        \n        // Center hole for peg\n        translate([0, 0, -1])\n            round_socket();\n        \n        // Weight reduction cavity (2mm walls)\n        translate([0, 0, 5])\n            cylinder(h = base_height - 6, d = column_diameter * 1.4);\n    }\n}\n\nmodule column_capital() {\n    // Classical Ionic-style capital\n    difference() {\n        union() {\n            // Main capital block\n            cube([column_diameter * 1.4, column_diameter * 1.4, capital_height], center = true);\n            \n            // Rounded edges\n            translate([0, 0, capital_height/2 - 3])\n                cylinder(h = 6, d = column_diameter * 1.8);\n            \n            // Top peg\n            translate([0, 0, capital_height/2 + 1])\n                round_peg();\n        }\n        \n        // Socket for column\n        translate([0, 0, -capital_height/2 - 1])\n            round_socket();\n        \n        // Decorative scroll holes (simplified)\n        for(i = [0:1]) {\n            translate([column_diameter * 0.5 * pow(-1, i), 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = column_diameter * 1.4, d = column_diameter * 0.6);\n        }\n    }\n}\n\nmodule fluted_shaft() {\n    // Main column shaft with fluting\n    difference() {\n        cylinder(h = column_height, d = column_diameter);\n        \n        // Create fluting\n        for(i = [0:flute_count-1]) {\n            rotate([0, 0, i * 360/flute_count])\n                translate([column_diameter/2 - flute_depth/2, 0, 0])\n                    cube([flute_depth, column_diameter * 0.8, column_height], center = true);\n        }\n        \n        // Top socket\n        translate([0, 0, column_height - peg_height])\n            round_socket();\n        \n        // Bottom peg\n        translate([0, 0, 0])\n            round_peg();\n        \n        // Weight reduction cavity\n        translate([0, 0, peg_height])\n            cylinder(h = column_height - peg_height * 2, d = column_diameter - 4);\n    }\n}\n\n// Assembly\nmodule complete_column() {\n    union() {\n        // Base\n        translate([0, 0, 0])\n            column_base();\n        \n        // Shaft\n        translate([0, 0, base_height])\n            fluted_shaft();\n        \n        // Capital\n        translate([0, 0, base_height + column_height])\n            column_capital();\n    }\n}\n\n// Generate the complete column\ncomplete_column();",
    "renders": true
  },
  {
    "toy": "panel",
    "openscad_code": "// Toy Panel Module\n// Realistic style, medium complexity\n// Panel size: 100mm wide x 80mm tall x 20mm thick\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;\n\n// Main panel assembly\nmodule panel_toy() {\n    // Main panel body\n    difference() {\n        // Outer shell\n        cube([100, 20, 80], center = true);\n        \n        // Hollow interior - 2mm wall thickness\n        translate([0, 0, 0])\n            cube([96, 16, 76], center = true);\n    }\n    \n    // Front face details\n    // Raised border frame\n    translate([0, 10.1, 0])\n        cube([104, 2, 84], center = true);\n    \n    // Four corner posts\n    for(x = [-45, 45])\n    for(z = [-35, 35]) {\n        translate([x, 0, z])\n            cylinder(h = 82, r = 4, center = true);\n    }\n    \n    // Horizontal support bars\n    for(z = [-25, 0, 25]) {\n        translate([0, 0, z])\n            cube([90, 18, 4], center = true);\n    }\n    \n    // Vertical support bars\n    for(x = [-30, 0, 30]) {\n        translate([x, 0, 0])\n            cube([4, 18, 70], center = true);\n    }\n    \n    // Connection pegs on back\n    // Top pegs for connecting to other panels\n    translate([-35, -12, 30])\n        cylinder(h = 8, r = 3);\n    translate([35, -12, 30])\n        cylinder(h = 8, r = 3);\n    \n    // Bottom pegs\n    translate([-35, -12, -30])\n        cylinder(h = 8, r = 3);\n    translate([35, -12, -30])\n        cylinder(h = 8, r = 3);\n    \n    // Connection holes on front\n    // Top holes\n    translate([-35, 12, 30])\n        rotate([180, 0, 0])\n            cylinder(h = 8, r = 3.2);\n    translate([35, 12, 30])\n        rotate([180, 0, 0])\n            cylinder(h = 8, r = 3.2);\n    \n    // Bottom holes\n    translate([-35, 12, -30])\n        rotate([180, 0, 0])\n            cylinder(h = 8, r = 3.2);\n    translate([35, 12, -30])\n        rotate([180, 0, 0])\n            cylinder(h = 8, r = 3.2);\n    \n    // Decorative center medallion\n    translate([0, 10, 0])\n        cylinder(h = 2, r = 15);\n    \n    // Medallion details\n    translate([0, 11.1, 0])\n        for(i = [0:11:360]) {\n            rotate([0, 0, i])\n                translate([10, 0, 0])\n                    cube([2, 1, 2], center = true);\n        }\n    \n    // Side detail grooves\n    for(y = [-9, 9]) {\n        translate([0, y, 0])\n            cube([100, 1, 70], center = true);\n    }\n    \n    // Top and bottom grooves\n    for(z = [-38, 38]) {\n        translate([0, 0, z])\n            cube([90, 18, 1], center = true);\n    }\n}\n\n// Generate the panel\npanel_toy();",
    "renders": true
  },
  {
    "toy": "girder",
    "openscad_code": "// Toy girder block for constructive play\n// Dimensions: 80 mm long × 40 mm wide × 40 mm high\n// Wall thickness: 2 mm, all printable without supports\n\n// Overall size\n$fn = 20;\nlength = 80;\nwidth  = 40;\nheight = 40;\nwall   = 2;\n\n// Holes for connecting studs\nstud_d = 6;\nstud_h = 3;\nstud_spacing = 20;\n\n// Bottom sockets for stacking\nsocket_d = 8;\nsocket_h = 4;\n\n// Helper module for the hollow girder body\nmodule girder_body() {\n    difference() {\n        // Outer box\n        cube([length, width, height], center = true);\n        // Hollow inside\n        translate([0, 0, wall/2])\n            cube([length - 2*wall, width - 2*wall, height - wall], center = true);\n    }\n}\n\n// Helper module for one top connecting stud\nmodule stud() {\n    cylinder(h = stud_h, d = stud_d);\n}\n\n// Helper module for one bottom socket\nmodule socket() {\n    // Chamfered entry\n    difference() {\n        cylinder(h = socket_h, d = socket_d);\n        translate([0, 0, -0.01])\n            cylinder(h = socket_h + 0.02, d = socket_d - 2*wall);\n    }\n}\n\n// Girder toy module\nmodule girder() {\n    union() {\n        // Main body\n        girder_body();\n\n        // Top studs for connecting other blocks\n        for (x = [-length/2 + stud_spacing/2 : stud_spacing : length/2 - stud_spacing/2])\n            for (y = [-width/2 + stud_spacing/2 : stud_spacing : width/2 - stud_spacing/2])\n                translate([x, y, height/2])\n                    stud();\n\n        // Bottom sockets to receive studs from another block\n        for (x = [-length/2 + stud_spacing/2 : stud_spacing : length/2 - stud_spacing/2])\n            for (y = [-width/2 + stud_spacing/2 : stud_spacing : width/2 - stud_spacing/2])\n                translate([x, y, -height/2 - socket_h/2 + stud_h/2])\n                    rotate([180, 0, 0])\n                        socket();\n\n        // Small corner fillets for realistic toy look\n        corner_size = 4;\n        for (x = [-length/2 + corner_size/2, length/2 - corner_size/2])\n            for (y = [-width/2 + corner_size/2, width/2 - corner_size/2])\n                translate([x, y, height/2 - corner_size/2])\n                    sphere(d = corner_size);\n    }\n}\n\n// Render the girder\ngirder();",
    "renders": true
  },
  {
    "toy": "keystone",
    "openscad_code": "// Keystone toy armchair - realistic style with medium complexity\n// Overall dimensions: 120mm width x 120mm depth x 130mm height\n\n// Parameters\nchair_width = 120;\nchair_depth = 120;\nchair_height = 130;\nseat_height = 50;\nwall_thickness = 2;\n\n// Main assembly\nunion() {\n    // Seat base\n    translate([0, 0, seat_height/2])\n        cube([chair_width - 20, chair_depth - 20, seat_height], center=true);\n    \n    // Seat cushion\n    translate([0, 0, seat_height + 6])\n        rounded_cube(chair_width - 20, chair_depth - 20, 12, 4);\n    \n    // Backrest\n    translate([0, -chair_depth/2 + 10, chair_height/2 + 20])\n        rounded_cube(chair_width - 10, 10, chair_height - seat_height, 3);\n    \n    // Backrest cushion\n    translate([0, -chair_depth/2 + 15, seat_height + 30])\n        rounded_cube(chair_width - 30, 6, 60, 3);\n    \n    // Legs\n    leg_positions = [\n        [-chair_width/2 + 10, chair_depth/2 - 10],\n        [chair_width/2 - 10, chair_depth/2 - 10],\n        [-chair_width/2 + 10, -chair_depth/2 + 10],\n        [chair_width/2 - 10, -chair_depth/2 + 10]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], seat_height/2])\n            cylinder(h=seat_height, d1=12, d2=8, center=false);\n    }\n    \n    // Armrests\n    // Left armrest\n    translate([-chair_width/2 + 5, 0, seat_height + 25])\n        rotate([0, 10, 0])\n        union() {\n            // Vertical support\n            cube([wall_thickness*2, 10, 50]);\n            // Horizontal rest\n            translate([0, 0, 50])\n                rounded_cube(8, chair_depth/2 - 20, 8, 2);\n        }\n    \n    // Right armrest\n    translate([chair_width/2 - 5, 0, seat_height + 25])\n        rotate([0, -10, 0])\n        mirror([1, 0, 0])\n        union() {\n            // Vertical support\n            cube([wall_thickness*2, 10, 50]);\n            // Horizontal rest\n            translate([0, 0, 50])\n                rounded_cube(8, chair_depth/2 - 20, 8, 2);\n        }\n    \n    // Decorative buttons on cushion\n    button_positions = [\n        [-20, -15, seat_height + 14],\n        [20, -15, seat_height + 14],\n        [-20, 15, seat_height + 14],\n        [20, 15, seat_height + 14]\n    ];\n    \n    for (pos = button_positions) {\n        translate(pos)\n            sphere(d=4);\n    }\n    \n    // Backrest tufting\n    tufting_rows = 3;\n    tufting_cols = 3;\n    \n    for (i = [0:tufting_rows-1]) {\n        for (j = [0:tufting_cols-1]) {\n            x_pos = -30 + j * 30;\n            y_pos = -chair_depth/2 + 15;\n            z_pos = 70 + i * 20;\n            \n            translate([x_pos, y_pos, z_pos])\n                sphere(d=3);\n        }\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(w, d, h, radius) {\n    hull() {\n        for (x = [-w/2 + radius, w/2 - radius])\n            for (y = [-d/2 + radius, d/2 - radius])\n                for (z = [-h/2 + radius, h/2 - radius])\n                    translate([x, y, z])\n                        sphere(r=radius);\n    }\n}",
    "renders": true
  },
  {
    "toy": "joist",
    "openscad_code": "// Toy Joist - Realistic Medium Complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\nmodule joist() {\n    // Main beam body - 100mm long, 20mm x 20mm cross-section\n    difference() {\n        // Main rectangular beam\n        cube([100, 20, 20], center=true);\n        \n        // Hollow center - 2mm walls\n        translate([0, 0, 0])\n        cube([96, 16, 16], center=true);\n    }\n    \n    // Realistic rounded edges for toy safety\n    for(x = [-48, 48]) {\n        translate([x, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=10, $fn=20);\n        translate([x, 0, -10])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=10, $fn=20);\n    }\n    \n    // Connection holes at ends for toy assembly\n    for(x = [-48, 48]) {\n        // Large holes for peg connections\n        translate([x, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=22, r=4, center=true, $fn=20);\n        \n        // Smaller alignment holes\n        translate([x, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h=22, r=2, center=true, $fn=16);\n        translate([x, 0, -5])\n        rotate([0, 90, 0])\n        cylinder(h=22, r=2, center=true, $fn=16);\n    }\n    \n    // Reinforcement ribs every 25mm\n    for(x = [-37.5, -12.5, 12.5, 37.5]) {\n        // Top rib\n        translate([x, 0, 9])\n        cube([5, 20, 2], center=true);\n        \n        // Bottom rib\n        translate([x, 0, -9])\n        cube([5, 20, 2], center=true);\n    }\n    \n    // Toy-style connector blocks at ends\n    for(x = [-47.5, 47.5]) {\n        // Top connector\n        translate([x, 0, 12])\n        difference() {\n            cube([5, 20, 6], center=true);\n            translate([0, 0, 3])\n            cube([3, 16, 4], center=true);\n        }\n        \n        // Bottom connector\n        translate([x, 0, -12])\n        difference() {\n            cube([5, 20, 6], center=true);\n            translate([0, 0, -3])\n            cube([3, 16, 4], center=true);\n        }\n    }\n    \n    // Center strengthening web\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cube([20, 2, 20], center=true);\n        translate([0, 0, 0])\n        cube([16, 1, 16], center=true);\n    }\n    \n    // Toy identification marks\n    translate([0, 10, 0])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.5)\n    text(\"J\", size=8, center=true);\n    \n    translate([0, -10, 0])\n    rotate([90, 0, 180])\n    linear_extrude(height=0.5)\n    text(\"100\", size=6, center=true);\n}\n\njoist();",
    "renders": true
  },
  {
    "toy": "lintel",
    "openscad_code": "// Toy Lintel (Beam) - Realistic Medium Complexity\n// A 3D printable toy lintel with realistic proportions and toy-friendly features\n\n// Parameters\nlintel_length = 120;\nlintel_width = 20;\nlintel_height = 40;\nwall_thickness = 2;\npeg_diameter = 6;\npeg_height = 8;\npeg_spacing = 40;\ndecoration_width = 3;\ntexture_spacing = 5;\n\n// Main module\nmodule toy_lintel() {\n    // Main beam body\n    difference() {\n        // Outer shape\n        cube([lintel_length, lintel_width, lintel_height], center=true);\n        \n        // Hollow cavity for weight reduction\n        translate([0, 0, 0])\n            cube([lintel_length - 2*wall_thickness, \n                  lintel_width - 2*wall_thickness, \n                  lintel_height - wall_thickness], center=true);\n    }\n    \n    // End caps with rounded edges\n    translate([-lintel_length/2 + wall_thickness/2, 0, 0])\n        rounded_end_cap();\n    translate([lintel_length/2 - wall_thickness/2, 0, 0])\n        mirror([1,0,0]) rounded_end_cap();\n    \n    // Connection pegs on bottom\n    for(i = [-1, 0, 1]) {\n        translate([i * peg_spacing, 0, -lintel_height/2 - peg_height/2])\n            cylinder(d=peg_diameter, h=peg_height, $fn=16);\n    }\n    \n    // Realistic wood grain texture\n    wood_texture();\n    \n    // Decorative moulding on top\n    decorative_moulding();\n}\n\n// Rounded end cap module\nmodule rounded_end_cap() {\n    translate([0, 0, 0]) {\n        difference() {\n            // Rounded edge\n            hull() {\n                cube([wall_thickness*2, lintel_width, lintel_height], center=true);\n                translate([wall_thickness, 0, 0])\n                    sphere(d=lintel_width, $fn=32);\n            }\n            \n            // Hollow cavity\n            translate([wall_thickness, 0, 0])\n                cube([wall_thickness*2, lintel_width - 2*wall_thickness, \n                      lintel_height - wall_thickness], center=true);\n        }\n    }\n}\n\n// Wood grain texture\nmodule wood_texture() {\n    // Vertical grain lines on sides\n    for(x = [-lintel_length/2 + 5 : texture_spacing : lintel_length/2 - 5]) {\n        translate([x, lintel_width/2 - wall_thickness/2, 0])\n            cube([0.5, wall_thickness, lintel_height - 2*wall_thickness]);\n        translate([x, -lintel_width/2 + wall_thickness/2, 0])\n            cube([0.5, wall_thickness, lintel_height - 2*wall_thickness]);\n    }\n    \n    // Horizontal grain lines on top\n    for(z = [-lintel_height/2 + 5 : texture_spacing : lintel_height/2 - 5]) {\n        translate([-lintel_length/2 + wall_thickness, 0, z])\n            cube([lintel_length - 2*wall_thickness, wall_thickness, 0.5]);\n    }\n}\n\n// Decorative moulding on top edge\nmodule decorative_moulding() {\n    translate([0, 0, lintel_height/2 + decoration_width/2]) {\n        difference() {\n            // Main moulding\n            cube([lintel_length - 4*wall_thickness, lintel_width - 2*wall_thickness, decoration_width], center=true);\n            \n            // Scalloped edge pattern\n            for(i = [-lintel_length/2 + 8 : 8 : lintel_length/2 - 8]) {\n                translate([i, 0, 0])\n                    sphere(d=6, $fn=16);\n            }\n        }\n    }\n}\n\n// Main assembly\ntoy_lintel();",
    "renders": true
  },
  {
    "toy": "buttress",
    "openscad_code": "// Realistic Toy Buttress Chair – medium complexity\n// Overall footprint ~100 mm wide × 110 mm deep × 110 mm tall\n// All walls 2 mm thick for easy FDM printing\n\n$fa = 2;\n$fs = 1;\n\nmodule rounded_cube(s, r) {\n    // Simple rounded-corner cube for toy-friendly edges\n    hull() {\n        for (dx = [0, 1], dy = [0, 1], dz = [0, 1])\n            translate([dx ? s.x-r : r, dy ? s.y-r : r, dz ? s.z-r : r])\n                sphere(r);\n    }\n}\n\nmodule leg() {\n    // Single 2 mm-wall leg with rounded foot\n    difference() {\n        cylinder(h = 45, d = 12, $fn = 20);\n        translate([0,0,2]) cylinder(h = 45, d = 8, $fn = 20);\n    }\n    translate([0,0,45]) sphere(d = 14); // toy-style foot ball\n}\n\nmodule seat() {\n    // Cushion-style seat 2 mm wall\n    difference() {\n        rounded_cube([90, 90, 8], 4);\n        translate([2,2,2]) rounded_cube([86, 86, 6], 3);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with toy-style slats\n    difference() {\n        rounded_cube([90, 12, 60], 4);\n        translate([2,2,2]) rounded_cube([86, 8, 56], 3);\n    }\n    // Three horizontal slats for toy detail\n    for (z = [15, 30, 45])\n        translate([10, 2, z]) rounded_cube([70, 8, 6], 2);\n}\n\nmodule armrest() {\n    // Simple curved arm with rounded top\n    difference() {\n        rounded_cube([8, 50, 20], 4);\n        translate([2,2,2]) rounded_cube([4, 46, 16], 3);\n    }\n}\n\nmodule buttress_support() {\n    // Triangular toy buttress brace\n    linear_extrude(height = 8) polygon([[0,0], [30,0], [30,45]]);\n    translate([0,0,8]) cube([30, 8, 2]);\n}\n\nunion() {\n    // Legs\n    translate([5, 5, 0]) leg();\n    translate([95-5, 5, 0]) leg();\n    translate([5, 95-5, 0]) leg();\n    translate([95-5, 95-5, 0]) leg();\n\n    // Seat\n    translate([5, 5, 45]) seat();\n\n    // Backrest\n    translate([5, 95-5-12, 45+8]) backrest();\n\n    // Armrests\n    translate([5, 5, 45+8]) armrest();\n    translate([95-5-8, 5, 45+8]) armrest();\n\n    // Buttress braces on rear legs\n    translate([5, 95-5-30, 0]) rotate([0,0,90]) buttress_support();\n    translate([95-5-30, 95-5-30, 0]) rotate([0,0,90]) mirror([1,0,0]) buttress_support();\n}",
    "renders": true
  },
  {
    "toy": "dowel",
    "openscad_code": "// Wooden Dowel Stool Toy\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 32;\ndowel_diameter = 8;\ndowel_length = 80;\nseat_thickness = 6;\nleg_height = 50;\nleg_inset = 10;\ncrossbar_offset = 15;\n\n// Main assembly\nmodule stool() {\n    // Seat\n    difference() {\n        translate([0, 0, leg_height + seat_thickness/2])\n            scale([1.2, 1.2, 1])\n            cylinder(d = dowel_diameter * 3, h = seat_thickness);\n        \n        // Seat hole pattern\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([dowel_diameter * 0.8, 0, -1])\n                    cylinder(d = dowel_diameter * 0.3, h = seat_thickness + 2);\n        }\n    }\n    \n    // Legs\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([dowel_diameter * 0.8, 0, leg_height/2])\n                cylinder(d = dowel_diameter, h = leg_height);\n    }\n    \n    // Crossbars\n    for(i = [0:1]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, crossbar_offset])\n                cylinder(d = dowel_diameter * 0.6, h = dowel_diameter * 1.6);\n    }\n    \n    // Additional structural dowels\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([dowel_diameter * 0.4, 0, crossbar_offset + 5])\n                rotate([0, 90, 0])\n                    cylinder(d = dowel_diameter * 0.4, h = dowel_diameter * 1.2);\n    }\n    \n    // Bottom support ring\n    difference() {\n        translate([0, 0, 2])\n            cylinder(d = dowel_diameter * 2.2, h = 4);\n        translate([0, 0, -1])\n            cylinder(d = dowel_diameter * 1.8, h = 6);\n    }\n    \n    // Decorative end caps\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([dowel_diameter * 0.8, 0, leg_height - 1])\n                sphere(d = dowel_diameter * 1.1);\n    }\n}\n\n// Render the stool\nstool();",
    "renders": true
  },
  {
    "toy": "rib",
    "openscad_code": "// Realistic toy rib - medium complexity version\n// Overall dimensions: 120mm long, 40mm wide, 60mm tall\n// Features: curved rib body, spine detail, mounting points, toy-safe edges\n\n$fn = 32;\n\nmodule rounded_cube(size, radius) {\n    // Create a rounded cube for safe edges\n    hull() {\n        for (x = [radius, size[0] - radius])\n            for (y = [radius, size[1] - radius])\n                for (z = [radius, size[2] - radius])\n                    translate([x, y, z]) sphere(r = radius);\n    }\n}\n\nmodule rib_body() {\n    // Main curved rib structure\n    difference() {\n        // Outer curved shape\n        hull() {\n            translate([0, 20, 0]) cylinder(h = 100, r1 = 15, r2 = 8);\n            translate([0, -20, 0]) cylinder(h = 100, r1 = 15, r2 = 8);\n        }\n        \n        // Hollow out interior for 2mm wall thickness\n        scale([0.7, 0.7, 0.9]) {\n            hull() {\n                translate([0, 20, 0]) cylinder(h = 100, r1 = 15, r2 = 8);\n                translate([0, -20, 0]) cylinder(h = 100, r1 = 15, r2 = 8);\n            }\n        }\n    }\n}\n\nmodule spine_detail() {\n    // Raised spine along top\n    for (i = [10:15:100]) {\n        translate([0, 0, i]) {\n            scale([1, 0.3, 0.8]) cylinder(h = 5, r = 12);\n            translate([0, 0, 5]) sphere(r = 4);\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Toy mounting points with 5mm holes\n    for (pos = [15, 85]) {\n        translate([0, 0, pos]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 20, r = 2.5, center = true);\n            }\n        }\n    }\n}\n\nmodule rib_cage_openings() {\n    // Realistic rib cage openings\n    for (i = [25:12:85]) {\n        translate([0, 0, i]) {\n            rotate([90, 0, 0]) {\n                scale([1, 0.8, 0.3]) cylinder(h = 30, r = 8);\n            }\n        }\n    }\n}\n\nmodule safe_edges() {\n    // Add fillets to all edges for toy safety\n    difference() {\n        union() {\n            rib_body();\n            spine_detail();\n        }\n        \n        // Remove sharp edges\n        translate([0, 0, -1]) {\n            scale([1.1, 1.1, 1.1]) {\n                cube([100, 50, 120], center = true);\n            }\n        }\n    }\n}\n\n// Assemble the complete toy rib\nunion() {\n    // Main structure\n    safe_edges();\n    \n    // Mounting holes for toy assembly\n    mounting_holes();\n    \n    // Rib cage detail\n    rib_cage_openings();\n}\n\n// Add toy-safe base\ntranslate([0, 0, 0]) {\n    rounded_cube([25, 45, 5], 2);\n}",
    "renders": true
  },
  {
    "toy": "strut",
    "openscad_code": "// Toy wooden strut block – realistic style, medium complexity\n// Overall footprint ~50×50×100 mm, wall 2 mm, all printable without support\n\n$fn = 36;\n\nmodule peg(d=8, h=10){\n    // Classic round wooden peg\n    cylinder(h=h, d=d, center=true);\n}\n\nmodule mortise(d=8.5, h=12){\n    // Loose fit hole for the peg\n    cylinder(h=h, d=d, center=true);\n}\n\nmodule strut_block(){\n    // Main block body\n    difference(){\n        // Outer shell\n        cube([48,48,96], center=true);\n        \n        // Hollow inside\n        translate([0,0,-2])\n            cube([44,44,92], center=true);\n    }\n}\n\nmodule joint_face(){\n    // One face of the block with peg & hole pattern\n    // Front face is +Y\n    \n    // Four pegs in the corners\n    for(x=[-18,18])\n        for(z=[-36,-12,12,36])\n            translate([x,24.1,z])\n                peg();\n    \n    // Central mortise\n    translate([0,24.1,0])\n        mortise();\n    \n    // Decorative 2 mm chamfer around face\n    difference(){\n        translate([0,23.9,0])\n            cube([52,0.4,100], center=true);\n        translate([0,23.7,0])\n            cube([48,0.4,96], center=true);\n    }\n}\n\nmodule all_faces(){\n    // Apply joint_face to all six faces\n    joint_face();                                    // +Y\n    \n    rotate([0,180,0])\n        translate([0,-48,0])\n            joint_face();                            // -Y\n    \n    rotate([0,0,90])\n        translate([0,0,48])\n            joint_face();                            // +X\n    \n    rotate([0,0,-90])\n        translate([0,0,-48])\n            joint_face();                            // -X\n    \n    rotate([90,0,0])\n        translate([0,0,48])\n            joint_face();                            // +Z\n    \n    rotate([-90,0,0])\n        translate([0,0,-48])\n            joint_face();                            // -Z\n}\n\nmodule wood_grain(){\n    // Subtle surface texture: tiny ridges\n    for(i=[-20:4:20])\n        translate([i,25,i/2])\n            rotate([0,90,0])\n                cylinder(h=0.4, d=0.8, center=true);\n}\n\n// Assemble\nunion(){\n    strut_block();\n    all_faces();\n}\n\n// Optional aesthetic detail (comment out for faster preview)\n// color(\"burlywood\")\n//     wood_grain();",
    "renders": true
  },
  {
    "toy": "truss",
    "openscad_code": "// Toy Truss Bridge\n// Realistic medium-complexity 3D-printable model\n// ~120 mm long, 60 mm wide, 35 mm tall\n\n// Parameters\nbeam_w = 4;           // beam width\nbeam_h = 3;           // beam thickness\npost_d = 3;           // post diameter\nbase_d = 6;           // base diameter\nbase_h = 2;           // base thickness\nspan = 60;            // half-span length\nwidth = 30;           // half-width\nheight = 15;          // max truss height\nsteps = 6;            // number of truss sections\n\nmodule beam(l) {\n    cube([l, beam_w, beam_h], center=true);\n}\n\nmodule post(h) {\n    cylinder(d=post_d, h=h, $fn=12);\n}\n\nmodule base() {\n    cylinder(d=base_d, h=base_h, $fn=20);\n}\n\nmodule truss_side() {\n    // bottom chord\n    translate([0,0,beam_h/2])\n        beam(span*2);\n\n    // top chord\n    translate([0,0,height-beam_h/2])\n        beam(span*2);\n\n    // vertical posts\n    for (i=[0:steps]) {\n        x = -span + i*(2*span/steps);\n        h = height - beam_h*2;\n        translate([x,0,beam_h+h/2])\n            post(h);\n    }\n\n    // diagonal braces\n    for (i=[0:steps-1]) {\n        x = -span + (i+0.5)*(2*span/steps);\n        rotate([0,0,atan((height-beam_h*2)/(2*span/steps))])\n            translate([x,0,height/2])\n                beam(sqrt(pow(2*span/steps,2)+pow(height-beam_h*2,2)));\n    }\n    for (i=[0:steps-1]) {\n        x = -span + (i+0.5)*(2*span/steps);\n        rotate([0,0,-atan((height-beam_h*2)/(2*span/steps))])\n            translate([x,0,height/2])\n                beam(sqrt(pow(2*span/steps,2)+pow(height-beam_h*2,2)));\n    }\n}\n\nmodule bridge_deck() {\n    // deck surface\n    translate([0,0,0])\n        cube([span*2+beam_w, width*2, beam_h], center=true);\n    \n    // safety rails\n    for (y=[-width+beam_w/2, width-beam_w/2]) {\n        translate([0,y,beam_h+2])\n            cube([span*2+beam_w, beam_w, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Left truss\n    translate([0,-width-beam_w/2,0])\n        truss_side();\n\n    // Right truss\n    translate([0,width+beam_w/2,0])\n        truss_side();\n\n    // Deck and rails\n    bridge_deck();\n\n    // Base supports\n    for (x=[-span+5, span-5]) {\n        translate([x,-width-beam_w/2-2,-base_h/2])\n            base();\n        translate([x,width+beam_w/2+2,-base_h/2])\n            base();\n    }\n}",
    "renders": true
  },
  {
    "toy": "loco",
    "openscad_code": "// Toy Locomotive Train Engine\n// Realistic style with medium complexity\n\n// Overall dimensions (mm)\nengine_length = 120;\nengine_width = 40;\nengine_height = 55;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule wheel(diameter = 20, width = 8) {\n    $fn = 24;\n    // Wheel with axle hole\n    difference() {\n        cylinder(h = width, d = diameter, center = true);\n        cylinder(h = width + 1, d = 4, center = true);\n    }\n    // Flange detail\n    translate([0, 0, width/2 + 1])\n        cylinder(h = 2, d = diameter + 4);\n    translate([0, 0, -width/2 - 1])\n        cylinder(h = 2, d = diameter + 4);\n}\n\nmodule wheels_set() {\n    // Front wheels\n    translate([engine_length/2 - 30, -engine_width/4, 0])\n        wheel(18, 6);\n    translate([engine_length/2 - 30, engine_width/4, 0])\n        wheel(18, 6);\n    \n    // Rear drivers\n    translate([engine_length/2 - 60, -engine_width/3, 0])\n        wheel(22, 8);\n    translate([engine_length/2 - 60, engine_width/3, 0])\n        wheel(22, 8);\n    \n    // Middle drivers\n    translate([engine_length/2 - 45, -engine_width/3, 0])\n        wheel(22, 8);\n    translate([engine_length/2 - 45, engine_width/3, 0])\n        wheel(22, 8);\n}\n\nmodule boiler() {\n    // Main boiler cylinder\n    translate([engine_length/2 - 20, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 80, d = 30);\n    \n    // Boiler front cap\n    translate([engine_length - 10, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d1 = 30, d2 = 25);\n    \n    // Smoke stack\n    translate([engine_length - 5, 0, 35])\n        cylinder(h = 25, d = 8);\n}\n\nmodule cab() {\n    // Cab structure\n    translate([engine_length/2 - 70, 0, 20])\n        cube([30, engine_width - 4, 30], center = true);\n    \n    // Cab roof\n    translate([engine_length/2 - 70, 0, 37])\n        rotate([90, 0, 0])\n            cylinder(h = engine_width - 8, d = 35);\n    \n    // Cab windows (cutouts)\n    difference() {\n        translate([engine_length/2 - 70, 0, 20])\n            cube([30, engine_width - 4, 30], center = true);\n        // Front window\n        translate([engine_length/2 - 55, 0, 25])\n            cube([1, 10, 15], center = true);\n        // Side windows\n        translate([engine_length/2 - 70, engine_width/2 - 2, 25])\n            cube([12, 1, 15], center = true);\n        translate([engine_length/2 - 70, -engine_width/2 + 2, 25])\n            cube([12, 1, 15], center = true);\n    }\n}\n\nmodule chassis() {\n    // Main frame\n    translate([engine_length/2 - 40, 0, 10])\n        cube([80, engine_width, 8], center = true);\n    \n    // Front buffer beam\n    translate([engine_length - 5, 0, 12])\n        cube([10, engine_width - 10, 12], center = true);\n    \n    // Rear buffer beam\n    translate([5, 0, 12])\n        cube([10, engine_width - 10, 12], center = true);\n    \n    // Coupling hooks\n    translate([engine_length - 2, 0, 8])\n        cylinder(h = 2, d = 6);\n    translate([2, 0, 8])\n        cylinder(h = 2, d = 6);\n}\n\nmodule details() {\n    // Headlamp\n    translate([engine_length - 12, 0, 32])\n        sphere(d = 10);\n    \n    // Steam dome\n    translate([engine_length/2 - 35, 0, 35])\n        cylinder(h = 10, d = 12);\n    \n    // Safety valve\n    translate([engine_length/2 - 35, 0, 41])\n        sphere(d = 8);\n    \n    // Handrails\n    for(i = [-20:10:40]) {\n        translate([engine_length/2 - 30 + i, engine_width/2, 30])\n            cylinder(h = 2, d = 2);\n        translate([engine_length/2 - 30 + i, -engine_width/2, 30])\n            cylinder(h = 2, d = 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    chassis();\n    boiler();\n    cab();\n    \n    // Details\n    details();\n    \n    // Wheels (separate for printing)\n    translate([0, 0, 10])\n        wheels_set();\n}",
    "renders": true
  },
  {
    "toy": "drifter",
    "openscad_code": "// Drifter toy - OpenSCAD\n// Medium complexity realistic toy drifter model\n\n$fn = 32;\n\nmodule car_body() {\n    difference() {\n        // main body shell\n        hull() {\n            translate([0,0,5]) cube([70,30,12], center=true);\n            translate([0,0,12]) cube([65,28,8], center=true);\n        }\n        \n        // windows\n        translate([10,0,15]) cube([35,26,6], center=true);\n    }\n}\n\nmodule hood() {\n    // front hood\n    translate([-37,0,8]) rotate([25,0,0]) \n        cube([30,28,6], center=true);\n}\n\nmodule trunk() {\n    // rear trunk\n    translate([37,0,8]) rotate([-15,0,0]) \n        cube([25,26,5], center=true);\n}\n\nmodule bumper(front=true) {\n    x = front ? -45 : 45;\n    translate([x,0,4]) \n        cube([8,28,4], center=true);\n}\n\nmodule wheel(wide=false) {\n    // tire\n    cylinder(h=wide?8:6, r1=wide?12:10, r2=wide?12:10, center=true);\n    \n    // rim\n    translate([0,0,wide?4.1:3.1]) \n        cylinder(h=1, r1=wide?8:7, r2=wide?8:7, center=true);\n}\n\nmodule wheel_arch(offset=0) {\n    translate([offset,0,6]) \n        rotate([90,0,0]) \n            cylinder(h=15, r1=12, r2=12, center=true);\n}\n\nmodule side_mirror() {\n    translate([15,15,14]) {\n        cube([4,2,2], center=true);\n        translate([2,2,0]) cube([2,6,2], center=true);\n    }\n}\n\nmodule spoiler() {\n    // main wing\n    translate([45,0,16]) {\n        cube([20,30,2], center=true);\n        \n        // supports\n        translate([0,12,0]) cube([2,2,6], center=true);\n        translate([0,-12,0]) cube([2,2,6], center=true);\n    }\n}\n\nmodule exhaust() {\n    translate([46,8,4]) {\n        rotate([0,90,0]) cylinder(h=8, r1=3, r2=3, center=true);\n    }\n    translate([46,-8,4]) {\n        rotate([0,90,0]) cylinder(h=8, r1=3, r2=3, center=true);\n    }\n}\n\nmodule headlights() {\n    // front lights\n    translate([-43,10,8]) sphere(3);\n    translate([-43,-10,8]) sphere(3);\n    \n    // tail lights\n    translate([43,10,8]) sphere(2.5);\n    translate([43,-10,8]) sphere(2.5);\n}\n\n// Main assembly\nunion() {\n    // car body\n    car_body();\n    hood();\n    trunk();\n    \n    // bumpers\n    bumper(true);\n    bumper(false);\n    \n    // spoiler\n    spoiler();\n    \n    // side mirrors\n    side_mirror();\n    mirror([0,1,0]) side_mirror();\n    \n    // exhaust\n    exhaust();\n    \n    // lights\n    headlights();\n    \n    // wheels and wheel arches\n    for(i=[-1,1]) {\n        // front wheels (wider)\n        translate([-25, i*18, 0]) {\n            wheel_arch(-25);\n            wheel(true);\n        }\n        \n        // rear wheels\n        translate([25, i*18, 0]) {\n            wheel_arch(25);\n            wheel(false);\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "hummer",
    "openscad_code": "// Hummer Toy Car - Realistic Medium Complexity\n// Overall dimensions: 120mm x 50mm x 50mm\n\n$fn = 32;\n\n// Main body module\nmodule body() {\n    // Main chassis\n    difference() {\n        // Main body block\n        cube([90, 48, 25], center=true);\n        \n        // Wheel wells\n        translate([-30, 20, 0])\n            cube([20, 20, 30], center=true);\n        translate([30, 20, 0])\n            cube([20, 20, 30], center=true);\n        translate([-30, -20, 0])\n            cube([20, 20, 30], center=true);\n        translate([30, -20, 0])\n            cube([20, 20, 30], center=true);\n    }\n}\n\n// Hood module\nmodule hood() {\n    translate([-35, 0, 12.5]) {\n        // Tapered hood\n        hull() {\n            translate([0, 0, 0])\n                cube([30, 46, 10], center=true);\n            translate([20, 0, 2])\n                cube([30, 40, 8], center=true);\n        }\n    }\n}\n\n// Roof module\nmodule roof() {\n    translate([10, 0, 25]) {\n        // Main roof\n        cube([50, 44, 8], center=true);\n        \n        // Roof rails\n        translate([0, -20, 2])\n            cube([50, 2, 2], center=true);\n        translate([0, 20, 2])\n            cube([50, 2, 2], center=true);\n    }\n}\n\n// Windshield\nmodule windshield() {\n    translate([-15, 0, 20]) {\n        difference() {\n            cube([28, 42, 12], center=true);\n            translate([1, 0, 1])\n                cube([25, 38, 10], center=true);\n        }\n    }\n}\n\n// Rear window\nmodule rear_window() {\n    translate([30, 0, 20]) {\n        difference() {\n            cube([20, 42, 12], center=true);\n            translate([-1, 0, 1])\n                cube([17, 38, 10], center=true);\n        }\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(x = [-5, 15]) {\n        translate([x, 0, 20]) {\n            difference() {\n                cube([15, 42, 12], center=true);\n                translate([0, 0, 1])\n                    cube([12, 38, 10], center=true);\n            }\n        }\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    for(x = [-30, 30])\n        for(y = [-20, 20]) {\n            translate([x, y, -10]) {\n                // Tire\n                cylinder(h=12, r=10, center=true);\n                \n                // Rim\n                translate([0, 0, 1])\n                    cylinder(h=10, r=7, center=true);\n                \n                // Rim details\n                for(i = [0:6]) {\n                    rotate([0, 0, i*60])\n                        translate([4, 0, 0])\n                            cube([8, 2, 8], center=true);\n                }\n            }\n        }\n}\n\n// Front grille\nmodule grille() {\n    translate([-45, 0, 10]) {\n        // Grille base\n        cube([8, 40, 20], center=true);\n        \n        // Grille bars\n        for(y = [-15:5:15]) {\n            translate([0, y, 0])\n                cube([6, 2, 18], center=true);\n        }\n        \n        // HUMMER text area\n        translate([1, 0, 8])\n            cube([4, 20, 4], center=true);\n    }\n}\n\n// Bumpers\nmodule bumpers() {\n    // Front bumper\n    translate([-50, 0, -5]) {\n        cube([8, 50, 10], center=true);\n    }\n    \n    // Rear bumper\n    translate([45, 0, -5]) {\n        cube([8, 50, 10], center=true);\n    }\n}\n\n// Side mirrors\nmodule mirrors() {\n    for(side = [-1, 1]) {\n        translate([-20, side*24, 18]) {\n            // Mirror arm\n            rotate([0, 30, 0])\n                cylinder(h=10, r=1.5, center=true);\n            \n            // Mirror\n            translate([4, 0, 2])\n                cube([6, 4, 5], center=true);\n        }\n    }\n}\n\n// Spare tire\nmodule spare_tire() {\n    translate([45, 0, 15]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=8, r=10, center=true);\n            translate([0, 0, 1])\n                cylinder(h=6, r=7, center=true);\n        }\n    }\n}\n\n// Light details\nmodule lights() {\n    // Headlights\n    translate([-45, 15, 12])\n        cube([6, 6, 6], center=true);\n    translate([-45, -15, 12])\n        cube([6, 6, 6], center=true);\n    \n    // Taillights\n    translate([45, 15, 12])\n        cube([4, 6, 4], center=true);\n    translate([45, -15, 12])\n        cube([4, 6, 4], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    hood();\n    roof();\n    windshield();\n    rear_window();\n    side_windows();\n    grille();\n    bumpers();\n    mirrors();\n    spare_tire();\n    lights();\n    wheels();\n}",
    "renders": true
  },
  {
    "toy": "flier",
    "openscad_code": "// Toy Flier – realistic medium-detail OpenSCAD model\n// Wingspan ≈ 110 mm, length ≈ 90 mm, thickness kept ≥ 2 mm for 3D printing\n\n$fn = 36;               // smooth curves\n\nmodule main_body() {    // streamlined fuselage pod\n    hull() {\n        translate([0,0,-5]) scale([1, 0.6, 1]) sphere(d = 28);\n        translate([0,0, 8])  scale([0.9, 0.5, 1.4]) sphere(d = 20);\n    }\n}\n\nmodule cockpit() {      // transparent canopy look\n    translate([-4, 0, 7]) scale([1, 0.9, 0.6]) sphere(d = 18);\n}\n\nmodule wing() {         // tapered wing profile\n    difference() {\n        hull() {\n            translate([-25, 0, 0]) cube([50, 6, 2], center = true);\n            translate([-30, 0, -2]) cube([60, 4, 2], center = true);\n        }\n        for (i = [-20:10:20]) translate([i, 0, 1.5]) cylinder(h = 3, d = 2);\n    }\n}\n\nmodule tail_fin() {     // vertical stabiliser\n    translate([0, 0, 0]) rotate([0, 10, 0])\n    linear_extrude(height = 2) polygon([[0, 0], [12, 0], [6, 25], [0, 0]]);\n}\n\nmodule horizontal_stab() { // rear stabiliser\n    translate([20, 0, 2]) rotate([0, 10, 0])\n    scale([0.7, 1, 1]) wing();\n}\n\nmodule prop_hub() {     // nose spinner\n    translate([-14, 0, 0]) cylinder(h = 8, d = 12, $fn = 20);\n}\n\nmodule blade() {        // one propeller blade\n    rotate([0, 90, 0])\n    rotate_extrude(angle = 90, $fn = 20)\n    translate([5, 0]) square([2, 20]);\n}\n\nmodule propeller(n = 3) { // three-bladed toy prop\n    union() {\n        prop_hub();\n        for (i = [0:n-1])\n            rotate([0, 0, i * 360/n]) blade();\n    }\n}\n\nmodule landing_skid() { // toy skid instead of wheels\n    hull() {\n        translate([-5, -8, -10]) sphere(d = 4);\n        translate([-5,  8, -10]) sphere(d = 4);\n        translate([ 8, -8, -10]) sphere(d = 4);\n        translate([ 8,  8, -10]) sphere(d = 4);\n    }\n}\n\nmodule toy_flier() {\n    union() {\n        main_body();\n        cockpit();\n        translate([0, 0, 2]) wing();\n        translate([18, 0, 8]) tail_fin();\n        horizontal_stab();\n        translate([-24, 0, 0]) propeller();\n        landing_skid();\n    }\n}\n\ntoy_flier();",
    "renders": true
  },
  {
    "toy": "glidester",
    "openscad_code": "// Glidester Toy Rocking Chair\n// Medium complexity, realistic toy style\n\n// Overall dimensions (mm)\nchair_width = 90;\nchair_depth = 100;\nchair_height = 110;\nseat_height = 45;\narmrest_height = 65;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Seat module with cushion appearance\nmodule seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n            cube([chair_width - 20, chair_depth - 20, 8], center=true);\n        \n        // Hollow interior\n        translate([0, 0, seat_height/2])\n            cube([chair_width - 20 - wall*2, chair_depth - 20 - wall*2, 8 - wall], center=true);\n    }\n    \n    // Cushion details\n    for(x = [-1, 0, 1]) {\n        for(y = [-1, 0, 1]) {\n            translate([x*25, y*25, seat_height + 4.5])\n                cube([20, 20, 1], center=true);\n        }\n    }\n}\n\n// Backrest module with slats\nmodule backrest() {\n    // Main frame\n    difference() {\n        translate([0, -chair_depth/2 + 15, chair_height/2 + 10])\n            cube([chair_width - 10, 10, chair_height - seat_height], center=true);\n        \n        // Hollow interior\n        translate([0, -chair_depth/2 + 15, chair_height/2 + 10])\n            cube([chair_width - 10 - wall*2, 10 - wall, chair_height - seat_height - wall*2], center=true);\n    }\n    \n    // Slats\n    for(i = [0:1:4]) {\n        translate([0, -chair_depth/2 + 15, seat_height + 15 + i*15])\n            cube([chair_width - 15, 8, 3], center=true);\n    }\n}\n\n// Armrest module\nmodule armrest(side) {\n    translate([side*(chair_width/2 - 10), 0, armrest_height]) {\n        // Main armrest\n        difference() {\n            cube([15, chair_depth/2, 20], center=true);\n            cube([15 - wall*2, chair_depth/2 - wall, 20 - wall], center=true);\n        }\n        \n        // Top detail\n        translate([0, 0, 10])\n            cube([18, chair_depth/2 + 5, 3], center=true);\n    }\n}\n\n// Rocking base module\nmodule rocker() {\n    // Left rocker\n    translate([-chair_width/2 + 5, 0, seat_height/2 - 20]) {\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h=chair_depth + 20, r=15, center=true);\n            rotate([90, 0, 0])\n                cylinder(h=chair_depth + 20, r=13, center=true);\n        }\n    }\n    \n    // Right rocker\n    translate([chair_width/2 - 5, 0, seat_height/2 - 20]) {\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h=chair_depth + 20, r=15, center=true);\n            rotate([90, 0, 0])\n                cylinder(h=chair_depth + 20, r=13, center=true);\n        }\n    }\n    \n    // Support crossbars\n    for(y = [-chair_depth/3, chair_depth/3]) {\n        translate([0, y, seat_height/2 - 20])\n            cube([chair_width - 10, 8, 8], center=true);\n    }\n}\n\n// Legs module (connectors)\nmodule legs() {\n    // Front left\n    translate([-chair_width/2 + 15, chair_depth/2 - 15, seat_height/2 - 10])\n        cube([8, 8, seat_height - 20], center=true);\n    \n    // Front right\n    translate([chair_width/2 - 15, chair_depth/2 - 15, seat_height/2 - 10])\n        cube([8, 8, seat_height - 20], center=true);\n    \n    // Back left\n    translate([-chair_width/2 + 15, -chair_depth/2 + 15, seat_height/2 - 10])\n        cube([8, 8, seat_height - 20], center=true);\n    \n    // Back right\n    translate([chair_width/2 - 15, -chair_depth/2 + 15, seat_height/2 - 10])\n        cube([8, 8, seat_height - 20], center=true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    seat();\n    backrest();\n    armrest(-1);\n    armrest(1);\n    rocker();\n    legs();\n    \n    // Decorative buttons on backrest\n    for(x = [-1, 0, 1]) {\n        translate([x*25, -chair_depth/2 + 15, chair_height - 10])\n            sphere(r=3);\n    }\n}",
    "renders": true
  },
  {
    "toy": "tractor",
    "openscad_code": "// Realistic Medium-Complexity Toy Tractor\n// Overall size ~120 mm long, 70 mm wide, 60 mm high\n\n$fn = 36;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main chassis block\n        cube([70, 40, 25], center = true);\n        \n        // Driver seat cutout\n        translate([0, -10, 10])\n            cube([30, 20, 15], center = true);\n            \n        // Hood grille slots\n        for (i = [-20:10:10]) {\n            translate([32, i, 0])\n                cube([5, 3, 20], center = true);\n        }\n    }\n}\n\n// Hood module\nmodule hood() {\n    translate([30, 0, 15])\n    union() {\n        // Hood top\n        cube([35, 38, 12], center = true);\n        \n        // Hood front slope\n        translate([17, 0, -6])\n            rotate([0, -20, 0])\n            cube([15, 38, 12], center = true);\n    }\n}\n\n// Cabin module\nmodule cabin() {\n    translate([-25, 0, 20])\n    union() {\n        // Cabin frame\n        difference() {\n            cube([35, 45, 35], center = true);\n            \n            // Cabin interior\n            translate([0, 0, -5])\n                cube([30, 40, 30], center = true);\n                \n            // Windshield\n            translate([-17, 0, 5])\n                cube([2, 30, 25], center = true);\n                \n            // Side windows\n            translate([0, 22, 5])\n                cube([25, 2, 20], center = true);\n            translate([0, -22, 5])\n                cube([25, 2, 20], center = true);\n        }\n        \n        // Roof\n        translate([0, 0, 20])\n            cube([40, 50, 3], center = true);\n    }\n}\n\n// Wheel module with tire pattern\nmodule wheel(radius = 12, width = 8) {\n    difference() {\n        // Tire\n        cylinder(h = width, r = radius, center = true);\n        \n        // Rim cutout\n        cylinder(h = width + 1, r = radius - 4, center = true);\n    }\n    \n    // Spokes\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([radius - 6, 0, 0])\n                cube([6, 2, width + 0.5], center = true);\n    }\n    \n    // Hub cap\n    translate([0, 0, width/2 + 1])\n        cylinder(h = 2, r = 4);\n    translate([0, 0, -width/2 - 1])\n        cylinder(h = 2, r = 4);\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-30, 20, 40])\n    union() {\n        // Vertical pipe\n        cylinder(h = 20, r = 3);\n        \n        // Horizontal pipe\n        translate([0, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 15, r = 3);\n    }\n}\n\n// Front axle\nmodule front_axle() {\n    translate([25, 0, -5])\n    union() {\n        // Axle beam\n        cube([50, 5, 5], center = true);\n        \n        // Steering linkage\n        translate([0, 0, -5])\n            cube([5, 3, 5], center = true);\n    }\n}\n\n// Rear axle\nmodule rear_axle() {\n    translate([-30, 0, -5])\n    union() {\n        // Axle housing\n        cube([60, 8, 8], center = true);\n        \n        // Differential housing\n        translate([0, 0, -8])\n            sphere(r = 6);\n    }\n}\n\n// Hitch assembly\nmodule hitch() {\n    translate([-60, 0, -5])\n    union() {\n        // Hitch frame\n        cube([10, 15, 10], center = true);\n        \n        // Hitch pin hole\n        translate([-5, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 20, r = 2, center = true);\n    }\n}\n\n// Headlights\nmodule headlights() {\n    translate([35, 15, 8])\n        sphere(r = 3);\n    translate([35, -15, 8])\n        sphere(r = 3);\n}\n\n// Fenders\nmodule fenders() {\n    // Front fenders\n    translate([25, 20, 5])\n        cube([20, 15, 8], center = true);\n    translate([25, -20, 5])\n        cube([20, 15, 8], center = true);\n        \n    // Rear fenders\n    translate([-30, 25, 5])\n        cube([25, 15, 10], center = true);\n    translate([-30, -25, 5])\n        cube([25, 15, 10], center = true);\n}\n\n// Main assembly\nunion() {\n    // Body components\n    body();\n    hood();\n    cabin();\n    \n    // Structural elements\n    front_axle();\n    rear_axle();\n    hitch();\n    \n    // Details\n    exhaust();\n    headlights();\n    fenders();\n}\n\n// Wheels positioned for printing (flat on bed)\n// Front wheels\ntranslate([25, 22, -12])\n    rotate([90, 0, 0])\n    wheel();\ntranslate([25, -22, -12])\n    rotate([90, 0, 0])\n    wheel();\n\n// Rear wheels\ntranslate([-30, 25, -12])\n    rotate([90, 0, 0])\n    wheel(15, 10);\ntranslate([-30, -25, -12])\n    rotate([90, 0, 0])\n    wheel(15, 10);",
    "renders": true
  },
  {
    "toy": "soarer",
    "openscad_code": "// Realistic Toy Soarer (Glider) - Medium Complexity\n// Wingspan: 120mm, Length: 80mm, Height: 25mm\n\n$fn = 32;\n\n// Main parameters\nwing_span = 120;\nfuselage_length = 80;\nfuselage_width = 12;\ntail_height = 25;\n\n// Wing module with rounded edges\nmodule wing() {\n    // Main wing body\n    difference() {\n        // Tapered wing shape\n        hull() {\n            translate([0, 0, 2]) cube([wing_span, 20, 4], center=true);\n            translate([0, 0, 1]) cube([wing_span*0.8, 15, 2], center=true);\n        }\n        \n        // Wing root cutout for fuselage\n        translate([0, -10, -3]) cube([fuselage_width + 4, 30, 10], center=true);\n        \n        // Wing tip rounding\n        translate([wing_span/2 - 5, 0, 0]) cylinder(h=6, r=5, center=true);\n        translate([-wing_span/2 + 5, 0, 0]) cylinder(h=6, r=5, center=true);\n    }\n    \n    // Wing struts for toy structure\n    for(x = [-30, -15, 15, 30]) {\n        translate([x, 0, -2]) cylinder(h=4, r=1.5, center=true);\n    }\n}\n\n// Fuselage module\nmodule fuselage() {\n    union() {\n        // Main body\n        hull() {\n            // Nose cone\n            translate([fuselage_length/2 - 5, 0, 0]) sphere(r=6);\n            // Main body\n            translate([-fuselage_length/2, 0, 0]) cube([fuselage_length, fuselage_width, 8], center=true);\n            // Tail\n            translate([-fuselage_length/2 - 3, 0, 0]) cube([6, fuselage_width*0.8, 6], center=true);\n        }\n        \n        // Cockpit detail\n        difference() {\n            translate([fuselage_length/4, 0, 2]) cube([15, fuselage_width - 2, 4], center=true);\n            translate([fuselage_length/4, 0, 4]) sphere(r=4);\n        }\n        \n        // Tail boom reinforcement\n        translate([-fuselage_length/2 - 3, 0, -2]) cylinder(h=4, r=3, center=true);\n    }\n}\n\n// Vertical stabilizer\nmodule vertical_stabilizer() {\n    difference() {\n        // Main fin\n        hull() {\n            translate([-fuselage_length/2 - 8, 0, 0]) cube([16, 2, tail_height], center=true);\n            translate([-fuselage_length/2 - 12, 0, tail_height/2 - 2]) cube([8, 1.5, tail_height/2], center=true);\n        }\n        \n        // Rudder cut\n        translate([-fuselage_length/2 - 10, 0, tail_height/4]) cube([4, 2.5, tail_height/2], center=true);\n    }\n}\n\n// Horizontal stabilizer\nmodule horizontal_stabilizer() {\n    difference() {\n        // Main stabilizer\n        hull() {\n            translate([-fuselage_length/2 - 10, 0, 0]) cube([30, 25, 3], center=true);\n            translate([-fuselage_length/2 - 12, 0, 0]) cube([20, 20, 2], center=true);\n        }\n        \n        // Elevator cut\n        translate([-fuselage_length/2 - 12, 0, -2]) cube([20, 15, 4], center=true);\n    }\n}\n\n// Landing skid for toy glider\nmodule landing_skid() {\n    // Front skid\n    translate([fuselage_length/4, 0, -6]) cylinder(h=2, r=2, center=true);\n    \n    // Rear skid\n    translate([-fuselage_length/2 - 5, 0, -6]) cylinder(h=2, r=2, center=true);\n    \n    // Skid bar\n    hull() {\n        translate([fuselage_length/4, 0, -6]) sphere(r=2);\n        translate([-fuselage_length/2 - 5, 0, -6]) sphere(r=2);\n    }\n}\n\n// Toy propeller detail (non-functional)\nmodule propeller() {\n    rotate([0, 90, 0]) {\n        // Propeller hub\n        translate([fuselage_length/2, 0, 0]) cylinder(h=4, r=3, center=true);\n        \n        // Blades\n        rotate([0, 0, 45]) {\n            for(i = [0:90:270]) {\n                rotate([0, 0, i]) translate([fuselage_length/2 + 8, 0, 0]) \n                    cube([16, 2, 1], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main wing\n    wing();\n    \n    // Fuselage\n    fuselage();\n    \n    // Tail surfaces\n    vertical_stabilizer();\n    horizontal_stabilizer();\n    \n    // Landing gear\n    landing_skid();\n    \n    // Propeller\n    propeller();\n}",
    "renders": true
  },
  {
    "toy": "lifter",
    "openscad_code": "// Toy Forklift - realistic style, medium complexity\n$fn = 32;  // Smooth curves\n\n// Overall dimensions (mm)\nforklift_length = 120;\nforklift_width = 60;\nforklift_height = 80;\nwheel_diameter = 20;\nwheel_width = 8;\nmast_height = 100;\n\nmodule chassis() {\n    // Main chassis frame with 2mm walls\n    difference() {\n        // Main body\n        cube([forklift_length, forklift_width, forklift_height/2], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            cube([forklift_length-4, forklift_width-4, forklift_height/2-2], center=true);\n    }\n    \n    // Front counterweight\n    translate([-forklift_length/2-10, 0, -forklift_height/4])\n        cube([20, forklift_width-10, forklift_height/2-5]);\n        \n    // Operator seat\n    translate([forklift_length/4, 0, forklift_height/4+2])\n        color(\"red\")\n        cube([20, 25, 8], center=true);\n}\n\nmodule mast() {\n    // Main vertical mast\n    translate([forklift_length/2-5, 0, forklift_height/2+mast_height/2-20])\n    difference() {\n        cube([10, forklift_width-20, mast_height], center=true);\n        translate([0, 0, 5])\n            cube([6, forklift_width-24, mast_height-10], center=true);\n    }\n    \n    // Fork carriage\n    translate([forklift_length/2+5, 0, forklift_height/2+mast_height/2-10])\n    difference() {\n        cube([8, forklift_width-30, 20], center=true);\n        translate([0, 0, 2])\n            cube([4, forklift_width-34, 16], center=true);\n    }\n}\n\nmodule forks() {\n    // Left fork\n    translate([forklift_length/2+15, -forklift_width/4, forklift_height/2-10])\n    difference() {\n        cube([60, 6, 8]);\n        translate([2, 1, 2])\n            cube([56, 4, 4]);\n    }\n    \n    // Right fork\n    translate([forklift_length/2+15, forklift_width/4-6, forklift_height/2-10])\n    difference() {\n        cube([60, 6, 8]);\n        translate([2, 1, 2])\n            cube([56, 4, 4]);\n    }\n}\n\nmodule wheels() {\n    // Front wheels\n    for(side = [-1, 1]) {\n        translate([forklift_length/4, side*(forklift_width/2+wheel_width/2), -wheel_diameter/2-5])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=wheel_width, d=wheel_diameter);\n                cylinder(h=wheel_width+1, d=wheel_diameter-4);\n            }\n    }\n    \n    // Rear wheels\n    for(side = [-1, 1]) {\n        translate([-forklift_length/3, side*(forklift_width/2+wheel_width/2), -wheel_diameter/2-5])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=wheel_width, d=wheel_diameter);\n                cylinder(h=wheel_width+1, d=wheel_diameter-4);\n            }\n    }\n}\n\nmodule steering_wheel() {\n    // Steering column\n    translate([-forklift_length/4, 0, forklift_height/2+10])\n        cylinder(h=30, d=6);\n    \n    // Steering wheel\n    translate([-forklift_length/4, 0, forklift_height/2+40])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=4, d=20);\n            cylinder(h=5, d=8);\n        }\n}\n\nmodule overhead_guard() {\n    // Roll cage structure\n    color(\"gray\")\n    translate([0, 0, forklift_height/2+30])\n    difference() {\n        // Main frame\n        cube([forklift_length/2, forklift_width-10, 30], center=true);\n        \n        // Cutout for operator\n        translate([0, 0, -5])\n            cube([forklift_length/2-4, forklift_width-14, 25], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    chassis();\n    mast();\n    forks();\n    wheels();\n    steering_wheel();\n    overhead_guard();\n}",
    "renders": true
  },
  {
    "toy": "winger",
    "openscad_code": "// Winger toy (wingback chair) - medium complexity realistic style\n// Overall dimensions: ~80mm wide x 75mm deep x 100mm high\n// Wall thickness: 2mm throughout for 3D printing\n\n// Parameters\nleg_h = 15;\nseat_h = 20;\nback_h = 65;\narm_w = 10;\ncushion_h = 8;\nwing_w = 15;\n\n// Chair frame\nmodule chair_frame() {\n    // Base frame - hollow box\n    difference() {\n        cube([80, 75, 3], center=true);\n        cube([76, 71, 4], center=true);\n    }\n    \n    // Front legs\n    for(x=[-30, 30]) {\n        translate([x, 28, -7.5])\n            cylinder(h=leg_h, r=3, $fn=16);\n    }\n    \n    // Rear legs\n    for(x=[-30, 30]) {\n        translate([x, -28, -7.5])\n            cylinder(h=leg_h, r=3, $fn=16);\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    translate([0, 0, leg_h + cushion_h/2])\n        difference() {\n            cube([70, 65, cushion_h], center=true);\n            cube([66, 61, cushion_h+1], center=true);\n        }\n}\n\n// Backrest frame\nmodule backrest_frame() {\n    translate([0, -30, leg_h + seat_h + back_h/2 - 5])\n        difference() {\n            cube([70, 5, back_h], center=true);\n            cube([66, 7, back_h-4], center=true);\n        }\n}\n\n// Wings (side supports)\nmodule wings() {\n    for(side=[-1, 1]) {\n        translate([side * 40, 0, leg_h + seat_h + 25])\n            rotate([0, side * 10, 0])\n            difference() {\n                cube([wing_w, 60, 50], center=true);\n                cube([wing_w-4, 56, 46], center=true);\n            }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side=[-1, 1]) {\n        translate([side * 35, 20, leg_h + seat_h + arm_w/2])\n            difference() {\n                cube([arm_w, 25, arm_w], center=true);\n                cube([arm_w-4, 21, arm_w+1], center=true);\n            }\n    }\n}\n\n// Back cushion\nmodule back_cushion() {\n    translate([0, -27, leg_h + seat_h + back_h/2 - 5])\n        difference() {\n            cube([60, 8, 35], center=true);\n            cube([56, 10, 31], center=true);\n        }\n}\n\n// Decorative buttons\nmodule buttons() {\n    for(y=[-20, 0, 20]) {\n        translate([0, y, leg_h + cushion_h + 1])\n            sphere(r=2, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_cushion();\n    backrest_frame();\n    wings();\n    armrests();\n    back_cushion();\n    buttons();\n}",
    "renders": true
  },
  {
    "toy": "freighter",
    "openscad_code": "// Freighter Toy Truck (Medium Complexity)\n// Realistic style 3D printable toy freighter truck\n\n// Overall dimensions: 120mm length × 50mm width × 55mm height\n\nmodule main_body() {\n    difference() {\n        // Main chassis block\n        translate([-55, -25, 0])\n            cube([110, 50, 20]);\n        \n        // Wheel wells\n        for(x = [-40, 40])\n            translate([x, -25, 0])\n                cube([20, 30, 10]);\n    }\n}\n\nmodule cab() {\n    // Cab base\n    translate([-45, -20, 20])\n        cube([35, 40, 25]);\n    \n    // Cab roof\n    translate([-40, -18, 45])\n        cube([30, 36, 8]);\n    \n    // Windshield\n    difference() {\n        translate([-44, -15, 30])\n            cube([2, 30, 15]);\n        translate([-43, -14, 31])\n            cube([2, 28, 13]);\n    }\n}\n\nmodule cargo_container() {\n    // Container base\n    translate([5, -20, 25])\n        cube([50, 40, 30]);\n    \n    // Container top\n    translate([7, -18, 55])\n        cube([46, 36, 4]);\n    \n    // Container doors (rear)\n    for(i = [0, 1])\n        translate([52, -15 + i*20, 30])\n            cube([2, 8, 20]);\n}\n\nmodule wheels() {\n    // Front wheels\n    for(side = [-1, 1])\n        translate([-35, side*30, 0])\n            cylinder(h=8, r=10, $fn=16);\n    \n    // Rear wheels\n    for(side = [-1, 1])\n        for(x = [20, 40])\n            translate([x, side*30, 0])\n                cylinder(h=8, r=12, $fn=16);\n}\n\nmodule bumpers() {\n    // Front bumper\n    translate([-55, -25, 10])\n        cube([5, 50, 5]);\n    \n    // Rear bumper\n    translate([55, -25, 10])\n        cube([5, 50, 5]);\n}\n\nmodule exhaust_pipe() {\n    // Vertical pipe\n    translate([10, 20, 45])\n        cylinder(h=15, r=3, $fn=12);\n    \n    // Horizontal pipe\n    translate([10, 20, 60])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=3, $fn=12);\n}\n\nmodule headlights() {\n    // Front headlights\n    for(side = [-1, 1])\n        translate([-54, side*15, 25])\n            sphere(r=4, $fn=12);\n    \n    // Taillights\n    for(side = [-1, 1])\n        translate([54, side*15, 25])\n            sphere(r=3, $fn=12);\n}\n\nmodule windows() {\n    // Side windows\n    for(side = [-1, 1])\n        translate([-30, side*20, 35])\n            cube([15, 2, 10]);\n}\n\n// Assembly\nunion() {\n    main_body();\n    cab();\n    cargo_container();\n    wheels();\n    bumpers();\n    exhaust_pipe();\n    headlights();\n    windows();\n}",
    "renders": true
  },
  {
    "toy": "mover",
    "openscad_code": "// Realistic medium-complexity toy mover (truck) in OpenSCAD\n// Designed for 3D printing with 2 mm wall thickness\n\n// Overall dimensions: 110 mm long × 45 mm wide × 45 mm high\n$fa = 1; $fs = 0.5;\n\nmodule mover_truck() {\n    // Main body – cargo box\n    difference() {\n        translate([0, 0, 20]) cube([70, 40, 25], center = true);\n        // Remove interior for hollow body (2 mm walls)\n        translate([0, 0, 20]) cube([66, 36, 21], center = true);\n    }\n\n    // Cab\n    difference() {\n        translate([-40, 0, 15]) cube([30, 38, 30], center = true);\n        translate([-40, 0, 15]) cube([26, 34, 26], center = true);\n    }\n\n    // Front grille\n    translate([-55, 0, 10]) cube([2, 34, 20], center = true);\n\n    // Roof light bar\n    translate([-55, 0, 32]) cube([6, 4, 4], center = true);\n\n    // Wheels – four identical\n    module wheel() {\n        rotate([90, 0, 0]) difference() {\n            cylinder(h = 10, r = 11, center = true);\n            cylinder(h = 12, r = 7, center = true);\n        }\n    }\n\n    // Front wheels\n    for (y = [-22, 22])\n        translate([-35, y, 10]) wheel();\n\n    // Rear wheels\n    for (y = [-22, 22])\n        translate([25, y, 10]) wheel();\n\n    // Bumper front\n    translate([-58, 0, 8]) cube([4, 36, 16], center = true);\n\n    // Bumper rear\n    translate([38, 0, 8]) cube([4, 36, 16], center = true);\n\n    // Side mirrors\n    for (y = [-20, 20])\n        translate([-40, y, 25])\n            rotate([0, -20, 0])\n                cube([8, 2, 2], center = true);\n\n    // Headlights\n    for (y = [-15, 15])\n        translate([-56, y, 20]) sphere(r = 3, $fn = 12);\n\n    // Taillights\n    for (y = [-15, 15])\n        translate([37, y, 20]) sphere(r = 3, $fn = 12);\n\n    // Engine hood details\n    translate([-45, 0, 25])\n        difference() {\n            cube([20, 30, 2], center = true);\n            for (i = [-10:5:10])\n                translate([i, 0, 1])\n                    cube([1, 28, 2], center = true);\n        }\n\n    // Cabin windows (cutouts)\n    translate([-40, 0, 22])\n        cube([26, 32, 15], center = true);\n}\n\nmover_truck();",
    "renders": true
  },
  {
    "toy": "biplane",
    "openscad_code": "// Biplane Toy - Realistic Style, Medium Complexity\n// Dimensions: ~120mm wingspan, 100mm length, 50mm height\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;\n\n// Main parameters\nbody_length = 80;\nbody_width = 20;\nbody_height = 25;\nwing_span = 120;\nchord = 30;\nprop_diameter = 20;\nwheel_diameter = 15;\n\nmodule cylinder_hollow(h, r1, r2 = r1, wall = 2) {\n    difference() {\n        cylinder(h = h, r1 = r1, r2 = r2);\n        cylinder(h = h + 0.2, r1 = r1 - wall, r2 = r2 - wall);\n    }\n}\n\nmodule fuselage() {\n    // Main body - tapered cylinder\n    hull() {\n        translate([0, 0, body_height/2])\n            scale([1, 0.7, 1])\n                sphere(r = body_width/2);\n        translate([body_length/2 - 10, 0, body_height/2])\n            scale([1.2, 0.8, 1])\n                sphere(r = body_width/2);\n        translate([-body_length/2 + 10, 0, body_height/2])\n            scale([0.8, 0.6, 0.8])\n                sphere(r = body_width/2);\n    }\n    \n    // Cockpit opening\n    difference() {\n        translate([0, 0, body_height/2])\n            cube([30, body_width + 2, 15], center = true);\n        translate([0, 0, body_height/2 + 1])\n            cube([32, body_width + 4, 14], center = true);\n    }\n    \n    // Tail fin\n    translate([-body_length/2 + 5, 0, body_height/2 + 8])\n        rotate([0, 10, 0])\n            cube([15, 2, 20], center = true);\n    \n    // Horizontal stabilizer\n    translate([-body_length/2, 0, body_height/2])\n        rotate([0, -5, 0])\n        cube([25, 40, 3], center = true);\n}\n\nmodule wing(is_upper = true) {\n    h = is_upper ? body_height + 15 : body_height + 5;\n    t = 2;\n    \n    // Main wing surface\n    translate([0, 0, h])\n    difference() {\n        // Wing shape with rounded tips\n        hull() {\n            cube([chord, wing_span - 10, t], center = true);\n            translate([0, wing_span/2 - 5, 0])\n                sphere(r = 5);\n            translate([0, -wing_span/2 + 5, 0])\n                sphere(r = 5);\n        }\n        \n        // Aileron cutouts\n        for(y = [-wing_span/3, wing_span/3]) {\n            translate([5, y, -1])\n                cube([chord/2, 20, t + 2]);\n        }\n    }\n    \n    // Wing struts\n    if(is_upper) {\n        for(x = [-20, 0, 20]) {\n            translate([x, wing_span/2 - 5, h - 7])\n                cylinder(h = 14, r = 1.5);\n            translate([x, -wing_span/2 + 5, h - 7])\n                cylinder(h = 14, r = 1.5);\n        }\n    }\n}\n\nmodule propeller() {\n    translate([body_length/2 + 15, 0, body_height/2])\n    rotate([90, 0, 0])\n    union() {\n        // Spinner\n        cylinder(h = 8, r1 = 5, r2 = 3);\n        \n        // Blades\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, prop_diameter/2, 4])\n                scale([1, 0.2, 1])\n                rotate([0, 30, 0])\n                    cube([prop_diameter/2, 5, 2], center = true);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Main wheels\n    for(side = [-1, 1]) {\n        translate([body_length/4, side * (body_width/2 + 5), -wheel_diameter/2 + 2])\n        union() {\n            // Wheel\n            cylinder_hollow(h = 6, r1 = wheel_diameter/2, wall = 2);\n            \n            // Axle\n            rotate([90, 0, 0])\n                cylinder(h = 15, r = 2);\n            \n            // Strut\n            translate([0, 0, wheel_diameter/2])\n                cylinder(h = body_height - 5, r = 2);\n        }\n    }\n    \n    // Tail skid\n    translate([-body_length/2 + 5, 0, 0])\n        cylinder(h = 10, r1 = 3, r2 = 1);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wing(true);\n    wing(false);\n    propeller();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "toy": "haulster",
    "openscad_code": "// Toy Haulster - Realistic Medium Complexity\n// A 3D printable toy haulster with functional wheels, sides, and handle\n\n// Overall dimensions (mm)\nhaulster_length = 120;\nhaulster_width = 70;\nhaulster_height = 50;\nwheel_diameter = 20;\nwall_thickness = 2;\n\n// Main bed of the haulster\nmodule bed() {\n    difference() {\n        // Main box\n        cube([haulster_length, haulster_width, haulster_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([haulster_length-2*wall_thickness, \n                  haulster_width-2*wall_thickness, \n                  haulster_height-wall_thickness]);\n    }\n}\n\n// Side railings\nmodule side_railings() {\n    // Left railing\n    translate([-wall_thickness, -wall_thickness, haulster_height])\n        cube([haulster_length+2*wall_thickness, wall_thickness, 15]);\n    \n    // Right railing\n    translate([-wall_thickness, haulster_width, haulster_height])\n        cube([haulster_length+2*wall_thickness, wall_thickness, 15]);\n    \n    // Back railing\n    translate([haulster_length, 0, haulster_height])\n        cube([wall_thickness, haulster_width, 15]);\n}\n\n// Support beams underneath\nmodule support_beams() {\n    // Front beam\n    translate([10, wall_thickness, -5])\n        cube([5, haulster_width-2*wall_thickness, 5]);\n    \n    // Rear beam\n    translate([haulster_length-15, wall_thickness, -5])\n        cube([5, haulster_width-2*wall_thickness, 5]);\n    \n    // Center beam\n    translate([haulster_length/2-2.5, wall_thickness, -5])\n        cube([5, haulster_width-2*wall_thickness, 5]);\n}\n\n// Wheel assembly\nmodule wheel(position_x, position_y) {\n    translate([position_x, position_y, -wheel_diameter/2-5]) {\n        // Wheel\n        rotate([90, 0, 0])\n            cylinder(h=5, d=wheel_diameter, $fn=20);\n        \n        // Axle\n        rotate([90, 0, 0])\n            cylinder(h=haulster_width+10, d=4, $fn=16);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    // Main handle bar\n    translate([-10, haulster_width/2-5, haulster_height+10])\n        rotate([0, -30, 0])\n            cylinder(h=40, d=5, $fn=12);\n    \n    // Handle grip\n    translate([-45, haulster_width/2-5, haulster_height+25])\n        rotate([0, 90, 0])\n            cylinder(h=10, d=8, $fn=20);\n    \n    // Support brackets\n    translate([-5, wall_thickness, haulster_height-5])\n        cube([5, haulster_width-2*wall_thickness, 10]);\n}\n\n// Corner reinforcements\nmodule corners() {\n    for (x = [0, haulster_length]) {\n        for (y = [0, haulster_width]) {\n            translate([x, y, 0])\n                cube([wall_thickness, wall_thickness, haulster_height+15]);\n        }\n    }\n}\n\n// Assemble the complete haulster\nunion() {\n    bed();\n    side_railings();\n    support_beams();\n    corners();\n    \n    // Wheels - 4 positions\n    wheel(15, -5);\n    wheel(15, haulster_width+5);\n    wheel(haulster_length-15, -5);\n    wheel(haulster_length-15, haulster_width+5);\n    \n    handle();\n}",
    "renders": true
  },
  {
    "toy": "stratos",
    "openscad_code": "// Stratos Chair Toy Model\n// Medium complexity realistic toy style\n\n// Parameters\nchair_width = 80;\nchair_depth = 70;\nchair_height = 100;\nseat_height = 45;\nback_height = 55;\nleg_diameter = 8;\narmrest_width = 12;\narmrest_thickness = 6;\n\n// Main chair module\nmodule stratos_chair() {\n    // Seat cushion\n    difference() {\n        translate([0, 0, seat_height/2])\n            cube([chair_width, chair_depth, 10], center=true);\n        \n        // Seat cushion grooves\n        for(i = [-1, 1]) {\n            translate([i * 20, 0, seat_height/2 + 4.9])\n                cube([2, chair_depth - 10, 10], center=true);\n        }\n    }\n    \n    // Backrest\n    difference() {\n        translate([0, -chair_depth/2 - 2, seat_height + back_height/2])\n            cube([chair_width - 20, 6, back_height], center=true);\n        \n        // Backrest cushion pattern\n        for(i = [-1, 0, 1]) {\n            translate([i * 25, -chair_depth/2 - 1, seat_height + back_height/2])\n                cube([20, 3, 40], center=true);\n        }\n    }\n    \n    // Legs\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, seat_height/2 - 5])\n            cylinder(h=seat_height - 5, d=leg_diameter, center=false);\n    }\n    \n    // Front legs\n    leg(chair_width/2 - 10, chair_depth/2 - 10);\n    leg(-chair_width/2 + 10, chair_depth/2 - 10);\n    \n    // Back legs with slight angle\n    translate([chair_width/2 - 10, -chair_depth/2 + 10, seat_height/2 - 5])\n        rotate([5, 0, 0])\n            cylinder(h=seat_height - 2, d=leg_diameter, center=false);\n            \n    translate([-chair_width/2 + 10, -chair_depth/2 + 10, seat_height/2 - 5])\n        rotate([5, 0, 0])\n            cylinder(h=seat_height - 2, d=leg_diameter, center=false);\n    \n    // Support bars between legs\n    translate([0, chair_depth/2 - 10, 15])\n        cube([chair_width - 20, 6, 6], center=true);\n    \n    translate([0, -chair_depth/2 + 10, 15])\n        cube([chair_width - 20, 6, 6], center=true);\n    \n    // Armrests\n    module armrest(side) {\n        translate([side * (chair_width/2 - 5), 0, seat_height + 15])\n            cube([armrest_width, chair_depth - 20, armrest_thickness], center=true);\n        \n        // Armrest support\n        translate([side * (chair_width/2 - 5), chair_depth/2 - 15, seat_height/2 + 5])\n            rotate([0, side * 10, 0])\n                cube([6, 6, seat_height], center=true);\n    }\n    \n    armrest(1);\n    armrest(-1);\n    \n    // Back support curve\n    for(i = [0:5]) {\n        angle = i * 15;\n        translate([0, -chair_depth/2 - 2 + sin(angle) * 5, \n                  seat_height + back_height - i * 8])\n            rotate([0, 0, angle])\n                cube([chair_width - 20 - i * 3, 4, 3], center=true);\n    }\n    \n    // Toy joint details\n    // Front cross support\n    translate([0, 0, 25])\n        difference() {\n            cube([chair_width - 30, leg_diameter + 2, leg_diameter + 2], center=true);\n            cylinder(h=leg_diameter + 4, d=leg_diameter - 2, center=true);\n        }\n}\n\n// Render the chair\nstratos_chair();",
    "renders": true
  },
  {
    "toy": "blade",
    "openscad_code": "// Realistic Toy Blade - Medium Complexity\n// 3D Printable toy sword with toy-specific safety features\n\n// Overall dimensions: 120mm total length, 25mm max width\n// Safe rounded edges, 2mm wall thickness throughout\n\nmodule blade_main() {\n    // Central spine for strength\n    translate([0, 0, -1])\n        cube([100, 2, 4], center=true);\n    \n    // Blade body with rounded tip\n    union() {\n        // Main blade section\n        translate([0, 0, 0])\n            cube([90, 20, 3], center=true);\n        \n        // Rounded tip - approximate with sphere\n        translate([45, 0, 0])\n            scale([2, 1, 0.75])\n                sphere(d=20, $fn=20);\n        \n        // Blade fuller (decorative groove)\n        translate([10, 0, 1.5])\n            cube([60, 2, 1], center=true);\n    }\n}\n\nmodule guard() {\n    // Crossguard with rounded ends\n    translate([-5, 0, 0])\n        union() {\n            // Main guard body\n            cube([5, 35, 5], center=true);\n            \n            // Rounded ends - cylinders\n            translate([0, 17.5, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d1=5, d2=5);\n            translate([0, -17.5, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d1=5, d2=5);\n        }\n    \n    // Guard grip texture - small ridges\n    for(i = [-2:1:2]) {\n        translate([-2.5, i*5, 2.5])\n            cube([1, 2, 1], center=true);\n    }\n}\n\nmodule handle() {\n    // Main grip\n    translate([-20, 0, 0])\n        cylinder(h=40, d1=10, d2=12, $fn=16);\n    \n    // Grip texture - concentric rings\n    for(i = [0:5:35]) {\n        translate([-20-i, 0, 0])\n            scale([1, 1, 0.2])\n                cylinder(h=2, d=11.5, $fn=16);\n    }\n}\n\nmodule pommel() {\n    // Counterweight at end\n    translate([-40, 0, 0])\n        sphere(d=15, $fn=20);\n    \n    // Pommel ring for toy string attachment\n    translate([-47.5, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=5, d=8, center=true, $fn=20);\n                cylinder(h=6, d=4, center=true, $fn=20);\n            }\n}\n\n// Assembly\nunion() {\n    blade_main();\n    guard();\n    handle();\n    pommel();\n    \n    // Safety rounded edge fillets\n    translate([0, 0, 1.5])\n        minkowski() {\n            children();\n            sphere(d=1, $fn=10);\n        }\n}",
    "renders": true
  },
  {
    "toy": "bigfoot",
    "openscad_code": "// Bigfoot Toy - Realistic Style, Medium Complexity\n// Total height ~80mm, designed for 3D printing\n\n// Main color\ncolor(\"saddlebrown\") {\n\n// Body - oval torso\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1.5])\n            sphere(d=30, $fn=32);\n        \n        // Chest detail\n        translate([0, 8, 32])\n            scale([0.8, 0.3, 1])\n            sphere(d=25, $fn=32);\n    }\n}\n\n// Head with facial features\nmodule head() {\n    union() {\n        // Main head sphere\n        translate([0, 0, 50])\n            scale([0.9, 0.8, 1.1])\n            sphere(d=25, $fn=32);\n        \n        // Brow ridge\n        difference() {\n            translate([0, -2, 57])\n                cube([20, 8, 6], center=true);\n            translate([0, -2, 59])\n                cube([22, 10, 8], center=true);\n        }\n        \n        // Eyes (sockets)\n        for(i = [-1, 1]) {\n            translate([i*6, -5, 55])\n                rotate([0, -10, 0])\n                cylinder(h=5, d1=4, d2=6, $fn=16);\n        }\n        \n        // Nose\n        translate([0, -10, 52])\n            cylinder(h=4, d1=6, d2=4, $fn=16);\n        \n        // Mouth area\n        translate([0, -12, 48])\n            sphere(d=8, $fn=24);\n    }\n}\n\n// Arms with hands\nmodule arm(side) {\n    translate([side*15, 0, 35]) {\n        rotate([0, 0, side*15]) {\n            // Upper arm\n            cylinder(h=18, d=8, $fn=16);\n            \n            // Elbow joint\n            translate([0, 0, -18])\n                sphere(d=9, $fn=16);\n            \n            // Lower arm\n            translate([0, 0, -18])\n                rotate([side*30, 0, 0])\n                cylinder(h=15, d=7, $fn=16);\n            \n            // Hand\n            translate([0, 0, -33])\n                scale([1, 0.7, 0.5])\n                sphere(d=12, $fn=16);\n        }\n    }\n}\n\n// Legs with feet\nmodule leg(side) {\n    translate([side*8, 0, 10]) {\n        // Upper leg\n        cylinder(h=20, d=10, $fn=16);\n        \n        // Knee joint\n        translate([0, 0, -20])\n            sphere(d=11, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -20])\n            rotate([side*10, 0, 0])\n            cylinder(h=18, d=9, $fn=16);\n        \n        // Foot\n        translate([0, 0, -38])\n            rotate([0, 0, -side*5])\n            union() {\n                // Main foot\n                translate([0, 5, 0])\n                    scale([1.2, 2, 0.4])\n                    cube([12, 20, 6], center=true);\n                \n                // Toes\n                for(i = [-1, -0.3, 0.3, 1]) {\n                    translate([i*3, 12, 0])\n                        scale([0.3, 0.5, 0.3])\n                        cube([4, 6, 4], center=true);\n                }\n            }\n    }\n}\n\n// Fur texture using small cylinders\nmodule fur_patch(x, y, z, angle) {\n    translate([x, y, z])\n        rotate([0, 0, angle])\n        cylinder(h=1.5, d=1.2, $fn=8);\n}\n\n// Apply fur texture to body\nmodule textured_body() {\n    union() {\n        body();\n        \n        // Fur patches on body\n        for(a = [0:30:360]) {\n            for(r = [10:5:25]) {\n                fur_patch(\n                    r*cos(a),\n                    r*sin(a),\n                    20 + 15*sin(a*3) + 8*cos(r),\n                    a + r\n                );\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    textured_body();\n    head();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}\n\n// Toy joint connectors (cylinders for snap-fit assembly)\ntranslate([15, 0, 35])\n    cylinder(h=4, d=4, $fn=16);\ntranslate([-15, 0, 35])\n    cylinder(h=4, d=4, $fn=16);\ntranslate([8, 0, 10])\n    cylinder(h=4, d=4, $fn=16);\ntranslate([-8, 0, 10])\n    cylinder(h=4, d=4, $fn=16);\n}",
    "renders": true
  },
  {
    "toy": "whirler",
    "openscad_code": "// Whirler toy - spinning top with pull-string mechanism\n// Medium complexity realistic style\n\n// Overall dimensions\nwidth = 45;\nheight = 65;\nstring_length = 120;\n\n// Main body - spinning top\nmodule top_body() {\n    // Top cone\n    translate([0, 0, 40])\n        cylinder(h=20, r1=20, r2=2, $fn=32);\n    \n    // Middle cylinder\n    translate([0, 0, 20])\n        cylinder(h=20, r=22, $fn=32);\n    \n    // Base dome\n    translate([0, 0, 10])\n        sphere(r=25, $fn=32);\n    \n    // Tip\n    translate([0, 0, 0])\n        cylinder(h=10, r1=3, r2=0.1, $fn=16);\n}\n\n// Handle mechanism\nmodule handle() {\n    // Handle grip\n    translate([0, 0, 50])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=30, r=8, $fn=16);\n        translate([0, 0, 2])\n            cylinder(h=26, r=5, $fn=16);\n    }\n    \n    // Handle supports\n    for(i=[-1:1]) {\n        translate([i*12, 0, 45])\n            cube([2, 10, 10], center=true);\n    }\n}\n\n// Pull string mechanism\nmodule string_mechanism() {\n    // String spool\n    translate([0, 30, 35])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=15, r=8, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=11, r=5, $fn=32);\n    }\n    \n    // String\n    color(\"red\")\n    for(i=[0:3:120]) {\n        rotate([0, 0, i*3])\n        translate([8, 30-i/4, 42])\n            cube([0.5, 3, 0.5], center=true);\n    }\n    \n    // Pull ring\n    translate([0, -30, 42])\n    difference() {\n        cylinder(h=3, r=6, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=5, r=3, $fn=32);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    // Top ring\n    translate([0, 0, 35])\n    difference() {\n        cylinder(h=2, r=20.5, $fn=32);\n        cylinder(h=2.5, r=19, $fn=32);\n    }\n    \n    // Middle ring\n    translate([0, 0, 25])\n    difference() {\n        cylinder(h=2, r=22.5, $fn=32);\n        cylinder(h=2.5, r=21, $fn=32);\n    }\n    \n    // Base ring\n    translate([0, 0, 15])\n    difference() {\n        cylinder(h=2, r=24.5, $fn=32);\n        cylinder(h=2.5, r=23, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    top_body();\n    handle();\n    string_mechanism();\n    decorative_rings();\n}",
    "renders": true
  },
  {
    "toy": "payload",
    "openscad_code": "// Toy payload truck with trailer\n// Base unit: mm\n// Overall size: ~130mm long x 40mm wide x 45mm high\n\n$fn = 32;  // Smooth curves\n\n// Main truck module\nmodule truck() {\n    // Truck chassis\n    translate([0, 0, 8]) cube([45, 35, 5], center = true);\n    \n    // Truck cab\n    translate([-15, 0, 20]) cube([20, 30, 25], center = true);\n    \n    // Cab roof\n    translate([-15, 0, 33]) cube([18, 28, 4], center = true);\n    \n    // Cab windows\n    difference() {\n        translate([-5, 0, 20]) cube([16, 26, 20], center = true);\n        translate([-5, 0, 20]) cube([14, 24, 18], center = true);\n    }\n    \n    // Truck wheels\n    for(i = [-1, 1]) {\n        translate([0, i*18, 7]) cylinder(h = 8, r = 7);\n        translate([-20, i*18, 7]) cylinder(h = 8, r = 7);\n    }\n}\n\n// Trailer module\nmodule trailer() {\n    // Trailer bed\n    translate([35, 0, 15]) cube([65, 38, 6], center = true);\n    \n    // Side walls\n    for(side = [-1, 1]) {\n        translate([35, side*19, 24]) cube([65, 2, 16], center = true);\n    }\n    \n    // Front wall\n    translate([5, 0, 24]) cube([2, 38, 16], center = true);\n    \n    // Rear gate\n    translate([65, 0, 24]) cube([2, 38, 16], center = true);\n    \n    // Trailer wheels\n    for(i = [-1, 1]) {\n        translate([45, i*20, 7]) cylinder(h = 8, r = 7);\n        translate([60, i*20, 7]) cylinder(h = 8, r = 7);\n    }\n    \n    // Payload boxes\n    for(pos = [15, 35, 55]) {\n        translate([pos, 0, 21]) cube([15, 30, 10], center = true);\n    }\n}\n\n// Hitch connector\nmodule hitch() {\n    // Ball hitch\n    translate([22, 0, 15]) sphere(r = 4);\n    \n    // Support\n    translate([22, 0, 11]) cylinder(h = 4, r = 2);\n}\n\n// Main assembly\nunion() {\n    truck();\n    trailer();\n    hitch();\n}",
    "renders": true
  },
  {
    "toy": "stratojet",
    "openscad_code": "// Stratojet Toy Airplane - Realistic Medium Complexity\n// Wingspan: 110mm, Length: 90mm, Height: 30mm\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule fuselage() {\n    // Main body\n    difference() {\n        hull() {\n            // Nose cone\n            translate([-40, 0, 0]) \n                rotate([0, 90, 0]) \n                    cylinder(h=20, r1=8, r2=0);\n            \n            // Main fuselage\n            translate([0, 0, 0])\n                scale([1, 0.8, 0.8])\n                    sphere(r=10);\n            \n            // Tail section\n            translate([25, 0, 0])\n                scale([1.2, 0.7, 0.7])\n                    sphere(r=8);\n        }\n        \n        // Cockpit window\n        translate([0, 0, 7])\n            scale([1.5, 0.5, 0.5])\n                sphere(r=7);\n    }\n}\n\nmodule wings() {\n    // Main wings\n    difference() {\n        union() {\n            // Left wing\n            translate([5, -25, -2])\n                rotate([0, 5, 0])\n                    cube([30, 25, 4]);\n            \n            // Right wing\n            translate([5, 0, -2])\n                rotate([0, 5, 0])\n                    cube([30, 25, 4]);\n            \n            // Wing roots\n            translate([5, -12.5, -2])\n                cube([10, 5, 4]);\n            translate([5, 12.5, -2])\n                cube([10, 5, 4]);\n        }\n        \n        // Engine cutouts\n        translate([15, -15, -3])\n            cylinder(h=6, r=4);\n        translate([15, 15, -3])\n            cylinder(h=6, r=4);\n    }\n    \n    // Wing tips\n    translate([35, -25, 0])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=2);\n    translate([35, 25, 0])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=2);\n}\n\nmodule engines() {\n    for (y = [-15, 15]) {\n        // Engine nacelles\n        translate([15, y, -8])\n            rotate([90, 0, 0])\n                cylinder(h=12, r1=4, r2=3);\n        \n        // Engine intakes\n        translate([15, y, -6])\n            rotate([90, 0, 0])\n                cylinder(h=3, r1=3, r2=4);\n        \n        // Exhaust\n        translate([15, y, 6])\n            rotate([90, 0, 0])\n                cylinder(h=3, r1=3, r2=2);\n    }\n}\n\nmodule tail_section() {\n    // Vertical stabilizer\n    difference() {\n        translate([30, 0, 8])\n            rotate([0, 15, 0])\n                cube([15, 2, 15]);\n        \n        // Trim tab\n        translate([42, 0, 18])\n            cube([3, 2.2, 3]);\n    }\n    \n    // Horizontal stabilizers\n    for (y = [-12, 12]) {\n        difference() {\n            translate([35, y/2, 5])\n                rotate([0, -5, 0])\n                    cube([15, 12, 3]);\n            \n            // Elevator\n            translate([48, y/2, 4])\n                cube([2, 11, 2]);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Nose gear\n    translate([-15, 0, -12])\n    union() {\n        // Strut\n        cylinder(h=10, r=1.5);\n        // Wheel\n        translate([0, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=3);\n    }\n    \n    // Main gear\n    for (x = [20, 30]) {\n        translate([x, 0, -12])\n        union() {\n            // Strut\n            cylinder(h=10, r=2);\n            // Wheel assembly\n            for (y = [-6, 6]) {\n                translate([0, y, -5])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, r=4);\n            }\n        }\n    }\n}\n\nmodule details() {\n    // Cockpit details\n    translate([-5, 0, 4])\n        rotate([0, 90, 0])\n            cylinder(h=20, r=0.5);\n    \n    // Panel lines\n    for (i = [-20:10:20]) {\n        translate([i, 0, 9.5])\n            cube([5, 0.5, 0.5]);\n    }\n    \n    // Windows\n    for (i = [-10:8:10]) {\n        translate([i, 5.5, 6])\n            sphere(r=1);\n        translate([i, -5.5, 6])\n            sphere(r=1);\n    }\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wings();\n    engines();\n    tail_section();\n    landing_gear();\n    details();\n}",
    "renders": true
  },
  {
    "toy": "rotoblade",
    "openscad_code": "// Rotoblade toy - realistic style, medium complexity\n// Dimensions: ~120mm length, 40mm width, 40mm height\n\n// Main parameters\nblade_length = 120;\nblade_width = 40;\nblade_thickness = 6;\nhub_diameter = 25;\nhub_height = 20;\nmotor_diameter = 30;\nmotor_height = 35;\nhandle_length = 50;\nhandle_diameter = 15;\nwall_thickness = 2;\n\n// Main blade assembly\nmodule main_blade() {\n    // Left blade\n    translate([-blade_width/2 - 2, 0, 0])\n        rotate([0, 0, 10])\n        linear_extrude(height=blade_thickness, center=true)\n            polygon(points=[\n                [0, 0],\n                [-blade_length*0.9, -blade_width/3],\n                [-blade_length, 0],\n                [-blade_length*0.9, blade_width/3],\n                [0, 0]\n            ]);\n    \n    // Right blade\n    translate([blade_width/2 + 2, 0, 0])\n        rotate([0, 0, -10])\n        linear_extrude(height=blade_thickness, center=true)\n            polygon(points=[\n                [0, 0],\n                [blade_length*0.9, -blade_width/3],\n                [blade_length, 0],\n                [blade_length*0.9, blade_width/3],\n                [0, 0]\n            ]);\n}\n\n// Central hub with motor housing\nmodule hub_motor() {\n    // Motor cylinder\n    cylinder(h=motor_height, d=motor_diameter, $fn=32);\n    \n    // Hub disk on top\n    translate([0, 0, motor_height/2 + hub_height/2])\n        cylinder(h=hub_height, d=hub_diameter, $fn=32);\n    \n    // Cooling vents\n    for(i=[0:45:359]) {\n        rotate([0, 0, i])\n            translate([motor_diameter/2 - 3, 0, -motor_height/2 + 5])\n                cube([6, 2, motor_height - 10], center=true);\n    }\n}\n\n// Handle grip\nmodule handle() {\n    // Main handle tube\n    translate([0, 0, -motor_height/2 - handle_length/2])\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n    \n    // Grip texture rings\n    for(i=[0:5:handle_length-10]) {\n        translate([0, 0, -motor_height/2 - 15 - i])\n            difference() {\n                cylinder(h=4, d=handle_diameter + 2, $fn=32);\n                cylinder(h=4.2, d=handle_diameter - 2, $fn=32);\n            }\n    }\n    \n    // End cap\n    translate([0, 0, -motor_height/2 - handle_length - 5])\n        cylinder(h=10, d=handle_diameter + 4, $fn=32);\n}\n\n// Safety guards\nmodule blade_guards() {\n    // Left guard\n    translate([-blade_width/2 - 10, -blade_length/2, 0])\n        difference() {\n            cube([20, blade_length, blade_thickness + 4]);\n            translate([10, blade_length/2, 0])\n                cube([16, blade_length*0.8, blade_thickness + 8], center=true);\n        }\n    \n    // Right guard\n    translate([blade_width/2 - 10, -blade_length/2, 0])\n        difference() {\n            cube([20, blade_length, blade_thickness + 4]);\n            translate([10, blade_length/2, 0])\n                cube([16, blade_length*0.8, blade_thickness + 8], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Rotate blades around Z axis\n    rotate([0, 0, $t*360])\n        main_blade();\n    \n    hub_motor();\n    handle();\n    \n    // Static safety guards\n    blade_guards();\n    \n    // Control switch\n    translate([0, -motor_diameter/2 - 8, motor_height/2 - 5])\n        cube([15, 8, 10], center=true);\n    \n    // Power cable entry\n    translate([0, handle_diameter/2, -motor_height/2 - handle_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=6, $fn=16);\n}",
    "renders": true
  },
  {
    "toy": "ironhorse",
    "openscad_code": "// Ironhorse rocking horse toy\n// Overall size: ~120mm long × ~100mm high × ~45mm wide\n\n$fn = 32; // smooth curves\n\n// Main module\nmodule ironhorse() {\n    // Body\n    color(\"silver\")\n    union() {\n        body();\n        head();\n        legs();\n        rockers();\n        handles();\n        mane();\n        tail();\n    }\n}\n\n// Body core\nmodule body() {\n    difference() {\n        // Main torso\n        hull() {\n            translate([-20, 0, 40]) sphere(d=30);\n            translate([30, 0, 40]) sphere(d=25);\n        }\n        \n        // Seat recess\n        translate([-5, 0, 55]) scale([1.2, 0.8, 0.4]) sphere(d=30);\n        \n        // Lighten\n        translate([5, 0, 30]) cube([40, 20, 30], center=true);\n    }\n}\n\n// Head\nmodule head() {\n    translate([-35, 0, 65]) rotate([0, 10, 0]) {\n        // Head shape\n        difference() {\n            scale([1.2, 0.8, 1]) sphere(d=25);\n            // Eye holes\n            translate([10, 8, 5]) sphere(d=4);\n            translate([10, -8, 5]) sphere(d=4);\n        }\n        \n        // Ears\n        translate([5, 12, 15]) rotate([0, -20, 0]) cylinder(h=15, d1=8, d2=5);\n        translate([5, -12, 15]) rotate([0, -20, 0]) cylinder(h=15, d1=8, d2=5);\n        \n        // Nostrils\n        translate([13, 3, 0]) sphere(d=3);\n        translate([13, -3, 0]) sphere(d=3);\n    }\n}\n\n// Legs\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-25, side*15, 25]) {\n            rotate([0, -15, 0]) \n            leg();\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([35, side*15, 25]) {\n            rotate([0, 15, 0]) \n            leg();\n        }\n    }\n}\n\n// Single leg module\nmodule leg() {\n    difference() {\n        // Leg cylinder\n        cylinder(h=40, d=12);\n        \n        // Lightening hole\n        translate([0, 0, 20]) cylinder(h=20, d=8);\n    }\n}\n\n// Rocking base\nmodule rockers() {\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        translate([0, side*20, 0]) {\n            difference() {\n                // Main rocker arc\n                rotate([90, 0, 0]) \n                translate([0, 0, -10])\n                cylinder(h=20, r1=60, r2=60);\n                \n                // Inner cutout\n                rotate([90, 0, 0]) \n                translate([0, 0, -7])\n                cylinder(h=14, r1=55, r2=55);\n                \n                // Flatten bottom\n                translate([0, 0, -10]) cube([150, 150, 10], center=true);\n            }\n        }\n    }\n}\n\n// Handle bars\nmodule handles() {\n    color(\"red\")\n    translate([-10, 0, 50]) {\n        // Bar\n        rotate([0, 90, 0]) cylinder(h=60, d=6);\n        \n        // Grips\n        for(end = [-1, 1]) {\n            translate([0, end*30, 0]) sphere(d=10);\n        }\n    }\n}\n\n// Mane (simplified ridges)\nmodule mane() {\n    color(\"black\")\n    for(i = [0:3]) {\n        translate([-25 - i*5, 0, 80 - i*3]) {\n            rotate([0, 90, 0]) \n            cylinder(h=20, d1=6, d2=3);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(\"black\")\n    translate([40, 0, 40]) rotate([0, 30, 0]) {\n        cylinder(h=30, d1=8, d2=4);\n    }\n}\n\n// Render the toy\nironhorse();",
    "renders": true
  },
  {
    "toy": "trimaran",
    "openscad_code": "// Trimaran Toy Boat (Medium Complexity)\n// Overall dimensions: ~120mm long, ~70mm wide\n\n$fn = 32;\n\n// Global parameters\nhull_length = 100;\nhull_width = 12;\nhull_height = 15;\nmain_hull_height = 18;\nbeam_width = 4;\nbeam_length = 60;\ndeck_thickness = 2;\n\n// Main hull module\nmodule main_hull() {\n    difference() {\n        union() {\n            // Main hull body\n            hull() {\n                translate([0, 0, hull_height/2])\n                    scale([1, 0.6, 1])\n                    sphere(d=hull_width);\n                translate([0, 0, 2])\n                    cube([hull_length, hull_width*0.8, hull_height*0.8], center=true);\n            }\n            \n            // Deck\n            translate([0, 0, hull_height])\n                cube([hull_length*0.9, hull_width*1.2, deck_thickness], center=true);\n        }\n        \n        // Cockpit cutout\n        translate([0, 0, hull_height])\n            cube([hull_length*0.5, hull_width*0.6, deck_thickness+2], center=true);\n    }\n}\n\n// Side hull module\nmodule side_hull() {\n    difference() {\n        hull() {\n            translate([0, 0, hull_height/2-3])\n                scale([1, 0.7, 1])\n                sphere(d=hull_width*0.8);\n            translate([0, 0, 1])\n                cube([hull_length*0.6, hull_width*0.7, hull_height*0.6], center=true);\n        }\n        \n        // Drain holes\n        for(i = [-1, 1]) {\n            translate([i*hull_length*0.2, 0, hull_height*0.3])\n                rotate([0, 90, 0])\n                cylinder(h=hull_width, d=2, center=true);\n        }\n    }\n}\n\n// Cross beam module\nmodule cross_beam() {\n    // Main beam\n    translate([0, 0, hull_height+deck_thickness])\n        cube([beam_length, beam_width, beam_width], center=true);\n    \n    // Reinforcement struts\n    for(x = [-beam_length/2+10, beam_length/2-10]) {\n        translate([x, 0, hull_height+deck_thickness/2])\n            rotate([0, 90, 0])\n            cylinder(h=beam_width, d=beam_width, center=true);\n    }\n}\n\n// Mast and sail module\nmodule mast_sail() {\n    mast_height = 50;\n    mast_diameter = 3;\n    \n    // Mast\n    translate([0, 0, hull_height+deck_thickness])\n        cylinder(h=mast_height, d=mast_diameter);\n    \n    // Mast base reinforcement\n    translate([0, 0, hull_height+deck_thickness-1])\n        cylinder(h=3, d=mast_diameter*2);\n    \n    // Sail\n    color(\"white\") {\n        translate([0, 0, hull_height+deck_thickness+mast_height*0.2])\n            rotate([0, 90, 0])\n            linear_extrude(height=0.5)\n            polygon(points=[\n                [0, 0],\n                [mast_height*0.6, mast_height*0.3],\n                [0, mast_height*0.5]\n            ]);\n    }\n}\n\n// Rudder module\nmodule rudder() {\n    translate([-hull_length/2-2, 0, hull_height*0.6])\n        rotate([0, -15, 0])\n        cube([8, 1, hull_height*0.7]);\n}\n\n// Assembly\nunion() {\n    // Main hull assembly\n    main_hull();\n    \n    // Cross beams and side hulls\n    cross_beam();\n    \n    // Left hull\n    translate([0, -beam_length/2, 0])\n        side_hull();\n    \n    // Right hull\n    translate([0, beam_length/2, 0])\n        side_hull();\n    \n    // Mast and sail\n    mast_sail();\n    \n    // Rudder\n    rudder();\n    \n    // Toy details - small round windows\n    for(i = [-1, 0, 1]) {\n        translate([i*20, 0, hull_height*0.7])\n            rotate([90, 0, 0])\n            cylinder(h=1, d=4);\n    }\n}",
    "renders": true
  },
  {
    "toy": "whirligig",
    "openscad_code": "// Whirligig Toy – realistic medium-complexity 3D-printable model\n// Overall height ≈ 95 mm, max Ø ≈ 120 mm\n// All walls ≥ 2 mm; no steep overhangs\n\n$fa = 2; $fs = 0.5;\n\n// Central hub ----------------------------------------------------------\nmodule hub() {\n    difference() {\n        union() {\n            cylinder(h = 12, d = 20, center = true);          // main disk\n            cylinder(h = 20, d = 10, center = true);          // inner collar\n        }\n        cylinder(h = 25, d = 4, center = true);               // shaft hole\n    }\n}\n\n// Propeller blade -------------------------------------------------------\nmodule blade(len = 50, wid = 18, thick = 3) {\n    // Tapered wing profile\n    hull() {\n        translate([0, 0, thick/2]) cube([5, wid, thick], center = true);\n        translate([len-5, 0, thick/2]) cube([5, wid*0.6, thick], center = true);\n    }\n    // Ribs for stiffness & looks\n    for (i = [1:3]) {\n        translate([i*len/4, 0, thick])\n            cube([1.5, wid*0.8, 2], center = true);\n    }\n}\n\n// Two-blade propeller assembly -----------------------------------------\nmodule propeller() {\n    hub();\n    rotate([0, 0, 0])   blade();\n    rotate([0, 0, 180]) blade();\n}\n\n// Crank arm -------------------------------------------------------------\nmodule crank(arm_len = 35) {\n    difference() {\n        union() {\n            translate([arm_len/2, 0, 0])\n                cube([arm_len, 8, 6], center = true);         // arm\n            translate([arm_len, 0, 0])\n                cylinder(h = 8, d = 8, center = true);        // knob base\n        }\n        // Knob finger hole\n        translate([arm_len, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 5, center = true);\n    }\n}\n\n// Support frame ---------------------------------------------------------\nmodule frame() {\n    // Vertical post\n    cylinder(h = 70, d = 12);\n    // Base plate\n    translate([0, 0, -3])\n        cube([60, 40, 6], center = true);\n    // Triangular gussets for stability\n    for (x = [-25, 25])\n        translate([x, 0, 3])\n            rotate([0, 90, 0])\n                linear_extrude(height = 2)\n                    polygon([[0,0], [0,30], [20,0]]);\n}\n\n// Assembly --------------------------------------------------------------\ntranslate([0, 0, 38]) {\n    rotate([0, 90, 0]) {\n        propeller();\n    }\n}\n\ntranslate([0, 0, 35])\n    rotate([0, 90, 0])\n        crank();\n\nframe();",
    "renders": true
  },
  {
    "toy": "railcar",
    "openscad_code": "// Toy Railcar in realistic style - medium complexity\n// Overall length 120mm, width 35mm, height 45mm\n\n// Parameters\n$fn = 32;\nwall = 2;               // wall thickness for 3D printing\ncar_len = 120;\ncar_wid = 35;\ncar_h   = 30;\nroof_h  = 15;\nbogie_len = 25;\nbogie_wid = 22;\nwheel_d = 14;\naxle_d = 4;\ncoupler_len = 8;\ndoor_h = 20;\nwindow_h = 12;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main hollow box\n        hull() {\n            translate([0, 0, car_h/2])\n                cube([car_len - 10, car_wid, car_h], center = true);\n            translate([0, 0, car_h - 5])\n                cube([car_len - 15, car_wid - 4, car_h - 10], center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, car_h/2])\n            cube([car_len - 10 - 2*wall, car_wid - 2*wall, car_h - wall], center = true);\n        \n        // Door openings left\n        translate([-car_len/4, car_wid/2, car_h/2])\n            cube([12, wall+1, door_h], center = true);\n        \n        // Door openings right\n        translate([ car_len/4, car_wid/2, car_h/2])\n            cube([12, wall+1, door_h], center = true);\n        \n        // Window openings left\n        for (i = [-1, 0, 1]) {\n            translate([i*25 - 10, car_wid/2, car_h - 5])\n                cube([10, wall+1, window_h], center = true);\n            translate([i*25 + 10, car_wid/2, car_h - 5])\n                cube([10, wall+1, window_h], center = true);\n        }\n    }\n}\n\n// Roof\nmodule roof() {\n    difference() {\n        hull() {\n            translate([0, 0, car_h + roof_h/2])\n                cube([car_len - 5, car_wid - 2, roof_h], center = true);\n            translate([0, 0, car_h + roof_h])\n                cube([car_len - 10, car_wid - 6, 2], center = true);\n        }\n        // Ventilation slots\n        for (i = [-2:2]) {\n            translate([i*20, 0, car_h + roof_h - 2])\n                cube([8, car_wid - 8, 4], center = true);\n        }\n    }\n}\n\n// Bogie (truck) with wheels\nmodule bogie(offset) {\n    translate([offset, 0, wheel_d/2]) {\n        difference() {\n            // Bogie frame\n            cube([bogie_len, bogie_wid, 6], center = true);\n            // Cutouts for wheels\n            translate([-bogie_len/4, 0, -3])\n                cube([bogie_len/2 - 4, bogie_wid - 4, 8], center = true);\n            translate([ bogie_len/4, 0, -3])\n                cube([bogie_len/2 - 4, bogie_wid - 4, 8], center = true);\n        }\n        \n        // Wheels\n        for (x = [-bogie_len/4, bogie_len/4])\n            for (y = [-bogie_wid/2 + wheel_d/2, bogie_wid/2 - wheel_d/2]) {\n                translate([x, y, 0])\n                    rotate([0, 0, 90])\n                        cylinder(d = wheel_d, h = wall + 1, center = true);\n                // Axle\n                translate([x, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(d = axle_d, h = bogie_wid, center = true);\n            }\n    }\n}\n\n// Couplers\nmodule coupler(side) {\n    translate([side*(car_len/2 + coupler_len/2), 0, wheel_d + 4]) {\n        hull() {\n            cube([coupler_len, 6, 6], center = true);\n            translate([side*4, 0, 0])\n                sphere(d = 6);\n        }\n    }\n}\n\n// Assembly\nbody();\nroof();\nbogie(-car_len/3);\nbogie( car_len/3);\ncoupler(-1);\ncoupler(1);",
    "renders": true
  },
  {
    "toy": "coupester",
    "openscad_code": "// Coupester toy (coupe-style car) – realistic medium-complexity model\n// Overall length ≈110 mm, width ≈48 mm, height ≈30 mm\n// Wall thickness kept at 2 mm for 3D printing\n\n$fa = 2;\n$fs = 0.5;\n\nmodule coupester() {\n    // Main body shell\n    difference() {\n        // Outer shell\n        minkowski() {\n            hull() {\n                translate([-50, -22, 0]) cube([100, 44, 18]);\n                translate([-40, -20, 12]) cube([80, 40, 12]);\n            }\n            sphere(1);\n        }\n        // Cabin cavity\n        translate([-47, -19, 2]) cube([94, 38, 14]);\n    }\n\n    // Hood top surface slope\n    difference() {\n        translate([-5, -22, 16]) cube([45, 44, 6]);\n        translate([-5, -22, 20]) cube([50, 44, 10]);\n    }\n\n    // Roof plate\n    difference() {\n        translate([-42, -19, 24]) cube([84, 38, 2]);\n        translate([-38, -15, 24.1]) cube([76, 30, 2.2]);\n    }\n\n    // Front windshield\n    difference() {\n        hull() {\n            translate([-42, -19, 18]) cube([0.1, 38, 6]);\n            translate([-42, -15, 24]) cube([0.1, 30, 0.1]);\n        }\n        translate([-43, -18, 18]) cube([2, 36, 5.8]);\n    }\n\n    // Rear windshield\n    mirror([1,0,0]) translate([42, 0, 0]) hull() {\n        translate([0, -19, 18]) cube([0.1, 38, 6]);\n        translate([0, -15, 24]) cube([0.1, 30, 0.1]);\n    }\n\n    // Side windows left\n    difference() {\n        hull() {\n            translate([-42, -19, 18]) cube([84, 0.1, 6]);\n            translate([-38, -19, 24]) cube([76, 0.1, 0.1]);\n        }\n        translate([-38, -19.1, 18.1]) cube([76, 2, 5.8]);\n    }\n    // Side windows right\n    mirror([0,1,0]) translate([0, 19, 0]) difference() {\n        hull() {\n            translate([-42, 0, 18]) cube([84, 0.1, 6]);\n            translate([-38, 0, 24]) cube([76, 0.1, 0.1]);\n        }\n        translate([-38, 0.1, 18.1]) cube([76, 2, 5.8]);\n    }\n\n    // Wheels\n    module wheel() {\n        difference() {\n            cylinder(h=8, r=10, $fn=24);\n            translate([0,0,-0.1]) cylinder(h=8.2, r=7, $fn=24);\n        }\n    }\n    // Front wheels\n    translate([-30,-24,0]) wheel();\n    translate([-30, 24,0]) wheel();\n    // Rear wheels\n    translate([ 30,-24,0]) wheel();\n    translate([ 30, 24,0]) wheel();\n\n    // Headlights\n    translate([-49,-15,8]) sphere(3.5);\n    translate([-49, 15,8]) sphere(3.5);\n\n    // Taillights\n    translate([49,-15,10]) sphere(3);\n    translate([49, 15,10]) sphere(3);\n\n    // Bumper bars\n    translate([-50,-22,3]) cube([2, 44, 3]);\n    translate([48,-22,3]) cube([2, 44, 3]);\n\n    // Exhaust pipe\n    difference() {\n        translate([48,-8,3]) rotate([0,90,0]) cylinder(h=12, r=3, $fn=16);\n        translate([48,-8,3]) rotate([0,90,0]) cylinder(h=13, r=2.1, $fn=16);\n    }\n\n    // Side mirrors\n    translate([-20,-19,22]) cube([4,2,3]);\n    translate([-20, 17,22]) cube([4,2,3]);\n\n    // License plate recess\n    translate([48,-10,4]) cube([0.5,20,4]);\n}\n\ncoupester();",
    "renders": true
  },
  {
    "toy": "liftcopter",
    "openscad_code": "// Realistic Medium-Complexity LiftCopter Toy\n// Overall size ~110 mm rotor tip to tail\n\n// PARAMETERS\nwall = 2;               // 3D-print friendly wall thickness\nscaleFactor = 1;        // User-adjustable overall scale\nbodyL = 60; bodyW = 25; bodyH = 22;\nrotorD = 100; rotorH = 3;\nmastH = 35; mastR = 3;\nskidW = 20; skidL = 50; skidH = 8;\ntailBoomL = 45; tailBoomR = 4;\ntailRotorD = 22;\n\n// MAIN MODULE\nmodule liftCopter() {\n    union() {\n        // Central body shell\n        hull() {\n            translate([0,0,bodyH/2]) cube([bodyL,bodyW,bodyH], center=true);\n            translate([bodyL/2-10,0,bodyH/2+2]) sphere(d=bodyW);\n        }\n\n        // Cockpit canopy\n        difference() {\n            translate([bodyL/4,0,bodyH-wall]) \n                scale([1.2,0.9,0.6]) sphere(d=bodyW);\n            translate([bodyL/4,0,bodyH-wall-2]) \n                scale([1.15,0.85,0.55]) sphere(d=bodyW);\n        }\n\n        // Side windows (toy-like round portholes)\n        for (y = [-bodyW/3, bodyW/3]) {\n            translate([0,y,bodyH/2+3]) \n                rotate([0,90,0]) cylinder(h=wall+1, d=8, $fn=20);\n        }\n\n        // Main rotor mast\n        translate([0,0,bodyH+mastH/2]) \n            cylinder(h=mastH, r=mastR, $fn=16);\n\n        // Main rotor head (simple hub)\n        translate([0,0,bodyH+mastH]) \n            cylinder(h=rotorH+2, r=6, $fn=20);\n\n        // Main rotor blades (2-blade)\n        for (a = [0,120]) rotate([0,0,a]) \n            translate([rotorD/4,0,bodyH+mastH+rotorH/2+1]) \n                cube([rotorD/2,6,rotorH], center=true);\n\n        // Tail boom\n        translate([bodyL/2+tailBoomL/2,0,bodyH/2])\n            rotate([0,0,-5])\n            cylinder(h=tailBoomL, r=tailBoomR, $fn=16);\n\n        // Vertical stabilizer\n        translate([bodyL/2+tailBoomL-5,0,bodyH/2+tailBoomR+5])\n            cube([10,wall,12], center=true);\n\n        // Horizontal stabilizer\n        translate([bodyL/2+tailBoomL-5,0,bodyH/2])\n            cube([10,20,wall], center=true);\n\n        // Tail rotor\n        rotate([0,-90,0])\n        translate([bodyL/2+tailBoomL,0,bodyH/2])\n            cylinder(h=wall, r=tailRotorD/2);\n\n        // Landing skids\n        module skid() {\n            hull() {\n                translate([-skidL/2,0,0]) cube([wall,skidW,skidH]);\n                translate([skidL/2,0,0])  cube([wall,skidW,skidH]);\n            }\n            translate([0,0,skidH/2]) cube([skidL,wall,skidH-wall]);\n        }\n        translate([0,0,-bodyH/2-wall]) skid();\n    }\n}\n\n// Toy-friendly chamfers & fillets (simple rounding)\nmodule softEdge(s=2) {\n    minkowski() {\n        children();\n        sphere(r=s, $fn=8);\n    }\n}\n\n// FINAL ASSEMBLY\nscale([scaleFactor,scaleFactor,scaleFactor])\nsoftEdge(1)\nliftCopter();",
    "renders": true
  },
  {
    "toy": "streamtrain",
    "openscad_code": "// Steam Train Toy - Realistic Medium Complexity\n// Overall dimensions: ~120mm long, 35mm wide, 50mm tall\n\n// Parameters for toy-safe printing\nwall = 2;\nscale = 1;\n\nmodule wheel(d=20, w=4){\n    difference(){\n        cylinder(h=w, d=d, $fn=32);\n        translate([0,0,-1]) cylinder(h=w+2, d=d-wall*2, $fn=32);\n    }\n}\n\nmodule wheelset(count=2, spacing=15){\n    for(i=[0:count-1]){\n        translate([i*spacing,0,0]) wheel();\n    }\n}\n\nmodule drive_rod(){\n    color(\"DarkGoldenrod\")\n    difference(){\n        translate([-2,0,0]) cube([4,2,30]);\n        for(i=[0:3]){\n            translate([0, -1, 5+i*7]) rotate([90,0,0]) cylinder(h=4, d=3, $fn=16);\n        }\n    }\n}\n\nmodule boiler(){\n    color(\"DarkGreen\")\n    difference(){\n        // Main boiler\n        translate([0,0,25]) rotate([90,0,0]) cylinder(h=70, d=22, $fn=64);\n        \n        // Front taper\n        translate([65,0,25]) rotate([90,0,0]) cylinder(h=15, d1=22, d2=15, $fn=64);\n        \n        // Smokestack\n        translate([70,0,40]) rotate([90,0,0]) cylinder(h=25, d=12, $fn=32);\n        translate([70,0,40]) rotate([90,0,0]) cylinder(h=28, d=8, $fn=32);\n        \n        // Toy safe - hollow interior\n        translate([0,0,25]) rotate([90,0,0]) cylinder(h=70, d=22-wall*2, $fn=64);\n        translate([65,0,25]) rotate([90,0,0]) cylinder(h=15, d1=22-wall*2, d2=15-wall*2, $fn=64);\n    }\n}\n\nmodule cab(){\n    color(\"DarkGreen\")\n    union(){\n        // Main cab\n        difference(){\n            translate([-20,-15,10]) cube([40,30,30]);\n            translate([-18,-13,12]) cube([36,26,26]);\n        }\n        \n        // Roof\n        translate([-22,-17,40]) cube([44,34,3]);\n        \n        // Chimney\n        translate([10,0,43]) cylinder(h=8, d=6, $fn=16);\n    }\n}\n\nmodule tender(){\n    color(\"Black\")\n    difference(){\n        translate([-50,-12,8]) cube([35,24,25]);\n        translate([-48,-10,10]) cube([31,20,21]);\n    }\n}\n\nmodule coupling(){\n    color(\"DarkGoldenrod\")\n    union(){\n        translate([-1,-4,8]) cube([2,8,5]);\n        translate([0,-4,8]) rotate([0,90,0]) cylinder(h=8, d=4, $fn=16);\n    }\n}\n\nmodule locomotive(){\n    union(){\n        // Boiler assembly\n        translate([30,0,0]) boiler();\n        \n        // Cab\n        translate([-10,0,0]) cab();\n        \n        // Wheels\n        translate([40,0,12]) rotate([0,90,0]) wheelset(3, 25);\n        translate([40,0,2]) rotate([0,90,0]) wheelset(3, 25);\n        \n        // Drive rods\n        translate([40,0,12]) rotate([0,90,0]) drive_rod();\n        \n        // Tender\n        translate([-65,0,0]) tender();\n        \n        // Tender wheels\n        translate([-55,0,12]) rotate([0,90,0]) wheelset(2, 20);\n        translate([-55,0,2]) rotate([0,90,0]) wheelset(2, 20);\n        \n        // Couplings\n        translate([75,0,0]) coupling();\n        translate([-85,0,0]) mirror([1,0,0]) coupling();\n        \n        // Safety details\n        color(\"DarkGoldenrod\")\n        translate([50,0,35]) sphere(d=4);\n        translate([30,0,35]) sphere(d=4);\n    }\n}\n\n// Main assembly\nscale(scale) locomotive();",
    "renders": true
  },
  {
    "toy": "runabout",
    "openscad_code": "// Toy Runabout - Realistic Style with Medium Complexity\n// Overall dimensions: 120mm L x 70mm W x 60mm H\n\n$fn = 32;\n\n// Main body\nmodule runabout_body() {\n    // Hull base\n    difference() {\n        hull() {\n            // Front curved section\n            translate([0, 0, 5])\n                cube([60, 70, 20], center=true);\n            // Rear tapered section\n            translate([-50, 0, 5])\n                cube([40, 50, 20], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 7])\n            cube([110, 66, 16], center=true);\n    }\n}\n\n// Cockpit seating area\nmodule cockpit() {\n    difference() {\n        // Main cockpit well\n        translate([0, 0, 15])\n            cube([80, 55, 10], center=true);\n        \n        // Seating indentations\n        for (x = [-20, 20]) {\n            translate([x, 0, 15])\n                cube([25, 40, 12], center=true);\n        }\n    }\n}\n\n// Windshield frame\nmodule windshield() {\n    difference() {\n        // Frame structure\n        translate([-5, 0, 25])\n            cube([50, 65, 15], center=true);\n        \n        // Window opening\n        translate([-5, 0, 30])\n            cube([45, 55, 12], center=true);\n    }\n}\n\n// Engine housing\nmodule engine_housing() {\n    // Main engine box\n    translate([-55, 0, 5])\n        cube([20, 40, 15], center=true);\n    \n    // Exhaust pipes\n    for (y = [-15, 15]) {\n        translate([-65, y, 8])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=3);\n    }\n}\n\n// Steering wheel\nmodule steering_wheel() {\n    translate([10, 0, 28])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=15);\n    \n    // Wheel spokes\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([10, 7.5, 28])\n                cube([15, 3, 3], center=true);\n    }\n    \n    // Steering column\n    translate([10, 0, 15])\n        cylinder(h=13, r=2);\n}\n\n// Side rails\nmodule side_rails() {\n    for (side = [-1, 1]) {\n        // Main rail\n        translate([0, side * 35, 10])\n            cube([100, 4, 8], center=true);\n        \n        // Support posts\n        for (x = [-40, -20, 0, 20, 40]) {\n            translate([x, side * 35, 6])\n                cube([4, 4, 12], center=true);\n        }\n    }\n}\n\n// Propeller\nmodule propeller() {\n    translate([-70, 0, 5])\n        rotate([90, 0, 0])\n            cylinder(h=5, r=12);\n    \n    // Blades\n    for (i = [0:90:359]) {\n        rotate([90, 0, i])\n            translate([-70, 0, 5])\n                cube([20, 2, 8], center=true);\n    }\n    \n    // Propeller hub\n    translate([-70, 0, 5])\n        sphere(r=5);\n}\n\n// Toy wheels for display/rolling\nmodule toy_wheels() {\n    for (x = [-30, 30]) {\n        for (y = [-25, 25]) {\n            translate([x, y, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r=8);\n            \n            // Wheel hub\n            translate([x, y, 2])\n                sphere(r=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    runabout_body();\n    cockpit();\n    windshield();\n    engine_housing();\n    steering_wheel();\n    side_rails();\n    \n    // Rear components\n    propeller();\n    \n    // Toy features\n    toy_wheels();\n    \n    // Additional toy details\n    // Handles on sides\n    for (side = [-1, 1]) {\n        translate([20, side * 38, 20])\n            rotate([90, 0, 90])\n                cylinder(h=15, r=2);\n    }\n    \n    // Safety bumper\n    translate([0, 0, 2])\n        cube([120, 74, 4], center=true);\n}",
    "renders": true
  },
  {
    "toy": "spyder",
    "openscad_code": "// Realistic Spyder Toy (Medium Complexity)\n// Overall dimensions: ~80mm wide x 70mm deep x 25mm tall\n\n$fn = 36;\n\n// Main body\nmodule spyder_body() {\n    // Central abdomen (rounded)\n    translate([0, 0, 8])\n        scale([1, 0.8, 0.5])\n        sphere(d=20);\n    \n    // Cephalothorax (front segment)\n    translate([0, -12, 8])\n        scale([0.7, 0.9, 0.4])\n        sphere(d=16);\n    \n    // Small connector between segments\n    translate([0, -6, 7])\n        rotate([90, 0, 0])\n        cylinder(h=10, d1=12, d2=8, center=true);\n}\n\n// Single leg module\nmodule leg(side, position) {\n    // Hip joint\n    translate([side * 8, position * 6, 9])\n        sphere(d=5);\n    \n    // First leg segment\n    translate([side * 10, position * 8, 9])\n        rotate([0, 0, side * (20 + position * 10)])\n        rotate([0, 20, 0])\n        cylinder(h=15, d1=4, d2=3.5);\n    \n    // Second leg segment\n    translate([side * 22, position * 12, 7])\n        rotate([0, 0, side * (30 + position * 5)])\n        rotate([0, -15, 0])\n        cylinder(h=18, d1=3.5, d2=3);\n    \n    // Foot pad (flat for printing)\n    translate([side * 35, position * 16, 2])\n        rotate([0, 0, side * 15])\n        cube([8, 4, 2], center=true);\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    translate([-3, -18, 10])\n        sphere(d=3);\n    \n    // Right eye\n    translate([3, -18, 10])\n        sphere(d=3);\n    \n    // Eye pupils\n    difference() {\n        translate([-3, -18.5, 11])\n            sphere(d=2);\n        translate([-3.5, -19.5, 11.5])\n            sphere(d=1);\n    }\n    \n    difference() {\n        translate([3, -18.5, 11])\n            sphere(d=2);\n        translate([3.5, -19.5, 11.5])\n            sphere(d=1);\n    }\n}\n\n// Spinnerets (rear)\nmodule spinnerets() {\n    translate([0, 10, 6])\n        cylinder(h=3, d=4);\n    \n    translate([-2, 11, 6])\n        rotate([10, 0, 0])\n        cylinder(h=2, d=2);\n    \n    translate([2, 11, 6])\n        rotate([10, 0, 0])\n        cylinder(h=2, d=2);\n}\n\n// Fangs\nmodule fangs() {\n    // Left fang\n    translate([-4, -20, 7])\n        rotate([30, 0, -15])\n        cylinder(h=6, d1=3, d2=1);\n    \n    // Right fang\n    translate([4, -20, 7])\n        rotate([30, 0, 15])\n        cylinder(h=6, d1=3, d2=1);\n}\n\n// Main assembly\nunion() {\n    spyder_body();\n    \n    // Eight legs - 4 per side\n    for (i = [1, 2, 3, 4]) {\n        leg(1, i);  // Left legs\n        leg(-1, i); // Right legs\n    }\n    \n    eyes();\n    spinnerets();\n    fangs();\n    \n    // Surface texture details (small bumps)\n    for (x = [-8:4:8]) {\n        for (y = [-6:4:10]) {\n            if (x*x + y*y < 100) {\n                translate([x, y, 12])\n                    sphere(d=1);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "bigrig",
    "openscad_code": "// BigRig Toy Truck - Medium Complexity, Realistic Style\n// 3D printable toy truck with trailer, cab, and details\n// Overall length: 120mm, width: 30mm, height: 45mm\n\n$fn = 32;\nwall = 2;\n\nmodule wheel(diameter=12, width=6) {\n    // Simple wheel with tire and hub\n    difference() {\n        cylinder(h=width, d=diameter, center=true); // Tire\n        cylinder(h=width+0.5, d=diameter-4, center=true); // Hub recess\n    }\n    cylinder(h=width+1, d=diameter-8, center=true); // Hub\n}\n\nmodule wheels_set(offset) {\n    // Two wheels on an axle\n    translate([offset, 15, 0]) rotate([90,0,0]) wheel();\n    translate([offset, -15, 0]) rotate([90,0,0]) wheel();\n}\n\nmodule cab() {\n    // Main cab body\n    union() {\n        // Lower cab\n        translate([0,0,10]) cube([35,30,20], center=true);\n        \n        // Cab roof\n        translate([0,0,25]) cube([30,28,10], center=true);\n        \n        // Hood\n        translate([-20,0,8]) cube([30,25,16], center=true);\n        \n        // Cab windows\n        difference() {\n            translate([0,0,15]) cube([34,28,18], center=true);\n            translate([0,10,15]) cube([32,12,16], center=true);\n            translate([0,-10,15]) cube([32,12,16], center=true);\n        }\n        \n        // Grille\n        translate([-34,0,8]) cube([2,20,12], center=true);\n    }\n}\n\nmodule trailer() {\n    // Trailer box\n    translate([70,0,20]) {\n        difference() {\n            cube([80,28,40], center=true); // Main box\n            \n            // Rear doors\n            translate([38,0,0]) cube([2,24,36], center=true);\n            \n            // Side panels for detail\n            for(side = [-1,1]) {\n                translate([0, side*14, 0]) cube([76, 2, 38], center=true);\n            }\n        }\n    }\n}\n\nmodule chassis() {\n    // Main frame rails\n    translate([25,0,6]) cube([90,6,12], center=true);\n    translate([25,0,6]) mirror([0,1,0]) cube([90,6,12], center=true);\n    \n    // Cross members\n    for(i = [-20:20:60]) {\n        translate([i,0,6]) cube([2,30,12], center=true);\n    }\n}\n\nmodule fuel_tanks() {\n    // Side fuel tanks\n    translate([0,13,6]) rotate([90,0,0]) cylinder(h=20, d=8);\n    translate([0,-13,6]) rotate([90,0,0]) cylinder(h=20, d=8);\n}\n\nmodule exhaust_stack() {\n    // Exhaust pipe behind cab\n    translate([20,12,25]) cylinder(h=20, d=3);\n    translate([20,12,45]) sphere(d=4);\n}\n\nmodule fifth_wheel() {\n    // Connection plate for trailer\n    translate([60,0,12]) cube([10,20,2], center=true);\n}\n\n// Main assembly\nunion() {\n    // Chassis and frame\n    chassis();\n    \n    // Cab components\n    cab();\n    \n    // Trailer\n    trailer();\n    \n    // Details\n    fuel_tanks();\n    exhaust_stack();\n    fifth_wheel();\n    \n    // Wheels\n    wheels_set(-15);  // Front wheels\n    wheels_set(15);   // Drive wheels\n    wheels_set(55);   // Trailer wheels\n    wheels_set(75);   // Trailer wheels\n    wheels_set(95);   // Trailer wheels\n}",
    "renders": true
  },
  {
    "toy": "condor",
    "openscad_code": "// Condor Toy Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm wingspan, ~50mm tall\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body module\nmodule condor_body() {\n    // Central torso - elongated ellipsoid\n    translate([0, 0, 15]) \n        scale([1.2, 1, 1.5]) \n            sphere(r=12);\n    \n    // Lower body bulge\n    translate([0, 0, 8]) \n        scale([1.1, 0.9, 0.8]) \n            sphere(r=10);\n}\n\n// Head with distinctive condor features\nmodule condor_head() {\n    union() {\n        // Main head shape\n        translate([0, 0, 45]) \n            scale([0.8, 0.7, 1]) \n                sphere(r=10);\n        \n        // Beak\n        translate([0, 0, 52]) \n            rotate([30, 0, 0]) \n                scale([0.3, 0.3, 1]) \n                    cylinder(h=12, r1=4, r2=0);\n        \n        // Head ridge\n        for(i = [0:5:15]) {\n            translate([0, -3+i*0.2, 45+i]) \n                rotate([90, 0, 0]) \n                    cylinder(h=2, r=4-i*0.15);\n        }\n    }\n}\n\n// Wing module with feather details\nmodule wing(is_left=true) {\n    side = is_left ? 1 : -1;\n    \n    translate([side*25, 0, 25]) \n        rotate([0, 0, is_left ? -10 : 10]) {\n            // Main wing structure\n            scale([1.5, 0.2, 0.8]) \n                sphere(r=20);\n            \n            // Wing tip\n            translate([side*15, 0, 5]) \n                scale([0.6, 0.3, 0.4]) \n                    sphere(r=8);\n            \n            // Primary feathers\n            for(i = [1:4]) {\n                translate([side*(20+i*3), 0, 20-i*2]) \n                    rotate([0, 0, is_left ? -20-i*5 : 20+i*5]) \n                        scale([0.4, 0.1, 0.3]) \n                            cube([8, 2, 1], center=true);\n            }\n            \n            // Secondary feathers\n            for(i = [1:3]) {\n                translate([side*(10+i*2), 0, 15-i*3]) \n                    rotate([0, 0, is_left ? -10-i*3 : 10+i*3]) \n                        scale([0.5, 0.1, 0.3]) \n                            cube([6, 1.5, 1], center=true);\n            }\n        }\n}\n\n// Tail feathers\nmodule tail() {\n    translate([0, -25, 15]) \n        rotate([20, 0, 0]) {\n            // Central tail\n            scale([0.8, 0.2, 1.5]) \n                cube([8, 2, 12], center=true);\n            \n            // Side tail feathers\n            for(i = [0:1]) {\n                translate([i*6-3, 0, 0]) \n                    scale([0.6, 0.15, 1.2]) \n                        cube([6, 1.5, 10], center=true);\n            }\n        }\n}\n\n// Legs and feet\nmodule leg(is_left=true) {\n    side = is_left ? 1 : -1;\n    \n    translate([side*8, 0, 5]) {\n        // Upper leg\n        rotate([0, side*15, 0]) \n            cylinder(h=15, r1=3, r2=2.5);\n        \n        // Lower leg\n        translate([0, -12, 0]) \n            rotate([0, side*20, 0]) \n                cylinder(h=12, r1=2.5, r2=2);\n        \n        // Foot\n        translate([0, -20, -2]) {\n            // Central toe\n            translate([0, 0, 0]) \n                rotate([0, 90, 0]) \n                    cylinder(h=8, r1=1.5, r2=2);\n            \n            // Side toes\n            for(i = [0:1]) {\n                translate([side*(i*2-1)*2, 0, -1]) \n                    rotate([0, 90, side*(i*2-1)*20]) \n                        cylinder(h=6, r1=1.2, r2=1.5);\n            }\n        }\n    }\n}\n\n// Eye detail\nmodule eye(is_left=true) {\n    side = is_left ? 1 : -1;\n    \n    translate([side*4, 7, 45]) {\n        // White part\n        color(\"white\") sphere(r=2.5);\n        \n        // Pupil\n        translate([0, 1, 0]) \n            color(\"black\") sphere(r=1.2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    condor_body();\n    condor_head();\n    \n    // Wings\n    wing(true);\n    wing(false);\n    \n    // Tail\n    tail();\n    \n    // Legs\n    leg(true);\n    leg(false);\n    \n    // Eyes\n    eye(true);\n    eye(false);\n}\n\n// Base stand for stability\ntranslate([0, -15, 0]) \n    difference() {\n        cylinder(h=5, r=15);\n        cylinder(h=5, r=12);\n    }",
    "renders": true
  },
  {
    "toy": "prop",
    "openscad_code": "// Toy Wooden Rocking Horse Prop - Realistic Style\n// Overall dimensions: 120mm length x 60mm width x 80mm height\n\n// Parameters\nrocker_radius = 30;\nrocker_length = 120;\nbody_height = 40;\nbody_width = 35;\nbody_length = 65;\nhead_height = 25;\nleg_thickness = 8;\ntail_length = 20;\nhandle_diameter = 6;\nhandle_length = 40;\n\n// Main module to generate the complete toy\nmodule rocking_horse() {\n    // Rockers - curved base\n    union() {\n        // Left rocker\n        translate([-rocker_length/2, -body_width/2 - 5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=rocker_length, r=rocker_radius, $fn=50);\n        \n        // Right rocker\n        translate([-rocker_length/2, body_width/2 + 5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=rocker_length, r=rocker_radius, $fn=50);\n    }\n    \n    // Body - main horse torso\n    translate([0, 0, rocker_radius + body_height/2])\n        cube([body_length, body_width, body_height], center=true);\n    \n    // Head and neck\n    translate([body_length/2 + 15, 0, rocker_radius + body_height + 10])\n        union() {\n            // Neck\n            cube([20, 12, 20], center=true);\n            \n            // Head\n            translate([15, 0, 10])\n                sphere(r=12, $fn=32);\n            \n            // Ears\n            for(x = [-6, 6])\n                translate([x, 0, 22])\n                    cube([4, 2, 8], center=true);\n        }\n    \n    // Legs - four legs connecting to rockers\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, rocker_radius + leg_thickness/2])\n            cube([leg_thickness, leg_thickness, body_height - leg_thickness], center=true);\n    }\n    \n    leg(-body_length/4, -body_width/3);\n    leg(-body_length/4, body_width/3);\n    leg(body_length/4, -body_width/3);\n    leg(body_length/4, body_width/3);\n    \n    // Tail\n    translate([-body_length/2 - 10, 0, rocker_radius + body_height - 10])\n        rotate([0, 45, 0])\n            cylinder(h=tail_length, r1=3, r2=1, $fn=12);\n    \n    // Seat/saddle\n    translate([0, 0, rocker_radius + body_height + 2])\n        cube([body_length/2, body_width - 10, 4], center=true);\n    \n    // Handles - curved safety handles\n    module handle(x_pos) {\n        translate([x_pos, 0, rocker_radius + body_height + 15])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r=handle_diameter/2, center=true, $fn=16);\n    }\n    \n    handle(0);\n    \n    // Support bars between rockers\n    for(x = [-rocker_length/3, rocker_length/3]) {\n        translate([x, 0, rocker_radius - 8])\n            cube([4, body_width + 10, 4], center=true);\n    }\n    \n    // Eyes - small spheres\n    translate([body_length/2 + 27, -5, rocker_radius + body_height + 15])\n        sphere(r=2, $fn=12);\n    translate([body_length/2 + 27, 5, rocker_radius + body_height + 15])\n        sphere(r=2, $fn=12);\n}\n\n// Generate the complete toy\nrocking_horse();",
    "renders": true
  },
  {
    "toy": "roadking",
    "openscad_code": "// Roadking toy (rocking horse) in realistic style, medium complexity\n// Overall dimensions: ~110mm long × 60mm wide × 90mm high\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main parameters\nhorse_length = 90;\nhorse_width = 35;\nhorse_height = 60;\nrocker_radius = 55;\nwall_thickness = 2;\n\nmodule horse_body() {\n    // Main body - oval shape\n    translate([0, 0, 30])\n    scale([1.2, 0.8, 1])\n    sphere(d=40);\n    \n    // Neck\n    translate([25, 0, 45])\n    rotate([0, 20, 0])\n    scale([0.8, 0.6, 1.2])\n    cylinder(d1=25, d2=15, h=30);\n    \n    // Head\n    translate([40, 0, 65])\n    scale([1, 0.8, 1.1])\n    sphere(d=20);\n    \n    // Ears\n    for (y = [-4, 4]) {\n        translate([45, y, 75])\n        rotate([0, 15, 0])\n        cylinder(d1=6, d2=3, h=12);\n    }\n    \n    // Tail\n    translate([-35, 0, 35])\n    rotate([0, -30, 0])\n    scale([0.5, 0.5, 1.5])\n    cylinder(d=12, h=25);\n}\n\nmodule legs() {\n    // Front legs\n    for (x = [15, 25]) {\n        translate([x, -12, 12])\n        rotate([15, 0, 0])\n        cylinder(d=8, h=30);\n        \n        translate([x, 12, 12])\n        rotate([15, 0, 0])\n        cylinder(d=8, h=30);\n    }\n    \n    // Rear legs\n    for (x = [-20, -30]) {\n        translate([x, -12, 12])\n        rotate([-15, 0, 0])\n        cylinder(d=8, h=30);\n        \n        translate([x, 12, 12])\n        rotate([-15, 0, 0])\n        cylinder(d=8, h=30);\n    }\n}\n\nmodule saddle() {\n    // Seat\n    translate([5, 0, 45])\n    scale([1.2, 0.8, 0.3])\n    sphere(d=25);\n    \n    // Front pommel\n    translate([15, 0, 45])\n    cylinder(d=18, h=8);\n    \n    // Rear cantle\n    translate([-5, 0, 45])\n    cylinder(d=20, h=10);\n}\n\nmodule rockers() {\n    // Left rocker\n    translate([0, -20, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=wall_thickness, d=rocker_radius*2, center=true);\n        translate([0, 0, -wall_thickness/2-1])\n        cylinder(h=wall_thickness+2, d=rocker_radius*2-4, center=true);\n    }\n    \n    // Right rocker\n    translate([0, 20, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=wall_thickness, d=rocker_radius*2, center=true);\n        translate([0, 0, -wall_thickness/2-1])\n        cylinder(h=wall_thickness+2, d=rocker_radius*2-4, center=true);\n    }\n    \n    // Cross supports\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, 5])\n        cube([wall_thickness, 40, 10], center=true);\n    }\n}\n\nmodule face_details() {\n    // Eyes\n    for (y = [-5, 5]) {\n        translate([48, y, 68])\n        sphere(d=4);\n    }\n    \n    // Nostrils\n    for (y = [-3, 3]) {\n        translate([50, y, 64])\n        sphere(d=3);\n    }\n    \n    // Mouth line\n    translate([47, 0, 60])\n    rotate([0, 90, 0])\n    cylinder(d=2, h=10);\n}\n\n// Assembly\nunion() {\n    // Main horse body\n    union() {\n        horse_body();\n        legs();\n        saddle();\n    }\n    \n    // Rocking base\n    rockers();\n    \n    // Facial features\n    face_details();\n}",
    "renders": true
  },
  {
    "toy": "haulmaster",
    "openscad_code": "// Haulmaster Toy Dump Truck (realistic, medium complexity)\n// Approximate size: 120 mm long x 70 mm wide x 70 mm tall\n\n// Global parameters\n$fn = 36;\nwheel_d = 22;\nwheel_w = 10;\nwall_t = 2;\nbed_l = 55;\nbed_w = 50;\nbed_h = 20;\n\n// Main assembly\nunion() {\n    // Chassis frame\n    chassis();\n\n    // Cab\n    translate([bed_l/2 + 15, 0, 0]) cab();\n\n    // Dump bed\n    translate([-bed_l/2, 0, 17]) rotate([0, 30, 0]) dump_bed();\n\n    // Wheels\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([bed_l/2 + 10, side * 35, 8]) wheel();\n        // Rear wheels\n        translate([-bed_l/2 + 5, side * 35, 8]) wheel();\n    }\n\n    // Front bumper\n    translate([bed_l/2 + 25, 0, 5]) bumper();\n}\n\n// Chassis module\nmodule chassis() {\n    difference() {\n        // Main chassis plate\n        cube([bed_l + 50, bed_w + 20, 5], center=true);\n\n        // Wheel arches\n        for(side = [-1, 1]) {\n            translate([bed_l/2 - 10, side * 30, 0])\n                cylinder(h=6, r=12, center=true);\n        }\n    }\n\n    // Side rails\n    for(side = [-1, 1]) {\n        translate([0, side * (bed_w/2 + 10), 2.5])\n            cube([bed_l + 50, 5, 5], center=true);\n    }\n\n    // Cross supports\n    for(x = [-20, 0, 20]) {\n        translate([x, 0, 2.5])\n            cube([5, bed_w + 20, 5], center=true);\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire\n            cylinder(h=wheel_w, r=wheel_d/2, center=true);\n            // Rim\n            translate([0, 0, wheel_w/2 + 0.1])\n                cylinder(h=wall_t, r=wheel_d/2 - 5, center=true);\n            translate([0, 0, -wheel_w/2 - 0.1])\n                cylinder(h=wall_t, r=wheel_d/2 - 5, center=true);\n        }\n        // Hub hole\n        cylinder(h=wheel_w + 2, r=3, center=true);\n    }\n}\n\n// Cab module\nmodule cab() {\n    union() {\n        // Cab base\n        translate([0, 0, 2.5])\n            cube([25, 35, 15], center=true);\n\n        // Cab roof\n        translate([0, 0, 17.5])\n            cube([25, 35, 5], center=true);\n\n        // Windshield\n        translate([12.5, 0, 10])\n            cube([wall_t, 30, 10], center=true);\n\n        // Side windows\n        for(side = [-1, 1]) {\n            translate([5, side * 17.5, 10])\n                cube([15, wall_t, 8], center=true);\n        }\n\n        // Exhaust pipe\n        translate([0, 20, 22.5])\n            cylinder(h=20, r=3);\n    }\n}\n\n// Dump bed module\nmodule dump_bed() {\n    difference() {\n        // Main bed\n        cube([bed_l, bed_w, bed_h], center=true);\n\n        // Inside cavity\n        translate([0, 0, bed_h/2 - wall_t])\n            cube([bed_l - 2*wall_t, bed_w - 2*wall_t, bed_h], center=true);\n\n        // Tailgate hinge gaps\n        translate([-bed_l/2 - 1, 0, -bed_h/2 + 5])\n            cube([2, 10, 5], center=true);\n    }\n\n    // Tailgate\n    translate([-bed_l/2 - wall_t, 0, -bed_h/2 + 5])\n        cube([wall_t, bed_w, 8], center=true);\n\n    // Bed supports\n    for(x = [-15, 0, 15]) {\n        translate([x, 0, -bed_h/2 - 2.5])\n            cube([5, bed_w - 10, 5], center=true);\n    }\n}\n\n// Front bumper module\nmodule bumper() {\n    difference() {\n        // Main bumper\n        cube([5, 45, 10], center=true);\n\n        // Tow hook hole\n        translate([0, 0, 0])\n            cylinder(h=6, r=5, center=true);\n    }\n\n    // Tow hook\n    translate([0, 0, -8])\n        cylinder(h=10, r=4);\n}",
    "renders": true
  },
  {
    "toy": "skyglider",
    "openscad_code": "// Skyglider toy (realistic style, medium complexity)\n// Wingspan ≈ 120 mm, length ≈ 90 mm, ready for 3D printing\n\n// Parameters\nwing_span = 120;\nfuse_len = 90;\nfuse_diam = 12;\ntail_span = 45;\nwall = 2;\n\nmodule wing() {\n    difference() {\n        // Main wing\n        translate([0, 0, fuse_diam/2])\n            scale([1, 0.18, 0.06])\n                cube([wing_span, wing_span, wing_span], center=true);\n\n        // Dihedral cut\n        translate([0, -wing_span/2, 0])\n            rotate([45, 0, 0])\n                cube([wing_span+2, wing_span, wing_span], center=true);\n    }\n\n    // Wing tips\n    for (s = [-1, 1]) {\n        translate([s*wing_span/2, 0, fuse_diam/2])\n            rotate([0, 0, s*30])\n                scale([0.1, 0.18, 0.06])\n                    cube([10, 10, 10], center=true);\n    }\n}\n\nmodule tail() {\n    // Horizontal stabilizer\n    difference() {\n        translate([-fuse_len/2-5, 0, fuse_diam/2+2])\n            scale([0.4, 0.12, 0.04])\n                cube([tail_span, tail_span, tail_span], center=true);\n        // Elevator cut\n        translate([-fuse_len/2-5, 0, fuse_diam/2+2])\n            scale([0.4, 0.12, 0.04])\n                cube([tail_span-10, tail_span-10, tail_span], center=true);\n    }\n\n    // Vertical stabilizer\n    translate([-fuse_len/2-5, 0, fuse_diam/2+7])\n        scale([0.04, 0.12, 0.3])\n            cube([tail_span/2, tail_span/2, tail_span/2], center=true);\n}\n\nmodule fuselage() {\n    // Main body\n    color(\"lightgray\")\n    difference() {\n        hull() {\n            // Nose cone\n            translate([fuse_len/2-3, 0, 0])\n                sphere(d=fuse_diam, $fn=20);\n            // Tail boom\n            translate([-fuse_len/2, 0, 0])\n                sphere(d=fuse_diam*0.8, $fn=20);\n        }\n\n        // Cockpit opening\n        translate([fuse_len/4, 0, fuse_diam/2-1])\n            scale([1.5, 0.8, 0.5])\n                sphere(d=fuse_diam, $fn=20);\n\n        // Weight cavity (front)\n        translate([fuse_len/2-10, 0, -fuse_diam/4])\n            cube([15, fuse_diam-4, fuse_diam/2], center=true);\n    }\n\n    // Canopy frame\n    difference() {\n        translate([fuse_len/4, 0, fuse_diam/2+2])\n            scale([1.5, 0.8, 0.3])\n                sphere(d=fuse_diam+wall, $fn=20);\n        translate([fuse_len/4, 0, fuse_diam/2+2])\n            scale([1.5, 0.8, 0.3])\n                sphere(d=fuse_diam, $fn=20);\n    }\n}\n\nmodule propeller() {\n    // Spinner\n    translate([fuse_len/2+fuse_diam/2-1, 0, 0])\n        sphere(d=fuse_diam*1.2, $fn=20);\n\n    // Blades\n    for (a = [0:120:359])\n        rotate([0, 0, a])\n            translate([fuse_len/2+fuse_diam/2+2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=25, d1=8, d2=3);\n}\n\nmodule launch_hook() {\n    translate([-fuse_len/2-2, 0, -fuse_diam/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=wall*2, $fn=12);\n    translate([-fuse_len/2-2, 0, -fuse_diam/2-4])\n        sphere(d=wall*2.5, $fn=12);\n}\n\n// Assembly\nunion() {\n    fuselage();\n    wing();\n    tail();\n    propeller();\n    launch_hook();\n}",
    "renders": true
  },
  {
    "toy": "whirlwind",
    "openscad_code": "// Whirlwind Toy - Realistic Style\n// A spinning top toy with spiral fins, designed for 3D printing\n\n// Global parameters\nwall_thickness = 2;\nbase_diameter = 40;\ntop_height = 25;\nfin_count = 6;\nfin_thickness = 2;\ntip_height = 5;\n\n// Main assembly\nmodule whirlwind_toy() {\n    // Central shaft with hollow core\n    difference() {\n        // Outer shaft\n        cylinder(h=top_height + tip_height, d=base_diameter, $fn=48);\n        \n        // Hollow core\n        translate([0, 0, wall_thickness])\n            cylinder(h=top_height + tip_height - wall_thickness, d=base_diameter - wall_thickness*2, $fn=48);\n    }\n    \n    // Spinning tip\n    translate([0, 0, top_height])\n        cylinder(h=tip_height, d1=base_diameter - wall_thickness*2, d2=0, $fn=24);\n    \n    // Spiral fins\n    for(i=[0:fin_count-1]) {\n        // Calculate angle for each fin\n        angle = i * (360/fin_count);\n        \n        // Create twisted fin\n        translate([0, 0, top_height/2])\n            rotate([0, 0, angle])\n                translate([base_diameter/2 - fin_thickness/2 - wall_thickness, 0, 0])\n                    rotate([0, 90, 0])\n                        linear_extrude(height=base_diameter/2 - wall_thickness, twist=30, $fn=24)\n                            square([fin_thickness, top_height/2], center=true);\n    }\n    \n    // Top grip ring\n    translate([0, 0, top_height + tip_height - 2])\n        difference() {\n            cylinder(h=4, d=base_diameter + 6, $fn=48);\n            cylinder(h=4, d=base_diameter + 2, $fn=48);\n        }\n    \n    // Decorative rings\n    for(i=[1:3]) {\n        translate([0, 0, i * (top_height/4)])\n            difference() {\n                cylinder(h=1, d=base_diameter + 2, $fn=48);\n                cylinder(h=1, d=base_diameter, $fn=48);\n            }\n    }\n    \n    // Bottom reinforcement ring\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=wall_thickness, d=base_diameter + 4, $fn=48);\n            cylinder(h=wall_thickness, d=base_diameter, $fn=48);\n        }\n}\n\n// Generate the toy\nwhirlwind_toy();",
    "renders": true
  },
  {
    "toy": "steamliner",
    "openscad_code": "// Steamliner Toy – OpenSCAD\n// Overall length ~120 mm, height ~60 mm, width ~40 mm\n// Wall thickness ≥ 2 mm, printable with no supports\n\n$fn = 36;\n\nmodule main() {\n    // Main body hull\n    difference() {\n        hull() {\n            translate([-55, -20, 0])  cube([110, 40, 30], center = true);\n            translate([ 45, -15, 0])  cube([25, 30, 25], center = true);\n        }\n        // Cockpit hollow\n        translate([40, 0, 10]) cube([30, 20, 15], center = true);\n    }\n\n    // Nose cone\n    translate([55, 0, 0]) rotate([0, 90, 0]) cylinder(h = 25, r1 = 15, r2 = 0);\n\n    // Cabin roof\n    translate([25, 0, 18]) scale([1.2, 1, 1]) sphere(r = 12);\n\n    // Fins (vertical & horizontal)\n    translate([35, 0, 25]) cube([5, 1, 15], center = true);   // vertical fin\n    translate([35, 0, 10]) rotate([0, 90, 0]) cube([5, 1, 20], center = true); // horizontal tail\n\n    // Wing module\n    module wing() {\n        difference() {\n            hull() {\n                cube([40, 6, 2], center = true);\n                translate([-20, 0, -2]) cube([5, 6, 4], center = true);\n            }\n            translate([0, 0, 1.5]) cube([42, 7, 1], center = true); // hollow core\n        }\n    }\n    translate([5, -25, 5]) rotate([0, 0, 5]) wing();\n    translate([5,  25, 5]) rotate([0, 0, -5]) mirror([0, 1, 0]) wing();\n\n    // Engine nacelles\n    module engine() {\n        difference() {\n            cylinder(h = 20, r1 = 6, r2 = 4);\n            translate([0, 0, 1]) cylinder(h = 18, r1 = 3.5, r2 = 2.5);\n        }\n        // Intake fan disk\n        for(a=[0:45:315]) rotate([0,0,a]) translate([0,4.5,0]) cube([1,1,2]);\n    }\n    translate([-30, -20, 5]) rotate([0, 0, 0]) engine();\n    translate([-30,  20, 5]) rotate([0, 0, 0]) engine();\n\n    // Landing gear block\n    module gear() {\n        cube([6, 4, 8], center = true);\n    }\n    translate([-40, -18, -15]) gear();\n    translate([-40,  18, -15]) gear();\n    translate([ 45,   0, -15]) gear();\n\n    // Cockpit windshield\n    translate([40, 0, 12]) rotate([0, 90, 0]) cylinder(h = 14, r1 = 9, r2 = 9);\n}\n\nmain();",
    "renders": true
  },
  {
    "toy": "launch",
    "openscad_code": "// Toy Launch (Space Rocket)\n// Overall height: 110 mm\n// Wall thickness: 2 mm throughout\n\n$fn = 30;  // Smooth curves\n\nmodule fin() {\n    difference() {\n        union() {\n            // Main fin\n            cube([20, 2, 35]);\n            // Fin root fillet\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h=20, r1=5, r2=2);\n        }\n        // Lightening hole\n        translate([10, -1, 15])\n            rotate([0, 90, 0])\n            cylinder(h=4, r=4);\n    }\n}\n\nmodule nozzle() {\n    difference() {\n        // Nozzle bell\n        cylinder(h=15, r1=20, r2=15);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=15, r1=18, r2=13);\n    }\n}\n\nmodule fairing() {\n    difference() {\n        union() {\n            // Nose cone\n            cylinder(h=25, r1=15, r2=15);\n            // Tangent ogive\n            translate([0, 0, 25])\n                sphere(d=30);\n        }\n        // Hollow cavity\n        translate([0, 0, 5])\n            cylinder(h=40, r=13);\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // Main body tube\n            cylinder(h=60, r=15);\n            // Engine mount ring\n            translate([0, 0, -5])\n                cylinder(h=10, r1=18, r2=15);\n        }\n        // Hollow interior\n        translate([0, 0, 5])\n            cylinder(h=50, r=13);\n    }\n}\n\nmodule window() {\n    difference() {\n        // Window frame\n        cylinder(h=4, r=5);\n        // Window glass\n        translate([0, 0, 1])\n            cylinder(h=2, r=4);\n    }\n}\n\nmodule launch_lug() {\n    difference() {\n        // Launch lug tube\n        rotate([90, 0, 0])\n            cylinder(h=15, r=4);\n        // Inner hole\n        rotate([90, 0, 0])\n            cylinder(h=16, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main rocket\n    fairing();\n    translate([0, 0, 25])\n        body();\n    translate([0, 0, -15])\n        nozzle();\n    \n    // Four fins\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([0, 15, 15])\n                fin();\n    }\n    \n    // Windows (3)\n    for (z = [35, 45, 55]) {\n        rotate([0, 90, 0])\n            translate([0, 0, z])\n                window();\n    }\n    \n    // Launch lugs (2)\n    rotate([0, 0, 45])\n        translate([0, 15, 40])\n            launch_lug();\n    rotate([0, 0, 225])\n        translate([0, 15, 40])\n            launch_lug();\n}",
    "renders": true
  },
  {
    "toy": "dumptruck",
    "openscad_code": "// Realistic Medium-Complexity Dumptruck Toy\n// Overall length ~120 mm\n\n$fn = 32;\n\n// Parameters ----------------------------------------------------------\ntruck_w = 60;           // truck width\ntruck_l = 120;          // overall length\ntruck_h = 50;           // overall height\nch_h  = 25;             // chassis height\ncab_l = 30;             // cab length\ncab_w = 55;             // cab width\nbed_l = 70;             // dump bed length\nbed_w = 50;             // dump bed width\nbed_h = 20;             // dump bed height\nwall_t = 2;             // wall thickness\naxle_d = 6;             // axle diameter\nwheel_d = 18;           // wheel diameter\nwheel_w = 8;            // wheel width\n\n// Main model ----------------------------------------------------------\nunion() {\n    // Chassis ---------------------------------------------------------\n    translate([0,0,ch_h/2])\n        cube([truck_l, truck_w, ch_h], center=true);\n\n    // Cab -------------------------------------------------------------\n    translate([(truck_l-cab_l)/2, 0, ch_h+cab_w/2])\n        rotate([90,0,0])\n            cylinder(h=cab_l, d=cab_w, center=true);\n\n    // Cab roof\n    translate([(truck_l-cab_l)/2, 0, ch_h+cab_w+wall_t])\n        cube([cab_l, cab_w, wall_t], center=true);\n\n    // Cab front window\n    difference() {\n        translate([(truck_l-cab_l)/2, 0, ch_h+cab_w/2])\n            rotate([90,0,0])\n                cylinder(h=cab_l, d=cab_w, center=true);\n        translate([(truck_l-cab_l)/2, 0, ch_h+cab_w/2+wall_t])\n            rotate([90,0,0])\n                cylinder(h=cab_l+2, d=cab_w-wall_t*2, center=true);\n    }\n\n    // Dump Bed --------------------------------------------------------\n    union() {\n        // bed floor\n        translate([-(truck_l-bed_l)/2, 0, ch_h+bed_h/2])\n            cube([bed_l, bed_w, wall_t], center=true);\n        // bed front wall\n        translate([-(truck_l-bed_l)/2, 0, ch_h+bed_h/2+wall_t/2])\n            cube([wall_t, bed_w, bed_h], center=true);\n        // bed side walls\n        for (sx=[-(bed_l-wall_t)/2, (bed_l-wall_t)/2]) {\n            translate([sx, 0, ch_h+bed_h/2+wall_t/2])\n                cube([wall_t, bed_w, bed_h], center=true);\n        }\n        // bed back wall with hinge cutout\n        difference() {\n            translate([-(truck_l-bed_l)/2 + bed_l - wall_t/2, 0, ch_h+bed_h/2+wall_t/2])\n                cube([wall_t, bed_w, bed_h], center=true);\n            translate([-(truck_l-bed_l)/2 + bed_l, 0, ch_h+bed_h/2])\n                cube([wall_t*3, bed_w*0.8, wall_t*4], center=true);\n        }\n    }\n\n    // Axles -----------------------------------------------------------\n    for (x=[-truck_l/2+20, truck_l/2-20]) {\n        translate([x, 0, wheel_d/2])\n            rotate([90,0,0])\n                cylinder(h=truck_w+wheel_t, d=axle_d, center=true);\n    }\n\n    // Wheels ----------------------------------------------------------\n    for (x=[-truck_l/2+20, truck_l/2-20])\n        for (y=[-truck_w/2-wheel_w/2-axle_d/2, truck_w/2+wheel_w/2+axle_d/2]) {\n            translate([x, y, wheel_d/2])\n                cylinder(h=wheel_w, d=wheel_d, center=true);\n            // hubcap\n            translate([x, y, wheel_d/2])\n                cylinder(h=wheel_w+1, d=wheel_d/2, center=true);\n        }\n\n    // Headlights ------------------------------------------------------\n    for (sx=[cab_l/2-5, -cab_l/2+5])\n        translate([(truck_l-cab_l)/2+sx, cab_w/2-3, ch_h+cab_w/2])\n            sphere(d=4);\n\n    // Exhaust ---------------------------------------------------------\n    translate([-(truck_l-cab_l)/2, cab_w/2-5, ch_h+cab_w+wall_t])\n        cylinder(h=15, d=4);\n}",
    "renders": true
  },
  {
    "toy": "turboprop",
    "openscad_code": "// Turboprop Toy Airplane\n// Medium complexity realistic toy style\n// Designed for 3D printing - 120mm wingspan\n\n$fn = 32;\n\n// Main dimensions\nfuselage_length = 100;\nfuselage_diameter = 15;\nwing_span = 120;\nwing_chord = 25;\ntail_span = 40;\nprop_diameter = 35;\nwheel_diameter = 12;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Fuselage\nmodule fuselage() {\n    // Main body\n    union() {\n        // Central tube\n        difference() {\n            cylinder(h = fuselage_length, d = fuselage_diameter);\n            translate([0, 0, -1])\n                cylinder(h = fuselage_length + 2, d = fuselage_diameter - wall*2);\n        }\n        \n        // Nose cone\n        translate([0, 0, fuselage_length])\n            difference() {\n                cylinder(h = 20, d1 = fuselage_diameter, d2 = 5);\n                translate([0, 0, -1])\n                    cylinder(h = 22, d1 = fuselage_diameter - wall*2, d2 = 3);\n            }\n            \n        // Tail cone\n        translate([0, 0, -5])\n            difference() {\n                cylinder(h = 15, d1 = 5, d2 = fuselage_diameter);\n                translate([0, 0, -1])\n                    cylinder(h = 17, d1 = 3, d2 = fuselage_diameter - wall*2);\n            }\n    }\n}\n\n// Wings\nmodule wings() {\n    // Main wing\n    translate([0, 0, -5])\n        difference() {\n            // Wing shape\n            union() {\n                // Left wing\n                translate([-wing_span/2, 0, 0])\n                    cube([wing_span/2, wing_chord, wall*2], center = true);\n                // Right wing\n                translate([wing_span/2, 0, 0])\n                    cube([wing_span/2, wing_chord, wall*2], center = true);\n                // Center section\n                cube([wing_span, wing_chord/2, wall*2], center = true);\n            }\n            // Cutout for fuselage\n            translate([0, 0, -wall*2])\n                cylinder(h = wall*4, d = fuselage_diameter + 1);\n        }\n    \n    // Horizontal stabilizer\n    translate([0, 0, -35])\n        difference() {\n            union() {\n                // Left stab\n                translate([-tail_span/2, -5, 0])\n                    cube([tail_span/2, 15, wall*2], center = true);\n                // Right stab\n                translate([tail_span/2, -5, 0])\n                    cube([tail_span/2, 15, wall*2], center = true);\n                // Center\n                cube([tail_span, 10, wall*2], center = true);\n            }\n            // Fuselage cutout\n            translate([0, 0, -wall*2])\n                cylinder(h = wall*4, d = fuselage_diameter + 1);\n        }\n    \n    // Vertical stabilizer\n    translate([0, -7, -35])\n        difference() {\n            union() {\n                cube([wall*2, 10, 20], center = true);\n                translate([0, 0, 15])\n                    cube([wall*2, 8, 10], center = true);\n            }\n            // Fuselage cutout\n            translate([0, 0, -wall*2])\n                cylinder(h = wall*4, d = fuselage_diameter + 1);\n        }\n}\n\n// Propeller assembly\nmodule propeller() {\n    // Hub\n    translate([0, 0, fuselage_length + 20])\n        difference() {\n            cylinder(h = 8, d = 10);\n            translate([0, 0, -1])\n                cylinder(h = 10, d = 6);\n        }\n    \n    // Blades\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([0, prop_diameter/2 - 8, fuselage_length + 24])\n                difference() {\n                    union() {\n                        cube([8, prop_diameter - 16, wall*2], center = true);\n                        translate([0, (prop_diameter - 16)/2, 0])\n                            cube([8, 5, wall*2], center = true);\n                    }\n                    // Taper\n                    translate([0, (prop_diameter - 16)/2, -wall*2])\n                        cube([8, 5, wall*4], center = true);\n                }\n    }\n    \n    // Spinner\n    translate([0, 0, fuselage_length + 24])\n        difference() {\n            sphere(d = 12);\n            sphere(d = 8);\n        }\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Nose wheel\n    translate([0, 0, -10])\n        union() {\n            // Strut\n            cube([4, 4, 15], center = true);\n            // Wheel\n            translate([0, 0, -12])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = wall*2, d = wheel_diameter);\n                        cylinder(h = wall*2 + 1, d = wheel_diameter - wall*2);\n                    }\n        }\n    \n    // Main wheels\n    for(side = [-1, 1]) {\n        translate([side * (wing_span/2 - 15), 0, -5])\n            union() {\n                // Strut\n                rotate([0, 30 * side, 0])\n                    cube([4, 4, 12], center = true);\n                // Wheel\n                translate([0, 0, -12])\n                    rotate([90, 0, 0])\n                        difference() {\n                            cylinder(h = wall*2, d = wheel_diameter);\n                            cylinder(h = wall*2 + 1, d = wheel_diameter - wall*2);\n                        }\n            }\n    }\n}\n\n// Cockpit\nmodule cockpit() {\n    translate([0, 0, fuselage_length - 10])\n        difference() {\n            // Windshield\n            union() {\n                cube([fuselage_diameter - 4, 8, 12], center = true);\n                translate([0, 0, 6])\n                    cube([fuselage_diameter - 6, 8, 6], center = true);\n            }\n            // Cut for pilot\n            translate([0, 0, 3])\n                cube([fuselage_diameter - 8, 12, 8], center = true);\n        }\n}\n\n// Assemble the turboprop\nunion() {\n    fuselage();\n    wings();\n    propeller();\n    landing_gear();\n    cockpit();\n}",
    "renders": true
  },
  {
    "toy": "rotorcraft",
    "openscad_code": "// Realistic toy rotorcraft (medium complexity)\n// Total length ~120mm, width ~100mm, height ~50mm\n\n// Parameters for easy scaling\nscale_factor = 1;\nbody_length = 80 * scale_factor;\nbody_width = 30 * scale_factor;\nbody_height = 20 * scale_factor;\nrotor_diameter = 100 * scale_factor;\ntail_length = 40 * scale_factor;\n\n// Main module\nmodule rotorcraft() {\n    union() {\n        // Main fuselage\n        hull();\n        \n        // Main rotor assembly\n        translate([0, 0, body_height/2 + 15])\n            main_rotor();\n        \n        // Tail boom\n        translate([body_length/2, 0, 0])\n            tail_boom();\n        \n        // Tail rotor\n        translate([body_length/2 + tail_length - 5, 0, 0])\n            tail_rotor();\n        \n        // Landing skids\n        translate([0, 0, -body_height/2 - 10])\n            landing_skids();\n        \n        // Cockpit details\n        translate([-body_length/4, 0, body_height/2])\n            cockpit();\n        \n        // Windows\n        windows();\n    }\n}\n\n// Main body hull\nmodule hull() {\n    difference() {\n        // Main body - slightly tapered\n        hull_shape();\n        \n        // Cockpit opening\n        translate([-body_length/3, 0, body_height/2])\n            rotate([0, 0, 0])\n                cube([body_length/2, body_width * 0.8, body_height * 0.8], center=true);\n    }\n}\n\nmodule hull_shape() {\n    hull() {\n        // Front cone\n        translate([-body_length/2, 0, 0])\n            sphere(d=body_width * 0.8);\n        \n        // Main body\n        translate([0, 0, 0])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Tail connection\n        translate([body_length/2, 0, 0])\n            sphere(d=body_width * 0.6);\n    }\n}\n\n// Main rotor assembly\nmodule main_rotor() {\n    union() {\n        // Rotor mast\n        cylinder(h=15, d=8, center=false);\n        \n        // Rotor hub\n        translate([0, 0, 15])\n            sphere(d=12);\n        \n        // Rotor blades (4 blades)\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([0, rotor_diameter/2 - 10, 15])\n                    rotor_blade();\n        }\n    }\n}\n\nmodule rotor_blade() {\n    // Simple rectangular blade with thickness for printing\n    cube([8, rotor_diameter/2, 2], center=true);\n}\n\n// Tail boom\nmodule tail_boom() {\n    difference() {\n        // Main boom\n        translate([tail_length/2, 0, 0])\n            rotate([0, 0, 0])\n                cube([tail_length, 15, 15], center=true);\n        \n        // Lighten the boom\n        translate([tail_length/2, 0, 0])\n            cube([tail_length - 4, 11, 11], center=true);\n    }\n}\n\n// Tail rotor\nmodule tail_rotor() {\n    rotate([90, 0, 0]) {\n        // Tail rotor mast\n        cylinder(h=8, d=6, center=false);\n        \n        // Tail rotor blades (2 blades)\n        for(i = [0:90:90]) {\n            rotate([i, 0, 0])\n                translate([0, 0, 8])\n                    cube([20, 2, 4], center=true);\n        }\n    }\n}\n\n// Landing skids\nmodule landing_skids() {\n    // Left skid\n    translate([-10, -body_width/2 - 5, 0])\n        skid();\n    \n    // Right skid\n    translate([-10, body_width/2 + 5, 0])\n        skid();\n    \n    // Cross braces\n    for(x = [-20, 0, 20]) {\n        translate([x, 0, 4])\n            cube([body_width + 15, 3, 3], center=true);\n    }\n}\n\nmodule skid() {\n    // Curved skid shape\n    difference() {\n        union() {\n            // Main tube\n            translate([0, 0, 4])\n                rotate([90, 0, 0])\n                    cylinder(h=60, d=6, center=true);\n            \n            // Support struts\n            translate([-20, 0, 2])\n                cube([4, 4, 8], center=true);\n            translate([20, 0, 2])\n                cube([4, 4, 8], center=true);\n        }\n        \n        // Hollow tube\n        translate([0, 0, 4])\n            rotate([90, 0, 0])\n                cylinder(h=65, d=4, center=true);\n    }\n}\n\n// Cockpit details\nmodule cockpit() {\n    // Dashboard\n    translate([5, 0, -2])\n        cube([15, body_width * 0.7, 4], center=true);\n    \n    // Seats\n    for(y = [-8, 8]) {\n        translate([0, y, -body_height/2])\n            cube([12, 8, 8], center=true);\n    }\n}\n\n// Windows\nmodule windows() {\n    // Windshield\n    translate([-body_length/3, 0, body_height/2 + 2])\n        rotate([0, -20, 0])\n            cube([15, body_width * 0.7, 8], center=true);\n    \n    // Side windows\n    for(x = [0, body_length/6]) {\n        for(side = [-1, 1]) {\n            translate([x, side * body_width/2, 0])\n                cube([10, 2, 6], center=true);\n        }\n    }\n}\n\n// Generate the model\nrotorcraft();",
    "renders": true
  },
  {
    "toy": "boxcar",
    "openscad_code": "// Toy Boxcar - Realistic Style, Medium Complexity\n// Overall length: 120mm, width: 55mm, height: 70mm\n\n// Parameters\n$fn = 32;\nwall = 2;\n\n// Main body\nmodule boxcar_body() {\n    // Main box\n    difference() {\n        cube([100, 50, 45], center=true);\n        // Hollow interior\n        translate([0, 0, -1])\n            cube([96, 46, 43], center=true);\n    }\n}\n\n// Roof\nmodule roof() {\n    translate([0, 0, 23.5]) {\n        difference() {\n            // Main roof\n            rotate([0, 90, 0])\n                cylinder(h=100, r1=28, r2=28, center=true);\n            // Hollow underside\n            rotate([0, 90, 0])\n                cylinder(h=102, r1=26, r2=26, center=true);\n        }\n    }\n}\n\n// Doors\nmodule doors() {\n    // Left door\n    translate([-30, -27, 0]) {\n        difference() {\n            cube([20, 4, 35]);\n            // Door handle\n            translate([10, -1, 15])\n                cylinder(h=3, r=2);\n        }\n    }\n    \n    // Right door\n    translate([30, -27, 0]) {\n        difference() {\n            cube([20, 4, 35]);\n            // Door handle\n            translate([10, -1, 15])\n                cylinder(h=3, r=2);\n        }\n    }\n}\n\n// Underframe\nmodule underframe() {\n    // Main frame\n    translate([0, 0, -25])\n        cube([110, 55, 6], center=true);\n    \n    // Bolsters\n    for(x = [-35, 35]) {\n        translate([x, 0, -22])\n            cube([12, 55, 4], center=true);\n    }\n}\n\n// Wheels and trucks\nmodule truck_assembly() {\n    // Front truck\n    translate([-35, 0, -31]) {\n        // Truck frame\n        difference() {\n            cube([25, 50, 8], center=true);\n            // Cutouts\n            cube([21, 46, 12], center=true);\n        }\n        \n        // Wheels\n        for(y = [-15, 15]) {\n            translate([0, y, -8])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=12);\n        }\n    }\n    \n    // Rear truck\n    translate([35, 0, -31]) {\n        // Truck frame\n        difference() {\n            cube([25, 50, 8], center=true);\n            cube([21, 46, 12], center=true);\n        }\n        \n        // Wheels\n        for(y = [-15, 15]) {\n            translate([0, y, -8])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r=12);\n        }\n    }\n}\n\n// Couplers\nmodule couplers() {\n    // Front coupler\n    translate([-55, 0, -18]) {\n        // Shank\n        cube([12, 8, 6], center=true);\n        // Coupler head\n        translate([-7, 0, 0])\n            sphere(r=6);\n    }\n    \n    // Rear coupler\n    translate([55, 0, -18]) {\n        // Shank\n        cube([12, 8, 6], center=true);\n        // Coupler head\n        translate([7, 0, 0])\n            sphere(r=6);\n    }\n}\n\n// Ladders\nmodule ladders() {\n    // Front left ladder\n    translate([-45, -27, 0]) {\n        difference() {\n            cube([4, 4, 35]);\n            // Rungs\n            for(h = [5:5:30]) {\n                translate([2, 2, h])\n                    cube([0, 4, 2]);\n            }\n        }\n    }\n    \n    // Front right ladder\n    translate([-45, 23, 0]) {\n        difference() {\n            cube([4, 4, 35]);\n            for(h = [5:5:30]) {\n                translate([2, -2, h])\n                    cube([0, 4, 2]);\n            }\n        }\n    }\n    \n    // Rear left ladder\n    translate([45, -27, 0]) {\n        difference() {\n            cube([4, 4, 35]);\n            for(h = [5:5:30]) {\n                translate([-2, 2, h])\n                    cube([0, 4, 2]);\n            }\n        }\n    }\n    \n    // Rear right ladder\n    translate([45, 23, 0]) {\n        difference() {\n            cube([4, 4, 35]);\n            for(h = [5:5:30]) {\n                translate([-2, -2, h])\n                    cube([0, 4, 2]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    boxcar_body();\n    roof();\n    doors();\n    underframe();\n    truck_assembly();\n    couplers();\n    ladders();\n}",
    "renders": true
  },
  {
    "toy": "cruiserjet",
    "openscad_code": "// Cruiserjet Toy - Realistic Medium Complexity\n// Dimensions: ~110mm long, 75mm wide, 40mm tall\n\n$fn = 32;\n\nmodule cruiserjet_body() {\n    // Main fuselage\n    difference() {\n        // Central body\n        union() {\n            hull() {\n                translate([-45,0,-5]) cube([90,25,15], center=true);\n                translate([-25,0,0]) cube([50,22,12], center=true);\n                translate([25,0,0]) cube([30,20,10], center=true);\n            }\n            // Nose cone\n            translate([45,0,0]) rotate([0,90,0]) cylinder(h=15, r1=10, r2=0);\n        }\n        \n        // Cockpit cutout\n        translate([-10,0,5]) cube([40,18,8], center=true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-30,-20,0]) rotate([0,0,-20]) {\n        difference() {\n            cube([35,8,3], center=true);\n            translate([-15,0,1.5]) cube([5,6,3.5], center=true);\n        }\n    }\n    \n    // Right wing\n    translate([-30,20,0]) rotate([0,0,20]) {\n        difference() {\n            cube([35,8,3], center=true);\n            translate([-15,0,1.5]) cube([5,6,3.5], center=true);\n        }\n    }\n}\n\nmodule tail_section() {\n    // Vertical stabilizer\n    translate([-40,0,8]) rotate([0,-10,0]) {\n        difference() {\n            cube([15,2,12], center=true);\n            translate([0,0,6]) cube([8,1.5,6], center=true);\n        }\n    }\n    \n    // Horizontal stabilizers\n    for(side = [-1, 1]) {\n        translate([-40,side*12,2]) rotate([0,0,side*30]) {\n            cube([15,6,2], center=true);\n        }\n    }\n}\n\nmodule engines() {\n    // Left engine pod\n    translate([-15,-18,-8]) {\n        cylinder(h=20, r=6);\n        translate([0,0,-10]) cylinder(h=5, r=8);\n    }\n    \n    // Right engine pod\n    translate([-15,18,-8]) {\n        cylinder(h=20, r=6);\n        translate([0,0,-10]) cylinder(h=5, r=8);\n    }\n}\n\nmodule cockpit_detail() {\n    // Windshield\n    translate([5,0,8]) rotate([30,0,0]) {\n        difference() {\n            cube([30,16,0.5], center=true);\n            translate([0,0,-0.3]) cube([28,14,0.5], center=true);\n        }\n    }\n    \n    // Canopy frame\n    for(i = [-1, 1]) {\n        translate([5,i*8,7.5]) rotate([30,0,0]) {\n            cube([30,0.5,1.5], center=true);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Front wheel\n    translate([20,0,-12]) rotate([90,0,0]) {\n        cylinder(h=8, r=3);\n        translate([0,0,-2]) sphere(r=4);\n    }\n    \n    // Rear wheels\n    for(side = [-1, 1]) {\n        translate([-25,side*15,-12]) rotate([90,0,0]) {\n            cylinder(h=8, r=3);\n            translate([0,0,-2]) sphere(r=4);\n        }\n    }\n}\n\nmodule toy_details() {\n    // Panel lines\n    for(i = [0:15:45]) {\n        translate([i-30,0,7.5]) cube([1,22,0.5], center=true);\n    }\n    \n    // Toy rivets\n    for(x = [-40:10:40]) {\n        for(y = [-10:10:10]) {\n            if(x != 0 || y != 0) {\n                translate([x,y,7.5]) sphere(r=0.5);\n            }\n        }\n    }\n}\n\n// Assemble the cruiserjet\nunion() {\n    cruiserjet_body();\n    wings();\n    tail_section();\n    engines();\n    cockpit_detail();\n    landing_gear();\n    toy_details();\n}",
    "renders": true
  },
  {
    "toy": "haulzilla",
    "openscad_code": "// Haulzilla Toy Truck - Realistic Medium Complexity\n// Overall dimensions: ~120mm L x 45mm W x 50mm H\n\n$fn = 32;\n\n// Main module\nmodule haulzilla_truck() {\n    // Truck base frame\n    color(\"darkgreen\")\n    translate([0, 0, 10])\n    cube([100, 40, 8], center = true);\n    \n    // Cab section\n    color(\"lightgreen\")\n    translate([-30, 0, 22])\n    cube([30, 35, 25], center = true);\n    \n    // Cab roof\n    color(\"darkgreen\")\n    translate([-30, 0, 36])\n    cube([28, 32, 8], center = true);\n    \n    // Windshield\n    color(\"lightblue\")\n    difference() {\n        translate([-14, 0, 25])\n        cube([2, 28, 18], center = true);\n        translate([-13.5, 0, 25])\n        cube([3, 26, 16], center = true);\n    }\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        color(\"lightblue\")\n        translate([-30, side * 15, 25])\n        cube([20, 2, 15], center = true);\n    }\n    \n    // Headlights\n    for(side = [-1, 1]) {\n        color(\"yellow\")\n        translate([-45, side * 12, 18])\n        sphere(3);\n    }\n    \n    // Bed section\n    color(\"lightgreen\")\n    translate([20, 0, 18])\n    cube([50, 35, 8], center = true);\n    \n    // Bed walls\n    for(side = [-1, 1]) {\n        color(\"darkgreen\")\n        translate([20, side * 17.5, 26])\n        cube([50, 2, 16], center = true);\n    }\n    \n    // Bed back wall\n    color(\"darkgreen\")\n    translate([45, 0, 26])\n    cube([2, 35, 16], center = true);\n    \n    // Wheels\n    for(x = [-30, 30])\n    for(y = [-1, 1]) {\n        // Tires\n        color(\"black\")\n        translate([x, y * 22, 10])\n        cylinder(h = 10, r = 12, center = true);\n        \n        // Rims\n        color(\"silver\")\n        translate([x, y * 22, 10])\n        cylinder(h = 8, r = 8, center = true);\n        \n        // Rim details\n        color(\"darkgray\")\n        for(i = [0:45:315]) {\n            rotate([0, 90, i])\n            translate([x, y * 22, 10])\n            cube([2, 2, 6], center = true);\n        }\n    }\n    \n    // Exhaust pipe\n    color(\"gray\")\n    translate([-40, 20, 25])\n    rotate([90, 0, 0])\n    cylinder(h = 15, r = 2);\n    \n    // Grille\n    color(\"silver\")\n    translate([-44, 0, 18])\n    cube([2, 25, 8], center = true);\n    \n    // Grille details\n    for(i = [-10:5:10]) {\n        color(\"darkgreen\")\n        translate([-43.5, i, 18])\n        cube([1, 1, 7], center = true);\n    }\n    \n    // Side mirrors\n    for(side = [-1, 1]) {\n        color(\"silver\")\n        translate([-25, side * 18, 30])\n        cube([5, 2, 2], center = true);\n        translate([-22.5, side * 22, 30])\n        sphere(2);\n    }\n    \n    // Tail lights\n    for(side = [-1, 1]) {\n        color(\"red\")\n        translate([45, side * 12, 18])\n        cube([3, 5, 5], center = true);\n    }\n    \n    // Door handles\n    for(side = [-1, 1]) {\n        color(\"silver\")\n        translate([-30, side * 15, 22])\n        cube([8, 1, 1], center = true);\n    }\n}\n\n// Render the complete model\nhaulzilla_truck();",
    "renders": true
  },
  {
    "toy": "cloudrider",
    "openscad_code": "// Cloudrider toy armchair – realistic medium-complexity\n// Overall size ~120 mm long, 60 mm wide, 70 mm high\n$fn = 32;\n\n// Wall / shell thickness\nt = 2;\n\nmodule seat() {\n    // Main seat block\n    difference() {\n        translate([0, 0, 20])\n            cube([60, 50, 8], center = true);\n        // Lightening pocket underneath – keeps print weight down\n        translate([0, 0, 20 - 4])\n            cube([56, 46, 4], center = true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest shell\n    difference() {\n        translate([0, 22.5, 42])\n            scale([1, 1.2, 1])\n                sphere(d = 50);\n        // Hollow inside\n        translate([0, 22.5, 42])\n            scale([1, 1.2, 1])\n                sphere(d = 50 - 2 * t);\n        // Flat rear cut\n        translate([0, 40, 42])\n            cube([70, 40, 70], center = true);\n    }\n}\n\nmodule armrest(side = 1) {   // side = 1 right, -1 left\n    // Curved arm following cloud shape\n    difference() {\n        translate([side * 33, 0, 35])\n            rotate([0, 90, 0])\n                cylinder(h = 35, d = 20);\n        // Hollow bore\n        translate([side * 33, 0, 35])\n            rotate([0, 90, 0])\n                cylinder(h = 35, d = 20 - 2 * t);\n    }\n    // Cloud puff on top\n    translate([side * 33, 0, 50])\n        sphere(d = 15);\n}\n\nmodule leg(x, y) {\n    // Simple cylindrical leg with rounded foot\n    translate([x, y, 10])\n        union() {\n            cylinder(h = 20, d = 6);\n            translate([0, 0, -2])\n                sphere(d = 8);\n        }\n}\n\nmodule face() {\n    // Smiling cloud face on backrest\n    // Eyes\n    for (dx = [-10, 10])\n        translate([dx, 22.5, 55])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 6);\n    // Mouth\n    translate([0, 22.5, 50])\n        rotate([90, 0, 0])\n            cylinder(h = 3, d = 20, $fn = 32);\n    translate([0, 22.5, 55])\n        rotate([90, 0, 0])\n            cylinder(h = 4, d = 10, $fn = 32);\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    armrest(1);\n    armrest(-1);\n    // Legs – placed under seat corners\n    leg(25, 20);\n    leg(25, -20);\n    leg(-25, 20);\n    leg(-25, -20);\n    face();\n}",
    "renders": true
  },
  {
    "toy": "gyroflyer",
    "openscad_code": "// Gyroflyer toy (pull-string flying top)\n// 100 mm overall height, 3D-printable with 2 mm walls\n\n// Main parameters\n$fn = 36;\nwall = 2;\nheight = 100;\nhub_r = 15;\nblade_len = 35;\nblade_w = 18;\nblade_t = 3;\n\nmodule gyroflyer() {\n    // Central hub\n    difference() {\n        cylinder(h = 25, r = hub_r, center = true);\n        // Hollow shaft\n        cylinder(h = 30, r = hub_r - wall, center = true);\n        // Top string slot\n        translate([0, 0, 10])\n            cube([blade_w, wall*2, 15], center = true);\n    }\n\n    // Three rotor blades\n    for(i=[0:120:240]) {\n        rotate([0, 0, i])\n            translate([0, blade_len/2 + hub_r, 0])\n                blade();\n    }\n\n    // Pull-string knob\n    translate([0, 0, 30])\n        cylinder(h = 20, r = 8);\n    \n    // Decorative stripes on blades\n    color(\"red\")\n    for(i=[0:120:240]) {\n        rotate([0, 0, i])\n            translate([0, blade_len/2 + hub_r, 0])\n                blade_stripes();\n    }\n}\n\n// Single rotor blade\nmodule blade() {\n    difference() {\n        // Main blade shape\n        scale([1, blade_len/20, 1])\n            cube([blade_w, 20, blade_t], center = true);\n        \n        // Lightening holes\n        for(pos=[0.3, 0.7]) {\n            translate([0, blade_len*(pos - 0.5), 0])\n                cylinder(h = blade_t + 1, r = 4, center = true);\n        }\n        \n        // Rounded tip\n        translate([0, blade_len/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = blade_w, r = blade_t/2, center = true);\n    }\n}\n\n// Red racing stripes\nmodule blade_stripes() {\n    translate([0, blade_len/2 + hub_r, blade_t/2 + 0.1])\n        cube([blade_w*0.3, blade_len, 0.5], center = true);\n    translate([0, blade_len/2 + hub_r, -blade_t/2 - 0.1])\n        cube([blade_w*0.3, blade_len, 0.5], center = true);\n}\n\n// Base stand for display\nmodule stand() {\n    difference() {\n        cylinder(h = 8, r = 25);\n        cylinder(h = 9, r = 20);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 4])\n    stand();\ntranslate([0, 0, 12])\n    gyroflyer();",
    "renders": true
  },
  {
    "toy": "railmaster",
    "openscad_code": "$fs = 0.5;\n$fa = 2;\n\nmodule railmaster() {\n    // Main body - 100mm long, 30mm wide, 25mm high\n    difference() {\n        cube([100, 30, 25]);\n        // Hollow interior\n        translate([2, 2, 2])\n            cube([96, 26, 21]);\n    }\n    \n    // Front control panel\n    translate([5, 32, 15])\n        difference() {\n            cube([20, 5, 10]);\n            translate([2, -1, 3])\n                cylinder(h=7, r=1.5);\n            translate([10, -1, 3])\n                cylinder(h=7, r=1.5);\n            translate([18, -1, 3])\n                cylinder(h=7, r=1.5);\n        }\n    \n    // Rear control panel\n    translate([75, 32, 15])\n        difference() {\n            cube([20, 5, 10]);\n            translate([2, -1, 3])\n                cylinder(h=7, r=1.5);\n            translate([10, -1, 3])\n                cylinder(h=7, r=1.5);\n            translate([18, -1, 3])\n                cylinder(h=7, r=1.5);\n        }\n    \n    // Top antenna array\n    for(x=[15:15:85]) {\n        translate([x, 15, 27])\n            cylinder(h=8, r=2);\n    }\n    \n    // Side rails\n    for(x=[10:10:90]) {\n        translate([x, -2, 12])\n            cube([2, 4, 2]);\n        translate([x, 28, 12])\n            cube([2, 4, 2]);\n    }\n    \n    // Wheels\n    wheel_positions = [10, 30, 50, 70, 90];\n    for(x=wheel_positions) {\n        translate([x, 15, -3])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=6, r=6);\n                    cylinder(h=7, r=3);\n                }\n    }\n    \n    // Headlight\n    translate([5, 15, 20])\n        difference() {\n            sphere(r=4);\n            sphere(r=2);\n        }\n    \n    // Taillight\n    translate([95, 15, 20])\n        difference() {\n            sphere(r=4);\n            sphere(r=2);\n        }\n    \n    // Roof vents\n    for(x=[25:20:75]) {\n        translate([x, 10, 25])\n            difference() {\n                cube([8, 10, 3]);\n                translate([1, 1, -1])\n                    cube([6, 8, 5]);\n            }\n    }\n    \n    // Side details\n    for(x=[20:15:80]) {\n        translate([x, 0, 10])\n            difference() {\n                cube([5, 2, 5]);\n                translate([0.5, -0.5, 0.5])\n                    cube([4, 1, 4]);\n            }\n        translate([x, 28, 10])\n            difference() {\n                cube([5, 2, 5]);\n                translate([0.5, 0.5, 0.5])\n                    cube([4, 1, 4]);\n            }\n    }\n    \n    // Coupling hooks\n    translate([0, 10, 10])\n        difference() {\n            cube([6, 10, 5]);\n            translate([3, 5, 2.5])\n                sphere(r=2);\n        }\n    \n    translate([94, 10, 10])\n        difference() {\n            cube([6, 10, 5]);\n            translate([3, 5, 2.5])\n                sphere(r=2);\n        }\n}\n\nrailmaster();",
    "renders": true
  },
  {
    "toy": "skimmer",
    "openscad_code": "// Skimmer Toy (realistic style, medium complexity)\n// Overall dimensions: ~120mm x 80mm x 35mm, wall thickness 2mm\n\nmodule skimmer_body() {\n    // Main deck plate with rounded edges\n    difference() {\n        hull() {\n            translate([-55, -35, 0]) cylinder(h=4, r=4, $fn=16);\n            translate([55, -35, 0]) cylinder(h=4, r=4, $fn=16);\n            translate([55, 35, 0]) cylinder(h=4, r=4, $fn=16);\n            translate([-55, 35, 0]) cylinder(h=4, r=4, $fn=16);\n        }\n        // Hollow out underside\n        translate([0, 0, -1]) cube([108, 68, 6], center=true);\n    }\n}\n\nmodule handle_assembly() {\n    // Handle post\n    translate([0, -30, 4]) cylinder(h=25, r1=4, r2=3, $fn=16);\n    // Handle grip\n    rotate([90, 0, 0]) translate([0, -30, 29]) cylinder(h=60, r=3, $fn=16);\n    // Grip end caps\n    translate([-30, -30, 29]) sphere(r=3, $fn=16);\n    translate([30, -30, 29]) sphere(r=3, $fn=16);\n}\n\nmodule net_frame() {\n    // Frame rim\n    rotate([90, 0, 0]) translate([0, 30, 4]) cylinder(h=3, r=25, $fn=32);\n    // Frame net pattern (simulated with thin cylinders)\n    for (i = [0:15]) {\n        rotate([0, 0, i*22.5]) \n            translate([0, 30, 5.5]) \n            cube([0.8, 0.8, 22], center=true);\n    }\n    // Mesh support ring\n    rotate([90, 0, 0]) translate([0, 30, 4]) \n        cylinder(h=1, r=20, $fn=32);\n}\n\nmodule side_floats() {\n    // Left float\n    translate([-45, 0, 2]) {\n        difference() {\n            hull() {\n                sphere(r=12, $fn=16);\n                translate([0, 0, -10]) sphere(r=12, $fn=16);\n            }\n            // Hollow inside\n            translate([0, 0, -5]) sphere(r=10, $fn=16);\n        }\n    }\n    // Right float (mirrored)\n    translate([45, 0, 2]) {\n        difference() {\n            hull() {\n                sphere(r=12, $fn=16);\n                translate([0, 0, -10]) sphere(r=12, $fn=16);\n            }\n            translate([0, 0, -5]) sphere(r=10, $fn=16);\n        }\n    }\n}\n\nmodule support_braces() {\n    // Front brace\n    translate([0, -20, 2]) cube([80, 4, 6], center=true);\n    // Rear brace\n    translate([0, 20, 2]) cube([80, 4, 6], center=true);\n    // Cross supports\n    for (x = [-30, 0, 30]) {\n        translate([x, 0, 2]) cube([3, 60, 4], center=true);\n    }\n}\n\nmodule decorative_details() {\n    // Toy logo plate\n    translate([0, 0, 4.5]) cube([20, 10, 1], center=true);\n    // Grip texture rings\n    for (z = [15:5:25]) {\n        rotate([90, 0, 0]) translate([0, -30, z]) \n            cylinder(h=1, r=3.5, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    skimmer_body();\n    handle_assembly();\n    net_frame();\n    side_floats();\n    support_braces();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "toy": "torpedo",
    "openscad_code": "// Torpedo Toy - Realistic Style, Medium Complexity\n// Overall length 120mm, diameter 20mm, toy-scale proportions\n\nmodule prop_blade() {\n    // Single propeller blade with toy-safe rounded edges\n    difference() {\n        scale([1, 0.3, 0.1])\n            cylinder(h=8, d=12, $fn=20);\n        translate([0, 0, -0.5])\n            cube([15, 5, 2], center=true);\n    }\n}\n\nmodule propeller() {\n    // Four-blade propeller assembly\n    rotate([0, 90, 0])\n    translate([-6, 0, 0])\n    for(i=[0:90:270]) {\n        rotate([0, 0, i])\n            prop_blade();\n    }\n}\n\nmodule tail_fin() {\n    // Stabilizing fin with realistic toy proportions\n    difference() {\n        union() {\n            translate([-2, 0, 0])\n                cube([8, 1, 10], center=true);\n            translate([2, 0, 0])\n                scale([1, 0.7, 0.7])\n                    sphere(d=10, $fn=16);\n        }\n        translate([-4, 0, 0])\n            cube([10, 2, 8], center=true);\n    }\n}\n\nmodule body_section() {\n    // Main torpedo body with realistic toy contours\n    hull() {\n        // Nose cone\n        translate([50, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=25, d1=20, d2=16, $fn=32);\n        \n        // Main body\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=80, d=20, $fn=32);\n        \n        // Tail taper\n        translate([-45, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, d1=20, d2=12, $fn=32);\n    }\n}\n\nmodule guidance_ring() {\n    // Toy guidance system ring around nose\n    translate([35, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=4, d=24, $fn=32);\n        cylinder(h=5, d=18, $fn=32);\n    }\n}\n\nmodule window_detail() {\n    // Small porthole details for toy realism\n    translate([15, 0, 8])\n        rotate([90, 0, 0])\n            cylinder(h=2, d=4, $fn=16);\n}\n\nmodule torpedo_toy() {\n    // Main assembly\n    union() {\n        // Core body\n        body_section();\n        \n        // Guidance ring\n        guidance_ring();\n        \n        // Four tail fins\n        for(i=[0:90:270]) {\n            rotate([0, 0, i])\n                translate([-52, 0, 0])\n                    tail_fin();\n        }\n        \n        // Propeller at rear\n        translate([-60, 0, 0])\n            propeller();\n        \n        // Two window details\n        window_detail();\n        translate([0, 0, -16])\n            window_detail();\n    }\n}\n\n// Render the complete toy\ntorpedo_toy();",
    "renders": true
  },
  {
    "toy": "trumpet",
    "openscad_code": "// Toy Trumpet - Realistic Style\n// Medium complexity with 3D-printable features\n\n// Overall dimensions: ~120mm length\n\n// Constants\n$fn = 32;\nwall = 2;\n\nmodule trumpet() {\n    union() {\n        // Bell flare\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                bell();\n        \n        // Main tubing\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                main_tube();\n        \n        // Valves section\n        translate([65, 0, 0])\n            rotate([0, 0, 0])\n                valves();\n        \n        // Mouthpiece\n        translate([-55, 0, 0])\n            rotate([0, 90, 0])\n                mouthpiece();\n        \n        // Valve tubing\n        valve_tubing();\n    }\n}\n\nmodule bell() {\n    difference() {\n        // Main bell shape\n        union() {\n            // Bell flare\n            cylinder(h1 = 0, h2 = 25, r1 = 12, r2 = 25);\n            \n            // Bell neck\n            cylinder(h = 15, r = 12);\n            \n            // Bell brace\n            translate([0, -15, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, r = 2);\n        }\n        \n        // Hollow bell\n        translate([0, 0, 5])\n            cylinder(h1 = 0, h2 = 35, r1 = 10, r2 = 23);\n    }\n}\n\nmodule main_tube() {\n    difference() {\n        union() {\n            // First straight section\n            cylinder(h = 35, r = 5);\n            \n            // First bend\n            translate([35, 0, 0])\n                rotate([0, 0, 90])\n                    cylinder(h = 15, r = 5);\n            \n            // Second bend\n            translate([35, 15, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, r = 5);\n        }\n        \n        // Hollow tube\n        cylinder(h = 35, r = 3);\n        translate([35, 0, 0])\n            rotate([0, 0, 90])\n                cylinder(h = 15, r = 3);\n        translate([35, 15, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 20, r = 3);\n    }\n}\n\nmodule valves() {\n    // Valve casings\n    for(i = [0:2]) {\n        translate([0, i * 12 - 12, 0])\n            difference() {\n                cylinder(h = 25, r = 8);\n                cylinder(h = 25, r = 6);\n            }\n    }\n    \n    // Valve buttons\n    for(i = [0:2]) {\n        translate([0, i * 12 - 12, 25])\n            cylinder(h = 8, r = 6);\n    }\n    \n    // Valve caps\n    for(i = [0:2]) {\n        translate([0, i * 12 - 12, 0])\n            cylinder(h = 2, r = 9);\n    }\n}\n\nmodule mouthpiece() {\n    difference() {\n        union() {\n            // Mouthpiece cup\n            cylinder(h = 8, r = 8);\n            \n            // Mouthpiece shank\n            translate([0, 8, 0])\n                cylinder(h = 12, r = 5);\n        }\n        \n        // Hollow mouthpiece\n        cylinder(h = 8, r = 6);\n        translate([0, 8, 0])\n            cylinder(h = 12, r = 3);\n    }\n}\n\nmodule valve_tubing() {\n    // Tubing between valves\n    translate([65, -12, 12.5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 24, r = 4);\n                cylinder(h = 24, r = 2);\n            }\n    \n    // First valve loop\n    translate([65, -12, 12.5])\n        rotate([0, 90, 0])\n            difference() {\n                union() {\n                    cylinder(h = 15, r = 4);\n                    translate([0, 15, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h = 20, r = 4);\n                    translate([0, 15, 20])\n                        rotate([0, 0, 90])\n                            cylinder(h = 15, r = 4);\n                }\n                union() {\n                    cylinder(h = 15, r = 2);\n                    translate([0, 15, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h = 20, r = 2);\n                    translate([0, 15, 20])\n                        rotate([0, 0, 90])\n                            cylinder(h = 15, r = 2);\n                }\n            }\n    \n    // Third valve loop\n    translate([65, 12, 12.5])\n        rotate([0, 90, 0])\n            difference() {\n                union() {\n                    cylinder(h = 15, r = 4);\n                    translate([0, 15, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h = 25, r = 4);\n                    translate([0, 15, 25])\n                        rotate([0, 0, 90])\n                            cylinder(h = 15, r = 4);\n                }\n                union() {\n                    cylinder(h = 15, r = 2);\n                    translate([0, 15, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h = 25, r = 2);\n                    translate([0, 15, 25])\n                        rotate([0, 0, 90])\n                            cylinder(h = 15, r = 2);\n                }\n            }\n    \n    // Leadpipe to valves\n    translate([10, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 55, r = 4);\n                cylinder(h = 55, r = 2);\n            }\n}\n\n// Generate the model\ntrumpet();",
    "renders": true
  },
  {
    "toy": "cup",
    "openscad_code": "// Toy Cup - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions\ncup_height = 80;\ncup_diameter = 65;\nwall_thickness = 2;\nbase_thickness = 4;\n\nmodule cup_body() {\n    difference() {\n        // Outer wall\n        cylinder(h = cup_height, d = cup_diameter, center = false);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n            cylinder(h = cup_height - base_thickness + 1, d = cup_diameter - 2*wall_thickness, center = false);\n    }\n}\n\nmodule cup_base() {\n    // Thicker base for stability\n    cylinder(h = base_thickness, d = cup_diameter, center = false);\n}\n\nmodule handle() {\n    // Toy-style oversized handle\n    handle_width = 18;\n    handle_thickness = 4;\n    \n    // Main handle curve\n    translate([cup_diameter/2 - 2, 0, cup_height/2])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer handle\n                torus(cup_height/4, handle_thickness);\n                \n                // Inner hole\n                torus(cup_height/4 - handle_thickness, handle_thickness - 1);\n            }\n    \n    // Handle supports\n    for(z = [cup_height*0.25, cup_height*0.75]) {\n        translate([cup_diameter/2, 0, z])\n            rotate([0, 90, 0])\n                cylinder(h = handle_width, d = handle_thickness, center = true);\n    }\n}\n\nmodule decorative_stripes() {\n    // Toy-style colorful stripes\n    stripe_height = 3;\n    stripe_spacing = 7;\n    num_stripes = floor(cup_height / (stripe_height + stripe_spacing)) - 1;\n    \n    for(i = [1:num_stripes]) {\n        color(\"red\")\n        translate([0, 0, i * (stripe_height + stripe_spacing)])\n            difference() {\n                cylinder(h = stripe_height, d = cup_diameter + 0.1, center = false);\n                cylinder(h = stripe_height + 0.2, d = cup_diameter - 2*wall_thickness - 0.1, center = false);\n            }\n    }\n}\n\nmodule rim_detail() {\n    // Reinforced rim for durability\n    translate([0, 0, cup_height - wall_thickness])\n        cylinder(h = wall_thickness * 2, d = cup_diameter + wall_thickness, center = false);\n}\n\nmodule toy_decals() {\n    // Simple star shapes as toy decals\n    star_height = 2;\n    \n    // Front star\n    translate([0, cup_diameter/2 - wall_thickness, cup_height * 0.7])\n        rotate([90, 0, 0])\n            linear_extrude(height = star_height)\n                polygon(points = [\n                    [0, 5], [1.5, 1.5], [5, 1], [2.5, -1.5], [3, -5],\n                    [0, -2.5], [-3, -5], [-2.5, -1.5], [-5, 1], [-1.5, 1.5]\n                ]);\n    \n    // Back star\n    translate([0, -(cup_diameter/2 - wall_thickness), cup_height * 0.4])\n        rotate([90, 180, 0])\n            linear_extrude(height = star_height)\n                polygon(points = [\n                    [0, 5], [1.5, 1.5], [5, 1], [2.5, -1.5], [3, -5],\n                    [0, -2.5], [-3, -5], [-2.5, -1.5], [-5, 1], [-1.5, 1.5]\n                ]);\n}\n\n// Generate the complete toy cup\nunion() {\n    // Base structure\n    cup_base();\n    cup_body();\n    \n    // Details\n    rim_detail();\n    handle();\n    decorative_stripes();\n    toy_decals();\n}",
    "renders": true
  },
  {
    "toy": "rope",
    "openscad_code": "// Rope Toy - Realistic Style with Medium Complexity\n// A 3D printable rope toy with twisted strands and knots\n\n// Parameters\n$fn = 32;  // Circle resolution for smooth curves\nrope_length = 100;\nrope_diameter = 12;\nstrand_diameter = 3.5;\nnum_strands = 3;\nknot_diameter = 18;\nwall_thickness = 2;\n\n// Main rope module\nmodule rope_segment(length, diameter, twist_angle) {\n    // Create individual strands\n    for (i = [0:num_strands-1]) {\n        rotate([0, 0, i * 120]) {\n            translate([diameter/3, 0, 0]) {\n                rotate([0, twist_angle, 0]) {\n                    linear_extrude(height = length, twist = twist_angle * 10, $fn = 16)\n                        circle(strand_diameter/2);\n                }\n            }\n        }\n    }\n}\n\n// Knot module - creates a realistic overhand knot\nmodule knot(position, size) {\n    translate(position) {\n        // Main knot body\n        sphere(size/2);\n        \n        // Entry strand\n        translate([0, 0, size/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = size, r = strand_diameter/2);\n            }\n        }\n        \n        // Exit strand\n        translate([0, 0, -size/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = size, r = strand_diameter/2);\n            }\n        }\n    }\n}\n\n// End cap module to prevent fraying\nmodule end_cap(position) {\n    translate(position) {\n        // Tapered end\n        cylinder(h = rope_diameter, r1 = rope_diameter/2, r2 = rope_diameter/3);\n        \n        // Reinforcement ring\n        translate([0, 0, rope_diameter/2]) {\n            difference() {\n                cylinder(h = wall_thickness, r = rope_diameter/2 + wall_thickness);\n                cylinder(h = wall_thickness + 1, r = rope_diameter/2);\n            }\n        }\n    }\n}\n\n// Frayed end detail\nmodule frayed_end(position) {\n    translate(position) {\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([rope_diameter/2 - 1, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = rope_diameter * 1.5, r = strand_diameter/3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // First rope segment\n    translate([0, 0, -rope_length/2]) {\n        rope_segment(rope_length, rope_diameter, 360);\n    }\n    \n    // Central knot\n    knot([0, 0, 0], knot_diameter);\n    \n    // Left knot\n    knot([-rope_length/3, 0, 0], knot_diameter * 0.8);\n    \n    // Right knot\n    knot([rope_length/3, 0, 0], knot_diameter * 0.8);\n    \n    // Left end cap\n    end_cap([0, 0, -rope_length/2 - rope_diameter/2]);\n    \n    // Right end cap\n    end_cap([0, 0, rope_length/2 + rope_diameter/2]);\n    \n    // Frayed detail on left end\n    translate([0, 0, -rope_length/2 - rope_diameter]) {\n        rotate([0, 0, 15]) {\n            frayed_end([0, 0, 0]);\n        }\n    }\n    \n    // Frayed detail on right end\n    translate([0, 0, rope_length/2 + rope_diameter]) {\n        rotate([0, 0, -15]) {\n            frayed_end([0, 0, 0]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "bear",
    "openscad_code": "// Realistic Bear Toy - Medium Complexity\n// Dimensions: ~90mm tall, 70mm wide, 60mm deep\n\nmodule bear_body() {\n    // Main body - oval shape\n    rotate([90,0,0])\n        scale([1,0.8,1.2])\n            cylinder(h=40, r1=25, r2=20, $fn=30);\n    \n    // Belly detail\n    translate([0,-19,0])\n        scale([0.7,0.2,0.9])\n            sphere(r=20, $fn=30);\n}\n\nmodule bear_head() {\n    // Main head sphere\n    translate([0,0,35])\n        sphere(r=22, $fn=30);\n    \n    // Muzzle\n    translate([0,-18,30])\n        scale([1,1.2,0.8])\n            sphere(r=12, $fn=25);\n    \n    // Nose\n    translate([0,-28,32])\n        scale([1,0.5,0.8])\n            sphere(r=4, $fn=15);\n}\n\nmodule bear_ear() {\n    // Outer ear\n    scale([1,1,0.6])\n        sphere(r=10, $fn=20);\n    \n    // Inner ear\n    translate([0,0,4])\n        scale([0.6,0.6,0.4])\n            color(\"pink\")\n            sphere(r=8, $fn=15);\n}\n\nmodule bear_leg() {\n    // Upper leg\n    cylinder(h=25, r1=10, r2=8, $fn=20);\n    \n    // Paw\n    translate([0,0,-15])\n        sphere(r=9, $fn=20);\n}\n\nmodule bear_arm() {\n    // Upper arm\n    rotate([0,15,0])\n        cylinder(h=20, r1=8, r2=6, $fn=15);\n    \n    // Paw\n    translate([0,-3,-12])\n        sphere(r=7, $fn=15);\n}\n\nmodule bear_eyes() {\n    // Left eye\n    translate([-8,10,38])\n        scale([1,1,0.5])\n            sphere(r=3, $fn=10);\n    \n    // Right eye\n    translate([8,10,38])\n        scale([1,1,0.5])\n            sphere(r=3, $fn=10);\n}\n\n// Main assembly\nunion() {\n    // Body\n    bear_body();\n    \n    // Head and features\n    bear_head();\n    \n    // Ears - positioned on head\n    translate([-15,5,50]) rotate([30,0,-30]) bear_ear();\n    translate([15,5,50]) rotate([30,0,30]) bear_ear();\n    \n    // Eyes\n    color(\"black\") bear_eyes();\n    \n    // Legs - positioned for sitting pose\n    translate([-15,-20,-20]) rotate([0,10,0]) bear_leg();\n    translate([15,-20,-20]) rotate([0,-10,0]) bear_leg();\n    \n    // Arms - positioned forward\n    translate([-25,5,15]) rotate([0,0,30]) bear_arm();\n    translate([25,5,15]) rotate([0,0,-30]) mirror([1,0,0]) bear_arm();\n    \n    // Tail\n    translate([0,22,-15])\n        scale([1,1,0.8])\n            sphere(r=8, $fn=20);\n}",
    "renders": true
  },
  {
    "toy": "rabbit",
    "openscad_code": "// Realistic Toy Rabbit - Medium Complexity\n// Dimensions: ~100mm length, ~60mm height, ~50mm width\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main body module\nmodule rabbit_body() {\n    // Central body core\n    difference() {\n        // Main ovoid body\n        scale([1.2, 0.8, 0.9])\n        sphere(d=40);\n        \n        // Hollow interior for printing\n        scale([1.1, 0.7, 0.8])\n        sphere(d=36);\n    }\n}\n\n// Head module\nmodule rabbit_head() {\n    translate([25, 0, 15]) {\n        difference() {\n            // Main head sphere\n            sphere(d=30);\n            \n            // Hollow interior\n            sphere(d=26);\n            \n            // Eye sockets left\n            translate([7, 8, 4]) {\n                rotate([0, -10, 0])\n                cylinder(h=15, d=6);\n            }\n            \n            // Eye sockets right\n            translate([7, -8, 4]) {\n                rotate([0, 10, 0])\n                cylinder(h=15, d=6);\n            }\n        }\n        \n        // Eyes\n        translate([13, 8, 5]) {\n            color(\"black\")\n            sphere(d=4);\n        }\n        translate([13, -8, 5]) {\n            color(\"black\")\n            sphere(d=4);\n        }\n        \n        // Nose\n        translate([15, 0, 0]) {\n            color(\"pink\")\n            sphere(d=3);\n        }\n        \n        // Mouth indentation\n        translate([15, 0, -3]) {\n            rotate([90, 0, 0])\n            cylinder(h=2, d1=1, d2=4);\n        }\n    }\n}\n\n// Ear module\nmodule rabbit_ear(x_pos, y_pos, z_rot) {\n    translate([x_pos, y_pos, 25]) {\n        rotate([0, 0, z_rot]) {\n            // Outer ear\n            difference() {\n                // Main ear shape\n                scale([0.3, 1, 2])\n                sphere(d=20);\n                \n                // Inner ear hollow\n                translate([0, 0, -2])\n                scale([0.25, 0.8, 1.8])\n                sphere(d=18);\n            }\n            \n            // Inner ear pink part\n            translate([0, 0, 2]) {\n                color(\"pink\")\n                scale([0.2, 0.6, 1.5])\n                sphere(d=15);\n            }\n        }\n    }\n}\n\n// Paw module\nmodule rabbit_paw(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, angle, 0]) {\n            difference() {\n                // Main paw\n                scale([0.6, 0.4, 1])\n                sphere(d=15);\n                \n                // Hollow paw\n                scale([0.5, 0.3, 0.9])\n                sphere(d=13);\n                \n                // Toe grooves\n                for(i = [-1:1]) {\n                    translate([0, i*3, -5]) {\n                        rotate([0, 90, 0])\n                        cylinder(h=8, d=2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule rabbit_tail() {\n    translate([-15, 0, 10]) {\n        difference() {\n            // Main tail\n            sphere(d=12);\n            \n            // Hollow tail\n            sphere(d=10);\n        }\n    }\n}\n\n// Whiskers module\nmodule whiskers() {\n    translate([15, 0, 2]) {\n        for(i = [1:3]) {\n            // Left whiskers\n            translate([0, 5 + i*2, -i]) {\n                rotate([0, -10 - i*5, 0])\n                cylinder(h=10, d=0.5);\n            }\n            \n            // Right whiskers\n            translate([0, -5 - i*2, -i]) {\n                rotate([0, 10 + i*5, 0])\n                cylinder(h=10, d=0.5);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Main body parts\n        rabbit_body();\n        rabbit_head();\n        rabbit_tail();\n        \n        // Ears\n        rabbit_ear(28, 6, 15);\n        rabbit_ear(28, -6, -15);\n        \n        // Front paws\n        rabbit_paw(15, 12, 8, 20);\n        rabbit_paw(15, -12, 8, 20);\n        \n        // Back paws\n        rabbit_paw(-10, 8, 4, -20);\n        rabbit_paw(-10, -8, 4, -20);\n        \n        // Whiskers\n        color(\"white\")\n        whiskers();\n    }\n}",
    "renders": true
  },
  {
    "toy": "elephant",
    "openscad_code": "// Elephant Toy - Realistic Style, Medium Complexity\n// Size: ~100mm long, designed for 3D printing\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main body module\nmodule elephant_body() {\n    // Torso - main body\n    translate([0, 0, 25])\n    scale([1.5, 1, 1.2])\n    sphere(20);\n    \n    // Belly bulge\n    translate([0, 0, 18])\n    scale([1.3, 0.8, 0.8])\n    sphere(18);\n}\n\n// Head module with ears and trunk\nmodule elephant_head() {\n    // Head\n    translate([-35, 0, 35])\n    scale([1.2, 1, 1])\n    sphere(15);\n    \n    // Ears\n    // Left ear\n    translate([-42, -18, 35])\n    rotate([0, 0, 30])\n    scale([0.8, 0.2, 0.6])\n    sphere(12);\n    \n    // Right ear\n    translate([-42, 18, 35])\n    rotate([0, 0, -30])\n    scale([0.8, 0.2, 0.6])\n    sphere(12);\n    \n    // Trunk - curved using cylinder segments\n    for (i = [0:9]) {\n        translate([-45 - i*2, 0, 30 - i*2])\n        rotate([0, -i*5, 0])\n        cylinder(h=3, r1=5-i*0.3, r2=5-i*0.35, center=true);\n    }\n}\n\n// Leg module\nmodule elephant_leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n    rotate([0, 0, angle])\n    difference() {\n        // Main leg\n        translate([0, 0, 12])\n        cylinder(h=25, r=6, center=true);\n        \n        // Taper bottom\n        translate([0, 0, -0.5])\n        cylinder(h=2, r=4.5, center=true);\n        \n        // Hollow for material saving\n        translate([0, 0, 12])\n        cylinder(h=25, r=3.5, center=true);\n    }\n}\n\n// Tail module\nmodule elephant_tail() {\n    // Tail base\n    translate([30, 0, 30])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=3, center=true);\n    \n    // Tail tuft\n    translate([35, 0, 30])\n    sphere(4);\n}\n\n// Tusks module\nmodule elephant_tusks() {\n    // Left tusk\n    translate([-40, -8, 22])\n    rotate([0, 45, 15])\n    scale([1, 1, 1.5])\n    cylinder(h=8, r1=3, r2=1, center=true);\n    \n    // Right tusk\n    translate([-40, 8, 22])\n    rotate([0, 45, -15])\n    scale([1, 1, 1.5])\n    cylinder(h=8, r1=3, r2=1, center=true);\n}\n\n// Eyes module\nmodule elephant_eyes() {\n    // Left eye\n    translate([-42, -7, 38])\n    sphere(2);\n    \n    // Right eye\n    translate([-42, 7, 38])\n    sphere(2);\n}\n\n// Feet pads for stability\nmodule elephant_feet() {\n    // Front left\n    translate([-20, -15, 0])\n    cylinder(h=2, r=7);\n    \n    // Front right\n    translate([-20, 15, 0])\n    cylinder(h=2, r=7);\n    \n    // Back left\n    translate([20, -15, 0])\n    cylinder(h=2, r=7);\n    \n    // Back right\n    translate([20, 15, 0])\n    cylinder(h=2, r=7);\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    elephant_body();\n    elephant_head();\n    \n    // Legs - positioned for stability\n    elephant_leg(-20, -15, 0);\n    elephant_leg(-20, 15, 0);\n    elephant_leg(20, -15, 0);\n    elephant_leg(20, 15, 0);\n    \n    // Add tail\n    elephant_tail();\n    \n    // Add tusks\n    elephant_tusks();\n    \n    // Add eyes\n    color(\"black\")\n    elephant_eyes();\n    \n    // Add feet pads\n    elephant_feet();\n}",
    "renders": true
  },
  {
    "toy": "giraffe",
    "openscad_code": "// Giraffe Toy - Realistic Medium Complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\n$fn = 30;\n\n// Main parameters\nbody_length = 40;\nbody_height = 35;\nbody_width = 25;\nleg_length = 50;\nneck_length = 60;\nhead_length = 25;\n\nmodule giraffe() {\n    // Body\n    union() {\n        // Main body\n        translate([0, 0, leg_length + body_height/2])\n            scale([1, 0.8, 0.7])\n                sphere(d = body_width);\n        \n        // Chest\n        translate([-body_length/2 - 5, 0, leg_length + body_height/2])\n            cube([10, body_width * 0.9, body_height * 0.9], center = true);\n    }\n    \n    // Neck\n    translate([body_length/2 - 5, 0, leg_length + body_height - 5])\n        rotate([0, -15, 0])\n            cylinder(h = neck_length, r1 = 8, r2 = 5);\n    \n    // Head\n    translate([body_length/2 + neck_length - 10, 0, leg_length + body_height + neck_length - 5])\n        rotate([0, -15, 0])\n            union() {\n                // Main head\n                cube([head_length, 12, 15], center = true);\n                \n                // Snout\n                translate([head_length/2 + 3, 0, -2])\n                    cube([6, 8, 8], center = true);\n                \n                // Ears\n                translate([head_length/2 - 5, 7, 5])\n                    rotate([15, 0, 0])\n                        cylinder(h = 8, r = 3);\n                translate([head_length/2 - 5, -7, 5])\n                    rotate([-15, 0, 0])\n                        cylinder(h = 8, r = 3);\n                \n                // Horns\n                translate([head_length/2 - 8, 3, 10])\n                    cylinder(h = 10, r1 = 2, r2 = 1);\n                translate([head_length/2 - 8, -3, 10])\n                    cylinder(h = 10, r1 = 2, r2 = 1);\n            }\n    \n    // Legs\n    for(x = [-body_length/2 + 5, body_length/2 - 5])\n        for(y = [-body_width/2 + 5, body_width/2 - 5]) {\n            // Upper leg\n            translate([x, y, leg_length/2 + 5])\n                cylinder(h = leg_length - 10, r = 4);\n            \n            // Lower leg\n            translate([x, y, 5])\n                cylinder(h = leg_length - 15, r1 = 4, r2 = 3);\n            \n            // Hoof\n            translate([x, y, 2])\n                cylinder(h = 5, r = 4.5);\n        }\n    \n    // Tail\n    translate([-body_length/2 - 5, 0, leg_length + body_height - 10])\n        rotate([0, 0, 45])\n            union() {\n                cylinder(h = 20, r = 2);\n                translate([0, 0, 20])\n                    sphere(d = 8);\n            }\n    \n    // Spots\n    difference() {\n        union() {\n            // Body spots\n            for(i = [1:8]) {\n                rotate([0, 0, i * 45])\n                    translate([0, body_width/4, leg_length + body_height])\n                        scale([1, 0.5, 0.3])\n                            sphere(d = 8);\n            }\n        }\n        \n        // Remove spots from inside\n        union() {\n            translate([0, 0, leg_length + body_height/2])\n                scale([0.9, 0.7, 0.6])\n                    sphere(d = body_width);\n        }\n    }\n}\n\n// Generate giraffe\ngiraffe();",
    "renders": true
  },
  {
    "toy": "lion",
    "openscad_code": "// Lion Toy - Realistic Style, Medium Complexity\n// Dimensions: ~80mm body length\n\nmodule lion_toy() {\n    // Main body - oval shape with slight arch\n    union() {\n        // Body core\n        difference() {\n            hull() {\n                translate([0, 0, 10]) sphere([25, 20, 15], $fn=32);\n                translate([0, 0, 30]) sphere([25, 20, 15], $fn=32);\n            }\n            // Hollow interior for printability\n            translate([0, 0, 20]) scale([0.8, 0.8, 0.8]) sphere([25, 20, 15], $fn=32);\n        }\n        \n        // Mane - series of rotated cylinders\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5]) \n                translate([20, 0, 35]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=15, r1=8, r2=6, $fn=8);\n        }\n        \n        // Head sphere\n        translate([0, 0, 40]) sphere(18, $fn=32);\n        \n        // Ears - small spheres on sides\n        translate([-15, 0, 50]) sphere(6, $fn=16);\n        translate([15, 0, 50]) sphere(6, $fn=16);\n        \n        // Snout extension\n        translate([0, -15, 35]) scale([1.2, 1.5, 1]) sphere(8, $fn=16);\n        \n        // Nose\n        translate([0, -20, 35]) sphere(3, $fn=16);\n        \n        // Eyes - small spheres\n        translate([-6, -12, 48]) sphere(2, $fn=16);\n        translate([6, -12, 48]) sphere(2, $fn=16);\n        \n        // Legs - cylinders with paws\n        module leg(x_pos) {\n            // Upper leg\n            translate([x_pos, 0, 20]) rotate([0, 15, 0]) \n                cylinder(h=20, r=5, $fn=16);\n            // Lower leg\n            translate([x_pos, 0, 5]) rotate([0, 15, 0]) \n                cylinder(h=15, r=4, $fn=16);\n            // Paw\n            translate([x_pos, 0, 0]) \n                sphere(6, $fn=16);\n        }\n        \n        leg(-20);\n        leg(20);\n        leg(-20);\n        leg(20);\n        \n        // Tail - curved cylinder\n        translate([25, 0, 25]) rotate([0, 0, 30]) {\n            for(i = [0:4]) {\n                rotate([0, i * 10, 0]) \n                    translate([i * 3, 0, 0]) \n                        cylinder(h=3, r1=2.5, r2=2, $fn=8);\n            }\n            // Tail tuft\n            translate([15, 0, 0]) sphere(5, $fn=16);\n        }\n    }\n}\n\n// Create the toy\nlion_toy();",
    "renders": true
  },
  {
    "toy": "tiger",
    "openscad_code": "// Realistic Tiger Toy - Medium Complexity\n// Dimensions: 120mm long, 60mm tall, 50mm wide\n// Wall thickness: 2mm throughout\n\nmodule tiger_body() {\n    // Main torso\n    difference() {\n        scale([1.2, 0.8, 1]) sphere(d=45, $fn=32);\n        translate([0,0,-25]) cube([50,50,25], center=true);\n    }\n}\n\nmodule tiger_head() {\n    // Head sphere\n    translate([-35, 0, 15]) {\n        sphere(d=35, $fn=32);\n        \n        // Snout\n        translate([-8, 0, -5]) {\n            scale([1.3, 1, 0.8]) sphere(d=15, $fn=32);\n        }\n        \n        // Ears\n        for(x=[-1, 1]) {\n            translate([5, x*12, 12]) {\n                rotate([0, x*-20, 0]) \n                scale([0.8, 0.5, 1]) cylinder(h=15, d1=12, d2=6, $fn=16);\n            }\n        }\n    }\n}\n\nmodule tiger_legs() {\n    // Front legs\n    for(x=[-1, 1]) {\n        translate([-15, x*22, -20]) {\n            rotate([0, x*10, 0])\n            scale([0.8, 1, 1.2]) cylinder(h=30, d=12, $fn=16);\n        }\n    }\n    \n    // Back legs\n    for(x=[-1, 1]) {\n        translate([15, x*22, -20]) {\n            rotate([0, x*-10, 0])\n            scale([1, 1, 1.3]) cylinder(h=30, d=14, $fn=16);\n        }\n    }\n}\n\nmodule tiger_tail() {\n    // Tail with curve\n    translate([32, 0, 5]) {\n        rotate([0, 90, 0]) {\n            for(i=[0:5]) {\n                rotate([0, 0, i*15]) {\n                    translate([0, i*8, 0]) {\n                        sphere(d=8-i, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tiger_stripes() {\n    // Body stripes\n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([0, 0, 0]) {\n                scale([1.2, 0.1, 1]) rotate_extrude(angle=30, $fn=2) \n                translate([20, 0, 0]) circle(d=3, $fn=8);\n            }\n        }\n    }\n    \n    // Head stripes\n    for(i=[0:3]) {\n        rotate([0, 90, i*45]) {\n            translate([-35, 0, 15]) {\n                scale([0.1, 1, 0.3]) cube([25, 3, 8]);\n            }\n        }\n    }\n}\n\nmodule tiger_face() {\n    // Eyes\n    for(x=[-1, 1]) {\n        translate([-42, x*8, 15]) {\n            sphere(d=5, $fn=16);\n            translate([0, 0, 2.5]) sphere(d=2, $fn=16);\n        }\n    }\n    \n    // Nose\n    translate([-48, 0, 10]) {\n        scale([1, 0.8, 0.6]) sphere(d=6, $fn=16);\n    }\n    \n    // Mouth\n    translate([-45, 0, 5]) {\n        rotate([90, 0, 0]) \n        cylinder(h=0.5, d1=8, d2=4, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    tiger_body();\n    tiger_head();\n    tiger_legs();\n    tiger_tail();\n    tiger_face();\n    \n    // Toy joints (spheres at connection points)\n    translate([-25, 0, 0]) sphere(d=6, $fn=16);\n    translate([25, 0, 0]) sphere(d=6, $fn=16);\n}\n\n// Base for stability\ndifference() {\n    translate([0, 0, -35]) {\n        cube([60, 50, 5], center=true);\n    }\n    translate([0, 0, -32]) {\n        cube([50, 40, 5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "toy": "monkey",
    "openscad_code": "// Realistic Toy Monkey - 3D Printable\n// Height: 80mm, Wall thickness: 2mm\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, radius]) sphere(radius);\n        translate([size.x-radius, radius, radius]) sphere(radius);\n        translate([size.x-radius, size.y-radius, radius]) sphere(radius);\n        translate([radius, size.y-radius, radius]) sphere(radius);\n        translate([radius, radius, size.z-radius]) sphere(radius);\n        translate([size.x-radius, radius, size.z-radius]) sphere(radius);\n        translate([size.x-radius, size.y-radius, size.z-radius]) sphere(radius);\n        translate([radius, size.y-radius, size.z-radius]) sphere(radius);\n    }\n}\n\n// Head\nmodule head() {\n    translate([0, 0, 60]) {\n        difference() {\n            // Main head sphere\n            sphere(15);\n            \n            // Eye sockets\n            translate([8, 7, 5]) rotate([0, 90, 0]) cylinder(h=10, r1=3, r2=4);\n            translate([-8, 7, 5]) rotate([0, 90, 0]) cylinder(h=10, r1=3, r2=4);\n            \n            // Mouth cavity\n            translate([0, 10, -8]) sphere(6);\n        }\n        \n        // Eyes\n        translate([8, 10, 5]) sphere(2);\n        translate([-8, 10, 5]) sphere(2);\n        \n        // Nose\n        translate([0, 12, 0]) cylinder(h=3, r1=2, r2=1);\n        \n        // Ears\n        translate([12, 0, 5]) sphere(5);\n        translate([-12, 0, 5]) sphere(5);\n    }\n}\n\n// Body\nmodule body() {\n    difference() {\n        translate([0, 0, 35]) rounded_cube([20, 15, 25], 5);\n        \n        // Hollow body for printing\n        translate([0, 0, 35]) scale([0.8, 0.8, 0.8]) rounded_cube([20, 15, 25], 4);\n    }\n}\n\n// Arms\nmodule arm(side) {\n    translate([side * 12, 0, 45]) {\n        rotate([0, 0, side * 15]) {\n            // Upper arm\n            rounded_cube([6, 6, 20], 3);\n            \n            // Lower arm\n            translate([0, 0, -15]) rotate([0, side * 45, 0]) {\n                rounded_cube([6, 6, 15], 3);\n                \n                // Hand\n                translate([0, 0, -10]) sphere(5);\n            }\n        }\n    }\n}\n\n// Legs\nmodule leg(side) {\n    translate([side * 8, 0, 25]) {\n        // Upper leg\n        rounded_cube([8, 8, 20], 4);\n        \n        // Lower leg\n        translate([0, 0, -15]) rotate([0, 0, side * 10]) {\n            rounded_cube([8, 8, 15], 4);\n            \n            // Foot\n            translate([0, 5, -10]) rounded_cube([10, 15, 5], 3);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -12, 30]) {\n        rotate([0, 30, 0]) {\n            for(i = [0:3]) {\n                translate([0, 0, -i * 5]) rotate([0, 0, -i * 15]) {\n                    rounded_cube([5, 5, 8], 2.5);\n                }\n            }\n            // Tail tip\n            translate([0, 0, -20]) sphere(3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    head();\n    body();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n    tail();\n}",
    "renders": true
  },
  {
    "toy": "parrot",
    "openscad_code": "// Parrot Toy - Realistic Style, Medium Complexity\n// 3D printable parrot toy with basic joints and toy-like proportions\n\n// Overall dimensions: ~100mm height\n$fn = 30;\n\n// Main body module\nmodule parrot_body() {\n    // Torso (main body)\n    translate([0, 0, 25])\n        scale([1, 0.8, 1.2])\n        sphere(20);\n    \n    // Back/tail area\n    translate([-25, 0, 20])\n        rotate([0, 10, 0])\n        scale([2, 1, 0.6])\n        sphere(15);\n}\n\n// Head module\nmodule parrot_head() {\n    // Main head sphere\n    translate([0, 0, 55])\n        sphere(18);\n    \n    // Beak (upper)\n    translate([15, 0, 55])\n        rotate([0, -20, 0])\n        scale([1.5, 0.8, 0.8])\n        cylinder(10, 8, 0);\n    \n    // Beak (lower)\n    translate([15, 0, 51])\n        rotate([0, 20, 0])\n        scale([1.2, 0.7, 0.7])\n        cylinder(8, 6, 0);\n    \n    // Crest feathers\n    for(i = [-2:2]) {\n        translate([0, i*4, 72])\n            rotate([0, 0, i*10])\n            cylinder(12, 2, 1);\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        translate([-5, side*15, 35])\n            rotate([0, 0, side*-10])\n            scale([0.3, 1, 1])\n            sphere(20);\n        \n        // Wing feathers\n        for(i = [0:4]) {\n            translate([-10-i*2, side*(15+i*2), 30-i*3])\n                rotate([0, 0, side*(20-i*5)])\n                scale([0.5, 1.2, 0.1])\n                cube([8, 12, 2]);\n        }\n    }\n}\n\n// Leg and foot module\nmodule leg(side) {\n    // Upper leg\n    translate([side*8, 0, 15])\n        rotate([0, 0, side*30])\n        cylinder(12, 4, 3);\n    \n    // Lower leg\n    translate([side*16, 0, 8])\n        rotate([0, 0, side*(-30)])\n        cylinder(10, 3, 2);\n    \n    // Foot\n    translate([side*22, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, 0.8, 0.5])\n        sphere(6);\n    \n    // Toes\n    for(i = [-1:1]) {\n        translate([side*22, i*4, -3])\n            rotate([0, 0, i*20])\n            cylinder(8, 2, 1);\n    }\n}\n\n// Eye module\nmodule eye() {\n    color(\"black\")\n    translate([10, 5, 57])\n        sphere(3);\n    translate([10, -5, 57])\n        sphere(3);\n}\n\n// Toy joint connector (ball joint)\nmodule joint_connector() {\n    translate([0, 0, 5])\n        sphere(8);\n    \n    // Joint socket for assembly\n    translate([0, 0, 5])\n        sphere(6, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    parrot_body();\n    parrot_head();\n    wing(1);  // Left wing\n    wing(-1); // Right wing\n    \n    // Legs\n    leg(1);   // Left leg\n    leg(-1);  // Right leg\n    \n    // Eyes\n    eye();\n    \n    // Toy base connector\n    joint_connector();\n}\n\n// Toy stand/base\ntranslate([0, 0, -5])\n    difference() {\n        cylinder(10, 30, 30);\n        cylinder(8, 25, 25);\n    }\n\n// Perch bar\ntranslate([0, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(50, 3, 3);",
    "renders": true
  },
  {
    "toy": "fish",
    "openscad_code": "// Realistic Toy Fish - Medium Complexity\n// Overall dimensions: ~120mm long, ~60mm high, ~25mm thick\n\nmodule fish_body() {\n    // Main body - elongated ellipsoid shape\n    union() {\n        // Central body core\n        scale([1, 0.6, 0.3])\n            sphere(d=60, $fn=32);\n        \n        // Tail connector - slightly thinner section\n        translate([-30, 0, 0])\n            scale([0.8, 0.5, 0.25])\n                sphere(d=50, $fn=32);\n    }\n}\n\nmodule fish_tail() {\n    // Forked tail fin with thickness for printing\n    translate([-50, 0, 0])\n    rotate([0, 0, 0])\n    union() {\n        // Top tail lobe\n        translate([0, 15, 0])\n            rotate([0, 0, -20])\n            scale([1.5, 1, 0.15])\n                cylinder(h=25, d1=15, d2=0, $fn=3);\n        \n        // Bottom tail lobe\n        translate([0, -15, 0])\n            rotate([0, 0, 20])\n            scale([1.5, 1, 0.15])\n                cylinder(h=25, d1=15, d2=0, $fn=3);\n    }\n}\n\nmodule dorsal_fin() {\n    // Back fin with toy-like ridges\n    translate([10, 0, 8])\n    rotate([0, 0, 0])\n    for(i=[0:3]) {\n        translate([i*3-4.5, 0, i*1.5])\n            scale([1, 0.8, 1])\n                cube([2, 20-i*3, 3], center=true);\n    }\n}\n\nmodule pectoral_fin(side) {\n    // Side fins for swimming action\n    translate([5, side*20, -3])\n    rotate([0, 0, side*45])\n    scale([1, 0.3, 0.1])\n        cylinder(h=25, d1=15, d2=8, $fn=3);\n}\n\nmodule eye() {\n    // Large toy-like eyes with raised edges\n    translate([23, 12, 8])\n    rotate([0, 90, 0])\n    difference() {\n        // White part\n        cylinder(h=3, d=12, $fn=32);\n        \n        // Pupil indentation\n        translate([0, 0, 1])\n            cylinder(h=2, d=8, $fn=32);\n        \n        // Black pupil\n        translate([0, 0, 2.1])\n            cylinder(h=1, d=6, $fn=32);\n    }\n}\n\nmodule mouth() {\n    // Simple curved mouth opening\n    translate([28, 0, -2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=5, d=15, $fn=32);\n        translate([0, 0, -1])\n            cube([20, 20, 6], center=true);\n    }\n}\n\nmodule scales() {\n    // Decorative scale pattern using raised bumps\n    for(i=[-20:10:20]) {\n        for(j=[-15:8:15]) {\n            if(j*j + i*i < 400) {\n                translate([i, j, 9])\n                    sphere(d=2, $fn=8);\n            }\n        }\n    }\n}\n\nmodule toy_fish() {\n    // Assemble all fish components\n    union() {\n        // Main body structure\n        fish_body();\n        \n        // Fins and features\n        fish_tail();\n        dorsal_fin();\n        pectoral_fin(1);  // Right fin\n        pectoral_fin(-1); // Left fin\n        \n        // Face details\n        eye();\n        mirror([0,1,0]) eye();\n        mouth();\n        \n        // Decorative elements\n        scales();\n    }\n}\n\n// Generate the complete toy fish\ntoy_fish();",
    "renders": true
  },
  {
    "toy": "octopus",
    "openscad_code": "// Octopus Toy - Realistic Style with Medium Complexity\n// Size: ~100mm height, 3D printable\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body\nmodule body() {\n    // Torso section\n    translate([0, 0, 40])\n    scale([1, 1.2, 1])\n    sphere(d = 50);\n    \n    // Head dome\n    translate([0, 0, 65])\n    sphere(d = 40);\n    \n    // Bottom connection for legs\n    translate([0, 0, 15])\n    cylinder(h = 10, d = 45);\n}\n\n// Eyes module\nmodule eyes() {\n    // Left eye\n    translate([-12, 20, 70])\n    sphere(d = 8);\n    \n    // Right eye\n    translate([12, 20, 70])\n    sphere(d = 8);\n    \n    // Eye pupils\n    color(\"black\") {\n        translate([-12, 25, 70])\n        sphere(d = 4);\n        \n        translate([12, 25, 70])\n        sphere(d = 4);\n    }\n}\n\n// Tentacle segment for curves\nmodule tentacle_segment(length, angle, twist) {\n    translate([0, 0, length/2])\n    rotate([0, angle, twist])\n    cylinder(h = length, d1 = 10, d2 = 8);\n}\n\n// Single tentacle with curves\nmodule tentacle(base_angle, base_twist) {\n    rotate([0, 0, base_angle])\n    translate([0, 22.5, 15])\n    rotate([90 + base_twist, 0, 0]) {\n        // Base segment\n        tentacle_segment(20, 15, 0);\n        \n        // Middle segments\n        translate([0, 0, 20])\n        tentacle_segment(18, 20, 10);\n        \n        translate([0, 0, 38])\n        tentacle_segment(16, 25, 15);\n        \n        // Tip segment\n        translate([0, 0, 54])\n        tentacle_segment(14, 30, 20);\n    }\n}\n\n// Suction cups on tentacle\nmodule suction_cups() {\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n        for(j = [1:3]) {\n            translate([0, 22.5 - j*8, 15 + j*12])\n            rotate([90, 0, 0])\n            for(k = [0:5]) {\n                rotate([0, 0, k*60])\n                translate([3, 0, 0])\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Mouth detail\nmodule mouth() {\n    translate([0, 15, 50])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d1 = 10, d2 = 6);\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Eyes\n    eyes();\n    \n    // 8 tentacles\n    for(i = [1:8]) {\n        tentacle(i * 45, 0);\n    }\n    \n    // Suction cups\n    color(\"darkblue\")\n    suction_cups();\n    \n    // Mouth\n    mouth();\n}",
    "renders": true
  },
  {
    "toy": "whale",
    "openscad_code": "// Realistic Whale Toy - Medium Complexity\n// 3D printable toy whale with basic primitives\n\nwall_thickness = 2;\nscale_factor = 0.8; // Overall size ~100mm\n\nmodule whale_body() {\n    // Main body - elongated sphere\n    scale([2.5, 1, 1]) \n    sphere(r=20 * scale_factor, $fn=50);\n}\n\nmodule whale_head() {\n    // Front head section\n    translate([45 * scale_factor, 0, 5 * scale_factor])\n    scale([1.2, 0.9, 0.9])\n    sphere(r=18 * scale_factor, $fn=40);\n}\n\nmodule whale_tail() {\n    // Split tail flukes\n    translate([-45 * scale_factor, 0, -2 * scale_factor])\n    rotate([0, 0, 0])\n    scale([1.5, 0.3, 0.8])\n    sphere(r=15 * scale_factor, $fn=30);\n    \n    // Left fluke\n    translate([-55 * scale_factor, -15 * scale_factor, -5 * scale_factor])\n    rotate([0, 0, 45])\n    scale([0.8, 0.2, 0.6])\n    sphere(r=12 * scale_factor, $fn=20);\n    \n    // Right fluke\n    translate([-55 * scale_factor, 15 * scale_factor, -5 * scale_factor])\n    rotate([0, 0, -45])\n    scale([0.8, 0.2, 0.6])\n    sphere(r=12 * scale_factor, $fn=20);\n}\n\nmodule blowhole() {\n    // Two small blowholes on top\n    for (i = [-1, 1]) {\n        translate([40 * scale_factor, i * 3 * scale_factor, 22 * scale_factor])\n        cylinder(h=3 * scale_factor, r=2 * scale_factor, $fn=12);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([35 * scale_factor, -12 * scale_factor, 8 * scale_factor])\n    scale([1, 0.5, 0.8])\n    sphere(r=3 * scale_factor, $fn=20);\n    \n    // Right eye\n    translate([35 * scale_factor, 12 * scale_factor, 8 * scale_factor])\n    scale([1, 0.5, 0.8])\n    sphere(r=3 * scale_factor, $fn=20);\n    \n    // Eye pupils\n    color(\"black\") {\n        translate([37 * scale_factor, -12 * scale_factor, 9 * scale_factor])\n        sphere(r=1 * scale_factor, $fn=10);\n        \n        translate([37 * scale_factor, 12 * scale_factor, 9 * scale_factor])\n        sphere(r=1 * scale_factor, $fn=10);\n    }\n}\n\nmodule pectoral_fin(left_right = 1) {\n    // Side fins (pectoral fins)\n    translate([20 * scale_factor, left_right * 20 * scale_factor, -10 * scale_factor])\n    rotate([0, left_right * 20, 0])\n    scale([0.5, 0.1, 1.2])\n    sphere(r=12 * scale_factor, $fn=20);\n}\n\nmodule dorsal_fin() {\n    // Top fin\n    translate([0, 0, 20 * scale_factor])\n    rotate([0, 90, 0])\n    linear_extrude(height=3 * scale_factor)\n    polygon(points=[\n        [0, 0],\n        [8 * scale_factor, 15 * scale_factor],\n        [16 * scale_factor, 0]\n    ]);\n}\n\nmodule mouth_line() {\n    // Curved mouth line\n    translate([25 * scale_factor, -13 * scale_factor, 0 * scale_factor])\n    rotate([0, 0, -15])\n    scale([1, 0.8, 0.1])\n    cylinder(h=20 * scale_factor, r=2 * scale_factor, $fn=20);\n}\n\nmodule belly_flatten() {\n    // Flattened belly for stability\n    translate([0, 0, -18 * scale_factor])\n    scale([1, 1, 0.3])\n    sphere(r=20 * scale_factor, $fn=50);\n}\n\n// Main assembly\nunion() {\n    // Core whale shape\n    union() {\n        whale_body();\n        whale_head();\n        whale_tail();\n    }\n    \n    // Add details\n    union() {\n        blowhole();\n        eyes();\n        pectoral_fin(1);  // Right fin\n        pectoral_fin(-1); // Left fin\n        dorsal_fin();\n        mouth_line();\n    }\n    \n    // Ensure flat bottom for printing\n    difference() {\n        union() {\n            whale_body();\n            whale_head();\n            whale_tail();\n        }\n        belly_flatten();\n    }\n}\n\n// Add small support nubs under fins for printing\ntranslate([20 * scale_factor, 20 * scale_factor, -20 * scale_factor])\ncylinder(h=5 * scale_factor, r=3 * scale_factor, $fn=12);\n\ntranslate([20 * scale_factor, -20 * scale_factor, -20 * scale_factor])\ncylinder(h=5 * scale_factor, r=3 * scale_factor, $fn=12);",
    "renders": true
  },
  {
    "toy": "butterfly",
    "openscad_code": "// Realistic 3D-Printable Butterfly Toy – medium complexity\n// Wingspan ≈ 100 mm, body length ≈ 80 mm, thickness ≥ 2 mm everywhere\n\n$fa = 2; $fs = 0.4;\n\nmodule wing_profile() {\n    // Single realistic wing shape (right side)\n    hull() {\n        translate([0,0,2]) sphere(d=3);           // root\n        translate([40,25,2]) sphere(d=4);         // upper tip\n        translate([45,-15,2]) sphere(d=3);        // lower tip\n        translate([15,-22,2]) sphere(d=3);        // lower rear\n    }\n}\n\nmodule wing() {\n    difference() {\n        // Outer wing\n        linear_extrude(height=2, convexity=4)\n            offset(delta=2) offset(delta=-2) wing_profile();\n        // Simple vein grooves for realism (printable)\n        for(i=[0:3]) {\n            rotate([0,0,i*20-30])\n                translate([15,0,-1])\n                    cube([25,1,4], center=true);\n        }\n    }\n}\n\nmodule antenna() {\n    // Flexible toy antenna\n    rotate([0,90,0])\n        cylinder(h=20, d1=2, d2=1, $fn=8);\n}\n\nmodule body() {\n    // Segmented body for toy look\n    union() {\n        // Head\n        translate([0,0,5])\n            sphere(d=10);\n        // Thorax\n        translate([0,0,-3])\n            cylinder(d1=12, d2=9, h=15, $fn=20);\n        // Abdomen\n        translate([0,0,-15])\n            cylinder(d1=9, d2=6, h=20, $fn=20);\n    }\n}\n\nmodule butterfly() {\n    // Center body\n    color(\"Black\") body();\n\n    // Right forewing\n    color(\"Orange\")\n    translate([-5,0,3])\n        rotate([10,0,0])\n            wing();\n\n    // Right hindwing\n    color(\"Orange\")\n    translate([-5,0,-6])\n        rotate([5,0,0])\n            scale([0.8,0.8,1])\n                wing();\n\n    // Mirror left wings\n    mirror([0,1,0]) {\n        // Left forewing\n        color(\"Orange\")\n        translate([-5,0,3])\n            rotate([10,0,0])\n                wing();\n\n        // Left hindwing\n        color(\"Orange\")\n        translate([-5,0,-6])\n            rotate([5,0,0])\n                scale([0.8,0.8,1])\n                    wing();\n    }\n\n    // Antennae\n    color(\"Black\")\n    translate([0,4.5,9])\n        rotate([10,0,30])\n            antenna();\n    translate([0,-4.5,9])\n        rotate([10,0,-30])\n            antenna();\n}\n\n// Final assembly\nbutterfly();",
    "renders": true
  },
  {
    "toy": "flower",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Flower dimensions\nstem_length = 100 * scale_factor;\nstem_diameter = 6 * scale_factor;\nhead_diameter = 60 * scale_factor;\npetal_count = 8;\npetal_length = 25 * scale_factor;\npetal_width = 15 * scale_factor;\npetal_thickness = 2 * scale_factor;\ncenter_height = 10 * scale_factor;\ncenter_diameter = 20 * scale_factor;\n\n// Leaf dimensions\nleaf_length = 30 * scale_factor;\nleaf_width = 12 * scale_factor;\nleaf_thickness = 2 * scale_factor;\n\n// Toy base\nbase_diameter = 40 * scale_factor;\nbase_height = 8 * scale_factor;\n\nmodule stem() {\n    // Main stem cylinder\n    cylinder(h = stem_length, d = stem_diameter, $fn = 32);\n    \n    // Reinforcement ring at base\n    translate([0, 0, 0])\n        cylinder(h = 4 * scale_factor, d1 = stem_diameter + 4 * scale_factor, d2 = stem_diameter, $fn = 32);\n}\n\nmodule leaf() {\n    // Simple leaf shape using scaled spheres\n    translate([0, leaf_length/2, 0])\n        scale([leaf_width/leaf_length, 1, leaf_thickness/leaf_length])\n            sphere(d = leaf_length, $fn = 32);\n    \n    // Leaf vein detail\n    translate([0, leaf_length/4, leaf_thickness/2])\n        cube([1 * scale_factor, leaf_length/2, 0.5 * scale_factor], center = true);\n}\n\nmodule leaves_attachment() {\n    // Two leaves attached to stem\n    translate([stem_diameter/2 + leaf_width/2, stem_length * 0.3, 0])\n        rotate([0, 0, -30])\n        leaf();\n    \n    translate([-stem_diameter/2 - leaf_width/2, stem_length * 0.4, 0])\n        rotate([0, 0, 30])\n        mirror([1, 0, 0])\n        leaf();\n}\n\nmodule petal() {\n    // Single petal made from tapered cylinder and spheres\n    union() {\n        // Main petal body\n        translate([0, petal_length/2, 0])\n            scale([petal_width/petal_length, 1, petal_thickness/petal_length])\n                sphere(d = petal_length, $fn = 32);\n        \n        // Petal tip detail\n        translate([0, petal_length, 0])\n            sphere(d = petal_thickness * 2, $fn = 16);\n    }\n}\n\nmodule flower_head() {\n    // Center disk\n    translate([0, 0, center_height/2])\n        cylinder(h = center_height, d = center_diameter, $fn = 32);\n    \n    // Center texture details\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([center_diameter/3, 0, center_height])\n                sphere(d = 3 * scale_factor, $fn = 16);\n        }\n    }\n    \n    // Petals arranged in circle\n    for(i = [0:petal_count-1]) {\n        rotate([0, 0, i * 360/petal_count]) {\n            translate([0, center_diameter/2, center_height/2])\n                rotate([0, 15, 0])\n                petal();\n        }\n    }\n}\n\nmodule toy_base() {\n    // Rounded base for stability\n    difference() {\n        union() {\n            cylinder(h = base_height, d = base_diameter, $fn = 32);\n            translate([0, 0, base_height])\n                sphere(d = base_diameter, $fn = 32);\n        }\n        \n        // Hollow bottom for material saving\n        translate([0, 0, -1])\n            cylinder(h = base_height + 2, d = base_diameter - 4 * scale_factor, $fn = 32);\n    }\n    \n    // Connector hole for stem\n    translate([0, 0, base_height])\n        cylinder(h = 5 * scale_factor, d = stem_diameter + 0.5 * scale_factor, $fn = 32);\n}\n\n// Main assembly\nunion() {\n    // Toy base\n    toy_base();\n    \n    // Stem\n    translate([0, 0, base_height + 5 * scale_factor])\n        stem();\n    \n    // Leaves\n    translate([0, 0, base_height + 5 * scale_factor])\n        leaves_attachment();\n    \n    // Flower head\n    translate([0, 0, base_height + 5 * scale_factor + stem_length])\n        flower_head();\n}",
    "renders": true
  },
  {
    "toy": "tree",
    "openscad_code": "// Realistic Toy Tree - Medium Complexity\n// 3D printable tree toy with trunk, branches, and foliage layers\n\n// Overall dimensions: 120mm tall, 80mm wide at foliage\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main module\nmodule toy_tree() {\n    union() {\n        // Tree trunk with slight taper\n        trunk();\n        \n        // Main branches\n        branches();\n        \n        // Layered foliage canopy\n        foliage();\n        \n        // Base platform for stability\n        base();\n    }\n}\n\n// Tree trunk - 2mm walls, hollow for printing\nmodule trunk() {\n    difference() {\n        // Outer trunk - tapered cylinder\n        cylinder(h = 80, d1 = 25, d2 = 20, center = false);\n        \n        // Inner hollow - tapered cylinder\n        translate([0, 0, 2])\n            cylinder(h = 78, d1 = 21, d2 = 16, center = false);\n    }\n}\n\n// Main branches - 4 symmetrical branches\nmodule branches() {\n    // Branch parameters\n    branch_length = 35;\n    branch_diameter = 8;\n    \n    // Generate 4 branches at 90 degree intervals\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 12, 45])\n                rotate([30, 0, 0])\n                    branch(branch_length, branch_diameter);\n    }\n}\n\n// Individual branch module\nmodule branch(length, diameter) {\n    difference() {\n        // Outer branch\n        cylinder(h = length, d = diameter, center = false);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h = length - 2, d = diameter - 4, center = false);\n    }\n}\n\n// Foliage canopy - multiple overlapping spheres for realistic look\nmodule foliage() {\n    // Base foliage layer\n    translate([0, 0, 75])\n        sphere(d = 70);\n    \n    // Upper foliage layers for depth\n    translate([0, 0, 85])\n        sphere(d = 60);\n    \n    translate([0, 0, 95])\n        sphere(d = 50);\n    \n    translate([0, 0, 105])\n        sphere(d = 40);\n    \n    // Small foliage clusters at branch ends\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 30, 65])\n                sphere(d = 20);\n    }\n}\n\n// Sturdy base for toy stability\nmodule base() {\n    difference() {\n        // Solid base\n        cylinder(h = 8, d = 40, center = false);\n        \n        // Hollow bottom for material savings\n        translate([0, 0, 2])\n            cylinder(h = 6, d = 36, center = false);\n    }\n    \n    // Decorative ring detail\n    translate([0, 0, 8])\n        cylinder(h = 2, d = 42, center = false);\n}\n\n// Generate the tree\ntoy_tree();",
    "renders": true
  },
  {
    "toy": "leaf",
    "openscad_code": "// Realistic leaf toy – medium complexity\n// Overall size ≈ 110 mm long × 65 mm wide × 12 mm thick\n// 2 mm wall thickness everywhere for 3-D printing\n\n$fn = 32;\n\nmodule leaf_profile() {\n    // Main leaf blade outline (top view)\n    linear_extrude(height = 5) {\n        difference() {\n            scale([1, 0.6, 1])\n                circle(d = 100, $fn = 128);\n            for (i = [-8:1:8])\n                translate([45 - abs(i)*6, 0])\n                    rotate([0, 0, i*4])\n                        circle(d = 18, $fn = 16);\n        }\n    }\n}\n\nmodule stem() {\n    // 3-D printable cylinder-based stem\n    translate([0, -54, -3])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 12, d2 = 8);\n}\n\nmodule midrib() {\n    // Raised central vein\n    translate([0, -50, 5])\n        rotate([0, 0, 0])\n            scale([1, 0.15, 0.6])\n                cube([100, 5, 2], center = true);\n}\n\nmodule side_veins(count = 12) {\n    // Pairs of side veins\n    for (i = [1:1:count]) {\n        y = 35 - i*6;\n        ang = 25 + i*1.5;\n        len = 30 - i*1.2;\n        // Left vein\n        translate([0, y, 5.5])\n            rotate([0, 0, -ang])\n                scale([len/50, 0.05, 0.6])\n                    cube([50, 5, 2], center = true);\n        // Right vein\n        translate([0, y, 5.5])\n            rotate([0, 0, ang])\n                scale([len/50, 0.05, 0.6])\n                    cube([50, 5, 2], center = true);\n    }\n}\n\nmodule serrations() {\n    // Small saw-teeth along edge\n    for (a = [0:15:359]) {\n        translate([50*cos(a), 30*sin(a), 5])\n            rotate([0, 0, a + 90])\n                cube([2, 3, 2]);\n    }\n}\n\nmodule handle_hole() {\n    // Kid-friendly finger hole for carrying\n    translate([0, 0, 6])\n        rotate([0, 0, 0])\n            cylinder(h = 12, d = 22, $fn = 32);\n}\n\nmodule toy_leaf() {\n    union() {\n        // Main body\n        leaf_profile();\n        // Add thickness\n        translate([0, 0, 7])\n            scale([0.96, 0.95, 1])\n                leaf_profile();\n\n        // Structural details\n        midrib();\n        side_veins();\n        serrations();\n        stem();\n    }\n    difference() {\n        // Cut handle hole\n        toy_leaf();\n        handle_hole();\n    }\n}\n\ntoy_leaf();",
    "renders": true
  },
  {
    "toy": "rock",
    "openscad_code": "// Realistic Rock Toy - Medium Complexity\n// 3D printable rock with toy-like joints and details\n\nmodule rock_base() {\n    // Main rock body - irregular shape built from spheres and cubes\n    union() {\n        // Central mass\n        translate([0, 0, 15]) \n            scale([1, 1.2, 0.8])\n            sphere(r=25, $fn=30);\n        \n        // Side protrusions\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n            translate([18, 0, 10])\n                scale([0.7, 0.9, 0.6])\n                sphere(r=15, $fn=20);\n        }\n        \n        // Top ridge\n        translate([0, -5, 30])\n            scale([1.3, 0.8, 0.4])\n            sphere(r=20, $fn=25);\n    }\n}\n\nmodule rock_features() {\n    // Cavity details and surface texture\n    difference() {\n        rock_base();\n        \n        // Large cavity for toy storage\n        translate([0, 0, 10])\n            scale([0.6, 0.7, 0.5])\n            sphere(r=20, $fn=30);\n        \n        // Surface indentations for grip\n        for(i = [45:90:315]) {\n            rotate([0, 0, i])\n            translate([20, 0, 20])\n                scale([0.3, 0.4, 0.2])\n                sphere(r=8, $fn=15);\n        }\n        \n        // Bottom cavity for joint connection\n        translate([0, 0, -5])\n            cylinder(h=10, r=8, $fn=20);\n    }\n}\n\nmodule joint_system() {\n    // Toy joint connector at bottom\n    translate([0, 0, 0])\n    union() {\n        // Main joint ball\n        sphere(r=7, $fn=20);\n        \n        // Reinforcement ring\n        translate([0, 0, -2])\n            cylinder(h=4, r=9, $fn=20);\n        \n        // Stability fins\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n            translate([5, 0, -5])\n                cube([10, 2, 10], center=true);\n        }\n    }\n}\n\nmodule rock_texture() {\n    // Surface details for realistic appearance\n    union() {\n        // Small bumps and ridges\n        for(pos = [[-15, 10, 25], [15, -10, 20], [-10, -15, 15], [20, 5, 18]]) {\n            translate(pos)\n                scale([0.8, 1.2, 0.6])\n                sphere(r=3, $fn=12);\n        }\n        \n        // Edge ridges\n        rotate([0, 0, 30])\n        translate([22, 8, 22])\n            scale([0.2, 3, 0.2])\n            cylinder(h=15, r=2, $fn=8);\n            \n        rotate([0, 0, -45])\n        translate([18, -12, 19])\n            scale([0.2, 2.5, 0.2])\n            cylinder(h=12, r=2, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Rock body with features\n    rock_features();\n    \n    // Joint system for toy compatibility\n    joint_system();\n    \n    // Surface texture details\n    rock_texture();\n}",
    "renders": true
  },
  {
    "toy": "gem",
    "openscad_code": "// Toy Gem Construction Set Piece\n// Realistic style gem toy with peg connectors for building structures\n\n// Parameters\ngem_size = 30;              // Main gem size\npeg_diameter = 8;           // Connector peg diameter\npeg_length = 10;            // Connector peg length\nwall_thickness = 2;         // Wall thickness for 3D printing\nfacet_depth = 8;            // Depth of gem facets\nedge_radius = 1.5;          // Rounded edges for safety\n\n// Main module\nmodule gem_toy() {\n    // Main gem body with hollow center\n    difference() {\n        // Outer gem shape\n        gem_facets();\n        \n        // Hollow center\n        translate([0, 0, -wall_thickness/2])\n            cube([gem_size-wall_thickness*2, gem_size-wall_thickness*2, gem_size+wall_thickness], center=true);\n    }\n    \n    // Add connector pegs on each face\n    connector_pegs();\n    \n    // Add safety rounding to sharp edges\n    safety_rounding();\n}\n\n// Create the faceted gem shape\nmodule gem_facets() {\n    // Base octagonal prism\n    cylinder(h=gem_size, r=gem_size/2, $fn=8, center=true);\n    \n    // Add top pyramid facets\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([0, 0, gem_size/2])\n                linear_extrude(height=facet_depth, scale=0.3, center=false)\n                    square([gem_size/2, gem_size/2], center=true);\n    }\n    \n    // Add bottom pyramid facets\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([0, 0, -gem_size/2])\n                rotate([180, 0, 0])\n                    linear_extrude(height=facet_depth, scale=0.3, center=false)\n                        square([gem_size/2, gem_size/2], center=true);\n    }\n}\n\n// Create connector pegs on each face\nmodule connector_pegs() {\n    // Top peg\n    translate([0, 0, gem_size/2 + facet_depth + peg_length/2])\n        cylinder(h=peg_length, r=peg_diameter/2, $fn=20);\n    \n    // Bottom peg\n    translate([0, 0, -gem_size/2 - facet_depth - peg_length/2])\n        cylinder(h=peg_length, r=peg_diameter/2, $fn=20);\n    \n    // Side pegs (4 sides)\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([gem_size/2 + peg_length/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=peg_length, r=peg_diameter/2, $fn=20);\n    }\n}\n\n// Add safety rounding to edges\nmodule safety_rounding() {\n    // Round top edges\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([gem_size/2 - edge_radius, 0, gem_size/2])\n                rotate([90, 0, 0])\n                    cylinder(h=edge_radius*2, r=edge_radius, $fn=20);\n    }\n    \n    // Round bottom edges\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([gem_size/2 - edge_radius, 0, -gem_size/2])\n                rotate([90, 0, 0])\n                    cylinder(h=edge_radius*2, r=edge_radius, $fn=20);\n    }\n    \n    // Round vertical edges\n    for(i=[0:7]) {\n        rotate([0, 0, i*45 + 22.5])\n            translate([gem_size/2 - edge_radius, 0, 0])\n                cylinder(h=gem_size + facet_depth*2, r=edge_radius, center=true, $fn=20);\n    }\n}\n\n// Create the final model\ngem_toy();",
    "renders": true
  },
  {
    "toy": "crystal",
    "openscad_code": "// Crystal Toy - Realistic Medium Complexity\n// 3D Printable crystal with toy-style structural elements\n// Overall size: ~100mm height, ~80mm width\n\n$fn = 50;  // Smooth curves for printing\nwall = 2;  // Standard 2mm wall thickness\n\nmodule crystal_core() {\n    // Main crystal body - hexagonal prism with tapered top\n    difference() {\n        // Hexagonal prism base\n        cylinder(h=60, r1=25, r2=30, $fn=6);\n        // Hollow interior\n        translate([0,0,wall]) cylinder(h=60-wall, r1=25-wall, r2=30-wall, $fn=6);\n    }\n    \n    // Crystal top point\n    translate([0,0,60]) difference() {\n        cylinder(h=40, r1=30, r2=0, $fn=6);\n        // Hollow top point\n        translate([0,0,wall]) cylinder(h=40-wall, r1=30-wall, r2=0, $fn=6);\n    }\n}\n\nmodule crystal_facets() {\n    // Add realistic crystal facets using rotated planes\n    for(i=[0:60:359]) {\n        rotate([0,0,i]) translate([25,0,30]) rotate([0,45,0]) \n        cube([1,50,60], center=true);\n    }\n}\n\nmodule toy_base() {\n    // Toy-style circular base with grip rings\n    difference() {\n        cylinder(h=10, r=35);\n        cylinder(h=10, r=30);\n    }\n    \n    // Grip rings for toy functionality\n    for(h=[2,6,8]) {\n        translate([0,0,h]) difference() {\n            cylinder(h=1, r=35);\n            cylinder(h=1, r=32);\n        }\n    }\n}\n\nmodule structural_supports() {\n    // Internal support beams for 3D printing\n    for(angle=[0:120:359]) {\n        rotate([0,0,angle]) translate([15,0,30]) cube([30,wall,60], center=true);\n    }\n}\n\nmodule decorative_elements() {\n    // Toy-style crystal growth rings\n    for(h=[10:10:50]) {\n        translate([0,0,h]) difference() {\n            cylinder(h=2, r=26+h/5);\n            cylinder(h=2, r=24+h/5);\n        }\n    }\n    \n    // Top toy gem cap\n    translate([0,0,95]) {\n        sphere(r=5);\n        translate([0,0,5]) cylinder(h=3, r=3);\n    }\n}\n\nunion() {\n    // Assemble all parts\n    toy_base();\n    translate([0,0,10]) {\n        crystal_core();\n        structural_supports();\n        decorative_elements();\n    }\n}",
    "renders": true
  },
  {
    "toy": "marble",
    "openscad_code": "// Toy Rocking Horse (realistic style, medium complexity)\n// Overall dimensions: ~120mm long x ~70mm high x ~40mm wide\n// Thoroughly designed for 3D printing with 2mm walls and no steep overhangs\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Core body shape\n        hull() {\n            translate([0, 0, 20]) sphere(d = 40);\n            translate([0, 0, 35]) sphere(d = 30);\n            translate([0, 0, 10]) sphere(d = 35);\n        }\n        \n        // Carve out seating area\n        translate([0, 0, 30])\n            scale([1.2, 0.8, 0.6])\n            sphere(d = 30);\n        \n        // Remove bottom for wall thickness\n        translate([0, 0, -5]) cube([100, 100, 10], center = true);\n    }\n}\n\n// Head with 2mm wall\nmodule head() {\n    difference() {\n        // Head sphere\n        translate([25, 0, 45]) sphere(d = 28);\n        \n        // Hollow out\n        translate([25, 0, 45]) sphere(d = 24);\n    }\n}\n\n// Snout\nmodule snout() {\n    difference() {\n        translate([35, 0, 42]) rotate([0, -10, 0])\n            scale([1.2, 1, 1])\n            sphere(d = 12);\n        \n        translate([35, 0, 42]) rotate([0, -10, 0])\n            scale([1, 0.8, 0.8])\n            sphere(d = 8);\n    }\n}\n\n// Ears\nmodule ears() {\n    for(side = [-1, 1]) {\n        // Left/Right ear\n        translate([20, 12 * side, 55]) rotate([0, 0, 30 * side])\n            cylinder(h = 12, d1 = 8, d2 = 4, center = true);\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([15, 15 * side, 15]) rotate([0, 0, 10 * side])\n            cylinder(h = 25, d = 8, center = true);\n        \n        // Rear legs\n        translate([-15, 15 * side, 15]) rotate([0, 0, -10 * side])\n            cylinder(h = 25, d = 8, center = true);\n    }\n}\n\n// Rockers\nmodule rockers() {\n    difference() {\n        // Outer rocker\n        hull() {\n            translate([-40, 0, 5]) sphere(d = 8);\n            translate([40, 0, 5]) sphere(d = 8);\n            translate([0, 0, 0]) sphere(d = 8);\n        }\n        \n        // Inner hollow\n        hull() {\n            translate([-38, 0, 5]) sphere(d = 4);\n            translate([38, 0, 5]) sphere(d = 4);\n            translate([0, 0, 2]) sphere(d = 4);\n        }\n    }\n    \n    // Mirror for second rocker\n    translate([0, 0, 30]) mirror([0, 1, 0]) children();\n}\n\n// Tail\nmodule tail() {\n    translate([-30, 0, 35]) rotate([0, 90, 0])\n        cylinder(h = 15, d1 = 6, d2 = 4);\n}\n\n// Mane\nmodule mane() {\n    for(i = [-2:2]) {\n        translate([25, i * 4, 55 - abs(i) * 2])\n            rotate([90 - abs(i) * 10, 0, 0])\n            cylinder(h = 8, d = 4);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([32, 6 * side, 48]) sphere(d = 3);\n    }\n}\n\n// Assembly\nrockers() {\n    body();\n    head();\n    snout();\n    ears();\n    legs();\n    tail();\n    mane();\n    eyes();\n}",
    "renders": true
  },
  {
    "toy": "stone",
    "openscad_code": "// Stone Toy - Rocking Horse\n// Realistic medium-complexity stone toy with toy characteristics\n\n$fn = 32;\n\nmodule stone_texture() {\n    // Random stone-like surface texture\n    for (i = [0:10]) {\n        translate([rand(0,50)-25, rand(0,50)-25, rand(0,5)])\n            sphere(d=rand(2,5));\n    }\n}\n\nmodule rock_horse_body() {\n    // Main body carved from stone-like shape\n    difference() {\n        // Base stone block\n        scale([1.2, 0.8, 1])\n            sphere(d=80);\n        \n        // Carved hollow for seating\n        translate([0, 0, -10])\n            scale([0.7, 0.6, 0.8])\n                sphere(d=60);\n        \n        // Stone texture details\n        intersection() {\n            stone_texture();\n            sphere(d=80);\n        }\n    }\n}\n\nmodule horse_head() {\n    // Stylized horse head on front\n    translate([35, 0, 15])\n        rotate([0, -20, 0])\n            difference() {\n                // Head shape\n                scale([1.5, 1, 1])\n                    sphere(d=25);\n                \n                // Ears\n                translate([-5, 8, 15])\n                    rotate([0, -20, 0])\n                        cylinder(h=15, d1=8, d2=5);\n                translate([-5, -8, 15])\n                    rotate([0, 20, 0])\n                        cylinder(h=15, d1=8, d2=5);\n                \n                // Eyes\n                translate([5, 6, 10])\n                    sphere(d=4);\n                translate([5, -6, 10])\n                    sphere(d=4);\n                \n                // Mane ridge\n                translate([-10, 0, 15])\n                    rotate([90, 0, 0])\n                        cylinder(h=20, d=3);\n            }\n}\n\nmodule rocking_base() {\n    // Rocking curved base\n    difference() {\n        // Main curved rockers\n        union() {\n            translate([20, 20, -30])\n                rotate([0, 90, 0])\n                    cylinder(h=40, r1=30, r2=25);\n            translate([20, -20, -30])\n                rotate([0, 90, 0])\n                    cylinder(h=40, r1=30, r2=25);\n        }\n        \n        // Center cutout for weight reduction\n        translate([20, 0, -30])\n            cube([50, 30, 30], center=true);\n    }\n}\n\nmodule handles() {\n    // Toy handles on sides\n    for(side = [-1, 1]) {\n        translate([15, 25*side, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=8);\n        translate([15, 25*side, 15])\n            sphere(d=10);\n    }\n}\n\nmodule tail() {\n    // Stone tail at back\n    translate([-35, 0, 10])\n        rotate([0, 20, 0])\n            scale([0.5, 1, 0.5])\n                cylinder(h=25, d1=12, d2=8);\n}\n\n// Main assembly\nunion() {\n    // Rocking base\n    rocking_base();\n    \n    // Body\n    translate([0, 0, -15])\n        rock_horse_body();\n    \n    // Head\n    horse_head();\n    \n    // Tail\n    tail();\n    \n    // Handles\n    handles();\n    \n    // Reinforcement struts\n    translate([10, 20, -15])\n        cube([20, 2, 25]);\n    translate([10, -20, -15])\n        cube([20, 2, 25]);\n}",
    "renders": true
  },
  {
    "toy": "shell",
    "openscad_code": "// Parameters\n$fn = 50;\nwall = 2;               // wall thickness for printability\nscaleFactor = 1.0;      // overall scale\n\n// Main dimensions (mm)\nshellHeight = 60;\nshellWidth = 90;\nshellDepth = 70;\nlipHeight = 8;\nlipThickness = 4;\nridgeCount = 7;\nridgeHeight = 3;\nhingePinRadius = 2.5;\nhingeLength = 10;\nsnapRadius = 2;\nsnapDepth = 4;\n\n// Create the main shell body\nmodule shellBody() {\n    difference() {\n        // Outer rounded shell\n        scale([1, 0.8, 1])\n        minkowski() {\n            scale([shellWidth/2, shellDepth/2, shellHeight/2])\n            sphere(1);\n            sphere(wall);\n        }\n        \n        // Hollow inside\n        translate([0, 0, wall*1.5])\n        scale([1, 0.75, 0.9])\n        scale([shellWidth/2 - wall*1.5, shellDepth/2 - wall*1.5, shellHeight/2 - wall*1.5])\n        sphere(1);\n        \n        // Flatten the bottom\n        translate([0, -shellDepth/2, -shellHeight])\n        cube([shellWidth*2, shellDepth*2, shellHeight*2], center=true);\n    }\n}\n\n// Add ridges for realism\nmodule ridges() {\n    for(i=[1:ridgeCount]) {\n        rotate([90, 0, 0])\n        translate([0, 0, shellHeight/2 - i*(shellHeight/(ridgeCount+2))])\n        scale([1, 0.8, 1])\n        difference() {\n            cylinder(h=ridgeHeight*2, r1=shellWidth/2 - wall, r2=shellWidth/2 - wall*2);\n            cylinder(h=ridgeHeight*2 + 0.1, r1=shellWidth/2 - wall - 0.5, r2=shellWidth/2 - wall*2 - 0.5);\n        }\n    }\n}\n\n// Create the shell lip\nmodule shellLip() {\n    translate([0, 0, shellHeight/2 + lipHeight/2])\n    difference() {\n        scale([1, 0.8, 1])\n        cylinder(h=lipHeight, r1=shellWidth/2 + lipThickness, r2=shellWidth/2 + lipThickness*0.8);\n        scale([1, 0.8, 1])\n        cylinder(h=lipHeight + 0.1, r1=shellWidth/2, r2=shellWidth/2*0.8);\n    }\n}\n\n// Hinge for opening shell\nmodule hinge(isTop=true) {\n    translate([0, shellDepth*0.3, isTop ? shellHeight/2 - hingeLength/2 : -shellHeight/2 + hingeLength/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=hingeLength, r=hingePinRadius + wall);\n        cylinder(h=hingeLength + 0.1, r=hingePinRadius);\n    }\n}\n\n// Snap closure\nmodule snapClosure(isTop=true) {\n    translate([0, -shellDepth*0.3, isTop ? shellHeight/2 - snapDepth : -shellHeight/2 + snapDepth])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=snapDepth, r=snapRadius + wall);\n        cylinder(h=snapDepth + 0.1, r=snapRadius);\n    }\n}\n\n// Shell texture pattern\nmodule texture() {\n    for(i=[0:360/ridgeCount:359]) {\n        rotate([0, 0, i])\n        translate([shellWidth/2 - wall*2, 0, shellHeight/4])\n        rotate([90, 0, 0])\n        cylinder(h=wall, r1=1, r2=0.5);\n    }\n}\n\n// Assemble the top shell\nmodule topShell() {\n    union() {\n        shellBody();\n        ridges();\n        shellLip();\n        hinge(true);\n        snapClosure(true);\n        texture();\n    }\n}\n\n// Assemble the bottom shell (mirrored)\nmodule bottomShell() {\n    mirror([0, 0, 1])\n    union() {\n        shellBody();\n        ridges();\n        shellLip();\n        hinge(false);\n        snapClosure(false);\n        texture();\n    }\n}\n\n// Scale the entire model\nscale(scaleFactor)\nunion() {\n    topShell();\n    bottomShell();\n}",
    "renders": true
  },
  {
    "toy": "star",
    "openscad_code": "// Realistic Star Toy - Medium Complexity\n// A 3D printable star toy with rounded edges and structural elements\n\n$fn = 32;  // Smooth curves for realism\n\n// Main parameters\nstar_size = 80;  // Overall size in mm\nthickness = 8;   // Wall thickness for 3D printing\nedge_radius = 3; // Rounded edges for safety\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges\n    hull() {\n        for (dx = [radius, size.x - radius])\n            for (dy = [radius, size.y - radius])\n                for (dz = [radius, size.z - radius])\n                    translate([dx, dy, dz])\n                        sphere(r = radius);\n    }\n}\n\nmodule star_point(length, width, height) {\n    // Create one point of the star with realistic proportions\n    difference() {\n        // Main point body\n        hull() {\n            cube([width, length * 0.8, height], center = true);\n            translate([0, length * 0.5, 0])\n                cube([width * 0.7, width * 0.7, height], center = true);\n        }\n        \n        // Rounded tip\n        translate([0, length * 0.6, 0])\n            rotate([90, 0, 0])\n                cylinder(h = width * 0.5, r1 = width * 0.35, r2 = 0);\n    }\n}\n\nmodule star_body() {\n    // Create the central star body with realistic thickness\n    union() {\n        // Central disc\n        cylinder(h = thickness, r = star_size * 0.35, center = true);\n        \n        // Five star points\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([0, star_size * 0.35, 0])\n                    star_point(star_size * 0.4, star_size * 0.15, thickness);\n        }\n    }\n}\n\nmodule toy_features() {\n    // Add realistic toy elements\n    // Center button\n    translate([0, 0, thickness/2 + 1])\n        cylinder(h = 3, r = star_size * 0.15, center = false);\n    \n    // Decorative rings around points\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72 + 36])\n            translate([0, star_size * 0.6, thickness/2 + 0.5])\n                difference() {\n                    cylinder(h = 2, r = star_size * 0.08, center = false);\n                    cylinder(h = 3, r = star_size * 0.06, center = false);\n                }\n    }\n    \n    // Structural ribs on back\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, star_size * 0.2, -thickness/2 - 1])\n                cube([star_size * 0.1, star_size * 0.3, 2], center = true);\n    }\n}\n\nmodule safety_edges() {\n    // Add fillets to all edges for safety\n    // Top edge fillet\n    translate([0, 0, thickness/2])\n        cylinder(h = 0.1, r = star_size * 0.35 + edge_radius, center = true);\n    \n    // Bottom edge fillet\n    translate([0, 0, -thickness/2])\n        cylinder(h = 0.1, r = star_size * 0.35 + edge_radius, center = true);\n}\n\n// Main assembly\nunion() {\n    // Main star body\n    star_body();\n    \n    // Toy features\n    toy_features();\n    \n    // Safety edges (visual representation)\n    safety_edges();\n}\n\n// Print orientation marker\ntranslate([star_size * 0.7, 0, -thickness/2 - 2])\n    cube([5, 5, 2]);",
    "renders": true
  },
  {
    "toy": "moon",
    "openscad_code": "// Realistic Moon Toy\n// Medium complexity model with craters and toy-like features\n\n// Main parameters\nmoon_radius = 35;\nwall_thickness = 2;\ncrater_depth = 4;\n\n// Toy moon base\nmodule moon_body() {\n    difference() {\n        // Main sphere\n        sphere(r = moon_radius, $fn = 64);\n        \n        // Hollow center for weight reduction\n        sphere(r = moon_radius - wall_thickness, $fn = 64);\n        \n        // Bottom flat for stability\n        translate([0, 0, -moon_radius])\n            cube([moon_radius*2, moon_radius*2, wall_thickness], center = true);\n    }\n}\n\n// Crater module\nmodule crater(radius, depth, x, y, z) {\n    translate([x, y, z]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(r = radius, h = depth + 1, $fn = 32);\n                translate([0, 0, 1])\n                    cylinder(r = radius * 0.8, h = depth + 1, $fn = 32);\n            }\n        }\n    }\n}\n\n// Generate multiple craters\nmodule surface_craters() {\n    // Large craters\n    crater(8, crater_depth, 15, 10, 0);\n    crater(6, crater_depth * 0.8, -12, -15, 5);\n    crater(10, crater_depth * 1.2, 0, -20, -10);\n    \n    // Medium craters\n    for(i = [0:5]) {\n        angle = i * 60;\n        radius = 3 + (i % 3) * 2;\n        crater(radius, crater_depth * 0.6, \n               cos(angle) * 25, \n               sin(angle) * 25, \n               -moon_radius * 0.3);\n    }\n    \n    // Small craters\n    for(i = [0:12]) {\n        angle = i * 30;\n        radius = 1 + (i % 2);\n        crater(radius, crater_depth * 0.4, \n               cos(angle) * 30, \n               sin(angle) * 30, \n               -moon_radius * 0.5);\n    }\n}\n\n// Toy eye socket\nmodule eye_socket(x, y, z) {\n    translate([x, y, z]) {\n        difference() {\n            sphere(r = 5, $fn = 32);\n            sphere(r = 4, $fn = 32);\n        }\n    }\n}\n\n// Toy smile\nmodule smile() {\n    translate([0, -15, -moon_radius * 0.7]) {\n        rotate([0, 0, 180]) {\n            linear_extrude(height = wall_thickness) {\n                offset(r = 1) {\n                    difference() {\n                        circle(r = 12, $fn = 32);\n                        translate([0, -8, 0])\n                            square([20, 16], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Mounting hole for toy stand\nmodule stand_mount() {\n    translate([0, 0, -moon_radius + wall_thickness])\n        cylinder(r = 3, h = wall_thickness * 2, $fn = 16);\n}\n\n// Assemble the moon toy\nunion() {\n    // Main moon body\n    moon_body();\n    \n    // Surface features\n    surface_craters();\n    \n    // Toy face features\n    eye_socket(-10, 10, -moon_radius * 0.7);\n    eye_socket(10, 10, -moon_radius * 0.7);\n    smile();\n    \n    // Stand mount\n    stand_mount();\n}",
    "renders": true
  },
  {
    "toy": "sun",
    "openscad_code": "// Sun toy - realistic style, medium complexity\n// Approx 80mm diameter, 25mm thick, 3D printable with 2mm walls\n\nmodule sun_face() {\n    // Central disc with slight dome\n    difference() {\n        // Main disc body\n        cylinder(h = 6, d = 42, $fn = 64);\n        \n        // Face cutouts - eyes\n        translate([-10, 8, 5.5]) sphere(d = 6, $fn = 32);\n        translate([10, 8, 5.5]) sphere(d = 6, $fn = 32);\n        \n        // Smile\n        translate([0, -5, 5.5]) rotate([0, 0, 0]) cylinder(h = 2, d = 16, $fn = 64);\n        translate([0, -9, 5.5]) cube([20, 8, 2], center = true);\n    }\n    \n    // Raised dome center\n    translate([0, 0, 6]) cylinder(h = 4, d1 = 42, d2 = 38, $fn = 64);\n}\n\nmodule sun_rays() {\n    // 12 rays around the sun\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([25, 0, 0]) {\n                // Main ray body - tapered cylinder\n                cylinder(h = 20, d1 = 8, d2 = 4, $fn = 32);\n                \n                // Ray tip sphere\n                translate([0, 0, 20]) sphere(d = 5, $fn = 16);\n                \n                // Structural webbing between rays for strength\n                if(i % 2 == 0) {\n                    rotate([0, 0, 15]) {\n                        translate([15, 0, 0]) cube([10, 2, 4], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule back_support() {\n    // Flat back disk for stability\n    cylinder(h = 2, d = 80, $fn = 128);\n    \n    // Concentric reinforcement rings\n    for(r = [15:15:35]) {\n        difference() {\n            cylinder(h = 2, d = r * 2 + 4, $fn = 64);\n            cylinder(h = 2, d = r * 2, $fn = 64);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Back support\n    back_support();\n    \n    // Main sun body\n    translate([0, 0, 2]) {\n        difference() {\n            union() {\n                sun_face();\n                sun_rays();\n            }\n            \n            // Central hole for toy axle/connection\n            cylinder(h = 30, d = 6, $fn = 32);\n        }\n    }\n    \n    // Small alignment pegs for toy mounting\n    translate([0, 0, -1]) {\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle]) {\n                translate([20, 0, 0]) cylinder(h = 2, d = 4, $fn = 16);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "cloud",
    "openscad_code": "// Realistic cloud toy with structural elements\n// Overall size ~80mm wide x 60mm deep x 50mm tall\n\n$fn = 36;\n\n// Main cloud body - hollow for 3D printing\nmodule cloud_body() {\n    difference() {\n        // Outer fluffy cloud shape\n        union() {\n            // Central mass\n            translate([0, 0, 25]) sphere(d=40);\n            \n            // Left puffs\n            translate([-25, -10, 28]) sphere(d=25);\n            translate([-30, 10, 20]) sphere(d=20);\n            \n            // Right puffs\n            translate([25, -10, 28]) sphere(d=25);\n            translate([30, 10, 20]) sphere(d=20);\n            \n            // Front puff\n            translate([0, -25, 25]) sphere(d=22);\n            \n            // Rear puff\n            translate([0, 25, 25]) sphere(d=22);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 25]) sphere(d=36);\n    }\n}\n\n// Connection joint for stacking\nmodule joint(type = \"male\") {\n    if (type == \"male\") {\n        // Male connector on bottom\n        translate([0, 0, 2]) \n            cylinder(h=8, d1=12, d2=8);\n    } else {\n        // Female socket on top\n        translate([0, 0, 48])\n            cylinder(h=6, d1=8, d2=12, $fn=32);\n    }\n}\n\n// Decorative raindrops\nmodule raindrops() {\n    for (i = [-1:1]) {\n        translate([i*15, 0, 0]) {\n            // Droplet shape\n            scale([1, 1, 1.5])\n                rotate([0, 180, 0])\n                    cylinder(h=8, d1=4, d2=0);\n        }\n    }\n}\n\n// Face details for toy character\nmodule cloud_face() {\n    // Eyes\n    translate([-8, -15, 35]) sphere(d=4);\n    translate([8, -15, 35]) sphere(d=4);\n    \n    // Eye highlights\n    translate([-7, -16, 37]) sphere(d=1.5);\n    translate([9, -16, 37]) sphere(d=1.5);\n    \n    // Smile\n    translate([0, -8, 32])\n        rotate([0, 180, 0])\n            cylinder(h=2, d1=12, d2=0);\n}\n\n// Structural support ribs inside\nmodule support_ribs() {\n    for (a = [0:60:300]) {\n        rotate([0, 0, a])\n            translate([0, 0, 20])\n                cube([2, 25, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main cloud body\n    cloud_body();\n    \n    // Structural supports\n    support_ribs();\n    \n    // Connection joints for modular play\n    joint(\"male\");\n    joint(\"female\");\n    \n    // Detachable raindrops\n    translate([0, 0, -10])\n        raindrops();\n    \n    // Friendly face details\n    cloud_face();\n}",
    "renders": true
  },
  {
    "toy": "rainbow",
    "openscad_code": "// Rainbow Toy Arch Set\n// A stackable, 3D-printable rainbow with toy-like proportions and peg connections\n\n// Parameters\n$fn = 32;\narch_thickness = 2.5;  // Wall thickness for 3D printing\narch_height = 8;       // Height of each arch band\narch_gap = 3;          // Gap between arches\nbase_width = 90;       // Overall base width\nbase_depth = 45;       // Base depth for stability\npeg_diameter = 4.5;    // Connection peg size\npeg_height = 6;        // Peg protrusion height\nnum_arches = 7;        // Standard rainbow colors\n\n// Rainbow color sequence\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"];\n\n// Main module\nmodule rainbow_toy() {\n    // Base platform with pegs\n    difference() {\n        // Base\n        translate([0, 0, -3])\n            cube([base_width + 10, base_depth + 10, 6], center=true);\n        \n        // Recessed center for stacking\n        translate([0, 0, 0])\n            cube([base_width - 10, base_depth - 10, 3], center=true);\n    }\n    \n    // Add pegs on top for connecting arches\n    for(i = [-1, 1]) {\n        translate([i * (base_width/4), 0, 3])\n            cylinder(h=peg_height, d=peg_diameter);\n        translate([i * (base_width/3), 0, 3])\n            cylinder(h=peg_height, d=peg_diameter);\n    }\n    \n    // Generate rainbow arches\n    for(i = [0:num_arches-1]) {\n        color(colors[i])\n        translate([0, 0, i * (arch_height + arch_gap)])\n            rainbow_arch(i);\n    }\n}\n\n// Single rainbow arch module\nmodule rainbow_arch(index) {\n    scale_factor = 1 - (index * 0.12);  // Each arch smaller by 12%\n    outer_radius = (base_width/2) * scale_factor;\n    inner_radius = outer_radius - arch_thickness;\n    \n    // Main arch body\n    difference() {\n        // Full arch ring\n        linear_extrude(height=arch_height)\n            difference() {\n                circle(r=outer_radius);\n                circle(r=inner_radius);\n            }\n        \n        // Cut bottom flat for stability\n        translate([0, -outer_radius - 1, -1])\n            cube([outer_radius * 2 + 2, outer_radius + 2, arch_height + 2], center=true);\n        \n        // Cut sides flat for toy-like appearance\n        translate([-outer_radius - 1, 0, -1])\n            cube([outer_radius * 2 + 2, base_depth/2, arch_height + 2], center=true);\n    }\n    \n    // Add peg holes on bottom for stacking\n    for(i = [-1, 1]) {\n        translate([i * (base_width/4) * scale_factor, 0, -1])\n            cylinder(h=peg_height + 2, d=peg_diameter + 0.5);\n        translate([i * (base_width/3) * scale_factor, 0, -1])\n            cylinder(h=peg_height + 2, d=peg_diameter + 0.5);\n    }\n    \n    // Decorative rounded edges\n    translate([0, 0, arch_height])\n        linear_extrude(height=1.5)\n            difference() {\n                circle(r=outer_radius);\n                circle(r=inner_radius);\n                translate([0, -outer_radius - 1, 0])\n                    square([outer_radius * 2 + 2, outer_radius + 1], center=true);\n            }\n}\n\n// Generate the toy\nrainbow_toy();",
    "renders": true
  },
  {
    "toy": "snow",
    "openscad_code": "// Toy Snow Shovel - Realistic Style\n// Overall dimensions: ~100mm height, 65mm width\n\nmodule handle() {\n    // Shovel handle - 8mm diameter, 80mm long\n    translate([0, 0, 40])\n        cylinder(h=80, d=8, $fn=16);\n    \n    // Handle grip - ergonomic shape\n    translate([0, 0, 80])\n        cylinder(h=15, d1=8, d2=12, $fn=16);\n    \n    // Grip end cap\n    translate([0, 0, 95])\n        sphere(d=12, $fn=16);\n}\n\nmodule shaft() {\n    // Shaft connecting handle to blade\n    translate([0, -30, 20])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=10, $fn=16);\n    \n    // Reinforcement ring at handle joint\n    translate([0, 0, 20])\n        cylinder(h=8, d=14, $fn=16);\n}\n\nmodule blade() {\n    // Main blade body - 60mm wide, 50mm tall\n    difference() {\n        // Blade shape with curved top\n        translate([0, -50, 0])\n            linear_extrude(height=2)\n                polygon(points=[\n                    [-30, 0],\n                    [30, 0],\n                    [25, 45],\n                    [-25, 45]\n                ]);\n        \n        // Scoop curve - creates realistic bowl shape\n        translate([0, -25, -1])\n            rotate([90, 0, 0])\n                cylinder(h=4, r1=35, r2=25, $fn=32);\n        \n        // Drain holes - toy detail\n        for(x = [-20:10:20]) {\n            translate([x, -25, 1])\n                cylinder(h=2, d=3, $fn=8);\n        }\n    }\n    \n    // Blade side walls - 2mm thick\n    difference() {\n        // Left wall\n        translate([-30, -50, 0])\n            cube([2, 50, 8]);\n        \n        // Left wall curve\n        translate([-30, -25, -1])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=8, $fn=16);\n    }\n    \n    difference() {\n        // Right wall\n        translate([28, -50, 0])\n            cube([2, 50, 8]);\n        \n        // Right wall curve\n        translate([30, -25, -1])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=8, $fn=16);\n    }\n    \n    // Blade ribs for strength\n    for(y = [-40:10:-10]) {\n        translate([0, y, 8])\n            cube([56, 2, 3]);\n    }\n    \n    // Connection plate to shaft\n    translate([0, -5, 8])\n        cube([10, 10, 6]);\n    \n    // Rivets detail\n    for(x = [-3:3:3]) {\n        for(z = [10:3:13]) {\n            translate([x, 0, z])\n                cylinder(h=0.5, d=2, $fn=8);\n        }\n    }\n}\n\nmodule footstep() {\n    // Top footstep for pushing into snow\n    difference() {\n        translate([0, -52, 8])\n            cube([50, 4, 4]);\n        \n        // Rounded edges\n        translate([0, -52, 8])\n            cylinder(h=4, r=2, $fn=16);\n        translate([0, -48, 8])\n            cylinder(h=4, r=2, $fn=16);\n    }\n}\n\n// Assemble the toy snow shovel\nunion() {\n    handle();\n    shaft();\n    blade();\n    footstep();\n}",
    "renders": true
  },
  {
    "toy": "ice",
    "openscad_code": "// Ice toy - realistic style ice cream truck\n// Overall dimensions: 120mm x 60mm x 70mm\n\n// Wall thickness\nwall = 2;\n\n// Main body\nmodule truck_body() {\n    // Base chassis\n    difference() {\n        cube([100, 50, 30], center=true);\n        translate([0, 0, 15])\n            cube([96, 46, 30], center=true);\n    }\n    \n    // Cabin section\n    translate([-35, 0, 15])\n    difference() {\n        cube([30, 45, 35], center=true);\n        translate([0, 0, 17.5])\n            cube([26, 41, 35], center=true);\n    }\n    \n    // Storage section\n    translate([25, 0, 15])\n    difference() {\n        cube([40, 45, 35], center=true);\n        translate([0, 0, 17.5])\n            cube([36, 41, 35], center=true);\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for(side = [-1, 1]) {\n        for(pos = [-30, 30]) {\n            translate([pos, side * 30, -15])\n            cylinder(h=6, r=10, center=true, $fn=20);\n            translate([pos, side * 30, -15])\n            cylinder(h=7, r=4, center=true, $fn=20);\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    // Front windshield\n    translate([-50, 0, 25])\n    cube([2, 35, 20], center=true);\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        translate([-35, side * 23, 25])\n        cube([25, 2, 20], center=true);\n    }\n}\n\n// Roof details\nmodule roof_details() {\n    // Cabin roof\n    translate([-35, 0, 35])\n    difference() {\n        cube([32, 48, 5], center=true);\n        translate([0, 0, 2.5])\n            cube([28, 44, 5], center=true);\n    }\n    \n    // Storage roof\n    translate([25, 0, 35])\n    difference() {\n        cube([42, 48, 5], center=true);\n        translate([0, 0, 2.5])\n            cube([38, 44, 5], center=true);\n    }\n    \n    // Ice cream cone holder\n    translate([25, 0, 40])\n    cylinder(h=3, r=15, center=true, $fn=6);\n}\n\n// Door handles\nmodule handles() {\n    for(side = [-1, 1]) {\n        translate([-50, side * 20, 15])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=2, center=true, $fn=8);\n    }\n}\n\n// Headlights\nmodule headlights() {\n    for(side = [-1, 1]) {\n        translate([-49.5, side * 15, 5])\n        sphere(r=4, $fn=12);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-20, 25, 32])\n    rotate([0, 90, 0])\n    cylinder(h=15, r=3, center=true, $fn=12);\n}\n\n// Assemble the complete ice cream truck\nunion() {\n    truck_body();\n    wheels();\n    windows();\n    roof_details();\n    handles();\n    headlights();\n    exhaust();\n}",
    "renders": true
  },
  {
    "toy": "fire",
    "openscad_code": "// Fire toy (campfire set) - Realistic medium-complexity model\n// Overall size: ~100mm diameter base, 70mm tall\n\n// Parameters\nbase_d = 100;           // Base diameter\nbase_h = 8;             // Base thickness\nlog_d = 12;             // Log diameter\nlog_h = 40;             // Log height\nflame_h = 25;           // Flame height\nwall = 2;               // Wall thickness for 3D printing\n$fn = 48;               // Smooth curves\n\n// Main assembly\nmodule fire_toy() {\n    // Stone base ring\n    difference() {\n        cylinder(d = base_d, h = base_h, center = true);\n        translate([0, 0, -1])\n            cylinder(d = base_d - wall*2, h = base_h + 2, center = true);\n    }\n    \n    // Logs (3 pieces arranged in teepee style)\n    for(i = [0:120:359]) {\n        rotate([0, 15, i])\n        translate([0, 0, base_h/2 + log_h/2 - 5])\n            log();\n    }\n    \n    // Flames (multiple small flames)\n    for(i = [0:60:359]) {\n        rotate([0, 0, i])\n        translate([0, 25, base_h/2 + log_h - 2])\n            flame();\n    }\n    \n    // Central larger flame\n    translate([0, 0, base_h/2 + log_h - 2])\n        scale([1.3, 1.3, 1.5])\n            flame();\n}\n\n// Log module - slightly tapered with bark texture\nmodule log() {\n    difference() {\n        // Main log body\n        cylinder(d1 = log_d, d2 = log_d*0.9, h = log_h, center = true);\n        \n        // Hollow center for printing\n        translate([0, 0, -1])\n            cylinder(d1 = log_d - wall*2, d2 = log_d*0.9 - wall*2, h = log_h + 2, center = true);\n        \n        // Bark texture - small notches\n        for(j = [0:30:359]) {\n            rotate([0, 0, j])\n            translate([log_d/2 - 1, 0, -log_h/2])\n                cube([2, 1, log_h], center = true);\n        }\n    }\n    \n    // Log ends - cut flat\n    translate([0, 0, log_h/2])\n        cube([log_d + 2, log_d + 2, 2], center = true);\n    translate([0, 0, -log_h/2])\n        cube([log_d + 2, log_d + 2, 2], center = true);\n}\n\n// Flame module - stylized fire shape\nmodule flame() {\n    union() {\n        // Main flame body\n        scale([1, 0.7, 1])\n        difference() {\n            // Outer flame\n            cylinder(d1 = 8, d2 = 0, h = flame_h, center = false);\n            \n            // Inner hollow\n            translate([0, 0, -1])\n                cylinder(d1 = 6, d2 = 0, h = flame_h + 2, center = false);\n        }\n        \n        // Side flickers\n        translate([-3, 2, 10])\n            rotate([0, 10, -20])\n            scale([0.5, 0.3, 0.8])\n                cylinder(d1 = 5, d2 = 0, h = flame_h*0.7, center = false);\n                \n        translate([3, -2, 12])\n            rotate([0, -10, 20])\n            scale([0.5, 0.3, 0.8])\n                cylinder(d1 = 5, d2 = 0, h = flame_h*0.7, center = false);\n    }\n}\n\n// Generate the toy\nfire_toy();",
    "renders": true
  },
  {
    "toy": "water",
    "openscad_code": "// Watering Can Toy - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm long x 60mm wide x 90mm high\n\nmodule handle() {\n    // Main handle grip - 8mm diameter\n    translate([0, 0, 75])\n        rotate([90, 0, 0])\n            cylinder(h=70, d=8, $fn=20);\n    \n    // Handle support arms - 6mm diameter\n    translate([0, -35, 40])\n        rotate([0, 0, 0])\n            cylinder(h=35, d=6, $fn=16);\n    \n    translate([0, 35, 40])\n        rotate([0, 0, 0])\n            cylinder(h=35, d=6, $fn=16);\n}\n\nmodule spout() {\n    // Main spout tube - tapered design\n    translate([-45, 0, 50])\n        rotate([0, -30, 0])\n            cylinder(h1=8, h2=5, h=40, $fn=16);\n    \n    // Spout support brace\n    translate([-25, 0, 25])\n        rotate([0, -30, 0])\n            cube([15, 8, 8], center=true);\n    \n    // Rose/sprinkler head\n    translate([-65, 0, 25])\n        rotate([0, -30, 0])\n            cylinder(h=10, d=20, $fn=32);\n    \n    // Rose holes - simplified as indentations\n    for(i = [0:5]) {\n        rotate([0, -30, i*60])\n            translate([-70, 0, 25])\n                cylinder(h=3, d=2, $fn=8);\n    }\n}\n\nmodule body() {\n    // Main tank\n    difference() {\n        // Outer shell - 2mm wall thickness\n        scale([1.2, 1, 1])\n            cylinder(h=60, d=50, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            scale([1.15, 0.95, 0.93])\n                cylinder(h=58, d=44, $fn=64);\n    }\n    \n    // Base reinforcement ring\n    translate([0, 0, 0])\n        cylinder(h=5, d1=50, d2=54, $fn=64);\n    \n    // Fill opening rim\n    translate([0, 0, 60])\n        cylinder(h=8, d1=30, d2=36, $fn=32);\n    \n    // Fill cap with grip ridges\n    translate([0, 0, 68])\n        difference() {\n            cylinder(h=5, d=32, $fn=32);\n            translate([0, 0, 2])\n                cylinder(h=5, d=28, $fn=32);\n        }\n    \n    // Grip ridges on cap\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([14, 0, 70.5])\n                cube([3, 2, 2], center=true);\n    }\n}\n\nmodule decorative_stripes() {\n    // Horizontal decorative bands\n    for(h = [15:15:45]) {\n        translate([0, 0, h])\n            scale([1.21, 1.01, 1])\n                cylinder(h=3, d=50, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    handle();\n    spout();\n    decorative_stripes();\n}",
    "renders": true
  },
  {
    "toy": "air",
    "openscad_code": "// OpenSCAD code for a realistic toy airplane – medium complexity\n// Wingspan ≈120 mm, length ≈110 mm, height ≈40 mm (printable without supports)\n\n// fuselage body with 2 mm shell\nmodule fuselage() {\n    difference() {\n        hull() {\n            // main cylinder body\n            translate([0, 0, 10]) cylinder(h = 75, r1 = 12, r2 = 8, $fn = 32);\n            // tail cone\n            translate([0, 0, 85]) cylinder(h = 20, r1 = 8, r2 = 2, $fn = 16);\n            // nose dome\n            translate([0, 0, 0]) sphere(d = 24, $fn = 32);\n        }\n        // hollow interior\n        translate([0, 0, 2]) cylinder(h = 95, r1 = 10, r2 = 6, $fn = 32);\n        translate([0, 0, -2]) sphere(d = 20, $fn = 32);\n    }\n}\n\n// cockpit canopy on top\nmodule canopy() {\n    translate([0, 0, 22])\n    difference() {\n        hull() {\n            sphere(d = 16, $fn = 32);\n            translate([0, 0, -6]) cylinder(h = 6, r = 8, $fn = 32);\n        }\n        translate([0, 0, 15]) cube([30, 30, 20], center = true);\n    }\n}\n\n// wing helper with 2 mm thickness\nmodule wing() {\n    difference() {\n        union() {\n            // main wing plate\n            translate([0, 0, 0]) cube([60, 25, 2], center = true);\n            // rounded tips\n            translate([30, 0, 0]) rotate([0, 90, 0]) cylinder(h = 25, r = 2, $fn = 32);\n            translate([-30, 0, 0]) rotate([0, 90, 0]) cylinder(h = 25, r = 2, $fn = 32);\n        }\n        // remove inner to make 2 mm shell\n        translate([0, 0, -1]) cube([56, 21, 4], center = true);\n    }\n}\n\n// horizontal stabilizer\nmodule h_stab() {\n    difference() {\n        cube([35, 12, 2], center = true);\n        translate([0, 0, -1]) cube([31, 8, 4], center = true);\n    }\n}\n\n// vertical stabilizer\nmodule v_stab() {\n    difference() {\n        cube([2, 12, 15], center = true);\n        translate([-1, 0, 0]) cube([4, 8, 11], center = true);\n    }\n}\n\n// propeller blades\nmodule propeller() {\n    for (a = [0:120:240])\n        rotate([0, 0, a])\n        translate([0, 0, 0])\n        rotate([20, 0, 0])\n        cube([30, 6, 2], center = true);\n}\n\n// landing gear wheels with 2 mm axles\nmodule wheel() {\n    difference() {\n        cylinder(h = 8, r = 7, center = true, $fn = 32);\n        cylinder(h = 10, r = 5, center = true, $fn = 32);\n    }\n}\n\n// main landing gear strut\nmodule gear() {\n    union() {\n        // strut\n        translate([0, 0, 7]) rotate([90, 0, 0]) cylinder(h = 15, r = 2, $fn = 16);\n        // axle\n        translate([0, 0, -1]) rotate([0, 0, 90]) cylinder(h = 20, r = 2, $fn = 16);\n        // wheel\n        translate([0, 10, -1]) rotate([90, 0, 0]) wheel();\n    }\n}\n\n// main assembly\nunion() {\n    // fuselage\n    fuselage();\n    canopy();\n    // main wings\n    translate([0, 0, 12]) rotate([0, 0, 0]) wing();\n    // horizontal stabilizer\n    translate([0, 0, 90]) rotate([0, 0, 0]) h_stab();\n    // vertical stabilizer\n    translate([0, 6, 97]) rotate([0, 0, 0]) v_stab();\n    // propeller\n    translate([0, 0, -12]) propeller();\n    // landing gear\n    translate([20, 0, 0]) gear();\n    mirror([1, 0, 0]) translate([20, 0, 0]) gear();\n    // tail wheel\n    translate([0, 0, 100]) rotate([90, 0, 0]) cylinder(h = 10, r = 3, $fn = 16);\n    translate([0, 0, 105]) rotate([90, 0, 0]) wheel();\n}",
    "renders": true
  },
  {
    "toy": "earth",
    "openscad_code": "$fn = 36;  // Better curves\n\n// Overall scale\nearth_d = 80;        // Main globe diameter\nstand_h = 30;        // Stand height\nbase_d = 40;         // Base diameter\nwall_t = 2;          // Wall thickness for 3D printing\n\n// Earth globe module\nmodule earth_globe(d=earth_d) {\n    // Outer shell\n    difference() {\n        sphere(d=d);\n        // Hollow inside for material saving\n        sphere(d=d - 2*wall_t);\n    }\n    \n    // Simple continents as raised bumps\n    color(\"darkgreen\")\n    for(a = [0:60:359]) {\n        rotate([0, a, 0])\n        translate([d/2 - 1.5, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, 0.7, 0.5])\n        cylinder(h = 3, r1 = d/6, r2 = d/10, center=true);\n    }\n    \n    // Simple blue ocean color indication (conceptual)\n    color(\"navy\") sphere(d=d);\n}\n\n// Stand pillar with toy-like joint detail\nmodule stand_pillar(h=stand_h, d=base_d) {\n    // Main pillar\n    cylinder(h=h, d1=d/2, d2=d/3);\n    \n    // Toy joint ring detail halfway up\n    translate([0, 0, h/2])\n    cylinder(h=4, d=d/2 + 4);\n    \n    // Bottom flare for stability\n    translate([0, 0, 0])\n    cylinder(h=4, d1=d*1.2, d2=d/2);\n}\n\n// Base plate with toy-style feet\nmodule base(d=base_d) {\n    // Main base disk\n    difference() {\n        cylinder(h=6, d=d*1.5);\n        // Recessed center for weight reduction\n        cylinder(h=3, d=d);\n    }\n    \n    // Toy-style rounded feet underneath\n    for(a = [45:90:315]) {\n        rotate([0, 0, a])\n        translate([d*0.6, 0, -3])\n        sphere(d=6);\n    }\n}\n\n// Assembly\nmodule earth_toy() {\n    // Base and stand\n    base();\n    translate([0, 0, 6])\n    stand_pillar();\n    \n    // Globe on top with toy-like peg joint\n    translate([0, 0, 6 + stand_h])\n    rotate([0, 23.5, 0])  // Earth tilt\n    earth_globe();\n    \n    // Decorative toy ring around equator\n    color(\"gold\")\n    rotate([0, 23.5, 0])\n    rotate_extrude()\n    translate([earth_d/2 + 1, 0, 0])\n    circle(r=1.5);\n}\n\n// Render the toy\nearth_toy();",
    "renders": true
  },
  {
    "toy": "seed",
    "openscad_code": "// Toy Chair / Seed for 3D printing\n// Realistic style, medium complexity\n// Overall size: ~60 mm × 60 mm × 95 mm\n// Wall thickness: 2 mm throughout\n\n// Main body – seed-like oval shell\nmodule seed_shell() {\n    difference() {\n        // Outer smooth teardrop\n        scale([1, 0.8, 1.2])\n            sphere(d = 60, $fn = 64);\n\n        // Hollow interior (2 mm wall)\n        translate([0, 0, -2])\n            scale([0.9, 0.7, 1.1])\n                sphere(d = 54, $fn = 64);\n    }\n}\n\n// Flat seating area on top\nmodule seat_top() {\n    translate([0, 0, 32])\n        difference() {\n            // Cushion disc\n            cylinder(h = 6, d = 34, $fn = 48);\n\n            // 2 mm recess for toy detail\n            translate([0, 0, 2])\n                cylinder(h = 2, d = 30, $fn = 48);\n        }\n}\n\n// Four rounded toy legs\nmodule legs() {\n    for(a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([23, 0, -20])\n                rotate([90, 0, 0])\n                    cylinder(h = 40, d1 = 12, d2 = 8, $fn = 24);\n}\n\n// Decorative backrest – seedling sprout\nmodule backrest() {\n    translate([0, -15, 42])\n        union() {\n            // Stem\n            cylinder(h = 25, d = 8, $fn = 24);\n            // Leaf pair\n            rotate([0, -30, 0])\n                scale([1, 0.4, 0.2])\n                    sphere(d = 30, $fn = 32);\n            rotate([0, -30, 180])\n                scale([1, 0.4, 0.2])\n                    sphere(d = 30, $fn = 32);\n        }\n}\n\n// Assembly\nunion() {\n    seed_shell();\n    seat_top();\n    legs();\n    backrest();\n}",
    "renders": true
  },
  {
    "toy": "plant",
    "openscad_code": "// Realistic toy plant: potted succulent with detachable leaves\n// Overall height ~80 mm, pot diameter ~45 mm\n\n$fn = 36;  // Smooth curves for 3D printing\n\nmodule pot() {\n    // Main pot body – truncated cone for easy printing\n    difference() {\n        cylinder(h = 35, d1 = 45, d2 = 40, center = false);\n        // Hollow cavity, 2 mm wall\n        translate([0, 0, 2])\n            cylinder(h = 33, d1 = 41, d2 = 36, center = false);\n    }\n    // Bottom disk for stability\n    translate([0, 0, -2])\n        cylinder(h = 2, d = 46, center = false);\n}\n\nmodule soil_surface() {\n    // Irregular top surface of soil, printed as part of pot\n    translate([0, 0, 33])\n        scale([1, 1, 0.3])\n            sphere(d = 43);\n}\n\nmodule leaf(thickness = 2, length = 25, width = 12, twist = 0) {\n    // Single detachable succulent leaf\n    // Tapered ellipsoid\n    scale([width/2, thickness/2, length/2])\n        rotate([0, twist, 0])\n            sphere(d = 2);\n}\n\nmodule rosette() {\n    // Central rosette base – short cylinder with peg holes\n    cylinder(h = 8, d = 18, center = false);\n    \n    // Peg holes for leaves – 8 radially at 45°\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([7, 0, 4])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d = 2.2, center = true);  // 2 mm peg\n    }\n}\n\nmodule assembled_plant() {\n    // Combine all parts\n    pot();\n    soil_surface();\n    \n    translate([0, 0, 35])  // Soil level\n        rosette();\n    \n    // Attach 8 leaves around rosette\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([7, 0, 39])\n                rotate([30 - i * 5, 0, 0])  // Slight random tilt\n                    leaf();\n    }\n}\n\nassembled_plant();",
    "renders": true
  },
  {
    "toy": "magic",
    "openscad_code": "// Magic Toy Chest - Realistic Style with Medium Complexity\n// Dimensions: 80mm x 50mm x 60mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main body of the chest\nmodule chest_body() {\n    difference() {\n        // Outer box\n        cube([80, 50, 60], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cube([80 - 2*wall, 50 - 2*wall, 60 - wall], center = true);\n    }\n}\n\n// Decorative metal bands\nmodule metal_bands() {\n    // Top band\n    translate([0, 0, 28])\n        cube([82, 4, 2], center = true);\n    \n    // Bottom band\n    translate([0, 0, -28])\n        cube([82, 4, 2], center = true);\n    \n    // Side bands\n    for(x = [-38, 38]) {\n        translate([x, 0, 0])\n            cube([2, 54, 60], center = true);\n    }\n}\n\n// Ornate corners\nmodule corners() {\n    for(x = [-38, 38])\n    for(y = [-23, 23]) {\n        translate([x, y, 0])\n            cylinder(h = 60, r = 3, center = true);\n    }\n}\n\n// Magical lock mechanism\nmodule magic_lock() {\n    difference() {\n        // Lock base\n        translate([0, 26, 10])\n            cube([10, 4, 8], center = true);\n        \n        // Keyhole\n        translate([0, 28, 10])\n            cylinder(h = 5, r1 = 1, r2 = 1.5, center = true);\n    }\n    \n    // Magical gem\n    translate([0, 28, 14])\n        sphere(r = 3);\n}\n\n// Hinges\nmodule hinges() {\n    for(x = [-25, 25]) {\n        // Main hinge\n        translate([x, -26, 30])\n            cylinder(h = 6, r = 3, center = true);\n        \n        // Pin\n        translate([x, -26, 33])\n            cylinder(h = 8, r = 1.5, center = true);\n    }\n}\n\n// Ornate lid\nmodule lid() {\n    difference() {\n        // Main lid\n        translate([0, 0, 30])\n            cube([80, 52, 6], center = true);\n        \n        // Inner hollow\n        translate([0, 0, 33])\n            cube([76, 48, 4], center = true);\n    }\n    \n    // Decorative dome top\n    translate([0, 0, 36])\n        scale([1, 0.8, 0.5])\n            sphere(r = 45);\n}\n\n// Magical runes on sides\nmodule runes() {\n    for(i = [1:5]) {\n        // Left side runes\n        translate([-42, -20 + i*8, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 2, r1 = 1, r2 = 0.5);\n        \n        // Right side runes\n        translate([42, -20 + i*8, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 2, r1 = 1, r2 = 0.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main chest parts\n    chest_body();\n    \n    // Attach lid with hinges\n    translate([0, 0, 30])\n        hinges();\n    translate([0, 0, 30])\n        lid();\n    \n    // Decorative elements\n    metal_bands();\n    corners();\n    magic_lock();\n    runes();\n}",
    "renders": true
  },
  {
    "toy": "cape",
    "openscad_code": "// Realistic Toy Cape (Medium Complexity)\n// 3D printable action-figure cape with structural details\n\n// Overall dimensions\ncape_length = 80;\ncape_width = 60;\nneck_radius = 8;\nwall_thickness = 2;\n\n// Cape main body module\nmodule cape_body() {\n    // Outer shell\n    difference() {\n        // Main cape shape\n        hull() {\n            translate([0, -cape_length/2, 0])\n                scale([1, 1.5, 0.1])\n                    sphere(d = cape_width);\n            translate([0, cape_length/2 - 10, -15])\n                scale([1.2, 0.8, 0.2])\n                    sphere(d = cape_width * 0.8);\n        }\n        \n        // Inner hollow space\n        translate([0, 0, -wall_thickness])\n            scale([0.85, 0.85, 1.5])\n                hull() {\n                    translate([0, -cape_length/2 + 5, 0])\n                        scale([1, 1.5, 0.1])\n                            sphere(d = cape_width - wall_thickness*2);\n                    translate([0, cape_length/2 - 15, -10])\n                        scale([1.2, 0.8, 0.2])\n                            sphere(d = (cape_width - wall_thickness*2) * 0.8);\n                }\n    }\n}\n\n// Neck collar module\nmodule neck_collar() {\n    difference() {\n        // Outer collar ring\n        cylinder(h = wall_thickness*2, r1 = neck_radius + wall_thickness*2, r2 = neck_radius + wall_thickness*3);\n        \n        // Inner hole for neck\n        cylinder(h = wall_thickness*2 + 1, r = neck_radius);\n        \n        // Front opening slit\n        translate([neck_radius - 2, 0, 0])\n            cube([neck_radius*2, 4, wall_thickness*2 + 1]);\n    }\n}\n\n// Cape clasp detail\nmodule cape_clasp() {\n    // Left side clasp\n    translate([-neck_radius - 3, 0, wall_thickness]) {\n        cylinder(h = 4, r = 2);\n        translate([0, 0, 2])\n            sphere(d = 4);\n    }\n    \n    // Right side clasp\n    translate([neck_radius + 3, 0, wall_thickness]) {\n        cylinder(h = 4, r = 2);\n        translate([0, 0, 2])\n            sphere(d = 4);\n    }\n}\n\n// Cape folds module\nmodule cape_folds() {\n    // Generate 5 fold lines along the cape\n    for (i = [-2:2]) {\n        translate([i * 12, cape_length/4, -wall_thickness/2]) {\n            rotate([0, 90, 0])\n                cylinder(h = 2, r1 = 1, r2 = 0.5);\n        }\n        \n        translate([i * 12, cape_length/2, -wall_thickness]) {\n            rotate([0, 90, 0])\n                cylinder(h = 3, r1 = 2, r2 = 1);\n        }\n    }\n}\n\n// Cape bottom hem\nmodule cape_hem() {\n    translate([0, cape_length/2 - 5, -wall_thickness/2])\n        difference() {\n            // Outer hem\n            cylinder(h = wall_thickness, r = cape_width/2, center = true);\n            \n            // Inner cutout\n            cylinder(h = wall_thickness + 1, r = cape_width/2 - 3, center = true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main cape\n    cape_body();\n    \n    // Collar attachment\n    translate([0, -cape_length/2 + 10, 0])\n        neck_collar();\n    \n    // Cape clasp\n    translate([0, -cape_length/2 + 10, 0])\n        cape_clasp();\n    \n    // Folds for realism\n    cape_folds();\n    \n    // Bottom hem\n    cape_hem();\n}",
    "renders": true
  },
  {
    "toy": "sock",
    "openscad_code": "// Sock Toy - OpenSCAD\n// A 3D printable sock toy with realistic proportions and toy-like features\n\nmodule sock_body() {\n    // Main sock body - elongated cylinder with rounded toe\n    difference() {\n        hull() {\n            // Ankle part\n            translate([0, 0, 40])\n                cylinder(h=20, d1=35, d2=30, $fn=32);\n            // Foot part\n            translate([0, -25, 15])\n                cylinder(h=30, d1=30, d2=35, $fn=32);\n            // Toe cap\n            translate([0, -45, 0])\n                sphere(d=35, $fn=32);\n        }\n        \n        // Hollow out the sock (2mm wall thickness)\n        translate([0, 0, -5])\n            scale([0.85, 0.85, 0.9])\n            hull() {\n                translate([0, 0, 45])\n                    cylinder(h=20, d1=31, d2=26, $fn=32);\n                translate([0, -25, 15])\n                    cylinder(h=30, d1=26, d2=31, $fn=32);\n                translate([0, -45, 0])\n                    sphere(d=31, $fn=32);\n            }\n    }\n}\n\nmodule cuff() {\n    // Ribbed cuff at top of sock\n    difference() {\n        union() {\n            // Main cuff ring\n            translate([0, 0, 50])\n                cylinder(h=15, d=40, $fn=32);\n            \n            // Rib details\n            for (i = [0:15]) {\n                rotate([0, 0, i * 22.5])\n                    translate([18, 0, 50])\n                        cube([4, 2, 15], center=true);\n            }\n        }\n        \n        // Hollow cuff\n        translate([0, 0, 50])\n            cylinder(h=15, d=36, $fn=32);\n    }\n}\n\nmodule heel_patch() {\n    // Contrasting heel patch\n    color(\"red\")\n    translate([0, 5, 15])\n        rotate([90, 0, 0])\n            scale([1, 0.7, 1])\n                cylinder(h=20, d=25, $fn=32);\n}\n\nmodule toe_patch() {\n    // Contrasting toe patch\n    color(\"red\")\n    translate([0, -40, 0])\n        rotate([90, 0, 0])\n            scale([1.2, 0.8, 1])\n                sphere(d=20, $fn=32);\n}\n\nmodule stripes() {\n    // Decorative stripes around sock\n    for (i = [0:2]) {\n        translate([0, 0, 25 + i * 10])\n            rotate_extrude($fn=32)\n                translate([15, 0, 0])\n                    square([2, 2]);\n    }\n}\n\nmodule button_eyes() {\n    // Toy safety button eyes\n    for (x = [-8, 8]) {\n        translate([x, -5, 35])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=6, $fn=16);\n    }\n}\n\nmodule mouth() {\n    // Simple embroidered smile\n    translate([0, -15, 35])\n        rotate([90, 0, 0])\n            cylinder(h=1, d=15, $fn=32);\n}\n\nmodule hanging_loop() {\n    // Loop for hanging the sock toy\n    translate([0, 10, 57.5])\n        rotate([0, 90, 0])\n            difference() {\n                torus(5, 2, $fn=32);\n                translate([0, -6, 0])\n                    cube([20, 12, 20], center=true);\n            }\n}\n\n// Main assembly\nunion() {\n    sock_body();\n    cuff();\n    heel_patch();\n    toe_patch();\n    stripes();\n    button_eyes();\n    mouth();\n    hanging_loop();\n}",
    "renders": true
  },
  {
    "toy": "shirt",
    "openscad_code": "// Toy Shirt - Realistic Style, Medium Complexity\n// Dimensions: ~80mm width, ~90mm height, ~35mm depth\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main shirt body module\nmodule shirt_body() {\n    // Front panel\n    difference() {\n        // Outer shell\n        translate([0, 0, 35])\n        cube([60, 80, 10], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 35])\n        cube([56, 76, 8], center=true);\n    }\n    \n    // Back panel\n    difference() {\n        translate([0, -30, 35])\n        cube([60, 20, 10], center=true);\n        \n        translate([0, -30, 35])\n        cube([56, 16, 8], center=true);\n    }\n}\n\n// Collar module\nmodule collar() {\n    // Collar base\n    difference() {\n        translate([0, 38, 40])\n        cube([30, 10, 5], center=true);\n        \n        // Neck hole\n        translate([0, 38, 42])\n        cube([20, 6, 3], center=true);\n    }\n    \n    // Collar points\n    for(side = [-1, 1]) {\n        translate([side * 15, 38, 42])\n        rotate([0, side * 20, 0])\n        cube([8, 10, 2]);\n    }\n}\n\n// Sleeves module\nmodule sleeves() {\n    for(side = [-1, 1]) {\n        // Sleeve body\n        difference() {\n            // Main sleeve\n            translate([side * 35, 15, 35])\n            rotate([0, 0, side * 30])\n            scale([1, 1.2, 1])\n            cube([25, 15, 10], center=true);\n            \n            // Inner cavity\n            translate([side * 35, 15, 35])\n            rotate([0, 0, side * 30])\n            scale([1, 1.1, 0.8])\n            cube([21, 11, 8], center=true);\n        }\n        \n        // Cuff detail\n        translate([side * 50, 10, 35])\n        cube([5, 15, 2], center=true);\n    }\n}\n\n// Buttons module\nmodule buttons() {\n    for(i = [0:3]) {\n        translate([0, 25 + i * 15, 41])\n        cylinder(h=1, r=2, $fn=16);\n    }\n}\n\n// Pocket module\nmodule pocket() {\n    // Left chest pocket\n    difference() {\n        translate([-20, 20, 41])\n        cube([15, 12, 3], center=true);\n        \n        translate([-20, 20, 43])\n        cube([13, 10, 2], center=true);\n    }\n}\n\n// Side seams for structural integrity\nmodule side_seams() {\n    for(side = [-1, 1]) {\n        translate([side * 30, 0, 35])\n        cube([2, 80, 10], center=true);\n    }\n}\n\n// Bottom hem\nmodule hem() {\n    translate([0, -10, 30])\n    cube([64, 5, 2], center=true);\n}\n\n// Assembly\nunion() {\n    shirt_body();\n    collar();\n    sleeves();\n    buttons();\n    pocket();\n    side_seams();\n    hem();\n}",
    "renders": true
  },
  {
    "toy": "pants",
    "openscad_code": "// Toy pants - realistic style, medium complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 50;\n\nmodule pant_leg(length, width, height) {\n    // Main leg tube\n    difference() {\n        cylinder(h=length, d=width);\n        translate([0, 0, 2]) cylinder(h=length-2, d=width-4);\n    }\n    \n    // Cuff detail at bottom\n    translate([0, 0, length-5]) {\n        difference() {\n            cylinder(h=5, d=width+4);\n            cylinder(h=5, d=width+2);\n        }\n    }\n}\n\nmodule belt_loops() {\n    for(i=[-15, -5, 5, 15]) {\n        translate([i, -15, 25]) {\n            difference() {\n                cube([4, 4, 8]);\n                translate([1, 1, 1]) cube([2, 2, 6]);\n            }\n        }\n    }\n}\n\nmodule fly_detail() {\n    // Zipper area\n    translate([0, -12, 15]) {\n        difference() {\n            cube([6, 8, 10]);\n            translate([1, 1, 1]) cube([4, 6, 8]);\n        }\n    }\n    \n    // Button\n    translate([0, -8, 25.5]) {\n        cylinder(h=2, d=6);\n    }\n}\n\nmodule pockets() {\n    // Back pockets\n    for(side=[-1, 1]) {\n        translate([side*12, 10, 15]) {\n            difference() {\n                cube([15, 3, 10]);\n                translate([1, -1, 1]) cube([13, 5, 8]);\n            }\n        }\n    }\n    \n    // Side pockets\n    for(side=[-1, 1]) {\n        translate([side*25, 0, 10]) {\n            rotate([0, 0, -20*side]) {\n                difference() {\n                    cube([12, 3, 15]);\n                    translate([1, -1, 1]) cube([10, 5, 13]);\n                }\n            }\n        }\n    }\n}\n\nmodule waistband() {\n    // Main waistband\n    difference() {\n        translate([0, 0, 25]) cylinder(h=8, d=54);\n        translate([0, 0, 27]) cylinder(h=6, d=50);\n    }\n    \n    // Belt loops\n    belt_loops();\n}\n\nmodule seam_lines() {\n    // Outer seam lines\n    for(side=[-1, 1]) {\n        translate([side*24, 0, 10]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=60, d=2);\n            }\n        }\n    }\n    \n    // Inner seam lines\n    for(side=[-1, 1]) {\n        translate([0, side*10, 10]) {\n            rotate([0, 90, 0]) {\n                rotate([0, 0, 90]) {\n                    cylinder(h=35, d=2);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Left leg\n    translate([-20, 0, 0]) {\n        pant_leg(60, 30, 0);\n    }\n    \n    // Right leg\n    translate([20, 0, 0]) {\n        pant_leg(60, 30, 0);\n    }\n    \n    // Crotch area\n    translate([0, 0, 0]) {\n        difference() {\n            cube([40, 30, 25]);\n            translate([2, 2, 2]) cube([36, 26, 23]);\n        }\n    }\n    \n    // Waistband\n    waistband();\n    \n    // Fly detail\n    fly_detail();\n    \n    // Pockets\n    pockets();\n    \n    // Seam details (raised)\n    seam_lines();\n}",
    "renders": true
  },
  {
    "toy": "dress",
    "openscad_code": "// Toy Dress - Realistic Style, Medium Complexity\n// Overall size: ~100mm tall, 60mm wide, 40mm deep\n\n// Parameters\n$fn = 32;\nwall = 2;\nscale_factor = 1;\n\n// Main module\nmodule toy_dress() {\n    // Torso\n    difference() {\n        // Main torso block\n        translate([0, 0, 40])\n            scale([0.6, 0.4, 1])\n            sphere(d = 40);\n        \n        // Neck hole\n        translate([0, 0, 55])\n            cylinder(h = 20, d1 = 15, d2 = 18, center = true);\n        \n        // Arm holes\n        translate([20, 0, 40])\n            rotate([0, 90, 0])\n            cylinder(h = 30, d = 20, center = true);\n        translate([-20, 0, 40])\n            rotate([0, 90, 0])\n            cylinder(h = 30, d = 20, center = true);\n    }\n    \n    // Waist belt\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h = 8, d = 42);\n            cylinder(h = 10, d = 38);\n        }\n    \n    // Skirt - pleated design\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([0, 0, 12])\n            linear_extrude(height = 20, twist = -5)\n            polygon(points = [\n                [18, 0],\n                [22, -5],\n                [26, 0],\n                [22, 5]\n            ]);\n    }\n    \n    // Underskirt structure\n    translate([0, 0, 0])\n        cylinder(h = 12, d1 = 40, d2 = 36);\n    \n    // Decorative bow at waist\n    translate([0, 22, 24])\n    rotate([90, 0, 0])\n    union() {\n        // Bow center knot\n        cylinder(h = 8, d = 8);\n        \n        // Bow loops\n        translate([0, 5, 0])\n            scale([1, 0.3, 1])\n            sphere(d = 12);\n        translate([0, -5, 0])\n            scale([1, 0.3, 1])\n            sphere(d = 12);\n    }\n    \n    // Shoulder straps\n    translate([15, 0, 50])\n        rotate([45, 0, 0])\n        scale([0.5, 1, 1])\n        cylinder(h = 25, d = 6);\n    translate([-15, 0, 50])\n        rotate([135, 0, 0])\n        scale([0.5, 1, 1])\n        cylinder(h = 25, d = 6);\n    \n    // Bottom hem detail\n    translate([0, 0, -2])\n    difference() {\n        cylinder(h = 4, d = 44);\n        cylinder(h = 5, d = 40);\n    }\n    \n    // Side seams (decorative ridges)\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 10])\n            scale([0.2, 1, 1])\n            cylinder(h = 25, d = 8);\n    }\n}\n\n// Generate the dress\ntoy_dress();",
    "renders": true
  },
  {
    "toy": "coat",
    "openscad_code": "// Toy Coat OpenSCAD Model - Realistic Style, Medium Complexity\n// Dimensions: ~120mm tall, ~100mm wide, ~30mm thick\n// Wall thickness: 2mm throughout for 3D printability\n\n$fn = 32;\n\nmodule coat_body() {\n    difference() {\n        // Main coat body\n        union() {\n            // Torso section\n            translate([0, 0, 30])\n                cube([60, 20, 80], center=true);\n            \n            // Shoulders\n            translate([0, 0, 70])\n                cube([80, 25, 20], center=true);\n            \n            // Waist taper\n            translate([0, 0, 15])\n                cube([50, 18, 30], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 2, 30])\n            cube([56, 16, 76], center=true);\n    }\n}\n\nmodule sleeves() {\n    // Left sleeve\n    difference() {\n        union() {\n            // Upper arm\n            translate([-40, 0, 55])\n                rotate([0, 30, 0])\n                cylinder(h=50, r1=12, r2=10);\n            \n            // Lower arm\n            translate([-65, -8, 25])\n                rotate([0, 45, 0])\n                cylinder(h=40, r1=10, r2=8);\n        }\n        \n        // Hollow sleeve\n        difference() {\n            translate([-40, 0, 55])\n                rotate([0, 30, 0])\n                cylinder(h=50, r1=10, r2=8);\n            translate([-65, -8, 25])\n                rotate([0, 45, 0])\n                cylinder(h=40, r1=8, r2=6);\n        }\n    }\n    \n    // Right sleeve (mirror of left)\n    mirror([1, 0, 0]) {\n        difference() {\n            union() {\n                translate([-40, 0, 55])\n                    rotate([0, 30, 0])\n                    cylinder(h=50, r1=12, r2=10);\n                \n                translate([-65, -8, 25])\n                    rotate([0, 45, 0])\n                    cylinder(h=40, r1=10, r2=8);\n            }\n            \n            difference() {\n                translate([-40, 0, 55])\n                    rotate([0, 30, 0])\n                    cylinder(h=50, r1=10, r2=8);\n                translate([-65, -8, 25])\n                    rotate([0, 45, 0])\n                    cylinder(h=40, r1=8, r2=6);\n            }\n        }\n    }\n}\n\nmodule collar() {\n    difference() {\n        // Collar base\n        translate([0, 10, 80])\n            cube([50, 8, 15], center=true);\n        \n        // Collar hollow\n        translate([0, 12, 80])\n            cube([46, 4, 11], center=true);\n    }\n    \n    // Collar peaks\n    for(i = [-1, 1]) {\n        translate([i * 20, 10, 87])\n            rotate([i * 15, 0, 0])\n            cube([15, 6, 8], center=true);\n    }\n}\n\nmodule buttons() {\n    // Main buttons\n    for(pos = [50, 35, 20]) {\n        translate([0, 11, pos])\n            cylinder(h=3, r=4);\n        \n        // Button holes\n        translate([0, 14, pos])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=1);\n    }\n}\n\nmodule pockets() {\n    // Left pocket\n    difference() {\n        translate([-20, 10, 35])\n            cube([15, 3, 20], center=true);\n        translate([-20, 12, 35])\n            cube([13, 2, 18], center=true);\n    }\n    \n    // Right pocket\n    difference() {\n        translate([20, 10, 35])\n            cube([15, 3, 20], center=true);\n        translate([20, 12, 35])\n            cube([13, 2, 18], center=true);\n    }\n}\n\nmodule belt_loops() {\n    for(pos = [-20, 0, 20]) {\n        translate([pos, 0, 15])\n            difference() {\n                cube([5, 20, 3], center=true);\n                translate([0, 0, 1])\n                    cube([3, 16, 2], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    coat_body();\n    sleeves();\n    collar();\n    buttons();\n    pockets();\n    belt_loops();\n}",
    "renders": true
  },
  {
    "toy": "bag",
    "openscad_code": "// Miniature toy school-bag (backpack) – 3D-printable, medium complexity\n// Overall size approx. 70 mm tall, 55 mm wide, 20 mm thick\n// Safe wall thickness: 2 mm\n\n$fn = 36;  // smooth curves\n\n// ---------- PARAMETERS ----------\nwall      = 2;          // wall thickness (3D-print friendly)\nbody_h    = 55;\nbody_w    = 45;\nbody_d    = 15;\nzip_clear = 0.6;        // clearance for zipper teeth\nstrap_w   = 5;\nstrap_h   = 35;\nhandle_r  = 3;\npocket_scale = 0.65;\n\n// ---------- MAIN ASSEMBLY ----------\nmodule bag() {\n    union() {\n        // Main compartment\n        main_body();\n        \n        // Front zip pocket\n        translate([0, -body_d/2 - wall, body_h*(1-pocket_scale)/2])\n            front_pocket();\n        \n        // Shoulder straps\n        mirror([1,0,0])\n            translate([body_w/2 + wall, 0, body_h*0.3])\n                strap();\n        translate([-body_w/2 - wall, 0, body_h*0.3])\n            strap();\n        \n        // Top handle\n        translate([0, 0, body_h + handle_r*2 + wall])\n            rotate([90,0,0])\n                handle();\n        \n        // Zipper pulls\n        translate([0, body_d/2 + wall/2 + zip_clear, body_h*0.9])\n            rotate([90,0,0])\n                zipper_pull();\n        translate([0, body_d/2 + wall/2 + zip_clear, body_h*0.4])\n            rotate([90,0,0])\n                zipper_pull();\n    }\n}\n\n// ---------- MODULES ----------\n\n// Main rounded box\nmodule main_body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([body_w, body_d, body_h], center=true);\n            sphere(r=wall);\n        }\n        \n        // Hollow inside\n        minkowski() {\n            translate([0,0,-wall/2])\n                cube([body_w - wall*2, body_d - wall*2, body_h - wall], center=true);\n            sphere(r=wall*0.7);\n        }\n        \n        // Top opening slot\n        translate([0,0,body_h/2 + wall])\n            cube([body_w - wall*4, body_d + wall*2, wall*2], center=true);\n    }\n}\n\n// Front pocket\nmodule front_pocket() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([body_w*pocket_scale, body_d, body_h*pocket_scale], center=true);\n            sphere(r=wall);\n        }\n        \n        // Hollow inside\n        minkowski() {\n            cube([body_w*pocket_scale - wall*2, body_d - wall*2, body_h*pocket_scale - wall*2], center=true);\n            sphere(r=wall*0.7);\n        }\n        \n        // Zipper cut\n        translate([0, body_d/2 + wall/2 + zip_clear, 0])\n            cube([body_w*pocket_scale, wall, body_h*pocket_scale + wall], center=true);\n    }\n}\n\n// Shoulder strap\nmodule strap() {\n    hull() {\n        translate([-strap_w/2, 0, 0])\n            cylinder(h=strap_h, r=wall/2, center=false);\n        translate([strap_w/2, 0, 0])\n            cylinder(h=strap_h, r=wall/2, center=false);\n    }\n}\n\n// Top carrying handle\nmodule handle() {\n    difference() {\n        torus(r1=handle_r*2, r2=wall);\n        cube([handle_r*6, handle_r*6, handle_r*4], center=true);\n    }\n}\n\n// Zipper pull tab\nmodule zipper_pull() {\n    union() {\n        cylinder(h=wall*2, r=wall);\n        translate([0, wall*2, 0])\n            sphere(r=wall);\n    }\n}\n\n// ---------- RENDER ----------\nbag();",
    "renders": true
  },
  {
    "toy": "box",
    "openscad_code": "// Toy Box OpenSCAD Model\n// Realistic style, medium complexity\n\n// Parameters\nbox_width = 80;\nbox_depth = 60;\nbox_height = 50;\nwall_thickness = 2;\nlid_clearance = 1;\n\n// Main box body\nmodule box_body() {\n    difference() {\n        // Outer shell\n        cube([box_width, box_depth, box_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness/2])\n            cube([box_width - 2*wall_thickness, \n                  box_depth - 2*wall_thickness, \n                  box_height - wall_thickness], center=true);\n    }\n}\n\n// Reinforcement corners\nmodule corner_reinforcements() {\n    corner_size = 8;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (box_width/2 - corner_size/2), \n                      y * (box_depth/2 - corner_size/2), \n                      0]) {\n                difference() {\n                    cube([corner_size, corner_size, box_height], center=true);\n                    translate([0, 0, box_height/2 - wall_thickness])\n                        cube([corner_size - wall_thickness, \n                              corner_size - wall_thickness, \n                              wall_thickness*2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Hinge pins\nmodule hinges() {\n    pin_radius = 3;\n    pin_length = 10;\n    \n    for(side = [-1, 1]) {\n        translate([side * (box_width/2 - 5), 0, box_height/2]) {\n            rotate([90, 0, 0])\n                cylinder(h=pin_length, r=pin_radius, center=true);\n        }\n    }\n}\n\n// Lid\nmodule lid() {\n    lid_height = 5;\n    handle_height = 8;\n    handle_width = 20;\n    \n    union() {\n        // Main lid\n        translate([0, 0, box_height/2 + lid_height/2 + lid_clearance]) {\n            difference() {\n                cube([box_width, box_depth, lid_height], center=true);\n                // Inner relief\n                translate([0, 0, -lid_height/4])\n                    cube([box_width - 4, box_depth - 4, lid_height/2], center=true);\n            }\n        }\n        \n        // Handle\n        translate([0, box_depth/2 - 10, box_height + lid_clearance + lid_height + handle_height/2])\n            difference() {\n                cube([handle_width, 8, handle_height], center=true);\n                translate([0, 0, -1])\n                    cube([handle_width - 6, 4, handle_height + 2], center=true);\n            }\n        \n        // Hinge loops\n        for(side = [-1, 1]) {\n            translate([side * (box_width/2 - 5), 0, box_height/2 + lid_clearance/2]) {\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=8, r=4, center=true);\n                        cylinder(h=9, r=2.1, center=true);\n                    }\n            }\n        }\n    }\n}\n\n// Decorative studs\nmodule studs() {\n    stud_radius = 3;\n    stud_height = 1.5;\n    \n    positions = [\n        [-30, -25], [-30, 25], [30, -25], [30, 25],\n        [-15, -25], [-15, 25], [15, -25], [15, 25]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], box_height/2 - stud_height/2]) {\n            cylinder(h=stud_height, r=stud_radius);\n        }\n    }\n}\n\n// Bottom supports\nmodule supports() {\n    support_height = 4;\n    support_width = 6;\n    \n    for(x = [-1, 0, 1]) {\n        translate([x * box_width/3, 0, -box_height/2 - support_height/2]) {\n            cube([support_width, box_depth - 10, support_height], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main box assembly\n    union() {\n        box_body();\n        corner_reinforcements();\n        hinges();\n        studs();\n        supports();\n    }\n    \n    // Lid (rotate for printing - uncomment for assembly view)\n    // lid();\n}\n\n// Print-friendly lid positioning\ntranslate([0, box_depth + 20, 0])\n    rotate([0, 180, 0])\n        lid();",
    "renders": true
  },
  {
    "toy": "basket",
    "openscad_code": "// Toy Basket - Medium Complexity Realistic Style\n// 3D printable toy basket with realistic proportions and toy-like details\n\n$fn = 32;\n\n// Main dimensions\nbasket_width = 80;\nbasket_depth = 60;\nbasket_height = 45;\nwall_thickness = 2;\nhandle_diameter = 4;\n\nmodule basket_body() {\n    difference() {\n        // Outer basket shape\n        hull() {\n            translate([-basket_width/2, -basket_depth/2, 0])\n                cube([basket_width, basket_depth, basket_height]);\n            translate([-basket_width/2 + 5, -basket_depth/2 + 5, -5])\n                cube([basket_width - 10, basket_depth - 10, basket_height + 5]);\n        }\n        \n        // Inner cavity\n        translate([-basket_width/2 + wall_thickness, -basket_depth/2 + wall_thickness, wall_thickness])\n            cube([basket_width - 2*wall_thickness, basket_depth - 2*wall_thickness, basket_height]);\n        \n        // Rounded bottom inner\n        translate([0, 0, wall_thickness])\n            scale([basket_width/2 - wall_thickness, basket_depth/2 - wall_thickness, 1])\n                sphere(1);\n    }\n}\n\nmodule basket_rim() {\n    // Top rim reinforcement\n    difference() {\n        hull() {\n            translate([-basket_width/2 - 2, -basket_depth/2 - 2, basket_height - 2])\n                cube([basket_width + 4, basket_depth + 4, 4]);\n            translate([-basket_width/2 - 1, -basket_depth/2 - 1, basket_height])\n                cube([basket_width + 2, basket_depth + 2, 2]);\n        }\n        \n        // Hollow out rim\n        translate([-basket_width/2 - 1, -basket_depth/2 - 1, basket_height - 2])\n            cube([basket_width + 2, basket_depth + 2, 6]);\n    }\n}\n\nmodule weave_pattern() {\n    // Horizontal weaves\n    for (i = [1:4]) {\n        for (j = [0:8]) {\n            translate([-basket_width/2 + j*10 - 5, -basket_depth/2 - 2, i*10])\n                rotate([0, 90, 0])\n                    cylinder(h=2, r1=1.5, r2=1.5);\n        }\n    }\n    \n    // Vertical weaves\n    for (i = [1:4]) {\n        for (j = [0:6]) {\n            translate([-basket_width/2 - 2, -basket_depth/2 + j*10 - 5, i*10])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r1=1.5, r2=1.5);\n        }\n    }\n}\n\nmodule handles() {\n    // Left handle\n    translate([-basket_width/2 - 8, 0, basket_height/2 + 5])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=16, r=handle_diameter);\n                translate([0, 0, -handle_diameter])\n                    cube([handle_diameter*2, handle_diameter*2, handle_diameter*2]);\n            }\n    \n    // Right handle\n    translate([basket_width/2 + 8, 0, basket_height/2 + 5])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=16, r=handle_diameter);\n                translate([0, 0, -handle_diameter])\n                    cube([handle_diameter*2, handle_diameter*2, handle_diameter*2]);\n            }\n    \n    // Handle connectors\n    translate([-basket_width/2 - 8, 0, basket_height/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h=handle_diameter*2, r=handle_diameter);\n    translate([basket_width/2 + 8, 0, basket_height/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h=handle_diameter*2, r=handle_diameter);\n}\n\nmodule toy_details() {\n    // Small decorative bow on front\n    translate([0, -basket_depth/2 - 3, basket_height - 5])\n        union() {\n            cube([8, 2, 3]);\n            translate([-4, 0, 0])\n                sphere(2);\n            translate([4, 0, 0])\n                sphere(2);\n        }\n    \n    // Bottom support feet\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (basket_width/2 - 10), y * (basket_depth/2 - 8), -2])\n                cylinder(h=2, r=3);\n        }\n    }\n}\n\n// Assemble the basket\nunion() {\n    basket_body();\n    basket_rim();\n    handles();\n    toy_details();\n    \n    // Add subtle weave texture\n    %weave_pattern();\n}",
    "renders": true
  },
  {
    "toy": "jar",
    "openscad_code": "// Jar Toy - Realistic Style, Medium Complexity\n// 3D printable with 2mm walls, 70mm tall, 50mm diameter\n\n$fn = 64;\n\n// Main module for the jar toy\nmodule jar_toy() {\n    // Jar body\n    difference() {\n        // Outer shell\n        cylinder(h = 60, d = 50, center = false);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h = 58, d = 46, center = false);\n    }\n    \n    // Jar bottom\n    translate([0, 0, 0])\n        cylinder(h = 2, d = 50, center = false);\n    \n    // Threaded neck\n    difference() {\n        cylinder(h = 8, d = 42, center = false);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h = 6, d = 38, center = false);\n    }\n    \n    // Screw-on cap\n    translate([0, 0, 60]) {\n        // Cap base\n        difference() {\n            cylinder(h = 10, d = 48, center = false);\n            \n            // Cap inner\n            translate([0, 0, 2])\n                cylinder(h = 8, d = 42, center = false);\n        }\n        \n        // Cap handle\n        translate([0, 0, 10]) {\n            // Handle base\n            cylinder(h = 2, d = 30, center = false);\n            \n            // Handle grip\n            translate([0, 0, 2])\n                cube([30, 8, 6], center = true);\n        }\n    }\n    \n    // Toy details - star decorations around jar\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([20, 0, 30])\n                toy_star();\n    }\n    \n    // Base ring detail\n    translate([0, 0, 2])\n        difference() {\n            cylinder(h = 4, d = 54, center = false);\n            cylinder(h = 4, d = 50, center = false);\n        }\n}\n\n// Toy star decoration module\nmodule toy_star() {\n    scale([0.8, 0.8, 0.8]) {\n        union() {\n            // Star points\n            for (i = [0:4]) {\n                rotate([0, 0, i * 72])\n                    translate([5, 0, 0])\n                        cube([10, 4, 2], center = true);\n            }\n            \n            // Star center\n            cylinder(h = 2.5, d = 8, center = true);\n        }\n    }\n}\n\n// Generate the jar toy\njar_toy();",
    "renders": true
  },
  {
    "toy": "bottle",
    "openscad_code": "// Realistic Toy Bottle - Medium Complexity\n// Designed for 3D printing with no overhangs\n// Overall height: 120mm\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main bottle body with realistic proportions\nmodule bottle_body() {\n    difference() {\n        // Main cylindrical body\n        union() {\n            // Base cylinder\n            cylinder(h=80, d1=35, d2=45);\n            // Middle bulge for realistic bottle shape\n            translate([0, 0, 80])\n                cylinder(h=25, d1=45, d2=50);\n            // Neck taper\n            translate([0, 0, 105])\n                cylinder(h=15, d1=50, d2=28);\n        }\n        \n        // Hollow interior (2mm wall thickness)\n        translate([0, 0, -1])\n            cylinder(h=122, d1=31, d2=46);\n        \n        // Bottom indentation for stability\n        translate([0, 0, -1])\n            cylinder(h=3, d1=25, d2=35);\n    }\n}\n\n// Bottle cap with child-safe design\nmodule bottle_cap() {\n    union() {\n        // Main cap body\n        difference() {\n            cylinder(h=12, d=32);\n            // Inner hollow for threading\n            translate([0, 0, -1])\n                cylinder(h=14, d=24);\n        }\n        \n        // Gripping ridges around cap\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([13, 0, 0])\n                    cube([2.5, 2, 12], center=true);\n        }\n        \n        // Top dome detail\n        translate([0, 0, 12])\n            sphere(d=32);\n    }\n}\n\n// Toy label detail around bottle\nmodule bottle_label() {\n    // Label panel recessed into bottle\n    difference() {\n        // Main label shape\n        translate([0, -25, 40])\n            cube([50, 2, 60], center=true);\n        \n        // Recess for sticker placement\n        translate([0, -24, 40])\n            cube([48, 1, 58], center=true);\n    }\n}\n\n// Base ring for added stability\nmodule base_ring() {\n    difference() {\n        // Wide base ring\n        cylinder(h=4, d1=45, d2=48);\n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=6, d1=35, d2=35);\n    }\n}\n\n// Playful bubbles inside (decorative)\nmodule toy_bubbles() {\n    // Randomly placed small spheres inside walls\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([15, 0, 20 + i*15])\n                sphere(d=4);\n    }\n}\n\n// Assembly\nunion() {\n    // Bottle base structure\n    translate([0, 0, 4])\n        bottle_body();\n    \n    // Base stability ring\n    base_ring();\n    \n    // Label detail\n    bottle_label();\n    \n    // Cap on top\n    translate([0, 0, 120])\n        bottle_cap();\n    \n    // Decorative bubbles (integrated into walls)\n    toy_bubbles();\n}",
    "renders": true
  },
  {
    "toy": "can",
    "openscad_code": "// Toy Can - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm diameter, 120mm height\n\nmodule can_body() {\n    // Outer shell with 2mm wall thickness\n    difference() {\n        cylinder(h=100, d=80, $fn=100);\n        translate([0, 0, 2])\n            cylinder(h=98, d=76, $fn=100);\n    }\n}\n\nmodule can_bottom() {\n    // Solid bottom with recessed area\n    difference() {\n        cylinder(h=5, d=80, $fn=100);\n        translate([0, 0, 3])\n            cylinder(h=3, d=76, $fn=100);\n    }\n}\n\nmodule can_top_rim() {\n    // Top rim with lip for lid\n    difference() {\n        cylinder(h=8, d=84, $fn=100);\n        translate([0, 0, 6])\n            cylinder(h=4, d=78, $fn=100);\n    }\n}\n\nmodule lid() {\n    // Separate lid with pull tab\n    difference() {\n        // Main lid disc\n        cylinder(h=4, d=82, $fn=100);\n        translate([0, 0, 2])\n            cylinder(h=3, d=78, $fn=100);\n    }\n    \n    // Pull tab\n    translate([0, 38, 4])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=12, d=6, $fn=20);\n        translate([0, 0, 10])\n            cylinder(h=2, d=4, $fn=20);\n    }\n}\n\nmodule label_bumps() {\n    // Small bumps around the can for label texture\n    for(i=[0:15:359]) {\n        rotate([0, 0, i])\n        translate([39, 0, 50])\n        sphere(d=2, $fn=10);\n    }\n}\n\nmodule seam_lines() {\n    // Vertical seam lines for realism\n    for(i=[0:90:359]) {\n        rotate([0, 0, i])\n        translate([40, 0, 50])\n        cube([2, 1, 100], center=true);\n    }\n}\n\n// Build the can\ntranslate([0, 0, 5]) {\n    union() {\n        // Main body assembly\n        can_body();\n        \n        // Bottom\n        translate([0, 0, 0])\n            can_bottom();\n        \n        // Top rim\n        translate([0, 0, 100])\n            can_top_rim();\n        \n        // Surface details\n        label_bumps();\n        seam_lines();\n    }\n    \n    // Separate lid positioned next to can\n    translate([100, 0, 105])\n    lid();\n}",
    "renders": true
  },
  {
    "toy": "bowl",
    "openscad_code": "// Realistic Toy Bowl with Toy-Specific Features\n// Designed for 3D printing - 80mm diameter, 40mm height\n// Wall thickness 2mm throughout\n\n// Main parameters\nbowl_diameter = 80;\nbowl_height = 40;\nwall_thickness = 2;\nbase_thickness = 3;\n\n// Toy features\nhandle_width = 8;\nhandle_thickness = 3;\nleg_count = 4;\nleg_height = 8;\n\n// Create the main bowl structure\nmodule main_bowl() {\n    difference() {\n        // Outer bowl shape\n        cylinder(h=bowl_height, d=bowl_diameter, $fn=64);\n        \n        // Inner hollow space\n        translate([0, 0, base_thickness])\n        cylinder(h=bowl_height - base_thickness + 1, d=bowl_diameter - (2*wall_thickness), $fn=64);\n        \n        // Rounded bottom transition\n        translate([0, 0, base_thickness])\n        sphere(d=bowl_diameter - (2*wall_thickness), $fn=64);\n    }\n}\n\n// Toy-style handles on sides\nmodule side_handles() {\n    // Left handle\n    translate([-bowl_diameter/2 - handle_width/2, 0, bowl_height/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=handle_width, d=handle_thickness, $fn=16);\n        // Grip hole\n        translate([0, 0, handle_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=handle_width + 1, d=handle_thickness - 2, $fn=16);\n    }\n    \n    // Right handle (mirrored)\n    mirror([1, 0, 0])\n    translate([-bowl_diameter/2 - handle_width/2, 0, bowl_height/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=handle_width, d=handle_thickness, $fn=16);\n        translate([0, 0, handle_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=handle_width + 1, d=handle_thickness - 2, $fn=16);\n    }\n}\n\n// Toy-style legs for stability\nmodule support_legs() {\n    for (i = [0:leg_count-1]) {\n        rotate([0, 0, i * 360/leg_count])\n        translate([bowl_diameter/2 - 10, 0, -leg_height - base_thickness])\n        difference() {\n            // Main leg\n            cylinder(h=leg_height, d=6, $fn=8);\n            // Hollow leg for material savings\n            cylinder(h=leg_height + 1, d=3, $fn=8);\n        }\n    }\n}\n\n// Decorative ridge around top edge\nmodule top_rim() {\n    translate([0, 0, bowl_height - 3])\n    difference() {\n        cylinder(h=3, d=bowl_diameter + 2, $fn=64);\n        cylinder(h=4, d=bowl_diameter - 2, $fn=64);\n    }\n}\n\n// Toy-safe rounded interior bottom\nmodule rounded_bottom() {\n    difference() {\n        translate([0, 0, base_thickness])\n        sphere(d=bowl_diameter - (2*wall_thickness), $fn=64);\n        // Cut off top half of sphere\n        translate([0, 0, base_thickness])\n        cube([bowl_diameter, bowl_diameter, bowl_diameter/2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bowl structure\n    main_bowl();\n    \n    // Add rounded bottom inside\n    rounded_bottom();\n    \n    // Add toy handles\n    side_handles();\n    \n    // Add support legs\n    translate([0, 0, 0])\n    support_legs();\n    \n    // Add decorative rim\n    top_rim();\n}",
    "renders": true
  }
]