[
  {
    "toy": "ball",
    "openscad_code": "// Realistic 3D Printable Ball Toy – Medium Complexity\n// Diameter ≈ 80 mm, wall thickness 2 mm, hollow inside\n\n// Parameters\nball_d = 80;           // outer diameter in mm\nwall_t = 2;            // wall thickness\npanel_w = 12;          // width of each colored panel\nridge_h = 1.5;         // height of seam ridges\nnum_panels = 6;        // longitudinal colored panels\nnum_rings  = 3;        // latitudinal colored rings\npeg_d = 6;             // axle peg diameter\npeg_l = 10;            // peg length\n\n// Main hollow ball\nmodule ball_shell()\n{\n    difference() {\n        sphere(d = ball_d, $fn = 120);\n        sphere(d = ball_d - 2*wall_t, $fn = 120);\n    }\n}\n\n// Raised seam ridges between panels\nmodule seam_ridges() {\n    for (i = [0 : num_panels - 1]) {\n        rotate([0, 0, i * 360/num_panels])\n            translate([0, 0, -ball_d/2]) {\n                rotate_extrude($fn = 120)\n                    polygon(points = [\n                        [0,0],\n                        [ridge_h, 0],\n                        [ridge_h, ball_d],\n                        [0, ball_d]\n                    ]);\n            }\n    }\n}\n\n// Latitudinal rings for extra grip\nmodule grip_rings() {\n    for (i = [1 : num_rings]) {\n        translate([0, 0, -ball_d/2 + i*(ball_d/(num_rings+1))]) {\n            rotate_extrude($fn = 120)\n                polygon(points = [\n                    [ball_d/2 - ridge_h, 0],\n                    [ball_d/2, 0],\n                    [ball_d/2, ridge_h],\n                    [ball_d/2 - ridge_h, ridge_h]\n                ]);\n        }\n    }\n}\n\n// Decorative colored panels (thin shells)\nmodule colored_panels() {\n    for (i = [0 : num_panels - 1]) {\n        rotate([0, 0, i * 360/num_panels + 360/num_panels/2])\n            translate([0, 0, -ball_d/2]) {\n                difference() {\n                    rotate_extrude(angle = 360/num_panels, $fn = 20)\n                        polygon(points = [\n                            [ball_d/2 - wall_t, 0],\n                            [ball_d/2 - wall_t, ball_d],\n                            [ball_d/2 - 0.2, ball_d],\n                            [ball_d/2 - 0.2, 0]\n                        ]);\n                    // small cutouts for color separation\n                    translate([ball_d/2 - wall_t/2, ball_d/2])\n                        cube([wall_t*2, wall_t, wall_t], center = true);\n                }\n            }\n    }\n}\n\n// Small pegs for axle inserts (print separately or use support)\nmodule axle_pegs() {\n    for (axis = [[1,0,0], [0,1,0], [0,0,1]]) {\n        translate(v = axis * (ball_d/2 - peg_l/2))\n            rotate([0, 90*axis.y, 90*axis.x])\n                cylinder(d = peg_d, h = peg_l, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    ball_shell();\n    seam_ridges();\n    grip_rings();\n    colored_panels();\n    axle_pegs();\n}",
    "renders": true
  },
  {
    "toy": "football",
    "openscad_code": "// Realistic Toy Football - Medium Complexity\n// Size: ~100mm diameter, 3D printable with 2mm walls\n\n// Main parameters\nball_diameter = 100;\nwall_thickness = 2;\npanel_thickness = 3;\nseam_width = 1.5;\n\n// Create football with panels\nmodule football() {\n    // Main ball shell\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            sphere(d = ball_diameter - 2*wall_thickness);\n    }\n    \n    // Add toy valve for inflation\n    translate([0, 0, ball_diameter/2])\n        union() {\n            // Valve base\n            cylinder(h = 4, d1 = 8, d2 = 6, $fn = 16);\n            // Valve top\n            translate([0, 0, 4])\n                cylinder(h = 2, d = 4, $fn = 16);\n        }\n    \n    // Create pentagon panels\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([0, ball_diameter/2 - panel_thickness/2, 0])\n                pentagon_panel();\n    }\n    \n    // Create hexagon panels\n    for(i = [0:19]) {\n        rotate([0, 0, i * 18])\n            translate([ball_diameter/4, ball_diameter/4 - panel_thickness/2, 0])\n                rotate([90, 0, 0])\n                    hexagon_panel();\n    }\n}\n\n// Pentagon panel module\nmodule pentagon_panel() {\n    linear_extrude(height = panel_thickness)\n        offset(r = -seam_width)\n            polygon(points=[\n                [0, 20], [19, 6], [12, -16], [-12, -16], [-19, 6]\n            ]);\n}\n\n// Hexagon panel module\nmodule hexagon_panel() {\n    linear_extrude(height = panel_thickness)\n        offset(r = -seam_width)\n            polygon(points=[\n                [17, 0], [9, 15], [-9, 15], [-17, 0], [-9, -15], [9, -15]\n            ]);\n}\n\n// Add toy grip texture\nmodule grip_texture() {\n    for(a = [0:45:315]) {\n        rotate([0, 0, a])\n            for(r = [30:10:70]) {\n                translate([r, 0, ball_diameter/2 - 1])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1, d = 3, $fn = 8);\n            }\n    }\n}\n\n// Add toy brand logo placeholder\nmodule logo() {\n    translate([0, 0, ball_diameter/2 - 0.5])\n        rotate([90, 0, 0])\n            linear_extrude(height = 0.5)\n                text(\"TOY\", size = 10, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\nunion() {\n    football();\n    grip_texture();\n    logo();\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -ball_diameter/2 - 5])\n    cylinder(h = 5, d = 30, $fn = 32);",
    "renders": true
  },
  {
    "toy": "baseball",
    "openscad_code": "// Realistic 3D printable baseball toy (medium complexity)\n// Overall diameter ≈ 60 mm, wall thickness 2 mm\n\nmodule baseball_shell() {\n    // Main hollow sphere\n    difference() {\n        sphere(d = 60, $fn = 128);                // outer skin\n        sphere(d = 56, $fn = 128);                // inner hollow\n    }\n}\n\nmodule seam_line(angle) {\n    // Raised seam running along great circle\n    rotate([0, 0, angle])\n    rotate_extrude(angle = 180, $fn = 64)\n    translate([29, 0, 0])\n    polygon(points = [[0, 0], [2, 0.75], [2, 1.25], [0, 2]]);\n}\n\nmodule stitch_holes(seam_angle) {\n    // 108 holes along each seam (every 3.333°)\n    for(i = [0:3.333:360]) {\n        rotate([0, 0, seam_angle])\n        rotate([0, 0, i])\n        translate([29.75, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2.5, d = 1.2, $fn = 12);\n    }\n}\n\nmodule stitches(seam_angle) {\n    // Raised V-shaped stitches\n    for(i = [0:6.666:360]) {\n        rotate([0, 0, seam_angle])\n        rotate([0, 0, i])\n        translate([29.75, 0, 0]) {\n            // Left thread\n            rotate([0, 0, 15])\n            cylinder(h = 3, d = 0.6, $fn = 8);\n            // Right thread\n            rotate([0, 0, -15])\n            cylinder(h = 3, d = 0.6, $fn = 8);\n        }\n    }\n}\n\nmodule internal_support() {\n    // Internal cross structure for rigidity (printable without supports)\n    intersection() {\n        sphere(d = 55, $fn = 32);                 // stay inside shell\n        // X-shaped rib\n        cube([60, 2, 2], center = true);\n        rotate([0, 0, 90])\n        cube([60, 2, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    baseball_shell();\n    seam_line(0);        // first seam\n    seam_line(90);       // second seam\n    stitches(0);         // stitches on seam A\n    stitches(90);        // stitches on seam B\n    difference() {\n        union() {\n            stitches(0);\n            stitches(90);\n        }\n        stitch_holes(0);   // cut holes for thread look\n        stitch_holes(90);\n    }\n    internal_support();  // hidden inside\n}",
    "renders": true
  },
  {
    "toy": "basketball",
    "openscad_code": "// Basketball Toy (Medium complexity, realistic style)\n// Standard size 7 basketball scaled to 120mm diameter\n// 3D-printable with 2mm walls and minimal overhangs\n\n// Main parameters\nball_diameter = 120;\nwall_thickness = 2;\nrib_width = 3;\nrib_depth = 1.5;\n\n// Panel dimensions\npanel_width = 50;\npanel_height = 25;\n\n// Valve detail\nvalve_radius = 4;\nvalve_height = 3;\n\n// Toy-specific features\nhandle_radius = 8;\nhandle_clearance = 25;\n\n// Create hollow ball with ribs\nmodule basketball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness*2, $fn = 64);\n    }\n}\n\n// Create single rib segment\nmodule rib_segment(length, width, depth) {\n    difference() {\n        // Main rib body\n        cube([length, width, depth], center = true);\n        \n        // Rounded edges\n        translate([0, 0, depth/2])\n        cylinder(h = depth, r = width/2, $fn = 16);\n    }\n}\n\n// Create horizontal ribs\nmodule horizontal_ribs() {\n    // Top rib\n    translate([0, 0, ball_diameter/2 - 25])\n    rotate([90, 0, 0])\n    rib_segment(panel_width, rib_width, rib_depth);\n    \n    // Bottom rib\n    translate([0, 0, -ball_diameter/2 + 25])\n    rotate([90, 0, 0])\n    rib_segment(panel_width, rib_width, rib_depth);\n}\n\n// Create vertical ribs\nmodule vertical_ribs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([ball_diameter/2 - 25, 0, 0])\n        rotate([0, 90, 0])\n        rib_segment(panel_height*2, rib_width, rib_depth);\n    }\n}\n\n// Create curved panel lines\nmodule panel_lines() {\n    // Top panels\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, ball_diameter/2 - 15])\n        rotate([90, 0, 0])\n        cylinder(h = 1.5, r1 = 15, r2 = 20, $fn = 4);\n    }\n    \n    // Bottom panels\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, -ball_diameter/2 + 15])\n        rotate([90, 0, 0])\n        cylinder(h = 1.5, r1 = 15, r2 = 20, $fn = 4);\n    }\n}\n\n// Create valve detail\nmodule valve() {\n    // Valve base\n    translate([0, ball_diameter/2 - 5, 0])\n    rotate([-90, 0, 0])\n    difference() {\n        cylinder(h = valve_height, r = valve_radius, $fn = 16);\n        cylinder(h = valve_height + 1, r = valve_radius - 1, $fn = 16);\n    }\n    \n    // Valve stem\n    translate([0, ball_diameter/2 - 3, 0])\n    rotate([-90, 0, 0])\n    cylinder(h = 2, r = 1.5, $fn = 8);\n}\n\n// Create toy handle feature\nmodule toy_handle() {\n    // Handle loop\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer handle\n        rotate_extrude(angle = 180, $fn = 32)\n        translate([handle_clearance + handle_radius, 0, 0])\n        circle(r = handle_radius, $fn = 16);\n        \n        // Inner clearance\n        rotate_extrude(angle = 180, $fn = 32)\n        translate([handle_clearance + handle_radius, 0, 0])\n        circle(r = handle_radius - wall_thickness, $fn = 16);\n    }\n}\n\n// Create grip texture\nmodule grip_texture() {\n    // Small bumps for grip\n    for (theta = [0:30:180]) {\n        for (phi = [0:30:360]) {\n            rotate([theta, 0, phi])\n            translate([ball_diameter/2 - wall_thickness, 0, 0])\n            sphere(r = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Basic basketball shell\n    basketball_shell();\n    \n    // External ribs and details\n    union() {\n        horizontal_ribs();\n        vertical_ribs();\n        panel_lines();\n        valve();\n    }\n    \n    // Toy-specific handle (optional - can be commented out)\n    // toy_handle();\n    \n    // Grip texture (optional - for better handling)\n    // grip_texture();\n}\n\n// Add subtle seams between panels\nfor (i = [0:5]) {\n    rotate([0, 0, i * 60])\n    translate([ball_diameter/2 - 1, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 2, r = 0.5, $fn = 8);\n}",
    "renders": true
  },
  {
    "toy": "soccerball",
    "openscad_code": "// Realistic Toy Soccer Ball - Medium Complexity\n// 3D printable soccer ball toy with realistic panel pattern\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Parameters\nball_diameter = 60;  // 60mm toy soccer ball\npanel_thickness = 2;  // 2mm wall thickness for printing\nseam_width = 1.5;    // Realistic seam between panels\ninflation_valve_size = 3;\n\n// Main ball structure\nmodule soccer_ball() {\n    difference() {\n        // Solid ball core\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - panel_thickness*2);\n        \n        // Inflation valve hole\n        translate([0, 0, ball_diameter/2 - panel_thickness])\n            rotate([90, 0, 0])\n                cylinder(h = panel_thickness + 1, d = inflation_valve_size);\n    }\n}\n\n// Pentagon panel\nmodule pentagon_panel() {\n    difference() {\n        // Outer pentagon surface\n        linear_extrude(height = panel_thickness) {\n            circle(d = ball_diameter/4, $fn = 5);\n        }\n        \n        // Inner pentagon for wall thickness\n        translate([0, 0, panel_thickness/2])\n            linear_extrude(height = panel_thickness/2 + 0.1) {\n                circle(d = ball_diameter/4 - 1, $fn = 5);\n            }\n    }\n}\n\n// Hexagon panel\nmodule hexagon_panel() {\n    difference() {\n        // Outer hexagon surface\n        linear_extrude(height = panel_thickness) {\n            circle(d = ball_diameter/4.5, $fn = 6);\n        }\n        \n        // Inner hexagon for wall thickness\n        translate([0, 0, panel_thickness/2])\n            linear_extrude(height = panel_thickness/2 + 0.1) {\n                circle(d = ball_diameter/4.5 - 1, $fn = 6);\n            }\n    }\n}\n\n// Position panels on sphere surface\nmodule panel_positions() {\n    // Pentagon panels (top and bottom)\n    translate([0, 0, ball_diameter/2 - panel_thickness/2])\n        rotate([0, 0, 0])\n            pentagon_panel();\n    \n    translate([0, 0, -ball_diameter/2 + panel_thickness/2])\n        rotate([180, 0, 0])\n            pentagon_panel();\n    \n    // Pentagon panel (front)\n    translate([0, ball_diameter/2 - panel_thickness/2, 0])\n        rotate([90, 0, 0])\n            pentagon_panel();\n    \n    // Hexagon panels around equator\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            // Upper ring\n            translate([0, \n                      (ball_diameter/2 - panel_thickness/2) * sin(37.4), \n                      (ball_diameter/2 - panel_thickness/2) * cos(37.4)])\n                rotate([37.4, 0, 0])\n                    hexagon_panel();\n            \n            // Lower ring\n            translate([0, \n                      (ball_diameter/2 - panel_thickness/2) * sin(37.4), \n                      -(ball_diameter/2 - panel_thickness/2) * cos(37.4)])\n                rotate([-37.4, 0, 0])\n                    hexagon_panel();\n        }\n    }\n    \n    // Additional hexagon panels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([(ball_diameter/2 - panel_thickness/2) * sin(63.4), \n                      0, \n                      (ball_diameter/2 - panel_thickness/2) * cos(63.4)])\n                rotate([0, 90, 63.4])\n                    hexagon_panel();\n            \n            translate([-(ball_diameter/2 - panel_thickness/2) * sin(63.4), \n                      0, \n                      (ball_diameter/2 - panel_thickness/2) * cos(63.4)])\n                rotate([0, 90, -63.4])\n                    hexagon_panel();\n        }\n    }\n}\n\n// Seams between panels\nmodule seams() {\n    color(\"black\") {\n        // Create raised seams\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([0, 0, ball_diameter/2 - seam_width/2])\n                    cylinder(h = seam_width, d = seam_width, $fn = 8);\n            }\n        }\n        \n        // Additional seam elements\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, \n                          (ball_diameter/2 - seam_width/2) * sin(37.4), \n                          (ball_diameter/2 - seam_width/2) * cos(37.4)])\n                    rotate([0, 37.4, 0])\n                        cylinder(h = seam_width, d = seam_width, $fn = 8);\n            }\n        }\n    }\n}\n\n// Toy-specific features\nmodule toy_features() {\n    // Small grip texture bumps\n    for(i = [0:20]) {\n        rotate([rand(360), rand(360), rand(360)]) {\n            translate([rand(ball_diameter/3), rand(ball_diameter/3), rand(ball_diameter/3)])\n                sphere(d = 1);\n        }\n    }\n    \n    // Toy safety valve cap\n    translate([0, 0, ball_diameter/2 + 1])\n        cylinder(h = 2, d = inflation_valve_size + 2);\n}\n\n// Main assembly\nunion() {\n    // Base ball structure\n    soccer_ball();\n    \n    // Position all panels\n    panel_positions();\n    \n    // Add seams\n    seams();\n    \n    // Add toy features\n    toy_features();\n}",
    "renders": true
  },
  {
    "toy": "tennisball",
    "openscad_code": "// Tennis Ball Toy - Realistic Style, Medium Complexity\n// Diameter: 67mm, Wall thickness: 2mm for 3D printing\n// Includes hollow core, seam lines, and toy-friendly features\n\n$fn = 48;\n\n// Main parameters\nball_diameter = 67;\nwall_thickness = 2;\nseam_width = 1.5;\nseam_depth = 1;\nfurrow_width = 3;\nfurrow_depth = 0.5;\n\n// Create hollow tennis ball shell\nmodule tennis_ball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Inner hollow\n        sphere(d = ball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Create curved seam line\nmodule seam_curve(angle) {\n    rotate([0, angle, 0]) {\n        // Create curved seam by differencing a torus segment\n        difference() {\n            // Main seam body\n            rotate_extrude(angle = 180, $fn = 64) {\n                translate([ball_diameter/2 - seam_depth, 0, 0]) {\n                    square([seam_width, seam_depth], center = true);\n                }\n            }\n            \n            // Smooth edges\n            rotate_extrude(angle = 180, $fn = 64) {\n                translate([ball_diameter/2 - seam_depth/2, 0, 0]) {\n                    circle(r = seam_depth/2, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Create furrow pattern for toy grip\nmodule furrows() {\n    // Generate furrows along seam lines\n    for (i = [0:15:345]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, ball_diameter/2 - furrow_depth]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = furrow_depth + 1, r = furrow_width/2, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Create toy-friendly solid core (optional fill)\nmodule solid_core() {\n    // Small inner sphere for structural integrity\n    sphere(d = ball_diameter - 4 * wall_thickness);\n}\n\n// Assembly module\nmodule tennis_ball_toy() {\n    // Main shell\n    tennis_ball_shell();\n    \n    // Add seam lines at 45 degree angles\n    seam_curve(45);\n    seam_curve(-45);\n    \n    // Add grip furrows\n    furrows();\n    \n    // Optional solid core - uncomment for solid toy\n    // translate([0, 0, 0]) {\n    //     color(\"lightgreen\") solid_core();\n    // }\n    \n    // Add toy safety features - rounded edges\n    translate([0, 0, ball_diameter/2]) {\n        cylinder(h = 2, r1 = 3, r2 = 1, $fn = 16);\n    }\n    translate([0, 0, -ball_diameter/2]) {\n        cylinder(h = 2, r1 = 1, r2 = 3, $fn = 16);\n    }\n}\n\n// Render the model\ntennis_ball_toy();",
    "renders": true
  },
  {
    "toy": "volleyball",
    "openscad_code": "// Realistic toy volleyball\n// Diameter: 100 mm, wall thickness: 2 mm\n// Features: Panel seams, inflation valve, toy-like proportions\n\n// Main parameters\nvolleyball_d = 100;          // 100 mm diameter\nwall_thickness = 2;          // 2 mm wall thickness for 3D printing\nseam_width = 1.5;            // Width of panel seams\nvalve_size = 6;              // Inflation valve diameter\n\n// Panel parameters – volleyball has 18 panels (6 identical stripes)\npanel_angle = 360/6;         // 60 degrees per repeating pattern\n\n// Helper module to create a single panel strip\nmodule panel_strip(height, width, thickness) {\n    difference() {\n        // Main panel shape – curved strip\n        linear_extrude(height = thickness, center = true, convexity = 10)\n        polygon(points = [\n            [0, -width/2],\n            [height*0.8, -width/2*0.9],\n            [height*0.9, 0],\n            [height*0.8, width/2*0.9],\n            [0, width/2]\n        ]);\n        \n        // Cut edges to make curved shape\n        translate([height*0.45, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = width*1.5, r = height*0.55, center = true);\n    }\n}\n\n// Helper module to create seam between panels\nmodule seam(length, width, height) {\n    color(\"gray20\")\n    translate([0, 0, -height/2])\n        cube([length, width, height], center = true);\n}\n\n// Main volleyball shell with hollow interior\nmodule volleyball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = volleyball_d, $fn = 100);\n        \n        // Inner hollow sphere\n        sphere(d = volleyball_d - wall_thickness*2, $fn = 100);\n    }\n}\n\n// Create raised panel seams\nmodule panel_seams() {\n    // First set of seams (vertical)\n    for (i = [0:5]) {\n        rotate([0, 0, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.9, seam_width*2, seam_width*2);\n    }\n    \n    // Second set of seams (rotated 90 degrees)\n    for (i = [0:5]) {\n        rotate([0, 90, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.9, seam_width*2, seam_width*2);\n    }\n    \n    // Third set of seams (angled)\n    for (i = [0:5]) {\n        rotate([45, 0, i * panel_angle])\n            translate([0, 0, volleyball_d/2 - seam_width/2])\n                seam(volleyball_d*0.7, seam_width*2, seam_width*2);\n    }\n}\n\n// Inflation valve detail\nmodule inflation_valve() {\n    color(\"gray30\")\n    translate([0, 0, volleyball_d/2])\n    difference() {\n        // Valve base\n        cylinder(h = 3, r = valve_size/2, $fn = 20);\n        \n        // Valve hole\n        translate([0, 0, -1])\n            cylinder(h = 5, r = valve_size/4, $fn = 20);\n    }\n}\n\n// Toy-specific details – small bumps for grip texture\nmodule grip_texture() {\n    // Create small bumps across the surface\n    for (theta = [0:30:180]) {\n        for (phi = [0:45:360]) {\n            translate([\n                (volleyball_d/2 - 1) * cos(phi) * sin(theta),\n                (volleyball_d/2 - 1) * sin(phi) * sin(theta),\n                (volleyball_d/2 - 1) * cos(theta)\n            ]) {\n                sphere(d = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    volleyball_shell();\n    \n    // Panel seams\n    panel_seams();\n    \n    // Inflation valve\n    inflation_valve();\n    \n    // Grip texture\n    grip_texture();\n}",
    "renders": true
  },
  {
    "toy": "beachball",
    "openscad_code": "// Beachball toy - realistic style, medium complexity\n// Overall dimensions: 100mm diameter ball with 2mm wall thickness\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nball_diameter = 100;\nwall_thickness = 2;\nseam_width = 4;\nvalve_length = 15;\nvalve_diameter = 6;\npanel_segments = 6;  // Classic 6-panel beachball\n\n// Color definitions (classic beachball colors)\ncolors = [\"red\", \"white\", \"blue\", \"white\", \"yellow\", \"white\"];\n\n// Main hollow ball structure\nmodule beachball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Inner hollow sphere\n        sphere(d = ball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Panel dividing seams\nmodule panel_seams() {\n    for(i = [0:panel_segments-1]) {\n        rotate([0, 0, i * 360/panel_segments]) {\n            // Vertical seam\n            translate([0, 0, -ball_diameter/2 - 1]) {\n                cylinder(h = ball_diameter + 2, d = seam_width, center = true);\n            }\n            \n            // Horizontal seam (latitude)\n            rotate([90, 0, 0]) {\n                translate([0, 0, 0]) {\n                    cylinder(h = ball_diameter, d = seam_width, center = true);\n                }\n            }\n        }\n    }\n    \n    // Equatorial seam\n    rotate([0, 90, 0]) {\n        cylinder(h = ball_diameter, d = seam_width, center = true);\n    }\n}\n\n// Valve assembly for inflation\nmodule inflation_valve() {\n    // Valve base attached to ball\n    translate([ball_diameter/2 - wall_thickness/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Outer valve tube\n                cylinder(h = valve_length, d = valve_diameter + 2, center = true);\n                \n                // Inner hole\n                cylinder(h = valve_length + 2, d = valve_diameter, center = true);\n            }\n        }\n    }\n    \n    // Valve cap\n    translate([ball_diameter/2 + valve_length/2 + 2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Cap body\n                cylinder(h = 8, d = valve_diameter + 4, center = true);\n                \n                // Grip ridges\n                for(i = [0:5]) {\n                    rotate([0, 0, i * 60]) {\n                        translate([0, -valve_diameter/2 - 1, 0]) {\n                            cube([valve_diameter + 4, 2, 8], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Panel color segments (represented as indentations)\nmodule panel_details() {\n    for(i = [0:panel_segments-1]) {\n        rotate([0, 0, i * 360/panel_segments + 30]) {\n            translate([0, 0, 0]) {\n                difference() {\n                    sphere(d = ball_diameter - 0.5);\n                    \n                    // Cut panel shape\n                    rotate([0, 0, -30]) {\n                        intersection() {\n                            sphere(d = ball_diameter - 0.1);\n                            cube([ball_diameter, ball_diameter, ball_diameter], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    beachball_shell();\n    \n    // Panel seams for realistic look\n    panel_seams();\n    \n    // Inflation valve\n    inflation_valve();\n    \n    // Panel details\n    panel_details();\n}",
    "renders": true
  },
  {
    "toy": "golfball",
    "openscad_code": "// Realistic Golf Ball Toy - Medium Complexity\n// Diameter: 42.67mm (regulation size)\n\nmodule golf_ball() {\n    ball_diameter = 42.67;\n    wall_thickness = 2;\n    \n    // Main hollow ball\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness * 2);\n    }\n    \n    // Dimples - 336 total in icosahedral pattern\n    dimple_depth = 0.5;\n    dimple_radius = 2.5;\n    \n    // Top pentagon dimples\n    for (i = [0:4]) {\n        angle = i * 72;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 3, ball_diameter/2 - 5])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Second ring\n    for (i = [0:9]) {\n        angle = i * 36;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 8, ball_diameter/2 - 6])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Third ring\n    for (i = [0:14]) {\n        angle = i * 24;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 12, ball_diameter/2 - 7])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Equator\n    for (i = [0:19]) {\n        angle = i * 18;\n        rotate([0, 0, angle])\n        translate([0, ball_diameter/2 - 15, 0])\n        rotate([90, 0, 0])\n        dimple(dimple_radius, dimple_depth);\n    }\n    \n    // Bottom symmetric dimples (mirror top)\n    mirror([0, 0, 1]) {\n        // Bottom pentagon\n        for (i = [0:4]) {\n            angle = i * 72;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 3, ball_diameter/2 - 5])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n        \n        // Second bottom ring\n        for (i = [0:9]) {\n            angle = i * 36;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 8, ball_diameter/2 - 6])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n        \n        // Third bottom ring\n        for (i = [0:14]) {\n            angle = i * 24;\n            rotate([0, 0, angle])\n            translate([0, ball_diameter/2 - 12, ball_diameter/2 - 7])\n            rotate([90, 0, 0])\n            dimple(dimple_radius, dimple_depth);\n        }\n    }\n    \n    // Toy safety features - rounded edges\n    difference() {\n        sphere(d = ball_diameter + 0.5);\n        sphere(d = ball_diameter + 0.1);\n    }\n    \n    // Internal support structure for 3D printing\n    support_radius = 2;\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 0, -ball_diameter/4])\n        cylinder(h = ball_diameter/2, r = support_radius, $fn = 6);\n    }\n    \n    // Alignment mark for putting practice\n    difference() {\n        translate([0, -ball_diameter/2 + 0.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r1 = 1, r2 = 0.5, $fn = 3);\n        translate([0, -ball_diameter/2 - 1, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 0.8, $fn = 3);\n    }\n}\n\nmodule dimple(radius, depth) {\n    difference() {\n        sphere(r = radius);\n        translate([0, 0, -radius - depth])\n        sphere(r = radius + depth);\n    }\n}\n\n// Generate the golf ball\ngolf_ball();",
    "renders": true
  },
  {
    "toy": "bowlingball",
    "openscad_code": "// Bowling Ball Toy - Realistic Style, Medium Complexity\n// 3D printable toy bowling ball with finger holes and toy-style details\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\nball_diameter = 80;  // Reasonable toy size\nwall_thickness = 2;  // For 3D printing\nhole_depth = 12;\nhole_radius = 8;\n\nmodule bowling_ball() {\n    difference() {\n        // Main ball body\n        sphere(d = ball_diameter);\n        \n        // Finger holes - realistic spacing\n        translate([15, 0, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius, $fn = 32);\n                \n        translate([-7, -12, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius * 0.9, $fn = 32);\n                \n        translate([-7, 12, ball_diameter/2 - hole_depth]) \n            rotate([0, 0, 0]) \n                cylinder(h = hole_depth + 2, r = hole_radius * 0.8, $fn = 32);\n    }\n}\n\n// Toy-style seam line around equator for manufacturing look\nmodule seam_line() {\n    difference() {\n        cylinder(h = 1.5, r = ball_diameter/2 + 0.5, center = true);\n        cylinder(h = 2, r = ball_diameter/2 - 0.5, center = true);\n    }\n}\n\n// Decorative toy-style dots (manufacturing marks)\nmodule toy_dots() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([ball_diameter/2 * 0.7, 0, 0]) {\n                sphere(r = 1.5);\n            }\n            translate([ball_diameter/2 * 0.5, 0, 15]) {\n                sphere(r = 1);\n            }\n            translate([ball_diameter/2 * 0.5, 0, -15]) {\n                sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Toy safety features - rounded edges and reinforcements\nmodule safety_ring() {\n    difference() {\n        sphere(d = ball_diameter + 1);\n        sphere(d = ball_diameter - wall_thickness);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball\n    bowling_ball();\n    \n    // Add seam line\n    translate([0, 0, 0]) \n        seam_line();\n    \n    // Add toy dots\n    color(\"gray\") \n        toy_dots();\n    \n    // Internal reinforcement\n    %safety_ring();\n}",
    "renders": true
  },
  {
    "toy": "handball",
    "openscad_code": "// Handball toy - realistic style, medium complexity\n// Overall size: 75mm diameter ball + 15mm finger grip ridges\n\nmodule finger_groove(angle, depth) {\n    // Create curved groove for finger grip\n    rotate([0, 0, angle])\n    translate([0, 37.5, 0])\n    difference() {\n        cylinder(h=5, r1=6, r2=6, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=7, r1=4, r2=4, $fn=32);\n    }\n}\n\nmodule panel_line(angle) {\n    // Create raised panel lines for realistic ball texture\n    rotate([0, 0, angle])\n    translate([0, 0, 0])\n    difference() {\n        sphere(d=76, $fn=64);\n        translate([0, 0, -1])\n        sphere(d=73, $fn=64);\n    }\n}\n\nmodule valve_stem() {\n    // Small valve stem detail\n    translate([0, 0, 37.5])\n    cylinder(h=3, r1=2, r2=2, $fn=16);\n    translate([0, 0, 40.5])\n    sphere(d=4.5, $fn=16);\n}\n\nmodule handball_toy() {\n    // Main ball body - hollow for 3D printing\n    difference() {\n        // Outer shell\n        sphere(d=75, $fn=128);\n        \n        // Inner hollow space\n        sphere(d=71, $fn=128);\n    }\n    \n    // Add finger grip grooves around circumference\n    for(i = [0:30:330]) {\n        finger_groove(i, 2);\n    }\n    \n    // Add realistic panel lines\n    panel_line(0);\n    panel_line(120);\n    panel_line(240);\n    \n    // Add valve stem detail\n    valve_stem();\n    \n    // Add subtle texture dots for grip\n    for(i = [0:15:345]) {\n        rotate([0, 0, i])\n        translate([0, 35, 35])\n        sphere(d=1.5, $fn=8);\n    }\n    \n    for(i = [7.5:15:352.5]) {\n        rotate([0, 0, i])\n        translate([0, 30, 30])\n        sphere(d=1.5, $fn=8);\n    }\n}\n\n// Render the complete handball toy\nhandball_toy();",
    "renders": true
  },
  {
    "toy": "dodgeball",
    "openscad_code": "// Dodgeball Toy - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main parameters\nball_diameter = 80;  // 80mm diameter - good size for toy\nwall_thickness = 2;  // Standard 3D printing wall thickness\ngrip_depth = 3;      // Shallow grip pattern depth\n\nmodule dodgeball_toy() {\n    difference() {\n        // Main ball body\n        sphere(d = ball_diameter);\n        \n        // Panel seams - 8 panels like real dodgeball\n        for (i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                // Vertical seam grooves\n                translate([0, 0, -ball_diameter/2 - 1])\n                    cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n            }\n        }\n        \n        // Horizontal seam grooves\n        rotate([90, 0, 0]) {\n            translate([0, 0, -ball_diameter/2 - 1])\n                cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n        }\n        rotate([0, 90, 0]) {\n            translate([0, 0, -ball_diameter/2 - 1])\n                cube([wall_thickness, ball_diameter/10, ball_diameter + 2], center = true);\n        }\n    }\n    \n    // Textured grip pattern - small circles across surface\n    module grip_pattern() {\n        // Generate grip dots in spiral pattern\n        for (lat = [-60:15:60]) {\n            for (lon = [0:30:360]) {\n                rotate([0, lat, lon]) {\n                    translate([0, 0, ball_diameter/2 - grip_depth/2])\n                        cylinder(h = grip_depth + 0.5, d = 4, center = true);\n                }\n            }\n        }\n    }\n    \n    // Apply grip pattern\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Create hollow interior\n        sphere(d = ball_diameter - 2*wall_thickness);\n        \n        // Remove grip pattern\n        grip_pattern();\n    }\n    \n    // Valve detail - realistic inflation valve\n    translate([0, 0, ball_diameter/2 - 2])\n        cylinder(h = 4, d = 8, center = true);\n    \n    // Valve cap\n    translate([0, 0, ball_diameter/2])\n        cylinder(h = 2, d = 6, center = true);\n    \n    // Valve threads (simplified)\n    for (i = [0:0.5:2]) {\n        translate([0, 0, ball_diameter/2 - 2 + i])\n            cylinder(h = 0.3, d = 7 - i*0.5, center = true);\n    }\n}\n\n// Render the complete dodgeball\ndodgeball_toy();",
    "renders": true
  },
  {
    "toy": "kickball",
    "openscad_code": "// Realistic Kickball Toy (Medium Complexity)\n// Overall diameter: 100mm, 3D printable, wall thickness 2mm\n\nmodule kickball() {\n    // Main inflated ball body\n    difference() {\n        sphere(d = 100, $fn = 64);  // Outer shell\n        sphere(d = 96, $fn = 64);   // Hollow cavity\n    }\n\n    // Valve stem for inflation\n    translate([0, 0, 50])\n        cylinder(h = 8, d1 = 6, d2 = 4, $fn = 16);\n\n    // Valve cap\n    translate([0, 0, 58])\n        cylinder(h = 4, d = 5, $fn = 16);\n\n    // Raised pentagonal panels (traditional kickball pattern)\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([0, 0, 49])\n                panel();\n    }\n\n    // Internal baffle structure for rigidity\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, 0])\n                baffle();\n    }\n}\n\nmodule panel() {\n    // Raised pentagon shape\n    linear_extrude(height = 2)\n        polygon(\n            points = [\n                [0, 30],\n                [28.5, 9.3],\n                [17.6, -24.3],\n                [-17.6, -24.3],\n                [-28.5, 9.3]\n            ]\n        );\n}\n\nmodule baffle() {\n    // Internal cross support ring\n    difference() {\n        cylinder(h = 100, d = 30, center = true, $fn = 6);\n        cylinder(h = 102, d = 26, center = true, $fn = 6);\n    }\n}\n\n// Seam detail around equator\nmodule seam() {\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 2, d = 100.5, center = true, $fn = 64);\n            cylinder(h = 3, d = 97.5, center = true, $fn = 64);\n        }\n}\n\n// Assembly with seam\nunion() {\n    kickball();\n    translate([0, 0, 0])\n        seam();\n}\n\n// Add subtle texture dots for grip\nfor (i = [0:35]) {\n    rotate([i * 10, 0, 0])\n        rotate([0, i * 20, 0])\n            translate([0, 0, 48.5])\n                sphere(d = 2, $fn = 8);\n}",
    "renders": true
  },
  {
    "toy": "netball",
    "openscad_code": "// Netball Toy – 3D printable, ~75 mm diameter\n\n// Global parameters\nball_d = 75;                 // overall diameter\nwall_t = 2;                  // wall thickness for 3D printing\ngrip_width = 6;              // width of finger-grips\ngrip_depth = 2.5;            // how far the grips sink into the ball\nsegments = 32;               // sphere resolution\n\n// Netball color\ncolor(\"orange\")\ndifference() {\n    // Outer sphere\n    sphere(d = ball_d, $fn = segments);\n\n    // Six equally-spaced finger-grip panels\n    for (rot = [0 : 60 : 300]) {\n        rotate([0, 90, rot])\n            translate([0, 0, ball_d/2 - grip_depth])\n                cube([grip_width, grip_width, grip_depth*2], center = true);\n    }\n\n    // Central cavity (hollow ball)\n    sphere(d = ball_d - 2*wall_t, $fn = segments);\n}\n\n// Valve stem – small protruding cylinder\ntranslate([0, 0, ball_d/2])\n    cylinder(h = 5, d = 6, $fn = 12);\n\n// Toy-style “joint” rings around equator for structural look\nmodule equator_ring(height, depth) {\n    rotate_extrude($fn = segments)\n        translate([ball_d/2 - depth/2, 0])\n            square([depth, height]);\n}\n\n// Upper equator ring\ntranslate([0, 0, ball_d/4])\n    equator_ring(height = 3, depth = 2.5);\n\n// Lower equator ring\ntranslate([0, 0, -ball_d/4])\n    equator_ring(height = 3, depth = 2.5);\n\n// Small support feet (three tiny spheres for stability on print bed)\nfor (a = [0 : 120 : 240]) {\n    rotate([0, 0, a])\n        translate([ball_d/2 * 0.85, 0, -ball_d/2 - 1])\n            sphere(d = 4);\n}",
    "renders": true
  },
  {
    "toy": "softball",
    "openscad_code": "// Realistic Softball Toy (Medium Complexity)\n// Overall diameter: 96mm (regulation-size toy)\n\n$fn = 50;  // Good surface quality for 3D printing\n\n// Main parameters\nsoftball_diameter = 96;           // Regulation toy softball size\nwall_thickness = 2;               // 3D-printable wall\nseam_depth = 1.5;                 // Stitched seam recess\nstitch_width = 0.8;\nstitch_length = 4;\nstitch_count = 88;                // Realistic stitch count\nlemon_peel_segments = 2;          // Two curved panels\npanel_thickness = 1.5;            // Raised panel ridges\n\n// Softball core (hollow sphere)\nmodule softball_core() {\n    difference() {\n        sphere(d = softball_diameter);\n        sphere(d = softball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Raised seam running along the equator\nmodule raised_seam() {\n    rotate([90, 0, 0])\n    difference() {\n        // Main seam ring\n        torus(softball_diameter / 2 - seam_depth / 2, seam_depth / 2);\n        \n        // Stitch holes along seam\n        for(i = [0 : stitch_count - 1]) {\n            rotate([0, 0, i * 360 / stitch_count])\n            translate([softball_diameter / 2 - seam_depth, 0, 0])\n            cube([stitch_length, stitch_width, seam_depth * 1.2], center = true);\n        }\n    }\n}\n\n// Lemon-peel style panels\nmodule lemon_peel_panels() {\n    // Panel ridges\n    for(i = [0 : lemon_peel_segments - 1]) {\n        rotate([0, 0, i * 180])\n        panel_arc();\n    }\n}\n\nmodule panel_arc() {\n    // Left panel ridge\n    translate([0, 0, -panel_thickness / 2])\n    rotate([0, 90, 0])\n    linear_extrude(height = panel_thickness)\n    offset(r = 2)\n    arc(softball_diameter / 2 - 8, [160, 200]);\n    \n    // Right panel ridge\n    translate([0, 0, -panel_thickness / 2])\n    rotate([0, 90, 0])\n    linear_extrude(height = panel_thickness)\n    offset(r = 2)\n    arc(softball_diameter / 2 - 8, [-20, 20]);\n}\n\n// Helper: Create 2D arc for panel outlines\nmodule arc(radius, angles) {\n    intersection() {\n        circle(r = radius);\n        sector(angles[0], angles[1], radius * 2);\n    }\n}\n\nmodule sector(start, end, radius) {\n    difference() {\n        circle(r = radius);\n        rotate(start) square(radius * 2);\n        rotate(end) square(radius * 2);\n    }\n}\n\n// Helper: Create torus\nmodule torus(major, minor) {\n    rotate_extrude()\n    translate([major, 0])\n    circle(r = minor);\n}\n\n// Toy safety features\nmodule safety_features() {\n    // Rounded edges on all protrusions\n    minkowski() {\n        union() {\n            softball_core();\n            raised_seam();\n            lemon_peel_panels();\n        }\n        sphere(r = 0.5);\n    }\n}\n\n// Assembly\nsafety_features();\n\n// Optional: Add small alignment dots for seams\nmodule alignment_dots() {\n    for(i = [0 : 3]) {\n        rotate([0, 0, i * 90])\n        translate([softball_diameter / 2 - 10, 0, 0])\n        sphere(d = 1.5);\n    }\n}\n\n// Uncomment to add alignment dots\n// alignment_dots();",
    "renders": true
  },
  {
    "toy": "wiffleball",
    "openscad_code": "// Wiffleball Toy - Realistic Style, Medium Complexity\n// Diameter: 75mm, Wall thickness: 2mm\n\n// Main parameters\nball_diameter = 75;\nwall_thickness = 2;\nhole_diameter = 15;\nnum_holes = 8;\n\n// Create hollow ball with holes\nmodule wiffleball() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Inner hollow space\n        sphere(d = ball_diameter - 2 * wall_thickness, $fn = 64);\n        \n        // Create holes around the ball\n        for(i = [0 : num_holes - 1]) {\n            // First set of holes\n            rotate([0, 90, i * 360 / num_holes]) \n                translate([0, 0, ball_diameter / 2]) \n                cylinder(h = wall_thickness + 2, d = hole_diameter, $fn = 32);\n            \n            // Second set offset by 45 degrees\n            rotate([45, 90, i * 360 / num_holes + 22.5]) \n                translate([0, 0, ball_diameter / 2]) \n                cylinder(h = wall_thickness + 2, d = hole_diameter * 0.8, $fn = 32);\n            \n            // Third set on equator\n            rotate([0, 0, i * 360 / num_holes]) \n                translate([ball_diameter / 2, 0, 0]) \n                cylinder(h = wall_thickness + 2, d = hole_diameter * 0.6, $fn = 32);\n        }\n        \n        // Reinforcement ring inside\n        difference() {\n            rotate([0, 90, 0])\n                cylinder(h = wall_thickness, d = ball_diameter * 0.7, $fn = 64);\n            rotate([0, 90, 0])\n                cylinder(h = wall_thickness + 1, d = ball_diameter * 0.6, $fn = 64);\n        }\n    }\n    \n    // Add seam line detail\n    difference() {\n        union() {\n            // Top seam half\n            rotate([0, 90, 0])\n                translate([0, 0, -wall_thickness/2])\n                    cylinder(h = wall_thickness, d = ball_diameter, $fn = 64);\n            \n            // Bottom seam half\n            rotate([0, 90, 0])\n                translate([0, 0, wall_thickness/2])\n                    cylinder(h = wall_thickness, d = ball_diameter, $fn = 64);\n        }\n        \n        // Cut away everything except thin seam\n        sphere(d = ball_diameter + 1, $fn = 64);\n        sphere(d = ball_diameter - 1, $fn = 64);\n    }\n    \n    // Add small vent holes for printing\n    for(i = [0 : 3]) {\n        rotate([0, 0, i * 90])\n            translate([ball_diameter/2 - wall_thickness, 0, 0])\n                cylinder(h = wall_thickness * 2, d = wall_thickness, $fn = 8);\n    }\n}\n\n// Render the complete wiffleball\nwiffleball();",
    "renders": true
  },
  {
    "toy": "squashball",
    "openscad_code": "// Squashball toy with realistic proportions and toy features\n// Overall size: 80mm diameter squashball with 2mm shell thickness\n\n// Parameters\nball_diameter = 80;\nwall_thickness = 2;\nseam_height = 1.5;\nseam_width = 6;\ntexture_depth = 0.8;\nhole_diameter = 12;\nconnector_size = 8;\nconnector_gap = 3;\n\n// Main squashball shell\nmodule squashball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness*2, $fn = 64);\n    }\n}\n\n// Seam around the equator\nmodule seam() {\n    rotate([90, 0, 0]) {\n        difference() {\n            // Outer ring\n            cylinder(h = seam_height, d = ball_diameter + 1, $fn = 64);\n            \n            // Inner ring\n            cylinder(h = seam_height + 0.1, d = ball_diameter - seam_width, $fn = 64);\n        }\n    }\n}\n\n// Small dimples for realistic squashball texture\nmodule texture_dimples() {\n    // Create dimples in a pattern\n    for (phi = [0:30:150]) {\n        for (theta = [0:45:359]) {\n            rotate([phi, 0, theta]) {\n                translate([0, 0, ball_diameter/2 - texture_depth]) {\n                    rotate([0, 0, 0]) {\n                        sphere(d = texture_depth*2, $fn = 12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Toy connector holes for building system\nmodule connector_holes() {\n    // Top hole\n    translate([0, 0, ball_diameter/2 - wall_thickness/2]) {\n        rotate([0, 0, 0]) {\n            cylinder(h = wall_thickness*2, d = hole_diameter, $fn = 32);\n        }\n    }\n    \n    // Bottom hole\n    translate([0, 0, -ball_diameter/2 + wall_thickness/2]) {\n        rotate([0, 0, 0]) {\n            cylinder(h = wall_thickness*2, d = hole_diameter, $fn = 32);\n        }\n    }\n}\n\n// Reinforcement ribs inside for structural integrity\nmodule internal_ribs() {\n    // Vertical rib\n    translate([0, 0, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = ball_diameter - wall_thickness*2, d = wall_thickness*3, $fn = 16);\n                cylinder(h = ball_diameter - wall_thickness*2 + 0.1, d = wall_thickness, $fn = 16);\n            }\n        }\n    }\n    \n    // Horizontal rib\n    rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h = ball_diameter - wall_thickness*2, d = wall_thickness*3, $fn = 16);\n            cylinder(h = ball_diameter - wall_thickness*2 + 0.1, d = wall_thickness, $fn = 16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shell\n    squashball_shell();\n    \n    // Seam\n    seam();\n    \n    // Texture (subtract from surface)\n    difference() {\n        // Dummy placeholder for union\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Actual texture subtraction\n        translate([0, 0, 0]) {\n            texture_dimples();\n        }\n    }\n    \n    // Connector holes\n    difference() {\n        // Dummy placeholder\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Actual holes\n        connector_holes();\n    }\n    \n    // Internal structure\n    internal_ribs();\n}",
    "renders": true
  },
  {
    "toy": "racquetball",
    "openscad_code": "// Racquetball Toy Set - Realistic Racquet and Ball\n// 3D printable medium complexity toy racquetball set\n\n// Parameters\n$fa = 1;\n$fs = 0.4;\n\n// Racquet dimensions (mm)\nhandle_length = 80;\nhandle_diameter = 22;\nhead_width = 110;\nhead_height = 190;\nhead_thickness = 18;\nstring_diameter = 2;\nstring_spacing = 12;\n\n// Ball dimensions\nball_diameter = 57;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Racquet head with string pattern\nmodule racquet_head() {\n    difference() {\n        // Main head shape - oval\n        scale([1, 1.7, 1])\n            cylinder(h=head_thickness, d=head_width, center=true);\n        \n        // Inner cavity for hollow printing\n        scale([1, 1.7, 1])\n            cylinder(h=head_thickness+1, d=head_width-wall_thickness*2, center=true);\n        \n        // String holes\n        for (x = [-head_width/2+10 : string_spacing : head_width/2-10]) {\n            for (y = [-head_height/2+15 : string_spacing : head_height/2-15]) {\n                translate([x, y, 0])\n                    cylinder(h=head_thickness+2, d=3, center=true);\n            }\n        }\n    }\n}\n\n// Racquet handle with grip\nmodule racquet_handle() {\n    difference() {\n        // Main handle\n        cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip indentations\n        for (i = [handle_diameter/4 : handle_diameter/4 : handle_length-handle_diameter/2]) {\n            translate([0, 0, i])\n                rotate([0, 90, 0])\n                    cylinder(h=handle_diameter*1.2, d=handle_diameter-wall_thickness, center=true);\n        }\n    }\n    \n    // Grip rings\n    for (i = [5 : 10 : handle_length-10]) {\n        translate([0, 0, i])\n            cylinder(h=2, d=handle_diameter+2);\n    }\n}\n\n// Racquet throat connecting head to handle\nmodule racquet_throat() {\n    difference() {\n        hull() {\n            // Connection to head\n            translate([0, -head_height/2+5, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=head_thickness, d=handle_diameter+10, center=true);\n            \n            // Connection to handle\n            translate([0, -handle_length/2-5, 0])\n                cylinder(h=head_thickness, d=handle_diameter, center=true);\n        }\n        \n        // Hollow center\n        hull() {\n            translate([0, -head_height/2+5, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=head_thickness+2, d=handle_diameter+6, center=true);\n            \n            translate([0, -handle_length/2-5, 0])\n                cylinder(h=head_thickness+2, d=handle_diameter-wall_thickness*2, center=true);\n        }\n    }\n}\n\n// Complete racquet assembly\nmodule racquet() {\n    union() {\n        // Racquet head\n        translate([0, head_height/2, 0])\n            racquet_head();\n        \n        // Racquet handle\n        translate([0, -handle_length/2, 0])\n            rotate([90, 0, 0])\n                racquet_handle();\n        \n        // Throat\n        translate([0, 0, 0])\n            racquet_throat();\n    }\n}\n\n// Racquetball with toy-style seam\nmodule racquetball() {\n    difference() {\n        // Main ball\n        sphere(d=ball_diameter);\n        \n        // Hollow center\n        sphere(d=ball_diameter-wall_thickness*2);\n    }\n    \n    // Toy seam\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h=ball_diameter+2, d=ball_diameter, center=true);\n            cylinder(h=ball_diameter+4, d=ball_diameter-wall_thickness*2, center=true);\n        }\n    \n    // Small dimples for grip texture\n    for (i = [0 : 30 : 359]) {\n        rotate([0, i, 0])\n            translate([0, 0, ball_diameter/2-1])\n                sphere(d=3);\n    }\n}\n\n// Racquet display stand\nmodule racquet_stand() {\n    difference() {\n        // Base\n        cube([120, 60, 10], center=true);\n        \n        // Handle slot\n        translate([0, 0, 5])\n            cube([handle_diameter+4, handle_diameter+4, 12], center=true);\n    }\n    \n    // Decorative elements\n    translate([40, 0, 5])\n        cylinder(h=10, d=8);\n    translate([-40, 0, 5])\n        cylinder(h=10, d=8);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    racquet();\n\ntranslate([80, 60, ball_diameter/2])\n    racquetball();\n\ntranslate([-80, 60, 5])\n    racquet_stand();",
    "renders": true
  },
  {
    "toy": "puck",
    "openscad_code": "// Puck Toy - Realistic Medium Complexity\n// Dimensions: 76mm diameter, 25mm height (standard toy hockey puck)\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main puck body\nmodule puck_body() {\n    difference() {\n        // Solid cylinder base\n        cylinder(h = 25, d = 76, center = true);\n        \n        // Hollow center cavity (2mm walls)\n        cylinder(h = 26, d = 72, center = true);\n        \n        // Bottom recess for logo area\n        translate([0, 0, 11.5])\n            cylinder(h = 2, d = 50, center = true);\n    }\n}\n\n// Side grip pattern - raised ridges\nmodule grip_ridges() {\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([38, 0, 0])\n                cube([2, 2, 25], center = true);\n    }\n}\n\n// Top surface texture - concentric rings\nmodule top_texture() {\n    for (r = [15:5:35]) {\n        translate([0, 0, 12.5])\n            cylinder(h = 0.5, d = r * 2, center = true);\n    }\n}\n\n// Bottom logo area with toy brand text\nmodule logo_area() {\n    translate([0, 0, 10.5])\n        difference() {\n            cylinder(h = 1, d = 48, center = true);\n            // Simple star pattern\n            for (i = [0:4]) {\n                rotate([0, 0, i * 72])\n                    translate([15, 0, 0])\n                        cube([20, 2, 2], center = true);\n            }\n        }\n}\n\n// Impact bumpers - rubber-like edges\nmodule bumpers() {\n    color(\"darkgray\")\n    translate([0, 0, 12.5])\n        difference() {\n            cylinder(h = 27, d = 80, center = true);\n            cylinder(h = 28, d = 76, center = true);\n        }\n}\n\n// Assembly\nunion() {\n    puck_body();\n    grip_ridges();\n    top_texture();\n    logo_area();\n    bumpers();\n}",
    "renders": true
  },
  {
    "toy": "disc",
    "openscad_code": "// Disc toy - realistic style, medium complexity\n// Flying disc with grip ring and decorative elements\n\n$fn = 36;  // Smooth curves for realism\n\n// Main disc body\nmodule disc_body() {\n    difference() {\n        // Outer disc shell\n        cylinder(h=8, d=120, center=true);\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, 1])\n            cylinder(h=10, d=116, center=true);\n    }\n}\n\n// Grip ring on top\nmodule grip_ring() {\n    difference() {\n        // Main ring\n        cylinder(h=4, d=90, center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=6, d=80, center=true);\n    }\n}\n\n// Decorative spokes\nmodule spokes() {\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([25, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d=3, center=true);\n    }\n}\n\n// Center hub detail\nmodule center_hub() {\n    difference() {\n        // Outer hub\n        cylinder(h=6, d=25, center=true);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=8, d=15, center=true);\n    }\n}\n\n// Edge grip texture\nmodule edge_grip() {\n    // Create small bumps around edge\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([60, 0, 0])\n                sphere(d=4);\n    }\n}\n\n// Bottom structural ribs\nmodule ribs() {\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, -3.5])\n                cube([60, 2, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main disc\n    disc_body();\n    \n    // Top grip ring\n    translate([0, 0, 4])\n        grip_ring();\n    \n    // Decorative spokes on top\n    translate([0, 0, 6])\n        spokes();\n    \n    // Center hub\n    translate([0, 0, 6])\n        center_hub();\n    \n    // Edge grip texture\n    translate([0, 0, 4])\n        edge_grip();\n    \n    // Bottom ribs for structure\n    ribs();\n}",
    "renders": true
  },
  {
    "toy": "frisbee",
    "openscad_code": "// Realistic Toy Frisbee - 3D printable design\n// Overall diameter: 120 mm, thickness: 6 mm\n\nmodule frisbee_body() {\n    // Main disc body with slight curvature\n    difference() {\n        // Outer curved top surface\n        translate([0, 0, 3])\n            cylinder(h=6, r=60, $fn=120);\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, 5])\n            cylinder(h=4, r=58, $fn=120);\n    }\n    \n    // Bottom surface with raised edge\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h=3, r=60, $fn=120);\n        translate([0, 0, 0])\n            cylinder(h=3, r=58, $fn=120);\n    }\n}\n\nmodule grip_rings() {\n    // Concentric grip rings on top surface\n    for(i=[1:3]) {\n        translate([0, 0, 8.5])\n            difference() {\n                cylinder(h=0.5, r=60 - (i * 12), $fn=120);\n                cylinder(h=0.5, r=59 - (i * 12), $fn=120);\n            }\n    }\n    \n    // Radial grip lines\n    for(angle=[0:15:359]) {\n        rotate([0, 0, angle])\n            translate([30, -1, 8.5])\n                cube([30, 2, 0.5]);\n    }\n}\n\nmodule toy_details() {\n    // Decorative center emblem\n    translate([0, 0, 9])\n        difference() {\n            cylinder(h=1, r=8, $fn=32);\n            translate([0, 0, -0.1])\n                cylinder(h=1.2, r=6, $fn=32);\n        }\n    \n    // Small flight stability nubs (4 pieces)\n    for(angle=[45:90:315]) {\n        rotate([0, 0, angle])\n            translate([55, 0, 1])\n                sphere(r=2, $fn=16);\n    }\n    \n    // Strengthening ribs on bottom\n    for(angle=[0:45:315]) {\n        rotate([0, 0, angle])\n            translate([30, -1.5, 0])\n                cube([30, 3, 1.5]);\n    }\n}\n\nmodule safety_edge() {\n    // Rounded safety edge all around\n    rotate_extrude($fn=120)\n        translate([60, 0])\n            circle(r=3);\n}\n\n// Assembly\nunion() {\n    frisbee_body();\n    grip_rings();\n    toy_details();\n    translate([0, 0, 3])\n        safety_edge();\n}",
    "renders": true
  },
  {
    "toy": "boomerang",
    "openscad_code": "// Realistic toy boomerang - medium complexity\n// Overall size: ~120mm tip-to-tip, ~25mm thick\n\n// Parameters\nboomerang_length = 120;\nboomerang_width = 25;\nboomerang_thickness = 6;\ncore_thickness = 3;\nwing_taper = 0.4;\ngrip_radius = 8;\ngrip_holes = 5;\ngrip_hole_radius = 1.5;\n\n// Helper module for rounded edges\nmodule rounded_cube(size, radius) {\n    offset = radius * [1,1,1];\n    hull() {\n        for (x = [0,1], y = [0,1], z = [0,1]) {\n            translate([x*(size.x-2*radius), y*(size.y-2*radius), z*(size.z-2*radius)])\n                sphere(r=radius);\n        }\n    }\n}\n\n// Main boomerang body with three wings\nmodule boomerang_body() {\n    difference() {\n        union() {\n            // Central hub\n            cylinder(h=boomerang_thickness, r=boomerang_width/2, $fn=32);\n            \n            // Three wings at 120 degree intervals\n            for (i = [0:120:240]) {\n                rotate([0,0,i]) {\n                    translate([boomerang_width/2, 0, 0]) {\n                        // Wing base\n                        linear_extrude(height=boomerang_thickness) {\n                            polygon(points=[\n                                [0, -boomerang_width/4],\n                                [boomerang_length*0.4, -boomerang_width/3],\n                                [boomerang_length*0.7, 0],\n                                [boomerang_length*0.4, boomerang_width/3],\n                                [0, boomerang_width/4]\n                            ]);\n                        }\n                        \n                        // Wing tip rounding\n                        translate([boomerang_length*0.7, 0, boomerang_thickness/2]) {\n                            sphere(r=boomerang_width/3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hollow out center for weight reduction\n        cylinder(h=boomerang_thickness+1, r=boomerang_width/3, $fn=32);\n    }\n}\n\n// Ergonomic grip with finger grooves\nmodule ergonomic_grip() {\n    difference() {\n        // Grip base\n        cylinder(h=boomerang_thickness+4, r=grip_radius, $fn=32);\n        \n        // Finger grooves\n        for (i = [1:grip_holes]) {\n            angle = -60 + i * 30;\n            rotate([0,0,angle]) {\n                translate([grip_radius/2, 0, 0]) {\n                    cylinder(h=boomerang_thickness+5, r=grip_hole_radius, $fn=16);\n                }\n            }\n        }\n        \n        // Center hole for string attachment\n        cylinder(h=boomerang_thickness+5, r=2, $fn=16);\n    }\n}\n\n// Decorative ridges for aerodynamics\nmodule aerodynamic_ridges() {\n    for (i = [0:120:240]) {\n        rotate([0,0,i]) {\n            translate([boomerang_width/2, 0, boomerang_thickness/2]) {\n                for (j = [0.1:0.15:0.7]) {\n                    translate([j*boomerang_length, 0, 0]) {\n                        scale([0.8, 0.1, 0.3]) {\n                            rotate([90,0,0]) {\n                                cylinder(h=boomerang_width/4, r=boomerang_width/8, $fn=3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    boomerang_body();\n    \n    // Grip on top\n    translate([0, 0, boomerang_thickness/2]) {\n        ergonomic_grip();\n    }\n    \n    // Aerodynamic details\n    aerodynamic_ridges();\n}\n\n// Add fillets for 3D printing\ntranslate([0, 0, -0.5]) {\n    cylinder(h=1, r=boomerang_width/2+2, $fn=32);\n}",
    "renders": true
  },
  {
    "toy": "dart",
    "openscad_code": "// Toy dart with realistic proportions and structural elements\n// Overall length: 120mm, printable with 2mm walls\n\nmodule dart_body() {\n    // Main cylindrical shaft\n    difference() {\n        cylinder(h=70, d=8, $fn=32); // 70mm long, 8mm diameter\n        \n        // Hollow core for weight reduction\n        translate([0,0,-1])\n            cylinder(h=72, d=4, $fn=32);\n    }\n}\n\nmodule dart_tip() {\n    // Conical steel tip\n    translate([0,0,70])\n        cylinder(h1=0, h2=20, r1=4, r2=0.5, $fn=32); // 20mm long tip\n}\n\nmodule dart_flights() {\n    // Four stabilizing flights\n    for(i=[0:90:360-1]) {\n        rotate([0,0,i])\n            translate([-12,0,0])\n                difference() {\n                    // Main flight shape\n                    rotate([90,0,0])\n                        cylinder(h=24, r1=12, r2=0, $fn=3);\n                    \n                    // Hollow center\n                    rotate([90,0,0])\n                        translate([0,0,-1])\n                            cylinder(h=26, r1=2, r2=0, $fn=3);\n                }\n    }\n}\n\nmodule dart_shaft_grip() {\n    // Textured grip rings\n    for(i=[0:5:65]) {\n        translate([0,0,i])\n            difference() {\n                cylinder(h=2, d=10, $fn=32); // Ring protrusion\n                cylinder(h=2.2, d=8, $fn=32); // Remove center\n            }\n    }\n}\n\nmodule dart_weight() {\n    // Rear weight balance ring\n    translate([0,0,-10])\n        difference() {\n            cylinder(h=8, d=12, $fn=32); // Weight ring\n            cylinder(h=9, d=8, $fn=32); // Hollow center\n        }\n}\n\n// Assembly\nunion() {\n    dart_body();\n    dart_tip();\n    dart_flights();\n    dart_shaft_grip();\n    dart_weight();\n}",
    "renders": true
  },
  {
    "toy": "shuttlecock",
    "openscad_code": "// Realistic Shuttlecock Toy (Medium Complexity)\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Global parameters\n$fn = 32;  // Smoothness for curved surfaces\nbase_d = 35;  // Base diameter (mm)\ncork_h = 20;  // Cork base height (mm)\nfeather_l = 60;  // Feather length (mm)\nfeather_w = 12;  // Feather width (mm)\nfeather_t = 1.5;  // Feather thickness (mm)\ncone_d = 25;  // Feather cone base diameter (mm)\n\n// Cork base with toy-style segments\nmodule cork_base() {\n    // Main cork cylinder\n    difference() {\n        cylinder(h=cork_h, d1=base_d, d2=base_d-5);\n        \n        // Toy-style grip rings\n        for(i = [1:3]) {\n            translate([0, 0, cork_h/4*i])\n                cylinder(h=2, d=base_d+1);\n        }\n        \n        // Hollow center for weight reduction\n        cylinder(h=cork_h-2, d=base_d-10);\n    }\n    \n    // Toy-friendly rounded bottom\n    translate([0, 0, cork_h])\n        sphere(d=base_d-5);\n}\n\n// Realistic feather simulation with toy-safe edges\nmodule feather() {\n    // Actual feather shape\n    difference() {\n        union() {\n            // Main feather blade\n            translate([0, 0, feather_l/2])\n                cube([feather_t, feather_w, feather_l], center=true);\n            \n            // Feather tip\n            translate([0, 0, feather_l])\n                sphere(d=feather_t);\n            \n            // Base connection\n            translate([0, 0, 0])\n                sphere(d=feather_t*2);\n        }\n        \n        // Hollow interior for printability\n        translate([0, 0, feather_l/2])\n            cube([feather_t+0.5, feather_w-2, feather_l-2], center=true);\n    }\n}\n\n// Feather assembly in cone shape\nmodule feather_cone() {\n    // Center support structure\n    cylinder(h=feather_l, d=cone_d-5);\n    \n    // 16 feathers arranged in cone\n    for(i = [0:15]) {\n        angle = i * 22.5;\n        radius = cone_d/2 + 2;\n        \n        rotate([0, 0, angle])\n            translate([radius, 0, 0])\n                rotate([90, 0, 90])\n                    feather();\n    }\n    \n    // Toy-friendly safety cap\n    translate([0, 0, feather_l])\n        sphere(d=cone_d+5);\n}\n\n// Main shuttlecock assembly\nunion() {\n    // Cork base at bottom\n    translate([0, 0, 0])\n        cork_base();\n    \n    // Feather cone on top\n    translate([0, 0, cork_h])\n        feather_cone();\n    \n    // Reinforcement ring for toy durability\n    translate([0, 0, cork_h/2])\n        torus(base_d/2-2, 2);\n}\n\n// Hidden support structure for 3D printing\ntranslate([0, 0, cork_h-5])\n    cylinder(h=10, d=cone_d-8);",
    "renders": true
  },
  {
    "toy": "jugglingball",
    "openscad_code": "// Realistic medium-complexity 3D-printable juggling ball toy\n// Overall diameter ≈ 65 mm, wall thickness 2 mm\n\n// Main parameters\nball_d = 65;            // outer diameter in mm\nwall_t = 2;             // wall thickness for printing\npattern_h = 1.5;        // groove depth for grip pattern\nsegments = 36;          // $fn for smooth spheres\n\n// Color bands\nband_w = 7;             // width of each colored stripe\nband_gap = 3;           // gap between stripes\nband_depth = 0.8;       // slight recess for paint guidance\n\n// Internal hollow sphere\nmodule hollow_ball(outer_d, thickness) {\n    difference() {\n        sphere(d = outer_d, $fn = segments);                 // outer shell\n        sphere(d = outer_d - 2 * thickness, $fn = segments); // inner void\n    }\n}\n\n// Grip groove running along latitude\nmodule latitude_groove(lat, depth) {\n    r = ball_d / 2;\n    y = r * sin(lat);\n    groov_r = r * cos(lat);\n\n    translate([0, y, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 2.2 * wall_t, r1 = groov_r + wall_t, r2 = groov_r + wall_t, $fn = segments);\n        cylinder(h = 2.2 * wall_t, r1 = groov_r - depth,  r2 = groov_r - depth,  $fn = segments);\n    }\n}\n\n// Grip groove running along longitude\nmodule longitude_groove(lon, depth) {\n    r = ball_d / 2;\n    rotate([0, 0, lon])\n    intersection() {\n        sphere(d = ball_d, $fn = segments);\n        translate([0, 0, -r])\n        cube([2 * r, depth * 2, 2 * r], center = true);\n    }\n}\n\n// Color-guiding stripe band recessed slightly\nmodule color_band(y_pos, width, depth) {\n    r = ball_d / 2;\n    translate([0, y_pos, 0])\n    difference() {\n        sphere(d = ball_d, $fn = segments);\n        translate([0, 0, -r - 1])\n        cube([2 * r, width, 2 * r + 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Hollow shell\n    hollow_ball(ball_d, wall_t);\n\n    // Latitude grip grooves\n    for (a = [30:60:150])\n        latitude_groove(a, pattern_h);\n\n    // Longitude grip grooves\n    for (a = [0:60:300])\n        longitude_groove(a, pattern_h);\n\n    // Decorative recessed bands for painting guides\n    for (y = [-25:band_w + band_gap:25])\n        if (abs(y) + band_w / 2 < ball_d / 2 - wall_t)\n            color_band(y, band_w, band_depth);\n}",
    "renders": true
  },
  {
    "toy": "medicineball",
    "openscad_code": "// Toy Medicine Ball - Realistic Style, Medium Complexity\n// Diameter: 80mm, wall thickness: 2mm\n\n// Parameters\nball_diameter = 80;\nwall_thickness = 2;\ngrip_depth = 3;\ngrip_width = 8;\npanel_thickness = 2;\n\n// Main module\nmodule medicine_ball() {\n    difference() {\n        // Outer ball shell\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness * 2, $fn = 64);\n    }\n    \n    // Add grip seams and panels\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, 0])\n        grip_panel();\n    }\n    \n    // Add toy valve detail\n    valve_detail();\n    \n    // Add surface texture dots\n    texture_dots();\n}\n\n// Grip panel module\nmodule grip_panel() {\n    // Main panel\n    translate([0, ball_diameter/2 - panel_thickness/2, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = panel_thickness, d = 25, $fn = 3);\n        \n        // Grip indentation\n        translate([0, 0, -1])\n        cylinder(h = grip_depth + 1, d = grip_width, $fn = 32);\n    }\n    \n    // Panel border\n    translate([0, ball_diameter/2 - panel_thickness, 0])\n    rotate([90, 0, 0])\n    cylinder(h = panel_thickness/2, d1 = 27, d2 = 25, $fn = 3);\n}\n\n// Valve detail module\nmodule valve_detail() {\n    translate([0, 0, ball_diameter/2 - wall_thickness])\n    difference() {\n        // Valve base\n        cylinder(h = 4, d = 8, $fn = 32);\n        \n        // Valve hole\n        cylinder(h = 5, d = 4, $fn = 32);\n    }\n    \n    // Valve cap\n    translate([0, 0, ball_diameter/2 - wall_thickness + 2])\n    cylinder(h = 2, d = 6, $fn = 32);\n}\n\n// Surface texture dots\nmodule texture_dots() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        for (j = [1:3]) {\n            rotate([0, 30 * j, 0])\n            translate([0, 0, ball_diameter/2 - wall_thickness/2])\n            sphere(d = 1.5, $fn = 16);\n        }\n    }\n}\n\n// Render the toy\nmedicine_ball();",
    "renders": true
  },
  {
    "toy": "exerciseball",
    "openscad_code": "// Exercise Ball Toy (Medium Complexity)\n// Realistic style with proper proportions and toy details\n\n// Parameters\n$fn = 30;\nball_diameter = 60;\nwall_thickness = 2;\nbase_height = 8;\nvalve_length = 5;\nvalve_diameter = 3;\ntexture_depth = 0.5;\nseam_width = 1;\n\n// Main module\nmodule exercise_ball() {\n    // Outer ball shell\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness * 2);\n        \n        // Valve hole\n        translate([0, 0, ball_diameter/2 - valve_length/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = valve_length + 2, d = valve_diameter, center = true);\n            }\n        }\n    }\n    \n    // Valve stem\n    translate([0, 0, ball_diameter/2 - valve_length/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = valve_length, d = valve_diameter, center = true);\n            translate([0, 0, valve_length/2 + 0.5]) {\n                sphere(d = valve_diameter * 1.2);\n            }\n        }\n    }\n    \n    // Surface texture - longitudinal seams\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, 0, -ball_diameter/2]) {\n                linear_extrude(height = ball_diameter) {\n                    difference() {\n                        square([seam_width, ball_diameter * 0.8], center = true);\n                        offset(r = -texture_depth) {\n                            square([seam_width, ball_diameter * 0.8], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Horizontal seam\n    rotate([90, 0, 0]) {\n        translate([0, 0, -ball_diameter/2]) {\n            linear_extrude(height = ball_diameter) {\n                difference() {\n                    square([seam_width, ball_diameter * 0.8], center = true);\n                    offset(r = -texture_depth) {\n                        square([seam_width, ball_diameter * 0.8], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Toy base/stand\n    translate([0, 0, -ball_diameter/2 - base_height/2]) {\n        difference() {\n            cylinder(h = base_height, d1 = ball_diameter * 0.4, d2 = ball_diameter * 0.6);\n            cylinder(h = base_height + 1, d1 = ball_diameter * 0.4 - wall_thickness, d2 = ball_diameter * 0.6 - wall_thickness);\n        }\n        \n        // Base supports\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([ball_diameter * 0.25, 0, -base_height/2]) {\n                    cube([ball_diameter * 0.15, wall_thickness, base_height], center = true);\n                }\n            }\n        }\n    }\n    \n    // Small decorative grip points\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([ball_diameter * 0.48, 0, 0]) {\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Assembly\nexercise_ball();",
    "renders": true
  },
  {
    "toy": "stabilityball",
    "openscad_code": "// Stability Ball Toy - Realistic style, medium complexity\n// 3D printable with 2mm wall thickness, ~80mm diameter\n\n$fn = 50;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main ball body\nmodule ball_body() {\n    // Hollow sphere with 2mm wall thickness\n    difference() {\n        sphere(d = 80 * scale_factor);\n        sphere(d = 76 * scale_factor);\n    }\n}\n\n// Air valve detail\nmodule air_valve() {\n    translate([0, 0, 40 * scale_factor]) {\n        // Valve base\n        cylinder(h = 5 * scale_factor, d1 = 8 * scale_factor, d2 = 6 * scale_factor);\n        \n        // Valve stem\n        translate([0, 0, 5 * scale_factor]) {\n            cylinder(h = 8 * scale_factor, d = 4 * scale_factor);\n        }\n        \n        // Valve cap\n        translate([0, 0, 13 * scale_factor]) {\n            cylinder(h = 3 * scale_factor, d = 5 * scale_factor);\n        }\n    }\n}\n\n// Surface texture - hexagonal pattern for grip\nmodule grip_pattern() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            for (j = [-3:3]) {\n                for (k = [-3:3]) {\n                    if (sqrt(pow(j * 7, 2) + pow(k * 7, 2)) < 35) {\n                        translate([j * 7, k * 7, 0]) {\n                            rotate([90, 0, 0]) {\n                                linear_extrude(height = 2 * scale_factor) {\n                                    circle(d = 3 * scale_factor);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Seams between panels\nmodule panel_seams() {\n    // Vertical seams\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, -40 * scale_factor]) {\n                linear_extrude(height = 80 * scale_factor) {\n                    polygon(points = [\n                        [-0.5, -40],\n                        [0.5, -40],\n                        [0.5, 40],\n                        [-0.5, 40]\n                    ]);\n                }\n            }\n        }\n    }\n    \n    // Horizontal seams\n    for (z = [-20:20:20]) {\n        rotate_extrude(angle = 360) {\n            translate([40 * scale_factor, 0, 0]) {\n                square([0.5, 2 * scale_factor]);\n            }\n        }\n    }\n}\n\n// Reinforcement ring around valve\nmodule valve_reinforcement() {\n    translate([0, 0, 40 * scale_factor]) {\n        difference() {\n            cylinder(h = 3 * scale_factor, d = 20 * scale_factor);\n            cylinder(h = 3.5 * scale_factor, d = 10 * scale_factor);\n        }\n    }\n}\n\n// Anti-slip base ring\nmodule base_ring() {\n    translate([0, 0, -38 * scale_factor]) {\n        difference() {\n            cylinder(h = 4 * scale_factor, d = 60 * scale_factor);\n            cylinder(h = 4.5 * scale_factor, d = 56 * scale_factor);\n        }\n    }\n    \n    // Base ring texture\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([29 * scale_factor, 0, -36 * scale_factor]) {\n                cube([2 * scale_factor, 10 * scale_factor, 2 * scale_factor], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    ball_body();\n    \n    // Add surface details\n    difference() {\n        union() {\n            grip_pattern();\n            panel_seams();\n        }\n        sphere(d = 76 * scale_factor);\n    }\n    \n    // Structural elements\n    air_valve();\n    valve_reinforcement();\n    base_ring();\n}",
    "renders": true
  },
  {
    "toy": "foamroller",
    "openscad_code": "// Foam Roller Toy - Realistic Medium Complexity\n// Overall dimensions: 120mm length, 45mm diameter\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main roller body with hollow core\nmodule roller_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = 120, d = 45, center = true);\n        \n        // Hollow center for weight reduction\n        cylinder(h = 122, d = 25, center = true);\n        \n        // End cap grooves\n        for(i = [-1, 1]) {\n            translate([0, 0, i * 55]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h = 3, d = 42, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Foam texture pattern\nmodule foam_texture() {\n    difference() {\n        roller_body();\n        \n        // Create dimpled texture across surface\n        for(angle = [0:30:360]) {\n            for(z = [-55:10:55]) {\n                rotate([0, 0, angle]) {\n                    translate([22.5, 0, z]) {\n                        sphere(d = 4, $fn = 20);\n                    }\n                }\n            }\n        }\n        \n        // Spiral groove pattern\n        for(t = [0:1:360]) {\n            rotate([0, 0, t]) {\n                translate([22.5, 0, t/3 - 60]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 2, d = 3, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// End caps with grip texture\nmodule end_caps() {\n    // Left cap\n    translate([0, 0, -60]) {\n        difference() {\n            // Main cap body\n            cylinder(h = 8, d = 45);\n            \n            // Central hole for bearing\n            cylinder(h = 10, d = 12);\n            \n            // Grip ridges\n            for(i = [0:30:360]) {\n                rotate([0, 0, i]) {\n                    translate([20, -2, 4]) {\n                        cube([4, 4, 1]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right cap (mirrored)\n    translate([0, 0, 60]) {\n        mirror([0, 0, 1]) {\n            difference() {\n                cylinder(h = 8, d = 45);\n                cylinder(h = 10, d = 12);\n                \n                for(i = [0:30:360]) {\n                    rotate([0, 0, i]) {\n                        translate([20, -2, 4]) {\n                            cube([4, 4, 1]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Internal support structure\nmodule support_structure() {\n    difference() {\n        // Inner support ring\n        cylinder(h = 100, d = 27, center = true);\n        \n        // Lightening holes\n        for(angle = [0:60:360]) {\n            rotate([0, 0, angle]) {\n                translate([10, 0, 0]) {\n                    cylinder(h = 102, d = 8, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main textured roller\n    foam_texture();\n    \n    // Internal supports\n    support_structure();\n    \n    // End caps\n    end_caps();\n    \n    // Decorative band\n    for(i = [-1, 1]) {\n        translate([0, 0, i * 40]) {\n            difference() {\n                cylinder(h = 2, d = 46, center = true);\n                cylinder(h = 3, d = 42, center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "jumpball",
    "openscad_code": "// Jumpball Toy (Medium Complexity)\n// Realistic style, 3D printable, 80mm diameter ball\n\n$fn = 36;\n\n// Main parameters\nball_d = 80;\nball_wall = 2;\nhandle_d = 12;\nhandle_l = 100;\nspring_coils = 10;\nspring_radius = 15;\nspring_wire = 2;\nbaseplate_w = 100;\nbaseplate_h = 8;\nfoot_h = 5;\nfoot_r = 6;\n\n// Colors (for preview)\ncolor_ball = \"red\";\ncolor_handle = \"blue\";\ncolor_spring = \"silver\";\ncolor_base = \"black\";\n\nmodule ball() {\n    // Hollow sphere with handle mount\n    difference() {\n        sphere(d = ball_d);\n        sphere(d = ball_d - 2 * ball_wall);\n    }\n    \n    // Handle mount tube inside ball\n    translate([0, 0, -ball_d/2 + ball_wall])\n        cylinder(h = ball_d/2, d = handle_d + 2*ball_wall, $fn = 24);\n}\n\nmodule handle() {\n    // Main handle rod\n    color(color_handle)\n    cylinder(h = handle_l, d = handle_d, $fn = 24);\n    \n    // Grip rings\n    for(i = [1:4]) {\n        translate([0, 0, i * handle_l/5])\n            cylinder(h = 3, d = handle_d + 4, $fn = 24);\n    }\n}\n\nmodule spring() {\n    // Spring assembly\n    color(color_spring)\n    for(i = [0:spring_coils-1]) {\n        rotate([0, 0, i * 360/spring_coils])\n            translate([spring_radius, 0, i * handle_l/(spring_coils * 2)])\n                rotate([90, 0, 0])\n                    torus(r1 = spring_wire, r2 = spring_wire);\n    }\n}\n\nmodule torus(r1, r2) {\n    rotate_extrude()\n        translate([r1, 0, 0])\n            circle(r = r2);\n}\n\nmodule base() {\n    // Base plate\n    color(color_base)\n    difference() {\n        cube([baseplate_w, baseplate_w, baseplate_h], center = true);\n        // Lightening holes\n        for(x = [-30, 30])\n            for(y = [-30, 30])\n                translate([x, y, -baseplate_h/2])\n                    cylinder(h = baseplate_h + 1, d = 15, $fn = 20);\n    }\n    \n    // Feet\n    for(x = [-baseplate_w/2 + 20, baseplate_w/2 - 20])\n        for(y = [-baseplate_w/2 + 20, baseplate_w/2 - 20])\n            translate([x, y, -baseplate_h/2 - foot_h/2])\n                cylinder(h = foot_h, r = foot_r, $fn = 20);\n    \n    // Handle socket\n    translate([0, 0, baseplate_h/2])\n        cylinder(h = 15, d = handle_d + 4, $fn = 24);\n}\n\n// Assemble the toy\ntranslate([0, 0, baseplate_h/2 + foot_h])\n    base();\n\ntranslate([0, 0, baseplate_h/2 + foot_h + 15 + handle_l/2])\n    handle();\n\ntranslate([0, 0, baseplate_h/2 + foot_h + 15 + handle_l])\n    spring();\n\ncolor(color_ball)\ntranslate([0, 0, baseplate_h/2 + foot_h + 15 + handle_l + handle_l/2 + spring_coils * handle_l/(spring_coils * 2)])\n    ball();",
    "renders": true
  },
  {
    "toy": "spikeball",
    "openscad_code": "// Realistic Spikeball Toy - Medium Complexity\n// 3D printable, ~90mm diameter\n\n// Parameters\nball_d = 80;\nspike_length = 20;\nspike_base_d = 10;\nspike_tip_d = 2;\nwall_thickness = 2;\npattern_rows = 6;\nspikes_per_row = 6;\n\nmodule spike() {\n    // Main spike body with gradual taper\n    union() {\n        // Base cylinder for structural strength\n        cylinder(h=spike_length*0.3, d1=spike_base_d, d2=spike_base_d*0.8, $fn=16);\n        \n        // Tapered middle section\n        translate([0,0,spike_length*0.3])\n            cylinder(h=spike_length*0.5, d1=spike_base_d*0.8, d2=spike_tip_d*2, $fn=16);\n        \n        // Sharp tip\n        translate([0,0,spike_length*0.8])\n            cylinder(h=spike_length*0.2, d1=spike_tip_d*2, d2=spike_tip_d, $fn=8);\n    }\n}\n\nmodule hollow_sphere() {\n    // Create hollow sphere using difference\n    difference() {\n        sphere(d=ball_d, $fn=100);\n        sphere(d=ball_d - wall_thickness*2, $fn=100);\n    }\n}\n\nmodule spike_pattern() {\n    // Generate geodesic pattern of spikes\n    for (row = [0:pattern_rows-1]) {\n        row_angle = 180/pattern_rows * row;\n        for (i = [0:spikes_per_row-1]) {\n            angle = 360/spikes_per_row * i;\n            \n            // Skip poles to avoid clustering\n            if (row_angle > 15 && row_angle < 165) {\n                rotate([0, row_angle, angle])\n                    translate([0, 0, ball_d/2])\n                        spike();\n            }\n            \n            // Add poles separately\n            if (row == 1) {\n                rotate([0, 0, angle])\n                    translate([0, 0, ball_d/2])\n                        spike();\n            }\n            if (row == pattern_rows-2) {\n                rotate([180, 0, angle])\n                    translate([0, 0, ball_d/2])\n                        spike();\n            }\n        }\n    }\n}\n\nmodule surface_texture() {\n    // Add small bumps for grip\n    for (i = [0:20]) {\n        theta = 360 * i / 20;\n        phi = 180 * (i % 3) / 3;\n        rotate([0, phi, theta])\n            translate([0, 0, ball_d/2 - wall_thickness])\n                sphere(d=3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollow ball body\n    hollow_sphere();\n    \n    // Apply surface texture\n    surface_texture();\n    \n    // Spike array\n    spike_pattern();\n}\n\n// Add alignment mark for toy packaging\nrotate([90, 0, 0])\n    translate([0, -ball_d/2 + 1, 0])\n        cube([5, 2, 1], center=true);",
    "renders": true
  },
  {
    "toy": "whiffleball",
    "openscad_code": "// Whiffle Ball (realistic toy style, medium complexity)\n// Diameter: 75 mm, wall thickness: 2 mm, hole diameter: 12 mm\n\nmodule whiffle_ball() {\n    // Basic sphere shell with 2 mm walls\n    difference() {\n        sphere(d = 75, $fn = 100);                   // outer sphere\n        \n        // Hollow interior\n        sphere(d = 75 - 4, $fn = 100);               // inner sphere (75 - 2*2mm wall)\n    }\n\n    // Eight large holes on cardinal directions (octahedral pattern)\n    for (a = [0, 90, 180, 270])\n    rotate([0, 0, a])\n    translate([0, 75/2, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 5, d = 12, $fn = 30);              // hole through wall\n    \n    for (a = [0, 90, 180, 270])\n    rotate([0, a, 0])\n    translate([0, 0, 75/2])\n    cylinder(h = 5, d = 12, $fn = 30);              // holes around equator\n    \n    rotate([90, 0, 0])\n    translate([0, 0, 75/2])\n    cylinder(h = 5, d = 12, $fn = 30);              // top hole\n    \n    rotate([90, 0, 0])\n    translate([0, 0, -75/2])\n    cylinder(h = 5, d = 12, $fn = 30);              // bottom hole\n\n    // Additional 6 medium holes at 45° angles for classic whiffle pattern\n    for (theta = [45, 135])\n    for (phi = [0:60:359])\n    rotate([0, theta, phi])\n    translate([0, 0, 75/2])\n    cylinder(h = 5, d = 8, $fn = 20);               // 8 mm holes\n    \n    // Internal reinforcing ribs for toy durability\n    difference() {\n        union() {\n            // Two perpendicular ribs inside\n            rotate([0, 90, 0])\n            cube([2, 2, 75 - 8], center = true);    // vertical rib\n            \n            rotate([90, 0, 0]) \n            cube([2, 2, 75 - 8], center = true);    // horizontal rib\n            \n            rotate([0, 0, 90])\n            cube([2, 2, 75 - 8], center = true);    // depth rib\n        }\n        \n        // Remove rib material near holes\n        for (a = [0:45:359])\n        rotate([0, 0, a])\n        translate([0, 75/2 - 6, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 10, d = 15, $fn = 30);         // clearance around holes\n    }\n\n    // External seam detail for toy molding line\n    difference() {\n        sphere(d = 75.2, $fn = 100);                // slightly larger seam band\n        \n        sphere(d = 75, $fn = 100);                  // cut back to surface\n    }\n    \n    // Six small grip nubs for toy texture\n    for (i = [0:5]) {\n        angle = i * 60;\n        rotate([0, 30, angle])\n        translate([0, 0, 75/2])\n        cylinder(h = 1, d1 = 4, d2 = 2, $fn = 12);  // tapered grip nub\n    }\n}\n\n// Render the ball centered at origin\nwhiffle_ball();",
    "renders": true
  },
  {
    "toy": "teeball",
    "openscad_code": "// Realistic Teeball Toy - Medium Complexity\n// Overall height: 120mm, base: 80mm diameter\n\nmodule teeball_base() {\n    // Main base cylinder\n    difference() {\n        cylinder(h=15, d=80, $fn=64);\n        // Hollow center for weight reduction\n        cylinder(h=16, d=76, $fn=64);\n    }\n    \n    // Base rim for stability\n    difference() {\n        cylinder(h=5, d=85, $fn=64);\n        translate([0,0,-0.1])\n            cylinder(h=5.2, d=83, $fn=64);\n    }\n    \n    // Screw holes for assembly\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([30,0,-1])\n                cylinder(h=17, d=4, $fn=16);\n    }\n}\n\nmodule tee_post() {\n    // Main post tube\n    difference() {\n        cylinder(h=85, d=20, $fn=32);\n        cylinder(h=86, d=16, $fn=32);\n    }\n    \n    // Height adjustment holes\n    for(i=[0:4]) {\n        translate([0,0,15+i*15])\n            rotate([90,0,0])\n                cylinder(h=20, d=4, center=true, $fn=16);\n    }\n    \n    // Base flange\n    translate([0,0,-2])\n        difference() {\n            cylinder(h=5, d=30, $fn=32);\n            cylinder(h=5.2, d=22, $fn=32);\n        }\n}\n\nmodule tee_ball_holder() {\n    // Ball cup\n    difference() {\n        sphere(d=35, $fn=32);\n        translate([0,0,-5])\n            sphere(d=32, $fn=32);\n    }\n    \n    // Support ribs for strength\n    for(i=[0:3]) {\n        rotate([0,0,i*120])\n            translate([0,12,-5])\n                cube([2,10,10], center=true);\n    }\n    \n    // Mounting peg\n    translate([0,0,-15])\n        cylinder(h=15, d=16, $fn=32);\n}\n\nmodule bat() {\n    // Bat handle\n    translate([0,0,-60])\n        cylinder(h=60, d1=8, d2=12, $fn=16);\n    \n    // Bat barrel\n    translate([0,0,0])\n        cylinder(h=40, d=20, $fn=32);\n    \n    // Grip rings\n    for(i=[0:3]) {\n        translate([0,0,-50+i*10])\n            difference() {\n                cylinder(h=3, d=14, $fn=16);\n                cylinder(h=3.2, d=12, $fn=16);\n            }\n    }\n}\n\n// Assembly\ntranslate([0,0,15])\n    teeball_base();\n\ntranslate([0,0,15])\n    tee_post();\n\ntranslate([0,0,100])\n    tee_ball_holder();\n\n// Optional bat placement\ntranslate([50,50,15])\n    rotate([0,90,0])\n        bat();",
    "renders": true
  },
  {
    "toy": "trainingball",
    "openscad_code": "// Training Ball Toy - Realistic Style (Medium Complexity)\n// A classic rubber training ball with grip rings and valve detail\n\nball_diameter = 80;          // Main ball size in mm\nwall_thickness = 2;          // Wall thickness for 3D printing\ngrip_ring_width = 6;         // Width of each grip ring\ngrip_ring_depth = 1.5;       // Depth of grip rings\nnum_grip_rings = 6;          // Number of grip rings around ball\nvalve_size = 8;              // Air valve diameter\nvalve_height = 4;            // Air valve protrusion\n\n// Main hollow ball with proper wall thickness\nmodule hollow_ball(outer_d, wall) {\n    difference() {\n        sphere(d = outer_d);\n        sphere(d = outer_d - 2*wall);\n    }\n}\n\n// Individual grip ring\nmodule grip_ring(radius, width, depth) {\n    difference() {\n        // Outer ring\n        cylinder(h = width, r1 = radius, r2 = radius, center = true);\n        \n        // Inner cutout to create ring shape\n        cylinder(h = width + 0.1, r1 = radius - depth, r2 = radius - depth, center = true);\n    }\n}\n\n// Ball valve detail\nmodule valve(d, h) {\n    union() {\n        // Valve base\n        cylinder(h = h, d = d, $fn = 20);\n        \n        // Valve top cap\n        translate([0, 0, h])\n        cylinder(h = 1, d = d - 1, $fn = 20);\n        \n        // Valve stem detail\n        translate([0, 0, h + 1])\n        cylinder(h = 1.5, d = d/3, $fn = 16);\n    }\n}\n\n// Assemble the training ball\nunion() {\n    // Main ball structure\n    hollow_ball(ball_diameter, wall_thickness);\n    \n    // Grip rings - arranged in three orthogonal planes\n    // X-axis rings\n    for(i = [0:num_grip_rings-1]) {\n        rotate([0, 90, 0])\n        rotate([0, 0, i * 360/num_grip_rings])\n        translate([0, 0, 0])\n        grip_ring(ball_diameter/2, grip_ring_width, grip_ring_depth);\n    }\n    \n    // Y-axis rings (offset from x-axis rings)\n    for(i = [0:num_grip_rings-1]) {\n        rotate([90, 0, 0])\n        rotate([0, 0, i * 360/num_grip_rings + 360/(2*num_grip_rings)])\n        translate([0, 0, 0])\n        grip_ring(ball_diameter/2, grip_ring_width, grip_ring_depth);\n    }\n    \n    // Z-axis rings (offset from both x and y)\n    for(i = [0:num_grip_rings-1]) {\n        rotate([0, 0, i * 360/num_grip_rings])\n        translate([0, 0, 0])\n        grip_ring(ball_diameter/2, grip_ring_width, grip_ring_depth);\n    }\n    \n    // Valve positioned on top of ball\n    translate([0, 0, ball_diameter/2])\n    valve(valve_size, valve_height);\n}\n\n// Add subtle texture pattern for realistic grip\ndifference() {\n    sphere(d = ball_diameter);\n    \n    // Micro texture dots for grip\n    for(i = [0:30]) {\n        for(j = [0:15]) {\n            rotate([i * 12, j * 24, 0])\n            translate([ball_diameter/2 - 0.5, 0, 0])\n            sphere(d = 1.2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "toy": "reactionball",
    "openscad_code": "// Reactionball Toy – OpenSCAD\n// Medium-complexity, realistic style, 3D-printable\n\n$fa = 2; $fs = 0.5;  // smooth curves\n\n// ===== Parameters =====\nball_d = 70;           // main reaction-ball Ø\nwall_t = 2;            // wall thickness\ngrip_d = 8;            // small grip spheres Ø\ngrip_rows = 6;         // grip spheres per row\ngrip_cols = 3;         // rows along axis\ngrip_clear = 1;        // clearance for 3D print\n\n// ===== Module : main hollow ball =====\nmodule hollow_sphere(od, t){\n    difference(){\n        sphere(d = od);\n        sphere(d = od - 2*t);\n    }\n}\n\n// ===== Module : grip bumps =====\nmodule grip_pattern(){\n    step_a = 360 / grip_rows;\n    step_h = (ball_d*0.9) / (grip_cols + 1);\n    for(i = [0 : grip_rows-1]){\n        for(j = [1 : grip_cols]){\n            rotate([0, 0, i*step_a])\n                translate([0, \n                           ball_d/2 - wall_t - grip_d/2 - grip_clear,\n                           -ball_d/2 + j*step_h])\n                    sphere(d = grip_d);\n        }\n    }\n}\n\n// ===== Module : seam ring for realism =====\nmodule seam_ring(){\n    rotate_extrude()\n        translate([(ball_d - wall_t)/2, 0, 0])\n            square([wall_t, wall_t*2]);\n}\n\n// ===== Assembly =====\ndifference(){\n    union(){\n        // outer shell\n        hollow_sphere(ball_d, wall_t);\n        \n        // internal grip bumps\n        grip_pattern();\n        \n        // equatorial seam\n        seam_ring();\n    }\n    \n    // drainage / key-ring hole\n    rotate([0, 90, 0])\n        cylinder(h = ball_d, d = 4, $fn = 16);\n}",
    "renders": true
  },
  {
    "toy": "agilityball",
    "openscad_code": "// Agility Ball Toy - Realistic Style with Medium Complexity\n// 3D printable toy ball with grip holes and internal structure\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nball_diameter = 80;\nwall_thickness = 2.5;\ngrip_hole_diameter = 12;\ninternal_support = 1.5;\n\n// Main ball shell\nmodule ball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Hollow center\n        sphere(d = ball_diameter - 2 * wall_thickness);\n        \n        // Grip holes on surface\n        for (i = [0:4]) {\n            rotate([0, 90 * (i % 2), 72 * i])\n                translate([0, 0, ball_diameter/2 + 1])\n                    cylinder(h = wall_thickness + 2, d = grip_hole_diameter, $fn = 32);\n        }\n        \n        // Additional grip holes at 45 degrees\n        for (j = [0:3]) {\n            rotate([45, 0, 90 * j])\n                translate([0, 0, ball_diameter/2 + 1])\n                    cylinder(h = wall_thickness + 2, d = grip_hole_diameter * 0.8, $fn = 32);\n        }\n    }\n}\n\n// Internal support structure\nmodule internal_supports() {\n    // Central hub\n    sphere(d = ball_diameter * 0.3);\n    \n    // Radial supports\n    for (i = [0:5]) {\n        rotate([0, 0, 60 * i])\n            translate([ball_diameter * 0.15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = ball_diameter * 0.15, d = wall_thickness * 0.8, $fn = 16);\n    }\n    \n    // Ring supports\n    for (z = [-1, 0, 1]) {\n        translate([0, 0, z * ball_diameter * 0.25])\n            rotate_extrude(angle = 360, $fn = 64)\n                translate([ball_diameter * 0.35, 0, 0])\n                    circle(d = wall_thickness * 0.8);\n    }\n}\n\n// Surface texture rings for grip\nmodule grip_rings() {\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Create grooved texture\n        for (i = [1:3]) {\n            sphere(d = ball_diameter + 0.1 - i * 1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    ball_shell();\n    \n    // Internal supports (comment out for hollow print)\n    // internal_supports();\n    \n    // Surface grip rings\n    grip_rings();\n}\n\n// Small alignment marks for 3D printing orientation\nmodule alignment_marks() {\n    for (i = [0:3]) {\n        rotate([0, 90, i * 90])\n            translate([0, 0, ball_diameter/2 - 1])\n                cube([2, 0.5, 1], center = true);\n    }\n}\n\n// Add alignment marks\nalignment_marks();",
    "renders": true
  },
  {
    "toy": "reflexball",
    "openscad_code": "// Reflex Ball Toy - Medium Complexity Realistic Style\n// A classic reflex training ball with weighted base and elastic cord\n\n// Parameters (in mm)\nbase_diameter = 80;\nbase_height = 25;\nball_diameter = 50;\ncord_length = 120;\ncord_diameter = 3;\nstem_height = 30;\nstem_diameter = 12;\n\n// Main module\nmodule reflex_ball_toy() {\n    // Weighted base\n    union() {\n        // Base cylinder\n        difference() {\n            cylinder(h=base_height, d=base_diameter, $fn=64);\n            \n            // Bottom recess for weight cavity\n            translate([0, 0, base_height-10])\n                cylinder(h=8, d=base_diameter-10, $fn=64);\n            \n            // Center hole for stem\n            translate([0, 0, -1])\n                cylinder(h=base_height+2, d=stem_diameter+4, $fn=32);\n        }\n        \n        // Base rim detail\n        translate([0, 0, base_height-2])\n            cylinder(h=4, d1=base_diameter-4, d2=base_diameter, $fn=64);\n    }\n    \n    // Stem with cord attachment\n    union() {\n        // Main stem\n        translate([0, 0, base_height])\n            cylinder(h=stem_height, d=stem_diameter, $fn=32);\n        \n        // Cord guide cylinder\n        translate([0, 0, base_height+stem_height])\n            cylinder(h=8, d=stem_diameter+6, $fn=32);\n        \n        // Cord hole\n        translate([0, 0, base_height+stem_height+4])\n            rotate([90, 0, 0])\n                cylinder(h=stem_diameter+6, d=cord_diameter+1, $fn=16);\n    }\n    \n    // Elastic cord segments\n    for(i = [0:1]) {\n        translate([0, 0, base_height+stem_height+4 + i*60])\n            rotate([90, 0, 0])\n                cylinder(h=cord_diameter, d=cord_diameter, $fn=8);\n    }\n    \n    // Ball with attachment point\n    translate([0, cord_length, base_height+stem_height+4 + cord_length/2])\n        union() {\n            // Main ball\n            sphere(d=ball_diameter, $fn=32);\n            \n            // Attachment nub\n            translate([0, -ball_diameter/2, 0])\n                rotate([0, 0, 90])\n                    cylinder(h=8, d1=cord_diameter+2, d2=cord_diameter, $fn=16);\n        }\n    \n    // Anti-slip base pads\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([(base_diameter-10)/2, 0, 0])\n                cylinder(h=2, d=8, $fn=16);\n    }\n    \n    // Decorative ring around stem base\n    translate([0, 0, base_height])\n        cylinder(h=3, d=stem_diameter+10, $fn=32);\n    \n    // Grip texture on base\n    difference() {\n        translate([0, 0, base_height/2])\n            cylinder(h=base_height-4, d=base_diameter-2, $fn=64);\n        \n        // Texture grooves\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([base_diameter/2-15, 0, 0])\n                    cube([30, 2, base_height-2], center=true);\n        }\n    }\n}\n\n// Create the toy\nreflex_ball_toy();",
    "renders": true
  },
  {
    "toy": "rhythmball",
    "openscad_code": "// Rhythmball - 3D printable toy with internal beads and grip rings\n// Overall diameter 90 mm, 2 mm wall thickness\n\n$fn = 90;\n\nmodule ball_shell() {\n    difference() {\n        sphere(d = 90);  // outer shell\n        \n        // hollow interior\n        sphere(d = 90 - 4);  // 2 mm wall\n        \n        // sound holes (4 mm diameter)\n        for (a = [0:60:359]) {\n            rotate([a, 0, 0])\n                translate([0, 0, 45])\n                    cylinder(h = 5, d = 4, center = true);\n        }\n    }\n}\n\nmodule grip_ring(height) {\n    difference() {\n        cylinder(h = 6, d = 100);  // outer ring\n        \n        // cut center\n        cylinder(h = 7, d = 90);\n        \n        // finger grooves (6 grooves)\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([50, 0, 0])\n                    cube([12, 8, 7], center = true);\n        }\n    }\n}\n\nmodule bead(radius) {\n    sphere(r = radius);\n}\n\nmodule internal_beads() {\n    // 6 small beads inside for sound\n    for (i = [1:6]) {\n        rotate([i*60, 0, 0])\n            translate([0, 25, 0])\n                bead(r = 3.5);\n    }\n}\n\nmodule assembly() {\n    union() {\n        // main ball\n        ball_shell();\n        \n        // grip rings at poles\n        translate([0, 0, 45])\n            grip_ring(6);\n        \n        translate([0, 0, -45])\n            rotate([0, 180, 0])\n                grip_ring(6);\n        \n        // internal beads\n        color(\"gold\")\n            internal_beads();\n    }\n}\n\n// render the rhythmball\nassembly();",
    "renders": true
  },
  {
    "toy": "gymball",
    "openscad_code": "// Gymball Toy - Realistic Style, Medium Complexity\n// Diameter: 65mm (scale-appropriate toy size)\n\n// Parameters\n$fn=48;\nball_d = 65;\nwall_t = 2;\npump_d = 12;\npump_h = 15;\nseam_w = 3;\nseam_d = 1;\nvalve_d = 4;\nvalve_h = 3;\ngrip_r = 2;\ngrip_h = 1;\n\n// Main ball body with realistic wall thickness\ndifference() {\n    sphere(d=ball_d);                      // Outer sphere\n    \n    // Hollow interior\n    translate([0,0,-wall_t/2])\n        sphere(d=ball_d-wall_t*2);\n}\n\n// Equator seam line (mold line)\ndifference() {\n    rotate([90,0,0])\n        cylinder(h=seam_w, d=ball_d+0.2, center=true);\n    rotate([90,0,0])\n        cylinder(h=seam_w+0.2, d=ball_d-seam_d*2, center=true);\n}\n\n// Vertical seam lines (2 perpendicular)\nfor(angle=[0,90]) {\n    rotate([0,0,angle])\n    difference() {\n        rotate([90,0,0])\n            cylinder(h=seam_w, d=ball_d+0.2, center=true);\n        rotate([90,0,0])\n            cylinder(h=seam_w+0.2, d=ball_d-seam_d*2, center=true);\n    }\n}\n\n// Inflation valve assembly\ntranslate([0,0,ball_d/2-wall_t/2]) {\n    // Valve base\n    cylinder(h=pump_h, d=pump_d, center=true);\n    \n    // Valve stem hole\n    translate([0,0,pump_h/2])\n        cylinder(h=valve_h+2, d=valve_d);\n    \n    // Valve cap\n    translate([0,0,pump_h/2+valve_h/2+1])\n        cylinder(h=valve_h, d=valve_d+2);\n    \n    // Grip ridges on valve\n    for(z=[-grip_h,0,grip_h]) {\n        translate([0,0,z])\n            cylinder(h=0.5, d=pump_d+1);\n    }\n}\n\n// Realistic surface texture - small bumps\nmodule grip_bump(x,y,z) {\n    translate([x,y,z])\n        sphere(r=grip_r);\n}\n\n// Generate grip bumps in pattern\nfor(phi=[15:30:165]) {\n    for(theta=[0:45:315]) {\n        x = (ball_d/2)*cos(theta)*sin(phi);\n        y = (ball_d/2)*sin(theta)*sin(phi);\n        z = (ball_d/2)*cos(phi);\n        grip_bump(x,y,z);\n    }\n}\n\n// Bottom reinforcement ring\ntranslate([0,0,-ball_d/2+wall_t])\n    cylinder(h=wall_t*2, d=ball_d/4, center=true);",
    "renders": true
  },
  {
    "toy": "pilatesball",
    "openscad_code": "// Pilates Ball Toy - Realistic Style, Medium Complexity\n// Diameter: 60mm, wall thickness: 2mm, includes valve and seam details\n\n// Ball parameters\nball_d = 60;           // Overall diameter\nwall_t = 2;            // Wall thickness for 3D printing\nsegments = 64;         // Smooth sphere surface\n\n// Valve details\nvalve_d = 6;\nvalve_h = 8;\nvalve_pos = ball_d/2 * 0.8;  // Position valve 80% up from center\n\n// Seam parameters\nseam_w = 1.5;\nseam_d = 0.5;\n\n// Panel lines (decorative grooves)\ngroove_w = 0.8;\ngroove_d = 0.3;\n\n// Main ball module\nmodule pilates_ball() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_d, $fn = segments);\n        \n        // Hollow interior\n        sphere(d = ball_d - 2*wall_t, $fn = segments);\n    }\n}\n\n// Valve module for inflation point\nmodule valve() {\n    translate([0, 0, valve_pos]) {\n        rotate([90, 0, 0]) {\n            // Valve base\n            difference() {\n                cylinder(h = valve_h, d1 = valve_d, d2 = valve_d * 0.8, $fn = 32);\n                \n                // Hollow valve\n                cylinder(h = valve_h + 1, d1 = valve_d - wall_t, d2 = (valve_d - wall_t) * 0.8, $fn = 32);\n            }\n            \n            // Valve cap\n            translate([0, 0, valve_h]) {\n                cylinder(h = 3, d = valve_d + 1, $fn = 32);\n            }\n        }\n    }\n}\n\n// Horizontal seam around the ball\nmodule horizontal_seam() {\n    for (z = [-ball_d/3, ball_d/3]) {\n        translate([0, 0, z]) {\n            difference() {\n                cylinder(h = seam_d * 2, d = ball_d, $fn = segments);\n                \n                // Create groove\n                translate([0, 0, seam_d]) {\n                    cylinder(h = seam_d * 2, d = ball_d - seam_w, $fn = segments);\n                }\n                \n                // Limit to sphere surface\n                sphere(d = ball_d + 1, $fn = segments);\n            }\n        }\n    }\n}\n\n// Vertical seam lines\nmodule vertical_seams() {\n    for (angle = [0:60:359]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, -ball_d/2]) {\n                difference() {\n                    cylinder(h = ball_d, d = ball_d, $fn = segments);\n                    \n                    // Create groove\n                    translate([0, 0, -1]) {\n                        cylinder(h = ball_d + 2, d = ball_d - seam_w, $fn = segments);\n                    }\n                    \n                    // Limit to sphere surface\n                    sphere(d = ball_d + 1, $fn = segments);\n                }\n            }\n        }\n    }\n}\n\n// Decorative panel grooves\nmodule panel_grooves() {\n    // Latitude grooves\n    for (lat = [-30, 0, 30]) {\n        rotate([0, 0, 0]) {\n            rotate([lat, 0, 0]) {\n                translate([0, 0, 0]) {\n                    difference() {\n                        sphere(d = ball_d + 0.5, $fn = segments);\n                        \n                        // Create groove\n                        rotate([lat + 2, 0, 0]) {\n                            sphere(d = ball_d - groove_w, $fn = segments);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Longitude grooves\n    for (lon = [0:45:359]) {\n        rotate([0, 0, lon]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    sphere(d = ball_d + 0.5, $fn = segments);\n                    \n                    // Create groove\n                    rotate([0, 92, 0]) {\n                        sphere(d = ball_d - groove_w, $fn = segments);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball\n    pilates_ball();\n    \n    // Valve\n    valve();\n    \n    // Seams and details\n    // Only add surface details to outer shell\n    translate([0, 0, 0]) {\n        // Horizontal seams\n        difference() {\n            sphere(d = ball_d + 2, $fn = segments);\n            sphere(d = ball_d - 1, $fn = segments);\n        }\n        \n        // Cut seam grooves\n        horizontal_seam();\n        vertical_seams();\n        panel_grooves();\n    }\n}",
    "renders": true
  },
  {
    "toy": "kickboard",
    "openscad_code": "// Toy Kickboard - Realistic Style, Medium Complexity\n\n// Overall dimensions (mm)\nkickboard_length = 120;\nkickboard_width = 60;\nkickboard_height = 25;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Main deck with slight curvature\nmodule deck() {\n    // Base deck\n    difference() {\n        // Main curved deck body\n        hull() {\n            translate([kickboard_length/2-5, 0, kickboard_height/2])\n                scale([1, 0.8, 0.3])\n                    sphere(d=kickboard_width);\n            translate([5, 0, kickboard_height/2])\n                scale([1, 0.8, 0.3])\n                    sphere(d=kickboard_width);\n        }\n        \n        // Hollow out center\n        translate([0, 0, -1])\n            cube([kickboard_length-10, kickboard_width-10, kickboard_height], center=true);\n    }\n}\n\n// Front steering column\nmodule steering_column() {\n    translate([kickboard_length-15, 0, kickboard_height]) {\n        // Column tube\n        difference() {\n            cylinder(h=25, d=8, center=false);\n            translate([0, 0, wall_thickness])\n                cylinder(h=25, d=8-wall_thickness*2, center=false);\n        }\n        \n        // Handlebar\n        translate([0, 0, 25]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cube([20, 6, 6], center=true);\n                    cube([20-wall_thickness*2, 6-wall_thickness*2, 6-wall_thickness*2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Rear wheel assembly\nmodule rear_wheels() {\n    for (y = [-kickboard_width/3, kickboard_width/3]) {\n        translate([5, y, 0]) {\n            // Wheel mount\n            difference() {\n                cube([8, 8, 12], center=true);\n                cube([8-wall_thickness*2, 8-wall_thickness*2, 12], center=true);\n            }\n            \n            // Wheel\n            translate([0, 0, -6])\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cylinder(h=8, d=12, center=true);\n                        cylinder(h=8, d=12-wall_thickness*2, center=true);\n                    }\n                    // Tread pattern\n                    for (i = [0:11]) {\n                        rotate([0, 0, i*30]) {\n                            translate([0, 6, 0])\n                                cube([1, 2, 8.1], center=true);\n                        }\n                    }\n                }\n        }\n    }\n}\n\n// Front wheel assembly\nmodule front_wheel() {\n    translate([kickboard_length-15, 0, 0]) {\n        // Fork\n        difference() {\n            cube([10, 16, 12], center=true);\n            cube([10-wall_thickness*2, 16-wall_thickness*2, 12], center=true);\n        }\n        \n        // Wheel\n        translate([0, 0, -6])\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=10, d=15, center=true);\n                    cylinder(h=10, d=15-wall_thickness*2, center=true);\n                }\n                // Tread pattern\n                for (i = [0:11]) {\n                    rotate([0, 0, i*30]) {\n                        translate([0, 7.5, 0])\n                            cube([1, 2, 10.1], center=true);\n                    }\n                }\n            }\n    }\n}\n\n// Grip tape pattern on deck\nmodule grip_pattern() {\n    translate([0, 0, kickboard_height-0.5]) {\n        for (x = [-kickboard_length/2+10 : 5 : kickboard_length/2-20]) {\n            for (y = [-kickboard_width/2+5 : 5 : kickboard_width/2-5]) {\n                translate([x, y, 0])\n                    cube([4, 1, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    deck();\n    steering_column();\n    rear_wheels();\n    front_wheel();\n    grip_pattern();\n    \n    // Additional details\n    // Side reflectors\n    translate([kickboard_length/2, kickboard_width/2+1, kickboard_height/2])\n        cube([4, 0.5, 8], center=true);\n    translate([kickboard_length/2, -kickboard_width/2-1, kickboard_height/2])\n        cube([4, 0.5, 8], center=true);\n    \n    // Logo area\n    translate([kickboard_length/2, 0, kickboard_height+1])\n        cube([20, 10, 1], center=true);\n}",
    "renders": true
  },
  {
    "toy": "paddleboard",
    "openscad_code": "// Toy Paddleboard - Realistic Style, Medium Complexity\n// Total length ~120mm, width ~35mm, thickness ~12mm\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 36;\n\nmodule paddleboard_body() {\n    // Main deck with slight rocker (curved bottom)\n    hull() {\n        // Top deck surface\n        translate([0, 0, 10])\n            scale([1, 0.9, 1])\n            cube([120, 35, 2], center = true);\n        \n        // Bottom curved surface\n        translate([0, 0, 0])\n            scale([1, 0.8, 0.3])\n            cube([120, 35, 8], center = true);\n    }\n}\n\nmodule fin_box() {\n    // Fin box for removable toy fin\n    translate([-55, 0, 5])\n        difference() {\n            // Main box structure\n            cube([8, 12, 8], center = true);\n            \n            // Slot for fin insertion\n            translate([0, 0, 3])\n                cube([4, 10, 6], center = true);\n        }\n}\n\nmodule toy_fin() {\n    // Removable toy fin\n    color(\"darkblue\")\n    translate([-55, 0, 1])\n        union() {\n            // Base that fits in box\n            translate([0, 0, 2])\n                cube([4, 8, 4], center = true);\n            \n            // Fin blade\n            translate([0, 0, 6])\n                cube([1.5, 8, 8], center = true);\n        }\n}\n\nmodule deck_pad() {\n    // EVA foam-like deck pad pattern\n    for (x = [-40:10:40]) {\n        for (y = [-12:6:12]) {\n            translate([x, y, 11])\n                scale([1, 0.8, 1])\n                cylinder(h = 1, r = 3, center = true);\n        }\n    }\n}\n\nmodule carry_handle() {\n    // Center carry handle\n    translate([0, 0, 11])\n        difference() {\n            // Handle base\n            cube([25, 15, 3], center = true);\n            \n            // Handle opening\n            translate([0, 0, -1])\n                cube([20, 10, 5], center = true);\n        }\n}\n\nmodule leash_plug() {\n    // Leash attachment point at tail\n    translate([55, 0, 11])\n        union() {\n            // Base\n            cylinder(h = 3, r = 4, center = true);\n            \n            // Plug post\n            translate([0, 0, 2])\n                cylinder(h = 4, r = 2);\n            \n            // Hole for leash string\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = 1, center = true);\n        }\n}\n\nmodule rail_tape() {\n    // Decorative rail tape\n    difference() {\n        // Outer rail\n        hull() {\n            translate([0, 0, 5])\n                scale([1, 1, 0.2])\n                cube([122, 37, 10], center = true);\n            \n            translate([0, 0, 6])\n                scale([1, 1, 0.2])\n                cube([122, 37, 10], center = true);\n        }\n        \n        // Remove inner part to leave thin rail\n        hull() {\n            translate([0, 0, 5])\n                scale([0.95, 0.9, 0.2])\n                cube([122, 37, 10], center = true);\n            \n            translate([0, 0, 6])\n                scale([0.95, 0.9, 0.2])\n                cube([122, 37, 10], center = true);\n        }\n    }\n}\n\nmodule nose_rocker() {\n    // Rounded nose tip\n    hull() {\n        translate([60, 0, 10])\n            sphere(r = 6);\n        translate([60, 0, 8])\n            sphere(r = 6);\n    }\n}\n\nmodule tail_rocker() {\n    // Slightly uplifted tail\n    hull() {\n        translate([-60, 0, 8])\n            sphere(r = 5);\n        translate([-60, 0, 6])\n            sphere(r = 5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    paddleboard_body();\n    \n    // Structural elements\n    fin_box();\n    carry_handle();\n    leash_plug();\n    \n    // Surface details\n    deck_pad();\n    rail_tape();\n    \n    // Shape refinements\n    nose_rocker();\n    tail_rocker();\n}\n\n// Optional removable fin\n// toy_fin();",
    "renders": true
  },
  {
    "toy": "skateboard",
    "openscad_code": "// Realistic Toy Skateboard – 90 mm long\n// All dimensions in mm, wall thickness 2 mm where hollow\n$fn = 32;\n\n// Overall scale factor for easy re-sizing\nscale_factor = 1;\n\n// Main deck profile\nmodule deck(){\n    // Solid core\n    difference(){\n        // Tapered deck body\n        hull(){\n            translate([-40,0,0]) cube([80,20,5], center=true);\n            translate([-30,0,0]) cube([60,35,5], center=true);\n            translate([ 30,0,0]) cube([60,35,5], center=true);\n            translate([ 40,0,0]) cube([80,20,5], center=true);\n        }\n        // Light-weight cavity on bottom side\n        translate([0,0,-2.5])\n            cube([76,31,3.5], center=true);\n    }\n}\n\n// Nose & tail kick-ups\nmodule kick(angle){\n    rotate([angle,0,0])\n        translate([0,0,2.5])\n            cube([18,35,2.5], center=true);\n}\n\n// Truck base\nmodule truck(){\n    // Base plate\n    difference(){\n        cube([16,32,4], center=true);\n        // Screw recesses\n        for(x=[-6,6], y=[-12,12])\n            translate([x,y,-1]) cylinder(h=5,r=2,$fn=8);\n    }\n    // Hanger\n    translate([0,0,4])\n        cube([8,50,6], center=true);\n    // Axle\n    translate([0,0,7])\n        rotate([0,90,0])\n            cylinder(h=60,d=3,center=true);\n}\n\n// Wheel\nmodule wheel(){\n    difference(){\n        cylinder(h=8,r=11,center=true);\n        translate([0,0,-4.1])\n            cylinder(h=8.2,r=3);\n    }\n}\n\n// Wheel assembly (4 wheels)\nmodule wheels(){\n    for(side=[-1,1]){\n        translate([0,side*25,7])\n            truck();\n        for(x=[-22,22])\n            translate([x,side*25,-4])\n                wheel();\n    }\n}\n\n// Grip-tape texture lines\nmodule grip(){\n    for(i=[-35:5:35]){\n        translate([i,-17,2.51])\n            cube([0.5,34,0.2]);\n    }\n}\n\n// Hardware bolts\nmodule bolts(){\n    for(side=[-1,1]){\n        for(x=[-10,10]){\n            translate([x,side*12,2.5])\n                cylinder(h=3,r=1.5,$fn=6);\n        }\n    }\n}\n\n// Main assembly\nscale(scale_factor){\n    union(){\n        // Deck parts\n        deck();\n        translate([-31,0,0]) kick(25);\n        translate([ 31,0,0]) kick(-25);\n        \n        // Trucks & wheels\n        wheels();\n        \n        // Surface details\n        grip();\n        bolts();\n    }\n}",
    "renders": true
  },
  {
    "toy": "rollerblade",
    "openscad_code": "// Toy Rollerblade - Realistic Style, Medium Complexity\n// Dimensions: ~120mm long, ~45mm wide, ~50mm tall\n\n// Main parameters\n$fn = 24;\nwheel_radius = 8;\nwheel_width = 6;\nframe_thickness = 3;\nboot_length = 110;\nboot_width = 42;\nboot_height = 35;\ntoe_stop_radius = 5;\n\n// Main boot shell\nmodule boot_shell() {\n    difference() {\n        // Main boot body\n        union() {\n            // Base shell\n            translate([-boot_length/2, -boot_width/2, 0])\n                cube([boot_length, boot_width, boot_height]);\n            \n            // Toe cap\n            translate([boot_length/2 - 20, 0, boot_height/2])\n                sphere(r=20);\n            \n            // Heel support\n            translate([-boot_length/2 + 15, 0, boot_height])\n                cylinder(r1=15, r2=20, h=15);\n            \n            // Ankle cuff\n            translate([-boot_length/2 + 30, 0, boot_height + 10])\n                rotate([90, 0, 0])\n                    cylinder(r1=20, r2=15, h=25);\n        }\n        \n        // Remove inside for foot space\n        translate([-boot_length/2 + 5, -boot_width/2 + 5, 5])\n            cube([boot_length - 10, boot_width - 10, boot_height]);\n        \n        // Lace holes\n        for(i = [-1:1]) {\n            translate([boot_length/2 - 30 + i*15, 0, boot_height - 5])\n                cylinder(r=2, h=10, center=true);\n        }\n    }\n}\n\n// Wheel frame\nmodule frame() {\n    // Main frame rails\n    translate([-40, -frame_thickness/2, -wheel_radius - frame_thickness])\n        cube([80, frame_thickness, frame_thickness]);\n    \n    translate([-40, boot_width/2 - frame_thickness, -wheel_radius - frame_thickness])\n        cube([80, frame_thickness, frame_thickness]);\n    \n    // Axle mounts\n    for(i = [0:3]) {\n        x_pos = -30 + i*20;\n        translate([x_pos, 0, -wheel_radius - frame_thickness/2])\n            cube([frame_thickness*2, boot_width, frame_thickness]);\n    }\n}\n\n// Wheels with bearings\nmodule wheel() {\n    difference() {\n        // Wheel tire\n        cylinder(r=wheel_radius, h=wheel_width, center=true);\n        \n        // Bearing hole\n        cylinder(r=3, h=wheel_width + 1, center=true);\n        \n        // Hub detail\n        cylinder(r=wheel_radius - 3, h=wheel_width - 2, center=true);\n    }\n}\n\n// Toe stop\nmodule toe_stop() {\n    translate([boot_length/2 - 5, 0, -wheel_radius - 5])\n        rotate([0, 90, 0])\n            cylinder(r=toe_stop_radius, h=10);\n}\n\n// Laces\nmodule laces() {\n    color(\"white\")\n    for(i = [-2:2]) {\n        translate([boot_length/2 - 40 + i*10, -boot_width/4, boot_height - 2])\n            rotate([90, 0, 0])\n                cylinder(r=1, h=boot_width/2);\n    }\n}\n\n// Buckle details\nmodule buckles() {\n    // Ankle strap\n    translate([-boot_length/2 + 40, boot_width/2, boot_height + 15])\n        cube([40, 5, 2]);\n    \n    // Cuff buckle\n    translate([-boot_length/2 + 20, boot_width/2 + 10, boot_height + 20])\n        rotate([0, 0, 15])\n            cube([25, 5, 3]);\n}\n\n// Assembly\nunion() {\n    // Main boot\n    boot_shell();\n    \n    // Frame and wheels\n    frame();\n    for(i = [0:3]) {\n        x_pos = -30 + i*20;\n        translate([x_pos, 0, -wheel_radius - frame_thickness/2])\n            wheel();\n    }\n    \n    // Toe stop\n    toe_stop();\n    \n    // Details\n    laces();\n    buckles();\n}\n\n// Print orientation - flat on bed\ntranslate([0, 0, 0])\n    color(\"lightgray\")\n    children();\n    \n// Add small support under toe for stability\ntranslate([boot_length/2 - 10, 0, -wheel_radius - frame_thickness - 2])\n    cube([20, 2, 2]);",
    "renders": true
  },
  {
    "toy": "scooter",
    "openscad_code": "// Realistic Toy Scooter - Medium Complexity\n// Overall size: ~110mm long, ~70mm tall, ~35mm wide\n\n$fn = 32;\n\n// Main module\nmodule scooter() {\n    color(\"lightgray\") {\n        union() {\n            // Deck assembly\n            translate([0, 0, 15]) deck();\n            \n            // Front fork and steering\n            translate([-45, 0, 35]) front_fork();\n            \n            // Handlebars\n            translate([-45, 0, 70]) handlebar();\n            \n            // Rear wheel\n            translate([40, 0, 15]) wheel(15);\n            \n            // Front wheel\n            translate([-55, 0, 15]) wheel(15);\n        }\n    }\n}\n\n// Main deck with grip pattern\nmodule deck() {\n    difference() {\n        // Main deck body\n        translate([0, 0, 0]) {\n            cube([100, 30, 5], center=true);\n        }\n        \n        // Grip pattern holes\n        for (x = [-45:5:45]) {\n            for (y = [-12:5:12]) {\n                translate([x, y, 2.6]) {\n                    cylinder(h=3, d=3, center=true);\n                }\n            }\n        }\n    }\n    \n    // Reinforcement ribs underneath\n    for (x = [-40:10:40]) {\n        translate([x, 0, 12.5]) {\n            cube([8, 28, 5], center=true);\n        }\n    }\n}\n\n// Front fork assembly\nmodule front_fork() {\n    // Fork tubes\n    union() {\n        // Left fork\n        translate([0, 12, -10]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=40, d=6, center=false);\n            }\n        }\n        \n        // Right fork\n        translate([0, -12, -10]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=40, d=6, center=false);\n            }\n        }\n        \n        // Steering column\n        translate([0, 0, 30]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=40, d=8, center=false);\n            }\n        }\n        \n        // Fork crown\n        translate([0, 0, 10]) {\n            cube([30, 30, 6], center=true);\n        }\n    }\n}\n\n// Handlebar assembly\nmodule handlebar() {\n    // Main bar\n    rotate([0, 90, 0]) {\n        cylinder(h=40, d=8, center=true);\n    }\n    \n    // Grips\n    for (y = [-15, 15]) {\n        translate([0, y, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=15, d=12, center=true);\n            }\n        }\n    }\n    \n    // Handlebar stem\n    translate([20, 0, 0]) {\n        rotate([0, 0, 90]) {\n            cylinder(h=30, d=10, center=true);\n        }\n    }\n}\n\n// Wheel module with spokes\nmodule wheel(radius) {\n    // Wheel rim\n    rotate_extrude(angle=360, convexity=10) {\n        translate([radius, 0, 0]) {\n            polygon(points=[\n                [0, 0],\n                [2, 0],\n                [2, 8],\n                [0, 8]\n            ]);\n        }\n    }\n    \n    // Tire\n    rotate_extrude(angle=360, convexity=10) {\n        translate([radius + 2, 0, 0]) {\n            polygon(points=[\n                [0, 0],\n                [2, 0],\n                [2, 8],\n                [0, 8]\n            ]);\n        }\n    }\n    \n    // Spokes\n    for (i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([1, 0, 4]) {\n                cube([radius - 2, 2, 0.5], center=true);\n            }\n        }\n    }\n    \n    // Hub\n    rotate_extrude(angle=360, convexity=10) {\n        translate([3, 0, 0]) {\n            polygon(points=[\n                [0, 0],\n                [3, 0],\n                [3, 8],\n                [0, 8]\n            ]);\n        }\n    }\n}\n\n// Generate the scooter\nscooter();",
    "renders": true
  },
  {
    "toy": "trampoline",
    "openscad_code": "// Trampoline toy with realistic proportions and structural details\n// Overall footprint ~100mm diameter, ~30mm height\n\n// Parameters\ndia = 100;              // Overall diameter\nframe_r = 2;            // Frame tube radius\nspring_r = 1.2;         // Spring radius\nspring_n = 16;          // Number of springs\nleg_h = 18;             // Leg height\nmat_thick = 1.5;        // Mat thickness\nnet_h = 25;             // Safety net height\npole_r = 1.8;           // Net pole radius\n\n// Main trampoline frame\nmodule frame() {\n    difference() {\n        // Outer ring\n        cylinder(h=frame_r*2, r=dia/2, $fn=60);\n        // Hollow center\n        translate([0,0,-0.1])\n            cylinder(h=frame_r*2+0.2, r=dia/2-frame_r*2, $fn=60);\n    }\n}\n\n// Mat with realistic texture\nmodule mat() {\n    translate([0,0,frame_r*2])\n    difference() {\n        cylinder(h=mat_thick, r=dia/2-frame_r*3, $fn=60);\n        \n        // Perforated texture\n        for(i=[0:5:359]) {\n            rotate([0,0,i])\n            translate([dia/2*0.7,0,-0.1])\n            cube([2, 2, mat_thick+0.2], center=true);\n        }\n    }\n}\n\n// Individual spring\nmodule spring() {\n    translate([0,0,frame_r*2])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=6, r=spring_r, $fn=12);\n        translate([0,0,-0.1])\n        cylinder(h=6.2, r=spring_r-0.6, $fn=12);\n    }\n}\n\n// All springs around the mat\nmodule springs() {\n    for(i=[0:spring_n-1]) {\n        angle = i * 360/spring_n;\n        translate([cos(angle)*(dia/2-frame_r), sin(angle)*(dia/2-frame_r), 0])\n        rotate([0,0,angle])\n        spring();\n    }\n}\n\n// Support leg\nmodule leg() {\n    translate([0,0,-leg_h/2])\n    difference() {\n        cylinder(h=leg_h, r=frame_r*1.2, $fn=12);\n        translate([frame_r*0.5,0,-0.1])\n        cylinder(h=leg_h+0.2, r=frame_r*0.6, $fn=12);\n    }\n}\n\n// All legs\nmodule legs() {\n    for(i=[0:3]) {\n        angle = i * 90 + 45;\n        translate([cos(angle)*dia/3, sin(angle)*dia/3, 0])\n        rotate([0,0,angle+90])\n        rotate([20,0,0])\n        leg();\n    }\n}\n\n// Safety net pole\nmodule net_pole() {\n    translate([0,0,frame_r*2])\n    rotate([0,0,45])\n    translate([dia/2-frame_r*2,0,0])\n    rotate([10,0,0])\n    cylinder(h=net_h, r=pole_r, $fn=12);\n}\n\n// All net poles\nmodule net_poles() {\n    for(i=[0:3]) {\n        angle = i * 90 + 45;\n        rotate([0,0,angle])\n        net_pole();\n    }\n}\n\n// Net mesh\nmodule net() {\n    translate([0,0,frame_r*2+net_h/2])\n    difference() {\n        cylinder(h=net_h, r=dia/2-frame_r*2, $fn=60);\n        translate([0,0,-0.1])\n        cylinder(h=net_h+0.2, r=dia/2-frame_r*4, $fn=60);\n    }\n}\n\n// Assembly\nframe();\nmat();\nsprings();\nlegs();\nnet_poles();\nnet();",
    "renders": true
  },
  {
    "toy": "pogo",
    "openscad_code": "// Pogo Toy - Realistic Medium Complexity\n// Designed for 3D printing with 2mm walls\n\n$fn = 36;\n\n// Main module\nmodule pogo_toy() {\n    // Main pole assembly\n    union() {\n        // Handle bars\n        translate([0, 0, 85])\n            handle_assembly();\n        \n        // Main pole\n        translate([0, 0, 0])\n            pole_assembly();\n            \n        // Spring assembly\n        translate([0, 0, -5])\n            spring_assembly();\n            \n        // Foot base\n        translate([0, 0, -35])\n            foot_assembly();\n    }\n}\n\n// Handle bars with grips\nmodule handle_assembly() {\n    difference() {\n        // Main handle bar tube\n        rotate([90, 0, 0])\n            cylinder(h=30, d=12);\n            \n        // Left grip\n        translate([-12, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=16);\n            \n        // Right grip\n        translate([12, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=16);\n    }\n    \n    // Grip textures\n    for(i = [-1, 1]) {\n        translate([i * 12, 0, 0])\n            rotate([90, 0, 0])\n            for(j = [0:3]) {\n                translate([0, 0, -10 + j * 5])\n                    cylinder(h=3, d1=15, d2=15.5);\n            }\n    }\n}\n\n// Main pole with safety markings\nmodule pole_assembly() {\n    difference() {\n        // Main pole tube\n        cylinder(h=90, d=18);\n        \n        // Interior hollow\n        cylinder(h=90, d=14);\n    }\n    \n    // Safety stripes\n    for(i = [1:4]) {\n        color(\"red\")\n        translate([0, 0, 15 + i * 15])\n            cylinder(h=3, d=19);\n    }\n}\n\n// Spring mechanism\nmodule spring_assembly() {\n    difference() {\n        // Spring housing\n        cylinder(h=25, d=40);\n        \n        // Interior cavity\n        cylinder(h=25, d=36);\n        \n        // Bottom opening for pole\n        cylinder(h=10, d=20);\n    }\n    \n    // Spring coils\n    for(i = [0:8]) {\n        translate([0, 0, 2 + i * 2.5])\n            rotate([0, 0, i * 30])\n            difference() {\n                cylinder(h=2, d=38);\n                cylinder(h=2, d=34);\n            }\n    }\n}\n\n// Foot base with grip pattern\nmodule foot_assembly() {\n    difference() {\n        // Main foot platform\n        cylinder(h=8, d=60);\n        \n        // Center hole\n        cylinder(h=8, d=18);\n    }\n    \n    // Grip pattern on top\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([0, 20, 8])\n                cube([3, 10, 1], center=true);\n    }\n    \n    // Bottom grip rings\n    for(r = [15:10:45]) {\n        translate([0, 0, 0])\n            cylinder(h=1, d=r * 2);\n    }\n}\n\n// Render the toy\npogo_toy();",
    "renders": true
  },
  {
    "toy": "stilts",
    "openscad_code": "// Stilts toy for kids – realistic medium-complexity model\n// Overall height: 120 mm\n// Foot platform size: 90 x 35 mm\n// Wall thickness: 2 mm everywhere\n\n// ---------- Parameters ----------\n$fn = 24;\nwall = 2;\npole_r = 10;\npole_h = 110;\nfoot_w = 90;\nfoot_d = 35;\nfoot_h = 12;\ngrip_r = 12;\ngrip_h = 120;\nrib_spacing = 20;\nrib_w = 4;\nrib_h = 4;\n\n// ---------- Pole with ribs ----------\nmodule pole() {\n    difference() {\n        union() {\n            // Main pole tube\n            cylinder(h = pole_h, r = pole_r, center = false);\n            // Ribs for grip\n            for (i = [0 : rib_spacing : pole_h - rib_spacing]) {\n                translate([0, 0, i + rib_spacing/2])\n                rotate([0, 90, 0])\n                cylinder(h = pole_r*2, r = rib_w, center = true);\n            }\n        }\n        // Hollow core\n        translate([0, 0, -1])\n        cylinder(h = pole_h + 2, r = pole_r - wall, center = false);\n    }\n}\n\n// ---------- Foot plate ----------\nmodule footplate() {\n    difference() {\n        union() {\n            // Plate body\n            translate([-foot_w/2, -foot_d/2, 0])\n            cube([foot_w, foot_d, foot_h]);\n            // Reinforcement ribs underneath\n            for (x = [-foot_w/2 + 10 : 15 : foot_w/2 - 10]) {\n                translate([x, 0, -rib_h])\n                cube([rib_w, foot_d, rib_h]);\n            }\n        }\n        // Mounting hole for pole\n        translate([0, 0, -1])\n        cylinder(h = foot_h + 2, r = pole_r + 0.2, center = false);\n        // Foot surface texture (anti-slip dimples)\n        for (x = [-foot_w/2 + 5 : 10 : foot_w/2 - 5])\n        for (y = [-foot_d/2 + 5 : 10 : foot_d/2 - 5]) {\n            translate([x, y, foot_h - 1])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// ---------- Hand grip sleeve ----------\nmodule handgrip() {\n    difference() {\n        union() {\n            // Grip sleeve tube\n            cylinder(h = grip_h, r = grip_r, center = false);\n            // End cap\n            translate([0, 0, grip_h])\n            cylinder(h = 3, r = grip_r + 1, center = false);\n        }\n        // Inner hole\n        translate([0, 0, -1])\n        cylinder(h = grip_h + 2, r = grip_r - wall, center = false);\n    }\n}\n\n// ---------- Assembly ----------\n// Left stilt\ntranslate([-pole_r - foot_w/2 - 5, 0, 0]) {\n    pole();\n    translate([0, 0, 0])\n    footplate();\n    translate([0, 0, pole_h - grip_h])\n    handgrip();\n}\n\n// Right stilt (mirror of left)\ntranslate([pole_r + foot_w/2 + 5, 0, 0]) {\n    mirror([1, 0, 0]) {\n        pole();\n        translate([0, 0, 0])\n        footplate();\n        translate([0, 0, pole_h - grip_h])\n        handgrip();\n    }\n}",
    "renders": true
  },
  {
    "toy": "pogostick",
    "openscad_code": "// Toy Pogostick - Realistic Style, Medium Complexity\n// Total height: 120mm\n\nmodule pogostick() {\n    // Main tube\n    translate([0, 0, 60]) \n        cylinder(h=60, d1=12, d2=12, $fn=32);\n\n    // Bottom foot plate with grip pattern\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h=10, d=20, $fn=32);\n            // Grip pattern holes\n            for(i=[0:5]) {\n                rotate([0, 0, i*60]) \n                    translate([7, 0, -1])\n                        cube([2, 1, 12], center=true);\n            }\n        }\n\n    // Top handle bar\n    translate([0, 0, 110])\n        rotate([90, 0, 0])\n            cylinder(h=40, d=8, $fn=32);\n\n    // Handle grips\n    translate([-18, 0, 110])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=10, $fn=32);\n    translate([18, 0, 110])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=10, $fn=32);\n\n    // Spring housing\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h=35, d=16, $fn=32);\n            cylinder(h=37, d=12, $fn=32);\n        }\n\n    // Visible spring coils\n    module spring_coil() {\n        for(i=[0:8]) {\n            translate([0, 0, 22 + i*3])\n                rotate([0, 0, i*30])\n                    difference() {\n                        cylinder(h=2, d=14, $fn=32);\n                        cylinder(h=3, d=10, $fn=32);\n                    }\n        }\n    }\n    spring_coil();\n\n    // Support brackets\n    module bracket(y) {\n        translate([0, y, 45])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=15, d=6, $fn=16);\n                    translate([0, 0, -1])\n                        cube([15, 3, 8], center=true);\n                }\n    }\n    bracket(8);\n    bracket(-8);\n\n    // Foot pegs\n    module foot_peg(x) {\n        translate([x, 0, 45])\n            rotate([0, 90, 0])\n                union() {\n                    cylinder(h=12, d=6, $fn=16);\n                    translate([0, 0, 12])\n                        sphere(d=8, $fn=16);\n                }\n    }\n    foot_peg(12);\n    foot_peg(-12);\n\n    // Safety bumper ring\n    translate([0, 0, 18])\n        cylinder(h=3, d=24, $fn=32);\n\n    // Top cap detail\n    translate([0, 0, 120])\n        cylinder(h=5, d=14, $fn=32);\n}\n\n// Scale to reasonable toy size\nscale([1, 1, 1])\n    pogostick();",
    "renders": true
  },
  {
    "toy": "balancebeam",
    "openscad_code": "// Balance Beam Toy - Realistic Medium Complexity\n// Dimensions: 120mm long × 20mm wide × 40mm high\n\n// Parameters\nbeam_length = 120;\nbeam_width = 20;\nbeam_height = 8;\nleg_height = 30;\nleg_width = 8;\nfoot_length = 25;\nfoot_width = 15;\nfoot_height = 2;\nsupport_radius = 3;\nsupport_height = 25;\n\n// Main beam with rounded edges\nmodule main_beam() {\n    difference() {\n        // Main beam body\n        cube([beam_length, beam_width, beam_height], center=true);\n        \n        // Rounded edges - subtract half-cylinders\n        translate([beam_length/2-1, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=2, r=beam_height/2, center=true);\n        translate([-beam_length/2+1, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=2, r=beam_height/2, center=true);\n    }\n    \n    // Add rounded caps\n    translate([beam_length/2-beam_height/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=beam_height, r=beam_height/2, center=true);\n    translate([-beam_length/2+beam_height/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=beam_height, r=beam_height/2, center=true);\n}\n\n// Support leg with foot\nmodule support_leg(x_pos, angle) {\n    translate([x_pos, 0, 0]) {\n        rotate([0, angle, 0]) {\n            // Main leg\n            translate([0, 0, -leg_height/2-foot_height])\n                cube([leg_width, leg_width, leg_height], center=true);\n            \n            // Foot base\n            translate([0, 0, -leg_height-foot_height])\n                cube([foot_length, foot_width, foot_height], center=true);\n            \n            // Support struts\n            for(i = [-1:1]) {\n                translate([leg_width/2*i, 0, -leg_height/2-foot_height])\n                    rotate([0, 90, 0])\n                    cylinder(h=support_height, r=support_radius, center=true);\n            }\n        }\n    }\n}\n\n// Center support structure\nmodule center_support() {\n    translate([0, 0, -leg_height/2-foot_height-beam_height/2]) {\n        // Main center post\n        cube([leg_width*1.5, leg_width*1.5, leg_height], center=true);\n        \n        // Stabilizing arms\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle]) {\n                translate([leg_width*0.75+foot_length/2, 0, -leg_height/2+foot_height])\n                    cube([foot_length, leg_width*0.8, leg_height*0.8], center=true);\n            }\n        }\n    }\n}\n\n// Safety end caps\nmodule end_caps() {\n    for(side = [-1, 1]) {\n        translate([side*beam_length/2, 0, 0]) {\n            // Main cap\n            difference() {\n                cylinder(h=beam_height*1.5, r=beam_width/2+2, center=true);\n                cylinder(h=beam_height*1.5+0.1, r=beam_width/2-2, center=true);\n            }\n            \n            // Grip texture\n            for(i = [1:3]) {\n                rotate([90, 0, 0])\n                translate([0, 0, -beam_height/2+i*2])\n                    cylinder(h=beam_width+4, r=0.5, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main beam on top\n    translate([0, 0, leg_height+beam_height/2+foot_height])\n        main_beam();\n    \n    // End caps\n    translate([0, 0, leg_height+beam_height/2+foot_height])\n        end_caps();\n    \n    // Support legs\n    support_leg(beam_length/3, 15);\n    support_leg(-beam_length/3, -15);\n    \n    // Center support\n    center_support();\n}",
    "renders": true
  },
  {
    "toy": "hurdle",
    "openscad_code": "// Hurdle toy for 3D printing – realistic style, medium complexity\n// Overall footprint ~100 mm wide × 30 mm deep × 60 mm high\n\n// Parameters\nhurdle_width = 100;       // total width\nrail_height  = 55;        // top of the rail\nrail_thick   = 3;         // thickness of the top rail\nrail_width   = 3;         // depth of the rail\nleg_thick    = 6;         // square leg cross-section\nleg_taper    = 2;         // taper at bottom\nfoot_diam    = 12;        // disk-shaped foot\nfoot_h       = 2;\nbrace_h      = 10;        // lateral brace height\nbrace_t      = 2;\ncross_t      = 2;         // cross-brace thickness\ncross_h      = 20;\nslot_w       = 10;        // peg-and-slot connection feature\nslot_d       = 5;\nslot_h       = 3;\n\n// Utility: square post with slight taper\nmodule tapered_post(h, base, top) {\n    difference() {\n        hull() {\n            translate([0,0,0]) cube([base,base,0.1], center=true);\n            translate([0,0,h])  cube([top, top,0.1], center=true);\n        }\n        translate([0,0,-0.1]) cube([base-2*leg_taper, base-2*leg_taper, h+0.2], center=true);\n    }\n}\n\n// Single leg assembly with foot and peg\nmodule leg_with_foot(x_pos) {\n    translate([x_pos, 0, 0]) {\n        // Leg\n        translate([0,0,foot_h]) tapered_post(rail_height-foot_h, leg_thick, leg_thick-leg_taper);\n\n        // Foot disk\n        cylinder(h=foot_h, d=foot_diam, $fn=32);\n\n        // Peg on inside face for slotting\n        translate([-leg_thick/2-slot_w/2, 0, rail_height-slot_h/2])\n            cube([slot_w, slot_d, slot_h], center=true);\n    }\n}\n\n// Cross-brace between legs\nmodule cross_brace() {\n    // horizontal brace\n    translate([0,0,brace_h/2+foot_h])\n        cube([hurdle_width-leg_thick*2-4, cross_t, brace_h], center=true);\n\n    // diagonal supports\n    for (side = [-1, 1]) {\n        rotate([0,0,side*15])\n            translate([0,0,foot_h+cross_h/2])\n                cube([hurdle_width-leg_thick*2-4, cross_t, cross_h], center=true);\n    }\n}\n\n// Top rail with rounded edges\nmodule top_rail() {\n    hull() {\n        translate([-hurdle_width/2+2,0,rail_height])\n            cube([rail_width, rail_width, rail_thick], center=true);\n        translate([hurdle_width/2-2,0,rail_height])\n            cube([rail_width, rail_width, rail_thick], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Legs\n    leg_with_foot(-hurdle_width/2 + leg_thick/2);\n    leg_with_foot( hurdle_width/2 - leg_thick/2);\n\n    // Cross-bracing\n    cross_brace();\n\n    // Top rail\n    top_rail();\n}",
    "renders": true
  },
  {
    "toy": "cones",
    "openscad_code": "// Realistic Toy Cones Set - Medium Complexity\n// A set of traffic cones with realistic proportions and toy features\n\nmodule cone_body(height, base_d, wall_t) {\n    // Main cone body with hollow interior\n    difference() {\n        cylinder(h=height, d1=base_d, d2=base_d*0.3, $fn=32);\n        translate([0, 0, wall_t])\n            cylinder(h=height-wall_t*2, d1=base_d-wall_t*2, d2=base_d*0.3-wall_t*2, $fn=32);\n    }\n    \n    // Add weight ring at bottom\n    translate([0, 0, 0])\n        cylinder(h=wall_t*2, d=base_d*0.95, $fn=32);\n}\n\nmodule base_ring(base_d, height) {\n    // Wide base ring for stability\n    difference() {\n        cylinder(h=height*0.1, d=base_d*1.3, $fn=32);\n        cylinder(h=height*0.1+1, d=base_d*1.1, $fn=32);\n    }\n}\n\nmodule reflective_stripe(height, base_d, stripe_h) {\n    // High-visibility reflective stripe\n    color(\"white\", 0.8)\n    translate([0, 0, height*0.6])\n        cylinder(h=stripe_h, d1=base_d*0.7, d2=base_d*0.5, $fn=32);\n}\n\nmodule handle_slot(height, base_d) {\n    // Finger grip slot for easy carrying\n    slot_w = base_d * 0.4;\n    slot_h = height * 0.15;\n    slot_d = base_d * 0.3;\n    \n    translate([0, base_d*0.35, height*0.4])\n        rotate([90, 0, 0])\n            cube([slot_w, slot_h, slot_d], center=true);\n}\n\nmodule toy_connector(height, base_d) {\n    // Interlocking connector on top\n    connector_h = height * 0.1;\n    connector_d = base_d * 0.25;\n    \n    translate([0, 0, height])\n        cylinder(h=connector_h, d=connector_d, $fn=16);\n    \n    // Matching socket on bottom\n    translate([0, 0, -connector_h])\n        cylinder(h=connector_h+1, d=connector_d+0.5, $fn=16);\n}\n\nmodule cone_set() {\n    // Small cone (50mm)\n    translate([-40, 0, 0]) {\n        cone_body(50, 25, 2);\n        base_ring(25, 50);\n        reflective_stripe(50, 25, 4);\n        handle_slot(50, 25);\n        toy_connector(50, 25);\n    }\n    \n    // Medium cone (75mm)\n    translate([0, 0, 0]) {\n        cone_body(75, 35, 2.5);\n        base_ring(35, 75);\n        reflective_stripe(75, 35, 5);\n        handle_slot(75, 35);\n        toy_connector(75, 35);\n    }\n    \n    // Large cone (100mm)\n    translate([50, 0, 0]) {\n        cone_body(100, 45, 3);\n        base_ring(45, 100);\n        reflective_stripe(100, 45, 6);\n        handle_slot(100, 45);\n        toy_connector(100, 45);\n    }\n}\n\n// Generate the complete cone set\ncone_set();",
    "renders": true
  },
  {
    "toy": "marker",
    "openscad_code": "// Toy Marker - Realistic Style with Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions\nlength = 120;\nbarrel_d = 14;\ntip_length = 15;\ncap_length = 40;\n\nmodule marker_body() {\n    // Main barrel\n    difference() {\n        cylinder(h=length, d=barrel_d, $fn=32);\n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=length+2, d=barrel_d-4, $fn=32);\n    }\n    \n    // Tip\n    translate([0, 0, length])\n        cylinder(h=tip_length, d1=barrel_d, d2=2, $fn=16);\n}\n\nmodule marker_cap() {\n    // Cap body\n    difference() {\n        translate([0, 0, -cap_length])\n            cylinder(h=cap_length, d=barrel_d+2, $fn=32);\n        // Inner cavity\n        translate([0, 0, -cap_length-1])\n            cylinder(h=cap_length+2, d=barrel_d+0.5, $fn=32);\n    }\n    \n    // Clip\n    translate([barrel_d/2+0.5, 0, -cap_length/2])\n        rotate([90, 0, 0])\n            difference() {\n                cube([20, 2, 8], center=true);\n                translate([0, -1, 0])\n                    cube([20, 2, 7], center=true);\n            }\n    \n    // Grip ridges\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([barrel_d/2+1, 0, -cap_length+5])\n                cube([1.5, 1, 10], center=true);\n    }\n}\n\nmodule marker_details() {\n    // Brand label band\n    translate([0, 0, length/2])\n        difference() {\n            cylinder(h=15, d=barrel_d+0.2, $fn=32);\n            cylinder(h=15.2, d=barrel_d-0.5, $fn=32);\n        }\n    \n    // Color indicator ring\n    translate([0, 0, length-10])\n        difference() {\n            cylinder(h=3, d=barrel_d+1, $fn=32);\n            cylinder(h=3.2, d=barrel_d-1, $fn=32);\n        }\n    \n    // End cap detail\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=5, d=barrel_d, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=7, d=barrel_d-4, $fn=32);\n        }\n    \n    // Small vent holes\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n            translate([barrel_d/2-1, 0, length/4])\n                rotate([90, 0, 0])\n                    cylinder(h=2, d=1, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    marker_body();\n    translate([0, 0, length+tip_length+5])\n        marker_cap();\n    marker_details();\n}",
    "renders": true
  },
  {
    "toy": "ladder",
    "openscad_code": "// Ladder toy - realistic medium-complexity design\n// Overall height 120mm, width 40mm, depth 12mm\n\n// Parameters\nladder_height = 120;\nladder_width = 40;\nladder_depth = 12;\nrail_thickness = 3;\nrung_thickness = 2.5;\nrung_spacing = 18;\nrung_count = 6;\nhandle_diameter = 8;\nhandle_length = 15;\nbase_thickness = 4;\n\n// Colors (for preview only)\ncolor_rail = \"GoldenRod\";\ncolor_rung = \"SaddleBrown\";\n\nmodule ladder_rail(height, width, depth) {\n    // Main vertical rail with rounded top\n    difference() {\n        union() {\n            // Main rail body\n            cube([width, depth, height - 5]);\n            // Rounded top cap\n            translate([width/2, depth/2, height - 5])\n                cylinder(h=5, r1=width/2, r2=width/2, $fn=20);\n        }\n        // Safety hole for finger grip\n        translate([width/2, depth/2, height - 15])\n            rotate([90, 0, 0])\n                cylinder(h=width+1, r1=3, r2=3, $fn=20);\n    }\n}\n\nmodule ladder_rung(length, thickness) {\n    // Cylindrical rung with end caps\n    union() {\n        // Main rung cylinder\n        cylinder(h=length, r1=thickness/2, r2=thickness/2, $fn=16);\n        // End caps for better grip\n        translate([0, 0, 0])\n            cylinder(h=2, r1=thickness/2 + 1, r2=thickness/2, $fn=16);\n        translate([0, 0, length - 2])\n            cylinder(h=2, r1=thickness/2, r2=thickness/2 + 1, $fn=16);\n    }\n}\n\nmodule ladder_base(width, depth, thickness) {\n    // Wide base for stability with rounded edges\n    difference() {\n        union() {\n            // Main base\n            cube([width + 8, depth + 4, thickness]);\n            // Rounded front edge\n            translate([(width + 8)/2, (depth + 4)/2, thickness])\n                cylinder(h=thickness, r1=(depth + 4)/2, r2=(depth + 4)/2, $fn=20);\n        }\n        // Weight reduction holes\n        for(x=[-1, 1])\n            translate([(width + 8)/4 * x + (width + 8)/2, (depth + 4)/2, thickness/2])\n                cube([8, depth, thickness + 0.1], center=true);\n    }\n}\n\nmodule ladder_handle(diameter, length) {\n    // Curved handle for carrying\n    difference() {\n        union() {\n            // Main handle tube\n            rotate([90, 0, 0])\n                cylinder(h=length, r1=diameter/2, r2=diameter/2, $fn=16);\n            // Mounting brackets\n            for(side=[-1, 1])\n                translate([0, side * (length/2 - 2), 0])\n                    cube([diameter + 4, 4, diameter + 4], center=true);\n        }\n        // Grip texture\n        for(i=[0:3])\n            translate([0, -length/2 + 5 + i * 3, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=diameter + 1, r1=diameter/2 - 1, r2=diameter/2 - 1, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Left rail\n    translate([0, 0, 0])\n        color(color_rail)\n            ladder_rail(ladder_height, rail_thickness, ladder_depth);\n    \n    // Right rail\n    translate([ladder_width - rail_thickness, 0, 0])\n        color(color_rail)\n            ladder_rail(ladder_height, rail_thickness, ladder_depth);\n    \n    // Rungs\n    for(i=[0:rung_count-1]) {\n        translate([rail_thickness + 1, ladder_depth/2, rung_spacing/2 + i * rung_spacing])\n            rotate([90, 0, 0])\n                color(color_rung)\n                    ladder_rung(ladder_width - 2 * rail_thickness - 2, rung_thickness);\n    }\n    \n    // Base\n    translate([-4, -2, 0])\n        ladder_base(ladder_width, ladder_depth, base_thickness);\n    \n    // Top handle\n    translate([ladder_width/2 - handle_diameter/2 - 2, ladder_depth/2, ladder_height - 5])\n        ladder_handle(handle_diameter, handle_length);\n    \n    // Safety end caps\n    for(side=[0, 1]) {\n        translate([side * (ladder_width - rail_thickness), 0, ladder_height - 5])\n            cylinder(h=rail_thickness, r1=rail_thickness + 1, r2=rail_thickness + 1, $fn=20);\n    }\n}",
    "renders": true
  },
  {
    "toy": "parachute",
    "openscad_code": "// Parachute Toy - Realistic Medium Complexity\n// Overall height ~120mm, canopy diameter ~150mm\n\n// Canopy Parameters\ncanopy_d = 150;           // mm\ncanopy_segments = 16;     // Number of canopy segments\ncanopy_thick = 2;         // mm wall thickness\ncanopy_height = 45;        // mm\n\n// Shroud Lines Parameters\nline_thick = 2;           // mm diameter\nline_length = 75;         // mm\nline_count = 8;           // Number of shroud lines\n\n// Paratrooper Figure Parameters\nfigure_h = 35;            // mm total height\nhead_r = 6;               // mm\nbody_w = 12, body_h = 18, body_d = 6;\narm_l = 10, arm_r = 3;\nleg_l = 12, leg_r = 3;\n\n// Central Hub Parameters\nhub_r = 7;                // mm\nhub_h = 12;               // mm\n\n// Module: Create a single canopy segment\nmodule canopy_segment(r_outer, r_inner, height, angle_span) {\n    rotate([0, 0, -angle_span/2])\n    difference() {\n        // Outer shell of segment\n        cylinder(h=height, r1=r_outer, r2=r_outer*0.8, $fn=50);\n        // Remove inner part for hollow shell\n        translate([0, 0, -0.1])\n        cylinder(h=height+0.2, r1=r_inner, r2=r_inner*0.8, $fn=50);\n        // Cut sides for segment separation\n        rotate([0, 0, angle_span/2])\n        translate([r_outer*cos(angle_span/2), 0, -0.1])\n        cube([r_outer*2, 0.5, height+0.2], center=true);\n        rotate([0, 0, -angle_span/2])\n        translate([r_outer*cos(angle_span/2), 0, -0.1])\n        cube([r_outer*2, 0.5, height+0.2], center=true);\n    }\n}\n\n// Module: Paratrooper Figure\nmodule paratrooper() {\n    // Head\n    translate([0, 0, figure_h - head_r])\n    sphere(r=head_r, $fn=20);\n    \n    // Body\n    translate([0, 0, figure_h - 2*head_r - body_h/2])\n    cube([body_w, body_d, body_h], center=true);\n    \n    // Arms (spread out for parachute harness)\n    translate([-body_w/2 - arm_l/2, 0, figure_h - 2*head_r - body_h/2 + body_h/4])\n    cube([arm_l, arm_r*2, arm_r*2], center=true);\n    \n    translate([body_w/2 + arm_l/2, 0, figure_h - 2*head_r - body_h/2 + body_h/4])\n    cube([arm_l, arm_r*2, arm_r*2], center=true);\n    \n    // Legs\n    translate([-body_w/4, 0, leg_l/2])\n    cylinder(h=leg_l, r=leg_r, $fn=10);\n    \n    translate([body_w/4, 0, leg_l/2])\n    cylinder(h=leg_l, r=leg_r, $fn=10);\n}\n\n// Module: Central Hub with string attachment points\nmodule central_hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(h=hub_h, r=hub_r, $fn=20);\n        // Hollow center for weight reduction\n        cylinder(h=hub_h+0.2, r=hub_r-2, $fn=20);\n    }\n    \n    // String attachment loops\n    for(i=[0:line_count-1]) {\n        rotate([0, 0, i*360/line_count])\n        translate([hub_r+2, 0, hub_h/2])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=1.5, $fn=8);\n    }\n}\n\n// Module: Shroud Lines\nmodule shroud_lines() {\n    for(i=[0:line_count-1]) {\n        angle = i*360/line_count;\n        // Top attachment point on canopy edge\n        x1 = (canopy_d/2 - canopy_thick) * cos(angle);\n        y1 = (canopy_d/2 - canopy_thick) * sin(angle);\n        z1 = canopy_height;\n        \n        // Bottom attachment point on hub\n        x2 = (hub_r+2) * cos(angle);\n        y2 = (hub_r+2) * sin(angle);\n        z2 = 0;\n        \n        // Create line as cylinder between points\n        translate([x1, y1, z1]) {\n            rotate([0, atan2(z2-z1, sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))), atan2(y2-y1, x2-x1)])\n            cylinder(h=sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)), r=line_thick/2, $fn=6);\n        }\n    }\n}\n\n// Main Assembly\nunion() {\n    // Canopy Assembly\n    translate([0, 0, 0]) {\n        difference() {\n            // Outer canopy shell segments\n            for(i=[0:canopy_segments-1]) {\n                rotate([0, 0, i*360/canopy_segments])\n                canopy_segment(canopy_d/2, canopy_d/2 - canopy_thick, canopy_height, 360/canopy_segments);\n            }\n            \n            // Central hole at top for printing support\n            cylinder(h=canopy_height+5, r=5, $fn=20);\n        }\n        \n        // Reinforcement ring at bottom edge\n        translate([0, 0, 0])\n        cylinder(h=canopy_thick*2, r1=canopy_d/2 - canopy_thick, r2=canopy_d/2 - canopy_thick, $fn=50);\n    }\n    \n    // Shroud Lines\n    shroud_lines();\n    \n    // Central Hub\n    translate([0, 0, 0])\n    central_hub();\n    \n    // Paratrooper Figure\n    translate([0, 0, -line_length - figure_h/2])\n    paratrooper();\n}",
    "renders": true
  },
  {
    "toy": "kite",
    "openscad_code": "// Realistic Toy Kite – 3D-printable, medium complexity\n// Overall height ≈ 110 mm, wingspan ≈ 110 mm, thickness ≈ 18 mm\n// Wall thickness ≈ 2 mm, minimal overhangs\n\n$fa = 2;  // smoother curves\n$fs = 1;\n\n// Main body module\nmodule kite() {\n    // Central diamond frame\n    difference() {\n        hull() {\n            rotate([0,0,45]) cube([110,110,2], center=true);\n        }\n        // Inner hole (hollow frame)\n        rotate([0,0,45]) cube([106,106,4], center=true);\n    }\n\n    // Cross spars – printed integral, 2 mm thick\n    // Vertical spar\n    translate([0,0,-0.5]) cube([3,110,3], center=true);\n    // Horizontal spar\n    translate([0,0,-0.5]) cube([110,3,3], center=true);\n}\n\n// Tail ribbon segments\nmodule tailSegment() {\n    // Simple tube for printability (no overhang)\n    cylinder(h = 8, d = 4, $fn = 12);\n}\n\n// Attach 5 tail segments in a chain\nmodule tail() {\n    for (i=[1:5]) {\n        translate([0, -55 - i*12, 0]) tailSegment();\n    }\n}\n\n// Bridle line (single printed cylinder)\nmodule bridle() {\n    translate([0, 55, 0]) rotate([90,0,0]) cylinder(h = 40, d = 2, $fn = 8);\n}\n\n// Handle with winder drum\nmodule handle() {\n    // Handle grip\n    translate([0, 0, 0]) rotate([90,0,0]) {\n        difference() {\n            cylinder(h = 70, d = 15, $fn = 20);\n            cylinder(h = 72, d = 11, $fn = 20); // hollow core\n        }\n        // End knob\n        translate([0,0,70]) sphere(d = 18);\n    }\n\n    // Drum flanges for line storage (no overhang)\n    for (z=[0, 60]) {\n        translate([0,0,z]) rotate([90,0,0]) cylinder(h = 2, d = 25, $fn = 20);\n    }\n}\n\n// Assembly\nkite();\ntail();\nbridle();\n\n// Position handle below kite for printing\ntranslate([0, 110, -50]) handle();",
    "renders": true
  },
  {
    "toy": "yoyo",
    "openscad_code": "// YoYo Toy - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\nyoyo_diameter = 58;      // Standard yo-yo size\nyoyo_width = 36;\naxle_diameter = 5;\nwall_thickness = 2;\nstring_gap = 2;\n\n// Colors for visualization (not printed)\ncolor_body = [0.8, 0.8, 0.8];\ncolor_axle = [0.3, 0.3, 0.3];\ncolor_grip = [0.2, 0.2, 0.2];\n\n// Module for rounded edges\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, 1], dy = [0, 1], dz = [0, 1]) {\n            translate([dx*(size[0]-2*radius), dy*(size[1]-2*radius), dz*(size[2]-2*radius)])\n                sphere(r=radius);\n        }\n    }\n}\n\n// YoYo half body with starburst response system\nmodule yoyo_half(depth, starburst = true) {\n    difference() {\n        // Main body\n        cylinder(h=depth, d=yoyo_diameter);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=depth-wall_thickness, d=yoyo_diameter-2*wall_thickness);\n        \n        // Axle hole\n        cylinder(h=depth*2, d=axle_diameter);\n        \n        // String gap\n        translate([0, 0, depth])\n            cylinder(h=string_gap, d=yoyo_diameter-2*wall_thickness);\n    }\n    \n    // Starburst response system\n    if(starburst) {\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([yoyo_diameter/2 - 8, 0, depth-1])\n                    cube([6, 1, 1], center=true);\n        }\n    }\n    \n    // Grip rings on outer edge\n    for(i = [0:3]) {\n        translate([0, 0, depth - i*1.5 - 0.5])\n            difference() {\n                cylinder(h=1, d=yoyo_diameter - i*2);\n                cylinder(h=1.1, d=yoyo_diameter - i*2 - 2);\n            }\n    }\n}\n\n// Bearing seat\nmodule bearing_seat() {\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h=3, d=12);\n            cylinder(h=3.1, d=6);\n        }\n}\n\n// Axle\nmodule axle() {\n    cylinder(h=yoyo_width-2*string_gap, d=axle_diameter);\n}\n\n// String\nmodule string(length = 1000) {\n    color(\"white\")\n        for(i = [0:length/5]) {\n            translate([0, 0, -i*5])\n                rotate([0, 0, i*360/10])\n                    cylinder(h=5, d=0.5);\n        }\n}\n\n// Assembly\nunion() {\n    // First half\n    translate([0, 0, -yoyo_width/2])\n        yoyo_half(yoyo_width/2 - string_gap/2);\n    \n    // Second half (mirrored)\n    mirror([0, 0, 1])\n        translate([0, 0, -yoyo_width/2])\n            yoyo_half(yoyo_width/2 - string_gap/2);\n    \n    // Bearing seat on first half\n    translate([0, 0, -string_gap/2])\n        bearing_seat();\n    \n    // Axle\n    axle();\n    \n    // String loop (visual only)\n    translate([0, 0, -yoyo_width/2 - 10])\n        string(20);\n}",
    "renders": true
  },
  {
    "toy": "diabolo",
    "openscad_code": "// Diabolo Toy - realistic style, medium complexity\n// Overall height ~120mm, diameter ~100mm\n// No overhangs, 2mm wall thickness throughout\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main parameters\ncup_d = 100;\ncup_h = 45;\naxle_d = 12;\naxle_l = 110;\nstring_d = 4;\nstring_l = 1200;\n\n// Cup profile - shallow cone with rounded edge\nmodule cup() {\n    difference() {\n        // Outer shell\n        union() {\n            cylinder(d1=cup_d, d2=cup_d*0.9, h=cup_h, center=true);\n            translate([0,0,cup_h/2-1])\n                cylinder(d=cup_d*0.9, h=2, center=true);\n        }\n        \n        // Hollow interior\n        translate([0,0,-2])\n            cylinder(d1=cup_d-4, d2=cup_d*0.9-4, h=cup_h, center=true);\n        \n        // Center hole for axle\n        cylinder(d=axle_d+2, h=cup_h+4, center=true);\n    }\n}\n\n// Axle with bearing races\nmodule axle() {\n    difference() {\n        // Main axle tube\n        cylinder(d=axle_d, h=axle_l, center=true);\n        \n        // Bearing race grooves\n        for(i=[-1,1]) {\n            translate([0,0,i*axle_l/4])\n                cylinder(d=axle_d+4, h=2, center=true);\n        }\n        \n        // String groove in center\n        translate([0,0,0])\n            cylinder(d=axle_d+6, h=6, center=true);\n    }\n    \n    // End caps\n    for(i=[-1,1]) {\n        translate([0,0,i*(axle_l/2+3)])\n            cylinder(d=axle_d+6, h=6, center=true);\n    }\n}\n\n// Decorative rings on cups\nmodule rings(count=3) {\n    for(i=[1:count]) {\n        color(\"gold\")\n        translate([0,0,-cup_h/2 + i*(cup_h/(count+1))])\n            cylinder(d=cup_d-2*i*5, h=2, center=true);\n    }\n}\n\n// String segments (simplified representation)\nmodule string() {\n    color(\"red\")\n    for(i=[0:5]) {\n        rotate([90,0,i*60])\n            translate([0,0,-string_l/2])\n                cylinder(d=string_d, h=string_l, center=true);\n    }\n}\n\n// Assembly\ntranslate([0,0,0])\n    cup();\n\ntranslate([0,0,cup_h+axle_l/2])\n    axle();\n\ntranslate([0,0,cup_h+axle_l])\n    mirror([0,0,1])\n        cup();\n\n// Add rings to both cups\ntranslate([0,0,0])\n    rings();\n\ntranslate([0,0,cup_h+axle_l])\n    rings();\n\n// Optional string representation\ntranslate([0,0,cup_h+axle_l+cup_h+50])\n    string();",
    "renders": true
  },
  {
    "toy": "kendama",
    "openscad_code": "// Realistic Kendama Toy - Medium Complexity\n// Based on standard kendama dimensions scaled for 3D printing\n\n// Main dimensions (in mm)\nball_d = 38;\nsara_d = 40;\nken_length = 105;\nhandle_d = 20;\nstring_hole_d = 3;\nstring_d = 2;\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\n// Module for the ken (handle and spike)\nmodule ken() {\n    // Handle body\n    difference() {\n        cylinder(h = ken_length, d = handle_d, $fn = 32);\n        // Hollow interior\n        translate([0, 0, wall_t])\n            cylinder(h = ken_length - wall_t*2, d = handle_d - wall_t*2, $fn = 32);\n    }\n    \n    // Spike\n    translate([0, 0, ken_length])\n    union() {\n        cylinder(h = 25, d1 = handle_d, d2 = 6, $fn = 32);\n        translate([0, 0, 25])\n            cylinder(h = 3, d = 6, $fn = 32);\n    }\n    \n    // Sara (cup)\n    translate([0, handle_d/2 + 15, ken_length - 25])\n    rotate([0, 90, 0])\n    difference() {\n        // Main cup\n        cylinder(h = 15, d = sara_d, $fn = 64);\n        // Inner cavity\n        translate([0, 0, wall_t])\n            cylinder(h = 15 - wall_t, d = sara_d - wall_t*2, $fn = 64);\n        // Hole for string\n        translate([0, 0, -1])\n            cylinder(h = 17, d = string_hole_d, $fn = 16);\n    }\n    \n    // Base cup\n    translate([0, handle_d/2 + 15, ken_length/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 12, d = sara_d * 0.85, $fn = 64);\n        translate([0, 0, wall_t])\n            cylinder(h = 12 - wall_t, d = sara_d * 0.85 - wall_t*2, $fn = 64);\n    }\n    \n    // Small cup\n    translate([0, -handle_d/2 - 15, ken_length - 35])\n    rotate([0, -90, 0])\n    difference() {\n        cylinder(h = 10, d = sara_d * 0.7, $fn = 64);\n        translate([0, 0, wall_t])\n            cylinder(h = 10 - wall_t, d = sara_d * 0.7 - wall_t*2, $fn = 64);\n    }\n}\n\n// Module for the tama (ball)\nmodule tama() {\n    difference() {\n        // Main ball\n        sphere(d = ball_d, $fn = 64);\n        // Hollow interior\n        sphere(d = ball_d - wall_t*2, $fn = 64);\n        \n        // String hole\n        translate([0, 0, ball_d/2])\n            cylinder(h = ball_d, d = string_hole_d, $fn = 16);\n        \n        // Bevel edge for string hole\n        translate([0, 0, ball_d/2 - 2])\n            cylinder(h = 4, d1 = string_hole_d + 3, d2 = string_hole_d, $fn = 16);\n    }\n    \n    // Paint line\n    translate([0, 0, -ball_d/2 + 3])\n    rotate([90, 0, 0])\n    cylinder(h = ball_d, d = ball_d - 2, $fn = 64);\n}\n\n// Module for string\nmodule string() {\n    // Simplified string representation\n    color(\"red\")\n    translate([0, 0, ken_length])\n    rotate([0, 90, 0])\n    cylinder(h = 40, d = string_d, $fn = 8);\n}\n\n// Assembly\ntranslate([0, 0, 0])\nken();\n\ntranslate([0, 60, ken_length + 20])\ntama();\n\n// String connection\ntranslate([0, handle_d/2 + 15, ken_length - 10])\nrotate([0, 90, 0])\nstring();",
    "renders": true
  },
  {
    "toy": "hackysack",
    "openscad_code": "// Hackysack / Footbag - Realistic Medium Complexity\n// 3D printable hackysack with realistic panels and stitching details\n\n// Overall dimensions\nhackysack_diameter = 60;  // 60mm diameter fits well in hand\npanel_thickness = 2.5;    // 2.5mm wall thickness for 3D printing\nstitch_depth = 0.5;       // Depth of stitched seams\nseam_width = 1.5;         // Width of seam lines\n\n// Create main hackysack body using pentagonal/hexagonal panels\nmodule hackysack_body() {\n    union() {\n        // Base sphere for overall shape\n        difference() {\n            sphere(d = hackysack_diameter);\n            \n            // Hollow out the inside for fill material\n            sphere(d = hackysack_diameter - (2 * panel_thickness));\n        }\n        \n        // Add panel seams using difference operations\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([0, hackysack_diameter/2 - 2, 0])\n            difference() {\n                // Main seam groove\n                cube([seam_width, 4, hackysack_diameter], center = true);\n                \n                // Stitching details along seam\n                for (j = [-5:5]) {\n                    translate([0, j * 3, 0])\n                    cube([seam_width + 0.5, 0.5, stitch_depth * 2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Add fill port for adding beans/rice\nmodule fill_port() {\n    difference() {\n        // Port base - small cylinder\n        translate([0, 0, hackysack_diameter/2 - 1])\n        cylinder(h = 3, r = 6, $fn = 20);\n        \n        // Port hole\n        translate([0, 0, hackysack_diameter/2 - 0.5])\n        cylinder(h = 5, r = 4, $fn = 20);\n    }\n    \n    // Port cap with grip ridges\n    translate([0, 0, hackysack_diameter/2 + 2])\n    difference() {\n        cylinder(h = 4, r = 6.5, $fn = 20);\n        cylinder(h = 5, r = 4.5, $fn = 20);\n    }\n    \n    // Grip ridges on cap\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([5, 0, hackysack_diameter/2 + 2])\n        cube([1, 0.5, 4], center = true);\n    }\n}\n\n// Add wear patches at common contact points\nmodule wear_patches() {\n    // Top wear patch\n    translate([0, 0, hackysack_diameter/2 - panel_thickness/2])\n    scale([1, 1, 0.3])\n    sphere(d = 20);\n    \n    // Bottom wear patch\n    translate([0, 0, -hackysack_diameter/2 + panel_thickness/2])\n    scale([1, 1, 0.3])\n    sphere(d = 20);\n    \n    // Side wear patches\n    rotate([0, 90, 0])\n    translate([0, 0, hackysack_diameter/2 - panel_thickness/2])\n    scale([1, 1, 0.3])\n    sphere(d = 15);\n    \n    rotate([90, 0, 0])\n    translate([0, 0, hackysack_diameter/2 - panel_thickness/2])\n    scale([1, 1, 0.3])\n    sphere(d = 15);\n}\n\n// Add brand/logo area\nmodule logo_area() {\n    translate([0, 0, hackysack_diameter/2 - 1])\n    difference() {\n        // Raised logo platform\n        cylinder(h = 0.5, r = 8, $fn = 30);\n        \n        // Recessed logo space\n        cylinder(h = 0.3, r = 6.5, $fn = 30);\n    }\n}\n\n// Main assembly\nunion() {\n    hackysack_body();\n    fill_port();\n    wear_patches();\n    logo_area();\n}",
    "renders": true
  },
  {
    "toy": "footbag",
    "openscad_code": "// Realistic footbag (hacky sack) toy with medium complexity\n// Diameter ~70mm, printable with 2mm wall thickness\n\n// Parameters\ndiameter = 70;\nwall_thickness = 2;\npanel_count = 6;\npanel_depth = 3;\n\nmodule footbag() {\n    // Main body - hollow sphere\n    difference() {\n        sphere(d=diameter);\n        sphere(d=diameter - 2*wall_thickness);\n    }\n    \n    // Hexagonal panels stitched together\n    for (i = [0:panel_count-1]) {\n        rotate([0, 0, i * 360/panel_count]) {\n            // Panel stitching lines\n            translate([0, 0, diameter/2 - panel_depth]) {\n                difference() {\n                    cylinder(h=panel_depth*2, d=diameter/3, $fn=6);\n                    cylinder(h=panel_depth*2+1, d=diameter/3 - 2*wall_thickness, $fn=6);\n                }\n            }\n            \n            // Cross-stitching detail\n            rotate([90, 0, 0]) {\n                translate([diameter/4, 0, 0]) {\n                    scale([1, 0.2, 0.2]) {\n                        sphere(d=wall_thickness);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Filling port (like a real footbag)\n    translate([0, 0, diameter/2 - 3]) {\n        difference() {\n            cylinder(h=4, d=8, $fn=20);\n            cylinder(h=5, d=4, $fn=20);\n        }\n    }\n    \n    // Seam details around equator\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10]) {\n            translate([0, diameter/2 - 1, 0]) {\n                rotate([90, 0, 0]) {\n                    scale([1, 1, 0.5]) {\n                        sphere(d=3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bottom wear pad (extra thickness for durability)\n    translate([0, 0, -diameter/2 + 1]) {\n        difference() {\n            cylinder(h=3, d=diameter/4);\n            cylinder(h=4, d=diameter/4 - 2*wall_thickness);\n        }\n    }\n    \n    // Top logo area\n    translate([0, 0, diameter/2 - 2]) {\n        rotate([0, 180, 0]) {\n            linear_extrude(height=1) {\n                text(\"FB\", size=8, halign=\"center\", valign=\"center\");\n            }\n        }\n    }\n}\n\n// Render the footbag\nfootbag();",
    "renders": true
  },
  {
    "toy": "beanbag",
    "openscad_code": "// Realistic Beanbag Toy Chair\n// Dimensions: 100mm x 100mm x 85mm\n\nmodule beanbag_body() {\n    // Main beanbag cushion - slightly flattened sphere\n    translate([0, 0, 35]) {\n        scale([1, 1, 0.7])\n            sphere(d=90, $fn=50);\n    }\n}\n\nmodule backrest() {\n    // Backrest cushion - elongated sphere\n    translate([0, -35, 55]) {\n        rotate([75, 0, 0]) {\n            scale([0.9, 1, 0.6])\n                sphere(d=80, $fn=40);\n        }\n    }\n}\n\nmodule seam_lines() {\n    // Horizontal seam around center\n    rotate_extrude(angle=360, $fn=100) {\n        translate([45, 0, 0]) {\n            square([2, 1]);\n        }\n    }\n    \n    // Vertical seams at 4 positions\n    for(i = [0:90:359]) {\n        rotate([0, 0, i]) {\n            linear_extrude(height=2) {\n                difference() {\n                    circle(d=90, $fn=50);\n                    circle(d=86, $fn=50);\n                }\n            }\n        }\n    }\n}\n\nmodule stitching_detail() {\n    // Stitching along seams - small spheres as stitches\n    for(i = [0:10:350]) {\n        rotate([0, 0, i]) {\n            translate([45, 0, 35]) {\n                sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\nmodule bean_filling_texture() {\n    // Subtle surface texture to suggest filled fabric\n    for(x = [-40:15:40]) {\n        for(y = [-40:15:40]) {\n            translate([x, y, 35 + 35*cos(x/20)*sin(y/20)]) {\n                sphere(d=2, $fn=6);\n            }\n        }\n    }\n}\n\nmodule base_support() {\n    // Flattened bottom for stability\n    difference() {\n        cylinder(h=5, d=85, $fn=50);\n        cylinder(h=6, d=83, $fn=50);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollow shell construction\n    difference() {\n        union() {\n            beanbag_body();\n            backrest();\n            base_support();\n        }\n        \n        // Inner hollow space\n        translate([0, 0, 37]) {\n            scale([1, 1, 0.7])\n                sphere(d=84, $fn=50);\n        }\n        \n        translate([0, -35, 57]) {\n            rotate([75, 0, 0]) {\n                scale([0.9, 1, 0.6])\n                    sphere(d=74, $fn=40);\n            }\n        }\n    }\n    \n    // External details\n    seam_lines();\n    stitching_detail();\n    bean_filling_texture();\n}",
    "renders": true
  },
  {
    "toy": "cornhole",
    "openscad_code": "// Toy Cornhole Board - Realistic Style - Medium Complexity\n// Overall dimensions: 120mm x 60mm x 25mm (scaled down for toy)\n\n$fn = 32;\n\n// Main parameters\nboard_length = 120;\nboard_width = 60;\nboard_thickness = 4;\nhole_diameter = 30;\nhole_offset = 20;\nleg_length = 20;\nleg_thickness = 3;\nframe_thickness = 2;\n\n// Main board surface\nmodule board_surface() {\n    difference() {\n        // Main board\n        cube([board_length, board_width, board_thickness], center=true);\n        \n        // Center hole\n        translate([0, 0, board_thickness/2 + 0.1])\n        cylinder(h=board_thickness + 0.2, d=hole_diameter, center=true);\n        \n        // Rounded front edge\n        translate([board_length/2 - 2, 0, board_thickness/2])\n        cube([4, board_width, board_thickness], center=true);\n    }\n}\n\n// Side frame pieces\nmodule side_frame() {\n    difference() {\n        // Outer frame\n        cube([board_length, frame_thickness, board_thickness + 4], center=true);\n        \n        // Inner groove for board\n        translate([0, 0, 2])\n        cube([board_length - 4, frame_thickness + 0.2, board_thickness], center=true);\n    }\n}\n\n// End frame pieces\nmodule end_frame() {\n    difference() {\n        // Outer frame\n        cube([frame_thickness, board_width, board_thickness + 4], center=true);\n        \n        // Inner groove for board\n        translate([0, 0, 2])\n        cube([frame_thickness + 0.2, board_width - 4, board_thickness], center=true);\n    }\n}\n\n// Support legs\nmodule leg() {\n    difference() {\n        // Main leg\n        translate([0, 0, -leg_length/2])\n        cube([leg_thickness, leg_thickness, leg_length], center=true);\n        \n        // Chamfer bottom\n        translate([0, 0, -leg_length + 1])\n        cube([leg_thickness + 0.2, leg_thickness + 0.2, 2], center=true);\n        \n        // Cut angle for stability\n        rotate([45, 0, 0])\n        translate([0, 0, -leg_length/2 - 2])\n        cube([leg_thickness + 2, leg_thickness + 2, leg_length], center=true);\n    }\n}\n\n// Hinge detail for folding legs\nmodule hinge() {\n    cylinder(h=leg_thickness + 2, d=leg_thickness + 1, center=true);\n}\n\n// Handle cutout on side\nmodule handle() {\n    translate([-board_length/2 - 1, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=frame_thickness + 0.2, d=8, center=true);\n}\n\n// Assembly\nmodule cornhole_board() {\n    // Main board assembly\n    translate([0, 0, board_thickness/2 + 2])\n    board_surface();\n    \n    // Frame pieces\n    translate([0, board_width/2 + frame_thickness/2, 0])\n    side_frame();\n    \n    translate([0, -board_width/2 - frame_thickness/2, 0])\n    side_frame();\n    \n    translate([board_length/2 + frame_thickness/2, 0, 0])\n    end_frame();\n    \n    translate([-board_length/2 - frame_thickness/2, 0, 0])\n    difference() {\n        end_frame();\n        handle();\n    }\n    \n    // Folding legs - back corners\n    translate([board_length/2 - 10, board_width/2 - 5, -leg_length/2 + 2])\n    union() {\n        hinge();\n        leg();\n    }\n    \n    translate([board_length/2 - 10, -board_width/2 + 5, -leg_length/2 + 2])\n    union() {\n        hinge();\n        leg();\n    }\n    \n    // Surface texture - painted lines\n    translate([0, 0, board_thickness + 4.1])\n    cube([board_length - 20, 1, 0.5], center=true);\n    \n    translate([0, 0, board_thickness + 4.1])\n    cube([1, board_width - 20, 0.5], center=true);\n}\n\n// Render the complete toy cornhole\ncornhole_board();",
    "renders": true
  },
  {
    "toy": "ringtoss",
    "openscad_code": "// Ringtoss Toy Set - Realistic Style\n// Medium complexity 3D printable ringtoss game base and rings\n\n// Base parameters\nbase_diameter = 100;\nbase_height = 8;\npost_height = 60;\npost_diameter = 6;\n\n// Ring parameters\nring_outer_diameter = 25;\nring_inner_diameter = 20;\nring_thickness = 3;\nnum_rings = 5;\n\n// Structural details\nfoot_width = 30;\nfoot_thickness = 4;\nrib_thickness = 2;\n\nmodule base_foot() {\n    // Create one stabilizing foot\n    translate([-foot_width/2, -base_diameter/2 - foot_thickness/2, 0])\n        cube([foot_width, foot_thickness, base_height]);\n}\n\nmodule base_structure() {\n    // Main circular base\n    cylinder(h=base_height, d=base_diameter, $fn=64);\n    \n    // Add stabilizing feet\n    for (i = [0:2]) {\n        rotate([0, 0, i*120])\n            base_foot();\n    }\n    \n    // Add ribbing for strength\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([0, base_diameter/2 - rib_thickness, 0])\n                cube([rib_thickness, base_diameter/4, base_height]);\n    }\n}\n\nmodule target_post() {\n    // Center post\n    cylinder(h=post_height, d=post_diameter, $fn=32);\n    \n    // Post base collar\n    translate([0, 0, 0])\n        cylinder(h=4, d=post_diameter+4, $fn=32);\n    \n    // Pointed top for easier ring catching\n    translate([0, 0, post_height])\n        cylinder(h=8, d1=post_diameter, d2=0, $fn=32);\n}\n\nmodule ring(index) {\n    // Create a single ring with slight offset for printing\n    color([0.8, 0.2, 0.2])  // Red rings\n    difference() {\n        cylinder(h=ring_thickness, d=ring_outer_diameter, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=ring_thickness+2, d=ring_inner_diameter, $fn=64);\n    }\n}\n\n// Assemble the toy\n// Base assembly\nunion() {\n    color([0.1, 0.4, 0.1])  // Green base\n    base_structure();\n    \n    // Center post\n    translate([0, 0, base_height])\n        color([0.8, 0.8, 0.8])  // Gray post\n        target_post();\n    \n    // Additional scoring posts\n    translate([25, 0, base_height])\n        color([0.2, 0.2, 0.8])  // Blue post\n        cylinder(h=45, d=post_diameter, $fn=32);\n    \n    translate([-25, 0, base_height])\n        color([0.8, 0.8, 0.2])  // Yellow post\n        cylinder(h=35, d=post_diameter, $fn=32);\n}\n\n// Rings positioned for display\nfor (i = [0:num_rings-1]) {\n    translate([-40 + i*15, -40, base_height + 5])\n        rotate([0, 90, 0])\n            ring(i);\n}",
    "renders": true
  },
  {
    "toy": "quoits",
    "openscad_code": "// Quoits Toy Set - Realistic Style\n// A complete quoits game with 5 rope rings and a post with base\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main dimensions\nbase_diameter = 80 * scale_factor;\nbase_height = 8 * scale_factor;\npost_diameter = 12 * scale_factor;\npost_height = 120 * scale_factor;\nring_outer_diameter = 35 * scale_factor;\nring_inner_diameter = 20 * scale_factor;\nring_thickness = 8 * scale_factor;\nrope_coil_diameter = 3 * scale_factor;\n\n// Render entire set\nunion() {\n    // Base and post assembly\n    translate([0, 0, 0])\n        quoits_post_assembly();\n    \n    // Five rope rings in starting positions\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([45, 0, base_height + post_height/2 + i * 5])\n                rope_ring();\n    }\n}\n\n// Post assembly with base\nmodule quoits_post_assembly() {\n    union() {\n        // Weighted base\n        difference() {\n            // Main base cylinder\n            cylinder(h = base_height, d = base_diameter, $fn = 64);\n            \n            // Decorative groove around base\n            translate([0, 0, base_height/2])\n                cylinder(h = 2, d = base_diameter * 0.9, $fn = 64);\n        }\n        \n        // Base top detail\n        translate([0, 0, base_height])\n            cylinder(h = 2, d = post_diameter * 2, $fn = 32);\n        \n        // Main post\n        translate([0, 0, base_height])\n            cylinder(h = post_height, d = post_diameter, $fn = 32);\n        \n        // Post top detail\n        translate([0, 0, base_height + post_height])\n            sphere(d = post_diameter * 1.2, $fn = 32);\n    }\n}\n\n// Detailed rope ring with twisted texture\nmodule rope_ring() {\n    rotate([90, 0, 0]) {\n        difference() {\n            // Main ring body\n            torus(ring_outer_diameter/2, ring_thickness/2);\n            \n            // Hollow center\n            torus(ring_inner_diameter/2, ring_thickness/2 - 1);\n        }\n        \n        // Rope texture - twisted strands\n        for (strand = [0:2]) {\n            rotate([0, 0, strand * 120])\n                rope_strand();\n        }\n    }\n}\n\n// Helper module for torus shape\nmodule torus(major_radius, minor_radius) {\n    rotate_extrude($fn = 64) {\n        translate([major_radius, 0, 0])\n            circle(r = minor_radius, $fn = 32);\n    }\n}\n\n// Individual rope strand detail\nmodule rope_strand() {\n    // Create twisted rope appearance using multiple cylinders\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([ring_outer_diameter/2 - ring_thickness/2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = ring_thickness * 1.1, d = rope_coil_diameter, $fn = 8);\n    }\n}\n\n// Optional: Small pegs for ring storage\nmodule ring_pegs() {\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72 + 36])\n            translate([base_diameter/2 + 5, 0, base_height/2])\n                cylinder(h = 15, d = 5, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "toy": "bocce",
    "openscad_code": "// Bocce Ball Toy (Medium complexity)\n// Realistic style with toy characteristics\n\n// Main parameters\nball_diameter = 90;  // Standard bocce ball size for toy\nwall_thickness = 2;   // 3D printable walls\ndetail_level = 32;    // Smooth curves\n\n// Color definitions for rendering\nball_color = \"green\";\nstripe_color = \"white\";\n\n// Main ball body\nmodule bocce_ball_body() {\n    // Hollow sphere shell for material efficiency\n    difference() {\n        sphere(d = ball_diameter, $fn = detail_level);\n        sphere(d = ball_diameter - 2 * wall_thickness, $fn = detail_level);\n    }\n}\n\n// Traditional bocce ball stripes\nmodule stripes() {\n    // Three equatorial stripes typical on toy bocce balls\n    for (i = [0:2]) {\n        rotate([0, 90 * (i % 2), 120 * i]) {\n            // Stripe body\n            translate([0, 0, -wall_thickness]) {\n                difference() {\n                    // Main stripe ring\n                    cylinder(h = 2 * wall_thickness, \n                             r1 = ball_diameter/2, \n                             r2 = ball_diameter/2, \n                             center = true, \n                             $fn = detail_level);\n                    \n                    // Inner cutout for hollow effect\n                    cylinder(h = 3 * wall_thickness, \n                             r1 = ball_diameter/2 - wall_thickness, \n                             r2 = ball_diameter/2 - wall_thickness, \n                             center = true, \n                             $fn = detail_level);\n                }\n            }\n        }\n    }\n}\n\n// Toy-specific grip texture pattern\nmodule grip_pattern() {\n    // Small bumps for better grip in toy version\n    for (i = [0:15]) {\n        rotate([0, 0, 22.5 * i]) {\n            for (j = [0:3]) {\n                rotate([90, 0, 90 * j]) {\n                    translate([0, ball_diameter/2 - wall_thickness, 0]) {\n                        // Grip dimples\n                        sphere(d = 4, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly points for toy construction\nmodule assembly_pins() {\n    // Pin holes for toy assembly\n    translate([0, 0, ball_diameter/2 - wall_thickness]) {\n        cylinder(h = wall_thickness * 2, \n                 r = wall_thickness/2, \n                 center = true, \n                 $fn = 8);\n    }\n    \n    translate([0, 0, -(ball_diameter/2 - wall_thickness)]) {\n        cylinder(h = wall_thickness * 2, \n                 r = wall_thickness/2, \n                 center = true, \n                 $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main ball structure\n    bocce_ball_body();\n    \n    // Apply toy-specific features\n    children();\n}\n\n// Color the ball\ncolor(\"green\") {\n    bocce_ball_body();\n}\n\n// Add stripes\ncolor(\"white\") {\n    stripes();\n}\n\n// Add grip pattern\ngrip_pattern();\n\n// Add assembly features\nassembly_pins();\n\n// Optional: Add toy logo area\ntranslate([ball_diameter/2 - wall_thickness, 0, 0]) {\n    rotate([0, 90, 0]) {\n        cylinder(h = wall_thickness, \n                 r = 8, \n                 center = true, \n                 $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "toy": "boules",
    "openscad_code": "// Boules (Petanque) Toy Set - Realistic Style\n// Medium complexity model with proper toy proportions\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\nball_diameter = 72;  // Standard petanque ball size\nwall_thickness = 2.2;  // Printable wall thickness\ngroove_depth = 1.5;\ngroove_width = 3;\n\n// Material colors\ncolor_plastic = \"#2F4F4F\";  // Dark gray plastic\ncolor_metal = \"#B87333\";    // Bronze/metallic look\n\n// Main boule ball\nmodule boule_ball() {\n    // Hollow sphere with wall thickness\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness*2);\n    }\n    \n    // Add decorative grooves for grip\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 0, -ball_diameter/2]) {\n                difference() {\n                    cylinder(h = ball_diameter, d = ball_diameter - groove_depth*2, center = true);\n                    cylinder(h = ball_diameter + 1, d = ball_diameter - groove_depth*2 - groove_width, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Small jack (cochonnet)\nmodule jack() {\n    // Smaller target ball\n    color(\"yellow\") {\n        sphere(d = 30);\n    }\n    \n    // Add red stripe detail\n    color(\"red\") {\n        translate([0, 0, -15]) {\n            cylinder(h = 3, d = 30.1, center = true);\n        }\n    }\n}\n\n// Measuring string with beads\nmodule measuring_string() {\n    // String holder\n    translate([0, 0, -5]) {\n        cylinder(h = 10, d = 15);\n    }\n    \n    // String wrapped around\n    for (i = [0:4]) {\n        rotate([90, 0, i * 72]) {\n            translate([7.5, 0, 0]) {\n                cylinder(h = 60, d = 1.5);\n            }\n        }\n    }\n    \n    // Beads on string\n    for (i = [0:3]) {\n        translate([0, 15 + i * 15, 0]) {\n            sphere(d = 5);\n        }\n    }\n}\n\n// Carrying case handle\nmodule handle() {\n    // Main handle grip\n    translate([0, 0, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 80, d = 12);\n                cylinder(h = 82, d = 8);\n            }\n        }\n    }\n    \n    // Handle supports\n    for (offset = [-35, 35]) {\n        translate([offset, 0, 0]) {\n            cylinder(h = 15, d = 8);\n        }\n    }\n}\n\n// Assemble complete toy set\nmodule boules_toy_set() {\n    // First boule\n    translate([-80, 0, 0]) {\n        color(color_plastic) boule_ball();\n    }\n    \n    // Second boule\n    translate([0, 0, 0]) {\n        color(color_metal) boule_ball();\n    }\n    \n    // Third boule (slightly different)\n    translate([80, 0, 0]) {\n        color(\"#1C1C1C\") boule_ball();\n    }\n    \n    // Jack ball\n    translate([0, -60, 0]) {\n        jack();\n    }\n    \n    // Measuring string\n    translate([0, 60, 0]) {\n        measuring_string();\n    }\n    \n    // Handle for carrying\n    translate([0, 0, 50]) {\n        handle();\n    }\n}\n\n// Render the complete set\nboules_toy_set();",
    "renders": true
  },
  {
    "toy": "petanque",
    "openscad_code": "// Petanque ball toy with realistic proportions and 3D-printable features\n// Overall size: 75mm diameter ball with 3mm thick shell for toy safety\n\n$fn = 64; // Smooth curves for realistic appearance\n\n// Main parameters\nball_diameter = 75;\nwall_thickness = 3;\ngroove_depth = 1.5;\ngroove_width = 6;\nnum_grooves = 6;\n\n// Calculate internal diameter for hollow ball\ninner_diameter = ball_diameter - (2 * wall_thickness);\n\n// Hollow petanque ball with grooves\nmodule petanque_ball() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = inner_diameter);\n        \n        // Cut grooves around the ball\n        for (i = [0:num_grooves-1]) {\n            rotate([0, 0, i * (360/num_grooves)]) {\n                // Create groove using difference operation\n                translate([0, 0, -ball_diameter/2 - groove_depth]) {\n                    cylinder(h = ball_diameter + 2*groove_depth, \n                            r1 = groove_width/2, \n                            r2 = groove_width/2, \n                            center = true);\n                }\n            }\n        }\n    }\n}\n\n// Realistic toy markings - concentric rings on poles\nmodule toy_markings() {\n    // Top marking\n    translate([0, 0, ball_diameter/2 - 1]) {\n        difference() {\n            cylinder(h = 2, r1 = 8, r2 = 8);\n            cylinder(h = 3, r1 = 6, r2 = 6);\n        }\n    }\n    \n    // Bottom marking\n    translate([0, 0, -ball_diameter/2 + 1]) {\n        difference() {\n            cylinder(h = 2, r1 = 8, r2 = 8);\n            cylinder(h = 3, r1 = 6, r2 = 6);\n        }\n    }\n}\n\n// Toy safety features - rounded edges and internal support structure\nmodule safety_features() {\n    // Internal support ribs for structural integrity\n    for (i = [0:3]) {\n        rotate([0, 90 * i, 0]) {\n            translate([0, 0, 0]) {\n                scale([1, 0.3, 1]) {\n                    sphere(d = inner_diameter - 2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly of complete petanque toy\nunion() {\n    // Main ball structure\n    petanque_ball();\n    \n    // Toy markings for realistic appearance\n    toy_markings();\n    \n    // Internal safety features\n    %safety_features();\n}\n\n// Optional: Add small alignment nub for string attachment\ntranslate([0, 0, ball_diameter/2 + 2]) {\n    cylinder(h = 4, r1 = 2, r2 = 1.5);\n}",
    "renders": true
  },
  {
    "toy": "croquet",
    "openscad_code": "// Croquet Toy Set - Medium Complexity Realistic Style\n// Overall dimensions: ~120mm wide, ~80mm deep, ~50mm tall\n\n// Color definitions for rendering\ncolor_wood = \"#8B4513\";\ncolor_red = \"#DC143C\";\ncolor_blue = \"#4169E1\";\ncolor_yellow = \"#FFD700\";\ncolor_green = \"#228B22\";\n\nmodule croquet_mallet() {\n    // Mallet head - 35mm wide, 25mm tall, 25mm deep\n    translate([0, 0, 0]) {\n        difference() {\n            // Main head block\n            color(color_wood) cube([35, 25, 25], center = true);\n            \n            // Center hole for handle\n            rotate([90, 0, 0]) \n                cylinder(h = 35.1, d = 8, center = true);\n            \n            // Rounded edges on striking faces\n            translate([17.5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 25.1, d = 25, center = true);\n            translate([-17.5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 25.1, d = 25, center = true);\n        }\n    }\n    \n    // Handle - 60mm long, 8mm diameter\n    translate([0, 0, 42.5]) {\n        // Tapered handle\n        cylinder(h = 60, d1 = 8, d2 = 7, center = false);\n        \n        // Grip rings\n        for(i = [1:5]) {\n            translate([0, 0, i * 10])\n                cylinder(h = 2, d = 9, center = false);\n        }\n    }\n}\n\nmodule croquet_ball(color_name) {\n    // Ball - 25mm diameter\n    color(color_name) sphere(d = 25, $fn = 32);\n    \n    // Surface texture lines\n    for(i = [0:6]) {\n        rotate([0, 0, i * 60])\n            rotate([90, 0, 0])\n                cylinder(h = 25.1, d = 0.5, center = true);\n    }\n}\n\nmodule croquet_wicket() {\n    // Base plate - 40mm wide, 5mm thick, 15mm deep\n    translate([0, 0, 2.5]) {\n        color(color_green) cube([40, 15, 5], center = true);\n        \n        // Decorative stripes\n        for(i = [-15:5:15]) {\n            translate([i, 0, 2.6])\n                color(color_yellow) cube([2, 15, 0.5], center = true);\n        }\n    }\n    \n    // Upright posts - 30mm tall, 5mm diameter\n    translate([-15, 0, 20]) {\n        color(color_green) cylinder(h = 30, d = 5, center = false);\n    }\n    translate([15, 0, 20]) {\n        color(color_green) cylinder(h = 30, d = 5, center = false);\n    }\n    \n    // Curved top\n    translate([0, 0, 35]) {\n        difference() {\n            // Main arch\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 30, center = true);\n            \n            // Hollow center\n            rotate([90, 0, 0])\n                cylinder(h = 30.1, d = 20, center = true);\n        }\n    }\n}\n\nmodule croquet_stake() {\n    // Main post - 50mm tall, 8mm diameter\n    color(color_wood) cylinder(h = 50, d = 8, center = false);\n    \n    // Tapered top\n    translate([0, 0, 50]) {\n        cylinder(h = 10, d1 = 8, d2 = 2, center = false);\n    }\n    \n    // Color bands\n    translate([0, 0, 10])\n        color(color_red) cylinder(h = 5, d = 10, center = false);\n    translate([0, 0, 20])\n        color(color_blue) cylinder(h = 5, d = 10, center = false);\n    translate([0, 0, 30])\n        color(color_yellow) cylinder(h = 5, d = 10, center = false);\n    translate([0, 0, 40])\n        color(color_green) cylinder(h = 5, d = 10, center = false);\n}\n\n// Assemble complete croquet toy set\n// Mallet\ntranslate([-60, 0, 0]) croquet_mallet();\n\n// Balls in starting positions\ntranslate([0, -20, 12.5]) croquet_ball(color_red);\ntranslate([0, 0, 12.5]) croquet_ball(color_blue);\ntranslate([0, 20, 12.5]) croquet_ball(color_yellow);\ntranslate([0, 40, 12.5]) croquet_ball(color_green);\n\n// Wickets\ntranslate([40, -30, 0]) croquet_wicket();\ntranslate([40, 0, 0]) rotate([0, 0, 45]) croquet_wicket();\ntranslate([40, 30, 0]) rotate([0, 0, 90]) croquet_wicket();\n\n// Finishing stake\ntranslate([70, 0, 0]) croquet_stake();",
    "renders": true
  },
  {
    "toy": "mallet",
    "openscad_code": "// Toy Mallet - Realistic Style, Medium Complexity\n// Overall length ~120mm, suitable for 3D printing\n\n// Parameters\nhandle_d = 12;\nhandle_h = 90;\nhead_w = 30;\nhead_h = 25;\nhead_d = 20;\nring_d = 14;\nring_h = 8;\npeg_d = 4;\npeg_h = 5;\nwall = 2;\n\n// Colors for visualization\n$fn = 32;\n\n// Handle with grip rings\nmodule handle() {\n    // Main handle shaft\n    cylinder(d=handle_d, h=handle_h, center=true);\n    \n    // Grip rings\n    for(i = [-1:1]) {\n        translate([0, 0, handle_h/2 - 10 + i*15])\n            cylinder(d=handle_d+3, h=3, center=true);\n    }\n    \n    // End cap\n    translate([0, 0, handle_h/2 - 3])\n        cylinder(d=handle_d+2, h=6, center=true);\n}\n\n// Mallet head with peg connection\nmodule head() {\n    // Main head - rectangular block\n    translate([0, 0, 0])\n        cube([head_w, head_d, head_h], center=true);\n    \n    // Rounded striking faces\n    translate([head_w/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=head_d, h=head_w/2, center=true);\n    \n    translate([-head_w/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=head_d, h=head_w/2, center=true);\n    \n    // Peg hole for handle connection\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=handle_d+1, h=head_d+2, center=true);\n}\n\n// Connection peg between handle and head\nmodule peg() {\n    // Main peg body\n    cylinder(d=peg_d, h=peg_h, center=true);\n    \n    // Flared ends\n    translate([0, 0, peg_h/2])\n        cylinder(d=peg_d+2, h=1, center=true);\n    translate([0, 0, -peg_h/2])\n        cylinder(d=peg_d+2, h=1, center=true);\n}\n\n// Safety ring around head connection\nmodule safety_ring() {\n    difference() {\n        cylinder(d=ring_d+wall, h=ring_h, center=true);\n        cylinder(d=ring_d, h=ring_h+0.1, center=true);\n    }\n}\n\n// Assemble the mallet\nunion() {\n    // Handle assembly\n    translate([0, 0, -handle_h/2 - head_h/2 - 2])\n        handle();\n    \n    // Connection peg\n    translate([0, 0, head_h/2 + 2])\n        rotate([90, 0, 0])\n            peg();\n    \n    // Head\n    translate([0, 0, head_h/2 + 2])\n        head();\n    \n    // Safety ring around connection\n    translate([0, 0, head_h/2 + 2])\n        safety_ring();\n}\n\n// Optional - add toy manufacturer logo on head\nmodule logo() {\n    translate([head_w/2+1, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height=1)\n                text(\"TOY\", size=5, halign=\"center\", valign=\"center\");\n}\n\n// Uncomment to add logo\n// translate([0, 0, head_h/2 + 2])\n//     logo();",
    "renders": true
  },
  {
    "toy": "wicket",
    "openscad_code": "// Toy Wicket - Realistic Style, Medium Complexity\n// Approximate dimensions: 120mm wide x 90mm tall x 60mm deep\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 0.8;\n\n// Main module\nmodule wicket_toy() {\n    // Base structure\n    difference() {\n        union() {\n            // Main frame assembly\n            frame_assembly();\n            \n            // Horizontal crossbar\n            crossbar();\n            \n            // Bails\n            bails();\n            \n            // Stumps top details\n            stumps_details();\n        }\n        \n        // Hollow out for 3D printing\n        hollow_out();\n    }\n}\n\n// Stumps and frame assembly\nmodule frame_assembly() {\n    // Left stump\n    translate([-45, 0, 0]) {\n        stump();\n    }\n    \n    // Middle stump\n    translate([0, 0, 0]) {\n        stump();\n    }\n    \n    // Right stump\n    translate([45, 0, 0]) {\n        stump();\n    }\n    \n    // Base platform\n    translate([0, -5, -2]) {\n        cube([120, 10, 4], center = true);\n    }\n}\n\n// Individual stump module\nmodule stump() {\n    // Main stump body\n    difference() {\n        cylinder(h = 85, r = 8);\n        // Groove for bails\n        translate([0, 0, 82]) {\n            cube([20, 4, 6], center = true);\n        }\n    }\n    \n    // Stump top dome\n    translate([0, 0, 85]) {\n        sphere(r = 8);\n    }\n    \n    // Stump base flare\n    translate([0, 0, -2]) {\n        cylinder(h = 4, r1 = 10, r2 = 8);\n    }\n}\n\n// Crossbar between stumps\nmodule crossbar() {\n    // Left to middle\n    translate([-22.5, 0, 65]) {\n        cube([45, 6, 4], center = true);\n    }\n    \n    // Middle to right\n    translate([22.5, 0, 65]) {\n        cube([45, 6, 4], center = true);\n    }\n}\n\n// Bails module\nmodule bails() {\n    // Left bail\n    translate([-22.5, 2, 84]) {\n        rotate([0, 0, 5]) {\n            bail();\n        }\n    }\n    \n    // Right bail\n    translate([22.5, 2, 84]) {\n        rotate([0, 0, -5]) {\n            bail();\n        }\n    }\n}\n\n// Individual bail\nmodule bail() {\n    union() {\n        // Main bail body\n        cube([40, 3, 3], center = true);\n        \n        // Bail ends\n        translate([-20, 0, 0]) {\n            sphere(r = 2);\n        }\n        translate([20, 0, 0]) {\n            sphere(r = 2);\n        }\n    }\n}\n\n// Stumps top decorative details\nmodule stumps_details() {\n    // Left stump rings\n    translate([-45, 0, 30]) {\n        stump_rings();\n    }\n    \n    // Middle stump rings\n    translate([0, 0, 30]) {\n        stump_rings();\n    }\n    \n    // Right stump rings\n    translate([45, 0, 30]) {\n        stump_rings();\n    }\n}\n\n// Decorative rings on stumps\nmodule stump_rings() {\n    for(i = [0:2]) {\n        translate([0, 0, i * 15]) {\n            difference() {\n                cylinder(h = 2, r = 9);\n                cylinder(h = 3, r = 7.5);\n            }\n        }\n    }\n}\n\n// Hollow out for 3D printing\nmodule hollow_out() {\n    // Main hollow\n    translate([0, 0, 40]) {\n        cube([110, 8, 80], center = true);\n    }\n    \n    // Stump hollows\n    for(x = [-45, 0, 45]) {\n        translate([x, 0, 40]) {\n            cylinder(h = 85, r = 5.5);\n        }\n    }\n}\n\n// Generate the wicket\nwicket_toy();",
    "renders": true
  },
  {
    "toy": "stick",
    "openscad_code": "// Realistic Stick Toy - Medium Complexity\n// Toy walking stick with classic knob handle and ferrule tip\n\n$fn = 32;  // Smooth curves for realism\n\n// Main parameters in mm\nstick_length = 120;\nstick_diameter = 8;\nhandle_height = 35;\nhandle_sphere_diameter = 22;\nferrule_height = 8;\nring_thickness = 2;\n\nmodule ferrule_tip() {\n    // Metal ferrule at bottom with proper wall thickness\n    difference() {\n        cylinder(h = ferrule_height, d1 = stick_diameter + 4, d2 = stick_diameter + 2);\n        translate([0, 0, -0.1])\n        cylinder(h = ferrule_height + 0.2, d1 = stick_diameter, d2 = stick_diameter - 2);\n    }\n    // Rubber tip detail\n    translate([0, 0, ferrule_height])\n    cylinder(h = 2, d = stick_diameter + 1);\n}\n\nmodule handle_knob() {\n    // Classic rounded knob handle\n    union() {\n        // Main sphere\n        sphere(d = handle_sphere_diameter);\n        \n        // Neck transition\n        translate([0, 0, -handle_sphere_diameter/2 - 2])\n        cylinder(h = 6, d1 = handle_sphere_diameter * 0.7, d2 = stick_diameter);\n        \n        // Decorative ring below sphere\n        translate([0, 0, -handle_sphere_diameter/2 - 2])\n        cylinder(h = ring_thickness, d = handle_sphere_diameter * 0.8);\n    }\n}\n\nmodule stick_shaft() {\n    // Main shaft with slight taper\n    cylinder(h = stick_length, d1 = stick_diameter, d2 = stick_diameter * 0.9);\n    \n    // Add subtle texture rings for grip\n    for(i = [1:10:stick_length-10]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h = 1, d = stick_diameter + 0.5);\n            cylinder(h = 1.2, d = stick_diameter);\n        }\n    }\n}\n\nmodule decorative_bands() {\n    // Upper decorative band below handle\n    translate([0, 0, stick_length - 15])\n    difference() {\n        cylinder(h = 3, d = stick_diameter + 3);\n        cylinder(h = 3.2, d = stick_diameter);\n    }\n    \n    // Lower decorative band\n    translate([0, 0, 20])\n    difference() {\n        cylinder(h = 3, d = stick_diameter + 2);\n        cylinder(h = 3.2, d = stick_diameter);\n    }\n}\n\n// Assemble the complete stick\nunion() {\n    // Main shaft\n    stick_shaft();\n    \n    // Handle at top\n    translate([0, 0, stick_length])\n    handle_knob();\n    \n    // Ferrule at bottom\n    translate([0, 0, 0])\n    ferrule_tip();\n    \n    // Decorative elements\n    decorative_bands();\n}",
    "renders": true
  },
  {
    "toy": "goalpost",
    "openscad_code": "// Toy Goalpost for 3D printing\n// Realistic style, medium complexity\n\n$fn=32;\n\n/*----------------------------------------\n  Dimensions (toy scale 1:100, ~120 mm)\n----------------------------------------*/\npost_diam = 6;            // 6 mm diameter posts\nwall_thk  = 2.5;          // printable wall thickness\ngoal_w    = 90;           // inner goal width\ngoal_h    = 50;           // inner goal height\ngoal_d    = 30;           // goal depth (net area)\nbase_h    = 6;            // base plate height\npeg_d     = 3.2;          // mounting peg\npeg_h     = 4;\n\n/*----------------------------------------\n  Main assembly\n----------------------------------------*/\nunion() {\n    // Ground base plate with pegs for modular fun\n    base_assembly();\n    \n    // Goal frame\n    translate([0,0,base_h])\n        goal_frame();\n    \n    // Back stays\n    translate([0,0,base_h])\n        back_stays();\n    \n    // Net supports\n    translate([0,0,base_h])\n        net_mesh();\n}\n\n/*----------------------------------------\n  Base with toy pegs\n----------------------------------------*/\nmodule base_assembly() {\n    difference() {\n        // Main plate\n        cube([goal_w + 2*post_diam + 20, goal_d + 2*post_diam + 20, base_h], center=true);\n        \n        // Rounded corners (for toy safety)\n        for(x=[-1,1])\n            for(y=[-1,1])\n                translate([x*(goal_w/2 + post_diam + 10), y*(goal_d/2 + post_diam + 10), base_h/2])\n                    rotate([90,0,0])\n                        cylinder(h=base_h*2, r=6, center=true);\n    }\n    \n    // Pegs for connecting other toys\n    for(pos = [[-25, -10], [25, -10], [-25, 10], [25, 10]]) {\n        translate([pos[0], pos[1], base_h])\n            cylinder(h=peg_h, d=peg_d);\n    }\n}\n\n/*----------------------------------------\n  Goal frame\n----------------------------------------*/\nmodule goal_frame() {\n    // Left post\n    post(-goal_w/2, 0, goal_h);\n    \n    // Right post\n    post(goal_w/2, 0, goal_h);\n    \n    // Crossbar\n    translate([0, 0, goal_h])\n        rotate([90,0,0])\n            cylinder(h=goal_w + post_diam, d=post_diam);\n}\n\n/*----------------------------------------\n  Single goal post with socket detail\n----------------------------------------*/\nmodule post(x, y, h) {\n    union() {\n        // Main pole\n        translate([x, y, 0])\n            cylinder(h=h, d=post_diam);\n        \n        // Toy socket ring (decorative)\n        translate([x, y, 0])\n            cylinder(h=wall_thk, d=post_diam + 2);\n    }\n}\n\n/*----------------------------------------\n  Back stays (triangular supports)\n----------------------------------------*/\nmodule back_stays() {\n    angle = atan(goal_h / (goal_d/2));\n    \n    // Left stay\n    translate([-goal_w/2 - post_diam/2, 0, 0])\n        stay(angle);\n    \n    // Right stay\n    translate([goal_w/2 + post_diam/2, 0, 0])\n        mirror([1,0,0])\n            stay(angle);\n}\n\nmodule stay(angle) {\n    // Diagonal strut\n    rotate([0,-angle,0])\n        translate([-post_diam/2, 0, 0])\n            cube([post_diam, post_diam, goal_h / sin(angle)]);\n    \n    // Ground foot\n    translate([0, -goal_d/2 - post_diam/2, 0])\n        cube([post_diam, post_diam, wall_thk]);\n}\n\n/*----------------------------------------\n  Toy net mesh (simplified diamond pattern)\n----------------------------------------*/\nmodule net_mesh() {\n    net_thk = 1.2;\n    \n    // Vertical cords\n    for(x=[-goal_w/2:4:goal_w/2])\n        translate([x, 0, 0])\n            cube([net_thk, goal_d, goal_h]);\n    \n    // Horizontal cords\n    for(z=[2:3.5:goal_h-2])\n        translate([0, 0, z])\n            rotate([90,0,0])\n                cylinder(h=goal_d, d=net_thk);\n    \n    // Top cross cords\n    for(x=[-goal_w/2:4:goal_w/2])\n        translate([x, -goal_d/2, goal_h/2])\n            rotate([0,90,atan2(goal_h, goal_d)])\n                cylinder(h=sqrt(goal_h*goal_h + (goal_d/2)*(goal_d/2)), d=net_thk);\n}",
    "renders": true
  },
  {
    "toy": "backboard",
    "openscad_code": "// Toy backboard for miniature basketball hoop\n// Overall dimensions: 120mm wide x 80mm tall x 12mm deep\n\nmodule backboard() {\n    // Main backboard panel with rounded edges\n    difference() {\n        // Main rectangular panel\n        translate([-60, -40, 0])\n            cube([120, 80, 10]);\n        \n        // Rounded corners on front face\n        translate([0, 0, 10])\n            cylinder(h=10, r=5, $fn=20);\n        translate([0, 0, 10])\n            mirror([1, 0, 0]) cylinder(h=10, r=5, $fn=20);\n        translate([0, 0, 10])\n            mirror([0, 1, 0]) cylinder(h=10, r=5, $fn=20);\n        translate([0, 0, 10])\n            mirror([1, 1, 0]) cylinder(h=10, r=5, $fn=20);\n        \n        // Cut rounded edges\n        translate([-55, -35, 0])\n            cube([110, 70, 12]);\n    }\n}\n\nmodule rim_mount() {\n    // Mounting bracket for basketball rim\n    difference() {\n        // Rectangular bracket\n        translate([-15, -30, 10])\n            cube([30, 8, 15]);\n        \n        // Screw holes for rim attachment\n        for(x = [-10, 10]) {\n            translate([x, -26, 12])\n                cylinder(h=15, r=2, $fn=12);\n        }\n    }\n}\n\nmodule rear_bracing() {\n    // Structural support triangles on back\n    for(x = [-40, 40]) {\n        translate([x, -35, 0])\n            rotate([0, 0, 90])\n            linear_extrude(height=2)\n                polygon(points=[[0,0], [20,0], [0,20]]);\n    }\n}\n\nmodule mounting_holes() {\n    // Keyhole mounting slots for wall attachment\n    for(y = [-25, 25]) {\n        translate([0, y, -1])\n            cylinder(h=12, r=8, $fn=20);\n        translate([0, y, -1])\n            cylinder(h=4, r=3, $fn=20);\n    }\n}\n\nmodule scoreboard() {\n    // Miniature electronic scoreboard detail\n    difference() {\n        translate([-25, 15, 10])\n            cube([50, 15, 5]);\n        \n        // Display area\n        translate([-20, 18, 15])\n            cube([40, 9, 1]);\n        \n        // Control buttons\n        for(x = [-15, -5, 5, 15]) {\n            translate([x, 20, 15.5])\n                cylinder(h=1, r=1.5, $fn=8);\n        }\n    }\n}\n\nmodule decoration_lines() {\n    // Painted border lines detail\n    color(\"red\")\n    for(offset = [0, 5, 10]) {\n        translate([-55+offset, -35+offset, 10.1])\n            cube([110-2*offset, 2, 1]);\n        translate([-55+offset, 33-offset, 10.1])\n            cube([110-2*offset, 2, 1]);\n        translate([-55+offset, -35+offset, 10.1])\n            cube([2, 70-2*offset, 1]);\n        translate([53-offset, -35+offset, 10.1])\n            cube([2, 70-2*offset, 1]);\n    }\n}\n\nunion() {\n    backboard();\n    rim_mount();\n    scoreboard();\n    \n    // Add rear structural elements\n    translate([0, 0, -2])\n        rear_bracing();\n    \n    // Create mounting system\n    difference() {\n        translate([0, 0, 0])\n            backboard();\n        mounting_holes();\n    }\n    \n    // Decorative elements\n    decoration_lines();\n}",
    "renders": true
  },
  {
    "toy": "rim",
    "openscad_code": "// Toy Rim - Medium Complexity\n// Realistic toy-style rim with structural details and toy characteristics\n\n// Overall scale\nscale_factor = 0.8;\n\n// Main rim dimensions\nrim_diameter = 80 * scale_factor;\nrim_width = 30 * scale_factor;\nrim_thickness = 3 * scale_factor;\n\n// Spoke details\nspoke_count = 6;\nspoke_width = 4 * scale_factor;\nspoke_thickness = 2.5 * scale_factor;\n\n// Hub details\nhub_diameter = 20 * scale_factor;\nhub_length = 25 * scale_factor;\nhub_hole_diameter = 8 * scale_factor;\n\n// Tire details\ntire_width = 12 * scale_factor;\ntire_thickness = 8 * scale_factor;\n\n// Toy connector peg\npeg_diameter = 5 * scale_factor;\npeg_length = 8 * scale_factor;\n\nmodule rim_tire() {\n    // Main tire body\n    difference() {\n        cylinder(h = tire_width, d = rim_diameter + tire_thickness*2, center = true);\n        cylinder(h = tire_width + 2, d = rim_diameter, center = true);\n    }\n    \n    // Tire tread pattern\n    for (i = [0:15]) {\n        rotate([0, 0, i * 360/16]) {\n            translate([rim_diameter/2 + tire_thickness/2, 0, 0])\n                cube([tire_thickness, 2, tire_width], center = true);\n        }\n    }\n}\n\nmodule rim_spokes() {\n    // Central hub\n    difference() {\n        cylinder(h = hub_length, d = hub_diameter, center = true);\n        cylinder(h = hub_length + 2, d = hub_hole_diameter, center = true);\n    }\n    \n    // Spokes\n    for (i = [0:spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count + 360/spoke_count/2]) {\n            // Main spoke\n            translate([rim_diameter/2 - spoke_width - hub_diameter/2, 0, 0])\n                cube([rim_diameter/2 - hub_diameter/2 - spoke_width, spoke_width, spoke_thickness], center = true);\n            \n            // Spoke reinforcement\n            translate([rim_diameter/2 - spoke_width*2 - hub_diameter/2, 0, 0])\n                cube([spoke_width, spoke_width*1.5, spoke_thickness], center = true);\n        }\n    }\n    \n    // Inner rim ring\n    difference() {\n        cylinder(h = rim_width - 4, d = rim_diameter - rim_thickness*2, center = true);\n        cylinder(h = rim_width - 2, d = rim_diameter - rim_thickness*4, center = true);\n    }\n}\n\nmodule rim_outer() {\n    // Outer rim structure\n    difference() {\n        cylinder(h = rim_width, d = rim_diameter, center = true);\n        cylinder(h = rim_width + 2, d = rim_diameter - rim_thickness*2, center = true);\n    }\n    \n    // Mounting holes for toy connectors\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([rim_diameter/2 - rim_thickness, 0, rim_width/2 - 2])\n                cylinder(h = 4, d = peg_diameter, center = false);\n        }\n    }\n}\n\nmodule toy_connector_peg() {\n    // Connector peg for toy assembly\n    translate([0, 0, hub_length/2 + peg_length/2])\n        cylinder(h = peg_length, d = peg_diameter, center = true);\n    \n    // Peg base\n    translate([0, 0, hub_length/2])\n        cylinder(h = 2, d = peg_diameter * 1.5, center = false);\n}\n\n// Main assembly\nunion() {\n    // Assemble all parts\n    union() {\n        // Rim structure\n        rim_outer();\n        \n        // Spokes and hub\n        rim_spokes();\n        \n        // Tire\n        translate([0, 0, rim_width/2 + tire_width/2 + 1])\n            rim_tire();\n        translate([0, 0, -rim_width/2 - tire_width/2 - 1])\n            rim_tire();\n    }\n    \n    // Toy connector pegs\n    toy_connector_peg();\n    mirror([0, 0, 1]) toy_connector_peg();\n}",
    "renders": true
  }
]