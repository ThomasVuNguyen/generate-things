[
  {
    "furniture": "chair",
    "openscad_code": "// Realistic 3D-printable chair – medium complexity\n// Overall footprint ~100 mm × 100 mm × 110 mm (H)\n\n// ---------- parameters ----------\nleg_t   = 5;      // leg cross-section\nseat_h  = 8;      // seat thickness\nback_h  = 45;     // backrest height above seat\narm_w   = 4;      // armrest thickness\nwall    = 2;      // 3D-print wall thickness\n\n// ---------- modules ----------\n\n// reusable rounded bar for legs & stretchers\nmodule bar(l, diam, vert=false){\n    translate([0,0, (vert? l/2 : 0)])\n        rotate([vert?0:90,0,0])\n            cylinder(h=l, d=diam, $fn=16);\n}\n\n// seat with gentle cushion contour (no overhangs)\nmodule seat(){\n    difference(){\n        // main seat block\n        translate([0,0,seat_h/2])\n            cube([100,100,seat_h], center=true);\n        // slight recess on top\n        translate([0,0,seat_h-1])\n            cube([90,90,seat_h], center=true);\n    }\n}\n\n// backrest slats\nmodule back_slat(x){\n    translate([x,0,seat_h+back_h/2])\n        cube([4,5,back_h], center=true);\n}\n\n// armrest\nmodule armrest(side){\n    mirror([side,0,0]){\n        // vertical post\n        translate([45+leg_t/2,0,seat_h+20])\n            cube([leg_t,leg_t,40], center=true);\n        // horizontal rest\n        translate([45+leg_t/2+15,0,seat_h+40])\n            cube([30,leg_t,arm_w], center=true);\n    }\n}\n\n// ---------- chair assembly ----------\n\nunion(){\n    // four legs\n    for (x=[-40,40], y=[-40,40]){\n        translate([x,y,0])\n            bar(seat_h, leg_t, vert=true);\n    }\n\n    // front & back stretchers (adds stiffness)\n    translate([0,-40,seat_h/2-20])\n        bar(80, leg_t);\n    translate([0, 40,seat_h/2-20])\n        bar(80, leg_t);\n\n    // seat\n    seat();\n\n    // backrest frame\n    translate([0,42,seat_h+back_h/2])\n        cube([90,leg_t,back_h], center=true);\n    for (x=[-30,-15,0,15,30])\n        back_slat(x);\n\n    // armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "furniture": "sofa",
    "openscad_code": "// Realistic 3D-printable sofa (medium complexity)\n// Overall footprint ≈ 70 mm × 35 mm × 30 mm\n\n// --------------------------------------------------\n// Parameters\nwall = 2;        // 3D-printable wall thickness\nseat_h = 12;     // seat height\nseat_d = 30;     // seat depth\nback_h = 18;     // backrest height above seat\narm_h = 14;      // armrest height above seat\narm_w = 5;       // armrest width\nleg_h = 8;       // leg height\nframe_t = 3;     // frame thickness\ncushion_t = 4;   // cushion thickness\nsofa_w = 70;     // total width\n\n// --------------------------------------------------\n// Utility modules\nmodule rounded_box(w, d, h, r) {\n    translate([r, r, 0])\n    minkowski() {\n        cube([w - 2*r, d - 2*r, h]);\n        cylinder(h = 0.01, r = r, $fn = 16);\n    }\n}\n\nmodule leg(dx, dy) {\n    translate([dx, dy, 0])\n    cylinder(h = leg_h, r = 2.5, $fn = 16);\n}\n\n// --------------------------------------------------\n// Frame\nmodule frame() {\n    difference() {\n        // Outer box frame\n        rounded_box(sofa_w, seat_d + frame_t, seat_h + frame_t, 2);\n        \n        // Hollow inside\n        translate([frame_t, frame_t, frame_t])\n        rounded_box(sofa_w - 2*frame_t,\n                    seat_d - 2*frame_t,\n                    seat_h + frame_t,\n                    2);\n    }\n}\n\n// --------------------------------------------------\n// Backrest\nmodule backrest() {\n    translate([0, -frame_t/2, seat_h])\n    rounded_box(sofa_w, frame_t, back_h, 2);\n}\n\n// --------------------------------------------------\n// Armrests\nmodule armrest(side) {\n    translate([side * (sofa_w/2 - arm_w/2), seat_d/2 - arm_w/2, seat_h])\n    rounded_box(arm_w, arm_w, arm_h, 2);\n}\n\n// --------------------------------------------------\n// Cushions\nmodule cushion(dx, dy, w, d) {\n    translate([dx, dy, seat_h])\n    rounded_box(w, d, cushion_t, 2);\n}\n\n// --------------------------------------------------\n// Legs\nmodule all_legs() {\n    leg(5, 5);\n    leg(sofa_w - 5, 5);\n    leg(5, seat_d - 5);\n    leg(sofa_w - 5, seat_d - 5);\n}\n\n// --------------------------------------------------\n// Assembly\nunion() {\n    frame();\n    backrest();\n    armrest(1);   // left\n    armrest(-1);  // right\n    all_legs();\n    \n    // Seat cushions (3 cushions)\n    for (i = [0:2]) {\n        cushion(5 + i*(sofa_w - 10)/3, 5,\n                (sofa_w - 10)/3 - 1, seat_d - 10);\n    }\n    \n    // Back cushions (3 cushions)\n    for (i = [0:2]) {\n        translate([0, 0, cushion_t])\n        translate([5 + i*(sofa_w - 10)/3,\n                   -frame_t/2 + 2,\n                   seat_h + back_h - cushion_t])\n        rotate([90, 0, 0])\n        rounded_box((sofa_w - 10)/3 - 1,\n                    cushion_t,\n                    back_h - cushion_t,\n                    2);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "bench",
    "openscad_code": "// Realistic bench with medium complexity\n// Overall dimensions: 100mm x 40mm x 45mm (L x W x H)\n\n$fn = 32;\nseat_thickness = 3;\nleg_size = 4;\nbackrest_height = 25;\nslat_width = 8;\nslat_gap = 2;\n\nmodule bench_seat() {\n    // Main seat frame\n    difference() {\n        cube([100, 40, seat_thickness], center=true);\n        \n        // Create slatted effect\n        for (x = [-40:10:40]) {\n            translate([x, 0, -1])\n            cube([slat_gap, 42, seat_thickness + 2]);\n        }\n    }\n}\n\nmodule bench_leg(x_pos, z_pos) {\n    // Vertical leg post\n    translate([x_pos, -15, z_pos]) {\n        cube([leg_size, leg_size, 20 - seat_thickness/2], center=true);\n    }\n    \n    // Horizontal stretcher\n    translate([x_pos, 0, z_pos - 8]) {\n        rotate([90, 0, 0])\n        cylinder(h=30, r=leg_size/2, center=true);\n    }\n    \n    // Foot pad\n    translate([x_pos, -15, z_pos - 10]) {\n        cube([6, 6, 2], center=true);\n    }\n}\n\nmodule bench_backrest() {\n    // Backrest frame\n    translate([0, 18, 10]) {\n        difference() {\n            cube([90, 4, backrest_height], center=true);\n            \n            // Create backrest slats\n            for (x = [-35:10:35]) {\n                translate([x, 0, -1])\n                cube([slat_gap, 6, backrest_height + 2]);\n            }\n        }\n    }\n    \n    // Backrest support posts\n    for (x = [-40:80:80]) {\n        translate([x, 20, 0]) {\n            cube([leg_size, leg_size, 20], center=true);\n        }\n    }\n}\n\nmodule bench_details() {\n    // Corner braces\n    for (x = [-45, 45]) {\n        for (y = [-15, 15]) {\n            translate([x, y, -3]) {\n                rotate([45, 0, 0])\n                cube([3, 3, 10], center=true);\n            }\n        }\n    }\n    \n    // Seat edge rounding\n    translate([0, 0, 1.5]) {\n        cube([102, 42, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bench_seat();\n    \n    // Four legs\n    for (x = [-40, 40]) {\n        bench_leg(x, -seat_thickness/2);\n    }\n    \n    bench_backrest();\n    bench_details();\n}",
    "renders": true
  },
  {
    "furniture": "stool",
    "openscad_code": "// Realistic 3D-printable stool – medium complexity\n// Overall size ≈ 80 mm H × 60 mm seat diameter\n// 2 mm wall thickness everywhere, no overhangs > 45°\n\n// Parameters\n$fn = 32;\nseat_d = 60;           // seat diameter\nseat_h = 4;            // seat thickness\nleg_h = 70;            // leg length (total height 80 incl. seat)\nleg_r = 2.5;           // leg radius\nbrace_h = 8;           // stretcher height\nbrace_t = 2;           // stretcher thickness\nfoot_r = 4;            // foot diameter\nfoot_h = 3;            // foot height\nclear = 0.2;           // clearance for boolean ops\n\n// Seat – round cushion with slight dome\nmodule seat() {\n    union() {\n        cylinder(d = seat_d, h = seat_h, center = false);\n        translate([0, 0, seat_h])\n            scale([1, 1, 0.3])\n            cylinder(d = seat_d, h = 4, center = false);\n    }\n}\n\n// Single round leg with tapered foot\nmodule leg() {\n    union() {\n        cylinder(r = leg_r, h = leg_h);\n        translate([0, 0, leg_h])\n            cylinder(r1 = leg_r, r2 = foot_r/2, h = foot_h);\n    }\n}\n\n// Radial stretcher ring (hidden inside legs for printability)\nmodule stretcher_ring() {\n    difference() {\n        cylinder(h = brace_h, r = seat_d/2 - leg_r - 2);\n        translate([0, 0, -clear])\n            cylinder(h = brace_h + 2*clear, \n                     r = seat_d/2 - leg_r - 2 - brace_t);\n    }\n}\n\n// Assemble four legs around center\nmodule legs() {\n    for(a = [0:90:270])\n        rotate([0, 0, a])\n            translate([seat_d/2 - leg_r - 1, 0, 0])\n                leg();\n}\n\n// Entire stool\nunion() {\n    // Seat on top\n    translate([0, 0, leg_h + foot_h])\n        seat();\n\n    // Legs\n    legs();\n\n    // Stretcher ring inside legs\n    translate([0, 0, leg_h/2 - brace_h/2])\n        stretcher_ring();\n}",
    "renders": true
  },
  {
    "furniture": "ottoman",
    "openscad_code": "// Ottoman with tufted cushion and turned legs\n// Overall size: 100 x 70 x 55 mm (L x W x H)\n\n$fn = 32; // Smooth curves\n\n// Main module\nmodule ottoman() {\n    // Base frame\n    union() {\n        // Cushion\n        translate([0, 0, 45])\n            cushion();\n        \n        // Box\n        translate([0, 0, 20])\n            box();\n        \n        // Legs\n        legs();\n    }\n}\n\n// Tufted cushion\nmodule cushion() {\n    difference() {\n        // Main cushion block\n        translate([0, 0, 2.5])\n            minkowski() {\n                cube([90, 60, 5], center = true);\n                sphere(2.5);\n            }\n        \n        // Tufting buttons\n        for (x = [-30, 0, 30]) {\n            for (y = [-20, 0, 20]) {\n                translate([x, y, 7])\n                    cylinder(h = 3, r1 = 3, r2 = 2);\n            }\n        }\n        \n        // Edge seam\n        translate([0, 0, 4])\n            cube([95, 65, 2], center = true);\n    }\n}\n\n// Storage box\nmodule box() {\n    difference() {\n        // Outer shell\n        cube([95, 65, 40], center = true);\n        \n        // Hollow inside\n        translate([0, 0, -2])\n            cube([91, 61, 40], center = true);\n    }\n}\n\n// Four turned legs\nmodule legs() {\n    for (x = [-35, 35]) {\n        for (y = [-25, 25]) {\n            translate([x, y, 0])\n                leg();\n        }\n    }\n}\n\n// Individual turned leg\nmodule leg() {\n    difference() {\n        union() {\n            // Top block\n            translate([0, 0, 35])\n                cube([12, 12, 5], center = true);\n            \n            // Main turned leg\n            cylinder(h = 35, r1 = 6, r2 = 6);\n            \n            // Decorative rings\n            translate([0, 0, 30]) cylinder(h = 2, r1 = 7, r2 = 7);\n            translate([0, 0, 25]) cylinder(h = 2, r1 = 5, r2 = 5);\n            translate([0, 0, 15]) cylinder(h = 2, r1 = 7, r2 = 7);\n            translate([0, 0, 10]) cylinder(h = 2, r1 = 5, r2 = 5);\n            \n            // Bottom foot\n            translate([0, 0, 0])\n                cylinder(h = 3, r1 = 8, r2 = 6);\n        }\n        \n        // Hollow for material saving\n        translate([0, 0, 3])\n            cylinder(h = 32, r1 = 3, r2 = 3);\n    }\n}\n\n// Generate the ottoman\nottoman();",
    "renders": true
  },
  {
    "furniture": "recliner",
    "openscad_code": "// Recliner armchair – medium-complexity 3D-printable model\n// Dimensions scaled for ~120 mm total length\n\n$fa = 2;\n$fs = 1;\n\nmodule rounded_cube(size, r) {\n    // Simple rounded-corner box using hull of spheres\n    translate([-size.x/2+r, -size.y/2+r, 0])\n    hull() {\n        for(i=[0,1], j=[0,1], k=[0,1])\n            translate([i*(size.x-2*r), j*(size.y-2*r), k*size.z])\n                sphere(r);\n    }\n}\n\n// Seat cushion module\nmodule seat_cushion(w, d, h, r) {\n    difference() {\n        rounded_cube([w, d, h], r);\n        // Slight hollow underneath to reduce weight\n        translate([0, 0, -0.5])\n            rounded_cube([w-4, d-4, h-1], r-1);\n    }\n}\n\n// Backrest cushion module (tilted)\nmodule backrest_cushion(w, h, t, angle) {\n    rotate([angle, 0, 0])\n        seat_cushion(w, t, h, 5);\n}\n\n// Support leg\nmodule leg(h) {\n    cylinder(d1=8, d2=6, h=h, $fn=20);\n}\n\n// Armrest side panel\nmodule armrest_side(w, d, h) {\n    difference() {\n        rounded_cube([w, d, h], 4);\n        // Remove inner volume for wall thickness\n        translate([2, 2, -1])\n            rounded_cube([w-4, d-4, h], 2);\n    }\n}\n\n// Recliner assembly\nunion() {\n    // Seat base\n    translate([0, 0, 20])\n        seat_cushion(60, 50, 12, 6);\n\n    // Backrest (reclined ~15°)\n    translate([0, -22, 32])\n        backrest_cushion(60, 50, 12, 105);\n\n    // Left armrest\n    translate([-35, 0, 20])\n        armrest_side(8, 45, 35);\n\n    // Right armrest\n    translate([35, 0, 20])\n        armrest_side(8, 45, 35);\n\n    // Front legs\n    translate([-20, 20, 0])\n        leg(20);\n    translate([20, 20, 0])\n        leg(20);\n\n    // Rear legs\n    translate([-20, -25, 0])\n        leg(20);\n    translate([20, -25, 0])\n        leg(20);\n\n    // Front footrest support bar\n    translate([0, 30, 10])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=3, $fn=16);\n\n    // Small footrest cushion\n    translate([0, 35, 8])\n        seat_cushion(50, 25, 8, 4);\n}",
    "renders": true
  },
  {
    "furniture": "armchair",
    "openscad_code": "// Realistic Armchair - Medium Complexity\n// Overall dimensions: 80mm(W) x 75mm(D) x 85mm(H)\n// 3D printable with 2mm walls and no overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// Main chair module\nmodule armchair() {\n    // Seat frame\n    difference() {\n        // Outer seat box\n        translate([0, 0, 20]) cube([60, 60, 8], center = true);\n        // Hollow center\n        translate([0, 0, 20]) cube([56, 56, 12], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 26]) scale([1, 1, 0.4]) sphere(d = 58, $fn = 32);\n    \n    // Backrest frame\n    difference() {\n        // Outer backrest\n        translate([0, -27, 50]) cube([58, 6, 50], center = true);\n        // Hollow back\n        translate([0, -27, 50]) cube([54, 10, 46], center = true);\n    }\n    \n    // Backrest cushion\n    translate([0, -25, 50]) scale([1, 0.3, 1]) sphere(d = 54, $fn = 32);\n    \n    // Left armrest\n    translate([-32, 10, 40]) cube([8, 40, 20], center = true);\n    // Left armrest cushion\n    translate([-32, 10, 50]) scale([1, 1, 0.4]) sphere(d = 38, $fn = 32);\n    \n    // Right armrest\n    translate([32, 10, 40]) cube([8, 40, 20], center = true);\n    // Right armrest cushion\n    translate([32, 10, 50]) scale([1, 1, 0.4]) sphere(d = 38, $fn = 32);\n    \n    // Legs - 4 cylindrical supports\n    // Front left leg\n    translate([-25, 25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Front right leg\n    translate([25, 25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Back left leg\n    translate([-25, -25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Back right leg\n    translate([25, -25, 10]) cylinder(h = 20, d = 6, center = true);\n    \n    // Support bars between legs\n    // Front bar\n    translate([0, 25, 2]) cube([50, 4, 4], center = true);\n    // Back bar\n    translate([0, -25, 2]) cube([50, 4, 4], center = true);\n    // Left bar\n    translate([-25, 0, 2]) cube([4, 50, 4], center = true);\n    // Right bar\n    translate([25, 0, 2]) cube([4, 50, 4], center = true);\n    \n    // Decorative back slats\n    for(i = [-20:10:20]) {\n        translate([i, -27, 65]) cube([4, 2, 20], center = true);\n    }\n}\n\n// Generate the armchair\narmchair();",
    "renders": true
  },
  {
    "furniture": "loveseat",
    "openscad_code": "$fn = 30;\n\n// Overall dimensions (in mm, printable scale)\nseat_w = 60;\nseat_d = 30;\nseat_h = 15;\n\nback_h = 30;\narm_w = 8;\narm_h = 20;\nleg_h = 18;\nleg_size = 4;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule loveseat() {\n    // Backrest frame and slats\n    difference() {\n        // Main backrest panel\n        translate([0, -seat_d/2 - wall/2, back_h/2 + seat_h]) \n            cube([seat_w, wall, back_h], center=true);\n        \n        // Decorative cutouts (three horizontal slats)\n        for (i = [-1, 0, 1])\n            translate([0, -seat_d/2 - wall, (seat_h + back_h/2) + i*7]) \n                cube([seat_w - 12, wall + 2, 6], center=true);\n    }\n\n    // Seat cushion (hollow for printing)\n    difference() {\n        translate([0, 0, seat_h/2]) \n            cube([seat_w, seat_d, seat_h], center=true);\n        translate([0, 0, seat_h/2 + wall]) \n            cube([seat_w - 2*wall, seat_d - 2*wall, seat_h - wall], center=true);\n    }\n\n    // Left armrest\n    difference() {\n        translate([-seat_w/2 - arm_w/2, 0, arm_h/2 + seat_h]) \n            cube([arm_w, seat_d, arm_h], center=true);\n        translate([-seat_w/2 - arm_w/2, 0, arm_h/2 + seat_h + wall]) \n            cube([arm_w - wall, seat_d - wall, arm_h - wall], center=true);\n    }\n\n    // Right armrest (mirror of left)\n    difference() {\n        translate([seat_w/2 + arm_w/2, 0, arm_h/2 + seat_h]) \n            cube([arm_w, seat_d, arm_h], center=true);\n        translate([seat_w/2 + arm_w/2, 0, arm_h/2 + seat_h + wall]) \n            cube([arm_w - wall, seat_d - wall, arm_h - wall], center=true);\n    }\n\n    // Front decorative skirt\n    translate([0, seat_d/2 + wall/2, leg_h/2]) \n        cube([seat_w + 2*arm_w, wall, leg_h], center=true);\n\n    // Legs (four tapered legs)\n    module tapered_leg() {\n        difference() {\n            cylinder(h = leg_h, r1 = leg_size/2, r2 = leg_size/2 - 0.5, center=false);\n            translate([0, 0, -1]) \n                cylinder(h = leg_h + 2, r1 = leg_size/2 - wall, r2 = leg_size/2 - wall - 0.5, center=false);\n        }\n    }\n\n    // Position legs at corners\n    translate([-seat_w/2 - arm_w/2 + leg_size/2, -seat_d/2 + leg_size/2, 0]) \n        tapered_leg();\n    translate([seat_w/2 + arm_w/2 - leg_size/2, -seat_d/2 + leg_size/2, 0]) \n        tapered_leg();\n    translate([-seat_w/2 - arm_w/2 + leg_size/2, seat_d/2 - leg_size/2, 0]) \n        tapered_leg();\n    translate([seat_w/2 + arm_w/2 - leg_size/2, seat_d/2 - leg_size/2, 0]) \n        tapered_leg();\n\n    // Back support bars between backrest and seat\n    for (x = [-seat_w/3, 0, seat_w/3]) {\n        translate([x, -seat_d/2 + 2, seat_h/2]) \n            cube([wall, 4, seat_h], center=true);\n    }\n}\n\n// Render the loveseat centered\ntranslate([0, 0, 0]) \n    loveseat();",
    "renders": true
  },
  {
    "furniture": "settee",
    "openscad_code": "// OpenSCAD Settee (Medium complexity, realistic style)\n// Overall footprint: 120 mm (W) × 50 mm (D) × 60 mm (H)\n\n// Parameters\nseat_w = 120;\nseat_d = 50;\nseat_h = 30;\nback_h = 30;\nleg_h = 20;\nleg_sz = 6;\nwall_t = 2;           // 3D-print-friendly wall thickness\n\nmodule settee() {\n    // Left arm-rest\n    translate([-seat_w/2 + leg_sz/2, 0, 0])\n        cube([leg_sz, seat_d, seat_h + back_h], center = true);\n\n    // Right arm-rest (mirror of left)\n    translate([seat_w/2 - leg_sz/2, 0, 0])\n        cube([leg_sz, seat_d, seat_h + back_h], center = true);\n\n    // Front left leg\n    translate([-seat_w/2 + leg_sz/2, seat_d/2 - leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Front right leg\n    translate([seat_w/2 - leg_sz/2, seat_d/2 - leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Rear left leg\n    translate([-seat_w/2 + leg_sz/2, -seat_d/2 + leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Rear right leg\n    translate([seat_w/2 - leg_sz/2, -seat_d/2 + leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Seat frame (hollow for printability)\n    difference() {\n        cube([seat_w - 2*leg_sz, seat_d - 2*leg_sz, wall_t], center = true);\n        translate([0, 0, -0.5])\n            cube([seat_w - 2*leg_sz - 2*wall_t, seat_d - 2*leg_sz - 2*wall_t, wall_t + 1], center = true);\n    }\n\n    // Seat cushion (slightly domed via spheres)\n    for (y = [-seat_d/2 + 5, -seat_d/2 + 15, -seat_d/2 + 25, -seat_d/2 + 35, -seat_d/2 + 45]) {\n        for (x = [-seat_w/2 + 15 : 10 : seat_w/2 - 15]) {\n            translate([x, y, seat_h/2 - 1])\n                scale([1, 0.3, 0.7])\n                    sphere(r = 5, $fn = 16);\n        }\n    }\n\n    // Backrest frame\n    difference() {\n        translate([0, -seat_d/2 + wall_t/2, seat_h + back_h/2])\n            cube([seat_w - 2*leg_sz, wall_t, back_h], center = true);\n        translate([0, -seat_d/2 + wall_t/2 - 0.5, seat_h + back_h/2])\n            cube([seat_w - 2*leg_sz - 2*wall_t, wall_t + 1, back_h - 2*wall_t], center = true);\n    }\n\n    // Backrest slats\n    for (x = [-seat_w/2 + 15 : 12 : seat_w/2 - 15]) {\n        translate([x, -seat_d/2 + wall_t/2, seat_h + back_h/2])\n            cube([wall_t, wall_t, back_h - wall_t], center = true);\n    }\n\n    // Decorative front apron\n    translate([0, seat_d/2 - wall_t/2, -leg_h/2 + 2])\n        cube([seat_w - 2*leg_sz - 4, wall_t, leg_h - 4], center = true);\n}\n\nsettee();",
    "renders": true
  },
  {
    "furniture": "divan",
    "openscad_code": "// Realistic medium-complexity 3D-printable divan\n// Overall size: 120 x 50 x 45 mm (L x W x H)\n\n$fn = 32;\n\nmodule divan() {\n    // Main platform / base\n    difference() {\n        translate([0, 0, 2])\n            cube([120, 50, 6], center = true);\n        // Hollow cavity for printability & weight\n        translate([0, 0, 5])\n            cube([116, 46, 4], center = true);\n    }\n\n    // Four legs\n    for (x = [-55, 55])\n        for (y = [-22, 22])\n            translate([x, y, 0])\n                cylinder(h = 12, d = 6, center = false);\n\n    // Backrest frame\n    difference() {\n        translate([0, 20, 25])\n            cube([110, 8, 36], center = true);\n        translate([0, 20, 43])\n            cube([106, 12, 20], center = true);\n    }\n\n    // Backrest slats (7 total, evenly spaced)\n    for (i = [-45:15:45]) {\n        translate([i, 20, 34])\n            cube([10, 8, 20], center = true);\n    }\n\n    // Seat cushion\n    translate([0, 0, 11])\n        cube([110, 46, 6], center = true);\n\n    // Bolster cushion\n    translate([0, -18, 17])\n        rotate([90, 0, 0])\n            cylinder(h = 40, d = 12, center = true);\n\n    // Decorative side panels\n    for (side = [-1, 1]) {\n        translate([side * 60, 0, 5])\n            cube([2, 50, 10], center = true);\n    }\n\n    // Front skirt detail\n    translate([0, -25, 5])\n        cube([110, 2, 8], center = true);\n\n    // Support rail between legs (front & back)\n    for (y = [-22, 22])\n        translate([0, y, 6])\n            cube([110, 2, 2], center = true);\n}\n\n// Render the divan\ndivan();",
    "renders": true
  },
  {
    "furniture": "throne",
    "openscad_code": "// Realistic Throne Chair - Medium Complexity\n// Overall dimensions: ~80mm W x ~85mm D x ~120mm H\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule throne() {\n    // Base platform\n    translate([0,0,10]) \n        cube([70,75,5], center=true);\n    \n    // Legs\n    legs();\n    \n    // Seat base\n    translate([0,0,27])\n        cube([55,50,12], center=true);\n    \n    // Seat cushion\n    translate([0,0,35])\n        scale([1,1,0.3])\n        sphere(r=28);\n    \n    // Backrest assembly\n    backrest();\n    \n    // Armrests\n    armrests();\n    \n    // Decorative elements\n    decorative();\n}\n\n// Four throne legs with stretchers\nmodule legs() {\n    // Front legs\n    for(x=[-25, 25])\n        leg(x, 20);\n    \n    // Rear legs\n    for(x=[-25, 25])\n        leg(x, -20);\n    \n    // Side stretchers\n    for(y=[20,-20])\n        translate([0,y,15])\n            cube([55,2,2], center=true);\n    \n    // Back stretcher\n    translate([0,-20,15])\n        rotate([90,0,0])\n            cylinder(h=50, r=1.5);\n}\n\n// Single leg with foot detail\nmodule leg(x,y) {\n    translate([x,y,0])\n        difference() {\n            // Main leg post\n            cylinder(h=27, r=3);\n            // Foot detail\n            translate([0,0,-1])\n                cylinder(h=5, r=4);\n        }\n}\n\n// High backrest with crown detail\nmodule backrest() {\n    // Main back panel\n    translate([0,-25,65])\n        cube([50,5,70], center=true);\n    \n    // Top crown curve\n    translate([0,-25,100])\n        difference() {\n            cube([55,5,15], center=true);\n            translate([0,0,7.5])\n                sphere(r=27.5);\n        }\n    \n    // Vertical supports\n    for(x=[-20,-10,0,10,20])\n        translate([x,-25,65])\n            cube([3,5,70], center=true);\n    \n    // Horizontal support bars\n    for(z=[40,55,70,85])\n        translate([0,-25,z])\n            cube([50,5,3], center=true);\n}\n\n// Armrest assembly\nmodule armrests() {\n    // Left arm\n    arm(30);\n    \n    // Right arm\n    arm(-30);\n}\n\n// Single armrest\nmodule arm(side) {\n    // Vertical post\n    translate([side,15,27])\n        cylinder(h=25, r=3);\n    \n    // Arm cushion\n    translate([side,15,39])\n        rotate([90,0,0])\n            scale([1,1.5,0.5])\n                cylinder(h=20, r=5);\n    \n    // Support bracket\n    translate([side,15,35])\n        rotate([0,-45,0])\n            cube([3,15,2], center=true);\n}\n\n// Decorative studs and details\nmodule decorative() {\n    // Front studs\n    for(x=[-20,-10,0,10,20])\n        translate([x,25,35])\n            sphere(r=1.5);\n    \n    // Backrest studs\n    for(z=[45,60,75,90])\n        for(x=[-22.5,-7.5,7.5,22.5])\n            translate([x,-27.5,z])\n                sphere(r=1);\n}\n\n// Assembly\nthrone();",
    "renders": true
  },
  {
    "furniture": "chaise",
    "openscad_code": "// Chaise Lounge - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm x 50mm x 45mm\n\n// Main body frame\nmodule chaise_frame() {\n    // Base platform\n    translate([0, 0, 8])\n    cube([120, 50, 4], center=true);\n    \n    // Backrest support frame\n    translate([-45, 0, 20])\n    cube([30, 48, 25], center=true);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([0, side * 22, 12])\n        cube([110, 4, 16], center=true);\n    }\n}\n\n// Chaise cushion with tufted details\nmodule cushion(x_pos, y_pos, z_pos, length, width, height) {\n    // Main cushion body\n    translate([x_pos, y_pos, z_pos])\n    cube([length, width, height], center=true);\n    \n    // Tufted buttons (6 buttons in 2x3 pattern)\n    for(i = [-1, 0, 1]) {\n        for(j = [-1, 1]) {\n            translate([x_pos + i * (length/3.5), y_pos + j * (width/3), z_pos + height/2 + 1])\n            sphere(d=3, $fn=16);\n        }\n    }\n}\n\n// Leg structure with tapered design\nmodule leg(x_pos, y_pos) {\n    // Upper leg block\n    translate([x_pos, y_pos, 4])\n    cube([6, 6, 4], center=true);\n    \n    // Tapered lower leg\n    translate([x_pos, y_pos, 1])\n    cylinder(h=4, r1=3, r2=2, $fn=8);\n}\n\n// Armrest with curved top\nmodule armrest(side) {\n    translate([35, side * 27, 20])\n    rotate([0, 15, 0])\n    cube([30, 8, 12], center=true);\n    \n    // Curved top detail\n    translate([35, side * 27, 27])\n    rotate([0, 15, 0])\n    cylinder(h=30, r=4, $fn=20);\n}\n\n// Backrest cushion with angle\nmodule backrest_cushion() {\n    translate([-45, 0, 29])\n    rotate([105, 0, 0])\n    cube([28, 46, 8], center=true);\n    \n    // Tufted buttons (4 buttons)\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([-45 + i * 8, j * 15, 33])\n            sphere(d=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Frame structure\n    chaise_frame();\n    \n    // Seating cushions\n    cushion(0, 0, 14, 90, 44, 6);\n    \n    // Backrest cushion\n    backrest_cushion();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs (4 corners)\n    leg(50, 20);\n    leg(50, -20);\n    leg(-50, 20);\n    leg(-50, -20);\n    \n    // Middle support legs\n    leg(0, 20);\n    leg(0, -20);\n}\n\n// Optional: Rounded edges on cushions using small cylinders\nfor(side = [-1, 1]) {\n    translate([45, side * 22, 14])\n    rotate([90, 0, 0])\n    cylinder(h=44, r=2, $fn=8);\n    \n    translate([-45, side * 22, 14])\n    rotate([90, 0, 0])\n    cylinder(h=44, r=2, $fn=8);\n}",
    "renders": true
  },
  {
    "furniture": "settle",
    "openscad_code": "// Settle - a traditional wooden bench with high back and arms\n// Overall dimensions: 120mm wide x 50mm deep x 90mm high\n// Wall thickness: 2mm for 3D printing\n\nmodule settle() {\n    // Main seat frame\n    difference() {\n        // Solid seat block\n        translate([0, 0, 40])\n            cube([120, 50, 12], center=true);\n        \n        // Hollow out seat for printability\n        translate([0, 0, 42])\n            cube([116, 46, 10], center=true);\n    }\n    \n    // Backrest assembly\n    module backrest() {\n        // Main backrest panel\n        difference() {\n            translate([0, -22, 85])\n                cube([116, 6, 90], center=true);\n            // Hollow out backrest\n            translate([0, -22, 85])\n                cube([112, 2, 86], center=true);\n        }\n        \n        // Vertical slats for traditional look\n        for(i = [-40:20:40]) {\n            translate([i, -22, 85])\n                cube([8, 6, 86], center=true);\n        }\n    }\n    \n    // Left armrest\n    module armrest(side) {\n        // Armrest post\n        translate([side*57, -15, 65])\n            cube([6, 40, 50], center=true);\n        \n        // Armrest top\n        translate([side*57, 0, 88])\n            cube([10, 30, 4], center=true);\n    }\n    \n    // Legs\n    module leg(x, z) {\n        translate([x, z, 20])\n            cube([8, 8, 40], center=true);\n    }\n    \n    // Base stretchers\n    module stretcher() {\n        // Front stretcher\n        translate([0, 20, 5])\n            cube([110, 4, 8], center=true);\n        \n        // Back stretcher\n        translate([0, -20, 5])\n            cube([110, 4, 8], center=true);\n        \n        // Side stretchers\n        translate([57, 0, 5])\n            rotate([0, 0, 90])\n            cube([40, 4, 8], center=true);\n        \n        translate([-57, 0, 5])\n            rotate([0, 0, 90])\n            cube([40, 4, 8], center=true);\n    }\n    \n    // Assembly\n    backrest();\n    \n    armrest(1);  // Right arm\n    armrest(-1); // Left arm\n    \n    // Four legs\n    leg(50, 20);\n    leg(-50, 20);\n    leg(50, -20);\n    leg(-50, -20);\n    \n    stretcher();\n    \n    // Decorative panel on backrest top\n    translate([0, -22, 130])\n        cube([100, 6, 6], center=true);\n}\n\n// Create the settle\nsettle();",
    "renders": true
  },
  {
    "furniture": "pew",
    "openscad_code": "// Realistic Pew - Medium Complexity\n// Overall dimensions: 120mm L x 40mm W x 50mm H\n\n$fn = 50;  // Smooth curves\n\nmodule pew() {\n    // Main seat plank\n    translate([0, 0, 35])\n        cube([120, 40, 4], center = true);\n\n    // Backrest\n    translate([0, 15, 47])\n        cube([120, 4, 24], center = true);\n\n    // Backrest supports - vertical slats\n    for(i = [-50:25:50]) {\n        translate([i, 15, 47])\n            cube([6, 4, 24], center = true);\n    }\n\n    // Left side frame\n    translate([-60, 0, 25]) {\n        // Front leg\n        cube([4, 4, 35], center = true);\n        // Rear leg\n        translate([0, 30, 0])\n            cube([4, 4, 35], center = true);\n        // Top support\n        translate([0, 15, 12])\n            cube([4, 30, 4], center = true);\n        // Bottom stretcher\n        translate([0, 15, -12])\n            cube([4, 30, 4], center = true);\n    }\n\n    // Right side frame (mirrored)\n    mirror([1, 0, 0])\n        translate([-60, 0, 25]) {\n            // Front leg\n            cube([4, 4, 35], center = true);\n            // Rear leg\n            translate([0, 30, 0])\n                cube([4, 4, 35], center = true);\n            // Top support\n            translate([0, 15, 12])\n                cube([4, 30, 4], center = true);\n            // Bottom stretcher\n            translate([0, 15, -12])\n                cube([4, 30, 4], center = true);\n        }\n\n    // Center support beam\n    translate([0, 0, 17])\n        cube([120, 4, 4], center = true);\n\n    // Decorative end caps on legs\n    for(x = [-60, 60])\n        for(y = [-20, 20]) {\n            translate([x, y, 0])\n                cylinder(h = 4, r = 2, center = true);\n        }\n\n    // Armrests\n    translate([-60, 0, 42])\n        cube([4, 40, 4], center = true);\n    translate([60, 0, 42])\n        cube([4, 40, 4], center = true);\n}\n\n// Create the pew\npew();",
    "renders": true
  },
  {
    "furniture": "rocker",
    "openscad_code": "// Rocking chair for 3D printing\n// Overall height ≈ 70 mm, width ≈ 55 mm, depth ≈ 90 mm\n// Wall thickness ≈ 2 mm\n\n// General parameters\n$fn = 32;                       // Smooth curves\nwall = 2;                       // Standard wall thickness\n\n// Seat dimensions\nseat_w = 55;\nseat_d = 45;\nseat_h = 8;\n\n// Backrest dimensions\nback_h = 30;\nback_th = 4;\n\n// Rockers\nrocker_r = 25;\nrocker_w = seat_w + wall*2;\n\n// Leg height (measured vertically)\nleg_h = 25;\n\n// Helper: rounded cube for printable edges\nmodule roundedCube(size, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([r, r, size.z-r]) sphere(r);\n        translate([r, size.y-r, r]) sphere(r);\n        translate([r, size.y-r, size.z-r]) sphere(r);\n        translate([size.x-r, r, r]) sphere(r);\n        translate([size.x-r, r, size.z-r]) sphere(r);\n        translate([size.x-r, size.y-r, r]) sphere(r);\n        translate([size.x-r, size.y-r, size.z-r]) sphere(r);\n    }\n}\n\n// Seat shell\nmodule seat() {\n    difference() {\n        roundedCube([seat_w, seat_d, seat_h], 4);\n        translate([wall, wall, wall])\n            roundedCube([seat_w-wall*2, seat_d-wall*2, seat_h+1], 2);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    difference() {\n        union() {\n            // Frame\n            roundedCube([seat_w, wall, back_h], 2);\n            // Top bar\n            translate([0, wall, back_h-wall])\n                roundedCube([seat_w, back_th-wall, wall], 2);\n        }\n        // Hollow\n        translate([wall, wall*2, wall])\n            roundedCube([seat_w-wall*2, wall-1, back_h-wall*2], 1);\n    }\n    // Slats\n    for (z = [wall*2 : 5 : back_h-wall*3]) {\n        translate([wall, wall, z])\n            roundedCube([seat_w-wall*2, back_th-wall*2, wall], 1);\n    }\n}\n\n// Legs (vertical supports)\nmodule leg(x) {\n    translate([x, 0, 0])\n        roundedCube([wall, seat_d, leg_h], 2);\n}\n\n// Rockers (curved runners)\nmodule rocker() {\n    // Left rocker\n    translate([0, -wall, 0])\n        difference() {\n            hull() {\n                // Front arc\n                translate([rocker_r, wall, rocker_r])\n                    rotate([90,0,0])\n                        cylinder(h = wall, r = rocker_r);\n                // Rear arc\n                translate([rocker_r, 0, rocker_r])\n                    rotate([-90,0,0])\n                        cylinder(h = wall, r = rocker_r);\n            }\n            // Hollow\n            hull() {\n                translate([rocker_r, -1, rocker_r])\n                    rotate([90,0,0])\n                        cylinder(h = wall+2, r = rocker_r-wall);\n                translate([rocker_r, wall+1, rocker_r])\n                    rotate([-90,0,0])\n                        cylinder(h = wall+2, r = rocker_r-wall);\n            }\n        }\n    // Mirror for right rocker\n    translate([rocker_w, 0, 0])\n        mirror([1,0,0])\n            children();\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_h])\n        seat();\n\n    // Backrest\n    translate([0, wall, leg_h+seat_h])\n        backrest();\n\n    // Legs\n    leg(0);\n    leg(seat_w-wall);\n\n    // Rockers\n    translate([-rocker_r/2, 0, 0])\n        rocker();\n}",
    "renders": true
  },
  {
    "furniture": "swivel",
    "openscad_code": "// Swivel Bar Stool - Realistic Style, Medium Complexity\n// Overall height ~110 mm, seat diameter ~50 mm, 3D printable\n\n$fn = 36;  // Smooth curves\n\n// Parameters\nleg_d = 6;          // leg diameter\nleg_h = 45;         // leg height\nseat_d = 50;        // seat diameter\nseat_h = 6;         // seat thickness\nback_h = 35;        // backrest height\nback_w = 40;        // backrest width\nback_t = 3;         // backrest thickness\nswivel_r = 12;      // swivel base radius\nswivel_h = 8;       // swivel cylinder height\nbase_r = 25;        // footrest ring radius\nbase_t = 4;         // footrest ring thickness\npin_r = 3;          // central pivot pin radius\npin_h = 12;\n\n// Central pivot cylinder (metal pin)\nmodule pivot_pin() {\n    color(\"silver\")\n    cylinder(h = pin_h, r = pin_r);\n}\n\n// Swivel bearing disc\nmodule swivel_disc() {\n    difference() {\n        union() {\n            cylinder(h = swivel_h, r = swivel_r);\n            // Chamfered edge\n            translate([0, 0, swivel_h])\n            cylinder(h = 2, r1 = swivel_r, r2 = swivel_r - 2);\n        }\n        // Center hole for pin\n        cylinder(h = swivel_h + 1, r = pin_r + 1);\n    }\n}\n\n// Gas lift cylinder (simplified)\nmodule gas_lift() {\n    color(\"darkgray\")\n    cylinder(h = leg_h, r = leg_d/2);\n}\n\n// Five-star base with footrest ring\nmodule five_star_base() {\n    difference() {\n        union() {\n            // Central hub\n            cylinder(h = base_t, r = leg_d);\n            // Five legs\n            for (a = [0:72:359]) {\n                rotate([0, 0, a])\n                translate([leg_d, 0, 0])\n                cube([20, leg_d, base_t], center = true);\n            }\n            // Footrest ring\n            translate([0, 0, base_t/2])\n            rotate_extrude()\n            translate([base_r - base_t/2, 0, 0])\n            circle(r = base_t/2);\n        }\n        // Center hole\n        cylinder(h = base_t + 1, r = pin_r);\n    }\n}\n\n// Cushioned seat with slight dome\nmodule seat() {\n    union() {\n        // Base disc\n        color(\"beige\")\n        cylinder(h = seat_h, r = seat_d/2);\n        // Cushion dome\n        translate([0, 0, seat_h])\n        scale([1, 1, 0.4])\n        sphere(r = seat_d/2);\n    }\n}\n\n// Backrest with lumbar curve\nmodule backrest() {\n    color(\"beige\")\n    difference() {\n        // Main back panel\n        translate([0, -back_w/2, 0])\n        cube([back_h, back_w, back_t]);\n        // Lumbar curve cutout\n        translate([back_h/2, 0, -1])\n        rotate([0, 90, 0])\n        cylinder(h = back_w + 2, r = 20, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    translate([0, 0, 0])\n    five_star_base();\n\n    // Pivot pin through base\n    translate([0, 0, base_t])\n    pivot_pin();\n\n    // Swivel disc on pin\n    translate([0, 0, base_t + pin_h - swivel_h])\n    swivel_disc();\n\n    // Gas lift\n    translate([0, 0, base_t + pin_h])\n    gas_lift();\n\n    // Swivel disc on top\n    translate([0, 0, base_t + pin_h + leg_h - swivel_h])\n    swivel_disc();\n\n    // Seat attached to swivel via pin\n    translate([0, 0, base_t + pin_h + leg_h + swivel_h - seat_h])\n    seat();\n\n    // Backrest supports\n    color(\"silver\")\n    translate([seat_d/4, 0, base_t + pin_h + leg_h + swivel_h])\n    rotate([0, -10, 0])\n    cylinder(h = back_h, r = 2);\n\n    translate([-seat_d/4, 0, base_t + pin_h + leg_h + swivel_h])\n    rotate([0, 10, 0])\n    cylinder(h = back_h, r = 2);\n\n    // Backrest\n    translate([0, 0, base_t + pin_h + leg_h + swivel_h + back_h])\n    rotate([90, 0, 0])\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "lounge",
    "openscad_code": "// Lounge Chair - Realistic Style, Medium Complexity\n$fn = 50;\n\n// Overall dimensions (mm)\nchair_width = 80;\nchair_depth = 90;\nchair_height = 85;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule chair_frame() {\n    // Main frame base\n    difference() {\n        cube([chair_width, chair_depth, 6]);\n        translate([wall_thickness, wall_thickness, -1])\n            cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, 8]);\n    }\n    \n    // Front legs\n    for(x=[0, chair_width-6]) {\n        translate([x+3, 3, 0])\n            cylinder(h=chair_height-6, d=6);\n        translate([x+3, chair_depth-9, 0])\n            cylinder(h=chair_height-6, d=6);\n    }\n    \n    // Back legs (angled)\n    difference() {\n        translate([3, 3, chair_height-6]) {\n            rotate([0, -15, 0])\n                cube([6, chair_depth-6, 35]);\n        }\n        translate([3, 3, chair_height-6]) {\n            rotate([0, -15, 0])\n                translate([wall_thickness, wall_thickness, wall_thickness])\n                    cube([6-wall_thickness*2, chair_depth-6-wall_thickness*2, 35-wall_thickness]);\n        }\n    }\n    \n    mirror([chair_width-6, 0, 0]) {\n        difference() {\n            translate([3, 3, chair_height-6]) {\n                rotate([0, -15, 0])\n                    cube([6, chair_depth-6, 35]);\n            }\n            translate([3, 3, chair_height-6]) {\n                rotate([0, -15, 0])\n                    translate([wall_thickness, wall_thickness, wall_thickness])\n                        cube([6-wall_thickness*2, chair_depth-6-wall_thickness*2, 35-wall_thickness]);\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat\n    translate([wall_thickness, wall_thickness, 6]) {\n        difference() {\n            cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, 15]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([chair_width-wall_thickness*4, chair_depth-wall_thickness*4, 15]);\n        }\n    }\n    \n    // Cushion top with rounded edges\n    translate([wall_thickness, wall_thickness, 21]) {\n        minkowski() {\n            cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, 2]);\n            sphere(d=4);\n        }\n    }\n}\n\nmodule backrest() {\n    // Back support frame\n    translate([0, 3, chair_height-6]) {\n        rotate([0, -15, 0])\n            difference() {\n                cube([chair_width, 6, 35]);\n                translate([wall_thickness, wall_thickness, wall_thickness])\n                    cube([chair_width-wall_thickness*2, 6-wall_thickness*2, 35-wall_thickness]);\n            }\n    }\n    \n    // Backrest slats\n    for(i=[1:3]) {\n        translate([i*20, 3, chair_height-6+5]) {\n            rotate([0, -15, 0])\n                difference() {\n                    cube([15, 6, 20]);\n                    translate([wall_thickness, wall_thickness, wall_thickness])\n                        cube([15-wall_thickness*2, 6-wall_thickness*2, 20-wall_thickness]);\n                }\n        }\n    }\n    \n    // Back cushion\n    translate([wall_thickness, 9, chair_height-6+5]) {\n        rotate([0, -15, 0])\n            difference() {\n                cube([chair_width-wall_thickness*2, 15, 20]);\n                translate([wall_thickness, wall_thickness, wall_thickness])\n                    cube([chair_width-wall_thickness*4, 15-wall_thickness*2, 20-wall_thickness]);\n            }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-3, chair_depth-25, 35]) {\n        difference() {\n            cube([9, 20, 25]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([9-wall_thickness*2, 20-wall_thickness*2, 25-wall_thickness]);\n        }\n    }\n    \n    // Right armrest\n    translate([chair_width-6, chair_depth-25, 35]) {\n        difference() {\n            cube([9, 20, 25]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([9-wall_thickness*2, 20-wall_thickness*2, 25-wall_thickness]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_cushion();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "futon",
    "openscad_code": "// Futon model - medium complexity realistic style\n// Overall dimensions: 100mm wide x 50mm deep x 40mm high\n\nmodule futon_frame() {\n    // Main frame base\n    difference() {\n        // Outer frame\n        cube([100, 50, 4], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cube([96, 46, 5], center=true);\n    }\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([side * 48, 0, 0])\n            difference() {\n                cube([4, 50, 5], center=true);\n                translate([0, 0, -2])\n                    cube([3, 48, 6], center=true);\n            }\n    }\n    \n    // Back rail\n    translate([0, 23, 0])\n        difference() {\n            cube([100, 4, 5], center=true);\n            translate([0, 0, -2])\n                cube([96, 3, 6], center=true);\n        }\n    \n    // Front rail\n    translate([0, -23, 0])\n        difference() {\n            cube([100, 4, 5], center=true);\n            translate([0, 0, -2])\n                cube([96, 3, 6], center=true);\n        }\n}\n\nmodule futon_legs() {\n    // Four legs at corners\n    for(x = [-45, 45])\n        for(y = [-20, 20]) {\n            translate([x, y, -12])\n                cylinder(h=20, r=2.5, $fn=12);\n            translate([x, y, -12.5])\n                cube([5, 5, 1], center=true);\n        }\n}\n\nmodule futon_mattress() {\n    // Main mattress body\n    translate([0, 0, 4.5])\n        difference() {\n            cube([90, 45, 10], center=true);\n            translate([0, 0, -1])\n                cube([88, 43, 11], center=true);\n        }\n    \n    // Tufted buttons\n    for(x = [-30, 0, 30])\n        for(y = [-12, 0, 12]) {\n            translate([x, y, 10])\n                cylinder(h=1, r=2, $fn=8);\n            translate([x, y, 11])\n                sphere(r=2, $fn=8);\n        }\n}\n\nmodule futon_backrest() {\n    // Hinged backrest frame\n    translate([0, 20, 4])\n        rotate([105, 0, 0])\n        difference() {\n            cube([90, 4, 25], center=true);\n            translate([0, 0, -1])\n                cube([88, 3, 26], center=true);\n        }\n    \n    // Backrest cushion\n    translate([0, 22, 15])\n        rotate([105, 0, 0])\n        difference() {\n            cube([85, 20, 6], center=true);\n            translate([0, 0, -1])\n                cube([83, 18, 7], center=true);\n        }\n    \n    // Backrest support struts\n    for(x = [-35, -17.5, 0, 17.5, 35]) {\n        translate([x, 20, 2])\n            rotate([105, 0, 0])\n            difference() {\n                cube([3, 4, 15], center=true);\n                translate([0, 0, -1])\n                    cube([2, 3, 16], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    futon_frame();\n    futon_legs();\n    futon_mattress();\n    futon_backrest();\n}",
    "renders": true
  },
  {
    "furniture": "daybed",
    "openscad_code": "// Daybed - Medium complexity realistic style\n// 3D printable, 2mm wall thickness, 120mm length\n\n$fn = 30;\n\nmodule leg() {\n    // Corner leg with angled brace\n    difference() {\n        union() {\n            // Main leg post\n            cube([8, 8, 30]);\n            // Angled brace\n            translate([0, 0, 10])\n                rotate([45, 0, 0])\n                    cube([8, 8, 15]);\n        }\n        // Cable hole\n        translate([4, 4, 15])\n            rotate([0, 0, 0])\n                cylinder(h=8, r=2, center=true);\n    }\n}\n\nmodule backrest() {\n    // Slatted backrest\n    translate([-2, 0, 30])\n        cube([4, 114, 35]);\n}\n\nmodule slat() {\n    // Bed slat\n    cube([10, 2, 110]);\n}\n\nmodule cushion() {\n    // Main mattress cushion\n    translate([5, 5, 33])\n        cube([110, 100, 12]);\n    \n    // Back cushion\n    translate([5, 5, 45])\n        rotate([10, 0, 0])\n            cube([110, 30, 20]);\n}\n\nmodule side_panel() {\n    // Side panel with handle cutout\n    difference() {\n        translate([0, 0, 30])\n            cube([2, 110, 20]);\n        // Handle cutout\n        translate([1, 50, 40])\n            cube([4, 10, 5]);\n    }\n}\n\n// Base frame\ntranslate([0, 0, 0]) {\n    // Frame rails\n    translate([8, 8, 0])\n        cube([104, 4, 30]);\n    translate([8, 108, 0])\n        cube([104, 4, 30]);\n    translate([8, 8, 0])\n        cube([4, 104, 30]);\n    translate([108, 8, 0])\n        cube([4, 104, 30]);\n}\n\n// Legs\ntranslate([10, 10, 0]) leg();\ntranslate([110, 10, 0]) mirror([1, 0, 0]) leg();\ntranslate([10, 110, 0]) mirror([0, 1, 0]) leg();\ntranslate([110, 110, 0]) mirror([1, 1, 0]) leg();\n\n// Slatted base\nfor(i = [0:4]) {\n    translate([20 + i*20, 12, 30]) slat();\n}\n\n// Backrest\ntranslate([0, 0, 0]) backrest();\n\n// Side panels\ntranslate([0, 0, 0]) side_panel();\ntranslate([118, 0, 0]) mirror([1, 0, 0]) side_panel();\n\n// Cushions\ntranslate([0, 0, 0]) cushion();",
    "renders": true
  },
  {
    "furniture": "berge",
    "openscad_code": "// Bergere Armchair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm W x 75mm D x 90mm H\n\nmodule leg() {\n    // Front leg - turned style with simple rings\n    union() {\n        cylinder(h=45, d=8, $fn=16);\n        translate([0,0,5]) cylinder(h=3, d=10, $fn=16);\n        translate([0,0,15]) cylinder(h=3, d=10, $fn=16);\n        translate([0,0,25]) cylinder(h=3, d=10, $fn=16);\n        // Foot detail\n        translate([0,0,-2]) cylinder(h=2, d=10, $fn=16);\n    }\n}\n\nmodule back_leg() {\n    // Back leg with rearward rake\n    translate([0, -5, 0]) rotate([0,10,0]) leg();\n}\n\nmodule armrest() {\n    // Curved armrest with support\n    union() {\n        // Main arm piece\n        translate([-3,0,0]) cube([6, 55, 15]);\n        // Front support post\n        translate([0, 40, -20]) cylinder(h=25, d=6, $fn=12);\n        // Decorative curve detail\n        translate([0, 10, 15]) cylinder(h=30, d=8, $fn=16);\n    }\n}\n\nmodule seat_cushion() {\n    // Box cushion with piped edge\n    difference() {\n        // Main cushion\n        translate([0,0,1]) cube([64, 60, 12], center=true);\n        // Top surface rounding\n        translate([0,0,8]) cube([60, 56, 4], center=true);\n    }\n    // Piping detail\n    color(\"darkgray\") {\n        translate([0, -30, 7]) cube([64, 2, 2], center=true);\n        translate([0, 30, 7]) cube([64, 2, 2], center=true);\n        translate([-32, 0, 7]) cube([2, 60, 2], center=true);\n        translate([32, 0, 7]) cube([2, 60, 2], center=true);\n    }\n}\n\nmodule upholstered_back() {\n    // Wingback style backrest\n    union() {\n        // Main back panel\n        cube([70, 20, 55], center=true);\n        // Wings on sides\n        translate([-37, 0, 10]) rotate([0,15,0]) cube([10, 20, 50], center=true);\n        translate([37, 0, 10]) rotate([0,-15,0]) cube([10, 20, 50], center=true);\n        // Top curve\n        translate([0,0,25]) sphere(d=70, $fn=32);\n    }\n}\n\nmodule stretcher() {\n    // H-stretcher between legs\n    cube([40, 5, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    // Front legs\n    translate([-30, 25, 0]) leg();\n    translate([30, 25, 0]) leg();\n    \n    // Back legs\n    translate([-30, -25, 0]) back_leg();\n    translate([30, -25, 0]) back_leg();\n    \n    // Stretchers\n    translate([0, 25, 15]) stretcher();\n    translate([0, -25, 15]) stretcher();\n    translate([-30, 0, 15]) rotate([0,0,90]) stretcher();\n    translate([30, 0, 15]) rotate([0,0,90]) stretcher();\n    \n    // Seat frame\n    translate([0, 0, 45]) cube([68, 64, 4], center=true);\n    \n    // Seat cushion\n    translate([0, 0, 51]) seat_cushion();\n    \n    // Backrest\n    translate([0, -30, 75]) upholstered_back();\n    \n    // Armrests\n    translate([-35, 0, 60]) armrest();\n    translate([35, 0, 60]) mirror([1,0,0]) armrest();\n}",
    "renders": true
  },
  {
    "furniture": "squab",
    "openscad_code": "// Squab (bench-style settee) – printable 1:12 doll-house scale\n// Overall footprint ≈ 100 mm wide × 35 mm deep × 45 mm high\n// All walls ≥ 2 mm for FDM printing; no steep overhangs.\n\n$fn = 32;               // smooth curves\n\nmodule panel(w, h, d) {             // simple box panel\n    cube([w, d, h], center = true);\n}\n\n// --- Legs (tapered cylinder) ---\nmodule leg() {\n    translate([0, 0, 10])            // 20 mm high leg\n        cylinder(h1 = 20, h2 = 0, r1 = 3, r2 = 2, center = true);\n}\n\n// --- Leg frame ---\nmodule leg_frame() {\n    spacing = 84;                    // inner width between legs\n    depth   = 25;\n    union() {\n        // four legs\n        translate([ spacing/2,  depth/2, 0]) leg();\n        translate([-spacing/2,  depth/2, 0]) leg();\n        translate([ spacing/2, -depth/2, 0]) leg();\n        translate([-spacing/2, -depth/2, 0]) leg();\n        // front & back stretchers 2 mm thick\n        translate([0,  depth/2, -7]) cube([spacing + 10, 2, 4], center = true);\n        translate([0, -depth/2, -7]) cube([spacing + 10, 2, 4], center = true);\n        // side stretchers\n        translate([ spacing/2+3, 0, -7]) cube([2, depth + 4, 4], center = true);\n        translate([-spacing/2-3, 0, -7]) cube([2, depth + 4, 4], center = true);\n    }\n}\n\n// --- Seat base frame ---\nmodule seat_frame() {\n    union() {\n        // perimeter rail\n        hull() {\n            translate([50-2, 30-2, 0]) cylinder(h = 8, r = 1.5, center = true);\n            translate([50-2,-30+2, 0]) cylinder(h = 8, r = 1.5, center = true);\n            translate([-50+2, 30-2, 0]) cylinder(h = 8, r = 1.5, center = true);\n            translate([-50+2,-30+2, 0]) cylinder(h = 8, r = 1.5, center = true);\n        }\n        // slat supports\n        for(x = [-40:20:40]) {\n            translate([x, 0, 0])\n                cube([18, 26, 2], center = true);\n        }\n    }\n}\n\n// --- Cushions ---\nmodule cushion(w, d, h) {\n    difference() {\n        // main pillow\n        minkowski() {\n            cube([w, d, h], center = true);\n            sphere(1.5);\n        }\n        // subtle top seam\n        translate([0, 0, h/2+0.5])\n            cube([w-4, d-4, 1], center = true);\n    }\n}\n\n// --- Backrest ---\nmodule backrest() {\n    translate([0, 30-4, 20])\n        difference() {\n            cube([100-4, 8, 30], center = true);\n            // cut-outs for style\n            for(i = [-1:1])\n                translate([i*25, 0, 0])\n                    cube([12, 10, 25], center = true);\n        }\n}\n\n// --- Assembly ---\nunion() {\n    leg_frame();\n    translate([0, 0, 10]) seat_frame();\n    translate([0, 0, 18]) cushion(95, 30, 8);\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "tabouret",
    "openscad_code": "// Realistic Tabouret (Bar Stool)\n// Overall height 120 mm, seat Ø 100 mm, printable as a single piece.\n\n/* ---------- PARAMETERS ---------- */\nseat_dia   = 100;   // mm\nseat_thick =  8;\nleg_taper  =  3;    // mm per side\nleg_thick  =  4;    // wall thickness\nleg_top    = 12;    // side length at top\nleg_bot    = leg_top - 2*leg_taper;\nleg_len    = 100 - seat_thick;\nring_h     = 10;\nring_dia   = 70;\nfoot_r     =  5;\n\n/* ---------- MODULES ---------- */\nmodule leg() {\n    linear_extrude(height = leg_len, scale = leg_bot/leg_top, center = false)\n        square([leg_top, leg_top], center = true);\n}\n\nmodule seat() {\n    difference() {\n        cylinder(h = seat_thick, d = seat_dia, $fn = 48);\n        // slight concave top for comfort\n        translate([0, 0, seat_thick - 2])\n            cylinder(h = 4, d1 = seat_dia*0.9, d2 = seat_dia, $fn = 48);\n    }\n}\n\nmodule stretcher_ring() {\n    difference() {\n        cylinder(h = ring_h, d = ring_dia + 2*leg_thick, $fn = 48);\n        cylinder(h = ring_h + 0.1, d = ring_dia, $fn = 48);\n    }\n}\n\nmodule foot() {\n    translate([0, 0, leg_len])\n        cylinder(h = foot_r*2, r = foot_r, $fn = 16);\n}\n\n/* ---------- MAIN ASSEMBLY ---------- */\nunion() {\n    // Seat\n    seat();\n\n    // Four legs positioned at 45°\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([0, seat_dia/2 - leg_top/2 - 3, seat_thick])\n                leg();\n    }\n\n    // Foot rings\n    translate([0, 0, seat_thick + leg_len/2 - ring_h/2])\n        stretcher_ring();\n\n    // Tiny feet for better bed adhesion\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([0, seat_dia/2 - leg_top/2 - 3, 0])\n                foot();\n    }\n}",
    "renders": true
  },
  {
    "furniture": "taboret",
    "openscad_code": "// Realistic Taboret (Artist's Stool)\n// Overall footprint: 60 x 60 mm, height 90 mm\n// 3 mm wall thickness everywhere for easy printing\n\n$fn = 36;\n\nmodule leg() {\n    // Single turned-wood style leg\n    union() {\n        // Top cylinder\n        cylinder(h = 10, d = 8);\n        // Middle taper\n        translate([0,0,10])\n            cylinder(h1 = 5, h2 = 25, r1 = 4, r2 = 3);\n        // Bottom cylinder\n        translate([0,0,35])\n            cylinder(h = 55, d = 6);\n    }\n}\n\nmodule stretcher() {\n    // Side-to-side stretcher between legs\n    cube([52, 6, 6], center = true);\n}\n\nmodule seat() {\n    // Padded seat cushion on top of the base\n    difference() {\n        // Main cushion\n        translate([0,0,90])\n            cylinder(h = 10, d = 60);\n        // Chamfer underside\n        translate([0,0,90])\n            cylinder(h1 = 2, h2 = 0, r1 = 28, r2 = 26);\n    }\n    \n    // Wooden seat base under cushion\n    translate([0,0,80])\n        cube([55, 55, 10], center = true);\n}\n\nmodule drawer() {\n    // Small drawer under seat\n    difference() {\n        // Drawer front\n        translate([0,-27.5,65])\n            cube([50, 3, 20], center = true);\n        // Recessed handle\n        translate([0,-26,75])\n            cube([20, 3, 5], center = true);\n    }\n    // Drawer body\n    translate([0,-20,65])\n        cube([45, 14, 15], center = true);\n}\n\n// Assemble the taboret\nunion() {\n    // Seat and cushion\n    seat();\n    \n    // Drawer\n    drawer();\n    \n    // Four legs at corners\n    translate([25, 25, 0]) leg();\n    translate([-25, 25, 0]) leg();\n    translate([25, -25, 0]) leg();\n    translate([-25, -25, 0]) leg();\n    \n    // Lower stretchers\n    translate([0, 25, 20]) stretcher();\n    translate([0, -25, 20]) stretcher();\n    translate([25, 0, 20]) rotate([0,0,90]) stretcher();\n    translate([-25, 0, 20]) rotate([0,0,90]) stretcher();\n    \n    // Mid stretchers\n    translate([0, 25, 40]) stretcher();\n    translate([0, -25, 40]) stretcher();\n    translate([25, 0, 40]) rotate([0,0,90]) stretcher();\n    translate([-25, 0, 40]) rotate([0,0,90]) stretcher();\n}",
    "renders": true
  },
  {
    "furniture": "banquette",
    "openscad_code": "// Realistic Banquette - Medium Complexity\n// Dimensions: 120mm L x 50mm W x 55mm H\n\n$fn = 30;\n\nmodule banquette() {\n    // Base frame structure\n    difference() {\n        // Main body\n        cube([120, 50, 45], center = true);\n        \n        // Hollow interior for 3D printing\n        translate([0, 0, 2])\n        cube([116, 46, 41], center = true);\n    }\n    \n    // Front face detail panel\n    translate([0, 25, 0])\n    cube([118, 2, 43], center = true);\n    \n    // Backrest frame\n    translate([0, -20, 25])\n    difference() {\n        cube([118, 10, 30], center = true);\n        translate([0, 2, 0])\n        cube([114, 6, 26], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 25])\n    difference() {\n        // Main cushion\n        cube([116, 48, 8], center = true);\n        \n        // Cushion top rounding\n        translate([0, 0, 4])\n        scale([1, 1, 0.3])\n        sphere(d = 8);\n        \n        // Hollow interior for printing\n        translate([0, 0, -1])\n        cube([112, 44, 6], center = true);\n    }\n    \n    // Back cushion\n    translate([0, -15, 38])\n    rotate([15, 0, 0])\n    difference() {\n        // Main back cushion\n        cube([114, 8, 20], center = true);\n        \n        // Contour details\n        translate([0, 0, 3])\n        cube([110, 4, 14], center = true);\n    }\n    \n    // Support legs\n    module leg(x, y) {\n        translate([x, y, -25])\n        difference() {\n            // Main leg\n            cube([6, 6, 50], center = true);\n            \n            // Hollow for printing\n            translate([0, 0, 0])\n            cube([2, 2, 50], center = true);\n        }\n    }\n    \n    // Front legs\n    leg(55, 20);\n    leg(-55, 20);\n    \n    // Back support blocks\n    translate([55, -20, -25])\n    cube([6, 6, 50], center = true);\n    translate([-55, -20, -25])\n    cube([6, 6, 50], center = true);\n    \n    // Decorative buttons on cushions\n    module button(x, y, z) {\n        translate([x, y, z])\n        difference() {\n            cylinder(h = 2, d = 4, center = true);\n            translate([0, 0, 0.5])\n            cylinder(h = 2, d = 2, center = true);\n        }\n    }\n    \n    // Seat buttons\n    for (i = [-40:40:40]) {\n        button(i, 0, 29);\n    }\n    \n    // Back buttons\n    for (i = [-40:40:40]) {\n        button(i, -15, 42);\n    }\n    \n    // Side armrest details\n    translate([58, 0, 15])\n    difference() {\n        cube([4, 46, 20], center = true);\n        translate([0, 0, -5])\n        cube([2, 42, 10], center = true);\n    }\n    \n    translate([-58, 0, 15])\n    difference() {\n        cube([4, 46, 20], center = true);\n        translate([0, 0, -5])\n        cube([2, 42, 10], center = true);\n    }\n}\n\nbanquette();",
    "renders": true
  },
  {
    "furniture": "tuffet",
    "openscad_code": "// Realistic Tuffet (medium complexity, 3D-printable)\n// Overall size: ~90 mm diameter × 55 mm tall\n\n$fn = 32; // smooth curves\n\n// Parameters\nseat_d = 80;          // cushion diameter\nseat_h = 30;          // cushion thickness\nleg_d = 8;            // leg diameter\nleg_h = 25;           // leg height\nskirt_t = 2;          // skirt thickness\nskirt_h = 10;         // skirt height\nbutton_d = 6;         // tufted button diameter\nwall = 2;             // uniform wall thickness for printing\n\nmodule tuffet() {\n    union() {\n        // Tufted seat cushion\n        difference() {\n            // Main cushion body\n            cylinder(h = seat_h, d = seat_d);\n            \n            // Top face inset for fabric effect\n            translate([0, 0, seat_h - 1])\n                cylinder(h = 2, d = seat_d - 6);\n        }\n        \n        // Tufted buttons (4-fold symmetry)\n        for (a = [0 : 90 : 270]) {\n            rotate([0, 0, a])\n                translate([seat_d / 2 * 0.5, seat_d / 2 * 0.5, seat_h - 0.5])\n                    cylinder(h = 2, d = button_d);\n        }\n        \n        // Structural skirt / apron (hollow to save material)\n        difference() {\n            cylinder(h = skirt_h, d = seat_d);\n            translate([0, 0, -0.5])\n                cylinder(h = skirt_h + 1, d = seat_d - 2 * skirt_t);\n        }\n        translate([0, 0, -leg_h])\n            cylinder(h = leg_h, d = seat_d - 2 * skirt_t);\n        \n        // Four round legs\n        for (a = [45 : 90 : 315]) {\n            rotate([0, 0, a])\n                translate([seat_d / 2 * 0.65, 0, -leg_h])\n                    cylinder(h = leg_h, d = leg_d);\n        }\n        \n        // Reinforcement ring between legs (printable without supports)\n        translate([0, 0, -leg_h / 2])\n            difference() {\n                cylinder(h = wall, d = seat_d * 0.8);\n                cylinder(h = wall + 0.2, d = seat_d * 0.8 - 2 * wall);\n            }\n    }\n}\n\n// Render the tuffet centered on the build plate\ntranslate([0, 0, leg_h])\n    tuffet();",
    "renders": true
  },
  {
    "furniture": "hassock",
    "openscad_code": "// Hassock / Ottoman with tufted cushion and four legs\n// Overall dimensions: 100mm diameter, 60mm height\n// Wall thickness: 2mm for 3D printability\n\n// Main parameters\n$fn = 48; // Smooth curves\nleg_height = 25;\nleg_width = 15;\nbody_height = 35;\nbody_radius = 48;\ncushion_height = 15;\ntuft_depth = 3;\ntuft_radius = 8;\nleg_taper = 0.8;\n\n// Cushion module with tufted top\nmodule tufted_cushion() {\n    difference() {\n        // Main cushion body\n        cylinder(h = cushion_height, r1 = body_radius, r2 = body_radius - 3);\n        \n        // Tufted dimples\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                translate([i * 25, j * 25, cushion_height - tuft_depth]) {\n                    sphere(r = tuft_radius);\n                }\n            }\n        }\n    }\n}\n\n// Tapered leg module\nmodule leg() {\n    linear_extrude(height = leg_height, scale = leg_taper) {\n        square([leg_width, leg_width], center = true);\n    }\n}\n\n// Body with hollow center\nmodule hassock_body() {\n    difference() {\n        cylinder(h = body_height, r = body_radius);\n        \n        // Hollow interior\n        translate([0, 0, -1]) {\n            cylinder(h = body_height + 2, r = body_radius - 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    hassock_body();\n    \n    // Cushion on top\n    translate([0, 0, body_height]) {\n        tufted_cushion();\n    }\n    \n    // Four legs at corners\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * 32, y * 32, 0]) {\n                leg();\n            }\n        }\n    }\n    \n    // Decorative band around body\n    translate([0, 0, body_height - 5]) {\n        difference() {\n            cylinder(h = 5, r = body_radius + 1);\n            cylinder(h = 7, r = body_radius - 1);\n        }\n    }\n}",
    "renders": true
  },
  {
    "furniture": "pouf",
    "openscad_code": "// Realistic Pouf - Medium Complexity\n// Dimensions: 80mm diameter, 120mm height (suitable for 3D printing)\n\n$fn = 36;  // Smooth curves for realistic appearance\nwall_thickness = 2;  // Proper wall thickness for 3D printing\n\nmodule pouf_base() {\n    // Main cylindrical body with rounded top\n    difference() {\n        // Outer shape - rounded cylinder\n        union() {\n            cylinder(h=100, d=80, center=false);\n            // Rounded top\n            translate([0, 0, 100])\n                scale([1, 1, 0.5])\n                    sphere(d=80);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=102, d=80 - 2*wall_thickness, center=false);\n    }\n}\n\nmodule cushion_detail() {\n    // Top cushion with tufted buttons\n    translate([0, 0, 100]) {\n        // Cushion layer\n        difference() {\n            cylinder(h=15, d=82, center=true);\n            translate([0, 0, -9])\n                cylinder(h=20, d=80, center=true);\n        }\n        \n        // Tufted buttons\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i * 25, j * 25, 107.5])\n                    cylinder(h=3, d=8);\n            }\n        }\n    }\n}\n\nmodule legs_support() {\n    // Hidden support structure inside\n    translate([0, 0, 0]) {\n        // Central support column\n        cylinder(h=20, d=20);\n        \n        // Radial supports for stability\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n                translate([20, 0, 10])\n                    cube([30, wall_thickness, 20], center=true);\n        }\n    }\n}\n\nmodule seam_details() {\n    // Decorative seam lines around the body\n    for(z = [20:20:100]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=1, d=81);\n                cylinder(h=2, d=79);\n            }\n    }\n}\n\nmodule bottom_details() {\n    // Bottom reinforcement ring\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=5, d=82);\n            cylinder(h=6, d=78);\n        }\n    }\n    \n    // Small feet indentations\n    for(angle = [45:90:315]) {\n        rotate([0, 0, angle])\n            translate([30, 0, 0])\n                difference() {\n                    cylinder(h=5, d=10);\n                    cylinder(h=6, d=6);\n                }\n    }\n}\n\n// Assemble the pouf\nunion() {\n    pouf_base();\n    cushion_detail();\n    legs_support();\n    seam_details();\n    bottom_details();\n}",
    "renders": true
  },
  {
    "furniture": "cushion",
    "openscad_code": "// Realistic cushion furniture - medium complexity\n// Dimensions: 80mm x 80mm x 30mm\n\nmodule rounded_cube(size, radius, center=false) {\n    // Create a rounded cube for cushion appearance\n    translate(center ? [-size.x/2, -size.y/2, -size.z/2] : [0, 0, 0]) {\n        hull() {\n            // Corner spheres\n            for (x = [0, size.x], y = [0, size.y], z = [0, size.z]) {\n                translate([x, y, z]) \n                    sphere(r=radius, $fn=12);\n            }\n        }\n    }\n}\n\nmodule tufted_button(pos, depth) {\n    // Create a tufted button detail\n    translate(pos) {\n        difference() {\n            cylinder(h=2, r=2.5, $fn=16);\n            translate([0, 0, 0.5]) \n                cylinder(h=2, r=1.5, $fn=16);\n        }\n    }\n}\n\nmodule seam_line(start, end, width=1, height=0.5) {\n    // Create a raised seam line between points\n    dx = end.x - start.x;\n    dy = end.y - start.y;\n    length = sqrt(dx*dx + dy*dy);\n    angle = atan2(dy, dx);\n    \n    translate(start) \n        rotate([0, 0, angle]) \n            translate([0, -width/2, 0]) \n                cube([length, width, height]);\n}\n\nmodule cushion_main() {\n    // Main cushion body with rounded edges\n    difference() {\n        // Base cushion\n        rounded_cube([80, 80, 30], 8, true);\n        \n        // Slight indentation on top surface\n        translate([0, 0, 14]) \n            scale([0.9, 0.9, 1]) \n                rounded_cube([80, 80, 4], 6, true);\n    }\n}\n\nmodule cushion_details() {\n    // Add tufted buttons in 3x3 grid pattern\n    for (x = [-25, 0, 25]) {\n        for (y = [-25, 0, 25]) {\n            tufted_button([x, y, 14.5], 2);\n        }\n    }\n    \n    // Add seam lines around the edges\n    seam_line([-35, -40, 15], [35, -40, 15]);\n    seam_line([35, -40, 15], [40, -35, 15]);\n    seam_line([40, -35, 15], [40, 35, 15]);\n    seam_line([40, 35, 15], [35, 40, 15]);\n    seam_line([35, 40, 15], [-35, 40, 15]);\n    seam_line([-35, 40, 15], [-40, 35, 15]);\n    seam_line([-40, 35, 15], [-40, -35, 15]);\n    seam_line([-40, -35, 15], [-35, -40, 15]);\n    \n    // Vertical seam lines\n    seam_line([0, -40, 15], [0, 40, 15]);\n    seam_line([-40, 0, 15], [40, 0, 15]);\n}\n\nmodule zipper_panel() {\n    // Create a zipper panel at the back\n    translate([0, 39.5, -10]) {\n        difference() {\n            // Panel base\n            cube([60, 2, 15], center=true);\n            \n            // Zipper teeth\n            for (x = [-25:5:25]) {\n                translate([x, 0, 0]) \n                    cube([2, 2.5, 15], center=true);\n            }\n            \n            // Zipper pull\n            translate([0, 2, 7]) \n                rotate([90, 0, 0]) \n                    cylinder(h=5, r=2, $fn=8);\n        }\n    }\n}\n\nmodule corner_reinforcements() {\n    // Add subtle corner reinforcements\n    for (x = [-35, 35]) {\n        for (y = [-35, 35]) {\n            translate([x, y, -13]) {\n                difference() {\n                    cylinder(h=5, r=4, $fn=12);\n                    cylinder(h=6, r=2, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    cushion_main();\n    cushion_details();\n    zipper_panel();\n    corner_reinforcements();\n}",
    "renders": true
  },
  {
    "furniture": "perch",
    "openscad_code": "// Bird Perch Furniture - Realistic Style, Medium Complexity\n// Dimensions in mm, wall thickness 2mm for 3D printing\n\n// Main parameters\nperch_length = 120;\nperch_diameter = 12;\nbase_width = 80;\nbase_depth = 60;\nbase_height = 15;\npost_height = 100;\npost_diameter = 16;\n\n// Base with rounded edges\nmodule base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            minkowski() {\n                cube([base_width-4, base_depth-4, base_height-2], center=true);\n                sphere(2);\n            }\n        \n        // Hollow base for weight reduction\n        translate([0, 0, 3])\n            cube([base_width-8, base_depth-8, base_height], center=true);\n    }\n}\n\n// Decorative post with fluting\nmodule post() {\n    union() {\n        // Main post\n        translate([0, 0, post_height/2 + base_height])\n            cylinder(h=post_height, d=post_diameter, $fn=32);\n        \n        // Decorative rings\n        for(i = [1:3]) {\n            translate([0, 0, i*post_height/4 + base_height])\n                cylinder(h=3, d1=post_diameter+2, d2=post_diameter+4, $fn=32);\n        }\n    }\n}\n\n// Perch bar with grooves for grip\nmodule perch() {\n    difference() {\n        // Main perch\n        translate([0, 0, post_height + base_height + perch_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=perch_length, d=perch_diameter, $fn=32);\n        \n        // Grip grooves\n        for(i = [-perch_length/2+10 : 10 : perch_length/2-10]) {\n            translate([i, 0, post_height + base_height])\n                rotate([90, 0, 0])\n                    cylinder(h=perch_diameter+2, d=perch_diameter-2, $fn=32);\n        }\n    }\n}\n\n// Support brackets for perch\nmodule supports() {\n    for(side = [-1, 1]) {\n        translate([side*perch_length/3, 0, post_height/2 + base_height + perch_diameter/2]) {\n            rotate([0, 30*side, 0])\n                cube([20, 4, 4], center=true);\n            rotate([0, 60*side, 0])\n                cube([15, 4, 4], center=true);\n        }\n    }\n}\n\n// Food/water dishes\nmodule dishes() {\n    for(side = [-1, 1]) {\n        translate([side*perch_length/2 + side*10, 0, post_height + base_height - 5]) {\n            difference() {\n                // Dish base\n                cylinder(h=5, d=20, $fn=32);\n                // Hollow dish\n                translate([0, 0, 2])\n                    cylinder(h=4, d=16, $fn=32);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    post();\n    perch();\n    supports();\n    dishes();\n}",
    "renders": true
  },
  {
    "furniture": "seat",
    "openscad_code": "// Modern armchair with thin walls, 3D-printable\n// Overall size ~100 mm wide, printable in one piece\n\n// Parameters\nwall = 2;               // wall thickness for 3D printing\nscale_fac = 1;          // global scale (leave at 1 for 100 mm width)\n\n// Main seat assembly\nmodule chair() {\n    // Cushion (hollow box)\n    difference() {\n        translate([0, 0, 20]) cube([60, 60, 12], center = true);\n        translate([0, 0, 21]) cube([56, 56, 12], center = true);\n    }\n\n    // Seat frame\n    difference() {\n        translate([0, 0, 8]) cube([64, 64, 24], center = true);\n        translate([0, 0, 10]) cube([60, 60, 22], center = true);\n    }\n\n    // Backrest uprights (legs extend up)\n    for (x = [-28, 28]) {\n        difference() {\n            translate([x, 0, 40])\n                rotate([90, 0, 0])\n                    cylinder(h = 40, d = 8, center = true);\n            translate([x, 0, 40])\n                rotate([90, 0, 0])\n                    cylinder(h = 40, d = 4, center = true);\n        }\n    }\n\n    // Backrest panel (hollow)\n    difference() {\n        translate([0, -30, 40]) cube([60, 4, 40], center = true);\n        translate([0, -30, 40]) cube([56, 4, 36], center = true);\n    }\n\n    // Backrest top rail\n    difference() {\n        translate([0, -30, 60]) cube([64, 4, 8], center = true);\n        translate([0, -30, 60]) cube([60, 4, 4], center = true);\n    }\n\n    // Front legs\n    for (x = [-26, 26]) {\n        difference() {\n            translate([x, 26, 10])\n                rotate([0, 0, 0])\n                    cylinder(h = 20, d = 8, center = true);\n            translate([x, 26, 10])\n                rotate([0, 0, 0])\n                    cylinder(h = 20, d = 4, center = true);\n        }\n    }\n\n    // Rear legs (continue from backrest)\n    for (x = [-26, 26]) {\n        difference() {\n            translate([x, -26, 10])\n                rotate([0, 0, 0])\n                    cylinder(h = 20, d = 8, center = true);\n            translate([x, -26, 10])\n                rotate([0, 0, 0])\n                    cylinder(h = 20, d = 4, center = true);\n        }\n    }\n\n    // Side stretchers (front-back)\n    for (y = [-26, 26]) {\n        difference() {\n            translate([0, y, 10])\n                rotate([90, 0, 90])\n                    cylinder(h = 52, d = 6, center = true);\n            translate([0, y, 10])\n                rotate([90, 0, 90])\n                    cylinder(h = 52, d = 2, center = true);\n        }\n    }\n\n    // Front stretcher\n    difference() {\n        translate([0, 30, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d = 6, center = true);\n        translate([0, 30, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d = 2, center = true);\n    }\n\n    // Back stretcher\n    difference() {\n        translate([0, -30, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d = 6, center = true);\n        translate([0, -30, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d = 2, center = true);\n    }\n\n    // Armrest supports\n    for (x = [-30, 30]) {\n        difference() {\n            translate([x, 15, 35])\n                rotate([0, 15, 0])\n                    cylinder(h = 22, d = 6, center = true);\n            translate([x, 15, 35])\n                rotate([0, 15, 0])\n                    cylinder(h = 22, d = 2, center = true);\n        }\n    }\n\n    // Armrest tops\n    difference() {\n        translate([-30, 15, 38]) cube([8, 30, 4], center = true);\n        translate([-30, 15, 38]) cube([4, 26, 4], center = true);\n    }\n    difference() {\n        translate([30, 15, 38]) cube([8, 30, 4], center = true);\n        translate([30, 15, 38]) cube([4, 26, 4], center = true);\n    }\n}\n\n// Render\nscale(scale_fac) chair();",
    "renders": true
  },
  {
    "furniture": "saddle",
    "openscad_code": "// Saddle Furniture - Realistic Medium Complexity\n// Overall dimensions: 120mm x 80mm x 40mm\n\nseat_thickness = 4;\nwall_thickness = 2;\nleg_diameter = 6;\nleg_height = 25;\n\nmodule saddle_seat() {\n    // Main seat base\n    difference() {\n        // Curved seat platform\n        hull() {\n            translate([-50, -35, 0])\n                scale([1, 0.8, 0.5])\n                sphere(d=40);\n            translate([50, -35, 0])\n                scale([1, 0.8, 0.5])\n                sphere(d=40);\n            translate([0, 35, 0])\n                scale([1, 0.8, 0.5])\n                sphere(d=40);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -1])\n            scale([0.9, 0.9, 1])\n            hull() {\n                translate([-45, -30, 0])\n                    scale([1, 0.8, 0.5])\n                    sphere(d=40);\n                translate([45, -30, 0])\n                    scale([1, 0.8, 0.5])\n                    sphere(d=40);\n                translate([0, 30, 0])\n                    scale([1, 0.8, 0.5])\n                    sphere(d=40);\n            }\n    }\n}\n\nmodule saddle_back() {\n    // High backrest\n    difference() {\n        union() {\n            // Main back panel\n            translate([0, 40, 30])\n                rotate([90, 0, 0])\n                scale([1.2, 1, 0.3])\n                cylinder(h=60, d=80, $fn=8);\n                \n            // Support ribs\n            for(x = [-30, 0, 30]) {\n                translate([x, 40, 15])\n                    rotate([90, 0, 0])\n                    scale([0.1, 1, 1])\n                    cylinder(h=30, d=20, $fn=4);\n            }\n        }\n        \n        // Hollow backrest\n        translate([0, 40, 30])\n            rotate([90, 0, 0])\n            scale([1.1, 0.9, 0.35])\n            cylinder(h=60, d=75, $fn=8);\n    }\n}\n\nmodule saddle_legs() {\n    // Four support legs with cross-bracing\n    positions = [[-40, -30], [40, -30], [-40, 30], [40, 30]];\n    \n    // Legs\n    for(pos = positions) {\n        translate([pos[0], pos[1], -leg_height/2])\n            cylinder(h=leg_height, d=leg_diameter, $fn=8);\n    }\n    \n    // Cross braces between legs\n    translate([0, -30, -leg_height+2])\n        cube([80-wall_thickness, wall_thickness, leg_diameter], center=true);\n    translate([0, 30, -leg_height+2])\n        cube([80-wall_thickness, wall_thickness, leg_diameter], center=true);\n    translate([-40, 0, -leg_height+2])\n        rotate([0, 0, 90])\n        cube([60-wall_thickness, wall_thickness, leg_diameter], center=true);\n    translate([40, 0, -leg_height+2])\n        rotate([0, 0, 90])\n        cube([60-wall_thickness, wall_thickness, leg_diameter], center=true);\n}\n\nmodule saddle_details() {\n    // Edge piping around seat\n    difference() {\n        translate([0, 0, seat_thickness/2])\n            scale([1.05, 1.05, 1])\n            saddle_seat();\n        translate([0, 0, -1])\n            scale([1, 1, 2])\n            saddle_seat();\n    }\n    \n    // Upholstery buttons\n    button_positions = [[0, 0], [-30, -20], [30, -20], [-20, 20], [20, 20]];\n    for(pos = button_positions) {\n        translate([pos[0], pos[1], seat_thickness+2])\n            sphere(d=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    saddle_seat();\n    saddle_back();\n    saddle_legs();\n    saddle_details();\n}",
    "renders": true
  },
  {
    "furniture": "ottomane",
    "openscad_code": "// Ottoman - Realistic Style, Medium Complexity\n// Dimensions: 80x80x45mm (prints in ~2 hours)\n\n$fn = 48;           // Smooth curves\nwall = 2;           // 2mm wall thickness for printing\n\n// Main parameters\nleg_h = 25;         // Leg height\ncushion_h = 20;     // Cushion thickness\nframe_t = 5;        // Frame thickness\nbutton_d = 4;       // Tufted button diameter\n\n// Base frame module\nmodule frame_base() {\n    difference() {\n        // Outer frame\n        cube([80, 80, 5], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([76, 76, 7], center=true);\n    }\n}\n\n// Leg module with taper\nmodule leg() {\n    // Leg body\n    cylinder(h=leg_h, r1=4, r2=3);\n    \n    // Leg foot detail\n    translate([0, 0, leg_h])\n        cylinder(h=2, r1=3.5, r2=4);\n}\n\n// Cushion with tufting\nmodule cushion() {\n    difference() {\n        // Main cushion body\n        translate([0, 0, cushion_h/2 + 5])\n            minkowski() {\n                cube([76, 76, cushion_h], center=true);\n                sphere(2);\n            }\n        \n        // Tufted buttons (grid pattern)\n        for(x=[-25, 0, 25])\n            for(y=[-25, 0, 25])\n                translate([x, y, cushion_h + 5])\n                    cylinder(h=button_d+2, r=button_d/2, center=true);\n    }\n}\n\n// Side panel with seam detail\nmodule side_panel(length) {\n    difference() {\n        // Panel\n        cube([length, frame_t, 20]);\n        \n        // Seam groove\n        translate([0, -1, 10])\n            cube([length, 3, 1]);\n    }\n}\n\n// Complete ottoman assembly\nunion() {\n    // Base frame\n    frame_base();\n    \n    // Four legs at corners\n    for(x=[-35, 35])\n        for(y=[-35, 35])\n            translate([x, y, -leg_h/2 - 2.5])\n                leg();\n    \n    // Side panels\n    for(side=[0, 90, 180, 270])\n        rotate([0, 0, side])\n            translate([-40, -2.5, 2.5])\n                side_panel(80);\n    \n    // Top cushion\n    cushion();\n    \n    // Corner brackets for realism\n    for(x=[-35, 35])\n        for(y=[-35, 35])\n            translate([x, y, 2.5])\n                cube([8, 8, 5], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "sillon",
    "openscad_code": "// Sillon (arm-chair) – realistic style, medium complexity, 3D-printable\n// Overall printable size ≈ 90 mm (height) × 60 mm (seat depth) × 50 mm (seat width)\n\n$fn = 32;               // smooth curves\nwall = 2;               // 2 mm printable wall thickness\n\n/* ---------- overall dimensions ---------- */\nseat_w  = 50;\nseat_d  = 60;\nseat_h  = 40;           // seat top to floor\nback_h  = 45;           // seat top to top of backrest\narm_h   = 20;           // armrest height above seat\nleg_h   = seat_h - wall;\nleg_sz  = 6;\n\n/* ---------- seat cushion ---------- */\nmodule seat_cushion() {\n    difference() {\n        translate([0, 0, seat_h + wall/2])\n            cube([seat_w, seat_d, 10], center = true);\n        translate([0, 0, seat_h + wall/2 + 2])\n            cube([seat_w - 2*wall, seat_d - 2*wall, 8], center = true);\n    }\n}\n\n/* ---------- backrest ---------- */\nmodule backrest() {\n    difference() {\n        translate([0, -seat_d/2 + wall/2, seat_h + back_h/2])\n            cube([seat_w, wall, back_h], center = true);\n        translate([0, -seat_d/2 - 1, seat_h + back_h/2])\n            cube([seat_w - 2*wall, wall + 2, back_h - 2*wall], center = true);\n    }\n}\n\n/* ---------- armrests ---------- */\nmodule armrest(side) {      // side = 1 or -1\n    translate([side * (seat_w/2 + wall/2), 0, seat_h + arm_h/2])\n        cube([wall, seat_d*0.7, arm_h], center = true);\n}\n\n/* ---------- legs ---------- */\nmodule leg(x, y) {\n    translate([x, y, leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n}\n\n/* ---------- stretchers for stability ---------- */\nmodule stretcher(x1, y1, x2, y2) {\n    length = norm([x2-x1, y2-y1]);\n    angle  = atan2(y2-y1, x2-x1);\n    translate([(x1+x2)/2, (y1+y2)/2, leg_h/4])\n        rotate([0, 0, angle])\n            cube([length, wall, wall], center = true);\n}\n\n/* ---------- assembly ---------- */\nunion() {\n    seat_cushion();\n    backrest();\n\n    armrest( 1);\n    armrest(-1);\n\n    // four legs\n    for (dx = [-1, 1])\n        for (dy = [-1, 1])\n            leg(dx * (seat_w/2 - leg_sz/2 - wall),\n                dy * (seat_d/2 - leg_sz/2 - wall));\n\n    // side stretchers\n    stretcher(-(seat_w/2 - leg_sz/2 - wall),  (seat_d/2 - leg_sz/2 - wall),\n              -(seat_w/2 - leg_sz/2 - wall), -(seat_d/2 - leg_sz/2 - wall));\n    stretcher( (seat_w/2 - leg_sz/2 - wall),  (seat_d/2 - leg_sz/2 - wall),\n               (seat_w/2 - leg_sz/2 - wall), -(seat_d/2 - leg_sz/2 - wall));\n\n    // front & back stretchers\n    stretcher(-(seat_w/2 - leg_sz/2 - wall), -(seat_d/2 - leg_sz/2 - wall),\n               (seat_w/2 - leg_sz/2 - wall), -(seat_d/2 - leg_sz/2 - wall));\n    stretcher(-(seat_w/2 - leg_sz/2 - wall),  (seat_d/2 - leg_sz/2 - wall),\n               (seat_w/2 - leg_sz/2 - wall),  (seat_d/2 - leg_sz/2 - wall));\n}",
    "renders": true
  },
  {
    "furniture": "sella",
    "openscad_code": "// Sella Chair - Realistic Style, Medium Complexity\n// A modern sella chair with cushioned seat, curved backrest, and sleek legs\n\nmodule chair_leg(x_pos, y_pos) {\n    // Main leg cylinder\n    translate([x_pos, y_pos, 0])\n        cylinder(h = 40, d = 8, $fn = 20);\n    \n    // Leg cap for stability\n    translate([x_pos, y_pos, -1])\n        cylinder(h = 2, d = 10, $fn = 20);\n}\n\nmodule backrest_support(x_pos) {\n    // Vertical support bar\n    translate([x_pos, 18, 0])\n        cylinder(h = 45, d = 6, $fn = 16);\n    \n    // Curved connection to backrest\n    translate([x_pos, 18, 42])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 6, $fn = 16);\n}\n\nmodule cushion() {\n    // Main cushion\n    translate([0, 0, 40])\n        cube([45, 40, 8], center = true);\n    \n    // Cushion rounding\n    translate([0, 0, 44])\n        minkowski() {\n            cube([41, 36, 2], center = true);\n            sphere(d = 4, $fn = 16);\n        }\n}\n\nmodule backrest() {\n    // Main backrest panel\n    translate([0, 22, 50])\n        rotate([10, 0, 0])\n            cube([45, 4, 35], center = true);\n    \n    // Backrest top curve\n    translate([0, 22, 67])\n        rotate([10, 0, 0])\n            difference() {\n                cube([45, 4, 6], center = true);\n                translate([0, 2, 3])\n                    sphere(d = 45, $fn = 30);\n            }\n}\n\nunion() {\n    // Four legs\n    chair_leg(-20, -16);\n    chair_leg(20, -16);\n    chair_leg(-20, 16);\n    chair_leg(20, 16);\n    \n    // Support frame between legs\n    // Front support\n    translate([0, -16, 20])\n        cube([48, 4, 4], center = true);\n    \n    // Back support\n    translate([0, 16, 20])\n        cube([48, 4, 4], center = true);\n    \n    // Side supports\n    translate([-20, 0, 20])\n        cube([4, 36, 4], center = true);\n    translate([20, 0, 20])\n        cube([4, 36, 4], center = true);\n    \n    // Backrest supports\n    backrest_support(-18);\n    backrest_support(18);\n    \n    // Seat cushion\n    cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Small decorative seam on cushion\n    for(i = [-15:10:15]) {\n        translate([i, 0, 48.1])\n            cube([1, 38, 0.5], center = true);\n    }\n    \n    // Rounding on leg joints\n    translate([-20, -16, 38])\n        sphere(d = 8, $fn = 16);\n    translate([20, -16, 38])\n        sphere(d = 8, $fn = 16);\n    translate([-20, 16, 38])\n        sphere(d = 8, $fn = 16);\n    translate([20, 16, 38])\n        sphere(d = 8, $fn = 16);\n}",
    "renders": true
  },
  {
    "furniture": "cathedra",
    "openscad_code": "// Cathedra Chair - Realistic Style, Medium Complexity\n// Dimensions: ~90mm H x 60mm W x 65mm D\n\n$fn = 32;\n\nmodule leg(x, y, angle = 0) {\n    translate([x, y, 0]) {\n        rotate([0, 0, angle]) {\n            // Main leg post\n            difference() {\n                cube([8, 8, 45], center = true);\n                translate([0, 0, -22.5]) cylinder(h = 50, r1 = 3, r2 = 3, center = true);\n            }\n            \n            // Foot detail\n            translate([0, 0, -22.5]) {\n                difference() {\n                    cylinder(h = 5, r1 = 5, r2 = 4);\n                    cylinder(h = 6, r1 = 3.5, r2 = 3);\n                }\n            }\n        }\n    }\n}\n\nmodule backrest_post() {\n    // Vertical post\n    cube([6, 3, 40], center = true);\n    \n    // Top finial\n    translate([0, 0, 20]) {\n        cylinder(h = 8, r1 = 3, r2 = 2);\n        sphere(2.5);\n    }\n}\n\nmodule backrest_panel() {\n    // Main panel\n    difference() {\n        cube([50, 4, 35]);\n        \n        // Gothic arch cutout\n        translate([25, 2, 30]) rotate([90, 0, 0]) {\n            linear_extrude(height = 4.1) {\n                polygon(points = [\n                    [0, 0],\n                    [20, 0],\n                    [20, 15],\n                    [10, 25],\n                    [0, 15]\n                ]);\n            }\n        }\n        \n        // Decorative holes\n        for(i = [0:2]) {\n            translate([12.5 + i*12.5, 2, 17.5]) {\n                rotate([90, 0, 0]) cylinder(h = 4.2, r = 2.5);\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Base\n    difference() {\n        translate([0, 0, 2.5]) cube([45, 45, 5], center = true);\n        translate([0, 0, 2.5]) cube([43, 43, 6], center = true);\n    }\n    \n    // Tufted detail\n    for(x = [-15, 0, 15]) {\n        for(y = [-15, 0, 15]) {\n            translate([x, y, 7.5]) {\n                difference() {\n                    cylinder(h = 2, r = 4);\n                    translate([0, 0, -0.1]) cylinder(h = 2.2, r = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule stretcher() {\n    // Front stretcher\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h = 50, r1 = 3, r2 = 3);\n            cylinder(h = 52, r1 = 2, r2 = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat frame\n    difference() {\n        translate([0, 0, 25]) cube([50, 50, 6], center = true);\n        translate([0, 0, 26]) cube([46, 46, 6], center = true);\n    }\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Legs\n    leg(-20, -20);\n    leg(20, -20);\n    leg(-20, 20);\n    leg(20, 20);\n    \n    // Backrest assembly\n    translate([0, 22.5, 42.5]) {\n        union() {\n            // Posts\n            translate([-20, 0, 0]) backrest_post();\n            translate([20, 0, 0]) backrest_post();\n            \n            // Panel\n            backrest_panel();\n            \n            // Top rail\n            translate([0, -2, 20]) cube([56, 6, 4], center = true);\n        }\n    }\n    \n    // Stretchers\n    translate([0, -20, 12.5]) stretcher();\n    translate([0, 20, 12.5]) rotate([0, 90, 0]) stretcher();\n    translate([-20, 0, 12.5]) rotate([0, 90, 90]) stretcher();\n    translate([20, 0, 12.5]) rotate([0, 90, 90]) stretcher();\n}",
    "renders": true
  },
  {
    "furniture": "sellion",
    "openscad_code": "// Sellion Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm W x 90mm D x 110mm H\n\n// Parameters\nseat_width = 80;\nseat_depth = 60;\nseat_thickness = 4;\nleg_height = 45;\nleg_thickness = 6;\nback_height = 50;\nback_thickness = 4;\narmrest_height = 20;\narmrest_thickness = 4;\n\n// Main seat\nmodule seat() {\n    // Seat base\n    cube([seat_width, seat_depth, seat_thickness], center = true);\n    \n    // Seat cushion detail\n    translate([0, 0, seat_thickness/2 + 2])\n    cube([seat_width - 10, seat_depth - 10, 4], center = true);\n}\n\n// Leg structure\nmodule leg(x, y) {\n    // Main leg post\n    translate([x, y, -leg_height/2 - seat_thickness/2])\n    cylinder(h = leg_height, d = leg_thickness, $fn = 8);\n    \n    // Leg brace\n    translate([x, y, -seat_thickness/2 - leg_height + 5])\n    cube([leg_thickness, leg_thickness, 10], center = true);\n}\n\n// Backrest\nmodule backrest() {\n    // Main back panel\n    translate([0, -seat_depth/2 - back_thickness/2, back_height/2 + seat_thickness/2])\n    cube([seat_width, back_thickness, back_height], center = true);\n    \n    // Back slats\n    for(i = [-2:2]) {\n        translate([i * 15, -seat_depth/2 - back_thickness/2, back_height/2 + seat_thickness/2])\n        cube([8, back_thickness - 1, back_height - 10], center = true);\n    }\n}\n\n// Armrest\nmodule armrest(side) {\n    // Support post\n    translate([side * (seat_width/2 - leg_thickness/2), seat_depth/4, armrest_height/2 + seat_thickness/2])\n    cylinder(h = armrest_height, d = leg_thickness, $fn = 8);\n    \n    // Armrest surface\n    translate([side * (seat_width/2 - leg_thickness), 0, armrest_height + seat_thickness/2 + 2])\n    cube([leg_thickness + 10, seat_depth/2, armrest_thickness], center = true);\n}\n\n// Cross support bars\nmodule support_bar() {\n    // Front support\n    translate([0, seat_depth/2 - leg_thickness/2, -seat_thickness/2 - leg_height/2 + 10])\n    cube([seat_width - leg_thickness * 2, leg_thickness, leg_thickness], center = true);\n    \n    // Side support\n    translate([seat_width/2 - leg_thickness/2, 0, -seat_thickness/2 - leg_height/2 + 10])\n    rotate([0, 0, 90])\n    cube([seat_depth - leg_thickness * 2, leg_thickness, leg_thickness], center = true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    seat();\n    backrest();\n    \n    // Legs - 4 positions\n    leg(-seat_width/2 + leg_thickness/2, seat_depth/2 - leg_thickness/2);\n    leg(seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2);\n    leg(-seat_width/2 + leg_thickness/2, -seat_depth/2 + leg_thickness/2);\n    leg(seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2);\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Support structure\n    support_bar();\n    translate([0, 0, -seat_thickness/2 - leg_height/2 + 10])\n    rotate([0, 0, 90])\n    support_bar();\n}",
    "renders": true
  },
  {
    "furniture": "diphros",
    "openscad_code": "// Diphros (Ancient Greek folding stool) - Realistic Medium Complexity\n// Overall dimensions: 80mm wide x 60mm deep x 65mm high\n\n$fn = 32;\n\nmodule leg_rod() {\n    // Main leg rod - 5mm diameter\n    cylinder(h = 55, d = 5);\n}\n\nmodule leg_crossbar() {\n    // Crossbar between legs - 4mm diameter\n    cylinder(h = 35, d = 4);\n}\n\nmodule seat_frame() {\n    // Outer frame of seat - 4mm thick\n    difference() {\n        cube([70, 50, 4]);\n        translate([2, 2, -1])\n            cube([66, 46, 6]);\n    }\n}\n\nmodule seat_weave() {\n    // Woven seat pattern - 2mm wide strips\n    union() {\n        for (i = [5:5:65]) {\n            translate([i, 5, 2])\n                cube([2, 40, 1]);\n        }\n        for (j = [5:5:40]) {\n            translate([5, j, 2])\n                cube([60, 2, 1]);\n        }\n    }\n}\n\nmodule pivot_block() {\n    // Pivot joint block - 8mm cube\n    cube([8, 8, 8]);\n}\n\nmodule foot_cap() {\n    // Decorative foot cap - 6mm diameter, 2mm high\n    cylinder(h = 2, d = 6);\n}\n\nmodule leg_assembly(x_offset, y_offset, angle) {\n    // Complete leg assembly with pivot and foot\n    translate([x_offset, y_offset, 0]) {\n        rotate([0, 0, angle]) {\n            // Pivot block\n            pivot_block();\n            \n            // Leg rod\n            translate([4, 4, 8])\n                leg_rod();\n            \n            // Foot cap\n            translate([4, 4, 63])\n                foot_cap();\n            \n            // Crossbar\n            translate([4, -15, 35])\n                rotate([90, 0, 0])\n                    leg_crossbar();\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat frame\n    translate([5, 5, 60])\n        seat_frame();\n    \n    // Woven seat\n    translate([5, 5, 60])\n        seat_weave();\n    \n    // Leg assemblies - X-frame configuration\n    // Front left leg\n    leg_assembly(5, 10, 0);\n    \n    // Front right leg\n    leg_assembly(75, 10, 0);\n    \n    // Back left leg - rotated for X-frame\n    leg_assembly(5, 40, 15);\n    \n    // Back right leg - rotated for X-frame\n    leg_assembly(75, 40, -15);\n    \n    // Support braces between legs\n    // Front brace\n    translate([40, 10, 30])\n        rotate([90, 0, 0])\n            cylinder(h = 35, d = 3);\n    \n    // Back brace\n    translate([40, 40, 30])\n        rotate([90, 0, 0])\n            cylinder(h = 35, d = 3);\n    \n    // Side braces\n    translate([5, 25, 30])\n        rotate([0, 90, 0])\n            cylinder(h = 70, d = 3);\n    \n    // Pivot rod connecting X-frame\n    translate([40, 25, 35])\n        rotate([90, 90, 0])\n            cylinder(h = 35, d = 4);\n}",
    "renders": true
  },
  {
    "furniture": "curule",
    "openscad_code": "// Curule chair (sellae curules) – Roman magistrate seat\n// Overall footprint ≈ 90 mm × 90 mm, seat height 42 mm\n\n// printable wall thickness\nwall = 2;          // mm\nmodule leg_profile() {      // the classic curule X-join\n    difference() {\n        cylinder(h = 40, d1 = 8, d2 = 5, center = true);\n        cylinder(h = 40, d1 = 5, d2 = 2, center = true);\n    }\n}\n\nmodule leg() {\n    // one diagonal strut\n    translate([0, 0, 20]) rotate([90, 0, 45]) leg_profile();\n    // second strut mirrored\n    translate([0, 0, 20]) rotate([90, 0, -45]) leg_profile();\n}\n\nmodule legs_frame() {\n    // left side pair\n    translate([-35, 0, 0]) leg();\n    // right side pair\n    mirror([1, 0, 0]) translate([-35, 0, 0]) leg();\n    \n    // front & rear cross-bars\n    for (z = [4, 38]) {\n        hull() {\n            translate([-35, 0, z]) sphere(wall);\n            translate([ 35, 0, z]) sphere(wall);\n        }\n    }\n}\n\nmodule seat() {\n    // simple cushion block\n    translate([0, 0, 40]) {\n        hull() {\n            for (dx = [-30, 30], dy = [-30, 30])\n                translate([dx, dy, 0]) sphere(wall);\n            for (dx = [-30, 30], dy = [-30, 30])\n                translate([dx, dy, 8]) sphere(wall);\n        }\n    }\n}\n\nmodule backrest() {\n    // curved backrest with spindles\n    difference() {\n        hull() {\n            for (dx = [-30, 30], z = [55, 65])\n                translate([dx, -28, z]) sphere(wall);\n        }\n        // cut spindles\n        for (x = [-20:10:20])\n            translate([x, -28, 60]) cube([wall, wall, 12], center = true);\n    }\n}\n\nunion() {\n    legs_frame();\n    seat();\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "faldstool",
    "openscad_code": "// Faldstool - Medium complexity realistic style\n// Dimensions: 60mm(W) × 70mm(D) × 80mm(H)\n// Wall thickness: 2mm throughout\n// Designed for 3D printing with no overhangs\n\n// Main parameters\nseat_width = 60;\nseat_depth = 35;\nseat_thickness = 2;\n\nbackrest_height = 45;\nbackrest_width = 60;\nbackrest_thickness = 2;\n\nleg_height = 40;\nleg_width = 3;\nleg_depth = 3;\nleg_inset = 2;\n\nstretcher_height = 15;\nstretcher_width = 2;\n\nsupport_rail_width = 2;\nsupport_rail_height = 2;\n\n// Materials\nwood_color = \"SaddleBrown\";\nfabric_color = \"DarkGray\";\n\n// Leg module\nmodule leg() {\n    color(wood_color) {\n        difference() {\n            // Main leg\n            cube([leg_width, leg_depth, leg_height]);\n            \n            // Chamfer at bottom for stability\n            translate([0, leg_depth - 1, 0])\n                cube([leg_width, 1, 1]);\n        }\n    }\n}\n\n// Stretcher module\nmodule stretcher(length) {\n    color(wood_color) {\n        // Horizontal stretcher between legs\n        cube([length, stretcher_width, stretcher_width]);\n    }\n}\n\n// Seat panel with cushion\nmodule seat() {\n    union() {\n        // Wooden seat frame\n        color(wood_color) {\n            cube([seat_width, seat_depth, seat_thickness]);\n        }\n        \n        // Upholstered cushion\n        color(fabric_color) {\n            translate([1, 1, seat_thickness])\n                cube([seat_width - 2, seat_depth - 2, 2]);\n        }\n    }\n}\n\n// Backrest panel\nmodule backrest() {\n    color(wood_color) {\n        // Main backrest panel\n        cube([backrest_width, backrest_thickness, backrest_height]);\n        \n        // Two vertical support rails\n        translate([5, -0.1, 0])\n            cube([support_rail_width, backrest_thickness + 0.2, backrest_height - 5]);\n        translate([backrest_width - 5 - support_rail_width, -0.1, 0])\n            cube([support_rail_width, backrest_thickness + 0.2, backrest_height - 5]);\n    }\n}\n\n// Assembly\nmodule faldstool() {\n    // Front legs\n    translate([leg_inset, leg_inset, 0])\n        leg();\n    translate([seat_width - leg_width - leg_inset, leg_inset, 0])\n        leg();\n    \n    // Rear legs\n    translate([leg_inset, seat_depth - leg_depth - leg_inset, 0])\n        leg();\n    translate([seat_width - leg_width - leg_inset, seat_depth - leg_depth - leg_inset, 0])\n        leg();\n    \n    // Side stretchers\n    translate([leg_width + leg_inset, leg_inset, stretcher_height])\n        rotate([0, 0, 90])\n            stretcher(seat_depth - 2 * leg_inset - leg_width);\n    translate([seat_width - leg_inset, leg_inset, stretcher_height])\n        rotate([0, 0, 90])\n            stretcher(seat_depth - 2 * leg_inset - leg_width);\n    \n    // Back stretcher\n    translate([leg_width + leg_inset, seat_depth - leg_inset - leg_depth, stretcher_height])\n        stretcher(seat_width - 2 * leg_width - 2 * leg_inset);\n    \n    // Seat\n    translate([0, 0, leg_height])\n        seat();\n    \n    // Backrest\n    translate([0, seat_depth - backrest_thickness, leg_height])\n        backrest();\n    \n    // Hinge detail\n    color(\"Silver\") {\n        // Left hinge\n        translate([leg_inset - 0.5, seat_depth - backrest_thickness - 0.5, leg_height + seat_thickness])\n            cylinder(h=2, r=1, $fn=12);\n        \n        // Right hinge\n        translate([seat_width - leg_inset - 0.5, seat_depth - backrest_thickness - 0.5, leg_height + seat_thickness])\n            cylinder(h=2, r=1, $fn=12);\n    }\n}\n\n// Render the complete faldstool\nfaldstool();",
    "renders": true
  },
  {
    "furniture": "inglenook",
    "openscad_code": "// Inglenook Bench - 3D printable realistic style\n// Overall dimensions: 100mm width × 40mm depth × 50mm height\n\n// Parameters\nseat_thickness = 3;\nback_thickness = 2;\nleg_size = 4;\nframe_thickness = 2;\ncushion_height = 6;\narmrest_height = 12;\n\n// Main seat frame\nmodule seat_frame() {\n    difference() {\n        // Main seat platform\n        cube([100, 40, seat_thickness], center=true);\n        \n        // Lightening holes underneath\n        for(x = [-35, -15, 5, 25]) {\n            translate([x, 0, -seat_thickness/2]) \n                cube([12, 30, seat_thickness+1], center=true);\n        }\n    }\n}\n\n// Backrest with vertical slats\nmodule backrest() {\n    // Main back panel\n    translate([0, 17, 18]) {\n        difference() {\n            cube([96, back_thickness, 35], center=true);\n            // Recessed panel detail\n            translate([0, 0, 5]) \n                cube([80, back_thickness+1, 20], center=true);\n        }\n    }\n    \n    // Vertical slats\n    for(x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n        translate([x, 17.5, 18])\n            cube([4, back_thickness, 32], center=true);\n    }\n}\n\n// Leg assembly with stretchers\nmodule leg_assembly(x_pos) {\n    // Front leg\n    translate([x_pos, 15, -21]) \n        cube([leg_size, leg_size, 40], center=true);\n    \n    // Back leg\n    translate([x_pos, -15, -21]) \n        cube([leg_size, leg_size, 40], center=true);\n    \n    // Side stretcher\n    translate([x_pos, 0, -35])\n        cube([leg_size, 28, frame_thickness], center=true);\n    \n    // Front stretcher\n    translate([x_pos/2, 15, -30])\n        cube([abs(x_pos), frame_thickness, leg_size], center=true);\n}\n\n// Armrest with support bracket\nmodule armrest(x_pos) {\n    // Main armrest\n    translate([x_pos, 0, 5]) \n        cube([8, 40, armrest_height], center=true);\n    \n    // Support bracket\n    translate([x_pos, 15, -5])\n        rotate([0, 45, 0])\n            cube([frame_thickness, 25, 25], center=true);\n}\n\n// Seat cushion\nmodule cushion() {\n    translate([0, 0, 3 + cushion_height/2]) {\n        // Main cushion\n        cube([90, 36, cushion_height], center=true);\n        \n        // Tufted detail\n        for(x = [-30, -10, 10, 30]) {\n            for(y = [-10, 10]) {\n                translate([x, y, cushion_height/2]) {\n                    cylinder(h=1.5, d=4, center=true);\n                    translate([0, 0, 0.75]) sphere(d=3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    seat_frame();\n    backrest();\n    \n    // Legs\n    leg_assembly(45);\n    leg_assembly(-45);\n    \n    // Armrests\n    armrest(50);\n    armrest(-50);\n    \n    // Cushion\n    cushion();\n}",
    "renders": true
  },
  {
    "furniture": "escabeau",
    "openscad_code": "// Escabeau (step stool) - realistic style, medium complexity\n// Overall dimensions: 100mm width x 120mm height x 100mm depth\n\n// Parameters\nwidth = 100;\nheight = 120;\ndepth = 100;\nleg_thickness = 4;\nstep_thickness = 3;\nrail_thickness = 3;\nbackrest_height = 40;\nbackrest_thickness = 2;\n\nmodule leg(x, y, z) {\n    // Single leg with rounded bottom\n    translate([x, y, z]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, height - z], center=true);\n            translate([0, 0, -height/2 + z/2 + 1]) \n                cylinder(h=leg_thickness*2, r=leg_thickness/2, center=true);\n        }\n    }\n}\n\nmodule step(y_pos, step_width) {\n    // Step with rounded front edge\n    translate([0, y_pos, 0]) {\n        difference() {\n            cube([width - leg_thickness*2, step_thickness, step_width], center=true);\n            translate([0, -step_thickness/2, step_width/2 - 1]) \n                rotate([0, 90, 0])\n                    cylinder(h=width - leg_thickness*2, r=step_thickness/2, center=true);\n        }\n    }\n}\n\nmodule backrest() {\n    // Backrest with vertical slats\n    translate([0, depth/2 - backrest_thickness/2, height/2 + backrest_height/2]) {\n        cube([width - leg_thickness*2 - 10, backrest_thickness, backrest_height], center=true);\n        \n        // Vertical slats\n        for(i = [-1:1]) {\n            translate([i * 20, 0, 0]) {\n                cube([6, backrest_thickness, backrest_height - 10], center=true);\n            }\n        }\n    }\n}\n\nmodule support_rail(x, y, z, length, angle) {\n    // Diagonal support rail between legs\n    translate([x, y, z]) {\n        rotate([0, angle, 0]) {\n            cube([length, rail_thickness, rail_thickness], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    leg(-width/2 + leg_thickness/2, -depth/2 + leg_thickness/2, 0);\n    leg(width/2 - leg_thickness/2, -depth/2 + leg_thickness/2, 0);\n    leg(-width/2 + leg_thickness/2, depth/2 - leg_thickness/2, 0);\n    leg(width/2 - leg_thickness/2, depth/2 - leg_thickness/2, 0);\n    \n    // Three steps at different heights\n    step(height*0.25 - step_thickness/2, depth - leg_thickness*2);\n    step(height*0.55 - step_thickness/2, depth - leg_thickness*2 - 10);\n    step(height*0.85 - step_thickness/2, depth - leg_thickness*2 - 20);\n    \n    // Backrest\n    backrest();\n    \n    // Side support rails\n    support_rail(-width/2 + leg_thickness, -depth/2 + leg_thickness, \n                 height*0.3, depth - leg_thickness*2, 0);\n    support_rail(width/2 - leg_thickness, -depth/2 + leg_thickness, \n                 height*0.3, depth - leg_thickness*2, 0);\n    support_rail(-width/2 + leg_thickness, -depth/2 + leg_thickness, \n                 height*0.7, depth - leg_thickness*2, 0);\n    support_rail(width/2 - leg_thickness, -depth/2 + leg_thickness, \n                 height*0.7, depth - leg_thickness*2, 0);\n    \n    // Front-to-back support rails\n    translate([0, 0, height*0.4]) {\n        cube([width - leg_thickness*2, rail_thickness, rail_thickness], center=true);\n    }\n    translate([0, 0, height*0.8]) {\n        cube([width - leg_thickness*2, rail_thickness, rail_thickness], center=true);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "treestump",
    "openscad_code": "// Tree-stump side table (realistic, medium complexity)\n// Approx. 110 mm diameter, 45 mm high\n\n$fn = 36;                        // Smooth curves\n\nwall = 2;                        // 3D-print wall thickness\n\nmodule stump_base() {\n    // Main trunk cylinder with taper\n    cylinder(h = 40, d1 = 110, d2 = 90, center = false);\n}\n\nmodule growth_ring(height) {\n    // Single annual ring, 1 mm thick\n    difference() {\n        cylinder(h = 1, d = 105 - height * 1.5, center = true);\n        translate([0, 0, 0])\n        cylinder(h = 1.1, d = 105 - height * 1.5 - wall * 2, center = true);\n    }\n}\n\nmodule top_surface() {\n    // Tabletop with slightly warped surface\n    union() {\n        difference() {\n            cylinder(h = 5, d = 110, center = false);\n            translate([0, 0, -1])\n                cylinder(h = 7, d = 106, center = false);\n        }\n        // Add concentric growth rings\n        for (z = [1 : 2 : 15]) {\n            translate([0, 0, z * 0.15 + 3])\n                growth_ring(z);\n        }\n    }\n}\n\nmodule bark_texture() {\n    // Vertical bark ridges around trunk\n    for (a = [0 : 15 : 359]) {\n        rotate([0, 0, a])\n            translate([50, 0, 0])\n                scale([1, 3, 1])\n                    rotate([90, 0, 90])\n                        cylinder(h = 40, d = 4, center = false);\n    }\n}\n\nmodule radial_crack(depth) {\n    // Crack running from center outward\n    rotate([0, 90, 0])\n        translate([0, 0, -depth])\n            cube([50, 2, 2], center = true);\n}\n\nmodule cracks() {\n    // Three radial cracks for realism\n    for (ang = [0, 120, 240]) {\n        rotate([0, 0, ang])\n            radial_crack(30);\n    }\n}\n\nmodule root_stub() {\n    // Small protruding root\n    union() {\n        translate([0, 40, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 10, center = true);\n        translate([0, 40, 0])\n            sphere(d = 12);\n    }\n}\n\nmodule root_system() {\n    // Five root stubs around base\n    for (a = [0 : 72 : 359]) {\n        rotate([0, 0, a])\n            root_stub();\n    }\n}\n\n// Assembly\nunion() {\n    // Main trunk\n    difference() {\n        stump_base();\n        // Hollow center for printability\n        translate([0, 0, wall])\n            cylinder(h = 38, d = 90 - wall * 2, center = false);\n    }\n    \n    // Bark texture\n    difference() {\n        bark_texture();\n        // Remove inner portion\n        cylinder(h = 40, d = 90, center = false);\n    }\n    \n    // Top surface\n    translate([0, 0, 40])\n        top_surface();\n    \n    // Cracks on top\n    translate([0, 0, 43])\n        cracks();\n    \n    // Root stubs\n    root_system();\n}",
    "renders": true
  },
  {
    "furniture": "footstool",
    "openscad_code": "// OpenSCAD Footstool - Realistic Style, Medium Complexity\n// Dimensions: 100mm x 70mm x 45mm (printable size)\n\n$fn = 50;  // Resolution for curves\n\n// Parameters\nstool_width = 100;\nstool_depth = 70;\nstool_height = 45;\nleg_height = 30;\nleg_size = 8;\ncushion_thickness = 12;\nframe_thickness = 3;\n\n// Main module\nmodule footstool() {\n    // Four legs with slight taper\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (stool_width/2 - leg_size/2 - 3), \n                      y * (stool_depth/2 - leg_size/2 - 3), \n                      leg_height/2]) {\n                // Tapered leg using cylinder\n                cylinder(h = leg_height, \n                        r1 = leg_size/2, \n                        r2 = leg_size/2 - 1, \n                        center = true);\n            }\n        }\n    }\n    \n    // Frame connecting legs\n    // Long side frames\n    translate([0, 0, leg_height - frame_thickness/2]) {\n        cube([stool_width - 20, frame_thickness, frame_thickness], center = true);\n    }\n    \n    // Short side frames\n    translate([0, 0, leg_height - frame_thickness/2]) {\n        rotate([0, 0, 90]) {\n            cube([stool_depth - 20, frame_thickness, frame_thickness], center = true);\n        }\n    }\n    \n    // Center support beam\n    translate([0, 0, leg_height - 8]) {\n        cube([frame_thickness, stool_depth - 16, frame_thickness], center = true);\n    }\n    \n    // Cushion base board\n    translate([0, 0, leg_height + cushion_thickness/2]) {\n        cube([stool_width - 8, stool_depth - 8, cushion_thickness/2], center = true);\n    }\n    \n    // Upholstered cushion with rounded edges\n    translate([0, 0, leg_height + cushion_thickness + 2]) {\n        // Main cushion body\n        minkowski() {\n            cube([stool_width - 12, stool_depth - 12, cushion_thickness/2], center = true);\n            sphere(r = 3);\n        }\n        \n        // Cushion top surface detail\n        translate([0, 0, cushion_thickness/4]) {\n            scale([0.9, 0.9, 0.1]) {\n                minkowski() {\n                    cube([stool_width - 12, stool_depth - 12, cushion_thickness/2], center = true);\n                    sphere(r = 2);\n                }\n            }\n        }\n    }\n    \n    // Corner brackets for reinforcement\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (stool_width/2 - 10), \n                      y * (stool_depth/2 - 10), \n                      leg_height - 5]) {\n                rotate([0, 0, x * y * 45]) {\n                    cube([5, 5, 10], center = true);\n                }\n            }\n        }\n    }\n    \n    // Decorative nail heads around cushion\n    for (i = [0:15]) {\n        angle = i * 22.5;\n        r = (stool_width - 12)/2 - 2;\n        x = r * cos(angle);\n        y = r * sin(angle);\n        \n        // Only place nails on front/back edges\n        if (abs(y) > abs(x) * (stool_depth/stool_width) - 5) {\n            translate([x * (stool_width - 12)/(stool_width - 5), \n                      y * (stool_depth - 12)/(stool_depth - 5), \n                      leg_height + cushion_thickness + 5]) {\n                sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Render the footstool\nfootstool();",
    "renders": true
  },
  {
    "furniture": "cricket",
    "openscad_code": "// Cricket Chair - Realistic Style, Medium Complexity\n// Dimensions: ~120mm tall, 80mm wide, 90mm deep\n\n// Main module for the entire cricket chair\nmodule cricket_chair() {\n    // Chair frame color (wood-like)\n    color(\"burlywood\")\n    union() {\n        // Seat with cricket body shape\n        cricket_seat();\n        \n        // Backrest with cricket wing pattern\n        cricket_backrest();\n        \n        // Four legs\n        for(i = [0,1]) {\n            for(j = [0,1]) {\n                translate([i*60-30, j*65-32.5, -55])\n                    chair_leg();\n            }\n        }\n        \n        // Front stretcher bar\n        translate([0, -30, -45])\n            rotate([0,90,0])\n            cylinder(h=60, r=3, $fn=16);\n    }\n    \n    // Cricket details in darker color\n    color(\"saddlebrown\")\n    union() {\n        // Head rest area (cricket head)\n        translate([0, 42, 45])\n            scale([1, 0.8, 1])\n            sphere(r=12, $fn=32);\n        \n        // Antennae\n        translate([-8, 50, 55])\n            rotate([0,-30,0])\n            cylinder(h=25, r=1, $fn=8);\n        translate([8, 50, 55])\n            rotate([0,30,0])\n            cylinder(h=25, r=1, $fn=8);\n        \n        // Leg joints\n        leg_joints();\n    }\n}\n\n// Cricket-shaped seat with wing details\nmodule cricket_seat() {\n    // Main seat body (elliptical)\n    scale([1.2, 1, 0.3])\n    sphere(r=35, $fn=64);\n    \n    // Wing indentations on seat\n    difference() {\n        translate([0,0,-1])\n            scale([1.2, 1, 0.3])\n            sphere(r=35, $fn=64);\n        \n        // Left wing groove\n        translate([-20, 5, -8])\n            rotate([0,0,25])\n            scale([1, 0.4, 0.2])\n            cube([35, 20, 15], center=true);\n        \n        // Right wing groove\n        translate([20, 5, -8])\n            rotate([0,0,-25])\n            scale([1, 0.4, 0.2])\n            cube([35, 20, 15], center=true);\n    }\n}\n\n// Backrest with cricket wing pattern\nmodule cricket_backrest() {\n    // Main backrest frame\n    translate([0, 35, 20])\n        rotate([100,0,0])\n        difference() {\n            // Outer shell\n            scale([1.1, 1, 0.15])\n            sphere(r=35, $fn=64);\n            \n            // Hollow center\n            scale([0.9, 0.8, 0.2])\n            sphere(r=35, $fn=64);\n        }\n    \n    // Wing supports\n    for(side = [-1, 1]) {\n        translate([side*25, 35, 20])\n            rotate([100,0,side*15])\n            scale([0.3, 0.8, 0.1])\n            sphere(r=35, $fn=32);\n    }\n}\n\n// Chair leg with cricket leg styling\nmodule chair_leg() {\n    // Main leg post\n    cylinder(h=55, r1=4, r2=3, $fn=16);\n    \n    // Cricket leg joints\n    translate([0,0,15])\n        sphere(r=5, $fn=16);\n    translate([0,0,35])\n        sphere(r=4.5, $fn=16);\n}\n\n// Decorative leg joints\nmodule leg_joints() {\n    // Front leg connections\n    for(side = [-1, 1]) {\n        translate([side*30, -32.5, -30])\n            rotate([90,0,0])\n            cylinder(h=8, r=2.5, $fn=12);\n    }\n    \n    // Rear leg connections\n    for(side = [-1, 1]) {\n        translate([side*30, 32.5, -30])\n            rotate([90,0,0])\n            cylinder(h=8, r=2.5, $fn=12);\n    }\n}\n\n// Render the complete chair\ncricket_chair();",
    "renders": true
  },
  {
    "furniture": "gossip",
    "openscad_code": "// Realistic medium-complexity GOSSIP bench\n// A small two-seat bench for intimate conversation\n\n// overall dimensions (mm)\nbench_w = 120;\nbench_d = 55;\nbench_h = 75;\nleg_h = 70;\nseat_th = 5;\nback_h = 40;\nback_th = 3;\n\n// wall / frame thickness\nwall = 2;\n\nmodule leg() {\n    // simple tapered square leg with chamfer\n    difference() {\n        cube([6, 6, leg_h], center=true);\n        translate([0,0,-leg_h/2 + wall]) cube([6 - wall*2, 6 - wall*2, leg_h - wall], center=true);\n    }\n}\n\nmodule legs_frame() {\n    // four legs connected by stretchers\n    translate([bench_w/2 - 10, bench_d/2 - 8, leg_h/2]) leg();\n    translate([-(bench_w/2 - 10), bench_d/2 - 8, leg_h/2]) leg();\n    translate([bench_w/2 - 10, -(bench_d/2 - 8), leg_h/2]) leg();\n    translate([-(bench_w/2 - 10), -(bench_d/2 - 8), leg_h/2]) leg();\n    \n    // front stretcher\n    translate([0, bench_d/2 - 8, 15])\n        cube([bench_w - 20, wall, 6], center=true);\n    // back stretcher\n    translate([0, -(bench_d/2 - 8), 15])\n        cube([bench_w - 20, wall, 6], center=true);\n    // side stretchers\n    translate([bench_w/2 - 10, 0, 15])\n        cube([wall, bench_d - 16, 6], center=true);\n    translate([-(bench_w/2 - 10), 0, 15])\n        cube([wall, bench_d - 16, 6], center=true);\n}\n\nmodule seat() {\n    // solid seat with slat look\n    for(i=[-1,0,1]) {\n        translate([i*bench_w/4, 0, leg_h + seat_th/2])\n            cube([bench_w/3 - 4, bench_d - 6, seat_th], center=true);\n    }\n    // cushion impression\n    translate([0,0,leg_h + seat_th + 1])\n        cube([bench_w - 10, bench_d - 12, 2], center=true);\n}\n\nmodule backrest() {\n    // vertical slats for backrest\n    difference() {\n        // full back panel\n        translate([0, -(bench_d/2 - back_th/2), leg_h + back_h/2])\n            cube([bench_w - 10, back_th, back_h], center=true);\n        // remove material for slat effect\n        for(i=[-2,-1,1,2]) {\n            translate([i*15, -(bench_d/2 - back_th/2), leg_h + back_h/2])\n                cube([10, back_th + 0.1, back_h - wall*2], center=true);\n        }\n    }\n    // top rail\n    translate([0, -(bench_d/2 - back_th/2), leg_h + back_h - wall])\n        cube([bench_w - 6, back_th + 2, wall*2], center=true);\n}\n\nunion() {\n    legs_frame();\n    seat();\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "creepie",
    "openscad_code": "// Realistic creepie (small three-legged milking stool) – 3D printable\n// Overall height = 95 mm, seat Ø = 130 mm\n\n$fn = 50;                // smooth curves\n\n// Parameters\nleg_d      = 12;         // Ø of turned legs\nwall       = 2;          // printable wall thickness\nseat_h     = 7;          // seat plank thickness\nstretch_h  = 10;         // stretcher thickness\nstretch_r  = 5;          // stretcher radius\nleg_angle  = 12;         // splay angle (degrees)\nfoot_r     = 8;          // foot pad radius\nfoot_h     = 3;\n\n// Seat – solid cylinder with slight rounding\nmodule seat() {\n    difference() {\n        cylinder(h = seat_h, r1 = 65, r2 = 65);\n        translate([0, 0, -0.1])\n            cylinder(h = seat_h + 0.2, r1 = 63, r2 = 63); // hollow\n    }\n}\n\n// One turned-style leg (stacked cylinders)\nmodule leg(len = 90) {\n    union() {\n        // main shaft\n        cylinder(h = len - foot_h, r = leg_d/2);\n        // foot pad\n        translate([0, 0, len - foot_h])\n            cylinder(h = foot_h, r = foot_r);\n    }\n}\n\n// Triangular stretcher ring\nmodule stretcher() {\n    height = stretch_h;\n    r = 45;                // radius from center to mid-stretcher\n    thickness = stretch_r;\n    \n    // three bars forming equilateral triangle\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([r, 0, 0])\n                rotate([90, 0, 90])\n                    cylinder(h = r * sqrt(3), r = thickness);\n}\n\n// Assembly\nmodule creepie() {\n    // Seat\n    seat();\n    \n    // Three legs\n    leg_len = 95 - seat_h;\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([40, 0, seat_h])   // 40 mm inset\n                rotate([leg_angle, 0, 0])\n                    leg(leg_len);\n    \n    // Stretcher ring 60 mm above floor\n    translate([0, 0, 60])\n        stretcher();\n}\n\ncreepie();",
    "renders": true
  },
  {
    "furniture": "buffet",
    "openscad_code": "// Realistic buffet cabinet, medium complexity, 3D-printable\n// External size: 100 mm wide × 50 mm deep × 60 mm high\n// Wall thickness: 2 mm everywhere\n\n// Global variables\nbuffet_w = 100;\nbuffet_d = 50;\nbuffet_h = 60;\nwall_t = 2;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer box\n        cube([buffet_w, buffet_d, buffet_h], center = false);\n        // Hollow inside\n        translate([wall_t, wall_t, wall_t])\n            cube([buffet_w-2*wall_t, buffet_d-2*wall_t, buffet_h-wall_t], center = false);\n    }\n}\n\n// Back panel (tongue-in-groove illusion)\nmodule back_panel() {\n    translate([0, buffet_d-wall_t, 0])\n        cube([buffet_w, wall_t, buffet_h], center = false);\n}\n\n// Base plinth\nmodule plinth() {\n    difference() {\n        // Outer base frame\n        translate([-2, -2, -4])\n            cube([buffet_w+4, buffet_d+4, 4], center = false);\n        // Recess\n        translate([wall_t-2, wall_t-2, -3.9])\n            cube([buffet_w-2*wall_t+4, buffet_d-2*wall_t+4, 4], center = false);\n    }\n}\n\n// Four legs (simple rectangular)\nmodule legs() {\n    leg_w = 4;\n    leg_d = 3;\n    leg_h = 4;\n    positions = [[0, 0],\n                 [buffet_w-leg_w, 0],\n                 [0, buffet_d-leg_d],\n                 [buffet_w-leg_w, buffet_d-leg_d]];\n    for (p = positions)\n        translate([p.x, p.y, -leg_h])\n            cube([leg_w, leg_d, leg_h], center = false);\n}\n\n// Shelf inside\nmodule shelf() {\n    translate([wall_t, wall_t, buffet_h/2])\n        cube([buffet_w-2*wall_t, buffet_d-2*wall_t, wall_t], center = false);\n}\n\n// Door pair\nmodule doors() {\n    door_w = (buffet_w-3*wall_t)/2;\n    door_h = buffet_h-4*wall_t;\n    // Left door\n    translate([wall_t, wall_t, 2*wall_t])\n        cube([door_w, wall_t, door_h], center = false);\n    // Right door\n    translate([wall_t+door_w+wall_t, wall_t, 2*wall_t])\n        cube([door_w, wall_t, door_h], center = false);\n    // Recessed panels\n    panel_margin = 3;\n    translate([wall_t+panel_margin, wall_t-0.1, 2*wall_t+panel_margin])\n        cube([door_w-2*panel_margin, wall_t+0.2, door_h-2*panel_margin], center = false);\n    translate([wall_t+door_w+wall_t+panel_margin, wall_t-0.1, 2*wall_t+panel_margin])\n        cube([door_w-2*panel_margin, wall_t+0.2, door_h-2*panel_margin], center = false);\n}\n\n// Knobs\nmodule knobs() {\n    knob_r = 1.5;\n    knob_h = 1.2;\n    for (x = [buffet_w/4, 3*buffet_w/4])\n        translate([x, wall_t-0.1, buffet_h/2])\n            cylinder(h = knob_h, r = knob_r, $fn = 16);\n}\n\n// Top overhang\nmodule top() {\n    translate([-2, -2, buffet_h])\n        cube([buffet_w+4, buffet_d+4, wall_t], center = false);\n}\n\n// Assemble buffet\nunion() {\n    legs();\n    plinth();\n    body_shell();\n    back_panel();\n    shelf();\n    top();\n    doors();\n    knobs();\n}",
    "renders": true
  },
  {
    "furniture": "form",
    "openscad_code": "// Modern Form Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm W x 55mm D x 85mm H\n\nchair_width = 60;\nchair_depth = 55;\nchair_height = 85;\nseat_height = 45;\nback_height = 40;\nleg_size = 4;\nframe_thickness = 3;\ncushion_thickness = 8;\n\n// Main chair module\nmodule chair() {\n    // Rear legs with backrest frame\n    difference() {\n        union() {\n            // Left rear leg\n            translate([-chair_width/2 + leg_size/2, -chair_depth/2 + leg_size/2, 0])\n                cube([leg_size, leg_size, chair_height]);\n            \n            // Right rear leg\n            translate([chair_width/2 - leg_size/2, -chair_depth/2 + leg_size/2, 0])\n                cube([leg_size, leg_size, chair_height]);\n            \n            // Backrest frame top\n            translate([0, -chair_depth/2 + leg_size/2, chair_height - frame_thickness])\n                cube([chair_width - leg_size, frame_thickness, frame_thickness]);\n            \n            // Backrest vertical supports\n            for(x = [-20, 0, 20]) {\n                translate([x, -chair_depth/2 + leg_size/2 + frame_thickness/2, \n                          seat_height + back_height/2])\n                    cube([frame_thickness, frame_thickness, back_height]);\n            }\n        }\n        \n        // Backrest slats cutouts\n        for(y = [-15, -5, 5, 15]) {\n            translate([y, -chair_depth/2 + leg_size + 1, seat_height + 5])\n                cube([6, frame_thickness + 2, back_height - 10]);\n        }\n    }\n    \n    // Front legs\n    translate([-chair_width/2 + leg_size/2, chair_depth/2 - leg_size/2, 0])\n        cube([leg_size, leg_size, seat_height]);\n    translate([chair_width/2 - leg_size/2, chair_depth/2 - leg_size/2, 0])\n        cube([leg_size, leg_size, seat_height]);\n    \n    // Side frame supports\n    translate([0, -chair_depth/2 + leg_size/2 + frame_thickness/2, seat_height - frame_thickness])\n        cube([chair_width - leg_size, frame_thickness, frame_thickness]);\n    translate([0, chair_depth/2 - leg_size/2 - frame_thickness/2, seat_height - frame_thickness])\n        cube([chair_width - leg_size, frame_thickness, frame_thickness]);\n    \n    // Front frame support\n    translate([0, 0, seat_height - frame_thickness])\n        rotate([90, 0, 0])\n            cube([chair_width - leg_size, frame_thickness, chair_depth - leg_size]);\n    \n    // Seat cushion with rounded edges\n    difference() {\n        // Main cushion block\n        translate([0, 0, seat_height])\n            cube([chair_width - 8, chair_depth - 6, cushion_thickness], center=true);\n        \n        // Cushion top rounding\n        translate([0, 0, seat_height + cushion_thickness/2 - 1])\n            cube([chair_width - 10, chair_depth - 8, cushion_thickness + 2], center=true);\n    }\n    \n    // Backrest cushion\n    difference() {\n        translate([0, -chair_depth/2 + leg_size + frame_thickness + 3, \n                  seat_height + back_height/2])\n            cube([chair_width - 10, 6, back_height - 4], center=true);\n        \n        // Backrest cushion rounding\n        translate([0, -chair_depth/2 + leg_size + frame_thickness + 3, \n                  seat_height + back_height/2])\n            cube([chair_width - 12, 8, back_height - 6], center=true);\n    }\n    \n    // Armrests\n    module armrest(side) {\n        translate([side * (chair_width/2 - leg_size/2), 0, seat_height + 15])\n            rotate([0, -15, 0])\n                cube([leg_size, chair_depth/2 - 5, frame_thickness]);\n    }\n    \n    armrest(1);\n    armrest(-1);\n}\n\n// Generate the chair\nchair();",
    "renders": true
  },
  {
    "furniture": "deacon",
    "openscad_code": "// Deacon Bench (realistic style, medium complexity)\n// Overall size: 140mm wide x 60mm deep x 90mm high\n\n$fn = 32;\n\nmodule main_frame() {\n    // Left side panel (20mm thick)\n    translate([0,0,0])\n        cube([20, 60, 90]);\n    \n    // Right side panel\n    translate([120,0,0])\n        cube([20, 60, 90]);\n    \n    // Back panel (15mm thick)\n    translate([20, 45, 0])\n        cube([100, 15, 90]);\n    \n    // Front apron\n    translate([20, 0, 0])\n        cube([100, 15, 40]);\n}\n\nmodule seat() {\n    // Main seat board (25mm thick)\n    translate([20, 15, 60])\n        cube([100, 30, 25]);\n    \n    // Seat front lip (decorative)\n    translate([20, 15, 85])\n        cube([100, 2, 5]);\n}\n\nmodule backrest_slats() {\n    // 7 vertical slats with proper spacing\n    for(i = [0:6]) {\n        translate([25 + i * 15, 25, 55])\n            cube([10, 5, 35]);\n    }\n}\n\nmodule decorative_spindles() {\n    // Front decorative spindles between seat and apron\n    for(i = [0:3]) {\n        translate([30 + i * 25, 15, 40])\n            cylinder(h = 20, d = 6);\n    }\n}\n\nmodule storage_box() {\n    // Internal storage compartment\n    difference() {\n        translate([25, 20, 10])\n            cube([90, 25, 45]);\n        // Hollow it out (2mm walls)\n        translate([27, 22, 12])\n            cube([86, 21, 41]);\n    }\n    \n    // Bottom panel\n    translate([25, 20, 10])\n        cube([90, 25, 2]);\n    \n    // Top panel (removable lid)\n    translate([25, 20, 45])\n        cube([90, 25, 2]);\n}\n\nmodule leg_profiles() {\n    // Front left leg profile (rounded)\n    translate([15, 10, 0])\n        cylinder(h = 50, d = 8);\n    \n    // Front right leg profile\n    translate([125, 10, 0])\n        cylinder(h = 50, d = 8);\n    \n    // Back left leg profile\n    translate([15, 50, 0])\n        cylinder(h = 50, d = 8);\n    \n    // Back right leg profile\n    translate([125, 50, 0])\n        cylinder(h = 50, d = 8);\n}\n\nmodule support_braces() {\n    // Left side brace\n    translate([10, 30, 25])\n        cube([5, 20, 2]);\n    \n    // Right side brace\n    translate([125, 30, 25])\n        cube([5, 20, 2]);\n    \n    // Center cross brace\n    translate([65, 20, 20])\n        cube([50, 2, 5]);\n}\n\n// Assemble the deacon\nunion() {\n    main_frame();\n    seat();\n    backrest_slats();\n    decorative_spindles();\n    storage_box();\n    leg_profiles();\n    support_braces();\n}",
    "renders": true
  },
  {
    "furniture": "monk",
    "openscad_code": "// Monk Chair (realistic style, medium complexity)\n// A meditation-style chair with backrest, seat, and armrests\n\n// Overall dimensions\nchair_height = 120;\nchair_width = 70;\nchair_depth = 60;\nseat_height = 40;\n\n// Wall thickness\nwall = 2;\n\nmodule leg(x_pos, z_pos) {\n    // Tapered leg with mortise-style joint\n    translate([x_pos, 0, z_pos])\n    linear_extrude(height=seat_height, scale=[0.9, 0.9])\n    offset(r=2)\n    square([8, 8], center=true);\n}\n\nmodule backrest() {\n    // Curved backrest with vertical slats\n    difference() {\n        // Main backrest frame\n        translate([0, -chair_depth/2 + 5, seat_height + 30])\n        cube([chair_width - 20, wall, 60], center=true);\n        \n        // Decorative cutouts\n        for(i = [-20:10:20]) {\n            translate([i, -chair_depth/2 + 5, seat_height + 45])\n            cube([6, wall+1, 30], center=true);\n        }\n    }\n    \n    // Horizontal support bar\n    translate([0, -chair_depth/2 + 8, seat_height + 15])\n    cube([chair_width - 10, wall, 10], center=true);\n}\n\nmodule seat() {\n    // Cushioned seat with rounded edges\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n        cube([chair_width - 10, chair_depth - 10, seat_height], center=true);\n        \n        // Cushion indentation\n        translate([0, 0, seat_height - 2])\n        cube([chair_width - 20, chair_depth - 20, 5], center=true);\n    }\n    \n    // Seat frame\n    translate([0, 0, seat_height - wall])\n    difference() {\n        cube([chair_width, chair_depth, wall], center=true);\n        cube([chair_width - 10, chair_depth - 10, wall + 1], center=true);\n    }\n}\n\nmodule armrest() {\n    // Curved armrest with support\n    translate([chair_width/2 - 5, 0, seat_height + 15])\n    rotate([0, 20, 0])\n    cube([20, 8, 30]);\n    \n    // Support post\n    translate([chair_width/2 - 5, 0, seat_height])\n    cylinder(h=15, r=4, $fn=16);\n}\n\nmodule stretcher() {\n    // Lower stretcher between legs\n    translate([0, chair_depth/2 - 15, 10])\n    cube([chair_width - 30, 6, wall], center=true);\n}\n\n// Main assembly\nunion() {\n    // Seat assembly\n    seat();\n    \n    // Four legs\n    leg(-chair_width/2 + 10, 0);\n    leg(chair_width/2 - 10, 0);\n    leg(-chair_width/2 + 10, chair_depth - 10);\n    leg(chair_width/2 - 10, chair_depth - 10);\n    \n    // Backrest\n    backrest();\n    \n    // Armrests (both sides)\n    armrest();\n    mirror([1, 0, 0]) armrest();\n    \n    // Lower stretchers\n    stretcher();\n    translate([0, 0, 0]) stretcher();\n    \n    // Apron details\n    translate([0, chair_depth/2 - 5, seat_height/2])\n    cube([chair_width - 20, wall, seat_height], center=true);\n    translate([0, -chair_depth/2 + 5, seat_height/2])\n    cube([chair_width - 20, wall, seat_height], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "trestle",
    "openscad_code": "// Trestle Legs Module\nmodule trestle_leg() {\n    // Angled leg with proper thickness\n    difference() {\n        // Main leg shape (angled)\n        rotate([0, -15, 0])\n        cube([6, 50, 4], center=true);\n        \n        // Taper the bottom\n        translate([0, -25, 0])\n        cube([12, 25, 6], center=true);\n    }\n    \n    // Horizontal stretcher notch\n    translate([0, -20, 0])\n    cube([8, 2, 4], center=true);\n}\n\n// Cross Beam Module\nmodule cross_beam() {\n    // Main beam\n    cube([50, 4, 3], center=true);\n    \n    // End caps\n    translate([-25, 0, 0])\n    cube([2, 6, 5], center=true);\n    translate([25, 0, 0])\n    cube([2, 6, 5], center=true);\n}\n\n// Support Brace Module\nmodule support_brace() {\n    // Diagonal brace\n    rotate([0, 0, 30])\n    cube([35, 3, 2], center=true);\n}\n\n// Main Trestle Assembly\nmodule trestle() {\n    // Left leg assembly\n    translate([-22, 0, 0]) {\n        // Two legs per side\n        translate([0, 0, 8]) trestle_leg();\n        mirror([0, 0, 1]) translate([0, 0, 8]) trestle_leg();\n        \n        // Bottom stretcher\n        translate([0, -22, -10])\n        rotate([0, 90, 0])\n        cube([3, 20, 3], center=true);\n    }\n    \n    // Right leg assembly\n    translate([22, 0, 0]) {\n        mirror([1, 0, 0]) {\n            // Two legs per side\n            translate([0, 0, 8]) trestle_leg();\n            mirror([0, 0, 1]) translate([0, 0, 8]) trestle_leg();\n            \n            // Bottom stretcher\n            translate([0, -22, -10])\n            rotate([0, 90, 0])\n            cube([3, 20, 3], center=true);\n        }\n    }\n    \n    // Top support beam\n    translate([0, 0, 20])\n    cross_beam();\n    \n    // Additional support braces\n    translate([0, 0, 10]) {\n        support_brace();\n        mirror([1, 0, 0]) support_brace();\n    }\n    \n    // Foot pads (for stability)\n    for(side = [-1, 1]) {\n        for(end = [-1, 1]) {\n            translate([side * 22, end * 25, -20])\n            cube([8, 10, 2], center=true);\n        }\n    }\n}\n\n// Render the complete trestle\ntrestle();",
    "renders": true
  },
  {
    "furniture": "joint",
    "openscad_code": "// Mortise-and-Tenon wooden chair joint (chair back to seat frame)\n// Overall joint size: ~100mm wide × 120mm deep × 60mm high\n// 2 mm wall thickness assumed throughout\n\n/* ================= PARAMETERS ================= */\n$fn = 60;\n\ntenon_w  = 24;      // Tenon width\ntenon_h  = 14;      // Tenon height\ntenon_l  = 30;      // Tenon length into mortise\n\nmortise_w = tenon_w + 2;     // Mortise width (+ clearance)\nmortise_h = tenon_h + 2;     // Mortise height (+ clearance)\nmortise_d = tenon_l + 2;     // Mortise depth (+ clearance)\n\nseat_frame_w = 100;  // Seat frame rail length\nseat_frame_t = 20;   // Seat frame thickness\nleg_w = 30;          // Leg cross-section\nbackpost_w = 30;     // Back post cross-section\nbackpost_h = 120;    // Back post height above seat\n\n/* ================= MODULES ================= */\n// Simple rounding helper for 3D-printability\nmodule roundedCube(size, r) {\n    hull() {\n        for(dx=[0,size.x], dy=[0,size.y], dz=[0,size.z])\n            translate([dx,dy,dz])\n                sphere(r=r);\n    }\n}\n\n// Tenon protruding from back post\nmodule tenon() {\n    translate([0, -tenon_l, 0])\n        cube([tenon_w, tenon_l, tenon_h], center=true);\n}\n\n// Mortise block in seat frame rail\nmodule mortiseBlock() {\n    difference() {\n        roundedCube([seat_frame_w, seat_frame_t, seat_frame_t], 2);\n        translate([0, seat_frame_t/2 - mortise_d/2, 0])\n            cube([mortise_w, mortise_d, mortise_h], center=true);\n    }\n}\n\n// Decorative bead along frame edge\nmodule bead() {\n    for(x=[-seat_frame_w/2 + 5 : 10 : seat_frame_w/2 - 5])\n        translate([x, 0, seat_frame_t/2 + 1])\n            rotate([90,0,0])\n                cylinder(h=1, r1=1, r2=1);\n}\n\n// Back post with tenon\nmodule backPost() {\n    difference() {\n        union() {\n            // Main post\n            roundedCube([backpost_w, backpost_w, backpost_h], 2);\n            // Tenon at lower end\n            translate([0, 0, -backpost_h/2])\n                tenon();\n        }\n        // Screw clearance hole\n        translate([0, 0, -backpost_h/2 + 20])\n            rotate([90,0,0])\n                cylinder(h=backpost_w+1, d=4, center=true);\n    }\n}\n\n// Leg stub under seat frame\nmodule legStub() {\n    translate([0, seat_frame_t/2 + leg_w/2, -seat_frame_t/2 - leg_w/2])\n        roundedCube([leg_w, leg_w, leg_w], 2);\n}\n\n/* ================= ASSEMBLY ================= */\n// Main seat frame rail with mortise\ntranslate([0, 0, 0])\n    mortiseBlock();\n\ntranslate([0, 0, 0])\n    bead();\n\n// Left leg stub\ntranslate([-seat_frame_w/2 + leg_w/2, 0, 0])\n    legStub();\n\n// Right leg stub\ntranslate([seat_frame_w/2 - leg_w/2, 0, 0])\n    legStub();\n\n// Back post engaging mortise\ntranslate([0, seat_frame_t/2 + tenon_l/2, 0])\n    backPost();",
    "renders": true
  },
  {
    "furniture": "campstool",
    "openscad_code": "// Campstool - folding three-leg design\n// Overall height ~100 mm, seat diameter ~60 mm\n// Wall thickness 2 mm for 3D printability\n\n// Parameters\nleg_length = 95;\nseat_diameter = 60;\nleg_thick = 4;\npin_diameter = 3;\nbrace_thick = 2;\nhinge_clear = 1;\n\n// Central hub for legs\nmodule hub() {\n    difference() {\n        cylinder(h = 10, d = 20, $fn = 30);        // main hub body\n        for (a = [0, 120, 240])\n            rotate([0, 0, a])\n                translate([10/2 + leg_thick/2, 0, 5])\n                    rotate([0, 90, 0])\n                        cylinder(h = 20, d = leg_thick + 2*hinge_clear, $fn = 16); // clearance for legs\n    }\n}\n\n// Single leg\nmodule leg() {\n    difference() {\n        union() {\n            // upper pin part\n            translate([0, 0, 10])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, d = leg_thick, $fn = 16);\n            // lower tube\n            translate([0, 0, -leg_length/2 + 5])\n                cylinder(h = leg_length, d1 = leg_thick, d2 = leg_thick*0.8, $fn = 16);\n            // foot cap\n            translate([0, 0, -leg_length + 5])\n                sphere(d = leg_thick * 1.4, $fn = 16);\n        }\n        // pin hole\n        rotate([0, 90, 0])\n            cylinder(h = 30, d = pin_diameter, $fn = 12);\n    }\n}\n\n// Seat fabric disc\nmodule seat() {\n    difference() {\n        cylinder(h = 2, d = seat_diameter, $fn = 60);\n        // light texture rings\n        for (r = [seat_diameter/4, seat_diameter/3, seat_diameter/2.5])\n            translate([0, 0, -0.1])\n                cylinder(h = 2.2, d = r * 2, $fn = 60);\n    }\n}\n\n// Fabric holder ring under seat\nmodule seat_ring() {\n    difference() {\n        cylinder(h = 4, d = seat_diameter + 4, $fn = 60);\n        cylinder(h = 5, d = seat_diameter, $fn = 60);\n    }\n}\n\n// Triangular brace between legs\nmodule brace() {\n    difference() {\n        union() {\n            for (a = [0, 120, 240])\n                rotate([0, 0, a])\n                    translate([seat_diameter/2 * 0.7, 0, 0])\n                        cube([seat_diameter * 0.7, brace_thick, 5], center = true);\n        }\n        // center hole\n        cylinder(h = 6, d = 10, $fn = 30);\n    }\n}\n\n// Assemble stool\nunion() {\n    // central hub\n    hub();\n    \n    // three legs\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([0, 0, 0])\n                leg();\n    \n    // seat assembly on top\n    translate([0, 0, 10 + 1])\n        seat();\n    translate([0, 0, 10 + 1])\n        seat_ring();\n    \n    // lower brace 40 mm above feet\n    translate([0, 0, -leg_length + 40])\n        brace();\n}",
    "renders": true
  },
  {
    "furniture": "foldstool",
    "openscad_code": "// Foldstool - 3D printable folding stool\n// Realistic style, medium complexity\n\n// Dimensions (mm)\nleg_length = 100;\nleg_width = 12;\nleg_thickness = 8;\nseat_size = 120;\nseat_thickness = 5;\nhinge_diameter = 10;\nhinge_length = 15;\nsupport_bar_width = 6;\nsupport_bar_thickness = 4;\n\n// Leg module with rounded edges\nmodule leg() {\n    // Main leg\n    difference() {\n        // Rounded rectangular leg\n        translate([0, 0, leg_length/2])\n            minkowski() {\n                cube([leg_width, leg_thickness, leg_length], center=true);\n                sphere(r=2);\n            }\n        \n        // Hinge hole\n        translate([0, 0, leg_length - 20])\n            rotate([0, 90, 0])\n                cylinder(h=leg_width + 2, r=hinge_diameter/2, center=true, $fn=16);\n        \n        // Support bar hole\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n                cylinder(h=leg_thickness + 2, r=support_bar_width/2, center=true, $fn=12);\n    }\n}\n\n// Seat module with rounded corners\nmodule seat() {\n    difference() {\n        // Main seat\n        minkowski() {\n            cube([seat_size, seat_size, seat_thickness], center=true);\n            sphere(r=3);\n        }\n        \n        // Hinge holes for legs\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([seat_size/2 - 15, 0, 0])\n                    cylinder(h=seat_thickness + 2, r=hinge_diameter/2, center=true, $fn=16);\n        }\n        \n        // Finger grip hole\n        translate([0, 0, 0])\n            cylinder(h=seat_thickness + 2, r=12, center=true, $fn=32);\n    }\n}\n\n// Hinge pin\nmodule hinge_pin() {\n    cylinder(h=hinge_length, r=hinge_diameter/2 - 0.5, center=true, $fn=16);\n}\n\n// Support bar\nmodule support_bar() {\n    cube([support_bar_width, 60, support_bar_thickness], center=true);\n}\n\n// Assemble the foldstool\nunion() {\n    // Seat\n    seat();\n    \n    // Legs with hinges\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([seat_size/2 - 15, 0, 0])\n                rotate([90, 0, 0])\n                    union() {\n                        leg();\n                        \n                        // Hinge pins\n                        translate([0, 0, leg_length - 20])\n                            rotate([0, 90, 0])\n                                hinge_pin();\n                    }\n    }\n    \n    // Support bars\n    translate([0, 0, -seat_thickness/2 - 15])\n        rotate([0, 0, 45])\n            support_bar();\n    \n    translate([0, 0, -seat_thickness/2 - 15])\n        rotate([0, 0, -45])\n            support_bar();\n}",
    "renders": true
  },
  {
    "furniture": "backstool",
    "openscad_code": "// Backstool – a simple stool with a backrest\n// Overall printable size ~100 mm tall\n\n// Parameters (mm)\nseat_w = 70;\nseat_d = 65;\nseat_h = 8;\n\nleg_h = 60;\nleg_w = 6;\nleg_d = 6;\n\nbackrest_h = 40;\nbackrest_th = 6;\nslat_w = 4;\nslat_gap = 6;\nnum_slats = 5;\n\nwall = 2; // minimum wall thickness for printing\n\nmodule stool() {\n    // seat plank\n    translate([0, 0, leg_h])\n        cube([seat_w, seat_d, seat_h], center = true);\n\n    // four legs\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (seat_w/2 - leg_w/2),\n                       y * (seat_d/2 - leg_d/2),\n                       leg_h/2])\n                cube([leg_w, leg_d, leg_h], center = true);\n\n    // leg stretchers – front & back\n    translate([0, (seat_d/2 - leg_d/2), leg_h/2])\n        cube([seat_w - leg_w, leg_d, wall], center = true);\n    translate([0, -(seat_d/2 - leg_d/2), leg_h/2])\n        cube([seat_w - leg_w, leg_d, wall], center = true);\n\n    // side stretchers\n    translate([(seat_w/2 - leg_w/2), 0, leg_h/3])\n        cube([wall, seat_d - leg_d, leg_w], center = true);\n    translate([-(seat_w/2 - leg_w/2), 0, leg_h/3])\n        cube([wall, seat_d - leg_d, leg_w], center = true);\n}\n\nmodule backrest() {\n    // two upright posts\n    translate([seat_w/2 - backrest_th, 0, leg_h + backrest_h/2])\n        cube([backrest_th, seat_d/3, backrest_h], center = true);\n    translate([-(seat_w/2 - backrest_th), 0, leg_h + backrest_h/2])\n        cube([backrest_th, seat_d/3, backrest_h], center = true);\n\n    // horizontal slats\n    for (i = [0 : num_slats-1]) {\n        z = leg_h + seat_h + backrest_th/2 + i*(slat_w + slat_gap);\n        translate([0, 0, z])\n            cube([seat_w - 2*backrest_th, backrest_th, slat_w], center = true);\n    }\n}\n\nunion() {\n    stool();\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "armrest",
    "openscad_code": "// OpenSCAD Armrest for small chair / furniture piece\n// Overall size: ~110 × 50 × 70 mm  (3D-printable)\n\n// Parameters\nwall = 2;               // wall thickness for 3D printability\nseat_h = 8;             // top cushion height\nframe_h = 70;           // total height from ground\narm_w = 50;             // armrest width\narm_l = 110;            // armrest length (depth)\nleg_size = 12;          // square leg size\nstretcher_offset = 30;  // height of front stretcher\n\nmodule leg() {\n    // Simple square leg with gentle taper for style\n    linear_extrude(height = frame_h - seat_h, scale = [1, 0.9])\n        offset(-wall/2)\n            square([leg_size, leg_size], center = true);\n}\n\nmodule legs_frame() {\n    // Four legs plus stretchers for stability\n    translate([-arm_l/2 + leg_size/2 + wall, -arm_w/2 + leg_size/2 + wall, 0])\n        leg();\n    translate([ arm_l/2 - leg_size/2 - wall, -arm_w/2 + leg_size/2 + wall, 0])\n        leg();\n    translate([-arm_l/2 + leg_size/2 + wall,  arm_w/2 - leg_size/2 - wall, 0])\n        leg();\n    translate([ arm_l/2 - leg_size/2 - wall,  arm_w/2 - leg_size/2 - wall, 0])\n        leg();\n\n    // Front stretcher (square rod between front legs)\n    translate([0, -arm_w/2 + leg_size/2 + wall, stretcher_offset])\n        cube([arm_l - leg_size - 2*wall, wall, wall], center = true);\n\n    // Side stretchers\n    translate([-arm_l/2 + leg_size/2 + wall, 0, stretcher_offset])\n        rotate([0, 0, 90])\n            cube([arm_w - leg_size - 2*wall, wall, wall], center = true);\n    translate([ arm_l/2 - leg_size/2 - wall, 0, stretcher_offset])\n        rotate([0, 0, 90])\n            cube([arm_w - leg_size - 2*wall, wall, wall], center = true);\n}\n\nmodule arm_pad() {\n    // Cushioned top pad with rounded edges\n    translate([0, 0, frame_h])\n        minkowski() {\n            cube([arm_l - 2*wall, arm_w - 2*wall, seat_h - wall], center = true);\n            sphere(wall);\n        }\n}\n\nmodule support_brackets() {\n    // Triangular corner brackets under the pad for realism\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(arm_l/2 - leg_size - wall), y*(arm_w/2 - leg_size - wall), frame_h - seat_h/2])\n                rotate([0, 0, x*y*45])\n                    linear_extrude(height = wall)\n                        polygon(points = [[0,0], [10,0], [0,10]]);\n}\n\n// Assembly\nunion() {\n    legs_frame();\n    arm_pad();\n    support_brackets();\n}",
    "renders": true
  },
  {
    "furniture": "headrest",
    "openscad_code": "// Headrest for an office chair – printable, realistic, medium complexity\n// Overall size ~120 mm wide x 75 mm deep x 100 mm tall\n\n// --- PARAMETERS ----------------------------------------------------------\nwall = 2;              // shell thickness for printability\ncorner_r = 5;          // corner radius for fillets\npost_d = 12;           // support post diameter\npost_h = 25;           // post height\nback_w = 110;          // back support width\nback_h = 80;           // back support height\nback_d = 45;           // back support depth\ncushion_h = 20;        // soft cushion thickness\nmesh_pitch = 8;        // spacing of mesh holes\nmesh_rows = 3;         // number of mesh hole rows\nmesh_cols = 10;        // number of mesh hole columns\n\n// --- UTILITY MODULES -----------------------------------------------------\nmodule fillet_cube(size, r) {\n    // rounded cube via hull of spheres\n    hull() {\n        for(dx=[0,1], dy=[0,1], dz=[0,1])\n            translate([dx*size.x-r, dy*size.y-r, dz*size.z-r])\n                sphere(r=r);\n    }\n}\n\n// --- MAIN PARTS ----------------------------------------------------------\nmodule post() {\n    // main support post\n    cylinder(d=post_d, h=post_h, $fn=32);\n}\n\nmodule back_shell() {\n    // hollow curved back support shell\n    difference() {\n        // outer shell\n        minkowski() {\n            scale([1, back_d/back_w, back_h/back_w])\n                sphere(d=back_w, $fn=64);\n            cube([wall,wall,wall], center=true);\n        }\n\n        // inner cavity\n        minkowski() {\n            scale([(back_w-2*wall)/back_w,\n                   (back_d-2*wall)/back_d,\n                   (back_h-2*wall)/back_h])\n                sphere(d=back_w-2*wall, $fn=64);\n            cube([wall,wall,wall], center=true);\n        }\n    }\n}\n\nmodule cushion() {\n    // soft cushion pad\n    translate([0, 0, back_h/2 + cushion_h/2])\n        difference() {\n            fillet_cube([back_w-10, back_d-10, cushion_h], corner_r);\n            \n            // mesh vent holes pattern\n            for(i=[0:mesh_rows-1], j=[0:mesh_cols-1])\n                translate([\n                    -back_w/2 + 10 + j*mesh_pitch,\n                    0,\n                    back_h/2 + cushion_h/2 - 5 - i*mesh_pitch\n                ])\n                    rotate([90,0,0])\n                        cylinder(d=3, h=back_d-10+1, $fn=16);\n        }\n}\n\nmodule adjustment_slots() {\n    // two vertical slots for height adjustment teeth\n    for(side=[-1,1])\n        translate([side*(post_d/2 + 2), 0, post_h/2])\n            cube([wall+1, back_d*0.8, post_h], center=true);\n}\n\n// --- ASSEMBLY ------------------------------------------------------------\nunion() {\n    // post and teeth\n    post();\n    adjustment_slots();\n\n    // back support with cushion\n    translate([0, 0, post_h + back_h/2])\n        union() {\n            back_shell();\n            cushion();\n        }\n}",
    "renders": true
  },
  {
    "furniture": "slipper",
    "openscad_code": "// Realistic Slipper Chair - Medium Complexity\n// Overall dimensions: ~80mm width x ~85mm depth x ~75mm height\n\n// Chair parameters\nseat_width = 60;\nseat_depth = 55;\nseat_thickness = 4;\nback_height = 45;\nback_thickness = 4;\nleg_height = 35;\nleg_thickness = 3;\narmrest_height = 25;\narmrest_width = 8;\n\nmodule chair_frame() {\n    // Rear legs - angled for stability\n    translate([-seat_width/2 + leg_thickness/2, 0, 0]) {\n        rotate([0, -10, 0])\n        cube([leg_thickness, leg_thickness, leg_height]);\n    }\n    \n    translate([seat_width/2 - leg_thickness/2, 0, 0]) {\n        rotate([0, -10, 0])\n        cube([leg_thickness, leg_thickness, leg_height]);\n    }\n    \n    // Front legs\n    translate([-seat_width/2 + leg_thickness/2, seat_depth - leg_thickness, 0]) {\n        cube([leg_thickness, leg_thickness, leg_height]);\n    }\n    \n    translate([seat_width/2 - leg_thickness/2, seat_depth - leg_thickness, 0]) {\n        cube([leg_thickness, leg_thickness, leg_height]);\n    }\n    \n    // Front support bar\n    translate([0, seat_depth - leg_thickness/2, leg_height/2])\n    cube([seat_width - leg_thickness*2, leg_thickness, leg_thickness]);\n    \n    // Side support bars\n    translate([-seat_width/2 + leg_thickness/2, seat_depth/2, leg_height/2])\n    cube([leg_thickness, seat_depth - leg_thickness, leg_thickness]);\n    \n    translate([seat_width/2 - leg_thickness/2, seat_depth/2, leg_height/2])\n    cube([leg_thickness, seat_depth - leg_thickness, leg_thickness]);\n}\n\nmodule seat_cushion() {\n    // Main seat cushion with rounded edges\n    translate([0, seat_depth/2, leg_height + seat_thickness/2]) {\n        difference() {\n            // Base cushion shape\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n            \n            // Rounded front edge\n            translate([0, seat_depth/2 - 2, 0])\n            rotate([90, 0, 0])\n            cylinder(h=seat_width, r=2, center=true);\n        }\n        \n        // Cushion tufting details\n        for(x=[-20, 0, 20]) {\n            for(y=[-15, 0, 15]) {\n                translate([x, y, seat_thickness/2 - 1])\n                sphere(r=2);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Curved backrest\n    translate([0, -5, leg_height + seat_thickness + back_height/2]) {\n        rotate([10, 0, 0])\n        difference() {\n            // Main backrest\n            cube([seat_width - 10, back_thickness, back_height], center=true);\n            \n            // Top curve\n            translate([0, 0, back_height/2])\n            sphere(r=back_thickness*2);\n            \n            // Bottom curve\n            translate([0, 0, -back_height/2])\n            sphere(r=back_thickness*2);\n        }\n        \n        // Back padding\n        translate([0, back_thickness/2 + 2, 0])\n        scale([0.9, 0.8, 0.9])\n        cube([seat_width - 15, back_thickness, back_height - 5], center=true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - armrest_width/2, seat_depth/2, leg_height + armrest_height/2]) {\n        cube([armrest_width, seat_depth/2, armrest_height]);\n        \n        // Armrest support\n        translate([armrest_width/2, 0, -armrest_height/2])\n        rotate([0, 45, 0])\n        cube([leg_thickness, armrest_height/2, armrest_height/2]);\n    }\n    \n    // Right armrest\n    translate([seat_width/2 + armrest_width/2, seat_depth/2, leg_height + armrest_height/2]) {\n        mirror([1, 0, 0])\n        cube([armrest_width, seat_depth/2, armrest_height]);\n        \n        // Armrest support\n        translate([-armrest_width/2, 0, -armrest_height/2])\n        rotate([0, -45, 0])\n        cube([leg_thickness, armrest_height/2, armrest_height/2]);\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_cushion();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "barstool",
    "openscad_code": "// Barstool with round seat, 3 legs, and footrest ring\n// Overall height ~90 mm, seat Ø 40 mm, built for 3D printing (2 mm walls)\n\n$fn = 32;              // Smooth curves\n\nseat_d   = 40;         // Seat diameter\nseat_t   = 4;          // Seat thickness\nleg_h    = 75;         // Leg length below seat\nleg_r    = 2.5;        // Leg radius\nfoot_r   = 20;         // Footrest ring radius\nfoot_t   = 3;          // Footrest thickness\nback_h   = 35;         // Backrest post height above seat\nback_w   = 30;         // Backrest width\nback_t   = 3;          // Backrest thickness\n\n// Simple round cushion profile\nmodule cushioned_seat(dia, thick) {\n    difference() {\n        cylinder(h = thick, r = dia/2, center = true);\n        translate([0,0,-thick/2 + 1])\n            cylinder(h = thick - 1, r = dia/2 - 2);  // Hollow cavity\n    }\n}\n\n// Tapered leg with slight chamfer on bottom\nmodule stool_leg(len, rad) {\n    translate([0,0,len/2])\n        cylinder(h = len, r1 = rad, r2 = rad*0.9);\n}\n\n// Footrest ring\nmodule foot_ring(od, thick, leg_r) {\n    difference() {\n        cylinder(h = thick, r = od, center = true);\n        // Cutouts for legs\n        for(a = [0:120:359])\n            rotate([0,0,a])\n                translate([od - leg_r - 1, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h = 2*leg_r + 2, r = leg_r + 1, center = true);\n    }\n}\n\n// Backrest support arch\nmodule backrest(width, height, thick) {\n    translate([0, 0, height/2])\n        difference() {\n            union() {\n                // Two vertical posts\n                translate([-width/2 + thick/2, 0, 0])\n                    cube([thick, thick, height], center = true);\n                translate([ width/2 - thick/2, 0, 0])\n                    cube([thick, thick, height], center = true);\n                // Arc\n                translate([0, -thick/2, height/2 - thick/2])\n                    rotate([90,0,0])\n                        cylinder(h = width - thick, r = thick/2, center = true);\n            }\n            // Hollow center for printability\n            translate([0, 0, 0])\n                cube([width - 2*thick, thick + 1, height - 2*thick], center = true);\n        }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0,0,leg_h + seat_t/2])\n        cushioned_seat(seat_d, seat_t);\n\n    // Legs\n    for(a = [0:120:359])\n        rotate([0,0,a])\n            translate([seat_d/2 * 0.6, 0, 0])\n                stool_leg(leg_h, leg_r);\n\n    // Footrest\n    translate([0,0,leg_h/2])\n        foot_ring(foot_r, foot_t, leg_r);\n\n    // Backrest\n    translate([0, seat_d/2 - back_t/2, leg_h + seat_t])\n        backrest(back_w, back_h, back_t);\n}",
    "renders": true
  },
  {
    "furniture": "counter",
    "openscad_code": "// Counter with realistic proportions and 3D-printable features\n// Overall size: 100mm wide x 50mm deep x 75mm high\n\n$fn = 32;\n\n// Main counter body\nmodule counter_body() {\n    // Top surface with rounded edges\n    difference() {\n        // Main block\n        translate([0, 0, 74])\n        cube([100, 50, 2], center=true);\n        \n        // Rounded edge cutouts\n        translate([-48, -23, 73])\n        cylinder(h=4, r=2);\n        translate([48, -23, 73])\n        cylinder(h=4, r=2);\n        translate([-48, 23, 73])\n        cylinder(h=4, r=2);\n        translate([48, 23, 73])\n        cylinder(h=4, r=2);\n    }\n}\n\n// Front panel with drawer faces\nmodule front_panel() {\n    // Main panel\n    translate([0, 24, 35])\n    cube([96, 2, 38], center=true);\n    \n    // Drawer faces\n    for(i = [0:1]) {\n        translate([-25 + i*50, 25, 55 - i*20])\n        cube([45, 2.5, 15], center=true);\n        \n        // Drawer handles\n        translate([-25 + i*50, 26.5, 55 - i*20])\n        cube([20, 1, 2], center=true);\n    }\n}\n\n// Side panels\nmodule side_panels() {\n    // Left side\n    translate([-48, 0, 35])\n    cube([2, 46, 38], center=true);\n    \n    // Right side\n    translate([48, 0, 35])\n    cube([2, 46, 38], center=true);\n}\n\n// Back panel\nmodule back_panel() {\n    translate([0, -24, 35])\n    cube([96, 2, 38], center=true);\n}\n\n// Support structure\nmodule support_frame() {\n    // Front support beam\n    translate([0, 20, 16])\n    cube([92, 2, 2], center=true);\n    \n    // Back support beam\n    translate([0, -20, 16])\n    cube([92, 2, 2], center=true);\n    \n    // Side support beams\n    translate([-46, 0, 16])\n    cube([2, 36, 2], center=true);\n    \n    translate([46, 0, 16])\n    cube([2, 36, 2], center=true);\n}\n\n// Legs\nmodule legs() {\n    positions = [[-45, -20], [45, -20], [-45, 20], [45, 20]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 8])\n        cylinder(h=16, r=3);\n    }\n}\n\n// Shelf inside\nmodule inner_shelf() {\n    translate([0, 0, 30])\n    cube([90, 40, 2], center=true);\n}\n\n// Assembly\nunion() {\n    counter_body();\n    front_panel();\n    side_panels();\n    back_panel();\n    support_frame();\n    legs();\n    inner_shelf();\n}",
    "renders": true
  },
  {
    "furniture": "highchair",
    "openscad_code": "// Realistic 3D-Printable Highchair – medium complexity\n// Overall size ~80 mm tall for easy printing\n\n$fa = 2; $fs = 0.5;\n\n// Parameters --------------------------------------------------\nseatH = 26;\nbackH = 35;\nlegH  = 35;\nlegT  = 3;               // wall/layer thickness for printing\nseatW = 30;\nseatD = 26;\ntrayT = 2;\ntrayGap = 8;            // space between seat and tray\narmH  = 10;\n\n// Helper module for hollowed cylinders (tubes) ----------------\nmodule tube(h, r_out, r_in){\n    difference(){\n        cylinder(h=h, r=r_out, center=true);\n        cylinder(h=h+0.2, r=r_in, center=true);\n    }\n}\n\n// Leg module --------------------------------------------------\nmodule legPair(){\n    // single hollow rectangular leg\n    module singleLeg(){\n        difference(){\n            cube([legT, legT, legH], center=true);\n            translate([0,0,1]) cube([legT-1.8, legT-1.8, legH-2], center=true);\n        }\n    }\n    \n    // two legs with cross-brace\n    translate([-seatW/2+legT/2, -seatD/2+legT/2, 0])\n        singleLeg();\n    translate([ seatW/2-legT/2, -seatD/2+legT/2, 0])\n        singleLeg();\n    \n    // rear legs\n    translate([-seatW/2+legT/2, seatD/2-legT/2, 0])\n        singleLeg();\n    translate([ seatW/2-legT/2, seatD/2-legT/2, 0])\n        singleLeg();\n    \n    // front cross-brace for stability\n    translate([0, -seatD/2+legT/2, -legH/2+legT/2])\n        rotate([90,0,0])\n            tube(h=seatW-legT, r_out=legT/2, r_in=legT/2-1);\n}\n\n// Seat module -------------------------------------------------\nmodule seat(){\n    difference(){\n        // main seat plate\n        translate([0,0,seatH/2])\n            cube([seatW, seatD, seatH], center=true);\n        // hollow out bottom\n        translate([0,0,seatH/2-1])\n            cube([seatW-3.6, seatD-3.6, seatH-2], center=true);\n    }\n}\n\n// Backrest ----------------------------------------------------\nmodule backrest(){\n    difference(){\n        // back panel\n        translate([0, -seatD/2+1, seatH+backH/2])\n            cube([seatW-2, 2, backH], center=true);\n        // cutout pattern for realism\n        for(x=[-seatW/3, 0, seatW/3])\n            translate([x, -seatD/2+1, seatH+backH/2])\n                cube([4, 3, backH-4], center=true);\n    }\n}\n\n// Tray + arms -------------------------------------------------\nmodule tray(){\n    translate([0, seatD/2+trayGap, seatH+trayT/2+armH/2])\n        difference(){\n            // tray top\n            cube([seatW+4, seatD/2, trayT], center=true);\n            // hollow underneath\n            cube([seatW+4-3.6, seatD/2-3.6, trayT+0.2], center=true);\n        }\n    // arm supports\n    for(side=[-1,1])\n        translate([side*(seatW/2-2), seatD/2+trayGap/2, seatH+armH/2])\n            difference(){\n                cube([4, trayGap, armH], center=true);\n                cube([4-1.8, trayGap-1.8, armH-2], center=true);\n            }\n}\n\n// Assembly ----------------------------------------------------\nunion(){\n    legPair();\n    seat();\n    backrest();\n    tray();\n}",
    "renders": true
  },
  {
    "furniture": "babyseat",
    "openscad_code": "// Babyseat Furniture Item - Realistic Style\n// Overall dimensions: 80mm width x 75mm depth x 85mm height\n// Wall thickness: 2mm throughout\n\n// Main seat shell with ergonomic curves\nmodule seat_shell() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-35, -30, 0])\n                cylinder(h=45, r1=35, r2=32, $fn=50);\n            translate([35, -30, 0])\n                cylinder(h=45, r1=35, r2=32, $fn=50);\n            translate([-35, 30, 0])\n                cylinder(h=45, r1=35, r2=32, $fn=50);\n            translate([35, 30, 0])\n                cylinder(h=45, r1=35, r2=32, $fn=50);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            hull() {\n                translate([-30, -25, 2])\n                    cylinder(h=41, r1=30, r2=27, $fn=50);\n                translate([30, -25, 2])\n                    cylinder(h=41, r1=30, r2=27, $fn=50);\n                translate([-30, 25, 2])\n                    cylinder(h=41, r1=30, r2=27, $fn=50);\n                translate([30, 25, 2])\n                    cylinder(h=41, r1=30, r2=27, $fn=50);\n            }\n        \n        // Leg holes\n        for(x = [-15, 15]) {\n            translate([x, 25, 0])\n                cylinder(h=50, r=10, $fn=30);\n        }\n    }\n}\n\n// Backrest with safety bar\nmodule backrest() {\n    union() {\n        // Main backrest\n        difference() {\n            translate([-38, -35, 40])\n                cube([76, 5, 45]);\n            translate([-36, -33, 42])\n                cube([72, 1, 41]);\n        }\n        \n        // Safety bar\n        translate([0, -30, 65])\n            rotate([90, 0, 0])\n                cylinder(h=60, r=4, $fn=20);\n        \n        // Bar supports\n        for(x = [-20, 20]) {\n            translate([x, -30, 40])\n                cube([4, 6, 25]);\n        }\n    }\n}\n\n// Support legs\nmodule legs() {\n    for(x = [-25, 25])\n    for(y = [-20, 20]) {\n        translate([x, y, 0])\n            cylinder(h=10, r=4, $fn=12);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([side * 38, 0, 30])\n            rotate([0, 15 * side, 0])\n                cube([4, 20, 15]);\n    }\n}\n\n// Seat cushion detail\nmodule cushion() {\n    translate([0, 0, 5])\n        difference() {\n            cube([50, 40, 8], center=true);\n            for(i = [1:3])\n                for(j = [1:3]) {\n                    translate([-20 + i * 15, -15 + j * 10, 3])\n                        sphere(r=3, $fn=20);\n                }\n        }\n}\n\n// Assembly\nunion() {\n    seat_shell();\n    backrest();\n    legs();\n    armrests();\n    cushion();\n}",
    "renders": true
  },
  {
    "furniture": "booster",
    "openscad_code": "// Booster seat for children – realistic style, medium complexity\n// Safe 3D-printable model, no large overhangs, 2 mm walls\n// Overall footprint ≈ 180 × 200 mm, height ≈ 150 mm\n\n// -------------------------------------\n// Parameters\n// -------------------------------------\nseat_w = 180;            // overall width\nseat_d = 200;            // overall depth\nseat_h = 150;            // overall height\n\nwall_t = 2;              // uniform wall thickness\nleg_clear = 10;          // clearance below seat for adult chair legs\nleg_r = 8;               // radius of booster legs\nleg_h = seat_h - leg_clear - wall_t;\n\nback_h = 70;             // back-rest height above seat\nback_t = wall_t;         // back-rest thickness\nrail_h = 30;             // safety rail in front\n\n// -------------------------------------\n// Main assembly\n// -------------------------------------\nmodule booster_seat() {\n    difference() {\n        // --- Outer shell (hollow) ---\n        union() {\n            // Seat pan\n            translate([0, 0, leg_h])\n                cube([seat_w, seat_d, wall_t], center = true);\n\n            // Back rest\n            translate([0, seat_d/2 - back_t/2, leg_h + back_h/2])\n                cube([seat_w, back_t, back_h], center = true);\n\n            // Front safety rail\n            translate([0, -seat_d/2 + wall_t/2, leg_h + rail_h/2])\n                cube([seat_w - 40, wall_t, rail_h], center = true);\n        }\n\n        // --- Hollow out interior ---\n        translate([0, 0, leg_h/2])\n            cube([seat_w - 2*wall_t, seat_d - 2*wall_t, leg_h + wall_t + 10], center = true);\n\n        // --- Cutouts for adult chair legs ---\n        for (x = [-seat_w/2 + 30, seat_w/2 - 30])\n            translate([x, 0, leg_h/2])\n                cube([20, seat_d + 1, leg_h + 1], center = true);\n    }\n\n    // ---------------------------------\n    // Support legs (4 corners)\n    // ---------------------------------\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, leg_h/2])\n            cylinder(h = leg_h, r = leg_r, center = true, $fn = 20);\n    }\n\n    // Add legs\n    leg_pos = [\n        [ seat_w/2 - leg_r,  seat_d/2 - leg_r],\n        [-seat_w/2 + leg_r,  seat_d/2 - leg_r],\n        [ seat_w/2 - leg_r, -seat_d/2 + leg_r],\n        [-seat_w/2 + leg_r, -seat_d/2 + leg_r]\n    ];\n    for (p = leg_pos) leg(p[0], p[1]);\n\n    // ---------------------------------\n    // Reinforcing ribs under seat\n    // ---------------------------------\n    rib_w = wall_t;\n    rib_h = 15;\n\n    // longitudinal rib\n    translate([0, 0, leg_h - rib_h/2])\n        cube([seat_w - 2*leg_r, rib_w, rib_h], center = true);\n\n    // transverse ribs\n    for (y = [-seat_d/2 + leg_r + 10, seat_d/2 - leg_r - 10]) {\n        translate([0, y, leg_h - rib_h/2])\n            cube([rib_w, seat_w - 2*leg_r, rib_h], center = true);\n    }\n\n    // ---------------------------------\n    // Seat cushion detail (slight dome)\n    // ---------------------------------\n    translate([0, 0, leg_h + wall_t + 5])\n        scale([1, 1, 0.3])\n            sphere(d = seat_w - 30, $fn = 40);\n}\n\n// Render the model\nbooster_seat();",
    "renders": true
  },
  {
    "furniture": "carrel",
    "openscad_code": "// Carrel (study desk with privacy sides)\n// 3D printable, 100mm wide x 80mm deep x 100mm tall\n// Wall thickness 2mm, no overhangs\n\nmodule carrel() {\n    // Main desktop\n    difference() {\n        // Desktop top\n        translate([0,0,74]) cube([100,80,2], center=true);\n        \n        // Cable grommet\n        translate([0,15,75]) cylinder(h=3, d=10, $fn=32);\n    }\n    \n    // Desktop support structure\n    difference() {\n        // Front support beam\n        translate([0,30,63]) cube([96,2,12], center=true);\n        \n        // Notch for left side panel\n        translate([-45,30,63]) cube([6,4,14], center=true);\n    }\n    \n    difference() {\n        // Back support beam\n        translate([0,-30,63]) cube([96,2,12], center=true);\n        \n        // Notch for left side panel\n        translate([-45,-30,63]) cube([6,4,14], center=true);\n    }\n    \n    // Left privacy panel\n    difference() {\n        // Main panel\n        translate([-48,0,37]) cube([2,76,74], center=true);\n        \n        // Bottom cutout for feet clearance\n        translate([-48,0,5]) cube([6,60,10], center=true);\n    }\n    \n    // Right privacy panel\n    difference() {\n        // Main panel\n        translate([48,0,37]) cube([2,76,74], center=true);\n        \n        // Bottom cutout for feet clearance\n        translate([48,0,5]) cube([6,60,10], center=true);\n    }\n    \n    // Back panel\n    difference() {\n        // Main back panel\n        translate([0,-38,37]) cube([96,2,74], center=true);\n        \n        // Notches for side panels\n        translate([-48,-38,37]) cube([4,4,74], center=true);\n        translate([48,-38,37]) cube([4,4,74], center=true);\n    }\n    \n    // Legs\n    module leg(x,y) {\n        // Vertical post\n        difference() {\n            translate([x,y,37]) cube([6,6,74], center=true);\n            \n            // Screw clearance holes (optional, won't print at this scale)\n            translate([x,y,65]) cylinder(h=20, d=2, $fn=16);\n        }\n    }\n    \n    // Four legs\n    leg(-45, -35);\n    leg(45, -35);\n    leg(-45, 35);\n    leg(45, 35);\n    \n    // Shelf\n    translate([0,0,45]) cube([92,76,2], center=true);\n    \n    // Shelf support ribs\n    for (x = [-30, -10, 10, 30]) {\n        translate([x,0,44]) cube([2,76,2], center=true);\n    }\n    \n    // Small drawer unit\n    module drawer() {\n        difference() {\n            // Drawer front\n            translate([20,25,60]) cube([30,2,12], center=true);\n            \n            // Drawer pull\n            translate([20,26,60]) cylinder(h=3, d=8, $fn=16);\n        }\n        \n        // Drawer sides\n        translate([5,25,60]) cube([2,28,12], center=true);\n        translate([35,25,60]) cube([2,28,12], center=true);\n        \n        // Drawer back\n        translate([20,11,60]) cube([30,2,12], center=true);\n        \n        // Drawer bottom\n        translate([20,25,54]) cube([30,28,2], center=true);\n    }\n    \n    drawer();\n}\n\n// Main assembly\ncarrel();",
    "renders": true
  },
  {
    "furniture": "porchswing",
    "openscad_code": "// Porch Swing 3D Model\n// Designed for 3D printing - overall length 80mm\n\n// Parameters\n$fn = 32;\nseat_width = 60;\nseat_depth = 35;\nseat_thickness = 3;\nback_height = 40;\nback_thickness = 3;\narm_width = 4;\narm_height = 15;\narm_length = 30;\nleg_size = 4;\nchain_link_size = 3;\nchain_length = 20;\nframe_thickness = 2;\n\n// Main swing module\nmodule porch_swing() {\n    // Seat frame\n    difference() {\n        // Outer frame\n        cube([seat_width, seat_depth, seat_thickness]);\n        \n        // Hollow center\n        translate([frame_thickness, frame_thickness, -1])\n            cube([seat_width - 2*frame_thickness, seat_depth - 2*frame_thickness, seat_thickness + 2]);\n    }\n    \n    // Backrest\n    translate([0, seat_depth - frame_thickness, seat_thickness])\n        difference() {\n            cube([seat_width, back_thickness, back_height]);\n            // Slat pattern\n            for(i = [5:10:seat_width-10]) {\n                translate([i, -1, 5])\n                    cube([5, back_thickness + 2, back_height - 10]);\n            }\n        }\n    \n    // Armrests\n    // Left arm\n    translate([-arm_width/2, 0, 0])\n        cube([arm_width, arm_length, arm_height]);\n    \n    // Right arm\n    translate([seat_width - arm_width/2, 0, 0])\n        cube([arm_width, arm_length, arm_height]);\n    \n    // Support legs\n    // Front left\n    translate([5, 5, -leg_size])\n        cube([leg_size, leg_size, leg_size + 5]);\n    \n    // Front right\n    translate([seat_width - 5 - leg_size, 5, -leg_size])\n        cube([leg_size, leg_size, leg_size + 5]);\n    \n    // Back left\n    translate([5, seat_depth - 5 - leg_size, -leg_size])\n        cube([leg_size, leg_size, leg_size + 5]);\n    \n    // Back right\n    translate([seat_width - 5 - leg_size, seat_depth - 5 - leg_size, -leg_size])\n        cube([leg_size, leg_size, leg_size + 5]);\n    \n    // Chains\n    // Left chain links\n    for(i = [0:5:chain_length - 5]) {\n        translate([5, -5, seat_thickness + back_height + chain_length - i])\n            chain_link();\n    }\n    \n    // Right chain links\n    for(i = [0:5:chain_length - 5]) {\n        translate([seat_width - 5, -5, seat_thickness + back_height + chain_length - i])\n            chain_link();\n    }\n    \n    // Cushion\n    translate([frame_thickness, frame_thickness, seat_thickness])\n        cube([seat_width - 2*frame_thickness, seat_depth - 2*frame_thickness, 5]);\n}\n\n// Chain link module\nmodule chain_link() {\n    difference() {\n        // Outer ring\n        rotate([90, 0, 0])\n            cylinder(h = chain_link_size, r = chain_link_size/2, center = true);\n        \n        // Inner hollow\n        rotate([90, 0, 0])\n            cylinder(h = chain_link_size + 1, r = chain_link_size/2 - 1, center = true);\n    }\n}\n\n// Generate the swing\nporch_swing();",
    "renders": true
  },
  {
    "furniture": "glider",
    "openscad_code": "// Glider Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm width x 90mm depth x 100mm height\n\n// Base frame with curved rockers\nmodule rocker_base() {\n    // Left rocker\n    translate([-58, -40, 0]) {\n        difference() {\n            // Main curved rocker\n            rotate([90, 0, 0]) cylinder(h=100, r1=45, r2=45, $fn=50);\n            // Hollow out for thickness\n            translate([0, 0, 2]) rotate([90, 0, 0]) cylinder(h=96, r1=43, r2=43, $fn=50);\n            // Cut flat bottom\n            translate([0, -50, -45]) cube([100, 100, 10], center=true);\n        }\n    }\n    // Right rocker (mirrored)\n    mirror([1, 0, 0]) {\n        translate([-58, -40, 0]) {\n            difference() {\n                rotate([90, 0, 0]) cylinder(h=100, r1=45, r2=45, $fn=50);\n                translate([0, 0, 2]) rotate([90, 0, 0]) cylinder(h=96, r1=43, r2=43, $fn=50);\n                translate([0, -50, -45]) cube([100, 100, 10], center=true);\n            }\n        }\n    }\n}\n\n// Support frame connecting rockers\nmodule support_frame() {\n    // Front crossbar\n    translate([0, -35, 8]) {\n        cube([116, 4, 8], center=true);\n    }\n    // Rear crossbar\n    translate([0, 35, 8]) {\n        cube([116, 4, 8], center=true);\n    }\n    // Vertical supports\n    for(x = [-50, 50]) {\n        translate([x, -35, 25]) {\n            cube([4, 4, 34], center=true);\n        }\n        translate([x, 35, 25]) {\n            cube([4, 4, 34], center=true);\n        }\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    translate([0, 0, 45]) {\n        difference() {\n            // Main cushion\n            cube([100, 80, 12], center=true);\n            // Rounded edges\n            translate([0, 0, -1]) minkowski() {\n                cube([96, 76, 10], center=true);\n                sphere(2, $fn=20);\n            }\n        }\n    }\n}\n\n// Backrest cushion\nmodule backrest_cushion() {\n    translate([0, 35, 75]) {\n        rotate([15, 0, 0]) {\n            difference() {\n                // Main backrest\n                cube([100, 8, 60], center=true);\n                // Rounded edges\n                translate([0, 0, -1]) minkowski() {\n                    cube([96, 4, 56], center=true);\n                    sphere(2, $fn=20);\n                }\n            }\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([side * 52, 0, 60]) {\n            // Support post\n            cube([4, 4, 20], center=true);\n            // Armrest pad\n            translate([0, 0, 12]) {\n                rotate([0, 20 * side, 0]) {\n                    cube([30, 8, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    rocker_base();\n    support_frame();\n    \n    // Seating components\n    seat_cushion();\n    backrest_cushion();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "hammock",
    "openscad_code": "// Realistic Hammock - Medium Complexity\n// 3D printable version with 2mm wall thickness\n\n$fn = 64;\n\n// Overall dimensions\nhammock_length = 100;\nhammock_width = 40;\nstand_height = 40;\nframe_thickness = 3;\n\n// Hammock bed parameters\nbed_thickness = 2;\nrope_diameter = 1;\nrope_spacing = 4;\n\n// Stand parameters\npost_diameter = 4;\nbase_length = 60;\nbase_width = 35;\n\nmodule hammock_post(height, angle) {\n    // Main post\n    translate([-post_diameter/2, 0, 0])\n        rotate([0, angle, 0])\n        cylinder(h=height, d=post_diameter);\n    \n    // Base foot\n    translate([-base_length/2, -base_width/2, -2])\n        cube([base_length, base_width, 2]);\n    \n    // Support brace\n    translate([post_diameter/2, 0, height/2])\n        rotate([0, -angle, 0])\n        cube([height*0.7, frame_thickness, frame_thickness]);\n}\n\nmodule hammock_bed() {\n    // Main bed frame\n    difference() {\n        // Outer frame\n        cube([hammock_length, hammock_width, bed_thickness]);\n        \n        // Inner cutout\n        translate([bed_thickness, bed_thickness, -1])\n            cube([hammock_length-2*bed_thickness, hammock_width-2*bed_thickness, bed_thickness+2]);\n    }\n    \n    // Rope mesh pattern\n    for (i = [rope_spacing/2:rope_spacing:hammock_length-rope_spacing/2]) {\n        // Lengthwise ropes\n        translate([i, 0, bed_thickness/2])\n            cylinder(h=hammock_width, d=rope_diameter);\n        \n        // Cross ropes\n        for (j = [rope_spacing/2:rope_spacing:hammock_width-rope_spacing/2]) {\n            translate([0, j, bed_thickness/2])\n                rotate([90, 0, 0])\n                cylinder(h=hammock_length, d=rope_diameter);\n        }\n    }\n    \n    // End loops for hanging\n    translate([0, hammock_width/2, bed_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=6);\n    \n    translate([hammock_length, hammock_width/2, bed_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=6);\n}\n\nmodule hammock_stand() {\n    // Left stand\n    translate([0, 0, 0])\n        hammock_post(stand_height, 15);\n    \n    // Right stand\n    translate([hammock_length, 0, 0])\n        rotate([0, 0, 180])\n        hammock_post(stand_height, 15);\n    \n    // Cross support bar\n    translate([-post_diameter/2, 0, stand_height-2])\n        rotate([0, 15, 0])\n        cube([hammock_length+post_diameter, frame_thickness, frame_thickness]);\n}\n\n// Assemble the hammock\nunion() {\n    // Hammock stand\n    hammock_stand();\n    \n    // Hammock bed - slightly curved\n    translate([0, 0, stand_height-10])\n        rotate([-15, 0, 0])\n        translate([0, 0, -sin(15)*hammock_length/2])\n        hammock_bed();\n    \n    // Hanging ropes\n    translate([0, hammock_width/2, stand_height-10])\n        rotate([0, -15, 0])\n        cylinder(h=15, d=rope_diameter);\n    \n    translate([hammock_length, hammock_width/2, stand_height-10])\n        rotate([0, -15, 0])\n        cylinder(h=15, d=rope_diameter);\n}",
    "renders": true
  },
  {
    "furniture": "deckchair",
    "openscad_code": "// Deckchair - Realistic style, medium complexity\n// Approximate size: 100mm length, optimized for 3D printing\n\n$fn = 20;  // Smooth curves for 3D printing\n\n// Main module\nmodule deckchair() {\n    // Frame thickness\n    frame_thickness = 2;\n    \n    // Backrest assembly\n    translate([0, 0, 0])\n        backrest_assembly();\n    \n    // Seat assembly\n    translate([0, 0, 0])\n        seat_assembly();\n    \n    // Front legs\n    translate([5, 0, 0])\n        leg_pair(45);\n    \n    // Rear legs\n    translate([75, 0, 0])\n        leg_pair(30);\n    \n    // Armrests\n    translate([50, 25, 35])\n        rotate([0, 0, 30])\n        armrest();\n    translate([50, -25, 35])\n        rotate([0, 0, -30])\n        armrest();\n}\n\n// Backrest with fabric slats\nmodule backrest_assembly() {\n    // Backrest frame\n    difference() {\n        union() {\n            // Left vertical support\n            translate([70, 20, 0])\n                cube([frame_thickness, 3, 50]);\n            // Right vertical support\n            translate([70, -23, 0])\n                cube([frame_thickness, 3, 50]);\n            // Top horizontal bar\n            translate([70, 20, 47])\n                cube([frame_thickness, -43, 3]);\n            // Bottom horizontal bar\n            translate([70, 20, 0])\n                cube([frame_thickness, -43, 3]);\n        }\n    }\n    \n    // Fabric slats\n    for(i = [0:3]) {\n        translate([71, 18, 5 + i*10])\n            cube([2, -39, 8]);\n    }\n}\n\n// Seat assembly\nmodule seat_assembly() {\n    // Seat frame\n    difference() {\n        union() {\n            // Left side\n            translate([5, 20, 0])\n                cube([65, 3, frame_thickness]);\n            // Right side\n            translate([5, -23, 0])\n                cube([65, 3, frame_thickness]);\n            // Front support\n            translate([0, 20, 0])\n                cube([5, -43, frame_thickness]);\n            // Rear support\n            translate([65, 20, 0])\n                cube([5, -43, frame_thickness]);\n        }\n    }\n    \n    // Fabric strips\n    for(i = [0:5]) {\n        translate([10 + i*10, 18, 2])\n            cube([8, -39, 2]);\n    }\n}\n\n// Leg pair module\nmodule leg_pair(angle) {\n    // Left leg\n    translate([0, 18, 0])\n        leg(angle);\n    // Right leg\n    translate([0, -18, 0])\n        leg(angle);\n}\n\n// Single leg module\nmodule leg(angle) {\n    // Main leg post\n    rotate([0, angle, 0])\n        translate([0, 0, -20])\n            cylinder(h = 40, r1 = 2, r2 = 2);\n    \n    // Foot pad\n    translate([0, 0, -2])\n        rotate([0, angle, 0])\n            translate([0, 0, -20])\n                cylinder(h = 1, r1 = 3, r2 = 3);\n}\n\n// Armrest module\nmodule armrest() {\n    // Main armrest\n    cube([25, 5, 2]);\n    \n    // Support post\n    translate([10, 2.5, -15])\n        cylinder(h = 15, r1 = 2, r2 = 2);\n}\n\n// Render the deckchair\ndeckchair();",
    "renders": true
  },
  {
    "furniture": "lawnchair",
    "openscad_code": "// Lawnchair - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm wide x 70mm deep x 80mm tall\n\nchair_width = 60;\nchair_depth = 70;\nchair_height = 80;\nseat_height = 40;\nback_angle = 105;\n\n// Main frame\nmodule frame() {\n    // Front left leg\n    translate([-chair_width/2 + 3, -chair_depth/2 + 3, 0])\n        cylinder(h=seat_height, r=3, $fn=12);\n    \n    // Front right leg\n    translate([chair_width/2 - 3, -chair_depth/2 + 3, 0])\n        cylinder(h=seat_height, r=3, $fn=12);\n    \n    // Back left leg\n    translate([-chair_width/2 + 3, chair_depth/2 - 3, 0])\n        cylinder(h=chair_height, r=3, $fn=12);\n    \n    // Back right leg\n    translate([chair_width/2 - 3, chair_depth/2 - 3, 0])\n        cylinder(h=chair_height, r=3, $fn=12);\n    \n    // Front crossbar\n    translate([0, -chair_depth/2 + 3, seat_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width - 6, r=2, $fn=12);\n    \n    // Back crossbar\n    translate([0, chair_depth/2 - 3, seat_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width - 6, r=2, $fn=12);\n    \n    // Side crossbars\n    for(side = [-1, 1]) {\n        translate([side * chair_width/2 + side * -3, 0, seat_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=chair_depth - 6, r=2, $fn=12);\n    }\n}\n\n// Seat slats\nmodule seat() {\n    slat_width = 3;\n    gap = 2;\n    num_slats = floor((chair_width - 10) / (slat_width + gap));\n    \n    for(i = [0:num_slats-1]) {\n        translate([-chair_width/2 + 5 + i*(slat_width + gap), 0, seat_height])\n            cube([slat_width, chair_depth - 6, 2]);\n    }\n}\n\n// Backrest slats\nmodule backrest() {\n    slat_width = 3;\n    gap = 2;\n    num_slats = floor((chair_width - 10) / (slat_width + gap));\n    back_height = chair_height - seat_height;\n    \n    for(i = [0:num_slats-1]) {\n        translate([-chair_width/2 + 5 + i*(slat_width + gap), \n                  chair_depth/2 - 3, \n                  seat_height])\n            rotate([back_angle - 90, 0, 0])\n                cube([slat_width, back_height - 5, 2]);\n    }\n    \n    // Top backrest support\n    translate([0, chair_depth/2 - 10, chair_height - 3])\n        rotate([back_angle - 90, 0, 0])\n            cube([chair_width - 6, 4, 2]);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 - 2, 0, seat_height + 8])\n        cube([4, chair_depth/2, 2]);\n    \n    // Left support\n    translate([-chair_width/2 - 2, -chair_depth/4, seat_height])\n        cube([2, 2, 8]);\n    \n    // Right armrest\n    translate([chair_width/2 - 2, 0, seat_height + 8])\n        cube([4, chair_depth/2, 2]);\n    \n    // Right support\n    translate([chair_width/2, -chair_depth/4, seat_height])\n        cube([2, 2, 8]);\n}\n\n// Assembly\nunion() {\n    frame();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "campchair",
    "openscad_code": "// Campchair - realistic style, medium complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;\n\n// Main chair dimensions (realistic proportions for 3D print)\nchair_width = 50;\nchair_depth = 45;\nchair_height = 55;\nseat_thickness = 3;\nback_height = 30;\nleg_diameter = 4;\nfabric_thickness = 1;\n\nmodule leg_post(h = chair_height - seat_thickness) {\n    // Single leg post with realistic taper\n    cylinder(d1 = leg_diameter, d2 = leg_diameter * 0.8, h = h);\n}\n\nmodule leg_assembly() {\n    // Complete 4-leg frame with cross-bracing\n    union() {\n        // Front legs\n        translate([-chair_width/2 + leg_diameter, chair_depth/2 - leg_diameter/2, 0])\n            leg_post();\n        translate([chair_width/2 - leg_diameter, chair_depth/2 - leg_diameter/2, 0])\n            leg_post();\n        \n        // Rear legs (longer for backrest angle)\n        translate([-chair_width/2 + leg_diameter, -chair_depth/2 + leg_diameter/2, 0])\n            leg_post(h = chair_height - seat_thickness + back_height * 0.8);\n        translate([chair_width/2 - leg_diameter, -chair_depth/2 + leg_diameter/2, 0])\n            leg_post(h = chair_height - seat_thickness + back_height * 0.8);\n        \n        // Cross bracing between legs\n        // Front brace\n        translate([0, chair_depth/2 - leg_diameter/2, leg_diameter])\n            rotate([90, 0, 0])\n                cylinder(d = leg_diameter * 0.7, h = chair_width - leg_diameter * 2);\n        \n        // Side braces\n        translate([-chair_width/2 + leg_diameter, 0, leg_diameter])\n            rotate([90, 90, 0])\n                cylinder(d = leg_diameter * 0.7, h = chair_depth - leg_diameter);\n        translate([chair_width/2 - leg_diameter, 0, leg_diameter])\n            rotate([90, 90, 0])\n                cylinder(d = leg_diameter * 0.7, h = chair_depth - leg_diameter);\n    }\n}\n\nmodule seat_fabric() {\n    // Fabric seat with realistic sag\n    translate([0, 0, chair_height - seat_thickness])\n        scale([1, 1, 0.3])\n            cube([chair_width - leg_diameter * 2, chair_depth - leg_diameter * 2, seat_thickness], center = true);\n}\n\nmodule backrest_fabric() {\n    // Angled backrest fabric\n    translate([0, -chair_depth/3, chair_height + back_height/2])\n        rotate([15, 0, 0])\n            cube([chair_width - leg_diameter * 2, back_height, fabric_thickness], center = true);\n}\n\nmodule armrest() {\n    // Simple armrest with support\n    translate([chair_width/2, 0, chair_height + 5])\n        rotate([0, 0, 10])\n            cube([15, 3, 2]);\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    leg_assembly();\n    \n    // Seating surfaces\n    seat_fabric();\n    backrest_fabric();\n    \n    // Armrests (simplified for 3D printing)\n    armrest();\n    mirror([1, 0, 0])\n        armrest();\n}",
    "renders": true
  },
  {
    "furniture": "garden",
    "openscad_code": "// Garden Adirondack Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 110mm wide x 120mm deep x 100mm tall\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule adirondack_chair() {\n    // Chair assembly\n    union() {\n        // Seat slats\n        seat_assembly();\n        \n        // Backrest\n        backrest_assembly();\n        \n        // Arms\n        left_arm();\n        right_arm();\n        \n        // Legs\n        front_legs();\n        back_legs();\n        \n        // Support braces\n        support_braces();\n    }\n}\n\n// Seat assembly with multiple slats\nmodule seat_assembly() {\n    translate([0, 30, 45]) {\n        rotate([15, 0, 0]) {\n            // Seat frame\n            difference() {\n                cube([100, 80, 4], center=true);\n                translate([0, 0, -1]) cube([96, 76, 6], center=true);\n            }\n            \n            // Seat slats with 2mm thickness\n            for(i = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n                translate([i, 0, -2]) {\n                    difference() {\n                        cube([8, 76, 2], center=true);\n                        translate([0, 0, -1]) cube([6, 74, 4], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Backrest with curved top and slats\nmodule backrest_assembly() {\n    translate([0, -45, 75]) {\n        rotate([105, 0, 0]) {\n            // Backrest frame\n            difference() {\n                cube([100, 65, 4], center=true);\n                translate([0, 0, -1]) cube([96, 61, 6], center=true);\n            }\n            \n            // Backrest slats\n            for(i = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n                translate([i, 0, -2]) {\n                    difference() {\n                        cube([8, 57, 2], center=true);\n                        translate([0, 0, -1]) cube([6, 55, 4], center=true);\n                    }\n                }\n            }\n            \n            // Top rail (curved appearance)\n            translate([0, -28.5, 2]) {\n                difference() {\n                    cube([96, 6, 4], center=true);\n                    translate([0, 0, -1]) cube([94, 4, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Left arm with support\nmodule left_arm() {\n    translate([-55, 15, 65]) {\n        // Armrest\n        difference() {\n            cube([15, 50, 4], center=true);\n            translate([0, 0, -1]) cube([13, 48, 6], center=true);\n        }\n        \n        // Support post\n        translate([0, 10, -15]) {\n            difference() {\n                cube([8, 8, 30], center=true);\n                translate([0, 0, -1]) cube([6, 6, 32], center=true);\n            }\n        }\n    }\n}\n\n// Right arm with support\nmodule right_arm() {\n    mirror([1, 0, 0]) left_arm();\n}\n\n// Front legs\nmodule front_legs() {\n    // Left front leg\n    translate([-45, 35, 25]) {\n        difference() {\n            cube([8, 8, 50], center=true);\n            translate([0, 0, -1]) cube([6, 6, 52], center=true);\n        }\n    }\n    \n    // Right front leg\n    translate([45, 35, 25]) {\n        difference() {\n            cube([8, 8, 50], center=true);\n            translate([0, 0, -1]) cube([6, 6, 52], center=true);\n        }\n    }\n}\n\n// Back legs\nmodule back_legs() {\n    // Left back leg\n    translate([-45, -45, 25]) {\n        difference() {\n            cube([8, 8, 50], center=true);\n            translate([0, 0, -1]) cube([6, 6, 52], center=true);\n        }\n    }\n    \n    // Right back leg\n    translate([45, -45, 25]) {\n        difference() {\n            cube([8, 8, 50], center=true);\n            translate([0, 0, -1]) cube([6, 6, 52], center=true);\n        }\n    }\n}\n\n// Support braces between legs\nmodule support_braces() {\n    // Side braces\n    translate([-45, -5, 15]) {\n        difference() {\n            rotate([0, 90, 0]) cylinder(h=90, r=2.5, $fn=8);\n            rotate([0, 90, 0]) cylinder(h=92, r=1.5, $fn=8);\n        }\n    }\n    \n    translate([45, -5, 15]) {\n        difference() {\n            rotate([0, 90, 0]) cylinder(h=90, r=2.5, $fn=8);\n            rotate([0, 90, 0]) cylinder(h=92, r=1.5, $fn=8);\n        }\n    }\n    \n    // Front brace\n    translate([0, 35, 15]) {\n        difference() {\n            rotate([90, 0, 0]) cylinder(h=90, r=2.5, $fn=8);\n            rotate([90, 0, 0]) cylinder(h=92, r=1.5, $fn=8);\n        }\n    }\n    \n    // Back brace\n    translate([0, -45, 15]) {\n        difference() {\n            rotate([90, 0, 0]) cylinder(h=90, r=2.5, $fn=8);\n            rotate([90, 0, 0]) cylinder(h=92, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Render the chair\nadirondack_chair();",
    "renders": true
  },
  {
    "furniture": "adirondack",
    "openscad_code": "// Adirondack Chair - Realistic Medium Complexity\n// Dimensions scaled for 3D printing (approx 80mm tall)\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Chair parameters\nseat_width = 40 * scale_factor;\nseat_depth = 35 * scale_factor;\nseat_thickness = 2 * scale_factor;\nback_height = 45 * scale_factor;\nback_angle = 105; // degrees from horizontal\nleg_height = 35 * scale_factor;\narmrest_height = 25 * scale_factor;\narmrest_width = 5 * scale_factor;\n\n// Slat parameters\nslat_thickness = 2 * scale_factor;\nslat_spacing = 3 * scale_factor;\nnum_back_slats = 5;\nnum_seat_slats = 7;\n\n// Material thickness for structural elements\nmaterial_thickness = 2 * scale_factor;\n\nmodule back_slat(width, height, thickness) {\n    cube([width, thickness, height], center = true);\n}\n\nmodule seat_slat(width, depth, thickness) {\n    cube([width, thickness, depth], center = true);\n}\n\nmodule chair_back() {\n    union() {\n        // Back frame - left post\n        translate([-seat_width/2 + material_thickness/2, -seat_depth/2 - material_thickness/2, back_height/2]) {\n            cube([material_thickness, material_thickness, back_height], center = true);\n        }\n        \n        // Back frame - right post\n        translate([seat_width/2 - material_thickness/2, -seat_depth/2 - material_thickness/2, back_height/2]) {\n            cube([material_thickness, material_thickness, back_height], center = true);\n        }\n        \n        // Back frame - top rail\n        translate([0, -seat_depth/2 - material_thickness/2, back_height - material_thickness/2]) {\n            cube([seat_width - material_thickness, material_thickness, material_thickness], center = true);\n        }\n        \n        // Back slats\n        for (i = [0:num_back_slats-1]) {\n            translate([\n                -seat_width/2 + material_thickness + (seat_width - 2*material_thickness) * (i + 0.5) / num_back_slats,\n                -seat_depth/2 - material_thickness/2 - slat_thickness/2,\n                back_height/2\n            ]) {\n                rotate([back_angle - 90, 0, 0]) {\n                    back_slat(\n                        (seat_width - 2*material_thickness) / num_back_slats - slat_spacing,\n                        back_height - 2*material_thickness,\n                        slat_thickness\n                    );\n                }\n            }\n        }\n    }\n}\n\nmodule chair_seat() {\n    union() {\n        // Seat frame - front\n        translate([0, seat_depth/2 - material_thickness/2, -leg_height + seat_thickness/2]) {\n            cube([seat_width, material_thickness, seat_thickness], center = true);\n        }\n        \n        // Seat frame - left side\n        translate([-seat_width/2 + material_thickness/2, 0, -leg_height + seat_thickness/2]) {\n            cube([material_thickness, seat_depth, seat_thickness], center = true);\n        }\n        \n        // Seat frame - right side\n        translate([seat_width/2 - material_thickness/2, 0, -leg_height + seat_thickness/2]) {\n            cube([material_thickness, seat_depth, seat_thickness], center = true);\n        }\n        \n        // Seat slats\n        for (i = [0:num_seat_slats-1]) {\n            translate([\n                0,\n                -seat_depth/2 + material_thickness + (seat_depth - 2*material_thickness) * (i + 0.5) / num_seat_slats,\n                -leg_height + seat_thickness/2\n            ]) {\n                seat_slat(\n                    seat_width - 2*material_thickness,\n                    (seat_depth - 2*material_thickness) / num_seat_slats - slat_spacing,\n                    slat_thickness\n                );\n            }\n        }\n    }\n}\n\nmodule chair_legs() {\n    union() {\n        // Front left leg\n        translate([-seat_width/2 + material_thickness/2, seat_depth/2 - material_thickness/2, -leg_height/2]) {\n            cube([material_thickness, material_thickness, leg_height], center = true);\n        }\n        \n        // Front right leg\n        translate([seat_width/2 - material_thickness/2, seat_depth/2 - material_thickness/2, -leg_height/2]) {\n            cube([material_thickness, material_thickness, leg_height], center = true);\n        }\n        \n        // Back left leg (angled)\n        translate([-seat_width/2 + material_thickness/2, -seat_depth/2 - material_thickness/2, -leg_height/2 + 5*scale_factor]) {\n            rotate([0, -15, 0]) {\n                cube([material_thickness, material_thickness, leg_height], center = true);\n            }\n        }\n        \n        // Back right leg (angled)\n        translate([seat_width/2 - material_thickness/2, -seat_depth/2 - material_thickness/2, -leg_height/2 + 5*scale_factor]) {\n            rotate([0, 15, 0]) {\n                cube([material_thickness, material_thickness, leg_height], center = true);\n            }\n        }\n    }\n}\n\nmodule armrests() {\n    union() {\n        // Left armrest\n        translate([-seat_width/2 - armrest_width/2, 0, -leg_height + armrest_height]) {\n            cube([armrest_width, seat_depth + material_thickness, material_thickness], center = true);\n            \n            // Support brace\n            translate([0, seat_depth/2 - material_thickness, -armrest_height/2 + material_thickness/2]) {\n                rotate([0, 30, 0]) {\n                    cube([material_thickness, material_thickness, armrest_height], center = true);\n                }\n            }\n        }\n        \n        // Right armrest\n        translate([seat_width/2 + armrest_width/2, 0, -leg_height + armrest_height]) {\n            cube([armrest_width, seat_depth + material_thickness, material_thickness], center = true);\n            \n            // Support brace\n            translate([0, seat_depth/2 - material_thickness, -armrest_height/2 + material_thickness/2]) {\n                rotate([0, -30, 0]) {\n                    cube([material_thickness, material_thickness, armrest_height], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_back();\n    chair_seat();\n    chair_legs();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "windsor",
    "openscad_code": "// Windsor Chair - Medium Complexity Realistic Style\n// Approximately 100mm tall, 3D printable with 2mm walls\n\nchair_height = 100;\nseat_height = 50;\nseat_diameter = 60;\nleg_length = 48;\nback_height = 50;\nback_width = 55;\n\n// Main seat - slightly dished\nmodule windsor_seat() {\n    difference() {\n        cylinder(h=8, d=seat_diameter, $fn=64);\n        translate([0, 0, 1])\n            cylinder(h=6, d=seat_diameter-4, $fn=64);\n        // Dish out the top\n        translate([0, 0, 7])\n            sphere(d=seat_diameter+2, $fn=64);\n    }\n}\n\n// Turned leg with taper\nmodule windsor_leg(height, top_d=4, bottom_d=3) {\n    union() {\n        // Top tenon\n        cylinder(h=4, d=top_d, $fn=16);\n        \n        // Leg shaft with decorative rings\n        for(i=[0:2]) {\n            translate([0, 0, 4 + i*height/3])\n                cylinder(h=2, d=top_d - (i*(top_d-bottom_d)/3), $fn=16);\n        }\n        \n        // Main tapered section\n        cylinder(h=height-4, d1=top_d, d2=bottom_d, $fn=16);\n    }\n}\n\n// Spindle for back\nmodule windsor_spindle(height, top_d=2, bottom_d=2.5) {\n    union() {\n        // Bottom tenon\n        cylinder(h=3, d=bottom_d, $fn=12);\n        \n        // Tapered spindle\n        cylinder(h=height-3, d1=bottom_d, d2=top_d, $fn=12);\n    }\n}\n\n// Bow-shaped backrest\nmodule windsor_back() {\n    // Continuous bow shape\n    difference() {\n        union() {\n            // Main bow\n            linear_extrude(height=4)\n                difference() {\n                    circle(r=back_width/2, $fn=64);\n                    translate([0, -back_width/2 + 2, 0])\n                        circle(r=back_width/2 - 4, $fn=64);\n                }\n            \n            // Strengthening curve at bottom\n            translate([0, 0, -2])\n                cylinder(h=6, d=back_width-4, $fn=64);\n        }\n        \n        // Remove center for bow shape\n        translate([0, -back_width/2 + 6, 0])\n            cube([back_width+2, back_width, 10], center=true);\n    }\n}\n\n// Assembly\nmodule windsor_chair() {\n    // Seat\n    translate([0, 0, seat_height])\n        windsor_seat();\n    \n    // Four legs\n    leg_positions = [[-20, -20], [20, -20], [-20, 20], [20, 20]];\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], seat_height-8])\n            rotate([0, 15, 0])\n                windsor_leg(leg_length);\n    }\n    \n    // Back assembly\n    translate([0, 0, seat_height+8])\n        rotate([90, 0, 0])\n            windsor_back();\n    \n    // Spindles in back\n    spindle_count = 7;\n    spindle_spacing = back_width / (spindle_count - 1);\n    for(i = [0:spindle_count-1]) {\n        x = -back_width/2 + i * spindle_spacing;\n        translate([x, -back_width/2 + 2, seat_height+8])\n            rotate([90, 0, 0])\n                windsor_spindle(back_height - 8);\n    }\n    \n    // Stretchers between legs\n    stretcher_height = seat_height - 30;\n    stretcher_positions = [\n        [[-20, -20], [-20, 20]],\n        [[20, -20], [20, 20]],\n        [[-20, -20], [20, -20]],\n        [[-20, 20], [20, 20]]\n    ];\n    for(pos = stretcher_positions) {\n        p1 = pos[0];\n        p2 = pos[1];\n        angle = atan2(p2[1]-p1[1], p2[0]-p1[0]);\n        length = sqrt(pow(p2[0]-p1[0], 2) + pow(p2[1]-p1[1], 2));\n        \n        translate([(p1[0]+p2[0])/2, (p1[1]+p2[1])/2, stretcher_height])\n            rotate([0, 0, angle])\n                rotate([90, 0, 0])\n                    cylinder(h=length-6, d=2.5, $fn=12);\n    }\n}\n\n// Render the chair\nwindsor_chair();",
    "renders": true
  },
  {
    "furniture": "ladderback",
    "openscad_code": "// Ladderback Chair - Realistic Style, Medium Complexity\n// Approx 100mm tall, 3D-printable with 2mm walls\n\n// Parameters\nseat_w = 45;\nseat_d = 42;\nseat_h = 5;\nleg_h = 95;\nleg_w = 4;\nback_h = 35;\nback_post_w = 6;\nrung_d = 3;\n\n// Seat\nmodule seat() {\n    // Main seat panel\n    difference() {\n        cube([seat_w, seat_d, seat_h], center=true);\n        \n        // Light contour on top\n        translate([0, 0, seat_h/2 - 0.5])\n            cube([seat_w - 4, seat_d - 4, 1], center=true);\n    }\n    \n    // Rounded front edge\n    translate([0, seat_d/2, seat_h/2])\n        cylinder(h = 2, r = 2, $fn = 20);\n}\n\n// Leg assembly\nmodule leg(pos_x, pos_y) {\n    translate([pos_x, pos_y, -leg_h/2 + seat_h/2]) {\n        // Main leg post\n        cube([leg_w, leg_w, leg_h], center=true);\n        \n        // Foot detail\n        translate([0, 0, -leg_h/2])\n            cylinder(h = 4, r = 2.5, $fn = 16);\n    }\n}\n\n// Backrest posts\nmodule back_post(pos_x) {\n    translate([pos_x, -seat_d/2 + back_post_w/2, back_h/2 + seat_h/2]) {\n        cube([back_post_w, back_post_w, back_h], center=true);\n    }\n}\n\n// Ladder rungs\nmodule rung(pos_y, pos_z) {\n    translate([0, pos_y, pos_z]) {\n        cube([seat_w - 2*back_post_w, rung_d, rung_d], center=true);\n    }\n}\n\n// Backrest assembly\nmodule backrest() {\n    // Left post\n    back_post(-seat_w/2 + back_post_w/2);\n    \n    // Right post\n    back_post(seat_w/2 - back_post_w/2);\n    \n    // Rungs\n    rung(-seat_d/2 + back_post_w/2 + 3, seat_h/2 + 10);\n    rung(-seat_d/2 + back_post_w/2 + 3, seat_h/2 + 20);\n    rung(-seat_d/2 + back_post_w/2 + 3, seat_h/2 + 30);\n}\n\n// Side rungs\nmodule side_rung(pos_z) {\n    // Left side\n    translate([-seat_w/2 + leg_w/2, 0, pos_z])\n        cube([leg_w, seat_d - leg_w, rung_d], center=true);\n    \n    // Right side\n    translate([seat_w/2 - leg_w/2, 0, pos_z])\n        cube([leg_w, seat_d - leg_w, rung_d], center=true);\n}\n\n// Braces\nmodule brace() {\n    // Front-back braces under seat\n    translate([0, seat_d/2 - leg_w/2, -leg_h/2 + 25])\n        cube([seat_w - 2*leg_w, leg_w, rung_d], center=true);\n    \n    translate([0, -seat_d/2 + leg_w/2, -leg_h/2 + 25])\n        cube([seat_w - 2*leg_w, leg_w, rung_d], center=true);\n}\n\n// Main assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Legs\n    leg(-seat_w/2 + leg_w/2, seat_d/2 - leg_w/2);\n    leg(seat_w/2 - leg_w/2, seat_d/2 - leg_w/2);\n    leg(-seat_w/2 + leg_w/2, -seat_d/2 + leg_w/2);\n    leg(seat_w/2 - leg_w/2, -seat_d/2 + leg_w/2);\n    \n    // Backrest\n    backrest();\n    \n    // Side rungs\n    side_rung(-leg_h/2 + 35);\n    side_rung(-leg_h/2 + 55);\n    \n    // Braces\n    brace();\n}",
    "renders": true
  },
  {
    "furniture": "spindle",
    "openscad_code": "// Realistic spindle chair - medium complexity\n// Overall height ~110 mm, seat ~60 mm diameter, printable without supports\n\n// Parameters\nseat_d = 60;            // Seat diameter\nseat_h = 8;             // Seat thickness\nleg_d = 6;              // Leg diameter\nleg_h = 45;             // Leg height\nback_h = 55;            // Backrest height above seat\nspindle_d = 4;          // Spindle diameter\nback_spindles = 7;      // Number of back spindles\nleg_spread = 45;        // Distance between opposite legs at floor\nwall = 2;               // Wall thickness for 3D printing\n\n// Main chair module\nmodule chair() {\n    union() {\n        seat();\n        legs();\n        backrest();\n    }\n}\n\n// Seat - solid cylinder with slight taper\nmodule seat() {\n    union() {\n        // Main seat\n        cylinder(h=seat_h, d1=seat_d, d2=seat_d*0.95, $fn=64);\n        \n        // Reinforcement ring underneath\n        translate([0, 0, -0.1])\n            cylinder(h=seat_h*0.7, d1=seat_d*0.8, d2=seat_d*0.75, $fn=64);\n    }\n}\n\n// Four legs with stretchers\nmodule legs() {\n    // Calculate leg positions\n    leg_r = leg_spread/2 * 0.707;  // 45 degree positions\n    \n    // Leg positions\n    positions = [\n        [leg_r, leg_r, -leg_h],\n        [-leg_r, leg_r, -leg_h],\n        [-leg_r, -leg_r, -leg_h],\n        [leg_r, -leg_r, -leg_h]\n    ];\n    \n    // Create legs\n    for(pos = positions) {\n        translate(pos)\n            rotate([0, 0, 0])\n                cylinder(h=leg_h, d=leg_d, $fn=32);\n    }\n    \n    // Stretchers between legs\n    stretcher_h = -leg_h/2;\n    \n    // Front stretcher\n    translate([0, leg_r, stretcher_h])\n        cube([leg_spread - leg_d, leg_d, leg_d], center=true);\n    \n    // Back stretcher\n    translate([0, -leg_r, stretcher_h])\n        cube([leg_spread - leg_d, leg_d, leg_d], center=true);\n    \n    // Side stretchers\n    translate([leg_r, 0, stretcher_h])\n        cube([leg_d, leg_spread - leg_d, leg_d], center=true);\n    \n    translate([-leg_r, 0, stretcher_h])\n        cube([leg_d, leg_spread - leg_d, leg_d], center=true);\n}\n\n// Spindle backrest\nmodule backrest() {\n    // Backrest frame\n    frame_w = seat_d * 0.8;\n    frame_t = spindle_d * 1.5;\n    \n    // Bottom rail\n    translate([0, seat_d*0.35, seat_h])\n        cube([frame_w, frame_t, frame_t], center=true);\n    \n    // Top rail\n    translate([0, seat_d*0.35, seat_h + back_h])\n        cube([frame_w, frame_t, frame_t], center=true);\n    \n    // Side posts\n    post_positions = [\n        [-frame_w/2 + frame_t/2, seat_d*0.35, seat_h + back_h/2],\n        [frame_w/2 - frame_t/2, seat_d*0.35, seat_h + back_h/2]\n    ];\n    \n    for(pos = post_positions) {\n        translate(pos)\n            rotate([90, 0, 0])\n                cylinder(h=back_h, d=frame_t, $fn=32);\n    }\n    \n    // Spindles\n    spindle_spacing = (frame_w - frame_t*2) / (back_spindles - 1);\n    \n    for(i = [0 : back_spindles-1]) {\n        x = -frame_w/2 + frame_t + i * spindle_spacing;\n        translate([x, seat_d*0.35 + frame_t/2 - spindle_d/2, seat_h + back_h/2])\n            rotate([90, 0, 0])\n                cylinder(h=back_h - frame_t, d=spindle_d, $fn=16);\n    }\n}\n\n// Assembly\nchair();",
    "renders": true
  },
  {
    "furniture": "crossback",
    "openscad_code": "// Crossback Chair – realistic, medium complexity\n// Overall footprint ~100 mm deep × 90 mm wide × 130 mm high\n\nchair_height   = 130;\nseat_height    = 70;\nseat_w         = 90;\nseat_d         = 100;\nleg_t          = 8;   // leg thickness\nback_height    = chair_height - seat_height;\nback_w         = seat_w;\nback_t         = 6;\ncross_w        = 8;\ncross_t        = 4;\n\n// Main assembly\nunion() {\n\n    // Seat\n    difference() {\n        translate([0, 0, seat_height/2])\n            cube([seat_w, seat_d, back_t], center=true);\n        // Lightening holes for 3D-printing\n        for (dx = [-30, 0, 30])\n            for (dy = [-35, 0, 35])\n                translate([dx, dy, seat_height/2])\n                    cylinder(h=back_t+1, d=10, $fn=20, center=true);\n    }\n\n    // Legs – four simple posts\n    module leg(pos) {\n        translate(pos) {\n            difference() {\n                cube([leg_t, leg_t, seat_height], center=true);\n                translate([0, 0, seat_height/2 - 3])\n                    cube([leg_t-2, leg_t-2, seat_height], center=true);\n            }\n        }\n    }\n    legs_pos = [\n        [ seat_w/2-leg_t/2,  seat_d/2-leg_t/2, seat_height/2],\n        [-seat_w/2+leg_t/2,  seat_d/2-leg_t/2, seat_height/2],\n        [ seat_w/2-leg_t/2, -seat_d/2+leg_t/2, seat_height/2],\n        [-seat_w/2+leg_t/2, -seat_d/2+leg_t/2, seat_height/2]\n    ];\n    for (p = legs_pos) leg(p);\n\n    // Back frame – two vertical stiles + top rail\n    module back_frame() {\n        // Stiles\n        for (x = [-back_w/2+back_t/2, back_w/2-back_t/2])\n            translate([x, 0, seat_height + back_height/2])\n                cube([back_t, seat_d*0.4, back_height], center=true);\n        // Top rail\n        translate([0, 0, seat_height + back_height - back_t/2])\n            cube([back_w, seat_d*0.4, back_t], center=true);\n    }\n    back_frame();\n\n    // Cross slats – two diagonal members forming the 'X'\n    module cross_slats() {\n        angle = atan2(back_height - back_t*2, back_w*0.8);\n        for (s = [-1, 1]) {\n            translate([0, (seat_d*0.4)/2 - cross_t/2, seat_height + back_t])\n                rotate([0, 0, s*angle])\n                    translate([-back_w*0.45, 0, back_height/2 - back_t])\n                        cube([back_w*0.9, cross_t, cross_w], center=true);\n        }\n    }\n    cross_slats();\n\n    // Back lower support rail\n    translate([0, 0, seat_height + back_t*2])\n        cube([back_w - back_t, seat_d*0.4, cross_t], center=true);\n\n    // Front lower stretcher (for lateral stability)\n    translate([0, seat_d/2 - leg_t - cross_t/2, seat_height/2 - 10])\n        cube([seat_w - leg_t*2, cross_t, leg_t], center=true);\n}\n\n// Optional: small fillet under seat edges for printability\nmodule fillet_edge() {\n    translate([0, 0, seat_height - 1])\n        cylinder(h=2, d1=seat_d, d2=seat_d-4, $fn=60);\n}\ntranslate([0, seat_d/2 - 1, 0]) rotate([90, 0, 0]) fillet_edge();\ntranslate([0, -seat_d/2 + 1, 0]) rotate([-90, 0, 0]) fillet_edge();",
    "renders": true
  },
  {
    "furniture": "parsons",
    "openscad_code": "// Parsons Side Table - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm W x 120mm D x 120mm H\n\n// Parameters\nwidth = 120;\ndepth = 120;\nheight = 120;\nwall = 2;\n\n// Main module\nmodule parsons_table() {\n    // Top surface with rounded edges\n    difference() {\n        // Main top block\n        translate([0, 0, height - 10]) {\n            cube([width, depth, 10], center = true);\n        }\n        // Round edges slightly\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (width/2 - 5), y * (depth/2 - 5), height - 5]) {\n                    cylinder(h = 12, r = 5, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Table legs - square profile with taper\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (width/2 - wall*2), y * (depth/2 - wall*2), 0]) {\n                // Leg base\n                cube([wall*3, wall*3, height - 10], center = true);\n                // Leg cap detail\n                translate([0, 0, (height - 10)/2 + 2]) {\n                    cube([wall*4, wall*4, 4], center = true);\n                }\n            }\n        }\n    }\n    \n    // Lower shelf\n    translate([0, 0, height/3]) {\n        difference() {\n            cube([width - wall*4, depth - wall*4, wall], center = true);\n            // Cutout corners for legs\n            for (x = [-1, 1]) {\n                for (y = [-1, 1]) {\n                    translate([x * (width/2 - wall*4), y * (depth/2 - wall*4), 0]) {\n                        cube([wall*3, wall*3, wall*2], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Apron pieces connecting legs\n    module apron(x, y, w, d) {\n        translate([x, y, (height - 10)/2]) {\n            cube([w, d, wall*2], center = true);\n        }\n    }\n    \n    // Front and back aprons\n    apron(0, (depth/2 - wall*2), width - wall*6, wall*2);\n    apron(0, -(depth/2 - wall*2), width - wall*6, wall*2);\n    \n    // Left and right aprons\n    apron((width/2 - wall*2), 0, wall*2, depth - wall*6);\n    apron(-(width/2 - wall*2), 0, wall*2, depth - wall*6);\n    \n    // Small support blocks under top\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (width/2 - wall*5), y * (depth/2 - wall*5), height - 15]) {\n                cube([wall*3, wall*3, 5], center = true);\n            }\n        }\n    }\n}\n\nparsons_table();",
    "renders": true
  },
  {
    "furniture": "barrel",
    "openscad_code": "// Barrel Chair - Medium Complexity Realistic Style\n// Approx 100mm tall, 80mm diameter, 2mm walls\n\nmodule barrel_chair() {\n    // Main barrel body\n    difference() {\n        // Outer barrel\n        union() {\n            // Main cylinder body\n            cylinder(h=80, d=80, $fn=64);\n            \n            // Top rim\n            translate([0, 0, 80])\n                cylinder(h=5, d=82, $fn=64);\n                \n            // Bottom rim\n            translate([0, 0, -5])\n                cylinder(h=5, d=82, $fn=64);\n        }\n        \n        // Hollow interior\n        cylinder(h=78, d=76, $fn=64);\n    }\n    \n    // Barrel staves detail\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([39.5, 0, 40])\n                cube([2, 3, 78], center=true);\n    }\n    \n    // Metal bands\n    color(\"gray\") {\n        // Top band\n        translate([0, 0, 75])\n            difference() {\n                cylinder(h=3, d=84, $fn=64);\n                cylinder(h=3.5, d=78, $fn=64);\n            }\n            \n        // Middle band\n        translate([0, 0, 40])\n            difference() {\n                cylinder(h=3, d=84, $fn=64);\n                cylinder(h=3.5, d=78, $fn=64);\n            }\n            \n        // Bottom band\n        translate([0, 0, 5])\n            difference() {\n                cylinder(h=3, d=84, $fn=64);\n                cylinder(h=3.5, d=78, $fn=64);\n            }\n    }\n    \n    // Chair backrest\n    difference() {\n        // Backrest curve\n        translate([0, -30, 65])\n            rotate([90, 0, 0])\n                cylinder(h=60, d=60, center=true, $fn=64);\n                \n        // Cut to shape\n        translate([0, -65, 65])\n            cube([120, 70, 60], center=true);\n            \n        // Hollow\n        translate([0, -30, 65])\n            rotate([90, 0, 0])\n                cylinder(h=62, d=54, center=true, $fn=64);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 80])\n        difference() {\n            // Main cushion\n            cylinder(h=10, d=74, $fn=64);\n            \n            // Top rounding\n            translate([0, 0, 5])\n                sphere(d=74, $fn=64);\n                \n            // Hollow bottom\n            translate([0, 0, -1])\n                cylinder(h=12, d=70, $fn=64);\n        }\n        \n    // Support legs inside barrel\n    translate([20, 20, 0])\n        cube([2, 2, 78], center=true);\n    translate([-20, 20, 0])\n        cube([2, 2, 78], center=true);\n    translate([20, -20, 0])\n        cube([2, 2, 78], center=true);\n    translate([-20, -20, 0])\n        cube([2, 2, 78], center=true);\n        \n    // Armrests\n    // Left arm\n    translate([-35, 15, 85])\n        difference() {\n            union() {\n                cube([15, 30, 5], center=true);\n                translate([0, 15, -10])\n                    cube([15, 5, 25], center=true);\n            }\n            translate([0, 0, -2])\n                cube([11, 26, 9], center=true);\n        }\n        \n    // Right arm\n    translate([35, 15, 85])\n        difference() {\n            union() {\n                cube([15, 30, 5], center=true);\n                translate([0, 15, -10])\n                    cube([15, 5, 25], center=true);\n            }\n            translate([0, 0, -2])\n                cube([11, 26, 9], center=true);\n        }\n}\n\nbarrel_chair();",
    "renders": true
  },
  {
    "furniture": "club",
    "openscad_code": "// Club Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm width x 90mm depth x 85mm height\n\n// Chair parameters\nseat_width = 70;\nseat_depth = 55;\nseat_height = 40;\nback_height = 45;\nleg_height = 38;\nleg_thickness = 8;\narmrest_height = 20;\ncushion_thickness = 12;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chair_frame() {\n    // Seat frame - hollow box with 2mm walls\n    difference() {\n        cube([seat_width, seat_depth, seat_height - leg_height]);\n        translate([wall, wall, wall]) \n            cube([seat_width - 2*wall, seat_depth - 2*wall, seat_height - leg_height - wall]);\n    }\n    \n    // Back frame\n    translate([0, 0, seat_height - leg_height]) {\n        difference() {\n            cube([seat_width, seat_depth, back_height]);\n            translate([wall, wall, wall]) \n                cube([seat_width - 2*wall, seat_depth - 2*wall, back_height - wall]);\n        }\n    }\n}\n\nmodule legs() {\n    // Four legs with rounded edges\n    leg_positions = [\n        [0, 0], [seat_width - leg_thickness, 0],\n        [0, seat_depth - leg_thickness], [seat_width - leg_thickness, seat_depth - leg_thickness]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], 0]) {\n            difference() {\n                cube([leg_thickness, leg_thickness, leg_height]);\n                // Taper legs slightly for printing\n                translate([wall, wall, 0])\n                    cube([leg_thickness - 2*wall, leg_thickness - 2*wall, leg_height]);\n            }\n        }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-5, 0, seat_height - leg_height - 5]) {\n        difference() {\n            cube([15, seat_depth, armrest_height]);\n            translate([wall, wall, wall])\n                cube([15 - wall, seat_depth - 2*wall, armrest_height - wall]);\n        }\n    }\n    \n    // Right armrest\n    translate([seat_width - 10, 0, seat_height - leg_height - 5]) {\n        difference() {\n            cube([15, seat_depth, armrest_height]);\n            translate([0, wall, wall])\n                cube([15 - wall, seat_depth - 2*wall, armrest_height - wall]);\n        }\n    }\n}\n\nmodule cushions() {\n    // Seat cushion\n    translate([wall, wall, seat_height - leg_height - 2]) {\n        difference() {\n            cube([seat_width - 2*wall, seat_depth - 2*wall, cushion_thickness]);\n            // Cushion top rounding\n            translate([0, 0, cushion_thickness - 2])\n                cube([seat_width - 2*wall, seat_depth - 2*wall, 2]);\n        }\n    }\n    \n    // Back cushion\n    translate([wall, wall + 5, seat_height - leg_height + 2]) {\n        difference() {\n            cube([seat_width - 2*wall, seat_depth - 10, back_height - 5]);\n            // Cushion front rounding\n            translate([0, 0, back_height - 7])\n                cube([seat_width - 2*wall, seat_depth - 10, 2]);\n        }\n    }\n}\n\nmodule decorative_details() {\n    // Button details on cushions\n    button_positions = [\n        [seat_width/2, seat_depth/2, seat_height - leg_height + cushion_thickness/2],\n        [seat_width/2, seat_depth/2, seat_height - leg_height + back_height/2]\n    ];\n    \n    for(pos = button_positions) {\n        translate(pos)\n            sphere(r=2, $fn=16);\n    }\n    \n    // Leg stretchers for stability\n    // Front stretcher\n    translate([leg_thickness, leg_thickness/2, leg_height/2])\n        cube([seat_width - 2*leg_thickness, wall, leg_thickness]);\n    \n    // Side stretchers\n    translate([leg_thickness/2, leg_thickness, leg_height/2])\n        cube([leg_thickness, seat_depth - 2*leg_thickness, wall]);\n    translate([seat_width - leg_thickness - leg_thickness/2, leg_thickness, leg_height/2])\n        cube([leg_thickness, seat_depth - 2*leg_thickness, wall]);\n}\n\n// Assemble the chair\nunion() {\n    chair_frame();\n    legs();\n    armrests();\n    cushions();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "furniture": "wingback",
    "openscad_code": "// Wingback Chair - Medium Complexity Realistic Style\n// Overall dimensions: 75mm W x 70mm D x 100mm H\n\n$fn = 32;\n\nmodule chair_base() {\n    // Main seat frame\n    difference() {\n        // Seat box\n        translate([0, 0, 20])\n            cube([60, 55, 8], center = true);\n        \n        // Hollow out for wall thickness\n        translate([0, 0, 20])\n            cube([56, 51, 12], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 27])\n        cube([58, 53, 6], center = true);\n}\n\nmodule chair_back() {\n    // Main backrest\n    difference() {\n        translate([0, -25, 60])\n            cube([60, 8, 70], center = true);\n        \n        // Hollow out\n        translate([0, -25, 60])\n            cube([56, 12, 66], center = true);\n    }\n    \n    // Backrest cushion\n    translate([0, -21, 60])\n        cube([58, 4, 68], center = true);\n}\n\nmodule wings() {\n    // Left wing\n    difference() {\n        translate([-35, -15, 60])\n            rotate([0, 10, 0])\n            cube([15, 30, 70], center = true);\n        \n        // Hollow\n        translate([-35, -15, 60])\n            rotate([0, 10, 0])\n            cube([11, 34, 66], center = true);\n    }\n    \n    // Right wing\n    difference() {\n        translate([35, -15, 60])\n            rotate([0, -10, 0])\n            cube([15, 30, 70], center = true);\n        \n        // Hollow\n        translate([35, -15, 60])\n            rotate([0, -10, 0])\n            cube([11, 34, 66], center = true);\n    }\n}\n\nmodule chair_legs() {\n    // Front left leg\n    translate([-25, 20, 10])\n        cylinder(h = 20, r = 3);\n    \n    // Front right leg\n    translate([25, 20, 10])\n        cylinder(h = 20, r = 3);\n    \n    // Back left leg\n    translate([-25, -20, 10])\n        cylinder(h = 20, r = 3);\n    \n    // Back right leg\n    translate([25, -20, 10])\n        cylinder(h = 20, r = 3);\n    \n    // Leg supports\n    // Front support\n    translate([0, 20, 2])\n        cube([54, 4, 4], center = true);\n    \n    // Side supports\n    translate([-25, 0, 2])\n        rotate([90, 0, 0])\n        cylinder(h = 40, r = 2);\n    \n    translate([25, 0, 2])\n        rotate([90, 0, 0])\n        cylinder(h = 40, r = 2);\n}\n\nmodule armrests() {\n    // Left armrest\n    difference() {\n        translate([-35, 0, 35])\n            cube([8, 25, 20], center = true);\n        \n        // Hollow\n        translate([-35, 0, 35])\n            cube([4, 29, 16], center = true);\n    }\n    \n    // Right armrest\n    difference() {\n        translate([35, 0, 35])\n            cube([8, 25, 20], center = true);\n        \n        // Hollow\n        translate([35, 0, 35])\n            cube([4, 29, 16], center = true);\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_base();\n    chair_back();\n    wings();\n    chair_legs();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "balloon",
    "openscad_code": "// Balloon Chair - Realistic Medium Complexity\n// Dimensions: 100mm x 100mm x 110mm\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule balloon_shape(radius = 40) {\n    // Main balloon body\n    difference() {\n        sphere(radius);\n        translate([0, 0, -radius*0.7])\n            cube([radius*2.2, radius*2.2, radius*1.5], center=true);\n    }\n    \n    // Balloon tie point\n    translate([0, 0, -radius*0.9])\n        cylinder(h=radius*0.3, r1=radius*0.4, r2=radius*0.1, center=true);\n}\n\nmodule chair_frame() {\n    // Seat platform\n    difference() {\n        translate([0, 0, -35])\n            cube([60, 60, wall_thickness], center=true);\n        translate([0, 0, -34])\n            cube([56, 56, wall_thickness], center=true);\n    }\n    \n    // Backrest frame\n    for(i = [-25, 0, 25]) {\n        translate([i, -25, -15])\n            rotate([90, 0, 0])\n                cylinder(h=40, r=wall_thickness, center=true);\n    }\n    \n    // Backrest horizontal supports\n    for(i = [-30, -20, -10]) {\n        translate([0, -25, i])\n            rotate([0, 90, 0])\n                cylinder(h=50, r=wall_thickness, center=true);\n    }\n    \n    // Legs\n    for(x = [-25, 25])\n        for(y = [-25, 25]) {\n            translate([x, y, -55])\n                cylinder(h=40, r=wall_thickness, center=true);\n        }\n    \n    // Leg cross-bracing\n    translate([0, -25, -45])\n        rotate([0, 90, 0])\n            cylinder(h=50, r=wall_thickness, center=true);\n    translate([-25, 0, -45])\n        rotate([90, 0, 0])\n            cylinder(h=50, r=wall_thickness, center=true);\n}\n\nmodule balloon_attachment() {\n    // Support cables\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([0, 0, -5])\n                cylinder(h=30, r=wall_thickness/2, center=true);\n    }\n    \n    // Connection hub\n    translate([0, 0, -20])\n        sphere(r=wall_thickness*1.5);\n}\n\n// Main assembly\nunion() {\n    // Balloons (3 clustered together)\n    translate([-20, 0, 50]) balloon_shape(25);\n    translate([0, 15, 55]) balloon_shape(30);\n    translate([20, 0, 52]) balloon_shape(28);\n    \n    // Chair structure\n    chair_frame();\n    \n    // Attachment system\n    balloon_attachment();\n    \n    // Seat cushion\n    difference() {\n        translate([0, 0, -33])\n            cube([54, 54, 6], center=true);\n        translate([0, 0, -30])\n            cube([50, 50, 6], center=true);\n    }\n    \n    // Backrest cushion\n    difference() {\n        translate([0, -25, -20])\n            cube([54, 6, 30], center=true);\n        translate([0, -28, -20])\n            cube([50, 6, 26], center=true);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "bergere",
    "openscad_code": "// Bergere armchair - medium complexity realistic style\n// Overall dimensions: 80mm width x 75mm depth x 85mm height\n\n// Basic parameters\nwall_thickness = 2;\nseat_height = 45;\narm_height = 60;\n\n// Main seat structure\nmodule seat_base() {\n    // Seat frame\n    difference() {\n        cube([60, 50, 10], center=true);\n        translate([0, 0, 5])\n            cube([56, 46, 10], center=true);\n    }\n}\n\n// Rattan backrest with frame\nmodule rattan_back() {\n    // Outer frame\n    difference() {\n        cube([60, 5, 40], center=true);\n        translate([0, 0, 2.5])\n            cube([56, 2, 36], center=true);\n    }\n    \n    // Vertical rattan slats\n    for (i = [-25:5:25]) {\n        translate([i, 0, 0])\n            cube([2, 4, 38], center=true);\n    }\n}\n\n// Curved backrest support\nmodule back_support() {\n    hull() {\n        translate([0, -22, 25])\n            cylinder(h=5, r=2, $fn=8);\n        translate([0, -22, 55])\n            cylinder(h=5, r=2, $fn=8);\n    }\n}\n\n// Armrest with turned detail\nmodule armrest() {\n    // Main arm\n    translate([35, 0, arm_height/2])\n        cube([6, 45, arm_height], center=true);\n    \n    // Front post\n    translate([35, 25, arm_height/2-7.5])\n        cylinder(h=15, r=3, $fn=12);\n}\n\n// Cabriole leg\nmodule cabriole_leg(x_pos, y_pos) {\n    // Upper leg\n    translate([x_pos, y_pos, seat_height/2])\n        rotate([0, 10, 0])\n            cube([6, 6, seat_height], center=true);\n    \n    // Lower curved part\n    translate([x_pos, y_pos, -seat_height/4])\n        scale([1, 0.7, 1])\n            sphere(r=8, $fn=16);\n    \n    // Foot pad\n    translate([x_pos, y_pos, -seat_height/2+2])\n        cube([8, 8, 4], center=true);\n}\n\n// Seat cushion\nmodule cushion() {\n    // Main cushion\n    translate([0, 0, 5])\n        scale([1, 1, 0.4])\n            sphere(r=30, $fn=32);\n    \n    // Tufted detail\n    for (x = [-20:20:20]) {\n        for (y = [-15:15:30]) {\n            translate([x, y, 11])\n                sphere(r=1, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat structure\n    seat_base();\n    \n    // Backrest assembly\n    translate([0, -25, 25])\n        rattan_back();\n    translate([0, -25, 0])\n        back_support();\n    \n    // Arms\n    translate([0, 0, 0])\n        armrest();\n    mirror([1, 0, 0])\n        armrest();\n    \n    // Legs\n    cabriole_leg(25, 20);\n    cabriole_leg(-25, 20);\n    cabriole_leg(25, -20);\n    cabriole_leg(-25, -20);\n    \n    // Seat cushion\n    cushion();\n}",
    "renders": true
  },
  {
    "furniture": "papasan",
    "openscad_code": "// Papasan Chair - Realistic Style, Medium Complexity\n// Overall size ~100mm diameter, suitable for 3D printing\n\n// Parameters\nchair_diameter = 90;\ncushion_thickness = 15;\nframe_thickness = 3;\nleg_diameter = 8;\nleg_height = 35;\nrim_height = 12;\n\n// Main cushion module\nmodule cushion() {\n    // Top cushion layer\n    translate([0, 0, leg_height + frame_thickness + cushion_thickness/2])\n        difference() {\n            cylinder(h = cushion_thickness, d = chair_diameter - 10, $fn = 64);\n            // Cushion indentation\n            translate([0, 0, -1])\n                cylinder(h = cushion_thickness + 2, d = chair_diameter - 30, $fn = 64);\n        }\n    \n    // Bottom cushion layer\n    translate([0, 0, leg_height + frame_thickness])\n        cylinder(h = cushion_thickness/3, d = chair_diameter - 8, $fn = 64);\n}\n\n// Wicker frame structure\nmodule wicker_bowl() {\n    // Outer rim\n    translate([0, 0, leg_height + frame_thickness/2])\n        cylinder(h = rim_height, d = chair_diameter, $fn = 64);\n    \n    // Inner rim\n    translate([0, 0, leg_height + frame_thickness/2])\n        cylinder(h = rim_height, d = chair_diameter - 8, $fn = 64);\n    \n    // Frame struts - create woven pattern\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([chair_diameter/2 - 6, 0, leg_height])\n                cube([12, frame_thickness, rim_height + frame_thickness], center = true);\n    }\n    \n    // Cross struts\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45 + 11.25])\n            translate([chair_diameter/2 - 6, 0, leg_height + 3])\n                cube([12, frame_thickness, rim_height - 2], center = true);\n    }\n}\n\n// Base support structure\nmodule base_support() {\n    // Central hub\n    translate([0, 0, leg_height/2])\n        cylinder(h = leg_height, d = 20, $fn = 32);\n    \n    // Support legs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([chair_diameter/2 - 25, 0, 0])\n                cylinder(h = leg_height + frame_thickness, d = leg_diameter, $fn = 16);\n    }\n    \n    // Stabilizing ring\n    translate([0, 0, leg_height/3])\n        cylinder(h = frame_thickness, d = chair_diameter - 30, $fn = 32);\n}\n\n// Backrest cushion\nmodule backrest() {\n    translate([0, -chair_diameter/3, leg_height + frame_thickness + cushion_thickness/2])\n        rotate([15, 0, 0])\n            difference() {\n                // Main backrest\n                cylinder(h = cushion_thickness * 1.5, d = chair_diameter/2, $fn = 32);\n                \n                // Remove bottom half\n                translate([0, 0, -cushion_thickness])\n                    cube([chair_diameter, cushion_thickness * 2, cushion_thickness * 2], center = true);\n                \n                // Taper top\n                translate([0, 0, cushion_thickness * 1.5])\n                    cylinder(h = cushion_thickness, d1 = chair_diameter/2, d2 = chair_diameter/3, $fn = 32);\n            }\n}\n\n// Assembly\nunion() {\n    base_support();\n    \n    difference() {\n        wicker_bowl();\n        // Remove center for bowl shape\n        translate([0, 0, leg_height - 1])\n            cylinder(h = rim_height + 10, d = chair_diameter - 20, $fn = 64);\n    }\n    \n    cushion();\n    backrest();\n    \n    // Decorative buttons on cushion\n    translate([0, 0, leg_height + frame_thickness + cushion_thickness - 2])\n        cylinder(h = 3, d = 5, $fn = 16);\n    \n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([chair_diameter/4, 0, leg_height + frame_thickness + cushion_thickness - 2])\n                cylinder(h = 3, d = 5, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "moon",
    "openscad_code": "// Moon Ottoman / Low Stool\n// Outer shell: half-sphere moon, 120 mm diameter\n// Inner frame: cylindrical support with 4 hidden legs\n// Top: cushioned seat with small crater indents for texture\n// 3D-printable: all overhangs < 45°, 2 mm walls\n\n$fn = 60;\n\nmodule moon_ottoman() {\n    // overall base half-sphere\n    difference() {\n        // solid half-sphere for moon body\n        scale([1, 1, 0.5])\n        sphere(d = 120);\n\n        // hollow interior cavity for legs\n        translate([0, 0, 2])\n        scale([1, 1, 0.45])\n        sphere(d = 116);\n    }\n\n    // cushioned top pad\n    translate([0, 0, 60])\n    difference() {\n        cylinder(h = 12, d = 110);\n        // crater indents for seat texture\n        for (r = [20, 35, 50], a = [0, 120, 240]) {\n            rotate([0, 0, a])\n            translate([r, 0, -1])\n            sphere(d = 10);\n        }\n    }\n\n    // internal frame cylinder\n    translate([0, 0, 1])\n    cylinder(h = 59, d = 114, $fn = 40);\n\n    // four support legs inside shell\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n        translate([40, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 58, d = 8);\n    }\n}\n\nmoon_ottoman();",
    "renders": true
  },
  {
    "furniture": "egg",
    "openscad_code": "// Egg Chair\n// A realistic egg-shaped chair with legs and seat cushion\n// Overall size approximately 120mm tall x 100mm wide x 100mm deep\n\nwall_thickness = 2;\nseat_height = 45;\nbackrest_angle = 15;\n\n// Main egg shell chair body\nmodule egg_chair_shell() {\n    difference() {\n        // Outer egg shell\n        scale([1, 1, 1.3]) sphere(d=90);\n        \n        // Hollow interior\n        translate([0, 0, -5]) \n            scale([0.9, 0.9, 1.15]) sphere(d=90);\n        \n        // Front opening\n        translate([0, 35, 5]) \n            rotate([backrest_angle, 0, 0])\n            cube([60, 50, 80], center=true);\n    }\n}\n\n// Seat cushion inside egg\nmodule seat_cushion() {\n    translate([0, 10, seat_height])\n    rotate([backrest_angle, 0, 0])\n    difference() {\n        // Main cushion\n        scale([1.1, 1, 0.3]) sphere(d=70);\n        \n        // Remove bottom\n        translate([0, 0, -15]) cube([100, 100, 30], center=true);\n    }\n}\n\n// Chair legs - 4 legs in egg style\nmodule chair_legs() {\n    // Front left leg\n    translate([-30, -20, 0]) leg();\n    \n    // Front right leg\n    translate([30, -20, 0]) leg();\n    \n    // Back left leg\n    translate([-30, 20, 0]) leg();\n    \n    // Back right leg\n    translate([30, 20, 0]) leg();\n}\n\n// Single leg module\nmodule leg() {\n    // Main leg\n    translate([0, 0, 15]) cylinder(h=30, d1=8, d2=6);\n    \n    // Foot pad\n    translate([0, 0, -2]) cylinder(h=4, d=12);\n    \n    // Support ring\n    translate([0, 0, 25]) cylinder(h=wall_thickness, d=10);\n}\n\n// Back cushion for comfort\nmodule back_cushion() {\n    translate([0, -15, seat_height + 25])\n    rotate([backrest_angle + 10, 0, 0])\n    scale([0.8, 0.4, 0.6]) sphere(d=65);\n}\n\n// Armrest details\nmodule armrests() {\n    // Left armrest\n    translate([-40, 5, seat_height + 15])\n    rotate([0, 0, -20])\n    scale([0.8, 0.3, 0.15]) sphere(d=40);\n    \n    // Right armrest\n    translate([40, 5, seat_height + 15])\n    rotate([0, 0, 20])\n    scale([0.8, 0.3, 0.15]) sphere(d=40);\n}\n\n// Assembly\nunion() {\n    // Chair shell\n    egg_chair_shell();\n    \n    // Structural support inside\n    translate([0, 0, -5])\n    cylinder(h=50, d=4);\n    \n    // Legs\n    chair_legs();\n    \n    // Seat cushion\n    color(\"beige\") seat_cushion();\n    \n    // Back cushion\n    color(\"beige\") back_cushion();\n    \n    // Armrests\n    color(\"beige\") armrests();\n}",
    "renders": true
  },
  {
    "furniture": "pod",
    "openscad_code": "// Pod Chair - Realistic style, medium complexity\n// Dimensions: 120mm tall x 100mm wide x 85mm deep\n// Wall thickness: 2mm for 3D printing\n\n$fn = 36;\n\n// Main pod shell\nmodule pod_shell() {\n    difference() {\n        // Outer shell\n        scale([1, 1, 1.2]) \n            sphere(d = 90);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            scale([0.9, 0.9, 1.1]) \n                sphere(d = 86);\n        \n        // Bottom opening\n        translate([0, 0, -45])\n            cube([60, 60, 50], center = true);\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    translate([0, 0, -25])\n        scale([1.1, 1.1, 0.3])\n            sphere(d = 60);\n}\n\n// Back cushion\nmodule back_cushion() {\n    translate([0, 30, 10])\n        rotate([30, 0, 0])\n            scale([1, 0.8, 0.4])\n                sphere(d = 55);\n}\n\n// Support frame base\nmodule base_frame() {\n    // Central support column\n    cylinder(h = 30, d = 20);\n    \n    // Base plate\n    translate([0, 0, -15])\n        cylinder(h = 3, d = 80);\n    \n    // Support ribs\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([30, 0, -7])\n                cube([2, 15, 20], center = true);\n    }\n}\n\n// Armrest details\nmodule armrest() {\n    // Left armrest\n    translate([-40, 0, 15])\n        rotate([0, 15, 0])\n            cube([8, 40, 20]);\n    \n    // Right armrest\n    translate([40, 0, 15])\n        rotate([0, -15, 0])\n            cube([8, 40, 20]);\n}\n\n// Ventilation holes\nmodule ventilation_holes() {\n    difference() {\n        children();\n        \n        // Pattern of holes on sides\n        for(y = [-30:15:30]) {\n            for(z = [0:15:45]) {\n                translate([0, y, z])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, d = 3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    color(\"lightgray\")\n        pod_shell();\n    \n    // Frame\n    color(\"darkgray\")\n        translate([0, 0, -45])\n            base_frame();\n    \n    // Cushions\n    color(\"beige\")\n        seat_cushion();\n    \n    color(\"beige\")\n        back_cushion();\n    \n    // Armrests\n    color(\"lightgray\")\n        armrest();\n    \n    // Ventilation pattern\n    color(\"lightgray\")\n        ventilation_holes()\n            pod_shell();\n}",
    "renders": true
  },
  {
    "furniture": "beanbag",
    "openscad_code": "// Beanbag Chair - Realistic Style, Medium Complexity\n// Dimensions: 100mm x 80mm x 60mm (scaled for 3D printing)\n\n// Main beanbag body - squashed sphere shape\nmodule beanbag_body() {\n    difference() {\n        // Main squashed sphere with slight flattening\n        scale([1, 0.8, 0.6])\n            sphere(d=80, $fn=48);\n        \n        // Flatten bottom slightly for stability\n        translate([0, 0, -24])\n            cube([100, 100, 10], center=true);\n    }\n}\n\n// Beanbag seam lines for realistic texture\nmodule seam_lines() {\n    // Horizontal seam around circumference\n    rotate([90, 0, 0])\n        cylinder(h=80.1, d=0.5, $fn=3, center=true);\n    \n    // Vertical seam at back\n    rotate([0, 90, 0])\n        translate([0, 0, -20])\n            cylinder(h=40.1, d=0.5, $fn=3, center=true);\n    \n    // Additional seam details\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([35, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=0.5, d=0.5, $fn=3);\n    }\n}\n\n// Zipper detail on back\nmodule zipper_detail() {\n    // Zipper track\n    difference() {\n        translate([0, -32, 0])\n            cube([30, 2, 4], center=true);\n        translate([0, -32, 0])\n            cube([28, 2.1, 3.8], center=true);\n    }\n    \n    // Zipper pull\n    translate([15, -32, 2])\n        cylinder(h=3, d=1.5, $fn=8);\n}\n\n// Handle for carrying\nmodule carry_handle() {\n    // Handle base\n    translate([0, 35, 0])\n        difference() {\n            cube([25, 4, 8], center=true);\n            translate([0, 0, 2])\n                cube([23, 4.1, 4], center=true);\n        }\n    \n    // Handle grip\n    translate([0, 35, 6])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=20, d=6, $fn=16);\n                translate([0, 0, 2])\n                    cylinder(h=20, d=4, $fn=16);\n            }\n}\n\n// Stitching pattern\nmodule stitching() {\n    // Create small cylindrical stitches\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([40, 0, 0])\n                cylinder(h=0.3, d=0.8, $fn=3, center=true);\n    }\n    \n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([40, 0, -5])\n                cylinder(h=0.3, d=0.8, $fn=3, center=true);\n    }\n}\n\n// Bottom reinforcement patch\nmodule bottom_patch() {\n    translate([0, 0, -24])\n        difference() {\n            cylinder(h=2, d=40, $fn=32);\n            translate([0, 0, -0.1])\n                cylinder(h=2.2, d=36, $fn=32);\n        }\n}\n\n// Main assembly\nunion() {\n    // Main beanbag body\n    beanbag_body();\n    \n    // Surface details\n    translate([0, 0, 0.1])\n        seam_lines();\n    \n    // Zipper on back\n    zipper_detail();\n    \n    // Handle on front\n    carry_handle();\n    \n    // Stitching details\n    stitching();\n    \n    // Bottom reinforcement\n    bottom_patch();\n}",
    "renders": true
  },
  {
    "furniture": "poof",
    "openscad_code": "// Parameters\n$fn = 32;\nwall = 2;           // 2 mm wall thickness\npoof_d = 120;       // Overall diameter\npoof_h = 60;        // Overall height\nleg_h = 25;         // Leg height\ncushion_h = 20;     // Top cushion thickness\nrib_w = 8;          // Rib width\nrib_gap = 10;       // Gap between ribs\nleg_r = 5;          // Leg radius\nleg_taper = 0.7;    // Taper factor for legs\n\nmodule leg() {\n    // Tapered cylindrical leg with small foot\n    union() {\n        cylinder(h = leg_h, r1 = leg_r, r2 = leg_r * leg_taper);\n        translate([0, 0, -0.5])\n            cylinder(h = 1, r = leg_r * 1.2);\n    }\n}\n\nmodule poof() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = poof_h - cushion_h, r = poof_d/2, center = false);\n\n        // Hollow out inside\n        translate([0, 0, wall])\n            cylinder(h = poof_h - cushion_h - wall, r = poof_d/2 - wall, center = false);\n\n        // Bottom opening for printability\n        translate([0, 0, -1])\n            cylinder(h = wall + 1, r = poof_d/2 - wall, center = false);\n    }\n\n    // Top cushion layer\n    translate([0, 0, poof_h - cushion_h]) {\n        difference() {\n            cylinder(h = cushion_h, r = poof_d/2, center = false);\n            translate([0, 0, wall])\n                cylinder(h = cushion_h - wall, r = poof_d/2 - wall, center = false);\n        }\n    }\n\n    // Side ribs for structure and aesthetics\n    for (a = [0 : 360/12 : 360 - 360/12]) {\n        rotate([0, 0, a])\n            translate([poof_d/2 - wall/2, 0, wall])\n                cube([wall, rib_w, poof_h - cushion_h - 2*wall], center = true);\n    }\n}\n\nmodule legs() {\n    // Four legs at 45-degree angles\n    for (a = [45 : 90 : 315]) {\n        rotate([0, 0, a])\n            translate([poof_d/2 * 0.7, 0, 0])\n                leg();\n    }\n}\n\n// Assemble the poof\nunion() {\n    poof();\n    legs();\n}",
    "renders": true
  },
  {
    "furniture": "zabuton",
    "openscad_code": "// Realistic Zabuton Floor Cushion (Medium Complexity)\n// Dimensions: 120mm x 120mm x 40mm (printable scale)\n\n$fn = 32;\n\n// Main cushion body\nmodule cushion_body() {\n    // Base foam core with rounded edges\n    translate([0, 0, 20])\n        minkowski() {\n            cube([116, 116, 38], center = true);\n            sphere(2);\n        }\n}\n\n// Fabric cover with quilted pattern\nmodule quilted_cover() {\n    difference() {\n        // Outer fabric shell (2mm thick)\n        translate([0, 0, 20])\n            minkowski() {\n                cube([120, 120, 40], center = true);\n                sphere(1);\n            }\n        \n        // Hollow interior\n        translate([0, 0, 20])\n            cube([116, 116, 36], center = true);\n    }\n    \n    // Quilted squares pattern\n    for (x = [-40:20:40]) {\n        for (y = [-40:20:40]) {\n            translate([x, y, 40.5])\n                cube([18, 18, 1], center = true);\n        }\n    }\n}\n\n// Decorative piping around edges\nmodule piping() {\n    // Top edge piping\n    translate([0, 0, 40])\n        cube([124, 124, 2], center = true);\n    \n    // Bottom edge piping\n    translate([0, 0, 0])\n        cube([124, 124, 2], center = true);\n    \n    // Corner reinforcements\n    for (x = [-60, 60]) {\n        for (y = [-60, 60]) {\n            translate([x, y, 20])\n                cylinder(h = 42, r = 3, center = true);\n        }\n    }\n}\n\n// Handles for carrying\nmodule handles() {\n    // Side handles with reinforced stitching\n    translate([0, -65, 20]) {\n        difference() {\n            // Handle loop\n            rotate([90, 0, 0])\n                cylinder(h = 20, r1 = 8, r2 = 8, center = true);\n            // Handle hole\n            rotate([90, 0, 0])\n                cylinder(h = 21, r1 = 5, r2 = 5, center = true);\n        }\n    }\n    \n    mirror([0, 1, 0])\n        translate([0, -65, 20]) {\n            difference() {\n                rotate([90, 0, 0])\n                    cylinder(h = 20, r1 = 8, r2 = 8, center = true);\n                rotate([90, 0, 0])\n                    cylinder(h = 21, r1 = 5, r2 = 5, center = true);\n            }\n        }\n}\n\n// Zipper detail along back edge\nmodule zipper_detail() {\n    // Zipper tape\n    translate([0, 59, 20])\n        cube([114, 2, 40], center = true);\n    \n    // Zipper teeth\n    for (x = [-55:5:55]) {\n        translate([x, 60, 30])\n            cube([3, 1, 20], center = true);\n    }\n    \n    // Zipper pull\n    translate([50, 62, 35]) {\n        cube([4, 4, 2], center = true);\n        translate([0, 3, 0])\n            cylinder(h = 4, r = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Internal cushion structure\n    cushion_body();\n    \n    // Outer fabric cover\n    quilted_cover();\n    \n    // Decorative elements\n    piping();\n    \n    // Functional elements\n    handles();\n    \n    // Construction details\n    zipper_detail();\n}",
    "renders": true
  },
  {
    "furniture": "zafu",
    "openscad_code": "// Zafu meditation cushion – realistic, medium complexity\n// Overall size ≈ 120 mm diameter, 90 mm high\n$fa = 2; $fs = 0.5;\n\n// Parameters\ndiameter     = 120;   // Overall diameter\nheight       = 90;    // Overall height\nwall         = 2;     // Minimum printable wall thickness\npleats       = 12;    // Number of vertical pleats\npleat_depth  = 8;     // How deep each pleat goes\nhandle_h     = 25;    // Height of carrying handle\nhandle_w     = 40;    // Width of carrying handle\n\n// Main cushion body – cylinder with rounded top\nmodule cushion_body() {\n    // Core\n    difference() {\n        // Outer flared cylinder\n        cylinder(h = height, r1 = diameter/2, r2 = diameter/2 + 5, center = false);\n        // Hollow out interior\n        translate([0, 0, wall])\n            cylinder(h = height - wall, r1 = diameter/2 - wall, r2 = diameter/2 + 5 - wall);\n    }\n    // Rounded top cap\n    translate([0, 0, height])\n        scale([1, 1, 0.7])\n            sphere(d = diameter);\n}\n\n// Vertical pleats on side surface\nmodule pleats() {\n    for (i = [0 : 360/pleats : 360-360/pleats]) {\n        rotate([0, 0, i])\n            translate([diameter/2 - pleat_depth/2, 0, height/2])\n                cube([pleat_depth, 1, height], center = true);\n    }\n}\n\n// Side carrying handle\nmodule handle() {\n    // Handle arch\n    translate([0, diameter/2 - 5, height - 10])\n        rotate([90, 0, 0])\n            difference() {\n                // Arch tube\n                cylinder(h = handle_w, r = 4, center = true);\n                // Hole\n                cylinder(h = handle_w + 1, r = 3, center = true);\n            }\n    // Reinforcement plates\n    translate([-handle_w/2, diameter/2 - 5, height - 10])\n        cube([wall*2, 8, 8], center = true);\n    translate([ handle_w/2, diameter/2 - 5, height - 10])\n        cube([wall*2, 8, 8], center = true);\n}\n\n// Seam stitches on top (raised lines)\nmodule stitches() {\n    n = 16;\n    for (i = [0 : 360/n : 360-360/n]) {\n        rotate([0, 0, i])\n            translate([0, diameter/2*0.8, height + 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r = 1);\n    }\n}\n\n// Final assembly\nunion() {\n    cushion_body();\n    pleats();\n    handle();\n    stitches();\n}",
    "renders": true
  },
  {
    "furniture": "meditation",
    "openscad_code": "// Meditation Cushion Set - Zabuton Mat with Zafu Cushion\n// Realistic style, medium complexity\n\n// Overall dimensions\nmat_width = 120;\nmat_length = 120;\nmat_thickness = 8;\n\ncushion_diameter = 60;\ncushion_height = 35;\n\nwall_thickness = 2;\n\n// Zabuton Mat base\nmodule zabuton_mat() {\n    // Main mat body\n    difference() {\n        cube([mat_width, mat_length, mat_thickness], center=true);\n        \n        // Hollow center for material efficiency\n        translate([0, 0, -1])\n            cube([mat_width - wall_thickness*2, mat_length - wall_thickness*2, mat_thickness+2], center=true);\n    }\n    \n    // Sewn edges - raised border\n    for (i = [-1, 1]) {\n        translate([i * (mat_width/2 - wall_thickness), 0, mat_thickness/2 - 1])\n            cube([wall_thickness*2, mat_length - wall_thickness*4, 2], center=true);\n            \n        translate([0, i * (mat_length/2 - wall_thickness), mat_thickness/2 - 1])\n            cube([mat_width - wall_thickness*4, wall_thickness*2, 2], center=true);\n    }\n    \n    // Corner reinforcements\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (mat_width/2 - wall_thickness*2), y * (mat_length/2 - wall_thickness*2), 0])\n                cylinder(h=mat_thickness, r=wall_thickness*2, $fn=16, center=true);\n        }\n    }\n}\n\n// Zafu meditation cushion\nmodule zafu_cushion() {\n    // Main cushion body - pleated dome\n    difference() {\n        // Outer dome\n        scale([1, 1, 0.8])\n            sphere(d=cushion_diameter, $fn=50);\n            \n        // Flatten bottom\n        translate([0, 0, -cushion_height/2])\n            cube([cushion_diameter*2, cushion_diameter*2, cushion_height], center=true);\n    }\n    \n    // Inner hollow for filling\n    difference() {\n        translate([0, 0, 0])\n            scale([1, 1, 0.75])\n                sphere(d=cushion_diameter - wall_thickness*2, $fn=50);\n                \n        translate([0, 0, -cushion_height/2 - 1])\n            cube([cushion_diameter*2, cushion_diameter*2, cushion_height], center=true);\n    }\n    \n    // Pleated segments using torus sections\n    for (angle = [0:30:150]) {\n        rotate([0, 0, angle])\n            translate([cushion_diameter/2 - wall_thickness*2, 0, 0])\n                rotate([90, 0, 0])\n                    torus_segment();\n    }\n}\n\n// Individual pleat segment\nmodule torus_segment() {\n    rotate_extrude(angle=30, $fn=20)\n        translate([wall_thickness, 0, 0])\n            circle(r=wall_thickness/2, $fn=10);\n}\n\n// Carry handle\nmodule carry_handle() {\n    translate([mat_width/2 - wall_thickness*3, 0, mat_thickness/2 + 2])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=wall_thickness, center=true);\n            \n    translate([mat_width/2 - wall_thickness*3, 0, mat_thickness/2 + 12])\n        rotate([0, 90, 0])\n            cylinder(h=30, r=wall_thickness, center=true);\n}\n\n// Assembly\nunion() {\n    // Mat\n    zabuton_mat();\n    \n    // Cushion on top\n    translate([0, 0, mat_thickness/2 + cushion_height/2 - 5])\n        zafu_cushion();\n    \n    // Handle on side\n    carry_handle();\n}",
    "renders": true
  },
  {
    "furniture": "kneeler",
    "openscad_code": "// Kneeler Furniture - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm wide x 70mm deep x 65mm high\n\nmodule leg(width, depth, height) {\n    // Main leg post\n    difference() {\n        cube([width, depth, height], center=true);\n        // Chamfer top edges\n        translate([0, 0, height/2 - 2])\n            cube([width+0.1, depth+0.1, 4], center=true);\n    }\n}\n\nmodule cushion(width, depth, thickness) {\n    // Main cushion with rounded top\n    difference() {\n        union() {\n            // Base cushion\n            cube([width, depth, thickness], center=true);\n            // Rounded top\n            translate([0, 0, thickness/2])\n                scale([1, 1, 0.5])\n                sphere(d=width*0.9, $fn=32);\n        }\n        // Hollow center for 3D printing\n        translate([0, 0, -thickness/2 + 2])\n            cube([width-4, depth-4, thickness], center=true);\n    }\n}\n\nmodule backrest(width, height, thickness) {\n    // Slanted backrest with support\n    rotate([10, 0, 0]) {\n        difference() {\n            cube([width, thickness, height], center=true);\n            // Recessed panel detail\n            translate([0, 0, 0])\n                cube([width-6, thickness-2, height-6], center=true);\n        }\n    }\n}\n\nmodule support_bar(length, diameter) {\n    // Horizontal support bar between legs\n    rotate([90, 0, 0])\n        cylinder(h=length, d=diameter, center=true);\n}\n\n// Base frame - front legs and stretcher\nunion() {\n    // Front left leg\n    translate([-50, -30, 32.5])\n        leg(8, 8, 65);\n    \n    // Front right leg\n    translate([50, -30, 32.5])\n        leg(8, 8, 65);\n    \n    // Rear left leg\n    translate([-50, 30, 32.5])\n        leg(8, 8, 65);\n    \n    // Rear right leg\n    translate([50, 30, 32.5])\n        leg(8, 8, 65);\n    \n    // Front stretcher\n    translate([0, -30, 8])\n        support_bar(100, 6);\n    \n    // Side stretchers\n    translate([-50, 0, 8])\n        rotate([0, 0, 90])\n            support_bar(60, 6);\n    \n    translate([50, 0, 8])\n        rotate([0, 0, 90])\n            support_bar(60, 6);\n    \n    // Rear stretcher\n    translate([0, 30, 8])\n        support_bar(100, 6);\n}\n\n// Kneeler platform\ntranslate([0, 0, 65])\n    cushion(110, 60, 12);\n\n// Backrest\ntranslate([0, 25, 55])\n    backrest(100, 40, 8);\n\n// Armrest supports\ntranslate([-55, 0, 45])\n    rotate([0, 30, 0])\n        cube([5, 40, 5], center=true);\n\ntranslate([55, 0, 45])\n    rotate([0, -30, 0])\n        cube([5, 40, 5], center=true);\n\n// Decorative front rail\ntranslate([0, -35, 40])\n    difference() {\n        cube([110, 4, 20], center=true);\n        for (i = [-4:1:4]) {\n            translate([i*12, 0, 0])\n                cube([6, 4.1, 16], center=true);\n        }\n    }",
    "renders": true
  },
  {
    "furniture": "prayer",
    "openscad_code": "// Simple Prayer Kneeler / Prie-dieu\n// Overall dimensions: 120 mm wide × 60 mm deep × 110 mm tall\n// Wall thickness ≈ 2 mm for 3D printing\n\n// Base frame\nmodule base_frame() {\n    difference() {\n        // Outer solid base\n        cube([120, 60, 10], center = true);\n\n        // Hollow cavity underneath\n        translate([0, 0, -6])\n            cube([116, 56, 10], center = true);\n    }\n}\n\n// Front legs (two identical)\nmodule front_leg() {\n    difference() {\n        // Leg outer\n        cube([8, 6, 80], center = true);\n\n        // Hollow core\n        translate([0, 0, 2])\n            cube([4, 3, 76], center = true);\n    }\n}\n\n// Rear legs (angled back)\nmodule rear_leg() {\n    translate([0, 0, 40])\n    rotate([10, 0, 0])\n    difference() {\n        // Leg outer\n        cube([8, 6, 70], center = true);\n\n        // Hollow core\n        translate([0, 0, 2])\n            cube([4, 3, 66], center = true);\n    }\n}\n\n// Kneeler cushion platform\nmodule kneeler_platform() {\n    difference() {\n        // Platform top\n        translate([0, 15, 35])\n            cube([110, 50, 6], center = true);\n\n        // Hollow underside\n        translate([0, 15, 32])\n            cube([106, 46, 8], center = true);\n    }\n\n    // Side support ribs (for strength)\n    for (x = [-45:30:45]) {\n        translate([x, 15, 30])\n            cube([4, 46, 10], center = true);\n    }\n}\n\n// Cushion pad\nmodule cushion() {\n    // Main pad\n    translate([0, 15, 39])\n        scale([1, 1, 0.3])\n        sphere(d = 100, $fn = 32);\n\n    // Simple quilting lines\n    for (y = [-15:15:15]) {\n        translate([0, 15 + y, 39.5])\n            cube([100, 1, 0.5], center = true);\n    }\n}\n\n// Prayer shelf / book rest\nmodule prayer_shelf() {\n    // Shelf surface\n    translate([0, -25, 75])\n        cube([100, 6, 4], center = true);\n\n    // Up-right backrest\n    translate([0, -28, 85])\n        cube([100, 2, 20], center = true);\n\n    // Side book stops\n    for (x = [-45:90:90]) {\n        translate([x, -25, 77])\n            cube([2, 6, 6], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base frame\n    base_frame();\n\n    // Front legs\n    translate([-45, 20, 45])\n        front_leg();\n    translate([45, 20, 45])\n        front_leg();\n\n    // Rear legs\n    translate([-45, -20, 45])\n        rear_leg();\n    translate([45, -20, 45])\n        rear_leg();\n\n    // Kneeler platform and cushion\n    kneeler_platform();\n    cushion();\n\n    // Upper prayer shelf\n    prayer_shelf();\n}",
    "renders": true
  },
  {
    "furniture": "sawbuck",
    "openscad_code": "// Sawbuck table / stool\n// Realistic style, medium complexity\n\n// General parameters\nleg_thickness = 4;          // 2mm walls * 2 sides\ntop_thickness = 3;\noverall_width = 60;\noverall_height = 45;\ntop_size = 50;\n\n// Helper module for rounded legs (no overhangs)\nmodule rounded_leg(w, d, h, r) {\n    difference() {\n        cube([w, d, h]);\n        for (x = [r, w - r])\n            for (y = [r, d - r])\n                translate([x, y, h - r])\n                    sphere(r = r, $fn = 16);\n    }\n}\n\n// Cross-brace module\nmodule cross_brace(len, thick, height) {\n    union() {\n        // Main stretcher\n        translate([-len/2, -thick/2, -height/2])\n            cube([len, thick, height]);\n        \n        // End tongues for joints\n        translate([len/2 - thick, -thick/2, -height/2])\n            cube([thick, thick, height]);\n        translate([-len/2, -thick/2, -height/2])\n            cube([thick, thick, height]);\n    }\n}\n\n// Top with rounded edges\nmodule rounded_top(size, thick) {\n    difference() {\n        cube([size, size, thick], center = true);\n        for (x = [-size/2 + 2, size/2 - 2])\n            for (y = [-size/2 + 2, size/2 - 2])\n                translate([x, y, thick/2 - 2])\n                    sphere(r = 2, $fn = 16);\n    }\n}\n\n// Single X-leg assembly\nmodule x_leg() {\n    // Left half\n    translate([-overall_width/2 + leg_thickness/2, 0, 0])\n        rotate([0, 0, -30])\n            rounded_leg(\n                leg_thickness,\n                leg_thickness,\n                overall_height,\n                2\n            );\n    \n    // Right half\n    translate([overall_width/2 - leg_thickness/2, 0, 0])\n        rotate([0, 0, 30])\n            rounded_leg(\n                leg_thickness,\n                leg_thickness,\n                overall_height,\n                2\n            );\n    \n    // Center bolt detail\n    translate([0, 0, overall_height/2])\n        rotate([90, 0, 0])\n            cylinder(h = leg_thickness + 1, r = 2, center = true, $fn = 12);\n}\n\n// Main assembly\nunion() {\n    // Top surface\n    translate([0, 0, overall_height + top_thickness/2])\n        rounded_top(top_size, top_thickness);\n    \n    // First X-leg pair (front)\n    translate([0, -top_size/2 + leg_thickness + 4, 0])\n        x_leg();\n    \n    // Second X-leg pair (back)\n    translate([0, top_size/2 - leg_thickness - 4, 0])\n        x_leg();\n    \n    // Front stretcher\n    translate([0, -top_size/2 + leg_thickness + 4, overall_height/3])\n        rotate([0, 0, 90])\n            cross_brace(top_size - 20, leg_thickness, leg_thickness);\n    \n    // Rear stretcher\n    translate([0, top_size/2 - leg_thickness - 4, overall_height/3])\n        rotate([0, 0, 90])\n            cross_brace(top_size - 20, leg_thickness, leg_thickness);\n    \n    // Side stretchers\n    translate([-top_size/2 + leg_thickness + 4, 0, overall_height/3])\n        cross_brace(top_size - 20, leg_thickness, leg_thickness);\n    \n    translate([top_size/2 - leg_thickness - 4, 0, overall_height/3])\n        cross_brace(top_size - 20, leg_thickness, leg_thickness);\n}",
    "renders": true
  },
  {
    "furniture": "xbench",
    "openscad_code": "// X-Bench - realistic style, medium complexity\n// Overall printable dimensions: ~120 x 60 x 80 mm\n// 2 mm wall thickness for 3D printing\n\n$fa = 2;\n$fs = 1;\n\n// MAIN MODULE -------------------------------------------------\nmodule xbench() {\n    // Seat top\n    translate([0, 0, 75]) seat_top();\n\n    // X-frame legs (front/back)\n    for (y = [-25, 25]) {\n        translate([0, y, 37.5]) x_frame();\n    }\n\n    // Stretchers between legs (left/right)\n    translate([0, 0, 15]) stretcher();\n    translate([0, 0, 40]) stretcher();\n}\n\n// SEAT TOP ----------------------------------------------------\nmodule seat_top() {\n    difference() {\n        // Solid seat\n        cube([120, 50, 5], center = true);\n        \n        // Lightening holes (print-friendly)\n        for (x = [-40, 0, 40]) {\n            translate([x, 0, 2]) \n                cylinder(h = 6, d = 10, center = true);\n        }\n    }\n    \n    // Rounded edges\n    difference() {\n        // Top dome\n        translate([0, 0, 2.5]) \n            scale([120, 50, 10]) sphere(d = 1);\n        \n        // Trim to seat thickness\n        translate([0, 0, 5]) \n            cube([130, 60, 10], center = true);\n    }\n}\n\n// X-FRAME LEGS ------------------------------------------------\nmodule x_frame() {\n    // Left diagonal\n    rotate([0, 0, 25]) \n        translate([0, 0, 0]) \n            leg_bar();\n    \n    // Right diagonal\n    rotate([0, 0, -25]) \n        translate([0, 0, 0]) \n            leg_bar();\n}\n\n// SINGLE LEG BAR --------------------------------------------\nmodule leg_bar() {\n    // Main bar (2 mm thick)\n    translate([0, 0, 37.5]) \n        cube([5, 2, 75], center = true);\n    \n    // Foot pad\n    translate([0, 0, -2]) \n        cube([10, 5, 4], center = true);\n    \n    // Top tenon (connects to seat)\n    translate([0, 0, 77]) \n        cube([5, 2, 4], center = true);\n}\n\n// STRETCHER BAR ----------------------------------------------\nmodule stretcher() {\n    // Front/back stretchers\n    for (y = [-23, 23]) {\n        translate([0, y, 0]) {\n            difference() {\n                // Main bar\n                cube([110, 4, 5], center = true);\n                \n                // Decorative slot\n                translate([0, 0, 2.5]) \n                    cube([60, 2, 6], center = true);\n            }\n        }\n    }\n}\n\n// ASSEMBLY ----------------------------------------------------\nxbench();",
    "renders": true
  },
  {
    "furniture": "desk",
    "openscad_code": "// Realistic medium-complexity desk\n// Overall size: 120 mm (W) × 60 mm (D) × 70 mm (H)\n// All walls ≥2 mm for 3D printing\n\n// Parameters\ndesk_w = 120;\ndesk_d = 60;\ndesk_h = 70;\ntop_t = 4;\nleg_w = 6;\nleg_t = 6;\napron_h = 10;\ndrawer_w = 36;\ndrawer_h = 12;\nhandle_w = 12;\nhandle_h = 3;\nhandle_d = 3;\nback_h = 20;\n\n// Main module\nmodule desk() {\n    // Tabletop\n    difference() {\n        cube([desk_w, desk_d, top_t], center = true);\n        translate([0, 0, top_t/2])\n        cube([desk_w - 2*leg_w, desk_d - 2*leg_t, top_t + 0.1], center = true);\n    }\n\n    // Legs\n    module leg(px, py) {\n        translate([px, py, -desk_h/2 + top_t/2])\n            cube([leg_w, leg_t, desk_h - top_t], center = true);\n    }\n    leg(-desk_w/2 + leg_w/2, -desk_d/2 + leg_t/2);\n    leg( desk_w/2 - leg_w/2, -desk_d/2 + leg_t/2);\n    leg(-desk_w/2 + leg_w/2,  desk_d/2 - leg_t/2);\n    leg( desk_w/2 - leg_w/2,  desk_d/2 - leg_t/2);\n\n    // Aprons (front/back/sides)\n    module apron(x, y, w, d) {\n        translate([x, y, -desk_h/2 + top_t + apron_h/2])\n            cube([w, d, apron_h], center = true);\n    }\n    // Front apron with drawer cutouts\n    difference() {\n        apron(0, -desk_d/2 + leg_t/2 + 1, desk_w - 2*leg_w, leg_t - 1);\n        // Drawer openings\n        for (i = [-1:1]) {\n            translate([i * (drawer_w + 4), 0, 0])\n                cube([drawer_w + 1, leg_t + 0.2, drawer_h + 1], center = true);\n        }\n    }\n    // Back apron\n    apron(0, desk_d/2 - leg_t/2 - 1, desk_w - 2*leg_w, leg_t - 1);\n    // Side aprons\n    apron(-desk_w/2 + leg_w/2 + 1, 0, leg_w - 1, desk_d - 2*leg_t);\n    apron( desk_w/2 - leg_w/2 - 1, 0, leg_w - 1, desk_d - 2*leg_t);\n\n    // Drawers\n    module drawer(px, py, pz) {\n        translate([px, py, pz]) {\n            difference() {\n                cube([drawer_w, drawer_d, drawer_h]);\n                translate([2, 2, 2])\n                    cube([drawer_w - 4, drawer_d - 4, drawer_h]);\n            }\n            // Handle\n            translate([drawer_w/2 - handle_w/2, drawer_d - 1, drawer_h/2 - handle_h/2])\n                cube([handle_w, handle_d, handle_h]);\n        }\n    }\n    drawer_d = desk_d/2 - leg_t - 4;\n    for (i = [-1:1]) {\n        translate([i * (drawer_w + 4), -desk_d/2 + leg_t/2 + 2, -desk_h/2 + top_t + drawer_h/2 + 2])\n            drawer(0, 0, 0);\n    }\n\n    // Back panel\n    translate([0, desk_d/2 - 2, -desk_h/2 + top_t + back_h/2])\n        cube([desk_w - 2*leg_w, 2, back_h], center = false);\n}\n\n// Render\ndesk();",
    "renders": true
  },
  {
    "furniture": "table",
    "openscad_code": "// Realistic medium-complexity coffee table\n// Overall printable size: 120 x 70 x 50 mm\n\n// --- Parameters ---\ntable_length = 120;     // mm\ntable_width  = 70;      // mm\ntable_height = 45;      // mm\ntop_thick    = 4;       // mm\nleg_thick    = 4;       // mm\nrail_height  = 10;      // mm\nrail_thick   = 2;       // mm\nboss_diam    = 6;       // mm\nboss_h       = 2;       // mm\nwall         = 2;       // mm (3D-printable wall thickness)\n\n// --- Main assembly ---\nmodule table() {\n    union() {\n        table_top();\n        legs_assembly();\n        lower_rail_assembly();\n    }\n}\n\n// --- Table top ---\nmodule table_top() {\n    // Main top board with rounded edges simulated by chamfer\n    difference() {\n        cube([table_length, table_width, top_thick], center=true);\n        translate([0,0,top_thick/2 - wall])\n            cube([table_length - 2*wall, table_width - 2*wall, top_thick], center=true);\n    }\n\n    // Corner bosses for faux dowel look\n    for(x = [-1, 1])\n    for(y = [-1, 1])\n        translate([x*(table_length/2 - boss_diam/2),\n                   y*(table_width/2  - boss_diam/2),\n                   top_thick/2])\n            cylinder(h=boss_h, d=boss_diam, center=true);\n}\n\n// --- Legs ---\nmodule leg(x_off, y_off) {\n    // Simple square leg with slight taper achieved by subtraction\n    difference() {\n        translate([x_off, y_off, table_height/2 - top_thick/2])\n            cube([leg_thick, leg_thick, table_height - top_thick], center=true);\n\n        // Tapering cut on inside\n        translate([x_off, y_off, table_height/2 - top_thick/2 + 2])\n            rotate([0,0,45])\n                cube([leg_thick*2, leg_thick*2, table_height - top_thick + 4], center=true);\n    }\n}\n\n// --- Leg assembly ---\nmodule legs_assembly() {\n    for(x = [-1, 1])\n    for(y = [-1, 1])\n        leg( x*(table_length/2 - leg_thick/2),\n             y*(table_width/2  - leg_thick/2));\n}\n\n// --- Lower rail (stretcher) ---\nmodule rail(x_off, y_off, length, angle) {\n    translate([x_off, y_off, (table_height - top_thick)/2 + wall/2])\n        rotate([0,0,angle])\n            cube([length, rail_thick, rail_height], center=true);\n}\n\n// --- Rail assembly ---\nmodule lower_rail_assembly() {\n    // Long rails\n    rail(0, (table_width/2 - leg_thick - rail_thick/2),\n         table_length - 2*leg_thick, 0);\n\n    rail(0, -(table_width/2 - leg_thick - rail_thick/2),\n         table_length - 2*leg_thick, 0);\n\n    // Short rails\n    rail((table_length/2 - leg_thick - rail_thick/2), 0,\n         table_width - 2*leg_thick, 90);\n\n    rail(-(table_length/2 - leg_thick - rail_thick/2), 0,\n         table_width - 2*leg_thick, 90);\n}\n\n// Render the table\ntable();",
    "renders": true
  },
  {
    "furniture": "nightstand",
    "openscad_code": "// Nightstand - Realistic style, medium complexity\n// Overall dimensions: 60mm W x 45mm D x 70mm H\n\n$fn = 32;\n\n// Main body\nmodule nightstand() {\n    // Base frame\n    difference() {\n        cube([60, 45, 5], center = true);\n        translate([0, 0, -2.5])\n        cube([56, 41, 5], center = true);\n    }\n    \n    // Legs\n    for(x = [-25, 25])\n        for(y = [-17.5, 17.5])\n            translate([x, y, -35])\n            cylinder(h = 35, r = 3);\n    \n    // Main box\n    difference() {\n        translate([0, 0, 17.5])\n        cube([54, 40, 35], center = true);\n        \n        // Front face hole for drawers\n        translate([0, 20.5, 17.5])\n        cube([50, 2, 30], center = true);\n        \n        // Back panel rebate\n        translate([0, -20.5, 17.5])\n        cube([52, 2, 33], center = true);\n    }\n    \n    // Back panel\n    translate([0, -19.5, 17.5])\n    cube([52, 1, 33], center = true);\n    \n    // Drawers\n    for(i = [0, 1]) {\n        translate([0, 10, 5 + i * 15])\n        drawer(i);\n    }\n    \n    // Top\n    difference() {\n        translate([0, 0, 37.5])\n        cube([60, 45, 5], center = true);\n        translate([0, 0, 34.5])\n        cube([56, 41, 5], center = true);\n    }\n}\n\n// Drawer module\nmodule drawer(index) {\n    // Drawer box\n    difference() {\n        translate([0, 8, 0])\n        cube([48, 8, 12], center = true);\n        translate([0, 9.5, 0])\n        cube([46, 8, 10.5], center = true);\n    }\n    \n    // Drawer front\n    difference() {\n        translate([0, 19.5, 0])\n        cube([50, 2, 14], center = true);\n        // Handle hole\n        translate([0, 20.5, 0])\n        cube([20, 2, 3], center = true);\n    }\n    \n    // Handle\n    translate([0, 21, 0])\n    difference() {\n        cube([20, 1, 3], center = true);\n        translate([0, 0.5, 0])\n        cube([18, 1, 1], center = true);\n    }\n}\n\nnightstand();",
    "renders": true
  },
  {
    "furniture": "coffee",
    "openscad_code": "// Coffee table with magazine shelf\n// Overall dimensions: 90mm x 50mm x 45mm (W x D x H)\n\n$fn = 32;\n\n// Table top\nmodule table_top() {\n    // Main top surface\n    difference() {\n        cube([90, 50, 4], center = true);\n        // Rounded edges by subtracting cylinders at corners\n        translate([42, 22, 2]) cylinder(h = 5, r = 3, center = true);\n        translate([42, -22, 2]) cylinder(h = 5, r = 3, center = true);\n        translate([-42, 22, 2]) cylinder(h = 5, r = 3, center = true);\n        translate([-42, -22, 2]) cylinder(h = 5, r = 3, center = true);\n    }\n}\n\n// Table leg with tapered design\nmodule leg() {\n    difference() {\n        // Tapered leg\n        hull() {\n            translate([0, 0, -20]) cylinder(h = 1, r = 2.5, center = true);\n            translate([0, 0, 0]) cylinder(h = 1, r = 2, center = true);\n        }\n        \n        // Add screw recess at top\n        translate([0, 0, 2]) cylinder(h = 3, r = 1.2, center = true);\n    }\n}\n\n// Support frame for legs\nmodule frame() {\n    // Long side rails\n    translate([0, 20, -20]) cube([82, 2, 2], center = true);\n    translate([0, -20, -20]) cube([82, 2, 2], center = true);\n    \n    // Short side rails\n    translate([40, 0, -20]) cube([2, 36, 2], center = true);\n    translate([-40, 0, -20]) cube([2, 36, 2], center = true);\n}\n\n// Magazine shelf\nmodule magazine_shelf() {\n    difference() {\n        // Shelf with rounded front edge\n        translate([0, 0, -32]) cube([80, 40, 2], center = true);\n        \n        // Cutouts for legs\n        for(x = [-35, 35]) {\n            for(y = [-15, 15]) {\n                translate([x, y, -32]) cylinder(h = 3, r = 2.5, center = true);\n            }\n        }\n        \n        // Magazine groove\n        translate([0, 15, -31]) cube([70, 8, 1], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Table top positioned\n    translate([0, 0, 23]) table_top();\n    \n    // Support frame\n    frame();\n    \n    // Magazine shelf\n    magazine_shelf();\n    \n    // Four legs\n    for(x = [-35, 35]) {\n        for(y = [-15, 15]) {\n            translate([x, y, -20]) leg();\n        }\n    }\n    \n    // Center support beam\n    translate([0, 0, -20]) cube([2, 30, 2], center = true);\n}",
    "renders": true
  },
  {
    "furniture": "end",
    "openscad_code": "// End Table with Drawer - Realistic Medium Complexity\n// Overall dimensions: 120mm(W) x 120mm(D) x 220mm(H)\n\n// Parameters\ntable_top_th = 15;\ntable_top_w = 120;\ntable_top_d = 120;\nleg_w = 25;\nleg_t = 25;\nleg_h = 200;\napron_h = 80;\napron_th = 12;\ndrawer_w = 90;\ndrawer_h = 50;\ndrawer_d = 100;\nhandle_w = 40;\nhandle_h = 8;\nhandle_d = 15;\nwall = 2;\n\n// Main module\nmodule end_table() {\n    // Table top\n    translate([0, 0, leg_h + table_top_th/2])\n        cube([table_top_w, table_top_d, table_top_th], center=true);\n    \n    // Legs\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (table_top_w/2 - leg_w/2), \n                      y * (table_top_d/2 - leg_t/2), \n                      leg_h/2])\n                cube([leg_w, leg_t, leg_h], center=true);\n    \n    // Aprons\n    // Front/back aprons\n    for (y = [-1, 1])\n        translate([0, \n                  y * (table_top_d/2 - leg_t/2 - apron_th/2), \n                  leg_h - apron_h/2])\n            cube([table_top_w - leg_w*2, apron_th, apron_h], center=true);\n    \n    // Left/right aprons\n    for (x = [-1, 1])\n        translate([x * (table_top_w/2 - leg_w/2 - apron_th/2), \n                  0, \n                  leg_h - apron_h/2])\n            cube([apron_th, table_top_d - leg_t*2, apron_h], center=true);\n    \n    // Drawer compartment\n    difference() {\n        // Drawer box\n        translate([0, 0, leg_h - apron_h/2 - drawer_h/2])\n            cube([drawer_w + wall*2, drawer_d, drawer_h + wall*2], center=true);\n        \n        // Hollow space\n        translate([0, 0, leg_h - apron_h/2 - drawer_h/2])\n            cube([drawer_w, drawer_d - wall, drawer_h], center=true);\n    }\n    \n    // Drawer\n    translate([0, drawer_d/2 - drawer_d/2 + wall, \n              leg_h - apron_h/2 - drawer_h/2 + wall/2])\n        drawer();\n    \n    // Shelf\n    translate([0, 0, leg_h/2])\n        cube([table_top_w - leg_w*2 - wall*2, \n              table_top_d - leg_t*2 - wall*2, \n              wall], center=true);\n    \n    // Shelf support strips\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (table_top_w/2 - leg_w - wall), \n                      y * (table_top_d/2 - leg_t - wall), \n                      leg_h/2 - wall/2])\n                cube([wall, wall, wall*2], center=true);\n}\n\n// Drawer module\nmodule drawer() {\n    // Drawer body\n    difference() {\n        cube([drawer_w, drawer_d - wall, drawer_h], center=true);\n        // Inside hollow\n        translate([0, 0, -wall/2])\n            cube([drawer_w - wall*2, drawer_d - wall - wall, drawer_h - wall], center=true);\n    }\n    \n    // Drawer front\n    translate([0, drawer_d/2 - wall/2, 0])\n        cube([drawer_w + wall*2, wall*2, drawer_h + wall*2], center=true);\n    \n    // Handle\n    translate([0, drawer_d/2 + wall, 0])\n        handle();\n}\n\n// Handle module\nmodule handle() {\n    difference() {\n        // Handle base\n        cube([handle_w, handle_d, handle_h], center=true);\n        \n        // Finger grip\n        translate([0, -handle_d/4, 0])\n            cube([handle_w - 10, handle_d/2, handle_h + 1], center=true);\n    }\n}\n\n// Render the table\nend_table();",
    "renders": true
  },
  {
    "furniture": "dining",
    "openscad_code": "// Dining Chair - Realistic Style, Medium Complexity\n// Overall size: 100mm tall x 50mm wide x 50mm deep\n\nchair_height = 100;\nseat_height = 45;\nseat_width = 50;\nseat_depth = 50;\nback_height = chair_height - seat_height;\nleg_thickness = 4;\nstretcher_height = 15;\n\n// Leg module with tapered design\nmodule leg() {\n    difference() {\n        // Main leg - tapered\n        hull() {\n            translate([0, 0, 0]) cylinder(h=seat_height, r1=leg_thickness/2, r2=leg_thickness/2.5, $fn=8);\n            translate([0, 0, seat_height]) cylinder(h=seat_height/2, r1=leg_thickness/2.5, r2=leg_thickness/3, $fn=8);\n        }\n        \n        // Cut bottom for flat feet\n        translate([0, 0, -1]) cube([leg_thickness*2, leg_thickness*2, 2], center=true);\n    }\n}\n\n// Seat with cushion detail\nmodule seat() {\n    difference() {\n        // Seat base\n        translate([0, 0, seat_height/2 + 2]) cube([seat_width, seat_depth, 4], center=true);\n        \n        // Cushion indent\n        translate([0, 0, seat_height/2 + 4.1]) cube([seat_width-4, seat_depth-4, 1], center=true);\n    }\n    \n    // Cushion top\n    translate([0, 0, seat_height/2 + 6]) \n        minkowski() {\n            cube([seat_width-4, seat_depth-4, 2], center=true);\n            sphere(1, $fn=16);\n        }\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Back frame\n    translate([0, 0, seat_height + back_height/2]) cube([seat_width, leg_thickness, back_height], center=true);\n    \n    // Vertical slats\n    for(i = [-1, 0, 1]) {\n        translate([i * 15, 0, seat_height + back_height/2]) \n            cube([3, leg_thickness-1, back_height-4], center=true);\n    }\n    \n    // Top rail\n    translate([0, 0, seat_height + back_height - leg_thickness/2]) \n        cube([seat_width+2, leg_thickness+2, leg_thickness], center=true);\n}\n\n// Stretchers between legs\nmodule stretchers() {\n    height = stretcher_height;\n    width = seat_width - leg_thickness;\n    depth = seat_depth - leg_thickness;\n    \n    // Side stretchers\n    translate([0, depth/2, height]) cube([width, leg_thickness, leg_thickness], center=true);\n    translate([0, -depth/2, height]) cube([width, leg_thickness, leg_thickness], center=true);\n    \n    // Front-back stretchers\n    translate([width/2, 0, height]) cube([leg_thickness, depth, leg_thickness], center=true);\n    translate([-width/2, 0, height]) cube([leg_thickness, depth, leg_thickness], center=true);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    translate([seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2, 0]) leg();\n    translate([-seat_width/2 + leg_thickness/2, seat_depth/2 - leg_thickness/2, 0]) leg();\n    translate([seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0]) leg();\n    translate([-seat_width/2 + leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0]) leg();\n    \n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Stretchers\n    stretchers();\n}",
    "renders": true
  },
  {
    "furniture": "workbench",
    "openscad_code": "// Realistic 3D printable Workbench – 100 mm long\n// Medium complexity ~110 lines, no over-unsupported surfaces, 2 mm wall thickness\n// All dimensions in mm\n\n// overall scale factor (bench length = 100 mm)\nscale_factor = 1;\n\n// basic dimensions\nbench_l = 100 * scale_factor;\nbench_w = 45 * scale_factor;\nbench_h = 45 * scale_factor;\n\n// thicknesses\nthick = 2 * scale_factor;\n\n// reusable module for table legs\nmodule leg(w, d, h) {\n    difference() {\n        // full leg\n        cube([w, d, h], center = false);\n        // hollow inside (no top overhang)\n        translate([thick, thick, 0])\n            cube([w - 2*thick, d - 2*thick, h - thick], center = false);\n    }\n}\n\n// reusable module for stretcher\nmodule stretcher(len, diam) {\n    cylinder(h = len, d = diam, $fn = 16);\n}\n\n// top plate with through holes for tools\nmodule top_plate() {\n    difference() {\n        // solid top\n        cube([bench_l, bench_w, thick], center = true);\n        // dog holes (5 mm holes for bench dogs)\n        for (x = [-40:20:40])\n            for (y = [-15:15:15])\n                translate([x, y, 0])\n                    cylinder(h = thick + 1, d = 5, $fn = 16, center = true);\n    }\n}\n\n// bottom shelf\nmodule shelf() {\n    translate([0, 0, thick])\n        cube([bench_l - 4*thick, bench_w - 4*thick, thick], center = true);\n}\n\n// back tool rail\nmodule back_rail() {\n    translate([0, bench_w/2 - thick/2, bench_h/2 - thick/2])\n        cube([bench_l, thick, bench_h - thick], center = true);\n}\n\n// front apron with drawer openings\nmodule front_apron() {\n    difference() {\n        translate([0, -bench_w/2 + thick/2, bench_h/2 - thick/2])\n            cube([bench_l, thick, bench_h - thick], center = true);\n        // two simple drawer openings\n        for (i = [-1, 1])\n            translate([i * 30, 0, 0])\n                cube([20, thick + 1, 12], center = true);\n    }\n}\n\n// assembly\nunion() {\n    // top\n    translate([0, 0, bench_h - thick/2])\n        top_plate();\n\n    // legs\n    leg(thick, thick, bench_h - thick);\n    translate([bench_l - thick, 0, 0])\n        leg(thick, thick, bench_h - thick);\n    translate([0, bench_w - thick, 0])\n        leg(thick, thick, bench_h - thick);\n    translate([bench_l - thick, bench_w - thick, 0])\n        leg(thick, thick, bench_h - thick);\n\n    // lower shelf\n    translate([0, 0, thick/2])\n        shelf();\n\n    // front/back aprons\n    front_apron();\n    back_rail();\n\n    // side stretchers\n    translate([thick/2, thick/2, bench_h/2])\n        rotate([90, 0, 0])\n            stretcher(bench_w - 2*thick, thick);\n    translate([bench_l - thick/2, thick/2, bench_h/2])\n        rotate([90, 0, 0])\n            stretcher(bench_w - 2*thick, thick);\n}",
    "renders": true
  },
  {
    "furniture": "sideboard",
    "openscad_code": "// Realistic Sideboard - Medium Complexity\n// Dimensions: 120mm W x 45mm D x 75mm H\n\n$fn = 32;\n\n// Overall module\nmodule sideboard() {\n    // Main carcass\n    union() {\n        // Bottom frame\n        translate([0, 0, 2])\n            cube([120, 45, 2], center = true);\n        \n        // Top panel\n        translate([0, 0, 73])\n            cube([120, 45, 2], center = true);\n        \n        // Left side panel\n        translate([-59, 0, 37.5])\n            cube([2, 45, 71], center = true);\n        \n        // Right side panel\n        translate([59, 0, 37.5])\n            cube([2, 45, 71], center = true);\n        \n        // Back panel\n        translate([0, -22, 37.5])\n            cube([120, 2, 71], center = true);\n        \n        // Internal shelf\n        translate([0, 0, 40])\n            cube([116, 41, 2], center = true);\n        \n        // Legs (4 cylindrical legs)\n        for(x = [-50, 50])\n            for(y = [-15, 15])\n                translate([x, y, 1])\n                    cylinder(h = 10, d = 6, center = true);\n        \n        // Drawers\n        // Top drawer\n        translate([0, 0, 55])\n            drawer(30);\n        \n        // Bottom drawers (2 side by side)\n        translate([-25, 0, 25])\n            drawer(20);\n        translate([25, 0, 25])\n            drawer(20);\n        \n        // Door panels\n        translate([0, 10, 55])\n            door(28);\n        \n        // Back panel detail (grooves)\n        for(i = [-40:20:40])\n            translate([i, -21, 37.5])\n                cube([2, 1, 69], center = true);\n    }\n}\n\n// Drawer module\nmodule drawer(height) {\n    difference() {\n        // Drawer front\n        translate([0, -10, 0])\n            cube([55, 2, height], center = true);\n        \n        // Handle recess\n        translate([0, -9, 0])\n            cube([30, 1, height/3], center = true);\n    }\n    \n    // Handle\n    translate([0, -8.5, 0])\n        cylinder(h = 2, d = 3, center = true);\n}\n\n// Door module\nmodule door(height) {\n    difference() {\n        // Door panel\n        cube([115, 2, height], center = true);\n        \n        // Panel recess\n        translate([0, 0.5, 0])\n            cube([105, 1, height-4], center = true);\n    }\n    \n    // Door handle\n    translate([45, 2, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 3, center = true);\n}\n\n// Render the sideboard\nsideboard();",
    "renders": true
  },
  {
    "furniture": "console",
    "openscad_code": "// Realistic Console Table - Medium Complexity\n// Dimensions: 100mm(W) x 40mm(D) x 75mm(H)\n\n// Overall dimensions\ntable_width = 100;\ntable_depth = 40;\ntable_height = 75;\n\n// Wall thickness\nwall = 2;\n\n// Leg dimensions\nleg_width = 5;\nleg_depth = 5;\nleg_height = 70;\n\n// Shelf dimensions\nshelf_thickness = 3;\nshelf_width = table_width - (leg_width * 2) - (wall * 2);\nshelf_depth = table_depth - (leg_depth * 2) - (wall * 2);\n\n// Drawer dimensions\ndrawer_height = 15;\ndrawer_gap = 1;\n\nmodule table_top() {\n    difference() {\n        // Main top surface\n        cube([table_width, table_depth, wall]);\n        \n        // Rounded front edge - create chamfer\n        translate([wall, -0.1, -0.1])\n            cube([table_width - (wall * 2), wall + 0.2, wall + 0.2]);\n    }\n}\n\nmodule leg(x_pos, z_pos) {\n    translate([x_pos, z_pos, 0])\n        cube([leg_width, leg_depth, leg_height]);\n}\n\nmodule lower_shelf() {\n    translate([leg_width + wall, leg_depth + wall, leg_height/3])\n        cube([shelf_width, shelf_depth, shelf_thickness]);\n}\n\nmodule drawer_box(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        difference() {\n            // Drawer body\n            cube([shelf_width - drawer_gap*2, shelf_depth - drawer_gap*2, drawer_height - drawer_gap]);\n            \n            // Hollow inside\n            translate([wall, wall, wall])\n                cube([shelf_width - drawer_gap*2 - wall*2, shelf_depth - drawer_gap*2 - wall*2, drawer_height - drawer_gap - wall]);\n            \n            // Handle hole\n            translate([(shelf_width - drawer_gap*2)/2 - 2, -0.1, drawer_height/2 - 1])\n                cube([4, 0.2, 2]);\n        }\n        \n        // Drawer handle\n        translate([(shelf_width - drawer_gap*2)/2, -0.5, drawer_height/2])\n            cube([6, 1, 4]);\n    }\n}\n\nmodule back_panel() {\n    translate([wall, table_depth - wall, wall])\n        cube([table_width - wall*2, wall, table_height - wall]);\n}\n\n// Build the console table\nunion() {\n    // Table top\n    translate([0, 0, table_height - wall])\n        table_top();\n    \n    // Four legs\n    leg(0, 0, 0);\n    leg(table_width - leg_width, 0, 0);\n    leg(0, table_depth - leg_depth, 0);\n    leg(table_width - leg_width, table_depth - leg_depth, 0);\n    \n    // Lower shelf\n    lower_shelf();\n    \n    // Back panel for stability\n    back_panel();\n    \n    // Two drawers\n    drawer_box(leg_width + wall + drawer_gap, leg_depth + wall + drawer_gap, leg_height/3 + shelf_thickness + drawer_gap);\n    drawer_box(leg_width + wall + drawer_gap, leg_depth + wall + drawer_gap, leg_height/3 + shelf_thickness + drawer_gap*2 + drawer_height);\n}",
    "renders": true
  },
  {
    "furniture": "credenza",
    "openscad_code": "// Credenza - realistic style, medium complexity\n// Overall dimensions: 100 mm wide x 45 mm deep x 55 mm tall\n\nmodule body() {\n    // Main body shell\n    difference() {\n        // Outer shell\n        cube([100, 45, 55], center=false);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([96, 41, 51], center=false);\n    }\n}\n\nmodule top_panel() {\n    // Top surface with slight overhang\n    translate([0, -1, 55])\n        cube([100, 47, 2], center=false);\n}\n\nmodule base() {\n    // Base frame\n    difference() {\n        // Base block\n        translate([0, 0, -3])\n            cube([100, 45, 3], center=false);\n        \n        // Recessed center\n        translate([5, 5, -2])\n            cube([90, 35, 3], center=false);\n    }\n}\n\nmodule legs() {\n    // Four tapered legs\n    for(x=[5, 90]) {\n        for(y=[5, 35]) {\n            translate([x, y, -8])\n                cylinder(h=5, r1=2.5, r2=2, $fn=12);\n        }\n    }\n}\n\nmodule doors() {\n    // Two cabinet doors\n    for(i=[0, 1]) {\n        translate([5 + i*45, 1, 5])\n            cube([45, 2, 45], center=false);\n    }\n}\n\nmodule door_handles() {\n    // Door pulls\n    for(i=[0, 1]) {\n        translate([25 + i*45, 3, 25])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=1.5, $fn=8);\n    }\n}\n\nmodule shelf() {\n    // Internal shelf\n    translate([2, 2, 30])\n        cube([96, 41, 2], center=false);\n}\n\nmodule back_panel() {\n    // Back panel with ventilation grooves\n    translate([-1, 2, 0])\n        cube([1, 41, 55], center=false);\n    \n    // Ventilation slots\n    for(y=[5, 15, 25, 35]) {\n        translate([-0.5, y, 10])\n            cube([0.5, 5, 35], center=false);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    top_panel();\n    base();\n    legs();\n    doors();\n    door_handles();\n    shelf();\n    back_panel();\n}",
    "renders": true
  },
  {
    "furniture": "vanity",
    "openscad_code": "// Realistic Medium-Complexity Vanity Table (OpenSCAD)\n// Approx. 80 mm W x 40 mm D x 85 mm H\n// 2 mm wall thickness, printable without supports\n\n$fa = 2; $fs = 0.5;\n\n// === Parameters ===\nW = 80; D = 40; H = 85;\nlegH = 75; legSz = 4;\nwall = 2;\n\nmodule leg() {\n    // Tapered square leg\n    translate([0,0,legH/2])\n        hull() {\n            translate([0,0,-legH/2]) cube([legSz, legSz, 0.1], center=true);\n            translate([0,0,legH/2]) cube([legSz-1, legSz-1, 0.1], center=true);\n        }\n}\n\nmodule legs() {\n    // Four legs at corners\n    offs = W/2 - legSz/2;\n    for (x = [-offs, offs])\n        for (y = [-D/2 + legSz/2, D/2 - legSz/2])\n            translate([x, y, 0]) leg();\n}\n\nmodule top() {\n    // Tabletop with rounded front edge\n    difference() {\n        translate([0,0,H]) cube([W, D, wall], center=true);\n        translate([0, D/2 - wall/2, H + wall]) \n            cube([W, wall*2, wall*2], center=true);\n    }\n}\n\nmodule drawerBox() {\n    // Single drawer cavity\n    dw = W - 15; dd = D - 10; dh = 14;\n    translate([0, 0, H - dh - 5])\n        cube([dw, dd, dh], center=true);\n}\n\nmodule drawerFront() {\n    // Drawer face with handle\n    dw = W - 14.5; dd = D - 9.5;\n    translate([0, 0, H - 12]) {\n        difference() {\n            cube([dw, dd, 3], center=true);\n            // Recessed panel\n            translate([0, -dd/2 + 4, -0.5])\n                cube([dw - 6, dd - 8, 4], center=false);\n        }\n        // Handle bar\n        translate([0, dd/2 - 5, 2.5]) \n            rotate([90,0,0]) cylinder(h=10, d=2, $fn=12);\n    }\n}\n\nmodule mirrorFrame() {\n    // Arched mirror on back\n    mirrorW = W - 20;\n    mirrorH = 35;\n    translate([0, -D/2 + wall, H])\n        union() {\n            // Frame outline\n            difference() {\n                cube([mirrorW + 4, wall, mirrorH + 4], center=true);\n                translate([0, wall/2, 0])\n                    cube([mirrorW, wall + 1, mirrorH], center=true);\n            }\n            // Support posts\n            for (x = [-mirrorW/2 + 2, mirrorW/2 - 2])\n                translate([x, -wall, -mirrorH/2 + 2])\n                    cube([wall, wall*2, mirrorH - 4]);\n        }\n}\n\n// === Assembly ===\nlegs();\ntop();\ndifference() {\n    cube([W, D, H], center=false);\n    translate([0,0,H - 19]) cube([W - 14, D - 9, 15], center=true);\n}\ndrawerFront();\nmirrorFrame();",
    "renders": true
  },
  {
    "furniture": "island",
    "openscad_code": "// Kitchen Island – realistic style, medium complexity (~120 mm length)\n\n// Overall dimensions\nisland_w = 120;     // length\nisland_d = 70;      // depth\nisland_h = 75;      // worktop height\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule body() {\n    // Main carcass – hollowed box\n    difference() {\n        cube([island_w, island_d, island_h]);\n        translate([wall, wall, wall])\n            cube([island_w - 2*wall, island_d - 2*wall, island_h - 2*wall]);\n    }\n}\n\nmodule worktop() {\n    // Overhanging butcher-block top (rounded edges simulated by larger block)\n    translate([-5, -5, island_h])\n        cube([island_w + 10, island_d + 10, 5]);\n}\n\nmodule shelf() {\n    // Mid-height internal shelf\n    translate([wall, wall, island_h/2 - 2])\n        cube([island_w - 2*wall, island_d - 2*wall, 4]);\n}\n\nmodule doors() {\n    // Two inset cabinet doors with simple panels\n    door_w = (island_w - 3*wall)/2;\n    door_h = island_h/2 - 3*wall;\n    for (i = [0,1]) {\n        translate([wall + i*(door_w + wall), wall, wall])\n            difference() {\n                cube([door_w, wall*3, door_h]);\n                translate([wall, wall, wall])\n                    cube([door_w - 2*wall, wall, door_h - 2*wall]);\n            }\n    }\n}\n\nmodule drawers() {\n    // Two small drawers above doors\n    drawer_w = (island_w - 3*wall)/2;\n    drawer_h = 12;\n    for (i = [0,1]) {\n        translate([wall + i*(drawer_w + wall), wall, island_h - drawer_h - wall])\n            difference() {\n                cube([drawer_w, wall*3, drawer_h]);\n                translate([wall, wall, wall])\n                    cube([drawer_w - 2*wall, wall, drawer_h - 2*wall]);\n            }\n    }\n}\n\nmodule handles() {\n    // Simple cylindrical drawer/door pulls\n    handle_l = 15;\n    handle_r = 1.5;\n    drawer_w = (island_w - 3*wall)/2;\n    for (i = [0,1]) {\n        // drawer pulls\n        translate([wall + drawer_w/2 + i*(drawer_w + wall), wall*3.5, island_h - 6])\n            rotate([90,0,0])\n                cylinder(h = handle_l, r = handle_r, $fn=16);\n        // door pulls\n        translate([wall + drawer_w/2 + i*(drawer_w + wall), wall*3.5, island_h/4])\n            rotate([90,0,0])\n                cylinder(h = handle_l, r = handle_r, $fn=16);\n    }\n}\n\nmodule legs() {\n    // Four square legs with taper illusion via chamfer\n    leg_size = 6;\n    for (x = [leg_size/2, island_w - leg_size/2])\n        for (y = [leg_size/2, island_d - leg_size/2])\n            translate([x, y, -5])\n                cube([leg_size, leg_size, 5], center=true);\n}\n\n// Assemble\nunion() {\n    body();\n    worktop();\n    shelf();\n    doors();\n    drawers();\n    handles();\n    legs();\n}",
    "renders": true
  },
  {
    "furniture": "cart",
    "openscad_code": "// Realistic 3D-printable medium-complexity furniture cart\n// Overall size ~120 mm long, 70 mm wide, 80 mm tall\n\n// Parameters\nwheel_d = 20;\nwheel_w = 4;\naxle_r = 3;\nframe_w = 4;\nboard_t = 2;\nhandle_h = 50;\nhandle_r = 6;\n\n// Main assembly\nmodule cart() {\n    difference() {\n        union() {\n            // Wheel assemblies\n            for (y = [-55, 55]) mirror([0, y, 0]) wheel_assembly();\n\n            // Lower shelf\n            translate([0, 0, 15]) shelf(110, 65);\n\n            // Upper shelf\n            translate([0, 0, 55]) shelf(90, 65);\n\n            // Frame – front posts\n            for (x = [-40, 40]) translate([x, -30, 35]) frame_post();\n\n            // Frame – rear posts\n            for (x = [-40, 40]) translate([x, 30, 35]) frame_post();\n\n            // Frame – long rails\n            translate([0, 0, 30]) frame_rail(110, 30);\n            translate([0, 0, 70]) frame_rail(90, 30);\n\n            // Frame – short rails\n            for (x = [-50, 50]) translate([x, 0, 50]) frame_rail(70, 30);\n\n            // Push handle\n            translate([0, 35, 80]) rotate([90, 0, 0]) cylinder(h = handle_h, r = handle_r);\n            translate([0, 35, 80]) sphere(handle_r);\n        }\n\n        // Holes for weight saving\n        for (p = [[0, 0, 15], [0, 0, 55]]) {\n            translate(p) cube([80, 45, board_t + 0.1], center = true);\n        }\n    }\n}\n\n// Wheel with axle stub\nmodule wheel_assembly() {\n    // Wheel\n    translate([0, -30, wheel_d/2]) rotate([0, 90, 0])\n        cylinder(h = wheel_w, r = wheel_d/2, center = true);\n\n    // Axle stub\n    translate([0, -30, wheel_d/2]) rotate([0, 90, 0])\n        cylinder(h = 10, r = axle_r, center = true);\n}\n\n// Shelf board\nmodule shelf(l, w) {\n    difference() {\n        cube([l, w, board_t], center = true);\n        translate([0, 0, board_t/2 - 0.1]) cube([l - 8, w - 8, board_t + 0.2], center = true);\n    }\n}\n\n// Vertical frame post\nmodule frame_post() {\n    cube([frame_w, frame_w, 70], center = true);\n}\n\n// Horizontal frame rail (length along X, width along Y)\nmodule frame_rail(l, w) {\n    cube([l, frame_w, frame_w], center = true);\n}\n\n// Render\ncart();",
    "renders": true
  },
  {
    "furniture": "trolley",
    "openscad_code": "// Trolley Cart - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm (L) x 80mm (W) x 90mm (H)\n\n// Parameters\n$fn = 32;\nwheel_d = 25;\nwheel_w = 6;\nframe_t = 2;\nshelf_t = 3;\nhandle_h = 30;\nhandle_r = 5;\n\n// Main module\nmodule trolley() {\n    // Bottom frame\n    translate([0, 0, wheel_d/2])\n    difference() {\n        // Main frame base\n        cube([120, 80, frame_t], center=true);\n        // Wheel cutouts\n        for(x = [-50, 50])\n            for(y = [-30, 30])\n                translate([x, y, -frame_t/2])\n                cylinder(d=wheel_d+2, h=frame_t+1, center=true);\n    }\n\n    // Vertical posts\n    module post(x, y) {\n        translate([x, y, wheel_d/2 + 45])\n        cube([frame_t, frame_t, 90 - wheel_d], center=true);\n    }\n    \n    for(x = [-55, 55])\n        for(y = [-35, 35])\n            post(x, y);\n\n    // Shelves\n    module shelf(z) {\n        translate([0, 0, z])\n        difference() {\n            cube([114, 74, shelf_t], center=true);\n            // Rounded corners\n            for(x = [-57, 57])\n                for(y = [-37, 37])\n                    translate([x, y, 0])\n                    cylinder(d=6, h=shelf_t+1, center=true);\n        }\n    }\n    \n    shelf(30);\n    shelf(60);\n    shelf(85);\n\n    // Side panels with holes\n    module side_panel(x) {\n        translate([x, 0, wheel_d/2 + 45])\n        difference() {\n            cube([frame_t, 80, 90 - wheel_d], center=true);\n            // Decorative holes\n            for(z = [20, 40, 60])\n                translate([0, -20, z])\n                cylinder(d=8, h=frame_t+1, center=true);\n        }\n    }\n    \n    side_panel(57);\n    side_panel(-57);\n\n    // Back panel\n    translate([0, -39, wheel_d/2 + 45])\n    difference() {\n        cube([116, frame_t, 90 - wheel_d], center=true);\n        // Ventilation slots\n        for(x = [-40, -20, 0, 20, 40])\n            translate([x, 0, 40])\n            cube([10, frame_t+1, 30], center=true);\n    }\n\n    // Handle\n    translate([0, 40, wheel_d/2 + 90 - handle_h/2])\n    union() {\n        // Vertical bars\n        for(x = [-30, 30])\n            translate([x, 0, 0])\n            cylinder(r=handle_r, h=handle_h, center=true);\n        \n        // Horizontal bar\n        translate([0, 0, handle_h/2])\n        rotate([90, 0, 0])\n        cylinder(r=handle_r, h=60, center=true);\n    }\n\n    // Wheels with axles\n    module wheel(x, y) {\n        translate([x, y, 0])\n        union() {\n            // Wheel\n            cylinder(d=wheel_d, h=wheel_w, center=true);\n            // Axle\n            translate([0, 0, wheel_w/2 + 1])\n            cylinder(d=6, h=2, center=true);\n            // Tread pattern\n            for(i = [0:30:360])\n                rotate([0, 0, i])\n                translate([wheel_d/2 - 1, 0, 0])\n                cube([2, 1, wheel_w], center=true);\n        }\n    }\n    \n    for(x = [-50, 50])\n        for(y = [-30, 30])\n            wheel(x, y);\n}\n\n// Render the trolley\ntrolley();",
    "renders": true
  },
  {
    "furniture": "bar",
    "openscad_code": "// BAR COUNTER\n// A compact bar counter suitable for 3D printing\n// Overall footprint ~120 mm wide, 60 mm deep, 100 mm tall\n\n$fn = 32;\n\n// Main bar top\nmodule bar_top() {\n    translate([0, 0, 98])\n        cube([120, 60, 4], center = true);\n}\n\n// Bar front panel with bottle storage\nmodule bar_front() {\n    // Front panel\n    difference() {\n        translate([0, 25, 50])\n            cube([118, 8, 96], center = true);\n        \n        // Bottle storage cutouts\n        for (x = [-40, -20, 0, 20, 40]) {\n            translate([x, 29, 70])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d = 12);\n        }\n    }\n}\n\n// Bar sides\nmodule bar_sides() {\n    // Left side\n    translate([-60, 0, 50])\n        cube([4, 60, 96], center = true);\n    \n    // Right side\n    translate([60, 0, 50])\n        cube([4, 60, 96], center = true);\n}\n\n// Lower shelf\nmodule lower_shelf() {\n    translate([0, 0, 10])\n        cube([110, 50, 2], center = true);\n}\n\n// Support legs\nmodule legs() {\n    // Front legs\n    translate([-50, 20, 5])\n        cube([6, 6, 10], center = true);\n    translate([50, 20, 5])\n        cube([6, 6, 10], center = true);\n    \n    // Back legs\n    translate([-50, -20, 5])\n        cube([6, 6, 10], center = true);\n    translate([50, -20, 5])\n        cube([6, 6, 10], center = true);\n}\n\n// Back panel\nmodule back_panel() {\n    translate([0, -25, 50])\n        cube([112, 4, 96], center = true);\n}\n\n// Small footrest bar\nmodule footrest() {\n    translate([0, 15, 5])\n        cube([110, 6, 4], center = true);\n}\n\n// Assemble the bar\nunion() {\n    bar_top();\n    bar_front();\n    bar_sides();\n    lower_shelf();\n    legs();\n    back_panel();\n    footrest();\n}",
    "renders": true
  },
  {
    "furniture": "bistro",
    "openscad_code": "// Bistro chair with curved backrest and round legs\n// Overall height 90 mm, seat 45 mm from ground, 40 mm seat diameter\n\n// Parameters\nleg_dia = 6;\nleg_h = 45;\nseat_dia = 40;\nseat_th = 4;\nback_h = 45;\nback_w = 38;\nback_th = 3;\nring_dia = 28;\nring_th = 3;\nring_h = 20;\n\n// Leg placement radius (center to center)\nleg_r = (seat_dia - leg_dia) / 2 - 1;\n\nmodule leg() {\n    cylinder(d=leg_dia, h=leg_h, $fn=20);\n}\n\nmodule seat() {\n    difference() {\n        cylinder(d=seat_dia, h=seat_th, $fn=60);\n        // Light underside cavity to save material\n        translate([0, 0, -0.1])\n            cylinder(d=seat_dia - 6, h=seat_th + 0.2, $fn=60);\n    }\n}\n\nmodule backrest() {\n    difference() {\n        // Full back panel\n        translate([0, -seat_dia/2, seat_th + back_h/2])\n            cube([back_w, back_th, back_h], center=true);\n        \n        // Cut curved top\n        translate([0, -seat_dia/2 - back_th, seat_th + back_h])\n            sphere(d=back_w + 2, $fn=60);\n    }\n}\n\nmodule support_ring() {\n    rotate_extrude(angle=360, $fn=60)\n        translate([ring_dia/2, 0, 0])\n            square([ring_th, ring_h]);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([leg_r, 0, 0])\n                leg();\n    \n    // Seat\n    translate([0, 0, leg_h])\n        seat();\n    \n    // Support ring between legs\n    translate([0, 0, ring_h])\n        support_ring();\n    \n    // Backrest\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "cocktail",
    "openscad_code": "// Cocktail Chair - Realistic Style, Medium Complexity\n// A mid-century modern cocktail chair with slender legs and a curved backrest\n\n// Overall dimensions (mm)\nchair_width = 80;\nchair_depth = 75;\nchair_height = 85;\nseat_height = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Seat cushion module\nmodule seat_cushion() {\n    // Main cushion\n    translate([0, 0, seat_height + 5])\n        cube([chair_width - 10, chair_depth - 10, 10], center = true);\n    \n    // Rounded edges on top\n    translate([0, 0, seat_height + 10])\n        scale([chair_width - 10, chair_depth - 10, 1])\n            sphere(5, $fn = 20);\n}\n\n// Backrest module with curved design\nmodule backrest() {\n    // Main backrest panel\n    translate([0, chair_depth/2 - 15, chair_height/2 + 10])\n        cube([chair_width - 10, wall_thickness, chair_height - seat_height], center = true);\n    \n    // Curved top edge\n    difference() {\n        translate([0, chair_depth/2 - 15, chair_height - 5])\n            cube([chair_width - 10, wall_thickness, 10], center = true);\n        \n        // Create curved top\n        translate([0, chair_depth/2 - 15, chair_height + 5])\n            rotate([90, 0, 0])\n                cylinder(h = chair_width - 10, r = 5, center = true, $fn = 20);\n    }\n    \n    // Support bars\n    for(i = [-1:1]) {\n        translate([i * 20, chair_depth/2 - 15, chair_height/2 + 10])\n            cube([wall_thickness * 2, wall_thickness + 2, chair_height - seat_height], center = true);\n    }\n}\n\n// Leg module with tapered design\nmodule leg() {\n    // Main leg post\n    cylinder(h = seat_height, r1 = 3, r2 = 2, $fn = 12);\n    \n    // Foot detail\n    translate([0, 0, -1])\n        cylinder(h = 3, r = 3.5, $fn = 12);\n}\n\n// Side stretchers between legs\nmodule stretcher() {\n    cylinder(h = 60, r = 1.5, $fn = 8);\n}\n\n// Chair assembly\nunion() {\n    // Seat frame\n    difference() {\n        // Main seat base\n        translate([0, 0, seat_height/2])\n            cube([chair_width, chair_depth, seat_height], center = true);\n        \n        // Hollow out for weight reduction\n        translate([0, 0, seat_height/2])\n            cube([chair_width - wall_thickness*2, chair_depth - wall_thickness*2, seat_height - wall_thickness], center = true);\n    }\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Four legs with proper placement\n    translate([chair_width/2 - 5, chair_depth/2 - 5, 0])\n        leg();\n    translate([-chair_width/2 + 5, chair_depth/2 - 5, 0])\n        leg();\n    translate([chair_width/2 - 5, -chair_depth/2 + 5, 0])\n        leg();\n    translate([-chair_width/2 + 5, -chair_depth/2 + 5, 0])\n        leg();\n    \n    // Side stretchers\n    translate([chair_width/2 - 5, 0, seat_height/3])\n        rotate([90, 0, 90])\n            stretcher();\n    translate([-chair_width/2 + 5, 0, seat_height/3])\n        rotate([90, 0, 90])\n            stretcher();\n    \n    // Front and back stretchers\n    translate([0, chair_depth/2 - 5, seat_height/3])\n        rotate([90, 0, 0])\n            stretcher();\n    translate([0, -chair_depth/2 + 5, seat_height/3])\n        rotate([90, 0, 0])\n            stretcher();\n}",
    "renders": true
  },
  {
    "furniture": "hall",
    "openscad_code": "// Hall Bench with Storage\n// Overall dimensions: 120mm wide x 45mm deep x 60mm tall\n\n// Main parameters\nbench_width = 120;\nbench_depth = 45;\nbench_height = 60;\nwall_thickness = 2;\nleg_height = 40;\n\n// Module for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, radius]) \n            cube([size.x-2*radius, size.y-2*radius, size.z-2*radius]);\n        translate([size.x-radius, radius, radius]) \n            sphere(r=radius);\n        translate([radius, size.y-radius, radius]) \n            sphere(r=radius);\n        translate([size.x-radius, size.y-radius, radius]) \n            sphere(r=radius);\n        translate([radius, radius, size.z-radius]) \n            sphere(r=radius);\n        translate([size.x-radius, radius, size.z-radius]) \n            sphere(r=radius);\n        translate([radius, size.y-radius, size.z-radius]) \n            sphere(r=radius);\n        translate([size.x-radius, size.y-radius, size.z-radius]) \n            sphere(r=radius);\n    }\n}\n\n// Bench seat\nmodule bench_seat() {\n    translate([0, 0, leg_height])\n        rounded_cube([bench_width, bench_depth, wall_thickness*2], 3);\n}\n\n// Storage compartment\nmodule storage_box() {\n    difference() {\n        // Outer box\n        translate([5, 5, 5])\n            rounded_cube([bench_width-10, bench_depth-10, leg_height-5], 2);\n        \n        // Inner cavity\n        translate([5+wall_thickness, 5+wall_thickness, 5+wall_thickness])\n            rounded_cube([bench_width-10-2*wall_thickness, \n                         bench_depth-10-2*wall_thickness, \n                         leg_height-5-wall_thickness], 1);\n    }\n}\n\n// Legs\nmodule leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0])\n        cylinder(h=leg_height, r=3, $fn=16);\n}\n\n// Backrest slats\nmodule backrest_slat(x_pos) {\n    translate([x_pos, bench_depth-wall_thickness, leg_height+wall_thickness*2])\n        cube([4, wall_thickness, 25]);\n}\n\n// Coat hooks\nmodule coat_hook(x_pos) {\n    translate([x_pos, bench_depth-wall_thickness-2, leg_height+wall_thickness*2+25])\n    union() {\n        // Hook base\n        cube([6, 3, 2]);\n        // Hook curve\n        translate([3, 0, -8])\n            rotate([90, 0, 0])\n                cylinder(h=8, r1=2, r2=2, $fn=16);\n    }\n}\n\n// Shoe shelf\nmodule shoe_shelf() {\n    translate([10, 10, 15])\n        rounded_cube([bench_width-20, bench_depth-20, wall_thickness], 2);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    bench_seat();\n    storage_box();\n    \n    // Four legs\n    leg(10, 10);\n    leg(bench_width-10, 10);\n    leg(10, bench_depth-10);\n    leg(bench_width-10, bench_depth-10);\n    \n    // Backrest slats\n    for(i = [0:3]) {\n        backrest_slat(20 + i*25);\n    }\n    \n    // Coat hooks\n    for(i = [0:2]) {\n        coat_hook(30 + i*30);\n    }\n    \n    // Shoe shelf\n    shoe_shelf();\n}",
    "renders": true
  },
  {
    "furniture": "pub",
    "openscad_code": "// Pub Bar Stool - Realistic style, medium complexity\n// Overall height: 110 mm, seat diameter: 34 mm\n\n// Parameters\n$fn = 36;\nleg_d = 5;\nleg_h = 90;\nseat_d = 34;\nseat_h = 8;\nfootrest_d = 25;\nfootrest_h = 6;\nback_h = 40;\nback_w = 26;\nback_t = 3;\nring_h = 12;\nring_d = 30;\n\nmodule leg() {\n    // Main leg tube\n    cylinder(d = leg_d, h = leg_h);\n    \n    // Tapered foot\n    translate([0, 0, -1])\n        cylinder(d1 = leg_d + 2, d2 = leg_d, h = 3);\n    \n    // Foot ring reinforcement\n    translate([0, 0, ring_h])\n    difference() {\n        cylinder(d = ring_d, h = 2);\n        cylinder(d = ring_d - 2, h = 3);\n    }\n}\n\nmodule seat() {\n    // Cushion base\n    translate([0, 0, leg_h])\n    difference() {\n        cylinder(d = seat_d, h = seat_h);\n        // Hollow center for weight reduction\n        translate([0, 0, -1])\n            cylinder(d = seat_d - 4, h = seat_h + 2);\n    }\n    \n    // Upholstery detail - top cushion\n    translate([0, 0, leg_h + seat_h])\n    scale([0.95, 0.95, 0.3])\n        cylinder(d = seat_d, h = seat_h);\n    \n    // Upholstery seam\n    translate([0, 0, leg_h + seat_h + 0.5])\n    rotate_extrude()\n        translate([seat_d/2 - 2, 0, 0])\n            circle(d = 1.5);\n}\n\nmodule footrest_assembly() {\n    // Circular footrest ring\n    translate([0, 0, 25])\n    difference() {\n        cylinder(d = footrest_d, h = footrest_h);\n        // Inner hollow\n        cylinder(d = footrest_d - 3, h = footrest_h + 1);\n    }\n    \n    // Support struts between legs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([footrest_d/2 - 1.5, 0, 25 + footrest_h/2])\n            rotate([90, 0, 0])\n                cylinder(d = 2.5, h = footrest_d - 3);\n    }\n}\n\nmodule backrest() {\n    // Back support post\n    translate([0, -seat_d/2 + 3, leg_h + seat_h])\n        cube([3, 6, back_h], center = true);\n    \n    // Backrest panel\n    translate([0, -seat_d/2 - back_t/2 + 3, leg_h + seat_h + back_h/2])\n        cube([back_w, back_t, back_h], center = true);\n    \n    // Backrest top rail\n    translate([0, -seat_d/2 - back_t/2 + 3, leg_h + seat_h + back_h])\n    difference() {\n        cube([back_w + 6, back_t + 2, 6], center = true);\n        cube([back_w + 2, back_t - 1, 8], center = true);\n    }\n    \n    // Support brackets\n    for (x = [-back_w/3, back_w/3]) {\n        translate([x, -seat_d/2 + 3, leg_h + seat_h + back_h/2])\n            rotate([0, 45, 0])\n                cube([4, 2, 8], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Four legs in square pattern\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * 18, y * 18, 0])\n                leg();\n    \n    // Central column\n    translate([0, 0, 0])\n        cylinder(d = 6, h = leg_h);\n    \n    footrest_assembly();\n    \n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "picnic",
    "openscad_code": "// Picnic Bench Set - Realistic Style\n// Overall dimensions: 100mm x 60mm x 45mm\n\n$fn = 32;\n\n// Main bench module\nmodule bench_seat() {\n    // Seat slats\n    for (i = [0:4]) {\n        translate([i * 20 - 40, 0, 0])\n            cube([18, 55, 4], center = true);\n    }\n}\n\n// Bench leg frame\nmodule bench_leg() {\n    // Front leg\n    translate([-35, -25, -20])\n        cube([4, 4, 40], center = true);\n    translate([35, -25, -20])\n        cube([4, 4, 40], center = true);\n    \n    // Back leg\n    translate([-35, 25, -20])\n        cube([4, 4, 40], center = true);\n    translate([35, 25, -20])\n        cube([4, 4, 40], center = true);\n    \n    // Side support beams\n    translate([-35, 0, -20])\n        cube([4, 50, 4], center = true);\n    translate([35, 0, -20])\n        cube([4, 50, 4], center = true);\n}\n\n// Table module\nmodule table() {\n    // Table top\n    translate([0, 0, 22])\n        cube([45, 45, 4], center = true);\n    \n    // Table legs\n    for (x = [-20, 20]) {\n        for (y = [-20, 20]) {\n            translate([x, y, -20])\n                cube([4, 4, 40], center = true);\n        }\n    }\n    \n    // Lower support frame\n    translate([0, 0, -2])\n        cube([42, 42, 4], center = true);\n}\n\n// Backrest for bench\nmodule bench_backrest() {\n    // Backrest posts\n    translate([-35, 30, -5])\n        cube([4, 4, 30], center = true);\n    translate([35, 30, -5])\n        cube([4, 4, 30], center = true);\n    \n    // Backrest slats\n    for (i = [0:2]) {\n        translate([i * 30 - 30, 30, 8])\n            cube([25, 3, 2], center = true);\n    }\n}\n\n// Assembly\ntranslate([-70, 0, 20]) {\n    union() {\n        bench_seat();\n        bench_leg();\n        bench_backrest();\n    }\n}\n\ntranslate([70, 0, 20]) {\n    union() {\n        bench_seat();\n        bench_leg();\n        bench_backrest();\n    }\n}\n\ntranslate([0, 0, 20]) {\n    table();\n}",
    "renders": true
  },
  {
    "furniture": "card",
    "openscad_code": "// Realistic Card-Style Armchair with Medium Complexity\n// Dimensions: 100mm width, 110mm depth, 100mm height\n\n// Main parameters\nchair_width = 100;\nchair_depth = 110;\nchair_height = 100;\nleg_height = 45;\nwall_thickness = 2;\ncushion_thickness = 8;\n\n// Card slot dimensions\ncard_width = 54;\ncard_height = 86;\ncard_thickness = 1.5;\nslot_clearance = 0.5;\n\nmodule chair_frame() {\n    // Base frame with card slots\n    difference() {\n        // Main base\n        translate([0, 0, leg_height/2])\n        cube([chair_width, chair_depth, wall_thickness], center=true);\n        \n        // Card slots in base\n        for (i = [-1, 1]) {\n            translate([i * chair_width/4, 0, leg_height/2 + wall_thickness/2])\n            cube([card_width + slot_clearance, card_thickness + slot_clearance, wall_thickness + 1], center=true);\n        }\n    }\n    \n    // Back frame with card slots\n    difference() {\n        translate([0, -chair_depth/2 + wall_thickness/2, leg_height + chair_height/2])\n        cube([chair_width, wall_thickness, chair_height - leg_height], center=true);\n        \n        // Card slots in back\n        for (j = [0:3]) {\n            translate([0, -chair_depth/2 + wall_thickness/2, leg_height + 20 + j * 20])\n            cube([card_width + slot_clearance, wall_thickness + 1, card_height + slot_clearance], center=true);\n        }\n    }\n}\n\nmodule legs() {\n    leg_positions = [\n        [-chair_width/2 + 10, chair_depth/2 - 10],\n        [chair_width/2 - 10, chair_depth/2 - 10],\n        [-chair_width/2 + 10, -chair_depth/2 + 10],\n        [chair_width/2 - 10, -chair_depth/2 + 10]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], leg_height/2])\n        cylinder(h=leg_height, d=8, center=true);\n    }\n    \n    // Cross supports\n    translate([0, chair_depth/2 - 10, leg_height/3])\n    cube([chair_width - 20, 6, wall_thickness], center=true);\n    \n    translate([0, -chair_depth/2 + 10, leg_height/3])\n    cube([chair_width - 20, 6, wall_thickness], center=true);\n}\n\nmodule seat() {\n    // Cushion base\n    translate([0, 0, leg_height + cushion_thickness/2])\n    cube([chair_width - 10, chair_depth - 10, cushion_thickness], center=true);\n    \n    // Seat frame\n    difference() {\n        translate([0, 0, leg_height + wall_thickness/2])\n        cube([chair_width - 6, chair_depth - 6, wall_thickness], center=true);\n        \n        // Card slot in seat\n        translate([0, 0, leg_height + wall_thickness/2 + 0.5])\n        cube([card_width + slot_clearance, card_thickness + slot_clearance, wall_thickness + 1], center=true);\n    }\n}\n\nmodule armrests() {\n    armrest_height = 70;\n    \n    for (side = [-1, 1]) {\n        // Armrest posts\n        translate([side * (chair_width/2 - 5), 0, armrest_height/2])\n        cube([wall_thickness * 3, chair_depth - 20, armrest_height], center=true);\n        \n        // Armrest top\n        translate([side * (chair_width/2 - 5), 0, armrest_height])\n        cube([wall_thickness * 5, chair_depth - 10, wall_thickness * 2], center=true);\n        \n        // Card slots in armrests\n        translate([side * (chair_width/2 - 5), chair_depth/4, armrest_height/2])\n        cube([wall_thickness * 3 + 1, card_height + slot_clearance, card_width + slot_clearance], center=true);\n    }\n}\n\nmodule backrest_cushion() {\n    backrest_angle = 15;\n    \n    translate([0, -chair_depth/2 + 10, leg_height + (chair_height - leg_height)/2])\n    rotate([backrest_angle, 0, 0])\n    cube([chair_width - 20, wall_thickness * 3, chair_height - leg_height - 10], center=true);\n}\n\n// Assemble the chair\nunion() {\n    chair_frame();\n    legs();\n    seat();\n    armrests();\n    backrest_cushion();\n}",
    "renders": true
  },
  {
    "furniture": "game",
    "openscad_code": "// Game console furniture piece - TV stand with storage\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\nwidth = 120;\ndepth = 60;\nheight = 45;\n\n// Wall thickness\nwall = 2;\n\n// Leg dimensions\nleg_size = 8;\nleg_height = 15;\n\n// Shelf parameters\nshelf_thickness = 3;\nnum_shelves = 2;\nshelf_spacing = 15;\n\n// Drawer parameters\ndrawer_height = 10;\ndrawer_width = 35;\ndrawer_depth = 50;\n\n// Back panel holes for cables\nhole_diameter = 8;\nhole_spacing = 20;\n\nmodule main_frame() {\n    // Bottom frame\n    difference() {\n        cube([width, depth, wall]);\n        translate([wall, wall, -1])\n            cube([width-2*wall, depth-2*wall, wall+2]);\n    }\n    \n    // Top frame\n    translate([0, 0, height-wall])\n        difference() {\n            cube([width, depth, wall]);\n            translate([wall, wall, -1])\n                cube([width-2*wall, depth-2*wall, wall+2]);\n        }\n    \n    // Left side\n    translate([0, 0, wall])\n        difference() {\n            cube([wall, depth, height-2*wall]);\n            translate([0, wall, wall])\n                cube([wall+1, depth-2*wall, height-4*wall]);\n        }\n    \n    // Right side\n    translate([width-wall, 0, wall])\n        difference() {\n            cube([wall, depth, height-2*wall]);\n            translate([-1, wall, wall])\n                cube([wall+1, depth-2*wall, height-4*wall]);\n        }\n    \n    // Back panel with cable holes\n    translate([wall, depth-wall, wall])\n        difference() {\n            cube([width-2*wall, wall, height-2*wall]);\n            for (i = [0:2]) {\n                translate([10 + i*hole_spacing, -1, height/2])\n                    cylinder(h=wall+2, d=hole_diameter, $fn=20);\n            }\n        }\n}\n\nmodule legs() {\n    // Four legs with chamfered edges\n    positions = [[0, 0], [width-leg_size, 0], [0, depth-leg_size], [width-leg_size, depth-leg_size]];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], -leg_height])\n            difference() {\n                cube([leg_size, leg_size, leg_height]);\n                translate([wall, wall, leg_height-wall])\n                    cube([leg_size-2*wall, leg_size-2*wall, wall+1]);\n                translate([wall, wall, 0])\n                    cube([leg_size-2*wall, leg_size-2*wall, wall]);\n            }\n    }\n}\n\nmodule shelves() {\n    // Internal shelves\n    for (i = [0:num_shelves-1]) {\n        shelf_y = wall + i * shelf_spacing;\n        translate([wall, shelf_y, shelf_thickness + i * shelf_spacing])\n            difference() {\n                cube([width-2*wall, shelf_thickness, shelf_spacing-shelf_thickness]);\n                translate([0, -1, wall])\n                    cube([width-2*wall, shelf_thickness+2, shelf_spacing-shelf_thickness-2*wall]);\n            }\n    }\n}\n\nmodule drawers() {\n    // Three drawers on the right side\n    for (i = [0:2]) {\n        drawer_x = width - drawer_width - wall - 2;\n        drawer_y = wall + 2;\n        drawer_z = wall + 2 + i * (drawer_height + 2);\n        \n        // Drawer box\n        translate([drawer_x, drawer_y, drawer_z])\n            difference() {\n                cube([drawer_width, drawer_depth-4, drawer_height]);\n                translate([wall, wall, wall])\n                    cube([drawer_width-2*wall, drawer_depth-4-2*wall, drawer_height-2*wall]);\n            }\n        \n        // Drawer front\n        translate([drawer_x, drawer_y-1, drawer_z])\n            cube([drawer_width, wall+1, drawer_height]);\n        \n        // Handle\n        translate([drawer_x + drawer_width/2, drawer_y-2, drawer_z + drawer_height/2])\n            cylinder(h=4, d=4, $fn=16);\n    }\n}\n\nmodule center_support() {\n    // Central support beam\n    translate([width/2-wall/2, wall, wall])\n        difference() {\n            cube([wall, depth-2*wall, height-2*wall]);\n            translate([-1, wall, wall])\n                cube([wall+2, depth-4*wall, height-4*wall]);\n        }\n}\n\n// Main assembly\nunion() {\n    main_frame();\n    legs();\n    shelves();\n    drawers();\n    center_support();\n}",
    "renders": true
  },
  {
    "furniture": "poker",
    "openscad_code": "// Poker Chair - Realistic Style, Medium Complexity\n// A 3D printable poker chair with proper proportions and structural details\n\n// Main module for the poker chair\nmodule poker_chair() {\n    // Overall dimensions\n    seat_width = 45;\n    seat_depth = 42;\n    seat_height = 45;\n    back_height = 55;\n    \n    // Material thickness\n    thickness = 2;\n    \n    // Seat assembly\n    union() {\n        // Seat cushion\n        translate([0, 0, seat_height]) {\n            difference() {\n                cube([seat_width, seat_depth, 8], center=true);\n                // Cushion indent\n                translate([0, 0, -1])\n                    cube([seat_width-4, seat_depth-4, 10], center=true);\n            }\n        }\n        \n        // Backrest\n        translate([0, -seat_depth/2 + 2, seat_height + back_height/2]) {\n            difference() {\n                cube([seat_width, 6, back_height], center=true);\n                // Backrest contour\n                for(i = [1:8]) {\n                    translate([-(seat_width/2-5) + i*5, 0, back_height/2-5])\n                        rotate([90, 0, 0])\n                            cylinder(h=6, r=2, center=true);\n                }\n            }\n        }\n        \n        // Leg assembly\n        leg_assembly(seat_width, seat_depth, seat_height);\n        \n        // Support bars\n        support_bars(seat_width, seat_depth, seat_height);\n        \n        // Armrests\n        armrests(seat_width, seat_depth, seat_height);\n    }\n}\n\n// Leg assembly module\nmodule leg_assembly(w, d, h) {\n    leg_width = 4;\n    leg_depth = 4;\n    \n    // Front left leg\n    translate([-w/2 + leg_width/2, d/2 - leg_depth/2, h/2]) {\n        cube([leg_width, leg_depth, h], center=true);\n    }\n    \n    // Front right leg\n    translate([w/2 - leg_width/2, d/2 - leg_depth/2, h/2]) {\n        cube([leg_width, leg_depth, h], center=true);\n    }\n    \n    // Back left leg\n    translate([-w/2 + leg_width/2, -d/2 + leg_depth/2, h/2]) {\n        cube([leg_width, leg_depth, h], center=true);\n    }\n    \n    // Back right leg\n    translate([w/2 - leg_width/2, -d/2 + leg_depth/2, h/2]) {\n        cube([leg_width, leg_depth, h], center=true);\n    }\n}\n\n// Support bars module\nmodule support_bars(w, d, h) {\n    bar_size = 2;\n    \n    // Front support\n    translate([0, d/2 - bar_size/2, h/4]) {\n        cube([w - 8, bar_size, bar_size], center=true);\n    }\n    \n    // Back support\n    translate([0, -d/2 + bar_size/2, h/4]) {\n        cube([w - 8, bar_size, bar_size], center=true);\n    }\n    \n    // Left support\n    translate([-w/2 + bar_size/2, 0, h/4]) {\n        rotate([0, 0, 90])\n            cube([d - 8, bar_size, bar_size], center=true);\n    }\n    \n    // Right support\n    translate([w/2 - bar_size/2, 0, h/4]) {\n        rotate([0, 0, 90])\n            cube([d - 8, bar_size, bar_size], center=true);\n    }\n}\n\n// Armrests module\nmodule armrests(w, d, h) {\n    armrest_height = 15;\n    armrest_width = 4;\n    \n    // Left armrest\n    translate([-w/2 - armrest_width/2, 0, h + armrest_height/2]) {\n        cube([armrest_width, d*0.7, armrest_height], center=true);\n    }\n    \n    // Right armrest\n    translate([w/2 + armrest_width/2, 0, h + armrest_height/2]) {\n        cube([armrest_width, d*0.7, armrest_height], center=true);\n    }\n    \n    // Armrest supports\n    // Left support\n    translate([-w/2 - armrest_width/2, d/4, h - 5]) {\n        cube([armrest_width, 2, 10], center=true);\n    }\n    \n    // Right support\n    translate([w/2 + armrest_width/2, d/4, h - 5]) {\n        cube([armrest_width, 2, 10], center=true);\n    }\n}\n\n// Render the poker chair\npoker_chair();",
    "renders": true
  },
  {
    "furniture": "drafting",
    "openscad_code": "// Realistic drafting stool (medium complexity)\n// Height: 110 mm, Seat diameter: 50 mm, Footprint: 120 mm\n\n// Parameters\nseat_d = 45;           // Seat diameter\nseat_h = 8;            // Seat thickness\npost_r = 6;            // Center post radius\nbase_r = 50;           // Base radius\nbase_h = 8;            // Base thickness\nleg_n = 5;             // Number of legs\nleg_w = 8;             // Leg width\nleg_h = 12;            // Leg height\ncastor_r = 4;          // Castor wheel radius\nring_r = 40;           // Foot ring radius\nring_h = 4;            // Foot ring thickness\nadjust_h = 30;         // Adjustable height range\n\n// Main stool module\nmodule drafting_stool() {\n    // Base with legs\n    union() {\n        // Central cylinder base\n        cylinder(h=base_h, r=base_r, $fn=64);\n        \n        // Radial legs\n        for(i=[0:leg_n-1]) {\n            rotate([0, 0, i*360/leg_n])\n            translate([base_r-leg_w/2, 0, -leg_h/2])\n            cube([leg_w, leg_w, leg_h+leg_h/2], center=true);\n        }\n        \n        // Castor wheels under each leg\n        for(i=[0:leg_n-1]) {\n            rotate([0, 0, i*360/leg_n])\n            translate([base_r-leg_w/2, 0, -leg_h-castor_r])\n            sphere(r=castor_r, $fn=16);\n        }\n    }\n    \n    // Central post\n    translate([0, 0, base_h])\n    cylinder(h=adjust_h+20, r=post_r, $fn=32);\n    \n    // Height adjustment mechanism (visible ring)\n    translate([0, 0, base_h+15])\n    difference() {\n        cylinder(h=6, r=post_r+4, $fn=32);\n        cylinder(h=8, r=post_r+1, $fn=32);\n    }\n    \n    // Foot ring at mid-height\n    translate([0, 0, base_h+adjust_h/2])\n    difference() {\n        cylinder(h=ring_h, r=ring_r, $fn=64);\n        cylinder(h=ring_h+1, r=ring_r-4, $fn=64);\n    }\n    // Ring support spokes\n    for(i=[0:leg_n-1]) {\n        rotate([0, 0, i*360/leg_n])\n        translate([post_r+2, -2, 0])\n        cube([ring_r-post_r-3, 4, ring_h], center=false);\n    }\n    \n    // Padded seat\n    translate([0, 0, base_h+adjust_h+20])\n    union() {\n        // Seat cushion (slightly domed)\n        scale([1, 1, 0.3])\n        sphere(r=seat_d/2, $fn=64);\n        // Seat base\n        translate([0, 0, -seat_h/2])\n        cylinder(h=seat_h, r=seat_d/2, $fn=64);\n    }\n    \n    // Seat backrest support post\n    translate([0, -seat_d/2, base_h+adjust_h+20])\n    rotate([15, 0, 0])\n    union() {\n        // Vertical post\n        cube([6, 6, 30], center=true);\n        // Backrest ring\n        translate([0, 0, 15])\n        rotate_extrude($fn=64)\n        translate([20, 0, 0])\n        circle(r=3);\n    }\n}\n\n// Render the stool\ndrafting_stool();",
    "renders": true
  },
  {
    "furniture": "drawing",
    "openscad_code": "// Drawing Table - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm x 70mm x 75mm (W x D x H)\n\n// Table parameters\ntable_width = 120;\ntable_depth = 70;\ntable_height = 75;\nleg_size = 25;\nwall_thickness = 2;\n\n// Main tabletop\nmodule tabletop() {\n    difference() {\n        // Main tabletop slab\n        translate([0, 0, table_height - 3])\n            cube([table_width, table_depth, 3], center=true);\n        \n        // Pencil groove\n        translate([0, table_depth/2 - 8, table_height - 1.5])\n            cube([table_width - 20, 4, 1.5], center=true);\n        \n        // Rounded front edge\n        translate([0, table_depth/2, table_height - 1.5])\n            rotate([90, 0, 0])\n            cylinder(h=table_width, r=1.5, center=true);\n    }\n}\n\n// Table legs with stretchers\nmodule legs() {\n    leg_positions = [\n        [table_width/2 - leg_size/2, table_depth/2 - leg_size/2, 0],\n        [-table_width/2 + leg_size/2, table_depth/2 - leg_size/2, 0],\n        [table_width/2 - leg_size/2, -table_depth/2 + leg_size/2, 0],\n        [-table_width/2 + leg_size/2, -table_depth/2 + leg_size/2, 0]\n    ];\n    \n    // Legs\n    for(pos = leg_positions) {\n        translate(pos)\n            cube([leg_size, leg_size, table_height - 3], center=false);\n    }\n    \n    // Lower stretcher front/back\n    translate([0, table_depth/2 - leg_size/2, 15])\n        cube([table_width - leg_size, wall_thickness, leg_size], center=true);\n    \n    translate([0, -table_depth/2 + leg_size/2, 15])\n        cube([table_width - leg_size, wall_thickness, leg_size], center=true);\n    \n    // Side stretchers\n    translate([table_width/2 - leg_size/2, 0, 15])\n        cube([wall_thickness, table_depth - leg_size, leg_size], center=true);\n    \n    translate([-table_width/2 + leg_size/2, 0, 15])\n        cube([wall_thickness, table_depth - leg_size, leg_size], center=true);\n}\n\n// Drawer unit\nmodule drawer_unit() {\n    translate([table_width/2 - 30, 0, 20]) {\n        difference() {\n            // Main drawer box\n            cube([30, table_depth - 10, 30], center=true);\n            \n            // Drawer cavity\n            translate([0, 0, 2])\n                cube([26, table_depth - 14, 26], center=true);\n        }\n        \n        // Drawer front\n        translate([-1, 0, 15])\n            cube([2, table_depth - 14, 14], center=true);\n        \n        // Drawer handle\n        translate([-2, 0, 15])\n            rotate([90, 0, 0])\n            cylinder(h=20, r=2, center=true);\n    }\n}\n\n// Table support frame under top\nmodule support_frame() {\n    // Front support\n    translate([0, table_depth/2 - 2, table_height - 6])\n        cube([table_width - 4, 4, 3], center=true);\n    \n    // Back support\n    translate([0, -table_depth/2 + 2, table_height - 6])\n        cube([table_width - 4, 4, 3], center=true);\n    \n    // Side supports\n    translate([table_width/2 - 2, 0, table_height - 6])\n        cube([4, table_depth - 4, 3], center=true);\n    \n    translate([-table_width/2 + 2, 0, table_height - 6])\n        cube([4, table_depth - 4, 3], center=true);\n}\n\n// Paper holder lip at back\nmodule paper_holder() {\n    translate([0, -table_depth/2 + 1, table_height - 1])\n        cube([table_width - 10, 2, 10], center=true);\n}\n\n// Assembly\nunion() {\n    tabletop();\n    legs();\n    support_frame();\n    drawer_unit();\n    paper_holder();\n}",
    "renders": true
  },
  {
    "furniture": "writing",
    "openscad_code": "// Writing Desk - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm(W) x 60mm(D) x 75mm(H)\n\n// Desk Parameters\ndesk_w = 100;\ndesk_d = 60;\ndesk_h = 75;\ntop_t = 4;\nleg_w = 6;\nleg_h = 72;\nback_h = 20;\ndrawer_w = 28;\ndrawer_h = 10;\nwall_t = 2;\n\n// Wooden material look\ncolor(\"burlywood\") {\n    // Desktop\n    translate([0,0,desk_h-top_t])\n        cube([desk_w,desk_d,top_t], center=true);\n    \n    // Back panel\n    translate([0,desk_d/2-leg_w/2,desk_h-top_t-back_h/2])\n        cube([desk_w,leg_w,back_h], center=true);\n    \n    // Legs\n    module leg() {\n        difference() {\n            cube([leg_w,leg_w,leg_h], center=true);\n            // Chamfer edges slightly for realism\n            translate([0,0,-leg_h/2+1])\n                cylinder(h=leg_h+2, r1=leg_w/2-0.5, r2=leg_w/2-0.5, center=true, $fn=4);\n        }\n    }\n    \n    // Position four legs\n    for(x=[-desk_w/2+leg_w/2, desk_w/2-leg_w/2])\n        for(y=[-desk_d/2+leg_w/2, desk_d/2-leg_w/2])\n            translate([x,y,leg_h/2])\n                leg();\n    \n    // Drawer compartment frame\n    translate([0,0,desk_h-top_t-drawer_h/2-5])\n        difference() {\n            // Outer frame\n            cube([desk_w-wall_t*2, desk_d-wall_t*2, drawer_h+4], center=true);\n            // Inner cavity\n            cube([drawer_w*3+8, desk_d-wall_t*4, drawer_h+2], center=true);\n        }\n    \n    // Drawers\n    module drawer(pos_x) {\n        translate([pos_x,0,desk_h-top_t-drawer_h/2-5]) {\n            // Drawer box\n            difference() {\n                cube([drawer_w-1, desk_d-wall_t*6, drawer_h-1], center=true);\n                // Handle recess\n                translate([drawer_w/4,0,0])\n                    cube([drawer_w/2, 2, drawer_h/2], center=true);\n            }\n            // Drawer front\n            translate([0,desk_d/2-wall_t*3-1,0])\n                cube([drawer_w, 1.5, drawer_h], center=true);\n            // Handle\n            translate([0,desk_d/2-wall_t*3-2,0])\n                cylinder(h=8, r1=1, r2=1, center=true);\n        }\n    }\n    \n    // Three drawers\n    drawer(-drawer_w-1);\n    drawer(0);\n    drawer(drawer_w+1);\n    \n    // Side support rails\n    module rail(y) {\n        translate([0,y,leg_h/2+15])\n            cube([desk_w-leg_w*2, wall_t, leg_h/2], center=true);\n    }\n    \n    rail(desk_d/2-leg_w/2);\n    rail(-desk_d/2+leg_w/2);\n    \n    // Front support rail\n    translate([0,-desk_d/2+leg_w/2,desk_h-top_t-10])\n        cube([desk_w-leg_w*2, wall_t, 10], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "study",
    "openscad_code": "// Study desk with drawers and bookshelf hutch\n// Overall height ~100mm, width ~120mm, depth ~80mm\n\n$fn = 32;  // Smooth curves\n\nmodule desk() {\n    // Top surface\n    translate([0, 0, 95])\n        cube([120, 80, 5], center = true);\n    \n    // Side panels\n    translate([-55, 0, 47.5])\n        cube([8, 75, 85], center = true);\n    translate([55, 0, 47.5])\n        cube([8, 75, 85], center = true);\n    \n    // Back panel\n    translate([0, -35, 47.5])\n        cube([104, 6, 85], center = true);\n}\n\nmodule drawers() {\n    // Drawer bank\n    translate([0, 20, 65])\n        cube([100, 35, 25], center = true);\n    \n    // Individual drawer fronts (3 drawers)\n    for(i = [0:2]) {\n        // Drawer front\n        translate([0, 38, 77 - i*20])\n            cube([94, 0.5, 15], center = true);\n        \n        // Handle\n        translate([0, 39.5, 77 - i*20])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = 2);\n    }\n}\n\nmodule hutch() {\n    // Hutch back\n    translate([0, -30, 115])\n        cube([110, 4, 35], center = true);\n    \n    // Hutch sides\n    translate([-52, -20, 115])\n        cube([4, 20, 35], center = true);\n    translate([52, -20, 115])\n        cube([4, 20, 35], center = true);\n    \n    // Shelves (2 shelves)\n    for(i = [0:1]) {\n        translate([0, -20, 100 + i*25])\n            cube([100, 18, 3], center = true);\n    }\n}\n\nmodule keyboard_tray() {\n    // Tray slides\n    translate([-45, 0, 72])\n        cube([6, 70, 4], center = true);\n    translate([45, 0, 72])\n        cube([6, 70, 4], center = true);\n    \n    // Tray surface\n    translate([0, 0, 68])\n        cube([80, 65, 2], center = true);\n}\n\n// Legs\nmodule legs() {\n    for(x = [-45, 45])\n    for(y = [-25, 25]) {\n        translate([x, y, 0])\n            cylinder(h = 45, r = 3);\n    }\n}\n\n// Assembly\nunion() {\n    legs();\n    desk();\n    drawers();\n    hutch();\n    keyboard_tray();\n}",
    "renders": true
  },
  {
    "furniture": "computer",
    "openscad_code": "// Computer Desk with Monitor Stand and Keyboard Tray\n// Overall dimensions: 120mm wide x 80mm deep x 100mm tall\n\n// Main desk surface\nmodule desk_surface() {\n    // Top surface - 2mm thick\n    difference() {\n        cube([120, 80, 2], center=true);\n        // Cable management hole 10mm diameter\n        translate([0, 20, 1])\n            cylinder(h=3, d=10, center=true);\n    }\n}\n\n// Monitor stand platform\nmodule monitor_stand() {\n    // Monitor platform\n    translate([0, -20, 35])\n        cube([80, 40, 2], center=true);\n    \n    // Left support leg\n    translate([-30, -20, 17.5])\n        cube([4, 40, 35], center=true);\n    \n    // Right support leg\n    translate([30, -20, 17.5])\n        cube([4, 40, 35], center=true);\n}\n\n// Keyboard tray\nmodule keyboard_tray() {\n    // Tray surface\n    translate([0, 20, 18])\n        cube([100, 60, 2], center=true);\n    \n    // Left slider rail\n    translate([-50, 20, 9])\n        cube([2, 60, 18], center=true);\n    \n    // Right slider rail\n    translate([50, 20, 9])\n        cube([2, 60, 18], center=true);\n    \n    // Front support lip\n    translate([0, 50, 19])\n        cube([100, 2, 2], center=true);\n}\n\n// Desk legs\nmodule desk_leg(x_pos) {\n    // Main leg post\n    translate([x_pos, 0, -48])\n        cube([4, 4, 96], center=true);\n    \n    // Front foot\n    translate([x_pos, 35, -95])\n        cube([8, 2, 4], center=true);\n    \n    // Rear foot\n    translate([x_pos, -35, -95])\n        cube([8, 2, 4], center=true);\n}\n\n// Side support beams\nmodule support_beam() {\n    // Front beam\n    translate([0, 35, -70])\n        cube([116, 2, 4], center=true);\n    \n    // Rear beam\n    translate([0, -35, -70])\n        cube([116, 2, 4], center=true);\n}\n\n// Computer tower holder\nmodule tower_holder() {\n    // Base platform\n    translate([-45, 0, -82])\n        cube([20, 30, 2], center=true);\n    \n    // Left side\n    translate([-55, 0, -75])\n        cube([2, 30, 16], center=true);\n    \n    // Right side\n    translate([-35, 0, -75])\n        cube([2, 30, 16], center=true);\n}\n\n// Assemble the complete desk\nunion() {\n    // Main desk components\n    desk_surface();\n    monitor_stand();\n    keyboard_tray();\n    \n    // Structural elements\n    desk_leg(-55);\n    desk_leg(55);\n    support_beam();\n    tower_holder();\n}",
    "renders": true
  },
  {
    "furniture": "laptop",
    "openscad_code": "// Laptop furniture item - Realistic style, medium complexity\n\n// Overall dimensions (mm)\nlaptop_length = 120;\nlaptop_width = 80;\nlaptop_thickness = 8;\nscreen_thickness = 4;\nbase_thickness = 6;\nhinge_diameter = 6;\nwall_thickness = 2;\n\n// Screen dimensions\nscreen_length = 110;\nscreen_width = 70;\nscreen_depth = 3;\n\n// Keyboard area\nkeyboard_length = 100;\nkeyboard_width = 60;\nkey_width = 7;\nkey_height = 4;\nkey_depth = 1.5;\nkey_rows = 4;\nkey_cols = 12;\n\n// Trackpad\ntrackpad_length = 35;\ntrackpad_width = 25;\ntrackpad_depth = 0.5;\n\n// Ports\nusb_width = 6;\nusb_height = 3;\n\n// Cooling vents\nvent_length = 25;\nvent_width = 2;\nvent_rows = 3;\n\n// Base module\nmodule laptop_base() {\n    difference() {\n        // Main base\n        translate([0, 0, base_thickness/2])\n            cube([laptop_length, laptop_width, base_thickness], center=true);\n        \n        // Keyboard recess\n        translate([0, 5, base_thickness - key_depth - 0.1])\n            cube([keyboard_length, keyboard_width, key_depth + 0.2], center=true);\n        \n        // Trackpad recess\n        translate([0, -20, base_thickness - trackpad_depth - 0.1])\n            cube([trackpad_length, trackpad_width, trackpad_depth + 0.2], center=true);\n        \n        // USB ports on left side\n        for(i = [0:1]) {\n            translate([-laptop_length/2 - 0.1, -15 + i*10, base_thickness/2 - 5])\n                cube([usb_width + 0.2, usb_height, usb_height + 0.2], center=true);\n        }\n        \n        // Cooling vents on bottom\n        for(i = [0:vent_rows-1]) {\n            for(j = [0:3]) {\n                translate([-30 + j*20, -laptop_width/2 - 0.1, base_thickness/2 - 2 + i*3])\n                    cube([vent_length, vent_width + 0.2, vent_width], center=true);\n            }\n        }\n    }\n}\n\n// Keyboard keys\nmodule keyboard_keys() {\n    for(row = [0:key_rows-1]) {\n        for(col = [0:key_cols-1]) {\n            if(!(row == 3 && col > key_cols-4)) {\n                translate([-45 + col*8, 10 - row*8, base_thickness - key_depth/2])\n                    cube([key_width, key_height, key_depth], center=true);\n            }\n        }\n    }\n}\n\n// Trackpad button\nmodule trackpad_button() {\n    union() {\n        // Trackpad surface\n        translate([0, -20, base_thickness - trackpad_depth/2])\n            cube([trackpad_length, trackpad_width, trackpad_depth], center=true);\n        \n        // Button separator\n        translate([0, -32.5, base_thickness - trackpad_depth/2])\n            cube([trackpad_length, 1, trackpad_depth], center=true);\n    }\n}\n\n// Screen module\nmodule laptop_screen() {\n    difference() {\n        // Screen frame\n        translate([0, 0, screen_thickness/2 + base_thickness])\n            cube([laptop_length, laptop_width, screen_thickness], center=true);\n        \n        // Display area\n        translate([0, 0, screen_thickness + base_thickness - 0.1])\n            cube([screen_length, screen_width, screen_depth + 0.2], center=true);\n        \n        // Webcam\n        translate([0, 30, screen_thickness + base_thickness - 0.1])\n            cylinder(h=2, d=3, $fn=16, center=true);\n    }\n}\n\n// Hinges\nmodule hinges() {\n    for(side = [-1, 1]) {\n        translate([laptop_length/2 - 15, side*(laptop_width/2 - hinge_diameter/2), base_thickness])\n            cylinder(h=hinge_diameter, d=hinge_diameter, $fn=16, center=true);\n    }\n}\n\n// Assemble laptop\nunion() {\n    laptop_base();\n    keyboard_keys();\n    trackpad_button();\n    hinges();\n    \n    // Rotate screen to open position\n    rotate([120, 0, 0])\n    translate([0, 0, -base_thickness])\n    laptop_screen();\n}",
    "renders": true
  },
  {
    "furniture": "standing",
    "openscad_code": "// Realistic standing nightstand / bedside table\n// Overall dimensions: 60 mm W x 45 mm D x 120 mm H\n// Wall thickness: 2 mm everywhere for easy printing\n\n$fn = 24;  // Smooth curves\n\nmodule legs() {\n    // Four tapered legs\n    for (x = [-26, 26])\n        for (z = [-20, 20]) {\n            translate([x, 0, z]) {\n                cylinder(h = 100, r1 = 4, r2 = 3, center = false);\n            }\n        }\n}\n\nmodule top_panel() {\n    // Table top\n    translate([0, 0, 100])\n        cube([64, 49, 4], center = true);\n}\n\nmodule shelf() {\n    // Middle shelf\n    difference() {\n        translate([0, 0, 50])\n            cube([58, 43, 2], center = true);\n        // Cutout at back for cable pass-through\n        translate([0, 19, 50])\n            cube([30, 2, 4], center = true);\n    }\n}\n\nmodule back_panel() {\n    // Back panel with ventilation slots\n    difference() {\n        translate([0, -20, 75])\n            cube([58, 2, 50], center = true);\n        // Ventilation slots\n        for (y = [-20, -10, 0, 10, 20])\n            translate([y, -20, 75])\n                cube([4, 2, 40], center = true);\n    }\n}\n\nmodule drawer() {\n    // Drawer box\n    difference() {\n        translate([0, 0, 74])\n            cube([52, 37, 22], center = true);\n        // Inside cavity\n        translate([0, 0, 74])\n            cube([48, 33, 20], center = true);\n    }\n    \n    // Drawer front\n    translate([0, 22, 74])\n        cube([54, 2, 24], center = true);\n    \n    // Drawer handle\n    translate([0, 24, 74])\n        cylinder(h = 12, r = 2, center = true);\n}\n\nmodule nightstand() {\n    union() {\n        legs();\n        top_panel();\n        shelf();\n        back_panel();\n        drawer();\n    }\n}\n\n// Render the nightstand\nnightstand();",
    "renders": true
  },
  {
    "furniture": "adjustable",
    "openscad_code": "// Adjustable-height stool with swiveling seat\n// Medium complexity furniture model\n// 3D printable with 2mm walls and no overhangs\n\n$fn = 32;\n\n// Main parameters\nseat_diameter = 40;\nbase_diameter = 35;\nmin_height = 45;\nmax_height = 65;\nleg_count = 4;\n\n// Seat module with cushion detail\nmodule seat(height) {\n    // Seat base\n    translate([0, 0, height])\n    difference() {\n        cylinder(h=4, d=seat_diameter);\n        translate([0, 0, 2])\n        cylinder(h=3, d=seat_diameter - 4);\n    }\n    \n    // Cushion effect\n    translate([0, 0, height + 4])\n    cylinder(h=3, d=seat_diameter - 4);\n    \n    // Swivel mechanism housing\n    translate([0, 0, height - 5])\n    cylinder(h=5, d=12);\n}\n\n// Adjustable central pole with telescoping sections\nmodule pole(current_height) {\n    // Outer tube (fixed to base)\n    cylinder(h=current_height - 10, d=10);\n    \n    // Inner tube (moves with seat)\n    translate([0, 0, current_height - 10])\n    cylinder(h=10, d=8);\n    \n    // Height adjustment holes\n    for(i = [0:2:10]) {\n        translate([5, 0, 10 + i * 5])\n        rotate([0, 90, 0])\n        cylinder(h=12, d=2);\n    }\n}\n\n// Base module with legs\nmodule base() {\n    // Central hub\n    cylinder(h=8, d=15);\n    \n    // Legs\n    for(i = [0:leg_count-1]) {\n        rotate([0, 0, i * 360/leg_count])\n        translate([0, 0, 0])\n        leg();\n    }\n    \n    // Foot ring for stability\n    translate([0, 0, -2])\n    cylinder(h=2, d=base_diameter + 10);\n}\n\n// Individual leg\nmodule leg() {\n    translate([base_diameter/2 - 3, -2, 0])\n    cube([15, 4, 8]);\n    \n    // Foot pad\n    translate([base_diameter/2 + 12, -3, -2])\n    cylinder(h=4, d=6);\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    base();\n    \n    // Pole assembly\n    translate([0, 0, 8])\n    pole(max_height);\n    \n    // Seat assembly\n    seat(max_height);\n}\n\n// Optional cross-braces for extra stability\nmodule cross_brace() {\n    for(i = [0:leg_count-1]) {\n        rotate([0, 0, i * 360/leg_count + 45])\n        translate([base_diameter/2, -1, 4])\n        cube([20, 2, 2]);\n    }\n}\n\n// Uncomment for additional stability\n// translate([0, 0, 4])\n// cross_brace();",
    "renders": true
  },
  {
    "furniture": "folding",
    "openscad_code": "// Folding stool – prints in one piece, no supports\n// Dimensions: 120 mm high when unfolded, 150 mm deep, 30 mm thick when folded\n// All wall thicknesses 2 mm for reliable FDM printing\n\n$fn = 32;\n\n// overall dimensions\nleg_length   = 120;\nseat_width   = 150;\nseat_depth   = 110;\nwall         = 2;\n\nmodule leg_pair(ang) {\n    // single leg profile\n    difference() {\n        cube([wall, seat_depth - 2*wall, leg_length]);\n        // lightening cut-out\n        translate([wall, wall, wall])\n            cube([wall, seat_depth - 4*wall, leg_length - 2*wall]);\n    }\n    // second leg mirrored\n    translate([seat_width - 2*wall, 0, 0])\n        mirror([1,0,0]) children();\n}\n\nmodule seat_surface() {\n    // perforated seat for weight reduction\n    difference() {\n        cube([seat_width, seat_depth, wall]);\n        for (x = [wall*2 : wall*4 : seat_width - wall*4])\n            for (y = [wall*2 : wall*4 : seat_depth - wall*4])\n                translate([x, y, -1])\n                    cube([wall*2, wall*2, wall+2]);\n    }\n}\n\nmodule cross_brace() {\n    // folding brace printed integral with rear legs\n    brace_len = seat_width/2 - wall;\n    translate([seat_width/2 - brace_len/2, wall, leg_length/2])\n        rotate([0,90,0])\n            cylinder(h = brace_len, r = wall, center = true);\n}\n\nmodule hinge_pin() {\n    cylinder(h = seat_depth, r = wall, center = true);\n}\n\n// rear legs\ntranslate([0, 0, 0])\n    union() {\n        leg_pair(0);\n        cross_brace();\n    }\n\n// front legs, rotated 180° around hinge\ntranslate([0, 0, wall])\n    rotate([0, 180, 0])\n        translate([0, 0, leg_length])\n            leg_pair(0);\n\n// seat – hinged between front and rear legs\ntranslate([0, 0, leg_length])\n    rotate([0, 180, 0]) {\n        seat_surface();\n        // hinge pins\n        translate([wall, seat_depth/2, 0])\n            hinge_pin();\n        translate([seat_width - 3*wall, seat_depth/2, 0])\n            hinge_pin();\n    }\n\n// small feet pads for stability\nfor (x = [wall, seat_width - 2*wall]) {\n    translate([x, wall, 0])\n        cube([wall*3, wall*3, wall]);\n    translate([x, seat_depth - 3*wall, 0])\n        cube([wall*3, wall*3, wall]);\n    translate([x, wall, leg_length - wall])\n        cube([wall*3, wall*3, wall]);\n    translate([x, seat_depth - 3*wall, leg_length - wall])\n        cube([wall*3, wall*3, wall]);\n}",
    "renders": true
  },
  {
    "furniture": "gateleg",
    "openscad_code": "// Gateleg Table – realistic style, medium complexity\n// 100 mm wide × 80 mm deep × 75 mm high when open\n\n// Parameters\nwall = 2;\ntop_thick = 3;\nleg_w = 4;\nleg_h = 72;\nstretcher_d = 6;\nstretcher_h = 8;\nleaf_l = 45;\nleaf_w = 38;\nleaf_thick = 3;\npivot_clear = 1;\nhinge_pin_r = 1.5;\n\n// Main module\nmodule gateleg_table(open=true){\n    difference(){\n        union(){\n            fixed_top();\n            leg_frame();\n            if(open) gate_leaf(open);\n        }\n        // Remove hollow interiors\n        translate([wall,wall,top_thick])\n            cube([100-2*wall, 38-2*wall, leaf_thick-wall]);\n    }\n}\n\n// Fixed top with breadboard ends\nmodule fixed_top(){\n    union(){\n        // Main slab\n        cube([100,38,top_thick], center=false);\n        // Thicker breadboard ends\n        translate([0,0,0])\n            cube([100,4,top_thick+1]);\n        translate([0,34,0])\n            cube([100,4,top_thick+1]);\n    }\n}\n\n// Frame with legs, stretchers and pivot block\nmodule leg_frame(){\n    // Pivot block under fixed top\n    translate([49, 19-wall/2, top_thick])\n        cube([wall+2*wall, wall+2*wall, leg_h]);\n\n    // Rear leg pair\n    for(side=[-1,1])\n        translate([0, side*17, 0])\n            leg([4, leg_w], leg_h);\n\n    // Front leg pair\n    for(side=[-1,1])\n        translate([96-4, side*17, 0])\n            leg([4, leg_w], leg_h);\n\n    // Lower stretchers\n    translate([4+2, 0, stretcher_h])\n        cube([96-8-4, 34, wall]);\n    translate([4+2, 0, stretcher_h+20])\n        cube([96-8-4, 34, wall]);\n}\n\n// Single tapered leg with foot\nmodule leg(size, h){\n    union(){\n        // Shaft\n        translate([0,-size.y/2,0])\n            cube([size.x, size.y, h]);\n        // Foot pad\n        translate([-1, -size.y/2-1, -1])\n            cube([size.x+2, size.y+2, 1]);\n    }\n}\n\n// Gate leaf with hinge pins\nmodule gate_leaf(open=true){\n    angle = open ? 90 : 0;\n    // Hinge pins\n    for(pin=[0,leaf_thick])\n        translate([49, 19-wall/2, top_thick+pin])\n            rotate([90,0,0])\n                cylinder(h=wall, r=hinge_pin_r);\n\n    // Leaf itself\n    translate([49, 19-wall/2, top_thick-leaf_thick])\n        rotate([0,0,-angle])\n            translate([-leaf_l/2, -wall/2, 0])\n                cube([leaf_l, leaf_w, leaf_thick]);\n}\n\ngateleg_table(true);",
    "renders": true
  },
  {
    "furniture": "drop",
    "openscad_code": "// Drop-style coffee table with tapered legs and shelf\n// Overall size: 110mm x 60mm x 45mm\n\n// Table top thickness\ntop_thickness = 8;\n\n// Leg dimensions\nleg_height = 35;\nleg_top = 6;\nleg_bottom = 4;\n\n// Shelf position and thickness\nshelf_height = 15;\nshelf_thickness = 6;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Table top with rounded edges\nmodule table_top() {\n    difference() {\n        // Main top\n        translate([0, 0, leg_height + top_thickness/2])\n            minkowski() {\n                cube([110, 60, top_thickness - 2], center=true);\n                sphere(2);\n            }\n        \n        // Underside hollow\n        translate([0, 0, leg_height + top_thickness - wall])\n            cube([110 - 2*wall, 60 - 2*wall, top_thickness - wall], center=true);\n    }\n}\n\n// Tapered leg\nmodule leg() {\n    hull() {\n        // Top of leg\n        translate([0, 0, leg_height - leg_top/2])\n            cylinder(h=leg_top, r=leg_top/2, center=true);\n        \n        // Bottom of leg\n        translate([0, 0, leg_bottom/2])\n            cylinder(h=leg_bottom, r=leg_bottom/2, center=true);\n    }\n}\n\n// Lower shelf with rounded front edge\nmodule shelf() {\n    difference() {\n        // Main shelf\n        translate([0, 0, shelf_height + shelf_thickness/2])\n            minkowski() {\n                cube([90, 50, shelf_thickness - 2], center=true);\n                sphere(1.5);\n            }\n        \n        // Underside hollow\n        translate([0, 0, shelf_height + shelf_thickness - wall])\n            cube([90 - 2*wall, 50 - 2*wall, shelf_thickness - wall], center=true);\n    }\n}\n\n// Support rail between legs\nmodule rail(length, angle) {\n    rotate([0, 0, angle])\n        translate([0, 0, shelf_height/2])\n            cube([length, wall, shelf_height], center=true);\n}\n\n// Assembly\nunion() {\n    // Table top\n    table_top();\n    \n    // Four legs\n    for (x = [-45, 45])\n        for (y = [-25, 25])\n            translate([x, y, 0])\n                leg();\n    \n    // Lower shelf\n    shelf();\n    \n    // Support rails\n    rail(80, 0);\n    rail(40, 90);\n}",
    "renders": true
  },
  {
    "furniture": "extendable",
    "openscad_code": "// Extendable Coffee Table (realistic style, medium complexity)\n// Closed: 80x45x30mm, Fully extended: 120x45x30mm\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule table_top(length) {\n    difference() {\n        // Main tabletop surface\n        cube([length, 45, wall_thickness]);\n        \n        // Rounded edges using negative cylinders\n        translate([wall_thickness, wall_thickness, -1])\n            cylinder(h=wall_thickness+2, r=wall_thickness);\n        translate([length-wall_thickness, wall_thickness, -1])\n            cylinder(h=wall_thickness+2, r=wall_thickness);\n        translate([wall_thickness, 45-wall_thickness, -1])\n            cylinder(h=wall_thickness+2, r=wall_thickness);\n        translate([length-wall_thickness, 45-wall_thickness, -1])\n            cylinder(h=wall_thickness+2, r=wall_thickness);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    translate([wall_thickness, wall_thickness, -25])\n        cylinder(h=25, r=wall_thickness);\n    translate([80-wall_thickness, wall_thickness, -25])\n        cylinder(h=25, r=wall_thickness);\n    \n    // Rear legs\n    translate([wall_thickness, 45-wall_thickness, -25])\n        cylinder(h=25, r=wall_thickness);\n    translate([80-wall_thickness, 45-wall_thickness, -25])\n        cylinder(h=25, r=wall_thickness);\n    \n    // Lower support frame\n    translate([40, 22.5, -25])\n        cube([76, 41, wall_thickness]);\n}\n\nmodule drawer() {\n    // Drawer box\n    translate([5, 5, 10]) {\n        difference() {\n            cube([20, 35, 15]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([20-2*wall_thickness, 35-2*wall_thickness, 13]);\n        }\n        \n        // Drawer handle\n        translate([10, 17.5, 16])\n            cylinder(h=wall_thickness, r=5);\n    }\n}\n\nmodule extension_slide() {\n    // Telescoping rails\n    for (y = [10, 35]) {\n        translate([80, y-2.5, 14])\n            cube([40, 5, wall_thickness]);\n        translate([80, y-2.5, 8])\n            cube([40, 5, wall_thickness]);\n    }\n}\n\nmodule extension_top() {\n    // Extension leaf\n    translate([80, 0, 30])\n        table_top(40);\n}\n\n// Main assembly\nunion() {\n    // Fixed tabletop\n    table_top(80);\n    \n    // Support structure\n    legs();\n    \n    // Drawer\n    drawer();\n    \n    // Extension mechanism\n    extension_slide();\n    \n    // Extension leaf\n    extension_top();\n}",
    "renders": true
  },
  {
    "furniture": "expandable",
    "openscad_code": "// Expandable coffee table with nested extension leaves\n// Overall collapsed: 100x60x45 mm, extended: 160x60x45 mm\n\nmodule table_top() {\n    // Main tabletop 2mm thick\n    translate([0,0,43]) cube([96,56,2], center=true);\n    \n    // Extension rails (hidden under top)\n    for(side=[-1,1]) {\n        translate([side*40,0,42]) cube([15,50,1], center=true);\n    }\n}\n\nmodule extension_leaf() {\n    // Two nested extension leaves\n    for(offset=[0,1]) {\n        translate([0,0,offset*2]) {\n            // Leaf top surface\n            translate([0,0,43]) cube([29,54,2], center=true);\n            // Leaf support rim\n            translate([0,0,42]) difference() {\n                cube([31,56,1], center=true);\n                cube([27,52,2], center=true);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Four legs with stretchers\n    for(x=[-1,1]) for(y=[-1,1]) {\n        // Leg post\n        translate([x*44,y*26,21.5]) \n            cube([6,6,43], center=true);\n        \n        // Lower stretcher between legs\n        if(y==1) {\n            translate([x*44,0,4]) \n                cube([6,52,6], center=true);\n        }\n        if(x==1) {\n            translate([0,y*26,4]) \n                cube([88,6,6], center=true);\n        }\n    }\n}\n\nmodule drawer_box() {\n    // Side drawer for storage\n    translate([0,27,30]) difference() {\n        // Drawer body\n        cube([50,20,24], center=true);\n        // Handle cutout\n        translate([0,11,0]) cube([30,2,6], center=true);\n    }\n    \n    // Drawer handle\n    translate([0,38,30]) \n        cube([30,4,6], center=true);\n}\n\nmodule table_assembly(extended=false) {\n    union() {\n        legs();\n        table_top();\n        \n        if(extended) {\n            // Extended position\n            translate([50,0,0]) extension_leaf();\n            translate([-50,0,0]) extension_leaf();\n        } else {\n            // Stored position\n            translate([33,0,0]) extension_leaf();\n            translate([-33,0,0]) extension_leaf();\n        }\n        \n        drawer_box();\n    }\n}\n\n// Render the table collapsed\ntable_assembly(extended=false);\n\n// Uncomment to see extended version\n// table_assembly(extended=true);",
    "renders": true
  },
  {
    "furniture": "pedestal",
    "openscad_code": "// Realistic Pedestal Furniture\n// Medium complexity OpenSCAD model for 3D printing\n\n// Overall dimensions\npedestal_width = 80;\npedestal_depth = 80;\npedestal_height = 120;\nwall_thickness = 2;\n\n// Base module with decorative molding\nmodule base() {\n    // Main base block\n    difference() {\n        cube([pedestal_width, pedestal_depth, 20], center=true);\n        translate([0, 0, 10])\n            cube([pedestal_width-4, pedestal_depth-4, 20], center=true);\n    }\n    \n    // Decorative lower molding\n    for(i=[-1, 1]) {\n        translate([i*(pedestal_width/2 - 2), 0, 10])\n            rotate([0, 90, 0])\n            cylinder(h=pedestal_depth-4, r1=3, r2=2, center=true);\n    }\n    for(i=[-1, 1]) {\n        translate([0, i*(pedestal_depth/2 - 2), 10])\n            rotate([90, 0, 0])\n            cylinder(h=pedestal_width-4, r1=3, r2=2, center=true);\n    }\n}\n\n// Main body with panel details\nmodule body() {\n    // Hollow main body\n    difference() {\n        cube([pedestal_width-8, pedestal_depth-8, pedestal_height-40], center=true);\n        translate([0, 0, -wall_thickness])\n            cube([pedestal_width-12, pedestal_depth-12, pedestal_height-35], center=true);\n    }\n    \n    // Decorative panels on sides\n    for(side=[0, 90]) {\n        rotate([0, 0, side])\n        translate([0, (pedestal_depth-8)/2 - 1, 0])\n        difference() {\n            cube([pedestal_width-20, wall_thickness, pedestal_height-50], center=true);\n            translate([0, 0, 10])\n                cube([pedestal_width-30, wall_thickness+1, pedestal_height-70], center=true);\n        }\n    }\n}\n\n// Top surface with rounded edges\nmodule top_surface() {\n    // Main top\n    difference() {\n        translate([0, 0, pedestal_height/2 - 10])\n            cube([pedestal_width, pedestal_depth, 20], center=true);\n        translate([0, 0, pedestal_height/2])\n            cube([pedestal_width-4, pedestal_depth-4, 20], center=true);\n    }\n    \n    // Rounded edge detail\n    translate([0, 0, pedestal_height/2])\n        minkowski() {\n            cube([pedestal_width-4, pedestal_depth-4, 0.1], center=true);\n            cylinder(h=0.1, r=2, center=true);\n        }\n}\n\n// Internal shelf support\nmodule shelf_support() {\n    translate([0, 0, -pedestal_height/4])\n    difference() {\n        cube([pedestal_width-12, pedestal_depth-12, 4], center=true);\n        translate([0, 0, -1])\n            cube([pedestal_width-16, pedestal_depth-16, 6], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, 15])\n        body();\n    shelf_support();\n    top_surface();\n}\n\n// Small decorative feet\nfor(x=[-1, 1])\nfor(y=[-1, 1])\ntranslate([x*(pedestal_width/2 - 10), y*(pedestal_depth/2 - 10), -10])\n    cylinder(h=5, r=3, center=true);",
    "renders": true
  },
  {
    "furniture": "sawhorse",
    "openscad_code": "// Realistic 3D-Printable Sawhorse – medium complexity\n// Overall footprint ~90 mm × 45 mm × 80 mm\n\n// ---------- PARAMETERS ----------\n// All dimensions in mm\nhorseW = 90;           // total width along top beam\nhorseD = 45;           // depth of top beam\nlegSpread = 70;        // distance between outer edges of legs at floor\ntopThick = 6;          // thickness of top beam\nlegThick = 4;          // leg thickness\nwall = 2;              // minimum printable wall thickness\ntopBeamH = 12;         // height of top beam\ngap = 0.2;             // clearance for removable cross-brace\n\n// ---------- MODULES ----------\n\n// Top beam with rounded edges and shallow groove\nmodule topBeam() {\n    difference() {\n        // Main beam body\n        minkowski() {\n            cube([horseW, horseD, topBeamH], center = true);\n            sphere(r = wall);\n        }\n        // Central groove for looks and printability\n        translate([0, 0, topBeamH/2])\n            cube([horseW*0.8, horseD*0.3, 3], center = true);\n    }\n}\n\n// Single leg – angled outward\nmodule leg(angle = 15) {\n    // Angled part\n    rotate([0, angle, 0])\n        cube([legThick, legThick, 75], center = true);\n    \n    // Foot pad to give flat contact surface\n    translate([0, 0, -75/2 - 2])\n        cube([legThick + 2, legThick + 2, 4], center = true);\n}\n\n// Side stretcher / brace (removable design)\nmodule sideStretcher() {\n    difference() {\n        cube([legSpread*0.75, wall, legThick], center = true);\n        // Lightening holes\n        for (x = [-legSpread*0.25, 0, legSpread*0.25])\n            translate([x, 0, 0])\n                cylinder(h = wall + 0.1, r = 2, center = true, $fn = 16);\n    }\n}\n\n// End-grain cap detail (printed separately and glued)\nmodule cap() {\n    difference() {\n        cube([legThick + 1, legThick + 1, legThick + 1], center = true);\n        cube([legThick - wall, legThick - wall, legThick - wall], center = true);\n    }\n}\n\n// ---------- MAIN ASSEMBLY ----------\nunion() {\n    // Top beam\n    topBeam();\n\n    // Left pair of legs\n    translate([-horseW/2 + legThick/2, 0, -topBeamH/2 - 75/2 + 2])\n        leg(angle = 12);\n    translate([-horseW/2 + legThick/2, 0, -topBeamH/2 - 75/2 + 2])\n        mirror([0, 1, 0]) leg(angle = 12);\n\n    // Right pair of legs\n    translate([horseW/2 - legThick/2, 0, -topBeamH/2 - 75/2 + 2])\n        leg(angle = -12);\n    translate([horseW/2 - legThick/2, 0, -topBeamH/2 - 75/2 + 2])\n        mirror([0, 1, 0]) leg(angle = -12);\n\n    // Lower side stretchers (front and back)\n    translate([0, horseD/2 - wall/2, -topBeamH/2 - 30])\n        sideStretcher();\n    translate([0, -horseD/2 + wall/2, -topBeamH/2 - 30])\n        sideStretcher();\n}\n\n// Optional decorative caps on leg ends (comment out for single print)\n/*\nfor (x = [-horseW/2 + legThick/2, horseW/2 - legThick/2])\n    for (y = [horseD/2 - legThick/2, -horseD/2 + legThick/2])\n        translate([x, y, -topBeamH/2 - 75 + 2])\n            cap();\n*/",
    "renders": true
  },
  {
    "furniture": "work",
    "openscad_code": "// Office Swivel Chair - Medium Complexity Realistic Style\n// Dimensions: ~120mm height, suitable for 3D printing\n\n// Chair parameters\nseat_width = 60;\nseat_depth = 55;\nseat_thickness = 4;\nbackrest_height = 65;\nbackrest_width = 58;\narmrest_height = 20;\ngas_spring_diameter = 12;\nbase_leg_length = 45;\nwheel_diameter = 12;\ncylinder_height = 35;\n\n// Main assembly\nmodule office_chair() {\n    // Seat cushion\n    translate([0, 0, cylinder_height + gas_spring_diameter/2 + seat_thickness/2])\n    rounded_cube([seat_width, seat_depth, seat_thickness], 3);\n    \n    // Backrest\n    translate([0, -seat_depth/2 + 5, cylinder_height + gas_spring_diameter/2 + seat_thickness + backrest_height/2 - 15])\n    rotate([10, 0, 0])\n    rounded_cube([backrest_width, 8, backrest_height], 2);\n    \n    // Armrests\n    translate([seat_width/2 - 5, 0, cylinder_height + gas_spring_diameter/2 + seat_thickness + armrest_height/2])\n    armrest();\n    translate([-seat_width/2 + 5, 0, cylinder_height + gas_spring_diameter/2 + seat_thickness + armrest_height/2])\n    armrest();\n    \n    // Gas spring cylinder\n    translate([0, 0, cylinder_height/2 + gas_spring_diameter/2])\n    cylinder(h=cylinder_height, d=gas_spring_diameter);\n    \n    // Base with 5 legs\n    base_assembly();\n}\n\n// Rounded cube for cushions\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size.x - radius*2])\n            for(dy = [0, size.y - radius*2])\n                for(dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                    sphere(r=radius);\n    }\n}\n\n// Armrest structure\nmodule armrest() {\n    difference() {\n        union() {\n            // Armrest pad\n            translate([0, 0, armrest_height/2])\n            rounded_cube([10, 25, 4], 2);\n            \n            // Support post\n            translate([0, 10, armrest_height/4])\n            cylinder(h=armrest_height/2, d=6);\n        }\n    }\n}\n\n// Star base with wheels\nmodule base_assembly() {\n    // Central hub\n    cylinder(h=gas_spring_diameter/2, d=gas_spring_diameter + 8);\n    \n    // 5 legs with wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, base_leg_length/2, -base_leg_length/4])\n        union() {\n            // Leg\n            rotate([90, 0, 0])\n            cylinder(h=base_leg_length, d=8);\n            \n            // Wheel\n            translate([0, base_leg_length, -base_leg_length/2 - wheel_diameter/2])\n            rotate([90, 0, 0])\n            cylinder(h=wheel_diameter, d=wheel_diameter);\n        }\n    }\n}\n\n// Render the chair\noffice_chair();",
    "renders": true
  },
  {
    "furniture": "potting",
    "openscad_code": "// Potting Bench – realistic style, medium complexity\n// Overall footprint: 130 mm (W) × 60 mm (D) × 95 mm (H)\n\n$fs = 0.5; $fa = 2;\n\nwall = 2;    // 3-D printable wall thickness\ntop_h  = 12; // upper table height\nleg_h  = 83; // leg height (table top sits on it)\nbench_d= 60; // total depth\nbench_w=130; // total width\n\n/* ---------- main assembly ---------- */\nmodule bench_assembly() {\n    union() {\n        table_top();\n        back_splash();\n        lower_shelf();\n        legs_frame();\n        pot_hooks();\n    }\n}\n\n/* ---------- table top ---------- */\nmodule table_top() {\n    translate([0, 0, leg_h])\n    difference() {\n        // main slab\n        cube([bench_w, bench_d, top_h], center=true);\n        \n        // front trough / potting recess\n        translate([0, 20, top_h/2 - wall])\n            cube([bench_w*0.6, 30, top_h - wall], center=true);\n        \n        // drainage holes (4×3 grid)\n        for(x=[-45,-15,15,45])\n            for(y=[-15,0,15])\n                translate([x, y, top_h/2])\n                    cylinder(h=top_h+1, d=3, center=true, $fn=12);\n    }\n}\n\n/* ---------- back splash ---------- */\nmodule back_splash() {\n    h = 35;\n    translate([0, bench_d/2 - wall/2, leg_h + top_h + h/2])\n        cube([bench_w, wall, h], center=true);\n}\n\n/* ---------- lower shelf ---------- */\nmodule lower_shelf() {\n    shelf_z = leg_h/2 + 5;\n    translate([0, 0, shelf_z])\n        cube([bench_w - 10, bench_d - 10, wall], center=true);\n}\n\n/* ---------- legs & rails ---------- */\nmodule legs_frame() {\n    // positions of four legs\n    x_pos = [-bench_w/2 + wall,  bench_w/2 - wall];\n    y_pos = [-bench_d/2 + wall,  bench_d/2 - wall];\n    \n    for(x=x_pos)\n        for(y=y_pos)\n            translate([x, y, leg_h/2])\n                cylinder(h=leg_h, d=8, center=true, $fn=12);\n    \n    // front/back rails\n    for(y=y_pos)\n        translate([0, y, leg_h/2])\n            cube([bench_w - 8, wall, leg_h], center=true);\n    \n    // left/right rails\n    for(x=x_pos)\n        translate([x, 0, leg_h/2])\n            cube([wall, bench_d - 8, leg_h], center=true);\n}\n\n/* ---------- small tool hooks ---------- */\nmodule pot_hooks() {\n    hook_l = 8;\n    hook_r = 2;\n    for(i=[-3:3]) {\n        translate([i*15, bench_d/2 - wall - hook_l/2, leg_h + top_h + 2])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=hook_l, d=4, center=false, $fn=12);\n                    translate([0,0,-1])\n                        cylinder(h=hook_l+2, d=2.2, center=false, $fn=12);\n                }\n    }\n}\n\n/* ---------- render ---------- */\nbench_assembly();",
    "renders": true
  },
  {
    "furniture": "sewing",
    "openscad_code": "// Sewing Chair - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 80mm x 100mm (suitable for 3D printing)\n\n$fn = 32;\n\n// Main chair structure\nmodule chair_frame() {\n    // Seat base frame\n    difference() {\n        cube([80, 80, 4], center=true);\n        \n        // Hollow center\n        translate([0, 0, -0.5])\n            cube([76, 76, 5], center=true);\n    }\n    \n    // Back legs\n    translate([-35, -35, -50])\n        cylinder(h=50, r=3);\n    translate([35, -35, -50])\n        cylinder(h=50, r=3);\n    \n    // Front legs\n    translate([-35, 35, -50])\n        cylinder(h=50, r=3);\n    translate([35, 35, -50])\n        cylinder(h=50, r=3);\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    translate([0, 0, 4])\n        difference() {\n            cube([78, 78, 12], center=true);\n            \n            // Rounded top edges\n            translate([0, 0, 6])\n                cube([78, 78, 10], center=true);\n            \n            // Hollow center\n            translate([0, 0, -0.5])\n                cube([74, 74, 14], center=true);\n        }\n}\n\n// Backrest\nmodule backrest() {\n    translate([0, -35, 16])\n        difference() {\n            cube([76, 4, 50], center=true);\n            \n            // Hollow center\n            translate([0, 0, -0.5])\n                cube([72, 5, 50], center=true);\n        }\n}\n\n// Backrest cushion\nmodule backrest_cushion() {\n    translate([0, -33, 40])\n        difference() {\n            cube([74, 8, 40], center=true);\n            \n            // Rounded front\n            translate([0, 0, -20])\n                cube([74, 8, 40], center=true);\n            \n            // Hollow center\n            translate([0, 0, -0.5])\n                cube([70, 9, 40], center=true);\n        }\n}\n\n// Cross supports\nmodule cross_supports() {\n    // Front-back support\n    translate([0, 0, -25])\n        difference() {\n            cube([76, 2, 2], center=true);\n            translate([0, 0, -0.5])\n                cube([72, 3, 3], center=true);\n        }\n    \n    // Left-right support\n    translate([0, 0, -25])\n        rotate([90, 0, 0])\n        difference() {\n            cube([76, 2, 2], center=true);\n            translate([0, 0, -0.5])\n                cube([72, 3, 3], center=true);\n        }\n}\n\n// Sewing box under seat\nmodule sewing_box() {\n    translate([0, 0, -20])\n        difference() {\n            cube([60, 60, 30], center=true);\n            \n            // Interior space\n            translate([0, 0, 2])\n                cube([56, 56, 30], center=true);\n            \n            // Top opening\n            translate([0, 0, 15])\n                cube([56, 56, 20], center=true);\n        }\n    \n    // Box lid\n    translate([0, 30, 10])\n        rotate([90, 0, 0])\n        difference() {\n            cube([56, 2, 56], center=true);\n            translate([0, -0.5, 0])\n                cube([52, 3, 52], center=true);\n        }\n}\n\n// Thread spool holder on back\nmodule thread_holder() {\n    translate([0, -36, 60])\n        difference() {\n            cube([50, 2, 2], center=true);\n            translate([0, 0, -0.5])\n                cube([46, 3, 3], center=true);\n        }\n    \n    // Spool pegs\n    for(i = [-20:10:20]) {\n        translate([i, -38, 60])\n            rotate([90, 0, 0])\n            cylinder(h=10, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_cushion();\n    backrest();\n    backrest_cushion();\n    cross_supports();\n    sewing_box();\n    thread_holder();\n}",
    "renders": true
  },
  {
    "furniture": "cutting",
    "openscad_code": "// Realistic style cutting board with stand - medium complexity\n// Overall dimensions: 80mm wide x 110mm tall x 40mm deep\n\n// Wall thickness constant\nwall = 2;\n\n// Cutting board module\nmodule cutting_board() {\n    // Board body - 80x50x10mm\n    difference() {\n        cube([80, 50, 10], center=true);\n        // Juice groove - 2mm deep, 5mm from edge\n        translate([0, 0, 4.5])\n            cube([70, 40, 2], center=true);\n    }\n    \n    // Handle hole - 25mm diameter\n    translate([0, -25, 0])\n        cylinder(h=11, d=25, center=true);\n    \n    // Rounded top edges\n    translate([0, 0, 5.1])\n        cube([80.2, 50.2, 0.2], center=true);\n}\n\n// Stand base module\nmodule stand_base() {\n    // Base platform\n    cube([85, 15, 5], center=true);\n    \n    // Support blocks for board\n    for(x = [-30, 30]) {\n        translate([x, 0, 2.5])\n            cube([15, 15, 10], center=true);\n        \n        // Notch for board insertion\n        translate([x, 0, 7.5])\n            cube([12.2, 15.2, 2.2], center=true);\n    }\n    \n    // Front lip to prevent sliding\n    translate([0, 7.5, 2.5])\n        cube([85, 2, 10], center=true);\n}\n\n// Back support module\nmodule back_support() {\n    // Main vertical support\n    translate([0, -25, 32.5])\n        cube([85, 5, 60], center=true);\n    \n    // Triangular braces\n    for(x = [-30, 30]) {\n        // Left brace\n        translate([x, -20, 15])\n            rotate([0, 90, 0])\n                linear_extrude(height=5)\n                    polygon(points=[[0,0],[20,0],[0,15]]);\n        \n        // Right brace (mirrored)\n        translate([x, -20, 15])\n            rotate([0, 90, 0])\n                scale([-1,1,1])\n                    linear_extrude(height=5)\n                        polygon(points=[[0,0],[20,0],[0,15]]);\n    }\n}\n\n// Feet module\nmodule feet() {\n    for(x = [-35, 35])\n    for(y = [-5, 5]) {\n        translate([x, y, -2.5])\n            cylinder(h=5, d=8, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Cutting board in stand\n    translate([0, 0, 15])\n        cutting_board();\n    \n    // Stand components\n    stand_base();\n    back_support();\n    feet();\n}\n\n// Optional: Display both board and stand separately\n// %translate([100, 0, 0]) cutting_board();",
    "renders": true
  },
  {
    "furniture": "ironing",
    "openscad_code": "// Ironing board with folding legs, 1:20 scale, printable\n// Overall length ~120 mm, width ~35 mm, height ~35 mm\n\n$fa = 2;\n$fs = 0.5;\n\nmodule ironing_board() {\n    // Board surface\n    difference() {\n        union() {\n            // Top ironing surface\n            translate([0, 0, 2])\n                cube([120, 35, 2], center = true);\n\n            // Tapered nose\n            translate([55, 0, 2])\n                rotate([0, 90, 0])\n                    cylinder(h = 17.5, r1 = 17.5, r2 = 0);\n        }\n\n        // Steam holes pattern\n        for (x = [-40:10:40])\n            for (y = [-12:6:12])\n                translate([x, y, 3.1])\n                    cylinder(h = 3, r = 1, $fn = 8);\n    }\n\n    // Under-frame rails\n    translate([0, 0, 0.5])\n        cube([116, 31, 1], center = true);\n}\n\nmodule leg_pair(offset_x = -45) {\n    // Left and right legs joined by stretcher\n    translate([offset_x, 0, -15]) {\n        // Left leg\n        translate([-14, 0, 0])\n            rotate([10, 0, 0])\n                cube([3, 3, 30], center = true);\n\n        // Right leg\n        translate([14, 0, 0])\n            rotate([10, 0, 0])\n                cube([3, 3, 30], center = true);\n\n        // Lower stretcher\n        translate([0, 0, -13])\n            cube([34, 3, 3], center = true);\n    }\n}\n\nmodule support_bracket() {\n    // Hinge bracket under board\n    difference() {\n        cube([8, 5, 4], center = true);\n        translate([0, 0, 2])\n            cylinder(h = 5, r = 1.5, $fn = 8);\n    }\n}\n\n// Assembly\nunion() {\n    ironing_board();\n\n    // Front leg assembly\n    translate([0, 0, 2])\n        leg_pair(-30);\n\n    // Rear leg assembly\n    translate([0, 0, 2])\n        leg_pair(30);\n\n    // Small support brackets\n    translate([-30, 0, 2])\n        support_bracket();\n    translate([30, 0, 2])\n        support_bracket();\n}",
    "renders": true
  },
  {
    "furniture": "changing",
    "openscad_code": "// Changing Table / Dressing Table\n// Realistic style, medium complexity\n// Approx. 120mm wide x 60mm deep x 100mm high\n\n$fn = 50;\nwall_thickness = 2;\nscale_factor = 1;\n\n// Main dimensions\ntable_width = 120;\ntable_depth = 60;\ntable_height = 100;\nleg_height = 85;\ntop_thickness = 4;\n\n// Changing pad dimensions\npad_width = 70;\npad_depth = 50;\npad_height = 8;\npad_rim_height = 15;\n\n// Shelf dimensions\nshelf_width = 110;\nshelf_depth = 50;\nshelf_thickness = 3;\n\n// Drawer dimensions\ndrawer_width = 50;\ndrawer_depth = 45;\ndrawer_height = 15;\ndrawer_gap = 2;\n\nmodule changing_pad() {\n    // Main pad cushion\n    translate([0, 0, table_height + top_thickness + pad_height/2])\n        scale([pad_width/100, pad_depth/100, pad_height/100])\n            sphere(r=50);\n    \n    // Raised rim around pad\n    difference() {\n        // Outer rim\n        translate([0, 0, table_height + top_thickness + pad_rim_height/2])\n            cube([pad_width + 6, pad_depth + 6, pad_rim_height], center=true);\n        \n        // Inner cutout\n        translate([0, 0, table_height + top_thickness - 1])\n            cube([pad_width + 2, pad_depth + 2, pad_rim_height + 2], center=true);\n    }\n}\n\nmodule table_top() {\n    // Main top surface\n    translate([0, 0, table_height + top_thickness/2])\n        cube([table_width, table_depth, top_thickness], center=true);\n    \n    // Rounded edges\n    for(x = [-table_width/2 + 2, table_width/2 - 2]) {\n        for(y = [-table_depth/2 + 2, table_depth/2 - 2]) {\n            translate([x, y, table_height + top_thickness - 2])\n                cylinder(h=4, r=2, center=true);\n        }\n    }\n}\n\nmodule leg(x_pos, y_pos) {\n    // Main leg\n    translate([x_pos, y_pos, leg_height/2])\n        cube([4, 4, leg_height], center=true);\n    \n    // Leg base\n    translate([x_pos, y_pos, 1])\n        cube([6, 6, 2], center=true);\n}\n\nmodule shelf() {\n    translate([0, 0, table_height/2])\n        cube([shelf_width, shelf_depth, shelf_thickness], center=true);\n}\n\nmodule drawer_handle() {\n    translate([0, drawer_depth/2 + 2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=2);\n}\n\nmodule drawer(x_pos, z_pos) {\n    // Drawer box\n    translate([x_pos, 0, z_pos])\n        cube([drawer_width - drawer_gap, drawer_depth - drawer_gap, drawer_height - drawer_gap], center=true);\n    \n    // Drawer front\n    translate([x_pos, drawer_depth/2 + 1, z_pos])\n        cube([drawer_width, 2, drawer_height], center=true);\n    \n    // Handle\n    translate([x_pos, drawer_depth/2 + 2, z_pos])\n        drawer_handle();\n}\n\nmodule back_panel() {\n    // Safety back panel\n    translate([0, -table_depth/2 + 1, table_height - 10 + top_thickness/2])\n        cube([table_width - 10, 2, 20], center=true);\n}\n\n// Main assembly\nunion() {\n    // Table top\n    table_top();\n    \n    // Changing pad\n    changing_pad();\n    \n    // Legs\n    for(x = [-table_width/2 + 2, table_width/2 - 2]) {\n        for(y = [-table_depth/2 + 2, table_depth/2 - 2]) {\n            leg(x, y);\n        }\n    }\n    \n    // Shelf\n    shelf();\n    \n    // Drawers (2)\n    drawer(-table_width/4, table_height/2 + shelf_thickness + 10);\n    drawer(table_width/4, table_height/2 + shelf_thickness + 10);\n    \n    // Back safety panel\n    back_panel();\n    \n    // Side supports\n    translate([table_width/2 - 3, 0, leg_height/2])\n        cube([2, table_depth - 4, leg_height], center=true);\n    translate([-table_width/2 + 3, 0, leg_height/2])\n        cube([2, table_depth - 4, leg_height], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "dressing",
    "openscad_code": "// Dressing table with mirror, drawers and stool\n// Target print size ~100 mm wide\n\n$fa = 2; $fs = 0.5;\n\n// Overall scale factor to keep within 3D-printing range\nscale_factor = 0.5;\n\nmodule dressing_assembly() {\n    // Table carcass\n    difference() {\n        // Main body\n        cube([100*scale_factor, 50*scale_factor, 75*scale_factor], center=true);\n        // Hollow inside\n        translate([0, 0, 2*scale_factor])\n            cube([96*scale_factor, 46*scale_factor, 71*scale_factor], center=true);\n    }\n\n    // Top surface\n    translate([0, 0, 37.5*scale_factor])\n        cube([104*scale_factor, 54*scale_factor, 3*scale_factor], center=true);\n\n    // Back panel\n    translate([0, 26*scale_factor, 18.5*scale_factor])\n        cube([100*scale_factor, 2*scale_factor, 75*scale_factor], center=true);\n\n    // Four legs\n    for (x = [-40, 40], y = [-20, 20])\n        translate([x*scale_factor, y*scale_factor, -12*scale_factor])\n            cylinder(h=50*scale_factor, r=3*scale_factor, center=false);\n\n    // Three drawers\n    for (i = [0:2]) {\n        translate([0, 0, (i*20-20)*scale_factor])\n            drawer();\n    }\n\n    // Mirror frame\n    translate([0, 30*scale_factor, 55*scale_factor])\n        mirror_frame();\n\n    // Stool\n    translate([0, -60*scale_factor, 0])\n        stool();\n}\n\nmodule drawer() {\n    // Drawer front\n    translate([0, 26*scale_factor, 0])\n        difference() {\n            cube([30*scale_factor, 2*scale_factor, 15*scale_factor], center=true);\n            translate([0, 1.5*scale_factor, 0])\n                cylinder(h=4*scale_factor, r=2*scale_factor, center=true);\n        }\n    // Drawer box\n    translate([0, 15*scale_factor, 0])\n        difference() {\n            cube([28*scale_factor, 20*scale_factor, 14*scale_factor], center=true);\n            translate([0, 0, 1*scale_factor])\n                cube([26*scale_factor, 18*scale_factor, 12*scale_factor], center=true);\n        }\n}\n\nmodule mirror_frame() {\n    // Frame outer\n    difference() {\n        cube([60*scale_factor, 2*scale_factor, 40*scale_factor], center=true);\n        translate([0, 1.1*scale_factor, 0])\n            cube([56*scale_factor, 1*scale_factor, 36*scale_factor], center=true);\n    }\n    // Support posts left & right\n    for (dx = [-28, 28]) {\n        translate([dx*scale_factor, -15*scale_factor, 0])\n            cylinder(h=30*scale_factor, r=2*scale_factor, center=false);\n    }\n    // Center mirror (thin slab)\n    translate([0, 1.1*scale_factor, 0])\n        cube([54*scale_factor, 0.5*scale_factor, 34*scale_factor], center=true);\n}\n\nmodule stool() {\n    // Seat\n    translate([0, 0, 20*scale_factor])\n        cube([30*scale_factor, 30*scale_factor, 3*scale_factor], center=true);\n\n    // Four legs\n    for (x = [-12, 12], y = [-12, 12])\n        translate([x*scale_factor, y*scale_factor, 8*scale_factor])\n            cylinder(h=24*scale_factor, r=2*scale_factor, center=false);\n\n    // Stretchers between legs\n    for (x = [-12, 12], y = [-12, 12]) {\n        translate([x*scale_factor, y*scale_factor, 14*scale_factor])\n            cube([24*scale_factor, 2*scale_factor, 2*scale_factor], center=true);\n    }\n    rotate([0,0,90])\n        for (x = [-12, 12], y = [-12, 12]) {\n            translate([x*scale_factor, y*scale_factor, 14*scale_factor])\n                cube([24*scale_factor, 2*scale_factor, 2*scale_factor], center=true);\n        }\n}\n\ndressing_assembly();",
    "renders": true
  },
  {
    "furniture": "makeup",
    "openscad_code": "// Makeup Vanity Table\n// Dimensions: 120mm (W) × 60mm (D) × 80mm (H)\n\n$fn = 32;\n\nmodule vanity_table() {\n    // Main tabletop - 2mm thick walls\n    difference() {\n        cube([120, 60, 3]);\n        translate([2, 2, 0])\n            cube([116, 56, 3]);\n    }\n    \n    // Back panel with mirror frame\n    translate([0, 55, 0])\n    union() {\n        // Back panel\n        difference() {\n            cube([120, 5, 80]);\n            translate([2, 2, 2])\n                cube([116, 1, 76]);\n        }\n        \n        // Mirror frame\n        translate([60, 5, 65])\n        difference() {\n            cube([50, 2, 25]);\n            translate([2, 0, 2])\n                cube([46, 2, 21]);\n        }\n        \n        // Mirror glass\n        translate([60, 5.5, 67])\n            cube([46, 0.5, 19]);\n    }\n    \n    // Front drawer\n    translate([35, 2, -15])\n    union() {\n        // Drawer body\n        difference() {\n            cube([50, 56, 15]);\n            translate([2, 2, 2])\n                cube([46, 52, 13]);\n        }\n        \n        // Drawer front panel\n        translate([0, 0, 15])\n        difference() {\n            cube([50, 56, 2]);\n            translate([2, 2, 0])\n                cube([46, 52, 2]);\n        }\n        \n        // Drawer handle\n        translate([25, 28, 17])\n            cylinder(h=2, r=3);\n    }\n    \n    // Left leg\n    translate([5, 5, -40])\n    difference() {\n        cube([10, 50, 40]);\n        translate([2, 2, 2])\n            cube([6, 46, 36]);\n    }\n    \n    // Right leg\n    translate([105, 5, -40])\n    difference() {\n        cube([10, 50, 40]);\n        translate([2, 2, 2])\n            cube([6, 46, 36]);\n    }\n    \n    // Center support beam\n    translate([15, 30, -20])\n    difference() {\n        cube([90, 5, 20]);\n        translate([2, 2, 2])\n            cube([86, 1, 16]);\n    }\n    \n    // Decorative side panels\n    for (x = [5, 105]) {\n        translate([x, 0, -35])\n        difference() {\n            cube([10, 5, 35]);\n            translate([2, 2, 2])\n                cube([6, 1, 31]);\n        }\n    }\n    \n    // Small makeup organizer on top\n    translate([10, 10, 3])\n    union() {\n        // Base\n        difference() {\n            cube([30, 40, 5]);\n            translate([2, 2, 0])\n                cube([26, 36, 5]);\n        }\n        \n        // Dividers\n        for (i = [0:1]) {\n            translate([15 + i*10, 10, 5])\n                cube([1, 20, 10]);\n        }\n        \n        // Back divider\n        translate([10, 35, 5])\n            cube([20, 1, 10]);\n    }\n}\n\nvanity_table();",
    "renders": true
  },
  {
    "furniture": "bedside",
    "openscad_code": "// Bedside Table - Realistic Style, Medium Complexity\n// Dimensions: 60mm wide x 40mm deep x 70mm tall\n\n// Overall table module\nmodule bedside_table() {\n    // Main body\n    union() {\n        // Table top\n        translate([0, 0, 68]) {\n            cube([60, 40, 4], center=true);\n        }\n        \n        // Frame structure\n        frame();\n        \n        // Drawer\n        drawer();\n        \n        // Shelf\n        shelf();\n        \n        // Back panel\n        back_panel();\n    }\n}\n\n// Frame structure with legs and rails\nmodule frame() {\n    // Left side\n    translate([-28, -18, 35]) {\n        cube([4, 4, 70]);\n    }\n    \n    // Right side\n    translate([28, -18, 35]) {\n        cube([4, 4, 70]);\n    }\n    \n    // Back left leg\n    translate([-28, 18, 35]) {\n        cube([4, 4, 70]);\n    }\n    \n    // Back right leg\n    translate([28, 18, 35]) {\n        cube([4, 4, 70]);\n    }\n    \n    // Front rail\n    translate([0, -18, 35]) {\n        cube([60, 4, 4]);\n    }\n    \n    // Back rail\n    translate([0, 18, 35]) {\n        cube([60, 4, 4]);\n    }\n    \n    // Left rail\n    translate([-28, 0, 35]) {\n        cube([4, 36, 4]);\n    }\n    \n    // Right rail\n    translate([28, 0, 35]) {\n        cube([4, 36, 4]);\n    }\n}\n\n// Drawer with handle\nmodule drawer() {\n    // Drawer box\n    translate([0, 0, 50]) {\n        difference() {\n            cube([50, 34, 16], center=true);\n            // Hollow inside\n            translate([0, 0, -2]) {\n                cube([46, 30, 12], center=true);\n            }\n        }\n    }\n    \n    // Drawer front panel\n    translate([0, -20, 50]) {\n        difference() {\n            cube([54, 2, 20], center=true);\n            // Handle recess\n            translate([0, 0, -5]) {\n                cube([20, 2, 6]);\n            }\n        }\n    }\n    \n    // Handle\n    translate([0, -21, 50]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=10, d=4, center=true);\n        }\n    }\n}\n\n// Lower shelf\nmodule shelf() {\n    translate([0, 0, 18]) {\n        cube([52, 32, 2], center=true);\n    }\n}\n\n// Back panel for stability\nmodule back_panel() {\n    translate([0, 19, 44]) {\n        cube([52, 2, 48], center=true);\n    }\n}\n\n// Render the bedside table\nbedside_table();",
    "renders": true
  },
  {
    "furniture": "accent",
    "openscad_code": "// Accent Side Table with Magazine Rack\n// Realistic style, medium complexity\n// Dimensions: 100mm(W) x 60mm(D) x 120mm(H)\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main table top\nmodule table_top() {\n    difference() {\n        // Main top surface\n        translate([0, 0, 110])\n            cube([100, 60, 8], center=true);\n        \n        // Chamfered edges\n        translate([0, 0, 114])\n            cube([96, 56, 8], center=true);\n    }\n}\n\n// Table legs with stretchers\nmodule legs() {\n    // Four legs\n    for(x = [-45, 45])\n    for(y = [-25, 25]) {\n        // Leg post\n        translate([x, y, 55])\n            cylinder(h=110, r=3, $fn=12);\n        \n        // Leg base pad\n        translate([x, y, 0])\n            cylinder(h=2, r=5, $fn=16);\n    }\n    \n    // Lower stretcher front/back\n    for(y = [-25, 25]) {\n        translate([0, y, 20])\n            cube([90, wall_thickness, 4], center=true);\n    }\n    \n    // Lower stretcher left/right\n    for(x = [-45, 45]) {\n        translate([x, 0, 20])\n            cube([wall_thickness, 50, 4], center=true);\n    }\n    \n    // Upper stretcher for stability\n    translate([0, 0, 60])\n        cube([94, 54, wall_thickness], center=true);\n}\n\n// Magazine rack slats\nmodule magazine_rack() {\n    // Back panel\n    translate([0, -28, 65])\n        cube([90, wall_thickness, 90], center=true);\n    \n    // Bottom shelf\n    translate([0, -15, 15])\n        cube([90, 26, wall_thickness], center=true);\n    \n    // Vertical slats\n    for(x = [-35, -17.5, 0, 17.5, 35]) {\n        translate([x, -15, 52.5])\n            cube([wall_thickness, 26, 75], center=true);\n    }\n}\n\n// Decorative edge trim\nmodule edge_trim() {\n    // Front edge\n    translate([0, 30, 114])\n        cube([96, 4, 4], center=true);\n    \n    // Back edge\n    translate([0, -30, 114])\n        cube([96, 4, 4], center=true);\n    \n    // Side edges\n    for(side = [-1, 1]) {\n        translate([50 * side, 0, 114])\n            cube([4, 52, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    table_top();\n    legs();\n    magazine_rack();\n    edge_trim();\n}",
    "renders": true
  },
  {
    "furniture": "corner",
    "openscad_code": "// Corner Shelf Unit - Medium Complexity Realistic Style\n// Overall dimensions: 100x100x120mm (corner unit)\n\n$fn = 32;\n\n// Main parameters\nshelf_thickness = 2;\nleg_size = 4;\nback_panel_thickness = 2;\nshelf_depth = 70;\nunit_height = 120;\n\nmodule leg() {\n    // Create furniture leg with rounded edges\n    difference() {\n        cube([leg_size, leg_size, unit_height], center=true);\n        translate([0, 0, unit_height/2 - 2])\n            cube([leg_size-1, leg_size-1, 4], center=true);\n    }\n}\n\nmodule shelf(width, depth, height_pos) {\n    // Create triangular shelf with rounded front edge\n    linear_extrude(height=shelf_thickness) {\n        polygon(points=[\n            [0, 0],\n            [width, 0],\n            [0, depth]\n        ]);\n    }\n}\n\nmodule back_panel() {\n    // Create corner back panel for structural support\n    translate([0, 0, unit_height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Main back panel\n                cube([unit_height, shelf_depth, back_panel_thickness]);\n                \n                // Cut diagonal to fit corner\n                translate([0, shelf_depth, 0])\n                    rotate([0, 0, -45])\n                        cube([shelf_depth*2, shelf_depth*2, back_panel_thickness*2]);\n            }\n        }\n    }\n}\n\nmodule support_brace() {\n    // Create triangular support brace under each shelf\n    translate([0, 0, 0]) {\n        rotate([0, 90, 0]) {\n            linear_extrude(height=2) {\n                polygon(points=[\n                    [0, 0],\n                    [20, 0],\n                    [0, 20]\n                ]);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Create four legs at corners\n    for(x = [0, shelf_depth]) {\n        for(y = [0, shelf_depth]) {\n            if(x == 0 || y == 0) {  // Only place legs on the edges\n                translate([x, y, unit_height/2]) {\n                    leg();\n                }\n            }\n        }\n    }\n    \n    // Create shelves\n    shelf_heights = [20, 50, 80, 110];\n    for(h = shelf_heights) {\n        translate([0, 0, h]) {\n            shelf(shelf_depth, shelf_depth, h);\n            \n            // Add support braces\n            if(h < max(shelf_heights)) {\n                translate([leg_size/2, leg_size/2, h-shelf_thickness]) {\n                    support_brace();\n                }\n            }\n        }\n    }\n    \n    // Add back panels for structural integrity\n    back_panel();\n    rotate([0, 0, 90])\n        back_panel();\n    \n    // Add small decorative molding on top\n    translate([0, 0, unit_height-2]) {\n        difference() {\n            cube([shelf_depth, shelf_depth, 2]);\n            translate([shelf_depth, 0, 0])\n                rotate([0, 0, -45])\n                    cube([shelf_depth*1.5, shelf_depth*1.5, 4]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "furniture": "couch",
    "openscad_code": "// Realistic medium-complexity 3D-printable couch\n// Overall footprint: 120 mm wide × 50 mm deep × 55 mm tall\n// Wall thickness everywhere >= 2 mm, no steep overhangs for FDM printing\n\n//---------- Global parameters ----------\nseat_w = 100;\nseat_d = 45;\nseat_h = 15;\n\nback_h = 35;\narm_w = 10;\nleg_h = 12;\n\ncushion_h = 6;\ncushion_r = 3;  // rounding radius\n\nwall = 2;       // minimum wall thickness\n\n//---------- Modules ----------\nmodule rounded_cube(s, r) {\n    // Generate a cube with rounded top edges (no overhangs)\n    hull() {\n        for (x = [r, s.x - r], y = [r, s.y - r], z = [0, s.z]) {\n            translate([x, y, z])\n                sphere(r);\n        }\n    }\n}\n\nmodule couch_leg() {\n    // Simple tapered cylinder leg\n    cylinder(h = leg_h, r1 = 4, r2 = 3, $fn = 16);\n}\n\nmodule seat_frame() {\n    // Hollow box frame for seat\n    difference() {\n        cube([seat_w, seat_d, seat_h]);\n        translate([wall, wall, wall])\n            cube([seat_w - 2*wall, seat_d - 2*wall, seat_h - wall]);\n    }\n}\n\nmodule backrest() {\n    // Slightly tilted backrest panel\n    difference() {\n        translate([-wall/2, -wall/2, 0])\n            cube([seat_w + wall, seat_d/5, back_h]);\n        translate([wall, 0, wall])\n            cube([seat_w, seat_d/5 - wall, back_h - wall]);\n    }\n}\n\nmodule armrest(side) {\n    // Armrest block with rounded top\n    translate([side * (seat_w/2 - arm_w/2), 0, seat_h]) {\n        difference() {\n            rounded_cube([arm_w, seat_d, back_h - 5], 3);\n            translate([wall, wall, wall])\n                cube([arm_w - 2*wall, seat_d - 2*wall, back_h - 5 - wall]);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Soft cushion with rounded edges\n    translate([0, 0, seat_h])\n        rounded_cube([seat_w - 2*arm_w - 4, seat_d - 4, cushion_h], cushion_r);\n}\n\nmodule back_cushion() {\n    // Cushion that leans against backrest\n    translate([0, seat_d/5 - 2, seat_h])\n        rotate([10, 0, 0])  // slight tilt backwards\n            rounded_cube([seat_w - 2*arm_w - 4, seat_d/5, cushion_h], cushion_r);\n}\n\n//---------- Main assembly ----------\nunion() {\n    // Structural frame\n    seat_frame();\n    \n    // Backrest upright\n    translate([0, seat_d - seat_d/5, seat_h])\n        backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs at corners\n    for (x = [-seat_w/2 + 5, seat_w/2 - 5],\n         y = [5, seat_d - 5]) {\n        translate([x, y, 0])\n            couch_leg();\n    }\n    \n    // Cushions\n    seat_cushion();\n    back_cushion();\n}",
    "renders": true
  },
  {
    "furniture": "coffeebean",
    "openscad_code": "// Coffee Bean Lounge Chair - Realistic Style\n// Dimensions: 120mm W x 160mm D x 80mm H\n\n// Main parameters\nwall_thickness = 2;\nbean_length = 120;\nbean_width = 65;\nbean_height = 45;\nleg_height = 35;\nseat_depth = 80;\n\n// Coffee bean shaped seat module\nmodule coffee_bean_seat() {\n    difference() {\n        // Main bean body\n        scale([1, 0.7, 0.6])\n        rotate([0, 90, 0])\n        hull() {\n            sphere(d=bean_length, $fn=50);\n            translate([0, 0, bean_width/2]) \n            sphere(d=bean_length*0.8, $fn=50);\n        }\n        \n        // Center groove\n        translate([0, -bean_width, 0])\n        rotate([0, 90, 0])\n        cylinder(h=bean_length+5, r=bean_width/4, $fn=50);\n        \n        // Wall thickness\n        translate([0, 0, -bean_height/2])\n        scale([0.8, 0.5, 0.4])\n        rotate([0, 90, 0])\n        hull() {\n            sphere(d=bean_length-4, $fn=30);\n            translate([0, 0, (bean_width-4)/2]) \n            sphere(d=(bean_length*0.8)-4, $fn=30);\n        }\n    }\n}\n\n// Chair leg module\nmodule chair_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, leg_height/2]) {\n        // Main leg post\n        cylinder(h=leg_height, r=wall_thickness*2, $fn=20);\n        \n        // Support brace\n        translate([0, 0, leg_height/4])\n        rotate([90, 0, 0])\n        cylinder(h=30, r=wall_thickness, $fn=12);\n    }\n}\n\n// Backrest support\nmodule backrest_support() {\n    translate([0, -seat_depth/2+10, bean_height/2+leg_height-5]) {\n        // Main backrest post\n        rotate([0, 15, 0])\n        cube([wall_thickness*3, wall_thickness*2, 40], center=true);\n        \n        // Horizontal support\n        translate([0, 0, 15])\n        rotate([0, 15, 0])\n        cube([60, wall_thickness*2, wall_thickness*2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_height])\n    coffee_bean_seat();\n    \n    // Front legs\n    chair_leg(-bean_length/3, seat_depth/3);\n    chair_leg(bean_length/3, seat_depth/3);\n    \n    // Rear legs\n    chair_leg(-bean_length/3, -seat_depth/3);\n    chair_leg(bean_length/3, -seat_depth/3);\n    \n    // Backrest\n    backrest_support();\n    \n    // Seat support frame\n    translate([0, 0, leg_height-2])\n    difference() {\n        cube([bean_length+10, seat_depth+10, wall_thickness], center=true);\n        cube([bean_length-10, seat_depth-10, wall_thickness+1], center=true);\n    }\n    \n    // Armrests\n    translate([bean_length/2+5, 0, leg_height+bean_height/2])\n    rotate([0, 0, 45])\n    cube([wall_thickness*2, 40, wall_thickness*2], center=true);\n    \n    translate([-bean_length/2-5, 0, leg_height+bean_height/2])\n    rotate([0, 0, -45])\n    cube([wall_thickness*2, 40, wall_thickness*2], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "café",
    "openscad_code": "// Café bistro chair with curved backrest, round seat and four cylindrical legs\n// Overall height 85 mm, seat height 45 mm, printable in one piece\n\nchair_height = 85;\nseat_height = 45;\nseat_diameter = 35;\nleg_diameter = 6;\nbackrest_height = 40;\nbackrest_width = 35;\nbackrest_thickness = 2;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chair() {\n    // Four legs\n    for (a = [0, 90, 180, 270]) {\n        translate([0, 0, leg_diameter/2])\n        rotate([0, 0, a])\n        translate([seat_diameter/2 - leg_diameter/2, 0, 0])\n        cylinder(h = seat_height - leg_diameter/2, d = leg_diameter, $fn = 16);\n    }\n\n    // Seat – flat cylinder with slight fillet on underside\n    difference() {\n        cylinder(h = wall, d = seat_diameter, $fn = 48);\n        translate([0, 0, -0.01])\n        cylinder(h = wall + 0.02, d = seat_diameter - 2*wall, $fn = 48);\n    }\n\n    // Backrest frame – two vertical posts and curved top\n    union() {\n        // Left post\n        translate([-backrest_width/2 + backrest_thickness/2, 0, seat_height])\n        cylinder(h = backrest_height, d = backrest_thickness*2, $fn = 12);\n\n        // Right post\n        translate([backrest_width/2 - backrest_thickness/2, 0, seat_height])\n        cylinder(h = backrest_height, d = backrest_thickness*2, $fn = 12);\n\n        // Top curved slat\n        translate([0, 0, seat_height + backrest_height - backrest_thickness])\n        rotate([90, 0, 0])\n        cylinder(h = backrest_width, d = backrest_thickness*2, $fn = 12);\n    }\n\n    // Backrest slats – four horizontal bars for comfort and style\n    for (z = [seat_height + 10, seat_height + 18, seat_height + 26, seat_height + 34]) {\n        translate([0, 0, z])\n        rotate([90, 0, 0])\n        cylinder(h = backrest_width - backrest_thickness*2, d = backrest_thickness, $fn = 12);\n    }\n\n    // Lower stretcher ring for leg stability\n    translate([0, 0, seat_height/2])\n    difference() {\n        cylinder(h = wall, d = seat_diameter - leg_diameter*2, $fn = 32);\n        translate([0, 0, -0.01])\n        cylinder(h = wall + 0.02, d = seat_diameter - leg_diameter*2 - 2*wall, $fn = 32);\n    }\n}\n\nchair();",
    "renders": true
  },
  {
    "furniture": "kitchen",
    "openscad_code": "// Kitchen cabinet with drawers and doors - realistic medium complexity\n// Overall size: 100mm wide x 50mm deep x 80mm high\n\n// Cabinet body\nmodule cabinet_body() {\n    difference() {\n        // Main cabinet box\n        cube([100, 50, 80]);\n        \n        // Hollow out interior\n        translate([2, 2, 2])\n            cube([96, 46, 78]);\n        \n        // Baseboard cutout\n        translate([0, 0, 0])\n            cube([100, 50, 10]);\n    }\n}\n\n// Cabinet base with legs\nmodule cabinet_base() {\n    // Base frame\n    translate([0, 0, 0])\n        cube([100, 50, 10]);\n    \n    // Four legs\n    for(x=[5, 85])\n        for(y=[5, 35]) {\n            translate([x, y, -5])\n                cylinder(h=15, d=8);\n        }\n}\n\n// Cabinet doors\nmodule cabinet_doors() {\n    // Left door\n    translate([2, 0, 10])\n        cube([48, 2, 68]);\n    \n    // Right door\n    translate([50, 0, 10])\n        cube([48, 2, 68]);\n    \n    // Door handles\n    translate([25, 2, 44])\n        cylinder(h=10, d=4);\n    translate([75, 2, 44])\n        cylinder(h=10, d=4);\n}\n\n// Cabinet drawers (upper section)\nmodule cabinet_drawers() {\n    // Three drawers\n    for(i=[0:2]) {\n        // Drawer front\n        translate([2, 0, 50 + i*20])\n            cube([96, 2, 18]);\n        \n        // Drawer handle\n        translate([50, 2, 59 + i*20])\n            cylinder(h=8, d=3);\n    }\n}\n\n// Cabinet top with countertop\nmodule cabinet_top() {\n    // Countertop\n    translate([-2, -2, 80])\n        cube([104, 54, 4]);\n    \n    // Backsplash\n    translate([-2, 45, 84])\n        cube([104, 4, 8]);\n}\n\n// Assembly\nunion() {\n    // Base structure\n    cabinet_base();\n    \n    // Main cabinet\n    translate([0, 0, 10])\n        cabinet_body();\n    \n    // Doors and drawers\n    translate([0, 50, 10])\n        cabinet_doors();\n    translate([0, 50, 10])\n        cabinet_drawers();\n    \n    // Top surface\n    cabinet_top();\n}",
    "renders": true
  },
  {
    "furniture": "prep",
    "openscad_code": "// Kitchen Prep Cart - Mobile Island\n// Realistic medium-complexity prep furniture with butcher-block top, towel rack, and storage shelf\n\n// Parameters\ncart_width = 90;\ncart_depth = 50;\ncart_height = 85;\nleg_thickness = 20;\nshelf_clearance = 40;\nwall_thickness = 2;\nwheel_diameter = 30;\nhandle_radius = 8;\n\n// Main cart structure\nmodule prep_cart() {\n    // Top butcher block surface\n    translate([0, 0, cart_height - 10]) {\n        difference() {\n            cube([cart_width, cart_depth, 10], center = true);\n            // Juice groove on top\n            translate([0, 0, 8.5]) \n                cube([cart_width - 10, cart_depth - 10, 2], center = true);\n        }\n    }\n    \n    // Lower shelf\n    translate([0, 0, shelf_clearance/2]) {\n        difference() {\n            cube([cart_width - 10, cart_depth - 10, wall_thickness], center = true);\n            // Slats pattern\n            for(y = [-cart_depth/2 + 5 : 8 : cart_depth/2 - 5]) {\n                translate([0, y, -1])\n                    cube([cart_width - 12, 4, wall_thickness + 2], center = true);\n            }\n        }\n    }\n    \n    // Legs\n    for(x = [-cart_width/2 + leg_thickness/2, cart_width/2 - leg_thickness/2])\n    for(y = [-cart_depth/2 + leg_thickness/2, cart_depth/2 - leg_thickness/2]) {\n        translate([x, y, cart_height/2 - 5]) {\n            difference() {\n                cube([leg_thickness, leg_thickness, cart_height - 10], center = true);\n                // Wheel mount cavity\n                translate([0, 0, -cart_height/2 + 5 + wheel_diameter/2 + 2])\n                    cylinder(h = wheel_diameter + 4, r = wheel_diameter/2 - 2, $fn = 16);\n            }\n        }\n    }\n    \n    // Wheels (4 casters)\n    for(x = [-cart_width/2 + leg_thickness/2, cart_width/2 - leg_thickness/2])\n    for(y = [-cart_depth/2 + leg_thickness/2, cart_depth/2 - leg_thickness/2]) {\n        translate([x, y, wheel_diameter/2]) {\n            rotate([0, 90, 0]) {\n                // Wheel tire\n                difference() {\n                    cylinder(h = 8, r = wheel_diameter/2, center = true, $fn = 16);\n                    cylinder(h = 9, r = wheel_diameter/2 - 4, center = true, $fn = 16);\n                }\n                // Axle pin\n                cylinder(h = 12, r = 2, center = true, $fn = 8);\n            }\n        }\n    }\n    \n    // Towel rack bar\n    translate([cart_width/2 - leg_thickness - 5, 0, cart_height - 30]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = cart_depth - leg_thickness - 10, r = handle_radius, center = true, $fn = 16);\n                // Hollow center\n                cylinder(h = cart_depth - leg_thickness - 8, r = handle_radius - wall_thickness, center = true, $fn = 16);\n            }\n        }\n    }\n    \n    // Support rails between legs\n    // Front/back rails\n    for(z = [shelf_clearance + wall_thickness, cart_height - 15]) {\n        translate([0, cart_depth/2 - leg_thickness/2, z]) {\n            cube([cart_width - leg_thickness, leg_thickness, wall_thickness], center = true);\n        }\n        translate([0, -cart_depth/2 + leg_thickness/2, z]) {\n            cube([cart_width - leg_thickness, leg_thickness, wall_thickness], center = true);\n        }\n    }\n    \n    // Left/right rails\n    for(z = [shelf_clearance + wall_thickness, cart_height - 15]) {\n        translate([cart_width/2 - leg_thickness/2, 0, z]) {\n            cube([wall_thickness, cart_depth - leg_thickness, leg_thickness], center = true);\n        }\n        translate([-cart_width/2 + leg_thickness/2, 0, z]) {\n            cube([wall_thickness, cart_depth - leg_thickness, leg_thickness], center = true);\n        }\n    }\n    \n    // Edge trim detail on top\n    translate([0, 0, cart_height - 5]) {\n        for(x = [-cart_width/2 + 2.5, cart_width/2 - 2.5]) {\n            translate([x, 0, 0]) {\n                cube([5, cart_depth, 2], center = true);\n            }\n        }\n        for(y = [-cart_depth/2 + 2.5, cart_depth/2 - 2.5]) {\n            translate([0, y, 0]) {\n                cube([cart_width, 5, 2], center = true);\n            }\n        }\n    }\n}\n\nprep_cart();",
    "renders": true
  },
  {
    "furniture": "chef",
    "openscad_code": "// Chef's rolling prep cart / island\n// Designed for 3D printing, 110 mm tall, 2 mm wall thickness\n// Uses only OpenSCAD primitives, realistic medium detail\n\n$fn = 32; // Smooth curves\n\n// Overall dimensions\ncart_w = 80; // Front width\ncart_d = 50; // Side depth  \ncart_h = 110; // Total height incl. wheels\ntop_t = 4;   // Butcher-block top thickness\nframe_t = 2; // Wall / frame thickness\n\nmodule wheel(dia=20, thick=6) {\n    // Simple wheel with slight taper for printing\n    difference() {\n        union() {\n            cylinder(h=thick, d1=dia, d2=dia-1, center=true);\n            // Tiny axle stub\n            cylinder(h=thick+2, d=3, center=true);\n        }\n        // Hollow core for weight saving\n        cylinder(h=thick+4, d=dia-6, center=true);\n    }\n}\n\nmodule caster() {\n    // Fork and axle\n    rotate([0,90,0])\n    difference() {\n        // Fork arms\n        for(side=[-1,1])\n            translate([0, side*6, 0])\n                cube([12, 2, 12], center=true);\n        // Axle hole\n        rotate([0,90,0])\n            cylinder(h=15, d=3.2, center=true);\n    }\n}\n\nmodule shelf() {\n    // Wire-style shelf, 2 mm rods\n    difference() {\n        // Outer frame\n        cube([cart_w-2*frame_t, cart_d-2*frame_t, frame_t], center=true);\n        // Lightening pattern\n        for(x=[-30:10:30])\n            for(y=[-15:10:15])\n                translate([x,y,0])\n                    cube([8,8,frame_t+1], center=true);\n    }\n}\n\nmodule drawer(h=20) {\n    // Simple drawer box\n    difference() {\n        // Box\n        cube([cart_w-20, cart_d-20, h], center=true);\n        // Inner cavity\n        cube([cart_w-20-2*frame_t, cart_d-20-2*frame_t, h-frame_t], center=true);\n    }\n    // Handle bar\n    translate([0, (cart_d-20)/2 + 1, 0])\n        rotate([90,0,0])\n            cylinder(h=cart_w-30, d=5, center=true);\n}\n\n// ---- Assembly ----\nunion() {\n    // Butcher-block top\n    translate([0,0,cart_h-top_t/2])\n        difference() {\n            cube([cart_w, cart_d, top_t], center=true);\n            // Four mounting recesses for screws\n            for(x=[-cart_w/2+8, cart_w/2-8])\n                for(y=[-cart_d/2+8, cart_d/2-8])\n                    translate([x,y,0])\n                        cylinder(h=top_t+1, d=6);\n        }\n\n    // Vertical corner posts (legs)\n    for(x=[-cart_w/2+frame_t, cart_w/2-frame_t])\n        for(y=[-cart_d/2+frame_t, cart_d/2-frame_t])\n            translate([x,y,(cart_h-top_t)/2])\n                cube([frame_t*2, frame_t*2, cart_h-top_t], center=true);\n\n    // Mid shelf\n    translate([0,0,cart_h/2+10])\n        shelf();\n\n    // Drawer unit\n    translate([0,0,cart_h-top_t-15])\n        drawer(h=25);\n\n    // Bottom shelf\n    translate([0,0,25])\n        shelf();\n\n    // Four casters with wheels\n    for(x=[-cart_w/2+15, cart_w/2-15])\n        for(y=[-cart_d/2+15, cart_d/2-15])\n            translate([x,y,10]) {\n                caster();\n                translate([0,0,-6])\n                    wheel();\n            }\n}",
    "renders": true
  },
  {
    "furniture": "baker",
    "openscad_code": "// Baker's Rack - Realistic Style\n// Medium complexity model with proper 3D printing considerations\n\nmodule frame_support() {\n    // Main vertical support post\n    difference() {\n        cube([4, 4, 120]);\n        // Hollow center for material savings\n        translate([2, 2, 2])\n        cube([0.5, 0.5, 116]);\n    }\n}\n\nmodule shelf(width, depth, height) {\n    // Solid shelf with rounded edges\n    translate([0, 0, height]) {\n        // Main shelf\n        cube([width, depth, 2]);\n        \n        // Front lip for containing items\n        translate([-1, depth-1, 2])\n        cube([width+2, 2, 8]);\n        \n        // Side lips\n        translate([-1, 0, 2])\n        cube([2, depth, 8]);\n        translate([width-1, 0, 2])\n        cube([2, depth, 8]);\n    }\n}\n\nmodule wine_rack() {\n    // Wine bottle storage section\n    translate([20, 15, 60]) {\n        // Base platform\n        cube([30, 20, 2]);\n        \n        // Wine bottle cradles\n        for(i = [0:2]) {\n            translate([5 + i * 10, 5, 2]) {\n                // Support bars\n                cube([8, 10, 8]);\n                translate([4, 15, 4])\n                rotate([90, 0, 0])\n                cylinder(h=10, r=3.5, $fn=20);\n            }\n        }\n    }\n}\n\nmodule drawer(width) {\n    // Simple drawer with handle\n    difference() {\n        cube([width, 18, 6]);\n        translate([1, 1, 1])\n        cube([width-2, 16, 4]);\n    }\n    \n    // Drawer handle\n    translate([width/2, 19, 3])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=2, $fn=12);\n}\n\nmodule back_panel() {\n    // Decorative back panel with cutouts\n    difference() {\n        cube([50, 2, 100]);\n        // Decorative circles\n        for(i = [0:4]) {\n            for(j = [0:4]) {\n                translate([5 + i*10, 1, 10 + j*20])\n                sphere(r=3, $fn=20);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Left frame\n    translate([0, 0, 0])\n    frame_support();\n    \n    // Right frame\n    translate([46, 0, 0])\n    frame_support();\n    \n    // Back frame\n    translate([0, 16, 0])\n    frame_support();\n    \n    // Back panel\n    translate([2, 18, 10])\n    back_panel();\n    \n    // Top shelf\n    shelf(50, 20, 100);\n    \n    // Middle shelf\n    shelf(50, 20, 70);\n    \n    // Bottom shelf\n    shelf(50, 20, 40);\n    \n    // Wine rack section\n    wine_rack();\n    \n    // Side support bars\n    translate([4, 4, 80])\n    cube([42, 2, 2]);\n    \n    // Drawers\n    translate([10, 0, 10])\n    drawer(30);\n    \n    // Bottom support feet\n    translate([-2, -2, -2])\n    cube([54, 24, 2]);\n    \n    // Top decorative rail\n    translate([0, 0, 118])\n    cube([50, 2, 4]);\n}",
    "renders": true
  },
  {
    "furniture": "pastry",
    "openscad_code": "// Croissant Lounge Chair\n// Realistic pastry-style furniture with croissant-shaped backrest and seat\n// Dimensions: 100mm wide x 90mm deep x 85mm high\n\n// Parameters\nchair_width = 100;\nchair_depth = 90;\nchair_height = 85;\nleg_height = 35;\nwall_th = 2;\ncroissant_layers = 8;\nlayer_spacing = 3;\n\n// Main module\nmodule croissant_chair() {\n    // Chair legs\n    legs();\n    \n    // Seat base\n    seat_base();\n    \n    // Croissant-shaped backrest\n    croissant_backrest();\n    \n    // Croissant-shaped seat\n    croissant_seat();\n    \n    // Armrest supports\n    armrests();\n}\n\n// Chair legs\nmodule legs() {\n    leg_positions = [\n        [-35, -35, 0],\n        [35, -35, 0],\n        [-35, 25, 0],\n        [35, 25, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        translate(pos)\n        rotate([0, 0, 45])\n        cylinder(h = leg_height, d1 = 8, d2 = 6, $fn = 8);\n    }\n}\n\n// Seat base frame\nmodule seat_base() {\n    difference() {\n        // Main frame\n        translate([0, 0, leg_height])\n        cube([chair_width - 20, chair_depth - 20, wall_th], center = true);\n        \n        // Lightening holes\n        for(x = [-20, 0, 20])\n            for(y = [-15, 0, 15])\n                translate([x, y, leg_height])\n                cylinder(h = wall_th + 1, r = 6, $fn = 16);\n    }\n}\n\n// Croissant-shaped backrest\nmodule croissant_backrest() {\n    // Back support frame\n    translate([0, -chair_depth/2 + 15, leg_height + 10])\n    rotate([75, 0, 0])\n    cube([chair_width - 40, wall_th, 50]);\n    \n    // Croissant layers\n    for(i = [0:croissant_layers-1]) {\n        translate([0, -chair_depth/2 + 20, leg_height + 15 + i*layer_spacing])\n        rotate([75, 0, 0])\n        scale([1 - i*0.08, 1, 1 - i*0.08])\n        croissant_slice(chair_width - 50 - i*5, 40 - i*3);\n    }\n}\n\n// Single croissant slice\nmodule croissant_slice(width, height) {\n    difference() {\n        // Outer curve\n        translate([0, 0, 0])\n        rotate([0, 0, 0])\n        scale([1, 0.5, 1])\n        cylinder(h = wall_th, r = width/2, $fn = 32);\n        \n        // Inner curve\n        translate([-width/4, 0, 0])\n        scale([0.5, 0.3, 1])\n        cylinder(h = wall_th + 1, r = width/3, $fn = 32);\n        \n        // Cut ends\n        translate([width/2 - 5, 0, 0])\n        cube([10, height, wall_th + 1], center = true);\n        translate([-width/2 + 5, 0, 0])\n        cube([10, height, wall_th + 1], center = true);\n    }\n}\n\n// Croissant-shaped seat\nmodule croissant_seat() {\n    // Base layer\n    translate([0, 0, leg_height + wall_th])\n    rotate([0, 0, 0])\n    scale([1, 0.7, 1])\n    croissant_slice(chair_width - 30, chair_depth - 30);\n    \n    // Padding layers\n    for(i = [1:3]) {\n        translate([0, 0, leg_height + wall_th + i*layer_spacing*0.8])\n        rotate([0, 0, 0])\n        scale([1 - i*0.05, 0.7 - i*0.05, 1])\n        croissant_slice(chair_width - 30 - i*5, chair_depth - 30 - i*5);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 + 5, 0, leg_height + 15])\n    rotate([0, 0, -30])\n    cube([wall_th, 30, 20]);\n    \n    // Right armrest\n    translate([chair_width/2 - 5, 0, leg_height + 15])\n    rotate([0, 0, 30])\n    cube([wall_th, 30, 20]);\n    \n    // Armrest supports\n    translate([-chair_width/2 + 5, 10, leg_height + 5])\n    rotate([0, 0, 0])\n    cylinder(h = 10, r = 4, $fn = 8);\n    \n    translate([chair_width/2 - 5, 10, leg_height + 5])\n    rotate([0, 0, 0])\n    cylinder(h = 10, r = 4, $fn = 8);\n}\n\n// Render the chair\ncroissant_chair();",
    "renders": true
  },
  {
    "furniture": "butcher",
    "openscad_code": "// Butcher Block Kitchen Island (realistic style, medium complexity)\n// Dimensions: 100mm (L) x 60mm (W) x 90mm (H)\n\nmodule butcher_block() {\n    // Main cutting surface - 40mm thick end-grain butcher block\n    translate([0, 0, 50]) {\n        difference() {\n            cube([100, 60, 40], center=true);\n            // Juice groove around edge\n            translate([0, 0, 19]) {\n                cube([90, 50, 2], center=true);\n            }\n        }\n    }\n    \n    // Base frame - 30mm thick\n    translate([0, 0, 15]) {\n        difference() {\n            cube([80, 40, 30], center=true);\n            // Recessed front for drawers\n            translate([0, 5, 0]) {\n                cube([70, 35, 30], center=true);\n            }\n        }\n    }\n    \n    // Four legs - tapered square posts\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, 0]) {\n            cylinder(h=50, r1=4, r2=3, center=false, $fn=4);\n        }\n    }\n    \n    leg(-35, -20);\n    leg(35, -20);\n    leg(-35, 20);\n    leg(35, 20);\n    \n    // Lower shelf - slatted design\n    for(i = [-30:10:30]) {\n        translate([i, 0, 8]) {\n            cube([8, 55, 2], center=true);\n        }\n    }\n    \n    // Three drawers with handles\n    module drawer(y_pos) {\n        difference() {\n            translate([0, y_pos, 30]) {\n                cube([65, 18, 25], center=true);\n            }\n            // Drawer cavity\n            translate([0, y_pos, 42]) {\n                cube([55, 12, 15], center=true);\n            }\n            // Handle cutout\n            translate([0, y_pos-9.5, 35]) {\n                cube([15, 3, 4], center=true);\n            }\n        }\n        // Drawer handle bar\n        translate([0, y_pos-10, 35]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=15, r=2, center=true, $fn=12);\n            }\n        }\n    }\n    \n    drawer(-15);\n    drawer(0);\n    drawer(15);\n    \n    // Towel bar on side\n    translate([-50, 0, 25]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=40, r=2, center=true, $fn=12);\n        }\n    }\n    \n    // Knife slots on top\n    translate([45, 0, 71]) {\n        for(i = [-20:8:20]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=3, r=2.5, center=true, $fn=6);\n            }\n            translate([0, i, 0]) {\n                cube([5, 3, 3], center=true);\n            }\n        }\n    }\n    \n    // Support brackets under top\n    module bracket(x_pos) {\n        translate([x_pos, 0, 45]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cube([20, 10, 5], center=true);\n                    translate([5, 0, 0]) {\n                        cube([5, 10, 6], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    bracket(-40);\n    bracket(40);\n}\n\n// Render the complete butcher block\nbutcher_block();",
    "renders": true
  },
  {
    "furniture": "craft",
    "openscad_code": "// Craft-style wooden stool with through-tenon joinery\n// Overall height 120 mm, seat 250 mm diameter, printable in one piece\n\n$fa = 2; $fs = 1; // smoother curves\n\nmodule stool() {\n    // Seat disk\n    difference() {\n        cylinder(h = 12, d = 250, center = true);\n        // shallow finger-grip groove on underside\n        translate([0, 0, 5])\n            cylinder(h = 3, d = 220, center = true);\n    }\n\n    // Four cylindrical legs with through-tenons\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([0, 90, -54])\n                leg_assembly();\n}\n\nmodule leg_assembly() {\n    // Main leg shaft\n    difference() {\n        cylinder(h = 108, d = 22, center = true);\n        // hollow core for material saving & printing\n        cylinder(h = 112, d = 18, center = true);\n    }\n\n    // Top tenon peg protruding through seat\n    translate([0, 0, 60])\n        cylinder(h = 12, d = 18, center = true);\n\n    // Lower stretcher ring (connects all legs)\n    rotate([90, 0, 0])\n        rotate_extrude()\n            translate([90, 0, 0])\n                square([4, 12], center = true);\n}\n\n// Add small chamfers for printability\nmodule chamfer_edge(r) {\n    difference() {\n        children();\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x*125, y*125, 6])\n                    cylinder(h = 2, d = r*2, center = true);\n    }\n}\n\n// Assemble complete stool\ntranslate([0, 0, 60])\n    chamfer_edge(6)\n        stool();",
    "renders": true
  },
  {
    "furniture": "art",
    "openscad_code": "// Art Chair - Modern Sculptural Form\n// Overall dimensions: 80mm W x 75mm D x 120mm H\n\nmodule leg(x_pos, z_pos) {\n    // Tapered leg with 2mm wall thickness\n    difference() {\n        cylinder(h = 100, r1 = 6, r2 = 4, $fn = 32);\n        translate([0, 0, 2])\n            cylinder(h = 96, r1 = 4, r2 = 2, $fn = 32);\n    }\n    // Foot detail\n    translate([0, 0, -1])\n        cylinder(h = 2, r = 6.5, $fn = 32);\n}\n\nmodule seat_support() {\n    // Curved seat frame\n    difference() {\n        // Outer frame\n        translate([0, 0, 50])\n            cube([82, 77, 8], center = true);\n        // Hollow center\n        translate([0, 0, 48])\n            cube([78, 73, 12], center = true);\n    }\n    // Corner braces\n    for(x = [-37, 37])\n        for(y = [-32, 32]) {\n            translate([x, y, 46])\n                cube([8, 8, 12], center = true);\n        }\n}\n\nmodule backrest() {\n    // Curved backrest shell\n    difference() {\n        // Main backrest\n        translate([0, -32, 85])\n            rotate([90, 0, 0])\n                cylinder(h = 70, r1 = 40, r2 = 35, $fn = 64);\n        // Hollow back\n        translate([0, -35, 85])\n            rotate([90, 0, 0])\n                cylinder(h = 74, r1 = 38, r2 = 33, $fn = 64);\n    }\n    \n    // Decorative vertical slats\n    for(i = [-30:15:30]) {\n        translate([i, -30, 85])\n            cube([3, 4, 60], center = true);\n    }\n}\n\nmodule seat_cushion() {\n    // Sculpted seat pad\n    difference() {\n        // Main cushion\n        translate([0, 0, 58])\n            cube([76, 70, 10], center = true);\n        // Contoured top\n        translate([0, 0, 65])\n            cube([74, 68, 10], center = true);\n    }\n    \n    // Upholstery seams\n    for(x = [-25:25:25])\n        for(y = [-20:20:20]) {\n            translate([x, y, 63])\n                cube([1, 1, 1], center = true);\n        }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    for(x = [-35, 35])\n        for(y = [-30, 30]) {\n            translate([x, y, 0])\n                leg(x, y);\n        }\n    \n    // Seat structure\n    seat_support();\n    \n    // Backrest\n    backrest();\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Cross-brace between back legs\n    translate([0, 30, 25])\n        cube([74, 4, 4], center = true);\n    \n    // Front stretcher\n    translate([0, -30, 25])\n        cube([74, 4, 4], center = true);\n}",
    "renders": true
  },
  {
    "furniture": "easel",
    "openscad_code": "// Easel for 3D printing – realistic medium-complexity version\n// Overall height 120 mm, folds to ~50 mm width\n\n$fn = 20;           // smooth cylinders\nwall = 2;           // printable wall thickness\nh = 120;            // total height\nw = 45;             // rail width\nd = 40;             // rail depth\nlegSpread = 90;     // footprint when open\n\n// ---------- Front legs ----------\nmodule frontLeg() {\n    difference() {\n        // main rectangular leg\n        translate([0, 0, h/2]) cube([wall, d, h], center = true);\n        \n        // finger hole near centre of gravity for carrying\n        translate([0, d/2 + 1, h/2 + 10])\n            rotate([90, 0, 0])\n            cylinder(h = wall + 2, r = 6, center = true);\n    }\n}\n\n// ---------- Rear leg ----------\nmodule rearLeg() {\n    difference() {\n        // slightly wider rear leg for stability\n        translate([0, 0, h/2]) cube([wall, d + 5, h], center = true);\n        \n        // same carrying hole\n        translate([0, (d + 5)/2 + 1, h/2 + 10])\n            rotate([90, 0, 0])\n            cylinder(h = wall + 2, r = 6, center = true);\n    }\n}\n\n// ---------- Hinge block connecting legs ----------\nmodule hingeBlock() {\n    // central block through which the legs pivot\n    cube([w, wall * 2, 20], center = true);\n    \n    // two hinge pins\n    for (x = [-w/2 + 5, w/2 - 5]) {\n        translate([x, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = wall * 2 + 0.2, r = 2, center = true);\n    }\n}\n\n// ---------- Canvas rail ----------\nmodule canvasRail() {\n    difference() {\n        // horizontal bar on which canvas rests\n        translate([0, 0, 0])\n            cube([w, wall, d - 10], center = true);\n        \n        // groove for canvas edge\n        translate([0, 0, 3])\n            cube([w - 4, wall + 0.2, 4], center = true);\n    }\n}\n\n// ---------- Support ledge ----------\nmodule ledge() {\n    // tray that props canvas forward\n    translate([0, d/2 - 5, -5])\n        cube([w - 10, wall, 10], center = true);\n}\n\n// ---------- Truss brace ----------\nmodule brace() {\n    // angled brace between rear and front legs\n    hull() {\n        translate([0, 0, 30])\n            sphere(r = wall);\n        translate([0, legSpread/2 - 5, 5])\n            sphere(r = wall);\n    }\n}\n\n// ---------- Assembly ----------\n// front legs\ntranslate([-w/2 + wall, 0, 0])\n    rotate([0, 15, 0])\n    frontLeg();\ntranslate([w/2 - wall, 0, 0])\n    rotate([0, -15, 0])\n    frontLeg();\n\n// rear leg centred\nrotate([0, 90 - atan((legSpread/2)/(h - 20)), 0])\n    rearLeg();\n\n// hinge block at top intersection\ntranslate([0, 0, h - 10])\n    hingeBlock();\n\n// canvas rail slides onto front legs via slots\ntranslate([0, 0, h * 0.7])\n    canvasRail();\n\n// ledge below rail\ntranslate([0, 0, h * 0.7 - 5])\n    ledge();\n\n// diagonal braces on each side\ntranslate([-w/2 + wall, 0, 0])\n    brace();\ntranslate([w/2 - wall, 0, 0])\n    brace();",
    "renders": true
  },
  {
    "furniture": "display",
    "openscad_code": "// Display Shelf Unit - Realistic Style\n// Medium complexity bookshelf/display cabinet with 3 shelves and back panel\n// Overall dimensions: 80mm W x 30mm D x 120mm H\n\n$fn = 32;\n\n// Main parameters\nshelf_width = 80;\nshelf_depth = 30;\nshelf_thickness = 3;\nshelf_spacing = 35;\nwall_thickness = 2;\nleg_width = 4;\n\n// Base frame module\nmodule base_frame() {\n    // Bottom shelf\n    translate([0, 0, wall_thickness])\n        cube([shelf_width, shelf_depth, shelf_thickness], center = true);\n    \n    // Left side panel\n    translate([-shelf_width/2 + wall_thickness/2, 0, shelf_thickness/2 + wall_thickness + shelf_spacing])\n        cube([wall_thickness, shelf_depth, shelf_spacing * 2 + shelf_thickness], center = true);\n    \n    // Right side panel\n    translate([shelf_width/2 - wall_thickness/2, 0, shelf_thickness/2 + wall_thickness + shelf_spacing])\n        cube([wall_thickness, shelf_depth, shelf_spacing * 2 + shelf_thickness], center = true);\n    \n    // Back panel\n    translate([0, shelf_depth/2 - wall_thickness/2, shelf_thickness/2 + wall_thickness + shelf_spacing])\n        cube([shelf_width - wall_thickness*2, wall_thickness, shelf_spacing * 2 + shelf_thickness], center = true);\n    \n    // Front bottom support\n    translate([0, -shelf_depth/2 + wall_thickness/2, wall_thickness + shelf_thickness/2])\n        cube([shelf_width - wall_thickness*2, wall_thickness, shelf_thickness], center = true);\n}\n\n// Shelves module\nmodule shelves() {\n    // Middle shelf\n    translate([0, 0, wall_thickness + shelf_spacing + shelf_thickness/2])\n        cube([shelf_width - wall_thickness*2 - 2, shelf_depth - wall_thickness*2 - 2, shelf_thickness], center = true);\n    \n    // Top shelf\n    translate([0, 0, wall_thickness + shelf_spacing*2 + shelf_thickness*1.5])\n        cube([shelf_width - wall_thickness*2 - 2, shelf_depth - wall_thickness*2 - 2, shelf_thickness], center = true);\n}\n\n// Legs module\nmodule legs() {\n    // Front left leg\n    translate([-shelf_width/2 + leg_width/2, -shelf_depth/2 + leg_width/2, wall_thickness/2])\n        cube([leg_width, leg_width, wall_thickness], center = true);\n    \n    // Front right leg\n    translate([shelf_width/2 - leg_width/2, -shelf_depth/2 + leg_width/2, wall_thickness/2])\n        cube([leg_width, leg_width, wall_thickness], center = true);\n    \n    // Back left leg\n    translate([-shelf_width/2 + leg_width/2, shelf_depth/2 - leg_width/2, wall_thickness/2])\n        cube([leg_width, leg_width, wall_thickness], center = true);\n    \n    // Back right leg\n    translate([shelf_width/2 - leg_width/2, shelf_depth/2 - leg_width/2, wall_thickness/2])\n        cube([leg_width, leg_width, wall_thickness], center = true);\n}\n\n// Decorative back panel details\nmodule back_details() {\n    // Vertical slats\n    for(i = [-1, 0, 1]) {\n        translate([i * 20, shelf_depth/2 - wall_thickness*1.5, wall_thickness + shelf_spacing*1.5 + shelf_thickness])\n            cube([wall_thickness, wall_thickness, shelf_spacing], center = true);\n    }\n    \n    // Small support brackets\n    translate([-shelf_width/2 + 10, 0, wall_thickness + shelf_spacing/2 + shelf_thickness/2])\n        rotate([0, 0, 45])\n        cube([wall_thickness, wall_thickness, 8], center = true);\n    \n    translate([shelf_width/2 - 10, 0, wall_thickness + shelf_spacing/2 + shelf_thickness/2])\n        rotate([0, 0, -45])\n        cube([wall_thickness, wall_thickness, 8], center = true);\n}\n\n// Assembly\nunion() {\n    base_frame();\n    shelves();\n    legs();\n    back_details();\n}",
    "renders": true
  },
  {
    "furniture": "exhibit",
    "openscad_code": "$fs = 1;\n$fa = 2;\n\n// Overall dimensions\nbase_width = 70;\nbase_depth = 45;\nbase_height = 8;\n\n// Side walls\nwall_thickness = 2;\nwall_height = 50;\n\n// Shelves\nshelf_thickness = 2;\nshelf_clearance = 15;\n\n// Rear panel\nrear_panel_height = wall_height - base_height;\nrear_panel_thickness = 2;\n\n// Acrylic front sheet (simulated)\nfront_thickness = 1;\nfront_clearance = 1;\n\n// Legs\nleg_width = 4;\nleg_height = 8;\n\nmodule legs() {\n    for (x = [0, 1])\n        for (y = [0, 1]) {\n            translate([x*(base_width - leg_width), y*(base_depth - leg_width), 0])\n                cube([leg_width, leg_width, leg_height]);\n        }\n}\n\nmodule side_walls() {\n    // Left wall\n    translate([0, 0, 0])\n        cube([wall_thickness, base_depth, wall_height]);\n    \n    // Right wall\n    translate([base_width - wall_thickness, 0, 0])\n        cube([wall_thickness, base_depth, wall_height]);\n}\n\nmodule back_wall() {\n    translate([wall_thickness, 0, base_height])\n        cube([base_width - 2*wall_thickness, rear_panel_thickness, rear_panel_height]);\n}\n\nmodule shelves() {\n    n_shelves = 3;\n    for (i = [0:n_shelves-1]) {\n        translate([wall_thickness, \n                   rear_panel_thickness, \n                   base_height + shelf_clearance + i*(shelf_thickness + shelf_clearance)])\n            cube([base_width - 2*wall_thickness - front_thickness - front_clearance,\n                  base_depth - rear_panel_thickness,\n                  shelf_thickness]);\n    }\n}\n\nmodule front_sheet() {\n    // Simulated acrylic front\n    translate([base_width - front_thickness - front_clearance, \n               front_clearance,\n               base_height + front_clearance])\n        cube([front_thickness, \n              base_depth - 2*front_clearance, \n              wall_height - base_height - 2*front_clearance]);\n}\n\nmodule base_platform() {\n    cube([base_width, base_depth, base_height]);\n}\n\n// Assemble the exhibit case\nunion() {\n    base_platform();\n    legs();\n    side_walls();\n    back_wall();\n    shelves();\n    front_sheet();\n}",
    "renders": true
  },
  {
    "furniture": "merchandise",
    "openscad_code": "// Modern merchandise display stool with storage compartment\n// Dimensions: 120mm height, 200mm width, 200mm depth\n\n// Overall module\nmodule display_stool() {\n    // Main seat with rounded corners\n    union() {\n        // Seat top with rounded edges\n        difference() {\n            // Main seat block\n            translate([0, 0, 110]) cube([200, 200, 10], center=true);\n            \n            // Rounded corners via cylinders\n            for(x=[-90, 90])\n                for(y=[-90, 90])\n                    translate([x, y, 110]) \n                        cylinder(h=12, r=10, center=true);\n        }\n        \n        // Legs\n        module leg() {\n            difference() {\n                // Main leg\n                translate([0, 0, 55]) cube([20, 20, 110], center=true);\n                \n                // Taper detail\n                translate([0, 0, 45]) cube([22, 22, 80], center=true);\n            }\n        }\n        \n        // Position legs at corners\n        for(x=[-80, 80])\n            for(y=[-80, 80])\n                translate([x, y, 0]) leg();\n        \n        // Storage compartment door\n        translate([0, 0, 60]) {\n            difference() {\n                // Door panel\n                cube([180, 180, 2], center=true);\n                \n                // Handle cutout\n                translate([0, 85, 0]) cube([40, 10, 4], center=true);\n            }\n            \n            // Handle\n            translate([0, 85, 3]) cube([30, 2, 6], center=true);\n        }\n        \n        // Reinforcement frame\n        difference() {\n            // Outer frame\n            translate([0, 0, 5]) cube([190, 190, 100], center=true);\n            \n            // Inner cutout\n            translate([0, 0, 5]) cube([170, 170, 100], center=true);\n        }\n        \n        // Ventilation slots\n        for(i=[-3:3]) {\n            translate([i*25, 95, 60]) cube([15, 2, 40], center=true);\n            translate([95, i*25, 60]) cube([2, 15, 40], center=true);\n        }\n        \n        // Branding plate\n        translate([0, 0, 115]) cube([60, 30, 1], center=true);\n        \n        // Support ribs inside legs\n        module rib() {\n            cube([2, 18, 80], center=true);\n        }\n        \n        for(x=[-80, 80])\n            for(y=[-80, 80])\n                translate([x, y, 40]) rotate([0, 0, 45]) rib();\n    }\n}\n\n// Generate the model\ndisplay_stool();",
    "renders": true
  },
  {
    "furniture": "retail",
    "openscad_code": "// Modern minimalist bar stool (realistic style, medium complexity)\n// Overall height ~110mm, designed for 3D printing without supports\n\n$fn = 36;  // Smooth curves for realism\nwall = 2;  // 2mm wall thickness for 3D printing\n\nmodule stool() {\n    // Central support post (hollow cylinder)\n    difference() {\n        cylinder(h = 80, d = 30);\n        cylinder(h = 80, d = 30 - 2*wall);\n    }\n    \n    // Circular seat with cushion detail\n    translate([0, 0, 80]) {\n        // Seat base\n        difference() {\n            cylinder(h = 10, d = 34);\n            cylinder(h = 10, d = 34 - 2*wall);\n        }\n        \n        // Cushion top (slightly larger, rounded edges)\n        translate([0, 0, 8]) {\n            scale([1, 1, 0.4]) \n                cylinder(h = 8, d = 36);\n        }\n    }\n    \n    // 4-leg base for stability\n    for(i = [0:90:360]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, -20]) {\n                // Leg - angled outward\n                rotate([15, 0, 0]) {\n                    difference() {\n                        cube([8, 8, 60], center = true);\n                        cube([8 - 2*wall, 8 - 2*wall, 60], center = true);\n                    }\n                }\n                \n                // Foot pad (horizontal cylinder)\n                translate([0, 0, -50]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h = 20, d = 12);\n                            cylinder(h = 20, d = 12 - 2*wall);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Footrest ring (connects legs)\n    translate([0, 0, -35]) {\n        difference() {\n            rotate_extrude() {\n                translate([18, 0, 0]) {\n                    square([wall, 10]);\n                }\n            }\n            // Hollow center\n            cylinder(h = 15, d = 32);\n        }\n    }\n    \n    // Seat support ribs (hidden reinforcement)\n    translate([0, 0, 75]) {\n        for(i = [0:120:360]) {\n            rotate([0, 0, i]) {\n                cube([25, wall, 10], center = true);\n            }\n        }\n    }\n}\n\n// Generate the complete stool\nstool();",
    "renders": true
  },
  {
    "furniture": "checkout",
    "openscad_code": "// Checkout Counter - Realistic Style, Medium Complexity\n// Dimensions: 80mm wide x 40mm deep x 35mm high\n\n// Overall counter body\nmodule counter_body() {\n    difference() {\n        // Main counter box\n        cube([80, 40, 30]);\n        \n        // Front opening for customer side\n        translate([5, 39, 0])\n            cube([70, 5, 20]);\n    }\n}\n\n// Cash register area - raised platform\nmodule register_area() {\n    translate([45, 5, 30])\n        cube([30, 25, 5]);\n}\n\n// Barcode scanner holder\nmodule scanner_holder() {\n    translate([55, 15, 35])\n        cylinder(h=8, r=4, $fn=16);\n}\n\n// Receipt printer slot\nmodule printer_slot() {\n    difference() {\n        translate([10, 5, 30])\n            cube([20, 15, 5]);\n        translate([12, 7, 32])\n            cube([16, 11, 3]);\n    }\n}\n\n// Bag storage area\nmodule bag_holder() {\n    // Bag dispenser rods\n    for(i=[0:1]) {\n        translate([75, 10 + i*15, 25])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=1.5, $fn=8);\n    }\n}\n\n// Support legs\nmodule legs() {\n    // Corner legs\n    for(x=[5, 75]) {\n        for(y=[5, 35]) {\n            translate([x, y, 0])\n                cylinder(h=25, r=2, $fn=12);\n        }\n    }\n}\n\n// Front customer shelf\nmodule customer_shelf() {\n    translate([10, 30, 12])\n        cube([60, 4, 2]);\n}\n\n// Payment terminal stand\nmodule payment_terminal() {\n    translate([25, 25, 30])\n        cube([8, 12, 8]);\n    translate([29, 31, 38])\n        rotate([30, 0, 0])\n            cube([2, 6, 0.5]);\n}\n\n// Card reader slot\nmodule card_reader() {\n    translate([29, 31, 34])\n        cube([2, 6, 0.5]);\n}\n\n// Main assembly\nunion() {\n    counter_body();\n    register_area();\n    scanner_holder();\n    printer_slot();\n    bag_holder();\n    legs();\n    customer_shelf();\n    payment_terminal();\n    card_reader();\n}",
    "renders": true
  },
  {
    "furniture": "cashwrap",
    "openscad_code": "// Cashwrap - Retail checkout counter with realistic proportions and details\n// Overall dimensions: 120mm wide x 60mm deep x 40mm tall\n// Includes counter surface, storage compartments, and register area\n\n// Main counter body\nmodule counter_body() {\n    // Base cabinet structure\n    difference() {\n        // Main box\n        cube([120, 60, 35]);\n        \n        // Front storage openings\n        for (i = [0:1]) {\n            translate([10 + i * 55, 1, 5])\n                cube([50, 58, 25]);\n        }\n    }\n}\n\n// Counter surface with raised lip\nmodule counter_surface() {\n    // Main counter top\n    translate([0, 0, 35])\n        cube([120, 60, 2]);\n    \n    // Front lip to prevent items falling\n    translate([-1, 55, 35])\n        cube([122, 5, 3]);\n    \n    // Left side lip\n    translate([-1, 0, 35])\n        cube([5, 55, 3]);\n    \n    // Right side lip\n    translate([116, 0, 35])\n        cube([5, 55, 3]);\n}\n\n// Register platform area\nmodule register_area() {\n    // Raised platform for register/POS\n    translate([80, 5, 37])\n        cube([35, 25, 8]);\n    \n    // Customer side card reader space\n    translate([110, 20, 37])\n        cube([8, 20, 5]);\n}\n\n// Storage drawer details\nmodule storage_details() {\n    // Drawer fronts\n    for (i = [0:1]) {\n        translate([15 + i * 55, 2, 15])\n            cube([40, 2, 10]);\n        \n        // Drawer handles\n        translate([32 + i * 55, 4, 19.5])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=2);\n    }\n}\n\n// Support legs\nmodule legs() {\n    // Front left leg\n    translate([5, 5, 0])\n        cylinder(h=35, d=8);\n    \n    // Front right leg\n    translate([115, 5, 0])\n        cylinder(h=35, d=8);\n    \n    // Back left leg\n    translate([5, 55, 0])\n        cylinder(h=35, d=8);\n    \n    // Back right leg\n    translate([115, 55, 0])\n        cylinder(h=35, d=8);\n}\n\n// Back panel for cable management\nmodule back_panel() {\n    translate([0, 57, 10])\n        cube([120, 3, 25]);\n}\n\n// Cash drawer slot\nmodule cash_drawer() {\n    // Cash drawer opening\n    translate([45, 30, 25])\n        cube([30, 28, 2]);\n    \n    // Drawer front detail\n    translate([45, 30, 25])\n        cube([30, 2, 8]);\n}\n\n// Assembly\nunion() {\n    counter_body();\n    counter_surface();\n    register_area();\n    storage_details();\n    legs();\n    back_panel();\n    cash_drawer();\n}",
    "renders": true
  },
  {
    "furniture": "reception",
    "openscad_code": "// Reception Desk - Medium complexity realistic style\n// Overall dimensions: 120mm wide x 60mm deep x 100mm high\n\n$fn = 32; // Smooth curves\n\n// Main desk structure\nmodule desk_base() {\n    // Desktop surface (2mm thick)\n    translate([0, 0, 98])\n        cube([120, 60, 2], center=true);\n    \n    // Front curved panel\n    translate([0, 25, 49])\n        scale([1, 0.3, 1])\n        cylinder(h=98, r=30, center=true);\n    \n    // Side panels (left and right)\n    translate([-58, 0, 49])\n        cube([4, 50, 98], center=true);\n    translate([58, 0, 49])\n        cube([4, 50, 98], center=true);\n    \n    // Back panel\n    translate([0, -27, 49])\n        cube([116, 4, 98], center=true);\n    \n    // Internal support shelf\n    translate([0, 10, 40])\n        cube([110, 30, 2], center=true);\n}\n\n// Reception counter top with raised edge\nmodule counter_top() {\n    // Main counter\n    translate([0, 15, 100])\n        cube([100, 30, 4], center=true);\n    \n    // Raised back edge (for privacy)\n    translate([0, 0, 104])\n        cube([100, 2, 8], center=true);\n    \n    // Curved customer facing edge\n    translate([0, 30, 100])\n        scale([1, 0.2, 0.5])\n        cylinder(h=4, r=50, center=true);\n}\n\n// Storage compartments\nmodule drawers() {\n    // Drawer faces (3 drawers)\n    for(i=[0:2]) {\n        translate([-35 + i*35, 25, 75 - i*25])\n            cube([30, 2, 20], center=true);\n        \n        // Drawer handles\n        translate([-35 + i*35, 26, 75 - i*25])\n            cube([12, 1, 2], center=true);\n    }\n}\n\n// Computer monitor stand\nmodule monitor_stand() {\n    // Base\n    translate([-20, -5, 104])\n        cube([20, 15, 2], center=true);\n    \n    // Vertical post\n    translate([-20, -5, 111])\n        cube([4, 4, 12], center=true);\n    \n    // Monitor back\n    translate([-20, -5, 118])\n        cube([20, 12, 1], center=true);\n}\n\n// Cable management hole\nmodule cable_hole() {\n    translate([20, -5, 100])\n        cylinder(h=5, r=4, center=true);\n}\n\n// Support legs (hidden internal structure)\nmodule support_legs() {\n    // Four corner legs for stability\n    translate([-55, -20, 48])\n        cube([4, 4, 96], center=true);\n    translate([55, -20, 48])\n        cube([4, 4, 96], center=true);\n    translate([-55, 20, 48])\n        cube([4, 4, 96], center=true);\n    translate([55, 20, 48])\n        cube([4, 4, 96], center=true);\n}\n\n// Logo panel on front\nmodule logo_panel() {\n    translate([0, 26, 60])\n        cube([40, 1, 20], center=true);\n}\n\n// Assemble the complete reception desk\nunion() {\n    desk_base();\n    counter_top();\n    drawers();\n    monitor_stand();\n    cable_hole();\n    support_legs();\n    logo_panel();\n}",
    "renders": true
  },
  {
    "furniture": "registration",
    "openscad_code": "// Registration Desk - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm(W) x 80mm(D) x 110mm(H)\n// Thickness: 2mm walls for 3D printability\n\nmodule registration_desk() {\n    // Main counter top\n    translate([0, 0, 100])\n        cube([120, 80, 4], center=true);\n    \n    // Front counter lip\n    translate([0, 35, 98])\n        cube([124, 4, 6], center=true);\n    \n    // Left side panel\n    translate([-58, 0, 50])\n        cube([4, 76, 100], center=true);\n    \n    // Right side panel\n    translate([58, 0, 50])\n        cube([4, 76, 100], center=true);\n    \n    // Back panel\n    translate([0, -37, 50])\n        cube([120, 2, 100], center=true);\n    \n    // Front support beam\n    translate([0, 35, 30])\n        cube([116, 4, 60], center=true);\n    \n    // Monitor stand base\n    translate([0, 0, 104])\n        cube([20, 20, 2], center=true);\n    \n    // Monitor stand pole\n    translate([0, 0, 112])\n        cylinder(h=16, r=4, $fn=16);\n    \n    // Monitor mount plate\n    translate([0, 0, 120])\n        rotate([0, 0, 0])\n            cube([24, 4, 16], center=true);\n    \n    // Keyboard tray slides\n    for(x = [-40, 40]) {\n        translate([x, 15, 80])\n            cube([4, 40, 2], center=true);\n    }\n    \n    // Keyboard tray\n    translate([0, 15, 77])\n        cube([84, 36, 2], center=true);\n    \n    // Drawer compartment\n    difference() {\n        // Drawer box\n        translate([0, 10, 85])\n            cube([40, 70, 30], center=true);\n        \n        // Drawer cavity\n        translate([0, 10, 86])\n            cube([36, 66, 28], center=true);\n    }\n    \n    // Drawer front\n    translate([0, 45, 85])\n        cube([38, 2, 28], center=true);\n    \n    // Drawer handle\n    translate([0, 46, 85])\n        rotate([90, 0, 0])\n            cylinder(h=12, r=2, $fn=16);\n    \n    // Cable management hole\n    translate([20, -35, 100])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=6, $fn=32);\n    \n    // Leg supports\n    module leg(x, y) {\n        translate([x, y, 15])\n            cube([8, 8, 30], center=true);\n    }\n    \n    // Four legs\n    leg(-55, -35);\n    leg(55, -35);\n    leg(-55, 35);\n    leg(55, 35);\n    \n    // Cross braces between legs\n    translate([0, -35, 2])\n        cube([110, 4, 4], center=true);\n    translate([0, 35, 2])\n        cube([110, 4, 4], center=true);\n    translate([-55, 0, 2])\n        cube([4, 70, 4], center=true);\n    translate(55, 0, 2)\n        cube([4, 70, 4], center=true);\n}\n\nregistration_desk();",
    "renders": true
  },
  {
    "furniture": "conference",
    "openscad_code": "// Conference table with integrated cable management and modesty panel\n// Overall dimensions: 120mm (L) x 60mm (W) x 40mm (H)\n\n$fn=32;\n\n// Main table top\nmodule tableTop() {\n    difference() {\n        // Solid top\n        translate([0, 0, 38])\n            cube([120, 60, 4], center=true);\n        \n        // Cable grommet holes (2x)\n        for (x = [-40, 40]) {\n            translate([x, 20, 40])\n                cylinder(h=5, r=4);\n            translate([x, -20, 40])\n                cylinder(h=5, r=4);\n        }\n    }\n}\n\n// Table legs - modern rectangular profile\nmodule leg() {\n    difference() {\n        // Main leg\n        cube([6, 6, 38], center=true);\n        \n        // Lightening cutouts\n        translate([0, 0, 10])\n            cube([4, 4, 30], center=true);\n    }\n}\n\n// Leg assembly with mounting brackets\nmodule legAssembly(x_pos, y_pos) {\n    translate([x_pos, y_pos, 19]) {\n        // Leg\n        leg();\n        \n        // Mounting brackets\n        translate([0, 0, 19])\n            cube([10, 2, 2], center=true);\n        translate([0, 0, -19])\n            cube([10, 2, 2], center=true);\n    }\n}\n\n// Modesty panel for privacy\nmodule modestyPanel() {\n    difference() {\n        // Main panel\n        translate([0, 0, 20])\n            cube([110, 3, 20], center=true);\n        \n        // Ventilation slots\n        for (y = [-15:10:15]) {\n            translate([0, 1.6, y])\n                cube([105, 1, 5], center=true);\n        }\n    }\n}\n\n// Support frame under table\nmodule supportFrame() {\n    // Long supports\n    for (x = [-50, 50]) {\n        translate([x, 0, 36])\n            cube([10, 56, 2], center=true);\n    }\n    \n    // Short supports\n    for (y = [-25, 25]) {\n        translate([0, y, 36])\n            cube([116, 10, 2], center=true);\n    }\n}\n\n// Cable tray under table\nmodule cableTray() {\n    difference() {\n        // Tray base\n        translate([0, 0, 30])\n            cube([100, 40, 3], center=true);\n        \n        // Cable access slots\n        for (x = [-40:20:40]) {\n            translate([x, 0, 31.5])\n                cube([15, 36, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    tableTop();\n    \n    // Support structure\n    supportFrame();\n    \n    // Modesty panel\n    modestyPanel();\n    \n    // Cable management\n    cableTray();\n    \n    // Legs at corners\n    legAssembly(55, 27);\n    legAssembly(55, -27);\n    legAssembly(-55, 27);\n    legAssembly(-55, -27);\n}",
    "renders": true
  },
  {
    "furniture": "meeting",
    "openscad_code": "// Meeting Table with 4 Chairs in realistic style\n// Overall footprint ~120mm x 120mm x 50mm\n\n$fn = 32;\n\n// Table parameters\ntable_top_w = 90;\ntable_top_d = 60;\ntable_top_t = 4;\nleg_h = 30;\nleg_w = 4;\napron_h = 3;\n\n// Chair parameters\nchair_seat_w = 30;\nchair_seat_d = 30;\nchair_seat_t = 3;\nchair_back_h = 25;\nchair_leg_h = 25;\nchair_leg_w = 3;\n\nmodule table() {\n    // Table top with rounded edges\n    translate([0, 0, leg_h + apron_h + table_top_t/2])\n        minkowski() {\n            cube([table_top_w, table_top_d, table_top_t], center=true);\n            cylinder(r=2, h=0.1, center=true);\n        }\n    \n    // Apron frame\n    difference() {\n        translate([0, 0, leg_h + apron_h/2])\n            cube([table_top_w - leg_w*2, table_top_d - leg_w*2, apron_h], center=true);\n        translate([0, 0, leg_h + apron_h/2 - 1])\n            cube([table_top_w - leg_w*2 - 4, table_top_d - leg_w*2 - 4, apron_h + 2], center=true);\n    }\n    \n    // Legs\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(table_top_w/2 - leg_w), y*(table_top_d/2 - leg_w), leg_h/2])\n                cylinder(r=leg_w/2, h=leg_h);\n}\n\nmodule chair() {\n    // Chair seat\n    translate([0, 0, chair_leg_h + chair_seat_t/2])\n        cube([chair_seat_w, chair_seat_d, chair_seat_t], center=true);\n    \n    // Chair backrest\n    translate([0, chair_seat_d/2 - 2, chair_leg_h + chair_seat_t + chair_back_h/2])\n        cube([chair_seat_w - 4, 4, chair_back_h], center=true);\n    \n    // Backrest slats\n    for (i = [-1, 0, 1])\n        translate([i*8, chair_seat_d/2, chair_leg_h + chair_seat_t + chair_back_h - 5])\n            cube([3, 4, 8], center=true);\n    \n    // Chair legs\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(chair_seat_w/2 - chair_leg_w/2), y*(chair_seat_d/2 - chair_leg_w/2), chair_leg_h/2])\n                cylinder(r=chair_leg_w/2, h=chair_leg_h);\n}\n\n// Assembly\ntable();\n\n// Chairs around table\ntranslate([table_top_w/2 + chair_seat_w/2 + 5, 0, 0])\n    chair();\ntranslate([-table_top_w/2 - chair_seat_w/2 - 5, 0, 0])\n    rotate([0, 0, 180])\n        chair();\ntranslate([0, table_top_d/2 + chair_seat_d/2 + 5, 0])\n    rotate([0, 0, 90])\n        chair();\ntranslate([0, -table_top_d/2 - chair_seat_d/2 - 5, 0])\n    rotate([0, 0, -90])\n        chair();",
    "renders": true
  },
  {
    "furniture": "boardroom",
    "openscad_code": "// Boardroom Executive Chair – realistic style, medium complexity\n// Overall height ≈ 100 mm, seat width ≈ 55 mm, depth ≈ 55 mm\n// Designed for 3D-printing: 2 mm walls, no steep overhangs, 0.2 mm clearances\n\n$fn = 30;\n\nmodule chair() {\n    // Central reference\n    translate([0, 0, 0]) {\n        union() {\n\n            /* ---------- Seat ---------- */\n            // Cushion\n            difference() {\n                translate([0, 0, 46])\n                    minkowski() {\n                        cube([56, 52, 6], center = true);\n                        sphere(3);  // soft edges\n                    }\n                // Upholstery groove pattern\n                for (i = [-20:10:20])\n                    translate([i, 0, 48])\n                        cube([2, 50, 2], center = true);\n            }\n\n            /* ---------- Backrest ---------- */\n            // Main backrest body\n            difference() {\n                translate([0, -25, 72])\n                    rotate([10, 0, 0])\n                        cube([52, 6, 50], center = true);\n                // Lumbar recess\n                translate([0, -24, 70])\n                    rotate([10, 0, 0])\n                        sphere(20);\n                // Ventilation slots (3 narrow slits)\n                for (i = [-12, 0, 12])\n                    translate([i, -25, 75])\n                        cube([2, 8, 30], center = true);\n            }\n\n            /* ---------- Armrests ---------- */\n            module arm(x) {\n                union() {\n                    // Post\n                    translate([x, 20, 38])\n                        cylinder(h = 20, r = 3);\n                    // Pad\n                    translate([x, 20, 58])\n                        cube([24, 10, 3], center = true);\n                }\n            }\n            arm(28);\n            arm(-28);\n\n            /* ---------- Base ---------- */\n            difference() {\n                translate([0, 0, 0])\n                    cylinder(h = 10, r = 25);\n                translate([0, 0, -1])\n                    cylinder(h = 12, r = 23);  // shell thickness 2 mm\n            }\n\n            /* ---------- Five-Star Legs & Casters ---------- */\n            module leg(a) {\n                rotate([0, 0, a])\n                    union() {\n                        // Leg beam\n                        translate([0, 18, 5])\n                            cube([6, 36, 6], center = true);\n                        // Caster wheel\n                        translate([0, 36, 1])\n                            rotate([90, 0, 0])\n                                cylinder(h = 6, r = 4);\n                    }\n            }\n            for (a = [0:72:359])\n                leg(a);\n\n            /* ---------- Gas Cylinder ---------- */\n            translate([0, 0, 10])\n                cylinder(h = 30, r = 5);\n            translate([0, 0, 40])\n                cylinder(h = 6, r = 10);  // seat plate\n        }\n    }\n}\n\nchair();",
    "renders": true
  },
  {
    "furniture": "training",
    "openscad_code": "// Training Chair - Realistic Medium Complexity\n// Overall dimensions: 120mm(W) x 110mm(D) x 110mm(H)\n\n// Parameters\nchair_width = 120;\nchair_depth = 110;\nchair_height = 110;\nleg_thickness = 8;\nseat_thickness = 10;\nback_height = 50;\narmrest_height = 20;\nwall_thickness = 2;\n\n// Main chair module\nmodule training_chair() {\n    // Chair legs\n    difference() {\n        union() {\n            // Front left leg\n            translate([10, 10, 0])\n                cylinder(h=chair_height - seat_thickness - 5, r=leg_thickness/2, $fn=16);\n            \n            // Front right leg\n            translate([chair_width - 10, 10, 0])\n                cylinder(h=chair_height - seat_thickness - 5, r=leg_thickness/2, $fn=16);\n            \n            // Back left leg\n            translate([10, chair_depth - 10, 0])\n                cylinder(h=chair_height - seat_thickness - 5, r=leg_thickness/2, $fn=16);\n            \n            // Back right leg\n            translate([chair_width - 10, chair_depth - 10, 0])\n                cylinder(h=chair_height - seat_thickness - 5, r=leg_thickness/2, $fn=16);\n        }\n        \n        // Remove inner material from legs for printing\n        for(x = [10, chair_width - 10])\n            for(y = [10, chair_depth - 10])\n                translate([x, y, 2])\n                    cylinder(h=chair_height - seat_thickness - 9, r=leg_thickness/2 - wall_thickness, $fn=16);\n    }\n    \n    // Seat frame\n    difference() {\n        // Outer frame\n        translate([0, 0, chair_height - seat_thickness])\n            cube([chair_width, chair_depth, seat_thickness]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, chair_height - seat_thickness + wall_thickness])\n            cube([chair_width - 2*wall_thickness, chair_depth - 2*wall_thickness, seat_thickness - wall_thickness]);\n    }\n    \n    // Seat cushion\n    translate([5, 5, chair_height - seat_thickness + 2])\n        cube([chair_width - 10, chair_depth - 10, 6]);\n    \n    // Backrest frame\n    difference() {\n        // Outer backrest\n        translate([0, chair_depth - 5, chair_height - seat_thickness])\n            cube([chair_width, 5, back_height]);\n        \n        // Inner cavity\n        translate([wall_thickness, chair_depth - 5 + wall_thickness, chair_height - seat_thickness + wall_thickness])\n            cube([chair_width - 2*wall_thickness, 5 - wall_thickness, back_height - wall_thickness]);\n    }\n    \n    // Backrest slats\n    for(i = [1:3]) {\n        translate([10 + (i-1)*30, chair_depth - 4, chair_height - seat_thickness + 5])\n            cube([25, 3, back_height - 10]);\n    }\n    \n    // Armrest supports\n    translate([5, chair_depth/2, chair_height - seat_thickness + 5])\n        cube([5, 5, armrest_height]);\n    \n    translate([chair_width - 10, chair_depth/2, chair_height - seat_thickness + 5])\n        cube([5, 5, armrest_height]);\n    \n    // Armrests\n    translate([0, chair_depth/2 - 15, chair_height - seat_thickness + 5 + armrest_height])\n        cube([15, 30, 5]);\n    \n    translate([chair_width - 15, chair_depth/2 - 15, chair_height - seat_thickness + 5 + armrest_height])\n        cube([15, 30, 5]);\n    \n    // Support bars between legs\n    translate([10, 10, chair_height/3])\n        cube([chair_width - 20, leg_thickness, leg_thickness]);\n    \n    translate([10, chair_depth - 10 - leg_thickness, chair_height/3])\n        cube([chair_width - 20, leg_thickness, leg_thickness]);\n}\n\n// Render the chair\ntraining_chair();",
    "renders": true
  },
  {
    "furniture": "seminar",
    "openscad_code": "// Seminar Table with Integrated Cable Management\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\ntable_width = 120;\ntable_depth = 80;\ntable_height = 75;\nwall_thickness = 2;\n\n// Top surface\nmodule table_top() {\n    difference() {\n        // Main top\n        cube([table_width, table_depth, 4]);\n        \n        // Cable grommet\n        translate([table_width/2 - 15, table_depth/2 - 15, -0.1])\n            cylinder(h=4.2, r=8);\n    }\n}\n\n// Cable management trough\nmodule cable_trough() {\n    translate([table_width/2 - 25, 0, 0])\n        difference() {\n            // Trough body\n            cube([50, table_depth/4, 6]);\n            \n            // Cable recess\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([50 - 2*wall_thickness, table_depth/4 - 2*wall_thickness, 6]);\n        }\n}\n\n// Leg structure\nmodule leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0])\n        difference() {\n            // Main leg\n            cube([6, 6, table_height - 4]);\n            \n            // Chamfer at bottom\n            translate([0, 0, -0.1])\n                cube([6, 6, 2]);\n            \n            // Cable routing hole\n            translate([3, 3, 15])\n                rotate([0, 90, 0])\n                    cylinder(h=6, r=3);\n        }\n}\n\n// Support beam\nmodule support_beam(x_pos, y_pos, length, angle) {\n    translate([x_pos, y_pos, table_height - 20])\n        rotate([0, 0, angle])\n            cube([length, 4, 4]);\n}\n\n// Leveling feet\nmodule foot() {\n    difference() {\n        // Main foot\n        cylinder(h=4, r=4);\n        \n        // Threaded insert hole\n        cylinder(h=4.5, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, table_height - 4])\n        table_top();\n    \n    // Cable management\n    translate([0, 0, table_height - 10])\n        cable_trough();\n    \n    // Legs at corners\n    for (x = [4, table_width - 10]) {\n        for (y = [4, table_depth - 10]) {\n            leg(x, y);\n            \n            // Leveling feet\n            translate([x + 3, y + 3, -4])\n                foot();\n        }\n    }\n    \n    // Support structure\n    support_beam(7, 7, table_width - 14, 0);\n    support_beam(7, table_depth - 11, table_width - 14, 0);\n    support_beam(7, 7, table_depth - 14, 90);\n    support_beam(table_width - 11, 7, table_depth - 14, 90);\n}",
    "renders": true
  },
  {
    "furniture": "lecture",
    "openscad_code": "// Lecture Chair with Tablet Arm - Realistic Style, Medium Complexity\n// Overall dimensions: 110mm tall x 120mm deep x 70mm wide\n\n// Chair seat and backrest\nmodule chair_frame() {\n    // Seat frame\n    difference() {\n        union() {\n            // Seat platform\n            translate([0, 30, 40]) cube([60, 50, 4], center=true);\n            // Backrest support\n            translate([-25, 10, 70]) cube([4, 45, 60], center=true);\n            translate([25, 10, 70]) cube([4, 45, 60], center=true);\n            // Backrest panel\n            translate([0, -12, 75]) cube([54, 2, 50], center=true);\n        }\n        // Cushion recess\n        translate([0, 30, 42]) cube([55, 45, 2], center=true);\n    }\n    \n    // Backrest cushion\n    translate([0, -12, 75]) cube([52, 4, 48], center=true);\n    \n    // Seat cushion\n    translate([0, 30, 45]) cube([55, 45, 6], center=true);\n}\n\n// Chair legs with front crossbar\nmodule chair_legs() {\n    // Four legs\n    for(x = [-25, 25]) {\n        for(y = [5, 55]) {\n            translate([x, y, 20]) cylinder(h=40, d=4, $fn=8);\n        }\n    }\n    \n    // Cross support between front legs\n    translate([0, 5, 5]) cube([54, 4, 10], center=true);\n}\n\n// Tablet arm assembly\nmodule tablet_arm() {\n    // Main support post\n    translate([35, 25, 0]) cylinder(h=75, d=6, $fn=10);\n    \n    // Pivot joint\n    translate([35, 25, 75]) sphere(d=8, $fn=12);\n    \n    // Tablet surface\n    translate([35, 0, 80]) rotate([0, 0, 0]) \n        cube([40, 45, 3], center=true);\n    \n    // Tablet lip\n    translate([35, 22, 78]) cube([38, 4, 1], center=true);\n    \n    // Support brace\n    translate([35, 11, 65]) rotate([45, 0, 0])\n        cube([3, 20, 3], center=true);\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    chair_legs();\n    tablet_arm();\n}",
    "renders": true
  },
  {
    "furniture": "classroom",
    "openscad_code": "// Classroom Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 50mm seat height, 90mm total height, 50mm width, 45mm depth\n\nmodule chair_leg(x, y) {\n    // Chair leg with slight taper for realism\n    translate([x, y, 0])\n    cylinder(h = 50, r1 = 3, r2 = 2.5, $fn = 16);\n}\n\nmodule back_slats() {\n    // Vertical backrest slats\n    for (i = [-1:1]) {\n        translate([i * 12.5, -20, 60])\n        cube([5, 2, 30]);\n    }\n}\n\nmodule seat_surface() {\n    // Seat with rounded edges and slight cushion contour\n    difference() {\n        // Main seat block\n        translate([0, 0, 50])\n        cube([45, 45, 5], center = true);\n        \n        // Rounded edges\n        translate([0, 0, 48])\n        cube([41, 41, 5], center = true);\n    }\n    \n    // Seat cushion detail\n    translate([0, 0, 56])\n    cube([43, 43, 2], center = true);\n}\n\nmodule backrest_frame() {\n    // Backrest outer frame\n    // Top horizontal bar\n    translate([0, -20, 75])\n    cube([50, 3, 4], center = true);\n    \n    // Side vertical supports\n    translate([22.5, -20, 60])\n    cube([3, 3, 30], center = true);\n    \n    translate([-22.5, -20, 60])\n    cube([3, 3, 30], center = true);\n}\n\nmodule support_braces() {\n    // Cross braces between legs\n    // Front-back braces\n    translate([0, 20, 25])\n    cube([38, 2, 2], center = true);\n    \n    translate([0, -20, 25])\n    cube([38, 2, 2], center = true);\n    \n    // Side braces\n    translate([22.5, 0, 25])\n    cube([2, 38, 2], center = true);\n    \n    translate([-22.5, 0, 25])\n    cube([2, 38, 2], center = true);\n}\n\n// Main chair assembly\nunion() {\n    // Four legs\n    chair_leg(20, 20);\n    chair_leg(-20, 20);\n    chair_leg(20, -20);\n    chair_leg(-20, -20);\n    \n    // Seat\n    seat_surface();\n    \n    // Backrest assembly\n    union() {\n        backrest_frame();\n        back_slats();\n    }\n    \n    // Support structure\n    support_braces();\n}",
    "renders": true
  },
  {
    "furniture": "laboratory",
    "openscad_code": "// Laboratory Microscope Table with Storage\n// Dimensions: 120mm W x 80mm D x 100mm H\n// Wall thickness: 2mm throughout\n\n// Main parameters\ntable_width = 120;\ntable_depth = 80;\ntable_height = 100;\nwall_thickness = 2;\n\n// Main table structure\nmodule table_structure() {\n    // Table top with raised edges\n    difference() {\n        // Solid top\n        translate([0, 0, table_height-wall_thickness])\n            cube([table_width, table_depth, wall_thickness], center=true);\n        \n        // Cable management hole\n        translate([0, -20, table_height-wall_thickness])\n            cylinder(h=wall_thickness+1, r=8, center=true);\n    }\n    \n    // Raised edge around top\n    for(x=[-1, 1]) {\n        translate([x*table_width/2, 0, table_height-wall_thickness/2])\n            cube([wall_thickness, table_depth, wall_thickness*2], center=true);\n    }\n    for(y=[-1, 1]) {\n        translate([0, y*table_depth/2, table_height-wall_thickness/2])\n            cube([table_width, wall_thickness, wall_thickness*2], center=true);\n    }\n}\n\n// Storage cabinet body\nmodule cabinet_body() {\n    // Main cabinet box\n    difference() {\n        // Outer shell\n        translate([0, 0, (table_height-wall_thickness)/2])\n            cube([table_width-20, table_depth-wall_thickness, table_height-wall_thickness], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness/2])\n            cube([table_width-20-wall_thickness*2, table_depth-wall_thickness*3, table_height-wall_thickness*2], center=true);\n    }\n    \n    // Cabinet door\n    translate([table_width/2-10-wall_thickness/2, 0, table_height/2-10])\n        cube([wall_thickness, table_depth-wall_thickness*2, table_height/2]);\n}\n\n// Drawer module\nmodule drawer(width, height, depth, y_offset) {\n    // Drawer front\n    translate([0, y_offset, height/2])\n        cube([width, wall_thickness*2, height], center=true);\n    \n    // Drawer body\n    difference() {\n        translate([0, y_offset-depth/2, height/2])\n            cube([width-wall_thickness, depth-wall_thickness, height-wall_thickness], center=true);\n        \n        // Handle cutout\n        translate([0, y_offset-depth+wall_thickness, height/2])\n            cube([width/2, wall_thickness*2, height/3], center=true);\n    }\n    \n    // Drawer handle\n    translate([0, y_offset-depth-wall_thickness, height/2])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness*3, r=wall_thickness, center=true);\n}\n\n// Adjustable shelf system\nmodule shelf_system() {\n    // Shelf peg holes (4x4 grid)\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            for(z=[0:3]) {\n                translate([x*(table_width/2-15), y*(table_depth/2-10), 20+z*20])\n                    cylinder(h=wall_thickness, r=1.5, center=true);\n            }\n        }\n    }\n    \n    // Removable shelf\n    translate([0, 0, 45])\n        cube([table_width-30, table_depth-20, wall_thickness], center=true);\n}\n\n// Structural legs\nmodule legs() {\n    leg_size = 5;\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            translate([x*(table_width/2-leg_size), y*(table_depth/2-leg_size), table_height/2-wall_thickness])\n                cube([leg_size*2, leg_size*2, table_height], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main table components\n    table_structure();\n    cabinet_body();\n    shelf_system();\n    legs();\n    \n    // Two drawers above cabinet\n    drawer(table_width-30, 20, 25, table_depth/2-wall_thickness);\n    drawer(table_width-30, 20, 25, table_depth/2-wall_thickness-30);\n}\n\n// Leveling feet\nfor(x=[-1, 1]) {\n    for(y=[-1, 1]) {\n        translate([x*(table_width/2-10), y*(table_depth/2-10), 0])\n            cylinder(h=5, r=3, center=false);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "examination",
    "openscad_code": "// Examination Chair - Realistic Medium Complexity\n// Overall size: ~100mm height, 80mm width, 90mm depth\n\n// Chair dimensions\nseat_width = 80;\nseat_depth = 80;\nseat_thickness = 8;\nbackrest_height = 100;\nbackrest_thickness = 8;\nleg_height = 50;\nleg_size = 6;\n\n// Cushion dimensions\ncushion_height = 15;\ncushion_radius = 5;\n\n// Armrest dimensions\narmrest_height = 60;\narmrest_width = 12;\narmrest_depth = 45;\n\n// Support bar dimensions\nsupport_size = 4;\n\n// Main seat platform\nmodule seat_platform() {\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Cushion recess\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width - 8, seat_depth - 8, seat_thickness + 1], center=true);\n    }\n}\n\n// Cushion with rounded edges\nmodule seat_cushion() {\n    translate([0, 0, leg_height + seat_thickness + cushion_height/2])\n    minkowski() {\n        cube([seat_width - 10, seat_depth - 10, cushion_height - cushion_radius], center=true);\n        sphere(r=cushion_radius);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2 + backrest_thickness/2, leg_height + seat_thickness + backrest_height/2])\n            cube([seat_width - 20, backrest_thickness, backrest_height], center=true);\n        \n        // Lumbar curve\n        translate([0, -seat_depth/2 + backrest_thickness, leg_height + seat_thickness + backrest_height/3])\n            cylinder(h=backrest_thickness + 2, r=20, center=true);\n    }\n}\n\n// Chair leg with tapered design\nmodule chair_leg(x_pos, y_pos) {\n    // Top connection block\n    translate([x_pos, y_pos, leg_height - 2])\n        cube([leg_size + 4, leg_size + 4, 4], center=true);\n    \n    // Main leg\n    translate([x_pos, y_pos, leg_height/2])\n        cylinder(h=leg_height - 4, r1=leg_size/2, r2=leg_size/2 + 1, center=true);\n    \n    // Foot pad\n    translate([x_pos, y_pos, 2])\n        cube([leg_size + 2, leg_size + 2, 4], center=true);\n}\n\n// Armrest assembly\nmodule armrest(x_pos) {\n    // Support post\n    translate([x_pos, seat_depth/2 - armrest_depth/2, armrest_height/2])\n        cylinder(h=armrest_height, r=armrest_width/2 - 2, center=true);\n    \n    // Armrest pad\n    translate([x_pos, seat_depth/2 - armrest_depth/2, armrest_height + 3])\n        cube([armrest_width, armrest_depth, 6], center=true);\n    \n    // Connection to backrest\n    translate([x_pos, -seat_depth/2 + backrest_thickness + armrest_width/2, leg_height + seat_thickness + backrest_height/3])\n        cube([armrest_width, backrest_thickness + armrest_width, 6], center=true);\n}\n\n// Cross support bars\nmodule support_bar() {\n    // Front support\n    translate([0, seat_depth/2 - leg_size - 2, leg_height/2])\n        cube([seat_width - leg_size*2 - 4, support_size, leg_height - 4], center=true);\n    \n    // Side supports\n    translate([seat_width/2 - leg_size - 2, 0, leg_height/2])\n        cube([support_size, seat_depth - leg_size*2 - 4, leg_height - 4], center=true);\n    translate([-seat_width/2 + leg_size + 2, 0, leg_height/2])\n        cube([support_size, seat_depth - leg_size*2 - 4, leg_height - 4], center=true);\n}\n\n// Assembly\nunion() {\n    // Seat components\n    seat_platform();\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Legs\n    chair_leg(seat_width/2 - leg_size - 5, seat_depth/2 - leg_size - 5);\n    chair_leg(-seat_width/2 + leg_size + 5, seat_depth/2 - leg_size - 5);\n    chair_leg(seat_width/2 - leg_size - 5, -seat_depth/2 + leg_size + 5);\n    chair_leg(-seat_width/2 + leg_size + 5, -seat_depth/2 + leg_size + 5);\n    \n    // Armrests\n    armrest(seat_width/2 - armrest_width/2 - 5);\n    armrest(-seat_width/2 + armrest_width/2 + 5);\n    \n    // Support structure\n    support_bar();\n}",
    "renders": true
  },
  {
    "furniture": "operating",
    "openscad_code": "// Realistic Medium-Complexity Office Chair (Operator Chair)\n// Total height ~110 mm, seat width ~70 mm, printable in parts\n\n$fn = 40;          // Smooth curves\nwall = 2;          // 3D-printable wall thickness\n\n// Main assembly\nunion() {\n    // 5-star base\n    base_assembly();\n\n    // Gas cylinder\n    translate([0,0,15])\n        cylinder(h = 30, d1 = 10, d2 = 8);\n\n    // Seat mechanism plate\n    translate([0,0,45])\n        mechanism_plate();\n\n    // Seat cushion\n    translate([0,0,47])\n        rotate([0,0,0])\n        seat_cushion();\n\n    // Backrest post\n    translate([0,-35,47])\n        cylinder(h = 50, d = 8);\n\n    // Backrest\n    translate([0,-35,97])\n        backrest();\n}\n\nmodule base_assembly() {\n    union() {\n        // Central hub\n        cylinder(h = 15, d = 20);\n\n        // 5 spokes + wheels\n        for (a = [0:72:359]) {\n            rotate([0,0,a])\n            translate([0,0,7.5])\n            union() {\n                // Spoke\n                rotate([90,0,0])\n                    cylinder(h = 35, d = 6);\n\n                // Wheel\n                translate([35,0,-7.5])\n                    rotate([90,0,0])\n                    rotate([0,90,0])\n                    wheel();\n            }\n        }\n    }\n}\n\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire\n            rotate_extrude()\n                translate([4,0,0])\n                    circle(r = 3);\n\n            // Hub\n            cylinder(h = 6, d = 6);\n        }\n\n        // Axle hole\n        cylinder(h = 10, d = 2, center = true);\n    }\n}\n\nmodule mechanism_plate() {\n    difference() {\n        // Plate body\n        cube([60, 50, 4], center = true);\n\n        // Mounting holes\n        for (p = [[-20,-15], [20,-15], [20,15], [-20,15]])\n            translate([p[0], p[1], -1])\n                cylinder(h = 6, d = 3);\n    }\n}\n\nmodule seat_cushion() {\n    union() {\n        // Main cushion\n        difference() {\n            minkowski() {\n                cube([70, 65, 10], center = true);\n                sphere(r = 5);\n            }\n            // Hollow for weight reduction\n            translate([0,0,2])\n                cube([60, 55, 10], center = true);\n        }\n\n        // Side handles\n        for (y = [-25, 25])\n            translate([0, y, 0])\n                rotate([0,90,0])\n                    cylinder(h = 10, d = 8);\n    }\n}\n\nmodule backrest() {\n    union() {\n        // Frame outline\n        difference() {\n            // Outer shell\n            minkowski() {\n                cube([65, 5, 55], center = true);\n                sphere(r = 2);\n            }\n            // Inner cutout\n            translate([0,0,5])\n                cube([55, 7, 45], center = true);\n        }\n\n        // Mesh pattern (simplified)\n        for (i = [-2:1:2])\n            translate([0,0,i*10+5])\n                cube([55, 2, 2], center = true);\n\n        // Lumbar support bump\n        translate([0,-3, -10])\n            scale([1, 0.3, 0.8])\n                sphere(r = 15);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "surgical",
    "openscad_code": "// Surgical Stool for Operating Theatre\n// Realistic style, medium complexity\n\n$fn = 50;\n\nmodule stool_base() {\n    // Central column base\n    cylinder(h=8, r1=25, r2=20);\n    \n    // Five star base legs\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n        translate([20,0,0])\n        rotate([90,0,0])\n        cylinder(h=50, r1=5, r2=4);\n    }\n    \n    // Wheels at leg ends\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n        translate([45,0,-48])\n        sphere(r=4);\n    }\n}\n\nmodule gas_spring() {\n    // Outer cylinder\n    cylinder(h=35, r=6);\n    \n    // Inner rod\n    translate([0,0,35])\n    cylinder(h=20, r=3);\n}\n\nmodule seat_cushion() {\n    // Main cushion\n    translate([0,0,-8])\n    scale([1,1.2,0.4])\n    sphere(r=25);\n    \n    // Seam detail\n    rotate_extrude()\n    translate([22,0,0])\n    circle(r=1);\n}\n\nmodule backrest() {\n    // Backrest post\n    translate([0,20,0])\n    cylinder(h=25, r=3);\n    \n    // Backrest support arm\n    translate([0,20,25])\n    rotate([90,0,0])\n    cylinder(h=30, r=2.5);\n    \n    // Backrest pad\n    translate([0,20,25])\n    rotate([90,0,0])\n    scale([1,0.8,0.3])\n    sphere(r=20);\n}\n\nmodule footring() {\n    // Ring support\n    translate([0,0,15])\n    cylinder(h=3, r=18);\n    \n    // Ring surface\n    difference() {\n        translate([0,0,15])\n        cylinder(h=3, r=20);\n        \n        translate([0,0,14.5])\n        cylinder(h=4, r=15);\n    }\n}\n\n// Assembly\nunion() {\n    // Base with legs and wheels\n    stool_base();\n    \n    // Gas spring mechanism\n    translate([0,0,8])\n    gas_spring();\n    \n    // Foot ring\n    footring();\n    \n    // Seat assembly\n    translate([0,0,55])\n    rotate([0,0,0])\n    union() {\n        seat_cushion();\n        backrest();\n    }\n}",
    "renders": true
  },
  {
    "furniture": "specimen",
    "openscad_code": "// Mid-century modern lounge chair in realistic style\n// Overall dimensions: 110mm W x 100mm D x 90mm H\n\n// Global parameters\nchair_width = 110;\nchair_depth = 100;\nchair_height = 90;\n\n// Leg dimensions\nleg_thickness = 5;\nleg_height = 45;\n\n// Seat dimensions\nseat_thickness = 8;\nseat_offset = leg_height;\n\n// Backrest dimensions\nbackrest_height = 45;\nbackrest_thickness = 6;\n\n// Armrest dimensions\narmrest_width = 8;\narmrest_height = 20;\n\nmodule chair_leg(x_pos, z_pos) {\n    translate([x_pos, 0, z_pos]) {\n        // Front leg\n        cube([leg_thickness, leg_thickness, leg_height], center=true);\n        \n        // Angled support\n        rotate([0, 45, 0])\n        translate([leg_thickness/2, 0, -leg_height/2])\n        cube([leg_thickness*1.5, leg_thickness, leg_thickness*2], center=true);\n    }\n}\n\nmodule seat_cushion() {\n    translate([0, 0, seat_offset + seat_thickness/2]) {\n        // Main seat\n        cube([chair_width - 20, chair_depth - 15, seat_thickness], center=true);\n        \n        // Rounded edge detail\n        translate([0, 0, seat_thickness/2 - 1])\n        cube([chair_width - 20, chair_depth - 15, 2], center=true);\n    }\n}\n\nmodule backrest() {\n    translate([0, -chair_depth/2 + backrest_thickness/2, seat_offset + backrest_height/2]) {\n        // Main backrest panel\n        cube([chair_width - 20, backrest_thickness, backrest_height], center=true);\n        \n        // Lumbar support curve\n        translate([0, backrest_thickness/2 + 0.5, -5])\n        cube([chair_width - 30, 1, 10], center=true);\n    }\n}\n\nmodule armrest() {\n    translate([chair_width/2 - armrest_width/2 - 5, 0, seat_offset + armrest_height/2]) {\n        // Vertical support\n        cube([armrest_width, armrest_width, armrest_height], center=true);\n        \n        // Horizontal arm pad\n        translate([0, chair_depth/4 - armrest_width, armrest_height/2 - 2])\n        cube([armrest_width, chair_depth/2, 4], center=true);\n    }\n}\n\n// Main chair assembly\nunion() {\n    // Four legs\n    chair_leg(-chair_width/2 + leg_thickness, 0);\n    chair_leg(chair_width/2 - leg_thickness, 0);\n    chair_leg(-chair_width/2 + leg_thickness, chair_depth - leg_thickness);\n    chair_leg(chair_width/2 - leg_thickness, chair_depth - leg_thickness);\n    \n    // Seat\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest();\n    mirror([1, 0, 0]) armrest();\n    \n    // Cross support bars\n    translate([0, chair_depth/2 - leg_thickness/2 - 15, leg_height/2])\n    cube([chair_width - 25, leg_thickness, leg_thickness], center=true);\n    \n    translate([0, -chair_depth/2 + leg_thickness/2 + 15, leg_height/2])\n    cube([chair_width - 25, leg_thickness, leg_thickness], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "dissection",
    "openscad_code": "// Dissection Chair (realistic style, medium complexity)\n// Overall size: 100mm width x 100mm depth x 110mm height\n\n// Parameters\nseat_height = 45;\nseat_thickness = 4;\nback_height = 65;\nleg_height = seat_height - seat_thickness;\nleg_size = 4;\nback_thickness = 3;\narmrest_height = 20;\narmrest_width = 8;\n\n// Main chair assembly\nmodule chair() {\n    // Seat assembly\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height])\n            cube([100, 100, seat_thickness], center=true);\n        \n        // Cut line 1 - horizontal cut through seat\n        translate([0, 0, leg_height + seat_thickness/2 + 0.1])\n            cube([110, 110, 0.2], center=true);\n        \n        // Cut line 2 - vertical cut front to back\n        translate([0, 0, leg_height + seat_thickness/2])\n            rotate([90, 0, 0])\n                cube([110, 0.2, seat_thickness], center=true);\n    }\n    \n    // Backrest assembly\n    difference() {\n        // Main backrest\n        translate([0, -35, leg_height + back_height/2 + seat_thickness])\n            cube([90, back_thickness, back_height], center=true);\n        \n        // Cut line 3 - vertical cut through backrest\n        translate([0, -35, leg_height + back_height/2 + seat_thickness])\n            rotate([0, 90, 0])\n                cube([0.2, back_thickness, back_height], center=true);\n        \n        // Cut line 4 - horizontal cut through backrest\n        translate([0, -35, leg_height + seat_thickness + back_height/2 + 0.1])\n            cube([90, back_thickness + 10, 0.2], center=true);\n    }\n    \n    // Leg assemblies - 4 legs\n    for(x = [-45, 45])\n        for(y = [-45, 45]) {\n            translate([x, y, leg_height/2])\n                difference() {\n                    cube([leg_size, leg_size, leg_height], center=true);\n                    \n                    // Diagonal cut through legs\n                    rotate([45, 0, 0])\n                        translate([0, 0, -leg_height])\n                            cube([leg_size*2, 0.2, leg_height*2], center=true);\n                }\n        }\n    \n    // Armrest assemblies\n    difference() {\n        // Left armrest\n        translate([-50, 0, leg_height + seat_thickness + armrest_height/2])\n            cube([armrest_width, 80, armrest_height], center=true);\n            \n        // Cut line 5 - armrest separation\n        translate([-50, 0, leg_height + seat_thickness + armrest_height/2])\n            rotate([0, 90, 0])\n                cube([0.2, 80, armrest_height], center=true);\n    }\n    \n    difference() {\n        // Right armrest\n        translate([50, 0, leg_height + seat_thickness + armrest_height/2])\n            cube([armrest_width, 80, armrest_height], center=true);\n            \n        // Cut line 6 - armrest separation\n        translate([50, 0, leg_height + seat_thickness + armrest_height/2])\n            rotate([0, 90, 0])\n                cube([0.2, 80, armrest_height], center=true);\n    }\n    \n    // Support bars between legs\n    translate([0, -45, 25])\n        difference() {\n            cube([90, leg_size, leg_size], center=true);\n            translate([0, 0, leg_size/2 + 0.1])\n                rotate([90, 0, 0])\n                    cube([90, 0.2, leg_size], center=true);\n        }\n    \n    translate([0, 45, 25])\n        difference() {\n            cube([90, leg_size, leg_size], center=true);\n            translate([0, 0, leg_size/2 + 0.1])\n                rotate([90, 0, 0])\n                    cube([90, 0.2, leg_size], center=true);\n        }\n}\n\n// Render the chair\nchair();",
    "renders": true
  },
  {
    "furniture": "microscope",
    "openscad_code": "// Microscope Furniture - Realistic Style (Medium Complexity)\n// Dimensions: ~100mm tall, designed for 3D printing\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main parameters\nbase_diameter = 40;\ncolumn_height = 45;\narm_thickness = 8;\nstage_size = 25;\nhead_height = 30;\n\n// Base with three legs\nmodule microscope_base() {\n    // Central base disk\n    cylinder(h=5, d=base_diameter, center=true);\n    \n    // Three support legs\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([base_diameter/2 - 8, 0, -5])\n                cube([16, 8, 10], center=true);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, -7])\n        cylinder(h=3, d=base_diameter + 12, center=true);\n}\n\n// Main column/post\nmodule column() {\n    translate([0, 0, column_height/2 + 2.5])\n        cylinder(h=column_height, d=8, center=true);\n    \n    // Height adjustment rack detail\n    for (i = [0:3:column_height - 10]) {\n        translate([0, 4, i + 7.5])\n            cube([8, 1, 2], center=true);\n    }\n}\n\n// Curved arm with joints\nmodule microscope_arm() {\n    // Main curved arm\n    translate([0, -10, column_height + 2.5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=30, d=arm_thickness, center=true);\n                translate([0, 0, -15])\n                    cube([30, 30, 30], center=true);\n            }\n    \n    // Joint connection to head\n    translate([0, -25, column_height + 2.5])\n        rotate([90, 0, 0])\n            cylinder(h=12, d=10, center=true);\n}\n\n// Stage platform with adjustment knobs\nmodule stage() {\n    // Main stage platform\n    translate([0, -5, column_height - 15])\n        cube([stage_size, stage_size, 3], center=true);\n    \n    // Stage clips\n    for (pos = [-1, 1]) {\n        translate([pos * (stage_size/2 - 3), pos * (stage_size/2 - 3), column_height - 15.5])\n            cube([6, 6, 4], center=true);\n    }\n    \n    // Adjustment knobs\n    translate([stage_size/2 + 8, 0, column_height - 15])\n        rotate([90, 0, 0])\n            cylinder(h=6, d=8, center=true);\n    translate([-stage_size/2 - 8, 0, column_height - 15])\n        rotate([90, 0, 0])\n            cylinder(h=6, d=8, center=true);\n}\n\n// Microscope head with eyepiece\nmodule microscope_head() {\n    // Head body\n    translate([0, -25, column_height + head_height/2 + 8])\n        rotate([90, 0, 0])\n            cylinder(h=head_height, d=15, center=true);\n    \n    // Eyepiece tube\n    translate([0, -25, column_height + head_height + 8])\n        cylinder(h=20, d=12, center=true);\n    \n    // Objective turret\n    translate([0, -25, column_height + 8])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=20, center=true);\n    \n    // Objective lenses\n    for (i = [0:90:269]) {\n        translate([0, -25, column_height + 4])\n            rotate([90, 0, i])\n                translate([10, 0, 0])\n                    cylinder(h=15, d=6, center=true);\n    }\n    \n    // Fine focus knob\n    translate([0, -20, column_height + 15])\n        rotate([0, 90, 0])\n            cylinder(h=8, d=10, center=true);\n}\n\n// Coarse focus mechanism\nmodule focus_mechanism() {\n    // Focus knobs on both sides\n    translate([0, 4, column_height - 10])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=12, center=true);\n    translate([0, -14, column_height - 10])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=12, center=true);\n}\n\n// Assembly\nunion() {\n    microscope_base();\n    column();\n    microscope_arm();\n    stage();\n    microscope_head();\n    focus_mechanism();\n}",
    "renders": true
  },
  {
    "furniture": "projector",
    "openscad_code": "// Projector TV Stand with Storage\n// Realistic medium-complexity furniture for 3D printing\n\n// Overall dimensions: 120mm x 40mm x 60mm\n\n$fn = 32;\nwall_thickness = 2;\nshelf_thickness = 3;\n\n// Main body module\nmodule tv_stand() {\n    // Base platform\n    difference() {\n        // Main body\n        cube([120, 40, 60]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n        cube([120 - 2*wall_thickness, 40 - 2*wall_thickness, 60 - 2*wall_thickness]);\n    }\n    \n    // Top surface for projector\n    translate([0, 0, 60])\n    cube([120, 40, wall_thickness]);\n    \n    // Middle shelf\n    translate([wall_thickness, wall_thickness, 25])\n    cube([120 - 2*wall_thickness, 40 - 2*wall_thickness, shelf_thickness]);\n    \n    // Cable management hole - back\n    translate([60 - 10, 40 - wall_thickness, 45])\n    rotate([90, 0, 0])\n    cylinder(h=wall_thickness, r=5);\n}\n\n// Legs module\nmodule legs() {\n    leg_width = 3;\n    leg_height = 80;\n    \n    // Front left leg\n    translate([-leg_width, -leg_width, 0])\n    cube([leg_width, leg_width, leg_height]);\n    \n    // Front right leg\n    translate([120, -leg_width, 0])\n    cube([leg_width, leg_width, leg_height]);\n    \n    // Back left leg\n    translate([-leg_width, 40, 0])\n    cube([leg_width, leg_width, leg_height]);\n    \n    // Back right leg\n    translate([120, 40, 0])\n    cube([leg_width, leg_width, leg_height]);\n}\n\n// Back panel with ventilation slots\nmodule back_panel() {\n    panel_height = 60;\n    slot_width = 2;\n    slot_height = 40;\n    num_slots = 8;\n    \n    difference() {\n        // Solid back panel\n        translate([-wall_thickness, 40, 0])\n        cube([wall_thickness, 40, panel_height]);\n        \n        // Ventilation slots\n        for(i = [0:num_slots-1]) {\n            slot_x = -wall_thickness;\n            slot_y = 40 + (i * (40 / num_slots)) + 1;\n            slot_z = 10;\n            translate([slot_x, slot_y, slot_z])\n            cube([wall_thickness, slot_width, slot_height]);\n        }\n    }\n}\n\n// Drawer module\nmodule drawer() {\n    drawer_width = 35;\n    drawer_height = 20;\n    drawer_depth = 36;\n    \n    // Drawer box\n    difference() {\n        translate([10, 2, 5])\n        cube([drawer_width, drawer_depth, drawer_height]);\n        \n        // Hollow drawer\n        translate([10 + wall_thickness, 2 + wall_thickness, 5 + wall_thickness])\n        cube([drawer_width - 2*wall_thickness, drawer_depth - wall_thickness, drawer_height - 2*wall_thickness]);\n    }\n    \n    // Drawer front\n    translate([10, 2 - 0.1, 5])\n    cube([drawer_width, 2, drawer_height]);\n    \n    // Drawer handle\n    translate([10 + drawer_width/2 - 10, 2 - 1, 5 + drawer_height/2])\n    cube([20, 1, 4]);\n}\n\n// Assembly\nunion() {\n    // Main furniture pieces\n    tv_stand();\n    legs();\n    back_panel();\n    drawer();\n    \n    // Additional support beams\n    // Front support\n    translate([-leg_width, -leg_width, 40])\n    cube([120 + 2*leg_width, leg_width, wall_thickness]);\n    \n    // Side support left\n    translate([-leg_width, -leg_width, 40])\n    cube([leg_width, 40 + 2*leg_width, wall_thickness]);\n    \n    // Side support right\n    translate([120, -leg_width, 40])\n    cube([leg_width, 40 + 2*leg_width, wall_thickness]);\n}",
    "renders": true
  },
  {
    "furniture": "multimedia",
    "openscad_code": "// Multimedia cabinet - TV stand with open shelves and cable management\n// Overall size: 120mm W x 40mm D x 60mm H (good for 3D printing)\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule cabinet_body() {\n    difference() {\n        // Main frame\n        cube([120, 40, 60]);\n        \n        // Hollow out interior\n        translate([2, 2, 2])\n            cube([116, 36, 56]);\n    }\n}\n\n// Shelves\nmodule shelves() {\n    for (i = [0:1]) {\n        translate([0, 0, 15 + i * 25])\n            cube([120, 40, 2]);\n    }\n}\n\n// Back panel with cable holes\nmodule back_panel() {\n    difference() {\n        // Solid back\n        translate([-1, 0, 0])\n            cube([2, 40, 60]);\n        \n        // Cable grommets\n        for (i = [0:1]) {\n            translate([0, 20, 20 + i * 20])\n                cylinder(h = 3, d = 10);\n        }\n    }\n}\n\n// Legs - four supporting legs\nmodule legs() {\n    for (x = [5, 115]) {\n        for (z = [5, 35]) {\n            translate([x, -5, z])\n                cylinder(h = 10, d = 6);\n        }\n    }\n}\n\n// TV support lip at back\nmodule tv_lip() {\n    translate([0, 38, 50])\n        cube([120, 2, 10]);\n}\n\n// Ventilation holes\nmodule vents() {\n    for (x = [10:20:110]) {\n        translate([x, 39, 30])\n            cube([10, 1, 5]);\n    }\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    shelves();\n    back_panel();\n    legs();\n    tv_lip();\n    vents();\n}",
    "renders": true
  },
  {
    "furniture": "gaming",
    "openscad_code": "// Gaming chair - realistic style, medium complexity\n// Overall dimensions: 55mm width x 60mm depth x 90mm height\n\n$fn = 32;\n\n// Main seat cushion\nmodule seat() {\n    // Base seat\n    translate([0, 0, 35])\n    difference() {\n        // Main cushion body\n        cube([55, 50, 8], center = true);\n        \n        // Rounded edges\n        translate([25, 0, 0])\n        cylinder(h = 10, r = 3, $fn = 16);\n        translate([-25, 0, 0])\n        cylinder(h = 10, r = 3, $fn = 16);\n    }\n    \n    // Seat edge piping\n    translate([0, 0, 39])\n    cube([57, 52, 1], center = true);\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    translate([0, -20, 80])\n    rotate([15, 0, 0])\n    union() {\n        // Main backrest\n        difference() {\n            cube([50, 45, 45], center = true);\n            // Top curve\n            translate([0, 0, 22.5])\n            cylinder(h = 50, r = 22.5, $fn = 32);\n        }\n        \n        // Headrest\n        translate([0, 0, 40])\n        cube([35, 30, 15], center = true);\n    }\n}\n\n// Armrest support structure\nmodule armrest() {\n    // Left armrest\n    translate([30, 0, 50])\n    union() {\n        // Vertical support\n        cube([4, 4, 15], center = true);\n        // Horizontal rest\n        translate([0, 10, 7.5])\n        cube([4, 20, 2], center = true);\n    }\n    \n    // Right armrest\n    translate([-30, 0, 50])\n    union() {\n        cube([4, 4, 15], center = true);\n        translate([0, 10, 7.5])\n        cube([4, 20, 2], center = true);\n    }\n}\n\n// Hydraulic cylinder base\nmodule base() {\n    // Central pole\n    cylinder(h = 35, r = 3, center = true);\n    \n    // Gas cylinder cover\n    translate([0, 0, 17.5])\n    cylinder(h = 10, r1 = 5, r2 = 3);\n    \n    // Five-star base legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 25, 0])\n        cube([6, 25, 3], center = true);\n    }\n    \n    // Wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 37, -1.5])\n        sphere(r = 2);\n    }\n}\n\n// Gaming details - speaker grilles\nmodule speakers() {\n    // Left speaker\n    translate([25, -20, 60])\n    for(i = [0:3]) {\n        for(j = [0:2]) {\n            translate([i * 2 - 3, j * 2 - 2, 0])\n            cylinder(h = 1, r = 0.5);\n        }\n    }\n    \n    // Right speaker\n    translate([-25, -20, 60])\n    for(i = [0:3]) {\n        for(j = [0:2]) {\n            translate([i * 2 - 3, j * 2 - 2, 0])\n            cylinder(h = 1, r = 0.5);\n        }\n    }\n}\n\n// Stitching details on cushions\nmodule stitching() {\n    // Seat stitching\n    translate([0, 0, 39.5])\n    cube([45, 40, 0.5], center = true);\n    \n    // Backrest stitching\n    translate([0, -20, 60])\n    rotate([15, 0, 0])\n    cube([40, 35, 0.5], center = true);\n}\n\n// Assemble the gaming chair\nunion() {\n    base();\n    translate([0, 0, 17.5])\n    cylinder(h = 35, r = 3);\n    seat();\n    backrest();\n    armrest();\n    speakers();\n    stitching();\n}",
    "renders": true
  },
  {
    "furniture": "puzzle",
    "openscad_code": "// Puzzle Chair - Interlocking 3D printable furniture piece\n// Dimensions: 120mm x 120mm x 140mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Chair proportions\nseat_w = 100;\nseat_d = 100;\nseat_h = 70;\nback_h = 70;\nleg_h = seat_h;\nleg_size = 8;\n\n// Puzzle joint dimensions\njoint_w = 20;\njoint_h = 10;\njoint_t = 2;\njoint_gap = 0.4;\n\n// Module for puzzle joints\nmodule puzzle_joint(type=\"male\") {\n    difference() {\n        cube([joint_w, joint_t, joint_h]);\n        \n        // Add dovetail shape\n        if(type == \"male\") {\n            translate([joint_w/2, joint_t, joint_h/2])\n                rotate([0,90,0])\n                    cylinder(h=joint_w-4, r=joint_t/2, $fn=20);\n        } else {\n            translate([joint_w/2, 0, joint_h/2])\n                rotate([0,90,0])\n                    cylinder(h=joint_w-4, r=joint_t/2, $fn=20);\n        }\n    }\n}\n\n// Chair leg with puzzle joints\nmodule chair_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        difference() {\n            cube([leg_size, leg_size, leg_h]);\n            \n            // Puzzle joints on top\n            translate([(leg_size-joint_w)/2, leg_size-joint_t, leg_h-joint_h])\n                puzzle_joint(\"female\");\n            \n            // Puzzle joints on sides\n            if(x_pos == 0) {\n                translate([leg_size-joint_t, (leg_size-joint_w)/2, leg_h/2-5])\n                    rotate([0,0,90])\n                        puzzle_joint(\"female\");\n            }\n            if(y_pos == 0) {\n                translate([(leg_size-joint_w)/2, leg_size-joint_t, leg_h/2-5])\n                    puzzle_joint(\"female\");\n            }\n        }\n    }\n}\n\n// Seat frame with joints\nmodule seat_frame() {\n    difference() {\n        // Main seat frame\n        cube([seat_w, seat_d, wall]);\n        \n        // Cut puzzle joints for legs\n    for(x = [0:seat_w-leg_size:seat_w-leg_size]) {\n        for(y = [0:seat_d-leg_size:seat_d-leg_size]) {\n            translate([x+(leg_size-joint_w)/2, y+leg_size-wall, -joint_gap])\n                puzzle_joint(\"male\");\n        }\n    }\n    \n        // Cut puzzle joints for backrest\n        for(x = [20:20:80]) {\n            translate([x, wall-joint_gap, -joint_gap])\n                rotate([90,0,0])\n                    puzzle_joint(\"male\");\n        }\n    \n        // Hollow center for material saving\n        translate([wall, wall, 0])\n            cube([seat_w-2*wall, seat_d-2*wall, wall]);\n    }\n}\n\n// Backrest with support slats\nmodule backrest() {\n    difference() {\n        // Main backrest panel\n        translate([10, 10-wall, seat_h])\n            cube([seat_w-20, wall, back_h]);\n        \n        // Puzzle joints for seat connection\n        for(x = [20:20:80]) {\n            translate([x, -joint_gap, joint_gap])\n                rotate([0,90,0])\n                    puzzle_joint(\"male\");\n        }\n        \n        // Hollow pattern for style\n        for(i = [1:3]) {\n            translate([15*i*2, -joint_gap, 20])\n                cube([5, wall, back_h-30]);\n        }\n    }\n}\n\n// Side support beams\nmodule side_support(side) {\n    rotate([0,0,side*90]) {\n        translate([seat_w/2-10, -wall, leg_h/2]) {\n            difference() {\n                // Beam\n                cube([20, wall, leg_h]);\n                \n                // Puzzle joints\n                translate([2, -joint_gap, leg_h/2-5])\n                    rotate([0,90,90])\n                        puzzle_joint(\"male\");\n                translate([18-joint_t, -joint_gap, leg_h/2-5])\n                    rotate([0,90,90])\n                        puzzle_joint(\"male\");\n            }\n        }\n    }\n}\n\n// Assembly\n// Legs\nchair_leg(0, 0);\nchair_leg(seat_w-leg_size, 0);\nchair_leg(0, seat_d-leg_size);\nchair_leg(seat_w-leg_size, seat_d-leg_size);\n\n// Seat\ntranslate([0, 0, leg_h-wall])\n    seat_frame();\n\n// Backrest\nbackrest();\n\n// Side supports\nside_support(0);\nside_support(1);",
    "renders": true
  },
  {
    "furniture": "train",
    "openscad_code": "// Train Bench - Realistic Style, Medium Complexity\n// Dimensions: 120mm long x 45mm wide x 45mm tall\n\n$fn = 32;\n\nmodule bench_base() {\n    // Main bench seat - 2mm thick walls\n    difference() {\n        // Outer shell\n        cube([120, 45, 8]);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([116, 41, 6]);\n    }\n}\n\nmodule bench_back() {\n    // Curved backrest with supports\n    translate([0, 0, 8]) {\n        difference() {\n            // Main backrest curve\n            hull() {\n                translate([5, 42, 0])\n                    cube([110, 3, 35]);\n                translate([5, 35, 30])\n                    cube([110, 3, 5]);\n            }\n            \n            // Hollow backrest\n            translate([7, 43, 2])\n                cube([106, 1, 30]);\n        }\n        \n        // Support ribs underneath\n        for(x = [15:25:105]) {\n            translate([x, 40, 0]) {\n                cube([3, 5, 25]);\n            }\n        }\n    }\n}\n\nmodule bench_legs() {\n    // Four legs with stretchers\n    module leg() {\n        difference() {\n            // Leg post\n            cube([8, 8, 35]);\n            \n            // Hollow leg\n            translate([2, 2, 2])\n                cube([4, 4, 33]);\n        }\n    }\n    \n    // Position legs at corners\n    translate([8, 5, -35]) leg();\n    translate([8, 32, -35]) leg();\n    translate([104, 5, -35]) leg();\n    translate([104, 32, -35]) leg();\n    \n    // Stretcher bars between legs\n    translate([12, 9, -25])\n        cube([96, 3, 8]);\n    translate([12, 33, -25])\n        cube([96, 3, 8]);\n    translate([12, 12, -20])\n        cube([3, 21, 8]);\n    translate([105, 12, -20])\n        cube([3, 21, 8]);\n}\n\nmodule bench_details() {\n    // Seat cushion imitation\n    translate([2, 2, 8])\n        cube([116, 41, 2]);\n    \n    // Button details on cushion\n    for(x = [20:20:100]) {\n        for(y = [10:15:35]) {\n            translate([x, y, 10.5])\n                cylinder(h=1, r=2);\n        }\n    }\n    \n    // Armrests\n    translate([0, 40, 8]) {\n        difference() {\n            cube([8, 5, 25]);\n            translate([2, 2, 2])\n                cube([4, 3, 23]);\n        }\n    }\n    translate([112, 40, 8]) {\n        difference() {\n            cube([8, 5, 25]);\n            translate([2, 2, 2])\n                cube([4, 3, 23]);\n        }\n    }\n}\n\n// Assemble the train bench\nunion() {\n    bench_base();\n    bench_back();\n    bench_legs();\n    bench_details();\n}",
    "renders": true
  },
  {
    "furniture": "model",
    "openscad_code": "// Mid-Century Modern Armchair\n// Overall printable size: 100 x 90 x 85 mm\n\n// Wall thickness constant for 3D printing\nwall = 2;\n\n// Chair seat dimensions\nseat_w = 60;\nseat_d = 55;\nseat_h = 8;\n\n// Backrest dimensions\nback_h = 40;\n\n// Leg dimensions\nleg_w = 5;\nleg_h = 35;\n\n// Armrest dimensions\narm_w = 7;\narm_h = 18;\n\n// Cushion thickness\ncushion_t = 8;\n\nmodule chair() {\n    union() {\n        // Seat frame\n        translate([0, 0, leg_h])\n            difference() {\n                cube([seat_w, seat_d, seat_h], center = true);\n                translate([0, 0, wall])\n                    cube([seat_w - wall*2, seat_d - wall*2, seat_h], center = true);\n            }\n\n        // Seat cushion\n        translate([0, 0, leg_h + seat_h/2 + cushion_t/2])\n            cube([seat_w - wall*4, seat_d - wall*4, cushion_t], center = true);\n\n        // Backrest\n        translate([0, -seat_d/2 + wall, leg_h + seat_h + back_h/2])\n            difference() {\n                cube([seat_w - wall*2, wall*4, back_h], center = true);\n                translate([0, 0, wall])\n                    cube([seat_w - wall*6, wall*2, back_h - wall*2], center = true);\n            }\n\n        // Backrest cushion\n        translate([0, -seat_d/2 + wall*2, leg_h + seat_h + back_h/2])\n            cube([seat_w - wall*8, wall, back_h - wall*2], center = true);\n\n        // Armrests\n        for (x = [-seat_w/2 + wall*2, seat_w/2 - wall*2]) {\n            translate([x, 0, leg_h + seat_h + arm_h/2])\n                difference() {\n                    cube([arm_w, seat_d - wall*4, arm_h], center = true);\n                    translate([0, 0, wall])\n                        cube([arm_w - wall*2, seat_d - wall*6, arm_h], center = true);\n                }\n        }\n\n        // Legs\n        for (x = [-seat_w/2 + leg_w, seat_w/2 - leg_w])\n            for (y = [-seat_d/2 + leg_w, seat_d/2 - leg_w])\n                translate([x, y, leg_h/2])\n                    difference() {\n                        cylinder(h = leg_h, r = leg_w, $fn = 16);\n                        translate([0, 0, wall])\n                            cylinder(h = leg_h, r = leg_w - wall, $fn = 16);\n                    }\n\n        // Back leg supports\n        translate([0, -seat_d/2 + leg_w, leg_h/2])\n            difference() {\n                cube([seat_w - leg_w*4, leg_w*2, leg_h], center = true);\n                translate([0, 0, wall])\n                    cube([seat_w - leg_w*4 - wall*2, leg_w*2 - wall*2, leg_h], center = true);\n            }\n\n        // Front stretcher\n        translate([0, seat_d/2 - leg_w, leg_h/2])\n            difference() {\n                cube([seat_w - leg_w*4, leg_w*2, leg_h], center = true);\n                translate([0, 0, wall])\n                    cube([seat_w - leg_w*4 - wall*2, leg_w*2 - wall*2, leg_h], center = true);\n            }\n    }\n}\n\n// Scale to fit printer bed\nscale(0.9)\n    chair();",
    "renders": true
  },
  {
    "furniture": "hobby",
    "openscad_code": "// Hobbyist's Rolling Tool Cart\n// Medium-complexity, realistic-style furniture piece\n// Overall footprint ≈ 100 mm x 60 mm x 110 mm (W x D x H)\n// All walls 2 mm thick for easy 3D printing\n\n$fn = 32;  // Smooth curves\n\nmodule frameSide() {\n    // Left/right frame: outer box with internal ribs\n    difference() {\n        cube([2, 60, 110]);                                // Outer plate\n        for (z = [15:30:90])                               // Lightening slots\n            translate([0, 5, z]) cube([2.1, 50, 25]);\n    }\n}\n\nmodule shelf() {\n    // One shelf with 2 mm thickness and small front lip\n    difference() {\n        translate([0, 0, 1]) cube([96, 56, 2]);            // Shelf plate\n        translate([5, 5, 0]) cube([86, 46, 2.1]);          // Material-saving cavity\n    }\n    translate([0, 56, 0]) cube([96, 2, 5]);                // Front safety lip\n}\n\nmodule caster(wheel_d=10, stem_h=8) {\n    // Swivel caster with integrated stem\n    union() {\n        cylinder(h=2, d=wheel_d + 4);                      // Top plate\n        translate([0, 0, 2]) cylinder(h=stem_h, d=wheel_d/2); // Stem\n        translate([0, 0, 2 + stem_h])\n            rotate([90, 0, 0])\n            cylinder(h=wheel_d, d=wheel_d);                // Wheel\n    }\n}\n\nmodule handle() {\n    // Tubular push handle\n    rotate([0, 90, 0])\n        cylinder(h=70, d=6);                               // Main tube\n    translate([0, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=20, d=6);                               // Vertical mount\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=20, d=6);                               // Vertical mount\n}\n\nmodule drawer(side) {\n    // Small drawer box with false front\n    box_w = 38;\n    translate([side * 29, 2, 52]) {\n        difference() {\n            cube([box_w, 56, 25]);                         // Drawer body\n            translate([2, 2, 2]) cube([box_w - 4, 52, 23]); // Hollow interior\n        }\n        translate([box_w/2 - 15, -1, 12])\n            cube([30, 2, 8]);                              // False front\n        translate([box_w/2 - 1, -2, 17])\n            cube([2, 2, 2]);                               // Simple knob\n    }\n}\n\n// Assemble cart\nunion() {\n    // Left frame\n    translate([0, 0, 0]) frameSide();\n    // Right frame\n    translate([98, 0, 0]) frameSide();\n\n    // Shelves\n    translate([2, 2, 20]) shelf();\n    translate([2, 2, 80]) shelf();\n\n    // Back slats (structural & aesthetic)\n    for (x = [10:20:90])\n        translate([x, 58, 0]) cube([2, 2, 110]);\n\n    // Drawers\n    drawer(1);   // Left drawer\n    drawer(-1);  // Right drawer\n\n    // Handle\n    translate([50, 0, 105]) handle();\n\n    // Casters (four corners)\n    for (x = [5, 93])\n        for (y = [5, 53])\n            translate([x, y, -10]) caster();\n}",
    "renders": true
  },
  {
    "furniture": "workshop",
    "openscad_code": "// Workbench with pegboard back and lower shelf\n// Overall dimensions: 70mm W x 40mm D x 60mm H\n\n// Parameters\nbench_w = 70;\nbench_d = 40;\nbench_h = 60;\nleg_thick = 4;\ntop_thick = 3;\nback_h = 35;\npeg_d = 2;\npeg_spacing = 5;\nshelf_h = 20;\n\n// Workbench top\nmodule bench_top() {\n    translate([0, 0, bench_h - top_thick])\n        cube([bench_w, bench_d, top_thick], center = true);\n}\n\n// Single leg\nmodule leg() {\n    cube([leg_thick, leg_thick, bench_h - top_thick], center = true);\n}\n\n// Four legs\nmodule legs() {\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (bench_w/2 - leg_thick/2), \n                      y * (bench_d/2 - leg_thick/2), \n                      (bench_h - top_thick)/2])\n                leg();\n}\n\n// Lower shelf\nmodule lower_shelf() {\n    translate([0, 0, shelf_h])\n        cube([bench_w - leg_thick*2, bench_d - leg_thick*2, top_thick], center = true);\n}\n\n// Pegboard back panel\nmodule pegboard() {\n    difference() {\n        // Main back panel\n        translate([0, -bench_d/2 + 1, bench_h - back_h/2 - top_thick])\n            cube([bench_w - leg_thick*2, 2, back_h], center = true);\n        \n        // Peg holes\n        for (x = [-bench_w/2 + leg_thick + peg_spacing : peg_spacing : bench_w/2 - leg_thick - peg_spacing])\n            for (y = [peg_spacing : peg_spacing : back_h - peg_spacing])\n                translate([x, -bench_d/2, bench_h - y - top_thick])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3, d = peg_d, $fn = 8);\n    }\n}\n\n// Side support braces\nmodule braces() {\n    // Left brace\n    translate([-bench_w/2 + leg_thick/2, 0, shelf_h + (bench_h - shelf_h - top_thick)/2])\n        rotate([0, 90, 0])\n            cube([leg_thick, bench_d - leg_thick*2, 2]);\n    \n    // Right brace\n    translate([bench_w/2 - leg_thick/2, 0, shelf_h + (bench_h - shelf_h - top_thick)/2])\n        rotate([0, 90, 0])\n            cube([leg_thick, bench_d - leg_thick*2, 2]);\n}\n\n// Assembly\nunion() {\n    bench_top();\n    legs();\n    lower_shelf();\n    pegboard();\n    braces();\n}",
    "renders": true
  },
  {
    "furniture": "potter",
    "openscad_code": "// Potter's stool with tool tray and foot rest\n// Overall height 450mm, seat 300mm diameter, 3D printable at 33% scale\n\n$fn = 36;  // Smooth curves\n\n// Parameters\nseat_d = 30;\nleg_h = 40;\nleg_r = 1.5;\nstretcher_h = 15;\nfootrest_d = 25;\nfootrest_h = 8;\ntray_w = 22;\ntray_d = 12;\ntray_h = 4;\nwall = 2;\n\nmodule stool() {\n    // Central support post\n    union() {\n        // Seat cushion\n        difference() {\n            cylinder(h = 3, r = seat_d/2, center = true);\n            cylinder(h = 3.1, r = seat_d/2 - wall, center = true);\n        }\n        \n        // Support post\n        cylinder(h = leg_h, r = 3, center = false);\n        \n        // Base ring for stability\n        translate([0, 0, -1])\n            cylinder(h = 2, r = 8, r2 = 6, center = false);\n    }\n}\n\nmodule legs() {\n    // Three legs with stretchers\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([seat_d/2 - leg_r - 2, 0, 0])\n                union() {\n                    // Leg\n                    rotate([90, 0, 90])\n                        cylinder(h = leg_h - stretcher_h, r = leg_r, center = false);\n                    \n                    // Stretcher connecting to center\n                    translate([0, 0, stretcher_h])\n                        rotate([90, 0, 90])\n                            cylinder(h = seat_d/2 - leg_r - 2, r = leg_r*0.7, center = false);\n                }\n    }\n}\n\nmodule footrest() {\n    // Circular footrest between legs\n    translate([0, 0, footrest_h])\n        difference() {\n            cylinder(h = 2, r = footrest_d/2, center = false);\n            // Cutouts for legs\n            for (i = [0:120:359]) {\n                rotate([0, 0, i])\n                    translate([footrest_d/2 - leg_r - 1, 0, -0.1])\n                        cube([leg_r*2 + 2, leg_r*2 + 2, 2.2], center = true);\n            }\n        }\n}\n\nmodule tool_tray() {\n    // Side tool tray attached to one leg\n    rotate([0, 0, 120])  // Position at one leg\n        translate([seat_d/2 - leg_r - 2, 0, stretcher_h + 3])\n            union() {\n                // Tray base\n                difference() {\n                    translate([tray_w/2, 0, 0])\n                        cube([tray_w, tray_d, tray_h], center = true);\n                    // Hollow interior\n                    translate([tray_w/2, 0, wall/2])\n                        cube([tray_w - wall*2, tray_d - wall*2, tray_h], center = true);\n                }\n                \n                // Mounting brackets\n                translate([0, 0, tray_h/2])\n                    cube([wall*2, tray_d, tray_h], center = true);\n            }\n}\n\n// Assemble the stool\nunion() {\n    stool();\n    legs();\n    footrest();\n    tool_tray();\n}",
    "renders": true
  },
  {
    "furniture": "ceramic",
    "openscad_code": "// Ceramic Stool with Hexagonal Seat and Turned Legs\n// Overall height ~120mm, suitable as a side table or plant stand\n\n// Parameters\nseat_diameter = 100;  // Overall seat diameter\nleg_height = 110;     // Total leg height\nwall_thickness = 2;   // For 3D printing\nleg_diameter = 12;    // Turned leg diameter at narrowest\nfoot_diameter = 20;   // Flared foot diameter\n\n// Hexagonal seat module\nmodule hexagonal_seat() {\n    // Main seat top\n    cylinder(h=wall_thickness*2, d=seat_diameter, $fn=6);\n    \n    // Reinforcement ring underneath\n    translate([0,0,-wall_thickness])\n        difference() {\n            cylinder(h=wall_thickness*2, d=seat_diameter-5, $fn=6);\n            cylinder(h=wall_thickness*2, d=seat_diameter-15, $fn=6);\n        }\n}\n\n// Turned leg with traditional ceramic shaping\nmodule turned_leg(height, foot_flare=true) {\n    union() {\n        // Main cylindrical shaft\n        cylinder(h=height*0.7, d=leg_diameter);\n        \n        // Flared foot at bottom\n        if (foot_flare) {\n            translate([0,0,height*0.7])\n                cylinder(h=height*0.3, d1=leg_diameter, d2=foot_diameter);\n        }\n        \n        // Decorative rings (turned details)\n        for (i = [1:3]) {\n            translate([0,0,height*0.15*i])\n                cylinder(h=2, d=leg_diameter+4);\n        }\n    }\n}\n\n// Central support ring for legs\nmodule support_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h=wall_thickness*2, d=seat_diameter-20);\n        // Inner hole\n        cylinder(h=wall_thickness*2, d=seat_diameter-40);\n    }\n}\n\n// Main assembly\nunion() {\n    // Hexagonal seat\n    translate([0,0,leg_height])\n        hexagonal_seat();\n    \n    // Support ring between legs\n    translate([0,0,leg_height*0.4])\n        support_ring();\n    \n    // Three turned legs in triangular arrangement\n    for (a = [0:120:359]) {\n        rotate([0,0,a])\n            translate([seat_diameter*0.35, 0, 0])\n                turned_leg(leg_height);\n    }\n    \n    // Small drainage hole in seat center (for plant stand use)\n    translate([0,0,leg_height])\n        cylinder(h=wall_thickness*2+1, d=5);\n}",
    "renders": true
  },
  {
    "furniture": "cabinet",
    "openscad_code": "// Cabinet - Medium complexity, realistic style\n// Dimensions: 60mm W x 40mm D x 85mm H\n\n// Overall parameters\ncab_w = 60;\ncab_d = 40;\ncab_h = 85;\nwall_t = 2;\n\nmodule cabinet_body() {\n    // Main carcass\n    difference() {\n        // Outer shell\n        cube([cab_w, cab_d, cab_h]);\n        \n        // Hollow interior\n        translate([wall_t, wall_t, wall_t])\n            cube([cab_w-2*wall_t, cab_d-2*wall_t, cab_h-wall_t]);\n    }\n}\n\nmodule back_panel() {\n    // Back panel\n    translate([0, cab_d-wall_t, wall_t])\n        cube([cab_w, wall_t, cab_h-2*wall_t]);\n}\n\nmodule shelf() {\n    // Middle shelf\n    translate([wall_t, wall_t, cab_h*0.6])\n        cube([cab_w-2*wall_t, cab_d-2*wall_t, wall_t]);\n}\n\nmodule door() {\n    // Single door with panel\n    translate([-wall_t/2, wall_t/2, wall_t])\n        difference() {\n            // Door frame\n            cube([wall_t, cab_d-2*wall_t, cab_h*0.8]);\n            \n            // Recessed panel\n            translate([wall_t/2, wall_t*2, wall_t*3])\n                cube([wall_t/2, cab_d-wall_t*6, cab_h*0.8-wall_t*6]);\n        }\n}\n\nmodule door_handle() {\n    // Door handle\n    translate([-wall_t*1.5, cab_d/2, cab_h*0.5])\n        rotate([90, 0, 0])\n            cylinder(h=wall_t*3, r=wall_t, $fn=8);\n}\n\nmodule legs() {\n    // Four corner legs\n    leg_w = 3;\n    leg_h = 4;\n    \n    positions = [\n        [0, 0],\n        [cab_w-leg_w, 0],\n        [0, cab_d-leg_w],\n        [cab_w-leg_w, cab_d-leg_w]\n    ];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], -leg_h])\n            cube([leg_w, leg_w, leg_h]);\n    }\n}\n\nmodule base_frame() {\n    // Base frame\n    frame_h = 2;\n    \n    // Front\n    translate([0, 0, -frame_h])\n        cube([cab_w, wall_t*1.5, frame_h]);\n    \n    // Back\n    translate([0, cab_d-wall_t*1.5, -frame_h])\n        cube([cab_w, wall_t*1.5, frame_h]);\n    \n    // Left\n    translate([0, 0, -frame_h])\n        cube([wall_t*1.5, cab_d, frame_h]);\n    \n    // Right\n    translate([cab_w-wall_t*1.5, 0, -frame_h])\n        cube([wall_t*1.5, cab_d, frame_h]);\n}\n\n// Assemble the cabinet\nunion() {\n    cabinet_body();\n    back_panel();\n    shelf();\n    \n    // Door assembly\n    translate([cab_w, 0, 0])\n        union() {\n            door();\n            door_handle();\n        }\n    \n    // Base\n    legs();\n    base_frame();\n}",
    "renders": true
  },
  {
    "furniture": "dresser",
    "openscad_code": "// Realistic 3D-printable dresser (medium complexity)\n// Overall size: 60mm W x 40mm D x 80mm H, wall thickness 2mm\n\n$fn = 32;\n\n// Main dresser body\nmodule dresser_body() {\n    difference() {\n        // Outer shell\n        cube([60, 40, 80], center = true);\n        \n        // Hollow interior\n        translate([0, 2, 0])\n            cube([56, 36, 76], center = true);\n    }\n}\n\n// Top surface with rounded edge\nmodule dresser_top() {\n    difference() {\n        // Main top slab\n        translate([0, 0, 39])\n            cube([62, 42, 4], center = true);\n        \n        // Rounded edge cut\n        translate([0, 0, 41])\n            cube([58, 38, 4], center = true);\n    }\n}\n\n// Drawer module\nmodule drawer(width, height, depth, handle_type = \"bar\") {\n    difference() {\n        // Drawer box\n        translate([0, 0, 0])\n            cube([width, depth, height], center = true);\n        \n        // Hollow interior\n        translate([0, 2, 0])\n            cube([width - 4, depth - 4, height - 2], center = true);\n    }\n    \n    // Drawer front overlay\n    translate([0, (depth/2) + 1, 0])\n        cube([width + 2, 2, height + 1], center = true);\n    \n    // Handle\n    if (handle_type == \"bar\") {\n        translate([0, (depth/2) + 2.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = width - 10, d = 3, center = true);\n    }\n}\n\n// Leg module\nmodule leg() {\n    // Tapered leg\n    cylinder(h1 = 10, h2 = 10, r1 = 2, r2 = 1.5, center = false);\n}\n\n// Base frame\nmodule base_frame() {\n    // Front rail\n    translate([0, 17, -35])\n        cube([54, 4, 6], center = true);\n    \n    // Back rail\n    translate([0, -17, -35])\n        cube([54, 4, 6], center = true);\n    \n    // Side rails\n    translate([28, 0, -35])\n        cube([4, 30, 6], center = true);\n    translate([-28, 0, -35])\n        cube([4, 30, 6], center = true);\n}\n\n// Assemble dresser\nunion() {\n    // Main body\n    dresser_body();\n    \n    // Top\n    dresser_top();\n    \n    // Legs at corners\n    translate([27, 17, -45]) leg();\n    translate([-27, 17, -45]) leg();\n    translate([27, -17, -45]) leg();\n    translate([-27, -17, -45]) leg();\n    \n    // Base frame\n    base_frame();\n    \n    // Drawers - 3 rows\n    // Top drawer (smaller)\n    translate([0, 0, 20])\n        drawer(50, 15, 34);\n    \n    // Middle drawer\n    translate([0, 0, 0])\n        drawer(50, 18, 34);\n    \n    // Bottom drawer\n    translate([0, 0, -22])\n        drawer(50, 18, 34);\n    \n    // Back panel\n    translate([0, -21, 0])\n        cube([58, 2, 74], center = true);\n}",
    "renders": true
  },
  {
    "furniture": "wardrobe",
    "openscad_code": "// Wardrobe - Realistic medium complexity\n// Overall dimensions: 50mm W x 25mm D x 100mm H\n\n$fs = 0.5;\n$fa = 1;\n\nmodule wardrobe() {\n    // Main carcass\n    difference() {\n        // Outer shell\n        cube([50, 25, 100]);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([46, 21, 96]);\n    }\n    \n    // Back panel (2mm thick)\n    translate([2, 2, 2])\n        cube([46, 1, 96]);\n    \n    // Top rail (structural support)\n    translate([2, 3, 95])\n        cube([46, 20, 3]);\n    \n    // Bottom rail (structural support)\n    translate([2, 3, 2])\n        cube([46, 20, 3]);\n    \n    // Left door\n    translate([2, 2, 5])\n        door();\n    \n    // Right door\n    translate([27, 2, 5])\n        door();\n    \n    // Shelf 1 (at 40mm height)\n    translate([4, 4, 40])\n        cube([42, 17, 2]);\n    \n    // Shelf 2 (at 70mm height)\n    translate([4, 4, 70])\n        cube([42, 17, 2]);\n    \n    // Hanging rod\n    rotate([0, 90, 0])\n        translate([5, 30, 5])\n            cylinder(h=42, r=1.5, $fn=16);\n    \n    // Door handles\n    translate([12, 0, 60])\n        handle();\n    translate([37, 0, 60])\n        handle();\n    \n    // Base plinth (recessed)\n    translate([3, 5, -3])\n        cube([44, 15, 3]);\n}\n\nmodule door() {\n    difference() {\n        // Door panel\n        cube([21, 1, 90]);\n        \n        // Panel molding (top)\n        translate([2, -0.5, 75])\n            cube([17, 1, 10]);\n        \n        // Panel molding (bottom)\n        translate([2, -0.5, 5])\n            cube([17, 1, 10]);\n        \n        // Panel recess\n        translate([3, -0.5, 15])\n            cube([15, 0.5, 60]);\n    }\n}\n\nmodule handle() {\n    // Handle base\n    cube([4, 2, 4]);\n    \n    // Handle grip\n    translate([2, 1, 2])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=1, $fn=8);\n}\n\n// Position for printing\ntranslate([-25, -12.5, 0])\n    wardrobe();",
    "renders": true
  },
  {
    "furniture": "chest",
    "openscad_code": "// Realistic style wooden chest with medium complexity\n// Overall dimensions: 60mm x 40mm x 45mm\n\n// Main body dimensions\nbody_width = 60;\nbody_depth = 40;\nbody_height = 30;\nwall_thickness = 2;\n\n// Lid dimensions\nlid_height = 8;\nlid_overlap = 3;\n\n// Base dimensions\nbase_height = 5;\nbase_inset = 3;\n\n// Handle placement\nhandle_offset = 15;\nhandle_radius = 2;\n\n// Panel details\npanel_inset = 1.5;\npanel_width = 20;\npanel_height = 20;\n\n// Decorative elements\nband_thickness = 1;\nband_offset = 3;\n\nmodule chest_body() {\n    // Main body shell\n    difference() {\n        // Outer box\n        cube([body_width, body_depth, body_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([body_width-wall_thickness*2, body_depth-wall_thickness*2, body_height], center=true);\n        \n        // Top opening\n        translate([0, 0, body_height/2 - wall_thickness/2])\n            cube([body_width-wall_thickness*2, body_depth-wall_thickness*2, wall_thickness], center=true);\n    }\n    \n    // Front and back panels with raised edges\n    for(side = [-1, 1]) {\n        // Panel frame\n        translate([0, side*(body_depth/2 - wall_thickness/2), 0]) {\n            difference() {\n                // Raised frame\n                cube([body_width-wall_thickness*4, wall_thickness, panel_height], center=true);\n                \n                // Panel recess\n                translate([0, 0, panel_inset])\n                    cube([panel_width, wall_thickness+0.1, panel_height-panel_inset*2], center=true);\n            }\n            \n            // Horizontal bands\n            for(band = [-1, 0, 1]) {\n                translate([(band*20), 0, (body_height/2 - band_offset - band*band_offset)])\n                    cube([body_width-wall_thickness*4, wall_thickness*1.5, band_thickness], center=true);\n            }\n        }\n    }\n    \n    // Side panels\n    for(side = [-1, 1]) {\n        translate([side*(body_width/2 - wall_thickness/2), 0, 0]) {\n            difference() {\n                cube([wall_thickness, body_depth-wall_thickness*4, panel_height], center=true);\n                \n                translate([0, 0, panel_inset])\n                    cube([wall_thickness+0.1, panel_width, panel_height-panel_inset*2], center=true);\n            }\n        }\n    }\n}\n\nmodule chest_base() {\n    // Base frame\n    difference() {\n        // Main base\n        translate([0, 0, -body_height/2 - base_height/2])\n            cube([body_width+2, body_depth+2, base_height], center=true);\n        \n        // Underside recess\n        translate([0, 0, -body_height/2 - base_height/2 + wall_thickness])\n            cube([body_width+2 - wall_thickness*2, body_depth+2 - wall_thickness*2, base_height], center=true);\n    }\n    \n    // Feet corners\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(body_width/2 - base_inset), y*(body_depth/2 - base_inset), -body_height/2 - base_height])\n                cylinder(h=base_height, r1=3, r2=2, center=false);\n        }\n    }\n}\n\nmodule chest_lid() {\n    // Main lid\n    difference() {\n        // Lid top\n        translate([0, 0, body_height/2 + lid_height/2])\n            cube([body_width, body_depth+2*lid_overlap, lid_height], center=true);\n        \n        // Inside hollow\n        translate([0, 0, body_height/2 + wall_thickness/2])\n            cube([body_width-wall_thickness*2, body_depth+2*lid_overlap-wall_thickness*2, lid_height], center=true);\n    }\n    \n    // Lid lip for closing\n    translate([0, 0, body_height/2 - wall_thickness/2])\n        cube([body_width-wall_thickness*2, body_depth-wall_thickness*2, wall_thickness], center=true);\n    \n    // Decorative lid bands\n    for(band = [-1, 1]) {\n        translate([0, band*lid_overlap/2, body_height/2 + lid_height/2])\n            cube([body_width, band_thickness*2, lid_height], center=true);\n    }\n}\n\nmodule handles() {\n    // Side handles\n    for(side = [-1, 1]) {\n        translate([side*(body_width/2 + handle_radius), 0, handle_offset]) {\n            rotate([0, 90, 0])\n                cylinder(h=body_depth/3, r=handle_radius, center=true);\n            \n            // Handle brackets\n            for(bracket = [-1, 1]) {\n                translate([0, bracket*body_depth/6, 0])\n                    sphere(r=handle_radius*1.2);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chest_base();\n    chest_body();\n    chest_lid();\n    handles();\n}",
    "renders": true
  },
  {
    "furniture": "shelf",
    "openscad_code": "// Realistic medium-complexity shelf\n// Overall size: 100 x 30 x 120 mm\n\n// Wall thickness parameter\nwall = 2;\n\n// Main shelf body\nmodule shelf_body() {\n    difference() {\n        // Outer shell\n        cube([100, 30, 120], center = false);\n        \n        // Hollow out interior\n        translate([wall, wall, wall])\n            cube([100 - 2*wall, 30 - 2*wall, 120 - 2*wall], center = false);\n    }\n}\n\n// Shelf supports (vertical dividers)\nmodule shelf_supports() {\n    // Left side\n    translate([wall, wall, wall])\n        cube([wall, 30 - 2*wall, 120 - 2*wall], center = false);\n    \n    // Right side\n    translate([100 - 2*wall, wall, wall])\n        cube([wall, 30 - 2*wall, 120 - 2*wall], center = false);\n    \n    // Middle supports\n    for (x = [30, 60]) {\n        translate([x, wall, wall])\n            cube([wall, 30 - 2*wall, 120 - 2*wall], center = false);\n    }\n}\n\n// Shelf plates\nmodule shelf_plates() {\n    // Bottom shelf\n    translate([wall, wall, wall])\n        cube([100 - 2*wall, 30 - 2*wall, wall], center = false);\n    \n    // Middle shelves\n    for (h = [35, 65, 95]) {\n        translate([wall, wall, h])\n            cube([100 - 2*wall, 30 - 2*wall, wall], center = false);\n    }\n}\n\n// Back panel with screw holes\nmodule back_panel() {\n    difference() {\n        // Back panel\n        translate([wall, 30 - 2*wall, wall])\n            cube([100 - 2*wall, wall, 120 - 2*wall], center = false);\n        \n        // Screw holes for mounting (2mm diameter)\n        for (y = [20, 40, 60, 80, 100]) {\n            translate([y, 30 - 2*wall + 0.5, 60])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 1, d = 2, center = true);\n        }\n    }\n}\n\n// Small decorative feet\nmodule feet() {\n    foot_positions = [[5, 5], [95, 5], [5, 25], [95, 25]];\n    \n    for (pos = foot_positions) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h = 5, d1 = 6, d2 = 4, center = false);\n    }\n}\n\n// Base reinforcement frame\nmodule base_frame() {\n    // Front frame\n    translate([0, 0, 0])\n        cube([100, wall, 5], center = false);\n    \n    // Back frame\n    translate([0, 30 - wall, 0])\n        cube([100, wall, 5], center = false);\n    \n    // Side frames\n    translate([0, 0, 0])\n        cube([wall, 30, 5], center = false);\n    \n    translate([100 - wall, 0, 0])\n        cube([wall, 30, 5], center = false);\n}\n\n// Assembly\nunion() {\n    shelf_body();\n    shelf_supports();\n    shelf_plates();\n    back_panel();\n    base_frame();\n    feet();\n}",
    "renders": true
  },
  {
    "furniture": "hutch",
    "openscad_code": "// Hutch - Medium complexity realistic style\n// Overall size: 100mm wide x 50mm deep x 120mm tall\n// Wall thickness: 2mm for 3D printability\n\n$fn = 32;\n\n// Main module\nmodule hutch() {\n    // Base cabinet\n    union() {\n        // Bottom cabinet shell\n        difference() {\n            // Outer shell\n            cube([100, 50, 60]);\n            \n            // Hollow out interior\n            translate([2, 2, 2])\n                cube([96, 46, 58]);\n        }\n        \n        // Cabinet back panel\n        translate([0, 48, 0])\n            cube([100, 2, 60]);\n        \n        // Cabinet top surface\n        translate([0, 0, 58])\n            cube([100, 50, 2]);\n        \n        // Cabinet doors\n        translate([2, 1, 10]) {\n            // Left door\n            cube([47, 2, 48]);\n            // Right door\n            translate([49, 0, 0])\n                cube([47, 2, 48]);\n        }\n        \n        // Door handles\n        translate([25, 0, 35])\n            cylinder(h=3, r=2);\n        translate([75, 0, 35])\n            cylinder(h=3, r=2);\n    }\n    \n    // Upper hutch section\n    translate([0, 0, 60]) {\n        union() {\n            // Back panel\n            translate([0, 48, 0])\n                cube([100, 2, 60]);\n            \n            // Side walls\n            translate([0, 0, 0])\n                cube([2, 50, 60]);\n            translate([98, 0, 0])\n                cube([2, 50, 60]);\n            \n            // Top panel\n            translate([0, 0, 58])\n                cube([100, 50, 2]);\n            \n            // Middle shelf\n            translate([2, 2, 30])\n                cube([96, 46, 2]);\n            \n            // Vertical dividers for shelves\n            for (x = [25, 50, 75]) {\n                translate([x, 2, 32])\n                    cube([2, 46, 26]);\n            }\n            \n            // Bottom shelf\n            translate([2, 2, 2])\n                cube([96, 46, 2]);\n            \n            // Small vertical supports between cabinet and hutch\n            translate([10, 48, 0])\n                cube([2, 2, 2]);\n            translate([88, 48, 0])\n                cube([2, 2, 2]);\n            \n            // Decorative top trim\n            translate([0, 0, 60])\n                cube([100, 50, 2]);\n            translate([0, 0, 60])\n                cube([2, 50, 5]);\n            translate([98, 0, 60])\n                cube([2, 50, 5]);\n        }\n    }\n    \n    // Legs\n    for (x = [5, 95]) {\n        for (y = [5, 45]) {\n            translate([x, y, -5])\n                cylinder(h=5, r=2);\n        }\n    }\n}\n\n// Render the hutch\nhutch();",
    "renders": true
  },
  {
    "furniture": "pantry",
    "openscad_code": "// Pantry Cabinet - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm W x 40mm D x 120mm H\n\n$fn = 32;\n\nmodule pantry() {\n    difference() {\n        // Main carcass\n        union() {\n            // Left side panel\n            translate([0, 0, 0])\n                cube([2, 40, 120]);\n            \n            // Right side panel\n            translate([78, 0, 0])\n                cube([2, 40, 120]);\n            \n            // Top panel\n            translate([0, 0, 118])\n                cube([80, 40, 2]);\n            \n            // Bottom panel\n            translate([0, 0, 0])\n                cube([80, 40, 2]);\n            \n            // Back panel\n            translate([0, 38, 0])\n                cube([80, 2, 120]);\n            \n            // Middle shelf\n            translate([2, 0, 60])\n                cube([76, 38, 2]);\n        }\n        \n        // Door cutouts\n        translate([2, -0.1, 2])\n            cube([38, 40.2, 56]);\n        \n        translate([40, -0.1, 2])\n            cube([38, 40.2, 56]);\n        \n        translate([2, -0.1, 62])\n            cube([38, 40.2, 56]);\n        \n        translate([40, -0.1, 62])\n            cube([38, 40.2, 56]);\n    }\n    \n    // Left door frame\n    translate([2, -0.5, 2])\n        door_frame(38, 56);\n    \n    // Right door frame\n    translate([40, -0.5, 2])\n        door_frame(38, 56);\n    \n    // Lower left door frame\n    translate([2, -0.5, 62])\n        door_frame(38, 56);\n    \n    // Lower right door frame\n    translate([40, -0.5, 62])\n        door_frame(38, 56);\n    \n    // Door handles\n    translate([20, -1, 30])\n        cylinder(h=3, r=2);\n    \n    translate([58, -1, 30])\n        cylinder(h=3, r=2);\n    \n    translate([20, -1, 90])\n        cylinder(h=3, r=2);\n    \n    translate([58, -1, 90])\n        cylinder(h=3, r=2);\n    \n    // Base molding\n    translate([-1, -1, -3])\n        cube([82, 42, 3]);\n    \n    // Top molding\n    translate([-1, -1, 120])\n        cube([82, 42, 3]);\n    \n    // Small ventilation holes (back panel)\n    for(i = [10:20:110]) {\n        translate([10, 39, i])\n            cylinder(h=2, r=1);\n    }\n}\n\nmodule door_frame(width, height) {\n    difference() {\n        cube([width, 2, height]);\n        \n        // Inner cutout for panel\n        translate([2, -0.1, 2])\n            cube([width-4, 2.2, height-4]);\n    }\n    \n    // Panel detail\n    translate([width/2, 0.5, height/2])\n        cube([width-6, 1, height-6]);\n}\n\npantry();",
    "renders": true
  },
  {
    "furniture": "armoire",
    "openscad_code": "// Medium-complexity realistic armoire for 3D printing\n// Overall size: ~100 mm tall\n\n$fn=24;\n\n// Main body\nmodule carcase() {\n    difference() {\n        // Outer shell\n        cube([60,40,90], center=true);\n        // Hollow inside\n        translate([0,4,0])\n            cube([56,32,86], center=true);\n    }\n}\n\n// Back panel\nmodule back() {\n    translate([0,-20,0])\n        cube([58,2,88], center=true);\n}\n\n// Base plinth\nmodule plinth() {\n    translate([0,0,-46])\n        cube([64,44,8], center=true);\n}\n\n// Single door with panel\nmodule door(left=true) {\n    x = left ? -29 : 29;\n    translate([x,0,0]) {\n        // Door slab\n        cube([2,38,86], center=true);\n        // Recessed panel\n        difference() {\n            translate([0,0,10])\n                cube([1.5,34,66], center=true);\n            translate([0,0,10])\n                cube([1.2,30,62], center=true);\n        }\n        // Handle\n        translate(left ? 1.5 : -1.5, 15, -30)\n            rotate([90,0,0])\n                cylinder(h=8, d=4, center=true);\n    }\n}\n\n// Shelf\nmodule shelf(y=0) {\n    translate([0,y,-20])\n        cube([54,1,30], center=true);\n}\n\n// Hanging rail\nmodule rail() {\n    translate([0,0,30])\n        rotate([90,0,0])\n            cylinder(h=50, d=3, center=true);\n}\n\n// Feet\nmodule foot(x,y) {\n    translate([x,y,-50])\n        cylinder(h=4, d1=6, d2=4);\n}\n\n// Assembly\nunion() {\n    // Structure\n    carcase();\n    back();\n    plinth();\n    \n    // Doors\n    door(true);\n    door(false);\n    \n    // Interior\n    shelf(0);\n    shelf(10);\n    rail();\n    \n    // Feet\n    foot(27,17);\n    foot(-27,17);\n    foot(27,-17);\n    foot(-27,-17);\n}",
    "renders": true
  },
  {
    "furniture": "cupboard",
    "openscad_code": "// Realistic 3D-printable cupboard (medium complexity)\n// Overall size: 100 mm wide × 120 mm tall × 50 mm deep\n// Wall thickness: 2 mm throughout for printability\n\n// Basic parameters\nwidth = 100;\ndepth = 50;\nheight = 120;\nwall = 2;\ngap = 1; // clearance for doors\n\n// Main carcass\nmodule cupboard_body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center = false);\n        \n        // Remove interior\n        translate([wall, wall, wall])\n            cube([width - 2*wall, depth - wall, height - 2*wall], center = false);\n    }\n}\n\n// Back panel (recessed)\nmodule back_panel() {\n    translate([wall, depth - wall, wall])\n        cube([width - 2*wall, wall, height - 2*wall]);\n}\n\n// Shelf\nmodule shelf() {\n    translate([wall, wall, height/2])\n        cube([width - 2*wall, depth - 2*wall, wall]);\n}\n\n// Door with recessed panel\nmodule door() {\n    difference() {\n        // Door frame\n        cube([width/2 - 2*wall, wall + 1, height - 2*wall - 10]);\n        \n        // Recessed panel\n        translate([wall, 1, wall])\n            cube([width/2 - 4*wall, wall - 0.5, height - 2*wall - 10 - 2*wall]);\n        \n        // Handle hole\n        translate([width/4 - 5, wall + 0.5, height/2 - 5])\n            cylinder(h = wall + 1, r = 3, $fn = 16);\n    }\n}\n\n// Handle\nmodule handle() {\n    rotate([90, 0, 0])\n        cylinder(h = 15, r1 = 2, r2 = 2, $fn = 16);\n}\n\n// Hinges (2 per door)\nmodule hinges() {\n    for(z = [30, height - 30]) {\n        translate([wall - 1, wall, z])\n            rotate([0, 90, 0])\n                cylinder(h = 4, r = 2, $fn = 16);\n    }\n}\n\n// Legs\nmodule leg() {\n    translate([0, 0, -10])\n        cylinder(h = 10, r1 = 3, r2 = 2, $fn = 12);\n}\n\n// Assemble cupboard\nunion() {\n    // Body\n    cupboard_body();\n    \n    // Back panel\n    back_panel();\n    \n    // Shelf\n    shelf();\n    \n    // Legs\n    translate([10, 10, 0]) leg();\n    translate([width - 10, 10, 0]) leg();\n    translate([10, depth - 10, 0]) leg();\n    translate([width - 10, depth - 10, 0]) leg();\n    \n    // Left door\n    translate([wall - gap, 0, 5]) {\n        door();\n        translate([width/4 - 5, wall + 1, height/2 - 5]) handle();\n    }\n    \n    // Right door\n    translate([width/2 + wall + gap, 0, 5]) {\n        door();\n        translate([width/4 - 5, wall + 1, height/2 - 5]) handle();\n    }\n    \n    // Hinges\n    translate([0, 0, 0]) {\n        hinges();\n        translate([width/2 + wall + gap, 0, 0]) hinges();\n    }\n}",
    "renders": true
  },
  {
    "furniture": "bookcase",
    "openscad_code": "// Realistic medium-complexity 3D-printable bookcase\n// External dimensions: 70 mm W x 25 mm D x 100 mm H\n// Wall thickness: 2 mm\n\nmodule shelf(w, d, t) {\n    cube([w, d, t], center = true);\n}\n\nmodule side_panel(h, d, t) {\n    cube([t, d, h], center = true);\n}\n\nmodule back_panel(w, h, t) {\n    cube([w, t, h], center = true);\n}\n\nmodule rail(l, h, t) {\n    // simple rectangular rail\n    cube([l, t, h], center = true);\n}\n\nmodule foot() {\n    // cylindrical foot, 3 mm high, 4 mm diameter\n    cylinder(h = 3, d = 4, center = true, $fn = 16);\n}\n\nmodule bookcase() {\n    // overall outside dimensions\n    width = 70;\n    depth = 25;\n    height = 100;\n\n    wall = 2;\n    shelf_thick = 2;\n\n    // outer shell\n    difference() {\n        // main solid block\n        cube([width, depth, height], center = true);\n\n        // hollow interior leaving walls and bottom\n        translate([0, 0, wall/2])\n            cube([width - 2*wall, depth - 2*wall, height - wall], center = true);\n    }\n\n    // back panel inserted into the back side\n    translate([0, depth/2 - wall/2, 0])\n        back_panel(width - 2*wall, height - wall, wall);\n\n    // four shelves inside\n    shelf_w = width - 2*wall;\n    shelf_d = depth - 2*wall;\n    shelf_positions = [20, 45, 70, 95];\n    for (z = shelf_positions) {\n        translate([0, 0, z - height/2])\n            shelf(shelf_w, shelf_d, shelf_thick);\n    }\n\n    // top front rail\n    translate([0, 0, height/2 - wall/2])\n        rotate([90, 0, 0])\n            rail(width - 2*wall, wall, wall);\n\n    // bottom front rail\n    translate([0, 0, -height/2 + wall/2])\n        rotate([90, 0, 0])\n            rail(width - 2*wall, wall, wall);\n\n    // four feet\n    foot_pos = [[-width/2 + 4, -depth/2 + 4], \n                [-width/2 + 4,  depth/2 - 4], \n                [ width/2 - 4, -depth/2 + 4], \n                [ width/2 - 4,  depth/2 - 4]];\n    for (pos = foot_pos) {\n        translate([pos[0], pos[1], -height/2 - 1.5])\n            foot();\n    }\n\n    // back vertical support rails\n    rail_h = height - wall;\n    translate([width/2 - wall/2, 0, 0])\n        rotate([0, 90, 0])\n            rail(depth - 2*wall, wall, rail_h);\n    translate([-width/2 + wall/2, 0, 0])\n        rotate([0, 90, 0])\n            rail(depth - 2*wall, wall, rail_h);\n}\n\nbookcase();",
    "renders": true
  },
  {
    "furniture": "locker",
    "openscad_code": "// Locker furniture - Realistic style, medium complexity\n// Dimensions: 50mm W x 45mm D x 140mm H\n\nwall_thickness = 2;\nbody_width = 50;\nbody_depth = 45;\nbody_height = 140;\n\n// Main body shell\nmodule locker_body() {\n    difference() {\n        // Outer shell\n        cube([body_width, body_depth, body_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([body_width-2*wall_thickness, body_depth-2*wall_thickness, body_height-wall_thickness], center=false);\n    }\n}\n\n// Door with frame\nmodule door() {\n    // Door panel\n    translate([wall_thickness-0.1, 0, wall_thickness])\n        cube([body_width-2*wall_thickness+0.2, wall_thickness, body_height-2*wall_thickness]);\n    \n    // Door frame\n    translate([wall_thickness-0.1, -0.1, wall_thickness])\n        cube([body_width-2*wall_thickness+0.2, 0.1, wall_thickness]);\n    \n    translate([wall_thickness-0.1, -0.1, body_height-wall_thickness*2])\n        cube([body_width-2*wall_thickness+0.2, 0.1, wall_thickness]);\n    \n    translate([wall_thickness-0.1, -0.1, wall_thickness])\n        cube([wall_thickness, 0.1, body_height-2*wall_thickness]);\n    \n    translate([body_width-wall_thickness, -0.1, wall_thickness])\n        cube([wall_thickness, 0.1, body_height-2*wall_thickness]);\n}\n\n// Handle\nmodule handle() {\n    translate([body_width/2-3, wall_thickness+2, body_height/2+10])\n        rotate([90, 0, 0])\n        cylinder(h=6, r=1.5, $fn=16);\n    \n    translate([body_width/2-3, wall_thickness+2, body_height/2+10])\n        cube([6, 2, 2]);\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [0:4]) {\n        translate([10+i*6, body_depth-wall_thickness-0.5, 30])\n            cube([3, wall_thickness+0.5, 1]);\n        translate([10+i*6, body_depth-wall_thickness-0.5, 35])\n            cube([3, wall_thickness+0.5, 1]);\n        translate([10+i*6, body_depth-wall_thickness-0.5, 40])\n            cube([3, wall_thickness+0.5, 1]);\n    }\n}\n\n// Shelf\nmodule shelf() {\n    translate([wall_thickness, wall_thickness, body_height*0.6])\n        cube([body_width-2*wall_thickness, body_depth-2*wall_thickness, wall_thickness]);\n}\n\n// Base stand\nmodule base() {\n    // Front feet\n    translate([wall_thickness*2, wall_thickness*2, -5])\n        cube([wall_thickness*2, wall_thickness*2, 5]);\n    translate([body_width-wall_thickness*4, wall_thickness*2, -5])\n        cube([wall_thickness*2, wall_thickness*2, 5]);\n    \n    // Back feet\n    translate([wall_thickness*2, body_depth-wall_thickness*4, -5])\n        cube([wall_thickness*2, wall_thickness*2, 5]);\n    translate([body_width-wall_thickness*4, body_depth-wall_thickness*4, -5])\n        cube([wall_thickness*2, wall_thickness*2, 5]);\n}\n\n// Locker name tag holder\nmodule name_tag() {\n    translate([body_width/2-10, wall_thickness-0.1, body_height*0.75])\n        cube([20, 0.5, 8]);\n    \n    translate([body_width/2-8, wall_thickness-0.1, body_height*0.75+1])\n        cube([16, 0.5, 6]);\n}\n\n// Assembly\nunion() {\n    locker_body();\n    door();\n    handle();\n    vents();\n    shelf();\n    base();\n    name_tag();\n}",
    "renders": true
  },
  {
    "furniture": "commode",
    "openscad_code": "// Commode / Chest of Drawers – medium-complexity realistic style\n// Overall footprint ≈ 90 mm (W) × 45 mm (D) × 85 mm (H)\n// Wall thickness 2 mm for 3-D printability, no steep overhangs\n\n$fa = 2; $fs = 0.5;\n\nmodule carcase() {\n    // Main box (5 visible walls, open back)\n    difference() {\n        cube([90, 45, 80]);                     // outer block\n        translate([2, 2, 0]) cube([86, 41, 78]); // hollow inside\n    }\n}\n\nmodule top_plank() {\n    // Slightly larger top with rounded lip\n    translate([0, -1, 80])\n    cube([90, 47, 3]);\n}\n\nmodule base_skirt() {\n    // Skirt under bottom drawer hides the plinth\n    translate([0, 0, 0])\n    difference() {\n        cube([90, 45, 10]);\n        translate([2, 2, 2]) cube([86, 41, 8]);\n    }\n}\n\nmodule leg() {\n    // Simple tapered square leg 8×8 mm base, 2 mm walls\n    difference() {\n        cube([8, 8, 20]);\n        translate([2, 2, 0]) cube([4, 4, 20]);\n    }\n}\n\nmodule legs() {\n    // Four legs positioned\n    for (x = [5, 77], y = [5, 32]) {\n        translate([x, y, 0]) leg();\n    }\n}\n\nmodule drawer_face(w, h, inset) {\n    // One drawer front panel with handle\n    difference() {\n        translate([inset, 0, 0])\n        cube([w, 40, h]);\n        // Handle hole\n        translate([w/2+inset-5, 20-2, h-1])\n        cube([10, 4, 2]);\n    }\n    // Bar handle\n    translate([w/2+inset, 20, h+1])\n    cube([20, 2, 2]);\n}\n\nmodule drawers() {\n    // Three drawers stacked\n    gap = 2;\n    h_each = (80 - 4*gap)/3;     // ≈ 24 mm\n    for (i = [0:2]) {\n        translate([0, 0, gap + i*(h_each+gap)])\n        drawer_face(86, h_each, 2);\n    }\n}\n\nmodule back_panel() {\n    // Thin rear panel for structural stiffness\n    translate([0, 43, 2])\n    cube([90, 2, 76]);\n}\n\nunion() {\n    legs();           // Support\n    carcase();        // Main body\n    base_skirt();     // Hides leg tops\n    top_plank();      // Top surface\n    drawers();        // Front drawers\n    back_panel();     // Rear stabilizer\n}",
    "renders": true
  },
  {
    "furniture": "chiffonier",
    "openscad_code": "// Realistic Chiffonier\n// Medium complexity model built from basic OpenSCAD primitives\n\n$fn = 32; // Smooth curves\n\n// Overall dimensions (mm)\noverall_w = 60;\noverall_d = 35;\noverall_h = 110;\n\n// Wall thickness\nwall_t = 2;\n\n// Leg dimensions\nleg_h = 15;\nleg_t  = 4;\n\n// Drawer parameters\ndrawer_h = 18;\ndrawer_gap = 2;\nnum_drawers = 4;\n\n// Back panel thickness\nback_t = 2;\n\n// Module for a single leg\nmodule leg() {\n    difference() {\n        cube([leg_t, leg_t, leg_h], center = false);\n        translate([leg_t/2, leg_t/2, 0])\n            cylinder(h = leg_h, r = leg_t/2 - 0.5, center = false);\n    }\n}\n\n// Module for a drawer front\nmodule drawer_front(w, h, d) {\n    difference() {\n        cube([w, d, h], center = false);\n        // Recessed panel\n        translate([wall_t + 1, 0.5, wall_t + 1])\n            cube([w - 2*(wall_t + 1), d + 0.1, h - 2*(wall_t + 1)], center = false);\n    }\n    // Handle\n    translate([w/2, d + 0.5, h/2])\n        rotate([90, 0, 0])\n            cylinder(h = 3, r = 1.2, center = true);\n}\n\n// Main body shell\nmodule carcass() {\n    difference() {\n        // Outer shell\n        translate([-overall_w/2, 0, 0])\n            cube([overall_w, overall_d, overall_h], center = false);\n\n        // Hollow interior\n        translate([-overall_w/2 + wall_t, wall_t, wall_t])\n            cube([overall_w - 2*wall_t, overall_d - wall_t - back_t, overall_h - wall_t], center = false);\n    }\n}\n\n// Back panel\nmodule back_panel() {\n    translate([-overall_w/2, overall_d - back_t, 0])\n        cube([overall_w, back_t, overall_h], center = false);\n}\n\n// Drawer divider rails\nmodule drawer_rail(y_pos) {\n    translate([-overall_w/2 + wall_t, y_pos, 0])\n        cube([overall_w - 2*wall_t, wall_t, overall_h - leg_h - wall_t], center = false);\n}\n\n// Assembly\nunion() {\n    // Carcass\n    carcass();\n    \n    // Back panel\n    back_panel();\n    \n    // Drawer divider rails\n    for (i = [1 : num_drawers - 1]) {\n        drawer_rail(overall_d/2);\n    }\n    \n    // Legs\n    translate([overall_w/2 - leg_t/2 - 2, 2, 0])\n        leg();\n    translate([-overall_w/2 + leg_t/2 + 2, 2, 0])\n        leg();\n    translate([overall_w/2 - leg_t/2 - 2, overall_d - leg_t - 2, 0])\n        leg();\n    translate([-overall_w/2 + leg_t/2 + 2, overall_d - leg_t - 2, 0])\n        leg();\n    \n    // Drawers\n    for (i = [0 : num_drawers - 1]) {\n        translate([0, overall_d/2 - 1, leg_h + i*(drawer_h + drawer_gap) + drawer_gap])\n            drawer_front(overall_w - 2*wall_t - 4, drawer_h, 1);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "tallboy",
    "openscad_code": "// Tallboy Dresser - Realistic Style, Medium Complexity\n// Approx 50mm wide x 40mm deep x 120mm tall\n\n// Overall dimensions\nwidth = 50;\ndepth = 40;\nheight = 120;\nwall_thickness = 2;\n\n// Drawers\ndrawer_height = 15;\ndrawer_gap = 3;\nnum_drawers = 5;\n\n// Base\nbase_height = 15;\nbase_inset = 2;\n\n// Top\ntop_thickness = 4;\ntop_overhang = 1;\n\n// Legs\nleg_height = 20;\nleg_taper = 3;\n\nmodule dresser_body() {\n    difference() {\n        // Main carcass\n        cube([width, depth, height - leg_height]);\n        \n        // Remove interior for hollow body\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([width - 2*wall_thickness, depth - 2*wall_thickness, height - leg_height - wall_thickness]);\n    }\n}\n\nmodule base_frame() {\n    // Front and back base rails\n    translate([0, base_inset, 0])\n        cube([width, wall_thickness, base_height - leg_height]);\n    translate([0, depth - base_inset - wall_thickness, 0])\n        cube([width, wall_thickness, base_height - leg_height]);\n    \n    // Side base rails\n    translate([base_inset, 0, 0])\n        cube([wall_thickness, depth, base_height - leg_height]);\n    translate([width - base_inset - wall_thickness, 0, 0])\n        cube([wall_thickness, depth, base_height - leg_height]);\n}\n\nmodule drawer_box(y_pos) {\n    // Drawer front\n    translate([wall_thickness, wall_thickness, y_pos])\n        cube([width - 2*wall_thickness, 1, drawer_height - drawer_gap]);\n    \n    // Drawer body (simplified)\n    translate([wall_thickness + 1, wall_thickness + 2, y_pos + 1])\n        cube([width - 2*wall_thickness - 2, depth - 2*wall_thickness - 2, drawer_height - drawer_gap - 2]);\n    \n    // Drawer handle\n    translate([width/2 - 4, wall_thickness - 0.5, y_pos + drawer_height/2 - 1])\n        cube([8, 2, 2]);\n}\n\nmodule top_panel() {\n    translate([-top_overhang, -top_overhang, height - leg_height])\n        cube([width + 2*top_overhang, depth + 2*top_overhang, top_thickness]);\n}\n\nmodule tapered_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        cylinder(h1 = leg_height, r1 = 3, r2 = 2);\n    }\n}\n\nmodule legs() {\n    // Four tapered legs\n    tapered_leg(base_inset, base_inset);\n    tapered_leg(width - base_inset, base_inset);\n    tapered_leg(base_inset, depth - base_inset);\n    tapered_leg(width - base_inset, depth - base_inset);\n}\n\n// Assemble the tallboy\nunion() {\n    // Main structure\n    dresser_body();\n    base_frame();\n    top_panel();\n    \n    // Drawers\n    for(i = [0:num_drawers-1]) {\n        drawer_box(base_height + i*(drawer_height + drawer_gap));\n    }\n    \n    // Legs\n    translate([0, 0, 0])\n        legs();\n}",
    "renders": true
  },
  {
    "furniture": "lowboy",
    "openscad_code": "// Lowboy dresser - realistic style, medium complexity\n// Overall dimensions: 120mm wide x 45mm deep x 70mm tall\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Base frame\n    difference() {\n        cube([116, 41, 10]);\n        translate([2, 2, 0]) cube([112, 37, 8]);\n    }\n    \n    // Side panels\n    translate([0, 0, 10]) cube([2, 41, 58]);\n    translate([114, 0, 10]) cube([2, 41, 58]);\n    \n    // Back panel\n    translate([2, 0, 10]) cube([112, 2, 58]);\n    \n    // Top surface\n    translate([0, 39, 10]) cube([116, 2, 58]);\n}\n\n// Leg module\nmodule leg(x_pos, z_pos) {\n    translate([x_pos, 2, z_pos]) {\n        // Main leg post\n        cylinder(h=10, d=6);\n        \n        // Taper detail\n        translate([0, 0, 10]) scale([0.8, 0.8, 1]) cylinder(h=2, d=6);\n        \n        // Foot detail\n        translate([0, 0, -1]) scale([1.1, 1.1, 1]) cylinder(h=2, d=6);\n    }\n}\n\n// Drawer module\nmodule drawer(width, height, depth, x, y, z, handle_type) {\n    translate([x, y, z]) {\n        // Drawer box\n        difference() {\n            cube([width, depth, height]);\n            translate([2, 2, 2]) cube([width-4, depth-4, height-4]);\n        }\n        \n        // Handle\n        if (handle_type == \"bar\") {\n            translate([width/2, depth+1, height/2]) {\n                rotate([90, 0, 0]) cylinder(h=width/4, d=2);\n            }\n        }\n    }\n}\n\n// Drawer dividers\nmodule dividers() {\n    // Horizontal dividers\n    translate([2, 2, 30]) cube([112, 37, 2]);\n    translate([2, 2, 48]) cube([112, 37, 2]);\n    \n    // Vertical divider\n    translate([58, 2, 32]) cube([2, 37, 16]);\n}\n\n// Rungs between legs\nmodule rung(x1, x2, y1, y2, z) {\n    translate([x1, y1, z]) cube([x2-x1, y2-y1, 2]);\n}\n\n// Main assembly\nunion() {\n    // Body assembly\n    body();\n    \n    // Legs - 4 corners\n    leg(2, 0);\n    leg(114, 0);\n    leg(2, 68);\n    leg(114, 68);\n    \n    // Rungs for stability\n    rung(8, 108, 2, 4, 5);\n    rung(8, 108, 39, 41, 5);\n    \n    // Drawers\n    // Top drawer row\n    drawer(54, 16, 35, 4, 2, 32, \"bar\");\n    drawer(54, 16, 35, 62, 2, 32, \"bar\");\n    \n    // Middle drawer row\n    drawer(54, 16, 35, 4, 2, 50, \"bar\");\n    drawer(54, 16, 35, 62, 2, 50, \"bar\");\n    \n    // Bottom drawer row\n    drawer(112, 16, 35, 4, 2, 12, \"bar\");\n    \n    // Dividers\n    dividers();\n    \n    // Top molding detail\n    translate([0, 39, 68]) {\n        difference() {\n            cube([116, 2, 2]);\n            translate([2, 0, 0]) cube([112, 2, 1]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "furniture": "highboy",
    "openscad_code": "// Highboy (tall chest of drawers) in realistic style\n// External size ~100 mm tall, 50 mm wide, 40 mm deep\n// Wall thickness kept at 2 mm for printability\n\n// Overall dimensions\noverall_w = 50;\noverall_d = 40;\noverall_h = 100;\n\n// Useful sizes\nwall = 2;\nleg_h = 15;\nleg_w = 4;\ndrawer_h = 14;\nplinth_h = 4;\n\n// Base plinth with feet\nmodule base() {\n    difference() {\n        // Plinth box\n        translate([0, 0, plinth_h/2])\n            cube([overall_w, overall_d, plinth_h], center=true);\n\n        // Recess underneath\n        translate([0, 0, -1])\n            cube([overall_w - wall*2, overall_d - wall*2, plinth_h + 2], center=true);\n    }\n\n    // Four bun feet\n    for (x = [overall_w/2 - leg_w, -(overall_w/2 - leg_w)])\n        for (y = [overall_d/2 - leg_w, -(overall_d/2 - leg_w)])\n            translate([x, y, leg_h/2])\n                cylinder(h = leg_h, d1 = leg_w*1.2, d2 = leg_w*0.8, $fn = 16);\n}\n\n// Drawer module with face, knob and cavity\nmodule drawer_box(w, d, h) {\n    // Outer drawer face\n    difference() {\n        translate([0, 0, h/2])\n            cube([w, d, h], center=true);\n\n        // Recessed panel\n        translate([0, d/2 - wall - 0.5, h/2])\n            cube([w - wall*4, wall, h - wall*4], center=true);\n    }\n\n    // Wooden knob\n    translate([0, d/2 + 2, h/2])\n        cylinder(h = 4, d = 3, $fn = 12);\n\n    // Drawer cavity (printed as part of the carcase)\n    translate([0, 0, h/2 + 0.1])\n        cube([w - wall*2, d - wall, h - wall*2], center=true);\n}\n\n// Carcase with stacked drawers\nmodule carcase() {\n    // Main shell\n    difference() {\n        translate([0, 0, (overall_h - plinth_h)/2 + plinth_h])\n            cube([overall_w, overall_d, overall_h - plinth_h], center=true);\n\n        // Hollow inside\n        translate([0, 0, (overall_h - plinth_h)/2 + plinth_h])\n            cube([overall_w - wall*2, overall_d - wall*2, overall_h - plinth_h - wall], center=true);\n    }\n\n    // Drawer dividers\n    n_drawers = 5;\n    for (i = [0 : n_drawers-1]) {\n        y_pos = plinth_h + drawer_h/2 + i * (drawer_h + wall);\n        // Front rail\n        translate([0, overall_d/2 - wall/2, y_pos])\n            cube([overall_w - wall*2, wall, drawer_h], center=true);\n\n        // Drawer box in place\n        translate([0, overall_d/2 - wall - (overall_d - wall*2)/2, y_pos])\n            drawer_box(overall_w - wall*4, overall_d - wall*2, drawer_h);\n    }\n}\n\n// Moulding cap on top\nmodule top_moulding() {\n    difference() {\n        // Top slab\n        translate([0, 0, overall_h + wall/2])\n            cube([overall_w + wall*2, overall_d + wall*2, wall], center=true);\n\n        // Light chamfer underneath\n        translate([0, 0, overall_h - 0.1])\n            cube([overall_w, overall_d, wall + 0.2], center=true);\n    }\n}\n\n// Assemble the highboy\nunion() {\n    base();\n    carcase();\n    top_moulding();\n}",
    "renders": true
  },
  {
    "furniture": "chifforobe",
    "openscad_code": "// Realistic Chifforobe - Medium Complexity\n// Height: 100mm, Width: 60mm, Depth: 30mm\n// Wall thickness: 2mm throughout\n\nmodule body(width=58, height=98, depth=28) {\n    difference() {\n        // Main body\n        cube([width, height, depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        cube([width-4, height-4, depth-2], center=true);\n    }\n}\n\nmodule door(width=28, height=70, depth=2) {\n    difference() {\n        // Door panel\n        cube([width, height, depth], center=true);\n        \n        // Recessed panel\n        translate([0, 0, -0.5])\n        cube([width-4, height-4, depth+1], center=true);\n        \n        // Door handle hole\n        translate([width/2-3, height/2-10, 0])\n        cylinder(h=3, r=0.5, center=true);\n    }\n    \n    // Door handle\n    translate([width/2-3, height/2-10, 2])\n    cylinder(h=6, r=0.8, center=true);\n}\n\nmodule drawer(width=26, height=12, depth=28) {\n    difference() {\n        // Drawer front\n        cube([width, height, depth], center=true);\n        \n        // Recessed front\n        translate([0, 0, -0.5])\n        cube([width-4, height-4, depth+1], center=true);\n        \n        // Drawer pull holes\n        translate([0, height/2-4, 0])\n        cylinder(h=3, r=0.5, center=true);\n    }\n    \n    // Drawer pull\n    translate([0, height/2-4, 2])\n    cube([8, 2, 1], center=true);\n}\n\nmodule shelf(width=54, height=2, depth=24) {\n    cube([width, height, depth], center=true);\n}\n\nmodule foot(height=4) {\n    cylinder(h=height, r=2, center=false);\n}\n\n// Main assembly\ntranslate([0, 0, 50])\nunion() {\n    // Main body\n    body();\n    \n    // Left door (wider section)\n    translate([-15.5, 0, 0])\n    rotate([0, 0, 0])\n    door(width=28, height=70);\n    \n    // Right door (narrower section)\n    translate([15.5, 0, 0])\n    rotate([0, 0, 0])\n    door(width=28, height=70);\n    \n    // Top drawer\n    translate([0, 39, 0])\n    drawer(width=54, height=12);\n    \n    // Middle drawer\n    translate([0, 25, 0])\n    drawer(width=54, height=12);\n    \n    // Bottom drawer\n    translate([0, 11, 0])\n    drawer(width=54, height=12);\n    \n    // Internal shelf\n    translate([0, -15, 0])\n    shelf();\n    \n    // Feet\n    translate([-25, -49, 0])\n    foot();\n    translate([25, -49, 0])\n    foot();\n    translate([-25, 49, 0])\n    foot();\n    translate([25, 49, 0])\n    foot();\n}",
    "renders": true
  },
  {
    "furniture": "bureau",
    "openscad_code": "// Bureau - realistic style, medium complexity\n// External dimensions 60x40x85 mm (scaled for 3D printing)\n\nmodule leg() {\n    // Tapered square leg with slight chamfer\n    linear_extrude(height = 12, scale = 0.9)\n        offset(delta = -0.5)\n            square([4, 4], center = true);\n}\n\nmodule handle() {\n    // Simple drawer pull handle\n    translate([0, 1, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d = 2, $fn = 16);\n    translate([0, 0, -0.5])\n        cube([6, 2, 1], center = true);\n}\n\nmodule drawer(height) {\n    // Drawer box with front face\n    difference() {\n        // Drawer box\n        cube([25, 35, height - 1], center = true);\n        \n        // Hollow inside\n        translate([0, 0, -1])\n            cube([21, 31, height + 2], center = true);\n        \n        // Handle cutout\n        translate([0, 18, 0])\n            cube([12, 2, 4], center = true);\n    }\n    \n    // Drawer front\n    translate([0, 19, 0])\n        cube([28, 2, height], center = true);\n    \n    // Handle\n    translate([0, 21, 0])\n        handle();\n}\n\n// Main bureau body\ndifference() {\n    // Main carcass\n    cube([60, 40, 70], center = true);\n    \n    // Hollow inside\n    translate([0, 0, -10])\n        cube([56, 36, 60], center = true);\n    \n    // Leg cutouts\n    translate([27, 19, -37])\n        cube([6, 6, 12], center = true);\n    translate([27, -19, -37])\n        cube([6, 6, 12], center = true);\n    translate([-27, 19, -37])\n        cube([6, 6, 12], center = true);\n    translate([-27, -19, -37])\n        cube([6, 6, 12], center = true);\n    \n    // Drawer openings (3 drawers)\n    translate([0, 20, 25])\n        cube([28, 2, 15], center = true);\n    translate([0, 20, 5])\n        cube([28, 2, 15], center = true);\n    translate([0, 20, -15])\n        cube([28, 2, 15], center = true);\n}\n\n// Legs\ntranslate([27, 19, -43])\n    leg();\ntranslate([27, -19, -43])\n    leg();\ntranslate([-27, 19, -43])\n    leg();\ntranslate([-27, -19, -43])\n    leg();\n\n// Drawers\ntranslate([0, 0, 25])\n    drawer(12);\ntranslate([0, 0, 5])\n    drawer(12);\ntranslate([0, 0, -15])\n    drawer(12);\n\n// Top surface with overhang\ntranslate([0, 0, 36])\n    cube([64, 44, 2], center = true);\n\n// Back panel\ntranslate([0, -21, -5])\n    cube([58, 2, 68], center = true);\n\n// Support rail between legs\ntranslate([0, 19, -31])\n    cube([54, 2, 4], center = true);\ntranslate([0, -19, -31])\n    cube([54, 2, 4], center = true);",
    "renders": true
  },
  {
    "furniture": "clothespress",
    "openscad_code": "// Realistic Clothespress (Medium Complexity)\n// Dimensions: 80mm W x 40mm D x 120mm H\n\n$fn=20; // Smooth curves for printing\n\n// Main body module\nmodule clothespress_body() {\n    // Outer shell - 2mm walls\n    difference() {\n        // Main body\n        cube([80, 40, 120], center=false);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([76, 36, 116], center=false);\n    }\n}\n\n// Base frame with legs\nmodule base_frame() {\n    // Front legs\n    translate([5, 5, 0])\n        cylinder(h=10, d=6);\n    translate([75, 5, 0])\n        cylinder(h=10, d=6);\n    \n    // Back legs\n    translate([5, 35, 0])\n        cylinder(h=10, d=6);\n    translate([75, 35, 0])\n        cylinder(h=10, d=6);\n    \n    // Base rails\n    // Front rail\n    translate([40, 5, 5])\n        cube([70, 2, 10], center=true);\n    // Back rail\n    translate([40, 35, 5])\n        cube([70, 2, 10], center=true);\n    // Side rails\n    translate([5, 20, 5])\n        cube([2, 30, 10], center=true);\n    translate([75, 20, 5])\n        cube([2, 30, 10], center=true);\n}\n\n// Door with panel detail\nmodule door() {\n    // Main door panel\n    translate([0, -0.5, 0])\n        cube([39, 2, 80], center=false);\n    \n    // Raised panel\n    translate([2, -0.4, 2])\n        cube([35, 1, 76], center=false);\n    \n    // Handle\n    translate([5, -1, 40])\n        cylinder(h=3, d=4);\n}\n\n// Hinges (3 per door)\nmodule hinges() {\n    for(z=[15, 40, 65]) {\n        translate([0, 0, z])\n            cube([2, 2, 8], center=false);\n    }\n}\n\n// Top cornice molding\nmodule cornice() {\n    // Front cornice\n    translate([40, 1, 120])\n        cube([82, 2, 4], center=true);\n    \n    // Side cornices\n    translate([1, 20, 122])\n        cube([2, 38, 4], center=true);\n    translate([79, 20, 122])\n        cube([2, 38, 4], center=true);\n    \n    // Top surface\n    translate([40, 20, 124])\n        cube([78, 38, 2], center=true);\n}\n\n// Internal shelf\nmodule shelf() {\n    translate([2, 2, 60])\n        cube([76, 36, 2], center=false);\n}\n\n// Door assembly (left and right)\nmodule doors() {\n    // Left door\n    translate([0, 0, 20]) {\n        door();\n        hinges();\n    }\n    \n    // Right door\n    translate([41, 0, 20]) {\n        door();\n        translate([39, 0, 0])\n            mirror([1, 0, 0])\n                hinges();\n    }\n}\n\n// Back panel\nmodule back_panel() {\n    translate([1, 38, 60])\n        cube([78, 2, 116], center=true);\n}\n\n// Main assembly\nunion() {\n    // Assemble from bottom up\n    base_frame();\n    \n    translate([0, 0, 10]) {\n        union() {\n            clothespress_body();\n            back_panel();\n            shelf();\n            doors();\n            cornice();\n        }\n    }\n}",
    "renders": true
  },
  {
    "furniture": "linenpress",
    "openscad_code": "// Linenpress (tall storage cupboard with shelves and drawers)\n// Medium complexity realistic model - 3D printable\n// Dimensions: 60mm W x 35mm D x 100mm H\n\n// Overall dimensions\nwidth = 60;\ndepth = 35;\nheight = 100;\nwall_thickness = 2;\n\n// Module for panel construction\nmodule panel(w, d, h) {\n    difference() {\n        cube([w, d, h], center=false);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([w-2*wall_thickness, d-2*wall_thickness, h-2*wall_thickness], center=false);\n    }\n}\n\n// Module for drawer\nmodule drawer(w, d, h, inset) {\n    difference() {\n        // Drawer box\n        translate([inset, inset, inset])\n            cube([w-2*inset, d-2*inset, h-2*inset], center=false);\n        // Handle hole\n        translate([w/2-2, inset-0.1, h/2-1])\n            cube([4, 2, 2], center=false);\n    }\n    \n    // Handle\n    translate([w/2-1, inset-1.1, h/2])\n        cube([2, 1, 1.5], center=false);\n}\n\n// Main carcass\nunion() {\n    // Base\n    translate([0, 0, 0])\n        panel(width, depth, wall_thickness);\n    \n    // Left side\n    translate([0, 0, 0])\n        panel(wall_thickness, depth, height);\n    \n    // Right side\n    translate([width-wall_thickness, 0, 0])\n        panel(wall_thickness, depth, height);\n    \n    // Back panel\n    translate([0, depth-wall_thickness, 0])\n        panel(width, wall_thickness, height);\n    \n    // Top\n    translate([0, 0, height-wall_thickness])\n        panel(width, depth, wall_thickness);\n    \n    // Middle shelf (divides upper and lower sections)\n    translate([wall_thickness, wall_thickness, height*0.6])\n        panel(width-2*wall_thickness, depth-2*wall_thickness, wall_thickness);\n    \n    // Internal shelf in upper section\n    translate([wall_thickness, wall_thickness, height*0.8])\n        panel(width-2*wall_thickness, depth-2*wall_thickness, wall_thickness);\n    \n    // Door frames\n    // Upper door\n    translate([wall_thickness, 0, height*0.6])\n        panel(width-2*wall_thickness, wall_thickness, height*0.4-wall_thickness);\n    \n    // Lower door frame (around drawers)\n    translate([wall_thickness, 0, wall_thickness])\n        panel(width-2*wall_thickness, wall_thickness, height*0.6-wall_thickness);\n    \n    // Vertical divider between doors\n    translate([width/2-wall_thickness/2, 0, wall_thickness])\n        panel(wall_thickness, wall_thickness, height-wall_thickness*2);\n    \n    // Drawers (3 in lower section)\n    for (i = [0:2]) {\n        drawer_y = wall_thickness + i*(height*0.6-wall_thickness)/3;\n        drawer_h = (height*0.6-wall_thickness)/3 - 2;\n        \n        translate([wall_thickness, drawer_y, wall_thickness])\n            drawer(width/2-wall_thickness*1.5, depth-wall_thickness*2, drawer_h, wall_thickness);\n        \n        translate([width/2+wall_thickness*0.5, drawer_y, wall_thickness])\n            drawer(width/2-wall_thickness*1.5, depth-wall_thickness*2, drawer_h, wall_thickness);\n    }\n    \n    // Door panels (recessed)\n    // Upper left door\n    translate([wall_thickness+1, 1, height*0.6+1])\n        panel(width/2-wall_thickness*1.5-2, wall_thickness-2, height*0.4-wall_thickness-2);\n    \n    // Upper right door\n    translate([width/2+wall_thickness*0.5+1, 1, height*0.6+1])\n        panel(width/2-wall_thickness*1.5-2, wall_thickness-2, height*0.4-wall_thickness-2);\n    \n    // Base molding (decorative)\n    translate([-1, -1, 0])\n        cube([width+2, depth+2, 3]);\n    \n    // Crown molding (decorative)\n    translate([-1, -1, height-3])\n        cube([width+2, depth+2, 3]);\n    \n    // Simple feet\n    foot_size = 4;\n    translate([foot_size, foot_size, -foot_size])\n        cube([foot_size, foot_size, foot_size]);\n    translate([width-foot_size*2, foot_size, -foot_size])\n        cube([foot_size, foot_size, foot_size]);\n    translate([foot_size, depth-foot_size*2, -foot_size])\n        cube([foot_size, foot_size, foot_size]);\n    translate([width-foot_size*2, depth-foot_size*2, -foot_size])\n        cube([foot_size, foot_size, foot_size]);\n}",
    "renders": true
  },
  {
    "furniture": "etagere",
    "openscad_code": "// Etagere (open bookshelf) - 5 shelves, 4 legs, back slats\n// Overall size: 100 mm W x 40 mm D x 120 mm H\n// Wall thickness: 2 mm\n// Printable without supports\n\n// Parameters -------------------------------------------------\nwidth  = 100;   // total width\ndepth  = 40;    // total depth\nheight = 120;   // total height\nwall   = 2;     // wall thickness\nleg    = 4;     // leg cross-section\nshelfT = 2;     // shelf thickness\nslatW  = 4;     // back slat width\nshelfC = 5;     // number of shelves\ngap    = 2;     // gap between slats\n// -------------------------------------------------------------\n\n// Main module\nmodule etagere() {\n    union() {\n        // Four legs\n        for (x = [0, width-leg])\n            for (z = [0, depth-leg])\n                translate([x, z, 0])\n                    legPost();\n        \n        // Shelves\n        shelfSpacing = (height - shelfT) / (shelfC - 1);\n        for (i = [0 : shelfC-1])\n            translate([0, 0, i * shelfSpacing])\n                shelf();\n        \n        // Back slats\n        slatSpacing = (height - shelfT) / ((height - shelfT) / (slatW + gap));\n        for (y = [shelfT : slatW+gap : height-shelfT-slatW])\n            translate([wall, wall, y])\n                slat();\n    }\n}\n\n// Leg post\nmodule legPost() {\n    difference() {\n        cube([leg, leg, height]);\n        // Lightening holes\n        translate([leg/2, leg/2, height/2])\n            rotate([0, 0, 45])\n            cube([leg-2*wall, leg-2*wall, height-wall], center=true);\n    }\n}\n\n// Shelf\nmodule shelf() {\n    difference() {\n        cube([width, depth, shelfT]);\n        // Notches for legs\n        for (x = [0, width-leg])\n            for (z = [0, depth-leg])\n                translate([x, z, -0.1])\n                    cube([leg+0.2, leg+0.2, shelfT+0.2]);\n    }\n}\n\n// Back slat\nmodule slat() {\n    cube([width-2*wall, wall, slatW]);\n}\n\n// Render\netagere();",
    "renders": true
  },
  {
    "furniture": "vitrine",
    "openscad_code": "// Vitrine (display cabinet) - Realistic style, medium complexity\n// Overall dimensions: 60mm W x 40mm D x 100mm H\n\n$fn = 32;\n\nmodule vitrine() {\n    // Main carcass\n    difference() {\n        union() {\n            // Bottom base frame\n            translate([0, 0, 10]) cube([60, 40, 4], center = true);\n            \n            // Left side panel\n            translate([-29, 0, 55]) cube([2, 38, 90], center = true);\n            \n            // Right side panel  \n            translate([29, 0, 55]) cube([2, 38, 90], center = true);\n            \n            // Back panel\n            translate([0, -19, 55]) cube([56, 2, 90], center = true);\n            \n            // Top frame\n            translate([0, 0, 100]) cube([60, 40, 4], center = true);\n            \n            // Internal shelf\n            translate([0, 0, 65]) cube([56, 36, 2], center = true);\n            \n            // Door frame\n            translate([0, 19.5, 55]) cube([56, 1, 90], center = true);\n            translate([0, 19.5, 10]) cube([56, 1, 2], center = true);\n            translate([-27.5, 19.5, 55]) cube([1, 1, 90], center = true);\n            translate([27.5, 19.5, 55]) cube([1, 1, 90], center = true);\n            \n            // Legs\n            for(x = [-25, 25])\n                for(y = [-15, 15])\n                    translate([x, y, 5]) cylinder(h = 10, r = 2);\n            \n            // Back support beam\n            translate([0, 0, 8]) cube([56, 36, 2], center = true);\n        }\n        \n        // Window openings\n        translate([0, 18, 82.5]) cube([52, 1, 35], center = true);\n        translate([0, 18, 42.5]) cube([52, 1, 45], center = true);\n    }\n    \n    // Glass panels (thin boxes)\n    difference() {\n        // Large front window\n        translate([0, 19, 82.5]) cube([54, 0.5, 35], center = true);\n        \n        // Handle hole\n        translate([20, 19, 65]) cube([4, 1, 6], center = true);\n    }\n    \n    difference() {\n        // Lower front window  \n        translate([0, 19, 42.5]) cube([54, 0.5, 45], center = true);\n        \n        // Handle hole\n        translate([20, 19, 35]) cube([4, 1, 6], center = true);\n    }\n    \n    // Side windows\n    translate([-28.5, 0, 82.5]) cube([0.5, 36, 35], center = true);\n    translate([28.5, 0, 82.5]) cube([0.5, 36, 35], center = true);\n    \n    translate([-28.5, 0, 42.5]) cube([0.5, 36, 45], center = true);\n    translate([28.5, 0, 42.5]) cube([0.5, 36, 45], center = true);\n    \n    // Door handles\n    translate([22, 19.5, 65]) cylinder(h = 4, r = 1.5, center = true);\n    rotate([90, 0, 0]) translate([22, 19.5, 65]) cylinder(h = 8, r = 0.8, center = true);\n    \n    translate([22, 19.5, 35]) cylinder(h = 4, r = 1.5, center = true);\n    rotate([90, 0, 0]) translate([22, 19.5, 35]) cylinder(h = 8, r = 0.8, center = true);\n    \n    // Decorative top molding\n    difference() {\n        translate([0, 0, 102]) cube([64, 44, 4], center = true);\n        translate([0, 0, 101]) cube([56, 36, 6], center = true);\n    }\n}\n\nvitrine();",
    "renders": true
  },
  {
    "furniture": "cellarette",
    "openscad_code": "// Realistic Cellarette - Medium Complexity\n// Dimensions: 80x60x110mm (WxDxH)\n\n// Main body module\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 110], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n            cube([76, 56, 100], center=true);\n    }\n}\n\n// Base with legs\nmodule base() {\n    union() {\n        // Bottom panel\n        translate([0, 0, -54])\n            cube([82, 62, 4], center=true);\n        \n        // Four corner legs\n        for (x = [-35, 35])\n            for (y = [-25, 25])\n                translate([x, y, -77])\n                    cylinder(h=25, d=6, center=true);\n    }\n}\n\n// Door with panel detail\nmodule door() {\n    difference() {\n        // Main door slab\n        translate([0, 31, 0])\n            cube([74, 2, 104], center=true);\n        \n        // Recessed panel\n        translate([0, 32, 0])\n            cube([68, 1, 98], center=true);\n        \n        // Door handle hole\n        translate([25, 33, 30])\n            cylinder(h=3, d=4, center=true);\n    }\n}\n\n// Door handle\nmodule handle() {\n    translate([25, 35, 30])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=4, center=true);\n    \n    translate([25, 39, 30])\n        sphere(d=6);\n}\n\n// Top with moulding detail\nmodule top() {\n    difference() {\n        // Main top\n        translate([0, 0, 57])\n            cube([84, 64, 6], center=true);\n        \n        // Bevelled edge\n        translate([0, 0, 60])\n            cube([80, 60, 2], center=true);\n    }\n}\n\n// Ventilation grille pattern\nmodule grille() {\n    for (x = [-30:10:30])\n        for (y = [-20:10:20])\n            translate([x, y, -20])\n                cube([6, 2, 10], center=true);\n}\n\n// Back panel with ventilation\nmodule back() {\n    difference() {\n        // Solid back\n        translate([0, -31, 0])\n            cube([78, 2, 104], center=true);\n        \n        // Ventilation openings\n        translate([0, -30, -20])\n            grille();\n    }\n}\n\n// Internal shelf\nmodule shelf() {\n    translate([0, 0, -15])\n        cube([74, 56, 2], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    base();\n    top();\n    door();\n    handle();\n    back();\n    shelf();\n}",
    "renders": true
  },
  {
    "furniture": "cellaret",
    "openscad_code": "// Medium-complexity OpenSCAD realistic cellaret\n// Overall size: 90 mm (W) × 60 mm (D) × 90 mm (H)\n\n$fa = 1; $fs = 0.5;\nwall = 2;\n\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([90, 60, 90], center = true);\n        // Hollow interior\n        translate([0, 0, wall])\n            cube([90 - 2*wall, 60 - 2*wall, 90 - wall], center = true);\n    }\n}\n\nmodule door() {\n    difference() {\n        // Door panel\n        translate([-44.5, 0, 0])\n            cube([wall + 1, 60 - 2*wall, 70], center = true);\n        // Recessed panel\n        translate([-45, 0, 0])\n            cube([wall + 1, 50, 60], center = true);\n    }\n}\n\nmodule handle() {\n    // Ring pull\n    translate([-45, 30 - wall, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 4, d1 = 6, d2 = 4, center = true);\n    // Backing plate\n    translate([-45, 30 - wall, 0])\n        cube([wall, 10, 6], center = true);\n}\n\nmodule leg() {\n    cylinder(h = 25, d1 = 6, d2 = 4);\n}\n\nmodule legs() {\n    for (x = [-40, 40])\n        for (y = [-25, 25])\n            translate([x, y, -57.5])\n                leg();\n}\n\nmodule molding() {\n    // Top lip\n    difference() {\n        translate([0, 0, 45])\n            cube([94, 64, 4], center = true);\n        translate([0, 0, 43])\n            cube([90, 60, 4], center = true);\n    }\n}\n\nmodule hinge_pins() {\n    for (z = [-25, 25])\n        translate([-44.5, 29, z])\n            cylinder(h = 5, d = 2.5);\n}\n\nunion() {\n    body();\n    molding();\n    legs();\n    door();\n    handle();\n    hinge_pins();\n}",
    "renders": true
  },
  {
    "furniture": "scaffold",
    "openscad_code": "// Scaffold Bench - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm (W) x 50mm (D) x 50mm (H)\n\n$fn = 24;\n\n// Parameters\nleg_width = 8;\nleg_height = 45;\ncross_bar_d = 3;\ntop_plank_t = 4;\nplank_width = 8;\nback_height = 30;\nplank_gap = 2;\nwall_thick = 2;\n\n// Scaffold Leg Module with cross-bracing\nmodule leg_assembly(x_pos, z_pos) {\n    // Vertical post\n    translate([x_pos, 0, z_pos])\n        cube([leg_width, leg_width, leg_height], center=true);\n    \n    // Horizontal cross bars\n    for (h = [0.25, 0.5, 0.75]) {\n        translate([x_pos, 0, z_pos + leg_height*(h - 0.5)])\n            rotate([90, 0, 0])\n                cylinder(d=cross_bar_d, h=leg_width*1.5, center=true);\n    }\n}\n\n// Top seat planks\nmodule seat_planks() {\n    for (i = [-2:2]) {\n        translate([i*(plank_width + plank_gap), 0, leg_height/2 - top_plank_t/2])\n            cube([plank_width, 50 - 2*leg_width - 4, top_plank_t], center=true);\n    }\n}\n\n// Backrest planks\nmodule back_planks() {\n    for (i = [-2:2]) {\n        translate([i*(plank_width + plank_gap), 0, leg_height/2 + back_height/2])\n            cube([plank_width, top_plank_t, back_height], center=true);\n    }\n}\n\n// Diagonal brace\nmodule diagonal_brace(side) {\n    translate([side*(60 - leg_width)/2, 0, leg_height/4])\n        rotate([0, 90 - atan((60 - leg_width)/(leg_height/2)), 0])\n            cylinder(d=cross_bar_d, h=sqrt(sq(60 - leg_width) + sq(leg_height/2)), center=true);\n}\n\n// Scaffold corner brackets\nmodule bracket(x, y) {\n    translate([x, y, leg_height/2 - 2])\n        difference() {\n            cube([6, 6, 4], center=true);\n            translate([0, 0, 2])\n                cube([2, 2, 4], center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Left legs\n    leg_assembly(-60 + leg_width/2 + 2, 0);\n    leg_assembly(-60 + leg_width/2 + 2, 0);\n    \n    // Right legs\n    leg_assembly(60 - leg_width/2 - 2, 0);\n    leg_assembly(60 - leg_width/2 - 2, 0);\n    \n    // Front-back connecting bars\n    translate([0, 25 - leg_width/2 - 2, leg_height/4])\n        rotate([90, 0, 0])\n            cylinder(d=cross_bar_d, h=120 - 2*leg_width - 4, center=true);\n    translate([0, -25 + leg_width/2 + 2, leg_height/4])\n        rotate([90, 0, 0])\n            cylinder(d=cross_bar_d, h=120 - 2*leg_width - 4, center=true);\n    \n    // Diagonal bracing\n    diagonal_brace(1);\n    diagonal_brace(-1);\n    \n    // Seat\n    seat_planks();\n    \n    // Backrest posts\n    translate([0, 25 - leg_width/2 - 2 - top_plank_t/2 - 2, leg_height/2])\n        cube([120 - 2*leg_width - 4, top_plank_t, back_height], center=true);\n    \n    // Backrest planks\n    back_planks();\n    \n    // Corner brackets\n    bracket(-60 + leg_width/2 + 5, 25 - leg_width/2 - 5);\n    bracket(60 - leg_width/2 - 5, 25 - leg_width/2 - 5);\n    bracket(-60 + leg_width/2 + 5, -25 + leg_width/2 + 5);\n    bracket(60 - leg_width/2 - 5, -25 + leg_width/2 + 5);\n}",
    "renders": true
  },
  {
    "furniture": "davenport",
    "openscad_code": "// Davenport (small writing desk with drawers)\n\n// Overall dimensions (in mm) – sized for desktop 3D printing\ndesk_width  = 90;   // writing surface width\ndesk_depth  = 55;   // writing surface depth\ndesk_height = 75;   // top of writing surface\n\nwall = 2;           // uniform wall thickness for printability\n\nmodule davenport() {\n    // Main carcase\n    difference() {\n        // Outer shell\n        cube([desk_width, desk_depth, desk_height], center = true);\n        // Hollow interior\n        translate([0, 0, wall])\n            cube([desk_width - 2*wall, desk_depth - 2*wall, desk_height - wall], center = true);\n    }\n\n    // Writing-surface lid\n    translate([0, desk_depth/2 - wall/2, desk_height/2 - 2]) {\n        rotate([90, 0, 0])\n            cube([desk_width - 2*wall, desk_height/2, wall], center = true);\n    }\n\n    // Front drawer stack\n    for (i = [0:1]) {\n        translate([0, -desk_depth/2 + wall + 1, -desk_height/2 + 10 + i*22]) {\n            difference() {\n                // Drawer front\n                cube([desk_width - 2*wall - 8, wall + 1, 18], center = true);\n                // Recessed handle\n                translate([0, 0, 7])\n                    cube([desk_width/4, wall + 2, 4], center = true);\n            }\n        }\n    }\n\n    // Legs\n    leg_w = 6;\n    leg_h = 60;\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(desk_width/2 - leg_w/2 - wall),\n                       y*(desk_depth/2 - leg_w/2 - wall),\n                       -leg_h/2 - wall])\n                cube([leg_w, leg_w, leg_h], center = true);\n\n    // Back panel\n    translate([0, -desk_depth/2 + wall/2, 0])\n        cube([desk_width - 2*wall, wall, desk_height - 2*wall], center = true);\n\n    // Cubby dividers\n    for (i = [-1, 0, 1]) {\n        translate([i*(desk_width/6), 0, desk_height/4])\n            cube([wall, desk_depth - 2*wall, desk_height/2], center = true);\n    }\n}\n\ndavenport();",
    "renders": true
  },
  {
    "furniture": "escritoire",
    "openscad_code": "// Realistic Escritoire (Secretary Desk)\n// Medium complexity, 3D-printable\n\n$fn = 36;  // Smooth curves\n\n// Overall dimensions (mm)\nescritoire_width = 90;\nescritoire_depth = 45;\nescritoire_height = 110;\n\n// Wall thickness\nwall = 2;\n\nmodule escritoire() {\n    // Main carcass\n    difference() {\n        // Outer shell\n        cube([escritoire_width, escritoire_depth, escritoire_height]);\n        // Hollow inside\n        translate([wall, wall, wall])\n            cube([escritoire_width-2*wall, escritoire_depth-2*wall, escritoire_height-wall]);\n    }\n\n    // Base molding\n    translate([0, 0, -wall])\n        cube([escritoire_width, escritoire_depth, wall]);\n\n    // Top cornice\n    difference() {\n        translate([0, 0, escritoire_height])\n            cube([escritoire_width, escritoire_depth, wall*2]);\n        translate([wall, wall, escritoire_height])\n            cube([escritoire_width-2*wall, escritoire_depth-2*wall, wall*2]);\n    }\n\n    // Writing surface (drop-front)\n    translate([-wall/2, wall, escritoire_height*0.6])\n        rotate([90, 0, 0])\n        cube([escritoire_width+wall, escritoire_depth*0.7, wall*2]);\n\n    // Small drawers below writing surface\n    drawer_width = (escritoire_width - 4*wall)/3;\n    for (i=[0:2]) {\n        translate([wall + i*(drawer_width+wall), wall*2, escritoire_height*0.3])\n            cube([drawer_width, escritoire_depth-4*wall, escritoire_height*0.25]);\n        \n        // Drawer fronts\n        translate([wall + i*(drawer_width+wall) + wall/2, wall, escritoire_height*0.3 + wall/2])\n            cube([drawer_width - wall, escritoire_depth-3*wall, escritoire_height*0.25]);\n        \n        // Drawer pulls\n        translate([wall + i*(drawer_width+wall) + drawer_width/2, wall/2, escritoire_height*0.3 + escritoire_height*0.125])\n            cylinder(h=wall, r=wall/2);\n    }\n\n    // Upper cabinet with pigeonholes\n    translate([wall, wall, escritoire_height*0.55])\n    difference() {\n        cube([escritoire_width-2*wall, escritoire_depth-2*wall, escritoire_height*0.4]);\n        \n        // Pigeonholes\n        for (x=[0:1]) {\n            for (y=[0:2]) {\n                translate([wall + x*(escritoire_width-4*wall)/2, wall + y*(escritoire_depth-4*wall)/3, wall])\n                    cube([(escritoire_width-6*wall)/2, (escritoire_depth-6*wall)/3, escritoire_height*0.4-wall]);\n            }\n        }\n    }\n\n    // Cabinet doors (closed position)\n    translate([wall/2, -wall/2, escritoire_height*0.55])\n        cube([escritoire_width/2 - wall, wall, escritoire_height*0.4]);\n    \n    translate([escritoire_width/2 + wall/2, -wall/2, escritoire_height*0.55])\n        cube([escritoire_width/2 - 1.5*wall, wall, escritoire_height*0.4]);\n\n    // Legs\n    leg_size = 4;\n    leg_positions = [[leg_size, leg_size], \n                    [escritoire_width-leg_size, leg_size],\n                    [leg_size, escritoire_depth-leg_size],\n                    [escritoire_width-leg_size, escritoire_depth-leg_size]];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], -15])\n            cylinder(h=15, r=leg_size);\n    }\n\n    // Back panel\n    translate([-wall, 0, 0])\n        cube([wall, escritoire_depth, escritoire_height]);\n}\n\nescritoire();",
    "renders": true
  },
  {
    "furniture": "bed",
    "openscad_code": "// Realistic Bed Model - Medium Complexity\n// Overall dimensions: 120mm x 80mm x 55mm\n\n// Bed parameters\nbed_width = 120;\nbed_length = 80;\nbed_height = 55;\nmattress_thickness = 12;\nframe_thickness = 3;\nleg_height = 15;\nleg_size = 8;\n\n// Main bed frame\nmodule bed_frame() {\n    // Base frame\n    difference() {\n        // Outer frame\n        cube([bed_width, bed_length, frame_thickness]);\n        \n        // Inner cavity\n        translate([frame_thickness, frame_thickness, -1])\n            cube([bed_width - 2*frame_thickness, bed_length - 2*frame_thickness, frame_thickness + 2]);\n    }\n}\n\n// Headboard\nmodule headboard() {\n    // Main headboard panel\n    translate([-frame_thickness/2, 0, frame_thickness])\n        cube([frame_thickness, bed_length, bed_height - frame_thickness]);\n    \n    // Headboard posts\n    for(y = [frame_thickness, bed_length - leg_size - frame_thickness]) {\n        translate([-leg_size/2 - frame_thickness/2, y, 0])\n            cube([leg_size, leg_size, bed_height]);\n    }\n    \n    // Headboard top rail\n    translate([-leg_size/2 - frame_thickness/2, leg_size/2, bed_height - frame_thickness])\n        cube([leg_size + frame_thickness, bed_length - leg_size, frame_thickness]);\n}\n\n// Footboard\nmodule footboard() {\n    // Main footboard panel\n    translate([bed_width, 0, frame_thickness])\n        cube([frame_thickness, bed_length, bed_height - frame_thickness - 15]);\n    \n    // Footboard posts\n    for(y = [frame_thickness, bed_length - leg_size - frame_thickness]) {\n        translate([bed_width, y, 0])\n            cube([leg_size, leg_size, leg_height]);\n    }\n}\n\n// Bed legs\nmodule bed_legs() {\n    // Four corner legs\n    positions = [\n        [0, 0],\n        [0, bed_length - leg_size],\n        [bed_width - leg_size, 0],\n        [bed_width - leg_size, bed_length - leg_size]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 0])\n            cube([leg_size, leg_size, leg_height]);\n    }\n}\n\n// Mattress support slats\nmodule slats() {\n    slat_width = 3;\n    slat_gap = 10;\n    num_slats = floor((bed_width - 2*frame_thickness) / (slat_width + slat_gap));\n    \n    for(i = [0:num_slats-1]) {\n        x_pos = frame_thickness + i * (slat_width + slat_gap);\n        translate([x_pos, frame_thickness, leg_height])\n            cube([slat_width, bed_length - 2*frame_thickness, 2]);\n    }\n}\n\n// Mattress\nmodule mattress() {\n    translate([frame_thickness, frame_thickness, leg_height + 2])\n        cube([bed_width - 2*frame_thickness, bed_length - 2*frame_thickness, mattress_thickness]);\n    \n    // Mattress tufting details\n    for(x = [1:3]) {\n        for(y = [1:2]) {\n            translate([\n                frame_thickness + x * (bed_width - 2*frame_thickness)/4,\n                frame_thickness + y * (bed_length - 2*frame_thickness)/3,\n                leg_height + 2 + mattress_thickness - 1\n            ])\n                sphere(d=2);\n        }\n    }\n}\n\n// Pillow\nmodule pillow() {\n    translate([frame_thickness + 5, frame_thickness + 10, leg_height + 2 + mattress_thickness + 1])\n        scale([1, 0.7, 0.3])\n            cube([20, 30, 10]);\n}\n\n// Blanket\nmodule blanket() {\n    translate([frame_thickness + 10, frame_thickness + 5, leg_height + 2 + mattress_thickness + 2])\n        cube([bed_width - 2*frame_thickness - 15, bed_length - 2*frame_thickness - 10, 1.5]);\n}\n\n// Side rail details\nmodule side_rails() {\n    // Left side rail\n    translate([frame_thickness, 0, leg_height/2])\n        cube([bed_width - 2*frame_thickness, frame_thickness, leg_height]);\n    \n    // Right side rail\n    translate([frame_thickness, bed_length - frame_thickness, leg_height/2])\n        cube([bed_width - 2*frame_thickness, frame_thickness, leg_height]);\n}\n\n// Assemble the bed\nunion() {\n    bed_frame();\n    headboard();\n    footboard();\n    bed_legs();\n    slats();\n    mattress();\n    pillow();\n    blanket();\n    side_rails();\n}",
    "renders": true
  },
  {
    "furniture": "mirror",
    "openscad_code": "// Realistic Standing Mirror - Medium Complexity\n// Overall dimensions: 80mm wide x 20mm deep x 120mm tall\n\n// Parameters\nmirror_width = 60;\nmirror_height = 80;\nframe_thickness = 3;\nframe_width = 4;\nleg_thickness = 6;\nbase_depth = 20;\nbase_height = 4;\nback_support_width = 8;\n\n// Main mirror assembly\nmodule mirror_assembly() {\n    difference() {\n        // Outer frame\n        cube([mirror_width + 2*frame_width, frame_thickness, mirror_height + 2*frame_width], center=true);\n        \n        // Inner cutout for mirror\n        translate([0, 1, 0])\n            cube([mirror_width, frame_thickness + 2, mirror_height], center=true);\n    }\n    \n    // Mirror glass (slightly recessed)\n    translate([0, -0.5, 0])\n        cube([mirror_width - 1, 1, mirror_height - 1], center=true);\n    \n    // Frame details - top decoration\n    translate([0, frame_thickness/2, mirror_height/2 + frame_width/2])\n        cube([mirror_width + 10, frame_thickness, frame_width], center=true);\n    \n    // Frame details - bottom decoration\n    translate([0, frame_thickness/2, -mirror_height/2 - frame_width/2])\n        cube([mirror_width + 10, frame_thickness, frame_width], center=true);\n}\n\n// Left leg\nmodule left_leg() {\n    translate([-mirror_width/2 + leg_thickness/2, -base_depth/2 + leg_thickness/2, -mirror_height/2 - base_height - 5])\n        cube([leg_thickness, leg_thickness, mirror_height/2 + base_height + 5]);\n}\n\n// Right leg\nmodule right_leg() {\n    translate([mirror_width/2 - leg_thickness/2, -base_depth/2 + leg_thickness/2, -mirror_height/2 - base_height - 5])\n        cube([leg_thickness, leg_thickness, mirror_height/2 + base_height + 5]);\n}\n\n// Base\nmodule base() {\n    translate([0, 0, -mirror_height/2 - base_height/2 - 5])\n        cube([mirror_width + 20, base_depth, base_height]);\n    \n    // Base front curve detail\n    for(i = [0:5:base_depth/2]) {\n        translate([0, base_depth/2 - i, -mirror_height/2 - base_height - 5])\n            cube([mirror_width + 20 - i*2, 2, base_height + i/3], center=true);\n    }\n}\n\n// Back support\nmodule back_support() {\n    translate([0, base_depth/2 - back_support_width/2, -mirror_height/2 - base_height/2 - 2.5])\n        rotate([0, 15, 0])\n            cube([back_support_width, back_support_width, mirror_height/2 + base_height], center=true);\n}\n\n// Assembly\nunion() {\n    // Mirror and frame\n    translate([0, 0, mirror_height/2])\n        mirror_assembly();\n    \n    // Legs\n    left_leg();\n    right_leg();\n    \n    // Base\n    base();\n    \n    // Back support\n    back_support();\n    \n    // Decorative joints\n    translate([-mirror_width/2 + leg_thickness/2, -base_depth/2 + leg_thickness/2, -mirror_height/2 - base_height - 2.5])\n        cylinder(h=5, r=leg_thickness/2 + 1, $fn=16);\n    \n    translate([mirror_width/2 - leg_thickness/2, -base_depth/2 + leg_thickness/2, -mirror_height/2 - base_height - 2.5])\n        cylinder(h=5, r=leg_thickness/2 + 1, $fn=16);\n}",
    "renders": true
  },
  {
    "furniture": "headboard",
    "openscad_code": "// Realistic Medium-Complexity Headboard\n// Dimensions: 120 mm wide × 60 mm high × 15 mm deep\n// Wall thickness: 2 mm throughout, printable without supports\n\n// Overall headboard frame\nmodule headboard_frame() {\n    // Main rectangular back panel\n    difference() {\n        cube([120, 60, 15], center=true);\n        translate([0, 0, 1])\n            cube([116, 56, 16], center=true);  // Hollow out 2 mm walls\n    }\n}\n\n// Top rail with slight curve\nmodule top_rail() {\n    difference() {\n        // Main rail body\n        translate([0, 28, 0])\n            cube([118, 6, 15], center=true);\n        \n        // Carved groove on top\n        translate([0, 28, 7.5])\n            cube([114, 2, 1.5], center=true);\n        \n        // Rounded top edge\n        translate([0, 31, 0])\n            rotate([90, 0, 0])\n                cylinder(h=118, r=3, center=true);\n    }\n}\n\n// Vertical posts (legs)\nmodule posts() {\n    for (x = [-55, 55]) {\n        // Left and right posts\n        difference() {\n            translate([x, -25, 0])\n                cube([10, 20, 15], center=true);\n            \n            // Mortise joints for rails (simple rectangular cutouts)\n            translate([x, -15, 0])\n                cube([6, 8, 8], center=true);\n        }\n    }\n}\n\n// Horizontal slats\nmodule slats() {\n    slat_count = 5;\n    slat_width = 8;\n    spacing = 100 / (slat_count - 1);\n    \n    for (i = [0:slat_count-1]) {\n        x_pos = -50 + i * spacing;\n        difference() {\n            translate([x_pos, 0, 0])\n                cube([slat_width, 40, 2], center=true);\n            \n            // Tenon ends for joints\n            translate([x_pos, -20, 0])\n                cube([slat_width - 2, 2, 4], center=true);\n            translate([x_pos, 20, 0])\n                cube([slat_width - 2, 2, 4], center=true);\n        }\n    }\n}\n\n// Decorative cap detail on top\nmodule cap_detail() {\n    difference() {\n        translate([0, 32, 0])\n            cube([110, 4, 15], center=true);\n        \n        // Beveled edges\n        translate([0, 34, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h=110, r=2, center=true);\n    }\n}\n\n// Side support brackets\nmodule brackets() {\n    for (y = [-20, 20]) {\n        translate([58, y, 0])\n            rotate([0, 0, 45])\n                difference() {\n                    cube([8, 2, 15], center=true);\n                    translate([0, 0, 7])\n                        cube([6, 1, 13], center=true);\n                }\n        \n        translate([-58, y, 0])\n            rotate([0, 0, -45])\n                difference() {\n                    cube([8, 2, 15], center=true);\n                    translate([0, 0, 7])\n                        cube([6, 1, 13], center=true);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    headboard_frame();\n    top_rail();\n    posts();\n    slats();\n    cap_detail();\n    brackets();\n}",
    "renders": true
  },
  {
    "furniture": "trunk",
    "openscad_code": "// Realistic 3D-printable wooden trunk (medium complexity)\n// Overall dimensions: 80 x 50 x 45 mm (L x W x H)\n\n$fn = 32;\n\nmodule trunk_assembly() {\n    difference() {\n        // Main body\n        trunk_body();\n\n        // Interior cavity\n        translate([2,2,2])\n            cube([76,46,38]);\n    }\n\n    // Hinged lid\n    translate([40,50,45]) rotate([180,0,0]) trunk_lid();\n\n    // Metal corner brackets\n    corner_brackets();\n\n    // Lock plate\n    lock_plate();\n\n    // Handles\n    handles();\n}\n\nmodule trunk_body() {\n    // Base frame\n    difference() {\n        // Main box\n        cube([80,50,45]);\n\n        // Rounded top edge\n        translate([0,0,42])\n            minkowski() {\n                cube([80,50,3]);\n                cylinder(r=3,h=1);\n            }\n    }\n\n    // Side planks\n    for (i=[1:6]) {\n        translate([i*12-6,1.5,2])\n            cube([2,47,41]);\n    }\n    for (i=[1:10]) {\n        translate([1.5,i*5-2.5,2])\n            cube([77,2,41]);\n    }\n}\n\nmodule trunk_lid() {\n    // Lid frame\n    difference() {\n        cube([80,50,3]);\n\n        // Top rounding\n        translate([0,0,0])\n            minkowski() {\n                cube([80,50,3]);\n                cylinder(r=2,h=1);\n            }\n    }\n\n    // Lid planks\n    for (i=[1:6]) {\n        translate([i*12-6,1.5,0])\n            cube([2,47,3]);\n    }\n}\n\nmodule corner_brackets() {\n    // Bottom corners\n    for (x=[0:1]) for (y=[0:1]) {\n        translate([x*78,y*48,0])\n            corner_bracket();\n    }\n    \n    // Top corners (body)\n    for (x=[0:1]) for (y=[0:1]) {\n        translate([x*78,y*48,43])\n            corner_bracket();\n    }\n}\n\nmodule corner_bracket() {\n    // Simple L-shaped bracket\n    union() {\n        translate([0,0,0]) cube([2,10,2]);\n        translate([0,0,0]) cube([10,2,2]);\n    }\n}\n\nmodule lock_plate() {\n    // Front lock plate\n    translate([38,0,20])\n        cube([4,2,10]);\n    \n    // Lock keyhole\n    translate([39,1,24])\n        cylinder(h=3,r1=1.5,r2=1.5);\n}\n\nmodule handles() {\n    // Left handle\n    translate([0,25,25])\n        rotate([90,0,0])\n            cylinder(h=5,r1=3,r2=3);\n    \n    // Right handle\n    translate([80,25,25])\n        rotate([90,0,0])\n            cylinder(h=5,r1=3,r2=3);\n    \n    // Handle supports\n    for (side=[0,1]) {\n        translate([side*80,20,22])\n            cube([2,10,6]);\n    }\n}\n\ntrunk_assembly();",
    "renders": true
  },
  {
    "furniture": "bookshelf",
    "openscad_code": "// Realistic 3D-printable bookshelf – medium complexity\n// Overall height: 100 mm, width: 80 mm, depth: 30 mm\n// Wall thickness: 2 mm throughout\n\n$fn = 32;          // smooth curves\nwall = 2;          // uniform wall thickness\n\n/* Overall dimensions */\nh_total = 100;\nw_total = 80;\nd_total = 30;\n\n/* Derived sizes */\nshelf_h = (h_total - 4*wall)/4;   // four equal openings\nshelf_d = d_total - wall;\n\nmodule board(l, w, t) {\n    // helper for wooden panels\n    cube([l, w, t], center = false);\n}\n\nmodule shelf_unit() {\n    /* Side panels */\n    translate([0, 0, 0])\n        board(wall, d_total, h_total);\n\n    translate([w_total - wall, 0, 0])\n        board(wall, d_total, h_total);\n\n    /* Back panel */\n    translate([wall, d_total - wall, 0])\n        board(w_total - 2*wall, wall, h_total);\n\n    /* Top */\n    translate([wall, wall, h_total - wall])\n        board(w_total - 2*wall, shelf_d, wall);\n\n    /* Bottom */\n    translate([wall, wall, 0])\n        board(w_total - 2*wall, shelf_d, wall);\n\n    /* Shelves */\n    for (i = [1:3]) {\n        translate([wall, wall, i*(shelf_h + wall)])\n            board(w_total - 2*wall, shelf_d, wall);\n    }\n\n    /* Decorative face-frame */\n    frame_w = 3;\n    // top front rail\n    translate([wall - frame_w/2 + wall/2, wall - frame_w/2, h_total - wall])\n        board(w_total - wall, frame_w, wall + frame_w);\n    // bottom front rail\n    translate([wall - frame_w/2 + wall/2, wall - frame_w/2, 0])\n        board(w_total - wall, frame_w, wall + frame_w);\n    // left front rail\n    translate([wall - frame_w/2, wall - frame_w/2, 0])\n        board(frame_w, shelf_d + frame_w, h_total);\n    // right front rail\n    translate([w_total - wall - frame_w/2, wall - frame_w/2, 0])\n        board(frame_w, shelf_d + frame_w, h_total);\n}\n\n/* Optional plinth base for furniture look */\nmodule plinth() {\n    plinth_h = 4;\n    difference() {\n        translate([-2, -2, -plinth_h])\n            cube([w_total + 4, d_total + 4, plinth_h]);\n        translate([wall - 2, wall - 2, -plinth_h])\n            cube([w_total - 2*wall + 4, d_total - 2*wall + 4, plinth_h + 0.01]);\n    }\n}\n\n/* Assemble */\nunion() {\n    shelf_unit();\n    plinth();\n}",
    "renders": true
  },
  {
    "furniture": "cubby",
    "openscad_code": "// Realistic 3D-printable cubby shelf (medium complexity)\n// Overall size: 120 x 100 x 140 mm\n// Wall thickness: 2 mm\n// No overhangs >45°\n\n// Main parameters\nwidth = 120;\ndepth = 100;\nheight = 140;\nwall = 2;\nlegH = 8;\ncompRows = 3;\ncompCols = 2;\n\n// Overall cubby module\nmodule cubbyBody() {\n    difference() {\n        // Main box\n        cube([width, depth, height]);\n\n        // Hollow inside\n        translate([wall, wall, wall])\n            cube([width - 2*wall, depth - 2*wall, height - wall]);\n    }\n}\n\n// Single compartment divider (vertical)\nmodule vertDiv() {\n    translate([(width - 2*wall)/compCols, 0, 0])\n        cube([wall, depth, height - wall]);\n}\n\n// Single compartment divider (horizontal)\nmodule horizDiv() {\n    translate([0, 0, (height - wall)/compRows])\n        cube([width, depth - 2*wall, wall]);\n}\n\n// Leg module (simple tapered cylinder for printability)\nmodule leg() {\n    cylinder(h = legH, r1 = 4, r2 = 3, $fn = 16);\n}\n\n// Back panel with nail holes\nmodule backPanel() {\n    difference() {\n        translate([0, depth - wall, 0])\n            cube([width, wall, height]);\n        // Nail holes\n        for (x = [20:40:width-20])\n            for (y = [20:40:height-20])\n                translate([x, depth - wall/2, y])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall + 0.1, r = 1, $fn = 8);\n    }\n}\n\n// Shelf pin holes for adjustable shelves (drilled in dividers)\nmodule shelfPinHoles() {\n    for (row = [0:compRows-2]) {\n        pinZ = (height - wall)/(compRows) * (row + 1) + legH;\n        for (col = [0:compCols-1]) {\n            pinX = wall + (width - 2*wall)/compCols * (col + 0.5);\n            translate([pinX, wall + 5, pinZ])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 0.1, r = 1.5, $fn = 8);\n            translate([pinX, depth - wall - 5, pinZ])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 0.1, r = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with compartments\n    translate([0, 0, legH])\n        cubbyBody();\n\n    // Vertical dividers\n    for (i = [1:compCols-1])\n        translate([(width - 2*wall)/compCols * i, 0, legH])\n            vertDiv();\n\n    // Horizontal dividers\n    for (i = [1:compRows-1])\n        translate([0, 0, (height - wall)/compRows * i + legH])\n            horizDiv();\n\n    // Back panel\n    translate([0, 0, legH])\n        backPanel();\n\n    // Shelf pin holes\n    translate([0, 0, 0])\n        shelfPinHoles();\n\n    // Legs at corners\n    translate([wall + 5, wall + 5, 0])\n        leg();\n    translate([width - wall - 5, wall + 5, 0])\n        leg();\n    translate([width - wall - 5, depth - wall - 5, 0])\n        leg();\n    translate([wall + 5, depth - wall - 5, 0])\n        leg();\n}",
    "renders": true
  },
  {
    "furniture": "hamper",
    "openscad_code": "// Hamper with lid and slatted sides\n// Dimensions: 80 x 55 x 65 mm (W x D x H)\n\n$fn = 32;\n\n// Main parameters\nbody_width = 80;\nbody_depth = 55;\nbody_height = 50;\nlid_thickness = 4;\nleg_height = 15;\nwall_thickness = 2;\nslat_width = 4;\nslat_gap = 2;\n\n// Main body\nmodule hamper_body() {\n    difference() {\n        // Outer frame\n        union() {\n            // Bottom\n            translate([0, 0, leg_height])\n                cube([body_width, body_depth, wall_thickness], center=true);\n            \n            // Front and back\n            for(side = [-1, 1])\n                translate([0, side * (body_depth/2 - wall_thickness/2), leg_height + body_height/2])\n                    cube([body_width, wall_thickness, body_height], center=true);\n            \n            // Left and right\n            for(side = [-1, 1])\n                translate([side * (body_width/2 - wall_thickness/2), 0, leg_height + body_height/2])\n                    cube([wall_thickness, body_depth, body_height], center=true);\n        }\n        \n        // Interior hollow\n        translate([0, 0, leg_height + wall_thickness])\n            cube([body_width - 2*wall_thickness, body_depth - 2*wall_thickness, body_height - wall_thickness], center=true);\n        \n        // Slat holes in front\n        for(i = [0:9]) {\n            translate([0, (body_depth/2 - wall_thickness/2), leg_height + 5 + i*4.5])\n                cube([body_width - 2*wall_thickness, wall_thickness + 0.2, slat_width], center=true);\n        }\n        \n        // Slat holes in back\n        for(i = [0:9]) {\n            translate([0, -(body_depth/2 - wall_thickness/2), leg_height + 5 + i*4.5])\n                cube([body_width - 2*wall_thickness, wall_thickness + 0.2, slat_width], center=true);\n        }\n    }\n}\n\n// Slatted panels\nmodule slatted_panels() {\n    // Front panel slats\n    for(i = [0:9]) {\n        translate([0, body_depth/2 - wall_thickness/2, leg_height + 5 + i*4.5])\n            cube([body_width - 2*wall_thickness, wall_thickness, slat_width], center=true);\n    }\n    \n    // Back panel slats\n    for(i = [0:9]) {\n        translate([0, -body_depth/2 + wall_thickness/2, leg_height + 5 + i*4.5])\n            cube([body_width - 2*wall_thickness, wall_thickness, slat_width], center=true);\n    }\n}\n\n// Legs\nmodule legs() {\n    leg_size = 4;\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * (body_width/2 - leg_size), y * (body_depth/2 - leg_size), leg_height/2])\n                cube([leg_size, leg_size, leg_height], center=true);\n}\n\n// Lid with handle\nmodule lid() {\n    difference() {\n        // Main lid\n        translate([0, 0, leg_height + body_height + lid_thickness/2])\n            cube([body_width + 2, body_depth + 2, lid_thickness], center=true);\n        \n        // Handle recess\n        translate([0, 0, leg_height + body_height + lid_thickness/2])\n            cube([body_width/2, body_depth/3, lid_thickness + 0.2], center=true);\n    }\n    \n    // Handle\n    translate([0, 0, leg_height + body_height + lid_thickness + 2])\n        cube([body_width/3, body_depth/4, 4], center=true);\n}\n\n// Assembly\nunion() {\n    hamper_body();\n    slatted_panels();\n    legs();\n    lid();\n}",
    "renders": true
  },
  {
    "furniture": "ladder",
    "openscad_code": "// Realistic medium-complexity 3D-printable ladder furniture item\n// Overall height ~120 mm, width ~50 mm, depth ~20 mm\n\n// Parameters\nladder_height = 120;\nladder_width  = 50;\nladder_depth  = 20;\nrail_thick    = 4;\nrung_thick    = 3;\nrung_spacing  = 25;\nwall_thick    = 2;\n\n// Helper module for a rounded-end bar\nmodule rounded_bar(len, dia, orient=[0,0,1]) {\n    assign($fn=16)\n    rotate(a=orient, v=[1,0,0])\n    union() {\n        cylinder(h=len-dia, d=dia, center=true);\n        translate([0,0,(len-dia)/2]) sphere(d=dia);\n        translate([0,0,-(len-dia)/2]) sphere(d=dia);\n    }\n}\n\n// Single ladder rail with rounded top and bottom\nmodule rail(len=ladder_height) {\n    difference() {\n        union() {\n            // Main rail body\n            translate([0,0,len/2])\n                cube([rail_thick, ladder_depth, len], center=true);\n            // Rounded top cap\n            translate([0,0,len-rail_thick/2])\n                rotate([90,0,0])\n                    cylinder(h=rail_thick, d=ladder_depth, center=true);\n            // Rounded bottom cap\n            translate([0,0,rail_thick/2])\n                rotate([90,0,0])\n                    cylinder(h=rail_thick, d=ladder_depth, center=true);\n        }\n        // Hollow core for 3D-printing material saving\n        translate([0,0,len/2])\n            cube([rail_thick-wall_thick*2,\n                  ladder_depth-wall_thick*2,\n                  len-wall_thick*2], center=true);\n    }\n}\n\n// Single rung with rounded edges\nmodule rung(width=ladder_width) {\n    difference() {\n        union() {\n            // Main rung body\n            translate([0,0,0])\n                cube([width-rail_thick*2, ladder_depth, rung_thick], center=true);\n            // Rounded front edge\n            translate([0,ladder_depth/2-rung_thick/2,0])\n                rotate([0,90,0])\n                    cylinder(h=width-rail_thick*2, d=rung_thick, center=true);\n            // Rounded back edge\n            translate([0,-ladder_depth/2+rung_thick/2,0])\n                rotate([0,90,0])\n                    cylinder(h=width-rail_thick*2, d=rung_thick, center=true);\n        }\n        // Hollow core\n        translate([0,0,0])\n            cube([width-rail_thick*2-wall_thick*2,\n                  ladder_depth-wall_thick*2,\n                  rung_thick-wall_thick*2], center=true);\n    }\n}\n\n// Reinforcement block between rail and rung\nmodule joint_block() {\n    difference() {\n        cube([rung_thick+2, ladder_depth, rung_thick+2], center=true);\n        translate([0,0,0])\n            cube([rung_thick, ladder_depth-wall_thick, rung_thick], center=true);\n    }\n}\n\n// Assemble the ladder\nmodule ladder_assembly() {\n    union() {\n        // Left rail\n        translate([-ladder_width/2+rail_thick/2, 0, 0])\n            rail();\n\n        // Right rail\n        translate([ ladder_width/2-rail_thick/2, 0, 0])\n            rail();\n\n        // Rungs and joints\n        for (z = [rung_spacing : rung_spacing : ladder_height-rung_spacing*1.5]) {\n            // Rung\n            translate([0, 0, z])\n                rung();\n\n            // Joint blocks for realistic furniture look and strength\n            translate([-ladder_width/2+rail_thick/2, 0, z])\n                joint_block();\n            translate([ ladder_width/2-rail_thick/2, 0, z])\n                mirror([1,0,0])\n                    joint_block();\n        }\n\n        // Bottom stabilising feet pads\n        translate([-ladder_width/2+rail_thick/2, 0, rail_thick/2])\n            cube([rail_thick+1, ladder_depth+2, 2], center=true);\n        translate([ ladder_width/2-rail_thick/2, 0, rail_thick/2])\n            cube([rail_thick+1, ladder_depth+2, 2], center=true);\n    }\n}\n\n// Render the ladder\nladder_assembly();",
    "renders": true
  },
  {
    "furniture": "crib",
    "openscad_code": "// Realistic Crib - Medium Complexity\n// Dimensions: 90mm x 60mm x 70mm\n\n// Overall parameters\ncrib_length = 90;\ncrib_width = 60;\ncrib_height = 70;\nwall_thickness = 2;\npost_diameter = 6;\npost_spacing = 12;\nrail_thickness = 2;\n\n// Module for rounded cube edges\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        cylinder(r=radius, h=0.01);\n    }\n}\n\n// Module for crib posts\nmodule crib_post(x, y) {\n    translate([x, y, 0])\n    union() {\n        // Main post\n        cylinder(d=post_diameter, h=crib_height);\n        // Post top finial\n        translate([0, 0, crib_height])\n        sphere(d=post_diameter * 1.2);\n    }\n}\n\n// Module for side rails\nmodule side_rails(length, is_long_side) {\n    rail_count = floor((length - post_diameter) / post_spacing);\n    for(i = [0:1:3]) {\n        y_pos = (i * (crib_height - 20)) / 3 + 15;\n        translate([0, 0, y_pos])\n        cube([length, rail_thickness, 10]);\n    }\n    \n    // Vertical slats\n    for(i = [1:1:rail_count - 1]) {\n        x_pos = i * post_spacing + post_diameter/2;\n        translate([x_pos, rail_thickness/2, 10])\n        cube([rail_thickness, wall_thickness, crib_height - 20]);\n    }\n}\n\n// Module for mattress base\nmodule mattress_base() {\n    // Base frame\n    translate([wall_thickness, wall_thickness, 0])\n    cube([crib_length - 2*wall_thickness, crib_width - 2*wall_thickness, 5]);\n    \n    // Support slats\n    slat_width = 4;\n    slat_spacing = 10;\n    slat_count = floor((crib_width - 2*wall_thickness) / slat_spacing);\n    \n    for(i = [1:1:slat_count - 1]) {\n        y_pos = i * slat_spacing;\n        translate([wall_thickness, y_pos, 2])\n        cube([crib_length - 2*wall_thickness, slat_width, 3]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bottom frame\n    translate([0, 0, 0])\n    rounded_cube([crib_length, crib_width, 5], 3);\n    \n    // Corner posts\n    crib_post(post_diameter/2, post_diameter/2);\n    crib_post(crib_length - post_diameter/2, post_diameter/2);\n    crib_post(post_diameter/2, crib_width - post_diameter/2);\n    crib_post(crib_length - post_diameter/2, crib_width - post_diameter/2);\n    \n    // Side rails - long sides\n    translate([post_diameter/2, post_diameter/2, 5])\n    rotate([0, 0, 0])\n    side_rails(crib_length - post_diameter, true);\n    \n    translate([post_diameter/2, crib_width - post_diameter/2 - rail_thickness, 5])\n    rotate([0, 0, 0])\n    side_rails(crib_length - post_diameter, true);\n    \n    // Side rails - short sides\n    translate([post_diameter/2, post_diameter/2, 5])\n    rotate([0, 0, 90])\n    side_rails(crib_width - post_diameter, false);\n    \n    translate([crib_length - post_diameter/2 - rail_thickness, post_diameter/2, 5])\n    rotate([0, 0, 90])\n    side_rails(crib_width - post_diameter, false);\n    \n    // Mattress base\n    translate([0, 0, 8])\n    mattress_base();\n    \n    // Mattress\n    translate([5, 5, 15])\n    rounded_cube([crib_length - 10, crib_width - 10, 8], 2);\n    \n    // Headboard detail\n    translate([0, 0, crib_height - 15])\n    cube([crib_length, crib_width, 2]);\n    \n    // Small decorative elements on posts\n    for(x = [post_diameter/2, crib_length - post_diameter/2]) {\n        for(y = [post_diameter/2, crib_width - post_diameter/2]) {\n            translate([x, y, crib_height - 10])\n            cylinder(d=post_diameter * 1.5, h=2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "furniture": "cradle",
    "openscad_code": "// Realistic Baby Cradle - Medium Complexity\n// Overall dimensions: 120mm L x 70mm W x 85mm H\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;\n\n// Main cradle body module\nmodule cradle_body() {\n    // Base platform with rounded edges\n    translate([0, 0, 10])\n        minkowski() {\n            cube([110, 60, 2], center = true);\n            cylinder(h = 0.1, r = 2);\n        }\n    \n    // Left side panel\n    difference() {\n        // Outer frame\n        translate([-55, 0, 40])\n            cube([4, 64, 50], center = true);\n        \n        // Inner cutouts for slats\n        for (i = [-20:10:20]) {\n            translate([-55, i, 50])\n                cube([5, 6, 30], center = true);\n        }\n    }\n    \n    // Right side panel\n    mirror([1, 0, 0])\n        cradle_side_panel();\n    \n    // Front panel\n    difference() {\n        // Outer frame\n        translate([0, 32, 40])\n            cube([114, 4, 50], center = true);\n        \n        // Inner cutouts\n        for (i = [-40:10:40]) {\n            translate([i, 32, 50])\n                cube([6, 5, 30], center = true);\n        }\n    }\n    \n    // Back panel (higher for safety)\n    difference() {\n        // Outer frame\n        translate([0, -32, 45])\n            cube([114, 4, 60], center = true);\n        \n        // Inner cutouts\n        for (i = [-40:10:40]) {\n            translate([i, -32, 50])\n                cube([6, 5, 35], center = true);\n        }\n    }\n}\n\n// Side panel module for reuse\nmodule cradle_side_panel() {\n    difference() {\n        translate([-55, 0, 40])\n            cube([4, 64, 50], center = true);\n        for (i = [-20:10:20]) {\n            translate([-55, i, 50])\n                cube([5, 6, 30], center = true);\n        }\n    }\n}\n\n// Rocking base\nmodule rocking_base() {\n    // Left rocker\n    translate([-50, 0, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 70, r1 = 25, r2 = 25, center = true);\n    \n    // Right rocker\n    translate([50, 0, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 70, r1 = 25, r2 = 25, center = true);\n    \n    // Support beams between rockers\n    translate([0, 25, 5])\n        cube([100, 3, 6], center = true);\n    translate([0, -25, 5])\n        cube([100, 3, 6], center = true);\n    \n    // Center support\n    translate([0, 0, 5])\n        cube([100, 46, 4], center = true);\n}\n\n// Mattress support slats\nmodule mattress_support() {\n    for (i = [-40:8:40]) {\n        translate([i, 0, 22])\n            cube([6, 54, 2], center = true);\n    }\n}\n\n// Safety posts\nmodule safety_posts() {\n    // Front posts\n    for (pos = [[-40, 30], [40, 30]]) {\n        translate([pos[0], pos[1], 65])\n            cylinder(h = 20, r = 2);\n    }\n    \n    // Back posts\n    for (pos = [[-40, -30], [40, -30]]) {\n        translate([pos[0], pos[1], 70])\n            cylinder(h = 15, r = 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main cradle structure\n    cradle_body();\n    \n    // Rocking base\n    rocking_base();\n    \n    // Mattress support\n    mattress_support();\n    \n    // Safety posts\n    safety_posts();\n}",
    "renders": true
  },
  {
    "furniture": "bassinet",
    "openscad_code": "// Bassinet - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm L x 60mm W x 90mm H\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main basket\nmodule basket() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 25]) cylinder(h=30, d1=80, d2=75);  // Tapered sides\n            translate([0, 0, 0]) cylinder(h=5, d=85);  // Base\n        }\n        \n        // Inner cavity\n        hull() {\n            translate([0, 0, 27]) cylinder(h=26, d1=76, d2=71);\n            translate([0, 0, 2]) cylinder(h=5, d=81);\n        }\n    }\n}\n\n// Mattress/cushion\nmodule mattress() {\n    translate([0, 0, 28]) {\n        difference() {\n            cylinder(h=5, d=74);\n            translate([0, 0, 1]) cylinder(h=5, d=70);  // Indentation\n        }\n    }\n}\n\n// Rocking base\nmodule rocker_base() {\n    difference() {\n        // Main rocker shape\n        hull() {\n            translate([0, 0, 12]) cube([100, 60, 8], center=true);\n            translate([0, 0, 2]) cube([90, 55, 4], center=true);\n        }\n        \n        // Cut bottom for rocking curve\n        for(x = [-40:10:40]) {\n            translate([x, 0, 0]) {\n                rotate([0, 90, 0]) \n                cylinder(h=62, r=45, center=true);\n            }\n        }\n    }\n}\n\n// Support posts\nmodule posts() {\n    // Four corner posts\n    positions = [[-35, -25], [35, -25], [35, 25], [-35, 25]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 0]) {\n            // Post\n            cylinder(h=55, d=5);\n            \n            // Decorative cap\n            translate([0, 0, 55]) sphere(d=6);\n        }\n    }\n}\n\n// Safety rail\nmodule safety_rail() {\n    // Front rail\n    translate([0, -30, 45]) {\n        difference() {\n            cube([80, 2, 20], center=true);\n            translate([0, 0, 8]) cube([78, 3, 18], center=true);  // Hollow center\n        }\n    }\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([side * 40, 0, 45]) {\n            rotate([0, 0, side * 90]) {\n                difference() {\n                    cube([60, 2, 20], center=true);\n                    translate([0, 0, 8]) cube([58, 3, 18], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    rocker_base();\n    \n    translate([0, 0, 15]) {\n        posts();\n        basket();\n        mattress();\n        safety_rail();\n    }\n}",
    "renders": true
  },
  {
    "furniture": "bunk",
    "openscad_code": "// Bunk Bed - Realistic Style, Medium Complexity\n// Overall size: 120mm x 60mm x 130mm (L x W x H)\n\n$fn = 32;\n\n// Main module\nmodule bunk_bed() {\n    // Materials\n    wood_color = \"Tan\";\n    metal_color = \"Gray\";\n    mattress_color = \"Beige\";\n    \n    // Bed frame structure\n    color(wood_color) {\n        // Bottom bed frame\n        translate([0, 0, 0]) bed_frame();\n        \n        // Top bed frame\n        translate([0, 0, 70]) bed_frame();\n        \n        // Support posts\n        for(x = [-55, 55])\n            for(y = [-25, 25])\n                translate([x, y, 0]) post();\n        \n        // Ladder\n        translate([65, 0, 0]) ladder();\n        \n        // Safety rail for top bunk\n        translate([0, 0, 70]) safety_rail();\n    }\n    \n    // Mattresses\n    color(mattress_color) {\n        translate([0, 0, 8]) mattress();\n        translate([0, 0, 78]) mattress();\n    }\n    \n    // Pillows\n    color(\"White\") {\n        for(z = [15, 85])\n            translate([-35, 0, z]) pillow();\n    }\n}\n\n// Individual bed frame\nmodule bed_frame() {\n    // Side rails\n    for(side = [-1, 1])\n        translate([0, side * 27.5, 5])\n            cube([120, 5, 10], center = true);\n    \n    // Headboard and footboard\n    for(end = [-1, 1])\n        translate([end * 57.5, 0, 10])\n            cube([5, 55, 20], center = true);\n    \n    // Support slats\n    for(i = [-40:20:40])\n        translate([i, 0, 3])\n            cube([15, 50, 2], center = true);\n}\n\n// Support post\nmodule post() {\n    cylinder(h = 130, r = 3);\n}\n\n// Ladder\nmodule ladder() {\n    // Side rails\n    for(side = [-1, 1])\n        translate([0, side * 5, 65])\n            cube([3, 3, 130], center = true);\n    \n    // Rungs\n    for(h = [10:15:120])\n        translate([0, 0, h])\n            cube([3, 12, 3], center = true);\n}\n\n// Safety rail\nmodule safety_rail() {\n    // Bottom rail\n    translate([0, -22.5, 10])\n        cube([110, 5, 5], center = true);\n    \n    // Top rail\n    translate([0, -22.5, 20])\n        cube([110, 5, 5], center = true);\n    \n    // Vertical bars\n    for(x = [-45:15:45])\n        translate([x, -22.5, 15])\n            cube([3, 5, 10], center = true);\n}\n\n// Mattress\nmodule mattress() {\n    cube([110, 50, 8], center = true);\n}\n\n// Pillow\nmodule pillow() {\n    scale([1.5, 1, 0.5])\n        sphere(r = 8);\n}\n\n// Render the bunk bed\nbunk_bed();",
    "renders": true
  },
  {
    "furniture": "loft",
    "openscad_code": "// Loft-style desk with pipe frame base and wooden top\n// Overall dimensions: 120mm W x 60mm D x 80mm H\n\n// Parameters\ntop_thickness = 4;\npipe_diameter = 6;\npipe_wall = 2;\nleg_height = 75;\ntop_width = 120;\ntop_depth = 60;\n\n// Wooden top with rounded edges\nmodule desktop() {\n    // Main top\n    translate([0, 0, leg_height - top_thickness/2])\n        cube([top_width, top_depth, top_thickness], center=true);\n    \n    // Rounded front edge\n    translate([0, top_depth/2 - 2, leg_height - top_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=top_width, d=4, center=true);\n    \n    // Rounded back edge\n    translate([0, -top_depth/2 + 2, leg_height - top_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=top_width, d=4, center=true);\n}\n\n// Pipe frame leg system\nmodule pipe_leg(x, y) {\n    // Vertical pipe\n    translate([x, y, leg_height/2])\n        cylinder(h=leg_height, d=pipe_diameter, center=true);\n    \n    // Bottom foot\n    translate([x, y, 0])\n        cylinder(h=pipe_wall*2, d=pipe_diameter*1.5, center=true);\n}\n\n// Cross brace\nmodule cross_brace(x1, y1, x2, y2, z) {\n    length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n    angle = atan2(y2-y1, x2-x1);\n    \n    translate([(x1+x2)/2, (y1+y2)/2, z])\n        rotate([0, 0, angle])\n            cube([length, pipe_diameter, pipe_wall], center=true);\n}\n\n// Main assembly\nunion() {\n    // Desktop\n    desktop();\n    \n    // Four legs\n    offset = 8;\n    pipe_leg(top_width/2 - offset, top_depth/2 - offset);\n    pipe_leg(-top_width/2 + offset, top_depth/2 - offset);\n    pipe_leg(top_width/2 - offset, -top_depth/2 + offset);\n    pipe_leg(-top_width/2 + offset, -top_depth/2 + offset);\n    \n    // Lower cross braces\n    cross_brace(-top_width/2 + offset, -top_depth/2 + offset, \n                -top_width/2 + offset, top_depth/2 - offset, \n                leg_height/4);\n    cross_brace(top_width/2 - offset, -top_depth/2 + offset, \n                top_width/2 - offset, top_depth/2 - offset, \n                leg_height/4);\n    \n    // Side cross braces\n    cross_brace(-top_width/2 + offset, -top_depth/2 + offset, \n                top_width/2 - offset, -top_depth/2 + offset, \n                leg_height/3);\n    \n    // Back support bar\n    translate([0, -top_depth/2 + 8, leg_height - pipe_diameter])\n        rotate([90, 0, 0])\n            cylinder(h=top_width - 16, d=pipe_diameter, center=true);\n}",
    "renders": true
  },
  {
    "furniture": "mattress",
    "openscad_code": "// Mattress with quilted top surface, reinforced edges and internal spring structure\n// Overall dimensions: 100mm x 70mm x 20mm\n\nmodule mattress_core(width, depth, height) {\n    // Main foam block\n    difference() {\n        // Outer foam layer\n        translate([-width/2, -depth/2, 0])\n            cube([width, depth, height]);\n        \n        // Hollow center for spring structure\n        translate([-width/2 + 4, -depth/2 + 4, 2])\n            cube([width - 8, depth - 8, height - 4]);\n    }\n}\n\nmodule spring_structure(width, depth, height) {\n    // Internal spring grid\n    for (x = [-width/2 + 8 : 8 : width/2 - 8]) {\n        for (y = [-depth/2 + 8 : 8 : depth/2 - 8]) {\n            translate([x, y, 2])\n                cylinder(h = height - 4, r = 1.5, $fn = 8);\n        }\n    }\n}\n\nmodule quilted_surface(width, depth, height) {\n    // Top quilted pattern\n    for (x = [-width/2 + 5 : 10 : width/2 - 5]) {\n        for (y = [-depth/2 + 5 : 10 : depth/2 - 5]) {\n            // Tufted buttons\n            translate([x, y, height - 0.5])\n                sphere(r = 1.5, $fn = 16);\n            \n            // Slight indentations around buttons\n            translate([x, y, height - 1])\n                cylinder(h = 1, r1 = 3, r2 = 2, $fn = 16);\n        }\n    }\n}\n\nmodule reinforced_edges(width, depth, height) {\n    // Side edge reinforcements\n    // Left edge\n    translate([-width/2 - 1, -depth/2 - 1, 0])\n        cube([2, depth + 2, height]);\n    \n    // Right edge\n    translate([width/2 - 1, -depth/2 - 1, 0])\n        cube([2, depth + 2, height]);\n    \n    // Front edge\n    translate([-width/2 - 1, -depth/2 - 1, 0])\n        cube([width + 2, 2, height]);\n    \n    // Back edge\n    translate([-width/2 - 1, depth/2 - 1, 0])\n        cube([width + 2, 2, height]);\n}\n\nmodule corner_reinforcements(width, depth, height) {\n    // Corner supports\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * width/2, y * depth/2, 0])\n                cylinder(h = height, r = 3, $fn = 12);\n        }\n    }\n}\n\nmodule mattress(width = 100, depth = 70, height = 20) {\n    union() {\n        // Main mattress assembly\n        mattress_core(width, depth, height);\n        \n        // Internal structure\n        spring_structure(width, depth, height);\n        \n        // Surface details\n        quilted_surface(width, depth, height);\n        \n        // Structural reinforcements\n        reinforced_edges(width, depth, height);\n        corner_reinforcements(width, depth, height);\n    }\n}\n\n// Render the mattress\nmattress();",
    "renders": true
  },
  {
    "furniture": "boxspring",
    "openscad_code": "// Boxspring Bed - Medium Realistic\n// Overall dimensions: 120mm x 80mm x 25mm\n\n$fn = 24;\n\n// Main boxspring base\nmodule boxspring_base() {\n    // Main platform with rounded edges\n    difference() {\n        minkowski() {\n            cube([116, 76, 12], center = true);\n            sphere(2);\n        }\n        \n        // Hollow interior for material savings\n        translate([0, 0, 2])\n            cube([112, 72, 12], center = true);\n    }\n}\n\n// Corner legs\nmodule leg(x, y) {\n    translate([x, y, -6]) {\n        // Main leg post\n        cylinder(h = 12, r = 4, center = false);\n        \n        // Decorative foot detail\n        translate([0, 0, -2])\n            cylinder(h = 4, r1 = 4.5, r2 = 5, center = false);\n    }\n}\n\n// Mattress support slats\nmodule slats() {\n    for (i = [-35:10:35]) {\n        translate([i, 0, 7])\n            cube([4, 72, 3], center = true);\n    }\n}\n\n// Fabric texture detail on sides\nmodule side_detail(side) {\n    for (i = [-48:12:48]) {\n        translate([side * 58, i, 0])\n            rotate([0, side * 90, 0])\n            cube([2, 8, 4], center = true);\n    }\n}\n\n// Headboard detail\nmodule headboard() {\n    translate([0, 38, 10]) {\n        // Main headboard\n        cube([110, 4, 15], center = true);\n        \n        // Padded sections\n        for (i = [-30:20:30]) {\n            translate([i, 0, 4])\n                cube([18, 4.5, 8], center = true);\n        }\n    }\n}\n\n// Mattress assembly\nmodule mattress() {\n    translate([0, 0, 12]) {\n        // Main mattress body\n        minkowski() {\n            cube([110, 74, 10], center = true);\n            sphere(1);\n        }\n        \n        // Top quilting pattern\n        for (x = [-30:15:30]) {\n            for (y = [-25:12.5:25]) {\n                translate([x, y, 6])\n                    cube([8, 6, 1], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    boxspring_base();\n    \n    // Legs at corners\n    for (x = [-50, 50])\n        for (y = [-30, 30])\n            leg(x, y);\n    \n    // Support slats\n    slats();\n    \n    // Side details\n    side_detail(1);\n    side_detail(-1);\n    \n    // headboard();\n    \n    // Mattress\n    mattress();\n}",
    "renders": true
  },
  {
    "furniture": "pillow",
    "openscad_code": "// Realistic Pillow Furniture Item - Medium Complexity\n// Overall dimensions: 120 x 80 x 35 mm\n\n// Main pillow body with realistic cushion shape\nmodule pillow_body() {\n    difference() {\n        // Main cushion - slightly rounded top\n        translate([0, 0, 17.5]) {\n            scale([1, 1, 0.7]) {\n                sphere(d = 120, $fn = 100);\n            }\n        }\n        \n        // Flatten bottom\n        translate([0, 0, -1]) {\n            cube([200, 200, 20], center = true);\n        }\n        \n        // Rounded corners on bottom\n        translate([0, 0, 15]) {\n            scale([1, 1, 0.3]) {\n                sphere(d = 110, $fn = 100);\n            }\n        }\n    }\n}\n\n// Piping detail around edges\nmodule piping() {\n    hull() {\n        // Top piping\n        for(i = [0:1]) {\n            rotate([0, 0, i * 180]) {\n                translate([0, 40, 32]) {\n                    rotate_extrude($fn = 50) {\n                        translate([59.5, 0, 0]) {\n                            circle(d = 3, $fn = 12);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Side piping\n        for(i = [0:1]) {\n            rotate([0, 0, i * 180]) {\n                translate([0, 40, 32]) {\n                    rotate_extrude($fn = 50) {\n                        translate([59.5, 0, 0]) {\n                            circle(d = 3, $fn = 12);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Quilted pattern on top surface\nmodule quilting_pattern() {\n    // Create quilted squares pattern\n    for(y = [-30:20:30]) {\n        for(x = [-50:25:50]) {\n            translate([x, y, 33]) {\n                // Slight depression for each quilt\n                difference() {\n                    cube([22, 17, 2], center = true);\n                    translate([0, 0, -0.5]) {\n                        cube([20, 15, 3], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Corner tassels for furniture accent\nmodule corner_tassel(x, y) {\n    translate([x, y, 0]) {\n        // Tassel cord\n        cylinder(h = 8, d = 2, $fn = 8);\n        \n        // Tassel body\n        translate([0, 0, 8]) {\n            for(i = [0:30:330]) {\n                rotate([0, 0, i]) {\n                    translate([1.5, 0, 0]) {\n                        cylinder(h = 6, d = 0.8, $fn = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Zipper detail on back\nmodule zipper_detail() {\n    // Zipper track\n    translate([0, -40, 17.5]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 100, d = 4, $fn = 20);\n                translate([0, 0, -1]) {\n                    cylinder(h = 102, d = 3.5, $fn = 20);\n                }\n            }\n        }\n    }\n    \n    // Zipper pull\n    translate([10, -40, 17.5]) {\n        rotate([90, 0, 0]) {\n            translate([0, 0, 50]) {\n                cube([3, 8, 1.5], center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Primary pillow body\n    pillow_body();\n    \n    // Structural layer for 3D printing\n    translate([0, 0, 0]) {\n        cube([120, 80, 2], center = true);\n    }\n    \n    // Piping details\n    piping();\n    \n    // Quilted pattern\n    quilting_pattern();\n    \n    // Corner tassels\n    corner_tassel(55, 35);\n    corner_tassel(-55, 35);\n    corner_tassel(55, -35);\n    corner_tassel(-55, -35);\n    \n    // Zipper on back\n    zipper_detail();\n}",
    "renders": true
  },
  {
    "furniture": "duvet",
    "openscad_code": "// Realistic-style Duvet Furniture - Medium Complexity\n// Size: 120mm x 80mm x 30mm (scaled for 3D printing)\n\n// Parameters\nduvet_length = 120;\nduvet_width = 80;\nduvet_height = 8;\nmattress_thickness = 12;\nleg_height = 10;\nleg_diameter = 6;\nframe_thickness = 3;\npillow_width = 35;\npillow_height = 5;\nblanket_fold_height = 4;\n\n// Main module\nmodule duvet_furniture() {\n    // Bed frame\n    frame();\n    \n    // Mattress\n    mattress();\n    \n    // Duvet blanket with folds\n    duvet_blanket();\n    \n    // Pillows\n    pillows();\n    \n    // Legs\n    legs();\n    \n    // Headboard details\n    headboard();\n}\n\n// Bed frame structure\nmodule frame() {\n    // Bottom frame\n    difference() {\n        cube([duvet_length + frame_thickness*2, duvet_width + frame_thickness*2, frame_thickness]);\n        \n        // Hollow center\n        translate([frame_thickness, frame_thickness, -0.1])\n            cube([duvet_length, duvet_width, frame_thickness + 0.2]);\n    }\n    \n    // Side rails\n    translate([0, 0, frame_thickness])\n        cube([frame_thickness, duvet_width + frame_thickness*2, mattress_thickness]);\n    \n    translate([duvet_length + frame_thickness, 0, frame_thickness])\n        cube([frame_thickness, duvet_width + frame_thickness*2, mattress_thickness]);\n    \n    // Front/back rails\n    translate([frame_thickness, 0, frame_thickness])\n        cube([duvet_length, frame_thickness, mattress_thickness]);\n    \n    translate([frame_thickness, duvet_width + frame_thickness, frame_thickness])\n        cube([duvet_length, frame_thickness, mattress_thickness]);\n}\n\n// Mattress\nmodule mattress() {\n    translate([frame_thickness, frame_thickness, frame_thickness])\n        cube([duvet_length, duvet_width, mattress_thickness]);\n}\n\n// Duvet blanket with realistic folds\nmodule duvet_blanket() {\n    // Main blanket\n    translate([frame_thickness + 5, frame_thickness + 5, frame_thickness + mattress_thickness])\n        cube([duvet_length - 10, duvet_width - 10, duvet_height]);\n    \n    // Fold lines\n    for(i = [1:3]) {\n        translate([frame_thickness + 20 + i*25, frame_thickness + 5, frame_thickness + mattress_thickness + duvet_height - 0.5])\n            cube([2, duvet_width - 10, blanket_fold_height]);\n    }\n    \n    // Corner fold details\n    translate([frame_thickness + 5, frame_thickness + 5, frame_thickness + mattress_thickness + duvet_height])\n        cube([10, 10, 2]);\n    \n    translate([duvet_length + frame_thickness - 15, frame_thickness + 5, frame_thickness + mattress_thickness + duvet_height])\n        cube([10, 10, 2]);\n}\n\n// Pillows\nmodule pillows() {\n    // Left pillow\n    translate([frame_thickness + 15, frame_thickness + 5, frame_thickness + mattress_thickness + duvet_height])\n        cube([pillow_width, duvet_width - 10, pillow_height]);\n    \n    // Right pillow\n    translate([duvet_length + frame_thickness - 15 - pillow_width, frame_thickness + 5, frame_thickness + mattress_thickness + duvet_height])\n        cube([pillow_width, duvet_width - 10, pillow_height]);\n}\n\n// Legs\nmodule legs() {\n    // Front legs\n    translate([frame_thickness + 5, frame_thickness + 5, 0])\n        cylinder(h=leg_height, d=leg_diameter);\n    \n    translate([duvet_length + frame_thickness - 5, frame_thickness + 5, 0])\n        cylinder(h=leg_height, d=leg_diameter);\n    \n    // Back legs\n    translate([frame_thickness + 5, duvet_width + frame_thickness - 5, 0])\n        cylinder(h=leg_height, d=leg_diameter);\n    \n    translate([duvet_length + frame_thickness - 5, duvet_width + frame_thickness - 5, 0])\n        cylinder(h=leg_height, d=leg_diameter);\n}\n\n// Headboard\nmodule headboard() {\n    // Headboard posts\n    translate([frame_thickness - 2, frame_thickness - 2, 0])\n        cube([4, duvet_width + frame_thickness*2 + 4, 25]);\n    \n    translate([duvet_length + frame_thickness - 2, frame_thickness - 2, 0])\n        cube([4, duvet_width + frame_thickness*2 + 4, 25]);\n    \n    // Headboard panel\n    difference() {\n        translate([frame_thickness, frame_thickness - 2, 15])\n            cube([duvet_length, duvet_width + frame_thickness*2 + 4, 4]);\n        \n        // Decorative cutouts\n        for(i = [1:3]) {\n            translate([frame_thickness + i*30, frame_thickness + 10, 14])\n                cube([10, duvet_width - 20, 6]);\n        }\n    }\n}\n\n// Render the complete furniture\nduvet_furniture();",
    "renders": true
  },
  {
    "furniture": "comforter",
    "openscad_code": "// Comforter furniture - realistic style, medium complexity\n// 3D printable comforter with structural frame and soft elements\n\n// Overall dimensions\nlength = 120;\nwidth = 80;\nheight = 20;\nleg_height = 25;\nwall_thickness = 2;\n\n// Main comforter body\nmodule comforter_body() {\n    difference() {\n        // Main padded body\n        translate([0, 0, height/2])\n            cube([length, width, height], center=true);\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, height/2])\n            cube([length-wall_thickness*2, width-wall_thickness*2, height-wall_thickness], center=true);\n    }\n}\n\n// Quilt pattern lines on surface\nmodule quilt_pattern() {\n    // Horizontal quilting lines\n    for (y = [-width/2+10 : 20 : width/2-10]) {\n        translate([0, y, height])\n            cube([length, 1, 1], center=true);\n    }\n    \n    // Vertical quilting lines\n    for (x = [-length/2+10 : 20 : length/2-10]) {\n        translate([x, 0, height])\n            cube([1, width, 1], center=true);\n    }\n}\n\n// Corner piping detail\nmodule corner_piping() {\n    for (x = [-length/2, length/2]) {\n        for (y = [-width/2, width/2]) {\n            translate([x, y, height/2])\n                cylinder(h=height+2, r=2, $fn=8);\n        }\n    }\n}\n\n// Bed frame support structure\nmodule bed_frame() {\n    // Long side rails\n    for (y = [-width/2+5, width/2-5]) {\n        translate([0, y, -leg_height/2])\n            cube([length+10, 4, leg_height], center=true);\n    }\n    \n    // Short end rails\n    for (x = [-length/2+5, length/2-5]) {\n        translate([x, 0, -leg_height/2])\n            cube([4, width+10, leg_height], center=true);\n    }\n    \n    // Support legs at corners\n    for (x = [-length/2+5, length/2-5]) {\n        for (y = [-width/2+5, width/2-5]) {\n            translate([x, y, -leg_height-2])\n                cylinder(h=leg_height, r=3, $fn=8);\n        }\n    }\n}\n\n// Soft cushion effect on top\nmodule cushion_detail() {\n    // Create slight bulge in center\n    translate([0, 0, height+1])\n        scale([1, 1, 0.3])\n            sphere(r=length/3, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Structural frame\n    bed_frame();\n    \n    // Comforter body\n    translate([0, 0, leg_height+height/2+2])\n        union() {\n            comforter_body();\n            quilt_pattern();\n            corner_piping();\n            cushion_detail();\n        }\n}",
    "renders": true
  },
  {
    "furniture": "blanket",
    "openscad_code": "// Blanket Chest - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm wide x 60mm deep x 70mm high\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main chest body with hollow interior\nmodule chest_body() {\n    difference() {\n        // Outer shell\n        cube([120, 60, 70], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([120-wall*2, 60-wall*2, 70-wall], center = true);\n    }\n}\n\n// Lid with slight curvature\nmodule chest_lid() {\n    difference() {\n        // Main lid body\n        translate([0, 0, 35])\n            cube([120, 60, 8], center = true);\n        \n        // Create curved top surface\n        translate([0, 0, 35+8])\n            scale([1, 1, 0.3])\n                sphere(d = 120, $fn = 50);\n    }\n}\n\n// Decorative panels on sides\nmodule side_panel() {\n    for(i = [0, 1]) {\n        translate([0, i*58-29, 0])\n            rotate([90, 0, 0])\n                linear_extrude(height = wall)\n                    offset(r = 2)\n                        square([80, 40], center = true);\n    }\n}\n\n// Front panel with carved details\nmodule front_panel() {\n    translate([0, 30, 0])\n        rotate([90, 0, 90])\n            difference() {\n                linear_extrude(height = wall)\n                    square([80, 40], center = true);\n                \n                // Carved rectangles\n                for(x = [-30, -10, 10, 30])\n                    translate([x, 0, -1])\n                        cube([15, 30, wall+2], center = true);\n            }\n}\n\n// Back panel (simpler than front)\nmodule back_panel() {\n    translate([0, -30, 0])\n        rotate([90, 0, 90])\n            linear_extrude(height = wall)\n                square([80, 40], center = true);\n}\n\n// Decorative base molding\nmodule base_molding() {\n    translate([0, 0, -35-wall])\n        cube([124, 64, 4], center = true);\n    \n    // Tapered bottom edge\n    translate([0, 0, -35-wall-2])\n        cylinder(h = 4, r1 = 62, r2 = 60, $fn = 50);\n}\n\n// Hinges (simplified representation)\nmodule hinges() {\n    for(x = [-40, 40]) {\n        translate([x, 30, 38])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 6, $fn = 20);\n    }\n}\n\n// Handles on sides\nmodule handles() {\n    for(y = [-25, 25]) {\n        translate([0, y, 10])\n            difference() {\n                // Handle base\n                cube([30, 4, 8], center = true);\n                \n                // Grip hole\n                translate([0, 0, 4])\n                    cube([24, 8, 4], center = true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    chest_body();\n    chest_lid();\n    \n    // Decorative elements\n    side_panel();\n    front_panel();\n    back_panel();\n    base_molding();\n    \n    // Hardware\n    hinges();\n    handles();\n}",
    "renders": true
  },
  {
    "furniture": "sheet",
    "openscad_code": "// Sheet furniture item - Realistic style, medium complexity\n// A small sheet storage cabinet with doors and shelves\n\n$fn = 32;\n\n// Overall dimensions (mm)\ncabinet_width = 80;\ncabinet_depth = 40;\ncabinet_height = 100;\nwall_thickness = 2;\nshelf_thickness = 2;\n\nmodule cabinet_frame() {\n    difference() {\n        // Main body\n        cube([cabinet_width, cabinet_depth, cabinet_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([cabinet_width - 2*wall_thickness, \n                  cabinet_depth - 2*wall_thickness, \n                  cabinet_height - wall_thickness]);\n    }\n}\n\nmodule back_panel() {\n    translate([0, cabinet_depth - wall_thickness, 0])\n        cube([cabinet_width, wall_thickness, cabinet_height]);\n}\n\nmodule shelves() {\n    // Bottom shelf\n    translate([wall_thickness, wall_thickness, wall_thickness])\n        cube([cabinet_width - 2*wall_thickness, \n              cabinet_depth - 2*wall_thickness, \n              shelf_thickness]);\n    \n    // Middle shelf\n    translate([wall_thickness, wall_thickness, cabinet_height/2])\n        cube([cabinet_width - 2*wall_thickness, \n              cabinet_depth - 2*wall_thickness, \n              shelf_thickness]);\n    \n    // Top shelf\n    translate([wall_thickness, wall_thickness, cabinet_height - wall_thickness - 2])\n        cube([cabinet_width - 2*wall_thickness, \n              cabinet_depth - 2*wall_thickness, \n              shelf_thickness]);\n}\n\nmodule door() {\n    // Door panel\n    translate([0, 0, -0.1])\n        cube([cabinet_width/2 - 1, wall_thickness + 0.2, cabinet_height - 2*wall_thickness]);\n    \n    // Door handle\n    translate([cabinet_width/4 - 3, wall_thickness + 1, cabinet_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=6, r1=2, r2=2);\n}\n\nmodule doors() {\n    // Left door\n    translate([wall_thickness, 0, wall_thickness])\n        door();\n    \n    // Right door\n    translate([cabinet_width/2 + 1, 0, wall_thickness])\n        door();\n}\n\nmodule legs() {\n    leg_height = 8;\n    leg_size = 4;\n    \n    // Front left leg\n    translate([leg_size/2, leg_size/2, -leg_height])\n        cube([leg_size, leg_size, leg_height]);\n    \n    // Front right leg\n    translate([cabinet_width - 1.5*leg_size, leg_size/2, -leg_height])\n        cube([leg_size, leg_size, leg_height]);\n    \n    // Back left leg\n    translate([leg_size/2, cabinet_depth - 1.5*leg_size, -leg_height])\n        cube([leg_size, leg_size, leg_height]);\n    \n    // Back right leg\n    translate([cabinet_width - 1.5*leg_size, cabinet_depth - 1.5*leg_size, -leg_height])\n        cube([leg_size, leg_size, leg_height]);\n}\n\nmodule ventilation_holes() {\n    hole_diameter = 4;\n    hole_spacing = 10;\n    \n    for(i = [0:1:3]) {\n        translate([15 + i*hole_spacing, cabinet_depth - wall_thickness/2, 20])\n            rotate([0, 90, 0])\n                cylinder(h=wall_thickness + 1, r=hole_diameter/2);\n    }\n}\n\n// Assembly\nunion() {\n    cabinet_frame();\n    back_panel();\n    shelves();\n    doors();\n    legs();\n    ventilation_holes();\n}",
    "renders": true
  },
  {
    "furniture": "coverlet",
    "openscad_code": "// Coverlet (bedspread) with realistic quilting and furniture-style trim\n// Dimensions: ~120mm x 80mm x 5mm overall\n\nmodule quilt_square(size, height) {\n    difference() {\n        // Main square with slight pillowing\n        translate([0, 0, height/2]) \n            scale([1, 1, 0.3]) \n                sphere(d=size, $fn=20);\n        \n        // Stitching indent\n        translate([0, 0, height/2-0.2]) \n            scale([1, 1, 0.1]) \n                sphere(d=size*0.7, $fn=20);\n    }\n}\n\nmodule corner_leg(size) {\n    // Furniture-style corner leg\n    difference() {\n        // Leg body\n        cylinder(h=6, d=6, $fn=16);\n        \n        // Taper bottom\n        translate([0, 0, 2]) \n            cylinder(h=4, d1=6, d2=4, $fn=16);\n        \n        // Mounting hole\n        translate([0, 0, -1]) \n            cylinder(h=8, d=2, $fn=12);\n    }\n}\n\nmodule piping() {\n    // Decorative piping along edges\n    rotate_extrude($fn=20) \n        translate([58, 0, 0]) \n            circle(d=2, $fn=12);\n}\n\n// Main coverlet body\ndifference() {\n    // Base rectangular form\n    translate([0, 0, 2.5]) \n        cube([120, 80, 5], center=true);\n    \n    // Bevel edges\n    translate([0, 0, 2.5]) \n        cube([116, 76, 5], center=true);\n}\n\n// Quilted pattern\nfor (x = [-50:20:50]) {\n    for (y = [-30:20:30]) {\n        translate([x, y, 4.8]) \n            quilt_square(18, 2);\n    }\n}\n\n// Corner legs (furniture style feet)\ntranslate([-55, -35, 0]) corner_leg(6);\ntranslate([55, -35, 0]) corner_leg(6);\ntranslate([-55, 35, 0]) corner_leg(6);\ntranslate([55, 35, 0]) corner_leg(6);\n\n// Edge piping\ntranslate([0, 0, 4.5]) piping();\nrotate([0, 0, 90]) translate([0, 0, 4.5]) scale([0.66, 1, 1]) piping();\n\n// Structural support ribs underneath\ndifference() {\n    // Main support grid\n    for (x = [-40:20:40]) {\n        translate([x, 0, 1]) \n            cube([2, 76, 2], center=true);\n    }\n    for (y = [-25:25:50]) {\n        translate([0, y, 1]) \n            cube([116, 2, 2], center=true);\n    }\n    \n    // Cutouts for legs\n    for (x = [-55, 55]) {\n        for (y = [-35, 35]) {\n            translate([x, y, 1]) \n                cylinder(h=3, d=7, $fn=16);\n        }\n    }\n}\n\n// Furniture label tag\ntranslate([45, 38, 4.5]) {\n    cube([8, 4, 0.5], center=true);\n    translate([0, 0, 0.3]) \n        cube([7, 3, 0.1], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "quilt",
    "openscad_code": "// Quilt Rack - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm wide x 60mm deep x 100mm tall\n\nmodule leg() {\n    difference() {\n        cube([8, 8, 90]); // Main leg post\n        translate([2, 2, -1]) cube([4, 4, 92]); // Hollow center\n    }\n}\n\nmodule cross_bar() {\n    difference() {\n        cube([110, 6, 6]); // Main bar\n        translate([5, 1, 1]) cube([100, 4, 4]); // Hollow center\n    }\n}\n\nmodule shelf() {\n    difference() {\n        cube([100, 50, 4]); // Shelf base\n        translate([2, 2, -1]) cube([96, 46, 6]); // Hollow bottom\n    }\n}\n\nmodule quilt_bar() {\n    difference() {\n        cylinder(h=120, r=4, $fn=20); // Main quilt rod\n        cylinder(h=122, r=2, $fn=20); // Hollow center\n    }\n}\n\nmodule decorative_end() {\n    union() {\n        sphere(r=6, $fn=20); // Ball end\n        translate([0, -8, 0]) cube([12, 8, 12], center=true); // Support block\n    }\n}\n\n// Base frame assembly\nunion() {\n    // Front left leg\n    translate([5, 5, 0]) leg();\n    \n    // Front right leg\n    translate([107, 5, 0]) leg();\n    \n    // Back left leg\n    translate([5, 47, 0]) leg();\n    \n    // Back right leg\n    translate([107, 47, 0]) leg();\n    \n    // Lower cross bars\n    translate([5, 8, 10]) rotate([0, 0, 90]) cross_bar();\n    translate([5, 47, 10]) rotate([0, 0, 90]) cross_bar();\n    \n    // Upper cross bars\n    translate([5, 8, 80]) rotate([0, 0, 90]) cross_bar();\n    translate([5, 47, 80]) rotate([0, 0, 90]) cross_bar();\n    \n    // Side support bars\n    translate([5, 8, 45]) cube([6, 39, 6]);\n    translate([101, 8, 45]) cube([6, 39, 6]);\n    \n    // Shelf\n    translate([10, 10, 20]) shelf();\n    \n    // Quilt rod holders\n    translate([0, 27, 85]) rotate([90, 0, 0]) quilt_bar();\n    translate([120, 27, 85]) rotate([90, 0, 0]) quilt_bar();\n    \n    // Decorative ends on quilt rods\n    translate([0, 27, 85]) decorative_end();\n    translate([120, 27, 85]) mirror([1, 0, 0]) decorative_end();\n    \n    // Small support brackets\n    for (i = [0:1]) {\n        translate([15 + i*90, 25, 83]) cube([10, 4, 4]);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "canopy",
    "openscad_code": "// Canopy Chair Module\n// A small-scale canopy chair with posts, fabric canopy, seat, and backrest\n\n// Overall dimensions\nchair_width = 45;\nchair_depth = 40;\nchair_height = 80;\npost_diameter = 4;\ncanopy_thickness = 2;\nseat_thickness = 3;\nbackrest_thickness = 2;\nwall = 2;\n\n// Canopy posts\nmodule posts() {\n    for (x = [-chair_width/2 + post_diameter/2, chair_width/2 - post_diameter/2])\n        for (y = [-chair_depth/2 + post_diameter/2, chair_depth/2 - post_diameter/2]) {\n            translate([x, y, 0])\n                cylinder(h = chair_height - 10, d = post_diameter, $fn = 16);\n        }\n}\n\n// Fabric canopy\nmodule canopy() {\n    translate([0, 0, chair_height - 10])\n        difference() {\n            // main canopy\n            cube([chair_width + 4, chair_depth + 4, canopy_thickness], center = true);\n            // slight arch underside\n            translate([0, 0, -canopy_thickness/2 - 0.5])\n                cube([chair_width + 4, chair_depth + 4, 1], center = true);\n        }\n}\n\n// Seat frame\nmodule seat_frame() {\n    // front and back rails\n    for (y = [-chair_depth/2 + wall, chair_depth/2 - wall]) {\n        translate([0, y, chair_height/3])\n            cube([chair_width - 2*post_diameter, wall, wall], center = true);\n    }\n    // side rails\n    for (x = [-chair_width/2 + post_diameter + wall, chair_width/2 - post_diameter - wall]) {\n        translate([x, 0, chair_height/3])\n            cube([wall, chair_depth - 2*wall, wall], center = true);\n    }\n}\n\n// Seat cushion\nmodule seat() {\n    translate([0, 0, chair_height/3 + seat_thickness/2])\n        cube([chair_width - 2*post_diameter - 2*wall, chair_depth - 2*wall - 2, seat_thickness], center = true);\n}\n\n// Backrest with slats\nmodule backrest() {\n    translate([0, -chair_depth/2 + backrest_thickness/2 + wall, chair_height/2 + 5])\n        cube([chair_width - 2*post_diameter - 2*wall, backrest_thickness, chair_height/2], center = true);\n    \n    // slats detail\n    for (z = [chair_height/2 + 8:5:chair_height - 5]) {\n        translate([0, -chair_depth/2 + backrest_thickness/2 + wall + 0.5, z])\n            cube([chair_width - 2*post_diameter - 2*wall - 4, backrest_thickness - 1, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    posts();\n    canopy();\n    seat_frame();\n    seat();\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "footboard",
    "openscad_code": "// Realistic medium-complexity 3D-printable footboard (miniature)\n// Overall footprint: 100 mm wide × 20 mm deep × 50 mm high\n// Wall thickness: 2 mm everywhere for reliable FDM printing\n\nmodule footboard() {\n    // Main rectangular panel\n    panel_w = 100;\n    panel_h = 40;\n    panel_d = 20;\n    difference() {\n        // Outer shell\n        translate([0, 0, panel_h/2])\n            cube([panel_w, panel_d, panel_h], center = true);\n\n        // Inner hollow\n        translate([0, 0, panel_h/2])\n            cube([panel_w - 4, panel_d - 4, panel_h - 2], center = true);\n    }\n\n    // Base rail (front lower structural beam)\n    rail_h = 8;\n    rail_d = 24;\n    translate([0, 0, rail_h/2])\n        cube([panel_w, rail_d, rail_h], center = true);\n\n    // Two vertical posts / legs\n    post_w = 8;\n    post_d = 12;\n    for (x = [-panel_w/2 + post_w/2, panel_w/2 - post_w/2]) {\n        // Main leg body\n        translate([x, 0, (panel_h + rail_h)/2])\n            cube([post_w, post_d, panel_h + rail_h], center = true);\n\n        // Decorative cap on top of each post\n        cap_h = 4;\n        translate([x, 0, panel_h + cap_h/2])\n            cube([post_w + 2, post_d - 2, cap_h], center = true);\n    }\n\n    // Horizontal slats filling the panel\n    slat_w = 4;\n    slat_h = 2;\n    slat_gap = 6;\n    slat_count = floor((panel_w - 2 * post_w) / (slat_w + slat_gap));\n    for (i = [0:slat_count - 1]) {\n        x0 = -panel_w/2 + post_w + slat_w/2 + i * (slat_w + slat_gap);\n        translate([x0, 0, panel_h/2])\n            cube([slat_w, panel_d - 4, panel_h - 8], center = true);\n    }\n\n    // Small chamfers on outer top edges for realism and printability\n    chamfer_d = 2;\n    difference() {\n        translate([0, 0, panel_h + 1])\n            cube([panel_w, panel_d + 2, 2], center = true);\n        translate([0, 0, panel_h + 1])\n            cube([panel_w - 2 * chamfer_d, panel_d, 2], center = true);\n    }\n}\n\n// Render the footboard centered at origin\nfootboard();",
    "renders": true
  },
  {
    "furniture": "chifferobe",
    "openscad_code": "// Chifferobe - combination wardrobe and chest of drawers\n// Overall dimensions: 100mm wide x 50mm deep x 120mm tall\n\nmodule chifferobe_body() {\n    // Main carcass\n    difference() {\n        // Outer shell\n        cube([100, 50, 120], center=false);\n        // Hollow interior\n        translate([2, 2, 2])\n            cube([96, 46, 116], center=false);\n    }\n}\n\nmodule legs() {\n    // Four tapered legs\n    positions = [[0, 0], [0, 50-8], [100-8, 0], [100-8, 50-8]];\n    for (pos = positions) {\n        translate([pos[0], pos[1], -10]) {\n            cylinder(h=12, r1=4, r2=3, $fn=8);\n        }\n    }\n}\n\nmodule wardrobe_section() {\n    // Left wardrobe door (2mm thick)\n    translate([2, 47, 60])\n        rotate([0, 90, 0])\n            cube([56, 46, 2]);\n    \n    // Door handle\n    translate([6, 47, 90])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=1.5, $fn=8);\n    \n    // Wardrobe interior shelf\n    translate([2, 2, 60])\n        cube([46, 46, 2]);\n    \n    // Hanging rod\n    translate([25, 25, 62])\n        cylinder(h=46, r=1.5, $fn=8);\n}\n\nmodule drawer_section() {\n    // Three drawers with fronts and handles\n    for (i = [0:2]) {\n        // Drawer front\n        translate([52, 47, 2 + i*38])\n            rotate([0, 90, 0])\n                cube([36, 46, 2]);\n        \n        // Drawer handle\n        translate([70, 47, 20 + i*38])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=1.5, $fn=8);\n        \n        // Drawer body\n        translate([54, 4, 4 + i*38])\n            cube([44, 42, 32]);\n    }\n}\n\nmodule back_panel() {\n    // Back panel with grooves\n    translate([0, 0, 0])\n        cube([100, 2, 120]);\n    \n    // Vertical grooves for realism\n    for (x = [5:10:95]) {\n        translate([x, 1, 2])\n            cube([2, 1, 116]);\n    }\n}\n\nmodule top_crown_molding() {\n    // Decorative top molding\n    translate([-2, -2, 120])\n        cube([104, 54, 3]);\n    \n    // Beveled edge\n    translate([-2, -2, 123])\n        cube([104, 54, 2]);\n    translate([0, 0, 123])\n        cube([100, 50, 2]);\n}\n\n// Assemble the chifferobe\nunion() {\n    chifferobe_body();\n    legs();\n    wardrobe_section();\n    drawer_section();\n    back_panel();\n    top_crown_molding();\n}",
    "renders": true
  },
  {
    "furniture": "lingerie",
    "openscad_code": "// Lingerie chest - a tall, narrow dresser traditionally used for storing lingerie\n// Features 5 drawers, decorative top molding, and turned legs\n\n// Overall dimensions (mm)\nwidth = 80;\ndepth = 45;\nheight = 120;\nwall = 2;\n\n// Drawer parameters\ndrawer_height = 15;\ndrawer_gap = 2;\nnum_drawers = 5;\n\n// Leg parameters\nleg_height = 15;\nleg_radius = 3;\n\n// Top molding parameters\nmolding_height = 8;\n\nmodule turned_leg(height, radius) {\n    // Create a simple turned leg profile using stacked cylinders\n    difference() {\n        union() {\n            // Main leg body\n            cylinder(h=height, r=radius, $fn=16);\n            \n            // Decorative rings\n            for(i = [1:3]) {\n                translate([0, 0, (i-1)*height/4])\n                    cylinder(h=2, r=radius+1, $fn=16);\n            }\n        }\n        \n        // Hollow the leg\n        cylinder(h=height+1, r=radius-wall, $fn=16);\n    }\n}\n\nmodule drawer_box(w, d, h, gap) {\n    // Main drawer box\n    difference() {\n        cube([w, d, h]);\n        \n        // Hollow interior\n        translate([wall, wall, wall/2])\n            cube([w-2*wall, d-2*wall, h-wall]);\n    }\n    \n    // Drawer front panel with beveled edges\n    translate([0, d, 0])\n        difference() {\n            cube([w, 2, h]);\n            // Beveled edge\n            translate([wall, 0, wall])\n                cube([w-2*wall, 2, h-2*wall]);\n        }\n    \n    // Simple knob\n    translate([w/2, d+2, h/2])\n        sphere(r=2, $fn=8);\n}\n\nmodule drawer_assembly() {\n    total_drawer_space = height - molding_height - leg_height;\n    drawer_spacing = total_drawer_space / num_drawers;\n    \n    for(i = [0:num_drawers-1]) {\n        translate([0, 0, leg_height + i*drawer_spacing])\n            drawer_box(width, depth, drawer_height, drawer_gap);\n    }\n}\n\nmodule top_molding() {\n    // Decorative top with curved profile\n    translate([0, 0, height-molding_height]) {\n        difference() {\n            // Main top block\n            cube([width+4, depth+4, molding_height]);\n            \n            // Beveled underside\n            translate([2, 2, -1])\n                cube([width, depth, molding_height+2]);\n            \n            // Rounded top using cylinders\n            for(x = [2:width-2]) {\n                translate([x, -1, molding_height-2])\n                    cylinder(h=2, r=2, $fn=8);\n            }\n        }\n    }\n}\n\nmodule body_frame() {\n    // Main body structure\n    difference() {\n        // Outer shell\n        cube([width, depth, height-molding_height-leg_height]);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-molding_height-leg_height-wall]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    translate([0, 0, leg_height])\n        body_frame();\n    \n    // Top molding\n    top_molding();\n    \n    // Drawers\n    drawer_assembly();\n    \n    // Legs\n    translate([5, 5, 0])\n        turned_leg(leg_height, leg_radius);\n    translate([width-5, 5, 0])\n        turned_leg(leg_height, leg_radius);\n    translate([5, depth-5, 0])\n        turned_leg(leg_height, leg_radius);\n    translate([width-5, depth-5, 0])\n        turned_leg(leg_height, leg_radius);\n}",
    "renders": true
  },
  {
    "furniture": "blanketbox",
    "openscad_code": "// Blanket Box - Realistic Style, Medium Complexity\n// External dimensions: 100 x 60 x 55 mm (L x W x H)\n\n// Parameters\nwall = 2;               // Wall thickness for 3D printing\nboxL = 100;             // External length\nboxW = 60;              // External width  \nboxH = 55;              // External height\nlegH = 12;              // Leg height\npanelDepth = 1.5;       // Recessed panel depth\n\n// Main body - hollow with recessed panels\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([boxL, boxW, boxH]);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([boxL-2*wall, boxW-2*wall, boxH-wall]);\n            \n        // Recessed panels on front/back\n        for(side = [0, 1]) {\n            translate([side ? 0 : boxL-wall, wall, wall])\n                cube([wall, boxW-2*wall, boxH-2*wall]);\n        }\n        \n        // Recessed panels on left/right\n        for(side = [0, 1]) {\n            translate([wall, side ? 0 : boxW-wall, wall])\n                cube([boxL-2*wall, wall, boxH-2*wall]);\n        }\n        \n        // Recessed panel on top rim\n        translate([wall, wall, boxH-wall])\n            cube([boxL-2*wall, boxW-2*wall, wall]);\n    }\n}\n\n// Decorative frame around top\nmodule topFrame() {\n    frameWidth = 3;\n    \n    // Top rim frame\n    translate([-frameWidth, -frameWidth, boxH-wall])\n        cube([boxL+2*frameWidth, frameWidth, frameWidth]);\n        \n    translate([-frameWidth, boxW, boxH-wall])\n        cube([boxL+2*frameWidth, frameWidth, frameWidth]);\n        \n    translate([-frameWidth, -frameWidth, boxH-wall])\n        cube([frameWidth, boxW+2*frameWidth, frameWidth]);\n        \n    translate([boxL, -frameWidth, boxH-wall])\n        cube([frameWidth, boxW+2*frameWidth, frameWidth]);\n}\n\n// Simple legs with rounded corners\nmodule legs() {\n    legSize = 6;\n    cornerOffset = 4;\n    \n    for(x = [cornerOffset, boxL-cornerOffset-legSize]) {\n        for(y = [cornerOffset, boxW-cornerOffset-legSize]) {\n            // Leg block\n            translate([x, y, 0])\n                cube([legSize, legSize, legH]);\n                \n            // Small chamfer detail\n            translate([x+legSize-2, y+legSize-2, legH-2])\n                cube([2, 2, 2]);\n        }\n    }\n}\n\n// Hinge blocks on back\nmodule hinges() {\n    hingeW = 4;\n    hingeH = 3;\n    hingeD = 8;\n    \n    for(pos = [boxL*0.3, boxL*0.7]) {\n        translate([pos-hingeW/2, -hingeD+1, boxH-hingeH])\n            cube([hingeW, hingeD, hingeH]);\n    }\n}\n\n// Handle on front\nmodule handle() {\n    handleL = 30;\n    handleH = 8;\n    \n    translate([(boxL-handleL)/2, -1, boxH/2])\n        cube([handleL, 2, handleH]);\n        \n    // Handle ends\n    translate([(boxL-handleL)/2-2, -1, boxH/2])\n        cube([2, 2, handleH]);\n        \n    translate([(boxL-handleL)/2+handleL, -1, boxH/2])\n        cube([2, 2, handleH]);\n}\n\n// Assembly\nunion() {\n    body();\n    topFrame();\n    legs();\n    hinges();\n    handle();\n}",
    "renders": true
  },
  {
    "furniture": "hope",
    "openscad_code": "// Hope Chair (realistic style, medium complexity)\n// Overall dimensions: 80mm W x 85mm D x 100mm H\n\n// Leg module - tapered for realistic look\nmodule leg(h=45){\n    difference(){\n        cylinder(h=h, r1=4, r2=3, $fn=16);\n        translate([0,0,h-2]) cylinder(h=2, r1=3.5, r2=2.5, $fn=16);\n    }\n}\n\n// Side stretcher bar\nmodule stretcher(len){\n    rotate([90,0,0]) cylinder(h=len, r=2, $fn=12);\n}\n\n// Back slat\nmodule slat(w,h,t){\n    cube([w,h,t]);\n}\n\n// Seat frame\nmodule seat_frame(){\n    difference(){\n        // Main seat platform\n        cube([78,78,6]);\n        // Hollow center\n        translate([4,4,-1]) cube([70,70,8]);\n    }\n}\n\n// Backrest assembly\nmodule backrest(){\n    // Back frame\n    difference(){\n        translate([-3,-5,0]) cube([84,10,75]);\n        translate([0,0,5]) cube([78,12,65]);\n    }\n    \n    // Slats\n    for(i=[0:3]){\n        translate([10 + i*18, -3, 10]) slat(12,6,2);\n    }\n    \n    // Top rail\n    translate([0,-5,70]) cube([78,10,8]);\n}\n\n// Main assembly\nunion(){\n    // Seat\n    translate([0,0,45]) seat_frame();\n    \n    // Seat cushion (rounded top)\n    translate([1,1,51]) scale([1,1,0.6]) sphere(d=76, $fn=50);\n    \n    // Legs\n    translate([5,5,0]) leg();\n    translate([73,5,0]) leg();\n    translate([5,73,0]) leg();\n    translate([73,73,0]) leg();\n    \n    // Side stretchers\n    translate([5,40,22]) stretcher(68);\n    translate([40,5,22]) rotate([0,0,90]) stretcher(68);\n    \n    // Back legs (taller)\n    translate([5,73,0]) leg(55);\n    translate([73,73,0]) leg(55);\n    \n    // Backrest\n    translate([0,73,50]) backrest();\n    \n    // Support brackets under seat\n    translate([5,5,44]) rotate([90,0,0]) cylinder(h=68, r=2, $fn=12);\n    translate([5,5,44]) rotate([0,90,0]) cylinder(h=68, r=2, $fn=12);\n}",
    "renders": true
  },
  {
    "furniture": "cheval",
    "openscad_code": "// Cheval Mirror with Stand - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm width x ~40mm depth x ~120mm height\n\n$fn = 32;\n\nmodule ovalMirror(width, height, thickness) {\n    // Mirror glass with beveled edge\n    difference() {\n        scale([1, 0.9, 1]) cylinder(h = thickness, r = width/2);\n        translate([0, 0, -0.1]) scale([0.9, 0.8, 1]) cylinder(h = thickness + 0.2, r = width/2 - 2);\n    }\n}\n\nmodule mirrorFrame(width, height, thickness) {\n    // Ornate frame with raised edges\n    difference() {\n        scale([1, 0.9, 1]) cylinder(h = 4, r = width/2 + 3);\n        scale([1, 0.9, 1]) cylinder(h = 5, r = width/2);\n    }\n    // Frame details - top and bottom ridges\n    translate([0, 0, 2]) scale([1, 0.9, 0.3]) cylinder(h = 1, r = width/2 + 2);\n    translate([0, 0, 0]) scale([1, 0.9, 0.3]) cylinder(h = 1, r = width/2 + 2);\n}\n\nmodule supportPost(height, width) {\n    // Tapered support post with decorative rings\n    linear_extrude(height = height, scale = [0.8, 0.8]) \n        circle(r = width/2);\n    \n    // Decorative rings every 20mm\n    for(i = [1:3]) {\n        translate([0, 0, i * 25]) \n            cylinder(h = 2, r1 = width/2 + 1, r2 = width/2 + 1);\n    }\n}\n\nmodule base(width, depth, height) {\n    // Curved base with feet\n    difference() {\n        hull() {\n            translate([-width/2 + 5, 0, 0]) cylinder(h = height, r = 5);\n            translate([width/2 - 5, 0, 0]) cylinder(h = height, r = 5);\n            translate([0, depth/2 - 5, 0]) cylinder(h = height, r = 5);\n            translate([0, -depth/2 + 5, 0]) cylinder(h = height, r = 5);\n        }\n        // Hollow center for weight reduction\n        translate([0, 0, height/2]) cube([width - 10, depth - 10, height + 1], center = true);\n    }\n    \n    // Decorative feet\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (width/2 - 5), y * (depth/2 - 5), -2]) \n                cylinder(h = 4, r = 4);\n        }\n    }\n}\n\nmodule pivotJoint() {\n    // Ball joint for mirror adjustment\n    sphere(r = 6);\n    translate([0, 0, -3]) cylinder(h = 6, r = 4);\n    rotate([90, 0, 0]) cylinder(h = 20, r = 3);\n}\n\nmodule mirrorAssembly() {\n    // Complete mirror with frame\n    color(\"silver\") ovalMirror(50, 70, 2);\n    color(\"brown\") mirrorFrame(50, 70, 4);\n}\n\nmodule supportStructure() {\n    // Main support assembly\n    color(\"brown\") {\n        // Left support\n        translate([-35, 0, 0]) supportPost(100, 8);\n        // Right support\n        translate([35, 0, 0]) supportPost(100, 8);\n        \n        // Base\n        translate([0, 0, 0]) base(80, 40, 10);\n        \n        // Cross brace\n        translate([0, 0, 50]) rotate([90, 0, 0]) \n            cylinder(h = 70, r = 3);\n    }\n    \n    // Pivot joints\n    color(\"gray\") {\n        translate([-25, 15, 85]) pivotJoint();\n        translate([25, 15, 85]) mirror([1, 0, 0]) pivotJoint();\n    }\n}\n\n// Main assembly\nsupportStructure();\n\n// Mirror mounted on pivots\ntranslate([0, 15, 85]) rotate([0, 0, 0]) mirrorAssembly();",
    "renders": true
  },
  {
    "furniture": "rockingchair",
    "openscad_code": "// Rocking chair with realistic proportions and 3D-printable features\n// Approximate size: 100 mm tall, 80 mm wide, 120 mm deep\n\n// Overall scale and wall thickness\nscale = 1;\nwall = 2;\n\nmodule rocker_blade() {\n    difference() {\n        // Outer blade curve\n        hull() {\n            translate([0, 0, 0]) sphere(d = 6);\n            translate([80, 0, 0]) sphere(d = 6);\n            translate([10, 0, -6]) sphere(d = 6);\n            translate([70, 0, -6]) sphere(d = 6);\n        }\n        // Hollow out center for 3D printing\n        translate([40, -3, -3]) cube([40, 6, 6], center = true);\n    }\n}\n\nmodule seat() {\n    difference() {\n        // Seat base\n        cube([60, 50, wall], center = true);\n        // Rounded front edge\n        translate([0, 25, 0]) cylinder(h = wall + 0.1, r = 25, $fn = 30);\n    }\n    // Side support blocks\n    for (y = [-20, 20]) {\n        translate([30, y, 5]) cube([wall, 8, 10], center = true);\n        translate([-30, y, 5]) cube([wall, 8, 10], center = true);\n    }\n}\n\nmodule backrest() {\n    // Main backrest panel\n    difference() {\n        translate([0, 0, 30]) cube([60, 50, wall], center = true);\n        // Top curve\n        translate([0, 0, 55]) cylinder(h = wall + 0.1, r = 30, $fn = 30);\n    }\n    // Vertical slats\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, 30]) cube([wall, 46, 20], center = true);\n    }\n}\n\nmodule armrest() {\n    // Armrest support post\n    translate([35, 0, 0]) {\n        cube([wall, 8, 40], center = true);\n        // Armrest pad\n        translate([0, 0, 20]) cube([20, 12, wall], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Left rocker blade\n    translate([-30, -28, -20]) rotate([90, 0, 0]) rocker_blade();\n    \n    // Right rocker blade\n    translate([-30, 28, -20]) rotate([90, 0, 0]) rocker_blade();\n    \n    // Seat\n    translate([0, 0, 10]) seat();\n    \n    // Backrest\n    translate([0, 0, 10]) rotate([15, 0, 0]) backrest();\n    \n    // Armrests\n    translate([0, -25, 25]) armrest();\n    translate([0, 25, 25]) mirror([0, 1, 0]) armrest();\n    \n    // Front stretcher\n    translate([-30, 0, 5]) cube([wall, 56, wall], center = true);\n    \n    // Rear stretcher\n    translate([30, 0, 5]) cube([wall, 56, wall], center = true);\n}",
    "renders": true
  },
  {
    "furniture": "divanbed",
    "openscad_code": "// Divan Bed - Medium Complexity Realistic Style\n// Overall dimensions: 120mm width x 60mm depth x 40mm height\n\n// Main parameters\nbed_width = 120;\nbed_depth = 60;\nbed_height = 40;\nmattress_thickness = 8;\nleg_height = 12;\ndrawer_width = 28;\ndrawer_height = 8;\nwall_thickness = 2;\n\n// Base frame structure\nmodule base_frame() {\n    // Bottom platform\n    translate([0, 0, leg_height])\n    cube([bed_width, bed_depth, wall_thickness], center=true);\n    \n    // Side walls\n    translate([0, bed_depth/2 - wall_thickness/2, bed_height/2 + leg_height/2])\n    cube([bed_width, wall_thickness, bed_height - wall_thickness], center=true);\n    \n    translate([0, -bed_depth/2 + wall_thickness/2, bed_height/2 + leg_height/2])\n    cube([bed_width, wall_thickness, bed_height - wall_thickness], center=true);\n    \n    // Front and back walls\n    translate([bed_width/2 - wall_thickness/2, 0, bed_height/2 + leg_height/2])\n    cube([wall_thickness, bed_depth - wall_thickness*2, bed_height - wall_thickness], center=true);\n    \n    translate([-bed_width/2 + wall_thickness/2, 0, bed_height/2 + leg_height/2])\n    cube([wall_thickness, bed_depth - wall_thickness*2, bed_height - wall_thickness], center=true);\n}\n\n// Support legs\nmodule legs() {\n    for(x = [-bed_width/2 + 10, bed_width/2 - 10])\n        for(y = [-bed_depth/2 + 10, bed_depth/2 - 10]) {\n            translate([x, y, leg_height/2])\n            cylinder(h=leg_height, d=6, center=true);\n        }\n}\n\n// Drawers (2 drawers)\nmodule drawers() {\n    // Drawer 1\n    translate([-bed_width/4, 0, leg_height + bed_height/2 - drawer_height/2])\n    difference() {\n        cube([drawer_width, bed_depth - wall_thickness*2 - 4, drawer_height], center=true);\n        // Drawer cavity\n        translate([0, 0, wall_thickness/2])\n        cube([drawer_width - wall_thickness*2, bed_depth - wall_thickness*2 - 8, drawer_height - wall_thickness], center=true);\n    }\n    \n    // Drawer 2\n    translate([bed_width/4, 0, leg_height + bed_height/2 - drawer_height/2])\n    difference() {\n        cube([drawer_width, bed_depth - wall_thickness*2 - 4, drawer_height], center=true);\n        // Drawer cavity\n        translate([0, 0, wall_thickness/2])\n        cube([drawer_width - wall_thickness*2, bed_depth - wall_thickness*2 - 8, drawer_height - wall_thickness], center=true);\n    }\n    \n    // Drawer handles\n    translate([-bed_width/4, bed_depth/2 - 8, leg_height + bed_height/2])\n    rotate([90, 0, 0])\n    cylinder(h=6, d1=4, d2=3, center=true);\n    \n    translate([bed_width/4, bed_depth/2 - 8, leg_height + bed_height/2])\n    rotate([90, 0, 0])\n    cylinder(h=6, d1=4, d2=3, center=true);\n}\n\n// Headboard\nmodule headboard() {\n    translate([0, -bed_depth/2 + wall_thickness/2, leg_height + bed_height + 15])\n    cube([bed_width - wall_thickness*2, wall_thickness*2, 30], center=true);\n    \n    // Headboard posts\n    translate([-bed_width/2 + 5, -bed_depth/2 + 5, leg_height + bed_height + 15])\n    cube([wall_thickness*2, wall_thickness*2, 30], center=true);\n    \n    translate([bed_width/2 - 5, -bed_depth/2 + 5, leg_height + bed_height + 15])\n    cube([wall_thickness*2, wall_thickness*2, 30], center=true);\n}\n\n// Mattress\nmodule mattress() {\n    translate([0, 0, leg_height + bed_height + mattress_thickness/2])\n    cube([bed_width - wall_thickness*2, bed_depth - wall_thickness*2, mattress_thickness], center=true);\n}\n\n// Assembly\nunion() {\n    base_frame();\n    legs();\n    drawers();\n    headboard();\n    mattress();\n}",
    "renders": true
  },
  {
    "furniture": "sofabed",
    "openscad_code": "// Sofa-bed in realistic style, medium complexity\n// Overall footprint ~120 mm (L) x 60 mm (D) x 50 mm (H)\n\n$fa = 2;\n$fs = 1;\n\n// Parameters\nseat_h = 20;           // seat height\nseat_d = 55;           // seat depth\nback_h = 30;           // backrest height\ntotal_l = 120;         // total length\nleg_h  = 8;            // leg height\nwall   = 2;            // printable wall thickness\n\n// Main seat platform\nmodule seat_platform() {\n    // Box frame\n    difference() {\n        cube([total_l, seat_d, seat_h], center = true);\n        translate([0, 0, wall])\n            cube([total_l - 2*wall, seat_d - 2*wall, seat_h - wall], center = true);\n    }\n}\n\n// Backrest that folds down to become mattress extension\nmodule backrest() {\n    translate([0, seat_d/2 - wall, seat_h/2 + back_h/2 - wall])\n        difference() {\n            cube([total_l - 4*wall, wall*2.5, back_h], center = true);\n            translate([0, 0, wall])\n                cube([total_l - 6*wall, wall*2, back_h - 2*wall], center = true);\n        }\n}\n\n// Cushion grid\nmodule cushions() {\n    for (x = [-total_l/2 + 15, 0, total_l/2 - 15]) {\n        translate([x, 0, seat_h/2 + 4])\n            difference() {\n                cube([28, seat_d - 8, 8], center = true);\n                translate([0, 0, wall])\n                    cube([28 - 2*wall, seat_d - 8 - 2*wall, 8 - wall], center = true);\n            }\n    }\n}\n\n// Support legs\nmodule legs() {\n    for (x = [-total_l/2 + 10, total_l/2 - 10])\n        for (y = [-seat_d/2 + 8, seat_d/2 - 8]) {\n            translate([x, y, -leg_h/2])\n                difference() {\n                    cylinder(h = leg_h, d = 6, center = true);\n                    cylinder(h = leg_h + 1, d = 2, center = true);\n                }\n        }\n}\n\n// Armrests\nmodule armrests() {\n    for (side = [-1, 1]) {\n        translate([side * (total_l/2 - wall), 0, seat_h/2 + 8])\n            difference() {\n                cube([wall*2, seat_d - 6, 16], center = true);\n                translate([0, 0, wall])\n                    cube([wall*1.5, seat_d - 6 - 2*wall, 16 - 2*wall], center = true);\n            }\n    }\n}\n\n// Pull-out mattress section (nested under seat)\nmodule mattress_tray() {\n    translate([0, 0, -leg_h - 2])\n        difference() {\n            cube([total_l - 10, seat_d - 10, 4], center = true);\n            translate([0, 0, wall])\n                cube([total_l - 10 - 2*wall, seat_d - 10 - 2*wall, 4 - wall], center = true);\n        }\n}\n\n// Assembly\nunion() {\n    seat_platform();\n    backrest();\n    cushions();\n    legs();\n    armrests();\n    mattress_tray();\n}",
    "renders": true
  },
  {
    "furniture": "trundle",
    "openscad_code": "// Trundle Bed Frame with Pull-out Storage Drawer\n// Designed for 3D printing at ~120mm length\n\n// Main dimensions in mm\nbed_length = 120;\nbed_width = 70;\nbed_height = 35;\nwall_thickness = 2;\nmattress_thickness = 8;\nleg_height = 20;\n\n// Create the main bed frame\nmodule bed_frame() {\n    difference() {\n        // Outer frame\n        cube([bed_length, bed_width, bed_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, 0])\n            cube([bed_length - 2*wall_thickness, bed_width - 2*wall_thickness, bed_height]);\n    }\n}\n\n// Create mattress\nmodule mattress() {\n    translate([0, 0, bed_height])\n        cube([bed_length - 4*wall_thickness, bed_width - 4*wall_thickness, mattress_thickness]);\n}\n\n// Create legs\nmodule legs() {\n    leg_width = 8;\n    leg_offset = 5;\n    \n    // Front legs\n    translate([leg_offset, leg_offset, -leg_height])\n        cube([leg_width, leg_width, leg_height]);\n    translate([bed_length - leg_offset - leg_width, leg_offset, -leg_height])\n        cube([leg_width, leg_width, leg_height]);\n    \n    // Back legs\n    translate([leg_offset, bed_width - leg_offset - leg_width, -leg_height])\n        cube([leg_width, leg_width, leg_height]);\n    translate([bed_length - leg_offset - leg_width, bed_width - leg_offset - leg_width, -leg_height])\n        cube([leg_width, leg_width, leg_height]);\n}\n\n// Create pull-out drawer\nmodule drawer() {\n    drawer_length = bed_length - 20;\n    drawer_width = bed_width - 4*wall_thickness;\n    drawer_height = bed_height - 2*wall_thickness;\n    \n    // Drawer box\n    difference() {\n        translate([10, 2*wall_thickness, wall_thickness])\n            cube([drawer_length, drawer_width - 4*wall_thickness, drawer_height - wall_thickness]);\n            \n        // Hollow interior\n        translate([10 + wall_thickness, 3*wall_thickness, wall_thickness])\n            cube([drawer_length - 2*wall_thickness, drawer_width - 6*wall_thickness, drawer_height - 2*wall_thickness]);\n    }\n    \n    // Drawer front panel\n    translate([5, wall_thickness, wall_thickness])\n        cube([wall_thickness, drawer_width - 2*wall_thickness, drawer_height - wall_thickness]);\n    \n    // Handle\n    handle_width = 20;\n    handle_depth = 3;\n    translate([6, bed_width/2 - handle_width/2, drawer_height/2 - handle_depth/2])\n        cube([wall_thickness, handle_width, handle_depth]);\n}\n\n// Create support slats\nmodule slats() {\n    slat_width = 3;\n    slat_gap = 10;\n    num_slats = floor((bed_length - 4*wall_thickness) / (slat_width + slat_gap));\n    \n    for (i = [0:num_slats-1]) {\n        translate([2*wall_thickness + i*(slat_width + slat_gap), 2*wall_thickness, bed_height - wall_thickness])\n            cube([slat_width, bed_width - 4*wall_thickness, wall_thickness]);\n    }\n}\n\n// Assemble the trundle\nunion() {\n    bed_frame();\n    legs();\n    mattress();\n    slats();\n    drawer();\n}",
    "renders": true
  },
  {
    "furniture": "platform",
    "openscad_code": "// Platform bed - realistic style, medium complexity\n// Overall dimensions: 120mm x 80mm x 35mm (printable size)\n\n$fn = 24;\n\n// Main platform top\nmodule platform_top() {\n    // Solid top surface with rounded edges\n    difference() {\n        // Main top block\n        translate([0, 0, 30])\n            cube([120, 80, 5], center=true);\n        \n        // Rounded top edges\n        translate([0, 0, 33])\n            cube([116, 76, 2], center=true);\n    }\n}\n\n// Platform base frame\nmodule platform_frame() {\n    // Perimeter frame\n    difference() {\n        // Outer frame\n        translate([0, 0, 15])\n            cube([118, 78, 30], center=true);\n        \n        // Hollow center\n        translate([0, 0, 15])\n            cube([114, 74, 30], center=true);\n    }\n}\n\n// Support legs\nmodule legs() {\n    // Four corner legs\n    for(x = [-55, 55])\n    for(y = [-35, 35]) {\n        translate([x, y, 0])\n            cylinder(h=15, r=3, center=true);\n    }\n    \n    // Center support legs\n    for(y = [-25, 25]) {\n        translate([0, y, 0])\n            cylinder(h=15, r=2.5, center=true);\n    }\n}\n\n// Slat supports\nmodule slats() {\n    // Wooden slats across the frame\n    for(i = [-40:10:40]) {\n        translate([i, 0, 25])\n            cube([4, 76, 2], center=true);\n    }\n}\n\n// Headboard\nmodule headboard() {\n    // Low headboard attached to back\n    translate([0, -42, 30])\n        cube([100, 4, 20], center=true);\n    \n    // Headboard posts\n    for(x = [-48, 48]) {\n        translate([x, -42, 20])\n            cylinder(h=20, r=2.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    platform_top();\n    platform_frame();\n    legs();\n    \n    // Support system\n    slats();\n    \n    // Headboard\n    headboard();\n    \n    // Small details - corner brackets\n    for(x = [-55, 55])\n    for(y = [-35, 35]) {\n        translate([x, y, 15])\n            difference() {\n                cube([6, 6, 2], center=true);\n                cylinder(h=3, r=1.5, center=true);\n            }\n    }\n}",
    "renders": true
  },
  {
    "furniture": "sleigh",
    "openscad_code": "// Realistic Sleigh Chair (Medium Complexity)\n// Approx 120mm L x 60mm W x 80mm H\n\n$fn = 32;  // Smooth curves\n\nmodule sleigh() {\n    // Main runners (curved base)\n    difference() {\n        // Outer runner shape\n        translate([-10, -30, 0])\n            scale([1, 1, 0.8])\n                cylinder(h=5, r1=30, r2=30);\n        // Inner hollow\n        translate([-8, -30, -1])\n            scale([0.8, 0.85, 1.2])\n                cylinder(h=7, r1=28, r2=28);\n    }\n    \n    // Mirror for second runner\n    mirror([0, 1, 0]) {\n        translate([-10, -30, 0])\n            scale([1, 1, 0.8])\n                cylinder(h=5, r1=30, r2=30);\n        translate([-8, -30, -1])\n            scale([0.8, 0.85, 1.2])\n                cylinder(h=7, r1=28, r2=28);\n    }\n    \n    // Cross supports between runners\n    for (x = [-25, -10, 5, 20]) {\n        translate([x, -30, 2])\n            cube([4, 60, 4]);\n    }\n    \n    // Seat base frame\n    translate([-10, -25, 5])\n        cube([60, 50, 3]);\n    \n    // Seat cushion\n    translate([-8, -23, 8])\n        cube([56, 46, 8]);\n    \n    // Backrest supports\n    for (y = [-20, 20]) {\n        translate([45, y, 5])\n            rotate([15, 0, 0])\n                cube([3, 3, 35]);\n    }\n    \n    // Backrest frame\n    translate([45, -25, 8])\n        rotate([15, 0, 0])\n            cube([3, 50, 30]);\n    \n    // Backrest slats\n    for (h = [15, 20, 25]) {\n        translate([46, -23, h])\n            rotate([15, 0, 0])\n                cube([2, 46, 2]);\n    }\n    \n    // Armrest supports\n    translate([20, -28, 8])\n        cube([25, 3, 15]);\n    translate([20, 25, 8])\n        cube([25, 3, 15]);\n    \n    // Armrest tops\n    translate([42, -30, 22])\n        rotate([0, 0, 15])\n            cube([3, 8, 2]);\n    translate([42, 22, 22])\n        rotate([0, 0, -15])\n            cube([3, 8, 2]);\n    \n    // Decorative front crossbar\n    translate([-5, -27, 4])\n        rotate([0, 90, 0])\n            cylinder(h=54, r=2);\n    \n    // Reinforcement blocks at joints\n    translate([42, -23, 5])\n        cube([6, 6, 6]);\n    translate([42, 17, 5])\n        cube([6, 6, 6]);\n}\n\nsleigh();",
    "renders": true
  },
  {
    "furniture": "fourposter",
    "openscad_code": "// Four-Poster Bed - realistic, medium complexity\n// 100 mm long, 70 mm wide, 90 mm tall\n\n$fn = 30;\n\n// overall dimensions\nbed_w = 70;\nbed_l = 100;\nbed_h = 90;\nmattress_h = 8;\npost_w = 6;\nrail_h = 4;\n\n// mattress\nmodule mattress() {\n    color(\"Beige\")\n    translate([0, 0, mattress_h/2])\n    cube([bed_w - 10, bed_l - 15, mattress_h], center = true);\n}\n\n// headboard\nmodule headboard() {\n    color(\"Tan\")\n    difference() {\n        translate([-bed_w/2 + 1, -bed_l/2 + 1, bed_h/2 - rail_h - 10])\n        cube([2, bed_l - 2, bed_h - rail_h - 10], center = false);\n        \n        // decorative cut-outs\n        for (i=[1:7]) {\n            translate([-bed_w/2 + 0.5, -bed_l/2 + i*12, 20])\n            cube([3, 6, 30], center = false);\n        }\n    }\n}\n\n// footboard\nmodule footboard() {\n    color(\"Tan\")\n    translate([bed_w/2 - 1, -bed_l/2 + 1, bed_h/2 - rail_h - 10])\n    cube([2, bed_l - 2, bed_h - rail_h - 10], center = false);\n}\n\n// post\nmodule post(x, y) {\n    color(\"SaddleBrown\")\n    union() {\n        // main post\n        translate([x, y, 0])\n        cylinder(h = bed_h, r = post_w/2, center = false);\n        \n        // finial\n        translate([x, y, bed_h])\n        sphere(r = post_w/2);\n    }\n}\n\n// side rail\nmodule rail(l) {\n    color(\"SaddleBrown\")\n    rotate([90, 0, 90])\n    translate([0, 0, -rail_h/2])\n    cube([l, rail_h, post_w], center = true);\n}\n\n// bed frame slats\nmodule slats() {\n    color(\"Sienna\")\n    for (i = [-30:10:30]) {\n        translate([i, 0, mattress_h])\n        cube([3, bed_l - 15, 2], center = true);\n    }\n}\n\n// assembly\nunion() {\n    // four posts\n    post(-bed_w/2 + post_w/2, -bed_l/2 + post_w/2);\n    post( bed_w/2 - post_w/2, -bed_l/2 + post_w/2);\n    post(-bed_w/2 + post_w/2,  bed_l/2 - post_w/2);\n    post( bed_w/2 - post_w/2,  bed_l/2 - post_w/2);\n    \n    // rails connecting posts\n    rail(bed_w - post_w);\n    translate([0, bed_l - post_w, rail_h])\n    rotate([0, 0, 0])\n    rail(bed_w - post_w);\n    \n    rail(bed_l - post_w);\n    translate([-bed_w/2 + post_w/2, 0, rail_h])\n    rotate([0, 0, 90])\n    rail(bed_l - post_w);\n    \n    translate([bed_w/2 - post_w/2, 0, rail_h])\n    rotate([0, 0, 90])\n    rail(bed_l - post_w);\n    \n    // headboard and footboard\n    headboard();\n    footboard();\n    \n    // mattress and slats\n    slats();\n    mattress();\n}",
    "renders": true
  },
  {
    "furniture": "poster",
    "openscad_code": "// Poster bed frame - realistic style, medium complexity\nbed_width = 120;\nbed_length = 160;\nbed_height = 40;\npost_height = 150;\npost_size = 8;\nmattress_thickness = 20;\nslat_thickness = 2;\nslat_width = 20;\nslat_spacing = 10;\nrail_thickness = 4;\ncanopy_thickness = 6;\n\nmodule poster_post() {\n    // Main post with tapered top\n    cylinder(h = post_height, d1 = post_size, d2 = post_size * 0.8, $fn = 8);\n    // Decorative ball finial\n    translate([0, 0, post_height + 2]) sphere(d = post_size * 0.9, $fn = 16);\n}\n\nmodule bed_frame() {\n    // Base frame\n    difference() {\n        cube([bed_width, bed_length, bed_height]);\n        translate([rail_thickness, rail_thickness, rail_thickness])\n            cube([bed_width - 2*rail_thickness, bed_length - 2*rail_thickness, bed_height]);\n    }\n    \n    // Corner posts\n    translate([rail_thickness, rail_thickness, bed_height]) poster_post();\n    translate([bed_width - rail_thickness - post_size, rail_thickness, bed_height]) poster_post();\n    translate([rail_thickness, bed_length - rail_thickness - post_size, bed_height]) poster_post();\n    translate([bed_width - rail_thickness - post_size, bed_length - rail_thickness - post_size, bed_height]) poster_post();\n    \n    // Side rails\n    translate([rail_thickness, rail_thickness, bed_height + post_height/2]) \n        cube([bed_width - 2*rail_thickness - post_size, rail_thickness, rail_thickness]);\n    translate([rail_thickness, bed_length - rail_thickness - post_size, bed_height + post_height/2]) \n        cube([bed_width - 2*rail_thickness - post_size, rail_thickness, rail_thickness]);\n    \n    // Headboard and footboard rails\n    translate([rail_thickness, rail_thickness, bed_height + post_height/2]) \n        cube([rail_thickness, bed_length - 2*rail_thickness - post_size, rail_thickness]);\n    translate([bed_width - rail_thickness - post_size, rail_thickness, bed_height + post_height/2]) \n        cube([rail_thickness, bed_length - 2*rail_thickness - post_size, rail_thickness]);\n    \n    // Canopy frame\n    // Top rails\n    translate([rail_thickness + post_size/2, rail_thickness + post_size/2, bed_height + post_height])\n        cube([bed_width - 2*rail_thickness - post_size, rail_thickness, canopy_thickness]);\n    translate([rail_thickness + post_size/2, bed_length - rail_thickness - post_size, bed_height + post_height])\n        cube([bed_width - 2*rail_thickness - post_size, rail_thickness, canopy_thickness]);\n    translate([rail_thickness + post_size/2, rail_thickness + post_size/2, bed_height + post_height])\n        cube([rail_thickness, bed_length - 2*rail_thickness - post_size, canopy_thickness]);\n    translate([bed_width - rail_thickness - post_size, rail_thickness + post_size/2, bed_height + post_height])\n        cube([rail_thickness, bed_length - 2*rail_thickness - post_size, canopy_thickness]);\n}\n\nmodule mattress() {\n    // Main mattress\n    translate([0, 0, bed_height])\n        cube([bed_width, bed_length, mattress_thickness]);\n}\n\nmodule slats() {\n    // Support slats under mattress\n    num_slats = floor((bed_length - 2*rail_thickness) / (slat_width + slat_spacing));\n    for(i = [0:num_slats-1]) {\n        translate([rail_thickness + 5, rail_thickness + i*(slat_width + slat_spacing), bed_height - slat_thickness])\n            cube([bed_width - 2*rail_thickness - 10, slat_width, slat_thickness]);\n    }\n}\n\nmodule bed_poster() {\n    bed_frame();\n    slats();\n    mattress();\n}\n\n// Render the complete poster bed\nbed_poster();",
    "renders": true
  },
  {
    "furniture": "canopyframe",
    "openscad_code": "// Canopy frame in realistic style, medium complexity\n// Overall size ~100mm tall, 60mm wide, 50mm deep\n\n// Parameters\nleg_h = 90;\nleg_w = 3;\nrail_w = 3;\ntop_frame_w = 4;\ncanopy_top_h = 8;\n\n// Helper for rounded rectangle\nmodule rounded_cube(size, r, center=false) {\n    translate([0,0,r])\n    hull() {\n        for(x=[-size.x/2+r, size.x/2-r])\n            for(y=[-size.y/2+r, size.y/2-r])\n                translate([x,y,0])\n                    cylinder(r=r, h=size.z-2*r, center=false);\n    }\n}\n\n// Leg with simple tapered design\nmodule leg() {\n    difference() {\n        // Main leg body\n        rounded_cube([leg_w, leg_w, leg_h], 1.5);\n        // Taper detail grooves\n        for(i=[1:3]) {\n            translate([0, 0, i*leg_h/4])\n                rotate([0,45,0])\n                    cube([leg_w+0.1, 0.5, leg_w*2], center=true);\n        }\n    }\n}\n\n// Top frame rail with groove detail\nmodule top_frame_rail(len) {\n    difference() {\n        rounded_cube([len, top_frame_w, top_frame_w], 2);\n        // Groove for fabric\n        translate([0, -top_frame_w/2+1, top_frame_w/2])\n            cube([len-4, 1, 2], center=true);\n    }\n}\n\n// Side rail connecting legs\nmodule side_rail(len) {\n    difference() {\n        rounded_cube([rail_w, len, rail_w], 1.5);\n        // Subtle middle groove\n        translate([-rail_w/2+1, 0, rail_w/2])\n            cube([1, len-2, 0.5], center=true);\n    }\n}\n\n// Corner bracket for stability\nmodule corner_bracket() {\n    difference() {\n        union() {\n            rounded_cube([6, 6, 3], 1);\n            translate([3,3,0]) rotate([0,0,45]) cube([4,4,3], center=true);\n        }\n        cylinder(h=4, r=1.5, center=true);\n    }\n}\n\n// Assembly\nmodule canopy_frame() {\n    // Four legs\n    for(x=[-25, 25])\n        for(y=[-20, 20])\n            translate([x, y, 0])\n                leg();\n    \n    // Top frame rectangle\n    translate([0, 0, leg_h-2])\n    union() {\n        top_frame_rail(55); // front/back\n        rotate([0,0,90]) \n            top_frame_rail(45); // left/right\n    }\n    \n    // Side rails\n    translate([0, 0, leg_h/2])\n    union() {\n        side_rail(50);\n        rotate([0,0,90]) side_rail(40);\n    }\n    \n    // Corner brackets\n    for(x=[-25, 25])\n        for(y=[-20, 20])\n            translate([x, y, leg_h-8])\n                corner_bracket();\n    \n    // Canopy top panel\n    translate([0, 0, leg_h+top_frame_w/2])\n    difference() {\n        rounded_cube([55, 45, canopy_top_h], 3);\n        // Hollow center for fabric\n        translate([0,0,canopy_top_h/2])\n            cube([45, 35, canopy_top_h+0.1], center=true);\n    }\n    \n    // Small dowels for fabric attachment\n    for(i=[-20:10:20])\n        translate([i, 22, leg_h+top_frame_w/2])\n            cylinder(h=canopy_top_h, r=1.5);\n}\n\ncanopy_frame();",
    "renders": true
  },
  {
    "furniture": "bedframe",
    "openscad_code": "// Realistic bedframe - medium complexity\n$fn = 32;\n\n// Overall dimensions (mm)\nbed_length = 120;\nbed_width = 80;\nbed_height = 35;\nmattress_thickness = 8;\nleg_height = 30;\nleg_size = 6;\n\n// Headboard dimensions\nheadboard_height = 45;\nheadboard_thickness = 4;\n\n// Slats configuration\nslat_width = 4;\nslat_thickness = 2;\nnum_slats = 9;\n\n// Side rail dimensions\nrail_width = 3;\nrail_height = 15;\n\n// Module for bed leg\nmodule bed_leg() {\n    // Main leg post\n    translate([-leg_size/2, -leg_size/2, 0])\n        cube([leg_size, leg_size, leg_height]);\n    \n    // Decorative foot detail\n    translate([-leg_size/2 - 1, -leg_size/2 - 1, -1])\n        cube([leg_size + 2, leg_size + 2, 2]);\n}\n\n// Module for headboard\nmodule headboard() {\n    // Main headboard panel\n    translate([-headboard_thickness/2, -bed_width/2 - 2, 0])\n        cube([headboard_thickness, bed_width + 4, headboard_height]);\n    \n    // Top rail detail\n    translate([-headboard_thickness/2 - 1, -bed_width/2 - 3, headboard_height - 3])\n        cube([headboard_thickness + 2, bed_width + 6, 3]);\n    \n    // Decorative vertical slats\n    for(i = [-3:1:3]) {\n        translate([0, i * 10, 5])\n            cube([headboard_thickness + 0.5, 2, headboard_height - 10]);\n    }\n}\n\n// Module for side rail with support detail\nmodule side_rail(length) {\n    // Main rail\n    translate([0, -rail_width/2, 0])\n        cube([length, rail_width, rail_height]);\n    \n    // Support bracket detail\n    for(i = [1:3:length-3]) {\n        translate([i, -rail_width/2 - 1, -2])\n            cube([2, rail_width + 2, rail_height + 2]);\n    }\n}\n\n// Module for slat support\nmodule slat_support() {\n    // Support beam\n    translate([-bed_length/2 + 5, -bed_width/2 + 5, leg_height])\n        cube([bed_length - 10, bed_width - 10, slat_thickness]);\n    \n    // Individual slats\n    for(i = [0:1:num_slats-1]) {\n        translate([-bed_length/2 + 10 + i*(bed_length - 20)/num_slats, \n                   -bed_width/2 + 5, \n                   leg_height + slat_thickness])\n            cube([slat_width, bed_width - 10, slat_thickness]);\n    }\n}\n\n// Assemble the bedframe\nunion() {\n    // Headboard\n    translate([bed_length/2 + headboard_thickness/2, 0, 0])\n        headboard();\n    \n    // Footboard (simplified version of headboard)\n    translate([-bed_length/2 - headboard_thickness/2, 0, 0])\n        rotate([0, 0, 180])\n            scale([1, 1, 0.6])\n                headboard();\n    \n    // Side rails\n    translate([0, bed_width/2 + rail_width/2, leg_height - rail_height])\n        side_rail(bed_length);\n    \n    translate([0, -bed_width/2 - rail_width/2, leg_height - rail_height])\n        side_rail(bed_length);\n    \n    // Slat support system\n    slat_support();\n    \n    // Bed legs - four corners\n    translate([bed_length/2 - leg_size, bed_width/2 - leg_size, 0])\n        bed_leg();\n    \n    translate([bed_length/2 - leg_size, -bed_width/2, 0])\n        bed_leg();\n    \n    translate([-bed_length/2, bed_width/2 - leg_size, 0])\n        bed_leg();\n    \n    translate([-bed_length/2, -bed_width/2, 0])\n        bed_leg();\n    \n    // Optional mattress\n    translate([0, 0, leg_height + 2*slat_thickness + 0.5])\n        color(\"beige\")\n            cube([bed_length - 10, bed_width - 10, mattress_thickness], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "bedrail",
    "openscad_code": "// Bedrail for a child's bed\n// Overall dimensions: 120 mm long, 30 mm deep, 40 mm high\n// Wall thickness: 2 mm for 3D-printability\n\n// Main horizontal bar\nmodule top_rail()\n    translate([0, 0, 38])\n        cube([120, 30, 4], center = true);\n\n// Vertical slats\nmodule slats()\n{\n    for (i = [-40:20:40])\n        translate([i, 0, 19])\n            cube([6, 28, 38], center = true);\n}\n\n// End posts\nmodule post(x)\n{\n    // Outer post\n    translate([x, 0, 0])\n        union()\n        {\n            // Post body\n            translate([0, 0, 20])\n                cube([12, 30, 40], center = true);\n\n            // Mounting flange\n            translate([0, 0, 2])\n                cube([18, 36, 4], center = true);\n        }\n\n    // Inner reinforcement rib\n    translate([x, 0, 0])\n        difference()\n        {\n            cube([8, 26, 38], center = true);\n            translate([0, 0, -10])\n                cube([6, 24, 36], center = true);\n        }\n}\n\n// Assembly\nunion()\n{\n    top_rail();\n    slats();\n    post(-60);\n    post(60);\n}",
    "renders": true
  },
  {
    "furniture": "slat",
    "openscad_code": "// Slat-back bar stool - realistic style, medium complexity\n// Overall dimensions: 120mm high, 110mm wide, 110mm deep\n\n$fn = 32;  // Smooth curves\n\n// Parameters\nleg_w = 8;           // Leg thickness\nseat_h = 12;         // Seat thickness\nstretcher_d = 6;     // Stretcher diameter\nslat_w = 6;          // Slat thickness\nslat_gap = 8;        // Gap between slats\nback_h = 45;         // Backrest height above seat\nback_angle = 10;     // Backrest tilt angle (degrees)\n\nmodule stool() {\n    // Four legs with slight taper\n    module leg(x, y) {\n        translate([x, y, 0]) {\n            difference() {\n                // Main leg\n                cube([leg_w, leg_w, 100], center = true);\n                // Taper bottom\n                translate([0, 0, -45])\n                    cube([leg_w*1.1, leg_w*1.1, 12], center = true);\n            }\n            // Foot pad\n            translate([0, 0, -50])\n                cylinder(h = 2, r1 = leg_w*0.6, r2 = leg_w*0.5, center = true);\n        }\n    }\n\n    // Seat top with rounded edges\n    module seat() {\n        translate([0, 0, 45]) {\n            // Main seat block\n            difference() {\n                cube([105, 105, seat_h], center = true);\n                // Rounding on top edges\n                for (dx = [-1, 1])\n                    for (dy = [-1, 1])\n                        translate([dx*52.5, dy*52.5, 6])\n                            sphere(r = 6);\n            }\n            // Center hole for weight reduction\n            translate([0, 0, -1])\n                cylinder(h = seat_h+2, r = 20, center = true);\n        }\n    }\n\n    // Horizontal stretchers\n    module stretcher(x1, y1, x2, y2, z) {\n        translate([(x1+x2)/2, (y1+y2)/2, z])\n            rotate([0, 0, atan2(y2-y1, x2-x1)])\n                cylinder(h = sqrt((x2-x1)^2 + (y2-y1)^2), r = stretcher_d/2, center = true);\n    }\n\n    // Vertical slats for backrest\n    module slat(x) {\n        translate([x, 0, 45 + back_h/2]) {\n            rotate([back_angle, 0, 0]) {\n                difference() {\n                    cube([slat_w, 105, back_h], center = true);\n                    // Rounded top\n                    translate([0, 0, back_h/2])\n                        sphere(r = slat_w/2);\n                }\n            }\n        }\n    }\n\n    // Assemble stool\n    union() {\n        // Legs\n        leg(-45, -45);\n        leg(45, -45);\n        leg(-45, 45);\n        leg(45, 45);\n        \n        // Seat\n        seat();\n        \n        // Lower stretchers\n        stretcher(-45, -45, 45, -45, 25);\n        stretcher(-45, 45, 45, 45, 25);\n        stretcher(-45, -45, -45, 45, 25);\n        stretcher(45, -45, 45, 45, 25);\n        \n        // Mid stretchers\n        stretcher(-35, -35, 35, -35, 40);\n        stretcher(-35, 35, 35, 35, 40);\n        \n        // Backrest slats\n        for (x = [-35, -20, -5, 10, 25, 40]) {\n            slat(x);\n        }\n        \n        // Backrest top rail\n        translate([0, 0, 45 + back_h + 3]) {\n            rotate([back_angle, 0, 0])\n                cube([95, 8, 6], center = true);\n        }\n    }\n}\n\n// Main model\nstool();",
    "renders": true
  },
  {
    "furniture": "headrail",
    "openscad_code": "// OpenSCAD Headboard (headrail) – realistic, medium complexity\n// Dimensions: 130 mm wide × 20 mm deep × 80 mm high\n// Wall thickness: 2 mm – printable without supports\n\n$fn = 36;\n\n// Overall outer envelope\nmodule headboard() {\n    // Main rectangular panel\n    difference() {\n        translate([0, -10, 40])\n            cube([130, 20, 80], center = true);\n\n        // Hollow the inside (2 mm walls)\n        translate([0, -8, 40])\n            cube([126, 16, 76], center = true);\n    }\n\n    // Top rail cap\n    translate([0, 0, 80])\n        cube([130, 22, 6], center = true);\n\n    // Bottom rail / mattress support lip\n    translate([0, 0, 0])\n        cube([130, 22, 6], center = true);\n\n    // Vertical posts / legs\n    for (x = [-60, 60])\n        translate([x, 0, 40])\n            difference() {\n                cube([10, 20, 80], center = true);\n                translate([0, 0, 0])\n                    cube([6, 16, 76], center = true);\n            }\n\n    // Decorative rectangular recesses (4 across)\n    for (x = [-45, -15, 15, 45])\n        translate([x, 0, 40])\n            cube([20, 12, 40], center = true);\n\n    // Beveled top edge on outer frame\n    difference() {\n        translate([0, 0, 83])\n            cube([134, 24, 6], center = true);\n        translate([0, 0, 87])\n            cube([130, 20, 6], center = true);\n    }\n\n    // Small through-holes for mounting bolts\n    for (x = [-55, 55])\n        translate([x, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 22, d = 4, center = true);\n}\n\nheadboard();",
    "renders": true
  },
  {
    "furniture": "footrail",
    "openscad_code": "// OpenSCAD Footrail for Bar / Counter\n// Realistic medium-complexity version\n\n$fn = 50;\n\n// Main dimensions (in mm)\nrail_length = 120;\nrail_dia      = 8;\nleg_height    = 35;\nfoot_dia      = 18;\nfoot_thick    = 3;\nwall_thick    = 2;\n\n// Helper module for rounded edges of rectangular prisms\nmodule rounded_box(w, d, h, r) {\n    difference() {\n        cube([w, d, h]);\n        translate([ r,  r, -1]) cube([w-2*r, d-2*r, h+2]);\n        translate([ r, -1,  r]) cube([w-2*r, d+2, h-2*r]);\n        translate([-1,  r,  r]) cube([w+2, d-2*r, h-2*r]);\n    }\n}\n\n// Rail tube\nmodule footrail_tube() {\n    rotate([0, 90, 0])\n        cylinder(h = rail_length, d = rail_dia, center = true);\n}\n\n// End-cap for rail\nmodule end_cap() {\n    difference() {\n        cylinder(h = rail_dia, d = rail_dia + 2*wall_thick, center = true);\n        cylinder(h = rail_dia + 2, d = rail_dia, center = true);\n    }\n}\n\n// Leg with foot\nmodule leg() {\n    // Vertical support tube\n    cylinder(h = leg_height, d = rail_dia + 2*wall_thick);\n\n    // Foot (disk base)\n    translate([0, 0, -foot_thick/2])\n        cylinder(h = foot_thick, d = foot_dia);\n    \n    // Chamfer on foot edge\n    difference() {\n        cylinder(h = foot_thick, d = foot_dia);\n        translate([0, 0, -1])\n            cylinder(h = foot_thick + 2, d = foot_dia - 3);\n    }\n}\n\n// Bracket to connect leg to rail\nmodule bracket() {\n    // Vertical sleeve\n    cylinder(h = rail_dia*2, d = rail_dia + 4*wall_thick);\n    \n    // Horizontal sleeve (rail passes through)\n    translate([0, 0, rail_dia*2/2])\n        rotate([90, 0, 0])\n            cylinder(h = rail_dia*1.5, d = rail_dia + 2*wall_thick);\n    \n    // Reinforcements\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([rail_dia/2 + wall_thick, 0, rail_dia*2/2])\n                cube([rail_dia/2, wall_thick, rail_dia], center = true);\n}\n\n// Complete assembly\nunion() {\n    // Left leg assembly\n    translate([-rail_length/2 - rail_dia/2, 0, foot_thick/2]) {\n        leg();\n        translate([0, 0, leg_height + rail_dia]) bracket();\n    }\n\n    // Right leg assembly (mirrored)\n    translate([rail_length/2 + rail_dia/2, 0, foot_thick/2]) {\n        leg();\n        translate([0, 0, leg_height + rail_dia]) bracket();\n    }\n\n    // Rail tube\n    translate([0, 0, leg_height + rail_dia]) footrail_tube();\n\n    // End caps\n    translate([-rail_length/2 - rail_dia/2, 0, leg_height + rail_dia]) rotate([0, 90, 0]) end_cap();\n    translate([rail_length/2 + rail_dia/2, 0, leg_height + rail_dia]) rotate([0, 90, 0]) end_cap();\n}",
    "renders": true
  },
  {
    "furniture": "molding",
    "openscad_code": "// Realistic Medium-Complexity Molding Trim for Furniture (Baseboard Style)\n// Designed for 3D printing: 2 mm walls, no overhangs, 100 mm long\n\n// Overall dimensions\nlength = 100;       // mm\nheight = 25;        // mm\ndepth  = 10;        // mm\n\n// Wall thickness\nt = 2;              // mm\n\n// Repeating dentil block pattern\ndentil_w = 6;       // mm\ndentil_h = 4;       // mm\ndentil_gap = 4;     // mm\ndentil_count = floor(length / (dentil_w + dentil_gap));\n\n// Main back plate (mounting flange)\nmodule back_plate() {\n    difference() {\n        cube([length, depth, height], center = false);\n        translate([t, t, t])\n            cube([length - 2*t, depth - t, height - 2*t], center = false);\n    }\n}\n\n// Decorative top molding profile (quarter-round-ish)\nmodule top_molding() {\n    linear_extrude(height = length, center = false, convexity = 4)\n    polygon(points=[\n        [0, 0],\n        [0, height - t - 2],\n        [2, height - t],\n        [depth - t, height - t],\n        [depth, height - t - 2],\n        [depth, 0]\n    ]);\n}\n\n// Dentil blocks along bottom\nmodule dentil_row() {\n    for (i = [0 : dentil_count - 1]) {\n        translate([i * (dentil_w + dentil_gap) + dentil_gap/2, 0, t])\n            cube([dentil_w, depth, dentil_h]);\n    }\n}\n\n// Small screw countersinks for mounting\nmodule screw_holes() {\n    hole_r = 2.5;   // 5 mm screw\n    hole_d = 4;     // countersink depth\n    \n    for (x = [15 : length - 30 : 30]) {\n        translate([x, depth/2, height/2])\n            rotate([90, 0, 0])\n            cylinder(h = depth + 1, r = hole_r, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    back_plate();\n    \n    // Rotate top molding to run along length\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n        top_molding();\n    \n    // Dentil decorative row\n    dentil_row();\n    \n    // Optional mounting holes\n    // screw_holes();\n}",
    "renders": true
  },
  {
    "furniture": "cornice",
    "openscad_code": "// Cornice for furniture top - realistic style, medium complexity\n// Overall dimensions: 120mm wide x 80mm deep x 35mm high\n\n// Main crown profile\nmodule crown_profile() {\n    // Base profile - stepped layers\n    union() {\n        // Bottom layer - 2mm thick\n        translate([0, 0, 0])\n            cube([116, 76, 2], center=true);\n        \n        // Second layer - 2mm thick with overhang\n        translate([0, 0, 2])\n            cube([112, 72, 2], center=true);\n        \n        // Third layer - 2mm thick with overhang\n        translate([0, 0, 4])\n            cube([108, 68, 2], center=true);\n    }\n}\n\n// Decorative molding with repeating pattern\nmodule molding_pattern() {\n    // Create repeating dentil blocks\n    for(i = [-55:10:55]) {\n        translate([i, -37, 6])\n            cube([8, 4, 4], center=true);\n    }\n    \n    for(i = [-55:10:55]) {\n        translate([i, 37, 6])\n            cube([8, 4, 4], center=true);\n    }\n}\n\n// Curved top section\nmodule curved_top() {\n    // Main curved section\n    hull() {\n        translate([-58, -38, 10])\n            cylinder(h=8, r=2, center=true);\n        translate([58, -38, 10])\n            cylinder(h=8, r=2, center=true);\n        translate([-58, 38, 10])\n            cylinder(h=8, r=2, center=true);\n        translate([58, 38, 10])\n            cylinder(h=8, r=2, center=true);\n    }\n    \n    // Add top cap\n    translate([0, 0, 18])\n        cube([120, 80, 2], center=true);\n}\n\n// Side brackets for structural support\nmodule side_brackets() {\n    // Left bracket\n    translate([-59, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=3, center=true);\n    \n    // Right bracket\n    translate([59, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=3, center=true);\n    \n    // Front bracket supports\n    translate([0, -39, 5])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, center=true);\n    \n    // Rear bracket supports\n    translate([0, 39, 5])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, center=true);\n}\n\n// Main cornice assembly\nmodule cornice() {\n    union() {\n        // Base crown profile\n        crown_profile();\n        \n        // Decorative molding\n        molding_pattern();\n        \n        // Curved top section\n        curved_top();\n        \n        // Structural brackets\n        side_brackets();\n        \n        // Add small decorative spheres at corners\n        translate([-58, -38, 25])\n            sphere(r=2);\n        translate([58, -38, 25])\n            sphere(r=2);\n        translate([-58, 38, 25])\n            sphere(r=2);\n        translate([58, 38, 25])\n            sphere(r=2);\n        \n        // Center decorative element\n        translate([0, 0, 20])\n            cylinder(h=4, r=5, center=true);\n    }\n}\n\n// Generate the cornice\ncornice();",
    "renders": true
  },
  {
    "furniture": "pelmet",
    "openscad_code": "// Pelmet for window treatment\n// Overall external dimensions: 120 mm (W) x 15 mm (D) x 35 mm (H)\n// Wall thickness: 2 mm for 3D-printability\n\n// Main body module\nmodule pelmet_body() {\n    // Outer shell\n    difference() {\n        translate([0, 0, 17.5]) cube([120, 15, 35], center = true);      // full block\n        translate([0, 1, 17.5]) cube([116, 11, 31], center = true);      // hollow inside\n    }\n}\n\n// Decorative front lip / crown profile\nmodule crown_profile() {\n    for (i = [0:1]) {\n        translate([0, i == 0 ? 7.5 : -7.5, 0])\n        rotate([i == 0 ? 0 : 180, 0, 0])\n        linear_extrude(height = 120, center = true, convexity = 10)\n        polygon(points = [\n            [-60,  0],\n            [ 60,  0],\n            [ 60,  5],\n            [ 56,  5],\n            [ 56,  3],\n            [-56,  3],\n            [-56,  5],\n            [-60,  5]\n        ]);\n    }\n}\n\n// Mounting rail on back for curtain-track or blind-head fit\nmodule mounting_rail() {\n    // 2 mm thick rail, 5 mm deep, running full width\n    translate([0, -7.5, 17.5]) cube([116, 5, 6], center = true);\n}\n\n// Screw-keyhole slots for wall attachment\nmodule keyhole_slots() {\n    slot_length = 8;\n    slot_width  = 3.5;\n    slot_depth  = 2;\n    for (x = [-45, 0, 45]) {\n        translate([x, 0, 34])\n        rotate([90, 0, 0])\n        difference() {\n            // slot body\n            cube([slot_length, slot_width, slot_depth], center = true);\n            // countersink cone\n            translate([slot_length/2 - 1, 0, -slot_depth/2])\n            cylinder(h = slot_depth + 0.2, r1 = 2, r2 = 0, center = false, $fn = 16);\n        }\n    }\n}\n\n// Decorative dentil blocks under the lip\nmodule dentil_blocks() {\n    block_w = 6;\n    block_h = 4;\n    block_d = 2;\n    gap = 2;\n    // Compute how many fit\n    n = floor(120 / (block_w + gap));\n    offset = -(n * (block_w + gap) - gap) / 2;\n    for (i = [0:n-1]) {\n        translate([offset + i * (block_w + gap), 6.5, 34 - block_h/2])\n        cube([block_w, block_d, block_h], center = true);\n    }\n}\n\n// Assemble the pelmet\nunion() {\n    pelmet_body();\n    crown_profile();\n    mounting_rail();\n    keyhole_slots();\n    dentil_blocks();\n}",
    "renders": true
  },
  {
    "furniture": "valance",
    "openscad_code": "// Valance for a small cabinet or shelf\n// Overall dimensions: 120mm wide x 60mm tall x 20mm deep\n// Designed for 3D printing with 2mm wall thickness\n\n// Main parameters\nwidth = 120;\nheight = 60;\ndepth = 20;\nwall = 2;\n\n// Create main valance structure\nmodule valance_main() {\n    difference() {\n        // Outer shell\n        translate([-width/2, 0, 0])\n            cube([width, depth, height]);\n        \n        // Hollow interior\n        translate([-width/2 + wall, wall, wall])\n            cube([width - 2*wall, depth - wall, height - wall]);\n    }\n}\n\n// Top molding profile\nmodule top_molding() {\n    for (x = [-width/2 + 5 : 10 : width/2 - 15]) {\n        translate([x, 0, height - 6])\n            cube([8, depth, 6]);\n    }\n    \n    // Center decorative piece\n    translate([0, 0, height - 8])\n        cube([12, depth, 8]);\n}\n\n// Bottom scalloped edge\nmodule scalloped_edge() {\n    scallop_height = 8;\n    \n    for (x = [-width/2 + 10 : 20 : width/2 - 20]) {\n        translate([x, 0, 0])\n            difference() {\n                cube([16, depth, scallop_height]);\n                translate([8, -1, scallop_height])\n                    cylinder(h = depth + 2, r = 8, $fn = 32);\n            }\n    }\n}\n\n// Side brackets for mounting\nmodule mounting_brackets() {\n    bracket_width = 8;\n    bracket_height = 15;\n    \n    // Left bracket\n    translate([-width/2 - bracket_width/2, 0, height/2 - bracket_height/2])\n        cube([bracket_width, depth, bracket_height]);\n    \n    // Right bracket\n    translate([width/2 - bracket_width/2, 0, height/2 - bracket_height/2])\n        cube([bracket_width, depth, bracket_height]);\n    \n    // Screw holes\n    translate([-width/2 - bracket_width/2, depth/2, height/2])\n        rotate([90, 0, 0])\n            cylinder(h = bracket_width + 1, r = 1.5, $fn = 16);\n    \n    translate([width/2 - bracket_width/2, depth/2, height/2])\n        rotate([90, 0, 0])\n            cylinder(h = bracket_width + 1, r = 1.5, $fn = 16);\n}\n\n// Center panel detail\nmodule center_panel() {\n    panel_width = 30;\n    panel_height = 35;\n    \n    translate([0, 0, wall])\n        difference() {\n            // Raised panel\n            cube([panel_width, wall + 1, panel_height]);\n            \n            // Recessed center\n            translate([wall, 0, wall])\n                cube([panel_width - 2*wall, wall + 2, panel_height - 2*wall]);\n        }\n}\n\n// Vertical fluting details\nmodule fluting() {\n    flute_width = 3;\n    flute_depth = 1;\n    \n    for (x = [-width/2 + 15 : 12 : width/2 - 20]) {\n        if (abs(x) > 25) {\n            translate([x, 0, 10])\n                cube([flute_width, flute_depth, height - 20]);\n        }\n    }\n}\n\n// Assemble the valance\nunion() {\n    valance_main();\n    top_molding();\n    scalloped_edge();\n    mounting_brackets();\n    center_panel();\n    fluting();\n}",
    "renders": true
  },
  {
    "furniture": "bedskirt",
    "openscad_code": "// Bedskirt - Medium Complexity Realistic Style\n// 3D Printable, 80 x 60 x 25 mm overall\n\n// Parameters\nskirt_height = 22;\nskirt_thickness = 2;\nbed_length = 80;\nbed_width = 60;\npleat_width = 8;\npleat_depth = 3;\nleg_height = 5;\nleg_thickness = 4;\n\nmodule bedskirt() {\n    // Main skirt body - hollow box\n    difference() {\n        // Outer box\n        cube([bed_width, bed_length, skirt_height], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([bed_width - skirt_thickness*2, \n                  bed_length - skirt_thickness*2, \n                  skirt_height + 2], center=true);\n    }\n    \n    // Pleated front panel\n    for (x = [-bed_width/2 + pleat_width/2 : pleat_width : bed_width/2 - pleat_width/2]) {\n        translate([x, bed_length/2 - skirt_thickness/2, 0])\n            cube([pleat_width - 1, skirt_thickness, skirt_height], center=true);\n        \n        // Pleat indentations\n        translate([x, bed_length/2 + pleat_depth/2, skirt_height/2])\n            cube([pleat_width - 1, pleat_depth, skirt_height], center=true);\n    }\n    \n    // Pleated back panel\n    for (x = [-bed_width/2 + pleat_width/2 : pleat_width : bed_width/2 - pleat_width/2]) {\n        translate([x, -bed_length/2 + skirt_thickness/2, 0])\n            cube([pleat_width - 1, skirt_thickness, skirt_height], center=true);\n        \n        translate([x, -bed_length/2 - pleat_depth/2, skirt_height/2])\n            cube([pleat_width - 1, pleat_depth, skirt_height], center=true);\n    }\n    \n    // Pleated left panel\n    for (y = [-bed_length/2 + pleat_width/2 : pleat_width : bed_length/2 - pleat_width/2]) {\n        translate([-bed_width/2 + skirt_thickness/2, y, 0])\n            cube([skirt_thickness, pleat_width - 1, skirt_height], center=true);\n        \n        translate([-bed_width/2 - pleat_depth/2, y, skirt_height/2])\n            cube([pleat_depth, pleat_width - 1, skirt_height], center=true);\n    }\n    \n    // Pleated right panel\n    for (y = [-bed_length/2 + pleat_width/2 : pleat_width : bed_length/2 - pleat_width/2]) {\n        translate([bed_width/2 - skirt_thickness/2, y, 0])\n            cube([skirt_thickness, pleat_width - 1, skirt_height], center=true);\n        \n        translate([bed_width/2 + pleat_depth/2, y, skirt_height/2])\n            cube([pleat_depth, pleat_width - 1, skirt_height], center=true);\n    }\n    \n    // Support legs at corners\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, -skirt_height/2 - leg_height/2])\n            cube([leg_thickness, leg_thickness, leg_height], center=true);\n    }\n    \n    leg(-bed_width/2 + leg_thickness/2, -bed_length/2 + leg_thickness/2);\n    leg(bed_width/2 - leg_thickness/2, -bed_length/2 + leg_thickness/2);\n    leg(-bed_width/2 + leg_thickness/2, bed_length/2 - leg_thickness/2);\n    leg(bed_width/2 - leg_thickness/2, bed_length/2 - leg_thickness/2);\n    \n    // Top rim/frame\n    translate([0, 0, skirt_height/2 - skirt_thickness/2])\n        cube([bed_width, bed_length, skirt_thickness], center=true);\n}\n\n// Render the model\nbedskirt();",
    "renders": true
  },
  {
    "furniture": "dust",
    "openscad_code": "// Ottoman-style storage ottoman with tufted cushion top\n// Dimensions: 300mm x 300mm x 400mm (L x W x H)\n// Wall thickness: 2mm throughout for 3D printing\n\nmodule leg() {\n    // Tapered square leg with rounded bottom\n    difference() {\n        // Main leg body - tapered\n        hull() {\n            translate([0, 0, 0]) cube([30, 30, 2], center=true);\n            translate([0, 0, 100]) cube([25, 25, 2], center=true);\n        }\n        // Rounded bottom\n        translate([0, 0, -2]) cube([32, 32, 4], center=true);\n        cylinder(h=5, r1=16, r2=16, center=true);\n    }\n}\n\nmodule tufted_button() {\n    // Decorative tufted button for cushion\n    difference() {\n        cylinder(h=8, r1=12, r2=8, center=false);\n        translate([0, 0, 6]) sphere(d=14);\n    }\n}\n\nmodule storage_box() {\n    // Main storage compartment\n    difference() {\n        // Outer box\n        cube([300, 300, 250], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 5]) cube([296, 296, 246], center=true);\n        \n        // Leg mounting holes (recessed)\n        for(x = [-125, 125])\n            for(y = [-125, 125])\n                translate([x, y, -125]) cube([32, 32, 10], center=true);\n    }\n}\n\nmodule cushion() {\n    // Padded cushion top with tufted buttons\n    difference() {\n        // Main cushion body\n        translate([0, 0, 135]) cube([290, 290, 50], center=true);\n        \n        // Rounded top edge\n        translate([0, 0, 160]) cube([286, 286, 10], center=true);\n        \n        // Tufting indentations\n        for(x = [-90, 0, 90])\n            for(y = [-90, 0, 90])\n                translate([x, y, 135]) cylinder(h=20, r1=15, r2=18, center=true);\n    }\n    \n    // Tufted buttons\n    for(x = [-90, 0, 90])\n        for(y = [-90, 0, 90])\n            translate([x, y, 162]) tufted_button();\n}\n\n// Base assembly\nunion() {\n    // Storage box\n    storage_box();\n    \n    // Legs\n    for(x = [-125, 125])\n        for(y = [-125, 125])\n            translate([x, y, 0]) leg();\n    \n    // Cushion top\n    cushion();\n    \n    // Hinge detail\n    translate([0, 148, 125]) rotate([90, 0, 0]) \n        cylinder(h=280, r=3, center=true);\n    \n    // Support ribs inside\n    for(i = [-100, 0, 100]) {\n        translate([i, 0, 125]) cube([2, 296, 20], center=true);\n        translate([0, i, 125]) cube([296, 2, 20], center=true);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "bedding",
    "openscad_code": "// Realistic-style 3D-printable single bed (medium complexity)\n// External footprint ≈ 120 mm × 80 mm × 65 mm\n\n$fn = 30;          // Smooth curves for printing\nwall = 2;          // 3D-printable wall thickness\n\n// Main module\nmodule single_bed(scale = 1) {\n    scale([scale, scale, scale]) {\n        // Bed frame\n        frame();\n        \n        // Mattress\n        translate([0, 0, 30]) mattress();\n        \n        // Pillows\n        translate([-35, 0, 35]) pillow();\n        translate([-15, 0, 35]) pillow();\n        \n        // Blanket\n        translate([20, 0, 35]) blanket();\n    }\n}\n\n// ---------------- Bed frame ----------------\nmodule frame() {\n    // Headboard\n    translate([-58, 0, 0]) {\n        difference() {\n            cube([8, 78, 50]);                    // Solid headboard\n            translate([wall, wall, wall])\n                cube([8 - 2*wall, 78 - 2*wall, 50 - 2*wall]); // Hollow\n        }\n    }\n    \n    // Footboard\n    translate([58, 0, 0]) mirror([1, 1, 1]) {\n        difference() {\n            cube([8, 78, 30]);                    // Shorter footboard\n            translate([wall, wall, wall])\n                cube([8 - 2*wall, 78 - 2*wall, 30 - 2*wall]);\n        }\n    }\n    \n    // Side rails\n    for (y = [-38, 38]) {\n        translate([0, y, 15]) rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 116, r = 4);         // Outer rail\n                cylinder(h = 116, r = 4 - wall);  // Inner hollow\n            }\n        }\n    }\n    \n    // Slats (repetitive)\n    for (x = [-45 : 15 : 45]) {\n        translate([x, 0, 8]) {\n            cube([10, 72, wall]);\n        }\n    }\n    \n    // Legs\n    for (x = [-50, 50])\n    for (y = [-35, 35]) {\n        translate([x, y, 0]) {\n            difference() {\n                cylinder(h = 30, r = 5);          // Leg\n                translate([0, 0, wall])\n                    cylinder(h = 30 - wall, r = 5 - wall);\n            }\n        }\n    }\n}\n\n// ---------------- Mattress ----------------\nmodule mattress() {\n    difference() {\n        cube([120, 80, 12]);                      // Overall mattress\n        translate([wall, wall, wall])\n            cube([120 - 2*wall, 80 - 2*wall, 12 - wall]);\n    }\n}\n\n// ---------------- Pillow ----------------\nmodule pillow() {\n    difference() {\n        scale([1, 0.7, 0.4]) sphere(r = 20);      // Soft pillow shape\n        scale([1, 0.7, 0.4]) translate([0, 0, wall])\n            sphere(r = 20 - wall);\n    }\n}\n\n// ---------------- Blanket ----------------\nmodule blanket() {\n    translate([20, 0, 0]) {\n        difference() {\n            cube([60, 70, 2]);                    // Folded blanket\n            translate([wall, wall, wall])\n                cube([60 - 2*wall, 70 - 2*wall, wall]);\n        }\n    }\n}\n\n// Render bed at 100% scale\nsingle_bed(1);",
    "renders": true
  },
  {
    "furniture": "bolster",
    "openscad_code": "// OpenSCAD Bolster Furniture Item\n// Realistic style, medium complexity\n// Dimensions: ~120mm length x ~50mm height x ~50mm depth\n\n// Overall dimensions\nlength = 120;\nheight = 50;\ndepth = 50;\nwall_thickness = 2;\n\n// Create the main bolster body with realistic proportions\nmodule bolster_body() {\n    // Main cylindrical body with rounded ends\n    hull() {\n        // Left rounded end\n        translate([wall_thickness, 0, height/2])\n            sphere(d = height - wall_thickness);\n        \n        // Right rounded end  \n        translate([length - wall_thickness, 0, height/2])\n            sphere(d = height - wall_thickness);\n    }\n    \n    // Add flat bottom for stability\n    difference() {\n        cube([length, depth, height]);\n        \n        // Remove interior for hollow print\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([length - 2*wall_thickness, depth - 2*wall_thickness, height - wall_thickness]);\n            \n        // Chamfer bottom edges slightly\n        translate([-1, -1, -1])\n            cube([length + 2, depth + 2, 5]);\n    }\n}\n\n// Create tufted button details on top surface\nmodule tufted_buttons() {\n    button_radius = 3;\n    button_depth = 1.5;\n    button_spacing = 20;\n    \n    for(i = [1:3]) {\n        translate([i * button_spacing, depth/2, height - button_depth])\n            cylinder(h = button_depth * 2, r = button_radius, $fn = 16);\n    }\n}\n\n// Create seam lines along the edges\nmodule seam_lines() {\n    seam_width = 1;\n    seam_depth = 0.5;\n    \n    // Top seam along length\n    translate([0, depth/2 - seam_width/2, height - seam_depth])\n        cube([length, seam_width, seam_depth]);\n    \n    // Side seams\n    for(side = [0, 1]) {\n        translate([length/2 - seam_width/2, side ? depth - seam_width : 0, height/2])\n            cube([seam_width, seam_width, height]);\n    }\n}\n\n// Create zipper detail on back\nmodule zipper_detail() {\n    zipper_width = 2;\n    zipper_depth = 1;\n    teeth_spacing = 3;\n    \n    // Main zipper strip\n    translate([length/2, depth - zipper_depth, height/2])\n        cube([length/2, zipper_depth, height]);\n    \n    // Zipper teeth\n    for(i = [0:teeth_spacing:length/2]) {\n        translate([length/2 + i, depth - zipper_depth, height/2])\n            cube([1, zipper_depth, height/2]);\n    }\n}\n\n// Create piping around edges\nmodule piping_edges() {\n    piping_radius = 1.5;\n    \n    // Piping along top edges\n    translate([0, 0, height])\n        cylinder(h = length, r = piping_radius, $fn = 8);\n    \n    translate([length, 0, height])\n        rotate([90, 0, 0])\n            cylinder(h = depth, r = piping_radius, $fn = 8);\n}\n\n// Main assembly\nunion() {\n    // Base bolster structure\n    bolster_body();\n    \n    // Surface details\n    translate([20, 0, 0])\n        tufted_buttons();\n    \n    seam_lines();\n    \n    zipper_detail();\n    \n    // Piping is merged with body due to printing constraints\n    // In a real design this would be separate\n}",
    "renders": true
  },
  {
    "furniture": "sham",
    "openscad_code": "// Sham-style armchair with realistic proportions and medium complexity\n// Overall dimensions: 120mm wide x 110mm deep x 100mm tall\n\n// Parameters\nseat_height = 40;\nseat_width = 80;\nseat_depth = 75;\nbackrest_height = 60;\narmrest_height = 65;\nleg_height = 35;\nwall_thickness = 2;\n\n// Main seat frame\nmodule seat_frame() {\n    difference() {\n        // Outer box\n        translate([0, 0, seat_height/2])\n            cube([seat_width, seat_depth, seat_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, seat_height/2])\n            cube([seat_width-wall_thickness*2, seat_depth-wall_thickness*2, seat_height-wall_thickness], center=true);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    difference() {\n        // Main backrest panel\n        translate([0, -seat_depth/2+wall_thickness, seat_height+backrest_height/2])\n            cube([seat_width, wall_thickness*2, backrest_height], center=true);\n        \n        // Decorative cutouts\n        for(i = [-1, 0, 1]) {\n            translate([i*20, -seat_depth/2, seat_height+backrest_height/2])\n                cube([8, wall_thickness*2+1, backrest_height-20], center=true);\n        }\n    }\n}\n\n// Armrests\nmodule armrest(side) {\n    translate([side*(seat_width/2+wall_thickness*2), 0, armrest_height/2+seat_height/2]) {\n        difference() {\n            // Armrest support post\n            cube([wall_thickness*4, wall_thickness*4, armrest_height], center=true);\n            \n            // Rounded top using sphere\n            translate([0, 0, armrest_height/2])\n                sphere(r=wall_thickness*2.5, $fn=20);\n        }\n    }\n}\n\n// Legs with stretchers\nmodule legs() {\n    // Front legs\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(seat_width/2-wall_thickness*2), y*(seat_depth/2-wall_thickness*2), leg_height/2]) {\n                difference() {\n                    // Leg post\n                    cylinder(h=leg_height, r=wall_thickness*1.5, $fn=8);\n                    \n                    // Tapered bottom\n                    translate([0, 0, leg_height/2])\n                        cylinder(h=wall_thickness*2, r1=wall_thickness*1.5, r2=wall_thickness, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Side stretchers\n    for(side = [-1, 1]) {\n        translate([side*(seat_width/2-wall_thickness*2), 0, leg_height/3])\n            cube([wall_thickness*1.5, seat_depth-wall_thickness*4, wall_thickness*1.5], center=true);\n    }\n    \n    // Back stretcher\n    translate([0, -seat_depth/2+wall_thickness*4, leg_height/3])\n        cube([seat_width-wall_thickness*4, wall_thickness*1.5, wall_thickness*1.5], center=true);\n}\n\n// Cushions\nmodule cushions() {\n    // Seat cushion\n    translate([0, 0, seat_height+wall_thickness])\n        cube([seat_width-wall_thickness*4, seat_depth-wall_thickness*4, wall_thickness*3], center=true);\n    \n    // Back cushion\n    translate([0, -seat_depth/2+wall_thickness*3, seat_height+wall_thickness*2+backrest_height/2])\n        cube([seat_width-wall_thickness*4, wall_thickness*3, backrest_height-wall_thickness*4], center=true);\n}\n\n// Assembly\nunion() {\n    seat_frame();\n    backrest();\n    armrest(1);\n    armrest(-1);\n    legs();\n    cushions();\n}",
    "renders": true
  },
  {
    "furniture": "throw",
    "openscad_code": "// Realistic medium-complexity throw (small decorative blanket) draped over a chair back\n// Overall printable size ~120 mm tall, 80 mm wide, 90 mm deep\n\n$fn = 24;          // Facet resolution\n\n// Chair frame module\nmodule chair_frame() {\n    // Rear legs\n    translate([-35, 0, 0]) cylinder(h = 100, r = 4);\n    translate([ 35, 0, 0]) cylinder(h = 100, r = 4);\n    // Front legs\n    translate([-35, 70, 0]) cylinder(h = 60, r = 4);\n    translate([ 35, 70, 0]) cylinder(h = 60, r = 4);\n\n    // Backrest top rail\n    translate([0, 0, 98]) cube([78, 6, 6], center = true);\n    // Seat rails\n    translate([0, 35, 55]) cube([78, 6, 6], center = true);\n    translate([-35, 35, 27.5]) cube([6, 70, 6], center = true);\n    translate([ 35, 35, 27.5]) cube([6, 70, 6], center = true);\n}\n\n// Chair seat module\nmodule chair_seat() {\n    translate([0, 35, 58]) cube([72, 70, 6], center = true);\n}\n\n// Throw blanket draped over backrest\nmodule throw_blanket() {\n    color(\"SteelBlue\")\n    difference() {\n        // Main body\n        translate([0, 20, 95])\n        rotate([80, 0, 0])\n        cube([80, 100, 2]);\n\n        // Folded edge along top\n        translate([0, 0, 101])\n        rotate([90, 0, 0])\n        cube([78, 20, 10], center = true);\n\n        // Drape down front\n        translate([0, 50, 70])\n        rotate([80, 0, 0])\n        cube([78, 40, 30]);\n    }\n\n    // Fringe tassels along bottom edge\n    for (x = [-35 : 7 : 35]) {\n        translate([x, 20, 5]) cylinder(h = 12, r = 0.8);\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    chair_seat();\n    throw_blanket();\n}",
    "renders": true
  },
  {
    "furniture": "cover",
    "openscad_code": "// Dining-chair slip-over cover\n// Fits a typical dining chair with backrest and legs\n// Overall size: 110 mm (H) x 55 mm (W) x 55 mm (D)\n\n$fa = 2;\n$fs = 1;\n\nmodule leg_hole(h = 50, r = 5) {\n    // Cylindrical cut-out for chair leg\n    cylinder(h = h, r = r, center = false);\n}\n\nmodule backrest_pocket(w = 50, h = 60, d = 15) {\n    // Pocket that slips over the chair back\n    difference() {\n        // Outer shell\n        translate([-w/2, 0, 0])\n            cube([w, d, h]);\n        // Inner void\n        translate([-w/2 + 2, -1, 2])\n            cube([w - 4, d + 2, h - 4]);\n    }\n}\n\nmodule seat_cover(w = 50, d = 50, thick = 2) {\n    // Top seat portion with rounded corners\n    difference() {\n        hull() {\n            translate([-w/2 + 5, -d/2 + 5, 0])\n                cylinder(h = thick, r = 5, center = false);\n            translate([w/2 - 5, -d/2 + 5, 0])\n                cylinder(h = thick, r = 5, center = false);\n            translate([-w/2 + 5, d/2 - 5, 0])\n                cylinder(h = thick, r = 5, center = false);\n            translate([w/2 - 5, d/2 - 5, 0])\n                cylinder(h = thick, r = 5, center = false);\n        }\n        // Central hole for seat recess\n        translate([-w/2 + 7, -d/2 + 7, -1])\n            cube([w - 14, d - 14, thick + 2]);\n    }\n}\n\nmodule skirt(w = 50, d = 50, h = 20, thick = 2) {\n    // Hanging skirt around seat\n    hull() {\n        // Front skirt\n        translate([-w/2 - thick, -thick, 0])\n            cube([w + 2*thick, thick, h]);\n        // Left skirt\n        translate([-w/2 - thick, 0, 0])\n            cube([thick, d, h]);\n        // Right skirt\n        translate([w/2, 0, 0])\n            cube([thick, d, h]);\n        // Back skirt\n        translate([-w/2 - thick, d, 0])\n            cube([w + 2*thick, thick, h]);\n    }\n}\n\nmodule pleat(n = 4, w = 50) {\n    // Add small pleats along skirt front\n    for (i = [0 : n-1]) {\n        translate([-w/2 + (i+0.5)*(w/n), -2, 10])\n            cube([1, 4, 8]);\n    }\n}\n\nmodule chair_cover() {\n    // Assembly of the entire cover\n    union() {\n        // Backrest pocket\n        backrest_pocket(w = 50, h = 60, d = 15);\n        \n        // Seat cover (sits on top)\n        translate([0, 7.5, 0])\n            seat_cover(w = 50, d = 50, thick = 2);\n        \n        // Skirt hanging below seat\n        translate([0, 7.5, -20])\n            skirt(w = 50, d = 50, h = 20, thick = 2);\n        \n        // Pleated decoration\n        translate([0, 7.5 - 2, -20])\n            pleat(n = 4, w = 50);\n    }\n    \n    // Leg holes\n    difference() {\n        children();\n        // Front left\n        translate([-20, 20, -20])\n            leg_hole(h = 50, r = 5);\n        // Front right\n        translate([20, 20, -20])\n            leg_hole(h = 50, r = 5);\n        // Back left\n        translate([-20, -20, -20])\n            leg_hole(h = 50, r = 5);\n        // Back right\n        translate([20, -20, -20])\n            leg_hole(h = 50, r = 5);\n    }\n}\n\n// Render the cover\nchair_cover();",
    "renders": true
  },
  {
    "furniture": "rug",
    "openscad_code": "// Realistic 3D-printable rug with tassels and woven texture\n// Overall dimensions: 100 mm x 60 mm x 3 mm (thin printable rug)\n\n$fn = 32;\n\n// Main rug body with raised weave pattern\nmodule rug_body() {\n    difference() {\n        // Base flat rectangle 2 mm thick\n        cube([100, 60, 2], center = true);\n        \n        // Weave grooves along length (warp threads)\n        for (x = [-45:5:45]) {\n            translate([x, 0, 1])\n                cube([2.5, 62, 1.1], center = true);\n        }\n        \n        // Weave grooves along width (weft threads)\n        for (y = [-25:5:25]) {\n            translate([0, y, 1])\n                cube([102, 2.5, 1.1], center = true);\n        }\n    }\n    \n    // Raised weave bumps for texture\n    for (x = [-45:5:45]) {\n        for (y = [-25:5:25]) {\n            translate([x, y, 1.2])\n                scale([1, 1, 0.4])\n                sphere(d = 2.5);\n        }\n    }\n}\n\n// Tassel at corner\nmodule tassel(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        // Tassel base\n        cylinder(h = 2, d = 4, center = true);\n        \n        // Individual tassel threads\n        for (angle = [0:30:330]) {\n            rotate([0, 0, angle])\n            translate([2, 0, -3])\n                cylinder(h = 6, d = 0.8);\n        }\n    }\n}\n\n// Anti-slip backing ridges\nmodule backing_ridges() {\n    translate([0, 0, -1.5])\n    for (y = [-25:3:25]) {\n        translate([0, y, 0])\n            cube([100, 1, 1], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Rug body\n    rug_body();\n    \n    // Four corner tassels\n    tassel(48, 28);\n    tassel(-48, 28);\n    tassel(48, -28);\n    tassel(-48, -28);\n    \n    // Anti-slip backing\n    backing_ridges();\n}",
    "renders": true
  },
  {
    "furniture": "carpet",
    "openscad_code": "// Realistic 3D Printable Carpet Model\n// Medium complexity with fringe details and low-relief pattern\n\nmodule carpet_body() {\n    // Main carpet body – 2 mm thick so it prints as a single solid layer\n    difference() {\n        translate([0, 0, 1])\n            cube([120, 80, 2], center = true);\n        \n        // Light low-relief pattern (0.4 mm deep) for realism\n        for (y = [-30:10:30])\n        for (x = [-50:10:50])\n            translate([x, y, 1.2])\n                cube([6, 6, 0.4], center = true);\n    }\n}\n\nmodule fringe_strand(length, angle) {\n    // Single strand of fringe – printable without supports\n    rotate([0, 0, angle])\n        translate([0, -length/2, -1])\n            cube([1.5, length, 1.5], center = true);\n}\n\nmodule fringe_group(count, length) {\n    // Group of strands along one edge\n    for (i = [0:count-1])\n        translate([(-60 + 2) + i*(116/(count-1)), 40, 1])\n            fringe_strand(length, 0);\n}\n\nmodule fringe() {\n    // Fringe on all four sides\n    fringe_group(30, 8);                 // front\n    mirror([0,1,0]) fringe_group(30, 8); // back\n    \n    // Rotate fringe for left/right sides\n    for (side = [-1, 1]) {\n        translate([side*60, 0, 1])\n            rotate([0,0,90])\n                fringe_group(20, 6);\n    }\n}\n\n// Assemble the carpet with body and fringe\nunion() {\n    carpet_body();\n    fringe();\n}",
    "renders": true
  },
  {
    "furniture": "mat",
    "openscad_code": "// Bath-mat with raised grid pattern and rubber feet\n// Overall footprint: 90 x 60 mm, 6 mm thick\n\nmodule rubber_foot(diam, h) {\n    // Simple cylindrical foot with rounded edge\n    union() {\n        cylinder(d = diam, h = h, $fn = 20);\n        translate([0, 0, h])\n            cylinder(d1 = diam, d2 = 0.8 * diam, h = 1, $fn = 20);\n    }\n}\n\nmodule drainage_grid() {\n    // Raised rectangular bars forming a lattice\n    bar_w = 3;      // width of each bar\n    gap   = 6;      // gap between bars\n    h     = 2;      // height above mat surface\n    \n    // X-direction bars\n    for (x = [-40 : bar_w + gap : 40]) {\n        translate([x, 0, 0])\n            cube([bar_w, 60, h], center = true);\n    }\n    \n    // Y-direction bars\n    for (y = [-25 : bar_w + gap : 25]) {\n        translate([0, y, 0])\n            cube([90, bar_w, h], center = true);\n    }\n}\n\nmodule border_trim() {\n    // Raised edge around mat perimeter for stiffness\n    thickness = 3;\n    height    = 2;\n    \n    // Front edge\n    translate([0, 29.5, height / 2])\n        cube([90 + 2 * thickness, thickness, height], center = true);\n    \n    // Back edge\n    translate([0, -29.5, height / 2])\n        cube([90 + 2 * thickness, thickness, height], center = true);\n    \n    // Left edge\n    translate([-44.5, 0, height / 2])\n        cube([thickness, 60, height], center = true);\n    \n    // Right edge\n    translate([44.5, 0, height / 2])\n        cube([thickness, 60, height], center = true);\n}\n\ndifference() {\n    // Main mat body\n    difference() {\n        // Base slab\n        translate([0, 0, 3])\n            cube([90, 60, 6], center = true);\n        \n        // Drainage holes (simple cylinders)\n        for (x = [-35 : 10 : 35])\n            for (y = [-20 : 10 : 20])\n                translate([x, y, 0])\n                    cylinder(d = 5, h = 7, center = true, $fn = 12);\n    }\n    \n    // Add raised grid pattern on top\n    translate([0, 0, 3])\n        drainage_grid();\n    \n    // Add border trim\n    border_trim();\n    \n    // Add four rubber feet on bottom\n    foot_d = 8;\n    foot_h = 3;\n    translate([-38, -23, -3])\n        rotate([180, 0, 0])\n            rubber_foot(foot_d, foot_h);\n    translate([38, -23, -3])\n        rotate([180, 0, 0])\n            rubber_foot(foot_d, foot_h);\n    translate([-38, 23, -3])\n        rotate([180, 0, 0])\n            rubber_foot(foot_d, foot_h);\n    translate([38, 23, -3])\n        rotate([180, 0, 0])\n            rubber_foot(foot_d, foot_h);\n}",
    "renders": true
  },
  {
    "furniture": "runner",
    "openscad_code": "// Runner - Entryway / Console Table (realistic style, medium complexity)\n// Overall size: 90 mm (L) x 30 mm (D) x 75 mm (H)\n\n// Parameters\ntable_l = 90;\ntable_d = 30;\ntable_h = 75;\nleg_size = 5;\ntop_t = 4;\napron_h = 4;\ndrawer_h = 15;\nback_panel_t = 2;\nwall_thick = 2;\n\nmodule leg() {\n    difference() {\n        // Main leg post\n        cube([leg_size, leg_size, table_h - top_t], center = false);\n        // Chamfers for printability and style\n        translate([leg_size, leg_size, table_h - top_t - 0.1])\n            rotate([0, 0, 45])\n            cube([sqrt(2)*leg_size, sqrt(2)*leg_size, 2], center = false);\n    }\n}\n\nmodule drawer() {\n    difference() {\n        // Drawer box\n        cube([table_l/2 - 2*leg_size - 2*wall_thick, table_d - 2*leg_size - 2*wall_thick, drawer_h - 2]);\n        // Hollow inside\n        translate([wall_thick, wall_thick, wall_thick])\n            cube([table_l/2 - 2*leg_size - 4*wall_thick, table_d - 2*leg_size - 4*wall_thick, drawer_h - 2 - wall_thick]);\n        // Handle slot\n        translate([(table_l/2 - 2*leg_size - 2*wall_thick)/2 - 5, -1, drawer_h/2])\n            cube([10, 2, 5]);\n    }\n}\n\nmodule drawer_face() {\n    // Front panel\n    cube([table_l/2 - 2*leg_size - 2, table_d - 2*leg_size - 2, drawer_h]);\n    // Handle bar\n    translate([(table_l/2 - 2*leg_size - 2)/2 - 5, table_d - 2*leg_size - 2, drawer_h/2 - 2])\n        cube([10, 4, 4]);\n}\n\n// Table top\ntranslate([0, 0, table_h - top_t])\n    cube([table_l, table_d, top_t]);\n\n// Apron frame front/back\ntranslate([leg_size, leg_size, table_h - top_t - apron_h])\n    cube([table_l - 2*leg_size, wall_thick, apron_h]);\ntranslate([leg_size, table_d - leg_size - wall_thick, table_h - top_t - apron_h])\n    cube([table_l - 2*leg_size, wall_thick, apron_h]);\n\n// Apron frame sides\ntranslate([leg_size, leg_size + wall_thick, table_h - top_t - apron_h])\n    cube([wall_thick, table_d - 2*leg_size - 2*wall_thick, apron_h]);\ntranslate([table_l - leg_size - wall_thick, leg_size + wall_thick, table_h - top_t - apron_h])\n    cube([wall_thick, table_d - 2*leg_size - 2*wall_thick, apron_h]);\n\n// Back panel\ntranslate([leg_size + wall_thick, leg_size + wall_thick, table_h - top_t - apron_h - back_panel_t])\n    cube([table_l - 2*leg_size - 2*wall_thick, table_d - 2*leg_size - 2*wall_thick, back_panel_t]);\n\n// Legs\nfor (x = [leg_size/2, table_l - leg_size*1.5])\n    for (y = [leg_size/2, table_d - leg_size*1.5])\n        translate([x, y, 0])\n            leg();\n\n// Drawer\ntranslate([leg_size + wall_thick + 1, leg_size + wall_thick + 1, table_h - top_t - apron_h - drawer_h])\n    drawer();\n\ntranslate([leg_size + wall_thick + 1, leg_size + wall_thick + 1, table_h - top_t - apron_h - drawer_h - 1])\n    drawer_face();",
    "renders": true
  },
  {
    "furniture": "lamp",
    "openscad_code": "// Realistic Table Lamp\n// Overall height: ~120 mm\n// Designed for 3D printing, no supports needed\n\nmodule lamp_base() {\n    // Circular base plate\n    difference() {\n        cylinder(h=4, d=60, $fn=60);\n        // Cavity on bottom to reduce material\n        translate([0, 0, -0.1])\n            cylinder(h=3.5, d=56, $fn=60);\n    }\n}\n\nmodule lamp_pole() {\n    // Main support pole\n    difference() {\n        cylinder(h=80, d=12, $fn=32);\n        // Hollow core for wire routing\n        translate([0, 0, -0.1])\n            cylinder(h=80.2, d=8, $fn=32);\n    }\n}\n\nmodule lamp_joint() {\n    // Swivel joint between pole and arm\n    translate([0, 0, 80])\n    difference() {\n        union() {\n            // Ball joint socket\n            sphere(d=16, $fn=32);\n            // Connection ring\n            translate([0, 0, 6])\n                cylinder(h=6, d1=16, d2=12, $fn=32);\n        }\n        // Hollow center\n        sphere(d=12, $fn=32);\n    }\n}\n\nmodule lamp_arm() {\n    // Articulated arm\n    translate([0, 0, 92])\n    rotate([0, 15, 0])\n    union() {\n        // First arm segment\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=35, d=10, $fn=30);\n                translate([0, 0, -0.1])\n                    cylinder(h=35.2, d=6, $fn=30);\n            }\n        \n        // Second joint\n        translate([35, 0, 0])\n            rotate([0, -90, 0])\n            difference() {\n                sphere(d=12, $fn=32);\n                sphere(d=8, $fn=32);\n            }\n        \n        // Second arm segment\n        translate([35, 0, 0])\n            rotate([0, 15, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=30, d=8, $fn=30);\n                    translate([0, 0, -0.1])\n                        cylinder(h=30.2, d=4, $fn=30);\n                }\n    }\n}\n\nmodule lamp_shade_holder() {\n    // Wire mount and shade support\n    translate([65, 0, 92 + 35*sin(15) + 30*sin(15)])\n    rotate([0, 15+15, 0])\n    rotate([0, 90, 0])\n    union() {\n        // Mounting ring\n        cylinder(h=5, d1=8, d2=6, $fn=30);\n        \n        // Shade support arms\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, 0, 2.5])\n                    cube([20, 2, 2], center=true);\n        }\n    }\n}\n\nmodule lamp_shade() {\n    // Conical lampshade\n    translate([65, 0, 92 + 35*sin(15) + 30*sin(15) + 5])\n    rotate([0, 15+15, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer shade\n        cylinder(h1=40, h2=35, d1=60, d2=40, center=false, $fn=60);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h1=36, h2=31, d1=56, d2=36, center=false, $fn=60);\n        \n        // Top opening for bulb\n        translate([0, 0, 35])\n            cylinder(h=2, d=30, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    lamp_base();\n    lamp_pole();\n    lamp_joint();\n    lamp_arm();\n    lamp_shade_holder();\n    lamp_shade();\n}",
    "renders": true
  },
  {
    "furniture": "sconce",
    "openscad_code": "// Wall Sconce with Candle Holder - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm wide x 100mm tall x 60mm deep\n\n// Wall mounting plate\nmodule wall_plate() {\n    difference() {\n        // Main plate\n        translate([0, -2, 40]) cube([60, 4, 80], center=true);\n        \n        // Screw holes (2mm diameter, for M2 screws)\n        translate([-20, -4, 60]) cylinder(h=6, r=1.1, $fn=16);\n        translate([20, -4, 60]) cylinder(h=6, r=1.1, $fn=16);\n        translate([-20, -4, 20]) cylinder(h=6, r=1.1, $fn=16);\n        translate([20, -4, 20]) cylinder(h=6, r=1.1, $fn=16);\n    }\n}\n\n// Ornamental backplate with curved top\nmodule back_plate() {\n    difference() {\n        // Main curved shape\n        translate([0, 8, 40]) {\n            linear_extrude(height=4) {\n                difference() {\n                    // Outer shape with curved top\n                    union() {\n                        square([50, 60], center=true);\n                        translate([0, 30]) circle(r=25, $fn=32);\n                    }\n                    // Inner cutout\n                    offset(r=-3) {\n                        union() {\n                            square([44, 54], center=true);\n                            translate([0, 27]) circle(r=22, $fn=32);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Decorative holes pattern\n        for (y = [20:15:70]) {\n            translate([-15, y, 8]) cylinder(h=6, r=2, $fn=16);\n            translate([15, y, 8]) cylinder(h=6, r=2, $fn=16);\n        }\n    }\n}\n\n// Support arm with decorative curve\nmodule support_arm() {\n    // Main structural arm\n    difference() {\n        translate([0, 15, 75]) cube([8, 8, 20], center=true);\n        \n        // Lightening holes\n        translate([0, 15, 75]) cylinder(h=12, r=2.5, $fn=16);\n    }\n    \n    // Decorative curved bracket\n    translate([0, 12, 65]) rotate([0, 45, 0]) {\n        difference() {\n            cube([6, 4, 15], center=true);\n            translate([0, 0, -8]) cylinder(h=20, r=1.5, $fn=16);\n        }\n    }\n}\n\n// Candle holder cup\nmodule candle_holder() {\n    difference() {\n        // Main cup\n        cylinder(h=15, r1=12, r2=10, $fn=32);\n        \n        // Inner cavity for candle\n        translate([0, 0, 2]) cylinder(h=13, r1=9.5, r2=8, $fn=32);\n        \n        // Drip catcher groove\n        translate([0, 0, 1]) cylinder(h=1, r1=13.5, r2=11.5, $fn=32);\n    }\n}\n\n// Decorative drip tray\nmodule drip_tray() {\n    difference() {\n        // Main tray\n        translate([0, 0, -3]) cylinder(h=3, r1=20, r2=18, $fn=32);\n        \n        // Center hole\n        cylinder(h=5, r=10.5, $fn=32);\n    }\n}\n\n// Candle (for display)\nmodule candle() {\n    translate([0, 0, 15]) {\n        difference() {\n            // Candle body\n            cylinder(h=20, r=8.5, $fn=32);\n            \n            // Wick hole\n            translate([0, 0, 19.5]) cylinder(h=2, r=1, $fn=16);\n        }\n        \n        // Wick\n        translate([0, 0, 21.5]) cylinder(h=5, r=0.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Wall mounting components\n    wall_plate();\n    \n    // Back plate with decorations\n    translate([0, 10, 0]) back_plate();\n    \n    // Support structure\n    support_arm();\n    \n    // Candle holder assembly\n    translate([0, 22, 85]) union() {\n        drip_tray();\n        candle_holder();\n        candle();\n    }\n}",
    "renders": true
  },
  {
    "furniture": "pendant",
    "openscad_code": "// Pendant Lamp - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm height, 80mm diameter\n\n// Parameters\n$fn = 64;\nlamp_height = 120;\nshade_height = 60;\nshade_diameter = 80;\nwall_thickness = 2;\ncord_diameter = 6;\nmounting_plate_diameter = 50;\nbulb_diameter = 25;\n\n// Main module\nmodule pendant_lamp() {\n    // Ceiling mounting plate\n    translate([0, 0, lamp_height + 5])\n        difference() {\n            cylinder(h=5, d=mounting_plate_diameter);\n            translate([0, 0, -1])\n                cylinder(h=7, d=mounting_plate_diameter - 2*wall_thickness);\n            for(i=[-1, 1])\n                translate([i*15, 0, 2.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, d=3);\n        }\n    \n    // Cord\n    translate([0, 0, lamp_height - shade_height/2])\n        difference() {\n            cylinder(h=lamp_height - shade_height/2 + 5, d=cord_diameter);\n            translate([0, 0, -1])\n                cylinder(h=lamp_height - shade_height/2 + 7, d=cord_diameter - 2*wall_thickness);\n        }\n    \n    // Lamp shade\n    translate([0, 0, shade_height/2])\n        difference() {\n            // Outer shade\n            cylinder(h=shade_height, d1=shade_diameter, d2=shade_diameter*0.8);\n            // Inner cavity\n            translate([0, 0, wall_thickness])\n                cylinder(h=shade_height - wall_thickness, d1=shade_diameter - 2*wall_thickness, d2=shade_diameter*0.8 - 2*wall_thickness);\n            // Top opening for cord\n            translate([0, 0, shade_height - wall_thickness])\n                cylinder(h=wall_thickness + 1, d=cord_diameter + 2);\n        }\n    \n    // Shade support ring\n    translate([0, 0, shade_height - 10])\n        difference() {\n            cylinder(h=5, d=shade_diameter - 10);\n            translate([0, 0, -1])\n                cylinder(h=7, d=shade_diameter - 10 - 2*wall_thickness);\n        }\n    \n    // Bulb socket\n    translate([0, 0, 15])\n        cylinder(h=15, d=bulb_diameter + 5);\n    \n    // Light bulb\n    translate([0, 0, 7.5])\n        sphere(d=bulb_diameter);\n    \n    // Decorative rings on shade\n    for(pos=[0.2, 0.4, 0.6, 0.8]) {\n        translate([0, 0, shade_height * pos])\n            difference() {\n                cylinder(h=3, d=shade_diameter * (1 - 0.2*pos) + 4);\n                translate([0, 0, -1])\n                    cylinder(h=5, d=shade_diameter * (1 - 0.2*pos));\n            }\n    }\n    \n    // Bottom diffuser\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=2, d=shade_diameter * 0.8);\n            translate([0, 0, -1])\n                cylinder(h=4, d=shade_diameter * 0.8 - 2*wall_thickness);\n            // Ventilation holes\n            for(i=[0:3]) {\n                rotate([0, 0, i*90])\n                    translate([shade_diameter * 0.3, 0, 1])\n                        cylinder(h=3, d=5);\n            }\n        }\n}\n\n// Render the lamp\npendant_lamp();",
    "renders": true
  },
  {
    "furniture": "chandelier",
    "openscad_code": "// Realistic Medium-Complexity Chandelier\n// Overall height ~110 mm, diameter ~80 mm, 2 mm wall thickness\n\n// Parameters\nrod_r = 3;          // Ceiling rod radius\nrod_h = 15;         // Ceiling rod height\nring_r = 35;        // Main ring outer radius\nring_h = 6;         // Main ring height\narm_len = 25;       // Arm length\narm_r = 2.5;        // Arm radius\ncup_r = 6;          // Candle cup outer radius\ncup_h = 10;         // Candle cup height\ncandle_r = 3.5;     // Candle radius\ncandle_h = 14;      // Candle height\nflame_r = 2;        // Flame radius\nflame_h = 6;        // Flame height\n\nmodule ceiling_rod() {\n    cylinder(h = rod_h, r = rod_r, $fn = 20);\n}\n\nmodule main_ring() {\n    difference() {\n        cylinder(h = ring_h, r = ring_r, $fn = 60);\n        translate([0, 0, -0.1])\n            cylinder(h = ring_h + 0.2, r = ring_r - 2, $fn = 60);\n    }\n}\n\nmodule arm() {\n    translate([0, arm_len / 2, 0])\n        rotate([90, 0, 0])\n            cylinder(h = arm_len, r = arm_r, $fn = 12);\n}\n\nmodule candle_cup() {\n    difference() {\n        cylinder(h = cup_h, r = cup_r, $fn = 24);\n        translate([0, 0, -0.1])\n            cylinder(h = cup_h + 0.2, r = cup_r - 2, $fn = 24);\n    }\n}\n\nmodule candle() {\n    translate([0, 0, cup_h])\n        cylinder(h = candle_h, r = candle_r, $fn = 12);\n}\n\nmodule flame() {\n    translate([0, 0, cup_h + candle_h])\n        cylinder(h = flame_h, r1 = flame_r, r2 = 0, $fn = 12);\n}\n\nmodule arm_assembly() {\n    union() {\n        arm();\n        translate([0, arm_len, 0]) {\n            candle_cup();\n            candle();\n            flame();\n        }\n    }\n}\n\nmodule chandelier() {\n    union() {\n        // Ceiling rod\n        translate([0, 0, rod_h + ring_h / 2])\n            ceiling_rod();\n\n        // Main ring\n        translate([0, 0, ring_h / 2])\n            main_ring();\n\n        // Six arms with candles\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([0, 0, ring_h / 2])\n                    arm_assembly();\n        }\n    }\n}\n\n// Render the chandelier\nchandelier();",
    "renders": true
  },
  {
    "furniture": "torchiere",
    "openscad_code": "// Torchiere floor lamp - realistic style, medium complexity\n// Overall height ~120 mm, designed for 3D printing\n\n// Constants\npole_r = 5;          // pole radius\nbase_r = 30;         // base radius\nbase_h = 8;          // base height\nshade_h = 25;        // shade height\nshade_top_r = 35;    // shade top radius\nshade_bot_r = 15;    // shade bottom radius\nwall = 2;            // wall thickness\n\n// Main construction\nunion() {\n    // Weighted base\n    difference() {\n        cylinder(h = base_h, r = base_r, $fn = 60);\n        // Hollow out bottom for printability and weight reduction\n        translate([0, 0, 2])\n            cylinder(h = base_h - 2, r = base_r - wall, $fn = 60);\n    }\n    \n    // Pole segments for structural strength\n    for(h = [base_h, base_h + 25, base_h + 50]) {\n        translate([0, 0, h])\n            cylinder(h = 20, r = pole_r, $fn = 32);\n    }\n    \n    // Curved support arm\n    translate([0, 0, base_h + 65])\n    rotate_extrude(angle = 90, $fn = 30)\n    translate([30, 0, 0])\n    circle(r = 3);\n    \n    // Vertical top segment\n    translate([30, 0, base_h + 95])\n        cylinder(h = 20, r = pole_r, $fn = 32);\n    \n    // Lamp shade\n    translate([30, 0, base_h + 115])\n    difference() {\n        // Outer shade cone\n        cylinder(h1 = shade_h, r1 = shade_top_r, r2 = shade_bot_r, $fn = 60);\n        // Inner hollow cone\n        translate([0, 0, wall])\n        cylinder(h1 = shade_h - wall, r1 = shade_top_r - wall, r2 = shade_bot_r - wall, $fn = 60);\n    }\n    \n    // Shade support ring\n    translate([30, 0, base_h + 115])\n    cylinder(h = wall, r = shade_bot_r + wall, $fn = 60);\n    \n    // Cable management clips along pole\n    for(z = [base_h + 10 : 20 : base_h + 65]) {\n        translate([pole_r + 2, 0, z])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 6, r = 3, $fn = 16);\n            translate([0, 0, -1])\n            cylinder(h = 8, r = 1.5, $fn = 16);\n        }\n    }\n    \n    // Base stability ribs\n    for(angle = [0 : 45 : 315]) {\n        rotate([0, 0, angle])\n        translate([base_r - 10, 0, base_h / 2])\n        cube([20, wall, base_h]);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "floorlamp",
    "openscad_code": "// Realistic Medium-Complexity Floorlamp\n// All dimensions in mm, ready for FDM printing (2 mm shells, no steep overhangs)\n\n// Overall scale\nscale_factor = 1; // 1 -> 150 mm tall ; set to 0.33 to print ~50 mm tall\n\n// Base\nmodule base() {\n    difference() {\n        cylinder(h = 10 * scale_factor, r1 = 35 * scale_factor, r2 = 30 * scale_factor, $fn = 60);\n        // hollow cavity for weight reduction\n        translate([0, 0, 2 * scale_factor])\n            cylinder(h = 8 * scale_factor, r1 = 33 * scale_factor, r2 = 28 * scale_factor, $fn = 60);\n    }\n}\n\n// Vertical post (hollow tube)\nmodule post() {\n    difference() {\n        cylinder(h = 120 * scale_factor, r = 6 * scale_factor, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = 122 * scale_factor, r = 4 * scale_factor, $fn = 32);\n    }\n}\n\n// Swiveling joint at top\nmodule joint() {\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 12 * scale_factor, r = 7 * scale_factor, $fn = 32);\n            translate([0, 0, 2 * scale_factor])\n                cylinder(h = 8 * scale_factor, r = 3 * scale_factor, $fn = 32);\n        }\n}\n\n// Arm\nmodule arm() {\n    hull() {\n        translate([0, 0, 0])\n            sphere(d = 10 * scale_factor, $fn = 32);\n        translate([50 * scale_factor, 0, 0])\n            sphere(d = 8 * scale_factor, $fn = 32);\n    }\n    translate([50 * scale_factor, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 10 * scale_factor, r = 4 * scale_factor, $fn = 32);\n}\n\n// Lampshade with vents\nmodule shade() {\n    difference() {\n        // outer shell\n        cylinder(h1 = 20 * scale_factor, h2 = 20 * scale_factor, r1 = 30 * scale_factor, r2 = 25 * scale_factor, $fn = 60);\n        // inner shell\n        translate([0, 0, 2 * scale_factor])\n            cylinder(h1 = 18 * scale_factor, h2 = 18 * scale_factor, r1 = 28 * scale_factor, r2 = 23 * scale_factor, $fn = 60);\n        // vent slots\n        for (a = [0 : 30 : 330]) {\n            rotate([0, 0, a])\n                translate([27 * scale_factor, 0, 0])\n                    cube([6 * scale_factor, 2 * scale_factor, 16 * scale_factor], center = true);\n        }\n    }\n}\n\n// Switch detail\nmodule switch() {\n    translate([0, 7 * scale_factor, 40 * scale_factor])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 4 * scale_factor, r = 3 * scale_factor, $fn = 20);\n                translate([0, 0, -1])\n                    cylinder(h = 6 * scale_factor, r = 1 * scale_factor, $fn = 20);\n            }\n}\n\n// Cable exit\nmodule cable_exit() {\n    translate([-4 * scale_factor, 0, 5 * scale_factor])\n        rotate([90, 0, 0])\n            cylinder(h = 8 * scale_factor, r1 = 2.5 * scale_factor, r2 = 2 * scale_factor, $fn = 16);\n}\n\n// Assembly\ntranslate([0, 0, 5 * scale_factor]) base();\ntranslate([0, 0, 10 * scale_factor]) post();\ntranslate([0, 0, 130 * scale_factor]) joint();\ntranslate([0, 0, 130 * scale_factor]) arm();\ntranslate([50 * scale_factor, 0, 130 * scale_factor]) shade();\nswitch();\ncable_exit();",
    "renders": true
  },
  {
    "furniture": "tablelamp",
    "openscad_code": "// Realistic Table Lamp – OpenSCAD\n// Overall height ≈ 120 mm, footprint ≈ 60 mm\nwall = 2;        // 3D-print-friendly wall thickness\n\n// Lamp shade\nmodule shade() {\n    difference() {\n        // Outer cone\n        cylinder(h = 40, r1 = 30, r2 = 20, $fn = 60);\n        // Inner hollow cone\n        translate([0, 0, -0.1])\n            cylinder(h = 40.2, r1 = 30 - wall, r2 = 20 - wall, $fn = 60);\n    }\n}\n\n// Central stem\nmodule stem() {\n    cylinder(h = 60, r = 4, $fn = 24);          // main pole\n    // Decorative ring\n    translate([0, 0, 30])\n        cylinder(h = 4, r1 = 6, r2 = 6, $fn = 30);\n}\n\n// Sturdy tripod base\nmodule base() {\n    tripod_r = 30;              // spread radius\n    leg_h = 20;                 // leg height\n    \n    union() {\n        // Center disk\n        cylinder(h = leg_h, r = 8, $fn = 32);\n        \n        // Three legs\n        for (a = [0, 120, 240]) {\n            rotate([0, 0, a])\n            translate([tripod_r * 0.5, 0, leg_h/2])\n                rotate([90, 0, 0])\n                    cylinder(h = tripod_r * 0.9, r = 3, $fn = 16);\n        }\n    }\n}\n\n// On/Off knob on stem\nmodule knob() {\n    translate([0, 8, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 6, r = 3, $fn = 20);\n}\n\n// Screw-like joint between stem and shade\nmodule joint() {\n    difference() {\n        cylinder(h = 8, r = 5.5, $fn = 20);             // outer ring\n        cylinder(h = 8.2, r = 4.2, $fn = 20);           // hole for stem\n    }\n}\n\n// Cable exit at back of base\nmodule cable_exit() {\n    rotate([90, 0, 0])\n        translate([0, 8, -leg_h/2])\n            cylinder(h = 6, r1 = 3.5, r2 = 1.5, $fn = 16);\n}\n\n// Assemble the lamp\nunion() {\n    // Base first\n    base();\n    \n    // Stem rising from center\n    translate([0, 0, 20]) stem();\n    \n    // Joint on top of stem\n    translate([0, 0, 80]) joint();\n    \n    // Shade sitting on joint\n    translate([0, 0, 88]) shade();\n    \n    // Knob on stem\n    knob();\n    \n    // Cable exit in rear\n    cable_exit();\n}",
    "renders": true
  },
  {
    "furniture": "workstation",
    "openscad_code": "// Compact 3D-Printable Office Workstation\n// Dimensions: 100mm wide x 60mm deep x 75mm high\n// Wall thickness: 2mm for all parts\n\n// Main module\nmodule workstation() {\n    // Desktop\n    translate([0, 0, 73])\n        cube([100, 60, 2], center = true);\n    \n    // Legs (4 legs)\n    for(x = [-45, 45])\n        for(y = [-25, 25])\n            translate([x, y, 36.5])\n                cylinder(h = 71, r = 3, $fn = 16);\n    \n    // Back panel\n    translate([0, 29, 36.5])\n        cube([96, 2, 71], center = true);\n    \n    // Side panel left\n    translate([-48, 0, 36.5])\n        cube([2, 56, 71], center = true);\n    \n    // Side panel right\n    translate([48, 0, 36.5])\n        cube([2, 56, 71], center = true);\n    \n    // Keyboard tray\n    translate([0, 10, 55])\n        cube([80, 30, 2], center = true);\n    \n    // Keyboard tray support rails\n    for(x = [-35, 35])\n        translate([x, 10, 42])\n            cube([4, 30, 26], center = true);\n    \n    // Monitor stand base\n    translate([0, -15, 75])\n        cube([40, 10, 2], center = true);\n    \n    // Monitor stand post\n    translate([0, -15, 81])\n        cylinder(h = 12, r = 5, $fn = 16);\n    \n    // Monitor stand platform\n    translate([0, -15, 88])\n        cube([50, 30, 2], center = true);\n    \n    // Cable management hole (desktop)\n    translate([30, -20, 73])\n        cylinder(h = 3, r = 5, $fn = 32);\n    \n    // Small drawer unit\n    translate([-35, 25, 60])\n        cube([25, 25, 26], center = true);\n    \n    // Drawer faces\n    translate([-35, 25, 67])\n        cube([22, 22, 2], center = true);\n    \n    // Drawer handles\n    translate([-35, 36, 67])\n        cube([10, 2, 2], center = true);\n    \n    // Lower shelf\n    translate([20, 0, 25])\n        cube([50, 50, 2], center = true);\n    \n    // Shelf support brackets\n    for(x = [0, 40])\n        translate([x, -20, 12])\n            cube([4, 4, 26], center = true);\n    \n    // CPU stand\n    translate([35, -20, 10])\n        cube([30, 20, 2], center = true);\n    \n    // CPU stand sides\n    for(y = [-10, 10])\n        translate([35, y, 5])\n            cube([30, 2, 10], center = true);\n}\n\n// Render the workstation\nworkstation();",
    "renders": true
  },
  {
    "furniture": "footrest",
    "openscad_code": "// Medium-complexity realistic 3D-printable footrest\n// Overall size: 120 mm wide × 80 mm deep × 60 mm high\n\n$fn = 36; // smooth curves\n\n// Wall thickness\nt = 2;\n\n// Main cushion\nmodule cushion()\n{\n    // Upholstered top pad\n    difference()\n    {\n        // Overall rounded cushion\n        translate([0, 0, 60-15])\n            minkowski()\n            {\n                cube([120-2*t, 80-2*t, 15-t], center = true);\n                sphere(t/2);\n            }\n        // Button tufting dimples (3×2 grid)\n        for (x = [-40, 0, 40])\n            for (y = [-20, 20])\n                translate([x, y, 60-15+7.5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3, d1 = 6, d2 = 4, $fn = 12);\n    }\n}\n\n// Frame leg\nmodule leg(x, y)\n{\n    translate([x, y, 0])\n    {\n        // Front/back faces\n        cube([8, t, 45], center = true);\n        cube([8, t, 45], center = true);\n\n        // Side faces\n        translate([0, 0, 0])\n            cube([t, 6, 45], center = true);\n        translate([0, 0, 0])\n            cube([t, 6, 45], center = true);\n\n        // Bottom foot cap\n        translate([0, 0, -45/2 + 3])\n            minkowski()\n            {\n                cube([t + 2, t + 2, 6], center = true);\n                sphere(1);\n            }\n    }\n}\n\n// Side apron\nmodule apron(l, isLong = true)\n{\n    rotate([0, 0, isLong ? 0 : 90])\n        translate([0, 0, 45/2])\n            cube([l, t, 45], center = true);\n}\n\n// Top frame rail\nmodule topRail(l, isLong = true)\n{\n    rotate([0, 0, isLong ? 0 : 90])\n        translate([0, 0, 60 - 15 - t/2])\n            cube([l, t, 15], center = true);\n}\n\n// Assembly\nunion()\n{\n    // Cushion\n    cushion();\n\n    // Legs\n    leg(-(120/2 - 8/2), -(80/2 - 6/2));\n    leg(-(120/2 - 8/2),  (80/2 - 6/2));\n    leg( (120/2 - 8/2), -(80/2 - 6/2));\n    leg( (120/2 - 8/2),  (80/2 - 6/2));\n\n    // Aprons\n    apron(120 - 2*8, true);\n    translate([0, 80 - 6, 0])\n        apron(120 - 2*8, true);\n    apron(80 - 2*6, false);\n    translate([120 - 8, 0, 0])\n        apron(80 - 2*6, false);\n\n    // Top rails\n    topRail(120 - 2*8, true);\n    translate([0, 80 - 6, 0])\n        topRail(120 - 2*8, true);\n    topRail(80 - 2*6, false);\n    translate([120 - 8, 0, 0])\n        topRail(80 - 2*6, false);\n}",
    "renders": true
  },
  {
    "furniture": "plantstand",
    "openscad_code": "// Realistic 3D-printable plantstand, medium complexity\n// Overall printable volume: ~100mm diameter, ~120mm height\n// Safe 2mm wall thickness, no steep overhangs\n\n$fa = 2; $fs = 1;\n\n// Main parameters\nstand_height = 120;\nbase_d = 90;\ntop_d = 70;\nleg_count = 4;\nwall_t = 2;          // printable wall thickness\nshelf_clear = 25;    // space below lower shelf\n\nmodule leg_profile(h, taper) {\n    difference() {\n        cylinder(h = h, d1 = 10, d2 = 10 - taper, $fn = 16);\n        translate([0, 0, -1])\n            cylinder(h = h + 2, d1 = 10 - wall_t*2, d2 = 10 - taper - wall_t*2, $fn = 16);\n    }\n}\n\nmodule round_shelf(d, h) {\n    difference() {\n        cylinder(h = wall_t, d = d, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = wall_t + 2, d = d - wall_t*2, $fn = 64);\n    }\n}\n\nmodule brace_bar(len, ang) {\n    rotate([0, ang, 0])\n        difference() {\n            cube([len, 6, wall_t], center = true);\n            cube([len - wall_t*2, 2, wall_t], center = true);\n        }\n}\n\n// Lower ring base\ntranslate([0, 0, wall_t/2])\n    round_shelf(base_d, wall_t);\n\n// Upper ring top\ntranslate([0, 0, stand_height - wall_t/2])\n    round_shelf(top_d, wall_t);\n\n// Legs with slight taper\nfor (i = [0 : leg_count - 1]) {\n    angle = i * 360 / leg_count;\n    translate([0, 0, wall_t])\n        rotate([0, 0, angle])\n            translate([base_d/2 - 5, 0, 0])\n                leg_profile(stand_height - wall_t*2, 3);\n}\n\n// Lower shelf disk\ntranslate([0, 0, shelf_clear + wall_t/2])\n    round_shelf(base_d * 0.7, wall_t);\n\n// Cross braces between legs for stability\nfor (i = [0 : leg_count - 1]) {\n    angle = i * 360 / leg_count;\n    rotate([0, 0, angle])\n        translate([base_d/2 - 5, 0, shelf_clear/2 + wall_t])\n            brace_bar(base_d * 0.6, 0);\n    rotate([0, 0, angle + 45])\n        translate([top_d/2 - 5, 0, stand_height * 0.7])\n            brace_bar(top_d * 0.5, 15);\n}\n\n// Center water-drain holes in shelves\ntranslate([0, 0, wall_t + 0.5])\n    cylinder(h = wall_t + 1, d = 5, $fn = 16);\ntranslate([0, 0, shelf_clear + wall_t + 0.5])\n    cylinder(h = wall_t + 1, d = 5, $fn = 16);",
    "renders": true
  },
  {
    "furniture": "displaycase",
    "openscad_code": "// Display case with glass sides, wooden frame, and shelf\n// Overall dimensions: 80mm x 50mm x 100mm\n\n$fn = 32;\n\n// Main parameters\ncase_width = 80;\ncase_depth = 50;\ncase_height = 100;\nwall_thickness = 2;\nshelf_thickness = 3;\nleg_height = 15;\n\nmodule display_case() {\n    // Main case frame\n    difference() {\n        // Outer shell\n        cube([case_width, case_depth, case_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([case_width - 2*wall_thickness, case_depth - 2*wall_thickness, case_height - wall_thickness]);\n    }\n    \n    // Back panel\n    translate([0, 0, 0])\n        cube([case_width, wall_thickness, case_height]);\n    \n    // Bottom shelf\n    translate([wall_thickness, wall_thickness, leg_height])\n        cube([case_width - 2*wall_thickness, case_depth - 2*wall_thickness, shelf_thickness]);\n    \n    // Top shelf\n    translate([wall_thickness, wall_thickness, case_height - 30])\n        cube([case_width - 2*wall_thickness, case_depth - 2*wall_thickness, shelf_thickness]);\n    \n    // Glass front frame pieces\n    // Left frame\n    translate([0, case_depth - wall_thickness, 0])\n        cube([wall_thickness, wall_thickness, case_height]);\n    \n    // Right frame\n    translate([case_width - wall_thickness, case_depth - wall_thickness, 0])\n        cube([wall_thickness, wall_thickness, case_height]);\n    \n    // Top frame\n    translate([wall_thickness, case_depth - wall_thickness, case_height - wall_thickness])\n        cube([case_width - 2*wall_thickness, wall_thickness, wall_thickness]);\n    \n    // Bottom frame\n    translate([wall_thickness, case_depth - wall_thickness, 0])\n        cube([case_width - 2*wall_thickness, wall_thickness, wall_thickness]);\n    \n    // Legs\n    // Front left leg\n    translate([wall_thickness*2, wall_thickness*2, 0])\n        cylinder(h = leg_height, d = 6);\n    \n    // Front right leg\n    translate([case_width - wall_thickness*2 - 6, wall_thickness*2, 0])\n        cylinder(h = leg_height, d = 6);\n    \n    // Back left leg\n    translate([wall_thickness*2, case_depth - wall_thickness*2 - 6, 0])\n        cylinder(h = leg_height, d = 6);\n    \n    // Back right leg\n    translate([case_width - wall_thickness*2 - 6, case_depth - wall_thickness*2 - 6, 0])\n        cylinder(h = leg_height, d = 6);\n    \n    // Door handle\n    translate([case_width/2, case_depth, case_height/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 4, d2 = 4);\n    \n    // Side support beams\n    for (z = [leg_height + shelf_thickness, case_height - 30 - shelf_thickness]) {\n        translate([wall_thickness, wall_thickness + 5, z])\n            cube([case_width - 2*wall_thickness, wall_thickness, 5]);\n    }\n    \n    // Shelf support brackets\n    module bracket() {\n        difference() {\n            translate([0, 0, 0])\n                cube([15, 5, 5]);\n            translate([2, 2, 2])\n                cube([11, 3, 3]);\n        }\n    }\n    \n    // Left brackets for bottom shelf\n    translate([wall_thickness + 5, wall_thickness, leg_height])\n        bracket();\n    translate([wall_thickness + 5, case_depth - wall_thickness - 5, leg_height])\n        mirror([0, 1, 0])\n            bracket();\n    \n    // Right brackets for bottom shelf\n    translate([case_width - wall_thickness - 20, wall_thickness, leg_height])\n        mirror([1, 0, 0])\n            bracket();\n    translate([case_width - wall_thickness - 20, case_depth - wall_thickness - 5, leg_height])\n        mirror([1, 1, 0])\n            bracket();\n    \n    // Left brackets for top shelf\n    translate([wall_thickness + 5, wall_thickness, case_height - 30 - shelf_thickness])\n        bracket();\n    translate([wall_thickness + 5, case_depth - wall_thickness - 5, case_height - 30 - shelf_thickness])\n        mirror([0, 1, 0])\n            bracket();\n    \n    // Right brackets for top shelf\n    translate([case_width - wall_thickness - 20, wall_thickness, case_height - 30 - shelf_thickness])\n        mirror([1, 0, 0])\n            bracket();\n    translate([case_width - wall_thickness - 20, case_depth - wall_thickness - 5, case_height - 30 - shelf_thickness])\n        mirror([1, 1, 0])\n            bracket();\n}\n\ndisplay_case();",
    "renders": true
  },
  {
    "furniture": "fauteuil",
    "openscad_code": "// Fauteuil (armchair) – medium complexity, realistic style\n// Overall size ~80 mm wide × 75 mm deep × 80 mm high\n$fa = 2; $fs = 0.5;\n\n// ---------- Parameters ----------\nseat_w      = 50;      // seat width\nseat_d      = 50;      // seat depth\nseat_h      = 12;      // seat cushion thickness\nback_h      = 40;      // backrest height above seat\narm_h       = 20;      // armrest height above seat\nleg_h       = 30;      // leg height\nleg_t       = 4;       // leg thickness\nframe_t     = 2;       // frame & rail thickness\nwall_t      = 2;       // printable wall thickness\n\n// ---------- Modules ----------\n\nmodule leg() {\n    // Simple tapered square leg\n    linear_extrude(height = leg_h, scale = [1,0.9])\n        square([leg_t, leg_t], center = true);\n}\n\nmodule seat_cushion() {\n    // Main seat block with rounded top\n    difference() {\n        hull() {\n            translate([0,0,seat_h/2])\n                cube([seat_w, seat_d, seat_h+1], center = true);\n            translate([0,0,seat_h-1])\n                cube([seat_w-4, seat_d-4, 2], center = true);\n        }\n        // Remove bottom inside for shell thickness\n        translate([0,0,-1])\n            cube([seat_w-wall_t*2, seat_d-wall_t*2, seat_h+2], center = true);\n    }\n}\n\nmodule backrest() {\n    // Cushioned backrest with slight tilt\n    translate([0, -seat_d/2 + 2, seat_h + back_h/2]) {\n        rotate([10,0,0]) {\n            difference() {\n                cube([seat_w-4, frame_t*2, back_h], center = true);\n                // Hollow back\n                translate([0,0,0])\n                    cube([seat_w-4-wall_t*2, frame_t*2+1, back_h-wall_t*2], center = true);\n            }\n            // Add cushion profile\n            translate([0, 0, back_h/2])\n                cube([seat_w-6, frame_t*3, wall_t], center = true);\n        }\n    }\n}\n\nmodule armrest() {\n    // Curved armrest with support\n    difference() {\n        hull() {\n            translate([seat_w/2+frame_t, 0, arm_h/2+seat_h])\n                cube([frame_t*3, seat_d*0.7, frame_t*2], center = true);\n            translate([seat_w/2+frame_t, seat_d/2-frame_t, arm_h-5+seat_h])\n                cube([frame_t*3, frame_t*2, frame_t], center = true);\n        }\n        // Hollow underside\n        translate([seat_w/2+frame_t, 0, arm_h/2+seat_h-1])\n            cube([frame_t*3-wall_t*2, seat_d*0.7-wall_t*2, frame_t*3], center = true);\n    }\n    // Support post\n    translate([seat_w/2+frame_t, seat_d/2-frame_t, seat_h/2])\n        cube([frame_t*2, frame_t*2, leg_h+seat_h], center = true);\n}\n\nmodule stretcher() {\n    // Front stretcher between front legs\n    translate([0, seat_d/2-leg_t/2, leg_h/2])\n        cube([seat_w-leg_t*2, frame_t, frame_t], center = true);\n}\n\n// ---------- Assembly ----------\nunion() {\n    // Seat\n    seat_cushion();\n\n    // Backrest\n    backrest();\n\n    // Armrests (left & right)\n    armrest();\n    mirror([1,0,0]) armrest();\n\n    // Legs\n    translate([ seat_w/2-leg_t/2,  seat_d/2-leg_t/2, 0]) leg();\n    translate([-seat_w/2+leg_t/2,  seat_d/2-leg_t/2, 0]) leg();\n    translate([ seat_w/2-leg_t/2, -seat_d/2+leg_t/2, 0]) leg();\n    translate([-seat_w/2+leg_t/2, -seat_d/2+leg_t/2, 0]) leg();\n\n    // Front stretcher\n    stretcher();\n}",
    "renders": true
  },
  {
    "furniture": "secretary",
    "openscad_code": "// Secretary Desk - Realistic Style, Medium Complexity\n// Dimensions: 60mm(W) x 40mm(D) x 90mm(H)\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main carcass\n        translate([0, 0, 45])\n            cube([60, 40, 90], center=true);\n        \n        // Remove back for printing\n        translate([0, -21, 45])\n            cube([64, 2, 94], center=true);\n        \n        // Interior space\n        translate([0, 0, 55])\n            cube([56, 36, 70], center=true);\n    }\n}\n\n// Writing surface (fold-down)\nmodule writing_surface() {\n    difference() {\n        // Main surface\n        translate([0, -18, 80])\n            rotate([90, 0, 0])\n            cube([56, 40, 2]);\n        \n        // Finger groove\n        translate([0, -18, 60])\n            rotate([90, 0, 0])\n            cylinder(h=3, r=5);\n    }\n}\n\n// Small drawers (3)\nmodule small_drawers() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 18, 0, 30])\n            cube([16, 36, 14]);\n    }\n}\n\n// Large bottom drawer\nmodule bottom_drawer() {\n    translate([0, 0, 8])\n        cube([56, 36, 14]);\n}\n\n// Drawer handles\nmodule drawer_handles() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 18, 16, 24])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=2);\n    }\n    translate([0, 16, 2])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=2);\n}\n\n// Legs\nmodule legs() {\n    for(x = [-25, 25]) {\n        for(y = [-15, 15]) {\n            translate([x, y, 0])\n                cylinder(h=8, r=3);\n        }\n    }\n}\n\n// Bookcase top\nmodule bookcase_top() {\n    difference() {\n        // Main frame\n        translate([0, 0, 95])\n            cube([60, 40, 20], center=true);\n        \n        // Interior cavity\n        translate([0, 0, 95])\n            cube([56, 36, 16], center=true);\n        \n        // Shelf\n        translate([0, 0, 90])\n            cube([56, 36, 2]);\n    }\n}\n\n// Back panel details\nmodule back_panel() {\n    for(i = [1:5]) {\n        translate([-28, -18, 10 + i * 15])\n            cube([2, 2, 10]);\n    }\n}\n\n// Assemble the secretary\nunion() {\n    body();\n    writing_surface();\n    small_drawers();\n    bottom_drawer();\n    drawer_handles();\n    legs();\n    bookcase_top();\n    back_panel();\n}",
    "renders": true
  },
  {
    "furniture": "washstand",
    "openscad_code": "// Realistic Washstand - Medium Complexity\n// Overall dimensions: 80mm W x 40mm D x 80mm H\n\n$fn = 32;\n\n// Main body module\nmodule washstand() {\n    // Main cabinet body\n    difference() {\n        // Main box\n        translate([0, 0, 40])\n            cube([80, 40, 40], center = true);\n        // Hollow interior\n        translate([0, 0, 40])\n            cube([76, 36, 38], center = true);\n    }\n    \n    // Base frame\n    difference() {\n        translate([0, 0, 20])\n            cube([84, 44, 4], center = true);\n        // Leg cutouts\n        for (x = [-35, 35])\n            for (y = [-15, 15])\n                translate([x, y, 18])\n                    cylinder(h = 6, r = 5);\n    }\n    \n    // Legs\n    for (x = [-35, 35])\n        for (y = [-15, 15])\n            translate([x, y, 10])\n                cylinder(h = 20, r = 5);\n    \n    // Top surface with sink cutout\n    difference() {\n        translate([0, 0, 62])\n            cube([84, 44, 4], center = true);\n        // Sink bowl cutout\n        translate([0, 5, 62])\n            rotate([90, 0, 0])\n                cylinder(h = 20, r1 = 15, r2 = 12);\n    }\n    \n    // Sink bowl\n    difference() {\n        translate([0, 5, 52])\n            rotate([90, 0, 0])\n                cylinder(h = 20, r1 = 15, r2 = 12);\n        translate([0, 5, 52])\n            rotate([90, 0, 0])\n                cylinder(h = 18, r1 = 13, r2 = 10);\n    }\n    \n    // Faucet\n    translate([0, -15, 66])\n        union() {\n            // Base\n            cylinder(h = 2, r = 6);\n            // Pipe\n            translate([0, 0, 2])\n                cylinder(h = 12, r1 = 3, r2 = 2);\n            // Spout\n            translate([0, 8, 12])\n                rotate([30, 0, 0])\n                    cylinder(h = 8, r = 2);\n        }\n    \n    // Drawer fronts\n    for (i = [0:1]) {\n        translate([0, 0, 48 + i * 12])\n            difference() {\n                // Drawer face\n                cube([36, 2, 8], center = true);\n                // Handle cutout\n                translate([0, -2, 0])\n                    cube([20, 2, 2], center = true);\n            }\n        // Drawer handle\n        translate([0, -2, 48 + i * 12])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 1);\n    }\n    \n    // Back panel\n    translate([0, 22, 40])\n        cube([78, 2, 40], center = true);\n    \n    // Side panels detail\n    for (side = [-1, 1]) {\n        translate([side * 41, 0, 40])\n            cube([2, 40, 40], center = true);\n    }\n}\n\n// Render the washstand\nwashstand();",
    "renders": true
  },
  {
    "furniture": "powertable",
    "openscad_code": "// PowerTable - Medium complexity realistic furniture\n// Overall dimensions: 120mm x 70mm x 50mm\n\nmodule powerTable() {\n    // Table top with rounded edges\n    difference() {\n        // Main top surface\n        translate([0, 0, 48])\n        cube([120, 70, 4], center=true);\n        \n        // Rounded edge cutouts\n        for(x = [-58, 58])\n            for(y = [-33, 33])\n                translate([x, y, 46])\n                cylinder(h=6, r=2, center=true);\n    }\n    \n    // Power strip housing\n    translate([0, 0, 42])\n    difference() {\n        // Main housing\n        cube([110, 25, 8], center=true);\n        \n        // Outlet slots\n        for(i = [-40, -20, 0, 20, 40])\n            translate([i, 0, 42])\n            cube([12, 18, 10], center=true);\n    }\n    \n    // USB ports\n    translate([-45, 0, 42])\n    difference() {\n        cube([16, 20, 2], center=true);\n        for(i = [-5, 5])\n            translate([i, -6, 42])\n            cylinder(h=3, r=2, $fn=16);\n    }\n    \n    // Cable management hole\n    translate([0, 30, 42])\n    cylinder(h=8, r=8, center=true);\n    \n    // Table legs\n    module leg(x, y) {\n        translate([x, y, 24])\n        difference() {\n            cube([6, 6, 48], center=true);\n            // Hollow for material saving\n            translate([x, y, 24])\n            cube([3, 3, 46], center=true);\n        }\n    }\n    \n    // Position legs\n    for(x = [-55, 55])\n        for(y = [-30, 30])\n            leg(x, y);\n    \n    // Support frame\n    translate([0, 0, 24])\n    difference() {\n        cube([116, 66, 4], center=true);\n        translate([0, 0, 24])\n        cube([110, 60, 5], center=true);\n    }\n    \n    // Power cord\n    translate([0, -35, 40])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=3, $fn=16);\n    \n    // Cord strain relief\n    translate([0, -35, 36])\n    sphere(r=4, $fn=16);\n    \n    // Rubber feet\n    module foot(x, y) {\n        translate([x, y, 2])\n        cylinder(h=4, r=3, $fn=16);\n    }\n    \n    // Position feet\n    for(x = [-55, 55])\n        for(y = [-30, 30])\n            foot(x, y);\n}\n\n// Render the table\npowerTable();",
    "renders": true
  },
  {
    "furniture": "centerpiece",
    "openscad_code": "// Modern Coffee Table Centerpiece\n// Overall dimensions: 120mm x 60mm x 45mm\n\n$fn = 32;\n\n// Main assembly\nmodule coffee_table() {\n    // Table top\n    difference() {\n        // Main top surface\n        translate([0, 0, 42]) {\n            cube([120, 60, 6], center=true);\n        }\n        \n        // Chamfer edges\n        translate([0, 0, 45]) {\n            cube([116, 56, 6], center=true);\n        }\n    }\n    \n    // Under-top support frame\n    translate([0, 0, 38]) {\n        difference() {\n            cube([110, 50, 4], center=true);\n            cube([106, 46, 4], center=true);\n        }\n    }\n    \n    // Leg assemblies - 4 legs with stretchers\n    for (x = [-50, 50]) {\n        for (y = [-20, 20]) {\n            leg_assembly(x, y);\n        }\n    }\n    \n    // Lower shelf\n    translate([0, 0, 15]) {\n        difference() {\n            cube([100, 40, 3], center=true);\n            // Shelf cutout pattern\n            for (i = [-40:10:40]) {\n                translate([i, 0, -1]) {\n                    cube([6, 36, 5], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Individual leg assembly with stretcher\nmodule leg_assembly(x_pos, y_pos) {\n    // Main leg\n    translate([x_pos, y_pos, 22.5]) {\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([6, 6, 45], center=true);\n                // Hollow core for material saving\n                cube([2, 2, 45], center=true);\n            }\n        }\n    }\n    \n    // Horizontal stretcher\n    if (abs(x_pos) == 50) {\n        translate([(x_pos/2), y_pos, 25]) {\n            if (abs(y_pos) == 20) {\n                cube([abs(x_pos), 4, 4], center=true);\n            } else {\n                cube([4, abs(y_pos*2), 4], center=true);\n            }\n        }\n    }\n    \n    // Leg-to-top connector\n    translate([x_pos, y_pos, 39]) {\n        rotate([0, 0, 45]) {\n            cylinder(h=4, r1=4, r2=5, center=true);\n        }\n    }\n    \n    // Leg-to-shelf connector\n    translate([x_pos, y_pos, 16.5]) {\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([8, 8, 3], center=true);\n                cube([4, 4, 3], center=true);\n            }\n        }\n    }\n    \n    // Floor protector pads\n    translate([x_pos, y_pos, 1]) {\n        cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Generate the table\ncoffee_table();",
    "renders": true
  },
  {
    "furniture": "plinth",
    "openscad_code": "// Realistic medium-complexity plinth\n// External dimensions: 100 x 100 x 50 mm\n// Wall thickness: 2 mm\n// Designed for 3D printing – no overhangs\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer block\n        cube([100, 100, 50], center = true);\n        // Hollow interior leaving 2 mm walls\n        translate([0, 0, 1])\n            cube([96, 96, 48], center = true);\n    }\n}\n\n// Top frame lip for visual strength\nmodule top_frame() {\n    difference() {\n        // Outer lip\n        translate([0, 0, 25])\n            cube([104, 104, 4], center = true);\n        // Inner cutout\n        translate([0, 0, 27])\n            cube([98, 98, 4], center = true);\n    }\n}\n\n// Recessed panel on each side for realism\nmodule side_panel() {\n    difference() {\n        // Raised frame\n        cube([2, 90, 30], center = true);\n        // Recess\n        translate([0, 0, 1])\n            cube([1.5, 86, 28], center = true);\n    }\n}\n\n// Base skirt for furniture-like appearance\nmodule base_skirt() {\n    difference() {\n        // Skirt body\n        cube([104, 104, 6], center = true);\n        // Cutout inside\n        translate([0, 0, 3])\n            cube([100, 100, 6], center = true);\n    }\n}\n\n// Simple joint detail at corners\nmodule corner_block() {\n    cube([6, 6, 6], center = true);\n}\n\n// Assembly\nunion() {\n    body();\n    top_frame();\n    base_skirt();\n    \n    // Four side panels\n    translate([49, 0, 10]) side_panel();\n    translate([-49, 0, 10]) mirror([1, 0, 0]) side_panel();\n    translate([0, 49, 10]) rotate([0, 0, 90]) side_panel();\n    translate([0, -49, 10]) rotate([0, 0, 90]) mirror([0, 1, 0]) side_panel();\n    \n    // Four corner blocks for joint detail\n    translate([48, 48, 22]) corner_block();\n    translate([-48, 48, 22]) corner_block();\n    translate([48, -48, 22]) corner_block();\n    translate([-48, -48, 22]) corner_block();\n}",
    "renders": true
  },
  {
    "furniture": "corbel",
    "openscad_code": "$fa = 1;\n$fs = 1;\n\n// Overall dimensions\nwidth = 120;\nheight = 90;\ndepth = 60;\nwall = 2;\n\nmodule corbelFurniture() {\n    // Main L-shaped body\n    difference() {\n        union() {\n            // Vertical back panel\n            translate([0, 0, 0])\n                cube([width, wall, height], center=false);\n            \n            // Horizontal shelf\n            translate([0, wall, 0])\n                cube([width, depth, wall], center=false);\n        }\n        \n        // Lightening cutouts in back panel\n        for (i = [1:3]) {\n            translate([i * width/4 - wall, wall, height/3])\n                cube([wall*2, wall*0.5, height/3], center=false);\n        }\n        \n        // Lightening cutouts in shelf\n        for (i = [1:3]) {\n            translate([i * width/4 - wall, wall*2, wall])\n                cube([wall*2, depth - wall*2, wall*0.5], center=false);\n        }\n    }\n    \n    // Triangular gusset brace\n    difference() {\n        union() {\n            // Main gusset\n            translate([0, wall, wall])\n                polyhedron(\n                    points = [\n                        [0, 0, 0],          // 0\n                        [width*0.6, 0, 0],  // 1\n                        [0, depth*0.8, 0],  // 2\n                        [0, 0, height*0.7], // 3\n                        [width*0.6, 0, height*0.7], // 4\n                        [0, depth*0.8, height*0.7]  // 5\n                    ],\n                    faces = [\n                        [0, 1, 2],    // bottom\n                        [3, 5, 4],    // top\n                        [0, 3, 4, 1], // front\n                        [1, 4, 5, 2], // right\n                        [2, 5, 3, 0]  // back\n                    ]\n                );\n        }\n        \n        // Hole in gusset for weight reduction\n        translate([wall*3, wall*3, height*0.2])\n            cube([width*0.3, depth*0.3, height*0.3], center=false);\n    }\n    \n    // Front decorative molding\n    linear_extrude(height = wall*1.5)\n    offset(delta = -0.5)\n    offset(delta = 1)\n    square([width*0.8, wall*2], center=false);\n    \n    // Shelf edge trim\n    translate([0, wall, wall])\n        cube([width, wall*1.5, wall], center=false);\n    \n    // Mounting screw holes\n    for (x = [width*0.15, width*0.85]) {\n        for (z = [height*0.3, height*0.7]) {\n            translate([x, wall/2, z])\n                rotate([90, 0, 0])\n                    cylinder(h=wall*5, r=1.5, $fn=16);\n        }\n    }\n    \n    // Shelf pin holes\n    for (x = [width*0.2, width*0.5, width*0.8]) {\n        for (y = [depth*0.3, depth*0.7]) {\n            translate([x, y, wall*0.5])\n                rotate([0, 0, 0])\n                    cylinder(h=wall*2, r=1.5, $fn=16);\n        }\n    }\n    \n    // Bottom foot detail\n    translate([0, 0, 0])\n        cube([wall*3, wall*3, wall*3], center=false);\n    translate([width-wall*3, 0, 0])\n        cube([wall*3, wall*3, wall*3], center=false);\n    \n    // Small chamfers\n    difference() {\n        translate([0, wall, wall])\n            cube([width, depth, height-wall], center=false);\n        translate([-0.1, wall-0.1, wall-0.1])\n            cube([width+0.2, depth+0.2, height-wall+0.2], center=false);\n    }\n}\n\ncorbelFurniture();",
    "renders": true
  },
  {
    "furniture": "bracket",
    "openscad_code": "// Furniture L-Bracket for shelf support\n// Overall dimensions: 150mm x 150mm x 30mm\n// Wall thickness: 2mm throughout\n// Designed for 3D printing without supports\n\n// Main parameters\nbracket_size = 150;\nbracket_thickness = 30;\nwall_thickness = 2;\nfillet_radius = 5;\nmount_hole_diameter = 5;\nmount_hole_inset = 15;\n\n// Create the main L-shaped bracket body\nmodule bracket_body() {\n    difference() {\n        // Main L-shape solid\n        union() {\n            // Vertical arm\n            translate([0, 0, 0])\n                cube([bracket_thickness, bracket_size, bracket_size]);\n            \n            // Horizontal arm\n            translate([0, 0, 0])\n                cube([bracket_size, bracket_thickness, bracket_size]);\n        }\n        \n        // Hollow out the interior to create 2mm walls\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([bracket_size - wall_thickness, bracket_size - wall_thickness, bracket_size - wall_thickness]);\n        \n        // Remove excess from horizontal arm\n        translate([bracket_thickness, bracket_thickness, wall_thickness])\n            cube([bracket_size - bracket_thickness, bracket_size - wall_thickness, bracket_size - wall_thickness]);\n        \n        // Remove excess from vertical arm\n        translate([wall_thickness, bracket_thickness, wall_thickness])\n            cube([bracket_thickness - wall_thickness, bracket_size - wall_thickness, bracket_size - wall_thickness]);\n    }\n}\n\n// Add triangular gussets for reinforcement\nmodule gussets() {\n    // Parameters for gussets\n    gusset_size = 40;\n    gusset_thickness = bracket_thickness - 2 * wall_thickness;\n    \n    // Left gusset\n    translate([wall_thickness, wall_thickness, wall_thickness])\n        rotate([0, 45, 0])\n            scale([1, 0.707, 1])\n                cube([gusset_thickness, gusset_size, gusset_size]);\n    \n    // Right gusset\n    translate([bracket_thickness - wall_thickness, wall_thickness, wall_thickness])\n        rotate([0, -45, 0])\n            scale([1, 0.707, 1])\n                translate([-gusset_thickness, 0, 0])\n                    cube([gusset_thickness, gusset_size, gusset_size]);\n}\n\n// Create mounting holes\nmodule mounting_holes() {\n    // Vertical arm holes (4 holes in a square pattern)\n    for(x = [mount_hole_inset, bracket_thickness - mount_hole_inset]) {\n        for(y = [mount_hole_inset, bracket_size - mount_hole_inset]) {\n            translate([x, y, 0])\n                cylinder(h = bracket_thickness + 1, d = mount_hole_diameter, $fn = 16);\n        }\n    }\n    \n    // Horizontal arm holes (2 holes)\n    for(x = [mount_hole_inset, bracket_size - mount_hole_inset]) {\n        translate([x, mount_hole_inset, bracket_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h = bracket_thickness + 1, d = mount_hole_diameter, $fn = 16);\n    }\n}\n\n// Add chamfers to edges for better appearance and printability\nmodule chamfers() {\n    // Top edge chamfers\n    translate([0, 0, bracket_size])\n        cube([bracket_thickness, bracket_size, wall_thickness]);\n    \n    translate([0, 0, bracket_size])\n        cube([bracket_size, bracket_thickness, wall_thickness]);\n    \n    // Front edge chamfers\n    translate([0, 0, 0])\n        cube([bracket_size, wall_thickness, bracket_size]);\n    \n    // Side edge chamfers\n    translate([0, 0, 0])\n        cube([wall_thickness, bracket_size, bracket_size]);\n}\n\n// Create shelf support ridges\nmodule support_ridges() {\n    // Ridge parameters\n    ridge_height = 3;\n    ridge_width = 2;\n    \n    // Horizontal ridges on vertical arm\n    for(z = [40, 80, 120]) {\n        translate([wall_thickness, wall_thickness, z])\n            cube([ridge_width, bracket_size - 2 * wall_thickness, ridge_height]);\n    }\n    \n    // Vertical ridges on horizontal arm\n    for(x = [40, 80, 120]) {\n        translate([x, wall_thickness, wall_thickness])\n            cube([ridge_width, ridge_width, bracket_size - 2 * wall_thickness]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Basic bracket structure\n    bracket_body();\n    \n    // Reinforcement elements\n    gussets();\n    \n    // Support features\n    support_ridges();\n    \n    // Chamfers for better appearance\n    chamfers();\n    \n    // Mounting holes (subtract from model)\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "furniture": "finial",
    "openscad_code": "// Realistic Furniture Finial - 3D Printable\n// Classic turned-wood style finial for bedposts or cabinet tops\n\n// Overall dimensions\nfinial_height = 120;\nbase_diameter = 30;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule finial_base() {\n    // Tapered base with mounting hole\n    difference() {\n        cylinder(h=15, d1=base_diameter, d2=base_diameter*0.9, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=17, d=base_diameter-wall*2, $fn=32);\n    }\n    \n    // Decorative ring detail\n    translate([0, 0, 15])\n        cylinder(h=3, d=base_diameter*1.1, $fn=32);\n}\n\nmodule turned_section(height, top_d, bottom_d, beads=0) {\n    // Creates a tapered turned section with optional beads\n    union() {\n        difference() {\n            cylinder(h=height, d1=bottom_d, d2=top_d, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=height+2, d1=bottom_d-wall*2, d2=top_d-wall*2, $fn=32);\n        }\n        \n        // Add decorative beads\n        if (beads > 0) {\n            for (i = [1:beads]) {\n                translate([0, 0, (height/(beads+1))*i])\n                    cylinder(h=2, d=bottom_d + (top_d-bottom_d)*(i/(beads+1)) + 3, $fn=32);\n            }\n        }\n    }\n}\n\nmodule acorn_top() {\n    // Classic acorn-shaped top\n    union() {\n        sphere(d=base_diameter*0.8, $fn=32);\n        \n        // Stem detail\n        translate([0, 0, base_diameter*0.3])\n            cylinder(h=8, d=base_diameter*0.3, $fn=16);\n    }\n}\n\nmodule mounting_plate() {\n    // Square mounting plate with screw holes\n    difference() {\n        translate([-base_diameter/2-5, -base_diameter/2-5, -5])\n            cube([base_diameter+10, base_diameter+10, 5]);\n        \n        // Central hole for post\n        translate([0, 0, -1])\n            cylinder(h=7, d=base_diameter*0.6, $fn=32);\n        \n        // Screw holes (4 corners)\n        for (x = [-1:1:1]) {\n            for (y = [-1:1:1]) {\n                if (abs(x) + abs(y) == 2) {\n                    translate([x*(base_diameter/2+2), y*(base_diameter/2+2), -1])\n                        cylinder(h=7, d=3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    mounting_plate();\n    \n    translate([0, 0, 5]) finial_base();\n    \n    // Main turned body\n    translate([0, 0, 20])\n        turned_section(25, base_diameter*0.7, base_diameter*0.9, beads=1);\n    \n    translate([0, 0, 45])\n        turned_section(30, base_diameter*0.5, base_diameter*0.7, beads=2);\n    \n    translate([0, 0, 75])\n        turned_section(25, base_diameter*0.3, base_diameter*0.5);\n    \n    // Acorn top\n    translate([0, 0, 100])\n        acorn_top();\n}\n\n// Optional support ribs for 3D printing\nmodule support_ribs() {\n    for (angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([base_diameter/2-1, -wall/2, 15])\n                cube([wall, wall, finial_height-15]);\n    }\n}\n\n// Uncomment for additional support during printing\n// support_ribs();",
    "renders": true
  },
  {
    "furniture": "capital",
    "openscad_code": "// Capital Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm width x 110mm depth x 140mm height\n\n// Module for rounded edges using hull\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size[0]-2*radius, size[1]-2*radius, size[2]]);\n        cylinder(r=radius, h=0.1);\n    }\n}\n\n// Chair back crossbars\nmodule back_crossbars() {\n    for(i = [-40, -20, 0, 20, 40]) {\n        translate([i, 0, 85])\n        rotate([90, 0, 0])\n        cylinder(h=15, d=8, $fn=16);\n    }\n}\n\n// Backrest posts\nmodule backrest_post(x) {\n    translate([x, -48, 0])\n    rounded_cube([12, 12, 140], 2);\n}\n\n// Leg with stretchers\nmodule chair_leg(x, y) {\n    // Main leg\n    translate([x, y, 0])\n    rounded_cube([12, 12, 75], 2);\n    \n    // Front stretcher\n    if(y == 45) {\n        translate([x, y-6, 30])\n        rotate([90, 0, 0])\n        cylinder(h=abs(x*2), d=8, $fn=16);\n    }\n    \n    // Side stretcher\n    if(x == 45) {\n        translate([x-6, y, 15])\n        rotate([90, 90, 0])\n        cylinder(h=abs(y*2), d=8, $fn=16);\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    // Main cushion\n    translate([0, 0, 75])\n    rounded_cube([110, 110, 25], 8);\n    \n    // Cushion tufts\n    for(x = [-35, -12, 12, 35]) {\n        for(y = [-35, -12, 12, 35]) {\n            translate([x, y, 99.5])\n            cylinder(h=1, d=12, $fn=24);\n        }\n    }\n}\n\n// Backrest panel\nmodule backrest_panel() {\n    // Main panel\n    translate([0, -48, 125])\n    rotate([10, 0, 0])\n    rounded_cube([110, 12, 70], 4);\n    \n    // Decorative top rail\n    translate([0, -48, 160])\n    rotate([10, 0, 0])\n    rounded_cube([120, 15, 15], 5);\n}\n\n// Main chair assembly\nunion() {\n    // Seat\n    seat_cushion();\n    \n    // Back assembly\n    union() {\n        backrest_panel();\n        backrest_post(-40);\n        backrest_post(40);\n        back_crossbars();\n    }\n    \n    // Legs\n    chair_leg(-45, 45);\n    chair_leg(45, 45);\n    chair_leg(-45, -45);\n    chair_leg(45, -45);\n}",
    "renders": true
  },
  {
    "furniture": "pilaster",
    "openscad_code": "// Realistic Pilaster Furniture Element\n// Medium complexity - 3D printable decorative pilaster with furniture-style details\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\npilaster_height = 120;\npilaster_width = 40;\npilaster_depth = 30;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main base block\n        translate([0, 0, pilaster_height * 0.05])\n            cube([pilaster_width * 1.2, pilaster_depth * 1.2, pilaster_height * 0.1], center=true);\n        \n        // Hollow center\n        translate([0, 0, pilaster_height * 0.05])\n            cube([pilaster_width * 1.2 - wall_thickness*2, pilaster_depth * 1.2 - wall_thickness*2, pilaster_height * 0.1 + 1], center=true);\n    }\n}\n\n// Shaft module with fluted details\nmodule shaft() {\n    // Main shaft body\n    difference() {\n        translate([0, 0, pilaster_height * 0.45])\n            cube([pilaster_width, pilaster_depth, pilaster_height * 0.7], center=true);\n        \n        // Hollow interior\n        translate([0, 0, pilaster_height * 0.45])\n            cube([pilaster_width - wall_thickness*2, pilaster_depth - wall_thickness*2, pilaster_height * 0.7 + 1], center=true);\n    }\n    \n    // Fluting details - vertical grooves\n    for (i = [-1:1]) {\n        translate([i * 8, 0, pilaster_height * 0.45])\n            difference() {\n                cube([2, pilaster_depth + 0.1, pilaster_height * 0.7], center=true);\n                translate([0, 0, -1])\n                    cube([2.5, pilaster_depth + 0.5, pilaster_height * 0.7 + 2], center=true);\n            }\n    }\n}\n\n// Capital module with furniture-style molding\nmodule capital() {\n    // Lower torus molding\n    translate([0, 0, pilaster_height * 0.85])\n    difference() {\n        cylinder(h=6, r1=pilaster_width/2 + 4, r2=pilaster_width/2 + 4, center=true);\n        cylinder(h=7, r1=pilaster_width/2 + 2, r2=pilaster_width/2 + 2, center=true);\n    }\n    \n    // Main capital block\n    translate([0, 0, pilaster_height * 0.9])\n    difference() {\n        cube([pilaster_width + 6, pilaster_depth + 6, 8], center=true);\n        cube([pilaster_width + 2, pilaster_depth + 2, 9], center=true);\n    }\n    \n    // Top abacus\n    translate([0, 0, pilaster_height * 0.95])\n    difference() {\n        cube([pilaster_width + 10, pilaster_depth + 10, 4], center=true);\n        cube([pilaster_width + 6, pilaster_depth + 6, 5], center=true);\n    }\n}\n\n// Furniture-style joint details\nmodule joints() {\n    // Dowel pins at corners\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (pilaster_width/2 - 3), y * (pilaster_depth/2 - 3), pilaster_height * 0.3])\n                cylinder(h=6, r=1.5, center=true);\n            translate([x * (pilaster_width/2 - 3), y * (pilaster_depth/2 - 3), pilaster_height * 0.6])\n                cylinder(h=6, r=1.5, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    shaft();\n    capital();\n    joints();\n}",
    "renders": true
  },
  {
    "furniture": "column",
    "openscad_code": "// Column Furniture Item - Realistic Style\n// A decorative column suitable as a standalone furniture piece\n// Dimensions: 40mm base, 40mm top, 120mm height\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main module\nmodule column() {\n    // Base pedestal with beveled edges\n    difference() {\n        cylinder(h = 8, d1 = 40, d2 = 38);  // Tapered base\n        translate([0, 0, 6])\n            cylinder(h = 3, d1 = 36, d2 = 34);  // Bevel cut\n    }\n    \n    // Column shaft with fluting\n    translate([0, 0, 8]) {\n        difference() {\n            cylinder(h = 90, d = 32);  // Main shaft\n            \n            // Create fluting effect with 8 grooves\n            for (i = [0:7]) {\n                rotate([0, 0, i * 45])\n                    translate([16, 0, 0])\n                        cube([2, 2, 90], center = true);\n            }\n        }\n    }\n    \n    // Capital (top decorative element)\n    translate([0, 0, 98]) {\n        // Lower torus molding\n        difference() {\n            cylinder(h = 8, d = 36);\n            cylinder(h = 8, d = 30);\n        }\n        \n        // Square abacus (top plate)\n        translate([0, 0, 8])\n            cube([40, 40, 6], center = true);\n    }\n    \n    // Structural reinforcement rings\n    translate([0, 0, 35])\n        cylinder(h = 4, d = 34);\n    \n    translate([0, 0, 65])\n        cylinder(h = 4, d = 34);\n    \n    // Furniture joints - hidden dowel connections\n    // Bottom joint recess\n    translate([0, 0, 0])\n        cylinder(h = 10, d = 6);\n    \n    // Top joint recess  \n    translate([0, 0, 114])\n        cylinder(h = 10, d = 6);\n    \n    // Decorative rings for furniture aesthetic\n    module decorative_ring(height, diameter) {\n        difference() {\n            cylinder(h = height, d = diameter + 2);\n            cylinder(h = height + 0.1, d = diameter);\n        }\n    }\n    \n    translate([0, 0, 50])\n        decorative_ring(3, 33);\n    \n    translate([0, 0, 20])\n        decorative_ring(2, 31);\n    \n    translate([0, 0, 80])\n        decorative_ring(2, 31);\n}\n\n// Generate the column\ncolumn();",
    "renders": true
  },
  {
    "furniture": "baluster",
    "openscad_code": "// Furniture baluster for chair/stool\n// Overall height: 120 mm\n// Wall thickness: 2 mm for 3D printing\n\n// Main parameters\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\nheight = 120;\ntop_dia = 32;\nbottom_dia = 40;\nmid_dia = 24;\nshaft_dia = 16;\n\n// Create a complete furniture baluster\nmodule baluster() {\n    // Top mounting plate with screw holes\n    union() {\n        // Top plate\n        translate([0, 0, height - 8]) \n            cylinder(h = 8, d = top_dia + 8, $fn = 6);\n        \n        // Screw holes (2mm diameter for M2 screws)\n        for(i = [0:1]) {\n            rotate([0, 0, i * 180]) \n                translate([top_dia/2 + 2, 0, height - 4]) \n                    cylinder(h = 10, d = 2.5);\n        }\n    }\n    \n    // Upper tapered section\n    translate([0, 0, height - 25])\n        cylinder(h = 15, d1 = top_dia, d2 = mid_dia + 8);\n    \n    // Decorative ring\n    translate([0, 0, height - 34])\n        cylinder(h = 6, d = mid_dia + 12);\n    \n    // Main shaft with fluting\n    difference() {\n        // Main tapered shaft\n        translate([0, 0, height/2])\n            cylinder(h = height - 40, d1 = mid_dia + 8, d2 = mid_dia + 4);\n        \n        // Create flutes around shaft\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45 + 22.5]) \n                translate([mid_dia/2 + 3, 0, height/2 - (height - 40)/2])\n                    cube([3, 2, height - 40], center = true);\n        }\n    }\n    \n    // Lower bulb section\n    translate([0, 0, 15])\n        cylinder(h = 20, d1 = mid_dia + 4, d2 = bottom_dia);\n    \n    // Bottom mounting plate\n    difference() {\n        // Base plate\n        translate([0, 0, 0])\n            cylinder(h = 15, d = bottom_dia + 10, $fn = 6);\n        \n        // Weight reduction cavity (maintains 2mm walls)\n        translate([0, 0, 2])\n            cylinder(h = 11, d = bottom_dia + 6);\n        \n        // Screw holes for base attachment\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) \n                translate([(bottom_dia + 6)/2, 0, 7.5]) \n                    cylinder(h = 15, d = 3);\n        }\n    }\n    \n    // Structural reinforcement ribs\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            // Rib from base to shaft\n            translate([bottom_dia/2 - 2, 0, 7.5])\n                cube([4, 2, 15], center = true);\n            // Rib up shaft\n            translate([bottom_dia/2 - 4, 0, 25])\n                cube([2, 2, 30], center = true);\n        }\n    }\n}\n\n// Main assembly\nbaluster();",
    "renders": true
  },
  {
    "furniture": "newel",
    "openscad_code": "// Realistic Medium-Complexity Newel Post for Furniture\n// Overall height ~110 mm, footprint 25 mm square\n// Wall thickness 2 mm throughout for reliable 3D printing\n\n$fn = 36;\n\n// Main module\nmodule newel_post() {\n    // Base plinth – sits on floor or stair tread\n    difference() {\n        cube([25, 25, 8], center = true);\n        translate([0, 0, -1])\n            cube([21, 21, 10], center = true);  // 2 mm walls\n    }\n\n    // Bottom spindle section\n    translate([0, 0, 8 + 12])\n        difference() {\n            cylinder(h = 24, r1 = 9, r2 = 9);\n            cylinder(h = 26, r1 = 7, r2 = 7);\n        }\n\n    // Decorative collar ring\n    translate([0, 0, 8 + 24 + 2])\n        difference() {\n            cylinder(h = 5, r1 = 12, r2 = 12);\n            cylinder(h = 7, r1 = 10, r2 = 10);\n        }\n\n    // Middle square section (structural shaft)\n    translate([0, 0, 8 + 24 + 5 + 15])\n        difference() {\n            cube([18, 18, 30], center = true);\n            cube([14, 14, 32], center = true);\n        }\n\n    // Top turned detail – fluting simulation via small cylinders\n    translate([0, 0, 8 + 24 + 5 + 30 + 8])\n        difference() {\n            cylinder(h = 16, r1 = 10, r2 = 7);\n            cylinder(h = 18, r1 = 8, r2 = 5);\n        }\n\n    // Finial ball\n    translate([0, 0, 8 + 24 + 5 + 30 + 16 + 10])\n        difference() {\n            sphere(r = 9);\n            sphere(r = 7);\n        }\n\n    // Bolt hole – allows M4 threaded rod for furniture joint\n    translate([0, 0, -1])\n        cylinder(h = 120, r = 2.2, center = false);\n}\n\n// Add small chamfers to reduce layer-line visibility\nmodule chamfer_edge() {\n    for (i = [-1, 1]) {\n        translate([i * 11.5, 0, 8])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r1 = 2, r2 = 0);\n    }\n}\n\nunion() {\n    newel_post();\n    chamfer_edge();\n}",
    "renders": true
  },
  {
    "furniture": "corona",
    "openscad_code": "// Corona chair OpenSCAD model – medium-complexity, 3D-printable\n// Overall height ≈ 85 mm, seat height ≈ 44 mm, footprint ≈ 100 mm × 100 mm\n\nmodule leg(x,z) {\n    translate([x, 0, z])\n        rotate([90,0,0])\n            cylinder(h=42, d=9, $fn=16);\n}\n\nmodule backrest() {\n    // curved back shell\n    difference() {\n        translate([0, 15, 42])\n            scale([1, 0.4, 1.1])\n                rotate([90,0,0])\n                    cylinder(h=42, d=90, $fn=64);\n        translate([0, 15, 42])\n            scale([0.85, 0.35, 0.9])\n                rotate([90,0,0])\n                    cylinder(h=45, d=90, $fn=64);\n    }\n    // back frame ring\n    translate([0, 15, 42])\n        scale([1, 0.4, 1.1])\n            rotate([90,0,0])\n                cylinder(h=2.2, d=90, $fn=64);\n}\n\nmodule seat() {\n    // base cushion\n    translate([0, 0, 42])\n        scale([1, 1, 0.35])\n            rotate([90,0,0])\n                cylinder(h=6, d=75, $fn=64);\n    // cushion seam detail\n    translate([0, 0, 45])\n        scale([1, 1, 0.3])\n            rotate([90,0,0])\n                cylinder(h=1, d=70, $fn=64);\n}\n\nmodule stretcher() {\n    // front stretcher\n    translate([0, -30, 12])\n        rotate([90,0,0])\n            cylinder(h=70, d=6, $fn=16);\n    // rear stretcher\n    translate([0, 30, 12])\n        rotate([90,0,0])\n            cylinder(h=70, d=6, $fn=16);\n}\n\nunion() {\n    // four legs\n    leg(-35, 0);\n    leg(35, 0);\n    leg(-35, -35);\n    leg(35, -35);\n\n    // frame between legs under seat\n    stretcher();\n\n    // seat cushion\n    seat();\n\n    // backrest shell\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "frieze",
    "openscad_code": "// Frieze-style bench with decorative backrest and legs\n// Overall dimensions: 100mm wide x 40mm deep x 55mm tall\n\nmodule leg(width, depth, height) {\n    // Main leg post\n    difference() {\n        cube([width, depth, height], center=true);\n        // Chamfer edges\n        translate([0, 0, height/2 - 2])\n            cube([width-2, depth-2, 4], center=true);\n    }\n}\n\nmodule decorative_panel() {\n    // Arched frieze panel\n    union() {\n        // Base panel\n        cube([90, 4, 20]);\n        \n        // Decorative arches\n        for(x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n            translate([x, 2, 10])\n                scale([1, 1, 0.5])\n                    sphere(d=8);\n        }\n        \n        // Bottom molding\n        translate([0, 0, 0])\n            cube([90, 4, 2]);\n    }\n}\n\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        cube([96, 6, 30]);\n        \n        // Inner cutout for lighter weight\n        translate([2, -1, 2])\n            cube([92, 8, 26]);\n    }\n    \n    // Top rail detail\n    translate([0, 3, 28])\n        cube([96, 3, 4]);\n    \n    // Vertical slats\n    for(x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n        translate([x, 0, 15])\n            cube([3, 6, 20]);\n    }\n}\n\nmodule seat() {\n    // Seat base\n    difference() {\n        cube([100, 40, 4]);\n        \n        // Lightening holes\n        for(x = [-35, -15, 5, 25]) {\n            for(y = [-12, 0, 12]) {\n                translate([x, y, 2])\n                    cylinder(h=5, d=6, $fn=20);\n            }\n        }\n    }\n    \n    // Cushion layer\n    translate([0, 0, 3])\n        cube([98, 38, 4]);\n}\n\n// Main assembly\nunion() {\n    // Seat\n    translate([0, 0, 51])\n        seat();\n    \n    // Backrest\n    translate([0, 15, 36])\n        backrest();\n    \n    // Frieze panel\n    translate([0, 15, 15])\n        decorative_panel();\n    \n    // Front legs\n    translate([-40, -15, 25.5])\n        leg(6, 6, 49);\n    translate([40, -15, 25.5])\n        leg(6, 6, 49);\n    \n    // Back legs\n    translate([-40, 15, 25.5])\n        leg(6, 6, 49);\n    translate([40, 15, 25.5])\n        leg(6, 6, 49);\n    \n    // Side stretchers\n    translate([0, 0, 10])\n        cube([86, 30, 4]);\n    translate([0, 0, 25])\n        cube([86, 30, 4);\n}",
    "renders": true
  },
  {
    "furniture": "architrave",
    "openscad_code": "// Architrave furniture piece - decorative door/window frame\n// Medium complexity realistic style\n\n// Overall dimensions\narch_width = 100;\narch_height = 80;\narch_depth = 15;\nwall_thickness = 2;\n\n// Module for decorative corner block\nmodule corner_block(size) {\n    difference() {\n        // Main block\n        cube([size, size, arch_depth], center=true);\n        \n        // Decorative circular recess\n        translate([0, 0, arch_depth/2 - 0.1])\n            cylinder(h=wall_thickness+0.2, r=size/3, $fn=32);\n        \n        // Side decorative recesses\n        translate([size/4, 0, arch_depth/2 - 0.1])\n            cube([size/6, size/2, wall_thickness+0.2], center=true);\n        translate([-size/4, 0, arch_depth/2 - 0.1])\n            cube([size/6, size/2, wall_thickness+0.2], center=true);\n    }\n}\n\n// Module for fluted pilaster\nmodule pilaster(height, width) {\n    union() {\n        // Main pilaster body\n        cube([width, height, arch_depth]);\n        \n        // Base molding\n        translate([0, -2, 0])\n            cube([width, 4, arch_depth]);\n        \n        // Capital molding\n        translate([0, height-2, 0])\n            cube([width, 4, arch_depth]);\n        \n        // Fluting details\n        for(i = [-3:3]) {\n            translate([i * (width/7) + width/2, 3, arch_depth/2])\n                cube([width/8, height-6, wall_thickness]);\n        }\n    }\n}\n\n// Module for decorative molding\nmodule molding(length, height) {\n    union() {\n        // Main beam\n        cube([length, height, arch_depth]);\n        \n        // Top decorative edge\n        translate([0, -1, arch_depth-wall_thickness])\n            cube([length, height+2, wall_thickness]);\n        \n        // Bottom lip\n        translate([0, height, 0])\n            cube([length, 2, arch_depth]);\n    }\n}\n\n// Main architrave assembly\nunion() {\n    // Top horizontal beam with molding\n    translate([-arch_width/2, arch_height-10, 0])\n        molding(arch_width, 10);\n    \n    // Left vertical pilaster\n    translate([-arch_width/2, 0, 0])\n        pilaster(arch_height, 8);\n    \n    // Right vertical pilaster\n    translate([arch_width/2-8, 0, 0])\n        pilaster(arch_height, 8);\n    \n    // Decorative corner blocks\n    translate([-arch_width/2+4, arch_height-14, arch_depth/2])\n        corner_block(8);\n    translate([arch_width/2-4, arch_height-14, arch_depth/2])\n        corner_block(8);\n    \n    // Central decorative panel\n    translate([0, arch_height/2, arch_depth/2])\n        difference() {\n            cube([arch_width/2, arch_height/3, wall_thickness], center=true);\n            translate([0, 0, 0.1])\n                cube([arch_width/2-6, arch_height/3-6, wall_thickness+0.2], center=true);\n        }\n    \n    // Small rosette details on panel\n    for(i = [-1:1]) {\n        translate([i * 15, arch_height/2, arch_depth-wall_thickness/2])\n            cylinder(h=wall_thickness, r=2, $fn=16);\n    }\n}\n\n// Back mounting plate for stability\ntranslate([-arch_width/2-2, -2, -wall_thickness])\n    cube([arch_width+4, arch_height+4, wall_thickness]);",
    "renders": true
  },
  {
    "furniture": "dossal",
    "openscad_code": "// Dossal (high-back chair) - realistic style, medium complexity\n// Overall dimensions: 80mm W x 90mm D x 120mm H\n\n// Parameters\nwall_thickness = 2;\nseat_thickness = 4;\nback_height = 70;\nleg_height = 45;\nseat_width = 60;\nseat_depth = 55;\n\n// Leg profile module\nmodule leg_profile() {\n    difference() {\n        cube([8, 8, leg_height], center=true);\n        translate([0, 0, -leg_height/2 + 2])\n            cube([6, 6, leg_height - 3], center=true);\n    }\n}\n\n// Leg assembly\nmodule leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, leg_height/2])\n        leg_profile();\n}\n\n// Back slat module\nmodule back_slat(height, width) {\n    cube([width, 4, height], center=true);\n}\n\n// Backrest assembly\nmodule backrest() {\n    translate([0, -seat_depth/2 - 2, leg_height + back_height/2])\n        union() {\n            // Back frame\n            difference() {\n                cube([seat_width + 10, 6, back_height], center=true);\n                translate([0, 0, 0])\n                    cube([seat_width + 6, 10, back_height - 4], center=true);\n            }\n            \n            // Vertical slats\n            for(i = [-2:1:2]) {\n                translate([i * 12, 0, 0])\n                    back_slat(back_height - 8, 4);\n            }\n            \n            // Top rail\n            translate([0, 0, back_height/2 - 3])\n                cube([seat_width + 10, 8, 4], center=true);\n        }\n}\n\n// Seat assembly\nmodule seat() {\n    translate([0, 0, leg_height + seat_thickness/2])\n        difference() {\n            // Main seat\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n            \n            // Cushion indents\n            for(x = [-20:10:20]) {\n                for(y = [-15:10:15]) {\n                    translate([x, y, seat_thickness/2 - 1])\n                        cube([8, 8, 2], center=true);\n                }\n            }\n        }\n}\n\n// Stretcher bars\nmodule stretcher() {\n    // Front-back\n    translate([0, -seat_depth/2 + 10, leg_height/2])\n        cube([seat_width - 16, 4, 4], center=true);\n    translate([0, seat_depth/2 - 10, leg_height/2])\n        cube([seat_width - 16, 4, 4], center=true);\n    \n    // Side-side\n    translate([-seat_width/2 + 10, 0, leg_height/2])\n        cube([4, seat_depth - 16, 4], center=true);\n    translate([seat_width/2 - 10, 0, leg_height/2])\n        cube([4, seat_depth - 16, 4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Legs\n    leg(-seat_width/2 + 4, -seat_depth/2 + 4);\n    leg(seat_width/2 - 4, -seat_depth/2 + 4);\n    leg(-seat_width/2 + 4, seat_depth/2 - 4);\n    leg(seat_width/2 - 4, seat_depth/2 - 4);\n    \n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Stretchers\n    stretcher();\n    \n    // Armrest supports\n    translate([-seat_width/2 - 2, 0, leg_height + 20])\n        cube([4, 4, 40], center=true);\n    translate([seat_width/2 + 2, 0, leg_height + 20])\n        cube([4, 4, 40], center=true);\n    \n    // Armrests\n    translate([-seat_width/2 - 8, -seat_depth/4, leg_height + 40])\n        cube([12, seat_depth/2, 4], center=true);\n    translate([seat_width/2 + 8, -seat_depth/4, leg_height + 40])\n        cube([12, seat_depth/2, 4], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "reredos",
    "openscad_code": "// Realistic Reredos (Altar Screen) - Medium Complexity\n// Overall dimensions: 120mm wide x 15mm deep x 100mm high\n\n$fn = 32;\n\n// Main parameters\nwidth = 120;\ndepth = 15;\nheight = 100;\nwall_thickness = 2;\n\nmodule base_platform() {\n    // Main base platform\n    translate([0, 0, 0])\n        cube([width, depth, 8], center=true);\n    \n    // Decorative base molding\n    translate([0, 0, 4])\n        cube([width + 4, depth + 2, 2], center=true);\n    \n    // Corner feet\n    for(x = [-width/2 + 6, width/2 - 6])\n        translate([x, 0, -2])\n            cube([8, depth + 4, 4], center=true);\n}\n\nmodule central_panel() {\n    // Main central panel\n    translate([0, 0, 54])\n        cube([width - 20, wall_thickness, height - 60], center=true);\n    \n    // Gothic arch top\n    translate([0, 0, height - 6])\n        rotate([90, 0, 0])\n            cylinder(h=width/2 - 10, d1=width - 20, d2=0, center=true);\n    \n    // Panel frame\n    frame_width = width - 20;\n    frame_height = height - 60;\n    \n    // Left frame\n    translate([-frame_width/2 - wall_thickness/2, 0, 54])\n        cube([wall_thickness, wall_thickness + 2, frame_height], center=true);\n    \n    // Right frame\n    translate([frame_width/2 + wall_thickness/2, 0, 54])\n        cube([wall_thickness, wall_thickness + 2, frame_height], center=true);\n    \n    // Top frame\n    translate([0, 0, height - 30])\n        cube([frame_width + wall_thickness, wall_thickness + 2, wall_thickness], center=true);\n}\n\nmodule side_panels() {\n    // Left side panel\n    translate([-width/2 + 15, 0, 40])\n        cube([20, wall_thickness, 60], center=true);\n    \n    // Right side panel\n    translate([width/2 - 15, 0, 40])\n        cube([20, wall_thickness, 60], center=true);\n    \n    // Side finials\n    for(x = [-width/2 + 15, width/2 - 15])\n        translate([x, 0, 70])\n            cylinder(h=10, d=8, center=true);\n}\n\nmodule tracery_details() {\n    // Central quatrefoil\n    translate([0, wall_thickness/2 + 0.5, height/2])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness, d=12, center=true);\n    \n    // Side quatrefoils\n    for(x = [-width/4, width/4])\n        translate([x, wall_thickness/2 + 0.5, height/2])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness, d=8, center=true);\n    \n    // Vertical mullions\n    for(x = [-width/6, 0, width/6])\n        translate([x, wall_thickness/2 + 0.5, height/2])\n            cube([wall_thickness, wall_thickness, height - 70], center=true);\n}\n\nmodule cornice() {\n    // Main cornice\n    translate([0, 0, height - 2])\n        cube([width + 10, depth + 4, 4], center=true);\n    \n    // Decorative top molding\n    translate([0, 0, height + 2])\n        cube([width + 14, depth + 6, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    base_platform();\n    central_panel();\n    side_panels();\n    tracery_details();\n    cornice();\n}",
    "renders": true
  },
  {
    "furniture": "parapet",
    "openscad_code": "// Parapet Furniture Item (Window Seat with Storage)\n// Overall dimensions: 120mm wide × 50mm deep × 80mm high\n\n// Module for rounded edges\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (dx = [0, size.x - radius*2])\n            for (dy = [0, size.y - radius*2])\n                for (dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r=radius, $fn=16);\n    }\n}\n\n// Main body with storage compartment\nmodule parapet_body() {\n    difference() {\n        // Outer shell - 2mm walls\n        rounded_cube([120, 50, 80], 3);\n        \n        // Hollow interior for storage\n        translate([2, 2, 2])\n            rounded_cube([116, 46, 78], 2);\n        \n        // Front opening for storage access\n        translate([10, -1, 10])\n            cube([100, 52, 60]);\n    }\n}\n\n// Cushion top with realistic padding appearance\nmodule cushion() {\n    // Base cushion\n    translate([5, 5, 80])\n        rounded_cube([110, 40, 12], 5);\n    \n    // Cushion seam details\n    for (x = [15:25:105])\n        translate([x, 5, 80.5])\n            cube([2, 40, 0.5]);\n    \n    for (y = [10:10:40])\n        translate([5, y, 80.5])\n            cube([110, 1, 0.5]);\n}\n\n// Backrest panel\nmodule backrest() {\n    // Main back panel\n    translate([5, 45, 30])\n        rounded_cube([110, 5, 50], 3);\n    \n    // Decorative slats\n    for (i = [0:4]) {\n        translate([10 + i*25, 45.5, 35])\n            rounded_cube([15, 1, 40], 2);\n    }\n}\n\n// Support legs with realistic proportions\nmodule legs() {\n    // Four corner legs\n    positions = [[5, 5], [105, 5], [5, 35], [105, 35]];\n    \n    for (pos = positions) {\n        // Main leg post\n        translate([pos[0], pos[1], 0])\n            cylinder(h=80, r1=3, r2=3, $fn=12);\n        \n        // Decorative foot detail\n        translate([pos[0], pos[1], 0])\n            cylinder(h=5, r1=4, r2=3, $fn=12);\n        \n        // Top leg cap\n        translate([pos[0], pos[1], 80])\n            cylinder(h=3, r1=3, r2=4, $fn=12);\n    }\n}\n\n// Hinge detail for storage lid\nmodule hinges() {\n    translate([10, 2, 75])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=2, $fn=16);\n    translate([110, 2, 75])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=2, $fn=16);\n}\n\n// Assemble the complete parapet furniture piece\nunion() {\n    // Structure\n    legs();\n    parapet_body();\n    \n    // Furniture elements\n    backrest();\n    cushion();\n    hinges();\n}",
    "renders": true
  },
  {
    "furniture": "transom",
    "openscad_code": "// OpenSCAD Transom Furniture (window-top cabinet)\n// Overall dimensions: 120 mm wide × 40 mm deep × 90 mm high\n// Wall thickness: 2 mm throughout for 3D-printability\n\n$fa = 1;\n$fs = 1;\n\nmodule transom() {\n    // Main carcass shell\n    difference() {\n        // Outer box\n        cube([120, 40, 90], center = true);\n        // Hollow interior\n        translate([0, 0, 2])\n            cube([116, 36, 86], center = true);\n    }\n\n    // Fixed middle shelf\n    translate([0, 0, 15])\n        cube([116, 36, 2], center = true);\n\n    // Bottom rail (skirting)\n    translate([0, 0, -43])\n        cube([120, 6, 6], center = true);\n\n    // Top rail (cornice profile)\n    difference() {\n        // Full cornice block\n        translate([0, 0, 45])\n            cube([124, 44, 10], center = true);\n        // Slight recess on front face\n        translate([0, -17, 45])\n            cube([120, 2, 10], center = true);\n    }\n\n    // Panel doors (two)\n    for (x = [-29, 29]) {\n        translate([x, -17, 15])\n            panel_door();\n    }\n\n    // Back panel (nailed on)\n    translate([0, 20, 0])\n        cube([116, 2, 86], center = true);\n\n    // Minimal feet pads (printable support)\n    for (x = [-55, 55])\n    for (y = [-15, 15])\n        translate([x, y, -45])\n            cylinder(h = 2, r = 3, $fn = 16);\n}\n\nmodule panel_door() {\n    difference() {\n        // Door slab\n        cube([56, 2, 68]);\n\n        // Recessed panel\n        translate([0, -1, 0])\n            cube([48, 2.1, 60], center = true);\n\n        // Handle hole\n        translate([20, -2, 25])\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = 2, $fn = 16);\n    }\n}\n\n// Assemble the transom\ntransom();",
    "renders": true
  },
  {
    "furniture": "fanlight",
    "openscad_code": "// Fanlight Furniture – realistic style, medium complexity\n// Overall size: 120 mm (W) × 40 mm (D) × 80 mm (H)\n\n// Wall thickness for 3D-printability\nwall = 2;\n\n// Main body module\nmodule fanlight_body() {\n    // Outer frame\n    difference() {\n        cube([120, 40, 80], center = true);\n        translate([0, 0, 0])\n            cube([116, 36, 76], center = true);\n    }\n}\n\n// Decorative top arch\nmodule arch() {\n    difference() {\n        // Solid arch\n        translate([0, 0, 40])\n            rotate([0, 90, 0])\n                cylinder(h = 120, r1 = 40, r2 = 40, center = true);\n        // Hollow inside\n        translate([0, 0, 40])\n            rotate([0, 90, 0])\n                cylinder(h = 122, r1 = 38, r2 = 38, center = true);\n    }\n    // End caps\n    translate([0, 20, 40])\n        rotate([90, 0, 0])\n            cylinder(h = wall, r1 = 40, r2 = 40);\n    translate([0, -20, 40])\n        rotate([90, 0, 0])\n            cylinder(h = wall, r1 = 40, r2 = 40);\n}\n\n// Louver blades\nmodule louvers() {\n    for (z = [-30:10:30]) {\n        translate([0, 0, z])\n            rotate([0, 15, 0])\n                cube([118, wall, 6], center = true);\n    }\n}\n\n// Support legs / base feet\nmodule feet() {\n    foot_positions = [[-50, -15, -40], [50, -15, -40], [-50, 15, -40], [50, 15, -40]];\n    for (pos = foot_positions) {\n        translate(pos)\n            cylinder(h = 8, r1 = 4, r2 = 4, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    fanlight_body();\n    arch();\n    louvers();\n    feet();\n}",
    "renders": true
  },
  {
    "furniture": "clerestory",
    "openscad_code": "// OpenSCAD Clerestory Bookshelf – medium-complexity, 3D-printable\n// Overall footprint ≈ 110 mm × 40 mm × 140 mm\n\n// ---------- Parameters ----------\nwall = 2;               // uniform printable wall thickness\nside_h = 140;           // total height\nside_d = 40;            // depth\nbase_w = 110;           // lower footprint\ntop_w = 55;             // clerestory (upper) footprint\nshelf_d = 36;           // internal shelf depth (side_d - 2*wall)\nshelf_t = wall;         // shelf thickness\nleg_h = 15;             // plinth height\ngap = 4;                // vertical gap between shelves\nshelf_clear = 28;       // internal shelf height\nback_t = wall;          // back-panel thickness\n\n// ---------- Modules ----------\nmodule side_profile() {\n    // trapezoid outline for side walls\n    linear_extrude(height = side_d, center = true)\n        polygon([[0,0], [base_w,0], [top_w,side_h], [0,side_h]]);\n}\n\nmodule left_side() {\n    difference() {\n        side_profile();\n        // hollow out\n        translate([wall, wall, 0])\n            scale([1-wall/base_w*2, 1-wall/side_h*2, 1])\n            side_profile();\n    }\n}\n\nmodule right_side() {\n    mirror([1,0,0]) left_side();\n}\n\nmodule back_panel() {\n    // rear panel with taper matching the sides\n    difference() {\n        polyhedron(\n            points=[\n                [0,0,0], [base_w,0,0], [top_w,0,side_h], [0,0,side_h], // bottom\n                [0,-back_t,0], [base_w,-back_t,0],\n                [top_w,-back_t,side_h], [0,-back_t,side_h]             // top\n            ],\n            faces=[\n                [0,1,5,4], [1,2,6,5], [2,3,7,6], [3,0,4,7], // sides\n                [0,3,2,1], [4,5,6,7]                       // front & back\n            ]\n        );\n        // lightening cut\n        translate([wall, 0, wall])\n            cube([base_w-wall*2, back_t, side_h-wall*2]);\n    }\n}\n\nmodule shelf(y, w) {\n    difference() {\n        cube([w, shelf_t, shelf_d], center = false);\n        translate([wall, wall, wall])\n            cube([w-wall*2, shelf_t, shelf_d-wall*2]);\n    }\n}\n\nmodule shelves() {\n    y_step = shelf_clear + shelf_t;\n    shelf_widths = [base_w-wall*2, base_w*0.9-wall*2, base_w*0.8-wall*2, top_w-wall*2];\n    for(i=[0:len(shelf_widths)-1]) {\n        translate([wall, leg_h + shelf_t + i*y_step, wall])\n            shelf(0, shelf_widths[i], shelf_d);\n    }\n}\n\nmodule plinth() {\n    difference() {\n        cube([base_w, leg_h, side_d], center = false);\n        translate([wall, wall, wall])\n            cube([base_w-wall*2, leg_h-wall, side_d-wall*2]);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    // Lower frame\n    plinth();\n    \n    // Side walls\n    translate([0, side_d/2, 0]) rotate([0,90,0]) left_side();\n    translate([base_w, side_d/2, 0]) rotate([0,90,0]) right_side();\n    \n    // Back\n    translate([0,0,0]) back_panel();\n    \n    // Shelves\n    shelves();\n}",
    "renders": true
  },
  {
    "furniture": "lunette",
    "openscad_code": "// Lunette-style cabinet door in realistic style\n// Overall size: 120mm width x 30mm depth x 200mm height\n\nmodule lunette_arch(width, height, depth) {\n    // Create the outer frame\n    difference() {\n        // Main door panel\n        cube([width, depth, height], center=true);\n        \n        // Inner cutout for arch\n        translate([0, depth/2 + 0.1, 0])\n            scale([0.8, 1, 0.9])\n            cylinder(h=depth+1, r=height/2, center=true, $fn=80);\n    }\n    \n    // Add decorative top arch\n    translate([0, depth/2, height/4])\n        scale([0.82, 1, 0.45])\n        cylinder(h=depth, r=height/2, center=true, $fn=80);\n}\n\nmodule door_frame(width, height, depth) {\n    // Vertical stiles\n    for(x = [-width/2 + 5, width/2 - 5]) {\n        translate([x, 0, 0])\n            cube([10, depth, height], center=true);\n    }\n    \n    // Top rail with lunette\n    translate([0, 0, height/2 - 5])\n        cube([width - 10, depth, 10], center=true);\n    \n    // Bottom rail\n    translate([0, 0, -height/2 + 5])\n        cube([width - 10, depth, 10], center=true);\n}\n\nmodule panel_detail(width, height, depth) {\n    // Raised panel center\n    translate([0, -depth/2 + 2, 0])\n        cube([width - 30, 2, height - 30], center=true);\n    \n    // Beveled edges\n    for(edge = [-1, 1]) {\n        // Left and right bevels\n        translate([edge * (width/2 - 15), -depth/2 + 1, 0])\n            rotate([0, 45, 0])\n            cube([2, 2*sqrt(2), height - 30], center=true);\n        \n        // Top and bottom bevels\n        translate([0, -depth/2 + 1, edge * (height/2 - 15)])\n            rotate([45, 0, 0])\n            cube([width - 30, 2*sqrt(2), 2], center=true);\n    }\n}\n\nmodule hinges(count=2) {\n    // Decorative hinges\n    for(i = [1:count]) {\n        z_pos = -60 + i * 120/(count+1);\n        translate([65, 0, z_pos])\n            rotate([0, 90, 0])\n            cylinder(h=8, r=4, center=true, $fn=20);\n        \n        // Hinge plates\n        translate([61, 0, z_pos])\n            cube([8, 2, 10], center=true);\n    }\n}\n\nmodule handle() {\n    // Door pull handle\n    translate([0, -17, 50])\n    rotate([90, 0, 0])\n    difference() {\n        // Handle grip\n        cylinder(h=40, r=6, center=true, $fn=20);\n        \n        // Grip hole\n        cylinder(h=41, r=3, center=true, $fn=20);\n    }\n    \n    // Handle plates\n    translate([0, -15, 70])\n        cube([20, 4, 4], center=true);\n    translate([0, -15, 30])\n        cube([20, 4, 4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Door structure\n    difference() {\n        // Outer door\n        door_frame(120, 200, 30);\n        \n        // Inner panel area\n        translate([0, -15, 0])\n            cube([100, 30, 160], center=true);\n    }\n    \n    // Lunette arch detail\n    lunette_arch(100, 160, 28);\n    \n    // Panel details\n    panel_detail(100, 160, 28);\n    \n    // Hinges\n    hinges(2);\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "furniture": "oculus",
    "openscad_code": "// Oculus VR Headset Stand\n// Dimensions: 120mm width × 120mm depth × 150mm height\n// Wall thickness: 2mm\n\n$fn = 32;\n\nmodule base() {\n    // Main base plate\n    difference() {\n        cube([120, 120, 8], center = true);\n        \n        // Weight reduction cutouts\n        for(x = [-40, 0, 40]) {\n            for(y = [-40, 0, 40]) {\n                translate([x, y, 3])\n                    cube([25, 25, 6], center = true);\n            }\n        }\n    }\n}\n\nmodule support_column() {\n    // Central support column with cable management\n    difference() {\n        cylinder(h = 120, d = 30, center = false);\n        \n        // Cable channel\n        translate([0, -15, 0])\n            cube([30, 30, 120], center = true);\n            \n        // Cable exit hole\n        translate([0, -15, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 10, center = true);\n    }\n}\n\nmodule headset_mount() {\n    // Curved support for headset front\n    translate([0, 0, 120])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 80, d = 60, center = true);\n        \n        // Hollow center\n        cylinder(h = 82, d = 56, center = true);\n        \n        // Bottom cut for headset cable\n        translate([0, 0, -30])\n            cube([100, 100, 30], center = true);\n    }\n}\n\nmodule controller_cradles() {\n    // Left controller cradle\n    translate([-45, 45, 80])\n    rotate([0, 15, 0])\n    difference() {\n        // Main cradle body\n        cube([20, 20, 60], center = true);\n        \n        // Handle slot\n        translate([0, 0, 10])\n            rotate([0, 15, 0])\n                cylinder(h = 50, d = 18, center = true);\n                \n        // Ring recess\n        translate([0, 0, -25])\n            sphere(d = 25);\n            \n        // Cable notch\n        translate([0, 10, 15])\n            cube([8, 20, 8], center = true);\n    }\n    \n    // Right controller cradle (mirrored)\n    translate([45, 45, 80])\n    rotate([0, -15, 0])\n    mirror([1, 0, 0])\n    difference() {\n        cube([20, 20, 60], center = true);\n        translate([0, 0, 10])\n            rotate([0, 15, 0])\n                cylinder(h = 50, d = 18, center = true);\n        translate([0, 0, -25])\n            sphere(d = 25);\n        translate([0, 10, 15])\n            cube([8, 20, 8], center = true);\n    }\n}\n\nmodule rubber_feet() {\n    // Anti-slip feet\n    for(x = [-50, 50])\n        for(y = [-50, 50])\n            translate([x, y, -4])\n                cylinder(h = 4, d = 8, center = true);\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, 4])\n        support_column();\n    headset_mount();\n    controller_cradles();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "furniture": "rosewindow",
    "openscad_code": "// Rosewindow Coffee Table\n// Realistic style with medium complexity\n// Overall dimensions: 120mm diameter x 45mm height\n\n// Parameters\ntable_diameter = 120;\ntable_height = 45;\nleg_height = 40;\nleg_thickness = 8;\ntop_thickness = 5;\nwall_thickness = 2;\npetal_count = 12;\ninner_radius = 25;\nmiddle_radius = 45;\nouter_radius = 55;\n\n// Main table module\nmodule rosewindow_table() {\n    // Table top with rosewindow design\n    union() {\n        // Solid top base\n        difference() {\n            cylinder(h=top_thickness, d=table_diameter, $fn=100);\n            \n            // Central hole for design\n            cylinder(h=top_thickness+1, d=inner_radius*2, $fn=100);\n            \n            // Rose petal cutouts\n            for (i = [0:petal_count-1]) {\n                rotate([0, 0, i*360/petal_count]) {\n                    translate([0, (middle_radius+outer_radius)/2, 0]) {\n                        scale([1, 0.6, 1]) {\n                            cylinder(h=top_thickness+1, d=outer_radius-middle_radius, $fn=20);\n                        }\n                    }\n                }\n            }\n            \n            // Inner decorative ring\n            difference() {\n                cylinder(h=top_thickness+1, d=middle_radius*2-4, $fn=100);\n                cylinder(h=top_thickness+1, d=middle_radius*2-8, $fn=100);\n            }\n        }\n        \n        // Raised outer rim\n        difference() {\n            cylinder(h=top_thickness+2, d=table_diameter, $fn=100);\n            cylinder(h=top_thickness+2, d=table_diameter-4, $fn=100);\n        }\n        \n        // Central rose detail\n        union() {\n            // Inner rose core\n            cylinder(h=top_thickness+1, d=inner_radius*2-2, $fn=100);\n            \n            // Small decorative spheres around center\n            for (i = [0:petal_count-1]) {\n                rotate([0, 0, i*360/petal_count]) {\n                    translate([(inner_radius+middle_radius)/2, 0, top_thickness/2]) {\n                        sphere(d=3, $fn=20);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Support legs with rose motif\n    for (i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([table_diameter/2-leg_thickness, 0, -leg_height/2]) {\n                union() {\n                    // Main leg\n                    cube([leg_thickness, leg_thickness, leg_height], center=true);\n                    \n                    // Decorative foot\n                    translate([0, 0, -leg_height/2-2]) {\n                        cylinder(h=4, d=leg_thickness+2, $fn=20);\n                    }\n                    \n                    // Rose detail on leg\n                    translate([0, leg_thickness/2+1, 0]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=leg_thickness-2, d=6, $fn=20);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Lower support ring\n    translate([0, 0, -leg_height+2]) {\n        difference() {\n            cylinder(h=wall_thickness, d=table_diameter-20, $fn=100);\n            cylinder(h=wall_thickness, d=table_diameter-30, $fn=100);\n        }\n    }\n}\n\n// Generate the table\nrosewindow_table();",
    "renders": true
  },
  {
    "furniture": "quoin",
    "openscad_code": "// Quoin - a corner cabinet with open shelving and drawer\n// Overall dimensions: 120mm wide x 120mm deep x 180mm tall\n\n// Wall thickness\nwall = 2;\n\n// Main carcass\nmodule carcass() {\n    difference() {\n        // Outer shell\n        union() {\n            // Left side panel\n            translate([0, 0, 0])\n                cube([wall, 120, 180]);\n            \n            // Back panel\n            translate([0, 0, 0])\n                cube([120, wall, 180]);\n            \n            // Right side panel (angled)\n            translate([120-wall, 0, 0])\n                rotate([0, 0, 45])\n                cube([wall, 120, 180]);\n            \n            // Top\n            translate([0, 0, 180-wall])\n                cube([120, 120, wall]);\n        }\n        \n        // Inner cavity\n        translate([wall, wall, wall])\n            cube([120-2*wall, 120-2*wall, 180-2*wall]);\n    }\n}\n\n// Shelves\nmodule shelves() {\n    for (i = [0:2]) {\n        translate([wall, wall, 40 + i*50])\n            cube([120-2*wall, 120-2*wall, wall]);\n    }\n}\n\n// Drawer\nmodule drawer() {\n    // Drawer box\n    translate([wall+5, wall+5, 20])\n        cube([110-2*wall-10, 110-2*wall-10, 15]);\n    \n    // Drawer front\n    translate([wall+5, wall-1, 20])\n        cube([110-2*wall-10, wall+2, 15]);\n    \n    // Handle\n    translate([60, wall-3, 27.5])\n        cylinder(h=5, r=3, $fn=16);\n}\n\n// Base molding\nmodule base() {\n    // Front molding\n    translate([0, 0, 0])\n        cube([120, 5, 5]);\n    \n    // Left molding\n    translate([0, 0, 0])\n        cube([5, 120, 5]);\n    \n    // Right molding (angled)\n    translate([115, 0, 0])\n        rotate([0, 0, 45])\n        cube([5, 120, 5]);\n}\n\n// Assembly\nunion() {\n    carcass();\n    shelves();\n    drawer();\n    base();\n}",
    "renders": true
  },
  {
    "furniture": "boss",
    "openscad_code": "// Executive Office Chair (Boss Chair) - Realistic Style\n// Overall dimensions: ~110mm height x 60mm width x 65mm depth\n// Wall thickness: 2mm for 3D printability\n\n$fn = 32;\n\n// Main assembly\nmodule boss_chair() {\n    // Chair base\n    union() {\n        // Central support column\n        translate([0, 0, 0])\n            cylinder(h=50, d1=12, d2=8);\n        \n        // Five-star base\n        rotate([0, 0, 0]) star_base();\n        \n        // Seat cushion\n        translate([0, 0, 50])\n            seat_assembly();\n        \n        // Backrest\n        translate([0, -25, 65])\n            backrest_assembly();\n        \n        // Armrests\n        armrest_assembly();\n    }\n}\n\n// Five-star base with wheels\nmodule star_base() {\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, 0])\n                union() {\n                    // Base leg\n                    translate([0, 0, 0])\n                        cube([25, 6, 8], center=true);\n                    \n                    // Wheel\n                    translate([25, 0, -4])\n                        rotate([90, 0, 0])\n                            cylinder(h=3, r=4);\n                    \n                    // Wheel holder\n                    translate([25, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=8, r=2);\n                }\n    }\n}\n\n// Padded seat assembly\nmodule seat_assembly() {\n    // Seat frame\n    difference() {\n        // Main cushion block\n        translate([0, 0, 5])\n            cube([50, 50, 10], center=true);\n        \n        // Recessed cushion area\n        translate([0, 0, 8])\n            cube([46, 46, 6], center=true);\n    }\n    \n    // Cushion surface\n    translate([0, 0, 12])\n        cube([48, 48, 2], center=true);\n    \n    // Seat adjustment mechanism\n    translate([0, 0, 0])\n        cylinder(h=15, r=8);\n}\n\n// High backrest with headrest\nmodule backrest_assembly() {\n    // Backrest frame\n    difference() {\n        // Main backrest\n        translate([0, 0, 25])\n            cube([50, 8, 50], center=true);\n        \n        // Recessed padding\n        translate([0, 0, 25])\n            cube([46, 6, 46], center=true);\n    }\n    \n    // Lumbar support cushion\n    translate([0, 2, 15])\n        cube([40, 2, 20], center=true);\n    \n    // Headrest\n    translate([0, 2, 50])\n        cube([35, 4, 15], center=true);\n}\n\n// Adjustable armrests\nmodule armrest_assembly() {\n    // Left armrest\n    translate([-25, 15, 60])\n        armrest();\n    \n    // Right armrest\n    translate([25, 15, 60])\n        armrest();\n}\n\n// Individual armrest detail\nmodule armrest() {\n    // Support post\n    cylinder(h=20, r=2);\n    \n    // Arm pad\n    translate([0, 5, 10])\n        cube([20, 8, 3], center=true);\n    \n    // Adjustment mechanism\n    translate([0, 0, 10])\n        cylinder(h=5, r=3);\n}\n\n// Generate the chair\nboss_chair();",
    "renders": true
  },
  {
    "furniture": "cartouche",
    "openscad_code": "// Cartouche-style side table with ornate frame and drawer\n// Overall dimensions: 120mm (W) x 60mm (D) x 75mm (H)\n\n// Table parameters\ntable_width = 120;\ntable_depth = 60;\ntable_height = 75;\nleg_thickness = 8;\nframe_width = 6;\nwall_thickness = 2;\n\n// Leg module with Egyptian-styled taper\nmodule leg() {\n    // Main leg body\n    translate([0, 0, table_height/2 - 5])\n        cube([leg_thickness, leg_thickness, table_height - 10], center=true);\n    \n    // Top decorative capital\n    translate([0, 0, table_height - 8])\n        cube([leg_thickness + 4, leg_thickness + 4, 6], center=true);\n    \n    // Bottom decorative base\n    translate([0, 0, 5])\n        cube([leg_thickness + 6, leg_thickness + 6, 8], center=true);\n}\n\n// Ornate frame profile for table edges\nmodule frame_profile(length, width, height, orientation=\"horizontal\") {\n    if (orientation == \"horizontal\") {\n        // Front/back frame pieces\n        for (i = [0:1]) {\n            translate([0, i*(table_depth - width), height/2])\n                cube([length, width, height], center=true);\n        }\n    } else {\n        // Side frame pieces\n        for (i = [0:1]) {\n            translate([i*(table_width - width), 0, height/2])\n                cube([width, length, height], center=true);\n        }\n    }\n}\n\n// Cartouche-style decorative panel\nmodule cartouche_panel(width, height, depth) {\n    // Main body\n    translate([0, 0, depth/2])\n        cube([width, height, depth], center=true);\n    \n    // Rounded ends using cylinders\n    translate([-width/2, 0, depth/2])\n        rotate([0, 90, 0])\n            cylinder(h=height, r=height/2, center=true);\n    \n    translate([width/2, 0, depth/2])\n        rotate([0, 90, 0])\n            cylinder(h=height, r=height/2, center=true);\n    \n    // Inner decorative groove\n    translate([0, 0, depth + 0.1])\n        scale([0.8, 0.8, 1])\n            cube([width, height, wall_thickness], center=true);\n}\n\n// Drawer module\nmodule drawer() {\n    drawer_width = table_width * 0.6;\n    drawer_height = 20;\n    drawer_depth = table_depth * 0.7;\n    \n    // Drawer box\n    translate([0, 0, table_height/2 - 15])\n        difference() {\n            // Outer shell\n            cube([drawer_width, drawer_depth, drawer_height], center=true);\n            \n            // Inner cavity\n            translate([0, 0, wall_thickness])\n                cube([drawer_width - wall_thickness*2, \n                      drawer_depth - wall_thickness, \n                      drawer_height - wall_thickness*2], center=true);\n        }\n    \n    // Drawer front with cartouche styling\n    translate([0, table_depth/2 - 2, table_height/2 - 15])\n        cartouche_panel(drawer_width + 4, drawer_height + 4, wall_thickness + 1);\n    \n    // Drawer handle (simple bar style)\n    translate([0, table_depth/2 + 3, table_height/2 - 15])\n        cube([drawer_width * 0.4, 4, 6], center=true);\n}\n\n// Table top with cartouche shape\nmodule table_top() {\n    // Main top surface\n    translate([0, 0, table_height + 2])\n        cartouche_panel(table_width, table_depth, 4);\n    \n    // Underneath support structure\n    translate([0, 0, table_height - 1])\n        cube([table_width - 20, table_depth - 20, 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_width/2 - leg_thickness/2 - 5), \n                      y * (table_depth/2 - leg_thickness/2 - 5), 0])\n                leg();\n        }\n    }\n    \n    // Frame structure\n    frame_profile(table_width - 10, frame_width, frame_width, \"horizontal\");\n    frame_profile(table_depth - 10, frame_width, frame_width, \"vertical\");\n    \n    // Additional support rails\n    translate([0, 0, table_height/2])\n        cube([table_width - 20, frame_width, frame_width], center=true);\n    \n    translate([0, 0, table_height/2])\n        cube([frame_width, table_depth - 20, frame_width], center=true);\n    \n    // Table top\n    table_top();\n    \n    // Drawer\n    drawer();\n}",
    "renders": true
  },
  {
    "furniture": "medallion",
    "openscad_code": "// Medallion Chair - Realistic style with medium complexity\n// A decorative chair with medallion-shaped backrest and cabriole legs\n\n// Overall dimensions\nchair_width = 120;\nchair_depth = 100;\nchair_height = 140;\nseat_height = 45;\n\n// Wall thickness for 3D printing\nwall_th = 2;\n\n// Main seat module\nmodule seat() {\n    // Seat base\n    difference() {\n        cube([chair_width - 20, chair_depth - 10, 8], center=true);\n        translate([0, 0, -1])\n            cube([chair_width - 20 - wall_th*2, chair_depth - 10 - wall_th*2, 10], center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 4])\n        difference() {\n            cube([chair_width - 25, chair_depth - 15, 12], center=true);\n            translate([0, 0, -1])\n                cube([chair_width - 25 - wall_th*2, chair_depth - 15 - wall_th*2, 14], center=true);\n        }\n}\n\n// Medallion backrest - the signature element\nmodule medallion_back() {\n    // Backrest frame\n    difference() {\n        // Outer frame\n        translate([0, -chair_depth/2 + 5, chair_height/2 - seat_height])\n            cube([chair_width - 10, 10, chair_height - seat_height], center=true);\n        // Hollow center\n        translate([0, -chair_depth/2 + 2, chair_height/2 - seat_height])\n            cube([chair_width - 30, 16, chair_height - seat_height - 20], center=true);\n    }\n    \n    // Medallion shape\n    translate([0, -chair_depth/2 + 10, chair_height - 30]) {\n        // Central medallion disc\n        difference() {\n            cylinder(h=6, r=25, $fn=64);\n            translate([0, 0, -1])\n                cylinder(h=8, r=23, $fn=64);\n        }\n        \n        // Ornament details\n        for(i = [0:45:360]) {\n            rotate([0, 0, i])\n                translate([15, 0, 3])\n                    cylinder(h=3, r1=3, r2=0, $fn=6);\n        }\n    }\n    \n    // Side supports\n    for(x = [-1, 1]) {\n        translate([x * (chair_width/2 - 20), -chair_depth/2 + 5, chair_height/2 - seat_height])\n            difference() {\n                cylinder(h=chair_height - seat_height, r=10, $fn=12);\n                translate([0, 0, -1])\n                    cylinder(h=chair_height - seat_height + 2, r=8, $fn=12);\n            }\n    }\n}\n\n// Cabriole legs\nmodule leg(x_pos, z_rot=0) {\n    translate([x_pos, 0, 0]) {\n        rotate([0, 0, z_rot]) {\n            // Upper leg segment\n            translate([0, chair_depth/2 - 15, -seat_height/2 + 4])\n                difference() {\n                    cube([12, 12, seat_height], center=true);\n                    translate([0, 0, -1])\n                        cube([12 - wall_th*2, 12 - wall_th*2, seat_height + 2], center=true);\n                }\n            \n            // Curved lower segment\n            translate([0, chair_depth/2 - 25, -seat_height - 15])\n                rotate([0, 15, 0])\n                    difference() {\n                        cube([10, 10, 30], center=true);\n                        translate([0, 0, -1])\n                            cube([10 - wall_th*2, 10 - wall_th*2, 32], center=true);\n                    }\n            \n            // Foot\n            translate([0, chair_depth/2 - 35, -seat_height - 35])\n                difference() {\n                    sphere(r=6, $fn=16);\n                    translate([0, 0, 6])\n                        sphere(r=4, $fn=16);\n                }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, seat_height])\n        seat();\n    \n    // Backrest\n    medallion_back();\n    \n    // Legs\n    leg(chair_width/2 - 20, 10);\n    leg(-chair_width/2 + 20, -10);\n    leg(chair_width/2 - 20, -170);\n    leg(-chair_width/2 + 20, 170);\n    \n    // Front stretcher for stability\n    translate([0, chair_depth/2 - 30, -seat_height + 10])\n        difference() {\n            cube([chair_width - 40, 8, 6], center=true);\n            translate([0, 0, -1])\n                cube([chair_width - 40 - wall_th*2, 10, 8], center=true);\n        }\n}",
    "renders": true
  },
  {
    "furniture": "rosette",
    "openscad_code": "// Rosette Chair - Medium Complexity Realistic Style\n// Overall dimensions: 120mm width x 140mm depth x 220mm height\n\n// Parameters for chair construction\nseat_thickness = 8;\nback_thickness = 12;\nleg_width = 15;\nleg_height = 220;\nseat_width = 120;\nseat_depth = 140;\nback_height = 120;\nrosette_radius = 25;\nrosette_thickness = 5;\n\n// Main chair module\nmodule chair() {\n    // Seat with rounded edges\n    difference() {\n        translate([0, 0, leg_height - seat_thickness/2]) {\n            minkowski() {\n                cube([seat_width, seat_depth, seat_thickness], center=true);\n                cylinder(r=5, h=0.1, center=true);\n            }\n        }\n        \n        // Seat cavity for material saving\n        translate([0, 0, leg_height - seat_thickness/2 + 2]) {\n            cube([seat_width - 20, seat_depth - 20, seat_thickness - 2], center=true);\n        }\n    }\n    \n    // Backrest with rosette details\n    difference() {\n        translate([0, seat_depth/2 - back_thickness/2, leg_height + back_height/2 - seat_thickness/2]) {\n            cube([seat_width, back_thickness, back_height], center=true);\n        }\n        \n        // Backrest cutout for weight reduction\n        translate([0, seat_depth/2 - back_thickness/2 - 2, leg_height + back_height/2 - seat_thickness/2]) {\n            cube([seat_width - 40, back_thickness + 4, back_height - 40], center=true);\n        }\n    }\n    \n    // Legs with tapered design\n    for(x = [-seat_width/2 + leg_width/2, seat_width/2 - leg_width/2]) {\n        for(y = [-seat_depth/2 + leg_width/2, seat_depth/2 - leg_width/2]) {\n            translate([x, y, leg_height/2]) {\n                cylinder(h1=leg_width, h2=leg_width*0.7, h=leg_height);\n            }\n        }\n    }\n    \n    // Back legs (taller to support backrest)\n    for(x = [-seat_width/2 + leg_width/2, seat_width/2 - leg_width/2]) {\n        translate([x, seat_depth/2 - leg_width/2, leg_height/2]) {\n            difference() {\n                cylinder(h1=leg_width, h2=leg_width*0.7, h=leg_height);\n                // Add mortise for backrest\n                translate([0, 0, leg_height - 10]) {\n                    cube([leg_width + 2, back_thickness + 2, 20], center=true);\n                }\n            }\n        }\n    }\n    \n    // Rosette decorations on backrest\n    module rosette() {\n        difference() {\n            // Main rosette disk\n            cylinder(r=rosette_radius, h=rosette_thickness, center=true);\n            \n            // Central hole\n            cylinder(r=rosette_radius/3, h=rosette_thickness + 1, center=true);\n            \n            // Decorative petals\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45]) {\n                    translate([rosette_radius/2, 0, -1]) {\n                        cube([rosette_radius/2, rosette_radius/5, rosette_thickness + 2], center=true);\n                    }\n                }\n            }\n            \n            // Accent holes\n            for(i = [0:11]) {\n                rotate([0, 0, i * 30]) {\n                    translate([rosette_radius*0.75, 0, -1]) {\n                        cylinder(r=2, h=rosette_thickness + 2, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Place rosettes on backrest\n    translate([0, seat_depth/2 - back_thickness/2 - 1, leg_height + back_height - rosette_radius - 10]) {\n        rotate([90, 0, 0]) {\n            rosette();\n        }\n    }\n    \n    translate([-rosette_radius - 15, seat_depth/2 - back_thickness/2 - 1, leg_height + back_height/2]) {\n        rotate([90, 0, 0]) {\n            scale([0.7, 0.7, 1]) rosette();\n        }\n    }\n    \n    translate([rosette_radius + 15, seat_depth/2 - back_thickness/2 - 1, leg_height + back_height/2]) {\n        rotate([90, 0, 0]) {\n            scale([0.7, 0.7, 1]) rosette();\n        }\n    }\n    \n    // Support stretchers between legs\n    module stretcher(length) {\n        rotate([90, 0, 0]) {\n            cylinder(h1=8, h2=8, h=length);\n        }\n    }\n    \n    // Side stretchers\n    translate([0, 0, leg_height/2]) {\n        stretcher(seat_depth - leg_width);\n    }\n    \n    // Front-back stretchers\n    translate([0, 0, leg_height/3]) {\n        rotate([0, 0, 90]) {\n            stretcher(seat_width - leg_width);\n        }\n    }\n}\n\n// Assemble the chair\nchair();",
    "renders": true
  },
  {
    "furniture": "gadroon",
    "openscad_code": "// Gadroon side table with fluted apron and cabriole legs\n// Overall size: 120mm (W) x 120mm (D) x 75mm (H)\n\n$fn = 30;\n\n// Main module\nmodule gadroon_table() {\n    // Table top with gadroon edge\n    difference() {\n        // Main top\n        translate([0, 0, 70]) \n            cube([120, 120, 5], center = true);\n        \n        // Gadroon fluting on underside\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([0, 50, 67.5])\n                    cube([15, 10, 2], center = true);\n        }\n    }\n    \n    // Top gadroon molding\n    difference() {\n        translate([0, 0, 72.5])\n            cube([124, 124, 2], center = true);\n        \n        translate([0, 0, 72])\n            cube([116, 116, 4], center = true);\n    }\n    \n    // Apron with gadroon fluting\n    module apron_panel(length) {\n        difference() {\n            translate([0, 0, 35])\n                cube([length, 30, 30], center = true);\n            \n            // Gadroon flutes\n            for (i = [1:5]) {\n                translate([0, 0, 35])\n                    cube([length - 4, 4, 26], center = true);\n            }\n            \n            // Central relief\n            translate([0, 0, 35])\n                cube([length - 20, 20, 28], center = true);\n        }\n    }\n    \n    // Front apron\n    translate([0, 45, 0])\n        apron_panel(110);\n    \n    // Back apron\n    translate([0, -45, 0])\n        apron_panel(110);\n    \n    // Side aprons\n    translate([45, 0, 0])\n        rotate([0, 0, 90])\n            apron_panel(90);\n    \n    translate([-45, 0, 0])\n        rotate([0, 0, 90])\n            apron_panel(90);\n    \n    // Cabriole legs with gadroon knees\n    module leg() {\n        // Upper leg with gadroon knee\n        difference() {\n            translate([0, 0, 50])\n                cylinder(h = 20, r1 = 6, r2 = 5);\n            \n            // Gadroon carvings\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([0, 5.5, 60])\n                        cube([2, 1, 8], center = true);\n            }\n        }\n        \n        // Curved lower leg\n        hull() {\n            translate([0, 0, 40])\n                sphere(r = 5);\n            translate([0, 0, 20])\n                sphere(r = 4);\n            translate([0, 0, 5])\n                sphere(r = 6);\n        }\n        \n        // Foot pad\n        translate([0, 0, 0])\n            cylinder(h = 3, r = 7);\n    }\n    \n    // Position legs at corners\n    translate([50, 50, 0])\n        leg();\n    translate([-50, 50, 0])\n        leg();\n    translate([50, -50, 0])\n        leg();\n    translate([-50, -50, 0])\n        leg();\n    \n    // Stretcher system\n    translate([0, 0, 15])\n        cube([80, 80, 3], center = true);\n    \n    // Central gadroon rosette\n    difference() {\n        translate([0, 0, 16.5])\n            cylinder(h = 2, r = 15);\n        \n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([0, 12, 17.5])\n                    cube([3, 6, 1], center = true);\n        }\n    }\n}\n\n// Render the table\ngadroon_table();",
    "renders": true
  },
  {
    "furniture": "acanthus",
    "openscad_code": "// Acanthus style jewelry box (medium complexity)\n// 80 x 50 x 40 mm overall\n\n$fn = 36;\n\n// Overall dimensions\nwidth = 80;\ndepth = 50;\nheight = 40;\nwall = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n        cube([width - 2*wall, depth - 2*wall, height - wall], center = true);\n    }\n}\n\n// Acanthus leaf module\nmodule acanthus_leaf(x, y, z, scale_factor = 1) {\n    translate([x, y, z]) {\n        scale([scale_factor, scale_factor, scale_factor]) {\n            // Central rib\n            rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 1.5, d2 = 3);\n            \n            // Leaf lobes\n            for (i = [0:3]) {\n                rotate([0, 0, i*30 - 45])\n                translate([0, i*2 - 3, 0])\n                scale([1, 0.7, 1])\n                sphere(d = 4);\n            }\n            \n            // Secondary lobes\n            for (i = [0:2]) {\n                rotate([0, 0, i*40 - 40])\n                translate([0, i*1.5 - 1.5, -2])\n                scale([0.7, 0.5, 0.7])\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Decorative corner brackets\nmodule corner_brackets() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*(width/2 - 5), y*(depth/2 - 5), height/2 - 5]) {\n                // Bracket base\n                cube([10, 10, 5], center = true);\n                \n                // Acanthus decoration on brackets\n                acanthus_leaf(0, 0, 3, 0.8);\n            }\n        }\n    }\n}\n\n// Side panel decorations\nmodule side_decorations() {\n    // Front and back panels\n    for (side = [-1, 1]) {\n        translate([0, side*(depth/2 - 1), 0]) {\n            for (i = [-1, 0, 1]) {\n                acanthus_leaf(i*20, 0, height/4, 1.2);\n            }\n        }\n    }\n    \n    // Left and right panels\n    for (side = [-1, 1]) {\n        translate([side*(width/2 - 1), 0, 0]) {\n            for (i = [-1, 0, 1]) {\n                rotate([0, 0, 90])\n                acanthus_leaf(0, i*15, height/4, 1);\n            }\n        }\n    }\n}\n\n// Hinged lid\nmodule lid() {\n    translate([0, 0, height/2 + 2]) {\n        difference() {\n            // Lid base\n            cube([width + 2, depth + 2, 4], center = true);\n            \n            // Interior relief\n            translate([0, 0, -1])\n            cube([width - 2*wall, depth - 2*wall, 4], center = true);\n        }\n        \n        // Acanthus crest on lid\n        acanthus_leaf(0, 0, 2, 2);\n        \n        // Side decorations on lid\n        for (i = [-1, 1]) {\n            acanthus_leaf(i*30, 0, 2, 1.5);\n            acanthus_leaf(0, i*20, 2, 1.5);\n        }\n    }\n}\n\n// Feet\nmodule feet() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*(width/2 - 5), y*(depth/2 - 5), -height/2 - 3]) {\n                // Foot base\n                cylinder(h = 3, d = 6);\n                \n                // Acanthus decoration on feet\n                acanthus_leaf(0, 0, 1.5, 0.6);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    corner_brackets();\n    side_decorations();\n    lid();\n    feet();\n}",
    "renders": true
  },
  {
    "furniture": "palmette",
    "openscad_code": "// Palmette Chair - OpenSCAD\n// Furniture-inspired palmette design with structural elements\n\n// Parameters\nchair_width = 80;\nchair_depth = 60;\nchair_height = 100;\nleg_thickness = 4;\nseat_thickness = 6;\nbackrest_thickness = 3;\npalmette_height = 45;\n\n// Main chair structure\nmodule chair_frame() {\n    // Back legs\n    translate([chair_width/2 - leg_thickness/2, 0, 0])\n        cube([leg_thickness, chair_depth/2, chair_height]);\n    translate([-chair_width/2 + leg_thickness/2, 0, 0])\n        cube([leg_thickness, chair_depth/2, chair_height]);\n    \n    // Front legs\n    translate([chair_width/2 - leg_thickness/2, chair_depth - leg_thickness, 0])\n        cube([leg_thickness, leg_thickness, chair_height * 0.7]);\n    translate([-chair_width/2 + leg_thickness/2, chair_depth - leg_thickness, 0])\n        cube([leg_thickness, leg_thickness, chair_height * 0.7]);\n    \n    // Seat support frame\n    translate([0, chair_depth/2, chair_height * 0.4])\n        cube([chair_width - 2*leg_thickness, chair_depth - leg_thickness, seat_thickness]);\n}\n\n// Palmette backrest design\nmodule palmette_backrest() {\n    // Central stem\n    translate([0, 0, chair_height * 0.4 + seat_thickness])\n        cylinder(h = palmette_height, r1 = 3, r2 = 2);\n    \n    // Palmette leaves - 7 symmetric fronds\n    for(i = [-3:3]) {\n        rotate([0, 0, i * 25])\n        translate([0, -10, chair_height * 0.4 + seat_thickness + palmette_height * 0.3])\n        scale([1, 1.5, 0.5])\n        sphere(r = 12);\n    }\n    \n    // Connecting frame\n    translate([0, -5, chair_height * 0.4 + seat_thickness])\n        cube([chair_width - 20, backrest_thickness, palmette_height + 10]);\n    \n    // Decorative elements\n    for(i = [-1:1]) {\n        translate([i * 15, -5, chair_height * 0.4 + seat_thickness + palmette_height + 5])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r1 = 4, r2 = 2);\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    translate([0, chair_depth/2, chair_height * 0.4 + seat_thickness])\n        cube([chair_width - 25, chair_depth - leg_thickness - 5, 8], center = true);\n}\n\n// Armrest supports\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 + 5, chair_depth * 0.7, chair_height * 0.65])\n        cube([leg_thickness, 15, 20]);\n    \n    // Right armrest\n    translate([chair_width/2 - 5, chair_depth * 0.7, chair_height * 0.65])\n        cube([leg_thickness, 15, 20]);\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    palmette_backrest();\n    seat_cushion();\n    armrests();\n}\n\n// Base reinforcement\ntranslate([0, chair_depth/2, -2])\n    cube([chair_width + 10, chair_depth + 10, 2]);",
    "renders": true
  },
  {
    "furniture": "scroll",
    "openscad_code": "// Scroll Console Table\n// Realistic style, medium complexity\n\nwall = 2;  // 3D-printable wall thickness\nleg_h = 70; leg_w = 30; leg_d = 30;\ntop_t = 4;  // tabletop thickness\nscroll_h = 18;\n\n// Helper for rounded edges\nmodule rounded_cube(s, r) {\n    hull() {\n        for(dx=[0,1], dy=[0,1], dz=[0,1])\n            translate([dx?s[0]-r:r, dy?s[1]-r:r, dz?s[2]-r:r])\n                sphere(r=r);\n    }\n}\n\n// Scroll bracket (left/right pair)\nmodule scroll_bracket(h=scroll_h, w=12, d=leg_d) {\n    difference() {\n        union() {\n            // Main scroll body\n            for(a=[0:15:345])\n                translate([cos(a)*w/2, sin(a)*w/2, 0])\n                    rotate([0,90,0])\n                        cylinder(h=d, d=w*(1+sin(a)*0.4), center=true);\n            // Top connector block\n            translate([0,0,h-wall])\n                cube([w*2, w*0.8, wall], center=true);\n        }\n        // Central void\n        for(a=[0:15:345])\n            translate([cos(a)*(w/2-wall), sin(a)*(w/2-wall), -1])\n                rotate([0,90,0])\n                    cylinder(h=d+2, d=(w-2*wall)*(1+sin(a)*0.4), center=true);\n    }\n}\n\n// Leg with scroll detail\nmodule leg() {\n    difference() {\n        rounded_cube([leg_w, leg_d, leg_h], r=4);\n        translate([0,0,leg_h-scroll_h])\n            cube([leg_w-2*wall, leg_d-2*wall, scroll_h+1], center=true);\n    }\n    translate([0,0,leg_h-scroll_h])\n        scroll_bracket();\n}\n\n// Apron rail with mortise detail\nmodule apron(length) {\n    difference() {\n        cube([length, wall, leg_h*0.6]);\n        // Mortise slots for tenons\n        for(i=[1,3])\n            translate([i*length/4, -1, leg_h*0.6-10])\n                cube([wall*2, wall+2, 10]);\n    }\n}\n\n// Tabletop with eased edges\nmodule tabletop() {\n    difference() {\n        rounded_cube([180, 50, top_t], r=6);\n        translate([0,0,-1])\n            cube([180-2*wall, 50-2*wall, top_t+2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Legs\n    translate([20, 0, 0]) leg();\n    translate([160, 0, 0]) mirror([1,0,0]) leg();\n    translate([20, 50, 0]) leg();\n    translate([160, 50, 0]) mirror([1,0,0]) leg();\n\n    // Aprons\n    translate([20, wall, leg_h*0.4])\n        rotate([0,0,90])\n            apron(140);\n    translate([20, 50-wall, leg_h*0.4])\n        rotate([0,0,90])\n            apron(140);\n    translate([20+wall, 25, leg_h*0.4])\n        apron(140-2*wall);\n\n    // Tabletop\n    translate([90, 25, leg_h])\n        tabletop();\n}",
    "renders": true
  },
  {
    "furniture": "volute",
    "openscad_code": "// Volute-style accent table with spiral base and round top\n// Overall height: 110 mm, tabletop diameter: 100 mm\n\n$fn = 36;  // smooth curves\n\n// Main module\nmodule volute_table() {\n    // Top - round tabletop with slight lip\n    translate([0,0,100])\n        table_top();\n\n    // Vertical post\n    translate([0,0,40])\n        cylinder(h=60, d1=20, d2=15);\n\n    // Spiral volute base - built from stacked tapered cylinders\n    volute_spiral();\n}\n\n// Tabletop with 2mm lip\nmodule table_top() {\n    difference() {\n        cylinder(h=8, d=100);  // main top\n        \n        // hollow out underside\n        translate([0,0,-2])\n            cylinder(h=6, d=96);\n    }\n    \n    // top surface lip\n    translate([0,0,6])\n        cylinder(h=2, d=102);\n}\n\n// Generate spiral volute base\nmodule volute_spiral() {\n    // Central core\n    cylinder(h=40, d1=30, d2=20);\n    \n    // Spiral wraps\n    for (i = [0:3]) {\n        rotate([0,0,i*90])\n            volute_arm(i);\n    }\n}\n\n// Single spiral arm of volute\nmodule volute_arm(level) {\n    // Arm thickness and taper\n    thickness = 6 - level;\n    height = 30 - (level * 5);\n    \n    // Create curved arm segments\n    for (angle = [0:5:85]) {\n        rotate([0,0,angle])\n            translate([25 - (angle * 0.2), 0, 0])\n                rotate([90, 0, angle])\n                    translate([0,0,level * 3])\n                        cylinder(h=height/20, d1=thickness, d2=thickness-1);\n    }\n    \n    // Structural brace between arms\n    if (level < 3) {\n        rotate([0,0,level*90])\n            translate([15,0,level*3])\n                cube([20, 4, height-2], center=true);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    for (i = [0:3]) {\n        rotate([0,0,i*90])\n            translate([35,0,0])\n                cylinder(h=5, d=12);\n    }\n}\n\n// Assemble complete table\nunion() {\n    volute_table();\n    feet();\n}",
    "renders": true
  },
  {
    "furniture": "scrollwork",
    "openscad_code": "// Scrollwork Side Table - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm W x 100mm D x 120mm H\n\n// Parameters\nleg_thickness = 4;\ntop_thickness = 6;\nscroll_radius = 12;\nscroll_thickness = 3;\nwall_thickness = 2;\n\n// Main table structure\nmodule table() {\n    // Table top with scrollwork edge\n    difference() {\n        cube([100, 100, top_thickness], center=true);\n        translate([0, 0, top_thickness/2 - 0.1])\n            cube([90, 90, top_thickness+0.2], center=true);\n    }\n    \n    // Scrollwork apron on four sides\n    translate([0, 0, -5])\n        union() {\n            // Front scrollwork\n            translate([0, 45, 0])\n                scroll_panel(80, 15);\n            // Back scrollwork\n            translate([0, -45, 0])\n                rotate([0, 0, 180])\n                    scroll_panel(80, 15);\n            // Left scrollwork\n            translate([45, 0, 0])\n                rotate([0, 0, 90])\n                    scroll_panel(80, 15);\n            // Right scrollwork\n            translate([-45, 0, 0])\n                rotate([0, 0, 270])\n                    scroll_panel(80, 15);\n        }\n    \n    // Four legs with scroll detail\n    translate([40, 40, -60])\n        leg_with_scroll();\n    translate([-40, 40, -60])\n        leg_with_scroll();\n    translate([40, -40, -60])\n        leg_with_scroll();\n    translate([-40, -40, -60])\n        leg_with_scroll();\n    \n    // Lower shelf\n    translate([0, 0, -100])\n        cube([80, 80, 4], center=true);\n}\n\n// Scroll panel for apron\nmodule scroll_panel(length, height) {\n    difference() {\n        cube([length, wall_thickness, height], center=true);\n        \n        // Central scroll\n        translate([0, wall_thickness/2, 0])\n            scroll(scroll_radius, scroll_thickness);\n        \n        // Side scrolls\n        translate([length/3, wall_thickness/2, 0])\n            scroll(scroll_radius*0.7, scroll_thickness);\n        translate([-length/3, wall_thickness/2, 0])\n            mirror([1, 0, 0])\n                scroll(scroll_radius*0.7, scroll_thickness);\n    }\n}\n\n// Scroll element\nmodule scroll(radius, thickness) {\n    union() {\n        // Main spiral\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n                translate([radius - i/90, 0, 0])\n                    cylinder(h=thickness, r1=thickness/2, r2=thickness/2, center=true);\n        }\n        \n        // Scroll end\n        translate([radius, 0, 0])\n            sphere(r=thickness/2);\n    }\n}\n\n// Leg with scroll detail\nmodule leg_with_scroll() {\n    union() {\n        // Main leg\n        cylinder(h=100, r1=leg_thickness, r2=leg_thickness*1.2, center=false);\n        \n        // Scroll detail at top\n        translate([0, 0, 90])\n            rotate([90, 0, 0])\n                scroll(scroll_radius*0.5, scroll_thickness);\n        \n        // Reinforcement block\n        translate([0, 0, 50])\n            cube([leg_thickness*2, leg_thickness*2, 10], center=true);\n    }\n}\n\n// Assembly\ntable();",
    "renders": true
  },
  {
    "furniture": "tracery",
    "openscad_code": "// Gothic Tracery Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm width x 120mm depth x 150mm height\n\nmodule chair_frame() {\n    // Seat frame - 2mm thick walls\n    difference() {\n        cube([100, 120, 6]);\n        translate([2, 2, 2]) cube([96, 116, 6]);\n    }\n    \n    // Leg posts - 4mm square posts at corners\n    for(x = [0, 88]) {\n        for(y = [0, 108]) {\n            translate([x + 6, y + 6, 0]) cube([8, 8, 144]);\n        }\n    }\n    \n    // Backrest frame\n    translate([0, 108, 144]) cube([100, 12, 6]);\n    translate([6, 114, 6]) cube([8, 0, 138]);\n    translate([86, 114, 6]) cube([8, 0, 138]);\n}\n\nmodule tracery_panel() {\n    // Main tracery back panel\n    difference() {\n        // Solid back panel\n        translate([0, 108, 6]) cube([100, 12, 138]);\n        \n        // Gothic arch cutouts\n        for(i = [0:1]) {\n            translate([15 + i*55, 114, 12]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height=6) {\n                        polygon(points=[\n                            [0,0], [15,0], [15,30], [7.5,45], [0,30], [0,0]\n                        ]);\n                    }\n                }\n            }\n        }\n        \n        // Quatrefoil cutouts\n        for(x = [1:3]) {\n            for(y = [1:3]) {\n                translate([x*25, 114, y*34]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=6, r=6, $fn=4);\n                        translate([0, 0, 6]) cylinder(h=6, r=6, $fn=4);\n                        translate([6, 0, 0]) cylinder(h=6, r=6, $fn=4);\n                        translate([6, 0, 6]) cylinder(h=6, r=6, $fn=4);\n                    }\n                    translate([3, 114, y*34+3]) cube([6, 12, 6]);\n                }\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Cushion base\n    translate([4, 4, 6]) {\n        difference() {\n            cube([92, 112, 12]);\n            translate([2, 2, 10]) cube([88, 108, 4]);\n        }\n    }\n    \n    // Cushion top rounding\n    translate([6, 6, 18]) {\n        scale([1, 1.2, 0.3]) {\n            cube([88, 100, 6]);\n        }\n    }\n}\n\nmodule stretchers() {\n    // Side stretchers\n    translate([14, 14, 72]) cube([72, 4, 6]);\n    translate([14, 110, 72]) cube([72, 4, 6]);\n    \n    // Front stretcher\n    translate([14, 14, 36]) cube([4, 96, 6]);\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    tracery_panel();\n    seat_cushion();\n    stretchers();\n}",
    "renders": true
  },
  {
    "furniture": "lattice",
    "openscad_code": "// Lattice Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm width x 110mm depth x 110mm height\n\n// Basic parameters\nleg_thickness = 8;\nseat_thickness = 6;\nback_thickness = 4;\nlattice_spacing = 12;\nlattice_width = 3;\n\n// Seat frame and cushion\nmodule seat_assembly() {\n    difference() {\n        // Seat frame\n        cube([100, 110, seat_thickness], center=true);\n        \n        // Hollow out seat center\n        translate([0, 0, -1])\n            cube([84, 94, seat_thickness+2], center=true);\n    }\n    \n    // Lattice cushion top\n    for (x = [-40:12:40]) {\n        for (y = [-45:12:45]) {\n            translate([x, y, seat_thickness/2 + 1])\n                cube([lattice_width, lattice_width, 2], center=true);\n        }\n    }\n}\n\n// Backrest with lattice\nmodule backrest() {\n    translate([0, 50, (110-seat_thickness)/2 + seat_thickness/2]) {\n        difference() {\n            // Backrest frame\n            cube([90, back_thickness, 100], center=true);\n            \n            // Hollow out backrest\n            translate([0, 0, 0])\n                cube([74, back_thickness+2, 84], center=true);\n        }\n        \n        // Vertical lattice slats\n        for (x = [-30:12:30]) {\n            translate([x, 0, 0])\n                cube([lattice_width, back_thickness, 84], center=true);\n        }\n        \n        // Horizontal lattice supports\n        for (z = [-30:12:30]) {\n            translate([0, 0, z])\n                cube([74, back_thickness, lattice_width], center=true);\n        }\n    }\n}\n\n// Leg structure with lattice reinforcement\nmodule legs() {\n    // Front left leg\n    translate([-42, -42, -55 + seat_thickness/2]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, 110 - seat_thickness], center=true);\n            translate([0, 0, -20])\n                cube([4, 4, 50], center=true);\n        }\n        \n        // Lattice reinforcement\n        for (h = [-40:8:40]) {\n            translate([0, 0, h])\n                cube([leg_thickness, 4, 4], center=true);\n        }\n    }\n    \n    // Front right leg\n    mirror([1, 0, 0])\n        translate([-42, -42, -55 + seat_thickness/2]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, 110 - seat_thickness], center=true);\n            translate([0, 0, -20])\n                cube([4, 4, 50], center=true);\n        }\n        \n        for (h = [-40:8:40]) {\n            translate([0, 0, h])\n                cube([leg_thickness, 4, 4], center=true);\n        }\n    }\n    \n    // Back legs\n    translate([-42, 42, -55 + seat_thickness/2]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, 110 - seat_thickness], center=true);\n            translate([0, 0, -20])\n                cube([4, 4, 50], center=true);\n        }\n        \n        for (h = [-40:8:40]) {\n            translate([0, 0, h])\n                cube([leg_thickness, 4, 4], center=true);\n        }\n    }\n    \n    mirror([1, 0, 0])\n        translate([-42, 42, -55 + seat_thickness/2]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, 110 - seat_thickness], center=true);\n            translate([0, 0, -20])\n                cube([4, 4, 50], center=true);\n        }\n        \n        for (h = [-40:8:40]) {\n            translate([0, 0, h])\n                cube([leg_thickness, 4, 4], center=true);\n        }\n    }\n}\n\n// Support beams\nmodule support_beams() {\n    // Front support\n    translate([0, -42, -20])\n        cube([76, 4, 4], center=true);\n    \n    // Back support\n    translate([0, 42, -20])\n        cube([76, 4, 4], center=true);\n    \n    // Side supports\n    translate([-42, 0, -20])\n        cube([4, 84, 4], center=true);\n    \n    translate([42, 0, -20])\n        cube([4, 84, 4], center=true);\n}\n\n// Assemble the chair\nunion() {\n    seat_assembly();\n    backrest();\n    legs();\n    support_beams();\n}",
    "renders": true
  },
  {
    "furniture": "grille",
    "openscad_code": "// Grill furniture - realistic style with medium complexity\n// BBQ-style outdoor grill with legs, grate, and base\n\n// Parameters\ngrill_width = 80;\ngrill_depth = 60;\ngrill_height = 70;\nleg_height = 50;\nwall_thickness = 2;\n\n// Main module\nmodule grill() {\n    // Base bowl\n    difference() {\n        // Outer bowl\n        translate([0, 0, leg_height])\n        scale([1, 0.8, 0.5])\n        cylinder(h=25, d=grill_width, $fn=64);\n        \n        // Inner bowl cavity\n        translate([0, 0, leg_height + wall_thickness])\n        scale([1, 0.8, 0.5])\n        cylinder(h=23, d=grill_width - 2*wall_thickness, $fn=64);\n    }\n    \n    // Rim/top edge\n    translate([0, 0, leg_height + 25])\n    difference() {\n        cylinder(h=5, d=grill_width + 4, $fn=64);\n        cylinder(h=5, d=grill_width - 2, $fn=64);\n    }\n    \n    // Grill grate\n    translate([0, 0, leg_height + 28])\n    grill_grate();\n    \n    // Legs\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (grill_width/2 - 10), y * (grill_depth/2 - 10), 0])\n        leg();\n    }\n    \n    // Support bars between legs\n    support_bars();\n    \n    // Ventilation holes\n    ventilation_holes();\n}\n\n// Grill grate module\nmodule grill_grate() {\n    difference() {\n        // Grate frame\n        cube([grill_width - 4, grill_depth - 4, 3], center=true);\n        \n        // Grate holes pattern\n        for(x = [-30:10:30])\n        for(y = [-20:10:20]) {\n            translate([x, y, -1])\n            cylinder(h=5, d=2, $fn=16);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    // Tapered leg\n    cylinder(h1=10, h2=5, h=leg_height, center=false);\n    \n    // Foot pad\n    translate([0, 0, -2])\n    cylinder(h=4, d=12, $fn=32);\n    \n    // Leg brace\n    translate([5, 0, leg_height/2])\n    rotate([0, 90, 0])\n    cylinder(h=10, d=4, $fn=16);\n}\n\n// Support bars between legs\nmodule support_bars() {\n    // Front-back bars\n    for(y = [-1, 1]) {\n        translate([0, y * (grill_depth/2 - 10), leg_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=grill_width - 20, d=3, $fn=16);\n    }\n    \n    // Left-right bars\n    for(x = [-1, 1]) {\n        translate([x * (grill_width/2 - 10), 0, leg_height/2])\n        rotate([90, 90, 0])\n        cylinder(h=grill_depth - 20, d=3, $fn=16);\n    }\n}\n\n// Ventilation holes in base\nmodule ventilation_holes() {\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([(grill_width - wall_thickness)/2 - 5, 0, leg_height + 12])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=3, $fn=16);\n    }\n}\n\n// Render the grill\ngrill();",
    "renders": true
  },
  {
    "furniture": "jali",
    "openscad_code": "// Jali side table with geometric pierced screen\n// Overall size: 120mm x 120mm x 120mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Overall dimensions\nwidth = 120;\ndepth = 120;\nheight = 120;\n\n// Module for leg with rounded corners\nmodule leg(x, y) {\n    translate([x, y, 0])\n        difference() {\n            // Main leg body\n            cube([12, 12, height - 10], center = true);\n            \n            // Hollow center\n            translate([0, 0, 5])\n                cube([12 - wall*2, 12 - wall*2, height - 20], center = true);\n        }\n}\n\n// Module for jali screen panel\nmodule jali_panel(w, h, thickness) {\n    difference() {\n        // Solid panel\n        cube([w, h, thickness]);\n        \n        // Hexagonal cutouts\n        for (x = [10:20:w-10]) {\n            for (y = [10:20:h-10]) {\n                translate([x, y, -1])\n                    cylinder(h = thickness + 2, r = 5, $fn = 6);\n            }\n        }\n    }\n}\n\n// Module for tabletop\nmodule tabletop() {\n    translate([0, 0, height - 5]) {\n        difference() {\n            // Main tabletop\n            cube([width, depth, 10], center = true);\n            \n            // Underside recess\n            translate([0, 0, -5 + wall])\n                cube([width - wall*2, depth - wall*2, wall], center = true);\n        }\n    }\n}\n\n// Module for lower shelf\nmodule shelf() {\n    translate([0, 0, 30]) {\n        difference() {\n            // Main shelf\n            cube([width - 20, depth - 20, 5], center = true);\n            \n            // Grid of holes for ventilation\n            for (x = [-40:10:40]) {\n                for (y = [-40:10:40]) {\n                    translate([x, y, -1])\n                        cylinder(h = 7, r = 2, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Module for side panels with jali\nmodule side_panel(x, y, angle) {\n    translate([x, y, 40]) {\n        rotate([0, 0, angle]) {\n            jali_panel(80, 60, wall);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    leg(-width/2 + 6, -depth/2 + 6);\n    leg(width/2 - 6, -depth/2 + 6);\n    leg(-width/2 + 6, depth/2 - 6);\n    leg(width/2 - 6, depth/2 - 6);\n    \n    // Tabletop\n    tabletop();\n    \n    // Lower shelf\n    shelf();\n    \n    // Side panels with jali screens\n    side_panel(-width/2 + wall/2, 0, 0);\n    side_panel(width/2 - wall/2, 0, 0);\n    side_panel(0, -depth/2 + wall/2, 90);\n    side_panel(0, depth/2 - wall/2, 90);\n}\n\n// Optional: Chamfer edges for better print\nmodule chamfer_edge() {\n    translate([0, 0, height - 10])\n        cube([width + 2, depth + 2, 2], center = true);\n}",
    "renders": true
  },
  {
    "furniture": "mashrabiya",
    "openscad_code": "// Mashrabiya Side Table (Medium Complexity)\n// Realistic style, 3D printable (2mm walls, no overhangs)\n// Dimensions: 120mm W x 120mm D x 150mm H\n\n// Parameters\nwall = 2;\nsize = 120;\nheight = 150;\npattern_size = 8;\npattern_depth = 3;\n\n// Main frame structure\nmodule table_frame() {\n    // Base frame\n    difference() {\n        cube([size, size, wall], center=true);\n        cube([size-wall*2, size-wall*2, wall+1], center=true);\n    }\n    \n    // Top frame\n    translate([0,0,height-wall]) {\n        difference() {\n            cube([size, size, wall], center=true);\n            cube([size-wall*2, size-wall*2, wall+1], center=true);\n        }\n    }\n    \n    // Corner posts\n    for(x=[-size/2+wall/2, size/2-wall/2])\n        for(y=[-size/2+wall/2, size/2-wall/2])\n            translate([x,y,height/2-wall/2])\n                cube([wall, wall, height-wall*2], center=true);\n}\n\n// Mashrabiya pattern panel\nmodule pattern_panel(w, h, d) {\n    // Outer frame\n    difference() {\n        cube([w, d, h], center=true);\n        cube([w-wall*2, d+1, h-wall*2], center=true);\n    }\n    \n    // Geometric pattern\n    for(i=[-w/2+pattern_size:w/2-pattern_size/2:pattern_size]) {\n        for(j=[-h/2+pattern_size:h/2-pattern_size/2:pattern_size]) {\n            translate([i, d/2, j]) {\n                // Horizontal members\n                cube([pattern_size-wall, pattern_depth, wall], center=true);\n                // Vertical members\n                cube([wall, pattern_depth, pattern_size-wall], center=true);\n            }\n        }\n    }\n}\n\n// Side panels with mashrabiya\nmodule side_panels() {\n    // Front panel\n    translate([0, -size/2+wall/2, height/2-wall/2])\n        pattern_panel(size-wall*4, height-wall*4, wall);\n    \n    // Back panel\n    translate([0, size/2-wall/2, height/2-wall/2])\n        pattern_panel(size-wall*4, height-wall*4, wall);\n    \n    // Left panel\n    translate([-size/2+wall/2, 0, height/2-wall/2])\n        rotate([0,90,0])\n            pattern_panel(size-wall*4, height-wall*4, wall);\n    \n    // Right panel\n    translate([size/2-wall/2, 0, height/2-wall/2])\n        rotate([0,90,0])\n            pattern_panel(size-wall*4, height-wall*4, wall);\n}\n\n// Table top with carved detail\nmodule table_top() {\n    difference() {\n        cube([size-wall*2, size-wall*2, wall*2], center=true);\n        translate([0,0,wall/2])\n            cube([size-wall*6, size-wall*6, wall+1], center=true);\n    }\n    \n    // Decorative edge\n    for(i=[-size/2+wall*3:size/2-wall*3:wall*2]) {\n        translate([i, -size/2+wall*3-wall/2, wall/2])\n            cube([wall, wall, wall*2], center=true);\n        translate([i, size/2-wall*3+wall/2, wall/2])\n            cube([wall, wall, wall*2], center=true);\n    }\n}\n\n// Shelf\nmodule shelf() {\n    translate([0,0,height/2])\n        cube([size-wall*4, size-wall*4, wall], center=true);\n}\n\n// Assembly\nunion() {\n    table_frame();\n    side_panels();\n    translate([0,0,height-wall])\n        table_top();\n    shelf();\n}",
    "renders": true
  },
  {
    "furniture": "moucharaby",
    "openscad_code": "// Moucharaby Screen - Realistic Style, Medium Complexity\n// Dimensions: 100mm W x 30mm D x 120mm H\n// Wall thickness: 2mm for 3D printing compatibility\n\n$fn = 30;\n\n// Main frame module\nmodule moucharaby_frame() {\n    // Bottom rail\n    translate([0, 5, 10]) cube([100, 4, 20], center=true);\n    \n    // Top rail\n    translate([0, 5, 110]) cube([100, 4, 20], center=true);\n    \n    // Left post\n    translate([48, 5, 60]) cube([4, 4, 100], center=true);\n    \n    // Right post\n    translate([-48, 5, 60]) cube([4, 4, 100], center=true);\n}\n\n// Individual lattice bar module\nmodule lattice_bar(width, height, depth) {\n    cube([width, depth, height], center=true);\n}\n\n// Lattice pattern module\nfunction lattice_count() = 8;\nfunction lattice_spacing() = 90 / (lattice_count() - 1);\n\nmodule lattice_grid() {\n    for (i = [0:lattice_count()-1]) {\n        // Vertical bars\n        translate([45 - i * lattice_spacing(), 5, 60]) \n            lattice_bar(2, 80, 2);\n        \n        // Horizontal bars (offset between verticals)\n        for (j = [1:7]) {\n            translate([45 - i * lattice_spacing() + lattice_spacing()/2, 5, 25 + j * 10]) \n                lattice_bar(lattice_spacing() - 2, 2, 2);\n        }\n    }\n}\n\n// Ornamental top detail\nmodule ornamental_top() {\n    // Center arch\n    translate([0, 5, 122]) \n        rotate([90, 0, 0]) \n            cylinder(h=2, r1=20, r2=20);\n    \n    // Side decorations\n    for (x = [-30, 30]) {\n        translate([x, 5, 122]) \n            rotate([90, 0, 0]) \n                cylinder(h=2, r1=8, r2=8);\n    }\n}\n\n// Base feet for stability\nmodule feet() {\n    for (x = [-40, 40]) {\n        // Front feet\n        translate([x, -8, 0]) \n            cube([8, 8, 8], center=true);\n        \n        // Back feet\n        translate([x, 18, 0]) \n            cube([8, 8, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    moucharaby_frame();\n    \n    // Lattice work\n    lattice_grid();\n    \n    // Top decoration\n    ornamental_top();\n    \n    // Stabilizing feet\n    feet();\n}\n\n// Optional: Add small support braces at corners for printing\nmodule corner_braces() {\n    for (corner = [[-45, 1, 20], [45, 1, 20], [-45, 1, 100], [45, 1, 100]]) {\n        translate(corner) \n            rotate([0, 45, 0]) \n                cube([2.8, 2.8, 10], center=true);\n    }\n}\n\n// Include corner braces for structural integrity\ncorner_braces();",
    "renders": true
  },
  {
    "furniture": "mashrafiyya",
    "openscad_code": "// Mashrafiyya Side Table - Realistic Style, Medium Complexity\n// Traditional latticed wooden table inspired by Middle Eastern mashrabiyya screens\n\n// Overall dimensions\ntable_width = 100;\ntable_depth = 60;\ntable_height = 80;\nwall_thickness = 2;\nlattice_thickness = 1.5;\n\n// Leg dimensions\nleg_width = 8;\nleg_height = 75;\n\n// Tabletop dimensions\ntop_thickness = 5;\ntop_overhang = 3;\n\n// Shelf dimensions\nshelf_height = 25;\nshelf_thickness = 4;\n\n// Lattice pattern parameters\nlattice_spacing = 6;\nlattice_width = 3;\npattern_rows = 8;\npattern_cols = 12;\n\n// Module for table leg\nmodule leg() {\n    difference() {\n        // Main leg\n        translate([-leg_width/2, 0, 0])\n            cube([leg_width, leg_width, leg_height]);\n        \n        // Chamfer at bottom\n        translate([-leg_width/2-1, -1, -1])\n            rotate([0, 45, 0])\n            cube([leg_width+2, leg_width+2, leg_width+2]);\n    }\n}\n\n// Module for mashrabiyya lattice panel\nmodule lattice_panel(width, height) {\n    difference() {\n        // Solid backing panel\n        cube([width, wall_thickness, height]);\n        \n        // Create lattice pattern\n        for (i = [0:pattern_cols-1]) {\n            for (j = [0:pattern_rows-1]) {\n                translate([\n                    i * lattice_spacing + lattice_spacing/2 - lattice_width/2,\n                    -0.5,\n                    j * lattice_spacing + lattice_spacing/2 - lattice_width/2\n                ])\n                cube([lattice_width, wall_thickness+1, lattice_width]);\n            }\n        }\n    }\n}\n\n// Module for tabletop\nmodule tabletop() {\n    difference() {\n        // Main tabletop\n        translate([-top_overhang, -top_overhang, leg_height])\n        cube([table_width + 2*top_overhang, table_depth + 2*top_overhang, top_thickness]);\n        \n        // Rounded edge (simplified with chamfer)\n        translate([-top_overhang-1, -top_overhang-1, leg_height+top_thickness-2])\n            cube([table_width + 2*top_overhang+2, table_depth + 2*top_overhang+2, 2]);\n    }\n}\n\n// Module for lower shelf\nmodule shelf() {\n    translate([0, 0, shelf_height])\n    cube([table_width, table_depth, shelf_thickness]);\n}\n\n// Assemble the table\nunion() {\n    // Four legs\n    translate([leg_width/2, leg_width/2, 0])\n        leg();\n    translate([table_width-leg_width/2, leg_width/2, 0])\n        rotate([0, 0, 90])\n        leg();\n    translate([leg_width/2, table_depth-leg_width/2, 0])\n        rotate([0, 0, 90])\n        leg();\n    translate([table_width-leg_width/2, table_depth-leg_width/2, 0])\n        rotate([0, 0, 180])\n        leg();\n    \n    // Tabletop\n    tabletop();\n    \n    // Lower shelf\n    shelf();\n    \n    // Side lattice panels\n    translate([0, 0, shelf_height+shelf_thickness])\n        lattice_panel(table_width, leg_height - shelf_height - shelf_thickness - top_thickness);\n    \n    translate([0, table_depth-wall_thickness, shelf_height+shelf_thickness])\n        lattice_panel(table_width, leg_height - shelf_height - shelf_thickness - top_thickness);\n    \n    // Back lattice panel\n    rotate([0, 90, 0])\n    translate([0, -table_depth, shelf_height+shelf_thickness])\n        lattice_panel(table_depth, leg_height - shelf_height - shelf_thickness - top_thickness);\n    \n    // Front lattice panel\n    rotate([0, 90, 0])\n    translate([0, 0, shelf_height+shelf_thickness])\n        lattice_panel(table_depth, leg_height - shelf_height - shelf_thickness - top_thickness);\n    \n    // Support rails\n    // Front rail\n    translate([0, 0, shelf_height-2])\n    cube([table_width, 2, 2]);\n    \n    // Back rail\n    translate([0, table_depth-2, shelf_height-2])\n    cube([table_width, 2, 2]);\n    \n    // Side rails\n    translate([0, 0, shelf_height-2])\n    cube([2, table_depth, 2]);\n    \n    translate([table_width-2, 0, shelf_height-2])\n    cube([2, table_depth, 2]);\n}",
    "renders": true
  },
  {
    "furniture": "shoji",
    "openscad_code": "// Shoji Screen Stand - Realistic Medium Complexity\n// Overall dimensions: 120mm height, 80mm width, 40mm depth\n\n$fn = 32;\n\n// Main module\nmodule shoji_stand() {\n    // Base frame\n    base_frame();\n    \n    // Side frames\n    side_frames();\n    \n    // Paper panels\n    paper_panels();\n    \n    // Cross supports\n    cross_supports();\n    \n    // Top rail\n    top_rail();\n}\n\n// Base frame - 100mm x 80mm x 5mm\nmodule base_frame() {\n    difference() {\n        // Main base\n        cube([100, 80, 5], center=true);\n        \n        // Hollow center - 90mm x 70mm x 3mm\n        translate([0, 0, 1])\n            cube([90, 70, 3], center=true);\n    }\n}\n\n// Side frames - vertical posts 100mm x 15mm x 15mm\nmodule side_frames() {\n    // Left side\n    translate([-42.5, -32.5, 52.5])\n        side_post();\n    \n    // Right side\n    translate([42.5, -32.5, 52.5])\n        side_post();\n    \n    // Back left\n    translate([-42.5, 32.5, 52.5])\n        side_post();\n    \n    // Back right\n    translate([42.5, 32.5, 52.5])\n        side_post();\n}\n\nmodule side_post() {\n    difference() {\n        // Post body\n        cube([15, 15, 100], center=true);\n        \n        // Hollow center - 11mm x 11mm x 96mm\n        translate([0, 0, 0])\n            cube([11, 11, 96], center=true);\n    }\n}\n\n// Paper panels - 8mm thick\nmodule paper_panels() {\n    // Front panel\n    translate([0, -32.5, 52.5])\n        paper_panel(70, 96);\n    \n    // Back panel\n    translate([0, 32.5, 52.5])\n        paper_panel(70, 96);\n    \n    // Left panel\n    rotate([0, 90, 0])\n        translate([0, -42.5, 52.5])\n            paper_panel(65, 96);\n    \n    // Right panel\n    rotate([0, 90, 0])\n        translate([0, 42.5, 52.5])\n            paper_panel(65, 96);\n}\n\nmodule paper_panel(width, height) {\n    difference() {\n        // Panel frame\n        cube([width, 8, height], center=true);\n        \n        // Inner grid pattern\n        for (x = [-width/2 + 10 : 15 : width/2 - 10]) {\n            for (y = [-height/2 + 10 : 15 : height/2 - 10]) {\n                translate([x, 0, y])\n                    cube([1, 9, 1], center=true);\n            }\n        }\n        \n        // Paper area - 2mm deep recess\n        translate([0, 2, 0])\n            cube([width - 8, 2, height - 8], center=true);\n    }\n}\n\n// Cross supports\nmodule cross_supports() {\n    // Lower front support\n    translate([0, -32.5, 10])\n        support_bar(85);\n    \n    // Lower back support\n    translate([0, 32.5, 10])\n        support_bar(85);\n    \n    // Upper front support\n    translate([0, -32.5, 95])\n        support_bar(85);\n    \n    // Upper back support\n    translate([0, 32.5, 95])\n        support_bar(85);\n    \n    // Side supports\n    rotate([0, 90, 0])\n        translate([0, -42.5, 52.5])\n            support_bar(65);\n    rotate([0, 90, 0])\n        translate([0, 42.5, 52.5])\n            support_bar(65);\n}\n\nmodule support_bar(length) {\n    difference() {\n        // Bar body\n        cube([length, 8, 8], center=true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cube([length - 4, 4, 4], center=true);\n    }\n}\n\n// Top rail\nmodule top_rail() {\n    difference() {\n        // Main top\n        translate([0, 0, 105])\n            cube([100, 80, 10], center=true);\n        \n        // Hollow center\n        translate([0, 0, 106])\n            cube([90, 70, 6], center=true);\n        \n        // Decorative detail\n        for (x = [-35 : 10 : 35]) {\n            translate([x, 0, 105])\n                cylinder(h=2, r=2, center=true);\n        }\n    }\n}\n\n// Assembly\nshoji_stand();",
    "renders": true
  },
  {
    "furniture": "screen",
    "openscad_code": "// Realistic screen furniture - Medium complexity\n// A folding privacy screen with three panels\n\n// Dimensions in mm\npanel_width = 40;\npanel_height = 70;\npanel_thickness = 2;\nframe_width = 3;\nleg_height = 15;\nfold_gap = 1;\n\nmodule screen_panel() {\n    difference() {\n        // Outer frame\n        union() {\n            // Left vertical frame\n            translate([-panel_width/2, 0, 0])\n                cube([frame_width, panel_thickness, panel_height], center=true);\n            \n            // Right vertical frame\n            translate([panel_width/2, 0, 0])\n                cube([frame_width, panel_thickness, panel_height], center=true);\n            \n            // Top horizontal frame\n            translate([0, 0, panel_height/2 - frame_width/2])\n                cube([panel_width + frame_width*2, panel_thickness, frame_width], center=true);\n            \n            // Bottom horizontal frame\n            translate([0, 0, -panel_height/2 + frame_width/2])\n                cube([panel_width + frame_width*2, panel_thickness, frame_width], center=true);\n        }\n        \n        // Inner panel cutout\n        translate([0, panel_thickness/4, 0])\n            cube([panel_width - frame_width*2, panel_thickness/2, panel_height - frame_width*2], center=true);\n    }\n    \n    // Hinge pins top and bottom\n    translate([panel_width/2 + fold_gap/2, 0, panel_height/2 - 5])\n        cylinder(h=panel_thickness*1.5, r=1.5, center=true);\n    translate([panel_width/2 + fold_gap/2, 0, -panel_height/2 + 5])\n        cylinder(h=panel_thickness*1.5, r=1.5, center=true);\n    \n    // Decorative lattice pattern\n    for(i = [-1:1]) {\n        for(j = [-2:2]) {\n            translate([i*10, 0, j*10])\n                cube([2, panel_thickness/2, 2], center=true);\n        }\n    }\n}\n\nmodule support_leg() {\n    // Front leg\n    translate([0, 5, 0])\n        cube([panel_width/3, 2, leg_height], center=true);\n    \n    // Back brace\n    translate([0, -5, -leg_height/2 + 2])\n        cube([panel_width/3, 2, 4], center=true);\n    \n    // Side braces\n    translate([panel_width/6, 0, -leg_height/2 + 2])\n        rotate([0, 90, 0])\n            cylinder(h=10, r=1, center=true);\n    translate([-panel_width/6, 0, -leg_height/2 + 2])\n        rotate([0, 90, 0])\n            cylinder(h=10, r=1, center=true);\n}\n\n// Main assembly\n// Left panel\nscreen_panel();\nsupport_leg();\n\n// Center panel\ntranslate([panel_width + fold_gap, 0, 0]) {\n    screen_panel();\n    support_leg();\n}\n\n// Right panel\ntranslate([(panel_width + fold_gap)*2, 0, 0]) {\n    screen_panel();\n    support_leg();\n}",
    "renders": true
  },
  {
    "furniture": "partition",
    "openscad_code": "// Realistic 3D-printable partition furniture (room divider)\n// Overall size: 120 mm wide × 100 mm high × 35 mm deep\n// Wall thickness: 2 mm everywhere for easy printing\n\n// Frame module\nmodule frame() {\n    // Bottom rail\n    translate([0, 0, 0])\n        cube([120, 2, 35], center = true);\n\n    // Top rail\n    translate([0, 98, 0])\n        cube([120, 2, 35], center = true);\n\n    // Left post\n    translate([-59, 50, 0])\n        cube([2, 100, 35], center = true);\n\n    // Right post\n    translate([59, 50, 0])\n        cube([2, 100, 35], center = true);\n}\n\n// Lattice panel inside frame\nmodule lattice() {\n    // Vertical slats\n    for (x = [-45:15:45]) {\n        translate([x, 50, 0])\n            cube([2, 96, 2], center = true);\n    }\n\n    // Horizontal slats\n    for (y = [10:10:90]) {\n        translate([0, y, 0])\n            cube([116, 2, 2], center = true);\n    }\n}\n\n// Feet/legs for stability\nmodule feet() {\n    // Left foot\n    translate([-55, -2, 0])\n        cube([10, 4, 5], center = true);\n\n    // Right foot\n    translate([55, -2, 0])\n        cube([10, 4, 5], center = true);\n}\n\n// Connector pegs for joining multiple partitions\nmodule pegs() {\n    // Left peg (male)\n    translate([-60, 30, 0])\n        cylinder(h = 10, d = 4, center = true);\n\n    // Right peg (male)\n    translate([60, 30, 0])\n        cylinder(h = 10, d = 4, center = true);\n\n    // Left socket (female) - subtracted later\n    translate([-60, 70, 0])\n        cylinder(h = 12, d = 6, center = true);\n\n    // Right socket (female) - subtracted later\n    translate([60, 70, 0])\n        cylinder(h = 12, d = 6, center = true);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Structural frame\n        frame();\n\n        // Decorative lattice\n        lattice();\n\n        // Stability feet\n        feet();\n\n        // Connection pegs\n        pegs();\n    }\n\n    // Cut sockets for connecting multiple partitions\n    translate([-60, 70, 0])\n        cylinder(h = 14, d = 4.2, center = true);\n\n    translate([60, 70, 0])\n        cylinder(h = 14, d = 4.2, center = true);\n}",
    "renders": true
  },
  {
    "furniture": "divider",
    "openscad_code": "// Parameters\nwidth = 120;            // Overall width\nheight = 80;            // Overall height\ndepth = 25;             // Overall depth\nwall = 2;               // Wall thickness\nleg_h = 12;             // Leg height\nleg_t = 3;              // Leg thickness\nslat_w = 6;             // Slat width\nslat_gap = 4;           // Gap between slats\nslats = 7;              // Number of vertical slats\npeg_r = 1.5;            // Peg radius for joints\npeg_h = 3;              // Peg height\n\n// Main divider assembly\nmodule divider() {\n    union() {\n        // Bottom rail\n        translate([0, 0, leg_h])\n            cube([width, wall, depth], center=true);\n        \n        // Top rail\n        translate([0, 0, height - leg_h])\n            cube([width, wall, depth], center=true);\n        \n        // Left post\n        translate([-width/2 + wall/2, 0, height/2])\n            cube([wall, depth, height - leg_h*2], center=true);\n        \n        // Right post\n        translate([width/2 - wall/2, 0, height/2])\n            cube([wall, depth, height - leg_h*2], center=true);\n        \n        // Vertical slats\n        for(i = [0:slats-1]) {\n            x = -width/2 + wall + slat_w/2 + i*(slat_w + slat_gap);\n            translate([x, 0, height/2])\n                cube([slat_w, depth, height - leg_h*2], center=true);\n        }\n        \n        // Front legs\n        translate([-width/2 + wall/2, 0, leg_h/2])\n            cube([wall, depth + 2, leg_h], center=true);\n        translate([width/2 - wall/2, 0, leg_h/2])\n            cube([wall, depth + 2, leg_h], center=true);\n        \n        // Back legs\n        translate([-width/2 + wall/2, 0, leg_h/2])\n            cube([wall, depth + 2, leg_h], center=true);\n        translate([width/2 - wall/2, 0, leg_h/2])\n            cube([wall, depth + 2, leg_h], center=true);\n        \n        // Decorative pegs at joints\n        // Top corners\n        translate([-width/2 + wall/2, depth/2, height - leg_h])\n            cylinder(h=peg_h, r=peg_r, center=true);\n        translate([width/2 - wall/2, depth/2, height - leg_h])\n            cylinder(h=peg_h, r=peg_r, center=true);\n        \n        // Bottom corners\n        translate([-width/2 + wall/2, depth/2, leg_h])\n            cylinder(h=peg_h, r=peg_r, center=true);\n        translate([width/2 - wall/2, depth/2, leg_h])\n            cylinder(h=peg_h, r=peg_r, center=true);\n    }\n}\n\n// Generate the divider\ndivider();",
    "renders": true
  },
  {
    "furniture": "accordion",
    "openscad_code": "// Accordion-style side table (folding furniture)\n// Medium complexity realistic design with functional joints\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Overall dimensions (mm)\ntable_height = 70;\ntable_width = 60;\ntable_depth = 40;\nleg_thickness = 4;\nwall_thickness = 2;\n\n// Hinge parameters\nhinge_radius = 3;\nhinge_clearance = 0.4;\n\nmodule table_top() {\n    // Main tabletop surface with rounded edges\n    difference() {\n        // Top surface\n        translate([0, 0, table_height - 4])\n            minkowski() {\n                cube([table_width, table_depth, 4], center = true);\n                sphere(r = 2);\n            }\n        \n        // Lightening holes (reduce material and weight)\n        for (x = [-20, 0, 20])\n            for (y = [-12, 0, 12])\n                translate([x, y, table_height - 2])\n                    cylinder(h = 5, r = 5, center = true);\n    }\n    \n    // Edge trim detail\n    translate([0, 0, table_height - 6])\n        cube([table_width + 2, table_depth + 2, 2], center = true);\n}\n\nmodule leg_structure(side) {\n    // Folding leg assembly\n    mirror([side, 0, 0]) {\n        // Upper leg segment\n        translate([table_width/2 - leg_thickness/2, 0, table_height/2 - 15])\n            rotate([0, 0, -15])\n                cube([leg_thickness, table_depth - 10, 30]);\n        \n        // Lower leg segment\n        translate([table_width/2 - 25, 0, 15])\n            rotate([0, 0, -15])\n                cube([leg_thickness, table_depth - 10, 30]);\n        \n        // Cross brace\n        translate([table_width/2 - 18, 0, 25])\n            rotate([0, 90, 0])\n                cylinder(h = 25, r = leg_thickness/2);\n        \n        // Hinge mechanism\n        translate([table_width/2 - leg_thickness/2 - 12, 0, 30])\n            hinge_assembly();\n    }\n}\n\nmodule hinge_assembly() {\n    // Central hinge pin\n    cylinder(h = table_depth - 8, r = hinge_radius, center = true);\n    \n    // Hinge knuckles\n    for (z = [-12, 0, 12]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 8, r = hinge_radius + 2);\n                cylinder(h = 10, r = hinge_radius + hinge_clearance);\n            }\n    }\n    \n    // Mounting brackets\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle])\n            translate([hinge_radius + 2, 0, 0])\n                cube([4, 8, 2], center = true);\n    }\n}\n\nmodule support_brace() {\n    // X-shaped support structure\n    translate([0, 0, 35])\n        for (angle = [45, -45]) {\n            rotate([0, 0, angle])\n                cube([2, 35, leg_thickness], center = true);\n        }\n}\n\nmodule folding_shelf() {\n    // Accordion-style folding shelf\n    translate([0, 0, 20])\n        difference() {\n            // Main shelf\n            cube([table_width - 20, table_depth - 10, 2], center = true);\n            \n            // Cut pattern for accordion fold\n            for (i = [-1, 0, 1]) {\n                translate([i * 8, 0, 1])\n                    cube([1.5, table_depth - 10, 3], center = true);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    table_top();\n    \n    // Left and right leg structures\n    leg_structure(0);\n    \n    // Support structure\n    support_brace();\n    \n    // Folding shelf\n    folding_shelf();\n    \n    // Non-slip feet\n    for (x = [table_width/2 - 25, table_width/2 - 5])\n        for (y = [table_depth/2 - 8, -table_depth/2 + 8]) {\n            translate([x * 1, y, 0])\n                cylinder(h = 3, r = 4);\n        }\n}",
    "renders": true
  },
  {
    "furniture": "concertina",
    "openscad_code": "// Concertina shelf unit – medium-complexity realistic style\n// 100 mm wide × 70 mm deep × 120 mm high, 2 mm walls, printable without supports\n\n$fn = 36;               // smooth curves\nwall = 2;               // uniform wall / panel thickness\n\n// Overall outer shell\nmodule frame() {\n    difference() {\n        // main box\n        cube([100, 70, 120]);\n        // hollow interior\n        translate([wall, wall, wall])\n            cube([100-2*wall, 70-2*wall, 120-2*wall]);\n    }\n}\n\n// Vertical concertina divider panel\nmodule divider_panel() {\n    // zig-zag profile – 3 full folds\n    linear_extrude(height = 120)\n        polygon(points=[\n            [0,   0],\n            [6,  0],\n            [12, 10],\n            [18, 10],\n            [24, 20],\n            [30, 20],\n            [36, 30],\n            [42, 30],\n            [48, 40],\n            [54, 40],\n            [60, 50],\n            [66, 50],\n            [70, 60]\n        ]);\n}\n\n// Shelf board with rounded front lip\nmodule shelf(z_pos) {\n    translate([0, 0, z_pos])\n    difference() {\n        hull() {\n            // rear block\n            translate([wall, wall, 0])\n                cube([100-2*wall, 70-2*wall, wall]);\n            // front lip with radius\n            translate([wall, wall, 0])\n                cube([100-2*wall, 70-2*wall, 4]);\n            translate([wall + 2, wall + 2, 4])\n                cylinder(h = wall, r = 2);\n            translate([100-wall-2, wall + 2, 4])\n                cylinder(h = wall, r = 2);\n            translate([wall + 2, 70-wall-2, 4])\n                cylinder(h = wall, r = 2);\n            translate([100-wall-2, 70-wall-2, 4])\n                cylinder(h = wall, r = 2);\n        }\n        // screw access hole\n        translate([50, 35, -1])\n            cylinder(h = 6, r = 3);\n    }\n}\n\n// Pin dowels to join shelves to sides\nmodule pin(x, y, z) {\n    translate([x, y, z])\n        cylinder(h = wall*2, r = 1.5);\n}\n\n// Assembly\nframe();\n// place vertical dividers\nfor (i = [1:2]) {\n    translate([i*33.3, 0, 0])\n        divider_panel();\n}\n// place three shelves\nfor (z = [30, 65, 100]) {\n    shelf(z);\n}\n// add locating pins for shelves\nfor (x = [wall+2, 100-wall-2])\n    for (y = [wall+2, 70-wall-2])\n        for (z = [30, 65, 100]) {\n            pin(x, y, z);\n            pin(x, y, z+wall);\n        }",
    "renders": true
  },
  {
    "furniture": "screenfold",
    "openscad_code": "// Screenfold room divider / privacy screen\n// 5-panel bi-fold design, 2 mm wall thickness for 3D printing\n\n$fn = 36;               // global smoothness\n\n// overall dimensions\npanel_w = 40;           // single panel width\npanel_h = 100;          // panel height\npanel_t = 2;            // wall thickness\ngap = 1;                // hinge clearance\nnum_panels = 5;         // total panels\n\n// leg dimensions\nleg_h = 15;             // leg height\nleg_w = 4;\nleg_d = 2;\n\n// hinge pin\npin_r = 1.2;\npin_h = panel_h + 4;\n\nmodule panel() {\n    // outer frame\n    difference() {\n        cube([panel_w, panel_t, panel_h], center = true);\n        // inner cutout for light weight\n        translate([0, 0, 0])\n            cube([panel_w - 2*panel_t, panel_t + 0.1, panel_h - 2*panel_t], center = true);\n    }\n\n    // decorative vertical slats\n    for (x = [-panel_w/2 + 6 : 8 : panel_w/2 - 6]) {\n        translate([x, 0, 0])\n            cube([2, panel_t, panel_h - 8], center = true);\n    }\n\n    // top rail detail\n    translate([0, 0, panel_h/2 - 3])\n        cube([panel_w - 2*panel_t, panel_t, 6], center = true);\n\n    // bottom rail detail\n    translate([0, 0, -panel_h/2 + 3])\n        cube([panel_w - 2*panel_t, panel_t, 6], center = true);\n}\n\nmodule hinge_half() {\n    // hinge leaf\n    translate([-panel_t/2, 0, 0])\n        cube([panel_t, 3, 10], center = true);\n    // knuckles\n    for (z = [-4, 4]) {\n        translate([0, 1.5, z])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r = 1.2, center = true);\n    }\n}\n\nmodule hinge_pin() {\n    rotate([90, 0, 0])\n        cylinder(h = pin_h, r = pin_r, center = true);\n}\n\nmodule leg() {\n    // simple tapered leg\n    hull() {\n        translate([0, -leg_d/2, leg_h/2])\n            cube([leg_w, leg_d, 1], center = true);\n        translate([0, -leg_d/2, -leg_h/2])\n            cube([leg_w*0.8, leg_d*0.8, 1], center = true);\n    }\n}\n\n// build the screenfold\ntranslate([0, 0, leg_h]) {\n    for (i = [0 : num_panels-1]) {\n        xpos = i * (panel_w + gap);\n        translate([xpos, 0, 0]) {\n            panel();\n            // hinges between panels\n            if (i < num_panels-1) {\n                translate([panel_w/2 + gap/2, 0, 0])\n                    hinge_half();\n                translate([panel_w/2 + gap/2, 0, 4])\n                    hinge_pin();\n                translate([panel_w/2 + gap/2, 0, -4])\n                    hinge_pin();\n            }\n        }\n    }\n}\n\n// add legs under first and last panel\ntranslate([-panel_w/2, 0, 0])\n    leg();\ntranslate([(num_panels-1)*panel_w + (num_panels-1)*gap + panel_w/2, 0, 0])\n    leg();",
    "renders": true
  },
  {
    "furniture": "paravent",
    "openscad_code": "// Paravent / Room Divider – realistic style, medium complexity\n// 5 panels, hinged, printable at ~120 mm tall\n// wall thickness = 2 mm, no overhangs >45°\n\n$fn=32;\n\n// overall settings\npanel_w   = 22;   // width of one panel\npanel_h   = 100;  // height\npanel_t   = 2;    // panel thickness\nleg_h     = 10;   // short feet\nhinge_r   = 3;    // dowel radius\ngap       = 0.3;  // print clearance\n\n// number of panels\npanels = 5;\n\n// helper – one panel\nmodule single_panel() {\n    difference() {\n        // main board\n        cube([panel_w, panel_t, panel_h - leg_h]);\n\n        // decorative rectangular cut-outs (3 rows, 2 cols)\n        for (j=[0:1]) for (i=[0:2]) {\n            translate([5 + i*6, -0.5, 15 + j*25])\n                cube([4, panel_t+1, 15]);\n        }\n\n        // simple circular vent holes\n        for (k=[0:3]) {\n            translate([panel_w/2, -0.5, 20 + k*15])\n                rotate([0,90,0])\n                    cylinder(h=panel_t+1, r=2.5, center=true);\n        }\n    }\n\n    // bottom rail (thicker for strength)\n    translate([0,0,leg_h/2])\n        cube([panel_w, panel_t, leg_h], center=true);\n\n    // small feet – rounded ends printable without supports\n    translate([panel_w/2, panel_t/2, 0])\n        cylinder(h=leg_h, r=panel_t, center=false);\n    translate([panel_w/2, -panel_t/2, 0])\n        cylinder(h=leg_h, r=panel_t, center=false);\n}\n\n// helper – simple hinge pin\nmodule hinge_pin(l=panel_t+gap*2) {\n    cylinder(h=l, r=hinge_r, center=true);\n}\n\n// helper – hinge knuckles\nmodule knuckles() {\n    // 3 knuckles per side\n    for (z=[0:2]) {\n        translate([0, 0, 10 + z*30])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=6, r=hinge_r+1.5, center=true);\n                    cylinder(h=6+0.2, r=hinge_r, center=true);\n                }\n    }\n}\n\n// full paravent assembly\nunion() {\n    // panels & hinges\n    for (i=[0:panels-1]) {\n        translate([i*panel_w + i*hinge_r*2 + i*gap, 0, 0])\n            single_panel();\n\n        // hinges between panels\n        if (i < panels-1) {\n            // left knuckles\n            translate([i*panel_w + panel_w + hinge_r, 0, 0])\n                mirror([1,0,0])\n                    knuckles();\n\n            // right knuckles\n            translate([i*panel_w + panel_w + hinge_r, 0, 0])\n                knuckles();\n\n            // hinge pin\n            translate([i*panel_w + panel_w + hinge_r, 0, 10 + 1*30])\n                hinge_pin();\n            translate([i*panel_w + panel_w + hinge_r, 0, 10 + 0*30])\n                hinge_pin();\n            translate([i*panel_w + panel_w + hinge_r, 0, 10 + 2*30])\n                hinge_pin();\n        }\n    }\n}",
    "renders": true
  },
  {
    "furniture": "roomscreen",
    "openscad_code": "// OpenSCAD Room Screen (folding privacy screen)\n// Medium complexity, realistic style, 3D-printable\n\n// Overall dimensions (mm)\nframe_h = 60;\nframe_w = 25;\npanel_t = 2;      // wall thickness\nleg_d = 3;\nhinge_r = 2;\nhinge_h = 8;\nnum_panels = 3;\n\n// Print-friendly clearances\nclearance = 0.4;\n\n// One frame panel (outer rectangle with hollow center)\nmodule frame_panel() {\n    difference() {\n        // Outer frame\n        cube([frame_w, frame_t = 2, frame_h], center = true);\n        \n        // Inner cutout\n        translate([0, 0, 0])\n        cube([frame_w - 2*panel_t, frame_t + 0.1, frame_h - 2*panel_t], center = true);\n    }\n    \n    // Top cross-bar\n    translate([0, 0, frame_h/2 - panel_t/2])\n    cube([frame_w, panel_t, panel_t], center = true);\n    \n    // Bottom cross-bar\n    translate([0, 0, -frame_h/2 + panel_t/2])\n    cube([frame_w, panel_t, panel_t], center = true);\n    \n    // Left vertical bar\n    translate([-frame_w/2 + panel_t/2, 0, 0])\n    cube([panel_t, panel_t, frame_h], center = true);\n    \n    // Right vertical bar\n    translate([frame_w/2 - panel_t/2, 0, 0])\n    cube([panel_t, panel_t, frame_h], center = true);\n}\n\n// Decorative lattice insert for inside frame\nmodule lattice() {\n    // Thin diagonal slats (no overhangs)\n    for (i = [-2:2]) {\n        rotate([0, 0, 45]) {\n            translate([i*4, 0, 0])\n            cube([1.5, panel_t + 0.1, 30], center = true);\n        }\n    }\n    \n    for (i = [-2:2]) {\n        rotate([0, 0, -45]) {\n            translate([i*4, 0, 0])\n            cube([1.5, panel_t + 0.1, 30], center = true);\n        }\n    }\n}\n\n// Hinge cylinder (pin)\nmodule hinge_pin() {\n    cylinder(r = hinge_r, h = hinge_h, $fn = 16);\n}\n\n// Full panel assembly\nmodule single_panel() {\n    // Frame\n    frame_panel();\n    \n    // Lattice inside frame (shifted slightly forward)\n    translate([0, panel_t/2 + 0.5, 0])\n    lattice();\n    \n    // Two small feet/legs at bottom corners\n    translate([-frame_w/2 + leg_d/2, 0, -frame_h/2 - leg_d/2])\n    cube([leg_d, panel_t, leg_d], center = true);\n    \n    translate([frame_w/2 - leg_d/2, 0, -frame_h/2 - leg_d/2])\n    cube([leg_d, panel_t, leg_d], center = true);\n    \n    // Hinge knuckles at left edge\n    translate([-frame_w/2 - hinge_r - clearance, 0, frame_h/3])\n    hinge_pin();\n    \n    translate([-frame_w/2 - hinge_r - clearance, 0, -frame_h/3])\n    hinge_pin();\n    \n    // Hinge knuckles at right edge (offset for interleaving)\n    translate([frame_w/2 + hinge_r + clearance, 0, frame_h/6])\n    hinge_pin();\n    \n    translate([frame_w/2 + hinge_r + clearance, 0, -frame_h/6])\n    hinge_pin();\n}\n\n// Assemble entire room screen\nfor (i = [0:num_panels-1]) {\n    translate([i * (frame_w + 2*hinge_r + 2*clearance), 0, 0])\n    rotate([0, 0, i * 20])  // slight zig-zag fold\n    single_panel();\n}",
    "renders": true
  },
  {
    "furniture": "firescreen",
    "openscad_code": "// Firescreen - Traditional 3-panel folding fireplace screen\n// Overall dimensions: 120mm wide x 80mm high x 25mm deep when folded\n\n// Panel dimensions\npanel_width = 38;\npanel_height = 75;\npanel_thickness = 2;\nframe_width = 3;\n\n// Leg dimensions\nleg_height = 5;\nleg_width = 2;\nleg_taper = 1;\n\n// Hinge dimensions\nhinge_radius = 2;\nhinge_height = 6;\n\nmodule frame_stile(length, width, height) {\n    // Vertical frame member with simple chamfer\n    translate([0, 0, height/2])\n    difference() {\n        cube([width, width, height], center=true);\n        // Top chamfer\n        translate([0, 0, height/2 - width/2])\n        rotate([45, 0, 0])\n        cube([width*1.5, width*1.5, width], center=true);\n    }\n}\n\nmodule frame_rail(length, width, height) {\n    // Horizontal frame member\n    translate([length/2, 0, 0])\n    cube([length, width, height], center=false);\n}\n\nmodule decorative_panel(width, height, thickness) {\n    // Decorative mesh pattern created with small holes\n    difference() {\n        // Panel base\n        cube([width, thickness, height]);\n        \n        // Mesh pattern - rows of offset holes\n        for (row = [1:3]) {\n            for (col = [1:8]) {\n                x = col * (width/9);\n                y_offset = (row % 2) ? 0 : thickness/2;\n                translate([x, thickness/2 + y_offset, row * (height/4)])\n                cylinder(h=thickness+1, r=1.5, center=true, $fn=8);\n            }\n        }\n    }\n}\n\nmodule panel() {\n    // Complete panel assembly\n    difference() {\n        // Main frame outline\n        union() {\n            // Left stile\n            translate([frame_width/2, panel_thickness/2, panel_height/2])\n            frame_stile(frame_width, frame_width, panel_height);\n            \n            // Right stile\n            translate([panel_width - frame_width/2, panel_thickness/2, panel_height/2])\n            frame_stile(frame_width, frame_width, panel_height);\n            \n            // Top rail\n            translate([frame_width/2, panel_thickness/2, panel_height - frame_width/2])\n            frame_rail(panel_width - frame_width, frame_width, frame_width);\n            \n            // Bottom rail\n            translate([frame_width/2, panel_thickness/2, frame_width/2])\n            frame_rail(panel_width - frame_width, frame_width, frame_width);\n            \n            // Center support\n            translate([panel_width/2, panel_thickness/2, panel_height/2])\n            frame_stile(frame_width, frame_width, panel_height - 2*frame_width);\n        }\n        \n        // Recess for decorative panel\n        translate([frame_width, panel_thickness/2, frame_width])\n        cube([panel_width - 2*frame_width, panel_thickness+1, panel_height - 2*frame_width]);\n    }\n    \n    // Insert decorative panel\n    translate([frame_width, 0, frame_width])\n    decorative_panel(panel_width - 2*frame_width, panel_height - 2*frame_width, panel_thickness);\n}\n\nmodule leg() {\n    // Simple tapered leg for stability\n    linear_extrude(height=leg_height, scale=[1, leg_taper/leg_width], center=false)\n    square([leg_width, leg_width], center=true);\n}\n\nmodule hinge() {\n    // Simple cylindrical hinge\n    cylinder(h=hinge_height, r=hinge_radius, $fn=16);\n}\n\nmodule screen_panel() {\n    // Complete screen panel with legs\n    union() {\n        // Main panel\n        translate([0, 0, leg_height])\n        panel();\n        \n        // Left legs\n        translate([frame_width, 0, leg_height/2])\n        leg();\n        translate([frame_width, panel_thickness, leg_height/2])\n        leg();\n        \n        // Right legs\n        translate([panel_width - frame_width, 0, leg_height/2])\n        leg();\n        translate([panel_width - frame_width, panel_thickness, leg_height/2])\n        leg();\n    }\n}\n\n// Assembly - three panels with hinges\n// Center panel\nscreen_panel();\n\n// Left panel with hinges\ntranslate([-hinge_radius*2 - panel_width, 0, 0])\nrotate([0, 0, -30])\nunion() {\n    screen_panel();\n    \n    // Hinges\n    translate([panel_width, panel_thickness, leg_height + 15])\n    hinge();\n    translate([panel_width, panel_thickness, leg_height + panel_height - 15])\n    hinge();\n}\n\n// Right panel with hinges\ntranslate([panel_width + hinge_radius*2, 0, 0])\nrotate([0, 0, 30])\nunion() {\n    screen_panel();\n    \n    // Hinges\n    translate([0, panel_thickness, leg_height + 15])\n    hinge();\n    translate([0, panel_thickness, leg_height + panel_height - 15])\n    hinge();\n}",
    "renders": true
  },
  {
    "furniture": "pierglass",
    "openscad_code": "// Realistic medium-complexity pierglass (tall narrow wall mirror)\n// Overall size: 60 mm wide × 100 mm tall × 10 mm deep\n\n$fn = 36;\n\nmodule pierglass() {\n    // Main frame outer dimensions\n    frame_w = 60;\n    frame_h = 100;\n    frame_d = 10;\n    \n    // Wall thickness\n    wall = 2;\n    \n    // Mirror dimensions\n    mirror_w = frame_w - 2*wall - 4;\n    mirror_h = frame_h - 2*wall - 4;\n    mirror_d = 1;\n    \n    // Base/stand\n    base_w = 70;\n    base_h = 8;\n    base_d = 15;\n    \n    // Crown molding\n    crown_w = frame_w + 10;\n    crown_h = 8;\n    crown_d = 4;\n    \n    union() {\n        // Crown molding with repeating dentil detail\n        translate([0, frame_h/2, 0])\n        difference() {\n            cube([crown_w, crown_h, crown_d], center=true);\n            translate([0, -crown_h/2+wall, crown_d/2-wall])\n            cube([crown_w-wall*2, wall, wall], center=true);\n        }\n        \n        // Top dentil pattern\n        for(i=[-crown_w/2+5 : 5 : crown_w/2-5]) {\n            translate([i, frame_h/2+crown_h/2-wall, 0])\n            cube([3, wall, crown_d], center=true);\n        }\n        \n        // Main frame body\n        difference() {\n            cube([frame_w, frame_h, frame_d], center=true);\n            // Hollow out back\n            translate([0, 0, -wall/2])\n            cube([frame_w-wall*2, frame_h-wall*2, frame_d+1], center=true);\n        }\n        \n        // Mirror glass\n        translate([0, 0, frame_d/2 - mirror_d/2 - wall])\n        cube([mirror_w, mirror_h, mirror_d], center=true);\n        \n        // Decorative inner frame lip\n        translate([0, 0, frame_d/2 - wall - mirror_d - 0.5])\n        difference() {\n            cube([mirror_w+2, mirror_h+2, 1], center=true);\n            cube([mirror_w, mirror_h, 2], center=true);\n        }\n        \n        // Base stand\n        translate([0, -frame_h/2-base_h/2, 0])\n        difference() {\n            cube([base_w, base_h, base_d], center=true);\n            // Hollow base\n            translate([0, 0, -wall/2])\n            cube([base_w-wall*2, base_h-wall, base_d-wall*2], center=true);\n        }\n        \n        // Ornate scroll supports\n        translate([frame_w/2+2, -frame_h/2-base_h/2-5, 0])\n        rotate([0, 0, -30])\n        cylinder(h=15, r1=2, r2=1);\n        translate([-frame_w/2-2, -frame_h/2-base_h/2-5, 0])\n        rotate([0, 0, 30])\n    cylinder(h=15, r1=2, r2=1);\n    }\n}\n\npierglass();",
    "renders": true
  },
  {
    "furniture": "overmantel",
    "openscad_code": "// Overmantel (fireplace mantel top shelf) 1:24 dollhouse scale\n// Overall size 120 mm wide x 35 mm high x 25 mm deep\n// Wall thickness 2 mm for 3D printing\n\n$fn = 32;\n\nmodule mantel_top() {\n    // main shelf board 120x25x4 mm\n    translate([0, 0, 31])\n        cube([120, 25, 4], center = true);\n}\n\nmodule frieze_panel() {\n    // recessed panel between shelf and legs\n    difference() {\n        // outer frame 116x20x12 mm\n        translate([0, 0, 23])\n            cube([116, 20, 12], center = true);\n        // recess 110x14x10 mm\n        translate([0, 0, 24])\n            cube([110, 14, 10], center = true);\n    }\n}\n\nmodule leg(left = true) {\n    // side leg 8x20x30 mm\n    x = left ? -54 : 54;\n    difference() {\n        // leg body\n        translate([x, 0, 15])\n            cube([8, 20, 30], center = true);\n        // decorative cutout 4x10x20 mm\n        translate([x, 0, 15])\n            cube([4, 10, 20], center = true);\n    }\n}\n\nmodule corbel(left = true) {\n    // decorative bracket under shelf\n    x = left ? -48 : 48;\n    union() {\n        // vertical part\n        translate([x, 9.5, 28])\n            cube([6, 2, 6], center = true);\n        // angled brace\n        translate([x, 5.5, 25])\n            rotate([0, -45, 0])\n            cube([6, 2, 4.24], center = true);\n    }\n}\n\nmodule back_panel() {\n    // rear wall for mounting\n    translate([0, -13.5, 15])\n        cube([120, 2, 30], center = true);\n}\n\nmodule dentil_molding() {\n    // small tooth-like blocks under shelf\n    for (i = [-55:5:55])\n        translate([i, 12.5, 29.5])\n            cube([3, 1, 2], center = true);\n}\n\n// assemble the overmantel\nunion() {\n    mantel_top();\n    frieze_panel();\n    leg(true);\n    leg(false);\n    corbel(true);\n    corbel(false);\n    back_panel();\n    dentil_molding();\n}",
    "renders": true
  },
  {
    "furniture": "trumeau",
    "openscad_code": "// Trumeau Mirror Cabinet - Realistic Style, Medium Complexity\n// A trumeau is a decorative wall-mounted mirror with a small cabinet below\n\n// Overall dimensions in mm\noverall_height = 120;\noverall_width = 80;\noverall_depth = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Mirror frame dimensions\nmirror_height = 65;\nmirror_width = 60;\nframe_thickness = 3;\n\n// Cabinet dimensions\ncabinet_height = 35;\ncabinet_width = 50;\ncabinet_depth = 20;\n\n// Base molding\nbase_height = 8;\nbase_width = overall_width;\n\n// Crown molding\ncrown_height = 10;\n\n// Module for creating a frame with inner cutout\nmodule frame(outer_w, outer_h, inner_w, inner_h, thickness) {\n    difference() {\n        // Outer frame\n        cube([outer_w, outer_h, thickness]);\n        \n        // Inner cutout for mirror\n        translate([thickness, thickness, -0.1])\n            cube([inner_w, inner_h, thickness + 0.2]);\n    }\n}\n\n// Module for creating fluted pilasters\nmodule pilaster(height, width, depth) {\n    union() {\n        // Main pilaster body\n        translate([0, 0, 0])\n            cube([width, height, depth]);\n        \n        // Fluting details\n        flutes = 4;\n        flute_width = (width - wall_thickness) / flutes;\n        for (i = [0:flutes-1]) {\n            translate([wall_thickness + i * flute_width + flute_width/2 - 0.5, wall_thickness, -0.1])\n                cube([1, height - 2*wall_thickness, depth + 0.2]);\n        }\n    }\n}\n\n// Module for creating cabinet door\nmodule cabinet_door(width, height, thickness) {\n    difference() {\n        // Door panel\n        cube([width, height, thickness]);\n        \n        // Panel recess\n        translate([wall_thickness*2, wall_thickness*2, -0.1])\n            cube([width - wall_thickness*4, height - wall_thickness*4, thickness + 0.2]);\n        \n        // Door knob hole\n        translate([width - wall_thickness*3, height/2, thickness/2])\n            cylinder(h=thickness+1, r=1.5, $fn=16);\n    }\n}\n\n// Base molding profile\nmodule base_molding(width, height, depth) {\n    difference() {\n        // Main base\n        cube([width, height, depth]);\n        \n        // Decorative curve\n        for (i = [0:width/2-1]) {\n            translate([i*2 + 1, height - 2, -0.1])\n                cylinder(h=depth+0.2, r=1, $fn=16);\n        }\n    }\n}\n\n// Crown molding profile\nmodule crown_molding(width, height, depth) {\n    union() {\n        // Bottom tier\n        translate([0, 0, 0])\n            cube([width, height/2, depth]);\n        \n        // Top tier\n        translate([-2, height/2, -2])\n            cube([width+4, height/2, depth+4]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Crown molding\n    translate([0, overall_height - crown_height, 0])\n        crown_molding(overall_width, crown_height, overall_depth);\n    \n    // Mirror frame with pilasters\n    translate([(overall_width - mirror_width - 20)/2, overall_height - mirror_height - crown_height - 5, 0]) {\n        // Left pilaster\n        pilaster(mirror_height, 10, overall_depth);\n        \n        // Right pilaster\n        translate([mirror_width + 10, 0, 0])\n            pilaster(mirror_height, 10, overall_depth);\n        \n        // Mirror frame\n        translate([10, 0, 0])\n            frame(mirror_width, mirror_height, mirror_width - 2*frame_thickness, mirror_height - 2*frame_thickness, frame_thickness);\n    }\n    \n    // Cabinet body\n    translate([(overall_width - cabinet_width)/2, overall_height - mirror_height - crown_height - cabinet_height - 10, 0]) {\n        // Cabinet frame\n        difference() {\n            cube([cabinet_width, cabinet_height, cabinet_depth]);\n            translate([wall_thickness, wall_thickness, -0.1])\n                cube([cabinet_width - 2*wall_thickness, cabinet_height - 2*wall_thickness, cabinet_depth + 0.2]);\n        }\n        \n        // Cabinet door\n        translate([wall_thickness, wall_thickness, cabinet_depth - wall_thickness])\n            cabinet_door(cabinet_width - 2*wall_thickness, cabinet_height - 2*wall_thickness, wall_thickness);\n        \n        // Door knob\n        translate([cabinet_width - wall_thickness*4, cabinet_height/2, cabinet_depth + 1])\n            sphere(r=2, $fn=16);\n    }\n    \n    // Base molding\n    translate([0, 0, 0])\n        base_molding(base_width, base_height, overall_depth);\n    \n    // Back panel for mounting\n    translate([wall_thickness/2, wall_thickness/2, -wall_thickness])\n        cube([overall_width - wall_thickness, overall_height - wall_thickness, wall_thickness]);\n}",
    "renders": true
  },
  {
    "furniture": "girandole",
    "openscad_code": "// Girandole - ornate candle holder / wall sconce\n// Medium complexity, realistic style, 3D printable\n// Dimensions: ~100mm tall, 70mm wide, 35mm deep\n\n// Overall parameters\nbase_width = 70;\nbase_height = 8;\nbase_depth = 35;\n\nwall_mount_width = 40;\nwall_mount_height = 25;\nwall_mount_thickness = 4;\n\narm_length = 45;\narm_diameter = 6;\narm_count = 3;\n\ncandle_diameter = 12;\ncandle_height = 18;\ncandle_holder_height = 8;\ncandle_holder_diameter = 16;\n\nornament_size = 12;\n\n$fn = 32;\n\n// Main assembly\nunion() {\n    // Wall mounting plate\n    translate([0, base_depth/2 - wall_mount_thickness/2, base_height/2]) {\n        difference() {\n            // Mounting plate\n            cube([wall_mount_width, wall_mount_thickness, wall_mount_height], center=true);\n            \n            // Screw holes (2mm diameter, 3mm deep)\n            translate([wall_mount_width/4, 0, wall_mount_height/4])\n                cylinder(h=wall_mount_thickness+1, d=2.2, center=true);\n            translate([-wall_mount_width/4, 0, wall_mount_height/4])\n                cylinder(h=wall_mount_thickness+1, d=2.2, center=true);\n            translate([wall_mount_width/4, 0, -wall_mount_height/4])\n                cylinder(h=wall_mount_thickness+1, d=2.2, center=true);\n            translate([-wall_mount_width/4, 0, -wall_mount_height/4])\n                cylinder(h=wall_mount_thickness+1, d=2.2, center=true);\n        }\n    }\n    \n    // Decorative base\n    translate([0, 0, base_height/2]) {\n        difference() {\n            // Main base block\n            cube([base_width, base_depth, base_height], center=true);\n            \n            // Rounded edges using difference\n            translate([base_width/2 - 5, 0, base_height/2])\n                sphere(d=10);\n            translate([-base_width/2 + 5, 0, base_height/2])\n                sphere(d=10);\n        }\n        \n        // Decorative ridges\n        for (i = [-1, 0, 1]) {\n            translate([i * 20, 0, base_height - 2])\n                cube([3, base_depth - 6, 2], center=true);\n        }\n    }\n    \n    // Central column\n    translate([0, 0, base_height + 15]) {\n        cylinder(h=30, d1=8, d2=6, center=false);\n        \n        // Central ornament\n        translate([0, 0, 25])\n            sphere(d=ornament_size);\n    }\n    \n    // Candle holding arms\n    module candle_arm(angle, height) {\n        rotate([0, 0, angle]) {\n            // Arm structure\n            translate([0, 0, height]) {\n                rotate([90, 0, 0])\n                    cylinder(h=arm_length, d=arm_diameter, center=false);\n                \n                // Arm support\n                translate([arm_length/2, 0, 0])\n                    rotate([0, 0, -45])\n                    cube([arm_length/2, arm_diameter, arm_diameter], center=true);\n                \n                // Candle holder\n                translate([arm_length - 5, 0, 0]) {\n                    // Drip tray\n                    cylinder(h=candle_holder_height, d1=candle_holder_diameter, d2=candle_holder_diameter + 2);\n                    \n                    // Candle socket\n                    translate([0, 0, candle_holder_height])\n                        cylinder(h=candle_height, d=candle_diameter, center=false);\n                    \n                    // Decorative ring\n                    translate([0, 0, candle_holder_height/2])\n                        cylinder(h=2, d=candle_holder_diameter + 4);\n                }\n            }\n        }\n    }\n    \n    // Three arms at 120 degree intervals\n    for (i = [0, 1, 2]) {\n        candle_arm(i * 120, base_height + 30);\n    }\n}\n\n// Bottom decorative feet\nmodule foot(x_pos) {\n    translate([x_pos, 0, 0]) {\n        // Main foot\n        translate([0, base_depth/2 - 5, base_height/2 - 2])\n            cube([8, 10, 4], center=true);\n        \n        // Decorative ball\n        translate([0, base_depth/2 - 5, 1])\n            sphere(d=6);\n    }\n}\n\nfoot(base_width/3);\nfoot(-base_width/3);",
    "renders": true
  },
  {
    "furniture": "torchere",
    "openscad_code": "// Realistic Torchere Lamp (Medium complexity)\n// Height: 120mm, Base diameter: 50mm, Shade diameter: 40mm\n\n$fn = 36;\nwall_thickness = 2;\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Stem\n    stem();\n    \n    // Adjustable joint\n    joint();\n    \n    // Lamp shade\n    shade();\n    \n    // Bulb socket\n    socket();\n}\n\n// Decorative base with weight and stability\nmodule base() {\n    // Main base cylinder\n    cylinder(h = 8, d = 50, $fn = 60);\n    \n    // Decorative stepped rings\n    for (i = [1:3]) {\n        translate([0, 0, 8 + (i-1)*2])\n            cylinder(h = 2, d = 50 - (i*5), $fn = 60);\n    }\n    \n    // Bottom pad for stability\n    translate([0, 0, -1])\n        cylinder(h = 1, d = 48, $fn = 60);\n}\n\n// Main stem with decorative elements\nmodule stem() {\n    // Lower thick section\n    translate([0, 0, 14])\n        cylinder(h = 70, d = 8, $fn = 20);\n    \n    // Middle decorative ring\n    translate([0, 0, 50])\n        cylinder(h = 4, d = 12, $fn = 20);\n    \n    // Upper thinner section\n    translate([0, 0, 84])\n        cylinder(h = 20, d = 6, $fn = 20);\n}\n\n// Adjustable joint mechanism\nmodule joint() {\n    // Ball joint base\n    translate([0, 0, 104])\n        sphere(d = 10);\n    \n    // Joint housing\n    translate([0, 0, 104])\n        difference() {\n            sphere(d = 12);\n            sphere(d = 8);\n        }\n    \n    // Joint arm\n    rotate([30, 0, 0])\n        translate([0, 0, 109])\n            cylinder(h = 15, d1 = 6, d2 = 4);\n}\n\n// Fabric lampshade with realistic proportions\nmodule shade() {\n    rotate([30, 0, 0])\n        translate([0, 0, 124])\n            difference() {\n                // Outer shade\n                cylinder(h1 = 30, h2 = 25, d1 = 40, d2 = 30);\n                \n                // Inner hollow for bulb\n                translate([0, 0, -1])\n                    cylinder(h1 = 32, h2 = 27, d1 = 36, d2 = 26);\n                \n                // Top opening\n                translate([0, 0, 24])\n                    cylinder(h = 5, d = 20);\n            }\n}\n\n// Bulb socket detail\nmodule socket() {\n    rotate([30, 0, 0])\n        translate([0, 0, 124])\n            cylinder(h = 10, d = 12);\n    \n    // Socket threads\n    rotate([30, 0, 0])\n        for (i = [0:5:25])\n            translate([0, 0, 124 + i])\n                cylinder(h = 3, d = 11.5);\n}",
    "renders": true
  },
  {
    "furniture": "candelabra",
    "openscad_code": "// Candelabra - Realistic Medium Complexity\n// Dimensions: 120mm wide x 70mm deep x 90mm tall\n\n$fn = 36;\n\n// Main parameters\nbase_width = 80;\nbase_depth = 50;\nbase_height = 8;\nstem_diameter = 12;\nstem_height = 40;\narm_count = 3;\narm_length = 45;\narm_thickness = 6;\ncandle_diameter = 8;\ncandle_height = 15;\ndrip_height = 3;\n\nmodule candelabra() {\n    // Base with decorative molding\n    difference() {\n        // Main base block\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Chamfer bottom edges\n        translate([0, 0, -base_height/2 + 2])\n            cube([base_width+1, base_depth+1, 2], center=true);\n            \n        // Recessed center\n        translate([0, 0, -base_height/2 + 1])\n            cube([base_width-20, base_depth-20, 2], center=true);\n    }\n    \n    // Central stem\n    translate([0, 0, base_height/2 + stem_height/2])\n        cylinder(d=stem_diameter, h=stem_height, center=true);\n    \n    // Decorative collar at stem base\n    translate([0, 0, base_height/2 + 2])\n        cylinder(d=stem_diameter + 6, h=4, center=true);\n    \n    // Arms module\n    module arm(angle, length) {\n        rotate([0, 0, angle])\n        translate([0, stem_diameter/2 + 2, base_height/2 + stem_height - 15])\n        union() {\n            // Horizontal arm\n            translate([length/2, 0, 0])\n                cube([length, arm_thickness, arm_thickness], center=true);\n            \n            // Arm support brace\n            translate([length/4, 0, -arm_thickness/2 - 2])\n                cube([length/2, arm_thickness, 4], center=true);\n            \n            // Candle holder cup\n            translate([length, 0, arm_thickness/2 + candle_height/2])\n                difference() {\n                    cylinder(d=candle_diameter + 4, h=candle_height, center=true);\n                    translate([0, 0, -candle_height/2 + 2])\n                        cylinder(d=candle_diameter + 1, h=candle_height, center=true);\n                }\n            \n            // Candle\n            translate([length, 0, arm_thickness/2 + candle_height + candle_height/2])\n                cylinder(d=candle_diameter, h=candle_height, center=true);\n            \n            // Wax drip detail\n            translate([length, 0, arm_thickness/2 + candle_height*2 + drip_height/2])\n                scale([1, 0.8, 1])\n                    sphere(d=candle_diameter + 2, center=true);\n        }\n    }\n    \n    // Create three arms at 120 degree intervals\n    for(i = [0:arm_count-1]) {\n        arm(i * 120, arm_length);\n    }\n    \n    // Central candle holder\n    translate([0, 0, base_height/2 + stem_height + candle_height/2])\n        difference() {\n            cylinder(d=candle_diameter + 6, h=candle_height, center=true);\n            translate([0, 0, -candle_height/2 + 2])\n                cylinder(d=candle_diameter + 1, h=candle_height, center=true);\n        }\n    \n    // Central candle\n    translate([0, 0, base_height/2 + stem_height + candle_height + candle_height/2])\n        cylinder(d=candle_diameter, h=candle_height, center=true);\n    \n    // Central wax drip\n    translate([0, 0, base_height/2 + stem_height + candle_height*2 + drip_height/2])\n        scale([1, 0.8, 1])\n            sphere(d=candle_diameter + 2, center=true);\n}\n\ncandelabra();",
    "renders": true
  },
  {
    "furniture": "lantern",
    "openscad_code": "// Realistic medium-complexity lantern furniture\n// Overall dimensions: 70mm x 70mm x 120mm\n\n$fn = 30;\n\n// Main lantern body\nmodule lantern_body() {\n    difference() {\n        // Outer shell\n        cube([60, 60, 90], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            cube([56, 56, 86], center = true);\n    }\n}\n\n// Top cap with handle\nmodule top_cap() {\n    union() {\n        // Cap\n        translate([0, 0, 48])\n            cube([64, 64, 6], center = true);\n        \n        // Handle supports\n        for(x = [-20, 20]) {\n            translate([x, 0, 55])\n                cylinder(h = 15, r = 2);\n        }\n        \n        // Handle bar\n        translate([0, 0, 70])\n            rotate([90, 0, 0])\n                cylinder(h = 45, r = 2);\n    }\n}\n\n// Base with legs\nmodule base_with_legs() {\n    union() {\n        // Base platform\n        translate([0, 0, -50])\n            cube([64, 64, 6], center = true);\n        \n        // Four legs\n        for(x = [-25, 25])\n            for(y = [-25, 25]) {\n                translate([x, y, -65])\n                    cylinder(h = 15, r = 3);\n            }\n    }\n}\n\n// Window frames\nmodule window_frames() {\n    // Front and back windows\n    for(y = [-29, 29]) {\n        // Outer frame\n        translate([0, y, 0])\n            difference() {\n                cube([52, 4, 80], center = true);\n                translate([0, 0, 0])\n                    cube([48, 5, 76], center = true);\n            }\n        \n        // Inner grid\n        for(i = [-20, 0, 20]) {\n            translate([i, y, 0])\n                cube([2, 4, 76], center = true);\n        }\n        for(i = [-30, -10, 10, 30]) {\n            translate([0, y, i])\n                cube([48, 4, 2], center = true);\n        }\n    }\n    \n    // Left and right windows\n    for(x = [-29, 29]) {\n        // Outer frame\n        translate([x, 0, 0])\n            difference() {\n                cube([4, 52, 80], center = true);\n                translate([0, 0, 0])\n                    cube([5, 48, 76], center = true);\n            }\n        \n        // Inner grid\n        for(i = [-20, 0, 20]) {\n            translate([x, i, 0])\n                cube([4, 2, 76], center = true);\n        }\n        for(i = [-30, -10, 10, 30]) {\n            translate([x, 0, i])\n                cube([4, 48, 2], center = true);\n        }\n    }\n}\n\n// Door with hinges\nmodule door() {\n    translate([30, 0, 0])\n    union() {\n        // Door panel\n        translate([0, 0, 0])\n            cube([2, 20, 60], center = true);\n        \n        // Door handle\n        translate([2, 8, 0])\n            cylinder(h = 8, r = 2);\n        \n        // Hinges\n        for(z = [-25, 0, 25]) {\n            translate([-2, 12, z])\n                cylinder(h = 4, r = 1.5);\n        }\n    }\n}\n\n// Candle holder inside\nmodule candle_holder() {\n    translate([0, 0, -20])\n    union() {\n        // Holder base\n        cylinder(h = 5, r = 10);\n        \n        // Candle socket\n        translate([0, 0, 5])\n            cylinder(h = 8, r1 = 8, r2 = 6);\n        \n        // Drip tray\n        translate([0, 0, 2])\n            cylinder(h = 1, r = 12);\n    }\n}\n\n// Assembly\nunion() {\n    lantern_body();\n    top_cap();\n    base_with_legs();\n    window_frames();\n    door();\n    candle_holder();\n}",
    "renders": true
  },
  {
    "furniture": "lampstand",
    "openscad_code": "// Realistic-style medium-complexity lampstand\n// All dimensions in mm\nwall = 2;\n\nmodule post() {\n    // Main vertical post: Ø12 mm, 70 mm tall\n    cylinder(h = 70, d = 12, $fn = 32);\n}\n\nmodule base() {\n    // Circular base plate: Ø60 mm, 4 mm thick\n    difference() {\n        cylinder(h = 4, d = 60, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = 4.2, d = 56, $fn = 64);  // 2 mm walls\n    }\n}\n\nmodule leg(count = 3) {\n    // Decorative support legs under base\n    angle = 360 / count;\n    for(i = [0 : count - 1])\n        rotate([0, 0, i * angle])\n            translate([22, 0, 2])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, d1 = 6, d2 = 4, $fn = 16); // tapered\n}\n\nmodule collar() {\n    // Decorative collar at mid-post\n    translate([0, 0, 30])\n    difference() {\n        cylinder(h = 8, d = 18, $fn = 32);\n        cylinder(h = 8.2, d = 14, $fn = 32);\n    }\n}\n\nmodule arm() {\n    // Horizontal lamp arm: 40 mm reach\n    translate([15, 0, 60])\n        rotate([90, 0, 90])\n            cylinder(h = 30, d = 8, $fn = 32);\n}\n\nmodule shade_holder() {\n    // E14-style lamp socket ring\n    translate([0, 0, 70])\n    difference() {\n        cylinder(h = 6, d = 18, $fn = 32);\n        cylinder(h = 6.2, d = 14, $fn = 32);\n    }\n}\n\nmodule cable_slot() {\n    // Channel for cable routing through post\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    translate([0, 0, -6])\n        cube([12, 3, 70], center = true);\n}\n\n// Assembly\nunion() {\n    // Base and legs\n    base();\n    leg();\n    \n    // Post assembly\n    union() {\n        post();\n        cable_slot();\n    }\n    \n    // Details\n    collar();\n    arm();\n    shade_holder();\n}",
    "renders": true
  }
]