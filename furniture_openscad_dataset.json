[
  {
    "furniture": "chair",
    "openscad_code": "// Realistic 3D-printable chair – medium complexity\n// Overall footprint ~100 mm × 100 mm × 110 mm (H)\n\n// ---------- parameters ----------\nleg_t   = 5;      // leg cross-section\nseat_h  = 8;      // seat thickness\nback_h  = 45;     // backrest height above seat\narm_w   = 4;      // armrest thickness\nwall    = 2;      // 3D-print wall thickness\n\n// ---------- modules ----------\n\n// reusable rounded bar for legs & stretchers\nmodule bar(l, diam, vert=false){\n    translate([0,0, (vert? l/2 : 0)])\n        rotate([vert?0:90,0,0])\n            cylinder(h=l, d=diam, $fn=16);\n}\n\n// seat with gentle cushion contour (no overhangs)\nmodule seat(){\n    difference(){\n        // main seat block\n        translate([0,0,seat_h/2])\n            cube([100,100,seat_h], center=true);\n        // slight recess on top\n        translate([0,0,seat_h-1])\n            cube([90,90,seat_h], center=true);\n    }\n}\n\n// backrest slats\nmodule back_slat(x){\n    translate([x,0,seat_h+back_h/2])\n        cube([4,5,back_h], center=true);\n}\n\n// armrest\nmodule armrest(side){\n    mirror([side,0,0]){\n        // vertical post\n        translate([45+leg_t/2,0,seat_h+20])\n            cube([leg_t,leg_t,40], center=true);\n        // horizontal rest\n        translate([45+leg_t/2+15,0,seat_h+40])\n            cube([30,leg_t,arm_w], center=true);\n    }\n}\n\n// ---------- chair assembly ----------\n\nunion(){\n    // four legs\n    for (x=[-40,40], y=[-40,40]){\n        translate([x,y,0])\n            bar(seat_h, leg_t, vert=true);\n    }\n\n    // front & back stretchers (adds stiffness)\n    translate([0,-40,seat_h/2-20])\n        bar(80, leg_t);\n    translate([0, 40,seat_h/2-20])\n        bar(80, leg_t);\n\n    // seat\n    seat();\n\n    // backrest frame\n    translate([0,42,seat_h+back_h/2])\n        cube([90,leg_t,back_h], center=true);\n    for (x=[-30,-15,0,15,30])\n        back_slat(x);\n\n    // armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "furniture": "sofa",
    "openscad_code": "// Realistic 3D-printable sofa (medium complexity)\n// Overall footprint ≈ 70 mm × 35 mm × 30 mm\n\n// --------------------------------------------------\n// Parameters\nwall = 2;        // 3D-printable wall thickness\nseat_h = 12;     // seat height\nseat_d = 30;     // seat depth\nback_h = 18;     // backrest height above seat\narm_h = 14;      // armrest height above seat\narm_w = 5;       // armrest width\nleg_h = 8;       // leg height\nframe_t = 3;     // frame thickness\ncushion_t = 4;   // cushion thickness\nsofa_w = 70;     // total width\n\n// --------------------------------------------------\n// Utility modules\nmodule rounded_box(w, d, h, r) {\n    translate([r, r, 0])\n    minkowski() {\n        cube([w - 2*r, d - 2*r, h]);\n        cylinder(h = 0.01, r = r, $fn = 16);\n    }\n}\n\nmodule leg(dx, dy) {\n    translate([dx, dy, 0])\n    cylinder(h = leg_h, r = 2.5, $fn = 16);\n}\n\n// --------------------------------------------------\n// Frame\nmodule frame() {\n    difference() {\n        // Outer box frame\n        rounded_box(sofa_w, seat_d + frame_t, seat_h + frame_t, 2);\n        \n        // Hollow inside\n        translate([frame_t, frame_t, frame_t])\n        rounded_box(sofa_w - 2*frame_t,\n                    seat_d - 2*frame_t,\n                    seat_h + frame_t,\n                    2);\n    }\n}\n\n// --------------------------------------------------\n// Backrest\nmodule backrest() {\n    translate([0, -frame_t/2, seat_h])\n    rounded_box(sofa_w, frame_t, back_h, 2);\n}\n\n// --------------------------------------------------\n// Armrests\nmodule armrest(side) {\n    translate([side * (sofa_w/2 - arm_w/2), seat_d/2 - arm_w/2, seat_h])\n    rounded_box(arm_w, arm_w, arm_h, 2);\n}\n\n// --------------------------------------------------\n// Cushions\nmodule cushion(dx, dy, w, d) {\n    translate([dx, dy, seat_h])\n    rounded_box(w, d, cushion_t, 2);\n}\n\n// --------------------------------------------------\n// Legs\nmodule all_legs() {\n    leg(5, 5);\n    leg(sofa_w - 5, 5);\n    leg(5, seat_d - 5);\n    leg(sofa_w - 5, seat_d - 5);\n}\n\n// --------------------------------------------------\n// Assembly\nunion() {\n    frame();\n    backrest();\n    armrest(1);   // left\n    armrest(-1);  // right\n    all_legs();\n    \n    // Seat cushions (3 cushions)\n    for (i = [0:2]) {\n        cushion(5 + i*(sofa_w - 10)/3, 5,\n                (sofa_w - 10)/3 - 1, seat_d - 10);\n    }\n    \n    // Back cushions (3 cushions)\n    for (i = [0:2]) {\n        translate([0, 0, cushion_t])\n        translate([5 + i*(sofa_w - 10)/3,\n                   -frame_t/2 + 2,\n                   seat_h + back_h - cushion_t])\n        rotate([90, 0, 0])\n        rounded_box((sofa_w - 10)/3 - 1,\n                    cushion_t,\n                    back_h - cushion_t,\n                    2);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "bench",
    "openscad_code": "// Realistic bench with medium complexity\n// Overall dimensions: 100mm x 40mm x 45mm (L x W x H)\n\n$fn = 32;\nseat_thickness = 3;\nleg_size = 4;\nbackrest_height = 25;\nslat_width = 8;\nslat_gap = 2;\n\nmodule bench_seat() {\n    // Main seat frame\n    difference() {\n        cube([100, 40, seat_thickness], center=true);\n        \n        // Create slatted effect\n        for (x = [-40:10:40]) {\n            translate([x, 0, -1])\n            cube([slat_gap, 42, seat_thickness + 2]);\n        }\n    }\n}\n\nmodule bench_leg(x_pos, z_pos) {\n    // Vertical leg post\n    translate([x_pos, -15, z_pos]) {\n        cube([leg_size, leg_size, 20 - seat_thickness/2], center=true);\n    }\n    \n    // Horizontal stretcher\n    translate([x_pos, 0, z_pos - 8]) {\n        rotate([90, 0, 0])\n        cylinder(h=30, r=leg_size/2, center=true);\n    }\n    \n    // Foot pad\n    translate([x_pos, -15, z_pos - 10]) {\n        cube([6, 6, 2], center=true);\n    }\n}\n\nmodule bench_backrest() {\n    // Backrest frame\n    translate([0, 18, 10]) {\n        difference() {\n            cube([90, 4, backrest_height], center=true);\n            \n            // Create backrest slats\n            for (x = [-35:10:35]) {\n                translate([x, 0, -1])\n                cube([slat_gap, 6, backrest_height + 2]);\n            }\n        }\n    }\n    \n    // Backrest support posts\n    for (x = [-40:80:80]) {\n        translate([x, 20, 0]) {\n            cube([leg_size, leg_size, 20], center=true);\n        }\n    }\n}\n\nmodule bench_details() {\n    // Corner braces\n    for (x = [-45, 45]) {\n        for (y = [-15, 15]) {\n            translate([x, y, -3]) {\n                rotate([45, 0, 0])\n                cube([3, 3, 10], center=true);\n            }\n        }\n    }\n    \n    // Seat edge rounding\n    translate([0, 0, 1.5]) {\n        cube([102, 42, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bench_seat();\n    \n    // Four legs\n    for (x = [-40, 40]) {\n        bench_leg(x, -seat_thickness/2);\n    }\n    \n    bench_backrest();\n    bench_details();\n}",
    "renders": true
  },
  {
    "furniture": "stool",
    "openscad_code": "// Realistic 3D-printable stool – medium complexity\n// Overall size ≈ 80 mm H × 60 mm seat diameter\n// 2 mm wall thickness everywhere, no overhangs > 45°\n\n// Parameters\n$fn = 32;\nseat_d = 60;           // seat diameter\nseat_h = 4;            // seat thickness\nleg_h = 70;            // leg length (total height 80 incl. seat)\nleg_r = 2.5;           // leg radius\nbrace_h = 8;           // stretcher height\nbrace_t = 2;           // stretcher thickness\nfoot_r = 4;            // foot diameter\nfoot_h = 3;            // foot height\nclear = 0.2;           // clearance for boolean ops\n\n// Seat – round cushion with slight dome\nmodule seat() {\n    union() {\n        cylinder(d = seat_d, h = seat_h, center = false);\n        translate([0, 0, seat_h])\n            scale([1, 1, 0.3])\n            cylinder(d = seat_d, h = 4, center = false);\n    }\n}\n\n// Single round leg with tapered foot\nmodule leg() {\n    union() {\n        cylinder(r = leg_r, h = leg_h);\n        translate([0, 0, leg_h])\n            cylinder(r1 = leg_r, r2 = foot_r/2, h = foot_h);\n    }\n}\n\n// Radial stretcher ring (hidden inside legs for printability)\nmodule stretcher_ring() {\n    difference() {\n        cylinder(h = brace_h, r = seat_d/2 - leg_r - 2);\n        translate([0, 0, -clear])\n            cylinder(h = brace_h + 2*clear, \n                     r = seat_d/2 - leg_r - 2 - brace_t);\n    }\n}\n\n// Assemble four legs around center\nmodule legs() {\n    for(a = [0:90:270])\n        rotate([0, 0, a])\n            translate([seat_d/2 - leg_r - 1, 0, 0])\n                leg();\n}\n\n// Entire stool\nunion() {\n    // Seat on top\n    translate([0, 0, leg_h + foot_h])\n        seat();\n\n    // Legs\n    legs();\n\n    // Stretcher ring inside legs\n    translate([0, 0, leg_h/2 - brace_h/2])\n        stretcher_ring();\n}",
    "renders": true
  },
  {
    "furniture": "ottoman",
    "openscad_code": "// Ottoman with tufted cushion and turned legs\n// Overall size: 100 x 70 x 55 mm (L x W x H)\n\n$fn = 32; // Smooth curves\n\n// Main module\nmodule ottoman() {\n    // Base frame\n    union() {\n        // Cushion\n        translate([0, 0, 45])\n            cushion();\n        \n        // Box\n        translate([0, 0, 20])\n            box();\n        \n        // Legs\n        legs();\n    }\n}\n\n// Tufted cushion\nmodule cushion() {\n    difference() {\n        // Main cushion block\n        translate([0, 0, 2.5])\n            minkowski() {\n                cube([90, 60, 5], center = true);\n                sphere(2.5);\n            }\n        \n        // Tufting buttons\n        for (x = [-30, 0, 30]) {\n            for (y = [-20, 0, 20]) {\n                translate([x, y, 7])\n                    cylinder(h = 3, r1 = 3, r2 = 2);\n            }\n        }\n        \n        // Edge seam\n        translate([0, 0, 4])\n            cube([95, 65, 2], center = true);\n    }\n}\n\n// Storage box\nmodule box() {\n    difference() {\n        // Outer shell\n        cube([95, 65, 40], center = true);\n        \n        // Hollow inside\n        translate([0, 0, -2])\n            cube([91, 61, 40], center = true);\n    }\n}\n\n// Four turned legs\nmodule legs() {\n    for (x = [-35, 35]) {\n        for (y = [-25, 25]) {\n            translate([x, y, 0])\n                leg();\n        }\n    }\n}\n\n// Individual turned leg\nmodule leg() {\n    difference() {\n        union() {\n            // Top block\n            translate([0, 0, 35])\n                cube([12, 12, 5], center = true);\n            \n            // Main turned leg\n            cylinder(h = 35, r1 = 6, r2 = 6);\n            \n            // Decorative rings\n            translate([0, 0, 30]) cylinder(h = 2, r1 = 7, r2 = 7);\n            translate([0, 0, 25]) cylinder(h = 2, r1 = 5, r2 = 5);\n            translate([0, 0, 15]) cylinder(h = 2, r1 = 7, r2 = 7);\n            translate([0, 0, 10]) cylinder(h = 2, r1 = 5, r2 = 5);\n            \n            // Bottom foot\n            translate([0, 0, 0])\n                cylinder(h = 3, r1 = 8, r2 = 6);\n        }\n        \n        // Hollow for material saving\n        translate([0, 0, 3])\n            cylinder(h = 32, r1 = 3, r2 = 3);\n    }\n}\n\n// Generate the ottoman\nottoman();",
    "renders": true
  },
  {
    "furniture": "recliner",
    "openscad_code": "// Recliner armchair – medium-complexity 3D-printable model\n// Dimensions scaled for ~120 mm total length\n\n$fa = 2;\n$fs = 1;\n\nmodule rounded_cube(size, r) {\n    // Simple rounded-corner box using hull of spheres\n    translate([-size.x/2+r, -size.y/2+r, 0])\n    hull() {\n        for(i=[0,1], j=[0,1], k=[0,1])\n            translate([i*(size.x-2*r), j*(size.y-2*r), k*size.z])\n                sphere(r);\n    }\n}\n\n// Seat cushion module\nmodule seat_cushion(w, d, h, r) {\n    difference() {\n        rounded_cube([w, d, h], r);\n        // Slight hollow underneath to reduce weight\n        translate([0, 0, -0.5])\n            rounded_cube([w-4, d-4, h-1], r-1);\n    }\n}\n\n// Backrest cushion module (tilted)\nmodule backrest_cushion(w, h, t, angle) {\n    rotate([angle, 0, 0])\n        seat_cushion(w, t, h, 5);\n}\n\n// Support leg\nmodule leg(h) {\n    cylinder(d1=8, d2=6, h=h, $fn=20);\n}\n\n// Armrest side panel\nmodule armrest_side(w, d, h) {\n    difference() {\n        rounded_cube([w, d, h], 4);\n        // Remove inner volume for wall thickness\n        translate([2, 2, -1])\n            rounded_cube([w-4, d-4, h], 2);\n    }\n}\n\n// Recliner assembly\nunion() {\n    // Seat base\n    translate([0, 0, 20])\n        seat_cushion(60, 50, 12, 6);\n\n    // Backrest (reclined ~15°)\n    translate([0, -22, 32])\n        backrest_cushion(60, 50, 12, 105);\n\n    // Left armrest\n    translate([-35, 0, 20])\n        armrest_side(8, 45, 35);\n\n    // Right armrest\n    translate([35, 0, 20])\n        armrest_side(8, 45, 35);\n\n    // Front legs\n    translate([-20, 20, 0])\n        leg(20);\n    translate([20, 20, 0])\n        leg(20);\n\n    // Rear legs\n    translate([-20, -25, 0])\n        leg(20);\n    translate([20, -25, 0])\n        leg(20);\n\n    // Front footrest support bar\n    translate([0, 30, 10])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=3, $fn=16);\n\n    // Small footrest cushion\n    translate([0, 35, 8])\n        seat_cushion(50, 25, 8, 4);\n}",
    "renders": true
  },
  {
    "furniture": "armchair",
    "openscad_code": "// Realistic Armchair - Medium Complexity\n// Overall dimensions: 80mm(W) x 75mm(D) x 85mm(H)\n// 3D printable with 2mm walls and no overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// Main chair module\nmodule armchair() {\n    // Seat frame\n    difference() {\n        // Outer seat box\n        translate([0, 0, 20]) cube([60, 60, 8], center = true);\n        // Hollow center\n        translate([0, 0, 20]) cube([56, 56, 12], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 26]) scale([1, 1, 0.4]) sphere(d = 58, $fn = 32);\n    \n    // Backrest frame\n    difference() {\n        // Outer backrest\n        translate([0, -27, 50]) cube([58, 6, 50], center = true);\n        // Hollow back\n        translate([0, -27, 50]) cube([54, 10, 46], center = true);\n    }\n    \n    // Backrest cushion\n    translate([0, -25, 50]) scale([1, 0.3, 1]) sphere(d = 54, $fn = 32);\n    \n    // Left armrest\n    translate([-32, 10, 40]) cube([8, 40, 20], center = true);\n    // Left armrest cushion\n    translate([-32, 10, 50]) scale([1, 1, 0.4]) sphere(d = 38, $fn = 32);\n    \n    // Right armrest\n    translate([32, 10, 40]) cube([8, 40, 20], center = true);\n    // Right armrest cushion\n    translate([32, 10, 50]) scale([1, 1, 0.4]) sphere(d = 38, $fn = 32);\n    \n    // Legs - 4 cylindrical supports\n    // Front left leg\n    translate([-25, 25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Front right leg\n    translate([25, 25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Back left leg\n    translate([-25, -25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Back right leg\n    translate([25, -25, 10]) cylinder(h = 20, d = 6, center = true);\n    \n    // Support bars between legs\n    // Front bar\n    translate([0, 25, 2]) cube([50, 4, 4], center = true);\n    // Back bar\n    translate([0, -25, 2]) cube([50, 4, 4], center = true);\n    // Left bar\n    translate([-25, 0, 2]) cube([4, 50, 4], center = true);\n    // Right bar\n    translate([25, 0, 2]) cube([4, 50, 4], center = true);\n    \n    // Decorative back slats\n    for(i = [-20:10:20]) {\n        translate([i, -27, 65]) cube([4, 2, 20], center = true);\n    }\n}\n\n// Generate the armchair\narmchair();",
    "renders": true
  },
  {
    "furniture": "loveseat",
    "openscad_code": "$fn = 30;\n\n// Overall dimensions (in mm, printable scale)\nseat_w = 60;\nseat_d = 30;\nseat_h = 15;\n\nback_h = 30;\narm_w = 8;\narm_h = 20;\nleg_h = 18;\nleg_size = 4;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule loveseat() {\n    // Backrest frame and slats\n    difference() {\n        // Main backrest panel\n        translate([0, -seat_d/2 - wall/2, back_h/2 + seat_h]) \n            cube([seat_w, wall, back_h], center=true);\n        \n        // Decorative cutouts (three horizontal slats)\n        for (i = [-1, 0, 1])\n            translate([0, -seat_d/2 - wall, (seat_h + back_h/2) + i*7]) \n                cube([seat_w - 12, wall + 2, 6], center=true);\n    }\n\n    // Seat cushion (hollow for printing)\n    difference() {\n        translate([0, 0, seat_h/2]) \n            cube([seat_w, seat_d, seat_h], center=true);\n        translate([0, 0, seat_h/2 + wall]) \n            cube([seat_w - 2*wall, seat_d - 2*wall, seat_h - wall], center=true);\n    }\n\n    // Left armrest\n    difference() {\n        translate([-seat_w/2 - arm_w/2, 0, arm_h/2 + seat_h]) \n            cube([arm_w, seat_d, arm_h], center=true);\n        translate([-seat_w/2 - arm_w/2, 0, arm_h/2 + seat_h + wall]) \n            cube([arm_w - wall, seat_d - wall, arm_h - wall], center=true);\n    }\n\n    // Right armrest (mirror of left)\n    difference() {\n        translate([seat_w/2 + arm_w/2, 0, arm_h/2 + seat_h]) \n            cube([arm_w, seat_d, arm_h], center=true);\n        translate([seat_w/2 + arm_w/2, 0, arm_h/2 + seat_h + wall]) \n            cube([arm_w - wall, seat_d - wall, arm_h - wall], center=true);\n    }\n\n    // Front decorative skirt\n    translate([0, seat_d/2 + wall/2, leg_h/2]) \n        cube([seat_w + 2*arm_w, wall, leg_h], center=true);\n\n    // Legs (four tapered legs)\n    module tapered_leg() {\n        difference() {\n            cylinder(h = leg_h, r1 = leg_size/2, r2 = leg_size/2 - 0.5, center=false);\n            translate([0, 0, -1]) \n                cylinder(h = leg_h + 2, r1 = leg_size/2 - wall, r2 = leg_size/2 - wall - 0.5, center=false);\n        }\n    }\n\n    // Position legs at corners\n    translate([-seat_w/2 - arm_w/2 + leg_size/2, -seat_d/2 + leg_size/2, 0]) \n        tapered_leg();\n    translate([seat_w/2 + arm_w/2 - leg_size/2, -seat_d/2 + leg_size/2, 0]) \n        tapered_leg();\n    translate([-seat_w/2 - arm_w/2 + leg_size/2, seat_d/2 - leg_size/2, 0]) \n        tapered_leg();\n    translate([seat_w/2 + arm_w/2 - leg_size/2, seat_d/2 - leg_size/2, 0]) \n        tapered_leg();\n\n    // Back support bars between backrest and seat\n    for (x = [-seat_w/3, 0, seat_w/3]) {\n        translate([x, -seat_d/2 + 2, seat_h/2]) \n            cube([wall, 4, seat_h], center=true);\n    }\n}\n\n// Render the loveseat centered\ntranslate([0, 0, 0]) \n    loveseat();",
    "renders": true
  },
  {
    "furniture": "settee",
    "openscad_code": "// OpenSCAD Settee (Medium complexity, realistic style)\n// Overall footprint: 120 mm (W) × 50 mm (D) × 60 mm (H)\n\n// Parameters\nseat_w = 120;\nseat_d = 50;\nseat_h = 30;\nback_h = 30;\nleg_h = 20;\nleg_sz = 6;\nwall_t = 2;           // 3D-print-friendly wall thickness\n\nmodule settee() {\n    // Left arm-rest\n    translate([-seat_w/2 + leg_sz/2, 0, 0])\n        cube([leg_sz, seat_d, seat_h + back_h], center = true);\n\n    // Right arm-rest (mirror of left)\n    translate([seat_w/2 - leg_sz/2, 0, 0])\n        cube([leg_sz, seat_d, seat_h + back_h], center = true);\n\n    // Front left leg\n    translate([-seat_w/2 + leg_sz/2, seat_d/2 - leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Front right leg\n    translate([seat_w/2 - leg_sz/2, seat_d/2 - leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Rear left leg\n    translate([-seat_w/2 + leg_sz/2, -seat_d/2 + leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Rear right leg\n    translate([seat_w/2 - leg_sz/2, -seat_d/2 + leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Seat frame (hollow for printability)\n    difference() {\n        cube([seat_w - 2*leg_sz, seat_d - 2*leg_sz, wall_t], center = true);\n        translate([0, 0, -0.5])\n            cube([seat_w - 2*leg_sz - 2*wall_t, seat_d - 2*leg_sz - 2*wall_t, wall_t + 1], center = true);\n    }\n\n    // Seat cushion (slightly domed via spheres)\n    for (y = [-seat_d/2 + 5, -seat_d/2 + 15, -seat_d/2 + 25, -seat_d/2 + 35, -seat_d/2 + 45]) {\n        for (x = [-seat_w/2 + 15 : 10 : seat_w/2 - 15]) {\n            translate([x, y, seat_h/2 - 1])\n                scale([1, 0.3, 0.7])\n                    sphere(r = 5, $fn = 16);\n        }\n    }\n\n    // Backrest frame\n    difference() {\n        translate([0, -seat_d/2 + wall_t/2, seat_h + back_h/2])\n            cube([seat_w - 2*leg_sz, wall_t, back_h], center = true);\n        translate([0, -seat_d/2 + wall_t/2 - 0.5, seat_h + back_h/2])\n            cube([seat_w - 2*leg_sz - 2*wall_t, wall_t + 1, back_h - 2*wall_t], center = true);\n    }\n\n    // Backrest slats\n    for (x = [-seat_w/2 + 15 : 12 : seat_w/2 - 15]) {\n        translate([x, -seat_d/2 + wall_t/2, seat_h + back_h/2])\n            cube([wall_t, wall_t, back_h - wall_t], center = true);\n    }\n\n    // Decorative front apron\n    translate([0, seat_d/2 - wall_t/2, -leg_h/2 + 2])\n        cube([seat_w - 2*leg_sz - 4, wall_t, leg_h - 4], center = true);\n}\n\nsettee();",
    "renders": true
  },
  {
    "furniture": "divan",
    "openscad_code": "// Realistic medium-complexity 3D-printable divan\n// Overall size: 120 x 50 x 45 mm (L x W x H)\n\n$fn = 32;\n\nmodule divan() {\n    // Main platform / base\n    difference() {\n        translate([0, 0, 2])\n            cube([120, 50, 6], center = true);\n        // Hollow cavity for printability & weight\n        translate([0, 0, 5])\n            cube([116, 46, 4], center = true);\n    }\n\n    // Four legs\n    for (x = [-55, 55])\n        for (y = [-22, 22])\n            translate([x, y, 0])\n                cylinder(h = 12, d = 6, center = false);\n\n    // Backrest frame\n    difference() {\n        translate([0, 20, 25])\n            cube([110, 8, 36], center = true);\n        translate([0, 20, 43])\n            cube([106, 12, 20], center = true);\n    }\n\n    // Backrest slats (7 total, evenly spaced)\n    for (i = [-45:15:45]) {\n        translate([i, 20, 34])\n            cube([10, 8, 20], center = true);\n    }\n\n    // Seat cushion\n    translate([0, 0, 11])\n        cube([110, 46, 6], center = true);\n\n    // Bolster cushion\n    translate([0, -18, 17])\n        rotate([90, 0, 0])\n            cylinder(h = 40, d = 12, center = true);\n\n    // Decorative side panels\n    for (side = [-1, 1]) {\n        translate([side * 60, 0, 5])\n            cube([2, 50, 10], center = true);\n    }\n\n    // Front skirt detail\n    translate([0, -25, 5])\n        cube([110, 2, 8], center = true);\n\n    // Support rail between legs (front & back)\n    for (y = [-22, 22])\n        translate([0, y, 6])\n            cube([110, 2, 2], center = true);\n}\n\n// Render the divan\ndivan();",
    "renders": true
  },
  {
    "furniture": "throne",
    "openscad_code": "// Realistic Throne Chair - Medium Complexity\n// Overall dimensions: ~80mm W x ~85mm D x ~120mm H\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule throne() {\n    // Base platform\n    translate([0,0,10]) \n        cube([70,75,5], center=true);\n    \n    // Legs\n    legs();\n    \n    // Seat base\n    translate([0,0,27])\n        cube([55,50,12], center=true);\n    \n    // Seat cushion\n    translate([0,0,35])\n        scale([1,1,0.3])\n        sphere(r=28);\n    \n    // Backrest assembly\n    backrest();\n    \n    // Armrests\n    armrests();\n    \n    // Decorative elements\n    decorative();\n}\n\n// Four throne legs with stretchers\nmodule legs() {\n    // Front legs\n    for(x=[-25, 25])\n        leg(x, 20);\n    \n    // Rear legs\n    for(x=[-25, 25])\n        leg(x, -20);\n    \n    // Side stretchers\n    for(y=[20,-20])\n        translate([0,y,15])\n            cube([55,2,2], center=true);\n    \n    // Back stretcher\n    translate([0,-20,15])\n        rotate([90,0,0])\n            cylinder(h=50, r=1.5);\n}\n\n// Single leg with foot detail\nmodule leg(x,y) {\n    translate([x,y,0])\n        difference() {\n            // Main leg post\n            cylinder(h=27, r=3);\n            // Foot detail\n            translate([0,0,-1])\n                cylinder(h=5, r=4);\n        }\n}\n\n// High backrest with crown detail\nmodule backrest() {\n    // Main back panel\n    translate([0,-25,65])\n        cube([50,5,70], center=true);\n    \n    // Top crown curve\n    translate([0,-25,100])\n        difference() {\n            cube([55,5,15], center=true);\n            translate([0,0,7.5])\n                sphere(r=27.5);\n        }\n    \n    // Vertical supports\n    for(x=[-20,-10,0,10,20])\n        translate([x,-25,65])\n            cube([3,5,70], center=true);\n    \n    // Horizontal support bars\n    for(z=[40,55,70,85])\n        translate([0,-25,z])\n            cube([50,5,3], center=true);\n}\n\n// Armrest assembly\nmodule armrests() {\n    // Left arm\n    arm(30);\n    \n    // Right arm\n    arm(-30);\n}\n\n// Single armrest\nmodule arm(side) {\n    // Vertical post\n    translate([side,15,27])\n        cylinder(h=25, r=3);\n    \n    // Arm cushion\n    translate([side,15,39])\n        rotate([90,0,0])\n            scale([1,1.5,0.5])\n                cylinder(h=20, r=5);\n    \n    // Support bracket\n    translate([side,15,35])\n        rotate([0,-45,0])\n            cube([3,15,2], center=true);\n}\n\n// Decorative studs and details\nmodule decorative() {\n    // Front studs\n    for(x=[-20,-10,0,10,20])\n        translate([x,25,35])\n            sphere(r=1.5);\n    \n    // Backrest studs\n    for(z=[45,60,75,90])\n        for(x=[-22.5,-7.5,7.5,22.5])\n            translate([x,-27.5,z])\n                sphere(r=1);\n}\n\n// Assembly\nthrone();",
    "renders": true
  },
  {
    "furniture": "chaise",
    "openscad_code": "// Chaise Lounge - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm x 50mm x 45mm\n\n// Main body frame\nmodule chaise_frame() {\n    // Base platform\n    translate([0, 0, 8])\n    cube([120, 50, 4], center=true);\n    \n    // Backrest support frame\n    translate([-45, 0, 20])\n    cube([30, 48, 25], center=true);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([0, side * 22, 12])\n        cube([110, 4, 16], center=true);\n    }\n}\n\n// Chaise cushion with tufted details\nmodule cushion(x_pos, y_pos, z_pos, length, width, height) {\n    // Main cushion body\n    translate([x_pos, y_pos, z_pos])\n    cube([length, width, height], center=true);\n    \n    // Tufted buttons (6 buttons in 2x3 pattern)\n    for(i = [-1, 0, 1]) {\n        for(j = [-1, 1]) {\n            translate([x_pos + i * (length/3.5), y_pos + j * (width/3), z_pos + height/2 + 1])\n            sphere(d=3, $fn=16);\n        }\n    }\n}\n\n// Leg structure with tapered design\nmodule leg(x_pos, y_pos) {\n    // Upper leg block\n    translate([x_pos, y_pos, 4])\n    cube([6, 6, 4], center=true);\n    \n    // Tapered lower leg\n    translate([x_pos, y_pos, 1])\n    cylinder(h=4, r1=3, r2=2, $fn=8);\n}\n\n// Armrest with curved top\nmodule armrest(side) {\n    translate([35, side * 27, 20])\n    rotate([0, 15, 0])\n    cube([30, 8, 12], center=true);\n    \n    // Curved top detail\n    translate([35, side * 27, 27])\n    rotate([0, 15, 0])\n    cylinder(h=30, r=4, $fn=20);\n}\n\n// Backrest cushion with angle\nmodule backrest_cushion() {\n    translate([-45, 0, 29])\n    rotate([105, 0, 0])\n    cube([28, 46, 8], center=true);\n    \n    // Tufted buttons (4 buttons)\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([-45 + i * 8, j * 15, 33])\n            sphere(d=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Frame structure\n    chaise_frame();\n    \n    // Seating cushions\n    cushion(0, 0, 14, 90, 44, 6);\n    \n    // Backrest cushion\n    backrest_cushion();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs (4 corners)\n    leg(50, 20);\n    leg(50, -20);\n    leg(-50, 20);\n    leg(-50, -20);\n    \n    // Middle support legs\n    leg(0, 20);\n    leg(0, -20);\n}\n\n// Optional: Rounded edges on cushions using small cylinders\nfor(side = [-1, 1]) {\n    translate([45, side * 22, 14])\n    rotate([90, 0, 0])\n    cylinder(h=44, r=2, $fn=8);\n    \n    translate([-45, side * 22, 14])\n    rotate([90, 0, 0])\n    cylinder(h=44, r=2, $fn=8);\n}",
    "renders": true
  },
  {
    "furniture": "settle",
    "openscad_code": "// Settle - a traditional wooden bench with high back and arms\n// Overall dimensions: 120mm wide x 50mm deep x 90mm high\n// Wall thickness: 2mm for 3D printing\n\nmodule settle() {\n    // Main seat frame\n    difference() {\n        // Solid seat block\n        translate([0, 0, 40])\n            cube([120, 50, 12], center=true);\n        \n        // Hollow out seat for printability\n        translate([0, 0, 42])\n            cube([116, 46, 10], center=true);\n    }\n    \n    // Backrest assembly\n    module backrest() {\n        // Main backrest panel\n        difference() {\n            translate([0, -22, 85])\n                cube([116, 6, 90], center=true);\n            // Hollow out backrest\n            translate([0, -22, 85])\n                cube([112, 2, 86], center=true);\n        }\n        \n        // Vertical slats for traditional look\n        for(i = [-40:20:40]) {\n            translate([i, -22, 85])\n                cube([8, 6, 86], center=true);\n        }\n    }\n    \n    // Left armrest\n    module armrest(side) {\n        // Armrest post\n        translate([side*57, -15, 65])\n            cube([6, 40, 50], center=true);\n        \n        // Armrest top\n        translate([side*57, 0, 88])\n            cube([10, 30, 4], center=true);\n    }\n    \n    // Legs\n    module leg(x, z) {\n        translate([x, z, 20])\n            cube([8, 8, 40], center=true);\n    }\n    \n    // Base stretchers\n    module stretcher() {\n        // Front stretcher\n        translate([0, 20, 5])\n            cube([110, 4, 8], center=true);\n        \n        // Back stretcher\n        translate([0, -20, 5])\n            cube([110, 4, 8], center=true);\n        \n        // Side stretchers\n        translate([57, 0, 5])\n            rotate([0, 0, 90])\n            cube([40, 4, 8], center=true);\n        \n        translate([-57, 0, 5])\n            rotate([0, 0, 90])\n            cube([40, 4, 8], center=true);\n    }\n    \n    // Assembly\n    backrest();\n    \n    armrest(1);  // Right arm\n    armrest(-1); // Left arm\n    \n    // Four legs\n    leg(50, 20);\n    leg(-50, 20);\n    leg(50, -20);\n    leg(-50, -20);\n    \n    stretcher();\n    \n    // Decorative panel on backrest top\n    translate([0, -22, 130])\n        cube([100, 6, 6], center=true);\n}\n\n// Create the settle\nsettle();",
    "renders": true
  },
  {
    "furniture": "pew",
    "openscad_code": "// Realistic Pew - Medium Complexity\n// Overall dimensions: 120mm L x 40mm W x 50mm H\n\n$fn = 50;  // Smooth curves\n\nmodule pew() {\n    // Main seat plank\n    translate([0, 0, 35])\n        cube([120, 40, 4], center = true);\n\n    // Backrest\n    translate([0, 15, 47])\n        cube([120, 4, 24], center = true);\n\n    // Backrest supports - vertical slats\n    for(i = [-50:25:50]) {\n        translate([i, 15, 47])\n            cube([6, 4, 24], center = true);\n    }\n\n    // Left side frame\n    translate([-60, 0, 25]) {\n        // Front leg\n        cube([4, 4, 35], center = true);\n        // Rear leg\n        translate([0, 30, 0])\n            cube([4, 4, 35], center = true);\n        // Top support\n        translate([0, 15, 12])\n            cube([4, 30, 4], center = true);\n        // Bottom stretcher\n        translate([0, 15, -12])\n            cube([4, 30, 4], center = true);\n    }\n\n    // Right side frame (mirrored)\n    mirror([1, 0, 0])\n        translate([-60, 0, 25]) {\n            // Front leg\n            cube([4, 4, 35], center = true);\n            // Rear leg\n            translate([0, 30, 0])\n                cube([4, 4, 35], center = true);\n            // Top support\n            translate([0, 15, 12])\n                cube([4, 30, 4], center = true);\n            // Bottom stretcher\n            translate([0, 15, -12])\n                cube([4, 30, 4], center = true);\n        }\n\n    // Center support beam\n    translate([0, 0, 17])\n        cube([120, 4, 4], center = true);\n\n    // Decorative end caps on legs\n    for(x = [-60, 60])\n        for(y = [-20, 20]) {\n            translate([x, y, 0])\n                cylinder(h = 4, r = 2, center = true);\n        }\n\n    // Armrests\n    translate([-60, 0, 42])\n        cube([4, 40, 4], center = true);\n    translate([60, 0, 42])\n        cube([4, 40, 4], center = true);\n}\n\n// Create the pew\npew();",
    "renders": true
  },
  {
    "furniture": "rocker",
    "openscad_code": "// Rocking chair for 3D printing\n// Overall height ≈ 70 mm, width ≈ 55 mm, depth ≈ 90 mm\n// Wall thickness ≈ 2 mm\n\n// General parameters\n$fn = 32;                       // Smooth curves\nwall = 2;                       // Standard wall thickness\n\n// Seat dimensions\nseat_w = 55;\nseat_d = 45;\nseat_h = 8;\n\n// Backrest dimensions\nback_h = 30;\nback_th = 4;\n\n// Rockers\nrocker_r = 25;\nrocker_w = seat_w + wall*2;\n\n// Leg height (measured vertically)\nleg_h = 25;\n\n// Helper: rounded cube for printable edges\nmodule roundedCube(size, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([r, r, size.z-r]) sphere(r);\n        translate([r, size.y-r, r]) sphere(r);\n        translate([r, size.y-r, size.z-r]) sphere(r);\n        translate([size.x-r, r, r]) sphere(r);\n        translate([size.x-r, r, size.z-r]) sphere(r);\n        translate([size.x-r, size.y-r, r]) sphere(r);\n        translate([size.x-r, size.y-r, size.z-r]) sphere(r);\n    }\n}\n\n// Seat shell\nmodule seat() {\n    difference() {\n        roundedCube([seat_w, seat_d, seat_h], 4);\n        translate([wall, wall, wall])\n            roundedCube([seat_w-wall*2, seat_d-wall*2, seat_h+1], 2);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    difference() {\n        union() {\n            // Frame\n            roundedCube([seat_w, wall, back_h], 2);\n            // Top bar\n            translate([0, wall, back_h-wall])\n                roundedCube([seat_w, back_th-wall, wall], 2);\n        }\n        // Hollow\n        translate([wall, wall*2, wall])\n            roundedCube([seat_w-wall*2, wall-1, back_h-wall*2], 1);\n    }\n    // Slats\n    for (z = [wall*2 : 5 : back_h-wall*3]) {\n        translate([wall, wall, z])\n            roundedCube([seat_w-wall*2, back_th-wall*2, wall], 1);\n    }\n}\n\n// Legs (vertical supports)\nmodule leg(x) {\n    translate([x, 0, 0])\n        roundedCube([wall, seat_d, leg_h], 2);\n}\n\n// Rockers (curved runners)\nmodule rocker() {\n    // Left rocker\n    translate([0, -wall, 0])\n        difference() {\n            hull() {\n                // Front arc\n                translate([rocker_r, wall, rocker_r])\n                    rotate([90,0,0])\n                        cylinder(h = wall, r = rocker_r);\n                // Rear arc\n                translate([rocker_r, 0, rocker_r])\n                    rotate([-90,0,0])\n                        cylinder(h = wall, r = rocker_r);\n            }\n            // Hollow\n            hull() {\n                translate([rocker_r, -1, rocker_r])\n                    rotate([90,0,0])\n                        cylinder(h = wall+2, r = rocker_r-wall);\n                translate([rocker_r, wall+1, rocker_r])\n                    rotate([-90,0,0])\n                        cylinder(h = wall+2, r = rocker_r-wall);\n            }\n        }\n    // Mirror for right rocker\n    translate([rocker_w, 0, 0])\n        mirror([1,0,0])\n            children();\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_h])\n        seat();\n\n    // Backrest\n    translate([0, wall, leg_h+seat_h])\n        backrest();\n\n    // Legs\n    leg(0);\n    leg(seat_w-wall);\n\n    // Rockers\n    translate([-rocker_r/2, 0, 0])\n        rocker();\n}",
    "renders": true
  },
  {
    "furniture": "swivel",
    "openscad_code": "// Swivel Bar Stool - Realistic Style, Medium Complexity\n// Overall height ~110 mm, seat diameter ~50 mm, 3D printable\n\n$fn = 36;  // Smooth curves\n\n// Parameters\nleg_d = 6;          // leg diameter\nleg_h = 45;         // leg height\nseat_d = 50;        // seat diameter\nseat_h = 6;         // seat thickness\nback_h = 35;        // backrest height\nback_w = 40;        // backrest width\nback_t = 3;         // backrest thickness\nswivel_r = 12;      // swivel base radius\nswivel_h = 8;       // swivel cylinder height\nbase_r = 25;        // footrest ring radius\nbase_t = 4;         // footrest ring thickness\npin_r = 3;          // central pivot pin radius\npin_h = 12;\n\n// Central pivot cylinder (metal pin)\nmodule pivot_pin() {\n    color(\"silver\")\n    cylinder(h = pin_h, r = pin_r);\n}\n\n// Swivel bearing disc\nmodule swivel_disc() {\n    difference() {\n        union() {\n            cylinder(h = swivel_h, r = swivel_r);\n            // Chamfered edge\n            translate([0, 0, swivel_h])\n            cylinder(h = 2, r1 = swivel_r, r2 = swivel_r - 2);\n        }\n        // Center hole for pin\n        cylinder(h = swivel_h + 1, r = pin_r + 1);\n    }\n}\n\n// Gas lift cylinder (simplified)\nmodule gas_lift() {\n    color(\"darkgray\")\n    cylinder(h = leg_h, r = leg_d/2);\n}\n\n// Five-star base with footrest ring\nmodule five_star_base() {\n    difference() {\n        union() {\n            // Central hub\n            cylinder(h = base_t, r = leg_d);\n            // Five legs\n            for (a = [0:72:359]) {\n                rotate([0, 0, a])\n                translate([leg_d, 0, 0])\n                cube([20, leg_d, base_t], center = true);\n            }\n            // Footrest ring\n            translate([0, 0, base_t/2])\n            rotate_extrude()\n            translate([base_r - base_t/2, 0, 0])\n            circle(r = base_t/2);\n        }\n        // Center hole\n        cylinder(h = base_t + 1, r = pin_r);\n    }\n}\n\n// Cushioned seat with slight dome\nmodule seat() {\n    union() {\n        // Base disc\n        color(\"beige\")\n        cylinder(h = seat_h, r = seat_d/2);\n        // Cushion dome\n        translate([0, 0, seat_h])\n        scale([1, 1, 0.4])\n        sphere(r = seat_d/2);\n    }\n}\n\n// Backrest with lumbar curve\nmodule backrest() {\n    color(\"beige\")\n    difference() {\n        // Main back panel\n        translate([0, -back_w/2, 0])\n        cube([back_h, back_w, back_t]);\n        // Lumbar curve cutout\n        translate([back_h/2, 0, -1])\n        rotate([0, 90, 0])\n        cylinder(h = back_w + 2, r = 20, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    translate([0, 0, 0])\n    five_star_base();\n\n    // Pivot pin through base\n    translate([0, 0, base_t])\n    pivot_pin();\n\n    // Swivel disc on pin\n    translate([0, 0, base_t + pin_h - swivel_h])\n    swivel_disc();\n\n    // Gas lift\n    translate([0, 0, base_t + pin_h])\n    gas_lift();\n\n    // Swivel disc on top\n    translate([0, 0, base_t + pin_h + leg_h - swivel_h])\n    swivel_disc();\n\n    // Seat attached to swivel via pin\n    translate([0, 0, base_t + pin_h + leg_h + swivel_h - seat_h])\n    seat();\n\n    // Backrest supports\n    color(\"silver\")\n    translate([seat_d/4, 0, base_t + pin_h + leg_h + swivel_h])\n    rotate([0, -10, 0])\n    cylinder(h = back_h, r = 2);\n\n    translate([-seat_d/4, 0, base_t + pin_h + leg_h + swivel_h])\n    rotate([0, 10, 0])\n    cylinder(h = back_h, r = 2);\n\n    // Backrest\n    translate([0, 0, base_t + pin_h + leg_h + swivel_h + back_h])\n    rotate([90, 0, 0])\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "lounge",
    "openscad_code": "// Lounge Chair - Realistic Style, Medium Complexity\n$fn = 50;\n\n// Overall dimensions (mm)\nchair_width = 80;\nchair_depth = 90;\nchair_height = 85;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule chair_frame() {\n    // Main frame base\n    difference() {\n        cube([chair_width, chair_depth, 6]);\n        translate([wall_thickness, wall_thickness, -1])\n            cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, 8]);\n    }\n    \n    // Front legs\n    for(x=[0, chair_width-6]) {\n        translate([x+3, 3, 0])\n            cylinder(h=chair_height-6, d=6);\n        translate([x+3, chair_depth-9, 0])\n            cylinder(h=chair_height-6, d=6);\n    }\n    \n    // Back legs (angled)\n    difference() {\n        translate([3, 3, chair_height-6]) {\n            rotate([0, -15, 0])\n                cube([6, chair_depth-6, 35]);\n        }\n        translate([3, 3, chair_height-6]) {\n            rotate([0, -15, 0])\n                translate([wall_thickness, wall_thickness, wall_thickness])\n                    cube([6-wall_thickness*2, chair_depth-6-wall_thickness*2, 35-wall_thickness]);\n        }\n    }\n    \n    mirror([chair_width-6, 0, 0]) {\n        difference() {\n            translate([3, 3, chair_height-6]) {\n                rotate([0, -15, 0])\n                    cube([6, chair_depth-6, 35]);\n            }\n            translate([3, 3, chair_height-6]) {\n                rotate([0, -15, 0])\n                    translate([wall_thickness, wall_thickness, wall_thickness])\n                        cube([6-wall_thickness*2, chair_depth-6-wall_thickness*2, 35-wall_thickness]);\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat\n    translate([wall_thickness, wall_thickness, 6]) {\n        difference() {\n            cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, 15]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([chair_width-wall_thickness*4, chair_depth-wall_thickness*4, 15]);\n        }\n    }\n    \n    // Cushion top with rounded edges\n    translate([wall_thickness, wall_thickness, 21]) {\n        minkowski() {\n            cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, 2]);\n            sphere(d=4);\n        }\n    }\n}\n\nmodule backrest() {\n    // Back support frame\n    translate([0, 3, chair_height-6]) {\n        rotate([0, -15, 0])\n            difference() {\n                cube([chair_width, 6, 35]);\n                translate([wall_thickness, wall_thickness, wall_thickness])\n                    cube([chair_width-wall_thickness*2, 6-wall_thickness*2, 35-wall_thickness]);\n            }\n    }\n    \n    // Backrest slats\n    for(i=[1:3]) {\n        translate([i*20, 3, chair_height-6+5]) {\n            rotate([0, -15, 0])\n                difference() {\n                    cube([15, 6, 20]);\n                    translate([wall_thickness, wall_thickness, wall_thickness])\n                        cube([15-wall_thickness*2, 6-wall_thickness*2, 20-wall_thickness]);\n                }\n        }\n    }\n    \n    // Back cushion\n    translate([wall_thickness, 9, chair_height-6+5]) {\n        rotate([0, -15, 0])\n            difference() {\n                cube([chair_width-wall_thickness*2, 15, 20]);\n                translate([wall_thickness, wall_thickness, wall_thickness])\n                    cube([chair_width-wall_thickness*4, 15-wall_thickness*2, 20-wall_thickness]);\n            }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-3, chair_depth-25, 35]) {\n        difference() {\n            cube([9, 20, 25]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([9-wall_thickness*2, 20-wall_thickness*2, 25-wall_thickness]);\n        }\n    }\n    \n    // Right armrest\n    translate([chair_width-6, chair_depth-25, 35]) {\n        difference() {\n            cube([9, 20, 25]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([9-wall_thickness*2, 20-wall_thickness*2, 25-wall_thickness]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_cushion();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "futon",
    "openscad_code": "// Futon model - medium complexity realistic style\n// Overall dimensions: 100mm wide x 50mm deep x 40mm high\n\nmodule futon_frame() {\n    // Main frame base\n    difference() {\n        // Outer frame\n        cube([100, 50, 4], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cube([96, 46, 5], center=true);\n    }\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([side * 48, 0, 0])\n            difference() {\n                cube([4, 50, 5], center=true);\n                translate([0, 0, -2])\n                    cube([3, 48, 6], center=true);\n            }\n    }\n    \n    // Back rail\n    translate([0, 23, 0])\n        difference() {\n            cube([100, 4, 5], center=true);\n            translate([0, 0, -2])\n                cube([96, 3, 6], center=true);\n        }\n    \n    // Front rail\n    translate([0, -23, 0])\n        difference() {\n            cube([100, 4, 5], center=true);\n            translate([0, 0, -2])\n                cube([96, 3, 6], center=true);\n        }\n}\n\nmodule futon_legs() {\n    // Four legs at corners\n    for(x = [-45, 45])\n        for(y = [-20, 20]) {\n            translate([x, y, -12])\n                cylinder(h=20, r=2.5, $fn=12);\n            translate([x, y, -12.5])\n                cube([5, 5, 1], center=true);\n        }\n}\n\nmodule futon_mattress() {\n    // Main mattress body\n    translate([0, 0, 4.5])\n        difference() {\n            cube([90, 45, 10], center=true);\n            translate([0, 0, -1])\n                cube([88, 43, 11], center=true);\n        }\n    \n    // Tufted buttons\n    for(x = [-30, 0, 30])\n        for(y = [-12, 0, 12]) {\n            translate([x, y, 10])\n                cylinder(h=1, r=2, $fn=8);\n            translate([x, y, 11])\n                sphere(r=2, $fn=8);\n        }\n}\n\nmodule futon_backrest() {\n    // Hinged backrest frame\n    translate([0, 20, 4])\n        rotate([105, 0, 0])\n        difference() {\n            cube([90, 4, 25], center=true);\n            translate([0, 0, -1])\n                cube([88, 3, 26], center=true);\n        }\n    \n    // Backrest cushion\n    translate([0, 22, 15])\n        rotate([105, 0, 0])\n        difference() {\n            cube([85, 20, 6], center=true);\n            translate([0, 0, -1])\n                cube([83, 18, 7], center=true);\n        }\n    \n    // Backrest support struts\n    for(x = [-35, -17.5, 0, 17.5, 35]) {\n        translate([x, 20, 2])\n            rotate([105, 0, 0])\n            difference() {\n                cube([3, 4, 15], center=true);\n                translate([0, 0, -1])\n                    cube([2, 3, 16], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    futon_frame();\n    futon_legs();\n    futon_mattress();\n    futon_backrest();\n}",
    "renders": true
  },
  {
    "furniture": "daybed",
    "openscad_code": "// Daybed - Medium complexity realistic style\n// 3D printable, 2mm wall thickness, 120mm length\n\n$fn = 30;\n\nmodule leg() {\n    // Corner leg with angled brace\n    difference() {\n        union() {\n            // Main leg post\n            cube([8, 8, 30]);\n            // Angled brace\n            translate([0, 0, 10])\n                rotate([45, 0, 0])\n                    cube([8, 8, 15]);\n        }\n        // Cable hole\n        translate([4, 4, 15])\n            rotate([0, 0, 0])\n                cylinder(h=8, r=2, center=true);\n    }\n}\n\nmodule backrest() {\n    // Slatted backrest\n    translate([-2, 0, 30])\n        cube([4, 114, 35]);\n}\n\nmodule slat() {\n    // Bed slat\n    cube([10, 2, 110]);\n}\n\nmodule cushion() {\n    // Main mattress cushion\n    translate([5, 5, 33])\n        cube([110, 100, 12]);\n    \n    // Back cushion\n    translate([5, 5, 45])\n        rotate([10, 0, 0])\n            cube([110, 30, 20]);\n}\n\nmodule side_panel() {\n    // Side panel with handle cutout\n    difference() {\n        translate([0, 0, 30])\n            cube([2, 110, 20]);\n        // Handle cutout\n        translate([1, 50, 40])\n            cube([4, 10, 5]);\n    }\n}\n\n// Base frame\ntranslate([0, 0, 0]) {\n    // Frame rails\n    translate([8, 8, 0])\n        cube([104, 4, 30]);\n    translate([8, 108, 0])\n        cube([104, 4, 30]);\n    translate([8, 8, 0])\n        cube([4, 104, 30]);\n    translate([108, 8, 0])\n        cube([4, 104, 30]);\n}\n\n// Legs\ntranslate([10, 10, 0]) leg();\ntranslate([110, 10, 0]) mirror([1, 0, 0]) leg();\ntranslate([10, 110, 0]) mirror([0, 1, 0]) leg();\ntranslate([110, 110, 0]) mirror([1, 1, 0]) leg();\n\n// Slatted base\nfor(i = [0:4]) {\n    translate([20 + i*20, 12, 30]) slat();\n}\n\n// Backrest\ntranslate([0, 0, 0]) backrest();\n\n// Side panels\ntranslate([0, 0, 0]) side_panel();\ntranslate([118, 0, 0]) mirror([1, 0, 0]) side_panel();\n\n// Cushions\ntranslate([0, 0, 0]) cushion();",
    "renders": true
  },
  {
    "furniture": "berge",
    "openscad_code": "// Bergere Armchair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm W x 75mm D x 90mm H\n\nmodule leg() {\n    // Front leg - turned style with simple rings\n    union() {\n        cylinder(h=45, d=8, $fn=16);\n        translate([0,0,5]) cylinder(h=3, d=10, $fn=16);\n        translate([0,0,15]) cylinder(h=3, d=10, $fn=16);\n        translate([0,0,25]) cylinder(h=3, d=10, $fn=16);\n        // Foot detail\n        translate([0,0,-2]) cylinder(h=2, d=10, $fn=16);\n    }\n}\n\nmodule back_leg() {\n    // Back leg with rearward rake\n    translate([0, -5, 0]) rotate([0,10,0]) leg();\n}\n\nmodule armrest() {\n    // Curved armrest with support\n    union() {\n        // Main arm piece\n        translate([-3,0,0]) cube([6, 55, 15]);\n        // Front support post\n        translate([0, 40, -20]) cylinder(h=25, d=6, $fn=12);\n        // Decorative curve detail\n        translate([0, 10, 15]) cylinder(h=30, d=8, $fn=16);\n    }\n}\n\nmodule seat_cushion() {\n    // Box cushion with piped edge\n    difference() {\n        // Main cushion\n        translate([0,0,1]) cube([64, 60, 12], center=true);\n        // Top surface rounding\n        translate([0,0,8]) cube([60, 56, 4], center=true);\n    }\n    // Piping detail\n    color(\"darkgray\") {\n        translate([0, -30, 7]) cube([64, 2, 2], center=true);\n        translate([0, 30, 7]) cube([64, 2, 2], center=true);\n        translate([-32, 0, 7]) cube([2, 60, 2], center=true);\n        translate([32, 0, 7]) cube([2, 60, 2], center=true);\n    }\n}\n\nmodule upholstered_back() {\n    // Wingback style backrest\n    union() {\n        // Main back panel\n        cube([70, 20, 55], center=true);\n        // Wings on sides\n        translate([-37, 0, 10]) rotate([0,15,0]) cube([10, 20, 50], center=true);\n        translate([37, 0, 10]) rotate([0,-15,0]) cube([10, 20, 50], center=true);\n        // Top curve\n        translate([0,0,25]) sphere(d=70, $fn=32);\n    }\n}\n\nmodule stretcher() {\n    // H-stretcher between legs\n    cube([40, 5, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    // Front legs\n    translate([-30, 25, 0]) leg();\n    translate([30, 25, 0]) leg();\n    \n    // Back legs\n    translate([-30, -25, 0]) back_leg();\n    translate([30, -25, 0]) back_leg();\n    \n    // Stretchers\n    translate([0, 25, 15]) stretcher();\n    translate([0, -25, 15]) stretcher();\n    translate([-30, 0, 15]) rotate([0,0,90]) stretcher();\n    translate([30, 0, 15]) rotate([0,0,90]) stretcher();\n    \n    // Seat frame\n    translate([0, 0, 45]) cube([68, 64, 4], center=true);\n    \n    // Seat cushion\n    translate([0, 0, 51]) seat_cushion();\n    \n    // Backrest\n    translate([0, -30, 75]) upholstered_back();\n    \n    // Armrests\n    translate([-35, 0, 60]) armrest();\n    translate([35, 0, 60]) mirror([1,0,0]) armrest();\n}",
    "renders": true
  },
  {
    "furniture": "squab",
    "openscad_code": "// Squab (bench-style settee) – printable 1:12 doll-house scale\n// Overall footprint ≈ 100 mm wide × 35 mm deep × 45 mm high\n// All walls ≥ 2 mm for FDM printing; no steep overhangs.\n\n$fn = 32;               // smooth curves\n\nmodule panel(w, h, d) {             // simple box panel\n    cube([w, d, h], center = true);\n}\n\n// --- Legs (tapered cylinder) ---\nmodule leg() {\n    translate([0, 0, 10])            // 20 mm high leg\n        cylinder(h1 = 20, h2 = 0, r1 = 3, r2 = 2, center = true);\n}\n\n// --- Leg frame ---\nmodule leg_frame() {\n    spacing = 84;                    // inner width between legs\n    depth   = 25;\n    union() {\n        // four legs\n        translate([ spacing/2,  depth/2, 0]) leg();\n        translate([-spacing/2,  depth/2, 0]) leg();\n        translate([ spacing/2, -depth/2, 0]) leg();\n        translate([-spacing/2, -depth/2, 0]) leg();\n        // front & back stretchers 2 mm thick\n        translate([0,  depth/2, -7]) cube([spacing + 10, 2, 4], center = true);\n        translate([0, -depth/2, -7]) cube([spacing + 10, 2, 4], center = true);\n        // side stretchers\n        translate([ spacing/2+3, 0, -7]) cube([2, depth + 4, 4], center = true);\n        translate([-spacing/2-3, 0, -7]) cube([2, depth + 4, 4], center = true);\n    }\n}\n\n// --- Seat base frame ---\nmodule seat_frame() {\n    union() {\n        // perimeter rail\n        hull() {\n            translate([50-2, 30-2, 0]) cylinder(h = 8, r = 1.5, center = true);\n            translate([50-2,-30+2, 0]) cylinder(h = 8, r = 1.5, center = true);\n            translate([-50+2, 30-2, 0]) cylinder(h = 8, r = 1.5, center = true);\n            translate([-50+2,-30+2, 0]) cylinder(h = 8, r = 1.5, center = true);\n        }\n        // slat supports\n        for(x = [-40:20:40]) {\n            translate([x, 0, 0])\n                cube([18, 26, 2], center = true);\n        }\n    }\n}\n\n// --- Cushions ---\nmodule cushion(w, d, h) {\n    difference() {\n        // main pillow\n        minkowski() {\n            cube([w, d, h], center = true);\n            sphere(1.5);\n        }\n        // subtle top seam\n        translate([0, 0, h/2+0.5])\n            cube([w-4, d-4, 1], center = true);\n    }\n}\n\n// --- Backrest ---\nmodule backrest() {\n    translate([0, 30-4, 20])\n        difference() {\n            cube([100-4, 8, 30], center = true);\n            // cut-outs for style\n            for(i = [-1:1])\n                translate([i*25, 0, 0])\n                    cube([12, 10, 25], center = true);\n        }\n}\n\n// --- Assembly ---\nunion() {\n    leg_frame();\n    translate([0, 0, 10]) seat_frame();\n    translate([0, 0, 18]) cushion(95, 30, 8);\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "tabouret",
    "openscad_code": "// Realistic Tabouret (Bar Stool)\n// Overall height 120 mm, seat Ø 100 mm, printable as a single piece.\n\n/* ---------- PARAMETERS ---------- */\nseat_dia   = 100;   // mm\nseat_thick =  8;\nleg_taper  =  3;    // mm per side\nleg_thick  =  4;    // wall thickness\nleg_top    = 12;    // side length at top\nleg_bot    = leg_top - 2*leg_taper;\nleg_len    = 100 - seat_thick;\nring_h     = 10;\nring_dia   = 70;\nfoot_r     =  5;\n\n/* ---------- MODULES ---------- */\nmodule leg() {\n    linear_extrude(height = leg_len, scale = leg_bot/leg_top, center = false)\n        square([leg_top, leg_top], center = true);\n}\n\nmodule seat() {\n    difference() {\n        cylinder(h = seat_thick, d = seat_dia, $fn = 48);\n        // slight concave top for comfort\n        translate([0, 0, seat_thick - 2])\n            cylinder(h = 4, d1 = seat_dia*0.9, d2 = seat_dia, $fn = 48);\n    }\n}\n\nmodule stretcher_ring() {\n    difference() {\n        cylinder(h = ring_h, d = ring_dia + 2*leg_thick, $fn = 48);\n        cylinder(h = ring_h + 0.1, d = ring_dia, $fn = 48);\n    }\n}\n\nmodule foot() {\n    translate([0, 0, leg_len])\n        cylinder(h = foot_r*2, r = foot_r, $fn = 16);\n}\n\n/* ---------- MAIN ASSEMBLY ---------- */\nunion() {\n    // Seat\n    seat();\n\n    // Four legs positioned at 45°\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([0, seat_dia/2 - leg_top/2 - 3, seat_thick])\n                leg();\n    }\n\n    // Foot rings\n    translate([0, 0, seat_thick + leg_len/2 - ring_h/2])\n        stretcher_ring();\n\n    // Tiny feet for better bed adhesion\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([0, seat_dia/2 - leg_top/2 - 3, 0])\n                foot();\n    }\n}",
    "renders": true
  },
  {
    "furniture": "taboret",
    "openscad_code": "// Realistic Taboret (Artist's Stool)\n// Overall footprint: 60 x 60 mm, height 90 mm\n// 3 mm wall thickness everywhere for easy printing\n\n$fn = 36;\n\nmodule leg() {\n    // Single turned-wood style leg\n    union() {\n        // Top cylinder\n        cylinder(h = 10, d = 8);\n        // Middle taper\n        translate([0,0,10])\n            cylinder(h1 = 5, h2 = 25, r1 = 4, r2 = 3);\n        // Bottom cylinder\n        translate([0,0,35])\n            cylinder(h = 55, d = 6);\n    }\n}\n\nmodule stretcher() {\n    // Side-to-side stretcher between legs\n    cube([52, 6, 6], center = true);\n}\n\nmodule seat() {\n    // Padded seat cushion on top of the base\n    difference() {\n        // Main cushion\n        translate([0,0,90])\n            cylinder(h = 10, d = 60);\n        // Chamfer underside\n        translate([0,0,90])\n            cylinder(h1 = 2, h2 = 0, r1 = 28, r2 = 26);\n    }\n    \n    // Wooden seat base under cushion\n    translate([0,0,80])\n        cube([55, 55, 10], center = true);\n}\n\nmodule drawer() {\n    // Small drawer under seat\n    difference() {\n        // Drawer front\n        translate([0,-27.5,65])\n            cube([50, 3, 20], center = true);\n        // Recessed handle\n        translate([0,-26,75])\n            cube([20, 3, 5], center = true);\n    }\n    // Drawer body\n    translate([0,-20,65])\n        cube([45, 14, 15], center = true);\n}\n\n// Assemble the taboret\nunion() {\n    // Seat and cushion\n    seat();\n    \n    // Drawer\n    drawer();\n    \n    // Four legs at corners\n    translate([25, 25, 0]) leg();\n    translate([-25, 25, 0]) leg();\n    translate([25, -25, 0]) leg();\n    translate([-25, -25, 0]) leg();\n    \n    // Lower stretchers\n    translate([0, 25, 20]) stretcher();\n    translate([0, -25, 20]) stretcher();\n    translate([25, 0, 20]) rotate([0,0,90]) stretcher();\n    translate([-25, 0, 20]) rotate([0,0,90]) stretcher();\n    \n    // Mid stretchers\n    translate([0, 25, 40]) stretcher();\n    translate([0, -25, 40]) stretcher();\n    translate([25, 0, 40]) rotate([0,0,90]) stretcher();\n    translate([-25, 0, 40]) rotate([0,0,90]) stretcher();\n}",
    "renders": true
  },
  {
    "furniture": "banquette",
    "openscad_code": "// Realistic Banquette - Medium Complexity\n// Dimensions: 120mm L x 50mm W x 55mm H\n\n$fn = 30;\n\nmodule banquette() {\n    // Base frame structure\n    difference() {\n        // Main body\n        cube([120, 50, 45], center = true);\n        \n        // Hollow interior for 3D printing\n        translate([0, 0, 2])\n        cube([116, 46, 41], center = true);\n    }\n    \n    // Front face detail panel\n    translate([0, 25, 0])\n    cube([118, 2, 43], center = true);\n    \n    // Backrest frame\n    translate([0, -20, 25])\n    difference() {\n        cube([118, 10, 30], center = true);\n        translate([0, 2, 0])\n        cube([114, 6, 26], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 25])\n    difference() {\n        // Main cushion\n        cube([116, 48, 8], center = true);\n        \n        // Cushion top rounding\n        translate([0, 0, 4])\n        scale([1, 1, 0.3])\n        sphere(d = 8);\n        \n        // Hollow interior for printing\n        translate([0, 0, -1])\n        cube([112, 44, 6], center = true);\n    }\n    \n    // Back cushion\n    translate([0, -15, 38])\n    rotate([15, 0, 0])\n    difference() {\n        // Main back cushion\n        cube([114, 8, 20], center = true);\n        \n        // Contour details\n        translate([0, 0, 3])\n        cube([110, 4, 14], center = true);\n    }\n    \n    // Support legs\n    module leg(x, y) {\n        translate([x, y, -25])\n        difference() {\n            // Main leg\n            cube([6, 6, 50], center = true);\n            \n            // Hollow for printing\n            translate([0, 0, 0])\n            cube([2, 2, 50], center = true);\n        }\n    }\n    \n    // Front legs\n    leg(55, 20);\n    leg(-55, 20);\n    \n    // Back support blocks\n    translate([55, -20, -25])\n    cube([6, 6, 50], center = true);\n    translate([-55, -20, -25])\n    cube([6, 6, 50], center = true);\n    \n    // Decorative buttons on cushions\n    module button(x, y, z) {\n        translate([x, y, z])\n        difference() {\n            cylinder(h = 2, d = 4, center = true);\n            translate([0, 0, 0.5])\n            cylinder(h = 2, d = 2, center = true);\n        }\n    }\n    \n    // Seat buttons\n    for (i = [-40:40:40]) {\n        button(i, 0, 29);\n    }\n    \n    // Back buttons\n    for (i = [-40:40:40]) {\n        button(i, -15, 42);\n    }\n    \n    // Side armrest details\n    translate([58, 0, 15])\n    difference() {\n        cube([4, 46, 20], center = true);\n        translate([0, 0, -5])\n        cube([2, 42, 10], center = true);\n    }\n    \n    translate([-58, 0, 15])\n    difference() {\n        cube([4, 46, 20], center = true);\n        translate([0, 0, -5])\n        cube([2, 42, 10], center = true);\n    }\n}\n\nbanquette();",
    "renders": true
  },
  {
    "furniture": "tuffet",
    "openscad_code": "// Realistic Tuffet (medium complexity, 3D-printable)\n// Overall size: ~90 mm diameter × 55 mm tall\n\n$fn = 32; // smooth curves\n\n// Parameters\nseat_d = 80;          // cushion diameter\nseat_h = 30;          // cushion thickness\nleg_d = 8;            // leg diameter\nleg_h = 25;           // leg height\nskirt_t = 2;          // skirt thickness\nskirt_h = 10;         // skirt height\nbutton_d = 6;         // tufted button diameter\nwall = 2;             // uniform wall thickness for printing\n\nmodule tuffet() {\n    union() {\n        // Tufted seat cushion\n        difference() {\n            // Main cushion body\n            cylinder(h = seat_h, d = seat_d);\n            \n            // Top face inset for fabric effect\n            translate([0, 0, seat_h - 1])\n                cylinder(h = 2, d = seat_d - 6);\n        }\n        \n        // Tufted buttons (4-fold symmetry)\n        for (a = [0 : 90 : 270]) {\n            rotate([0, 0, a])\n                translate([seat_d / 2 * 0.5, seat_d / 2 * 0.5, seat_h - 0.5])\n                    cylinder(h = 2, d = button_d);\n        }\n        \n        // Structural skirt / apron (hollow to save material)\n        difference() {\n            cylinder(h = skirt_h, d = seat_d);\n            translate([0, 0, -0.5])\n                cylinder(h = skirt_h + 1, d = seat_d - 2 * skirt_t);\n        }\n        translate([0, 0, -leg_h])\n            cylinder(h = leg_h, d = seat_d - 2 * skirt_t);\n        \n        // Four round legs\n        for (a = [45 : 90 : 315]) {\n            rotate([0, 0, a])\n                translate([seat_d / 2 * 0.65, 0, -leg_h])\n                    cylinder(h = leg_h, d = leg_d);\n        }\n        \n        // Reinforcement ring between legs (printable without supports)\n        translate([0, 0, -leg_h / 2])\n            difference() {\n                cylinder(h = wall, d = seat_d * 0.8);\n                cylinder(h = wall + 0.2, d = seat_d * 0.8 - 2 * wall);\n            }\n    }\n}\n\n// Render the tuffet centered on the build plate\ntranslate([0, 0, leg_h])\n    tuffet();",
    "renders": true
  },
  {
    "furniture": "hassock",
    "openscad_code": "// Hassock / Ottoman with tufted cushion and four legs\n// Overall dimensions: 100mm diameter, 60mm height\n// Wall thickness: 2mm for 3D printability\n\n// Main parameters\n$fn = 48; // Smooth curves\nleg_height = 25;\nleg_width = 15;\nbody_height = 35;\nbody_radius = 48;\ncushion_height = 15;\ntuft_depth = 3;\ntuft_radius = 8;\nleg_taper = 0.8;\n\n// Cushion module with tufted top\nmodule tufted_cushion() {\n    difference() {\n        // Main cushion body\n        cylinder(h = cushion_height, r1 = body_radius, r2 = body_radius - 3);\n        \n        // Tufted dimples\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                translate([i * 25, j * 25, cushion_height - tuft_depth]) {\n                    sphere(r = tuft_radius);\n                }\n            }\n        }\n    }\n}\n\n// Tapered leg module\nmodule leg() {\n    linear_extrude(height = leg_height, scale = leg_taper) {\n        square([leg_width, leg_width], center = true);\n    }\n}\n\n// Body with hollow center\nmodule hassock_body() {\n    difference() {\n        cylinder(h = body_height, r = body_radius);\n        \n        // Hollow interior\n        translate([0, 0, -1]) {\n            cylinder(h = body_height + 2, r = body_radius - 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    hassock_body();\n    \n    // Cushion on top\n    translate([0, 0, body_height]) {\n        tufted_cushion();\n    }\n    \n    // Four legs at corners\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * 32, y * 32, 0]) {\n                leg();\n            }\n        }\n    }\n    \n    // Decorative band around body\n    translate([0, 0, body_height - 5]) {\n        difference() {\n            cylinder(h = 5, r = body_radius + 1);\n            cylinder(h = 7, r = body_radius - 1);\n        }\n    }\n}",
    "renders": true
  },
  {
    "furniture": "pouf",
    "openscad_code": "// Realistic Pouf - Medium Complexity\n// Dimensions: 80mm diameter, 120mm height (suitable for 3D printing)\n\n$fn = 36;  // Smooth curves for realistic appearance\nwall_thickness = 2;  // Proper wall thickness for 3D printing\n\nmodule pouf_base() {\n    // Main cylindrical body with rounded top\n    difference() {\n        // Outer shape - rounded cylinder\n        union() {\n            cylinder(h=100, d=80, center=false);\n            // Rounded top\n            translate([0, 0, 100])\n                scale([1, 1, 0.5])\n                    sphere(d=80);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=102, d=80 - 2*wall_thickness, center=false);\n    }\n}\n\nmodule cushion_detail() {\n    // Top cushion with tufted buttons\n    translate([0, 0, 100]) {\n        // Cushion layer\n        difference() {\n            cylinder(h=15, d=82, center=true);\n            translate([0, 0, -9])\n                cylinder(h=20, d=80, center=true);\n        }\n        \n        // Tufted buttons\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i * 25, j * 25, 107.5])\n                    cylinder(h=3, d=8);\n            }\n        }\n    }\n}\n\nmodule legs_support() {\n    // Hidden support structure inside\n    translate([0, 0, 0]) {\n        // Central support column\n        cylinder(h=20, d=20);\n        \n        // Radial supports for stability\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n                translate([20, 0, 10])\n                    cube([30, wall_thickness, 20], center=true);\n        }\n    }\n}\n\nmodule seam_details() {\n    // Decorative seam lines around the body\n    for(z = [20:20:100]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=1, d=81);\n                cylinder(h=2, d=79);\n            }\n    }\n}\n\nmodule bottom_details() {\n    // Bottom reinforcement ring\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=5, d=82);\n            cylinder(h=6, d=78);\n        }\n    }\n    \n    // Small feet indentations\n    for(angle = [45:90:315]) {\n        rotate([0, 0, angle])\n            translate([30, 0, 0])\n                difference() {\n                    cylinder(h=5, d=10);\n                    cylinder(h=6, d=6);\n                }\n    }\n}\n\n// Assemble the pouf\nunion() {\n    pouf_base();\n    cushion_detail();\n    legs_support();\n    seam_details();\n    bottom_details();\n}",
    "renders": true
  },
  {
    "furniture": "cushion",
    "openscad_code": "// Realistic cushion furniture - medium complexity\n// Dimensions: 80mm x 80mm x 30mm\n\nmodule rounded_cube(size, radius, center=false) {\n    // Create a rounded cube for cushion appearance\n    translate(center ? [-size.x/2, -size.y/2, -size.z/2] : [0, 0, 0]) {\n        hull() {\n            // Corner spheres\n            for (x = [0, size.x], y = [0, size.y], z = [0, size.z]) {\n                translate([x, y, z]) \n                    sphere(r=radius, $fn=12);\n            }\n        }\n    }\n}\n\nmodule tufted_button(pos, depth) {\n    // Create a tufted button detail\n    translate(pos) {\n        difference() {\n            cylinder(h=2, r=2.5, $fn=16);\n            translate([0, 0, 0.5]) \n                cylinder(h=2, r=1.5, $fn=16);\n        }\n    }\n}\n\nmodule seam_line(start, end, width=1, height=0.5) {\n    // Create a raised seam line between points\n    dx = end.x - start.x;\n    dy = end.y - start.y;\n    length = sqrt(dx*dx + dy*dy);\n    angle = atan2(dy, dx);\n    \n    translate(start) \n        rotate([0, 0, angle]) \n            translate([0, -width/2, 0]) \n                cube([length, width, height]);\n}\n\nmodule cushion_main() {\n    // Main cushion body with rounded edges\n    difference() {\n        // Base cushion\n        rounded_cube([80, 80, 30], 8, true);\n        \n        // Slight indentation on top surface\n        translate([0, 0, 14]) \n            scale([0.9, 0.9, 1]) \n                rounded_cube([80, 80, 4], 6, true);\n    }\n}\n\nmodule cushion_details() {\n    // Add tufted buttons in 3x3 grid pattern\n    for (x = [-25, 0, 25]) {\n        for (y = [-25, 0, 25]) {\n            tufted_button([x, y, 14.5], 2);\n        }\n    }\n    \n    // Add seam lines around the edges\n    seam_line([-35, -40, 15], [35, -40, 15]);\n    seam_line([35, -40, 15], [40, -35, 15]);\n    seam_line([40, -35, 15], [40, 35, 15]);\n    seam_line([40, 35, 15], [35, 40, 15]);\n    seam_line([35, 40, 15], [-35, 40, 15]);\n    seam_line([-35, 40, 15], [-40, 35, 15]);\n    seam_line([-40, 35, 15], [-40, -35, 15]);\n    seam_line([-40, -35, 15], [-35, -40, 15]);\n    \n    // Vertical seam lines\n    seam_line([0, -40, 15], [0, 40, 15]);\n    seam_line([-40, 0, 15], [40, 0, 15]);\n}\n\nmodule zipper_panel() {\n    // Create a zipper panel at the back\n    translate([0, 39.5, -10]) {\n        difference() {\n            // Panel base\n            cube([60, 2, 15], center=true);\n            \n            // Zipper teeth\n            for (x = [-25:5:25]) {\n                translate([x, 0, 0]) \n                    cube([2, 2.5, 15], center=true);\n            }\n            \n            // Zipper pull\n            translate([0, 2, 7]) \n                rotate([90, 0, 0]) \n                    cylinder(h=5, r=2, $fn=8);\n        }\n    }\n}\n\nmodule corner_reinforcements() {\n    // Add subtle corner reinforcements\n    for (x = [-35, 35]) {\n        for (y = [-35, 35]) {\n            translate([x, y, -13]) {\n                difference() {\n                    cylinder(h=5, r=4, $fn=12);\n                    cylinder(h=6, r=2, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    cushion_main();\n    cushion_details();\n    zipper_panel();\n    corner_reinforcements();\n}",
    "renders": true
  },
  {
    "furniture": "perch",
    "openscad_code": "// Bird Perch Furniture - Realistic Style, Medium Complexity\n// Dimensions in mm, wall thickness 2mm for 3D printing\n\n// Main parameters\nperch_length = 120;\nperch_diameter = 12;\nbase_width = 80;\nbase_depth = 60;\nbase_height = 15;\npost_height = 100;\npost_diameter = 16;\n\n// Base with rounded edges\nmodule base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            minkowski() {\n                cube([base_width-4, base_depth-4, base_height-2], center=true);\n                sphere(2);\n            }\n        \n        // Hollow base for weight reduction\n        translate([0, 0, 3])\n            cube([base_width-8, base_depth-8, base_height], center=true);\n    }\n}\n\n// Decorative post with fluting\nmodule post() {\n    union() {\n        // Main post\n        translate([0, 0, post_height/2 + base_height])\n            cylinder(h=post_height, d=post_diameter, $fn=32);\n        \n        // Decorative rings\n        for(i = [1:3]) {\n            translate([0, 0, i*post_height/4 + base_height])\n                cylinder(h=3, d1=post_diameter+2, d2=post_diameter+4, $fn=32);\n        }\n    }\n}\n\n// Perch bar with grooves for grip\nmodule perch() {\n    difference() {\n        // Main perch\n        translate([0, 0, post_height + base_height + perch_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=perch_length, d=perch_diameter, $fn=32);\n        \n        // Grip grooves\n        for(i = [-perch_length/2+10 : 10 : perch_length/2-10]) {\n            translate([i, 0, post_height + base_height])\n                rotate([90, 0, 0])\n                    cylinder(h=perch_diameter+2, d=perch_diameter-2, $fn=32);\n        }\n    }\n}\n\n// Support brackets for perch\nmodule supports() {\n    for(side = [-1, 1]) {\n        translate([side*perch_length/3, 0, post_height/2 + base_height + perch_diameter/2]) {\n            rotate([0, 30*side, 0])\n                cube([20, 4, 4], center=true);\n            rotate([0, 60*side, 0])\n                cube([15, 4, 4], center=true);\n        }\n    }\n}\n\n// Food/water dishes\nmodule dishes() {\n    for(side = [-1, 1]) {\n        translate([side*perch_length/2 + side*10, 0, post_height + base_height - 5]) {\n            difference() {\n                // Dish base\n                cylinder(h=5, d=20, $fn=32);\n                // Hollow dish\n                translate([0, 0, 2])\n                    cylinder(h=4, d=16, $fn=32);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    post();\n    perch();\n    supports();\n    dishes();\n}",
    "renders": true
  },
  {
    "furniture": "seat",
    "openscad_code": "// Modern armchair with thin walls, 3D-printable\n// Overall size ~100 mm wide, printable in one piece\n\n// Parameters\nwall = 2;               // wall thickness for 3D printing\nscale_fac = 1;          // global scale (leave at 1 for 100 mm width)\n\n// Main seat assembly\nmodule chair() {\n    // Cushion (hollow box)\n    difference() {\n        translate([0, 0, 20]) cube([60, 60, 12], center = true);\n        translate([0, 0, 21]) cube([56, 56, 12], center = true);\n    }\n\n    // Seat frame\n    difference() {\n        translate([0, 0, 8]) cube([64, 64, 24], center = true);\n        translate([0, 0, 10]) cube([60, 60, 22], center = true);\n    }\n\n    // Backrest uprights (legs extend up)\n    for (x = [-28, 28]) {\n        difference() {\n            translate([x, 0, 40])\n                rotate([90, 0, 0])\n                    cylinder(h = 40, d = 8, center = true);\n            translate([x, 0, 40])\n                rotate([90, 0, 0])\n                    cylinder(h = 40, d = 4, center = true);\n        }\n    }\n\n    // Backrest panel (hollow)\n    difference() {\n        translate([0, -30, 40]) cube([60, 4, 40], center = true);\n        translate([0, -30, 40]) cube([56, 4, 36], center = true);\n    }\n\n    // Backrest top rail\n    difference() {\n        translate([0, -30, 60]) cube([64, 4, 8], center = true);\n        translate([0, -30, 60]) cube([60, 4, 4], center = true);\n    }\n\n    // Front legs\n    for (x = [-26, 26]) {\n        difference() {\n            translate([x, 26, 10])\n                rotate([0, 0, 0])\n                    cylinder(h = 20, d = 8, center = true);\n            translate([x, 26, 10])\n                rotate([0, 0, 0])\n                    cylinder(h = 20, d = 4, center = true);\n        }\n    }\n\n    // Rear legs (continue from backrest)\n    for (x = [-26, 26]) {\n        difference() {\n            translate([x, -26, 10])\n                rotate([0, 0, 0])\n                    cylinder(h = 20, d = 8, center = true);\n            translate([x, -26, 10])\n                rotate([0, 0, 0])\n                    cylinder(h = 20, d = 4, center = true);\n        }\n    }\n\n    // Side stretchers (front-back)\n    for (y = [-26, 26]) {\n        difference() {\n            translate([0, y, 10])\n                rotate([90, 0, 90])\n                    cylinder(h = 52, d = 6, center = true);\n            translate([0, y, 10])\n                rotate([90, 0, 90])\n                    cylinder(h = 52, d = 2, center = true);\n        }\n    }\n\n    // Front stretcher\n    difference() {\n        translate([0, 30, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d = 6, center = true);\n        translate([0, 30, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d = 2, center = true);\n    }\n\n    // Back stretcher\n    difference() {\n        translate([0, -30, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d = 6, center = true);\n        translate([0, -30, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 52, d = 2, center = true);\n    }\n\n    // Armrest supports\n    for (x = [-30, 30]) {\n        difference() {\n            translate([x, 15, 35])\n                rotate([0, 15, 0])\n                    cylinder(h = 22, d = 6, center = true);\n            translate([x, 15, 35])\n                rotate([0, 15, 0])\n                    cylinder(h = 22, d = 2, center = true);\n        }\n    }\n\n    // Armrest tops\n    difference() {\n        translate([-30, 15, 38]) cube([8, 30, 4], center = true);\n        translate([-30, 15, 38]) cube([4, 26, 4], center = true);\n    }\n    difference() {\n        translate([30, 15, 38]) cube([8, 30, 4], center = true);\n        translate([30, 15, 38]) cube([4, 26, 4], center = true);\n    }\n}\n\n// Render\nscale(scale_fac) chair();",
    "renders": true
  },
  {
    "furniture": "saddle",
    "openscad_code": "// Saddle Furniture - Realistic Medium Complexity\n// Overall dimensions: 120mm x 80mm x 40mm\n\nseat_thickness = 4;\nwall_thickness = 2;\nleg_diameter = 6;\nleg_height = 25;\n\nmodule saddle_seat() {\n    // Main seat base\n    difference() {\n        // Curved seat platform\n        hull() {\n            translate([-50, -35, 0])\n                scale([1, 0.8, 0.5])\n                sphere(d=40);\n            translate([50, -35, 0])\n                scale([1, 0.8, 0.5])\n                sphere(d=40);\n            translate([0, 35, 0])\n                scale([1, 0.8, 0.5])\n                sphere(d=40);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -1])\n            scale([0.9, 0.9, 1])\n            hull() {\n                translate([-45, -30, 0])\n                    scale([1, 0.8, 0.5])\n                    sphere(d=40);\n                translate([45, -30, 0])\n                    scale([1, 0.8, 0.5])\n                    sphere(d=40);\n                translate([0, 30, 0])\n                    scale([1, 0.8, 0.5])\n                    sphere(d=40);\n            }\n    }\n}\n\nmodule saddle_back() {\n    // High backrest\n    difference() {\n        union() {\n            // Main back panel\n            translate([0, 40, 30])\n                rotate([90, 0, 0])\n                scale([1.2, 1, 0.3])\n                cylinder(h=60, d=80, $fn=8);\n                \n            // Support ribs\n            for(x = [-30, 0, 30]) {\n                translate([x, 40, 15])\n                    rotate([90, 0, 0])\n                    scale([0.1, 1, 1])\n                    cylinder(h=30, d=20, $fn=4);\n            }\n        }\n        \n        // Hollow backrest\n        translate([0, 40, 30])\n            rotate([90, 0, 0])\n            scale([1.1, 0.9, 0.35])\n            cylinder(h=60, d=75, $fn=8);\n    }\n}\n\nmodule saddle_legs() {\n    // Four support legs with cross-bracing\n    positions = [[-40, -30], [40, -30], [-40, 30], [40, 30]];\n    \n    // Legs\n    for(pos = positions) {\n        translate([pos[0], pos[1], -leg_height/2])\n            cylinder(h=leg_height, d=leg_diameter, $fn=8);\n    }\n    \n    // Cross braces between legs\n    translate([0, -30, -leg_height+2])\n        cube([80-wall_thickness, wall_thickness, leg_diameter], center=true);\n    translate([0, 30, -leg_height+2])\n        cube([80-wall_thickness, wall_thickness, leg_diameter], center=true);\n    translate([-40, 0, -leg_height+2])\n        rotate([0, 0, 90])\n        cube([60-wall_thickness, wall_thickness, leg_diameter], center=true);\n    translate([40, 0, -leg_height+2])\n        rotate([0, 0, 90])\n        cube([60-wall_thickness, wall_thickness, leg_diameter], center=true);\n}\n\nmodule saddle_details() {\n    // Edge piping around seat\n    difference() {\n        translate([0, 0, seat_thickness/2])\n            scale([1.05, 1.05, 1])\n            saddle_seat();\n        translate([0, 0, -1])\n            scale([1, 1, 2])\n            saddle_seat();\n    }\n    \n    // Upholstery buttons\n    button_positions = [[0, 0], [-30, -20], [30, -20], [-20, 20], [20, 20]];\n    for(pos = button_positions) {\n        translate([pos[0], pos[1], seat_thickness+2])\n            sphere(d=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    saddle_seat();\n    saddle_back();\n    saddle_legs();\n    saddle_details();\n}",
    "renders": true
  },
  {
    "furniture": "ottomane",
    "openscad_code": "// Ottoman - Realistic Style, Medium Complexity\n// Dimensions: 80x80x45mm (prints in ~2 hours)\n\n$fn = 48;           // Smooth curves\nwall = 2;           // 2mm wall thickness for printing\n\n// Main parameters\nleg_h = 25;         // Leg height\ncushion_h = 20;     // Cushion thickness\nframe_t = 5;        // Frame thickness\nbutton_d = 4;       // Tufted button diameter\n\n// Base frame module\nmodule frame_base() {\n    difference() {\n        // Outer frame\n        cube([80, 80, 5], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([76, 76, 7], center=true);\n    }\n}\n\n// Leg module with taper\nmodule leg() {\n    // Leg body\n    cylinder(h=leg_h, r1=4, r2=3);\n    \n    // Leg foot detail\n    translate([0, 0, leg_h])\n        cylinder(h=2, r1=3.5, r2=4);\n}\n\n// Cushion with tufting\nmodule cushion() {\n    difference() {\n        // Main cushion body\n        translate([0, 0, cushion_h/2 + 5])\n            minkowski() {\n                cube([76, 76, cushion_h], center=true);\n                sphere(2);\n            }\n        \n        // Tufted buttons (grid pattern)\n        for(x=[-25, 0, 25])\n            for(y=[-25, 0, 25])\n                translate([x, y, cushion_h + 5])\n                    cylinder(h=button_d+2, r=button_d/2, center=true);\n    }\n}\n\n// Side panel with seam detail\nmodule side_panel(length) {\n    difference() {\n        // Panel\n        cube([length, frame_t, 20]);\n        \n        // Seam groove\n        translate([0, -1, 10])\n            cube([length, 3, 1]);\n    }\n}\n\n// Complete ottoman assembly\nunion() {\n    // Base frame\n    frame_base();\n    \n    // Four legs at corners\n    for(x=[-35, 35])\n        for(y=[-35, 35])\n            translate([x, y, -leg_h/2 - 2.5])\n                leg();\n    \n    // Side panels\n    for(side=[0, 90, 180, 270])\n        rotate([0, 0, side])\n            translate([-40, -2.5, 2.5])\n                side_panel(80);\n    \n    // Top cushion\n    cushion();\n    \n    // Corner brackets for realism\n    for(x=[-35, 35])\n        for(y=[-35, 35])\n            translate([x, y, 2.5])\n                cube([8, 8, 5], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "sillon",
    "openscad_code": "// Sillon (arm-chair) – realistic style, medium complexity, 3D-printable\n// Overall printable size ≈ 90 mm (height) × 60 mm (seat depth) × 50 mm (seat width)\n\n$fn = 32;               // smooth curves\nwall = 2;               // 2 mm printable wall thickness\n\n/* ---------- overall dimensions ---------- */\nseat_w  = 50;\nseat_d  = 60;\nseat_h  = 40;           // seat top to floor\nback_h  = 45;           // seat top to top of backrest\narm_h   = 20;           // armrest height above seat\nleg_h   = seat_h - wall;\nleg_sz  = 6;\n\n/* ---------- seat cushion ---------- */\nmodule seat_cushion() {\n    difference() {\n        translate([0, 0, seat_h + wall/2])\n            cube([seat_w, seat_d, 10], center = true);\n        translate([0, 0, seat_h + wall/2 + 2])\n            cube([seat_w - 2*wall, seat_d - 2*wall, 8], center = true);\n    }\n}\n\n/* ---------- backrest ---------- */\nmodule backrest() {\n    difference() {\n        translate([0, -seat_d/2 + wall/2, seat_h + back_h/2])\n            cube([seat_w, wall, back_h], center = true);\n        translate([0, -seat_d/2 - 1, seat_h + back_h/2])\n            cube([seat_w - 2*wall, wall + 2, back_h - 2*wall], center = true);\n    }\n}\n\n/* ---------- armrests ---------- */\nmodule armrest(side) {      // side = 1 or -1\n    translate([side * (seat_w/2 + wall/2), 0, seat_h + arm_h/2])\n        cube([wall, seat_d*0.7, arm_h], center = true);\n}\n\n/* ---------- legs ---------- */\nmodule leg(x, y) {\n    translate([x, y, leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n}\n\n/* ---------- stretchers for stability ---------- */\nmodule stretcher(x1, y1, x2, y2) {\n    length = norm([x2-x1, y2-y1]);\n    angle  = atan2(y2-y1, x2-x1);\n    translate([(x1+x2)/2, (y1+y2)/2, leg_h/4])\n        rotate([0, 0, angle])\n            cube([length, wall, wall], center = true);\n}\n\n/* ---------- assembly ---------- */\nunion() {\n    seat_cushion();\n    backrest();\n\n    armrest( 1);\n    armrest(-1);\n\n    // four legs\n    for (dx = [-1, 1])\n        for (dy = [-1, 1])\n            leg(dx * (seat_w/2 - leg_sz/2 - wall),\n                dy * (seat_d/2 - leg_sz/2 - wall));\n\n    // side stretchers\n    stretcher(-(seat_w/2 - leg_sz/2 - wall),  (seat_d/2 - leg_sz/2 - wall),\n              -(seat_w/2 - leg_sz/2 - wall), -(seat_d/2 - leg_sz/2 - wall));\n    stretcher( (seat_w/2 - leg_sz/2 - wall),  (seat_d/2 - leg_sz/2 - wall),\n               (seat_w/2 - leg_sz/2 - wall), -(seat_d/2 - leg_sz/2 - wall));\n\n    // front & back stretchers\n    stretcher(-(seat_w/2 - leg_sz/2 - wall), -(seat_d/2 - leg_sz/2 - wall),\n               (seat_w/2 - leg_sz/2 - wall), -(seat_d/2 - leg_sz/2 - wall));\n    stretcher(-(seat_w/2 - leg_sz/2 - wall),  (seat_d/2 - leg_sz/2 - wall),\n               (seat_w/2 - leg_sz/2 - wall),  (seat_d/2 - leg_sz/2 - wall));\n}",
    "renders": true
  },
  {
    "furniture": "sella",
    "openscad_code": "// Sella Chair - Realistic Style, Medium Complexity\n// A modern sella chair with cushioned seat, curved backrest, and sleek legs\n\nmodule chair_leg(x_pos, y_pos) {\n    // Main leg cylinder\n    translate([x_pos, y_pos, 0])\n        cylinder(h = 40, d = 8, $fn = 20);\n    \n    // Leg cap for stability\n    translate([x_pos, y_pos, -1])\n        cylinder(h = 2, d = 10, $fn = 20);\n}\n\nmodule backrest_support(x_pos) {\n    // Vertical support bar\n    translate([x_pos, 18, 0])\n        cylinder(h = 45, d = 6, $fn = 16);\n    \n    // Curved connection to backrest\n    translate([x_pos, 18, 42])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 6, $fn = 16);\n}\n\nmodule cushion() {\n    // Main cushion\n    translate([0, 0, 40])\n        cube([45, 40, 8], center = true);\n    \n    // Cushion rounding\n    translate([0, 0, 44])\n        minkowski() {\n            cube([41, 36, 2], center = true);\n            sphere(d = 4, $fn = 16);\n        }\n}\n\nmodule backrest() {\n    // Main backrest panel\n    translate([0, 22, 50])\n        rotate([10, 0, 0])\n            cube([45, 4, 35], center = true);\n    \n    // Backrest top curve\n    translate([0, 22, 67])\n        rotate([10, 0, 0])\n            difference() {\n                cube([45, 4, 6], center = true);\n                translate([0, 2, 3])\n                    sphere(d = 45, $fn = 30);\n            }\n}\n\nunion() {\n    // Four legs\n    chair_leg(-20, -16);\n    chair_leg(20, -16);\n    chair_leg(-20, 16);\n    chair_leg(20, 16);\n    \n    // Support frame between legs\n    // Front support\n    translate([0, -16, 20])\n        cube([48, 4, 4], center = true);\n    \n    // Back support\n    translate([0, 16, 20])\n        cube([48, 4, 4], center = true);\n    \n    // Side supports\n    translate([-20, 0, 20])\n        cube([4, 36, 4], center = true);\n    translate([20, 0, 20])\n        cube([4, 36, 4], center = true);\n    \n    // Backrest supports\n    backrest_support(-18);\n    backrest_support(18);\n    \n    // Seat cushion\n    cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Small decorative seam on cushion\n    for(i = [-15:10:15]) {\n        translate([i, 0, 48.1])\n            cube([1, 38, 0.5], center = true);\n    }\n    \n    // Rounding on leg joints\n    translate([-20, -16, 38])\n        sphere(d = 8, $fn = 16);\n    translate([20, -16, 38])\n        sphere(d = 8, $fn = 16);\n    translate([-20, 16, 38])\n        sphere(d = 8, $fn = 16);\n    translate([20, 16, 38])\n        sphere(d = 8, $fn = 16);\n}",
    "renders": true
  },
  {
    "furniture": "cathedra",
    "openscad_code": "// Cathedra Chair - Realistic Style, Medium Complexity\n// Dimensions: ~90mm H x 60mm W x 65mm D\n\n$fn = 32;\n\nmodule leg(x, y, angle = 0) {\n    translate([x, y, 0]) {\n        rotate([0, 0, angle]) {\n            // Main leg post\n            difference() {\n                cube([8, 8, 45], center = true);\n                translate([0, 0, -22.5]) cylinder(h = 50, r1 = 3, r2 = 3, center = true);\n            }\n            \n            // Foot detail\n            translate([0, 0, -22.5]) {\n                difference() {\n                    cylinder(h = 5, r1 = 5, r2 = 4);\n                    cylinder(h = 6, r1 = 3.5, r2 = 3);\n                }\n            }\n        }\n    }\n}\n\nmodule backrest_post() {\n    // Vertical post\n    cube([6, 3, 40], center = true);\n    \n    // Top finial\n    translate([0, 0, 20]) {\n        cylinder(h = 8, r1 = 3, r2 = 2);\n        sphere(2.5);\n    }\n}\n\nmodule backrest_panel() {\n    // Main panel\n    difference() {\n        cube([50, 4, 35]);\n        \n        // Gothic arch cutout\n        translate([25, 2, 30]) rotate([90, 0, 0]) {\n            linear_extrude(height = 4.1) {\n                polygon(points = [\n                    [0, 0],\n                    [20, 0],\n                    [20, 15],\n                    [10, 25],\n                    [0, 15]\n                ]);\n            }\n        }\n        \n        // Decorative holes\n        for(i = [0:2]) {\n            translate([12.5 + i*12.5, 2, 17.5]) {\n                rotate([90, 0, 0]) cylinder(h = 4.2, r = 2.5);\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Base\n    difference() {\n        translate([0, 0, 2.5]) cube([45, 45, 5], center = true);\n        translate([0, 0, 2.5]) cube([43, 43, 6], center = true);\n    }\n    \n    // Tufted detail\n    for(x = [-15, 0, 15]) {\n        for(y = [-15, 0, 15]) {\n            translate([x, y, 7.5]) {\n                difference() {\n                    cylinder(h = 2, r = 4);\n                    translate([0, 0, -0.1]) cylinder(h = 2.2, r = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule stretcher() {\n    // Front stretcher\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h = 50, r1 = 3, r2 = 3);\n            cylinder(h = 52, r1 = 2, r2 = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat frame\n    difference() {\n        translate([0, 0, 25]) cube([50, 50, 6], center = true);\n        translate([0, 0, 26]) cube([46, 46, 6], center = true);\n    }\n    \n    // Seat cushion\n    seat_cushion();\n    \n    // Legs\n    leg(-20, -20);\n    leg(20, -20);\n    leg(-20, 20);\n    leg(20, 20);\n    \n    // Backrest assembly\n    translate([0, 22.5, 42.5]) {\n        union() {\n            // Posts\n            translate([-20, 0, 0]) backrest_post();\n            translate([20, 0, 0]) backrest_post();\n            \n            // Panel\n            backrest_panel();\n            \n            // Top rail\n            translate([0, -2, 20]) cube([56, 6, 4], center = true);\n        }\n    }\n    \n    // Stretchers\n    translate([0, -20, 12.5]) stretcher();\n    translate([0, 20, 12.5]) rotate([0, 90, 0]) stretcher();\n    translate([-20, 0, 12.5]) rotate([0, 90, 90]) stretcher();\n    translate([20, 0, 12.5]) rotate([0, 90, 90]) stretcher();\n}",
    "renders": true
  },
  {
    "furniture": "sellion",
    "openscad_code": "// Sellion Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm W x 90mm D x 110mm H\n\n// Parameters\nseat_width = 80;\nseat_depth = 60;\nseat_thickness = 4;\nleg_height = 45;\nleg_thickness = 6;\nback_height = 50;\nback_thickness = 4;\narmrest_height = 20;\narmrest_thickness = 4;\n\n// Main seat\nmodule seat() {\n    // Seat base\n    cube([seat_width, seat_depth, seat_thickness], center = true);\n    \n    // Seat cushion detail\n    translate([0, 0, seat_thickness/2 + 2])\n    cube([seat_width - 10, seat_depth - 10, 4], center = true);\n}\n\n// Leg structure\nmodule leg(x, y) {\n    // Main leg post\n    translate([x, y, -leg_height/2 - seat_thickness/2])\n    cylinder(h = leg_height, d = leg_thickness, $fn = 8);\n    \n    // Leg brace\n    translate([x, y, -seat_thickness/2 - leg_height + 5])\n    cube([leg_thickness, leg_thickness, 10], center = true);\n}\n\n// Backrest\nmodule backrest() {\n    // Main back panel\n    translate([0, -seat_depth/2 - back_thickness/2, back_height/2 + seat_thickness/2])\n    cube([seat_width, back_thickness, back_height], center = true);\n    \n    // Back slats\n    for(i = [-2:2]) {\n        translate([i * 15, -seat_depth/2 - back_thickness/2, back_height/2 + seat_thickness/2])\n        cube([8, back_thickness - 1, back_height - 10], center = true);\n    }\n}\n\n// Armrest\nmodule armrest(side) {\n    // Support post\n    translate([side * (seat_width/2 - leg_thickness/2), seat_depth/4, armrest_height/2 + seat_thickness/2])\n    cylinder(h = armrest_height, d = leg_thickness, $fn = 8);\n    \n    // Armrest surface\n    translate([side * (seat_width/2 - leg_thickness), 0, armrest_height + seat_thickness/2 + 2])\n    cube([leg_thickness + 10, seat_depth/2, armrest_thickness], center = true);\n}\n\n// Cross support bars\nmodule support_bar() {\n    // Front support\n    translate([0, seat_depth/2 - leg_thickness/2, -seat_thickness/2 - leg_height/2 + 10])\n    cube([seat_width - leg_thickness * 2, leg_thickness, leg_thickness], center = true);\n    \n    // Side support\n    translate([seat_width/2 - leg_thickness/2, 0, -seat_thickness/2 - leg_height/2 + 10])\n    rotate([0, 0, 90])\n    cube([seat_depth - leg_thickness * 2, leg_thickness, leg_thickness], center = true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    seat();\n    backrest();\n    \n    // Legs - 4 positions\n    leg(-seat_width/2 + leg_thickness/2, seat_depth/2 - leg_thickness/2);\n    leg(seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2);\n    leg(-seat_width/2 + leg_thickness/2, -seat_depth/2 + leg_thickness/2);\n    leg(seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2);\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Support structure\n    support_bar();\n    translate([0, 0, -seat_thickness/2 - leg_height/2 + 10])\n    rotate([0, 0, 90])\n    support_bar();\n}",
    "renders": true
  },
  {
    "furniture": "diphros",
    "openscad_code": "// Diphros (Ancient Greek folding stool) - Realistic Medium Complexity\n// Overall dimensions: 80mm wide x 60mm deep x 65mm high\n\n$fn = 32;\n\nmodule leg_rod() {\n    // Main leg rod - 5mm diameter\n    cylinder(h = 55, d = 5);\n}\n\nmodule leg_crossbar() {\n    // Crossbar between legs - 4mm diameter\n    cylinder(h = 35, d = 4);\n}\n\nmodule seat_frame() {\n    // Outer frame of seat - 4mm thick\n    difference() {\n        cube([70, 50, 4]);\n        translate([2, 2, -1])\n            cube([66, 46, 6]);\n    }\n}\n\nmodule seat_weave() {\n    // Woven seat pattern - 2mm wide strips\n    union() {\n        for (i = [5:5:65]) {\n            translate([i, 5, 2])\n                cube([2, 40, 1]);\n        }\n        for (j = [5:5:40]) {\n            translate([5, j, 2])\n                cube([60, 2, 1]);\n        }\n    }\n}\n\nmodule pivot_block() {\n    // Pivot joint block - 8mm cube\n    cube([8, 8, 8]);\n}\n\nmodule foot_cap() {\n    // Decorative foot cap - 6mm diameter, 2mm high\n    cylinder(h = 2, d = 6);\n}\n\nmodule leg_assembly(x_offset, y_offset, angle) {\n    // Complete leg assembly with pivot and foot\n    translate([x_offset, y_offset, 0]) {\n        rotate([0, 0, angle]) {\n            // Pivot block\n            pivot_block();\n            \n            // Leg rod\n            translate([4, 4, 8])\n                leg_rod();\n            \n            // Foot cap\n            translate([4, 4, 63])\n                foot_cap();\n            \n            // Crossbar\n            translate([4, -15, 35])\n                rotate([90, 0, 0])\n                    leg_crossbar();\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat frame\n    translate([5, 5, 60])\n        seat_frame();\n    \n    // Woven seat\n    translate([5, 5, 60])\n        seat_weave();\n    \n    // Leg assemblies - X-frame configuration\n    // Front left leg\n    leg_assembly(5, 10, 0);\n    \n    // Front right leg\n    leg_assembly(75, 10, 0);\n    \n    // Back left leg - rotated for X-frame\n    leg_assembly(5, 40, 15);\n    \n    // Back right leg - rotated for X-frame\n    leg_assembly(75, 40, -15);\n    \n    // Support braces between legs\n    // Front brace\n    translate([40, 10, 30])\n        rotate([90, 0, 0])\n            cylinder(h = 35, d = 3);\n    \n    // Back brace\n    translate([40, 40, 30])\n        rotate([90, 0, 0])\n            cylinder(h = 35, d = 3);\n    \n    // Side braces\n    translate([5, 25, 30])\n        rotate([0, 90, 0])\n            cylinder(h = 70, d = 3);\n    \n    // Pivot rod connecting X-frame\n    translate([40, 25, 35])\n        rotate([90, 90, 0])\n            cylinder(h = 35, d = 4);\n}",
    "renders": true
  },
  {
    "furniture": "curule",
    "openscad_code": "// Curule chair (sellae curules) – Roman magistrate seat\n// Overall footprint ≈ 90 mm × 90 mm, seat height 42 mm\n\n// printable wall thickness\nwall = 2;          // mm\nmodule leg_profile() {      // the classic curule X-join\n    difference() {\n        cylinder(h = 40, d1 = 8, d2 = 5, center = true);\n        cylinder(h = 40, d1 = 5, d2 = 2, center = true);\n    }\n}\n\nmodule leg() {\n    // one diagonal strut\n    translate([0, 0, 20]) rotate([90, 0, 45]) leg_profile();\n    // second strut mirrored\n    translate([0, 0, 20]) rotate([90, 0, -45]) leg_profile();\n}\n\nmodule legs_frame() {\n    // left side pair\n    translate([-35, 0, 0]) leg();\n    // right side pair\n    mirror([1, 0, 0]) translate([-35, 0, 0]) leg();\n    \n    // front & rear cross-bars\n    for (z = [4, 38]) {\n        hull() {\n            translate([-35, 0, z]) sphere(wall);\n            translate([ 35, 0, z]) sphere(wall);\n        }\n    }\n}\n\nmodule seat() {\n    // simple cushion block\n    translate([0, 0, 40]) {\n        hull() {\n            for (dx = [-30, 30], dy = [-30, 30])\n                translate([dx, dy, 0]) sphere(wall);\n            for (dx = [-30, 30], dy = [-30, 30])\n                translate([dx, dy, 8]) sphere(wall);\n        }\n    }\n}\n\nmodule backrest() {\n    // curved backrest with spindles\n    difference() {\n        hull() {\n            for (dx = [-30, 30], z = [55, 65])\n                translate([dx, -28, z]) sphere(wall);\n        }\n        // cut spindles\n        for (x = [-20:10:20])\n            translate([x, -28, 60]) cube([wall, wall, 12], center = true);\n    }\n}\n\nunion() {\n    legs_frame();\n    seat();\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "faldstool",
    "openscad_code": "// Faldstool - Medium complexity realistic style\n// Dimensions: 60mm(W) × 70mm(D) × 80mm(H)\n// Wall thickness: 2mm throughout\n// Designed for 3D printing with no overhangs\n\n// Main parameters\nseat_width = 60;\nseat_depth = 35;\nseat_thickness = 2;\n\nbackrest_height = 45;\nbackrest_width = 60;\nbackrest_thickness = 2;\n\nleg_height = 40;\nleg_width = 3;\nleg_depth = 3;\nleg_inset = 2;\n\nstretcher_height = 15;\nstretcher_width = 2;\n\nsupport_rail_width = 2;\nsupport_rail_height = 2;\n\n// Materials\nwood_color = \"SaddleBrown\";\nfabric_color = \"DarkGray\";\n\n// Leg module\nmodule leg() {\n    color(wood_color) {\n        difference() {\n            // Main leg\n            cube([leg_width, leg_depth, leg_height]);\n            \n            // Chamfer at bottom for stability\n            translate([0, leg_depth - 1, 0])\n                cube([leg_width, 1, 1]);\n        }\n    }\n}\n\n// Stretcher module\nmodule stretcher(length) {\n    color(wood_color) {\n        // Horizontal stretcher between legs\n        cube([length, stretcher_width, stretcher_width]);\n    }\n}\n\n// Seat panel with cushion\nmodule seat() {\n    union() {\n        // Wooden seat frame\n        color(wood_color) {\n            cube([seat_width, seat_depth, seat_thickness]);\n        }\n        \n        // Upholstered cushion\n        color(fabric_color) {\n            translate([1, 1, seat_thickness])\n                cube([seat_width - 2, seat_depth - 2, 2]);\n        }\n    }\n}\n\n// Backrest panel\nmodule backrest() {\n    color(wood_color) {\n        // Main backrest panel\n        cube([backrest_width, backrest_thickness, backrest_height]);\n        \n        // Two vertical support rails\n        translate([5, -0.1, 0])\n            cube([support_rail_width, backrest_thickness + 0.2, backrest_height - 5]);\n        translate([backrest_width - 5 - support_rail_width, -0.1, 0])\n            cube([support_rail_width, backrest_thickness + 0.2, backrest_height - 5]);\n    }\n}\n\n// Assembly\nmodule faldstool() {\n    // Front legs\n    translate([leg_inset, leg_inset, 0])\n        leg();\n    translate([seat_width - leg_width - leg_inset, leg_inset, 0])\n        leg();\n    \n    // Rear legs\n    translate([leg_inset, seat_depth - leg_depth - leg_inset, 0])\n        leg();\n    translate([seat_width - leg_width - leg_inset, seat_depth - leg_depth - leg_inset, 0])\n        leg();\n    \n    // Side stretchers\n    translate([leg_width + leg_inset, leg_inset, stretcher_height])\n        rotate([0, 0, 90])\n            stretcher(seat_depth - 2 * leg_inset - leg_width);\n    translate([seat_width - leg_inset, leg_inset, stretcher_height])\n        rotate([0, 0, 90])\n            stretcher(seat_depth - 2 * leg_inset - leg_width);\n    \n    // Back stretcher\n    translate([leg_width + leg_inset, seat_depth - leg_inset - leg_depth, stretcher_height])\n        stretcher(seat_width - 2 * leg_width - 2 * leg_inset);\n    \n    // Seat\n    translate([0, 0, leg_height])\n        seat();\n    \n    // Backrest\n    translate([0, seat_depth - backrest_thickness, leg_height])\n        backrest();\n    \n    // Hinge detail\n    color(\"Silver\") {\n        // Left hinge\n        translate([leg_inset - 0.5, seat_depth - backrest_thickness - 0.5, leg_height + seat_thickness])\n            cylinder(h=2, r=1, $fn=12);\n        \n        // Right hinge\n        translate([seat_width - leg_inset - 0.5, seat_depth - backrest_thickness - 0.5, leg_height + seat_thickness])\n            cylinder(h=2, r=1, $fn=12);\n    }\n}\n\n// Render the complete faldstool\nfaldstool();",
    "renders": true
  },
  {
    "furniture": "inglenook",
    "openscad_code": "// Inglenook Bench - 3D printable realistic style\n// Overall dimensions: 100mm width × 40mm depth × 50mm height\n\n// Parameters\nseat_thickness = 3;\nback_thickness = 2;\nleg_size = 4;\nframe_thickness = 2;\ncushion_height = 6;\narmrest_height = 12;\n\n// Main seat frame\nmodule seat_frame() {\n    difference() {\n        // Main seat platform\n        cube([100, 40, seat_thickness], center=true);\n        \n        // Lightening holes underneath\n        for(x = [-35, -15, 5, 25]) {\n            translate([x, 0, -seat_thickness/2]) \n                cube([12, 30, seat_thickness+1], center=true);\n        }\n    }\n}\n\n// Backrest with vertical slats\nmodule backrest() {\n    // Main back panel\n    translate([0, 17, 18]) {\n        difference() {\n            cube([96, back_thickness, 35], center=true);\n            // Recessed panel detail\n            translate([0, 0, 5]) \n                cube([80, back_thickness+1, 20], center=true);\n        }\n    }\n    \n    // Vertical slats\n    for(x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n        translate([x, 17.5, 18])\n            cube([4, back_thickness, 32], center=true);\n    }\n}\n\n// Leg assembly with stretchers\nmodule leg_assembly(x_pos) {\n    // Front leg\n    translate([x_pos, 15, -21]) \n        cube([leg_size, leg_size, 40], center=true);\n    \n    // Back leg\n    translate([x_pos, -15, -21]) \n        cube([leg_size, leg_size, 40], center=true);\n    \n    // Side stretcher\n    translate([x_pos, 0, -35])\n        cube([leg_size, 28, frame_thickness], center=true);\n    \n    // Front stretcher\n    translate([x_pos/2, 15, -30])\n        cube([abs(x_pos), frame_thickness, leg_size], center=true);\n}\n\n// Armrest with support bracket\nmodule armrest(x_pos) {\n    // Main armrest\n    translate([x_pos, 0, 5]) \n        cube([8, 40, armrest_height], center=true);\n    \n    // Support bracket\n    translate([x_pos, 15, -5])\n        rotate([0, 45, 0])\n            cube([frame_thickness, 25, 25], center=true);\n}\n\n// Seat cushion\nmodule cushion() {\n    translate([0, 0, 3 + cushion_height/2]) {\n        // Main cushion\n        cube([90, 36, cushion_height], center=true);\n        \n        // Tufted detail\n        for(x = [-30, -10, 10, 30]) {\n            for(y = [-10, 10]) {\n                translate([x, y, cushion_height/2]) {\n                    cylinder(h=1.5, d=4, center=true);\n                    translate([0, 0, 0.75]) sphere(d=3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    seat_frame();\n    backrest();\n    \n    // Legs\n    leg_assembly(45);\n    leg_assembly(-45);\n    \n    // Armrests\n    armrest(50);\n    armrest(-50);\n    \n    // Cushion\n    cushion();\n}",
    "renders": true
  },
  {
    "furniture": "escabeau",
    "openscad_code": "// Escabeau (step stool) - realistic style, medium complexity\n// Overall dimensions: 100mm width x 120mm height x 100mm depth\n\n// Parameters\nwidth = 100;\nheight = 120;\ndepth = 100;\nleg_thickness = 4;\nstep_thickness = 3;\nrail_thickness = 3;\nbackrest_height = 40;\nbackrest_thickness = 2;\n\nmodule leg(x, y, z) {\n    // Single leg with rounded bottom\n    translate([x, y, z]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, height - z], center=true);\n            translate([0, 0, -height/2 + z/2 + 1]) \n                cylinder(h=leg_thickness*2, r=leg_thickness/2, center=true);\n        }\n    }\n}\n\nmodule step(y_pos, step_width) {\n    // Step with rounded front edge\n    translate([0, y_pos, 0]) {\n        difference() {\n            cube([width - leg_thickness*2, step_thickness, step_width], center=true);\n            translate([0, -step_thickness/2, step_width/2 - 1]) \n                rotate([0, 90, 0])\n                    cylinder(h=width - leg_thickness*2, r=step_thickness/2, center=true);\n        }\n    }\n}\n\nmodule backrest() {\n    // Backrest with vertical slats\n    translate([0, depth/2 - backrest_thickness/2, height/2 + backrest_height/2]) {\n        cube([width - leg_thickness*2 - 10, backrest_thickness, backrest_height], center=true);\n        \n        // Vertical slats\n        for(i = [-1:1]) {\n            translate([i * 20, 0, 0]) {\n                cube([6, backrest_thickness, backrest_height - 10], center=true);\n            }\n        }\n    }\n}\n\nmodule support_rail(x, y, z, length, angle) {\n    // Diagonal support rail between legs\n    translate([x, y, z]) {\n        rotate([0, angle, 0]) {\n            cube([length, rail_thickness, rail_thickness], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    leg(-width/2 + leg_thickness/2, -depth/2 + leg_thickness/2, 0);\n    leg(width/2 - leg_thickness/2, -depth/2 + leg_thickness/2, 0);\n    leg(-width/2 + leg_thickness/2, depth/2 - leg_thickness/2, 0);\n    leg(width/2 - leg_thickness/2, depth/2 - leg_thickness/2, 0);\n    \n    // Three steps at different heights\n    step(height*0.25 - step_thickness/2, depth - leg_thickness*2);\n    step(height*0.55 - step_thickness/2, depth - leg_thickness*2 - 10);\n    step(height*0.85 - step_thickness/2, depth - leg_thickness*2 - 20);\n    \n    // Backrest\n    backrest();\n    \n    // Side support rails\n    support_rail(-width/2 + leg_thickness, -depth/2 + leg_thickness, \n                 height*0.3, depth - leg_thickness*2, 0);\n    support_rail(width/2 - leg_thickness, -depth/2 + leg_thickness, \n                 height*0.3, depth - leg_thickness*2, 0);\n    support_rail(-width/2 + leg_thickness, -depth/2 + leg_thickness, \n                 height*0.7, depth - leg_thickness*2, 0);\n    support_rail(width/2 - leg_thickness, -depth/2 + leg_thickness, \n                 height*0.7, depth - leg_thickness*2, 0);\n    \n    // Front-to-back support rails\n    translate([0, 0, height*0.4]) {\n        cube([width - leg_thickness*2, rail_thickness, rail_thickness], center=true);\n    }\n    translate([0, 0, height*0.8]) {\n        cube([width - leg_thickness*2, rail_thickness, rail_thickness], center=true);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "treestump",
    "openscad_code": "// Tree-stump side table (realistic, medium complexity)\n// Approx. 110 mm diameter, 45 mm high\n\n$fn = 36;                        // Smooth curves\n\nwall = 2;                        // 3D-print wall thickness\n\nmodule stump_base() {\n    // Main trunk cylinder with taper\n    cylinder(h = 40, d1 = 110, d2 = 90, center = false);\n}\n\nmodule growth_ring(height) {\n    // Single annual ring, 1 mm thick\n    difference() {\n        cylinder(h = 1, d = 105 - height * 1.5, center = true);\n        translate([0, 0, 0])\n        cylinder(h = 1.1, d = 105 - height * 1.5 - wall * 2, center = true);\n    }\n}\n\nmodule top_surface() {\n    // Tabletop with slightly warped surface\n    union() {\n        difference() {\n            cylinder(h = 5, d = 110, center = false);\n            translate([0, 0, -1])\n                cylinder(h = 7, d = 106, center = false);\n        }\n        // Add concentric growth rings\n        for (z = [1 : 2 : 15]) {\n            translate([0, 0, z * 0.15 + 3])\n                growth_ring(z);\n        }\n    }\n}\n\nmodule bark_texture() {\n    // Vertical bark ridges around trunk\n    for (a = [0 : 15 : 359]) {\n        rotate([0, 0, a])\n            translate([50, 0, 0])\n                scale([1, 3, 1])\n                    rotate([90, 0, 90])\n                        cylinder(h = 40, d = 4, center = false);\n    }\n}\n\nmodule radial_crack(depth) {\n    // Crack running from center outward\n    rotate([0, 90, 0])\n        translate([0, 0, -depth])\n            cube([50, 2, 2], center = true);\n}\n\nmodule cracks() {\n    // Three radial cracks for realism\n    for (ang = [0, 120, 240]) {\n        rotate([0, 0, ang])\n            radial_crack(30);\n    }\n}\n\nmodule root_stub() {\n    // Small protruding root\n    union() {\n        translate([0, 40, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 10, center = true);\n        translate([0, 40, 0])\n            sphere(d = 12);\n    }\n}\n\nmodule root_system() {\n    // Five root stubs around base\n    for (a = [0 : 72 : 359]) {\n        rotate([0, 0, a])\n            root_stub();\n    }\n}\n\n// Assembly\nunion() {\n    // Main trunk\n    difference() {\n        stump_base();\n        // Hollow center for printability\n        translate([0, 0, wall])\n            cylinder(h = 38, d = 90 - wall * 2, center = false);\n    }\n    \n    // Bark texture\n    difference() {\n        bark_texture();\n        // Remove inner portion\n        cylinder(h = 40, d = 90, center = false);\n    }\n    \n    // Top surface\n    translate([0, 0, 40])\n        top_surface();\n    \n    // Cracks on top\n    translate([0, 0, 43])\n        cracks();\n    \n    // Root stubs\n    root_system();\n}",
    "renders": true
  },
  {
    "furniture": "footstool",
    "openscad_code": "// OpenSCAD Footstool - Realistic Style, Medium Complexity\n// Dimensions: 100mm x 70mm x 45mm (printable size)\n\n$fn = 50;  // Resolution for curves\n\n// Parameters\nstool_width = 100;\nstool_depth = 70;\nstool_height = 45;\nleg_height = 30;\nleg_size = 8;\ncushion_thickness = 12;\nframe_thickness = 3;\n\n// Main module\nmodule footstool() {\n    // Four legs with slight taper\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (stool_width/2 - leg_size/2 - 3), \n                      y * (stool_depth/2 - leg_size/2 - 3), \n                      leg_height/2]) {\n                // Tapered leg using cylinder\n                cylinder(h = leg_height, \n                        r1 = leg_size/2, \n                        r2 = leg_size/2 - 1, \n                        center = true);\n            }\n        }\n    }\n    \n    // Frame connecting legs\n    // Long side frames\n    translate([0, 0, leg_height - frame_thickness/2]) {\n        cube([stool_width - 20, frame_thickness, frame_thickness], center = true);\n    }\n    \n    // Short side frames\n    translate([0, 0, leg_height - frame_thickness/2]) {\n        rotate([0, 0, 90]) {\n            cube([stool_depth - 20, frame_thickness, frame_thickness], center = true);\n        }\n    }\n    \n    // Center support beam\n    translate([0, 0, leg_height - 8]) {\n        cube([frame_thickness, stool_depth - 16, frame_thickness], center = true);\n    }\n    \n    // Cushion base board\n    translate([0, 0, leg_height + cushion_thickness/2]) {\n        cube([stool_width - 8, stool_depth - 8, cushion_thickness/2], center = true);\n    }\n    \n    // Upholstered cushion with rounded edges\n    translate([0, 0, leg_height + cushion_thickness + 2]) {\n        // Main cushion body\n        minkowski() {\n            cube([stool_width - 12, stool_depth - 12, cushion_thickness/2], center = true);\n            sphere(r = 3);\n        }\n        \n        // Cushion top surface detail\n        translate([0, 0, cushion_thickness/4]) {\n            scale([0.9, 0.9, 0.1]) {\n                minkowski() {\n                    cube([stool_width - 12, stool_depth - 12, cushion_thickness/2], center = true);\n                    sphere(r = 2);\n                }\n            }\n        }\n    }\n    \n    // Corner brackets for reinforcement\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (stool_width/2 - 10), \n                      y * (stool_depth/2 - 10), \n                      leg_height - 5]) {\n                rotate([0, 0, x * y * 45]) {\n                    cube([5, 5, 10], center = true);\n                }\n            }\n        }\n    }\n    \n    // Decorative nail heads around cushion\n    for (i = [0:15]) {\n        angle = i * 22.5;\n        r = (stool_width - 12)/2 - 2;\n        x = r * cos(angle);\n        y = r * sin(angle);\n        \n        // Only place nails on front/back edges\n        if (abs(y) > abs(x) * (stool_depth/stool_width) - 5) {\n            translate([x * (stool_width - 12)/(stool_width - 5), \n                      y * (stool_depth - 12)/(stool_depth - 5), \n                      leg_height + cushion_thickness + 5]) {\n                sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Render the footstool\nfootstool();",
    "renders": true
  },
  {
    "furniture": "cricket",
    "openscad_code": "// Cricket Chair - Realistic Style, Medium Complexity\n// Dimensions: ~120mm tall, 80mm wide, 90mm deep\n\n// Main module for the entire cricket chair\nmodule cricket_chair() {\n    // Chair frame color (wood-like)\n    color(\"burlywood\")\n    union() {\n        // Seat with cricket body shape\n        cricket_seat();\n        \n        // Backrest with cricket wing pattern\n        cricket_backrest();\n        \n        // Four legs\n        for(i = [0,1]) {\n            for(j = [0,1]) {\n                translate([i*60-30, j*65-32.5, -55])\n                    chair_leg();\n            }\n        }\n        \n        // Front stretcher bar\n        translate([0, -30, -45])\n            rotate([0,90,0])\n            cylinder(h=60, r=3, $fn=16);\n    }\n    \n    // Cricket details in darker color\n    color(\"saddlebrown\")\n    union() {\n        // Head rest area (cricket head)\n        translate([0, 42, 45])\n            scale([1, 0.8, 1])\n            sphere(r=12, $fn=32);\n        \n        // Antennae\n        translate([-8, 50, 55])\n            rotate([0,-30,0])\n            cylinder(h=25, r=1, $fn=8);\n        translate([8, 50, 55])\n            rotate([0,30,0])\n            cylinder(h=25, r=1, $fn=8);\n        \n        // Leg joints\n        leg_joints();\n    }\n}\n\n// Cricket-shaped seat with wing details\nmodule cricket_seat() {\n    // Main seat body (elliptical)\n    scale([1.2, 1, 0.3])\n    sphere(r=35, $fn=64);\n    \n    // Wing indentations on seat\n    difference() {\n        translate([0,0,-1])\n            scale([1.2, 1, 0.3])\n            sphere(r=35, $fn=64);\n        \n        // Left wing groove\n        translate([-20, 5, -8])\n            rotate([0,0,25])\n            scale([1, 0.4, 0.2])\n            cube([35, 20, 15], center=true);\n        \n        // Right wing groove\n        translate([20, 5, -8])\n            rotate([0,0,-25])\n            scale([1, 0.4, 0.2])\n            cube([35, 20, 15], center=true);\n    }\n}\n\n// Backrest with cricket wing pattern\nmodule cricket_backrest() {\n    // Main backrest frame\n    translate([0, 35, 20])\n        rotate([100,0,0])\n        difference() {\n            // Outer shell\n            scale([1.1, 1, 0.15])\n            sphere(r=35, $fn=64);\n            \n            // Hollow center\n            scale([0.9, 0.8, 0.2])\n            sphere(r=35, $fn=64);\n        }\n    \n    // Wing supports\n    for(side = [-1, 1]) {\n        translate([side*25, 35, 20])\n            rotate([100,0,side*15])\n            scale([0.3, 0.8, 0.1])\n            sphere(r=35, $fn=32);\n    }\n}\n\n// Chair leg with cricket leg styling\nmodule chair_leg() {\n    // Main leg post\n    cylinder(h=55, r1=4, r2=3, $fn=16);\n    \n    // Cricket leg joints\n    translate([0,0,15])\n        sphere(r=5, $fn=16);\n    translate([0,0,35])\n        sphere(r=4.5, $fn=16);\n}\n\n// Decorative leg joints\nmodule leg_joints() {\n    // Front leg connections\n    for(side = [-1, 1]) {\n        translate([side*30, -32.5, -30])\n            rotate([90,0,0])\n            cylinder(h=8, r=2.5, $fn=12);\n    }\n    \n    // Rear leg connections\n    for(side = [-1, 1]) {\n        translate([side*30, 32.5, -30])\n            rotate([90,0,0])\n            cylinder(h=8, r=2.5, $fn=12);\n    }\n}\n\n// Render the complete chair\ncricket_chair();",
    "renders": true
  },
  {
    "furniture": "gossip",
    "openscad_code": "// Realistic medium-complexity GOSSIP bench\n// A small two-seat bench for intimate conversation\n\n// overall dimensions (mm)\nbench_w = 120;\nbench_d = 55;\nbench_h = 75;\nleg_h = 70;\nseat_th = 5;\nback_h = 40;\nback_th = 3;\n\n// wall / frame thickness\nwall = 2;\n\nmodule leg() {\n    // simple tapered square leg with chamfer\n    difference() {\n        cube([6, 6, leg_h], center=true);\n        translate([0,0,-leg_h/2 + wall]) cube([6 - wall*2, 6 - wall*2, leg_h - wall], center=true);\n    }\n}\n\nmodule legs_frame() {\n    // four legs connected by stretchers\n    translate([bench_w/2 - 10, bench_d/2 - 8, leg_h/2]) leg();\n    translate([-(bench_w/2 - 10), bench_d/2 - 8, leg_h/2]) leg();\n    translate([bench_w/2 - 10, -(bench_d/2 - 8), leg_h/2]) leg();\n    translate([-(bench_w/2 - 10), -(bench_d/2 - 8), leg_h/2]) leg();\n    \n    // front stretcher\n    translate([0, bench_d/2 - 8, 15])\n        cube([bench_w - 20, wall, 6], center=true);\n    // back stretcher\n    translate([0, -(bench_d/2 - 8), 15])\n        cube([bench_w - 20, wall, 6], center=true);\n    // side stretchers\n    translate([bench_w/2 - 10, 0, 15])\n        cube([wall, bench_d - 16, 6], center=true);\n    translate([-(bench_w/2 - 10), 0, 15])\n        cube([wall, bench_d - 16, 6], center=true);\n}\n\nmodule seat() {\n    // solid seat with slat look\n    for(i=[-1,0,1]) {\n        translate([i*bench_w/4, 0, leg_h + seat_th/2])\n            cube([bench_w/3 - 4, bench_d - 6, seat_th], center=true);\n    }\n    // cushion impression\n    translate([0,0,leg_h + seat_th + 1])\n        cube([bench_w - 10, bench_d - 12, 2], center=true);\n}\n\nmodule backrest() {\n    // vertical slats for backrest\n    difference() {\n        // full back panel\n        translate([0, -(bench_d/2 - back_th/2), leg_h + back_h/2])\n            cube([bench_w - 10, back_th, back_h], center=true);\n        // remove material for slat effect\n        for(i=[-2,-1,1,2]) {\n            translate([i*15, -(bench_d/2 - back_th/2), leg_h + back_h/2])\n                cube([10, back_th + 0.1, back_h - wall*2], center=true);\n        }\n    }\n    // top rail\n    translate([0, -(bench_d/2 - back_th/2), leg_h + back_h - wall])\n        cube([bench_w - 6, back_th + 2, wall*2], center=true);\n}\n\nunion() {\n    legs_frame();\n    seat();\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "creepie",
    "openscad_code": "// Realistic creepie (small three-legged milking stool) – 3D printable\n// Overall height = 95 mm, seat Ø = 130 mm\n\n$fn = 50;                // smooth curves\n\n// Parameters\nleg_d      = 12;         // Ø of turned legs\nwall       = 2;          // printable wall thickness\nseat_h     = 7;          // seat plank thickness\nstretch_h  = 10;         // stretcher thickness\nstretch_r  = 5;          // stretcher radius\nleg_angle  = 12;         // splay angle (degrees)\nfoot_r     = 8;          // foot pad radius\nfoot_h     = 3;\n\n// Seat – solid cylinder with slight rounding\nmodule seat() {\n    difference() {\n        cylinder(h = seat_h, r1 = 65, r2 = 65);\n        translate([0, 0, -0.1])\n            cylinder(h = seat_h + 0.2, r1 = 63, r2 = 63); // hollow\n    }\n}\n\n// One turned-style leg (stacked cylinders)\nmodule leg(len = 90) {\n    union() {\n        // main shaft\n        cylinder(h = len - foot_h, r = leg_d/2);\n        // foot pad\n        translate([0, 0, len - foot_h])\n            cylinder(h = foot_h, r = foot_r);\n    }\n}\n\n// Triangular stretcher ring\nmodule stretcher() {\n    height = stretch_h;\n    r = 45;                // radius from center to mid-stretcher\n    thickness = stretch_r;\n    \n    // three bars forming equilateral triangle\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([r, 0, 0])\n                rotate([90, 0, 90])\n                    cylinder(h = r * sqrt(3), r = thickness);\n}\n\n// Assembly\nmodule creepie() {\n    // Seat\n    seat();\n    \n    // Three legs\n    leg_len = 95 - seat_h;\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([40, 0, seat_h])   // 40 mm inset\n                rotate([leg_angle, 0, 0])\n                    leg(leg_len);\n    \n    // Stretcher ring 60 mm above floor\n    translate([0, 0, 60])\n        stretcher();\n}\n\ncreepie();",
    "renders": true
  },
  {
    "furniture": "buffet",
    "openscad_code": "// Realistic buffet cabinet, medium complexity, 3D-printable\n// External size: 100 mm wide × 50 mm deep × 60 mm high\n// Wall thickness: 2 mm everywhere\n\n// Global variables\nbuffet_w = 100;\nbuffet_d = 50;\nbuffet_h = 60;\nwall_t = 2;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer box\n        cube([buffet_w, buffet_d, buffet_h], center = false);\n        // Hollow inside\n        translate([wall_t, wall_t, wall_t])\n            cube([buffet_w-2*wall_t, buffet_d-2*wall_t, buffet_h-wall_t], center = false);\n    }\n}\n\n// Back panel (tongue-in-groove illusion)\nmodule back_panel() {\n    translate([0, buffet_d-wall_t, 0])\n        cube([buffet_w, wall_t, buffet_h], center = false);\n}\n\n// Base plinth\nmodule plinth() {\n    difference() {\n        // Outer base frame\n        translate([-2, -2, -4])\n            cube([buffet_w+4, buffet_d+4, 4], center = false);\n        // Recess\n        translate([wall_t-2, wall_t-2, -3.9])\n            cube([buffet_w-2*wall_t+4, buffet_d-2*wall_t+4, 4], center = false);\n    }\n}\n\n// Four legs (simple rectangular)\nmodule legs() {\n    leg_w = 4;\n    leg_d = 3;\n    leg_h = 4;\n    positions = [[0, 0],\n                 [buffet_w-leg_w, 0],\n                 [0, buffet_d-leg_d],\n                 [buffet_w-leg_w, buffet_d-leg_d]];\n    for (p = positions)\n        translate([p.x, p.y, -leg_h])\n            cube([leg_w, leg_d, leg_h], center = false);\n}\n\n// Shelf inside\nmodule shelf() {\n    translate([wall_t, wall_t, buffet_h/2])\n        cube([buffet_w-2*wall_t, buffet_d-2*wall_t, wall_t], center = false);\n}\n\n// Door pair\nmodule doors() {\n    door_w = (buffet_w-3*wall_t)/2;\n    door_h = buffet_h-4*wall_t;\n    // Left door\n    translate([wall_t, wall_t, 2*wall_t])\n        cube([door_w, wall_t, door_h], center = false);\n    // Right door\n    translate([wall_t+door_w+wall_t, wall_t, 2*wall_t])\n        cube([door_w, wall_t, door_h], center = false);\n    // Recessed panels\n    panel_margin = 3;\n    translate([wall_t+panel_margin, wall_t-0.1, 2*wall_t+panel_margin])\n        cube([door_w-2*panel_margin, wall_t+0.2, door_h-2*panel_margin], center = false);\n    translate([wall_t+door_w+wall_t+panel_margin, wall_t-0.1, 2*wall_t+panel_margin])\n        cube([door_w-2*panel_margin, wall_t+0.2, door_h-2*panel_margin], center = false);\n}\n\n// Knobs\nmodule knobs() {\n    knob_r = 1.5;\n    knob_h = 1.2;\n    for (x = [buffet_w/4, 3*buffet_w/4])\n        translate([x, wall_t-0.1, buffet_h/2])\n            cylinder(h = knob_h, r = knob_r, $fn = 16);\n}\n\n// Top overhang\nmodule top() {\n    translate([-2, -2, buffet_h])\n        cube([buffet_w+4, buffet_d+4, wall_t], center = false);\n}\n\n// Assemble buffet\nunion() {\n    legs();\n    plinth();\n    body_shell();\n    back_panel();\n    shelf();\n    top();\n    doors();\n    knobs();\n}",
    "renders": true
  },
  {
    "furniture": "form",
    "openscad_code": "// Modern Form Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm W x 55mm D x 85mm H\n\nchair_width = 60;\nchair_depth = 55;\nchair_height = 85;\nseat_height = 45;\nback_height = 40;\nleg_size = 4;\nframe_thickness = 3;\ncushion_thickness = 8;\n\n// Main chair module\nmodule chair() {\n    // Rear legs with backrest frame\n    difference() {\n        union() {\n            // Left rear leg\n            translate([-chair_width/2 + leg_size/2, -chair_depth/2 + leg_size/2, 0])\n                cube([leg_size, leg_size, chair_height]);\n            \n            // Right rear leg\n            translate([chair_width/2 - leg_size/2, -chair_depth/2 + leg_size/2, 0])\n                cube([leg_size, leg_size, chair_height]);\n            \n            // Backrest frame top\n            translate([0, -chair_depth/2 + leg_size/2, chair_height - frame_thickness])\n                cube([chair_width - leg_size, frame_thickness, frame_thickness]);\n            \n            // Backrest vertical supports\n            for(x = [-20, 0, 20]) {\n                translate([x, -chair_depth/2 + leg_size/2 + frame_thickness/2, \n                          seat_height + back_height/2])\n                    cube([frame_thickness, frame_thickness, back_height]);\n            }\n        }\n        \n        // Backrest slats cutouts\n        for(y = [-15, -5, 5, 15]) {\n            translate([y, -chair_depth/2 + leg_size + 1, seat_height + 5])\n                cube([6, frame_thickness + 2, back_height - 10]);\n        }\n    }\n    \n    // Front legs\n    translate([-chair_width/2 + leg_size/2, chair_depth/2 - leg_size/2, 0])\n        cube([leg_size, leg_size, seat_height]);\n    translate([chair_width/2 - leg_size/2, chair_depth/2 - leg_size/2, 0])\n        cube([leg_size, leg_size, seat_height]);\n    \n    // Side frame supports\n    translate([0, -chair_depth/2 + leg_size/2 + frame_thickness/2, seat_height - frame_thickness])\n        cube([chair_width - leg_size, frame_thickness, frame_thickness]);\n    translate([0, chair_depth/2 - leg_size/2 - frame_thickness/2, seat_height - frame_thickness])\n        cube([chair_width - leg_size, frame_thickness, frame_thickness]);\n    \n    // Front frame support\n    translate([0, 0, seat_height - frame_thickness])\n        rotate([90, 0, 0])\n            cube([chair_width - leg_size, frame_thickness, chair_depth - leg_size]);\n    \n    // Seat cushion with rounded edges\n    difference() {\n        // Main cushion block\n        translate([0, 0, seat_height])\n            cube([chair_width - 8, chair_depth - 6, cushion_thickness], center=true);\n        \n        // Cushion top rounding\n        translate([0, 0, seat_height + cushion_thickness/2 - 1])\n            cube([chair_width - 10, chair_depth - 8, cushion_thickness + 2], center=true);\n    }\n    \n    // Backrest cushion\n    difference() {\n        translate([0, -chair_depth/2 + leg_size + frame_thickness + 3, \n                  seat_height + back_height/2])\n            cube([chair_width - 10, 6, back_height - 4], center=true);\n        \n        // Backrest cushion rounding\n        translate([0, -chair_depth/2 + leg_size + frame_thickness + 3, \n                  seat_height + back_height/2])\n            cube([chair_width - 12, 8, back_height - 6], center=true);\n    }\n    \n    // Armrests\n    module armrest(side) {\n        translate([side * (chair_width/2 - leg_size/2), 0, seat_height + 15])\n            rotate([0, -15, 0])\n                cube([leg_size, chair_depth/2 - 5, frame_thickness]);\n    }\n    \n    armrest(1);\n    armrest(-1);\n}\n\n// Generate the chair\nchair();",
    "renders": true
  },
  {
    "furniture": "deacon",
    "openscad_code": "// Deacon Bench (realistic style, medium complexity)\n// Overall size: 140mm wide x 60mm deep x 90mm high\n\n$fn = 32;\n\nmodule main_frame() {\n    // Left side panel (20mm thick)\n    translate([0,0,0])\n        cube([20, 60, 90]);\n    \n    // Right side panel\n    translate([120,0,0])\n        cube([20, 60, 90]);\n    \n    // Back panel (15mm thick)\n    translate([20, 45, 0])\n        cube([100, 15, 90]);\n    \n    // Front apron\n    translate([20, 0, 0])\n        cube([100, 15, 40]);\n}\n\nmodule seat() {\n    // Main seat board (25mm thick)\n    translate([20, 15, 60])\n        cube([100, 30, 25]);\n    \n    // Seat front lip (decorative)\n    translate([20, 15, 85])\n        cube([100, 2, 5]);\n}\n\nmodule backrest_slats() {\n    // 7 vertical slats with proper spacing\n    for(i = [0:6]) {\n        translate([25 + i * 15, 25, 55])\n            cube([10, 5, 35]);\n    }\n}\n\nmodule decorative_spindles() {\n    // Front decorative spindles between seat and apron\n    for(i = [0:3]) {\n        translate([30 + i * 25, 15, 40])\n            cylinder(h = 20, d = 6);\n    }\n}\n\nmodule storage_box() {\n    // Internal storage compartment\n    difference() {\n        translate([25, 20, 10])\n            cube([90, 25, 45]);\n        // Hollow it out (2mm walls)\n        translate([27, 22, 12])\n            cube([86, 21, 41]);\n    }\n    \n    // Bottom panel\n    translate([25, 20, 10])\n        cube([90, 25, 2]);\n    \n    // Top panel (removable lid)\n    translate([25, 20, 45])\n        cube([90, 25, 2]);\n}\n\nmodule leg_profiles() {\n    // Front left leg profile (rounded)\n    translate([15, 10, 0])\n        cylinder(h = 50, d = 8);\n    \n    // Front right leg profile\n    translate([125, 10, 0])\n        cylinder(h = 50, d = 8);\n    \n    // Back left leg profile\n    translate([15, 50, 0])\n        cylinder(h = 50, d = 8);\n    \n    // Back right leg profile\n    translate([125, 50, 0])\n        cylinder(h = 50, d = 8);\n}\n\nmodule support_braces() {\n    // Left side brace\n    translate([10, 30, 25])\n        cube([5, 20, 2]);\n    \n    // Right side brace\n    translate([125, 30, 25])\n        cube([5, 20, 2]);\n    \n    // Center cross brace\n    translate([65, 20, 20])\n        cube([50, 2, 5]);\n}\n\n// Assemble the deacon\nunion() {\n    main_frame();\n    seat();\n    backrest_slats();\n    decorative_spindles();\n    storage_box();\n    leg_profiles();\n    support_braces();\n}",
    "renders": true
  },
  {
    "furniture": "monk",
    "openscad_code": "// Monk Chair (realistic style, medium complexity)\n// A meditation-style chair with backrest, seat, and armrests\n\n// Overall dimensions\nchair_height = 120;\nchair_width = 70;\nchair_depth = 60;\nseat_height = 40;\n\n// Wall thickness\nwall = 2;\n\nmodule leg(x_pos, z_pos) {\n    // Tapered leg with mortise-style joint\n    translate([x_pos, 0, z_pos])\n    linear_extrude(height=seat_height, scale=[0.9, 0.9])\n    offset(r=2)\n    square([8, 8], center=true);\n}\n\nmodule backrest() {\n    // Curved backrest with vertical slats\n    difference() {\n        // Main backrest frame\n        translate([0, -chair_depth/2 + 5, seat_height + 30])\n        cube([chair_width - 20, wall, 60], center=true);\n        \n        // Decorative cutouts\n        for(i = [-20:10:20]) {\n            translate([i, -chair_depth/2 + 5, seat_height + 45])\n            cube([6, wall+1, 30], center=true);\n        }\n    }\n    \n    // Horizontal support bar\n    translate([0, -chair_depth/2 + 8, seat_height + 15])\n    cube([chair_width - 10, wall, 10], center=true);\n}\n\nmodule seat() {\n    // Cushioned seat with rounded edges\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n        cube([chair_width - 10, chair_depth - 10, seat_height], center=true);\n        \n        // Cushion indentation\n        translate([0, 0, seat_height - 2])\n        cube([chair_width - 20, chair_depth - 20, 5], center=true);\n    }\n    \n    // Seat frame\n    translate([0, 0, seat_height - wall])\n    difference() {\n        cube([chair_width, chair_depth, wall], center=true);\n        cube([chair_width - 10, chair_depth - 10, wall + 1], center=true);\n    }\n}\n\nmodule armrest() {\n    // Curved armrest with support\n    translate([chair_width/2 - 5, 0, seat_height + 15])\n    rotate([0, 20, 0])\n    cube([20, 8, 30]);\n    \n    // Support post\n    translate([chair_width/2 - 5, 0, seat_height])\n    cylinder(h=15, r=4, $fn=16);\n}\n\nmodule stretcher() {\n    // Lower stretcher between legs\n    translate([0, chair_depth/2 - 15, 10])\n    cube([chair_width - 30, 6, wall], center=true);\n}\n\n// Main assembly\nunion() {\n    // Seat assembly\n    seat();\n    \n    // Four legs\n    leg(-chair_width/2 + 10, 0);\n    leg(chair_width/2 - 10, 0);\n    leg(-chair_width/2 + 10, chair_depth - 10);\n    leg(chair_width/2 - 10, chair_depth - 10);\n    \n    // Backrest\n    backrest();\n    \n    // Armrests (both sides)\n    armrest();\n    mirror([1, 0, 0]) armrest();\n    \n    // Lower stretchers\n    stretcher();\n    translate([0, 0, 0]) stretcher();\n    \n    // Apron details\n    translate([0, chair_depth/2 - 5, seat_height/2])\n    cube([chair_width - 20, wall, seat_height], center=true);\n    translate([0, -chair_depth/2 + 5, seat_height/2])\n    cube([chair_width - 20, wall, seat_height], center=true);\n}",
    "renders": true
  },
  {
    "furniture": "trestle",
    "openscad_code": "// Trestle Legs Module\nmodule trestle_leg() {\n    // Angled leg with proper thickness\n    difference() {\n        // Main leg shape (angled)\n        rotate([0, -15, 0])\n        cube([6, 50, 4], center=true);\n        \n        // Taper the bottom\n        translate([0, -25, 0])\n        cube([12, 25, 6], center=true);\n    }\n    \n    // Horizontal stretcher notch\n    translate([0, -20, 0])\n    cube([8, 2, 4], center=true);\n}\n\n// Cross Beam Module\nmodule cross_beam() {\n    // Main beam\n    cube([50, 4, 3], center=true);\n    \n    // End caps\n    translate([-25, 0, 0])\n    cube([2, 6, 5], center=true);\n    translate([25, 0, 0])\n    cube([2, 6, 5], center=true);\n}\n\n// Support Brace Module\nmodule support_brace() {\n    // Diagonal brace\n    rotate([0, 0, 30])\n    cube([35, 3, 2], center=true);\n}\n\n// Main Trestle Assembly\nmodule trestle() {\n    // Left leg assembly\n    translate([-22, 0, 0]) {\n        // Two legs per side\n        translate([0, 0, 8]) trestle_leg();\n        mirror([0, 0, 1]) translate([0, 0, 8]) trestle_leg();\n        \n        // Bottom stretcher\n        translate([0, -22, -10])\n        rotate([0, 90, 0])\n        cube([3, 20, 3], center=true);\n    }\n    \n    // Right leg assembly\n    translate([22, 0, 0]) {\n        mirror([1, 0, 0]) {\n            // Two legs per side\n            translate([0, 0, 8]) trestle_leg();\n            mirror([0, 0, 1]) translate([0, 0, 8]) trestle_leg();\n            \n            // Bottom stretcher\n            translate([0, -22, -10])\n            rotate([0, 90, 0])\n            cube([3, 20, 3], center=true);\n        }\n    }\n    \n    // Top support beam\n    translate([0, 0, 20])\n    cross_beam();\n    \n    // Additional support braces\n    translate([0, 0, 10]) {\n        support_brace();\n        mirror([1, 0, 0]) support_brace();\n    }\n    \n    // Foot pads (for stability)\n    for(side = [-1, 1]) {\n        for(end = [-1, 1]) {\n            translate([side * 22, end * 25, -20])\n            cube([8, 10, 2], center=true);\n        }\n    }\n}\n\n// Render the complete trestle\ntrestle();",
    "renders": true
  },
  {
    "furniture": "joint",
    "openscad_code": "// Mortise-and-Tenon wooden chair joint (chair back to seat frame)\n// Overall joint size: ~100mm wide × 120mm deep × 60mm high\n// 2 mm wall thickness assumed throughout\n\n/* ================= PARAMETERS ================= */\n$fn = 60;\n\ntenon_w  = 24;      // Tenon width\ntenon_h  = 14;      // Tenon height\ntenon_l  = 30;      // Tenon length into mortise\n\nmortise_w = tenon_w + 2;     // Mortise width (+ clearance)\nmortise_h = tenon_h + 2;     // Mortise height (+ clearance)\nmortise_d = tenon_l + 2;     // Mortise depth (+ clearance)\n\nseat_frame_w = 100;  // Seat frame rail length\nseat_frame_t = 20;   // Seat frame thickness\nleg_w = 30;          // Leg cross-section\nbackpost_w = 30;     // Back post cross-section\nbackpost_h = 120;    // Back post height above seat\n\n/* ================= MODULES ================= */\n// Simple rounding helper for 3D-printability\nmodule roundedCube(size, r) {\n    hull() {\n        for(dx=[0,size.x], dy=[0,size.y], dz=[0,size.z])\n            translate([dx,dy,dz])\n                sphere(r=r);\n    }\n}\n\n// Tenon protruding from back post\nmodule tenon() {\n    translate([0, -tenon_l, 0])\n        cube([tenon_w, tenon_l, tenon_h], center=true);\n}\n\n// Mortise block in seat frame rail\nmodule mortiseBlock() {\n    difference() {\n        roundedCube([seat_frame_w, seat_frame_t, seat_frame_t], 2);\n        translate([0, seat_frame_t/2 - mortise_d/2, 0])\n            cube([mortise_w, mortise_d, mortise_h], center=true);\n    }\n}\n\n// Decorative bead along frame edge\nmodule bead() {\n    for(x=[-seat_frame_w/2 + 5 : 10 : seat_frame_w/2 - 5])\n        translate([x, 0, seat_frame_t/2 + 1])\n            rotate([90,0,0])\n                cylinder(h=1, r1=1, r2=1);\n}\n\n// Back post with tenon\nmodule backPost() {\n    difference() {\n        union() {\n            // Main post\n            roundedCube([backpost_w, backpost_w, backpost_h], 2);\n            // Tenon at lower end\n            translate([0, 0, -backpost_h/2])\n                tenon();\n        }\n        // Screw clearance hole\n        translate([0, 0, -backpost_h/2 + 20])\n            rotate([90,0,0])\n                cylinder(h=backpost_w+1, d=4, center=true);\n    }\n}\n\n// Leg stub under seat frame\nmodule legStub() {\n    translate([0, seat_frame_t/2 + leg_w/2, -seat_frame_t/2 - leg_w/2])\n        roundedCube([leg_w, leg_w, leg_w], 2);\n}\n\n/* ================= ASSEMBLY ================= */\n// Main seat frame rail with mortise\ntranslate([0, 0, 0])\n    mortiseBlock();\n\ntranslate([0, 0, 0])\n    bead();\n\n// Left leg stub\ntranslate([-seat_frame_w/2 + leg_w/2, 0, 0])\n    legStub();\n\n// Right leg stub\ntranslate([seat_frame_w/2 - leg_w/2, 0, 0])\n    legStub();\n\n// Back post engaging mortise\ntranslate([0, seat_frame_t/2 + tenon_l/2, 0])\n    backPost();",
    "renders": true
  },
  {
    "furniture": "campstool",
    "openscad_code": "// Campstool - folding three-leg design\n// Overall height ~100 mm, seat diameter ~60 mm\n// Wall thickness 2 mm for 3D printability\n\n// Parameters\nleg_length = 95;\nseat_diameter = 60;\nleg_thick = 4;\npin_diameter = 3;\nbrace_thick = 2;\nhinge_clear = 1;\n\n// Central hub for legs\nmodule hub() {\n    difference() {\n        cylinder(h = 10, d = 20, $fn = 30);        // main hub body\n        for (a = [0, 120, 240])\n            rotate([0, 0, a])\n                translate([10/2 + leg_thick/2, 0, 5])\n                    rotate([0, 90, 0])\n                        cylinder(h = 20, d = leg_thick + 2*hinge_clear, $fn = 16); // clearance for legs\n    }\n}\n\n// Single leg\nmodule leg() {\n    difference() {\n        union() {\n            // upper pin part\n            translate([0, 0, 10])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, d = leg_thick, $fn = 16);\n            // lower tube\n            translate([0, 0, -leg_length/2 + 5])\n                cylinder(h = leg_length, d1 = leg_thick, d2 = leg_thick*0.8, $fn = 16);\n            // foot cap\n            translate([0, 0, -leg_length + 5])\n                sphere(d = leg_thick * 1.4, $fn = 16);\n        }\n        // pin hole\n        rotate([0, 90, 0])\n            cylinder(h = 30, d = pin_diameter, $fn = 12);\n    }\n}\n\n// Seat fabric disc\nmodule seat() {\n    difference() {\n        cylinder(h = 2, d = seat_diameter, $fn = 60);\n        // light texture rings\n        for (r = [seat_diameter/4, seat_diameter/3, seat_diameter/2.5])\n            translate([0, 0, -0.1])\n                cylinder(h = 2.2, d = r * 2, $fn = 60);\n    }\n}\n\n// Fabric holder ring under seat\nmodule seat_ring() {\n    difference() {\n        cylinder(h = 4, d = seat_diameter + 4, $fn = 60);\n        cylinder(h = 5, d = seat_diameter, $fn = 60);\n    }\n}\n\n// Triangular brace between legs\nmodule brace() {\n    difference() {\n        union() {\n            for (a = [0, 120, 240])\n                rotate([0, 0, a])\n                    translate([seat_diameter/2 * 0.7, 0, 0])\n                        cube([seat_diameter * 0.7, brace_thick, 5], center = true);\n        }\n        // center hole\n        cylinder(h = 6, d = 10, $fn = 30);\n    }\n}\n\n// Assemble stool\nunion() {\n    // central hub\n    hub();\n    \n    // three legs\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([0, 0, 0])\n                leg();\n    \n    // seat assembly on top\n    translate([0, 0, 10 + 1])\n        seat();\n    translate([0, 0, 10 + 1])\n        seat_ring();\n    \n    // lower brace 40 mm above feet\n    translate([0, 0, -leg_length + 40])\n        brace();\n}",
    "renders": true
  },
  {
    "furniture": "foldstool",
    "openscad_code": "// Foldstool - 3D printable folding stool\n// Realistic style, medium complexity\n\n// Dimensions (mm)\nleg_length = 100;\nleg_width = 12;\nleg_thickness = 8;\nseat_size = 120;\nseat_thickness = 5;\nhinge_diameter = 10;\nhinge_length = 15;\nsupport_bar_width = 6;\nsupport_bar_thickness = 4;\n\n// Leg module with rounded edges\nmodule leg() {\n    // Main leg\n    difference() {\n        // Rounded rectangular leg\n        translate([0, 0, leg_length/2])\n            minkowski() {\n                cube([leg_width, leg_thickness, leg_length], center=true);\n                sphere(r=2);\n            }\n        \n        // Hinge hole\n        translate([0, 0, leg_length - 20])\n            rotate([0, 90, 0])\n                cylinder(h=leg_width + 2, r=hinge_diameter/2, center=true, $fn=16);\n        \n        // Support bar hole\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n                cylinder(h=leg_thickness + 2, r=support_bar_width/2, center=true, $fn=12);\n    }\n}\n\n// Seat module with rounded corners\nmodule seat() {\n    difference() {\n        // Main seat\n        minkowski() {\n            cube([seat_size, seat_size, seat_thickness], center=true);\n            sphere(r=3);\n        }\n        \n        // Hinge holes for legs\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([seat_size/2 - 15, 0, 0])\n                    cylinder(h=seat_thickness + 2, r=hinge_diameter/2, center=true, $fn=16);\n        }\n        \n        // Finger grip hole\n        translate([0, 0, 0])\n            cylinder(h=seat_thickness + 2, r=12, center=true, $fn=32);\n    }\n}\n\n// Hinge pin\nmodule hinge_pin() {\n    cylinder(h=hinge_length, r=hinge_diameter/2 - 0.5, center=true, $fn=16);\n}\n\n// Support bar\nmodule support_bar() {\n    cube([support_bar_width, 60, support_bar_thickness], center=true);\n}\n\n// Assemble the foldstool\nunion() {\n    // Seat\n    seat();\n    \n    // Legs with hinges\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([seat_size/2 - 15, 0, 0])\n                rotate([90, 0, 0])\n                    union() {\n                        leg();\n                        \n                        // Hinge pins\n                        translate([0, 0, leg_length - 20])\n                            rotate([0, 90, 0])\n                                hinge_pin();\n                    }\n    }\n    \n    // Support bars\n    translate([0, 0, -seat_thickness/2 - 15])\n        rotate([0, 0, 45])\n            support_bar();\n    \n    translate([0, 0, -seat_thickness/2 - 15])\n        rotate([0, 0, -45])\n            support_bar();\n}",
    "renders": true
  },
  {
    "furniture": "backstool",
    "openscad_code": "// Backstool – a simple stool with a backrest\n// Overall printable size ~100 mm tall\n\n// Parameters (mm)\nseat_w = 70;\nseat_d = 65;\nseat_h = 8;\n\nleg_h = 60;\nleg_w = 6;\nleg_d = 6;\n\nbackrest_h = 40;\nbackrest_th = 6;\nslat_w = 4;\nslat_gap = 6;\nnum_slats = 5;\n\nwall = 2; // minimum wall thickness for printing\n\nmodule stool() {\n    // seat plank\n    translate([0, 0, leg_h])\n        cube([seat_w, seat_d, seat_h], center = true);\n\n    // four legs\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (seat_w/2 - leg_w/2),\n                       y * (seat_d/2 - leg_d/2),\n                       leg_h/2])\n                cube([leg_w, leg_d, leg_h], center = true);\n\n    // leg stretchers – front & back\n    translate([0, (seat_d/2 - leg_d/2), leg_h/2])\n        cube([seat_w - leg_w, leg_d, wall], center = true);\n    translate([0, -(seat_d/2 - leg_d/2), leg_h/2])\n        cube([seat_w - leg_w, leg_d, wall], center = true);\n\n    // side stretchers\n    translate([(seat_w/2 - leg_w/2), 0, leg_h/3])\n        cube([wall, seat_d - leg_d, leg_w], center = true);\n    translate([-(seat_w/2 - leg_w/2), 0, leg_h/3])\n        cube([wall, seat_d - leg_d, leg_w], center = true);\n}\n\nmodule backrest() {\n    // two upright posts\n    translate([seat_w/2 - backrest_th, 0, leg_h + backrest_h/2])\n        cube([backrest_th, seat_d/3, backrest_h], center = true);\n    translate([-(seat_w/2 - backrest_th), 0, leg_h + backrest_h/2])\n        cube([backrest_th, seat_d/3, backrest_h], center = true);\n\n    // horizontal slats\n    for (i = [0 : num_slats-1]) {\n        z = leg_h + seat_h + backrest_th/2 + i*(slat_w + slat_gap);\n        translate([0, 0, z])\n            cube([seat_w - 2*backrest_th, backrest_th, slat_w], center = true);\n    }\n}\n\nunion() {\n    stool();\n    backrest();\n}",
    "renders": true
  },
  {
    "furniture": "armrest",
    "openscad_code": "// OpenSCAD Armrest for small chair / furniture piece\n// Overall size: ~110 × 50 × 70 mm  (3D-printable)\n\n// Parameters\nwall = 2;               // wall thickness for 3D printability\nseat_h = 8;             // top cushion height\nframe_h = 70;           // total height from ground\narm_w = 50;             // armrest width\narm_l = 110;            // armrest length (depth)\nleg_size = 12;          // square leg size\nstretcher_offset = 30;  // height of front stretcher\n\nmodule leg() {\n    // Simple square leg with gentle taper for style\n    linear_extrude(height = frame_h - seat_h, scale = [1, 0.9])\n        offset(-wall/2)\n            square([leg_size, leg_size], center = true);\n}\n\nmodule legs_frame() {\n    // Four legs plus stretchers for stability\n    translate([-arm_l/2 + leg_size/2 + wall, -arm_w/2 + leg_size/2 + wall, 0])\n        leg();\n    translate([ arm_l/2 - leg_size/2 - wall, -arm_w/2 + leg_size/2 + wall, 0])\n        leg();\n    translate([-arm_l/2 + leg_size/2 + wall,  arm_w/2 - leg_size/2 - wall, 0])\n        leg();\n    translate([ arm_l/2 - leg_size/2 - wall,  arm_w/2 - leg_size/2 - wall, 0])\n        leg();\n\n    // Front stretcher (square rod between front legs)\n    translate([0, -arm_w/2 + leg_size/2 + wall, stretcher_offset])\n        cube([arm_l - leg_size - 2*wall, wall, wall], center = true);\n\n    // Side stretchers\n    translate([-arm_l/2 + leg_size/2 + wall, 0, stretcher_offset])\n        rotate([0, 0, 90])\n            cube([arm_w - leg_size - 2*wall, wall, wall], center = true);\n    translate([ arm_l/2 - leg_size/2 - wall, 0, stretcher_offset])\n        rotate([0, 0, 90])\n            cube([arm_w - leg_size - 2*wall, wall, wall], center = true);\n}\n\nmodule arm_pad() {\n    // Cushioned top pad with rounded edges\n    translate([0, 0, frame_h])\n        minkowski() {\n            cube([arm_l - 2*wall, arm_w - 2*wall, seat_h - wall], center = true);\n            sphere(wall);\n        }\n}\n\nmodule support_brackets() {\n    // Triangular corner brackets under the pad for realism\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(arm_l/2 - leg_size - wall), y*(arm_w/2 - leg_size - wall), frame_h - seat_h/2])\n                rotate([0, 0, x*y*45])\n                    linear_extrude(height = wall)\n                        polygon(points = [[0,0], [10,0], [0,10]]);\n}\n\n// Assembly\nunion() {\n    legs_frame();\n    arm_pad();\n    support_brackets();\n}",
    "renders": true
  },
  {
    "furniture": "headrest",
    "openscad_code": "// Headrest for an office chair – printable, realistic, medium complexity\n// Overall size ~120 mm wide x 75 mm deep x 100 mm tall\n\n// --- PARAMETERS ----------------------------------------------------------\nwall = 2;              // shell thickness for printability\ncorner_r = 5;          // corner radius for fillets\npost_d = 12;           // support post diameter\npost_h = 25;           // post height\nback_w = 110;          // back support width\nback_h = 80;           // back support height\nback_d = 45;           // back support depth\ncushion_h = 20;        // soft cushion thickness\nmesh_pitch = 8;        // spacing of mesh holes\nmesh_rows = 3;         // number of mesh hole rows\nmesh_cols = 10;        // number of mesh hole columns\n\n// --- UTILITY MODULES -----------------------------------------------------\nmodule fillet_cube(size, r) {\n    // rounded cube via hull of spheres\n    hull() {\n        for(dx=[0,1], dy=[0,1], dz=[0,1])\n            translate([dx*size.x-r, dy*size.y-r, dz*size.z-r])\n                sphere(r=r);\n    }\n}\n\n// --- MAIN PARTS ----------------------------------------------------------\nmodule post() {\n    // main support post\n    cylinder(d=post_d, h=post_h, $fn=32);\n}\n\nmodule back_shell() {\n    // hollow curved back support shell\n    difference() {\n        // outer shell\n        minkowski() {\n            scale([1, back_d/back_w, back_h/back_w])\n                sphere(d=back_w, $fn=64);\n            cube([wall,wall,wall], center=true);\n        }\n\n        // inner cavity\n        minkowski() {\n            scale([(back_w-2*wall)/back_w,\n                   (back_d-2*wall)/back_d,\n                   (back_h-2*wall)/back_h])\n                sphere(d=back_w-2*wall, $fn=64);\n            cube([wall,wall,wall], center=true);\n        }\n    }\n}\n\nmodule cushion() {\n    // soft cushion pad\n    translate([0, 0, back_h/2 + cushion_h/2])\n        difference() {\n            fillet_cube([back_w-10, back_d-10, cushion_h], corner_r);\n            \n            // mesh vent holes pattern\n            for(i=[0:mesh_rows-1], j=[0:mesh_cols-1])\n                translate([\n                    -back_w/2 + 10 + j*mesh_pitch,\n                    0,\n                    back_h/2 + cushion_h/2 - 5 - i*mesh_pitch\n                ])\n                    rotate([90,0,0])\n                        cylinder(d=3, h=back_d-10+1, $fn=16);\n        }\n}\n\nmodule adjustment_slots() {\n    // two vertical slots for height adjustment teeth\n    for(side=[-1,1])\n        translate([side*(post_d/2 + 2), 0, post_h/2])\n            cube([wall+1, back_d*0.8, post_h], center=true);\n}\n\n// --- ASSEMBLY ------------------------------------------------------------\nunion() {\n    // post and teeth\n    post();\n    adjustment_slots();\n\n    // back support with cushion\n    translate([0, 0, post_h + back_h/2])\n        union() {\n            back_shell();\n            cushion();\n        }\n}",
    "renders": true
  },
  {
    "furniture": "slipper",
    "openscad_code": "// Realistic Slipper Chair - Medium Complexity\n// Overall dimensions: ~80mm width x ~85mm depth x ~75mm height\n\n// Chair parameters\nseat_width = 60;\nseat_depth = 55;\nseat_thickness = 4;\nback_height = 45;\nback_thickness = 4;\nleg_height = 35;\nleg_thickness = 3;\narmrest_height = 25;\narmrest_width = 8;\n\nmodule chair_frame() {\n    // Rear legs - angled for stability\n    translate([-seat_width/2 + leg_thickness/2, 0, 0]) {\n        rotate([0, -10, 0])\n        cube([leg_thickness, leg_thickness, leg_height]);\n    }\n    \n    translate([seat_width/2 - leg_thickness/2, 0, 0]) {\n        rotate([0, -10, 0])\n        cube([leg_thickness, leg_thickness, leg_height]);\n    }\n    \n    // Front legs\n    translate([-seat_width/2 + leg_thickness/2, seat_depth - leg_thickness, 0]) {\n        cube([leg_thickness, leg_thickness, leg_height]);\n    }\n    \n    translate([seat_width/2 - leg_thickness/2, seat_depth - leg_thickness, 0]) {\n        cube([leg_thickness, leg_thickness, leg_height]);\n    }\n    \n    // Front support bar\n    translate([0, seat_depth - leg_thickness/2, leg_height/2])\n    cube([seat_width - leg_thickness*2, leg_thickness, leg_thickness]);\n    \n    // Side support bars\n    translate([-seat_width/2 + leg_thickness/2, seat_depth/2, leg_height/2])\n    cube([leg_thickness, seat_depth - leg_thickness, leg_thickness]);\n    \n    translate([seat_width/2 - leg_thickness/2, seat_depth/2, leg_height/2])\n    cube([leg_thickness, seat_depth - leg_thickness, leg_thickness]);\n}\n\nmodule seat_cushion() {\n    // Main seat cushion with rounded edges\n    translate([0, seat_depth/2, leg_height + seat_thickness/2]) {\n        difference() {\n            // Base cushion shape\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n            \n            // Rounded front edge\n            translate([0, seat_depth/2 - 2, 0])\n            rotate([90, 0, 0])\n            cylinder(h=seat_width, r=2, center=true);\n        }\n        \n        // Cushion tufting details\n        for(x=[-20, 0, 20]) {\n            for(y=[-15, 0, 15]) {\n                translate([x, y, seat_thickness/2 - 1])\n                sphere(r=2);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Curved backrest\n    translate([0, -5, leg_height + seat_thickness + back_height/2]) {\n        rotate([10, 0, 0])\n        difference() {\n            // Main backrest\n            cube([seat_width - 10, back_thickness, back_height], center=true);\n            \n            // Top curve\n            translate([0, 0, back_height/2])\n            sphere(r=back_thickness*2);\n            \n            // Bottom curve\n            translate([0, 0, -back_height/2])\n            sphere(r=back_thickness*2);\n        }\n        \n        // Back padding\n        translate([0, back_thickness/2 + 2, 0])\n        scale([0.9, 0.8, 0.9])\n        cube([seat_width - 15, back_thickness, back_height - 5], center=true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - armrest_width/2, seat_depth/2, leg_height + armrest_height/2]) {\n        cube([armrest_width, seat_depth/2, armrest_height]);\n        \n        // Armrest support\n        translate([armrest_width/2, 0, -armrest_height/2])\n        rotate([0, 45, 0])\n        cube([leg_thickness, armrest_height/2, armrest_height/2]);\n    }\n    \n    // Right armrest\n    translate([seat_width/2 + armrest_width/2, seat_depth/2, leg_height + armrest_height/2]) {\n        mirror([1, 0, 0])\n        cube([armrest_width, seat_depth/2, armrest_height]);\n        \n        // Armrest support\n        translate([-armrest_width/2, 0, -armrest_height/2])\n        rotate([0, -45, 0])\n        cube([leg_thickness, armrest_height/2, armrest_height/2]);\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_cushion();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "barstool",
    "openscad_code": "// Barstool with round seat, 3 legs, and footrest ring\n// Overall height ~90 mm, seat Ø 40 mm, built for 3D printing (2 mm walls)\n\n$fn = 32;              // Smooth curves\n\nseat_d   = 40;         // Seat diameter\nseat_t   = 4;          // Seat thickness\nleg_h    = 75;         // Leg length below seat\nleg_r    = 2.5;        // Leg radius\nfoot_r   = 20;         // Footrest ring radius\nfoot_t   = 3;          // Footrest thickness\nback_h   = 35;         // Backrest post height above seat\nback_w   = 30;         // Backrest width\nback_t   = 3;          // Backrest thickness\n\n// Simple round cushion profile\nmodule cushioned_seat(dia, thick) {\n    difference() {\n        cylinder(h = thick, r = dia/2, center = true);\n        translate([0,0,-thick/2 + 1])\n            cylinder(h = thick - 1, r = dia/2 - 2);  // Hollow cavity\n    }\n}\n\n// Tapered leg with slight chamfer on bottom\nmodule stool_leg(len, rad) {\n    translate([0,0,len/2])\n        cylinder(h = len, r1 = rad, r2 = rad*0.9);\n}\n\n// Footrest ring\nmodule foot_ring(od, thick, leg_r) {\n    difference() {\n        cylinder(h = thick, r = od, center = true);\n        // Cutouts for legs\n        for(a = [0:120:359])\n            rotate([0,0,a])\n                translate([od - leg_r - 1, 0, 0])\n                    rotate([0,90,0])\n                        cylinder(h = 2*leg_r + 2, r = leg_r + 1, center = true);\n    }\n}\n\n// Backrest support arch\nmodule backrest(width, height, thick) {\n    translate([0, 0, height/2])\n        difference() {\n            union() {\n                // Two vertical posts\n                translate([-width/2 + thick/2, 0, 0])\n                    cube([thick, thick, height], center = true);\n                translate([ width/2 - thick/2, 0, 0])\n                    cube([thick, thick, height], center = true);\n                // Arc\n                translate([0, -thick/2, height/2 - thick/2])\n                    rotate([90,0,0])\n                        cylinder(h = width - thick, r = thick/2, center = true);\n            }\n            // Hollow center for printability\n            translate([0, 0, 0])\n                cube([width - 2*thick, thick + 1, height - 2*thick], center = true);\n        }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0,0,leg_h + seat_t/2])\n        cushioned_seat(seat_d, seat_t);\n\n    // Legs\n    for(a = [0:120:359])\n        rotate([0,0,a])\n            translate([seat_d/2 * 0.6, 0, 0])\n                stool_leg(leg_h, leg_r);\n\n    // Footrest\n    translate([0,0,leg_h/2])\n        foot_ring(foot_r, foot_t, leg_r);\n\n    // Backrest\n    translate([0, seat_d/2 - back_t/2, leg_h + seat_t])\n        backrest(back_w, back_h, back_t);\n}",
    "renders": true
  },
  {
    "furniture": "counter",
    "openscad_code": "// Counter with realistic proportions and 3D-printable features\n// Overall size: 100mm wide x 50mm deep x 75mm high\n\n$fn = 32;\n\n// Main counter body\nmodule counter_body() {\n    // Top surface with rounded edges\n    difference() {\n        // Main block\n        translate([0, 0, 74])\n        cube([100, 50, 2], center=true);\n        \n        // Rounded edge cutouts\n        translate([-48, -23, 73])\n        cylinder(h=4, r=2);\n        translate([48, -23, 73])\n        cylinder(h=4, r=2);\n        translate([-48, 23, 73])\n        cylinder(h=4, r=2);\n        translate([48, 23, 73])\n        cylinder(h=4, r=2);\n    }\n}\n\n// Front panel with drawer faces\nmodule front_panel() {\n    // Main panel\n    translate([0, 24, 35])\n    cube([96, 2, 38], center=true);\n    \n    // Drawer faces\n    for(i = [0:1]) {\n        translate([-25 + i*50, 25, 55 - i*20])\n        cube([45, 2.5, 15], center=true);\n        \n        // Drawer handles\n        translate([-25 + i*50, 26.5, 55 - i*20])\n        cube([20, 1, 2], center=true);\n    }\n}\n\n// Side panels\nmodule side_panels() {\n    // Left side\n    translate([-48, 0, 35])\n    cube([2, 46, 38], center=true);\n    \n    // Right side\n    translate([48, 0, 35])\n    cube([2, 46, 38], center=true);\n}\n\n// Back panel\nmodule back_panel() {\n    translate([0, -24, 35])\n    cube([96, 2, 38], center=true);\n}\n\n// Support structure\nmodule support_frame() {\n    // Front support beam\n    translate([0, 20, 16])\n    cube([92, 2, 2], center=true);\n    \n    // Back support beam\n    translate([0, -20, 16])\n    cube([92, 2, 2], center=true);\n    \n    // Side support beams\n    translate([-46, 0, 16])\n    cube([2, 36, 2], center=true);\n    \n    translate([46, 0, 16])\n    cube([2, 36, 2], center=true);\n}\n\n// Legs\nmodule legs() {\n    positions = [[-45, -20], [45, -20], [-45, 20], [45, 20]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 8])\n        cylinder(h=16, r=3);\n    }\n}\n\n// Shelf inside\nmodule inner_shelf() {\n    translate([0, 0, 30])\n    cube([90, 40, 2], center=true);\n}\n\n// Assembly\nunion() {\n    counter_body();\n    front_panel();\n    side_panels();\n    back_panel();\n    support_frame();\n    legs();\n    inner_shelf();\n}",
    "renders": true
  },
  {
    "furniture": "highchair",
    "openscad_code": "// Realistic 3D-Printable Highchair – medium complexity\n// Overall size ~80 mm tall for easy printing\n\n$fa = 2; $fs = 0.5;\n\n// Parameters --------------------------------------------------\nseatH = 26;\nbackH = 35;\nlegH  = 35;\nlegT  = 3;               // wall/layer thickness for printing\nseatW = 30;\nseatD = 26;\ntrayT = 2;\ntrayGap = 8;            // space between seat and tray\narmH  = 10;\n\n// Helper module for hollowed cylinders (tubes) ----------------\nmodule tube(h, r_out, r_in){\n    difference(){\n        cylinder(h=h, r=r_out, center=true);\n        cylinder(h=h+0.2, r=r_in, center=true);\n    }\n}\n\n// Leg module --------------------------------------------------\nmodule legPair(){\n    // single hollow rectangular leg\n    module singleLeg(){\n        difference(){\n            cube([legT, legT, legH], center=true);\n            translate([0,0,1]) cube([legT-1.8, legT-1.8, legH-2], center=true);\n        }\n    }\n    \n    // two legs with cross-brace\n    translate([-seatW/2+legT/2, -seatD/2+legT/2, 0])\n        singleLeg();\n    translate([ seatW/2-legT/2, -seatD/2+legT/2, 0])\n        singleLeg();\n    \n    // rear legs\n    translate([-seatW/2+legT/2, seatD/2-legT/2, 0])\n        singleLeg();\n    translate([ seatW/2-legT/2, seatD/2-legT/2, 0])\n        singleLeg();\n    \n    // front cross-brace for stability\n    translate([0, -seatD/2+legT/2, -legH/2+legT/2])\n        rotate([90,0,0])\n            tube(h=seatW-legT, r_out=legT/2, r_in=legT/2-1);\n}\n\n// Seat module -------------------------------------------------\nmodule seat(){\n    difference(){\n        // main seat plate\n        translate([0,0,seatH/2])\n            cube([seatW, seatD, seatH], center=true);\n        // hollow out bottom\n        translate([0,0,seatH/2-1])\n            cube([seatW-3.6, seatD-3.6, seatH-2], center=true);\n    }\n}\n\n// Backrest ----------------------------------------------------\nmodule backrest(){\n    difference(){\n        // back panel\n        translate([0, -seatD/2+1, seatH+backH/2])\n            cube([seatW-2, 2, backH], center=true);\n        // cutout pattern for realism\n        for(x=[-seatW/3, 0, seatW/3])\n            translate([x, -seatD/2+1, seatH+backH/2])\n                cube([4, 3, backH-4], center=true);\n    }\n}\n\n// Tray + arms -------------------------------------------------\nmodule tray(){\n    translate([0, seatD/2+trayGap, seatH+trayT/2+armH/2])\n        difference(){\n            // tray top\n            cube([seatW+4, seatD/2, trayT], center=true);\n            // hollow underneath\n            cube([seatW+4-3.6, seatD/2-3.6, trayT+0.2], center=true);\n        }\n    // arm supports\n    for(side=[-1,1])\n        translate([side*(seatW/2-2), seatD/2+trayGap/2, seatH+armH/2])\n            difference(){\n                cube([4, trayGap, armH], center=true);\n                cube([4-1.8, trayGap-1.8, armH-2], center=true);\n            }\n}\n\n// Assembly ----------------------------------------------------\nunion(){\n    legPair();\n    seat();\n    backrest();\n    tray();\n}",
    "renders": true
  },
  {
    "furniture": "babyseat",
    "openscad_code": "// Babyseat Furniture Item - Realistic Style\n// Overall dimensions: 80mm width x 75mm depth x 85mm height\n// Wall thickness: 2mm throughout\n\n// Main seat shell with ergonomic curves\nmodule seat_shell() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-35, -30, 0])\n                cylinder(h=45, r1=35, r2=32, $fn=50);\n            translate([35, -30, 0])\n                cylinder(h=45, r1=35, r2=32, $fn=50);\n            translate([-35, 30, 0])\n                cylinder(h=45, r1=35, r2=32, $fn=50);\n            translate([35, 30, 0])\n                cylinder(h=45, r1=35, r2=32, $fn=50);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            hull() {\n                translate([-30, -25, 2])\n                    cylinder(h=41, r1=30, r2=27, $fn=50);\n                translate([30, -25, 2])\n                    cylinder(h=41, r1=30, r2=27, $fn=50);\n                translate([-30, 25, 2])\n                    cylinder(h=41, r1=30, r2=27, $fn=50);\n                translate([30, 25, 2])\n                    cylinder(h=41, r1=30, r2=27, $fn=50);\n            }\n        \n        // Leg holes\n        for(x = [-15, 15]) {\n            translate([x, 25, 0])\n                cylinder(h=50, r=10, $fn=30);\n        }\n    }\n}\n\n// Backrest with safety bar\nmodule backrest() {\n    union() {\n        // Main backrest\n        difference() {\n            translate([-38, -35, 40])\n                cube([76, 5, 45]);\n            translate([-36, -33, 42])\n                cube([72, 1, 41]);\n        }\n        \n        // Safety bar\n        translate([0, -30, 65])\n            rotate([90, 0, 0])\n                cylinder(h=60, r=4, $fn=20);\n        \n        // Bar supports\n        for(x = [-20, 20]) {\n            translate([x, -30, 40])\n                cube([4, 6, 25]);\n        }\n    }\n}\n\n// Support legs\nmodule legs() {\n    for(x = [-25, 25])\n    for(y = [-20, 20]) {\n        translate([x, y, 0])\n            cylinder(h=10, r=4, $fn=12);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([side * 38, 0, 30])\n            rotate([0, 15 * side, 0])\n                cube([4, 20, 15]);\n    }\n}\n\n// Seat cushion detail\nmodule cushion() {\n    translate([0, 0, 5])\n        difference() {\n            cube([50, 40, 8], center=true);\n            for(i = [1:3])\n                for(j = [1:3]) {\n                    translate([-20 + i * 15, -15 + j * 10, 3])\n                        sphere(r=3, $fn=20);\n                }\n        }\n}\n\n// Assembly\nunion() {\n    seat_shell();\n    backrest();\n    legs();\n    armrests();\n    cushion();\n}",
    "renders": true
  },
  {
    "furniture": "booster",
    "openscad_code": "// Booster seat for children – realistic style, medium complexity\n// Safe 3D-printable model, no large overhangs, 2 mm walls\n// Overall footprint ≈ 180 × 200 mm, height ≈ 150 mm\n\n// -------------------------------------\n// Parameters\n// -------------------------------------\nseat_w = 180;            // overall width\nseat_d = 200;            // overall depth\nseat_h = 150;            // overall height\n\nwall_t = 2;              // uniform wall thickness\nleg_clear = 10;          // clearance below seat for adult chair legs\nleg_r = 8;               // radius of booster legs\nleg_h = seat_h - leg_clear - wall_t;\n\nback_h = 70;             // back-rest height above seat\nback_t = wall_t;         // back-rest thickness\nrail_h = 30;             // safety rail in front\n\n// -------------------------------------\n// Main assembly\n// -------------------------------------\nmodule booster_seat() {\n    difference() {\n        // --- Outer shell (hollow) ---\n        union() {\n            // Seat pan\n            translate([0, 0, leg_h])\n                cube([seat_w, seat_d, wall_t], center = true);\n\n            // Back rest\n            translate([0, seat_d/2 - back_t/2, leg_h + back_h/2])\n                cube([seat_w, back_t, back_h], center = true);\n\n            // Front safety rail\n            translate([0, -seat_d/2 + wall_t/2, leg_h + rail_h/2])\n                cube([seat_w - 40, wall_t, rail_h], center = true);\n        }\n\n        // --- Hollow out interior ---\n        translate([0, 0, leg_h/2])\n            cube([seat_w - 2*wall_t, seat_d - 2*wall_t, leg_h + wall_t + 10], center = true);\n\n        // --- Cutouts for adult chair legs ---\n        for (x = [-seat_w/2 + 30, seat_w/2 - 30])\n            translate([x, 0, leg_h/2])\n                cube([20, seat_d + 1, leg_h + 1], center = true);\n    }\n\n    // ---------------------------------\n    // Support legs (4 corners)\n    // ---------------------------------\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, leg_h/2])\n            cylinder(h = leg_h, r = leg_r, center = true, $fn = 20);\n    }\n\n    // Add legs\n    leg_pos = [\n        [ seat_w/2 - leg_r,  seat_d/2 - leg_r],\n        [-seat_w/2 + leg_r,  seat_d/2 - leg_r],\n        [ seat_w/2 - leg_r, -seat_d/2 + leg_r],\n        [-seat_w/2 + leg_r, -seat_d/2 + leg_r]\n    ];\n    for (p = leg_pos) leg(p[0], p[1]);\n\n    // ---------------------------------\n    // Reinforcing ribs under seat\n    // ---------------------------------\n    rib_w = wall_t;\n    rib_h = 15;\n\n    // longitudinal rib\n    translate([0, 0, leg_h - rib_h/2])\n        cube([seat_w - 2*leg_r, rib_w, rib_h], center = true);\n\n    // transverse ribs\n    for (y = [-seat_d/2 + leg_r + 10, seat_d/2 - leg_r - 10]) {\n        translate([0, y, leg_h - rib_h/2])\n            cube([rib_w, seat_w - 2*leg_r, rib_h], center = true);\n    }\n\n    // ---------------------------------\n    // Seat cushion detail (slight dome)\n    // ---------------------------------\n    translate([0, 0, leg_h + wall_t + 5])\n        scale([1, 1, 0.3])\n            sphere(d = seat_w - 30, $fn = 40);\n}\n\n// Render the model\nbooster_seat();",
    "renders": true
  },
  {
    "furniture": "carrel",
    "openscad_code": "// Carrel (study desk with privacy sides)\n// 3D printable, 100mm wide x 80mm deep x 100mm tall\n// Wall thickness 2mm, no overhangs\n\nmodule carrel() {\n    // Main desktop\n    difference() {\n        // Desktop top\n        translate([0,0,74]) cube([100,80,2], center=true);\n        \n        // Cable grommet\n        translate([0,15,75]) cylinder(h=3, d=10, $fn=32);\n    }\n    \n    // Desktop support structure\n    difference() {\n        // Front support beam\n        translate([0,30,63]) cube([96,2,12], center=true);\n        \n        // Notch for left side panel\n        translate([-45,30,63]) cube([6,4,14], center=true);\n    }\n    \n    difference() {\n        // Back support beam\n        translate([0,-30,63]) cube([96,2,12], center=true);\n        \n        // Notch for left side panel\n        translate([-45,-30,63]) cube([6,4,14], center=true);\n    }\n    \n    // Left privacy panel\n    difference() {\n        // Main panel\n        translate([-48,0,37]) cube([2,76,74], center=true);\n        \n        // Bottom cutout for feet clearance\n        translate([-48,0,5]) cube([6,60,10], center=true);\n    }\n    \n    // Right privacy panel\n    difference() {\n        // Main panel\n        translate([48,0,37]) cube([2,76,74], center=true);\n        \n        // Bottom cutout for feet clearance\n        translate([48,0,5]) cube([6,60,10], center=true);\n    }\n    \n    // Back panel\n    difference() {\n        // Main back panel\n        translate([0,-38,37]) cube([96,2,74], center=true);\n        \n        // Notches for side panels\n        translate([-48,-38,37]) cube([4,4,74], center=true);\n        translate([48,-38,37]) cube([4,4,74], center=true);\n    }\n    \n    // Legs\n    module leg(x,y) {\n        // Vertical post\n        difference() {\n            translate([x,y,37]) cube([6,6,74], center=true);\n            \n            // Screw clearance holes (optional, won't print at this scale)\n            translate([x,y,65]) cylinder(h=20, d=2, $fn=16);\n        }\n    }\n    \n    // Four legs\n    leg(-45, -35);\n    leg(45, -35);\n    leg(-45, 35);\n    leg(45, 35);\n    \n    // Shelf\n    translate([0,0,45]) cube([92,76,2], center=true);\n    \n    // Shelf support ribs\n    for (x = [-30, -10, 10, 30]) {\n        translate([x,0,44]) cube([2,76,2], center=true);\n    }\n    \n    // Small drawer unit\n    module drawer() {\n        difference() {\n            // Drawer front\n            translate([20,25,60]) cube([30,2,12], center=true);\n            \n            // Drawer pull\n            translate([20,26,60]) cylinder(h=3, d=8, $fn=16);\n        }\n        \n        // Drawer sides\n        translate([5,25,60]) cube([2,28,12], center=true);\n        translate([35,25,60]) cube([2,28,12], center=true);\n        \n        // Drawer back\n        translate([20,11,60]) cube([30,2,12], center=true);\n        \n        // Drawer bottom\n        translate([20,25,54]) cube([30,28,2], center=true);\n    }\n    \n    drawer();\n}\n\n// Main assembly\ncarrel();",
    "renders": true
  },
  {
    "furniture": "porchswing",
    "openscad_code": "// Porch Swing 3D Model\n// Designed for 3D printing - overall length 80mm\n\n// Parameters\n$fn = 32;\nseat_width = 60;\nseat_depth = 35;\nseat_thickness = 3;\nback_height = 40;\nback_thickness = 3;\narm_width = 4;\narm_height = 15;\narm_length = 30;\nleg_size = 4;\nchain_link_size = 3;\nchain_length = 20;\nframe_thickness = 2;\n\n// Main swing module\nmodule porch_swing() {\n    // Seat frame\n    difference() {\n        // Outer frame\n        cube([seat_width, seat_depth, seat_thickness]);\n        \n        // Hollow center\n        translate([frame_thickness, frame_thickness, -1])\n            cube([seat_width - 2*frame_thickness, seat_depth - 2*frame_thickness, seat_thickness + 2]);\n    }\n    \n    // Backrest\n    translate([0, seat_depth - frame_thickness, seat_thickness])\n        difference() {\n            cube([seat_width, back_thickness, back_height]);\n            // Slat pattern\n            for(i = [5:10:seat_width-10]) {\n                translate([i, -1, 5])\n                    cube([5, back_thickness + 2, back_height - 10]);\n            }\n        }\n    \n    // Armrests\n    // Left arm\n    translate([-arm_width/2, 0, 0])\n        cube([arm_width, arm_length, arm_height]);\n    \n    // Right arm\n    translate([seat_width - arm_width/2, 0, 0])\n        cube([arm_width, arm_length, arm_height]);\n    \n    // Support legs\n    // Front left\n    translate([5, 5, -leg_size])\n        cube([leg_size, leg_size, leg_size + 5]);\n    \n    // Front right\n    translate([seat_width - 5 - leg_size, 5, -leg_size])\n        cube([leg_size, leg_size, leg_size + 5]);\n    \n    // Back left\n    translate([5, seat_depth - 5 - leg_size, -leg_size])\n        cube([leg_size, leg_size, leg_size + 5]);\n    \n    // Back right\n    translate([seat_width - 5 - leg_size, seat_depth - 5 - leg_size, -leg_size])\n        cube([leg_size, leg_size, leg_size + 5]);\n    \n    // Chains\n    // Left chain links\n    for(i = [0:5:chain_length - 5]) {\n        translate([5, -5, seat_thickness + back_height + chain_length - i])\n            chain_link();\n    }\n    \n    // Right chain links\n    for(i = [0:5:chain_length - 5]) {\n        translate([seat_width - 5, -5, seat_thickness + back_height + chain_length - i])\n            chain_link();\n    }\n    \n    // Cushion\n    translate([frame_thickness, frame_thickness, seat_thickness])\n        cube([seat_width - 2*frame_thickness, seat_depth - 2*frame_thickness, 5]);\n}\n\n// Chain link module\nmodule chain_link() {\n    difference() {\n        // Outer ring\n        rotate([90, 0, 0])\n            cylinder(h = chain_link_size, r = chain_link_size/2, center = true);\n        \n        // Inner hollow\n        rotate([90, 0, 0])\n            cylinder(h = chain_link_size + 1, r = chain_link_size/2 - 1, center = true);\n    }\n}\n\n// Generate the swing\nporch_swing();",
    "renders": true
  },
  {
    "furniture": "glider",
    "openscad_code": "// Glider Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm width x 90mm depth x 100mm height\n\n// Base frame with curved rockers\nmodule rocker_base() {\n    // Left rocker\n    translate([-58, -40, 0]) {\n        difference() {\n            // Main curved rocker\n            rotate([90, 0, 0]) cylinder(h=100, r1=45, r2=45, $fn=50);\n            // Hollow out for thickness\n            translate([0, 0, 2]) rotate([90, 0, 0]) cylinder(h=96, r1=43, r2=43, $fn=50);\n            // Cut flat bottom\n            translate([0, -50, -45]) cube([100, 100, 10], center=true);\n        }\n    }\n    // Right rocker (mirrored)\n    mirror([1, 0, 0]) {\n        translate([-58, -40, 0]) {\n            difference() {\n                rotate([90, 0, 0]) cylinder(h=100, r1=45, r2=45, $fn=50);\n                translate([0, 0, 2]) rotate([90, 0, 0]) cylinder(h=96, r1=43, r2=43, $fn=50);\n                translate([0, -50, -45]) cube([100, 100, 10], center=true);\n            }\n        }\n    }\n}\n\n// Support frame connecting rockers\nmodule support_frame() {\n    // Front crossbar\n    translate([0, -35, 8]) {\n        cube([116, 4, 8], center=true);\n    }\n    // Rear crossbar\n    translate([0, 35, 8]) {\n        cube([116, 4, 8], center=true);\n    }\n    // Vertical supports\n    for(x = [-50, 50]) {\n        translate([x, -35, 25]) {\n            cube([4, 4, 34], center=true);\n        }\n        translate([x, 35, 25]) {\n            cube([4, 4, 34], center=true);\n        }\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    translate([0, 0, 45]) {\n        difference() {\n            // Main cushion\n            cube([100, 80, 12], center=true);\n            // Rounded edges\n            translate([0, 0, -1]) minkowski() {\n                cube([96, 76, 10], center=true);\n                sphere(2, $fn=20);\n            }\n        }\n    }\n}\n\n// Backrest cushion\nmodule backrest_cushion() {\n    translate([0, 35, 75]) {\n        rotate([15, 0, 0]) {\n            difference() {\n                // Main backrest\n                cube([100, 8, 60], center=true);\n                // Rounded edges\n                translate([0, 0, -1]) minkowski() {\n                    cube([96, 4, 56], center=true);\n                    sphere(2, $fn=20);\n                }\n            }\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([side * 52, 0, 60]) {\n            // Support post\n            cube([4, 4, 20], center=true);\n            // Armrest pad\n            translate([0, 0, 12]) {\n                rotate([0, 20 * side, 0]) {\n                    cube([30, 8, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    rocker_base();\n    support_frame();\n    \n    // Seating components\n    seat_cushion();\n    backrest_cushion();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "hammock",
    "openscad_code": "// Realistic Hammock - Medium Complexity\n// 3D printable version with 2mm wall thickness\n\n$fn = 64;\n\n// Overall dimensions\nhammock_length = 100;\nhammock_width = 40;\nstand_height = 40;\nframe_thickness = 3;\n\n// Hammock bed parameters\nbed_thickness = 2;\nrope_diameter = 1;\nrope_spacing = 4;\n\n// Stand parameters\npost_diameter = 4;\nbase_length = 60;\nbase_width = 35;\n\nmodule hammock_post(height, angle) {\n    // Main post\n    translate([-post_diameter/2, 0, 0])\n        rotate([0, angle, 0])\n        cylinder(h=height, d=post_diameter);\n    \n    // Base foot\n    translate([-base_length/2, -base_width/2, -2])\n        cube([base_length, base_width, 2]);\n    \n    // Support brace\n    translate([post_diameter/2, 0, height/2])\n        rotate([0, -angle, 0])\n        cube([height*0.7, frame_thickness, frame_thickness]);\n}\n\nmodule hammock_bed() {\n    // Main bed frame\n    difference() {\n        // Outer frame\n        cube([hammock_length, hammock_width, bed_thickness]);\n        \n        // Inner cutout\n        translate([bed_thickness, bed_thickness, -1])\n            cube([hammock_length-2*bed_thickness, hammock_width-2*bed_thickness, bed_thickness+2]);\n    }\n    \n    // Rope mesh pattern\n    for (i = [rope_spacing/2:rope_spacing:hammock_length-rope_spacing/2]) {\n        // Lengthwise ropes\n        translate([i, 0, bed_thickness/2])\n            cylinder(h=hammock_width, d=rope_diameter);\n        \n        // Cross ropes\n        for (j = [rope_spacing/2:rope_spacing:hammock_width-rope_spacing/2]) {\n            translate([0, j, bed_thickness/2])\n                rotate([90, 0, 0])\n                cylinder(h=hammock_length, d=rope_diameter);\n        }\n    }\n    \n    // End loops for hanging\n    translate([0, hammock_width/2, bed_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=6);\n    \n    translate([hammock_length, hammock_width/2, bed_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=6);\n}\n\nmodule hammock_stand() {\n    // Left stand\n    translate([0, 0, 0])\n        hammock_post(stand_height, 15);\n    \n    // Right stand\n    translate([hammock_length, 0, 0])\n        rotate([0, 0, 180])\n        hammock_post(stand_height, 15);\n    \n    // Cross support bar\n    translate([-post_diameter/2, 0, stand_height-2])\n        rotate([0, 15, 0])\n        cube([hammock_length+post_diameter, frame_thickness, frame_thickness]);\n}\n\n// Assemble the hammock\nunion() {\n    // Hammock stand\n    hammock_stand();\n    \n    // Hammock bed - slightly curved\n    translate([0, 0, stand_height-10])\n        rotate([-15, 0, 0])\n        translate([0, 0, -sin(15)*hammock_length/2])\n        hammock_bed();\n    \n    // Hanging ropes\n    translate([0, hammock_width/2, stand_height-10])\n        rotate([0, -15, 0])\n        cylinder(h=15, d=rope_diameter);\n    \n    translate([hammock_length, hammock_width/2, stand_height-10])\n        rotate([0, -15, 0])\n        cylinder(h=15, d=rope_diameter);\n}",
    "renders": true
  },
  {
    "furniture": "deckchair",
    "openscad_code": "// Deckchair - Realistic style, medium complexity\n// Approximate size: 100mm length, optimized for 3D printing\n\n$fn = 20;  // Smooth curves for 3D printing\n\n// Main module\nmodule deckchair() {\n    // Frame thickness\n    frame_thickness = 2;\n    \n    // Backrest assembly\n    translate([0, 0, 0])\n        backrest_assembly();\n    \n    // Seat assembly\n    translate([0, 0, 0])\n        seat_assembly();\n    \n    // Front legs\n    translate([5, 0, 0])\n        leg_pair(45);\n    \n    // Rear legs\n    translate([75, 0, 0])\n        leg_pair(30);\n    \n    // Armrests\n    translate([50, 25, 35])\n        rotate([0, 0, 30])\n        armrest();\n    translate([50, -25, 35])\n        rotate([0, 0, -30])\n        armrest();\n}\n\n// Backrest with fabric slats\nmodule backrest_assembly() {\n    // Backrest frame\n    difference() {\n        union() {\n            // Left vertical support\n            translate([70, 20, 0])\n                cube([frame_thickness, 3, 50]);\n            // Right vertical support\n            translate([70, -23, 0])\n                cube([frame_thickness, 3, 50]);\n            // Top horizontal bar\n            translate([70, 20, 47])\n                cube([frame_thickness, -43, 3]);\n            // Bottom horizontal bar\n            translate([70, 20, 0])\n                cube([frame_thickness, -43, 3]);\n        }\n    }\n    \n    // Fabric slats\n    for(i = [0:3]) {\n        translate([71, 18, 5 + i*10])\n            cube([2, -39, 8]);\n    }\n}\n\n// Seat assembly\nmodule seat_assembly() {\n    // Seat frame\n    difference() {\n        union() {\n            // Left side\n            translate([5, 20, 0])\n                cube([65, 3, frame_thickness]);\n            // Right side\n            translate([5, -23, 0])\n                cube([65, 3, frame_thickness]);\n            // Front support\n            translate([0, 20, 0])\n                cube([5, -43, frame_thickness]);\n            // Rear support\n            translate([65, 20, 0])\n                cube([5, -43, frame_thickness]);\n        }\n    }\n    \n    // Fabric strips\n    for(i = [0:5]) {\n        translate([10 + i*10, 18, 2])\n            cube([8, -39, 2]);\n    }\n}\n\n// Leg pair module\nmodule leg_pair(angle) {\n    // Left leg\n    translate([0, 18, 0])\n        leg(angle);\n    // Right leg\n    translate([0, -18, 0])\n        leg(angle);\n}\n\n// Single leg module\nmodule leg(angle) {\n    // Main leg post\n    rotate([0, angle, 0])\n        translate([0, 0, -20])\n            cylinder(h = 40, r1 = 2, r2 = 2);\n    \n    // Foot pad\n    translate([0, 0, -2])\n        rotate([0, angle, 0])\n            translate([0, 0, -20])\n                cylinder(h = 1, r1 = 3, r2 = 3);\n}\n\n// Armrest module\nmodule armrest() {\n    // Main armrest\n    cube([25, 5, 2]);\n    \n    // Support post\n    translate([10, 2.5, -15])\n        cylinder(h = 15, r1 = 2, r2 = 2);\n}\n\n// Render the deckchair\ndeckchair();",
    "renders": true
  },
  {
    "furniture": "lawnchair",
    "openscad_code": "// Lawnchair - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm wide x 70mm deep x 80mm tall\n\nchair_width = 60;\nchair_depth = 70;\nchair_height = 80;\nseat_height = 40;\nback_angle = 105;\n\n// Main frame\nmodule frame() {\n    // Front left leg\n    translate([-chair_width/2 + 3, -chair_depth/2 + 3, 0])\n        cylinder(h=seat_height, r=3, $fn=12);\n    \n    // Front right leg\n    translate([chair_width/2 - 3, -chair_depth/2 + 3, 0])\n        cylinder(h=seat_height, r=3, $fn=12);\n    \n    // Back left leg\n    translate([-chair_width/2 + 3, chair_depth/2 - 3, 0])\n        cylinder(h=chair_height, r=3, $fn=12);\n    \n    // Back right leg\n    translate([chair_width/2 - 3, chair_depth/2 - 3, 0])\n        cylinder(h=chair_height, r=3, $fn=12);\n    \n    // Front crossbar\n    translate([0, -chair_depth/2 + 3, seat_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width - 6, r=2, $fn=12);\n    \n    // Back crossbar\n    translate([0, chair_depth/2 - 3, seat_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width - 6, r=2, $fn=12);\n    \n    // Side crossbars\n    for(side = [-1, 1]) {\n        translate([side * chair_width/2 + side * -3, 0, seat_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=chair_depth - 6, r=2, $fn=12);\n    }\n}\n\n// Seat slats\nmodule seat() {\n    slat_width = 3;\n    gap = 2;\n    num_slats = floor((chair_width - 10) / (slat_width + gap));\n    \n    for(i = [0:num_slats-1]) {\n        translate([-chair_width/2 + 5 + i*(slat_width + gap), 0, seat_height])\n            cube([slat_width, chair_depth - 6, 2]);\n    }\n}\n\n// Backrest slats\nmodule backrest() {\n    slat_width = 3;\n    gap = 2;\n    num_slats = floor((chair_width - 10) / (slat_width + gap));\n    back_height = chair_height - seat_height;\n    \n    for(i = [0:num_slats-1]) {\n        translate([-chair_width/2 + 5 + i*(slat_width + gap), \n                  chair_depth/2 - 3, \n                  seat_height])\n            rotate([back_angle - 90, 0, 0])\n                cube([slat_width, back_height - 5, 2]);\n    }\n    \n    // Top backrest support\n    translate([0, chair_depth/2 - 10, chair_height - 3])\n        rotate([back_angle - 90, 0, 0])\n            cube([chair_width - 6, 4, 2]);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 - 2, 0, seat_height + 8])\n        cube([4, chair_depth/2, 2]);\n    \n    // Left support\n    translate([-chair_width/2 - 2, -chair_depth/4, seat_height])\n        cube([2, 2, 8]);\n    \n    // Right armrest\n    translate([chair_width/2 - 2, 0, seat_height + 8])\n        cube([4, chair_depth/2, 2]);\n    \n    // Right support\n    translate([chair_width/2, -chair_depth/4, seat_height])\n        cube([2, 2, 8]);\n}\n\n// Assembly\nunion() {\n    frame();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "campchair",
    "openscad_code": "// Campchair - realistic style, medium complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;\n\n// Main chair dimensions (realistic proportions for 3D print)\nchair_width = 50;\nchair_depth = 45;\nchair_height = 55;\nseat_thickness = 3;\nback_height = 30;\nleg_diameter = 4;\nfabric_thickness = 1;\n\nmodule leg_post(h = chair_height - seat_thickness) {\n    // Single leg post with realistic taper\n    cylinder(d1 = leg_diameter, d2 = leg_diameter * 0.8, h = h);\n}\n\nmodule leg_assembly() {\n    // Complete 4-leg frame with cross-bracing\n    union() {\n        // Front legs\n        translate([-chair_width/2 + leg_diameter, chair_depth/2 - leg_diameter/2, 0])\n            leg_post();\n        translate([chair_width/2 - leg_diameter, chair_depth/2 - leg_diameter/2, 0])\n            leg_post();\n        \n        // Rear legs (longer for backrest angle)\n        translate([-chair_width/2 + leg_diameter, -chair_depth/2 + leg_diameter/2, 0])\n            leg_post(h = chair_height - seat_thickness + back_height * 0.8);\n        translate([chair_width/2 - leg_diameter, -chair_depth/2 + leg_diameter/2, 0])\n            leg_post(h = chair_height - seat_thickness + back_height * 0.8);\n        \n        // Cross bracing between legs\n        // Front brace\n        translate([0, chair_depth/2 - leg_diameter/2, leg_diameter])\n            rotate([90, 0, 0])\n                cylinder(d = leg_diameter * 0.7, h = chair_width - leg_diameter * 2);\n        \n        // Side braces\n        translate([-chair_width/2 + leg_diameter, 0, leg_diameter])\n            rotate([90, 90, 0])\n                cylinder(d = leg_diameter * 0.7, h = chair_depth - leg_diameter);\n        translate([chair_width/2 - leg_diameter, 0, leg_diameter])\n            rotate([90, 90, 0])\n                cylinder(d = leg_diameter * 0.7, h = chair_depth - leg_diameter);\n    }\n}\n\nmodule seat_fabric() {\n    // Fabric seat with realistic sag\n    translate([0, 0, chair_height - seat_thickness])\n        scale([1, 1, 0.3])\n            cube([chair_width - leg_diameter * 2, chair_depth - leg_diameter * 2, seat_thickness], center = true);\n}\n\nmodule backrest_fabric() {\n    // Angled backrest fabric\n    translate([0, -chair_depth/3, chair_height + back_height/2])\n        rotate([15, 0, 0])\n            cube([chair_width - leg_diameter * 2, back_height, fabric_thickness], center = true);\n}\n\nmodule armrest() {\n    // Simple armrest with support\n    translate([chair_width/2, 0, chair_height + 5])\n        rotate([0, 0, 10])\n            cube([15, 3, 2]);\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    leg_assembly();\n    \n    // Seating surfaces\n    seat_fabric();\n    backrest_fabric();\n    \n    // Armrests (simplified for 3D printing)\n    armrest();\n    mirror([1, 0, 0])\n        armrest();\n}",
    "renders": true
  },
  {
    "furniture": "garden",
    "openscad_code": "// Garden Adirondack Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 110mm wide x 120mm deep x 100mm tall\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule adirondack_chair() {\n    // Chair assembly\n    union() {\n        // Seat slats\n        seat_assembly();\n        \n        // Backrest\n        backrest_assembly();\n        \n        // Arms\n        left_arm();\n        right_arm();\n        \n        // Legs\n        front_legs();\n        back_legs();\n        \n        // Support braces\n        support_braces();\n    }\n}\n\n// Seat assembly with multiple slats\nmodule seat_assembly() {\n    translate([0, 30, 45]) {\n        rotate([15, 0, 0]) {\n            // Seat frame\n            difference() {\n                cube([100, 80, 4], center=true);\n                translate([0, 0, -1]) cube([96, 76, 6], center=true);\n            }\n            \n            // Seat slats with 2mm thickness\n            for(i = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n                translate([i, 0, -2]) {\n                    difference() {\n                        cube([8, 76, 2], center=true);\n                        translate([0, 0, -1]) cube([6, 74, 4], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Backrest with curved top and slats\nmodule backrest_assembly() {\n    translate([0, -45, 75]) {\n        rotate([105, 0, 0]) {\n            // Backrest frame\n            difference() {\n                cube([100, 65, 4], center=true);\n                translate([0, 0, -1]) cube([96, 61, 6], center=true);\n            }\n            \n            // Backrest slats\n            for(i = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n                translate([i, 0, -2]) {\n                    difference() {\n                        cube([8, 57, 2], center=true);\n                        translate([0, 0, -1]) cube([6, 55, 4], center=true);\n                    }\n                }\n            }\n            \n            // Top rail (curved appearance)\n            translate([0, -28.5, 2]) {\n                difference() {\n                    cube([96, 6, 4], center=true);\n                    translate([0, 0, -1]) cube([94, 4, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Left arm with support\nmodule left_arm() {\n    translate([-55, 15, 65]) {\n        // Armrest\n        difference() {\n            cube([15, 50, 4], center=true);\n            translate([0, 0, -1]) cube([13, 48, 6], center=true);\n        }\n        \n        // Support post\n        translate([0, 10, -15]) {\n            difference() {\n                cube([8, 8, 30], center=true);\n                translate([0, 0, -1]) cube([6, 6, 32], center=true);\n            }\n        }\n    }\n}\n\n// Right arm with support\nmodule right_arm() {\n    mirror([1, 0, 0]) left_arm();\n}\n\n// Front legs\nmodule front_legs() {\n    // Left front leg\n    translate([-45, 35, 25]) {\n        difference() {\n            cube([8, 8, 50], center=true);\n            translate([0, 0, -1]) cube([6, 6, 52], center=true);\n        }\n    }\n    \n    // Right front leg\n    translate([45, 35, 25]) {\n        difference() {\n            cube([8, 8, 50], center=true);\n            translate([0, 0, -1]) cube([6, 6, 52], center=true);\n        }\n    }\n}\n\n// Back legs\nmodule back_legs() {\n    // Left back leg\n    translate([-45, -45, 25]) {\n        difference() {\n            cube([8, 8, 50], center=true);\n            translate([0, 0, -1]) cube([6, 6, 52], center=true);\n        }\n    }\n    \n    // Right back leg\n    translate([45, -45, 25]) {\n        difference() {\n            cube([8, 8, 50], center=true);\n            translate([0, 0, -1]) cube([6, 6, 52], center=true);\n        }\n    }\n}\n\n// Support braces between legs\nmodule support_braces() {\n    // Side braces\n    translate([-45, -5, 15]) {\n        difference() {\n            rotate([0, 90, 0]) cylinder(h=90, r=2.5, $fn=8);\n            rotate([0, 90, 0]) cylinder(h=92, r=1.5, $fn=8);\n        }\n    }\n    \n    translate([45, -5, 15]) {\n        difference() {\n            rotate([0, 90, 0]) cylinder(h=90, r=2.5, $fn=8);\n            rotate([0, 90, 0]) cylinder(h=92, r=1.5, $fn=8);\n        }\n    }\n    \n    // Front brace\n    translate([0, 35, 15]) {\n        difference() {\n            rotate([90, 0, 0]) cylinder(h=90, r=2.5, $fn=8);\n            rotate([90, 0, 0]) cylinder(h=92, r=1.5, $fn=8);\n        }\n    }\n    \n    // Back brace\n    translate([0, -45, 15]) {\n        difference() {\n            rotate([90, 0, 0]) cylinder(h=90, r=2.5, $fn=8);\n            rotate([90, 0, 0]) cylinder(h=92, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Render the chair\nadirondack_chair();",
    "renders": true
  },
  {
    "furniture": "adirondack",
    "openscad_code": "// Adirondack Chair - Realistic Medium Complexity\n// Dimensions scaled for 3D printing (approx 80mm tall)\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Chair parameters\nseat_width = 40 * scale_factor;\nseat_depth = 35 * scale_factor;\nseat_thickness = 2 * scale_factor;\nback_height = 45 * scale_factor;\nback_angle = 105; // degrees from horizontal\nleg_height = 35 * scale_factor;\narmrest_height = 25 * scale_factor;\narmrest_width = 5 * scale_factor;\n\n// Slat parameters\nslat_thickness = 2 * scale_factor;\nslat_spacing = 3 * scale_factor;\nnum_back_slats = 5;\nnum_seat_slats = 7;\n\n// Material thickness for structural elements\nmaterial_thickness = 2 * scale_factor;\n\nmodule back_slat(width, height, thickness) {\n    cube([width, thickness, height], center = true);\n}\n\nmodule seat_slat(width, depth, thickness) {\n    cube([width, thickness, depth], center = true);\n}\n\nmodule chair_back() {\n    union() {\n        // Back frame - left post\n        translate([-seat_width/2 + material_thickness/2, -seat_depth/2 - material_thickness/2, back_height/2]) {\n            cube([material_thickness, material_thickness, back_height], center = true);\n        }\n        \n        // Back frame - right post\n        translate([seat_width/2 - material_thickness/2, -seat_depth/2 - material_thickness/2, back_height/2]) {\n            cube([material_thickness, material_thickness, back_height], center = true);\n        }\n        \n        // Back frame - top rail\n        translate([0, -seat_depth/2 - material_thickness/2, back_height - material_thickness/2]) {\n            cube([seat_width - material_thickness, material_thickness, material_thickness], center = true);\n        }\n        \n        // Back slats\n        for (i = [0:num_back_slats-1]) {\n            translate([\n                -seat_width/2 + material_thickness + (seat_width - 2*material_thickness) * (i + 0.5) / num_back_slats,\n                -seat_depth/2 - material_thickness/2 - slat_thickness/2,\n                back_height/2\n            ]) {\n                rotate([back_angle - 90, 0, 0]) {\n                    back_slat(\n                        (seat_width - 2*material_thickness) / num_back_slats - slat_spacing,\n                        back_height - 2*material_thickness,\n                        slat_thickness\n                    );\n                }\n            }\n        }\n    }\n}\n\nmodule chair_seat() {\n    union() {\n        // Seat frame - front\n        translate([0, seat_depth/2 - material_thickness/2, -leg_height + seat_thickness/2]) {\n            cube([seat_width, material_thickness, seat_thickness], center = true);\n        }\n        \n        // Seat frame - left side\n        translate([-seat_width/2 + material_thickness/2, 0, -leg_height + seat_thickness/2]) {\n            cube([material_thickness, seat_depth, seat_thickness], center = true);\n        }\n        \n        // Seat frame - right side\n        translate([seat_width/2 - material_thickness/2, 0, -leg_height + seat_thickness/2]) {\n            cube([material_thickness, seat_depth, seat_thickness], center = true);\n        }\n        \n        // Seat slats\n        for (i = [0:num_seat_slats-1]) {\n            translate([\n                0,\n                -seat_depth/2 + material_thickness + (seat_depth - 2*material_thickness) * (i + 0.5) / num_seat_slats,\n                -leg_height + seat_thickness/2\n            ]) {\n                seat_slat(\n                    seat_width - 2*material_thickness,\n                    (seat_depth - 2*material_thickness) / num_seat_slats - slat_spacing,\n                    slat_thickness\n                );\n            }\n        }\n    }\n}\n\nmodule chair_legs() {\n    union() {\n        // Front left leg\n        translate([-seat_width/2 + material_thickness/2, seat_depth/2 - material_thickness/2, -leg_height/2]) {\n            cube([material_thickness, material_thickness, leg_height], center = true);\n        }\n        \n        // Front right leg\n        translate([seat_width/2 - material_thickness/2, seat_depth/2 - material_thickness/2, -leg_height/2]) {\n            cube([material_thickness, material_thickness, leg_height], center = true);\n        }\n        \n        // Back left leg (angled)\n        translate([-seat_width/2 + material_thickness/2, -seat_depth/2 - material_thickness/2, -leg_height/2 + 5*scale_factor]) {\n            rotate([0, -15, 0]) {\n                cube([material_thickness, material_thickness, leg_height], center = true);\n            }\n        }\n        \n        // Back right leg (angled)\n        translate([seat_width/2 - material_thickness/2, -seat_depth/2 - material_thickness/2, -leg_height/2 + 5*scale_factor]) {\n            rotate([0, 15, 0]) {\n                cube([material_thickness, material_thickness, leg_height], center = true);\n            }\n        }\n    }\n}\n\nmodule armrests() {\n    union() {\n        // Left armrest\n        translate([-seat_width/2 - armrest_width/2, 0, -leg_height + armrest_height]) {\n            cube([armrest_width, seat_depth + material_thickness, material_thickness], center = true);\n            \n            // Support brace\n            translate([0, seat_depth/2 - material_thickness, -armrest_height/2 + material_thickness/2]) {\n                rotate([0, 30, 0]) {\n                    cube([material_thickness, material_thickness, armrest_height], center = true);\n                }\n            }\n        }\n        \n        // Right armrest\n        translate([seat_width/2 + armrest_width/2, 0, -leg_height + armrest_height]) {\n            cube([armrest_width, seat_depth + material_thickness, material_thickness], center = true);\n            \n            // Support brace\n            translate([0, seat_depth/2 - material_thickness, -armrest_height/2 + material_thickness/2]) {\n                rotate([0, -30, 0]) {\n                    cube([material_thickness, material_thickness, armrest_height], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_back();\n    chair_seat();\n    chair_legs();\n    armrests();\n}",
    "renders": true
  },
  {
    "furniture": "windsor",
    "openscad_code": "// Windsor Chair - Medium Complexity Realistic Style\n// Approximately 100mm tall, 3D printable with 2mm walls\n\nchair_height = 100;\nseat_height = 50;\nseat_diameter = 60;\nleg_length = 48;\nback_height = 50;\nback_width = 55;\n\n// Main seat - slightly dished\nmodule windsor_seat() {\n    difference() {\n        cylinder(h=8, d=seat_diameter, $fn=64);\n        translate([0, 0, 1])\n            cylinder(h=6, d=seat_diameter-4, $fn=64);\n        // Dish out the top\n        translate([0, 0, 7])\n            sphere(d=seat_diameter+2, $fn=64);\n    }\n}\n\n// Turned leg with taper\nmodule windsor_leg(height, top_d=4, bottom_d=3) {\n    union() {\n        // Top tenon\n        cylinder(h=4, d=top_d, $fn=16);\n        \n        // Leg shaft with decorative rings\n        for(i=[0:2]) {\n            translate([0, 0, 4 + i*height/3])\n                cylinder(h=2, d=top_d - (i*(top_d-bottom_d)/3), $fn=16);\n        }\n        \n        // Main tapered section\n        cylinder(h=height-4, d1=top_d, d2=bottom_d, $fn=16);\n    }\n}\n\n// Spindle for back\nmodule windsor_spindle(height, top_d=2, bottom_d=2.5) {\n    union() {\n        // Bottom tenon\n        cylinder(h=3, d=bottom_d, $fn=12);\n        \n        // Tapered spindle\n        cylinder(h=height-3, d1=bottom_d, d2=top_d, $fn=12);\n    }\n}\n\n// Bow-shaped backrest\nmodule windsor_back() {\n    // Continuous bow shape\n    difference() {\n        union() {\n            // Main bow\n            linear_extrude(height=4)\n                difference() {\n                    circle(r=back_width/2, $fn=64);\n                    translate([0, -back_width/2 + 2, 0])\n                        circle(r=back_width/2 - 4, $fn=64);\n                }\n            \n            // Strengthening curve at bottom\n            translate([0, 0, -2])\n                cylinder(h=6, d=back_width-4, $fn=64);\n        }\n        \n        // Remove center for bow shape\n        translate([0, -back_width/2 + 6, 0])\n            cube([back_width+2, back_width, 10], center=true);\n    }\n}\n\n// Assembly\nmodule windsor_chair() {\n    // Seat\n    translate([0, 0, seat_height])\n        windsor_seat();\n    \n    // Four legs\n    leg_positions = [[-20, -20], [20, -20], [-20, 20], [20, 20]];\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], seat_height-8])\n            rotate([0, 15, 0])\n                windsor_leg(leg_length);\n    }\n    \n    // Back assembly\n    translate([0, 0, seat_height+8])\n        rotate([90, 0, 0])\n            windsor_back();\n    \n    // Spindles in back\n    spindle_count = 7;\n    spindle_spacing = back_width / (spindle_count - 1);\n    for(i = [0:spindle_count-1]) {\n        x = -back_width/2 + i * spindle_spacing;\n        translate([x, -back_width/2 + 2, seat_height+8])\n            rotate([90, 0, 0])\n                windsor_spindle(back_height - 8);\n    }\n    \n    // Stretchers between legs\n    stretcher_height = seat_height - 30;\n    stretcher_positions = [\n        [[-20, -20], [-20, 20]],\n        [[20, -20], [20, 20]],\n        [[-20, -20], [20, -20]],\n        [[-20, 20], [20, 20]]\n    ];\n    for(pos = stretcher_positions) {\n        p1 = pos[0];\n        p2 = pos[1];\n        angle = atan2(p2[1]-p1[1], p2[0]-p1[0]);\n        length = sqrt(pow(p2[0]-p1[0], 2) + pow(p2[1]-p1[1], 2));\n        \n        translate([(p1[0]+p2[0])/2, (p1[1]+p2[1])/2, stretcher_height])\n            rotate([0, 0, angle])\n                rotate([90, 0, 0])\n                    cylinder(h=length-6, d=2.5, $fn=12);\n    }\n}\n\n// Render the chair\nwindsor_chair();",
    "renders": true
  },
  {
    "furniture": "ladderback",
    "openscad_code": "// Ladderback Chair - Realistic Style, Medium Complexity\n// Approx 100mm tall, 3D-printable with 2mm walls\n\n// Parameters\nseat_w = 45;\nseat_d = 42;\nseat_h = 5;\nleg_h = 95;\nleg_w = 4;\nback_h = 35;\nback_post_w = 6;\nrung_d = 3;\n\n// Seat\nmodule seat() {\n    // Main seat panel\n    difference() {\n        cube([seat_w, seat_d, seat_h], center=true);\n        \n        // Light contour on top\n        translate([0, 0, seat_h/2 - 0.5])\n            cube([seat_w - 4, seat_d - 4, 1], center=true);\n    }\n    \n    // Rounded front edge\n    translate([0, seat_d/2, seat_h/2])\n        cylinder(h = 2, r = 2, $fn = 20);\n}\n\n// Leg assembly\nmodule leg(pos_x, pos_y) {\n    translate([pos_x, pos_y, -leg_h/2 + seat_h/2]) {\n        // Main leg post\n        cube([leg_w, leg_w, leg_h], center=true);\n        \n        // Foot detail\n        translate([0, 0, -leg_h/2])\n            cylinder(h = 4, r = 2.5, $fn = 16);\n    }\n}\n\n// Backrest posts\nmodule back_post(pos_x) {\n    translate([pos_x, -seat_d/2 + back_post_w/2, back_h/2 + seat_h/2]) {\n        cube([back_post_w, back_post_w, back_h], center=true);\n    }\n}\n\n// Ladder rungs\nmodule rung(pos_y, pos_z) {\n    translate([0, pos_y, pos_z]) {\n        cube([seat_w - 2*back_post_w, rung_d, rung_d], center=true);\n    }\n}\n\n// Backrest assembly\nmodule backrest() {\n    // Left post\n    back_post(-seat_w/2 + back_post_w/2);\n    \n    // Right post\n    back_post(seat_w/2 - back_post_w/2);\n    \n    // Rungs\n    rung(-seat_d/2 + back_post_w/2 + 3, seat_h/2 + 10);\n    rung(-seat_d/2 + back_post_w/2 + 3, seat_h/2 + 20);\n    rung(-seat_d/2 + back_post_w/2 + 3, seat_h/2 + 30);\n}\n\n// Side rungs\nmodule side_rung(pos_z) {\n    // Left side\n    translate([-seat_w/2 + leg_w/2, 0, pos_z])\n        cube([leg_w, seat_d - leg_w, rung_d], center=true);\n    \n    // Right side\n    translate([seat_w/2 - leg_w/2, 0, pos_z])\n        cube([leg_w, seat_d - leg_w, rung_d], center=true);\n}\n\n// Braces\nmodule brace() {\n    // Front-back braces under seat\n    translate([0, seat_d/2 - leg_w/2, -leg_h/2 + 25])\n        cube([seat_w - 2*leg_w, leg_w, rung_d], center=true);\n    \n    translate([0, -seat_d/2 + leg_w/2, -leg_h/2 + 25])\n        cube([seat_w - 2*leg_w, leg_w, rung_d], center=true);\n}\n\n// Main assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Legs\n    leg(-seat_w/2 + leg_w/2, seat_d/2 - leg_w/2);\n    leg(seat_w/2 - leg_w/2, seat_d/2 - leg_w/2);\n    leg(-seat_w/2 + leg_w/2, -seat_d/2 + leg_w/2);\n    leg(seat_w/2 - leg_w/2, -seat_d/2 + leg_w/2);\n    \n    // Backrest\n    backrest();\n    \n    // Side rungs\n    side_rung(-leg_h/2 + 35);\n    side_rung(-leg_h/2 + 55);\n    \n    // Braces\n    brace();\n}",
    "renders": true
  },
  {
    "furniture": "spindle",
    "openscad_code": "// Realistic spindle chair - medium complexity\n// Overall height ~110 mm, seat ~60 mm diameter, printable without supports\n\n// Parameters\nseat_d = 60;            // Seat diameter\nseat_h = 8;             // Seat thickness\nleg_d = 6;              // Leg diameter\nleg_h = 45;             // Leg height\nback_h = 55;            // Backrest height above seat\nspindle_d = 4;          // Spindle diameter\nback_spindles = 7;      // Number of back spindles\nleg_spread = 45;        // Distance between opposite legs at floor\nwall = 2;               // Wall thickness for 3D printing\n\n// Main chair module\nmodule chair() {\n    union() {\n        seat();\n        legs();\n        backrest();\n    }\n}\n\n// Seat - solid cylinder with slight taper\nmodule seat() {\n    union() {\n        // Main seat\n        cylinder(h=seat_h, d1=seat_d, d2=seat_d*0.95, $fn=64);\n        \n        // Reinforcement ring underneath\n        translate([0, 0, -0.1])\n            cylinder(h=seat_h*0.7, d1=seat_d*0.8, d2=seat_d*0.75, $fn=64);\n    }\n}\n\n// Four legs with stretchers\nmodule legs() {\n    // Calculate leg positions\n    leg_r = leg_spread/2 * 0.707;  // 45 degree positions\n    \n    // Leg positions\n    positions = [\n        [leg_r, leg_r, -leg_h],\n        [-leg_r, leg_r, -leg_h],\n        [-leg_r, -leg_r, -leg_h],\n        [leg_r, -leg_r, -leg_h]\n    ];\n    \n    // Create legs\n    for(pos = positions) {\n        translate(pos)\n            rotate([0, 0, 0])\n                cylinder(h=leg_h, d=leg_d, $fn=32);\n    }\n    \n    // Stretchers between legs\n    stretcher_h = -leg_h/2;\n    \n    // Front stretcher\n    translate([0, leg_r, stretcher_h])\n        cube([leg_spread - leg_d, leg_d, leg_d], center=true);\n    \n    // Back stretcher\n    translate([0, -leg_r, stretcher_h])\n        cube([leg_spread - leg_d, leg_d, leg_d], center=true);\n    \n    // Side stretchers\n    translate([leg_r, 0, stretcher_h])\n        cube([leg_d, leg_spread - leg_d, leg_d], center=true);\n    \n    translate([-leg_r, 0, stretcher_h])\n        cube([leg_d, leg_spread - leg_d, leg_d], center=true);\n}\n\n// Spindle backrest\nmodule backrest() {\n    // Backrest frame\n    frame_w = seat_d * 0.8;\n    frame_t = spindle_d * 1.5;\n    \n    // Bottom rail\n    translate([0, seat_d*0.35, seat_h])\n        cube([frame_w, frame_t, frame_t], center=true);\n    \n    // Top rail\n    translate([0, seat_d*0.35, seat_h + back_h])\n        cube([frame_w, frame_t, frame_t], center=true);\n    \n    // Side posts\n    post_positions = [\n        [-frame_w/2 + frame_t/2, seat_d*0.35, seat_h + back_h/2],\n        [frame_w/2 - frame_t/2, seat_d*0.35, seat_h + back_h/2]\n    ];\n    \n    for(pos = post_positions) {\n        translate(pos)\n            rotate([90, 0, 0])\n                cylinder(h=back_h, d=frame_t, $fn=32);\n    }\n    \n    // Spindles\n    spindle_spacing = (frame_w - frame_t*2) / (back_spindles - 1);\n    \n    for(i = [0 : back_spindles-1]) {\n        x = -frame_w/2 + frame_t + i * spindle_spacing;\n        translate([x, seat_d*0.35 + frame_t/2 - spindle_d/2, seat_h + back_h/2])\n            rotate([90, 0, 0])\n                cylinder(h=back_h - frame_t, d=spindle_d, $fn=16);\n    }\n}\n\n// Assembly\nchair();",
    "renders": true
  }
]