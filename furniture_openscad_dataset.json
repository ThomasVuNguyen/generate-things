[
  {
    "furniture": "chair",
    "openscad_code": "// Realistic 3D-printable chair – medium complexity\n// Overall footprint ~100 mm × 100 mm × 110 mm (H)\n\n// ---------- parameters ----------\nleg_t   = 5;      // leg cross-section\nseat_h  = 8;      // seat thickness\nback_h  = 45;     // backrest height above seat\narm_w   = 4;      // armrest thickness\nwall    = 2;      // 3D-print wall thickness\n\n// ---------- modules ----------\n\n// reusable rounded bar for legs & stretchers\nmodule bar(l, diam, vert=false){\n    translate([0,0, (vert? l/2 : 0)])\n        rotate([vert?0:90,0,0])\n            cylinder(h=l, d=diam, $fn=16);\n}\n\n// seat with gentle cushion contour (no overhangs)\nmodule seat(){\n    difference(){\n        // main seat block\n        translate([0,0,seat_h/2])\n            cube([100,100,seat_h], center=true);\n        // slight recess on top\n        translate([0,0,seat_h-1])\n            cube([90,90,seat_h], center=true);\n    }\n}\n\n// backrest slats\nmodule back_slat(x){\n    translate([x,0,seat_h+back_h/2])\n        cube([4,5,back_h], center=true);\n}\n\n// armrest\nmodule armrest(side){\n    mirror([side,0,0]){\n        // vertical post\n        translate([45+leg_t/2,0,seat_h+20])\n            cube([leg_t,leg_t,40], center=true);\n        // horizontal rest\n        translate([45+leg_t/2+15,0,seat_h+40])\n            cube([30,leg_t,arm_w], center=true);\n    }\n}\n\n// ---------- chair assembly ----------\n\nunion(){\n    // four legs\n    for (x=[-40,40], y=[-40,40]){\n        translate([x,y,0])\n            bar(seat_h, leg_t, vert=true);\n    }\n\n    // front & back stretchers (adds stiffness)\n    translate([0,-40,seat_h/2-20])\n        bar(80, leg_t);\n    translate([0, 40,seat_h/2-20])\n        bar(80, leg_t);\n\n    // seat\n    seat();\n\n    // backrest frame\n    translate([0,42,seat_h+back_h/2])\n        cube([90,leg_t,back_h], center=true);\n    for (x=[-30,-15,0,15,30])\n        back_slat(x);\n\n    // armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "furniture": "sofa",
    "openscad_code": "// Realistic 3D-printable sofa (medium complexity)\n// Overall footprint ≈ 70 mm × 35 mm × 30 mm\n\n// --------------------------------------------------\n// Parameters\nwall = 2;        // 3D-printable wall thickness\nseat_h = 12;     // seat height\nseat_d = 30;     // seat depth\nback_h = 18;     // backrest height above seat\narm_h = 14;      // armrest height above seat\narm_w = 5;       // armrest width\nleg_h = 8;       // leg height\nframe_t = 3;     // frame thickness\ncushion_t = 4;   // cushion thickness\nsofa_w = 70;     // total width\n\n// --------------------------------------------------\n// Utility modules\nmodule rounded_box(w, d, h, r) {\n    translate([r, r, 0])\n    minkowski() {\n        cube([w - 2*r, d - 2*r, h]);\n        cylinder(h = 0.01, r = r, $fn = 16);\n    }\n}\n\nmodule leg(dx, dy) {\n    translate([dx, dy, 0])\n    cylinder(h = leg_h, r = 2.5, $fn = 16);\n}\n\n// --------------------------------------------------\n// Frame\nmodule frame() {\n    difference() {\n        // Outer box frame\n        rounded_box(sofa_w, seat_d + frame_t, seat_h + frame_t, 2);\n        \n        // Hollow inside\n        translate([frame_t, frame_t, frame_t])\n        rounded_box(sofa_w - 2*frame_t,\n                    seat_d - 2*frame_t,\n                    seat_h + frame_t,\n                    2);\n    }\n}\n\n// --------------------------------------------------\n// Backrest\nmodule backrest() {\n    translate([0, -frame_t/2, seat_h])\n    rounded_box(sofa_w, frame_t, back_h, 2);\n}\n\n// --------------------------------------------------\n// Armrests\nmodule armrest(side) {\n    translate([side * (sofa_w/2 - arm_w/2), seat_d/2 - arm_w/2, seat_h])\n    rounded_box(arm_w, arm_w, arm_h, 2);\n}\n\n// --------------------------------------------------\n// Cushions\nmodule cushion(dx, dy, w, d) {\n    translate([dx, dy, seat_h])\n    rounded_box(w, d, cushion_t, 2);\n}\n\n// --------------------------------------------------\n// Legs\nmodule all_legs() {\n    leg(5, 5);\n    leg(sofa_w - 5, 5);\n    leg(5, seat_d - 5);\n    leg(sofa_w - 5, seat_d - 5);\n}\n\n// --------------------------------------------------\n// Assembly\nunion() {\n    frame();\n    backrest();\n    armrest(1);   // left\n    armrest(-1);  // right\n    all_legs();\n    \n    // Seat cushions (3 cushions)\n    for (i = [0:2]) {\n        cushion(5 + i*(sofa_w - 10)/3, 5,\n                (sofa_w - 10)/3 - 1, seat_d - 10);\n    }\n    \n    // Back cushions (3 cushions)\n    for (i = [0:2]) {\n        translate([0, 0, cushion_t])\n        translate([5 + i*(sofa_w - 10)/3,\n                   -frame_t/2 + 2,\n                   seat_h + back_h - cushion_t])\n        rotate([90, 0, 0])\n        rounded_box((sofa_w - 10)/3 - 1,\n                    cushion_t,\n                    back_h - cushion_t,\n                    2);\n    }\n}",
    "renders": true
  },
  {
    "furniture": "bench",
    "openscad_code": "// Realistic bench with medium complexity\n// Overall dimensions: 100mm x 40mm x 45mm (L x W x H)\n\n$fn = 32;\nseat_thickness = 3;\nleg_size = 4;\nbackrest_height = 25;\nslat_width = 8;\nslat_gap = 2;\n\nmodule bench_seat() {\n    // Main seat frame\n    difference() {\n        cube([100, 40, seat_thickness], center=true);\n        \n        // Create slatted effect\n        for (x = [-40:10:40]) {\n            translate([x, 0, -1])\n            cube([slat_gap, 42, seat_thickness + 2]);\n        }\n    }\n}\n\nmodule bench_leg(x_pos, z_pos) {\n    // Vertical leg post\n    translate([x_pos, -15, z_pos]) {\n        cube([leg_size, leg_size, 20 - seat_thickness/2], center=true);\n    }\n    \n    // Horizontal stretcher\n    translate([x_pos, 0, z_pos - 8]) {\n        rotate([90, 0, 0])\n        cylinder(h=30, r=leg_size/2, center=true);\n    }\n    \n    // Foot pad\n    translate([x_pos, -15, z_pos - 10]) {\n        cube([6, 6, 2], center=true);\n    }\n}\n\nmodule bench_backrest() {\n    // Backrest frame\n    translate([0, 18, 10]) {\n        difference() {\n            cube([90, 4, backrest_height], center=true);\n            \n            // Create backrest slats\n            for (x = [-35:10:35]) {\n                translate([x, 0, -1])\n                cube([slat_gap, 6, backrest_height + 2]);\n            }\n        }\n    }\n    \n    // Backrest support posts\n    for (x = [-40:80:80]) {\n        translate([x, 20, 0]) {\n            cube([leg_size, leg_size, 20], center=true);\n        }\n    }\n}\n\nmodule bench_details() {\n    // Corner braces\n    for (x = [-45, 45]) {\n        for (y = [-15, 15]) {\n            translate([x, y, -3]) {\n                rotate([45, 0, 0])\n                cube([3, 3, 10], center=true);\n            }\n        }\n    }\n    \n    // Seat edge rounding\n    translate([0, 0, 1.5]) {\n        cube([102, 42, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bench_seat();\n    \n    // Four legs\n    for (x = [-40, 40]) {\n        bench_leg(x, -seat_thickness/2);\n    }\n    \n    bench_backrest();\n    bench_details();\n}",
    "renders": true
  },
  {
    "furniture": "stool",
    "openscad_code": "// Realistic 3D-printable stool – medium complexity\n// Overall size ≈ 80 mm H × 60 mm seat diameter\n// 2 mm wall thickness everywhere, no overhangs > 45°\n\n// Parameters\n$fn = 32;\nseat_d = 60;           // seat diameter\nseat_h = 4;            // seat thickness\nleg_h = 70;            // leg length (total height 80 incl. seat)\nleg_r = 2.5;           // leg radius\nbrace_h = 8;           // stretcher height\nbrace_t = 2;           // stretcher thickness\nfoot_r = 4;            // foot diameter\nfoot_h = 3;            // foot height\nclear = 0.2;           // clearance for boolean ops\n\n// Seat – round cushion with slight dome\nmodule seat() {\n    union() {\n        cylinder(d = seat_d, h = seat_h, center = false);\n        translate([0, 0, seat_h])\n            scale([1, 1, 0.3])\n            cylinder(d = seat_d, h = 4, center = false);\n    }\n}\n\n// Single round leg with tapered foot\nmodule leg() {\n    union() {\n        cylinder(r = leg_r, h = leg_h);\n        translate([0, 0, leg_h])\n            cylinder(r1 = leg_r, r2 = foot_r/2, h = foot_h);\n    }\n}\n\n// Radial stretcher ring (hidden inside legs for printability)\nmodule stretcher_ring() {\n    difference() {\n        cylinder(h = brace_h, r = seat_d/2 - leg_r - 2);\n        translate([0, 0, -clear])\n            cylinder(h = brace_h + 2*clear, \n                     r = seat_d/2 - leg_r - 2 - brace_t);\n    }\n}\n\n// Assemble four legs around center\nmodule legs() {\n    for(a = [0:90:270])\n        rotate([0, 0, a])\n            translate([seat_d/2 - leg_r - 1, 0, 0])\n                leg();\n}\n\n// Entire stool\nunion() {\n    // Seat on top\n    translate([0, 0, leg_h + foot_h])\n        seat();\n\n    // Legs\n    legs();\n\n    // Stretcher ring inside legs\n    translate([0, 0, leg_h/2 - brace_h/2])\n        stretcher_ring();\n}",
    "renders": true
  },
  {
    "furniture": "ottoman",
    "openscad_code": "// Ottoman with tufted cushion and turned legs\n// Overall size: 100 x 70 x 55 mm (L x W x H)\n\n$fn = 32; // Smooth curves\n\n// Main module\nmodule ottoman() {\n    // Base frame\n    union() {\n        // Cushion\n        translate([0, 0, 45])\n            cushion();\n        \n        // Box\n        translate([0, 0, 20])\n            box();\n        \n        // Legs\n        legs();\n    }\n}\n\n// Tufted cushion\nmodule cushion() {\n    difference() {\n        // Main cushion block\n        translate([0, 0, 2.5])\n            minkowski() {\n                cube([90, 60, 5], center = true);\n                sphere(2.5);\n            }\n        \n        // Tufting buttons\n        for (x = [-30, 0, 30]) {\n            for (y = [-20, 0, 20]) {\n                translate([x, y, 7])\n                    cylinder(h = 3, r1 = 3, r2 = 2);\n            }\n        }\n        \n        // Edge seam\n        translate([0, 0, 4])\n            cube([95, 65, 2], center = true);\n    }\n}\n\n// Storage box\nmodule box() {\n    difference() {\n        // Outer shell\n        cube([95, 65, 40], center = true);\n        \n        // Hollow inside\n        translate([0, 0, -2])\n            cube([91, 61, 40], center = true);\n    }\n}\n\n// Four turned legs\nmodule legs() {\n    for (x = [-35, 35]) {\n        for (y = [-25, 25]) {\n            translate([x, y, 0])\n                leg();\n        }\n    }\n}\n\n// Individual turned leg\nmodule leg() {\n    difference() {\n        union() {\n            // Top block\n            translate([0, 0, 35])\n                cube([12, 12, 5], center = true);\n            \n            // Main turned leg\n            cylinder(h = 35, r1 = 6, r2 = 6);\n            \n            // Decorative rings\n            translate([0, 0, 30]) cylinder(h = 2, r1 = 7, r2 = 7);\n            translate([0, 0, 25]) cylinder(h = 2, r1 = 5, r2 = 5);\n            translate([0, 0, 15]) cylinder(h = 2, r1 = 7, r2 = 7);\n            translate([0, 0, 10]) cylinder(h = 2, r1 = 5, r2 = 5);\n            \n            // Bottom foot\n            translate([0, 0, 0])\n                cylinder(h = 3, r1 = 8, r2 = 6);\n        }\n        \n        // Hollow for material saving\n        translate([0, 0, 3])\n            cylinder(h = 32, r1 = 3, r2 = 3);\n    }\n}\n\n// Generate the ottoman\nottoman();",
    "renders": true
  },
  {
    "furniture": "recliner",
    "openscad_code": "// Recliner armchair – medium-complexity 3D-printable model\n// Dimensions scaled for ~120 mm total length\n\n$fa = 2;\n$fs = 1;\n\nmodule rounded_cube(size, r) {\n    // Simple rounded-corner box using hull of spheres\n    translate([-size.x/2+r, -size.y/2+r, 0])\n    hull() {\n        for(i=[0,1], j=[0,1], k=[0,1])\n            translate([i*(size.x-2*r), j*(size.y-2*r), k*size.z])\n                sphere(r);\n    }\n}\n\n// Seat cushion module\nmodule seat_cushion(w, d, h, r) {\n    difference() {\n        rounded_cube([w, d, h], r);\n        // Slight hollow underneath to reduce weight\n        translate([0, 0, -0.5])\n            rounded_cube([w-4, d-4, h-1], r-1);\n    }\n}\n\n// Backrest cushion module (tilted)\nmodule backrest_cushion(w, h, t, angle) {\n    rotate([angle, 0, 0])\n        seat_cushion(w, t, h, 5);\n}\n\n// Support leg\nmodule leg(h) {\n    cylinder(d1=8, d2=6, h=h, $fn=20);\n}\n\n// Armrest side panel\nmodule armrest_side(w, d, h) {\n    difference() {\n        rounded_cube([w, d, h], 4);\n        // Remove inner volume for wall thickness\n        translate([2, 2, -1])\n            rounded_cube([w-4, d-4, h], 2);\n    }\n}\n\n// Recliner assembly\nunion() {\n    // Seat base\n    translate([0, 0, 20])\n        seat_cushion(60, 50, 12, 6);\n\n    // Backrest (reclined ~15°)\n    translate([0, -22, 32])\n        backrest_cushion(60, 50, 12, 105);\n\n    // Left armrest\n    translate([-35, 0, 20])\n        armrest_side(8, 45, 35);\n\n    // Right armrest\n    translate([35, 0, 20])\n        armrest_side(8, 45, 35);\n\n    // Front legs\n    translate([-20, 20, 0])\n        leg(20);\n    translate([20, 20, 0])\n        leg(20);\n\n    // Rear legs\n    translate([-20, -25, 0])\n        leg(20);\n    translate([20, -25, 0])\n        leg(20);\n\n    // Front footrest support bar\n    translate([0, 30, 10])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=3, $fn=16);\n\n    // Small footrest cushion\n    translate([0, 35, 8])\n        seat_cushion(50, 25, 8, 4);\n}",
    "renders": true
  },
  {
    "furniture": "armchair",
    "openscad_code": "// Realistic Armchair - Medium Complexity\n// Overall dimensions: 80mm(W) x 75mm(D) x 85mm(H)\n// 3D printable with 2mm walls and no overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// Main chair module\nmodule armchair() {\n    // Seat frame\n    difference() {\n        // Outer seat box\n        translate([0, 0, 20]) cube([60, 60, 8], center = true);\n        // Hollow center\n        translate([0, 0, 20]) cube([56, 56, 12], center = true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 26]) scale([1, 1, 0.4]) sphere(d = 58, $fn = 32);\n    \n    // Backrest frame\n    difference() {\n        // Outer backrest\n        translate([0, -27, 50]) cube([58, 6, 50], center = true);\n        // Hollow back\n        translate([0, -27, 50]) cube([54, 10, 46], center = true);\n    }\n    \n    // Backrest cushion\n    translate([0, -25, 50]) scale([1, 0.3, 1]) sphere(d = 54, $fn = 32);\n    \n    // Left armrest\n    translate([-32, 10, 40]) cube([8, 40, 20], center = true);\n    // Left armrest cushion\n    translate([-32, 10, 50]) scale([1, 1, 0.4]) sphere(d = 38, $fn = 32);\n    \n    // Right armrest\n    translate([32, 10, 40]) cube([8, 40, 20], center = true);\n    // Right armrest cushion\n    translate([32, 10, 50]) scale([1, 1, 0.4]) sphere(d = 38, $fn = 32);\n    \n    // Legs - 4 cylindrical supports\n    // Front left leg\n    translate([-25, 25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Front right leg\n    translate([25, 25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Back left leg\n    translate([-25, -25, 10]) cylinder(h = 20, d = 6, center = true);\n    // Back right leg\n    translate([25, -25, 10]) cylinder(h = 20, d = 6, center = true);\n    \n    // Support bars between legs\n    // Front bar\n    translate([0, 25, 2]) cube([50, 4, 4], center = true);\n    // Back bar\n    translate([0, -25, 2]) cube([50, 4, 4], center = true);\n    // Left bar\n    translate([-25, 0, 2]) cube([4, 50, 4], center = true);\n    // Right bar\n    translate([25, 0, 2]) cube([4, 50, 4], center = true);\n    \n    // Decorative back slats\n    for(i = [-20:10:20]) {\n        translate([i, -27, 65]) cube([4, 2, 20], center = true);\n    }\n}\n\n// Generate the armchair\narmchair();",
    "renders": true
  },
  {
    "furniture": "loveseat",
    "openscad_code": "$fn = 30;\n\n// Overall dimensions (in mm, printable scale)\nseat_w = 60;\nseat_d = 30;\nseat_h = 15;\n\nback_h = 30;\narm_w = 8;\narm_h = 20;\nleg_h = 18;\nleg_size = 4;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule loveseat() {\n    // Backrest frame and slats\n    difference() {\n        // Main backrest panel\n        translate([0, -seat_d/2 - wall/2, back_h/2 + seat_h]) \n            cube([seat_w, wall, back_h], center=true);\n        \n        // Decorative cutouts (three horizontal slats)\n        for (i = [-1, 0, 1])\n            translate([0, -seat_d/2 - wall, (seat_h + back_h/2) + i*7]) \n                cube([seat_w - 12, wall + 2, 6], center=true);\n    }\n\n    // Seat cushion (hollow for printing)\n    difference() {\n        translate([0, 0, seat_h/2]) \n            cube([seat_w, seat_d, seat_h], center=true);\n        translate([0, 0, seat_h/2 + wall]) \n            cube([seat_w - 2*wall, seat_d - 2*wall, seat_h - wall], center=true);\n    }\n\n    // Left armrest\n    difference() {\n        translate([-seat_w/2 - arm_w/2, 0, arm_h/2 + seat_h]) \n            cube([arm_w, seat_d, arm_h], center=true);\n        translate([-seat_w/2 - arm_w/2, 0, arm_h/2 + seat_h + wall]) \n            cube([arm_w - wall, seat_d - wall, arm_h - wall], center=true);\n    }\n\n    // Right armrest (mirror of left)\n    difference() {\n        translate([seat_w/2 + arm_w/2, 0, arm_h/2 + seat_h]) \n            cube([arm_w, seat_d, arm_h], center=true);\n        translate([seat_w/2 + arm_w/2, 0, arm_h/2 + seat_h + wall]) \n            cube([arm_w - wall, seat_d - wall, arm_h - wall], center=true);\n    }\n\n    // Front decorative skirt\n    translate([0, seat_d/2 + wall/2, leg_h/2]) \n        cube([seat_w + 2*arm_w, wall, leg_h], center=true);\n\n    // Legs (four tapered legs)\n    module tapered_leg() {\n        difference() {\n            cylinder(h = leg_h, r1 = leg_size/2, r2 = leg_size/2 - 0.5, center=false);\n            translate([0, 0, -1]) \n                cylinder(h = leg_h + 2, r1 = leg_size/2 - wall, r2 = leg_size/2 - wall - 0.5, center=false);\n        }\n    }\n\n    // Position legs at corners\n    translate([-seat_w/2 - arm_w/2 + leg_size/2, -seat_d/2 + leg_size/2, 0]) \n        tapered_leg();\n    translate([seat_w/2 + arm_w/2 - leg_size/2, -seat_d/2 + leg_size/2, 0]) \n        tapered_leg();\n    translate([-seat_w/2 - arm_w/2 + leg_size/2, seat_d/2 - leg_size/2, 0]) \n        tapered_leg();\n    translate([seat_w/2 + arm_w/2 - leg_size/2, seat_d/2 - leg_size/2, 0]) \n        tapered_leg();\n\n    // Back support bars between backrest and seat\n    for (x = [-seat_w/3, 0, seat_w/3]) {\n        translate([x, -seat_d/2 + 2, seat_h/2]) \n            cube([wall, 4, seat_h], center=true);\n    }\n}\n\n// Render the loveseat centered\ntranslate([0, 0, 0]) \n    loveseat();",
    "renders": true
  },
  {
    "furniture": "settee",
    "openscad_code": "// OpenSCAD Settee (Medium complexity, realistic style)\n// Overall footprint: 120 mm (W) × 50 mm (D) × 60 mm (H)\n\n// Parameters\nseat_w = 120;\nseat_d = 50;\nseat_h = 30;\nback_h = 30;\nleg_h = 20;\nleg_sz = 6;\nwall_t = 2;           // 3D-print-friendly wall thickness\n\nmodule settee() {\n    // Left arm-rest\n    translate([-seat_w/2 + leg_sz/2, 0, 0])\n        cube([leg_sz, seat_d, seat_h + back_h], center = true);\n\n    // Right arm-rest (mirror of left)\n    translate([seat_w/2 - leg_sz/2, 0, 0])\n        cube([leg_sz, seat_d, seat_h + back_h], center = true);\n\n    // Front left leg\n    translate([-seat_w/2 + leg_sz/2, seat_d/2 - leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Front right leg\n    translate([seat_w/2 - leg_sz/2, seat_d/2 - leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Rear left leg\n    translate([-seat_w/2 + leg_sz/2, -seat_d/2 + leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Rear right leg\n    translate([seat_w/2 - leg_sz/2, -seat_d/2 + leg_sz/2, -leg_h/2])\n        cube([leg_sz, leg_sz, leg_h], center = true);\n\n    // Seat frame (hollow for printability)\n    difference() {\n        cube([seat_w - 2*leg_sz, seat_d - 2*leg_sz, wall_t], center = true);\n        translate([0, 0, -0.5])\n            cube([seat_w - 2*leg_sz - 2*wall_t, seat_d - 2*leg_sz - 2*wall_t, wall_t + 1], center = true);\n    }\n\n    // Seat cushion (slightly domed via spheres)\n    for (y = [-seat_d/2 + 5, -seat_d/2 + 15, -seat_d/2 + 25, -seat_d/2 + 35, -seat_d/2 + 45]) {\n        for (x = [-seat_w/2 + 15 : 10 : seat_w/2 - 15]) {\n            translate([x, y, seat_h/2 - 1])\n                scale([1, 0.3, 0.7])\n                    sphere(r = 5, $fn = 16);\n        }\n    }\n\n    // Backrest frame\n    difference() {\n        translate([0, -seat_d/2 + wall_t/2, seat_h + back_h/2])\n            cube([seat_w - 2*leg_sz, wall_t, back_h], center = true);\n        translate([0, -seat_d/2 + wall_t/2 - 0.5, seat_h + back_h/2])\n            cube([seat_w - 2*leg_sz - 2*wall_t, wall_t + 1, back_h - 2*wall_t], center = true);\n    }\n\n    // Backrest slats\n    for (x = [-seat_w/2 + 15 : 12 : seat_w/2 - 15]) {\n        translate([x, -seat_d/2 + wall_t/2, seat_h + back_h/2])\n            cube([wall_t, wall_t, back_h - wall_t], center = true);\n    }\n\n    // Decorative front apron\n    translate([0, seat_d/2 - wall_t/2, -leg_h/2 + 2])\n        cube([seat_w - 2*leg_sz - 4, wall_t, leg_h - 4], center = true);\n}\n\nsettee();",
    "renders": true
  },
  {
    "furniture": "divan",
    "openscad_code": "// Realistic medium-complexity 3D-printable divan\n// Overall size: 120 x 50 x 45 mm (L x W x H)\n\n$fn = 32;\n\nmodule divan() {\n    // Main platform / base\n    difference() {\n        translate([0, 0, 2])\n            cube([120, 50, 6], center = true);\n        // Hollow cavity for printability & weight\n        translate([0, 0, 5])\n            cube([116, 46, 4], center = true);\n    }\n\n    // Four legs\n    for (x = [-55, 55])\n        for (y = [-22, 22])\n            translate([x, y, 0])\n                cylinder(h = 12, d = 6, center = false);\n\n    // Backrest frame\n    difference() {\n        translate([0, 20, 25])\n            cube([110, 8, 36], center = true);\n        translate([0, 20, 43])\n            cube([106, 12, 20], center = true);\n    }\n\n    // Backrest slats (7 total, evenly spaced)\n    for (i = [-45:15:45]) {\n        translate([i, 20, 34])\n            cube([10, 8, 20], center = true);\n    }\n\n    // Seat cushion\n    translate([0, 0, 11])\n        cube([110, 46, 6], center = true);\n\n    // Bolster cushion\n    translate([0, -18, 17])\n        rotate([90, 0, 0])\n            cylinder(h = 40, d = 12, center = true);\n\n    // Decorative side panels\n    for (side = [-1, 1]) {\n        translate([side * 60, 0, 5])\n            cube([2, 50, 10], center = true);\n    }\n\n    // Front skirt detail\n    translate([0, -25, 5])\n        cube([110, 2, 8], center = true);\n\n    // Support rail between legs (front & back)\n    for (y = [-22, 22])\n        translate([0, y, 6])\n            cube([110, 2, 2], center = true);\n}\n\n// Render the divan\ndivan();",
    "renders": true
  },
  {
    "furniture": "throne",
    "openscad_code": "// Realistic Throne Chair - Medium Complexity\n// Overall dimensions: ~80mm W x ~85mm D x ~120mm H\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule throne() {\n    // Base platform\n    translate([0,0,10]) \n        cube([70,75,5], center=true);\n    \n    // Legs\n    legs();\n    \n    // Seat base\n    translate([0,0,27])\n        cube([55,50,12], center=true);\n    \n    // Seat cushion\n    translate([0,0,35])\n        scale([1,1,0.3])\n        sphere(r=28);\n    \n    // Backrest assembly\n    backrest();\n    \n    // Armrests\n    armrests();\n    \n    // Decorative elements\n    decorative();\n}\n\n// Four throne legs with stretchers\nmodule legs() {\n    // Front legs\n    for(x=[-25, 25])\n        leg(x, 20);\n    \n    // Rear legs\n    for(x=[-25, 25])\n        leg(x, -20);\n    \n    // Side stretchers\n    for(y=[20,-20])\n        translate([0,y,15])\n            cube([55,2,2], center=true);\n    \n    // Back stretcher\n    translate([0,-20,15])\n        rotate([90,0,0])\n            cylinder(h=50, r=1.5);\n}\n\n// Single leg with foot detail\nmodule leg(x,y) {\n    translate([x,y,0])\n        difference() {\n            // Main leg post\n            cylinder(h=27, r=3);\n            // Foot detail\n            translate([0,0,-1])\n                cylinder(h=5, r=4);\n        }\n}\n\n// High backrest with crown detail\nmodule backrest() {\n    // Main back panel\n    translate([0,-25,65])\n        cube([50,5,70], center=true);\n    \n    // Top crown curve\n    translate([0,-25,100])\n        difference() {\n            cube([55,5,15], center=true);\n            translate([0,0,7.5])\n                sphere(r=27.5);\n        }\n    \n    // Vertical supports\n    for(x=[-20,-10,0,10,20])\n        translate([x,-25,65])\n            cube([3,5,70], center=true);\n    \n    // Horizontal support bars\n    for(z=[40,55,70,85])\n        translate([0,-25,z])\n            cube([50,5,3], center=true);\n}\n\n// Armrest assembly\nmodule armrests() {\n    // Left arm\n    arm(30);\n    \n    // Right arm\n    arm(-30);\n}\n\n// Single armrest\nmodule arm(side) {\n    // Vertical post\n    translate([side,15,27])\n        cylinder(h=25, r=3);\n    \n    // Arm cushion\n    translate([side,15,39])\n        rotate([90,0,0])\n            scale([1,1.5,0.5])\n                cylinder(h=20, r=5);\n    \n    // Support bracket\n    translate([side,15,35])\n        rotate([0,-45,0])\n            cube([3,15,2], center=true);\n}\n\n// Decorative studs and details\nmodule decorative() {\n    // Front studs\n    for(x=[-20,-10,0,10,20])\n        translate([x,25,35])\n            sphere(r=1.5);\n    \n    // Backrest studs\n    for(z=[45,60,75,90])\n        for(x=[-22.5,-7.5,7.5,22.5])\n            translate([x,-27.5,z])\n                sphere(r=1);\n}\n\n// Assembly\nthrone();",
    "renders": true
  },
  {
    "furniture": "chaise",
    "openscad_code": "// Chaise Lounge - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm x 50mm x 45mm\n\n// Main body frame\nmodule chaise_frame() {\n    // Base platform\n    translate([0, 0, 8])\n    cube([120, 50, 4], center=true);\n    \n    // Backrest support frame\n    translate([-45, 0, 20])\n    cube([30, 48, 25], center=true);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([0, side * 22, 12])\n        cube([110, 4, 16], center=true);\n    }\n}\n\n// Chaise cushion with tufted details\nmodule cushion(x_pos, y_pos, z_pos, length, width, height) {\n    // Main cushion body\n    translate([x_pos, y_pos, z_pos])\n    cube([length, width, height], center=true);\n    \n    // Tufted buttons (6 buttons in 2x3 pattern)\n    for(i = [-1, 0, 1]) {\n        for(j = [-1, 1]) {\n            translate([x_pos + i * (length/3.5), y_pos + j * (width/3), z_pos + height/2 + 1])\n            sphere(d=3, $fn=16);\n        }\n    }\n}\n\n// Leg structure with tapered design\nmodule leg(x_pos, y_pos) {\n    // Upper leg block\n    translate([x_pos, y_pos, 4])\n    cube([6, 6, 4], center=true);\n    \n    // Tapered lower leg\n    translate([x_pos, y_pos, 1])\n    cylinder(h=4, r1=3, r2=2, $fn=8);\n}\n\n// Armrest with curved top\nmodule armrest(side) {\n    translate([35, side * 27, 20])\n    rotate([0, 15, 0])\n    cube([30, 8, 12], center=true);\n    \n    // Curved top detail\n    translate([35, side * 27, 27])\n    rotate([0, 15, 0])\n    cylinder(h=30, r=4, $fn=20);\n}\n\n// Backrest cushion with angle\nmodule backrest_cushion() {\n    translate([-45, 0, 29])\n    rotate([105, 0, 0])\n    cube([28, 46, 8], center=true);\n    \n    // Tufted buttons (4 buttons)\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([-45 + i * 8, j * 15, 33])\n            sphere(d=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Frame structure\n    chaise_frame();\n    \n    // Seating cushions\n    cushion(0, 0, 14, 90, 44, 6);\n    \n    // Backrest cushion\n    backrest_cushion();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs (4 corners)\n    leg(50, 20);\n    leg(50, -20);\n    leg(-50, 20);\n    leg(-50, -20);\n    \n    // Middle support legs\n    leg(0, 20);\n    leg(0, -20);\n}\n\n// Optional: Rounded edges on cushions using small cylinders\nfor(side = [-1, 1]) {\n    translate([45, side * 22, 14])\n    rotate([90, 0, 0])\n    cylinder(h=44, r=2, $fn=8);\n    \n    translate([-45, side * 22, 14])\n    rotate([90, 0, 0])\n    cylinder(h=44, r=2, $fn=8);\n}",
    "renders": true
  },
  {
    "furniture": "settle",
    "openscad_code": "// Settle - a traditional wooden bench with high back and arms\n// Overall dimensions: 120mm wide x 50mm deep x 90mm high\n// Wall thickness: 2mm for 3D printing\n\nmodule settle() {\n    // Main seat frame\n    difference() {\n        // Solid seat block\n        translate([0, 0, 40])\n            cube([120, 50, 12], center=true);\n        \n        // Hollow out seat for printability\n        translate([0, 0, 42])\n            cube([116, 46, 10], center=true);\n    }\n    \n    // Backrest assembly\n    module backrest() {\n        // Main backrest panel\n        difference() {\n            translate([0, -22, 85])\n                cube([116, 6, 90], center=true);\n            // Hollow out backrest\n            translate([0, -22, 85])\n                cube([112, 2, 86], center=true);\n        }\n        \n        // Vertical slats for traditional look\n        for(i = [-40:20:40]) {\n            translate([i, -22, 85])\n                cube([8, 6, 86], center=true);\n        }\n    }\n    \n    // Left armrest\n    module armrest(side) {\n        // Armrest post\n        translate([side*57, -15, 65])\n            cube([6, 40, 50], center=true);\n        \n        // Armrest top\n        translate([side*57, 0, 88])\n            cube([10, 30, 4], center=true);\n    }\n    \n    // Legs\n    module leg(x, z) {\n        translate([x, z, 20])\n            cube([8, 8, 40], center=true);\n    }\n    \n    // Base stretchers\n    module stretcher() {\n        // Front stretcher\n        translate([0, 20, 5])\n            cube([110, 4, 8], center=true);\n        \n        // Back stretcher\n        translate([0, -20, 5])\n            cube([110, 4, 8], center=true);\n        \n        // Side stretchers\n        translate([57, 0, 5])\n            rotate([0, 0, 90])\n            cube([40, 4, 8], center=true);\n        \n        translate([-57, 0, 5])\n            rotate([0, 0, 90])\n            cube([40, 4, 8], center=true);\n    }\n    \n    // Assembly\n    backrest();\n    \n    armrest(1);  // Right arm\n    armrest(-1); // Left arm\n    \n    // Four legs\n    leg(50, 20);\n    leg(-50, 20);\n    leg(50, -20);\n    leg(-50, -20);\n    \n    stretcher();\n    \n    // Decorative panel on backrest top\n    translate([0, -22, 130])\n        cube([100, 6, 6], center=true);\n}\n\n// Create the settle\nsettle();",
    "renders": true
  },
  {
    "furniture": "pew",
    "openscad_code": "// Realistic Pew - Medium Complexity\n// Overall dimensions: 120mm L x 40mm W x 50mm H\n\n$fn = 50;  // Smooth curves\n\nmodule pew() {\n    // Main seat plank\n    translate([0, 0, 35])\n        cube([120, 40, 4], center = true);\n\n    // Backrest\n    translate([0, 15, 47])\n        cube([120, 4, 24], center = true);\n\n    // Backrest supports - vertical slats\n    for(i = [-50:25:50]) {\n        translate([i, 15, 47])\n            cube([6, 4, 24], center = true);\n    }\n\n    // Left side frame\n    translate([-60, 0, 25]) {\n        // Front leg\n        cube([4, 4, 35], center = true);\n        // Rear leg\n        translate([0, 30, 0])\n            cube([4, 4, 35], center = true);\n        // Top support\n        translate([0, 15, 12])\n            cube([4, 30, 4], center = true);\n        // Bottom stretcher\n        translate([0, 15, -12])\n            cube([4, 30, 4], center = true);\n    }\n\n    // Right side frame (mirrored)\n    mirror([1, 0, 0])\n        translate([-60, 0, 25]) {\n            // Front leg\n            cube([4, 4, 35], center = true);\n            // Rear leg\n            translate([0, 30, 0])\n                cube([4, 4, 35], center = true);\n            // Top support\n            translate([0, 15, 12])\n                cube([4, 30, 4], center = true);\n            // Bottom stretcher\n            translate([0, 15, -12])\n                cube([4, 30, 4], center = true);\n        }\n\n    // Center support beam\n    translate([0, 0, 17])\n        cube([120, 4, 4], center = true);\n\n    // Decorative end caps on legs\n    for(x = [-60, 60])\n        for(y = [-20, 20]) {\n            translate([x, y, 0])\n                cylinder(h = 4, r = 2, center = true);\n        }\n\n    // Armrests\n    translate([-60, 0, 42])\n        cube([4, 40, 4], center = true);\n    translate([60, 0, 42])\n        cube([4, 40, 4], center = true);\n}\n\n// Create the pew\npew();",
    "renders": true
  },
  {
    "furniture": "rocker",
    "openscad_code": "// Rocking chair for 3D printing\n// Overall height ≈ 70 mm, width ≈ 55 mm, depth ≈ 90 mm\n// Wall thickness ≈ 2 mm\n\n// General parameters\n$fn = 32;                       // Smooth curves\nwall = 2;                       // Standard wall thickness\n\n// Seat dimensions\nseat_w = 55;\nseat_d = 45;\nseat_h = 8;\n\n// Backrest dimensions\nback_h = 30;\nback_th = 4;\n\n// Rockers\nrocker_r = 25;\nrocker_w = seat_w + wall*2;\n\n// Leg height (measured vertically)\nleg_h = 25;\n\n// Helper: rounded cube for printable edges\nmodule roundedCube(size, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([r, r, size.z-r]) sphere(r);\n        translate([r, size.y-r, r]) sphere(r);\n        translate([r, size.y-r, size.z-r]) sphere(r);\n        translate([size.x-r, r, r]) sphere(r);\n        translate([size.x-r, r, size.z-r]) sphere(r);\n        translate([size.x-r, size.y-r, r]) sphere(r);\n        translate([size.x-r, size.y-r, size.z-r]) sphere(r);\n    }\n}\n\n// Seat shell\nmodule seat() {\n    difference() {\n        roundedCube([seat_w, seat_d, seat_h], 4);\n        translate([wall, wall, wall])\n            roundedCube([seat_w-wall*2, seat_d-wall*2, seat_h+1], 2);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    difference() {\n        union() {\n            // Frame\n            roundedCube([seat_w, wall, back_h], 2);\n            // Top bar\n            translate([0, wall, back_h-wall])\n                roundedCube([seat_w, back_th-wall, wall], 2);\n        }\n        // Hollow\n        translate([wall, wall*2, wall])\n            roundedCube([seat_w-wall*2, wall-1, back_h-wall*2], 1);\n    }\n    // Slats\n    for (z = [wall*2 : 5 : back_h-wall*3]) {\n        translate([wall, wall, z])\n            roundedCube([seat_w-wall*2, back_th-wall*2, wall], 1);\n    }\n}\n\n// Legs (vertical supports)\nmodule leg(x) {\n    translate([x, 0, 0])\n        roundedCube([wall, seat_d, leg_h], 2);\n}\n\n// Rockers (curved runners)\nmodule rocker() {\n    // Left rocker\n    translate([0, -wall, 0])\n        difference() {\n            hull() {\n                // Front arc\n                translate([rocker_r, wall, rocker_r])\n                    rotate([90,0,0])\n                        cylinder(h = wall, r = rocker_r);\n                // Rear arc\n                translate([rocker_r, 0, rocker_r])\n                    rotate([-90,0,0])\n                        cylinder(h = wall, r = rocker_r);\n            }\n            // Hollow\n            hull() {\n                translate([rocker_r, -1, rocker_r])\n                    rotate([90,0,0])\n                        cylinder(h = wall+2, r = rocker_r-wall);\n                translate([rocker_r, wall+1, rocker_r])\n                    rotate([-90,0,0])\n                        cylinder(h = wall+2, r = rocker_r-wall);\n            }\n        }\n    // Mirror for right rocker\n    translate([rocker_w, 0, 0])\n        mirror([1,0,0])\n            children();\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_h])\n        seat();\n\n    // Backrest\n    translate([0, wall, leg_h+seat_h])\n        backrest();\n\n    // Legs\n    leg(0);\n    leg(seat_w-wall);\n\n    // Rockers\n    translate([-rocker_r/2, 0, 0])\n        rocker();\n}",
    "renders": true
  }
]