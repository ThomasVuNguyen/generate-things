[
  {
    "natural_object": "rock",
    "openscad_code": "// Rock-inspired stool / side table\n// Overall footprint ~120 mm diameter, 60 mm high\n// 2 mm wall thickness for 3D printing\n\nmodule rock_stool() {\n    // Base plate (hidden, gives bottom a flat surface for printing)\n    difference() {\n        cylinder(h = 4, d = 120, $fn = 60);\n        translate([0, 0, -1]) cylinder(h = 6, d = 118, $fn = 60);\n    }\n\n    // Central hollow cylinder for weight reduction and even walls\n    difference() {\n        cylinder(h = 56, d = 118, $fn = 60);\n        translate([0, 0, 2]) cylinder(h = 52, d = 114, $fn = 60);\n    }\n\n    // Generate a ring of irregular rock lobes\n    for (a = [0:30:360]) {\n        rotate([0, 0, a]) {\n            translate([rand(46, 52), 0, rand(12, 18)])\n                scale([rand(0.8, 1.2), rand(0.8, 1.2), rand(0.8, 1.2)])\n                    rock_lobe();\n        }\n    }\n\n    // Top sitting surface\n    difference() {\n        cylinder(h = 4, d = 120, $fn = 60);\n        translate([0, 0, 2]) cylinder(h = 2, d = 116, $fn = 60);\n    }\n}\n\n// Single rock lobe primitive (organic, low-profile)\nmodule rock_lobe() {\n    // Main lobe\n    difference() {\n        union() {\n            // Core lobe\n            scale([1, 1, 0.6]) sphere(d = 18, $fn = 20);\n\n            // Ridge detail\n            rotate([90, 0, 0])\n                translate([0, 0, -2])\n                    scale([1, 0.3, 0.3])\n                        cylinder(h = 12, d1 = 10, d2 = 6, $fn = 8);\n        }\n\n        // Small cavities for texture\n        for (p = [[-3, 2, 2], [2, -2, 1.5], [-1, -3, 2.5]]) {\n            translate(p)\n                sphere(d = rand(3, 5), $fn = 8);\n        }\n    }\n}\n\n// Helper: pseudo-random in range\nfunction rand(min, max) = min + (max - min) * (sin(123 * $fn) * 0.5 + 0.5);\n\nrock_stool();",
    "renders": true
  },
  {
    "natural_object": "stone",
    "openscad_code": "// Stone bench - realistic style, medium complexity\n// Rough-hewn stone furniture piece with natural texture and structural supports\n\nmodule stone_texture(x,y,z,freq,amp){\n    // Creates organic rock surface texture with small bumps\n    for(i=[0:freq:x]){\n        for(j=[0:freq:y]){\n            for(k=[0:freq:z]){\n                translate([i,j,k]){\n                    sphere(r=amp,$fn=6);\n                }\n            }\n        }\n    }\n}\n\nmodule stone_block(x,y,z,roughness){\n    // Main stone block with irregular surface\n    difference(){\n        union(){\n            // Base rectangular form\n            cube([x,y,z], center=true);\n            \n            // Add surface texture\n            translate([-x/2,-y/2,-z/2]){\n                stone_texture(x,y,z,5,roughness);\n            }\n        }\n        \n        // Remove some material for natural wear\n        for(i=[0:30]){\n            rotate([rand(360),rand(360),rand(360)]){\n                translate([rand(x)-x/2,rand(y)-y/2,rand(z)-z/2]){\n                    sphere(r=rand(3)+1,$fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule bench_legs(){\n    // Four supporting stone legs with taper\n    leg_positions = [[-35, -15], [35, -15], [-35, 15], [35, 15]];\n    \n    for(pos = leg_positions){\n        translate([pos[0], pos[1], -20]){\n            difference(){\n                // Tapered leg\n                cylinder(h1=15, h2=12, r1=6, r2=8, $fn=8);\n                \n                // Carve natural indentations\n                for(i=[0:4]){\n                    rotate([0,0,i*90]){\n                        translate([3,0,5]){\n                            cube([8,3,10], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule seat_plank(){\n    // Main seating surface with natural stone appearance\n    translate([0,0,0]){\n        difference(){\n            union(){\n                // Basic seat shape\n                cube([80,40,8], center=true);\n                \n                // Front edge detail\n                translate([0,20,0]){\n                    cube([82,2,6], center=true);\n                }\n                \n                // Back edge detail\n                translate([0,-20,0]){\n                    cube([82,2,6], center=true);\n                }\n            }\n            \n            // Carve seating depression\n            translate([0,0,3]){\n                cube([74,34,4], center=true);\n            }\n            \n            // Drainage grooves\n            for(i=[-30:10:30]){\n                translate([i,0,4]){\n                    cube([2,36,1], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule support_beam(){\n    // Central support beam between legs\n    translate([0,0,-10]){\n        cube([70,15,5], center=true);\n    }\n}\n\n// Main assembly\nunion(){\n    color([0.5,0.5,0.5]){ // Stone gray\n    \n        // Seat\n        seat_plank();\n        \n        // Leg structure\n        bench_legs();\n        \n        // Support beam\n        support_beam();\n        \n        // Side reinforcement blocks\n        translate([-40,0,-15]){\n            rotate([0,10,0]){\n                stone_block(10,8,20,1.5);\n            }\n        }\n        \n        translate([40,0,-15]){\n            rotate([0,-10,0]){\n                stone_block(10,8,20,1.5);\n            }\n        }\n        \n        // Corner brackets\n        corner_positions = [[-38, -18], [38, -18], [-38, 18], [38, 18]];\n        for(pos = corner_positions){\n            translate([pos[0], pos[1], -2]){\n                difference(){\n                    cube([6,6,6], center=true);\n                    cylinder(h=8, r=2, $fn=8, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Add natural weathering marks\nfor(i=[0:8]){\n    color([0.3,0.3,0.3]){\n        translate([rand(80)-40,rand(40)-20,rand(6)-3]){\n            sphere(r=rand(2)+0.5,$fn=6);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "pebble",
    "openscad_code": "// Pebble Bench - Realistic Style\n// A smooth, organic bench resembling a large river pebble split in half\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 50;  // Smooth curves for printing\n\n// Overall dimensions\nbench_length = 120;\nbench_width = 60;\nbench_height = 45;\n\nmodule pebble_bench() {\n    // Create the main pebble shape\n    difference() {\n        // Outer smooth pebble shape\n        scale([1, 0.7, 0.6])\n        sphere(d = bench_length);\n        \n        // Hollow out the bottom for weight reduction\n        translate([0, 0, -5])\n        scale([0.9, 0.6, 0.4])\n        sphere(d = bench_length - 4);\n    }\n    \n    // Add the seat surface (flat top)\n    difference() {\n        // Main seat platform\n        translate([0, 0, bench_height - 8])\n        scale([1, 1, 0.3])\n        sphere(d = bench_length * 0.9);\n        \n        // Create ergonomic depression\n        translate([0, 0, bench_height - 4])\n        scale([0.8, 0.7, 0.2])\n        sphere(d = bench_length * 0.7);\n    }\n    \n    // Structural support ribs inside\n    for (i = [-bench_length/3, 0, bench_length/3]) {\n        translate([i, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h = bench_width * 0.6, d = 4, $fn = 6);\n    }\n    \n    // Add four legs with pebble-like feet\n    leg_positions = [\n        [-bench_length/3, -bench_width/3],\n        [-bench_length/3, bench_width/3],\n        [bench_length/3, -bench_width/3],\n        [bench_length/3, bench_width/3]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], 0])\n        scale([1, 0.8, 0.6])\n        sphere(d = 20);\n        \n        // Connect legs to bench with smooth transitions\n        translate([pos[0], pos[1], 10])\n        cylinder(h = 15, d1 = 20, d2 = 15);\n    }\n    \n    // Add subtle surface texture\n    for (i = [1:12]) {\n        angle = i * 30;\n        radius = bench_length/2 * 0.95;\n        \n        translate([\n            cos(angle) * radius * 0.3,\n            sin(angle) * radius * 0.3,\n            bench_height - 6\n        ])\n        sphere(d = 3);\n    }\n    \n    // Drainage holes for outdoor use\n    for (i = [-bench_length/4, 0, bench_length/4]) {\n        translate([i, 0, bench_height - 10])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 4);\n    }\n}\n\n// Assembly\npebble_bench();\n\n// Add subtle edge beveling for printability\ntranslate([0, 0, bench_height - 8])\nscale([1.02, 1.02, 0.1])\nsphere(d = bench_length * 0.85);",
    "renders": true
  },
  {
    "natural_object": "boulder",
    "openscad_code": "// Boulder Bench - Realistic style, medium complexity\n// Overall dimensions: 100mm x 80mm x 50mm\n\n$fn = 50;\n\n// Main boulder body with organic shape\nmodule boulder_body() {\n    // Base elliptical form\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(d = 90);\n        \n        // Carve out seating area\n        translate([0, 0, 10]) {\n            scale([0.9, 0.8, 0.6]) sphere(d = 90);\n        }\n        \n        // Remove bottom for flat base\n        translate([0, 0, -45]) cube([200, 200, 50], center = true);\n    }\n}\n\n// Add surface irregularities for realism\nmodule surface_details() {\n    // Random bumps and dents\n    for(i = [0:15:360]) {\n        rotate([0, 0, i]) {\n            translate([35 * sin(i), 25 * cos(i), 15]) {\n                sphere(d = 5 + 3 * sin(i * 3));\n            }\n        }\n    }\n    \n    // Small crevice details\n    for(a = [30, 150, 270]) {\n        rotate([0, 0, a]) {\n            translate([20 * cos(a * 2), 15 * sin(a * 2), 5]) {\n                difference() {\n                    sphere(d = 8);\n                    translate([0, 0, 5]) sphere(d = 7);\n                }\n            }\n        }\n    }\n}\n\n// Structural support frame inside\nmodule support_frame() {\n    // Central pillar\n    translate([0, 0, -25]) {\n        cylinder(h = 50, d = 20);\n    }\n    \n    // Radial supports\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle]) {\n            translate([15, 0, -25]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 30, d = 8);\n                }\n            }\n        }\n    }\n}\n\n// Legs for furniture stability\nmodule legs() {\n    // Four legs at corners\n    positions = [[-35, -25], [35, -25], [35, 25], [-35, 25]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], -50]) {\n            // Tapered leg\n            cylinder(h1 = 25, h2 = 15, d1 = 12, d2 = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main boulder structure\n    boulder_body();\n    \n    // Add surface texture\n    surface_details();\n    \n    // Internal support\n    support_frame();\n    \n    // Furniture legs\n    legs();\n}",
    "renders": true
  },
  {
    "natural_object": "crystal",
    "openscad_code": "// Crystal side table (50 mm side length, 75 mm height)\n// Realistic style with 2 mm wall thickness for 3D printing\n\nwall = 2;          // minimum wall thickness for printing\nbase = 50;         // table top edge length\nheight = 75;       // total height\n\n// Table top – hollow crystal plate with bevelled edges\nmodule tabletop() {\n    difference() {\n        // outer crystal plate\n        linear_extrude(height = wall * 1.5)\n            offset(r = 2)\n                offset(delta = -2)\n                    square([base, base], center = true);\n\n        // inner cavity for hollowing\n        translate([0, 0, -0.1])\n            linear_extrude(height = wall * 1.8)\n                offset(r = 1)\n                    offset(delta = -(wall + 2))\n                        square([base - 8, base - 8], center = true);\n    }\n}\n\n// Single crystal prism leg with slight taper\nmodule leg() {\n    hull() {\n        // lower point\n        translate([0, 0, 0])\n            cylinder(h = 2, d1 = 2, d2 = 0.1, $fn = 6);\n        // middle prism\n        translate([0, 0, height * 0.5 - 5])\n            cylinder(h = 10, d1 = 5, d2 = 4, $fn = 6);\n        // upper connection\n        translate([0, 0, height - 2])\n            cylinder(h = 4, d1 = 4, d2 = 6, $fn = 6);\n    }\n}\n\n// Reinforcing crystal strut between legs\nmodule strut(len) {\n    rotate([0, 90, 0])\n        cylinder(h = len, d = 3, $fn = 6);\n}\n\n// Mounting frame under tabletop (hidden)\nmodule frame() {\n    difference() {\n        // outer frame\n        cube([base - 4, base - 4, wall * 2], center = true);\n        // inner hollow\n        cube([base - 8, base - 8, wall * 2.5], center = true);\n    }\n}\n\n// Assemble the table\nunion() {\n    // table top\n    translate([0, 0, height])\n        tabletop();\n\n    // hidden frame under top\n    translate([0, 0, height - wall])\n        frame();\n\n    // four crystal legs\n    for (dx = [-1, 1])\n        for (dy = [-1, 1])\n            translate([dx * (base/2 - 6), dy * (base/2 - 6), 0])\n                leg();\n\n    // diagonal struts for stability\n    strut_len = sqrt(pow(base - 12, 2) + pow(base - 12, 2));\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([base/2 - 6, 0, height * 0.4])\n                strut(strut_len - 8);\n}",
    "renders": true
  },
  {
    "natural_object": "quartz",
    "openscad_code": "// Quartz coffee table with natural crystal top and metal frame\n// Overall dimensions: 120mm x 80mm x 45mm\n\n$fn = 32;\n\nmodule quartz_crystal(x, y, z, size, rotation) {\n    // Main crystal body\n    translate([x, y, z])\n    rotate([0, 0, rotation])\n    scale([1, 1, 1.5])\n    difference() {\n        // Hexagonal prism base\n        cylinder(h = size * 1.2, r = size/2, $fn = 6);\n        \n        // Faceted top\n        translate([0, 0, size * 1.1])\n        cylinder(h = size * 0.8, r1 = size/2, r2 = 0, $fn = 6);\n    }\n    \n    // Side crystals\n    for(i = [0:60:300]) {\n        translate([x + cos(i) * size/3, y + sin(i) * size/3, z])\n        rotate([0, 0, i + rotation])\n        scale([0.3, 0.3, 0.8])\n        cylinder(h = size * 0.6, r1 = size/4, r2 = 0, $fn = 6);\n    }\n}\n\nmodule table_frame() {\n    // Metal frame base\n    difference() {\n        // Main frame rectangle\n        cube([120, 80, 3]);\n        \n        // Hollow center\n        translate([2, 2, -1])\n        cube([116, 76, 5]);\n    }\n    \n    // Legs - cylindrical supports\n    for(pos = [[10, 10], [110, 10], [10, 70], [110, 70]]) {\n        translate([pos[0], pos[1], -42])\n        cylinder(h = 42, r = 4);\n    }\n    \n    // Cross supports\n    translate([60, 5, -20])\n    rotate([90, 0, 0])\n    cylinder(h = 110, r = 2);\n    \n    translate([60, 75, -20])\n    rotate([90, 0, 0])\n    cylinder(h = 110, r = 2);\n    \n    translate([5, 40, -20])\n    rotate([0, 90, 0])\n    cylinder(h = 70, r = 2);\n    \n    translate([115, 40, -20])\n    rotate([0, 90, 0])\n    cylinder(h = 70, r = 2);\n}\n\nmodule quartz_cluster() {\n    // Create cluster of crystals for table top\n    for(i = [0:4]) {\n        angle = i * 72;\n        radius = 15 + (i % 2) * 10;\n        quartz_crystal(\n            cos(angle) * radius, \n            sin(angle) * radius, \n            3, \n            8 + (i % 3) * 3, \n            angle + 30\n        );\n    }\n    \n    // Central large crystal\n    quartz_crystal(0, 0, 3, 12, 0);\n    \n    // Smaller accent crystals\n    for(j = [0:8]) {\n        angle = j * 40;\n        radius = 25 + (j % 3) * 5;\n        quartz_crystal(\n            cos(angle) * radius * 0.7, \n            sin(angle) * radius * 0.7, \n            3, \n            4 + (j % 2) * 2, \n            angle + 15\n        );\n    }\n}\n\n// Assembly\nunion() {\n    // Frame\n    color(\"silver\")\n    table_frame();\n    \n    // Quartz top\n    color([0.9, 0.9, 0.85])\n    translate([0, 0, 3])\n    quartz_cluster();\n}",
    "renders": true
  },
  {
    "natural_object": "geode",
    "openscad_code": "// Geode Side Table (Realistic Style)\n// Dimensions: 120mm diameter, 350mm height\n// Wall thickness: 2mm throughout\n\n$fn = 50;\n\nmodule geode_table() {\n    // Base structure - hollow cone for stability\n    difference() {\n        cylinder(h=40, r1=50, r2=35, center=false);\n        translate([0, 0, 2])\n            cylinder(h=38, r1=48, r2=33, center=false);\n    }\n    \n    // Central support column\n    translate([0, 0, 40]) {\n        difference() {\n            cylinder(h=250, r=15, center=false);\n            translate([0, 0, 2])\n                cylinder(h=246, r=13, center=false);\n        }\n    }\n    \n    // Geode top - split sphere\n    translate([0, 0, 290]) {\n        // Outer shell - top half\n        difference() {\n            scale([1, 1, 0.6])\n                sphere(r=60);\n            translate([0, 0, -2])\n                scale([0.97, 0.97, 0.6])\n                    sphere(r=60);\n        }\n        \n        // Crystalline interior\n        translate([0, 0, -10]) {\n            // Main crystal cluster\n            for(i = [0:15:360]) {\n                rotate([0, 0, i])\n                    translate([random(5, 35), 0, 0])\n                        rotate([random(-30, 30), random(-30, 30), 0])\n                            crystal();\n            }\n            \n            // Central large crystals\n            translate([0, 0, 5])\n                scale([1.5, 1.5, 2])\n                    crystal();\n            translate([20, 0, 10])\n                rotate([0, 15, 0])\n                    crystal();\n            translate([-20, 0, 8])\n                rotate([0, -15, 0])\n                    crystal();\n        }\n        \n        // Rim detail\n        translate([0, 0, -12])\n            difference() {\n                cylinder(h=4, r=60, center=false);\n                cylinder(h=4, r=58, center=false);\n            }\n    }\n    \n    // Support brackets\n    for(i = [0:120:360]) {\n        rotate([0, 0, i])\n            translate([35, 0, 200])\n                bracket();\n    }\n}\n\nmodule crystal() {\n    // Individual crystal formation\n    hull() {\n        translate([0, 0, 0])\n            sphere(r=3);\n        translate([0, 0, random(8, 15)])\n            scale([0.3, 0.3, 1])\n                sphere(r=2);\n    }\n}\n\nmodule bracket() {\n    // Triangular support bracket\n    linear_extrude(height=8, center=false)\n        polygon(points=[\n            [0, 0],\n            [20, 0],\n            [10, 30]\n        ]);\n}\n\n// Assembly\ngeode_table();",
    "renders": true
  },
  {
    "natural_object": "seashell",
    "openscad_code": "// Seashell-inspired accent stool\n// Overall size: 120mm diameter x 180mm height\n\nmodule shell_whirl(height, radius, thickness, steps) {\n    // Build a spiral shell with hollow interior\n    hull() {\n        for (i = [0 : steps-1]) {\n            angle = i * 360 / steps;\n            current_height = height * (i / steps);\n            current_radius = radius * (1 - i / (steps * 1.5));\n            rotate([0, 0, angle])\n                translate([current_radius, 0, current_height])\n                    sphere(thickness, $fn=12);\n        }\n    }\n}\n\nmodule shell_base() {\n    // Solid base for structural strength\n    cylinder(h=15, r1=60, r2=50, $fn=48);\n}\n\nmodule seating_surface() {\n    // Comfortable seating surface with shell texture\n    difference() {\n        cylinder(h=8, r1=55, r2=50, $fn=48);\n        \n        // Create scalloped edge pattern\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([45, 0, -1])\n                    cube([15, 3, 10], center=true);\n        }\n        \n        // Hollow center for weight reduction\n        cylinder(h=10, r1=20, r2=15, $fn=32);\n    }\n}\n\nmodule shell_ridges() {\n    // Add spiral ridges for realistic shell appearance\n    linear_extrude(height=2, twist=30)\n        difference() {\n            circle(55, $fn=48);\n            circle(53, $fn=48);\n        }\n}\n\nmodule seating_support() {\n    // Central support column with spiral reinforcement\n    difference() {\n        cylinder(h=100, r1=25, r2=20, $fn=32);\n        \n        // Lightening holes for material savings\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([12, 0, 50])\n                    cylinder(h=80, r=8, $fn=12);\n        }\n    }\n}\n\nmodule spiral_reinforcement() {\n    // Add spiral ribs for strength and aesthetics\n    for(i=[0:180:45]) {\n        rotate([90, 0, i])\n            translate([0, -25, 0])\n                rotate_extrude(angle=360, $fn=24)\n                    translate([25, 0])\n                        polygon(points=[[0,0], [2,0], [2,100], [0,100]]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    shell_base();\n    \n    // Central support\n    translate([0, 0, 15])\n        seating_support();\n    \n    // Spiral reinforcement\n    translate([0, 0, 15])\n        spiral_reinforcement();\n    \n    // Seating surface\n    translate([0, 0, 115])\n        seating_surface();\n    \n    // Main shell structure\n    translate([0, 0, 123])\n        shell_whirl(height=55, radius=60, thickness=2, steps=20);\n    \n    // Add ridges to shell\n    for(h=[0:10:50]) {\n        translate([0, 0, 123+h])\n            scale([1-h/100, 1-h/100, 1])\n                shell_ridges();\n    }\n    \n    // Final shell cap\n    translate([0, 0, 178])\n        scale([0.4, 0.4, 1])\n            cylinder(h=2, r1=60, r2=0, $fn=48);\n}",
    "renders": true
  },
  {
    "natural_object": "conch",
    "openscad_code": "// Conch shell chair with realistic proportions and structural elements\n// Overall dimensions: ~120mm height, ~100mm width, ~120mm depth\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main shell body module\nmodule shell_body() {\n    // Base spiral structure\n    difference() {\n        // Main spiral shape\n        union() {\n            for (i = [0:15:360]) {\n                rotate([0, 0, i]) \n                    translate([i*0.12, 0, i*0.08]) \n                        scale([1, 0.8, 1]) \n                            sphere(d = 35 - i*0.05);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            cylinder(h = 80, d1 = 25, d2 = 15, center = false);\n    }\n}\n\n// Flared opening edge\nmodule shell_lip() {\n    difference() {\n        // Outer lip\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([25, 0])\n                circle(r = 8);\n        \n        // Inner lip\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([20, 0])\n                circle(r = 6);\n    }\n}\n\n// Structural ribs for strength\nmodule support_ribs() {\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, 10])\n                linear_extrude(height = 60, twist = -30)\n                    square([2, 30], center = true);\n        }\n    }\n}\n\n// Chair legs from shell base\nmodule shell_legs() {\n    // Front legs\n    for (x = [-20:40:20]) {\n        translate([x, 30, -15])\n            cylinder(h = 40, d = 6, center = false);\n    }\n    \n    // Rear support leg\n    translate([0, -25, -15])\n        cylinder(h = 40, d = 8, center = false);\n}\n\n// Natural texture ridges\nmodule shell_ridges() {\n    for (height = [10:5:70]) {\n        translate([0, 0, height])\n            rotate_extrude($fn = 32)\n                translate([20 + height*0.2, 0])\n                    circle(r = 1.5);\n    }\n}\n\n// Seat surface\nmodule seat_surface() {\n    difference() {\n        // Main seat\n        translate([0, 0, 65])\n            scale([1, 0.8, 0.3])\n                sphere(d = 45);\n        \n        // Ergonomic contour\n        translate([0, 0, 70])\n            scale([0.6, 0.5, 0.2])\n                sphere(d = 35);\n    }\n}\n\n// Backrest curve\nmodule backrest() {\n    rotate([15, 0, 0])\n        translate([0, -15, 70])\n            scale([1, 0.6, 1.2])\n                sphere(d = 35);\n}\n\n// Assembly\nunion() {\n    // Main shell structure\n    shell_body();\n    \n    // Structural additions\n    translate([0, 0, 5])\n        shell_lip();\n    \n    support_ribs();\n    \n    // Furniture elements\n    seat_surface();\n    backrest();\n    \n    // Legs\n    shell_legs();\n    \n    // Decorative ridges\n    shell_ridges();\n}\n\n// Base plate for stability\ntranslate([0, 0, -15])\n    cube([80, 70, 2], center = true);",
    "renders": true
  },
  {
    "natural_object": "seashell_scallop",
    "openscad_code": "// Scallop Shell Stool\n// Realistic style, medium complexity\n// Dimensions: ~120mm diameter, ~45mm height\n\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 1;\n\nmodule scallop_shell(radius, height) {\n    // Main shell body with scalloped edges\n    difference() {\n        // Base shell dome\n        scale([1, 1, 0.4]) \n            sphere(r = radius);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            scale([0.85, 0.85, 0.5])\n                sphere(r = radius - wall_thickness);\n    }\n    \n    // Ridge details on shell surface\n    for(i = [1:6]) {\n        rotate([0, 0, i*30]) {\n            hull() {\n                translate([0, 0, height*0.3])\n                    sphere(r = 1.5);\n                translate([radius*0.9, 0, height*0.15])\n                    sphere(r = 1);\n            }\n        }\n    }\n}\n\nmodule shell_edge(radius, height) {\n    // Scalloped edge with 12 ridges\n    for(i = [0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([radius*0.95, 0, height*0.35])\n                rotate([0, 90, 0])\n                    cylinder(h = radius*0.15, r1 = 3, r2 = 1);\n        }\n    }\n}\n\nmodule stool_base() {\n    // Central support column\n    cylinder(h = 25, r1 = 20, r2 = 15);\n    \n    // Reinforcement ring\n    translate([0, 0, 12])\n        cylinder(h = 3, r = 22, r = 22);\n    \n    // Base support\n    translate([0, 0, -2])\n        cylinder(h = 5, r = 25, r = 25);\n}\n\nmodule stool_structure() {\n    // Main shell top\n    translate([0, 0, 25])\n        scallop_shell(60, 20);\n    \n    // Shell edge details\n    translate([0, 0, 25])\n        shell_edge(60, 20);\n    \n    // Support structure\n    stool_base();\n    \n    // Hidden internal supports\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 27, r = 18, r = 18);\n        translate([0, 0, 2])\n            cylinder(h = 25, r = 16, r = 16);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\n    stool_structure();",
    "renders": true
  },
  {
    "natural_object": "seashell_snail",
    "openscad_code": "// Seashell Snail Stool (realistic style)\n// A functional stool shaped like a spiral seashell with snail-like features\n// Overall dimensions: ~120mm diameter x 100mm height\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\nshell_diameter = 120;\nshell_height = 90;\nwall_thickness = 2.5;\nspiral_turns = 2.5;\nstep_height = 3.5;\n\n// Base support structure\nmodule base_support() {\n    // Central column for structural integrity\n    cylinder(h=shell_height * 0.3, r=shell_diameter * 0.15, $fn=32);\n    \n    // Wide base for stability\n    translate([0, 0, -2]) \n        cylinder(h=5, r1=shell_diameter * 0.45, r2=shell_diameter * 0.4, $fn=32);\n}\n\n// Spiral shell structure\nmodule spiral_shell() {\n    for(i=[0:spiral_turns*360]) {\n        angle = i;\n        radius = shell_diameter * 0.5 * (1 - i/(spiral_turns*360) * 0.8);\n        height = i * (step_height/360);\n        \n        // Main spiral step\n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([0, 0, angle])\n            scale([1 - i/(spiral_turns*360) * 0.3, 0.6 - i/(spiral_turns*360) * 0.2, 1])\n            cube([wall_thickness * 3, radius * 0.15, step_height * 1.2], center=true);\n    }\n}\n\n// Shell ridges for structural strength and aesthetics\nmodule shell_ridges() {\n    for(i=[0:spiral_turns*360:15]) {\n        angle = i;\n        radius = shell_diameter * 0.5 * (1 - i/(spiral_turns*360) * 0.8);\n        height = i * (step_height/360);\n        \n        // Ridge structure\n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([0, 0, angle + 90])\n            scale([1 - i/(spiral_turns*360) * 0.4, 0.3, 1])\n            cube([wall_thickness * 2, radius * 0.08, step_height * 2], center=true);\n    }\n}\n\n// Snail body structure (serves as seating surface)\nmodule snail_body() {\n    // Main body shell\n    translate([0, 0, shell_height * 0.85])\n    scale([1, 0.8, 0.6])\n    sphere(d=shell_diameter * 0.7);\n    \n    // Shell opening - seating area\n    difference() {\n        translate([0, 0, shell_height * 0.85])\n        cylinder(h=shell_height * 0.3, r=shell_diameter * 0.35, $fn=32);\n        \n        // Hollow out seating area\n        translate([0, 0, shell_height * 0.85 - 1])\n        cylinder(h=shell_height * 0.32, r=shell_diameter * 0.32, $fn=32);\n    }\n}\n\n// Vent holes for 3D printing support removal\nmodule vent_holes() {\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n        translate([shell_diameter * 0.3, 0, shell_height * 0.5])\n        cylinder(h=wall_thickness * 2, r=wall_thickness, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_support();\n    \n    // Spiral seating surface\n    spiral_shell();\n    \n    // Ridges for strength\n    shell_ridges();\n    \n    // Snail body top\n    snail_body();\n    \n    // Ventilation holes\n    vent_holes();\n}\n\n// Add small foot pads for stability\nfor(i=[0:90:359]) {\n    rotate([0, 0, i])\n    translate([shell_diameter * 0.4, 0, 0])\n    cylinder(h=wall_thickness * 2, r=wall_thickness * 1.5, $fn=16);\n}",
    "renders": true
  },
  {
    "natural_object": "clam_shell",
    "openscad_code": "// Clam Shell Furniture Item - Realistic Style\n// A decorative clam shell that functions as a small storage bowl or display piece\n// Overall dimensions: 100mm wide x 80mm deep x 45mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main shell body\nmodule clam_shell() {\n    // Outer shell - ellipsoid shape\n    difference() {\n        // Main body - slightly flattened sphere\n        scale([1, 0.8, 0.45])\n            sphere(d = 100);\n        \n        // Hollow out the inside\n        scale([1, 0.8, 0.45])\n            sphere(d = 100 - wall*2);\n    }\n}\n\n// Shell ridges for structural support and visual detail\nmodule shell_ridges() {\n    for(i = [0:15:75]) {\n        rotate([0, 0, i])\n            translate([0, 0, -1])\n                linear_extrude(height = 2)\n                    difference() {\n                        // Ridge shape\n                        circle(d = 95);\n                        // Inner cutout\n                        circle(d = 90);\n                    };\n    }\n}\n\n// Hinge detail at the back\nmodule hinge_detail() {\n    // Main hinge cylinder\n    translate([0, -40, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 6, $fn = 20);\n    \n    // Hinge supports\n    for(pos = [-3.5, 3.5]) {\n        translate([pos, -40, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 3, $fn = 10);\n    }\n}\n\n// Rim reinforcement for structural integrity\nmodule rim_reinforcement() {\n    difference() {\n        // Outer rim\n        translate([0, 0, wall])\n            scale([1, 0.8, 0.1])\n                sphere(d = 100);\n        \n        // Inner rim\n        translate([0, 0, wall + 0.5])\n            scale([1, 0.8, 0.1])\n                sphere(d = 96);\n    }\n}\n\n// Shell texture pattern\nmodule shell_texture() {\n    // Growth rings on shell surface\n    for(r = [50:5:95]) {\n        color(\"LightBlue\", 0.3)\n            translate([0, 0, 0.5])\n                scale([1, 0.8, 0.45])\n                    sphere(d = r);\n    }\n}\n\n// Base support for stability\nmodule base_support() {\n    // Flattened base\n    translate([0, 0, -wall])\n        cylinder(h = wall, d1 = 60, d2 = 40, $fn = 30);\n}\n\n// Combine all elements\nunion() {\n    // Main shell structure\n    clam_shell();\n    \n    // Add ridges for strength\n    shell_ridges();\n    \n    // Reinforce the rim\n    rim_reinforcement();\n    \n    // Add hinge detail\n    hinge_detail();\n    \n    // Add base support\n    base_support();\n    \n    // Optional texture overlay\n    shell_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "oyster_shell",
    "openscad_code": "$fn = 50;\n\n// Overall dimensions (mm)\nshell_length = 100;\nshell_width = 70;\nshell_height = 40;\nwall_thickness = 2;\n\nmodule oyster_shell_half() {\n    difference() {\n        // Main shell body\n        scale([1, 0.7, 0.4])\n        sphere(d = shell_length);\n        \n        // Hollow inside\n        translate([0, 0, -wall_thickness])\n        scale([0.9, 0.6, 0.35])\n        sphere(d = shell_length - 4);\n    }\n    \n    // Ridge lines\n    for (i = [0:15:75]) {\n        rotate([0, 0, i])\n        translate([0, shell_width/4, shell_height/4])\n        rotate([90, 0, 0])\n        cylinder(h = shell_width/2, d1 = 3, d2 = 1);\n    }\n    \n    // Edge rim\n    rotate([0, 90, 0])\n    translate([0, 0, shell_length/2 - 3])\n    torus(shell_width/2 - 5, wall_thickness);\n}\n\nmodule torus(outer, inner) {\n    rotate_extrude()\n    translate([outer - inner/2, 0, 0])\n    circle(r = inner/2);\n}\n\n// Bottom shell\ntranslate([0, 0, 0])\noyster_shell_half();\n\n// Top shell (hinged)\ntranslate([0, 0, 2])\nrotate([30, 0, 0])\nmirror([0, 0, 1])\noyster_shell_half();\n\n// Hinge structure\ntranslate([-shell_length/2 + 5, 0, 0])\nrotate([0, 90, 0])\ncylinder(h = 10, d = 4);\n\n// Internal support ribs\nmodule support_rib() {\n    translate([0, 0, -shell_height/2 + 2])\n    cube([shell_length - 10, wall_thickness, shell_height/4], center = true);\n}\n\nfor (angle = [30, 150]) {\n    rotate([0, 0, angle])\n    translate([shell_length/4, 0, 0])\n    support_rib();\n}\n\n// Texture bumps\nmodule texture_bump() {\n    sphere(d = 2);\n}\n\nfor (x = [-40:10:40]) {\n    for (y = [-30:10:30]) {\n        z = shell_height/2 - 5 - sqrt(x*x + y*y)/10;\n        if (z > -shell_height/2 + 5) {\n            translate([x, y, z])\n            texture_bump();\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "coral",
    "openscad_code": "// Coral Wall Shelf\n// 3D printable coral-inspired wall shelf unit\n// Dimensions: 120mm wide x 80mm tall x 60mm deep\n\nwall_thickness = 2;\n\n// Main coral structure base\nmodule coral_base() {\n    // Base platform with coral texture\n    difference() {\n        // Main shelf body\n        translate([0, -5, 0])\n            cube([120, 60, wall_thickness], center=true);\n        \n        // Coral texture holes - staggered pattern\n        for (x = [-50:15:50]) {\n            for (y = [-20:12:20]) {\n                if ((x+y) % 30 == 0) {\n                    translate([x, y, 1])\n                        cylinder(h=wall_thickness+2, r=3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Branching coral structure\nmodule coral_branch(x_pos, y_pos, z_pos, height, angle) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, angle, 0]) {\n            // Main branch cylinder\n            cylinder(h=height, r1=3, r2=1.5, $fn=6);\n            \n            // Secondary branches\n            if (height > 15) {\n                for (i = [1:2]) {\n                    rotate([0, 0, i*120])\n                    translate([0, 0, height*0.6])\n                        coral_branch(0, 0, 0, height*0.4, 25);\n                }\n            }\n            \n            // Branch connection nodes\n            sphere(r=2.5, $fn=8);\n        }\n    }\n}\n\n// Wall mounting bracket\nmodule wall_bracket() {\n    // Main bracket arm\n    translate([0, -35, 10])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=wall_thickness, $fn=8);\n    \n    // Bracket support triangles\n    for (x = [-40:40:40]) {\n        translate([x, -35, 5])\n            rotate([0, 90, 0])\n                linear_extrude(height=wall_thickness)\n                    polygon(points=[[0,0],[15,0],[0,10]]);\n    }\n    \n    // Mounting holes\n    for (x = [-40:80:80]) {\n        translate([x, -35, 10])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness+2, r=2, $fn=16);\n    }\n}\n\n// Organic coral growth details\nmodule coral_details() {\n    // Random small spherical growths\n    for (i = [1:8]) {\n        translate([\n            -50 + i*12 + sin(i*73)*5,\n            -20 + cos(i*47)*15,\n            2 + sin(i*34)*2\n        ]) {\n            sphere(r=1.5 + sin(i*123)*0.5, $fn=6);\n        }\n    }\n    \n    // Tube-like structures\n    for (i = [1:5]) {\n        translate([\n            -40 + i*20,\n            -10 + cos(i*89)*5,\n            3\n        ]) {\n            rotate([0, 90, 0])\n                cylinder(h=8 + sin(i*67)*3, r=wall_thickness, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base shelf structure\n    coral_base();\n    \n    // Primary coral branches growing from base\n    coral_branch(-30, 0, wall_thickness, 25, -10);\n    coral_branch(-10, 10, wall_thickness, 30, 0);\n    coral_branch(15, -5, wall_thickness, 28, 15);\n    coral_branch(35, 5, wall_thickness, 22, -5);\n    \n    // Secondary branch clusters\n    coral_branch(-25, 20, wall_thickness+15, 15, 20);\n    coral_branch(25, -15, wall_thickness+18, 12, -20);\n    \n    // Wall mounting system\n    wall_bracket();\n    \n    // Decorative coral details\n    coral_details();\n    \n    // Shelf edge reinforcement\n    translate([0, 25, wall_thickness/2])\n        cube([110, wall_thickness, 5], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "coral_branch",
    "openscad_code": "// Coral Branch Bookshelf / Room Divider\n// Realistic coral branch structure with functional shelves\n// Overall size: 120mm W x 80mm D x 140mm H\n\nmodule coral_branch_furniture() {\n    // Base support structure\n    difference() {\n        union() {\n            // Main trunk\n            cylinder(h=120, d1=20, d2=12, $fn=12);\n            \n            // Base plate for stability\n            translate([0, 0, -5])\n                cube([25, 25, 5], center=true);\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 5])\n            cylinder(h=110, d=16, $fn=12);\n    }\n    \n    // Branch generation module\n    module branch(height, angle, rotation, thickness) {\n        translate([0, 0, height])\n        rotate([0, angle, rotation]) {\n            // Main branch segment\n            cylinder(h=40, d=thickness, $fn=8);\n            \n            // Branch joint reinforcement\n            sphere(d=thickness+2, $fn=12);\n            \n            // Shelf platform\n            translate([0, 0, 35])\n                rotate([0, -angle, 0])\n                cube([30, 20, 2], center=true);\n            \n            // Secondary branches for smaller shelves\n            for(i = [1:3]) {\n                rotate([0, 0, i*120])\n                translate([thickness/2, 0, 15])\n                rotate([0, 30, 0])\n                    cylinder(h=25, d=thickness*0.7, $fn=6);\n            }\n        }\n    }\n    \n    // Generate main branches at different heights and angles\n    branch(20, 45, 0, 8);\n    branch(45, -35, 90, 6);\n    branch(70, 25, 180, 7);\n    branch(95, -50, 270, 5);\n    \n    // Root-like support structures\n    module root_support(x, y, angle) {\n        translate([x, y, 0])\n        rotate([0, 0, angle])\n        linear_extrude(height=15, twist=30)\n            circle(d=6, $fn=5);\n    }\n    \n    // Add root supports\n    for(i = [1:5]) {\n        angle = i*72;\n        x = cos(angle) * 12;\n        y = sin(angle) * 12;\n        root_support(x, y, angle);\n    }\n    \n    // Coral texture details using small cylinders\n    module coral_texture(base_x, base_y, base_z, count) {\n        for(i = [1:count]) {\n            translate([\n                base_x + (rand(i*1) - 0.5) * 8,\n                base_y + (rand(i*2) - 0.5) * 8,\n                base_z + rand(i*3) * 10\n            ])\n                cylinder(h=2+rand(i*4)*3, d=1+rand(i*5), $fn=6);\n        }\n    }\n    \n    // Apply texture to main trunk\n    for(j = [1:20]) {\n        z = j * 6;\n        angle = j * 137.5;\n        x = cos(angle) * 10;\n        y = sin(angle) * 10;\n        coral_texture(x, y, z, 2);\n    }\n    \n    // Shelf supports\n    module shelf_support(x, y, z) {\n        translate([x, y, z])\n        rotate([0, 90, 0])\n            cylinder(h=15, d=4, $fn=8);\n    }\n    \n    // Add shelf supports between branches\n    shelf_support(10, 0, 40);\n    shelf_support(-10, 10, 65);\n    shelf_support(0, -15, 90);\n    \n    // Top connector for structural integrity\n    translate([0, 0, 120])\n        sphere(d=10, $fn=12);\n}\n\n// Generate the complete coral branch furniture\ncoral_branch_furniture();",
    "renders": true
  },
  {
    "natural_object": "sea_urchin",
    "openscad_code": "// Sea Urchin Stool - Realistic Style\n// Overall dimensions: 100mm diameter x 150mm height\n\n$fn = 64;\n\nmodule urchin_stool() {\n    // Main body - hollow spherical shape for seating\n    difference() {\n        sphere(d = 100);\n        sphere(d = 96);\n    }\n    \n    // Structural support frame inside\n    translate([0, 0, -48]) {\n        cylinder(h = 96, d = 50);\n    }\n    \n    // Spikes array - 12 rows around circumference\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            // Two rows of spikes per rotation\n            for (j = [0:1]) {\n                spike_row = j * 40 - 20;\n                translate([0, spike_row, 0]) {\n                    // Calculate spike length based on position\n                    spike_length = 25 - abs(spike_row) * 0.5;\n                    rotate([0, 90, 0]) {\n                        // Spike base\n                        cylinder(h = spike_length * 0.3, d1 = 6, d2 = 4);\n                        translate([0, 0, spike_length * 0.3]) {\n                            // Spike tip\n                            cylinder(h = spike_length * 0.7, d1 = 4, d2 = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bottom base plate for stability\n    translate([0, 0, -52]) {\n        difference() {\n            cylinder(h = 6, d = 80);\n            cylinder(h = 7, d = 76);\n        }\n    }\n    \n    // Internal reinforcement ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, -25, -48]) {\n                cube([2, 50, 96]);\n            }\n        }\n    }\n    \n    // Top rim reinforcement\n    translate([0, 0, 48]) {\n        difference() {\n            cylinder(h = 4, d = 102);\n            cylinder(h = 5, d = 98);\n        }\n    }\n    \n    // Ventilation holes for 3D printing\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([30, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 20, d = 4);\n                }\n            }\n        }\n    }\n}\n\n// Generate the stool\nurchin_stool();",
    "renders": true
  },
  {
    "natural_object": "starfish",
    "openscad_code": "// Starfish-inspired side table\n// Overall dimensions: 120mm diameter, 45mm height\n\n// Table parameters\narm_count = 5;\narm_length = 50;\narm_width = 25;\narm_thickness = 4;\ncenter_radius = 30;\ntable_height = 45;\nwall_thickness = 2;\n\nmodule starfish_arm(length, width, thickness) {\n    // Create one arm with realistic rounded edges\n    difference() {\n        // Main arm body\n        hull() {\n            translate([0, -width/2, 0]) \n                cube([length*0.8, width/3, thickness], center=true);\n            translate([length*0.9, 0, 0]) \n                sphere(d=width/2);\n            translate([length*0.3, -width/2, 0]) \n                sphere(d=width/1.5);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -wall_thickness/2])\n            scale([0.8, 0.8, 1])\n            children();\n    }\n}\n\nmodule starfish_top() {\n    union() {\n        // Central disc\n        difference() {\n            cylinder(h=arm_thickness, r=center_radius, center=true);\n            cylinder(h=arm_thickness+1, r=center_radius-wall_thickness, center=true);\n        }\n        \n        // Arms\n        for(i = [0:arm_count-1]) {\n            rotate([0, 0, i*(360/arm_count)]) {\n                translate([center_radius*0.3, 0, 0]) {\n                    starfish_arm(arm_length, arm_width, arm_thickness) {\n                        // Hollow arm interior\n                        translate([arm_length*0.4, 0, wall_thickness/2])\n                            cube([arm_length*0.6, arm_width*0.6, arm_thickness], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Surface texture - small bumps\n        for(i = [0:20]) {\n            angle = i * 137.5;\n            radius = sqrt(i) * 8;\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                arm_thickness/2\n            ]) {\n                sphere(d=2.5);\n            }\n        }\n    }\n}\n\nmodule table_support() {\n    // Central support column\n    difference() {\n        cylinder(h=table_height-arm_thickness, r=8, center=false);\n        cylinder(h=table_height-arm_thickness+1, r=6, center=false);\n    }\n    \n    // Base for stability\n    difference() {\n        cylinder(h=6, r=35, center=false);\n        cylinder(h=7, r=33, center=false);\n    }\n    \n    // Reinforcement ribs\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([0, 0, 0]) {\n                cube([4, 20, table_height-arm_thickness], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, table_height-arm_thickness/2]) {\n    rotate([0, 0, 180/arm_count]) {\n        starfish_top();\n    }\n}\n\ntranslate([0, 0, 0]) {\n    table_support();\n}",
    "renders": true
  },
  {
    "natural_object": "sand_dollar",
    "openscad_code": "// Sand Dollar Coffee Table\n// Realistic style with medium complexity\n// Dimensions: 120mm diameter x 45mm height\n\n$fn = 100;\nwall_thickness = 2;\n\n// Main table top - sand dollar shape\nmodule sand_dollar_top() {\n    difference() {\n        // Base disc\n        cylinder(h=8, r=60, center=true);\n        \n        // Central hole\n        cylinder(h=10, r=8, center=true);\n        \n        // Five petal-shaped cutouts\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 25, 0]) {\n                    scale([1, 1.3, 1]) {\n                        cylinder(h=10, r=8, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Star pattern grooves\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72 + 36]) {\n                translate([0, 0, 4]) {\n                    cube([50, 3, 8], center=true);\n                }\n            }\n        }\n    }\n    \n    // Raised edge detail\n    difference() {\n        cylinder(h=2, r=58, center=true);\n        translate([0, 0, -1]) {\n            cylinder(h=4, r=56, center=true);\n        }\n    }\n}\n\n// Table leg with sand dollar texture\nmodule textured_leg(height) {\n    difference() {\n        // Main leg cylinder\n        cylinder(h=height, r=8, center=false);\n        \n        // Texture grooves\n        for(i = [0:5:height]) {\n            translate([0, 0, i]) {\n                rotate([0, 0, 45]) {\n                    cube([14, 2, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Support ring between legs\nmodule support_ring(radius, height) {\n    difference() {\n        // Outer ring\n        cylinder(h=wall_thickness, r=radius, center=true);\n        \n        // Inner cutout\n        cylinder(h=wall_thickness + 1, r=radius - wall_thickness, center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 45]) {\n    // Table top\n    sand_dollar_top();\n}\n\n// Five legs\nfor(i = [0:4]) {\n    rotate([0, 0, i * 72]) {\n        translate([40, 0, 22.5]) {\n            rotate([90, 0, 90]) {\n                textured_leg(40);\n            }\n        }\n    }\n}\n\n// Lower support structure\ntranslate([0, 0, 15]) {\n    support_ring(35, wall_thickness);\n}\n\n// Upper support structure\ntranslate([0, 0, 35]) {\n    support_ring(45, wall_thickness);\n}\n\n// Central support column\ntranslate([0, 0, 20]) {\n    cylinder(h=20, r=5, center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "driftwood",
    "openscad_code": "// Driftwood Bench - Realistic Style, Medium Complexity\n// Dimensions: 120mm wide x 45mm deep x 50mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main driftwood seat plank\nmodule seat_plank() {\n    // Create organic seat shape with slight curvature\n    hull() {\n        translate([-58, -20, 0]) cylinder(h=8, d1=25, d2=22, $fn=8);\n        translate([58, -20, 0]) cylinder(h=8, d1=22, d2=25, $fn=8);\n        translate([-55, 20, 0]) cylinder(h=8, d1=22, d2=20, $fn=8);\n        translate([55, 20, 0]) cylinder(h=8, d1=20, d2=22, $fn=8);\n    }\n    \n    // Add natural undulations\n    for(i = [-40:20:40]) {\n        translate([i, 0, 8]) \n            scale([1, 0.8, 0.3]) \n            sphere(d=15, $fn=6);\n    }\n    \n    // Drill drainage holes\n    for(i = [-30:30:30]) {\n        for(j = [-10:20:10]) {\n            translate([i, j, 4])\n                cylinder(h=10, d=3, $fn=12);\n        }\n    }\n}\n\n// Natural branch leg\nmodule branch_leg(x_pos, angle) {\n    translate([x_pos, 0, 0]) {\n        rotate([0, angle, 0]) {\n            // Main branch cylinder\n            cylinder(h=45, d=12, $fn=8);\n            \n            // Add knots and irregularities\n            for(i = [0:10:40]) {\n                translate([0, 0, i])\n                    rotate([90, 0, 0])\n                    cylinder(h=8, d1=14, d2=10, $fn=6);\n            }\n            \n            // Root flare at base\n            translate([0, 0, -2])\n                cylinder(h=8, d1=18, d2=12, $fn=8);\n        }\n    }\n}\n\n// Support brace between legs\nmodule support_brace() {\n    translate([0, 0, 15]) {\n        // Curved support beam\n        hull() {\n            translate([-40, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=5, d=8, $fn=6);\n            translate([40, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=5, d=8, $fn=6);\n        }\n        \n        // Add natural taper\n        difference() {\n            cube([85, 8, 5], center=true);\n            translate([0, 0, -3])\n                cube([87, 10, 3], center=true);\n        }\n    }\n}\n\n// Bark texture pattern\nmodule bark_texture() {\n    for(i = [-50:5:50]) {\n        for(j = [-15:5:15]) {\n            if((i+j)%2 == 0) {\n                translate([i, j, 0.5])\n                    cube([3, 1, 0.3]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main seat\n    difference() {\n        seat_plank();\n        // Hollow out for printing\n        translate([0, 0, -1])\n            scale([0.85, 0.85, 0.8])\n            seat_plank();\n    }\n    \n    // Apply bark texture to top\n    translate([0, 0, 8.5])\n        bark_texture();\n    \n    // Front legs\n    branch_leg(-45, 0);\n    branch_leg(45, 0);\n    \n    // Back support legs\n    branch_leg(-35, -15);\n    branch_leg(35, -15);\n    \n    // Cross support\n    support_brace();\n    \n    // Add natural imperfections\n    translate([-20, -15, 25])\n        sphere(d=8, $fn=6);\n    translate([25, 18, 30])\n        sphere(d=6, $fn=5);\n}",
    "renders": true
  },
  {
    "natural_object": "log",
    "openscad_code": "// Log side table – realistic style, medium complexity\n// Overall size ~110 mm high, 150 mm diameter top\n\n$fa = 2; $fs = 0.5;\n\n// Table top – split log slice\nmodule table_top(d=150, h=18) {\n    difference() {\n        cylinder(h=h, d=d, center=true);\n        // Bark groove ring (2 mm deep)\n        translate([0,0,-h/2+1])\n            cylinder(h=2.2, d=d-8, center=true);\n        \n        // Pith hole\n        translate([0,0,-h/2-0.1])\n            cylinder(h=h+0.2, d=12, center=true);\n        \n        // Annual rings – subtract thin cylinders\n        for(i=[1:4:40]) {\n            difference() {\n                translate([0,0,-h/2-0.1])\n                    cylinder(h=h+0.2, d=d-2*i, center=true);\n                translate([0,0,-h/2-0.1])\n                    cylinder(h=h+0.2, d=d-2*i-2, center=true);\n            }\n        }\n    }\n}\n\n// Leg – debarked log with slight taper\nmodule leg(h=90, r=15) {\n    union() {\n        // Main cylinder\n        cylinder(h=h, r1=r, r2=r*0.85, center=true);\n        \n        // Growth-ring lines\n        for(z=[-h/2+5:10:h/2-5]) {\n            translate([0,0,z])\n                cylinder(h=0.6, r1=r+0.2, r2=r*0.85+0.2, center=true);\n        }\n        \n        // Bottom flat pad for printing\n        translate([0,0,-h/2])\n            cylinder(h=2, r=r+1, center=false);\n    }\n}\n\n// Simple mortise (negative) for joint on underside of top\nmodule mortise() {\n    rotate([0,90,0])\n        cylinder(h=30, r=16, center=true);\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Top\n        translate([0,0,90/2+18/2])\n            table_top();\n        \n        // Four legs\n        for(a=[45:90:315]) {\n            rotate([0,0,a])\n                translate([0, 110/2-15, 0])\n                    leg();\n        }\n    }\n    \n    // Cut mortises into top underside\n    for(a=[45:90:315]) {\n        rotate([0,0,a])\n            translate([0, 110/2-15, 90/2-9])\n                mortise();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "branch",
    "openscad_code": "// Branch Shelf - Realistic Style\n// A wall-mounted shelf made from a natural tree branch\n\n// Parameters\nbranch_diameter = 10;           // mm\nbranch_length = 120;            // mm\nshelf_thickness = 4;            // mm\nwall_clearance = 15;            // mm\nmount_hole_diameter = 5;        // mm\nsupport_rod_diameter = 6;       // mm\n\n// Main branch module\nmodule branch_segment(length, diameter, curvature) {\n    // Create curved branch using multiple cylinders\n    segments = 8;\n    for (i = [0:segments-1]) {\n        angle = curvature * sin(i * 180 / segments);\n        translate([i * length/segments, 0, sin(i * 180 / segments) * 2])\n            rotate([0, angle, 0])\n            cylinder(h = length/segments + 1, d = diameter, $fn = 12);\n    }\n}\n\n// Bark texture detail\nmodule bark_texture(diameter, length) {\n    for (i = [0:20]) {\n        rotate([0, 90, i * 18])\n        translate([diameter/2 + 0.5, 0, i * length/20])\n            cylinder(h = 0.5, d = 1.5, $fn = 6);\n    }\n}\n\n// Wall mounting bracket\nmodule wall_mount() {\n    difference() {\n        // Main mount block\n        cube([20, 8, 15], center = true);\n        \n        // Mounting holes\n        translate([7, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 10, d = mount_hole_diameter, $fn = 16);\n        translate([-7, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 10, d = mount_hole_diameter, $fn = 16);\n    }\n}\n\n// Shelf platform\nmodule shelf_platform(width, depth) {\n    difference() {\n        // Main shelf\n        translate([-width/2, 0, 0])\n            cube([width, depth, shelf_thickness]);\n        \n        // Rounded edges\n        translate([width/2 - 3, 3, -0.1])\n            cylinder(h = shelf_thickness + 0.2, d = 6, $fn = 16);\n        translate([width/2 - 3, depth - 3, -0.1])\n            cylinder(h = shelf_thickness + 0.2, d = 6, $fn = 16);\n    }\n}\n\n// Support rod\nmodule support_rod(length) {\n    cylinder(h = length, d = support_rod_diameter, $fn = 12);\n}\n\n// Assemble the branch shelf\nunion() {\n    // Main branch\n    translate([-branch_length/2, wall_clearance, branch_diameter/2 + shelf_thickness])\n        branch_segment(branch_length, branch_diameter, 15);\n    \n    // Add bark texture\n    translate([-branch_length/2, wall_clearance, branch_diameter/2 + shelf_thickness])\n        bark_texture(branch_diameter, branch_length);\n    \n    // Wall mount\n    translate([0, wall_clearance - 4, branch_diameter/2 + shelf_thickness + 7.5])\n        wall_mount();\n    \n    // Shelf platform\n    translate([0, wall_clearance + branch_diameter/2 + 2, branch_diameter/2 + shelf_thickness/2])\n        shelf_platform(branch_length * 0.8, 40);\n    \n    // Support rods\n    translate([-branch_length/3, wall_clearance + branch_diameter/2 + 2, shelf_thickness])\n        rotate([90, 0, 0])\n        support_rod(branch_diameter/2 + 2);\n    \n    translate([branch_length/3, wall_clearance + branch_diameter/2 + 2, shelf_thickness])\n        rotate([90, 0, 0])\n        support_rod(branch_diameter/2 + 2);\n    \n    // Small branch detail\n    translate([branch_length/4, wall_clearance + 5, branch_diameter/2 + shelf_thickness + 8])\n        rotate([0, 30, 90])\n        branch_segment(25, branch_diameter * 0.6, -10);\n}",
    "renders": true
  },
  {
    "natural_object": "twig",
    "openscad_code": "// Twig Chair (realistic style, medium complexity)\n// A small chair made from interlocking twigs, sized for 3D printing (≈80 mm tall)\n\n$fn = 32;        // Smooth curves for printing\nwall = 2;        // 2 mm wall thickness for structural integrity\n\n// Overall dimensions\nchair_h = 80;\nseat_w  = 60;\nseat_d  = 50;\n\n// Helper module: tapered cylinder that looks like a twig\nmodule twig(h, r1, r2 = 0, detail = 8) {\n    // Add subtle bumps for realism\n    for(i = [0:detail-1]) {\n        rotate([0, 0, i*360/detail])\n            translate([0, 0, i*h/detail/2])\n                cylinder(h = h/detail, r1 = r1*(1+0.05*sin(i*90)), r2 = r2*(1+0.05*sin(i*90)), center = true);\n    }\n}\n\n// Helper module: twig with bark texture (small ridges)\nmodule textured_twig(h, r1, r2 = 0) {\n    difference() {\n        twig(h, r1, r2);\n        // Bark texture via small negative cylinders\n        for(i = [0:h/2-1]) {\n            rotate([0, 0, i*45])\n                translate([0, 0, -h/2 + i*2])\n                    cylinder(h = 1, r = r1*1.1, center = true);\n        }\n    }\n}\n\n// Seat frame made from bent twigs\nmodule seat_frame() {\n    // Front cross twig\n    translate([0, seat_d/2-5, chair_h/2])\n        rotate([90, 0, 0])\n            textured_twig(seat_w, 3, 2.5);\n    \n    // Rear cross twig\n    translate([0, -seat_d/2+5, chair_h/2])\n        rotate([90, 0, 0])\n            textured_twig(seat_w, 3, 2.5);\n    \n    // Side twigs\n    translate([seat_w/2-5, 0, chair_h/2])\n        rotate([90, 0, 90])\n            textured_twig(seat_d-10, 3, 2.5);\n    \n    translate([-seat_w/2+5, 0, chair_h/2])\n        rotate([90, 0, 90])\n            textured_twig(seat_d-10, 3, 2.5);\n}\n\n// Backrest made from vertical twigs\nmodule backrest() {\n    for(x = [-seat_w/2+10:10:seat_w/2-10]) {\n        translate([x, -seat_d/2+2, chair_h-15])\n            rotate([0, 0, 0])\n                textured_twig(30, 2.5, 2);\n    }\n}\n\n// Legs made from thicker twigs\nmodule legs() {\n    // Front legs\n    translate([seat_w/2-8, seat_d/2-8, chair_h/4])\n        rotate([0, 0, 5])\n            textured_twig(chair_h/2, 4, 3);\n    \n    translate([-seat_w/2+8, seat_d/2-8, chair_h/4])\n        rotate([0, 0, -5])\n            textured_twig(chair_h/2, 4, 3);\n    \n    // Rear legs (angled back)\n    translate([seat_w/2-8, -seat_d/2+8, chair_h/4])\n        rotate([10, 0, 5])\n            textured_twig(chair_h/2+5, 4, 3);\n    \n    translate([-seat_w/2+8, -seat_d/2+8, chair_h/4])\n        rotate([10, 0, -5])\n            textured_twig(chair_h/2+5, 4, 3);\n}\n\n// Seat surface made from woven twigs\nmodule seat_surface() {\n    // Horizontal twigs\n    for(y = [-seat_d/2+8:4:seat_d/2-8]) {\n        translate([0, y, chair_h/2+2])\n            rotate([90, 0, 0])\n                twig(seat_w-10, 1.5, 1);\n    }\n    \n    // Vertical twigs (woven)\n    for(x = [-seat_w/2+8:4:seat_w/2-8]) {\n        translate([x, 0, chair_h/2+3])\n            rotate([90, 0, 90])\n                twig(seat_d-10, 1.5, 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    seat_frame();\n    backrest();\n    legs();\n    \n    // Seat surface\n    seat_surface();\n    \n    // Support twigs under seat\n    translate([0, 0, chair_h/4])\n        rotate([10, 0, 0])\n            textured_twig(seat_w-5, 2.5, 2);\n    \n    translate([0, -seat_d/4, chair_h/3])\n        rotate([0, 0, 90])\n            rotate([10, 0, 0])\n                textured_twig(seat_d-5, 2.5, 2);\n}\n\n// Add small branch joints for realism\nmodule branch_joint(pos, rot, scale) {\n    translate(pos)\n        rotate(rot)\n            scale([scale, scale, scale])\n                sphere(5);\n}\n\n// Add joints at intersections\nbranch_joint([seat_w/2-8, seat_d/2-8, chair_h/2], [0, 0, 0], 0.6);\nbranch_joint([-seat_w/2+8, seat_d/2-8, chair_h/2], [0, 0, 0], 0.6);\nbranch_joint([seat_w/2-8, -seat_d/2+8, chair_h-15], [0, 0, 0], 0.6);\nbranch_joint([-seat_w/2+8, -seat_d/2+8, chair_h-15], [0, 0, 0], 0.6);",
    "renders": true
  },
  {
    "natural_object": "pinecone",
    "openscad_code": "// Pinecone-inspired side table\n// Overall height 120mm, diameter 60mm base\n\nmodule pinecone_table() {\n    // Table base - pinecone bottom half\n    union() {\n        // Central core cylinder for strength\n        cylinder(h=80, d=16, $fn=32);\n        \n        // Pinecone scales in layers\n        for(i = [0:8]) {\n            // Each layer at different height\n            translate([0, 0, i * 8]) {\n                // Number of scales decreases toward top\n                scale_count = max(12 - i, 6);\n                \n                for(j = [0:scale_count-1]) {\n                    rotate([0, 0, j * (360/scale_count)]) {\n                        // Pinecone scale shape\n                        translate([8 + i * 1.5, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                scale([1, 1.2, 0.8]) {\n                                    // Individual scale\n                                    difference() {\n                                        // Main scale body\n                                        union() {\n                                            cylinder(h=4, d1=10, d2=6, $fn=8);\n                                            translate([0, 0, 2]) {\n                                                sphere(d=8, $fn=16);\n                                            }\n                                        }\n                                        // Hollow bottom for printing\n                                        translate([0, 0, -1]) {\n                                            cylinder(h=6, d=4, $fn=8);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Table top - flat circular surface\n    translate([0, 0, 85]) {\n        difference() {\n            // Main tabletop disk\n            cylinder(h=6, d=60, $fn=64);\n            \n            // Light weight reduction pattern on underside\n            for(x = [-20:20:20]) {\n                for(y = [-20:20:20]) {\n                    translate([x, y, -2]) {\n                        cylinder(h=4, d=8, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Decorative pinecone pattern on top\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([20, 0, 6]) {\n                    scale([0.3, 0.3, 0.2]) {\n                        pinecone_table();\n                    }\n                }\n            }\n        }\n    }\n    \n    // Hidden structural support rod\n    translate([0, 0, -5]) {\n        cylinder(h=10, d=12, $fn=32);\n    }\n}\n\n// Generate the complete table\npinecone_table();",
    "renders": true
  },
  {
    "natural_object": "acorn",
    "openscad_code": "// Acorn Stool – OpenSCAD\n// Realistic style, medium complexity, 3D-printable\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\ncap_d = 90;\ncap_h = 45;\nstem_d = 30;\nstem_h = 10;\nbody_d = 70;\nbody_h = 85;\nleg_h = 220;\nleg_r = 6;\n\nmodule acorn_cap() {\n    difference() {\n        // Main cap dome\n        scale([1, 1, 0.55])\n            sphere(d = cap_d);\n\n        // Remove bottom flat area\n        translate([0, 0, -cap_h/2])\n            cube([cap_d*2, cap_d*2, cap_h], center = true);\n\n        // Add radial grooves for texture\n        for (a = [0:30:330]) {\n            rotate([0, 0, a])\n                translate([cap_d/2 - 3, 0, -cap_h/2 + 2])\n                    cube([cap_d, 2, cap_h], center = true);\n        }\n    }\n\n    // Stem on top\n    translate([0, 0, cap_h/2 - 1])\n        cylinder(d = stem_d, h = stem_h, $fn = 20);\n}\n\nmodule acorn_body() {\n    // Upper shoulder\n    translate([0, 0, body_h/4])\n        sphere(d = body_d);\n\n    // Lower taper\n    hull() {\n        translate([0, 0, body_h/4])\n            sphere(d = body_d);\n        translate([0, 0, -body_h/2])\n            sphere(d = body_d * 0.55);\n    }\n\n    // Light texture rings\n    for (z = [-body_h/2 + 5:10:body_h/4 - 5]) {\n        translate([0, 0, z])\n            difference() {\n                sphere(d = body_d + 0.4);\n                sphere(d = body_d);\n            }\n    }\n}\n\nmodule leg() {\n    // Simple round leg with 2 mm wall\n    difference() {\n        cylinder(h = leg_h, r = leg_r, $fn = 20);\n        translate([0, 0, 2])\n            cylinder(h = leg_h - 4, r = leg_r - 2, $fn = 20);\n    }\n}\n\nmodule stool() {\n    // Assemble cap and body\n    union() {\n        acorn_cap();\n        translate([0, 0, cap_h/2 - 2])\n            acorn_body();\n    }\n\n    // Legs\n    leg_dist = 55;\n    for (a = [45:90:315]) {\n        rotate([0, 0, a])\n            translate([leg_dist, 0, -leg_h/2 - body_h/2 + 5])\n                leg();\n    }\n}\n\n// Render\nstool();",
    "renders": true
  },
  {
    "natural_object": "seed",
    "openscad_code": "// Seed-shaped stool with walnut-like shell and internal structure\n// Dimensions: 120mm height, 80mm max width, suitable for 3D printing\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule seed_stool() {\n    // Main seed body - ellipsoid shape\n    difference() {\n        union() {\n            // Outer shell - walnut-like shape\n            scale([1, 0.7, 1.3]) \n                sphere(d=80);\n            \n            // Base flattening for stability\n            translate([0, 0, -50])\n                cube([80, 56, 20], center=true);\n        }\n        \n        // Hollow interior for material efficiency\n        scale([0.9, 0.6, 1.2])\n            sphere(d=75);\n    }\n    \n    // Internal support structure\n    for (i = [-30:30:30]) {\n        translate([i, 0, -30])\n            rotate([0, 90, 0])\n                cylinder(h=60, d=5, center=true);\n    }\n    \n    for (j = [-20:20:20]) {\n        translate([0, j, -20])\n            rotate([90, 0, 0])\n                cylinder(h=60, d=5, center=true);\n    }\n    \n    // Seed seam detail - realistic walnut shell division\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, -30])\n                rotate([90, 0, 0])\n                    cylinder(h=60, d=2);\n            translate([0, 0, 30])\n                rotate([90, 0, 0])\n                    cylinder(h=60, d=2);\n        }\n    }\n    \n    // Top seating surface with slight indentation\n    difference() {\n        translate([0, 0, 40])\n            scale([1, 0.7, 0.2])\n                sphere(d=80);\n        \n        translate([0, 0, 45])\n            scale([0.9, 0.6, 0.1])\n                sphere(d=70);\n    }\n    \n    // Structural legs disguised as root system\n    module root_leg(x, y, angle) {\n        translate([x, y, -50]) {\n            rotate([angle, 0, 0]) {\n                cylinder(h=40, d1=15, d2=8);\n                translate([0, 0, -20])\n                    sphere(d=8);\n            }\n        }\n    }\n    \n    // Four root legs for stability\n    root_leg(25, 20, 20);\n    root_leg(-25, 20, 20);\n    root_leg(25, -20, 20);\n    root_leg(-25, -20, 20);\n    \n    // Surface texture - small bumps for realistic seed appearance\n    for (i = [1:30]) {\n        theta = i * 137.5;  // Golden angle for natural distribution\n        phi = asin(-1 + 2 * i / 30);\n        r = 40 - i * 0.5;\n        \n        translate([\n            r * cos(theta) * cos(phi),\n            r * sin(theta) * cos(phi) * 0.7,\n            r * sin(phi) * 1.3\n        ]) {\n            sphere(d=2 + sin(i) * 0.5);\n        }\n    }\n    \n    // Reinforcement ring inside base\n    difference() {\n        translate([0, 0, -35])\n            cylinder(h=5, d=70);\n        \n        translate([0, 0, -35])\n            cylinder(h=5, d=60);\n    }\n}\n\n// Generate the complete seed stool\nseed_stool();",
    "renders": true
  },
  {
    "natural_object": "nutshell",
    "openscad_code": "// Nutshell-inspired armchair – realistic style, medium complexity\n// Overall footprint ≈ 100 mm across, printable without supports\n\n$fa = 2; $fs = 0.5;  // smooth curves\n\nmodule shell_half(h=40, r_base=45, thickness=2) {\n    // create one half of a walnut-like shell\n    difference() {\n        // outer ellipsoid dome\n        scale([1, 0.7, 0.8])\n            sphere(r = r_base);\n        \n        // inner cavity\n        translate([0, 0, -thickness])\n            scale([1, 0.7, 0.75])\n                sphere(r = r_base - thickness);\n        \n        // cut flat seating plane\n        translate([0, 0, -h/2])\n            cube([r_base*3, r_base*3, h], center = true);\n    }\n}\n\nmodule ridges(count=12) {\n    // decorative radial ridges on shell surface\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*360/count])\n            translate([0, 0, -5])\n                linear_extrude(height = 10, twist = 5)\n                    offset(delta = 1)\n                        circle(d = 38, $fn = 3);\n    }\n}\n\nmodule backrest() {\n    // rear shell half acting as backrest\n    rotate([0, 0, 0])\n        shell_half();\n}\n\nmodule seat() {\n    // front shell half, slightly rotated forward for seating angle\n    translate([0, 0, 10])\n        rotate([15, 0, 0])\n            shell_half();\n}\n\nmodule legs() {\n    // four short curved legs\n    leg_positions = [[-30, -30], [30, -30], [-30, 30], [30, 30]];\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -25])\n            rotate([0, 0, 45])\n                cylinder(h = 25, r1 = 4, r2 = 2, $fn = 8);\n    }\n}\n\nmodule joint_pins() {\n    // small pegs connecting shell halves\n    pin_pos = [[0, 35, 5], [0, -35, 5]];\n    for(p = pin_pos) {\n        translate(p)\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 4, $fn = 8);\n    }\n}\n\nmodule armrest_supports() {\n    // side brackets shaped like nutshell edges\n    translate([40, 0, 0])\n        rotate([0, -20, 0])\n            scale([1, 0.5, 0.5])\n                shell_half(h = 20, r_base = 15);\n    mirror([1, 0, 0])\n        translate([40, 0, 0])\n            rotate([0, -20, 0])\n                scale([1, 0.5, 0.5])\n                    shell_half(h = 20, r_base = 15);\n}\n\n// final assembly\nunion() {\n    color(\"SaddleBrown\") {\n        backrest();\n        seat();\n        legs();\n    }\n    color(\"Tan\") {\n        ridges();\n    }\n    color(\"Sienna\") {\n        joint_pins();\n        armrest_supports();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "walnut",
    "openscad_code": "// Walnut armchair (realistic style, medium complexity)\n// Overall dimensions: 100mm W x 95mm D x 110mm H\n\n// Parameters\nseat_width = 85;\nseat_depth = 75;\nseat_height = 45;\nback_height = 65;\nleg_thick = 8;\narmrest_height = 65;\n\n// Walnut color approximation\ncolor(\"saddlebrown\") {\n\n// Seat frame\nmodule seat_frame() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n            cube([seat_width, seat_depth, 6], center=true);\n        \n        // Hollow for cushion\n        translate([0, 0, seat_height/2 + 1])\n            cube([seat_width - 8, seat_depth - 8, 8], center=true);\n    }\n}\n\n// Backrest with curved slats\nmodule backrest() {\n    translate([0, -seat_depth/2 - 2, seat_height + back_height/2])\n    rotate([15, 0, 0]) {\n        // Back frame\n        difference() {\n            cube([seat_width - 10, 6, back_height], center=true);\n            translate([0, 0, -5])\n                cube([seat_width - 14, 10, back_height - 8], center=true);\n        }\n        \n        // Slats\n        for(i = [-30:15:30]) {\n            translate([i, 0, 0])\n                cube([10, 3, back_height - 8], center=true);\n        }\n    }\n}\n\n// Legs with stretchers\nmodule legs() {\n    // Front legs\n    translate([seat_width/2 - leg_thick, seat_depth/2 - leg_thick, seat_height/2])\n        cube([leg_thick, leg_thick, seat_height], center=true);\n    translate([-seat_width/2 + leg_thick, seat_depth/2 - leg_thick, seat_height/2])\n        cube([leg_thick, leg_thick, seat_height], center=true);\n    \n    // Back legs\n    translate([seat_width/2 - leg_thick, -seat_depth/2 + leg_thick, seat_height/2])\n        cube([leg_thick, leg_thick, seat_height], center=true);\n    translate([-seat_width/2 + leg_thick, -seat_depth/2 + leg_thick, seat_height/2])\n        cube([leg_thick, leg_thick, seat_height], center=true);\n    \n    // Stretchers\n    translate([0, 0, seat_height/4])\n        cube([seat_width - leg_thick*2, leg_thick, leg_thick], center=true);\n    translate([0, seat_depth/2 - leg_thick*1.5, seat_height/3])\n        cube([seat_width - leg_thick*2, leg_thick, leg_thick], center=true);\n}\n\n// Armrests\nmodule armrests() {\n    // Left arm\n    translate([-seat_width/2 - leg_thick/2, 0, seat_height + armrest_height/2])\n        cube([leg_thick, seat_depth - 10, armrest_height - seat_height], center=true);\n    \n    // Right arm\n    translate([seat_width/2 + leg_thick/2, 0, seat_height + armrest_height/2])\n        cube([leg_thick, seat_depth - 10, armrest_height - seat_height], center=true);\n    \n    // Arm tops\n    translate([-seat_width/2 - leg_thick/2, 0, armrest_height])\n        cube([leg_thick + 5, seat_depth - 15, 4], center=true);\n    translate([seat_width/2 + leg_thick/2, 0, armrest_height])\n        cube([leg_thick + 5, seat_depth - 15, 4], center=true);\n}\n\n// Assembly\nunion() {\n    seat_frame();\n    backrest();\n    legs();\n    armrests();\n}\n\n// Walnut texture details (subtle)\nfor(i = [1:12]) {\n    rotate([0, 0, i*30])\n    translate([sin(i*30)*2, cos(i*30)*2, seat_height + 3])\n        scale([1, 1, 0.1])\n        sphere(1);\n}",
    "renders": true
  },
  {
    "natural_object": "coconut",
    "openscad_code": "// Coconut Stool - Realistic Style with Medium Complexity\n// Dimensions: ~80mm height, ~70mm diameter\n\n// Parameters\nwall_thickness = 2;\ncoconut_radius = 35;\nshell_thickness = 3;\nleg_height = 45;\nleg_radius = 4;\njoint_radius = 6;\n\n// Main coconut shell (hollow)\nmodule coconut_shell() {\n    difference() {\n        // Outer shell\n        sphere(r = coconut_radius, $fn = 64);\n        \n        // Hollow interior\n        sphere(r = coconut_radius - shell_thickness, $fn = 64);\n        \n        // Flatten bottom for stability\n        translate([0, 0, -coconut_radius + 5])\n            cube([coconut_radius * 2, coconut_radius * 2, 10], center = true);\n        \n        // Drain holes (natural coconut features)\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([coconut_radius * 0.6, 0, -coconut_radius + 10])\n                    rotate([90, 0, 0])\n                        cylinder(h = shell_thickness + 2, r = 3, $fn = 16);\n        }\n    }\n}\n\n// Coconut fiber texture pattern\nmodule fiber_texture() {\n    difference() {\n        coconut_shell();\n        \n        // Fiber grooves\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([0, 0, -coconut_radius])\n                    cube([1.5, coconut_radius * 2, coconut_radius * 2], center = true);\n        }\n        \n        // Horizontal rings\n        for (h = [-20:5:20]) {\n            translate([0, 0, h])\n                rotate_extrude($fn = 64)\n                    translate([coconut_radius, 0, 0])\n                        circle(r = 0.5);\n        }\n    }\n}\n\n// Leg joint reinforcement\nmodule leg_joint() {\n    difference() {\n        // Joint sphere\n        sphere(r = joint_radius, $fn = 32);\n        \n        // Hollow center\n        sphere(r = joint_radius - wall_thickness, $fn = 32);\n        \n        // Leg connection hole\n        rotate([90, 0, 0])\n            cylinder(h = joint_radius * 2, r = leg_radius, $fn = 16);\n    }\n}\n\n// Structural leg\nmodule leg() {\n    difference() {\n        // Main leg cylinder\n        cylinder(h = leg_height, r = leg_radius, $fn = 16);\n        \n        // Hollow center for weight reduction\n        cylinder(h = leg_height, r = leg_radius - wall_thickness, $fn = 16);\n        \n        // Tapered bottom\n        translate([0, 0, leg_height - 5])\n            cylinder(h = 5, r1 = leg_radius, r2 = leg_radius * 0.7, $fn = 16);\n    }\n}\n\n// Assembly - Coconut stool with three legs\nmodule coconut_stool() {\n    union() {\n        // Coconut seat with texture\n        fiber_texture();\n        \n        // Three legs at 120 degree intervals\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                // Position joint under coconut\n                translate([0, coconut_radius * 0.7, -coconut_radius + 5])\n                    leg_joint();\n                \n                // Attach leg\n                translate([0, coconut_radius * 0.7, -coconut_radius + 5 - leg_height/2])\n                    rotate([90, 0, 0])\n                        leg();\n            }\n        }\n        \n        // Reinforcement ring between legs\n        translate([0, 0, -coconut_radius + 5 - leg_height * 0.7])\n            difference() {\n                cylinder(h = wall_thickness, r1 = coconut_radius * 0.8, r2 = coconut_radius * 0.75, $fn = 3);\n                cylinder(h = wall_thickness + 1, r1 = coconut_radius * 0.8 - wall_thickness, \n                        r2 = coconut_radius * 0.75 - wall_thickness, $fn = 3);\n            }\n    }\n}\n\n// Render the stool\ncoconut_stool();",
    "renders": true
  },
  {
    "natural_object": "peanut_shell",
    "openscad_code": "// Peanut Shell Chair - Realistic Style (Medium Complexity)\n// 3D printable peanut shell inspired lounge chair\n// Dimensions: 120mm x 100mm x 80mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main peanut shell body module\nmodule peanut_shell_body() {\n    // Outer shell - two intersecting ellipsoids\n    translate([0, 0, 40]) {\n        difference() {\n            // First half of peanut\n            scale([1.2, 0.8, 0.6]) sphere(50);\n            \n            // Carve out seating area\n            translate([0, -10, -20]) {\n                scale([1.1, 0.7, 0.5]) sphere(45);\n            }\n            \n            // Bottom opening\n            cube([200, 200, 80], center=true);\n        }\n    }\n    \n    // Second half of peanut\n    translate([30, 0, 30]) {\n        difference() {\n            rotate([0, 0, 30]) scale([1.2, 0.8, 0.6]) sphere(45);\n            \n            // Seating cavity\n            translate([0, -10, -15]) {\n                scale([1.1, 0.7, 0.5]) sphere(40);\n            }\n            \n            // Bottom opening\n            cube([200, 200, 80], center=true);\n        }\n    }\n}\n\n// Structural support frame\nmodule support_frame() {\n    // Front support arch\n    translate([-40, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=80, r1=15, r2=15, center=true);\n                cylinder(h=82, r1=13, r2=13, center=true);\n            }\n        }\n    }\n    \n    // Rear support arch\n    translate([40, 0, 10]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=80, r1=15, r2=15, center=true);\n                cylinder(h=82, r1=13, r2=13, center=true);\n            }\n        }\n    }\n    \n    // Cross supports\n    for(i = [-30, 0, 30]) {\n        translate([i, 0, 5]) {\n            difference() {\n                cube([wall, 60, 10], center=true);\n                translate([0, 0, -5]) cube([wall+0.5, 62, 12], center=true);\n            }\n        }\n    }\n}\n\n// Surface texture details\nmodule shell_texture() {\n    // Ridge details along shell surface\n    for(i = [0:15:180]) {\n        rotate([0, i, 0]) {\n            translate([10, 0, 40]) {\n                scale([50, 0.5, 25]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=1, r1=1, r2=0.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Small surface bumps\n    for(i = [0:20:200]) {\n        for(j = [0:30:120]) {\n            rotate([0, i, j]) {\n                translate([45, 0, 40]) {\n                    sphere(r=0.8);\n                }\n            }\n        }\n    }\n}\n\n// Leg support structure\nmodule legs() {\n    // Front legs\n    translate([-30, -30, -40]) {\n        difference() {\n            cylinder(h=40, r1=4, r2=3);\n            cylinder(h=41, r1=2, r2=1);\n        }\n    }\n    \n    translate([-30, 30, -40]) {\n        difference() {\n            cylinder(h=40, r1=4, r2=3);\n            cylinder(h=41, r1=2, r2=1);\n        }\n    }\n    \n    // Rear legs\n    translate([30, -30, -40]) {\n        difference() {\n            cylinder(h=40, r1=4, r2=3);\n            cylinder(h=41, r1=2, r2=1);\n        }\n    }\n    \n    translate([30, 30, -40]) {\n        difference() {\n            cylinder(h=40, r1=4, r2=3);\n            cylinder(h=41, r1=2, r2=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shell body\n    peanut_shell_body();\n    \n    // Internal support structure\n    support_frame();\n    \n    // Surface details\n    shell_texture();\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "natural_object": "gourd",
    "openscad_code": "// Gourd Stool\n// Realistic style, medium complexity\n\n// Dimensions (mm)\ngourd_height = 90;\ngourd_width = 70;\nseat_thickness = 5;\nleg_diameter = 8;\nleg_height = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule gourd_shell() {\n    // Main gourd body - upper bulb\n    difference() {\n        // Outer shell\n        scale([1, 1.2, 1.1])\n            sphere(d=gourd_width);\n        \n        // Hollow interior\n        scale([0.9, 1.1, 0.95])\n            sphere(d=gourd_width - 2*wall_thickness);\n    }\n    \n    // Lower bulb\n    translate([0, 0, -gourd_height/3])\n        difference() {\n            scale([0.8, 1, 0.9])\n                sphere(d=gourd_width * 0.8);\n            \n            scale([0.7, 0.9, 0.8])\n                sphere(d=gourd_width * 0.8 - 2*wall_thickness);\n        }\n}\n\nmodule gourd_stem() {\n    // Stem as center support\n    translate([0, 0, gourd_height/2 + seat_thickness/2])\n        cylinder(h=seat_thickness*2, d=20, $fn=32);\n}\n\nmodule seat_surface() {\n    // Flat seating surface on top\n    translate([0, 0, gourd_height/2 + seat_thickness/2])\n        cylinder(h=seat_thickness, d=gourd_width * 0.9, $fn=64);\n}\n\nmodule legs() {\n    // Four legs for stability\n    leg_positions = [\n        [gourd_width/4, gourd_width/4],\n        [-gourd_width/4, gourd_width/4],\n        [gourd_width/4, -gourd_width/4],\n        [-gourd_width/4, -gourd_width/4]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -gourd_height/2 - leg_height/2])\n            cylinder(h=leg_height, d=leg_diameter, $fn=16);\n    }\n}\n\nmodule gourd_texture() {\n    // Add subtle ridges for realistic texture\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n            translate([0, -gourd_width/2, 0])\n                scale([1, 0.05, 1])\n                    cylinder(h=gourd_height, d=wall_thickness);\n    }\n}\n\nmodule joints() {\n    // Reinforcement rings at connection points\n    translate([0, 0, -gourd_height/2 - leg_height/2])\n        cylinder(h=wall_thickness*2, d=gourd_width*1.1, $fn=32);\n}\n\n// Assembly\nunion() {\n    gourd_shell();\n    gourd_stem();\n    seat_surface();\n    legs();\n    joints();\n    gourd_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "pine_cone",
    "openscad_code": "// Pine Cone Stool – 3D printable\n// Overall height 90 mm, Ø 120 mm, wall 2 mm\n// Optimised for FDM – no steep overhangs, 2 mm shells\n\n$fn = 48;               // smooth curves\n\n// ---------- PARAMETERS ----------\nh_total   = 90;         // total stool height\nr_top     = 60;         // seat radius\nr_base    = 50;         // footprint radius\nwall      = 2;          // shell thickness\nscale_cnt = 8;          // number of scales per ring\nrings     = 6;          // number of scale rings\ncore_h    = h_total*0.55;  // height of the hollow core\nleg_h     = h_total-core_h; // leg length\nleg_r     = 20;         // leg outer radius\nleg_wall  = 2;          // leg wall thickness\n\nmodule scale_ring(h, r_out, r_in, n){\n    // single pine-cone scale\n    module single_scale(){\n        difference(){\n            union(){\n                // outer curved scale\n                translate([-r_out/2,0,0])\n                    scale([1,1,0.3])\n                        sphere(r_out/2);\n                // flat back\n                translate([r_in/2-wall/2,0,0])\n                    cube([wall, r_out*1.2, r_out*0.3], center=true);\n            }\n            // hollow out\n            translate([0,0,-r_out])\n                cube([r_out*2, r_out*2, r_out*2], center=true);\n        }\n    }\n\n    // distribute around ring\n    for(i=[0:n-1])\n        rotate([0,0,i*360/n])\n            translate([r_out*0.85,0,h])\n                rotate([90,0,0])\n                    single_scale();\n}\n\nmodule seat(){\n    // hollow core\n    difference(){\n        cylinder(h=core_h, r1=r_base, r2=r_top);\n        translate([0,0,-0.1])\n            cylinder(h=core_h+0.2, r1=r_base-wall, r2=r_top-wall);\n    }\n    // scale rings\n    for(i=[0:rings-1]){\n        h = (i+0.5)*core_h/rings;\n        r = r_base + (r_top-r_base)*(h/core_h);\n        scale_ring(h, r, r-wall, scale_cnt);\n    }\n}\n\nmodule leg(){\n    // hollow cylinder with slight taper\n    difference(){\n        cylinder(h=leg_h, r1=leg_r, r2=leg_r-5);\n        cylinder(h=leg_h+0.2, r1=leg_r-leg_wall, r2=leg_r-leg_wall-5);\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion(){\n    seat();\n    translate([0,0,core_h])\n        leg();\n}",
    "renders": true
  },
  {
    "natural_object": "burr",
    "openscad_code": "// Realistic Burr-Style Side Table\n// Medium complexity OpenSCAD model with furniture characteristics\n// Overall dimensions: 120mm x 120mm x 450mm\n\n// Parameters\ntable_top = 120;\ntable_height = 450;\nleg_thickness = 25;\nwall_thickness = 2;\njoint_size = 8;\n\n// Main table top with burr-style interlocking pattern\nmodule table_top_burr() {\n    difference() {\n        // Main top slab\n        cube([table_top, table_top, wall_thickness * 3], center=true);\n        \n        // Burr pattern cuts\n        for (i = [0:1]) {\n            rotate([0, 0, i * 90]) {\n                // Horizontal slots\n                translate([0, -30, 0])\n                    cube([80, 15, wall_thickness * 5], center=true);\n                translate([0, 30, 0])\n                    cube([80, 15, wall_thickness * 5], center=true);\n                    \n                // Vertical slots\n                translate([-30, 0, 0])\n                    cube([15, 80, wall_thickness * 5], center=true);\n                translate([30, 0, 0])\n                    cube([15, 80, wall_thickness * 5], center=true);\n            }\n        }\n        \n        // Center burr joint\n        translate([0, 0, 0])\n            cube([20, 20, wall_thickness * 5], center=true);\n    }\n}\n\n// Interlocking leg joint piece\nmodule leg_joint(x, y) {\n    translate([x, y, -table_height/2 + wall_thickness * 3]) {\n        union() {\n            // Vertical tenon\n            cube([leg_thickness, leg_thickness, table_height/2 - wall_thickness * 3], center=true);\n            \n            // Horizontal mortise for cross support\n            translate([0, 0, table_height/4]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cube([joint_size * 2, joint_size * 2, leg_thickness], center=true);\n                        cube([joint_size, joint_size, leg_thickness + 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Burr-style cross support\nmodule cross_support() {\n    translate([0, 0, -table_height/2 + wall_thickness * 3 + table_height/4]) {\n        difference() {\n            // Main support beam\n            cube([table_top - leg_thickness * 2, joint_size * 1.5, joint_size * 1.5], center=true);\n            \n            // Mortise cuts for legs\n            for (x = [-1, 1]) {\n                for (y = [-1, 1]) {\n                    translate([x * (table_top/2 - leg_thickness), y * (table_top/2 - leg_thickness), 0])\n                        cube([joint_size, joint_size * 1.5 + 2, joint_size * 1.5 + 2], center=true);\n                }\n            }\n            \n            // Decorative burr pattern\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([25, 0, 0])\n                        cube([40, joint_size * 1.5 + 2, joint_size], center=true);\n            }\n        }\n    }\n}\n\n// Legs with burr-style joints\nmodule legs() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_top/2 - leg_thickness/2), y * (table_top/2 - leg_thickness/2), 0]) {\n                difference() {\n                    // Main leg post\n                    cube([leg_thickness, leg_thickness, table_height], center=true);\n                    \n                    // Burr joint cutouts\n                    translate([x * leg_thickness/2, 0, -table_height/4])\n                        cube([wall_thickness * 3, leg_thickness - wall_thickness * 2, joint_size * 2], center=true);\n                    translate([0, y * leg_thickness/2, -table_height/4])\n                        cube([leg_thickness - wall_thickness * 2, wall_thickness * 3, joint_size * 2], center=true);\n                }\n                \n                // Add leg joint\n                leg_joint(x * (table_top/2 - leg_thickness/2), y * (table_top/2 - leg_thickness/2));\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, table_height/2 + wall_thickness * 1.5]) {\n    table_top_burr();\n}\ncross_support();\nlegs();",
    "renders": true
  },
  {
    "natural_object": "pod",
    "openscad_code": "// Pod Chair - Realistic Style, Medium Complexity\n// Inspired by modern ergonomic pod seating furniture\n\nmodule pod_chair() {\n    // Main dimensions\n    seat_diameter = 80;\n    seat_height = 45;\n    wall_thickness = 2;\n    \n    // Base foundation\n    difference() {\n        // Main base cylinder\n        cylinder(h=8, d=seat_diameter + 10, $fn=64);\n        \n        // Hollow center for lighter print\n        cylinder(h=10, d=seat_diameter + 6, $fn=64);\n    }\n    \n    // Central support post\n    translate([0, 0, 8]) {\n        difference() {\n            cylinder(h=seat_height - 15, d=15, $fn=32);\n            cylinder(h=seat_height - 13, d=11, $fn=32);\n        }\n    }\n    \n    // Pod shell main body\n    translate([0, 0, seat_height - 7]) {\n        difference() {\n            // Outer shell - ellipsoid shape\n            scale([1, 0.9, 0.7])\n                sphere(d=seat_diameter, $fn=64);\n            \n            // Inner seating cavity\n            translate([0, 0, -5])\n                scale([0.85, 0.75, 0.6])\n                    sphere(d=seat_diameter - 10, $fn=64);\n            \n            // Front opening - ergonomic entry\n            translate([0, -seat_diameter/2 + 5, -seat_diameter/4])\n                rotate([0, 20, 0])\n                    cube([seat_diameter, seat_diameter, seat_diameter/2], center=true);\n        }\n    }\n    \n    // Reinforcement ribs on back\n    for(i = [-30:15:30]) {\n        rotate([0, 0, i])\n            translate([0, -seat_diameter/4, seat_height + 10])\n                cube([wall_thickness, seat_diameter/3, 20]);\n    }\n    \n    // Armrest supports\n    module armrest() {\n        translate([0, -seat_diameter/3, 0])\n            rotate([0, 30, 0])\n                difference() {\n                    cube([wall_thickness + 2, 25, 15]);\n                    translate([0, 5, 5])\n                        cube([wall_thickness + 4, 15, 10]);\n                }\n    }\n    \n    // Left armrest\n    translate([-seat_diameter/3, 0, seat_height + 5])\n        armrest();\n    \n    // Right armrest\n    translate([seat_diameter/3, 0, seat_height + 5])\n        mirror([1, 0, 0])\n            armrest();\n    \n    // Headrest cushion\n    translate([0, seat_diameter/4, seat_height + 25])\n        scale([1, 0.7, 0.5])\n            sphere(d=20, $fn=32);\n    \n    // Ventilation holes\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([0, seat_diameter/3 - 5, seat_height + 15])\n                rotate([45, 0, 0])\n                    cylinder(h=wall_thickness + 1, d=5);\n    }\n    \n    // Floor grip pads\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([seat_diameter/3, 0, 0])\n                cylinder(h=wall_thickness, d=8);\n    }\n}\n\n// Render the chair\npod_chair();",
    "renders": true
  },
  {
    "natural_object": "seed_pod",
    "openscad_code": "// Seed Pod Lounge Chair - Realistic Style\n// Overall size: ~120mm length x 70mm width x 60mm height\n\nmodule pod_shell() {\n    // Main outer shell - egg-like shape\n    scale([1, 0.7, 0.8])\n    sphere(d=60, $fn=50);\n}\n\nmodule inner_seat() {\n    // Carved out seating area\n    translate([0, 0, -5])\n    scale([0.8, 0.6, 0.6])\n    sphere(d=50, $fn=40);\n}\n\nmodule rib_structure() {\n    // Structural ribs for support\n    for(i=[-30:15:30]) {\n        rotate([0, i, 0])\n        translate([0, 0, -15])\n        scale([0.9, 0.9, 1])\n        cylinder(h=30, d1=3, d2=1, $fn=6);\n    }\n}\n\nmodule pod_opening() {\n    // Front opening cutout\n    translate([25, 0, -10])\n    rotate([0, 90, 0])\n    cylinder(h=50, d=40, $fn=40);\n}\n\nmodule base_support() {\n    // Curved base support structure\n    translate([0, 0, -25])\n    scale([1.2, 1, 0.3])\n    sphere(d=50, $fn=30);\n}\n\nmodule texture_lines() {\n    // Subtle surface texture pattern\n    for(i=[-45:5:45]) {\n        rotate([0, i, 0])\n        translate([0, 0, -20])\n        scale([0.95, 0.95, 1.05])\n        difference() {\n            sphere(d=61, $fn=50);\n            sphere(d=60, $fn=50);\n        }\n    }\n}\n\nmodule seed_details() {\n    // Small seed-like bumps on surface\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n        translate([25, 0, 10])\n        scale([1, 0.7, 0.7])\n        sphere(d=3, $fn=8);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main pod structure\n        pod_shell();\n        \n        // Add structural ribs inside\n        rib_structure();\n        \n        // Base support\n        base_support();\n        \n        // Add texture\n        texture_lines();\n        \n        // Seed details\n        seed_details();\n    }\n    \n    // Remove inner seating area\n    inner_seat();\n    \n    // Create front opening\n    pod_opening();\n}\n\n// Add small drainage/ventilation holes\nfor(i=[0:120:359]) {\n    rotate([0, 0, i])\n    translate([20, 0, -5])\n    rotate([90, 0, 0])\n    cylinder(h=20, d=2, $fn=8);\n}",
    "renders": true
  },
  {
    "natural_object": "leaf",
    "openscad_code": "// Leaf Chair - Realistic style, medium complexity\n// A comfortable leaf-shaped chair with organic curves and structural support\n\n$fn = 64;  // Smooth curves\n\n// Overall dimensions: 120mm width x 100mm depth x 80mm height\n\nmodule leaf_chair() {\n    // Main leaf seat surface\n    translate([0, 0, 40]) \n    rotate([0, 0, 0])\n    leaf_surface();\n    \n    // Central stem support structure\n    translate([0, -30, 0])\n    scale([0.8, 1, 1])\n    stem_support();\n    \n    // Back support ribs\n    for(i = [-2:1:2]) {\n        translate([i * 25, 0, 20])\n        rotate([0, 10 * i, 0])\n        back_rib();\n    }\n    \n    // Leg supports\n    translate([-35, -40, 0])\n    scale([1, 0.8, 1])\n    chair_leg();\n    \n    translate([35, -40, 0])\n    scale([1, 0.8, 1])\n    chair_leg();\n    \n    // Front stabilizer bar\n    translate([0, 45, 10])\n    rotate([0, 0, 0])\n    stabilizer_bar();\n}\n\n// Organic leaf-shaped seat surface\nmodule leaf_surface() {\n    difference() {\n        // Main leaf body\n        union() {\n            // Central oval\n            scale([1.2, 1, 0.3])\n            sphere(r = 50);\n            \n            // Left lobe\n            translate([-40, 5, 0])\n            scale([0.7, 0.8, 1])\n            rotate([0, 0, -30])\n            sphere(r = 30);\n            \n            // Right lobe\n            translate([40, 5, 0])\n            scale([0.7, 0.8, 1])\n            rotate([0, 0, 30])\n            sphere(r = 30);\n        }\n        \n        // Vein grooves\n        for(i = [-3:1:3]) {\n            translate([i * 15, 0, 0])\n            scale([0.1, 1.2, 1.2])\n            rotate([0, 0, i * 5])\n            cube([10, 80, 20], center = true);\n        }\n        \n        // Main central vein\n        translate([0, 0, 0])\n        scale([0.15, 1.3, 1.3])\n        cube([10, 70, 20], center = true);\n    }\n}\n\n// Central stem support structure\nmodule stem_support() {\n    difference() {\n        // Main stem\n        rotate([90, 0, 0])\n        cylinder(h = 40, r1 = 8, r2 = 12);\n        \n        // Lightening holes\n        for(i = [10:10:30]) {\n            translate([0, 0, i])\n            cylinder(h = 5, r = 5);\n        }\n    }\n}\n\n// Back support rib\nmodule back_rib() {\n    difference() {\n        // Curved rib\n        translate([0, -20, 0])\n        rotate([0, 90, 0])\n        scale([0.4, 1.2, 1])\n        cylinder(h = 60, r = 5);\n        \n        // End cap\n        translate([0, 40, 0])\n        sphere(r = 5);\n    }\n}\n\n// Chair leg with leaf vein details\nmodule chair_leg() {\n    difference() {\n        // Main leg\n        cylinder(h = 40, r = 6);\n        \n        // Decorative vein cuts\n        for(i = [5:5:35]) {\n            translate([0, 0, i])\n            rotate([0, 0, 45])\n            cube([12, 2, 4], center = true);\n        }\n    }\n}\n\n// Front stabilizer bar\nmodule stabilizer_bar() {\n    difference() {\n        // Main bar\n        scale([1.2, 0.5, 1])\n        cylinder(h = 80, r = 5);\n        \n        // Mounting holes\n        translate([-30, 0, 0])\n        cylinder(h = 12, r = 2.5);\n        \n        translate([30, 0, 0])\n        cylinder(h = 12, r = 2.5);\n    }\n}\n\n// Assembly call\nleaf_chair();",
    "renders": true
  },
  {
    "natural_object": "fern",
    "openscad_code": "// Fern-inspired side table\n// Realistic style, medium complexity\n// Overall dimensions: 100mm diameter x 120mm height\n\n// Parameters\ntable_top_d = 100;\ntable_top_t = 8;\nstem_d = 12;\nbase_d = 60;\nbase_t = 8;\nleaf_thickness = 2;\nleaf_scale = 0.8;\n\nmodule fern_leaf(scale, rotation) {\n    // Create a single fern frond leaf\n    translate([0, 0, -leaf_thickness/2])\n    rotate([0, 0, rotation])\n    scale([scale, scale, 1])\n    union() {\n        // Main stem of leaf\n        translate([0, -25, 0])\n        cube([leaf_thickness*2, 50, leaf_thickness], center=true);\n        \n        // Leaflets along stem\n        for(i = [0:5]) {\n            angle = 30 + i * 15;\n            length = 25 - i * 3;\n            \n            // Left leaflet\n            translate([0, -20 + i * 8, 0])\n            rotate([0, 0, angle])\n            scale([0.8 - i * 0.1, 1, 1])\n            cylinder(h=leaf_thickness, r1=leaf_thickness, r2=length/2, $fn=3);\n            \n            // Right leaflet\n            translate([0, -20 + i * 8, 0])\n            rotate([0, 0, -angle])\n            scale([0.8 - i * 0.1, 1, 1])\n            cylinder(h=leaf_thickness, r1=leaf_thickness, r2=length/2, $fn=3);\n        }\n    }\n}\n\nmodule table_support() {\n    // Central stem/trunk\n    cylinder(h=100, d=stem_d, $fn=32);\n    \n    // Base\n    translate([0, 0, -base_t/2])\n    cylinder(h=base_t, d=base_d, $fn=32);\n    \n    // Root-like supports\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([base_d/2 - 10, 0, -base_t/2])\n        rotate([30, 0, 0])\n        cylinder(h=20, d1=10, d2=5, $fn=8);\n    }\n}\n\nmodule fern_table() {\n    // Table top with fern pattern\n    difference() {\n        // Main table top\n        translate([0, 0, 60 + table_top_t/2])\n        cylinder(h=table_top_t, d=table_top_d, $fn=64);\n        \n        // Central hole for stem\n        translate([0, 0, 60])\n        cylinder(h=table_top_t + 2, d=stem_d + 2, $fn=32);\n    }\n    \n    // Support structure\n    translate([0, 0, 10])\n    table_support();\n    \n    // Decorative fern fronds on table edge\n    for(i = [0:5]) {\n        angle = i * 60;\n        radius = table_top_d/2 - 10;\n        translate([cos(angle) * radius, sin(angle) * radius, 60 + table_top_t])\n        rotate([0, 0, angle + 90])\n        fern_leaf(leaf_scale, 0);\n    }\n    \n    // Additional fronds between main ones\n    for(i = [0:5]) {\n        angle = i * 60 + 30;\n        radius = table_top_d/2 - 5;\n        translate([cos(angle) * radius, sin(angle) * radius, 60 + table_top_t])\n        rotate([0, 0, angle + 90])\n        fern_leaf(leaf_scale * 0.7, 0);\n    }\n}\n\n// Render the complete table\nfern_table();",
    "renders": true
  },
  {
    "natural_object": "frond",
    "openscad_code": "// Frond-inspired side table - realistic style, medium complexity\n// Dimensions: 120mm diameter, 450mm height\n\n// Parameters\nfrond_count = 7;\nstem_d = 12;\nstem_h = 400;\nbase_d = 100;\nbase_h = 8;\nfrond_w = 35;\nfrond_t = 2.5;\njoint_d = 20;\njoint_h = 15;\n\n// Main assembly\nunion() {\n    // Base\n    cylinder(d=base_d, h=base_h, $fn=64);\n    \n    // Central stem\n    translate([0, 0, base_h/2]) {\n        cylinder(d=stem_d, h=stem_h, $fn=32);\n    }\n    \n    // Frond table top at 300mm height\n    translate([0, 0, 300]) {\n        difference() {\n            // Main frond assembly\n            union() {\n                // Central hub\n                cylinder(d=30, h=8, $fn=32);\n                \n                // Fronds in circular pattern\n                for(i=[0:frond_count-1]) {\n                    rotate([0, 0, i*360/frond_count]) {\n                        translate([0, 0, 4]) {\n                            frond_shape();\n                        }\n                    }\n                }\n            }\n            \n            // Center hole for stem\n            cylinder(d=stem_d+1, h=10, $fn=32);\n        }\n    }\n    \n    // Support fronds as legs\n    for(i=[0:frond_count-1]) {\n        rotate([0, 0, i*360/frond_count + 180/frond_count]) {\n            translate([0, 0, base_h]) {\n                support_frond(i*360/frond_count + 180/frond_count);\n            }\n        }\n    }\n    \n    // Joint rings for structure\n    translate([0, 0, 150]) {\n        cylinder(d=joint_d, h=joint_h, $fn=32);\n    }\n    translate([0, 0, 250]) {\n        cylinder(d=joint_d*0.8, h=joint_h*0.8, $fn=32);\n    }\n}\n\n// Frond table top segment\nmodule frond_shape() {\n    difference() {\n        union() {\n            // Main frond body\n            hull() {\n                translate([0, 0, 0]) cube([frond_w, 20, frond_t], center=true);\n                translate([0, 55, 0]) cube([frond_w*0.6, 30, frond_t], center=true);\n                translate([0, 90, 0]) cube([frond_w*0.3, 15, frond_t], center=true);\n            }\n            \n            // Vein detail\n            translate([0, 45, frond_t/2 + 0.1]) {\n                scale([1, 2, 0.5]) {\n                    cylinder(d=3, h=frond_t, $fn=16);\n                }\n            }\n        }\n        \n        // Cutout for natural frond shape\n        for(j=[0:2]) {\n            translate([0, 25 + j*25, 0]) {\n                rotate([0, 0, j*15 - 15]) {\n                    translate([frond_w/2 - 8, 0, 0]) {\n                        cylinder(d=12, h=frond_t+1, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Support frond leg\nmodule support_frond(angle) {\n    rotate([0, 90, 0]) {\n        rotate([0, 0, -angle]) {\n            difference() {\n                hull() {\n                    translate([0, 0, 0]) {\n                        cylinder(d=10, h=20, $fn=16);\n                    }\n                    translate([0, 0, 250]) {\n                        cylinder(d=5, h=20, $fn=16);\n                    }\n                }\n                \n                // Hollow center\n                cylinder(d=6, h=260, $fn=16);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "petal",
    "openscad_code": "// Petal-inspired side table (realistic style, medium complexity)\n// Overall dimensions: 100mm diameter x 45mm height\n\n// Table parameters\npetal_count = 6;\ntable_height = 45;\ntop_thickness = 3;\nbase_height = 8;\nwall_thickness = 2;\nstem_diameter = 6;\n\n// Main petal geometry\nmodule petal_shape(length, width, thickness) {\n    difference() {\n        // Main petal body\n        scale([1, 0.65, 1])\n        cylinder(h = thickness, r1 = width/2, r2 = width/4, $fn = 20);\n        \n        // Cutout for organic shape\n        translate([0, -thickness, -0.5])\n        scale([0.8, 1.2, 1])\n        cylinder(h = thickness + 1, r1 = width/2.5, r2 = width/3.5, $fn = 20);\n    }\n}\n\n// Table top with petal edges\nmodule table_top() {\n    union() {\n        // Central disc\n        cylinder(h = top_thickness, r = 35, $fn = 40);\n        \n        // Petal extensions\n        for(i = [0 : petal_count - 1]) {\n            rotate([0, 0, i * 360/petal_count])\n            translate([25, 0, 0])\n            rotate([90, 0, 90])\n            petal_shape(35, 20, top_thickness);\n        }\n    }\n}\n\n// Stem support structure\nmodule stem() {\n    // Main stem\n    cylinder(h = table_height - top_thickness - base_height, r = stem_diameter, $fn = 20);\n    \n    // Reinforcement rings\n    translate([0, 0, 15])\n    cylinder(h = 2, r = 8, $fn = 20);\n    \n    translate([0, 0, 25])\n    cylinder(h = 2, r = 8, $fn = 20);\n}\n\n// Petal-shaped base for stability\nmodule petal_base() {\n    difference() {\n        // Main base shape\n        cylinder(h = base_height, r = 40, $fn = 40);\n        \n        // Hollow center\n        cylinder(h = base_height, r = 38, $fn = 40);\n        \n        // Cable management hole (optional)\n        translate([25, 0, -0.5])\n        rotate([0, 90, 0])\n        cylinder(h = 50, r = 4, $fn = 20);\n    }\n    \n    // Petal details on base\n    for(i = [0 : petal_count - 1]) {\n        rotate([0, 0, i * 360/petal_count + 30])\n        translate([30, 0, 0])\n        scale([1, 0.6, 0.3])\n        cylinder(h = base_height, r1 = 10, r2 = 6, $fn = 8);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_height])\nstem();\n\ntranslate([0, 0, 0])\npetal_base();\n\ntranslate([0, 0, table_height - top_thickness])\ntable_top();\n\n// Optional: subtle texture lines on petals\nmodule petal_veins() {\n    for(i = [0 : 2]) {\n        rotate([0, 0, i * 120])\n        translate([30, 0, table_height - top_thickness/2])\n        rotate([90, 0, 0])\n        scale([0.05, 0.05, 1])\n        cylinder(h = 25, r = 0.5, $fn = 6);\n    }\n}\n\n// Apply veins to each petal\nfor(i = [0 : petal_count - 1]) {\n    rotate([0, 0, i * 360/petal_count])\n    translate([25, 0, 0])\n    rotate([0, 0, 90])\n    petal_veins();\n}",
    "renders": true
  },
  {
    "natural_object": "flower_petal",
    "openscad_code": "// Flower Petal Lounge Chair - Realistic Style\n// A single lounge chair shaped like a flower petal\n\n// Main parameters\npetal_length = 120;\npetal_width = 80;\npetal_thickness = 3;\nwall_thickness = 2;\n\n// Petal base module - creates curved petal shape\nmodule petal_base() {\n    difference() {\n        // Main petal body with curved top\n        union() {\n            // Base curve\n            translate([-petal_length/2, 0, 0])\n                scale([1, 0.8, 1])\n                    sphere(d=petal_width, $fn=50);\n            \n            // Extended tip\n            translate([petal_length/3, 0, 0])\n                scale([1.2, 0.4, 0.8])\n                    sphere(d=petal_width/2, $fn=40);\n                    \n            // Connect with smooth surface\n            hull() {\n                translate([-petal_length/2, 0, 0])\n                    sphere(d=petal_width/1.5, $fn=30);\n                translate([petal_length/2, 0, 0])\n                    sphere(d=petal_width/2.5, $fn=30);\n            }\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -wall_thickness])\n            scale([0.85, 0.85, 0.8])\n                petal_solid();\n    }\n}\n\n// Solid petal for hollowing\nmodule petal_solid() {\n    union() {\n        translate([-petal_length/2, 0, 0])\n            scale([1, 0.8, 1])\n                sphere(d=petal_width, $fn=50);\n        translate([petal_length/3, 0, 0])\n            scale([1.2, 0.4, 0.8])\n                sphere(d=petal_width/2, $fn=40);\n        hull() {\n            translate([-petal_length/2, 0, 0])\n                sphere(d=petal_width/1.5, $fn=30);\n            translate([petal_length/2, 0, 0])\n                sphere(d=petal_width/2.5, $fn=30);\n        }\n    }\n}\n\n// Chair legs - petal vein structure\nmodule petal_veins() {\n    // Central vein\n    translate([0, 0, -10])\n        rotate([90, 0, 0])\n            cylinder(h=20, d1=8, d2=5, $fn=20);\n    \n    // Side support veins\n    for(i=[-1, 1]) {\n        translate([petal_length/4, i*petal_width/3, -8])\n            rotate([85, i*10, 0])\n                cylinder(h=15, d1=6, d2=4, $fn=16);\n    }\n    \n    // Rear support\n    translate([-petal_length/2, 0, -8])\n        rotate([95, 0, 0])\n            cylinder(h=12, d1=7, d2=4, $fn=16);\n}\n\n// Seat surface with gentle curve\nmodule seat_surface() {\n    translate([0, 0, petal_thickness])\n        scale([0.9, 0.9, 0.3])\n            difference() {\n                petal_solid();\n                translate([0, 0, -5])\n                    scale([0.9, 0.9, 0.5])\n                        petal_solid();\n            }\n}\n\n// Backrest support ridges\nmodule backrest_ridges() {\n    for(i=[-2:2]) {\n        translate([i*petal_length/8, 0, petal_thickness + 5])\n            scale([1, 0.3, 0.5])\n                rotate([15, 0, 0])\n                    cube([petal_length/6, petal_width/3, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main petal chair body\n    petal_base();\n    \n    // Seat surface\n    seat_surface();\n    \n    // Structural veins as legs\n    petal_veins();\n    \n    // Comfort ridges\n    backrest_ridges();\n}\n\n// Add subtle texture with small spheres\nfor(x=[-petal_length/2:5:petal_length/2]) {\n    for(y=[-petal_width/2:5:petal_width/2]) {\n        if(norm([x,y]) < petal_width/2 * 0.9) {\n            translate([x, y, petal_thickness + 2 + sin(x/10)*2])\n                sphere(d=1.5, $fn=8);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "rose_petal",
    "openscad_code": "// Rose Petal Side Table - Realistic Style with Medium Complexity\n// Overall dimensions: 120mm diameter, 450mm height\n// Wall thickness: 2mm throughout\n\n// Petal generation module\nmodule petal(length, width, thickness, curl) {\n    difference() {\n        // Main petal body - tapered elliptical shape\n        scale([1, width/length, thickness/length]) \n            sphere(d = length);\n        \n        // Create petal curve using difference\n        translate([0, -width/2, 0])\n            cube([length*2, width, thickness*2], center = true);\n        \n        // Add curl at tip\n        translate([length/2 - curl*2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = curl*2, r1 = curl, r2 = 0, $fn = 20);\n    }\n}\n\n// Petal support frame structure\nmodule petal_frame(radius, height) {\n    // Central column\n    cylinder(h = height, r = 5, $fn = 32);\n    \n    // Petal attachment points\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([radius*0.8, 0, height*0.9])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r = 2, $fn = 16);\n    }\n    \n    // Base ring for stability\n    translate([0, 0, 5])\n        cylinder(h = 10, r = 30, $fn = 32);\n}\n\n// Create table top with petal arrangement\nmodule table_top() {\n    difference() {\n        // Main table top disk\n        cylinder(h = 8, r = 60, $fn = 64);\n        \n        // Hollow center\n        cylinder(h = 10, r = 20, $fn = 32);\n    }\n    \n    // Generate 12 rose petals around edge\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([45, 0, 6])\n                rotate([90, 0, 0])\n                    petal(30, 15, 2, 5);\n    }\n    \n    // Inner petal ring\n    for(i = [0:11]) {\n        rotate([0, 0, i*30 + 15])\n            translate([25, 0, 6])\n                rotate([90, 0, 0])\n                scale([0.7, 0.7, 1])\n                    petal(25, 12, 2, 4);\n    }\n}\n\n// Leg assembly with natural stem-like appearance\nmodule table_leg() {\n    union() {\n        // Main leg - tapered cylinder\n        cylinder(h1 = 400, r1 = 12, r2 = 8, $fn = 32);\n        \n        // Decorative rings at intervals\n        for(j = [1:4]) {\n            translate([0, 0, j*90])\n                cylinder(h = 4, r = 14, $fn = 32);\n        }\n        \n        // Base support\n        translate([0, 0, 400])\n            cylinder(h = 15, r = 35, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, 400])\n        table_top();\n    \n    // Leg\n    translate([0, 0, 0])\n        table_leg();\n    \n    // Hidden support structure\n    translate([0, 0, 390])\n        cylinder(h = 15, r = 50, $fn = 32);\n}",
    "renders": true
  },
  {
    "natural_object": "blade_of_grass",
    "openscad_code": "// Blade of Grass Stool – OpenSCAD\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 36;         // Smooth curves\nwall = 2;         // Printable wall thickness\n\n// Overall stool parameters\nbase_d = 60;\nbase_h = 6;\nstem_h = 120;\nblade_l = 110;\nblade_w = 45;\nblade_t = wall;\n\nmodule blade_of_grass_stool() {\n    // Circular base for stability\n    difference() {\n        cylinder(d = base_d, h = base_h, center = false);\n        translate([0, 0, -0.1])\n            cylinder(d = base_d - 2*wall, h = base_h + 0.2, center = false);\n    }\n\n    // Stem (hollow cylinder)\n    translate([0, 0, base_h]) {\n        difference() {\n            cylinder(d = 30, h = stem_h);\n            translate([0, 0, -0.1])\n                cylinder(d = 30 - 2*wall, h = stem_h + 0.2);\n        }\n    }\n\n    // Top seating disk with gentle dome\n    translate([0, 0, base_h + stem_h])\n        difference() {\n            scale([1, 1, 0.3])\n                sphere(d = 32);\n            translate([0, 0, -0.1])\n                sphere(d = 32 - 2*wall);\n        }\n\n    // Blade “petals” radiating from top edge\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n        translate([0, 15, base_h + stem_h + 2])\n        rotate([0, 20, 0])\n        blade(blade_l, blade_w, blade_t);\n    }\n}\n\n// Single grass blade module – tapered leaf\nmodule blade(l, w, t) {\n    linear_extrude(height = t, center = true, scale = 0.1)\n    polygon([\n        [0,    0],\n        [l*0.4, w*0.3],\n        [l,    w*0.1],\n        [l,   -w*0.1],\n        [l*0.4, -w*0.3],\n        [0,    0]\n    ]);\n}\n\nblade_of_grass_stool();",
    "renders": true
  },
  {
    "natural_object": "reed",
    "openscad_code": "// Reed-inspired side table (realistic style)\n// Overall size: 120mm diameter, 380mm height\n\n$fn = 32;\n\n// Main parameters\ntable_top_d = 120;\ntable_top_t = 8;\nleg_count = 3;\nleg_outer_r = 6;\nleg_inner_r = 4;\nnode_spacing = 40;\nsegments = 9;\n\n// Reed node module\nmodule reed_node(height) {\n    difference() {\n        cylinder(h = height * 1.2, r = leg_outer_r + 1, center = true);\n        cylinder(h = height * 1.3, r = leg_inner_r, center = true);\n    }\n}\n\n// Reed segment with natural taper\nmodule reed_segment(h, r_bottom, r_top) {\n    hull() {\n        translate([0, 0, -h/2]) cylinder(h = 0.1, r = r_bottom);\n        translate([0, 0,  h/2]) cylinder(h = 0.1, r = r_top);\n    }\n}\n\n// Single reed leg\nmodule reed_leg() {\n    union() {\n        // Base segment\n        reed_segment(40, leg_outer_r, leg_outer_r * 0.95);\n        \n        // Reed body with nodes\n        for(i = [1:segments]) {\n            translate([0, 0, i * node_spacing]) {\n                reed_node(4);\n                translate([0, 0, 2]) \n                    reed_segment(node_spacing - 4, leg_outer_r * 0.95, leg_outer_r * 0.9);\n            }\n        }\n        \n        // Top segment\n        translate([0, 0, (segments + 1) * node_spacing - 20])\n            reed_segment(40, leg_outer_r * 0.9, leg_outer_r * 0.85);\n    }\n}\n\n// Reed pattern table top\nmodule table_top() {\n    difference() {\n        // Main disc\n        cylinder(h = table_top_t, r = table_top_d/2);\n        \n        // Reed pattern cutouts\n        for(i = [0:19]) {\n            rotate([0, 0, i * 18]) {\n                translate([table_top_d/2 * 0.3, 0, -1]) {\n                    scale([1, 0.6, 1])\n                        cylinder(h = table_top_t + 2, r = 4);\n                }\n                translate([table_top_d/2 * 0.6, 0, -1]) {\n                    scale([1, 0.6, 1])\n                        cylinder(h = table_top_t + 2, r = 3);\n                }\n            }\n        }\n        \n        // Central hole\n        cylinder(h = table_top_t + 2, r = 15);\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, (segments + 1) * node_spacing + 20])\n        table_top();\n    \n    // Legs\n    for(i = [0:leg_count-1]) {\n        rotate([0, 0, i * (360/leg_count)]) {\n            translate([table_top_d/2 * 0.4, 0, 0]) {\n                rotate([75, 0, 0])\n                    reed_leg();\n            }\n        }\n    }\n    \n    // Central support ring\n    difference() {\n        cylinder(h = 8, r = table_top_d/2 * 0.35);\n        cylinder(h = 10, r = 10);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "cattail",
    "openscad_code": "// Cattail-inspired side table (realistic style, medium complexity)\n// Dimensions: 120mm tall x 80mm diameter top\n\n// Parameters\n$fn = 24;\nwall_thickness = 2;\nstem_diameter = 8;\nbase_diameter = 60;\ntop_diameter = 80;\nheight = 120;\n\n// Main stem structure\nmodule main_stem() {\n    // Central support column\n    cylinder(h=height*0.85, d=stem_diameter, center=false);\n    \n    // Add reinforcing rings at intervals\n    for(i=[1:3]) {\n        translate([0,0,i*height*0.25]) \n        cylinder(h=wall_thickness*1.5, d=stem_diameter*1.4, center=false);\n    }\n}\n\n// Bulrush head (table top support)\nmodule cattail_head() {\n    // Main bulb shape\n    translate([0,0,height*0.85])\n    scale([1,1,0.7])\n    sphere(d=top_diameter*0.6);\n    \n    // Add realistic texture with overlapping scales\n    for(angle=[0:15:345]) {\n        rotate([0,0,angle])\n        translate([top_diameter*0.25, 0, height*0.85])\n        scale([0.3,0.1,0.2])\n        rotate([90,0,0])\n        cylinder(h=top_diameter*0.3, d1=top_diameter*0.15, d2=0, center=false);\n    }\n}\n\n// Table top surface\nfunction top_shape(r) = r * (1 + 0.1 * sin(8 * atan2(r*sin(1), r*cos(1))));\nmodule table_top() {\n    // Create organic table top shape\n    difference() {\n        // Main top disk with wavy edge\n        translate([0,0,height*0.9])\n        linear_extrude(height=wall_thickness*2)\n        polygon(\n            [for(i=[0:5:359]) \n                let(r=top_shape(top_diameter/2))\n                [r*cos(i), r*sin(i)]\n            ]\n        );\n        \n        // Hollow out center for weight reduction\n        translate([0,0,height*0.9+wall_thickness*0.5])\n        cylinder(h=wall_thickness*3, d=top_diameter*0.6, center=false);\n    }\n    \n    // Add decorative edge trim resembling cattail leaves\n    for(i=[0:30:359]) {\n        rotate([0,0,i])\n        translate([top_diameter/2, 0, height*0.9+wall_thickness])\n        rotate([90,0,0])\n        scale([0.3,1,0.1])\n        cylinder(h=15, d1=wall_thickness*3, d2=wall_thickness, center=false);\n    }\n}\n\n// Base for stability\nmodule cattail_base() {\n    // Flared root structure\n    difference() {\n        // Main base cone\n        cylinder(h1=height*0.15, h2=0, r1=base_diameter/2, r2=stem_diameter/2, center=false);\n        \n        // Hollow for material saving\n        translate([0,0,wall_thickness])\n        cylinder(h1=height*0.15-wall_thickness*2, h2=0, r1=base_diameter/2-wall_thickness, r2=stem_diameter/2-wall_thickness, center=false);\n    }\n    \n    // Root tendrils for stability\n    for(angle=[0:45:315]) {\n        rotate([0,0,angle])\n        translate([base_diameter*0.3,0,0])\n        rotate([0,0,30])\n        scale([1,1,0.3])\n        cylinder(h=height*0.12, d=wall_thickness*2, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Structural elements\n    cattail_base();\n    main_stem();\n    \n    // Decorative elements\n    cattail_head();\n    table_top();\n}",
    "renders": true
  },
  {
    "natural_object": "bamboo_cane",
    "openscad_code": "// Bamboo side table (Ø120 mm × 140 mm) made from bamboo-cane segments\n// Printable with 2 mm walls, no steep overhangs, natural node details\n\n$fn = 36;               // smooth cylinders\nwall = 2;               // uniform 2 mm wall thickness\n\nmodule cane_segment(h, r=6) {\n    // single hollow cane segment with nodes\n    difference() {\n        cylinder(h=h, r=r);                // outer skin\n        translate([0,0,-.1])\n            cylinder(h=h+.2, r=r-wall);    // hollow core\n    }\n    // add two nodes\n    for(z=[h*0.3, h*0.7])\n        translate([0,0,z])\n            cylinder(h=2, r1=r+1, r2=r+1); // bulge rings\n}\n\nmodule leg() {\n    // 110 mm leg made of three stacked segments\n    translate([0,0,5]) cane_segment(35);\n    translate([0,0,42]) cane_segment(35);\n    translate([0,0,79]) cane_segment(35);\n}\n\nmodule ring(r_out, r_in, h) {\n    // thin ring for frame\n    difference() {\n        cylinder(h=h, r=r_out);\n        cylinder(h=h+0.2, r=r_in);\n    }\n}\n\nmodule top() {\n    // circular table-top 120 mm diameter, 4 mm thick\n    difference() {\n        cylinder(h=4, r=60);\n        translate([0,0,-0.1])\n            cylinder(h=4.2, r=58);         // cavity for weight saving\n    }\n    // bamboo grain ridges\n    for(a=[0:30:330])\n        rotate([0,0,a])\n            translate([45,0,2])\n                cube([10,1,2], center=true);\n}\n\nmodule stretcher() {\n    // horizontal cane stretcher between legs\n    rotate([90,0,0])\n        cane_segment(70, r=4.5);\n}\n\n// main assembly\nunion() {\n    // top\n    translate([0,0,140]) top();\n\n    // four legs\n    for(p=[[-45,-45], [45,-45], [45,45], [-45,45]])\n        translate([p[0], p[1], 0]) leg();\n\n    // lower ring frame 80 mm diameter\n    translate([0,0,30]) ring(40, 38, 4);\n\n    // four stretchers between legs\n    translate([0,-45,75]) stretcher();\n    translate([45,0,75]) rotate([0,0,90]) stretcher();\n    translate([0,45,75]) stretcher();\n    translate([-45,0,75]) rotate([0,0,90]) stretcher();\n}",
    "renders": true
  },
  {
    "natural_object": "cactus",
    "openscad_code": "// Cactus Stool / Side Table (realistic style, medium complexity)\n// Overall dimensions: 180mm tall x 120mm diameter\n// Wall thickness: 2mm throughout for 3D printing\n\nmodule cactus_stool() {\n    // Main stool top surface (flat cylinder)\n    translate([0, 0, 160])\n    cylinder(h=20, r=60, $fn=50);\n\n    // Central cactus trunk\n    translate([0, 0, 20])\n    difference() {\n        cylinder(h=140, r=35, $fn=36);\n        // Hollow interior for weight reduction\n        cylinder(h=136, r=33, $fn=36);\n    }\n\n    // Base support ring\n    translate([0, 0, 0])\n    cylinder(h=20, r=50, $fn=50);\n\n    // Three support ribs connecting base to trunk\n    for (i = [0:120:360]) {\n        rotate([0, 0, i])\n        translate([35, 0, 10])\n        difference() {\n            cube([15, 8, 20], center=true);\n            translate([0, 0, 10])\n            cube([11, 4, 20], center=true);\n        }\n    }\n\n    // Three main arms branching from trunk\n    module cactus_arm(height, angle) {\n        translate([0, 0, height])\n        rotate([0, angle, 0])\n        translate([0, 0, 35])\n        difference() {\n            cylinder(h=70, r=20, $fn=32);\n            cylinder(h=66, r=18, $fn=32);\n        }\n    }\n\n    // Position arms at 120 degree intervals\n    for (i = [0:120:360]) {\n        rotate([0, 0, i])\n        cactus_arm(100, 30);\n    }\n\n    // Small decorative flowers on top\n    module flower(x, y) {\n        translate([x, y, 180])\n        for (i = [0:72:360]) {\n            rotate([0, 0, i])\n            translate([8, 0, 0])\n            sphere(r=4, $fn=20);\n        }\n        sphere(r=5, $fn=20);\n    }\n\n    // Place flowers on top surface\n    flower(30, 0);\n    flower(-15, 26);\n    flower(-15, -26);\n\n    // Ribs texture on trunk\n    module trunk_rib(height) {\n        translate([0, 0, height])\n        difference() {\n            cylinder(h=2, r=36, $fn=36);\n            cylinder(h=2.1, r=35, $fn=36);\n        }\n    }\n\n    // Add ribs every 10mm\n    for (h = [30:10:150]) {\n        trunk_rib(h);\n    }\n\n    // Arm ribs\n    module arm_rib(height, arm_angle) {\n        translate([0, 0, height])\n        rotate([0, arm_angle, 0])\n        translate([0, 0, 35])\n        difference() {\n            cylinder(h=2, r=21, $fn=32);\n            cylinder(h=2.1, r=20, $fn=32);\n        }\n    }\n\n    // Add ribs to each arm\n    for (i = [0:120:360]) {\n        for (h = [110:10:160]) {\n            rotate([0, 0, i])\n            arm_rib(h, 30);\n        }\n    }\n}\n\n// Render the complete cactus stool\ncactus_stool();",
    "renders": true
  },
  {
    "natural_object": "cactus_pad",
    "openscad_code": "// Cactus Pad Stool - Realistic Style\n// Medium complexity with 3D-printable structure\n\n$fn = 32;\n\nmodule cactus_pad_oval(width, length, height, thickness) {\n    // Create a cactus pad shape using scaled spheres\n    scale([width/length, 1, height/length])\n    sphere(d = length);\n}\n\nmodule cactus_pad_structure() {\n    // Main pad - slightly curved organic shape\n    union() {\n        // Top surface with gentle curvature\n        translate([0, 0, 40]) {\n            scale([1, 0.8, 0.3])\n            cactus_pad_oval(80, 100, 20, 2);\n        }\n        \n        // Bottom surface\n        translate([0, 0, 2]) {\n            scale([0.9, 0.75, 0.2])\n            cactus_pad_oval(75, 95, 15, 2);\n        }\n        \n        // Structural ribs for strength\n        for (i = [-30:30:30]) {\n            translate([i, 0, 20]) {\n                cube([2, 60, 38], center = true);\n            }\n        }\n    }\n}\n\nmodule cactus_spine_holes() {\n    // Create spine holes pattern on surface\n    difference() {\n        children();\n        \n        // Regular spine pattern\n        for (x = [-35:20:35]) {\n            for (y = [-35:20:35]) {\n                if (abs(x) + abs(y) < 60) {\n                    translate([x, y, 40]) {\n                        rotate([90, 0, 0])\n                        cylinder(h = 5, d = 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule stool_base() {\n    // Central support column with cactus texture\n    difference() {\n        // Main support\n        cylinder(h = 38, d = 30);\n        \n        // Hollow center for material saving\n        translate([0, 0, 2])\n        cylinder(h = 34, d = 26);\n        \n        // Vertical grooves for cactus texture\n        for (i = [0:15:359]) {\n            rotate([0, 0, i])\n            translate([13, 0, 0])\n            cube([2, 2, 38]);\n        }\n    }\n}\n\nmodule furniture_feet() {\n    // Anti-slip feet pads\n    for (angle = [45:90:315]) {\n        rotate([0, 0, angle])\n        translate([38, 0, 0])\n        cylinder(h = 3, d = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main cactus pad seat\n    cactus_spine_holes() {\n        cactus_pad_structure();\n    }\n    \n    // Connect seat to base with fillet\n    translate([0, 0, 38]) {\n        difference() {\n            cylinder(h = 5, d1 = 30, d2 = 35);\n            translate([0, 0, 2])\n            cylinder(h = 3, d = 26);\n        }\n    }\n    \n    // Central support\n    stool_base();\n    \n    // Stabilizing feet\n    translate([0, 0, 0])\n    furniture_feet();\n    \n    // Additional support ribs between pad and base\n    for (angle = [0:45:359]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 20]) {\n            rotate([0, 90, 0])\n            cylinder(h = 25, d = 4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "honeycomb",
    "openscad_code": "// Honeycomb Storage Stool - Realistic Style with Medium Complexity\n// Dimensions: 120mm diameter x 45mm height\n// Features hexagonal cells with structural base and seating surface\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Overall dimensions\ndiameter = 120;\nheight = 45;\ncell_size = 15;\ncell_depth = 35;\n\n// Create honeycomb pattern\nmodule honeycomb_pattern(radius, depth) {\n    for (i = [-radius:cell_size*1.5:radius]) {\n        for (j = [-radius:cell_size*1.5:radius]) {\n            // Offset every other row\n            x_offset = (j / (cell_size*1.5)) % 2 == 0 ? 0 : cell_size*0.866;\n            \n            // Check if within circular boundary\n            if (sqrt(pow(i + x_offset, 2) + pow(j, 2)) < radius - cell_size) {\n                // Hexagonal cell\n                translate([i + x_offset, j, 0]) {\n                    linear_extrude(height = depth) {\n                        difference() {\n                            circle(r = cell_size/2);\n                            circle(r = cell_size/2 - wall);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Structural base with legs\nmodule base_structure() {\n    // Main base ring\n    difference() {\n        cylinder(h = 8, r = diameter/2, center = true);\n        cylinder(h = 10, r = diameter/2 - wall, center = true);\n    }\n    \n    // Support legs (6 legs for stability)\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([diameter/2 - wall - 5, 0, -height/2 + 4]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 10, r = 3, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Seating surface with slight dome for comfort\nmodule seating_surface() {\n    // Main seat\n    difference() {\n        translate([0, 0, height/2 - 2]) {\n            cylinder(h = 4, r = diameter/2, center = true);\n        }\n        translate([0, 0, height/2]) {\n            sphere(r = diameter/2 + 2);\n        }\n    }\n    \n    // Edge rounding for comfort\n    translate([0, 0, height/2]) {\n        difference() {\n            cylinder(h = 2, r = diameter/2);\n            cylinder(h = 2.2, r = diameter/2 - wall);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    translate([0, 0, -height/2 + 4]) {\n        base_structure();\n    }\n    \n    // Honeycomb core\n    translate([0, 0, -height/2 + 12]) {\n        honeycomb_pattern(diameter/2 - wall - 5, cell_depth);\n    }\n    \n    // Top seating surface\n    seating_surface();\n    \n    // Small ventilation holes in base\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([diameter/2 - wall - 2, 0, -height/2 + 4]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = wall, r = 1.5, center = true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "beehive",
    "openscad_code": "// Beehive side table\n// Dimensions: 100mm diameter × 120mm high\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main beehive body\nmodule hive_body() {\n    // Outer shell - stack of tapered cylinders\n    difference() {\n        union() {\n            // Top dome\n            translate([0, 0, 105])\n            scale([1, 1, 0.5])\n            sphere(d = 100);\n            \n            // Main body segments\n            for(i = [0:3]) {\n                translate([0, 0, i*25])\n                cylinder(h = 25, d1 = 90 - i*5, d2 = 95 - i*5);\n            }\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, -5])\n        cylinder(h = 120, d = 90 - 2*wall);\n    }\n}\n\n// Hexagonal comb pattern for decoration\nmodule hex_pattern(height) {\n    for(x = [-3:3]) {\n        for(y = [-2:2]) {\n            translate([x*12 + (y%2)*6, y*10.4, height]) {\n                difference() {\n                    cylinder(h = 1, d = 6);\n                    cylinder(h = 2, d = 4);\n                }\n            }\n        }\n    }\n}\n\n// Entrance holes\nmodule entrance_holes() {\n    // Main entrance\n    translate([0, -42, 25])\n    rotate([90, 0, 0])\n    cylinder(h = wall + 1, d = 20);\n    \n    // Additional small holes\n    for(i = [-1, 1]) {\n        translate([i*20, -42, 45])\n        rotate([90, 0, 0])\n        cylinder(h = wall + 1, d = 8);\n    }\n}\n\n// Support base and legs\nmodule base_support() {\n    // Round base plate\n    difference() {\n        cylinder(h = 8, d = 110);\n        cylinder(h = 9, d = 90);\n    }\n    \n    // Legs for stability\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n        translate([40, 0, 4])\n        cube([20, wall*2, 8], center = true);\n    }\n}\n\n// Small drawer at bottom for storage\nmodule storage_drawer() {\n    // Drawer front\n    translate([0, 0, 8])\n    difference() {\n        cylinder(h = 15, d = 85);\n        \n        // Front face recess\n        translate([0, 0, -1])\n        cylinder(h = 17, d = 80);\n        \n        // Handle hole\n        translate([0, 35, 7])\n        rotate([90, 0, 0])\n        cylinder(h = wall + 1, d = 10);\n    }\n    \n    // Drawer box\n    translate([0, 0, 8])\n    difference() {\n        cylinder(h = 12, d = 80 - wall*2);\n        translate([0, 0, wall])\n        cylinder(h = 13, d = 80 - wall*4);\n    }\n}\n\n// Assembly\nbase_support();\nhive_body();\nentrance_holes();\n\n// Add decorative elements\nfor(i = [1:4]) {\n    hex_pattern(i*25);\n}\n\n// Storage drawer\nstorage_drawer();",
    "renders": true
  },
  {
    "natural_object": "wasp_nest",
    "openscad_code": "// Wasp Nest Lamp / Side Table\n// Overall size: 100 mm diameter, 150 mm height\n// Wall thickness: 2 mm throughout for 3D printing\n// Modeled as a hollow wasp nest with structural base\n\n// Main parameters\nnest_d = 100;\nnest_h = 120;\nwall_t = 2;\nbase_h = 30;\nlayer_h = 8;\nlayers = floor(nest_h / layer_h);\n\n// Create the main nest structure\nmodule nest_shell() {\n    difference() {\n        // Outer shell with organic layers\n        union() {\n            for (i = [0:layers-1]) {\n                translate([0, 0, i * layer_h]) {\n                    // Scale each layer slightly for taper\n                    scale([1 - 0.008 * i, 1 - 0.008 * i, 1]) {\n                        // Organic wavy cylinder for each layer\n                        cylinder(h = layer_h + 0.5, d = nest_d * (1 - 0.005 * i) + sin(i * 25) * 3, $fn = 64);\n                    }\n                }\n            }\n        }\n        \n        // Hollow out the center\n        translate([0, 0, -1]) {\n            cylinder(h = nest_h + 2, d = nest_d - 2 * wall_t, $fn = 64);\n        }\n        \n        // Entrance hole at front\n        translate([(nest_d - wall_t)/2 * 0.8, 0, base_h + 15]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = wall_t + 2, d = 12, $fn = 32);\n            }\n        }\n    }\n}\n\n// Create hexagonal cell pattern inside\nmodule hex_cells() {\n    cell_d = 3.5;\n    rows = floor((nest_d - 2 * wall_t) / (cell_d * 1.5));\n    \n    difference() {\n        // Thin shell for cell walls\n        translate([0, 0, base_h + wall_t]) {\n            cylinder(h = nest_h - base_h - 2 * wall_t, d = nest_d - 2 * wall_t, $fn = 6);\n        }\n        \n        // Hexagonal holes\n        for (r = [0:rows-1]) {\n            for (c = [0:5]) {\n                angle = c * 60 + (r % 2) * 30;\n                radius = (r + 1) * cell_d * 0.75;\n                \n                rotate([0, 0, angle]) {\n                    translate([radius, 0, base_h + wall_t + 1]) {\n                        cylinder(h = nest_h - base_h - 2 * wall_t, d = cell_d, $fn = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Furniture base with legs\nmodule furniture_base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_h, d = nest_d, $fn = 64);\n        \n        // Hollow center for cable routing\n        translate([0, 0, -1]) {\n            cylinder(h = base_h + 2, d = 20, $fn = 32);\n        }\n    }\n    \n    // Three support legs\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([nest_d/2 * 0.7, -5, 0]) {\n                cube([20, 10, base_h]);\n            }\n        }\n    }\n    \n    // Cable entry notch\n    translate([nest_d/2 * 0.7, -5, 0]) {\n        cube([15, 10, 5]);\n    }\n}\n\n// Organic texture bumps on surface\nmodule surface_texture() {\n    for (i = [0:layers-1]) {\n        for (j = [0:12]) {\n            angle = j * 30 + i * 7;\n            radius = (nest_d/2) * (1 - 0.005 * i) + sin(i * 25) * 1.5;\n            \n            rotate([0, 0, angle]) {\n                translate([radius, 0, i * layer_h + layer_h/2]) {\n                    sphere(d = 2 + sin(i * j) * 1, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    furniture_base();\n    \n    translate([0, 0, base_h]) {\n        union() {\n            nest_shell();\n            hex_cells();\n            surface_texture();\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "ant_hill",
    "openscad_code": "// Ant Hill Furniture - Realistic Style\n// A 3D printable ant hill structure that doubles as a unique furniture piece\n// Dimensions: 120mm diameter, 80mm height\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule ant_hill() {\n    // Base hill structure\n    difference() {\n        // Main mound\n        translate([0, 0, 30])\n            scale([1, 0.8, 0.7])\n            sphere(d = 100);\n        \n        // Hollow interior\n        translate([0, 0, 32])\n            scale([1, 0.8, 0.65])\n            sphere(d = 96);\n    }\n    \n    // Entrance tunnel\n    translate([0, -35, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 30, r1 = 12, r2 = 8);\n    \n    // Entrance tunnel interior\n    translate([0, -35, 17])\n        rotate([90, 0, 0])\n        cylinder(h = 30, r1 = 10, r2 = 6);\n    \n    // Secondary entrance\n    translate([-25, 25, 35])\n        rotate([60, 45, 0])\n        cylinder(h = 20, r1 = 8, r2 = 5);\n    \n    // Support base ring\n    difference() {\n        cylinder(h = 10, r1 = 55, r2 = 52);\n        cylinder(h = 11, r1 = 50, r2 = 50);\n    }\n    \n    // Structural ribs\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([40, 0, 5])\n                cube([wall_thickness, 5, 25]);\n    }\n    \n    // Surface texture - small mounds\n    for (i = [0:30:359]) {\n        for (j = [0:20:40]) {\n            rotate([0, 0, i])\n                translate([35 - j, 0, 25 + j/3])\n                    sphere(d = 4 + j/5);\n        }\n    }\n    \n    // Ventilation holes\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([20, 0, 45])\n                rotate([45, 0, 0])\n                cylinder(h = 15, r = 3);\n    }\n    \n    // Ventilation holes interior\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([20, 0, 45])\n                rotate([45, 0, 0])\n                cylinder(h = 15, r = 1.5);\n    }\n    \n    // Furniture legs\n    translate([-30, -30, 0])\n        cylinder(h = 20, r = 5);\n    translate([30, -30, 0])\n        cylinder(h = 20, r = 5);\n    translate([-30, 30, 0])\n        cylinder(h = 20, r = 5);\n    translate([30, 30, 0])\n        cylinder(h = 20, r = 5);\n    \n    // Leg supports\n    translate([-30, 0, 10])\n        cube([60, 2, 2]);\n    translate([0, -30, 10])\n        cube([2, 60, 2]);\n}\n\n// Render the ant hill\nant_hill();",
    "renders": true
  },
  {
    "natural_object": "termite_mound",
    "openscad_code": "// Termite Mound Stool\n// Medium complexity realistic style\n// Overall height 120 mm, base diameter 100 mm\n\n// Main mound body\nmodule mound_body() {\n    difference() {\n        // Central cone core\n        cylinder(h=80, r1=45, r2=35, $fn=50);\n        \n        // Ventilation shafts\n        for(a=[0:120:359]) {\n            rotate([0, 0, a])\n            translate([20, 0, 60])\n            rotate([90, 0, 0])\n            cylinder(h=30, r=3, $fn=8);\n        }\n        \n        // Entrance holes around base\n        for(a=[0:30:359]) {\n            rotate([0, 0, a])\n            translate([40, 0, 10])\n            rotate([0, 90, 0])\n            cylinder(h=5, r=4, $fn=6);\n        }\n    }\n}\n\n// Upper spire structure\nmodule spire() {\n    union() {\n        // Main spire\n        translate([0, 0, 80])\n        cylinder(h=20, r1=35, r2=25, $fn=30);\n        \n        // Crown details\n        for(a=[0:72:359]) {\n            rotate([0, 0, a])\n            translate([20, 0, 100])\n            cylinder(h=10, r=4, $fn=6);\n        }\n    }\n}\n\n// Organic surface bumps\nmodule surface_texture() {\n    for(i=[0:7]) {\n        for(j=[0:15]) {\n            rotate([0, 0, j*24 + i*5])\n            translate([30 + i*3, 0, 5 + i*10])\n            sphere(r=2 + sin(i*j)*1, $fn=8);\n        }\n    }\n}\n\n// Internal support structure for stool top\nmodule internal_support() {\n    difference() {\n        // Support cylinder\n        translate([0, 0, 20])\n        cylinder(h=60, r=30, $fn=20);\n        \n        // Weight reduction holes\n        for(a=[0:90:359]) {\n            rotate([0, 0, a])\n            translate([15, 0, 50])\n            cylinder(h=20, r=6, $fn=6);\n        }\n        \n        // Central cable channel\n        translate([0, 0, 20])\n        cylinder(h=60, r=3, $fn=8);\n    }\n}\n\n// Stool seating surface\nmodule seating_top() {\n    difference() {\n        // Main seat\n        translate([0, 0, 100])\n        cylinder(h=20, r=50, $fn=50);\n        \n        // Comfortable recess\n        translate([0, 0, 110])\n        sphere(r=52, $fn=30);\n        \n        // Drainage grooves\n        for(a=[0:45:359]) {\n            rotate([0, 0, a])\n            translate([25, 0, 102])\n            cube([3, 50, 2], center=true);\n        }\n    }\n}\n\n// Base foundation\nmodule base_foundation() {\n    difference() {\n        // Wide base for stability\n        cylinder(h=20, r=50, $fn=40);\n        \n        // Ground contact pattern\n        for(a=[0:60:359]) {\n            rotate([0, 0, a])\n            translate([35, 0, 0])\n            cube([8, 4, 18], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base_foundation();\n    \n    // Internal structure\n    internal_support();\n    \n    // External mound\n    union() {\n        mound_body();\n        spire();\n        surface_texture();\n    }\n    \n    // Seating surface\n    seating_top();\n}",
    "renders": true
  },
  {
    "natural_object": "cobweb",
    "openscad_code": "// Realistic Cobweb Side Table\n// 3D printable with 2mm wall thickness, 100mm diameter\n\n// Parameters\nweb_diameter = 100;\nweb_height = 45;\nleg_height = 35;\nleg_radius = 3;\nweb_thickness = 2;\nstrand_segments = 24;\nradial_strands = 12;\n\n// Main table\nunion() {\n    // Central support hub\n    cylinder(h=web_height*0.7, r1=8, r2=5, center=false);\n    \n    // Web platform\n    translate([0, 0, web_height*0.7 - 1]) {\n        // Radial strands\n        for(i = [0 : 360/radial_strands : 360-360/radial_strands]) {\n            rotate([0, 0, i]) {\n                linear_extrude(height=web_thickness, center=true) {\n                    polygon(points=[\n                        [0, 0],\n                        [web_diameter*0.4, -1.5],\n                        [web_diameter*0.4, 1.5]\n                    ]);\n                }\n            }\n        }\n        \n        // Concentric circles\n        for(r = [web_diameter*0.2 : web_diameter*0.15 : web_diameter*0.45]) {\n            rotate_extrude(angle=360, $fn=strand_segments) {\n                translate([r, 0, 0]) {\n                    square([web_thickness, web_thickness], center=true);\n                }\n            }\n        }\n    }\n    \n    // Outer web ring\n    translate([0, 0, web_height*0.7 - 1]) {\n        difference() {\n            cylinder(h=web_thickness*2, r=web_diameter/2, center=true, $fn=48);\n            cylinder(h=web_thickness*2.1, r=web_diameter/2 - web_thickness, center=true, $fn=48);\n        }\n    }\n    \n    // Legs\n    for(i = [0 : 120 : 240]) {\n        rotate([0, 0, i]) {\n            translate([web_diameter*0.35, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=leg_height, r1=leg_radius, r2=leg_radius*0.7, center=false, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Leg base ring for stability\n    translate([0, 0, -leg_height+5]) {\n        difference() {\n            cylinder(h=6, r=web_diameter*0.4, $fn=24);\n            cylinder(h=6.1, r=web_diameter*0.4 - web_thickness, $fn=24);\n        }\n    }\n    \n    // Reinforcement struts between legs\n    for(i = [0 : 120 : 240]) {\n        rotate([0, 0, i]) {\n            translate([web_diameter*0.35, 0, -leg_height/2 + 5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=web_diameter*0.6, r=leg_radius*0.6, center=true, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Web texture detail\nmodule web_detail() {\n    translate([0, 0, web_height*0.7]) {\n        for(i = [0 : 30 : 330]) {\n            rotate([0, 0, i]) {\n                for(j = [web_diameter*0.25 : web_diameter*0.05 : web_diameter*0.45]) {\n                    translate([j, 0, 0]) {\n                        sphere(d=web_thickness*0.8, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add web details\nweb_detail();",
    "renders": true
  },
  {
    "natural_object": "spider_web",
    "openscad_code": "// Spider Web Side Table\n// Realistic style, medium complexity\n// Dimensions: 120mm diameter x 45mm height\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Main table top - circular with web pattern\nmodule table_top() {\n    // Solid top base - 2mm thick\n    difference() {\n        cylinder(h=2, r=60, center=false);\n        \n        // Web pattern grooves - 1mm deep\n        for(i=[0:15:360]) {\n            rotate([0, 0, i])\n                translate([0, -60, 0])\n                    cube([1, 120, 2], center=true);\n        }\n        \n        // Concentric web rings\n        for(r=[15:15:45]) {\n            difference() {\n                cylinder(h=2, r=r+0.5, center=false);\n                cylinder(h=2, r=r-0.5, center=false);\n            }\n        }\n    }\n}\n\n// Web strand legs - 8 legs like spider\nmodule web_strand_leg(angle, radius) {\n    // Main strand - 2mm diameter\n    translate([0, 0, 0])\n        rotate([90, 0, angle])\n            cylinder(h=radius, r=1, center=true);\n    \n    // Support rings every 20mm\n    for(h=[20:20:radius-10]) {\n        translate([0, 0, h])\n            rotate([90, 0, angle])\n                cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Central support pillar - spider body inspired\nmodule central_support() {\n    // Main body - 20mm diameter, 40mm tall\n    cylinder(h=40, r=10, center=false);\n    \n    // Segmented texture rings\n    for(i=[1:5:38]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=2, r=10, center=false);\n                cylinder(h=2, r=8, center=false);\n            }\n    }\n    \n    // Base plate for stability\n    translate([0, 0, -2])\n        cylinder(h=2, r=15, center=false);\n}\n\n// Web anchor points - where strands meet legs\nmodule anchor_point() {\n    difference() {\n        sphere(r=3);\n        sphere(r=1);\n    }\n}\n\n// Complete table assembly\nunion() {\n    // Table top positioned at top\n    translate([0, 0, 40])\n        table_top();\n    \n    // Central support structure\n    central_support();\n    \n    // 8 web strand legs at 45 degree intervals\n    for(angle=[0:45:360]) {\n        // Position anchors on table edge\n        translate([50 * cos(angle), 50 * sin(angle), 40])\n            anchor_point();\n            \n        // Web strands extending to floor\n        translate([50 * cos(angle), 50 * sin(angle), 40])\n            web_strand_leg(0, 40);\n            \n        // Floor anchors\n        translate([50 * cos(angle), 50 * sin(angle), 0])\n            anchor_point();\n    }\n    \n    // Cross-webbing between legs for stability\n    for(i=[0:45:360]) {\n        j = (i + 45) % 360;\n        hull() {\n            translate([40 * cos(i), 40 * sin(i), 30])\n                sphere(r=1);\n            translate([40 * cos(j), 40 * sin(j), 30])\n                sphere(r=1);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "feather",
    "openscad_code": "// Feather-inspired chair with realistic proportions\n// Designed for 3D printing with 2mm walls and no overhangs\n\nwall_thickness = 2;\nfeather_length = 120;\nfeather_width = 60;\n\n// Main feather chair body\nmodule feather_chair() {\n    // Central spine\n    union() {\n        translate([0, 0, 5])\n            scale([1, 0.3, 8])\n                sphere(d=feather_length * 0.1);\n        \n        // Left side barbs\n        for(i = [1:10:feather_length/2]) {\n            translate([-i/2, feather_width/4, 5])\n                rotate([0, 0, 10])\n                    barb(i, feather_width/8 - i/10);\n        }\n        \n        // Right side barbs\n        for(i = [1:10:feather_length/2]) {\n            translate([i/2, feather_width/4, 5])\n                rotate([0, 0, -10])\n                    barb(i, feather_width/8 - i/10);\n        }\n        \n        // Seat base\n        translate([0, 0, 0])\n            cube([feather_length * 0.6, feather_width * 0.5, wall_thickness * 2], center=true);\n        \n        // Back support\n        translate([0, -feather_width/4, feather_length * 0.2])\n            rotate([100, 0, 0])\n                cube([feather_length * 0.5, wall_thickness * 2, feather_length * 0.3], center=true);\n        \n        // Leg supports\n        translate([-feather_length/4, 0, -10])\n            cylinder(h=15, d=wall_thickness * 3);\n        translate([feather_length/4, 0, -10])\n            cylinder(h=15, d=wall_thickness * 3);\n    }\n}\n\n// Individual barb structure\nmodule barb(length, width) {\n    hull() {\n        translate([0, 0, 0])\n            sphere(d=wall_thickness);\n        translate([length/2, width, 0])\n            sphere(d=wall_thickness);\n    }\n}\n\n// Chair back with feather vein detail\nmodule chair_back() {\n    difference() {\n        // Main back panel\n        translate([0, -feather_width/2, feather_length/2])\n            rotate([90, 0, 0])\n                cube([feather_length * 0.7, feather_length * 0.5, wall_thickness * 2], center=true);\n        \n        // Vein cutouts\n        for(i = [1:20:feather_length * 0.6]) {\n            translate([i - feather_length/3, -feather_width/2, feather_length/2])\n                rotate([90, 0, 0])\n                    cube([2, feather_length * 0.4, wall_thickness * 3], center=true);\n        }\n    }\n}\n\n// Assembly\nfeather_chair();\nchair_back();",
    "renders": true
  },
  {
    "natural_object": "bird_feather",
    "openscad_code": "// Bird Feather Chair - Realistic Style Medium Complexity\n\n// Overall dimensions\nchair_length = 120;\nchair_width = 60;\nchair_height = 80;\n\n// Feather parameters\nfeather_thickness = 2;\nrachis_width = 8;\nbarb_length = 25;\nbarb_thickness = 1.5;\n\nmodule feather_chair() {\n    // Central rachis structure (back support)\n    translate([0, 0, chair_height/2])\n        scale([rachis_width, chair_width*0.3, chair_height])\n            cube(1, center=true);\n    \n    // Seat platform\n    translate([0, 0, chair_height*0.3])\n        scale([chair_length*0.6, chair_width*0.8, feather_thickness*2])\n            cube(1, center=true);\n    \n    // Chair legs (barbs)\n    for (i = [-3:3]) {\n        // Front legs\n        translate([i*15 + chair_length*0.3, 0, chair_height*0.15])\n            rotate([90, 0, 0])\n                cylinder(h=chair_height*0.7, r=barb_thickness*2, $fn=8);\n        \n        // Back legs\n        translate([i*15 - chair_length*0.3, 0, chair_height*0.15])\n            rotate([90, 0, 0])\n                cylinder(h=chair_height*0.7, r=barb_thickness*2, $fn=8);\n    }\n    \n    // Feather vanes (seat and back surfaces)\n    for (i = [-5:5]) {\n        // Left vane\n        translate([i*10, -chair_width*0.35, chair_height*0.5 + i*5])\n            rotate([0, 15, 0])\n                scale([barb_length, barb_thickness, chair_height*0.3])\n                    cube(1, center=true);\n        \n        // Right vane\n        translate([i*10, chair_width*0.35, chair_height*0.5 + i*5])\n            rotate([0, -15, 0])\n                scale([barb_length, barb_thickness, chair_height*0.3])\n                    cube(1, center=true);\n    }\n    \n    // Structural cross supports between barbs\n    for (i = [-2:2]) {\n        translate([i*20, 0, chair_height*0.2])\n            rotate([90, 0, 0])\n                cylinder(h=chair_width*0.6, r=feather_thickness, $fn=6);\n    }\n    \n    // Feather tip detail (chair back curve)\n    difference() {\n        translate([chair_length*0.45, 0, chair_height*0.7])\n            scale([chair_length*0.2, chair_width*0.4, chair_height*0.4])\n                sphere(r=1, $fn=20);\n        \n        // Hollow out for weight reduction\n        translate([chair_length*0.45, 0, chair_height*0.7])\n            scale([chair_length*0.15, chair_width*0.3, chair_height*0.3])\n                sphere(r=1, $fn=20);\n    }\n    \n    // Aftershaft detail (lower back support)\n    translate([0, 0, chair_height*0.2])\n        scale([chair_length*0.3, chair_width*0.2, feather_thickness*3])\n            cube(1, center=true);\n    \n    // Calamus joint (connection point)\n    translate([-chair_length*0.4, 0, feather_thickness])\n        rotate([90, 0, 0])\n            cylinder(h=feather_thickness*2, r1=rachis_width*1.5, r2=rachis_width, $fn=8);\n}\n\n// Main assembly\nfeather_chair();",
    "renders": true
  },
  {
    "natural_object": "eagle_feather",
    "openscad_code": "// Eagle Feather Chair - Realistic Style (Medium Complexity)\n// Dimensions: 120mm x 60mm x 90mm (L x W x H)\n\n// Main feather blade\nmodule feather_blade() {\n    // Central spine\n    union() {\n        translate([0, 0, 2])\n        difference() {\n            scale([1, 0.3, 1])\n            cylinder(h=100, r1=25, r2=5, $fn=40);\n            translate([0, 0, -1])\n            scale([0.8, 0.2, 1.1])\n            cylinder(h=102, r1=24, r2=4, $fn=40);\n        }\n        \n        // Add thickness for 3D printing\n        translate([0, 0, 0])\n        scale([1, 0.3, 0.2])\n        cylinder(h=100, r1=25, r2=5, $fn=40);\n    }\n}\n\n// Feather barbs (furniture legs)\nmodule feather_barbs() {\n    // Left barbs\n    for(i = [0:5:35]) {\n        translate([i-5, 0, 0])\n        rotate([0, 90, 60-i])\n        scale([0.5, 0.5, 1])\n        cylinder(h=20+i/2, r1=2, r2=1, $fn=8);\n    }\n    \n    // Right barbs\n    for(i = [0:5:35]) {\n        translate([i-5, 0, 0])\n        rotate([0, 90, -60+i])\n        scale([0.5, 0.5, 1])\n        cylinder(h=20+i/2, r1=2, r2=1, $fn=8);\n    }\n}\n\n// Chair seat support structure\nmodule chair_support() {\n    // Base frame\n    translate([0, -30, 0])\n    cube([80, 4, 2], center=true);\n    \n    // Front support\n    translate([30, 0, 15])\n    rotate([90, 0, 0])\n    cylinder(h=30, r=2, $fn=20);\n    \n    // Back support\n    translate([-30, 0, 15])\n    rotate([90, 0, 0])\n    cylinder(h=30, r=2, $fn=20);\n}\n\n// Feather details (veins)\nmodule feather_veins() {\n    for(i = [10:10:80]) {\n        translate([i-40, 0, 3])\n        scale([0.8, 0.05, 0.5])\n        rotate([90, 0, 0])\n        cylinder(h=30, r1=15, r2=2, $fn=4);\n    }\n}\n\n// Quill (chair back)\nmodule quill() {\n    // Main quill\n    translate([-40, 0, 45])\n    rotate([90, 0, 0])\n    cylinder(h=50, r=3, $fn=20);\n    \n    // Quill base\n    translate([-40, 0, 20])\n    sphere(r=4, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Feather blade as chair back\n    feather_blade();\n    \n    // Barbs as legs\n    translate([0, -30, 0])\n    feather_barbs();\n    \n    // Structural supports\n    chair_support();\n    \n    // Feather details\n    feather_veins();\n    \n    // Quill structure\n    quill();\n}",
    "renders": true
  },
  {
    "natural_object": "peacock_feather",
    "openscad_code": "// Peacock Feather Chair Backrest\n// Realistic style, medium complexity\n// Designed for 3D printing with 2mm walls\n\n$fn = 50;\n\n// Overall dimensions\nchair_width = 120;\nchair_height = 150;\nchair_depth = 20;\n\n// Feather parameters\nstem_diameter = 6;\neye_count = 5;\neye_spacing = 25;\nfeather_taper = 0.3;\n\nmodule stem() {\n    // Central stem\n    translate([0, 0, chair_height/2])\n        cylinder(h=chair_height, d1=stem_diameter, d2=stem_diameter*feather_taper);\n}\n\nmodule barbs() {\n    // Individual barbs along stem\n    for(i = [1:15]) {\n        height = i * 8;\n        barb_length = 20 + i * 1.5;\n        for(side = [0, 1]) {\n            mirror([side == 0 ? 0 : 1, 0, 0])\n            translate([0, 0, chair_height - height])\n            rotate([0, 90, 0])\n            translate([0, 0, -barb_length/2])\n            cube([barb_length, 1.5, 0.8], center=true);\n        }\n    }\n}\n\nmodule eye(eye_size, z_pos) {\n    // Eye pattern with concentric circles\n    color(\"gold\")\n    translate([0, 0, z_pos])\n    difference() {\n        // Outer circle\n        cylinder(h=2, d=eye_size, center=true);\n        \n        // Inner circles\n        translate([0, 0, 1])\n        cylinder(h=2, d=eye_size*0.7, center=true);\n        \n        translate([0, 0, 2])\n        color(\"teal\")\n        cylinder(h=2, d=eye_size*0.4, center=true);\n        \n        // Center pupil\n        translate([0, 0, 3])\n        color(\"navy\")\n        cylinder(h=2, d=eye_size*0.2, center=true);\n    }\n}\n\nmodule eyes() {\n    // Create multiple eyes along stem\n    for(i = [0:eye_count-1]) {\n        eye_size = 20 - i * 3;\n        z_pos = chair_height - 30 - i * eye_spacing;\n        eye(eye_size, z_pos);\n    }\n}\n\nmodule support_frame() {\n    // Structural frame for furniture\n    frame_thickness = 3;\n    \n    // Top bar\n    translate([0, chair_depth/2 - frame_thickness/2, chair_height - frame_thickness/2])\n        cube([chair_width, frame_thickness, frame_thickness]);\n    \n    // Side bars\n    for(side = [-1, 1]) {\n        translate([side * chair_width/2, 0, chair_height/2])\n            cube([frame_thickness, chair_depth, chair_height]);\n    }\n    \n    // Bottom bar\n    translate([0, chair_depth/2 - frame_thickness/2, frame_thickness/2])\n        cube([chair_width, frame_thickness, frame_thickness]);\n}\n\nmodule mounting_holes() {\n    // Holes for attaching to chair frame\n    hole_diameter = 5;\n    \n    for(pos = [-40, 0, 40]) {\n        translate([pos, chair_depth/2, 10])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=hole_diameter);\n        \n        translate([pos, chair_depth/2, chair_height - 10])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=hole_diameter);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        support_frame();\n        stem();\n        barbs();\n        eyes();\n    }\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "natural_object": "ice_formation",
    "openscad_code": "// Ice Formation Bench - Realistic Style\n// Dimensions: 120mm x 40mm x 45mm\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule ice_crystal(x, y, z, h) {\n    // Creates a hexagonal ice crystal structure\n    translate([x, y, z]) {\n        cylinder(h=h, r=3, $fn=6);\n        translate([0, 0, h]) cylinder(h=2, r=2.5, $fn=6);\n    }\n}\n\nmodule ice_leg(x, y, z) {\n    // Creates a tapered ice leg with crystalline structure\n    translate([x, y, z]) {\n        // Main leg body\n        difference() {\n            cylinder(h=40, r1=6, r2=4);\n            translate([0, 0, -1]) cylinder(h=42, r1=4, r2=2);\n        }\n        \n        // Ice formations on leg\n        for(i = [0:15:40]) {\n            rotate([0, 0, i*73]) \n                ice_crystal(0, 4, i, 3 + sin(i)*2);\n        }\n        \n        // Base support\n        translate([0, 0, -2]) \n            cylinder(h=4, r=8);\n    }\n}\n\nmodule bench_surface() {\n    // Creates the main seating surface with ice-like undulations\n    difference() {\n        // Main bench shape\n        translate([0, 0, 40]) \n            cube([120, 40, 5], center=true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 40]) \n            cube([116, 36, 5], center=true);\n        \n        // Surface texture - ice ridges\n        for(x = [-55:10:55]) {\n            for(y = [-15:8:15]) {\n                translate([x, y, 42.5]) \n                    cube([8, 4, 1], center=true);\n            }\n        }\n    }\n    \n    // Side ice formations\n    for(side = [-1, 1]) {\n        translate([side*55, 0, 42.5]) {\n            difference() {\n                cube([5, 40, 5], center=true);\n                translate([0, 0, -1]) \n                    cube([1, 36, 7], center=true);\n            }\n            \n            // Dripping ice details\n            for(i = [-15:10:15]) {\n                translate([0, i, 45]) \n                    sphere(r=2);\n                translate([0, i, 47]) \n                    sphere(r=1.5);\n            }\n        }\n    }\n}\n\nmodule support_beam() {\n    // Central support beam connecting legs\n    translate([0, 0, 20]) {\n        difference() {\n            cube([80, 5, 5], center=true);\n            cube([76, 1, 1], center=true);\n        }\n        \n        // Ice crystal decorations\n        for(i = [-30:15:30]) {\n            translate([i, 0, 22.5]) \n                rotate([90, 0, 0]) \n                    cylinder(h=3, r=2, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Bench surface\n    bench_surface();\n    \n    // Support structure\n    support_beam();\n    \n    // Four legs\n    ice_leg(-50, -15, 0);\n    ice_leg(50, -15, 0);\n    ice_leg(-50, 15, 0);\n    ice_leg(50, 15, 0);\n    \n    // Corner ice formations\n    for(x = [-60, 60]) {\n        for(y = [-20, 20]) {\n            translate([x, y, 38]) {\n                difference() {\n                    cylinder(h=7, r=4);\n                    translate([0, 0, -1]) \n                        cylinder(h=9, r=2);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "icicle",
    "openscad_code": "// Icicle Side Table\n// Realistic style, medium complexity\n// Dimensions: 120mm height, 80mm diameter tabletop\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule icicle_base() {\n    // Main support column - tapered icicle shape\n    union() {\n        // Central column with gradual taper\n        for (i = [0:10]) {\n            height = i * 10;\n            radius = 20 - (i * 1.8);  // Taper from 20mm to 2mm\n            translate([0, 0, height])\n                cylinder(h=10, r1=radius, r2=radius-1.8);\n        }\n        \n        // Structural rings for stability\n        for (i = [1:3]) {\n            translate([0, 0, i * 30])\n                difference() {\n                    cylinder(h=3, r=22 + i*2, center=true);\n                    cylinder(h=4, r=18 + i*2, center=true);\n                }\n        }\n    }\n}\n\nmodule icicle_details() {\n    // Realistic icicle ridges and grooves\n    difference() {\n        union() {\n            // Main grooves spiraling down\n            for (angle = [0:30:330]) {\n                rotate([0, 0, angle])\n                    translate([15, 0, 0])\n                        cylinder(h=100, r=2, center=true);\n            }\n            \n            // Horizontal ridges\n            for (z = [10:10:100]) {\n                translate([0, 0, z])\n                    difference() {\n                        cylinder(h=1.5, r=20 - (z*0.15));\n                        cylinder(h=2, r=18 - (z*0.15));\n                    }\n            }\n        }\n        \n        // Hollow center for material saving\n        cylinder(h=110, r=8, $fn=16);\n    }\n}\n\nmodule tabletop() {\n    // Round tabletop with icicle edge detail\n    difference() {\n        union() {\n            // Main tabletop surface\n            translate([0, 0, 110])\n                cylinder(h=8, r=40);\n            \n            // Icicle edge decoration\n            for (i = [0:15:345]) {\n                rotate([0, 0, i])\n                    translate([35, 0, 110])\n                        cube([10, 3, 5], center=true);\n            }\n        }\n        \n        // Lightening holes\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([20, 0, 114])\n                    cylinder(h=10, r=8);\n        }\n    }\n}\n\nmodule support_structure() {\n    // Hidden support for 3D printing\n    intersection() {\n        union() {\n            // Base support ring\n            translate([0, 0, 5])\n                cylinder(h=5, r=30);\n            \n            // Internal supports\n            for (angle = [0:120:240]) {\n                rotate([0, 0, angle])\n                    translate([15, 0, 0])\n                        cube([30, 3, 100], center=true);\n            }\n        }\n        \n        // Limit to base area\n        cylinder(h=110, r=30);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    icicle_base();\n    \n    // Add realistic details\n    icicle_details();\n    \n    // Tabletop\n    tabletop();\n    \n    // Support structure\n    support_structure();\n}",
    "renders": true
  },
  {
    "natural_object": "frost_formation",
    "openscad_code": "// Frost Formation Console Table\n// Realistic style, medium complexity\n// Dimensions: 100mm H x 120mm W x 40mm D\n\nmodule frost_base() {\n    // Main table base with frost crystal formation\n    difference() {\n        // Base structure\n        cube([120, 40, 4], center=true);\n        \n        // Add frost texture on top surface\n        for (i = [-50:10:50]) {\n            for (j = [-15:5:15]) {\n                translate([i, j, 2]) {\n                    scale([1, 1, 0.5]) {\n                        cylinder(h=2, r1=1.5, r2=0.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule frost_leg(x_pos) {\n    // Single frost-covered leg\n    translate([x_pos, 0, -48]) {\n        union() {\n            // Main leg structure\n            cylinder(h=96, r=3, $fn=8);\n            \n            // Frost accumulation rings\n            for (h = [-45:8:45]) {\n                translate([0, 0, h]) {\n                    scale([1.2, 1.2, 0.3]) {\n                        cylinder(h=2, r=3.5, $fn=8);\n                    }\n                }\n            }\n            \n            // Ice crystals\n            for (angle = [0:45:315]) {\n                rotate([0, 0, angle]) {\n                    translate([4, 0, 0]) {\n                        rotate([90, 0, 0]) {\n                            scale([0.3, 0.3, 1]) {\n                                cylinder(h=8, r1=0.5, r2=0.1, $fn=3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule frost_tabletop() {\n    // Tabletop with frost patterns\n    difference() {\n        // Main tabletop\n        translate([0, 0, 50]) {\n            cube([120, 40, 4], center=true);\n        }\n        \n        // Frost crystal indentations on surface\n        for (i = [-50:8:50]) {\n            for (j = [-15:8:15]) {\n                translate([i, j, 52]) {\n                    rotate([0, 0, rand(i+j)*45]) {\n                        scale([1.5, 1, 1]) {\n                            cylinder(h=1, r=2, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Frost buildup on edges\n    translate([0, 0, 52]) {\n        difference() {\n            cube([124, 44, 2], center=true);\n            cube([120, 40, 2.1], center=true);\n        }\n    }\n}\n\nmodule support_brace() {\n    // Cross-brace with frost texture\n    translate([0, 0, -20]) {\n        difference() {\n            cube([110, 4, 6], center=true);\n            \n            // Frost texture holes\n            for (i = [-45:10:45]) {\n                translate([i, 0, 0]) {\n                    sphere(r=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    frost_base();\n    \n    // Four legs with frost details\n    frost_leg(-45);\n    frost_leg(-15);\n    frost_leg(15);\n    frost_leg(45);\n    \n    // Braces for stability\n    support_brace();\n    \n    // Top surface\n    frost_tabletop();\n    \n    // Corner frost formations\n    for (x = [-55, 55]) {\n        for (y = [-20, 20]) {\n            translate([x, y, 52]) {\n                union() {\n                    // Ice spike formations\n                    for (i = [0:30:150]) {\n                        rotate([0, 0, i]) {\n                            translate([rand(i)*2, 0, 0]) {\n                                scale([0.5, 0.5, 2]) {\n                                    cylinder(h=rand(1,4), r1=0.5, r2=0.1, $fn=4);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "snowflake",
    "openscad_code": "// Snowflake Inspired Side Table\n// Overall dimensions: ~120mm diameter, 45mm height\n// 3D printable with 2mm wall thickness and no overhangs >45°\n\n// Parameters\ntable_height = 45;\ntable_top_thickness = 4;\ntable_top_diameter = 120;\nleg_thickness = 3;\nleg_length = 40;\nbracing_height = 15;\n\n// Main table top with snowflake pattern\nmodule table_top() {\n    // Solid top\n    difference() {\n        cylinder(h=table_top_thickness, d=table_top_diameter, $fn=64);\n        \n        // Central hexagonal cutout\n        translate([0, 0, -1])\n            cylinder(h=table_top_thickness+2, d=20, $fn=6);\n            \n        // Six main arms cutouts (snowflake pattern)\n        for(i=[0:5]) {\n            rotate([0, 0, i*60]) {\n                translate([0, 0, -1])\n                    cube([leg_length*0.7, 8, table_top_thickness+2], center=true);\n                    \n                // Side branches\n                translate([20, 0, -1])\n                    cube([15, 4, table_top_thickness+2], center=true);\n                translate([-20, 0, -1])\n                    cube([15, 4, table_top_thickness+2], center=true);\n            }\n        }\n    }\n}\n\n// Single leg with hexagonal cross-section\nmodule leg() {\n    difference() {\n        // Main hexagonal leg\n        linear_extrude(height=leg_length, center=false) {\n            circle(d=10, $fn=6);\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 2])\n            linear_extrude(height=leg_length-4, center=false) {\n                circle(d=6, $fn=6);\n            }\n    }\n}\n\n// Bracing between legs (snowflake arms)\nmodule bracing_arm() {\n    difference() {\n        cube([table_top_diameter*0.4, leg_thickness, bracing_height], center=true);\n        \n        // Decorative cutouts\n        for(j=[-1, 1]) {\n            translate([j*20, 0, bracing_height/2])\n                cylinder(h=leg_thickness+2, d=8, $fn=6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, leg_length])\n        table_top();\n    \n    // Six legs in hexagonal pattern\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([35, 0, 0])\n                leg();\n    }\n    \n    // Six bracing arms connecting legs\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, leg_length/2])\n                bracing_arm();\n    }\n    \n    // Central support hub\n    difference() {\n        cylinder(h=leg_length, d=20, $fn=12);\n        translate([0, 0, 2])\n            cylinder(h=leg_length-4, d=16, $fn=12);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "hailstone",
    "openscad_code": "// Hailstone-inspired side table (realistic style, medium complexity)\n// Overall size: 120mm diameter, 450mm height\nwall = 2;\n\nmodule hailstone_base() {\n    // Main hailstone core\n    difference() {\n        sphere(d = 120);\n        // Hollow interior for 3D printing\n        sphere(d = 116);\n    }\n    \n    // Icy facets on surface\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, 58])\n        rotate([15 * (i % 2 ? 1 : -1), 0, 0])\n        difference() {\n            cube([15, 25, 8], center = true);\n            cube([13, 23, 10], center = true);\n        }\n    }\n}\n\nmodule table_leg() {\n    // Central support column\n    cylinder(h = 330, d = 20, $fn = 16);\n    \n    // Reinforcement rings\n    for(h = [80, 160, 240]) {\n        translate([0, 0, h])\n        cylinder(h = 4, d1 = 24, d2 = 28, $fn = 16);\n    }\n    \n    // Base plate\n    translate([0, 0, -5])\n    cylinder(h = 10, d = 40, $fn = 32);\n}\n\nmodule tabletop() {\n    // Flat top surface\n    difference() {\n        cylinder(h = 15, d = 120, $fn = 64);\n        translate([0, 0, -1])\n        cylinder(h = 17, d = 116, $fn = 64);\n    }\n    \n    // Icy rim detail\n    for(i = [0:23]) {\n        rotate([0, 0, i * 15])\n        translate([56, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d = 4, $fn = 8);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0])\nhailstone_base();\n\ntranslate([0, 0, 60])\ntable_leg();\n\ntranslate([0, 0, 395])\ntabletop();",
    "renders": true
  },
  {
    "natural_object": "stalactite",
    "openscad_code": "// Stalactite side table\n// Overall dimensions: Ø120 mm base, 220 mm tall\n\n$fn = 72;               // smooth curves\nwall = 2;               // 3D-printable wall thickness\nbase_d = 120;           // footprint on the floor\ntop_d = 80;             // smaller top plateau\nh = 220;                // total height\n\nmodule stalactite_core(r_top, r_bot, h, taper = 0.6) {\n    // tapered, slightly wavy column\n    slices = 20;\n    for (i = [0 : slices-1]) {\n        z0 = i * h / slices;\n        z1 = (i+1) * h / slices;\n        r0 = r_bot - (r_bot - r_top) * pow(z0 / h, taper) + 2 * sin(i * 25);\n        r1 = r_bot - (r_bot - r_top) * pow(z1 / h, taper) + 2 * sin((i+1) * 25);\n        translate([0, 0, z0])\n            cylinder(h = h/slices + 0.1, r1 = r0, r2 = r1, $fn = 48);\n    }\n}\n\n// outer shell (hollow)\ndifference() {\n    stalactite_core(top_d/2, base_d/2, h);\n    translate([0, 0, wall])\n        stalactite_core(top_d/2 - wall, base_d/2 - wall, h - wall*2);\n}\n\n// tabletop plateau\ntranslate([0, 0, h])\n    difference() {\n        cylinder(h = wall*2, r = top_d/2 + wall, $fn = 48);\n        cylinder(h = wall*2 + 1, r = top_d/2 - wall, $fn = 48);\n    }\n\n// internal reinforcement rings every 40 mm\nring_interval = 40;\nfor (z = [ring_interval : ring_interval : h - ring_interval]) {\n    r_mid = base_d/2 - (base_d/2 - top_d/2) * pow(z / h, 0.6);\n    ring_r = r_mid - wall;\n    translate([0, 0, z])\n        difference() {\n            cylinder(h = wall, r = ring_r + wall, $fn = 48);\n            cylinder(h = wall + 1, r = ring_r, $fn = 48);\n        }\n}\n\n// drip-tip detail at lower end\ntranslate([0, 0, -wall])\n    cylinder(h = wall*3, r1 = base_d/2, r2 = base_d/2 - wall, $fn = 48);\n\n// subtle radial ribs for stiffness\nribs = 8;\nfor (a = [0 : 360/ribs : 359]) {\n    rotate([0, 0, a])\n        translate([base_d/2 - wall, 0, 0])\n            cube([wall, wall*1.5, h], center = true);\n}\n\n// small drainage hole in tip (optional, easy to plug)\ntranslate([0, 0, -wall*1.5])\n    cylinder(h = wall*2, r = wall*1.5, $fn = 16);",
    "renders": true
  },
  {
    "natural_object": "stalagmite",
    "openscad_code": "// Stalagmite Side Table (medium complexity, realistic style)\n// ~80 mm tall, 3D-printable, 2 mm wall thickness\n\n// Overall dimensions\ntable_height = 80;\nbase_d = 60;\ntop_d = 40;\n\n// Module for a tapered cylinder segment with organic noise\nmodule tapered_segment(h, d1, d2, noise = 1) {\n    // Create outer shell\n    difference() {\n        cylinder(h = h, d1 = d1, d2 = d2, $fn = 48);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, d1 = d1 - 4, d2 = d2 - 4, $fn = 48);\n    }\n    // Add small bumps for stalagmite texture\n    for (i = [0 : 15]) {\n        angle = rands(0, 360, 1)[0];\n        h_pos = rands(0, h, 1)[0];\n        r = (d1 + (d2 - d1) * (h_pos / h)) / 2;\n        translate([r * cos(angle), r * sin(angle), h_pos])\n            sphere(d = noise * rands(1.5, 3, 1)[0], $fn = 8);\n    }\n}\n\n// Module for structural rib reinforcement inside\nmodule internal_rib(z, d_outer) {\n    translate([0, 0, z])\n        difference() {\n            cylinder(h = 4, d = d_outer - 4, $fn = 32);\n            cylinder(h = 4.2, d = d_outer - 8, $fn = 32);\n        }\n}\n\n// Main stalagmite stem\nmodule stalagmite_stem() {\n    union() {\n        tapered_segment(20, base_d, 50, 1.2);\n        translate([0, 0, 20])\n            tapered_segment(25, 50, 45, 1.0);\n        translate([0, 0, 45])\n            tapered_segment(20, 45, 35, 0.8);\n        translate([0, 0, 65])\n            tapered_segment(15, 35, top_d, 0.6);\n        \n        // Internal ribs for print stability\n        internal_rib(10, 55);\n        internal_rib(32.5, 47.5);\n        internal_rib(55, 40);\n    }\n}\n\n// Table top with shallow cavity\nmodule table_top() {\n    difference() {\n        // Main disk\n        cylinder(h = 5, d = top_d + 6, $fn = 64);\n        // Recessed top surface\n        translate([0, 0, 2])\n            cylinder(h = 3, d = top_d, $fn = 64);\n    }\n}\n\n// Small drip features on stem\nmodule drip_features() {\n    for (i = [1 : 3]) {\n        angle = i * 120;\n        h_pos = 10 + i * 20;\n        r = (base_d + (top_d - base_d) * (h_pos / table_height)) / 2 - 2;\n        translate([r * cos(angle), r * sin(angle), h_pos])\n            rotate([90, 0, angle + 90])\n                scale([1, 1, 0.4])\n                    sphere(d = 6, $fn = 12);\n    }\n}\n\n// Assembly\nunion() {\n    stalagmite_stem();\n    translate([0, 0, table_height - 5])\n        table_top();\n    drip_features();\n}",
    "renders": true
  },
  {
    "natural_object": "cave_formation",
    "openscad_code": "// Cave Formation Coffee Table\n// Dimensions: 120mm x 80mm x 45mm\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule stalactite_base(x, y, height, radius) {\n    translate([x, y, 0])\n    cylinder(h = height, r1 = radius, r2 = radius * 0.3, center = false);\n}\n\nmodule stalagmite_base(x, y, height, radius) {\n    translate([x, y, 45 - height])\n    cylinder(h = height, r1 = radius * 0.3, r2 = radius, center = false);\n}\n\nmodule table_top() {\n    difference() {\n        // Main table top with organic shape\n        translate([60, 40, 40])\n        scale([1.2, 1, 0.2])\n        sphere(r = 50);\n        \n        // Hollow out center\n        translate([60, 40, 38])\n        scale([1.15, 0.95, 0.3])\n        sphere(r = 48);\n        \n        // Add cave entrance on side\n        translate([0, 40, 40])\n        rotate([0, 90, 0])\n        cylinder(h = 40, r = 15, center = true);\n    }\n}\n\nmodule support_structure() {\n    // Central column\n    difference() {\n        translate([60, 40, 20])\n        cylinder(h = 40, r = 10, center = true);\n        \n        translate([60, 40, 20])\n        cylinder(h = 42, r = 8, center = true);\n    }\n    \n    // Side supports\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([100, 40, 20])\n        difference() {\n            cylinder(h = 40, r = 6, center = true);\n            translate([0, 0, 20])\n            cylinder(h = 42, r = 4, center = false);\n        }\n    }\n}\n\nmodule cave_details() {\n    // Stalactites hanging from table\n    for (i = [0:5]) {\n        angle = i * 60;\n        r = 30 + (i % 2) * 10;\n        stalactite_base(\n            60 + cos(angle) * r,\n            40 + sin(angle) * r,\n            8 + (i % 3) * 3,\n            3 + (i % 4) * 1\n        );\n    }\n    \n    // Stalagmites rising from base\n    for (i = [0:4]) {\n        angle = i * 72 + 36;\n        r = 25 + (i % 2) * 15;\n        stalagmite_base(\n            60 + cos(angle) * r,\n            40 + sin(angle) * r,\n            10 + (i % 3) * 4,\n            4 + (i % 3) * 1\n        );\n    }\n    \n    // Natural rock formations\n    for (i = [0:8]) {\n        angle = i * 45;\n        r = 15 + (i % 3) * 5;\n        translate([60 + cos(angle) * r, 40 + sin(angle) * r, 35])\n        sphere(r = 2 + (i % 3));\n    }\n}\n\nmodule base_platform() {\n    difference() {\n        // Organic base shape\n        translate([60, 40, 0])\n        scale([1.3, 1.1, 0.3])\n        sphere(r = 45);\n        \n        // Hollow base\n        translate([60, 40, -5])\n        scale([1.25, 1.05, 0.4])\n        sphere(r = 42);\n        \n        // Add texture holes\n        for (i = [0:15]) {\n            angle = i * 24;\n            r = 20 + (i % 5) * 8;\n            translate([60 + cos(angle) * r, 40 + sin(angle) * r, 0])\n            sphere(r = 2 + (i % 3));\n        }\n    }\n}\n\n// Assembly\nunion() {\n    table_top();\n    support_structure();\n    base_platform();\n    cave_details();\n}",
    "renders": true
  },
  {
    "natural_object": "fossil",
    "openscad_code": "// Ammonite Fossil Stool\n// Realistic style, medium complexity\n// Overall dimensions: 100mm diameter, 45mm height\n\nmodule shell_segment(radius, height, angle, thickness) {\n    // Individual segment of the ammonite spiral\n    rotate([0, 0, angle])\n    translate([radius * cos(angle * 3), radius * sin(angle * 3), 0])\n    rotate([0, 0, angle * 3])\n    difference() {\n        // Main segment body\n        scale([1, 0.6, 1])\n        cylinder(h=height, r1=thickness, r2=thickness*0.8, $fn=8);\n        \n        // Hollow center for 3D printing\n        scale([0.8, 0.4, 1.2])\n        cylinder(h=height+1, r1=thickness-2, r2=thickness*0.8-2, $fn=8);\n    }\n}\n\nmodule fossil_top() {\n    union() {\n        // Central spiral structure\n        for(i=[0:15:360]) {\n            shell_segment(5 + i/15, 6, i, 3 + i/60);\n        }\n        \n        // Outer growth rings as seating surface\n        for(r=[30:5:48]) {\n            difference() {\n                cylinder(h=2, r=r, $fn=64);\n                cylinder(h=3, r=r-2, $fn=64);\n            }\n        }\n        \n        // Ribs for structural support\n        for(angle=[0:30:330]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 2])\n            linear_extrude(height=3)\n            polygon(points=[[0,0],[40,2],[38,5],[-2,3]]);\n        }\n    }\n}\n\nmodule stool_base() {\n    // Main support column\n    difference() {\n        cylinder(h=35, r=25, $fn=64);\n        cylinder(h=36, r=22, $fn=64);\n    }\n    \n    // Stabilizing feet in fossil pattern\n    for(i=[0:60:300]) {\n        rotate([0, 0, i])\n        translate([20, 0, 0])\n        difference() {\n            sphere(r=8, $fn=16);\n            translate([0, 0, -5])\n            cube([16, 8, 10], center=true);\n        }\n    }\n    \n    // Connection joints\n    translate([0, 0, 35])\n    difference() {\n        cylinder(h=5, r=28, $fn=64);\n        cylinder(h=6, r=25, $fn=64);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nstool_base();\n\ntranslate([0, 0, 40])\nfossil_top();",
    "renders": true
  },
  {
    "natural_object": "ammonite",
    "openscad_code": "// Ammonite Side Table\n// Realistic style, medium complexity\n// Size: ~120mm diameter, 45mm height\n\n$fn = 32;\n\n// Main parameters\ntable_diameter = 120;\ntable_height = 45;\nwall_thickness = 2;\nsegments = 8;\n\n// Create the ammonite table\nmodule ammonite_table() {\n    // Base structure\n    translate([0, 0, 0]) {\n        // Central column support\n        cylinder(h=table_height - 5, r1=15, r2=12, center=false);\n        \n        // Strengthening ring at base\n        translate([0, 0, 0])\n            cylinder(h=5, r1=20, r2=20, center=false);\n    }\n    \n    // Ammonite spiral tabletop\n    translate([0, 0, table_height - 5]) {\n        spiral_top();\n    }\n}\n\n// Generate the spiral tabletop\nmodule spiral_top() {\n    // Outer rim for structural integrity\n    difference() {\n        cylinder(h=5, r1=table_diameter/2, r2=table_diameter/2, center=false);\n        \n        // Hollow center\n        cylinder(h=6, r1=table_diameter/2 - wall_thickness, r2=table_diameter/2 - wall_thickness, center=false);\n    }\n    \n    // Create spiral chambers\n    for(i = [1 : segments]) {\n        angle = i * 45;\n        radius = 10 + i * 7;\n        \n        // Chamber walls\n        rotate([0, 0, angle])\n        translate([radius, 0, 2.5])\n            chamber_wall(i);\n    }\n    \n    // Central spiral structure\n    spiral_structure();\n}\n\n// Individual chamber walls\nmodule chamber_wall(index) {\n    wall_length = 8 + index * 1.5;\n    wall_width = 2;\n    wall_height = 5;\n    \n    translate([0, -wall_width/2, 0])\n        cube([wall_length, wall_width, wall_height], center=false);\n}\n\n// Central spiral support structure\nmodule spiral_structure() {\n    turns = 3;\n    points_per_turn = 20;\n    start_radius = 5;\n    end_radius = table_diameter/2 - 10;\n    \n    for(t = [0 : 1 : turns * points_per_turn]) {\n        angle = t * 360 / points_per_turn;\n        radius = start_radius + (end_radius - start_radius) * t / (turns * points_per_turn);\n        \n        translate([radius * cos(angle), radius * sin(angle), 2.5])\n            sphere(r=1.5);\n    }\n    \n    // Connect spheres with thin cylinders for printability\n    for(t = [0 : 1 : turns * points_per_turn - 1]) {\n        angle1 = t * 360 / points_per_turn;\n        angle2 = (t + 1) * 360 / points_per_turn;\n        radius1 = start_radius + (end_radius - start_radius) * t / (turns * points_per_turn);\n        radius2 = start_radius + (end_radius - start_radius) * (t + 1) / (turns * points_per_turn);\n        \n        x1 = radius1 * cos(angle1);\n        y1 = radius1 * sin(angle1);\n        x2 = radius2 * cos(angle2);\n        y2 = radius2 * sin(angle2);\n        \n        translate([(x1 + x2)/2, (y1 + y2)/2, 2.5])\n            rotate([0, 0, atan2(y2 - y1, x2 - x1)])\n                cylinder(h=sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)), r=1, center=true);\n    }\n}\n\n// Add decorative ridges on outer edge\nmodule decorative_ridges() {\n    for(i = [0 : 15 : 360]) {\n        rotate([0, 0, i])\n        translate([table_diameter/2 - 1, 0, 0])\n            cube([2, 1, 5], center=false);\n    }\n}\n\n// Main assembly\nunion() {\n    ammonite_table();\n    \n    // Add decorative ridges\n    translate([0, 0, table_height - 5])\n        decorative_ridges();\n}",
    "renders": true
  },
  {
    "natural_object": "trilobite",
    "openscad_code": "// Trilobite Coffee Table (realistic style, medium complexity)\n// Overall dimensions 120 x 80 x 45 mm\n\n// Table top thickness\ntop_t = 6;\n\n// Leg thickness\nleg_t = 4;\n\n// Body segments\nsegments = 11;\n\n// Segment spacing\nseg_space = 6;\n\n// Segment width taper\nseg_width = 30;\n\n// Segment length\nseg_length = 8;\n\n// Head (cephalon) dimensions\nhead_w = 50;\nhead_l = 30;\nhead_h = 12;\n\n// Thorax (body) dimensions\nbody_w = 40;\nbody_l = 70;\nbody_h = 10;\n\n// Pygidium (tail) dimensions\ntail_w = 35;\ntail_l = 20;\ntail_h = 8;\n\n// Eye dimensions\neye_r = 8;\neye_l = 15;\n\n// Genal spine length\ngenal_l = 12;\n\n// Leg height\nleg_h = 35;\n\n// Joint radius\njoint_r = 3;\n\n// Table top\nmodule table_top() {\n    difference() {\n        // Main top\n        translate([0, 0, leg_h + top_t/2])\n            cube([120, 80, top_t], center=true);\n        \n        // Trilobite outline cutout\n        translate([0, 0, leg_h + top_t/2 - 0.1])\n            linear_extrude(top_t + 0.2)\n                trilobite_outline();\n    }\n}\n\n// Trilobite outline for table top\nmodule trilobite_outline() {\n    union() {\n        // Head\n        translate([-body_l/2 - head_l/2, 0, 0])\n            scale([head_l, head_w, 1])\n                circle(d=1);\n        \n        // Body segments\n        for(i = [0:segments-1]) {\n            translate([-body_l/2 + i*seg_space, 0, 0])\n                scale([seg_length, seg_width * (1 - i*0.05), 1])\n                    circle(d=1);\n        }\n        \n        // Tail\n        translate([body_l/2 + tail_l/2, 0, 0])\n            scale([tail_l, tail_w, 1])\n                circle(d=1);\n    }\n}\n\n// Trilobite body structure\nmodule trilobite_body() {\n    union() {\n        // Head\n        translate([-body_l/2 - head_l/2, 0, leg_h - head_h/2])\n            scale([head_l, head_w, head_h])\n                sphere(d=1);\n        \n        // Eyes\n        translate([-body_l/2 - head_l/2 + eye_l/2, head_w/2 - eye_r, leg_h - head_h/2 + eye_r])\n            rotate([0, 90, 0])\n                cylinder(h=eye_l, r=eye_r);\n        \n        translate([-body_l/2 - head_l/2 + eye_l/2, -head_w/2 + eye_r, leg_h - head_h/2 + eye_r])\n            rotate([0, 90, 0])\n                cylinder(h=eye_l, r=eye_r);\n        \n        // Genal spines\n        translate([-body_l/2 - head_l/2 - genal_l/2, head_w/2, leg_h - head_h/2])\n            scale([genal_l, 4, head_h])\n                sphere(d=1);\n        \n        translate([-body_l/2 - head_l/2 - genal_l/2, -head_w/2, leg_h - head_h/2])\n            scale([genal_l, 4, head_h])\n                sphere(d=1);\n        \n        // Body segments\n        for(i = [0:segments-1]) {\n            translate([-body_l/2 + i*seg_space, 0, leg_h - body_h/2])\n                scale([seg_length, seg_width * (1 - i*0.05), body_h])\n                    sphere(d=1);\n        }\n        \n        // Tail\n        translate([body_l/2 + tail_l/2, 0, leg_h - tail_h/2])\n            scale([tail_l, tail_w, tail_h])\n                sphere(d=1);\n    }\n}\n\n// Support legs\nmodule legs() {\n    // Front legs\n    translate([-40, 30, leg_h/2])\n        cylinder(h=leg_h, r=leg_t, $fn=6);\n    \n    translate([-40, -30, leg_h/2])\n        cylinder(h=leg_h, r=leg_t, $fn=6);\n    \n    // Middle legs\n    translate([0, 35, leg_h/2])\n        cylinder(h=leg_h, r=leg_t, $fn=6);\n    \n    translate([0, -35, leg_h/2])\n        cylinder(h=leg_h, r=leg_t, $fn=6);\n    \n    // Rear legs\n    translate([40, 30, leg_h/2])\n        cylinder(h=leg_h, r=leg_t, $fn=6);\n    \n    translate([40, -30, leg_h/2])\n        cylinder(h=leg_h, r=leg_t, $fn=6);\n}\n\n// Cross supports\nmodule supports() {\n    // Front support\n    translate([-40, 0, leg_h/3])\n        rotate([0, 90, 0])\n            cylinder(h=60, r=leg_t/2, $fn=6);\n    \n    // Rear support\n    translate([40, 0, leg_h/3])\n        rotate([0, 90, 0])\n            cylinder(h=60, r=leg_t/2, $fn=6);\n    \n    // Side supports\n    translate([0, 30, leg_h/2])\n        rotate([90, 0, 0])\n            cylinder(h=80, r=leg_t/2, $fn=6);\n    \n    translate([0, -30, leg_h/2])\n        rotate([90, 0, 0])\n            cylinder(h=80, r=leg_t/2, $fn=6);\n}\n\n// Assembly\nunion() {\n    table_top();\n    trilobite_body();\n    legs();\n    supports();\n}",
    "renders": true
  },
  {
    "natural_object": "amber",
    "openscad_code": "// Amber Coffee Table\n// Realistic style, medium complexity\n\n// Overall dimensions\ntable_length = 140;\ntable_width = 70;\ntable_height = 45;\namber_thickness = 8;\n\n// Leg parameters\nleg_width = 6;\nleg_height = 40;\nleg_inset = 8;\n\n// Create organic amber top with natural inclusions\nmodule amber_top() {\n    difference() {\n        // Main amber slab with rounded edges\n        translate([0, 0, amber_thickness/2])\n        minkowski() {\n            cube([table_length, table_width, amber_thickness], center=true);\n            sphere(3);\n        }\n        \n        // Natural cracks and inclusions\n        for(i=[1:5]) {\n            rotate([0, 0, i*35])\n            translate([\n                sin(i*50)*table_length/3, \n                cos(i*30)*table_width/3, \n                0\n            ])\n            scale([1, 0.4, 1])\n            cylinder(h=amber_thickness+2, r1=3, r2=1, center=true);\n        }\n        \n        // Surface imperfections\n        for(j=[1:8]) {\n            translate([\n                (j*17)%table_length - table_length/2,\n                (j*23)%table_width - table_width/2,\n                amber_thickness/2 - 1\n            ])\n            sphere(1.5);\n        }\n    }\n}\n\n// Wooden frame base with amber inlays\nmodule frame_base() {\n    difference() {\n        // Main frame\n        cube([table_length, table_width, 4], center=true);\n        \n        // Center cutout\n        cube([table_length-leg_inset*2, table_width-leg_inset*2, 5], center=true);\n    }\n}\n\n// Decorative amber inlays in frame\nmodule amber_inlays() {\n    for(x=[-table_length/2+15 : 30 : table_length/2-15]) {\n        for(y=[-table_width/2+15 : 30 : table_width/2-15]) {\n            translate([x, y, 2])\n            scale([1, 0.6, 1])\n            cylinder(h=3, r=4, center=true);\n        }\n    }\n}\n\n// Leg assembly with joints\nmodule leg(x_pos, y_pos) {\n    // Main leg\n    translate([x_pos, y_pos, leg_height/2+4])\n    cube([leg_width, leg_width, leg_height], center=true);\n    \n    // Joint bracket\n    translate([x_pos, y_pos, 4])\n    difference() {\n        cube([leg_width+6, leg_width+6, 4], center=true);\n        translate([0, 0, -1])\n        cube([leg_width, leg_width, 6], center=true);\n    }\n    \n    // Amber accent on leg\n    translate([x_pos, y_pos, leg_height/2+2])\n    rotate([90, 0, 0])\n    cylinder(h=leg_width+2, r1=3, r2=3, center=true);\n}\n\n// Assembly\nunion() {\n    // Amber top\n    amber_top();\n    \n    // Frame base\n    translate([0, 0, amber_thickness+2])\n    frame_base();\n    \n    // Amber inlays in frame\n    translate([0, 0, amber_thickness+3])\n    amber_inlays();\n    \n    // Four legs\n    leg(table_length/2-leg_inset, table_width/2-leg_inset);\n    leg(-table_length/2+leg_inset, table_width/2-leg_inset);\n    leg(table_length/2-leg_inset, -table_width/2+leg_inset);\n    leg(-table_length/2+leg_inset, -table_width/2+leg_inset);\n}",
    "renders": true
  },
  {
    "natural_object": "sap",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity sap furniture item\n// Overall dimensions: 120mm x 60mm x 30mm\n\n// Main sap body with bark texture\nmodule sap_body() {\n    difference() {\n        // Main body - slightly curved organic shape\n        scale([1, 0.8, 0.4])\n        rotate([0, 15, 0])\n        hull() {\n            translate([-50, -25, 0]) sphere(25, $fn=32);\n            translate([50, 25, 0]) sphere(25, $fn=32);\n        }\n        \n        // Hollow out interior for sap reservoir\n        translate([0, 0, -5])\n        scale([0.8, 0.7, 0.5])\n        rotate([0, 15, 0])\n        hull() {\n            translate([-45, -20, 0]) sphere(20, $fn=32);\n            translate([45, 20, 0]) sphere(20, $fn=32);\n        }\n        \n        // Add bark texture grooves\n        for(i = [-40:10:40]) {\n            rotate([0, 90, 0])\n            translate([i, 0, 0])\n            scale([0.5, 30, 15])\n            rotate([0, 90, 0])\n            cylinder(h=2, r=1, $fn=8);\n        }\n    }\n}\n\n// Sap collection spout\nmodule collection_spout() {\n    translate([55, 0, 0])\n    rotate([0, -30, 0])\n    union() {\n        // Spout tube\n        cylinder(h=20, r1=4, r2=2, $fn=16);\n        \n        // Connector to body\n        translate([-5, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=5, $fn=16);\n        \n        // Drip channel\n        translate([20, 0, -2])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=3, $fn=16);\n    }\n}\n\n// Support bracket for wall mounting\nmodule mounting_bracket() {\n    translate([-60, 0, -5])\n    union() {\n        // Main bracket\n        cube([20, 8, 4]);\n        \n        // Screw holes\n        for(pos = [-10, 10]) {\n            translate([pos, 0, -1])\n            cylinder(h=6, r=1.5, $fn=16);\n        }\n        \n        // Reinforcement ribs\n        translate([0, 4, 2])\n        cube([20, 2, 2]);\n    }\n}\n\n// Sap level indicator window\nmodule level_window() {\n    difference() {\n        // Window frame\n        translate([0, -35, 0])\n        cube([40, 2, 8]);\n        \n        // Window opening\n        translate([-18, -36, -2])\n        cube([36, 4, 4]);\n        \n        // Clear window insert\n        translate([0, -37, 0])\n        scale([0.9, 0.5, 0.9])\n        cube([40, 2, 8]);\n    }\n}\n\n// Small collection bucket hook\nmodule bucket_hook() {\n    translate([75, 0, -10])\n    union() {\n        // Hook base\n        cylinder(h=10, r=3, $fn=16);\n        \n        // Hook arm\n        translate([0, 0, -5])\n        rotate([90, 0, 0])\n        difference() {\n            // Hook shape\n            union() {\n                cylinder(h=15, r=2, $fn=16);\n                translate([0, 15, 0])\n                sphere(2, $fn=16);\n            }\n            // Hook opening\n            translate([0, 5, -2])\n            cube([4, 10, 4]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    sap_body();\n    collection_spout();\n    mounting_bracket();\n    level_window();\n    bucket_hook();\n    \n    // Reinforcement details\n    translate([-45, -20, -5])\n    cube([90, 5, 3]);\n}",
    "renders": true
  },
  {
    "natural_object": "resin",
    "openscad_code": "// Resin Chair - Realistic style, medium complexity\n// Dimensions: 80mm width x 80mm depth x 120mm height\n// Wall thickness: 2mm throughout\n// Material: Solid resin with organic curves\n\n// Main chair module\nmodule resin_chair() {\n    // Chair seat - curved top with hollow bottom\n    difference() {\n        // Outer seat shell\n        union() {\n            // Seat top curved surface\n            translate([0, 0, 45]) {\n                scale([1, 1.2, 0.3]) {\n                    sphere(d=70, $fn=50);\n                }\n            }\n            // Seat edge rim\n            translate([0, 0, 42]) {\n                cylinder(h=5, d1=72, d2=75, $fn=50);\n            }\n        }\n        \n        // Hollow out seat bottom\n        translate([0, 0, 40]) {\n            scale([0.9, 1.1, 0.2]) {\n                sphere(d=65, $fn=50);\n            }\n        }\n    }\n    \n    // Backrest - flowing organic shape\n    union() {\n        // Backrest support posts (2)\n        for(x = [-25, 25]) {\n            translate([x, 0, 85]) {\n                rotate([0, 10, 0]) {\n                    cylinder(h=50, d1=8, d2=10, $fn=20);\n                }\n            }\n        }\n        \n        // Backrest panel\n        translate([0, 0, 110]) {\n            scale([1.2, 0.8, 0.15]) {\n                sphere(d=70, $fn=50);\n            }\n        }\n    }\n    \n    // Legs - tapered resin columns\n    module leg() {\n        translate([0, 0, 20]) {\n            cylinder(h=40, d1=12, d2=8, $fn=20);\n        }\n    }\n    \n    // Position 4 legs\n    positions = [[-30, -30], [30, -30], [30, 30], [-30, 30]];\n    for(pos = positions) {\n        translate([pos[0], pos[1], 0]) {\n            leg();\n        }\n    }\n    \n    // Support beams between legs\n    module beam(length) {\n        translate([0, 0, 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=length, d=6, $fn=20);\n            }\n        }\n    }\n    \n    // Front and back beams\n    translate([-30, 0, 0]) {\n        beam(60);\n    }\n    \n    // Side beams\n    rotate([0, 0, 90]) {\n        translate([-30, 0, 0]) {\n            beam(60);\n        }\n    }\n    \n    // Armrests - curved resin blocks\n    module armrest(side) {\n        translate([side * 35, 0, 65]) {\n            rotate([0, -15, 0]) {\n                union() {\n                    // Main armrest\n                    scale([0.8, 1.5, 0.4]) {\n                        sphere(d=30, $fn=30);\n                    }\n                    // Support\n                    translate([0, 0, -10]) {\n                        cylinder(h=15, d=8, $fn=20);\n                    }\n                }\n            }\n        }\n    }\n    \n    armrest(1);\n    armrest(-1);\n}\n\n// Render the chair\nresin_chair();",
    "renders": true
  },
  {
    "natural_object": "tar",
    "openscad_code": "// Tar-inspired coffee table with organic flowing lines\n// Overall dimensions: 120mm x 80mm x 45mm\n\n$fn = 64;\n\nmodule table_top() {\n    // Main table surface with organic tar-like flowing edges\n    difference() {\n        // Base rounded rectangle\n        translate([0, 0, 42])\n        scale([1, 0.7, 0.1])\n        sphere(d=110);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 42])\n        scale([0.9, 0.6, 0.1])\n        sphere(d=100);\n    }\n    \n    // Add flowing drips along edges\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n        translate([45, 0, 42])\n        rotate([90, 0, 0])\n        cylinder(h=5+sin(i*3)*3, r1=2+sin(i*2)*1, r2=1.5, $fn=16);\n    }\n}\n\nmodule legs() {\n    // Four organic flowing legs with tar-like drips\n    leg_positions = [[-45, -25], [45, -25], [45, 25], [-45, 25]];\n    \n    for(pos = leg_positions) {\n        // Main leg structure\n        translate([pos[0], pos[1], 22.5])\n        scale([1, 0.7, 1])\n        sphere(d=25);\n        \n        // Leg support structure\n        translate([pos[0], pos[1], 11])\n        cylinder(h=22, r1=10, r2=12, $fn=32);\n        \n        // Base foot\n        translate([pos[0], pos[1], 0])\n        scale([1.2, 1, 1])\n        sphere(d=20);\n        \n        // Add flowing drips on legs\n        for(i = [0:45:359]) {\n            rotate([0, 0, i])\n            translate([pos[0]+sin(i)*12, pos[1]+cos(i)*8, 20])\n            sphere(d=3+sin(i*4)*2);\n        }\n    }\n}\n\nmodule support_beams() {\n    // Structural support beams between legs\n    // Front beam\n    translate([0, -25, 20])\n    scale([0.9, 0.2, 0.3])\n    sphere(d=100);\n    \n    // Back beam\n    translate([0, 25, 20])\n    scale([0.9, 0.2, 0.3])\n    sphere(d=100);\n    \n    // Side beams\n    translate([45, 0, 20])\n    scale([0.2, 0.7, 0.3])\n    sphere(d=60);\n    \n    translate([-45, 0, 20])\n    scale([0.2, 0.7, 0.3])\n    sphere(d=60);\n}\n\nmodule surface_texture() {\n    // Add subtle surface texture to table top\n    for(x = [-40:10:40]) {\n        for(y = [-25:10:25]) {\n            translate([x, y, 42.5])\n            sphere(d=2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    table_top();\n    legs();\n    support_beams();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "ball",
    "openscad_code": "// Ball Furniture - OpenSCAD\n// A spherical ottoman/footrest with realistic furniture details\n\n// Parameters\nball_diameter = 80;\nleg_height = 30;\nleg_diameter = 12;\nbase_thickness = 5;\ncushion_thickness = 10;\nstitch_spacing = 8;\nstitch_width = 1.5;\nstitch_depth = 0.5;\nbutton_diameter = 15;\nbutton_height = 3;\nwall_thickness = 2;\n\n// Main module\nmodule ball_ottoman() {\n    // Base structure (hidden support ring)\n    difference() {\n        cylinder(h=base_thickness, d=ball_diameter*0.9, $fn=100);\n        translate([0, 0, -0.1])\n            cylinder(h=base_thickness+0.2, d=ball_diameter*0.9-wall_thickness*2, $fn=100);\n    }\n    \n    // Legs\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([ball_diameter*0.35, 0, base_thickness])\n                leg();\n    }\n    \n    // Main ball cushion\n    translate([0, 0, base_thickness+leg_height])\n        difference() {\n            sphere(d=ball_diameter, $fn=100);\n            \n            // Hollow interior\n            sphere(d=ball_diameter-wall_thickness*2, $fn=100);\n            \n            // Flat bottom\n            translate([0, 0, -ball_diameter/2])\n                cube([ball_diameter, ball_diameter, ball_diameter], center=true);\n        }\n    \n    // Cushion top surface\n    translate([0, 0, base_thickness+leg_height+ball_diameter/2-cushion_thickness])\n        cushion_surface();\n    \n    // Buttons for tufting\n    for (i = [0:1]) {\n        for (j = [0:1]) {\n            translate([\n                (i-0.5)*ball_diameter*0.3,\n                (j-0.5)*ball_diameter*0.3,\n                base_thickness+leg_height+ball_diameter/2-button_height\n            ])\n                button();\n        }\n    }\n}\n\n// Furniture leg module\nmodule leg() {\n    difference() {\n        cylinder(h=leg_height, d=leg_diameter, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=leg_height+0.2, d=leg_diameter-wall_thickness*2, $fn=32);\n    }\n    \n    // Leg foot detail\n    translate([0, 0, -0.5])\n        cylinder(h=3, d=leg_diameter*1.2, $fn=32);\n}\n\n// Cushion surface with stitching\nmodule cushion_surface() {\n    difference() {\n        // Main cushion\n        sphere(d=ball_diameter-wall_thickness*2, $fn=100);\n        \n        // Stitching grooves\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, -ball_diameter/2+wall_thickness, 0])\n                    stitch_line();\n        }\n        \n        // Diagonal stitch lines\n        for (i = [0:1]) {\n            rotate([0, 0, 45+i*90])\n                translate([0, -ball_diameter/2+wall_thickness, 0])\n                    stitch_line();\n        }\n    }\n}\n\n// Stitching detail\nmodule stitch_line() {\n    for (i = [-3:3]) {\n        translate([i*stitch_spacing, 0, 0])\n            cube([stitch_width, ball_diameter, stitch_depth], center=true);\n    }\n}\n\n// Tufting button\nmodule button() {\n    difference() {\n        cylinder(h=button_height, d=button_diameter, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=button_height+0.2, d=button_diameter-wall_thickness*2, $fn=32);\n    }\n    \n    // Button top detail\n    translate([0, 0, button_height])\n        sphere(d=button_diameter*0.9, $fn=32);\n}\n\n// Render the model\nball_ottoman();",
    "renders": true
  },
  {
    "natural_object": "football",
    "openscad_code": "// Football-inspired side table - realistic style, medium complexity\n// Overall dimensions: 110mm diameter, 450mm height\n\n// Wall thickness constant\nwall = 2;\n\n// Main football shell (hollow sphere)\nmodule football_shell() {\n    difference() {\n        sphere(d = 110);\n        sphere(d = 110 - 2*wall);\n    }\n}\n\n// Pentagon panel\nmodule pentagon_panel() {\n    linear_extrude(height = wall) {\n        polygon(points = [\n            [0, 22, 0],\n            [21, 7, 0],\n            [13, -18, 0],\n            [-13, -18, 0],\n            [-21, 7, 0]\n        ]);\n    }\n}\n\n// Hexagon panel\nmodule hexagon_panel() {\n    linear_extrude(height = wall) {\n        polygon(points = [\n            [0, 25, 0],\n            [22, 13, 0],\n            [22, -13, 0],\n            [0, -25, 0],\n            [-22, -13, 0],\n            [-22, 13, 0]\n        ]);\n    }\n}\n\n// Place panels on football surface\nmodule football_panels() {\n    // Top pentagon\n    translate([0, 0, 55 - wall])\n    rotate([0, 0, 0])\n    pentagon_panel();\n    \n    // Surrounding hexagons\n    for (i = [0:5]) {\n        rotate([0, 0, i*72])\n        translate([35, 0, 42])\n        rotate([0, 110, 30])\n        hexagon_panel();\n    }\n    \n    // Lower ring of pentagons\n    for (i = [0:4]) {\n        rotate([0, 0, i*72 + 36])\n        translate([35, 0, 15])\n        rotate([0, 145, 30])\n        pentagon_panel();\n    }\n}\n\n// Table leg structure\nmodule table_leg() {\n    // Main leg cylinder\n    cylinder(h = 350, d = 20, $fn = 32);\n    \n    // Foot base\n    translate([0, 0, -5])\n    cylinder(h = 10, d = 40, $fn = 32);\n    \n    // Connection bracket\n    translate([0, 0, 350])\n    difference() {\n        cylinder(h = 30, d = 60, $fn = 32);\n        cylinder(h = 32, d = 16, $fn = 32);\n    }\n}\n\n// Support frame inside football\nmodule internal_support() {\n    // Central ring\n    rotate([90, 0, 0])\n    cylinder(h = 80, d = 60, $fn = 32);\n    \n    // Radial supports\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([30, 0, 0])\n        cube([60, 8, 8], center = true);\n    }\n}\n\n// Assembly\nmodule football_table() {\n    // Table leg\n    translate([0, 0, 0])\n    table_leg();\n    \n    // Internal support structure\n    translate([0, 0, 380])\n    internal_support();\n    \n    // Football tabletop\n    translate([0, 0, 380])\n    union() {\n        football_shell();\n        football_panels();\n    }\n}\n\n// Render the complete table\nfootball_table();",
    "renders": true
  },
  {
    "natural_object": "baseball",
    "openscad_code": "// Baseball-shaped stool / side table\n// Scaled for 3D printing, ~120 mm diameter\n// Uses only basic OpenSCAD primitives\n\n$fn = 36;           // Segments for curves\nwall = 2;           // 3D-printable shell thickness\n\nmodule baseball_stool() {\n    // Main sphere body (hollow)\n    difference() {\n        sphere(d = 120);                       // Outer sphere\n        sphere(d = 120 - 2*wall);              // Inner hollow\n    }\n\n    // Seams – raised stitches pattern\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([0, 0, 0])\n                baseball_seam();\n    }\n\n    // Top flat seating surface (slice sphere)\n    translate([0, 0, 35])\n        cylinder(h = wall, d = 100, $fn = 64);\n\n    // Internal support ring for print stability\n    translate([0, 0, -40])\n        cylinder(h = wall, d = 60, center = true);\n\n    // Four hidden legs inside hollow sphere\n    for (ang = [45 : 90 : 315]) {\n        rotate([0, 0, ang])\n            translate([42, 0, -55])\n                rotate([90, 0, 0])\n                    cylinder(h = 55, d = 10, center = true);\n    }\n}\n\nmodule baseball_seam() {\n    // Raised seam line\n    rotate([0, 90, 0])\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([60, 0])\n                square([wall, 2]);\n\n    // Stitches along seam\n    for (t = [-50 : 5 : 50]) {\n        rotate([0, 90, 0])\n            translate([0, 60 * sin(t * 3.6), 60 * cos(t * 3.6)])\n                rotate([0, -t * 3.6, 0])\n                    stitch();\n    }\n}\n\nmodule stitch() {\n    // Single stitch\n    scale([1, 0.4, 0.2])\n        sphere(d = 4);\n}\n\nbaseball_stool();",
    "renders": true
  },
  {
    "natural_object": "basketball",
    "openscad_code": "// Basketball-Inspired Stool with Realistic Proportions\n// Combines a basketball sphere with functional stool legs\n\n// Overall dimensions\nball_diameter = 100;  // Basketball size in mm\nleg_height = 120;     // Stool leg height\nseat_thickness = 15;  // Structural seat thickness\nwall_thickness = 2;   // 3D printable wall thickness\n\n// Basketball module with realistic proportions\nmodule basketball() {\n    // Main ball body\n    difference() {\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior for weight reduction\n        sphere(d = ball_diameter - 2 * wall_thickness, $fn = 64);\n    }\n    \n    // Basketball seam lines\n    rotate([0, 0, 0])\n        basketball_seam(0);\n    rotate([0, 90, 0])\n        basketball_seam(0);\n    \n    // Additional curved seam\n    rotate([90, 0, 0])\n        basketball_seam(45);\n}\n\n// Seam line module\nmodule basketball_seam(rotation) {\n    rotate([0, 0, rotation])\n    for(i = [-2, 2]) {\n        translate([0, 0, i * (ball_diameter/2 - 1)])\n        linear_extrude(height = 2, center = true)\n        circle(d = ball_diameter * 0.9, $fn = 64);\n    }\n}\n\n// Stool seat with basketball integration\nmodule stool_seat() {\n    difference() {\n        // Main seat structure\n        cylinder(h = seat_thickness, d = ball_diameter + 20, $fn = 64);\n        \n        // Recess for basketball\n        translate([0, 0, -1])\n        cylinder(h = ball_diameter/2 + 1, d = ball_diameter, $fn = 64);\n    }\n    \n    // Reinforcement ribs\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([0, (ball_diameter + 20)/2 - 10, 0])\n        cube([20, 20, seat_thickness], center = true);\n    }\n}\n\n// Stool legs with realistic proportions\nmodule stool_leg() {\n    // Tapered leg for stability\n    cylinder(h1 = 15, h2 = 10, h = leg_height, $fn = 16);\n}\n\n// Main assembly\nunion() {\n    // Stool seat\n    stool_seat();\n    \n    // Basketball (positioned on seat)\n    translate([0, 0, seat_thickness + ball_diameter/2 - 5])\n    basketball();\n    \n    // Stool legs\n    leg_positions = [[-35, -35], [35, -35], [-35, 35], [35, 35]];\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], 0])\n        stool_leg();\n    }\n    \n    // Leg support ring\n    translate([0, 0, leg_height/2])\n    cylinder(h = 5, d = ball_diameter + 30, $fn = 64);\n}",
    "renders": true
  },
  {
    "natural_object": "soccerball",
    "openscad_code": "// Soccer-ball inspired stool with realistic proportions\n// Diameter: 120 mm, height: 180 mm including legs\n\n// Parameters\nball_d = 120;\nwall_t = 2;\nleg_h = 60;\nleg_t = 15;\nseat_r = ball_d/2 - wall_t;\n\nmodule soccer_ball() {\n    difference() {\n        // Hollow sphere\n        sphere(d = ball_d);\n\n        // Hollow out inside\n        sphere(d = ball_d - 2*wall_t);\n        \n        // Cut flat bottom for stability\n        translate([0, 0, -ball_d/2 - 1])\n            cube([ball_d, ball_d, ball_d], center = true);\n    }\n}\n\nmodule hexagon_patches() {\n    // Realistic hexagon patches on ball surface\n    for (i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, seat_r * 0.8, 0])\n                rotate([90, 0, 0])\n                    linear_extrude(height = 1.5, center = true)\n                        circle(r = 12, $fn = 6);\n    }\n}\n\nmodule pentagon_patches() {\n    // Pentagon patches\n    for (i = [0:4]) {\n        rotate([0, 0, i*72 + 36])\n            translate([0, seat_r * 0.5, 0])\n                rotate([90, 0, 0])\n                    linear_extrude(height = 1.5, center = true)\n                        circle(r = 8, $fn = 5);\n    }\n}\n\nmodule legs() {\n    // Four curved legs for stability\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([ball_d/2 - leg_t, 0, -leg_h/2 - ball_d/2])\n                cylinder(h = leg_h, d = leg_t, center = true);\n    }\n}\n\nmodule support_ring() {\n    // Structural support ring under ball\n    translate([0, 0, -ball_d/2 - leg_h/2])\n        difference() {\n            cylinder(h = 4, d = ball_d - 5, center = true);\n            cylinder(h = 5, d = ball_d - 5 - 2*wall_t, center = true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Soccer ball seat\n    soccer_ball();\n    \n    // Surface details (hexagons and pentagons)\n    difference() {\n        union() {\n            hexagon_patches();\n            pentagon_patches();\n        }\n        // Cut to sphere surface\n        sphere(d = ball_d - 1);\n    }\n    \n    // Leg assembly\n    legs();\n    \n    // Support structure\n    support_ring();\n}",
    "renders": true
  },
  {
    "natural_object": "tennisball",
    "openscad_code": "// Tennisball Ottoman / Stool\n// Realistic style, medium complexity\n// Overall height: 100 mm, diameter: 120 mm\n\n$fn = 60;  // Smooth curves\n\n// Main parameters\nball_d = 120;          // Ball diameter\nball_wall = 2;         // Wall thickness for printability\nseam_w = 3;            // Width of tennis ball seam\nseam_h = 1.5;          // Height of seam above surface\nleg_h = 40;            // Height of legs\nleg_d = 15;            // Leg diameter\nbase_clearance = 5;    // Gap between ball and base\n\n// Tennis ball color\ntennis_color = [0.94, 0.88, 0.31];\n\n// Main hollow tennis ball shell\nmodule tennis_ball_shell() {\n    // Outer sphere\n    color(tennis_color) \n    difference() {\n        sphere(d = ball_d);\n        \n        // Hollow out interior\n        sphere(d = ball_d - 2 * ball_wall);\n        \n        // Flatten bottom slightly for stability\n        translate([0, 0, -ball_d/2 - 1])\n            cube([ball_d*2, ball_d*2, ball_d/2], center = true);\n    }\n}\n\n// Tennis ball seam pattern\nmodule tennis_ball_seam() {\n    // Create two \"S\" curves that meet at poles\n    for (i = [0:1]) {\n        rotate([0, 0, i*180])\n        union() {\n            // Left curve\n            for (t = [0:5:180]) {\n                angle = t;\n                x = ball_d/2 * cos(angle) * 1.1;\n                y = ball_d/2 * sin(angle) * 0.6 * sin(angle/2);\n                z = ball_d/2 * sin(angle) * 0.9;\n                \n                translate([x, y, z])\n                    rotate([0, angle, 0])\n                    cylinder(h = seam_h + 1, d = seam_w, center = true);\n            }\n        }\n    }\n}\n\n// Support structure inside\nmodule internal_supports() {\n    // Central column for strength\n    color([0.2, 0.2, 0.2])\n    difference() {\n        cylinder(h = ball_d - 10, d = 30, center = true);\n        // Lightening holes\n        for (i = [0:45:135]) {\n            rotate([0, 0, i])\n            translate([0, 8, 0])\n            cylinder(h = ball_d, d = 8, center = true);\n        }\n    }\n}\n\n// Furniture legs\nmodule legs() {\n    color([0.3, 0.3, 0.3])\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, 35, -ball_d/2 - leg_h/2 - base_clearance])\n            cylinder(h = leg_h, d = leg_d);\n    }\n}\n\n// Base plate for stability\nmodule base_plate() {\n    color([0.25, 0.25, 0.25])\n    difference() {\n        cylinder(h = 4, d = ball_d * 0.9);\n        \n        // Screw holes for optional attachment\n        for (i = [0:90:270]) {\n            rotate([0, 0, i])\n            translate([30, 0, -1])\n            cylinder(h = 6, d = 5);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, ball_d/2 + leg_h + base_clearance])\n    union() {\n        tennis_ball_shell();\n        tennis_ball_seam();\n    }\n\ntranslate([0, 0, ball_d/2 + leg_h + base_clearance])\n    internal_supports();\n\nlegs();\ntranslate([0, 0, -ball_d/2 - base_clearance - leg_h + 2])\n    base_plate();",
    "renders": true
  },
  {
    "natural_object": "volleyball",
    "openscad_code": "// Volleyball Stool - Realistic Style\n// A functional stool shaped like a volleyball with structural support\n\n// Global parameters\nball_diameter = 100;\nwall_thickness = 2;\nleg_height = 150;\nleg_taper = 0.8;\n\n// Main volleyball shell module\nmodule volleyball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness*2, $fn = 64);\n        \n        // Flat seating surface on top\n        translate([0, 0, ball_diameter/2 - 2])\n            cube([ball_diameter*0.8, ball_diameter*0.8, 10], center = true);\n    }\n}\n\n// Volleyball panel seams\nmodule volleyball_seams() {\n    // Generate 6 great circles for volleyball pattern\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        rotate([90, 0, 0])\n        translate([0, 0, -ball_diameter/2])\n        linear_extrude(height = ball_diameter, center = true)\n        circle(d = ball_diameter, $fn = 100);\n    }\n    \n    // Additional perpendicular seam\n    rotate([90, 0, 0])\n    translate([0, 0, -ball_diameter/2])\n    linear_extrude(height = ball_diameter, center = true)\n    circle(d = ball_diameter, $fn = 100);\n}\n\n// Structural legs with tapered design\nmodule stool_legs() {\n    leg_radius = 6;\n    base_radius = 8;\n    \n    for(i = [0:2]) {\n        angle = i*120;\n        \n        // Leg from ball to floor\n        translate([cos(angle)*(ball_diameter/2 - 5), sin(angle)*(ball_diameter/2 - 5), -leg_height/2])\n        rotate([0, 0, angle])\n        rotate([90, 0, 0])\n        cylinder(h1 = base_radius, h2 = leg_radius, h = leg_height, $fn = 20);\n        \n        // Reinforcement gusset\n        translate([cos(angle)*(ball_diameter/2 - 5)*0.7, sin(angle)*(ball_diameter/2 - 5)*0.7, -leg_height/3])\n        cube([wall_thickness*2, wall_thickness*2, leg_height/3], center = true);\n    }\n}\n\n// Floor base ring for stability\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 8, r1 = ball_diameter*0.6, r2 = ball_diameter*0.55, $fn = 32);\n        \n        // Inner hollow\n        cylinder(h = 10, r = ball_diameter*0.45, $fn = 32);\n    }\n}\n\n// Anti-slip foot pads\nmodule foot_pads() {\n    pad_radius = 10;\n    pad_height = 3;\n    \n    for(i = [0:2]) {\n        angle = i*120;\n        translate([cos(angle)*(ball_diameter*0.5), sin(angle)*(ball_diameter*0.5), -leg_height - pad_height/2])\n        cylinder(h = pad_height, r = pad_radius, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main volleyball stool body\n    volleyball_shell();\n    \n    // Add seams as raised details\n    translate([0, 0, ball_diameter/2 - 1])\n    scale([1.02, 1.02, 0.1])\n    volleyball_seams();\n    \n    // Structural support\n    translate([0, 0, -ball_diameter/2])\n    stool_legs();\n    \n    // Base ring\n    translate([0, 0, -leg_height - 4])\n    base_ring();\n    \n    // Foot pads\n    foot_pads();\n}",
    "renders": true
  },
  {
    "natural_object": "golfball",
    "openscad_code": "// Golfball Stool - Realistic style, medium complexity\n// Dimensions: 120mm diameter golfball, 300mm total height\n\n$fn = 64;\n\n// Main parameters\nball_diameter = 120;\nstool_height = 300;\nleg_thickness = 20;\nbase_diameter = 100;\n\n// Golf ball dimple pattern parameters\ndimple_radius = 3;\ndimple_depth = 1.5;\ndimple_rows = 8;\n\nmodule dimple_pattern() {\n    // Create dimples on surface using spherical holes\n    for (i = [0:dimple_rows-1]) {\n        angle = i * 180 / (dimple_rows - 1);\n        row_radius = (ball_diameter/2) * sin(angle);\n        dimples_in_row = floor(2 * PI * row_radius / (dimple_radius * 2.5));\n        \n        for (j = [0:dimples_in_row-1]) {\n            rotate_angle = j * 360 / dimples_in_row;\n            \n            rotate([0, angle, rotate_angle])\n                translate([0, 0, ball_diameter/2])\n                    rotate([0, 180, 0])\n                        sphere(dimple_radius);\n        }\n    }\n}\n\nmodule golfball_surface() {\n    difference() {\n        sphere(d = ball_diameter);\n        dimple_pattern();\n    }\n}\n\nmodule leg_support() {\n    // Central support column\n    cylinder(h = stool_height - ball_diameter/2, d = 30);\n    \n    // Reinforcement rings\n    for (i = [1:3]) {\n        translate([0, 0, i * (stool_height - ball_diameter/2) / 4])\n            cylinder(h = 2, d = 35);\n    }\n}\n\nmodule base() {\n    // Wide base for stability\n    cylinder(h = 20, d = base_diameter);\n    \n    // Anti-slip ring\n    translate([0, 0, 18])\n        cylinder(h = 2, d = base_diameter + 10);\n}\n\nmodule structural_joints() {\n    // Top joint - connects ball to support\n    translate([0, 0, stool_height - ball_diameter/2 - 5])\n        cylinder(h = 10, d = 35);\n    \n    // Bottom joint - connects support to base\n    translate([0, 0, 20])\n        cylinder(h = 10, d = 35);\n}\n\n// Assemble the stool\nunion() {\n    // Golf ball seat\n    translate([0, 0, stool_height - ball_diameter/2])\n        golfball_surface();\n    \n    // Structural elements\n    leg_support();\n    base();\n    structural_joints();\n    \n    // Additional support struts\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([15, 0, (stool_height - ball_diameter/2)/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 100, d = leg_thickness);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "pingpongball",
    "openscad_code": "// Pingpong Ball Inspired Stool\n// Medium complexity realistic style\n\n// Parameters\nball_d = 40;                // Pingpong ball diameter\nwall_t = 2;                 // Wall thickness for 3D printing\nseat_h = 4;                // Seat thickness\nleg_h = 120;               // Leg height\nleg_d = 25;                // Leg diameter at base\nbase_d = 80;               // Base diameter\ndetail_r = 1.5;            // Detail radius for ridges\n\n// Main stool module\nmodule stool() {\n    // Pingpong ball seat with hollow interior\n    difference() {\n        // Outer sphere (seat top)\n        translate([0, 0, leg_h + ball_d/2 - 5])\n            sphere(d = ball_d);\n        \n        // Hollow interior\n        translate([0, 0, leg_h + ball_d/2 - 5])\n            sphere(d = ball_d - wall_t*2);\n        \n        // Flat seat bottom\n        translate([0, 0, leg_h])\n            cube([ball_d + 10, ball_d + 10, ball_d/2], center = true);\n    }\n    \n    // Seat rim detail\n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([0, ball_d/2 - wall_t/2, leg_h + ball_d/2 - 5])\n                cylinder(h = wall_t, r = detail_r, center = true);\n    }\n    \n    // Structural support cylinder under seat\n    difference() {\n        cylinder(h = 15, r1 = leg_d/2 + 5, r2 = leg_d/2 + 3, center = false);\n        cylinder(h = 15, r1 = leg_d/2 + 2, r2 = leg_d/2, center = false);\n    }\n    \n    // Tapered leg\n    cylinder(h = leg_h, r1 = leg_d/2 + 3, r2 = leg_d/2, center = false);\n    \n    // Reinforced base\n    difference() {\n        cylinder(h = 8, r1 = base_d/2, r2 = base_d/2 - 2, center = false);\n        cylinder(h = 8, r1 = base_d/2 - wall_t, r2 = base_d/2 - wall_t - 2, center = false);\n    }\n    \n    // Base support ribs\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([base_d/2 - wall_t - 2, 0, 4])\n                cube([wall_t*2, 15, 8], center = true);\n    }\n    \n    // Pingpong ball seam detail on seat\n    translate([0, 0, leg_h + ball_d/2 - 5])\n        rotate([90, 0, 0])\n            cylinder(h = ball_d, r = wall_t/2, center = true);\n    \n    // Leg reinforcement rings\n    for (h = [30:30:90]) {\n        translate([0, 0, h])\n            difference() {\n                cylinder(h = wall_t, r1 = leg_d/2 + 5, r2 = leg_d/2 + 4, center = true);\n                cylinder(h = wall_t + 1, r1 = leg_d/2, r2 = leg_d/2 - 1, center = true);\n            }\n    }\n}\n\n// Assembly\nstool();",
    "renders": true
  },
  {
    "natural_object": "poolball",
    "openscad_code": "// Poolball Stool\n// A functional stool designed around a regulation-size poolball\n// Overall height: 450mm, Ball diameter: 143mm\n\nball_d = 143;\nwall_t = 2;\n\n// Main ball shell\nmodule ball_shell(d=ball_d, wall=wall_t) {\n    difference() {\n        sphere(d=d);\n        sphere(d=d - 2*wall);\n    }\n}\n\n// Number circle recess\nmodule number_circle(num=8) {\n    // Position and size for #8 ball\n    translate([0, 0, ball_d/2 - 1])\n    rotate([90, 0, 0])\n    cylinder(h=wall_t + 1, d=40, $fn=50);\n}\n\n// Number \"8\" shape\nmodule number_eight() {\n    translate([0, 0, ball_d/2 - 0.5])\n    rotate([90, 0, 0])\n    linear_extrude(height=wall_t + 0.5) {\n        // Two stacked circles for 8\n        translate([0, 5, 0]) circle(d=12, $fn=32);\n        translate([0, -5, 0]) circle(d=12, $fn=32);\n    }\n}\n\n// Leg structure\nmodule leg(h=300, base_d=30, top_d=45) {\n    // Tapered cylindrical leg\n    cylinder(h1=base_d, h2=top_d, h=h, $fn=32);\n}\n\n// Leg mounting bracket\nmodule leg_bracket() {\n    difference() {\n        // Bracket block\n        translate([0, 0, -ball_d/2 - 10])\n        cube([45, 45, 20], center=true);\n        \n        // Hole for leg\n        translate([0, 0, -ball_d/2 - 15])\n        cylinder(h=30, d=30, $fn=32);\n    }\n    \n    // Reinforcement ribs\n    for (angle=[0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n        translate([22.5, 0, -ball_d/2 - 5])\n        cube([wall_t, 10, 10], center=true);\n    }\n}\n\n// Foot pad\nmodule foot_pad(d=40, h=5) {\n    cylinder(h=h, d=d, $fn=32);\n    // Grip pattern\n    for (r=[d/4, d/2]) {\n        cylinder(h=h + 0.1, d=r, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Ball seat\n    ball_shell();\n    \n    // Number detail\n    difference() {\n        ball_shell();\n        number_circle();\n    }\n    \n    // Number 8\n    number_eight();\n    \n    // Legs (4 legs at 90 degrees)\n    for (i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, ball_d/2 + 20, -ball_d/2 - 150])\n        leg();\n        \n        // Brackets\n        rotate([0, 0, i*90])\n        leg_bracket();\n        \n        // Feet\n        rotate([0, 0, i*90])\n        translate([0, ball_d/2 + 20, -ball_d/2 - 300 - 5])\n        foot_pad();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "bowlingball",
    "openscad_code": "// Bowling Ball Stool / Side Table\n// Realistic medium-complexity design\n// Approx. Ø110 mm ball, 120 mm total height\n\n// Parameters\nball_d = 110;               // Bowling ball diameter\nhole_d = 20;                // Finger hole diameter\nwall_t = 2;                 // 3D-printable wall thickness\nleg_h  = 25;                // Short legs for stability\nleg_d  = 8;\nn_holes = 3;                // Classic 3-hole grip\n\n// Main module\nmodule bowling_ball_stool(){\n    // Hollow bowling ball shell\n    difference(){\n        sphere(d = ball_d, $fn = 100);\n        sphere(d = ball_d - 2*wall_t, $fn = 100);\n    }\n\n    // Finger holes\n    for(i = [0 : n_holes-1]){\n        rotate([0, 0, i*120 + 30])\n        translate([ball_d/2 - 5, 0, ball_d/2 - 5])\n        rotate([0, 90, 0])\n        cylinder(h = ball_d, d = hole_d + wall_t, $fn = 20);\n    }\n\n    // Internal reinforcement ring for seating load\n    translate([0, 0, ball_d/2 - 5])\n    difference(){\n        cylinder(h = 5, d = ball_d - 4*wall_t, $fn = 60);\n        cylinder(h = 5, d = ball_d - 8*wall_t, $fn = 60);\n    }\n\n    // Four small stabilizing legs\n    for(a = [0, 90, 180, 270]){\n        rotate([0, 0, a + 45])\n        translate([ball_d/2 * 0.6, 0, -leg_h/2])\n        cylinder(h = leg_h, d = leg_d, $fn = 20, center = true);\n    }\n\n    // Decorative finger-grip ridge around holes\n    for(i = [0 : n_holes-1]){\n        rotate([0, 0, i*120 + 30])\n        translate([ball_d/2 - 7, 0, ball_d/2 - 7])\n        rotate([0, 90, 0])\n        difference(){\n            cylinder(h = 6, d = hole_d + 6, $fn = 30);\n            cylinder(h = 6, d = hole_d + 2, $fn = 30);\n        }\n    }\n}\n\n// Render\nbowling_ball_stool();",
    "renders": true
  },
  {
    "natural_object": "rugbyball",
    "openscad_code": "// Rugbyball Bench\n// A stylized bench shaped like a rugbyball with functional legs and supports\n\n// Parameters\n$fn = 50;\nball_length = 120;\nball_radius = 35;\nleg_height = 60;\nleg_thickness = 8;\nsupport_thickness = 3;\nseat_thickness = 4;\n\n// Main rugbyball module\nmodule rugbyball() {\n    // Main ellipsoid body\n    scale([1, 0.75, 0.75])\n    sphere(ball_radius);\n    \n    // Add lacing details\n    translate([ball_radius*0.9, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(2*ball_radius*0.75, 1, 1);\n    translate([-ball_radius*0.9, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(2*ball_radius*0.75, 1, 1);\n    \n    // Additional lace segments\n    for (i = [-2:2]) {\n        translate([i*20, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(2*ball_radius*0.75*0.8, 3, 3);\n    }\n}\n\n// Leg support structure\nmodule leg_support() {\n    // Front legs\n    for (x = [-1:2:1]) {\n        translate([x*ball_length*0.35, 0, 0]) {\n            // Main leg\n            translate([0, ball_radius*0.75, -leg_height/2])\n            rotate([90, 0, 0])\n            cylinder(leg_height, leg_thickness/2, leg_thickness/2);\n            \n            // Leg brace\n            translate([0, 0, -leg_height*0.3])\n            cube([leg_thickness*2, leg_thickness*2, leg_height*0.6], center=true);\n        }\n    }\n    \n    // Rear legs\n    for (x = [-1:2:1]) {\n        translate([x*ball_length*0.35, -ball_radius*0.75, 0]) {\n            // Main leg\n            translate([0, ball_radius*0.75, -leg_height/2])\n            rotate([90, 0, 0])\n            cylinder(leg_height, leg_thickness/2, leg_thickness/2);\n            \n            // Cross brace\n            translate([0, 0, -leg_height*0.4])\n            cube([leg_thickness*2, leg_thickness*2, leg_height*0.6], center=true);\n        }\n    }\n    \n    // Connecting support bars\n    // Front to back\n    for (x = [-1:2:1]) {\n        translate([x*ball_length*0.35, -ball_radius*0.75/2, -leg_height*0.7])\n        cube([leg_thickness*1.5, ball_radius*0.75, leg_thickness*1.5], center=true);\n    }\n    \n    // Side to side\n    translate([0, -ball_radius*0.75/2, -leg_height*0.7])\n    cube([ball_length*0.7, leg_thickness*1.5, leg_thickness*1.5], center=true);\n}\n\n// Hollow out the ball for seating\nmodule hollow_rugbyball() {\n    difference() {\n        rugbyball();\n        \n        // Create seating surface\n        translate([0, 0, 5])\n        scale([1, 0.75, 0.6])\n        sphere(ball_radius - seat_thickness);\n        \n        // Cut bottom flat\n        translate([0, 0, -ball_radius])\n        cube([ball_length*2, ball_radius*2, ball_radius], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_height + ball_radius*0.75])\nrotate([90, 0, 0])\nhollow_rugbyball();\n\nleg_support();",
    "renders": true
  },
  {
    "natural_object": "cricketball",
    "openscad_code": "// Cricket Ball Stool - Realistic Style\n// Dimensions: ~120mm diameter ball, 300mm total height\n\n// Parameters\nball_diameter = 120;\nseam_width = 2;\nleather_thickness = 2.5;\nleg_height = 180;\nleg_diameter = 25;\nseat_thickness = 15;\n\n// Colors\nball_color = \"#A52A2A\";\nseam_color = \"#FFFFFF\";\nleg_color = \"#8B4513\";\n\n// Cricket ball module\nmodule cricket_ball() {\n    color(ball_color) {\n        // Main ball body with slight compression at poles\n        difference() {\n            sphere(d = ball_diameter, $fn = 64);\n            \n            // Slight flattening at poles for realistic shape\n            translate([0, 0, ball_diameter/2 - 2])\n                cylinder(h = 4, r = ball_diameter/3, $fn = 32);\n            translate([0, 0, -ball_diameter/2 + 2])\n                cylinder(h = 4, r = ball_diameter/3, $fn = 32);\n        }\n        \n        // Leather seam lines\n        color(seam_color) {\n            // Main seam around equator\n            rotate([0, 0, 0])\n                rotate_extrude(angle = 360, $fn = 128)\n                    translate([ball_diameter/2 - seam_width/2, 0, 0])\n                        square([seam_width, seam_width/2]);\n            \n            // Six rows of stitching lines\n            for(i = [0:30:150]) {\n                rotate([0, i, 0]) {\n                    rotate_extrude(angle = 360, $fn = 64)\n                        translate([ball_diameter/2 - seam_width/2, 0, 0])\n                            square([seam_width, seam_width/4]);\n                }\n            }\n        }\n        \n        // Quarter seam details\n        for(angle = [45, 135, 225, 315]) {\n            rotate([0, 0, angle]) {\n                rotate([0, 90, 0])\n                    cylinder(h = ball_diameter * 0.8, r = seam_width/2, center = true, $fn = 16);\n            }\n        }\n    }\n}\n\n// Reinforced seat structure\nmodule seat_structure() {\n    // Top plate for ball mounting\n    color(leg_color) {\n        difference() {\n            cylinder(h = seat_thickness, r = ball_diameter/2 + 10, $fn = 64);\n            \n            // Hollow center for weight reduction\n            cylinder(h = seat_thickness + 1, r = ball_diameter/2 - 15, $fn = 32);\n            \n            // Mounting holes for legs\n            for(i = [0:120:359]) {\n                rotate([0, 0, i])\n                    translate([ball_diameter/2 - 5, 0, -1])\n                        cylinder(h = seat_thickness + 2, r = leg_diameter/2 + 2, $fn = 16);\n            }\n        }\n        \n        // Reinforcement ribs\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, seat_thickness/2]) {\n                    cube([ball_diameter/2 + 10, 5, seat_thickness], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Leg structure with stretchers\nmodule leg_structure() {\n    color(leg_color) {\n        // Three legs with slight taper\n        for(i = [0:120:359]) {\n            rotate([0, 0, i]) {\n                translate([ball_diameter/2 - 5, 0, 0]) {\n                    // Upper leg segment\n                    cylinder(h = leg_height * 0.7, r1 = leg_diameter/2, r2 = leg_diameter/2 - 3, $fn = 16);\n                    \n                    // Lower leg segment with foot\n                    translate([0, 0, leg_height * 0.7]) {\n                        cylinder(h = leg_height * 0.3, r1 = leg_diameter/2 - 3, r2 = leg_diameter/2 + 2, $fn = 16);\n                        \n                        // Foot pad\n                        translate([0, 0, leg_height * 0.3]) {\n                            cylinder(h = 5, r = leg_diameter/2 + 5, $fn = 24);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Lower stretcher ring\n        translate([0, 0, leg_height * 0.4]) {\n            difference() {\n                cylinder(h = 8, r = ball_diameter/2 + 20, $fn = 64);\n                cylinder(h = 10, r = ball_diameter/2 + 10, $fn = 64);\n            }\n        }\n        \n        // Upper stretcher ring\n        translate([0, 0, leg_height * 0.7]) {\n            difference() {\n                cylinder(h = 6, r = ball_diameter/2 + 15, $fn = 64);\n                cylinder(h = 8, r = ball_diameter/2 + 5, $fn = 64);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_height]) {\n    seat_structure();\n    translate([0, 0, seat_thickness]) {\n        cricket_ball();\n    }\n}\n\nleg_structure();",
    "renders": true
  },
  {
    "natural_object": "handball",
    "openscad_code": "// Handball Display Stand - OpenSCAD\n// A realistic display stand for a handball with furniture-like characteristics\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main dimensions\nball_diameter = 60;\nstand_height = 80;\nbase_width = 100;\nbase_depth = 80;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule handball() {\n    // Main ball body\n    color(\"orange\") \n    sphere(d=ball_diameter);\n    \n    // Handball texture lines\n    difference() {\n        sphere(d=ball_diameter);\n        \n        // Horizontal grooves\n        for(i = [-1, 0, 1]) {\n            translate([0, i * 10, 0])\n            rotate([90, 0, 0])\n            cylinder(h=ball_diameter + 2, d=ball_diameter - 1, center=true);\n        }\n        \n        // Vertical grooves\n        for(i = [-1, 0, 1]) {\n            rotate([0, 90, 0])\n            translate([0, i * 10, 0])\n            rotate([90, 0, 0])\n            cylinder(h=ball_diameter + 2, d=ball_diameter - 1, center=true);\n        }\n    }\n}\n\nmodule display_stand() {\n    // Base with rounded edges\n    difference() {\n        // Main base block\n        translate([0, 0, stand_height/2 - 5])\n        cube([base_width, base_depth, 10], center=true);\n        \n        // Rounded bottom edge\n        translate([0, 0, stand_height/2 - 10])\n        cube([base_width - 4, base_depth - 4, 10], center=true);\n    }\n    \n    // Support pillars\n    pillar_width = 8;\n    pillar_positions = [\n        [base_width/2 - 15, base_depth/2 - 15],\n        [-base_width/2 + 15, base_depth/2 - 15],\n        [base_width/2 - 15, -base_depth/2 + 15],\n        [-base_width/2 + 15, -base_depth/2 + 15]\n    ];\n    \n    for(pos = pillar_positions) {\n        translate([pos[0], pos[1], stand_height/2 + 5])\n        cylinder(h=stand_height - 10, d=pillar_width);\n    }\n    \n    // Ball cradle with 45-degree supports\n    cradle_radius = ball_diameter/2 + wall_thickness;\n    \n    // Four support arms\n    support_angles = [45, 135, 225, 315];\n    for(angle = support_angles) {\n        rotate([0, 0, angle])\n        translate([cradle_radius/2, 0, stand_height - 5])\n        rotate([90, 0, 0])\n        cylinder(h=cradle_radius, d=6);\n    }\n    \n    // Central support ring\n    translate([0, 0, stand_height - 5])\n    cylinder(h=4, d=cradle_radius * 1.5);\n    \n    // Bottom reinforcement ribs\n    rib_height = stand_height - 15;\n    for(angle = [0, 90]) {\n        rotate([0, 0, angle])\n        translate([0, base_depth/4, rib_height/2 + 5])\n        cube([wall_thickness, base_depth/2, rib_height], center=true);\n    }\n}\n\n// Assembly\nhandball();\ntranslate([0, 0, 0])\ndisplay_stand();",
    "renders": true
  },
  {
    "natural_object": "dodgeball",
    "openscad_code": "// Dodgeball Ottoman / Stool - Realistic Style\n// Medium complexity 3D printable furniture piece\n// Combines dodgeball aesthetics with functional furniture design\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nball_diameter = 120;\nwall_thickness = 2.5;\nleg_height = 80;\n\n// Main ball body\nmodule dodgeball_body() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - 2 * wall_thickness);\n        \n        // Flat top for seating surface\n        translate([0, 0, ball_diameter/2 - 5])\n            cube([ball_diameter * 1.1, ball_diameter * 1.1, 10], center = true);\n    }\n}\n\n// Realistic dodgeball texture pattern\nmodule ball_texture() {\n    // Horizontal seam lines\n    for (i = [-1, 0, 1]) {\n        rotate([90, 0, 0])\n            rotate([0, 90 * i, 0])\n                translate([0, 0, ball_diameter/2 - 1])\n                    linear_extrude(height = 2.1)\n                        circle(d = ball_diameter * 0.95);\n    }\n    \n    // Vertical seam lines\n    for (i = [0:45:315]) {\n        rotate([0, i, 0])\n            translate([0, 0, ball_diameter/2 - 1])\n                linear_extrude(height = 2.1)\n                    circle(d = ball_diameter * 0.95);\n    }\n}\n\n// Reinforced seating surface\nmodule seat_surface() {\n    difference() {\n        // Cushioned top\n        translate([0, 0, ball_diameter/2 - 2.5])\n            cylinder(h = 5, d = ball_diameter * 0.85, $fn = 64);\n            \n        // Comfort depression\n        translate([0, 0, ball_diameter/2])\n            cylinder(h = 3, d = ball_diameter * 0.7, $fn = 64);\n    }\n}\n\n// Sturdy support legs\nmodule furniture_legs() {\n    leg_positions = [\n        [30, 30],\n        [-30, 30],\n        [-30, -30],\n        [30, -30]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], -leg_height/2])\n            cylinder(h = leg_height, d = 20, $fn = 16);\n            \n        // Leg reinforcements\n        translate([pos[0], pos[1], -leg_height + 5])\n            cylinder(h = 10, d1 = 20, d2 = 25, $fn = 16);\n    }\n    \n    // Central support column\n    translate([0, 0, -leg_height/2])\n        cylinder(h = leg_height, d = 40, $fn = 32);\n}\n\n// Anti-slip base ring\nmodule base_ring() {\n    translate([0, 0, -leg_height - 2.5])\n        difference() {\n            cylinder(h = 5, d = ball_diameter * 0.9, $fn = 64);\n            cylinder(h = 5.1, d = ball_diameter * 0.7, $fn = 64);\n        }\n}\n\n// Assembly\nunion() {\n    // Main body assembly\n    union() {\n        dodgeball_body();\n        \n        // Seating surface\n        seat_surface();\n        \n        // Textured details\n        color(\"red\")\n            ball_texture();\n    }\n    \n    // Structural elements\n    furniture_legs();\n    \n    // Base stability\n    base_ring();\n}",
    "renders": true
  },
  {
    "natural_object": "kickball",
    "openscad_code": "// Kickball Ottoman - Realistic Style, Medium Complexity\n// A spherical ottoman resembling a classic red kickball with furniture structure\n\n$fn = 36;  // Smooth curves for 3D printing\nwall = 2;  // Standard 3D printable wall thickness\n\n// Main dimensions\nball_diameter = 120;\nleg_height = 80;\nleg_width = 30;\n\n// Kickball texture pattern\nmodule kickball_pattern(radius) {\n    // White stripes\n    difference() {\n        sphere(r = radius);\n        \n        // Horizontal stripe removal\n        for (i = [0:1]) {\n            rotate([0, 90, i*180]) {\n                translate([0, 0, -radius/2]) \n                    cube([radius*3, radius*1.2, radius], center = true);\n            }\n        }\n        \n        // Vertical stripe removal\n        rotate([90, 0, 0]) {\n            translate([0, 0, -radius/2]) \n                cube([radius*3, radius*1.2, radius], center = true);\n        }\n    }\n}\n\n// Internal structure for furniture integrity\nmodule internal_support() {\n    // Central support column\n    cylinder(h = ball_diameter - wall*2, r = 15, center = true);\n    \n    // Radial supports\n    for (i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([0, 0, 0]) {\n                cube([wall*3, ball_diameter/2 - 20, ball_diameter - wall*2], center = true);\n            }\n        }\n    }\n}\n\n// Furniture legs with joints\nmodule leg() {\n    // Main leg post\n    difference() {\n        cylinder(h = leg_height, r = leg_width/2);\n        \n        // Cavity for weight reduction\n        translate([0, 0, 5])\n            cylinder(h = leg_height - 10, r = leg_width/2 - wall);\n    }\n    \n    // Top joint plate\n    translate([0, 0, leg_height])\n        cylinder(h = 8, r = leg_width/2 + 10);\n    \n    // Bottom foot pad\n    translate([0, 0, 0])\n        cylinder(h = 5, r = leg_width/2 + 3);\n}\n\n// Complete leg assembly\nmodule leg_assembly() {\n    // Four legs positioned for stability\n    for (i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([ball_diameter/2 - leg_width - 10, 0, 0]) {\n                leg();\n            }\n        }\n    }\n}\n\n// Ball shell with cutouts for leg mounts\nmodule ball_shell() {\n    difference() {\n        // Main ball volume\n        sphere(r = ball_diameter/2);\n        \n        // Hollow out interior\n        sphere(r = ball_diameter/2 - wall);\n        \n        // Leg mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([ball_diameter/2 - leg_width - 10, 0, -leg_height - 8]) {\n                    cylinder(h = leg_height + 16, r = leg_width/2 + 5);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Red kickball outer shell\n    color(\"red\")\n        ball_shell();\n    \n    // White stripe details\n    color(\"white\")\n        translate([0, 0, 0])\n            scale([(ball_diameter/2 - wall/2)/(ball_diameter/2),\n                   (ball_diameter/2 - wall/2)/(ball_diameter/2),\n                   (ball_diameter/2 - wall/2)/(ball_diameter/2)])\n                kickball_pattern(ball_diameter/2 - wall/2);\n    \n    // Internal support structure\n    color([0.8, 0.8, 0.8])\n        translate([0, 0, 0])\n            internal_support();\n    \n    // Leg assembly\n    color([0.3, 0.3, 0.3])\n        translate([0, 0, -ball_diameter/2])\n            leg_assembly();\n}",
    "renders": true
  },
  {
    "natural_object": "lacrosseball",
    "openscad_code": "// Lacrosse Ball Ottoman / Side Table\n// Realistic style, medium complexity, 3D-printable\n// Dimensions: 120 mm diameter ball on 4-leg stand, total height 200 mm\n\n// Overall parameters\nball_d = 120;           // Lacrosse ball diameter\nball_r = ball_d/2;\nwall = 2;               // Wall thickness for printing\nleg_h = 80;             // Height from floor to ball bottom\nleg_w = 8;              // Leg width\nstand_w = 70;           // Square footprint of base frame\n\n// Lacrosse ball surface texture\nmodule lacrosse_ball(d=120){\n    difference(){\n        // Main ball sphere\n        sphere(d=d, $fn=120);\n\n        // Subtle dimples\n        for(i=[0:5:355]){\n            rotate([0,i,0])\n                translate([ball_r-0.5,0,0])\n                    rotate([0,90,0])\n                        cylinder(h=0.5,r1=4,r2=3,$fn=16);\n        }\n        \n        // Hollow interior for printability\n        sphere(d=d-2*wall,$fn=120);\n    }\n}\n\n// Four-leg stand\nmodule stand(){\n    // Top ring\n    difference(){\n        cylinder(h=wall,d=ball_d+10,$fn=64);\n        cylinder(h=wall+0.1,d=ball_d+10-2*wall,$fn=64);\n    }\n    \n    // Legs\n    for(i=[0:90:270]){\n        rotate([0,0,i])\n            translate([stand_w/2 - leg_w/2,0,leg_h/2])\n                cube([leg_w,leg_w,leg_h],center=true);\n    }\n    \n    // Bottom frame (square)\n    difference(){\n        cube([stand_w+leg_w,stand_w+leg_w,wall],center=true);\n        cube([stand_w,stand_w,wall+0.1],center=true);\n    }\n}\n\n// Assembly\nunion(){\n    // Lacrosse ball on top\n    translate([0,0,leg_h+wall+ball_r])\n        lacrosse_ball();\n    \n    // Stand\n    stand();\n    \n    // Reinforcement ribs between legs\n    for(i=[45:90:315]){\n        rotate([0,0,i])\n            translate([0,0,leg_h/4])\n                cube([leg_w*0.8,stand_w*0.7,wall],center=true);\n    }\n    \n    // Small center support column\n    difference(){\n        cylinder(h=leg_h,d=20,$fn=32);\n        cylinder(h=leg_h+0.1,d=20-2*wall,$fn=32);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "fieldhockeyball",
    "openscad_code": "// Field-hockey-ball shaped side table (realistic, medium complexity)\n// Overall: 100 mm diameter ball on 3 curved legs, 60 mm high top surface\n// Wall thickness 2 mm everywhere for printability\n\nmodule thick_shell(r, h, thick=2) {\n    // hollow shell with flat bottom\n    difference() {\n        sphere(r);\n        translate([0,0,-thick]) sphere(r-thick);\n        // slice bottom flat\n        translate([0,0,-r]) cube([r*2.2,r*2.2,r*2],center=true);\n    }\n}\n\nmodule seam_line(r, h) {\n    // raised seam ring around the ball\n    rotate_extrude()\n        translate([r-0.5,0,0]) square([1, h]);\n}\n\nmodule leg_profile() {\n    // single curved leg cross-section\n    hull() {\n        translate([0,-3,0]) cylinder(h=2,d=8,center=true);\n        translate([0,-3,20]) cylinder(h=2,d=6,center=true);\n    }\n}\n\nmodule leg() {\n    // one curved leg\n    difference() {\n        union() {\n            linear_extrude(height=50, twist=15, scale=[1,0.6])\n                leg_profile();\n            // foot pad\n            translate([0,0,50]) cylinder(h=3,d1=10,d2=12,$fn=32);\n        }\n        // hollow inside\n        translate([0,0,1]) \n            linear_extrude(height=48, twist=15, scale=[0.7,0.4])\n                offset(-2) leg_profile();\n    }\n}\n\nmodule legs() {\n    // three legs 120° apart\n    for(i=[0:120:240]) {\n        rotate([0,0,i])\n            translate([35,0,-50]) leg();\n    }\n}\n\nmodule table_top() {\n    // flat tabletop disk\n    difference() {\n        cylinder(h=5,d=105,$fn=64);\n        translate([0,0,2]) cylinder(h=3,d=101,$fn=64);\n    }\n}\n\n// main model\nunion() {\n    // ball body\n    translate([0,0,55]) thick_shell(r=50, thick=2);\n\n    // raised seam rings\n    translate([0,0,55]) rotate([0,90,0]) seam_line(50,2);\n    translate([0,0,55]) rotate([90,0,0]) seam_line(50,2);\n\n    // tabletop on top\n    translate([0,0,105]) table_top();\n\n    // legs attached to bottom of ball\n    legs();\n}",
    "renders": true
  },
  {
    "natural_object": "puck",
    "openscad_code": "// Puck furniture item - realistic style, medium complexity\n// A side table inspired by ice hockey puck form\n\n$fn = 50;\n\n// Overall dimensions\npuck_diameter = 120;\npuck_height = 40;\nwall_thickness = 2;\n\n// Create the main puck body\nmodule puck_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = puck_height, d = puck_diameter, center = true);\n        \n        // Hollow center cavity for storage\n        translate([0, 0, 0])\n            cylinder(h = puck_height + 1, d = puck_diameter - (2 * wall_thickness), center = true);\n    }\n}\n\n// Rubber band texture around edge\nmodule rubber_band() {\n    for(i = [-puck_height/2 + 5 : 3 : puck_height/2 - 5]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h = 1.5, d = puck_diameter, center = true);\n                cylinder(h = 2, d = puck_diameter - 2, center = true);\n            }\n    }\n}\n\n// Leg structure - three curved legs\nmodule legs() {\n    leg_height = 200;\n    leg_width = 20;\n    \n    for(angle = [0 : 120 : 240]) {\n        rotate([0, 0, angle])\n            translate([puck_diameter/2 - leg_width/2, 0, -leg_height/2 - puck_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = leg_height, d = leg_width, center = true);\n    }\n}\n\n// Support ring connecting legs\nmodule support_ring() {\n    ring_height = 15;\n    ring_diameter = puck_diameter + 40;\n    \n    translate([0, 0, -puck_height/2 - 100])\n        difference() {\n            cylinder(h = ring_height, d = ring_diameter, center = true);\n            cylinder(h = ring_height + 1, d = ring_diameter - 10, center = true);\n        }\n}\n\n// Table top surface detail - subtle grooves\nmodule top_detail() {\n    for(i = [0 : 30 : 359]) {\n        rotate([0, 0, i])\n            translate([0, puck_diameter/4, puck_height/2 - 0.5])\n                cube([puck_diameter/2, 2, 1], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main puck table top\n    puck_body();\n    \n    // Add rubber band texture\n    rubber_band();\n    \n    // Add top surface detail\n    top_detail();\n    \n    // Add legs\n    legs();\n    \n    // Add support ring\n    support_ring();\n}",
    "renders": true
  },
  {
    "natural_object": "shuttlecock",
    "openscad_code": "// Shuttlecock Furniture Item - Medium Complexity\n// Realistic style, 3D printable with furniture characteristics\n\n$fn = 36;\nwall_thickness = 2;\n\nmodule shuttlecock_furniture() {\n    // Main shuttlecock body as a stool/seat\n    union() {\n        // Base cork structure (furniture seat)\n        translate([0, 0, 0])\n            difference() {\n                cylinder(h=25, d1=30, d2=25);  // Tapered seat\n                cylinder(h=25, d1=26, d2=21);  // Hollow interior\n            }\n        \n        // Reinforcement ribs inside cork\n        for(i=[0:6]) {\n            rotate([0, 0, i*60])\n                translate([0, 11.5, 12.5])\n                    cube([wall_thickness, 1.5, 25], center=true);\n        }\n        \n        // Feather skirt as backrest\n        union() {\n            // Central support post\n            translate([0, 0, 25])\n                cylinder(h=40, d=4);\n            \n            // Feather blades as backrest supports\n            feather_count = 16;\n            for(i=[0:feather_count-1]) {\n                angle = i * (360/feather_count);\n                rotate([0, 0, angle])\n                    translate([0, 5, 45])\n                        rotate([75, 0, 0])\n                            feather_blade();\n            }\n            \n            // Circular rim for structural support\n            translate([0, 0, 60])\n                difference() {\n                    cylinder(h=3, d=65);\n                    cylinder(h=3, d=61);\n                }\n        }\n        \n        // Legs at base for stability\n        leg_positions = [[-10, -10], [10, -10], [0, 12]];\n        for(pos = leg_positions) {\n            translate([pos[0], pos[1], -15])\n                cylinder(h=15, d=8);\n        }\n        \n        // Cross-bracing between legs\n        for(pos = leg_positions) {\n            translate([pos[0], pos[1], -7.5])\n                sphere(d=4);\n        }\n        \n        // Connect legs with beams\n        translate([0, -10, -7.5])\n            scale([1, 1, 0.5])\n                sphere(d=20);\n        translate([5, 1, -7.5])\n            rotate([0, 0, 120])\n                scale([1, 1, 0.5])\n                    sphere(d=20);\n        translate([-5, 1, -7.5])\n            rotate([0, 0, -120])\n                scale([1, 1, 0.5])\n                    sphere(d=20);\n    }\n}\n\nmodule feather_blade() {\n    // Individual feather blade with proper thickness\n    difference() {\n        union() {\n            // Main blade body\n            translate([0, 0, -15])\n                scale([1, 0.3, 1])\n                    cylinder(h=30, d=8);\n            \n            // Tapered tip\n            translate([0, 0, 15])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=10, d=6);\n        }\n        \n        // Hollow interior for printability\n        translate([0, 0, -14.5])\n            scale([0.7, 0.2, 0.9])\n                cylinder(h=29, d=6);\n    }\n}\n\n// Assemble the furniture\nshuttlecock_furniture();",
    "renders": true
  },
  {
    "natural_object": "disc",
    "openscad_code": "// Disc rack (vinyl record holder)\n// A realistic-style piece designed to store and display 12\" vinyl records\n// Overall footprint ~150 mm wide × 120 mm deep × 110 mm tall\n// 2 mm wall thickness for reliable FDM printing\n\n$fa = 2; $fs = 0.5;\n\nmodule disc_rack() {\n    // Main body frame\n    difference() {\n        // Outer shell\n        cube([150, 120, 110], center = true);\n        \n        // Hollow cavity\n        translate([0, 0, 5])\n            cube([146, 116, 100], center = true);\n    }\n    \n    // Base plate\n    translate([0, 0, -53])\n        cube([150, 120, 4], center = true);\n    \n    // Top plate\n    translate([0, 0, 53])\n        cube([150, 120, 4], center = true);\n    \n    // Front opening\n    difference() {\n        translate([0, 60, 0])\n            cube([150, 120, 110], center = true);\n        \n        translate([0, 60, 0])\n            cube([146, 116, 106], center = true);\n    }\n    \n    // Record dividers (3)\n    for (i = [-1, 0, 1]) {\n        translate([i * 37.5, 0, 0])\n            cube([2, 116, 106], center = true);\n    }\n    \n    // Rear support pillars\n    for (x = [-67.5, -37.5, -7.5, 7.5, 37.5, 67.5]) {\n        translate([x, -56, 0])\n            cylinder(h = 110, d = 8, center = true);\n    }\n    \n    // Front support pillars\n    for (x = [-67.5, -37.5, -7.5, 7.5, 37.5, 67.5]) {\n        translate([x, 56, 0])\n            cylinder(h = 110, d = 8, center = true);\n    }\n    \n    // Optional slot label holders on dividers\n    for (i = [-1, 0, 1]) {\n        translate([i * 37.5, 58, 35])\n            cube([20, 2, 8], center = true);\n    }\n    \n    // Stabilizing feet\n    for (x = [-65, -20, 20, 65]) {\n        for (y = [-50, 50]) {\n            translate([x, y, -57])\n                cylinder(h = 4, d = 12, center = true);\n        }\n    }\n}\n\n// Render the complete disc rack\nrotate([0, 0, 0])\n    disc_rack();",
    "renders": true
  },
  {
    "natural_object": "frisbee",
    "openscad_code": "// Frisbee Side / Coffee Table\n// A table whose top is shaped like a frisbee disc, supported by three curved legs\n// Overall footprint ~100 mm diameter – perfect for a small accent table\n\n$fn = 36;          // Smoother curves for realistic look\n\ndisc_d = 100;      // Frisbee diameter\ndisc_t = 6;        // Frisbee thickness (top)\ndisc_rim_h = 4;    // Height of the raised rim\nwall = 2;          // 3D-print friendly wall thickness\n\nleg_h = 40;        // Table height\nleg_r = 3;         // Leg radius\n\n// --- Frisbee tabletop module -----------------------------------------------\nmodule frisbee_top() {\n    difference() {\n        // Main disc\n        cylinder(h = disc_t, d = disc_d, center = true);\n\n        // Hollow underside to save material and weight\n        translate([0, 0, -disc_t/2 + wall])\n            cylinder(h = disc_t - wall, d = disc_d - 2*wall, center = false);\n\n        // Raised rim lip\n        translate([0, 0, disc_t/2])\n            cylinder(h = disc_rim_h, d = disc_d + 2*wall, center = false);\n\n        // Remove inner part of rim so only a thin lip remains\n        translate([0, 0, disc_t/2])\n            cylinder(h = disc_rim_h + 0.1, d = disc_d, center = false);\n    }\n}\n\n// --- Curved leg module -------------------------------------------------------\nmodule leg(angle) {\n    rotate([0, 0, angle])\n    translate([disc_d/2 - leg_r, 0, 0])\n    rotate([90, 0, 0]) {\n        // Curved sweep using hull of spheres\n        for(i = [0:5])\n            translate([0, 0, -i*leg_h/5])\n                sphere(r = leg_r);\n        cylinder(h = leg_h, r = leg_r);\n    }\n}\n\n// --- Assembly ---------------------------------------------------------------\n// Center the table on the build plate\ntranslate([0, 0, leg_h/2]) {\n    union() {\n        frisbee_top();\n\n        // Three legs 120° apart\n        for(a = [0, 120, 240])\n            leg(a);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "dart",
    "openscad_code": "// Dart-shaped furniture stool\n// Overall height: 450mm, suitable as a low stool or side table\n// Mid-century modern dart inspiration with tripod base\n\n// Parameters\n$fn = 36;  // Smooth curves\nwall_thickness = 2.5;  // 3D printable walls\nseat_diameter = 220;   // Comfortable seating surface\nbase_diameter = 320;   // Stable tripod footprint\nheight = 450;          // Standard stool height\n\nmodule dart_stool() {\n    // Main dart body - slightly tapered cylinder\n    union() {\n        // Seat top - rounded disc\n        translate([0, 0, height - 30])\n            cylinder(h = 30, d1 = seat_diameter, d2 = seat_diameter * 0.9);\n        \n        // Dart body - tapered shaft\n        cylinder(h = height - 30, d1 = seat_diameter * 0.9, d2 = 45);\n    }\n    \n    // Structural reinforcement rings\n    for(i = [1:3]) {\n        translate([0, 0, i * (height - 30)/4])\n            cylinder(h = 8, d = seat_diameter * (0.9 - i * 0.15), center = true);\n    }\n    \n    // Tripod base structure\n    difference() {\n        // Main base cone\n        cylinder(h = 80, d1 = 45, d2 = base_diameter);\n        \n        // Hollow out base for weight reduction\n        translate([0, 0, 10])\n            cylinder(h = 60, d1 = 45 - wall_thickness * 2, d2 = base_diameter - wall_thickness * 2);\n    }\n    \n    // Three support legs\n    leg_angle = 120;\n    for(i = [0:2]) {\n        rotate([0, 0, i * leg_angle])\n            translate([base_diameter/2 - 30, 0, 40])\n                rotate([90, 0, 0])\n                    cylinder(h = height - 80, d = 25);\n    }\n    \n    // Footrest ring connecting legs\n    translate([0, 0, 200])\n        rotate_extrude()\n            translate([base_diameter/2 - 40, 0, 0])\n                circle(r = 8);\n    \n    // Dart flight details - decorative grooves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, height - 45])\n                difference() {\n                    cylinder(h = 15, d = seat_diameter * 0.85);\n                    translate([0, -seat_diameter/2, -1])\n                        cube([seat_diameter, seat_diameter, 17], center = true);\n                }\n    }\n    \n    // Center shaft detail - realistic dart grip texture\n    for(i = [1:20]) {\n        translate([0, 0, i * 20])\n            rotate([0, 0, i * 15])\n                difference() {\n                    cylinder(h = 3, d = seat_diameter * (0.9 - (i * 0.85/20)));\n                    translate([0, 0, -1])\n                        cylinder(h = 5, d = seat_diameter * (0.9 - (i * 0.85/20)) - 4);\n                }\n    }\n}\n\n// Render the complete dart stool\ndart_stool();",
    "renders": true
  },
  {
    "natural_object": "arrow",
    "openscad_code": "// Arrow Furniture - A functional arrow-shaped shelf/bookend\n// Dimensions: ~120mm long x 40mm high x 30mm deep\n\n// Parameters\n$fn = 32;\narrow_length = 120;\narrow_height = 40;\narrow_depth = 30;\nwall_thickness = 2;\n\n// Main module\nmodule arrow_furniture() {\n    // Arrow shaft as main shelf\n    translate([0, 0, arrow_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=arrow_length*0.6, r=arrow_depth/2-2, $fn=20);\n    \n    // Arrow head - triangular shelf extension\n    translate([arrow_length*0.3, 0, arrow_depth/2])\n        rotate([0, 90, 0])\n        linear_extrude(height=arrow_depth-4, center=true)\n        polygon(points=[\n            [0, arrow_height/2],\n            [arrow_length*0.3, 0],\n            [0, -arrow_height/2]\n        ]);\n    \n    // Arrow fletching - three vanes for structural support\n    for(i=[-1, 0, 1]) {\n        rotate([0, 0, i*120])\n        translate([-arrow_length*0.25, 0, arrow_depth/2])\n            vane();\n    }\n    \n    // Shelf bottom support rib\n    translate([-arrow_length*0.05, -arrow_height/2-1, 0])\n        cube([arrow_length*0.6, wall_thickness, arrow_depth]);\n    \n    // Arrow nock - functional slot for wall mounting\n    difference() {\n        translate([-arrow_length*0.3, 0, arrow_depth/2])\n            rotate([0, 90, 0])\n            cylinder(h=10, r=arrow_depth/2-2, $fn=20);\n        \n        // Mounting hole\n        translate([-arrow_length*0.3, 0, arrow_depth/2])\n            rotate([0, 90, 0])\n            cylinder(h=12, r=3, $fn=16);\n    }\n}\n\n// Vane module for fletching\nmodule vane() {\n    // Main vane body\n    linear_extrude(height=wall_thickness, center=true)\n    polygon(points=[\n        [0, 0],\n        [arrow_length*0.2, arrow_height*0.3],\n        [arrow_length*0.25, arrow_height*0.25],\n        [arrow_length*0.3, 0],\n        [arrow_length*0.25, -arrow_height*0.25],\n        [arrow_length*0.2, -arrow_height*0.3]\n    ]);\n    \n    // Vane support struts\n    for(pos=[0.1, 0.2]) {\n        translate([arrow_length*pos, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=arrow_depth/2-2, r=wall_thickness/2, $fn=8);\n    }\n}\n\n// Generate the furniture\narrow_furniture();",
    "renders": true
  },
  {
    "natural_object": "javelin",
    "openscad_code": "// Javelin-inspired floor lamp\n// Realistic style, medium complexity\n// Dimensions: 200mm height, 20mm max diameter\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Module for the main shaft with realistic taper\nmodule javelin_shaft() {\n    // Main shaft with realistic taper\n    difference() {\n        union() {\n            // Shaft body with gradual taper\n            for (i = [0:19]) {\n                translate([0, 0, i * 10]) {\n                    cylinder(h = 10, d1 = 15 - i * 0.5, d2 = 14.5 - i * 0.5, center = false);\n                }\n            }\n            \n            // Grip section with texture rings\n            translate([0, 0, 80]) {\n                difference() {\n                    cylinder(h = 30, d = 12, center = false);\n                    // Grip texture rings\n                    for(j = [0:4]) {\n                        translate([0, 0, j * 6]) {\n                            cylinder(h = 2, d = 11, center = false);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hollow center for wire routing\n        for (i = [0:19]) {\n            translate([0, 0, i * 10]) {\n                cylinder(h = 10.1, d1 = 11 - i * 0.4, d2 = 10.5 - i * 0.4, center = false);\n            }\n        }\n    }\n}\n\n// Module for the spear head (lamp shade mount)\nmodule javelin_head() {\n    // Metal spear head\n    union() {\n        // Main point\n        translate([0, 0, 200]) {\n            cylinder(h = 25, d1 = 5, d2 = 12, center = false);\n        }\n        \n        // Lamp shade collar\n        translate([0, 0, 195]) {\n            cylinder(h = 8, d = 18, center = false);\n        }\n        \n        // Decorative rings\n        translate([0, 0, 192]) {\n            cylinder(h = 2, d = 20, center = false);\n        }\n        translate([0, 0, 191]) {\n            cylinder(h = 2, d = 16, center = false);\n        }\n    }\n}\n\n// Module for the base (javelin tail)\nmodule javelin_base() {\n    union() {\n        // Base plate\n        translate([0, 0, -5]) {\n            cylinder(h = 5, d = 35, center = false);\n        }\n        \n        // Tail fin stabilizers\n        for (angle = [0:120:240]) {\n            rotate([0, 0, angle]) {\n                translate([0, 12, 0]) {\n                    cube([3, 12, 10], center = true);\n                }\n            }\n        }\n        \n        // Cable exit hole\n        translate([15, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 10, d = 6, center = true);\n            }\n        }\n    }\n}\n\n// Module for cord wrap details\nmodule cord_wraps() {\n    // Cord wrap at grip area\n    translate([0, 0, 95]) {\n        for (k = [0:3]) {\n            rotate([0, 0, k * 45]) {\n                translate([5.5, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 30, d = 2, center = false);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    javelin_base();\n    javelin_shaft();\n    javelin_head();\n    cord_wraps();\n}",
    "renders": true
  },
  {
    "natural_object": "shot",
    "openscad_code": "// Realistic-style Shot Glass Rack (medium complexity)\n// Holds 6 standard 1.5oz shot glasses (45mm diameter x 60mm tall)\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main dimensions\nrack_length = 140;\nrack_width = 60;\nrack_height = 75;\nwall_thickness = 2;\nglass_diameter = 45;\nglass_height = 60;\nglass_spacing = 10;\n\nmodule shot_glass_rack() {\n    // Base platform with rounded edges\n    difference() {\n        translate([0, 0, wall_thickness/2])\n            minkowski() {\n                cube([rack_length, rack_width, wall_thickness], center=true);\n                cylinder(h=0.1, r=wall_thickness*2);\n            }\n        \n        // Recessed bottom for material saving\n        translate([0, 0, -wall_thickness/2])\n            cube([rack_length-wall_thickness*4, rack_width-wall_thickness*4, wall_thickness*2], center=true);\n    }\n    \n    // Side supports\n    for (x = [-rack_length/2 + wall_thickness*3, rack_length/2 - wall_thickness*3]) {\n        translate([x, 0, rack_height/2])\n            rounded_support();\n    }\n    \n    // Cross beams with decorative details\n    for (y = [-rack_width/3, rack_width/3]) {\n        translate([0, y, rack_height*0.6])\n            cross_beam();\n    }\n    \n    // Glass holders (6 positions)\n    for (i = [0:5]) {\n        x_pos = -rack_length/2 + 20 + i * (glass_diameter + glass_spacing);\n        translate([x_pos, 0, rack_height*0.4])\n            glass_holder();\n    }\n    \n    // Back support for stability\n    translate([0, rack_width/2 - wall_thickness, rack_height/2])\n        back_support();\n}\n\nmodule rounded_support() {\n    // Tapered support with gentle curves\n    linear_extrude(height=rack_height-wall_thickness, center=true, scale=[0.8,1])\n        circle(d=wall_thickness*4);\n    \n    // Decorative groove\n    for (h = [rack_height*0.2, rack_height*0.5]) {\n        translate([0, 0, h - rack_height/2])\n            cylinder(h=1, d=wall_thickness*4.2, center=true);\n    }\n}\n\nmodule cross_beam() {\n    hull() {\n        translate([-rack_length/2 + wall_thickness*3, 0, 0])\n            cylinder(h=wall_thickness*2, d=wall_thickness*3);\n        translate([rack_length/2 - wall_thickness*3, 0, 0])\n            cylinder(h=wall_thickness*2, d=wall_thickness*3);\n    }\n}\n\nmodule glass_holder() {\n    // Main holder ring\n    difference() {\n        cylinder(h=wall_thickness*3, d=glass_diameter + wall_thickness*2, center=true);\n        cylinder(h=wall_thickness*3.2, d=glass_diameter + 1, center=true);\n    }\n    \n    // Support arms\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([glass_diameter/2 + wall_thickness, 0, 0])\n                cube([glass_diameter/4, wall_thickness, wall_thickness*2], center=true);\n    }\n    \n    // Bottom stop\n    translate([0, 0, -glass_height/2 + wall_thickness*2])\n        cylinder(h=wall_thickness, d=glass_diameter - wall_thickness, center=true);\n}\n\nmodule back_support() {\n    // Curved back providing structural support\n    difference() {\n        translate([0, 0, 0])\n            minkowski() {\n                cube([rack_length - wall_thickness*6, wall_thickness*2, rack_height - wall_thickness], center=true);\n                sphere(r=wall_thickness);\n            }\n        \n        // Cutout for weight reduction\n        translate([0, 0, 0])\n            cube([rack_length - wall_thickness*8, wall_thickness*3, rack_height - wall_thickness*3], center=true);\n    }\n}\n\n// Assembly\nshot_glass_rack();",
    "renders": true
  },
  {
    "natural_object": "hammer",
    "openscad_code": "// Hammer furniture piece - medium complexity realistic style\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions: ~120mm length, ~50mm height, ~40mm width\n\n$fn = 32;\n\n// Main module for the hammer furniture\nmodule hammer_furniture() {\n    // Handle - wooden texture appearance\n    color(\"BurlyWood\")\n    translate([0, 0, -25])\n    difference() {\n        // Main handle cylinder\n        cylinder(h=80, d=12, center=true);\n        \n        // Grip rings for furniture detail\n        for(i = [-30:15:30]) {\n            translate([0, 0, i])\n            cylinder(h=2, d=11.5, center=true);\n        }\n    }\n    \n    // Handle collar - metal joint\n    color(\"Silver\")\n    translate([0, 0, 25])\n    difference() {\n        cylinder(h=8, d=16, center=true);\n        cylinder(h=10, d=12.5, center=true);\n    }\n    \n    // Hammer head - main furniture structure\n    color(\"SlateGray\")\n    union() {\n        // Central block\n        translate([0, 0, 40])\n        cube([45, 25, 25], center=true);\n        \n        // Claw end\n        translate([-22.5, 0, 40])\n        rotate([0, 0, 45])\n        cube([15, 15, 25], center=true);\n        \n        // Flat striking face\n        translate([22.5, 0, 40])\n        cube([5, 25, 25], center=true);\n    }\n    \n    // Structural ribs for furniture strength\n    color(\"DarkGray\")\n    for(side = [-1, 1]) {\n        translate([0, side * 12.5, 40])\n        cube([45, 2, 25], center=true);\n    }\n    \n    // Reinforcement plates\n    color(\"Silver\")\n    translate([0, 0, 52.5])\n    cube([35, 20, 2], center=true);\n    \n    translate([0, 0, 27.5])\n    cube([35, 20, 2], center=true);\n    \n    // Decorative furniture joints\n    color(\"Black\")\n    for(x = [-15:15:15]) {\n        translate([x, 12.5, 40])\n        cylinder(h=30, d=3, center=true);\n        translate([x, -12.5, 40])\n        cylinder(h=30, d=3, center=true);\n    }\n    \n    // Base support structure\n    color(\"Silver\")\n    translate([0, 0, 15])\n    difference() {\n        cylinder(h=5, d=20, center=true);\n        cylinder(h=6, d=14, center=true);\n    }\n}\n\n// Generate the model\nhammer_furniture();",
    "renders": true
  },
  {
    "natural_object": "discus",
    "openscad_code": "// Discus Side Table - Realistic Style, Medium Complexity\n// Dimensions: 120mm diameter, 450mm height\n// Material thickness: 2mm for structural elements\n\n// Main Parameters\ndisc_diameter = 120;\ndisc_thickness = 8;\ntable_height = 450;\nbase_diameter = 250;\nwall_thickness = 2;\n\n// Module for discus top with realistic edge profile\nmodule discus_top() {\n    difference() {\n        // Main disc body\n        cylinder(h=disc_thickness, d=disc_diameter, $fn=64);\n        \n        // Center recess for weight reduction\n        translate([0, 0, -0.1])\n            cylinder(h=disc_thickness+0.2, d=disc_diameter-20, $fn=64);\n        \n        // Edge chamfer for realistic profile\n        translate([0, 0, disc_thickness-2])\n            cylinder(h=2, d1=disc_diameter-6, d2=disc_diameter, $fn=64);\n    }\n    \n    // Add edge ring detail\n    translate([0, 0, disc_thickness-1])\n        cylinder(h=1, d=disc_diameter+2, $fn=64);\n}\n\n// Module for central support column\nmodule support_column() {\n    // Main tube\n    difference() {\n        cylinder(h=table_height-disc_thickness-5, d=30, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=table_height-disc_thickness-4.8, d=26, $fn=32);\n    }\n    \n    // Reinforcement ribs inside tube\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([0, 6.5, 0])\n                cube([wall_thickness, 13, table_height-disc_thickness-6], center=true);\n    }\n}\n\n// Module for stable base\nmodule table_base() {\n    difference() {\n        // Main base disc\n        cylinder(h=5, d=base_diameter, $fn=64);\n        \n        // Underside recess for material reduction\n        translate([0, 0, -0.1])\n            cylinder(h=3, d=base_diameter-20, $fn=64);\n        \n        // Cable management hole\n        translate([0, 0, -0.1])\n            cylinder(h=6, d=10, $fn=16);\n    }\n    \n    // Base edge detail\n    translate([0, 0, 5])\n        cylinder(h=2, d=base_diameter+4, $fn=64);\n}\n\n// Module for connection joint between column and base\nmodule base_joint() {\n    difference() {\n        // Flared connection\n        cylinder(h=15, d1=30, d2=50, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=15.2, d1=26, d2=46, $fn=32);\n    }\n    \n    // Hidden mounting holes\n    for(i=[0:90:270]) {\n        rotate([0, 0, i])\n            translate([20, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=3.2, $fn=8);\n    }\n}\n\n// Assemble the table\ntranslate([0, 0, 0])\n    table_base();\n\ntranslate([0, 0, 5])\n    base_joint();\n\ntranslate([0, 0, 20])\n    support_column();\n\ntranslate([0, 0, table_height-disc_thickness])\n    discus_top();\n\n// Add non-slip pads on base\nfor(i=[0:60:300]) {\n    rotate([0, 0, i])\n        translate([(base_diameter/2)-15, 0, -0.1])\n            cylinder(h=1.5, d=8, $fn=16);\n}",
    "renders": true
  },
  {
    "natural_object": "net",
    "openscad_code": "// Net Chair - Medium complexity 3D printable furniture\n// Overall dimensions: 120mm width x 120mm depth x 110mm height\n// All walls are 2mm thick for 3D printing\n\n$fn = 32;\n\n// Main chair module\nmodule net_chair() {\n    // Chair frame structure\n    difference() {\n        union() {\n            // Seat frame\n            seat_frame();\n            \n            // Backrest frame\n            backrest_frame();\n            \n            // Leg structures\n            legs_structure();\n            \n            // Support beams\n            support_beams();\n        }\n        \n        // Create net pattern cutouts\n        net_pattern_cutouts();\n    }\n    \n    // Add net surface details\n    net_surface_details();\n}\n\n// Seat frame - rectangular frame with rounded corners\nmodule seat_frame() {\n    // Outer frame\n    difference() {\n        // Outer box\n        translate([0, 0, 50])\n        cube([120, 120, 8], center = true);\n        \n        // Inner cutout\n        translate([0, 0, 52])\n        cube([110, 110, 12], center = true);\n    }\n    \n    // Frame edges\n    for(x = [-54, 54]) {\n        translate([x, 0, 46])\n        cube([4, 120, 8], center = true);\n    }\n    for(y = [-54, 54]) {\n        translate([0, y, 46])\n        cube([120, 4, 8], center = true);\n    }\n}\n\n// Backrest frame - slightly angled for comfort\nmodule backrest_frame() {\n    // Main backrest\n    translate([0, -50, 85])\n    rotate([10, 0, 0])\n    difference() {\n        cube([110, 8, 70], center = true);\n        translate([0, 0, 2])\n        cube([104, 12, 64], center = true);\n    }\n    \n    // Top bar\n    translate([0, -50, 118])\n    cube([120, 12, 8], center = true);\n    \n    // Side bars\n    for(x = [-54, 54]) {\n        translate([x, -50, 85])\n        rotate([10, 0, 0])\n        cube([4, 8, 70], center = true);\n    }\n}\n\n// Leg structure - four legs with cross bracing\nmodule legs_structure() {\n    // Front legs\n    for(x = [-50, 50]) {\n        // Main leg\n        translate([x, 45, 25])\n        cylinder(h = 50, r = 4, center = true);\n        \n        // Leg base\n        translate([x, 45, 0])\n        cylinder(h = 4, r = 6, center = true);\n    }\n    \n    // Back legs\n    for(x = [-50, 50]) {\n        // Main leg\n        translate([x, -45, 25])\n        cylinder(h = 50, r = 4, center = true);\n        \n        // Leg base\n        translate([x, -45, 0])\n        cylinder(h = 4, r = 6, center = true);\n    }\n}\n\n// Support beams between legs\nmodule support_beams() {\n    // Front-back beams\n    for(y = [-45, 45]) {\n        translate([0, y, 15])\n        cube([104, 4, 4], center = true);\n    }\n    \n    // Side beams\n    for(x = [-50, 50]) {\n        translate([x, 0, 15])\n        cube([4, 90, 4], center = true);\n    }\n}\n\n// Net pattern cutouts in seat and backrest\nmodule net_pattern_cutouts() {\n    // Seat net pattern\n    for(x = [-45:15:45]) {\n        for(y = [-45:15:45]) {\n            if(x != 0 || y != 0) {\n                translate([x, y, 52])\n                cylinder(h = 10, r = 5, center = true);\n            }\n        }\n    }\n    \n    // Backrest net pattern\n    for(x = [-45:15:45]) {\n        for(z = [60:12:100]) {\n            translate([x, -50, z])\n            rotate([10, 0, 0])\n            cube([8, 12, 8], center = true);\n        }\n    }\n}\n\n// Add net surface texture details\nmodule net_surface_details() {\n    // Seat surface net texture\n    for(x = [-50:10:50]) {\n        for(y = [-50:10:50]) {\n            translate([x, y, 58])\n            sphere(r = 1.5);\n        }\n    }\n    \n    // Backrest surface net texture\n    for(x = [-50:10:50]) {\n        for(z = [55:10:105]) {\n            translate([x, -50, z])\n            rotate([10, 0, 0])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Generate the chair\nnet_chair();",
    "renders": true
  },
  {
    "natural_object": "racket",
    "openscad_code": "// Tennis Racket Chair - OpenSCAD\n// Realistic style, medium complexity furniture piece\n// Overall dims: ~110mm L x 60mm W x 100mm H\n\n// Parameters\nhandle_len = 40;\nhandle_dia = 12;\nhead_width = 60;\nhead_height = 70;\nthickness = 2.4;\nstring_dia = 0.8;\nseat_offset = 25;\n\n// Main chair assembly\nmodule racket_chair() {\n    union() {\n        // Handle as chair backrest\n        translate([0, 0, handle_len/2 + seat_offset])\n            rotate([90, 0, 0])\n            handle();\n        \n        // Racket head as seat frame\n        translate([0, 0, seat_offset])\n            rotate([90, 0, 0])\n            racket_head();\n        \n        // Support legs\n        translate([0, -head_width/4, seat_offset/2])\n            rotate([0, 0, 0])\n            cylinder(h=seat_offset, d1=8, d2=6, $fn=8);\n        translate([0, head_width/4, seat_offset/2])\n            rotate([0, 0, 0])\n            cylinder(h=seat_offset, d1=8, d2=6, $fn=8);\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle\n        cylinder(h=handle_len, d=handle_dia, $fn=20);\n        \n        // Grip pattern\n        for(i = [1:5:handle_len-5]) {\n            translate([0, 0, i])\n                rotate([0, 0, 45])\n                cylinder(h=2.5, d=handle_dia+0.2, $fn=6);\n        }\n    }\n    // End cap\n    translate([0, 0, handle_len])\n        cylinder(h=3, d=handle_dia+1, $fn=20);\n}\n\n// Racket head with seat surface\nmodule racket_head() {\n    difference() {\n        union() {\n            // Outer frame\n            difference() {\n                scale([head_width/head_height, 1, 1])\n                    cylinder(h=thickness, d=head_height, $fn=50);\n                \n                // Inner cutout\n                translate([0, 0, -0.1])\n                    scale([(head_width-2*thickness)/head_height, 1, 1])\n                        cylinder(h=thickness+0.2, d=head_height-2*thickness, $fn=50);\n            }\n            \n            // Seat surface\n            translate([0, 0, thickness/2])\n                scale([(head_width-10)/head_height, 1, 1])\n                    cylinder(h=thickness, d=head_height-10, $fn=50);\n        }\n        \n        // String holes\n        for(x = [-head_width/2+10:5:head_width/2-10]) {\n            for(y = [-head_height/2+10:5:head_height/2-10]) {\n                if(abs(x) > 10 || abs(y) > 10) {\n                    translate([x, y, -1])\n                        cylinder(h=thickness+2, d=string_dia*2, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Decorative string simulation\n    for(x = [-head_width/2+15:5:head_width/2-15]) {\n        translate([x, 0, thickness/2])\n            cube([string_dia, head_height-30, thickness]);\n    }\n    for(y = [-head_height/2+15:5:head_height/2-15]) {\n        translate([0, y, thickness/2])\n            cube([head_width-30, string_dia, thickness]);\n    }\n}\n\n// Render the chair\nracket_chair();",
    "renders": true
  },
  {
    "natural_object": "bat",
    "openscad_code": "// Realistic Bat Furniture - Medium Complexity OpenSCAD Model\n// Bat-shaped shelf bracket with wings as support structure\n// Overall dimensions: 120mm wide x 60mm deep x 80mm tall\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main body module\nmodule bat_body() {\n    // Central torso block\n    translate([0, 0, 40])\n        cube([30, 15, 60], center=true);\n    \n    // Rounded chest\n    translate([0, 7.5, 25])\n        scale([1, 0.6, 1])\n        sphere(r=10);\n    \n    // Abdomen\n    translate([0, 7.5, 10])\n        cylinder(h=20, r1=8, r2=6);\n}\n\n// Wing support structure\nmodule bat_wing() {\n    // Left wing\n    translate([-15, 0, 40]) {\n        // Main wing panel\n        rotate([0, 0, 30])\n        linear_extrude(height=wall_thickness)\n        polygon(points=[\n            [0, 0],\n            [-25, 20],\n            [-35, 5],\n            [-30, -25],\n            [-15, -15],\n            [0, 0]\n        ]);\n        \n        // Wing strut 1\n        translate([-20, 10, 0])\n            rotate([0, 90, 45])\n            cylinder(h=30, r=2);\n            \n        // Wing strut 2\n        translate([-25, -10, 0])\n            rotate([0, 90, -30])\n            cylinder(h=25, r=2);\n    }\n    \n    // Right wing (mirrored)\n    mirror([1, 0, 0])\n    translate([-15, 0, 40]) {\n        rotate([0, 0, 30])\n        linear_extrude(height=wall_thickness)\n        polygon(points=[\n            [0, 0],\n            [-25, 20],\n            [-35, 5],\n            [-30, -25],\n            [-15, -15],\n            [0, 0]\n        ]);\n        \n        translate([-20, 10, 0])\n            rotate([0, 90, 45])\n            cylinder(h=30, r=2);\n            \n        translate([-25, -10, 0])\n            rotate([0, 90, -30])\n            cylinder(h=25, r=2);\n    }\n}\n\n// Head with ears\nmodule bat_head() {\n    translate([0, 7.5, 70]) {\n        // Main head shape\n        sphere(r=12);\n        \n        // Left ear\n        translate([-8, 0, 10])\n            rotate([0, -20, -30])\n            cylinder(h=15, r1=4, r2=2);\n            \n        // Right ear\n        translate([8, 0, 10])\n            rotate([0, 20, 30])\n            cylinder(h=15, r1=4, r2=2);\n        \n        // Snout\n        translate([0, 5, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=3, r2=0);\n    }\n}\n\n// Shelf mounting bracket\nmodule shelf_bracket() {\n    // Top mounting plate\n    translate([0, 30, 80])\n        cube([80, wall_thickness, 20], center=true);\n    \n    // Mounting holes\n    for(x = [-30, -10, 10, 30]) {\n        translate([x, 30, 80])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness+1, r=2.5);\n    }\n    \n    // Support ribs under shelf\n    for(x = [-20, 0, 20]) {\n        translate([x, 15, 70])\n            cube([wall_thickness, 30, 20]);\n    }\n}\n\n// Feet for stability\nmodule bat_feet() {\n    // Left foot\n    translate([-10, 0, 0]) {\n        cylinder(h=5, r=4);\n        translate([0, 5, 0])\n            sphere(r=4);\n    }\n    \n    // Right foot\n    translate([10, 0, 0]) {\n        cylinder(h=5, r=4);\n        translate([0, 5, 0])\n            sphere(r=4);\n    }\n}\n\n// Assembly\nunion() {\n    bat_body();\n    bat_wing();\n    bat_head();\n    shelf_bracket();\n    bat_feet();\n}",
    "renders": true
  },
  {
    "natural_object": "club",
    "openscad_code": "// Club chair - realistic style, medium complexity\n// Overall size 60mm wide x 60mm deep x 70mm high\n\n// Parameters\nseat_height = 35;\narm_height = 50;\nback_height = 70;\nseat_depth = 45;\nseat_width = 50;\nleg_height = 32;\nleg_size = 4;\nwall = 2;\n\n// Main seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, seat_height + 3])\n            minkowski() {\n                cube([seat_width, seat_depth, 8], center = true);\n                sphere(2);\n            }\n        \n        // Indentation\n        translate([0, 0, seat_height + 7])\n            cube([seat_width - 6, seat_depth - 6, 8], center = true);\n        \n        // Rounded edges\n        translate([0, 0, seat_height + 11])\n            cube([seat_width - 10, seat_depth - 10, 8], center = true);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    difference() {\n        // Main back\n        translate([0, seat_depth/2 - 5, seat_height + back_height/2 - 5])\n            rotate([15, 0, 0])\n                cube([seat_width, 8, back_height - seat_height + 5], center = true);\n        \n        // Curve top\n        translate([0, seat_depth/2 - 5, seat_height + back_height - 10])\n            rotate([15, 0, 0])\n                cube([seat_width + 2, 10, 20], center = true);\n        \n        // Lumbar support curve\n        translate([0, seat_depth/2 - 2, seat_height + 25])\n            rotate([15, 0, 0])\n                cube([seat_width - 10, 12, 20], center = true);\n    }\n}\n\n// Armrest\nmodule armrest(side) {\n    translate([side * (seat_width/2 + 3), 0, arm_height]) {\n        // Arm cushion\n        difference() {\n            minkowski() {\n                cube([8, seat_depth - 10, 6], center = true);\n                sphere(1.5);\n            }\n            translate([0, 0, 3])\n                cube([6, seat_depth - 12, 6], center = true);\n        }\n        \n        // Arm support post\n        translate([0, seat_depth/2 - 10, -arm_height/2])\n            cylinder(h = arm_height - seat_height, r = 3, center = true);\n    }\n}\n\n// Leg\nmodule leg(x, y) {\n    translate([x, y, leg_height/2])\n        difference() {\n            cylinder(h = leg_height, r = leg_size);\n            translate([0, 0, -1])\n                cylinder(h = leg_height + 2, r = leg_size - wall);\n        }\n}\n\n// Leg stretcher\nmodule stretcher(x1, y1, x2, y2, z) {\n    hull() {\n        translate([x1, y1, z])\n            sphere(2);\n        translate([x2, y2, z])\n            sphere(2);\n    }\n}\n\n// Seat base frame\nmodule seat_frame() {\n    difference() {\n        // Outer frame\n        translate([0, 0, seat_height/2])\n            cube([seat_width + 6, seat_depth + 6, seat_height], center = true);\n        \n        // Inner cavity\n        translate([0, 0, seat_height/2])\n            cube([seat_width + 2, seat_depth + 2, seat_height + 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Frame and structure\n    seat_frame();\n    \n    // Legs\n    leg(seat_width/2 - 5, seat_depth/2 - 5);\n    leg(-seat_width/2 + 5, seat_depth/2 - 5);\n    leg(seat_width/2 - 5, -seat_depth/2 + 5);\n    leg(-seat_width/2 + 5, -seat_depth/2 + 5);\n    \n    // Stretchers\n    stretcher(seat_width/2 - 5, seat_depth/2 - 5, -seat_width/2 + 5, seat_depth/2 - 5, 15);\n    stretcher(seat_width/2 - 5, -seat_depth/2 + 5, -seat_width/2 + 5, -seat_depth/2 + 5, 15);\n    stretcher(seat_width/2 - 5, seat_depth/2 - 5, seat_width/2 - 5, -seat_depth/2 + 5, 15);\n    stretcher(-seat_width/2 + 5, seat_depth/2 - 5, -seat_width/2 + 5, -seat_depth/2 + 5, 15);\n    \n    // Cushions and comfort elements\n    seat_cushion();\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "natural_object": "stick",
    "openscad_code": "// Realistic stick chair - medium complexity\n// Overall size: ~65mm tall, 50mm wide, 45mm deep\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main seat frame\nmodule seat_frame() {\n    // Main seat circle (flattened log slice)\n    translate([0, 0, 40])\n    scale([1, 0.9, 0.15])\n    cylinder(h = 20, d = 45);\n    \n    // Natural edge detail - bark texture ring\n    translate([0, 0, 38])\n    scale([1, 0.9, 0.05])\n    difference() {\n        cylinder(h = 2, d = 48);\n        cylinder(h = 3, d = 44);\n    }\n}\n\n// Stick legs with natural taper\nmodule leg(angle, offset_x, offset_y) {\n    translate([offset_x, offset_y, 0]) {\n        rotate([0, angle, 0]) {\n            // Main leg\n            cylinder(h = 40, d1 = 8, d2 = 5);\n            \n            // Natural branch joint at top\n            translate([0, 0, 38])\n            sphere(d = 10);\n            \n            // Foot detail\n            translate([0, 0, -2])\n            sphere(d = 7);\n        }\n    }\n}\n\n// Back support sticks\nmodule back_stick(height, angle, x_pos) {\n    translate([x_pos, -18, 40]) {\n        rotate([angle, 0, 0]) {\n            // Curved back stick\n            for(i = [0:5]) {\n                translate([0, 0, i*height/5])\n                rotate([0, 0, sin(i*15)*5])\n                cylinder(h = height/5 + 2, d = 5 - i*0.3);\n            }\n            \n            // Natural knot detail\n            translate([0, 0, height*0.6])\n            sphere(d = 6);\n        }\n    }\n}\n\n// Cross support bars\nmodule support_bar(y_pos, z_pos, length) {\n    translate([0, y_pos, z_pos])\n    rotate([90, 0, 0])\n    cylinder(h = length, d = 4);\n}\n\n// Assembly\nunion() {\n    // Seat frame\n    seat_frame();\n    \n    // Four legs\n    leg(-15, 15, 12);\n    leg(15, -15, 12);\n    leg(-15, 15, -12);\n    leg(15, -15, -12);\n    \n    // Back support structure\n    back_stick(30, 15, -10);\n    back_stick(35, 10, 0);\n    back_stick(30, 15, 10);\n    \n    // Cross supports for stability\n    support_bar(12, 20, 30);\n    support_bar(-12, 20, 30);\n    support_bar(0, 10, 24);\n    \n    // Natural armrest branches\n    translate([20, 10, 45])\n    rotate([0, -20, 30])\n    cylinder(h = 25, d1 = 6, d2 = 4);\n    \n    translate([-20, 10, 45])\n    rotate([0, -20, -30])\n    cylinder(h = 25, d1 = 6, d2 = 4);\n}",
    "renders": true
  },
  {
    "natural_object": "mallet",
    "openscad_code": "// Mallet Furniture - OpenSCAD Code\n// A realistic wooden mallet designed as a small furniture accent piece\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main dimensions (in mm)\nmallet_length = 120;\nhead_width = 45;\nhead_height = 40;\nhandle_length = 80;\nhandle_diameter = 18;\n\n// Wood texture parameters\ngrain_depth = 0.5;\ngrain_spacing = 3;\n\nmodule wood_grain_texture(size, depth) {\n    // Create wood grain effect using small cylinders\n    for (i = [0:grain_spacing:size[1]]) {\n        translate([0, i - size[1]/2, -depth/2])\n            cube([size[0], grain_depth, depth], center = true);\n    }\n}\n\nmodule mallet_head() {\n    difference() {\n        // Main head body - slightly tapered for realism\n        union() {\n            // Center section\n            translate([0, 0, 0])\n                cube([head_width, head_height * 0.8, head_height], center = true);\n            \n            // Rounded ends\n            translate([head_width/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = head_height * 0.8, r1 = head_height/2, r2 = head_height/2 * 0.9);\n            \n            translate([-head_width/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = head_height * 0.8, r1 = head_height/2, r2 = head_height/2 * 0.9);\n        }\n        \n        // Handle hole - tapered for realistic joint\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = head_height + 2, r1 = handle_diameter/2 + 1, r2 = handle_diameter/2 + 0.5, center = true);\n        \n        // Chamfer edges for realistic wood appearance\n        translate([head_width/2 - 3, 0, head_height/2 - 2])\n            rotate([0, 90, 0])\n                cylinder(h = 6, r1 = 2, r2 = 0);\n        \n        translate([-head_width/2 + 3, 0, head_height/2 - 2])\n            rotate([0, 90, 0])\n                cylinder(h = 6, r1 = 2, r2 = 0);\n    }\n    \n    // Wood grain texture on top\n    translate([0, 0, head_height/2 + 0.1])\n        wood_grain_texture([head_width * 0.8, head_height * 0.7], grain_depth);\n}\n\nmodule mallet_handle() {\n    difference() {\n        union() {\n            // Main handle shaft\n            cylinder(h = handle_length, r = handle_diameter/2, center = true);\n            \n            // Handle grip area - slightly thicker\n            translate([0, 0, -handle_length/4])\n                cylinder(h = handle_length/2, r1 = handle_diameter/2, r2 = handle_diameter/2 * 1.1);\n            \n            // End cap for handle\n            translate([0, 0, handle_length/2 - 2])\n                sphere(r = handle_diameter/2 * 1.2);\n        }\n        \n        // Grip grooves for better handling\n        for (i = [0:5:handle_length/2]) {\n            translate([0, 0, -handle_length/2 + i + 10])\n                rotate([0, 90, 0])\n                    cylinder(h = handle_diameter * 1.2, r = 1, center = true);\n        }\n    }\n    \n    // Wood grain along handle\n    for (i = [0:30:360]) {\n        rotate([0, 0, i])\n            translate([handle_diameter/2 - 0.2, 0, 0])\n                cube([0.4, 0.2, handle_length], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Mallet head positioned at top\n    translate([0, 0, handle_length/2 + head_height/2])\n        mallet_head();\n    \n    // Handle extending downward\n    translate([0, 0, 0])\n        mallet_handle();\n}\n\n// Add subtle support wedge for realistic furniture joint\ntranslate([0, 0, handle_length/2 - head_height/4])\n    rotate([0, 90, 0])\n        cylinder(h = 8, r1 = handle_diameter/2 + 2, r2 = 1);",
    "renders": true
  },
  {
    "natural_object": "glove",
    "openscad_code": "// Realistic Glove Furniture in OpenSCAD\n// Medium complexity, 3D-printable (2 mm walls, no overhangs)\n\n// Overall dimensions: 120 mm (palm width) x 170 mm (length) x 45 mm (height)\n\n$fn = 30; // Smooth curves\n\nmodule glove_body() {\n    // Main palm block\n    difference() {\n        translate([0, 0, 10]) scale([1.2, 1.6, 0.4]) sphere(d = 100);\n        // Hollow cavity\n        translate([0, 0, 12]) scale([1.15, 1.55, 0.35]) sphere(d = 100);\n    }\n    // Thicken palm edges\n    hull() {\n        translate([0, 0, 10]) sphere(d = 2);\n        translate([0, 170 * 0.4, 10]) sphere(d = 2);\n    }\n}\n\nmodule thumb() {\n    // Thumb base\n    translate([-45, -30, 10]) rotate([0, 0, -30]) {\n        difference() {\n            scale([0.8, 1.2, 0.6]) sphere(d = 50);\n            translate([0, 0, 2]) scale([0.75, 1.15, 0.5]) sphere(d = 50);\n        }\n    }\n}\n\nmodule fingers() {\n    // Generate four fingers\n    for (i = [0:3]) {\n        translate([i * 25 - 37.5, 60, 10]) rotate([0, 0, 20 - i * 10]) {\n            difference() {\n                scale([0.5, 1.8, 0.5]) sphere(d = 40);\n                translate([0, 0, 2]) scale([0.45, 1.75, 0.4]) sphere(d = 40);\n            }\n        }\n    }\n}\n\nmodule cuff() {\n    // Cuff opening\n    difference() {\n        // Outer cuff\n        translate([0, -70, 5]) rotate([0, 0, 0]) cylinder(h = 30, d1 = 80, d2 = 90);\n        // Inner hollow\n        translate([0, -70, 7]) cylinder(h = 30, d1 = 76, d2 = 86);\n    }\n    // Cuff rim\n    translate([0, -70, 35]) cylinder(h = 3, d = 92);\n}\n\nmodule stitching() {\n    // Simulate stitching lines\n    color(\"black\") {\n        // Palm stitching\n        for (i = [0:5]) {\n            translate([0, i * 25 - 50, 28]) rotate([90, 0, 0]) cylinder(h = 2, d = 1);\n        }\n        // Finger seams\n        for (i = [0:3]) {\n            translate([i * 25 - 37.5, 40, 18]) rotate([90, 0, 20]) cylinder(h = 2, d = 1);\n        }\n    }\n}\n\nmodule furniture_base() {\n    // Flat base for stability\n    difference() {\n        translate([0, 0, 0]) cube([140, 180, 5], center = true);\n        translate([0, 0, 2]) cube([136, 176, 5], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    furniture_base();\n    translate([0, 20, 5]) {\n        glove_body();\n        thumb();\n        fingers();\n        cuff();\n    }\n    stitching();\n}",
    "renders": true
  },
  {
    "natural_object": "mitt",
    "openscad_code": "// OpenSCAD Mitt Chair\n// Realistic style, medium complexity\n// Overall size: 120mm x 100mm x 85mm\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nseat_height = 40;\nback_angle = 15;\n\n// Main seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion body\n        translate([0, 0, seat_height/2])\n        scale([1, 0.9, 0.5])\n        sphere(d = 100);\n        \n        // Hollow center\n        translate([0, 0, seat_height/2 + 1])\n        scale([0.85, 0.75, 0.4])\n        sphere(d = 100);\n    }\n}\n\n// Backrest - mitt shape\nmodule backrest() {\n    union() {\n        // Main backrest\n        rotate([back_angle, 0, 0])\n        translate([0, -25, seat_height + 25])\n        scale([1.1, 0.8, 1.2])\n        sphere(d = 90);\n        \n        // Thumb section\n        rotate([back_angle, 0, -30])\n        translate([35, -15, seat_height + 35])\n        scale([0.4, 0.6, 0.8])\n        sphere(d = 40);\n    }\n}\n\n// Hollow out backrest\nmodule hollow_backrest() {\n    difference() {\n        backrest();\n        \n        // Interior cavity\n        rotate([back_angle, 0, 0])\n        translate([0, -20, seat_height + 25])\n        scale([0.9, 0.7, 1])\n        sphere(d = 80);\n        \n        // Thumb cavity\n        rotate([back_angle, 0, -30])\n        translate([35, -10, seat_height + 35])\n        scale([0.3, 0.5, 0.7])\n        sphere(d = 30);\n    }\n}\n\n// Support frame/legs\nmodule legs() {\n    // Front left leg\n    translate([-35, 30, 20])\n    cylinder(h = 40, d1 = 20, d2 = 15);\n    \n    // Front right leg\n    translate([35, 30, 20])\n    cylinder(h = 40, d1 = 20, d2 = 15);\n    \n    // Rear support bar\n    translate([0, -30, 20])\n    rotate([90, 0, 0])\n    cylinder(h = 80, d = 15);\n    \n    // Side supports\n    translate([-45, 0, 10])\n    rotate([0, 90, 0])\n    cylinder(h = 90, d = 12);\n    \n    translate([45, 0, 10])\n    rotate([0, 90, 0])\n    cylinder(h = 90, d = 12);\n}\n\n// Mitt stitching details\nmodule stitching() {\n    // Seat stitching\n    for(i = [-30:15:30]) {\n        translate([i, 0, seat_height + 1])\n        cube([1, 60, 0.5], center = true);\n    }\n    \n    // Backrest stitching\n    rotate([back_angle, 0, 0])\n    translate([0, -25, seat_height + 45])\n    scale([0.9, 0.6, 0.1])\n    sphere(d = 80);\n    \n    // Thumb seam\n    rotate([back_angle, 0, -30])\n    translate([35, -15, seat_height + 35])\n    rotate([90, 0, 0])\n    cylinder(h = 30, d = 2);\n}\n\n// Assembly\nunion() {\n    // Main chair body\n    union() {\n        seat_cushion();\n        hollow_backrest();\n    }\n    \n    // Structural frame\n    legs();\n    \n    // Decorative details\n    stitching();\n}",
    "renders": true
  },
  {
    "natural_object": "pads",
    "openscad_code": "// Pads Furniture Item - Realistic Style, Medium Complexity\n// A stack of cushioned pads for seating or footrest use\n\n$fn = 50;  // Smoothness for curved parts\n\n// Overall dimensions\npad_width = 80;\npad_depth = 60;\npad_height = 15;\nstack_height = 3;\nleg_height = 25;\nwall_thickness = 2;\n\n// Materials\nfoam_shrink = 0.9;  // Slight compression of foam under fabric\nfabric_bulge = 1.05;  // Fabric stretches over foam\n\nmodule pad_leg() {\n    // Wooden legs with metal cap\n    translate([0, 0, leg_height/2]) {\n        difference() {\n            // Main leg cylinder\n            cylinder(h=leg_height, d=8, center=true);\n            \n            // Hollow center for weight reduction\n            cylinder(h=leg_height+1, d=4, center=true);\n        }\n        \n        // Metal foot cap\n        translate([0, 0, leg_height/2-1]) {\n            cylinder(h=2, d=10, center=true);\n        }\n    }\n}\n\nmodule single_pad(vertical_pos = 0) {\n    // Base foam core\n    translate([0, 0, vertical_pos + pad_height/2]) {\n        // Foam cushion\n        color(\"beige\") {\n            scale([foam_shrink, foam_shrink, 1]) {\n                cube([pad_width, pad_depth, pad_height], center=true);\n            }\n        }\n        \n        // Fabric covering\n        color(\"gray\") {\n            scale([fabric_bulge, fabric_bulge, 1.1]) {\n                cube([pad_width, pad_depth, pad_height], center=true);\n            }\n        }\n        \n        // Tufted buttons\n        for(x = [-30, 0, 30]) {\n            for(y = [-20, 0, 20]) {\n                translate([x, y, vertical_pos + pad_height/2 + 8]) {\n                    color(\"black\") {\n                        sphere(d=6);\n                    }\n                }\n            }\n        }\n        \n        // Side seam detail\n        translate([0, 0, vertical_pos]) {\n            difference() {\n                cube([pad_width+2, pad_depth+2, 2], center=true);\n                cube([pad_width-2, pad_depth-2, 3], center=true);\n            }\n        }\n    }\n}\n\nmodule pads_furniture() {\n    // Main structure\n    union() {\n        // Stack of pads\n        for(i = [0:stack_height-1]) {\n            single_pad(i * (pad_height - 5));  // Slight compression in stack\n            \n            // Connection zipper between pads\n            if(i < stack_height-1) {\n                translate([0, -pad_depth/2 - 2, i * (pad_height - 5) + pad_height]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=40, d=4, center=true);\n                            cylinder(h=41, d=2, center=true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Support frame\n        translate([0, 0, stack_height * (pad_height - 5) + leg_height/2]) {\n            // Bottom support board\n            difference() {\n                cube([pad_width+10, pad_depth+10, 4], center=true);\n                cube([pad_width+6, pad_depth+6, 5], center=true);\n            }\n            \n            // Corner legs\n            for(x = [-pad_width/2 + 15, pad_width/2 - 15]) {\n                for(y = [-pad_depth/2 + 15, pad_depth/2 - 15]) {\n                    translate([x, y, 0]) {\n                        pad_leg();\n                    }\n                }\n            }\n            \n            // Cross supports\n            color(\"brown\") {\n                translate([0, -pad_depth/2 + 10, -leg_height/2 + 2]) {\n                    cube([pad_width-20, 4, 4], center=true);\n                }\n                translate([-pad_width/2 + 10, 0, -leg_height/2 + 2]) {\n                    cube([4, pad_depth-20, 4], center=true);\n                }\n            }\n        }\n        \n        // Handle on side\n        translate([pad_width/2 + 5, 0, stack_height * (pad_height - 5)/2]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=30, d=8, center=true);\n                    cylinder(h=31, d=5, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete furniture\npads_furniture();",
    "renders": true
  },
  {
    "natural_object": "mask",
    "openscad_code": "// Realistic Mask Furniture - Wall-Mounted Decorative Mask with Shelf\n// Overall dimensions: 120mm wide x 150mm tall x 60mm deep\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nmask_width = 120;\nmask_height = 150;\nwall_thickness = 2;\nshelf_depth = 40;\n\n// Main mask face structure\nmodule mask_face() {\n    // Back plate for wall mounting\n    difference() {\n        cube([mask_width, mask_height, wall_thickness], center=true);\n        \n        // Keyhole mounting slots\n        for (x = [-40, 40]) {\n            translate([x, 60, wall_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d1=8, d2=5);\n        }\n    }\n    \n    // Face outline - organic curved shape\n    translate([0, 20, wall_thickness/2]) {\n        scale([1, 1.2, 0.5])\n            sphere(d=mask_width);\n    }\n    \n    // Forehead ridge\n    translate([0, 45, wall_thickness + 15])\n        rotate([0, 0, 0])\n            scale([0.9, 0.3, 0.5])\n                sphere(d=mask_width * 0.8);\n}\n\n// Eye details\nmodule eyes() {\n    eye_offset = 25;\n    eye_height = 25;\n    \n    for (x = [-eye_offset, eye_offset]) {\n        // Eye sockets\n        translate([x, eye_height, wall_thickness + 10]) {\n            difference() {\n                sphere(d=20);\n                translate([0, 0, -5])\n                    sphere(d=15);\n            }\n        }\n        \n        // Eye brows - structural shelf supports\n        translate([x, eye_height + 15, wall_thickness + 20])\n            rotate([15, 0, 0])\n                cube([8, 20, wall_thickness], center=true);\n    }\n}\n\n// Nose structure\nmodule nose() {\n    // Bridge\n    translate([0, 5, wall_thickness + 8])\n        rotate([90, 0, 0])\n            cylinder(h=30, d1=8, d2=12);\n    \n    // Nostrils\n    for (x = [-4, 4]) {\n        translate([x, 0, wall_thickness + 8])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=4);\n    }\n}\n\n// Mouth opening - functional shelf space\nmodule mouth_shelf() {\n    // Mouth cavity\n    translate([0, -20, wall_thickness + 5])\n        difference() {\n            cube([50, 25, 20], center=true);\n            translate([0, 0, 10])\n                cube([45, 20, 15], center=true);\n        }\n    \n    // Shelf bottom\n    translate([0, -20, wall_thickness])\n        cube([50, 25, wall_thickness], center=true);\n    \n    // Decorative teeth as shelf supports\n    for (x = [-15, -5, 5, 15]) {\n        translate([x, -30, wall_thickness])\n            cube([5, 10, 5], center=true);\n    }\n}\n\n// Side decorative elements with joints\nmodule side_decorations() {\n    for (x = [-mask_width/2 - 5, mask_width/2 + 5]) {\n        // Side panels\n        translate([x, 0, wall_thickness/2])\n            cube([wall_thickness, mask_height * 0.8, 30]);\n        \n        // Decorative peg joints\n        for (y = [-40, 0, 40]) {\n            translate([x > 0 ? x + 5 : x - 5, y, wall_thickness + 15])\n                cylinder(h=8, d=6);\n        }\n    }\n}\n\n// Chin structure - bottom shelf\nmodule chin_shelf() {\n    // Chin protrusion\n    translate([0, -mask_height/2 + 20, wall_thickness + 5])\n        rotate([15, 0, 0])\n            cube([mask_width * 0.7, 30, shelf_depth], center=true);\n    \n    // Support brackets\n    for (x = [-30, 30]) {\n        translate([x, -mask_height/2 + 20, wall_thickness/2])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=wall_thickness * 2);\n    }\n}\n\n// Assembly\nunion() {\n    mask_face();\n    eyes();\n    nose();\n    mouth_shelf();\n    side_decorations();\n    chin_shelf();\n}",
    "renders": true
  },
  {
    "natural_object": "helmet",
    "openscad_code": "// Realistic Helmet Furniture Item\n// Medium complexity OpenSCAD model for 3D printing\n\n$fn = 50;\nwall_thickness = 2;\nscale_factor = 0.8;\n\nmodule helmet_shell() {\n    // Main helmet dome\n    difference() {\n        // Outer shell\n        scale([1, 1, 1.1]) sphere(d = 100);\n        \n        // Inner cavity\n        translate([0, 0, 5]) scale([0.92, 0.92, 1]) sphere(d = 96);\n        \n        // Bottom opening\n        translate([0, 0, -45]) cube([200, 200, 100], center = true);\n    }\n}\n\nmodule visor() {\n    // Front visor piece\n    difference() {\n        // Main visor shape\n        translate([-40, 0, 20]) rotate([0, 90, 0]) \n            cylinder(h = 80, r1 = 45, r2 = 35);\n        \n        // Cut top\n        translate([-60, 0, 35]) cube([120, 100, 70], center = true);\n        \n        // Cut bottom\n        translate([-60, 0, -20]) cube([120, 100, 40], center = true);\n    }\n    \n    // Visor mounting brackets\n    for (x = [-35, 35]) {\n        translate([x, -48, 15]) rotate([90, 0, 0])\n            cylinder(h = 6, r = 4);\n        translate([x, -48, 15]) rotate([90, 0, 0])\n            cylinder(h = 8, r = 2.5);\n    }\n}\n\nmodule ventilation_holes() {\n    // Ventilation slots on top\n    for (i = [-2:2]) {\n        translate([i * 15, 0, 48]) rotate([45, 0, 0])\n            cube([8, 30, 3], center = true);\n    }\n    \n    // Side vents\n    for (angle = [30, 150]) {\n        rotate([0, 0, angle]) translate([0, 47, 25]) rotate([90, 0, 0])\n            cylinder(h = 15, r = 3);\n    }\n}\n\nmodule chin_strap_mounts() {\n    // Left mount\n    translate([-40, -45, -25]) {\n        cube([10, 8, 15], center = true);\n        translate([0, 0, -8.5]) cylinder(h = 3, r = 3);\n    }\n    \n    // Right mount\n    translate([40, -45, -25]) {\n        cube([10, 8, 15], center = true);\n        translate([0, 0, -8.5]) cylinder(h = 3, r = 3);\n    }\n}\n\nmodule neck_support() {\n    // Curved neck support ring\n    difference() {\n        // Outer ring\n        translate([0, 0, -40]) cylinder(h = 15, r1 = 50, r2 = 45);\n        \n        // Inner cut\n        translate([0, 0, -42]) cylinder(h = 20, r1 = 42, r2 = 37);\n        \n        // Front opening\n        translate([0, 45, -40]) cube([100, 50, 20], center = true);\n    }\n}\n\nmodule helmet_trim() {\n    // Bottom rim detail\n    difference() {\n        translate([0, 0, -45]) cylinder(h = 5, r = 51);\n        translate([0, 0, -47]) cylinder(h = 10, r = 48);\n    }\n    \n    // Ridge detail around middle\n    translate([0, 0, 0]) rotate([90, 0, 0])\n        difference() {\n            torus(48, 2);\n            translate([0, 0, -50]) cube([200, 200, 100], center = true);\n        }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r = minor);\n}\n\nmodule helmet_furniture() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main helmet structure\n            helmet_shell();\n            \n            // Additional components\n            visor();\n            ventilation_holes();\n            chin_strap_mounts();\n            neck_support();\n            helmet_trim();\n        }\n    }\n}\n\n// Render the complete helmet\nhelmet_furniture();",
    "renders": true
  },
  {
    "natural_object": "cleats",
    "openscad_code": "// Cleats furniture – shoe-cleat style wall-mounted rack\n// Overall footprint: 120 mm wide, 60 mm deep, 80 mm tall\n// Wall thickness chosen for 2 mm shells (perimeter lines)\n\n$fn = 32;  // smooth curves\n\n// ---------- PARAMETERS ----------\nwall_thk = 2;      // 2 mm printable walls\ncleat_w  = 120;    // rack width\ncleat_d  = 60;     // rack depth\ncleat_h  = 80;     // rack height\ncleat_gap = 40;    // slot for shoe sole\nslot_h   = 18;     // vertical slot height\nslot_d   = 45;     // how far the shoe slides in\nrib_num  = 3;      // number of vertical ribs for strength\nmount_r  = 3.5;    // screw hole radius (Ø7 mm)\n\n// ---------- MAIN BODY ----------\ndifference() {\n    union() {\n        // Outer shell\n        cube([cleat_w, cleat_d, cleat_h], center = false);\n\n        // Top front chamfer\n        translate([0, cleat_d - wall_thk, cleat_h - wall_thk])\n            rotate([0, -45, 0])\n            cube([cleat_w, wall_thk*sqrt(2), wall_thk*sqrt(2)], center = false);\n    }\n\n    // Large slot for shoe entry\n    translate([wall_thk, wall_thk, wall_thk])\n        cube([cleat_w - 2*wall_thk, slot_d, slot_h]);\n\n    // Rear wall cut-out to save material\n    translate([wall_thk, cleat_d - wall_thk, wall_thk])\n        cube([cleat_w - 2*wall_thk, wall_thk, cleat_h - 2*wall_thk]);\n}\n\n// ---------- INTERNAL RIBS ----------\nmodule rib() {\n    difference() {\n        translate([0, wall_thk, wall_thk])\n            cube([wall_thk, cleat_d - 2*wall_thk, cleat_h - 2*wall_thk]);\n        translate([-0.1, wall_thk + 1, wall_thk + 1])\n            cube([wall_thk + 0.2, slot_d - 2, slot_h - 2]);\n    }\n}\n\nfor (i = [1 : rib_num - 1])\n    translate([(cleat_w / rib_num) * i - wall_thk/2, 0, 0]) rib();\n\n// ---------- MOUNTING HOLES ----------\ntranslate([15, cleat_d/2, cleat_h/2])\n    rotate([0, 90, 0])\n    cylinder(h = cleat_d, r = mount_r, center = true);\n\ntranslate([cleat_w - 15, cleat_d/2, cleat_h/2])\n    rotate([0, 90, 0])\n    cylinder(h = cleat_d, r = mount_r, center = true);\n\n// ---------- FRONT GRIP STRIP ----------\ndifference() {\n    translate([wall_thk, wall_thk, wall_thk + slot_h])\n        cube([cleat_w - 2*wall_thk, slot_d, wall_thk]);\n\n    // Small teeth for grip\n    for (x = [5 : 10 : cleat_w - 10])\n        translate([x, wall_thk + 2, wall_thk + slot_h - 1])\n            cube([2, 6, 1]);\n}",
    "renders": true
  },
  {
    "natural_object": "skates",
    "openscad_code": "// Skateboard Furniture - Realistic Style, Medium Complexity\n// A miniature skateboard-shaped shelf bracket or decorative piece\n// Overall dimensions: 120mm x 30mm x 50mm\n\n// Wall mounting plate\nmodule mounting_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, 25])\n            cube([60, 20, 4], center=true);\n        \n        // Screw holes (2mm diameter for M2 screws)\n        for (x = [-20, 20]) {\n            translate([x, 0, 27])\n                cylinder(h=5, d=2.2, $fn=16);\n        }\n    }\n}\n\n// Truck baseplate\nmodule truck_base() {\n    translate([0, 0, 2])\n        difference() {\n            // Main base\n            cube([40, 20, 4], center=true);\n            \n            // Rounded edges\n            translate([0, 0, 2])\n                cube([36, 16, 4], center=true);\n        }\n}\n\n// Truck hanger\nmodule truck_hanger() {\n    rotate([0, 90, 0])\n        difference() {\n            // Main hanger body\n            cylinder(h=50, d1=8, d2=10, center=true);\n            \n            // Axle holes\n            for (y = [-15, 15]) {\n                translate([0, y, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=12, d=3.5, center=true);\n            }\n        }\n}\n\n// Wheels (4 wheels total)\nmodule wheel() {\n    difference() {\n        // Main wheel\n        cylinder(h=10, d=12, $fn=32);\n        \n        // Bearing hole\n        cylinder(h=10, d=8, $fn=16);\n        \n        // Tread pattern\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([5.5, 0, 0])\n                    cube([1, 2, 10], center=true);\n        }\n    }\n}\n\n// Skateboard deck\nmodule deck() {\n    difference() {\n        // Main deck shape\n        scale([1, 1, 0.3])\n            hull() {\n                // Front and back rounded ends\n                translate([50, 0, 0])\n                    sphere(d=30);\n                translate([-50, 0, 0])\n                    sphere(d=30);\n                // Middle section\n                translate([0, 0, 0])\n                    cube([100, 30, 30], center=true);\n            };\n        \n        // Concave\n        translate([0, 0, 9])\n            cube([120, 30, 20], center=true);\n        \n        // Truck mounting holes (front)\n        for (x = [35, 40]) {\n            for (y = [-10, 10]) {\n                translate([x, y, 0])\n                    cylinder(h=10, d=2, $fn=16);\n            }\n        }\n        \n        // Truck mounting holes (back)\n        for (x = [-35, -40]) {\n            for (y = [-10, 10]) {\n                translate([x, y, 0])\n                    cylinder(h=10, d=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Grip tape texture\nmodule grip_texture() {\n    for (x = [-45:5:45]) {\n        for (y = [-12:3:12]) {\n            translate([x, y, 10.5])\n                cube([0.5, 2, 0.5], center=true);\n        }\n    }\n}\n\n// Full skateboard assembly\nmodule skateboard() {\n    // Deck\n    color(\"DarkGoldenrod\")\n    deck();\n    \n    // Grip tape\n    color(\"Black\")\n    grip_texture();\n    \n    // Front truck assembly\n    translate([37.5, 0, 0]) {\n        color(\"Silver\")\n        union() {\n            truck_base();\n            translate([0, 0, 4])\n                truck_hanger();\n        }\n        // Wheels\n        for (y = [-15, 15]) {\n            color(\"DarkGray\")\n            translate([0, y, -8])\n                rotate([90, 0, 0])\n                    wheel();\n        }\n    }\n    \n    // Back truck assembly\n    translate([-37.5, 0, 0]) {\n        color(\"Silver\")\n        union() {\n            truck_base();\n            translate([0, 0, 4])\n                truck_hanger();\n        }\n        // Wheels\n        for (y = [-15, 15]) {\n            color(\"DarkGray\")\n            translate([0, y, -8])\n                rotate([90, 0, 0])\n                    wheel();\n        }\n    }\n}\n\n// Main assembly - combines skateboard with mounting plate\n// Rotate 90 degrees to mount on wall as shelf bracket\nrotate([90, 0, 0])\n    translate([0, 0, -15])\n        union() {\n            skateboard();\n            translate([0, 0, 0])\n                mounting_plate();\n        }",
    "renders": true
  },
  {
    "natural_object": "board",
    "openscad_code": "// Realistic cutting board with handle groove, juice groove, and rubber feet\n// Overall dimensions: 200 x 120 x 15 mm (medium size for 3D printing)\n\n// Wall thickness: 2 mm throughout for 3D printing\n\n// Main board body\nmodule board_body() {\n    difference() {\n        // Main rectangular board\n        cube([200, 120, 15], center = true);\n        \n        // Juice groove around top edge\n        translate([0, 0, 7.5 - 1])\n            cube([180, 100, 2], center = true);\n    }\n}\n\n// Handle grip groove on short sides\nmodule handle_grooves() {\n    for (side = [-1, 1]) {\n        translate([side * 95, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 40, r1 = 15, r2 = 15, $fn = 32);\n    }\n}\n\n// Rubber feet in corners\nmodule rubber_feet() {\n    for (x = [-85, 85])\n        for (y = [-45, 45])\n            translate([x, y, -7.5 + 3])\n                cylinder(h = 3, r1 = 5, r2 = 5, $fn = 16);\n}\n\n// Hanging hole for storage\nmodule hanging_hole() {\n    translate([0, 50, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 120, r1 = 4, r2 = 4, $fn = 32);\n}\n\n// Rounded edges using minkowski (simplified for printing)\nmodule rounded_edges() {\n    minkowski() {\n        cube([196, 116, 11], center = true);\n        sphere(r = 2, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main board with rounded edges\n    difference() {\n        rounded_edges();\n        \n        // Cut handle grooves\n        handle_grooves();\n        \n        // Cut hanging hole\n        hanging_hole();\n    }\n    \n    // Add rubber feet\n    rubber_feet();\n}\n\n// Position at origin for easy printing\ntranslate([0, 0, 7.5]) {\n    %cube([200, 120, 15], center = true);  // Ghost preview\n}",
    "renders": true
  },
  {
    "natural_object": "sled",
    "openscad_code": "// Realistic sled furniture - medium complexity\n// Overall dimensions: ~120mm long x 50mm wide x 40mm high\n\n// Main runner profile - curved wooden runner\nmodule runner() {\n    difference() {\n        // Main curved runner body\n        hull() {\n            // Front curved section\n            translate([0, 0, 5]) cylinder(h=2, r=3, $fn=20);\n            translate([15, 0, 8]) cylinder(h=2, r=3, $fn=20);\n            translate([30, 0, 10]) cylinder(h=2, r=3, $fn=20);\n            translate([45, 0, 8]) cylinder(h=2, r=3, $fn=20);\n            translate([60, 0, 5]) cylinder(h=2, r=3, $fn=20);\n            \n            // Bottom edge\n            translate([0, 0, 2]) cylinder(h=2, r=3, $fn=20);\n            translate([60, 0, 2]) cylinder(h=2, r=3, $fn=20);\n        }\n        \n        // Hollow out bottom for 2mm walls\n        translate([0, 0, -1]) scale([0.8, 0.6, 0.8]) runner();\n    }\n}\n\n// Cross brace between runners\nmodule cross_brace(length) {\n    difference() {\n        // Main brace\n        cube([length, 6, 8], center=true);\n        \n        // Lightening holes\n        for(i = [-length/3, 0, length/3]) {\n            translate([i, 0, 0]) cylinder(h=10, r=1.5, center=true, $fn=20);\n        }\n    }\n}\n\n// Seat slat\nmodule seat_slat(width) {\n    difference() {\n        // Main slat with rounded edges\n        hull() {\n            translate([-width/2, -2, 0]) cylinder(h=2, r=2, $fn=20);\n            translate([width/2, -2, 0]) cylinder(h=2, r=2, $fn=20);\n            translate([-width/2, 2, 0]) cylinder(h=2, r=2, $fn=20);\n            translate([width/2, 2, 0]) cylinder(h=2, r=2, $fn=20);\n            translate([-width/2, -2, 4]) cylinder(h=2, r=2, $fn=20);\n            translate([width/2, -2, 4]) cylinder(h=2, r=2, $fn=20);\n            translate([-width/2, 2, 4]) cylinder(h=2, r=2, $fn=20);\n            translate([width/2, 2, 4]) cylinder(h=2, r=2, $fn=20);\n        }\n        \n        // Screw holes\n        translate([-width/2 + 5, 0, 2]) cylinder(h=6, r=1, $fn=20);\n        translate([width/2 - 5, 0, 2]) cylinder(h=6, r=1, $fn=20);\n    }\n}\n\n// Backrest support\nmodule backrest_support() {\n    difference() {\n        // Angled support\n        hull() {\n            translate([0, 0, 0]) cylinder(h=2, r=2.5, $fn=20);\n            translate([0, 0, 25]) cylinder(h=2, r=2.5, $fn=20);\n            translate([-5, 0, 25]) cylinder(h=2, r=2.5, $fn=20);\n            translate([-5, 0, 0]) cylinder(h=2, r=2.5, $fn=20);\n        }\n        \n        // Joint hole\n        translate([-2.5, 0, 5]) rotate([0, 90, 0]) cylinder(h=6, r=1.5, $fn=20);\n    }\n}\n\n// Assembly\nmodule sled() {\n    // Left runner\n    translate([0, -22, 0]) runner();\n    \n    // Right runner (mirrored)\n    translate([0, 22, 0]) mirror([0, 1, 0]) runner();\n    \n    // Front cross brace\n    translate([15, 0, 8]) rotate([90, 0, 0]) cross_brace(40);\n    \n    // Rear cross brace\n    translate([45, 0, 8]) rotate([90, 0, 0]) cross_brace(40);\n    \n    // Seat slats\n    translate([25, 0, 18]) seat_slat(35);\n    translate([35, 0, 18]) seat_slat(35);\n    translate([45, 0, 18]) seat_slat(35);\n    \n    // Backrest supports\n    translate([50, -15, 18]) rotate([15, 0, 0]) backrest_support();\n    translate([50, 15, 18]) rotate([15, 0, 0]) backrest_support();\n    \n    // Backrest slat\n    translate([42, 0, 38]) rotate([15, 0, 0]) seat_slat(25);\n}\n\n// Render the sled\nsled();",
    "renders": true
  },
  {
    "natural_object": "sledge",
    "openscad_code": "// SLEDGE furniture – 3D-printable decorative model\n// Overall length ≈ 90 mm, width ≈ 45 mm, height ≈ 28 mm\n// All wall thicknesses ≥ 2 mm, no large overhangs\n\n// --- Parameters ----------------------------------------------------------\nseat_depth  = 35;     // seat plank depth\nseat_width  = 40;     // seat plank width\nseat_thick  = 3;      // seat plank thickness\nback_height = 20;     // back-rest height above seat\nback_thick  = 2;      // back-rest thickness\nleg_h       = 25;     // height from floor to seat bottom\nleg_wall    = 2.5;    // leg wall thickness\nrail_thick  = 2;      // side rail thickness\nsled_w      = 45;     // sled runner spacing\nsled_curve  = 20;     // runner curvature radius\nsled_thick  = 2.5;    // runner thickness\nbolt_head   = 1.5;    // decorative bolt head radius\nbolt_depth  = 1.5;    // decorative bolt recess\nedge_round  = 0.7;    // slight rounding on edges\n\n// --- Modules -------------------------------------------------------------\nmodule rounded_cube(s, r=edge_round) {\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([r*dx, r*dy, r*dz])\n                sphere(r=r);\n    }\n    scale([s.x-2*r, s.y-2*r, s.z-2*r]) cube(r, center=true);\n}\n\n// Decorative bolt head (recess for printing)\nmodule bolt_head() {\n    difference() {\n        cylinder(h=bolt_depth, r=bolt_head, $fn=12);\n        translate([0,0,-0.1])\n            cylinder(h=bolt_depth+0.2, r=bolt_head-0.5, $fn=12);\n    }\n}\n\n// Sled runner (curved bottom rail)\nmodule sled_runner() {\n    hull() {\n        for(a=[0:10:90])\n            translate([0, -a, -sled_curve*(1-cos(a/90*90))])\n                rotate([90,0,0]) cylinder(h=sled_thick, r=sled_thick/2, $fn=8);\n    }\n    // straight top\n    translate([0, -90, 0])\n        cube([sled_thick, 90, sled_thick], center=true);\n}\n\n// Leg frame with side rails\nmodule leg_frame(x_pos) {\n    translate([x_pos, 0, leg_h/2]) {\n        difference() {\n            // main leg post\n            rounded_cube([leg_wall, seat_width-2*rail_thick, leg_h], r=1.5);\n            // decorative bolt heads front and back\n            translate([leg_wall/2, seat_width/2-rail_thick, leg_h-3])\n                rotate([90,0,0]) bolt_head();\n            translate([-leg_wall/2, seat_width/2-rail_thick, leg_h-3])\n                rotate([90,0,0]) mirror([1,0,0]) bolt_head();\n        }\n    }\n}\n\n// --- Main assembly -------------------------------------------------------\n// Seat\ntranslate([0, 0, leg_h+seat_thick/2])\n    rounded_cube([seat_depth, seat_width, seat_thick]);\n\n// Back-rest\ntranslate([-seat_depth/2+back_thick/2, 0, leg_h+seat_thick+back_height/2])\n    rotate([5,0,0])  // slight recline\n        rounded_cube([back_thick, seat_width, back_height]);\n\n// Front and back legs with side rails\nleg_frame( seat_depth/2-leg_wall/2);\nleg_frame(-seat_depth/2+leg_wall/2);\n\n// Side rails (left and right)\nfor(y=[seat_width/2-rail_thick/2, -seat_width/2+rail_thick/2])\n    translate([0, y, leg_h/2])\n        rounded_cube([seat_depth-leg_wall, rail_thick, leg_h], r=1);\n\n// Sled runners\nfor(y=[sled_w/2-sled_thick/2, -sled_w/2+sled_thick/2])\n    translate([0, y, 0])\n        sled_runner();",
    "renders": true
  },
  {
    "natural_object": "paddle",
    "openscad_code": "// Paddle Furniture Item - Realistic Style, Medium Complexity\n// A wall-mounted coat rack shaped like a wooden canoe paddle\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions (mm)\npaddle_length = 180;\npaddle_width = 45;\npaddle_thickness = 8;\nhandle_length = 80;\n\n// Wall mounting plate\nmodule mounting_plate() {\n    difference() {\n        // Main plate\n        translate([0, -paddle_width/2 - 5, -paddle_thickness/2 - 2])\n            cube([20, paddle_width + 10, 4], center=false);\n        \n        // Screw holes (2mm diameter for M2 screws)\n        for (x = [5, 15]) {\n            for (y = [-15, 0, 15]) {\n                translate([x, y, -1])\n                    cylinder(h=6, d=2.2, $fn=16);\n            }\n        }\n    }\n}\n\n// Handle grip with ergonomic finger grooves\nmodule handle_grip() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=15, $fn=32);\n        \n        // Finger grooves (5 grooves)\n        for (i = [1:5]) {\n            rotate([0, 0, (i-1)*72])\n                translate([-20, 0, handle_length/2 - 5 - (i-1)*15])\n                    cube([40, 3, 10], center=true);\n        }\n        \n        // End cap hole for hanging\n        translate([0, 0, handle_length + 2])\n            cylinder(h=5, d=8, $fn=16);\n    }\n    \n    // End cap detail\n    translate([0, 0, handle_length])\n        cylinder(h=3, d=15, $fn=32);\n}\n\n// Paddle blade with realistic curves\nmodule paddle_blade() {\n    // Main blade body\n    hull() {\n        // Tip\n        translate([paddle_length - handle_length, 0, 0])\n            sphere(d=paddle_thickness);\n        \n        // Handle transition\n        translate([0, 0, 0])\n            sphere(d=15);\n        \n        // Upper edge\n        translate([paddle_length - handle_length - 20, paddle_width/2, 0])\n            sphere(d=paddle_thickness);\n        \n        // Lower edge\n        translate([paddle_length - handle_length - 20, -paddle_width/2, 0])\n            sphere(d=paddle_thickness);\n    }\n    \n    // Blade thickness reduction\n    difference() {\n        scale([1, 1, 0.8])\n            hull() {\n                // Tip\n                translate([paddle_length - handle_length, 0, 0])\n                    sphere(d=paddle_thickness);\n                \n                // Handle transition\n                translate([0, 0, 0])\n                    sphere(d=15);\n                \n                // Upper edge\n                translate([paddle_length - handle_length - 20, paddle_width/2, 0])\n                    sphere(d=paddle_thickness);\n                \n                // Lower edge\n                translate([paddle_length - handle_length - 20, -paddle_width/2, 0])\n                    sphere(d=paddle_thickness);\n            }\n        \n        // Hollow out center for weight reduction\n        translate([paddle_length - handle_length - 40, 0, 0])\n            scale([1, 0.6, 0.5])\n                cube([50, paddle_width, paddle_thickness], center=true);\n    }\n}\n\n// Decorative wood grain texture\nmodule wood_grain() {\n    // Linear pattern along the length\n    for (i = [0:5:paddle_length]) {\n        color(\"saddlebrown\")\n            translate([i - paddle_length/2, 0, 0])\n                rotate([90, 0, 0])\n                    linear_extrude(height=0.5)\n                        circle(d=2, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle_grip();\n    \n    // Blade\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            paddle_blade();\n    \n    // Mounting plate\n    translate([-10, 0, -paddle_thickness/2 - 2])\n        mounting_plate();\n    \n    // Decorative elements\n    translate([paddle_length/2, 0, 0])\n        wood_grain();\n    \n    // Reinforcement ribs\n    for (i = [20:20:paddle_length - 40]) {\n        translate([i, 0, 0])\n            rotate([90, 0, 0])\n                cube([2, paddle_width * 0.8, paddle_thickness * 0.6], center=true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "oar",
    "openscad_code": "// Oar Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm length, 20mm width, 6mm thickness\n// Wall thickness: 2mm for 3D printing\n\n// Parameters\n$fn = 32;  // Smooth curves\nhandle_length = 70;\nhandle_diameter = 8;\nblade_length = 50;\nblade_width = 20;\nblade_thickness = 2;\nshaft_length = 50;\nshaft_diameter = 6;\n\nmodule handle_grip() {\n    // Main handle with grip texture\n    difference() {\n        // Handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip rings - subtract for texture\n        for(i = [5:10:handle_length-10]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=handle_diameter-1, center=false);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        sphere(d=handle_diameter);\n}\n\nmodule shaft() {\n    // Tapered shaft connecting handle to blade\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h=5, d=handle_diameter, center=true);\n        translate([0, 0, shaft_length/2])\n            cylinder(h=shaft_length, d=shaft_diameter, center=true);\n    }\n}\n\nmodule blade() {\n    // Main blade with realistic proportions\n    difference() {\n        // Blade body - tapered\n        hull() {\n            translate([0, 0, 0])\n                cube([shaft_diameter*0.8, shaft_diameter, blade_thickness], center=true);\n            translate([0, 0, blade_length])\n                cube([blade_width, blade_width*0.3, blade_thickness], center=true);\n        }\n        \n        // Water flow channels\n        for(i = [blade_length*0.3:5:blade_length*0.8]) {\n            translate([0, -blade_width/4, i])\n                cube([blade_width*0.8, blade_thickness+0.2, 1], center=true);\n            translate([0, blade_width/4, i])\n                cube([blade_width*0.8, blade_thickness+0.2, 1], center=true);\n        }\n    }\n    \n    // Blade reinforcement ridge\n    translate([0, 0, blade_length/2])\n        cube([blade_width*0.1, blade_width*0.4, blade_length], center=true);\n}\n\nmodule oar_joint() {\n    // Reinforced joint between shaft and blade\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=8, d=shaft_diameter*1.5, center=true);\n            cylinder(h=10, d=shaft_diameter*0.8, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Handle assembly\n    translate([0, 0, 0])\n        handle_grip();\n    \n    // Shaft\n    translate([0, 0, handle_length])\n        shaft();\n    \n    // Joint\n    translate([0, 0, handle_length + shaft_length/2])\n        oar_joint();\n    \n    // Blade\n    translate([0, 0, handle_length + shaft_length])\n        blade();\n}\n\n// Support stand for furniture display\ntranslate([0, -15, -5])\n    difference() {\n        // Base\n        cube([60, 5, 2], center=true);\n        \n        // Mounting holes\n        for(i = [-20:20:40]) {\n            translate([i, 0, 0])\n                cylinder(h=3, d=2, center=true);\n        }\n    }",
    "renders": true
  },
  {
    "natural_object": "ring",
    "openscad_code": "// Ring Furniture - Realistic Style, Medium Complexity\n// A circular coffee table with ring-shaped base and glass top\n\n$fn = 50;  // Smooth curves\nwall = 2;  // 3D-printable wall thickness\n\n// Overall dimensions\ntable_d = 100;      // Table diameter\ntable_h = 45;       // Table height\ntop_thick = 4;      // Glass top thickness\nring_w = 12;        // Ring width\nleg_count = 4;      // Support legs\n\n// Glass top with rounded edge\nmodule glass_top() {\n    difference() {\n        // Main glass disc\n        cylinder(h = top_thick, d = table_d, center = true);\n        \n        // Chamfered underside edge\n        translate([0, 0, -top_thick/2])\n            cylinder(h = top_thick + 0.1, d = table_d - 4);\n    }\n}\n\n// Single curved support leg\nmodule leg() {\n    // Vertical post\n    cylinder(h = table_h - ring_w, d = 8);\n    \n    // Curved transition to ring\n    translate([0, 0, table_h - ring_w])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d1 = 8, d2 = 6);\n}\n\n// Ring base with feet\nmodule ring_base() {\n    difference() {\n        // Main ring\n        cylinder(h = ring_w, d = table_d - 20);\n        \n        // Hollow center\n        cylinder(h = ring_w + 0.1, d = table_d - 20 - wall*2);\n    }\n    \n    // Add feet for stability\n    for (i = [0:leg_count-1]) {\n        rotate([0, 0, i * 360/leg_count])\n            translate([table_d/2 - 10 - ring_w/2, 0, -2])\n                cube([20, 6, 4], center = true);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, table_h/2 + top_thick/2])\n    glass_top();\n\n// Support legs\nfor (i = [0:leg_count-1]) {\n    rotate([0, 0, i * 360/leg_count])\n        translate([table_d/2 - 10 - ring_w/2, 0, ring_w/2])\n            leg();\n}\n\n// Ring base\ntranslate([0, 0, ring_w/2])\n    ring_base();\n\n// Decorative center detail\ntranslate([0, 0, ring_w])\n    cylinder(h = 2, d1 = 20, d2 = 16);",
    "renders": true
  },
  {
    "natural_object": "mat",
    "openscad_code": "// Welcome Mat - Realistic Style, Medium Complexity\n// Overall dimensions: 120 x 60 x 5 mm (fits nicely on most FDM printers)\n\n$fn = 36; // smooth curves for cylinders\n\n/* ---------- Main mat body ---------- */\nmodule mat_body() {\n    difference() {\n        // thick base slab with rounded top edges\n        minkowski() {\n            cube([120, 60, 3], center = true);\n            cylinder(h = 0.01, r = 1); // 1 mm rounding\n        }\n\n        // fabric weave pattern on top face\n        for (x = [-55:5:55]) {\n            for (y = [-27.5:2.5:27.5]) {\n                translate([x, y, 1.5])\n                    cube([1.5, 0.8, 1.5], center = true);\n            }\n        }\n    }\n}\n\n/* ---------- Rubber border frame ---------- */\nmodule rubber_border() {\n    difference() {\n        // outer frame\n        translate([0, 0, 0.5])\n            cube([124, 64, 3], center = true);\n\n        // cut out inside\n        translate([0, 0, -1])\n            cube([116, 56, 6], center = true);\n    }\n}\n\n/* ---------- Anti-slip nubs on bottom ---------- */\nmodule anti_slip_nubs() {\n    for (x = [-50:10:50]) {\n        for (y = [-25:10:25]) {\n            translate([x, y, -2.5])\n                cylinder(h = 2, r = 2, center = true);\n        }\n    }\n}\n\n/* ---------- Welcome text engraving ---------- */\nmodule welcome_text() {\n    translate([0, 0, 1.6])\n        linear_extrude(height = 0.5, center = true)\n            text(\"WELCOME\", size = 12, halign = \"center\", valign = \"center\", font = \"Arial:style=Bold\");\n}\n\n/* ---------- Assembly ---------- */\nunion() {\n    // main parts\n    mat_body();\n    rubber_border();\n    \n    // bottom features\n    translate([0, 0, 2.5])\n        anti_slip_nubs();\n    \n    // top surface details\n    welcome_text();\n}",
    "renders": true
  },
  {
    "natural_object": "beam",
    "openscad_code": "// Wooden Beam Furniture Element - Realistic Style\n// A structural beam with mortise and tenon joints and wood grain texture\n\n// Parameters\nbeam_length = 120;\nbeam_width = 20;\nbeam_height = 30;\nwall_thickness = 2;\njoint_size = 8;\njoint_spacing = 40;\n\n// Wood grain texture parameters\ngrain_depth = 0.5;\ngrain_spacing = 2;\n\n// Main beam module\nmodule beam() {\n    difference() {\n        // Main beam body\n        union() {\n            // Core beam\n            cube([beam_length, beam_width, beam_height], center = true);\n            \n            // Rounded edges\n            translate([beam_length/2 - beam_width/2, 0, beam_height/2 - beam_width/2])\n                rotate([0, 90, 0])\n                    cylinder(h = beam_width, r = beam_width/2, center = true);\n            \n            translate([-beam_length/2 + beam_width/2, 0, beam_height/2 - beam_width/2])\n                rotate([0, 90, 0])\n                    cylinder(h = beam_width, r = beam_width/2, center = true);\n            \n            translate([beam_length/2 - beam_width/2, 0, -beam_height/2 + beam_width/2])\n                rotate([0, 90, 0])\n                    cylinder(h = beam_width, r = beam_width/2, center = true);\n            \n            translate([-beam_length/2 + beam_width/2, 0, -beam_height/2 + beam_width/2])\n                rotate([0, 90, 0])\n                    cylinder(h = beam_width, r = beam_width/2, center = true);\n        }\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 0])\n            cube([beam_length - wall_thickness*2, beam_width - wall_thickness*2, beam_height - wall_thickness*2], center = true);\n    }\n}\n\n// Mortise joints (slots for connections)\nmodule mortise_joints() {\n    for(i = [-1, 1]) {\n        translate([i * joint_spacing, 0, beam_height/2])\n            cube([joint_size, beam_width + 2, joint_size/2], center = true);\n        \n        translate([i * joint_spacing, 0, -beam_height/2])\n            cube([joint_size, beam_width + 2, joint_size/2], center = true);\n    }\n}\n\n// Tenon joints (protruding connectors)\nmodule tenon_joints() {\n    for(i = [-1, 1]) {\n        translate([i * (beam_length/2 + joint_size/2), 0, 0])\n            cube([joint_size, beam_width - 4, joint_size], center = true);\n    }\n}\n\n// Wood grain texture\nmodule wood_grain() {\n    for(i = [-beam_length/2 + grain_spacing : grain_spacing : beam_length/2 - grain_spacing]) {\n        translate([i, 0, beam_height/2 + 0.1])\n            cube([grain_spacing/2, beam_width + 1, grain_depth], center = true);\n    }\n}\n\n// Support brackets\nmodule support_brackets() {\n    for(i = [-1, 1]) {\n        translate([i * (beam_length/2 - 15), 0, -beam_height/2 - 5])\n            difference() {\n                // Bracket body\n                union() {\n                    cube([10, beam_width - 4, 10], center = true);\n                    translate([5, 0, -5])\n                        rotate([0, 45, 0])\n                            cube([14.14, beam_width - 4, 2], center = true);\n                }\n                \n                // Lightening holes\n                for(j = [-3, 0, 3]) {\n                    translate([j, 0, -2])\n                        cylinder(h = beam_width - 2, r = 1.5, center = true);\n                }\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main beam structure\n    difference() {\n        beam();\n        mortise_joints();\n    }\n    \n    // Tenon connectors\n    tenon_joints();\n    \n    // Surface details\n    wood_grain();\n    \n    // Support hardware\n    support_brackets();\n}",
    "renders": true
  },
  {
    "natural_object": "vault",
    "openscad_code": "// Medium-complexity realistic vault (safe) furniture item\n// External size: 100 × 80 × 120 mm (WxDxH)\n// Wall thickness: 2 mm\n// Designed for 3D printing: no overhangs >45°, split into two printable parts\n\n// Parameters\nwall = 2;\nbody_w = 100;\nbody_d = 80;\nbody_h = 100;\ndoor_w = body_w - wall*2;\ndoor_h = body_h*0.8;\ncorner_r = 4;\nhandle_r = 5;\nhandle_l = 25;\nbolt_num = 5;\nbolt_r = 3;\nbolt_len = 6;\n\n// Main body\nmodule vault_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([body_w, body_d, body_h], center = true);\n            sphere(r = corner_r);\n        }\n        // Inner cavity\n        minkowski() {\n            cube([body_w-wall*2, body_d-wall*2, body_h-wall*2], center = true);\n            sphere(r = corner_r-wall);\n        }\n        // Front cutout for door\n        translate([0, body_d/2-wall/2, body_h*0.1])\n            cube([door_w+wall, wall+0.1, door_h], center = true);\n    }\n}\n\n// Door panel\nmodule vault_door() {\n    difference() {\n        // Door slab\n        translate([0, body_d/2-wall/2, body_h*0.1])\n            cube([door_w, wall, door_h], center = true);\n        // Recessed panel\n        translate([0, body_d/2+0.1, body_h*0.1])\n            cube([door_w*0.9, wall+0.2, door_h*0.9], center = true);\n    }\n    // Hinges\n    for (z = [-door_h*0.35, door_h*0.35]) {\n        translate([-door_w/2-handle_r*0.5, body_d/2-wall/2, body_h*0.1+z])\n            rotate([0, 90, 0])\n                cylinder(h = wall*2, r = handle_r*0.4, center = true);\n    }\n    // Bolts\n    for (i = [0:bolt_num-1]) {\n        angle = i*360/bolt_num;\n        x = cos(angle)*(door_w*0.45);\n        y = sin(angle)*(door_h*0.45);\n        translate([x, body_d/2-wall/2, body_h*0.1+y])\n            rotate([90, 0, 0])\n                cylinder(h = bolt_len, r = bolt_r);\n    }\n    // Handle\n    translate([0, body_d/2+handle_l/2, body_h*0.1])\n        rotate([90, 0, 0])\n            cylinder(h = handle_l, r = handle_r);\n    // Handle grip\n    translate([0, body_d/2+handle_l, body_h*0.1])\n        sphere(r = handle_r*1.2);\n}\n\n// Base frame with feet\nmodule vault_base() {\n    // Base plate\n    translate([0, 0, -body_h/2-wall])\n        cube([body_w+10, body_d+10, wall*2], center = true);\n    // Feet\n    foot_x = body_w/2 - 10;\n    foot_y = body_d/2 - 10;\n    for (x = [-foot_x, foot_x])\n        for (y = [-foot_y, foot_y])\n            translate([x, y, -body_h/2-wall*2])\n                cylinder(h = wall*2, r = 5);\n}\n\n// Assembly\nunion() {\n    vault_base();\n    vault_body();\n    vault_door();\n}",
    "renders": true
  },
  {
    "natural_object": "trampoline",
    "openscad_code": "// Realistic trampoline furniture item\n// Medium complexity, 3D printable with proper wall thickness\n\n// Overall dimensions\ntrampoline_diameter = 80;\nframe_thickness = 3;\nleg_height = 25;\nmat_thickness = 1.5;\n\n// Frame module with legs\nmodule frame() {\n    // Main circular frame\n    difference() {\n        cylinder(h=frame_thickness, d=trampoline_diameter, $fn=60);\n        translate([0,0,-0.1])\n        cylinder(h=frame_thickness+0.2, d=trampoline_diameter-4, $fn=60);\n    }\n    \n    // Support legs - 6 legs for stability\n    for(i=[0:5]) {\n        rotate([0,0,i*60]) {\n            translate([trampoline_diameter/2-2, 0, -leg_height/2]) {\n                rotate([90,0,0])\n                cylinder(h=leg_height, d=4, $fn=12);\n            }\n        }\n    }\n    \n    // Leg cross-braces for stability\n    for(i=[0:2]) {\n        rotate([0,0,i*120]) {\n            translate([trampoline_diameter/2-5, 0, -leg_height/2])\n            rotate([0,90,0])\n            cylinder(h=trampoline_diameter-10, d=2, $fn=8);\n        }\n    }\n}\n\n// Trampoline mat with spring attachment points\nmodule trampoline_mat() {\n    // Main mat surface\n    translate([0,0,frame_thickness+mat_thickness/2])\n    cylinder(h=mat_thickness, d=trampoline_diameter-10, $fn=60);\n    \n    // Spring attachment rings (simplified as cylinders)\n    for(i=[0:35]) {\n        angle = i*10;\n        rotate([0,0,angle]) {\n            translate([(trampoline_diameter-10)/2-1, 0, frame_thickness+mat_thickness])\n            cylinder(h=2, d=2, $fn=8);\n        }\n    }\n}\n\n// Safety net posts\nmodule safety_net_posts() {\n    post_height = 35;\n    for(i=[0:5]) {\n        rotate([0,0,i*60]) {\n            translate([trampoline_diameter/2-1, 0, frame_thickness])\n            cylinder(h=post_height, d=3, $fn=12);\n        }\n    }\n}\n\n// Trampoline base assembly\nmodule trampoline() {\n    // Frame and structure\n    union() {\n        frame();\n        \n        // Trampoline mat\n        trampoline_mat();\n        \n        // Safety net posts\n        safety_net_posts();\n        \n        // Center logo/text detail\n        translate([0,0,frame_thickness+mat_thickness+0.1])\n        cylinder(h=0.5, d=15, $fn=32);\n    }\n}\n\n// Generate the trampoline\ntrampoline();",
    "renders": true
  },
  {
    "natural_object": "springboard",
    "openscad_code": "// Springboard Furniture - Realistic Style, Medium Complexity\n// Dimensions: 120mm long x 40mm wide x 20mm high\n\n$fn=50;\n\n// Main springboard base\nmodule springboard_base() {\n    difference() {\n        // Main curved board\n        translate([0, 0, 5]) {\n            linear_extrude(height=40, center=true, convexity=10)\n                offset(2) {\n                    difference() {\n                        square([120, 20], center=true);\n                        square([116, 16], center=true);\n                    }\n                }\n        }\n        \n        // Board curvature\n        for(i=[-1, 1]) {\n            translate([i*55, 0, 0]) {\n                difference() {\n                    cube([10, 20, 20], center=true);\n                    rotate([0, 90, 0]) cylinder(h=20, d=8, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Support frame\nmodule frame_support() {\n    // Left support\n    translate([-50, -15, 0]) {\n        difference() {\n            cube([8, 4, 12]);\n            cylinder(h=12, d=4);\n        }\n    }\n    \n    // Right support\n    translate([50, -15, 0]) {\n        mirror([1, 0, 0]) difference() {\n            cube([8, 4, 12]);\n            cylinder(h=12, d=4);\n        }\n    }\n    \n    // Cross brace\n    translate([0, -15, 6]) {\n        cube([100, 2, 4]);\n    }\n}\n\n// Spring mechanism\nmodule spring_mechanism() {\n    // Main coil spring\n    translate([0, 0, 12]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=8, d=6, center=true);\n                translate([0, 0, -1]) cylinder(h=10, d=3, center=true);\n            }\n            \n            // Spring coils\n            for(i=[-3:3]) {\n                translate([0, 0, i*1.5]) {\n                    difference() {\n                        cylinder(h=1.5, d=6, center=true);\n                        cylinder(h=1.5, d=4, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Spring caps\n    translate([0, 0, 8]) cylinder(h=2, d=8, center=true);\n    translate([0, 0, 16]) cylinder(h=2, d=8, center=true);\n}\n\n// Hinge assembly\nmodule hinge_assembly() {\n    // Left hinge\n    translate([-50, 15, 12]) {\n        difference() {\n            cylinder(h=8, d=8, center=true);\n            translate([0, 0, -1]) cylinder(h=10, d=4, center=true);\n        }\n        \n        // Hinge pin\n        translate([0, 0, 0]) cylinder(h=10, d=2, center=true);\n    }\n    \n    // Right hinge\n    translate([50, 15, 12]) {\n        mirror([1, 0, 0]) difference() {\n            cylinder(h=8, d=8, center=true);\n            translate([0, 0, -1]) cylinder(h=10, d=4, center=true);\n        }\n        \n        // Hinge pin\n        translate([0, 0, 0]) cylinder(h=10, d=2, center=true);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    for(pos=[-45, 45]) {\n        translate([pos, 0, 0]) {\n            difference() {\n                cube([6, 20, 4]);\n                translate([3, 10, 2]) cylinder(h=4.1, d=3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    springboard_base();\n    \n    // Support structure\n    translate([0, 0, 0]) {\n        frame_support();\n    }\n    \n    // Spring and hinge\n    translate([0, 0, 0]) {\n        spring_mechanism();\n    }\n    \n    translate([0, 0, 0]) {\n        hinge_assembly();\n    }\n    \n    // Mounting hardware\n    translate([0, 0, 0]) {\n        mounting_brackets();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "weights",
    "openscad_code": "// Weight Rack Furniture with Plates and Barbell\n// Medium complexity realistic style weights furniture\n\n// Parameters\n$fn=50;\nrack_width = 100;\nrack_depth = 60;\nrack_height = 80;\npost_thickness = 6;\nshelf_thickness = 4;\nplate_thickness = 8;\nplate_radius = 25;\nbarbell_diameter = 5;\nbarbell_length = 85;\n\n// Main rack structure\nmodule weight_rack() {\n    // Left post\n    translate([-rack_width/2 + post_thickness/2, 0, rack_height/2])\n        cube([post_thickness, rack_depth, rack_height], center=true);\n    \n    // Right post\n    translate([rack_width/2 - post_thickness/2, 0, rack_height/2])\n        cube([post_thickness, rack_depth, rack_height], center=true);\n    \n    // Bottom shelf\n    translate([0, 0, shelf_thickness/2])\n        cube([rack_width - post_thickness*2, rack_depth - 4, shelf_thickness], center=true);\n    \n    // Middle shelf\n    translate([0, 0, rack_height/2])\n        cube([rack_width - post_thickness*2, rack_depth - 4, shelf_thickness], center=true);\n    \n    // Top shelf\n    translate([0, 0, rack_height - shelf_thickness/2])\n        cube([rack_width - post_thickness*2, rack_depth - 4, shelf_thickness], center=true);\n    \n    // Back support\n    translate([0, rack_depth/2 - post_thickness/2, rack_height/2])\n        cube([rack_width, post_thickness, rack_height], center=true);\n}\n\n// Weight plates with realistic details\nmodule weight_plate(radius, thickness, weight_text) {\n    difference() {\n        // Main plate body\n        cylinder(h=thickness, r=radius, center=true);\n        \n        // Center hole for barbell\n        cylinder(h=thickness+2, r=barbell_diameter/2+1, center=true);\n        \n        // Grip holes\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([radius*0.7, 0, 0])\n                    cylinder(h=thickness+2, r=3, center=true);\n        }\n    }\n    \n    // Weight label\n    translate([0, 0, thickness/2 + 0.1])\n        linear_extrude(height=0.5)\n            text(weight_text, size=6, halign=\"center\", valign=\"center\");\n}\n\n// Barbell bar\nmodule barbell_bar() {\n    union() {\n        // Main bar\n        rotate([0, 90, 0])\n            cylinder(h=barbell_length, r=barbell_diameter/2, center=true);\n        \n        // Sleeves for plates\n        for(side=[-1, 1]) {\n            translate([side * (barbell_length/2 - 15), 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=20, r=barbell_diameter/2 + 3, center=true);\n        }\n        \n        // Knurling texture\n        for(i=[-30:5:30]) {\n            rotate([0, 90, 0])\n                translate([i, 0, 0])\n                    cylinder(h=2, r=barbell_diameter/2 + 0.2, center=true);\n        }\n    }\n}\n\n// Assemble the weights furniture\nunion() {\n    // Rack\n    weight_rack();\n    \n    // Plates on bottom shelf (2.5kg)\n    translate([-rack_width/4, -rack_depth/4, shelf_thickness + plate_thickness/2])\n        weight_plate(plate_radius*0.8, plate_thickness, \"2.5\");\n    translate([rack_width/4, -rack_depth/4, shelf_thickness + plate_thickness/2])\n        weight_plate(plate_radius*0.8, plate_thickness, \"2.5\");\n    \n    // Plates on middle shelf (5kg)\n    translate([-rack_width/4, 0, rack_height/2 + plate_thickness/2])\n        weight_plate(plate_radius, plate_thickness, \"5\");\n    translate([rack_width/4, 0, rack_height/2 + plate_thickness/2])\n        weight_plate(plate_radius, plate_thickness, \"5\");\n    \n    // Plates on top shelf (10kg)\n    translate([-rack_width/4, rack_depth/4, rack_height - shelf_thickness - plate_thickness/2])\n        weight_plate(plate_radius*1.2, plate_thickness*1.2, \"10\");\n    translate([rack_width/4, rack_depth/4, rack_height - shelf_thickness - plate_thickness/2])\n        weight_plate(plate_radius*1.2, plate_thickness*1.2, \"10\");\n    \n    // Barbell resting on rack\n    translate([0, 0, rack_height + barbell_diameter/2 + 2])\n        rotate([90, 0, 0])\n            barbell_bar();\n}",
    "renders": true
  },
  {
    "natural_object": "dumbbell",
    "openscad_code": "// Realistic dumbbell furniture item - medium complexity\n// Designed as a functional dumbbell-shaped side table with storage\n\n// Overall dimensions\ntable_length = 120;\ntable_width = 40;\ntable_height = 45;\nwall_thickness = 2;\n\n// Weight plate dimensions\nplate_diameter = 38;\nplate_thickness = 8;\nplate_hole = 10;\nnum_plates = 3;\n\n// Bar dimensions\nbar_diameter = 12;\nbar_length = table_length - (2 * plate_thickness * num_plates) - 10;\n\n// Storage compartment\ncompartment_width = 30;\ncompartment_height = 15;\ncompartment_depth = 35;\n\n// Support structure\nleg_height = table_height - plate_diameter - 5;\n\nmodule weight_plate() {\n    // Main plate body\n    difference() {\n        cylinder(h=plate_thickness, d=plate_diameter, $fn=100);\n        \n        // Central hole\n        cylinder(h=plate_thickness + 1, d=plate_hole, $fn=50);\n        \n        // Grip holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([plate_diameter/2 - 6, 0, -1])\n                    cylinder(h=plate_thickness + 2, d=4, $fn=20);\n        }\n    }\n    \n    // Decorative rim\n    translate([0, 0, plate_thickness/2])\n        difference() {\n            cylinder(h=plate_thickness/3, d1=plate_diameter, d2=plate_diameter - 4, $fn=100);\n            cylinder(h=plate_thickness/3 + 1, d=plate_diameter - 8, $fn=100);\n        }\n}\n\nmodule support_bar() {\n    // Main bar structure\n    difference() {\n        cylinder(h=bar_length, d=bar_diameter, $fn=50);\n        \n        // Internal hollow for weight reduction\n        cylinder(h=bar_length, d=bar_diameter - wall_thickness*2, $fn=50);\n    }\n    \n    // End caps\n    translate([0, 0, bar_length/2])\n        cylinder(h=4, d1=bar_diameter + 2, d2=bar_diameter, $fn=50);\n    \n    translate([0, 0, -bar_length/2 - 4])\n        cylinder(h=4, d1=bar_diameter, d2=bar_diameter + 2, $fn=50);\n}\n\nmodule storage_compartment() {\n    // Main compartment box\n    difference() {\n        translate([-compartment_depth/2, -compartment_width/2, 0])\n            cube([compartment_depth, compartment_width, compartment_height]);\n            \n        // Internal space\n        translate([-compartment_depth/2 + wall_thickness, \n                  -compartment_width/2 + wall_thickness, \n                  wall_thickness])\n            cube([compartment_depth - wall_thickness*2, \n                  compartment_width - wall_thickness*2, \n                  compartment_height - wall_thickness]);\n    }\n    \n    // Support legs\n    for (x = [-compartment_depth/2 + 5, compartment_depth/2 - 5]) {\n        translate([x, 0, -leg_height])\n            cylinder(h=leg_height, d=6, $fn=30);\n    }\n}\n\n// Main assembly\nunion() {\n    // Left weight plate stack\n    translate([-table_length/2 + plate_thickness/2, 0, plate_diameter/2 + leg_height])\n        for (i = [0:num_plates-1]) {\n            translate([0, 0, i * (plate_thickness + 1)])\n                weight_plate();\n        }\n    \n    // Right weight plate stack\n    translate([table_length/2 - plate_thickness/2, 0, plate_diameter/2 + leg_height])\n        for (i = [0:num_plates-1]) {\n            translate([0, 0, i * (plate_thickness + 1)])\n                weight_plate();\n        }\n    \n    // Central bar/table surface\n    translate([0, 0, plate_diameter/2 + leg_height + num_plates * (plate_thickness + 1) - 5])\n        support_bar();\n    \n    // Storage compartment in center\n    translate([0, 0, plate_diameter/2 + leg_height + num_plates * (plate_thickness + 1) - 5])\n        storage_compartment();\n    \n    // Reinforcement ribs between plates\n    for (side = [-1, 1]) {\n        translate([side * (table_length/2 - plate_thickness*num_plates - 5), 0, \n                  plate_diameter/2 + leg_height - 3])\n            rotate([90, 0, 0])\n                cylinder(h=plate_thickness*num_plates + 10, d=3, $fn=20);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "barbell",
    "openscad_code": "// Barbell Furniture Item - Realistic Style, Medium Complexity\n// Dimensions: ~120mm length, 3D printable with 2mm wall thickness\n\n// Parameters\nbar_length = 100;\nbar_diameter = 12;\nplate_thickness = 8;\nplate_radius = 20;\ncollar_length = 6;\ncollar_diameter = 14;\njoint_radius = 3;\nbase_height = 5;\nbase_width = 25;\n\n// Main module\nmodule barbell_furniture() {\n    // Central bar with threaded ends\n    difference() {\n        // Solid bar\n        union() {\n            // Main shaft\n            cylinder(h=bar_length, d=bar_diameter, $fn=32);\n            \n            // Threaded ends (decorative)\n            translate([bar_length/2 - 5, 0, 0])\n                cylinder(h=10, d=bar_diameter + 1, $fn=32);\n            translate([-bar_length/2 + 5, 0, 0])\n                cylinder(h=10, d=bar_diameter + 1, $fn=32);\n        }\n        \n        // Thread grooves\n        for(i = [-4:1:4]) {\n            translate([bar_length/2 - 5 + i, 0, -bar_diameter/2 - 1])\n                cube([1, bar_diameter + 2, bar_diameter + 2], center=true);\n            translate([-bar_length/2 + 5 + i, 0, -bar_diameter/2 - 1])\n                cube([1, bar_diameter + 2, bar_diameter + 2], center=true);\n        }\n    }\n    \n    // Left weight plate\n    translate([-bar_length/2 - plate_thickness/2, 0, 0])\n        weight_plate();\n    \n    // Right weight plate\n    translate([bar_length/2 + plate_thickness/2, 0, 0])\n        weight_plate();\n    \n    // Left collar\n    translate([-bar_length/2 - plate_thickness - collar_length/2, 0, 0])\n        collar();\n    \n    // Right collar\n    translate([bar_length/2 + plate_thickness + collar_length/2, 0, 0])\n        collar();\n    \n    // Structural base supports\n    translate([0, -bar_diameter/2 - base_height/2, -bar_diameter/2 - 2])\n        base_support();\n    translate([0, bar_diameter/2 + base_height/2, -bar_diameter/2 - 2])\n        base_support();\n}\n\n// Weight plate module with furniture-style details\nmodule weight_plate() {\n    difference() {\n        // Main plate\n        cylinder(h=plate_thickness, r=plate_radius, $fn=64);\n        \n        // Central hole\n        cylinder(h=plate_thickness + 2, d=bar_diameter + 2, $fn=32);\n        \n        // Grip holes (furniture handle style)\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([plate_radius * 0.6, 0, -1])\n                    cylinder(h=plate_thickness + 2, d=8, $fn=16);\n        }\n        \n        // Decorative grooves\n        for(i = [1:2]) {\n            cylinder(h=plate_thickness + 2, r=plate_radius * i/3, $fn=64);\n        }\n    }\n    \n    // Raised numbering (furniture detail)\n    translate([0, 0, plate_thickness/2 + 0.5])\n        linear_extrude(height=1)\n            text(\"25\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// Collar module with grip texture\nmodule collar() {\n    // Main collar body\n    cylinder(h=collar_length, d=collar_diameter, $fn=32);\n    \n    // Grip ridges\n    for(i = [0:3]) {\n        translate([0, 0, i * (collar_length/4)])\n            cylinder(h=1, d=collar_diameter + 2, $fn=32);\n    }\n    \n    // Locking screw\n    translate([collar_diameter/2 + 2, 0, collar_length/2])\n        rotate([0, 90, 0])\n            cylinder(h=5, d=3, $fn=16);\n}\n\n// Base support for furniture stability\nmodule base_support() {\n    difference() {\n        // Main base\n        cube([bar_length + 60, base_width, base_height], center=true);\n        \n        // Bar recess\n        translate([0, 0, base_height/2])\n            cylinder(h=base_height + 2, d=bar_diameter + 4, $fn=32);\n    }\n    \n    // Anti-slip pads\n    for(i = [-1:2:1]) {\n        translate([i * (bar_length/2 + 20), 0, -base_height/2 - 1])\n            cube([10, base_width - 4, 2], center=true);\n    }\n}\n\n// Render the barbell\nbarbell_furniture();",
    "renders": true
  },
  {
    "natural_object": "kettlebell",
    "openscad_code": "// Kettlebell Furniture Item\n// Realistic style with medium complexity\n// Overall dimensions: 100mm tall kettlebell, 120mm wide base\n\n// Configuration\n$fn = 36;\nwall_thickness = 2;\nbase_diameter = 120;\nbase_height = 8;\nkettlebell_height = 100;\nkettlebell_diameter = 80;\nhandle_clearance = 35;\nhandle_thickness = 12;\n\n// Main module\nmodule kettlebell_furniture() {\n    // Furniture base - acts as stand/storage platform\n    difference() {\n        cylinder(h = base_height, d = base_diameter, center = true);\n        cylinder(h = base_height + 1, d = base_diameter - wall_thickness*2, center = true);\n    }\n    \n    // Kettlebell body positioned on base\n    translate([0, 0, base_height/2 + kettlebell_height/2 - 10]) {\n        difference() {\n            // Main body\n            sphere(d = kettlebell_diameter);\n            \n            // Hollow interior for lighter print\n            sphere(d = kettlebell_diameter - wall_thickness*2);\n            \n            // Flat bottom for stability\n            translate([0, 0, -kettlebell_height/2 + 10])\n                cube([kettlebell_diameter, kettlebell_diameter, kettlebell_height], center = true);\n        }\n        \n        // Handle attachment points with reinforcing rings\n        for (i = [0, 180]) {\n            rotate([0, 0, i])\n            translate([0, kettlebell_diameter/2 - 15, 0]) {\n                // Reinforcement ring\n                cylinder(h = 15, d = 25, center = true);\n                difference() {\n                    cylinder(h = 15, d = 25 - wall_thickness*2, center = true);\n                    sphere(d = 25 - wall_thickness*2);\n                }\n            }\n        }\n        \n        // Handle with ergonomic grip\n        translate([0, 0, kettlebell_height/2 - 20]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    // Main handle tube\n                    cylinder(h = handle_clearance, d = handle_thickness, center = true);\n                    \n                    // Grip texture - shallow grooves\n                    for (i = [-handle_clearance/2 + 5 : 5 : handle_clearance/2 - 5]) {\n                        translate([0, 0, i])\n                        rotate([0, 90, 0])\n                        cube([handle_thickness + 2, handle_thickness/2, 1], center = true);\n                    }\n                    \n                    // Hollow handle\n                    cylinder(h = handle_clearance + 1, d = handle_thickness - wall_thickness*2, center = true);\n                }\n            }\n        }\n    }\n    \n    // Support struts connecting base to kettlebell for furniture stability\n    for (angle = [0 : 120 : 240]) {\n        rotate([0, 0, angle])\n        translate([0, base_diameter/2 - 10, base_height/2]) {\n            difference() {\n                // Curved support strut\n                hull() {\n                    sphere(d = 8);\n                    translate([0, -base_diameter/2 + 20, kettlebell_height/2])\n                        sphere(d = 6);\n                }\n                \n                // Hollow strut\n                hull() {\n                    sphere(d = 8 - wall_thickness*2);\n                    translate([0, -base_diameter/2 + 20, kettlebell_height/2])\n                        sphere(d = 6 - wall_thickness*2);\n                }\n            }\n        }\n    }\n    \n    // Furniture feet for stability\n    for (angle = [45 : 90 : 315]) {\n        rotate([0, 0, angle])\n        translate([base_diameter/2 - 8, 0, -base_height/2]) {\n            cylinder(h = 6, d = 16, center = true);\n            translate([0, 0, -3])\n            sphere(d = 16);\n        }\n    }\n}\n\n// Render the model\nkettlebell_furniture();",
    "renders": true
  },
  {
    "natural_object": "plate",
    "openscad_code": "// Realistic Medium-Complexity Plate Furniture Item\n// Dimensions: 180mm diameter, 25mm height, printable without supports\n\n$fn = 48; // Smooth curves for realism\n\n// Main plate body with slight taper\nmodule plate_body() {\n    difference() {\n        // Outer rim with gentle taper\n        cylinder(h = 8, r1 = 90, r2 = 88);\n        \n        // Hollow center for material saving\n        translate([0, 0, -1])\n            cylinder(h = 10, r = 85);\n    }\n    \n    // Base rim support ring\n    translate([0, 0, 8])\n        cylinder(h = 3, r = 90, r2 = 92);\n}\n\n// Plate well with gradual slope\nmodule plate_well() {\n    difference() {\n        // Main well\n        translate([0, 0, 8])\n            cylinder(h = 12, r1 = 85, r2 = 82);\n        \n        // Eating surface\n        translate([0, 0, 8])\n            cylinder(h = 11, r1 = 80, r2 = 77);\n    }\n}\n\n// Raised rim edge\nmodule rim_profile() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 20])\n            cylinder(h = 4, r1 = 88, r2 = 90);\n        \n        // Inner rim\n        translate([0, 0, 19])\n            cylinder(h = 5, r1 = 82, r2 = 85);\n    }\n}\n\n// Decorative ring on rim\nmodule decorative_ring() {\n    // Raised ring segments\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([86, 0, 19.5])\n                cylinder(h = 1.5, r = 3);\n    }\n}\n\n// Bottom structural ribs\nmodule bottom_ribs() {\n    // Radial support ribs\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([45, 0, 0])\n                cube([2, 15, 8], center = true);\n    }\n    \n    // Circular support ring\n    translate([0, 0, 0])\n        cylinder(h = 8, r = 50, r2 = 52);\n}\n\n// Anti-slip foot pads\nmodule foot_pads() {\n    for(i = [0:90:359]) {\n        rotate([0, 0, i])\n            translate([70, 0, 0])\n                cylinder(h = 3, r = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main plate structure\n    plate_body();\n    plate_well();\n    rim_profile();\n    \n    // Decorative elements\n    decorative_ring();\n    \n    // Structural elements (bottom)\n    difference() {\n        bottom_ribs();\n        \n        // Hollow out ribs for material efficiency\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([45, 0, 4])\n                    cube([1.5, 14, 7], center = true);\n        }\n    }\n    \n    // Feet for stability\n    foot_pads();\n}",
    "renders": true
  },
  {
    "natural_object": "rope",
    "openscad_code": "// Rope Stool – 3D-printable OpenSCAD model\n// Seat woven from rope, four legs and stretchers\n// No overhangs, 2 mm wall thickness, ~120 mm tall\n\n// global parameters\n$fn = 32;                      // cylinder resolution\nrope_d = 2.2;                  // rope diameter\nrope_gap = 1.0;                // gap between ropes\nseat_w = 80;                   // seat width\nseat_h = 12;                   // seat thickness\nleg_d = 8;                     // leg diameter\nleg_h = 100;                   // leg height\nstretch_d = 6;                 // stretcher diameter\nstretch_gap = 25;              // stretcher vertical spacing\n\nmodule leg() {\n    // solid cylindrical leg\n    cylinder(h = leg_h, d = leg_d);\n}\n\nmodule stretcher(len) {\n    // horizontal bar between legs\n    cylinder(h = len, d = stretch_d);\n}\n\nmodule rope_strand(len, angle = 0) {\n    // single straight rope piece\n    rotate([0, 90, angle])\n        cylinder(h = len, d = rope_d);\n}\n\nmodule seat_top() {\n    // woven rope surface\n    difference() {\n        // outer frame\n        cube([seat_w, seat_w, seat_h], center = true);\n        \n        // remove inner volume to leave 2 mm wall\n        cube([seat_w - 4, seat_w - 4, seat_h + 0.2], center = true);\n    }\n    \n    // simple support grid under ropes\n    translate([0, 0, -seat_h/2 + 1])\n        for (x = [-seat_w/2 + 8 : 16 : seat_w/2 - 8])\n            for (y = [-seat_w/2 + 8 : 16 : seat_w/2 - 8])\n                cube([3, 3, 2], center = true);\n    \n    // rope strands along X\n    for (y = [-seat_w/2 + rope_d/2 : rope_d + rope_gap : seat_w/2 - rope_d/2])\n        translate([0, y, seat_h/2 - rope_d/2])\n            rope_strand(seat_w);\n    \n    // rope strands along Y\n    for (x = [-seat_w/2 + rope_d/2 : rope_d + rope_gap : seat_w/2 - rope_d/2])\n        translate([x, 0, seat_h/2 - rope_d/2])\n            rope_strand(seat_w, 90);\n}\n\nmodule stool() {\n    // legs\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (seat_w/2 - leg_d/2), y * (seat_w/2 - leg_d/2), -leg_h/2])\n                leg();\n    \n    // stretchers\n    // front / back\n    for (z = [-stretch_gap, stretch_gap]) {\n        translate([0, (seat_w/2 - leg_d/2), z])\n            rotate([90, 0, 0])\n                stretcher(seat_w - leg_d);\n        translate([0, -(seat_w/2 - leg_d/2), z])\n            rotate([90, 0, 0])\n                stretcher(seat_w - leg_d);\n    }\n    \n    // left / right\n    for (z = [-stretch_gap, stretch_gap]) {\n        translate([(seat_w/2 - leg_d/2), 0, z])\n            rotate([90, 90, 0])\n                stretcher(seat_w - leg_d);\n        translate([-(seat_w/2 - leg_d/2), 0, z])\n            rotate([90, 90, 0])\n                stretcher(seat_w - leg_d);\n    }\n    \n    // seat\n    translate([0, 0, leg_h/2 + seat_h/2])\n        seat_top();\n}\n\n// render\nstool();",
    "renders": true
  },
  {
    "natural_object": "ladder",
    "openscad_code": "// Medium-complexity realistic 3D-printable ladder furniture\n// Overall dimensions: 60 mm wide × 120 mm tall × 25 mm deep\n// Wall thickness 2 mm everywhere, no overhangs\n\n$fn = 36; // smooth curves\n\n// Ladder parameters\nheight = 120;\nwidth = 60;\ndepth = 25;\nwall = 2;\nrung_spacing = 30;\nrung_size = 5;  // square rung cross-section\nleg_width = 8;\ntop_cap_h = 6;\n\nmodule leg() {\n    // Single vertical leg with rounded top cap\n    union() {\n        // Main leg body\n        translate([0, 0, height/2]) \n            cube([leg_width, wall, height], center=true);\n        \n        // Rounded top cap\n        translate([0, 0, height])\n            rotate([90, 0, 0])\n                cylinder(h=leg_width, r=leg_width/2);\n    }\n}\n\nmodule rung() {\n    // Horizontal step/rung\n    translate([0, 0, 0])\n        cube([rung_size, depth - 2*wall, wall], center=true);\n}\n\nmodule ladder_assembly() {\n    // Left leg\n    translate([-width/2 + leg_width/2, 0, 0])\n        leg();\n    \n    // Right leg\n    translate([width/2 - leg_width/2, 0, 0])\n        leg();\n    \n    // Rungs\n    for (z = [rung_spacing : rung_spacing : height - top_cap_h]) {\n        translate([0, 0, z])\n            rung();\n    }\n    \n    // Bottom spreader bar for stability\n    translate([0, 0, wall/2])\n        cube([width - 2*leg_width, wall, wall], center=true);\n    \n    // Top spreader bar\n    translate([0, 0, height - top_cap_h - wall/2])\n        cube([width - 2*leg_width, wall, wall], center=true);\n    \n    // Side bracing diagonals\n    difference() {\n        // Left diagonal brace\n        translate([-width/2 + 1.5*leg_width, 0, height/2])\n            rotate([0, 0, -30])\n                cube([height/2, wall, wall], center=true);\n        \n        // Cutout for 3D-printing clearance\n        translate([-width/2 + 1.5*leg_width, 0, height/2])\n            rotate([0, 0, -30])\n                translate([0, 0, wall])\n                    cube([height/2 + 2, wall + 2, wall], center=true);\n    }\n    \n    difference() {\n        // Right diagonal brace\n        translate([width/2 - 1.5*leg_width, 0, height/2])\n            rotate([0, 0, 30])\n                cube([height/2, wall, wall], center=true);\n        \n        // Cutout for 3D-printing clearance\n        translate([width/2 - 1.5*leg_width, 0, height/2])\n            rotate([0, 0, 30])\n                translate([0, 0, wall])\n                    cube([height/2 + 2, wall + 2, wall], center=true);\n    }\n}\n\n// Render the complete ladder\nladder_assembly();",
    "renders": true
  },
  {
    "natural_object": "hurdle",
    "openscad_code": "// Hurdle Furniture Item - Realistic Style, Medium Complexity\n// A modern hurdle-style room divider/shelf unit\n\n// Overall dimensions\nwidth = 120;\nheight = 80;\ndepth = 30;\n\n// Material thickness\nthickness = 2;\n\n// Number of horizontal slats\nnum_slats = 5;\n\n// Base thickness\nbase_height = 8;\n\n// Slat spacing calculation\nslat_spacing = (height - base_height - thickness) / (num_slats + 1);\n\n// Create the left vertical post\nmodule left_post() {\n    difference() {\n        // Main post\n        translate([thickness, 0, 0])\n            cube([thickness, depth, height]);\n        \n        // Chamfered top edge\n        translate([thickness, 0, height - 2])\n            rotate([0, 45, 0])\n                cube([sqrt(8), depth, 2]);\n    }\n}\n\n// Create the right vertical post (mirrored)\nmodule right_post() {\n    mirror([1, 0, 0])\n        translate([-width + thickness, 0, 0])\n            left_post();\n}\n\n// Create horizontal slat\nmodule slat(position) {\n    translate([thickness * 2, 0, position])\n        cube([width - thickness * 4, depth, thickness]);\n}\n\n// Create base with rounded edges\nmodule base() {\n    // Bottom plate\n    translate([0, 0, 0])\n        cube([width, depth, base_height]);\n    \n    // Front chamfer\n    translate([0, -0.01, base_height - 2])\n        rotate([45, 0, 0])\n            cube([width, 2, 2]);\n    \n    // Back chamfer\n    translate([0, depth, base_height - 2])\n        rotate([-45, 0, 0])\n            cube([width, 2, 2]);\n}\n\n// Create support braces between posts\nmodule support_brace() {\n    translate([thickness * 2, depth/2 - thickness/2, base_height])\n        cube([width - thickness * 4, thickness, height - base_height - 5]);\n}\n\n// Create decorative pegs for slat joints\nmodule peg(x, z) {\n    // Vertical peg\n    translate([x, depth/2 - thickness/2, z])\n        cylinder(thickness, 1.5, 1.5, $fn=8);\n    \n    // Horizontal peg\n    translate([x, depth/2 - thickness, z + thickness/2])\n        rotate([0, 90, 0])\n            cylinder(thickness, 1.5, 1.5, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Vertical posts\n    left_post();\n    right_post();\n    \n    // Support brace\n    support_brace();\n    \n    // Horizontal slats with pegs\n    for (i = [1:num_slats]) {\n        slat_pos = base_height + slat_spacing * i;\n        slat(slat_pos);\n        \n        // Add pegs at joints\n        peg(thickness * 2 + 5, slat_pos);\n        peg(width - thickness * 2 - 5 - thickness, slat_pos);\n    }\n    \n    // Top cross member\n    translate([thickness * 2, 0, height - thickness])\n        cube([width - thickness * 4, depth, thickness]);\n    \n    // Front stabilizer bar\n    translate([thickness * 2, -1, 0])\n        cube([width - thickness * 4, 2, base_height]);\n    \n    // Back stabilizer bar\n    translate([thickness * 2, depth - 1, 0])\n        cube([width - thickness * 4, 2, base_height]);\n}",
    "renders": true
  },
  {
    "natural_object": "cone",
    "openscad_code": "// Cone-shaped stool with realistic furniture details\n// Overall height: 100mm, base diameter: 120mm, seat diameter: 80mm\n\nmodule cone_stool() {\n    // Main cone body - hollow for 3D printing\n    difference() {\n        // Outer cone\n        cylinder(h1 = 100, h2 = 0, r1 = 60, r2 = 40, $fn = 64);\n        // Inner hollow cone\n        translate([0, 0, 2])  // Bottom thickness\n            cylinder(h1 = 96, h2 = 0, r1 = 58, r2 = 38, $fn = 64);\n    }\n    \n    // Reinforcement ring at base\n    translate([0, 0, 2])\n        difference() {\n            cylinder(h = 6, r = 62, $fn = 64);\n            cylinder(h = 6, r = 60, $fn = 64);\n        }\n    \n    // Reinforcement ring at top\n    translate([0, 0, 96])\n        difference() {\n            cylinder(h = 4, r = 42, $fn = 64);\n            cylinder(h = 4, r = 40, $fn = 64);\n        }\n    \n    // Internal support ribs (4 ribs for structural integrity)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, 0, 5])\n                cube([2, 54, 90], center = true);\n        }\n    }\n    \n    // Seat cushion - slightly curved top\n    translate([0, 0, 100])\n        difference() {\n            // Cushion base\n            cylinder(h = 8, r = 40, $fn = 64);\n            // Gentle curve on top\n            translate([0, 0, 4])\n                sphere(r = 45, $fn = 64);\n        }\n    \n    // Anti-slip feet - 4 rubber pads\n    foot_radius = 3;\n    foot_height = 2;\n    for (i = [0:3]) {\n        angle = i * 90 + 45;\n        x = 50 * cos(angle);\n        y = 50 * sin(angle);\n        translate([x, y, 0])\n            cylinder(h = foot_height, r = foot_radius, $fn = 16);\n    }\n    \n    // Seam detail - where cone meets cushion\n    translate([0, 0, 100])\n        difference() {\n            cylinder(h = 2, r = 42, $fn = 64);\n            cylinder(h = 2, r = 41, $fn = 64);\n        }\n    \n    // Handle cutout for easy lifting\n    translate([0, 45, 60])\n        rotate([0, 90, 0])\n            cylinder(h = 40, r = 5, $fn = 32);\n    translate([0, 45, 60])\n        rotate([0, 90, 0])\n            cylinder(h = 40, r = 4, $fn = 32);\n}\n\ncone_stool();",
    "renders": true
  },
  {
    "natural_object": "marker",
    "openscad_code": "// Realistic Marker Chair\n// Medium complexity furniture piece with 3D-printable features\n// Overall dimensions: ~50mm wide x ~50mm deep x ~100mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Chair proportions\nseat_width = 40;\nseat_depth = 40;\nseat_thickness = 4;\nback_height = 60;\nleg_height = 45;\nleg_size = 3;\n\n// Marker-specific features\nmarker_cap_diameter = 20;\nmarker_cap_height = 25;\nmarker_body_diameter = 18;\nmarker_body_height = 80;\n\nmodule marker_body() {\n    // Main cylindrical body\n    cylinder(h=marker_body_height, d=marker_body_diameter, $fn=32);\n    \n    // Tapered tip\n    translate([0, 0, marker_body_height])\n    cylinder(h=10, d1=marker_body_diameter, d2=2, $fn=32);\n}\n\nmodule marker_cap() {\n    // Cap cylinder\n    cylinder(h=marker_cap_height, d=marker_cap_diameter, $fn=32);\n    \n    // Cap inner cavity (for 3D printing)\n    translate([0, 0, -1])\n    cylinder(h=marker_cap_height+2, d=marker_cap_diameter-wall*2, $fn=32);\n    \n    // Cap grip ridges\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([marker_cap_diameter/2-1, -1.5, 0])\n        cube([2, 3, marker_cap_height]);\n    }\n}\n\nmodule chair_leg(x_pos, y_pos) {\n    // Front legs\n    translate([x_pos, y_pos, 0])\n    cube([leg_size, leg_size, leg_height]);\n    \n    // Back legs\n    translate([x_pos, y_pos, 0])\n    cube([leg_size, leg_size, leg_height]);\n}\n\nmodule chair_seat() {\n    // Seat platform with rounded edges\n    translate([-seat_width/2, -seat_depth/2, leg_height])\n    cube([seat_width, seat_depth, seat_thickness]);\n    \n    // Seat hole pattern for marker storage\n    for(x=[-15, -5, 5, 15]) {\n        for(y=[-15, -5, 5, 15]) {\n            translate([x, y, leg_height+seat_thickness/2])\n            cylinder(h=seat_thickness+1, d=8, $fn=16);\n        }\n    }\n}\n\nmodule chair_back() {\n    // Backrest frame\n    translate([-seat_width/2+wall, -seat_depth/2+wall, leg_height+seat_thickness])\n    cube([seat_width-wall*2, wall, back_height]);\n    \n    // Backrest posts\n    for(x=[-seat_width/2+5, 0, seat_width/2-5]) {\n        translate([x, -seat_depth/2+wall/2, leg_height+seat_thickness])\n        cube([wall, wall*2, back_height]);\n    }\n    \n    // Cross support\n    translate([-seat_width/2+5, -seat_depth/2+wall, leg_height+seat_thickness+back_height/2])\n    cube([seat_width-10, wall, wall]);\n}\n\n// Assemble the marker chair\nunion() {\n    // Four legs\n    chair_leg(-seat_width/2+leg_size/2, -seat_depth/2+leg_size/2);\n    chair_leg(seat_width/2-leg_size/2, -seat_depth/2+leg_size/2);\n    chair_leg(-seat_width/2+leg_size/2, seat_depth/2-leg_size/2);\n    chair_leg(seat_width/2-leg_size/2, seat_depth/2-leg_size/2);\n    \n    // Seat platform\n    chair_seat();\n    \n    // Backrest\n    chair_back();\n    \n    // Marker holders on back\n    translate([0, seat_depth/2-wall, leg_height+seat_thickness+back_height/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=marker_body_height/2, d=marker_body_diameter+4, $fn=32);\n        cylinder(h=marker_body_height/2+1, d=marker_body_diameter+2, $fn=32);\n    }\n    \n    // Actual marker placed in holder\n    translate([0, seat_depth/2+5, leg_height+seat_thickness+back_height/2-marker_body_height/4])\n    rotate([90, 0, 0])\n    marker_body();\n    \n    // Marker cap on side\n    translate([seat_width/2+5, 0, leg_height+seat_thickness+20])\n    rotate([0, 90, 0])\n    marker_cap();\n}",
    "renders": true
  },
  {
    "natural_object": "bench",
    "openscad_code": "// Realistic bench with slats and frame\n// Overall dimensions: 120mm wide x 40mm deep x 45mm high\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule bench() {\n    // Bench frame\n    frame();\n    \n    // Seat slats\n    seat_slats();\n    \n    // Backrest slats\n    backrest_slats();\n    \n    // Support braces\n    support_braces();\n}\n\n// Bench frame structure\nmodule frame() {\n    // Left leg frame\n    translate([-55, 0, 0])\n        leg_frame();\n    \n    // Right leg frame\n    translate([55, 0, 0])\n        leg_frame();\n    \n    // Front cross brace\n    translate([0, -17.5, 10])\n        cube([110, 3, 3], center=true);\n    \n    // Rear cross brace\n    translate([0, 17.5, 10])\n        cube([110, 3, 3], center=true);\n}\n\n// Single leg frame\nmodule leg_frame() {\n    // Front leg\n    translate([0, -17.5, 22.5])\n        cube([4, 4, 45], center=true);\n    \n    // Rear leg\n    translate([0, 17.5, 22.5])\n        cube([4, 4, 45], center=true);\n    \n    // Top rail\n    translate([0, 0, 43])\n        cube([4, 35, 4], center=true);\n}\n\n// Seat slats\nmodule seat_slats() {\n    for(i = [-40:10:40]) {\n        translate([i, 0, 40.5])\n            cube([8, 34, 3], center=true);\n    }\n}\n\n// Backrest slats\nmodule backrest_slats() {\n    for(i = [-40:10:40]) {\n        translate([i, 12, 33])\n            rotate([15, 0, 0])\n                cube([8, 3, 20], center=true);\n    }\n    \n    // Top backrest rail\n    translate([0, 12, 43])\n        rotate([15, 0, 0])\n            cube([90, 3, 4], center=true);\n}\n\n// Support braces\nmodule support_braces() {\n    // Left brace\n    translate([-55, 0, 25])\n        rotate([45, 0, 0])\n            cube([3, 3, 30], center=true);\n    \n    // Right brace\n    translate([55, 0, 25])\n        rotate([-45, 0, 0])\n            cube([3, 3, 30], center=true);\n}\n\n// Render the bench\nbench();",
    "renders": true
  },
  {
    "natural_object": "rack",
    "openscad_code": "// Realistic medium-complexity 3D-printable compact wooden bookcase rack\n// External footprint: 90 x 45 x 120 mm\n// Wall thickness: 2 mm everywhere for reliable FDM printing\n\n$fn = 32;  // smooth curves\n\n// --------------------------\n// Main assembly\n// --------------------------\ndifference() {\n    union() {\n        frame();\n        shelves();\n        back_panel();\n    }\n    // Cable/key hole on rear\n    translate([45, 2, 60]) rotate([0, 90, 0])\n        cylinder(h = 4, d1 = 6, d2 = 3, $fn = 24);\n}\n\n// --------------------------\n// Outer frame (left, right, top, bottom)\n// --------------------------\nmodule frame() {\n    // Left side panel\n    translate([0, 0, 0])\n        cube([2, 45, 120]);\n\n    // Right side panel\n    translate([88, 0, 0])\n        cube([2, 45, 120]);\n\n    // Top rail\n    translate([0, 0, 118])\n        cube([90, 45, 2]);\n\n    // Bottom rail\n    translate([0, 0, 0])\n        cube([90, 45, 2]);\n}\n\n// --------------------------\n// Shelves (fixed, 3 tiers)\n// --------------------------\nmodule shelves() {\n    shelf_y = 20;  // depth of shelf board\n    shelf_z = 18;  // thickness of shelf board\n    shelf_positions = [30, 60, 90]; // heights from bottom\n\n    for (h = shelf_positions) {\n        // Shelf board\n        translate([2, (45 - shelf_y)/2, h])\n            cube([86, shelf_y, shelf_z]);\n\n        // Front lip for realistic look & printability\n        translate([2, (45 - shelf_y)/2 - 2, h])\n            cube([86, 2, shelf_z]);\n    }\n}\n\n// --------------------------\n// Back panel (tongue-and-groove style illusion)\n// --------------------------\nmodule back_panel() {\n    panel_th = 2;\n    // Full back panel\n    translate([2, 45 - panel_th, 2])\n        cube([86, panel_th, 116]);\n\n    // Horizontal grooves for realism\n    for (i = [1:5]) {\n        translate([4, 45 - panel_th - 0.5, i*20])\n            cube([82, 0.5, 1]);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "cage",
    "openscad_code": "// Realistic cage furniture - medium complexity\n// 3D printable bird cage with stand\n\n$fn = 30;  // Smooth curves for realistic appearance\n\n// Cage dimensions\nbase_width = 80;\nbase_depth = 80;\nbase_height = 15;\ncage_height = 100;\ncage_width = 70;\ncage_depth = 70;\nwire_thickness = 2;\ndoor_width = 25;\ndoor_height = 35;\nstand_height = 60;\nstand_width = 90;\n\nmodule base() {\n    // Bottom base plate\n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        // Cable management hole\n        translate([0, -20, -base_height/2])\n            cylinder(h=base_height+1, r=5);\n    }\n    \n    // Corner reinforcements\n    for(x=[-1,1]) {\n        for(y=[-1,1]) {\n            translate([x*35, y*35, 0]) {\n                cube([10, 10, base_height+5], center=true);\n            }\n        }\n    }\n}\n\nmodule stand() {\n    // Central support pillar\n    cylinder(h=stand_height, r=6);\n    \n    // Stabilizing arms\n    for(angle=[0:120:359]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, stand_height/2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=stand_width/2-10, r=3);\n                }\n            }\n        }\n    }\n}\n\nmodule cage_frame() {\n    // Bottom frame\n    translate([0, 0, base_height/2 + stand_height]) {\n        difference() {\n            cube([cage_width+wire_thickness*2, cage_depth+wire_thickness*2, wire_thickness*2], center=true);\n            cube([cage_width, cage_depth, wire_thickness*4], center=true);\n        }\n        \n        // Vertical corner posts\n        for(x=[-1,1]) {\n            for(y=[-1,1]) {\n                translate([x*cage_width/2, y*cage_depth/2, cage_height/2]) {\n                    cube([wire_thickness*2, wire_thickness*2, cage_height], center=true);\n                }\n            }\n        }\n        \n        // Top frame\n        translate([0, 0, cage_height]) {\n            difference() {\n                cube([cage_width+wire_thickness*2, cage_depth+wire_thickness*2, wire_thickness*2], center=true);\n                cube([cage_width, cage_depth, wire_thickness*4], center=true);\n            }\n        }\n    }\n}\n\nmodule cage_wires() {\n    // Vertical wires\n    for(x=[-cage_width/2+wire_thickness:5:cage_width/2-wire_thickness]) {\n        translate([x, 0, base_height/2 + stand_height + cage_height/2]) {\n            cube([wire_thickness, cage_depth, cage_height], center=true);\n        }\n    }\n    \n    // Horizontal wires\n    for(y=[-cage_depth/2+wire_thickness:5:cage_depth/2-wire_thickness]) {\n        translate([0, y, base_height/2 + stand_height + cage_height/2]) {\n            cube([cage_width, wire_thickness, cage_height], center=true);\n        }\n    }\n}\n\nmodule door() {\n    // Door frame\n    translate([cage_width/2+wire_thickness, 0, base_height/2 + stand_height + door_height/2]) {\n        difference() {\n            cube([wire_thickness*2, door_width+wire_thickness*2, door_height+wire_thickness*2], center=true);\n            cube([wire_thickness*2+1, door_width, door_height], center=true);\n        }\n        \n        // Door handle\n        translate([wire_thickness+2, 0, door_height/2-5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=8, r=2);\n            }\n        }\n    }\n}\n\nmodule perch() {\n    // Perching rod\n    translate([0, 0, base_height/2 + stand_height + cage_height/3]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=cage_width-10, r=3);\n        }\n    }\n    \n    // Perch supports\n    for(side=[-1,1]) {\n        translate([side*(cage_width/2-5), 0, base_height/2 + stand_height + cage_height/3]) {\n            sphere(r=4);\n        }\n    }\n}\n\nmodule feeder() {\n    // Food bowl\n    translate([0, -cage_depth/3, base_height/2 + stand_height + cage_height/4]) {\n        difference() {\n            cylinder(h=8, r=12);\n            translate([0, 0, -1])\n                cylinder(h=10, r=10);\n        }\n        \n        // Bowl rim\n        translate([0, 0, 8])\n            cylinder(h=2, r=13);\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    \n    translate([0, 0, base_height/2]) {\n        stand();\n    }\n    \n    cage_frame();\n    cage_wires();\n    door();\n    perch();\n    feeder();\n}",
    "renders": true
  },
  {
    "natural_object": "cageball",
    "openscad_code": "// Cageball Chair - Realistic Medium Complexity\n// A spherical chair frame with cage-like structure\n\n// Parameters\nball_diameter = 120;\nthickness = 2;\nstrut_diameter = 6;\nseat_height = 40;\nleg_diameter = 8;\n\n// Main module\nmodule cageball_chair() {\n    // Outer cage sphere with holes\n    difference() {\n        // Main sphere\n        sphere(d = ball_diameter);\n        \n        // Create cage pattern with longitude cuts\n        for (i = [0:30:150]) {\n            rotate([0, i, 0]) {\n                translate([0, 0, -ball_diameter/2]) \n                    cube([ball_diameter, strut_diameter*2, ball_diameter], center = true);\n            }\n        }\n        \n        // Latitude cuts\n        for (i = [0:30:180]) {\n            rotate([i, 0, 0]) {\n                translate([0, 0, -ball_diameter/2]) \n                    cube([ball_diameter, ball_diameter, strut_diameter*2], center = true);\n            }\n        }\n    }\n    \n    // Seat ring structure\n    difference() {\n        translate([0, 0, seat_height - ball_diameter/2 + thickness]) {\n            cylinder(h = thickness*2, d = ball_diameter * 0.6, center = true);\n            cylinder(h = thickness*3, d = ball_diameter * 0.5, center = true);\n        }\n    }\n    \n    // Support struts\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, -ball_diameter/2 + leg_diameter]) {\n                cylinder(h = ball_diameter/2 - seat_height + leg_diameter, d = strut_diameter);\n            }\n        }\n    }\n    \n    // Leg base\n    difference() {\n        cylinder(h = leg_diameter, d = ball_diameter * 0.8);\n        translate([0, 0, -1]) \n            cylinder(h = leg_diameter + 2, d = ball_diameter * 0.6);\n    }\n    \n    // Back support bars\n    for (i = [-40:20:40]) {\n        rotate([i, 0, 0]) {\n            translate([0, 0, -ball_diameter/2 + thickness]) {\n                cylinder(h = ball_diameter * 0.7, d = strut_diameter);\n            }\n        }\n    }\n    \n    // Armrest rings\n    for (height = [seat_height + 20, seat_height + 40]) {\n        translate([0, 0, height - ball_diameter/2]) {\n            rotate_extrude(angle = 360, $fn = 32) {\n                translate([ball_diameter * 0.3, 0, 0]) \n                    circle(d = strut_diameter);\n            }\n        }\n    }\n    \n    // Base reinforcement ring\n    translate([0, 0, -ball_diameter/2 + leg_diameter/2]) {\n        cylinder(h = leg_diameter, d = ball_diameter * 0.4);\n    }\n    \n    // Decorative corner brackets\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * ball_diameter * 0.25, y * ball_diameter * 0.25, -ball_diameter/2 + leg_diameter]) {\n                cube([strut_diameter * 2, strut_diameter * 2, leg_diameter * 0.8], center = true);\n            }\n        }\n    }\n}\n\n// Render the chair\ncageball_chair();",
    "renders": true
  },
  {
    "natural_object": "goalpost",
    "openscad_code": "// Goalpost Bookshelf / Coat Rack\n// Realistic style, medium complexity\n// Overall size: 100mm W x 50mm D x 120mm H\n\n$fn = 32;\n\n// Main dimensions\npost_diam = 6;\ncrossbar_diam = 4;\nbase_width = 100;\nbase_depth = 50;\nheight = 120;\nwall_th = 2;\n\n// Main module\nmodule goalpost_furniture() {\n    // Base platform\n    translate([0, 0, 2]) \n        cube([base_width, base_depth, 4], center=true);\n    \n    // Left post with shelves\n    translate([-base_width/2 + 10, 0, 4]) {\n        cylinder(h=height, r=post_diam, center=false);\n        \n        // Three shelves on left post\n        for(i=[1:3]) {\n            translate([0, 0, i*25 + 10])\n                rotate([0, 90, 0])\n                    cube([20, wall_th*2, post_diam*2.5], center=true);\n        }\n        \n        // Coat hooks\n        translate([post_diam + 2, 0, 80])\n            rotate([0, 0, -30])\n                difference() {\n                    cube([8, 2, 2], center=true);\n                    translate([4, 0, 0])\n                        sphere(r=1.5);\n                }\n    }\n    \n    // Right post with shelves\n    translate([base_width/2 - 10, 0, 4]) {\n        cylinder(h=height, r=post_diam, center=false);\n        \n        // Three shelves on right post\n        for(i=[1:3]) {\n            translate([0, 0, i*25 + 10])\n                rotate([0, 90, 0])\n                    cube([20, wall_th*2, post_diam*2.5], center=true);\n        }\n        \n        // Coat hooks\n        translate([-post_diam - 2, 0, 80])\n            rotate([0, 0, 30])\n                difference() {\n                    cube([8, 2, 2], center=true);\n                    translate([-4, 0, 0])\n                        sphere(r=1.5);\n                }\n    }\n    \n    // Crossbar\n    translate([0, 0, height]) {\n        rotate([90, 0, 0])\n            cylinder(h=base_width - 20, r=crossbar_diam, center=true);\n    }\n    \n    // Back support beams\n    translate([0, base_depth/2 - 5, height/2]) {\n        rotate([90, 0, 0])\n            cube([base_width - 20, wall_th, height - 8], center=true);\n    }\n    \n    // Bottom shelf spanning between posts\n    translate([0, 0, 15])\n        cube([base_width - 20, base_depth - 10, wall_th*1.5], center=true);\n    \n    // Side reinforcements\n    for(side=[-1, 1]) {\n        translate([side * (base_width/2 - 15), 0, 30]) {\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=base_depth - 10, r=post_diam/2, center=true);\n                    translate([0, 0, -base_depth/2 + 5])\n                        cube([post_diam, base_depth, post_diam], center=true);\n                }\n        }\n    }\n}\n\n// Generate the model\ngoalpost_furniture();",
    "renders": true
  },
  {
    "natural_object": "backboard",
    "openscad_code": "// Backboard for a small dresser or bookshelf - 3D printable\n// Overall dimensions: 80mm wide x 50mm high x 8mm deep\n\n// Parameters\nwall_thickness = 2;           // 3D printable wall thickness\nwidth = 80;                   // Overall width\nheight = 50;                  // Overall height\ndepth = 8;                    // Overall depth\npeg_diameter = 3;             // Dowel peg holes\npeg_depth = 4;                // Peg hole depth\nnum_pegs = 3;                 // Number of pegs per side\n\n// Main backboard panel\nmodule backboard_panel() {\n    difference() {\n        // Main rectangular panel\n        cube([width, height, depth], center=false);\n        \n        // Vertical slots for ventilation and weight reduction\n        for (i = [1:3]) {\n            translate([width/4 * i, 5, -1])\n                cube([wall_thickness, height-10, depth+2]);\n        }\n        \n        // Keyhole slots for wall mounting - centered\n        translate([width/2 - 5, height/2 - 3, depth-1])\n            union() {\n                cylinder(h=depth+1, d=5, $fn=20);\n                translate([-2.5, 2.5, 0])\n                    cube([5, 3, depth+1]);\n            }\n        \n        // Mirror keyhole on other side\n        translate([width/2 + 5, height/2 - 3, depth-1])\n            union() {\n                cylinder(h=depth+1, d=5, $fn=20);\n                translate([-2.5, 2.5, 0])\n                    cube([5, 3, depth+1]);\n            }\n    }\n}\n\n// Reinforcement ribs on back side\nmodule reinforcement_ribs() {\n    translate([0, 0, 0]) {\n        // Horizontal top rib\n        translate([wall_thickness, height-wall_thickness, depth-wall_thickness])\n            cube([width-2*wall_thickness, wall_thickness, wall_thickness]);\n        \n        // Horizontal bottom rib\n        translate([wall_thickness, 0, depth-wall_thickness])\n            cube([width-2*wall_thickness, wall_thickness, wall_thickness]);\n        \n        // Vertical center rib\n        translate([width/2-wall_thickness/2, wall_thickness, depth-wall_thickness])\n            cube([wall_thickness, height-2*wall_thickness, wall_thickness]);\n    }\n}\n\n// Dowel peg holes for shelf support\nmodule peg_holes() {\n    // Left side peg holes\n    for (i = [0:num_pegs-1]) {\n        pos_y = (height/(num_pegs+1)) * (i+1);\n        translate([wall_thickness*2, pos_y, depth-peg_depth])\n            rotate([0, 90, 0])\n                cylinder(h=peg_depth+1, d=peg_diameter, $fn=20);\n    }\n    \n    // Right side peg holes\n    for (i = [0:num_pegs-1]) {\n        pos_y = (height/(num_pegs+1)) * (i+1);\n        translate([width-wall_thickness*2, pos_y, depth-peg_depth])\n            rotate([0, 90, 0])\n                cylinder(h=peg_depth+1, d=peg_diameter, $fn=20);\n    }\n}\n\n// Chamfers on edges for better appearance and printability\nmodule edge_chamfers() {\n    // Top front edge chamfer\n    translate([0, height-wall_thickness, 0])\n        cube([width, wall_thickness, wall_thickness]);\n    \n    // Bottom front edge chamfer\n    translate([0, 0, 0])\n        cube([width, wall_thickness, wall_thickness]);\n}\n\n// Assembly\nunion() {\n    // Main backboard\n    backboard_panel();\n    \n    // Add reinforcement ribs\n    reinforcement_ribs();\n    \n    // Add peg holes\n    peg_holes();\n    \n    // Add edge chamfers\n    edge_chamfers();\n}",
    "renders": true
  },
  {
    "natural_object": "rim",
    "openscad_code": "// Realistic Rim for Furniture Leg – printable, 50 mm Ø, 2 mm walls\n// Overall height 30 mm, fits a 40 mm Ø leg socket\n\n$fn = 36;          // smooth curves\nwall = 2;          // printable wall thickness\nouter_d = 50;      // outer diameter\ninner_d = 40;      // socket diameter\nh = 30;            // total height\nscrew_d = 4;       // screw hole diameter\nscrew_h = 8;       // screw boss height\nboss_clear = 1;    // clearance around boss\n\n// Main rim ring\ndifference() {\n    cylinder(h = h, d = outer_d);                    // outer cylinder\n    translate([0, 0, -0.1])\n        cylinder(h = h + 0.2, d = inner_d);          // hollow centre\n}\n\n// Upper decorative bevel\ndifference() {\n    translate([0, 0, h - 5])\n        cylinder(h = 5, d1 = outer_d, d2 = outer_d - 4);\n    translate([0, 0, h - 5 - 0.1])\n        cylinder(h = 5 + 0.2, d = inner_d);\n}\n\n// Lower decorative bevel\ndifference() {\n    translate([0, 0, 0])\n        cylinder(h = 5, d1 = outer_d - 4, d2 = outer_d);\n    translate([0, 0, -0.1])\n        cylinder(h = 5 + 0.2, d = inner_d);\n}\n\n// Create screw bosses and holes\nfor (a = [0:120:359]) {\n    rotate([0, 0, a])\n    translate([(outer_d + inner_d) / 4, 0, h / 2])\n    difference() {\n        union() {\n            // Boss cylinder\n            cylinder(h = screw_h, d = screw_d + 2 * wall);\n            // Gusset for strength\n            rotate([90, 0, 0])\n                cube([wall * 2, wall, screw_h], center = true);\n        }\n        // Screw hole\n        cylinder(h = screw_h + 0.2, d = screw_d);\n        // Clearance around boss for printability\n        translate([0, 0, -boss_clear])\n            cylinder(h = screw_h + 2 * boss_clear,\n                     d = screw_d + 2 * wall + 2 * boss_clear);\n    }\n}\n\n// Ribs for structural strength\nmodule rib() {\n    difference() {\n        translate([0, 0, h / 2])\n            cube([(outer_d - inner_d) / 2 - wall, wall * 1.5, h * 0.8],\n                 center = true);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, d = inner_d);\n    }\n}\n\nfor (a = [30:60:359])\n    rotate([0, 0, a])\n        rib();",
    "renders": true
  },
  {
    "natural_object": "basket",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Basket Furniture\n// Overall outer size ≈ 120 mm × 90 mm × 75 mm\n// Wall thickness ≈ 2 mm for easy FDM printing\n\n// Parameters\nwall = 2;\nbase_w = 120;\nbase_d = 90;\nbase_h = 75;\nhandle_r = 4;\n\n// Main module\nmodule basket() {\n    difference() {\n        // Solid outer shell\n        rounded_box(base_w, base_d, base_h, 6);\n\n        // Hollow cavity\n        translate([0, 0, wall])\n            rounded_box(base_w - 2*wall, base_d - 2*wall, base_h, 4);\n    }\n\n    // Floor slats\n    slats();\n\n    // Side weave pattern\n    weave();\n\n    // Handles\n    translate([0, base_d/2 - handle_r, base_h/2])\n        rotate([90,0,0])\n            cylinder(r=handle_r, h=base_w/2 - 10, $fn=32);\n    translate([0, -(base_d/2 - handle_r), base_h/2])\n        rotate([90,0,0])\n            cylinder(r=handle_r, h=base_w/2 - 10, $fn=32);\n}\n\n// Rounded box primitive\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(w/2 - r), dy*(d/2 - r), dz*(h/2 - r)])\n                sphere(r=r, $fn=16);\n    }\n}\n\n// Floor slats\nmodule slats() {\n    slat_w = 6;\n    gap = 3;\n    n = floor((base_d - 2*wall) / (slat_w + gap));\n    for(i=[0:n-1]) {\n        y = -base_d/2 + wall + slat_w/2 + i*(slat_w + gap);\n        translate([0, y, wall/2])\n            cube([base_w - 2*wall, slat_w, wall], center=true);\n    }\n}\n\n// Side weave pattern (raised bands)\nmodule weave() {\n    band_w = 4;\n    band_h = 1.5;\n    spacing = 12;\n\n    // Vertical bands on long sides\n    for(x=[-base_w/2 + spacing : spacing : base_w/2 - spacing]) {\n        translate([x, 0, base_h/2])\n            cube([band_w, base_d, band_h], center=true);\n    }\n\n    // Horizontal bands on short sides\n    for(y=[-base_d/2 + spacing : spacing : base_d/2 - spacing]) {\n        translate([0, y, base_h/2])\n            cube([base_w, band_w, band_h], center=true);\n    }\n}\n\n// Render the basket\nbasket();",
    "renders": true
  },
  {
    "natural_object": "tee",
    "openscad_code": "// Realistic T-Shaped Side Table (Tee Furniture)\n// Overall dimensions: 100mm(W) x 100mm(D) x 120mm(H)\n\n$fn = 32;\n\n// Main table top - T shape\nmodule table_top() {\n    // Horizontal part of T\n    translate([-50, -10, 110]) \n        cube([100, 20, 8]);\n    \n    // Vertical part of T\n    translate([-10, -50, 110]) \n        cube([20, 100, 8]);\n    \n    // Rounded edges on top surface\n    for(x = [-45, 45]) {\n        translate([x, 0, 118]) \n            cylinder(h=2, r=10);\n    }\n    for(y = [-45, 45]) {\n        translate([0, y, 118]) \n            cylinder(h=2, r=10);\n    }\n}\n\n// Leg structure - 4 legs with stretchers\nmodule legs() {\n    // Define leg positions at corners of T shape\n    positions = [\n        [-40, -40],  // front left\n        [40, -40],   // front right  \n        [-40, 40],   // back left\n        [40, 40]     // back right\n    ];\n    \n    // Create each leg\n    for(pos = positions) {\n        translate([pos[0], pos[1], 0]) {\n            // Main leg post\n            cylinder(h=110, r=4);\n            \n            // Tapered bottom\n            translate([0, 0, 0]) \n                cylinder(h=5, r1=4, r2=3);\n            \n            // Top joint detail\n            translate([0, 0, 105]) \n                cylinder(h=5, r=5);\n        }\n    }\n    \n    // Lower stretchers between legs\n    stretcher_height = 25;\n    // Front\n    translate([-40, -40, stretcher_height]) \n        rotate([90, 0, 0]) \n            cylinder(h=80, r=2);\n    // Back\n    translate([-40, 40, stretcher_height]) \n        rotate([90, 0, 0]) \n            cylinder(h=80, r=2);\n    // Left\n    translate([-40, -40, stretcher_height]) \n        rotate([0, 90, 0]) \n            cylinder(h=80, r=2);\n    // Right\n    translate([40, -40, stretcher_height]) \n        rotate([0, 90, 0]) \n            cylinder(h=80, r=2);\n}\n\n// Middle shelf for stability\nmodule middle_shelf() {\n    // T-shaped shelf at mid-height\n    shelf_height = 55;\n    \n    // Horizontal bar\n    translate([-35, -5, shelf_height]) \n        cube([70, 10, 3]);\n    \n    // Vertical bar\n    translate([-5, -35, shelf_height]) \n        cube([10, 70, 3]);\n    \n    // Support brackets\n    bracket_positions = [\n        [-30, -30], [30, -30], [-30, 30], [30, 30]\n    ];\n    \n    for(pos = bracket_positions) {\n        translate([pos[0], pos[1], shelf_height - 5]) {\n            rotate([0, 45, 0]) \n                cube([3, 3, 8]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    table_top();\n    legs();\n    middle_shelf();\n}",
    "renders": true
  },
  {
    "natural_object": "base",
    "openscad_code": "// Realistic medium-complexity 3D-printable furniture base\n// A small side-table base with legs, apron and stretchers\n\n// Global parameters\nwall = 2;           // 2 mm wall thickness for 3D printing\nscaleFactor = 1;    // Adjust overall size; ~120 mm tall when 1\n\n// Overall dimensions (mm)\ntopW   = 90 * scaleFactor;\ntopD   = 90 * scaleFactor;\nlegH   = 110 * scaleFactor;\nlegSz  = 20 * scaleFactor;\napronH = 40 * scaleFactor;\nstretchD = 15 * scaleFactor;\n\n// Leg profile (tapered rectangle)\nmodule taperedLeg(h, base, top) {\n    linear_extrude(height = h, scale = top / base)\n        square(base, center = true);\n}\n\n// Single leg with mortise recess (for apron tenon)\nmodule leg() {\n    difference() {\n        union() {\n            // Main leg\n            translate([0, 0, legH/2])\n                cube([legSz, legSz, legH], center = true);\n\n            // Chamfered foot detail\n            translate([0, 0, -0.5])\n                cylinder(h = 6, r1 = legSz/2 - 1, r2 = legSz/2 + 1, $fn = 32);\n        }\n\n        // Tenon mortise (apron joint)\n        translate([0, 0, legH - apronH/2])\n            cube([legSz + 1, wall + 1, apronH], center = true);\n    }\n}\n\n// Apron rail with integral tenon\nmodule apron(len, axis) {\n    tenonL = 8;\n    rotate([0, 0, axis ? 0 : 90])\n    difference() {\n        union() {\n            // Main rail\n            translate([0, 0, apronH/2])\n                cube([len - legSz*2 + tenonL*2, wall, apronH], center = true);\n            // Tenons\n            translate([(len - legSz*2)/2 + tenonL/2, 0, apronH/2])\n                cube([tenonL, wall, apronH], center = true);\n            mirror([1,0,0])\n                translate([(len - legSz*2)/2 + tenonL/2, 0, apronH/2])\n                    cube([tenonL, wall, apronH], center = true);\n        }\n        // Lightening cutout\n        translate([0, 0, apronH/2])\n            cube([len - legSz*2 - 10, wall + 1, apronH - 8], center = true);\n    }\n}\n\n// Lower X-stretcher system\nmodule stretcher(len) {\n    offset = 4;\n    h = legH - apronH - stretchD/2 - offset;\n    rotate([90,0,45])\n        cube([len*1.41 - legSz, wall, stretchD], center = true);\n}\n\n// Assemble complete base\nmodule base() {\n    // Four legs\n    for(x = [-1,1])\n        for(y = [-1,1])\n            translate([x*(topW - legSz)/2, y*(topD - legSz)/2, 0])\n                leg();\n\n    // Apron rails\n    translate([0, (topD - legSz)/2, legH - apronH/2])\n        apron(topW, 0);\n    translate([0, -(topD - legSz)/2, legH - apronH/2])\n        apron(topW, 0);\n    translate([(topW - legSz)/2, 0, legH - apronH/2])\n        apron(topD, 1);\n    translate([-(topW - legSz)/2, 0, legH - apronH/2])\n        apron(topD, 1);\n\n    // Lower stretchers in X\n    stretcher(topW);\n    mirror([1,0,0]) stretcher(topW);\n}\n\n// Render\nbase();",
    "renders": true
  },
  {
    "natural_object": "mound",
    "openscad_code": "// Mound Furniture - Organic Grass Covered Seating Module\n// Realistic style, medium complexity, 3D printable\n\n$fa = 2; $fs = 0.5;  // Smooth curves\n\nmodule mound_base() {\n    // Main mound body - elliptical dome with flattened top\n    scale([1.2, 1, 0.7]) \n    sphere(d=100);\n}\n\nmodule grass_texture() {\n    // Generate grass blades across surface\n    for(i=[0:15:360]) {\n        for(j=[5:5:40]) {\n            rotate([0, j, i])\n            translate([0, 0, 50*sin(j) + 2])\n                cylinder(h=3+2*(noise(i+j*0.1)), d=1.5, $fn=6);\n        }\n    }\n}\n\nmodule seating_area() {\n    // Flattened top area for sitting\n    difference() {\n        cube([80, 60, 20], center=true);\n        translate([0, 0, -10])\n            cube([78, 58, 20], center=true);\n    }\n}\n\nmodule support_frame() {\n    // Internal support structure\n    difference() {\n        // Outer frame\n        cylinder(h=45, d=30, center=true, $fn=8);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h=50, d=26, center=true, $fn=8);\n    }\n}\n\nmodule drainage_holes() {\n    // Water drainage system\n    for(angle=[0:120:360]) {\n        rotate([0, 0, angle])\n        translate([38, 0, -20])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=3);\n    }\n}\n\nmodule reinforcement_rings() {\n    // Structural rings for stability\n    for(h=[-15, 0, 15, 30]) {\n        translate([0, 0, h])\n            difference() {\n                cylinder(h=3, d=95, center=true);\n                cylinder(h=3.5, d=91, center=true);\n            }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Base mound\n        mound_base();\n        \n        // Add seating area\n        translate([0, 0, 45])\n            seating_area();\n        \n        // Support structure\n        translate([0, 0, 15])\n            support_frame();\n        \n        // Reinforcement\n        reinforcement_rings();\n    }\n    \n    // Remove bottom for printing\n    translate([0, 0, -25])\n        cube([150, 150, 50], center=true);\n    \n    // Drainage holes\n    drainage_holes();\n}\n\n// Add grass texture on top surface\ntranslate([0, 0, 48])\n    grass_texture();",
    "renders": true
  },
  {
    "natural_object": "pitch",
    "openscad_code": "// Pitch Furniture - Realistic Style, Medium Complexity\n// A portable wooden pitch table with folding legs and integrated cup holders\n\n$fn = 24;  // Smooth curves for 3D printing\n\n// Overall dimensions (mm)\ntable_top_width = 120;\ntable_top_depth = 80;\ntable_top_thickness = 8;\nleg_length = 70;\nleg_thickness = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main table top with rounded edges\nmodule table_top() {\n    difference() {\n        // Main top surface with rounded edges\n        minkowski() {\n            cube([table_top_width, table_top_depth, table_top_thickness - 2]);\n            cylinder(r=2, h=0.1);\n        }\n        \n        // Cup holder cutouts (2 holders)\n        translate([25, 20, -1]) \n            cylinder(r=15, h=table_top_thickness + 2);\n        translate([95, 20, -1]) \n            cylinder(r=15, h=table_top_thickness + 2);\n            \n        // Central groove for cards\n        translate([table_top_width/2, table_top_depth/2, table_top_thickness/2])\n            cube([table_top_width - 40, 5, table_top_thickness + 1], center=true);\n    }\n}\n\n// Folding leg mechanism\nmodule folding_leg(x_pos, y_pos) {\n    // Leg support block\n    translate([x_pos, y_pos, 0]) {\n        difference() {\n            cube([leg_thickness + 4, leg_thickness + 4, 10]);\n            // Hinge pin hole\n            translate([leg_thickness/2 + 2, leg_thickness/2 + 2, 5])\n                rotate([90, 0, 0])\n                    cylinder(r=1.5, h=leg_thickness + 4, center=true);\n        }\n        \n        // Actual leg\n        translate([leg_thickness/2 + 2, leg_thickness/2 + 2, 5])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([leg_length, leg_thickness, leg_thickness]);\n                    // Weight reduction holes\n                    for(i = [1:3]) {\n                        translate([i * 15, leg_thickness/2, leg_thickness/2])\n                            cylinder(r=2, h=leg_thickness);\n                    }\n                }\n    }\n}\n\n// Support braces between legs\nmodule support_brace() {\n    // Front brace\n    translate([table_top_width/2, leg_thickness + 4, -leg_length + 5])\n        cube([table_top_width - 20, wall_thickness, wall_thickness]);\n    \n    // Side braces\n    rotate([0, 0, 90])\n        translate([table_top_depth/2, -leg_thickness - 4, -leg_length + 5])\n            cube([table_top_depth - 20, wall_thickness, wall_thickness]);\n}\n\n// Textured surface pattern\nmodule wood_texture() {\n    for(x = [5:5:table_top_width - 5]) {\n        for(y = [5:5:table_top_depth - 5]) {\n            translate([x, y, table_top_thickness - 0.2])\n                cube([0.5, 0.5, 0.2]);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_length])\n    table_top();\n\n// Four legs\nfolding_leg(5, 5);\nfolding_leg(table_top_width - 11, 5);\nfolding_leg(5, table_top_depth - 11);\nfolding_leg(table_top_width - 11, table_top_depth - 11);\n\n// Structural supports\nsupport_brace();\n\n// Surface details\ntranslate([0, 0, leg_length])\n    wood_texture();\n\n// Handle cutout for carrying\ntranslate([table_top_width/2 - 15, table_top_depth - 10, leg_length + table_top_thickness - 5])\n    cube([30, 5, 10]);",
    "renders": true
  },
  {
    "natural_object": "rink",
    "openscad_code": "// Realistic Rink Bench (medium complexity)\n// Dimensions: 120mm (L) x 50mm (W) x 35mm (H)\n// 3D printable with 2mm wall thickness throughout\n\nmodule bench() {\n    // Bench seat - 2mm thick top surface\n    difference() {\n        translate([0, 0, 32]) cube([120, 50, 4], center=true);\n        translate([0, 0, 34]) cube([116, 46, 4.2], center=true);\n    }\n    \n    // Bench legs - four posts with rounded edges\n    for(x=[-52, 52]) {\n        for(y=[-20, 20]) {\n            // Main leg post\n            translate([x, y, 16]) cylinder(h=32, r=3, $fn=16);\n            \n            // Leg base cap\n            translate([x, y, 0]) cylinder(h=2, r=4, $fn=16);\n            \n            // Leg top cap\n            translate([x, y, 32]) cylinder(h=2, r=4, $fn=16);\n        }\n    }\n    \n    // Side support rails\n    for(side=[-1, 1]) {\n        translate([0, side*22, 16]) \n            rotate([90, 0, 0]) \n                cylinder(h=104, r=2, $fn=12);\n    }\n    \n    // Back support rail\n    translate([0, -22, 28]) \n        rotate([0, 90, 0]) \n            cylinder(h=44, r=2, $fn=12);\n    \n    // Skate rack underneath\n    for(i=[-40, -20, 0, 20, 40]) {\n        translate([i, 0, 18]) {\n            // Rack support\n            cube([2, 46, 4], center=true);\n            \n            // Rack end caps\n            translate([0, 23, 0]) sphere(r=1.5, $fn=8);\n            translate([0, -23, 0]) sphere(r=1.5, $fn=8);\n        }\n    }\n    \n    // Bench backrest supports\n    for(x=[-40, -20, 0, 20, 40]) {\n        // Vertical support\n        translate([x, 22, 24]) cylinder(h=20, r=2, $fn=12);\n        \n        // Support brace\n        translate([x, 22, 32]) rotate([45, 0, 0]) \n            cube([2, 12, 2], center=true);\n    }\n    \n    // Backrest slats\n    for(y=[26, 30, 34]) {\n        difference() {\n            translate([0, y, 34]) cube([110, 2, 8], center=true);\n            translate([0, y, 34]) cube([106, 2.2, 8.2], center=true);\n        }\n    }\n    \n    // Ground contact pads\n    for(x=[-52, 52]) {\n        for(y=[-20, 20]) {\n            translate([x, y, -1]) \n                cylinder(h=2, r=5, $fn=16);\n        }\n    }\n}\n\n// Render the bench\nbench();",
    "renders": true
  },
  {
    "natural_object": "court",
    "openscad_code": "// Tennis Court with Net, Posts, Bench and Scoreboard\n// Overall size: 120x110x20 mm\n\nmodule court_base() {\n    // Main court surface\n    difference() {\n        cube([120, 110, 2], center=true);  // 2mm thick base\n        \n        // Inner court lines area\n        translate([0, 0, 1])\n        cube([108, 78, 2], center=true);\n    }\n}\n\nmodule court_lines() {\n    // White court lines (raised 0.5mm)\n    color(\"white\")\n    union() {\n        // Outer boundary lines\n        translate([0, 0, 1.2])\n        cube([114, 84, 0.5], center=true);\n        \n        // Center service line\n        translate([0, 0, 1.2])\n        cube([4, 78, 0.5], center=true);\n        \n        // Service boxes\n        for(side = [-1, 1]) {\n            translate([side * 21, 0, 1.2])\n            cube([42, 78, 0.5], center=true);\n        }\n    }\n}\n\nmodule net_post(x_pos) {\n    // Net posts with realistic proportions\n    translate([x_pos, 0, 0]) {\n        // Post base\n        cube([6, 6, 3], center=true);\n        \n        // Post pole\n        translate([0, 0, 11])\n        cylinder(h=20, d=3, center=true);\n        \n        // Post cap\n        translate([0, 0, 21])\n        sphere(d=4);\n    }\n}\n\nmodule net_mesh() {\n    // Net mesh between posts\n    color(\"white\", 0.8)\n    difference() {\n        // Main net body\n        translate([0, 0, 11])\n        cube([84, 0.5, 18], center=true);\n        \n        // Net holes pattern\n        for(i = [-40:5:40]) {\n            for(j = [-8:3:8]) {\n                translate([i, j, 11])\n                cube([3, 0.7, 3], center=true);\n            }\n        }\n    }\n}\n\nmodule bench(x_pos, y_pos) {\n    translate([x_pos, y_pos, 1]) {\n        // Bench seat\n        cube([30, 8, 2], center=true);\n        \n        // Bench legs\n        for(x = [-12, 12]) {\n            for(y = [-3, 3]) {\n                translate([x, y, -3])\n                cube([2, 2, 6], center=true);\n            }\n        }\n        \n        // Bench backrest\n        translate([0, -5, 4])\n        cube([30, 2, 6], center=true);\n    }\n}\n\nmodule scoreboard() {\n    translate([0, 50, 10]) {\n        // Scoreboard post\n        cylinder(h=20, d=4, center=true);\n        \n        // Scoreboard panel\n        translate([0, 0, 10])\n        cube([20, 2, 12], center=true);\n        \n        // Score numbers (simplified)\n        for(pos = [-6, 6]) {\n            translate([pos, 1, 10])\n            cube([2, 0.5, 4], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    court_base();\n    court_lines();\n    \n    net_post(-42);\n    net_post(42);\n    net_mesh();\n    \n    bench(-45, -30);\n    bench(45, -30);\n    \n    scoreboard();\n}",
    "renders": true
  },
  {
    "natural_object": "field",
    "openscad_code": "// Field Bench with wooden slats and metal frame\n// Realistic style, medium complexity, 3D-printable\n\nmodule bench_leg(width, height, depth) {\n    // Main leg post (2mm wall)\n    difference() {\n        cube([width, depth, height], center=true);\n        translate([0, 0, 2])\n            cube([width-4, depth-4, height-4], center=true);\n    }\n    // Foot plate\n    translate([0, 0, -height/2-2])\n        cube([width+6, depth+6, 4], center=true);\n}\n\nmodule bench_slats(count, length, width, thick, gap) {\n    // Wooden slats across bench\n    for (i = [0:count-1]) {\n        translate([(i*(thick+gap))-((count*(thick+gap))/2)+thick/2, 0, 0])\n            cube([thick, width, length], center=true);\n    }\n}\n\nmodule bench_support(length, width, height) {\n    // Horizontal support beam\n    difference() {\n        cube([length, width, height], center=true);\n        translate([0, 0, 2])\n            cube([length-4, width-4, height-4], center=true);\n    }\n}\n\nmodule bench_back(count, length, width, thick, gap) {\n    // Backrest slats\n    for (i = [0:count-1]) {\n        translate([(i*(thick+gap))-((count*(thick+gap))/2)+thick/2, 0, 20])\n            rotate([10, 0, 0])\n                cube([thick, width, length], center=true);\n    }\n}\n\n// Overall bench dimensions\nbench_length = 80;\nbench_width = 35;\nbench_height = 40;\n\n// Leg dimensions\nleg_width = 40;\nleg_depth = 35;\nleg_height = 38;\n\n// Slat dimensions\nslat_count = 7;\nslat_thick = 4;\nslat_gap = 2;\n\n// Assembly\nunion() {\n    // Left legs\n    translate([-bench_length/2+leg_width/2+5, 0, 0])\n        bench_leg(leg_width, leg_height, leg_depth);\n    translate([-bench_length/2+leg_width/2+5, 0, 0])\n        bench_support(leg_width, leg_depth-4, 6);\n    \n    // Right legs\n    translate([bench_length/2-leg_width/2-5, 0, 0])\n        bench_leg(leg_width, leg_height, leg_depth);\n    translate([bench_length/2-leg_width/2-5, 0, 0])\n        bench_support(leg_width, leg_depth-4, 6);\n    \n    // Front support beam\n    translate([0, 0, -leg_height/2+8])\n        rotate([0, 90, 0])\n            bench_support(bench_length-20, leg_width-10, 6);\n    \n    // Rear support beam\n    translate([0, leg_depth-20, -leg_height/2+8])\n        rotate([0, 90, 0])\n            bench_support(bench_length-20, leg_width-10, 6);\n    \n    // Seat slats\n    translate([0, 0, -leg_height/2+14])\n        rotate([0, 90, 0])\n            bench_slats(slat_count, bench_width-8, bench_length-20, slat_thick, slat_gap);\n    \n    // Backrest posts\n    translate([-bench_length/2+15, leg_depth/2-10, 0])\n        cylinder(h=45, r=3, center=true);\n    translate([bench_length/2-15, leg_depth/2-10, 0])\n        cylinder(h=45, r=3, center=true);\n    \n    // Backrest slats\n    translate([0, leg_depth/2-10, -leg_height/2+25])\n        rotate([0, 90, 0])\n            bench_back(slat_count-1, 30, bench_length-40, slat_thick, slat_gap);\n}",
    "renders": true
  },
  {
    "natural_object": "track",
    "openscad_code": "// 1:12 scale sectional track module with realistic sleeper/ rail detail\n// External footprint: 150 mm long x 100 mm wide x 12 mm thick printable slab\n// No over-hangs, 2 mm wall everywhere, ready for FDM printing\n\n$fn = 32; // smooth curves\n\n// ---- global dimensions ----\nmodule_len = 150;\nmodule_w   = 100;\nmodule_h   = 12;          // overall slab thickness\n\nrail_h      = 3.5;        // rail height above sleeper tops\nrail_w      = 2.2;        // rail head width\nrail_web_t  = 1.2;        // web thickness\nrail_base_w = 3.0;        // foot width\n\nsleeper_w   = 10;         // tie width\nsleeper_t   = 2.2;        // tie thickness (above slab)\nsleeper_gap = 18;         // centre-to-centre spacing\nsleeper_len = module_w;   // full width of module\n\nballast_h   = 1.8;        // crushed-stone layer height above slab\n\n// ---- main geometry ----\ndifference() {\n    union() {\n        // ---- base slab ----\n        translate([0,0,-module_h/2])\n            cube([module_len,module_w,module_h], center=true);\n\n        // ---- ballast mound ----\n        translate([0,0,-module_h/2+ballast_h/2])\n            cube([module_len,module_w,ballast_h], center=true);\n\n        // ---- sleepers (ties) ----\n        sleeper_positions = [ -60, -42, -24, -6, 12, 30, 48, 66 ];\n        for (x = sleeper_positions)\n            translate([x,0,ballast_h-sleeper_t/2-module_h/2])\n                cube([sleeper_t,sleeper_len,sleeper_t], center=true);\n\n        // ---- left rail ----\n        rail_path(-25);\n\n        // ---- right rail ----\n        rail_path(25);\n    }\n\n    // ---- clearance cut-outs for printing (avoid elephant foot) ----\n    // underside chamfer\n    translate([0,0,-module_h/2+0.5])\n        cube([module_len+2,module_w+2,module_h-1], center=true);\n}\n\n// ---- rail profile module ----\nmodule rail_path(offset_y) {\n    for (x = [-module_len/2+5 : sleeper_gap : module_len/2-5]) {\n        translate([x,offset_y,-module_h/2+ballast_h+sleeper_t])\n            linear_extrude(height = rail_h)\n                rail_profile();\n    }\n}\n\n// ---- realistic rail cross-section ----\nmodule rail_profile() {\n    difference() {\n        union() {\n            // head\n            square([rail_w,rail_h*0.4], center=true);\n            translate([0,-rail_h*0.2,0])\n                square([rail_web_t,rail_h*0.4], center=true);\n            // foot\n            translate([0,-rail_h*0.5,0])\n                square([rail_base_w,rail_h*0.2], center=true);\n        }\n        // relieve inside web for printing\n        translate([0,-rail_h*0.3,0])\n            square([rail_web_t+0.4,rail_h*0.25], center=true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "lane",
    "openscad_code": "// Lane Bowling Alley Furniture - 1:20 scale miniature\n// Realistic style, medium complexity, 3D print ready\n\n// Overall dimensions (mm)\nlength = 120;\nwidth = 30;\nheight = 8;\n\n// Wall thickness\nwall = 2;\n\n// Bowling lane surface\nmodule lane_surface() {\n    // Main wooden lane\n    difference() {\n        translate([0, 0, height/2])\n            cube([length, width, height], center=true);\n        \n        // Finger grooves for ball return\n        for(i = [0:2]) {\n            translate([length/2 - 20 - i*15, 0, height/2 - wall])\n                rotate([0, 0, 45])\n                    cube([10, 5, wall+1], center=true);\n        }\n    }\n    \n    // Lane markings\n    for(i = [0:4]) {\n        translate([length/2 - 50 + i*10, 0, height - 0.5])\n            color(\"white\")\n                cube([1, width*0.8, 0.5]);\n    }\n}\n\n// Pin deck\nmodule pin_deck() {\n    translate([length/2 - 5, 0, height])\n        cube([10, width*0.7, wall*2]);\n}\n\n// Ball return channel\nmodule ball_return() {\n    // Channel under the lane\n    difference() {\n        translate([length/2 - 30, 0, height/2 - wall])\n            cube([40, width*0.6, height/2], center=true);\n        \n        // Hollow channel\n        translate([length/2 - 30, 0, height/2 - wall])\n            cube([40 - wall*2, width*0.6 - wall*2, height/2 - wall], center=true);\n    }\n    \n    // Return ramp\n    translate([length/2 - 40, 0, height/2 - wall])\n        rotate([30, 0, 0])\n            cube([20, width*0.5, wall], center=true);\n}\n\n// Approach dots\nmodule approach_dots() {\n    for(i = [0:6]) {\n        for(j = [0:2]) {\n            translate([length/2 - 50 - i*5, -width/4 + j*width/2, height - 0.2])\n                color(\"black\")\n                    cylinder(h=0.2, d=1.5, $fn=12);\n        }\n    }\n}\n\n// Gutter guards\nmodule gutter_guards() {\n    for(side = [-1, 1]) {\n        translate([0, side*width/2, height/2])\n            cube([length, wall, height], center=true);\n    }\n}\n\n// Lane legs/supports\nmodule lane_supports() {\n    for(i = [0:2]) {\n        translate([-length/2 + 20 + i*40, 0, height/2 - wall - 2])\n            cube([wall*2, width*0.8, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    lane_surface();\n    pin_deck();\n    ball_return();\n    approach_dots();\n    gutter_guards();\n    lane_supports();\n}",
    "renders": true
  },
  {
    "natural_object": "pool",
    "openscad_code": "// Pool chair - realistic style, medium complexity\n// Dimensions: 120 x 60 x 85 mm (L x W x H)\n\nmodule pool_chair() {\n    // Frame thickness\n    frame_t = 2;\n    \n    // Seat dimensions\n    seat_w = 60;\n    seat_d = 50;\n    seat_h = 40;\n    \n    // Backrest dimensions\n    back_h = 45;\n    back_angle = 15;\n    \n    // Leg height\n    leg_h = 38;\n    \n    // Armrest height\n    arm_h = 20;\n    \n    // Seat slats\n    slat_w = 4;\n    slat_gap = 3;\n    num_slats = floor(seat_d / (slat_w + slat_gap));\n    \n    // Backrest slats\n    back_slats = 8;\n    \n    // Frame structure\n    union() {\n        // Left frame\n        translate([-seat_w/2 + frame_t, 0, 0])\n            cube([frame_t, seat_d, seat_h + leg_h]);\n        \n        // Right frame\n        translate([seat_w/2 - frame_t, 0, 0])\n            cube([frame_t, seat_d, seat_h + leg_h]);\n        \n        // Front frame\n        translate([-seat_w/2 + frame_t, -seat_d/2 + frame_t, 0])\n            cube([seat_w - 2*frame_t, frame_t, leg_h]);\n        \n        // Back frame\n        translate([-seat_w/2 + frame_t, seat_d/2 - frame_t, 0])\n            cube([seat_w - 2*frame_t, frame_t, leg_h + seat_h]);\n        \n        // Seat support bars\n        for(i = [1:3]) {\n            translate([-seat_w/2 + frame_t, -seat_d/2 + i*(seat_d/4), leg_h])\n                cube([seat_w - 2*frame_t, frame_t, frame_t]);\n        }\n        \n        // Back support bar\n        rotate([back_angle, 0, 0])\n            translate([0, seat_d/2, leg_h + seat_h - 5])\n                cube([seat_w - 2*frame_t, frame_t, frame_t], center=true);\n    }\n    \n    // Seat slats\n    for(i = [0:num_slats-1]) {\n        y = -seat_d/2 + i*(slat_w + slat_gap) + slat_w/2;\n        translate([0, y, leg_h + frame_t])\n            cube([seat_w - 2*frame_t - 4, slat_w, frame_t], center=true);\n    }\n    \n    // Backrest slats\n    for(i = [0:back_slats-1]) {\n        x = -seat_w/2 + frame_t + 2 + i*(seat_w - 2*frame_t - 4)/(back_slats-1);\n        translate([x, 0, 0])\n            rotate([back_angle, 0, 0])\n                translate([0, seat_d/2, leg_h + seat_h + back_h/2])\n                    cube([frame_t, frame_t, back_h - frame_t], center=true);\n    }\n    \n    // Armrests\n    // Left armrest\n    translate([-seat_w/2 - frame_t, -seat_d/2 + 10, leg_h + seat_h/2])\n        union() {\n            // Support post\n            cube([frame_t, frame_t, arm_h]);\n            \n            // Armrest top\n            translate([0, 0, arm_h])\n                cube([frame_t + 5, 15, frame_t]);\n        }\n    \n    // Right armrest\n    mirror([1, 0, 0])\n        translate([-seat_w/2 - frame_t, -seat_d/2 + 10, leg_h + seat_h/2])\n            union() {\n                // Support post\n                cube([frame_t, frame_t, arm_h]);\n                \n                // Armrest top\n                translate([0, 0, arm_h])\n                    cube([frame_t + 5, 15, frame_t]);\n            }\n    \n    // Front legs\n    translate([-seat_w/2 + frame_t/2, -seat_d/2 + frame_t/2, 0])\n        cylinder(h=leg_h, r=frame_t, $fn=8);\n    \n    translate([seat_w/2 - frame_t/2, -seat_d/2 + frame_t/2, 0])\n        cylinder(h=leg_h, r=frame_t, $fn=8);\n    \n    // Back legs (taller)\n    translate([-seat_w/2 + frame_t/2, seat_d/2 - frame_t/2, 0])\n        cylinder(h=leg_h + seat_h, r=frame_t, $fn=8);\n    \n    translate([seat_w/2 - frame_t/2, seat_d/2 - frame_t/2, 0])\n        cylinder(h=leg_h + seat_h, r=frame_t, $fn=8);\n}\n\n// Render the chair\npool_chair();",
    "renders": true
  },
  {
    "natural_object": "pit",
    "openscad_code": "// Realistic Medium-Complexity Pit Furniture (Fire-Pit Bench)\n// Overall footprint: 120 x 120 mm, height 45 mm\n// 2 mm wall thickness throughout for 3D printing\n\n// Main pit bowl module\nmodule pit_bowl(outer_r=45, inner_r=43, h=25) {\n    difference() {\n        cylinder(h=h, r=outer_r, $fn=60);              // outer shell\n        translate([0,0,-1])                            // carve hollow\n        cylinder(h=h+2, r=inner_r, $fn=60);\n    }\n}\n\n// Decorative rim ring\nmodule rim_ring(r=48, h=4) {\n    difference() {\n        cylinder(h=h, r=r, $fn=60);\n        cylinder(h=h+1, r=r-2, $fn=60);\n    }\n}\n\n// Four evenly-spaced bench seats\nmodule bench_seat(w=40, d=15, h=8) {\n    difference() {\n        union() {\n            cube([w, d, h]);                           // seat top\n            translate([5, -2, -3])                     // front support\n            cube([w-10, 4, 3]);\n            translate([5, d-2, -3])                    // back support\n            cube([w-10, 4, 3]);\n        }\n        translate([2, 2, 2])                           // lightening cut\n        cube([w-4, d-4, h-2]);\n    }\n}\n\n// Leg struts between benches\nmodule leg_strut(len=35, thick=6) {\n    rotate([90,0,0])\n    cylinder(h=len, r=thick/2, $fn=16);\n}\n\n// Assembly\n$fn = 60;\n\nunion() {\n    // Pit bowl centered\n    translate([0,0,0])\n    pit_bowl();\n\n    // Rim on top\n    translate([0,0,25])\n    rim_ring();\n\n    // Four benches around perimeter\n    for (a = [0, 90, 180, 270]) {\n        rotate([0,0,a])\n        translate([0, 55, 0])\n        bench_seat();\n    }\n\n    // Four leg struts under rim\n    for (a = [45, 135, 225, 315]) {\n        rotate([0,0,a])\n        translate([0, 48, 12.5])\n        leg_strut();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "trap",
    "openscad_code": "// Mouse Trap Chair – a realistic, 3D-printable trap disguised as a simple wooden chair\n// Overall footprint ≈ 60 × 60 × 90 mm\n\n$fn = 32;           // smoother curves\nwall = 2;           // uniform 2 mm print-friendly walls\n\n// Chair overall size\nseat_w = 40;\nseat_d = 40;\nseat_t = wall;\nleg_h = 45;\nleg_sz = 6;\n\nmodule leg(x,y){\n    translate([x,y,-leg_h]) \n        difference(){\n            cube([leg_sz,leg_sz,leg_h]);               // solid leg\n            translate([wall,wall,-1])                   // hollow center\n                cube([leg_sz-2*wall, leg_sz-2*wall, leg_h+2]);\n        }\n}\n\nmodule legs(){\n    for(dx=[0,seat_w-leg_sz], dy=[0,seat_d-leg_sz])\n        leg(dx,dy);\n}\n\nmodule seat(){\n    difference(){\n        cube([seat_w,seat_d,seat_t]);                   // solid seat\n        translate([wall,wall,-1])                       // hollow underneath\n            cube([seat_w-2*wall, seat_d-2*wall, seat_t+2]);\n    }\n}\n\n// backrest slats\nslat_w = seat_w/5;\nslat_h = 35;\nslat_t = wall;\n\nmodule back_slat(i){\n    translate([i*slat_w,0,seat_t])\n        difference(){\n            cube([slat_t,seat_d,slat_h]);\n            translate([wall,wall,-1])\n                cube([slat_t-2*wall, seat_d-2*wall, slat_h+2]);\n        }\n}\n\nmodule backrest(){\n    for(i=[0:4])\n        back_slat(i);\n}\n\n// TRAP mechanism – spring-loaded bar hidden under seat\nbar_w = seat_w - 4*wall;\nbar_t = 4;\nspring_coils = 5;\nspring_r = 4;\n\nmodule spring(){\n    rotate([90,0,0])\n        for(i=[0:spring_coils]){\n            translate([0,0,i*2*spring_r/spring_coils])\n                rotate([0,0,i*360*2/spring_coils])\n                    cylinder(h=2, r1=spring_r, r2=spring_r, $fn=8);\n        }\n}\n\nmodule trap_bar(){\n    translate([2*wall,seat_d/2-bar_t/2,-leg_h/2])\n        union(){\n            difference(){\n                cube([bar_w,bar_t,leg_h/2]);                // solid bar\n                translate([wall,wall,-1])\n                    cube([bar_w-2*wall, bar_t-2*wall, leg_h/2+2]);\n            }\n            translate([bar_w/2, bar_t/2, -spring_r])\n                spring();\n        }\n}\n\n// Assemble chair with hidden trap\nunion(){\n    legs();\n    translate([0,0,seat_t]) seat();\n    backrest();\n    trap_bar();\n}",
    "renders": true
  },
  {
    "natural_object": "bunker",
    "openscad_code": "// Bunker-style folding field table\n// Designed for 3D printing, no overhangs >45°, 2 mm walls\n// Overall footprint ~120 mm × 60 mm × 55 mm (folded)\n\n$fa = 2; $fs = 0.5;\n\n// Main module\nmodule bunkerTable() {\n    // Top surface – heavy steel plate\n    translate([0, 0, 53])\n        difference() {\n            cube([120, 60, 4], center = true);          // 4 mm thick top\n            translate([0, 0, -1])\n                cube([116, 56, 6], center = true);      // hollow underside\n        }\n\n    // Reinforcement ribs under top\n    for (y = [-20, 0, 20]) {\n        translate([0, y, 51])\n            cube([118, 4, 2], center = true);\n    }\n\n    // Hinge tubes along each long edge\n    hingeTube(60, 0);\n    hingeTube(-60, 0);\n\n    // Two folding leg frames\n    legFrame( 40,  20);\n    legFrame(-40, -20);\n}\n\n// Hinge tube module – printed horizontally\nmodule hingeTube(x, y) {\n    translate([x, y, 51])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 64, d = 8, center = true);     // outer tube\n            cylinder(h = 66, d = 4, center = true);     // inner hole\n        }\n}\n\n// One folding leg frame\nmodule legFrame(tx, ty) {\n    translate([tx, ty, 0]) {\n        // Top cross-bar\n        translate([0, 0, 48])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 60, d = 6, center = true);\n                cylinder(h = 62, d = 2, center = true);\n            }\n\n        // Two angled legs\n        for (side = [-1, 1]) {\n            translate([side * 25, 0, 24])\n                rotate([90 - atan(48 / 25), 0, 0])\n                difference() {\n                    cylinder(h = 53, d = 6, center = true);\n                    cylinder(h = 55, d = 2, center = true);\n                }\n        }\n\n        // Bottom spreader bar\n        translate([0, 0, 2])\n            cube([52, 4, 4], center = true);\n    }\n}\n\nbunkerTable();",
    "renders": true
  },
  {
    "natural_object": "green",
    "openscad_code": "// Green modern stool with botanical leaf seat pattern\n// 3D-printable, 80 mm tall, 2 mm walls throughout\n\n$fn = 30;           // smooth curves\nwall = 2;           // printable wall thickness\ngreen = \"#2e8b57\";  // sea-green color\n\nmodule leg(h = 78, r = 6) {\n    // tapered cylindrical leg with hidden joint socket\n    cylinder(h1 = h, r1 = r, r2 = r * 0.85);\n    translate([0, 0, h])\n        cylinder(h = wall * 2, r1 = r * 0.9, r2 = r * 0.9, $fn = 6);\n}\n\nmodule leaf_cutout(r = 10, thick = 2) {\n    // stylized leaf-shaped cutout for weight reduction\n    rotate([0, 0, 45])\n        scale([1.5, 1, 1])\n            cylinder(h = thick + 0.1, r = r, $fn = 3);\n}\n\nmodule stool_seat(d = 60, thick = 4) {\n    difference() {\n        // main circular seat\n        color(green)\n            cylinder(h = thick, r = d/2);\n        \n        // concentric underside cavity for printability\n        translate([0, 0, wall])\n            cylinder(h = thick - wall, r = d/2 - wall);\n        \n        // radial leaf-shaped lightening cutouts\n        for (a = [0:45:315])\n            translate([d/2 * 0.6, 0, -0.1])\n                rotate([0, 0, a])\n                    leaf_cutout(r = 8, thick = thick + 0.2);\n    }\n}\n\nmodule leg_ring(h = 20, d = 50) {\n    // reinforcing ring connecting legs\n    color(green)\n        difference() {\n            cylinder(h = wall, r = d/2);\n            cylinder(h = wall + 0.1, r = d/2 - wall);\n        }\n}\n\n// assembly\nunion() {\n    // seat\n    translate([0, 0, 78])\n        stool_seat(d = 60, thick = 4);\n    \n    // four legs\n    for (a = [0:90:270])\n        translate([25 * cos(a), 25 * sin(a), 0])\n            rotate([0, 0, a])\n                leg(h = 78, r = 6);\n    \n    // lower support ring\n    translate([0, 0, 20])\n        leg_ring(h = 20, d = 48);\n}",
    "renders": true
  },
  {
    "natural_object": "fairway",
    "openscad_code": "// Fairway Bench - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm long x 45mm wide x 45mm high\n\n// Parameters\nseat_length = 120;\nseat_width = 45;\nseat_thickness = 3;\nleg_height = 38;\nleg_thickness = 3;\nback_height = 20;\nback_thickness = 3;\nslat_width = 8;\nslat_gap = 4;\nnum_slats = 5;\n\n// Main assembly\nunion() {\n    // Seat with slats\n    translate([0, 0, leg_height]) {\n        for (i = [0:num_slats-1]) {\n            x_pos = -seat_length/2 + slat_width/2 + i*(slat_width + slat_gap);\n            cube([slat_width, seat_width, seat_thickness], center=true);\n        }\n    }\n    \n    // Leg frames (4 legs with stretchers)\n    module leg_assembly(x_pos) {\n        // Front leg\n        translate([x_pos, -seat_width/2 + leg_thickness/2, leg_height/2]) \n            cube([leg_thickness, leg_thickness, leg_height], center=true);\n        \n        // Back leg\n        translate([x_pos, seat_width/2 - leg_thickness/2, leg_height/2]) \n            cube([leg_thickness, leg_thickness, leg_height], center=true);\n        \n        // Stretcher\n        translate([x_pos, 0, leg_height/4]) \n            cube([leg_thickness, seat_width - leg_thickness, leg_thickness], center=true);\n    }\n    \n    // Left legs\n    leg_assembly(-seat_length/2 + leg_thickness/2);\n    \n    // Right legs\n    leg_assembly(seat_length/2 - leg_thickness/2);\n    \n    // Backrest\n    translate([0, seat_width/2 + back_thickness/2, leg_height + back_height/2]) {\n        // Main back frame\n        difference() {\n            cube([seat_length, back_thickness, back_height], center=true);\n            \n            // Create curved top edge\n            translate([0, 0, back_height/2 - 2]) {\n                for (i = [-seat_length/2+5:5:seat_length/2-5]) {\n                    translate([i, 0, 0]) \n                        rotate([90, 0, 0]) \n                        cylinder(h=back_thickness+1, r=3, center=true);\n                }\n            }\n        }\n        \n        // Back slats\n        for (i = [0:num_slats-1]) {\n            x_pos = -seat_length/2 + slat_width/2 + i*(slat_width + slat_gap);\n            translate([x_pos, 0, 0]) \n                cube([slat_width, back_thickness, back_height - 5], center=true);\n        }\n    }\n    \n    // Support braces under seat\n    translate([0, 0, leg_height - 3]) {\n        rotate([90, 0, 0]) \n            cylinder(h=seat_length - leg_thickness*2, r=2, center=true);\n    }\n    \n    // Corner braces\n    module corner_brace(x_pos, y_pos) {\n        translate([x_pos, y_pos, leg_height - 5]) {\n            difference() {\n                cube([6, 6, 10], center=true);\n                cylinder(h=11, r=2, center=true);\n            }\n        }\n    }\n    \n    corner_brace(-seat_length/2 + 6, -seat_width/2 + 6);\n    corner_brace(seat_length/2 - 6, -seat_width/2 + 6);\n    corner_brace(-seat_length/2 + 6, seat_width/2 - 6);\n    corner_brace(seat_length/2 - 6, seat_width/2 - 6);\n}",
    "renders": true
  },
  {
    "natural_object": "rough",
    "openscad_code": "// Rough wooden stool - Realistic style, medium complexity\n// Dimensions: 120mm height, 250mm width, 250mm depth\n\nmodule leg(x, y, angle) {\n    // Create rough wooden leg with taper\n    translate([x, y, 0]) {\n        rotate([0, 0, angle]) {\n            // Main leg body with slight taper\n            difference() {\n                hull() {\n                    translate([0, 0, 0])\n                        cylinder(h=110, d1=20, d2=18, $fn=8);\n                    translate([0, 0, 110])\n                        cylinder(h=10, d1=18, d2=22, $fn=8);\n                }\n                \n                // Add notches for rough texture\n                for(i = [10:20:100]) {\n                    translate([0, 0, i])\n                        rotate([0, 0, i*15])\n                        cube([25, 2, 3], center=true);\n                }\n            }\n            \n            // Foot detail\n            translate([0, 0, -2])\n                cylinder(h=4, d=24, $fn=6);\n        }\n    }\n}\n\nmodule stretcher(x1, y1, x2, y2, z) {\n    // Create connecting stretcher between legs\n    length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n    angle = atan2(y2-y1, x2-x1);\n    \n    translate([(x1+x2)/2, (y1+y2)/2, z]) {\n        rotate([0, 0, angle]) {\n            hull() {\n                translate([-length/2, 0, 0])\n                    cylinder(h=2, d=12, $fn=6);\n                translate([length/2, 0, 0])\n                    cylinder(h=2, d=12, $fn=6);\n            }\n        }\n    }\n}\n\nmodule seat() {\n    // Create rough wooden seat with irregular shape\n    translate([0, 0, 110]) {\n        difference() {\n            // Main seat\n            hull() {\n                for(i = [0:45:359]) {\n                    r = 110 + (i % 2 == 0 ? 5 : -5);\n                    translate([r*cos(i), r*sin(i), 0])\n                        cylinder(h=15, d=20, $fn=8);\n                }\n            }\n            \n            // Carve out sitting area\n            translate([0, 0, 8])\n                scale([0.85, 0.85, 1])\n                cylinder(h=20, d=200, $fn=32);\n            \n            // Add random knot holes\n            for(i = [0:30:330]) {\n                translate([40*cos(i), 40*sin(i), 5])\n                    cylinder(h=15, d=8+sin(i*5)*3, $fn=6);\n            }\n        }\n        \n        // Edge detail\n        for(i = [0:10:359]) {\n            rotate([0, 0, i])\n            translate([95, 0, 7])\n                cube([15, 3, 8]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Create four legs\n    leg(-80, -80, 5);\n    leg(80, -80, -5);\n    leg(-80, 80, -5);\n    leg(80, 80, 5);\n    \n    // Add stretchers for stability\n    stretcher(-80, -80, 80, -80, 45);\n    stretcher(-80, 80, 80, 80, 45);\n    stretcher(-80, -80, -80, 80, 45);\n    stretcher(80, -80, 80, 80, 45);\n    \n    // Diagonal stretchers\n    stretcher(-80, -80, 80, 80, 70);\n    stretcher(80, -80, -80, 80, 70);\n    \n    // Seat\n    seat();\n}",
    "renders": true
  },
  {
    "natural_object": "divot",
    "openscad_code": "// Divot Furniture - Medium Complexity Realistic Style\n// A small wooden side table with natural divot texturing on top surface\n\n// Overall dimensions\ntable_width = 100;\ntable_depth = 80;\ntable_height = 45;\nwall_thickness = 2;\n\n// Leg parameters\nleg_size = 8;\nleg_height = table_height - wall_thickness;\n\n// Create main table body\nmodule table_top() {\n    // Main tabletop\n    difference() {\n        // Solid top\n        cube([table_width, table_depth, wall_thickness], center=true);\n        \n        // Create divot pattern - organic random depressions\n        for (i = [0:20]) {\n            // Random position for each divot\n            x_pos = (rands(-table_width/2 + 10, table_width/2 - 10, 1))[0];\n            y_pos = (rands(-table_depth/2 + 10, table_depth/2 - 10, 1))[0];\n            \n            // Varying sizes for natural look\n            divot_rad = (rands(3, 8, 1))[0];\n            divot_depth = (rands(0.5, 2, 1))[0];\n            \n            translate([x_pos, y_pos, wall_thickness/2 - divot_depth/2]) {\n                // Elliptical divot for natural wood grain appearance\n                scale([1.2, 0.8, 1])\n                sphere(r=divot_rad);\n            }\n        }\n    }\n}\n\n// Create table legs with slight taper\nmodule table_leg(x_pos, y_pos) {\n    // Leg with rounded edges\n    difference() {\n        // Main leg body\n        translate([x_pos, y_pos, -leg_height/2]) {\n            cylinder(h=leg_height, r1=leg_size/2, r2=leg_size/2 - 1, center=true);\n        }\n        \n        // Chamfer bottom edge for printability\n        translate([x_pos, y_pos, -leg_height + 2]) {\n            cylinder(h=3, r1=leg_size/2 + 1, r2=leg_size/2, center=true);\n        }\n    }\n}\n\n// Create support frame\nmodule support_frame() {\n    // Front support\n    translate([0, table_depth/2 - leg_size/2, -leg_height/2 + 5]) {\n        cube([table_width - leg_size, wall_thickness, leg_size], center=true);\n    }\n    \n    // Back support\n    translate([0, -table_depth/2 + leg_size/2, -leg_height/2 + 5]) {\n        cube([table_width - leg_size, wall_thickness, leg_size], center=true);\n    }\n    \n    // Side supports\n    translate([table_width/2 - leg_size/2, 0, -leg_height/2 + 5]) {\n        cube([wall_thickness, table_depth - leg_size, leg_size], center=true);\n    }\n    \n    translate([-table_width/2 + leg_size/2, 0, -leg_height/2 + 5]) {\n        cube([wall_thickness, table_depth - leg_size, leg_size], center=true);\n    }\n}\n\n// Main assembly\nmodule divot_table() {\n    // Position tabletop at correct height\n    translate([0, 0, leg_height + wall_thickness/2]) {\n        table_top();\n    }\n    \n    // Add legs at corners\n    for (x = [-table_width/2 + leg_size/2, table_width/2 - leg_size/2]) {\n        for (y = [-table_depth/2 + leg_size/2, table_depth/2 - leg_size/2]) {\n            table_leg(x, y);\n        }\n    }\n    \n    // Add support frame for stability\n    support_frame();\n    \n    // Add subtle edge rounding on tabletop\n    translate([0, 0, leg_height + wall_thickness]) {\n        difference() {\n            cube([table_width + 0.5, table_depth + 0.5, wall_thickness/2], center=true);\n            cube([table_width - 1, table_depth - 1, wall_thickness], center=true);\n        }\n    }\n}\n\n// Render the complete table\ndivot_table();",
    "renders": true
  },
  {
    "natural_object": "flagstick",
    "openscad_code": "// Flagstick Furniture - Realistic Style, Medium Complexity\n// Dimensions: 120mm height, 30mm base width\n\n// Main Parameters\nflag_height = 120;\nbase_diameter = 30;\npole_diameter = 6;\nflag_width = 35;\nflag_height = 22;\n\n// Base Module - Weighted foundation\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=12, d=base_diameter, $fn=64);\n        \n        // Recessed bottom for weight reduction\n        translate([0, 0, 10])\n            cylinder(h=10, d=base_diameter-4, $fn=64);\n        \n        // Cable management hole\n        translate([0, 0, -1])\n            cylinder(h=14, d=3, $fn=32);\n    }\n    \n    // Decorative ring detail\n    translate([0, 0, 11])\n        cylinder(h=2, d=base_diameter+2, $fn=64);\n}\n\n// Pole Module - Structural support with joints\nmodule pole() {\n    // Main pole\n    cylinder(h=flag_height-15, d=pole_diameter, $fn=32);\n    \n    // Upper joint collar\n    translate([0, 0, flag_height-15])\n        cylinder(h=5, d=pole_diameter+4, $fn=32);\n    \n    // Lower joint collar\n    translate([0, 0, 0])\n        cylinder(h=5, d=pole_diameter+4, $fn=32);\n    \n    // Structural ribs for strength\n    for(i = [1:6]) {\n        rotate([0, 0, i*60])\n            translate([pole_diameter/2+1, 0, 2])\n                rotate([90, 0, 0])\n                    cylinder(h=flag_height-25, d=1.5, $fn=16);\n    }\n}\n\n// Flag Module - Fabric element with realistic folds\nmodule flag() {\n    // Flag attachment sleeve\n    rotate([90, 0, 0])\n        translate([0, -flag_height/2, pole_diameter/2])\n            cylinder(h=flag_height, d=pole_diameter+2, $fn=32);\n    \n    // Main flag body with curved profile\n    translate([pole_diameter/2+1, 0, flag_height-15])\n        rotate([0, 85, 0])\n            linear_extrude(height=2)\n                polygon(points=[\n                    [0, 0],\n                    [flag_width, 0],\n                    [flag_width-5, -flag_height/4],\n                    [flag_width-8, -flag_height/2],\n                    [flag_width-5, -flag_height*3/4],\n                    [flag_width, -flag_height],\n                    [0, -flag_height]\n                ]);\n    \n    // Flag reinforcement stitching\n    for(pos = [5, flag_height-5]) {\n        translate([pole_diameter/2+1, -1, flag_height-15-pos])\n            cube([2, 3, 1]);\n    }\n}\n\n// Ground spike for stability\nmodule spike() {\n    translate([0, 0, -10])\n        cylinder(h=10, d1=8, d2=4, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    translate([0, 0, 0])\n        base();\n    \n    // Pole assembly\n    translate([0, 0, 12])\n        pole();\n    \n    // Flag assembly\n    translate([0, 0, 0])\n        flag();\n    \n    // Ground spike\n    translate([0, 0, 0])\n        spike();\n    \n    // Decorative cap\n    translate([0, 0, flag_height-10])\n        sphere(d=pole_diameter+2, $fn=32);\n}\n\n// Printing support base\ndifference() {\n    translate([0, 0, -0.2])\n        cylinder(h=0.2, d=base_diameter+2, $fn=64);\n    translate([0, 0, -0.5])\n        cylinder(h=0.5, d=base_diameter, $fn=64);\n}",
    "renders": true
  },
  {
    "natural_object": "teebox",
    "openscad_code": "// Realistic Teebox Furniture – OpenSCAD\n// Wall-thickness 2 mm, printable without supports\n// Overall footprint 120 mm × 85 mm × 105 mm\n\n$fn = 36;          // Smooth curves\n\n// ---------- parameters ----------\nbody_w = 120;\nbody_d = 85;\nbody_h = 60;\nwall_t = 2;        // uniform wall thickness\nleg_h  = 45;       // from bottom of body to ground\nleg_t  = wall_t;\n\n// ---------- modules ----------\nmodule rounded_box(w, d, h, r, thick) {\n    // hollow box with rounded vertical edges\n    outer = cube([w, d, h], center = true);\n    inner = cube([w-2*thick, d-2*thick, h+1], center = true);\n    translate([0, 0, -0.5]) difference() {\n        outer;\n        inner;\n    }\n}\n\nmodule leg_profile() {\n    // simple rectangular leg cross-section\n    square([leg_t, leg_t], center = true);\n}\n\nmodule leg(x, y) {\n    translate([x, y, -leg_h/2 - body_h/2])\n        linear_extrude(height = leg_h, center = true)\n            leg_profile();\n}\n\nmodule tee_slot() {\n    // elliptical tee slot on top surface\n    slot_w = 10;\n    slot_l = 18;\n    slot_d = 3;\n    translate([0, 0, body_h/2 + 0.1]) {\n        rotate([90, 0, 0])\n            cylinder(h = slot_l, d1 = slot_w, d2 = slot_w*0.7, center = true);\n    }\n}\n\nmodule handle() {\n    // simple cut-out handle on front face\n    h_w = 30;\n    h_h = 8;\n    h_d = 15;\n    translate([0, body_d/2 + 0.1, 0])\n        rotate([0, 90, 0])\n            cylinder(h = h_w, d = h_h, center = true);\n}\n\n// ---------- main geometry ----------\ndifference() {\n    // main body\n    union() {\n        rounded_box(body_w, body_d, body_h, 5, wall_t);\n        \n        // four legs\n        dx = body_w/2 - leg_t;\n        dy = body_d/2 - leg_t;\n        leg( dx,  dy);\n        leg(-dx,  dy);\n        leg( dx, -dy);\n        leg(-dx, -dy);\n    }\n    \n    // subtract tee slot\n    tee_slot();\n    \n    // subtract front handle\n    handle();\n}\n\n// ---------- optional printed ball tray ----------\ntranslate([0, 0, -leg_h - 3 - 1]) {\n    tray_w = body_w - 20;\n    tray_d = body_d - 20;\n    tray_h = 3;\n    difference() {\n        cube([tray_w, tray_d, tray_h], center = true);\n        translate([0, 0, -1])\n            cube([tray_w-2*wall_t, tray_d-2*wall_t, tray_h+2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "scoreboard",
    "openscad_code": "// Scoreboard Furniture - Medium Complexity\n// Realistic style with structural frame and display panels\n\n// Overall dimensions\noverall_width = 100;\noverall_height = 70;\noverall_depth = 30;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Frame dimensions\nframe_width = overall_width - 4;\nframe_height = overall_height - 4;\nframe_depth = overall_depth - 2;\n\n// Display panel dimensions\ndisplay_width = frame_width - 8;\ndisplay_height = frame_height - 8;\ndisplay_depth = 1;\n\n// Leg dimensions\nleg_width = 4;\nleg_height = 40;\nleg_depth = 4;\n\n// Score digit dimensions\ndigit_width = 8;\ndigit_height = 12;\ndigit_depth = 1;\n\n// Main frame structure\nmodule frame() {\n    // Outer frame\n    difference() {\n        cube([frame_width, frame_height, frame_depth], center=true);\n        translate([0, 0, wall_thickness/2])\n            cube([frame_width-wall_thickness*2, frame_height-wall_thickness*2, frame_depth+1], center=true);\n    }\n    \n    // Frame edges with rounded profile\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(frame_width/2-wall_thickness/2), y*(frame_height/2-wall_thickness/2), 0])\n                cylinder(h=frame_depth, r=wall_thickness, center=true, $fn=8);\n        }\n    }\n}\n\n// Display panel with recessed area\nmodule display_panel() {\n    // Main panel\n    translate([0, 0, frame_depth/2 + display_depth/2])\n        cube([display_width, display_height, display_depth], center=true);\n    \n    // Recessed display area\n    translate([0, 0, frame_depth/2 + display_depth])\n        cube([display_width-4, display_height-4, 0.5], center=true);\n}\n\n// Support legs with cross-bracing\nmodule legs() {\n    // Front legs\n    for(x = [-1, 1]) {\n        translate([x*(frame_width/2-leg_width/2-2), 0, -leg_height/2-frame_depth/2])\n            cube([leg_width, leg_depth, leg_height], center=true);\n    }\n    \n    // Back legs\n    for(x = [-1, 1]) {\n        translate([x*(frame_width/2-leg_width/2-2), frame_height/2-leg_depth/2-2, -leg_height/2-frame_depth/2])\n            cube([leg_width, leg_depth, leg_height], center=true);\n    }\n    \n    // Cross brace between front legs\n    translate([0, 0, -leg_height/2-frame_depth/2+5])\n        cube([frame_width-8, leg_width, leg_width], center=true);\n}\n\n// Score digits (7-segment style)\nmodule seven_segment_digit(pos_x, pos_y, value) {\n    translate([pos_x, pos_y, frame_depth/2 + display_depth + 0.5]) {\n        // Top horizontal segment\n        if(value == 0 || value == 2 || value == 3 || value == 5 || value == 6 || value == 7 || value == 8 || value == 9)\n            cube([digit_width, digit_height/5, digit_depth], center=true);\n        \n        // Top-left vertical segment\n        if(value == 0 || value == 4 || value == 5 || value == 6 || value == 8 || value == 9)\n            translate([-digit_width/3, digit_height/6, 0])\n                cube([digit_width/5, digit_height/3, digit_depth], center=true);\n        \n        // Top-right vertical segment\n        if(value == 0 || value == 1 || value == 2 || value == 3 || value == 4 || value == 7 || value == 8 || value == 9)\n            translate([digit_width/3, digit_height/6, 0])\n                cube([digit_width/5, digit_height/3, digit_depth], center=true);\n        \n        // Middle horizontal segment\n        if(value == 2 || value == 3 || value == 4 || value == 5 || value == 6 || value == 8 || value == 9)\n            translate([0, 0, 0])\n                cube([digit_width, digit_height/5, digit_depth], center=true);\n        \n        // Bottom-left vertical segment\n        if(value == 0 || value == 2 || value == 6 || value == 8)\n            translate([-digit_width/3, -digit_height/6, 0])\n                cube([digit_width/5, digit_height/3, digit_depth], center=true);\n        \n        // Bottom-right vertical segment\n        if(value == 0 || value == 1 || value == 3 || value == 4 || value == 5 || value == 6 || value == 7 || value == 8 || value == 9)\n            translate([digit_width/3, -digit_height/6, 0])\n                cube([digit_width/5, digit_height/3, digit_depth], center=true);\n        \n        // Bottom horizontal segment\n        if(value == 0 || value == 2 || value == 3 || value == 5 || value == 6 || value == 8 || value == 9)\n            translate([0, -digit_height/2.5, 0])\n                cube([digit_width, digit_height/5, digit_depth], center=true);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Button panel\n    translate([0, -display_height/2-5, frame_depth/2 + display_depth/2])\n        cube([display_width/2, 6, display_depth], center=true);\n    \n    // Buttons\n    for(i = [-1, 0, 1]) {\n        translate([i*8, -display_height/2-5, frame_depth/2 + display_depth + 1])\n            cylinder(h=2, r=2, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Structural frame\n    frame();\n    \n    // Display panel\n    display_panel();\n    \n    // Score digits for home and away teams\n    seven_segment_digit(-display_width/4, display_height/4, 7);\n    seven_segment_digit(display_width/4, display_height/4, 5);\n    seven_segment_digit(-display_width/4, -display_height/4, 3);\n    seven_segment_digit(display_width/4, -display_height/4, 2);\n    \n    // Control buttons\n    control_buttons();\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "natural_object": "whistle",
    "openscad_code": "// Whistle Furniture - A functional whistle designed as a furniture accent piece\n// Dimensions: 80mm length x 40mm width x 35mm height\n\n$fn = 50;\nwall_thickness = 2;\nscale_factor = 1;\n\n// Main whistle body\nmodule whistle_body() {\n    difference() {\n        // Outer body - elongated capsule shape\n        hull() {\n            translate([0, 0, 15])\n                scale([1, 0.7, 0.5])\n                sphere(d=35);\n            translate([60, 0, 15])\n                scale([0.8, 0.6, 0.4])\n                sphere(d=30);\n        }\n        \n        // Inner air chamber\n        translate([5, 0, 15])\n            scale([0.8, 0.5, 0.3])\n            sphere(d=30);\n        translate([55, 0, 15])\n            scale([0.6, 0.4, 0.2])\n            sphere(d=25);\n    }\n}\n\n// Mouthpiece with furniture-style rounded edges\nmodule mouthpiece() {\n    difference() {\n        // Outer mouthpiece\n        translate([-10, 0, 15])\n            rotate([0, 90, 0])\n            cylinder(h=20, d1=20, d2=15);\n        \n        // Inner airway\n        translate([-10, 0, 15])\n            rotate([0, 90, 0])\n            cylinder(h=20, d=10);\n    }\n}\n\n// Sound hole (window) with furniture detailing\nmodule sound_hole() {\n    // Create rectangular window\n    translate([35, 0, 22])\n        cube([15, 12, 8], center=true);\n    \n    // Sharp edge for sound generation\n    translate([42, 0, 18])\n        cube([2, 10, 4], center=true);\n}\n\n// Furniture-style decorative rings as structural elements\nmodule decorative_rings() {\n    // Front ring\n    translate([15, 0, 28])\n        rotate([90, 0, 0])\n        cylinder(h=3, d=38);\n    \n    // Rear ring\n    translate([45, 0, 25])\n        rotate([90, 0, 0])\n        cylinder(h=3, d=35);\n}\n\n// Airway splitter (labium) - furniture joint style\nmodule airway_splitter() {\n    translate([40, 0, 15])\n        cube([1, 8, 8], center=true);\n}\n\n// Key ring attachment point - furniture hardware style\nmodule key_ring() {\n    // Base\n    translate([65, 0, 20])\n        cylinder(h=8, d=10);\n    \n    // Ring hole\n    translate([65, 0, 24])\n        rotate([90, 0, 0])\n        cylinder(h=12, d=6);\n}\n\n// Assembly\nunion() {\n    // Main components\n    whistle_body();\n    mouthpiece();\n    \n    // Cut sound hole\n    difference() {\n        union() {\n            decorative_rings();\n            key_ring();\n        }\n        sound_hole();\n    }\n    \n    // Add airway splitter\n    airway_splitter();\n}",
    "renders": true
  },
  {
    "natural_object": "clock",
    "openscad_code": "// Realistic Medium-Complexity Clock Furniture\n// Wall-mounted mantel clock with frame and traditional face\n\n// Overall dimensions\nclock_diameter = 100;\nclock_depth = 25;\nframe_thickness = 8;\nwall_mount_thickness = 5;\n\nmodule clock_frame() {\n    // Outer frame ring\n    difference() {\n        cylinder(h=frame_thickness, d=clock_diameter + 15, center=true);\n        cylinder(h=frame_thickness+1, d=clock_diameter + 15 - 4, center=true);\n    }\n    \n    // Back panel\n    translate([0, 0, -frame_thickness/2 - 1]) {\n        difference() {\n            cylinder(h=2, d=clock_diameter + 15);\n            cylinder(h=3, d=clock_diameter - 2);\n        }\n    }\n}\n\nmodule clock_face() {\n    // Main face\n    difference() {\n        cylinder(h=2, d=clock_diameter);\n        cylinder(h=3, d=clock_diameter - 4);\n    }\n    \n    // Number markers\n    for(i=[1:12]) {\n        angle = i * 30;\n        radius = (clock_diameter/2) - 8;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, 1.1]) {\n            rotate([0, 0, angle + 90]) {\n                cube([1, 3, 1.5], center=true);\n            }\n        }\n    }\n    \n    // Center dot\n    translate([0, 0, 1.5]) {\n        cylinder(h=2, d=4);\n    }\n}\n\nmodule clock_hands() {\n    // Hour hand\n    translate([0, 0, 2]) {\n        rotate([0, 0, -30]) {\n            cube([3, clock_diameter/4, 1], center=true);\n        }\n    }\n    \n    // Minute hand\n    translate([0, 0, 3]) {\n        rotate([0, 0, 60]) {\n            cube([2, clock_diameter/3, 1], center=true);\n        }\n    }\n    \n    // Second hand\n    translate([0, 0, 4]) {\n        rotate([0, 0, 180]) {\n            cube([1, clock_diameter/2.5, 0.5], center=true);\n        }\n    }\n}\n\nmodule wall_mount() {\n    // Back mounting bracket\n    translate([0, -clock_diameter/2 - 10, 0]) {\n        cube([30, 15, wall_mount_thickness], center=true);\n    }\n    \n    // Keyhole slots for hanging\n    translate([0, -clock_diameter/2 - 10, wall_mount_thickness/2]) {\n        for(x=[-8, 8]) {\n            translate([x, 0, 0]) {\n                difference() {\n                    cylinder(h=wall_mount_thickness+1, d=4, center=true);\n                    translate([0, 0, -wall_mount_thickness/2 - 1]) {\n                        cylinder(h=wall_mount_thickness+2, d=2);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_details() {\n    // Top decorative finial\n    translate([0, 0, frame_thickness/2 + 2]) {\n        cylinder(h=8, d=6);\n        translate([0, 0, 8]) {\n            sphere(d=6);\n        }\n    }\n    \n    // Side ornaments\n    for(x=[-1, 1]) {\n        translate([x * (clock_diameter/2 + 5), 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=10, d=5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    clock_frame();\n    \n    translate([0, 0, frame_thickness/2 + 1]) {\n        clock_face();\n        clock_hands();\n    }\n    \n    translate([0, 0, -clock_depth/2 - wall_mount_thickness/2]) {\n        wall_mount();\n    }\n    \n    translate([0, 0, frame_thickness/2]) {\n        decorative_details();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "timer",
    "openscad_code": "// Realistic Timer Furniture - Medium Complexity\n// A wooden-look timer with hourglass chamber, frame, and base\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 15;\nframe_height = 100;\nglass_diameter = 30;\nglass_thickness = 2;\npost_width = 8;\n\n// Base module with rounded edges\nmodule base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            minkowski() {\n                cube([base_width, base_depth, base_height], center=true);\n                sphere(3);\n            }\n        \n        // Hollow bottom for printability\n        translate([0, 0, base_height - 2])\n            cube([base_width - 4, base_depth - 4, base_height], center=true);\n        \n        // Center hole for frame\n        translate([0, 0, -1])\n            cylinder(h=base_height + 2, d=post_width + 1, center=true);\n    }\n}\n\n// Frame posts\nmodule frame_post() {\n    // Main post\n    cylinder(h=frame_height, d=post_width, center=true);\n    \n    // Top connector\n    translate([0, 0, frame_height/2 + post_width/2])\n        rotate([90, 0, 0])\n            cylinder(h=post_width + 4, d=post_width, center=true);\n    \n    // Bottom connector\n    translate([0, 0, -frame_height/2 - post_width/2])\n        rotate([90, 0, 0])\n            cylinder(h=post_width + 4, d=post_width, center=true);\n}\n\n// Hourglass chamber\nmodule hourglass() {\n    // Top glass bulb\n    difference() {\n        sphere(d=glass_diameter);\n        sphere(d=glass_diameter - glass_thickness*2);\n    }\n    \n    // Bottom glass bulb\n    translate([0, 0, -glass_diameter])\n        difference() {\n            sphere(d=glass_diameter);\n            sphere(d=glass_diameter - glass_thickness*2);\n        }\n    \n    // Neck connection\n    translate([0, 0, -glass_diameter/2])\n        difference() {\n            cylinder(h=glass_diameter, d=glass_diameter/3, center=true);\n            cylinder(h=glass_diameter + 2, d=glass_diameter/3 - glass_thickness*2, center=true);\n        }\n    \n    // Sand simulation - top half\n    translate([0, 0, glass_diameter/4])\n        cylinder(h=glass_diameter/2, d=glass_diameter - glass_thickness*4, center=true);\n    \n    // Sand simulation - bottom pile\n    translate([0, 0, -glass_diameter - glass_diameter/4])\n        sphere(d=glass_diameter/2);\n}\n\n// Support rings\nmodule support_ring(height) {\n    difference() {\n        cylinder(h=5, d=glass_diameter + 8, center=true);\n        cylinder(h=7, d=glass_diameter + 2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Frame posts - front and back\n    translate([base_width/2 - post_width, 0, base_height/2 + frame_height/2])\n        frame_post();\n    translate([-base_width/2 + post_width, 0, base_height/2 + frame_height/2])\n        frame_post();\n    \n    // Top cross bar\n    translate([0, 0, base_height + frame_height - post_width/2])\n        rotate([90, 0, 0])\n            cylinder(h=base_width - post_width*2, d=post_width, center=true);\n    \n    // Bottom support rings\n    translate([0, 0, base_height + frame_height/3])\n        support_ring(0);\n    translate([0, 0, base_height + frame_height*2/3])\n        support_ring(0);\n    \n    // Hourglass assembly\n    translate([0, 0, base_height + frame_height/2])\n        hourglass();\n}\n\n// Decorative frame details\nmodule frame_detail() {\n    for(i = [0:1]) {\n        rotate([0, 0, i*90])\n            translate([base_width/2 - post_width - 2, 0, base_height + frame_height/2])\n                cylinder(h=3, d=6, center=true);\n    }\n}\n\nframe_detail();",
    "renders": true
  },
  {
    "natural_object": "horn",
    "openscad_code": "// Horn Furniture - Realistic Style, Medium Complexity\n// A stylized horn chair with organic curves and structural elements\n\n$fn = 50;\n\n// Main parameters\nhorn_length = 120;\nhorn_base_diameter = 40;\nhorn_tip_diameter = 5;\nwall_thickness = 2;\n\n// Chair proportions\nseat_height = 45;\nback_height = 80;\nleg_height = 40;\n\nmodule horn_curve(t) {\n    // Create a natural horn curve using parametric equation\n    x = horn_length * t * 0.8;\n    y = 30 * sin(t * 180);\n    z = 20 * sin(t * 270);\n    [x, y, z];\n}\n\nmodule horn_shell() {\n    // Main horn body with hollow interior\n    difference() {\n        // Outer shell\n        hull() {\n            for (i = [0:0.1:1]) {\n                pos = horn_curve(i);\n                translate(pos)\n                    sphere(d = lerp(horn_base_diameter, horn_tip_diameter, i));\n            }\n        }\n        \n        // Inner hollow\n        hull() {\n            for (i = [0:0.1:1]) {\n                pos = horn_curve(i);\n                translate(pos)\n                    sphere(d = lerp(horn_base_diameter - wall_thickness*2, \n                                 horn_tip_diameter - wall_thickness*2, i));\n            }\n        }\n    }\n}\n\nmodule horn_chair() {\n    // Main chair structure using horns as legs and back\n    \n    // Seat platform\n    difference() {\n        translate([0, 0, leg_height])\n            cube([80, 60, wall_thickness], center=true);\n        \n        // Lightening holes\n        for (x = [-25, 0, 25])\n            for (y = [-15, 0, 15])\n                translate([x, y, leg_height])\n                    cylinder(h=wall_thickness+1, d=8, center=true);\n    }\n    \n    // Front horns as legs\n    // Left front leg\n    translate([-25, 25, leg_height]) {\n        rotate([90, 0, -15])\n            scale([1, 1, 0.8])\n                horn_shell();\n    }\n    \n    // Right front leg\n    translate([25, 25, leg_height]) {\n        rotate([90, 0, 15])\n            scale([1, 1, 0.8])\n                horn_shell();\n    }\n    \n    // Rear horns as back support\n    // Left rear\n    translate([-25, -25, leg_height]) {\n        rotate([105, 0, -20])\n            horn_shell();\n    }\n    \n    // Right rear\n    translate([25, -25, leg_height]) {\n        rotate([105, 0, 20])\n            horn_shell();\n    }\n    \n    // Backrest connecting horns\n    translate([0, -25, leg_height + 60])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=wall_thickness, d1=70, d2=60, center=true);\n            cylinder(h=wall_thickness+1, d1=66, d2=56, center=true);\n        }\n    \n    // Side support beams\n    for (side = [-1, 1]) {\n        translate([side * 40, 0, leg_height + 20])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=50, d=12, center=true);\n                cylinder(h=51, d=8, center=true);\n            }\n    }\n    \n    // Front support beam\n    translate([0, 30, leg_height + 15])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=60, d=10, center=true);\n            cylinder(h=61, d=6, center=true);\n        }\n}\n\n// Helper function for interpolation\nfunction lerp(a, b, t) = a + (b - a) * t;\n\n// Render the chair\nhorn_chair();",
    "renders": true
  },
  {
    "natural_object": "siren",
    "openscad_code": "// Siren Table Lamp - Realistic Style, Medium Complexity\n// A table lamp shaped like a classic dual-tone siren with furniture-quality details\n\n$fn = 50;  // Smooth curves for printing\n\n// Overall dimensions\nbase_diameter = 80;\nbody_height = 120;\ntotal_height = 180;\nwall_thickness = 2.5;\n\n// Base module - weighted furniture-style base\nmodule siren_base() {\n    // Main base cylinder\n    cylinder(h = 15, d = base_diameter, center = false);\n    \n    // Decorative base ring\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h = 8, d = base_diameter);\n            cylinder(h = 9, d = base_diameter - wall_thickness*2);\n        }\n    \n    // Base feet for stability\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([base_diameter/2 - 10, -8, 0])\n                cube([20, 16, 5]);\n    }\n}\n\n// Siren body - dual speaker chambers\nmodule siren_body() {\n    // Lower chamber\n    translate([0, 0, 23])\n        cylinder(h = 40, d1 = 60, d2 = 70);\n    \n    // Upper chamber\n    translate([0, 0, 63])\n        cylinder(h = 40, d1 = 70, d2 = 60);\n    \n    // Center support column\n    translate([0, 0, 40])\n        difference() {\n            cylinder(h = 46, d = 30);\n            cylinder(h = 47, d = 30 - wall_thickness*2);\n        }\n    \n    // Speaker grill details\n    for (h = [30:5:90]) {\n        translate([0, 0, h])\n            difference() {\n                cylinder(h = 2, d = 65);\n                for (i = [0:11]) {\n                    rotate([0, 0, i * 30])\n                        translate([32.5, -1.5, -1])\n                            cube([3, 3, 4]);\n                }\n            }\n    }\n}\n\n// Rotating light dome\nmodule siren_dome() {\n    // Main dome\n    translate([0, 0, 103])\n        difference() {\n            sphere(d = 50);\n            sphere(d = 50 - wall_thickness*2);\n        }\n    \n    // Dome base\n    translate([0, 0, 103])\n        cylinder(h = 10, d = 50);\n    \n    // Light chamber\n    translate([0, 0, 113])\n        difference() {\n            sphere(d = 45);\n            sphere(d = 40);\n        }\n}\n\n// Mounting hardware - furniture lamp details\nmodule mounting_details() {\n    // Central rod\n    translate([0, 0, 140])\n        difference() {\n            cylinder(h = 30, d = 15);\n            cylinder(h = 31, d = 10);\n        }\n    \n    // Lamp shade mount\n    translate([0, 0, 170])\n        difference() {\n            cylinder(h = 10, d = 25);\n            cylinder(h = 11, d = 20);\n        }\n    \n    // Cable exit\n    translate([base_diameter/2 - 10, 0, 7.5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 20, d = 8);\n                cylinder(h = 21, d = 5);\n            }\n}\n\n// Assembly\nunion() {\n    siren_base();\n    siren_body();\n    siren_dome();\n    mounting_details();\n    \n    // Power indicator LED\n    translate([0, -25, 113])\n        cylinder(h = 5, d = 6);\n}",
    "renders": true
  },
  {
    "natural_object": "doll",
    "openscad_code": "// Doll-sized vintage writing desk – realistic style, medium complexity\n// Overall footprint 60 mm × 40 mm, height 50 mm – printable on any FDM printer\n// Wall thickness 2 mm throughout, no steep overhangs\n\n$fa=2; $fs=0.5;\n\n// Main desk body\nmodule desk_body() {\n    // Top with rounded front edge\n    difference() {\n        hull() {\n            translate([0,0,48]) cube([60,40,4], center=true);\n            translate([0,0,46]) cube([64,44,2], center=true);\n        }\n        // Front chamfer\n        translate([0,22,46]) rotate([0,45,0]) cube([70,3,4], center=true);\n    }\n    \n    // Sides\n    for(side=[-1,1]) mirror([side,0,0])\n        translate([30-2,0,24]) cube([4,40,44], center=true);\n    \n    // Back panel\n    translate([0,-20,24]) cube([56,4,44], center=true);\n    \n    // Floor\n    translate([0,0,2]) cube([56,36,4], center=true);\n}\n\n// Two drawers with handles\nmodule drawer(y) {\n    // Drawer box\n    translate([0,y,25.5]) cube([50,16,18], center=true);\n    \n    // Front face\n    difference() {\n        translate([0,y,34.8]) cube([52,17,2.5], center=true);\n        // Recessed panel\n        translate([0,y,36]) cube([46,13,1], center=true);\n    }\n    \n    // Pull handle\n    translate([0,y,36]) cylinder(h=3, r=2, center=true, $fn=20);\n}\n\n// Legs (square tapered)\nmodule leg(x,y) {\n    hull() {\n        translate([x,y,0]) cube([6,6,6], center=true);\n        translate([x,y,22]) cube([4,4,4], center=true);\n    }\n}\n\n// Feet\nmodule foot(x,y) {\n    translate([x,y,3]) rotate([90,0,0]) cylinder(h=4, r1=3, r2=3.5, $fn=30);\n}\n\n// Back cross-brace\nmodule brace() {\n    rotate([90,0,0]) translate([0,0,-25.5]) cylinder(h=54, r=2.5, center=true, $fn=20);\n}\n\n// Assembly\nunion() {\n    desk_body();\n    \n    // Drawers\n    drawer(5);\n    drawer(-5);\n    \n    // Four legs with feet\n    for(x=[-25,25], y=[-15,15]) {\n        leg(x,y);\n        foot(x,y);\n    }\n    \n    // Rear stretcher\n    brace();\n}",
    "renders": true
  },
  {
    "natural_object": "figure",
    "openscad_code": "// Realistic Medium-Complexity Figure Furniture – Reading Chair with Ottoman\n// Overall height ≈ 90 mm, seat width ≈ 60 mm, printable in one piece\n\n// Wall thickness constant\nthk = 2;\n\n// Chair module\nmodule chair() {\n    // Back legs\n    translate([24, -20, 0]) cylinder(h = 45, d = 6, $fn = 20);\n    translate([-24, -20, 0]) cylinder(h = 45, d = 6, $fn = 20);\n\n    // Front legs\n    for (x = [-20, 20])\n        translate([x, 20, 0]) cylinder(h = 35, d = 6, $fn = 20);\n\n    // Seat frame\n    difference() {\n        translate([0, 0, 34]) cube([50, 50, thk], center = true);\n        translate([0, 0, 34]) cube([46, 46, thk + 1], center = true);\n    }\n\n    // Cushion\n    translate([0, 0, 38]) \n        scale([1, 1, 0.35]) \n        sphere(d = 50, $fn = 60);\n\n    // Backrest\n    difference() {\n        translate([0, -25, 60]) rotate([90, 0, 0])\n            cylinder(h = 45, d = 50, $fn = 60);\n        translate([0, -25, 65]) rotate([90, 0, 0])\n            cylinder(h = 45, d = 46, $fn = 60);\n    }\n\n    // Backrest cushion\n    translate([0, -25, 60]) rotate([90, 0, 0])\n        scale([1, 1, 0.35])\n        sphere(d = 48, $fn = 60);\n\n    // Armrest left\n    translate([-30, 5, 50]) cube([10, 30, thk]);\n    translate([-30, 5, 10]) cube([thk, 30, 40]);\n    // Armrest right\n    translate([30, 5, 50]) cube([10, 30, thk]);\n    translate([30 + 10 - thk, 5, 10]) cube([thk, 30, 40]);\n}\n\n// Ottoman module\nmodule ottoman() {\n    // Legs\n    for (x = [-15, 15])\n        for (y = [-15, 15])\n            translate([x, y + 50, 0]) cylinder(h = 20, d = 6, $fn = 20);\n\n    // Frame\n    difference() {\n        translate([0, 50, 10]) cube([40, 40, thk], center = true);\n        translate([0, 50, 10]) cube([36, 36, thk + 1], center = true);\n    }\n\n    // Cushion\n    translate([0, 50, 14]) \n        scale([1, 1, 0.35]) \n        sphere(d = 38, $fn = 60);\n}\n\n// Assemble\nunion() {\n    chair();\n    ottoman();\n}",
    "renders": true
  },
  {
    "natural_object": "actionfigure",
    "openscad_code": "// Actionfigure Rocking Chair\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Overall dimensions\nchair_width = 60;\nchair_depth = 70;\nchair_height = 90;\nseat_height = 45;\nwall_thickness = 2;\n\nmodule rocker_base() {\n    difference() {\n        // Main rockers\n        translate([-chair_width/2, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=chair_depth+20, r=wall_thickness*3, center=true);\n        \n        translate([chair_width/2, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=chair_depth+20, r=wall_thickness*3, center=true);\n        \n        // Connecting bars\n        translate([0, -chair_depth/2+5, 0])\n            cube([chair_width+wall_thickness*4, wall_thickness*2, wall_thickness*4], center=true);\n        \n        translate([0, chair_depth/2-5, 0])\n            cube([chair_width+wall_thickness*4, wall_thickness*2, wall_thickness*4], center=true);\n    }\n}\n\nmodule seat() {\n    // Seat surface\n    translate([0, 0, seat_height])\n        cube([chair_width-20, chair_depth-10, wall_thickness*2], center=true);\n    \n    // Seat cushion detail\n    translate([0, 0, seat_height+wall_thickness])\n        cube([chair_width-22, chair_depth-12, wall_thickness], center=true);\n}\n\nmodule backrest() {\n    // Back frame\n    translate([0, -chair_depth/2+5, seat_height+chair_height/2])\n        cube([chair_width-20, wall_thickness*2, chair_height-seat_height+5], center=true);\n    \n    // Back slats\n    for(i = [-20:10:20]) {\n        translate([i, -chair_depth/2+5, seat_height+25])\n            cube([wall_thickness*2, wall_thickness, 35], center=true);\n    }\n    \n    // Top rail\n    translate([0, -chair_depth/2+5, seat_height+45])\n        cube([chair_width-18, wall_thickness*3, wall_thickness*3], center=true);\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2+5, 0, seat_height+15])\n        cube([wall_thickness*3, chair_depth/2-10, wall_thickness*3], center=true);\n    \n    // Left support\n    translate([-chair_width/2+5, -chair_depth/4, seat_height/2+7])\n        cube([wall_thickness*3, wall_thickness*2, chair_height/2], center=true);\n    \n    // Right armrest\n    translate([chair_width/2-5, 0, seat_height+15])\n        cube([wall_thickness*3, chair_depth/2-10, wall_thickness*3], center=true);\n    \n    // Right support\n    translate([chair_width/2-5, -chair_depth/4, seat_height/2+7])\n        cube([wall_thickness*3, wall_thickness*2, chair_height/2], center=true);\n}\n\nmodule legs() {\n    // Front legs\n    translate([-chair_width/2+10, chair_depth/2-15, seat_height/2])\n        cube([wall_thickness*3, wall_thickness*3, seat_height], center=true);\n    \n    translate([chair_width/2-10, chair_depth/2-15, seat_height/2])\n        cube([wall_thickness*3, wall_thickness*3, seat_height], center=true);\n    \n    // Back legs (connect to rockers)\n    translate([-chair_width/2+10, -chair_depth/2+15, seat_height/2])\n        cube([wall_thickness*3, wall_thickness*3, seat_height], center=true);\n    \n    translate([chair_width/2-10, -chair_depth/2+15, seat_height/2])\n        cube([wall_thickness*3, wall_thickness*3, seat_height], center=true);\n}\n\n// Assembly\nunion() {\n    rocker_base();\n    seat();\n    backrest();\n    armrests();\n    legs();\n}",
    "renders": true
  },
  {
    "natural_object": "robot",
    "openscad_code": "// Robot Chair - A 3D printable robot that functions as a small chair\n// Height: 100mm, Seat height: 50mm\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 70;\nchair_height = 100;\nseat_height = 50;\nleg_height = seat_height - 8;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Robot head module\nmodule robot_head() {\n    // Head box\n    translate([0, 0, chair_height - 25]) {\n        difference() {\n            cube([40, 35, 25], center=true);\n            translate([0, 0, wall]) cube([40 - wall*2, 35 - wall*2, 25 - wall], center=true);\n        }\n    }\n    \n    // Eyes (cylinders for 3D printing)\n    translate([-12, 0, chair_height - 15]) {\n        cylinder(h=5, r=5);\n    }\n    translate([12, 0, chair_height - 15]) {\n        cylinder(h=5, r=5);\n    }\n    \n    // Antenna\n    translate([0, 0, chair_height]) {\n        cylinder(h=15, r=2);\n        translate([0, 0, 15]) sphere(r=3);\n    }\n}\n\n// Robot arm module\nmodule robot_arm(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, seat_height + 10]) {\n        rotate([0, 0, angle]) {\n            // Upper arm\n            translate([-5, 0, 0]) cube([20, 10, 10], center=true);\n            \n            // Lower arm (chair back support)\n            translate([-25, 0, 0]) {\n                rotate([0, 0, -30]) {\n                    cube([30, 8, 8], center=true);\n                }\n            }\n            \n            // Hand (foot pad)\n            translate([-45, 0, 0]) {\n                cube([10, 12, 12], center=true);\n            }\n        }\n    }\n}\n\n// Robot leg module\nmodule robot_leg(x_pos, y_pos) {\n    // Upper leg\n    translate([x_pos, y_pos, seat_height]) {\n        cube([12, 12, leg_height], center=true);\n    }\n    \n    // Foot\n    translate([x_pos, y_pos, leg_height/2]) {\n        cube([20, 15, 8], center=true);\n    }\n}\n\n// Seat surface\nmodule seat() {\n    difference() {\n        cube([chair_width, chair_depth, 8], center=true);\n        translate([0, 0, wall]) cube([chair_width - wall*2, chair_depth - wall*2, 8 - wall], center=true);\n    }\n}\n\n// Backrest with robot torso details\nmodule backrest() {\n    // Main backrest panel\n    difference() {\n        translate([0, chair_depth/2 - 5, seat_height + 25]) {\n            cube([chair_width - 20, 10, 50], center=true);\n        }\n        translate([0, chair_depth/2 - 5, seat_height + 25 + wall]) {\n            cube([chair_width - 20 - wall*2, 10, 50 - wall*2], center=true);\n        }\n    }\n    \n    // Control panel details\n    for(i = [-2:2]) {\n        translate([i*10, chair_depth/2, seat_height + 45]) {\n            cylinder(h=3, r=4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, seat_height - 4]) seat();\n    \n    // Legs\n    robot_leg(-chair_width/2 + 15, -chair_depth/2 + 15);\n    robot_leg(chair_width/2 - 15, -chair_depth/2 + 15);\n    robot_leg(-chair_width/2 + 15, chair_depth/2 - 15);\n    robot_leg(chair_width/2 - 15, chair_depth/2 - 15);\n    \n    // Arms (also serve as back support)\n    robot_arm(-chair_width/2 + 10, 0, 20);\n    robot_arm(chair_width/2 - 10, 0, -20);\n    \n    // Backrest and torso\n    backrest();\n    \n    // Head\n    robot_head();\n}",
    "renders": true
  },
  {
    "natural_object": "stuffedanimal",
    "openscad_code": "// Teddy Bear Chair - A realistic stuffed animal furniture piece\n// Overall dimensions: ~100mm wide x ~120mm tall x ~90mm deep\n\n// Wall thickness for 3D printing\n$fn = 32;\nwall = 2;\n\n// Main seating area (bear body)\nmodule bear_body() {\n    // Main torso - rounded cube for plush feel\n    translate([0, 0, 45])\n    scale([1, 0.8, 1.2])\n    sphere(d=70);\n    \n    // Legs support\n    difference() {\n        translate([0, 0, 20])\n        scale([1.2, 1, 0.8])\n        sphere(d=60);\n        \n        // Hollow for sitting\n        translate([0, 0, 22])\n        scale([1.1, 0.9, 0.7])\n        sphere(d=56);\n    }\n}\n\n// Bear head (backrest)\nmodule bear_head() {\n    // Main head sphere\n    translate([0, -35, 75])\n    sphere(d=50);\n    \n    // Snout area\n    translate([0, -45, 65])\n    scale([0.8, 0.6, 0.6])\n    sphere(d=30);\n    \n    // Ears (left and right)\n    for(x = [-20, 20]) {\n        translate([x, -20, 85])\n        rotate([0, 0, x > 0 ? 15 : -15])\n        scale([0.8, 0.6, 1])\n        sphere(d=20);\n    }\n}\n\n// Arms (armrests)\nmodule bear_arms() {\n    for(side = [-1, 1]) {\n        // Main arm\n        translate([side * 35, 0, 55])\n        rotate([0, 0, side * 20])\n        scale([0.6, 2, 0.6])\n        cylinder(h=25, d1=30, d2=25);\n        \n        // Paw\n        translate([side * 40, 15, 45])\n        sphere(d=25);\n    }\n}\n\n// Legs (front supports)\nmodule bear_legs() {\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([side * 20, 10, 25])\n        rotate([0, 0, side * 10])\n        scale([0.7, 0.8, 1.2])\n        cylinder(h=30, d=25);\n        \n        // Foot\n        translate([side * 25, 15, 10])\n        rotate([0, 0, side * 20])\n        scale([1.2, 1.5, 0.5])\n        sphere(d=30);\n    }\n}\n\n// Face details\nmodule bear_face() {\n    // Eyes\n    for(x = [-8, 8]) {\n        translate([x, -45, 75])\n        sphere(d=8);\n    }\n    \n    // Nose\n    translate([0, -50, 70])\n    sphere(d=10);\n    \n    // Mouth line\n    translate([0, -50, 65])\n    rotate([90, 0, 0])\n    cylinder(h=0.1, d=15);\n}\n\n// Structural support frame inside\nmodule internal_frame() {\n    // Main spine\n    translate([0, 0, 40])\n    cylinder(h=50, d=10);\n    \n    // Cross supports\n    for(z = [30, 50, 70]) {\n        translate([0, 0, z])\n        rotate([90, 0, 0])\n        cylinder(h=60, d=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bear structure\n    bear_body();\n    bear_head();\n    bear_arms();\n    bear_legs();\n    bear_face();\n    \n    // Internal frame (for structural integrity)\n    %internal_frame();\n}",
    "renders": true
  },
  {
    "natural_object": "warrior",
    "openscad_code": "// Warrior Chair - realistic style, medium complexity\n// A throne-like chair with shield backrest and spear legs\n\n$fn = 50;  // smooth curves for 3D printing\n\n// Overall dimensions\nseat_width = 45;\nseat_depth = 40;\nseat_height = 45;\nback_height = 70;\n\n// Wall thickness\nwall = 2;\n\nmodule seat() {\n    // Main seat platform\n    difference() {\n        cube([seat_width, seat_depth, wall]);\n        translate([wall, wall, -0.1])\n            cube([seat_width - 2*wall, seat_depth - 2*wall, wall + 0.2]);\n    }\n}\n\nmodule shield_back() {\n    // Viking-style round shield backrest\n    translate([seat_width/2, 0, seat_height]) {\n        rotate([0, 0, 0]) {\n            // Shield boss\n            difference() {\n                cylinder(h = wall*2, r = 25);\n                translate([0, 0, wall])\n                    cylinder(h = wall, r = 20);\n            }\n            // Shield rim\n            translate([0, 0, wall*2])\n                cylinder(h = wall, r1 = 25, r2 = 30);\n            \n            // Cross reinforcements\n            for(i = [0:90:270]) {\n                rotate([0, 0, i])\n                    translate([-2, 0, 0])\n                        cube([4, 30, wall*2]);\n            }\n        }\n    }\n}\n\nmodule spear_legs() {\n    // Four spear-like legs\n    for(x = [seat_width/4, 3*seat_width/4]) {\n        for(y = [seat_depth/4, 3*seat_depth/4]) {\n            translate([x, y, -seat_height/2]) {\n                cylinder(h = seat_height, r = 3);\n                // Spear tip\n                translate([0, 0, -seat_height/2])\n                    cylinder(h = 10, r1 = 3, r2 = 0);\n            }\n        }\n    }\n}\n\nmodule armrests() {\n    // Sword-shaped armrests\n    difference() {\n        // Blade\n        translate([-5, seat_depth - 5, seat_height - 5]) {\n            rotate([90, 0, 0])\n                cylinder(h = 25, r1 = 15, r2 = 5);\n        }\n        // Grip hole\n        translate([0, seat_depth, seat_height + 5]) {\n            rotate([90, 0, 0])\n                cylinder(h = 30, r = 3);\n        }\n    }\n    \n    mirror([1, 0, 0]) {\n        translate([-seat_width + 5, seat_depth - 5, seat_height - 5]) {\n            rotate([90, 0, 0])\n                cylinder(h = 25, r1 = 15, r2 = 5);\n        }\n    }\n}\n\nmodule decorative_studs() {\n    // Metal studs around seat edge\n    for(i = [0:30:seat_width-30]) {\n        translate([i+15, 0, seat_height + wall])\n            sphere(r = wall);\n        translate([i+15, seat_depth, seat_height + wall])\n            sphere(r = wall);\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    shield_back();\n    spear_legs();\n    armrests();\n    decorative_studs();\n}",
    "renders": true
  },
  {
    "natural_object": "hero",
    "openscad_code": "// Hero Lounge Chair - Realistic Style - Medium Complexity\n// A modern ergonomic lounge chair inspired by iconic mid-century design\n\n$fn = 32;\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 85;\nchair_height = 75;\nseat_height = 42;\narmrest_height = 55;\n\n// Material thickness for 3D printing\nwall_thickness = 2;\n\nmodule chair_base() {\n    // Main seat frame - slightly curved for comfort\n    translate([0, 0, seat_height - 5])\n        difference() {\n            // Outer shell with ergonomic curve\n            scale([1, 0.95, 1])\n                rotate([5, 0, 0])\n                    cube([chair_width, chair_depth, 10], center = true);\n            // Hollow interior for weight reduction\n            scale([0.9, 0.85, 0.8])\n                cube([chair_width, chair_depth, 15], center = true);\n        }\n    \n    // Leg structure - 4 tapered legs with stretchers\n    for(x = [-chair_width/2 + 10, chair_width/2 - 10])\n        for(y = [-chair_depth/2 + 10, chair_depth/2 - 10]) {\n            // Front legs\n            translate([x, y, 0])\n                cylinder(h = seat_height - 5, r1 = 4, r2 = 3);\n            \n            // Back legs\n            translate([x, y, 0])\n                rotate([10, 0, 0])\n                    cylinder(h = seat_height + 10, r1 = 4, r2 = 3);\n        }\n    \n    // Side stretchers for stability\n    for(y_offset = [-chair_depth/2 + 15, chair_depth/2 - 15]) {\n        translate([0, y_offset, seat_height/2])\n            cube([chair_width - 20, wall_thickness, wall_thickness], center = true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with lumbar support\n    translate([0, -chair_depth/2 + 5, seat_height + 25])\n        difference() {\n            // Main backrest shell\n            rotate([15, 0, 0])\n                scale([0.9, 0.7, 1])\n                    cube([chair_width - 20, 8, 40], center = true);\n            // Ventilation holes pattern\n            for(i = [-20:10:20])\n                translate([i, 0, 10])\n                    cylinder(h = 10, r = 3);\n        }\n}\n\nmodule armrests() {\n    // Sculpted armrests integrated with backrest\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 5), 0, armrest_height]) {\n            // Armrest support\n            rotate([0, 0, side * 5])\n                cube([wall_thickness * 2, chair_depth/2 - 10, 15], center = true);\n            \n            // Armrest pad\n            translate([0, chair_depth/4 - 5, 5])\n                scale([1.2, 1, 0.8])\n                    sphere(r = 8);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Upholstered seat cushion with subtle tufting\n    translate([0, 0, seat_height + 2])\n        difference() {\n            // Main cushion\n            scale([0.85, 0.9, 1])\n                cube([chair_width - 10, chair_depth - 15, 8], center = true);\n            \n            // Tufting details\n            for(x = [-20:20:20])\n                for(y = [-15:15:30])\n                    translate([x, y, 3])\n                        sphere(r = 2);\n        }\n}\n\nmodule decorative_details() {\n    // Headrest pillow\n    translate([0, -chair_depth/2 + 20, seat_height + 45])\n        scale([0.6, 0.4, 0.3])\n            cube([chair_width, 20, 15], center = true);\n    \n    // Side panels with subtle texture\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 2), 0, seat_height + 10])\n            rotate([0, side * 5, 0])\n                difference() {\n                    cube([wall_thickness, chair_depth/1.5, 25], center = true);\n                    // Texture pattern\n                    for(i = [-10:5:10])\n                        translate([0, i, 0])\n                            cube([wall_thickness + 1, 3, 2], center = true);\n                }\n    }\n}\n\n// Assembly the complete chair\nunion() {\n    chair_base();\n    backrest();\n    armrests();\n    seat_cushion();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "natural_object": "villain",
    "openscad_code": "// Villain Throne Chair - Realistic style with medium complexity\n// A dark, angular throne with skull motifs and spiked armrests\n\n$fn = 36;  // Smooth curves for printing\nwall_thickness = 2;\n\n// Overall dimensions (mm)\nthrone_width = 80;\nthrone_depth = 70;\nthrone_height = 120;\nseat_height = 45;\n\nmodule skull() {\n    // Basic skull shape for throne back\n    translate([0, 0, 8]) {\n        difference() {\n            // Skull dome\n            sphere(d=16);\n            // Eye sockets\n            translate([-4, 2, 2]) rotate([0, 0, 0]) sphere(d=4);\n            translate([4, 2, 2]) rotate([0, 0, 0]) sphere(d=4);\n            // Nose cavity\n            translate([0, -2, -2]) cube([3, 4, 3], center=true);\n        }\n    }\n    // Jaw\n    translate([0, -8, -6]) {\n        cube([12, 8, 6], center=true);\n    }\n}\n\nmodule throne_back() {\n    // Main back panel with skull motifs\n    difference() {\n        // Main back - slightly curved\n        translate([0, 0, throne_height/2]) {\n            rotate([0, 5, 0]) {\n                cube([throne_width-20, wall_thickness, throne_height-20], center=true);\n            }\n        }\n        \n        // Decorative cutouts\n        for(i = [-1, 0, 1]) {\n            translate([i*20, 0, 30]) {\n                rotate([0, 5, 0]) {\n                    cube([8, wall_thickness+1, 25], center=true);\n                }\n            }\n        }\n    }\n    \n    // Skull decorations\n    translate([-20, 0, 60]) skull();\n    translate([20, 0, 60]) skull();\n}\n\nmodule spiked_armrest() {\n    // Armrest with spike decoration\n    translate([throne_width/2 - 10, 0, seat_height + 10]) {\n        union() {\n            // Armrest base\n            cube([15, 10, 20]);\n            \n            // Spikes\n            for(i = [0, 1, 2]) {\n                translate([7.5, -5 + i*5, 20]) {\n                    cylinder(h1=15, r1=2, r2=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule throne_seat() {\n    // Seat with slight cavity\n    difference() {\n        cube([throne_width-20, throne_depth-20, 8], center=true);\n        translate([0, 0, -1]) {\n            cube([throne_width-24, throne_depth-24, 10], center=true);\n        }\n    }\n}\n\nmodule throne_legs() {\n    // Four legs with gothic styling\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(throne_width/2 - 15), y*(throne_depth/2 - 15), seat_height/2]) {\n                // Tapered legs\n                cylinder(h1=seat_height-4, r1=4, r2=2);\n                \n                // Decorative rings\n                for(h = [10, 25]) {\n                    translate([0, 0, h]) {\n                        cylinder(h1=2, r1=5, r2=5);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule base_platform() {\n    // Raised platform base\n    translate([0, 0, -2]) {\n        cube([throne_width+10, throne_depth+10, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base platform\n    base_platform();\n    \n    // Legs\n    throne_legs();\n    \n    // Seat\n    translate([0, 0, seat_height-4]) {\n        throne_seat();\n    }\n    \n    // Back support\n    translate([0, -throne_depth/2 + 10, seat_height + (throne_height-seat_height)/2]) {\n        throne_back();\n    }\n    \n    // Armrests\n    mirror([1, 0, 0]) {\n        spiked_armrest();\n    }\n    \n    // Center skull on back\n    translate([0, -throne_depth/2 + 10, seat_height + 40]) {\n        skull();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "cyborg",
    "openscad_code": "// Cyborg Chair - 1:12 scale office chair with biomechanical features\n// Overall dimensions: 120mm tall x 80mm wide x 85mm deep\n\n$fn = 32;\nchair_color = \"silver\";\ndetail_color = \"darkgreen\";\n\nmodule seat_base() {\n    // Main seat cushion with organic vent pattern\n    difference() {\n        translate([0, 0, 45]) \n            cube([70, 70, 12], center=true);\n        \n        // Ventilation slots\n        for(i = [-20:10:20]) {\n            translate([i, 0, 52])\n                rotate([0, 45, 0])\n                    cube([3, 65, 3], center=true);\n        }\n    }\n    \n    // Cybernetic side panels\n    for(side = [-1, 1]) {\n        translate([side * 37, 0, 45])\n            difference() {\n                cube([6, 74, 14], center=true);\n                for(j = [-30:15:30]) {\n                    translate([side * 2, j, 45])\n                        cylinder(h=15, r=2, center=true);\n                }\n            }\n    }\n}\n\nmodule backrest() {\n    // Main back support\n    translate([0, -30, 95])\n        rotate([10, 0, 0])\n            cube([65, 8, 80], center=true);\n    \n    // Spine-like support structure\n    for(i = [60:8:130]) {\n        translate([0, -30, i])\n            cylinder(h=2, r1=25, r2=22);\n    }\n    \n    // Biomechanical mesh\n    difference() {\n        translate([0, -34, 95])\n            rotate([10, 0, 0])\n                cube([60, 4, 75], center=true);\n        \n        for(x = [-25:10:25])\n            for(y = [60:10:130])\n                translate([x, -34, y])\n                    sphere(r=3);\n    }\n}\n\nmodule hydraulic_column() {\n    // Central gas cylinder\n    translate([0, 0, 30])\n        cylinder(h=30, r=8);\n    \n    // Protective bellows (stacked cylinders)\n    for(z = [5:3:25]) {\n        translate([0, 0, z])\n            cylinder(h=2, r1=10, r2=12);\n    }\n    \n    // Control lever\n    translate([-12, 0, 42])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=3);\n}\n\nmodule wheel_base() {\n    // Central hub\n    translate([0, 0, 5])\n        cylinder(h=10, r=15);\n    \n    // Five star base with reinforcement\n    for(angle = [0:72:360]) {\n        rotate([0, 0, angle])\n            translate([15, 0, 5])\n                cube([30, 8, 8], center=true);\n        \n        // Wheel mounting point\n        rotate([0, 0, angle])\n            translate([40, 0, 2])\n                cylinder(h=4, r=4);\n        \n        // Structural rib\n        rotate([0, 0, angle])\n            translate([25, 0, 9])\n                cube([20, 3, 2], center=true);\n    }\n}\n\nmodule armrests() {\n    for(side = [-1, 1]) {\n        // Support post\n        translate([side * 35, 15, 60])\n            cylinder(h=25, r=4);\n        \n        // Rest pad with padding\n        translate([side * 35, 25, 73])\n            cube([8, 20, 4], center=true);\n        \n        // Adjustment mechanism\n        translate([side * 35, 15, 60])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    seat_base();\n    backrest();\n    hydraulic_column();\n    wheel_base();\n    armrests();\n    \n    // Additional cybernetic details\n    // Neural interface at top of backrest\n    translate([0, -30, 135])\n        sphere(r=6);\n    \n    // Cable bundles\n    translate([20, -20, 70])\n        rotate([0, 90, 45])\n            cylinder(h=25, r=2);\n    \n    translate([-20, -20, 70])\n        rotate([0, 90, -45])\n            cylinder(h=25, r=2);\n}",
    "renders": true
  },
  {
    "natural_object": "ninja",
    "openscad_code": "// Ninja Chair - A stealthy seating solution for the modern warrior\n// Overall dimensions: 120mm height x 80mm width x 75mm depth\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Chair module\nmodule ninja_chair() {\n    // Chair seat - main body\n    difference() {\n        // Main seat block\n        cube([70, 75, 12]);\n        \n        // Carve ninja mask opening - triangular smile\n        translate([35, 37, 11])\n            rotate([0, 0, 0])\n            linear_extrude(height=3)\n            polygon(points=[[-8, 0], [8, 0], [0, -6]]);\n        \n        // Eye slits\n        translate([25, 25, 11])\n            cube([8, 2, 3]);\n        translate([25, 48, 11])\n            cube([8, 2, 3]);\n    }\n    \n    // Backrest - ninja hood shape\n    difference() {\n        // Main hood shape\n        translate([0, 0, 12])\n            rotate([0, 10, 0])\n            cube([70, 75, 45]);\n        \n        // Hollow out backrest\n        translate([wall, wall, 12 + wall])\n            rotate([0, 10, 0])\n            cube([70 - 2*wall, 75 - 2*wall, 45 - 2*wall]);\n        \n        // Head opening curve\n        translate([35, 37, 50])\n            rotate([0, 10, 0])\n            cylinder(h=20, r1=20, r2=25, $fn=32);\n    }\n    \n    // Legs - katana-inspired supports\n    for(i = [0, 1]) {\n        // Front legs\n        translate([10 + i*50, 10, -40])\n            rotate([0, 5 + i*(-10), 0])\n            cylinder(h=45, r1=4, r2=3, $fn=16);\n        \n        // Back legs\n        translate([10 + i*50, 65, -40])\n            rotate([0, -5 + i*10, 0])\n            cylinder(h=45, r1=4, r2=3, $fn=16);\n    }\n    \n    // Armrests - shuriken supports\n    for(side = [0, 1]) {\n        translate([side*70, 30, 25])\n            rotate([0, 0, side*180])\n            difference() {\n                cube([8, 15, 20]);\n                translate([wall, wall, wall])\n                    cube([8 - 2*wall, 15 - 2*wall, 20 - 2*wall]);\n            }\n        \n        // Shuriken detail on armrest\n        translate([side*70 + (side ? -4 : 4), 37, 35])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=1.5, r=6, $fn=8);\n                for(i = [0:3]) {\n                    rotate([0, 0, i*90 + 45])\n                    translate([0, -2, 0])\n                    cube([4, 4, 2]);\n                }\n            }\n    }\n    \n    // Ninja star footrest detail\n    translate([35, 37, -40])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=wall, r=25, $fn=8);\n            for(i = [0:3]) {\n                rotate([0, 0, i*90 + 45])\n                translate([0, -8, 0])\n                cube([16, 16, wall]);\n            }\n        }\n}\n\n// Render the chair\nninja_chair();",
    "renders": true
  },
  {
    "natural_object": "pirate",
    "openscad_code": "// Pirate treasure chest / seat\n// Overall dimensions: 100 x 70 x 65 mm (closed)\n\n// Parameters\nwall = 2;               // 3D-printable wall thickness\nlidAngle = 60;          // degrees to open the lid\nbandWidth = 6;          // metal band width\nrivetR = 2;             // rivet radius\nrivetH = 1;             // rivet height\nstaveW = 14;            // wooden stave width\nstaveH = 5;             // wooden stave height projection\nhandleR = 4;            // side handle radius\nhandleTh = 3;           // handle thickness\n\n// Main chest body\nmodule chestBody() {\n    difference() {\n        // Outer shell\n        roundedBox(100, 70, 60, 4);\n        \n        // Inner cavity\n        translate([0, 0, wall])\n            roundedBox(100 - 2*wall, 70 - 2*wall, 60 - wall, 4);\n    }\n}\n\n// Rounded box helper\nmodule roundedBox(l, w, h, r) {\n    hull() {\n        for(x=[-1,1], y=[-1,1], z=[-1,1])\n            translate([x*(l/2-r), y*(w/2-r), z*(h/2-r)])\n                sphere(r=r);\n    }\n}\n\n// Lid with staves\nmodule lid() {\n    rotate([lidAngle, 0, 0])\n        translate([0, 0, 30])\n            difference() {\n                // Outer lid shell\n                roundedBox(100, 70, 10, 4);\n                \n                // Inner cavity\n                translate([0, 0, wall])\n                    roundedBox(100 - 2*wall, 70 - 2*wall, 10 - wall, 4);\n            }\n}\n\n// Metal band around the chest\nmodule band() {\n    // Front band\n    translate([0, 35 - bandWidth/2, 30])\n        cube([100, bandWidth, 60], center=true);\n    \n    // Back band\n    translate([0, -35 + bandWidth/2, 30])\n        cube([100, bandWidth, 60], center=true);\n    \n    // Side bands on lid\n    rotate([lidAngle, 0, 0])\n        translate([0, 0, 35]) {\n            translate([0, 35 - bandWidth/2, 0])\n                cube([100, bandWidth, 10], center=true);\n            translate([0, -35 + bandWidth/2, 0])\n                cube([100, bandWidth, 10], center=true);\n        }\n}\n\n// Rivets along bands\nmodule rivets() {\n    for(pos=[-40, -20, 0, 20, 40])\n        for(side=[-1, 1])\n            translate([pos, side*(35 - bandWidth/2 - rivetR), 30])\n                cylinder(h=rivetH, r=rivetR);\n}\n\n// Wooden stave texture on lid\nmodule staves() {\n    rotate([lidAngle, 0, 0])\n        translate([0, 0, 35 + 5]) {\n            for(i=[-3:1:3]) {\n                translate([i*staveW, 0, 0])\n                    cube([staveW - 2, 70, staveH], center=true);\n            }\n        }\n}\n\n// Side handles\nmodule handles() {\n    for(side=[-1, 1])\n        translate([0, side*45, 30]) {\n            rotate([0, 90, 0])\n                difference() {\n                    // Handle ring\n                    rotate_extrude(angle=360, $fn=20)\n                        translate([handleR, 0, 0])\n                            circle(r=handleTh/2);\n                    // Cut hole\n                    rotate_extrude(angle=360, $fn=20)\n                        translate([handleR, 0, 0])\n                            circle(r=handleTh/2 - wall);\n                }\n        }\n}\n\n// Skull emblem on lid\nmodule skull() {\n    rotate([lidAngle, 0, 0])\n        translate([0, 0, 40]) {\n            // Skull base\n            sphere(r=8);\n            \n            // Eye sockets\n            translate([-3, 3, 3])\n                sphere(r=2);\n            translate([3, 3, 3])\n                sphere(r=2);\n            \n            // Crossbones\n            rotate([90, 0, 0])\n                for(a=[0, 90])\n                    rotate([0, 0, a])\n                        translate([0, 0, 5])\n                            cylinder(h=2, r1=1.5, r2=1.5, h=20);\n        }\n}\n\n// Assembly\nunion() {\n    // Main parts\n    chestBody();\n    lid();\n    \n    // Details\n    band();\n    rivets();\n    staves();\n    handles();\n    skull();\n}\n\n// Base support (optional print bed adhesion)\ntranslate([0, 0, -1])\n    cube([104, 74, 2], center=true);",
    "renders": true
  },
  {
    "natural_object": "knight",
    "openscad_code": "// Knight Furniture Piece - Realistic Style, Medium Complexity\n// A knight-shaped cabinet with functional storage compartments\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main dimensions\nknight_height = 130;\nknight_width = 65;\nknight_depth = 45;\n\n// Base cabinet body\nmodule base_cabinet() {\n    difference() {\n        // Main body\n        union() {\n            // Base block\n            translate([0, 0, knight_height * 0.2])\n                cube([knight_width, knight_depth, knight_height * 0.6], center=true);\n            \n            // Front armor plating curve\n            translate([0, knight_depth/2 - 2, knight_height * 0.5])\n                rotate([90, 0, 0])\n                    cylinder(h=knight_width * 0.8, r1=knight_width/3, r2=knight_width/4, center=true);\n        }\n        \n        // Front door cavity\n        translate([0, knight_depth/2 - wall_thickness/2, knight_height * 0.5])\n            cube([knight_width * 0.7, wall_thickness + 1, knight_height * 0.5], center=true);\n        \n        // Side cavities for hinges\n        translate([-knight_width/2 + 5, knight_depth/2 - 10, knight_height * 0.5])\n            cube([5, 10, 20], center=true);\n        translate([knight_width/2 - 5, knight_depth/2 - 10, knight_height * 0.5])\n            cube([5, 10, 20], center=true);\n    }\n}\n\n// Helmet storage compartment\nmodule helmet_section() {\n    difference() {\n        // Helmet shape\n        union() {\n            // Top dome\n            translate([0, 0, knight_height * 0.85])\n                sphere(d=knight_width * 0.8);\n            \n            // Neck guard\n            translate([0, 0, knight_height * 0.75])\n                cylinder(h=knight_height * 0.1, r1=knight_width/2.5, r2=knight_width/2.8, center=true);\n        }\n        \n        // Internal storage cavity\n        translate([0, 0, knight_height * 0.85])\n            sphere(d=knight_width * 0.8 - wall_thickness * 2);\n    }\n}\n\n// Armor joints and details\nmodule armor_details() {\n    // Vertical ribbing\n    for(i = [-1, 0, 1]) {\n        translate([i * knight_width/4, 0, knight_height * 0.5])\n            cube([wall_thickness * 1.5, knight_depth * 0.9, knight_height * 0.6], center=true);\n    }\n    \n    // Horizontal bands\n    for(h = [0.3, 0.5, 0.7]) {\n        translate([0, 0, knight_height * h])\n            difference() {\n                cube([knight_width * 1.1, knight_depth * 1.1, wall_thickness * 2], center=true);\n                cube([knight_width * 0.9, knight_depth * 0.9, wall_thickness * 3], center=true);\n            }\n    }\n}\n\n// Leg supports\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([side * knight_width/3, 0, knight_height * 0.1]) {\n            // Main leg\n            cylinder(h=knight_height * 0.2, r=wall_thickness * 3);\n            \n            // Foot base\n            translate([0, -knight_depth/4, -knight_height * 0.1])\n                cube([wall_thickness * 6, wall_thickness * 4, wall_thickness * 2], center=true);\n        }\n    }\n}\n\n// Door with handle\nmodule door() {\n    translate([0, knight_depth/2 + wall_thickness/2, knight_height * 0.5])\n        rotate([0, 90, 0])\n            difference() {\n                // Door panel\n                cube([knight_height * 0.5, knight_width * 0.7, wall_thickness * 2], center=true);\n                \n                // Handle recess\n                translate([knight_height * 0.2, knight_width * 0.25, 0])\n                    cube([10, 5, wall_thickness + 1], center=true);\n                \n                // Handle\n                translate([knight_height * 0.2, knight_width * 0.25, wall_thickness/2])\n                    cylinder(h=wall_thickness * 2, r=wall_thickness);\n            }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    base_cabinet();\n    helmet_section();\n    \n    // Details\n    armor_details();\n    legs();\n    \n    // Door (slightly offset for clearance)\n    translate([0, -0.5, 0])\n        door();\n}",
    "renders": true
  },
  {
    "natural_object": "samurai",
    "openscad_code": "// Samurai Armor Cabinet - Medium Complexity\n// A small storage cabinet shaped like a samurai torso with traditional details\n\n// Overall dimensions (mm)\ncabinet_width = 80;\ncabinet_depth = 60;\ncabinet_height = 120;\n\n// Wall thickness\nwall_thick = 2;\n\nmodule cabinet_body() {\n    // Main torso cabinet\n    difference() {\n        // Outer shell - slightly rounded body\n        minkowski() {\n            cube([cabinet_width, cabinet_depth, cabinet_height], center=true);\n            sphere(3);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -wall_thick/2])\n        cube([cabinet_width-wall_thick*2, cabinet_depth-wall_thick*2, cabinet_height-wall_thick], center=true);\n    }\n}\n\nmodule chest_plates() {\n    // Traditional samurai chest armor (do) - overlapping plates\n    for(i = [0:3]) {\n        translate([0, cabinet_depth/2 + 1, -cabinet_height/2 + 15 + i*20])\n        rotate([90, 0, 0])\n        difference() {\n            // Each plate\n            scale([1, 0.8, 1])\n            cylinder(h=wall_thick*1.5, r1=30, r2=25);\n            // Rivet holes\n            for(j = [-1, 1]) {\n                translate([j*20, 0, -1])\n                cylinder(h=wall_thick*2, r=2);\n            }\n        }\n    }\n}\n\nmodule shoulder_guards() {\n    // Sode (shoulder guards) - cabinet side details\n    for(side = [-1, 1]) {\n        translate([side * cabinet_width/2, 0, cabinet_height/2 - 20])\n        rotate([0, side * 15, 0])\n        difference() {\n            // Laminated plates\n            for(i = [0:2]) {\n                translate([0, 0, -i*6])\n                scale([0.8, 1, 0.3])\n                cube([30, cabinet_depth, 8], center=true);\n            }\n            // Hanging cord holes\n            translate([0, -10, 0])\n            cylinder(h=15, r=2);\n        }\n    }\n}\n\nmodule kabuto_top() {\n    // Helmet-shaped top with storage compartment\n    translate([0, 0, cabinet_height/2 + 8])\n    difference() {\n        // Helmet dome\n        sphere(25);\n        \n        // Inner cavity\n        sphere(23);\n        \n        // Neck opening\n        translate([0, 0, -15])\n        cube([30, 20, 30], center=true);\n    }\n    \n    // Maedate (helmet crest) - small drawer pull\n    translate([0, cabinet_depth/2 + 5, cabinet_height/2 + 25])\n    rotate([90, 0, 0])\n    cylinder(h=8, r1=3, r2=5);\n}\n\nmodule door_hinges() {\n    // Traditional pivot hinges\n    for(pos = [cabinet_height/4, -cabinet_height/4]) {\n        translate([cabinet_width/2 + 2, 0, pos])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=3);\n    }\n}\n\nmodule base_support() {\n    // Four legs with traditional Japanese joinery appearance\n    for(x = [-1, 1]) {\n        for(z = [-1, 1]) {\n            translate([x * (cabinet_width/2 - 15), z * (cabinet_depth/2 - 15), -cabinet_height/2 - 15])\n            difference() {\n                // Tapered leg\n                cylinder(h=30, r1=6, r2=4);\n                // Mortise detail\n                translate([0, 0, 10])\n                cube([3, 10, 8], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    chest_plates();\n    shoulder_guards();\n    kabuto_top();\n    door_hinges();\n    base_support();\n}\n\n// Door panel (separate part for printing)\ntranslate([cabinet_width/2 + 1, 0, 0])\nrotate([0, 90, 0])\ndifference() {\n    cube([cabinet_height, cabinet_depth - 4, wall_thick]);\n    // Handle - katana guard shaped\n    translate([cabinet_height/2 - 10, cabinet_depth/2 - 10, wall_thick/2])\n    cylinder(h=10, r1=8, r2=6);\n    translate([cabinet_height/2 - 10, cabinet_depth/2 - 10, 5])\n    sphere(4);\n}",
    "renders": true
  },
  {
    "natural_object": "dragon",
    "openscad_code": "// Dragon Bookshelf - Realistic Style\n// Overall dimensions: 120mm (L) x 80mm (D) x 150mm (H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule dragon_body() {\n    // Tail base\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h=20, d1=30, d2=25, $fn=32);\n        translate([30, 0, 0])\n            cylinder(h=20, d1=25, d2=20, $fn=32);\n    }\n    \n    // Body segments\n    for(i=[1:3]) {\n        translate([i*25, 0, 5])\n            scale([1.2, 1, 1])\n            cylinder(h=25, d=35-i*5, $fn=32);\n    }\n    \n    // Chest section\n    translate([100, 0, 40])\n        scale([1.5, 1.2, 1.5])\n        sphere(d=50, $fn=32);\n}\n\n// Head module\nmodule dragon_head() {\n    // Main head\n    translate([110, 0, 80])\n        rotate([0, 0, -20])\n        scale([1.2, 0.8, 1])\n        sphere(d=40, $fn=32);\n    \n    // Snout\n    translate([125, 0, 80])\n        rotate([0, -10, 0])\n        cylinder(h=25, d1=30, d2=15, $fn=16);\n    \n    // Horns\n    for(angle=[-30, 30]) {\n        translate([110, 0, 100])\n            rotate([0, 0, angle])\n            rotate([30, 0, 0])\n            cylinder(h=20, d=6, $fn=12);\n    }\n}\n\n// Wings as shelves\nmodule dragon_wings() {\n    for(side=[-1, 1]) {\n        // Left wing\n        translate([70, side*40, 60])\n            rotate([0, side*20, 45*side])\n            difference() {\n                // Wing membrane\n                scale([1.5, 1, 0.1])\n                sphere(d=50, $fn=32);\n                \n                // Shelf hollow\n                translate([0, 0, -5])\n                    scale([1.3, 0.8, 0.2])\n                    sphere(d=45, $fn=32);\n            }\n        \n        // Wing support\n        translate([80, side*20, 30])\n            rotate([0, side*10, 0])\n            cylinder(h=40, d=8, $fn=12);\n    }\n}\n\n// Legs as supports\nmodule dragon_legs() {\n    for(pos=[[20, -20], [20, 20], [80, -25], [80, 25]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=30, d=12, $fn=16);\n        \n        // Feet\n        translate([pos[0]-5, pos[1], 0])\n            scale([1.5, 1, 0.5])\n            sphere(d=15, $fn=16);\n    }\n}\n\n// Spine details\nmodule spine_details() {\n    for(i=[0:5]) {\n        translate([20+i*15, 0, 25+sin(i*30)*5])\n            rotate([0, 90, 0])\n            cylinder(h=8, d=6, $fn=6);\n    }\n}\n\n// Main shelf cavity\nmodule shelf_cavity() {\n    // Back panel\n    translate([60, 0, 75])\n        cube([100, 70, wall], center=true);\n    \n    // Bottom shelf\n    translate([60, 0, 40])\n        cube([90, 60, wall], center=true);\n    \n    // Mid shelf\n    translate([60, 0, 70])\n        cube([80, 50, wall], center=true);\n    \n    // Top shelf\n    translate([60, 0, 100])\n        cube([70, 40, wall], center=true);\n}\n\n// Assembly\nunion() {\n    // Structural elements\n    dragon_body();\n    dragon_legs();\n    shelf_cavity();\n    \n    // Decorative elements\n    dragon_head();\n    dragon_wings();\n    spine_details();\n}",
    "renders": true
  },
  {
    "natural_object": "tiger",
    "openscad_code": "// Tiger Stool\n// Overall dimensions: 120mm wide x 200mm deep x 450mm high\n\n// Tiger body as seat\nmodule tiger_body() {\n    // Main seat block (tiger torso)\n    difference() {\n        // Overall body shape\n        scale([1.2, 1.5, 0.8])\n        translate([0, 0, 20])\n        sphere(d=80, $fn=30);\n        \n        // Hollow out for printability\n        scale([1.15, 1.45, 0.75])\n        translate([0, 0, 20])\n        sphere(d=76, $fn=30);\n    }\n    \n    // Tail curl (structural support)\n    for(i=[0:5:30]) {\n        rotate([0, 0, -i])\n        translate([35 - i*0.5, -50 - i*0.3, 25 - i*0.1])\n        rotate([90, 0, 0])\n        cylinder(h=10, d1=8, d2=6, $fn=8);\n    }\n}\n\n// Tiger head as backrest\nmodule tiger_head() {\n    // Head shape\n    difference() {\n        // Main head\n        translate([0, 0, 0])\n        scale([1, 1.1, 1.2])\n        sphere(d=60, $fn=20);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n        scale([0.9, 1, 1.1])\n        sphere(d=56, $fn=20);\n    }\n    \n    // Ears (triangular prisms)\n    // Left ear\n    translate([-25, 0, 25])\n    rotate([0, 30, -30])\n    linear_extrude(height=15, scale=0.5)\n    polygon([[0,0], [12,0], [6,10]]);\n    \n    // Right ear\n    translate([25, 0, 25])\n    mirror([1,0,0])\n    rotate([0, 30, -30])\n    linear_extrude(height=15, scale=0.5)\n    polygon([[0,0], [12,0], [6,10]]);\n    \n    // Eyes (cylindrical indents)\n    for(x=[-12, 12]) {\n        translate([x, 18, 10])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=8, $fn=20);\n    }\n    \n    // Nose (small sphere)\n    translate([0, 25, 5])\n    sphere(d=8, $fn=10);\n}\n\n// Legs module\nmodule tiger_legs() {\n    // Front left leg\n    translate([-30, 30, 0])\n    rotate([0, -10, 0])\n    difference() {\n        cylinder(h=200, d=20, $fn=12);\n        translate([0, 0, 5])\n        cylinder(h=190, d=16, $fn=12);\n    }\n    \n    // Front right leg\n    translate([30, 30, 0])\n    rotate([0, 10, 0])\n    difference() {\n        cylinder(h=200, d=20, $fn=12);\n        translate([0, 0, 5])\n        cylinder(h=190, d=16, $fn=12);\n    }\n    \n    // Back left leg\n    translate([-30, -30, 0])\n    rotate([0, 10, 0])\n    difference() {\n        cylinder(h=200, d=20, $fn=12);\n        translate([0, 0, 5])\n        cylinder(h=190, d=16, $fn=12);\n    }\n    \n    // Back right leg\n    translate([30, -30, 0])\n    rotate([0, -10, 0])\n    difference() {\n        cylinder(h=200, d=20, $fn=12);\n        translate([0, 0, 5])\n        cylinder(h=190, d=16, $fn=12);\n    }\n    \n    // Leg cross-bracing\n    translate([0, 0, 100])\n    cube([50, 50, 8], center=true);\n}\n\n// Tiger stripes pattern\nmodule tiger_stripes() {\n    for(i=[0:15:60]) {\n        // Side stripes\n        rotate([0, 0, i])\n        translate([35, 0, 25])\n        scale([0.5, 1, 0.3])\n        cube([20, 3, 8]);\n        \n        rotate([0, 0, -i])\n        translate([-35, 0, 25])\n        scale([0.5, 1, 0.3])\n        cube([20, 3, 8]);\n    }\n}\n\n// Assembly\nunion() {\n    // Position body as seat\n    translate([0, 0, 200])\n    tiger_body();\n    \n    // Position head as backrest\n    translate([0, 60, 350])\n    rotate([20, 0, 0])\n    tiger_head();\n    \n    // Legs\n    tiger_legs();\n    \n    // Add stripes\n    translate([0, 0, 200])\n    tiger_stripes();\n}",
    "renders": true
  },
  {
    "natural_object": "hawk",
    "openscad_code": "// Hawk Furniture - Realistic Style, Medium Complexity\n// 3D printable hawk-shaped furniture piece with structural elements\n\n// Main parameters\nwing_span = 120;\nbody_length = 80;\nbody_height = 35;\nwall_thickness = 2;\n\n// Main body module\nmodule hawk_body() {\n    // Central body structure\n    difference() {\n        hull() {\n            // Main torso\n            translate([0, 0, body_height/2])\n                scale([1, 0.7, 0.8])\n                sphere(d=body_height, $fn=20);\n            \n            // Tail section\n            translate([-body_length/3, 0, body_height/3])\n                scale([1.2, 0.5, 0.4])\n                sphere(d=body_height*0.8, $fn=16);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_height/2])\n            scale([0.8, 0.5, 0.7])\n            sphere(d=body_height-wall_thickness, $fn=20);\n    }\n}\n\n// Wing structure with furniture joints\nmodule hawk_wing(side) {\n    mirror([side, 0, 0]) {\n        // Main wing panel\n        difference() {\n            // Wing surface\n            translate([0, wing_span/4, body_height/2])\n                rotate([0, 0, 15])\n                scale([1.5, 0.1, 0.4])\n                cube([wing_span/2, wing_span/2, body_height/3], center=true);\n            \n            // Hollow wing interior\n            translate([0, wing_span/4, body_height/2])\n                rotate([0, 0, 15])\n                scale([1.4, 0.12, 0.35])\n                cube([wing_span/2-wall_thickness, wing_span/2-wall_thickness, body_height/3-wall_thickness], center=true);\n        }\n        \n        // Wing support struts (furniture joints)\n        for(i = [1:3]) {\n            translate([i*wing_span/8, i*wing_span/6, body_height/2])\n                rotate([0, 90, 0])\n                cylinder(h=wing_span/4, d=wall_thickness*2, $fn=8);\n        }\n    }\n}\n\n// Head with beak detail\nmodule hawk_head() {\n    // Head structure\n    difference() {\n        translate([body_length/2, 0, body_height*1.2])\n            scale([0.8, 0.6, 0.7])\n            sphere(d=body_height*0.8, $fn=16);\n        \n        // Eye sockets\n        translate([body_length/2+body_height/3, body_height/4, body_height*1.2])\n            sphere(d=wall_thickness*2, $fn=8);\n        translate([body_length/2+body_height/3, -body_height/4, body_height*1.2])\n            sphere(d=wall_thickness*2, $fn=8);\n    }\n    \n    // Beak\n    translate([body_length/2+body_height/2, 0, body_height*1.1])\n        rotate([0, 0, -15])\n        scale([1, 0.4, 0.3])\n        cylinder(h=body_height/2, d1=body_height/3, d2=wall_thickness, $fn=6);\n}\n\n// Legs and feet (furniture legs)\nmodule hawk_legs() {\n    for(side = [-1, 1]) {\n        translate([body_length/4, side*body_height/3, 0])\n            // Main leg\n            cylinder(h=body_height/2, d=wall_thickness*3, $fn=8);\n        \n        // Foot structure\n        translate([body_length/4, side*body_height/3, 0])\n            // Perch bar\n            rotate([90, 0, 0])\n            cylinder(h=body_height/2, d=wall_thickness*2, $fn=6);\n    }\n}\n\n// Feather texture details (decorative elements)\nmodule feather_details() {\n    // Wing surface pattern\n    for(i = [0:5]) {\n        for(j = [0:3]) {\n            translate([i*body_length/6-10, j*wing_span/8-wing_span/4, body_height/2+body_height/3])\n                rotate([90, 0, 45])\n                scale([0.3, 0.1, 1])\n                cylinder(h=wall_thickness, d1=body_height/8, d2=body_height/16, $fn=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    hawk_body();\n    hawk_wing(1);\n    hawk_wing(-1);\n    hawk_head();\n    hawk_legs();\n    \n    // Structural base\n    translate([0, 0, -body_height/4])\n        difference() {\n            cube([body_length*1.2, wing_span*0.8, wall_thickness*2], center=true);\n            cube([body_length*1.1, wing_span*0.7, wall_thickness*3], center=true);\n        }\n    \n    // Feather decorative details\n    feather_details();\n}",
    "renders": true
  },
  {
    "natural_object": "eagle",
    "openscad_code": "// Eagle Furniture - Realistic Style\n// Medium complexity eagle-shaped stool with functional seating surface\n\n// Overall dimensions\nwidth = 120;\ndepth = 80;\nheight = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule eagle_body() {\n    // Main body structure\n    difference() {\n        // Body base\n        union() {\n            // Main torso\n            translate([0, 0, height/3])\n                scale([1.2, 0.8, 0.6])\n                sphere(d=width*0.6, $fn=32);\n            \n            // Chest protrusion\n            translate([0, -depth/4, height/2])\n                scale([1, 0.6, 0.4])\n                sphere(d=width*0.5, $fn=24);\n        }\n        \n        // Hollow interior\n        translate([0, 0, height/3])\n            scale([1.1, 0.7, 0.5])\n            sphere(d=width*0.6 - wall*2, $fn=32);\n    }\n}\n\nmodule eagle_head() {\n    // Head assembly\n    translate([width*0.35, 0, height*0.8])\n        rotate([0, -20, 0])\n        union() {\n            // Main head\n            difference() {\n                scale([0.8, 0.6, 0.7])\n                sphere(d=width*0.3, $fn=24);\n                \n                // Eye sockets\n                translate([width*0.05, -width*0.08, width*0.05])\n                    sphere(d=width*0.08, $fn=16);\n                translate([width*0.05, width*0.08, width*0.05])\n                    sphere(d=width*0.08, $fn=16);\n            }\n            \n            // Beak\n            translate([width*0.15, 0, -width*0.05])\n                rotate([0, -30, 0])\n                scale([1, 0.4, 0.3])\n                cylinder(h=width*0.2, d1=width*0.15, d2=width*0.05, $fn=12);\n        }\n}\n\nmodule eagle_wing(left=true) {\n    // Wing structure with furniture-style support ribs\n    side = left ? 1 : -1;\n    \n    translate([0, side*depth/2, height*0.6])\n        rotate([0, 0, left ? -20 : 20])\n        union() {\n            // Main wing panel\n            difference() {\n                scale([1.2, 0.3, 0.15])\n                sphere(d=width*0.7, $fn=32);\n                \n                // Hollow interior\n                scale([1.1, 0.25, 0.1])\n                sphere(d=width*0.7 - wall*2, $fn=32);\n            }\n            \n            // Wing supports (furniture legs)\n            for(i = [0.2, 0.5, 0.8]) {\n                translate([width*(i-0.5), 0, -height*0.4])\n                    cylinder(h=height*0.4, d=wall*2, $fn=8);\n            }\n        }\n}\n\nmodule eagle_tail() {\n    // Tail feathers as structural support\n    translate([-width*0.45, 0, height*0.4])\n        rotate([0, 10, 0])\n        difference() {\n            // Tail base\n            scale([0.6, 0.8, 0.2])\n            sphere(d=width*0.4, $fn=24);\n            \n            // Feather details\n            for(i = [-2:2]) {\n                translate([0, i*width*0.08, -width*0.05])\n                    scale([0.8, 0.1, 0.05])\n                    cube([width*0.3, width*0.15, width*0.1], center=true);\n            }\n            \n            // Hollow interior\n            scale([0.5, 0.7, 0.15])\n            sphere(d=width*0.4 - wall*2, $fn=24);\n        }\n}\n\nmodule seating_surface() {\n    // Functional seating surface on eagle's back\n    translate([0, 0, height*0.85])\n        difference() {\n            // Main seat\n            scale([1, 0.9, 0.1])\n            sphere(d=width*0.7, $fn=32);\n            \n            // Contoured seating area\n            translate([0, 0, -1])\n                scale([0.9, 0.8, 0.15])\n                sphere(d=width*0.7 - wall*2, $fn=32);\n        }\n}\n\nmodule eagle_legs() {\n    // Furniture legs disguised as eagle legs\n    for(side = [-1, 1]) {\n        translate([width*0.3, side*depth*0.3, 0])\n            union() {\n                // Upper leg\n                cylinder(h=height*0.3, d=wall*3, $fn=8);\n                \n                // Lower leg\n                translate([width*0.1, 0, -height*0.15])\n                    rotate([0, side*20, 0])\n                    cylinder(h=height*0.3, d=wall*2.5, $fn=8);\n                \n                // Talon base (furniture foot)\n                translate([width*0.15, 0, -height*0.3])\n                    sphere(d=wall*4, $fn=12);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    eagle_body();\n    eagle_head();\n    eagle_wing(true);\n    eagle_wing(false);\n    eagle_tail();\n    seating_surface();\n    eagle_legs();\n}",
    "renders": true
  },
  {
    "natural_object": "phoenix",
    "openscad_code": "// Phoenix Chair - Realistic Style, Medium Complexity\n// Inspired by phoenix wings rising from ashes\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 65;\nchair_height = 95;\nseat_height = 45;\nwall_thickness = 2;\n\nmodule phoenix_chair() {\n    // Main seat base - phoenix body\n    union() {\n        // Seat platform (phoenix torso)\n        translate([0, 0, seat_height/2])\n            cube([chair_width - 20, chair_depth - 10, seat_height], center=true);\n        \n        // Phoenix tail feathers as seat support\n        for(i = [0:4]) {\n            translate([-chair_width/2 + 10 + i*15, 0, seat_height/2 - 10 - i*2])\n                rotate([0, 15 - i*3, 0])\n                cube([8, chair_depth - 20, 15 - i*2], center=true);\n        }\n        \n        // Phoenix wings as backrest\n        // Left wing\n        translate([-chair_width/2 + 5, 0, seat_height + 25])\n            rotate([0, -15, -25])\n            cube([25, 8, 40], center=true);\n        \n        // Right wing\n        translate([chair_width/2 - 5, 0, seat_height + 25])\n            rotate([0, -15, 25])\n            cube([25, 8, 40], center=true);\n        \n        // Wing feathers detail\n        for(i = [0:3]) {\n            // Left wing feathers\n            translate([-chair_width/2 - 5 - i*3, 0, seat_height + 35 + i*5])\n                rotate([0, 5 - i*2, -30 - i*5])\n                cube([12 - i*2, 4, 8], center=true);\n            \n            // Right wing feathers\n            translate([chair_width/2 + 5 + i*3, 0, seat_height + 35 + i*5])\n                rotate([0, 5 - i*2, 30 + i*5])\n                cube([12 - i*2, 4, 8], center=true);\n        }\n        \n        // Phoenix head crest as top support\n        translate([0, 0, seat_height + 45])\n            cylinder(h=15, r1=8, r2=5, center=true);\n        \n        // Crest details\n        for(i = [0:5]) {\n            translate([0, 0, seat_height + 52 + i*1.5])\n                rotate([0, 0, i*60])\n                translate([6 - i*0.5, 0, 0])\n                cube([8 - i, 2, 2], center=true);\n        }\n        \n        // Legs - phoenix talons\n        // Front left leg\n        translate([-chair_width/2 + 10, chair_depth/2 - 10, seat_height/2 - 10])\n            cylinder(h=seat_height, r1=4, r2=6, center=false);\n        \n        // Front right leg\n        translate([chair_width/2 - 10, chair_depth/2 - 10, seat_height/2 - 10])\n            cylinder(h=seat_height, r1=4, r2=6, center=false);\n        \n        // Back left leg\n        translate([-chair_width/2 + 10, -chair_depth/2 + 10, seat_height/2 - 10])\n            cylinder(h=seat_height, r1=4, r2=6, center=false);\n        \n        // Back right leg\n        translate([chair_width/2 - 10, -chair_depth/2 + 10, seat_height/2 - 10])\n            cylinder(h=seat_height, r1=4, r2=6, center=false);\n        \n        // Talon details\n        for(i = [0:2]) {\n            // Front left talon\n            translate([-chair_width/2 + 10 - i*3, chair_depth/2 - 5, 0])\n                rotate([0, 30 - i*10, 0])\n                cube([6, 3, 2], center=true);\n            \n            // Front right talon\n            translate([chair_width/2 - 10 + i*3, chair_depth/2 - 5, 0])\n                rotate([0, 30 - i*10, 0])\n                cube([6, 3, 2], center=true);\n        }\n        \n        // Phoenix flame details on backrest\n        for(i = [0:6]) {\n            translate([0, 0, seat_height + 20 + i*3])\n                rotate([0, 0, i*30])\n                translate([i*2, 0, 0])\n                cylinder(h=8 - i, r1=2, r2=0.5, center=true);\n        }\n    }\n}\n\n// Create the phoenix chair\nphoenix_chair();",
    "renders": true
  },
  {
    "natural_object": "griffin",
    "openscad_code": "// Griffin Furniture - Decorative Side Table\n// Combines griffin form with functional table structure\n\n// Overall dimensions\ntable_height = 120;\ntable_top_diameter = 90;\nbase_width = 70;\n\n// Module for lion paw foot\nmodule lion_paw() {\n    // Main paw\n    translate([0, 0, 0]) {\n        difference() {\n            sphere(d = 25);\n            translate([0, 0, -12]) cube([30, 30, 25], center = true);\n        }\n    }\n    \n    // Toes\n    for(i = [-1, 0, 1]) {\n        translate([i * 6, 8, -8]) {\n            rotate([0, 20 * i, 0]) {\n                scale([0.6, 1, 0.6]) sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Module for eagle head\nmodule eagle_head() {\n    // Head base\n    translate([0, 0, 0]) {\n        scale([1.2, 1, 1.3]) sphere(d = 22);\n    }\n    \n    // Beak\n    translate([0, -15, -5]) {\n        rotate([0, 30, 0]) {\n            scale([0.6, 1.5, 0.6]) cylinder(h = 18, d1 = 8, d2 = 2);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 6, -8, 4]) {\n            sphere(d = 4);\n        }\n    }\n    \n    // Crest feathers\n    for(i = [-2, -1, 0, 1, 2]) {\n        translate([i * 4, -8, 12]) {\n            rotate([0, 0, i * 10]) {\n                scale([0.3, 2, 0.1]) cylinder(h = 12, d = 3);\n            }\n        }\n    }\n}\n\n// Module for wing\nmodule wing() {\n    // Main wing structure\n    translate([0, 0, 0]) {\n        scale([1, 2.5, 0.3]) sphere(d = 35);\n    }\n    \n    // Wing feathers\n    for(row = [0:2]) {\n        for(feather = [-3:3]) {\n            translate([feather * 6, -15 - row * 8, -2 - row * 2]) {\n                rotate([0, 0, feather * 10]) {\n                    scale([0.8, 1.2, 0.1]) cylinder(h = 15 - abs(feather) * 2, d = 4);\n                }\n            }\n        }\n    }\n}\n\n// Griffin body (serves as table leg)\nmodule griffin_body() {\n    union() {\n        // Lion body\n        translate([0, 0, 0]) {\n            scale([1.2, 1.8, 1]) sphere(d = 40);\n        }\n        \n        // Eagle head\n        translate([0, 40, 25]) {\n            eagle_head();\n        }\n        \n        // Wings\n        translate([20, 10, 15]) {\n            rotate([0, 20, 30]) {\n                wing();\n            }\n        }\n        \n        translate([-20, 10, 15]) {\n            rotate([0, 20, -30]) {\n                mirror([1, 0, 0]) {\n                    wing();\n                }\n            }\n        }\n        \n        // Legs\n        translate([15, -25, -15]) {\n            rotate([0, 0, 15]) {\n                lion_paw();\n            }\n        }\n        \n        translate([-15, -25, -15]) {\n            rotate([0, 0, -15]) {\n                lion_paw();\n            }\n        }\n    }\n}\n\n// Table structure\nmodule griffin_table() {\n    // Base platform\n    difference() {\n        translate([0, 0, -5]) {\n            cylinder(h = 10, d = base_width);\n        }\n        \n        // Center hole for weight reduction\n        translate([0, 0, -4]) {\n            cylinder(h = 12, d = base_width - 20);\n        }\n    }\n    \n    // Griffin support\n    translate([0, 0, 5]) {\n        griffin_body();\n    }\n    \n    // Table top\n    translate([0, 0, table_height - 10]) {\n        difference() {\n            cylinder(h = 10, d = table_top_diameter);\n            \n            // Support structure inside table top\n            translate([0, 0, 2]) {\n                cylinder(h = 8, d = table_top_diameter - 10);\n            }\n        }\n    }\n    \n    // Support column\n    translate([0, 0, 35]) {\n        cylinder(h = table_height - 60, d = 15);\n    }\n}\n\n// Main assembly\ngriffin_table();",
    "renders": true
  },
  {
    "natural_object": "unicorn",
    "openscad_code": "// Unicorn Rocking Chair\n// A realistic style unicorn-shaped rocking chair for children\n// Approximate dimensions: 120mm L x 60mm W x 80mm H\n\nwall_thickness = 2;\nseat_height = 45;\n\nmodule unicorn_body() {\n    // Main body as seat\n    translate([0, 0, seat_height/2]) {\n        union() {\n            // Seat base\n            difference() {\n                cube([60, 40, seat_height], center=true);\n                translate([0, 0, wall_thickness]) {\n                    cube([56, 36, seat_height], center=true);\n                }\n            }\n            \n            // Tail support\n            translate([-30, 0, -seat_height/2]) {\n                rotate([0, 15, 0]) {\n                    cylinder(h=20, r1=8, r2=6, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule unicorn_head() {\n    // Head with horn\n    translate([35, 0, seat_height + 15]) {\n        union() {\n            // Head shape\n            sphere(r=12, $fn=20);\n            \n            // Horn\n            translate([0, 0, 12]) {\n                cylinder(h=15, r1=2, r2=0.5, center=false);\n            }\n            \n            // Ears\n            translate([5, 8, 5]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h=8, r1=3, r2=1, center=false);\n                }\n            }\n            translate([5, -8, 5]) {\n                rotate([-30, 0, 0]) {\n                    cylinder(h=8, r1=3, r2=1, center=false);\n                }\n            }\n            \n            // Neck connection\n            translate([-8, 0, -8]) {\n                cylinder(h=10, r1=6, r2=8, center=false);\n            }\n        }\n    }\n}\n\nmodule unicorn_legs() {\n    // Four legs as chair supports\n    for(x = [-20, 20]) {\n        for(y = [-15, 15]) {\n            translate([x, y, seat_height/2 - 10]) {\n                cylinder(h=20, r=4, center=false);\n            }\n        }\n    }\n}\n\nmodule rocking_base() {\n    // Rocking base\n    translate([0, 0, -10]) {\n        union() {\n            for(side = [-1, 1]) {\n                translate([0, side * 20, 0]) {\n                    difference() {\n                        // Main rocker curve\n                        rotate([90, 0, 0]) {\n                            cylinder(h=100, r=50, center=true, $fn=40);\n                        }\n                        \n                        // Hollow inside\n                        rotate([90, 0, 0]) {\n                            translate([0, 0, -wall_thickness]) {\n                                cylinder(h=96, r=48, center=true, $fn=40);\n                            }\n                        }\n                        \n                        // Trim to half cylinder\n                        translate([0, 0, -25]) {\n                            cube([200, 200, 50], center=true);\n                        }\n                    }\n                    \n                    // Support braces\n                    for(pos = [-30, 0, 30]) {\n                        translate([pos, 0, 10]) {\n                            cube([wall_thickness*2, wall_thickness*2, 20], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule mane() {\n    // Mane details along neck\n    for(i = [0:5:25]) {\n        translate([35 - i/2, 0, seat_height + 15 - i/3]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=3, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    unicorn_body();\n    unicorn_head();\n    unicorn_legs();\n    rocking_base();\n    mane();\n}",
    "renders": true
  },
  {
    "natural_object": "pegasus",
    "openscad_code": "// Pegasus-shaped bookshelf / display stand (medium complexity)\n// Wings act as side supports, body as central shelf, legs as legs\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions (mm)\nwidth = 120;    // wingtip to wingtip\ndepth = 80;     // nose to tail\nheight = 100;   // hoof to top of back\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule pegasusShelf() {\n    // Main body - hollow shelf box\n    difference() {\n        // Outer body\n        translate([0, -depth/4, height/2])\n            scale([width/3, depth/1.5, height/3])\n                cube([1, 1, 1], center=true);\n        \n        // Hollow interior\n        translate([0, -depth/4, height/2])\n            scale([width/3 - wall*2, depth/1.5 - wall*2, height/3 - wall*2])\n                cube([1, 1, 1], center=true);\n    }\n    \n    // Head - storage compartment\n    translate([0, depth/2, height*0.75])\n        difference() {\n            // Outer head\n            scale([width/4, depth/5, height/4])\n                sphere(1);\n            // Inner hollow\n            translate([0, 2, 0])\n                scale([width/4 - wall, depth/5 - wall, height/4 - wall])\n                    sphere(0.8);\n        }\n    \n    // Neck connection\n    translate([0, depth/4, height*0.65])\n        rotate([0, -30, 0])\n            cylinder(h=depth/4, r1=width/6, r2=width/8, center=true);\n    \n    // Wings - side supports with shelf surfaces\n    for(side = [-1, 1]) {\n        // Upper wing surface (shelf)\n        translate([side * width/3, -depth/6, height*0.8])\n            rotate([0, 0, side * 20])\n                difference() {\n                    // Wing surface\n                    scale([width/3, depth/2, wall])\n                        cube([1, 1, 1], center=true);\n                    // Lightening holes\n                    for(i = [1:3]) {\n                        translate([0, -depth/6 + i*depth/8, 0])\n                            cylinder(h=wall+1, r=width/12, center=true);\n                    }\n                }\n        \n        // Lower wing support\n        translate([side * width/3, 0, height*0.4])\n            rotate([0, 0, side * 20])\n                difference() {\n                    scale([width/3, depth/2, wall])\n                        cube([1, 1, 1], center=true);\n                    for(i = [1:3]) {\n                        translate([0, -depth/6 + i*depth/8, 0])\n                            cylinder(h=wall+1, r=width/12, center=true);\n                    }\n                }\n        \n        // Wing connecting struts\n        for(i = [0:2]) {\n            translate([side * width/3, -depth/3 + i*depth/3, height*0.6])\n                rotate([0, 90, 0])\n                    cylinder(h=height*0.4, r=wall, center=true);\n        }\n    }\n    \n    // Legs - structural supports\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * width/4, y * depth/4, height/4])\n                difference() {\n                    // Outer leg\n                    cylinder(h=height/2, r=width/10, center=true);\n                    // Hollow leg\n                    translate([0, 0, wall/2])\n                        cylinder(h=height/2 - wall, r=width/10 - wall, center=true);\n                }\n        }\n    }\n    \n    // Tail - rear support\n    translate([0, -depth/2, height*0.6])\n        rotate([0, 30, 0])\n            difference() {\n                scale([width/6, depth/4, wall*2])\n                    cube([1, 1, 1], center=true);\n                // Decorative slots\n                for(i = [-2:2]) {\n                    translate([i*width/20, 0, 0])\n                        cube([wall, depth/4+1, wall*4], center=true);\n                }\n            }\n    \n    // Shelf dividers inside body\n    for(z = [0.4, 0.6]) {\n        translate([0, -depth/4, height*z])\n            difference() {\n                scale([width/3 - wall, depth/1.5 - wall, wall/2])\n                    cube([1, 1, 1], center=true);\n                // Cable management holes\n                translate([width/8, 0, 0])\n                    cylinder(h=wall+1, r=wall*1.5, center=true);\n            }\n    }\n}\n\npegasusShelf();",
    "renders": true
  },
  {
    "natural_object": "goblin",
    "openscad_code": "// Goblin Throne Stool (realistic style, medium complexity)\n// Overall footprint ~80mm, height ~100mm, wall thickness 2mm\n\n$fn = 36;\n\nmodule thick_cube(size, thick = 2) {\n    difference() {\n        cube(size);\n        translate([thick, thick, thick])\n            cube([size.x - 2*thick, size.y - 2*thick, size.z - 2*thick]);\n    }\n}\n\nmodule thick_cylinder(r, h, thick = 2) {\n    difference() {\n        cylinder(r = r, h = h);\n        translate([0, 0, thick])\n            cylinder(r = r - thick, h = h - 2*thick);\n    }\n}\n\nmodule leg(x, z_rot = 0) {\n    translate([x, 0, 0])\n    rotate([0, 0, z_rot])\n    union() {\n        // upper knee joint\n        translate([0, 0, 60])\n            rotate([90, 0, 0])\n                thick_cylinder(r = 6, h = 12);\n        // thigh\n        translate([0, -10, 30])\n            rotate([90, 0, 0])\n                thick_cylinder(r = 5, h = 25);\n        // lower shin joint\n        translate([0, -20, 10])\n            rotate([90, 0, 0])\n                thick_cylinder(r = 5, h = 10);\n        // foot\n        translate([0, -25, 2])\n        union() {\n            cube([12, 8, 4], center = true);\n            translate([0, 0, 2])\n                cube([8, 6, 4], center = true);\n        }\n    }\n}\n\nmodule seat_top() {\n    difference() {\n        // main seat\n        scale([1, 1.2, 0.3])\n            sphere(r = 35);\n        // hollow\n        scale([1, 1.2, 0.3])\n            translate([0, 0, 2])\n                sphere(r = 33);\n        // goblin face front\n        translate([0, 35, -5])\n            rotate([-20, 0, 0])\n                cube([40, 30, 30], center = true);\n    }\n    // eyes\n    for (i = [-1, 1])\n        translate([i * 12, 32, 5])\n            scale([1, 1.5, 1])\n                sphere(r = 5);\n    // nose\n    translate([0, 38, 0])\n        rotate([90, 0, 0])\n            cylinder(r1 = 4, r2 = 0, h = 6);\n    // mouth\n    translate([0, 43, -2])\n        rotate([45, 0, 0])\n            cube([20, 8, 2], center = true);\n}\n\nmodule back_spikes() {\n    for (i = [-1, 0, 1])\n        translate([i * 20, 0, 0])\n        union() {\n            cylinder(r1 = 3, r2 = 1, h = 20);\n            translate([0, 0, 20])\n                sphere(r = 2);\n        }\n}\n\nmodule throne_back() {\n    translate([0, -30, 50])\n    rotate([-10, 0, 0])\n    union() {\n        difference() {\n            scale([1, 0.2, 1.2])\n                sphere(r = 30);\n            translate([0, 0, -2])\n                scale([0.9, 0.3, 1.1])\n                    sphere(r = 30);\n        }\n        back_spikes();\n    }\n}\n\n// assembly\nunion() {\n    seat_top();\n    leg(-25);\n    leg(25);\n    leg(-15, 10);\n    leg(15, -10);\n    throne_back();\n}",
    "renders": true
  },
  {
    "natural_object": "orc",
    "openscad_code": "// Orc Chieftain's Stool – realistic style, ~100 mm high\n// All parts printable without supports, 2 mm wall thickness\n\n$fa = 4; $fs = 0.5;\n\n// overall footprint 80×80 mm, height 100 mm\nmodule orc_stool() {\n    union() {\n        // four tusks as legs\n        for (a = [0:90:270])\n            rotate([0,0,a])\n                translate([28,28,0])\n                    leg();\n\n        // seat slab with orc-face relief\n        seat();\n\n        // reinforcing ring 2 mm thick around legs\n        translate([0,0,25])\n            difference() {\n                cylinder(h = 6, r = 45, center = true);\n                cylinder(h = 7, r = 43, center = true);\n            }\n    }\n}\n\nmodule leg() {\n    // tusk shape: cone + sphere joint\n    union() {\n        // upper sphere (knee)\n        translate([0,0,30])\n            sphere(r = 8);\n\n        // main cone\n        cylinder(h1 = 0, r1 = 8, h2 = 30, r2 = 3);\n\n        // foot pad\n        translate([0,0,-2])\n            cylinder(h = 4, r = 6);\n    }\n}\n\nmodule seat() {\n    // basic slab\n    difference() {\n        // main seat disk\n        cylinder(h = 10, r = 40);\n        // underside cavity for weight saving\n        translate([0,0,-1])\n            cylinder(h = 8, r = 36);\n    }\n\n    // orc face relief on top\n    translate([0,0,10.1]) {\n        // eye ridges\n        for (x = [-15,15])\n            translate([x, 10, 0])\n                scale([1.2,0.6,1])\n                    sphere(r = 6);\n\n        // nose\n        translate([0, -5, 0])\n            sphere(r = 5);\n\n        // mouth slit\n        translate([0,-20,0])\n            rotate([-90,0,0])\n                cylinder(h = 15, r = 8, $fn = 3);\n    }\n}\n\norc_stool();",
    "renders": true
  },
  {
    "natural_object": "wizard",
    "openscad_code": "$fa = 2;\n$fs = 1;\n\nmodule wizard_chair() {\n    // Overall dimensions\n    seat_w = 45;\n    seat_d = 50;\n    back_h = 120;\n    leg_h = 100;\n    \n    // Seat\n    translate([0, 0, leg_h])\n    difference() {\n        cube([seat_w + 4, seat_d + 4, 8], center = true);\n        \n        // Carved star pattern\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 0, 3])\n            cylinder(h = 6, r1 = 18, r2 = 0, center = true);\n        }\n    }\n    \n    // Backrest - tall wizard style\n    translate([0, -seat_d/2 - 2, leg_h + back_h/2])\n    difference() {\n        cube([seat_w, 6, back_h], center = true);\n        \n        // Arched cutout\n        translate([0, 0, back_h/2 - 20])\n        rotate([0, 90, 0])\n        cylinder(h = seat_w + 2, r = 25, center = true);\n    }\n    \n    // Decorative backrest top\n    translate([0, -seat_d/2 - 2, leg_h + back_h])\n    difference() {\n        cube([seat_w - 10, 6, 20], center = true);\n        \n        // Crescent moon cutout\n        translate([0, 0, -5])\n        rotate([0, 90, 0])\n        cylinder(h = seat_w - 8, r = 12, center = true);\n    }\n    \n    // Legs with wizard staff details\n    module leg(x, y) {\n        translate([x, y, leg_h/2])\n        difference() {\n            cube([6, 6, leg_h], center = true);\n            \n            // Twisted staff effect\n            for (i = [0:9]) {\n                translate([0, 0, -leg_h/2 + i * 10])\n                rotate([0, 0, i * 30])\n                cylinder(h = 8, r1 = 3, r2 = 3.5, center = true);\n            }\n        }\n    }\n    \n    leg(seat_w/2 - 3, seat_d/2 - 3);\n    leg(-seat_w/2 + 3, seat_d/2 - 3);\n    leg(seat_w/2 - 3, -seat_d/2 + 3);\n    leg(-seat_w/2 + 3, -seat_d/2 + 3);\n    \n    // Support stretchers\n    translate([0, 0, leg_h/3])\n    cube([seat_w - 6, 4, 6], center = true);\n    \n    translate([0, 0, leg_h/2])\n    cube([4, seat_d - 6, 6], center = true);\n    \n    // Armrests with scroll details\n    module armrest(side) {\n        translate([side * (seat_w/2 + 15), 0, leg_h + 30])\n        rotate([0, 0, side * 15])\n        difference() {\n            cube([30, 6, 8], center = true);\n            \n            // Scroll curl\n            translate([side * 15, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 6, r = 8, center = true);\n        }\n    }\n    \n    armrest(1);\n    armrest(-1);\n    \n    // Magical orb details on corners\n    module orb(x, y, z) {\n        translate([x, y, z])\n        difference() {\n            sphere(r = 4);\n            cube([8, 8, 4], center = true);\n        }\n    }\n    \n    orb(seat_w/2 - 3, seat_d/2 - 3, leg_h + 8);\n    orb(-seat_w/2 + 3, seat_d/2 - 3, leg_h + 8);\n    orb(seat_w/2 - 3, -seat_d/2 + 3, leg_h + 8);\n    orb(-seat_w/2 + 3, -seat_d/2 + 3, leg_h + 8);\n}\n\nwizard_chair();",
    "renders": true
  },
  {
    "natural_object": "witch",
    "openscad_code": "// Witch's Cauldron Stool - 3D printable furniture piece\n// Designed as a witch's potion mixing seat with cauldron base\n// Overall size: 100mm diameter x 75mm height\n\n// Parameters\nleg_thickness = 2;\nseat_thickness = 4;\ncauldron_wall = 2.5;\nleg_height = 45;\nseat_diameter = 70;\ncauldron_base_diameter = 85;\ncauldron_height = 30;\n\n// Main stool module\nmodule witch_stool() {\n    // Cauldron base (hollow cylinder)\n    difference() {\n        union() {\n            // Outer cauldron\n            cylinder(h=cauldron_height, d=cauldron_base_diameter, $fn=100);\n            // Bottom dome\n            translate([0, 0, cauldron_height])\n            scale([1, 1, 0.3])\n            sphere(d=cauldron_base_diameter, $fn=100);\n        }\n        // Hollow out\n        translate([0, 0, cauldron_wall])\n        cylinder(h=cauldron_height, d=cauldron_base_diameter-2*cauldron_wall, $fn=100);\n        \n        translate([0, 0, cauldron_height])\n        scale([1, 1, 0.3])\n        sphere(d=cauldron_base_diameter-2*cauldron_wall, $fn=100);\n    }\n    \n    // Three decorative witch legs (bent style)\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n        translate([cauldron_base_diameter/2 - leg_thickness - 5, 0, 0])\n        rotate([0, 15, 0])\n        leg();\n    }\n    \n    // Seat top (with pentagram detail)\n    translate([0, 0, leg_height + cauldron_height - 5])\n    difference() {\n        // Main seat disk\n        cylinder(h=seat_thickness, d=seat_diameter, $fn=100);\n        \n        // Pentagram cutout\n        color(\"red\")\n        translate([0, 0, -1])\n        linear_extrude(height=seat_thickness+2)\n        pentagram(25);\n    }\n    \n    // Decorative cauldron handles\n    rotate([0, 90, 0])\n    translate([cauldron_base_diameter/2 - cauldron_wall, 0, cauldron_height/2])\n    cauldron_handle();\n    \n    rotate([0, -90, 0])\n    translate([cauldron_base_diameter/2 - cauldron_wall, 0, cauldron_height/2])\n    cauldron_handle();\n}\n\n// Witch-style curved leg\nmodule leg() {\n    union() {\n        // Main leg post\n        translate([0, 0, cauldron_height])\n        cylinder(h=leg_height, d=leg_thickness*2, $fn=8);\n        \n        // Decorative ball at top\n        translate([0, 0, leg_height + cauldron_height])\n        sphere(d=leg_thickness*3, $fn=16);\n        \n        // Curved foot\n        translate([0, 0, cauldron_height/2])\n        rotate([0, 90, 0])\n        scale([1, 1, 0.5])\n        difference() {\n            cylinder(h=20, d=leg_thickness*3, $fn=16);\n            translate([0, 0, -1])\n            cube([40, 20, leg_thickness*3+2], center=true);\n        }\n    }\n}\n\n// Cauldron handle\nmodule cauldron_handle() {\n    difference() {\n        // Handle base\n        union() {\n            cylinder(h=20, d=leg_thickness*2, $fn=16);\n            \n            // Grip bar\n            translate([0, 15, 0])\n            rotate([90, 0, 0])\n            cylinder(h=30, d=leg_thickness*1.5, $fn=8);\n        }\n        \n        // Mounting hole\n        translate([0, 0, -1])\n        cylinder(h=22, d=3, $fn=16);\n    }\n}\n\n// Pentagram symbol for seat\nmodule pentagram(size) {\n    module pentagram_point(r, angle) {\n        translate([r*cos(angle), r*sin(angle)])\n        circle(d=3);\n    }\n    \n    for(i=[0:72:359]) {\n        assign(a1 = i, a2 = i+72, a3 = i+144)\n        hull() {\n            pentagram_point(size, a1);\n            pentagram_point(size, a2);\n        }\n    }\n}\n\n// Render the stool\nwitch_stool();",
    "renders": true
  },
  {
    "natural_object": "mage",
    "openscad_code": "// Mage's Spellbook Lectern\n// A compact, 3D-printable table-top lectern designed for a wizard's study\n// Overall height 120 mm, width 100 mm, depth 80 mm\n// Wall thickness 2 mm throughout\n\n// Main body\nmodule lectern_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Base box\n            translate([0, 0, 5]) cube([100, 80, 10], center=true);\n            // Vertical column\n            translate([0, 0, 60]) cube([40, 30, 100], center=true);\n            // Slanted top\n            rotate([15, 0, 0]) translate([0, -5, 110]) cube([90, 70, 4], center=true);\n        }\n        // Hollow out\n        translate([0, 0, 5]) cube([96, 76, 8], center=true);\n        translate([0, 0, 60]) cube([36, 26, 100], center=true);\n    }\n}\n\n// Arcane symbols on front\nmodule arcane_symbols() {\n    for(i=[-2:2]) {\n        translate([i*15, 0, 60]) rotate([0, 0, 45]) \n            cube([4, 4, 3], center=true);\n    }\n    translate([0, 0, 75]) cylinder(h=3, r=10, $fn=6);\n}\n\n// Book rest ledge\nmodule book_rest() {\n    translate([0, -30, 100]) \n        cube([90, 6, 10], center=true);\n}\n\n// Support struts\nmodule supports() {\n    // Left strut\n    translate([-35, 0, 30]) rotate([0, 60, 0]) \n        cylinder(h=50, r=3, $fn=12);\n    // Right strut\n    translate([35, 0, 30]) rotate([0, -60, 0]) \n        cylinder(h=50, r=3, $fn=12);\n}\n\n// Feet\nmodule feet() {\n    for(x=[-35, 35]) {\n        translate([x, -30, 0]) cylinder(h=5, r=5, $fn=8);\n        translate([x, 30, 0]) cylinder(h=5, r=5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    lectern_body();\n    arcane_symbols();\n    book_rest();\n    supports();\n    feet();\n}",
    "renders": true
  },
  {
    "natural_object": "sorcerer",
    "openscad_code": "// Sorcerer's Alchemist's Desk - realistic style, medium complexity\n// Overall size: 100mm wide x 70mm deep x 120mm tall\n\n$fn = 32;\n\nmodule desk() {\n    // Main desk top with curved edges\n    difference() {\n        // Main top\n        translate([0, 0, 100]) \n            scale([50, 35, 2]) \n                sphere(r=1);\n        \n        // Rounded edges\n        translate([0, 0, 102]) \n            scale([48, 33, 1]) \n                sphere(r=0.8);\n    }\n    \n    // Front curved edge\n    translate([0, 32, 101]) \n        rotate([90, 0, 0]) \n            cylinder(h=48, r1=2, r2=2);\n    \n    // Rear straight edge\n    translate([0, -32, 101]) \n        cube([96, 2, 2], center=true);\n}\n\nmodule legs() {\n    // Four curved legs with arcane runes\n    for(x = [-40, 40])\n    for(y = [-25, 25]) {\n        // Main leg\n        translate([x, y, 50]) \n            scale([1, 1, 1.2]) \n                cylinder(h=50, r=3);\n        \n        // Leg base\n        translate([x, y, 0]) \n            sphere(r=4);\n        \n        // Rune details\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) \n                translate([x, y, 15 + i*10]) \n                    scale([0.3, 0.3, 0.5]) \n                        cube([6, 1, 2], center=true);\n        }\n    }\n}\n\nmodule drawers() {\n    // Central drawer unit\n    difference() {\n        translate([0, 10, 85]) \n            cube([60, 20, 14], center=true);\n        \n        // Three drawers\n        for(i = [0:2]) {\n            translate([-15 + i*15, 10, 85]) \n                cube([12, 18, 12], center=true);\n            \n            // Drawer handles - crystal orbs\n            translate([-15 + i*15, 22, 85]) \n                sphere(r=1.5);\n        }\n    }\n}\n\nmodule back_panel() {\n    // Ornate back panel with arcane symbols\n    translate([0, -30, 110]) \n        cube([90, 2, 20], center=true);\n    \n    // Arcane symbols\n    for(i = [-30:15:30]) {\n        translate([i, -29, 110]) \n            rotate([90, 0, 0]) \n                cylinder(h=3, r=2);\n        \n        translate([i, -29, 110]) \n            sphere(r=1);\n    }\n}\n\nmodule book_support() {\n    // Left side book rest\n    translate([-45, 0, 105]) \n        cube([5, 30, 10], center=true);\n    \n    // Right side book rest\n    translate([45, 0, 105]) \n        cube([5, 30, 10], center=true);\n}\n\nmodule potion_holder() {\n    // Circular indentations for potions\n    for(i = [-20:20:20]) {\n        for(j = [-10:20:10]) {\n            translate([i, j, 102]) \n                cylinder(h=2, r=4);\n            \n            difference() {\n                translate([i, j, 100]) \n                    cube([8, 8, 2], center=true);\n                \n                translate([i, j, 100]) \n                    cylinder(h=3, r=3.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    desk();\n    legs();\n    drawers();\n    back_panel();\n    book_support();\n    potion_holder();\n}",
    "renders": true
  },
  {
    "natural_object": "mercenary",
    "openscad_code": "// Mercenary Equipment Crate - 100mm x 60mm x 50mm\n// Realistic military-style storage box with metal reinforcements and handles\n\n$fn = 32;\n\n// Main crate body module\nmodule crate_body() {\n    difference() {\n        // Outer shell\n        cube([100, 60, 50], center = true);\n        \n        // Inner cavity with 2mm walls\n        translate([0, 0, 1])\n            cube([96, 56, 48], center = true);\n    }\n}\n\n// Metal corner reinforcements\nmodule corner_reinforcement() {\n    difference() {\n        // Corner piece - 8mm x 8mm x 52mm\n        cube([8, 8, 52], center = true);\n        \n        // Chamfer edges for realism\n        translate([3.5, 3.5, 24])\n            rotate([0, 0, 45])\n            cube([6, 6, 50], center = true);\n        translate([3.5, -3.5, 24])\n            rotate([0, 0, 45])\n            cube([6, 6, 50], center = true);\n        translate([-3.5, 3.5, 24])\n            rotate([0, 0, 45])\n            cube([6, 6, 50], center = true);\n        translate([-3.5, -3.5, 24])\n            rotate([0, 0, 45])\n            cube([6, 6, 50], center = true);\n    }\n}\n\n// Metal side reinforcements\nmodule side_reinforcement() {\n    difference() {\n        cube([90, 6, 4], center = true);\n        translate([0, 0, 0])\n            cube([86, 2, 2], center = true);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    // Handle base\n    translate([0, 0, 25]) {\n        difference() {\n            cube([20, 8, 8], center = true);\n            translate([0, 0, 0])\n                cube([16, 4, 4], center = true);\n        }\n    }\n    \n    // Handle grip\n    translate([0, 0, 33]) {\n        rotate([90, 0, 0])\n            cylinder(h = 30, r1 = 3, r2 = 3, center = true);\n    }\n}\n\n// Hinge detail\nmodule hinge() {\n    for(i = [-1, 1]) {\n        translate([i * 45, 0, 24]) {\n            cylinder(h = 8, r = 4, center = true);\n            translate([0, 0, 4])\n                cube([8, 2, 2], center = true);\n        }\n    }\n}\n\n// Lock mechanism\nmodule lock() {\n    translate([0, -25, 0]) {\n        difference() {\n            cube([20, 6, 12], center = true);\n            translate([0, 0, 2])\n                cube([16, 2, 8], center = true);\n        }\n        \n        // Lock detail\n        translate([0, 3, 4])\n            cube([8, 2, 4], center = true);\n    }\n}\n\n// Wood grain texture lines (simplified)\nmodule wood_grain() {\n    for(i = [-24:4:24]) {\n        translate([i, -28, 0])\n            cube([1, 56, 0.5], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Crate body\n    color(\"saddlebrown\")\n    crate_body();\n    \n    // Apply wood grain texture\n    color(\"saddlebrown\")\n    translate([0, 0, -24.5])\n        wood_grain();\n    translate([0, 0, 24.5])\n        wood_grain();\n    \n    // Corner reinforcements\n    color(\"dimgray\")\n    translate([46, 26, 0])\n        corner_reinforcement();\n    translate([-46, 26, 0])\n        corner_reinforcement();\n    translate([46, -26, 0])\n        corner_reinforcement();\n    translate([-46, -26, 0])\n        corner_reinforcement();\n    \n    // Side reinforcements\n    color(\"dimgray\")\n    translate([0, 27, 25])\n        rotate([90, 0, 0])\n            side_reinforcement();\n    translate([0, -27, 25])\n        rotate([90, 0, 0])\n            side_reinforcement();\n    translate([47, 0, 0])\n        rotate([0, 90, 0])\n            side_reinforcement();\n    translate([-47, 0, 0])\n        rotate([0, 90, 0])\n            side_reinforcement();\n    \n    // Handles\n    color(\"dimgray\")\n    translate([0, 35, 0])\n        handle();\n    translate([0, -35, 0])\n        mirror([0, 1, 0])\n            handle();\n    \n    // Hinges\n    color(\"silver\")\n    hinge();\n    \n    // Lock\n    color(\"silver\")\n    lock();\n}",
    "renders": true
  },
  {
    "natural_object": "spy",
    "openscad_code": "// Spy Briefcase with Hidden Compartment\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall dimensions\nbriefcase_length = 120;\nbriefcase_width = 80;\nbriefcase_height = 30;\nwall_thickness = 2;\n\nmodule briefcase_body() {\n    // Main case body\n    difference() {\n        // Outer shell\n        cube([briefcase_length, briefcase_width, briefcase_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness/2])\n        cube([briefcase_length-wall_thickness*2, briefcase_width-wall_thickness*2, briefcase_height-wall_thickness], center=true);\n    }\n    \n    // Reinforcement ribs along sides\n    for(i = [-1, 1]) {\n        translate([i * (briefcase_length/2 - wall_thickness), 0, 0])\n        cube([wall_thickness, briefcase_width, briefcase_height], center=true);\n    }\n}\n\nmodule briefcase_lid() {\n    // Lid with hinges\n    translate([0, 0, briefcase_height/2 + 2])\n    difference() {\n        // Lid body\n        cube([briefcase_length, briefcase_width, wall_thickness*2], center=true);\n        \n        // Inner lid cavity\n        translate([0, 0, wall_thickness/2])\n        cube([briefcase_length-wall_thickness*2, briefcase_width-wall_thickness*2, wall_thickness], center=true);\n    }\n    \n    // Hinges\n    for(x = [-briefcase_length/3, 0, briefcase_length/3]) {\n        translate([x, briefcase_width/2, briefcase_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=wall_thickness*2, r=3);\n    }\n}\n\nmodule handle() {\n    // Retractable handle\n    translate([0, -briefcase_width/2 - 15, briefcase_height/2])\n    union() {\n        // Handle grip\n        rotate([90, 0, 0])\n        cylinder(h=30, r=4);\n        \n        // Handle supports\n        translate([-15, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=3);\n        \n        translate([15, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=3);\n    }\n}\n\nmodule hidden_compartment() {\n    // Secret compartment in bottom\n    translate([0, 0, -briefcase_height/2 + 3])\n    difference() {\n        // Compartment box\n        cube([briefcase_length/3, briefcase_width/2, 4], center=true);\n        \n        // Opening\n        translate([0, 0, 2])\n        cube([briefcase_length/3 - wall_thickness*2, briefcase_width/2 - wall_thickness*2, 4], center=true);\n    }\n    \n    // Concealed latch mechanism\n    translate([briefcase_length/6, briefcase_width/4, -briefcase_height/2 + 5])\n    cube([5, 2, 1], center=true);\n}\n\nmodule combination_locks() {\n    // Three digit combination locks\n    for(pos = [-briefcase_length/3, 0, briefcase_length/3]) {\n        translate([pos, briefcase_width/2 - 3, 0])\n        union() {\n            // Lock body\n            cube([8, 6, 8], center=true);\n            \n            // Dial\n            translate([0, -4, 0])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=4);\n            \n            // Numbers on dial\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                translate([3, 0, 1])\n                cube([0.5, 0.5, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule corner_protectors() {\n    // Metal corner protectors\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (briefcase_length/2 - 3), y * (briefcase_width/2 - 3), 0])\n            union() {\n                // Corner bracket\n                cube([6, 6, briefcase_height], center=true);\n                \n                // Rivets\n                translate([2, 2, 0])\n                cylinder(h=2, r=1, center=true);\n                translate([-2, 2, 0])\n                cylinder(h=2, r=1, center=true);\n                translate([2, -2, 0])\n                cylinder(h=2, r=1, center=true);\n                translate([-2, -2, 0])\n                cylinder(h=2, r=1, center=true);\n            }\n        }\n    }\n}\n\nmodule document_holder() {\n    // Interior document straps\n    translate([0, 0, -briefcase_height/2 + 8])\n    for(pos = [-20, 0, 20]) {\n        translate([pos, 0, 0])\n        cube([briefcase_length/4, 2, 1], center=true);\n    }\n}\n\n// Assemble the briefcase\nunion() {\n    briefcase_body();\n    briefcase_lid();\n    handle();\n    hidden_compartment();\n    combination_locks();\n    corner_protectors();\n    document_holder();\n}",
    "renders": true
  },
  {
    "natural_object": "trooper",
    "openscad_code": "// Trooper lounge chair – realistic medium-complexity build\n// Overall size ≈ 130 mm long × 70 mm wide × 85 mm high\n// Wall thickness 2 mm throughout for 3-D printing\n\n$fn = 36;\n\nmodule shell() {\n    // outer shell (back & seat)\n    difference() {\n        // main body\n        hull() {\n            translate([0, 0, 40]) cube([120, 70, 45], center = true);\n            translate([0, 0, 10]) cube([120, 70, 20], center = true);\n        }\n        // hollow cavity (2 mm wall)\n        translate([0, 0, 40]) cube([116, 66, 41], center = true);\n        translate([0, 0, 10]) cube([116, 66, 16], center = true);\n    }\n}\n\nmodule vent_slats() {\n    // horizontal vent slots on back\n    for (z = [70:-8:46]) {\n        difference() {\n            translate([0, 0, z]) cube([122, 74, 3], center = true);\n            translate([0, 0, z]) cube([118, 68, 4], center = true);\n        }\n    }\n}\n\nmodule headrest() {\n    // curved headrest extension\n    difference() {\n        hull() {\n            translate([0, 0, 75]) cube([110, 65, 20], center = true);\n            translate([0, 0, 65]) cube([110, 65, 10], center = true);\n        }\n        translate([0, 0, 75]) cube([106, 61, 16], center = true);\n    }\n}\n\nmodule arm(side = 1) {\n    // armrest with round pad\n    translate([0, side * 37, 0]) {\n        union() {\n            // support column\n            difference() {\n                cylinder(h = 32, d = 14, center = false);\n                cylinder(h = 32, d = 10, center = false);\n            }\n            // padded top\n            translate([0, 0, 32])\n                scale([1, 1, 0.5])\n                    sphere(d = 18);\n        }\n    }\n}\n\nmodule leg(x = 1, y = 1) {\n    // cylindrical leg with simple foot\n    translate([x * 50, y * 28, -6]) {\n        union() {\n            cylinder(h = 16, d = 10);\n            sphere(d = 12);\n        }\n    }\n}\n\nmodule joint_detail(x, y) {\n    // decorative bolt head\n    translate([x, y, 0])\n        cylinder(h = 2, d = 6);\n}\n\n// assemble\nunion() {\n    shell();\n    vent_slats();\n    headrest();\n    \n    arm(1);\n    arm(-1);\n    \n    for (x = [-1:2:1])\n        for (y = [-1:2:1])\n            leg(x, y);\n            \n    // add bolt details on arm junctions\n    for (s = [-1, 1]) {\n        joint_detail(0, s * 37);\n        joint_detail(s * 55, 0);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "commando",
    "openscad_code": "// Commando Folding Stool – realistic style, medium complexity\n// 3D-printable, ~2 mm wall thickness, no critical overhangs\n\n$fn=36;      // smooth curves\n\n// overall scale\nscale_factor = 0.7;\n\n// dimensions (mm)\nseat_d = 120;                 // round seat\nseat_th = 8;\nleg_L = 180;\nleg_d = 12;\nleg_wall = 2.2;\nhinge_d = 14;\nhinge_h = 14;\ncrossbar_d = 6;\ncrossbar_wall = 2.2;\nbrace_w = 15;\nbrace_h = 6;\n\nmodule seat() {\n    difference() {\n        cylinder(h=seat_th, d=seat_d, center=true);\n        // lightening pocket from underside\n        translate([0,0,-seat_th/2+1])\n            cylinder(h=seat_th, d=seat_d-8);\n    }\n}\n\nmodule hollow_tube(L, od, wall) {\n    difference() {\n        cylinder(h=L, d=od, center=true);\n        cylinder(h=L+1, d=od-2*wall, center=true);\n    }\n}\n\nmodule leg() {\n    // main tube\n    hollow_tube(leg_L, leg_d, leg_wall);\n    // rounded foot\n    translate([0,0,-leg_L/2])\n        sphere(d=leg_d);\n}\n\n// hinge block for folding mechanism\nmodule hinge_block() {\n    difference() {\n        cylinder(h=hinge_h, d=hinge_d);\n        // pivot hole\n        rotate([0,90,0])\n            cylinder(h=hinge_d+2, d=3.5, center=true);\n    }\n}\n\nmodule crossbar(L) {\n    hollow_tube(L, crossbar_d, crossbar_wall);\n}\n\nmodule brace_pair() {\n    // X braces\n    for (mir=[0,1])\n        mirror([0,mir,0])\n            linear_extrude(height=brace_h, center=true, convexity=2)\n                polygon(points=[[-brace_w/2,0],\n                                [brace_w/2,0],\n                                [0,leg_L/2-20]]);\n}\n\n// assemble one leg assembly\nmodule leg_assembly(angle) {\n    rotate([0,angle,0])\n        translate([0,0,-seat_th/2-hinge_h/2])\n            hinge_block();\n    \n    rotate([0,angle,0])\n        translate([0,0,-seat_th/2-hinge_h])\n            leg();\n}\n\nmodule stool() {\n    scale([scale_factor,scale_factor,scale_factor]) {\n        // seat\n        seat();\n        \n        // four legs\n        for (a=[0:90:270])\n            rotate([0,0,a])\n                translate([seat_d/2-6,0,0])\n                    leg_assembly(15);\n        \n        // lower cross brace ring\n        translate([0,0,-leg_L/2+20])\n            crossbar(seat_d-25);\n        \n        // X braces between opposite legs\n        for (a=[0,90])\n            rotate([0,0,a])\n                translate([0,0,-leg_L/2+20])\n                    brace_pair();\n    }\n}\n\n// render the stool\nstool();",
    "renders": true
  },
  {
    "natural_object": "ranger",
    "openscad_code": "// Ranger camp stool\n// Realistic style, medium complexity\n// Overall height ~110 mm, seat Ø 200 mm – easily printable on FDM\n\n// Parameters\n$fn = 32;\nwall = 2;          // 2 mm walls for FDM\nleg_d = 10;        // leg Ø 10 mm\nseat_d = 200;\nseat_h = 8;\nstretcher_d = 6;\nstretcher_h = 6;\n\nmodule leg_segment(l=100) {\n    // simple straight leg\n    cylinder(d=leg_d, h=l);\n}\n\nmodule stretcher(l) {\n    // round stretcher between legs\n    color(\"tan\")\n    rotate([90,0,0])\n        cylinder(d=stretcher_d, h=l);\n}\n\nmodule seat_top() {\n    // circular seat with slight cushion\n    color(\"saddlebrown\")\n    difference() {\n        cylinder(d=seat_d, h=seat_h);\n        // shallow depression for comfort\n        translate([0,0,seat_h-2])\n            cylinder(d=seat_d-10, h=2.1);\n    }\n}\n\nmodule leg_assembly() {\n    // one folding leg pair\n    // left leg\n    translate([-seat_d/2*0.6, 0, 0])\n        leg_segment();\n    // right leg\n    translate([ seat_d/2*0.6, 0, 0])\n        leg_segment();\n    // lower stretcher\n    translate([0, 0, 40])\n        stretcher(seat_d*0.6);\n    // upper stretcher (brace)\n    translate([0, 0, 70])\n        stretcher(seat_d*0.6);\n}\n\nmodule hinge_block() {\n    // simple printed hinge block\n    color(\"gray\")\n    cube([10, leg_d+wall, 10], center=true);\n}\n\n// Main assembly\nunion() {\n    // seat\n    translate([0,0,100])\n        seat_top();\n\n    // four leg assemblies\n    for (a=[0:90:270]) {\n        rotate([0,0,a])\n            translate([0, seat_d/2-leg_d/2, 100-seat_h]) {\n                hinge_block();\n                rotate([-105,0,0])  // slight splay for stability\n                    leg_assembly();\n            }\n}\n\n// small leather carry strap\ncolor(\"black\")\ntranslate([0,0,50])\nrotate([90,0,0])\nlinear_extrude(height=3)\n    text(\"RANGER\", size=12, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "natural_object": "guardian",
    "openscad_code": "// Guardian Chair Module\n// A stylized guardian figure integrated into a functional chair design\n\n$fn = 32;\n\nmodule guardian_chair() {\n    // Overall chair dimensions\n    seat_width = 45;\n    seat_depth = 40;\n    seat_height = 45;\n    back_height = 80;\n    \n    // Wall thickness for 3D printing\n    wall_th = 2;\n    \n    // Chair frame\n    difference() {\n        union() {\n            // Seat platform with guardian face\n            translate([0, 0, seat_height]) {\n                difference() {\n                    // Main seat\n                    cube([seat_width, seat_depth, 4], center=true);\n                    \n                    // Guardian face cutout on front edge\n                    translate([0, seat_depth/2 - 2, 0]) {\n                        rotate([90, 0, 0]) {\n                            for(i = [-1, 1]) {\n                                // Eye holes\n                                translate([i * 8, 0, -2]) {\n                                    cylinder(h=4, r=3, center=true);\n                                }\n                            }\n                            // Mouth hole\n                            translate([0, -6, -2]) {\n                                cube([12, 4, 4], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Backrest with guardian wings\n            translate([0, -seat_depth/2 + 2, seat_height + back_height/2]) {\n                difference() {\n                    // Wing supports\n                    for(side = [-1, 1]) {\n                        translate([side * seat_width/3, 0, 0]) {\n                            rotate([0, side * 15, 0]) {\n                                cube([wall_th, 8, back_height - 10], center=true);\n                            }\n                        }\n                    }\n                    \n                    // Central spine\n                    translate([0, 0, 0]) {\n                        cube([seat_width - 10, wall_th, back_height - 10], center=true);\n                    }\n                    \n                    // Decorative cutouts in wings\n                    for(side = [-1, 1]) {\n                        translate([side * seat_width/3, 0, 10]) {\n                            rotate([0, side * 15, 0]) {\n                                cylinder(h=10, r=3, center=true);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Legs with guardian stance\n            for(x = [-1, 1]) {\n                for(y = [-1, 1]) {\n                    translate([x * seat_width/2.5, y * seat_depth/2.5, seat_height/2]) {\n                        // Tapered legs\n                        cylinder(h=seat_height, r1=3, r2=2);\n                        \n                        // Guardian feet\n                        translate([0, 0, -seat_height/2 - 2]) {\n                            sphere(r=4);\n                        }\n                    }\n                }\n            }\n            \n            // Armrest guardians\n            for(side = [-1, 1]) {\n                translate([side * seat_width/2 + 3, 0, seat_height + 10]) {\n                    rotate([0, 0, side * 10]) {\n                        // Armrest post\n                        cylinder(h=20, r=2);\n                        \n                        // Guardian hand at end\n                        translate([0, seat_depth/3, 10]) {\n                            sphere(r=4);\n                            \n                            // Thumb\n                            translate([0, -3, 2]) {\n                                sphere(r=2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hollow out for 3D printing efficiency\n        translate([0, 0, seat_height/2]) {\n            cube([seat_width - 2*wall_th, seat_depth - 2*wall_th, seat_height - 2*wall_th], center=true);\n        }\n    }\n    \n    // Guardian face details on backrest\n    translate([0, -seat_depth/2 + 2, seat_height + 30]) {\n        // Eyes\n        for(i = [-1, 1]) {\n            translate([i * 6, 0, 0]) {\n                sphere(r=3);\n            }\n        }\n        \n        // Nose\n        translate([0, 0, -6]) {\n            cylinder(h=5, r=2);\n        }\n        \n        // Mouth\n        translate([0, -4, -8]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=8, r=2);\n            }\n        }\n    }\n}\n\n// Generate the guardian chair\nguardian_chair();",
    "renders": true
  },
  {
    "natural_object": "sentinel",
    "openscad_code": "// Sentinel Furniture - Modern Nightstand/Guardian\n// Overall dimensions: 120mm(W) x 80mm(D) x 130mm(H)\n// Features: Angular sentinel head, drawer storage, sturdy legs\n\n// Main body module - central storage compartment\nmodule sentinel_body() {\n    difference() {\n        // Main body box - 2mm wall thickness\n        translate([0, 0, 65])\n            cube([116, 76, 128], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 65])\n            cube([112, 72, 124], center=true);\n    }\n}\n\n// Sentinel head - angular monitoring unit\nmodule sentinel_head() {\n    union() {\n        // Base head structure\n        translate([0, 0, 130])\n            rotate([0, 0, 45])\n            cube([70, 70, 30], center=true);\n        \n        // Eye slit - angled forward\n        translate([0, 25, 140])\n            rotate([0, 15, 0])\n            difference() {\n                cube([50, 8, 15], center=true);\n                translate([0, 0, 2])\n                    cube([46, 12, 11], center=true);\n            }\n        \n        // Top antenna array\n        translate([0, 0, 150])\n            cylinder(h=15, d1=8, d2=4, center=true);\n    }\n}\n\n// Drawer module with handle\nmodule drawer(width, height, depth, handle_offset) {\n    difference() {\n        // Drawer box - 2mm walls\n        translate([0, 0, 0])\n            cube([width-4, height-4, depth-2], center=true);\n        \n        // Hollow drawer space\n        translate([0, 0, 2])\n            cube([width-8, height-8, depth-4], center=true);\n    }\n    \n    // Handle bar\n    translate([0, 0, handle_offset])\n        rotate([90, 0, 0])\n        cylinder(h=width-20, d=6, center=true);\n}\n\n// Support legs - angled for stability\nmodule leg() {\n    // Main leg post\n    cylinder(h=60, d=12, center=false);\n    \n    // Base foot pad\n    translate([0, 0, -2])\n        cylinder(h=4, d=20, center=false);\n}\n\n// Side panels for structural support\nmodule side_panel() {\n    difference() {\n        // Main panel\n        cube([4, 76, 60], center=false);\n        \n        // Lightening holes\n        for(i = [15:20:45]) {\n            translate([2, 38, i])\n                rotate([0, 90, 0])\n                cylinder(h=5, d=8, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    sentinel_body();\n    \n    // Sentinel head on top\n    sentinel_head();\n    \n    // Front drawer\n    translate([0, 30, 100])\n        drawer(100, 20, 70, 12);\n    \n    // Bottom drawer\n    translate([0, 30, 75])\n        drawer(100, 20, 70, 12);\n    \n    // Support structure\n    // Front legs\n    translate([-45, -25, 0])\n        leg();\n    translate([45, -25, 0])\n        leg();\n    \n    // Rear legs\n    translate([-45, 25, 0])\n        leg();\n    translate([45, 25, 0])\n        leg();\n    \n    // Side structural panels\n    translate([-58, 0, 5])\n        side_panel();\n    translate([54, 0, 5])\n        mirror([1, 0, 0])\n            side_panel();\n}\n\n// Base stability plate\ntranslate([0, 0, -4])\n    cube([120, 80, 2], center=true);",
    "renders": true
  },
  {
    "natural_object": "beast",
    "openscad_code": "// Beast Stool – 3D-printable, medium complexity\n// Overall footprint ~110 mm x 110 mm x 100 mm\n\n$fn = 36;\n\n// Parameters\nleg_h = 30;          // height of each paw\nseat_t = 8;          // seat thickness\npaw_r = 12;          // paw radius\nbody_h = 60;         // torso height\nbody_r = 45;         // torso radius\ntail_len = 25;\ntail_r = 4;\n\nmodule paw() {\n    // Simple paw: sphere + cylinder, printable without supports\n    union() {\n        // Main paw body\n        translate([0, 0, leg_h/2])\n            sphere(r = paw_r);\n        // Wrist\n        translate([0, 0, leg_h - paw_r/2])\n            cylinder(h = paw_r, r1 = paw_r, r2 = paw_r*0.8);\n    }\n}\n\nmodule tail() {\n    // Snake-like tail, printed lying flat\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(r = tail_r);\n            translate([tail_len, 0, 0]) sphere(r = tail_r*0.7);\n        }\n        // Light groove to suggest texture\n        for(i=[1:3])\n            translate([i*tail_len/4, 0, -1])\n                cube([tail_len/6, tail_r*0.6, 2]);\n    }\n}\n\nmodule torso() {\n    // Main body with four legs\n    union() {\n        // Torso\n        difference() {\n            cylinder(h = body_h, r = body_r);\n            // Hollow cavity (2 mm wall)\n            translate([0, 0, 2])\n                cylinder(h = body_h - 4, r = body_r - 2);\n        }\n\n        // Four paws at corners\n        positions = [[-body_r*0.7, -body_r*0.7],\n                     [ body_r*0.7, -body_r*0.7],\n                     [ body_r*0.7,  body_r*0.7],\n                     [-body_r*0.7,  body_r*0.7]];\n        for(pos = positions) {\n            translate([pos.x, pos.y, -leg_h + 2])  // +2 for safe overlap\n                paw();\n        }\n\n        // Tail attached at rear\n        translate([body_r - 2, 0, 10])\n            rotate([90, 0, 0])\n                tail();\n    }\n}\n\nmodule seat() {\n    // Soft cushion seat\n    difference() {\n        translate([0, 0, body_h])\n            cylinder(h = seat_t, r = body_r + 6, center = false);\n        // Top gentle dome\n        translate([0, 0, body_h + seat_t])\n            sphere(r = body_r + 6);\n    }\n}\n\n// Assembly\nunion() {\n    torso();\n    seat();\n}",
    "renders": true
  },
  {
    "natural_object": "monster",
    "openscad_code": "// Monster Couch - A realistic 3D printable furniture piece\n// Size: 120mm x 60mm x 70mm\n\n$fn = 50;\n\n// Main module\nmodule monster_couch() {\n    // Couch base frame\n    difference() {\n        union() {\n            // Seat base with monster mouth opening\n            translate([0, 0, 25]) {\n                difference() {\n                    cube([90, 50, 10], center = true);\n                    // Mouth cavity\n                    translate([0, -15, 5]) {\n                        cube([60, 20, 8], center = true);\n                    }\n                }\n            }\n            \n            // Backrest with monster face\n            translate([0, -20, 45]) {\n                rotate([0, 10, 0]) {\n                    cube([90, 8, 40], center = true);\n                }\n            }\n            \n            // Left armrest (monster arm)\n            translate([-45, 0, 40]) {\n                difference() {\n                    cylinder(h = 30, r1 = 8, r2 = 12);\n                    // Fingers cutout\n                    for(i = [-1:1]) {\n                        translate([0, i*4, 0]) {\n                            cube([6, 2, 25], center = true);\n                        }\n                    }\n                }\n            }\n            \n            // Right armrest (monster arm)\n            translate([45, 0, 40]) {\n                difference() {\n                    cylinder(h = 30, r1 = 8, r2 = 12);\n                    for(i = [-1:1]) {\n                        translate([0, i*4, 0]) {\n                            cube([6, 2, 25], center = true);\n                        }\n                    }\n                }\n            }\n            \n            // Monster legs\n            leg_positions = [[-30, 25, 0], [30, 25, 0], [-30, -25, 0], [30, -25, 0]];\n            for(pos = leg_positions) {\n                translate(pos) {\n                    cylinder(h = 25, r1 = 6, r2 = 8);\n                }\n            }\n            \n            // Teeth along couch front\n            for(x = [-35:10:35]) {\n                translate([x, -24, 32]) {\n                    scale([1, 0.5, 1]) {\n                        cylinder(h = 8, r1 = 3, r2 = 0);\n                    }\n                }\n            }\n        }\n        \n        // Cushion indents\n        translate([0, 5, 30]) {\n            cube([80, 40, 5], center = true);\n        }\n    }\n    \n    // Monster eyes (buttons on backrest)\n    translate([-20, -20, 55]) {\n        sphere(r = 5);\n    }\n    translate([20, -20, 55]) {\n        sphere(r = 5);\n    }\n    \n    // Eye pupils\n    translate([-20, -18, 57]) {\n        sphere(r = 2);\n    }\n    translate([20, -18, 57]) {\n        sphere(r = 2);\n    }\n    \n    // Couch cushions\n    translate([0, 10, 32]) {\n        cube([80, 35, 8], center = true);\n    }\n    \n    // Monster spots (decorative cushions)\n    for(x = [-25:25:25]) {\n        for(y = [5:15:20]) {\n            translate([x, y, 40]) {\n                scale([1, 1, 0.3]) {\n                    sphere(r = 8);\n                }\n            }\n        }\n    }\n    \n    // Couch skirt with monster fringe\n    translate([0, 0, 12]) {\n        difference() {\n            cube([94, 54, 4], center = true);\n            for(x = [-42:6:42]) {\n                translate([x, -25, 2]) {\n                    cube([4, 2, 4], center = true);\n                }\n                translate([x, 25, 2]) {\n                    cube([4, 2, 4], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nmonster_couch();",
    "renders": true
  },
  {
    "natural_object": "mutant",
    "openscad_code": "// Mutant Chair - Organic meets Furniture\n// A chair that appears to be growing from a tree trunk with branch-like legs\n\n$fn = 50;\n\n// Overall dimensions\nseat_height = 45;\nseat_width = 40;\nseat_depth = 40;\nback_height = 80;\n\nmodule trunk_leg(radius, height, twist) {\n    // Create a twisted trunk-like leg\n    union() {\n        // Main trunk cylinder\n        cylinder(h = height, r = radius, center = false);\n        \n        // Add bark texture with small cylinders\n        for (i = [0:30]) {\n            rotate([0, 0, i * 12 + twist])\n            translate([radius * 0.9, 0, height * (i/30)])\n            rotate([90, 0, 0])\n            cylinder(h = radius * 0.3, r = radius * 0.15, center = true);\n        }\n        \n        // Root flare at bottom\n        translate([0, 0, -2])\n        cylinder(h = 4, r1 = radius * 1.3, r2 = radius, center = false);\n    }\n}\n\nmodule mutant_chair() {\n    difference() {\n        union() {\n            // Seat - organic shaped slab\n            translate([0, 0, seat_height])\n            scale([1, 1.2, 0.8])\n            sphere(r = seat_width/2);\n            \n            // Backrest - growing from seat\n            translate([0, -seat_depth/3, seat_height + back_height/2 - 10])\n            scale([0.8, 0.3, 1.2])\n            sphere(r = seat_width/2);\n            \n            // Front left leg - main trunk\n            translate([-seat_width/2 + 8, seat_depth/2 - 8, 0])\n            trunk_leg(radius = 6, height = seat_height, twist = 15);\n            \n            // Front right leg - branching off\n            translate([seat_width/2 - 8, seat_depth/2 - 8, 0])\n            trunk_leg(radius = 5, height = seat_height, twist = -20);\n            \n            // Rear legs - fused together as single trunk\n            translate([0, -seat_depth/2 + 5, 0])\n            trunk_leg(radius = 7, height = seat_height, twist = 0);\n            \n            // Support branches between legs\n            translate([-seat_width/4, 0, seat_height/2])\n            rotate([0, 90, 0])\n            cylinder(h = seat_width/2, r = 3);\n            \n            translate([seat_width/4, 0, seat_height/2])\n            rotate([0, 90, 0])\n            cylinder(h = seat_width/2, r = 3);\n            \n            // Armrest branches\n            translate([-seat_width/2 - 5, 0, seat_height + 15])\n            rotate([0, 0, 30])\n            cylinder(h = 20, r = 3);\n            \n            translate([seat_width/2 + 5, 0, seat_height + 15])\n            rotate([0, 0, -30])\n            cylinder(h = 20, r = 3);\n            \n            // Small branch details on backrest\n            for (i = [-2:2]) {\n                translate([i * 10, -seat_depth/3 - 5, seat_height + 40])\n                rotate([0, 20, 0])\n                cylinder(h = 15, r = 1.5);\n            }\n        }\n        \n        // Hollow out the seat for sitting\n        translate([0, 0, seat_height])\n        scale([0.7, 1, 0.6])\n        sphere(r = seat_width/2 - 2);\n        \n        // Hollow out backrest\n        translate([0, -seat_depth/3 - 2, seat_height + back_height/2 - 8])\n        scale([0.6, 0.2, 1])\n        sphere(r = seat_width/2 - 2);\n    }\n}\n\n// Scale to reasonable print size\nscale([0.8, 0.8, 0.8])\nmutant_chair();",
    "renders": true
  },
  {
    "natural_object": "android",
    "openscad_code": "// Android-inspired desk organizer / small shelf unit\n// Realistic style with medium complexity\n// Overall dimensions: 110mm (W) x 60mm (D) x 80mm (H)\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main parameters\nhead_width = 40;\nhead_height = 35;\nbody_width = 50;\nbody_height = 45;\narm_thickness = 8;\nleg_thickness = 10;\nwall_thickness = 2;\n\nmodule android_head() {\n    // Main head - rounded cube\n    difference() {\n        translate([0, 0, head_height/2])\n            minkowski() {\n                cube([head_width, head_width*0.9, head_height*0.7], center=true);\n                sphere(5);\n            }\n        \n        // Eye cutouts\n        translate([-head_width/4, head_width*0.4, head_height*0.5])\n            cylinder(h=10, r1=3, r2=5);\n        translate([head_width/4, head_width*0.4, head_height*0.5])\n            cylinder(h=10, r1=3, r2=5);\n    }\n    \n    // Antenna details\n    translate([0, 0, head_height+2])\n        cylinder(h=5, r1=3, r2=1);\n}\n\nmodule android_body() {\n    // Main torso - hollow for storage\n    difference() {\n        // Outer shell\n        translate([0, 0, body_height/2])\n            minkowski() {\n                cube([body_width, body_width*0.6, body_height], center=true);\n                sphere(3);\n            }\n        \n        // Inner cavity for storage\n        translate([0, 0, body_height/2])\n            minkowski() {\n                cube([body_width-wall_thickness*2, body_width*0.6-wall_thickness*2, body_height-wall_thickness*2], center=true);\n                sphere(1);\n            }\n    }\n    \n    // Front panel detail\n    translate([0, body_width*0.3+wall_thickness, body_height/2])\n        cube([body_width-wall_thickness*4, wall_thickness, body_height-wall_thickness*4], center=true);\n}\n\nmodule android_arms() {\n    // Left arm\n    translate([-body_width/2-arm_thickness/2, 0, body_height*0.7])\n        rotate([0, 0, -15])\n            difference() {\n                cylinder(h=25, r=arm_thickness/2);\n                translate([0, 0, -1])\n                    cylinder(h=27, r=arm_thickness/2-2);\n            }\n    \n    // Right arm\n    translate([body_width/2+arm_thickness/2, 0, body_height*0.7])\n        rotate([0, 0, 15])\n            difference() {\n                cylinder(h=25, r=arm_thickness/2);\n                translate([0, 0, -1])\n                    cylinder(h=27, r=arm_thickness/2-2);\n            }\n}\n\nmodule android_legs() {\n    // Left leg\n    translate([-body_width/4, 0, -leg_thickness/2])\n        difference() {\n            cylinder(h=20, r=leg_thickness/2);\n            translate([0, 0, -1])\n                cylinder(h=22, r=leg_thickness/2-2);\n        }\n    \n    // Right leg\n    translate([body_width/4, 0, -leg_thickness/2])\n        difference() {\n            cylinder(h=20, r=leg_thickness/2);\n            translate([0, 0, -1])\n                cylinder(h=22, r=leg_thickness/2-2);\n        }\n}\n\nmodule base_platform() {\n    // Base platform with cable management slots\n    difference() {\n        // Main base\n        translate([0, 0, -5])\n            cube([110, 60, 10], center=true);\n        \n        // Cable slots\n        for(i = [-1, 0, 1]) {\n            translate([i*30, 0, -5])\n                cube([8, 60, 10], center=true);\n        }\n        \n        // Center hole\n        translate([0, 0, -3])\n            cylinder(h=10, r=5);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 20])\n    union() {\n        // Android body parts\n        android_head();\n        translate([0, 0, 0])\n            android_body();\n        android_arms();\n        android_legs();\n        \n        // Base platform\n        base_platform();\n    }",
    "renders": true
  },
  {
    "natural_object": "automaton",
    "openscad_code": "// Modular Automaton Rocking Chair\n// Realistic style, medium complexity\n// Overall size: ~100mm wide x ~85mm deep x ~95mm tall\n\n// Parameters\nseat_width = 60;\nseat_depth = 50;\nseat_thickness = 3;\nback_height = 45;\nleg_height = 35;\nrocker_radius = 75;\nrocker_thickness = 4;\nslat_width = 8;\nslat_gap = 3;\n\n// Main module\nmodule rocking_chair() {\n    // Rockers\n    union() {\n        translate([-seat_width/2 - 5, 0, leg_height/2])\n            rocker();\n        translate([seat_width/2 + 5, 0, leg_height/2])\n            mirror([1,0,0])\n                rocker();\n    }\n    \n    // Seat frame\n    translate([0, 0, leg_height])\n        seat_frame();\n    \n    // Backrest\n    translate([0, -seat_depth/2 + 5, leg_height + seat_thickness])\n        backrest();\n    \n    // Legs\n    for(x = [-seat_width/2 + 5, seat_width/2 - 5])\n        for(y = [-seat_depth/2 + 5, seat_depth/2 - 5])\n            translate([x, y, leg_height/2])\n                leg();\n    \n    // Automaton gears on back\n    translate([0, -seat_depth/2 + 5, leg_height + seat_thickness + back_height/2])\n        automaton_mechanism();\n}\n\n// Curved rocker base\nmodule rocker() {\n    difference() {\n        // Main curved rocker\n        rotate([90, 0, 0])\n            cylinder(h=rocker_thickness, r=rocker_radius, $fn=50);\n        \n        // Hollow center\n        translate([0, 0, -rocker_thickness/2])\n            cylinder(h=rocker_thickness + 1, r=rocker_radius - 6, $fn=50);\n        \n        // Flat bottom surface\n        translate([0, -rocker_radius + 10, -rocker_thickness/2 - 1])\n            cube([rocker_thickness + 10, 25, rocker_thickness + 2], center=true);\n    }\n}\n\n// Seat frame with slats\nmodule seat_frame() {\n    difference() {\n        // Outer frame\n        cube([seat_width + 10, seat_depth + 10, seat_thickness], center=true);\n        \n        // Inner cavity\n        cube([seat_width, seat_depth, seat_thickness + 1], center=true);\n    }\n    \n    // Seat slats\n    for(y = [-seat_depth/2 + 10 : slat_width + slat_gap : seat_depth/2 - 10]) {\n        translate([0, y, seat_thickness/2])\n            cube([seat_width - 10, slat_width, seat_thickness - 1], center=true);\n    }\n}\n\n// Backrest with vertical slats\nmodule backrest() {\n    // Back frame\n    difference() {\n        cube([seat_width + 6, 6, back_height], center=true);\n        \n        // Hollow back\n        cube([seat_width, 8, back_height - 6], center=true);\n    }\n    \n    // Vertical slats\n    for(x = [-seat_width/2 + 10 : 12 : seat_width/2 - 10]) {\n        translate([x, 0, 0])\n            cube([6, 4, back_height - 8], center=true);\n    }\n}\n\n// Simple cylindrical leg\nmodule leg() {\n    difference() {\n        cylinder(h=leg_height, r=4, $fn=20);\n        cylinder(h=leg_height, r=2, $fn=20);\n    }\n}\n\n// Automaton mechanism (decorative gears)\nmodule automaton_mechanism() {\n    // Large gear\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h=6, r=12, $fn=20);\n            for(i = [0:6]) {\n                rotate([0, 0, i*60])\n                    translate([8, 0, -1])\n                        cube([6, 4, 8]);\n            }\n            cylinder(h=7, r=3, $fn=20);\n        }\n    \n    // Small gear\n    translate([0, 0, -20])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=4, r=8, $fn=12);\n                for(i = [0:5]) {\n                    rotate([0, 0, i*60])\n                        translate([5, 0, -1])\n                            cube([4, 3, 6]);\n                }\n                cylinder(h=5, r=2, $fn=20);\n            }\n    \n    // Connecting rod\n    translate([0, 0, -10])\n        rotate([0, 0, 90])\n            cylinder(h=30, r=2, $fn=10);\n}\n\n// Render the chair\nrocking_chair();",
    "renders": true
  },
  {
    "natural_object": "droid",
    "openscad_code": "// R2-D2 Inspired Side Table - Realistic Medium Complexity\n// Overall dimensions: 120mm diameter, 300mm height\n\n$fn = 64;\n\nmodule leg_segment(height = 60, diameter = 15) {\n    // Single tapered leg segment with connection joint\n    cylinder(h = height, d1 = diameter, d2 = diameter * 0.8);\n    \n    // Connection joint at top\n    translate([0, 0, height])\n        cylinder(h = 5, d = diameter * 1.2);\n}\n\nmodule tripod_base() {\n    // Three-leg support structure\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([45, 0, 0])\n                leg_segment();\n    }\n    \n    // Central hub connecting legs\n    cylinder(h = 20, d = 30);\n}\n\nmodule body_detail_ring(height, diameter, thickness = 2) {\n    // Decorative ring detail around body\n    difference() {\n        cylinder(h = height, d = diameter + thickness);\n        cylinder(h = height + 0.1, d = diameter);\n    }\n}\n\nmodule storage_drawer(width = 40, height = 15, depth = 20) {\n    // Functional drawer for small items\n    difference() {\n        // Drawer box\n        translate([0, 0, height/2])\n            cube([width, depth, height], center = true);\n        \n        // Hollow interior\n        translate([0, depth/2 - 2, height/2])\n            cube([width - 4, depth - 1, height - 4], center = true);\n        \n        // Handle recess\n        translate([0, depth/2 + 1, height/2])\n            cube([width * 0.6, 2, 6], center = true);\n    }\n    \n    // Drawer handle\n    translate([0, depth/2 + 2, height/2])\n        cylinder(h = 8, d = 4);\n}\n\nmodule dome_top() {\n    // R2-D2 style dome head with sensor details\n    difference() {\n        // Main dome\n        sphere(d = 120);\n        \n        // Flat top for table surface\n        translate([0, 0, 55])\n            cube([120, 120, 30], center = true);\n        \n        // Sensor eye recess\n        translate([40, 0, 45])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 15);\n    }\n    \n    // Sensor eye\n    translate([40, 0, 45])\n        rotate([0, 90, 0])\n            cylinder(h = 5, d = 12);\n    \n    // Antenna detail\n    translate([0, 0, 65])\n        cylinder(h = 15, d = 3);\n}\n\nmodule body_shell() {\n    // Main cylindrical body with cutouts\n    difference() {\n        // Main body\n        cylinder(h = 180, d = 120);\n        \n        // Front panel cutout for drawer\n        translate([0, 55, 90])\n            cube([50, 20, 30], center = true);\n        \n        // Side vents\n        for (i = [0:30:150]) {\n            rotate([0, 0, 45])\n                translate([0, 60, i])\n                    cube([3, 2, 10], center = true);\n        }\n    }\n    \n    // Add structural rings\n    body_detail_ring(5, 120, 3);\n    translate([0, 0, 60])\n        body_detail_ring(5, 118, 3);\n    translate([0, 0, 120])\n        body_detail_ring(5, 120, 3);\n    \n    // Add drawer\n    translate([0, 45, 90])\n        storage_drawer();\n}\n\n// Assembly\nunion() {\n    // Base support\n    tripod_base();\n    \n    // Main body on top of base\n    translate([0, 0, 60])\n        body_shell();\n    \n    // Dome table top\n    translate([0, 0, 240])\n        dome_top();\n}",
    "renders": true
  },
  {
    "natural_object": "mech",
    "openscad_code": "// Mecha Office Chair - Realistic Style, Medium Complexity\n// Approx 120mm tall when printed at 1:1 scale\n\n// Main Parameters\nchair_height = 120;\nseat_width = 60;\nseat_depth = 55;\nback_height = 65;\nleg_clearance = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chair_base() {\n    // Central pole with hydraulic cylinder look\n    cylinder(h=leg_clearance, r1=8, r2=6, $fn=20);\n    \n    // 5-star base with casters\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n        translate([0,25,0])\n        union() {\n            // Star arm\n            translate([0,0,-wall])\n            cube([8, 25, wall], center=true);\n            \n            // Caster wheel\n            translate([0,37.5, -leg_clearance+wall])\n            sphere(r=5, $fn=12);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat pad with realistic cushion shape\n    translate([0,0,leg_clearance])\n    minkowski() {\n        cube([seat_width, seat_depth, 8], center=true);\n        sphere(r=2, $fn=12);\n    }\n    \n    // Seat pan structure underneath\n    translate([0,0,leg_clearance-2])\n    difference() {\n        cube([seat_width-wall*2, seat_depth-wall*2, 4], center=true);\n        translate([0,0,-1])\n        cube([seat_width-wall*4, seat_depth-wall*4, 6], center=true);\n    }\n}\n\nmodule backrest() {\n    // Main back frame\n    translate([0,-seat_depth/2+5,leg_clearance+back_height/2])\n    difference() {\n        cube([seat_width-10, 8, back_height-10], center=true);\n        translate([0,0,0])\n        cube([seat_width-14, 12, back_height-14], center=true);\n    }\n    \n    // Lumbar support pad\n    translate([0,-seat_depth/2+5,leg_clearance+back_height/3])\n    scale([1,0.8,0.5])\n    sphere(r=20, $fn=20);\n    \n    // Headrest\n    translate([0,-seat_depth/2+5,leg_clearance+back_height-5])\n    minkowski() {\n        cube([30, 15, 12], center=true);\n        sphere(r=3, $fn=12);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2-5,0,leg_clearance+15])\n    union() {\n        // Support post\n        cylinder(h=20, r=4, $fn=12);\n        \n        // Arm pad\n        translate([0,0,12])\n        rotate([15,0,0])\n        cube([6, 25, 4], center=true);\n    }\n    \n    // Right armrest\n    mirror([1,0,0])\n    translate([-seat_width/2-5,0,leg_clearance+15])\n    union() {\n        cylinder(h=20, r=4, $fn=12);\n        translate([0,0,12])\n        rotate([15,0,0])\n        cube([6, 25, 4], center=true);\n    }\n}\n\nmodule adjustment_lever() {\n    // Side lever for height adjustment\n    translate([seat_width/2+3,0,leg_clearance+5])\n    rotate([0,90,0])\n    cylinder(h=15, r=2, $fn=8);\n    \n    // Handle knob\n    translate([seat_width/2+3,7.5,leg_clearance+5])\n    sphere(r=3, $fn=12);\n}\n\n// Assembly\nunion() {\n    chair_base();\n    seat_cushion();\n    backrest();\n    armrests();\n    adjustment_lever();\n}",
    "renders": true
  },
  {
    "natural_object": "pilot",
    "openscad_code": "// Pilot's Chair - Realistic Style, Medium Complexity\n// Dimensions: 100mm tall, 80mm wide, 90mm deep\n\n$fn=50;  // Smooth curves for 3D printing\n\n// Main seat assembly\nmodule pilot_chair() {\n    // Chair base with 5-star swivel legs\n    union() {\n        // Central column\n        translate([0,0,15]) \n            cylinder(h=30, d=20);\n        \n        // Star base legs\n        for(i=[0:4]) {\n            rotate([0,0,i*72]) \n                translate([0,0,0]) \n                    chair_leg();\n        }\n        \n        // Chair seat\n        translate([0,0,45]) \n            chair_seat();\n        \n        // Backrest\n        translate([0,-35,65]) \n            rotate([10,0,0]) \n                chair_backrest();\n        \n        // Armrests\n        translate([35,0,55]) \n            armrest();\n        mirror([1,0,0]) \n            translate([35,0,55]) \n                armrest();\n    }\n}\n\n// Single chair leg with wheel\nmodule chair_leg() {\n    union() {\n        // Leg\n        translate([0,0,0]) \n            rotate([90,0,0]) \n                cylinder(h=40, d=6);\n        \n        // Wheel\n        translate([0,40,0]) \n            sphere(d=12);\n        \n        // Leg support\n        translate([0,20,0]) \n            rotate([90,0,0]) \n                cylinder(h=20, d=4);\n    }\n}\n\n// Padded seat cushion\nmodule chair_seat() {\n    difference() {\n        // Main cushion\n        translate([0,0,0]) \n            scale([1,0.8,0.3]) \n                sphere(d=60);\n        \n        // Bottom cutout\n        translate([0,0,-8]) \n            cube([60,50,10], center=true);\n    }\n    \n    // Seat pan structure\n    translate([0,0,-5]) \n        difference() {\n            cube([60,50,8], center=true);\n            translate([0,0,-1]) \n                cube([56,46,10], center=true);\n        }\n}\n\n// High backrest with headrest\nmodule chair_backrest() {\n    union() {\n        // Main backrest\n        translate([0,0,0]) \n            scale([1,1.2,2.5]) \n                difference() {\n                    sphere(d=60);\n                    translate([0,0,-30]) \n                        cube([60,70,30], center=true);\n                }\n        \n        // Headrest\n        translate([0,0,40]) \n            scale([0.7,0.8,0.5]) \n                sphere(d=40);\n        \n        // Lumbar support\n        translate([0,-5,-10]) \n            scale([0.8,0.3,0.3]) \n                sphere(d=40);\n    }\n}\n\n// Adjustable armrest with controls\nmodule armrest() {\n    difference() {\n        // Main armrest\n        translate([0,0,0]) \n            rotate([0,20,0]) \n                cube([8,30,20]);\n        \n        // Soft pad\n        translate([0,0,15]) \n            scale([0.9,0.95,0.5]) \n                cube([8,30,10]);\n    }\n    \n    // Control stick base\n    translate([0,15,20]) \n        cylinder(h=8, d=12);\n    \n    // Control stick\n    translate([0,15,28]) \n        cylinder(h=20, d=4);\n    \n    // Control grip\n    translate([0,15,48]) \n        sphere(d=6);\n}\n\n// Render the complete chair\npilot_chair();",
    "renders": true
  },
  {
    "natural_object": "captain",
    "openscad_code": "$fa = 2;\n$fs = 2;\n\n// Overall scale factor\nscale_factor = 0.5;\n\n// Main dimensions\ntotal_height = 120 * scale_factor;\nseat_height = 45 * scale_factor;\nseat_diameter = 40 * scale_factor;\nback_height = 75 * scale_factor;\nleg_length = seat_height - 10 * scale_factor;\nleg_thickness = 4 * scale_factor;\nring_diameter = 35 * scale_factor;\nring_thickness = 2 * scale_factor;\n\nmodule captain_chair() {\n    // Central support post\n    union() {\n        // Main vertical post\n        cylinder(h = leg_length, d = 12 * scale_factor, $fn = 32);\n        \n        // Decorative rings around post\n        for (i = [0:2]) {\n            translate([0, 0, i * leg_length/3 + 5 * scale_factor])\n                cylinder(h = ring_thickness, d = ring_diameter - i * 5 * scale_factor, $fn = 32);\n        }\n    }\n    \n    // Seat\n    translate([0, 0, leg_length])\n    difference() {\n        // Main seat cushion\n        cylinder(h = 10 * scale_factor, d = seat_diameter, $fn = 64);\n        \n        // Cushion indent\n        translate([0, 0, 2 * scale_factor])\n            cylinder(h = 8 * scale_factor, d = seat_diameter - 6 * scale_factor, $fn = 64);\n    }\n    \n    // Backrest structure\n    translate([0, 0, leg_length + 10 * scale_factor]) {\n        // Backrest posts\n        for (angle = [135, 225]) {\n            rotate([0, 0, angle])\n                translate([seat_diameter/2 - 8 * scale_factor, 0, 0])\n                    cylinder(h = back_height, d = 6 * scale_factor, $fn = 16);\n        }\n        \n        // Backrest slats\n        for (i = [1:3]) {\n            translate([0, 0, i * back_height/4])\n                rotate([90, 0, 0])\n                    cylinder(h = seat_diameter - 16 * scale_factor, d = 4 * scale_factor, $fn = 16);\n        }\n        \n        // Top rail\n        translate([0, 0, back_height - 4 * scale_factor])\n            rotate([90, 0, 0])\n                cylinder(h = seat_diameter - 12 * scale_factor, d = 8 * scale_factor, $fn = 16);\n    }\n    \n    // Legs\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([ring_diameter * 0.7, 0, 0])\n                cylinder(h = leg_length, d = leg_thickness, $fn = 16);\n    }\n    \n    // Footrest ring\n    translate([0, 0, leg_length * 0.3])\n        cylinder(h = 3 * scale_factor, d = ring_diameter + 10 * scale_factor, $fn = 32);\n}\n\ncaptain_chair();",
    "renders": true
  },
  {
    "natural_object": "general",
    "openscad_code": "// Modern Scandinavian-style coffee table (medium complexity)\n// 90 mm long x 50 mm wide x 35 mm high, 3D-printable with 2 mm walls\n\n// Overall dimensions\ntable_length = 90;\ntable_width = 50;\ntable_height = 35;\nleg_size = 6;\ntop_thickness = 4;\n\n// Tabletop with rounded edges\nmodule tabletop() {\n    difference() {\n        // Main top\n        translate([0, 0, table_height - top_thickness/2])\n            cube([table_length, table_width, top_thickness], center=true);\n        \n        // Rounded edge cutouts\n        for (x = [-table_length/2 + 2, table_length/2 - 2]) {\n            for (y = [-table_width/2 + 2, table_width/2 - 2]) {\n                translate([x, y, table_height - top_thickness - 2])\n                    cylinder(h=top_thickness + 4, r=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Tapered leg\nmodule tapered_leg() {\n    difference() {\n        // Main tapered leg\n        hull() {\n            translate([0, 0, 0])\n                cube([leg_size * 0.8, leg_size * 0.8, 2], center=true);\n            translate([0, 0, table_height - top_thickness - 1])\n                cube([leg_size, leg_size, 2], center=true);\n        }\n        \n        // Hollow center for 2mm walls\n        translate([0, 0, 1])\n            cube([leg_size * 0.8 - 2, leg_size * 0.8 - 2, table_height - top_thickness - 2], center=true);\n    }\n}\n\n// Lower shelf with rounded edges\nmodule shelf() {\n    translate([0, 0, table_height/3])\n    difference() {\n        cube([table_length * 0.7, table_width * 0.7, 2], center=true);\n        \n        // Rounded corners\n        for (x = [-table_length * 0.35 + 1, table_length * 0.35 - 1]) {\n            for (y = [-table_width * 0.35 + 1, table_width * 0.35 - 1]) {\n                translate([x, y, -1])\n                    cylinder(h=4, r=1, $fn=16);\n            }\n        }\n    }\n}\n\n// Cross support beam\nmodule support_beam() {\n    translate([0, 0, table_height/3 + 2])\n    rotate([90, 0, 0])\n    difference() {\n        cube([table_length * 0.6, 2, leg_size], center=true);\n        translate([0, 0, 1])\n            cube([table_length * 0.6 - 2, 2, leg_size - 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Tabletop\n    tabletop();\n    \n    // Four legs\n    for (x = [-table_length/2 + leg_size/2 + 3, table_length/2 - leg_size/2 - 3])\n        for (y = [-table_width/2 + leg_size/2 + 3, table_width/2 - leg_size/2 - 3])\n            translate([x, y, 0])\n                tapered_leg();\n    \n    // Lower shelf\n    shelf();\n    \n    // Support beams\n    support_beam();\n    rotate([0, 0, 90])\n        support_beam();\n}",
    "renders": true
  },
  {
    "natural_object": "admiral",
    "openscad_code": "// Admiral Chair - Medium Complexity Realistic Style\n// Overall dimensions: 80mm wide x 90mm deep x 120mm tall\n\n$fn = 32;\n\nmodule chair_base() {\n    // Central support column\n    cylinder(h=80, r=15);\n    \n    // Five-star base legs\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 0, -5]) {\n                difference() {\n                    // Main leg\n                    translate([15, -7, 0]) \n                        cube([35, 14, 10]);\n                    \n                    // Rounded end\n                    translate([48, 0, 5])\n                        rotate([90, 0, 0])\n                            cylinder(h=7, r=7);\n                }\n            }\n            \n            // Caster wheel\n            translate([50, 0, -8])\n                sphere(r=6);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat\n    translate([0, 0, 80])\n        difference() {\n            resize([70, 75, 15]) \n                sphere(r=35);\n            translate([0, 0, -5])\n                cube([100, 100, 20], center=true);\n        }\n    \n    // Upholstery detail\n    translate([0, 0, 93])\n        for(y = [-20, 0, 20]) {\n            translate([0, y, -1])\n                cube([65, 2, 2]);\n        }\n}\n\nmodule backrest() {\n    // Main back support\n    translate([0, -35, 95])\n        difference() {\n            resize([65, 10, 60])\n                sphere(r=30);\n            translate([0, -6, 0])\n                cube([100, 20, 100], center=true);\n        }\n    \n    // Headrest\n    translate([0, -35, 135])\n        difference() {\n            resize([40, 8, 25])\n                sphere(r=20);\n            translate([0, -5, 0])\n                cube([50, 20, 50], center=true);\n        }\n    \n    // Armrest supports\n    translate([-35, -15, 90])\n        rotate([0, 15, 0])\n            cylinder(h=45, r=4);\n    translate([35, -15, 90])\n        rotate([0, -15, 0])\n            cylinder(h=45, r=4);\n    \n    // Armrests\n    translate([-35, -15, 105])\n        rotate([0, 0, 90])\n            cylinder(h=30, r=4);\n    translate([35, -15, 105])\n        rotate([0, 0, -90])\n            cylinder(h=30, r=4);\n    \n    // Lumbar support curve\n    translate([0, -30, 100])\n        resize([55, 8, 35])\n            sphere(r=20);\n}\n\nmodule adjustment_lever() {\n    // Height adjustment lever\n    translate([25, 15, 85])\n        rotate([0, 90, 0])\n            cylinder(h=20, r=3);\n    \n    // Handle\n    translate([25, 15, 85])\n        rotate([0, 90, 0])\n            translate([15, 0, 0])\n                sphere(r=5);\n}\n\n// Assembly\nunion() {\n    chair_base();\n    seat_cushion();\n    backrest();\n    adjustment_lever();\n}",
    "renders": true
  },
  {
    "natural_object": "sergeant",
    "openscad_code": "// Sergeant Chair - Realistic Style, Medium Complexity\n// A recognizable office chair with sergeant-style details\n\n$fn=32;\n\nmodule chair_base() {\n    // Central pole\n    cylinder(h=60, d=12, center=false);\n    \n    // Star base legs\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n            translate([0,0,8])\n                difference() {\n                    cube([60,20,6], center=true);\n                    translate([0,0,2]) cube([58,18,6], center=true);\n                }\n    }\n    \n    // Wheels\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n            translate([50,0,0])\n                rotate([90,0,0])\n                    cylinder(h=12, d=8);\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat\n    difference() {\n        translate([0,0,5])\n            cube([50,50,10], center=true);\n        translate([0,0,7])\n            cube([46,46,10], center=true);\n    }\n    \n    // Rounded top\n    translate([0,0,10])\n        scale([1,1,0.3])\n            sphere(d=50);\n}\n\nmodule backrest() {\n    // Main back\n    difference() {\n        cube([50,60,8], center=true);\n        translate([0,0,2]) cube([46,56,8], center=true);\n    }\n    \n    // Top curve\n    translate([0,30,0])\n        rotate([90,0,0])\n            cylinder(h=50, d=8, center=true);\n    \n    // Horizontal supports\n    for(y=[-15,0,15]) {\n        translate([0,y,0])\n            cube([52,2,10], center=true);\n    }\n    \n    // Vertical supports\n    for(x=[-20,0,20]) {\n        translate([x,0,0])\n            cube([2,60,10], center=true);\n    }\n}\n\nmodule armrests() {\n    // Left arm\n    translate([-30,0,20]) {\n        // Vertical post\n        cylinder(h=20, d=6);\n        \n        // Horizontal rest\n        translate([0,-15,20])\n            rotate([0,90,0])\n                cylinder(h=30, d=5);\n    }\n    \n    // Right arm\n    translate([30,0,20]) {\n        // Vertical post\n        cylinder(h=20, d=6);\n        \n        // Horizontal rest\n        translate([0,-15,20])\n            rotate([0,90,0])\n                cylinder(h=30, d=5);\n    }\n}\n\nmodule gas_lift() {\n    // Outer cylinder\n    cylinder(h=15, d=14);\n    \n    // Inner piston\n    translate([0,0,7])\n        cylinder(h=40, d=8);\n}\n\n// Assemble the chair\nunion() {\n    // Base and wheels\n    chair_base();\n    \n    // Gas lift\n    translate([0,0,60])\n        gas_lift();\n    \n    // Seat mechanism\n    translate([0,0,75])\n        cylinder(h=8, d=20);\n    \n    // Seat\n    translate([0,0,83])\n        seat_cushion();\n    \n    // Backrest support\n    translate([0,-25,83])\n        rotate([0,10,0])\n            difference() {\n                cube([8,40,15], center=true);\n                translate([0,0,2]) cube([4,36,15], center=true);\n            }\n    \n    // Backrest\n    translate([0,-55,93])\n        backrest();\n    \n    // Armrests\n    armrests();\n}",
    "renders": true
  },
  {
    "natural_object": "scout",
    "openscad_code": "// Scout folding stool – realistic style, 3D-print friendly\n// Overall height 110 mm, seat Ø 240 mm, folds to 40 mm thick\n\n$fn = 36;               // smooth curves\nwall = 2;               // uniform 2 mm shell thickness\nlegD = 8;               // leg tube outer diameter\npinD = 3.2;             // hinge pin diameter (3 mm screw)\n\nmodule leg(len=100) {\n    // hollow round tube\n    difference() {\n        cylinder(d=legD, h=len, center=true);\n        translate([0,0,-1]) cylinder(d=legD-2*wall, h=len+2, center=true);\n    }\n}\n\nmodule hinge_half(len=12) {\n    // one half of a printable hinge knuckle\n    // two knuckles interlock, pin passes through center\n    difference() {\n        // main knuckle body\n        union() {\n            cylinder(d=legD+4, h=len, center=true);\n            translate([0,0,-len/2]) cube([legD+4, legD+4, len], center=true);\n        }\n        // clearance hole for pin\n        rotate([90,0,0]) cylinder(d=pinD+0.2, h=legD+5, center=true);\n    }\n}\n\nmodule leg_assembly(len=100) {\n    // single leg with top hinge\n    union() {\n        translate([0,0,len/2]) leg(len);\n        translate([0,0,len]) hinge_half(8);\n    }\n}\n\nmodule seat_surface() {\n    // round seat with gentle dome, 2 mm shell\n    difference() {\n        minkowski() {\n            cylinder(d=240, h=2, center=true);\n            sphere(d=10);\n        }\n        translate([0,0,-1]) scale([0.92,0.92,0.9]) \n            cylinder(d=240, h=10, center=true);\n    }\n}\n\nmodule seat_frame() {\n    // circular frame under seat receives legs\n    torus(r1=110-wall, r2=wall);\n}\n\nmodule torus(r1, r2) {\n    rotate_extrude()\n        translate([r1,0,0]) circle(r=r2);\n}\n\nmodule brace(len=240) {\n    // cross brace between opposite legs for stability\n    difference() {\n        cube([len, legD, legD], center=true);\n        cube([len, legD-2*wall, legD-2*wall], center=true);\n    }\n}\n\n// -------------------- ASSEMBLY --------------------\n\nunion() {\n    // seat\n    translate([0,0,110]) seat_surface();\n    translate([0,0,110-2-wall]) seat_frame();\n\n    // four legs\n    for (a=[0:90:270]) {\n        rotate([0,0,a]) {\n            translate([110-4,0,0]) rotate([0,-15,0]) leg_assembly(108);\n        }\n    }\n\n    // two cross braces\n    rotate([0,0,45]) translate([0,0,50]) brace(220);\n    rotate([0,0,-45]) translate([0,0,50]) brace(220);\n}",
    "renders": true
  },
  {
    "natural_object": "tracker",
    "openscad_code": "// Tracker - Medium complexity realistic furniture\n// A wooden tracker box with sliding drawers and brass hardware\n\n// Overall dimensions (in mm)\nlength = 120;\nwidth = 80;\nheight = 60;\nwall_thickness = 2;\n\nmodule tracker_box() {\n    // Main box body\n    difference() {\n        // Outer shell\n        cube([length, width, height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([length-wall_thickness*2, width-wall_thickness*2, height-wall_thickness], center=true);\n    }\n    \n    // Bottom panel\n    translate([0, 0, height/2 - wall_thickness/2])\n        cube([length-wall_thickness*2, width-wall_thickness*2, wall_thickness], center=true);\n}\n\nmodule drawer(index, height_percent) {\n    drawer_height = height * height_percent;\n    drawer_width = width * 0.9;\n    drawer_length = length * 0.85;\n    \n    // Drawer body\n    translate([0, 0, -height/2 + drawer_height/2 + index * (height/3)])\n    difference() {\n        cube([drawer_length, drawer_width, drawer_height - 3], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([drawer_length-wall_thickness*2, drawer_width-wall_thickness*2, drawer_height-3-wall_thickness], center=true);\n    }\n    \n    // Drawer front face\n    translate([0, 0, -height/2 + drawer_height/2 + index * (height/3) + drawer_height/2 - 1.5])\n    difference() {\n        cube([length, width, 3], center=true);\n        \n        // Recessed panel\n        translate([0, 0, 0.5])\n            cube([length-8, width-8, 1], center=true);\n    }\n    \n    // Brass drawer pull\n    translate([0, width/2 - 10, -height/2 + drawer_height/2 + index * (height/3)])\n    rotate([90, 0, 0])\n        cylinder(h=15, r=3, center=true);\n    \n    // Brass escutcheon plate\n    translate([0, width/2 - 10, -height/2 + drawer_height/2 + index * (height/3)])\n        cube([20, 2, 6], center=true);\n}\n\nmodule corner_brackets() {\n    // Brass corner brackets\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            for(z=[-1, 1]) {\n                translate([x*(length/2 - 5), y*(width/2 - 5), z*(height/2 - 5)])\n                    difference() {\n                        cube([10, 10, 10], center=true);\n                        translate([0, 0, 3])\n                            cube([6, 6, 4], center=true);\n                    }\n            }\n        }\n    }\n}\n\nmodule wood_texture() {\n    // Subtle wood grain texture lines\n    for(i=[-length/2:3:length/2]) {\n        translate([i, 0, height/2 + 0.1])\n            cube([0.5, width, 0.2], center=true);\n    }\n    for(i=[-width/2:3:width/2]) {\n        translate([0, i, height/2 + 0.1])\n            cube([length, 0.5, 0.2], center=true);\n    }\n}\n\n// Assemble the tracker\nunion() {\n    tracker_box();\n    \n    // Three drawers\n    drawer(0, 0.3);\n    drawer(1, 0.3);\n    drawer(2, 0.3);\n    \n    // Structural reinforcements\n    corner_brackets();\n    \n    // Surface details\n    wood_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "hunter",
    "openscad_code": "// Hunter's Stool with Carved Animal Motifs\n// Dimensions: 120mm height, 300mm width, 300mm depth\n\n$fn = 50;\n\nmodule leg_support(radius, height) {\n    // Tapered cylindrical leg with slight curve\n    for(i = [0:10]) {\n        h = i * height/10;\n        r = radius * (1 - 0.2 * sin(h/height * 90));\n        translate([0, 0, h])\n            cylinder(h=height/10 + 0.1, r1=r, r2=r * (1 - 0.02), $fn=8);\n    }\n}\n\nmodule cross_brace(length) {\n    // Slightly curved support beam\n    difference() {\n        hull() {\n            translate([-length/2, 0, 0])\n                cylinder(h=20, r=5, center=true);\n            translate([length/2, 0, 0])\n                cylinder(h=20, r=5, center=true);\n        }\n        // Carving details\n        for(x = [-length/2+10:20:length/2-10]) {\n            translate([x, 0, 5])\n                cube([8, 8, 12], center=true);\n        }\n    }\n}\n\nmodule carved_seat(width, depth) {\n    // Saddle-shaped seat with carved deer track pattern\n    difference() {\n        // Seat base\n        hull() {\n            translate([-width/2, -depth/2, 0])\n                sphere(r=5);\n            translate([width/2, -depth/2, 0])\n                sphere(r=5);\n            translate([-width/2, depth/2, 0])\n                sphere(r=5);\n            translate([width/2, depth/2, 0])\n                sphere(r=5);\n            translate([0, 0, 5])\n                sphere(r=5);\n        }\n        \n        // Carved deer tracks\n        for(x = [-width/2+20:30:width/2-20]) {\n            for(y = [-depth/2+20:30:depth/2-20]) {\n                translate([x, y, -1])\n                    scale([1, 1.2, 0.5])\n                    cylinder(h=3, r=4);\n                translate([x+3, y+2, -1])\n                    cylinder(h=3, r=2);\n                translate([x-3, y+2, -1])\n                    cylinder(h=3, r=2);\n            }\n        }\n    }\n}\n\nmodule footrest() {\n    // Lower ring for foot support\n    difference() {\n        cylinder(h=15, r=100, center=true);\n        cylinder(h=16, r=90, center=true);\n    }\n    // Reinforcement ribs\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([95, 0, 0])\n                cube([10, 5, 15], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, 100])\n        carved_seat(280, 280);\n    \n    // Legs\n    for(angle = [45:90:315]) {\n        rotate([0, 0, angle])\n            translate([100, 0, 50])\n                leg_support(8, 100);\n    }\n    \n    // Cross braces\n    rotate([0, 0, 45])\n        translate([0, 0, 60])\n            cross_brace(140);\n    rotate([0, 0, -45])\n        translate([0, 0, 60])\n            cross_brace(140);\n    \n    // Footrest\n    translate([0, 0, 30])\n        footrest();\n    \n    // Carved backrest supports\n    translate([-120, 0, 120])\n        rotate([15, 0, 0])\n            difference() {\n                cylinder(h=80, r=6);\n                for(i = [0:20:60]) {\n                    translate([0, 0, i])\n                        rotate([0, 0, 45])\n                            cube([12, 2, 15], center=true);\n                }\n            }\n    translate([120, 0, 120])\n        rotate([15, 0, 0])\n            difference() {\n                cylinder(h=80, r=6);\n                for(i = [0:20:60]) {\n                    translate([0, 0, i])\n                        rotate([0, 0, -45])\n                            cube([12, 2, 15], center=true);\n                }\n            }\n}",
    "renders": true
  },
  {
    "natural_object": "assassin",
    "openscad_code": "// Assassin Furniture - Hidden Blade Coffee Table\n// A low coffee table with integrated hidden blade mechanism\n// Overall dimensions: 120mm x 120mm x 45mm\n\n$fn = 32;\n\n// Main parameters\ntable_length = 120;\ntable_width = 120;\ntable_height = 45;\nwall_thickness = 2;\nblade_length = 80;\nblade_width = 20;\nblade_thickness = 1.5;\n\n// Main table top - disguised as modern furniture\nmodule table_top() {\n    difference() {\n        // Main top surface with beveled edges\n        translate([0, 0, table_height - 5])\n        cube([table_length, table_width, 5], center=true);\n        \n        // Hidden blade slot - concealed seam\n        translate([0, 0, table_height - 2.5])\n        cube([blade_width + 4, blade_length, 6], center=true);\n    }\n}\n\n// Hidden blade mechanism\nmodule hidden_blade() {\n    // Blade assembly\n    translate([0, -table_length/2 + 10, table_height - 3])\n    rotate([0, 0, 0])\n    difference() {\n        // Main blade body\n        cube([blade_width, blade_length, blade_thickness], center=true);\n        \n        // Blade edge detail\n        translate([0, blade_length/2 - 5, 0])\n        cube([blade_width - 2, 10, blade_thickness + 0.5], center=true);\n    }\n    \n    // Blade deployment rails\n    for(i = [-1, 1]) {\n        translate([i * (blade_width/2 + 1), -table_length/2 + 40, table_height - 4])\n        cylinder(h=3, r=1, center=true);\n    }\n}\n\n// Table legs with hidden compartments\nmodule table_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, table_height/2 - 2.5])\n    difference() {\n        // Main leg structure\n        cube([8, 8, table_height - 5], center=true);\n        \n        // Hidden compartment inside leg\n        translate([0, 0, -5])\n        cube([5, 5, table_height - 15], center=true);\n    }\n}\n\n// Support frame connecting legs\nmodule support_frame() {\n    // Long supports\n    for(y = [-table_width/2 + 6, table_width/2 - 6]) {\n        translate([0, y, table_height/2 - 2.5])\n        cube([table_length - 16, 4, 4], center=true);\n    }\n    \n    // Short supports\n    for(x = [-table_length/2 + 6, table_length/2 - 6]) {\n        translate([x, 0, table_height/2 - 2.5])\n        cube([4, table_width - 16, 4], center=true);\n    }\n}\n\n// Decorative assassin emblem on table surface\nmodule assassin_emblem() {\n    translate([0, 0, table_height - 2.6])\n    difference() {\n        // Outer ring\n        cylinder(h=0.5, r=15, center=true);\n        \n        // Inner cutouts forming assassin symbol\n        for(angle = [0, 120, 240]) {\n            rotate([0, 0, angle])\n            translate([5, 0, -0.1])\n            cube([10, 3, 0.7], center=true);\n        }\n        \n        // Center hole\n        cylinder(h=0.7, r=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main table components\n    table_top();\n    \n    // Four legs at corners\n    table_leg(-table_length/2 + 4, -table_width/2 + 4);\n    table_leg(table_length/2 - 4, -table_width/2 + 4);\n    table_leg(-table_length/2 + 4, table_width/2 - 4);\n    table_leg(table_length/2 - 4, table_width/2 - 4);\n    \n    // Structural frame\n    support_frame();\n    \n    // Hidden blade (shown in retracted position)\n    hidden_blade();\n    \n    // Decorative elements\n    assassin_emblem();\n}",
    "renders": true
  },
  {
    "natural_object": "rogue",
    "openscad_code": "// Rogue Coffee Table with Hidden Compartment\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Overall dimensions\ntable_width = 120;\ntable_depth = 70;\ntable_height = 45;\nleg_thickness = 4;\nwall_thickness = 2;\n\n// Main tabletop with hidden compartment\nmodule tabletop() {\n    difference() {\n        // Main tabletop\n        translate([0, 0, table_height - 4]) \n            cube([table_width, table_depth, 4], center = true);\n        \n        // Hidden compartment cavity\n        translate([0, 0, table_height - 5]) \n            cube([table_width - 20, table_depth - 20, 3], center = true);\n    }\n    \n    // Compartment lid (disguised as grain pattern)\n    translate([0, 0, table_height - 2]) \n        cube([table_width - 20, table_depth - 20, 0.5], center = true);\n}\n\n// Rogue-style legs (angled for stealth)\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0]) {\n        rotate([0, 0, angle]) {\n            // Main leg structure\n            difference() {\n                // Outer leg\n                cube([leg_thickness, leg_thickness, table_height], center = true);\n                \n                // Inner reinforcement cavity\n                translate([0, 0, 5]) \n                    cube([leg_thickness - 1, leg_thickness - 1, table_height - 10], center = true);\n            }\n            \n            // Hidden blade compartment in leg\n            translate([0, 0, table_height/2]) {\n                rotate([0, 90, 0]) \n                    cylinder(h = leg_thickness*2, r = 1.5, center = true);\n            }\n        }\n    }\n}\n\n// Reinforcement frame with hidden features\nmodule frame() {\n    // Front and back support beams\n    for(y = [-table_depth/2 + 5, table_depth/2 - 5]) {\n        translate([0, y, table_height/2]) {\n            difference() {\n                cube([table_width - 10, wall_thickness, leg_thickness], center = true);\n                \n                // Hidden tool slots\n                for(x = [-40, -20, 0, 20, 40]) {\n                    translate([x, 0, 0]) \n                        cube([3, wall_thickness + 1, leg_thickness + 1], center = true);\n                }\n            }\n        }\n    }\n    \n    // Side support beams\n    for(x = [-table_width/2 + 5, table_width/2 - 5]) {\n        translate([x, 0, table_height/2]) {\n            difference() {\n                cube([wall_thickness, table_depth - 10, leg_thickness], center = true);\n                \n                // Hidden compartments\n                for(y = [-25, -10, 10, 25]) {\n                    translate([0, y, 0]) \n                        cube([wall_thickness + 1, 4, leg_thickness + 1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Decorative rogue elements - throwing stars pattern\nmodule rogue_decoration() {\n    // Hidden throwing star pattern on underside\n    translate([0, 0, table_height - 3.5]) {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([table_width/2 - 15, 0, 0]) {\n                    difference() {\n                        cube([8, 1.5, 0.5], center = true);\n                        cube([1.5, 8, 0.5], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    tabletop();\n    \n    // Legs (slightly angled for rogue aesthetic)\n    leg(-table_width/2 + 10, -table_depth/2 + 10, 5);\n    leg(table_width/2 - 10, -table_depth/2 + 10, -5);\n    leg(-table_width/2 + 10, table_depth/2 - 10, -5);\n    leg(table_width/2 - 10, table_depth/2 - 10, 5);\n    \n    // Reinforcement frame\n    frame();\n    \n    // Rogue decorations\n    rogue_decoration();\n}",
    "renders": true
  },
  {
    "natural_object": "thief",
    "openscad_code": "// Thief Nightstand – medium-complexity realistic style\n// Overall footprint 60 x 40 mm, height 120 mm\n// 2 mm wall thickness for 3D-printability, no large overhangs\n\n$fn = 32;\n\n// Main dimensions\nwidth = 60;\ndepth = 40;\nheight = 120;\nwall = 2;\n\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center = true);\n        // Hollow cavity\n        translate([0, 0, wall/2])\n            cube([width-2*wall, depth-2*wall, height-wall], center = true);\n    }\n}\n\n// Top panel with overhang\nmodule top() {\n    translate([0, 0, height/2])\n        cube([width+6, depth+6, wall], center = true);\n}\n\n// Single drawer – reusable\nmodule drawer(height, front) {\n    difference() {\n        // Drawer box\n        cube([width-2*wall-4, depth-2*wall-4, height-wall], center = true);\n        // Hollow\n        translate([0, 0, wall/2])\n            cube([width-2*wall-8, depth-2*wall-8, height-wall], center = true);\n    }\n    \n    // Front panel\n    translate([0, 0, height/2-wall/2])\n        cube([width-2*wall, depth-2*wall, front], center = true);\n    \n    // Handle (simple bar)\n    translate([0, depth/2-wall-3, height/2-wall/2])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 6);\n}\n\n// Legs (simple cylinders)\nmodule leg() {\n    cylinder(h = 100, d = 8);\n}\n\n// Assembly\nunion() {\n    body();\n    top();\n    \n    // Drawers – two stacked\n    translate([0, 0,  height/2 - 30 - wall/2])\n        drawer(30, wall);\n    translate([0, 0,  height/2 - 70 - wall/2])\n        drawer(30, wall);\n    \n    // Four legs\n    for (x = [-width/2+4, width/2-4])\n        for (y = [-depth/2+4, depth/2-4])\n            translate([x, y, -height/2-50])\n                leg();\n}",
    "renders": true
  },
  {
    "natural_object": "bandit",
    "openscad_code": "// Bandit Chair - Realistic Style, Medium Complexity\n// A cactus-shaped chair with bandana and eye mask details\n\n// Overall dimensions (mm)\nchair_height = 120;\nseat_height = 45;\nbase_diameter = 50;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule bandit_chair() {\n    // Main cactus body (seat support)\n    union() {\n        // Central trunk\n        cylinder(h=chair_height, d1=base_diameter, d2=base_diameter*0.8, $fn=32);\n        \n        // Seat surface\n        translate([0, 0, seat_height])\n            cylinder(h=wall_thickness*2, d=base_diameter*1.3, $fn=32);\n        \n        // Arms (cactus paddles)\n        translate([base_diameter*0.5, 0, seat_height+20])\n            rotate([0, 30, 0])\n            cylinder(h=40, d1=20, d2=15, $fn=16);\n            \n        translate([-base_diameter*0.5, 0, seat_height+20])\n            rotate([0, -30, 0])\n            cylinder(h=40, d1=20, d2=15, $fn=16);\n            \n        // Back support\n        translate([0, -base_diameter*0.4, seat_height+30])\n            rotate([10, 0, 0])\n            cylinder(h=50, d1=base_diameter*0.9, d2=base_diameter*0.7, $fn=32);\n    }\n    \n    // Bandit details\n    // Bandana\n    translate([0, 0, seat_height+55])\n        rotate([10, 0, 0])\n        difference() {\n            cylinder(h=wall_thickness*2, d=base_diameter*0.85, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=wall_thickness*2+2, d=base_diameter*0.85-wall_thickness*2, $fn=32);\n        }\n    \n    // Eye mask\n    translate([0, -base_diameter*0.2, seat_height+52])\n        difference() {\n            cube([base_diameter*0.6, wall_thickness*3, 8], center=true);\n            // Eye holes\n            translate([-base_diameter*0.15, 0, 0])\n                cylinder(h=wall_thickness*3+2, d=6, $fn=16);\n            translate([base_diameter*0.15, 0, 0])\n                cylinder(h=wall_thickness*3+2, d=6, $fn=16);\n        }\n    \n    // Spikes (decorative elements)\n    for(i = [0:15]) {\n        rotate([0, 0, i*22.5])\n            translate([base_diameter*0.4, 0, i*7+10])\n                sphere(d=3);\n    }\n    \n    // Base reinforcement\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=wall_thickness*3, d=base_diameter*1.2, $fn=32);\n            cylinder(h=wall_thickness*3+1, d=base_diameter*1.2-wall_thickness*4, $fn=32);\n        }\n}\n\n// Generate the chair\nbandit_chair();",
    "renders": true
  },
  {
    "natural_object": "outlaw",
    "openscad_code": "// Outlaw Chair - A rugged outlaw-style wooden chair\n// Dimensions: ~100mm tall for 3D printing\n// Features: Rough-hewn wood planks, nail heads, weathered appearance\n\n$fn = 32;\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 70;\nchair_height = 100;\nseat_height = 45;\nback_height = chair_height - seat_height;\n\n// Wood thickness\nplank_thickness = 6;\nleg_thickness = 8;\n\n// Nail parameters\nnail_radius = 2;\nnail_height = 1.5;\n\n// Create rough wood texture using small cubes\nmodule rough_wood(width, height, depth, roughness = 1) {\n    difference() {\n        cube([width, height, depth]);\n        // Add random depressions for weathered look\n        for (i = [0:5:width-roughness]) {\n            for (j = [0:5:height-roughness]) {\n                translate([i + roughness, j + roughness, 0])\n                    cube([roughness, roughness, depth + 0.1]);\n            }\n        }\n    }\n}\n\n// Nail head module\nmodule nail_head() {\n    cylinder(h = nail_height, r = nail_radius);\n}\n\n// Chair leg with angled supports\nmodule chair_leg() {\n    union() {\n        // Main leg post\n        rough_wood(leg_thickness, chair_height, leg_thickness);\n        \n        // Diagonal support brace\n        translate([0, 0, chair_height/2])\n            rotate([0, 45, 0])\n            rough_wood(leg_thickness, leg_thickness*1.5, leg_thickness);\n    }\n}\n\n// Seat plank with nail details\nmodule seat_plank() {\n    difference() {\n        // Main seat\n        rough_wood(chair_width, plank_thickness, chair_depth);\n        \n        // Contoured seat surface (slight dip)\n        translate([chair_width/4, chair_depth/4, plank_thickness-2])\n            cube([chair_width/2, chair_depth/2, 3]);\n    }\n    \n    // Nail heads along edges\n    for (x = [10:chair_width-10:20]) {\n        for (y = [5:chair_depth-10:10]) {\n            translate([x, y, plank_thickness])\n                nail_head();\n        }\n    }\n}\n\n// Chair back with horizontal slats\nmodule chair_back() {\n    // Back posts\n    translate([5, 0, 0])\n        rough_wood(leg_thickness, back_height, leg_thickness);\n    translate([chair_width-leg_thickness-5, 0, 0])\n        rough_wood(leg_thickness, back_height, leg_thickness);\n    \n    // Horizontal back slats\n    for (i = [1:3]) {\n        translate([leg_thickness+5, 0, i*(back_height/4)])\n            rough_wood(chair_width-leg_thickness*2-10, plank_thickness, leg_thickness);\n    }\n    \n    // Top rail\n    translate([0, 0, back_height-plank_thickness])\n        rough_wood(chair_width, plank_thickness, leg_thickness);\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, seat_height-plank_thickness])\n        seat_plank();\n    \n    // Front legs\n    translate([5, 5, 0])\n        chair_leg();\n    translate([chair_width-leg_thickness-5, 5, 0])\n        chair_leg();\n    \n    // Back legs\n    translate([5, chair_depth-leg_thickness-5, 0])\n        chair_leg();\n    translate([chair_width-leg_thickness-5, chair_depth-leg_thickness-5, 0])\n        chair_leg();\n    \n    // Chair back\n    translate([0, chair_depth-leg_thickness, seat_height-plank_thickness])\n        chair_back();\n    \n    // Side stretchers\n    translate([leg_thickness/2, leg_thickness/2, seat_height/2])\n        rough_wood(chair_width-leg_thickness, leg_thickness, leg_thickness);\n    translate([leg_thickness/2, chair_depth-leg_thickness*1.5, seat_height/2])\n        rough_wood(chair_width-leg_thickness, leg_thickness, leg_thickness);\n}",
    "renders": true
  },
  {
    "natural_object": "rebel",
    "openscad_code": "// Rebel lounge chair - realistic style, medium complexity\n// Overall dimensions: 110mm W x 100mm D x 85mm H\n\n$fn = 32;\n\n// Main structure\nmodule chair_frame() {\n    // Seat frame\n    translate([0, 0, 25])\n        cube([80, 70, 4], center = true);\n    \n    // Backrest frame\n    translate([0, -30, 50])\n        cube([76, 4, 50], center = true);\n    \n    // Left leg\n    translate([-35, 25, 12.5])\n        cube([4, 40, 25], center = true);\n    \n    // Right leg\n    translate([35, 25, 12.5])\n        cube([4, 40, 25], center = true);\n    \n    // Back support legs\n    translate([-35, -35, 12.5])\n        cube([4, 4, 25], center = true);\n    translate([35, -35, 12.5])\n        cube([4, 4, 25], center = true);\n}\n\n// Seat slats\nmodule seat_slats() {\n    for (i = [-30:10:30]) {\n        translate([i, 0, 27])\n            cube([8, 66, 2], center = true);\n    }\n}\n\n// Backrest slats\nmodule backrest_slats() {\n    for (i = [-30:10:30]) {\n        translate([i, -30, 50])\n            cube([8, 2, 46], center = true);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-42, 0, 45])\n        cube([4, 50, 4], center = true);\n    \n    // Right armrest\n    translate([42, 0, 45])\n        cube([4, 50, 4], center = true);\n    \n    // Armrest supports\n    translate([-42, 20, 25])\n        cube([4, 4, 40], center = true);\n    translate([42, 20, 25])\n        cube([4, 4, 40], center = true);\n}\n\n// Rebel details - X-wing inspired elements\nmodule rebel_details() {\n    // Wing supports on back\n    difference() {\n        translate([0, -35, 75])\n            cube([90, 2, 10], center = true);\n        for (i = [-35:10:35]) {\n            translate([i, -35, 75])\n                cylinder(h = 3, r = 3, center = true);\n        }\n    }\n    \n    // Engine details on legs\n    for (x = [-35, 35]) {\n        for (y = [25, -35]) {\n            translate([x, y, 0])\n                cylinder(h = 5, r1 = 6, r2 = 4);\n        }\n    }\n}\n\n// Smooth rounded edges\nmodule rounded_edges() {\n    // Seat edge rounding\n    translate([0, 0, 27])\n        difference() {\n            cube([82, 72, 2], center = true);\n            translate([0, 0, 1])\n                cube([78, 68, 2], center = true);\n        }\n}\n\n// Main assembly\nunion() {\n    chair_frame();\n    seat_slats();\n    backrest_slats();\n    armrests();\n    rebel_details();\n    rounded_edges();\n}",
    "renders": true
  },
  {
    "natural_object": "paladin",
    "openscad_code": "// Paladin Knight Chair (realistic style, medium complexity)\n// A sturdy medieval-inspired chair with paladin motifs\n\n$fn = 32;\n\n// Overall dimensions (mm)\nchair_width = 80;\nchair_depth = 75;\nchair_height = 100;\nleg_thickness = 8;\nback_height = 60;\n\nmodule leg(x, y) {\n    // Tapered square leg with crusader cross detail\n    translate([x, y, 0]) {\n        difference() {\n            // Main leg body\n            cube([leg_thickness, leg_thickness, chair_height - 10], center = true);\n            // Tapering cuts\n            translate([0, 0, 20]) \n                cube([leg_thickness - 2, leg_thickness - 2, chair_height - 50], center = true);\n            // Cross detail on front legs\n            if (y < 0) {\n                translate([0, leg_thickness/2 + 0.1, chair_height/2 - 20])\n                    cube([4, 2, 20], center = true);\n                translate([0, leg_thickness/2 + 0.1, chair_height/2 - 30])\n                    cube([20, 2, 4], center = true);\n            }\n        }\n    }\n}\n\nmodule seat() {\n    // Padded seat with nailhead trim\n    translate([0, 0, chair_height - 10]) {\n        difference() {\n            // Main seat cushion\n            cube([chair_width - 10, chair_depth - 10, 8], center = true);\n            // Slight cushion depression\n            translate([0, 0, -1])\n                cube([chair_width - 15, chair_depth - 15, 10], center = true);\n        }\n        \n        // Nailhead trim every 5mm\n        for (i = [-35:5:35]) {\n            translate([i, (chair_depth - 10)/2, 4])\n                sphere(d = 2);\n            translate([i, -(chair_depth - 10)/2, 4])\n                sphere(d = 2);\n        }\n    }\n}\n\nmodule backrest() {\n    // Ornate back with paladin shield motif\n    translate([0, -chair_depth/2 + 5, chair_height + back_height/2 - 5]) {\n        // Main back panel\n        cube([chair_width - 15, 5, back_height], center = true);\n        \n        // Shield detail\n        translate([0, 3, 10]) {\n            difference() {\n                // Shield shape\n                scale([1, 1.2, 1])\n                    cylinder(h = 5, r1 = 25, r2 = 20);\n                // Shield boss\n                translate([0, 0, -1])\n                    cylinder(h = 7, r = 8);\n            }\n        }\n        \n        // Vertical slats\n        for (x = [-25:12.5:25]) {\n            translate([x, 3, 0])\n                cube([3, 6, back_height - 10], center = true);\n        }\n    }\n}\n\nmodule stretchers() {\n    // Side and front stretchers for stability\n    // Front stretcher\n    translate([0, chair_depth/2 - leg_thickness/2 - 5, chair_height/2])\n        cube([chair_width - 2*leg_thickness - 5, leg_thickness, leg_thickness], center = true);\n    \n    // Side stretchers\n    translate([chair_width/2 - leg_thickness/2 - 5, 0, chair_height/2])\n        rotate([0, 0, 90])\n            cube([chair_depth - 2*leg_thickness - 5, leg_thickness, leg_thickness], center = true);\n    translate([-chair_width/2 + leg_thickness/2 + 5, 0, chair_height/2])\n        rotate([0, 0, 90])\n            cube([chair_depth - 2*leg_thickness - 5, leg_thickness, leg_thickness], center = true);\n}\n\n// Assemble the chair\nunion() {\n    // Four legs\n    leg(chair_width/2 - leg_thickness/2, chair_depth/2 - leg_thickness/2);\n    leg(-chair_width/2 + leg_thickness/2, chair_depth/2 - leg_thickness/2);\n    leg(chair_width/2 - leg_thickness/2, -chair_depth/2 + leg_thickness/2);\n    leg(-chair_width/2 + leg_thickness/2, -chair_depth/2 + leg_thickness/2);\n    \n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Stretchers\n    stretchers();\n}",
    "renders": true
  },
  {
    "natural_object": "cleric",
    "openscad_code": "// Cleric's Prayer Kneeler - Realistic Style, Medium Complexity\n// Dimensions: 120mm(H) x 80mm(W) x 55mm(D)\n\n$fn = 32;  // Smooth curves\n\nmodule kneeler_base() {\n    // Main base platform with rounded edges\n    translate([0, 0, 2]) {\n        difference() {\n            minkowski() {\n                cube([75, 50, 8], center=true);\n                cylinder(h=0.1, r=3);\n            }\n            // Hollow center for material saving\n            translate([0, 0, -1]) cube([65, 40, 10], center=true);\n        }\n    }\n}\n\nmodule support_leg(x_pos, y_pos, angle) {\n    // Decorative support legs with Gothic arch design\n    translate([x_pos, y_pos, 6]) {\n        rotate([0, angle, 0]) {\n            difference() {\n                union() {\n                    // Main leg post\n                    cube([4, 4, 45]);\n                    // Gothic arch detail\n                    translate([0, -2, 42]) rotate([0, 90, 0]) \n                        cylinder(h=4, r1=3, r2=1);\n                }\n                // Hollow core\n                translate([1, 1, 2]) cube([2, 2, 40]);\n            }\n        }\n    }\n}\n\nmodule prayer_shelf() {\n    // Slanted prayer shelf with book rest lip\n    translate([0, 0, 52]) {\n        rotate([15, 0, 0]) {\n            difference() {\n                // Main shelf\n                cube([70, 45, 3], center=true);\n                // Book depression\n                translate([0, 0, -1]) cube([65, 40, 2], center=true);\n            }\n            // Front lip to prevent sliding\n            translate([0, 22, -1.5]) cube([68, 3, 3], center=true);\n        }\n    }\n}\n\nmodule kneeling_pad() {\n    // Cushioned kneeling pad with tufted design\n    translate([0, -15, 12]) {\n        difference() {\n            // Main cushion\n            minkowski() {\n                cube([60, 25, 8], center=true);\n                sphere(r=1);\n            }\n            // Tufted buttons pattern\n            for(x = [-20, 0, 20]) {\n                for(y = [-7, 7]) {\n                    translate([x, y, 4]) \n                        sphere(r=2);\n                }\n            }\n        }\n    }\n}\n\nmodule cross_emblem() {\n    // Celtic cross detail for back support\n    translate([0, -25, 42]) {\n        rotate([0, 15, 0]) {\n            union() {\n                // Vertical beam\n                cube([3, 3, 25]);\n                // Horizontal beam\n                translate([0, -1.5, 12]) cube([20, 3, 3]);\n                // Circle detail\n                translate([0, 0, 12]) rotate([90, 0, 0]) \n                    cylinder(h=3, r=8, center=true);\n            }\n        }\n    }\n}\n\nmodule storage_drawer() {\n    // Small drawer for prayer items\n    translate([0, 20, 6]) {\n        difference() {\n            // Drawer housing\n            cube([35, 12, 8], center=true);\n            // Drawer cavity\n            translate([0, 0, -1]) cube([30, 10, 6], center=true);\n        }\n        // Drawer front\n        translate([0, 20, 0]) {\n            cube([32, 2, 6], center=true);\n            // Handle\n            translate([0, 1, 0]) cylinder(h=2, r=2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    kneeler_base();\n    \n    // Support legs at corners\n    support_leg(-30, -20, 0);\n    support_leg(30, -20, 0);\n    support_leg(-30, 20, 0);\n    support_leg(30, 20, 0);\n    \n    prayer_shelf();\n    kneeling_pad();\n    cross_emblem();\n    storage_drawer();\n}",
    "renders": true
  },
  {
    "natural_object": "bard",
    "openscad_code": "// Bard Chair - Realistic Style, Medium Complexity\n// A wooden bard chair with backrest, armrests, and turned legs\n\n// Global parameters\nchair_width = 45;\nchair_depth = 40;\nseat_height = 45;\nback_height = 85;\nleg_diameter = 4;\nmaterial_thickness = 2;\n\n// Wooden texture function\nmodule wood_texture(size) {\n    for(i = [0:5:size]) {\n        translate([0, i, 0]) \n            cube([size, 0.5, 0.1], center=true);\n    }\n}\n\n// Turned leg module with decorative rings\nmodule turned_leg(height, diameter) {\n    difference() {\n        union() {\n            // Main leg cylinder\n            cylinder(h=height, d=diameter, $fn=32);\n            \n            // Decorative rings\n            for(i = [0.2, 0.4, 0.6, 0.8]) {\n                translate([0, 0, height * i])\n                    cylinder(h=2, d=diameter * 1.15, $fn=32);\n            }\n        }\n        \n        // Hollow center for 3D printing\n        translate([0, 0, -1])\n            cylinder(h=height + 2, d=diameter - material_thickness, $fn=32);\n    }\n}\n\n// Seat slats\nmodule seat_slats(width, depth) {\n    for(i = [0:5:depth-5]) {\n        translate([-width/2 + material_thickness, -depth/2 + i + 2.5, 0])\n            cube([width - material_thickness*2, 5, material_thickness]);\n    }\n}\n\n// Backrest slats with curved top\nmodule backrest_slats(width, height) {\n    for(i = [0:8:width-material_thickness*2-8]) {\n        translate([-width/2 + material_thickness + 4 + i, 0, 0]) {\n            hull() {\n                translate([0, -2, 0])\n                    cube([4, 4, height * 0.7]);\n                translate([0, -2, height * 0.7])\n                    cube([4, 4, height * 0.3]);\n            }\n        }\n    }\n}\n\n// Armrest support\nmodule armrest_support() {\n    difference() {\n        union() {\n            // Vertical post\n            translate([0, 0, 0])\n                cube([4, 4, 25]);\n            \n            // Curved brace\n            translate([2, 2, 12.5])\n                rotate([0, 45, 0])\n                    cylinder(h=8, d=3, $fn=16);\n        }\n        \n        // Screw hole\n        translate([2, 2, 12.5])\n            rotate([0, 90, 0])\n                cylinder(h=10, d=2, $fn=16);\n    }\n}\n\n// Main chair assembly\nmodule bard_chair() {\n    // Seat frame\n    translate([0, 0, seat_height]) {\n        difference() {\n            // Outer frame\n            cube([chair_width, chair_depth, material_thickness*2]);\n            \n            // Inner cutout\n            translate([material_thickness, material_thickness, -1])\n                cube([chair_width - material_thickness*2, chair_depth - material_thickness*2, material_thickness*2 + 2]);\n        }\n        \n        // Seat slats\n        translate([0, 0, material_thickness/2])\n            seat_slats(chair_width - material_thickness*2, chair_depth - material_thickness*2);\n    }\n    \n    // Backrest\n    translate([0, chair_depth/2 - material_thickness, seat_height + back_height/2]) {\n        difference() {\n            // Backrest frame\n            cube([chair_width, material_thickness*2, back_height]);\n            \n            // Inner cutout\n            translate([material_thickness, -1, material_thickness])\n                cube([chair_width - material_thickness*2, material_thickness*2 + 2, back_height - material_thickness*2]);\n        }\n        \n        // Backrest slats\n        translate([0, material_thickness, -back_height/2 + material_thickness])\n            backrest_slats(chair_width - material_thickness*2, back_height - material_thickness*2);\n    }\n    \n    // Legs\n    positions = [\n        [-chair_width/2 + leg_diameter/2, -chair_depth/2 + leg_diameter/2],\n        [chair_width/2 - leg_diameter/2, -chair_depth/2 + leg_diameter/2],\n        [-chair_width/2 + leg_diameter/2, chair_depth/2 - leg_diameter/2],\n        [chair_width/2 - leg_diameter/2, chair_depth/2 - leg_diameter/2]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 0])\n            turned_leg(seat_height - material_thickness, leg_diameter);\n    }\n    \n    // Armrests\n    armrest_length = 30;\n    armrest_height = 10;\n    \n    // Left armrest\n    translate([-chair_width/2 - 2, -chair_depth/4, seat_height + armrest_height/2]) {\n        difference() {\n            // Armrest top\n            cube([4, armrest_length, armrest_height]);\n            \n            // Contoured top\n            translate([-1, 0, armrest_height])\n                cube([6, armrest_length, 2]);\n        }\n        \n        // Support\n        translate([2, 2, -armrest_height/2])\n            armrest_support();\n    }\n    \n    // Right armrest\n    translate([chair_width/2 + 2, -chair_depth/4, seat_height + armrest_height/2]) {\n        mirror([1, 0, 0])\n            difference() {\n                cube([4, armrest_length, armrest_height]);\n                translate([-1, 0, armrest_height])\n                    cube([6, armrest_length, 2]);\n            }\n        \n        translate([2, 2, -armrest_height/2])\n            armrest_support();\n    }\n    \n    // Lower support stretchers\n    stretcher_height = seat_height * 0.4;\n    \n    // Front stretcher\n    translate([0, -chair_depth/2 + leg_diameter/2, stretcher_height])\n        cube([chair_width - leg_diameter, leg_diameter/1.5, leg_diameter/1.5]);\n    \n    // Side stretchers\n    translate([-chair_width/2 + leg_diameter/2, 0, stretcher_height])\n        rotate([0, 0, 90])\n            cube([chair_depth - leg_diameter, leg_diameter/1.5, leg_diameter/1.5]);\n    \n    translate([chair_width/2 - leg_diameter/2, 0, stretcher_height])\n        rotate([0, 0, 90])\n            cube([chair_depth - leg_diameter, leg_diameter/1.5, leg_diameter/1.5]);\n}\n\n// Render the chair\nbard_chair();",
    "renders": true
  },
  {
    "natural_object": "druid",
    "openscad_code": "// Druidic Mushroom Stool (realistic style, medium complexity)\n// Dimensions: 100mm diameter cap, 80mm height\n\n// Parameters\n$fn = 32;  // Smooth curves\ncap_thickness = 2;\nstem_radius = 20;\nstem_height = 60;\ncap_radius = 50;\ngill_depth = 3;\nroot_count = 6;\n\n// Main stool module\nmodule mushroom_stool() {\n    // Mushroom cap with curved top\n    union() {\n        // Main cap dome\n        difference() {\n            // Outer dome\n            scale([1, 1, 0.6])\n            sphere(r = cap_radius);\n            \n            // Hollow interior\n            translate([0, 0, -cap_thickness])\n            scale([1, 1, 0.5])\n            sphere(r = cap_radius - cap_thickness);\n        }\n        \n        // Flatten bottom of cap\n        translate([0, 0, -cap_thickness])\n        cylinder(h = cap_thickness * 2, r = cap_radius);\n    }\n    \n    // Stem\n    translate([0, 0, -stem_height - cap_thickness])\n    difference() {\n        // Main stem cylinder\n        cylinder(h = stem_height, r = stem_radius);\n        \n        // Hollow core\n        translate([0, 0, cap_thickness])\n        cylinder(h = stem_height - cap_thickness, r = stem_radius - cap_thickness);\n    }\n    \n    // Gills underneath cap\n    for(i = [0:30]) {\n        rotate([0, 0, i * 12])\n        translate([0, 0, -cap_thickness - 1])\n        linear_extrude(height = gill_depth)\n        polygon(points = [\n            [0, 0],\n            [stem_radius + 5, 0],\n            [stem_radius + 5, 1],\n            [0, 1]\n        ]);\n    }\n    \n    // Root base for stability\n    translate([0, 0, -stem_height - cap_thickness])\n    for(i = [0:root_count-1]) {\n        rotate([0, 0, i * 360/root_count])\n        translate([stem_radius * 0.7, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        cylinder(h = 15, r1 = 8, r2 = 4);\n    }\n    \n    // Natural texture rings on stem\n    for(z = [5:10:stem_height-5]) {\n        translate([0, 0, -z - cap_thickness])\n        difference() {\n            cylinder(h = 2, r = stem_radius);\n            cylinder(h = 2.1, r = stem_radius - cap_thickness);\n        }\n    }\n    \n    // Bark texture on stem\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([stem_radius - 1, 0, -cap_thickness - stem_height/2])\n        scale([1, 0.1, 1])\n        sphere(r = 3);\n    }\n}\n\n// Mushroom spots on cap\nmodule cap_spots() {\n    difference() {\n        union() {\n            // Main cap\n            mushroom_stool();\n            \n            // Spot bases\n            for(i = [0:8]) {\n                theta = i * 137.5;  // Golden angle\n                r = cap_radius * 0.3 + (i * 3);\n                x = r * cos(theta);\n                y = r * sin(theta);\n                translate([x, y, cap_radius * 0.6 - 5])\n                sphere(r = 6);\n            }\n        }\n        \n        // Cut spots flush with cap\n        translate([0, 0, cap_radius * 0.6 - 2])\n        cube([cap_radius * 3, cap_radius * 3, 10], center = true);\n    }\n}\n\n// Render the stool\ncap_spots();",
    "renders": true
  },
  {
    "natural_object": "barbarian",
    "openscad_code": "$fn=50;\n\n// Overall dimensions\nchair_w = 45;   // Seat width\nchair_d = 45;   // Seat depth\nchair_h = 80;   // Total height\nleg_h = 40;     // Leg height\nback_h = chair_h - leg_h;\n\n// Wall thickness\nwall = 2;\n\nmodule barbarian_chair() {\n    // --- Seat base -------------------------------------------------\n    // Thick wooden plank with battle-axe notches\n    difference() {\n        translate([0, 0, leg_h])\n            cube([chair_w, chair_d, wall*3], center=true);\n        \n        // Four battle-axe notches on front edge\n        for (i = [-1, 1]) {\n            translate([i*chair_w/4, chair_d/2 - wall, leg_h])\n                rotate([90, 0, 0])\n                    cylinder(h=wall*3, r1=3, r2=6);\n        }\n    }\n\n    // --- Legs ------------------------------------------------------\n    // Chunky cylindrical legs wrapped in leather straps\n    module leg(x,y) {\n        translate([x, y, leg_h/2])\n            difference() {\n                cylinder(h=leg_h, r=wall*2.5);\n                // Carved rune groove\n                translate([0, 0, leg_h/2 - wall])\n                    cube([wall*4, wall, wall*1.5], center=true);\n            }\n        // Leather straps\n        for (z = [leg_h/4, leg_h*3/4]) {\n            translate([x, y, z])\n                rotate_extrude()\n                    translate([wall*2.5 - wall/2, 0, 0])\n                        square([wall, wall*1.2]);\n        }\n    }\n    leg( chair_w/2 - wall*2,  chair_d/2 - wall*2);\n    leg(-chair_w/2 + wall*2,  chair_d/2 - wall*2);\n    leg( chair_w/2 - wall*2, -chair_d/2 + wall*2);\n    leg(-chair_w/2 + wall*2, -chair_d/2 + wall*2);\n\n    // --- Backrest --------------------------------------------------\n    // Shield-shaped back with rivets\n    difference() {\n        // Main back plate\n        translate([0, -chair_d/2 + wall, leg_h + back_h/2])\n            cube([chair_w - wall*4, wall*3, back_h], center=true);\n        \n        // Shield boss (negative)\n        translate([0, -chair_d/2 + wall*2, leg_h + back_h/2])\n            sphere(r=wall*3);\n    }\n\n    // Rivets along back edges\n    for (x = [-chair_w/2 + wall*4, chair_w/2 - wall*4]) {\n        translate([x, -chair_d/2 + wall, leg_h + back_h - wall*3])\n            sphere(r=wall/1.5);\n    }\n\n    // --- Armrests --------------------------------------------------\n    // Axe-handle shaped arms\n    module arm(x) {\n        translate([x, 0, leg_h + wall*3])\n            rotate([0, 0, x > 0 ? 15 : -15])\n                difference() {\n                    cube([wall*3, chair_d/2 - wall*2, wall*2], center=true);\n                    // Finger grooves\n                    for (i = [0:2])\n                        translate([0, chair_d/4 - i*wall*2, 0])\n                            cube([wall*3, wall, wall*2], center=true);\n                }\n    }\n    arm( chair_w/2 - wall*2);\n    arm(-chair_w/2 + wall*2);\n\n    // --- Decorative skull on top ---------------------------------\n    // Simple skull shape\n    translate([0, -chair_d/2 + wall*2, leg_h + back_h])\n        union() {\n            // Cranial dome\n            sphere(r=wall*2);\n            // Eye sockets\n            translate([ wall*1.2, 0, wall*0.5])\n                sphere(r=wall*0.7);\n            translate([-wall*1.2, 0, wall*0.5])\n                sphere(r=wall*0.7);\n            // Jaw\n            translate([0, 0, -wall*1.5])\n                cube([wall*2.5, wall*1.8, wall], center=true);\n        }\n}\n\nbarbarian_chair();",
    "renders": true
  },
  {
    "natural_object": "berserker",
    "openscad_code": "// Berserker Chair - Realistic Style, Medium Complexity\n// Dimensions: ~120mm tall, ~90mm wide, ~90mm deep\n\nmodule berserker_chair() {\n    // Chair frame thickness\n    thickness = 2.5;\n    \n    // Seat platform\n    difference() {\n        // Main seat block\n        translate([0, 0, 60])\n            cube([80, 80, thickness], center=true);\n        \n        // Carved berserker face on seat\n        translate([0, 0, 62.5])\n            scale([0.6, 0.3, 1])\n                sphere(d=50, $fn=32);\n        \n        // Eye sockets\n        for(x = [-15, 15])\n            translate([x, 5, 62.5])\n                cylinder(h=5, d1=8, d2=5, $fn=16);\n        \n        // Mouth slot\n        translate([0, -15, 62.5])\n            cube([30, 8, 5], center=true);\n    }\n    \n    // Back rest with berserker shield design\n    translate([0, 35, 90])\n    difference() {\n        // Shield shape\n        scale([1, 1.2, 0.1])\n            cylinder(h=50, d=60, $fn=6);\n        \n        // Shield boss\n        translate([0, 0, 45])\n            cylinder(h=8, d=20, $fn=32);\n        \n        // Battle damage details\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([25, 0, 45])\n                cube([10, 2, 8], center=true);\n        }\n    }\n    \n    // Leg structure - berserker axe handles\n    module leg(x, y) {\n        translate([x, y, 30])\n        difference() {\n            // Main leg post\n            cylinder(h=60, d=8, $fn=16);\n            \n            // Axe handle texture\n            for(i = [5:10:55]) {\n                translate([0, 0, i])\n                    cylinder(h=1, d=7.5, $fn=16);\n            }\n        }\n    }\n    \n    // Four legs\n    for(x = [-30, 30])\n        for(y = [-30, 30])\n            leg(x, y);\n    \n    // Support beams between legs\n    module support(x1, y1, x2, y2, z) {\n        translate([(x1+x2)/2, (y1+y2)/2, z])\n        rotate([0, 0, atan2(y2-y1, x2-x1)])\n        cube([abs(x2-x1)+thickness, thickness, thickness], center=true);\n    }\n    \n    // Side supports\n    support(-30, -30, -30, 30, 30);\n    support(30, -30, 30, 30, 30);\n    support(-30, -30, 30, -30, 30);\n    support(-30, 30, 30, 30, 30);\n    \n    // Lower berserker head detail as footrest\n    translate([0, 0, 15])\n    difference() {\n        // Head shape\n        sphere(d=40, $fn=32);\n        \n        // Jaw line\n        translate([0, -10, -5])\n            cube([30, 20, 10], center=true);\n        \n        // Eye details\n        for(x = [-10, 10])\n            translate([x, 5, 5])\n                cylinder(h=10, d1=6, d2=3, $fn=16);\n    }\n    \n    // Arm rests with battle axe motifs\n    module arm_rest(x) {\n        translate([x, 35, 75])\n        difference() {\n            // Main arm rest\n            cube([12, 30, 25], center=true);\n            \n            // Axe blade cutout\n            translate([x/abs(x)*5, 20, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d1=15, d2=5, $fn=3);\n        }\n    }\n    \n    arm_rest(-35);\n    arm_rest(35);\n}\n\n// Generate the chair\nberserker_chair();",
    "renders": true
  },
  {
    "natural_object": "gladiator",
    "openscad_code": "// Gladiator Chair - Realistic Style, Medium Complexity\n// Dimensions: 120mm height, 60mm width, 80mm depth\n\n// Chair frame thickness\nframe_t = 2;\n\nmodule leg(x_pos, z_pos) {\n    // Main leg post\n    translate([x_pos, 0, z_pos]) {\n        difference() {\n            cylinder(h = 95, r = 6, $fn = 16);\n            translate([0, 0, -1]) cylinder(h = 97, r = 4, $fn = 16);\n        }\n    }\n    \n    // Gladiator shield accent on front legs\n    if(x_pos < 0) {\n        translate([x_pos, 7, z_pos + 40]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h = frame_t, r1 = 12, r2 = 8, $fn = 32);\n                    translate([0, 0, -1]) cylinder(h = frame_t + 2, r1 = 10, r2 = 6, $fn = 32);\n                }\n            }\n        }\n    }\n}\n\nmodule seat() {\n    // Seat base\n    translate([0, 0, 48]) {\n        difference() {\n            cube([54, 52, frame_t], center = true);\n            translate([0, 0, -1]) cube([50, 48, frame_t + 2], center = true);\n        }\n    }\n    \n    // Gladiator armor plate texture on seat\n    for(i = [-20:10:20]) {\n        translate([i, 0, 48 + frame_t/2]) {\n            cube([8, 48, 0.5], center = true);\n        }\n    }\n}\n\nmodule backrest() {\n    // Main backrest frame\n    translate([0, -22, 75]) {\n        difference() {\n            cube([50, frame_t, 54], center = true);\n            translate([0, 0, -1]) cube([46, frame_t + 2, 58], center = true);\n        }\n    }\n    \n    // Gladiator helmet silhouette\n    translate([0, -21, 85]) {\n        // Helmet dome\n        sphere(r = 12, $fn = 32);\n        \n        // Helmet crest\n        translate([0, 0, 12]) {\n            rotate([0, 90, 0]) cylinder(h = 20, r1 = 3, r2 = 1, $fn = 8);\n        }\n        \n        // Face guard bars\n        for(i = [-8:4:8]) {\n            translate([i, -12, 0]) {\n                cube([frame_t, 10, frame_t], center = true);\n            }\n        }\n    }\n    \n    // Decorative studs\n    for(y = [-10:10:10]) {\n        for(z = [60:10:90]) {\n            translate([y, -21.5, z]) {\n                sphere(r = 2, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule stretchers() {\n    // Front stretcher with gladius decoration\n    translate([0, 15, 24]) {\n        difference() {\n            cube([54, frame_t, frame_t], center = true);\n            translate([0, 0, -1]) cube([50, frame_t + 2, frame_t + 2], center = true);\n        }\n        \n        // Sword accent\n        translate([0, 0, frame_t]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height = frame_t) {\n                    polygon(points = [[-2, 0], [2, 0], [1, 15], [-1, 15]]);\n                }\n            }\n        }\n    }\n    \n    // Side stretchers\n    translate([27, 0, 24]) {\n        rotate([0, 0, 90]) difference() {\n            cube([40, frame_t, frame_t], center = true);\n            translate([0, 0, -1]) cube([36, frame_t + 2, frame_t + 2], center = true);\n        }\n    }\n    \n    translate([-27, 0, 24]) {\n        rotate([0, 0, 90]) difference() {\n            cube([40, frame_t, frame_t], center = true);\n            translate([0, 0, -1]) cube([36, frame_t + 2, frame_t + 2], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    leg(25, 0);\n    leg(-25, 0);\n    leg(25, 0);\n    leg(-25, 0);\n    \n    seat();\n    backrest();\n    stretchers();\n}",
    "renders": true
  },
  {
    "natural_object": "champion",
    "openscad_code": "// Champion Armchair - Realistic Style with Medium Complexity\n// Dimensions: 80mm wide x 75mm deep x 85mm tall\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main seat module\nmodule seat() {\n    // Base cushion\n    translate([0, 0, 15]) {\n        difference() {\n            cube([60, 55, 12], center = true);\n            // Rounded top edges\n            translate([0, 0, 6]) {\n                cube([58, 53, 12], center = true);\n            }\n        }\n    }\n}\n\n// Backrest module with ergonomic curve\nmodule backrest() {\n    translate([0, -25, 50]) {\n        difference() {\n            // Main backrest\n            cube([60, 8, 50], center = true);\n            // Ergonomic curve\n            translate([0, 4, -10]) {\n                cylinder(h = 15, r = 25, center = true);\n            }\n            // Lumbar support curve\n            translate([0, 4, 5]) {\n                cylinder(h = 20, r = 20, center = true);\n            }\n        }\n    }\n}\n\n// Armrest module\nmodule armrest(side) {\n    translate([side * 32, 0, 35]) {\n        union() {\n            // Horizontal rest\n            cube([5, 25, 2], center = true);\n            // Vertical support\n            translate([0, 10, -12]) {\n                cube([5, 5, 25], center = true);\n            }\n            // Curved front\n            translate([0, -10, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 5, r = 3, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Leg module with tapered design\nmodule leg(pos_x, pos_z) {\n    translate([pos_x * 25, pos_z * 22, 8]) {\n        cylinder(h = 15, r1 = 3, r2 = 2, center = true);\n    }\n}\n\n// Support bars between legs\nmodule support_bar() {\n    // Front bar\n    translate([0, 20, 7]) {\n        cube([50, 3, 2], center = true);\n    }\n    // Side bars\n    translate([25, 0, 7]) {\n        rotate([90, 0, 0]) {\n            cube([40, 3, 2], center = true);\n        }\n    }\n    translate([-25, 0, 7]) {\n        rotate([90, 0, 0]) {\n            cube([40, 3, 2], center = true);\n        }\n    }\n}\n\n// Decorative buttons on cushion\nmodule buttons() {\n    for (x = [-20, 0, 20]) {\n        for (y = [-15, 0, 15]) {\n            translate([x, y, 22]) {\n                sphere(r = 1.5, $fn = 16);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale(scale_factor) {\n    union() {\n        // Seat assembly\n        seat();\n        \n        // Backrest\n        backrest();\n        \n        // Armrests\n        armrest(1);  // Right\n        armrest(-1); // Left\n        \n        // Legs\n        leg(1, 1);\n        leg(-1, 1);\n        leg(1, -1);\n        leg(-1, -1);\n        \n        // Support structure\n        support_bar();\n        \n        // Decorative elements\n        buttons();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "avatar",
    "openscad_code": "// Avatar Chair - realistic style, medium complexity\n// Overall dimensions: 100mm wide x 90mm deep x 100mm tall\n\n$fn = 32;\n\nmodule chair_base() {\n    // Seat platform\n    difference() {\n        cube([80, 70, 4], center = true);\n        translate([0, 0, -1])\n            cube([76, 66, 6], center = true);\n    }\n}\n\nmodule chair_back() {\n    // Backrest frame\n    difference() {\n        cube([4, 70, 80], center = true);\n        translate([0, 0, -2])\n            cube([3, 68, 82], center = true);\n    }\n    \n    // Horizontal backrest slats\n    for (i = [-1:1]) {\n        translate([0, i * 25, 20])\n            cube([4, 12, 3], center = true);\n    }\n}\n\nmodule chair_leg(x, y) {\n    // Tapered leg with rounded bottom\n    translate([x, y, -48])\n        cylinder(h = 48, r1 = 4, r2 = 3);\n}\n\nmodule armrest_support(x) {\n    // Curved support for armrest\n    translate([x, 35, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 20, r = 3);\n}\n\nmodule armrest() {\n    // Flat armrest surface\n    translate([0, 42, 10])\n        rotate([0, 90, 0])\n            cube([20, 4, 12], center = true);\n}\n\nmodule avatar_head() {\n    // Rounded head shape\n    sphere(r = 12);\n    \n    // Eyes\n    translate([-4, 6, 3])\n        sphere(r = 2);\n    translate([4, 6, 3])\n        sphere(r = 2);\n    \n    // Mouth\n    translate([0, 4, -3])\n        cube([6, 2, 1], center = true);\n}\n\nmodule avatar_body() {\n    // Torso\n    cube([20, 15, 25], center = true);\n    \n    // Arms\n    translate([-12, 0, 5])\n        rotate([0, 0, -20])\n            cube([6, 6, 20], center = true);\n    translate([12, 0, 5])\n        rotate([0, 0, 20])\n            cube([6, 6, 20], center = true);\n}\n\nmodule avatar_legs() {\n    // Legs\n    translate([-6, 0, -15])\n        cube([8, 10, 20], center = true);\n    translate([6, 0, -15])\n        cube([8, 10, 20], center = true);\n}\n\n// Main assembly\nunion() {\n    // Chair structure\n    chair_base();\n    \n    // Backrest assembly\n    translate([0, 0, 42])\n        union() {\n            chair_back();\n            translate([-38, 0, 0])\n                chair_back();\n            translate([38, 0, 0])\n                chair_back();\n        }\n    \n    // Legs - positioned at corners\n    chair_leg(-35, -30);\n    chair_leg(35, -30);\n    chair_leg(-35, 30);\n    chair_leg(35, 30);\n    \n    // Armrests\n    translate([-42, 0, 10])\n        union() {\n            armrest_support(-42);\n            armrest();\n        }\n    translate([42, 0, 10])\n        union() {\n            armrest_support(42);\n            mirror([1, 0, 0])\n                armrest();\n        }\n    \n    // Avatar sitting on chair\n    translate([0, 0, 15])\n        union() {\n            // Head positioned above backrest\n            translate([0, -10, 35])\n                avatar_head();\n            \n            // Body and legs\n            translate([0, 0, 0])\n                union() {\n                    avatar_body();\n                    avatar_legs();\n                }\n        }\n}",
    "renders": true
  },
  {
    "natural_object": "legend",
    "openscad_code": "// Legend-inspired bookshelf (Tree of Knowledge)\n// A realistic tree trunk with branch-like shelves, 120mm tall\n\nwall = 2;               // wall thickness for 3D printing\ntrunk_r = 10;           // trunk radius\ntrunk_h = 120;          // trunk height\nshelf_t = wall;         // shelf thickness\nshelf_w = 35;           // shelf width\nshelf_d = 20;           // shelf depth\nbase_r = trunk_r + 5;   // base radius\nbase_h = 5;             // base height\n\n// Helper module for rounded cuboids\nmodule rounded_cube(size, r) {\n    hull() {\n        translate([r, r, r]) sphere(r=r);\n        translate([r, r, size.z-r]) sphere(r=r);\n        translate([r, size.y-r, r]) sphere(r=r);\n        translate([r, size.y-r, size.z-r]) sphere(r=r);\n        translate([size.x-r, r, r]) sphere(r=r);\n        translate([size.x-r, r, size.z-r]) sphere(r=r);\n        translate([size.x-r, size.y-r, r]) sphere(r=r);\n        translate([size.x-r, size.y-r, size.z-r]) sphere(r=r);\n    }\n}\n\n// Tree trunk with slight taper and texture rings\nmodule trunk() {\n    difference() {\n        // Main trunk body\n        cylinder(h=trunk_h, r1=trunk_r+2, r2=trunk_r, $fn=32);\n        \n        // Center hollow\n        translate([0, 0, -1]) cylinder(h=trunk_h+2, r1=trunk_r, r2=trunk_r-2, $fn=32);\n        \n        // Growth ring texture\n        for(i=[5:10:trunk_h-10]) {\n            translate([0, 0, i]) \n                difference() {\n                    cylinder(h=1, r=trunk_r+2, $fn=32);\n                    cylinder(h=1.5, r=trunk_r-1, $fn=32);\n                }\n        }\n    }\n}\n\n// Branch shelf support structure\nmodule branch_shelf(height, angle, length) {\n    rotate([0, 0, angle]) {\n        // Branch arm\n        translate([trunk_r-1, -wall/2, height]) \n            rotate([90, 0, 0])\n                cylinder(h=length, r=wall, $fn=8);\n        \n        // Shelf\n        translate([trunk_r+length, 0, height])\n            rotate([0, 0, 90-angle])\n                rounded_cube([shelf_d, shelf_w, shelf_t], 2);\n    }\n}\n\n// Base ring for stability\nmodule base() {\n    difference() {\n        cylinder(h=base_h, r=base_r, $fn=32);\n        cylinder(h=base_h+1, r=base_r-wall, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0]) \n        base();\n    \n    // Trunk\n    translate([0, 0, base_h])\n        trunk();\n    \n    // Branch shelves at various heights and angles\n    branch_shelf(30, 0, 25);\n    branch_shelf(50, 120, 30);\n    branch_shelf(70, 240, 22);\n    branch_shelf(90, 60, 28);\n    branch_shelf(105, 180, 20);\n    \n    // Top cap\n    translate([0, 0, trunk_h+base_h]) \n        cylinder(h=wall*2, r1=trunk_r+1, r2=0, $fn=32);\n}",
    "renders": true
  },
  {
    "natural_object": "phantom",
    "openscad_code": "// Phantom Chair - Medium Complexity Realistic Style\n// Overall dimensions: 80mm width x 85mm depth x 120mm height\n\n// Main chair frame thickness\nframe_thickness = 2;\n\n// Chair seat\nmodule seat() {\n    difference() {\n        // Main seat base\n        translate([0, 0, 45]) \n            cube([60, 65, 8], center=true);\n        \n        // Ghostly cutout pattern on seat\n        for (i = [-20:10:20]) {\n            for (j = [-25:10:25]) {\n                translate([i, j, 49])\n                    cylinder(h=10, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Chair back with ghostly curves\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -25, 80])\n            cube([55, 6, 50], center=true);\n            \n        // Phantom holes in backrest\n        translate([0, -21, 85])\n            cylinder(h=10, r=15, center=true);\n        translate([-15, -21, 75])\n            cylinder(h=10, r=8, center=true);\n        translate([15, -21, 75])\n            cylinder(h=10, r=8, center=true);\n    }\n}\n\n// Chair legs with tapered phantom design\nmodule leg(x_pos, y_pos) {\n    // Main leg\n    translate([x_pos, y_pos, 22.5])\n        cylinder(h=45, r1=4, r2=2.5, center=true);\n    \n    // Ghostly wisps around legs\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([x_pos, y_pos, 35])\n                scale([1, 0.3, 1])\n                    rotate([90, 0, 0])\n                        cylinder(h=15, r1=2, r2=0, center=true);\n    }\n}\n\n// Phantom armrests\nmodule armrest(side) {\n    translate([side * 35, 0, 65])\n        rotate([0, 15 * side, 0])\n            difference() {\n                // Main armrest\n                cube([30, 8, 25], center=true);\n                \n                // Ghostly cutouts\n                translate([0, 0, 0])\n                    cube([25, 12, 20], center=true);\n            }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Legs\n    leg(-25, -20);\n    leg(25, -20);\n    leg(-25, 20);\n    leg(25, 20);\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Phantom support bars between legs\n    translate([0, 0, 15])\n        cube([50, 40, frame_thickness], center=true);\n    translate([0, -20, 15])\n        cube([frame_thickness, 40, 30], center=true);\n    translate([0, 20, 15])\n        cube([frame_thickness, 40, 30], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "specter",
    "openscad_code": "// Specter Armchair - Realistic Style, Medium Complexity\n// Dimensions: 120mm width x 110mm depth x 100mm height\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 50;\n\nmodule chair_base() {\n    // Main seat base - hollow box construction\n    difference() {\n        // Outer shell\n        cube([80, 60, 8], center=true);\n        // Inner hollow\n        translate([0, 0, -1])\n            cube([76, 56, 6], center=true);\n    }\n}\n\nmodule chair_back() {\n    // Curved backrest with ghostly flowing shape\n    translate([0, -30, 45]) {\n        // Main back panel\n        difference() {\n            // Outer curved back\n            scale([1, 1.2, 1])\n                rotate([0, 10, 0])\n                    cylinder(h=80, r1=40, r2=35, center=true);\n            // Inner hollow\n            scale([0.9, 1.1, 0.8])\n                rotate([0, 10, 0])\n                    cylinder(h=82, r1=36, r2=31, center=true);\n        }\n        \n        // Ghostly wispy elements\n        for(i = [-30:10:30]) {\n            translate([i, 0, 20])\n                rotate([0, 90, 0])\n                    cylinder(h=2, r1=3, r2=0.5);\n        }\n    }\n}\n\nmodule armrest(side) {\n    // Side armrest with spectral flowing design\n    translate([side * 45, 0, 25]) {\n        difference() {\n            // Main armrest structure\n            rotate([0, 0, side * -5])\n                cube([8, 50, 30], center=true);\n            // Inner hollow\n            translate([0, 0, -1])\n                rotate([0, 0, side * -5])\n                    cube([4, 46, 28], center=true);\n        }\n        \n        // Floating spectral details\n        translate([side * 3, 15, 10])\n            sphere(d=8);\n        translate([side * -2, 25, 15])\n            sphere(d=6);\n    }\n}\n\nmodule legs() {\n    // Four legs with ghostly tapering\n    for(x = [-30, 30])\n    for(y = [-20, 20]) {\n        translate([x, y, -45]) {\n            difference() {\n                // Tapered leg\n                cylinder(h1=40, h2=0, r1=4, r2=2);\n                // Inner hollow\n                translate([0, 0, 2])\n                    cylinder(h1=36, h2=0, r1=2, r2=0.5);\n            }\n            \n            // Spectral wisps at base\n            translate([0, 0, -42])\n                sphere(d=6);\n        }\n    }\n}\n\nmodule ghostly_accents() {\n    // Ectoplasmic drips\n    for(i = [1:5]) {\n        translate([rand(i*123)*80-40, rand(i*456)*60-30, rand(i*789)*50+10])\n            scale([1, 1, 1.5])\n                sphere(d=rand(i*111)*3+2);\n    }\n    \n    // Floating spectral orbs\n    translate([0, 0, 70])\n        sphere(d=12);\n    translate([20, -10, 65])\n        sphere(d=8);\n    translate([-20, -10, 65])\n        sphere(d=8);\n}\n\n// Helper function for pseudo-random\nfunction rand(x) = (x*9301+49297) % 233280 / 233280;\n\n// Main assembly\nunion() {\n    chair_base();\n    chair_back();\n    armrest(1);  // Right arm\n    armrest(-1); // Left arm\n    legs();\n    ghostly_accents();\n}",
    "renders": true
  },
  {
    "natural_object": "ghost",
    "openscad_code": "// Ghost Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm wide x 100mm deep x 150mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Ghost body module\nmodule ghost_body() {\n    // Main ghost form - rounded bottom with tapered top\n    translate([0, 0, 80]) {\n        difference() {\n            // Outer shell - rounded teardrop shape\n            scale([1, 1, 1.2]) \n                sphere(d=90, $fn=50);\n            \n            // Hollow interior\n            scale([0.9, 0.9, 1.1]) \n                sphere(d=90-wall*2, $fn=50);\n        }\n    }\n    \n    // Ghost bottom - flattened for stability\n    translate([0, 0, 35]) \n        difference() {\n            cylinder(h=wall*2, d1=85, d2=85, $fn=50);\n            cylinder(h=wall*2+1, d1=85-wall*2, d2=85-wall*2, $fn=50);\n        }\n}\n\n// Ghost eyes (furniture joints)\nmodule ghost_eyes() {\n    // Left eye - round opening\n    translate([-20, 35, 90]) \n        rotate([0, 10, 0])\n            cylinder(h=wall*3, d=12, $fn=30);\n    \n    // Right eye - round opening\n    translate([20, 35, 90]) \n        rotate([0, 10, 0])\n            cylinder(h=wall*3, d=12, $fn=30);\n}\n\n// Chair legs inside ghost form\nmodule chair_legs() {\n    // Front left leg\n    translate([-30, -30, 0]) \n        cylinder(h=40, d=wall*3, $fn=20);\n    \n    // Front right leg\n    translate([30, -30, 0]) \n        cylinder(h=40, d=wall*3, $fn=20);\n    \n    // Back left leg\n    translate([-30, 30, 0]) \n        cylinder(h=40, d=wall*3, $fn=20);\n    \n    // Back right leg\n    translate([30, 30, 0]) \n        cylinder(h=40, d=wall*3, $fn=20);\n}\n\n// Chair seat platform\nmodule chair_seat() {\n    translate([0, 0, 40]) \n        difference() {\n            // Seat top\n            cube([60, 60, wall*2], center=true);\n            // Hollow cavity\n            cube([60-wall*2, 60-wall*2, wall*2+1], center=true);\n        }\n}\n\n// Chair backrest\nmodule chair_backrest() {\n    // Backrest frame\n    translate([0, 30, 70]) {\n        difference() {\n            // Outer frame\n            cube([55, wall*2, 60], center=true);\n            // Inner opening\n            cube([55-wall*4, wall*2+1, 60-wall*4], center=true);\n        }\n    }\n    \n    // Backrest posts\n    for (x = [-15, 0, 15]) {\n        translate([x, 30, 70]) \n            cylinder(h=60, d=wall*2, $fn=16);\n    }\n}\n\n// Ghost sheet details\nmodule ghost_sheet() {\n    // Flowing bottom edges\n    for (i = [0:30:330]) {\n        rotate([0, 0, i]) \n            translate([40, 0, 30]) \n                scale([1, 0.3, 1]) \n                    sphere(d=20, $fn=20);\n    }\n    \n    // Side folds\n    translate([-45, 0, 60]) \n        scale([0.5, 1, 1.5]) \n            sphere(d=30, $fn=20);\n    \n    translate([45, 0, 60]) \n        scale([0.5, 1, 1.5]) \n            sphere(d=30, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Main ghost form\n    ghost_body();\n    \n    // Ghost eyes\n    ghost_eyes();\n    \n    // Chair structure visible inside\n    union() {\n        chair_legs();\n        chair_seat();\n        chair_backrest();\n    }\n    \n    // Ghost sheet details\n    ghost_sheet();\n}",
    "renders": true
  },
  {
    "natural_object": "zombie",
    "openscad_code": "// Zombie Chair - OpenSCAD\n// A medium-complexity 3D printable zombie-themed chair\n// Overall dimensions: 100mm wide x 110mm deep x 120mm tall\n\n// Parameters\nseat_height = 45;\nseat_width = 80;\nseat_depth = 80;\nback_height = 75;\nleg_height = seat_height - 10;\nwall_thickness = 2;\n\nmodule zombie_chair() {\n    // Chair seat with decay\n    translate([0, 0, leg_height])\n    difference() {\n        cube([seat_width, seat_depth, 10], center=true);\n        // Decay holes\n        for (i = [0:3]) {\n            translate([i*15-22.5, 10, 5])\n            rotate([45, 0, 0])\n            cylinder(h=15, r=8, $fn=8);\n        }\n        for (i = [0:2]) {\n            translate([i*20-20, -15, 5])\n            rotate([-30, 0, 0])\n            cylinder(h=15, r=6, $fn=8);\n        }\n    }\n    \n    // Backrest with zombie face\n    translate([0, seat_depth/2 - 5, leg_height + back_height/2])\n    difference() {\n        // Main backrest\n        cube([seat_width - 10, wall_thickness, back_height], center=true);\n        \n        // Zombie mouth\n        translate([0, 0, -10])\n        rotate([0, 90, 0])\n        cylinder(h=wall_thickness + 2, r1=12, r2=8, $fn=6);\n        \n        // Eye sockets\n        translate([-15, 0, 15])\n        sphere(r=8);\n        translate([15, 0, 15])\n        sphere(r=8);\n        \n        // Decay cracks\n        translate([0, 0, 0])\n        cube([60, wall_thickness + 2, 5]);\n    }\n    \n    // Chair legs - bone-like\n    module leg(x, y) {\n        translate([x, y, leg_height/2])\n        difference() {\n            // Main leg\n            cylinder(h=leg_height, r=8, $fn=8);\n            // Carved grooves\n            for (i = [0:3]) {\n                rotate([0, 0, i*90])\n                translate([4, 0, 0])\n                cube([8, 2, leg_height], center=true);\n            }\n        }\n    }\n    \n    // Position legs\n    leg(seat_width/2 - 10, seat_depth/2 - 10);\n    leg(-seat_width/2 + 10, seat_depth/2 - 10);\n    leg(seat_width/2 - 10, -seat_depth/2 + 10);\n    leg(-seat_width/2 + 10, -seat_depth/2 + 10);\n    \n    // Armrests - skeletal\n    module armrest(x) {\n        translate([x, 0, leg_height + 15])\n        union() {\n            // Main support\n            cylinder(h=30, r=6, $fn=6);\n            // Joint detail\n            translate([0, 0, 15])\n            sphere(r=8);\n            // Arm piece\n            translate([0, seat_depth/2 - 20, 15])\n            rotate([90, 0, 0])\n            cylinder(h=seat_depth/2 - 10, r=5, $fn=6);\n        }\n    }\n    \n    armrest(seat_width/2);\n    armrest(-seat_width/2);\n    \n    // Spinal details on back\n    for (i = [0:4]) {\n        translate([0, seat_depth/2 - 5, leg_height + 10 + i*15])\n        difference() {\n            sphere(r=6);\n            translate([0, 0, -3])\n            cube([12, 12, 6], center=true);\n        }\n    }\n}\n\n// Render the chair\nzombie_chair();",
    "renders": true
  },
  {
    "natural_object": "vampire",
    "openscad_code": "// Vampire Throne Chair - Realistic Style, Medium Complexity\n// Dimensions: 80mm wide x 90mm deep x 130mm tall\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main throne structure\nmodule throne_base() {\n    // Seat platform\n    translate([0, 0, 40])\n        cube([60, 70, 5], center = true);\n    \n    // Seat cushion\n    translate([0, 0, 47])\n        scale([1, 1, 0.3])\n            sphere(d = 55);\n    \n    // Backrest frame\n    translate([0, -30, 85])\n        cube([55, 5, 80], center = true);\n    \n    // Armrest supports\n    for (x = [-25, 25]) {\n        translate([x, 15, 65])\n            cylinder(h = 40, d = 8);\n    }\n}\n\n// Gothic arch backrest\nmodule gothic_arch() {\n    difference() {\n        // Main arch shape\n        translate([0, -30, 100])\n            scale([1, 0.5, 1.2])\n                sphere(d = 50);\n        \n        // Inner cutout\n        translate([0, -25, 105])\n            scale([0.7, 0.4, 1])\n                sphere(d = 40);\n    }\n}\n\n// Armrests with bat wing details\nmodule armrests() {\n    for (x = [-30, 30]) {\n        // Main armrest\n        translate([x, 15, 85])\n            cube([15, 40, 5], center = true);\n        \n        // Bat wing detail\n        translate([x, 35, 90])\n            rotate([0, 0, x > 0 ? 45 : -45])\n                cube([10, 20, 3]);\n    }\n}\n\n// Legs with claw feet\nmodule throne_legs() {\n    for (x = [-20, 20])\n    for (y = [-25, 25]) {\n        // Leg post\n        translate([x, y, 20])\n            cylinder(h = 40, d = 8);\n        \n        // Claw foot\n        translate([x, y, 0])\n            sphere(d = 12);\n        \n        // Toe details\n        for (angle = [0, 120, 240]) {\n            rotate([0, 0, angle])\n                translate([x + cos(angle) * 8, y + sin(angle) * 8, 0])\n                    cylinder(h1 = 8, h2 = 0, r1 = 3, r2 = 0);\n        }\n    }\n}\n\n// Decorative elements\nmodule vampire_details() {\n    // Fangs on backrest\n    for (i = [-1, 0, 1]) {\n        translate([i * 8, -32, 125])\n            rotate([90, 0, 0])\n                cylinder(h1 = 10, h2 = 0, r1 = 3, r2 = 0);\n    }\n    \n    // Coffin back detail\n    translate([0, -33, 105])\n        cube([45, 3, 60], center = true);\n    \n    // Blood droplets\n    for (i = [0:3]) {\n        translate([random(-20, 20), random(0, 30), 50 + i * 5])\n            sphere(d = 2);\n    }\n}\n\n// Main assembly\nunion() {\n    throne_base();\n    gothic_arch();\n    armrests();\n    throne_legs();\n    vampire_details();\n}",
    "renders": true
  },
  {
    "natural_object": "werewolf",
    "openscad_code": "// Werewolf Armchair - Realistic Medium Complexity\n// Dimensions: 120mm W x 100mm D x 110mm H\n\n// Configuration\nwall_thickness = 2;\nseat_height = 45;\nback_height = 65;\n\n// Main seat base\nmodule seat_base() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n            cube([80, 90, seat_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, seat_height/2])\n            cube([76, 86, seat_height-2], center=true);\n    }\n}\n\n// Werewolf head backrest\nmodule wolf_head() {\n    // Head base\n    translate([0, -35, seat_height + 30])\n    difference() {\n        sphere(25);\n        translate([0, 10, 0]) sphere(23);\n    }\n    \n    // Snout\n    translate([0, -50, seat_height + 25])\n    rotate([10, 0, 0])\n    cylinder(h=30, r1=12, r2=8, center=true);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([side*20, -25, seat_height + 45])\n        rotate([0, side*10, side*15])\n        cylinder(h=20, r1=8, r2=3);\n    }\n    \n    // Eyes (glow effect holes)\n    for(side = [-1, 1]) {\n        translate([side*10, -40, seat_height + 32])\n        sphere(3);\n    }\n}\n\n// Armrest with claw details\nmodule armrest(side) {\n    // Arm support\n    translate([side*45, 0, seat_height/2 + 10])\n    difference() {\n        cylinder(h=seat_height + 10, r=8);\n        translate([0, 0, 2]) cylinder(h=seat_height + 6, r=6);\n    }\n    \n    // Paw at end\n    translate([side*45, 35, seat_height + 5])\n    sphere(12);\n    \n    // Claws\n    for(i = [0:3]) {\n        angle = i*30 - 45;\n        translate([side*45 + side*cos(angle)*12, 35 + sin(angle)*12, seat_height + 5])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=2, r2=0.5);\n    }\n}\n\n// Legs with paw feet\nmodule leg(pos_x, pos_y) {\n    translate([pos_x, pos_y, 0])\n    difference() {\n        cylinder(h=seat_height - 5, r=6);\n        translate([0, 0, 2]) cylinder(h=seat_height - 9, r=4);\n    }\n    \n    // Paw foot\n    translate([pos_x, pos_y, 2])\n    sphere(8);\n    \n    // Toes\n    for(i = [0:3]) {\n        angle = i*25 - 37.5;\n        translate([pos_x + cos(angle)*8, pos_y + sin(angle)*8, 2])\n        rotate([90, 0, 0])\n        cylinder(h=5, r1=1.5, r2=0.5);\n    }\n}\n\n// Fur texture pattern\nmodule fur_texture(base_x, base_y, base_z) {\n    for(i = [0:5]) {\n        for(j = [0:5]) {\n            translate([\n                base_x + i*15 - 37.5,\n                base_y + j*15 - 37.5,\n                base_z + rand(i*100+j*100)*3\n            ])\n            sphere(1.5 + rand(i*j)*1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat structure\n    seat_base();\n    \n    // Backrest with wolf features\n    wolf_head();\n    \n    // Backrest extensions (shoulders)\n    for(side = [-1, 1]) {\n        translate([side*30, -25, seat_height + 20])\n        rotate([0, side*5, 0])\n        cylinder(h=40, r1=15, r2=10);\n    }\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs\n    leg(30, 30);\n    leg(-30, 30);\n    leg(30, -30);\n    leg(-30, -30);\n    \n    // Fur texture on visible surfaces\n    fur_texture(0, 0, seat_height + 2);\n    fur_texture(0, -35, seat_height + 25);\n}\n\n// Center the model\ntranslate([0, 0, 0]);",
    "renders": true
  },
  {
    "natural_object": "demon",
    "openscad_code": "// Demon Chest of Drawers - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm wide x 60mm deep x 100mm tall\n\n// Main chest body\nmodule chest_body() {\n    difference() {\n        // Main body\n        translate([0, 0, 50]) cube([120, 60, 100], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 45]) cube([114, 54, 90], center=true);\n    }\n}\n\n// Demon head (top ornament)\nmodule demon_head() {\n    // Base of head\n    translate([0, 0, 105]) cube([40, 30, 20], center=true);\n    \n    // Skull shape\n    translate([0, 0, 120]) sphere(d=35, $fn=32);\n    \n    // Horns\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 125]) rotate([0, side * 20, 0]) \n            cylinder(h=25, d1=8, d2=3, center=true, $fn=16);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 10, -12, 120]) sphere(d=6);\n    }\n    \n    // Mouth\n    translate([0, -17, 115]) cube([20, 5, 8], center=true);\n}\n\n// Demon feet\nmodule demon_feet() {\n    for(x = [-50, 50]) {\n        for(y = [-25, 25]) {\n            translate([x, y, 0]) {\n                // Foot base\n                cube([20, 15, 20], center=true);\n                \n                // Claw toes\n                for(toe = [-1, 0, 1]) {\n                    translate([toe * 5, 0, 10]) rotate([0, toe * 15, 0])\n                        cylinder(h=12, d1=4, d2=2, center=false, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Drawer module\nmodule drawer(width, height, depth, y_pos) {\n    // Drawer box\n    translate([0, y_pos, 0]) difference() {\n        cube([width, depth, height], center=true);\n        translate([0, 0, 2]) cube([width-4, depth-4, height-2], center=true);\n    }\n    \n    // Demon face on drawer front\n    translate([0, y_pos + depth/2 - 1, height/2 - 5]) {\n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 0]) sphere(d=5);\n        }\n        // Nose\n        translate([0, 0, -5]) sphere(d=3);\n        // Mouth\n        translate([0, -8, -10]) cube([20, 3, 8], center=true);\n    }\n    \n    // Handle (horn-shaped)\n    translate([0, y_pos + depth/2 + 2, height/2]) rotate([90, 0, 0])\n        cylinder(h=15, d1=8, d2=4, center=false, $fn=12);\n}\n\n// Side demon wings (structural supports)\nmodule demon_wings() {\n    for(side = [-1, 1]) {\n        translate([side * 65, 0, 70]) rotate([0, side * 15, 0]) {\n            // Wing base\n            cube([10, 5, 60], center=true);\n            \n            // Wing bones\n            for(i = [0:3]) {\n                rotate([0, 0, i * 30 - 45]) translate([side * 20, 0, 0])\n                    cylinder(h=40, d=3, center=false, $fn=8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chest_body();\n    demon_head();\n    demon_feet();\n    demon_wings();\n    \n    // Drawers\n    drawer(100, 25, 55, 37.5);\n    drawer(100, 25, 55, 12.5)\n    drawer(100, 25, 55, -12.5)\n    drawer(100, 25, 55, -37.5)\n}",
    "renders": true
  },
  {
    "natural_object": "titan",
    "openscad_code": "// Titan Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm width x 120mm depth x 220mm height\n\n// Main seating structure\nmodule chair_seat() {\n    // Seat base with rounded corners\n    translate([0, 0, 40])\n    minkowski() {\n        cube([100, 100, 4], center = true);\n        cylinder(h = 0.1, r = 5, $fn = 16);\n    }\n    \n    // Seat cushion with slight curvature\n    translate([0, 0, 46])\n    scale([1, 1, 0.3])\n    sphere(r = 50, $fn = 32);\n}\n\n// Backrest with lumbar support\nmodule chair_backrest() {\n    // Main backrest panel\n    translate([0, -45, 130])\n    rotate([10, 0, 0])\n    cube([90, 4, 160], center = true);\n    \n    // Lumbar support curve\n    translate([0, -43, 110])\n    rotate([30, 0, 0])\n    scale([0.8, 1, 0.5])\n    cylinder(h = 60, r = 40, center = true, $fn = 32);\n    \n    // Headrest\n    translate([0, -45, 210])\n    rotate([20, 0, 0])\n    scale([0.7, 0.5, 0.7])\n    sphere(r = 30, $fn = 32);\n}\n\n// Armrests with support structure\nmodule armrests() {\n    // Left armrest\n    translate([-55, 0, 80])\n    cube([6, 80, 4], center = true);\n    \n    // Left armrest support\n    translate([-55, 25, 40])\n    cylinder(h = 40, r = 4, $fn = 16);\n    \n    // Right armrest\n    translate([55, 0, 80])\n    cube([6, 80, 4], center = true);\n    \n    // Right armrest support\n    translate([55, 25, 40])\n    cylinder(h = 40, r = 4, $fn = 16);\n}\n\n// Central pedestal base\nmodule pedestal_base() {\n    // Main support column\n    translate([0, 0, 20])\n    cylinder(h = 40, r = 20, $fn = 32);\n    \n    // Base plate\n    translate([0, 0, 0])\n    cylinder(h = 5, r = 50, $fn = 48);\n    \n    // Reinforcement ribs\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n        translate([35, 0, 2.5])\n        cube([20, 4, 5], center = true);\n    }\n}\n\n// Adjustment mechanism cover\nmodule adjustment_mechanism() {\n    // Control box under seat\n    translate([0, 25, 38])\n    cube([60, 20, 6], center = true);\n    \n    // Adjustment lever\n    translate([-30, 35, 38])\n    rotate([0, 0, -20])\n    cube([4, 30, 3], center = true);\n}\n\n// Assembly\nunion() {\n    chair_seat();\n    chair_backrest();\n    armrests();\n    pedestal_base();\n    adjustment_mechanism();\n}",
    "renders": true
  },
  {
    "natural_object": "giant",
    "openscad_code": "// Giant armchair (realistic style, medium complexity)\n// Overall dimensions: 120mm x 100mm x 110mm\n\n// Parameters\nseat_w = 80;\nseat_d = 70;\nseat_h = 40;\nback_h = 70;\narm_h = 60;\nleg_h = 30;\nwall = 2;\n\n// Main seat\nmodule seat() {\n    difference() {\n        // Seat base\n        cube([seat_w, seat_d, seat_h], center=true);\n        \n        // Hollow out seat\n        translate([0, 0, wall/2])\n            cube([seat_w-wall*2, seat_d-wall*2, seat_h-wall], center=true);\n        \n        // Seat cushion contour (subtle)\n        translate([0, 0, seat_h/2-1])\n            cube([seat_w-10, seat_d-10, 2], center=true);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    difference() {\n        // Main back\n        translate([0, -seat_d/2+wall, back_h/2+seat_h/2-wall])\n            cube([seat_w, wall*2, back_h], center=true);\n        \n        // Hollow\n        translate([0, -seat_d/2+wall, back_h/2+seat_h/2-wall])\n            cube([seat_w-wall*4, wall*2, back_h-wall*2], center=true);\n    }\n}\n\n// Armrest support frame\nmodule arm_frame(side) {\n    difference() {\n        // Vertical post\n        translate([side*(seat_w/2-wall), 0, arm_h/2+seat_h/2])\n            cube([wall*4, wall*4, arm_h], center=true);\n        \n        // Hollow post\n        translate([side*(seat_w/2-wall), 0, arm_h/2+seat_h/2])\n            cube([wall*2, wall*2, arm_h-wall*2], center=true);\n    }\n}\n\n// Armrest pad\nmodule arm_pad(side) {\n    difference() {\n        // Pad\n        translate([side*(seat_w/2-wall), seat_d/4, arm_h+seat_h/2-2])\n            cube([wall*6, seat_d/2, wall*4], center=true);\n        \n        // Hollow pad\n        translate([side*(seat_w/2-wall), seat_d/4, arm_h+seat_h/2-2])\n            cube([wall*4, seat_d/2-wall*2, wall*2], center=true);\n    }\n}\n\n// Leg structure\nmodule leg(x_pos, y_pos) {\n    difference() {\n        // Leg post\n        translate([x_pos, y_pos, -leg_h/2])\n            cylinder(h=leg_h, d1=wall*3, d2=wall*4, center=true);\n        \n        // Hollow leg\n        translate([x_pos, y_pos, -leg_h/2])\n            cylinder(h=leg_h-wall, d1=wall, d2=wall*2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Arms\n    for (side = [-1, 1]) {\n        arm_frame(side);\n        arm_pad(side);\n    }\n    \n    // Legs\n    leg(seat_w/2-wall*3, seat_d/2-wall*3);\n    leg(-seat_w/2+wall*3, seat_d/2-wall*3);\n    leg(seat_w/2-wall*3, -seat_d/2+wall*3);\n    leg(-seat_w/2+wall*3, -seat_d/2+wall*3);\n}",
    "renders": true
  },
  {
    "natural_object": "colossus",
    "openscad_code": "// Colossus bookshelf - realistic style, medium complexity\n// Inspired by ancient stone colossus statues with functional shelves\n\n// Overall dimensions\noverall_height = 140;\nbase_width = 60;\nbase_depth = 40;\n\n// Wall thickness\nwall = 2;\n\n// Base pedestal\nmodule base() {\n    difference() {\n        // Main base block\n        translate([0, 0, 5]) cube([base_width, base_depth, 10], center=true);\n        \n        // Hollow out base\n        translate([0, 0, 7]) cube([base_width-wall*2, base_depth-wall*2, 10], center=true);\n        \n        // Cable management hole in back\n        translate([0, base_depth/2-1, 5]) rotate([90, 0, 0]) cylinder(h=wall*2, r=3, center=true);\n    }\n}\n\n// Torso section with shelves\nmodule torso() {\n    // Main torso block\n    difference() {\n        cube([base_width*0.8, base_depth*0.7, overall_height*0.5], center=true);\n        \n        // Hollow center\n        translate([0, 0, 5]) cube([base_width*0.8-wall*2, base_depth*0.7-wall*2, overall_height*0.5-wall*2], center=true);\n        \n        // Shelf openings\n        for (i = [1:3]) {\n            translate([0, -base_depth*0.35, overall_height*0.25 - i*30]) \n                cube([base_width*0.8-wall*2, wall*2, 25], center=true);\n        }\n    }\n    \n    // Actual shelves\n    for (i = [1:3]) {\n        translate([0, 0, overall_height*0.25 - i*30 + 12]) \n            cube([base_width*0.8-wall*2, base_depth*0.7-wall*2, wall], center=true);\n    }\n}\n\n// Head section with top storage\nmodule head() {\n    difference() {\n        // Head block\n        translate([0, 0, overall_height*0.75]) \n            cube([base_width*0.6, base_depth*0.5, overall_height*0.25], center=true);\n        \n        // Storage compartment\n        translate([0, 0, overall_height*0.75]) \n            cube([base_width*0.6-wall*2, base_depth*0.5-wall*2, overall_height*0.2], center=true);\n        \n        // Access opening in front\n        translate([0, -base_depth*0.25+wall, overall_height*0.75]) \n            cube([base_width*0.6-wall*2, wall, overall_height*0.15], center=true);\n    }\n}\n\n// Decorative columns as arms\nmodule columns() {\n    offset = base_width*0.5 + 5;\n    \n    for (side = [-1, 1]) {\n        translate([side*offset, 0, overall_height*0.4]) {\n            difference() {\n                // Column body\n                cylinder(h=overall_height*0.6, r=4, center=true);\n                \n                // Hollow column\n                translate([0, 0, -wall]) cylinder(h=overall_height*0.6+wall*2, r=4-wall, center=true);\n            }\n            \n            // Column base\n            translate([0, 0, overall_height*0.1]) \n                cylinder(h=10, r=6, center=true);\n            \n            // Column capital\n            translate([0, 0, overall_height*0.7]) \n                cylinder(h=8, r=5, center=true);\n        }\n    }\n}\n\n// Back support brace\nmodule brace() {\n    translate([0, base_depth*0.35, overall_height*0.4]) {\n        difference() {\n            cube([base_width*0.9, wall*2, overall_height*0.6], center=true);\n            translate([0, 0, -wall]) cube([base_width*0.9-wall*2, wall*2, overall_height*0.6+wall*2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, 10]) torso();\n    head();\n    columns();\n    brace();\n}",
    "renders": true
  },
  {
    "natural_object": "leviathan",
    "openscad_code": "// Leviathan Bookend - Oceanic furniture piece\n// Combines whale tail anatomy with functional book support\n\n$fn = 32;\n\nmodule tail_base() {\n    // Main tail support block\n    difference() {\n        // Central mass\n        translate([0, 0, 10]) cube([80, 20, 20], center=true);\n        \n        // Carved channels for water flow aesthetic\n        for(i = [-1:1]) {\n            translate([i*25, 0, 20]) rotate([0, 90, 0])\n                cylinder(h=40, d1=8, d2=12);\n        }\n    }\n}\n\nmodule tail_fin() {\n    // Primary fluke structure\n    translate([0, 0, 20]) {\n        difference() {\n            // Curved upper surface\n            hull() {\n                translate([-35, 0, 0]) sphere(d=25);\n                translate([35, 0, 0]) sphere(d=25);\n                translate([0, -15, 8]) sphere(d=15);\n            }\n            \n            // Hollow underside\n            translate([0, 5, -5]) cube([70, 20, 15], center=true);\n        }\n    }\n}\n\nmodule fin_details() {\n    // Ridge details on tail\n    for(pos = [-20, 0, 20]) {\n        translate([pos, -8, 25]) rotate([0, -30, 0])\n            scale([1, 0.3, 1]) cylinder(h=15, d=6);\n    }\n    \n    // Scalloped edges\n    for(i = [-1:1]) {\n        translate([i*30, -15, 18]) rotate([90, 0, 0])\n            cylinder(h=10, d1=12, d2=8);\n    }\n}\n\nmodule book_support() {\n    // Back support panel\n    translate([0, 15, 35]) {\n        difference() {\n            cube([70, 3, 50], center=true);\n            // Weight reduction cutouts\n            for(x = [-20, 0, 20]) {\n                translate([x, 0, 15]) cube([15, 4, 20], center=true);\n            }\n        }\n    }\n}\n\nmodule base_feet() {\n    // Stabilizing feet with barnacle texture\n    for(x = [-30, 30]) {\n        translate([x, 0, 0]) {\n            difference() {\n                cylinder(h=10, d=15);\n                // Texture holes\n                for(i = [0:5]) {\n                    rotate([0, 0, i*60]) \n                        translate([5, 0, 5]) sphere(d=3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Structural elements\n    base_feet();\n    tail_base();\n    book_support();\n    \n    // Decorative elements\n    tail_fin();\n    fin_details();\n    \n    // Additional stability ridge\n    translate([0, 12, 0]) \n        cube([85, 6, 8], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "kraken",
    "openscad_code": "// Kraken Tentacle Side Table\n// A functional side table with kraken tentacles as legs and decorative elements\n// Size: 120mm diameter, 450mm height\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\ntable_top_d = 120;\ntable_top_h = 8;\ntentacle_r = 12;\ntentacle_segments = 5;\nwall_thickness = 2;\n\n// Main table structure\nmodule kraken_table() {\n    // Table top with octopus texture\n    difference() {\n        union() {\n            // Main circular top\n            cylinder(h=table_top_h, d=table_top_d, $fn=64);\n            \n            // Raised rim\n            translate([0, 0, table_top_h-2])\n                cylinder(h=4, d1=table_top_d, d2=table_top_d+8, $fn=64);\n        }\n        \n        // Suction cup indents on top surface\n        for(i = [0:7]) {\n            angle = i * 45;\n            r = table_top_d/2 - 15;\n            translate([r*cos(angle), r*sin(angle), 2])\n                sphere(d=8, $fn=20);\n        }\n    }\n    \n    // Central tentacle support\n    tentacle_leg([0, 0, -table_top_h], 180, 0, 60);\n    \n    // Three curved tentacle legs\n    for(i = [0:2]) {\n        angle = i * 120;\n        x = cos(angle) * 35;\n        y = sin(angle) * 35;\n        tentacle_leg([x, y, -table_top_h], 180, angle*2, 120);\n    }\n    \n    // Decorative small tentacles on rim\n    for(i = [0:11]) {\n        angle = i * 30;\n        x = cos(angle) * (table_top_d/2 - 8);\n        y = sin(angle) * (table_top_d/2 - 8);\n        rotate([0, 0, angle])\n            translate([x, y, table_top_h])\n                small_tentacle();\n    }\n}\n\n// Single tentacle leg\nmodule tentacle_leg(start_pos, length, twist, bend) {\n    translate(start_pos)\n        rotate([0, bend, twist])\n            tentacle_shape(length);\n}\n\n// Create tentacle with suckers\nmodule tentacle_shape(length) {\n    segments = tentacle_segments;\n    segment_length = length / segments;\n    \n    for(i = [0:segments-1]) {\n        // Main tentacle segment\n        translate([0, 0, -i*segment_length])\n            cylinder(h=segment_length, \n                    r1=tentacle_r - i*1.2, \n                    r2=tentacle_r - (i+1)*1.2);\n        \n        // Suction cups on tentacle\n        for(j = [0:2]) {\n            cup_z = -i*segment_length - segment_length/2 - j*15;\n            cup_angle = j * 120 + i * 30;\n            cup_r = tentacle_r*0.8 - i*0.5;\n            \n            rotate([0, 90, cup_angle])\n                translate([cup_r, 0, cup_z])\n                    sucker();\n        }\n    }\n    \n    // Curved tip\n    translate([0, 0, -length])\n        sphere(d=tentacle_r*1.5);\n}\n\n// Single sucker\nmodule sucker() {\n    difference() {\n        sphere(d=6);\n        translate([0, 0, 1])\n            sphere(d=4);\n    }\n}\n\n// Small decorative tentacle\nmodule small_tentacle() {\n    rotate([90, 0, 0])\n        cylinder(h=15, r1=4, r2=2);\n}\n\n// Assembly\nkraken_table();\n\n// Base plate for stability\ntranslate([0, 0, -180])\n    difference() {\n        // Main base\n        cylinder(h=8, d=80, $fn=6);\n        \n        // Weight reduction holes\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n                translate([25, 0, -1])\n                    cylinder(h=10, d=12);\n        }\n    }",
    "renders": true
  },
  {
    "natural_object": "hydra",
    "openscad_code": "// Hydra-inspired stool\n// Realistic style, medium complexity\n// Overall height: 120 mm, diameter: 140 mm\n\nmodule leg_segment(r, h) {\n    // Single tapered leg segment\n    cylinder(h = h, r1 = r, r2 = r * 0.8, $fn = 24);\n}\n\nmodule hydra_leg() {\n    // Build one hydra neck/leg from stacked segments\n    union() {\n        translate([0, 0, 0]) leg_segment(12, 25);\n        translate([0, 0, 25]) leg_segment(10, 20);\n        translate([0, 0, 45]) leg_segment(8, 15);\n        translate([0, 0, 60]) leg_segment(6, 15);\n    }\n}\n\nmodule foot() {\n    // Wide foot for stability\n    difference() {\n        cylinder(h = 6, r = 15, $fn = 32);\n        translate([0, 0, -0.1]) cylinder(h = 6.2, r = 12, $fn = 32);\n    }\n}\n\nmodule seat() {\n    // Round seat with slight dome\n    difference() {\n        union() {\n            cylinder(h = 10, r = 70, $fn = 64);\n            translate([0, 0, 10]) scale([1, 1, 0.3]) sphere(r = 70, $fn = 64);\n        }\n        // Central hole for weight reduction\n        translate([0, 0, -1]) cylinder(h = 12, r = 10, $fn = 32);\n    }\n}\n\nmodule hydra_head() {\n    // Stylized head with open mouth\n    union() {\n        sphere(r = 8, $fn = 24);\n        // Snout\n        translate([0, 8, 0]) scale([0.8, 1, 0.8]) sphere(r = 6, $fn = 24);\n        // Mouth cavity\n        translate([0, 12, -2]) difference() {\n            cube([8, 6, 4], center = true);\n            sphere(r = 3, $fn = 16);\n        }\n    }\n}\n\nmodule full_leg() {\n    // Complete leg assembly with foot and head\n    union() {\n        hydra_leg();\n        translate([0, 0, -6]) foot();\n        translate([0, 0, 75]) hydra_head();\n        // Neck frill\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) \n                translate([5, 0, 70]) \n                    scale([1, 0.3, 0.1]) \n                        sphere(r = 5, $fn = 16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat\n    translate([0, 0, 90]) seat();\n    \n    // Five hydra legs at 72 degree intervals\n    for(i = [0:4]) {\n        angle = i * 72;\n        radius = 50;\n        translate([cos(angle) * radius, sin(angle) * radius, 0]) {\n            rotate([15, 0, angle + 90]) full_leg();\n        }\n    }\n    \n    // Central support column\n    difference() {\n        cylinder(h = 90, r = 15, $fn = 32);\n        // Hollow center\n        translate([0, 0, -1]) cylinder(h = 92, r = 12, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "golem",
    "openscad_code": "// Golem Stool - A sturdy stone golem-shaped stool\n// Height: 100mm, suitable for 3D printing\n// Wall thickness: 2mm for all structural elements\n\n$fn = 32;\n\n// Main module for the golem stool\nmodule golem_stool() {\n    // Base platform\n    difference() {\n        cube([80, 80, 10], center = true);\n        translate([0, 0, 5]) cube([76, 76, 10], center = true);\n    }\n    \n    // Golem body - central pillar\n    translate([0, 0, 55]) {\n        // Main torso block\n        difference() {\n            cube([50, 40, 90], center = true);\n            translate([0, 0, 5]) cube([46, 36, 90], center = true);\n        }\n        \n        // Head section\n        translate([0, 0, 55]) {\n            difference() {\n                cube([45, 35, 30], center = true);\n                translate([0, 0, 5]) cube([41, 31, 30], center = true);\n            }\n        }\n        \n        // Arm joints - left and right\n        for (side = [-1, 1]) {\n            translate([side * 27, 0, 20]) {\n                // Shoulder joint\n                rotate([0, 90, 0]) cylinder(h = 8, r1 = 12, r2 = 12);\n                \n                // Upper arm\n                translate([side * 15, 0, 0]) {\n                    rotate([0, 90, 0]) cylinder(h = 30, r1 = 8, r2 = 8);\n                    \n                    // Forearm\n                    translate([side * 15, 0, 0]) {\n                        rotate([0, 90, 0]) cylinder(h = 25, r1 = 7, r2 = 7);\n                        \n                        // Hand support (leg)\n                        translate([side * 12, 0, -12]) {\n                            rotate([0, 0, 90]) cylinder(h = 20, r1 = 6, r2 = 6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Leg supports - four corners\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * 30, y * 30, 5]) {\n                difference() {\n                    cylinder(h = 90, r1 = 15, r2 = 12);\n                    translate([0, 0, -1]) cylinder(h = 92, r1 = 13, r2 = 10);\n                }\n                \n                // Foot detail\n                translate([0, 0, -5]) {\n                    difference() {\n                        cube([20, 20, 8], center = true);\n                        translate([0, 0, 4]) cube([16, 16, 8], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Seat top\n    translate([0, 0, 100]) {\n        difference() {\n            cube([70, 70, 15], center = true);\n            translate([0, 0, 7.5]) cube([66, 66, 15], center = true);\n        }\n        \n        // Golem face details on seat\n        translate([0, 0, 8]) {\n            // Eyes\n            for (eye = [-15, 15]) {\n                translate([eye, 10, 0]) {\n                    cylinder(h = 3, r1 = 5, r2 = 5);\n                }\n            }\n            \n            // Mouth line\n            translate([0, -10, 0]) {\n                cube([30, 3, 3], center = true);\n            }\n            \n            // Stone texture lines\n            for (i = [-20:10:20]) {\n                translate([i, 0, 0]) {\n                    rotate([90, 0, 0]) cylinder(h = 60, r1 = 0.5, r2 = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Create the golem stool\ngolem_stool();",
    "renders": true
  },
  {
    "natural_object": "construct",
    "openscad_code": "// Realistic Construct Furniture – Modular Tool-Trolley (medium complexity, 3D-printable)\n// Overall footprint: 100 mm x 60 mm x 110 mm (LxWxH)\n\n$fn = 32;          // Smooth circles for realistic look\nwall = 2;          // Uniform wall thickness for 3D printing\n\nmodule frame() {\n    // Main rectangular frame made from 4x vertical posts + 4x horizontal rails\n    for(x=[0,100-8])      // posts at left & right\n        for(z=[0,110-8])  // bottom & top\n            translate([x,0,z]) cube([8,60,8], center=false);\n\n    for(y=[0,60-8])       // front & back rails\n        for(z=[0,110-8])\n            translate([0,y,z]) cube([100,8,8], center=false);\n}\n\nmodule shelf(h=45) {      // Shelf at height h with 2 mm thick plate\n    difference() {\n        translate([wall,h,wall]) cube([100-wall*2,60-wall*2,wall], center=false);\n        // Lightening grid pattern – 3x2 grid\n        for(i=[1:3])\n            for(j=[1:2])\n                translate([i*25-12.5,h+0.1,j*20-10])\n                    cube([20,19,wall+0.2], center=true);\n    }\n}\n\nmodule drawer(height=20) {\n    // Full assembly: box + front panel + handle\n    union() {\n        // Drawer box – overhang-free\n        difference() {\n            translate([wall,0,wall]) cube([100-wall*2,54-wall*2,height-wall], center=false);\n            translate([4,height/2+1,4]) cube([100-wall*2-8,height-6,54-wall*2-8], center=false);\n        }\n        // Front panel\n        translate([0,-wall,height-wall]) cube([100,wall+2,height], center=false);\n        // Handle – ergonomic cylinder\n        translate([50,-wall-1,height/2-wall]) rotate([90,0,0])\n            cylinder(h=30, d=6, center=true);\n    }\n}\n\nmodule caster() {\n    // Simple swivel caster with 8 mm wheel\n    union() {\n        // Fork\n        translate([0,0,4]) cylinder(h=8, d=8, center=true);\n        // Wheel\n        translate([0,0,4]) rotate([90,0,0])\n            cylinder(h=6, d=12, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    frame();\n    shelf(h=30);\n    shelf(h=75);\n    translate([0,0,30]) drawer(height=20);\n    translate([0,0,50]) drawer(height=20);\n    // Four casters under bottom frame\n    for(x=[10,90])\n        for(y=[10,50])\n            translate([x,y,-6]) caster();\n}",
    "renders": true
  },
  {
    "natural_object": "juggernaut",
    "openscad_code": "// Juggernaut Coffee Table (realistic style, medium complexity)\nmodule leg(x,y,angle) {\n    translate([x,y,0])\n    rotate([0,0,angle])\n    union() {\n        // Main leg post\n        cube([8,8,120], center=true);\n        \n        // Top bracket\n        translate([0,0,60])\n        cube([20,20,6], center=true);\n        \n        // Bottom foot\n        translate([0,0,-60])\n        cube([12,12,8], center=true);\n        \n        // Reinforcement gusset\n        translate([0,-5,30])\n        cube([4,10,60], center=true);\n    }\n}\n\nmodule top_surface() {\n    difference() {\n        // Main tabletop\n        cube([200,120,20], center=true);\n        \n        // Chamfer edges\n        translate([0,0,8])\n        cube([196,116,20], center=true);\n        \n        // Center detail groove\n        translate([0,0,9])\n        cube([180,2,2], center=true);\n    }\n}\n\nmodule lower_shelf() {\n    difference() {\n        // Shelf\n        cube([160,100,15], center=true);\n        \n        // Cutouts for legs\n        for (x=[-65,65])\n            for (y=[-35,35])\n                translate([x,y,-7.5])\n                cube([12,12,20], center=true);\n    }\n}\n\nmodule support_bar() {\n    difference() {\n        // Cross support\n        cube([180,15,8], center=true);\n        \n        // Lightening holes\n        for (i=[-3:3])\n            translate([i*25,0,0])\n            cylinder(h=10, r=4, center=true, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Tabletop\n    translate([0,0,130])\n    top_surface();\n    \n    // Lower shelf\n    translate([0,0,65])\n    lower_shelf();\n    \n    // Four legs\n    leg(-70,-40,0);\n    leg(70,-40,0);\n    leg(-70,40,0);\n    leg(70,40,0);\n    \n    // Side support bars\n    translate([0,-40,97])\n    rotate([90,0,0])\n    support_bar();\n    \n    translate([0,40,97])\n    rotate([90,0,0])\n    support_bar();\n    \n    // Front/back support bars\n    translate([-70,0,97])\n    rotate([90,90,0])\n    support_bar();\n    \n    translate([70,0,97])\n    rotate([90,90,0])\n    support_bar();\n    \n    // Corner brackets\n    for (x=[-70,70])\n        for (y=[-40,40])\n            translate([x,y,130])\n            difference() {\n                cube([10,10,6], center=true);\n                translate([0,0,-3])\n                cylinder(h=12, r=3, center=true, $fn=16);\n            }\n}",
    "renders": true
  },
  {
    "natural_object": "maverick",
    "openscad_code": "// Maverick Rocking Chair\n// A bold, asymmetric rocking chair with off-center elements and unexpected angles\n\n// Overall dimensions: 120mm tall, 80mm wide, 100mm deep\n\n$fn = 32;\n\nmodule chair_base() {\n    // Main seat platform - slightly tilted\n    translate([0, 0, 60]) rotate([5, 0, 3]) cube([70, 55, 4], center = true);\n    \n    // Offset back support post\n    translate([-25, 0, 85]) rotate([15, 0, 0]) cylinder(h = 45, r = 6);\n    \n    // Front support post - shorter and angled\n    translate([30, 0, 45]) rotate([-10, 0, 5]) cylinder(h = 35, r = 5);\n}\n\nmodule backrest() {\n    // Asymmetric backrest with cutouts\n    difference() {\n        // Main backrest panel\n        translate([-30, 0, 95]) rotate([15, 0, 0]) cube([50, 45, 3], center = true);\n        \n        // Decorative cutouts\n        for(i = [0:2]) {\n            translate([-40 + i*15, -10, 95]) rotate([15, 0, 0]) cylinder(h = 5, r = 4);\n            translate([-40 + i*15, 10, 95]) rotate([15, 0, 0]) cylinder(h = 5, r = 4);\n        }\n    }\n}\n\nmodule rockers() {\n    // Left rocker - curved base\n    difference() {\n        translate([-40, -27, 25]) rotate([90, 0, 0]) \n            cylinder(h = 80, r1 = 35, r2 = 35);\n        // Cut for flat bottom contact\n        translate([-40, -27, 0]) cube([80, 54, 25], center = true);\n    }\n    \n    // Right rocker\n    difference() {\n        translate([-40, 27, 25]) rotate([90, 0, 0]) \n            cylinder(h = 80, r1 = 35, r2 = 35);\n        translate([-40, 27, 0]) cube([80, 54, 25], center = true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest - offset and angled\n    translate([-10, -32, 75]) rotate([0, 0, -15]) cube([45, 8, 2], center = true);\n    \n    // Right armrest - different height for asymmetry\n    translate([-5, 32, 78]) rotate([0, 0, 15]) cube([40, 8, 2], center = true);\n    \n    // Support struts\n    translate([5, -32, 60]) rotate([0, 0, 0]) cylinder(h = 15, r = 3);\n    translate([10, 32, 63]) rotate([0, 0, 0]) cylinder(h = 15, r = 3);\n}\n\nmodule cross_braces() {\n    // Front cross brace - angled\n    translate([15, 0, 35]) rotate([0, 90, -10]) cylinder(h = 50, r = 2.5);\n    \n    // Rear cross brace - different angle\n    translate([-15, 0, 45]) rotate([0, 90, 15]) cylinder(h = 50, r = 2.5);\n}\n\nmodule seat_cushion() {\n    // Cushion with rounded top\n    translate([0, 0, 63]) scale([1, 0.8, 0.3]) sphere(r = 30);\n    \n    // Cushion details - tufted buttons\n    for(x = [-20, 0, 20]) {\n        for(y = [-15, 0, 15]) {\n            translate([x, y, 72]) cylinder(h = 2, r = 3);\n        }\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_base();\n    backrest();\n    rockers();\n    armrests();\n    cross_braces();\n    seat_cushion();\n}",
    "renders": true
  },
  {
    "natural_object": "blitz",
    "openscad_code": "// Blitz-style bookshelf / sideboard (mid-century modern inspired)\n// Overall size: 100mm wide × 200mm high × 50mm deep\n// Wall thickness: 2mm throughout for 3D-printability\n\n// Main body\ndifference() {\n    // Outer shell\n    cube([100, 200, 50], center = true);\n    \n    // Hollow interior\n    translate([0, 0, 2])\n        cube([96, 196, 46], center = true);\n}\n\n// Bottom shelf\ntranslate([0, -80, 0])\n    cube([96, 2, 46], center = true);\n\n// Middle shelf\ntranslate([0, 0, 0])\n    cube([96, 2, 46], center = true);\n\n// Top shelf\ntranslate([0, 80, 0])\n    cube([96, 2, 46], center = true);\n\n// Vertical dividers\nmodule divider(y_pos) {\n    translate([0, y_pos, 0])\n        cube([2, 118, 46], center = true);\n}\n\n// Create three compartments\ndivider(-50);\ndivider(50);\n\n// Tapered legs (blitz characteristic)\nmodule leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, -100]) {\n        cylinder(h = 100, r1 = 4, r2 = 2, $fn = 8);\n    }\n}\n\n// Four legs\nleg(-45, -90);\nleg(45, -90);\nleg(-45, 90);\nleg(45, 90);\n\n// Back panel (adds structure and hides wall mounting)\ntranslate([0, 0, -25])\n    cube([100, 200, 2], center = true);\n\n// Door handles (simple cylindrical pulls)\nmodule handle(x_pos, y_pos) {\n    translate([x_pos, y_pos, 24]) {\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 3, $fn = 16);\n    }\n}\n\n// Front doors with handles\ntranslate([-24, -70, 0]) {\n    cube([46, 136, 2], center = true);\n    handle(-20, 0);\n}\n\ntranslate([24, -70, 0]) {\n    cube([46, 136, 2], center = true);\n    handle(20, 0);\n}\n\n// Ventilation holes in back panel\nfor (i = [-80:20:80]) {\n    for (j = [-40:10:40]) {\n        translate([j, i, -24])\n            cube([4, 8, 4], center = true);\n    }\n}\n\n// Shelf pin holes for adjustability\nmodule pin_holes() {\n    for (z = [-90:10:90]) {\n        translate([48, z, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 2, r = 1, $fn = 8);\n    }\n}\n\n// Add pin holes on both sides\npin_holes();\nmirror([1, 0, 0])\n    pin_holes();",
    "renders": true
  },
  {
    "natural_object": "fury",
    "openscad_code": "// Fury Chair - Realistic Style\n// A medium-complexity 3D printable chair with organic fury textures\n\n// Chair dimensions (mm)\nchair_width = 80;\nchair_depth = 75;\nchair_height = 100;\nseat_height = 45;\nback_height = 55;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Create fur texture using small cylinders\nmodule fur_strand(x, y, z, angle, length) {\n    translate([x, y, z]) {\n        rotate([0, angle, 0]) {\n            cylinder(h = length, r1 = 0.5, r2 = 0.3, $fn = 8);\n        }\n    }\n}\n\n// Generate fur texture on a surface\nmodule fur_surface(start_x, start_y, start_z, width, depth, density) {\n    for (i = [0:density:width]) {\n        for (j = [0:density:depth]) {\n            x_pos = start_x + i;\n            y_pos = start_y + j;\n            strand_length = 1.5 + (sin(i*0.5)*0.5) + (cos(j*0.3)*0.5);\n            angle = 70 + sin(i*0.8)*15;\n            fur_strand(x_pos, y_pos, start_z, angle, strand_length);\n        }\n    }\n}\n\n// Chair legs with paw feet\nmodule chair_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        // Main leg structure\n        difference() {\n            cylinder(h = seat_height, r = 4, $fn = 12);\n            translate([0, 0, -1])\n                cylinder(h = seat_height + 2, r = 3, $fn = 12);\n        }\n        \n        // Paw foot\n        translate([0, 0, -3]) {\n            sphere(r = 5.5, $fn = 16);\n            // Toe details\n            for (angle = [30:120:120]) {\n                rotate([0, 0, angle]) {\n                    translate([3.5, 0, -1]) {\n                        sphere(r = 1.2, $fn = 8);\n                    }\n                }\n            }\n        }\n        \n        // Fur texture on leg\n        fur_surface(-4, -4, seat_height - 2, 8, 8, 2);\n    }\n}\n\n// Chair seat with cushion shape\nmodule chair_seat() {\n    translate([0, 0, seat_height]) {\n        // Seat base\n        difference() {\n            cube([chair_width - 10, chair_depth - 10, 8], center = true);\n            translate([0, 0, 1])\n                cube([chair_width - 14, chair_depth - 14, 8], center = true);\n        }\n        \n        // Cushion top\n        translate([0, 0, 8]) {\n            cube([chair_width - 12, chair_depth - 12, 6], center = true);\n            // Rounded edges\n            translate([0, 0, 3])\n                minkowski() {\n                    cube([chair_width - 16, chair_depth - 16, 0.1], center = true);\n                    cylinder(h = 0.1, r = 3, $fn = 16);\n                }\n        }\n        \n        // Fur texture on seat\n        fur_surface(-(chair_width - 10)/2, -(chair_depth - 10)/2, 14, chair_width - 10, chair_depth - 10, 3);\n    }\n}\n\n// Chair back with ears\nmodule chair_back() {\n    translate([0, -(chair_depth - 10)/2 - 2, seat_height + 4]) {\n        // Main backrest\n        difference() {\n            cube([chair_width - 15, 4, back_height], center = true);\n            translate([0, 1, 0])\n                cube([chair_width - 19, 4, back_height - 4], center = true);\n        }\n        \n        // Curved top\n        translate([0, 0, back_height/2 + 2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = chair_width - 15, r = back_height/2, center = true, $fn = 30);\n            }\n        }\n        \n        // Left ear\n        translate([-(chair_width - 15)/2 + 5, 2, back_height - 5]) {\n            rotate([0, -20, 0]) {\n                difference() {\n                    scale([1, 0.8, 1.5]) sphere(r = 8, $fn = 16);\n                    translate([0, 0, -5]) cube([15, 15, 10], center = true);\n                }\n            }\n        }\n        \n        // Right ear\n        translate([(chair_width - 15)/2 - 5, 2, back_height - 5]) {\n            rotate([0, 20, 0]) {\n                difference() {\n                    scale([1, 0.8, 1.5]) sphere(r = 8, $fn = 16);\n                    translate([0, 0, -5]) cube([15, 15, 10], center = true);\n                }\n            }\n        }\n        \n        // Fur texture on back\n        fur_surface(-(chair_width - 15)/2, -2, 0, chair_width - 15, 4, 2);\n    }\n}\n\n// Tail support bar\nmodule tail_support() {\n    translate([0, (chair_depth - 10)/2 + 5, seat_height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = (chair_depth - 10)/2 + 5, r = 3, $fn = 12);\n                translate([0, 0, -1])\n                    cylinder(h = (chair_depth - 10)/2 + 7, r = 2, $fn = 12);\n            }\n            \n            // Tail curl\n            translate([0, (chair_depth - 10)/2 + 5, 0]) {\n                rotate([90, 0, 0]) {\n                    for (i = [0:10:180]) {\n                        rotate([0, 0, i]) {\n                            translate([15*cos(i*0.01745), 15*sin(i*0.01745), 0]) {\n                                sphere(r = 3, $fn = 8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    chair_leg(-(chair_width/2 - 10), -(chair_depth/2 - 10));\n    chair_leg((chair_width/2 - 10), -(chair_depth/2 - 10));\n    chair_leg(-(chair_width/2 - 10), (chair_depth/2 - 10));\n    chair_leg((chair_width/2 - 10), (chair_depth/2 - 10));\n    \n    // Seat\n    chair_seat();\n    \n    // Backrest with ears\n    chair_back();\n    \n    // Tail support\n    tail_support();\n}",
    "renders": true
  },
  {
    "natural_object": "storm",
    "openscad_code": "// Storm Cloud Shelf\n// A wall-mounted shelf shaped like a stylized storm cloud with lightning bolt brackets\n// Dimensions: 120mm wide x 80mm tall x 40mm deep\n\n$fn = 32;  // Smooth curves\n\n// Wall thickness\nwall = 2;\n\n// Main cloud body\nmodule cloud_body() {\n    // Main puffy sections\n    union() {\n        // Central mass\n        translate([0, 0, 0])\n            scale([1, 0.7, 0.5])\n            sphere(30);\n        \n        // Left puff\n        translate([-25, 5, 5])\n            scale([0.8, 0.8, 0.6])\n            sphere(20);\n        \n        // Right puff\n        translate([25, 0, 5])\n            scale([0.9, 0.7, 0.6])\n            sphere(25);\n        \n        // Top puff\n        translate([0, -20, 10])\n            scale([0.7, 0.6, 0.5])\n            sphere(18);\n    }\n}\n\n// Hollowed cloud shelf\nmodule cloud_shelf() {\n    difference() {\n        cloud_body();\n        \n        // Interior cavity\n        scale([0.85, 0.85, 0.8])\n        translate([0, 0, -5])\n        cloud_body();\n        \n        // Front opening\n        translate([0, -15, 15])\n            cube([90, 30, 20], center=true);\n        \n        // Mounting holes for wall screws (5mm diameter)\n        translate([-30, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=5);\n        translate([30, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=5);\n    }\n}\n\n// Lightning bolt bracket\nmodule lightning_bracket() {\n    // Main bolt shape\n    translate([0, 0, 20])\n    linear_extrude(height=wall)\n    polygon(points=[\n        [0, 0],\n        [3, -8],\n        [-2, -8],\n        [2, -16],\n        [-1, -16],\n        [4, -25],\n        [1, -25],\n        [-4, -15],\n        [1, -15],\n        [-3, -7],\n        [1, -7],\n        [-2, 0]\n    ]);\n}\n\n// Lightning bracket with mounting hole\nmodule bracket_with_hole() {\n    difference() {\n        lightning_bracket();\n        translate([0, -12.5, wall/2])\n            rotate([90, 0, 0])\n            cylinder(h=wall+1, d=3);\n    }\n}\n\n// Shelf assembly\nmodule storm_shelf() {\n    // Main cloud shelf\n    cloud_shelf();\n    \n    // Lightning brackets (3 for support)\n    translate([0, -50, 0])\n        bracket_with_hole();\n    \n    translate([-40, -45, 0])\n        scale([0.8, 0.8, 1])\n        bracket_with_hole();\n    \n    translate([40, -45, 0])\n        scale([0.8, 0.8, 1])\n        mirror([1, 0, 0])\n        bracket_with_hole();\n    \n    // Shelf floor support ribs\n    for (x = [-30:15:30]) {\n        translate([x, 0, -15])\n            cube([wall, 40, wall]);\n    }\n    \n    // Rain drop details (decorative)\n    for (i = [1:8]) {\n        angle = i * 45;\n        r = 35 + (i % 2) * 10;\n        translate([r * cos(angle), r * sin(angle), 0])\n            scale([1, 1, 1.5])\n            sphere(2);\n    }\n}\n\n// Render the shelf\nstorm_shelf();",
    "renders": true
  },
  {
    "natural_object": "thunder",
    "openscad_code": "// Thunder-shaped side table\n// Overall dimensions: 100mm x 80mm x 450mm\n\n// Table parameters\nthunder_width = 100;\nthunder_depth = 80;\nthunder_height = 450;\nwall_thickness = 2;\n\n// Thunder bolt shape module\nmodule thunder_bolt() {\n    // Main bolt body with furniture proportions\n    union() {\n        // Top table surface (flat top for functionality)\n        translate([0, 0, thunder_height - 8])\n            cube([thunder_width, thunder_depth, 8], center = true);\n        \n        // Vertical stem (main support)\n        translate([0, 0, thunder_height/2 - 30])\n            cube([wall_thickness * 4, wall_thickness * 3, thunder_height - 60], center = true);\n        \n        // First zig-zag segment\n        translate([-25, 0, thunder_height - 120])\n            cube([50, wall_thickness * 3, 15], center = true);\n        \n        // Second zig-zag segment\n        translate([25, 0, thunder_height - 180])\n            cube([50, wall_thickness * 3, 15], center = true);\n        \n        // Third zig-zag segment\n        translate([-25, 0, thunder_height - 240])\n            cube([50, wall_thickness * 3, 15], center = true);\n        \n        // Fourth zig-zag segment\n        translate([25, 0, thunder_height - 300])\n            cube([50, wall_thickness * 3, 15], center = true);\n        \n        // Base support structure\n        translate([0, 0, 15])\n            cube([thunder_width * 0.8, thunder_depth * 0.8, 30], center = true);\n    }\n}\n\n// Reinforcement joints module\nmodule joints() {\n    // Corner brackets for structural support\n    for(i = [-1, 1]) {\n        translate([i * 40, 0, thunder_height - 50])\n            rotate([0, 0, 45])\n            cube([wall_thickness * 2, wall_thickness * 2, 30], center = true);\n    }\n}\n\n// Decorative edge details\nmodule edge_details() {\n    // Rounded edge profile along table top\n    for(x = [-45:5:45]) {\n        translate([x, 0, thunder_height - 4])\n            cylinder(h = 8, r = 2, $fn = 8);\n    }\n}\n\n// Base with non-slip pads\nmodule base_pads() {\n    for(x = [-30, 30]) {\n        for(y = [-25, 25]) {\n            translate([x, y, 5])\n                cylinder(h = 5, r = 5, $fn = 16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core thunder structure\n    thunder_bolt();\n    \n    // Structural reinforcements\n    joints();\n    \n    // Furniture details\n    edge_details();\n    \n    // Base pads\n    base_pads();\n}",
    "renders": true
  },
  {
    "natural_object": "lightning",
    "openscad_code": "// Lightning Bolt Bookshelf\n// A wall-mounted bookshelf shaped like a lightning bolt with 3 shelves\n// Overall dimensions: 120mm wide x 140mm tall x 120mm deep\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main lightning bolt shape\nmodule lightning_bolt() {\n    difference() {\n        // Main bolt body\n        union() {\n            // Vertical stem\n            translate([0, 0, 60]) cube([30, 120, 4], center=true);\n            \n            // Upper diagonal\n            rotate([0, 0, 30]) translate([15, 40, 60]) cube([70, 4, 4], center=true);\n            \n            // Middle zigzag\n            rotate([0, 0, -30]) translate([-15, 10, 60]) cube([70, 4, 4], center=true);\n            \n            // Lower diagonal\n            rotate([0, 0, 30]) translate([15, -20, 60]) cube([70, 4, 4], center=true);\n            \n            // Bottom vertical\n            translate([0, -50, 60]) cube([30, 60, 4], center=true);\n        }\n        \n        // Cutout inner space for shelves\n        translate([0, 0, 60]) cube([26, 116, 5], center=true);\n        rotate([0, 0, 30]) translate([15, 40, 60]) cube([66, 5, 5], center=true);\n        rotate([0, 0, -30]) translate([-15, 10, 60]) cube([66, 5, 5], center=true);\n        rotate([0, 0, 30]) translate([15, -20, 60]) cube([66, 5, 5], center=true);\n        translate([0, -50, 60]) cube([26, 56, 5], center=true);\n    }\n}\n\n// Shelf supports\nmodule shelf_supports() {\n    // Upper shelf supports\n    translate([25, 35, 30]) cube([4, 4, 60], center=true);\n    translate([-25, 35, 30]) cube([4, 4, 60], center=true);\n    \n    // Middle shelf supports\n    translate([25, 5, 30]) cube([4, 4, 60], center=true);\n    translate([-25, 5, 30]) cube([4, 4, 60], center=true);\n    \n    // Lower shelf supports\n    translate([25, -25, 30]) cube([4, 4, 60], center=true);\n    translate([-25, -25, 30]) cube([4, 4, 60], center=true);\n}\n\n// Shelf panels\nmodule shelves() {\n    // Upper shelf\n    translate([0, 35, 56]) cube([60, 30, 2], center=true);\n    \n    // Middle shelf\n    translate([0, 5, 56]) cube([60, 30, 2], center=true);\n    \n    // Lower shelf\n    translate([0, -25, 56]) cube([60, 30, 2], center=true);\n}\n\n// Wall mounting brackets\nmodule mounting_brackets() {\n    for(i = [-1, 1]) {\n        translate([i * 20, -60, 100]) {\n            difference() {\n                cube([8, 10, 20], center=true);\n                translate([0, -3, 5]) cylinder(h=10, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    lightning_bolt();\n    shelf_supports();\n    shelves();\n    mounting_brackets();\n}",
    "renders": true
  },
  {
    "natural_object": "blaze",
    "openscad_code": "// Blaze Chair - Realistic Style, Medium Complexity\n// A wooden chair inspired by the Blaze mob from Minecraft\n\n// Dimensions (mm)\nchair_height = 100;\nseat_height = 45;\nseat_width = 50;\nseat_depth = 50;\nback_height = 55;\nleg_thickness = 8;\n\n// Blaze rods as legs and back supports\nmodule blaze_rod(height, radius) {\n    difference() {\n        cylinder(h=height, r=radius, $fn=16);\n        // Add texture with small cuts\n        for(i = [0:5:height-5]) {\n            translate([0, 0, i])\n                cylinder(h=2, r=radius+0.5, $fn=16);\n        }\n    }\n}\n\n// Blaze rod connector\nmodule rod_connector() {\n    difference() {\n        cylinder(h=4, r=leg_thickness, $fn=8);\n        // Central hole for weight reduction\n        cylinder(h=5, r=leg_thickness-2, $fn=8);\n    }\n}\n\n// Seat panel with blaze pattern\nmodule blaze_seat() {\n    difference() {\n        // Main seat\n        cube([seat_width, seat_depth, 4], center=true);\n        \n        // Blaze face pattern\n        translate([-15, 0, 2])\n            cube([10, 2, 4]);\n        translate([15, 0, 2])\n            cube([10, 2, 4]);\n        translate([0, -8, 2])\n            cube([25, 2, 4]);\n        translate([0, 8, 2])\n            cube([25, 2, 4]);\n    }\n}\n\n// Backrest with blaze rods\nmodule blaze_backrest() {\n    union() {\n        // Central blaze face\n        translate([0, 0, back_height/2])\n            cube([seat_width-10, 4, back_height], center=true);\n        \n        // Side blaze rods\n        translate([-seat_width/2+5, 0, back_height/2])\n            blaze_rod(back_height, leg_thickness);\n        translate([seat_width/2-5, 0, back_height/2])\n            blaze_rod(back_height, leg_thickness);\n    }\n}\n\n// Blaze rods flames (decorative)\nmodule small_flame() {\n    translate([0, 0, 3])\n    difference() {\n        sphere(r=3, $fn=8);\n        translate([0, 0, -1])\n            cube([6, 6, 4], center=true);\n    }\n}\n\n// Main chair assembly\nmodule blaze_chair() {\n    union() {\n        // Four legs\n        translate([-seat_width/2+leg_thickness, -seat_depth/2+leg_thickness, seat_height/2])\n            blaze_rod(seat_height, leg_thickness);\n        translate([seat_width/2-leg_thickness, -seat_depth/2+leg_thickness, seat_height/2])\n            blaze_rod(seat_height, leg_thickness);\n        translate([-seat_width/2+leg_thickness, seat_depth/2-leg_thickness, seat_height/2])\n            blaze_rod(seat_height, leg_thickness);\n        translate([seat_width/2-leg_thickness, seat_depth/2-leg_thickness, seat_height/2])\n            blaze_rod(seat_height, leg_thickness);\n        \n        // Seat\n        translate([0, 0, seat_height+2])\n            blaze_seat();\n        \n        // Backrest\n        translate([0, -seat_depth/2+2, seat_height+2+back_height/2])\n            blaze_backrest();\n        \n        // Decorative rods between legs\n        translate([-seat_width/2+leg_thickness, 0, seat_height/4])\n            rod_connector();\n        translate([seat_width/2-leg_thickness, 0, seat_height/4])\n            rod_connector();\n        translate([0, -seat_depth/2+leg_thickness, seat_height/4])\n            rotate([0, 0, 90])\n                rod_connector();\n        translate([0, seat_depth/2-leg_thickness, seat_height/4])\n            rotate([0, 0, 90])\n                rod_connector();\n        \n        // Small flames on backrest\n        for(i = [-1:1]) {\n            translate([i*10, -seat_depth/2+2, seat_height+2+back_height-5])\n                small_flame();\n        }\n    }\n}\n\n// Render the chair\nblaze_chair();",
    "renders": true
  },
  {
    "natural_object": "ember",
    "openscad_code": "// Ember Furniture - Realistic Style Coffee Table\n// Dimensions: 120mm diameter x 45mm height\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 36;\n\n// Main parameters\ntable_diameter = 120;\ntable_height = 45;\nwall_thickness = 2;\nember_count = 5;\n\n// Ember cluster module\nmodule ember_cluster() {\n    // Base support ring\n    difference() {\n        cylinder(h = 3, d = table_diameter, center = true);\n        cylinder(h = 4, d = table_diameter - wall_thickness * 2, center = true);\n    }\n    \n    // Leg supports (3 legs for stability)\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([table_diameter/2 - 15, 0, -table_height/2 + 2])\n        cylinder(h = table_height - 4, d = 8, center = false);\n    }\n    \n    // Ember pieces\n    for (i = [0:ember_count-1]) {\n        rotate([0, 0, i * (360/ember_count) + 15])\n        translate([table_diameter/3, 0, -table_height/2 + 6])\n        scale([1, 1.2, 0.8])\n        ember_piece();\n    }\n}\n\n// Individual ember piece\nmodule ember_piece() {\n    // Main ember body - irregular oval shape\n    difference() {\n        // Outer shell\n        scale([1, 0.7, 0.5])\n        sphere(d = 25);\n        \n        // Hollow center\n        scale([0.8, 0.5, 0.3])\n        sphere(d = 25);\n    }\n    \n    // Glowing core\n    translate([0, 0, -2])\n    scale([0.6, 0.4, 0.2])\n    color(\"orange\")\n    sphere(d = 15);\n    \n    // Surface cracks\n    for (j = [0:3]) {\n        rotate([0, 0, j * 90 + 45])\n        translate([5, 0, 0])\n        scale([8, 1, 0.5])\n        cube([1, 1, 1], center = true);\n    }\n}\n\n// Table top surface\nmodule table_top() {\n    // Main table surface\n    difference() {\n        cylinder(h = wall_thickness, d = table_diameter);\n        cylinder(h = wall_thickness + 1, d = table_diameter - wall_thickness * 2);\n    }\n    \n    // Ember texture on top\n    for (i = [0:8]) {\n        rotate([0, 0, i * 40])\n        translate([table_diameter/3, 0, -wall_thickness/2])\n        scale([0.8, 0.8, 0.3])\n        sphere(d = 12);\n    }\n}\n\n// Assembly\ntranslate([0, 0, table_height/2])\ntable_top();\n\ntranslate([0, 0, table_height/2 - wall_thickness/2])\nember_cluster();",
    "renders": true
  },
  {
    "natural_object": "frost",
    "openscad_code": "// Frost-inspired chair with crystalline structure\n// Dimensions: 100mm height, 60mm width, 50mm depth\n\n$fn = 32;\n\n// Main chair module\nmodule frost_chair() {\n    // Chair base - crystalline structure\n    union() {\n        // Seat platform - hexagonal crystal formation\n        translate([0, 0, 45])\n            rotate([0, 0, 30])\n            linear_extrude(height=3, center=true)\n                circle(d=50);\n        \n        // Seat support crystals\n        for(i=[-20, 0, 20]) {\n            translate([i, -20, 22])\n                crystal_support();\n        }\n        \n        // Backrest - branching frost pattern\n        translate([0, 25, 65])\n            frost_backrest();\n        \n        // Legs - tapered ice columns\n        translate([-20, -25, 0])\n            rotate([0, 0, -5])\n            ice_leg(45);\n        translate([20, -25, 0])\n            rotate([0, 0, 5])\n            ice_leg(45);\n        translate([-20, 25, 0])\n            rotate([0, 0, 5])\n            ice_leg(45);\n        translate([20, 25, 0])\n            rotate([0, 0, -5])\n            ice_leg(45);\n        \n        // Armrests - curved ice formations\n        translate([-30, 0, 55])\n            rotate([0, 15, 0])\n            ice_armrest();\n        translate([30, 0, 55])\n            rotate([0, -15, 0])\n            mirror([1, 0, 0])\n            ice_armrest();\n    }\n}\n\n// Ice crystal support structure\nmodule crystal_support() {\n    // Central crystal column\n    union() {\n        cylinder(h=20, d1=8, d2=12, center=true);\n        \n        // Branching crystals\n        for(angle=[0:60:300]) {\n            rotate([0, 0, angle])\n            translate([7, 0, 5])\n            rotate([0, 30, 0])\n            scale([1, 0.5, 1])\n            cylinder(h=10, d1=3, d2=5, center=true);\n        }\n    }\n}\n\n// Frost backrest with branching pattern\nmodule frost_backrest() {\n    difference() {\n        // Main back panel\n        translate([0, 0, 0])\n            rotate([0, 15, 0])\n            scale([1, 0.1, 1])\n            cube([50, 3, 40], center=true);\n        \n        // Frost pattern cutouts\n        for(x=[-20:10:20]) {\n            for(y=[-15:10:15]) {\n                translate([x, 0, y])\n                    rotate([0, 0, 45])\n                    scale([0.8, 1, 0.8])\n                    cylinder(h=5, d=6, center=true);\n            }\n        }\n    }\n}\n\n// Tapered ice leg with crystal texture\nmodule ice_leg(height) {\n    difference() {\n        // Main leg\n        cylinder(h=height, d1=6, d2=8, center=false);\n        \n        // Crystal growth rings\n        for(i=[5:5:height-5]) {\n            translate([0, 0, i])\n                rotate([0, 0, 45])\n                scale([1.1, 1.1, 0.5])\n                cylinder(h=2, d=9, center=true);\n        }\n    }\n}\n\n// Curved armrest formation\nmodule ice_armrest() {\n    difference() {\n        // Main armrest shape\n        hull() {\n            translate([0, -15, 0])\n                sphere(d=12);\n            translate([0, 15, 5])\n                sphere(d=10);\n        }\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 2])\n            scale([0.6, 0.6, 0.6])\n            hull() {\n                translate([0, -15, 0])\n                    sphere(d=12);\n                translate([0, 15, 5])\n                    sphere(d=10);\n            }\n    }\n}\n\n// Generate the chair\nfrost_chair();",
    "renders": true
  },
  {
    "natural_object": "ice",
    "openscad_code": "// Ice Chair - Realistic Style with Medium Complexity\n// Dimensions: 100mm width x 100mm depth x 110mm height\n\n// Module for rounded edges using cylinders and spheres\nmodule rounded_edge(w, h, d, r) {\n    hull() {\n        translate([r, r, r]) sphere(r = r);\n        translate([w - r, r, r]) sphere(r = r);\n        translate([r, r, h - r]) sphere(r = r);\n        translate([w - r, r, h - r]) sphere(r = r);\n        translate([r, d - r, r]) sphere(r = r);\n        translate([w - r, d - r, r]) sphere(r = r);\n        translate([r, d - r, h - r]) sphere(r = r);\n        translate([w - r, d - r, h - r]) sphere(r = r);\n    }\n}\n\n// Module for ice crystal texture pattern\nmodule ice_texture(size, count) {\n    for (i = [0:count]) {\n        for (j = [0:count]) {\n            translate([\n                i * (size / count) + (i % 2) * 2,\n                j * (size / count) + (j % 2) * 2,\n                0\n            ]) {\n                scale([1, 1, 0.3])\n                sphere(r = 1.5);\n            }\n        }\n    }\n}\n\n// Chair seat with rounded edges and thickness\nmodule seat() {\n    difference() {\n        union() {\n            // Main seat block\n            rounded_edge(100, 100, 8, 8);\n            \n            // Front edge detail\n            translate([10, 0, -2]) cube([80, 5, 4]);\n        }\n        \n        // Hollow center for material savings\n        translate([10, 10, 2]) cube([80, 80, 6]);\n    }\n}\n\n// Chair back with ice crystal details\nmodule backrest() {\n    difference() {\n        union() {\n            // Main backrest panel\n            rounded_edge(100, 8, 80, 6);\n            \n            // Crystalline details\n            for (i = [1:3]) {\n                translate([15 + i * 25, 4, 20 + i * 15]) {\n                    rotate([0, 0, 45 * i])\n                    scale([1, 0.3, 1])\n                    cube([20, 3, 4], center = true);\n                }\n            }\n        }\n        \n        // Cutouts for ice block appearance\n        for (i = [1:2]) {\n            translate([25 + i * 30, 4, 30]) {\n                rotate([0, 0, 30])\n                cube([15, 10, 40], center = true);\n            }\n        }\n    }\n}\n\n// Chair leg with structural support\nmodule leg(x, y) {\n    difference() {\n        union() {\n            // Main leg\n            translate([x, y, 0]) {\n                rounded_edge(10, 10, 50, 3);\n            }\n            \n            // Support brace\n            translate([x + 2, y + 2, 20]) {\n                cube([6, 6, 2]);\n            }\n        }\n        \n        // Hollow core\n        translate([x + 2, y + 2, 2]) {\n            cube([6, 6, 46]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, 50]) {\n        seat();\n        \n        // Add ice texture on top\n        translate([0, 0, 8]) {\n            ice_texture(100, 8);\n        }\n    }\n    \n    // Backrest\n    translate([0, 92, 58]) {\n        rotate([90, 0, 0]) {\n            backrest();\n        }\n    }\n    \n    // Four legs\n    leg(5, 5);\n    leg(85, 5);\n    leg(5, 85);\n    leg(85, 85);\n    \n    // Cross support beams\n    translate([5, 15, 25]) {\n        rounded_edge(90, 5, 5, 2);\n    }\n    translate([15, 5, 25]) {\n        rounded_edge(5, 70, 5, 2);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "shadow",
    "openscad_code": "// Shadow of a Mid-Century Modern Armchair\n// Overall printable shadow: 80mm wide × 85mm deep × 5mm thick\n// 2 mm wall thickness everywhere, no overhangs\n\nmodule chair_shadow() {\n    // Base shadow slab\n    difference() {\n        translate([0,0,-2.5]) cube([80,85,5], center=true);\n        \n        // Cut-outs for legs and negative space\n        // Front left leg hole\n        translate([-25,30,-2.5]) cylinder(h=5.2, r=4, $fn=20);\n        // Front right leg hole\n        translate([25,30,-2.5]) cylinder(h=5.2, r=4, $fn=20);\n        // Back left leg hole\n        translate([-25,-30,-2.5]) cylinder(h=5.2, r=4, $fn=20);\n        // Back right leg hole\n        translate([25,-30,-2.5]) cylinder(h=5.2, r=4, $fn=20);\n        \n        // Under-seat negative space\n        translate([0,5,-2.5]) cube([55,40,5.2], center=true);\n    }\n    \n    // Chair outline profile\n    // Backrest silhouette\n    translate([0,-37.5,0]) cube([50,5,2], center=true);\n    \n    // Armrests\n    translate([-30,0,0]) cube([5,50,2], center=true);\n    translate([30,0,0]) cube([5,50,2], center=true);\n    \n    // Seat pan shadow\n    translate([0,0,0]) cube([45,45,2], center=true);\n    \n    // Backrest slats (5 vertical slats)\n    for (i=[-20:10:20]) {\n        translate([i,-32.5,0]) cube([5,15,2], center=true);\n    }\n    \n    // Front stretcher shadow between legs\n    translate([0,25,0]) cube([40,5,2], center=true);\n    \n    // Side stretchers\n    translate([-35,0,0]) cube([5,55,2], center=true);\n    translate([35,0,0]) cube([5,55,2], center=true);\n    \n    // Subtle cushion shadow\n    difference() {\n        translate([0,0,0]) cube([40,40,1], center=true);\n        translate([0,0,0]) cube([38,38,2], center=true);\n    }\n}\n\nchair_shadow();",
    "renders": true
  },
  {
    "natural_object": "shade",
    "openscad_code": "// Realistic Medium-Complexity Shade Furniture – OpenSCAD\n// A small table-top umbrella shade (≈90 mm tall) with post and ribs\n\n$fa = 2; $fs = 0.5;\n\n// Overall scale factor – final height ≈90 mm\nscale_factor = 1;\n\n// Wall thickness for 3-D printing\nwall = 2;\n\nmodule shade() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n\n        // Central post\n        union() {\n            // Post cylinder\n            cylinder(h = 70, d = 8, $fn = 24);\n\n            // Post base disk for stability\n            translate([0, 0, -2])\n                cylinder(h = 4, d = 18, $fn = 24);\n        }\n\n        // Hub at top of post\n        translate([0, 0, 70])\n            cylinder(h = 6, d = 10, $fn = 24);\n\n        // Umbrella canopy\n        difference() {\n            // Main canopy shell – slightly domed\n            translate([0, 0, 76])\n                scale([1, 1, 0.35])\n                sphere(d = 80, $fn = 48);\n\n            // Hollow inside\n            translate([0, 0, 78])\n                scale([1, 1, 0.33])\n                sphere(d = 80 - 2*wall, $fn = 48);\n        }\n\n        // Ribs (8-fold symmetry)\n        for (a = [0:45:315]) {\n            rotate([0, 0, a])\n                translate([0, 0, 76])\n                    rotate([90, 0, 0])\n                        // Rib cross-section 2×2 mm\n                        linear_extrude(height = 38, center = false)\n                            square([2, 2], center = true);\n        }\n\n        // Tip cap\n        translate([0, 0, 76 + 14])\n            sphere(d = 6, $fn = 16);\n    }\n}\n\nshade();",
    "renders": true
  },
  {
    "natural_object": "nova",
    "openscad_code": "// Nova-inspired coffee table\n// Realistic style, medium complexity\n// Dimensions: ~120mm diameter, 45mm height\n\n$fn = 64;\n\n// Main table top - nova burst pattern\nmodule table_top() {\n    // Central circular top\n    difference() {\n        cylinder(h = 8, r = 50, center = true);\n        translate([0, 0, -1])\n            cylinder(h = 10, r = 48, center = true);\n    }\n    \n    // Nova rays extending from center\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([35, 0, 0])\n                cube([40, 6, 6], center = true);\n    }\n    \n    // Inner ring detail\n    translate([0, 0, -2])\n        difference() {\n            cylinder(h = 4, r = 35, center = true);\n            translate([0, 0, -1])\n                cylinder(h = 6, r = 33, center = true);\n        }\n}\n\n// Triangular legs with nova flare details\nmodule leg() {\n    // Main leg structure\n    difference() {\n        cube([8, 8, 35], center = true);\n        translate([0, 0, 15])\n            cube([6, 6, 32], center = true);\n    }\n    \n    // Nova flare at base\n    translate([0, 0, -20])\n        difference() {\n            cylinder(h = 5, r = 10, center = true);\n            translate([0, 0, -1])\n                cylinder(h = 7, r = 8, center = true);\n        }\n    \n    // Support strut\n    translate([0, 0, -10])\n        rotate([45, 0, 0])\n            cube([4, 4, 15], center = true);\n}\n\n// Central support column\nmodule central_support() {\n    // Main column\n    difference() {\n        cylinder(h = 25, r = 12, center = true);\n        translate([0, 0, -1])\n            cylinder(h = 27, r = 10, center = true);\n    }\n    \n    // Decorative nova rings\n    for (j = [1:3]) {\n        translate([0, 0, -12 + j * 8])\n            difference() {\n                cylinder(h = 2, r = 15, center = true);\n                translate([0, 0, -1])\n                    cylinder(h = 4, r = 13, center = true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, 20])\n        table_top();\n    \n    // Central support\n    translate([0, 0, 7.5])\n        central_support();\n    \n    // Three legs at 120 degree intervals\n    for (k = [0:2]) {\n        rotate([0, 0, k * 120])\n            translate([35, 0, 0])\n                leg();\n    }\n    \n    // Lower support ring connecting legs\n    translate([0, 0, -15])\n        difference() {\n            cylinder(h = 4, r = 45, center = true);\n            translate([0, 0, -1])\n                cylinder(h = 6, r = 43, center = true);\n        }\n}",
    "renders": true
  },
  {
    "natural_object": "comet",
    "openscad_code": "// Comet Lounge Chair - Realistic Style\n// Medium complexity furniture piece inspired by a comet\n// Overall dimensions: 120mm x 60mm x 80mm\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\ncomet_length = 120;\ncomet_width = 60;\ncomet_height = 80;\nwall_thickness = 2;\nseat_height = 45;\n\n// Main comet body (seat and backrest)\nmodule comet_body() {\n    // Comet nucleus as seat\n    difference() {\n        // Main seat ellipsoid\n        scale([1.2, 0.8, 0.4])\n        translate([0, 0, seat_height])\n        sphere(r=comet_width/2);\n        \n        // Hollow out for seating\n        scale([1.1, 0.7, 0.3])\n        translate([0, 0, seat_height+5])\n        sphere(r=comet_width/2 - wall_thickness);\n    }\n    \n    // Comet tail as backrest support\n    for(i = [0:5]) {\n        rotate([0, 0, -30 + i*12])\n        translate([comet_length/3 - i*8, 0, seat_height + 15 + i*3])\n        scale([0.8 - i*0.1, 0.3, 0.2])\n        cylinder(h=40 - i*5, r1=comet_width/4, r2=comet_width/8);\n    }\n}\n\n// Comet tail structure (backrest)\nmodule comet_tail() {\n    // Main tail curve\n    for(i = [0:8]) {\n        rotate([0, -10 - i*2, 0])\n        translate([comet_length/2 - i*6, 0, seat_height + 25 + i*2])\n        scale([1 - i*0.08, 0.7 - i*0.05, 0.3 - i*0.02])\n        sphere(r=comet_width/2.5);\n    }\n    \n    // Tail reinforcement ribs\n    for(i = [0:3]) {\n        rotate([0, -20 - i*15, 0])\n        translate([comet_length/2 - 15 - i*15, 0, seat_height + 30 + i*5])\n        scale([1, 0.1, 0.5])\n        cube([20, wall_thickness*2, 10]);\n    }\n}\n\n// Support legs (meteor fragments)\nmodule support_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([comet_length/4, side*comet_width/3, seat_height/2])\n        rotate([0, 10, 0])\n        cylinder(h=seat_height - wall_thickness, r1=wall_thickness*2, r2=wall_thickness*3);\n        \n        translate([comet_length/4, side*comet_width/3, wall_thickness])\n        sphere(r=wall_thickness*2.5);\n    }\n    \n    // Rear support (larger fragment)\n    translate([-comet_length/4, 0, seat_height/2])\n    rotate([0, -15, 0])\n    cylinder(h=seat_height - wall_thickness, r1=wall_thickness*3, r2=wall_thickness*4);\n    \n    translate([-comet_length/4, 0, wall_thickness])\n    sphere(r=wall_thickness*3.5);\n}\n\n// Surface details (craters and texture)\nmodule surface_details() {\n    // Craters on seat\n    for(i = [0:4]) {\n        angle = i*72;\n        radius = 8 + i*2;\n        translate([cos(angle)*radius, sin(angle)*radius*0.6, seat_height + 2])\n        scale([1, 0.7, 0.3])\n        sphere(r=wall_thickness*1.5);\n    }\n    \n    // Tail surface texture\n    for(i = [0:15]) {\n        angle = i*24;\n        radius = 20 + i*3;\n        translate([comet_length/2 - 10 - i*3, cos(angle)*5, seat_height + 25 + i*2])\n        sphere(r=wall_thickness*0.8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    comet_body();\n    comet_tail();\n    support_legs();\n    \n    // Structural reinforcements\n    // Seat to tail connection\n    translate([comet_length/4, 0, seat_height + 20])\n    rotate([0, -30, 0])\n    scale([1, 0.6, 0.4])\n    cylinder(h=30, r1=wall_thickness*3, r2=wall_thickness*2);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([0, side*comet_width/2.5, seat_height + 15])\n        rotate([0, 0, side*20])\n        scale([0.5, 0.3, 1])\n        cylinder(h=25, r1=wall_thickness*2, r2=wall_thickness);\n    }\n    \n    // Surface details\n    surface_details();\n}",
    "renders": true
  },
  {
    "natural_object": "meteor",
    "openscad_code": "// Meteor Coffee Table\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter, 55mm height\n\nmodule meteor_table() {\n    // Table top - irregular meteor surface\n    difference() {\n        // Main top slab\n        scale([1, 0.9, 1])\n        cylinder(h=8, d=120, $fn=64);\n        \n        // Crater depressions\n        for (i = [0:12]) {\n            rotate([0, 0, i*30 + (i%3)*15])\n            translate([25 + (i*3)%20, 0, -1])\n            scale([1 + (i%4)*0.2, 1 + (i%5)*0.15, 1])\n            sphere(d=8 + (i*2)%6);\n        }\n        \n        // Central impact crater\n        translate([0, 0, -2])\n        scale([1.2, 1, 0.8])\n        sphere(d=25);\n    }\n    \n    // Underside structure\n    difference() {\n        translate([0, 0, -15])\n        cylinder(h=15, d=118, $fn=64);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -14])\n        cylinder(h=14, d=110, $fn=64);\n    }\n    \n    // Support legs - meteor fragments\n    module meteor_leg(x, y, angle, scale) {\n        translate([x, y, -40])\n        rotate([0, 0, angle]) {\n            scale([scale, scale, scale])\n            union() {\n                // Main leg body\n                difference() {\n                    scale([1, 0.7, 1])\n                    cylinder(h=30, d=20, $fn=32);\n                    \n                    // Natural erosion patterns\n                    for (j = [0:4]) {\n                        rotate([0, 0, j*72])\n                        translate([8 + j, 0, -5])\n                        sphere(d=6 + j*2);\n                    }\n                }\n                \n                // Base pad\n                translate([0, 0, -15])\n                scale([1.3, 1.3, 0.5])\n                cylinder(h=3, d=20, $fn=32);\n            }\n        }\n    }\n    \n    // Position four legs\n    meteor_leg(35, 25, 15, 0.9);\n    meteor_leg(-30, 30, -25, 1.0);\n    meteor_leg(-35, -20, 45, 0.85);\n    meteor_leg(30, -35, -35, 0.95);\n    \n    // Surface texture - raised bumps\n    for (i = [0:30]) {\n        angle = i*137.5;\n        radius = 15 + (i*3)%40;\n        translate([cos(angle)*radius, sin(angle)*radius, 8])\n        sphere(d=2 + (i%3));\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, -7])\n    difference() {\n        cylinder(h=4, d=116, $fn=64);\n        cylinder(h=4, d=112, $fn=64);\n    }\n}\n\n// Render the meteor table\nmeteor_table();",
    "renders": true
  },
  {
    "natural_object": "galaxy",
    "openscad_code": "// Galaxy Coffee Table - Realistic Style\n// A functional coffee table with swirling galactic arms forming the base and a flat top with embedded star patterns\n\n// Overall dimensions\ntable_top_d = 220;\ntable_top_h = 12;\ntable_height = 450;\nbase_core_r = 40;\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\n// Module for star patterns on table top\nmodule star(x, y, size) {\n    translate([x, y, table_top_h - size/2]) \n        sphere(d=size, $fn=8);\n}\n\n// Module for galactic spiral arm\nmodule spiral_arm(rot, scale, length, width) {\n    rotate([0, 0, rot])\n    linear_extrude(height=table_height - table_top_h)\n    for(i=[0:length]) {\n        angle = i * 8;\n        radius = i * scale * 2;\n        translate([cos(angle) * radius, sin(angle) * radius, 0])\n            scale([1 - i/length * 0.3, width * (1 - i/length * 0.5), 1])\n                circle(d=width * 2, $fn=16);\n    }\n}\n\n// Table top with star field\nmodule table_top() {\n    difference() {\n        // Main top surface\n        cylinder(h=table_top_h, d=table_top_d, $fn=64);\n        \n        // Hollow out center\n        translate([0, 0, wall_t])\n            cylinder(h=table_top_h, d=table_top_d - wall_t*2, $fn=64);\n    }\n    \n    // Star field pattern\n    color(\"gold\")\n    for(i=[0:45]) {\n        star(\n            (rand(i*2)-0.5) * table_top_d/2 * 0.8,\n            (rand(i*3)-0.5) * table_top_d/2 * 0.8,\n            rand(i*5) * 3 + 1\n        );\n    }\n}\n\n// Central core connecting top to base\nmodule central_core() {\n    difference() {\n        cylinder(h=table_height - table_top_h, r=base_core_r, $fn=32);\n        translate([0, 0, wall_t])\n            cylinder(h=table_height - table_top_h - wall_t, r=base_core_r - wall_t, $fn=32);\n    }\n}\n\n// Galactic base structure\nmodule galactic_base() {\n    // Core cylinder for strength\n    central_core();\n    \n    // Four spiral arms for stability\n    for(arm=[0:3]) {\n        spiral_arm(arm * 90, 2.5, 25, 15);\n    }\n    \n    // Support rings for printability\n    for(z=[1:5]) {\n        translate([0, 0, z * 80])\n            difference() {\n                cylinder(h=wall_t, r=base_core_r + 20 + z * 5, $fn=32);\n                cylinder(h=wall_t, r=base_core_r + 20 + z * 5 - wall_t, $fn=32);\n            }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0])\n    table_top();\n\ntranslate([0, 0, table_top_h])\n    galactic_base();",
    "renders": true
  },
  {
    "natural_object": "cosmos",
    "openscad_code": "// Cosmos Planter Stool - A dual-purpose furniture piece combining seating with a cosmic planter\n// Overall dimensions: 120mm diameter x 180mm height\n\n// Wall thickness constant\nwall = 2;\n\n// Main planter bowl - represents the cosmos\nmodule cosmos_bowl() {\n    difference() {\n        // Outer sphere for the cosmos\n        sphere(d = 120);\n        \n        // Hollow interior\n        sphere(d = 120 - wall*2);\n        \n        // Flat bottom for stability\n        translate([0, 0, -60])\n            cube([120, 120, 60], center = true);\n        \n        // Drainage hole\n        translate([0, 0, -58])\n            cylinder(h = 5, d = 8);\n    }\n}\n\n// Star pattern on the bowl surface\nmodule star_field() {\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([55, 0, 20 + sin(i) * 15])\n        sphere(d = 2);\n    }\n    \n    for(i = [0:20]) {\n        rotate([0, 0, i * 18])\n        translate([50, 0, -10 + cos(i) * 10])\n        sphere(d = 1.5);\n    }\n}\n\n// Support legs - rocket boosters as legs\nmodule booster_leg(height, angle) {\n    rotate([0, angle, 0])\n    translate([0, 0, height/2])\n    difference() {\n        // Main cylinder\n        cylinder(h = height, d = 20);\n        \n        // Hollow interior\n        cylinder(h = height, d = 20 - wall*2);\n        \n        // Base plate\n        translate([0, 0, -height/2])\n            cylinder(h = 5, d = 25);\n    }\n    \n    // Engine detail rings\n    for(i = [1:3]) {\n        rotate([0, angle, 0])\n        translate([0, 0, -height/2 + i * 15])\n        cylinder(h = 2, d = 22);\n    }\n}\n\n// Seating top with star pattern\nmodule seat_top() {\n    difference() {\n        // Main seat disk\n        cylinder(h = 15, d = 130);\n        \n        // Hollow center for planting\n        cylinder(h = 15, d = 100);\n        \n        // Comfort bevel\n        translate([0, 0, 15])\n            cylinder(h = 5, d1 = 100, d2 = 90);\n    }\n    \n    // Star pattern on seat edge\n    for(i = [0:20]) {\n        rotate([0, 0, i * 18])\n        translate([60, 0, 7.5])\n        sphere(d = 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bowl\n    translate([0, 0, 75])\n    cosmos_bowl();\n    \n    // Star field decoration\n    translate([0, 0, 75])\n    star_field();\n    \n    // Three support legs at 120 degree intervals\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([35, 0, 0])\n        booster_leg(75, 15);\n    }\n    \n    // Seating top\n    translate([0, 0, 150])\n    seat_top();\n    \n    // Reinforcement ring\n    translate([0, 0, 72])\n    cylinder(h = 6, d = 124);\n}",
    "renders": true
  },
  {
    "natural_object": "stardust",
    "openscad_code": "// Stardust-inspired side table (realistic style, medium complexity)\n// Overall dimensions: 200mm diameter, 450mm height\n// Wall thickness: 2mm throughout for 3D printing\n\nmodule starburst_base() {\n    difference() {\n        // Main circular base (200mm diameter, 10mm thick)\n        cylinder(h=10, d=200, $fn=64);\n        \n        // Central hole for cable management (40mm diameter)\n        translate([0, 0, -1])\n            cylinder(h=12, d=40, $fn=32);\n        \n        // Decorative star pattern cutouts\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([65, 0, 5])\n                    rotate([0, 0, 15])\n                        scale([1, 0.7, 1])\n                            cylinder(h=12, d=20, $fn=3);\n        }\n    }\n    \n    // Raised rim for structural support\n    difference() {\n        translate([0, 0, 10])\n            cylinder(h=5, d=196, $fn=64);\n        translate([0, 0, 10])\n            cylinder(h=6, d=192, $fn=64);\n    }\n}\n\nmodule tapered_column() {\n    // Main support column with star pattern texture\n    difference() {\n        // Tapered cylinder (bottom 120mm, top 80mm)\n        cylinder(h1=120, h2=80, h=400, $fn=64);\n        \n        // Internal hollow for weight reduction\n        translate([0, 0, -1])\n            cylinder(h1=116, h2=76, h=402, $fn=64);\n        \n        // Vertical star-shaped grooves (12 grooves)\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([45, 0, 200])\n                    rotate([0, 90, 0])\n                        cube([400, 6, 2], center=true);\n        }\n    }\n}\n\nmodule star_tabletop() {\n    difference() {\n        // Main tabletop (180mm diameter, 8mm thick)\n        translate([0, 0, 400])\n            cylinder(h=8, d=180, $fn=64);\n        \n        // Internal hollow for weight reduction\n        translate([0, 0, 399])\n            cylinder(h=10, d=176, $fn=64);\n        \n        // Star-shaped edge detail\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([85, 0, 404])\n                    rotate([0, 0, 15])\n                        scale([1, 0.5, 1])\n                            cylinder(h=6, d=15, $fn=3);\n        }\n    }\n    \n    // Raised lip to prevent items from sliding off\n    difference() {\n        translate([0, 0, 408])\n            cylinder(h=3, d=178, $fn=64);\n        translate([0, 0, 408])\n            cylinder(h=4, d=174, $fn=64);\n    }\n}\n\nmodule assembly_reinforcement() {\n    // Internal ribs for structural integrity\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, 200])\n                cube([4, 80, 200], center=true);\n    }\n}\n\n// Assemble the complete table\nunion() {\n    starburst_base();\n    tapered_column();\n    star_tabletop();\n    \n    // Add internal reinforcement\n    assembly_reinforcement();\n    \n    // Connection joints between components\n    translate([0, 0, 10])\n        cylinder(h=2, d=118, $fn=64);\n    translate([0, 0, 400])\n        cylinder(h=2, d=78, $fn=64);\n}",
    "renders": true
  },
  {
    "natural_object": "nebula",
    "openscad_code": "// Nebula-Inspired Coffee Table\n// Realistic style, medium complexity\n// Dimensions: 120mm x 80mm x 45mm (printable size)\n\n// Overall dimensions\ntable_length = 120;\ntable_width = 80;\ntable_height = 45;\nwall_thickness = 2;\n\nmodule nebula_base() {\n    // Main cloud-like base structure\n    difference() {\n        // Primary organic shape\n        union() {\n            // Central mass\n            translate([0, 0, table_height/4])\n                scale([1.2, 0.8, 0.6])\n                sphere(d=table_height*1.5, $fn=32);\n            \n            // Left extension\n            translate([-table_length/3, 0, table_height/3])\n                scale([0.8, 0.6, 0.4])\n                sphere(d=table_height*1.2, $fn=24);\n            \n            // Right extension\n            translate([table_length/3, 0, table_height/3])\n                scale([0.8, 0.6, 0.4])\n                sphere(d=table_height*1.2, $fn=24);\n        }\n        \n        // Hollow out interior for weight reduction\n        translate([0, 0, table_height/4])\n            scale([1.1, 0.7, 0.5])\n            sphere(d=table_height*1.4, $fn=32);\n    }\n}\n\nmodule table_top() {\n    // Nebula-inspired table surface with organic edges\n    hull() {\n        for (i = [0:5:360]) {\n            rotate([0, 0, i])\n            translate([\n                cos(i*3)*table_length/3 + table_length/2.5,\n                sin(i*2)*table_width/3 + table_width/2.5,\n                table_height\n            ])\n            sphere(d=wall_thickness*2, $fn=8);\n        }\n    }\n}\n\nmodule support_legs() {\n    // Four nebula-like support structures\n    positions = [\n        [table_length/3, table_width/3, 0],\n        [-table_length/3, table_width/3, 0],\n        [table_length/3, -table_width/3, 0],\n        [-table_length/3, -table_width/3, 0]\n    ];\n    \n    for (pos = positions) {\n        translate(pos) {\n            // Curved support column\n            union() {\n                for (h = [0:5:table_height-wall_thickness]) {\n                    t = h/table_height;\n                    scale([0.8-t*0.3, 0.8-t*0.3, 1])\n                    translate([0, 0, h])\n                    sphere(d=wall_thickness*3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\nmodule nebula_details() {\n    // Star-like decorative elements\n    for (i = [0:15:359]) {\n        a = i*7;\n        r = table_length/2.2 + sin(i*5)*10;\n        translate([\n            cos(a)*r,\n            sin(a)*r*0.6,\n            table_height + 2\n        ])\n        scale([0.5, 0.5, 1])\n        cylinder(h=wall_thickness, d=wall_thickness*1.5, $fn=6);\n    }\n    \n    // Dust cloud patterns on base\n    for (j = [0:20:359]) {\n        b = j*3;\n        r2 = table_length/3 + cos(j*4)*8;\n        translate([\n            cos(b)*r2,\n            sin(b)*r2*0.7,\n            table_height/2\n        ])\n        sphere(d=wall_thickness*1.2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main table structure\n    nebula_base();\n    table_top();\n    support_legs();\n    \n    // Decorative details\n    nebula_details();\n}",
    "renders": true
  },
  {
    "natural_object": "quantum",
    "openscad_code": "// Quantum Chair - Realistic Style\n// A chair inspired by quantum superposition, featuring entangled frame elements\n// Print dimensions: 120mm x 110mm x 150mm\n\n// Overall dimensions\nchair_width = 120;\nchair_depth = 110;\nchair_height = 150;\nseat_height = 75;\nleg_thickness = 8;\n\n// Module for quantum-inspired leg structure\nmodule quantum_leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0]) {\n        rotate([0, 0, angle]) {\n            // Main leg cylinder\n            cylinder(h=seat_height, r=leg_thickness/2, $fn=16);\n            \n            // Quantum interference pattern rings\n            for(i=[1:3:seat_height]) {\n                translate([0, 0, i]) {\n                    rotate([90, 0, 0]) {\n                        scale([1.2, 1.2, 0.5]) \n                        torus(leg_thickness/2 + 1, 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Torus for quantum rings\nmodule torus(outer_r, inner_r) {\n    rotate_extrude($fn=32) {\n        translate([outer_r, 0, 0]) {\n            circle(r=inner_r, $fn=16);\n        }\n    }\n}\n\n// Seat surface with quantum foam texture\nmodule quantum_seat() {\n    // Main seat platform\n    translate([-chair_width/2, -chair_depth/2, seat_height]) {\n        // Base seat\n        cube([chair_width, chair_depth, 5]);\n        \n        // Quantum foam bumps\n        for(x=[-50:10:50]) {\n            for(y=[-45:10:45]) {\n                translate([x, y, 5]) {\n                    // Random quantum state bumps\n                    sphere(r=2 + sin(x*y)*1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Backrest with entangled support pattern\nmodule quantum_backrest() {\n    translate([-chair_width/2 + 10, -5, seat_height + 5]) {\n        // Main backrest panel\n        cube([chair_width - 20, 10, chair_height - seat_height - 5]);\n        \n        // Quantum entanglement supports\n        for(i=[0:20:chair_width-40]) {\n            translate([i, 5, 0]) {\n                // Diagonal support struts\n                rotate([0, -15, 0]) {\n                    cube([2, 10, chair_height - seat_height - 15]);\n                }\n            }\n        }\n        \n        // Wave pattern cutouts\n        for(z=[10:15:chair_height - seat_height - 20]) {\n            translate([5, 0, z]) {\n                rotate([0, 90, 0]) {\n                    linear_extrude(height=10) {\n                        polygon(points=[[0,0],[5,3],[10,0],[5,-3]]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Armrests with superposition supports\nmodule quantum_armrest(side) {\n    translate([side * (chair_width/2 - 15), 0, seat_height + 20]) {\n        // Armrest surface\n        cube([15, chair_depth - 20, 5]);\n        \n        // Superposition support structure\n        translate([7.5, (chair_depth - 20)/2, -20]) {\n            // Split support concept\n            rotate([0, -10 * side, 0]) {\n                cylinder(h=20, r=3, $fn=12);\n            }\n            rotate([0, 10 * side, 0]) {\n                cylinder(h=20, r=3, $fn=12);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs with quantum interference\n    quantum_leg(-chair_width/2 + 15, -chair_depth/2 + 15, 5);\n    quantum_leg(chair_width/2 - 15, -chair_depth/2 + 15, -5);\n    quantum_leg(-chair_width/2 + 15, chair_depth/2 - 15, -5);\n    quantum_leg(chair_width/2 - 15, chair_depth/2 - 15, 5);\n    \n    // Seat assembly\n    quantum_seat();\n    \n    // Backrest with entangled supports\n    quantum_backrest();\n    \n    // Armrests\n    quantum_armrest(1);\n    quantum_armrest(-1);\n}",
    "renders": true
  },
  {
    "natural_object": "block",
    "openscad_code": "// Realistic Block-Style Stool (Medium Complexity)\n// Dimensions: 300mm x 250mm x 450mm (scaled to 100mm height for printing)\n\n$fn = 32;\nscale_factor = 100/450;  // Scale to 100mm height for printing\n\nmodule stool() {\n    // Main seat block with rounded edges\n    difference() {\n        // Base seat block\n        translate([0, 0, 440*scale_factor])\n        minkowski() {\n            cube([280*scale_factor, 230*scale_factor, 20*scale_factor], center=true);\n            sphere(5*scale_factor);\n        }\n        \n        // Hollow out seat for weight reduction\n        translate([0, 0, 440*scale_factor])\n        cube([260*scale_factor, 210*scale_factor, 25*scale_factor], center=true);\n    }\n    \n    // Front left leg\n    translate([-110*scale_factor, -85*scale_factor, 220*scale_factor])\n    rounded_leg(40*scale_factor, 440*scale_factor);\n    \n    // Front right leg\n    translate([110*scale_factor, -85*scale_factor, 220*scale_factor])\n    rounded_leg(40*scale_factor, 440*scale_factor);\n    \n    // Back left leg\n    translate([-110*scale_factor, 85*scale_factor, 220*scale_factor])\n    rounded_leg(40*scale_factor, 440*scale_factor);\n    \n    // Back right leg\n    translate([110*scale_factor, 85*scale_factor, 220*scale_factor])\n    rounded_leg(40*scale_factor, 440*scale_factor);\n    \n    // Front stretcher bar\n    translate([0, -85*scale_factor, 110*scale_factor])\n    cube([200*scale_factor, 30*scale_factor, 20*scale_factor], center=true);\n    \n    // Side stretcher bars\n    translate([-110*scale_factor, 0, 110*scale_factor])\n    rotate([0, 0, 90])\n    cube([170*scale_factor, 30*scale_factor, 20*scale_factor], center=true);\n    \n    translate([110*scale_factor, 0, 110*scale_factor])\n    rotate([0, 0, 90])\n    cube([170*scale_factor, 30*scale_factor, 20*scale_factor], center=true);\n    \n    // Corner blocks for joints\n    for(x = [-1, 1])\n    for(y = [-1, 1])\n    translate([x*110*scale_factor, y*85*scale_factor, 440*scale_factor])\n    corner_block();\n    \n    // Wood grain texture on seat top\n    translate([0, 0, 455*scale_factor])\n    wood_grain(260*scale_factor, 210*scale_factor);\n}\n\nmodule rounded_leg(width, height) {\n    difference() {\n        // Main leg\n        minkowski() {\n            cube([width, width, height], center=true);\n            sphere(5*scale_factor);\n        }\n        \n        // Hollow leg for material saving\n        cube([width-4*scale_factor, width-4*scale_factor, height+10*scale_factor], center=true);\n    }\n}\n\nmodule corner_block() {\n    // Triangular support blocks under seat\n    difference() {\n        translate([0, 0, -10*scale_factor])\n        cube([30*scale_factor, 30*scale_factor, 20*scale_factor], center=true);\n        \n        // Remove center for weight\n        translate([5*scale_factor, 5*scale_factor, -10*scale_factor])\n        cube([20*scale_factor, 20*scale_factor, 25*scale_factor], center=true);\n    }\n}\n\nmodule wood_grain(width, depth) {\n    // Create wood grain pattern with small grooves\n    for(i = [-width/2:5*scale_factor:width/2]) {\n        translate([i, 0, -1*scale_factor])\n        cube([1*scale_factor, depth, 2*scale_factor], center=true);\n    }\n    \n    for(i = [-depth/2:5*scale_factor:depth/2]) {\n        translate([0, i, -1*scale_factor])\n        cube([width, 1*scale_factor, 2*scale_factor], center=true);\n    }\n}\n\n// Render the stool\nstool();",
    "renders": true
  },
  {
    "natural_object": "brick",
    "openscad_code": "// Brick Ottoman / Side Table\n// Overall footprint 120x120 mm, height 120 mm\n// Wall thickness 2 mm throughout, printable without supports\n\n$fn = 32;  // Smooth curves\n\nmodule brick_ottoman() {\n    // Main hollow brick body\n    difference() {\n        // Outer brick\n        translate([0, 0, 60])\n            cube([120, 120, 120], center = true);\n        // Inner cavity\n        translate([0, 0, 60])\n            cube([116, 116, 116], center = true);\n    }\n\n    // Top seating / table surface\n    difference() {\n        // Cushion pad (slightly domed)\n        translate([0, 0, 120])\n            scale([1, 1, 0.1])\n                sphere(d = 120);\n        // Remove underside dome\n        translate([0, 0, 120 - 2])\n            cube([122, 122, 10], center = true);\n    }\n\n    // Eight mortar grooves (four on each horizontal face)\n    module mortar_groove(x, y, rot) {\n        translate([x, y, 60])\n            rotate([0, 0, rot])\n                cube([120, 4, 4], center = true);\n    }\n    for (i = [-1, 1]) {\n        mortar_groove(i * 30, 0, 0);      // lengthwise\n        mortar_groove(0, i * 30, 90);     // crosswise\n    }\n\n    // Reinforcement ribs inside for stiffness\n    module rib(x, y, rot) {\n        translate([x, y, 60])\n            rotate([0, 0, rot])\n                cube([114, 2, 118], center = true);\n    }\n    rib(0, 0, 0);\n    rib(0, 0, 90);\n    rib(0, 0, 45);\n    rib(0, 0, -45);\n\n    // Four rounded feet / anti-slip pads\n    module foot(x, y) {\n        translate([x, y, -1])\n            cylinder(h = 4, d = 20, center = false);\n    }\n    foot(50, 50);\n    foot(-50, 50);\n    foot(50, -50);\n    foot(-50, -50);\n\n    // Optional handle recesses on sides\n    module handle_recess(x, y, rot) {\n        translate([x, y, 80])\n            rotate([0, 0, rot])\n                difference() {\n                    cube([40, 20, 30], center = true);\n                    translate([0, 0, 1])\n                        cube([36, 16, 30], center = true);\n                }\n    }\n    handle_recess(60, 0, 90);\n    handle_recess(-60, 0, 90);\n    handle_recess(0, 60, 0);\n    handle_recess(0, -60, 0);\n}\n\nbrick_ottoman();",
    "renders": true
  },
  {
    "natural_object": "lego",
    "openscad_code": "// LEGO-Style Office Chair - Realistic Medium Complexity\n// Approx 120 mm tall when printed\n\n// Parameters\nstud_d = 4.8;           // Standard LEGO stud diameter\nstud_h = 1.8;           // Standard LEGO stud height\nplate_h = 3.2;          // Standard plate thickness\nbrick_h = 9.6;          // Standard brick height\nwall_t = 2.0;           // Minimum wall thickness for printing\n\n// Chair dimensions in LEGO units\nchair_width = 10;       // studs\nchair_depth = 10;       // studs\nseat_height = 5;        // plates\nback_height = 12;       // plates\narmrest_height = 8;     // plates\n\n// Real scale factor\nscale_factor = 8;\n\n// Helper module for round corners\nmodule round_corner(r, h) {\n    difference() {\n        cube([r, r, h], center = false);\n        translate([r, r, 0])\n            cylinder(r = r, h = h, $fn = 16);\n    }\n}\n\n// LEGO stud module\nmodule lego_stud() {\n    cylinder(d = stud_d, h = stud_h, $fn = 16);\n}\n\n// LEGO plate/brick with studs on top\nmodule lego_block(width, depth, height, with_studs = true) {\n    // Main block\n    cube([width * stud_d, depth * stud_d, height * plate_h]);\n    \n    // Add studs if needed\n    if (with_studs) {\n        for (x = [0.5 : width - 1]) {\n            for (y = [0.5 : depth - 1]) {\n                translate([x * stud_d, y * stud_d, height * plate_h])\n                    lego_stud();\n            }\n        }\n    }\n    \n    // Hollow bottom with reinforcing ribs\n    translate([wall_t, wall_t, -0.1])\n        cube([(width * stud_d) - 2*wall_t, (depth * stud_d) - 2*wall_t, wall_t]);\n    \n    // Side ribs\n    for (x = [2 : 2 : width - 1]) {\n        translate([x * stud_d - wall_t/2, wall_t, -0.1])\n            cube([wall_t, (depth * stud_d) - 2*wall_t, wall_t]);\n    }\n    for (y = [2 : 2 : depth - 1]) {\n        translate([wall_t, y * stud_d - wall_t/2, -0.1])\n            cube([(width * stud_d) - 2*wall_t, wall_t, wall_t]);\n    }\n}\n\n// Chair seat base\nmodule chair_seat() {\n    lego_block(chair_width, chair_depth, seat_height, true);\n}\n\n// Chair backrest with ergonomic curve\nmodule chair_back() {\n    // Main backrest\n    lego_block(chair_width, 2, back_height, true);\n    \n    // Curved top edge\n    translate([0, 0, back_height * plate_h])\n        difference() {\n            cube([chair_width * stud_d, 2 * stud_d, 2 * plate_h]);\n            translate([chair_width * stud_d, 2 * stud_d, 0])\n                rotate([0, 90, 0])\n                    cylinder(r = 2 * stud_d, h = chair_width * stud_d, $fn = 20);\n        }\n}\n\n// Armrest assembly\nmodule armrest(side) {\n    // Vertical support\n    translate([side * (chair_width - 2) * stud_d, 0, 0])\n        lego_block(2, 2, armrest_height, true);\n    \n    // Horizontal armrest pad\n    translate([side * (chair_width - 3) * stud_d, -1 * stud_d, armrest_height * plate_h])\n        lego_block(4, 2, 2, true);\n}\n\n// Chair base with 5-star legs\nmodule chair_base() {\n    // Central column\n    lego_block(4, 4, 4, true);\n    \n    // 5-star legs\n    for (angle = [0 : 72 : 360]) {\n        rotate([0, 0, angle])\n            translate([2 * stud_d, -1 * stud_d, 0])\n                lego_block(8, 2, 1, false);\n    }\n    \n    // Caster wheels\n    for (angle = [36 : 72 : 360]) {\n        rotate([0, 0, angle])\n            translate([9 * stud_d, 0, 0])\n                sphere(d = 3 * stud_d, $fn = 16);\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    cylinder(d = 3 * stud_d, h = 8 * plate_h, $fn = 16);\n}\n\n// Complete chair assembly\nmodule office_chair() {\n    // Base\n    translate([chair_width * stud_d/2, chair_depth * stud_d/2, 0])\n        chair_base();\n    \n    // Gas lift\n    translate([chair_width * stud_d/2, chair_depth * stud_d/2, 4 * plate_h])\n        gas_lift();\n    \n    // Seat\n    translate([0, 0, 12 * plate_h])\n        chair_seat();\n    \n    // Backrest\n    translate([0, 2 * stud_d, 12 * plate_h])\n        chair_back();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}\n\n// Scale to realistic size and render\nscale([scale_factor, scale_factor, scale_factor])\n    office_chair();",
    "renders": true
  },
  {
    "natural_object": "column",
    "openscad_code": "// Column Furniture - Realistic Style with Medium Complexity\n// A 3D printable decorative column with structural joints and base\n\n// Overall dimensions (mm)\ncolumn_height = 120;\nbase_diameter = 40;\ntop_diameter = 35;\nwall_thickness = 2;\n\n// Base module with joints\nmodule column_base() {\n    // Main base cylinder\n    difference() {\n        cylinder(h=15, d=base_diameter, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h=14, d=base_diameter - wall_thickness*2, $fn=64);\n    }\n    \n    // Decorative base ring\n    translate([0, 0, 12])\n        difference() {\n            cylinder(h=5, d=base_diameter + 6, $fn=64);\n            cylinder(h=5, d=base_diameter + 2, $fn=64);\n        }\n    \n    // Joint holes for connecting to frame\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([base_diameter/2 + 2, 0, 7.5])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=3, $fn=16);\n    }\n}\n\n// Shaft with fluting details\nmodule column_shaft() {\n    // Main shaft\n    difference() {\n        cylinder(h=column_height - 30, d1=base_diameter - 4, d2=top_diameter - 2, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h=column_height - 32, d1=base_diameter - 4 - wall_thickness*2, d2=top_diameter - 2 - wall_thickness*2, $fn=64);\n    }\n    \n    // Fluting details\n    for(i = [0:19]) {\n        rotate([0, 0, i*18])\n            translate([(base_diameter - 4)/2 - 2, 0, 0])\n                cube([4, 1, column_height - 30], center=true);\n    }\n}\n\n// Capital (top) with mounting holes\nmodule column_capital() {\n    // Main capital\n    difference() {\n        cylinder(h=15, d=top_diameter + 8, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h=14, d=top_diameter + 4, $fn=64);\n    }\n    \n    // Top plate for mounting\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h=5, d=top_diameter + 12, $fn=64);\n            \n            // Mounting holes\n            for(i = [0:3]) {\n                rotate([0, 0, i*90 + 45])\n                    translate([top_diameter/2 + 2, 0, 2.5])\n                        rotate([0, 0, 0])\n                            cylinder(h=6, d=3.2, $fn=16);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    column_base();\n    translate([0, 0, 15]) column_shaft();\n    translate([0, 0, column_height - 15]) column_capital();\n}",
    "renders": true
  },
  {
    "natural_object": "slab",
    "openscad_code": "// Slab-style coffee table (realistic, medium complexity)\n// Dimensions: 100 x 60 x 35 mm (printable size)\n\n$fa = 2;\n$fs = 0.5;\n\n// Main tabletop slab\nmodule table_slab() {\n    difference() {\n        // Main slab body\n        cube([100, 60, 8], center=true);\n        \n        // Edge chamfers\n        translate([0,0,4]) \n            cube([96, 56, 8.1], center=true);\n        \n        // Underside recess for weight reduction\n        translate([0,0,-2]) \n            cube([90, 50, 4], center=true);\n    }\n}\n\n// Structural support legs (slab-style)\nmodule leg_pair(x_pos) {\n    // Main leg block\n    translate([x_pos, 0, -13.5]) \n        cube([4, 50, 27], center=true);\n    \n    // Front/back support ribs\n    for (y = [-22, 22]) {\n        translate([x_pos, y, -13.5]) \n            cube([8, 2, 27], center=true);\n    }\n    \n    // Side support ribs\n    translate([x_pos, 0, -13.5]) \n        cube([2, 46, 27], center=true);\n}\n\n// Hidden joinery blocks\nmodule joinery_block(x_pos) {\n    translate([x_pos, 0, 0]) {\n        difference() {\n            cube([8, 46, 4], center=true);\n            // Dowel holes\n            for (x = [-2, 2])\n                for (y = [-15, 0, 15])\n                    translate([x, y, 0])\n                        cylinder(h=5, r=1.5, center=true);\n        }\n    }\n}\n\n// Surface texture pattern\nmodule surface_texture() {\n    // Wood grain grooves\n    for (i = [-45:5:45]) {\n        translate([0, i, 4.1]) {\n            rotate([90, 0, 0])\n                cylinder(h=100.2, r=0.3, center=true);\n        }\n    }\n    \n    // End grain detail on sides\n    for (i = [-45:3:45]) {\n        translate([i, 30.1, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8.2, r=0.2, center=true);\n        translate([i, -30.1, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8.2, r=0.2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Tabletop\n    table_slab();\n    \n    // Leg assemblies\n    leg_pair(-45);\n    leg_pair(45);\n    \n    // Joinery (hidden inside)\n    %joinery_block(-45);\n    %joinery_block(45);\n    \n    // Surface details\n    surface_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "tile",
    "openscad_code": "// Realistic Tile Furniture - Medium Complexity\n// A modular wooden tile with dovetail joints, realistic proportions and 3D-printable design\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main parameters\ntile_size = 100;           // 100mm square tile\ntile_height = 12;          // Realistic furniture thickness\nwall_thickness = 2;        // 3D printable minimum\nwood_texture_depth = 0.3;  // Subtle wood grain\n\n// Dovetail joint parameters\ndovetail_width = 20;\ndovetail_height = 8;\ndovetail_angle = 15;       // Standard dovetail angle\n\nmodule wood_texture(direction = [1,0,0]) {\n    // Creates subtle wood grain texture using small cylinders\n    for(i = [-tile_size/2 : 2 : tile_size/2]) {\n        translate([i, 0, tile_height/2]) {\n            rotate([90, 0, direction[0] * 90])\n            scale([1, 0.1, 1])\n            cylinder(h = tile_size, r = wood_texture_depth, center = true);\n        }\n    }\n}\n\nmodule dovetail_male() {\n    // Male dovetail connector for tile edges\n    union() {\n        // Main dovetail body\n        translate([0, 0, dovetail_height/2]) {\n            difference() {\n                cube([dovetail_width, wall_thickness, dovetail_height], center = true);\n                // Angled cuts for dovetail shape\n                translate([0, wall_thickness/2 + 0.1, 0]) {\n                    rotate([0, dovetail_angle, 0])\n                    cube([dovetail_width*2, wall_thickness*2, dovetail_height*2], center = true);\n                }\n                translate([0, -wall_thickness/2 - 0.1, 0]) {\n                    rotate([0, -dovetail_angle, 0])\n                    cube([dovetail_width*2, wall_thickness*2, dovetail_height*2], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule dovetail_female() {\n    // Female dovetail slot\n    rotate([0, 0, 180])\n    translate([0, 0, -dovetail_height/2])\n    dovetail_male();\n}\n\nmodule tile_base() {\n    // Main tile body with rounded edges\n    difference() {\n        // Main tile with rounded top edges\n        minkowski() {\n            cube([tile_size - wall_thickness*2, tile_size - wall_thickness*2, tile_height - wall_thickness], center = true);\n            sphere(r = wall_thickness);\n        }\n        \n        // Hollow out the center for material efficiency\n        translate([0, 0, -tile_height/4])\n        cube([tile_size - wall_thickness*6, tile_size - wall_thickness*6, tile_height], center = true);\n        \n        // Add support ribs\n        for(x = [-tile_size/3, 0, tile_size/3]) {\n            for(y = [-tile_size/3, 0, tile_size/3]) {\n                translate([x, y, 0])\n                cube([wall_thickness*2, wall_thickness*2, tile_height - wall_thickness*2], center = true);\n            }\n        }\n    }\n}\n\nmodule furniture_surface_details() {\n    // Adds realistic furniture surface details\n    union() {\n        // Subtle edge bevel\n        difference() {\n            cube([tile_size, tile_size, tile_height], center = true);\n            cube([tile_size - wall_thickness, tile_size - wall_thickness, tile_height - wall_thickness], center = true);\n        }\n        \n        // Screw holes in corners for realistic furniture assembly\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * tile_size/3, y * tile_size/3, tile_height/2])\n                rotate([180, 0, 0])\n                cylinder(h = wall_thickness, r1 = wall_thickness/2, r2 = wall_thickness, center = true);\n            }\n        }\n        \n        // Wood grain texture on top surface\n        translate([0, 0, tile_height/2 + 0.1])\n        wood_texture([1,0,0]);\n        \n        translate([0, 0, tile_height/2 + 0.1])\n        rotate([0,0,90])\n        wood_texture([0,1,0]);\n    }\n}\n\n// Assemble the complete tile furniture piece\nunion() {\n    // Main tile body\n    tile_base();\n    \n    // Surface details\n    furniture_surface_details();\n    \n    // Dovetail joints on all four sides\n    translate([tile_size/2, 0, tile_height/2])\n    rotate([0, 90, 0])\n    dovetail_male();\n    \n    translate([-tile_size/2, 0, tile_height/2])\n    rotate([0, -90, 0])\n    dovetail_female();\n    \n    translate([0, tile_size/2, tile_height/2])\n    rotate([90, 0, 0])\n    dovetail_male();\n    \n    translate([0, -tile_size/2, tile_height/2])\n    rotate([-90, 0, 0])\n    dovetail_female();\n}",
    "renders": true
  },
  {
    "natural_object": "arch",
    "openscad_code": "// Arch furniture item - decorative bookshelf arch\n// Overall dimensions: 120mm wide x 30mm deep x 100mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 32;\n\n// Main module\nmodule arch_furniture() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([120, 30, 4], center = true);\n    \n    // Left vertical support\n    translate([-55, 0, 47])\n        cube([10, 26, 90], center = true);\n    \n    // Right vertical support\n    translate([55, 0, 47])\n        cube([10, 26, 90], center = true);\n    \n    // Arch top - main curved structure\n    difference() {\n        // Outer arch\n        translate([0, 0, 90])\n            rotate([90, 0, 0])\n                cylinder(h = 26, r1 = 60, r2 = 60, center = true);\n        \n        // Inner arch hollow\n        translate([0, 0, 90])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r1 = 48, r2 = 48, center = true);\n    }\n    \n    // Shelf supports - left side\n    for(i = [0:2]) {\n        translate([-55, 0, 20 + i * 25])\n            cube([10, 26, 3], center = true);\n    }\n    \n    // Shelf supports - right side\n    for(i = [0:2]) {\n        translate([55, 0, 20 + i * 25])\n            cube([10, 26, 3], center = true);\n    }\n    \n    // Shelves\n    for(i = [0:2]) {\n        translate([0, 0, 24 + i * 25])\n            cube([100, 22, 2], center = true);\n    }\n    \n    // Decorative arch segments\n    for(i = [-1:1]) {\n        translate([i * 30, 0, 90])\n            difference() {\n                cylinder(h = 26, r1 = 10, r2 = 10, center = true);\n                cylinder(h = 30, r1 = 7, r2 = 7, center = true);\n            }\n    }\n    \n    // Reinforcement blocks at corners\n    translate([-55, 0, 2])\n        cube([10, 26, 4], center = true);\n    \n    translate([55, 0, 2])\n        cube([10, 26, 4], center = true);\n    \n    // Back panel for stability\n    translate([0, -13, 50])\n        cube([116, 2, 100], center = true);\n    \n    // Small decorative feet\n    translate([-50, 15, -2])\n        cylinder(h = 4, r = 3);\n    \n    translate([50, 15, -2])\n        cylinder(h = 4, r = 3);\n    \n    translate([-50, -15, -2])\n        cylinder(h = 4, r = 3);\n    \n    translate([50, -15, -2])\n        cylinder(h = 4, r = 3);\n}\n\n// Render the model\narch_furniture();",
    "renders": true
  },
  {
    "natural_object": "slate",
    "openscad_code": "// Slate topped side table (realistic style, medium complexity)\n// Overall footprint ~120 x 80 mm, height ~60 mm\n// All walls 2 mm thick for reliable FDM printing\n\n// Main slate slab top\nmodule slate_top() {\n    difference() {\n        // Overall top shape (slightly irregular slab)\n        translate([0, 0, 58])\n            scale([1, 0.75, 0.1])\n                sphere(d=120, $fn=60);\n        \n        // Hollow out underside\n        translate([0, 0, 57.5])\n            scale([0.92, 0.67, 0.1])\n                sphere(d=118, $fn=60);\n    }\n}\n\n// Create a chiseled edge on the slate\nmodule chisel_edge() {\n    for (a=[0:30:359]) {\n        rotate([0, 0, a])\n            translate([58, 0, 58])\n                rotate([0, 90, 0])\n                    cylinder(d1=4, d2=2, h=20, $fn=8);\n    }\n}\n\n// Simple pedestal leg (cylindrical, hollow)\nmodule leg() {\n    difference() {\n        cylinder(d=40, h=58, $fn=60);\n        translate([0, 0, 2])\n            cylinder(d=36, h=58, $fn=60);\n    }\n}\n\n// Reinforcing ring at bottom of leg\nmodule foot_ring() {\n    difference() {\n        cylinder(d=60, h=6, $fn=60);\n        translate([0, 0, 2])\n            cylinder(d=56, h=6, $fn=60);\n    }\n}\n\n// Subtle slate texture (shallow indentations)\nmodule slate_texture() {\n    for (i=[-40:20:40])\n        for (j=[-25:15:25])\n            translate([i + rand(-3, 3), \n                       j + rand(-3, 3), \n                       61 + rand(-0.5, 0.5)])\n                sphere(d=rand(2, 4), $fn=12);\n}\n\n// Random helper\nfunction rand(a, b) = a + (b - a) * (rands(0, 1, 1)[0]);\n\n// Assemble the table\nunion() {\n    slate_top();\n    \n    // Chiseled edge detail\n    chisel_edge();\n    \n    // Add subtle texture\n    slate_texture();\n    \n    // Central support\n    leg();\n    \n    // Bottom foot ring\n    translate([0, 0, 0])\n        foot_ring();\n}",
    "renders": true
  },
  {
    "natural_object": "plank",
    "openscad_code": "// Plank-style stool with realistic proportions and furniture details\n// Designed for 3D printing with 2mm walls and minimal overhangs\n\n$fn = 32;\n\n// Overall dimensions\nseat_width = 100;\nseat_depth = 70;\nseat_thickness = 8;\nleg_height = 45;\nleg_thickness = 18;\nstretcher_offset = 12;\n\n// Wood plank texture parameters\nplank_width = 20;\nplank_gap = 1.5;\nnum_planks = 5;\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges\n    x = size[0];\n    y = size[1];\n    z = size[2];\n    \n    translate([radius, radius, 0])\n    difference() {\n        cube([x-2*radius, y-2*radius, z]);\n        \n        // Round the edges\n        for(i = [0, 1]) {\n            for(j = [0, 1]) {\n                translate([i*(x-2*radius), j*(y-2*radius), 0])\n                cylinder(h=z+2, r=radius, center=true);\n            }\n        }\n    }\n}\n\nmodule wood_plank(length, width, thickness, gap) {\n    // Create a single plank with realistic proportions\n    difference() {\n        rounded_cube([length, width, thickness], 2);\n        \n        // Add subtle wood grain texture\n        for(i = [1:5:length-5]) {\n            translate([i, width/2, thickness-0.5])\n            cube([0.5, width-2, 1]);\n        }\n    }\n}\n\nmodule seat_assembly() {\n    // Create the seat from multiple planks\n    union() {\n        for(i = [0:num_planks-1]) {\n            translate([0, i*(plank_width+plank_gap), 0])\n            wood_plank(seat_width, plank_width, seat_thickness, plank_gap);\n        }\n        \n        // Add support frame underneath\n        translate([5, 5, -4])\n        rounded_cube([seat_width-10, seat_depth-10, 4], 3);\n    }\n}\n\nmodule leg_with_brace(pos_x, pos_y) {\n    // Create a single leg with stretcher brace\n    translate([pos_x, pos_y, -leg_height/2])\n    union() {\n        // Main leg post\n        rounded_cube([leg_thickness, leg_thickness, leg_height], 3);\n        \n        // Add stretcher brace\n        if(pos_x < seat_width/2) {\n            translate([leg_thickness/2, leg_thickness/2, stretcher_offset])\n            rotate([0, 90, 0])\n            cylinder(h=seat_width-leg_thickness*2, r=leg_thickness/3, center=true);\n        }\n        \n        if(pos_y < seat_depth/2) {\n            translate([leg_thickness/2, leg_thickness/2, stretcher_offset])\n            rotate([90, 0, 0])\n            cylinder(h=seat_depth-leg_thickness*2, r=leg_thickness/3, center=true);\n        }\n    }\n}\n\n// Assemble the complete stool\nunion() {\n    // Seat\n    translate([0, 0, leg_height+seat_thickness/2])\n    seat_assembly();\n    \n    // Four legs\n    leg_offset_x = seat_width/2 - leg_thickness/2;\n    leg_offset_y = seat_depth/2 - leg_thickness/2;\n    \n    leg_with_brace(-leg_offset_x, -leg_offset_y);\n    leg_with_brace(leg_offset_x, -leg_offset_y);\n    leg_with_brace(-leg_offset_x, leg_offset_y);\n    leg_with_brace(leg_offset_x, leg_offset_y);\n    \n    // Add corner brackets for stability\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*leg_offset_x/2, y*leg_offset_y/2, leg_height-5])\n            rotate([0, 0, 45])\n            rounded_cube([leg_thickness*1.5, leg_thickness*1.5, 10], 2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "panel",
    "openscad_code": "// Realistic-style Medium-complexity Panel Furniture Bookcase\n// Overall dimensions: 100 mm W × 120 mm H × 30 mm D\n// Wall thickness everywhere ≈ 2 mm\n\n$fn = 64;\n\n// Main outer shell\nmodule shell() {\n    difference() {\n        // Full box\n        cube([100, 30, 120], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([96, 28, 116], center = true);\n    }\n}\n\n// Fixed middle shelf\nmodule middle_shelf() {\n    translate([0, 0, 30])\n        cube([96, 28, 2], center = true);\n}\n\n// Back panel\nmodule back_panel() {\n    translate([0, -15.5, 0])\n        cube([100, 2, 120], center = true);\n}\n\n// Cam-lock knock-down fittings\nmodule cam(x, z) {\n    // Cylindrical cam body\n    translate([x, 0, z])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 3, d = 8, center = true);\n                translate([0, 0, -2])\n                    cube([1.5, 6, 5], center = true);\n            }\n}\n\n// Dowel pins\nmodule dowel(x, z) {\n    translate([x, 0, z])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 4, center = true);\n}\n\n// Shelf support peg holes\nmodule peg_holes() {\n    for (z = [-50:20:50])\n        for (x = [-40, 40])\n            translate([x, 0, z])\n                rotate([90, 0, 0])\n                    cylinder(h = 30, d = 4, center = true);\n}\n\n// Vertical divider for two compartments\nmodule divider() {\n    translate([0, 0, 0])\n        cube([2, 28, 116], center = true);\n}\n\n// Top rail with rounded edge\nmodule top_rail() {\n    difference() {\n        translate([0, 0, 59])\n            cube([100, 30, 4], center = true);\n        translate([0, 0, 57])\n            cube([96, 28, 4], center = true);\n    }\n}\n\n// Bottom toe-kick cutout\nmodule toe_kick() {\n    translate([0, 0, -55])\n        cube([80, 30, 10], center = true);\n}\n\n// Assembly\nunion() {\n    shell();\n    back_panel();\n    middle_shelf();\n    divider();\n    top_rail();\n    \n    // Knock-down hardware\n    cam(-45, 30);\n    cam(45, 30);\n    cam(-45, -30);\n    cam(45, -30);\n    \n    dowel(-45, 25);\n    dowel(45, 25);\n    dowel(-45, -25);\n    dowel(45, -25);\n    \n    // Peg holes for adjustable shelves\n    peg_holes();\n    \n    // Remove toe-kick\n    difference() {\n        children();\n        toe_kick();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "frame",
    "openscad_code": "// Realistic medium-complexity picture-frame furniture\n// External dimensions: 100 mm x 130 mm x 12 mm\n// Wall thickness: 2 mm\n// Printable flat on bed, no overhangs\n\n// Frame profile module – creates one segment\nmodule frame_segment(l, w, h, angle=0) {\n    rotate([0, 0, angle])\n    difference() {\n        // Outer frame shape: rounded rectangle profile\n        hull() {\n            translate([-w/2, 0, 0]) cylinder(h=h, d=4, $fn=20);\n            translate([w/2, 0, 0])  cylinder(h=h, d=4, $fn=20);\n            translate([-w/2, l, 0]) cylinder(h=h, d=4, $fn=20);\n            translate([w/2, l, 0])  cylinder(h=h, d=4, $fn=20);\n        }\n        // Inner hollow – leave 2 mm walls\n        hull() {\n            translate([-(w-4)/2, 2, -1]) cylinder(h=h+2, d=4, $fn=20);\n            translate([(w-4)/2, 2, -1])  cylinder(h=h+2, d=4, $fn=20);\n            translate([-(w-4)/2, l-2, -1]) cylinder(h=h+2, d=4, $fn=20);\n            translate([(w-4)/2, l-2, -1])  cylinder(h=h+2, d=4, $fn=20);\n        }\n    }\n}\n\n// Place four segments to form rectangle\n// Top\ntranslate([-50+6, 130-6, 0]) frame_segment(l=100-12, w=12, h=12, angle=90);\n\n// Bottom\ntranslate([-50+6, -6, 0]) frame_segment(l=100-12, w=12, h=12, angle=90);\n\n// Left\ntranslate([-50, 6, 0]) frame_segment(l=130-12, w=12, h=12, angle=0);\n\n// Right\ntranslate([50-12, 6, 0]) frame_segment(l=130-12, w=12, h=12, angle=0);\n\n// Picture backing plate – 1 mm inset from rear\ndifference() {\n    translate([0, 0, -0.5]) cube([100-8, 130-8, 1], center=true);\n    translate([0, 0, -1]) cube([100-12, 130-12, 2], center=true);\n}\n\n// Two key-hole slots for wall hanging\nmodule keyhole() {\n    difference() {\n        translate([0, 0, 0]) cube([6, 3, 12], center=true);\n        translate([0, -1, -5]) rotate([0, 90, 0]) cylinder(h=3.2, d=3, $fn=20);\n    }\n}\n\ntranslate([-20, 115-130/2, -11]) keyhole();\ntranslate([ 20, 115-130/2, -11]) mirror([1, 0, 0]) keyhole();\n\n// Decorative corner braces\nmodule corner_brace() {\n    difference() {\n        hull() {\n            cube([8, 8, 2]);\n            translate([4, 4, 0]) cylinder(h=2, d=4, $fn=20);\n        }\n        translate([2, 2, -1]) cylinder(h=4, d=2, $fn=20);\n    }\n}\n\ntranslate([-50+6, -130/2+6, 0]) corner_brace();\ntranslate([ 50-6, -130/2+6, 0]) mirror([1, 0, 0]) corner_brace();\ntranslate([-50+6,  130/2-6, 0]) mirror([0, 1, 0]) corner_brace();\ntranslate([ 50-6,  130/2-6, 0]) mirror([1, 1, 0]) corner_brace();",
    "renders": true
  },
  {
    "natural_object": "girder",
    "openscad_code": "// Girder Bench - Medium complexity realistic style\n// Dimensions: 120mm long x 40mm deep x 45mm tall\n\nmodule girder_profile() {\n    // Main I-beam profile with 2mm wall thickness\n    difference() {\n        union() {\n            // Top flange\n            translate([0, 0, 20]) cube([60, 40, 4], center=true);\n            // Web\n            translate([0, 0, 10]) cube([60, 4, 16], center=true);\n            // Bottom flange\n            translate([0, 0, 0]) cube([60, 40, 4], center=true);\n        }\n        // Hollow out interior for 3D printing\n        translate([0, 0, 20]) cube([56, 36, 2], center=true);\n        translate([0, 0, 10]) cube([56, 2, 12], center=true);\n        translate([0, 0, 0]) cube([56, 36, 2], center=true);\n    }\n}\n\nmodule bolt_holes() {\n    // Create bolt hole pattern along girder\n    for(i = [-25:10:25]) {\n        translate([i, 0, 10]) rotate([0, 90, 0]) \n            cylinder(h=45, d=3, center=true);\n    }\n}\n\nmodule support_bracket() {\n    // Triangular support brackets\n    translate([0, -20, 0]) {\n        difference() {\n            // Main bracket\n            polyhedron(\n                points=[[0,0,0], [0,0,20], [10,0,20], [0,8,0], [0,8,20], [10,8,20]],\n                faces=[[0,1,2], [3,5,4], [0,3,4,1], [1,4,5,2], [0,2,5,3], [2,1,0]]\n            );\n            // Lightening hole\n            translate([5, 4, 10]) rotate([0,90,0]) \n                cylinder(h=12, d=4, center=true);\n        }\n    }\n}\n\nmodule seat_planks() {\n    // Wooden seat planks on top\n    color(\"burlywood\") {\n        for(i = [-15:10:15]) {\n            translate([i, 0, 23]) cube([8, 38, 2], center=true);\n        }\n    }\n}\n\nmodule leg_assembly() {\n    // Vertical support legs\n    translate([-25, 0, -22]) {\n        difference() {\n            // Square tube leg\n            cube([6, 6, 44], center=true);\n            // Hollow core\n            translate([0, 0, 0]) cube([3, 3, 44], center=true);\n        }\n    }\n    translate([25, 0, -22]) {\n        difference() {\n            cube([6, 6, 44], center=true);\n            translate([0, 0, 0]) cube([3, 3, 44], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Center girder\n    girder_profile();\n    \n    // Bolt holes\n    bolt_holes();\n    \n    // Support brackets\n    support_bracket();\n    mirror([0,1,0]) support_bracket();\n    \n    // Seat surface\n    seat_planks();\n    \n    // Legs\n    leg_assembly();\n}\n\n// Base support beam\ntranslate([0, 0, -44]) cube([56, 4, 4], center=true);",
    "renders": true
  },
  {
    "natural_object": "joist",
    "openscad_code": "// Joist furniture item - structural wooden beam with furniture joints\n// Realistic style, medium complexity\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main dimensions\njoist_length = 120;\njoist_width = 25;\njoist_height = 40;\nwall_thickness = 2;\n\n// Wood texture parameters\ntexture_depth = 0.5;\ngrain_spacing = 2;\n\nmodule wood_texture(width, height, depth) {\n    // Create wood grain texture on surface\n    for (i = [0:grain_spacing:width]) {\n        translate([i, 0, -texture_depth/2])\n            cube([0.5, height, texture_depth]);\n    }\n}\n\nmodule mortise_tenon_joint() {\n    // Mortise (female part)\n    mortise_width = 8;\n    mortise_depth = 15;\n    mortise_height = 15;\n    \n    translate([joist_length/2 - 5, -wall_thickness, joist_height/2 - mortise_height/2])\n        cube([mortise_depth, wall_thickness + 2, mortise_height]);\n}\n\nmodule dovetail_joint() {\n    // Dovetail detail at end\n    dovetail_height = 8;\n    dovetail_width = 12;\n    \n    for (i = [0:2:joist_height - dovetail_height]) {\n        translate([joist_length - 2, 0, i])\n            cube([2, dovetail_width, dovetail_height]);\n    }\n}\n\nmodule structural_reinforcement() {\n    // Metal bracket simulation\n    bracket_thickness = 1.5;\n    \n    // L-bracket at corner\n    translate([-1, -1, -1])\n        cube([bracket_thickness, joist_width + 2, bracket_thickness]);\n    \n    translate([-1, -1, -1])\n        cube([bracket_thickness + 10, bracket_thickness, joist_height + 2]);\n}\n\nmodule bolt_holes() {\n    // Bolt holes for furniture assembly\n    hole_diameter = 4;\n    \n    for (i = [30:30:joist_length - 30]) {\n        translate([i, joist_width/2, joist_height/2])\n            rotate([90, 0, 0])\n                cylinder(h = joist_width + 2, d = hole_diameter, center = true);\n    }\n}\n\nmodule chamfered_edges() {\n    // Chamfer edges for realistic look\n    chamfer_size = 1.5;\n    \n    difference() {\n        cube([joist_length, joist_width, joist_height]);\n        \n        // Top edges\n        translate([-1, -1, joist_height - chamfer_size])\n            cube([joist_length + 2, joist_width + 2, chamfer_size + 1]);\n        \n        // Bottom edges\n        translate([-1, -1, -1])\n            cube([joist_length + 2, joist_width + 2, chamfer_size + 1]);\n    }\n}\n\n// Main joist body\ndifference() {\n    // Outer shape with chamfers\n    chamfered_edges();\n    \n    // Hollow center for 3D printing\n    translate([wall_thickness, wall_thickness, wall_thickness])\n        cube([joist_length - 2*wall_thickness, \n              joist_width - 2*wall_thickness, \n              joist_height - 2*wall_thickness]);\n    \n    // Bolt holes\n    bolt_holes();\n}\n\n// Mortise and tenon joints\nunion() {\n    // Mortise on one end\n    mortise_tenon_joint();\n    \n    // Dovetail on other end\n    dovetail_joint();\n}\n\n// Structural reinforcements\nstructural_reinforcement();\n\n// Wood grain texture on top surface\ntranslate([0, 0, joist_height - texture_depth])\n    wood_texture(joist_length, joist_width, texture_depth);\n\n// Wood grain texture on side surface\ntranslate([0, joist_width - texture_depth, 0])\n    rotate([0, 0, 90])\n        wood_texture(joist_height, joist_length, texture_depth);",
    "renders": true
  },
  {
    "natural_object": "stud",
    "openscad_code": "// Realistic Stud Furniture - Medium Complexity OpenSCAD Model\n// A 2x4 stud turned into a small side table with natural wood details\n\n$fn = 24;\n\n// Overall dimensions\nstud_d = 38;          // 2x4 actual width (38mm)\nstud_w = 89;          // 2x4 actual depth (89mm)  \nstud_h = 120;         // Table height\nleg_h = 80;           // Leg height\ntop_t = 20;           // Top thickness\n\n// Wood texture parameters\ngrain_spacing = 2.5;\ngrain_depth = 0.5;\n\n// Create the table\nunion() {\n    // Main tabletop - elongated stud\n    difference() {\n        // Base tabletop\n        translate([0, 0, leg_h + top_t/2])\n            cube([stud_w + 10, stud_d + 10, top_t], center=true);\n        \n        // Add wood grain texture on top\n        for(i = [0:grain_spacing:stud_w + 10]) {\n            translate([(i - stud_w/2 - 5), 0, leg_h + top_t - 0.1])\n                cube([0.5, stud_d + 11, grain_depth], center=true);\n        }\n        \n        // Chamfer edges\n        translate([0, 0, leg_h + top_t])\n            cylinder(h=top_t, r1=2, r2=0, center=true);\n        translate([stud_w/2 + 5 - 2, 0, leg_h + top_t/2])\n            rotate([90, 0, 0])\n                cylinder(h=stud_d + 10 - 4, r1=2, r2=0, center=true);\n    }\n    \n    // Four legs - stud sections\n    module leg(x_pos, y_pos) {\n        difference() {\n            // Main leg\n            translate([x_pos, y_pos, leg_h/2])\n                cube([stud_d, stud_d, leg_h], center=true);\n            \n            // Add realistic wood grain vertically\n            for(i = [0:grain_spacing:leg_h]) {\n                rotate([90, 0, 90])\n                    translate([x_pos - stud_d/2 - 0.1, y_pos, i - leg_h/2])\n                        cube([0.5, stud_d, grain_depth], center=true);\n            }\n            \n            // Screw holes for joinery\n            translate([x_pos, y_pos, leg_h - 10])\n                rotate([90, 0, 0])\n                    cylinder(h=20, r=2, center=true);\n        }\n    }\n    \n    // Position legs at corners\n    leg_offset_x = stud_w/2 - stud_d/2;\n    leg_offset_y = stud_d/2 + 5;\n    \n    leg(-leg_offset_x, -leg_offset_y);\n    leg(leg_offset_x, -leg_offset_y);\n    leg(-leg_offset_x, leg_offset_y);\n    leg(leg_offset_x, leg_offset_y);\n    \n    // Lower support brace - another stud\n    translate([0, 0, 20])\n        rotate([90, 0, 0])\n            difference() {\n                cube([stud_w - 20, stud_d, stud_d], center=true);\n                \n                // Horizontal grain\n                for(i = [0:grain_spacing:stud_w - 20]) {\n                    rotate([0, 90, 0])\n                        translate([i - stud_w/2 + 10, 0, 0])\n                            cube([0.5, stud_d, grain_depth], center=true);\n                }\n            }\n    \n    // Corner brackets for strength\n    module bracket(x, y, z) {\n        translate([x, y, z])\n            difference() {\n                union() {\n                    cube([15, 15, 3], center=true);\n                    rotate([0, 0, 45])\n                        cube([10, 10, 3], center=true);\n                }\n                cylinder(h=4, r=1.5, center=true);\n            }\n    }\n    \n    // Add brackets at leg joints\n    bracket_offset = 25;\n    bracket(-stud_w/2 + bracket_offset, -stud_d/2 - 5, leg_h + top_t - 10);\n    bracket(stud_w/2 - bracket_offset, -stud_d/2 - 5, leg_h + top_t - 10);\n    bracket(-stud_w/2 + bracket_offset, stud_d/2 + 5, leg_h + top_t - 10);\n    bracket(stud_w/2 - bracket_offset, stud_d/2 + 5, leg_h + top_t - 10);\n}",
    "renders": true
  },
  {
    "natural_object": "stilt",
    "openscad_code": "// Stilt furniture - realistic style, medium complexity\n// Height: 120mm, designed for 3D printing with 2mm wall thickness\n\nmodule leg() {\n    // Main tapered leg post\n    difference() {\n        cylinder(h=100, r1=12, r2=8, $fn=20);\n        // Hollow core\n        translate([0,0,-1])\n            cylinder(h=102, r1=10, r2=6, $fn=20);\n    }\n    \n    // Reinforcement rings every 25mm\n    for(i=[1:4]) {\n        translate([0,0,i*20+5]) {\n            difference() {\n                cylinder(h=3, r=13, $fn=20);\n                cylinder(h=3, r=11.5, $fn=20);\n            }\n        }\n    }\n    \n    // Ground spike for stability\n    translate([0,0,-5])\n        cylinder(h=15, r1=10, r2=3, $fn=20);\n}\n\nmodule foot() {\n    // Wide base plate for stability\n    difference() {\n        translate([0,0,0])\n            cylinder(h=5, r=25, $fn=30);\n        // Hollow center\n        translate([0,0,-1])\n            cylinder(h=7, r=22, $fn=30);\n    }\n    \n    // Traction grooves\n    for(angle=[0:30:150]) {\n        rotate([0,0,angle]) {\n            translate([12,0,2.5])\n                cube([24,2,1], center=true);\n        }\n    }\n}\n\nmodule joint() {\n    // Cylindrical joint housing\n    difference() {\n        cylinder(h=20, r=14, $fn=20);\n        // Hollow for bolt\n        translate([0,0,-1])\n            cylinder(h=22, r=6, $fn=20);\n    }\n    \n    // Mounting flange\n    difference() {\n        translate([0,0,10])\n            cylinder(h=5, r=20, $fn=20);\n        translate([0,0,9])\n            cylinder(h=7, r=14.5, $fn=20);\n    }\n    \n    // Bolt hole\n    translate([0,0,5])\n        rotate([90,0,0])\n            cylinder(h=30, r=3, $fn=10);\n}\n\nmodule support_brace() {\n    // Angled support strut\n    rotate([0,-15,0]) {\n        difference() {\n            translate([0,0,30])\n                cube([6,6,40], center=true);\n            translate([0,0,30])\n                cube([3,3,42], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base foot\n    translate([0,0,0])\n        foot();\n    \n    // Main leg\n    translate([0,0,5])\n        leg();\n    \n    // Joint at top\n    translate([0,0,105])\n        joint();\n    \n    // Support braces (3 at 120 degree intervals)\n    for(i=[0:1:2]) {\n        rotate([0,0,i*120]) {\n            translate([10,0,60])\n                support_brace();\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "strut",
    "openscad_code": "// Realistic Strut Furniture Item - Medium Complexity\n// A modular support strut for furniture applications\n\n// Global parameters\nstrut_length = 120;\nstrut_width = 15;\nstrut_height = 15;\nwall_thickness = 2;\nhole_diameter = 5;\nconnector_length = 10;\n\n// Main strut body with hollow core\nmodule strut_body() {\n    difference() {\n        // Outer body\n        cube([strut_length, strut_width, strut_height], center=true);\n        \n        // Hollow core\n        translate([0, 0, 0])\n            cube([strut_length - 2*wall_thickness, strut_width - 2*wall_thickness, strut_height], center=true);\n    }\n}\n\n// End connector with mounting holes\nmodule end_connector(is_left=true) {\n    offset = is_left ? -strut_length/2 - connector_length/2 : strut_length/2 + connector_length/2;\n    \n    translate([offset, 0, 0]) {\n        // Connector body\n        cube([connector_length, strut_width, strut_height], center=true);\n        \n        // Mounting holes\n        for (i = [-1, 1]) {\n            translate([0, i * strut_width/4, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=connector_length + 2, d=hole_diameter, center=true, $fn=16);\n        }\n        \n        // Reinforcement ribs\n        for (i = [-1, 1]) {\n            translate([i * connector_length/4, 0, strut_height/2 - wall_thickness/2])\n                cube([wall_thickness, strut_width - 4, wall_thickness], center=true);\n        }\n    }\n}\n\n// Middle support bracket for additional strength\nmodule middle_support() {\n    translate([0, 0, strut_height/2 + wall_thickness/2]) {\n        // Top flange\n        cube([wall_thickness*3, strut_width + 6, wall_thickness], center=true);\n        \n        // Side flanges\n        for (i = [-1, 1]) {\n            translate([0, i * (strut_width/2 + 3), wall_thickness/2])\n                cube([wall_thickness*3, wall_thickness, wall_thickness], center=true);\n        }\n        \n        // Gusset plates\n        for (j = [-1, 1]) {\n            translate([j * 20, 0, 0]) {\n                rotate([0, 90, 0])\n                    cylinder(h=strut_height, d=wall_thickness*2, center=true, $fn=8);\n            }\n        }\n    }\n}\n\n// Surface texture for grip\nmodule grip_texture() {\n    for (i = [0:5:strut_length-10]) {\n        translate([i - strut_length/2 + 5, 0, strut_height/2 - wall_thickness]) {\n            cube([2, strut_width - 4, 0.5], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main strut\n    strut_body();\n    \n    // End connectors\n    end_connector(true);\n    end_connector(false);\n    \n    // Middle support\n    middle_support();\n    \n    // Grip texture\n    grip_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "truss",
    "openscad_code": "// Truss Bookshelf Unit\n// 3D printable truss furniture with realistic proportions\n\n// Parameters\nshelf_length = 100;\nshelf_depth = 30;\nshelf_thickness = 2;\ntruss_height = 120;\ntruss_width = 20;\ntruss_thickness = 2;\njoint_diameter = 6;\nbolt_head_diameter = 4;\nbolt_shaft_diameter = 2;\n\n// Main assembly\nmodule truss_bookshelf() {\n    // Left truss frame\n    translate([-shelf_length/2 - 5, 0, 0]) {\n        truss_frame();\n    }\n    \n    // Right truss frame\n    translate([shelf_length/2 + 5, 0, 0]) {\n        mirror([1, 0, 0]) {\n            truss_frame();\n        }\n    }\n    \n    // Shelves\n    for(z = [30, 60, 90]) {\n        shelf(z);\n    }\n    \n    // Cross-bracing\n    cross_bracing();\n}\n\n// Truss frame module\nmodule truss_frame() {\n    // Vertical members\n    for(y = [-shelf_depth/2 + 10, shelf_depth/2 - 10]) {\n        // Front post\n        translate([0, y, truss_height/2]) {\n            cube([truss_thickness, truss_thickness, truss_height], center = true);\n        }\n        \n        // Back post\n        translate([truss_width, y, truss_height/2]) {\n            cube([truss_thickness, truss_thickness, truss_height], center = true);\n        }\n    }\n    \n    // Horizontal members\n    for(z = [15, 45, 75, 105]) {\n        translate([truss_width/2, 0, z]) {\n            cube([truss_width - 2, truss_thickness, truss_thickness], center = true);\n        }\n    }\n    \n    // Diagonal braces\n    diagonal_brace([0, 0, 0], [truss_width, 0, 30]);\n    diagonal_brace([0, 0, 30], [truss_width, 0, 60]);\n    diagonal_brace([0, 0, 60], [truss_width, 0, 90]);\n    diagonal_brace([0, 0, 90], [truss_width, 0, 120]);\n}\n\n// Diagonal brace helper\nmodule diagonal_brace(start, end) {\n    length = norm(end - start);\n    angle = atan2(end[0] - start[0], end[2] - start[2]);\n    \n    translate([(start[0] + end[0])/2, 0, (start[2] + end[2])/2]) {\n        rotate([90, 0, -angle]) {\n            cylinder(h = length, d = truss_thickness, $fn = 8);\n        }\n    }\n}\n\n// Shelf module\nmodule shelf(z_pos) {\n    translate([0, 0, z_pos]) {\n        // Main shelf\n        cube([shelf_length, shelf_depth, shelf_thickness], center = true);\n        \n        // Support brackets\n        for(x = [-shelf_length/2 + 15, shelf_length/2 - 15]) {\n            translate([x, shelf_depth/2 - 5, -shelf_thickness]) {\n                rotate([0, 45, 0]) {\n                    cube([10, truss_thickness, 10]);\n                }\n            }\n            translate([x, -shelf_depth/2 + 5, -shelf_thickness]) {\n                rotate([0, -45, 0]) {\n                    cube([10, truss_thickness, 10]);\n                }\n            }\n        }\n        \n        // Bolt holes for mounting\n        for(x = [-shelf_length/2 + 20, shelf_length/2 - 20]) {\n            for(y = [-shelf_depth/2 + 10, shelf_depth/2 - 10]) {\n                translate([x, y, 0]) {\n                    cylinder(h = 10, d = bolt_shaft_diameter, center = true, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Cross-bracing between frames\nmodule cross_bracing() {\n    for(z = [15, 45, 75, 105]) {\n        // Front cross members\n        translate([-shelf_length/2 - 5, shelf_depth/2 - 5, z]) {\n            cube([shelf_length + 10, truss_thickness, truss_thickness], center = true);\n        }\n        \n        // Back cross members\n        translate([-shelf_length/2 - 5, -shelf_depth/2 + 5, z]) {\n            cube([shelf_length + 10, truss_thickness, truss_thickness], center = true);\n        }\n    }\n}\n\n// Generate the model\ntruss_bookshelf();",
    "renders": true
  },
  {
    "natural_object": "lintel",
    "openscad_code": "$fs = 0.5;\n$fa = 1;\n\n// Overall lintel dimensions (mm)\nlength = 100;\nheight = 40;\ndepth = 25;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main top beam\nmodule top_beam() {\n    difference() {\n        // Full beam\n        cube([length, depth, height], center=true);\n        // Hollow core\n        translate([0, 0, 0])\n            cube([length-wall*2, depth-wall*2, height-wall*2], center=true);\n    }\n}\n\n// End caps with slight chamfer\nmodule end_cap(side) {\n    difference() {\n        // Outer cap\n        translate([side*(length/2 - wall), 0, 0])\n            cube([wall*2, depth, height], center=true);\n        // 45° chamfer\n        translate([side*(length/2 - wall), 0, height/2])\n            rotate([45, 0, 0])\n                cube([wall*2, depth*1.5, wall*3], center=true);\n    }\n}\n\n// Support ribs inside for strength\nmodule support_ribs() {\n    for (x = [-length/2 + 10 : 15 : length/2 - 10]) {\n        translate([x, 0, 0])\n            cube([wall, depth-wall*2, height-wall*2], center=true);\n    }\n}\n\n// Wooden dowel pin joints\nmodule dowel_pins() {\n    pin_diameter = 2.5;\n    pin_length = 8;\n    \n    // Pins on left end\n    for (z = [-height/2 + 5 : 10 : height/2 - 5]) {\n        translate([-length/2 - pin_length/2, 0, z])\n            rotate([0, 90, 0])\n                cylinder(h = pin_length, d = pin_diameter, $fn=16);\n    }\n    \n    // Pins on right end\n    for (z = [-height/2 + 5 : 10 : height/2 - 5]) {\n        translate([length/2 + pin_length/2, 0, z])\n            rotate([0, 90, 0])\n                cylinder(h = pin_length, d = pin_diameter, $fn=16);\n    }\n}\n\n// Surface detail - subtle grain lines\nmodule wood_grain() {\n    grain_depth = 0.3;\n    for (x = [-length/2 + 2 : 3 : length/2 - 2]) {\n        translate([x, 0, height/2 - grain_depth/2])\n            cube([0.5, depth, grain_depth], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    top_beam();\n    end_cap(-1);\n    end_cap(1);\n    support_ribs();\n    dowel_pins();\n    wood_grain();\n}",
    "renders": true
  },
  {
    "natural_object": "sill",
    "openscad_code": "// Window sill furniture model\n// Realistic style, medium complexity\n// Dimensions: 120mm x 40mm x 30mm\n\nwall_thickness = 2;\nsill_length = 120;\nsill_width = 40;\nsill_height = 30;\n\n// Main sill platform\nmodule sill_platform() {\n    difference() {\n        // Main platform\n        translate([0, 0, sill_height - 4])\n        cube([sill_length, sill_width, 4], center=true);\n        \n        // Drainage grooves\n        for (i = [-40:20:40]) {\n            translate([i, 0, sill_height - 3.5])\n            cube([15, sill_width - 4, 1], center=true);\n        }\n    }\n}\n\n// Front apron with decorative molding\nmodule front_apron() {\n    difference() {\n        // Main apron\n        translate([0, sill_width/2 - wall_thickness/2, sill_height/2 - 2])\n        cube([sill_length - 4, wall_thickness, sill_height - 4], center=true);\n        \n        // Decorative cutouts\n        for (i = [-50:25:50]) {\n            translate([i, sill_width/2 - wall_thickness, sill_height/2 - 5])\n            cube([15, wall_thickness + 1, 8], center=true);\n        }\n    }\n}\n\n// Side supports\nmodule side_support(x_pos) {\n    difference() {\n        // Main support\n        translate([x_pos, 0, sill_height/2 - 8])\n        cube([wall_thickness, sill_width - 4, sill_height - 12], center=true);\n        \n        // Lightening holes\n        translate([x_pos, 0, sill_height/2 - 8])\n        cylinder(h=wall_thickness + 1, r=6, center=true, $fn=32);\n        translate([x_pos, 0, sill_height/2 - 12])\n        cylinder(h=wall_thickness + 1, r=4, center=true, $fn=32);\n    }\n}\n\n// Rear lip to prevent items falling\nmodule rear_lip() {\n    translate([0, -sill_width/2 + wall_thickness/2, sill_height - 2])\n    cube([sill_length - 4, wall_thickness, 6], center=true);\n}\n\n// Mounting brackets underneath\nmodule mounting_bracket(x_pos) {\n    translate([x_pos, 0, 2])\n    cube([20, 10, 4], center=true);\n    \n    // Screw holes\n    translate([x_pos - 6, 0, 2])\n    cylinder(h=5, r=1.5, center=true, $fn=16);\n    translate([x_pos + 6, 0, 2])\n    cylinder(h=5, r=1.5, center=true, $fn=16);\n}\n\n// Water drainage spout\nmodule drainage_spout() {\n    translate([sill_length/2 - 10, sill_width/2 - 2, sill_height - 6])\n    rotate([0, -20, 0])\n    cube([20, 4, 4], center=true);\n}\n\n// Assemble the sill\nunion() {\n    // Main components\n    sill_platform();\n    front_apron();\n    rear_lip();\n    \n    // Side supports\n    side_support(sill_length/2 - 2);\n    side_support(-sill_length/2 + 2);\n    \n    // Mounting brackets\n    mounting_bracket(-30);\n    mounting_bracket(30);\n    \n    // Drainage\n    drainage_spout();\n}",
    "renders": true
  },
  {
    "natural_object": "riser",
    "openscad_code": "// Riser furniture item - realistic style, medium complexity\n// 3D printable riser/platform with structural details\n\n// Overall dimensions\nriser_width = 80;\nriser_depth = 60;\nriser_height = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Leg dimensions\nleg_width = 6;\nleg_height = 35;\n\n// Step parameters\nstep_count = 3;\nstep_height = riser_height / step_count;\n\nmodule leg(x, y) {\n    // Main leg post\n    translate([x, y, 0])\n        cube([leg_width, leg_width, leg_height], center = true);\n    \n    // Leg support brace\n    translate([x, y, leg_height/4])\n        rotate([45, 0, 0])\n        cube([leg_width*0.8, wall_thickness, leg_width*1.5], center = true);\n}\n\nmodule step_platform(level) {\n    step_z = level * step_height;\n    platform_width = riser_width - (level * 8);\n    platform_depth = riser_depth - (level * 6);\n    \n    // Main step platform\n    translate([0, 0, step_z])\n        cube([platform_width, platform_depth, wall_thickness], center = true);\n    \n    // Front edge lip\n    translate([0, platform_depth/2 - wall_thickness/2, step_z + wall_thickness/2])\n        cube([platform_width, wall_thickness, wall_thickness*2], center = true);\n    \n    // Side edge lips\n    translate([platform_width/2 - wall_thickness/2, 0, step_z + wall_thickness/2])\n        cube([wall_thickness, platform_depth, wall_thickness*2], center = true);\n    translate([-platform_width/2 + wall_thickness/2, 0, step_z + wall_thickness/2])\n        cube([wall_thickness, platform_depth, wall_thickness*2], center = true);\n}\n\nmodule support_beam(x1, y1, x2, y2, z) {\n    length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n    angle = atan2(y2-y1, x2-x1);\n    \n    translate([(x1+x2)/2, (y1+y2)/2, z])\n        rotate([0, 0, angle])\n        cube([length, wall_thickness, wall_thickness*1.5], center = true);\n}\n\n// Main riser structure\ndifference() {\n    // Base structure\n    union() {\n        // Top platform\n        translate([0, 0, riser_height])\n            cube([riser_width, riser_depth, wall_thickness], center = true);\n        \n        // Steps\n        for(i = [1:step_count-1]) {\n            step_platform(i);\n        }\n        \n        // Legs at corners\n        leg(riser_width/2 - leg_width/2, riser_depth/2 - leg_width/2);\n        leg(-riser_width/2 + leg_width/2, riser_depth/2 - leg_width/2);\n        leg(riser_width/2 - leg_width/2, -riser_depth/2 + leg_width/2);\n        leg(-riser_width/2 + leg_width/2, -riser_depth/2 + leg_width/2);\n        \n        // Mid support legs\n        leg(0, riser_depth/2 - leg_width/2);\n        leg(0, -riser_depth/2 + leg_width/2);\n        \n        // Support beams\n        support_beam(-riser_width/2 + leg_width, -riser_depth/2 + leg_width, \n                     riser_width/2 - leg_width, -riser_depth/2 + leg_width, \n                     leg_height/2);\n        support_beam(-riser_width/2 + leg_width, riser_depth/2 - leg_width, \n                     riser_width/2 - leg_width, riser_depth/2 - leg_width, \n                     leg_height/2);\n    }\n    \n    // Hollow out interior for printability\n    translate([0, 0, riser_height/2])\n        cube([riser_width - wall_thickness*2, \n              riser_depth - wall_thickness*2, \n              riser_height - wall_thickness], center = true);\n}\n\n// Non-slip texture dots on top surface\nmodule grip_dot(x, y) {\n    translate([x, y, riser_height + wall_thickness])\n        cylinder(h=wall_thickness/2, r=1.5, $fn=8);\n}\n\nfor(x = [-riser_width/2 + 10 : 10 : riser_width/2 - 10]) {\n    for(y = [-riser_depth/2 + 8 : 8 : riser_depth/2 - 8]) {\n        grip_dot(x, y);\n    }\n}\n\n// Corner radius details for realistic look\nmodule corner_detail(x, y, z) {\n    translate([x, y, z])\n        cylinder(h=wall_thickness, r=wall_thickness, $fn=16);\n}\n\n// Add corner details to top\nfor(x = [-riser_width/2, riser_width/2]) {\n    for(y = [-riser_depth/2, riser_depth/2]) {\n        corner_detail(x, y, riser_height);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "tread",
    "openscad_code": "// Tread Furniture Item - Realistic Style\n// Medium complexity, 3D printable design\n\n// Overall dimensions\nlength = 120;\nwidth = 40;\nheight = 20;\n\n// Wall thickness\nwall = 2;\n\n// Create tread body\nmodule tread_body() {\n    difference() {\n        // Main body\n        cube([length, width, height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall/2])\n            cube([length-wall*2, width-wall*2, height], center=true);\n    }\n}\n\n// Create tread pattern grooves\nmodule tread_pattern() {\n    groove_width = 3;\n    groove_depth = 1.5;\n    spacing = 8;\n    count = floor(length / spacing) - 1;\n    \n    for (i = [-count/2:count/2]) {\n        translate([i * spacing, 0, height/2 - groove_depth/2])\n            cube([groove_width, width - wall*2, groove_depth], center=true);\n    }\n}\n\n// Create side reinforcement ribs\nmodule side_ribs() {\n    rib_width = 4;\n    rib_height = 15;\n    spacing = 20;\n    count = floor(length / spacing) - 1;\n    \n    for (i = [-count/2:count/2]) {\n        translate([i * spacing, 0, 0])\n            cube([rib_width, width, rib_height], center=true);\n    }\n}\n\n// Create mounting holes for furniture attachment\nmodule mounting_holes() {\n    hole_diameter = 6;\n    counter_sink_diameter = 10;\n    counter_sink_depth = 2;\n    \n    // Define hole positions\n    positions = [\n        [-length/2 + 15, -width/2 + 10],\n        [-length/2 + 15, width/2 - 10],\n        [length/2 - 15, -width/2 + 10],\n        [length/2 - 15, width/2 - 10]\n    ];\n    \n    for (pos = positions) {\n        // Counter sink\n        translate([pos[0], pos[1], height/2 - counter_sink_depth/2])\n            cylinder(h=counter_sink_depth, d1=counter_sink_diameter, d2=hole_diameter, center=true);\n        \n        // Through hole\n        translate([pos[0], pos[1], -height/2])\n            cylinder(h=height, d=hole_diameter, center=true);\n    }\n}\n\n// Create textured grip surface\nmodule grip_surface() {\n    dot_diameter = 2;\n    dot_height = 0.5;\n    spacing = 5;\n    \n    for (x = [-length/2 + 10:spacing:length/2 - 10]) {\n        for (y = [-width/2 + 5:spacing:width/2 - 5]) {\n            translate([x, y, height/2 - dot_height/2])\n                cylinder(h=dot_height, d=dot_diameter, center=true);\n        }\n    }\n}\n\n// Create chamfered edges\nmodule chamfer_edges() {\n    edge_radius = 2;\n    \n    // Top edges\n    translate([0, 0, height/2])\n        minkowski() {\n            cube([length-wall*2, width-wall*2, 0.1], center=true);\n            cylinder(h=0.1, r=edge_radius, center=true);\n        }\n    \n    // Bottom edges\n    translate([0, 0, -height/2])\n        minkowski() {\n            cube([length-wall*2, width-wall*2, 0.1], center=true);\n            cylinder(h=0.1, r=edge_radius, center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Basic tread structure\n    tread_body();\n    \n    // Add tread pattern on top\n    tread_pattern();\n    \n    // Add side reinforcement\n    translate([0, 0, -height/2 + wall])\n        side_ribs();\n    \n    // Add grip surface\n    grip_surface();\n    \n    // Add chamfered edges\n    chamfer_edges();\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "natural_object": "rafter",
    "openscad_code": "$fa = 2;\n$fs = 1;\n\n// overall scale\nscale_factor = 1;\n\n// main beam dimensions\nbeam_length = 120 * scale_factor;\nbeam_width = 30 * scale_factor;\nbeam_height = 20 * scale_factor;\nwall_thickness = 2 * scale_factor;\n\n// joint notch\nnotch_width = 10 * scale_factor;\nnotch_depth = 6 * scale_factor;\n\n// bolt holes\nbolt_diam = 4 * scale_factor;\nbolt_head_diam = 7 * scale_factor;\nbolt_head_depth = 3 * scale_factor;\n\n// chamfer\nchamfer = 2 * scale_factor;\n\nmodule rafter_beam() {\n    difference() {\n        // main beam with chamfered edges\n        union() {\n            translate([beam_length/2, beam_width/2, beam_height/2])\n                cube([beam_length, beam_width, beam_height], center = true);\n            // chamfers along top edges\n            for (x = [beam_length/2 - chamfer, -beam_length/2 + chamfer]) {\n                translate([x, beam_width/2, beam_height - chamfer/2])\n                    rotate([0, 45, 0])\n                    cube([beam_length - 2*chamfer, chamfer*sqrt(2), chamfer*sqrt(2)], center = true);\n            }\n            // chamfers along bottom edges\n            for (x = [beam_length/2 - chamfer, -beam_length/2 + chamfer]) {\n                translate([x, beam_width/2, chamfer/2])\n                    rotate([0, -45, 0])\n                    cube([beam_length - 2*chamfer, chamfer*sqrt(2), chamfer*sqrt(2)], center = true);\n            }\n        }\n\n        // hollow core\n        translate([beam_length/2, beam_width/2, beam_height/2])\n            cube([beam_length - 2*wall_thickness,\n                  beam_width - 2*wall_thickness,\n                  beam_height - 2*wall_thickness], center = true);\n\n        // joint notch left side\n        translate([beam_length - notch_depth/2, beam_width/2, beam_height/2])\n            cube([notch_depth, notch_width, beam_height], center = true);\n\n        // joint notch right side\n        translate([notch_depth/2, beam_width/2, beam_height/2])\n            cube([notch_depth, notch_width, beam_height], center = true);\n\n        // bolt holes left\n        translate([beam_length - 15, beam_width/2, beam_height/2])\n            rotate([90, 0, 0])\n            cylinder(h = beam_width, d = bolt_diam, center = true);\n\n        // bolt holes right\n        translate([15, beam_width/2, beam_height/2])\n            rotate([90, 0, 0])\n            cylinder(h = beam_width, d = bolt_diam, center = true);\n\n        // countersinks left\n        translate([beam_length - 15, 0, beam_height/2])\n            rotate([90, 0, 0])\n            cylinder(h = beam_width/2 + 1, d1 = bolt_head_diam, d2 = bolt_diam, center = true);\n\n        translate([beam_length - 15, beam_width, beam_height/2])\n            rotate([90, 0, 0])\n            cylinder(h = beam_width/2 + 1, d1 = bolt_head_diam, d2 = bolt_diam, center = true);\n\n        // countersinks right\n        translate([15, 0, beam_height/2])\n            rotate([90, 0, 0])\n            cylinder(h = beam_width/2 + 1, d1 = bolt_head_diam, d2 = bolt_diam, center = true);\n\n        translate([15, beam_width, beam_height/2])\n            rotate([90, 0, 0])\n            cylinder(h = beam_width/2 + 1, d1 = bolt_head_diam, d2 = bolt_diam, center = true);\n    }\n}\n\n// grain texture bumps on top surface\nmodule grain_texture() {\n    for (i = [0:5:beam_length - 15]) {\n        for (j = [3:6:beam_width - 6]) {\n            translate([i - beam_length/2 + 7.5, j - beam_width/2, beam_height + 0.2])\n                scale([1, 1.5, 0.3])\n                sphere(d = 1.2 * scale_factor, $fn = 8);\n        }\n    }\n}\n\nunion() {\n    rafter_beam();\n    grain_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "ridge",
    "openscad_code": "// Ridge Furniture - Modern Ridge-Back Bench\n// A bench with ridge-like backrest elements, suitable for 3D printing\n\n// Overall dimensions\nbench_width = 120;\nbench_depth = 45;\nbench_height = 45;\nbackrest_height = 35;\n\n// Material thickness\nthickness = 2;\n\n// Number of ridge elements\nridge_count = 7;\n\n// Leg taper angle\nleg_taper = 5;\n\n// Main bench structure\nmodule bench_structure() {\n    // Seat platform\n    difference() {\n        translate([0, 0, bench_height/2])\n            cube([bench_width, bench_depth, thickness], center=true);\n        \n        // Cable management hole\n        translate([0, 0, bench_height/2 + thickness/2])\n            cylinder(h=thickness+1, r=5, $fn=32);\n    }\n}\n\n// Tapered legs\nmodule tapered_leg(x_pos) {\n    translate([x_pos, 0, 0])\n        linear_extrude(height=bench_height, scale=[1, 0.8])\n            square([thickness*3, thickness*3], center=true);\n}\n\n// Ridge backrest element\nmodule ridge_element(x_pos, height_var) {\n    translate([x_pos - bench_width/2 + thickness, 0, bench_height + backrest_height/2])\n        cube([thickness*2, bench_depth - thickness*2, height_var], center=true);\n}\n\n// Support rail between legs\nmodule support_rail() {\n    translate([0, 0, bench_height/4])\n        cube([bench_width - thickness*6, thickness, thickness*2], center=true);\n}\n\n// Assembly\nunion() {\n    // Bench structure\n    bench_structure();\n    \n    // Legs with proper spacing\n    for (x = [-bench_width/2 + thickness*6, bench_width/2 - thickness*6]) {\n        tapered_leg(x);\n    }\n    \n    // Support rails for stability\n    support_rail();\n    translate([0, bench_depth/2 - thickness, bench_height/2])\n        cube([bench_width - thickness*6, thickness, bench_height], center=true);\n    \n    // Ridge backrest elements\n    for (i = [0:ridge_count-1]) {\n        x_pos = (i * bench_width) / (ridge_count - 1);\n        height = backrest_height - abs(i - (ridge_count-1)/2) * 2;\n        ridge_element(x_pos, height);\n    }\n    \n    // Top stabilizer bar\n    translate([0, 0, bench_height + backrest_height - thickness/2])\n        cube([bench_width, thickness*2, thickness], center=true);\n        \n    // Side supports for backrest\n    for (x = [-bench_width/2 + thickness*3, bench_width/2 - thickness*3]) {\n        translate([x, 0, bench_height + backrest_height/2])\n            cube([thickness*2, thickness, backrest_height], center=true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "keystone",
    "openscad_code": "// Keystone-shaped stool (furniture piece)\n// Dimensions: 120mm height, 150mm width, 150mm depth\n// Suitable for 3D printing with 2mm wall thickness\n\n// Overall dimensions\nstool_height = 120;\nseat_width = 150;\nseat_depth = 150;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Keystone angle calculation\nkeystone_angle = 30; // degrees\n\n// Leg dimensions\nleg_height = stool_height - 15; // account for seat thickness\nleg_width = 20;\nleg_depth = 20;\n\n// Seat thickness\nseat_thickness = 15;\n\n// Support ring dimensions\nsupport_height = 60;\nsupport_thickness = 8;\n\n// Create the keystone stool\nmodule keystone_stool() {\n    // Main seat - keystone shaped top\n    difference() {\n        // Main keystone shape\n        union() {\n            // Central rectangular part\n            cube([seat_width * 0.6, seat_depth, seat_thickness], center=true);\n            \n            // Tapered ends (keystone shape)\n            translate([seat_width * 0.3, 0, 0])\n                rotate([0, 0, keystone_angle])\n                    cube([seat_width * 0.4, seat_depth, seat_thickness], center=true);\n            \n            translate([-seat_width * 0.3, 0, 0])\n                rotate([0, 0, -keystone_angle])\n                    cube([seat_width * 0.4, seat_depth, seat_thickness], center=true);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -wall_thickness/2])\n            cube([seat_width - wall_thickness*2, seat_depth - wall_thickness*2, seat_thickness + wall_thickness], center=true);\n    }\n    \n    // Four legs\n    leg_positions = [\n        [seat_width * 0.35, seat_depth * 0.35],\n        [-seat_width * 0.35, seat_depth * 0.35],\n        [seat_width * 0.35, -seat_depth * 0.35],\n        [-seat_width * 0.35, -seat_depth * 0.35]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -leg_height/2 - seat_thickness/2]) {\n            difference() {\n                // Main leg\n                cube([leg_width, leg_depth, leg_height], center=true);\n                \n                // Hollow leg for 3D printing\n                translate([0, 0, -wall_thickness/2])\n                    cube([leg_width - wall_thickness*2, leg_depth - wall_thickness*2, leg_height + wall_thickness], center=true);\n            }\n            \n            // Leg-to-seat joint reinforcement\n            translate([pos[0], pos[1], -seat_thickness/2])\n                cylinder(h=10, r=leg_width/2, $fn=20);\n        }\n    }\n    \n    // Support ring connecting legs\n    support_width = seat_width * 0.7;\n    support_depth = seat_depth * 0.7;\n    \n    difference() {\n        // Outer support ring\n        translate([0, 0, -support_height/2 - seat_thickness/2])\n            cube([support_width, support_depth, support_thickness], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -support_height/2 - seat_thickness/2 - 0.1])\n            cube([support_width - wall_thickness*2, support_depth - wall_thickness*2, support_thickness + 0.2], center=true);\n    }\n    \n    // Corner brackets for additional support\n    bracket_size = 10;\n    bracket_thickness = 3;\n    \n    for(pos = leg_positions) {\n        // Diagonal support brackets\n        translate([pos[0] * 0.8, pos[1] * 0.8, -seat_thickness/2 - support_height/2]) {\n            rotate([0, 0, atan2(pos[1], pos[0])])\n                cube([bracket_size, bracket_thickness, support_height/2], center=false);\n        }\n    }\n    \n    // Seat surface texture - slight curvature for comfort\n    difference() {\n        translate([0, 0, seat_thickness/2 + 0.1])\n            sphere(d=seat_width * 1.5, $fn=50);\n        \n        translate([0, 0, seat_thickness - 1])\n            cube([seat_width * 2, seat_depth * 2, seat_thickness * 2], center=true);\n    }\n}\n\n// Generate the stool\nkeystone_stool();",
    "renders": true
  },
  {
    "natural_object": "capstone",
    "openscad_code": "// Capstone Furniture - Realistic Style Rocking Chair\n// Dimensions: 100mm (width) x 120mm (depth) x 80mm (height)\n// Wall thickness: 2mm throughout\n\n$fn = 32;\n\nmodule chair_seat() {\n    // Main seat platform with rounded edges\n    difference() {\n        translate([0, 0, 40]) cube([80, 60, 4], center=true);\n        translate([0, 0, 42]) cube([76, 56, 4], center=true);\n    }\n    \n    // Seat surface texture - slats\n    for(i = [-35:7:35]) {\n        translate([i, 0, 42]) cube([6, 56, 1], center=true);\n    }\n}\n\nmodule chair_back() {\n    // Curved backrest\n    difference() {\n        translate([0, -25, 60]) rotate([10, 0, 0]) cube([70, 4, 35], center=true);\n        translate([0, -23, 62]) rotate([10, 0, 0]) cube([66, 4, 31], center=true);\n    }\n    \n    // Backrest slats\n    for(i = [-30:10:30]) {\n        translate([i, -25, 60]) rotate([10, 0, 0]) cube([8, 4, 30], center=true);\n    }\n}\n\nmodule chair_rockers() {\n    // Left rocker\n    difference() {\n        translate([-38, 0, 10]) rotate([90, 0, 0]) \n            cylinder(h=2, r1=45, r2=45);\n        translate([-38, 0, 10]) rotate([90, 0, 0]) \n            cylinder(h=2, r1=43, r2=43);\n    }\n    \n    // Right rocker\n    difference() {\n        translate([38, 0, 10]) rotate([90, 0, 0]) \n            cylinder(h=2, r1=45, r2=45);\n        translate([38, 0, 10]) rotate([90, 0, 0]) \n            cylinder(h=2, r1=43, r2=43);\n    }\n}\n\nmodule chair_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        difference() {\n            translate([side * 35, 25, 20]) cylinder(h=40, r=3);\n            translate([side * 35, 25, 20]) cylinder(h=40, r=1);\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        difference() {\n            translate([side * 35, -25, 20]) cylinder(h=40, r=3);\n            translate([side * 35, -25, 20]) cylinder(h=40, r=1);\n        }\n    }\n}\n\nmodule chair_supports() {\n    // Front support bar\n    difference() {\n        translate([0, 25, 20]) rotate([0, 90, 0]) cylinder(h=70, r=2);\n        translate([0, 27, 20]) rotate([0, 90, 0]) cylinder(h=70, r=0);\n    }\n    \n    // Back support bar\n    difference() {\n        translate([0, -25, 20]) rotate([0, 90, 0]) cylinder(h=70, r=2);\n        translate([0, -23, 20]) rotate([0, 90, 0]) cylinder(h=70, r=0);\n    }\n    \n    // Side support bars\n    for(side = [-1, 1]) {\n        difference() {\n            translate([side * 35, 0, 20]) rotate([90, 0, 0]) cylinder(h=50, r=2);\n            translate([side * 37, 0, 20]) rotate([90, 0, 0]) cylinder(h=50, r=0);\n        }\n    }\n}\n\nmodule chair_arms() {\n    // Left armrest\n    difference() {\n        translate([-38, 0, 45]) cube([4, 50, 15], center=true);\n        translate([-36, 0, 47]) cube([0, 46, 11], center=true);\n    }\n    \n    // Right armrest\n    difference() {\n        translate([38, 0, 45]) cube([4, 50, 15], center=true);\n        translate([36, 0, 47]) cube([0, 46, 11], center=true);\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_seat();\n    chair_back();\n    chair_rockers();\n    chair_legs();\n    chair_supports();\n    chair_arms();\n}",
    "renders": true
  },
  {
    "natural_object": "cornerstone",
    "openscad_code": "// Cornerstone Furniture - Realistic Style Corner Bookcase\n// Overall dimensions: 120mm (H) x 100mm (W) x 35mm (D)\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Main bookcase frame module\nmodule frame() {\n    // Left side panel\n    translate([0, 0, 0])\n        cube([wall_thickness, 100, 120]);\n    \n    // Right side panel\n    translate([35-wall_thickness, 0, 0])\n        cube([wall_thickness, 100, 120]);\n    \n    // Back panel\n    translate([wall_thickness, 0, 0])\n        cube([35-2*wall_thickness, wall_thickness, 120]);\n    \n    // Top panel\n    translate([wall_thickness, wall_thickness, 120-wall_thickness])\n        cube([35-2*wall_thickness, 100-2*wall_thickness, wall_thickness]);\n    \n    // Bottom panel\n    translate([wall_thickness, wall_thickness, 0])\n        cube([35-2*wall_thickness, 100-2*wall_thickness, wall_thickness]);\n}\n\n// Shelf module with support brackets\nmodule shelf(height) {\n    // Main shelf\n    translate([wall_thickness, wall_thickness, height])\n        cube([35-2*wall_thickness, 100-2*wall_thickness, wall_thickness]);\n    \n    // Support brackets (triangular)\n    translate([wall_thickness, wall_thickness, height-wall_thickness])\n        cube([8, 8, wall_thickness]);\n    \n    translate([35-wall_thickness-8, wall_thickness, height-wall_thickness])\n        cube([8, 8, wall_thickness]);\n    \n    // Bracket reinforcements\n    difference() {\n        translate([wall_thickness, wall_thickness, height-wall_thickness])\n            cube([8, 8, wall_thickness*2]);\n        translate([wall_thickness+1, wall_thickness+1, height-wall_thickness])\n            cube([6, 6, wall_thickness*2]);\n    }\n    \n    difference() {\n        translate([35-wall_thickness-8, wall_thickness, height-wall_thickness])\n            cube([8, 8, wall_thickness*2]);\n        translate([35-wall_thickness-7, wall_thickness+1, height-wall_thickness])\n            cube([6, 6, wall_thickness*2]);\n    }\n}\n\n// Back panel detail - vertical slats\nmodule back_slats() {\n    for(i = [0:8]) {\n        translate([wall_thickness+2, wall_thickness+2+i*12, wall_thickness])\n            cube([35-4*wall_thickness, 8, 120-2*wall_thickness]);\n    }\n}\n\n// Corner trim details\nmodule corner_trim() {\n    // Front left trim\n    translate([0, 98, 0])\n        cube([wall_thickness*2, 2, 120]);\n    \n    // Front right trim\n    translate([35-wall_thickness*2, 98, 0])\n        cube([wall_thickness*2, 2, 120]);\n    \n    // Top front trim\n    translate([0, 98, 120-wall_thickness*2])\n        cube([35, 2, wall_thickness*2]);\n    \n    // Bottom front trim\n    translate([0, 98, 0])\n        cube([35, 2, wall_thickness*2]);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    union() {\n        frame();\n        \n        // Shelves at different heights\n        shelf(30);\n        shelf(60);\n        shelf(90);\n        \n        // Back detail\n        back_slats();\n        \n        // Trim details\n        corner_trim();\n    }\n    \n    // Decorative top molding\n    translate([-2, 96, 120-wall_thickness])\n        cube([39, 6, 4]);\n    \n    // Base molding\n    translate([-2, 96, 0])\n        cube([39, 6, 4]);\n    \n    // Side molding details\n    for(i = [0:3]) {\n        translate([-2, 20+i*20, 10+i*25])\n            cube([2, 15, 10]);\n    }\n    \n    for(i = [0:3]) {\n        translate([35, 20+i*20, 10+i*25])\n            cube([2, 15, 10]);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "buttress",
    "openscad_code": "// Buttress Bookend / Shelf Support\n// Realistic furniture-style buttress for 3D printing\n// Overall size: 120mm wide x 40mm deep x 100mm tall\n\nmodule buttress_base() {\n    // Main base platform - 2mm thick\n    translate([0, 0, -2])\n        cube([120, 40, 2], center=true);\n    \n    // Front decorative lip\n    difference() {\n        translate([0, -19, 0])\n            cube([116, 4, 6], center=true);\n        translate([0, -21, 1])\n            cube([112, 2, 8], center=true);\n    }\n}\n\nmodule buttress_arch() {\n    // Main support arch\n    difference() {\n        // Solid arch shape\n        union() {\n            // Left pier\n            translate([-45, 0, 25])\n                cube([16, 36, 50], center=true);\n            \n            // Right pier\n            translate([45, 0, 25])\n                cube([16, 36, 50], center=true);\n            \n            // Arch top\n            translate([0, 0, 50])\n                cube([106, 36, 10], center=true);\n        }\n        \n        // Gothic arch opening\n        translate([0, 0, 30])\n            rotate([0, 90, 0])\n                cylinder(h=80, r1=35, r2=35, $fn=32);\n        \n        // Bottom arch opening\n        translate([0, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h=80, r1=25, r2=25, $fn=32);\n    }\n}\n\nmodule flying_buttress() {\n    // Flying buttress arm\n    translate([55, 0, 40])\n        rotate([0, 0, -30])\n            union() {\n                // Main arm\n                cube([50, 8, 8], center=true);\n                \n                // Support strut\n                translate([20, 0, -15])\n                    rotate([30, 0, 0])\n                        cube([30, 6, 6], center=true);\n            };\n}\n\nmodule decorative_details() {\n    // Quatrefoil details on piers\n    for(side = [-1, 1]) {\n        translate([side * 45, 0, 35])\n            difference() {\n                cylinder(h=4, r=6, $fn=32);\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90])\n                        translate([3, 0, -1])\n                            cylinder(h=6, r=2.5, $fn=16);\n                }\n            }\n    }\n    \n    // Corbels under arch\n    for(pos = [-30, 0, 30]) {\n        translate([pos, 18, 44])\n            cube([10, 4, 8], center=true);\n    }\n    \n    // Bottom molding\n    for(pos = [-40, -20, 0, 20, 40]) {\n        translate([pos, -15, 2])\n            cube([18, 2, 4], center=true);\n    }\n}\n\nmodule buttress_furniture() {\n    union() {\n        buttress_base();\n        buttress_arch();\n        flying_buttress();\n        decorative_details();\n    }\n}\n\n// Render the complete model\nbuttress_furniture();",
    "renders": true
  },
  {
    "natural_object": "pilaster",
    "openscad_code": "// Realistic pilaster furniture element\n// Dimensions in mm, ready for 3D printing\n\nmodule pilaster(width=20, depth=20, height=150) {\n    // Main body - slightly tapered for realistic look\n    difference() {\n        // Main column body\n        translate([0, 0, height/2])\n            scale([0.95, 0.95, 1])\n                cube([width, depth, height], center=true);\n        \n        // Hollow center for 3D printing efficiency\n        translate([0, 0, height/2])\n            cube([width-4, depth-4, height-2], center=true);\n    }\n    \n    // Base molding\n    translate([0, 0, 2])\n    difference() {\n        cube([width+6, depth+6, 4], center=true);\n        translate([0, 0, 2])\n            cube([width+2, depth+2, 4], center=true);\n    }\n    \n    // Top capital\n    translate([0, 0, height-3])\n    difference() {\n        cube([width+6, depth+6, 6], center=true);\n        translate([0, 0, 3])\n            cube([width+2, depth+2, 6], center=true);\n    }\n    \n    // Fluting details\n    for(i=[-3:1:3]) {\n        if(i != 0) {\n            translate([i*2.5, 0, 10])\n                rotate([0, 90, 0])\n                    cylinder(h=depth-1, r=0.5, $fn=8);\n        }\n    }\n    \n    // Structural tenon at bottom for furniture joints\n    translate([0, 0, 0])\n        cylinder(h=5, r=4, $fn=6);\n    \n    // Mortise at top for furniture joints\n    translate([0, 0, height])\n        cylinder(h=5, r=4, $fn=6);\n    \n    // Decorative inset panels on front\n    translate([0, depth/2-1, height/2])\n    difference() {\n        cube([width-6, 2, height-20], center=true);\n        translate([0, 1, 0])\n            cube([width-10, 1, height-24], center=true);\n    }\n    \n    // Side reinforcements\n    translate([width/2-1, 0, height/2])\n        cube([2, depth-4, height-10], center=true);\n    translate([-width/2+1, 0, height/2])\n        cube([2, depth-4, height-10], center=true);\n}\n\n// Create the pilaster\npilaster();",
    "renders": true
  },
  {
    "natural_object": "pier",
    "openscad_code": "// Pier furniture - realistic style, medium complexity\n// A wooden pier with support beams, decking, and railings\n\nmodule pier_deck(length, width, thickness) {\n    // Main deck planks\n    for (i = [0:4:length-4]) {\n        translate([i, 0, 0])\n            cube([3.8, width, thickness]);\n    }\n    \n    // Cross support beams underneath\n    for (j = [0:10:width-10]) {\n        translate([-2, j+5, -thickness-2])\n            cube([length+4, 2, 2]);\n    }\n}\n\nmodule support_post(height) {\n    // Main post\n    difference() {\n        cube([4, 4, height]);\n        \n        // Chamfer edges for realistic look\n        translate([-0.5, -0.5, -0.5])\n            cube([5, 5, 0.5]);\n        translate([-0.5, -0.5, height])\n            cube([5, 5, 0.5]);\n    }\n    \n    // Base plate\n    translate([-1, -1, -2])\n        cube([6, 6, 2]);\n}\n\nmodule railing_section(length, height) {\n    // Bottom rail\n    translate([0, -1, 0])\n        cube([length, 2, 3]);\n    \n    // Top rail\n    translate([0, -1, height-3])\n        cube([length, 2, 3]);\n    \n    // Vertical balusters\n    for (k = [2:4:length-2]) {\n        translate([k, 0, 3])\n            cube([1.5, 1.5, height-6]);\n    }\n}\n\n// Main pier assembly\nmodule pier() {\n    pier_length = 120;\n    pier_width = 40;\n    deck_thickness = 2;\n    post_height = 25;\n    \n    // Main deck\n    translate([0, 0, post_height])\n        pier_deck(pier_length, pier_width, deck_thickness);\n    \n    // Support posts\n    for (x = [0:20:pier_length-20]) {\n        for (y = [5, pier_width-9]) {\n            translate([x, y, 0])\n                support_post(post_height);\n        }\n    }\n    \n    // Side railings\n    translate([0, 0, post_height+deck_thickness])\n        railing_section(pier_length, 15);\n    translate([0, pier_width, post_height+deck_thickness])\n        railing_section(pier_length, 15);\n    \n    // End railing\n    translate([pier_length, 0, post_height+deck_thickness])\n        rotate([0, 0, 90])\n            railing_section(pier_width, 15);\n    \n    // Ladder on side\n    translate([-10, 10, 0])\n        for (rung = [0:5:post_height-5]) {\n            translate([0, 0, rung])\n                cube([3, 1, 0.5]);\n        }\n    \n    // Side supports\n    translate([pier_length/2, -5, 0])\n        rotate([0, 45, 0])\n            cube([3, 3, pier_length/1.5]);\n    translate([pier_length/2, pier_width+5, 0])\n        rotate([0, -45, 0])\n            cube([3, 3, pier_length/1.5]);\n}\n\n// Render the pier\npier();",
    "renders": true
  },
  {
    "natural_object": "abutment",
    "openscad_code": "// Medium-complexity realistic abutment furniture piece\n// Overall dimensions: 120 x 80 x 40 mm\n// Wall thickness: 2 mm everywhere for 3D-printability\n\n// Main module\nmodule abutment() {\n    // Base platform\n    difference() {\n        cube([120, 80, 5], center=true);          // full base\n        translate([0,0,-1]) cube([116, 76, 7], center=true); // hollow cavity\n    }\n\n    // Left upright frame\n    translate([-55,0,22.5]) rotate([90,0,0])\n    difference() {\n        cylinder(h=45, d1=12, d2=12, $fn=20);     // post\n        translate([0,0,-1]) cylinder(h=47, d1=8, d2=8, $fn=20); // hollow core\n    }\n\n    // Right upright frame\n    translate([55,0,22.5]) rotate([90,0,0])\n    difference() {\n        cylinder(h=45, d1=12, d2=12, $fn=20);     // post\n        translate([0,0,-1]) cylinder(h=47, d1=8, d2=8, $fn=20); // hollow core\n    }\n\n    // Back support rail\n    translate([0,-37,22.5])\n    difference() {\n        cube([106, 6, 45], center=true);          // rail body\n        translate([0,0,-1]) cube([102, 10, 47], center=true); // hollow cavity\n    }\n\n    // Front support rail\n    translate([0,37,22.5])\n    difference() {\n        cube([106, 6, 45], center=true);          // rail body\n        translate([0,0,-1]) cube([102, 10, 47], center=true); // hollow cavity\n    }\n\n    // Shelf slats\n    for (i = [-1, 0, 1]) {\n        translate([0, i*25, 10])\n        difference() {\n            cube([110, 4, 2], center=true);       // slat\n            translate([0,0,-1]) cube([106, 8, 4], center=true); // hollow\n        }\n    }\n\n    // Dowel pegs for shelf positioning\n    module peg(x, z) {\n        translate([x, 0, z]) rotate([90,0,0])\n        difference() {\n            cylinder(h=8, d1=3, d2=3, $fn=16);    // peg\n            translate([0,0,-1]) cylinder(h=10, d1=1.5, d2=1.5, $fn=16); // hole\n        }\n    }\n\n    peg(-52, 18);\n    peg(52, 18);\n    peg(-52, 26);\n    peg(52, 26);\n\n    // Corner braces\n    module brace(x, y) {\n        translate([x, y, 5])\n        difference() {\n            cube([10, 10, 8], center=true);       // brace block\n            translate([0,0,-1]) cube([6, 6, 10], center=true); // cavity\n        }\n    }\n\n    brace(-50, -30);\n    brace(50, -30);\n    brace(-50, 30);\n    brace(50, 30);\n\n    // Mounting holes\n    translate([0,0,2.5]) rotate([0,0,0])\n    cylinder(h=5, d1=4, d2=4, $fn=20);          // center hole\n    translate([-40,0,2.5]) rotate([0,0,0])\n    cylinder(h=5, d1=4, d2=4, $fn=20);          // left hole\n    translate([40,0,2.5]) rotate([0,0,0])\n    cylinder(h=5, d1=4, d2=4, $fn=20);          // right hole\n}\n\n// Render the abutment\nabutment();",
    "renders": true
  },
  {
    "natural_object": "baluster",
    "openscad_code": "// Realistic baluster for furniture (table/chair leg style)\n// Overall height: 120 mm, printable in one piece\n\n// Parameters\nbase_d = 25;            // Bottom diameter (mm)\ntop_d = 20;             // Top diameter (mm)\nneck_d = 15;            // Narrowest diameter at neck (mm)\nbulge_d = 28;           // Widest diameter at bulge (mm)\ntotal_h = 120;          // Total height (mm)\nwall_th = 2;            // Wall thickness for 3D printing (mm)\nsegments = 48;          // Smooth curves\n\n// Main module\nmodule baluster() {\n    // Base section - solid cylinder with chamfered bottom\n    translate([0, 0, 0])\n        cylinder(h=15, d1=base_d+4, d2=base_d, $fn=segments);\n    \n    // Transition from base to neck\n    translate([0, 0, 15])\n        cylinder(h=20, d1=base_d, d2=neck_d, $fn=segments);\n    \n    // Neck section - narrowest part\n    translate([0, 0, 35])\n        cylinder(h=25, d=neck_d, $fn=segments);\n    \n    // Bulge section - widest part\n    translate([0, 0, 60])\n        cylinder(h=30, d1=neck_d, d2=bulge_d, $fn=segments);\n    \n    // Upper taper to top\n    translate([0, 0, 90])\n        cylinder(h=25, d1=bulge_d, d2=top_d, $fn=segments);\n    \n    // Top section\n    translate([0, 0, 115])\n        cylinder(h=5, d=top_d, $fn=segments);\n    \n    // Decorative rings using difference\n    // Ring 1 - near base\n    translate([0, 0, 12])\n        difference() {\n            cylinder(h=3, d=base_d+2, $fn=segments);\n            cylinder(h=3.2, d=base_d-2, $fn=segments);\n        }\n    \n    // Ring 2 - at bulge\n    translate([0, 0, 75])\n        difference() {\n            cylinder(h=3, d=bulge_d+2, $fn=segments);\n            cylinder(h=3.2, d=bulge_d-2, $fn=segments);\n        }\n    \n    // Ring 3 - below top\n    translate([0, 0, 110])\n        difference() {\n            cylinder(h=3, d=top_d+2, $fn=segments);\n            cylinder(h=3.2, d=top_d-2, $fn=segments);\n        }\n    \n    // Structural reinforcement - internal ribs\n    difference() {\n        // Outer shell\n        union() {\n            // Create hollow shell using difference\n            difference() {\n                union() {\n                    translate([0, 0, 0])\n                        cylinder(h=15, d1=base_d+4, d2=base_d, $fn=segments);\n                    translate([0, 0, 15])\n                        cylinder(h=20, d1=base_d, d2=neck_d, $fn=segments);\n                    translate([0, 0, 35])\n                        cylinder(h=25, d=neck_d, $fn=segments);\n                    translate([0, 0, 60])\n                        cylinder(h=30, d1=neck_d, d2=bulge_d, $fn=segments);\n                    translate([0, 0, 90])\n                        cylinder(h=25, d1=bulge_d, d2=top_d, $fn=segments);\n                    translate([0, 0, 115])\n                        cylinder(h=5, d=top_d, $fn=segments);\n                }\n                \n                // Hollow interior\n                translate([0, 0, -1])\n                    cylinder(h=total_h+2, d=top_d-4, $fn=segments);\n            }\n        }\n        \n        // Internal support ribs (4 ribs at 90 degrees)\n        for (i = [0:90:359]) {\n            rotate([0, 0, i])\n                translate([-wall_th/2, 0, 0])\n                    cube([wall_th, (base_d-4)/2-2, total_h-10]);\n        }\n    }\n    \n    // Top mounting hole for furniture connection\n    translate([0, 0, 119])\n        cylinder(h=5, d=8, $fn=16);\n    \n    // Bottom mounting hole\n    translate([0, 0, 0])\n        cylinder(h=10, d=8, $fn=16);\n}\n\n// Render the baluster\nbaluster();",
    "renders": true
  },
  {
    "natural_object": "banister",
    "openscad_code": "// Realistic Banister (medium complexity)\n// 3D printable, ~90 mm height, 2 mm wall thickness\n\n// Overall dimensions\nhandrail_h = 12;\nhandrail_w = 90;\nhandrail_d = 12;\npost_h = 70;\npost_w = 10;\npost_d = 10;\nbaluster_base_h = 10;\nbaluster_mid_h = 50;\nbaluster_top_h = 8;\nbaluster_r = 4;\nbase_h = 5;\nbase_w = 100;\nbase_d = 20;\n\n// Helper module for rounded rectangle profile\nmodule rounded_rect_profile(w, h, r, fn=16) {\n    difference() {\n        square([w, h], center=true);\n        for (x = [-w/2+r, w/2-r])\n            for (y = [-h/2+r, h/2-r])\n                translate([x, y]) circle(r=r, $fn=fn);\n    }\n}\n\n// Handrail with rounded top\nmodule handrail() {\n    difference() {\n        union() {\n            // Main body\n            translate([0, 0, handrail_h/2])\n                cube([handrail_w, handrail_d, handrail_h], center=true);\n            // Rounded top\n            translate([0, 0, handrail_h])\n                rotate([90, 0, 0])\n                    cylinder(h=handrail_w, d=handrail_d, center=true);\n        }\n        // Hollow inside for 2 mm walls\n        translate([0, 0, handrail_h/2])\n            cube([handrail_w-4, handrail_d-4, handrail_h-2], center=true);\n    }\n}\n\n// Square post with chamfered edges\nmodule post(h) {\n    difference() {\n        cube([post_w, post_d, h], center=true);\n        // Hollow core\n        cube([post_w-4, post_d-4, h-2], center=true);\n    }\n    // Chamfer edges\n    for (x = [-post_w/2+2, post_w/2-2])\n        for (y = [-post_d/2+2, post_d/2-2])\n            translate([x, y, h/2-1])\n                cube([4, 4, 2], center=true);\n}\n\n// Decorative baluster\nmodule baluster() {\n    union() {\n        // Base\n        cylinder(h=baluster_base_h, d=baluster_r*2+2, $fn=16);\n        // Middle tapered shaft\n        translate([0, 0, baluster_base_h])\n            cylinder(h=baluster_mid_h, d1=baluster_r*2, d2=baluster_r*1.5, $fn=16);\n        // Top collar\n        translate([0, 0, baluster_base_h+baluster_mid_h])\n            cylinder(h=baluster_top_h, d=baluster_r*2.2, $fn=16);\n    }\n    // Hollow inside\n    difference() {\n        children();\n        translate([0, 0, 1])\n            cylinder(h=baluster_base_h+baluster_mid_h+baluster_top_h-2, d=baluster_r*2-3.5, $fn=16);\n    }\n}\n\n// Base plate with mounting holes\nmodule base_plate() {\n    difference() {\n        cube([base_w, base_d, base_h], center=true);\n        // Mounting holes (4 mm diameter)\n        for (x = [-base_w/2+10, base_w/2-10])\n            for (y = [-base_d/2+5, base_d/2-5])\n                translate([x, y, 0])\n                    cylinder(h=base_h+1, d=4, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, base_h/2])\n        base_plate();\n\n    // Posts\n    translate([-handrail_w/2+post_w/2, 0, base_h+post_h/2])\n        post(post_h);\n    translate([handrail_w/2-post_w/2, 0, base_h+post_h/2])\n        post(post_h);\n\n    // Balusters\n    baluster_count = 3;\n    for (i = [1:baluster_count]) {\n        translate([-handrail_w/2+post_w+10+(handrail_w-2*post_w-20)/(baluster_count+1)*i,\n                   0,\n                   base_h])\n            baluster();\n    }\n\n    // Handrail\n    translate([0, 0, base_h+post_h+handrail_h/2])\n        handrail();\n}",
    "renders": true
  },
  {
    "natural_object": "handrail",
    "openscad_code": "// Handrail Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm length x 40mm width x 120mm height\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main handrail post\nmodule handrail_post(height = 120, width = 40) {\n    // Base plate\n    translate([0, 0, 0]) {\n        cube([width + 10, width + 10, 5], center = true);\n    }\n    \n    // Main vertical post\n    translate([0, 0, height/2]) {\n        difference() {\n            cube([width, width, height], center = true);\n            // Hollow center for material saving\n            translate([0, 0, 0]) {\n                cube([width - wall_thickness*2, width - wall_thickness*2, height - 5], center = true);\n            }\n        }\n    }\n    \n    // Decorative cap detail\n    translate([0, 0, height + 2.5]) {\n        cube([width + 5, width + 5, 5], center = true);\n    }\n}\n\n// Handrail bar with decorative elements\nmodule handrail_bar(length = 120) {\n    // Main bar\n    translate([0, 0, 110]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = length, r = 15/2, center = true);\n                // Hollow center\n                cylinder(h = length + 2, r = 15/2 - wall_thickness, center = true);\n            }\n        }\n    }\n    \n    // Decorative rings\n    for(i = [-1, 1]) {\n        translate([i * length/3, 0, 110]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 5, r = 20/2, center = true);\n            }\n        }\n    }\n}\n\n// Support brackets\nmodule support_bracket() {\n    translate([-55, 0, 90]) {\n        rotate([0, 45, 0]) {\n            difference() {\n                cube([20, 15, 10], center = true);\n                translate([0, 0, 5]) {\n                    cube([20, 15, 5], center = true);\n                }\n            }\n        }\n    }\n    \n    translate([55, 0, 90]) {\n        rotate([0, -45, 0]) {\n            difference() {\n                cube([20, 15, 10], center = true);\n                translate([0, 0, 5]) {\n                    cube([20, 15, 5], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Mounting plates\nmodule mounting_plates() {\n    // Bottom mount\n    translate([0, 0, 0]) {\n        for(x = [-15, 15]) {\n            for(y = [-15, 15]) {\n                translate([x, y, -2.5]) {\n                    cylinder(h = 5, r = 3, center = true);\n                }\n            }\n        }\n    }\n    \n    // Wall mount brackets\n    translate([0, 25, 110]) {\n        cube([30, 5, 10], center = true);\n    }\n    translate([0, -25, 110]) {\n        cube([30, 5, 10], center = true);\n    }\n}\n\n// Assembly\nhandrail_post();\nhandrail_bar();\nsupport_bracket();\nmounting_plates();",
    "renders": true
  },
  {
    "natural_object": "newel",
    "openscad_code": "// Newel Post - Realistic Style, Medium Complexity\n// Dimensions: 100mm tall, 40mm wide/deep\n\n$fn = 36;\n\n// Main parameters\npost_height = 100;\npost_width = 40;\nwall_thickness = 2;\n\nmodule newel_post() {\n    union() {\n        // Base plinth\n        translate([0, 0, 0])\n            cube([post_width, post_width, 8], center = true);\n        \n        // Base molding detail\n        translate([0, 0, 4])\n            cylinder(h = 4, r1 = post_width/2 - 1, r2 = post_width/2 - 1, center = true);\n        \n        // Main post body\n        translate([0, 0, 12 + post_height/2 - 10])\n            cube([post_width - 4, post_width - 4, post_height - 24], center = true);\n        \n        // Decorative recessed panels on four sides\n        for(side = [0:3]) {\n            rotate([0, 0, side * 90])\n                translate([0, post_width/2 - 2, 12 + post_height/2 - 10])\n                    cube([post_width - 12, wall_thickness, post_height - 40], center = true);\n        }\n        \n        // Top cap\n        translate([0, 0, post_height - 4])\n            cube([post_width, post_width, 8], center = true);\n        \n        // Decorative top molding\n        translate([0, 0, post_height - 8])\n            cylinder(h = 4, r1 = post_width/2 - 1, r2 = post_width/2 - 1, center = true);\n        \n        // Chamfered corners\n        for(corner = [0:3]) {\n            rotate([0, 0, corner * 90])\n                translate([post_width/2 - 2, post_width/2 - 2, 12 + post_height/2 - 10])\n                    scale([1, 1, (post_height - 24)/5])\n                        cylinder(h = 5, r = 2, center = true);\n        }\n        \n        // Dowel pin hole for railing attachment (front face)\n        translate([0, post_width/2 - wall_thickness, post_height/2])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = 3, center = true);\n        \n        // Screw holes for base mounting\n        for(screw = [0:3]) {\n            rotate([0, 0, screw * 90 + 45])\n                translate([post_width/2 - 6, post_width/2 - 6, 4])\n                    cylinder(h = 8, r = 1.5, center = true);\n        }\n        \n        // Decorative fluting details\n        for(flute = [0:7]) {\n            rotate([0, 0, flute * 45])\n                translate([0, 0, 12 + (post_height - 24) * 0.75])\n                    difference() {\n                        cylinder(h = 15, r1 = post_width/2 - 2, r2 = post_width/2 - 3, center = true);\n                        cylinder(h = 16, r1 = post_width/2 - 4, r2 = post_width/2 - 5, center = true);\n                    }\n        }\n    }\n}\n\n// Render the newel post\nnewel_post();",
    "renders": true
  },
  {
    "natural_object": "corbel",
    "openscad_code": "// Furniture-style corbel bracket (medium complexity, realistic style)\n// Overall dimensions: 100mm wide x 80mm deep x 150mm high\n// Wall thickness: 2mm throughout for 3D printability\n\n$fn = 32;  // Smooth curves\n\n// Main body with realistic proportions\nmodule corbel_body() {\n    // Back mounting plate (hidden when mounted)\n    difference() {\n        // Main back plate\n        translate([0, 2, 75])\n            cube([100, 4, 150], center=true);\n        \n        // Screw holes for mounting (5mm diameter)\n        for (x = [-30, 0, 30])\n            translate([x, 0, 120])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=5.5);\n    }\n    \n    // Curved support arm\n    union() {\n        // Lower curved support\n        translate([0, 42, 30])\n            rotate([90, 0, 0])\n                cylinder(h=80, r1=40, r2=20);\n        \n        // Upper decorative curve\n        translate([0, 42, 120])\n            rotate([90, 0, 0])\n                cylinder(h=60, r1=30, r2=15);\n    }\n    \n    // Front face panel with furniture-style detail\n    difference() {\n        // Main front panel\n        translate([0, 42, 75])\n            cube([90, 2, 150], center=true);\n        \n        // Recessed panel details\n        translate([0, 43, 75])\n            cube([70, 1, 130], center=true);\n    }\n}\n\n// Decorative scrollwork at bottom\nmodule scroll_detail() {\n    // Left scroll\n    translate([-35, 42, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=10);\n    translate([-35, 42, 0])\n        rotate([90, 0, 90])\n            cylinder(h=15, r=10);\n    \n    // Right scroll\n    translate([35, 42, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=10);\n    translate([35, 42, 0])\n        rotate([90, 0, -90])\n            cylinder(h=15, r=10);\n}\n\n// Furniture-style molding detail at top\nmodule top_molding() {\n    // Base molding strip\n    translate([0, 42, 145])\n        cube([90, 2, 10], center=true);\n    \n    // Decorative beads\n    for (x = [-35:10:35])\n        translate([x, 43, 150])\n            sphere(d=6);\n}\n\n// Side reinforcement ribs\nmodule side_ribs() {\n    // Left rib\n    translate([-48, 22, 75])\n        rotate([0, 0, -10])\n            cube([4, 40, 150], center=true);\n    \n    // Right rib\n    translate([48, 22, 75])\n        rotate([0, 0, 10])\n            cube([4, 40, 150], center=true);\n}\n\n// Assembly\nunion() {\n    corbel_body();\n    scroll_detail();\n    top_molding();\n    side_ribs();\n}",
    "renders": true
  },
  {
    "natural_object": "cornice",
    "openscad_code": "// Cornice for top of a small cabinet/bookcase\n// Overall size: 120 mm wide × 25 mm deep × 35 mm high\n// Wall thickness ≈ 2 mm everywhere\n// No overhangs > 45°, printable without supports\n\n$fn = 32;  // smooth curves\n\n// Main body block\nmodule main_body() {\n    difference() {\n        // Full block\n        translate([0, 12.5, 17.5])\n            cube([116, 25, 35], center=true);\n\n        // Hollow cavity\n        translate([0, 12.5, 13.5])\n            cube([112, 21, 27], center=true);\n    }\n}\n\n// Crown moulding profile along front edge\nmodule crown_moulding() {\n    for (x = [-57:2:57]) {\n        hull() {\n            translate([x, 0, 35]) cube([2, 2, 2], center=true);\n            translate([x, 2, 37]) cube([2, 2, 2], center=true);\n            translate([x, 4, 36]) cube([2, 2, 2], center=true);\n            translate([x, 6, 34]) cube([2, 2, 2], center=true);\n            translate([x, 8, 30]) cube([2, 2, 2], center=true);\n        }\n    }\n}\n\n// Dentil detail under the crown\nmodule dentil_row() {\n    for (x = [-55:5:55]) {\n        translate([x, 12.5, 31])\n            cube([3, 4, 4], center=true);\n    }\n}\n\n// Side returns with simple cove\nmodule side_return(left = true) {\n    x = left ? -58 : 58;\n    difference() {\n        // Solid side\n        translate([x, 12.5, 17.5])\n            cube([4, 25, 35], center=true);\n        // Cove cutout\n        translate([x, 12.5, 30])\n            rotate([0, 90, 0])\n            cylinder(h=25, r1=8, r2=5, center=true);\n    }\n}\n\n// Keyhole mounting slots on back\nmodule mounting_slots() {\n    slot_depth = 1.5;\n    // Left slot\n    translate([-40, 25, 15])\n        rotate([90, 0, 0])\n        cylinder(h=slot_depth, d1=6, d2=3);\n    // Right slot\n    translate([40, 25, 15])\n        rotate([90, 0, 0])\n        cylinder(h=slot_depth, d1=6, d2=3);\n}\n\n// Assembly\nunion() {\n    main_body();\n    crown_moulding();\n    dentil_row();\n    side_return(true);\n    side_return(false);\n    mounting_slots();\n}",
    "renders": true
  },
  {
    "natural_object": "frieze",
    "openscad_code": "// Frieze-style bookshelf - realistic medium complexity\n// Overall dimensions: 120mm wide x 30mm deep x 80mm tall\n\n// Wall thickness constant\nwall = 2;\n\n// Main frame module\nmodule frame() {\n    // Left side panel\n    difference() {\n        translate([0, 0, 0])\n            cube([wall, 30, 80]);\n        // Cable management hole\n        translate([wall, 15, 40])\n            rotate([0, 90, 0])\n                cylinder(h=wall+1, r=4, $fn=20);\n    }\n    \n    // Right side panel\n    translate([120-wall, 0, 0])\n        cube([wall, 30, 80]);\n    \n    // Top rail\n    translate([0, 0, 80-wall])\n        cube([120, 30, wall]);\n    \n    // Bottom rail\n    translate([0, 0, 0])\n        cube([120, 30, wall]);\n    \n    // Back panel\n    translate([wall, 30-wall, wall])\n        cube([120-wall*2, wall, 80-wall*2]);\n}\n\n// Shelf module with support brackets\nmodule shelf(height, depth) {\n    // Main shelf\n    difference() {\n        translate([wall, wall, height])\n            cube([120-wall*2, depth-wall*2, wall]);\n        // Front edge rounding\n        translate([wall+2, wall+2, height+wall])\n            cube([120-wall*2-4, depth-wall*2-4, 2]);\n    }\n    \n    // Support brackets\n    for(x = [20, 50, 80, 110]) {\n        translate([x-5, wall, height-wall])\n            cube([10, depth-wall*2, wall*2]);\n    }\n}\n\n// Ornate frieze details\nmodule frieze_details() {\n    // Top molding\n    difference() {\n        translate([0, -2, 80])\n            cube([120, 4, 8]);\n        // Decorative cutouts\n        for(x = [10:20:110]) {\n            translate([x, -1, 84])\n                cube([8, 2, 4]);\n        }\n    }\n    \n    // Side scroll details\n    for(side = [0, 1]) {\n        mirror([side, 0, 0]) {\n            translate([side ? 120 : 0, 30, 60])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r1=8, r2=12, $fn=20);\n            \n            translate([side ? 110 : 10, 30, 70])\n                sphere(r=4, $fn=20);\n        }\n    }\n}\n\n// Base with feet\nmodule base() {\n    // Base platform\n    translate([-2, -2, -4])\n        cube([124, 34, 4]);\n    \n    // Feet\n    for(x = [15:90:105]) {\n        translate([x, 15, -4])\n            cylinder(h=4, r=5, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    frame();\n    \n    // Three shelves\n    shelf(25, 28);\n    shelf(45, 28);\n    shelf(65, 28);\n    \n    // Decorative elements\n    frieze_details();\n    \n    // Base support\n    base();\n    \n    // Small drawer at bottom\n    difference() {\n        translate([wall+10, wall, 5])\n            cube([100-wall*2-20, 24, 18]);\n        translate([wall+12, wall+2, 7])\n            cube([100-wall*2-24, 20, 14]);\n    }\n    \n    // Drawer handle\n    translate([60, wall+1, 14])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=2, $fn=20);\n}",
    "renders": true
  },
  {
    "natural_object": "molding",
    "openscad_code": "// Furniture molding - 75 mm length decorative trim for bookshelf top\n// Realistic style with medium complexity\n// No overhangs, 2 mm wall thickness, printable without supports\n\n// Overall dimensions\nlength = 75;\nheight = 12;\ndepth = 8;\n\n// Wall thickness\nwall = 2;\n\n// Main body with classic crown profile\nmodule crown_body() {\n    difference() {\n        // Main solid block\n        cube([length, depth, height]);\n        \n        // Hollow out back for mounting\n        translate([wall, 0, wall])\n        cube([length - 2*wall, depth, height - wall]);\n        \n        // Top edge chamfer\n        translate([0, 0, height])\n        rotate([0, 45, 0])\n        cube([length, depth*1.5, 3]);\n    }\n}\n\n// Decorative fillet on front face\nmodule front_fillet() {\n    translate([0, depth, 4])\n    rotate([90, 0, 0])\n    cylinder(h = length, r = 2, $fn = 20);\n}\n\n// Dentil molding blocks\nmodule dentil_blocks() {\n    block_width = 4;\n    block_height = 3;\n    gap = 2;\n    count = floor(length / (block_width + gap));\n    \n    for (i = [0 : count - 1]) {\n        translate([i * (block_width + gap) + gap/2, depth - wall, height - block_height - wall])\n        cube([block_width, wall, block_height]);\n    }\n}\n\n// Ornate scroll detail at ends\nmodule scroll_detail() {\n    // Left scroll\n    translate([wall, depth - wall, wall])\n    rotate([0, -90, 0])\n    cylinder(h = wall, r = 3, $fn = 20);\n    \n    translate([wall + 3, depth - wall, wall + 3])\n    rotate([90, 0, 0])\n    cylinder(h = wall, r = 2, $fn = 20);\n    \n    // Right scroll\n    translate([length - wall, depth - wall, wall])\n    rotate([0, -90, 0])\n    cylinder(h = wall, r = 3, $fn = 20);\n    \n    translate([length - wall - 3, depth - wall, wall + 3])\n    rotate([90, 0, 0])\n    cylinder(h = wall, r = 2, $fn = 20);\n}\n\n// Mounting holes for screws\nmodule mounting_holes() {\n    hole_diameter = 3.2;\n    \n    // Left hole\n    translate([length/4, depth/2, height/2])\n    rotate([0, 90, 0])\n    cylinder(h = depth, d = hole_diameter, $fn = 16);\n    \n    // Right hole\n    translate([3*length/4, depth/2, height/2])\n    rotate([0, 90, 0])\n    cylinder(h = depth, d = hole_diameter, $fn = 16);\n}\n\n// Assembly\nunion() {\n    crown_body();\n    front_fillet();\n    dentil_blocks();\n    scroll_detail();\n    \n    difference() {\n        // Add label tab\n        translate([length/2 - 10, 0, wall])\n        cube([20, wall, 4]);\n        \n        // Engraved text space\n        translate([length/2 - 8, -0.1, wall + 1])\n        cube([16, wall + 0.2, 2]);\n    }\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "natural_object": "baseboard",
    "openscad_code": "// Realistic Baseboard Furniture Item - Medium Complexity\n// Dimensions chosen for 3D printing: 120mm length x 25mm height x 12mm depth\n\n// Wall thickness constant\nwall = 2;\n\n// Main baseboard profile - hollow rectangular prism\nmodule baseboard_profile() {\n    difference() {\n        // Outer shell\n        cube([120, 12, 25]);\n        \n        // Inner cavity for weight reduction\n        translate([wall, wall, wall])\n            cube([120-2*wall, 12-2*wall, 25-2*wall]);\n    }\n}\n\n// Decorative top molding detail\nmodule top_molding() {\n    for(i = [0:10:110]) {\n        translate([i+5, 0, 23]) {\n            rotate([90, 0, 0])\n                cylinder(h=2, r1=3, r2=1.5, $fn=8);\n        }\n    }\n}\n\n// Quarter-round bottom molding\nmodule bottom_molding() {\n    difference() {\n        // Quarter cylinder base\n        translate([0, 12-wall, wall]) \n            rotate([90, 0, 0])\n                cylinder(h=120, r=wall, $fn=20);\n        \n        // Remove back half for flat mounting\n        translate([0, 12-wall, -1])\n            cube([120, wall, wall+2]);\n    }\n}\n\n// Cable management channel\nmodule cable_channel() {\n    // Channel cutout\n    translate([20, 6, 10])\n        cube([80, 6, 5]);\n    \n    // Channel cover clips\n    for(pos = [25, 45, 65, 85]) {\n        translate([pos, 6, 15])\n            cylinder(h=2, r=1.5, $fn=12);\n    }\n}\n\n// Mounting holes for screws\nmodule mounting_holes() {\n    for(x = [10, 30, 50, 70, 90, 110]) {\n        translate([x, 6, 12.5])\n            rotate([0, 90, 0])\n                cylinder(h=12, r=2.5, $fn=16);\n    }\n}\n\n// End caps for clean finish\nmodule end_caps() {\n    // Left end\n    translate([-0.1, 0, 0])\n        cube([0.2, 12, 25]);\n    \n    // Right end\n    translate([119.9, 0, 0])\n        cube([0.2, 12, 25]);\n}\n\n// Assembly\nunion() {\n    baseboard_profile();\n    top_molding();\n    bottom_molding();\n    cable_channel();\n    difference() {\n        end_caps();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "casing",
    "openscad_code": "// Modern media-console casing (realistic style, medium complexity)\n// External size: 120 x 60 x 45 mm – wall thickness 2 mm\n\n$fa = 2; $fs = 1;\n\nmodule console_body() {\n    difference() {\n        // Outer shell\n        cube([120, 60, 45], center = true);\n\n        // Inner cavity\n        translate([0, 0, 2])\n            cube([116, 56, 41], center = true);\n    }\n}\n\nmodule shelf() {\n    // Center shelf 2 mm thick\n    translate([0, 0, -10])\n        cube([116, 56, 2], center = true);\n}\n\nmodule back_panel() {\n    // Ventilation slots pattern\n    for (i = [-55:10:55])\n        translate([i, 30, 0])\n            cube([6, 2, 38]);\n}\n\nmodule cable_grommet() {\n    // Rear cable hole Ø10 mm\n    rotate([0, 90, 0])\n        translate([0, 30, 0])\n            cylinder(h = 2, d = 10, center = true);\n}\n\nmodule front_frame() {\n    // Decorative bezel 3 mm proud, 4 mm thick\n    difference() {\n        translate([0, -29, 0])\n            cube([118, 4, 43], center = true);\n        translate([0, -28, 0])\n            cube([114, 4, 39], center = true);\n    }\n}\n\nmodule feet() {\n    // Four rounded feet 8 mm high\n    positions = [[-55, -25], [55, -25], [-55, 25], [55, 25]];\n    for (p = positions) {\n        translate([p.x, p.y, -26.5])\n            cylinder(h = 8, d1 = 12, d2 = 8);\n    }\n}\n\nmodule assembly() {\n    union() {\n        console_body();\n        shelf();\n        front_frame();\n        feet();\n    }\n    difference() {\n        translate([0, 30, 0]) back_panel();\n        cable_grommet();\n    }\n}\n\nassembly();",
    "renders": true
  },
  {
    "natural_object": "jamb",
    "openscad_code": "// Jamb (door frame) furniture piece - realistic style, medium complexity\n// Overall dimensions: 100mm width, 15mm depth, 140mm height\n\n// Parameters\nwidth = 100;\ndepth = 15;\nheight = 140;\nwall_thickness = 2;\npost_width = 8;\nheader_height = 12;\npanel_thickness = 2;\n\n// Main module\nmodule jamb() {\n    // Left post\n    difference() {\n        cube([post_width, depth, height]);\n        \n        // Rabbet for door\n        translate([post_width-wall_thickness, wall_thickness, 0])\n            cube([wall_thickness, depth-wall_thickness*2, height]);\n            \n        // Hinge recesses (3 hinges)\n        for(h = [20, height/2, height-20]) {\n            translate([0, depth-wall_thickness, h-5])\n                cube([wall_thickness*2, wall_thickness, 10]);\n        }\n    }\n    \n    // Right post\n    translate([width-post_width, 0, 0])\n        difference() {\n            cube([post_width, depth, height]);\n            \n            // Rabbet for door\n            translate([0, wall_thickness, 0])\n                cube([wall_thickness, depth-wall_thickness*2, height]);\n                \n            // Strike plate recess\n            translate([post_width-wall_thickness, depth-wall_thickness, height/2-10])\n                cube([wall_thickness, wall_thickness, 20]);\n                \n            // Bolt recess\n            translate([post_width-wall_thickness*2, depth-wall_thickness, height/2-2])\n                cube([wall_thickness, wall_thickness, 4]);\n        }\n    \n    // Header\n    translate([post_width, 0, height-header_height])\n        difference() {\n            cube([width-post_width*2, depth, header_height]);\n            \n            // Rabbet for door\n            translate([0, wall_thickness, 0])\n                cube([width-post_width*2, depth-wall_thickness*2, wall_thickness]);\n                \n            // Header detail - molding\n            for(i = [1:4]) {\n                translate([i*(width-post_width*2)/5, 0, header_height-2])\n                    cube([(width-post_width*2)/10, depth, 2]);\n            }\n        }\n    \n    // Threshold\n    translate([post_width, 0, 0])\n        difference() {\n            cube([width-post_width*2, depth, wall_thickness]);\n            \n            // Beveled edges\n            translate([wall_thickness, 0, 0])\n                cube([width-post_width*2-wall_thickness*2, depth, wall_thickness]);\n        }\n    \n    // Side panels for decorative detail\n    // Left panel\n    translate([wall_thickness, depth/2, wall_thickness])\n        cube([post_width-wall_thickness*2, panel_thickness, height-wall_thickness*2-header_height]);\n    \n    // Right panel\n    translate([width-post_width+wall_thickness, depth/2, wall_thickness])\n        cube([post_width-wall_thickness*2, panel_thickness, height-wall_thickness*2-header_height]);\n    \n    // Panel details - vertical grooves\n    for(offset = [post_width/4, post_width/2, post_width*3/4]) {\n        translate([offset, depth/2+panel_thickness/2, wall_thickness])\n            cube([1, panel_thickness/2, height-wall_thickness*2-header_height]);\n    }\n    \n    translate([width-post_width+offset, depth/2+panel_thickness/2, wall_thickness])\n        cube([1, panel_thickness/2, height-wall_thickness*2-header_height]);\n}\n\n// Render the jamb\njamb();",
    "renders": true
  },
  {
    "natural_object": "threshold",
    "openscad_code": "// Threshold furniture item - realistic style, medium complexity\n// Dimensions: 100mm width x 20mm depth x 15mm height\n\n// Main threshold body\nmodule threshold_body() {\n    // Base structure with slight taper\n    difference() {\n        // Main body\n        hull() {\n            translate([0, 0, 0]) cube([100, 20, 12], center=true);\n            translate([0, 0, 2]) scale([0.98, 0.98, 1]) cube([100, 20, 12], center=true);\n        }\n        \n        // Groove for door seal\n        translate([0, 0, 5]) cube([96, 3, 2], center=true);\n    }\n}\n\n// Anti-slip ridges\nmodule anti_slip_ridges() {\n    for(i = [-45:5:45]) {\n        translate([i, 0, 6.5]) cube([3, 19, 1.5], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    // Left side holes\n    translate([-35, 0, 0]) {\n        cylinder(h=15, r=2.5, center=true, $fn=16);\n    }\n    translate([-15, 0, 0]) {\n        cylinder(h=15, r=2.5, center=true, $fn=16);\n    }\n    \n    // Right side holes\n    translate([15, 0, 0]) {\n        cylinder(h=15, r=2.5, center=true, $fn=16);\n    }\n    translate([35, 0, 0]) {\n        cylinder(h=15, r=2.5, center=true, $fn=16);\n    }\n}\n\n// Weather seal lip\nmodule weather_seal() {\n    difference() {\n        // Main lip\n        translate([0, 8.5, -5]) cube([96, 3, 7], center=true);\n        \n        // Chamfer\n        translate([0, 10, -2]) rotate([0, 45, 0]) cube([96, 3, 5], center=true);\n    }\n}\n\n// End caps for finished look\nmodule end_caps() {\n    // Left cap\n    translate([-50, 0, 0]) {\n        difference() {\n            cylinder(h=12, r=10, center=true, $fn=32);\n            translate([0, 0, 6]) cube([20, 20, 12], center=true);\n        }\n    }\n    \n    // Right cap\n    translate([50, 0, 0]) {\n        difference() {\n            cylinder(h=12, r=10, center=true, $fn=32);\n            translate([0, 0, 6]) cube([20, 20, 12], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    threshold_body();\n    \n    // Surface details\n    translate([0, 0, 0]) anti_slip_ridges();\n    \n    // Mounting holes (difference operation)\n    difference() {\n        union() {\n            end_caps();\n            weather_seal();\n        }\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "door",
    "openscad_code": "// Door with frame and handle – realistic / medium complexity\n// Outer printable size: 120 mm high, 60 mm wide, 20 mm deep\n\n// ---- Parameters ----\ndoor_h = 100;\ndoor_w = 60;\ndoor_t = 4;           // door slab thickness\nframe_t = 2;          // wall thickness for frame\npanel_depth = 1.5;    // shallow recessed panels\nhandle_r = 4;\nhandle_l = 20;\n\n// Derived\nframe_outer_h = door_h + 2*frame_t;\nframe_outer_w = door_w + 2*frame_t;\n\n// ---- Modules ----\n\nmodule frame() {\n    // Outer frame as one printable shell\n    difference() {\n        cube([frame_outer_w, frame_t, frame_outer_h], center=true);\n        translate([0,0,0])\n            cube([door_w+2, frame_t+1, door_h+2], center=true); // cavity\n    }\n}\n\nmodule door_slab() {\n    // Solid slab\n    cube([door_w, door_t, door_h], center=true);\n}\n\nmodule raised_panels() {\n    // Two vertical raised rectangles\n    for (y = [-1, 1]) {\n        translate([0, door_t/2 - panel_depth/2, y*door_h/4])\n            cube([door_w*0.7, panel_depth, door_h*0.35], center=true);\n    }\n}\n\nmodule handle() {\n    // Cylindrical lever handle\n    translate([door_w/2 + handle_r, 0, 0])\n        rotate([0,90,0])\n            cylinder(r=handle_r, h=handle_l, center=true, $fn=16);\n    // Rosette plate\n    translate([door_w/2, 0, 0])\n        rotate([90,0,0])\n            cylinder(r=handle_r*1.2, h=2, center=true, $fn=32);\n}\n\nmodule hinges() {\n    // Three barrel hinges on left edge\n    for (z_shift = [-door_h*0.35, 0, door_h*0.35]) {\n        translate([-door_w/2 - frame_t/2, 0, z_shift])\n            rotate([0,90,0])\n                cylinder(r=3, h=4, center=true, $fn=16);\n    }\n}\n\n// ---- Assembly ----\ncolor(\"BurlyWood\")\nframe();\n\ntranslate([0, 0, 0])\n    color(\"SandyBrown\")\n    union() {\n        door_slab();\n        translate([0, door_t/2+0.01, 0])  // slight forward offset for panels\n            color(\"Peru\")\n            raised_panels();\n    }\n\ntranslate([0, door_t/2+0.01, door_h/4])\n    color(\"SaddleBrown\")\n    handle();\n\ntranslate([0, -door_t/2-frame_t/2+0.01, 0])\n    color(\"DimGray\")\n    hinges();",
    "renders": true
  },
  {
    "natural_object": "window",
    "openscad_code": "// Realistic window furniture - 3D printable\n// Size: 100mm x 100mm x 20mm (wall thickness 2mm)\n\n// Window frame parameters\nframe_width = 100;\nframe_height = 100;\nframe_depth = 20;\nwall_thickness = 2;\n\n// Window pane parameters\npane_thickness = 2;\npane_inset = 3;\n\n// Mullion parameters\nmullion_width = 4;\nmullion_height = frame_height - wall_thickness*2;\nmullion_depth = frame_depth - pane_inset*2;\n\n// Handle parameters\nhandle_length = 15;\nhandle_diameter = 4;\nhandle_base_diameter = 8;\n\n// Sill parameters\nsill_width = frame_width + 20;\nsill_depth = 15;\nsill_height = 5;\n\n// Window frame\nmodule window_frame() {\n    difference() {\n        // Outer frame\n        cube([frame_width, frame_depth, frame_height], center=true);\n        \n        // Inner opening\n        translate([0, 0, 0])\n        cube([frame_width - wall_thickness*2, frame_depth + 2, frame_height - wall_thickness*2], center=true);\n    }\n}\n\n// Window panes (4 panes in a 2x2 grid)\nmodule window_panes() {\n    pane_w = (frame_width - wall_thickness*2 - mullion_width*2)/2;\n    pane_h = (frame_height - wall_thickness*2 - mullion_width)/2;\n    \n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (pane_w/2 + mullion_width/2), pane_inset - frame_depth/2, y * (pane_h/2 + mullion_width/2)])\n            cube([pane_w, pane_thickness, pane_h], center=true);\n        }\n    }\n}\n\n// Mullions (cross bars)\nmodule mullions() {\n    // Vertical mullion\n    translate([0, 0, 0])\n    cube([mullion_width, mullion_depth, mullion_height], center=true);\n    \n    // Horizontal mullion\n    translate([0, 0, 0])\n    cube([frame_width - wall_thickness*2, mullion_depth, mullion_width], center=true);\n}\n\n// Handle\nmodule handle() {\n    // Handle base\n    translate([frame_width/2 - wall_thickness - handle_base_diameter/2, frame_depth/2 - pane_inset - handle_base_diameter/2, 0])\n    cylinder(h=handle_base_diameter/2, d=handle_base_diameter, center=true);\n    \n    // Handle grip\n    translate([frame_width/2 - wall_thickness - handle_base_diameter/2, frame_depth/2 - pane_inset - handle_length/2 - handle_base_diameter/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=handle_length, d=handle_diameter, center=true);\n}\n\n// Window sill\nmodule window_sill() {\n    translate([0, frame_depth/2 + sill_depth/2, -frame_height/2 - sill_height/2])\n    cube([sill_width, sill_depth, sill_height], center=true);\n}\n\n// Assembly\nunion() {\n    // Main window structure\n    window_frame();\n    \n    // Window panes\n    translate([0, 0, 0])\n    window_panes();\n    \n    // Mullions\n    translate([0, 0, 0])\n    mullions();\n    \n    // Handle\n    handle();\n    \n    // Window sill\n    window_sill();\n}",
    "renders": true
  },
  {
    "natural_object": "shutter",
    "openscad_code": "// Realistic 3D-printable shutter (medium complexity)\n// Overall size: 100 mm wide × 80 mm high × 10 mm deep\n// 2 mm wall thickness throughout, no overhangs\n\n// Parameters\nshutter_w = 100;\nshutter_h = 80;\nshutter_d = 10;\nframe_w = 4;\nslat_w = 2;\nslat_gap = 3;\nslat_h = 6;\nlouver_angle = 30;\n\n// Main shutter module\nmodule shutter() {\n    // Outer frame\n    difference() {\n        // Full back plate\n        cube([shutter_w, shutter_h, shutter_d], center=true);\n        \n        // Hollow out center\n        translate([0, 0, -1])\n            cube([shutter_w - 2*frame_w, shutter_h - 2*frame_w, shutter_d + 2], center=true);\n    }\n    \n    // Horizontal louvers\n    slat_count = floor((shutter_h - 2*frame_w) / (slat_h + slat_gap));\n    for (i = [0 : slat_count - 1]) {\n        y = -shutter_h/2 + frame_w + slat_h/2 + i*(slat_h + slat_gap);\n        translate([0, y, 0])\n            rotate([louver_angle, 0, 0])\n                cube([shutter_w - 2*frame_w - 2, slat_w, shutter_d - 2], center=true);\n    }\n    \n    // Vertical divider (mullion)\n    translate([0, 0, 0])\n        cube([2, shutter_h - 2*frame_w, shutter_d], center=true);\n    \n    // Hinge pintles on left side\n    pintle_r = 2;\n    pintle_h = 4;\n    for (y = [-shutter_h/2 + 15, 0, shutter_h/2 - 15]) {\n        translate([-shutter_w/2 - pintle_r/2, y, -shutter_d/2 + pintle_h/2])\n            cylinder(h=pintle_h, r=pintle_r, center=false);\n    }\n    \n    // Handle\n    handle_w = 12;\n    handle_h = 8;\n    handle_d = 3;\n    translate([shutter_w/2 - frame_w - handle_w/2, 0, shutter_d/2 - handle_d/2])\n        cube([handle_w, handle_h, handle_d], center=true);\n    \n    // Small screw caps for realistic detail\n    cap_r = 1.5;\n    cap_h = 1;\n    for (x = [-shutter_w/2 + frame_w + 5, shutter_w/2 - frame_w - 5]) {\n        for (y = [-shutter_h/2 + frame_w + 5, shutter_h/2 - frame_w - 5]) {\n            translate([x, y, shutter_d/2 - cap_h/2])\n                cylinder(h=cap_h, r=cap_r, center=true);\n        }\n    }\n}\n\n// Render the shutter\nshutter();",
    "renders": true
  },
  {
    "natural_object": "transom",
    "openscad_code": "// Transom Window Frame for Furniture Top\n// Designed as a decorative furniture transom (e.g. cabinet top or room divider)\n\n// Overall dimensions\nframe_width = 80;\nframe_height = 40;\nframe_depth = 15;\nwall_thickness = 2;\n\n// Pane parameters\npane_thickness = 2;\npane_gap = 4;\n\n// Muntin parameters\nmuntin_width = 2;\nmuntin_depth = 3;\n\n// Frame profile generation\nmodule frame_profile(width, height, depth, thick) {\n    difference() {\n        // Outer frame\n        cube([width, height, depth], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([width - 2*thick, height - 2*thick, depth + 2], center=true);\n    }\n}\n\n// Single pane with beveled edges\nmodule pane(width, height, thick) {\n    difference() {\n        cube([width, height, thick], center=true);\n        \n        // Bevel edges slightly\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * (width/2 - 1), y * (height/2 - 1), 0])\n                cylinder(h=thick+1, r=1, $fn=8);\n    }\n}\n\n// Horizontal muntin bar\nmodule horizontal_muntin(width) {\n    cube([width - 2*wall_thickness, muntin_width, muntin_depth], center=true);\n}\n\n// Vertical muntin bar\nmodule vertical_muntin(height) {\n    cube([muntin_width, height - 2*wall_thickness, muntin_depth], center=true);\n}\n\n// Corner joint detail\nmodule corner_joint() {\n    difference() {\n        // Joint block\n        cube([wall_thickness*2, wall_thickness*2, frame_depth], center=true);\n        \n        // 45-degree chamfer\n        rotate([0, 0, 45])\n            cube([wall_thickness*3, wall_thickness*3, frame_depth+1], center=true);\n    }\n}\n\n// Main transom assembly\nmodule transom_window() {\n    union() {\n        // Main frame\n        frame_profile(frame_width, frame_height, frame_depth, wall_thickness);\n        \n        // Corner joints\n        translate([(frame_width/2 - wall_thickness), (frame_height/2 - wall_thickness), 0])\n            corner_joint();\n        translate([-(frame_width/2 - wall_thickness), (frame_height/2 - wall_thickness), 0])\n            rotate([0, 0, 90]) corner_joint();\n        translate([(frame_width/2 - wall_thickness), -(frame_height/2 - wall_thickness), 0])\n            rotate([0, 0, -90]) corner_joint();\n        translate([-(frame_width/2 - wall_thickness), -(frame_height/2 - wall_thickness), 0])\n            rotate([0, 0, 180]) corner_joint();\n        \n        // Glass panes\n        translate([0, 0, 1])\n            pane(frame_width - 2*wall_thickness - 2, frame_height - 2*wall_thickness - 2, pane_thickness);\n        \n        // Muntin bars\n        translate([0, 0, 1])\n            horizontal_muntin(frame_width - 2*wall_thickness);\n        translate([0, 0, 1])\n            vertical_muntin(frame_height - 2*wall_thickness);\n        \n        // Small decorative circles at intersections\n        translate([0, 0, 2.5])\n            cylinder(h=1, r=muntin_width*0.8, $fn=16);\n    }\n}\n\n// Mounting brackets\nmodule mounting_bracket() {\n    difference() {\n        cube([8, 8, 4], center=true);\n        translate([0, 0, -2.5])\n            cylinder(h=6, r=2, $fn=16);\n    }\n}\n\n// Full assembly with mounting hardware\ntranslate([0, 0, 0])\n    transom_window();\n\n// Mounting brackets\ntranslate([(frame_width/2 - 10), (frame_height/2 - 10), -(frame_depth/2 + 2)])\n    mounting_bracket();\ntranslate([-(frame_width/2 - 10), (frame_height/2 - 10), -(frame_depth/2 + 2)])\n    mounting_bracket();\ntranslate([(frame_width/2 - 10), -(frame_height/2 - 10), -(frame_depth/2 + 2)])\n    mounting_bracket();\ntranslate([-(frame_width/2 - 10), -(frame_height/2 - 10), -(frame_depth/2 + 2)])\n    mounting_bracket();",
    "renders": true
  },
  {
    "natural_object": "mullion",
    "openscad_code": "// Mullion furniture element - window divider with realistic proportions\n// Overall size: 120mm height, 20mm width, 10mm depth\n\n$fn = 32;\n\n// Main mullion body\nmodule mullion_body() {\n    // Central vertical bar with slight taper\n    difference() {\n        // Main tapered bar\n        hull() {\n            translate([0, 0, 0])\n                cube([18, 10, 100], center = true);\n            translate([0, 0, 10])\n                cube([17, 9, 100], center = true);\n        }\n        \n        // Lightening channel in back\n        translate([0, 4, 0])\n            cube([14, 2, 96], center = true);\n    }\n}\n\n// Top tenon for window frame connection\nmodule top_tenon() {\n    translate([0, 0, 55])\n    union() {\n        // Main tenon\n        cube([18, 10, 10], center = true);\n        \n        // Chamfers for easier insertion\n        translate([0, 0, 60.5])\n            cylinder(h=2, r1=9.5, r2=8.5, center=true);\n    }\n}\n\n// Bottom tenon matching top\nmodule bottom_tenon() {\n    translate([0, 0, -55])\n    mirror([0, 0, 1])\n    top_tenon();\n}\n\n// Decorative detail rings\nmodule detail_rings() {\n    for(z = [-30, 0, 30]) {\n        translate([0, 0, z])\n        difference() {\n            // Ring base\n            cylinder(h=3, r=10, center=true);\n            // Inner cutout\n            cylinder(h=4, r=7.5, center=true);\n        }\n    }\n}\n\n// Side grooves for glass panel insertion\nmodule glass_grooves() {\n    // Front groove\n    translate([0, -5.5, 0])\n        cube([2, 1, 90], center=true);\n    \n    // Back groove\n    translate([0, 5.5, 0])\n        cube([2, 1, 90], center=true);\n}\n\n// Fillets for strength\nmodule corner_fillets() {\n    // Front left edge\n    translate([8.5, -4.5, 0])\n        rotate([0, 90, 0])\n        cylinder(h=100, r=0.5, center=true);\n    \n    // Front right edge\n    translate([-8.5, -4.5, 0])\n        rotate([0, 90, 0])\n        cylinder(h=100, r=0.5, center=true);\n    \n    // Back edges\n    mirror([0, 1, 0]) {\n        translate([8.5, -4.5, 0])\n            rotate([0, 90, 0])\n            cylinder(h=100, r=0.5, center=true);\n        \n        translate([-8.5, -4.5, 0])\n            rotate([0, 90, 0])\n            cylinder(h=100, r=0.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    mullion_body();\n    top_tenon();\n    bottom_tenon();\n    detail_rings();\n    \n    difference() {\n        // Add glass grooves after main body\n        mullion_body();\n        glass_grooves();\n    }\n    \n    corner_fillets();\n}",
    "renders": true
  },
  {
    "natural_object": "muntin",
    "openscad_code": "// Realistic muntin bar (window grille) as a furniture item\n// Medium complexity, 3D printable with 2mm walls\n\nmodule muntin_bar() {\n    // Main horizontal bar\n    union() {\n        // Central horizontal beam (length 120mm, height 12mm, depth 8mm)\n        translate([0, 0, 0])\n            cube([120, 8, 12], center=true);\n        \n        // Vertical support posts at ends\n        for(x = [-55, 55]) {\n            translate([x, 0, 0])\n                cube([6, 10, 12], center=true);\n        }\n        \n        // Center vertical divider\n        translate([0, 0, 0])\n            cube([6, 10, 12], center=true);\n        \n        // Decorative top ridge\n        translate([0, 0, 7])\n            cube([110, 6, 2], center=true);\n        \n        // Bottom ridge\n        translate([0, 0, -7])\n            cube([110, 6, 2], center=true);\n    }\n}\n\nmodule joint_detail() {\n    // Corner joint with dowel pin\n    difference() {\n        union() {\n            // Main joint block\n            cube([8, 8, 8], center=true);\n            \n            // Decorative collar\n            translate([0, 0, 5])\n                cylinder(h=2, r=5, center=true);\n        }\n        \n        // Dowel hole\n        translate([0, 0, 0])\n            cylinder(h=10, r=2, center=true);\n    }\n}\n\nmodule muntin_frame() {\n    // Complete muntin assembly\n    union() {\n        // Horizontal bars\n        for(y = [-40, 0, 40]) {\n            translate([0, y, 0])\n                muntin_bar();\n        }\n        \n        // Vertical bars\n        for(x = [-40, 0, 40]) {\n            rotate([90, 0, 0])\n                translate([0, x, 0])\n                    muntin_bar();\n        }\n        \n        // Corner joints\n        for(x = [-55, 55]) {\n            for(y = [-55, 55]) {\n                translate([x, y, 0])\n                    joint_detail();\n            }\n        }\n        \n        // Center joint\n        translate([0, 0, 0])\n            scale([1.2, 1.2, 1])\n                joint_detail();\n        \n        // Support feet for furniture use\n        for(x = [-55, 55]) {\n            for(y = [-55, 55]) {\n                translate([x, y, -10])\n                    cube([6, 6, 6], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        muntin_frame();\n        \n        // Cross brace for stability\n        for(i = [-1, 1]) {\n            rotate([0, 0, i * 45])\n                translate([0, 0, -8])\n                    cube([110, 4, 2], center=true);\n        }\n    }\n    \n    // Remove material for lighter weight\n    for(x = [-30, 0, 30]) {\n        for(y = [-30, 0, 30]) {\n            translate([x, y, 0])\n                cylinder(h=15, r=3, center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "sash",
    "openscad_code": "// Sash Window Furniture (Window Fastener in realistic style)\n// Overall size: ~120mm wide x 50mm tall x 25mm deep\n// 3D-print friendly: 2 mm wall thickness, no extreme overhangs\n\n$fn = 64;\n\n// Main dimensions\nbase_w = 120;\nbase_h = 50;\nbase_d = 25;\nhandle_r = 8;\nhandle_l = 90;\nplate_t = 3;\nscrew_d = 6;\nscrew_h = 4;\n\n// Base mounting plate\nmodule base_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, plate_t/2])\n            cube([base_w, base_h, plate_t], center=true);\n        \n        // Screw holes\n        translate([-base_w/2 + 15, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=plate_t + 2, d=screw_d, center=true);\n        translate([base_w/2 - 15, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=plate_t + 2, d=screw_d, center=true);\n    }\n}\n\n// Handle pivot boss\nmodule pivot_boss() {\n    difference() {\n        // Cylindrical boss\n        translate([0, 0, plate_t + 6])\n            cylinder(h=12, d=20, center=true);\n        \n        // Central hole for pin\n        translate([0, 0, plate_t + 6])\n            rotate([90, 0, 0])\n                cylinder(h=22, d=4, center=true);\n    }\n}\n\n// Handle arm\nmodule handle() {\n    // Main arm\n    translate([0, handle_l/2, plate_t + 6])\n        rotate([90, 0, 0])\n            cylinder(h=handle_l, d=handle_r*2, center=true);\n    \n    // Grip knob\n    translate([0, handle_l, plate_t + 6])\n        sphere(r=handle_r + 2);\n}\n\n// Latch hook\nmodule latch_hook() {\n    // Hook body\n    translate([base_w/2 - 10, 0, plate_t + 6])\n        cube([20, 10, 12], center=true);\n    \n    // Hook curve\n    translate([base_w/2 + 5, 0, plate_t + 12])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=10, r=6, center=true);\n                translate([0, 0, -7])\n                    cube([20, 20, 14], center=true);\n            }\n}\n\n// Keeper plate (mounted on frame)\nmodule keeper() {\n    translate([base_w/2 + 25, 0, plate_t + 6])\n        cube([20, 25, plate_t], center=true);\n}\n\n// Assembly\nunion() {\n    // Base plate with boss\n    base_plate();\n    pivot_boss();\n    \n    // Handle and latch assembly\n    handle();\n    latch_hook();\n    \n    // Optional keeper (for visualization)\n    %keeper();\n}",
    "renders": true
  },
  {
    "natural_object": "glazing",
    "openscad_code": "// Realistic glazing cabinet - medium complexity\n// External dimensions: 60 x 40 x 100 mm\n\n$fn = 50;  // Smooth curves\n\n// Main body\nmodule cabinet_body() {\n    // Back panel - 2mm thickness\n    translate([1, 1, 1]) cube([58, 38, 98]);\n    \n    // Bottom shelf\n    translate([2, 1, 20]) cube([56, 38, 2]);\n    \n    // Middle shelf\n    translate([2, 1, 50]) cube([56, 38, 2]);\n    \n    // Top shelf\n    translate([2, 1, 80]) cube([56, 38, 2]);\n}\n\n// Frame structure\nmodule frame() {\n    // Left vertical frame\n    translate([0, 0, 0]) cube([2, 40, 100]);\n    \n    // Right vertical frame\n    translate([58, 0, 0]) cube([2, 40, 100]);\n    \n    // Top horizontal frame\n    translate([0, 0, 98]) cube([60, 40, 2]);\n    \n    // Bottom horizontal frame\n    translate([0, 0, 0]) cube([60, 40, 2]);\n}\n\n// Glass panels\nmodule glass_panels() {\n    // Front glass panels (3 sections)\n    for(i = [0:2]) {\n        translate([2, 0, 2 + i*32]) cube([56, 0.5, 30]);\n    }\n    \n    // Left side glass\n    translate([0, 2, 2]) cube([0.5, 36, 96]);\n    \n    // Right side glass\n    translate([60, 2, 2]) cube([0.5, 36, 96]);\n}\n\n// Door frame with handle\nmodule door() {\n    // Door frame\n    difference() {\n        translate([59.5, 2, 0]) cube([2, 36, 100]);\n        \n        // Window cutouts\n        for(i = [0:2]) {\n            translate([59.6, 3, 3 + i*32]) cube([1.8, 34, 28]);\n        }\n    }\n    \n    // Door handle\n    translate([61, 20, 50]) rotate([90, 0, 0]) cylinder(h=8, r1=3, r2=3);\n    translate([61, 20, 50]) cylinder(h=2, r1=4, r2=4);\n}\n\n// Support legs\nmodule legs() {\n    // Front left leg\n    translate([2, 2, -5]) cylinder(h=7, r=2);\n    \n    // Front right leg\n    translate([58, 2, -5]) cylinder(h=7, r=2);\n    \n    // Back left leg\n    translate([2, 38, -5]) cylinder(h=7, r=2);\n    \n    // Back right leg\n    translate([58, 38, -5]) cylinder(h=7, r=2);\n}\n\n// Decorative molding\nmodule molding() {\n    // Top molding\n    for(i = [0:11]) {\n        translate([i*5, -0.5, 100]) cube([4, 2, 2]);\n    }\n    \n    // Bottom base molding\n    for(i = [0:11]) {\n        translate([i*5, -0.5, -2]) cube([4, 2, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    frame();\n    glass_panels();\n    door();\n    legs();\n    molding();\n}",
    "renders": true
  },
  {
    "natural_object": "cladding",
    "openscad_code": "// Cladding panel for a modular bookshelf (realistic style, medium complexity)\n// Dimensions: 120mm wide x 150mm tall x 8mm thick\n\n$fn = 32;  // Smooth curves\nwall_thickness = 2;\n\nmodule cladding_panel() {\n    // Main panel body with slight curvature\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cube([120, 8, 150], center=true);\n            translate([0, 1, 75]) cube([118, 6, 2], center=true);\n            translate([0, 1, -75]) cube([118, 6, 2], center=true);\n        }\n        \n        // Hollow out back for material saving\n        translate([0, 2.5, 0]) cube([116, 3, 146], center=true);\n    }\n}\n\nmodule vertical_support_slot() {\n    // Slot for vertical support beam (10x20mm)\n    translate([0, 0, 0]) cube([12, 10, 22], center=true);\n}\n\nmodule shelf_pin_holes() {\n    // 5mm shelf pin holes every 32mm\n    for (z = [-64:32:64]) {\n        translate([0, 5, z]) rotate([90, 0, 0]) cylinder(h=10, d=5.2, center=true);\n    }\n}\n\nmodule connector_blocks() {\n    // Hidden connector blocks for joining multiple panels\n    translate([55, 0, 60]) cube([6, 8, 6], center=true);\n    translate([55, 0, -60]) cube([6, 8, 6], center=true);\n    translate([-55, 0, 60]) cube([6, 8, 6], center=true);\n    translate([-55, 0, -60]) cube([6, 8, 6], center=true);\n}\n\nmodule wood_texture() {\n    // Subtle wood grain texture using small cylinders\n    for (x = [-58:4:58]) {\n        for (z = [-73:8:73]) {\n            translate([x, 4.5, z]) rotate([90, 0, 0]) \n                cylinder(h=0.5, d=0.8, center=true);\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // 3mm holes for wall mounting screws\n    translate([40, 0, 70]) rotate([0, 90, 0]) cylinder(h=10, d=3.5, center=true);\n    translate([-40, 0, 70]) rotate([0, 90, 0]) cylinder(h=10, d=3.5, center=true);\n    translate([40, 0, -70]) rotate([0, 90, 0]) cylinder(h=10, d=3.5, center=true);\n    translate([-40, 0, -70]) rotate([0, 90, 0]) cylinder(h=10, d=3.5, center=true);\n}\n\nmodule edge_detail() {\n    // Rounded edge detail on front face\n    difference() {\n        translate([0, 4, 0]) cube([120, 2, 150], center=true);\n        translate([0, 5, 0]) cube([124, 2, 154], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    cladding_panel();\n    \n    // Add connector features\n    translate([0, 4, 0]) connector_blocks();\n    \n    // Add wood texture on front face\n    wood_texture();\n    \n    // Add edge detail\n    edge_detail();\n}\n\n// Subtract functional features\ndifference() {\n    children();\n    \n    // Vertical support slots (two positions)\n    translate([30, 4, 0]) vertical_support_slot();\n    translate([-30, 4, 0]) vertical_support_slot();\n    \n    // Shelf pin holes\n    translate([45, 0, 0]) shelf_pin_holes();\n    translate([-45, 0, 0]) shelf_pin_holes();\n    \n    // Mounting holes\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "natural_object": "veneer",
    "openscad_code": "// Veneer Coffee Table with Cross-Laminated Core\n// Realistic style, medium complexity (≈110 lines)\n// Designed for 3D printing (2 mm walls, no overhangs)\n\n$fn = 36; // Smooth curves\n\n// ===== MAIN PARAMETERS =====\ntable_len = 120;\ntable_wid = 70;\ntable_hgt = 45;\nveneer_th = 1;\ncore_th   = 2;\n\n// ===== VENEER LAYERS MODULE =====\nmodule veneer_layer(l, w, t, grain_dir = 0) {\n    // Grain direction: 0 = along length, 90 = along width\n    difference() {\n        cube([l, w, t], center = true);\n        // Subtle grain texture: shallow grooves every 2 mm\n        for (i = [-l/2 : 2 : l/2]) {\n            if (grain_dir == 0) {\n                translate([i, 0, t/2 - 0.1])\n                    cube([0.3, w, 0.2], center = true);\n            } else {\n                translate([0, i, t/2 - 0.1])\n                    cube([l, 0.3, 0.2], center = true);\n            }\n        }\n    }\n}\n\n// ===== LEG MODULE =====\nmodule leg() {\n    union() {\n        // Tapered square leg with rounded edges\n        hull() {\n            for (x = [-1, 1])\n                for (y = [-1, 1])\n                    translate([x*5, y*5, 0])\n                        cylinder(h = table_hgt - 2*veneer_th, r = 3, center = false);\n        }\n        \n        // Veneer wrap\n        translate([0, 0, -(table_hgt - 2*veneer_th)/2])\n            veneer_layer(12, 12, veneer_th);\n    }\n}\n\n// ===== ASSEMBLY =====\nunion() {\n    // Tabletop: cross-laminated veneer core\n    difference() {\n        // Core block with rounded top edge\n        minkowski() {\n            cube([table_len, table_wid, core_th], center = true);\n            cylinder(h = 0.1, r = 2);\n        }\n        \n        // Recessed underside for weight reduction\n        translate([0, 0, -core_th/2 + 1])\n            cube([table_len - 8, table_wid - 8, 2], center = true);\n    }\n    \n    // Top veneer layer (long grain)\n    translate([0, 0, core_th/2 + veneer_th/2])\n        veneer_layer(table_len, table_wid, veneer_th, 0);\n    \n    // Bottom veneer layer (cross grain)\n    translate([0, 0, -core_th/2 - veneer_th/2])\n        veneer_layer(table_len, table_wid, veneer_th, 90);\n    \n    // Apron frame for structural support\n    for (side = [0, 1]) {\n        // Long sides\n        translate([0, side ? table_wid/2 - 3 : -table_wid/2 + 3, -4])\n            rotate([0, 90, 0])\n                veneer_layer(table_len - 20, 6, veneer_th, 0);\n        \n        // Short sides\n        translate([side ? table_len/2 - 3 : -table_len/2 + 3, 0, -4])\n            rotate([90, 0, 0])\n                veneer_layer(table_wid - 20, 6, veneer_th, 90);\n    }\n    \n    // Legs at corners\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(table_len/2 - 8), y*(table_wid/2 - 8), -table_hgt/2 - veneer_th])\n                leg();\n    \n    // Edge banding (visible veneer edges)\n    difference() {\n        // Main edge profile\n        translate([0, 0, 0])\n            cube([table_len + 1, table_wid + 1, core_th + 2*veneer_th + 1], center = true);\n        \n        // Remove center to leave only edges\n        translate([0, 0, 0])\n            cube([table_len - 1, table_wid - 1, core_th + 2*veneer_th + 3], center = true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "façade",
    "openscad_code": "// Façade furniture - Realistic wooden cabinet with doors and panels\n// Overall dimensions: 120mm wide x 40mm deep x 80mm tall\n\n$fn = 32;  // Smooth curves for better print quality\n\n// Main cabinet body\nmodule cabinet_body() {\n    // Side walls (2mm thick)\n    difference() {\n        cube([120, 40, 80], center=true);\n        translate([0, 0, 2]) cube([116, 36, 76], center=true);\n    }\n}\n\n// Back panel for structure\nmodule back_panel() {\n    translate([0, 19, 0])\n        cube([116, 2, 76], center=true);\n}\n\n// Base plinth\nmodule base_plinth() {\n    translate([0, 0, -41])\n    difference() {\n        cube([124, 44, 6], center=true);\n        translate([0, 0, 2])\n            cube([120, 40, 4], center=true);\n    }\n}\n\n// Door with panel details\nmodule door(is_left=true) {\n    offset = is_left ? -41 : 41;\n    translate([offset, 0, 0])\n    union() {\n        // Main door slab (2mm thick)\n        difference() {\n            cube([36, 38, 74]);\n            translate([2, 2, 2]) cube([32, 34, 70]);\n        }\n        \n        // Raised panel detail (1mm thick)\n        translate([3, 3, 10])\n            difference() {\n                cube([30, 4, 50]);\n                translate([1, 0, 1]) cube([28, 4, 48]);\n            }\n        translate([3, 31, 10])\n            difference() {\n                cube([30, 4, 50]);\n                translate([1, 0, 1]) cube([28, 4, 48]);\n            }\n        \n        // Door handle\n        handle_x = is_left ? 30 : 6;\n        translate([handle_x, 19, 37])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=4, d2=3);\n    }\n}\n\n// Shelf supports\nmodule shelf_supports() {\n    for(i=[-1:1]) {\n        translate([i * 40, 19, 0])\n            cube([4, 2, 4], center=true);\n    }\n}\n\n// Internal shelf\nmodule shelf() {\n    translate([0, 0, -15])\n        cube([112, 34, 2], center=true);\n}\n\n// Top cornice detail\nmodule cornice() {\n    translate([0, 0, 41])\n    difference() {\n        cube([124, 44, 4], center=true);\n        translate([0, 0, -2])\n            cube([116, 36, 6], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    back_panel();\n    base_plinth();\n    cornice();\n    \n    // Doors (hinged at edges)\n    translate([0, -19, 0])\n        door(true);\n    translate([0, -19, 0])\n        mirror([1, 0, 0])\n            door(false);\n    \n    // Internal structure\n    shelf_supports();\n    shelf();\n}",
    "renders": true
  },
  {
    "natural_object": "parapet",
    "openscad_code": "// Parapet-style miniature garden bench (realistic, medium complexity)\n// Overall size: 80 x 30 x 45 mm (L x W x H)\n\n$fn = 24;\n\nmodule leg(x, z_offset) {\n    translate([x, 0, z_offset])\n    union() {\n        // Main leg post (2 mm wall, hollow)\n        difference() {\n            cube([4, 4, 42], center = true);\n            translate([0, 0, -1])\n                cube([2.5, 2.5, 44], center = true);\n        }\n        // Foot plate for stability\n        translate([0, 0, 21])\n            cube([6, 6, 1.5], center = true);\n        // Decorative cap\n        translate([0, 0, -21.5])\n            cube([4.5, 4.5, 1], center = true);\n    }\n}\n\nmodule slat(i) {\n    // Bench seat slats\n    translate([-35 + i * 10, 0, 0])\n    cube([8, 26, 2], center = true);\n}\n\nmodule back_rod(i) {\n    // Backrest vertical rods\n    translate([-35 + i * 10, 0, 22])\n    cube([2, 26, 25], center = true);\n}\n\nmodule armrest_support() {\n    // Diagonal support for armrest\n    rotate([0, -30, 0])\n    translate([0, 0, 10])\n        cube([2, 3, 20], center = true);\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    leg(-32, 0);\n    leg(32, 0);\n    leg(-32, 0);\n    leg(32, 0);\n\n    // Seat slats (5 pieces)\n    for (i = [0:4])\n        slat(i);\n\n    // Backrest frame\n    translate([0, 0, 22])\n    union() {\n        // Top rail\n        translate([0, 0, 12.5])\n            cube([70, 26, 2], center = true);\n        // Bottom rail\n        translate([0, 0, -12.5])\n            cube([70, 26, 2], center = true);\n        // Vertical rods\n        for (i = [0:4])\n            back_rod(i);\n    }\n\n    // Armrest assemblies\n    // Left armrest\n    translate([-37, 0, 30])\n    union() {\n        cube([2, 26, 4], center = true);\n        armrest_support();\n    }\n    // Right armrest\n    translate([37, 0, 30])\n    union() {\n        cube([2, 26, 4], center = true);\n        mirror([1, 0, 0])\n            armrest_support();\n    }\n\n    // Decorative cross-braces between legs\n    translate([0, -12, 10])\n    cube([64, 2, 2], center = true);\n    translate([0, 12, 10])\n    cube([64, 2, 2], center = true);\n}",
    "renders": true
  },
  {
    "natural_object": "eave",
    "openscad_code": "// Eave Bracket Furniture Piece - Realistic Style\n// Medium complexity with structural details\n\n$fn = 32;  // Smooth curves\n\nmodule eave_bracket() {\n    // Overall dimensions: 120mm wide x 60mm deep x 80mm tall\n    \n    // Main support beam (horizontal)\n    translate([0, 0, 20])\n        cube([120, 25, 12], center=true);\n    \n    // Vertical support post\n    translate([0, 17.5, 40])\n        cube([25, 10, 40], center=true);\n    \n    // Angled brace (triangular support)\n    difference() {\n        // Main triangular block\n        translate([-30, -12.5, 20])\n            rotate([0, 0, 0])\n                polyhedron(\n                    points=[[0,0,0], [60,0,0], [0,25,0], [0,0,25]],\n                    faces=[[0,1,2], [0,1,3], [0,2,3], [1,2,3]]\n                );\n        \n        // Hollow out for weight reduction\n        translate([-28, -10.5, 22])\n            rotate([0, 0, 0])\n                polyhedron(\n                    points=[[0,0,0], [56,0,0], [0,21,0], [0,0,21]],\n                    faces=[[0,1,2], [0,1,3], [0,2,3], [1,2,3]]\n                );\n    }\n    \n    // Decorative corbel details\n    for(i = [-40:20:40]) {\n        translate([i, 0, 26])\n            cylinder(h=8, r1=6, r2=4);\n    }\n    \n    // Mounting plate (back)\n    difference() {\n        translate([0, 30, 40])\n            cube([100, 4, 60], center=true);\n        \n        // Screw holes\n        for(x = [-30:30:60]) {\n            for(z = [-15:15:30]) {\n                translate([x, 32, 40+z])\n                    cylinder(h=5, r=2);\n            }\n        }\n    }\n    \n    // Bottom decorative molding\n    module molding_section(x_pos) {\n        translate([x_pos, -12.5, 14])\n            difference() {\n                cube([20, 5, 8]);\n                translate([2, -1, 2])\n                    cylinder(h=6, r=2);\n                translate([18, -1, 2])\n                    cylinder(h=6, r=2);\n            }\n    }\n    \n    // Generate molding sections\n    molding_section(-50);\n    molding_section(-30);\n    molding_section(-10);\n    molding_section(10);\n    molding_section(30);\n    molding_section(50);\n    \n    // Side reinforcement ribs\n    module side_rib(x_pos) {\n        translate([x_pos, 0, 30])\n            difference() {\n                cube([2, 25, 20], center=true);\n                translate([0, 10, 0])\n                    cylinder(h=2, r=10);\n            }\n    }\n    \n    side_rib(-58);\n    side_rib(58);\n    \n    // Top cap detail\n    translate([0, 0, 76])\n        difference() {\n            cube([110, 25, 8], center=true);\n            translate([0, 0, 4])\n                cube([106, 21, 8], center=true);\n        }\n    \n    // Chamfers for printability\n    translate([0, 0, 20])\n        cube([120, 25, 0.5], center=true);\n}\n\n// Render the complete bracket\neave_bracket();",
    "renders": true
  },
  {
    "natural_object": "soffit",
    "openscad_code": "// Soffit furniture module - medium complexity realistic style\n// Overall dimensions: 120mm x 100mm x 80mm\n\nmodule soffit_main_body() {\n    // Main soffit box structure\n    difference() {\n        // Outer shell\n        translate([0, 0, 40]) cube([120, 100, 80], center=true);\n        \n        // Inner hollow space\n        translate([0, 0, 40]) cube([116, 96, 78], center=true);\n    }\n}\n\nmodule ventilation_grilles() {\n    // Front ventilation grilles\n    for (y = [-40, -20, 0, 20, 40]) {\n        translate([0, y, 10]) rotate([90, 0, 0]) \n            linear_extrude(2) \n                square([80, 4], center=true);\n    }\n}\n\nmodule mounting_brackets() {\n    // Left mounting bracket\n    translate([-58, 0, 75]) cube([4, 20, 10], center=true);\n    \n    // Right mounting bracket\n    translate([58, 0, 75]) cube([4, 20, 10], center=true);\n    \n    // Bracket holes\n    for (x = [-58, 58]) {\n        translate([x, 0, 80]) cylinder(h=5, r=2, center=true);\n    }\n}\n\nmodule cable_management() {\n    // Cable entry hole on right side\n    translate([58, 30, 40]) rotate([0, 90, 0])\n        cylinder(h=5, r=6, center=true);\n    \n    // Cable exit hole on left side\n    translate([-58, -30, 40]) rotate([0, -90, 0])\n        cylinder(h=5, r=6, center=true);\n}\n\nmodule structural_reinforcements() {\n    // Internal support ribs\n    for (x = [-30, 0, 30]) {\n        translate([x, 0, 20]) cube([4, 96, 40], center=true);\n    }\n    \n    // Bottom reinforcement beam\n    translate([0, 0, 5]) cube([116, 96, 4], center=true);\n}\n\nmodule led_lighting_housing() {\n    // LED strip housing on bottom\n    translate([0, 0, 75]) cube([100, 10, 6], center=true);\n    \n    // LED diffuser slots\n    for (i = [-4:4]) {\n        translate([i*10, 0, 78]) cube([8, 10, 1], center=true);\n    }\n}\n\nmodule corner_details() {\n    // Rounded corner fillets\n    difference() {\n        union() {\n            // Top front corners\n            translate([-58, 48, 75]) sphere(r=4);\n            translate([58, 48, 75]) sphere(r=4);\n            \n            // Bottom front corners\n            translate([-58, 48, 5]) sphere(r=4);\n            translate([58, 48, 5]) sphere(r=4);\n            \n            // Top back corners\n            translate([-58, -48, 75]) sphere(r=4);\n            translate([58, -48, 75]) sphere(r=4);\n            \n            // Bottom back corners\n            translate([-58, -48, 5]) sphere(r=4);\n            translate([58, -48, 5]) sphere(r=4);\n        }\n        \n        // Remove excess material\n        translate([0, 0, 40]) cube([120, 100, 80], center=true);\n    }\n}\n\n// Assembly of all components\nunion() {\n    soffit_main_body();\n    ventilation_grilles();\n    mounting_brackets();\n    cable_management();\n    structural_reinforcements();\n    led_lighting_housing();\n    corner_details();\n}",
    "renders": true
  },
  {
    "natural_object": "fascia",
    "openscad_code": "// Fascia (front panel) for a small cabinet or drawer unit\n// Realistic design with medium complexity\n\n// Overall dimensions\n$fn = 32;\npanel_width = 90;\npanel_height = 60;\npanel_thickness = 8;\n\n// Panel body with rounded edges\nmodule panel_body() {\n    difference() {\n        // Main panel with rounded front\n        minkowski() {\n            cube([panel_width - 4, panel_height - 4, panel_thickness - 2], center = true);\n            sphere(r = 2);\n        }\n        \n        // Create recessed center\n        translate([0, 0, 1])\n            cube([panel_width - 8, panel_height - 8, panel_thickness], center = true);\n    }\n}\n\n// Raised border frame\nmodule frame_border() {\n    // Top border\n    translate([0, (panel_height - 6)/2, 0])\n        cube([panel_width - 4, 4, 2], center = true);\n    \n    // Bottom border\n    translate([0, -(panel_height - 6)/2, 0])\n        cube([panel_width - 4, 4, 2], center = true);\n    \n    // Left border\n    translate([-(panel_width - 6)/2, 0, 0])\n        cube([4, panel_height - 4, 2], center = true);\n    \n    // Right border\n    translate([(panel_width - 6)/2, 0, 0])\n        cube([4, panel_height - 4, 2], center = true);\n}\n\n// Center drawer pull\nmodule drawer_pull() {\n    difference() {\n        // Main pull body\n        translate([0, 0, panel_thickness/2 + 2])\n            rotate([90, 0, 0])\n            cylinder(h = 25, r1 = 4, r2 = 4, center = true);\n        \n        // Grip hole\n        translate([0, 0, panel_thickness/2 + 2])\n            rotate([90, 0, 0])\n            cylinder(h = 26, r1 = 2, r2 = 2, center = true);\n    }\n    \n    // End caps\n    translate([0, 12.5, panel_thickness/2 + 2])\n        sphere(r = 4);\n    translate([0, -12.5, panel_thickness/2 + 2])\n        sphere(r = 4);\n}\n\n// Screw holes for mounting\nmodule mounting_holes() {\n    for(x = [-35, 35]) {\n        for(y = [-20, 20]) {\n            translate([x, y, 0])\n                rotate([0, 90, 0])\n                cylinder(h = panel_thickness + 2, r = 1.5, center = true);\n        }\n    }\n}\n\n// Wood grain texture pattern\nmodule wood_grain() {\n    for(i = [-30:5:30]) {\n        translate([i, 0, panel_thickness/2 - 0.5])\n            scale([1, 0.05, 0.1])\n            sphere(r = 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main panel structure\n    panel_body();\n    \n    // Decorative frame\n    frame_border();\n    \n    // Functional elements\n    drawer_pull();\n    \n    // Mounting holes (for assembly)\n    difference() {\n        union();\n        mounting_holes();\n    }\n    \n    // Surface detail\n    wood_grain();\n}",
    "renders": true
  },
  {
    "natural_object": "gutter",
    "openscad_code": "// Gutter Furniture - Realistic Medium Complexity\n// A modular gutter segment with furniture-style joints and mounting brackets\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\ngutter_width = 40;\ngutter_depth = 30;\ngutter_length = 100;\nbracket_width = 8;\nbracket_height = 15;\nscrew_hole_diameter = 3;\n\n// Main module\nmodule gutter_furniture() {\n    // Main gutter body\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, gutter_depth/2])\n                cube([gutter_width, gutter_length, gutter_depth], center=true);\n            translate([0, 0, gutter_depth/2 - 5])\n                cube([gutter_width - 4, gutter_length - 4, gutter_depth - 4], center=true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, gutter_depth/2])\n            cube([gutter_width - 2*wall_thickness, gutter_length - 2*wall_thickness, gutter_depth - wall_thickness], center=true);\n        \n        // Top opening\n        translate([0, 0, gutter_depth - wall_thickness/2])\n            cube([gutter_width - 2*wall_thickness, gutter_length, wall_thickness + 1], center=true);\n    }\n    \n    // Mounting brackets\n    for(i = [-1, 1]) {\n        translate([i * (gutter_width/2 + bracket_width/2), 0, 0])\n            bracket();\n    }\n    \n    // Reinforcement ribs\n    for(pos = [-30, 0, 30]) {\n        translate([0, pos, gutter_depth/2 - 3])\n            rib();\n    }\n    \n    // Connector joints\n    connector_joint([-gutter_length/2 - 2, 0, gutter_depth/2 - 5], 0);\n    connector_joint([gutter_length/2 + 2, 0, gutter_depth/2 - 5], 180);\n}\n\n// Mounting bracket module\nmodule bracket() {\n    difference() {\n        union() {\n            // Main bracket body\n            translate([0, 0, bracket_height/2])\n                cube([bracket_width, gutter_length/3, bracket_height], center=true);\n            \n            // Support gusset\n            translate([0, 0, bracket_height/4])\n                rotate([0, 90, 0])\n                    cylinder(h=bracket_width/2, r1=bracket_height/2, r2=bracket_height/2);\n        }\n        \n        // Screw holes\n        translate([0, -gutter_length/6, bracket_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=bracket_width + 2, d=screw_hole_diameter, center=true);\n        translate([0, gutter_length/6, bracket_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=bracket_width + 2, d=screw_hole_diameter, center=true);\n    }\n}\n\n// Reinforcement rib module\nmodule rib() {\n    difference() {\n        cube([gutter_width - 2*wall_thickness, 2, 6], center=true);\n        translate([0, 0, 3])\n            cube([gutter_width - 2*wall_thickness - 4, 4, 6], center=true);\n    }\n}\n\n// Connector joint for modular assembly\nmodule connector_joint(position, rotation) {\n    translate(position)\n        rotate([0, 0, rotation]) {\n            // Male connector\n            translate([0, 0, 0])\n                cube([4, gutter_width - 4, 6], center=true);\n            \n            // Alignment pins\n            for(pin = [-gutter_width/4, gutter_width/4]) {\n                translate([2, pin, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=4, d=3, center=true);\n            }\n        }\n}\n\n// Render the gutter\ngutter_furniture();",
    "renders": true
  },
  {
    "natural_object": "downspout",
    "openscad_code": "// Downspout Boot - a small shoe-horn / bench that sits at the base of a rain-water downspout\n// Overall footprint ~90×50 mm, height ~60 mm – easily printable on FDM printers\n// 2 mm wall thickness everywhere, no overhangs >45°, no bridging issues\n\nmodule hollow_box(x,y,z,wall=2)        // helper: hollow rectangular shell\n{\n    difference()\n    {\n        cube([x,y,z]);                 // outer block\n        translate([wall,wall,wall])\n            cube([x-2*wall, y-2*wall, z-wall]); // inner void (leave bottom closed)\n    }\n}\n\n// 1. Main rain-shoe body – slightly flared\nmodule boot_body()\n{\n    difference()\n    {\n        // outer shape: tapered box 90×50×60 mm\n        linear_extrude(height=60, scale=[1.0,0.9], center=false)\n            square([90,50], center=true);\n\n        // hollow it out\n        translate([0,0,2])             // sit 2 mm above build plate\n            hollow_box(90-4, 50-4, 60-2);\n    }\n}\n\n// 2. Inlet cuff – cylinder that slips over 75 mm downspout pipe\nmodule cuff()\n{\n    difference()\n    {\n        cylinder(h=20, d1=82, d2=79);   // slight taper for printability\n        translate([0,0,-1])\n            cylinder(h=22, d=75);       // inner hole\n    }\n}\n\n// 3. Drainage slots – 5 narrow slits in the toe\nmodule drain_slots()\n{\n    for(i=[-40:20:40])\n    {\n        translate([i, 0, 0])\n            cube([2, 50, 3]);           // cut through sole\n    }\n}\n\n// 4. Structural ribs inside the cavity for strength and print stability\nmodule ribs()\n{\n    for(y=[-20:20:20])\n    {\n        translate([0,y,10])\n            cube([86,2,40], center=true);\n    }\n}\n\n// 5. Furniture feet – four little pads so the boot sits flat\nmodule feet()\n{\n    for(x=[-35,35], y=[-18,18])\n        translate([x,y,0])\n            cylinder(h=5, d=10, $fn=20);\n}\n\n// Assemble everything\nunion()\n{\n    // main parts\n    boot_body();\n    translate([0,0,60]) cuff();\n    \n    // subtract drain slots\n    translate([0,25,0]) drain_slots();\n    \n    // internal ribs (added after hollow_box so they print inside)\n    ribs();\n    \n    // external feet\n    feet();\n}",
    "renders": true
  },
  {
    "natural_object": "flashing",
    "openscad_code": "// Realistic 3D-printable flashing for furniture (medium complexity)\n// Overall size: 120 mm wide × 80 mm deep × 15 mm thick\n\n// Parameters\nwall = 2;               // 3D-printable wall thickness\nw = 120;                // overall width\nd = 80;                 // overall depth\nt = 15;                 // overall thickness\nbolt_d = 6;             // bolt hole diameter\nbolt_r = bolt_d/2;      // bolt hole radius\nboss_h = 6;             // raised boss height\nboss_r = 6;             // raised boss radius\nrib_w = 3;              // stiffening rib width\n\n// Main body – flat flashing plate with rounded corners\nmodule main_plate() {\n    difference() {\n        // rounded rectangular plate\n        minkowski() {\n            cube([w - 2*t, d - 2*t, t], center=true);\n            cylinder(h=0.01, r=t, center=true, $fn=32);\n        }\n        // lightening pocket on underside\n        translate([0,0,-t/2 + wall])\n            minkowski() {\n                cube([w - 2*t - 2*wall, d - 2*t - 2*wall, wall + 0.1], center=true);\n                cylinder(h=0.01, r=t - wall, center=true, $fn=32);\n            }\n    }\n}\n\n// Raised bosses for bolts at corners\nmodule corner_bosses() {\n    for (x = [-w/2 + boss_r + wall, w/2 - boss_r - wall],\n         y = [-d/2 + boss_r + wall, d/2 - boss_r - wall]) {\n        translate([x,y,0]) {\n            difference() {\n                cylinder(h=boss_h, r=boss_r, $fn=32);\n                translate([0,0,-0.1])\n                    cylinder(h=boss_h + 0.2, r=bolt_r, $fn=16);\n            }\n        }\n    }\n}\n\n// Side stiffening ribs for added rigidity\nmodule ribs() {\n    // longitudinal ribs\n    for (x = [-w/3, w/3]) {\n        translate([x, 0, 0])\n            cube([rib_w, d - 2*t, t], center=true);\n    }\n    // transverse ribs\n    for (y = [-d/3, d/3]) {\n        translate([0, y, 0])\n            cube([w - 2*t, rib_w, t], center=true);\n    }\n}\n\n// Drainage groove on top surface (realistic detail)\nmodule drain_groove() {\n    translate([0, -d/4, t/2 - 1])\n        cube([w - 4*t, 2, 1], center=true);\n}\n\n// Assembly\nunion() {\n    main_plate();\n    corner_bosses();\n    ribs();\n    drain_groove();\n}",
    "renders": true
  },
  {
    "natural_object": "shingle",
    "openscad_code": "// Shingle-style side table\n// Realistic medium-complexity furniture piece\n// Overall footprint: 120mm x 120mm x 120mm\n\n$fn = 32;\n\n// Main parameters\ntable_top_d = 120;\ntable_top_t = 8;\nleg_t = 20;\nleg_h = 100;\napron_h = 60;\nshingle_t = 2;\nwall_thickness = 2;\n\nmodule shingle_tile(w, l, t, overlap) {\n    // Single cedar shingle tile with realistic taper\n    difference() {\n        union() {\n            // Main shingle body\n            translate([0, 0, t/2])\n                cube([w, l, t], center=true);\n            \n            // Tapered edge\n            translate([0, l/2 - overlap/2, t/4])\n                cube([w, overlap, t/2], center=true);\n        }\n        \n        // Taper cut\n        translate([0, l/2 - overlap/2, 0])\n            rotate([0, 15, 0])\n                cube([w*1.2, overlap*1.2, t*2], center=true);\n    }\n}\n\nmodule table_top() {\n    // Circular top with shingle inlay pattern\n    difference() {\n        // Main solid top\n        cylinder(h=table_top_t, d=table_top_d);\n        \n        // Recess for shingles (2mm deep)\n        translate([0, 0, table_top_t - shingle_t])\n            cylinder(h=shingle_t + 0.1, d=table_top_d - 4);\n    }\n    \n    // Shingle pattern inlay\n    for (ring = [30:30:table_top_d/2 - 15]) {\n        tiles = max(8, ceil(2*PI*ring/20));\n        for (i = [0:tiles-1]) {\n            angle = i * 360/tiles;\n            translate([ring*cos(angle), ring*sin(angle), table_top_t - shingle_t])\n                rotate([0, 0, angle])\n                    shingle_tile(18, 25, shingle_t, 8);\n        }\n    }\n}\n\nmodule leg(x_offset, y_offset) {\n    // Tapered square leg with shingle accent\n    translate([x_offset, y_offset, leg_h/2]) {\n        // Main leg structure\n        difference() {\n            cube([leg_t, leg_t, leg_h], center=true);\n            \n            // Hollow center for material saving\n            translate([0, 0, 0])\n                cube([leg_t - wall_thickness*2, leg_t - wall_thickness*2, leg_h - 4], center=true);\n        }\n        \n        // Shingle accent strips\n        for (h = [10:20:leg_h - 20]) {\n            translate([0, 0, h - leg_h/2])\n                shingle_tile(leg_t + 2, 8, shingle_t, 0);\n        }\n    }\n}\n\nmodule apron() {\n    // Connecting apron between legs with shingle detail\n    height = apron_h;\n    \n    // Front/back aprons\n    for (side = [-1, 1]) {\n        translate([0, side*(table_top_d/2 - leg_t/2 - 5), height/2]) {\n            difference() {\n                cube([table_top_d - leg_t*2 - 10, 10, height], center=true);\n                \n                // Cutout for visual lightness\n                translate([0, 0, -height/4])\n                    cube([table_top_d - leg_t*2 - 20, 12, height/2], center=true);\n            }\n            \n            // Shingle trim\n            for (x = [-40:20:40]) {\n                translate([x, 0, height/2 - 2])\n                    shingle_tile(18, 12, shingle_t, 0);\n            }\n        }\n    }\n    \n    // Left/right aprons\n    for (side = [-1, 1]) {\n        translate([side*(table_top_d/2 - leg_t/2 - 5), 0, height/2]) {\n            rotate([0, 0, 90])\n                difference() {\n                    cube([table_top_d - leg_t*2 - 10, 10, height], center=true);\n                    \n                    // Matching cutout\n                    translate([0, 0, -height/4])\n                        cube([table_top_d - leg_t*2 - 20, 12, height/2], center=true);\n                }\n            \n            // Shingle trim\n            for (y = [-40:20:40]) {\n                translate([0, y, height/2 - 2])\n                    rotate([0, 0, 90])\n                        shingle_tile(18, 12, shingle_t, 0);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_h + table_top_t/2])\n    table_top();\n\n// Four legs\nfor (x = [-1, 1])\n    for (y = [-1, 1])\n        leg(x*(table_top_d/2 - leg_t/2 - 2), y*(table_top_d/2 - leg_t/2 - 2));\n\n// Apron connecting legs\ntranslate([0, 0, leg_h - apron_h/2])\n    apron();",
    "renders": true
  },
  {
    "natural_object": "thatch",
    "openscad_code": "// Thatch Furniture - Realistic Style, Medium Complexity\n// A small thatched stool with woven seat and support legs\n\n$fn = 36;\n\n// Overall dimensions\nlength = 80;\nwidth = 60;\nheight = 45;\nthatch_thickness = 4;\nleg_diameter = 8;\n\n// Thatch module - creates woven pattern\nmodule thatch_straw(x, y, z, angle) {\n    translate([x, y, z]) {\n        rotate([0, 0, angle]) {\n            // Main straw bundle\n            difference() {\n                cylinder(h = 12, d1 = thatch_thickness, d2 = thatch_thickness * 0.8);\n                // Hollow center for printability\n                cylinder(h = 13, d1 = thatch_thickness - 2, d2 = thatch_thickness * 0.8 - 2);\n            }\n            // Tied section at base\n            translate([0, 0, 0.5]) {\n                color(\"brown\") {\n                    cylinder(h = 3, d = thatch_thickness + 1);\n                }\n            }\n        }\n    }\n}\n\n// Woven thatch seat\nmodule thatch_seat() {\n    union() {\n        // Base frame\n        difference() {\n            cube([length, width, thatch_thickness * 2], center = true);\n            cube([length - 4, width - 4, thatch_thickness * 2 + 1], center = true);\n        }\n        \n        // Thatch bundles - horizontal\n        for (i = [-length/2 + 5 : 4 : length/2 - 5]) {\n            for (j = [-width/2 + 5 : 6 : width/2 - 5]) {\n                thatch_straw(i, j, thatch_thickness, 0);\n            }\n        }\n        \n        // Thatch bundles - vertical (crossing)\n        for (i = [-length/2 + 7 : 6 : length/2 - 7]) {\n            for (j = [-width/2 + 3 : 4 : width/2 - 3]) {\n                thatch_straw(i, j, thatch_thickness + 1, 90);\n            }\n        }\n    }\n}\n\n// Leg with thatch wrapping\nmodule thatch_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, -height/2 + 5]) {\n        union() {\n            // Main leg post\n            cylinder(h = height - 10, d = leg_diameter);\n            \n            // Thatch wrapping around leg\n            for (h = [5 : 8 : height - 15]) {\n                rotate([0, 0, h * 15]) {\n                    translate([leg_diameter/2 + 1, 0, h]) {\n                        thatch_straw(0, 0, 0, 45);\n                    }\n                }\n            }\n            \n            // Foot detail\n            translate([0, 0, -1]) {\n                cylinder(h = 3, d = leg_diameter + 4);\n            }\n        }\n    }\n}\n\n// Support frame between legs\nmodule support_frame() {\n    // Front support\n    translate([0, -width/2 + 15, -height/2 + 15]) {\n        cube([length - 20, leg_diameter, leg_diameter], center = true);\n    }\n    \n    // Side supports\n    translate([length/2 - 15, 0, -height/2 + 15]) {\n        rotate([0, 90, 0]) {\n            cube([width - 20, leg_diameter, leg_diameter], center = true);\n        }\n    }\n    \n    translate([-length/2 + 15, 0, -height/2 + 15]) {\n        rotate([0, 90, 0]) {\n            cube([width - 20, leg_diameter, leg_diameter], center = true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Thatch seat\n    translate([0, 0, height/2 - 5]) {\n        thatch_seat();\n    }\n    \n    // Four legs\n    thatch_leg(length/2 - 15, width/2 - 15);\n    thatch_leg(-length/2 + 15, width/2 - 15);\n    thatch_leg(length/2 - 15, -width/2 + 15);\n    thatch_leg(-length/2 + 15, -width/2 + 15);\n    \n    // Support frame\n    support_frame();\n    \n    // Corner reinforcements\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (length/2 - 15), y * (width/2 - 15), height/2 - 15]) {\n                rotate([45, 0, 0]) {\n                    cube([leg_diameter * 2, leg_diameter * 2, leg_diameter], center = true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "membrane",
    "openscad_code": "// Membrane Chair - Realistic Style, Medium Complexity\n// A modern cantilever chair with stretched membrane seat/back\n\n// Parameters\nchair_width = 60;\nchair_depth = 55;\nchair_height = 80;\nseat_height = 45;\nback_height = 35;\nframe_thickness = 3;\nmembrane_thickness = 2;\n\n// Main module\nmodule membrane_chair() {\n    // Base frame structure\n    union() {\n        // Left cantilever leg\n        translate([-chair_width/2 + frame_thickness, 0, 0])\n            rotate([0, 15, 0])\n            cylinder(h=chair_height, r=frame_thickness, $fn=20);\n        \n        // Right cantilever leg\n        translate([chair_width/2 - frame_thickness, 0, 0])\n            rotate([0, -15, 0])\n            cylinder(h=chair_height, r=frame_thickness, $fn=20);\n        \n        // Rear cross support\n        translate([0, -chair_depth/2 + 5, 10])\n            rotate([90, 0, 0])\n            cylinder(h=chair_width - 2*frame_thickness, r=frame_thickness, $fn=20);\n        \n        // Front cross support\n        translate([0, chair_depth/2 - 5, 10])\n            rotate([90, 0, 0])\n            cylinder(h=chair_width - 2*frame_thickness, r=frame_thickness, $fn=20);\n        \n        // Seat frame\n        seat_frame();\n        \n        // Backrest frame\n        backrest_frame();\n        \n        // Membrane seat\n        membrane_seat();\n        \n        // Membrane backrest\n        membrane_back();\n    }\n}\n\n// Seat frame structure\nmodule seat_frame() {\n    // Left side support\n    translate([-chair_width/2 + frame_thickness, 0, seat_height])\n        rotate([0, 0, -10])\n        cube([frame_thickness*2, chair_depth, frame_thickness]);\n    \n    // Right side support\n    translate([chair_width/2 - frame_thickness, 0, seat_height])\n        rotate([0, 0, 10])\n        cube([frame_thickness*2, chair_depth, frame_thickness]);\n    \n    // Front support bar\n    translate([0, chair_depth/2 - frame_thickness, seat_height + 2])\n        rotate([0, 0, 0])\n        cube([chair_width - frame_thickness*2, frame_thickness*2, frame_thickness]);\n    \n    // Rear support bar\n    translate([0, -chair_depth/2 + frame_thickness, seat_height + 2])\n        rotate([0, 0, 0])\n        cube([chair_width - frame_thickness*2, frame_thickness*2, frame_thickness]);\n}\n\n// Backrest frame structure\nmodule backrest_frame() {\n    // Left upright\n    translate([-chair_width/2 + frame_thickness, -chair_depth/2 + 10, seat_height + back_height/2])\n        rotate([10, 0, 0])\n        cylinder(h=back_height, r=frame_thickness, $fn=20);\n    \n    // Right upright\n    translate([chair_width/2 - frame_thickness, -chair_depth/2 + 10, seat_height + back_height/2])\n        rotate([10, 0, 0])\n        cylinder(h=back_height, r=frame_thickness, $fn=20);\n    \n    // Top cross bar\n    translate([0, -chair_depth/2 + 10, seat_height + back_height - 5])\n        rotate([90, 0, 0])\n        cylinder(h=chair_width - 2*frame_thickness, r=frame_thickness, $fn=20);\n}\n\n// Membrane seat with realistic stretching effect\nmodule membrane_seat() {\n    // Create stretched membrane surface\n    difference() {\n        // Base membrane\n        translate([0, 0, seat_height + membrane_thickness/2])\n            scale([1, 1, 0.3])\n            sphere(r=chair_width/2, $fn=100);\n        \n        // Cut to seat shape\n        translate([0, 0, seat_height - 5])\n            cube([chair_width + 10, chair_depth + 10, 10], center=true);\n    }\n    \n    // Add subtle texture pattern for membrane\n    for (i = [-3:3]) {\n        for (j = [-2:2]) {\n            translate([i*8, j*8, seat_height + membrane_thickness + 0.5])\n                rotate([90, 0, 0])\n                cylinder(h=0.5, r=1, $fn=12);\n        }\n    }\n}\n\n// Membrane backrest\nmodule membrane_back() {\n    // Create curved backrest membrane\n    difference() {\n        // Base curved surface\n        translate([0, -chair_depth/2 + 10, seat_height + back_height/2])\n            rotate([10, 0, 0])\n            scale([1, 0.5, 1])\n            sphere(r=chair_width/2, $fn=80);\n        \n        // Trim to backrest shape\n        translate([0, -chair_depth - 5, seat_height + back_height/2])\n            cube([chair_width + 10, chair_depth, back_height + 10], center=true);\n    }\n    \n    // Reinforcement ribs\n    for (i = [-1:1]) {\n        translate([i*15, -chair_depth/2 + 10, seat_height + back_height/2])\n            rotate([10, 0, 0])\n            cube([3, 2, back_height - 10]);\n    }\n}\n\n// Generate the chair\nmembrane_chair();",
    "renders": true
  },
  {
    "natural_object": "sealant",
    "openscad_code": "// Sealant Furniture - Realistic Medium Complexity\n// A realistic sealant (seal animal) designed as a furniture piece\n// Overall size: 120mm length, 60mm width, 50mm height\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main body - seal torso\nmodule seal_body() {\n    // Central torso with oval shape\n    translate([0, 0, 25]) {\n        scale([1.2, 0.8, 0.6]) {\n            sphere(d = 60);\n        }\n    }\n    \n    // Lower belly - slightly flatter\n    translate([0, 0, 12]) {\n        scale([1.1, 0.9, 0.3]) {\n            sphere(d = 55);\n        }\n    }\n}\n\n// Head - rounded with snout\nmodule seal_head() {\n    translate([-50, 0, 25]) {\n        rotate([0, 20, 0]) {\n            // Main head shape\n            scale([0.8, 0.7, 0.7]) {\n                sphere(d = 35);\n            }\n            \n            // Snout extension\n            translate([-15, 0, -5]) {\n                scale([1.2, 0.8, 0.6]) {\n                    sphere(d = 20);\n                }\n            }\n        }\n    }\n}\n\n// Flippers - structural support elements\nmodule front_flippers() {\n    // Left flipper - furniture leg style\n    translate([-20, -30, 10]) {\n        rotate([0, 0, -30]) {\n            // Upper arm\n            cylinder(h = 25, d1 = 12, d2 = 10);\n            \n            // Lower flipper segment\n            translate([0, -15, -12]) {\n                rotate([90, 0, 0]) {\n                    scale([1, 0.3, 1.5]) {\n                        sphere(d = 20);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right flipper\n    mirror([0, 1, 0]) {\n        translate([-20, -30, 10]) {\n            rotate([0, 0, 30]) {\n                cylinder(h = 25, d1 = 12, d2 = 10);\n                translate([0, -15, -12]) {\n                    rotate([90, 0, 0]) {\n                        scale([1, 0.3, 1.5]) {\n                            sphere(d = 20);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Rear flippers - furniture support base\nmodule rear_flippers() {\n    translate([40, 0, 15]) {\n        // Tail base\n        cylinder(h = 8, d = 20);\n        \n        // Left rear flipper\n        translate([5, -15, -5]) {\n            rotate([0, -10, 45]) {\n                scale([0.8, 0.3, 1.2]) {\n                    sphere(d = 25);\n                }\n            }\n        }\n        \n        // Right rear flipper\n        translate([5, 15, -5]) {\n            rotate([0, -10, -45]) {\n                scale([0.8, 0.3, 1.2]) {\n                    sphere(d = 25);\n                }\n            }\n        }\n    }\n}\n\n// Whiskers - decorative structural elements\nmodule whiskers() {\n    for (i = [-1:1]) {\n        translate([-58, i * 8, 20]) {\n            rotate([0, 90 + i * 15, 0]) {\n                cylinder(h = 12, d = 1.5);\n            }\n        }\n    }\n}\n\n// Eyes - furniture hardware detail\nmodule eyes() {\n    for (i = [-1:1]) {\n        translate([-52, i * 12, 28]) {\n            // Eye socket\n            difference() {\n                sphere(d = 8);\n                translate([0, 0, 2]) {\n                    sphere(d = 6);\n                }\n            }\n            \n            // Eye pupil\n            translate([2, 0, 1]) {\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Decorative pattern - furniture texture\nmodule skin_pattern() {\n    // Spots pattern across back\n    for (x = [-30:10:30]) {\n        for (y = [-20:15:20]) {\n            translate([x, y, 35 + sin(x * 0.3) * 3]) {\n                scale([1, 0.8, 0.3]) {\n                    sphere(d = 6);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    seal_body();\n    seal_head();\n    \n    // Structural supports\n    front_flippers();\n    rear_flippers();\n    \n    // Details\n    whiskers();\n    eyes();\n    skin_pattern();\n    \n    // Furniture base - flat bottom for stability\n    translate([0, 0, 0]) {\n        cube([120, 60, 2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "caulk",
    "openscad_code": "// Realistic Caulk Tube Furniture (Medium Complexity)\n// Wall-mounted caulk tube holder with decorative elements\n\n$fn = 32;\n\n// Main dimensions\ntube_d = 48;          // Caulk tube diameter\ntube_l = 200;         // Caulk tube length\nnozzle_l = 40;        // Nozzle length\nnozzle_d = 12;        // Nozzle diameter\nwall_mount_w = 80;    // Wall mount width\nwall_mount_h = 30;    // Wall mount height\nwall_mount_d = 15;    // Wall mount depth\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\nmodule caulk_tube() {\n    // Main tube body\n    difference() {\n        // Outer tube\n        cylinder(h = tube_l, d = tube_d);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h = tube_l + 2, d = tube_d - 2*wall_t);\n        \n        // Top taper\n        translate([0, 0, tube_l - 20])\n            cylinder(h = 25, d1 = tube_d, d2 = nozzle_d);\n    }\n    \n    // Nozzle\n    translate([0, 0, tube_l - 20])\n        cylinder(h = nozzle_l, d = nozzle_d);\n    \n    // Cap threads (decorative)\n    for (i = [0:5:355]) {\n        rotate([0, 0, i])\n            translate([tube_d/2 - 2, 0, 0])\n                cube([4, 1, 10]);\n    }\n    \n    // Label area (slightly recessed)\n    translate([0, 0, tube_l/2])\n        difference() {\n            cylinder(h = tube_l/2, d = tube_d + 0.5);\n            translate([0, 0, -1])\n                cylinder(h = tube_l/2 + 2, d = tube_d - 1);\n        }\n}\n\nmodule wall_mount() {\n    // Main mounting plate\n    difference() {\n        cube([wall_mount_w, wall_mount_d, wall_mount_h]);\n        \n        // Screw holes\n        for (x = [-wall_mount_w/3, wall_mount_w/3]) {\n            translate([x, -1, wall_mount_h/2])\n                cylinder(h = wall_mount_d + 2, d = 6);\n        }\n    }\n    \n    // Tube cradle\n    translate([0, wall_mount_d, wall_mount_h/2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = tube_d + 8, d = tube_d + 8);\n                cylinder(h = tube_d + 8, d = tube_d);\n                translate([-tube_d - 4, 0, 0])\n                    cube([tube_d + 8, tube_d + 8, tube_d + 8]);\n            }\n    \n    // Support ribs\n    for (x = [-wall_mount_w/4, wall_mount_w/4]) {\n        translate([x, wall_mount_d/2, wall_mount_h/2])\n            cube([wall_t, wall_mount_d, wall_mount_h]);\n    }\n}\n\nmodule decorative_elements() {\n    // Organic leaf pattern on mount\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([wall_mount_w/2 - 8, wall_mount_d - 2, wall_mount_h - 8])\n                scale([1, 0.6, 1])\n                    rotate([0, 0, 15])\n                        cylinder(h = 12, d1 = 2, d2 = 6);\n    }\n    \n    // Drip detail at nozzle\n    translate([0, 0, tube_l + nozzle_l])\n        sphere(d = 6);\n}\n\n// Assembly\ntranslate([-tube_d/2 - 40, 0, 0])\n    wall_mount();\n\ntranslate([0, wall_mount_d + tube_d/2 + 4, wall_mount_h/2])\n    rotate([0, 90, 0])\n        caulk_tube();\n\ntranslate([-tube_d/2 - 40, 0, 0])\n    decorative_elements();",
    "renders": true
  },
  {
    "natural_object": "grout",
    "openscad_code": "// Grout Furniture - Realistic Style, Medium Complexity\n// A grout-themed furniture piece with structural elements and realistic proportions\n\n// Overall dimensions (mm)\ntotal_width = 120;\ntotal_depth = 60;\ntotal_height = 80;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Grout texture pattern module\nmodule grout_texture(width, depth, height) {\n    for (i = [0:3:width-3]) {\n        for (j = [0:3:depth-3]) {\n            translate([i, j, height - 1]) {\n                cube([2, 2, 1], center = true);\n            }\n        }\n    }\n}\n\n// Main body - grout block structure\nmodule grout_body() {\n    difference() {\n        // Outer shell\n        cube([total_width, total_depth, total_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([total_width - 2*wall_thickness, \n                  total_depth - 2*wall_thickness, \n                  total_height - wall_thickness]);\n    }\n    \n    // Add texture on top surface\n    grout_texture(total_width - 4, total_depth - 4, total_height);\n}\n\n// Support frame underneath\nmodule support_frame() {\n    // Front cross beam\n    translate([wall_thickness, wall_thickness, -5])\n        cube([total_width - 2*wall_thickness, wall_thickness, 5]);\n    \n    // Back cross beam\n    translate([wall_thickness, total_depth - 2*wall_thickness, -5])\n        cube([total_width - 2*wall_thickness, wall_thickness, 5]);\n    \n    // Side beams\n    translate([wall_thickness, wall_thickness, -5])\n        cube([wall_thickness, total_depth - 2*wall_thickness, 5]);\n    \n    translate([total_width - 2*wall_thickness, wall_thickness, -5])\n        cube([wall_thickness, total_depth - 2*wall_thickness, 5]);\n}\n\n// Leg structure with grout texture\nmodule grout_leg(x, y) {\n    translate([x, y, -15]) {\n        difference() {\n            // Main leg\n            cube([8, 8, 15]);\n            \n            // Hollow inside for material saving\n            translate([2, 2, 2])\n                cube([4, 4, 11]);\n        }\n        \n        // Add grout texture\n        for (i = [1:2:7]) {\n            translate([i, 4, 7.5])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Reinforcement ribs inside\nmodule internal_ribs() {\n    // Longitudinal ribs\n    translate([total_width/2 - 1, wall_thickness, wall_thickness])\n        cube([2, total_depth - 2*wall_thickness, total_height - 2*wall_thickness]);\n    \n    // Transverse ribs\n    translate([wall_thickness, total_depth/2 - 1, wall_thickness])\n        cube([total_width - 2*wall_thickness, 2, total_height - 2*wall_thickness]);\n}\n\n// Joint connectors\nmodule joint_connectors() {\n    // Corner joints\n    for (i = [0, 1]) {\n        for (j = [0, 1]) {\n            translate([i * total_width + (i == 0 ? 5 : -5), \n                      j * total_depth + (j == 0 ? 5 : -5), \n                      total_height/2]) {\n                rotate([0, 0, 45])\n                    cube([3, 3, 6], center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main grout body\n    grout_body();\n    \n    // Support frame\n    support_frame();\n    \n    // Four legs\n    grout_leg(5, 5);\n    grout_leg(total_width - 13, 5);\n    grout_leg(5, total_depth - 13);\n    grout_leg(total_width - 13, total_depth - 13);\n    \n    // Internal reinforcement\n    %internal_ribs();\n    \n    // Joint connectors\n    joint_connectors();\n}",
    "renders": true
  },
  {
    "natural_object": "mortar",
    "openscad_code": "// Realistic Mortar Furniture Item\n// Medium complexity OpenSCAD model\n// Overall height: 120mm\n\n// Parameters\nwall = 2;               // Wall thickness for 3D printing\nbase_d = 80;            // Base diameter\nbowl_d = 70;            // Bowl inner diameter\nbowl_depth = 40;        // Bowl depth\nfoot_h = 25;            // Foot height\nleg_w = 8;              // Leg width\nleg_h = 20;             // Leg height\n\n// Base module with three legs\nmodule base() {\n    // Central foot\n    cylinder(h=foot_h, d1=base_d*0.6, d2=base_d*0.4, $fn=64);\n    \n    // Three support legs\n    for(i=[0:120:359]) {\n        rotate([0,0,i])\n        translate([base_d*0.35, 0, foot_h-leg_h])\n        cube([leg_w, leg_w, leg_h], center=true);\n    }\n}\n\n// Main bowl body\nmodule bowl_body() {\n    // Outer bowl\n    cylinder(h=bowl_depth+10, d=bowl_d+wall*2, $fn=128);\n    \n    // Inner cavity (subtractive)\n    translate([0,0,wall])\n    cylinder(h=bowl_depth+5, d=bowl_d, $fn=128);\n}\n\n// Rim detail\nmodule rim() {\n    // Upper rim\n    translate([0,0,wall+5])\n    cylinder(h=5, d1=bowl_d+wall*2+4, d2=bowl_d+wall*2, $fn=128);\n    \n    // Lower rim detail\n    translate([0,0,0])\n    cylinder(h=3, d1=bowl_d+wall*2, d2=bowl_d+wall*2+2, $fn=128);\n}\n\n// Handle attachment points\nmodule handles() {\n    // Left handle mount\n    translate([-bowl_d/2-wall-2, 0, bowl_depth/2+wall])\n    rotate([90,0,0])\n    cylinder(h=15, d=6, $fn=32);\n    \n    // Right handle mount\n    translate([bowl_d/2+wall+2, 0, bowl_depth/2+wall])\n    rotate([90,0,0])\n    cylinder(h=15, d=6, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base();\n    \n    // Main bowl assembly\n    translate([0,0,foot_h])\n    union() {\n        bowl_body();\n        rim();\n        handles();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "concrete",
    "openscad_code": "// Concrete Stool with Reinforced Base\n// Realistic-style concrete furniture piece with structural reinforcement details\n\n// Overall dimensions\nstool_height = 70;\nseat_diameter = 120;\nbase_diameter = 80;\nwall_thickness = 2;\n\nmodule concrete_stool() {\n    // Main seat with slight taper\n    translate([0, 0, stool_height - 8])\n    cylinder(h = 8, d1 = seat_diameter, d2 = seat_diameter * 0.95, $fn = 48);\n    \n    // Central support column with concrete texture\n    translate([0, 0, 0])\n    cylinder(h = stool_height - 8, d = base_diameter, $fn = 32);\n    \n    // Reinforcement ribs (3 equally spaced)\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([base_diameter/2 - 3, -wall_thickness/2, stool_height/3])\n        cube([base_diameter/2 - 5, wall_thickness, stool_height/3]);\n    }\n    \n    // Base pad for stability\n    translate([0, 0, -2])\n    cylinder(h = 4, d = base_diameter * 1.1, $fn = 32);\n    \n    // Drainage hole through center\n    translate([0, 0, -1])\n    cylinder(h = stool_height + 2, d = 6, $fn = 24);\n    \n    // Surface texture - subtle indentations\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([seat_diameter/2 - 10, -1, stool_height - 4])\n        cube([2, 2, 4]);\n    }\n    \n    // Under-seat support ring\n    translate([0, 0, stool_height - 12])\n    difference() {\n        cylinder(h = 4, d = seat_diameter * 0.8, $fn = 32);\n        cylinder(h = 4, d = seat_diameter * 0.8 - 4, $fn = 32);\n    }\n    \n    // Base reinforcement ring\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 8, d = base_diameter * 1.1, $fn = 32);\n        cylinder(h = 8, d = base_diameter * 0.9, $fn = 32);\n    }\n}\n\n// Assembly\nconcrete_stool();",
    "renders": true
  },
  {
    "natural_object": "cement",
    "openscad_code": "// Cement stool - realistic style\n// Overall dimensions: 120mm diameter, 450mm height\n// 2mm wall thickness throughout for 3D printing\n\nmodule cement_texture(x, y, z) {\n    // Create rough cement surface using small spheres\n    for (i = [0:5:x]) {\n        for (j = [0:5:y]) {\n            translate([i, j, z]) {\n                sphere(r = 0.5 + (rand() * 1.5), $fn = 6);\n            }\n        }\n    }\n}\n\nmodule stool_leg(height, angle) {\n    // Create one angled leg with cement texture\n    difference() {\n        // Main leg cylinder\n        rotate([0, angle, 0]) {\n            cylinder(h = height, r1 = 15, r2 = 12, center = false, $fn = 20);\n        }\n        \n        // Hollow center\n        rotate([0, angle, 0]) {\n            translate([0, 0, 2]) {\n                cylinder(h = height - 4, r1 = 13, r2 = 10, center = false, $fn = 20);\n            }\n        }\n    }\n    \n    // Add texture to outer surface\n    for (i = [5:10:height-5]) {\n        rotate([0, angle, 0]) {\n            translate([0, 0, i]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 2, r = 15.5, center = true, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\nmodule cross_support(height) {\n    // Create cross-shaped support between legs\n    difference() {\n        union() {\n            // Horizontal bar\n            cube([100, 20, 20], center = true);\n            // Vertical bar\n            cube([20, 100, 20], center = true);\n        }\n        \n        // Hollow center\n        cube([96, 16, 16], center = true);\n    }\n}\n\n// Main stool construction\nunion() {\n    // Seat top\n    difference() {\n        // Main seat disc\n        cylinder(h = 25, r = 60, center = true, $fn = 50);\n        \n        // Top surface depression\n        translate([0, 0, 5]) {\n            cylinder(h = 20, r = 58, center = true, $fn = 50);\n        }\n        \n        // Hollow center\n        cylinder(h = 25, r = 58, center = true, $fn = 50);\n    }\n    \n    // Add edge detail\n    for (i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([59, 0, 0]) {\n                cube([2, 3, 25], center = true);\n            }\n        }\n    }\n    \n    // Legs\n    translate([0, 0, -12.5]) {\n        for (i = [0:90:359]) {\n            rotate([0, 0, i]) {\n                translate([40, 0, 0]) {\n                    stool_leg(225, 15);\n                }\n            }\n        }\n    }\n    \n    // Cross supports\n    translate([0, 0, -150]) {\n        cross_support(0);\n    }\n    \n    translate([0, 0, -250]) {\n        rotate([0, 0, 45]) {\n            cross_support(0);\n        }\n    }\n    \n    // Base ring\n    translate([0, 0, -237.5]) {\n        difference() {\n            cylinder(h = 15, r = 80, center = true, $fn = 40);\n            cylinder(h = 15, r = 78, center = true, $fn = 40);\n        }\n    }\n    \n    // Reinforcement ribs\n    for (i = [0:90:359]) {\n        rotate([0, 0, i]) {\n            translate([50, 0, -125]) {\n                cube([20, 4, 100], center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "plaster",
    "openscad_code": "// Plaster Stool with Four Legs and Cross Bracing\n// Dimensions chosen for 3D-printability: ~120 mm tall, 120 mm seat diameter\n\n// Overall proportions\nseat_d = 120;               // seat diameter\nseat_h = 12;                // seat thickness\nleg_h = 90;                 // leg length\nleg_d = 20;                 // leg diameter\nbrace_w = 8;                // cross-brace thickness\nwall = 2;                   // uniform wall thickness everywhere\n\n// Helper: hollow cylinder\nmodule hollow_cylinder(od, id, h) {\n    difference() {\n        cylinder(d = od, h = h, $fn = 48);\n        translate([0, 0, -0.1])\n            cylinder(d = id, h = h + 0.2, $fn = 48);\n    }\n}\n\n// Seat: round, slightly domed top surface\nmodule seat() {\n    difference() {\n        // main seat disc plus gentle dome\n        union() {\n            cylinder(d = seat_d, h = seat_h, $fn = 48);\n            translate([0, 0, seat_h])\n                scale([1, 1, 0.2])\n                    sphere(d = seat_d, $fn = 48);\n        }\n        // hollow it out from below\n        translate([0, 0, wall])\n            cylinder(d = seat_d - 2*wall, h = seat_h + 1, $fn = 48);\n    }\n}\n\n// Single leg with bottom plug for clean printing\nmodule leg() {\n    difference() {\n        cylinder(d = leg_d, h = leg_h, $fn = 32);\n        // hollow tube\n        translate([0, 0, wall])\n            cylinder(d = leg_d - 2*wall, h = leg_h - wall, $fn = 32);\n    }\n    // add small chamfer at bottom for better print finish\n    translate([0, 0, -0.5])\n        cylinder(d1 = leg_d, d2 = leg_d - 2, h = 2, $fn = 32);\n}\n\n// Cross-brace ring between legs\nmodule brace_ring() {\n    difference() {\n        hollow_cylinder(od = seat_d - 2*leg_d, id = seat_d - 2*leg_d - 2*brace_w, h = brace_w);\n    }\n}\n\n// Position four legs evenly around seat\nmodule legs_assembly() {\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a])\n            translate([(seat_d - leg_d)/2, 0, 0])\n                rotate([90, 0, 0])\n                    leg();\n    }\n}\n\n// Position brace ring at mid-height\nmodule braces_assembly() {\n    translate([0, 0, leg_h/2 - brace_w/2])\n        brace_ring();\n}\n\n// Final stool\nunion() {\n    // seat on top\n    translate([0, 0, leg_h])\n        seat();\n\n    // four legs\n    legs_assembly();\n\n    // cross-brace ring\n    braces_assembly();\n}",
    "renders": true
  },
  {
    "natural_object": "stucco",
    "openscad_code": "// Stucco-style small display shelf (for plants / trinkets)\n// Overall footprint ~100 x 60 mm, height 120 mm\n// Wall-safe 2 mm everywhere; no over-hangs > 45°\n\n$fn = 64;           // smooth curves\n\nwall = 2;           // universal wall thickness\ns = wall;           // shortcut\n\n// --------------------------------------------------\n// Main body\nmodule shelf_body() {\n    // back plate with stucco frame relief\n    difference() {\n        cube([100, 60, wall]);                          // back plate\n        translate([wall, wall, -0.1])\n            cube([100-2*wall, 60-2*wall, wall+0.2]);    // recess\n    }\n}\n\n// --------------------------------------------------\n// Stucco frame border (simple raised band)\nmodule stucco_frame() {\n    for (step = [0, 1]) {               // top & bottom\n        y = step == 0 ? 0 : 60-wall;\n        translate([0, y, 0])\n            cube([100, wall, 6]);       // raised band\n    }\n    for (step = [0, 1]) {               // left & right\n        x = step == 0 ? 0 : 100-wall;\n        translate([x, 0, 0])\n            cube([wall, 60, 6]);\n    }\n}\n\n// --------------------------------------------------\n// Shelf platforms\nmodule shelf_platforms() {\n    hlist = [30, 60, 90];               // shelf heights\n    for (h = hlist) {\n        union() {\n            translate([0, 0, h])\n                cube([100, 60, wall]);  // platform\n            // front lip for realism\n            translate([0, 60-wall, h])\n                cube([100, wall, 10]);\n        }\n    }\n}\n\n// --------------------------------------------------\n// Decorative stucco “boss” studs\nmodule studs() {\n    step = 25;\n    for (y = [20, 40]) {\n        for (x = [step, 2*step, 3*step]) {\n            translate([x, y, 6])\n                scale([1, 1, 0.5])\n                    sphere(d=8);\n        }\n    }\n}\n\n// --------------------------------------------------\n// Assemble\nunion() {\n    shelf_body();\n    translate([0, 0, wall])\n        stucco_frame();\n    shelf_platforms();\n    studs();\n}",
    "renders": true
  },
  {
    "natural_object": "render",
    "openscad_code": "// Modern Scandinavian-Style Chair\n// Overall size: 100mm x 90mm x 110mm (suitable for 3D printing)\n\nwall_thickness = 2;\n\nmodule rounded_cube(size, radius) {\n    // Creates a cube with rounded edges\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        cylinder(h=0.01, r=radius, $fn=20);\n    }\n}\n\nmodule leg(x, y, z) {\n    // Chair leg with slightly tapered profile\n    translate([x, y, 0])\n    linear_extrude(height=z, scale=[0.9, 0.9])\n    offset(r=2)\n    square([8, 8], center=true);\n}\n\nmodule back_support(x, y, z, angle) {\n    // Curved back support slat\n    translate([x, y, z])\n    rotate([angle, 0, 0])\n    difference() {\n        rounded_cube([70, 6, 8], 2);\n        translate([5, -1, 2])\n        cube([60, 8, 4]);\n    }\n}\n\nmodule seat_surface() {\n    // Contoured seat with ventilation holes\n    difference() {\n        // Main seat base\n        translate([0, 0, 45])\n        rounded_cube([80, 70, 6], 4);\n        \n        // Ventilation holes pattern\n        for (x = [-30, -10, 10, 30]) {\n            for (y = [-25, -10, 5, 20]) {\n                translate([x, y, 48])\n                cylinder(h=10, r=3, $fn=16);\n            }\n        }\n        \n        // Undercut for weight reduction\n        translate([0, 0, 45])\n        scale([0.8, 0.8, 1])\n        rounded_cube([80, 70, 8], 4);\n    }\n}\n\nmodule backrest() {\n    // Chair backrest with ergonomic curve\n    difference() {\n        union() {\n            // Main back frame\n            translate([0, -35, 75])\n            rounded_cube([76, 8, 60], 3);\n            \n            // Horizontal back slats\n            for (i = [1:3]) {\n                back_support(0, -31, 50 + i*15, 5);\n            }\n        }\n        \n        // Weight reduction cutouts\n        for (i = [1:3]) {\n            translate([0, -40, 50 + i*15])\n            rotate([5, 0, 0])\n            cube([72, 10, 4]);\n        }\n    }\n}\n\nmodule stretcher(x1, y1, x2, y2, z) {\n    // Horizontal support between legs\n    translate([(x1+x2)/2, (y1+y2)/2, z])\n    rotate([0, 0, atan2(y2-y1, x2-x1)])\n    rounded_cube([sqrt(pow(x2-x1,2)+pow(y2-y1,2)), 6, 6], 2);\n}\n\n// Main chair assembly\nunion() {\n    // Seat surface\n    seat_surface();\n    \n    // Backrest assembly\n    backrest();\n    \n    // Four legs\n    leg(-30, -25, 45);\n    leg(30, -25, 45);\n    leg(-30, 25, 45);\n    leg(30, 25, 45);\n    \n    // Front stretcher\n    stretcher(-30, 25, 30, 25, 22);\n    \n    // Side stretchers\n    stretcher(-30, -25, -30, 25, 22);\n    stretcher(30, -25, 30, 25, 22);\n    \n    // Rear stretcher\n    stretcher(-30, -25, 30, -25, 22);\n    \n    // Corner brackets for stability\n    for (x = [-30, 30]) {\n        for (y = [-25, 25]) {\n            translate([x, y, 45])\n            difference() {\n                cube([8, 8, 6]);\n                translate([2, 2, 2])\n                cube([4, 4, 6]);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "gypsum",
    "openscad_code": "// Gypsum (plaster) desk organizer / pen tray\n// Medium complexity, realistic proportions, 3D-printable\n// Total footprint ~110 x 80 mm, height 35 mm\n\n$fn = 30; // smooth curves\n\n// Overall dimensions\nlength = 110;\nwidth  = 80;\nheight = 35;\nwall   = 2; // printable wall thickness\n\n// Main tray body\nmodule tray_body() {\n    difference() {\n        // Outer rounded block\n        translate([0,0,height/2])\n            minkowski() {\n                cube([length, width, height], center=true);\n                sphere(3);\n            }\n        // Hollow cavity\n        translate([0,0,height/2])\n            minkowski() {\n                cube([length-wall*2, width-wall*2, height-wall], center=true);\n                sphere(2);\n            }\n    }\n}\n\n// Realistic gypsum surface: subtle chips & pores\nmodule surface_texture() {\n    for (a = [0:5:90]) {\n        for (b = [0:5:70]) {\n            translate([a-45, b-35, height-1])\n                sphere(r = 0.3 + 0.2*cos(3*a)*sin(2*b));\n        }\n    }\n}\n\n// Side pen slots (three cylindrical holders)\nmodule pen_slots() {\n    slot_d = 14;  // Ø14 mm for standard pens\n    slot_h = 25;\n    translate([length/2 - 10, 0, 0]) {\n        for (i = [-1,0,1]) {\n            translate([0, i*25, slot_h/2])\n                difference() {\n                    cylinder(h = slot_h, d = slot_d + wall*2);\n                    cylinder(h = slot_h + 1, d = slot_d);\n                }\n        }\n    }\n}\n\n// Reinforcement ribs inside base (printable without supports)\nmodule ribs() {\n    for (x = [-length/2 + 15 : 30 : length/2 - 15]) {\n        translate([x, 0, height/2 - wall/2])\n            cube([2, width - wall*2, height - wall], center=true);\n    }\n    for (y = [-width/2 + 15 : 30 : width/2 - 15]) {\n        translate([0, y, height/2 - wall/2])\n            cube([length - wall*2, 2, height - wall], center=true);\n    }\n}\n\n// Drain / drying holes (realistic gypsum casting vents)\nmodule vents() {\n    for (p = [[-length/2+10, -width/2+10],\n               [ length/2-10,  width/2-10],\n               [ length/2-10, -width/2+10],\n               [-length/2+10,  width/2-10]]) {\n        translate([p[0], p[1], height-1])\n            rotate([90,0,0])\n                cylinder(h = 2, d1 = 3, d2 = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    tray_body();\n    pen_slots();\n    ribs();\n}\n\ndifference() {\n    union();\n    surface_texture();\n    vents();\n}",
    "renders": true
  },
  {
    "natural_object": "drywall",
    "openscad_code": "// Drywall bookshelf module\n// Overall dimensions: 120mm x 40mm x 150mm (W x D x H)\n\n$fn=32;\n\n// Wall thickness constant\nwall_th = 2;\n\n// Main drywall panel with paper backing\nmodule drywall_panel(width, height, depth, has_texture=true) {\n    difference() {\n        // Main gypsum core\n        translate([-wall_th, -wall_th, -wall_th])\n            cube([width+2*wall_th, depth+2*wall_th, height+2*wall_th]);\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cube([width, depth, height]);\n            \n        // Texture pattern (subtle bumps for stucco finish)\n        if(has_texture) {\n            for(x=[2:4:width-2]) {\n                for(y=[2:4:depth-2]) {\n                    for(z=[2:8:height-2]) {\n                        translate([x, y, z])\n                            sphere(d=1.2, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Paper backing on front and back\n    translate([-wall_th/2, -wall_th/2, -wall_th/2])\n        cube([wall_th, depth+wall_th, height+wall_th]);\n    translate([width-wall_th/2, -wall_th/2, -wall_th/2])\n        cube([wall_th, depth+wall_th, height+wall_th]);\n}\n\n// Shelf support bracket\nmodule shelf_bracket() {\n    // Vertical support\n    translate([0, 0, 0])\n        cube([wall_th*2, 15, 20]);\n    \n    // Horizontal support\n    translate([0, 0, 20-wall_th])\n        cube([20, 15, wall_th*2]);\n    \n    // Triangular brace\n    union() {\n        translate([wall_th*2, 0, 0])\n            cube([wall_th, 15, 20]);\n        translate([wall_th*2, 0, 0])\n            rotate([0, 45, 0])\n                cube([wall_th, 15, 14.14]);\n    }\n}\n\n// Shelf with wood grain texture\nmodule shelf(width, depth) {\n    difference() {\n        cube([width, depth, wall_th*2]);\n        \n        // Wood grain grooves\n        for(x=[5:5:width-5]) {\n            translate([x, wall_th/2, 0])\n                cube([0.5, depth-wall_th, wall_th*2]);\n        }\n    }\n}\n\n// Main assembly\nmodule drywall_bookshelf() {\n    // Back drywall panel\n    drywall_panel(120, 40, 150);\n    \n    // Bottom shelf\n    translate([10, 0, 30])\n        shelf(100, 40);\n    \n    // Top shelf\n    translate([10, 0, 100])\n        shelf(100, 40);\n    \n    // Shelf brackets (4 corners)\n    translate([10, 5, 30])\n        shelf_bracket();\n    translate([90, 5, 30])\n        mirror([1,0,0])\n            shelf_bracket();\n    translate([10, 5, 100-wall_th*2])\n        shelf_bracket();\n    translate([90, 5, 100-wall_th*2])\n        mirror([1,0,0])\n            shelf_bracket();\n    \n    // Side drywall panels\n    translate([-wall_th, 0, 0])\n        rotate([0, 90, 0])\n            drywall_panel(150, 40, wall_th*2, false);\n    translate([120-wall_th, 0, 0])\n        rotate([0, 90, 0])\n            drywall_panel(150, 40, wall_th*2, false);\n    \n    // Bottom base\n    translate([0, 0, -wall_th*2])\n        cube([120, 40, wall_th*2]);\n}\n\n// Render the bookshelf\ndrywall_bookshelf();",
    "renders": true
  },
  {
    "natural_object": "plasterboard",
    "openscad_code": "// Plasterboard Bookcase Unit\n// Realistic style, medium complexity\n// Dimensions: 120mm height, 80mm width, 30mm depth\n\nmodule screw_head() {\n    // Countersunk screw head for realistic detail\n    difference() {\n        cylinder(h=1, r=3, $fn=20);\n        translate([0,0,-0.1]) cylinder(h=1.5, r=2.5, $fn=20);\n    }\n}\n\nmodule screw(x, y) {\n    translate([x, y, 1]) screw_head();\n}\n\nmodule plasterboard_sheet(w, h, d, detail=true) {\n    // Main plasterboard with paper backing texture\n    difference() {\n        cube([w, h, d]);\n        \n        // Tapered edges on long sides\n        translate([-0.1, 0, -0.1]) cube([w+0.2, 2, d+0.2]);\n        translate([-0.1, h-2, -0.1]) cube([w+0.2, 2, d+0.2]);\n    }\n    \n    if (detail) {\n        // Paper backing layer\n        translate([0, 0, d-0.2]) color([0.95, 0.9, 0.85]) cube([w, h, 0.2]);\n        \n        // Front paper layer\n        translate([0, 0, 0]) color([0.95, 0.9, 0.85]) cube([w, h, 0.2]);\n    }\n}\n\nmodule shelf(w, d) {\n    plasterboard_sheet(w, 8, d);\n}\n\nmodule vertical_divider(h, d) {\n    plasterboard_sheet(2, h, d);\n}\n\nmodule back_panel(w, h) {\n    plasterboard_sheet(w, h, 2);\n}\n\nmodule bookcase_unit() {\n    wall_thickness = 2;\n    outer_width = 80;\n    outer_height = 120;\n    outer_depth = 30;\n    \n    // Back panel\n    translate([-wall_thickness/2, -wall_thickness/2, 0]) \n        back_panel(outer_width, outer_height);\n    \n    // Bottom shelf\n    translate([0, 0, 0]) shelf(outer_width, outer_depth);\n    \n    // Top shelf\n    translate([0, outer_height-8, 0]) shelf(outer_width, outer_depth);\n    \n    // Middle shelf\n    translate([0, (outer_height-8)/2, 0]) shelf(outer_width, outer_depth);\n    \n    // Left side panel\n    translate([0, 0, 0]) vertical_divider(outer_height, outer_depth);\n    \n    // Right side panel\n    translate([outer_width-wall_thickness, 0, 0]) vertical_divider(outer_height, outer_depth);\n    \n    // Central divider\n    translate([outer_width/2-wall_thickness/2, 0, 0]) vertical_divider(outer_height, outer_depth);\n    \n    // Screws for assembly (realistic detail)\n    for (i = [1:3]) {\n        y_pos = i * (outer_height-8)/3 - 4;\n        screw(2, y_pos);\n        screw(outer_width-4, y_pos);\n        screw(outer_width/2-1, y_pos);\n    }\n    \n    // Bottom screws\n    for (x = [5:15:75]) {\n        screw(x, 4);\n    }\n    \n    // Top screws\n    for (x = [5:15:75]) {\n        screw(x, outer_height-4);\n    }\n}\n\n// Render the complete bookcase\nbookcase_unit();",
    "renders": true
  },
  {
    "natural_object": "insulation",
    "openscad_code": "// Insulation Brick Furniture Module\n// A stackable insulation brick for modular furniture construction\n\nmodule insulation_brick(width=40, height=30, depth=60) {\n    wall = 2;  // Wall thickness for 3D printing\n    \n    // Main foam block with rounded edges\n    difference() {\n        // Outer rounded block\n        minkowski() {\n            cube([width-2*wall, height-2*wall, depth-2*wall], center=true);\n            sphere(wall);\n        }\n        \n        // Hollow center\n        cube([width-4*wall, height-4*wall, depth-4*wall], center=true);\n    }\n    \n    // Structural ridges on top for stacking\n    for(i = [-1, 1]) {\n        translate([i*width/4, 0, depth/2]) {\n            cube([width/6, height-wall, wall], center=true);\n        }\n    }\n    \n    // Matching grooves on bottom\n    for(i = [-1, 1]) {\n        translate([i*width/4, 0, -depth/2]) {\n            cube([width/6 + 0.5, height-wall + 0.5, wall], center=true);\n        }\n    }\n    \n    // Side ventilation holes\n    for(x = [-width/3, 0, width/3]) {\n        for(y = [-height/3, 0, height/3]) {\n            translate([x, y, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=wall*2, r=wall, center=true, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Corner reinforcements\n    module corner_reinforcement() {\n        difference() {\n            cylinder(h=wall*3, r=wall*1.5, center=false, $fn=6);\n            cylinder(h=wall*3, r=wall*0.5, center=false, $fn=6);\n        }\n    }\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(width/2 - wall*2), y*(height/2 - wall*2), depth/2 - wall*1.5]) {\n                corner_reinforcement();\n            }\n            translate([x*(width/2 - wall*2), y*(height/2 - wall*2), -depth/2 + wall*1.5]) {\n                rotate([180, 0, 0]) corner_reinforcement();\n            }\n        }\n    }\n    \n    // Surface texture pattern\n    module surface_texture() {\n        for(i = [-2:2]) {\n            for(j = [-1:1]) {\n                translate([i*width/8, j*height/6, depth/2 + 0.1]) {\n                    cube([0.5, 0.5, 0.2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Apply texture to both large faces\n    surface_texture();\n    mirror([0, 0, 1]) surface_texture();\n}\n\n// Create a stack of 3 bricks to demonstrate modularity\ntranslate([0, 0, 0]) insulation_brick();\ntranslate([0, 0, 60]) insulation_brick();\ntranslate([0, 0, 120]) insulation_brick();",
    "renders": true
  },
  {
    "natural_object": "vaporbarrier",
    "openscad_code": "// Vapor-barrier under-bed storage drawer with furniture-style frame\n// Overall footprint 120 mm wide × 80 mm deep × 70 mm high\n\n// Wall thickness\nwall = 2;\n\n// Outer frame (furniture look)\nmodule frame() {\n    difference() {\n        // Main outer box\n        cube([120, 80, 70]);\n\n        // Hollow inside (leave 2 mm walls)\n        translate([wall, wall, wall])\n            cube([120 - 2*wall, 80 - 2*wall, 70 - wall]);\n    }\n\n    // Front lip for drawer stop\n    translate([0, 0, 30])\n        cube([120, wall, 5]);\n}\n\n// Drawer body (vapor-barrier style ribbed plastic)\nmodule drawer() {\n    difference() {\n        // Drawer shell\n        translate([wall + 2, wall + 2, 5])\n            cube([116 - 2*wall, 76 - 2*wall, 60]);\n\n        // Hollow cavity\n        translate([wall + 4, wall + 4, 7])\n            cube([112 - 2*wall, 72 - 2*wall, 58]);\n    }\n\n    // Horizontal ribs on front for grip\n    for (i = [0:3]) {\n        translate([wall + 4 + i*25, wall + 2, 2])\n            cube([3, 76 - 2*wall, 3]);\n    }\n\n    // Vertical ribs on sides for stiffness\n    for (i = [0:4]) {\n        translate([wall + 2, wall + 4 + i*15, 7])\n            cube([3, 3, 50]);\n        translate([120 - wall - 5, wall + 4 + i*15, 7])\n            cube([3, 3, 50]);\n    }\n}\n\n// Drawer handle (furniture-style routed grip)\nmodule handle() {\n    difference() {\n        // Raised block\n        translate([50, wall + 2, 2])\n            cube([20, 76 - 2*wall, 10]);\n\n        // Finger recess\n        translate([52, wall + 4, 4])\n            cube([16, 72 - 2*wall, 8]);\n    }\n}\n\n// Furniture legs (small turned-style feet)\nmodule legs() {\n    for (x = [10, 110]) {\n        for (y = [10, 70]) {\n            translate([x, y, -5])\n                cylinder(h = 5, d1 = 8, d2 = 6, $fn = 16);\n        }\n    }\n}\n\n// Assembly\nframe();\ndrawer();\nhandle();\nlegs();",
    "renders": true
  },
  {
    "natural_object": "sheathing",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity wooden sheathing furniture piece\n// A small side table with a drawer and sheathing panel sides\n\nwall_th = 2;      // 2 mm shell thickness for 3D printing\nscale_factor = 3; // Scale to ~120 mm height\n\n// Overall dimensions (mm)\ntable_h = 120 * scale_factor;\ntable_w = 80  * scale_factor;\ntable_d = 60  * scale_factor;\n\n// Leg dimensions\nleg_h = table_h - wall_th;\nleg_w = 6;\nleg_d = 6;\n\n// Drawer dimensions\ndrawer_h = 30 * scale_factor;\ndrawer_w = table_w - 3*wall_th;\ndrawer_d = table_d - 2*wall_th;\n\n// Sheathing panel dimensions\npanel_h = table_h * 0.8;\npanel_w = wall_th;\npanel_d = table_d;\n\nmodule leg() {\n    difference() {\n        cube([leg_w, leg_d, leg_h], center=false);\n        // Chamfer bottom edges for printability\n        translate([wall_th, wall_th, -1])\n            cube([leg_w-2*wall_th, leg_d-2*wall_th, wall_th+1]);\n    }\n}\n\nmodule tabletop() {\n    difference() {\n        cube([table_w, table_d, wall_th], center=false);\n        // Rounded top edges\n        translate([wall_th, wall_th, 0])\n            cube([table_w-2*wall_th, table_d-2*wall_th, wall_th]);\n    }\n}\n\nmodule drawer_box() {\n    difference() {\n        // Main drawer body\n        translate([wall_th, wall_th, wall_th])\n            cube([drawer_w, drawer_d, drawer_h]);\n        // Inner cavity\n        translate([2*wall_th, 2*wall_th, 2*wall_th])\n            cube([drawer_w-2*wall_th, drawer_d-2*wall_th, drawer_h-3*wall_th]);\n    }\n}\n\nmodule drawer_front() {\n    difference() {\n        // Front panel\n        cube([drawer_w+1, wall_th, drawer_h+1]);\n        // Recessed handle\n        translate([drawer_w/2-5, -0.5, drawer_h/2-3])\n            cube([10, wall_th+1, 6]);\n    }\n}\n\nmodule sheathing_panel() {\n    difference() {\n        // Main panel\n        cube([panel_w, panel_d, panel_h]);\n        // Decorative cutouts\n        for (y = [10:20:panel_d-10]) {\n            translate([wall_th, y, 10])\n                cylinder(h=panel_w, r=3, $fn=16);\n            translate([wall_th, y, panel_h-10])\n                cylinder(h=panel_w, r=3, $fn=16);\n        }\n    }\n}\n\n// Assemble the table\nunion() {\n    // Tabletop\n    translate([0, 0, leg_h])\n        tabletop();\n    \n    // Four legs\n    translate([wall_th, wall_th, 0])\n        leg();\n    translate([table_w-leg_w-wall_th, wall_th, 0])\n        leg();\n    translate([wall_th, table_d-leg_d-wall_th, 0])\n        leg();\n    translate([table_w-leg_w-wall_th, table_d-leg_d-wall_th, 0])\n        leg();\n    \n    // Drawer cavity support\n    translate([wall_th, wall_th, leg_h-drawer_h-2*wall_th]) {\n        difference() {\n            cube([table_w-2*wall_th, table_d-2*wall_th, drawer_h+2*wall_th]);\n            // Drawer opening\n            translate([wall_th, wall_th, wall_th])\n                cube([drawer_w, drawer_d, drawer_h]);\n        }\n    }\n    \n    // Drawer\n    translate([wall_th, wall_th, leg_h-drawer_h-wall_th]) {\n        drawer_box();\n        translate([0, drawer_d, 0])\n            drawer_front();\n    }\n    \n    // Sheathing panels on sides\n    translate([-wall_th, 0, 0])\n        sheathing_panel();\n    translate([table_w, 0, 0])\n        mirror([1,0,0])\n            sheathing_panel();\n}",
    "renders": true
  },
  {
    "natural_object": "subfloor",
    "openscad_code": "// Subfloor Furniture Item - Realistic Style with Medium Complexity\n// A raised subfloor panel with joists and support structure\n\n// Overall dimensions\npanel_width = 80;\npanel_length = 120;\npanel_thickness = 12;\njoist_height = 25;\njoist_width = 18;\nleg_height = 30;\nleg_diameter = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main subfloor panel with wood grain texture\nmodule subfloor_panel() {\n    difference() {\n        // Main panel body\n        cube([panel_width, panel_length, panel_thickness]);\n        \n        // Add wood grain grooves on top surface\n        for (i = [5:10:panel_length-10]) {\n            translate([wall_thickness, i, panel_thickness-1])\n                cube([panel_width-wall_thickness*2, 1, 1]);\n        }\n        \n        // Chamfer edges\n        translate([-1, -1, -1])\n            cube([panel_width+2, panel_length+2, 1]);\n        translate([-1, -1, panel_thickness])\n            cube([panel_width+2, panel_length+2, 1]);\n    }\n}\n\n// Joist support beams\nmodule joist_beam(length) {\n    difference() {\n        // Main joist\n        cube([joist_width, length, joist_height]);\n        \n        // Lightening holes\n        for (i = [joist_width*2:joist_width*2:length-joist_width*2]) {\n            translate([joist_width/2, i, joist_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=joist_width, r=joist_width/3, $fn=6);\n        }\n    }\n}\n\n// Support legs with threaded inserts\nmodule support_leg() {\n    union() {\n        // Main leg\n        cylinder(h=leg_height, r=leg_diameter/2, $fn=8);\n        \n        // Foot pad\n        translate([0, 0, leg_height])\n            cylinder(h=2, r=leg_diameter/2+1, $fn=8);\n        \n        // Threaded insert hole\n        translate([0, 0, -1])\n            cylinder(h=leg_height+2, r=leg_diameter/4, $fn=8);\n    }\n}\n\n// Corner bracket for reinforcement\nmodule corner_bracket() {\n    difference() {\n        union() {\n            // Main bracket body\n            cube([joist_width, joist_width, joist_height]);\n            \n            // Diagonal support\n            translate([0, 0, 0])\n                rotate([0, 0, 45])\n                    cube([joist_width*1.4, wall_thickness*2, joist_height]);\n        }\n        \n        // Screw holes\n        translate([joist_width/2, joist_width/2, joist_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=joist_width, r=1.5, $fn=8);\n    }\n}\n\n// Assembly\nmodule subfloor_assembly() {\n    union() {\n        // Main panel\n        translate([0, 0, joist_height+leg_height])\n            subfloor_panel();\n        \n        // Joists\n        translate([wall_thickness, wall_thickness, leg_height])\n            joist_beam(panel_length-wall_thickness*2);\n        translate([panel_width-joist_width-wall_thickness, wall_thickness, leg_height])\n            joist_beam(panel_length-wall_thickness*2);\n        translate([panel_width/2-joist_width/2, wall_thickness, leg_height])\n            joist_beam(panel_length-wall_thickness*2);\n        \n        // Support legs\n        for (x = [wall_thickness+leg_diameter, panel_width-wall_thickness-leg_diameter]) {\n            for (y = [wall_thickness+leg_diameter, panel_length-wall_thickness-leg_diameter]) {\n                translate([x, y, 0])\n                    support_leg();\n            }\n        }\n        \n        // Corner brackets\n        translate([wall_thickness, wall_thickness, leg_height])\n            corner_bracket();\n        translate([panel_width-joist_width-wall_thickness, wall_thickness, leg_height])\n            rotate([0, 0, 90])\n                corner_bracket();\n        translate([wall_thickness, panel_length-wall_thickness-joist_width, leg_height])\n            rotate([0, 0, -90])\n                corner_bracket();\n        translate([panel_width-joist_width-wall_thickness, panel_length-wall_thickness-joist_width, leg_height])\n            rotate([0, 0, 180])\n                corner_bracket();\n    }\n}\n\n// Render the assembly\nsubfloor_assembly();",
    "renders": true
  },
  {
    "natural_object": "underlayment",
    "openscad_code": "// Underlayment furniture pad - medium complexity realistic style\n// Protective mat for furniture legs with anti-slip features\n\nmodule grip_pattern() {\n    // Creates an array of small cylinders for anti-slip texture\n    for (x = [-22:5:22]) {\n        for (y = [-22:5:22]) {\n            translate([x, y, -1.5]) \n                cylinder(h=1, d=2.5, $fn=16);\n        }\n    }\n}\n\nmodule edge_bevel() {\n    // Creates beveled edge around the perimeter\n    difference() {\n        cube([50, 50, 4], center=true);\n        translate([0, 0, -0.5])\n            cube([46, 46, 5], center=true);\n    }\n}\n\nmodule furniture_pad() {\n    // Main body of the underlayment pad\n    difference() {\n        // Base pad with rounded corners\n        minkowski() {\n            cube([46, 46, 3], center=true);\n            cylinder(h=0.1, d=4, $fn=20);\n        }\n        \n        // Recessed center area for furniture leg\n        translate([0, 0, 1])\n            cylinder(h=3, d=20, $fn=32);\n    }\n    \n    // Reinforcement ring around the recess\n    translate([0, 0, 1])\n        difference() {\n            cylinder(h=1.5, d=28, $fn=32);\n            cylinder(h=1.6, d=20.5, $fn=32);\n        }\n    \n    // Four support ribs for structural integrity\n    for (angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([12, 0, 0])\n                cube([16, 2.5, 2], center=true);\n    }\n    \n    // Anti-slip pattern on bottom\n    grip_pattern();\n    \n    // Beveled edge\n    translate([0, 0, 2])\n        edge_bevel();\n}\n\n// Generate the complete underlayment pad\nfurniture_pad();",
    "renders": true
  },
  {
    "natural_object": "screed",
    "openscad_code": "// Realistic medium-complexity screed (leveling tool) furniture\n// Overall dimensions 120 x 40 x 20 mm\n\n// ---------- PARAMETERS ----------\nhandle_len = 80;\nhandle_d = 12;\nblade_len = 120;\nblade_w = 40;\nblade_t = 2;\nrib_h = 8;\nrib_t = 2;\njoint_d = 6;\nbolt_d = 3;\nbolt_head_d = 6;\nbolt_head_h = 2;\n\n// ---------- MODULES ----------\n\n// Handle grip\nmodule handle() {\n    difference() {\n        // Main grip cylinder\n        cylinder(h = handle_len, d = handle_d, $fn = 32);\n        // Grip grooves\n        for (i = [0 : 8 : handle_len-12]) {\n            translate([0, 0, i+6])\n                cylinder(h = 4, d = handle_d*1.15, $fn = 32);\n        }\n    }\n}\n\n// Blade with ribs for stiffness\nmodule blade() {\n    difference() {\n        union() {\n            // Main blade plate\n            translate([-blade_len/2, 0, 0])\n                cube([blade_len, blade_w, blade_t]);\n            // Reinforcing ribs\n            for (x = [-blade_len/2+10 : 20 : blade_len/2-10]) {\n                translate([x, blade_w/2-rib_t/2, blade_t])\n                    cube([rib_t, rib_t, rib_h]);\n            }\n        }\n        // Holes for mounting\n        translate([0, blade_w/2, blade_t/2])\n            rotate([90, 0, 0])\n                cylinder(h = blade_w+2, d = bolt_d, $fn = 16);\n    }\n}\n\n// Joint bracket connecting handle to blade\nmodule joint() {\n    difference() {\n        // Main bracket\n        translate([0, 0, 0])\n            cube([joint_d*1.8, blade_w, joint_d*1.8]);\n        // Cavity for handle\n        translate([0, blade_w/2, joint_d*0.9])\n            rotate([0, 90, 0])\n                cylinder(h = joint_d*1.8+1, d = handle_d+1, $fn = 32);\n        // Mounting hole\n        translate([0, blade_w/2, joint_d*0.9])\n            rotate([0, 90, 0])\n                cylinder(h = joint_d*1.8+1, d = bolt_d, $fn = 16);\n    }\n}\n\n// Bolt and nut\nmodule bolt() {\n    union() {\n        // Bolt head\n        translate([0, 0, 0])\n            cylinder(h = bolt_head_h, d = bolt_head_d, $fn = 6);\n        // Bolt shaft\n        translate([0, 0, -blade_t-joint_d*0.9])\n            cylinder(h = blade_t+joint_d*0.9+bolt_head_h, d = bolt_d, $fn = 16);\n    }\n}\n\n// ---------- ASSEMBLY ----------\n// Blade at origin\nblade();\n\n// Handle rotated and positioned\ntranslate([0, blade_w/2+handle_d/2, joint_d*0.9])\n    rotate([90, 0, 0])\n        handle();\n\n// Joint bracket\ntranslate([0, 0, 0])\n    joint();\n\n// Mounting bolt\ntranslate([0, 0, blade_t+bolt_head_h])\n    bolt();",
    "renders": true
  },
  {
    "natural_object": "gravel",
    "openscad_code": "// Gravel Chair - Realistic Style\n// Medium complexity 3D printable gravel furniture piece\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 90;\nchair_height = 85;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule gravel_shape(base_size, height_variation, detail) {\n    // Create irregular gravel-like shape using sphere deformations\n    union() {\n        // Base ellipsoid\n        scale([1 + 0.3 * sin(detail * 5), \n               1 + 0.2 * cos(detail * 7), \n               1 + height_variation])\n            sphere(base_size);\n        \n        // Add surface bumps\n        for(i = [0:8]) {\n            rotate([rand(i*3)*30, rand(i*5)*40, rand(i*7)*50])\n                translate([rand(i*11)*base_size*0.6 - base_size*0.3,\n                          rand(i*13)*base_size*0.6 - base_size*0.3,\n                          rand(i*17)*base_size*0.4])\n                    sphere(base_size * 0.15);\n        }\n    }\n}\n\nmodule seat_surface(width, depth, thickness) {\n    // Create gravel-textured seat surface\n    difference() {\n        // Base seat\n        translate([-width/2, -depth/2, 0])\n            cube([width, depth, thickness]);\n        \n        // Create gravel texture pattern\n        for(x = [-width/2+5:10:width/2-5]) {\n            for(y = [-depth/2+5:10:depth/2-5]) {\n                translate([x, y, thickness-0.5])\n                    gravel_shape(4, 0.3, x+y);\n            }\n        }\n    }\n}\n\nmodule backrest(width, height, thickness) {\n    // Create angled backrest with gravel texture\n    translate([0, -chair_depth/2 + 10, chair_height - height]) {\n        rotate([10, 0, 0]) {\n            difference() {\n                // Main backrest panel\n                translate([-width/2, 0, 0])\n                    cube([width, thickness*2, height]);\n                \n                // Add gravel texture\n                for(x = [-width/2+5:10:width/2-5]) {\n                    for(z = [5:10:height-5]) {\n                        translate([x, thickness*2 - 0.5, z])\n                            gravel_shape(3.5, 0.2, x+z);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule leg_support(x_pos, y_pos, height) {\n    // Create tapered leg with gravel texture\n    translate([x_pos, y_pos, 0]) {\n        difference() {\n            // Tapered leg shape\n            cylinder(h1=8, h2=5, h=height, $fn=6);\n            \n            // Add irregular gravel texture\n            for(i = [0:5]) {\n                rotate([0, 0, i*60])\n                    translate([rand(i*3)*2-1, rand(i*7)*2-1, rand(i*11)*(height-10)+5])\n                        sphere(1.5);\n            }\n        }\n    }\n}\n\nmodule armrest_gravel(x_pos, side) {\n    // Create natural-looking armrest from stacked gravel\n    translate([x_pos, 0, chair_height*0.6]) {\n        // Main support\n        rotate([0, 0, side * 5])\n            gravel_shape(15, 0.4, x_pos);\n        \n        // Additional gravel pieces\n        translate([0, side*20, 5])\n            gravel_shape(12, 0.3, x_pos+10);\n        translate([side*5, side*25, 10])\n            gravel_shape(8, 0.2, x_pos+20);\n    }\n}\n\n// Main chair assembly\nunion() {\n    // Seat\n    seat_surface(chair_width*0.8, chair_depth*0.7, wall_thickness*2);\n    \n    // Backrest\n    backrest(chair_width*0.75, chair_height*0.6, wall_thickness*2);\n    \n    // Legs\n    leg_support(-chair_width/2 + 10, -chair_depth/2 + 15, chair_height*0.4);\n    leg_support(chair_width/2 - 10, -chair_depth/2 + 15, chair_height*0.4);\n    leg_support(-chair_width/2 + 10, chair_depth/2 - 25, chair_height*0.4);\n    leg_support(chair_width/2 - 10, chair_depth/2 - 25, chair_height*0.4);\n    \n    // Armrests\n    armrest_gravel(chair_width/2 - 5, 1);\n    armrest_gravel(-chair_width/2 + 5, -1);\n    \n    // Structural reinforcement pieces\n    translate([0, 0, chair_height*0.4 - wall_thickness]) {\n        // Cross support between legs\n        cube([chair_width - 20, wall_thickness*2, wall_thickness], center=true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "sand",
    "openscad_code": "// Realistic Sand Chair - Medium Complexity\n// Overall dimensions: 80mm width x 75mm depth x 90mm height\n\n$fn = 32;\n\n// Main seat platform with natural sand dune shape\nmodule sand_seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, 40])\n        scale([1, 1.2, 0.6])\n        sphere(r = 30);\n        \n        // Hollow cavity for material saving\n        translate([0, 0, 42])\n        scale([0.8, 1, 0.5])\n        sphere(r = 26);\n    }\n}\n\n// Backrest with wind-sculpted curves\nmodule sand_backrest() {\n    union() {\n        // Main backrest panel\n        translate([0, -25, 65])\n        rotate([10, 0, 0])\n        scale([1.1, 0.5, 1.2])\n        sphere(r = 25);\n        \n        // Support ridges\n        for(i = [-20:10:20]) {\n            translate([i, -30, 55])\n            rotate([15, 0, 0])\n            scale([0.1, 0.3, 1])\n            cylinder(h = 25, r1 = 5, r2 = 3);\n        }\n    }\n}\n\n// Front legs with natural erosion pattern\nmodule front_leg(x_pos) {\n    translate([x_pos, 18, 20]) {\n        // Main leg\n        scale([1, 0.8, 1.5])\n        sphere(r = 10);\n        \n        // Erosion details\n        for(i = [0:30:120]) {\n            rotate([0, 0, i])\n            translate([3, 0, 5])\n            cylinder(h = 15, r = 2);\n        }\n    }\n}\n\n// Rear legs with integrated support\nmodule rear_leg(x_pos) {\n    translate([x_pos, -18, 20]) {\n        difference() {\n            // Main leg\n            scale([0.9, 1, 1.6])\n            sphere(r = 12);\n            \n            // Hollow center\n            scale([0.7, 0.8, 1.3])\n            sphere(r = 9);\n        }\n    }\n}\n\n// Sand texture pattern for surfaces\nmodule sand_texture(height) {\n    for(x = [-25:5:25]) {\n        for(y = [-20:5:20]) {\n            translate([x, y, height + 1])\n            sphere(r = 0.5 + (x + y) % 3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    sand_seat();\n    \n    // Backrest\n    sand_backrest();\n    \n    // Legs\n    front_leg(20);\n    front_leg(-20);\n    rear_leg(18);\n    rear_leg(-18);\n    \n    // Surface texture\n    sand_texture(40);\n}",
    "renders": true
  },
  {
    "natural_object": "aggregate",
    "openscad_code": "// Aggregate bookshelf (stacked stone / brick look)\n// Dimensions: 100mm W × 45mm D × 120mm H\n// Wall thickness: 2mm throughout\n\n// Basic parameters\nwidth = 100;\ndepth = 45;\nheight = 120;\nwall = 2;\n\n// Stone block dimensions\nblock_w = 12;\nblock_d = depth * 0.9;\nblock_h = 6;\ngap = 1.5;\n\n// Calculate how many blocks fit\nblocks_x = floor(width / (block_w + gap));\nblocks_z = floor(height / (block_h + gap));\n\n// Main structure – hollow box\nmodule carcass() {\n    difference() {\n        cube([width, depth, height]);\n        translate([wall, wall, wall])\n            cube([width - 2*wall, depth - wall, height - wall]);\n    }\n}\n\n// Single stone block with rounded edges (printable)\nmodule stone_block(x, y, z) {\n    translate([x, y, z]) {\n        difference() {\n            // Full block\n            cube([block_w, block_d, block_h]);\n            \n            // Rounded top edges\n            translate([block_w/2, block_d/2, block_h - 1])\n                cylinder(h = 2, r1 = block_w/2, r2 = block_w/2, $fn = 16);\n            \n            // Chamfer bottom edges\n            translate([block_w/2, block_d/2, 1])\n                cylinder(h = 2, r1 = block_w/2 - 1, r2 = block_w/2, $fn = 16);\n        }\n        \n        // Add texture lines\n        for (i = [0:3]) {\n            translate([i * (block_w/4), 0, block_h/2])\n                cube([0.5, block_d, block_h - 1]);\n        }\n    }\n}\n\n// Shelf supports\nmodule shelf_support(y_pos) {\n    translate([wall, y_pos, wall]) {\n        cube([width - 2*wall, wall, height - 2*wall]);\n    }\n}\n\n// Create stone aggregate pattern\nmodule stone_aggregate() {\n    // Bottom row\n    for (i = [0:blocks_x - 1]) {\n        for (j = [0:blocks_z - 1]) {\n            // Staggered pattern\n            offset_x = (j % 2 == 0) ? 0 : (block_w + gap)/2;\n            x = i * (block_w + gap) + offset_x;\n            z = j * (block_h + gap);\n            \n            // Only place if within bounds\n            if (x + block_w < width) {\n                stone_block(x, 0, z);\n            }\n        }\n    }\n}\n\n// Back panel with holes for ventilation\nmodule back_panel() {\n    translate([0, depth - wall, 0]) {\n        difference() {\n            cube([width, wall, height]);\n            \n            // Ventilation holes\n            for (i = [10:20:width - 10]) {\n                for (j = [10:20:height - 10]) {\n                    translate([i, -0.5, j])\n                        cylinder(h = wall + 1, r = 3, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    carcass();\n    back_panel();\n    \n    // Three shelves inside\n    shelf_support(30);\n    shelf_support(60);\n    shelf_support(90);\n    \n    // Stone aggregate exterior\n    stone_aggregate();\n}",
    "renders": true
  },
  {
    "natural_object": "rebar",
    "openscad_code": "// Rebar Stool (realistic style, medium complexity)\n// Dimensions: ~80mm height, seat diameter ~60mm\n\nmodule rebar_segment(height, angle, twists) {\n    // Creates a twisted rebar segment\n    linear_extrude(height = height, twist = angle, $fn = 8) {\n        for (i = [0:twists-1]) {\n            rotate([0, 0, i * 360/twists]) \n                translate([1.5, 0, 0]) \n                circle(d = 2.5, $fn = 6);\n        }\n    }\n}\n\nmodule ribbed_surface(height) {\n    // Adds surface ribs for realistic texture\n    for (i = [0:height/4-1]) {\n        translate([0, 0, i * 4]) \n            rotate([0, 0, 45]) \n            cylinder(h = 1, d = 5.2, $fn = 6);\n    }\n}\n\nmodule stool_leg() {\n    // Single leg made of rebar segments with joints\n    union() {\n        // Main leg shaft\n        rebar_segment(25, 30, 3);\n        \n        // Bottom foot joint\n        translate([0, 0, -1]) \n            cylinder(h = 3, d = 6, $fn = 8);\n        \n        // Top connection joint\n        translate([0, 0, 26]) \n            cylinder(h = 5, d = 7, $fn = 8);\n        \n        // Surface texture\n        ribbed_surface(25);\n    }\n}\n\nmodule seat_frame() {\n    // Circular seat frame made of bent rebar\n    difference() {\n        // Outer ring\n        rotate_extrude($fn = 64) {\n            translate([30, 0]) \n                circle(d = 4, $fn = 8);\n        }\n        \n        // Inner cutout for wire mesh\n        translate([0, 0, -1]) \n            cylinder(h = 6, d = 52, $fn = 64);\n    }\n    \n    // Cross bracing wires\n    for (i = [0:3]) {\n        rotate([0, 0, i * 45]) {\n            translate([-25, -1.5, 2.5]) \n                cube([50, 3, 3]);\n            translate([-1.5, -25, 2.5]) \n                cube([3, 50, 3]);\n        }\n    }\n}\n\nmodule foot_ring() {\n    // Ring connecting all legs at base\n    rotate_extrude($fn = 64) {\n        translate([45, 0]) \n            difference() {\n                circle(d = 4, $fn = 8);\n                translate([0, -2]) \n                    square([8, 2]);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat frame\n    seat_frame();\n    \n    // Four legs with realistic joints\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([22, 0, 5]) {\n                stool_leg();\n            }\n        }\n    }\n    \n    // Stabilizing foot ring\n    translate([0, 0, 20]) \n        foot_ring();\n    \n    // Central support column\n    translate([0, 0, -1]) \n        cylinder(h = 35, d = 6, $fn = 8);\n        \n    // Support spokes\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([3, 0, 17]) \n                rotate([0, 90, 0]) \n                    cylinder(h = 25, d = 2, $fn = 6);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "mesh",
    "openscad_code": "// Mesh office chair with realistic proportions and 3D-printable features\n// Overall size: ~110mm height, 65mm width, 70mm depth\n\n$fn=50;  // Smooth curves for realistic appearance\n\n// Main assembly\nmodule office_chair() {\n    union() {\n        // Seat base\n        seat();\n        \n        // Backrest\n        translate([0, -25, 45]) backrest();\n        \n        // Armrests\n        translate([-28, 0, 35]) armrest();\n        translate([28, 0, 35]) mirror([1,0,0]) armrest();\n        \n        // Gas lift cylinder\n        translate([0, 0, -15]) gas_lift();\n        \n        // 5-star base with wheels\n        base();\n    }\n}\n\n// Seat cushion with mesh pattern\nmodule seat() {\n    difference() {\n        // Main cushion body\n        translate([0, 0, 30]) {\n            minkowski() {\n                cube([50, 45, 8], center=true);\n                sphere(3);\n            }\n        }\n        \n        // Mesh holes pattern\n        for(x = [-20:10:20]) {\n            for(y = [-15:10:15]) {\n                translate([x, y, 34]) {\n                    cylinder(h=10, d=4, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Mesh backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest frame\n        hull() {\n            translate([-25, -2, 0]) cylinder(h=4, d=6);\n            translate([25, -2, 0]) cylinder(h=4, d=6);\n            translate([-25, -2, 40]) cylinder(h=4, d=6);\n            translate([25, -2, 40]) cylinder(h=4, d=6);\n        }\n        \n        // Mesh area\n        for(x = [-20:5:20]) {\n            for(z = [5:5:35]) {\n                translate([x, -3, z]) {\n                    rotate([90,0,0]) cylinder(h=2, d=3);\n                }\n            }\n        }\n        \n        // Lumbar support cutout\n        translate([0, -2, 15]) {\n            cube([30, 3, 12], center=true);\n        }\n    }\n}\n\n// Armrest with adjustment mechanism\nmodule armrest() {\n    difference() {\n        union() {\n            // Vertical support\n            translate([0, 0, 0]) {\n                cylinder(h=20, d=6);\n            }\n            \n            // Horizontal pad\n            translate([0, 8, 10]) {\n                minkowski() {\n                    cube([8, 20, 4], center=true);\n                    sphere(1.5);\n                }\n            }\n            \n            // Adjustment button\n            translate([3, 0, 12]) {\n                cylinder(h=4, d=3);\n            }\n        }\n        \n        // Screw hole\n        translate([0, 0, -1]) {\n            cylinder(h=22, d=2);\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    difference() {\n        union() {\n            // Outer cylinder\n            cylinder(h=30, d=10);\n            \n            // Top cover\n            translate([0,0,30]) {\n                cylinder(h=3, d=12);\n            }\n            \n            // Bottom cover\n            translate([0,0,0]) {\n                cylinder(h=3, d=12);\n            }\n        }\n        \n        // Inner hole for weight reduction\n        translate([0,0,-1]) {\n            cylinder(h=32, d=6);\n        }\n    }\n}\n\n// 5-star base with wheels\nmodule base() {\n    // Central hub\n    cylinder(h=8, d=20);\n    \n    // 5 spokes\n    for(i = [0:72:288]) {\n        rotate([0,0,i]) {\n            translate([12, 0, 4]) {\n                cube([24, 6, 4], center=true);\n            }\n            \n            // Wheel at end of spoke\n            translate([24, 0, -4]) {\n                rotate([90,0,0]) {\n                    difference() {\n                        cylinder(h=6, d=8);\n                        cylinder(h=7, d=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the chair\noffice_chair();",
    "renders": true
  },
  {
    "natural_object": "tie",
    "openscad_code": "// Tie-shaped furniture shelf unit – OpenSCAD\n// Overall footprint 120 × 70 × 220 mm – printable on most FDM machines\n// Wall thickness 2 mm, no overhangs >45°\n\n// --------------- PARAMETERS ---------------\n$fn = 36;                  // Smooth curves\nwall = 2;                  // Uniform wall thickness\ntieW = 70;                 // Widest point of the tie knot\ntieL = 120;                // Total length of the tie body\nbodyH = 220;               // Furniture height (tie hangs vertically)\nshelfT = 8;                // Shelf board thickness\ngap = 35;                  // Vertical gap between shelves\npinD = 4;                  // Dowel pin diameter\npinH = 8;                  // Dowel pin length\n\n// --------------- MODULES ---------------\n// Simple 2 mm shell for any 2D contour\nmodule shell_2mm(profile, h) {\n    linear_extrude(height = h, center = false)\n        offset(delta = -wall)\n            profile;\n}\n\n// Shelf board with rounded front edge\nmodule shelf(w, d) {\n    difference() {\n        // Main shelf\n        translate([0, 0, 0])\n            shell_2mm(\n                offset(delta = wall)\n                    square([w, d], center = true),\n                shelfT\n            );\n        // Front round-over (no overhang)\n        translate([0, d/2 - wall/2, shelfT - wall])\n            rotate([90, 0, 0])\n                cylinder(h = d, r = wall, center = true);\n    }\n}\n\n// Dowel pins for shelf support\nmodule pin() {\n    cylinder(h = pinH, d = pinD);\n}\n\n// --------------- MAIN TIE SHAPE ---------------\n// Knot – truncated cone\nmodule knot() {\n    difference() {\n        cylinder(h = 30, d1 = tieW - 20, d2 = tieW, center = true);\n        // Hollow core\n        translate([0, 0, -1])\n            cylinder(h = 32, d1 = tieW - 20 - 2*wall, d2 = tieW - 2*wall, center = true);\n    }\n}\n\n// Body – tapering prism with rounded back\nmodule body() {\n    hull() {\n        // Front face\n        translate([0, 0, 0])\n            cube([tieL, wall, bodyH], center = true);\n        // Back face\n        translate([0, 0, 0])\n            cube([tieL - 40, wall, bodyH - 100], center = true);\n    }\n}\n\n// --------------- SHELVES ---------------\n// Vertical positions inside the tie body\nshelf_offsets = [50, 50 + gap, 50 + 2*gap];\n\n// Generate shelves and hidden support pins\nmodule shelves() {\n    for (z = shelf_offsets) {\n        // Left shelf\n        translate([-tieL/4, 0, z])\n            shelf(tieW/2 - 10, 60);\n        // Right shelf\n        translate([tieL/4, 0, z])\n            shelf(tieW/2 - 10, 60);\n        \n        // Hidden dowels (inside body)\n        translate([-tieL/4 - 5, 0, z - pinH/2])\n            pin();\n        translate([-tieL/4 + 5, 0, z - pinH/2])\n            pin();\n        translate([tieL/4 - 5, 0, z - pinH/2])\n            pin();\n        translate([tieL/4 + 5, 0, z - pinH/2])\n            pin();\n    }\n}\n\n// --------------- ASSEMBLY ---------------\nunion() {\n    // Tie structure\n    union() {\n        // Knot at top\n        translate([0, 0, bodyH/2 + 15])\n            knot();\n        // Body\n        translate([0, 0, bodyH/2])\n            body();\n    }\n    \n    // Shelves\n    shelves();\n}",
    "renders": true
  },
  {
    "natural_object": "anchor",
    "openscad_code": "// Anchor Furniture - Coat Hook / Wall Hook\n// Realistic style, medium complexity\n// Overall height: 120mm, width: 80mm, depth: 25mm\n// 3D printable with 2mm wall thickness, minimal overhangs\n\nmodule anchor_hook() {\n    // Main fluke (upper part of anchor)\n    difference() {\n        union() {\n            // Central fluke body\n            translate([0, 0, 90])\n                cube([20, 8, 30], center=true);\n            \n            // Left fluke\n            translate([-12, 0, 100])\n                rotate([0, 15, -30])\n                cube([15, 6, 25], center=true);\n            \n            // Right fluke\n            translate([12, 0, 100])\n                rotate([0, 15, 30])\n                cube([15, 6, 25], center=true);\n            \n            // Fluke tips\n            translate([-20, 0, 105])\n                cylinder(h=5, r1=3, r2=1, center=true);\n            translate([20, 0, 105])\n                cylinder(h=5, r1=3, r2=1, center=true);\n        }\n        \n        // Hollow out flukes for 2mm walls\n        translate([0, 2, 90])\n            cube([16, 4, 26], center=true);\n        translate([-12, 2, 100])\n            rotate([0, 15, -30])\n            cube([11, 2, 21], center=true);\n        translate([12, 2, 100])\n            rotate([0, 15, 30])\n            cube([11, 2, 21], center=true);\n    }\n    \n    // Main shank (vertical part)\n    difference() {\n        translate([0, 0, 50])\n            cube([12, 8, 70], center=true);\n        \n        // Hollow shank\n        translate([0, 2, 50])\n            cube([8, 4, 70], center=true);\n    }\n    \n    // Crown (base with decorative ring)\n    difference() {\n        union() {\n            // Crown base\n            translate([0, 0, 15])\n                cylinder(h=8, r=25, center=true);\n            \n            // Decorative ring\n            translate([0, 0, 10])\n                cylinder(h=3, r=28, center=true);\n        }\n        \n        // Hollow crown\n        translate([0, 0, 15])\n            cylinder(h=8, r=21, center=true);\n        translate([0, 0, 10])\n            cylinder(h=3, r=24, center=true);\n    }\n    \n    // Anchor arms (horizontal parts)\n    for (i = [0, 1]) {\n        rotate([0, 0, i * 180])\n        difference() {\n            // Arm base\n            translate([0, 0, 25])\n                rotate([0, 90, 0])\n                cylinder(h=35, r=6, center=true);\n            \n            // Hollow arm\n            translate([0, 2, 25])\n                rotate([0, 90, 0])\n                cylinder(h=35, r=4, center=true);\n            \n            // Arm tip\n            translate([0, 0, 42])\n                rotate([0, 90, 0])\n                cylinder(h=10, r1=6, r2=3, center=true);\n        }\n    }\n    \n    // Wall mounting plate\n    difference() {\n        // Base plate\n        translate([0, -8, 5])\n            cube([40, 4, 20], center=true);\n        \n        // Screw holes\n        translate([-15, -8, 5])\n            cylinder(h=5, r=2, center=true);\n        translate([15, -8, 5])\n            cylinder(h=5, r=2, center=true);\n    }\n    \n    // Reinforcement ribs\n    for (i = [-1, 1]) {\n        translate([i * 8, -2, 15])\n            cube([3, 6, 20], center=true);\n    }\n}\n\n// Generate the anchor hook\nanchor_hook();",
    "renders": true
  },
  {
    "natural_object": "bolt",
    "openscad_code": "// OpenSCAD Furniture Bolt – realistic style, medium complexity\n// Overall length ≈ 110 mm, Ø 20 mm, printable without supports\n\n$fa = 2;\n$fs = 0.5;\n\nmodule bolt_rod() {\n    // Main cylindrical shaft\n    difference() {\n        cylinder(h = 90, d = 16, center = false);\n        // Central hollow for weight saving\n        translate([0,0,5])\n            cylinder(h = 80, d = 8, center = false);\n    }\n}\n\nmodule bolt_head() {\n    // Hex head with chamfer\n    difference() {\n        cylinder(h = 12, d = 20, $fn = 6);\n        // Top chamfer\n        translate([0,0,10])\n            cylinder(h = 4, d1 = 20, d2 = 16, $fn = 6);\n    }\n}\n\nmodule threads() {\n    // Helical thread profile built from stacked rings\n    thread_height = 90;\n    thread_pitch = 3;\n    turns = thread_height / thread_pitch;\n    width = 1.5;      // 2 mm effective wall after boolean\n    dia = 17.5;       // slightly larger than shaft outer Ø\n    \n    for(i = [0 : 1 : turns * 10]) {\n        translate([0, 0, i * thread_pitch / 10])\n            rotate([0, 0, i * 36])\n                difference() {\n                    cylinder(h = 1.5, d = dia + 2*width, $fn = 32);\n                    cylinder(h = 1.51, d = dia, $fn = 32);\n                }\n    }\n}\n\nmodule drive_insert() {\n    // Phillips-style recess for tool\n    translate([0, 0, 12])\n        rotate([0, 180, 0])\n            difference() {\n                cylinder(h = 5, d = 10, $fn = 6);\n                // Cross recess\n                translate([0, 0, -0.1])\n                    cube([8, 1.5, 5.2], center = true);\n                rotate([0, 0, 90])\n                    cube([8, 1.5, 5.2], center = true);\n            }\n}\n\n// Assembly\nunion() {\n    bolt_rod();\n    translate([0, 0, 90])\n        bolt_head();\n    threads();\n    drive_insert();\n}",
    "renders": true
  },
  {
    "natural_object": "screw",
    "openscad_code": "// Screw-shaped stool/bench with integrated threads\n// Overall height: 120 mm, seat diameter: 100 mm\n// 3D printable with 2 mm wall thickness, minimal overhangs\n\n// Parameters\nthread_height = 80;\nthread_diameter = 100;\ncore_diameter = 60;\nbase_thickness = 15;\nseat_thickness = 25;\nthread_pitch = 15;\n$fn = 32;\n\n// Main module\nmodule screw_stool() {\n    // Central core cylinder\n    cylinder(h=thread_height + base_thickness + seat_thickness, d=core_diameter, center=false);\n    \n    // Thread turns\n    for(i = [0:thread_pitch:thread_height]) {\n        translate([0, 0, base_thickness + i])\n            thread_turn();\n    }\n    \n    // Base plate\n    translate([0, 0, 0])\n        base_plate();\n    \n    // Seat top\n    translate([0, 0, thread_height + base_thickness])\n        seat_top();\n}\n\n// Single thread turn\nmodule thread_turn() {\n    difference() {\n        // Outer thread ring\n        cylinder(h=thread_pitch * 0.8, d=thread_diameter, center=true);\n        \n        // Hollow center\n        cylinder(h=thread_pitch * 0.8 + 0.5, d=core_diameter - 1, center=true);\n        \n        // Cut diagonal for thread shape\n        rotate([0, 0, 0])\n            translate([0, 0, -thread_pitch/2])\n                cube([thread_diameter + 2, thread_diameter + 2, thread_pitch], center=true);\n    }\n}\n\n// Base plate with rounded edges\nmodule base_plate() {\n    difference() {\n        // Main base\n        cylinder(h=base_thickness, d=thread_diameter + 10, center=false);\n        \n        // Bottom chamfer\n        translate([0, 0, -0.1])\n            cylinder(h=base_thickness * 0.6, d1=thread_diameter + 10, d2=thread_diameter + 5, center=false);\n        \n        // Central hole for weight reduction\n        cylinder(h=base_thickness + 0.2, d=core_diameter - 10, center=false);\n    }\n}\n\n// Seat top with comfort features\nmodule seat_top() {\n    difference() {\n        union() {\n            // Main seat\n            cylinder(h=seat_thickness, d=thread_diameter, center=false);\n            \n            // Top dome\n            translate([0, 0, seat_thickness])\n                scale([1, 1, 0.3])\n                    sphere(d=thread_diameter);\n        }\n        \n        // Central hole\n        cylinder(h=seat_thickness + 5, d=core_diameter - 5, center=false);\n        \n        // Finger grip recesses around edge\n        for(i = [0:45:359]) {\n            rotate([0, 0, i])\n                translate([thread_diameter/2 - 10, 0, seat_thickness - 5])\n                    cylinder(h=5, d=8, center=true);\n        }\n    }\n}\n\n// Assembly\nscrew_stool();",
    "renders": true
  },
  {
    "natural_object": "nail",
    "openscad_code": "// Nail Furniture - Realistic Medium Complexity\n// A furniture piece shaped like a giant nail, functioning as a stool/seat\n\n// Overall dimensions\nnail_height = 120;\nhead_diameter = 60;\nshaft_diameter = 30;\nbase_thickness = 5;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Nail head module with furniture details\nmodule nail_head() {\n    // Main head disc\n    difference() {\n        cylinder(h=8, d=head_diameter, $fn=64);\n        \n        // Center cavity for weight reduction\n        cylinder(h=10, d=head_diameter - 2*wall_thickness, $fn=64);\n        \n        // Decorative concentric rings on top\n        for(i=[1:3]) {\n            translate([0, 0, 8.1]) \n            difference() {\n                cylinder(h=1, d=head_diameter - i*8, $fn=64);\n                cylinder(h=2, d=head_diameter - i*8 - wall_thickness, $fn=64);\n            }\n        }\n    }\n    \n    // Reinforcement ribs underneath head\n    for(angle=[0:45:315]) {\n        rotate([0, 0, angle])\n        translate([0, head_diameter/2 - 5, -2])\n        cube([wall_thickness*1.5, 8, 8]);\n    }\n}\n\n// Thread pattern on shaft\nmodule thread_profile() {\n    // Single thread ridge\n    linear_extrude(height=2, twist=30)\n    difference() {\n        circle(d=shaft_diameter + 2, $fn=64);\n        circle(d=shaft_diameter, $fn=64);\n    }\n}\n\n// Shaft module with furniture base\nmodule nail_shaft() {\n    // Main shaft tube\n    difference() {\n        cylinder(h=nail_height - 8, d=shaft_diameter, $fn=64);\n        cylinder(h=nail_height - 6, d=shaft_diameter - 2*wall_thickness, $fn=64);\n    }\n    \n    // Thread details on shaft\n    for(z=[0:4:nail_height-16]) {\n        translate([0, 0, z + 8])\n        thread_profile();\n    }\n    \n    // Furniture base plate for stability\n    translate([0, 0, -base_thickness])\n    difference() {\n        cylinder(h=base_thickness, d=shaft_diameter + 15, $fn=64);\n        cylinder(h=base_thickness + 1, d=shaft_diameter, $fn=64);\n    }\n    \n    // Base reinforcement ribs\n    for(angle=[0:60:300]) {\n        rotate([0, 0, angle])\n        translate([0, (shaft_diameter + 15)/2 - 3, -base_thickness])\n        cube([wall_thickness, 6, base_thickness]);\n    }\n}\n\n// Assembly\nunion() {\n    // Nail head (seat)\n    nail_head();\n    \n    // Shaft (support)\n    translate([0, 0, 8])\n    nail_shaft();\n}",
    "renders": true
  },
  {
    "natural_object": "hinge",
    "openscad_code": "// Furniture Cabinet Hinge - Medium Complexity\n// Dimensions: 100mm x 60mm x 35mm\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Main hinge body\nmodule hinge_body() {\n    // Cabinet side plate\n    translate([0, 0, 0])\n        difference() {\n            // Main plate\n            cube([40, 50, wall_thickness], center=true);\n            \n            // Screw holes (3 holes)\n            for(i = [-1, 0, 1]) {\n                translate([0, i * 15, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=wall_thickness+1, r=2.5, center=true, $fn=16);\n            }\n        }\n}\n\n// Door side arm\nmodule door_arm() {\n    translate([25, 0, 0])\n        union() {\n            // Main arm\n            difference() {\n                translate([0, 0, 17.5 - wall_thickness/2])\n                    cube([35, 20, wall_thickness], center=true);\n                \n                // Screw holes (2 holes)\n                for(i = [-1, 1]) {\n                    translate([10, i * 7.5, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=wall_thickness+1, r=2.5, center=true, $fn=16);\n                }\n            }\n            \n            // Reinforcement ribs\n            for(i = [0, 1]) {\n                translate([12.5 + i * 10, 0, 17.5 - wall_thickness - 3])\n                    cube([5, 20, 6], center=true);\n            }\n        }\n}\n\n// Hinge pin mechanism\nmodule hinge_pin() {\n    // Pin housing\n    translate([20, 0, 17.5])\n        difference() {\n            // Cylindrical housing\n            cylinder(h=35, r=6, center=true, $fn=32);\n            \n            // Pin hole\n            cylinder(h=40, r=2.5, center=true, $fn=16);\n        }\n    \n    // Pin cap\n    translate([20, 0, 35])\n        cylinder(h=2, r=8, center=false, $fn=32);\n}\n\n// Mounting plate reinforcement\nmodule mounting_plate() {\n    translate([-20, 0, 0])\n        union() {\n            // Base plate\n            cube([10, 46, 4], center=true);\n            \n            // Side supports\n            for(y = [-15, 0, 15]) {\n                translate([0, y, -3])\n                    cube([wall_thickness, 8, 6], center=true);\n            }\n        }\n}\n\n// Decorative cover\nmodule cover_plate() {\n    translate([20, 0, 17.5])\n        difference() {\n            // Cover body\n            rotate([0, 90, 0])\n                cylinder(h=35, r=8, center=true, $fn=32);\n            \n            // Cutouts for arm movement\n            translate([0, 0, 5])\n                cube([20, 30, 10], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main components\n    hinge_body();\n    door_arm();\n    hinge_pin();\n    mounting_plate();\n    \n    // Mirror for complete hinge\n    translate([0, 0, 0])\n        mirror([0, 1, 0]) {\n            hinge_body();\n            door_arm();\n            hinge_pin();\n            mounting_plate();\n        }\n    \n    // Cover plates\n    cover_plate();\n    translate([0, 0, 0])\n        mirror([0, 1, 0])\n            cover_plate();\n}",
    "renders": true
  },
  {
    "natural_object": "latch",
    "openscad_code": "// Realistic Furniture Latch - Medium Complexity\n// Overall dimensions: 80mm x 40mm x 15mm\n\nmodule latch_base() {\n    // Main base plate with rounded corners\n    difference() {\n        // Base plate\n        translate([-37.5, -17.5, 0])\n            minkowski() {\n                cube([75, 35, 3]);\n                cylinder(r=2, h=0.1);\n            }\n        \n        // Mounting holes\n        translate([-25, -7.5, -1])\n            cylinder(r=2.5, h=5);\n        translate([-25, 7.5, -1])\n            cylinder(r=2.5, h=5);\n        translate([25, -7.5, -1])\n            cylinder(r=2.5, h=5);\n        translate([25, 7.5, -1])\n            cylinder(r=2.5, h=5);\n    }\n}\n\nmodule latch_arm() {\n    // Rotating latch arm\n    translate([0, 0, 3])\n        union() {\n            // Arm base\n            difference() {\n                cylinder(h=8, r=10);\n                cylinder(h=9, r=4);\n            }\n            \n            // Arm extension\n            translate([10, 0, 4])\n                rotate([0, 90, 0])\n                    cylinder(h=30, r=4);\n            \n            // Hook end\n            translate([35, 0, 4])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=8, r=4);\n                        translate([0, 0, -1])\n                            cube([8, 8, 10], center=true);\n                    }\n            \n            // Reinforcement ribs\n            for(i=[-1,1]) {\n                translate([0, i*5, 4])\n                    rotate([90, 0, 0])\n                        cube([30, 2, 8]);\n            }\n        }\n}\n\nmodule strike_plate() {\n    // Strike plate for receiving latch\n    translate([40, 0, -5])\n        union() {\n            // Main plate\n            difference() {\n                translate([-5, -15, 0])\n                    cube([30, 30, 5]);\n                \n                // Latch opening\n                translate([10, 0, -1])\n                    cube([15, 8, 7]);\n                \n                // Mounting holes\n                translate([0, -10, -1])\n                    cylinder(r=2.5, h=7);\n                translate([0, 10, -1])\n                    cylinder(r=2.5, h=7);\n            }\n            \n            // Raised lip for guidance\n            translate([15, 0, 5])\n                cube([20, 10, 2]);\n        }\n}\n\nmodule handle() {\n    // Handle for operating latch\n    translate([0, 0, 11])\n        union() {\n            // Base cylinder\n            cylinder(h=4, r=6);\n            \n            // Grip ridges\n            for(i=[-2:2]) {\n                translate([0, i*2, 2])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, r=0.5);\n            }\n            \n            // Top dome\n            translate([0, 0, 4])\n                sphere(r=6);\n        }\n}\n\n// Assembly\nunion() {\n    latch_base();\n    latch_arm();\n    strike_plate();\n    handle();\n}",
    "renders": true
  },
  {
    "natural_object": "lock",
    "openscad_code": "// Furniture-style Lock – OpenSCAD\n// Medium-complexity, realistic proportions, 3D-printable\n// Overall size ≈ 90 × 60 × 25 mm\n\n// Build parameters\n$fn = 36;\n\n// Wall thickness for printability\nwall = 2;\n\nmodule body() {\n    // Main lock body – wooden-furniture look\n    difference() {\n        // Solid oak-like block\n        cube([90, 60, 25], center = true);\n        \n        // Keyway slot (vertical cutout)\n        translate([0, 0, 12.5])\n            cube([8, 6, 30], center = true);\n        \n        // Screw recesses (counter-bored)\n        for (x = [-40, 40], y = [-25, 25]) {\n            translate([x, y, 12.5])\n                cylinder(h = 20, r = 4, center = true);\n            translate([x, y, 12.5])\n                cylinder(h = 20, r = 2, center = true);\n        }\n    }\n}\n\nmodule escutcheon() {\n    // Brass face plate with bevel\n    difference() {\n        // Main plate\n        translate([0, 0, 12.5])\n            cube([28, 28, 2.5], center = true);\n        // Keyhole shape\n        translate([0, 0, 13.75])\n            union() {\n                cylinder(h = 3, r = 4.5, center = true);\n                translate([-4.5, 0, 0])\n                    cube([9, 9, 3], center = true);\n            }\n    }\n}\n\nmodule bolt() {\n    // Sliding dead-bolt\n    translate([45, 0, 12.5]) {\n        rotate([0, 90, 0]) {\n            // Bolt rod\n            difference() {\n                cylinder(h = 35, r = 8, center = true);\n                translate([0, 0, 17.5])\n                    cube([wall*2, 16, 35], center = true);\n            }\n            // Bolt face (rounded)\n            translate([17.5, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 16, r = 8, center = true);\n        }\n    }\n}\n\nmodule side_plate() {\n    // Side strike plate\n    translate([0, 30, 12.5])\n        cube([30, 2, 16], center = true);\n}\n\nmodule frame_housing() {\n    // Wooden frame around lock (furniture joint style)\n    difference() {\n        // Outer frame\n        cube([100, 70, 30], center = true);\n        // Hollow inside\n        cube([94, 64, 30], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    frame_housing();\n    translate([0, 0, 2.5]) body();\n    translate([0, 0, 15]) escutcheon();\n    bolt();\n    side_plate();\n}",
    "renders": true
  },
  {
    "natural_object": "handle",
    "openscad_code": "// Furniture drawer pull handle – realistic style, medium complexity\n// Overall length ~120 mm, depth ~30 mm, height ~35 mm\n// Designed for 3 mm screws, 96 mm center-to-center mounting\n\n$fn = 36;               // Smooth curves\nwall = 2;               // 3D-print-friendly wall thickness\nscrew_d = 3.5;          // Clearance for M3 screw\nscrew_hole_depth = 8;   // Deep enough for screw head\n\n// Main ergonomic grip bar\nmodule grip_bar() {\n    difference() {\n        // Soft-rounded bar with subtle taper\n        hull() {\n            translate([0, 0, 12])  cylinder(h=18, r1=11, r2=9);\n            translate([0, 0, -12]) cylinder(h=18, r1=9,  r2=11);\n        }\n        // Internal cavity to save material and reduce print time\n        translate([0, 0, 0])\n            scale([0.85, 0.85, 0.9])\n                cylinder(h=50, r=9);\n    }\n}\n\n// Decorative end-cap with gentle bevel\nmodule end_cap() {\n    difference() {\n        union() {\n            cylinder(h=6, r=12);\n            translate([0, 0, 2])\n                cylinder(h=4, r1=12, r2=10);\n        }\n        // Recessed transition to grip bar\n        translate([0, 0, -1])\n            cylinder(h=8, r=9);\n    }\n}\n\n// Mounting base / rosette with screw clearance\nmodule rosette() {\n    difference() {\n        union() {\n            // Main base disk\n            cylinder(h=wall+1, r=15);\n            // Raised lip for stiffness\n            translate([0, 0, wall+1])\n                cylinder(h=3, r1=15, r2=13);\n        }\n        // Screw hole\n        translate([0, 0, -1])\n            cylinder(h=screw_hole_depth+2, d=screw_d);\n    }\n}\n\n// Assemble left half (mirrored for right)\nmodule handle_half() {\n    union() {\n        rosette();\n        translate([0, 0, wall+1+3]) end_cap();\n        translate([0, 0, wall+1+3+6]) grip_bar();\n    }\n}\n\n// Full handle assembly\nmodule handle() {\n    // Center-to-center spacing 96 mm\n    spacing = 96;\n    union() {\n        // Left side\n        handle_half();\n        // Right side mirrored\n        translate([spacing, 0, 0])\n            mirror([1, 0, 0]) handle_half();\n    }\n}\n\n// Render\nhandle();",
    "renders": true
  },
  {
    "natural_object": "knob",
    "openscad_code": "// Realistic style furniture knob - medium complexity\n// Overall height: 40mm, base diameter: 28mm\n// Features: fluted grip, stepped collar, threaded insert cavity\n\n$fn = 64;\nknob_height = 40;\nbase_dia = 28;\ngrip_dia = 22;\ncollar_dia = 32;\nthread_dia = 6;\nthread_depth = 12;\nwall_thickness = 2;\n\nmodule knob_base() {\n    // Main cylindrical base\n    cylinder(h = 8, d = base_dia, center = false);\n    \n    // Decorative stepped collar\n    translate([0, 0, 8])\n    cylinder(h = 4, d = collar_dia, center = false);\n}\n\nmodule fluted_grip() {\n    // Central grip cylinder\n    difference() {\n        cylinder(h = 28, d = grip_dia, center = false);\n        \n        // Create fluted grooves\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([grip_dia/2 - 1.5, -1.5, 0])\n            cube([3, 3, 28]);\n        }\n    }\n    \n    // Top dome\n    translate([0, 0, 28])\n    scale([1, 1, 0.6])\n    sphere(d = grip_dia);\n}\n\nmodule threaded_insert() {\n    // Cavity for M6 threaded insert\n    translate([0, 0, -0.1])\n    cylinder(h = thread_depth + 0.2, d = thread_dia + 0.4, center = false);\n    \n    // Counterbore for insert head\n    translate([0, 0, thread_depth - 2])\n    cylinder(h = 2.2, d = 10.5, center = false);\n}\n\nmodule mounting_screw_access() {\n    // Cone relief for screw head\n    translate([0, 0, thread_depth + 1])\n    cylinder(h1 = 10, h2 = 0, d1 = 14, d2 = thread_dia, center = false);\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    knob_base();\n    \n    // Grip section\n    translate([0, 0, 12])\n    fluted_grip();\n}\n\n// Internal features (removed material)\ndifference() {\n    // Keep previous union\n    children();\n    \n    // Threaded insert cavity\n    threaded_insert();\n    \n    // Screw access\n    mounting_screw_access();\n}\n\n// Add subtle edge fillets\ntranslate([0, 0, 8])\ndifference() {\n    cylinder(h = 0.5, d = collar_dia + 1, center = false);\n    cylinder(h = 1, d = collar_dia - 1, center = false);\n}",
    "renders": true
  },
  {
    "natural_object": "car",
    "openscad_code": "// Car-shaped bookshelf / toy car\n// Overall dimensions: ~120mm x 60mm x 50mm\n// Wall thickness: 2mm for 3D-printability\n// Medium complexity with furniture details (shelves, joints, realistic proportions)\n\n// Main body module\nmodule car_body() {\n    difference() {\n        // Outer shell (hollow box with rounded edges)\n        hull() {\n            translate([-60, -30, 5]) cube([120, 60, 40]);\n            translate([-55, -25, 0]) cube([110, 50, 50]);\n        }\n        \n        // Hollow interior for shelves\n        translate([-58, -28, 7]) cube([116, 56, 36]);\n    }\n}\n\n// Wheel module with realistic tire tread pattern\nmodule wheel(radius, width) {\n    difference() {\n        union() {\n            // Tire\n            cylinder(h=width, r=radius, $fn=30);\n            \n            // Tread pattern using small cylinders\n            for(i=[0:15]) {\n                rotate([0, 0, i*22.5]) \n                    translate([radius-1, 0, width/2]) \n                    cylinder(h=2, r=1.5, $fn=6);\n            }\n        }\n        \n        // Center hole for axle\n        cylinder(h=width+2, r=radius/3, center=true);\n    }\n}\n\n// Detailed car front with realistic features\nmodule car_front() {\n    union() {\n        // Hood\n        translate([-60, -30, 45]) cube([35, 60, 3]);\n        \n        // Windshield slope\n        translate([-25, -25, 45]) rotate([60, 0, 0]) \n            cube([50, 50, 2]);\n        \n        // Side mirrors\n        translate([-20, -35, 47]) cube([5, 5, 3]);\n        translate([-20, 30, 47]) cube([5, 5, 3]);\n        \n        // Headlights\n        translate([-59, -20, 42]) sphere(r=3);\n        translate([-59, 20, 42]) sphere(r=3);\n    }\n}\n\n// Rear trunk area\nmodule car_rear() {\n    union() {\n        // Trunk\n        translate([25, -25, 45]) cube([35, 50, 3]);\n        \n        // Rear lights\n        translate([59, -20, 42]) cube([3, 6, 2]);\n        translate([59, 14, 42]) cube([3, 6, 2]);\n    }\n}\n\n// Shelving system inside car\nmodule shelves() {\n    // Bottom shelf\n    translate([-55, -25, 10]) cube([110, 50, 2]);\n    \n    // Middle shelf\n    translate([-55, -25, 25]) cube([110, 50, 2]);\n    \n    // Shelf supports (structural elements)\n    for(pos=[-45, -15, 15, 45]) {\n        translate([pos, -25, 11]) cube([2, 50, 14]);\n        translate([pos, -25, 26]) cube([2, 50, 14]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main car body\n    car_body();\n    \n    // Front and rear details\n    car_front();\n    car_rear();\n    \n    // Wheels (4 wheels with axles)\n    translate([-35, -38, 5]) wheel(radius=10, width=8);\n    translate([-35, 38, 5]) wheel(radius=10, width=8);\n    translate([35, -38, 5]) wheel(radius=10, width=8);\n    translate([35, 38, 5]) wheel(radius=10, width=8);\n    \n    // Wheel axles (structural connection)\n    translate([-35, 0, 5]) rotate([90, 0, 0]) \n        cylinder(h=76, r=3, center=true);\n    translate([35, 0, 5]) rotate([90, 0, 0]) \n        cylinder(h=76, r=3, center=true);\n    \n    // Furniture shelving inside\n    shelves();\n    \n    // Roof reinforcement bars (furniture structural element)\n    for(x=[-40, -10, 20, 40]) {\n        translate([x, -30, 48]) cube([2, 60, 2]);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "truck",
    "openscad_code": "// Truck Furniture - Medium Complexity Realistic Style\n// A toy truck designed as a furniture piece with 2mm walls for 3D printing\n\n// Overall dimensions: 120mm length, 50mm width, 45mm height\n\n$fn = 32;  // Smooth curves\n\nmodule truck_body() {\n    // Main cargo bed - 2mm thick walls\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 10]) cube([80, 48, 25], center = true);\n            translate([0, 0, 25]) cube([70, 44, 8], center = true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 12]) cube([76, 44, 21], center = true);\n    }\n    \n    // Bed floor details - wood plank texture\n    for (i = [-2:2]) {\n        translate([i * 15, 0, 22.5])\n            cube([12, 46, 1], center = true);\n    }\n}\n\nmodule truck_cab() {\n    // Driver compartment\n    difference() {\n        // Main cab shape\n        hull() {\n            translate([-45, 0, 15]) cube([30, 40, 25], center = true);\n            translate([-55, 0, 25]) cube([25, 35, 20], center = true);\n        }\n        \n        // Windshield opening\n        translate([-55, 0, 28]) cube([20, 28, 15], center = true);\n    }\n    \n    // Roof details\n    translate([-50, 0, 37]) cube([28, 36, 2], center = true);\n    \n    // Side mirrors\n    translate([-55, 22, 25]) cylinder(h = 8, r = 3);\n    translate([-55, -22, 25]) cylinder(h = 8, r = 3);\n}\n\nmodule chassis() {\n    // Frame rails - structural support\n    translate([0, 0, 5]) cube([100, 40, 8], center = true);\n    \n    // Cross members\n    for (x = [-35, -10, 15, 40]) {\n        translate([x, 0, 5]) cube([2, 44, 8], center = true);\n    }\n}\n\nmodule wheels() {\n    // Wheel module for reusability\n    module wheel() {\n        difference() {\n            // Tire\n            cylinder(h = 8, r = 12, center = true);\n            \n            // Hub opening\n            cylinder(h = 9, r = 8, center = true);\n            \n            // Mounting hole for axle\n            cylinder(h = 10, r = 2, center = true);\n        }\n        \n        // Rim detail\n        translate([0, 0, 4]) cylinder(h = 2, r = 10);\n    }\n    \n    // Front wheels\n    translate([-35, 25, 8]) rotate([90, 0, 0]) wheel();\n    translate([-35, -25, 8]) rotate([90, 0, 0]) wheel();\n    \n    // Rear wheels\n    translate([25, 25, 8]) rotate([90, 0, 0]) wheel();\n    translate([25, -25, 8]) rotate([90, 0, 0]) wheel();\n}\n\nmodule bumper() {\n    // Front bumper\n    translate([-65, 0, 12]) cube([5, 45, 6], center = true);\n    \n    // Rear bumper\n    translate([45, 0, 12]) cube([5, 45, 6], center = true);\n}\n\nmodule lights() {\n    // Headlights\n    translate([-60, 18, 22]) sphere(r = 4);\n    translate([-60, -18, 22]) sphere(r = 4);\n    \n    // Taillights\n    translate([40, 18, 22]) sphere(r = 3);\n    translate([40, -18, 22]) sphere(r = 3);\n}\n\n// Assembly\nunion() {\n    chassis();\n    truck_body();\n    truck_cab();\n    wheels();\n    bumper();\n    lights();\n}",
    "renders": true
  },
  {
    "natural_object": "airplane",
    "openscad_code": "// Airplane Bookshelf - a small wall-mounted shelf shaped like a classic propeller plane\n// Designed for 3D printing with minimal supports and 2mm wall thickness\n\nwall_thickness = 2;\nscale_factor = 0.8;  // Overall size scaling\n\n// Main dimensions (mm)\nfuselage_length = 120 * scale_factor;\nfuselage_width = 18 * scale_factor;\nfuselage_height = 25 * scale_factor;\n\nwing_span = 80 * scale_factor;\nwing_chord = 25 * scale_factor;\nwing_thickness = 4 * scale_factor;\n\ntail_height = 30 * scale_factor;\ntail_span = 35 * scale_factor;\n\nprop_diameter = 20 * scale_factor;\n\nmodule main_assembly() {\n    // Fuselage (main body) - hollow for shelf space\n    difference() {\n        // Outer shell\n        hull() {\n            cube([fuselage_length, fuselage_width, fuselage_height], center=true);\n            translate([fuselage_length/2 - 10, 0, 0])\n                sphere(d=fuselage_width);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n            cube([fuselage_length - 2*wall_thickness, fuselage_width - 2*wall_thickness, fuselage_height + 2*wall_thickness], center=true);\n    }\n    \n    // Wings - structural support and shelf surfaces\n    translate([fuselage_length/4, 0, -fuselage_height/2 + wing_thickness/2]) {\n        // Main wings\n        difference() {\n            cube([wing_chord, wing_span, wing_thickness], center=true);\n            // Cut holes for weight reduction\n            for(i = [-1:1]) {\n                translate([0, i * 20, 0])\n                    cylinder(h=wing_thickness+1, d=8, center=true);\n            }\n        }\n    }\n    \n    // Horizontal stabilizer\n    translate([-fuselage_length/2 + 5, 0, fuselage_height/2])\n        cube([15 * scale_factor, tail_span, 3 * scale_factor], center=true);\n    \n    // Vertical stabilizer (tail fin)\n    translate([-fuselage_length/2 + 5, 0, fuselage_height/2 + 10 * scale_factor])\n        rotate([90, 0, 0])\n            cube([3 * scale_factor, tail_height, 15 * scale_factor], center=true);\n    \n    // Propeller hub\n    translate([fuselage_length/2 + 5, 0, 0])\n        cylinder(h=5 * scale_factor, d=prop_diameter/2, center=true);\n    \n    // Propeller blades\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([fuselage_length/2 + 8, 0, 0])\n                rotate([0, 90, 0])\n                    cube([prop_diameter/2, 2 * scale_factor, 8 * scale_factor], center=true);\n    }\n    \n    // Landing gear struts (decorative bookshelf supports)\n    translate([fuselage_length/4, fuselage_width/2 + 2, -fuselage_height/2 - 5])\n        cylinder(h=10 * scale_factor, d=3 * scale_factor);\n    \n    translate([fuselage_length/4, -fuselage_width/2 - 2, -fuselage_height/2 - 5])\n        cylinder(h=10 * scale_factor, d=3 * scale_factor);\n    \n    // Mounting holes for wall attachment\n    translate([0, 0, fuselage_height/2 + 1])\n        for(pos = [-fuselage_length/3, fuselage_length/3]) {\n            translate([pos, 0, 0])\n                cylinder(h=wall_thickness + 2, d=4, center=true);\n        }\n}\n\n// Add subtle surface details\nmodule surface_details() {\n    // Panel lines on wings\n    for(i = [-wing_span/2 + 5 : 10 : wing_span/2 - 5]) {\n        translate([fuselage_length/4, i, -fuselage_height/2 + wing_thickness/2])\n            cube([wing_chord, 0.5, wing_thickness + 0.1], center=true);\n    }\n    \n    // Cockpit window\n    translate([fuselage_length/4, 0, fuselage_height/2 - 3])\n        cube([15 * scale_factor, fuselage_width * 0.8, 5 * scale_factor], center=true);\n}\n\n// Main assembly\nunion() {\n    main_assembly();\n    surface_details();\n}",
    "renders": true
  },
  {
    "natural_object": "helicopter",
    "openscad_code": "// Helicopter furniture item - 3D printable toy shelf\n// Overall dimensions: 120mm long, 60mm wide, 60mm tall\n\nwall_thickness = 2;\nscale_factor = 1;\n\nmodule main_body() {\n    // Fuselage main body - hollow box for storage\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-40, -20, 0])\n                cube([80, 40, 30]);\n            translate([-35, -15, 30])\n                cube([70, 30, 15]);\n        }\n        // Hollow interior\n        translate([-38, -18, wall_thickness])\n            cube([76 - 2*wall_thickness, 36 - 2*wall_thickness, 42]);\n    }\n}\n\nmodule cockpit() {\n    // Cockpit canopy - curved front\n    translate([-45, 0, 35]) {\n        rotate([90, 0, 0])\n            cylinder(h=20, r1=15, r2=20);\n    }\n}\n\nmodule tail_boom() {\n    // Tail boom - hollow tube for storage\n    difference() {\n        // Outer tail boom\n        translate([40, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h=50, r1=8, r2=6);\n        // Hollow interior\n        translate([40, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h=50, r1=6, r2=4);\n    }\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    translate([85, 0, 25])\n        rotate([0, 0, 0])\n            cube([20, 1.5, 15]);\n    \n    // Horizontal stabilizer\n    translate([85, -15, 30])\n        cube([15, 30, 1.5]);\n}\n\nmodule landing_skids() {\n    module skid() {\n        // Curved landing skid\n        translate([0, 0, 5])\n            difference() {\n                // Main skid tube\n                rotate_extrude(angle=90, $fn=20)\n                    translate([25, 0, 0])\n                        circle(r=2);\n                // Flat bottom for stability\n                translate([0, -2, -25])\n                    cube([50, 4, 25]);\n            }\n    }\n    \n    // Left skid\n    translate([0, -25, 0])\n        skid();\n    \n    // Right skid\n    translate([0, 25, 0])\n        mirror([0, 1, 0])\n            skid();\n    \n    // Cross supports\n    translate([-15, -25, 8])\n        cube([30, 2, 2]);\n    translate([15, -25, 8])\n        cube([30, 2, 2]);\n}\n\nmodule main_rotor() {\n    // Rotor mast\n    translate([0, 0, 45])\n        cylinder(h=15, r=3);\n    \n    // Rotor hub\n    translate([0, 0, 60])\n        sphere(r=4);\n    \n    // Main rotor blades (4 blades)\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, 60])\n                cube([60, 3, 1], center=true);\n    }\n}\n\nmodule tail_rotor() {\n    // Tail rotor mount\n    translate([90, 0, 25])\n        rotate([0, 90, 0])\n            cylinder(h=5, r=2);\n    \n    // Tail rotor blades (2 blades)\n    translate([95, 0, 25])\n        rotate([90, 0, 0])\n            for(i = [0:1]) {\n                rotate([0, 0, i * 180])\n                    cube([20, 2, 1], center=true);\n            }\n}\n\nmodule windows() {\n    // Side windows\n    translate([-20, -20, 15])\n        cube([15, 1, 10]);\n    translate([-20, 20, 15])\n        cube([15, 1, 10]);\n    translate([10, -20, 15])\n        cube([15, 1, 10]);\n    translate([10, 20, 15])\n        cube([15, 1, 10]);\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    main_body();\n    cockpit();\n    tail_boom();\n    tail_fin();\n    landing_skids();\n    main_rotor();\n    tail_rotor();\n    windows();\n}",
    "renders": true
  },
  {
    "natural_object": "train",
    "openscad_code": "// Train Bench – a realistic toy-sized bench shaped like a steam locomotive\n// Overall footprint ≈ 120 mm long × 40 mm wide × 55 mm high\n// Wall thickness 2 mm everywhere for easy 3D printing\n\n$fn = 40;          // smooth cylinders & spheres\n\nmodule main_body() {\n    // central boiler / seat area\n    difference() {\n        translate([0,0,25]) scale([60,35,25]) sphere();          // 2 mm thick shell\n        translate([0,0,27]) scale([56,31,23]) sphere();          // hollow\n    }\n}\n\nmodule cab() {\n    // driver’s cab at rear\n    difference() {\n        translate([-42,0,30]) cube([20,34,22], center=true);     // outer\n        translate([-42,0,31]) cube([16,30,20], center=true);     // inner\n    }\n    // cab roof\n    translate([-42,0,42]) cube([22,36,2], center=true);\n}\n\nmodule chimney() {\n    // vertical chimney on boiler\n    difference() {\n        cylinder(h = 18, d = 10);\n        translate([0,0,2]) cylinder(h = 16, d = 6);\n    }\n}\n\nmodule funnel() {\n    // front funnel\n    translate([58,0,40]) rotate([90,0,0]) chimney();\n}\n\nmodule cow_catcher() {\n    // classic slatted cow-catcher under front\n    for (i = [-20:5:20])\n        translate([55,i,2]) cube([6,2,4], center=true);\n}\n\nmodule wheels() {\n    // six wheels, 12 mm diameter, 2 mm thick\n    for (pos = [-35,-15,5])\n        for (side = [-18,18]) {\n            translate([pos, side, 10]) rotate([0,90,0])\n                difference() {\n                    cylinder(h = 2, d = 12);\n                    cylinder(h = 3, d = 8);\n                }\n        }\n}\n\nmodule rods() {\n    // side connecting rods\n    for (side = [-19,19])\n        translate([0, side, 10]) cube([60,2,1.5], center=true);\n}\n\nmodule buffers() {\n    // front & rear buffers\n    for (x = [60,-60])\n        translate([x,0,25]) {\n            cylinder(h = 6, d = 8);\n            sphere(d = 8);\n        }\n}\n\n// assemble the bench\nunion() {\n    main_body();\n    cab();\n    chimney();\n    funnel();\n    cow_catcher();\n    wheels();\n    rods();\n    buffers();\n}",
    "renders": true
  },
  {
    "natural_object": "boat",
    "openscad_code": "// Realistic medium-complexity 3D-printable boat shelf unit\n// Overall size ≈ 120 mm long, 60 mm wide, 90 mm high\n// Wall thickness 2 mm for printability\n\n// Main hull shell\nmodule hull_shell() {\n    difference() {\n        // Outer hull\n        hull() {\n            translate([-55, -25, 0]) cube([110, 50, 8], center = false);\n            translate([-45, -20, 0]) cube([90, 40, 85], center = false);\n            translate([-35, -15, 80]) cube([70, 30, 10], center = false);\n        }\n        // Inner cavity for books\n        translate([-53, -23, 2]) cube([106, 46, 80], center = false);\n    }\n}\n\n// Deck planks\nmodule deck_planks() {\n    for (i = [-40:10:40]) {\n        translate([i, -28, 85]) cube([8, 56, 2]);\n    }\n}\n\n// Bow reinforcement ring\nmodule bow_ring() {\n    rotate([0, 90, 0])\n        translate([0, 0, -55])\n            cylinder(h = 110, r1 = 30, r2 = 25);\n}\n\n// Internal shelf supports\nmodule shelf_supports() {\n    for (y = [-20, 0, 20]) {\n        translate([0, y, 42])\n            cube([108, 2, 2], center = true);\n    }\n}\n\n// Shelf plates\nmodule shelves() {\n    for (h = [10:25:85]) {\n        difference() {\n            translate([0, 0, h])\n                cube([104, 44, 2], center = true);\n            // Rounded front edge\n            translate([0, 22, h + 1])\n                cylinder(h = 2, r = 22);\n            translate([0, -22, h + 1])\n                cylinder(h = 2, r = 22);\n        }\n    }\n}\n\n// Keel reinforcement\nmodule keel() {\n    translate([0, 0, 0])\n        cube([110, 4, 4], center = true);\n}\n\n// Rudder detail\nmodule rudder() {\n    translate([52, 0, 40])\n        rotate([0, 90, 0])\n            cylinder(h = 20, r1 = 6, r2 = 4);\n    translate([54, 0, 40])\n        rotate([0, 90, 0])\n            cube([12, 2, 12], center = true);\n}\n\n// Mast post (furniture accent)\nmodule mast() {\n    translate([-30, 0, 90])\n        cylinder(h = 40, r = 3);\n    translate([-30, 0, 130])\n        sphere(r = 4);\n}\n\n// Assembly\nunion() {\n    hull_shell();\n    deck_planks();\n    bow_ring();\n    shelf_supports();\n    shelves();\n    keel();\n    rudder();\n    mast();\n}",
    "renders": true
  },
  {
    "natural_object": "bus",
    "openscad_code": "// Bus Furniture - Medium Complexity Realistic Style\n// A functional toy bus with interior seating and structural details\n\n// Overall dimensions: 120mm x 50mm x 60mm\n\nmodule bus_body() {\n    // Main body shell with rounded edges\n    difference() {\n        // Main rectangular body\n        rounded_cube([120, 50, 40], 5);\n        \n        // Wheel cutouts\n        translate([20, -2, 8]) cylinder(h=25, d=20, $fn=32);\n        translate([100, -2, 8]) cylinder(h=25, d=20, $fn=32);\n        translate([20, 52, 8]) cylinder(h=25, d=20, $fn=32);\n        translate([100, 52, 8]) cylinder(h=25, d=20, $fn=32);\n    }\n}\n\nmodule rounded_cube(size, radius) {\n    // Create rounded rectangle body\n    hull() {\n        for(x = [radius, size[0]-radius])\n            for(y = [radius, size[1]-radius])\n                translate([x, y, radius]) sphere(r=radius);\n        for(x = [radius, size[0]-radius])\n            for(y = [radius, size[1]-radius])\n                translate([x, y, size[2]-radius]) sphere(r=radius);\n    }\n}\n\nmodule bus_roof() {\n    // Curved roof section\n    translate([0, 0, 40]) {\n        difference() {\n            hull() {\n                cube([120, 50, 1]);\n                translate([60, 25, 20]) scale([1.1, 1.1, 1]) sphere(d=50);\n            }\n            // Hollow interior\n            translate([60, 25, 5]) scale([0.9, 0.9, 1]) sphere(d=45);\n        }\n    }\n}\n\nmodule wheels() {\n    // Four wheels with axles\n    for(pos = [[20, -2], [100, -2], [20, 52], [100, 52]]) {\n        translate([pos[0], pos[1], 0]) {\n            // Tire\n            color(\"black\") cylinder(h=8, d=20, $fn=32);\n            // Rim\n            translate([0, 0, 8.5]) color(\"gray\") cylinder(h=2, d=16, $fn=32);\n            // Axle\n            translate([0, 0, 4]) rotate([90, 0, 0]) color(\"silver\") \n                cylinder(h=54, d=4, $fn=16);\n        }\n    }\n}\n\nmodule windows() {\n    // Side windows\n    for(side = [0, 1]) {\n        for(i = [0:3]) {\n            translate([30 + i*25, side ? 0 : 50, 25]) {\n                difference() {\n                    // Window frame\n                    color(\"white\") cube([18, 2, 12]);\n                    // Glass\n                    translate([2, -1, 2]) color(\"lightblue\", 0.6) \n                        cube([14, 4, 8]);\n                }\n            }\n        }\n    }\n    \n    // Front windshield\n    translate([0, 25, 30]) rotate([0, 30, 0]) {\n        difference() {\n            color(\"white\") cube([2, 40, 20]);\n            translate([1, 2, 2]) color(\"lightblue\", 0.6) \n                cube([4, 36, 16]);\n        }\n    }\n}\n\nmodule doors() {\n    // Passenger door with hinges\n    translate([110, 10, 10]) {\n        // Door frame\n        color(\"red\") cube([2, 30, 30]);\n        // Door panel\n        translate([1, 2, 2]) color(\"darkred\") cube([2, 26, 26]);\n        // Door handle\n        translate([2, 15, 15]) color(\"silver\") \n            rotate([90, 0, 0]) cylinder(h=4, d=2);\n    }\n}\n\nmodule interior_seats() {\n    // Two rows of seats\n    for(row = [0, 1]) {\n        translate([40 + row*40, 0, 15]) {\n            // Seat base\n            color(\"darkblue\") cube([30, 45, 8]);\n            // Seat back\n            translate([2, 5, 8]) color(\"darkblue\") cube([26, 35, 15]);\n            // Legs\n            for(pos = [[2, 5], [2, 35], [28, 5], [28, 35]]) {\n                translate([pos[0], pos[1], 0]) \n                    color(\"gray\") cube([2, 2, 15]);\n            }\n        }\n    }\n}\n\nmodule driver_seat() {\n    // Driver's seat at front\n    translate([10, 20, 15]) {\n        // Seat base\n        color(\"black\") cube([20, 15, 10]);\n        // Seat back\n        translate([2, 2, 10]) color(\"black\") cube([16, 11, 20]);\n        // Steering wheel\n        translate([5, 7, 25]) rotate([90, 0, 0]) {\n            color(\"darkgray\") cylinder(h=15, d=2);\n            translate([0, 0, 5]) color(\"black\") cylinder(h=2, d=12);\n        }\n    }\n}\n\nmodule floor_details() {\n    // Textured floor\n    translate([0, 0, 15]) {\n        for(x = [5:5:115]) {\n            for(y = [5:5:45]) {\n                translate([x, y, 0]) \n                    cube([4.5, 4.5, 0.5]);\n            }\n        }\n    }\n}\n\nmodule structural_frame() {\n    // Internal support beams\n    color(\"gray\") {\n        // Longitudinal beams\n        for(y = [5, 45]) {\n            translate([60, y, 7.5]) \n                cube([110, 2, 15]);\n        }\n        // Cross beams\n        for(x = [20, 40, 60, 80, 100]) {\n            translate([x, 25, 7.5]) \n                cube([2, 40, 15]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    bus_body();\n    bus_roof();\n    wheels();\n    windows();\n    doors();\n}\n\n// Interior details\ntranslate([0, 0, 0]) {\n    interior_seats();\n    driver_seat();\n    floor_details();\n    structural_frame();\n}",
    "renders": true
  },
  {
    "natural_object": "motorcycle",
    "openscad_code": "// Motorcycle Furniture – a small, 3D-printable desk/table sculpture\n// Overall footprint ~100 mm long, ~50 mm wide, ~60 mm tall\n// All walls ≥2 mm for reliable FDM printing\n\n$fn = 24;               // good balance between smoothness & poly-count\n\n// Overall scale factor – change to resize\nscale_factor = 1;\n\nmodule main() {\n    scale([scale_factor,scale_factor,scale_factor])\n    union() {\n        // Rear wheel & swing-arm\n        rear_wheel();\n\n        // Front wheel & fork\n        front_wheel();\n\n        // Main frame\n        frame();\n\n        // Seat\n        seat();\n\n        // Engine block\n        engine();\n\n        // Exhaust\n        exhaust();\n\n        // Handlebars\n        handlebars();\n\n        // Tank\n        tank();\n    }\n}\n\n// ---------- PART MODULES ----------\n\nmodule rear_wheel() {\n    // Wheel\n    translate([-38,0,13])\n    rotate([0,0,90])\n    cylinder(h=10, d=34, center=true);      // tire\n    difference() {\n        translate([-38,0,13])\n        rotate([0,0,90])\n        cylinder(h=12, d=20, center=true);  // rim\n        translate([-38,0,13])\n        rotate([0,0,90])\n        cylinder(h=14, d=16, center=true);  // axle hole\n    }\n\n    // Swing-arm left & right (2 mm thick)\n    translate([-38,0,13])\n    rotate([0,0,90])\n    for(side=[-1,1])\n    translate([0,side*6,0])\n    cube([28,2,6], center=true);\n}\n\nmodule front_wheel() {\n    // Wheel\n    translate([38,0,13])\n    rotate([0,0,90])\n    cylinder(h=10, d=34, center=true);      // tire\n    difference() {\n        translate([38,0,13])\n        rotate([0,0,90])\n        cylinder(h=12, d=20, center=true);  // rim\n        translate([38,0,13])\n        rotate([0,0,90])\n        cylinder(h=14, d=16, center=true);  // axle hole\n    }\n\n    // Fork legs (2 mm thick)\n    for(side=[-1,1])\n    translate([38,side*7,20])\n    cube([6,2,32], center=true);\n}\n\nmodule frame() {\n    // Down-tube\n    color(\"silver\")\n    translate([0,0,0])\n    rotate([0,-7,0])\n    cylinder(h=70, d=4, center=true);\n\n    // Seat rails\n    color(\"silver\")\n    translate([-20,0,32])\n    rotate([0,10,0])\n    cylinder(h=50, d=4, center=true);\n\n    // Cross brace\n    color(\"silver\")\n    translate([-5,0,15])\n    rotate([90,0,0])\n    cylinder(h=18, d=3, center=true);\n}\n\nmodule seat() {\n    // Cushion\n    color(\"black\")\n    translate([-25,0,23])\n    rotate([10,0,0])\n    scale([1,0.8,0.4])\n    cube([30,18,10], center=true);\n}\n\nmodule engine() {\n    // Engine block\n    color(\"gray\")\n    translate([0,0,9])\n    cube([22,18,14], center=true);\n\n    // Cylinders\n    color(\"silver\")\n    for(offset=[-7,7])\n    translate([offset,0,17])\n    cylinder(h=12, d=8);\n}\n\nmodule exhaust() {\n    color(\"darkgray\")\n    translate([0,11,7])\n    rotate([0,-15,0])\n    cylinder(h=45, d=5);\n\n    translate([15,11,4])\n    sphere(d=5);\n}\n\nmodule handlebars() {\n    // Stem\n    color(\"silver\")\n    translate([30,0,40])\n    rotate([0,0,0])\n    cylinder(h=12, d=5);\n\n    // Bars\n    color(\"black\")\n    translate([30,0,46])\n    rotate([0,0,90])\n    cylinder(h=40, d=3, center=true);\n}\n\nmodule tank() {\n    // Fuel tank\n    color(\"red\")\n    translate([10,0,25])\n    scale([1,0.7,0.6])\n    sphere(d=30);\n}\n\n// ---------- MAIN CALL ----------\nmain();",
    "renders": true
  },
  {
    "natural_object": "bicycle",
    "openscad_code": "// 3D-printable bicycle-shaped desk organizer\n// Wall thickness: 2 mm, max dimension ≈ 100 mm\n\n$fn = 32;               // smooth curves\nwall = 2;               // wall thickness for printability\nscaleFactor = 0.7;      // scale to ~100 mm\n\nmodule tubeProfile()        // simple hollow tube section\n    difference() {\n        circle(d = 8);\n        circle(d = 8 - wall*2);\n    }\n\nmodule frameTube(l)         // hollow cylinder with length l\n    linear_extrude(height = l, center = true)\n        tubeProfile();\n\nmodule wheel() {            // spoked wheel with hollow rim\n    difference() {\n        cylinder(h = 8, d = 36, center = true);           // tyre\n        translate([0,0,-1])\n            cylinder(h = 10, d = 32, center = true);      // remove inner\n    }\n    // 8 spokes\n    for(a=[0:45:359])\n        rotate([0,0,a])\n            translate([10,0,0])\n                cube([20, 2, 8], center = true);\n}\n\nmodule pedal()              // simple block pedal\n    cube([12, 6, 4], center = true);\n\nmodule crank()              // crank arm with pedal\n    union() {\n        translate([0,0,-8])\n            rotate([90,0,0])\n                frameTube(22);\n        translate([22,0,-8])\n            pedal();\n    }\n\nmodule chainring()          // 5-arm chainring\n    difference() {\n        cylinder(h = 4, d = 32, center = true);\n        cylinder(h = 5, d = 26, center = true);\n    }\n    for(a=[0:72:359])\n        rotate([0,0,a])\n            translate([6,0,0])\n                cube([12, 3, 4], center = true);\n\nmodule handlebar()          // flat bar with stem\n    union() {\n        translate([0,0,10])\n            rotate([90,0,0])\n                frameTube(50);\n        rotate([0,90,0])\n            frameTube(30);\n    }\n\nmodule saddle()             // seat shell\n    difference() {\n        scale([1, 1.3, 0.5])\n            sphere(d = 20);\n        translate([0,0,-5])\n            cube([40, 40, 10], center = true);\n    }\n\nmodule bicycleOrganizer() {\n    // rear triangle\n    translate([0,0,5])\n        rotate([90,0,0])\n            frameTube(40);                  // seat tube\n    translate([-20,0,-5])\n        rotate([90,-10,0])\n            frameTube(45);                  // down tube\n    translate([-20,0,-15])\n        rotate([0,-10,0])\n        rotate([0,-45,0])\n            frameTube(50);                  // chain stay\n    translate([20,0,5])\n        rotate([0,-10,0])\n        rotate([0,-45,0])\n            frameTube(50);                  // seat stay\n\n    // fork\n    translate([0,0,-25])\n        rotate([90,0,0])\n            frameTube(45);\n\n    // wheels\n    translate([0,0,35])\n        wheel();\n    translate([0,0,-35])\n        wheel();\n\n    // cranks & chainring\n    translate([0,0,-15])\n        chainring();\n    translate([0,0,-15])\n        rotate([0,0,30])\n            crank();\n    translate([0,0,-15])\n        rotate([0,0,210])\n            crank();\n\n    // handlebar & stem\n    translate([0,0,-25])\n        handlebar();\n\n    // saddle\n    translate([0,0,15])\n        saddle();\n\n    // internal compartments (difference)\n    translate([0,0,5])\n        rotate([90,0,0])\n            cylinder(h = 42, d = 15, center = true);\n    translate([0,0,-15])\n        cube([20, 20, 60], center = true);\n}\n\nscale([scaleFactor, scaleFactor, scaleFactor])\n    bicycleOrganizer();",
    "renders": true
  },
  {
    "natural_object": "scooter",
    "openscad_code": "// Scooter furniture item - medium complexity realistic style\n// Overall dimensions: 100mm x 50mm x 120mm\n\n$fn = 20;\n\n// Main module\nmodule scooter_furniture() {\n    // Scooter deck with furniture-style wood grain texture\n    union() {\n        // Main deck platform\n        difference() {\n            // Base deck\n            cube([80, 30, 5], center = true);\n            // Rounded edges\n            translate([0, 0, 2.5]) {\n                cube([78, 28, 5], center = true);\n            }\n        }\n        \n        // Furniture-style legs/supports\n        for(i = [-1, 1]) {\n            translate([i * 35, 0, -10]) {\n                cylinder(h = 20, r = 3);\n            }\n        }\n    }\n    \n    // Handlebar post with furniture joint detail\n    translate([35, 0, 2.5]) {\n        union() {\n            // Main post\n            cylinder(h = 70, r = 4);\n            // Joint detail - decorative collar\n            translate([0, 0, 10]) {\n                cylinder(h = 5, r = 6);\n            }\n            // Second joint detail\n            translate([0, 0, 50]) {\n                cylinder(h = 5, r = 6);\n            }\n        }\n    }\n    \n    // Handlebar with furniture-style end caps\n    translate([35, 0, 72.5]) {\n        rotate([90, 0, 0]) {\n            union() {\n                // Main handlebar tube\n                cylinder(h = 50, r = 2);\n                // End caps\n                translate([25, 0, 0]) {\n                    cylinder(h = 5, r = 3);\n                }\n                translate([-25, 0, 0]) {\n                    cylinder(h = 5, r = 3);\n                }\n            }\n        }\n    }\n    \n    // Front wheel with furniture-style spoke design\n    translate([35, 0, -15]) {\n        rotate([90, 0, 0]) {\n            union() {\n                // Wheel rim\n                difference() {\n                    cylinder(h = 8, r = 15);\n                    cylinder(h = 10, r = 12);\n                }\n                // Spokes - furniture-style decorative pattern\n                for(i = [0:45:315]) {\n                    rotate([0, 0, i]) {\n                        translate([13.5, 0, 0]) {\n                            cube([3, 2, 8], center = true);\n                        }\n                    }\n                }\n                // Hub\n                cylinder(h = 8, r = 4);\n            }\n        }\n    }\n    \n    // Rear wheel\n    translate([-35, 0, -15]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 8, r = 12);\n                cylinder(h = 10, r = 9);\n            }\n        }\n    }\n    \n    // Furniture-style back support\n    translate([-35, 0, 15]) {\n        union() {\n            // Backrest post\n            cube([4, 30, 25], center = true);\n            // Support brackets\n            for(i = [-1, 1]) {\n                translate([i * 15, 0, 0]) {\n                    rotate([0, i * 30, 0]) {\n                        cube([20, 3, 2]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Decorative furniture trim along deck edges\n    for(side = [-1, 1]) {\n        translate([0, side * 15, 0]) {\n            cube([82, 2, 2], center = true);\n        }\n    }\n}\n\n// Render the scooter furniture\nscooter_furniture();",
    "renders": true
  },
  {
    "natural_object": "submarine",
    "openscad_code": "// Submarine Chair - Realistic Style\n// Medium complexity submarine-inspired furniture piece\n// Overall dimensions: ~120mm length x 50mm width x 100mm height\n\n// Configuration\nchair_length = 120;\nchair_width = 50;\nchair_height = 100;\nwall_thickness = 2;\nseat_height = 45;\n\n// Main submarine hull body\nmodule submarine_hull() {\n    difference() {\n        // Main hull - elongated oval shape\n        scale([1, 0.7, 0.5]) \n            sphere(d=chair_width);\n        \n        // Hollow out interior\n        scale([0.9, 0.6, 0.4]) \n            sphere(d=chair_width - wall_thickness*2);\n    }\n}\n\n// Conning tower (backrest support)\nmodule conning_tower() {\n    translate([0, 0, chair_height/2 - 15]) {\n        // Main tower structure\n        cylinder(h=30, d1=25, d2=20, center=true);\n        \n        // Tower top detail\n        translate([0, 0, 15])\n            sphere(d=20);\n        \n        // Periscope tubes\n        for(i = [-1, 1]) {\n            translate([i*8, 0, 20])\n                cylinder(h=15, d=3, center=true);\n        }\n    }\n}\n\n// Propeller assembly (back support)\nmodule propeller_assembly() {\n    translate([-chair_length/2 + 5, 0, seat_height]) {\n        // Propeller hub\n        cylinder(h=8, d=12, center=true);\n        \n        // Propeller blades\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([0, 6, 0])\n                    scale([1, 0.3, 0.1])\n                        cube([12, 10, 2], center=true);\n        }\n    }\n}\n\n// Porthole windows (decorative elements)\nmodule portholes() {\n    for(pos = [-30, 0, 30]) {\n        translate([pos, 0, seat_height + 10]) {\n            // Window frame\n            cylinder(h=wall_thickness, d=8, center=true);\n            \n            // Window glass\n            translate([0, 0, 1])\n                cylinder(h=1, d=6, center=true);\n        }\n    }\n}\n\n// Seat platform\nmodule seat_platform() {\n    translate([0, 0, seat_height - 15]) {\n        // Main seat\n        cube([chair_length - 20, chair_width - 10, wall_thickness*2], center=true);\n        \n        // Seat cushion detail\n        translate([0, 0, wall_thickness])\n            cube([chair_length - 25, chair_width - 15, 5], center=true);\n    }\n}\n\n// Dive planes (armrests)\nmodule dive_planes() {\n    for(side = [-1, 1]) {\n        translate([0, side * (chair_width/2 - 5), seat_height + 5]) {\n            rotate([0, side * 15, 0])\n                cube([30, wall_thickness*2, 8], center=true);\n        }\n    }\n}\n\n// Rudder (back support detail)\nmodule rudder() {\n    translate([-chair_length/2 + 2, 0, seat_height + 10]) {\n        rotate([0, 15, 0])\n            cube([wall_thickness*2, 15, 25], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main hull as seat base\n    translate([0, 0, seat_height - 10])\n        submarine_hull();\n    \n    // Conning tower backrest\n    translate([0, 0, seat_height + 15])\n        conning_tower();\n    \n    // Structural elements\n    seat_platform();\n    propeller_assembly();\n    portholes();\n    dive_planes();\n    rudder();\n    \n    // Base support struts\n    for(pos = [-40, 40]) {\n        translate([pos, 0, seat_height/2])\n            cube([5, chair_width - 10, seat_height], center=true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "ferry",
    "openscad_code": "// Ferry Furniture - Realistic Style Medium Complexity\n// A small ferry-shaped side table / storage unit\n// Overall dimensions: 120mm L x 60mm W x 45mm H\n\n// Wall thickness constant\nwall = 2;\n\n// Main hull body\nmodule hull_body() {\n    difference() {\n        // Main hull shape - streamlined with rounded front\n        hull() {\n            // Bottom half\n            translate([0, 0, wall]) cube([120, 60, 20], center=true);\n            // Tapered front\n            translate([40, 0, 10]) scale([1, 0.8, 1]) sphere(d=60);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, wall+2]) cube([116-wall*2, 56-wall*2, 18], center=true);\n        \n        // Remove bottom for open storage\n        translate([0, 0, -5]) cube([122, 62, 10], center=true);\n    }\n}\n\n// Deck surface with non-slip pattern\nmodule deck_surface() {\n    difference() {\n        // Main deck\n        translate([0, 0, 25]) cube([120, 60, wall], center=true);\n        \n        // Drainage grooves\n        for(i = [-25:10:25]) {\n            translate([i, 0, 24]) cube([1, 58, 3], center=true);\n        }\n    }\n}\n\n// Bridge structure\nmodule bridge() {\n    union() {\n        // Bridge base\n        translate([-20, 0, 27]) cube([40, 30, wall], center=true);\n        \n        // Bridge walls\n        translate([-20, -13, 33]) cube([40, wall, 10], center=true);\n        translate([-20, 13, 33]) cube([40, wall, 10], center=true);\n        translate([0, 0, 38]) cube([wall, 26, 10], center=true);\n        \n        // Roof\n        translate([-20, 0, 43]) cube([40, 30, wall], center=true);\n    }\n}\n\n// Life rings (decorative handles)\nmodule life_rings() {\n    for(pos = [[-40, 25], [40, 25], [-40, -25], [40, -25]]) {\n        translate([pos[0], pos[1], 30]) {\n            difference() {\n                cylinder(h=wall, d=12, center=true);\n                cylinder(h=wall+1, d=8, center=true);\n            }\n        }\n    }\n}\n\n// Chimney stacks\nmodule chimneys() {\n    for(i = [-1:1]) {\n        translate([i*20, 0, 30]) {\n            cylinder(h=15, d=8);\n            translate([0, 0, 15]) cylinder(h=3, d=10);\n        }\n    }\n}\n\n// Support legs (ferry stands)\nmodule ferry_legs() {\n    // Front support - tapered\n    translate([50, 0, 0]) {\n        difference() {\n            cylinder(h=25-wall, d1=12, d2=8);\n            translate([0, 0, -1]) cylinder(h=2, d=8);\n        }\n    }\n    \n    // Rear supports\n    for(y = [-20, 20]) {\n        translate([-50, y, 0]) {\n            cylinder(h=25-wall, d=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Structural elements\n    hull_body();\n    ferry_legs();\n    \n    // Furniture surfaces\n    deck_surface();\n    \n    // Ferry details\n    bridge();\n    life_rings();\n    chimneys();\n}",
    "renders": true
  },
  {
    "natural_object": "yacht",
    "openscad_code": "// Yacht furniture - Captain's Chair with integrated storage base\n// Overall dimensions: 60mm wide x 65mm deep x 85mm high\n// Wall thickness: 2mm for 3D printing\n\n// Main parameters\nchair_width = 60;\nchair_depth = 65;\nchair_height = 85;\nwall_thickness = 2;\n\n// Module for rounded edges using hull technique\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x-2*radius, size.y-2*radius, size.z]);\n        cylinder(r=radius, h=0.1, $fn=20);\n    }\n}\n\n// Chair seat with proper proportions and slight curvature\nmodule chair_seat() {\n    difference() {\n        // Main seat block with ergonomic curve\n        translate([-chair_width/2, -chair_depth/2, 45])\n        rounded_cube([chair_width, chair_depth, 8], 3);\n        \n        // Remove bottom for hollow structure\n        translate([-chair_width/2 + wall_thickness, -chair_depth/2 + wall_thickness, 45])\n        cube([chair_width - 2*wall_thickness, chair_depth - 2*wall_thickness, 8]);\n        \n        // Create slight seating depression\n        translate([-chair_width/2 + 5, 5, 50])\n        rotate([5, 0, 0])\n        cube([chair_width - 10, chair_depth - 10, 5]);\n    }\n}\n\n// Backrest with nautical styling\nmodule chair_backrest() {\n    difference() {\n        // Main backrest frame\n        translate([-chair_width/2, -chair_depth/4, 53])\n        rounded_cube([chair_width, chair_depth/2, 30], 3);\n        \n        // Hollow center\n        translate([-chair_width/2 + wall_thickness, -chair_depth/4 + wall_thickness, 53])\n        cube([chair_width - 2*wall_thickness, chair_depth/2 - 2*wall_thickness, 30]);\n        \n        // Decorative porthole windows\n        for(i = [0:2]) {\n            translate([-15 + i*15, -5, 60 + i*5])\n            cylinder(h=5, r=3, $fn=16);\n        }\n    }\n}\n\n// Support arms with yacht-inspired curves\nmodule chair_arms() {\n    // Left arm\n    difference() {\n        translate([-chair_width/2 - 3, 0, 45])\n        rotate([0, 15, 0])\n        rounded_cube([8, chair_depth/3, 15], 2);\n        \n        translate([-chair_width/2 - 1, 2, 47])\n        cube([4, chair_depth/3 - 4, 11]);\n    }\n    \n    // Right arm (mirrored)\n    mirror([1, 0, 0])\n    difference() {\n        translate([-chair_width/2 - 3, 0, 45])\n        rotate([0, 15, 0])\n        rounded_cube([8, chair_depth/3, 15], 2);\n        \n        translate([-chair_width/2 - 1, 2, 47])\n        cube([4, chair_depth/3 - 4, 11]);\n    }\n}\n\n// Storage pedestal base with compartment\nmodule chair_base() {\n    difference() {\n        // Main base structure\n        translate([-chair_width/2 - 5, -chair_depth/2 - 5, 0])\n        rounded_cube([chair_width + 10, chair_depth + 10, 45], 4);\n        \n        // Storage cavity\n        translate([-chair_width/2, -chair_depth/2, 5])\n        rounded_cube([chair_width, chair_depth, 35], 3);\n        \n        // Access hole for storage\n        translate([0, -chair_depth/2 - 1, 25])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=5, $fn=20);\n    }\n    \n    // Reinforcement ribs for stability\n    for(i = [-1:1]) {\n        translate([i*20, 0, 22])\n        cube([2, chair_depth + 10, 1]);\n    }\n}\n\n// Assembly\nunion() {\n    chair_base();\n    chair_seat();\n    chair_backrest();\n    chair_arms();\n}",
    "renders": true
  },
  {
    "natural_object": "canoe",
    "openscad_code": "// Realistic 3D-Printable Canoe Furniture Item (Medium Complexity)\n// All dimensions in mm, wall thickness 2 mm, max length ≈120 mm\n\n$fn = 32;               // Smooth curves\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main hull dimensions\nhull_length = 120;\nhull_width  = 28;\nhull_height = 12;\n\n// Wall thickness\nwall = 2;\n\n// Helper: rounded box\nmodule rounded_box(l, w, h, r) {\n    translate([0,0,r]) hull() {\n        translate([ l/2-r,  w/2-r, 0]) cylinder(h=h, r=r);\n        translate([ l/2-r, -w/2+r, 0]) cylinder(h=h, r=r);\n        translate([-l/2+r,  w/2-r, 0]) cylinder(h=h, r=r);\n        translate([-l/2+r, -w/2+r, 0]) cylinder(h=h, r=r);\n    }\n}\n\n// Helper: canoe-shaped profile\nmodule canoe_profile() {\n    difference() {\n        // Full hull\n        scale([1, 0.45, 0.4]) rotate([90,0,0]) \n            cylinder(h=hull_length, d=hull_width*2, center=true);\n        // Hollow interior offset by wall\n        translate([0,0,-wall]) \n            scale([1, 0.42, 0.38]) rotate([90,0,0]) \n                cylinder(h=hull_length+wall*2, d=(hull_width-wall)*2, center=true);\n    }\n}\n\n// Main hull\nmodule hull() {\n    difference() {\n        canoe_profile();\n        // Remove sharp ends for printing\n        translate([ hull_length/2+wall, 0, 0]) rotate([0,90,0]) \n            cylinder(h=hull_width*2, d=hull_width, center=true);\n        translate([-hull_length/2-wall, 0, 0]) rotate([0,90,0]) \n            cylinder(h=hull_width*2, d=hull_width, center=true);\n    }\n}\n\n// Seats\nseat_width = 20;\nseat_thickness = 1.6;\nseat_radius = 2;\nmodule seat(pos) {\n    translate([pos,0,1]) \n        difference() {\n            rounded_box(seat_width, hull_width-wall*2, seat_thickness, seat_radius);\n            // Grooves for drainage\n            for(i=[-3:1:3]) translate([i*3.5,0,-0.1]) cube([1, hull_width-wall*2+0.2, seat_thickness+0.2]);\n        }\n}\n\n// Gunwale reinforcement strips\nmodule gunwale() {\n    for(side=[-1,1]) mirror([0,side,0]) {\n        translate([0, (hull_width-wall)/2, hull_height/2-1]) \n            rotate([0,90,0]) \n                cylinder(h=hull_length, d=wall*2, center=true);\n    }\n}\n\n// Yoke (carrying thwart)\nmodule yoke() {\n    translate([0,0,0]) \n        hull() {\n            translate([0,0,2]) rounded_box(hull_width-wall*2, 4, wall, 1);\n            translate([0,0,5]) cylinder(h=wall, r=2);\n        }\n}\n\n// Assembly\nscale(scale_factor) {\n    hull();\n    seat(-hull_length/4);\n    seat(hull_length/4);\n    gunwale();\n    yoke();\n}",
    "renders": true
  },
  {
    "natural_object": "kayak",
    "openscad_code": "// Kayak Bookshelf - Medium Complexity Realistic Style\n// Dimensions: 120mm long x 35mm wide x 25mm high\n\n// Wall thickness constant\nwall = 2;\n\n// Main kayak hull shape\nmodule kayak_hull() {\n    difference() {\n        // Main hull body - elongated ellipsoid\n        scale([1, 0.3, 0.15]) \n            sphere(d=100, $fn=50);\n        \n        // Hollow out interior\n        translate([0, 0, -wall])\n            scale([0.92, 0.25, 0.12]) \n                sphere(d=100, $fn=50);\n    }\n}\n\n// Deck with cockpit opening\nmodule kayak_deck() {\n    difference() {\n        // Deck surface\n        translate([0, 0, 7.5])\n            scale([1, 0.3, 0.05])\n                sphere(d=100, $fn=50);\n        \n        // Cockpit opening\n        translate([0, 0, 0])\n            scale([0.3, 0.15, 1])\n                cylinder(h=20, d=40, $fn=30);\n    }\n}\n\n// Bookshelf support frame inside kayak\nmodule bookshelf_frame() {\n    // Main support beam\n    translate([0, 0, 5])\n        cube([110, 1, 15], center=true);\n    \n    // Cross supports\n    for(i=[-40:40:40]) {\n        translate([i, 0, 5])\n            cube([wall, 30, 15], center=true);\n    }\n}\n\n// Bow and stern bulkheads for structure\nmodule bulkheads() {\n    // Bow bulkhead\n    translate([45, 0, 3.75])\n        rotate([0, 90, 0])\n            cylinder(h=30, r1=15, r2=12, $fn=30);\n    \n    // Stern bulkhead\n    translate([-45, 0, 3.75])\n        rotate([0, 90, 0])\n            cylinder(h=30, r1=15, r2=12, $fn=30);\n}\n\n// Deck rigging simulation (bungee cords)\nmodule deck_rigging() {\n    color(\"black\")\n    for(i=[-30:15:30]) {\n        // Forward deck lines\n        translate([i, 12, 12])\n            rotate([90, 0, 0])\n                cylinder(h=24, d=1, $fn=8);\n        \n        // Rear deck lines\n        translate([i, -12, 12])\n            rotate([90, 0, 0])\n                cylinder(h=24, d=1, $fn=8);\n    }\n}\n\n// Carry handles\nmodule carry_handles() {\n    // Bow handle\n    translate([50, 0, 10])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=3, $fn=8);\n    \n    // Stern handle\n    translate([-50, 0, 10])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=3, $fn=8);\n}\n\n// Bookshelf floor (bottom of storage area)\nmodule bookshelf_floor() {\n    translate([0, 0, 2])\n        cube([100, 28, wall], center=true);\n}\n\n// Assembly\nunion() {\n    // Main kayak body\n    kayak_hull();\n    kayak_deck();\n    \n    // Structural elements\n    bookshelf_frame();\n    bulkheads();\n    bookshelf_floor();\n    \n    // Details\n    deck_rigging();\n    carry_handles();\n}",
    "renders": true
  },
  {
    "natural_object": "dinghy",
    "openscad_code": "// Dinghy bookshelf / storage unit\n// Moderately detailed 3D-printable furniture piece\n// Overall size: 120mm long × 50mm wide × 60mm tall\n// Wall thickness: 2mm\n\n$fn = 32;\n\n// overall dimensions\nhull_length = 120;\nhull_width  = 50;\nhull_height = 40;\n\n// wall thickness\nt = 2;\n\n// helper module for rounded hull shapes\nmodule rounded_hull(l, w, h) {\n    difference() {\n        hull() {\n            translate([t, t, t]) cube([l - 2*t, w - 2*t, h - 2*t], center = true);\n            translate([0, 0, 0]) cube([l, w, h], center = true);\n        }\n        // cut top open\n        translate([0, 0, h/2]) cube([l + 1, w + 1, 2], center = true);\n    }\n}\n\n// main hull shell\nmodule hull_shell() {\n    difference() {\n        // outer hull\n        hull() {\n            translate([0, 0, 0]) rounded_hull(hull_length, hull_width, hull_height);\n            translate([0, 0, -hull_height/2 + 2]) cube([hull_length, hull_width, 1], center = true);\n        }\n        // inner cavity\n        translate([0, 0, -t]) rounded_hull(hull_length - 2*t, hull_width - 2*t, hull_height - 2*t);\n    }\n}\n\n// internal shelf\nmodule shelf() {\n    translate([0, 0, -hull_height/2 + hull_height/3]) {\n        difference() {\n            cube([hull_length - 6*t, hull_width - 4*t, t], center = true);\n            // cutouts for drainage / lightening\n            for (x = [-hull_length/4, 0, hull_length/4]) {\n                translate([x, 0, -t/2]) cylinder(h = t + 1, d = 6, center = true);\n            }\n        }\n    }\n}\n\n// bench-style seat across the top\nmodule seat() {\n    difference() {\n        hull() {\n            translate([0, 0, hull_height/2 - 1]) cube([hull_length - 10, hull_width - 4, 6], center = true);\n            translate([0, 0, hull_height/2 + 2]) cube([hull_length - 14, hull_width - 8, 2], center = true);\n        }\n        // gentle finger-grip groove\n        translate([0, 0, hull_height/2 + 3]) cube([hull_length - 18, hull_width - 12, 4], center = true);\n    }\n}\n\n// bow and stern transom caps\nmodule transom_caps() {\n    union() {\n        // bow\n        translate([-hull_length/2 + 2, 0, 0]) rotate([0, 0, 0]) {\n            hull() {\n                translate([0, 0, 0]) cube([4, hull_width, hull_height], center = true);\n                translate([2, 0, 0]) scale([1, 0.6, 0.85]) sphere(d = hull_width);\n            }\n        }\n        // stern\n        mirror([1, 0, 0]) children();\n    }\n}\n\n// keel reinforcement strip\nmodule keel() {\n    translate([0, 0, -hull_height/2 + t/2]) {\n        cube([hull_length, 6, t], center = true);\n    }\n}\n\n// assembly\nunion() {\n    hull_shell();\n    shelf();\n    seat();\n    transom_caps();\n    keel();\n}",
    "renders": true
  },
  {
    "natural_object": "sailboat",
    "openscad_code": "// Sailboat Bookshelf - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm length, 100mm height, 40mm width\n\n// Configuration\nwall_thickness = 2;\nscale_factor = 0.8;\n\n// Main hull module\nmodule hull() {\n    // Base hull shape\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness])\n        scale([0.8, 0.7, 0.9])\n        hull_shape();\n    }\n}\n\n// Hull primitive shape\nmodule hull_shape() {\n    linear_extrude(height=30, scale=[0.3, 1], center=true)\n    offset(r=5)\n    polygon(points=[\n        [0, -50],\n        [5, -45],\n        [15, -30],\n        [25, -10],\n        [30, 10],\n        [25, 30],\n        [15, 45],\n        [0, 50],\n        [-15, 45],\n        [-25, 30],\n        [-30, 10],\n        [-25, -10],\n        [-15, -30],\n        [-5, -45]\n    ]);\n}\n\n// Deck with bookshelf compartments\nmodule deck() {\n    // Main deck surface\n    translate([0, 0, 30])\n    difference() {\n        hull_shape();\n        \n        // Bookshelf compartments\n        for (i = [-1:1]) {\n            translate([i * 15, 0, -5])\n            cube([12, 80, 10], center=true);\n        }\n    }\n    \n    // Vertical dividers\n    for (i = [-1:0]) {\n        translate([i * 15 + 7.5, 0, 25])\n        cube([wall_thickness, 76, 10]);\n    }\n}\n\n// Mast with sail support\nmodule mast() {\n    // Main mast\n    translate([0, 0, 35])\n    cylinder(h=60, r=3, $fn=16);\n    \n    // Mast base reinforcement\n    translate([0, 0, 32])\n    cylinder(h=5, r1=5, r2=3, $fn=16);\n    \n    // Boom (horizontal spar)\n    translate([0, -25, 65])\n    rotate([90, 0, 0])\n    cylinder(h=50, r=1.5, $fn=12);\n}\n\n// Sail with realistic curve\nmodule sail() {\n    // Main sail body\n    translate([0, 0, 65])\n    rotate([0, 90, 0])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0, -30],\n        [40, -25],\n        [45, 0],\n        [40, 25],\n        [0, 30],\n        [5, 20],\n        [10, 10],\n        [10, -10],\n        [5, -20]\n    ]);\n    \n    // Reinforcement patches\n    translate([0, -30, 65])\n    sphere(r=2, $fn=16);\n    \n    translate([0, 30, 65])\n    sphere(r=2, $fn=16);\n}\n\n// Rudder\nmodule rudder() {\n    translate([-28, 0, 15])\n    rotate([0, 15, 0])\n    difference() {\n        // Main rudder blade\n        cube([20, 2, 25]);\n        \n        // Tapered edge\n        translate([18, -1.1, 0])\n        cube([3, 2.2, 25]);\n    }\n}\n\n// Keel for stability\nmodule keel() {\n    translate([15, 0, 5])\n    rotate([0, 0, 0])\n    difference() {\n        // Main keel\n        cube([40, 4, 10]);\n        \n        // Streamlined front\n        translate([38, 0, 0])\n        sphere(r=2, $fn=16);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    hull();\n    deck();\n    mast();\n    sail();\n    rudder();\n    keel();\n}",
    "renders": true
  },
  {
    "natural_object": "speedboat",
    "openscad_code": "// Speedboat Furniture - Racing Seat with Hull Base\n// Overall size: ~120mm length x 45mm width x 45mm height\n// Wall thickness: 2mm throughout for 3D printability\n\n$fn = 64;\n\nmodule hull_base() {\n    // Main hull body - boat shaped base\n    difference() {\n        // Outer hull\n        hull() {\n            translate([0, 0, 5]) cube([110, 40, 10], center=true);\n            translate([-45, 0, -3]) sphere(d=35);\n            translate([45, 0, -3]) sphere(d=35);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 7]) cube([106, 36, 12], center=true);\n    }\n    \n    // Hull floor reinforcement ribs\n    for(i = [-30:20:30]) {\n        translate([i, 0, 4]) cube([18, 38, 2], center=true);\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat pad with ergonomic curve\n    translate([0, 0, 12]) {\n        difference() {\n            // Cushion body\n            minkowski() {\n                cube([50, 40, 8], center=true);\n                sphere(d=4);\n            }\n            \n            // Cushion hollow\n            scale([0.9, 0.9, 0.7]) \n                minkowski() {\n                    translate([0, 0, -2]) cube([50, 40, 8], center=true);\n                    sphere(d=4);\n                }\n        }\n    }\n    \n    // Upholstery details - stitching lines\n    for(i = [-15:10:15]) {\n        translate([i, 0, 16.5]) cube([1, 38, 0.5], center=true);\n    }\n}\n\nmodule seat_back() {\n    // Racing seat backrest\n    translate([-15, 0, 20]) rotate([15, 0, 0]) {\n        difference() {\n            // Backrest shell\n            hull() {\n                translate([0, 0, 0]) cube([40, 38, 25], center=true);\n                translate([0, 0, 5]) scale([0.8, 0.9, 1]) cube([40, 38, 25], center=true);\n            }\n            \n            // Backrest hollow\n            translate([0, 0, 2]) scale([0.85, 0.9, 0.9]) \n                cube([38, 36, 22], center=true);\n        }\n    }\n    \n    // Side bolsters\n    for(side = [-1, 1]) {\n        translate([-15, side * 18, 22]) rotate([15, 0, 0]) {\n            cube([35, 8, 20], center=true);\n        }\n    }\n}\n\nmodule steering_support() {\n    // Steering column support structure\n    translate([25, 0, 15]) {\n        // Main column\n        cylinder(h=20, d=12, center=true);\n        \n        // Support bracket\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=15, d=16, center=true);\n                cylinder(h=16, d=12, center=true);\n            }\n        }\n    }\n    \n    // Base plate\n    translate([25, 0, 5]) \n        cube([20, 20, 2], center=true);\n}\n\nmodule grab_rails() {\n    // Side grab rails for safety\n    for(side = [-1, 1]) {\n        translate([0, side * 22, 25]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=110, d=6, center=true);\n                    cylinder(h=112, d=2, center=true);\n                }\n            }\n            \n            // Rail supports\n            translate([-40, 0, 0]) cube([4, 4, 8], center=true);\n            translate([40, 0, 0]) cube([4, 4, 8], center=true);\n        }\n    }\n}\n\nmodule engine_detail() {\n    // Rear engine cover detail\n    translate([45, 0, 8]) {\n        difference() {\n            hull() {\n                cube([25, 35, 8], center=true);\n                translate([0, 0, 4]) cube([20, 30, 6], center=true);\n            }\n            \n            translate([0, 0, 2]) cube([21, 31, 10], center=true);\n        }\n        \n        // Engine vents\n        for(i = [-12:6:12]) {\n            translate([50, i, 8]) cube([2, 2, 4], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    hull_base();\n    seat_cushion();\n    seat_back();\n    steering_support();\n    grab_rails();\n    engine_detail();\n}",
    "renders": true
  },
  {
    "natural_object": "tanker",
    "openscad_code": "// Tanker desk - a classic steel office desk with side pedestals and modesty panel\n// Overall size: 120 x 60 x 75 mm (scaled for 3D printing)\n\n// Desk parameters\ndesk_width = 120;\ndesk_depth = 60;\ndesk_height = 75;\nwall_thickness = 2;\n\n// Top surface\nmodule desk_top() {\n    difference() {\n        // Main top\n        translate([0, 0, desk_height - 2])\n            cube([desk_width, desk_depth, 2], center=true);\n        \n        // Rounded front edge using subtraction\n        translate([0, desk_depth/2 - 1, desk_height - 2])\n            cylinder(h=3, r=1, $fn=20);\n        translate([0, -desk_depth/2 + 1, desk_height - 2])\n            cylinder(h=3, r=1, $fn=20);\n    }\n}\n\n// Side pedestal with drawers\nmodule pedestal(side) {\n    // Position left (-1) or right (1)\n    x_pos = side * (desk_width/2 - 15);\n    \n    union() {\n        // Pedestal body\n        translate([x_pos, 0, desk_height/2 - 10])\n            cube([30, desk_depth - 4, desk_height - 12], center=true);\n        \n        // Base support\n        translate([x_pos, 0, 2])\n            cube([32, desk_depth - 2, 4], center=true);\n        \n        // Drawers (3 drawers)\n        for(i = [0:2]) {\n            // Drawer front\n            color(\"silver\")\n            translate([x_pos, 0, 15 + i*18])\n                cube([28, desk_depth - 8, 16], center=true);\n            \n            // Drawer handle\n            translate([x_pos, (side == 1 ? 1 : -1) * (desk_depth/2 - 6), 23 + i*18])\n                cube([12, 2, 2], center=true);\n        }\n    }\n}\n\n// Support frame (steel legs and crossbars)\nmodule frame() {\n    // Front legs\n    for(x = [-1, 1]) {\n        translate([x * (desk_width/2 - 2), desk_depth/2 - 2, desk_height/2])\n            cube([4, 4, desk_height - 4], center=true);\n    }\n    \n    // Back legs\n    for(x = [-1, 1]) {\n        translate([x * (desk_width/2 - 2), -desk_depth/2 + 2, desk_height/2])\n            cube([4, 4, desk_height - 4], center=true);\n    }\n    \n    // Front crossbar\n    translate([0, desk_depth/2 - 2, 4])\n        cube([desk_width - 8, 4, 4], center=true);\n    \n    // Back crossbar\n    translate([0, -desk_depth/2 + 2, 4])\n        cube([desk_width - 8, 4, 4], center=true);\n    \n    // Side crossbars (only between pedestals)\n    for(side = [-1, 1]) {\n        y_pos = side * (desk_depth/2 - 15);\n        translate([0, y_pos, desk_height/2 - 25])\n            cube([desk_width - 60, 4, 4], center=true);\n    }\n}\n\n// Modesty panel (privacy panel at back)\nmodule modesty_panel() {\n    translate([0, -desk_depth/2 + 2, desk_height/2 - 20])\n        cube([desk_width - 64, 2, desk_height - 24], center=true);\n}\n\n// Cable management grommet (2 holes in top)\nmodule grommets() {\n    for(x = [-desk_width/4, desk_width/4]) {\n        translate([x, 0, desk_height - 1])\n            cylinder(h=3, r=5, $fn=20);\n    }\n}\n\n// Main assembly\nunion() {\n    // All parts in metallic gray\n    color(\"gray\") {\n        desk_top();\n        frame();\n    }\n    \n    // Pedestals in slightly darker gray\n    color(\"darkgray\") {\n        pedestal(-1);  // Left pedestal\n        pedestal(1);   // Right pedestal\n        modesty_panel();\n    }\n    \n    // Cable grommets (subtracted from top)\n    difference() {\n        translate([0, 0, 0])\n            cube([0.1, 0.1, 0.1], center=true);  // Dummy\n        grommets();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "barge",
    "openscad_code": "// Barge furniture piece - a small wooden barge-style shelf unit\n// Overall dimensions: 120mm L x 40mm W x 60mm H\n\n$fn = 32;\n\n// Main hull body\nmodule hull_body() {\n    difference() {\n        // Main hull shape - tapered box\n        hull() {\n            translate([0, 0, 5]) cube([110, 35, 10], center=true);\n            translate([0, 0, 25]) cube([90, 30, 10], center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, 10]) cube([104, 29, 20], center=true);\n    }\n}\n\n// Deck planking\nmodule deck_planking() {\n    for(i = [-50:10:50]) {\n        translate([i, 0, 30]) \n            cube([8, 32, 2], center=true);\n    }\n}\n\n// Structural ribs inside hull\nmodule internal_ribs() {\n    for(pos = [-40:20:40]) {\n        translate([pos, 0, 15]) \n            cube([2, 28, 20], center=true);\n    }\n}\n\n// Front bulkhead with storage compartments\nmodule front_bulkhead() {\n    difference() {\n        // Main bulkhead\n        translate([-55, 0, 45]) \n            cube([4, 30, 30], center=true);\n        \n        // Storage compartments\n        for(y = [-10:10:10]) {\n            translate([-55, y, 50]) \n                cube([5, 8, 8], center=true);\n        }\n    }\n}\n\n// Rear railing posts\nmodule railing_posts() {\n    for(x = [30:10:50]) {\n        translate([x, -15, 35]) \n            cylinder(h=15, d=3);\n        translate([x, 15, 35]) \n            cylinder(h=15, d=3);\n    }\n}\n\n// Railing rails\nmodule railing_rails() {\n    // Bottom rail\n    translate([40, 0, 42]) \n        cube([25, 32, 2], center=true);\n    \n    // Top rail\n    translate([40, 0, 48]) \n        cube([25, 32, 2], center=true);\n}\n\n// Support brackets under deck\nmodule support_brackets() {\n    for(x = [-30:30:30]) {\n        translate([x, -12, 20]) \n            cube([2, 2, 10], center=true);\n        translate([x, 12, 20]) \n            cube([2, 2, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    hull_body();\n    \n    // Deck details\n    deck_planking();\n    \n    // Internal structure\n    internal_ribs();\n    \n    // Front storage\n    front_bulkhead();\n    \n    // Railing system\n    railing_posts();\n    railing_rails();\n    \n    // Support brackets\n    support_brackets();\n}",
    "renders": true
  },
  {
    "natural_object": "tugboat",
    "openscad_code": "// Tugboat Bookshelf\n// Medium complexity realistic style furniture piece\n// Dimensions: 120mm x 60mm x 100mm\n\n// Main hull module\nmodule hull() {\n    // Base hull shape\n    difference() {\n        // Main hull body\n        hull() {\n            translate([-50, -25, 0]) cube([100, 50, 40]);\n            translate([-45, -20, 40]) cube([90, 40, 20]);\n            translate([-40, -15, 60]) cube([80, 30, 20]);\n        }\n        \n        // Hull tapering\n        translate([-48, -27, 20]) cube([96, 54, 60]);\n        translate([-43, -22, 40]) cube([86, 44, 40]);\n    }\n}\n\n// Superstructure (bridge)\nmodule bridge() {\n    // Bridge base\n    translate([-20, -18, 80]) cube([40, 36, 15], center=false);\n    \n    // Bridge roof\n    translate([-22, -20, 95]) cube([44, 40, 5], center=false);\n    \n    // Windows\n    for (i = [-15:10:15]) {\n        translate([i, -15, 85]) cube([6, 2, 8]);\n    }\n}\n\n// Smokestack\nmodule smokestack() {\n    // Main stack\n    cylinder(h=20, r=6, $fn=16);\n    \n    // Stack top\n    translate([0, 0, 20]) cylinder(h=3, r=8, $fn=16);\n    \n    // Support bands\n    translate([0, 0, 7]) cylinder(h=2, r=7, $fn=16);\n    translate([0, 0, 14]) cylinder(h=2, r=7, $fn=16);\n}\n\n// Bollards\nmodule bollard() {\n    // Base\n    cylinder(h=3, r=4, $fn=12);\n    \n    // Post\n    translate([0, 0, 3]) cylinder(h=8, r=3, $fn=12);\n    \n    // Top cap\n    translate([0, 0, 11]) cylinder(h=2, r=4, $fn=12);\n}\n\n// Deck features\nmodule deck_features() {\n    // Main deck\n    translate([-45, -25, 80]) cube([90, 50, 2]);\n    \n    // Forecastle deck\n    translate([35, -20, 85]) cube([15, 40, 3]);\n    \n    // Hatch covers\n    for (x = [-30:20:10]) {\n        translate([x, -10, 82]) cube([15, 20, 1]);\n    }\n}\n\n// Bookshelf compartments\nmodule bookshelf_compartments() {\n    // Main storage area - hollowed hull\n    difference() {\n        hull();\n        \n        // Interior cavity\n        translate([-45, -20, 5]) cube([90, 40, 70]);\n    }\n    \n    // Shelf supports\n    for (z = [25:20:65]) {\n        translate([-45, -23, z]) cube([90, 46, 2]);\n    }\n    \n    // Back panel for stability\n    translate([-45, -26, 0]) cube([90, 2, 80]);\n}\n\n// Rudder\nmodule rudder() {\n    // Rudder post\n    translate([-48, 0, 20]) rotate([0, 90, 0]) cylinder(h=10, r=2, $fn=8);\n    \n    // Rudder blade\n    translate([-50, -5, 15]) cube([5, 10, 20]);\n}\n\n// Anchor\nmodule anchor() {\n    // Anchor shank\n    translate([45, 0, 82]) cube([3, 3, 8]);\n    \n    // Anchor arms\n    translate([45, -5, 85]) rotate([0, 0, 45]) cube([2, 15, 2]);\n    translate([45, 5, 85]) rotate([0, 0, -45]) cube([2, 15, 2]);\n}\n\n// Main assembly\nunion() {\n    // Bookshelf structure\n    bookshelf_compartments();\n    \n    // Deck and superstructure\n    deck_features();\n    bridge();\n    \n    // Smokestack placement\n    translate([0, 0, 95]) smokestack();\n    \n    // Bollards\n    for (pos = [[-40, -20], [-40, 20], [40, -20], [40, 20]]) {\n        translate([pos[0], pos[1], 82]) bollard();\n    }\n    \n    // Rudder\n    rudder();\n    \n    // Anchor\n    anchor();\n    \n    // Additional details - railing posts\n    for (x = [-35:10:35]) {\n        translate([x, -24, 82]) cylinder(h=5, r=1, $fn=8);\n        translate([x, 24, 82]) cylinder(h=5, r=1, $fn=8);\n    }\n    \n    // Railing rails\n    translate([0, -24, 86.5]) cube([70, 1, 1], center=true);\n    translate([0, 24, 86.5]) cube([70, 1, 1], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "airship",
    "openscad_code": "// Airship Bookshelf - Realistic Style\n// Overall dimensions: ~120mm long x 50mm wide x 70mm tall\n\n// Main body parameters\nbody_length = 100;\nbody_diameter = 45;\nwall_thickness = 2;\n\n// Gondola shelf parameters\nshelf_width = 40;\nshelf_depth = 25;\nshelf_thickness = 3;\n\n// Propeller parameters\nprop_diameter = 20;\nprop_blades = 3;\n\n// Fins\nfin_height = 15;\nfin_length = 30;\n\n// Create the main airship hull (ellipsoid)\nmodule hull() {\n    difference() {\n        // Main ellipsoid body\n        scale([1, 0.6, 0.4])\n            sphere(d=body_diameter);\n        \n        // Hollow out interior\n        translate([0, 0, 2])\n            scale([1, 0.55, 0.35])\n                sphere(d=body_diameter - wall_thickness*2);\n    }\n}\n\n// Create gondola shelf structure\nmodule gondola() {\n    // Main shelf box\n    translate([0, 0, -body_diameter/2 - shelf_thickness - 5])\n    difference() {\n        cube([shelf_width, shelf_depth, shelf_thickness], center=true);\n        \n        // Hollow interior for books\n        cube([shelf_width - wall_thickness*2, shelf_depth - wall_thickness, shelf_thickness - wall_thickness], center=true);\n    }\n    \n    // Support cables (simplified as cylinders)\n    for(x = [-shelf_width/2 + 5, shelf_width/2 - 5])\n        for(y = [-shelf_depth/2 + 5, shelf_depth/2 - 5])\n            translate([x, y, -body_diameter/2 - shelf_thickness/2 - 2.5])\n                cylinder(h=5, r=1, center=true);\n}\n\n// Create tail fins\nmodule tail_fins() {\n    // Vertical stabilizer\n    translate([-body_length/2 + 5, 0, body_diameter/4])\n        rotate([0, 10, 0])\n            difference() {\n                cube([fin_length, wall_thickness*2, fin_height], center=true);\n                cube([fin_length - 2, wall_thickness*2, fin_height - 2], center=true);\n            }\n    \n    // Horizontal stabilizers (top and bottom)\n    for(z = [body_diameter/4, -body_diameter/4])\n        translate([-body_length/2 + 5, 0, z])\n            rotate([10, 0, 0])\n                difference() {\n                    cube([fin_length, fin_height, wall_thickness*2], center=true);\n                    cube([fin_length - 2, fin_height - 2, wall_thickness*2], center=true);\n                }\n}\n\n// Create propeller assembly\nmodule propeller() {\n    translate([body_length/2 - 5, 0, 0])\n        rotate([90, 0, 0])\n            union() {\n                // Hub\n                cylinder(h=4, r=3, center=true);\n                \n                // Propeller blades\n                for(i = [0:prop_blades-1]) {\n                    rotate([0, 0, i*360/prop_blades])\n                        translate([0, prop_diameter/4, 0])\n                            scale([1, 3, 0.5])\n                                sphere(d=5);\n                }\n            }\n}\n\n// Create mooring ring (top mounting point)\nmodule mooring_ring() {\n    translate([0, 0, body_diameter/2 + 3])\n        difference() {\n            cylinder(h=wall_thickness*2, r=5, center=true);\n            cylinder(h=wall_thickness*2 + 1, r=3, center=true);\n        }\n}\n\n// Assemble the complete airship bookshelf\nunion() {\n    // Main hull\n    hull();\n    \n    // Gondola shelf\n    gondola();\n    \n    // Tail fins\n    tail_fins();\n    \n    // Propeller\n    propeller();\n    \n    // Mooring ring for hanging\n    mooring_ring();\n}",
    "renders": true
  },
  {
    "natural_object": "zeppelin",
    "openscad_code": "// Zeppelin Bookshelf - A wall-mounted bookshelf shaped like a classic airship\n// Size: 150mm long, 60mm tall, 40mm deep - suitable for small books or decor\n\nmodule zeppelin_bookshelf() {\n    hull_thickness = 2;\n    shelf_depth = 40;\n    \n    // Main zeppelin envelope (body)\n    difference() {\n        // Outer envelope\n        scale([1, 0.6, 0.4])\n            sphere(d=150, $fn=100);\n        \n        // Hollow interior\n        translate([0, 0, -hull_thickness])\n            scale([1 - (hull_thickness*2/150), 0.6 - (hull_thickness*2/90), 0.4 - (hull_thickness*2/60)])\n                sphere(d=150 - hull_thickness*2, $fn=100);\n        \n        // Flat back for wall mounting\n        translate([-75 - hull_thickness, -45, -30])\n            cube([hull_thickness, 90, 60]);\n    }\n    \n    // Gondola (passenger cabin) - serves as bottom shelf\n    translate([0, -25, -25]) {\n        difference() {\n            // Main gondola body\n            cube([80, 15, 20], center=true);\n            \n            // Hollow interior\n            translate([0, 0, hull_thickness])\n                cube([80 - hull_thickness*2, 15 - hull_thickness*2, 20 - hull_thickness*2], center=true);\n        }\n    }\n    \n    // Vertical support fins (structural)\n    for (i = [-1, 1]) {\n        translate([i * 50, 0, 0]) {\n            rotate([0, 90, 0])\n                linear_extrude(height=hull_thickness)\n                    polygon(points=[\n                        [0, -20], [10, 0], [0, 20], [-5, 0]\n                    ]);\n        }\n    }\n    \n    // Horizontal stabilizers (shelves)\n    module stabilizer_shelf(offset, width) {\n        translate([offset, 0, 0]) {\n            rotate([0, 90, 0])\n                linear_extrude(height=hull_thickness)\n                    polygon(points=[\n                        [-width/2, -15], [width/2, -15], [width/2-5, 15], [-width/2+5, 15]\n                    ]);\n        }\n    }\n    \n    stabilizer_shelf(45, 25);\n    stabilizer_shelf(-45, 25);\n    \n    // Wall mounting brackets\n    translate([-75, 0, 0]) {\n        for (i = [-1, 0, 1]) {\n            translate([0, i * 20, 0]) {\n                difference() {\n                    // Bracket body\n                    rotate([0, 90, 0])\n                        cylinder(h=10, d=8, center=true);\n                    \n                    // Screw hole\n                    rotate([0, 90, 0])\n                        cylinder(h=11, d=4, center=true);\n                }\n            }\n        }\n    }\n    \n    // Decorative rivets along the envelope\n    module rivet_ring(z_pos, count) {\n        for (i = [0:count-1]) {\n            angle = i * 360/count;\n            translate([\n                75 * cos(angle),\n                45 * 0.6 * sin(angle),\n                z_pos\n            ]) {\n                sphere(d=3, $fn=8);\n            }\n        }\n    }\n    \n    // Add rivets at different z positions\n    rivet_ring(20, 8);\n    rivet_ring(0, 12);\n    rivet_ring(-20, 8);\n}\n\n// Generate the complete bookshelf\nzeppelin_bookshelf();",
    "renders": true
  },
  {
    "natural_object": "jet",
    "openscad_code": "// Jet-inspired lounge chair - realistic style, medium complexity\n// Overall dimensions: 120mm L x 80mm W x 50mm H\n\nmodule chair_base() {\n    // Main seat platform - jet fuselage shape\n    difference() {\n        // Main body\n        hull() {\n            // Front tapered section\n            translate([0, 0, 8]) scale([1, 0.7, 1]) cylinder(h=4, d1=20, d2=30, $fn=32);\n            // Rear widened section\n            translate([-40, 0, 8]) scale([1.2, 1, 1]) cylinder(h=4, d1=40, d2=45, $fn=32);\n        }\n        \n        // Cockpit cutout\n        translate([-20, 0, 6]) cube([30, 35, 12], center=true);\n        \n        // Air intakes\n        for(i = [-1, 1]) {\n            translate([-5, i*20, 8]) rotate([0, 90, 0]) \n                cylinder(h=15, d1=8, d2=12, $fn=16);\n        }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-25, 20, 8]) rotate([0, 0, -15]) {\n        difference() {\n            // Wing shape\n            scale([1, 0.3, 1]) cube([50, 50, 4]);\n            // Wing tip curve\n            translate([25, 25, -1]) sphere(r=8, $fn=16);\n            // Structural cutouts\n            for(x = [-20:15:20]) {\n                translate([x, 10, 1]) cube([8, 20, 3], center=true);\n            }\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0]) translate([-25, -20, 8]) rotate([0, 0, 15]) {\n        difference() {\n            scale([1, 0.3, 1]) cube([50, 50, 4]);\n            translate([25, -25, -1]) sphere(r=8, $fn=16);\n            for(x = [-20:15:20]) {\n                translate([x, -10, 1]) cube([8, 20, 3], center=true);\n            }\n        }\n    }\n}\n\nmodule tail_fin() {\n    // Vertical stabilizer\n    translate([-45, 0, 15]) rotate([0, 5, 0]) {\n        difference() {\n            // Main fin\n            hull() {\n                cube([5, 4, 25]);\n                translate([0, 0, 20]) cube([2, 2, 10]);\n            }\n            // Rudders\n            for(i = [-1, 1]) {\n                translate([2.5, i*2, 10]) rotate([0, 0, i*20]) \n                    cube([2, 15, 8]);\n            }\n        }\n    }\n}\n\nmodule seating_area() {\n    // Cushioned seat\n    difference() {\n        // Main cushion\n        translate([-15, 0, 12]) scale([1.2, 1, 0.4]) \n            cylinder(h=8, d=35, $fn=32);\n        \n        // Seat bolster details\n        for(i = [-1, 1]) {\n            translate([-15, i*12, 12]) cube([30, 4, 6], center=true);\n        }\n    }\n    \n    // Backrest\n    translate([-30, 0, 20]) rotate([15, 0, 0]) {\n        difference() {\n            scale([1.1, 1, 0.3]) cylinder(h=15, d=30, $fn=32);\n            translate([0, 0, -2]) cube([40, 35, 4], center=true);\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Front wheel\n    translate([15, 0, 2]) {\n        cylinder(h=6, d=8, $fn=16);\n        translate([0, 0, 2]) sphere(r=4, $fn=16);\n    }\n    \n    // Rear wheels\n    for(y = [-1, 1]) {\n        translate([-35, y*25, 2]) {\n            cylinder(h=6, d=10, $fn=16);\n            translate([0, 0, 2]) sphere(r=5, $fn=16);\n        }\n    }\n}\n\nmodule engine_details() {\n    // Engine nacelles\n    translate([-40, 0, 4]) rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=20, d=12, $fn=16);\n            translate([10, 0, 0]) cylinder(h=20, d=8, $fn=16);\n        }\n    }\n    \n    // Exhaust ports\n    translate([-50, 0, 4]) rotate([0, 90, 0]) {\n        cylinder(h=5, d=6, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    chair_base();\n    wings();\n    tail_fin();\n    seating_area();\n    landing_gear();\n    engine_details();\n}",
    "renders": true
  },
  {
    "natural_object": "glider",
    "openscad_code": "// Glider Chair - Realistic Medium Complexity\n// Dimensions: 100mm x 90mm x 100mm (W x D x H)\n\n$fn = 32;\n\n// Parameters\nseat_width = 80;\nseat_depth = 60;\nback_height = 50;\narmrest_height = 20;\nbase_length = 100;\nglider_radius = 4;\n\nmodule base_frame() {\n    // Front base rail\n    translate([-seat_width/2-5, 0, 5])\n        cube([seat_width+10, 10, 10]);\n    \n    // Rear base rail\n    translate([-seat_width/2-5, -base_length+10, 5])\n        cube([seat_width+10, 10, 10]);\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([side * (seat_width/2+5), -base_length/2, 5])\n            cube([10, base_length, 10]);\n    }\n}\n\nmodule glider_rockers() {\n    // Rocking rails (curved base)\n    for(side = [-1, 1]) {\n        hull() {\n            translate([side * (seat_width/2-10), -10, 0])\n                sphere(r = glider_radius);\n            translate([side * (seat_width/2-10), -base_length+10, 0])\n                sphere(r = glider_radius);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Seat base\n    translate([0, -seat_depth/2+5, 20])\n        cube([seat_width-20, seat_depth-10, 8], center = true);\n    \n    // Seat cushion top (slightly curved)\n    for(i = [0:4]) {\n        translate([0, -seat_depth/2+5 + i*10, 28 + sin(i*45)*2])\n            cube([seat_width-22, 8, 2], center = true);\n    }\n}\n\nmodule backrest() {\n    // Back frame posts\n    for(side = [-1, 1]) {\n        translate([side * (seat_width/2-15), -seat_depth/2+5, 40])\n            cylinder(h = back_height, r = 3);\n    }\n    \n    // Back slats\n    for(i = [0:3]) {\n        translate([0, -seat_depth/2+5, 45 + i*12])\n            cube([seat_width-30, 4, 2], center = true);\n    }\n    \n    // Back cushion\n    translate([0, -seat_depth/2+5, 60])\n        cube([seat_width-30, 6, back_height-15], center = true);\n}\n\nmodule armrests() {\n    for(side = [-1, 1]) {\n        // Armrest supports\n        translate([side * (seat_width/2-10), -seat_depth/2+15, 30])\n            cylinder(h = armrest_height, r = 3);\n        \n        // Armrest top\n        translate([side * (seat_width/2-10), -seat_depth/2+15, 30+armrest_height])\n            cube([8, 25, 4], center = true);\n    }\n}\n\nmodule support_structure() {\n    // Front cross support\n    translate([0, -seat_depth/2+10, 25])\n        cube([seat_width-10, 4, 6], center = true);\n    \n    // Rear cross support\n    translate([0, -seat_depth/2-20, 25])\n        cube([seat_width-10, 4, 6], center = true);\n    \n    // Diagonal supports\n    for(side = [-1, 1]) {\n        hull() {\n            translate([side * (seat_width/2-15), -seat_depth/2+5, 20])\n                sphere(r = 2);\n            translate([side * (seat_width/2-15), -seat_depth/2+5, 40])\n                sphere(r = 2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    color(\"DarkGoldenrod\") {\n        base_frame();\n        glider_rockers();\n    }\n    \n    // Seating area\n    color(\"Tan\") {\n        seat_cushion();\n        backrest();\n    }\n    \n    // Arms and supports\n    color(\"SaddleBrown\") {\n        armrests();\n        support_structure();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "seaplane",
    "openscad_code": "// Seaplane Bookshelf - Medium complexity realistic style\n// Overall dimensions: 120mm wingspan, 60mm height, 90mm length\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nfuselage_length = 80;\nfuselage_width = 25;\nfuselage_height = 20;\nwing_span = 120;\nwing_thickness = 4;\nfloat_width = 15;\nfloat_height = 12;\n\nmodule seaplane_bookshelf() {\n    union() {\n        // Fuselage - main bookshelf body\n        translate([0, 0, float_height + 5]) {\n            difference() {\n                // Main fuselage\n                cube([fuselage_length, fuselage_width, fuselage_height], center = true);\n                \n                // Shelf cavities (3 levels)\n                for(i = [0:2]) {\n                    translate([-fuselage_length/2 + 15 + i*25, 0, -fuselage_height/2 + 2]) {\n                        cube([20, fuselage_width - 4, fuselage_height - 4], center = true);\n                    }\n                }\n            }\n        }\n        \n        // Wings - side shelves\n        module wing() {\n            difference() {\n                // Main wing shape\n                translate([0, 0, 0]) {\n                    scale([1, 1, 0.3]) sphere(r = wing_span/2);\n                    cube([wing_span, wing_thickness, wing_span/4], center = true);\n                }\n                \n                // Cut to make flat shelf surface\n                translate([0, 0, -wing_span/8]) {\n                    cube([wing_span + 2, wing_thickness + 2, wing_span/4], center = true);\n                }\n            }\n        }\n        \n        // Left wing\n        translate([-fuselage_length/2 + 10, 0, float_height + 15]) {\n            rotate([0, 0, 90]) wing();\n        }\n        \n        // Right wing\n        translate([fuselage_length/2 - 10, 0, float_height + 15]) {\n            rotate([0, 0, 90]) wing();\n        }\n        \n        // Floats - base supports\n        module float() {\n            hull() {\n                // Front float section\n                translate([0, 0, 0]) {\n                    scale([1, 0.7, 1]) sphere(r = float_width);\n                }\n                \n                // Rear float section\n                translate([float_width*1.5, 0, 0]) {\n                    scale([1, 0.7, 0.8]) sphere(r = float_width);\n                }\n                \n                // Connecting body\n                cube([float_width*2.5, float_width*0.7, float_height], center = true);\n            }\n        }\n        \n        // Front float\n        translate([-20, 0, 0]) {\n            float();\n        }\n        \n        // Rear float\n        translate([20, 0, 0]) {\n            float();\n        }\n        \n        // Tail fin - rear bookshelf support\n        translate([fuselage_length/2 - 5, 0, float_height + 5 + fuselage_height/2]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    // Main tail\n                    cube([15, 25, 3], center = true);\n                    \n                    // Cutout for style\n                    translate([0, 5, 0]) {\n                        cube([10, 10, 4], center = true);\n                    }\n                }\n            }\n        }\n        \n        // Horizontal stabilizer - small shelf\n        translate([fuselage_length/2, 0, float_height + 15]) {\n            rotate([90, 0, 0]) {\n                cube([30, wing_thickness, 15], center = true);\n            }\n        }\n        \n        // Propeller support - front bookend\n        translate([-fuselage_length/2 - 15, 0, float_height + 5]) {\n            cylinder(h = 10, r = 5, center = false);\n            translate([0, 0, 10]) {\n                rotate([0, 0, 45]) {\n                    for(i = [0:3]) {\n                        rotate([0, 0, i*90]) {\n                            cube([20, 1.5, 3], center = true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Cockpit window - decorative element\n        translate([-fuselage_length/2 + 20, 0, float_height + 5 + fuselage_height/2]) {\n            sphere(r = 8);\n        }\n        \n        // Wing struts - structural supports\n        module strut() {\n            cylinder(h = 15, r = 1.5, center = false);\n        }\n        \n        // Left wing struts\n        translate([-fuselage_length/2 + 10, -wing_span/2 + 20, float_height + 10]) {\n            strut();\n        }\n        translate([-fuselage_length/2 + 10, wing_span/2 - 20, float_height + 10]) {\n            strut();\n        }\n        \n        // Right wing struts\n        translate([fuselage_length/2 - 10, -wing_span/2 + 20, float_height + 10]) {\n            strut();\n        }\n        translate([fuselage_length/2 - 10, wing_span/2 - 20, float_height + 10]) {\n            strut();\n        }\n    }\n}\n\n// Generate the model\nseaplane_bookshelf();",
    "renders": true
  },
  {
    "natural_object": "hovercraft",
    "openscad_code": "// Hovercraft Furniture - Realistic Style, Medium Complexity\n// OpenSCAD code for a 3D printable hovercraft furniture piece\n\nmodule base_skirt() {\n    // Main hovercraft base with inflatable skirt\n    difference() {\n        // Outer skirt\n        cylinder(h=15, d1=90, d2=85, $fn=64);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=15, d1=80, d2=75, $fn=64);\n    }\n    \n    // Skirt bottom detail\n    translate([0, 0, -1])\n        cylinder(h=3, d=92, $fn=64);\n}\n\nmodule hull_structure() {\n    // Main hull body\n    difference() {\n        hull() {\n            // Front rounded section\n            translate([0, 30, 15])\n                sphere(d=40, $fn=32);\n            // Rear section\n            translate([0, -25, 15])\n                sphere(d=50, $fn=32);\n            // Middle connector\n            translate([0, 0, 15])\n                sphere(d=45, $fn=32);\n        }\n        \n        // Hollow interior\n        scale([0.8, 0.8, 0.7])\n            translate([0, 0, 15])\n                sphere(d=60, $fn=32);\n    }\n}\n\nmodule fan_assembly() {\n    // Rear thrust fan housing\n    translate([0, -35, 25]) {\n        // Fan shroud\n        difference() {\n            cylinder(h=20, d=35, $fn=32);\n            translate([0, 0, 2])\n                cylinder(h=18, d=30, $fn=32);\n        }\n        \n        // Fan blades (simplified)\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n                translate([7.5, 0, 10])\n                    cube([15, 2, 5], center=true);\n        }\n        \n        // Fan motor housing\n        translate([0, 0, 10])\n            cylinder(h=10, d=15, $fn=24);\n    }\n}\n\nmodule furniture_seat() {\n    // Seating area integrated into hull\n    translate([0, 10, 30]) {\n        // Seat base\n        difference() {\n            cube([40, 35, 8], center=true);\n            translate([0, 0, 2])\n                cube([36, 31, 8], center=true);\n        }\n        \n        // Seat back\n        translate([0, 15, 5]) {\n            rotate([15, 0, 0])\n                difference() {\n                    cube([35, 25, 6], center=true);\n                    translate([0, 0, 2])\n                        cube([31, 21, 6], center=true);\n                }\n        }\n        \n        // Cushion details\n        translate([0, 0, 4])\n            for(x=[-12, 0, 12]) {\n                for(y=[-10, 0, 10]) {\n                    translate([x, y, 0])\n                        cube([8, 8, 1], center=true);\n                }\n            }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-25, 0, 35]) {\n        cube([8, 25, 15]);\n        // Support structure\n        translate([0, 8, -8])\n            cube([8, 8, 8]);\n    }\n    \n    // Right armrest\n    translate([25, 0, 35]) {\n        cube([8, 25, 15]);\n        // Support structure\n        translate([0, 8, -8])\n            cube([8, 8, 8]);\n    }\n}\n\nmodule control_panel() {\n    // Dashboard/furniture control panel\n    translate([0, -5, 42]) {\n        // Panel base\n        cube([30, 15, 3], center=true);\n        \n        // Buttons and controls\n        for(i=[-10, -5, 0, 5, 10]) {\n            translate([i, 0, 2])\n                cylinder(h=2, d=3, $fn=16);\n        }\n        \n        // Display screen\n        translate([0, 5, 1.5])\n            cube([15, 5, 1], center=true);\n    }\n}\n\nmodule side_thrusters() {\n    // Side thrusters/furniture support feet\n    for(side=[-1, 1]) {\n        translate([side * 40, 20, 10]) {\n            cylinder(h=8, d=15, $fn=16);\n            // Thruster nozzle\n            translate([0, 0, -2])\n                cylinder(h=5, d1=15, d2=12, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    base_skirt();\n    hull_structure();\n    fan_assembly();\n    furniture_seat();\n    armrests();\n    control_panel();\n    side_thrusters();\n    \n    // Reinforcement beams (furniture structural elements)\n    translate([0, 0, 20]) {\n        // Cross beam\n        cube([70, 8, 4], center=true);\n        // Longitudinal beam\n        cube([8, 80, 4], center=true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "cruiser",
    "openscad_code": "// Cruiser Chair\n// A compact, 3D-printable cruiser-style lounge chair\n// Overall footprint ≈ 110 mm wide × 90 mm deep × 75 mm tall\n// Wall thickness ≈ 2 mm\n// No steep overhangs\n\n$fa = 1;\n$fs = 0.4;\n\n// Overall dimensions\nchair_w = 110;\nchair_d = 90;\nchair_h = 75;\n\n// Re-usable 2 mm wall profile\nmodule wall_2mm(w, d, h) {\n    difference() {\n        cube([w, d, h], center = true);\n        translate([0, 0, 1])\n            cube([w - 4, d - 4, h], center = true);\n    }\n}\n\n// Seat pan\nmodule seat() {\n    hull() {\n        translate([-chair_w/2 + 10, -chair_d/2 + 5, 0])\n            cube([20, 10, 2]);\n        translate([ chair_w/2 - 30, -chair_d/2 + 5, 0])\n            cube([20, 10, 2]);\n    }\n}\n\n// Backrest with gentle cruiser curve\nmodule backrest() {\n    difference() {\n        hull() {\n            translate([-chair_w/2 + 5, chair_d/2 - 10, 0])\n                cube([10, 20, 2]);\n            translate([ chair_w/2 - 15, chair_d/2 - 10, 0])\n                cube([10, 20, 2]);\n            translate([-chair_w/2 + 5, chair_d/2 - 5, chair_h - 10])\n                cube([10, 10, 2]);\n            translate([ chair_w/2 - 15, chair_d/2 - 5, chair_h - 10])\n                cube([10, 10, 2]);\n        }\n        // Remove inner volume for 2 mm shell\n        translate([0, chair_d/2 - 20, chair_h/2 - 5])\n            cube([chair_w - 30, 25, chair_h - 8], center = true);\n    }\n}\n\n// Front legs (simple cylinders)\nmodule front_leg(x) {\n    translate([x, -chair_d/2 + 8, chair_h/2 - 30])\n        cylinder(h = chair_h - 10, d = 8, center = true);\n}\n\n// Rear legs (angled for cruiser look)\nmodule rear_leg(x) {\n    translate([x, chair_d/2 - 12, chair_h/2 - 30])\n        rotate([5, 0, 0])\n            cylinder(h = chair_h - 6, d = 8, center = true);\n}\n\n// Armrest\nmodule armrest() {\n    hull() {\n        translate([-chair_w/2 + 4, -chair_d/2 + 5, chair_h/2 + 5])\n            sphere(d = 6);\n        translate([-chair_w/2 + 4,  chair_d/2 - 15, chair_h - 5])\n            sphere(d = 6);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, 2])\n        seat();\n\n    // Backrest\n    backrest();\n\n    // Legs\n    front_leg(-chair_w/2 + 15);\n    front_leg( chair_w/2 - 15);\n    rear_leg(-chair_w/2 + 15);\n    rear_leg( chair_w/2 - 15);\n\n    // Armrests\n    armrest();\n    mirror([1, 0, 0])\n        armrest();\n}",
    "renders": true
  },
  {
    "natural_object": "destroyer",
    "openscad_code": "// Destroyer-style bookshelf (lean, angular, naval-inspired)\n// Overall footprint ~110 mm x 45 mm x 170 mm (L x D x H)\n\n// Parameters\nwall = 2;            // 3D-printable wall thickness\nshelf_h = 30;        // vertical spacing per shelf\nposts = 4;           // number of vertical posts\npost_r = 5;          // radius of cylindrical posts\ndeck_d = 30;         // depth of each shelf deck\ndeck_w = 100;        // width of each shelf deck\nclear = 0.2;         // clearance for tight fits\n\nmodule post(h = 170) {\n    // Vertical destroyer-style “mast” post with slight taper\n    cylinder(h1 = h, r1 = post_r, h2 = h, r2 = post_r * 0.9, $fn = 16);\n}\n\nmodule shelf_plank(w = deck_w, d = deck_d, t = wall) {\n    // Thin, angular plank with chamfered edges\n    difference() {\n        cube([w, d, t], center = true);\n        translate([0, 0, t/2 + clear])\n            cube([w - wall*2, d - wall*2, t + clear*2], center = true);\n    }\n}\n\nmodule frame_assembly() {\n    // Assemble four corner posts\n    for(x = [0, 1])\n        for(y = [0, 1]) {\n            px = x * (deck_w - post_r*2) - (deck_w - post_r*2)/2;\n            py = y * (deck_d - post_r*2) - (deck_d - post_r*2)/2;\n            translate([px, py, 0])\n                post();\n        }\n}\n\nmodule deck_assembly(count = 5) {\n    // Horizontal shelves (“decks”) evenly spaced\n    for(i = [0:count-1]) {\n        z = i * shelf_h + wall;\n        translate([0, 0, z])\n            shelf_plank();\n    }\n}\n\nmodule gun_turret() {\n    // Stylized gun turret on top shelf (furniture accent)\n    rotate([90, 0, 0])\n        cylinder(h = 12, r1 = 8, r2 = 6, $fn = 20);\n}\n\nmodule railing() {\n    // Simple railing along back edge (structural + aesthetic)\n    linear_extrude(height = 6)\n        square([deck_w - wall*2, wall], center = true);\n}\n\n// Main model\nunion() {\n    frame_assembly();\n    deck_assembly(5);\n    \n    // Top turret detail\n    translate([0, 0, 5 * shelf_h + wall + 6])\n        gun_turret();\n        \n    // Rear railings on each deck\n    for(i = [0:4]) {\n        z = i * shelf_h + wall;\n        translate([0, deck_d/2 - wall/2, z + wall])\n            railing();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "frigate",
    "openscad_code": "// Frigate Furniture - Medium Complexity Realistic Style\n// Overall dimensions: ~120mm long x ~35mm wide x ~45mm high\n\n$fn = 32;\n\n// Main parameters\nhull_length = 110;\nhull_width = 30;\nhull_height = 20;\ndeck_height = 22;\nmast_height = 45;\ncabin_height = 12;\n\nmodule frigate() {\n    // Hull - main body\n    difference() {\n        hull_shape();\n        \n        // Remove bottom for flat printing surface\n        translate([0, 0, -1])\n            cube([hull_length + 10, hull_width + 10, 2], center = true);\n    }\n    \n    // Deck\n    translate([0, 0, hull_height])\n        deck();\n    \n    // Cabin structure\n    translate([-hull_length/4, 0, hull_height])\n        cabin();\n    \n    // Masts\n    translate([hull_length/3, 0, hull_height])\n        mast(mast_height);\n    translate([-hull_length/3, 0, hull_height])\n        mast(mast_height * 0.8);\n    \n    // Cannons along sides\n    for(i = [-1:1]) {\n        translate([i * 30, hull_width/2 + 3, hull_height - 5])\n            rotate([0, 90, 0])\n                cannon();\n        translate([i * 30, -hull_width/2 - 3, hull_height - 5])\n            rotate([0, -90, 0])\n                cannon();\n    }\n    \n    // Anchor\n    translate([hull_length/2 - 5, 0, hull_height - 3])\n        anchor();\n}\n\nmodule hull_shape() {\n    // Main hull with curved bottom\n    hull() {\n        // Bow\n        translate([hull_length/2 - 5, 0, hull_height/2])\n            sphere([5, hull_width/2 - 2, hull_height/2]);\n        \n        // Stern\n        translate([-hull_length/2 + 5, 0, hull_height/2])\n            sphere([5, hull_width/2 - 2, hull_height/2]);\n        \n        // Mid section\n        translate([0, 0, hull_height/2])\n            cube([hull_length - 20, hull_width - 4, hull_height], center = true);\n    }\n}\n\nmodule deck() {\n    // Main deck with planking texture effect\n    difference() {\n        // Base deck\n        translate([0, 0, 1])\n            cube([hull_length - 10, hull_width - 4, 2], center = true);\n        \n        // Plank grooves (for printing texture)\n        for(i = [-hull_width/2 + 3 : 3 : hull_width/2 - 3]) {\n            translate([0, i, 0])\n                cube([hull_length - 12, 1, 4], center = true);\n        }\n    }\n}\n\nmodule cabin() {\n    // Captain's cabin structure\n    difference() {\n        union() {\n            // Cabin walls\n            translate([0, 0, cabin_height/2])\n                cube([hull_length/3, hull_width - 8, cabin_height], center = true);\n            \n            // Cabin roof\n            translate([0, 0, cabin_height + 1])\n                cube([hull_length/3 + 2, hull_width - 6, 2], center = true);\n            \n            // Windows\n            for(i = [-1:1]) {\n                translate([0, hull_width/2 - 6, i * 3 + 6])\n                    cube([hull_length/3 - 4, 2, 4], center = true);\n            }\n        }\n        \n        // Window openings\n        for(i = [-1:1]) {\n            translate([0, hull_width/2 - 5, i * 3 + 6])\n                cube([hull_length/3 - 2, 3, 4], center = true);\n        }\n    }\n}\n\nmodule mast(height) {\n    // Mast with cross spars\n    difference() {\n        union() {\n            // Main mast pole\n            cylinder(h = height, r1 = 1.5, r2 = 1);\n            \n            // Cross spars\n            translate([0, 0, height * 0.6])\n                rotate([90, 0, 0])\n                    cylinder(h = hull_width * 1.5, r = 0.8);\n            translate([0, 0, height * 0.4])\n                rotate([90, 0, 0])\n                    cylinder(h = hull_width * 1.2, r = 0.6);\n        }\n        \n        // Remove base for clean connection\n        translate([0, 0, -1])\n            cylinder(h = 2, r = 2);\n    }\n}\n\nmodule cannon() {\n    // Simple cannon design\n    union() {\n        // Barrel\n        cylinder(h = 8, r1 = 1.5, r2 = 1.2);\n        \n        // Base\n        translate([0, 0, -2])\n            cylinder(h = 2, r = 2.5);\n        \n        // Wheels\n        for(side = [-1:2:1]) {\n            translate([side * 2.5, 0, -1])\n                rotate([0, 90, 0])\n                    cylinder(h = 1, r = 1.5);\n        }\n    }\n}\n\nmodule anchor() {\n    // Anchor with furniture-style proportions\n    union() {\n        // Main shank\n        cylinder(h = 6, r = 0.8);\n        \n        // Arms\n        for(side = [-1:2:1]) {\n            translate([0, side * 2, -2])\n                rotate([0, 0, side * 30])\n                    cube([4, 1.5, 1], center = true);\n        }\n        \n        // Stock\n        translate([0, 0, 3])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = 0.6);\n    }\n}\n\n// Generate the frigate\nfrigate();",
    "renders": true
  },
  {
    "natural_object": "aircraftcarrier",
    "openscad_code": "// Aircraft Carrier inspired bookshelf / display unit\n// Realistic style, medium complexity\n// Overall dimensions: 150mm x 40mm x 70mm (L x W x H)\n\n// Color definitions\ncolor(\"grey\") \n\n// Main hull module\nmodule hull() {\n    difference() {\n        // Main hull body\n        translate([0, 0, 15])\n            cube([140, 35, 30], center=true);\n        \n        // Flight deck cutout for books\n        translate([0, 0, 31])\n            cube([120, 30, 2], center=true);\n            \n        // Bow taper\n        translate([60, 0, 15])\n            rotate([0, 0, -20])\n                cube([40, 40, 35], center=true);\n    }\n}\n\n// Flight deck module\nmodule flight_deck() {\n    union() {\n        // Main deck\n        translate([0, 0, 32])\n            cube([120, 30, 2], center=true);\n            \n        // Angled deck extension\n        translate([-40, 10, 32])\n            rotate([0, 0, -10])\n                cube([40, 15, 2]);\n                \n        // Deck markings (raised strips)\n        for(i = [-50:25:50]) {\n            translate([i, 0, 34])\n                cube([20, 2, 0.5], center=true);\n        }\n    }\n}\n\n// Island superstructure\nmodule island() {\n    union() {\n        // Main island structure\n        translate([30, 0, 35])\n            cube([15, 12, 25], center=true);\n            \n        // Bridge level\n        translate([30, 0, 50])\n            cube([12, 10, 5], center=true);\n            \n        // Radar mast\n        translate([30, 0, 58])\n            cylinder(h=10, r1=2, r2=1.5);\n            \n        // Smoke stacks (4 small cylinders)\n        for(i = [-4:2:4]) {\n            translate([35, i, 35])\n                cylinder(h=8, r=1);\n        }\n    }\n}\n\n// Support legs for furniture stability\nmodule legs() {\n    for(pos = [[-60, -15], [60, -15], [-60, 15], [60, 15]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=15, r=3);\n    }\n}\n\n// Reinforcement ribs inside hull\nmodule ribs() {\n    for(i = [-50:20:50]) {\n        translate([i, 0, 20])\n            cube([2, 32, 25], center=true);\n    }\n}\n\n// Anti-slip strips on deck\nmodule anti_slip() {\n    for(x = [-50:10:50]) {\n        for(y = [-12:6:12]) {\n            translate([x, y, 33.5])\n                cube([8, 2, 0.5], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Furniture structure\n    legs();\n    hull();\n    ribs();\n    \n    // Deck details\n    flight_deck();\n    anti_slip();\n    \n    // Superstructure\n    island();\n}\n\n// Book support rails (functional furniture element)\ntranslate([0, 0, 15])\n    difference() {\n        cube([140, 2, 30], center=true);\n        translate([0, 0, 14])\n            cube([136, 3, 28], center=true);\n    }",
    "renders": true
  },
  {
    "natural_object": "subway",
    "openscad_code": "// NYC-style subway bench (realistic, medium complexity)\n// Overall size 120 mm x 40 mm x 40 mm\n// Wall thickness 2 mm for 3D printing\n\n$fn = 30;\n\nmodule bench_assembly() {\n    // Main seat plank\n    difference() {\n        cube([120, 40, 2], center = true); // seat surface\n        translate([0, 0, 1])\n            cube([116, 36, 2], center = true); // hollow underside\n    }\n\n    // Slats on top for realism\n    for (x = [-55, -45, -35, -25, -15, -5, 5, 15, 25, 35, 45, 55]) {\n        translate([x, 0, 1])\n            cube([8, 40, 1.5], center = true);\n    }\n\n    // Left leg frame\n    difference() {\n        translate([-55, 0, -19])\n            cube([4, 38, 38], center = true); // leg width 4 mm\n        translate([-55, 0, -18])\n            cube([2, 34, 36], center = true); // hollow\n    }\n\n    // Right leg frame\n    difference() {\n        translate([55, 0, -19])\n            cube([4, 38, 38], center = true);\n        translate([55, 0, -18])\n            cube([2, 34, 36], center = true);\n    }\n\n    // Cross brace between legs\n    difference() {\n        translate([0, 0, -28])\n            cube([110, 3, 2], center = true); // brace\n        translate([0, 0, -27])\n            cube([108, 1, 2], center = true); // hollow\n    }\n\n    // Back-rest posts\n    for (x = [-45, 45]) {\n        difference() {\n            translate([x, -20, 5])\n                cube([4, 2, 30], center = true); // post\n            translate([x, -20, 6])\n                cube([2, 2, 28], center = true); // hollow\n        }\n    }\n\n    // Back-rest plank\n    difference() {\n        translate([0, -20, 20])\n            cube([120, 2, 6], center = true); // back\n        translate([0, -20, 21])\n            cube([116, 2, 4], center = true); // hollow\n    }\n\n    // Bolt heads on seat slats (decorative)\n    for (x = [-55, -35, -15, 5, 25, 45]) {\n        translate([x, 18, 2.5])\n            cylinder(h = 1, r = 1.4);\n        translate([x, -18, 2.5])\n            cylinder(h = 1, r = 1.4);\n    }\n\n    // Anti-slip ridges on seat surface\n    for (y = [-18, -14, -10, -6, -2, 2, 6, 10, 14, 18]) {\n        translate([0, y, 2.2])\n            cube([120, 0.5, 0.2], center = true);\n    }\n}\n\n// Add small chamfers to edges\nmodule chamfer_edges() {\n    // Seat front edge\n    translate([0, 20, 1])\n        rotate([90, 0, 0])\n            cylinder(h = 120, r = 1, center = true);\n\n    // Seat back edge\n    translate([0, -20, 1])\n        rotate([90, 0, 0])\n            cylinder(h = 120, r = 1, center = true);\n}\n\nbench_assembly();",
    "renders": true
  },
  {
    "natural_object": "tram",
    "openscad_code": "// Realistic Tram Furniture - Medium Complexity\n// A detailed 3D printable tram model with furniture characteristics\n\n$fn = 32;\n\n// Overall dimensions (mm)\ntram_length = 120;\ntram_width = 45;\ntram_height = 35;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule tram_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main passenger compartment\n            translate([0, 0, tram_height/2]) \n                cube([tram_length, tram_width, tram_height], center=true);\n            \n            // Driver cabin (tapered front)\n            translate([tram_length/2 - 5, 0, tram_height/2 + 5]) \n                cube([20, tram_width, tram_height + 10], center=true);\n            \n            // Roof structure\n            translate([0, 0, tram_height + 5]) \n                cube([tram_length + 10, tram_width - 10, 10], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, tram_height/2]) \n            cube([tram_length - wall*2, tram_width - wall*2, tram_height - wall], center=true);\n    }\n}\n\n// Windows module\nmodule windows() {\n    for(i = [-2:1:2]) {\n        // Side windows\n        translate([i * 20, tram_width/2 - wall/2, tram_height/2 + 5]) \n            cube([15, wall, 12], center=true);\n        translate([i * 20, -tram_width/2 + wall/2, tram_height/2 + 5]) \n            cube([15, wall, 12], center=true);\n        \n        // Driver cabin windows\n        translate([tram_length/2 + 5, tram_width/4, tram_height/2 + 8]) \n            rotate([0, 0, 15])\n            cube([12, wall, 10], center=true);\n        translate([tram_length/2 + 5, -tram_width/4, tram_height/2 + 8]) \n            rotate([0, 0, -15])\n            cube([12, wall, 10], center=true);\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    for(i = [-1, 1]) {\n        // Wheel sets\n        translate([-30, i * (tram_width/2 + 5), 5]) \n            cylinder(h=8, r=5, center=true);\n        translate([30, i * (tram_width/2 + 5), 5]) \n            cylinder(h=8, r=5, center=true);\n        \n        // Bogie frames\n        translate([-30, i * (tram_width/2 + 5), 2]) \n            cube([20, 8, 4], center=true);\n        translate([30, i * (tram_width/2 + 5), 2]) \n            cube([20, 8, 4], center=true);\n    }\n}\n\n// Pantograph (roof power connector)\nmodule pantograph() {\n    translate([0, 0, tram_height + 10]) {\n        // Base\n        cylinder(h=3, r=4);\n        \n        // Arms\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 1.5])\n            cube([2, 12, 2], center=true);\n        }\n        \n        // Contact bar\n        translate([0, 0, 15])\n        cube([30, 2, 2], center=true);\n    }\n}\n\n// Interior furniture elements\nmodule interior_furniture() {\n    // Seats along walls\n    for(side = [-1, 1]) {\n        for(pos = [-40, -20, 0, 20, 40]) {\n            translate([pos, side * (tram_width/2 - 8), tram_height/2 - 8])\n            cube([15, 6, 8], center=true);\n            translate([pos, side * (tram_width/2 - 12), tram_height/2 - 12])\n            cube([15, 2, 4], center=true);\n        }\n    }\n    \n    // Central pole\n    translate([0, 0, tram_height/2])\n    cylinder(h=tram_height - 4, r=2, center=true);\n    \n    // Handrails\n    for(side = [-1, 1]) {\n        translate([0, side * (tram_width/2 - 4), tram_height/2 + 5])\n        cube([tram_length - 10, 2, 2], center=true);\n    }\n}\n\n// Connectors between trams\nmodule coupler() {\n    // Front coupler\n    translate([tram_length/2 + 10, 0, 5])\n    union() {\n        cube([8, 6, 4], center=true);\n        translate([4, 0, 0])\n        cylinder(h=6, r=2, center=true);\n    }\n    \n    // Rear coupler\n    translate([-tram_length/2 - 10, 0, 5])\n    mirror([1, 0, 0])\n    union() {\n        cube([8, 6, 4], center=true);\n        translate([4, 0, 0])\n        cylinder(h=6, r=2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    tram_body();\n    windows();\n    wheels();\n    pantograph();\n    coupler();\n    \n    // Interior visible through windows\n    color(\"lightgray\", 0.3)\n    interior_furniture();\n}\n\n// Base for stability\ntranslate([0, 0, -1])\ncube([tram_length + 20, tram_width + 10, 2], center=true);",
    "renders": true
  },
  {
    "natural_object": "trolley",
    "openscad_code": "// Realistic Trolley Furniture\n// Medium complexity OpenSCAD model for 3D printing\n\n// Overall dimensions\ntrolley_width = 80;\ntrolley_depth = 60;\ntrolley_height = 100;\nwall_thickness = 2;\n\n// Wheel dimensions\nwheel_radius = 10;\nwheel_width = 5;\naxle_diameter = 3;\n\n// Handle dimensions\nhandle_height = 40;\nhandle_diameter = 8;\n\n// Shelf spacing\nshelf_spacing = 30;\n\n// Main frame structure\nmodule frame() {\n    // Bottom frame rectangle\n    difference() {\n        cube([trolley_width, trolley_depth, wall_thickness], center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cube([trolley_width-4, trolley_depth-4, wall_thickness+2], center=true);\n    }\n    \n    // Side frames\n    for(side = [-1, 1]) {\n        translate([side * (trolley_width/2 - wall_thickness/2), 0, trolley_height/2 - wall_thickness/2])\n            cube([wall_thickness, trolley_depth, trolley_height], center=true);\n    }\n    \n    // Back frame\n    translate([0, -trolley_depth/2 + wall_thickness/2, trolley_height/2 - wall_thickness/2])\n        cube([trolley_width, wall_thickness, trolley_height], center=true);\n}\n\n// Shelves\nmodule shelves() {\n    for(i = [0:1:2]) {\n        translate([0, 0, i * shelf_spacing + wall_thickness])\n        difference() {\n            cube([trolley_width - 4, trolley_depth - 4, wall_thickness], center=true);\n            translate([0, 0, -1])\n                cube([trolley_width - 8, trolley_depth - 8, wall_thickness+2], center=true);\n        }\n    }\n}\n\n// Wheels assembly\nmodule wheels() {\n    for(side_x = [-1, 1]) {\n        for(side_y = [-1, 1]) {\n            translate([side_x * (trolley_width/2 - wheel_radius - 5), \n                      side_y * (trolley_depth/2 - wheel_radius - 5), \n                      -wheel_radius - wall_thickness/2]) {\n                \n                // Wheel\n                rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=wheel_width, r=wheel_radius, center=true, $fn=20);\n                    cylinder(h=wheel_width+2, r=axle_diameter/2, center=true, $fn=16);\n                }\n                \n                // Axle\n                rotate([90, 0, 0])\n                    cylinder(h=trolley_depth/2 - wheel_radius - 5, r=axle_diameter/2, center=false, $fn=16);\n            }\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([0, trolley_depth/2 - wall_thickness, trolley_height - handle_height/2])\n    union() {\n        // Vertical posts\n        for(side = [-1, 1]) {\n            translate([side * (trolley_width/2 - 20), 0, 0])\n                cylinder(h=handle_height, r=handle_diameter/2, center=true, $fn=12);\n        }\n        \n        // Horizontal grip\n        translate([0, 0, handle_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=trolley_width - 40, r=handle_diameter/2, center=true, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    frame();\n    shelves();\n    \n    // Wheels\n    wheels();\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "natural_object": "van",
    "openscad_code": "// Modular van furniture - medium complexity realistic style\n// A camper van furniture unit with storage, table, and seating\n\nwall_thickness = 2;\nmodule_thickness = 2.5;\n$fn = 32;\n\n// Overall dimensions\ntotal_width = 80;\ntotal_height = 60;\ntotal_depth = 120;\n\n// Main cabinet body\nmodule cabinet_body() {\n    difference() {\n        // Main shell\n        translate([wall_thickness/2, 0, wall_thickness/2])\n            cube([total_width - wall_thickness, total_depth - wall_thickness, total_height - wall_thickness]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([total_width - 3*wall_thickness, total_depth - 3*wall_thickness, total_height - 3*wall_thickness]);\n    }\n}\n\n// Drawer module\nmodule drawer(width, height, depth, handle_width) {\n    difference() {\n        // Drawer box\n        translate([0, 0, 0])\n            cube([width, depth, height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([width - 2*wall_thickness, depth - wall_thickness, height - 2*wall_thickness]);\n    }\n    \n    // Handle\n    translate([width/2 - handle_width/2, depth + 1, height/2 - 2])\n        cube([handle_width, 5, 4]);\n}\n\n// Door module\nmodule door(width, height, thickness) {\n    difference() {\n        // Door panel\n        cube([width, thickness, height]);\n        \n        // Recessed panel\n        translate([5, 0.5, 5])\n            cube([width - 10, thickness - 1, height - 10]);\n    }\n    \n    // Hinge cylinders\n    for(i = [0, 1]) {\n        translate([2, -2, height*(i + 1)/3])\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = 2);\n    }\n}\n\n// Table top\nmodule table_top() {\n    difference() {\n        // Main surface\n        translate([0, 0, 0])\n            cube([total_width - 4, 30, 4]);\n        \n        // Rounded edge cutout\n        translate([2, -1, -1])\n            cube([total_width - 8, 32, 2]);\n    }\n}\n\n// Support struts\nmodule support_strut(height) {\n    difference() {\n        cylinder(h = height, r = 4);\n        translate([-4, -4, 0])\n            cube([8, 8, height]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main cabinet\n    color(\"tan\")\n    cabinet_body();\n    \n    // Drawers (3 stacked)\n    for(i = [0:2]) {\n        translate([5, total_depth - 12, 5 + i*18])\n            drawer(70, 16, 10, 20);\n    }\n    \n    // Lower cabinet doors\n    translate([5, 0, 5 + 3*18 + 2])\n        door(34, total_height - 5 - 3*18 - 7, 2);\n    translate([41, 0, 5 + 3*18 + 2])\n        door(34, total_height - 5 - 3*18 - 7, 2);\n    \n    // Table surface (fold-down)\n    translate([2, 0, total_height + 2])\n    color(\"darkgoldenrod\")\n    table_top();\n    \n    // Support struts for table\n    translate([10, 25, total_height + 2])\n        support_strut(15);\n    translate([total_width - 10, 25, total_height + 2])\n        support_strut(15);\n    \n    // Back mounting bracket\n    color(\"gray\")\n    translate([-2, 10, 20])\n        cube([4, total_depth - 20, 20]);\n    \n    // Ventilation slots\n    for(i = [0:3]) {\n        translate([total_width - 6, 5 + i*25, total_height/2])\n            cube([4, 15, 2]);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "ambulance",
    "openscad_code": "// Ambulance stretcher furniture piece for emergency medical simulations\n// Dimensions: 120mm x 45mm x 35mm (scaled for 3D printing)\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main stretcher frame\nmodule stretcher_frame() {\n    // Bottom frame rails\n    difference() {\n        union() {\n            // Long side rails\n            translate([0, 0, 5]) cube([120, 45, 4], center=true);\n            // Cross supports\n            for(i = [-40, 0, 40]) {\n                translate([i, 0, 5]) cube([4, 45, 4], center=true);\n            }\n        }\n        // Hollow out center for weight reduction\n        translate([0, 0, 5]) cube([116, 41, 4.5], center=true);\n    }\n}\n\n// Stretcher mattress pad\nmodule mattress() {\n    difference() {\n        // Main pad body\n        translate([0, 0, 12]) cube([110, 38, 6], center=true);\n        // Rounded edges using sphere subtraction\n        for(x = [-52, 52]) {\n            for(y = [-17, 17]) {\n                translate([x, y, 12]) sphere(r=3);\n            }\n        }\n    }\n}\n\n// Head section adjustment mechanism\nmodule head_section() {\n    // Pivot bar\n    translate([-45, 0, 18]) rotate([0, 15, 0]) {\n        difference() {\n            cube([35, 32, 3], center=true);\n            translate([0, 0, 1.5]) cube([33, 30, 3.5], center=true);\n        }\n    }\n}\n\n// Side rails (foldable)\nmodule side_rail(position) {\n    translate([position, 0, 20]) {\n        difference() {\n            // Rail posts\n            for(z = [-20, 20]) {\n                translate([0, 0, z]) cylinder(h=15, r=1.5);\n            }\n            // Horizontal bar\n            translate([0, 0, 0]) cube([2, 30, 38], center=true);\n        }\n    }\n}\n\n// IV pole mount\nmodule iv_pole_mount() {\n    translate([50, 18, 25]) {\n        difference() {\n            cylinder(h=8, r=4);\n            cylinder(h=9, r=2.5);\n        }\n    }\n}\n\n// Wheels (4 caster wheels)\nmodule wheel_base() {\n    for(x = [-50, 50]) {\n        for(y = [-20, 20]) {\n            translate([x, y, 0]) {\n                difference() {\n                    cylinder(h=5, r=3);\n                    cylinder(h=6, r=1.5);\n                }\n                // Wheel support strut\n                translate([0, 0, 2.5]) cube([2, 2, 5], center=true);\n            }\n        }\n    }\n}\n\n// Patient straps (3 across)\nmodule straps() {\n    for(x = [-30, 0, 30]) {\n        translate([x, 0, 15]) {\n            color(\"red\") {\n                difference() {\n                    cube([8, 35, 1], center=true);\n                    cube([6, 33, 1.5], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    stretcher_frame();\n    mattress();\n    head_section();\n    \n    // Functional elements\n    side_rail(-55);\n    side_rail(55);\n    iv_pole_mount();\n    wheel_base();\n    straps();\n}",
    "renders": true
  },
  {
    "natural_object": "firetruck",
    "openscad_code": "// Firetruck Bookshelf (realistic style, medium complexity)\n// Approx 120mm long x 45mm wide x 50mm tall\n// Wall thickness 2mm, print-friendly\n\n$fn = 32;\n\nmodule main_body() {\n    // Hollow body shell\n    difference() {\n        // Outer shell\n        cube([80, 40, 35], center=true);\n        \n        // Hollow cavity\n        translate([0, 0, 2])\n        cube([76, 36, 33], center=true);\n    }\n}\n\nmodule cab() {\n    // Driver cabin\n    translate([-35, 0, 17.5])\n    difference() {\n        cube([30, 38, 25], center=true);\n        translate([0, 0, 2])\n        cube([26, 34, 25], center=true);\n    }\n    \n    // Windshield\n    translate([-22, 0, 30])\n    rotate([0, -30, 0])\n    cube([2, 32, 15], center=true);\n}\n\nmodule wheel(radius=8, width=4) {\n    // Wheel with tire pattern\n    difference() {\n        cylinder(h=width, r=radius, center=true);\n        cylinder(h=width+0.1, r=radius-2, center=true);\n    }\n    \n    // Rim spokes\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([radius-3, 0, 0])\n        cube([6, 2, width+0.1], center=true);\n    }\n}\n\nmodule wheels() {\n    // Front wheels\n    translate([-20, 20, -8])\n    wheel();\n    translate([-20, -20, -8])\n    wheel();\n    \n    // Rear wheels\n    translate([20, 20, -8])\n    wheel();\n    translate([20, -20, -8])\n    wheel();\n}\n\nmodule ladder_rack() {\n    // Top ladder storage\n    translate([10, 0, 35])\n    difference() {\n        cube([50, 6, 3], center=true);\n        translate([0, 0, -1])\n        cube([46, 2, 5], center=true);\n    }\n    \n    // Ladder\n    for(i=[-20:5:20]) {\n        translate([i, 0, 38])\n        cube([2, 4, 2], center=true);\n    }\n}\n\nmodule compartments() {\n    // Side compartments\n    for(side=[-1, 1]) {\n        translate([0, side*21, 0])\n        for(pos=[-15:15:15]) {\n            translate([pos, 0, 5])\n            difference() {\n                cube([12, 2, 20], center=true);\n                translate([0, side*1, 0])\n                cube([10, 3, 18], center=true);\n            }\n        }\n    }\n}\n\nmodule hose_reel() {\n    // Rear hose storage\n    translate([40, 0, 15])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=30, r=10, center=true);\n        cylinder(h=32, r=7, center=true);\n    }\n    \n    // Hose\n    for(angle=[0:30:330]) {\n        rotate([0, angle, 0])\n        translate([9, 0, 0])\n        cylinder(h=2, r=8);\n    }\n}\n\nmodule sirens() {\n    // Top sirens\n    translate([-30, 0, 42])\n    cylinder(h=5, r=4);\n    \n    translate([-30, 0, 47])\n    sphere(r=4);\n}\n\nmodule joints() {\n    // Bookshelf support joints\n    translate([-25, 0, -15])\n    cube([5, 35, 5], center=true);\n    \n    translate([25, 0, -15])\n    cube([5, 35, 5], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    cab();\n    wheels();\n    ladder_rack();\n    compartments();\n    hose_reel();\n    sirens();\n    joints();\n}",
    "renders": true
  },
  {
    "natural_object": "cementmixer",
    "openscad_code": "// Cement Mixer Furniture Item (Medium Complexity)\n// 3D-printable natural cement mixer furniture piece\n\n$fn = 36; // Smooth curves for 3D printing\n\n// Overall dimensions\nmixer_length = 100;\nmixer_width = 60;\nmixer_height = 70;\nwall_thickness = 2;\n\n// Base frame structure\nmodule base_frame() {\n    // Front frame\n    translate([-mixer_length/2+5, -mixer_width/2-2, 0])\n        cube([wall_thickness, mixer_width+4, 20]);\n    \n    // Rear frame\n    translate([mixer_length/2-5, -mixer_width/2-2, 0])\n        cube([wall_thickness, mixer_width+4, 20]);\n    \n    // Side supports\n    for(x = [-mixer_length/2+5, mixer_length/2-5]) {\n        translate([x, -mixer_width/2-2, 0])\n            cube([wall_thickness, wall_thickness, 20]);\n        translate([x, mixer_width/2+2-wall_thickness, 0])\n            cube([wall_thickness, wall_thickness, 20]);\n    }\n}\n\n// Drum support arms\nmodule support_arms() {\n    // Left arm\n    translate([-mixer_length/2+10, 0, 20])\n        rotate([0, 45, 0])\n            cube([40, wall_thickness*3, wall_thickness*3]);\n    \n    // Right arm\n    translate([mixer_length/2-10, 0, 20])\n        rotate([0, -45, 0])\n            cube([40, wall_thickness*3, wall_thickness*3]);\n}\n\n// Mixer drum with realistic proportions\nmodule mixer_drum() {\n    // Main drum body\n    rotate([90, 0, 0])\n        translate([0, 0, 25])\n            cylinder(h=40, r1=25, r2=20);\n    \n    // Drum opening with lip\n    rotate([90, 0, 0])\n        translate([0, 0, 65])\n            cylinder(h=5, r1=22, r2=25);\n    \n    // Internal mixing blades (simplified)\n    for(i = [0:60:359]) {\n        rotate([90, 0, i])\n            translate([0, 0, 35])\n                cube([20, wall_thickness, 25], center=true);\n    }\n}\n\n// Chute assembly\nmodule discharge_chute() {\n    // Main chute\n    rotate([15, 0, 0])\n        translate([0, 25, 20])\n            cube([30, wall_thickness*2, 25]);\n    \n    // Chute support\n    translate([0, 25, 15])\n        cube([wall_thickness*2, 5, 10]);\n}\n\n// Control panel/console\nmodule control_console() {\n    // Console base\n    translate([mixer_length/2-15, -mixer_width/2+5, 25])\n        cube([10, 15, 5]);\n    \n    // Control levers\n    for(i = [0, 5, 10]) {\n        translate([mixer_length/2-12+i/3, -mixer_width/2+12, 30])\n            cylinder(h=8, r=1.5);\n    }\n}\n\n// Wheels and axle assembly\nmodule wheel_assembly() {\n    // Axle\n    translate([0, -mixer_width/2-10, 8])\n        cube([mixer_length-20, wall_thickness*2, wall_thickness*2]);\n    \n    // Wheels\n    for(x = [-mixer_length/2+15, mixer_length/2-15]) {\n        translate([x, -mixer_width/2-10, 8])\n            cylinder(h=wall_thickness*4, r=8);\n    }\n}\n\n// Engine housing\nmodule engine_housing() {\n    // Main housing\n    translate([-mixer_length/2+5, mixer_width/2-15, 25])\n        cube([20, 15, 15]);\n    \n    // Exhaust pipe\n    translate([-mixer_length/2+15, mixer_width/2-7, 40])\n        cylinder(h=12, r=2);\n}\n\n// Assembly\nunion() {\n    base_frame();\n    support_arms();\n    mixer_drum();\n    discharge_chute();\n    control_console();\n    wheel_assembly();\n    engine_housing();\n}",
    "renders": true
  },
  {
    "natural_object": "bulldozer",
    "openscad_code": "// Bulldozer Furniture - Realistic Style\n// Medium complexity 3D printable model\n\n// Main dimensions (mm)\ntrack_width = 14;\ntrack_length = 80;\ntrack_height = 10;\nbody_width = 50;\nbody_length = 70;\nbody_height = 35;\nblade_width = 80;\nblade_height = 35;\nblade_thickness = 3;\n\n// Track module with tread pattern\nmodule track_segment(width, length, height) {\n    difference() {\n        // Main track body\n        cube([length, width, height], center=true);\n        \n        // Tread cuts\n        for(i = [-length/2+5 : 5 : length/2-5]) {\n            translate([i, 0, height/2-1])\n                cube([3, width+2, 2], center=true);\n        }\n    }\n}\n\n// Track assembly with supports\nmodule track_assembly(pos_x, pos_y) {\n    translate([pos_x, pos_y, track_height/2]) {\n        // Track\n        track_segment(track_width, track_length, track_height);\n        \n        // Track supports\n        for(i = [-track_length/2+10 : 15 : track_length/2-10]) {\n            translate([i, 0, track_height/2+2])\n                cube([6, track_width-4, 4], center=true);\n        }\n    }\n}\n\n// Main body with structural details\nmodule main_body() {\n    difference() {\n        // Main body block\n        translate([0, 0, body_height/2+track_height])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Cabin cutout\n        translate([body_length/4, 0, body_height+track_height-15])\n            cube([body_length/3, body_width-10, 20], center=true);\n        \n        // Engine vents\n        for(i = [body_length/2-20 : 5 : body_length/2-5]) {\n            translate([i, body_width/2-1, body_height/2+track_height])\n                cube([2, 2, 10], center=true);\n        }\n    }\n    \n    // Cabin roof\n    translate([body_length/4, 0, body_height+track_height])\n        cube([body_length/3+4, body_width-6, 3], center=true);\n    \n    // Exhaust pipe\n    translate([body_length/2-10, body_width/2-5, body_height+track_height+3])\n        cylinder(h=15, r=3, $fn=16);\n}\n\n// Blade assembly with realistic curves\nmodule blade() {\n    // Main blade\n    difference() {\n        translate([-body_length/2-blade_thickness/2-5, 0, blade_height/2+track_height])\n            cube([blade_thickness, blade_width, blade_height], center=true);\n        \n        // Blade curve\n        translate([-body_length/2-blade_thickness/2-5-blade_thickness, 0, blade_height/2+track_height])\n            cylinder(h=blade_width+2, r=blade_height/2, $fn=50);\n    }\n    \n    // Blade supports\n    translate([-body_length/2-5, 0, track_height+10])\n        cube([10, 8, 20], center=true);\n    \n    // Hydraulic cylinders\n    translate([-body_length/2-15, blade_width/4, track_height+blade_height/2])\n        cylinder(h=20, r=3, $fn=12);\n    translate([-body_length/2-15, -blade_width/4, track_height+blade_height/2])\n        cylinder(h=20, r=3, $fn=12);\n}\n\n// Assembly\nunion() {\n    // Left track\n    track_assembly(0, -body_width/2-track_width/2-2);\n    \n    // Right track\n    track_assembly(0, body_width/2+track_width/2+2);\n    \n    // Main body\n    main_body();\n    \n    // Blade\n    blade();\n    \n    // Additional structural details\n    // Front lights\n    translate([body_length/2-5, body_width/3, track_height+body_height-5])\n        sphere(r=2.5);\n    translate([body_length/2-5, -body_width/3, track_height+body_height-5])\n        sphere(r=2.5);\n    \n    // Rear counterweight\n    translate([-body_length/2+5, 0, track_height+body_height/2])\n        cube([10, body_width-10, body_height/2], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "excavator",
    "openscad_code": "// Excavator-inspired furniture (stool with excavator armrest)\n// Realistic medium complexity\n// Dimensions: 120mm wide x 120mm deep x 450mm tall\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nseat_diameter = 120;\nseat_height = 20;\nbase_width = 100;\nbase_depth = 100;\nbase_height = 30;\narm_width = 25;\narm_thickness = 20;\n\n// Main stool with excavator armrests\nmodule excavator_stool() {\n    // Base frame (excavator tracks)\n    translate([0, 0, base_height/2])\n        base_tracks();\n    \n    // Central support pillar (excavator body)\n    translate([0, 0, base_height + 150/2])\n        body_pillar();\n    \n    // Seat (excavator cab)\n    translate([0, 0, base_height + 150 + seat_height/2])\n        excavator_seat();\n    \n    // Left armrest (excavator boom)\n    translate([-seat_diameter/2 - 10, 0, base_height + 150])\n        rotate([0, 0, 45])\n        excavator_arm();\n    \n    // Right armrest (excavator stick)\n    translate([seat_diameter/2 + 10, 0, base_height + 150])\n        rotate([0, 0, -45])\n        excavator_stick();\n}\n\n// Base tracks module\nmodule base_tracks() {\n    // Left track\n    translate([-base_width/2 - arm_width/2, 0, 0])\n        track_assembly();\n    \n    // Right track\n    translate([base_width/2 + arm_width/2, 0, 0])\n        track_assembly();\n    \n    // Connecting frame\n    translate([0, 0, base_height/2 - 5])\n        cube([base_width + arm_width, base_depth, wall_thickness], center=true);\n}\n\n// Individual track assembly\nmodule track_assembly() {\n    // Main track body\n    cube([arm_width, base_depth, base_height], center=true);\n    \n    // Track pads\n    for(i = [-base_depth/2 + 5 : 10 : base_depth/2 - 5]) {\n        translate([0, i, -base_height/2 + 2])\n            cube([arm_width + 2, 8, 4], center=true);\n    }\n    \n    // Drive sprocket\n    translate([0, base_depth/2 - 10, 0])\n        rotate([90, 0, 0])\n        cylinder(h=arm_width, r=arm_width/2, center=true);\n}\n\n// Central body pillar\nmodule body_pillar() {\n    // Main cylinder\n    cylinder(h=150, r=30, center=true);\n    \n    // Reinforcement rings\n    for(h = [-60, 0, 60]) {\n        translate([0, 0, h])\n            cylinder(h=5, r=35, center=true);\n    }\n}\n\n// Excavator seat (cab)\nmodule excavator_seat() {\n    // Main seat base\n    cylinder(h=seat_height, r=seat_diameter/2, center=true);\n    \n    // Seat back\n    translate([0, -seat_diameter/3, seat_height/2 + 20])\n        rotate([90, 0, 0])\n        cylinder(h=40, r=seat_diameter/2 - 10, center=true);\n    \n    // Cab roof\n    translate([0, 0, seat_height + 40])\n        cylinder(h=5, r=seat_diameter/2 + 5, center=true);\n}\n\n// Excavator arm (boom)\nmodule excavator_arm() {\n    // Base joint\n    translate([0, 0, 0])\n        sphere(r=15);\n    \n    // Main boom arm\n    translate([20, 0, 15])\n        rotate([0, 45, 0])\n        cube([60, arm_thickness, arm_thickness], center=true);\n    \n    // Boom cylinder\n    translate([10, 0, -10])\n        rotate([0, 45, 0])\n        cylinder(h=40, r=5, center=true);\n    \n    // End joint\n    translate([60, 0, 40])\n        sphere(r=10);\n}\n\n// Excavator stick (arm)\nmodule excavator_stick() {\n    // Base joint\n    translate([0, 0, 0])\n        sphere(r=15);\n    \n    // Main stick arm\n    translate([-20, 0, 15])\n        rotate([0, -45, 0])\n        cube([50, arm_thickness - 5, arm_thickness - 5], center=true);\n    \n    // Stick cylinder\n    translate([-10, 0, -10])\n        rotate([0, -45, 0])\n        cylinder(h=30, r=4, center=true);\n    \n    // Bucket joint\n    translate([-50, 0, 40])\n        sphere(r=8);\n}\n\n// Create the stool\nexcavator_stool();",
    "renders": true
  },
  {
    "natural_object": "tractor",
    "openscad_code": "// Tractor-style wooden stool\n// Overall dimensions: 110mm x 80mm x 85mm\n\nmodule wheel(radius=12, width=8) {\n    // Tire\n    difference() {\n        cylinder(h=width, r=radius, $fn=20);\n        cylinder(h=width+1, r=radius-2, center=true, $fn=20);\n    }\n    // Rim\n    color(\"silver\")\n    translate([0,0,width/2])\n    cylinder(h=2, r=radius-4, center=true, $fn=12);\n}\n\nmodule chassis() {\n    // Main body - tractor hood/seat\n    difference() {\n        // Main block\n        cube([70, 50, 25]);\n        // Engine grill details\n        for(i=[-20:7:20])\n            translate([i, -2, 10])\n            cube([3, 5, 10]);\n    }\n    \n    // Seat cushion\n    translate([35, 25, 25])\n    cube([30, 20, 10]);\n    \n    // Backrest\n    translate([45, 25, 35])\n    rotate([0, -15, 0])\n    cube([5, 20, 25]);\n    \n    // Dashboard\n    translate([65, 15, 35])\n    cube([15, 20, 5]);\n    \n    // Steering wheel column\n    translate([72, 25, 40])\n    cylinder(h=15, r=2, center=true);\n    translate([72, 25, 47])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=8, center=true);\n}\n\nmodule legs() {\n    // Front legs as tractor front axle\n    translate([15, 15, 0])\n    cylinder(h=45, r=3);\n    translate([15, 35, 0])\n    cylinder(h=45, r=3);\n    \n    // Rear legs as tractor rear axle\n    translate([55, 15, 0])\n    cylinder(h=45, r=3);\n    translate([55, 35, 0])\n    cylinder(h=45, r=3);\n}\n\nmodule exhaust() {\n    // Exhaust pipe\n    translate([50, 5, 50])\n    rotate([0, 90, 0])\n    cylinder(h=25, r=2);\n    translate([50, -8, 50])\n    sphere(r=3);\n}\n\n// Main assembly\nunion() {\n    chassis();\n    legs();\n    exhaust();\n    \n    // Front wheels\n    translate([15, 15, -5])\n    rotate([90, 0, 0])\n    wheel(8, 6);\n    translate([15, 35, -5])\n    rotate([90, 0, 0])\n    wheel(8, 6);\n    \n    // Rear wheels\n    translate([55, 15, -5])\n    rotate([90, 0, 0])\n    wheel(12, 8);\n    translate([55, 35, -5])\n    rotate([90, 0, 0])\n    wheel(12, 8);\n    \n    // Support braces between legs\n    translate([35, 15, 22])\n    cube([40, 3, 3]);\n    translate([35, 35, 22])\n    cube([40, 3, 3]);\n}\n\n// Floor contact pads\ntranslate([15, 15, -2])\n    cube([6, 6, 2]);\ntranslate([15, 35, -2])\n    cube([6, 6, 2]);\ntranslate([55, 15, -2])\n    cube([6, 6, 2]);\ntranslate([55, 35, -2])\n    cube([6, 6, 2]);",
    "renders": true
  },
  {
    "natural_object": "combine",
    "openscad_code": "// Combine furniture - medium complexity realistic style\n// Overall dimensions: 120mm x 80mm x 95mm\n\n$fn = 32;\n\n// Main body frame\nmodule body_frame() {\n    // Bottom platform\n    translate([0, 0, 5])\n        cube([110, 70, 4], center=true);\n    \n    // Side frames\n    for(side = [-1, 1]) {\n        translate([side * 52, 0, 47.5])\n            cube([6, 66, 85], center=true);\n    }\n    \n    // Back frame\n    translate([0, 32, 47.5])\n        cube([110, 6, 85], center=true);\n}\n\n// Storage compartments\nmodule storage_boxes() {\n    // Left compartment\n    translate([-35, 0, 25])\n        difference() {\n            cube([30, 60, 40], center=true);\n            translate([0, 0, 2])\n                cube([26, 56, 36], center=true);\n        }\n    \n    // Right compartment\n    translate([35, 0, 25])\n        difference() {\n            cube([30, 60, 40], center=true);\n            translate([0, 0, 2])\n                cube([26, 56, 36], center=true);\n        }\n    \n    // Center drawer\n    translate([0, 0, 70])\n        difference() {\n            cube([90, 58, 20], center=true);\n            translate([0, 0, 2])\n                cube([86, 54, 16], center=true);\n        }\n}\n\n// Drawer handles\nmodule handles() {\n    // Center drawer handle\n    translate([0, 36, 81])\n        difference() {\n            cube([20, 4, 6], center=true);\n            translate([0, 2, 0])\n                cube([16, 2, 6], center=true);\n        }\n    \n    // Side handles\n    for(side = [-1, 1]) {\n        translate([side * 35, 36, 45])\n            difference() {\n                cube([20, 4, 6], center=true);\n                translate([0, 2, 0])\n                    cube([16, 2, 6], center=true);\n            }\n    }\n}\n\n// Leg structure\nmodule legs() {\n    for(x = [-45, 45])\n        for(y = [-25, 25]) {\n            translate([x, y, -42.5])\n                cylinder(h=85, r=3);\n            // Foot pads\n            translate([x, y, -85])\n                cylinder(h=3, r=5);\n        }\n}\n\n// Top surface\nmodule top_surface() {\n    translate([0, 0, 95])\n        difference() {\n            cube([120, 80, 6], center=true);\n            // Chamfer edges\n            translate([0, 0, 2])\n                cube([116, 76, 6], center=true);\n        }\n}\n\n// Support beams\nmodule support_beams() {\n    // Front beam\n    translate([0, -32, 47.5])\n        cube([110, 6, 85], center=true);\n    \n    // Cross beams\n    for(y = [-15, 15]) {\n        translate([0, y, 50])\n            cube([110, 4, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body_frame();\n    storage_boxes();\n    handles();\n    legs();\n    top_surface();\n    support_beams();\n}",
    "renders": true
  },
  {
    "natural_object": "harvester",
    "openscad_code": "// Harvester Furniture - Bookshelf with Harvest Motifs\n// Overall dimensions: 120mm x 80mm x 140mm\n\nwall_thickness = 2;\nshelf_depth = 80;\nshelf_width = 120;\nshelf_height = 140;\n\nmodule side_panel() {\n    difference() {\n        // Main panel\n        cube([wall_thickness, shelf_depth, shelf_height]);\n        \n        // Wheat stalk cutouts\n        for (i = [1:3]) {\n            translate([wall_thickness+1, 10 + i*25, 20])\n                rotate([0, 90, 0])\n                    cylinder(h=30, d1=3, d2=5);\n        }\n    }\n}\n\nmodule shelf() {\n    // Main shelf board\n    cube([shelf_width-2*wall_thickness, shelf_depth, wall_thickness]);\n    \n    // Front lip for books\n    translate([0, shelf_depth-wall_thickness, wall_thickness])\n        cube([shelf_width-2*wall_thickness, wall_thickness, 5]);\n}\n\nmodule wheat_decoration() {\n    // Wheat head\n    translate([0, 0, 0]) {\n        for (i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([0, 2, 0])\n                    cylinder(h=15, d1=1, d2=0.5);\n        }\n    }\n    \n    // Stem\n    translate([0, 0, -8])\n        cylinder(h=10, d=1.5);\n}\n\nmodule back_panel() {\n    // Main back\n    cube([shelf_width, wall_thickness, shelf_height]);\n    \n    // Harvest scene relief\n    translate([20, wall_thickness/2, 80])\n        wheat_decoration();\n    translate([60, wall_thickness/2, 90])\n        rotate([0, 0, 45])\n            wheat_decoration();\n    translate([90, wall_thickness/2, 75])\n        rotate([0, 0, -30])\n            wheat_decoration();\n}\n\n// Main structure\nunion() {\n    // Left side\n    translate([0, 0, 0])\n        side_panel();\n    \n    // Right side\n    translate([shelf_width-wall_thickness, 0, 0])\n        side_panel();\n    \n    // Back panel\n    translate([0, 0, 0])\n        back_panel();\n    \n    // Shelves\n    translate([wall_thickness, 0, 30])\n        shelf();\n    translate([wall_thickness, 0, 70])\n        shelf();\n    translate([wall_thickness, 0, 110])\n        shelf();\n    \n    // Base support beams\n    translate([wall_thickness, 0, 0]) {\n        cube([shelf_width-2*wall_thickness, wall_thickness, 10]);\n    }\n    translate([wall_thickness, shelf_depth-wall_thickness, 0]) {\n        cube([shelf_width-2*wall_thickness, wall_thickness, 10]);\n    }\n    \n    // Decorative cornice\n    translate([0, 0, shelf_height])\n        difference() {\n            cube([shelf_width, shelf_depth, 10]);\n            for (i = [10:15:shelf_width-10]) {\n                translate([i, shelf_depth/2, 5])\n                    sphere(d=8);\n            }\n        }\n}",
    "renders": true
  },
  {
    "natural_object": "wagon",
    "openscad_code": "// Realistic Medium-Complexity Wagon Furniture\n// OpenSCAD 2D/3D printable model\n\n$fn = 32;  // smooth curves for 3D printing\n\n// Overall dimensions\nwagon_length = 120;\nwagon_width = 70;\nwheel_diameter = 25;\nwheel_width = 8;\naxle_length = 85;\n\n// Main wagon body\nmodule wagon_body() {\n    difference() {\n        // Base box\n        translate([0, 0, wheel_diameter/2 + 5])\n            cube([wagon_length, wagon_width, 30], center=true);\n        \n        // Inner cavity (cargo space)\n        translate([0, 0, wheel_diameter/2 + 7])\n            cube([wagon_length - 4, wagon_width - 4, 28], center=true);\n        \n        // Rounded front\n        translate([wagon_length/2 - 10, 0, wheel_diameter/2 + 20])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=10, center=true);\n    }\n    \n    // Side panels with realistic thickness\n    for(side = [-1, 1]) {\n        translate([0, side * (wagon_width/2 - 1), wheel_diameter/2 + 20])\n            cube([wagon_length - 10, 2, 25], center=true);\n    }\n    \n    // Front and back panels\n    for(end = [-1, 1]) {\n        translate([end * (wagon_length/2 - 1), 0, wheel_diameter/2 + 20])\n            cube([2, wagon_width - 10, 25], center=true);\n    }\n    \n    // Floor planks detail\n    for(i = [-5:5]) {\n        translate([i * 10, 0, wheel_diameter/2 + 5])\n            cube([8, wagon_width - 4, 2], center=true);\n    }\n}\n\n// Wheel with spokes\nmodule wheel() {\n    difference() {\n        // Outer tire\n        cylinder(h=wheel_width, r=wheel_diameter/2, center=true);\n        \n        // Inner hub hole\n        cylinder(h=wheel_width + 2, r=3, center=true);\n        \n        // Spoke cutouts\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([wheel_diameter/4, 0, -1])\n                    cube([wheel_diameter/2, 3, wheel_width + 2], center=true);\n        }\n    }\n    \n    // Central hub\n    cylinder(h=wheel_width + 4, r=5, center=true);\n}\n\n// Axle assembly\nmodule axle() {\n    // Main axle rod\n    rotate([90, 0, 0])\n        cylinder(h=axle_length, r=4, center=true);\n    \n    // Wheel mounting points\n    for(side = [-1, 1]) {\n        translate([side * axle_length/2, 0, 0])\n            wheel();\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    // Main handle pole\n    translate([-wagon_length/2 - 30, 0, wheel_diameter/2 + 25])\n        rotate([0, 45, 0])\n            cylinder(h=50, r=3, center=false);\n    \n    // Cross grip\n    translate([-wagon_length/2 - 50, 0, wheel_diameter/2 + 45])\n        rotate([0, 90, 0])\n            cylinder(h=30, r=2, center=true);\n    \n    // Support bracket\n    translate([-wagon_length/2 - 10, 0, wheel_diameter/2 + 15])\n        cube([20, 4, 10], center=true);\n}\n\n// Assembly\nunion() {\n    wagon_body();\n    axle();\n    handle();\n    \n    // Small decorative corner brackets\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (wagon_length/2 - 5), y * (wagon_width/2 - 5), wheel_diameter/2 + 5])\n                cube([4, 4, 6], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "carriage",
    "openscad_code": "// Carriage Furniture (Medium Complexity – Realistic Style)\n// Overall dimensions: ~120 mm long × 80 mm wide × 90 mm high\n// Wall thickness ≥ 2 mm throughout for 3D-printability\n\n$fn = 32; // Smooth curves\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-55, -38, 0]) cube([110, 76, 50]);\n            translate([-55, -38, 45]) cube([110, 76, 15]);\n            translate([-50, -33, 50]) cube([100, 66, 35]);\n        }\n        // Inner cavity\n        translate([-52, -35, 2]) cube([104, 70, 80]);\n    }\n}\n\n// Floor with plank texture\nmodule floor() {\n    difference() {\n        translate([-53, -36, 0]) cube([106, 72, 4]);\n        for (i = [-5:5])\n            translate([i * 10 - 3, -35, 1]) cube([6, 70, 3]);\n    }\n}\n\n// Side panels with frame details\nmodule side_panel(side = 1) { // side = 1 for left, -1 for right\n    translate([0, side * 37, 25]) mirror([0, side, 0]) {\n        difference() {\n            // Panel\n            translate([0, 0, 0]) cube([108, 4, 48]);\n            // Rectangular windows\n            translate([-40, -1, 15]) cube([35, 6, 20]);\n            translate([5, -1, 15])  cube([35, 6, 20]);\n            // Arched window tops\n            translate([-22.5, -1, 35]) rotate([90,0,0])\n                cylinder(h = 6, r = 17.5, center = true);\n            translate([22.5, -1, 35]) rotate([90,0,0])\n                cylinder(h = 6, r = 17.5, center = true);\n        }\n        // Frame rails\n        translate([-54, 0, 0]) cube([108, 4, 2]);\n        translate([-54, 0, 46]) cube([108, 4, 2]);\n        for (y = [-30, 30]) {\n            translate([y, 0, 24]) cube([2, 4, 24]);\n        }\n    }\n}\n\n// Roof\nmodule roof() {\n    translate([0, 0, 85]) rotate([90,0,0]) {\n        linear_extrude(height = 2, convexity = 10) {\n            offset(r = 2) {\n                polygon(points = [\n                    [-58, -42], [58, -42], [65, 0], [58, 42], [-58, 42], [-65, 0]\n                ]);\n            }\n        }\n    }\n}\n\n// Door with handle\nmodule door() {\n    translate([0, -38, 25]) {\n        difference() {\n            cube([30, 2, 45]);\n            translate([25, -1, 22]) rotate([90,0,0])\n                cylinder(h = 4, r = 2);\n        }\n        // Handle\n        translate([5, -2, 25]) rotate([0,90,0])\n            cylinder(h = 8, r = 1.5);\n    }\n}\n\n// Wheels (2 mm thick disks, no overhangs)\nmodule wheel() {\n    difference() {\n        cylinder(h = 4, r = 20);\n        translate([0, 0, -0.1]) cylinder(h = 4.2, r = 5);\n    }\n}\n\n// Axle beam\nmodule axle(y = 0) {\n    translate([0, y, 10]) cube([6, 6, 4], center = true);\n}\n\n// Assembly\nunion() {\n    floor();\n    body();\n    side_panel(1);\n    side_panel(-1);\n    roof();\n    door();\n\n    // Front axle & wheels\n    axle(-30);\n    translate([-25, -30, 10]) wheel();\n    translate([25, -30, 10]) wheel();\n\n    // Rear axle & wheels\n    axle(30);\n    translate([-25, 30, 10]) wheel();\n    translate([25, 30, 10]) wheel();\n}",
    "renders": true
  },
  {
    "natural_object": "snowmobile",
    "openscad_code": "// Snowmobile-inspired bench / seat\n// Overall dimensions: 140mm long x 60mm wide x 55mm high\n// Wall thickness: 2mm for 3D printing\n// Realistic proportions with furniture functionality\n\n$fn = 32;\n\n// Main body module\nmodule snowmobile_bench() {\n    // Main seat platform with rounded edges\n    difference() {\n        // Base seat block\n        translate([0, 0, 35]) \n            rounded_cube([120, 50, 12], 3);\n        \n        // Hollow interior for weight reduction\n        translate([0, 0, 37]) \n            rounded_cube([116, 46, 10], 2);\n    }\n    \n    // Front hood / storage compartment\n    difference() {\n        // Hood shape\n        translate([-55, 0, 20]) \n            rotate([0, 15, 0])\n            rounded_cube([50, 45, 25], 2);\n        \n        // Storage cavity\n        translate([-53, 0, 22]) \n            rotate([0, 15, 0])\n            rounded_cube([46, 41, 21], 1);\n    }\n    \n    // Rear track covers (skid supports)\n    for(side = [-1, 1]) {\n        // Track support struts\n        translate([45, side * 22, 15]) \n            rotate([0, 0, 45])\n            cylinder(h = 30, r1 = 3, r2 = 2);\n        \n        // Track cover panels\n        translate([50, side * 25, 25]) \n            rotate([0, 0, 30])\n            rounded_cube([30, 8, 4], 1);\n    }\n    \n    // Ski supports (legs)\n    for(side = [-1, 1]) {\n        // Front ski support\n        translate([-45, side * 20, 0]) \n            cylinder(h = 25, r = 3);\n        \n        // Ski foot pad\n        translate([-45, side * 20, 0]) \n            rotate([90, 0, 0])\n            cylinder(h = 15, r1 = 8, r2 = 5);\n    }\n    \n    // Center support beam\n    translate([0, 0, 0]) \n        cylinder(h = 35, r = 4);\n    \n    // Handlebar backrest\n    difference() {\n        // Main backrest\n        translate([10, 0, 45]) \n            rotate([0, 10, 0])\n            rounded_cube([80, 40, 8], 2);\n        \n        // Backrest cavity\n        translate([12, 0, 47]) \n            rotate([0, 10, 0])\n            rounded_cube([76, 36, 6], 1);\n    }\n    \n    // Handlebar grips\n    for(side = [-1, 1]) {\n        translate([50, side * 20, 50]) \n            rotate([90, 0, 0])\n            cylinder(h = 12, r = 3);\n    }\n    \n    // Ventilation slots on seat\n    for(i = [0:3]) {\n        translate([-30 + i * 20, 0, 47]) \n            cube([15, 46, 1]);\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    x = size[0]; y = size[1]; z = size[2];\n    hull() {\n        for(i = [[0,0,0], [x,0,0], [0,y,0], [x,y,0], \n                 [0,0,z], [x,0,z], [0,y,z], [x,y,z]]) {\n            translate(i)\n                sphere(r = radius);\n        }\n    }\n}\n\n// Main assembly\nsnowmobile_bench();",
    "renders": true
  },
  {
    "natural_object": "jetski",
    "openscad_code": "// JetSki Furniture - Storage Bench\n// Realistic style, medium complexity\n// Overall dimensions: 120mm L x 50mm W x 45mm H\n\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Hull base with rounded edges\n        union() {\n            hull() {\n                translate([-60, -25, 0]) cylinder(h=30, r=5, $fn=16);\n                translate([60, -25, 0]) cylinder(h=30, r=5, $fn=16);\n                translate([60, 25, 0]) cylinder(h=30, r=5, $fn=16);\n                translate([-60, 25, 0]) cylinder(h=30, r=5, $fn=16);\n            }\n            // Deck top surface\n            translate([0, 0, 30]) cube([120, 50, 3], center=true);\n        }\n        \n        // Storage compartment hollow\n        translate([0, 0, 15]) cube([110, 40, 14], center=true);\n        \n        // Drain holes\n        for (x = [-40, 0, 40]) {\n            translate([x, 0, 0]) cylinder(h=35, r=2, $fn=8);\n        }\n    }\n}\n\nmodule seat() {\n    // Rider seat cushion\n    difference() {\n        // Seat base\n        translate([0, 0, 33]) {\n            scale([1, 0.8, 0.3]) sphere(r=20, $fn=32);\n            translate([0, 0, -3]) cube([40, 30, 6], center=true);\n        }\n        \n        // Seat hollow\n        translate([0, 0, 35]) scale([0.8, 0.6, 0.2]) sphere(r=18, $fn=32);\n    }\n}\n\nmodule handlebar() {\n    // Handlebar assembly with storage function\n    difference() {\n        // Handlebar post\n        translate([30, 0, 33]) cylinder(h=15, r=3, $fn=16);\n        \n        // Cable routing hole\n        translate([30, 0, 38]) cylinder(h=5, r=1.5, $fn=8);\n    }\n    \n    // Handlebar grips\n    translate([30, 0, 48]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=20, r=2, $fn=16);\n            translate([-10, 0, 0]) sphere(r=2.5, $fn=16);\n            translate([10, 0, 0]) sphere(r=2.5, $fn=16);\n        }\n    }\n}\n\nmodule intake_grate() {\n    // Intake grate pattern for bottom\n    translate([0, 0, 0]) {\n        for (x = [-45, -35, -25, -15]) {\n            translate([x, -20, -2]) cube([5, 40, 2]);\n        }\n    }\n}\n\nmodule exhaust_port() {\n    // Exhaust outlet detail\n    difference() {\n        translate([-55, 0, 15]) cube([10, 15, 10]);\n        translate([-55, 0, 17]) cube([12, 11, 6]);\n    }\n}\n\nmodule storage_lid() {\n    // Hinged storage compartment lid\n    translate([0, 0, 33]) {\n        difference() {\n            // Lid with lip\n            translate([0, 0, 0]) cube([100, 46, 2], center=true);\n            translate([0, 0, -1]) cube([96, 42, 2], center=true);\n            \n            // Handle recess\n            translate([20, 0, 1]) cube([20, 4, 1], center=true);\n        }\n        \n        // Handle grip\n        translate([20, 0, 2.5]) cylinder(h=8, r=1.5, $fn=8);\n    }\n}\n\nmodule jet_nozzle() {\n    // Jet nozzle detail at rear\n    difference() {\n        translate([-60, 0, 15]) rotate([0, -10, 0]) \n            cylinder(h=15, r1=8, r2=6, $fn=16);\n        translate([-70, 0, 15]) rotate([0, -10, 0]) \n            cylinder(h=15, r1=6, r2=4, $fn=16);\n    }\n}\n\n// Assembly\nhull();\nseat();\nhandlebar();\nintake_grate();\nexhaust_port();\nstorage_lid();\njet_nozzle();\n\n// Reinforcement ribs inside\ntranslate([0, 20, 15]) cube([100, 2, 15], center=true);\ntranslate([0, -20, 15]) cube([100, 2, 15], center=true);",
    "renders": true
  },
  {
    "natural_object": "hoverbike",
    "openscad_code": "// Hoverbike Furniture - Realistic Style\n// Medium complexity OpenSCAD model\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nbike_length = 120;\nbike_width = 45;\nbike_height = 35;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Main hull\n        hull() {\n            translate([-50, -15, 5]) cube([100, 30, 8], center=true);\n            translate([-30, -12, 12]) cube([60, 24, 6], center=true);\n            translate([-10, -10, 16]) cube([20, 20, 4], center=true);\n        }\n        \n        // Cockpit cutout\n        translate([15, 0, 8]) rotate([0, 15, 0]) \n            cube([25, 20, 15], center=true);\n        \n        // Air intake vents\n        for(i = [-1, 1]) {\n            translate([-35, i*12, 8]) \n                cube([8, 4, 3], center=true);\n        }\n    }\n}\n\n// Hover engines\nmodule hover_engine(x_pos) {\n    difference() {\n        // Engine housing\n        translate([x_pos, 0, 0]) \n            cylinder(h=8, r1=12, r2=10, center=true);\n        \n        // Engine nozzle\n        translate([x_pos, 0, -4]) \n            cylinder(h=6, r1=8, r2=6, center=true);\n        \n        // Cooling vents\n        for(i = [0:30:150]) {\n            rotate([0, 0, i]) \n                translate([x_pos, 9, 0]) \n                cube([1, 3, 6], center=true);\n        }\n    }\n}\n\n// Seat module\nmodule seat() {\n    difference() {\n        // Seat base\n        translate([10, 0, 16]) \n            cube([25, 18, 4], center=true);\n        \n        // Seat cushion shape\n        translate([10, 0, 18]) \n            scale([1, 1, 0.5]) \n            sphere(r=9, $fn=32);\n    }\n    \n    // Seat back\n    translate([0, 0, 20]) \n        cube([2, 18, 12], center=true);\n}\n\n// Handlebars\nmodule handlebars() {\n    union() {\n        // Central stem\n        translate([25, 0, 18]) \n            cylinder(h=12, r=2, center=true);\n        \n        // Handlebar grips\n        for(side = [-1, 1]) {\n            translate([25, side*12, 24]) \n                rotate([90, 0, 0]) \n                cylinder(h=10, r=1.5, center=true);\n            \n            // Hand controls\n            translate([25, side*15, 24]) \n                sphere(r=2);\n        }\n    }\n}\n\n// Support struts\nmodule support_strut(x, y, angle) {\n    translate([x, y, 4]) \n        rotate([0, angle, 0]) \n        cylinder(h=15, r=1.5, center=true);\n}\n\n// Landing skids\nmodule landing_skid() {\n    difference() {\n        // Main skid\n        translate([0, 0, -1]) \n            cube([bike_length, 6, 2], center=true);\n        \n        // Mounting cutouts\n        for(x = [-40, 0, 40]) {\n            translate([x, 0, -1]) \n                cube([8, 8, 3], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_body();\n    seat();\n    handlebars();\n    \n    // Hover engines\n    hover_engine(-45);\n    hover_engine(45);\n    \n    // Structural supports\n    support_strut(-30, -20, 30);\n    support_strut(-30, 20, -30);\n    support_strut(30, -20, 30);\n    support_strut(30, 20, -30);\n    \n    // Landing system\n    landing_skid();\n    \n    // Detail elements\n    for(i = [-1, 1]) {\n        // Side mirrors\n        translate([20, i*15, 28]) \n            sphere(r=2);\n        \n        // Engine mounts\n        translate([i*45, 0, 8]) \n            cylinder(h=4, r=3, center=true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "skateboard",
    "openscad_code": "// Skateboard Chair - Realistic Style\n// A miniature chair that incorporates an actual skateboard deck as the seat\n// Printable scale: approx 100mm tall\n\n$fn=50;\n\n// Overall dimensions\nchair_height = 100;\nseat_width = 50;\nseat_length = 120;\nleg_thickness = 3;\n\n// Skateboard deck parameters\ndeck_length = 60;\ndeck_width = 20;\ndeck_thickness = 2;\ntruck_height = 3;\nwheel_diameter = 6;\n\n// Chair back parameters\nback_height = 40;\nback_angle = 15;\n\n// Module for skateboard deck with trucks\nmodule skateboard_deck() {\n    // Main deck\n    translate([0, 0, deck_thickness/2])\n    scale([1, 0.9, 1])\n    minkowski() {\n        cube([deck_length, deck_width, deck_thickness], center=true);\n        cylinder(h=0.1, r=3);\n    }\n    \n    // Trucks\n    translate([deck_length/3, 0, 0])\n    cube([3, deck_width - 4, truck_height], center=true);\n    \n    translate([-deck_length/3, 0, 0])\n    cube([3, deck_width - 4, truck_height], center=true);\n    \n    // Wheels\n    for(x=[deck_length/3, -deck_length/3])\n        for(y=[deck_width/2 - 2, -deck_width/2 + 2])\n            translate([x, y, -wheel_diameter/2])\n            cylinder(h=wheel_diameter, r=wheel_diameter/2, center=true);\n}\n\n// Chair legs with reinforcement\nmodule chair_leg() {\n    difference() {\n        // Main leg\n        cube([leg_thickness, leg_thickness, chair_height - deck_thickness], center=true);\n        \n        // Lightening holes\n        for(i=[1:3])\n            translate([0, 0, -chair_height/2 + 15*i])\n            cylinder(h=leg_thickness+1, r=leg_thickness/2, center=true);\n    }\n}\n\n// Back support structure\nmodule back_support() {\n    // Vertical posts\n    translate([seat_length/2 - 5, 0, back_height/2 + deck_thickness])\n    rotate([back_angle, 0, 0])\n    cube([leg_thickness, seat_width - 10, back_height], center=true);\n    \n    translate([-seat_length/2 + 5, 0, back_height/2 + deck_thickness])\n    rotate([back_angle, 0, 0])\n    cube([leg_thickness, seat_width - 10, back_height], center=true);\n    \n    // Horizontal brace\n    translate([0, 0, back_height + deck_thickness - 5])\n    rotate([back_angle, 0, 0])\n    cube([seat_length - 10, leg_thickness, leg_thickness], center=true);\n}\n\n// Assembly\nunion() {\n    // Seat - using skateboard deck\n    translate([0, 0, chair_height - deck_thickness/2])\n    skateboard_deck();\n    \n    // Front legs\n    translate([seat_length/2 - 5, seat_width/2 - 5, 0])\n    chair_leg();\n    translate([seat_length/2 - 5, -seat_width/2 + 5, 0])\n    chair_leg();\n    translate([-seat_length/2 + 5, seat_width/2 - 5, 0])\n    chair_leg();\n    translate([-seat_length/2 + 5, -seat_width/2 + 5, 0])\n    chair_leg();\n    \n    // Back support\n    back_support();\n    \n    // Cross bracing\n    translate([0, seat_width/2 - leg_thickness/2, chair_height/2])\n    cube([seat_length - 10, leg_thickness, chair_height - deck_thickness], center=true);\n    \n    translate([0, -seat_width/2 + leg_thickness/2, chair_height/2])\n    cube([seat_length - 10, leg_thickness, chair_height - deck_thickness], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "longboard",
    "openscad_code": "// Longboard Furniture - A bookshelf shaped like a skateboard deck\n// Dimensions: ~120mm length, ~30mm width, ~45mm height\n// Features: Hollow shelf area, realistic deck shape, truck mounts as structural supports\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\ndeck_length = 120;\ndeck_width = 30;\ndeck_thickness = 4;\ntruck_height = 8;\nwheel_diameter = 12;\nwheel_width = 8;\n\n// Main deck with taper\nmodule deck() {\n    // Tapered deck shape - wider in middle, narrower at ends\n    hull() {\n        // Front rounded end\n        translate([deck_length/2 - deck_width/2, 0, deck_thickness/2])\n            cylinder(h = deck_thickness, r = deck_width/2);\n        \n        // Rear rounded end\n        translate([-deck_length/2 + deck_width/2, 0, deck_thickness/2])\n            cylinder(h = deck_thickness, r = deck_width/2);\n            \n        // Middle section with taper\n        for (x = [-deck_length/2 + deck_width/2 + 2 : 2 : deck_length/2 - deck_width/2 - 2]) {\n            w = deck_width * (1 - 0.3 * abs(x) / (deck_length/2));\n            translate([x, 0, deck_thickness/2])\n                cube([2, w, deck_thickness], center = true);\n        }\n    }\n}\n\n// Hollow out the deck for bookshelf functionality\nmodule hollow_deck() {\n    difference() {\n        deck();\n        \n        // Hollow interior with 2mm walls\n        translate([0, 0, -1])\n            scale([0.85, 0.85, 0.8])\n                deck();\n                \n        // Front opening\n        translate([deck_length/2 - 1, 0, deck_thickness/2])\n            cube([2, deck_width * 0.7, deck_thickness + 2], center = true);\n            \n        // Rear opening\n        translate([-deck_length/2 + 1, 0, deck_thickness/2])\n            cube([2, deck_width * 0.7, deck_thickness + 2], center = true);\n    }\n}\n\n// Truck base as structural support\nmodule truck_base() {\n    // Main truck block\n    cube([deck_width * 0.8, 10, truck_height], center = true);\n    \n    // Bolt holes for realistic detail\n    for (x = [-15, -5, 5, 15]) {\n        for (y = [-3, 3]) {\n            translate([x, y, -truck_height/2 - 1])\n                cylinder(h = truck_height + 2, r = 1);\n        }\n    }\n}\n\n// Wheels as feet\nmodule wheels() {\n    for (side = [-1, 1]) {\n        translate([0, side * (deck_width/2 + wheel_width/2), -wheel_diameter/2 - truck_height])\n            rotate([0, 90, 0])\n                cylinder(h = wheel_width, r = wheel_diameter/2);\n    }\n}\n\n// Complete truck assembly\nmodule truck_assembly() {\n    translate([0, 0, -truck_height/2]) {\n        union() {\n            truck_base();\n            wheels();\n        }\n    }\n}\n\n// Grip tape texture pattern\nmodule grip_pattern() {\n    for (x = [-deck_length/2 + 5 : 5 : deck_length/2 - 5]) {\n        for (y = [-deck_width/2 + 3 : 3 : deck_width/2 - 3]) {\n            translate([x, y, deck_thickness + 0.5])\n                cube([1, 1, 0.5], center = true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main deck shelf\n    hollow_deck();\n    \n    // Front truck support\n    translate([deck_length/2 - 20, 0, 0])\n        truck_assembly();\n    \n    // Rear truck support\n    translate([-deck_length/2 + 20, 0, 0])\n        truck_assembly();\n    \n    // Grip tape texture on top\n    grip_pattern();\n}",
    "renders": true
  },
  {
    "natural_object": "rickshaw",
    "openscad_code": "// Rickshaw Furniture - Medium Complexity OpenSCAD Model\n// Dimensions: ~120mm long, ~80mm wide, ~70mm tall\n// Wall thickness: 2mm for 3D printing\n\n// Main seat module\nmodule seat() {\n    union() {\n        // Seat base\n        translate([0, 0, 20])\n            cube([60, 40, 4], center=true);\n        \n        // Seat backrest\n        translate([0, -22, 32])\n            cube([60, 4, 20], center=true);\n        \n        // Seat cushion detail\n        translate([0, 0, 24])\n            cube([56, 36, 2], center=true);\n    }\n}\n\n// Handlebar assembly\nmodule handlebars() {\n    union() {\n        // Main handlebar tube\n        translate([0, 40, 35])\n            rotate([0, 0, 0])\n                cylinder(h=50, d=6, center=true);\n        \n        // Cross bar\n        translate([0, 35, 45])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=4, center=true);\n        \n        // Handle grips\n        translate([15, 35, 45])\n            cylinder(h=8, d=5, center=true);\n        translate([-15, 35, 45])\n            cylinder(h=8, d=5, center=true);\n    }\n}\n\n// Wheel module (reusable)\nmodule wheel() {\n    difference() {\n        union() {\n            // Outer tire\n            cylinder(h=8, d=30, center=true);\n            \n            // Inner rim\n            translate([0, 0, -1])\n                cylinder(h=10, d=26, center=true);\n        }\n        \n        // Spoke holes pattern\n        for(i = [0:6:359]) {\n            rotate([0, 0, i])\n                translate([8, 0, 0])\n                    cylinder(h=12, d=3, center=true);\n        }\n        \n        // Center hub hole\n        cylinder(h=12, d=6, center=true);\n    }\n}\n\n// Frame structure\nmodule frame() {\n    union() {\n        // Main bottom frame\n        translate([0, 0, 10])\n            cube([80, 4, 4], center=true);\n        \n        // Side supports\n        translate([25, -5, 20])\n            rotate([0, 45, 0])\n                cube([4, 4, 30], center=true);\n        translate([-25, -5, 20])\n            rotate([0, 45, 0])\n                cube([4, 4, 30], center=true);\n        \n        // Rear frame supports\n        translate([25, -20, 15])\n            cube([4, 4, 30], center=true);\n        translate([-25, -20, 15])\n            cube([4, 4, 30], center=true);\n        \n        // Front fork\n        translate([0, 30, 15])\n            cube([4, 30, 4], center=true);\n    }\n}\n\n// Passenger footrest\nmodule footrest() {\n    translate([0, -15, 8])\n        cube([50, 2, 2], center=true);\n}\n\n// Roof/canopy support\nmodule canopy() {\n    union() {\n        // Roof posts\n        translate([20, -10, 45])\n            cylinder(h=30, d=3, center=true);\n        translate([-20, -10, 45])\n            cylinder(h=30, d=3, center=true);\n        \n        // Roof frame\n        translate([0, -10, 60])\n            cube([50, 30, 2], center=true);\n    }\n}\n\n// Decorative elements\nmodule decorations() {\n    // Front light\n    translate([0, 45, 35])\n        sphere(d=4);\n    \n    // Side mirrors\n    translate([20, 35, 45])\n        rotate([0, 45, 0])\n            cube([2, 8, 2], center=true);\n    translate([-20, 35, 45])\n        rotate([0, -45, 0])\n            cube([2, 8, 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    seat();\n    frame();\n    handlebars();\n    footrest();\n    canopy();\n    decorations();\n    \n    // Wheels with proper positioning\n    translate([25, 20, 8])\n        wheel();\n    translate([-25, 20, 8])\n        wheel();\n    translate([0, -25, 8])\n        rotate([90, 0, 0])\n            wheel();\n}",
    "renders": true
  },
  {
    "natural_object": "gondola",
    "openscad_code": "// Gondola furniture item - realistic style with medium complexity\n// A small decorative gondola shelf/display piece\n\n$fn = 32;\n\n// Overall dimensions\ngondola_length = 120;\ngondola_width = 35;\ngondola_height = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main hull module\nmodule gondola_hull() {\n    difference() {\n        // Main hull shape - elongated ellipsoid\n        scale([1, 0.4, 0.3])\n            sphere(d = gondola_length);\n        \n        // Hollow out the interior\n        translate([0, 0, -5])\n            scale([1, 0.35, 0.25])\n                sphere(d = gondola_length - wall_thickness*2);\n        \n        // Flat bottom for stability\n        translate([0, 0, -gondola_height/2 + 2])\n            cube([gondola_length + 10, gondola_width + 10, 10], center = true);\n    }\n}\n\n// Raised prow (ferro) decorative element\nmodule ferro_prow() {\n    translate([-gondola_length/2 + 5, 0, -gondola_height/2 + 10]) {\n        // Base structure\n        cylinder(h = 15, r1 = 8, r2 = 2);\n        \n        // Decorative teeth\n        for (i = [0:2]) {\n            rotate([0, 0, i*30 - 30])\n                translate([0, 5, 12])\n                    cube([3, 1, 5], center = true);\n        }\n    }\n}\n\n // Seat structure\nmodule seat() {\n    translate([0, 0, -gondola_height/2 + 15]) {\n        // Seat base\n        cube([30, gondola_width - 10, wall_thickness], center = true);\n        \n        // Seat back\n        translate([-10, 0, 5])\n            cube([wall_thickness, gondola_width - 10, 10], center = true);\n        \n        // Armrests\n        translate([0, (gondola_width - 10)/2 - 2, 5])\n            cube([25, wall_thickness, 5], center = true);\n        translate([0, -(gondola_width - 10)/2 + 2, 5])\n            cube([25, wall_thickness, 5], center = true);\n    }\n}\n\n// Oar support structure\nmodule oar_support() {\n    translate([gondola_length/4, 0, -gondola_height/2 + 25]) {\n        // Main post\n        cylinder(h = 15, r = 3);\n        \n        // Fork at top\n        translate([0, 0, 7.5])\n            union() {\n                rotate([0, 90, 0])\n                    cylinder(h = 10, r = 2);\n                translate([0, 5, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, r = 2);\n                translate([0, -5, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, r = 2);\n            }\n    }\n}\n\n// Decorative stripes on hull\nmodule hull_stripes() {\n    for (i = [0:3]) {\n        translate([0, 0, -gondola_height/2 + 5 + i*8])\n            difference() {\n                scale([1, 0.4, 0.3])\n                    sphere(d = gondola_length);\n                scale([1, 0.39, 0.29])\n                    sphere(d = gondola_length - 1);\n            }\n    }\n}\n\n// Small storage compartment\nmodule storage_box() {\n    translate([gondola_length/4, 0, -gondola_height/2 + 5]) {\n        difference() {\n            // Outer box\n            cube([20, gondola_width - 15, 10], center = true);\n            // Inner cavity\n            cube([16, gondola_width - 19, 8], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main hull\n    gondola_hull();\n    \n    // Add decorative elements\n    ferro_prow();\n    seat();\n    oar_support();\n    hull_stripes();\n    storage_box();\n}",
    "renders": true
  },
  {
    "natural_object": "balloon",
    "openscad_code": "// Balloon Chair - Realistic style, medium complexity\n// A whimsical balloon-shaped chair with internal frame structure\n\n$fn = 32;\n\n// Main parameters\nballoon_diameter = 100;\nballoon_height = 120;\nwall_thickness = 2;\nbase_thickness = 5;\n\n// Balloon body - main seating area\nmodule balloon_body() {\n    difference() {\n        // Outer balloon shape\n        scale([1, 1, 1.2])\n            sphere(d = balloon_diameter);\n        \n        // Hollow interior\n        scale([1 - (wall_thickness*2/balloon_diameter), \n               1 - (wall_thickness*2/balloon_diameter), \n               1 - (wall_thickness*2/balloon_height)])\n            translate([0, 0, wall_thickness/2])\n                sphere(d = balloon_diameter - wall_thickness);\n    }\n}\n\n// Balloon knot detail\nmodule balloon_knot() {\n    translate([0, 0, -balloon_height/2 - 8])\n        cylinder(h = 10, d1 = 15, d2 = 8, $fn = 16);\n}\n\n// Internal support frame\nmodule internal_frame() {\n    // Vertical supports\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([balloon_diameter/2 - wall_thickness - 5, 0, -balloon_height/2])\n                cylinder(h = balloon_height - 10, d = 4, $fn = 8);\n    }\n    \n    // Ring supports\n    for(h = [-20:30:40]) {\n        translate([0, 0, h])\n            rotate_extrude(angle = 360, $fn = 64)\n                translate([balloon_diameter/2 - wall_thickness - 5, 0, 0])\n                    circle(d = 4, $fn = 8);\n    }\n}\n\n// Seating platform\nmodule seat_platform() {\n    translate([0, 0, -balloon_height/2 + 20])\n        difference() {\n            cylinder(h = 8, d = balloon_diameter - 20, $fn = 64);\n            \n            // Ventilation holes\n            for(i = [0:45:359]) {\n                rotate([0, 0, i])\n                    translate([(balloon_diameter - 30)/2, 0, -1])\n                        cylinder(h = 10, d = 8, $fn = 16);\n            }\n        }\n}\n\n// Balloon stripes detail\nmodule balloon_stripes() {\n    for(i = [0:30:179]) {\n        rotate([0, 0, i])\n            translate([0, 0, -balloon_height/2])\n                scale([1, 0.05, 1.2])\n                    sphere(d = balloon_diameter + 0.5);\n    }\n}\n\n// Base with legs\nmodule chair_base() {\n    // Main base ring\n    translate([0, 0, -balloon_height/2 - 25])\n        difference() {\n            cylinder(h = 8, d = balloon_diameter + 20, $fn = 64);\n            cylinder(h = 10, d = balloon_diameter + 16, $fn = 64);\n        }\n    \n    // Support legs\n    for(i = [0:90:359]) {\n        rotate([0, 0, i])\n            translate([(balloon_diameter + 20)/2 - 5, 0, -balloon_height/2 - 25])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, d = 8, $fn = 8);\n    }\n}\n\n// Backrest support\nmodule backrest_support() {\n    translate([0, -balloon_diameter/3, balloon_height/2 - 10])\n        rotate([15, 0, 0])\n            scale([1, 0.3, 0.8])\n                sphere(d = balloon_diameter - 10);\n}\n\n// Assembly\nunion() {\n    // Main balloon structure\n    balloon_body();\n    \n    // Decorative elements\n    balloon_knot();\n    balloon_stripes();\n    \n    // Furniture elements\n    color(\"lightgray\")\n        internal_frame();\n    \n    color(\"beige\")\n        seat_platform();\n    \n    color(\"darkgray\")\n        chair_base();\n    \n    color(\"lightblue\")\n        backrest_support();\n}",
    "renders": true
  },
  {
    "natural_object": "rocket",
    "openscad_code": "// Rocket Bookshelf / Display Unit\n// Medium complexity realistic rocket furniture\n// Overall height ~140mm, suitable for desktop use\n// Wall thickness 2mm throughout for 3D printing\n\n$fn=50;  // Smooth curves for realistic appearance\n\n// Main module\nmodule rocket_bookshelf() {\n    // Rocket body with hollow interior for books\n    rocket_body();\n    \n    // Fins as structural supports and bookends\n    rocket_fins();\n    \n    // Nose cone as display shelf\n    nose_shelf();\n    \n    // Engine section as base storage\n    engine_section();\n    \n    // Landing legs as furniture feet\n    landing_legs();\n}\n\n// Main rocket body - hollow cylinder with shelves\nmodule rocket_body() {\n    // Outer shell - 2mm thick\n    difference() {\n        // Outer cylinder\n        cylinder(h=100, r=25, center=false);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        cylinder(h=96, r=23, center=false);\n        \n        // Bottom opening\n        translate([0, 0, -1])\n        cube([50, 50, 2], center=true);\n    }\n    \n    // Internal shelves (3 levels)\n    for(i=[1:3]) {\n        translate([0, 0, i*30 - 5])\n        difference() {\n            cylinder(h=2, r=23, center=false);\n            // Cable management holes\n            translate([0, 15, 0])\n            cylinder(h=3, r=3, center=false);\n        }\n    }\n    \n    // Reinforcement rings\n    for(i=[0:3]) {\n        translate([0, 0, i*30])\n        cylinder(h=3, r=26, center=false);\n    }\n}\n\n// Fins as bookends and structural support\nmodule rocket_fins() {\n    fin_width = 2;\n    fin_length = 15;\n    \n    for(angle=[0:120:359]) {\n        rotate([0, 0, angle])\n        translate([0, 25, 50])\n        difference() {\n            // Main fin structure\n            union() {\n                // Vertical support\n                cube([fin_width, fin_length, 100], center=true);\n                \n                // Horizontal brace\n                translate([0, 7, 0])\n                cube([fin_width, 8, 2], center=true);\n            }\n            \n            // Lightening holes\n            translate([0, 20, 30])\n            cylinder(h=3, r=4, center=true);\n        }\n    }\n}\n\n// Nose cone as angled display shelf\nmodule nose_shelf() {\n    // Solid cone for structure\n    translate([0, 0, 100])\n    cylinder(h1=30, h2=0, r1=25, r2=0, center=false);\n    \n    // Hollow interior for storage\n    translate([0, 0, 102])\n    cylinder(h1=26, h2=0, r1=22, r2=0, center=false);\n    \n    // Display ring at top\n    translate([0, 0, 128])\n    difference() {\n        cylinder(h=3, r=26, center=false);\n        cylinder(h=4, r=22, center=false);\n    }\n}\n\n// Engine section as base storage\nmodule engine_section() {\n    // Main engine block\n    difference() {\n        translate([0, 0, -10])\n        cylinder(h=10, r=28, center=false);\n        \n        // Storage compartment\n        translate([0, 0, -8])\n        cylinder(h=6, r=25, center=false);\n        \n        // Access opening\n        rotate([90, 0, 0])\n        translate([0, -5, -15])\n        cube([30, 10, 5], center=true);\n    }\n    \n    // Engine bells (decorative and structural)\n    for(i=[0:90:359]) {\n        rotate([0, 0, i])\n        translate([15, 0, -10])\n        cylinder(h1=8, h2=0, r1=6, r2=4, center=false);\n    }\n}\n\n// Landing legs as furniture feet\nmodule landing_legs() {\n    foot_height = 8;\n    \n    for(angle=[45:90:314]) {\n        rotate([0, 0, angle])\n        translate([20, 0, -10])\n        union() {\n            // Leg strut\n            rotate([0, -15, 0])\n            cube([2, 4, foot_height + 10], center=true);\n            \n            // Foot pad\n            translate([0, 0, -foot_height/2 - 10])\n            difference() {\n                cylinder(h=foot_height, r=6, center=true);\n                cylinder(h=foot_height+1, r=4, center=true);\n            }\n            \n            // Stabilizing brace\n            translate([10, 0, -5])\n            rotate([0, 0, 45])\n            cube([2, 15, 2], center=true);\n        }\n    }\n}\n\n// Generate the furniture\nrocket_bookshelf();",
    "renders": true
  },
  {
    "natural_object": "spaceship",
    "openscad_code": "// Spaceship-inspired bench (cockpit-style seat)\n// Overall dimensions: 120mm x 60mm x 45mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main bench body\nmodule bench_body() {\n    difference() {\n        // Outer hull\n        hull() {\n            translate([0, 0, 20]) cube([110, 50, 25], center=true);\n            translate([0, 0, 5]) cube([90, 45, 10], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 20]) cube([106, 46, 23], center=true);\n        translate([0, 0, 5]) cube([86, 41, 8], center=true);\n    }\n}\n\n// Cockpit seat with backrest\nmodule cockpit_seat() {\n    // Seat base\n    translate([0, 0, 15])\n    difference() {\n        cube([80, 40, 4], center=true);\n        translate([0, 0, -1]) cube([76, 36, 6], center=true);\n    }\n    \n    // Backrest\n    translate([-30, 0, 25])\n    rotate([15, 0, 0])\n    difference() {\n        cube([40, 40, 20], center=true);\n        translate([0, 0, 1]) cube([36, 36, 18], center=true);\n    }\n}\n\n// Engine thrusters\nmodule thrusters() {\n    for(x = [-35, 35]) {\n        translate([x, 0, 0])\n        cylinder(h=10, r1=8, r2=6, center=true);\n    }\n}\n\n// Side panels with rivets\nmodule side_panels() {\n    for(side = [-1, 1]) {\n        translate([0, side*25, 15])\n        difference() {\n            cube([100, wall, 20], center=true);\n            // Cutout for panel detail\n            translate([0, 0, 5]) cube([90, wall+0.1, 10], center=true);\n        }\n        \n        // Rivets\n        for(i = [-35, -15, 5, 25, 45]) {\n            translate([i, side*25, 10])\n            sphere(r=1.5);\n            translate([i, side*25, 20])\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([40, 0, 22])\n    difference() {\n        cube([15, 30, 3], center=true);\n        translate([0, 0, -1]) cube([11, 26, 5], center=true);\n    }\n    \n    // Buttons\n    for(pos = [[35, -8, 24], [35, 0, 24], [35, 8, 24]]) {\n        translate(pos) cylinder(h=2, r=2);\n    }\n}\n\n// Landing struts\nmodule landing_struts() {\n    for(corner = [[-45, -20], [-45, 20], [45, -20], [45, 20]]) {\n        translate([corner[0], corner[1], 0])\n        cylinder(h=5, r=4, center=true);\n        \n        // Foot pad\n        translate([corner[0], corner[1], -3])\n        cylinder(h=2, r=6, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bench_body();\n    cockpit_seat();\n    thrusters();\n    side_panels();\n    control_panel();\n    landing_struts();\n}",
    "renders": true
  },
  {
    "natural_object": "rover",
    "openscad_code": "// Rover Furniture - Medium Complexity Realistic Style\n// A 3D printable rover furniture item with structural details\n\n$fa = 2;\n$fs = 1;\n\n// Main dimensions\nbody_length = 80;\nbody_width = 50;\nbody_height = 30;\nwheel_diameter = 25;\nwheel_width = 10;\nchassis_height = 15;\n\n// Module for wheel with realistic tread pattern\nmodule wheel() {\n    union() {\n        // Main wheel body\n        cylinder(h=wheel_width, d=wheel_diameter, center=true);\n        \n        // Tread pattern - raised blocks\n        for (i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([wheel_diameter/2 - 2, -2, -wheel_width/2])\n                    cube([4, 4, wheel_width]);\n        }\n        \n        // Hub center\n        translate([0, 0, -wheel_width/2 - 1])\n            cylinder(h=wheel_width + 2, d=8, center=false);\n    }\n}\n\n// Module for suspension arm\nmodule suspension_arm() {\n    difference() {\n        // Main arm body\n        translate([-5, -3, 0])\n            cube([20, 6, 4]);\n        \n        // Mounting hole\n        translate([0, 0, -1])\n            cylinder(h=6, d=3, center=true);\n    }\n}\n\n// Module for body panel with realistic details\nmodule body_panel() {\n    difference() {\n        // Main body\n        cube([body_length, body_width, body_height]);\n        \n        // Panel lines\n        translate([10, -1, body_height - 2])\n            cube([body_length - 20, body_width + 2, 1]);\n        \n        // Ventilation slots\n        for (i = [0:3]) {\n            translate([body_length - 25, 5 + i * 10, 15])\n                cube([15, 2, 10]);\n        }\n        \n        // Screw holes\n        for (pos = [[10, 10], [body_length - 10, 10], [10, body_width - 10], [body_length - 10, body_width - 10]]) {\n            translate([pos[0], pos[1], -1])\n                cylinder(h=body_height + 2, d=4, center=false);\n        }\n    }\n}\n\n// Chassis frame with structural members\nmodule chassis() {\n    difference() {\n        // Main chassis plate\n        cube([body_length + 10, body_width + 10, chassis_height]);\n        \n        // Lightening holes\n        for (i = [0:2]) {\n            for (j = [0:1]) {\n                translate([15 + i * 25, 10 + j * 30, -1])\n                    cylinder(h=chassis_height + 2, d=8, center=false);\n            }\n        }\n    }\n}\n\n// Storage compartment module\nmodule storage_box() {\n    difference() {\n        // Outer box\n        translate([body_length/2 - 15, body_width/2 - 10, body_height + chassis_height])\n            cube([30, 20, 20]);\n        \n        // Inner cavity\n        translate([body_length/2 - 13, body_width/2 - 8, body_height + chassis_height + 2])\n            cube([26, 16, 18]);\n        \n        // Handle\n        translate([body_length/2 - 10, body_width/2 + 12, body_height + chassis_height + 10])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Chassis\n    translate([-5, -5, 0])\n        chassis();\n    \n    // Body\n    translate([0, 0, chassis_height])\n        body_panel();\n    \n    // Storage compartment\n    storage_box();\n    \n    // Wheels and suspension\n    // Front left\n    translate([body_length/4, 0, wheel_diameter/2])\n        wheel();\n    translate([body_length/4, body_width/2 + 5, wheel_diameter/2])\n        rotate([0, 0, 90])\n            suspension_arm();\n    \n    // Front right\n    translate([body_length/4, body_width, wheel_diameter/2])\n        wheel();\n    translate([body_length/4, body_width/2 - 5, wheel_diameter/2])\n        rotate([0, 0, 90])\n            mirror([0, 1, 0])\n                suspension_arm();\n    \n    // Rear left\n    translate([3*body_length/4, 0, wheel_diameter/2])\n        wheel();\n    translate([3*body_length/4, body_width/2 + 5, wheel_diameter/2])\n        rotate([0, 0, 90])\n            suspension_arm();\n    \n    // Rear right\n    translate([3*body_length/4, body_width, wheel_diameter/2])\n        wheel();\n    translate([3*body_length/4, body_width/2 - 5, wheel_diameter/2])\n        rotate([0, 0, 90])\n            mirror([0, 1, 0])\n                suspension_arm();\n    \n    // Antenna\n    translate([body_length - 5, body_width/2, body_height + chassis_height + 20])\n        cylinder(h=30, d=2, center=false);\n    translate([body_length - 5, body_width/2, body_height + chassis_height + 50])\n        sphere(d=5);\n}",
    "renders": true
  },
  {
    "natural_object": "satellite",
    "openscad_code": "// Satellite-themed side table\n// Dimensions: 120mm diameter, 450mm height\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\ntable_height = 450;\ntable_radius = 60;\nwall_thickness = 2;\nleg_count = 3;\n\n// Satellite dish top as table surface\nmodule dish_table() {\n    difference() {\n        // Main dish shape\n        scale([1, 1, 0.3])\n            sphere(r = table_radius);\n        \n        // Hollow out underside\n        translate([0, 0, -table_radius * 0.3 + wall_thickness])\n            scale([1, 1, 0.25])\n                sphere(r = table_radius - wall_thickness);\n        \n        // Central hole for pole\n        translate([0, 0, -table_radius * 0.3])\n            cylinder(r = 8, h = table_radius * 0.3 * 2);\n    }\n}\n\n// Central support pole\nmodule support_pole() {\n    difference() {\n        // Outer pole\n        cylinder(r = 10, h = table_height - 50);\n        \n        // Inner hollow\n        translate([0, 0, wall_thickness])\n            cylinder(r = 8, h = table_height - 50 - wall_thickness);\n    }\n}\n\n// Satellite solar panel legs as table base\nmodule base_legs() {\n    for (i = [0:leg_count-1]) {\n        rotate([0, 0, i * 120])\n        translate([table_radius * 0.8, 0, 0])\n            difference() {\n                // Main leg\n                rotate([90, 0, 0])\n                    cylinder(r = 6, h = 30);\n                \n                // Hollow core\n                translate([0, 0, -15])\n                    rotate([90, 0, 0])\n                        cylinder(r = 4, h = 28);\n            }\n    }\n}\n\n// Central hub for legs\nmodule base_hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(r = 25, h = 30);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            cylinder(r = 22, h = 30 - wall_thickness * 2);\n        \n        // Pole mount hole\n        translate([0, 0, -1])\n            cylinder(r = 10.5, h = 32);\n    }\n}\n\n// Solar panel details (decorative)\nmodule solar_panels() {\n    // Panel frames\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([table_radius + 15, 0, 20])\n            difference() {\n                // Frame\n                cube([30, 2, 15], center = true);\n                \n                // Inner cutout\n                translate([0, 0, -1])\n                    cube([26, 1.5, 13], center = true);\n            }\n    }\n    \n    // Panel surfaces\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([table_radius + 15, 0, 20])\n            color([0.1, 0.1, 0.2])\n                cube([28, 1, 13], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    base_hub();\n\ntranslate([0, 0, 30])\n    base_legs();\n\ntranslate([0, 0, 30])\n    support_pole();\n\ntranslate([0, 0, table_height - 50])\n    dish_table();\n\ntranslate([0, 0, table_height - 50 - table_radius * 0.3])\n    solar_panels();\n\n// Antenna details (decorative)\ntranslate([0, 0, table_height - 50 + table_radius * 0.3 - 5])\n    cylinder(r1 = 2, r2 = 1, h = 20);\n\ntranslate([0, 0, table_height - 50 + table_radius * 0.3 + 15])\n    sphere(r = 2);",
    "renders": true
  },
  {
    "natural_object": "drone",
    "openscad_code": "// Drone Furniture - Mini Quadcopter Shelf Unit\n// A 3D printable drone-shaped shelf for small items\n// Overall size: 120mm wingspan, 60mm height, 120mm length\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2;\nbody_length = 100;\nbody_width = 40;\nbody_height = 25;\narm_length = 60;\narm_width = 12;\nmotor_diameter = 20;\nshelf_thickness = 3;\n\n// Main body with hollow interior for storage\nmodule drone_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, body_height/2])\n                cube([body_length, body_width, body_height], center=true);\n            translate([body_length/4, 0, body_height])\n                cube([body_length/2, body_width*0.8, body_height*0.8], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_height/2 + wall_thickness/2])\n            cube([body_length - wall_thickness*2, body_width - wall_thickness*2, body_height - wall_thickness], center=true);\n        \n        // Shelf openings\n        for(i = [1:2]) {\n            translate([body_length/4 - 10, 0, i*body_height/3])\n                cube([20, body_width + 1, shelf_thickness], center=true);\n        }\n    }\n}\n\n// Motor arm with integrated support\nmodule motor_arm(rotation) {\n    rotate([0, 0, rotation])\n    union() {\n        // Main arm structure\n        translate([0, arm_length/2, body_height/2])\n            cube([arm_width, arm_length, arm_width], center=true);\n        \n        // Motor mount cylinder\n        translate([0, arm_length, body_height/2])\n            cylinder(h=wall_thickness*2, d=motor_diameter, center=true);\n        \n        // Support strut\n        translate([0, arm_length*0.7, body_height/4])\n            rotate([45, 0, 0])\n            cube([arm_width*0.8, arm_width*0.8, arm_length*0.4], center=true);\n    }\n}\n\n// Propeller guard (furniture safety feature)\nmodule prop_guard() {\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, arm_length, body_height/2])\n        difference() {\n            cylinder(h=15, d=motor_diameter + 8, center=true);\n            cylinder(h=16, d=motor_diameter + 4, center=true);\n        }\n    }\n}\n\n// Landing gear with shelf support\nmodule landing_gear() {\n    for(x = [-body_length/3, body_length/3]) {\n        translate([x, 0, -body_height/4])\n        union() {\n            // Vertical support\n            cube([wall_thickness*3, wall_thickness*3, body_height/2], center=true);\n            \n            // Horizontal foot\n            translate([0, 0, -body_height/4 - wall_thickness])\n            cube([wall_thickness*6, body_width*1.2, wall_thickness*2], center=true);\n        }\n    }\n}\n\n// Camera gimbal storage compartment\nmodule camera_pod() {\n    translate([body_length/2 - 10, 0, body_height/4])\n    difference() {\n        sphere(d=25);\n        sphere(d=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    drone_body();\n    \n    // Four motor arms\n    for(angle = [45:90:315]) {\n        motor_arm(angle);\n    }\n    \n    // Safety guards\n    prop_guard();\n    \n    // Landing gear\n    landing_gear();\n    \n    // Storage compartment\n    camera_pod();\n}",
    "renders": true
  },
  {
    "natural_object": "quadcopter",
    "openscad_code": "// Quadcopter Furniture - Decorative Storage Shelf Unit\n// Medium complexity realistic style with structural joints and storage features\n\n$fn = 32;\n\n// Overall dimensions\nbody_width = 80;\nbody_length = 80;\nbody_height = 25;\narm_length = 40;\narm_thickness = 8;\nprop_diameter = 30;\nprop_height = 3;\nleg_height = 15;\nwall_thickness = 2;\n\nmodule central_body() {\n    // Main storage compartment with hollow center\n    difference() {\n        // Outer shell\n        cube([body_width, body_length, body_height], center=true);\n        \n        // Inner hollow space for storage\n        translate([0, 0, -2])\n            cube([body_width-wall_thickness*2, body_length-wall_thickness*2, body_height], center=true);\n        \n        // Access hole on top\n        translate([0, 0, body_height/2 - 0.1])\n            cylinder(h=wall_thickness+0.2, r=20, center=true);\n    }\n    \n    // Reinforcement ribs inside\n    for(i = [-1, 1]) {\n        translate([i*20, 0, 0])\n            cube([wall_thickness, body_length-wall_thickness*2, body_height-wall_thickness], center=true);\n        translate([0, i*20, 0])\n            cube([body_width-wall_thickness*2, wall_thickness, body_height-wall_thickness], center=true);\n    }\n}\n\nmodule arm(x, y, angle) {\n    // Structural arm with furniture-style joinery\n    translate([x, y, 0])\n    rotate([0, 0, angle]) {\n        // Main arm beam\n        translate([arm_length/2, 0, 0])\n            cube([arm_length, arm_thickness, arm_thickness], center=true);\n        \n        // Decorative joint plate at body connection\n        translate([0, 0, 0])\n            cylinder(h=wall_thickness*2, r=arm_thickness*1.2, center=true);\n        \n        // Motor mount platform at end\n        translate([arm_length, 0, arm_thickness/2 + prop_height/2])\n            cube([arm_thickness*2, arm_thickness*2, prop_height], center=true);\n    }\n}\n\nmodule propeller(x, y, z, angle) {\n    translate([x, y, z])\n    rotate([0, 0, angle]) {\n        // Central hub\n        cylinder(h=prop_height, r=5, center=true);\n        \n        // Four propeller blades with realistic twist\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n            translate([prop_diameter/4, 0, 0])\n                rotate([0, 15, 0])  // Slight twist for realism\n                    cube([prop_diameter/2, 3, prop_height], center=true);\n        }\n    }\n}\n\nmodule landing_leg(x, y) {\n    translate([x, y, -leg_height/2 - body_height/2])\n    difference() {\n        // Main leg post\n        cylinder(h=leg_height, r=3, center=true);\n        \n        // Lightening hole\n        cylinder(h=leg_height+1, r=2, center=true);\n    }\n    \n    // Furniture-style foot pad\n    translate([x, y, -leg_height - body_height/2])\n        cube([8, 8, 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Central storage body\n    central_body();\n    \n    // Four structural arms\n    for(i = [0:90:270]) {\n        arm(0, 0, i);\n    }\n    \n    // Four motors with propellers\n    for(i = [0:90:270]) {\n        x = cos(i) * arm_length;\n        y = sin(i) * arm_length;\n        z = body_height/2 + prop_height/2 + arm_thickness/2;\n        propeller(x, y, z, 0);\n    }\n    \n    // Four landing legs\n    for(i = [45:90:315]) {\n        x = cos(i) * body_width/2.5;\n        y = sin(i) * body_length/2.5;\n        landing_leg(x, y);\n    }\n    \n    // Furniture-style shelf supports\n    translate([0, 0, body_height/2 + 2])\n        cube([body_width-wall_thickness*4, wall_thickness, 5], center=true);\n    translate([0, 0, -body_height/2 - 2])\n        cube([body_width-wall_thickness*4, wall_thickness, 5], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "monorail",
    "openscad_code": "// Monorail Bookshelf - Realistic Style\n// Medium complexity OpenSCAD furniture model\n// Size: 120mm x 50mm x 180mm\n\n// Parameters\nrail_width = 8;\nrail_height = 6;\nrail_length = 120;\nbook_shelf_thickness = 2;\npost_diameter = 5;\npost_height = 180;\nshelf_depth = 50;\nshelf_spacing = 35;\nnum_shelves = 4;\n\n// Main module\nmodule monorail_bookshelf() {\n    // Base rail\n    translate([0, 0, 0]) \n        base_rail();\n    \n    // Vertical posts\n    for (x = [0, rail_length]) {\n        translate([x, shelf_depth/2, post_height/2])\n            cylinder(d=post_diameter, h=post_height, $fn=16);\n    }\n    \n    // Shelves\n    for (i = [0:num_shelves-1]) {\n        translate([rail_length/2, 0, shelf_spacing + i * shelf_spacing])\n            shelf_unit();\n    }\n    \n    // Top rail\n    translate([0, 0, post_height]) \n        top_rail();\n}\n\n// Base rail with rounded edges\nmodule base_rail() {\n    difference() {\n        // Main rail body\n        translate([rail_length/2, rail_height/2, rail_height/2])\n            cube([rail_length, rail_height, rail_height], center=true);\n        \n        // Rounded ends\n        translate([rail_length, rail_height/2, rail_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=rail_height, r=rail_height/2, $fn=20);\n        translate([0, rail_height/2, rail_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=rail_height, r=rail_height/2, $fn=20);\n    }\n}\n\n// Top rail (mirrored base)\nmodule top_rail() {\n    mirror([0, 0, 1])\n        base_rail();\n}\n\n// Individual shelf unit\nmodule shelf_unit() {\n    // Shelf platform\n    difference() {\n        translate([rail_length/2, book_shelf_thickness/2, 0])\n            cube([rail_length - post_diameter*2, book_shelf_thickness, shelf_depth - post_diameter]);\n        \n        // Rail cutout\n        translate([rail_length/2, 0, rail_height])\n            cube([rail_width + 2, book_shelf_thickness + 2, rail_height + 2], center=true);\n    }\n    \n    // Back support\n    translate([rail_length/2, shelf_depth - book_shelf_thickness/2, shelf_depth/2 - book_shelf_thickness])\n        cube([rail_length - post_diameter*2, book_shelf_thickness, shelf_depth - post_diameter]);\n    \n    // Side supports\n    for (x = [post_diameter, rail_length - post_diameter]) {\n        translate([x, book_shelf_thickness/2, shelf_depth/2 - book_shelf_thickness])\n            cube([book_shelf_thickness, book_shelf_thickness, shelf_depth - post_diameter]);\n    }\n}\n\n// Generate the model\nmonorail_bookshelf();",
    "renders": true
  },
  {
    "natural_object": "locomotive",
    "openscad_code": "// Locomotive Bookshelf (realistic, medium complexity)\n// Overall dimensions: 140x80x120 mm (LxWxH)\n\n$fn = 32;  // Smooth curves\n\n// Main body parameters\nbody_length = 140;\nbody_width = 80;\nbody_height = 70;\n\n// Shelf parameters\nshelf_thickness = 4;\nshelf_spacing = 25;\n\n// Wheel parameters\nwheel_diameter = 24;\naxle_offset = 15;\n\n// Roof parameters\nroof_height = 30;\n\nmodule locomotive_bookshelf() {\n    // Main hollow body with shelf openings\n    difference() {\n        // Outer shell\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 0])\n            cube([body_length-4, body_width-4, body_height-4], center=true);\n        \n        // Bottom opening\n        translate([0, 0, -body_height/2])\n            cube([body_length-4, body_width-4, 2], center=true);\n        \n        // Shelf openings\n        translate([0, 0, -body_height/2 + shelf_spacing])\n            cube([body_length-4, body_width-4, shelf_thickness], center=true);\n        \n        translate([0, 0, -body_height/2 + shelf_spacing*2])\n            cube([body_length-4, body_width-4, shelf_thickness], center=true);\n    }\n    \n    // Front cowcatcher (structural element)\n    difference() {\n        // Main wedge\n        translate([body_length/2 + 10, 0, -body_height/2 + 10])\n            rotate([0, -30, 0])\n                cube([20, body_width-20, 20]);\n        \n        // Cutouts for style\n        for(i = [0:2]) {\n            translate([body_length/2 + 15 - i*5, 0, -body_height/2 + 15])\n                cube([2, body_width-24, 10]);\n        }\n    }\n    \n    // Boiler (cylindrical storage compartment)\n    translate([body_length/4, 0, body_height/2 - 15])\n        difference() {\n            cylinder(h=body_length/2, r=body_width/3, center=true);\n            cylinder(h=body_length/2 + 2, r=body_width/3 - 2, center=true);\n        }\n    \n    // Chimney (bookend support)\n    translate([-body_length/4, 0, body_height/2 + 15])\n        cylinder(h=20, r=body_width/8, center=false);\n    \n    // Cab (rear compartment)\n    difference() {\n        cube([body_length/3, body_width-10, 50], center=true);\n        translate([0, 0, 0])\n            cube([body_length/3-4, body_width-14, 46], center=true);\n    }\n    \n    // Wheels (structural legs)\n    for(side = [-1, 1]) {\n        // Front wheels\n        translate([body_length/3, side*body_width/2, -body_height/2 - wheel_diameter/2 + 5])\n            rotate([90, 0, 0])\n                cylinder(h=wheel_diameter/2, r=wheel_diameter/2, center=false);\n        \n        // Rear wheels\n        translate([-body_length/3, side*body_width/2, -body_height/2 - wheel_diameter/2 + 5])\n            rotate([90, 0, 0])\n                cylinder(h=wheel_diameter/2, r=wheel_diameter/2, center=false);\n    }\n    \n    // Connecting rods (decorative structural elements)\n    for(side = [-1, 1]) {\n        translate([0, side*body_width/2, -body_height/2 + 5])\n            rotate([0, 90, 0])\n                cube([wheel_diameter*1.5, 4, 2]);\n    }\n    \n    // Roof (bookshelf top)\n    difference() {\n        // Main roof\n        translate([0, 0, body_height/2 + roof_height/2])\n            scale([1, 1, 0.3])\n                sphere(r=body_width/1.5);\n        \n        // Flatten top\n        translate([0, 0, body_height/2 + roof_height - 5])\n            cube([body_length*1.2, body_width*1.2, 10], center=true);\n    }\n    \n    // Handrails (book dividers)\n    for(i = [0:1]) {\n        translate([body_length/4 - 10 - i*20, body_width/2 + 2, -body_height/2 + 30])\n            cylinder(h=40, r=1, center=false);\n        translate([body_length/4 - 10 - i*20, -body_width/2 - 2, -body_height/2 + 30])\n            cylinder(h=40, r=1, center=false);\n    }\n}\n\n// Render the locomotive bookshelf\nlocomotive_bookshelf();",
    "renders": true
  },
  {
    "natural_object": "caboose",
    "openscad_code": "// Caboose furniture item - realistic style, medium complexity\n// A small bench styled like a railroad caboose with storage compartments\n\n// Overall dimensions (mm)\ncaboose_length = 120;\ncaboose_width = 60;\ncaboose_height = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body module\nmodule caboose_body() {\n    // Base platform\n    difference() {\n        cube([caboose_length, caboose_width, caboose_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([caboose_length - 2*wall_thickness, \n                  caboose_width - 2*wall_thickness, \n                  caboose_height - wall_thickness]);\n    }\n    \n    // Roof with slight arch\n    translate([0, 0, caboose_height])\n    for(i = [0:4]) {\n        translate([i * 24, 0, 0])\n            cube([24, caboose_width, 5 - i*0.8]);\n    }\n    \n    // Cupola (raised observation area)\n    translate([caboose_length * 0.3, 0, caboose_height + 3])\n        cube([40, caboose_width, 15]);\n    \n    // Cupola windows\n    for(pos = [12, 28]) {\n        translate([caboose_length * 0.3 + pos, -wall_thickness, caboose_height + 8])\n            cube([8, wall_thickness, 8]);\n        translate([caboose_length * 0.3 + pos, caboose_width, caboose_height + 8])\n            cube([8, wall_thickness, 8]);\n    }\n}\n\n// Bench seat module\nmodule bench_seat() {\n    // Seat top\n    translate([5, wall_thickness, caboose_height - 8])\n        cube([caboose_length - 10, caboose_width - 2*wall_thickness, 6]);\n    \n    // Seat supports\n    for(x = [15, caboose_length - 15]) {\n        translate([x - 2, wall_thickness, 0])\n            cube([4, caboose_width - 2*wall_thickness, caboose_height - 8]);\n    }\n}\n\n// Storage compartments with doors\nmodule storage_doors() {\n    // Left door\n    translate([wall_thickness, wall_thickness, wall_thickness])\n    difference() {\n        cube([caboose_length/2 - 1.5*wall_thickness, \n              caboose_width - 2*wall_thickness, \n              caboose_height - 2*wall_thickness]);\n        // Door panel relief\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([caboose_length/2 - 3.5*wall_thickness, \n                  caboose_width - 4*wall_thickness, \n                  caboose_height - 4*wall_thickness]);\n    }\n    \n    // Right door\n    translate([caboose_length/2 + 0.5*wall_thickness, wall_thickness, wall_thickness])\n    difference() {\n        cube([caboose_length/2 - 1.5*wall_thickness, \n              caboose_width - 2*wall_thickness, \n              caboose_height - 2*wall_thickness]);\n        // Door panel relief\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([caboose_length/2 - 3.5*wall_thickness, \n                  caboose_width - 4*wall_thickness, \n                  caboose_height - 4*wall_thickness]);\n    }\n    \n    // Door handles\n    translate([caboose_length/4, caboose_width/2, caboose_height/2])\n        cylinder(h=wall_thickness, r=2);\n    translate([3*caboose_length/4, caboose_width/2, caboose_height/2])\n        cylinder(h=wall_thickness, r=2);\n}\n\n// Wheels/bogies (decorative)\nmodule bogies() {\n    for(x = [20, caboose_length - 20]) {\n        translate([x, caboose_width/2, -5])\n            cylinder(h=5, r=8);\n        translate([x, caboose_width/2 - 20, -5])\n            cylinder(h=5, r=8);\n    }\n}\n\n// Ladder details\nmodule ladder() {\n    // Side rails\n    for(side = [0, 1]) {\n        translate([side ? caboose_length - 2 : 0, 0, 10])\n            cube([2, wall_thickness, caboose_height - 10]);\n    }\n    \n    // Rungs\n    for(h = [15:10:caboose_height - 5]) {\n        translate([0, 0, h])\n            cube([2, wall_thickness, 2]);\n        translate([caboose_length - 2, 0, h])\n            cube([2, wall_thickness, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    caboose_body();\n    bench_seat();\n    storage_doors();\n    bogies();\n    ladder();\n}",
    "renders": true
  },
  {
    "natural_object": "freighter",
    "openscad_code": "// Freighter-style storage bench for industrial interiors\n// Overall dimensions: 120mm(L) x 45mm(W) x 55mm(H)\n\n// Wall thickness constant\nwall = 2;\n\n// Main bench body - cargo container style\nmodule bench_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 27.5])\n            cube([120, 45, 55], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 27.5])\n            cube([116, 41, 51], center=true);\n    }\n}\n\n// Reinforced corners with bolt details\nmodule corner_reinforcement(x, y) {\n    translate([x, y, 27.5]) {\n        // Corner bracket\n        cube([8, 8, 55]);\n        \n        // Bolt holes\n        for (i = [-20, 0, 20]) {\n            translate([0, 0, i])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=3, $fn=8);\n        }\n    }\n}\n\n// Container-style doors on front\nmodule storage_doors() {\n    // Door frame\n    translate([0, 22.5, 27.5])\n        cube([110, 2, 45]);\n    \n    // Left door\n    translate([-25, 23.5, 27.5])\n        cube([50, 2, 40]);\n    \n    // Right door\n    translate([25, 23.5, 27.5])\n        cube([50, 2, 40]);\n    \n    // Door handles\n    translate([-40, 24.5, 35])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=4, $fn=16);\n    translate([40, 24.5, 35])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=4, $fn=16);\n}\n\n// Industrial-style seat cushion\nmodule seat_cushion() {\n    // Base cushion\n    translate([0, 0, 57])\n        cube([116, 41, 6]);\n    \n    // Cushion padding pattern\n    for (x = [-40, -20, 0, 20, 40]) {\n        for (y = [-12.5, 0, 12.5]) {\n            translate([x, y, 63.5])\n                cylinder(h=1.5, d=12, $fn=32);\n        }\n    }\n}\n\n// Structural support ribs underneath\nmodule support_frame() {\n    // Longitudinal beams\n    translate([0, -15, 12])\n        cube([116, 4, 8]);\n    translate([0, 15, 12])\n        cube([116, 4, 8]);\n    \n    // Cross beams\n    for (pos = [-40, -20, 0, 20, 40]) {\n        translate([pos, 0, 12])\n            cube([4, 41, 8]);\n    }\n}\n\n// Container markings and details\nmodule container_details() {\n    // Top rails\n    translate([0, 0, 55])\n        cube([120, 45, 2]);\n    \n    // Side ribs\n    for (x = [-50, -25, 0, 25, 50]) {\n        translate([x, 0, 27.5])\n            cube([2, 45, 51]);\n    }\n    \n    // Serial number panel\n    translate([0, 0, 45])\n        cube([30, 2, 10]);\n}\n\n// Assembly\nunion() {\n    bench_body();\n    \n    // Add corner reinforcements\n    corner_reinforcement(56, 21.5);\n    corner_reinforcement(56, -21.5);\n    corner_reinforcement(-56, 21.5);\n    corner_reinforcement(-56, -21.5);\n    \n    storage_doors();\n    seat_cushion();\n    support_frame();\n    container_details();\n}",
    "renders": true
  },
  {
    "natural_object": "cargoship",
    "openscad_code": "// Cargo ship bed frame for ship cabin furniture\n// Realistic style, medium complexity\n\n// Overall dimensions\nbed_length = 100;\nbed_width = 60;\nbed_height = 40;\nwall_thickness = 2;\n\nmodule side_panel(len, hei) {\n    difference() {\n        cube([len, wall_thickness, hei]);\n        // Porthole window\n        translate([len/2, -0.5, hei/2])\n            rotate([0, 90, 0])\n            cylinder(h=wall_thickness+1, r=8, $fn=32);\n    }\n}\n\nmodule headboard() {\n    difference() {\n        cube([wall_thickness, bed_width, bed_height]);\n        // Cable routing holes\n        for (y = [15:15:bed_width-15]) {\n            translate([-0.5, y, bed_height-5])\n                rotate([90, 0, 0])\n                cylinder(h=wall_thickness+1, r=3, $fn=16);\n        }\n    }\n}\n\nmodule footboard() {\n    difference() {\n        cube([wall_thickness, bed_width, bed_height]);\n        // Ventilation slots\n        for (z = [10:10:bed_height-10]) {\n            translate([-0.5, bed_width/2-10, z])\n                cube([wall_thickness+1, 20, 2]);\n        }\n    }\n}\n\nmodule bed_base() {\n    // Main platform\n    difference() {\n        cube([bed_length, bed_width, wall_thickness]);\n        // Grid pattern for weight reduction\n        for (x = [10:10:bed_length-10]) {\n            for (y = [10:10:bed_width-10]) {\n                translate([x+2, y+2, -0.5])\n                    cube([6, 6, wall_thickness+1]);\n            }\n        }\n    }\n}\n\nmodule support_leg(x, y) {\n    difference() {\n        // Main leg\n        translate([x, y, 0])\n            cube([8, 8, bed_height-wall_thickness]);\n        // Hollow center\n        translate([x+2, y+2, 2])\n            cube([4, 4, bed_height-wall_thickness-4]);\n    }\n}\n\nmodule storage_drawer() {\n    difference() {\n        // Drawer body\n        translate([10, 5, wall_thickness])\n            cube([bed_length-20, bed_width-10, 15]);\n        // Drawer cavity\n        translate([12, 7, wall_thickness+2])\n            cube([bed_length-24, bed_width-14, 13]);\n        // Handle\n        translate([bed_length/2-5, 10, wall_thickness+15])\n            cube([10, 2, 3]);\n    }\n}\n\n// Assembly\nunion() {\n    // Bed base\n    bed_base();\n    \n    // Left side panel\n    translate([0, 0, wall_thickness])\n        side_panel(bed_length, bed_height-wall_thickness);\n    \n    // Right side panel\n    translate([0, bed_width-wall_thickness, wall_thickness])\n        side_panel(bed_length, bed_height-wall_thickness);\n    \n    // Headboard\n    translate([0, 0, wall_thickness])\n        headboard();\n    \n    // Footboard\n    translate([bed_length-wall_thickness, 0, wall_thickness])\n        footboard();\n    \n    // Support legs\n    support_leg(10, 10);\n    support_leg(10, bed_width-18);\n    support_leg(bed_length-18, 10);\n    support_leg(bed_length-18, bed_width-18);\n    \n    // Storage drawer\n    storage_drawer();\n    \n    // Corner brackets for realism\n    for (x = [2, bed_length-6]) {\n        for (y = [2, bed_width-6]) {\n            translate([x, y, wall_thickness])\n                difference() {\n                    cube([4, 4, 4]);\n                    translate([0.5, 0.5, 3])\n                        cube([3, 3, 2]);\n                }\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "tank",
    "openscad_code": "// Tank Furniture - Medium Complexity Realistic Style\n// Overall dimensions: ~120mm x 60mm x 55mm\n\n// Main parameters\nwall_thickness = 2;\nbody_height = 30;\nbody_length = 90;\nbody_width = 55;\nturret_diameter = 40;\nturret_height = 20;\nbarrel_length = 45;\nbarrel_diameter = 6;\ntrack_width = 10;\ntrack_height = 8;\nwheel_diameter = 12;\nnum_wheels = 5;\nground_clearance = 8;\n\n// Main body module\nmodule tank_body() {\n    difference() {\n        // Main hull\n        hull();\n        \n        // Driver hatch\n        translate([body_length/2 - 15, 0, body_height - 2])\n            rotate([0, 20, 0])\n            cube([12, 8, 2], center=true);\n        \n        // Turret ring hole\n        translate([body_length/4, 0, body_height])\n            cylinder(h=wall_thickness*2, d=turret_diameter - wall_thickness, $fn=32);\n    }\n}\n\n// Hull with angled front\nmodule hull() {\n    union() {\n        // Main rectangular part\n        translate([0, 0, body_height/2])\n            cube([body_length - 10, body_width, body_height], center=true);\n        \n        // Angled front\n        translate([body_length/2 - 5, 0, body_height/2])\n            rotate([0, 10, 0])\n            cube([20, body_width, body_height], center=true);\n    }\n}\n\n// Turret module\nmodule turret() {\n    translate([body_length/4, 0, body_height + turret_height/2]) {\n        union() {\n            // Main turret body\n            cylinder(h=turret_height, d=turret_diameter, $fn=32);\n            \n            // Turret top details\n            translate([0, 0, turret_height/2])\n                cylinder(h=wall_thickness, d=turret_diameter - 10, $fn=32);\n            \n            // Commander's cupola\n            translate([turret_diameter/4, 0, turret_height/2 + wall_thickness])\n                rotate([0, 0, 45])\n                cube([12, 12, 8], center=true);\n            \n            // Main gun barrel\n            translate([turret_diameter/2 + barrel_length/2, 0, 0])\n                rotate([0, -5, 0])\n                cylinder(h=barrel_length, d=barrel_diameter, $fn=16);\n            \n            // Barrel support\n            translate([turret_diameter/2 - 5, 0, -turret_height/4])\n                cube([10, barrel_diameter + 4, turret_height/2], center=true);\n        }\n    }\n}\n\n// Track module with wheels\nmodule track_assembly(side) {\n    y_pos = side * (body_width/2 + track_width/2);\n    \n    translate([0, y_pos, ground_clearance + track_height/2]) {\n        union() {\n            // Track housing\n            track_housing();\n            \n            // Road wheels\n            for(i = [0:num_wheels-1]) {\n                x_pos = -body_length/2 + 15 + i * (body_length - 30)/(num_wheels-1);\n                translate([x_pos, 0, track_height/2 + wheel_diameter/2])\n                    rotate([90, 0, 0])\n                    cylinder(h=track_width - wall_thickness, d=wheel_diameter, center=true, $fn=16);\n            }\n            \n            // Drive sprocket (rear)\n            translate([body_length/2 - 15, 0, track_height/2 + wheel_diameter/2])\n                rotate([90, 0, 0])\n                cylinder(h=track_width - wall_thickness, d=wheel_diameter + 4, center=true, $fn=20);\n            \n            // Idler wheel (front)\n            translate([-body_length/2 + 15, 0, track_height/2 + wheel_diameter/2])\n                rotate([90, 0, 0])\n                cylinder(h=track_width - wall_thickness, d=wheel_diameter, center=true, $fn=16);\n        }\n    }\n}\n\n// Track housing\nmodule track_housing() {\n    difference() {\n        // Outer track\n        cube([body_length, track_width, track_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness])\n            cube([body_length - wall_thickness*2, track_width - wall_thickness*2, track_height + wall_thickness], center=true);\n        \n        // Ground contact pads\n        for(i = [0:floor(body_length/8)]) {\n            x_pos = -body_length/2 + 4 + i * 8;\n            translate([x_pos, 0, -track_height/2 + wall_thickness])\n                cube([6, track_width - wall_thickness, wall_thickness], center=true);\n        }\n    }\n}\n\n// Rear storage box\nmodule storage_box() {\n    translate([-body_length/2 + 10, 0, body_height + 5]) {\n        difference() {\n            cube([20, body_width - 20, 8], center=true);\n            translate([0, 0, -wall_thickness])\n                cube([20 - wall_thickness*2, body_width - 20 - wall_thickness*2, 8 + wall_thickness], center=true);\n        }\n    }\n}\n\n// Exhaust pipe\nmodule exhaust() {\n    translate([-body_length/2 + 5, body_width/3, body_height - 5]) {\n        rotate([0, 90, 0])\n            cylinder(h=15, d=4, $fn=12);\n    }\n}\n\n// Main assembly\nunion() {\n    // Tank body\n    tank_body();\n    \n    // Turret\n    turret();\n    \n    // Left track assembly\n    track_assembly(-1);\n    \n    // Right track assembly\n    track_assembly(1);\n    \n    // Rear storage box\n    storage_box();\n    \n    // Exhaust pipe\n    exhaust();\n}",
    "renders": true
  },
  {
    "natural_object": "jeep",
    "openscad_code": "// Realistic Jeep Bookshelf / Storage Unit (3D printable, medium complexity)\n// Overall dimensions: 120mm x 70mm x 60mm (L x W x H)\n\n$fn = 32;\n\n// Main body module\nmodule jeep_body() {\n    // Floor plate (2mm thick)\n    translate([0, 0, 2]) cube([120, 70, 2], center = true);\n    \n    // Side walls (2mm thick)\n    // Left wall\n    translate([-59, 0, 33]) cube([2, 66, 62], center = true);\n    // Right wall\n    translate([59, 0, 33]) cube([2, 66, 62], center = true);\n    \n    // Back wall\n    translate([0, -34, 33]) cube([116, 2, 62], center = true);\n    \n    // Front grill area\n    translate([0, 34, 33]) cube([116, 2, 62], center = true);\n}\n\n// Hood module (angled front hood)\nmodule jeep_hood() {\n    // Main hood top\n    translate([30, 35, 50]) rotate([30, 0, 0]) \n        cube([60, 2, 35], center = true);\n    \n    // Hood sides\n    translate([0, 35, 52]) cube([120, 2, 30], center = true);\n}\n\n// Wheels (4 wheels with realistic proportions)\nmodule wheel(pos_x, pos_y) {\n    translate([pos_x, pos_y, 6]) {\n        // Tire\n        cylinder(h = 12, r = 10, center = true);\n        // Rim\n        difference() {\n            cylinder(h = 12.2, r = 7, center = true);\n            cylinder(h = 12.4, r = 4, center = true);\n        }\n    }\n}\n\n// Headlights\nmodule headlights() {\n    // Left headlight\n    translate([-25, 35, 45]) cylinder(h = 5, r = 6, center = true);\n    // Right headlight\n    translate([25, 35, 45]) cylinder(h = 5, r = 6, center = true);\n}\n\n// Windshield frame\nmodule windshield() {\n    // Bottom frame\n    translate([0, 20, 60]) cube([100, 2, 2], center = true);\n    // Left post\n    translate([-49, 27, 65]) cube([2, 14, 10], center = true);\n    // Right post\n    translate([49, 27, 65]) cube([2, 14, 10], center = true);\n    // Top frame\n    translate([0, 34, 70]) cube([100, 2, 2], center = true);\n}\n\n// Handle for pulling (furniture feature)\nmodule handle() {\n    translate([0, 0, 75]) rotate([90, 0, 0])\n        cylinder(h = 40, r = 3, center = true);\n    translate([-20, 0, 75]) sphere(r = 3);\n    translate([20, 0, 75]) sphere(r = 3);\n}\n\n// Interior shelf supports\nmodule shelf_supports() {\n    // Front supports\n    for (x = [-40, 0, 40]) {\n        translate([x, 30, 35]) cube([4, 4, 30], center = true);\n    }\n    // Back supports\n    for (x = [-40, 0, 40]) {\n        translate([x, -30, 35]) cube([4, 4, 30], center = true);\n    }\n}\n\n// Shelf\nmodule shelf() {\n    translate([0, 0, 50]) cube([110, 60, 2], center = true);\n}\n\n// Grille details\nmodule grille() {\n    // Vertical bars\n    for (x = [-45:10:45]) {\n        translate([x, 35, 33]) cube([2, 2, 30], center = true);\n    }\n}\n\n// Assemble the jeep furniture\nunion() {\n    // Main body structure\n    jeep_body();\n    \n    // Hood\n    jeep_hood();\n    \n    // Wheels\n    wheel(-40, -25);\n    wheel(40, -25);\n    wheel(-40, 25);\n    wheel(40, 25);\n    \n    // Headlights\n    headlights();\n    \n    // Windshield frame\n    windshield();\n    \n    // Handle\n    handle();\n    \n    // Interior furniture elements\n    shelf_supports();\n    shelf();\n    \n    // Grille details\n    grille();\n}",
    "renders": true
  },
  {
    "natural_object": "limo",
    "openscad_code": "// Limo Furniture - 3D Printable Chair\n// Realistic style, medium complexity\n// Overall dimensions: 100mm x 40mm x 50mm\n\n$fn = 32;\n\n// Main parameters\nchair_length = 100;\nchair_width = 40;\nchair_height = 50;\nseat_height = 25;\nbackrest_height = 30;\nwall_thickness = 2;\n\n// Main seat base\nmodule seat_base() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n            cube([chair_length - 20, chair_width - 10, seat_height], center=true);\n        \n        // Hollow out for weight reduction\n        translate([0, 0, seat_height/2])\n            cube([chair_length - 24, chair_width - 14, seat_height - wall_thickness], center=true);\n    }\n}\n\n// Backrest with limo-style curve\nmodule backrest() {\n    difference() {\n        union() {\n            // Main backrest\n            translate([0, 0, seat_height + backrest_height/2])\n                cube([chair_length - 20, chair_width - 10, backrest_height], center=true);\n            \n            // Top curve detail\n            translate([0, 0, seat_height + backrest_height])\n                scale([1, 0.8, 0.3])\n                    sphere(d=chair_length - 20);\n        }\n        \n        // Hollow out backrest\n        translate([0, 0, seat_height + backrest_height/2])\n            cube([chair_length - 24, chair_width - 14, backrest_height - wall_thickness], center=true);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-chair_length/2 + 5, -chair_width/2 + 5, seat_height + 5])\n        cube([10, wall_thickness + 3, 15]);\n    \n    // Right armrest\n    translate([-chair_length/2 + 5, chair_width/2 - 8, seat_height + 5])\n        cube([10, wall_thickness + 3, 15]);\n}\n\n// Limo-style wheel arches (decorative)\nmodule wheel_arches() {\n    for (x = [-30, 30]) {\n        translate([x, 0, 8])\n            scale([1, 0.5, 0.3])\n                sphere(d=15);\n    }\n}\n\n// Support legs with limo-style sleek design\nmodule legs() {\n    // Front legs\n    for (x = [-chair_length/2 + 15, chair_length/2 - 15]) {\n        translate([x, -chair_width/2 + 5, seat_height/2])\n            cylinder(h=seat_height, d=6);\n    }\n    \n    // Back legs\n    for (x = [-chair_length/2 + 15, chair_length/2 - 15]) {\n        translate([x, chair_width/2 - 5, seat_height/2])\n            cylinder(h=seat_height, d=6);\n    }\n}\n\n// Seat cushion detail\nmodule seat_cushion() {\n    translate([0, 0, seat_height + 2])\n        cube([chair_length - 22, chair_width - 12, 4], center=true);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    seat_base();\n    backrest();\n    \n    // Add decorative elements\n    armrests();\n    legs();\n    \n    // Seat details\n    seat_cushion();\n    \n    // Add limo-style wheel arches as decorative elements\n    wheel_arches();\n}",
    "renders": true
  },
  {
    "natural_object": "convertible",
    "openscad_code": "// Convertible Ottoman / Side Table\n// Opens to reveal internal storage compartment\n// External: 120x120x120mm closed, 120x120x240mm open\n\nmodule rounded_cube(s, r) {\n    // Create a cube with rounded edges\n    hull() {\n        for (dx = [r, s.x-r], dy = [r, s.y-r], dz = [r, s.z-r]) {\n            translate([dx, dy, dz])\n                sphere(r);\n        }\n    }\n}\n\nmodule ottoman_base() {\n    difference() {\n        // Main base body\n        rounded_cube([120, 120, 60], 5);\n        \n        // Hollow interior\n        translate([10, 10, 10])\n            rounded_cube([100, 100, 45], 3);\n            \n        // Finger notch for opening\n        translate([55, 1, 40])\n            cube([10, 10, 15]);\n    }\n}\n\nmodule ottoman_lid() {\n    // Top cushion/lid\n    difference() {\n        translate([0, 0, 60])\n            rounded_cube([120, 120, 20], 5);\n            \n        // Hollow underside\n        translate([10, 10, 65])\n            rounded_cube([100, 100, 10], 3);\n            \n        // Matching finger notch\n        translate([55, 109, 70])\n            cube([10, 10, 15]);\n    }\n    \n    // Cushion tufting details\n    for (x = [30, 90])\n        for (y = [30, 90])\n            translate([x, y, 75])\n                cylinder(h=3, r=5, $fn=20);\n}\n\nmodule table_legs() {\n    // Four folding legs\n    for (x = [15, 105]) {\n        for (y = [15, 105]) {\n            translate([x, y, 80]) {\n                rotate([0, (x==15)?0:180, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=50, r=2, $fn=12);\n                translate([0, 0, 50])\n                    rotate([0, (x==15)?0:180, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=48, r=2, $fn=12);\n            }\n        }\n    }\n}\n\nmodule table_top() {\n    // Flat surface when converted to table\n    difference() {\n        translate([0, 0, 130])\n            rounded_cube([120, 120, 8], 3);\n            \n        // Lightening holes\n        for (x = [30, 90])\n            for (y = [30, 90])\n                translate([x, y, 134])\n                    cylinder(h=4, r=8, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    ottoman_base();\n    ottoman_lid();\n    table_legs();\n    table_top();\n}",
    "renders": true
  },
  {
    "natural_object": "coupe",
    "openscad_code": "// Coupe furniture (sideboard / buffet) with realistic proportions\n// Overall dimensions: 120 mm W × 45 mm D × 90 mm H\n// Wall thickness 2 mm, overhangs ≤ 45° for easy printing\n\nmodule coupe() {\n    // Main carcass\n    difference() {\n        union() {\n            // Bottom board\n            translate([0, 0, 0])\n                cube([116, 41, 2], center = true);\n\n            // Top board\n            translate([0, 0, 88])\n                cube([120, 45, 2], center = true);\n\n            // Left side\n            translate([-58, 0, 44])\n                cube([2, 41, 88], center = true);\n\n            // Right side\n            translate([58, 0, 44])\n                cube([2, 41, 88], center = true);\n\n            // Back panel\n            translate([0, -20.5, 44])\n                cube([116, 2, 88], center = true);\n\n            // Central vertical divider\n            translate([0, 0, 44])\n                cube([2, 39, 88], center = true);\n        }\n\n        // Cut-outs for doors\n        translate([-28, 0, 44])\n            cube([54, 39, 86], center = true);\n        translate([28, 0, 44])\n            cube([54, 39, 86], center = true);\n    }\n\n    // Left door\n    translate([-28, 0, 45])\n        door();\n\n    // Right door\n    mirror([1, 0, 0])\n        translate([-28, 0, 45])\n            door();\n\n    // Drawer bank above\n    for (y = [66, 78]) {\n        translate([0, 0, y])\n            drawer();\n    }\n\n    // Legs\n    for (x = [-55, 55])\n        for (y = [-19, 19])\n            translate([x, y, -2])\n                cylinder(h = 4, d = 6, $fn = 20);\n}\n\nmodule door() {\n    difference() {\n        // Door slab 2 mm thick\n        cube([54, 39, 2], center = true);\n\n        // Recessed panel\n        translate([0, 0, -0.5])\n            cube([46, 33, 2], center = true);\n\n        // Handle hole\n        translate([26, 0, 0])\n            cylinder(h = 4, d = 3, center = true, $fn = 16);\n    }\n}\n\nmodule drawer() {\n    difference() {\n        // Drawer front 18 mm thick\n        cube([116, 41, 10], center = true);\n\n        // Recessed panel\n        translate([0, 0, -4])\n            cube([110, 35, 10], center = true);\n\n        // Handle slot\n        translate([0, 0, 0])\n            cube([30, 4, 12], center = true);\n    }\n}\n\n// Render\ncoupe();",
    "renders": true
  },
  {
    "natural_object": "sedan",
    "openscad_code": "// OpenSCAD code for a 3D-printable sedan chair / miniature sedan furniture\n// Overall printable size ~100 mm long, 45 mm wide, 35 mm tall\n// Wall thickness kept at 2 mm for printability\n\n$fn = 24;               // moderate smoothness\n\n// Main module\nmodule sedan_chair() {\n    difference() {\n        union() {\n            // Seat box / lower body\n            translate([0, 0, 10])\n                cube([80, 40, 20], center = true);\n\n            // Roof\n            translate([0, 0, 35])\n                scale([1, 0.8, 0.3])\n                sphere(25);\n\n            // Front pillars\n            for (x = [-25, 25])\n                translate([x, 18, 22])\n                    rotate([-90, 0, 0])\n                    cylinder(h = 15, d = 4);\n\n            // Rear pillars\n            for (x = [-25, 25])\n                translate([x, -18, 22])\n                    rotate([-90, 0, 0])\n                    cylinder(h = 15, d = 4);\n\n            // Armrests\n            for (y = [-15, 15])\n                translate([30, y, 25])\n                    cube([40, 8, 2], center = true);\n\n            // Backrest\n            translate([0, -18, 22])\n                cube([70, 2, 20], center = true);\n\n            // Floor runners / skids\n            for (y = [-15, 15])\n                translate([0, y, 3])\n                    cube([85, 4, 4], center = true);\n\n            // Carrying poles\n            for (z = [15, 25])\n                rotate([0, 90, 0])\n                translate([0, 0, z])\n                    cylinder(h = 100, d = 5);\n        }\n\n        // Hollow out interior\n        translate([0, 0, 11])\n            cube([76, 36, 18], center = true);\n\n        // Door openings\n        for (y = [-20, 20]) {\n            translate([0, y, 20])\n                rotate([0, 0, 0])\n                cube([30, 2, 18], center = true);\n        }\n    }\n\n    // Seat cushion\n    translate([0, 0, 21])\n        cube([50, 30, 3], center = true);\n\n    // Decorative side panels\n    for (x = [-38, 38]) {\n        translate([x, 0, 18])\n            cube([2, 36, 10], center = true);\n    }\n}\n\n// Render the model centered on the build plate\ntranslate([0, 0, 0])\n    sedan_chair();",
    "renders": true
  },
  {
    "natural_object": "hatchback",
    "openscad_code": "// Hatchback Furniture (Storage Bench)\n// Dimensions: 120mm wide x 50mm deep x 60mm tall\n\n$fn = 32;\n\n// Wall thickness\nwall = 2;\n\n// Overall dimensions\nwidth = 120;\ndepth = 50;\nheight = 60;\n\n// Main body module\nmodule hatchback_body() {\n    // Main cabinet body\n    difference() {\n        // Outer shell\n        cube([width, depth, height]);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-wall]);\n    }\n    \n    // Back panel (thicker for stability)\n    translate([0, depth-wall, 0])\n        cube([width, wall, height]);\n}\n\n// Hatchback door module\nmodule hatchback_door() {\n    // Door panel\n    translate([-wall, 0, 0])\n    rotate([0, -30, 0])\n    translate([0, 0, 0]) {\n        difference() {\n            cube([width/2, depth+2*wall, height-wall]);\n            \n            // Inner cavity\n            translate([wall, wall, wall])\n                cube([width/2-2*wall, depth, height-2*wall]);\n        }\n        \n        // Handle cutout\n        translate([width/4, depth/2, height/2])\n            rotate([0, 45, 0])\n            cube([10, 2, 5]);\n    }\n    \n    // Handle\n    translate([width/4-5, depth+2, height/2])\n        cylinder(h=8, r1=3, r2=2);\n}\n\n// Leg supports\nmodule legs() {\n    leg_height = 8;\n    leg_size = 4;\n    \n    // Four legs at corners\n    for(x = [wall, width-wall-leg_size]) {\n        for(y = [wall, depth-wall-leg_size]) {\n            translate([x, y, -leg_height])\n                cylinder(h=leg_height, d=leg_size*2);\n        }\n    }\n}\n\n// Ventilation slots\nmodule ventilation() {\n    slot_width = 3;\n    slot_height = 2;\n    num_slots = 8;\n    \n    translate([width/2, depth-wall/2, height/2])\n    rotate([90, 0, 0])\n    for(i = [0:num_slots-1]) {\n        translate([(i-num_slots/2)*8, 0, 0])\n            cube([slot_width, slot_height, wall]);\n    }\n}\n\n// Assembly\nunion() {\n    hatchback_body();\n    hatchback_door();\n    legs();\n    ventilation();\n}",
    "renders": true
  },
  {
    "natural_object": "pickup",
    "openscad_code": "// Realistic Pickup Truck Furniture – medium complexity\n// External dimensions: 110 mm long × 50 mm wide × 45 mm high\n// Wall thickness: 2 mm to be printable without supports\n// All overhangs ≤ 45°\n\n// Color definitions (only for preview)\n$fa = 2; $fs = 0.5;\n\nmodule pickup() {\n    difference() {\n        // Main cab shell – hollow box\n        union() {\n            // Roof\n            translate([55, 25, 42])\n                cube([30, 50, 3], center = true);\n\n            // Cab body\n            translate([38, 25, 20])\n                cube([36, 50, 40], center = true);\n\n            // Hood slope\n            translate([15, 25, 28])\n                rotate([0, -20, 0])\n                cube([35, 46, 18], center = true);\n\n            // Bed sides\n            translate([77, 25, 28])\n                cube([30, 52, 6], center = true);\n\n            // Bed floor\n            translate([77, 25, 19])\n                cube([30, 48, 2], center = true);\n\n            // Front bumper\n            translate([4, 25, 12])\n                cube([8, 44, 10], center = true);\n\n            // Rear bumper\n            translate([106, 25, 12])\n                cube([8, 44, 10], center = true);\n        }\n\n        // Hollow out cab\n        translate([38, 25, 20])\n            cube([32, 46, 38], center = true);\n\n        // Hollow out hood\n        translate([15, 25, 28])\n            rotate([0, -20, 0])\n            cube([31, 42, 14], center = true);\n\n        // Wheel wells front\n        translate([20, 10, 12])\n            cylinder(h = 24, r = 9, center = true);\n        translate([20, 40, 12])\n            cylinder(h = 24, r = 9, center = true);\n\n        // Wheel wells rear\n        translate([90, 10, 12])\n            cylinder(h = 24, r = 9, center = true);\n        translate([90, 40, 12])\n            cylinder(h = 24, r = 9, center = true);\n\n        // Windows\n        translate([35, 25, 30])\n            cube([22, 44, 20], center = true);\n        translate([55, 25, 30])\n            cube([22, 44, 20], center = true);\n    }\n\n    // Wheels\n    module wheel() {\n        difference() {\n            cylinder(h = 10, r = 9, center = true);\n            translate([0, 0, 3])\n                cylinder(h = 12, r = 5, center = true);\n        }\n    }\n\n    for (x = [20, 90])\n        for (y = [10, 40])\n            translate([x, y, 0])\n                rotate([90, 0, 0])\n                    wheel();\n\n    // Headlights\n    translate([8, 15, 22])\n        sphere(3);\n    translate([8, 35, 22])\n        sphere(3);\n\n    // Taillights\n    translate([104, 15, 22])\n        sphere(3);\n    translate([104, 35, 22])\n        sphere(3);\n\n    // Side mirrors\n    translate([38, 0, 35])\n        cube([4, 6, 2], center = true);\n    translate([38, 50, 35])\n        cube([4, 6, 2], center = true);\n\n    // Door handles\n    translate([30, 48, 22])\n        cube([8, 2, 2], center = true);\n    translate([50, 48, 22])\n        cube([8, 2, 2], center = true);\n}\n\npickup();",
    "renders": true
  },
  {
    "natural_object": "roadster",
    "openscad_code": "// Roadster-style desk chair\n// Overall dimensions: 120mm (length) x 60mm (width) x 120mm (height)\n\n$fn = 32;  // Smooth curves\n\n// Chair parameters\nwheel_radius = 8;\nwheel_thickness = 4;\nleg_length = 70;\nseat_height = 50;\nseat_width = 50;\nseat_depth = 55;\nbackrest_height = 70;\nbackrest_width = 45;\narmrest_height = 20;\narmrest_width = 5;\n\n// Main chair module\nmodule roadster_chair() {\n    // Base with 5 wheels\n    union() {\n        // Central column\n        cylinder(h = leg_length, r = 6, center = false);\n        \n        // 5 wheels arranged in star pattern\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72]) \n                translate([30, 0, 0]) \n                    wheel();\n        }\n        \n        // Gas cylinder top\n        translate([0, 0, leg_length - 5]) \n            cylinder(h = 10, r1 = 8, r2 = 6, center = false);\n    }\n    \n    // Seat base\n    translate([0, 0, leg_length + 5]) \n        seat();\n    \n    // Backrest\n    translate([0, -seat_depth/2 + 5, leg_length + 5 + seat_height]) \n        backrest();\n    \n    // Armrests\n    armrests();\n}\n\n// Wheel module\nmodule wheel() {\n    // Wheel tire\n    color(\"black\") \n        cylinder(h = wheel_thickness, r = wheel_radius, center = true);\n    \n    // Wheel hub\n    color(\"gray\") \n        translate([0, 0, 0]) \n            cylinder(h = wheel_thickness + 0.5, r = wheel_radius/2, center = true);\n    \n    // Wheel fork\n    translate([0, 0, wheel_thickness/2 + 1]) \n        rotate([90, 0, 0]) \n            cylinder(h = 10, r = 2, center = false);\n}\n\n// Seat module\nmodule seat() {\n    // Seat cushion\n    difference() {\n        // Main seat\n        translate([0, 0, seat_height/2]) \n            cube([seat_width, seat_depth, seat_height], center = true);\n        \n        // Rounded edges\n        translate([0, 0, seat_height/2 - 2]) \n            cube([seat_width - 4, seat_depth - 4, seat_height + 2], center = true);\n    }\n    \n    // Seat surface details\n    for (i = [-1:1]) {\n        translate([i * 15, 0, seat_height]) \n            cube([3, seat_depth - 10, 2], center = true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    // Main backrest\n    difference() {\n        // Backrest shape\n        translate([0, 0, backrest_height/2]) \n            cube([backrest_width, 8, backrest_height], center = true);\n        \n        // Rounded top\n        translate([0, 0, backrest_height - 5]) \n            cylinder(h = 10, r = backrest_width/2, center = true);\n    }\n    \n    // Lumbar support\n    translate([0, 4, backrest_height/3]) \n        cube([backrest_width - 10, 2, 25], center = true);\n    \n    // Headrest\n    translate([0, 0, backrest_height - 5]) \n        cylinder(h = 15, r1 = 15, r2 = 10, center = false);\n}\n\n// Armrests module\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - armrest_width/2, 0, leg_length + 5 + seat_height/2 + armrest_height/2]) \n        armrest();\n    \n    // Right armrest\n    translate([seat_width/2 + armrest_width/2, 0, leg_length + 5 + seat_height/2 + armrest_height/2]) \n        armrest();\n}\n\n// Single armrest\nmodule armrest() {\n    // Vertical support\n    cube([armrest_width, 8, armrest_height], center = true);\n    \n    // Horizontal pad\n    translate([0, 15, armrest_height/2 - 2]) \n        cube([armrest_width + 5, 20, 3], center = true);\n}\n\n// Render the chair\nroadster_chair();",
    "renders": true
  },
  {
    "natural_object": "sportsvan",
    "openscad_code": "// Sportsvan Furniture - Realistic Style, Medium Complexity\n// Dimensions in mm, designed for 3D printing\n\nmodule sportsvan_furniture() {\n    \n    // Main van body - 120mm long, 50mm wide, 45mm high\n    difference() {\n        // Main body block\n        cube([120, 50, 45], center=false);\n        \n        // Windshield cavity\n        translate([115, 5, 25])\n            rotate([0, -15, 0])\n            cube([20, 40, 20], center=false);\n        \n        // Side windows (left side)\n        for(i = [0:1]) {\n            translate([20 + i*40, -1, 30])\n                cube([25, 2, 12]);\n        }\n        \n        // Side windows (right side)\n        for(i = [0:1]) {\n            translate([20 + i*40, 49, 30])\n                cube([25, 2, 12]);\n        }\n    }\n    \n    // Roof rack structure\n    translate([10, 25, 45])\n        cube([100, 2, 2]);\n    translate([10, 48, 45])\n        cube([100, 2, 2]);\n    \n    // Roof rack cross bars\n    for(pos = [30, 70, 110]) {\n        translate([pos, 25, 45])\n            cube([2, 25, 2]);\n    }\n    \n    // Front bumper\n    translate([0, 5, 10])\n        cube([5, 40, 10]);\n    \n    // Rear bumper\n    translate([115, 5, 10])\n        cube([5, 40, 10]);\n    \n    // Wheels (4 wheels with 2mm wall thickness)\n    // Front left\n    translate([10, 5, 0])\n        cylinder(h=8, r=8);\n    translate([12, 5, 1])\n        cylinder(h=6, r=6);\n    \n    // Front right\n    translate([10, 45, 0])\n        cylinder(h=8, r=8);\n    translate([12, 45, 1])\n        cylinder(h=6, r=6);\n    \n    // Rear left\n    translate([90, 5, 0])\n        cylinder(h=8, r=8);\n    translate([92, 5, 1])\n        cylinder(h=6, r=6);\n    \n    // Rear right\n    translate([90, 45, 0])\n        cylinder(h=8, r=8);\n    translate([92, 45, 1])\n        cylinder(h=6, r=6);\n    \n    // Side mirrors\n    translate([115, 5, 35])\n        cube([5, 3, 3]);\n    translate([115, 42, 35])\n        cube([5, 3, 3]);\n    \n    // Headlights\n    translate([2, 10, 20])\n        cube([2, 8, 5]);\n    translate([2, 32, 20])\n        cube([2, 8, 5]);\n    \n    // Taillights\n    translate([118, 10, 25])\n        cube([2, 8, 5]);\n    translate([118, 32, 25])\n        cube([2, 8, 5]);\n    \n    // Door handles\n    translate([60, 49, 20])\n        cube([10, 2, 1]);\n    translate([60, -1, 20])\n        cube([10, 2, 1]);\n    \n    // Ventilation grill\n    translate([1, 20, 15])\n        for(i = [0:3]) {\n            translate([0, i*3, 0])\n                cube([1, 2, 4]);\n        }\n}\n\n// Render the sportsvan\nsportsvan_furniture();",
    "renders": true
  },
  {
    "natural_object": "minibus",
    "openscad_code": "// Minibus Furniture - A toy-scale minibus with built-in drawer storage\n// Overall size: 120 mm long x 50 mm wide x 55 mm high\n// Wall thickness: 2 mm for 3D printability\n\n$fn = 32;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer rounded body\n        minkowski() {\n            cube([110, 40, 35], center = true);\n            sphere(5);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            minkowski() {\n                cube([104, 34, 33], center = true);\n                sphere(3);\n            }\n        \n        // Wheel arches\n        for(side = [-1, 1])\n            translate([30, side * 22, -15])\n                rotate([90, 0, 0])\n                    cylinder(h = 30, d = 22);\n    }\n}\n\n// Front windshield and cab area\nmodule cab() {\n    translate([-55, 0, 5])\n        difference() {\n            // Cab structure\n            minkowski() {\n                cube([30, 40, 30], center = true);\n                sphere(3);\n            }\n            \n            // Windshield opening\n            translate([5, 0, 5])\n                rotate([20, 0, 0])\n                    cube([20, 36, 25], center = true);\n        }\n}\n\n// Wheels with realistic tire pattern\nmodule wheel(pos_x, pos_y) {\n    translate([pos_x, pos_y, -8]) {\n        // Tire\n        difference() {\n            cylinder(h = 12, d = 24);\n            translate([0, 0, 2])\n                cylinder(h = 14, d = 18);\n        }\n        \n        // Rim\n        translate([0, 0, 2])\n            cylinder(h = 2, d = 16);\n        \n        // Hub bolts (5 bolts)\n        for(i = [0:4])\n            rotate([0, 0, i * 72])\n                translate([6, 0, 2])\n                    cylinder(h = 2, d = 3);\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(side = [-1, 1])\n        for(x = [-20, 0, 25])\n            translate([x, side * 18, 10])\n                cube([18, 4, 15], center = true);\n}\n\n// Rear door storage drawer\nmodule storage_drawer() {\n    translate([50, 0, -5]) {\n        // Drawer box\n        difference() {\n            cube([20, 35, 20], center = true);\n            translate([0, 0, 2])\n                cube([16, 31, 18], center = true);\n        }\n        \n        // Drawer front with handle\n        translate([9, 0, 0])\n            cube([2, 35, 20], center = true);\n        translate([10, 0, -8])\n            cylinder(h = 2, d = 12);\n    }\n}\n\n// Roof rack rails\nmodule roof_rack() {\n    for(side = [-1, 1])\n        translate([0, side * 15, 22])\n            cube([90, 2, 2], center = true);\n    \n    // Cross bars\n    for(x = [-30, 0, 30])\n        translate([x, 0, 22])\n            cube([2, 30, 2], center = true);\n}\n\n// Headlights\nmodule headlights() {\n    translate([-65, 15, 0]) {\n        cube([4, 6, 6], center = true);\n        translate([2, 0, 0])\n            sphere(3);\n    }\n    translate([-65, -15, 0]) {\n        cube([4, 6, 6], center = true);\n        translate([2, 0, 0])\n            sphere(3);\n    }\n}\n\n// Assembly\nunion() {\n    body_shell();\n    cab();\n    side_windows();\n    storage_drawer();\n    roof_rack();\n    headlights();\n    \n    // Wheels\n    wheel(30, 22);\n    wheel(30, -22);\n    wheel(-30, 22);\n    wheel(-30, -22);\n}",
    "renders": true
  },
  {
    "natural_object": "doubledecker",
    "openscad_code": "// Double-decker shoe rack\n// Overall footprint 120 mm x 250 mm x 220 mm (L x W x H)\n// Wall thickness 2 mm throughout\n\nmodule shelf(width, depth, thick) {\n    // Slatted top surface\n    for (x = [0 : 10 : width-10]) {\n        translate([x, 0, 0])\n            cube([10, depth, thick]);\n    }\n}\n\nmodule leg(h, thick) {\n    // Simple rectangular leg with rounded bottom\n    union() {\n        cube([thick, thick, h], center=false);\n        translate([thick/2, thick/2, -thick/2])\n            cylinder(h=thick, r=thick/2, $fn=20);\n    }\n}\n\nmodule back_panel(w, h, thick) {\n    // Perforated back panel for airflow\n    difference() {\n        cube([w, thick, h]);\n        for (y = [5 : 15 : h-10]) {\n            for (x = [10 : 15 : w-10]) {\n                translate([x, -1, y])\n                    cube([8, thick+2, 8]);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Lower shelf\n    translate([0, 0, 0])\n        shelf(120, 250, 2);\n\n    // Lower legs\n    translate([2, 2, 2])\n        leg(100, 2);\n    translate([2, 250-4, 2])\n        leg(100, 2);\n    translate([120-4, 2, 2])\n        leg(100, 2);\n    translate([120-4, 250-4, 2])\n        leg(100, 2);\n\n    // Lower back panel\n    translate([0, 2, 2])\n        back_panel(120, 100, 2);\n\n    // Upper shelf\n    translate([0, 0, 102])\n        shelf(120, 250, 2);\n\n    // Upper legs (from lower shelf to upper shelf)\n    translate([2, 2, 102])\n        leg(120, 2);\n    translate([2, 250-4, 102])\n        leg(120, 2);\n    translate([120-4, 2, 102])\n        leg(120, 2);\n    translate([120-4, 250-4, 102])\n        leg(120, 2);\n\n    // Upper back panel\n    translate([0, 2, 102])\n        back_panel(120, 120, 2);\n\n    // Optional front lip on each shelf to keep shoes from sliding off\n    translate([0, 0, 2])\n        cube([120, 2, 8]);\n    translate([0, 0, 102])\n        cube([120, 2, 8]);\n}",
    "renders": true
  },
  {
    "natural_object": "cablecar",
    "openscad_code": "// Cablecar Furniture Item\n// Realistic style, medium complexity\n// 3D printable cablecar-shaped storage box\n\n// Wall thickness\nwall = 2;\n\n// Overall dimensions\nlength = 100;\nwidth = 50;\nheight = 60;\n\n// Cablecar body\nmodule body() {\n    difference() {\n        // Main body\n        translate([0, 0, height/2])\n            cube([length, width, height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, height/2])\n            cube([length-wall*2, width-wall*2, height-wall], center=true);\n    }\n}\n\n// Roof with slight arch\nmodule roof() {\n    translate([0, 0, height+3])\n        scale([1, 1, 0.3])\n            cylinder(h=20, r1=length/2+5, r2=length/2+5, center=true);\n}\n\n// Windows\nmodule windows() {\n    // Side windows\n    for (i = [-1, 1]) {\n        translate([i*length/4, width/2+0.1, height/2])\n            cube([20, wall, 25], center=true);\n        translate([i*length/4, -width/2-0.1, height/2])\n            cube([20, wall, 25], center=true);\n    }\n    \n    // Front/back windows\n    for (i = [-1, 1]) {\n        translate([length/2+0.1, 0, height/2])\n            cube([wall, 20, 25], center=true);\n        translate([-length/2-0.1, 0, height/2])\n            cube([wall, 20, 25], center=true);\n    }\n}\n\n// Support wheels\nmodule wheels() {\n    for (i = [-1, 1]) {\n        translate([i*length/3, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=8, center=true);\n        translate([i*length/3, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=8, center=true);\n    }\n}\n\n// Cable support arms\nmodule cable_arms() {\n    for (i = [-1, 1]) {\n        // Vertical support\n        translate([i*length/3, 0, height+10])\n            cylinder(h=20, r=3, center=true);\n        \n        // Horizontal arm\n        translate([i*length/3, 0, height+20])\n            rotate([0, 90, 0])\n                cylinder(h=30, r=3, center=true);\n        \n        // Cable holder\n        translate([i*length/3, 15, height+20])\n            difference() {\n                sphere(r=5);\n                translate([0, 0, -5])\n                    cube([10, 10, 10], center=true);\n            }\n    }\n}\n\n// Door handles\nmodule handles() {\n    // Side door handles\n    for (i = [-1, 1]) {\n        translate([i*length/2-5, width/2+wall/2, height/2])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    roof();\n    windows();\n    wheels();\n    cable_arms();\n    handles();\n}",
    "renders": true
  },
  {
    "natural_object": "gondolalift",
    "openscad_code": "// Gondolalift Furniture - Medium Complexity\n// A realistic miniature gondola lift designed as a functional furniture piece\n// Overall dimensions: ~80mm length x 40mm width x 45mm height\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule cabin_wall() {\n    // Main cabin walls with 2mm thickness\n    difference() {\n        cube([35, 30, 25], center = true);\n        translate([0, 0, 1])\n            cube([31, 26, 23], center = true);\n    }\n}\n\nmodule window_cutout() {\n    // Window openings on sides\n    rotate([90, 0, 0])\n        cube([12, 2, 8], center = true);\n}\n\nmodule support_frame() {\n    // Structural frame around cabin\n    hull() {\n        translate([0, 0, -12])\n            cylinder(h = 2, r = 3);\n        translate([0, 0, -8])\n            cylinder(h = 2, r = 3);\n    }\n}\n\nmodule cable_mount() {\n    // Top cable mounting bracket\n    translate([0, 0, 13])\n        difference() {\n            cube([20, 5, 8], center = true);\n            translate([0, 0, 2])\n                cylinder(h = 10, r = 2, center = true);\n        }\n}\n\nmodule bench_seat() {\n    // Interior bench seating\n    translate([0, 0, -5])\n        cube([25, 8, 2], center = true);\n}\n\nmodule door_panel() {\n    // Sliding door mechanism\n    translate([17.5, 0, 0])\n        cube([2, 20, 20], center = true);\n}\n\nmodule roof_structure() {\n    // Curved roof with realistic slope\n    translate([0, 0, 12.5])\n        scale([1, 1, 0.3])\n            sphere(r = 18);\n}\n\nmodule decorative_trim() {\n    // Bottom trim detail\n    linear_extrude(height = 2)\n        offset(delta = 2)\n            square([30, 22], center = true);\n}\n\nmodule gondola_cabin() {\n    union() {\n        // Main cabin body\n        cabin_wall();\n        \n        // Add windows on both sides\n        translate([0, 15, 5])\n            window_cutout();\n        translate([0, -15, 5])\n            window_cutout();\n        \n        // Support frame at corners\n        for(x = [-15, 15])\n            for(y = [-13, 13]) {\n                translate([x, y, 0])\n                    support_frame();\n            }\n        \n        // Interior bench\n        bench_seat();\n        \n        // Roof\n        difference() {\n            roof_structure();\n            translate([0, 0, 11])\n                cube([35, 35, 10], center = true);\n        }\n        \n        // Cable mounting\n        cable_mount();\n        \n        // Door\n        door_panel();\n        \n        // Bottom decorative trim\n        translate([0, 0, -13])\n            decorative_trim();\n    }\n}\n\nmodule base_platform() {\n    // Display base with realistic texture\n    difference() {\n        cube([60, 40, 4], center = true);\n        translate([0, 0, 2])\n            cube([56, 36, 4], center = true);\n    }\n}\n\nmodule support_tower() {\n    // Central support tower\n    translate([0, 0, -15])\n        cylinder(h = 30, r = 5);\n    \n    // Cross bracing\n    for(i = [-1, 1]) {\n        translate([i * 15, 0, -10])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r = 1);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 15])\n    gondola_cabin();\n\ntranslate([0, 0, -2])\n    base_platform();\n\n// Add support structure\nsupport_tower();",
    "renders": true
  },
  {
    "natural_object": "funicular",
    "openscad_code": "// Funicular Chair - Realistic Style\n// A funicular-inspired chair with cable structure and seating platform\n\n// Parameters\nchair_width = 60;\nchair_depth = 50;\nchair_height = 80;\nleg_thickness = 2;\ncable_radius = 1.5;\nseat_thickness = 3;\nback_thickness = 2;\n\n// Main chair module\nmodule funicular_chair() {\n    // Base frame - simplified funicular structure\n    translate([0, 0, 0])\n        base_frame();\n    \n    // Cable supports\n    translate([0, 0, 0])\n        cable_structure();\n    \n    // Seat platform\n    translate([0, 0, chair_height - seat_thickness])\n        seat_platform();\n    \n    // Backrest\n    translate([0, -chair_depth/2 + back_thickness/2, chair_height - 25])\n        backrest();\n}\n\n// Base frame with funicular geometry\nmodule base_frame() {\n    // Front cross beam\n    color(\"DarkGoldenrod\")\n    translate([0, chair_depth/2 - 5, 5])\n        cube([chair_width - 10, leg_thickness, 10], center=true);\n    \n    // Rear cross beam\n    translate([0, -chair_depth/2 + 5, 5])\n        cube([chair_width - 10, leg_thickness, 10], center=true);\n    \n    // Side beams with funicular curve approximation\n    for(side = [-1, 1]) {\n        // Left and right curved supports\n        translate([side * (chair_width/2 - 5), 0, 0])\n            rotate([0, 0, 0])\n            curved_support();\n    }\n}\n\n// Curved support structure\nmodule curved_support() {\n    // Main curved leg\n    color(\"SaddleBrown\")\n    difference() {\n        // Outer curve\n        translate([0, 0, 5])\n            cylinder(h=50, r1=3, r2=5, center=false);\n        \n        // Inner hollow\n        translate([0, 0, 5.5])\n            cylinder(h=49, r1=1.5, r2=3.5, center=false);\n    }\n    \n    // Cable anchor points\n    for(i = [0:3]) {\n        translate([0, 0, 10 + i * 10])\n            cylinder(h=2, r=2, center=true);\n    }\n}\n\n// Cable structure connecting elements\nmodule cable_structure() {\n    color(\"Silver\")\n    // Front cables\n    for(side = [-1, 1]) {\n        for(pos = [-1, 1]) {\n            translate([side * (chair_width/2 - 15), pos * (chair_depth/2 - 15), 0])\n                cable(cable_radius);\n        }\n    }\n    \n    // Diagonal support cables\n    rotate([0, 0, 45])\n        translate([0, 0, 30])\n            cable(cable_radius * 0.8);\n}\n\n// Cable creation\nmodule cable(radius) {\n    hull() {\n        sphere(r=radius);\n        translate([0, 0, 25])\n            sphere(r=radius);\n    }\n}\n\n// Seat platform\nmodule seat_platform() {\n    color(\"BurlyWood\")\n    difference() {\n        // Main seat\n        translate([0, 0, 0])\n            cube([chair_width - 10, chair_depth - 10, seat_thickness], center=true);\n        \n        // Ventilation holes\n        for(x = [-20:10:20]) {\n            for(y = [-15:10:15]) {\n                translate([x, y, -seat_thickness/2 + 0.1])\n                    cylinder(h=seat_thickness + 0.2, r=2, center=true);\n            }\n        }\n    }\n    \n    // Edge trim\n    color(\"SandyBrown\")\n    translate([0, 0, seat_thickness/2])\n        cube([chair_width - 8, chair_depth - 8, 1], center=true);\n}\n\n// Backrest\nmodule backrest() {\n    color(\"BurlyWood\")\n    difference() {\n        // Main backrest\n        translate([0, 0, 0])\n            cube([chair_width - 20, back_thickness, 30], center=true);\n        \n        // Decorative cutouts\n        for(i = [-1, 0, 1]) {\n            translate([i * 12, 0, 0])\n                cube([8, back_thickness + 0.2, 20], center=true);\n        }\n    }\n    \n    // Top rail\n    color(\"SandyBrown\")\n    translate([0, 0, 15.5])\n        cube([chair_width - 18, back_thickness + 2, 2], center=true);\n}\n\n// Assembly\nfunicular_chair();",
    "renders": true
  },
  {
    "natural_object": "elevator",
    "openscad_code": "// Elevator furniture model\n// Medium complexity, realistic style\n// Size: 60mm x 60mm x 120mm\n\n$fn = 32;\n\n// Main dimensions\nwall_thickness = 2;\nelevator_width = 60;\nelevator_depth = 60;\nelevator_height = 120;\ndoor_width = 25;\ndoor_height = 100;\nhandrail_height = 90;\nhandrail_diameter = 3;\n\nmodule elevator_shaft() {\n    // Outer walls\n    difference() {\n        // Main box\n        cube([elevator_width, elevator_depth, elevator_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        cube([elevator_width - 2*wall_thickness, \n              elevator_depth - 2*wall_thickness, \n              elevator_height], center = true);\n    }\n}\n\nmodule elevator_doors() {\n    // Left door\n    translate([-door_width/2 - 1, elevator_depth/2 - wall_thickness, -elevator_height/2 + door_height/2])\n    cube([door_width, wall_thickness, door_height]);\n    \n    // Right door\n    translate([door_width/2 + 1, elevator_depth/2 - wall_thickness, -elevator_height/2 + door_height/2])\n    cube([door_width, wall_thickness, door_height]);\n    \n    // Door frame top\n    translate([0, elevator_depth/2 - wall_thickness/2, -elevator_height/2 + door_height + wall_thickness/2])\n    cube([door_width * 2 + 4, wall_thickness, wall_thickness]);\n}\n\nmodule floor_panel() {\n    // Floor\n    translate([0, 0, -elevator_height/2 + wall_thickness/2])\n    cube([elevator_width - 2*wall_thickness, \n          elevator_depth - 2*wall_thickness, \n          wall_thickness], center = true);\n    \n    // Floor texture - anti-slip strips\n    for(i = [-2:1:2]) {\n        translate([i * 8, 0, -elevator_height/2 + wall_thickness + 0.5])\n        cube([3, elevator_depth - 10, 1]);\n    }\n}\n\nmodule ceiling_panel() {\n    // Ceiling\n    translate([0, 0, elevator_height/2 - wall_thickness/2])\n    cube([elevator_width - 2*wall_thickness, \n          elevator_depth - 2*wall_thickness, \n          wall_thickness], center = true);\n    \n    // LED light panel\n    translate([0, 0, elevator_height/2 - wall_thickness - 1])\n    color([0.9, 0.9, 0.8])\n    cube([20, 20, 2], center = true);\n}\n\nmodule handrail() {\n    // Back wall handrail\n    translate([0, -elevator_depth/2 + 10, -elevator_height/2 + handrail_height])\n    rotate([90, 0, 0])\n    cylinder(h = elevator_width - 20, d = handrail_diameter, center = true);\n    \n    // Left support\n    translate([-elevator_width/2 + 10, -elevator_depth/2 + 10, -elevator_height/2 + handrail_height - handrail_diameter/2])\n    cylinder(h = handrail_diameter, d = handrail_diameter);\n    \n    // Right support\n    translate([elevator_width/2 - 10, -elevator_depth/2 + 10, -elevator_height/2 + handrail_height - handrail_diameter/2])\n    cylinder(h = handrail_diameter, d = handrail_diameter);\n}\n\nmodule control_panel() {\n    // Panel box\n    translate([elevator_width/2 - 15, elevator_depth/2 - wall_thickness - 5, -elevator_height/2 + 30])\n    cube([10, 5, 20]);\n    \n    // Buttons\n    for(row = [0:3]) {\n        for(col = [0:1]) {\n            translate([elevator_width/2 - 15 + 2 + col * 4, \n                      elevator_depth/2 - wall_thickness - 2.5, \n                      -elevator_height/2 + 35 + row * 4])\n            cylinder(h = 1, d = 3);\n        }\n    }\n    \n    // Emergency button\n    color([0.8, 0, 0])\n    translate([elevator_width/2 - 15 + 5, \n              elevator_depth/2 - wall_thickness - 2.5, \n              -elevator_height/2 + 50])\n    cylinder(h = 1, d = 5);\n}\n\nmodule ventilation_grille() {\n    // Ventilation slots on ceiling\n    for(i = [-2:1:2]) {\n        translate([i * 8, elevator_depth/2 - 15, elevator_height/2 - wall_thickness - 0.5])\n        cube([5, 2, 1]);\n    }\n}\n\n// Assemble the elevator\nunion() {\n    elevator_shaft();\n    elevator_doors();\n    floor_panel();\n    ceiling_panel();\n    handrail();\n    control_panel();\n    ventilation_grille();\n}",
    "renders": true
  },
  {
    "natural_object": "escalator",
    "openscad_code": "// Miniature 3D-printable escalator furniture piece\n// Overall size: 100 mm long × 35 mm wide × 40 mm high\n// Wall thickness: 2 mm for 3D-printability\n\n// Basic parameters\n$fn=24;\nlength = 100;\nwidth  = 35;\nheight = 40;\nangle  = 30;          // incline in degrees\nwall   = 2;           // wall thickness\nstep_h = 3;           // step height\nstep_d = 6;           // step depth\nnSteps = 12;          // number of visible steps\n\n// Main module\nmodule escalator() {\n    // Left and right side trusses\n    for (x=[-1,1])\n        translate([x*(width-wall)/2,0,0])\n            truss_side();\n\n    // Floor base plate\n    translate([0,-5,0])\n        cube([length+10,width+10,wall],center=true);\n\n    // Steps on tread belt\n    belt_steps();\n    \n    // Handrails\n    for (x=[-1,1])\n        translate([x*(width-wall)/2,0,height])\n            handrail();\n}\n\n// Side truss frame\nmodule truss_side() {\n    difference() {\n        // Outer truss skin\n        rotate([0,-angle,0])\n            translate([0,length/2,0])\n                cube([wall,length,height],center=true);\n        \n        // Inner cutout\n        rotate([0,-angle,0])\n            translate([0,length/2,-wall])\n                cube([wall+0.1,length-10,height-wall],center=true);\n    }\n    // Bottom support foot\n    translate([0,-length/2+5,wall/2])\n        cube([wall,10,wall],center=true);\n    // Top support foot\n    translate([0,length/2-5,height-wall/2])\n        cube([wall,10,wall],center=true);\n}\n\n// Tread belt with steps\nmodule belt_steps() {\n    for (i=[0:nSteps-1]) {\n        // Calculate position along slope\n        t = i / (nSteps-1);\n        y = t * length - length/2;\n        z = t * height * sin(angle);\n        \n        translate([0,y,z-wall/2])\n            rotate([0,-angle,0])\n                single_step();\n    }\n}\n\n// Single step\nmodule single_step() {\n    color(\"silver\")\n    translate([0,0,step_h/2])\n        cube([width-wall,step_d,step_h],center=true);\n}\n\n// Handrail with stanchions\nmodule handrail() {\n    // Vertical stanchions\n    for (y=[-length/2+5:length/10:length/2-5]) {\n        z = (y+length/2)/length * height * sin(angle);\n        translate([0,y,z+3])\n            cylinder(r=1,h=6);\n    }\n    \n    // Top rail bar\n    hull() {\n        translate([0,-length/2+5,3])\n            sphere(r=1.5);\n        translate([0,length/2-5,height*sin(angle)+3])\n            sphere(r=1.5);\n    }\n}\n\n// Render the model\nescalator();",
    "renders": true
  },
  {
    "natural_object": "segway",
    "openscad_code": "// Segway-inspired rolling side-table (ottoman style)\n// Realistic proportions, furniture functionality, 3D-printable\n\n$fn = 36;\n\n// Overall dimensions\nwidth = 90;        // mm\nheight = 120;      // mm\ndepth = 50;        // mm\nwall = 2.5;        // shell thickness for printing\n\n// Create the rolling base\nmodule segway_base() {\n    // Main foot platform\n    difference() {\n        hull() {\n            translate([-width/2, 0, 0]) cube([width, depth, 8]);\n            translate([-width/2+5, 5, 0]) cube([width-10, depth-10, 12]);\n        }\n        // Hollow cavity for weight reduction\n        translate([-width/2+wall, wall, wall]) \n            cube([width-2*wall, depth-2*wall, 10]);\n    }\n\n    // Two wheels with furniture-style rubber tires\n    for(side = [-1, 1]) {\n        translate([side*width/2*0.8, depth/2, -8]) {\n            // Wheel hub\n            cylinder(h = 10, r = 10, center = true);\n            // Tire\n            translate([0,0,5]) cylinder(h = 6, r1 = 12, r2 = 12);\n        }\n    }\n}\n\n// Vertical steering post with integrated side-table surface\nmodule steering_column() {\n    // Tapered post with furniture proportions\n    linear_extrude(height = 85, scale = [1, 0.7]) \n        translate([-8, -5, 0]) square([16, 10], center = true);\n\n    // Handlebar crossbar with rounded edges\n    translate([0, 0, 85]) {\n        hull() {\n            translate([-width/2*0.6, 0, 0]) sphere(r = 5);\n            translate([width/2*0.6, 0, 0]) sphere(r = 5);\n        }\n        // Hollow center for grip comfort\n        translate([0, 0, 0]) sphere(r = 4);\n    }\n\n    // Table surface on top\n    translate([0, -depth/4, 100]) {\n        difference() {\n            // Rounded table top\n            scale([1, 1.2, 0.3]) sphere(r = width/2);\n            // Underside hollow\n            translate([0, 0, -3]) \n                scale([0.8, 1, 0.2]) sphere(r = width/2 - wall);\n        }\n    }\n}\n\n// Support struts for furniture strength\nmodule support_struts() {\n    for(side = [-1, 1]) {\n        translate([side*width/3, 0, 0]) {\n            rotate([0, side*10, 0]) {\n                // Triangular support\n                linear_extrude(height = 5) {\n                    polygon(points=[\n                        [0, 0],\n                        [0, 25],\n                        [8, 0]\n                    ]);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    segway_base();\n    steering_column();\n    support_struts();\n}\n\n// Optional rubber feet for stability\ntranslate([-width/2*0.9, depth/2, -11]) cylinder(h = 3, r = 4);\ntranslate([width/2*0.9, depth/2, -11]) cylinder(h = 3, r = 4);",
    "renders": true
  },
  {
    "natural_object": "unicycle",
    "openscad_code": "// Unicycle Furniture - Table/Chair Hybrid\n// Medium complexity realistic style\n\n// Parameters\nwheel_d = 40;\nwheel_w = 8;\nframe_t = 2;\nseat_w = 35;\nseat_l = 45;\nseat_h = 3;\nleg_h = 45;\npedal_w = 12;\npedal_h = 8;\n\n// Main module\nmodule unicycle_furniture() {\n    // Wheel assembly\n    union() {\n        // Wheel tire\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=wheel_w, d=wheel_d, center=true);\n            cylinder(h=wheel_w+1, d=wheel_d-frame_t*2, center=true);\n        }\n        \n        // Wheel rim\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=wheel_w, d=wheel_d-frame_t*2, center=true);\n            cylinder(h=wheel_w+1, d=wheel_d-frame_t*4, center=true);\n        }\n        \n        // Spokes\n        for(i=[0:30:330]) {\n            rotate([90, 0, i])\n            cube([wheel_d/2-frame_t*3, frame_t, frame_t], center=true);\n        }\n        \n        // Hub\n        rotate([90, 0, 0])\n        cylinder(h=wheel_w+4, d=10, center=true);\n    }\n    \n    // Frame structure\n    union() {\n        // Main fork legs\n        translate([0, 0, wheel_d/2+leg_h/2])\n        rotate([0, 90, 0])\n        cylinder(h=leg_h, d=frame_t*3);\n        \n        translate([0, wheel_w/2, wheel_d/2+leg_h/2])\n        rotate([0, 90, 0])\n        cylinder(h=leg_h, d=frame_t*3);\n        \n        // Cross support\n        translate([0, 0, wheel_d/2+leg_h/4])\n        rotate([0, 0, 90])\n        cylinder(h=wheel_w+frame_t*2, d=frame_t*2);\n        \n        // Seat post\n        translate([0, 0, wheel_d/2+leg_h])\n        cylinder(h=25, d=frame_t*4);\n    }\n    \n    // Seat (furniture top)\n    translate([0, 0, wheel_d/2+leg_h+25])\n    difference() {\n        // Main seat platform\n        cube([seat_l, seat_w, seat_h], center=true);\n        \n        // Comfort groove\n        translate([0, 0, -seat_h/2])\n        cube([seat_l-10, seat_w-10, seat_h+1], center=true);\n        \n        // Rounded edges\n        translate([seat_l/2-frame_t, 0, 0])\n        cylinder(h=seat_h+1, d=frame_t*2);\n        translate([-seat_l/2+frame_t, 0, 0])\n        cylinder(h=seat_h+1, d=frame_t*2);\n    }\n    \n    // Pedal supports (furniture legs)\n    translate([wheel_d/2+10, wheel_w/2+5, wheel_d/2])\n    rotate([0, 90, 0])\n    cylinder(h=pedal_h, d=frame_t*2);\n    \n    translate([wheel_d/2+10, -wheel_w/2-5, wheel_d/2])\n    rotate([0, 90, 0])\n    cylinder(h=pedal_h, d=frame_t*2);\n    \n    // Pedal platforms\n    translate([wheel_d/2+10, wheel_w/2+5, wheel_d/2-pedal_h/2])\n    cube([pedal_w, 6, pedal_h], center=true);\n    \n    translate([wheel_d/2+10, -wheel_w/2-5, wheel_d/2-pedal_h/2])\n    cube([pedal_w, 6, pedal_h], center=true);\n    \n    // Reinforcement struts\n    translate([wheel_d/2+5, 0, wheel_d/2+5])\n    rotate([45, 0, 0])\n    cylinder(h=15, d=frame_t);\n    \n    translate([wheel_d/2+5, 0, wheel_d/2-5])\n    rotate([-45, 0, 0])\n    cylinder(h=15, d=frame_t);\n}\n\n// Render the furniture\nunicycle_furniture();",
    "renders": true
  },
  {
    "natural_object": "go",
    "openscad_code": "// Mini Go board table with built-in stone storage\n// Overall footprint ~120 x 120 x 55 mm, all parts printable without support\n\n// Table parameters\ntable_top = 110;      // top surface size\ntable_height = 55;    // total height\nleg_thick = 8;        // leg cross-section\nwall = 2;             // wall thickness for 3D printing\nstone_d = 11;         // go stone diameter\nstone_h = 4;          // go stone thickness\ngrid = 19;            // standard 19×19 board\n\n// Simple module for rounded box\nmodule rounded_box(s, r, h) {\n    hull() {\n        for(i = [[r,r], [r,s.y-r], [s.x-r,r], [s.x-r,s.y-r]])\n            translate([i.x, i.y, 0])\n                cylinder(r = r, h = h, $fn = 16);\n    }\n}\n\n// Table top with grid lines\nmodule table_top_piece() {\n    difference() {\n        // Main top plate\n        translate([0, 0, table_height - 6])\n            rounded_box([table_top, table_top], 4, 6);\n        \n        // Recessed playing surface\n        translate([5, 5, table_height - 5])\n            cube([table_top - 10, table_top - 10, 1]);\n    }\n    \n    // Grid lines (engraved)\n    for(i = [0:18]) {\n        // Vertical lines\n        translate([5 + (table_top - 10) * i / (grid - 1) - 0.5, 5, table_height - 4.5])\n            cube([1, table_top - 10, 1]);\n        // Horizontal lines\n        translate([5, 5 + (table_top - 10) * i / (grid - 1) - 0.5, table_height - 4.5])\n            cube([table_top - 10, 1, 1]);\n    }\n    \n    // Star points (hoshi)\n    star_pts = [3, 9, 15];\n    for(x = star_pts)\n        for(y = star_pts)\n            translate([5 + (table_top - 10) * x / (grid - 1), \n                       5 + (table_top - 10) * y / (grid - 1), \n                       table_height - 4])\n                cylinder(r = 1.5, h = 1.2, $fn = 8);\n}\n\n// Storage drawer for stones\nmodule drawer() {\n    drawer_w = table_top - 20;\n    drawer_h = 20;\n    \n    difference() {\n        // Drawer box\n        translate([10, 10, 15])\n            rounded_box([drawer_w, drawer_w, drawer_h], 3, wall);\n        \n        // Inner cavity\n        translate([12, 12, 17])\n            rounded_box([drawer_w - 4, drawer_w - 4, drawer_h], 2, drawer_h);\n    }\n    \n    // Handle\n    translate([table_top/2, 10 + drawer_w + 2, 25])\n        rotate([90, 0, 0])\n            cylinder(r = 8, h = 6, $fn = 20);\n}\n\n// Table leg\nmodule leg(x, y) {\n    translate([x, y, 0])\n        difference() {\n            // Main leg\n            cube([leg_thick, leg_thick, table_height - 6]);\n            // Chamfers for printability\n            translate([0, 0, table_height - 10])\n                rotate([0, 45, 0])\n                    cube([leg_thick * 1.5, leg_thick, 10]);\n            translate([0, 0, table_height - 10])\n                rotate([45, 0, 0])\n                    cube([leg_thick, leg_thick * 1.5, 10]);\n        }\n}\n\n// Assembly\ntable_top_piece();\ndrawer();\n\n// Four legs\nleg(5, 5);\nleg(table_top - leg_thick - 5, 5);\nleg(5, table_top - leg_thick - 5);\nleg(table_top - leg_thick - 5, table_top - leg_thick - 5);",
    "renders": true
  },
  {
    "natural_object": "karts",
    "openscad_code": "// Kart-style storage stool (furniture item)\n// Realistic style, medium complexity\n// Overall dimensions: 120mm wide x 180mm deep x 100mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule kart_body() {\n    // Front curved panel\n    difference() {\n        translate([0, 60, 50])\n            scale([1, 1.5, 1])\n                sphere(d=120);\n        translate([0, -60, 0])\n            cube([120, 200, 200], center=true);\n    }\n    \n    // Rear flat panel\n    translate([0, -60, 50])\n        cube([116, 2, 96], center=true);\n    \n    // Left side panel\n    translate([-58, 0, 50])\n        cube([2, 120, 96], center=true);\n    \n    // Right side panel\n    translate([58, 0, 50])\n        cube([2, 120, 96], center=true);\n    \n    // Bottom panel\n    translate([0, 0, 2])\n        cube([116, 118, 2], center=true);\n}\n\n// Seat top with kart-style pattern\nmodule kart_seat() {\n    // Main seat top\n    difference() {\n        translate([0, 0, 100])\n            cube([120, 120, 4], center=true);\n        \n        // Central hole pattern (kart-style ventilation)\n        for(x = [-40, -20, 0, 20, 40]) {\n            for(y = [-40, -20, 0, 20, 40]) {\n                translate([x, y, 100])\n                    cylinder(h=5, d=8);\n            }\n        }\n    }\n    \n    // Seat rim\n    difference() {\n        translate([0, 0, 98])\n            cube([124, 124, 4], center=true);\n        translate([0, 0, 96])\n            cube([120, 120, 8], center=true);\n    }\n}\n\n// Kart-style wheels (decorative)\nmodule kart_wheel(pos_x, pos_y) {\n    translate([pos_x, pos_y, 8]) {\n        // Wheel hub\n        cylinder(h=8, d=16);\n        \n        // Spokes\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([6, 0, 4])\n                    cube([12, 3, 8], center=true);\n        }\n        \n        // Tire\n        translate([0, 0, -2])\n            cylinder(h=12, d=24);\n    }\n}\n\n// Handle cutout for lifting\nmodule handle_cutout() {\n    translate([0, 60, 60])\n        rotate([0, 90, 0])\n            cylinder(h=60, d=30);\n}\n\n// Assembly\nunion() {\n    kart_body();\n    kart_seat();\n    \n    // Four decorative wheels\n    kart_wheel(-50, -50);\n    kart_wheel(50, -50);\n    kart_wheel(-50, 50);\n    kart_wheel(50, 50);\n    \n    // Handle for lifting\n    difference() {\n        translate([0, 60, 60])\n            cube([60, 2, 20], center=true);\n        handle_cutout();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "kart",
    "openscad_code": "// Kart Furniture - OpenSCAD\n// A wooden kart-style stool with realistic proportions and 3D-printable features\n\n// Overall dimensions\nkart_length = 120;\nkart_width = 70;\nkart_height = 85;\n\n// Seat dimensions\nseat_length = 80;\nseat_width = 50;\nseat_thickness = 10;\n\n// Frame dimensions\nframe_thickness = 6;\nwheel_radius = 20;\nwheel_thickness = 8;\naxle_diameter = 4;\n\n// Material thickness for 3D printing\nwall_thickness = 2;\n\n// Main module\nmodule kart_stool() {\n    // Central frame structure\n    frame();\n    \n    // Seat on top\n    seat();\n    \n    // Four wheels\n    translate([kart_length/2 - 15, kart_width/2 - 15, wheel_radius]) \n        wheel();\n    translate([kart_length/2 - 15, -(kart_width/2 - 15), wheel_radius]) \n        wheel();\n    translate([-(kart_length/2 - 15), kart_width/2 - 15, wheel_radius]) \n        wheel();\n    translate([-(kart_length/2 - 15), -(kart_width/2 - 15), wheel_radius]) \n        wheel();\n    \n    // Support beams\n    support_beams();\n    \n    // Steering column detail\n    steering_column();\n}\n\n// Main frame structure\nmodule frame() {\n    // Front frame\n    translate([kart_length/2 - 10, 0, wheel_radius + 10]) \n        cube([frame_thickness, kart_width - 20, 40], center=true);\n    \n    // Rear frame\n    translate([-kart_length/2 + 10, 0, wheel_radius + 10]) \n        cube([frame_thickness, kart_width - 20, 40], center=true);\n    \n    // Side frames\n    translate([0, kart_width/2 - 10, wheel_radius + 20]) \n        cube([kart_length - 20, frame_thickness, 20], center=true);\n    translate([0, -kart_width/2 + 10, wheel_radius + 20]) \n        cube([kart_length - 20, frame_thickness, 20], center=true);\n}\n\n// Seat with realistic kart-style contours\nmodule seat() {\n    // Main seat platform\n    translate([0, 0, kart_height - seat_thickness/2])\n        cube([seat_length, seat_width, seat_thickness], center=true);\n    \n    // Seat backrest\n    translate([0, 0, kart_height + 5])\n        difference() {\n            cube([seat_length - 10, seat_width - 10, 15], center=true);\n            translate([0, 0, -5])\n                cube([seat_length - 10, seat_width - 10, 20], center=true);\n        }\n    \n    // Seat edge reinforcement\n    for(x = [-seat_length/2 + 5, seat_length/2 - 5]) {\n        for(y = [-seat_width/2 + 5, seat_width/2 - 5]) {\n            translate([x, y, kart_height - seat_thickness/2])\n                cylinder(h=seat_thickness, r=3, center=true);\n        }\n    }\n}\n\n// Wheels with spokes\nmodule wheel() {\n    // Tire\n    difference() {\n        cylinder(h=wheel_thickness, r=wheel_radius, center=true);\n        cylinder(h=wheel_thickness + 2, r=wheel_radius - wall_thickness*2, center=true);\n    }\n    \n    // Spokes\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([wheel_radius/2, 0, 0])\n                cube([wheel_radius - 5, wall_thickness, wheel_thickness], center=true);\n    }\n    \n    // Hub\n    cylinder(h=wheel_thickness + 1, r=axle_diameter * 2, center=true);\n}\n\n// Support beams between frame\nmodule support_beams() {\n    // Cross beams at wheel level\n    translate([0, 0, wheel_radius + 5])\n        cube([kart_length - 30, frame_thickness, frame_thickness], center=true);\n    \n    // Diagonal supports\n    translate([kart_length/4, kart_width/4, wheel_radius + 20])\n        rotate([0, 45, 0])\n        cube([30, frame_thickness, frame_thickness], center=true);\n    \n    translate([-kart_length/4, -kart_width/4, wheel_radius + 20])\n        rotate([0, -45, 0])\n        cube([30, frame_thickness, frame_thickness], center=true);\n}\n\n// Steering column detail\nmodule steering_column() {\n    translate([kart_length/2 - 5, 0, kart_height - 10])\n        cylinder(h=30, r=5, center=false);\n    \n    // Steering wheel detail\n    translate([kart_length/2 - 5, 0, kart_height + 15])\n        difference() {\n            cylinder(h=8, r=12, center=true);\n            cylinder(h=10, r=8, center=true);\n        }\n}\n\n// Render the kart stool\nkart_stool();",
    "renders": true
  },
  {
    "natural_object": "buggy",
    "openscad_code": "// Realistic medium-complexity 3D-printable baby buggy (furniture item)\n// Approx. 100 mm long; walls ≥2 mm; printable without supports\n\n$fa = 2; $fs = 0.5;  // smooth curves\n\nmodule axle() {\n    cylinder(h = 6, d = 4, center = true);  // 2 mm wall around ∅4 rod\n}\n\nmodule wheel() {\n    difference() {\n        cylinder(h = 5, d = 20);         // outer tyre\n        cylinder(h = 6, d = 12);         // hub recess\n    }\n}\n\nmodule wheelsPair() {\n    translate([0, -30, -5])   // left wheel\n        wheel();\n    translate([0,  30, -5])   // right wheel\n        wheel();\n    // axle between them\n    translate([0, 0, -5])\n        rotate([90,0,0])\n            axle();\n}\n\n// Chassis frame with realistic proportions\nmodule chassis() {\n    difference() {\n        union() {\n            // main under-frame\n            cube([90, 60, 4]);\n            // front upward curve\n            translate([45, 0, 0])\n                rotate([0, -15, 0])\n                    cube([40, 60, 4]);\n            // rear upward curve\n            translate([-45, 0, 0])\n                rotate([0, 15, 0])\n                    cube([40, 60, 4]);\n        }\n        // lightening holes\n        for(x=[-30,0,30])\n            translate([x, 0, 2])\n                cylinder(h = 5, d = 8);\n    }\n}\n\n// Basket body\nmodule basket() {\n    difference() {\n        hull() {\n            // outer shell\n            translate([0, 0, 25])\n                cube([70, 55, 40], center = true);\n            // inner shell (2 mm wall)\n            translate([0, 0, 27])\n                cube([66, 51, 36], center = true);\n        }\n        // handle cutouts\n        translate([0, 0, 45])\n            cube([74, 20, 15], center = true);\n    }\n}\n\n// Handle bar\nmodule handle() {\n    union() {\n        // curved bar\n        translate([-50, 0, 50])\n            rotate([0, 90, 0])\n                rotate_extrude(angle = 90)\n                    translate([25,0])\n                        circle(d = 6);\n        // grips\n        translate([-50, -18, 50])\n            cylinder(h = 16, d = 8);\n        translate([-50,  18, 50])\n            cylinder(h = 16, d = 8);\n    }\n}\n\n// Sun canopy frame\nmodule canopy() {\n    difference() {\n        translate([25, 0, 55])\n            rotate([75, 0, 0])\n                cube([60, 58, 2]);\n        // scalloped edge\n        for(i=[-20:10:20])\n            translate([55, i, 55])\n                sphere(d = 15);\n    }\n}\n\n// Assembly\nunion() {\n    chassis();\n    translate([0, 0, 2])  // place chassis on wheels\n        wheelsPair();\n    basket();\n    handle();\n    canopy();\n}",
    "renders": true
  },
  {
    "natural_object": "atv",
    "openscad_code": "// ATV Furniture - Realistic Style, Medium Complexity\n// A small-scale ATV designed as a furniture accent piece with 2mm walls for 3D printing\n\n// Overall dimensions: 100mm x 60mm x 55mm (LxWxH)\n\nmodule atv_furniture() {\n    // Main body frame\n    difference() {\n        // Main chassis\n        cube([80, 45, 25], center=true);\n        \n        // Hollow interior for 2mm walls\n        translate([0, 0, -1])\n            cube([76, 41, 23], center=true);\n    }\n    \n    // Front hood\n    translate([-35, 0, 12])\n        difference() {\n            cube([30, 42, 15], center=true);\n            translate([0, 0, -1])\n                cube([26, 38, 13], center=true);\n        }\n    \n    // Rear rack/bed\n    translate([35, 0, 12])\n        difference() {\n            cube([25, 35, 10], center=true);\n            translate([0, 0, -1])\n                cube([21, 31, 8], center=true);\n        }\n    \n    // Seat\n    translate([-5, 0, 15])\n        difference() {\n            cube([35, 30, 12], center=true);\n            translate([0, 0, -1])\n                cube([31, 26, 10], center=true);\n        }\n    \n    // Wheels - 4 wheels with tread pattern\n    module wheel(pos_x, pos_y, pos_z) {\n        translate([pos_x, pos_y, pos_z]) {\n            // Main tire\n            difference() {\n                cylinder(h=15, r=12, center=true, $fn=32);\n                cylinder(h=16, r=10, center=true, $fn=32);\n            }\n            \n            // Tread pattern using small cylinders\n            for(i=[0:15:359]) {\n                rotate([0, 0, i])\n                    translate([11.5, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=2, r=1, center=true);\n            }\n            \n            // Rim\n            color(\"gray\")\n                cylinder(h=16, r=8, center=true, $fn=32);\n        }\n    }\n    \n    // Position four wheels\n    wheel(-28, 25, -10);\n    wheel(-28, -25, -10);\n    wheel(28, 25, -10);\n    wheel(28, -25, -10);\n    \n    // Front bumper\n    translate([-45, 0, -5])\n        difference() {\n            cube([15, 40, 8], center=true);\n            translate([0, 0, -1])\n                cube([11, 36, 6], center=true);\n        }\n    \n    // Handlebars\n    translate([-30, 0, 25])\n        difference() {\n            cube([5, 35, 15], center=true);\n            translate([0, 0, -1])\n                cube([1, 31, 13], center=true);\n        }\n    \n    // Headlight\n    translate([-42, 0, 15])\n        difference() {\n            sphere(r=5);\n            sphere(r=3);\n        }\n    \n    // Taillights (2)\n    translate([42, 12, 15])\n        difference() {\n            sphere(r=3);\n            sphere(r=1.5);\n        }\n    translate([42, -12, 15])\n        difference() {\n            sphere(r=3);\n            sphere(r=1.5);\n        }\n    \n    // Side footrests\n    translate([0, 25, -10])\n        difference() {\n            cube([60, 5, 3], center=true);\n            translate([0, 0, -1])\n                cube([56, 1, 1], center=true);\n        }\n    translate([0, -25, -10])\n        difference() {\n            cube([60, 5, 3], center=true);\n            translate([0, 0, -1])\n                cube([56, 1, 1], center=true);\n        }\n}\n\n// Generate the ATV\natv_furniture();",
    "renders": true
  },
  {
    "natural_object": "utv",
    "openscad_code": "// UTV (Utility Terrain Vehicle) Furniture - Realistic Style\n// Medium complexity OpenSCAD model with furniture characteristics\n\n// Overall dimensions (mm)\nlength = 120;\nwidth = 70;\nheight = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body frame as furniture piece\nmodule utv_frame() {\n    // Base platform with furniture-style construction\n    difference() {\n        // Main platform\n        cube([length, width, wall], center=true);\n        \n        // Hollow out for printability\n        translate([0, 0, -wall/2])\n            cube([length-wall*2, width-wall*2, wall+1], center=true);\n    }\n}\n\n// ROPS (Roll Over Protection Structure) - furniture-style legs\nmodule roll_cage() {\n    // Front legs\n    for(x=[-length/2+5, length/2-5]) {\n        // Vertical posts\n        translate([x, width/2-3, height/2-5])\n            cylinder(h=height-5, r=wall, center=true);\n        translate([x, -width/2+3, height/2-5])\n            cylinder(h=height-5, r=wall, center=true);\n    }\n    \n    // Top crossbars\n    translate([0, width/2-3, height-5])\n        cube([length-10, wall*1.5, wall], center=true);\n    translate([0, -width/2+3, height-5])\n        cube([length-10, wall*1.5, wall], center=true);\n    \n    // Side crossbars\n    translate([length/2-5, 0, height/2])\n        cube([wall, width-6, height-5], center=true);\n    translate([-length/2+5, 0, height/2])\n        cube([wall, width-6, height-5], center=true);\n}\n\n// Seating area - furniture cushion style\nmodule seats() {\n    // Driver seat\n    translate([-length/4, 0, wall/2+1])\n        cube([20, 25, 8], center=true);\n    \n    // Passenger seat\n    translate([length/4, 0, wall/2+1])\n        cube([20, 25, 8], center=true);\n    \n    // Seat backs\n    translate([-length/4, 0, wall/2+8])\n        cube([20, 25, 2], center=true);\n    translate([length/4, 0, wall/2+8])\n        cube([20, 25, 2], center=true);\n}\n\n// Storage bed - furniture drawer style\nmodule cargo_bed() {\n    // Main bed\n    translate([length/2-15, 0, wall/2+2])\n        cube([30, width-20, 6], center=true);\n    \n    // Bed sides\n    translate([length/2-15, width/2-10, wall/2+5])\n        cube([30, 2, 6], center=true);\n    translate([length/2-15, -width/2+10, wall/2+5])\n        cube([30, 2, 6], center=true);\n    translate([length/2-30, 0, wall/2+5])\n        cube([2, width-20, 6], center=true);\n}\n\n// Wheels as furniture casters\nmodule wheels() {\n    // Front left\n    translate([-length/2+5, width/2-5, -height/2+2])\n        cylinder(h=wall*2, r=8, center=true);\n    \n    // Front right\n    translate([-length/2+5, -width/2+5, -height/2+2])\n        cylinder(h=wall*2, r=8, center=true);\n    \n    // Rear left\n    translate([length/2-5, width/2-5, -height/2+2])\n        cylinder(h=wall*2, r=8, center=true);\n    \n    // Rear right\n    translate([length/2-5, -width/2+5, -height/2+2])\n        cylinder(h=wall*2, r=8, center=true);\n}\n\n// Steering wheel - furniture handle style\nmodule steering() {\n    translate([-length/2+10, 0, wall/2+10])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=wall, center=true);\n    \n    // Wheel part\n    translate([-length/2+10, 0, wall/2+18])\n        rotate([90, 0, 0])\n            cylinder(h=wall, r=8, center=true);\n}\n\n// Headlights as furniture lighting elements\nmodule headlights() {\n    // Left headlight\n    translate([-length/2+wall, width/2-8, wall/2+3])\n        sphere(r=3);\n    \n    // Right headlight\n    translate([-length/2+wall, -width/2+8, wall/2+3])\n        sphere(r=3);\n}\n\n// Main assembly\ntranslate([0, 0, height/2])\nunion() {\n    // Base frame\n    utv_frame();\n    \n    // Structural elements\n    roll_cage();\n    \n    // Furniture elements\n    seats();\n    cargo_bed();\n    \n    // Functional elements\n    wheels();\n    steering();\n    headlights();\n}",
    "renders": true
  },
  {
    "natural_object": "hoverboard",
    "openscad_code": "// Hoverboard Furniture - Realistic Style with Medium Complexity\n// Overall dimensions: 120mm x 40mm x 25mm\n\n// Main hoverboard deck\nmodule deck() {\n    difference() {\n        // Main deck body\n        translate([0, 0, 12.5])\n            cube([120, 40, 25], center=true);\n        \n        // Rounded edges\n        translate([0, 0, 12.5])\n            cube([116, 36, 29], center=true);\n    }\n}\n\n// Grip tape texture pattern\nmodule grip_texture() {\n    for (x = [-50:5:50]) {\n        for (y = [-15:5:15]) {\n            translate([x, y, 25.1])\n                cylinder(h=0.5, r=1.5, $fn=6);\n        }\n    }\n}\n\n// Wheel housing\nmodule wheel_housing(side) {\n    translate([side * 45, 0, 5]) {\n        // Main housing\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h=15, r=12, center=true, $fn=32);\n            \n            // Wheel opening\n            rotate([90, 0, 0])\n                cylinder(h=16, r=10, center=true, $fn=32);\n        }\n        \n        // Housing support structure\n        translate([0, 0, -5])\n            cube([8, 30, 10], center=true);\n    }\n}\n\n// Wheel with tire\nmodule wheel(side) {\n    translate([side * 45, 0, 5]) {\n        rotate([90, 0, 0]) {\n            // Wheel hub\n            cylinder(h=8, r=8, center=true, $fn=32);\n            \n            // Tire\n            translate([0, 0, -5.5])\n                cylinder(h=11, r=9.5, center=true, $fn=32);\n            \n            // Spoke pattern\n            for (i = [0:30:360]) {\n                rotate([0, 0, i])\n                    cube([1.5, 6, 8], center=true);\n            }\n        }\n    }\n}\n\n// LED light strip\nmodule led_strip() {\n    for (pos = [-55:2:55]) {\n        translate([pos, 20, 12.5])\n            cube([1, 2, 1]);\n        translate([pos, -20, 12.5])\n            cube([1, 2, 1]);\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([0, 15, 26]) {\n        difference() {\n            cylinder(h=3, r=4, $fn=20);\n            translate([0, 0, -0.1])\n                cylinder(h=3.2, r=2.5, $fn=20);\n        }\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    translate([0, -15, 26]) {\n        difference() {\n            cube([8, 4, 3], center=true);\n            translate([0, 0, -0.1])\n                cube([6, 2.5, 3.2], center=true);\n        }\n    }\n}\n\n// Structural ribs inside deck\nmodule internal_structure() {\n    for (x = [-40:20:40]) {\n        translate([x, 0, 12.5])\n            cube([15, 36, 20], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    deck();\n    \n    // Internal structure (for 3D printing support)\n    %internal_structure();\n    \n    // Surface details\n    grip_texture();\n    led_strip();\n    \n    // Functional elements\n    power_button();\n    charging_port();\n    \n    // Wheel housings\n    wheel_housing(1);\n    wheel_housing(-1);\n    \n    // Wheels\n    wheel(1);\n    wheel(-1);\n}",
    "renders": true
  },
  {
    "natural_object": "windsurfer",
    "openscad_code": "// Windsurfer Bookshelf - Medium Complexity\n// 3D printable windsurfer-inspired furniture item\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule fin(base_width, height, thickness) {\n    // Main fin body with rounded edges\n    difference() {\n        union() {\n            // Main fin shape\n            translate([-base_width/2, 0, 0])\n                cube([base_width, thickness, height]);\n            \n            // Rounded top\n            translate([0, thickness/2, height])\n                scale([base_width/2, thickness/2, height/4])\n                    sphere(1);\n        }\n        \n        // Hollow out for 3D printing\n        translate([-base_width/2 + wall_thickness, wall_thickness, wall_thickness])\n            cube([base_width - 2*wall_thickness, thickness - 2*wall_thickness, height - wall_thickness]);\n    }\n}\n\nmodule mast_section(height, diameter) {\n    // Hollow mast segment\n    difference() {\n        cylinder(h=height, d=diameter);\n        cylinder(h=height + 0.2, d=diameter - 2*wall_thickness);\n    }\n}\n\nmodule sail_panel(width, height, curve) {\n    // Curved sail panel\n    translate([0, 0, -height/2])\n        rotate([90, 0, 0])\n            linear_extrude(height=width, convexity=10)\n                difference() {\n                    // Main sail curve\n                    polygon(points=[\n                        [0, 0],\n                        [width, 0],\n                        [width*0.8, height*0.7],\n                        [width*0.5, height],\n                        [width*0.2, height*0.8],\n                        [0, height*0.3]\n                    ]);\n                    \n                    // Cutout for books\n                    translate([width*0.2, height*0.3])\n                        square([width*0.6, height*0.5]);\n                };\n}\n\nmodule boom_segment(length, diameter) {\n    // Boom tube with end caps\n    difference() {\n        union() {\n            // Main tube\n            rotate([0, 90, 0])\n                cylinder(h=length, d=diameter);\n            \n            // End cap 1\n            translate([0, 0, -length/2])\n                sphere(d=diameter + 2);\n            \n            // End cap 2\n            translate([0, 0, length/2])\n                sphere(d=diameter + 2);\n        }\n        \n        // Hollow tube\n        rotate([0, 90, 0])\n            cylinder(h=length + 0.2, d=diameter - 2*wall_thickness);\n    }\n}\n\nmodule windsurfer_bookshelf() {\n    // Base board (surfboard shape)\n    color(\"beige\")\n    difference() {\n        // Main board\n        union() {\n            // Center section\n            translate([0, 0, 5])\n                cube([80, 20, 10], center=true);\n            \n            // Rounded ends\n            translate([40, 0, 5])\n                rotate([0, 90, 0])\n                    cylinder(h=20, d=10, center=true);\n            translate([-40, 0, 5])\n                rotate([0, 90, 0])\n                    cylinder(h=20, d=10, center=true);\n        }\n        \n        // Hollow for 3D printing\n        translate([0, 0, 5])\n            cube([76, 16, 6], center=true);\n    }\n    \n    // Central mast\n    color(\"silver\")\n    mast_section(height=70, diameter=8);\n    \n    // Sail as bookshelf\n    color(\"lightblue\")\n    sail_panel(width=60, height=50, curve=15);\n    \n    // Boom as shelf support\n    color(\"silver\")\n    boom_segment(length=40, diameter=5);\n    \n    // Fin as back support\n    color(\"darkblue\")\n    translate([0, 10, 15])\n        rotate([0, 90, 0])\n            fin(base_width=30, height=25, thickness=3);\n    \n    // Additional shelf supports\n    color(\"silver\")\n    for(i = [-1:1]) {\n        translate([i * 20, 0, 30])\n            rotate([0, 90, 0])\n                boom_segment(length=20, diameter=3);\n    }\n    \n    // Bottom supports\n    color(\"darkblue\")\n    translate([-30, 0, 2])\n        cube([5, 15, 4]);\n    translate([30, 0, 2])\n        cube([5, 15, 4]);\n}\n\n// Main assembly\nwindsurfer_bookshelf();",
    "renders": true
  },
  {
    "natural_object": "surfboard",
    "openscad_code": "// Surfboard Coffee Table\n// A medium-complexity 3D printable surfboard-shaped furniture piece\n// Dimensions: ~120mm long, ~40mm wide, ~35mm high\n\n// Parameters\nlength = 120;\nwidth = 40;\nthickness = 4;\nlegHeight = 30;\nwallThickness = 2;\n\nmodule surfboardTable() {\n    // Main surfboard top\n    union() {\n        // Nose section (front)\n        translate([length/2 - 10, 0, legHeight + thickness/2])\n            scale([1, 0.8, 1])\n                sphere(d=20, $fn=20);\n        \n        // Tail section (back)\n        translate([-length/2 + 10, 0, legHeight + thickness/2])\n            scale([1, 0.7, 1])\n                sphere(d=18, $fn=20);\n        \n        // Central body\n        hull() {\n            translate([length/2 - 25, 0, legHeight + thickness/2])\n                sphere(d=width, $fn=20);\n            translate([-length/2 + 25, 0, legHeight + thickness/2])\n                sphere(d=width * 0.85, $fn=20);\n        }\n        \n        // Flatten the top\n        difference() {\n            children();\n            translate([0, 0, legHeight + thickness + 5])\n                cube([length + 20, width + 20, 10], center=true);\n        }\n    }\n}\n\n// Create hollow surfboard top\nmodule hollowSurfboard() {\n    difference() {\n        surfboardTable();\n        surfboardTable();\n        scale([0.85, 0.85, 1.5])\n            translate([0, 0, -wallThickness/2])\n                surfboardTable();\n    }\n}\n\n// Table legs (4 legs at corners)\nmodule legs() {\n    legPositions = [\n        [length/2 - 15, width/2 - 8],\n        [length/2 - 15, -width/2 + 8],\n        [-length/2 + 15, width/2 - 8],\n        [-length/2 + 15, -width/2 + 8]\n    ];\n    \n    for(pos = legPositions) {\n        translate([pos[0], pos[1], legHeight/2])\n            cylinder(h=legHeight, d=6, $fn=12);\n    }\n}\n\n// Support struts between legs\nmodule supportStruts() {\n    // Front strut\n    translate([length/2 - 15, 0, legHeight/3])\n        cube([wallThickness*2, width - 14, wallThickness*2], center=true);\n    \n    // Back strut\n    translate([-length/2 + 15, 0, legHeight/3])\n        cube([wallThickness*2, width - 14, wallThickness*2], center=true);\n    \n    // Side struts\n    translate([0, width/2 - 8, legHeight/3])\n        cube([length - 30, wallThickness*2, wallThickness*2], center=true);\n    translate([0, -width/2 + 8, legHeight/3])\n        cube([length - 30, wallThickness*2, wallThickness*2], center=true);\n}\n\n// Fin detail as structural element\nmodule finSupport() {\n    // Center fin\n    translate([-length/2 + 5, 0, legHeight - 2])\n        rotate([90, 0, 90])\n            linear_extrude(height=8)\n                polygon(points=[\n                    [0, 0],\n                    [12, 0],\n                    [6, 8],\n                    [0, 0]\n                ]);\n}\n\n// Assembly\nunion() {\n    // Main table top\n    hollowSurfboard();\n    \n    // Legs\n    legs();\n    \n    // Support structure\n    supportStruts();\n    \n    // Decorative fin\n    finSupport();\n}",
    "renders": true
  },
  {
    "natural_object": "paddleboard",
    "openscad_code": "// Paddleboard Furniture - Wall-mounted Floating Shelf\n// Overall dimensions: 120mm length, 30mm width, 15mm thickness\n// Wall mounting bracket included\n\n// Parameters\nboard_length = 120;\nboard_width = 30;\nboard_thickness = 15;\nnose_radius = 8;\ntail_radius = 5;\nwall_mount_thickness = 3;\nfin_height = 10;\nfin_thickness = 2;\ndeck_pad_thickness = 1;\nhandle_diameter = 6;\n\n// Main paddleboard body module\nmodule paddleboard_body() {\n    // Create basic board shape with rounded ends\n    difference() {\n        // Main hull shape - elongated with rounded ends\n        hull() {\n            // Nose sphere\n            translate([board_length/2 - nose_radius, 0, 0])\n                sphere(nose_radius);\n            // Tail sphere\n            translate([-board_length/2 + tail_radius, 0, 0])\n                sphere(tail_radius);\n            // Central cylinder\n            cylinder(h=board_width, d=board_width, center=true);\n        }\n        \n        // Carve out the center to create hollow shell\n        scale([0.85, 0.85, 0.85])\n            hull() {\n                translate([board_length/2 - nose_radius, 0, 0])\n                    sphere(nose_radius);\n                translate([-board_length/2 + tail_radius, 0, 0])\n                    sphere(tail_radius);\n                cylinder(h=board_width, d=board_width, center=true);\n            }\n    }\n}\n\n// Deck pad texture\nmodule deck_pad() {\n    // EVA foam pad pattern\n    for(x = [-50:10:50]) {\n        for(y = [-10:5:10]) {\n            translate([x, y, board_thickness/2 + deck_pad_thickness/2])\n                cube([8, 4, deck_pad_thickness], center=true);\n        }\n    }\n}\n\n// Fin box\nmodule fin() {\n    // Single center fin\n    translate([0, 0, -board_thickness/2 - fin_height/2])\n        cube([fin_thickness*2, 20, fin_height], center=true);\n    \n    // Fin base\n    translate([0, 0, -board_thickness/2])\n        cube([fin_thickness*3, 25, 2], center=true);\n}\n\n// Wall mounting bracket\nmodule wall_bracket() {\n    // Main bracket plate\n    translate([0, 0, board_thickness/2 + wall_mount_thickness/2])\n        cube([40, 20, wall_mount_thickness], center=true);\n    \n    // Mounting holes\n    for(x = [-15:30:15]) {\n        translate([x, 0, board_thickness/2 + wall_mount_thickness])\n            cylinder(h=wall_mount_thickness+1, d=3, center=false);\n    }\n    \n    // Support arms\n    translate([board_length/4, 0, board_thickness/2 + wall_mount_thickness/2])\n        cube([wall_mount_thickness, 15, 15], center=true);\n    translate([-board_length/4, 0, board_thickness/2 + wall_mount_thickness/2])\n        cube([wall_mount_thickness, 15, 15], center=true);\n}\n\n// Carry handle\nmodule carry_handle() {\n    // Recessed handle\n    translate([0, 0, -board_thickness/4])\n        difference() {\n            cube([handle_diameter*2, handle_diameter, handle_diameter*2], center=true);\n            cylinder(h=handle_diameter*2, d=handle_diameter, center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Main board\n    scale([1, 0.6, 0.5])\n        paddleboard_body();\n    \n    // Deck pad\n    deck_pad();\n    \n    // Fin\n    fin();\n    \n    // Wall bracket\n    wall_bracket();\n    \n    // Carry handle\n    carry_handle();\n}",
    "renders": true
  },
  {
    "natural_object": "catamaran",
    "openscad_code": "// Catamaran Furniture - Storage Bench\n// Medium complexity realistic style\n\n$fn=32;\n\nmodule hull_half() {\n    difference() {\n        // Main hull shape\n        scale([1, 0.6, 0.4])\n        rotate([90, 0, 0])\n        cylinder(h=100, r1=50, r2=45);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n        scale([0.9, 0.5, 0.3])\n        rotate([90, 0, 0])\n        cylinder(h=100, r1=45, r2=40);\n        \n        // Top opening\n        translate([0, -30, 0])\n        cube([90, 60, 50], center=true);\n    }\n}\n\nmodule deck_plank(x) {\n    translate([x, 0, 40])\n    cube([8, 60, 2]);\n}\n\nmodule support_beam() {\n    translate([0, 0, 20])\n    cube([3, 120, 3]);\n}\n\nmodule cross_support() {\n    translate([0, 0, 15])\n    cube([100, 3, 15]);\n}\n\nmodule hinge_pin() {\n    cylinder(h=65, r=2);\n}\n\nmodule storage_lid() {\n    difference() {\n        // Lid base\n        translate([0, 0, 42])\n        cube([95, 65, 4]);\n        \n        // Handle cutout\n        translate([0, 30, 44])\n        cube([20, 5, 2]);\n        \n        // Finger grip\n        translate([0, 32, 43])\n        cube([15, 3, 1]);\n    }\n    \n    // Handle bar\n    translate([0, 30, 45])\n    cube([15, 3, 1]);\n}\n\nmodule catamaran_bench() {\n    // Left hull\n    translate([-55, 0, 0])\n    hull_half();\n    \n    // Right hull\n    translate([55, 0, 0])\n    mirror([1, 0, 0])\n    hull_half();\n    \n    // Deck planks\n    for (x = [-45:10:45]) {\n        deck_plank(x);\n    }\n    \n    // Structural supports\n    support_beam();\n    translate([0, 60, 0])\n    support_beam();\n    translate([0, -60, 0])\n    support_beam();\n    \n    // Cross supports between hulls\n    translate([-50, 0, 0])\n    cross_support();\n    translate([50, 0, 0])\n    cross_support();\n    \n    // Hinges for storage lid\n    translate([-45, -30, 42])\n    rotate([90, 0, 0])\n    hinge_pin();\n    translate([45, -30, 42])\n    rotate([90, 0, 0])\n    hinge_pin();\n    \n    // Storage lid\n    translate([0, 0, 0])\n    storage_lid();\n    \n    // Drainage holes\n    for (x = [-30:20:30]) {\n        translate([x, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=2);\n    }\n}\n\n// Main assembly\ncatamaran_bench();",
    "renders": true
  },
  {
    "natural_object": "trimaran",
    "openscad_code": "// Trimaran Chair - Realistic Style, Medium Complexity\n// A 3D printable chair inspired by trimaran boat design\n\n// Parameters\nchair_length = 120;\nchair_width = 80;\nchair_height = 85;\nseat_height = 45;\nwall_thickness = 2;\n\n// Main hull (central seat)\nmodule main_hull() {\n    // Seat surface\n    translate([0, 0, seat_height]) {\n        difference() {\n            cube([chair_length * 0.5, chair_width * 0.6, wall_thickness], center = true);\n            // Add comfort curve\n            translate([0, 0, wall_thickness - 1]) {\n                cube([chair_length * 0.4, chair_width * 0.4, 2], center = true);\n            }\n        }\n    }\n    \n    // Hull body\n    translate([0, 0, seat_height/2]) {\n        hull() {\n            translate([-chair_length * 0.2, -chair_width * 0.25, 0]) {\n                cylinder(h = seat_height, d = chair_width * 0.3, center = true);\n            }\n            translate([chair_length * 0.2, -chair_width * 0.25, 0]) {\n                cylinder(h = seat_height, d = chair_width * 0.3, center = true);\n            }\n            translate([-chair_length * 0.2, chair_width * 0.25, 0]) {\n                cylinder(h = seat_height, d = chair_width * 0.3, center = true);\n            }\n            translate([chair_length * 0.2, chair_width * 0.25, 0]) {\n                cylinder(h = seat_height, d = chair_width * 0.3, center = true);\n            }\n        }\n    }\n}\n\n// Side pontoons (outriggers)\nmodule pontoon(pos_x, pos_y) {\n    translate([pos_x, pos_y, seat_height/2]) {\n        rotate([0, 0, pos_y > 0 ? 0 : 180]) {\n            // Pontoon body\n            hull() {\n                cylinder(h = seat_height * 0.9, d = chair_width * 0.15, center = true);\n                translate([0, -chair_width * 0.3, 0]) {\n                    cylinder(h = seat_height * 0.9, d = chair_width * 0.1, center = true);\n                }\n            }\n            \n            // Connection beam\n            translate([0, pos_y > 0 ? -chair_width * 0.3 : chair_width * 0.3, 0]) {\n                cube([chair_length * 0.3, chair_width * 0.2, wall_thickness * 1.5], center = true);\n            }\n        }\n    }\n}\n\n// Backrest with trimaran sail design\nmodule backrest() {\n    translate([-chair_length * 0.35, 0, seat_height + 20]) {\n        // Mast\n        cylinder(h = 40, d = wall_thickness * 2, center = true);\n        \n        // Sail shape backrest\n        translate([0, 0, 10]) {\n            hull() {\n                sphere(d = chair_width * 0.4);\n                translate([0, 0, 20]) {\n                    sphere(d = chair_width * 0.2);\n                }\n            }\n        }\n        \n        // Support cables (decorative)\n        for(angle = [0, 120, 240]) {\n            rotate([0, 0, angle]) {\n                translate([0, chair_width * 0.15, 0]) {\n                    cylinder(h = 30, d = wall_thickness/2, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Leg supports\nmodule legs() {\n    // Central support\n    translate([0, 0, seat_height/4]) {\n        cylinder(h = seat_height/2, d = wall_thickness * 4, center = true);\n    }\n    \n    // Outrigger supports\n    for(side = [-1, 1]) {\n        translate([side * chair_length * 0.25, side * chair_width * 0.4, seat_height/4]) {\n            cylinder(h = seat_height/2, d = wall_thickness * 3, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_hull();\n    pontoon(0, chair_width * 0.4);\n    pontoon(0, -chair_width * 0.4);\n    backrest();\n    legs();\n}\n\n// Additional structural details\n// Cross braces between pontoons\ntranslate([0, 0, seat_height/3]) {\n    cube([chair_length * 0.6, chair_width * 0.8, wall_thickness], center = true);\n}\n\n// Drain holes (for 3D printing stability)\nfor(x = [-chair_length * 0.15, 0, chair_length * 0.15]) {\n    translate([x, 0, seat_height/2]) {\n        cylinder(h = seat_height + 2, d = wall_thickness * 2, center = true);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "ketch",
    "openscad_code": "// Ketch (sailboat) furniture item - realistic style, medium complexity\n// Overall length: 120mm, designed as a decorative bookshelf piece\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main hull module - realistic boat hull with proper proportions\nmodule hull() {\n    // Bottom curved hull\n    difference() {\n        hull_shape();\n        // Hollow out interior for furniture use\n        translate([0, 0, 2]) scale([0.9, 0.85, 0.8]) hull_shape();\n    }\n}\n\n// Basic hull shape\nmodule hull_shape() {\n    union() {\n        // Main hull body - tapered with curved deck\n        for (i = [0:2:60]) {\n            hull_section(i);\n        }\n    }\n}\n\n// Individual hull sections for smooth curves\nmodule hull_section(pos) {\n    scale_factor = 1 - (pos / 60) * 0.4;\n    width = 25 * scale_factor;\n    height = 12 * (1 - abs(pos - 30) / 30 * 0.3);\n    \n    translate([pos - 30, 0, 0]) {\n        rotate([90, 0, 0]) \n            cylinder(h=2, d1=width, d2=width * 0.9);\n    }\n}\n\n// Keel structure for stability\nmodule keel() {\n    translate([0, 0, -5]) {\n        // Main keel fin\n        cube([80, 3, 8], center=true);\n        \n        // Keel bulb for ballast\n        translate([0, 0, -8]) {\n            scale([1, 0.3, 0.5]) sphere(d=15);\n        }\n    }\n}\n\n// Deck structure with furniture features\nmodule deck() {\n    // Main deck surface\n    translate([0, 0, 12]) {\n        // Deck planking effect\n        for (i = [-20:5:20]) {\n            translate([i, 0, 0]) {\n                cube([4.5, 20, 1], center=true);\n            }\n        }\n        \n        // Cabin trunk - furniture storage compartment\n        translate([-10, 0, 1]) {\n            // Cabin walls\n            cube([25, 18, 10], center=true);\n            \n            // Cabin roof\n            translate([0, 0, 5.5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=25, r=9);\n                }\n            }\n            \n            // Door detail\n            translate([12.5, 0, 0]) {\n                cube([1, 6, 8], center=true);\n                // Door handle\n                translate([0.5, 4, 0]) {\n                    cylinder(h=2, d=2);\n                }\n            }\n        }\n    }\n}\n\n// Mast structure\nmodule mast() {\n    // Main mast\n    translate([5, 0, 12]) {\n        cylinder(h=50, d=3);\n        \n        // Mast step reinforcement\n        translate([0, 0, -2]) {\n            cylinder(h=4, d=6);\n        }\n    }\n    \n    // Mizzen mast\n    translate([-20, 0, 12]) {\n        cylinder(h=40, d=2.5);\n    }\n}\n\n// Rigging details\nmodule rigging() {\n    // Main boom\n    translate([5, 0, 35]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=35, d=2);\n        }\n    }\n    \n    // Mizzen boom\n    translate([-20, 0, 30]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=25, d=1.5);\n        }\n    }\n    \n    // Forestay\n    translate([5, 0, 37]) {\n        rotate([30, 0, 0]) {\n            cylinder(h=40, d=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    hull();\n    keel();\n    deck();\n    mast();\n    rigging();\n    \n    // Furniture base - flat bottom for stability\n    translate([0, 0, -13]) {\n        cube([85, 22, 2], center=true);\n    }\n}\n\n// Optional - Add small decorative elements\ntranslate([25, 8, 13]) {\n    sphere(d=3); // Bow navigation light\n}\n\ntranslate([-35, -8, 13]) {\n    sphere(d=2.5); // Stern light\n}",
    "renders": true
  },
  {
    "natural_object": "schooner",
    "openscad_code": "// Schooner Bookshelf - Medium complexity furniture\n// Combines a schooner hull with bookshelf functionality\n\n// Overall dimensions\nhull_length = 120;\nhull_width = 35;\nhull_height = 45;\nshelf_thickness = 2;\n\n// Hull shape module\nmodule schooner_hull() {\n    // Main hull body\n    hull_profile();\n    \n    // Deck structures\n    hull_deck();\n    \n    // Bookshelf compartments\n    bookshelf_sections();\n    \n    // Structural supports\n    hull_braces();\n}\n\n// Create the curved hull shape\nmodule hull_profile() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Hollow out interior for bookshelf\n        translate([shelf_thickness, shelf_thickness, shelf_thickness])\n            scale([0.9, 0.9, 0.8])\n            hull_shape();\n    }\n}\n\n// Basic hull shape with curved bottom\nmodule hull_shape() {\n    hull() {\n        // Bow\n        translate([hull_length/2, 0, 0])\n            scale([1, 0.8, 0.9])\n            sphere(d=hull_width);\n        \n        // Stern\n        translate([-hull_length/2, 0, 0])\n            scale([0.8, 0.9, 0.9])\n            sphere(d=hull_width);\n        \n        // Midsection\n        translate([0, 0, 0])\n            cube([hull_length, hull_width, hull_height], center=true);\n        \n        // Keel\n        translate([0, 0, -hull_height/2])\n            cube([hull_length*0.9, hull_width*0.3, hull_height*0.3], center=true);\n    }\n}\n\n// Deck surface and cabin structures\nmodule hull_deck() {\n    // Main deck\n    translate([0, 0, hull_height/2 - shelf_thickness])\n        cube([hull_length*0.9, hull_width*0.9, shelf_thickness], center=true);\n    \n    // Cabin structure (bookshelf backing)\n    cabin_height = hull_height * 0.6;\n    translate([-hull_length*0.3, 0, hull_height/2 + cabin_height/2])\n        cube([hull_length*0.5, hull_width*0.7, cabin_height], center=true);\n}\n\n// Bookshelf compartments inside hull\nmodule bookshelf_sections() {\n    // Bottom shelf\n    translate([0, 0, -hull_height*0.3])\n        cube([hull_length*0.8, shelf_thickness, hull_width*0.8], center=true);\n    \n    // Middle shelf\n    translate([0, 0, 0])\n        cube([hull_length*0.8, shelf_thickness, hull_width*0.8], center=true);\n    \n    // Vertical dividers\n    for (x = [-hull_length*0.3, -hull_length*0.1, hull_length*0.1, hull_length*0.3]) {\n        translate([x, 0, -hull_height*0.15])\n            cube([shelf_thickness, hull_width*0.7, hull_height*0.5], center=true);\n    }\n}\n\n// Structural braces for furniture strength\nmodule hull_braces() {\n    // Bow brace\n    translate([hull_length*0.4, 0, -hull_height*0.2])\n        rotate([0, 90, 0])\n        cylinder(h=hull_width*0.8, r=shelf_thickness*1.5, center=true);\n    \n    // Stern brace\n    translate([-hull_length*0.4, 0, -hull_height*0.2])\n        rotate([0, 90, 0])\n        cylinder(h=hull_width*0.8, r=shelf_thickness*1.5, center=true);\n    \n    // Keel reinforcement\n    translate([0, 0, -hull_height*0.4])\n        cube([hull_length*0.7, shelf_thickness*2, hull_height*0.2], center=true);\n}\n\n// Mast structure (decorative, also serves as bookend)\nmodule mast_assembly() {\n    mast_height = hull_height * 2;\n    \n    // Main mast\n    translate([hull_length*0.2, 0, hull_height/2])\n        cylinder(h=mast_height, r=shelf_thickness, center=false);\n    \n    // Mast platform (small shelf)\n    translate([hull_length*0.2, 0, hull_height*1.2])\n        cube([hull_length*0.15, hull_width*0.4, shelf_thickness], center=true);\n    \n    // Boom (horizontal spar)\n    translate([hull_length*0.2 + hull_length*0.1, 0, hull_height*1.5])\n        rotate([90, 0, 0])\n        cylinder(h=hull_length*0.3, r=shelf_thickness*0.8, center=true);\n}\n\n// Assembly\nunion() {\n    schooner_hull();\n    mast_assembly();\n}",
    "renders": true
  },
  {
    "natural_object": "top",
    "openscad_code": "// Realistic Wooden Stool\n// 3D printable, 270 mm tall, 300 mm diameter seat\n// Medium complexity with turned legs, stretchers, and finger-jointed seat\n\n// Parameters\nseat_d = 300;           // seat diameter\nseat_h = 25;            // seat thickness\nleg_d = 35;             // leg diameter\nleg_h = 220;            // leg height\nstretcher_d = 20;       // stretcher diameter\nstretcher_h = 120;      // height from floor\nfinger_w = 8;           // finger joint width\nfinger_h = 12;          // finger joint height\n\n// Color\ncolor(\"BurlyWood\");\n\n// Seat with finger-jointed edges\nmodule seat() {\n    difference() {\n        // Main seat disk\n        cylinder(d=seat_d, h=seat_h, $fn=100);\n        \n        // Rounded top edge\n        translate([0,0,seat_h-2])\n            cylinder(d=seat_d-4, h=2, $fn=100);\n        \n        // Finger joints around edge (8 segments)\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([seat_d/2-6, -finger_w/2, 0])\n                    cube([6,finger_w,finger_h]);\n        }\n    }\n}\n\n// Turned leg profile (simplified)\nmodule turned_leg() {\n    union() {\n        // Base\n        cylinder(d=leg_d, h=10, $fn=32);\n        \n        // Bulge\n        translate([0,0,10])\n            cylinder(d=leg_d+10, h=40, $fn=32);\n        \n        // Narrow waist\n        translate([0,0,50])\n            cylinder(d=leg_d-5, h=60, $fn=32);\n        \n        // Top bulge\n        translate([0,0,110])\n            cylinder(d=leg_d+8, h=40, $fn=32);\n        \n        // Top tenon\n        translate([0,0,150])\n            cylinder(d=leg_d-3, h=70, $fn=32);\n    }\n}\n\n// Stretcher between legs\nmodule stretcher() {\n    rotate([90,0,0])\n        cylinder(d=stretcher_d, h=seat_d*0.6, $fn=20);\n}\n\n// Main assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Legs (3 legs at 120 degree spacing)\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n            translate([seat_d/2-leg_d/2-5, 0, -leg_h])\n                turned_leg();\n    }\n    \n    // Stretchers (3 connecting legs)\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n            translate([0, 0, stretcher_h])\n                stretcher();\n    }\n    \n    // Center support ring\n    translate([0,0,stretcher_h-stretcher_d/2])\n        rotate([90,0,0])\n            cylinder(d=seat_d*0.4, h=stretcher_d, $fn=32);\n}",
    "renders": true
  },
  {
    "natural_object": "kite",
    "openscad_code": "// Kite shaped wall shelf unit - medium complexity\n// Overall dimensions: 100mm width x 150mm height x 30mm depth\n\n$fn = 32;\n\n// Main kite frame structure\nmodule kite_frame() {\n    // Outer diamond frame - 2mm thick walls\n    difference() {\n        // Outer diamond\n        scale([1, 1.5, 1]) \n            cube([100, 100, 30], center=true);\n        \n        // Hollow center\n        scale([0.9, 0.8, 1.2]) \n            cube([100, 100, 30], center=true);\n    }\n}\n\n// Cross spar supports\nmodule cross_spar() {\n    // Horizontal spar\n    translate([0, 0, 0])\n        cube([100, 4, 30], center=true);\n    \n    // Vertical spar\n    translate([0, 0, 0])\n        cube([4, 150, 30], center=true);\n}\n\n// Shelf platforms\nmodule shelves() {\n    // Bottom shelf\n    translate([0, 40, -10])\n        cube([80, 2, 20], center=true);\n    \n    // Middle shelf\n    translate([0, 10, -10])\n        cube([60, 2, 20], center=true);\n    \n    // Top shelf\n    translate([0, -20, -10])\n        cube([40, 2, 20], center=true);\n}\n\n// Corner brackets for reinforcement\nmodule brackets() {\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([35, 52, 0])\n                cube([20, 2, 30], center=true);\n    }\n}\n\n// Mounting holes for wall attachment\nmodule mounting_holes() {\n    // Two mounting points on vertical spar\n    translate([0, 50, 0])\n        cylinder(h=35, r=3, center=true);\n    translate([0, -50, 0])\n        cylinder(h=35, r=3, center=true);\n}\n\n// Decorative tail attachment point\nmodule tail_attachment() {\n    translate([0, -75, 15])\n        cylinder(h=10, r=5, center=true);\n    translate([0, -75, 20])\n        sphere(r=5);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    kite_frame();\n    \n    // Internal supports\n    cross_spar();\n    \n    // Shelf surfaces\n    shelves();\n    \n    // Reinforcement brackets\n    brackets();\n    \n    // Tail attachment\n    tail_attachment();\n}\n\n// Remove mounting holes from structure\ndifference() {\n    // Previous union\n    translate([0, 0, 0])\n        children();\n    \n    // Mounting holes\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "natural_object": "jacks",
    "openscad_code": "// Jacks-inspired coffee table\n// Realistic style, medium complexity\n// Overall size: 120mm x 120mm x 45mm\n\n$fn = 32;\n\n// Main parameters\nleg_length = 45;\nleg_diameter = 8;\ntop_thickness = 6;\ntable_size = 120;\nbeam_diameter = 5;\njoint_size = 12;\njoint_height = 8;\n\n// Central joint sphere\nmodule central_joint() {\n    // Main joint sphere\n    sphere(d = joint_size);\n    \n    // Decorative rings\n    for (i = [1:3]) {\n        rotate([0, 90, 0])\n            rotate([0, 0, i * 60])\n                translate([0, 0, -joint_size/2 + i * 2])\n                    cylinder(h = 1, d = joint_size + 2, $fn = 6);\n    }\n}\n\n// Single leg with connection detail\nmodule leg(angle_x, angle_z) {\n    // Connection joint\n    rotate([angle_x, 0, angle_z])\n        translate([0, 0, joint_size/2])\n            cylinder(h = joint_height, d = joint_size * 0.8);\n    \n    // Main leg\n    rotate([angle_x, 0, angle_z])\n        translate([0, 0, joint_size/2 + joint_height/2])\n            cylinder(h = leg_length - joint_height/2 - joint_size/2, d = leg_diameter);\n    \n    // Foot detail\n    rotate([angle_x, 0, angle_z])\n        translate([0, 0, leg_length - joint_size/2])\n            sphere(d = leg_diameter * 1.2);\n}\n\n// Cross beam between legs\nmodule cross_beam(x1, y1, z1, x2, y2, z2) {\n    dx = x2 - x1;\n    dy = y2 - y1;\n    dz = z2 - z1;\n    length = sqrt(dx*dx + dy*dy + dz*dz);\n    \n    translate([x1, y1, z1])\n        rotate([0, atan2(sqrt(dx*dx + dy*dy), dz), atan2(dy, dx)])\n            cylinder(h = length, d = beam_diameter);\n}\n\n// Table top with beveled edge\nmodule table_top() {\n    difference() {\n        // Main top\n        cube([table_size, table_size, top_thickness], center = true);\n        \n        // Underside cavity for weight reduction\n        translate([0, 0, -top_thickness/2 + 2])\n            cube([table_size - 10, table_size - 10, top_thickness - 2], center = true);\n        \n        // Bevel edges\n        for (dx = [-1, 1]) {\n            for (dy = [-1, 1]) {\n                translate([dx * (table_size/2 - 2), dy * (table_size/2 - 2), top_thickness/2 - 2])\n                    rotate([0, 0, 45 * dx * dy])\n                        cube([4, 4, 4], center = true);\n            }\n        }\n    }\n    \n    // Surface texture pattern\n    for (i = [0:5:table_size - 5]) {\n        for (j = [0:5:table_size - 5]) {\n            translate([-table_size/2 + i + 2.5, -table_size/2 + j + 2.5, top_thickness/2 - 0.5])\n                cube([0.5, 0.5, 1], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Central joint\n    central_joint();\n    \n    // Six legs in jacks formation\n    for (angle = [0:60:300]) {\n        leg(35, angle);\n    }\n    \n    // Cross beams for stability\n    for (angle = [30:120:360]) {\n        x1 = cos(angle) * joint_size/2;\n        y1 = sin(angle) * joint_size/2;\n        z1 = joint_size/2;\n        x2 = cos(angle) * (leg_length * 0.7) * sin(35);\n        y2 = sin(angle) * (leg_length * 0.7) * sin(35);\n        z2 = (leg_length * 0.7) * cos(35);\n        cross_beam(x1, y1, z1, x2, y2, z2);\n    }\n    \n    // Table top\n    translate([0, 0, leg_length + top_thickness/2])\n        table_top();\n    \n    // Mounting brackets\n    for (angle = [0:60:300]) {\n        mount_x = cos(angle) * joint_size/2 * sin(35);\n        mount_y = sin(angle) * joint_size/2 * sin(35);\n        mount_z = joint_size/2 * cos(35) + leg_length * 0.3;\n        \n        translate([mount_x, mount_y, mount_z])\n            rotate([90 - 35, 0, angle])\n                cylinder(h = 10, d = 6);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "marbles",
    "openscad_code": "// Marble Magazine Rack - Realistic Style\n// Dimensions: 120mm x 80mm x 150mm (L x W x H)\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;\n\nmodule marble(diameter) {\n    // Create a realistic marble with swirls\n    color(\"ivory\")\n    sphere(d = diameter);\n    \n    // Internal swirl pattern\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([diameter/4, 0, 0])\n        scale([1, 0.3, 0.3])\n        color(\"lightgray\", 0.5)\n        sphere(d = diameter * 0.6);\n    }\n}\n\nmodule frame_support() {\n    // Main frame base - 2mm thick walls\n    difference() {\n        // Outer frame\n        cube([120, 80, 150]);\n        \n        // Hollow center - creates 2mm walls\n        translate([2, 2, 2])\n        cube([116, 76, 146]);\n        \n        // Front opening for magazines\n        translate([0, 2, 40])\n        cube([120, 76, 108]);\n    }\n    \n    // Bottom support ledge\n    translate([2, 2, 38])\n    cube([116, 76, 2]);\n}\n\nmodule marble_holder() {\n    // Create 5 marble positions along the bottom\n    for (pos = [1:5]) {\n        translate([pos * 20 - 10, 40, 25])\n        marble(12);\n    }\n}\n\nmodule side_reinforcements() {\n    // Add triangular supports at corners\n    for (side = [-1, 1]) {\n        translate([side * 58, 0, 0])\n        rotate([0, 0, side * 90])\n        linear_extrude(height = 2)\n        polygon(points=[[0,0],[20,0],[0,20]]);\n        \n        translate([side * 58, 78, 0])\n        rotate([0, 0, side * -90])\n        linear_extrude(height = 2)\n        polygon(points=[[0,0],[20,0],[0,20]]);\n    }\n}\n\nmodule back_support_grid() {\n    // Create a grid pattern on the back for strength\n    for (y = [10:20:70]) {\n        translate([2, y, 42])\n        cube([2, 2, 104]);\n    }\n    \n    for (z = [50:20:130]) {\n        translate([2, 4, z])\n        cube([2, 72, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame structure\n    frame_support();\n    \n    // Reinforcement elements\n    side_reinforcements();\n    \n    // Back support grid\n    back_support_grid();\n    \n    // Marble collection at bottom\n    marble_holder();\n    \n    // Top decorative rail\n    translate([2, 2, 148])\n    cube([116, 76, 2]);\n    \n    // Front lip to retain marbles\n    translate([2, 2, 20])\n    cube([116, 2, 20]);\n}",
    "renders": true
  },
  {
    "natural_object": "hoop",
    "openscad_code": "// Hoop Furniture Item - Medium Complexity Realistic Style\n// A modern side table with hoop leg structure and wooden top\n\n// Parameters\n$fn = 36;\ntop_diameter = 80;\ntop_thickness = 4;\nleg_diameter = 8;\nhoop_radius = 35;\nhoop_thickness = 3;\nbase_height = 5;\nbase_extension = 5;\ntable_height = 70;\njoint_size = 6;\n\n// Main module\nmodule hoop_table() {\n    // Wooden top\n    union() {\n        // Main circular top\n        translate([0, 0, table_height]) {\n            cylinder(h = top_thickness, r = top_diameter/2, center = true);\n        }\n        \n        // Top support ring\n        translate([0, 0, table_height - top_thickness/2 - 1]) {\n            cylinder(h = 2, r = top_diameter/2 - 5, center = true);\n        }\n    }\n    \n    // Hoop leg structure\n    module hoop_leg(angle) {\n        rotate([0, 0, angle]) {\n            // Vertical leg\n            translate([0, top_diameter/2 - leg_diameter - 5, table_height/2]) {\n                cylinder(h = table_height - top_thickness/2 - base_height/2, \n                        r = leg_diameter/2, center = true);\n            }\n            \n            // Hoop connection\n            translate([0, top_diameter/2 - leg_diameter - 5, table_height/2 - 15]) {\n                rotate([90, 0, 0]) {\n                    rotate_extrude(angle = 90, convexity = 10) {\n                        translate([hoop_radius - hoop_thickness/2, 0, 0]) {\n                            square([hoop_thickness, hoop_radius - hoop_thickness/2]);\n                        }\n                    }\n                }\n            }\n            \n            // Base connection\n            translate([0, top_diameter/2 - leg_diameter - 5, base_height/2]) {\n                cylinder(h = base_height, r = leg_diameter/2, center = true);\n            }\n        }\n    }\n    \n    // Generate 3 hoop legs at 120 degree intervals\n    for (i = [0:120:359]) {\n        hoop_leg(i);\n    }\n    \n    // Central hoop ring\n    translate([0, 0, table_height/2 - 15]) {\n        rotate_extrude(convexity = 10) {\n            translate([hoop_radius - hoop_thickness/2, 0, 0]) {\n                square([hoop_thickness, hoop_radius]);\n            }\n        }\n    }\n    \n    // Base ring for stability\n    translate([0, 0, base_height/2]) {\n        difference() {\n            cylinder(h = base_height, r = top_diameter/2 - 10, center = true);\n            cylinder(h = base_height + 1, r = top_diameter/2 - 10 - base_extension, center = true);\n        }\n    }\n    \n    // Joint reinforcements\n    module joint(angle) {\n        rotate([0, 0, angle]) {\n            translate([0, top_diameter/2 - leg_diameter - 5, table_height - 15]) {\n                sphere(r = joint_size/2);\n            }\n            translate([0, top_diameter/2 - leg_diameter - 5, base_height + 10]) {\n                sphere(r = joint_size/2);\n            }\n        }\n    }\n    \n    // Add joints at leg connections\n    for (i = [0:120:359]) {\n        joint(i);\n    }\n}\n\n// Render the table\nhoop_table();",
    "renders": true
  },
  {
    "natural_object": "spinningwheel",
    "openscad_code": "// Spinning Wheel Furniture - Realistic Style\n// Medium complexity model with proper proportions for 3D printing\n\n// Overall dimensions: 80mm wide x 120mm tall x 60mm deep\n$fn = 32;\n\n// Base frame structure\nmodule base_frame() {\n    // Main base platform\n    difference() {\n        cube([70, 10, 50], center=true);\n        translate([0, 5, 0]) cube([66, 10, 46], center=true);\n    }\n    \n    // Support legs\n    for(x=[-25, 25])\n    for(z=[-20, 20]) {\n        translate([x, -12, z]) \n        cylinder(h=24, r=2.5, center=true);\n    }\n}\n\n// Treadle (foot pedal)\nmodule treadle() {\n    translate([-20, -18, 0]) {\n        difference() {\n            cube([40, 4, 15], center=true);\n            translate([0, 2, 0]) cube([36, 4, 11], center=true);\n        }\n    }\n}\n\n// Main wheel assembly\nmodule main_wheel() {\n    rotate([0, 0, 0]) {\n        // Wheel rim\n        difference() {\n            cylinder(h=5, r=25, center=true);\n            cylinder(h=6, r=20, center=true);\n        }\n        \n        // Spokes\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n            translate([22.5, 0, 0])\n            cube([5, 2, 5], center=true);\n        }\n        \n        // Hub\n        translate([0, 0, 0])\n        cylinder(h=8, r=4, center=true);\n        \n        // Crank handle\n        translate([25, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=2, center=true);\n    }\n}\n\n// Upright post structure\nmodule upright_post() {\n    // Main post\n    translate([0, 0, 0]) {\n        difference() {\n            cube([8, 80, 6], center=true);\n            translate([0, 0, 0]) cube([4, 76, 10], center=true);\n        }\n        \n        // Wheel axle support\n        translate([0, 25, 0]) {\n            difference() {\n                cube([20, 8, 8], center=true);\n                translate([0, 0, 0]) cube([16, 4, 12], center=true);\n            }\n        }\n    }\n}\n\n// Distaff (fiber holder)\nmodule distaff() {\n    translate([0, 45, 15]) {\n        rotate([45, 0, 0]) {\n            // Main shaft\n            cylinder(h=30, r=1.5, center=true);\n            \n            // Hook details\n            translate([0, 15, 0])\n            sphere(r=2);\n        }\n    }\n}\n\n// Mother-of-all (yarn guide system)\nmodule mother_of_all() {\n    translate([0, 35, -15]) {\n        // Base platform\n        difference() {\n            cube([15, 6, 12], center=true);\n            translate([0, 3, 0]) cube([11, 6, 8], center=true);\n        }\n        \n        // Orifice tube\n        translate([0, 0, -8])\n        rotate([90, 0, 0])\n        cylinder(h=12, r=1.5, center=true);\n        \n        // Maidens (upright supports)\n        for(x=[-5, 5]) {\n            translate([x, 3, 0])\n            cylinder(h=12, r=1, center=true);\n        }\n    }\n}\n\n// Drive band tensioning system\nmodule tension_system() {\n    translate([0, 15, 0]) {\n        // Tension peg\n        cylinder(h=8, r=1.5, center=true);\n        \n        // Support brace\n        translate([0, -4, 0])\n        cube([4, 8, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_frame();\n    \n    // Treadle\n    treadle();\n    \n    // Upright support\n    upright_post();\n    \n    // Main wheel - positioned on axle\n    translate([0, 25, 0])\n    rotate([90, 0, 0])\n    main_wheel();\n    \n    // Mother-of-all assembly\n    mother_of_all();\n    \n    // Distaff\n    distaff();\n    \n    // Tension system\n    tension_system();\n}",
    "renders": true
  },
  {
    "natural_object": "loom",
    "openscad_code": "// Medium-complexity realistic 3D-printable loom furniture model (~100 mm wide)\n// No overhangs steeper than 45°, 2 mm walls, printable without supports\n\n$fn = 24;           // Faceting for cylinders & spheres\n\n// Overall scale factor to keep model ≈100 mm wide\nscale_factor = 0.4;\n\n// Main frame module\nmodule loom_frame() {\n    // Side frames (left & right)\n    for (x = [-48, 48]) mirror([x < 0 ? 1 : 0, 0, 0])\n        translate([x * scale_factor, 0, 0])\n            cube([4, 20, 60], center = true);\n\n    // Top & bottom stretchers\n    for (z = [-28, 28]) {\n        translate([0, 0, z * scale_factor])\n            cube([100, 4, 3], center = true);\n    }\n\n    // Front & back rails\n    for (y = [-8, 8]) {\n        translate([0, y * scale_factor, 0])\n            cube([100, 3, 56], center = true);\n    }\n}\n\n// Warp beam (cylinder with bearing caps)\nmodule warp_beam() {\n    // Main beam\n    translate([0, 10, 18])\n        rotate([90, 0, 0])\n            cylinder(h = 100 * scale_factor, d = 8, center = true);\n\n    // Bearing blocks left & right\n    for (x = [-48, 48]) {\n        translate([x * scale_factor, 10, 18])\n            cube([6, 6, 6], center = true);\n    }\n}\n\n// Cloth beam\nmodule cloth_beam() {\n    // Same as warp beam but lower\n    translate([0, -10, -18])\n        rotate([90, 0, 0])\n            cylinder(h = 100 * scale_factor, d = 8, center = true);\n\n    // Bearing blocks\n    for (x = [-48, 48]) {\n        translate([x * scale_factor, -10, -18])\n            cube([6, 6, 6], center = true);\n    }\n}\n\n// Heddle frames (two)\nmodule heddles() {\n    for (offset = [-4, 4]) {\n        translate([0, offset * scale_factor, 0])\n        difference() {\n            // Outer rectangle\n            cube([90, 2, 40], center = true);\n            // Inner cut-out (lightening)\n            cube([86, 3, 36], center = true);\n        }\n    }\n}\n\n// Shuttle race (thin table)\nmodule shuttle_race() {\n    translate([0, 0, -8])\n        cube([90, 12, 2], center = true);\n}\n\n// Treadles (foot pedals) – simple blocks\nmodule treadles() {\n    for (i = [-1, 0, 1]) {\n        translate([i * 20 * scale_factor, 0, -30])\n            cube([12, 8, 4], center = true);\n    }\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    loom_frame();\n    warp_beam();\n    cloth_beam();\n    heddles();\n    shuttle_race();\n    treadles();\n}",
    "renders": true
  },
  {
    "natural_object": "quill",
    "openscad_code": "// Quill Chair – a realistic, 3D-printable miniature furniture piece\n// Overall size: 100 mm (H) x 70 mm (W) x 80 mm (D) – safe for FDM printing with 2 mm walls\n// No unsupported overhangs; all slopes ≤ 45°\n\n$fn = 36;\n\n// Main module\nmodule quill_chair() {\n    difference() {\n        union() {\n            // Seat platform: oval cushion\n            translate([0, 0, 45])\n                scale([1, 0.75, 1])\n                    cylinder(h = 15, r = 30);\n\n            // Central feather shaft (backrest support)\n            translate([0, -20, 0])\n                rotate([0, 5, 0])            // gentle backward lean\n                    cylinder(h = 100, r1 = 8, r2 = 6);  // tapered stem\n\n            // Feather vane (backrest)\n            vane();\n\n            // Legs – four stylized quill tips\n            for (m = [[-25, 25], [25, 25], [-25, -25], [25, -25]])\n                translate([m[0], m[1], 0])\n                    leg();\n        }\n\n        // Lightening hole in seat underside to reduce material\n        translate([0, 0, 30])\n            cylinder(h = 16, r = 22);\n    }\n}\n\n// Feather vane with realistic barbs\nmodule vane() {\n    difference() {\n        // Main vane shape\n        translate([0, -55, 75])\n            rotate([90, 0, 0])\n                scale([1, 0.2, 1])\n                    cylinder(h = 60, r1 = 30, r2 = 10);\n\n        // Barbs cutouts for texture\n        for (i = [0:4]) {\n            rotate([0, 0, i * 15])\n                translate([0, -60 + i*10, 72])\n                    rotate([0, 90, 0])\n                        cube([35, 2, 2], center = true);\n        }\n    }\n}\n\n// Quill-tip leg\nmodule leg() {\n    difference() {\n        union() {\n            // Main cone\n            cylinder(h = 45, r1 = 8, r2 = 4);\n\n            // Reinforcement ring (furniture joint detail)\n            translate([0, 0, 5])\n                cylinder(h = 3, r = 10);\n        }\n        // Hollow interior for printability\n        translate([0, 0, -1])\n            cylinder(h = 47, r1 = 6, r2 = 2);\n    }\n}\n\nquill_chair();",
    "renders": true
  },
  {
    "natural_object": "inkwell",
    "openscad_code": "// Realistic OpenSCAD Inkwell Furniture – medium complexity\n// Overall footprint ≈ 80 mm × 60 mm × 65 mm\n// Wall thickness 2 mm throughout, no severe overhangs\n\n$fn = 36;\n\n// Main body – wooden desk-like frame holding the glass inkwell\nmodule frame() {\n    // 2 mm thick base plate\n    difference() {\n        cube([80, 60, 4], center = true);\n        translate([0, 0, -1])\n            cube([76, 56, 6], center = true);  // hollowed for 2 mm walls\n    }\n\n    // Four corner legs 55 mm tall\n    for (x = [-36, 36])\n        for (y = [-26, 26])\n            translate([x, y, -27.5])\n                cylinder(h = 55, d1 = 8, d2 = 6);  // tapered legs\n}\n\n// Drawer front with small pull knob\nmodule drawer() {\n    translate([0, -31, -10])\n        difference() {\n            cube([40, 4, 20], center = true);           // drawer face\n            translate([0, 2.1, 0])\n                cube([36, 2, 16], center = true);       // 2 mm wall\n        }\n    translate([0, -29, -10])\n        sphere(d = 6);                                   // knob\n}\n\n// Glass ink pot insert\nmodule inkpot() {\n    difference() {\n        cylinder(h = 30, d = 36);                        // outer\n        translate([0, 0, 2])\n            cylinder(h = 32, d = 32);                    // inner cavity\n    }\n}\n\n// Circular recess in frame to seat inkpot flush\nmodule recess() {\n    translate([0, 0, 2])\n        cylinder(h = 32, d = 38);\n}\n\n// Assembly\nunion() {\n    frame();\n    drawer();\n    difference() {\n        cube([80, 60, 4], center = true);                // top plate\n        recess();\n    }\n    translate([0, 0, 18])\n        inkpot();\n}",
    "renders": true
  },
  {
    "natural_object": "candle",
    "openscad_code": "// Realistic Candle Furniture - Medium Complexity\n// Dimensions: 80mm height, 50mm diameter\n\n// Main candle body module\nmodule candle_body() {\n    // Outer wax shell with 2mm wall thickness\n    difference() {\n        // Outer cylinder\n        cylinder(h = 70, d = 50, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 68, d = 46, $fn = 64);\n    }\n}\n\n// Wax pool top surface\nmodule wax_pool() {\n    // Slightly sunken top surface\n    translate([0, 0, 70])\n        cylinder(h = 2, d = 48, $fn = 64);\n}\n\n// Candle wick module\nmodule wick() {\n    // Braided cotton wick\n    translate([0, 0, 72])\n        cylinder(h = 8, d = 2.5, $fn = 8);\n    \n    // Wick base for stability\n    translate([0, 0, 70])\n        cylinder(h = 2, d = 4, $fn = 12);\n}\n\n// Wax drips module\nmodule wax_drips() {\n    // Create realistic wax drips around rim\n    for (i = [0:30:360]) {\n        rotate([0, 0, i])\n            translate([20, 0, 68])\n                rotate([90, 0, 0])\n                    scale([1, 1, 1.5])\n                        cylinder(h = 5 + (i % 15), d1 = 3, d2 = 1, $fn = 8);\n    }\n}\n\n// Base ring for furniture stability\nmodule base_ring() {\n    // Decorative base trim\n    translate([0, 0, -2])\n        cylinder(h = 4, d = 54, $fn = 64);\n    \n    // Chamfered edge\n    translate([0, 0, 2])\n        cylinder(h = 2, d1 = 54, d2 = 50, $fn = 64);\n}\n\n// Surface texture for wax\nmodule wax_texture() {\n    // Small imperfections for realism\n    for (x = [-20:10:20]) {\n        for (y = [-20:10:20]) {\n            if (x*x + y*y < 500) {\n                translate([x, y, 35])\n                    sphere(d = 0.5 + (x + y) % 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    base_ring();\n    \n    // Main candle body\n    candle_body();\n    \n    // Top surface details\n    wax_pool();\n    \n    // Wick assembly\n    wick();\n    \n    // Decorative wax drips\n    wax_drips();\n    \n    // Surface texture (optional - can be commented out for faster rendering)\n    // wax_texture();\n}\n\n// Print orientation helper (comment out for final print)\n%translate([0, 0, -5])\n    cube([60, 60, 2], center = true);",
    "renders": true
  },
  {
    "natural_object": "lantern",
    "openscad_code": "// Realistic Medium-Complexity Lantern Furniture\n// Approx. 100 mm tall, 65 mm wide, designed for FDM printing\n\n// Overall dimensions\nbase_d = 60;\nbase_h = 8;\nbody_d = 55;\nbody_h = 65;\nroof_d = 70;\nroof_h = 15;\nhandle_r = 3;\nhandle_h = 30;\n\n// Wall thickness for printing\nwall_t = 2;\n\nmodule lantern() {\n    // Base platform\n    union() {\n        // Main base disc\n        cylinder(d=base_d, h=base_h, $fn=60);\n\n        // Decorative feet pads\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([base_d/2-8, -6, 0])\n                    cube([12,12,2]);\n        }\n    }\n\n    // Main body frame\n    translate([0,0,base_h]) {\n        // Lower ring\n        difference() {\n            cylinder(d=body_d+wall_t*2, h=wall_t, $fn=60);\n            cylinder(d=body_d, h=wall_t+0.1, $fn=60);\n        }\n\n        // Upper ring\n        difference() {\n            translate([0,0,body_h-wall_t])\n                cylinder(d=body_d+wall_t*2, h=wall_t, $fn=60);\n            translate([0,0,body_h-wall_t])\n                cylinder(d=body_d, h=wall_t+0.1, $fn=60);\n        }\n\n        // Vertical posts (4 corners)\n        for(i=[0:3]) {\n            rotate([0,0,i*90+45])\n                translate([body_d/2-2, -wall_t/2, wall_t])\n                    cube([wall_t, wall_t, body_h-wall_t*2]);\n        }\n    }\n\n    // Top roof\n    translate([0,0,base_h+body_h]) {\n        difference() {\n            // Conical roof\n            cylinder(d1=roof_d, d2=roof_d-20, h=roof_h, $fn=60);\n            // Hollow cavity\n            cylinder(d1=roof_d-wall_t*2, d2=roof_d-20-wall_t*2, h=roof_h+0.1, $fn=60);\n        }\n    }\n\n    // Handle assembly\n    translate([0,0,base_h+body_h+roof_h]) {\n        // Handle supports\n        for(i=[-1:2:1]) {\n            rotate([0,0,i*30])\n                translate([handle_r*2, 0, 0])\n                    rotate([90,0,0])\n                        cylinder(r=handle_r, h=handle_r*3, $fn=20);\n        }\n\n        // Handle arch\n        rotate([90,0,0])\n            translate([0,0,-handle_r*3])\n                rotate_extrude(angle=180, $fn=60)\n                    translate([handle_r*8, 0, 0])\n                        circle(r=handle_r, $fn=20);\n    }\n\n    // Interior candle holder\n    translate([0,0,base_h+body_h/2]) {\n        difference() {\n            cylinder(d=12, h=8, $fn=30);\n            cylinder(d=8, h=8.1, $fn=30);\n        }\n\n        // Candle representation\n        translate([0,0,8])\n            cylinder(d=7, h=10, $fn=30);\n\n        // Flame\n        translate([0,0,18])\n            sphere(d=4, $fn=20);\n    }\n\n    // Glass pane supports\n    translate([0,0,base_h+wall_t]) {\n        for(a=[0:90:270]) {\n            rotate([0,0,a+45])\n                translate([body_d/2-wall_t/2, -wall_t/2, 0])\n                    cube([wall_t, wall_t, body_h-wall_t*2]);\n        }\n    }\n}\n\n// Render the complete lantern\nlantern();",
    "renders": true
  },
  {
    "natural_object": "sword",
    "openscad_code": "// Realistic Sword Furniture - Medium Complexity\n// Wall thickness: 2mm, overall length ~140mm\n\n// Parameters\nblade_len = 100;\nblade_w = 20;\nblade_t = 2;\nguard_len = 40;\nguard_h = 8;\ngrip_len = 30;\ngrip_d = 12;\npommel_r = 10;\n\n// Blade module with fuller groove\nmodule blade() {\n    // Main blade body\n    difference() {\n        // Tapered blade\n        hull() {\n            translate([0, 0, 0]) \n                cube([blade_len, blade_w, blade_t], center=true);\n            translate([blade_len-5, 0, 0]) \n                scale([1, 0.3, 1]) \n                cube([10, blade_w, blade_t], center=true);\n        }\n        \n        // Fuller groove\n        translate([blade_len/2-10, 0, 0])\n            scale([1, 0.8, 0.5])\n            cylinder(h=blade_len+5, r=blade_w/4, center=true);\n            \n        // Tip bevel\n        translate([blade_len-5, 0, -blade_t/2-0.1])\n            rotate([0, 45, 0])\n            cube([15, blade_w+1, blade_t+0.2], center=true);\n    }\n}\n\n// Guard module with decorative ends\nmodule guard() {\n    difference() {\n        // Center block\n        cube([guard_len, guard_h, blade_t+4], center=true);\n        \n        // Grip hole\n        translate([0, 0, 0])\n            cylinder(h=guard_h+1, r=grip_d/2+1, center=true);\n            \n        // Decorative cutouts\n        for(i=[-1, 1]) {\n            translate([i*guard_len/3, 0, 0])\n                sphere(r=guard_h/3, center=true);\n        }\n    }\n    \n    // Decorative end caps\n    for(i=[-1, 1]) {\n        translate([i*(guard_len/2-2), 0, 0])\n            sphere(r=guard_h/2+1);\n    }\n}\n\n// Grip module with leather wrap texture\nmodule grip() {\n    // Core cylinder\n    cylinder(h=grip_len, r=grip_d/2, center=true);\n    \n    // Leather wrap rings\n    for(i=[-grip_len/2+3:grip_d/2:grip_len/2-3]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=1.5, r=grip_d/2+1, center=true);\n                cylinder(h=1.6, r=grip_d/2-0.5, center=true);\n            }\n    }\n}\n\n// Pommel module with nut detail\nmodule pommel() {\n    difference() {\n        // Main pommel sphere\n        sphere(r=pommel_r);\n        \n        // Grip hole\n        translate([0, 0, -pommel_r])\n            cylinder(h=pommel_r*2, r=grip_d/2+1, center=true);\n            \n        // Decorative ring\n        translate([0, 0, -pommel_r+2])\n            cylinder(h=2, r=pommel_r*1.2, center=true);\n    }\n    \n    // Pommel nut\n    translate([0, 0, pommel_r])\n        cylinder(h=3, r=grip_d/2-1, center=true);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    blade();\n\ntranslate([0, 0, blade_t/2+guard_h/2])\n    rotate([90, 0, 0])\n    guard();\n\ntranslate([0, 0, blade_t/2+guard_h+grip_len/2])\n    rotate([90, 0, 0])\n    grip();\n\ntranslate([0, 0, blade_t/2+guard_h+grip_len+pommel_r])\n    pommel();",
    "renders": true
  },
  {
    "natural_object": "shield",
    "openscad_code": "// Shield furniture item - decorative wall shield with functional mounting bracket\n// Overall dimensions: 120mm height, 80mm width, 25mm depth\n\n// Main shield body - curved front face\nmodule shield_body() {\n    // Central curved shield plate\n    translate([0, 0, 10]) \n        difference() {\n            // Main curved shape using scaled sphere\n            scale([1, 1.3, 0.3]) \n                sphere(d=100, $fn=50);\n            \n            // Hollow out back for weight reduction\n            translate([0, 0, -5]) \n                scale([0.9, 1.2, 0.4]) \n                    sphere(d=90, $fn=50);\n        }\n    \n    // Reinforcement ridges\n    for(i=[-1:1]) {\n        translate([0, i*25, 0])\n            rotate([90, 0, 0])\n                cylinder(h=100, d1=2, d2=4, $fn=4);\n    }\n}\n\n// Decorative border trim\nmodule shield_border() {\n    // Outer frame around shield edge\n    translate([0, 0, 8])\n        scale([1.05, 1.35, 0.1])\n            sphere(d=100, $fn=50);\n    \n    // Inner detail groove\n    translate([0, 0, 9])\n        scale([0.95, 1.25, 0.05])\n            sphere(d=100, $fn=50);\n}\n\n// Central boss with mounting point\nmodule shield_boss() {\n    // Raised central dome\n    translate([0, 0, 20])\n        cylinder(h=8, d=25, $fn=32);\n    \n    // Mounting hole through boss\n    translate([0, 0, 15])\n        cylinder(h=20, d=6, $fn=16);\n    \n    // Decorative ring around boss\n    translate([0, 0, 27])\n        cylinder(h=2, d=30, $fn=32);\n}\n\n// Mounting bracket on back\nmodule mounting_bracket() {\n    translate([0, 0, -5])\n        difference() {\n            // Main bracket plate\n            cube([40, 15, 5], center=true);\n            \n            // Keyhole slot for wall mounting\n            translate([0, 0, 2.5])\n                cube([20, 8, 5], center=true);\n            \n            // Screw hole\n            translate([0, -5, 2.5])\n                cylinder(h=5, d=4, $fn=16);\n        }\n}\n\n// Decorative elements - stylized rivets\nmodule rivets() {\n    rivet_positions = [\n        [35, 45, 12], [-35, 45, 12],\n        [40, 0, 12], [-40, 0, 12],\n        [35, -45, 12], [-35, -45, 12]\n    ];\n    \n    for(pos = rivet_positions) {\n        translate(pos)\n            cylinder(h=3, d=6, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    // Main shield components\n    shield_body();\n    shield_border();\n    shield_boss();\n    \n    // Mounting hardware\n    mounting_bracket();\n    \n    // Surface details\n    rivets();\n}",
    "renders": true
  },
  {
    "natural_object": "armor",
    "openscad_code": "// OpenSCAD code for a medium-complexity, realistic armor stand furniture item\n// Dimensions scaled for 3D printing (≈120 mm tall)\n\n// Overall parameters\n$fn = 32;\nwall_thk = 2;   // printable wall thickness\n\nmodule armor_stand() {\n    // Base – solid plinth\n    translate([0,0,0])\n    cube([80,50,10], center=true);\n\n    // Central post\n    translate([0,0,5])\n    cube([10,10,80], center=true);\n\n    // Top cross-bar for helmet\n    translate([0,0,80])\n    rotate([90,0,0])\n    cylinder(h=60, r1=3, r2=3);\n\n    // Left arm upright\n    translate([-20,0,25])\n    cube([5,5,40], center=true);\n\n    // Right arm upright\n    translate([20,0,25])\n    cube([5,5,40], center=true);\n\n    // Left arm horizontal bar\n    translate([-22.5,0,45])\n    rotate([0,90,0])\n    cylinder(h=45, r1=2.5, r2=2.5);\n\n    // Right arm horizontal bar\n    translate([22.5,0,45])\n    rotate([0,90,0])\n    cylinder(h=45, r1=2.5, r2=2.5);\n\n    // Left shoulder brace – triangular support\n    translate([-22.5,0,25])\n    rotate([0,90,0])\n    cylinder(h=10, r1=0, r2=5);\n\n    // Right shoulder brace\n    translate([22.5,0,25])\n    rotate([0,90,0])\n    cylinder(h=10, r1=0, r2=5);\n\n    // Back brace\n    translate([0,-25,50])\n    rotate([90,0,0])\n    cylinder(h=50, r1=3, r2=3);\n\n    // Foot peg – left\n    translate([-15,15,0])\n    cylinder(h=10, r1=3, r2=3);\n\n    // Foot peg – right\n    translate([15,15,0])\n    cylinder(h=10, r1=3, r2=3);\n\n    // Reinforcement rings around central post\n    for (z = [15:20:75]) {\n        translate([0,0,z])\n        rotate_extrude()\n        translate([5,0,0])\n        square([wall_thk,10]);\n    }\n\n    // Decorative base chamfer\n    difference() {\n        translate([0,0,0])\n        cube([80,50,10], center=true);\n        translate([0,0,2])\n        cube([76,46,10], center=true);\n    }\n\n    // Small peg holes for hanging belts/weapons\n    for (angle = [30:30:150]) {\n        rotate([0,0,angle])\n        translate([-35,0,60])\n        rotate([90,0,0])\n        cylinder(h=8, r1=1.5, r2=1.5);\n    }\n}\n\narmor_stand();",
    "renders": true
  },
  {
    "natural_object": "bow",
    "openscad_code": "// Realistic wooden bow furniture item (medium complexity)\n// Overall dimensions: ~120mm length, ~40mm height, ~10mm thickness\n\n$fn = 36;  // Smooth curves for realistic appearance\n\n// Main bow parameters\nbow_length = 120;\nbow_height = 40;\nbow_thickness = 8;\nhandle_length = 30;\nhandle_width = 12;\n\n// Bow construction\nmodule bow() {\n    // Left limb\n    translate([-bow_length/2 + handle_length/2, 0, 0])\n        rotate([0, 0, 30])\n        scale([1, 0.8, 1])\n        cylinder(h = bow_length/2 - handle_length/2, r1 = bow_thickness/2, r2 = 2, center = true);\n    \n    // Right limb\n    translate([bow_length/2 - handle_length/2, 0, 0])\n        rotate([0, 0, -30])\n        scale([1, 0.8, 1])\n        cylinder(h = bow_length/2 - handle_length/2, r1 = bow_thickness/2, r2 = 2, center = true);\n    \n    // Central handle with ergonomic grip\n    difference() {\n        union() {\n            // Main handle body\n            translate([0, 0, 0])\n                cube([handle_length, handle_width, bow_thickness], center = true);\n            \n            // Grip contours\n            translate([0, -handle_width/2 - 2, 0])\n                cube([handle_length - 4, 4, bow_thickness - 2], center = false);\n        }\n        \n        // Finger grooves\n        for(i = [-1, 0, 1]) {\n            translate([i * 6, handle_width/2 + 1, 0])\n                cylinder(h = bow_thickness + 2, r = 3, center = true);\n        }\n    }\n    \n    // Decorative string notches\n    translate([-bow_length/2 + 5, 0, 0])\n        difference() {\n            cylinder(h = 4, r = 4, center = true);\n            cylinder(h = 5, r = 2, center = true);\n        }\n    \n    translate([bow_length/2 - 5, 0, 0])\n        difference() {\n            cylinder(h = 4, r = 4, center = true);\n            cylinder(h = 5, r = 2, center = true);\n        }\n}\n\n// Bowstring (furniture detail - decorative)\nmodule bowstring() {\n    radius = 0.5;\n    // Top string segment\n    hull() {\n        translate([-bow_length/2 + 5, 0, 0])\n            sphere(r = radius);\n        translate([0, bow_height/2 - 5, 0])\n            sphere(r = radius);\n    }\n    \n    // Bottom string segment\n    hull() {\n        translate([-bow_length/2 + 5, 0, 0])\n            sphere(r = radius);\n        translate([0, -bow_height/2 + 5, 0])\n            sphere(r = radius);\n    }\n}\n\n// Wood grain texture details\nmodule wood_grain() {\n    for(i = [0:5:bow_length]) {\n        rotate([0, 90, 0])\n        translate([i - bow_length/2, 0, bow_thickness/2 + 0.5])\n            scale([1, 0.05, 0.1])\n            cube([bow_height, 1, 1]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bow structure\n    bow();\n    \n    // Bowstring detail\n    color(\"darkgray\")\n    bowstring();\n    \n    // Surface texture\n    color(\"saddlebrown\")\n    wood_grain();\n}",
    "renders": true
  },
  {
    "natural_object": "spear",
    "openscad_code": "// Spear Furniture - Realistic Style, Medium Complexity\n// Overall dimensions: 150mm long, 25mm wide at head, 8mm shaft diameter\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main module for the complete spear furniture\nmodule spear_furniture() {\n    union() {\n        // Assemble spear from tip to base\n        spear_tip();\n        spear_shaft();\n        spear_base();\n    }\n}\n\n// Spear tip - leaf-shaped blade\nmodule spear_tip() {\n    translate([0, 0, 140]) {\n        difference() {\n            // Main blade shape\n            scale([1, 0.3, 1]) sphere(d=25, $fn=32);\n            \n            // Remove bottom half\n            translate([0, 0, -12.5]) cube([50, 50, 25], center=true);\n            \n            // Hollow center\n            scale([0.7, 0.7, 0.7]) sphere(d=21, $fn=32);\n        }\n        \n        // Reinforcement ridge\n        translate([0, 0, -7.5]) cylinder(h=15, d1=8, d2=3, $fn=16);\n        \n        // Decorative rings\n        for(i=[-10:2:-2]) {\n            translate([0, 0, i]) cylinder(h=1, d=10, $fn=32);\n        }\n    }\n}\n\n// Spear shaft - wooden pole with texture\nmodule spear_shaft() {\n    // Main shaft body\n    difference() {\n        cylinder(h=140, d=8, $fn=32);\n        \n        // Hollow shaft\n        cylinder(h=140, d=4, $fn=32);\n    }\n    \n    // Leather grip section\n    translate([0, 0, 40]) {\n        difference() {\n            cylinder(h=60, d=12, $fn=32);\n            cylinder(h=60, d=8, $fn=32);\n        }\n        \n        // Grip texture rings\n        for(i=[0:5:55]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=2, d=12, $fn=32);\n                    cylinder(h=2, d=10, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Spear base - weighted counterbalance\nmodule spear_base() {\n    // Metal ferrule\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=15, d=12, $fn=32);\n            cylinder(h=15, d=8, $fn=32);\n        }\n        \n        // Decorative bands\n        for(i=[0:3:12]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=1, d=13, $fn=32);\n                    cylinder(h=1, d=11, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Rubber foot\n    translate([0, 0, -5]) {\n        difference() {\n            cylinder(h=5, d=14, $fn=32);\n            cylinder(h=5, d=12, $fn=32);\n        }\n    }\n}\n\n// Generate the complete model\nspear_furniture();",
    "renders": true
  },
  {
    "natural_object": "drum",
    "openscad_code": "// Drum Furniture - Realistic Style, Medium Complexity\n// 3D printable drum stool with structural frame and cushion\n\n$fn = 30;\n\nmodule drum_stool(height = 120, radius = 150) {\n    // Main drum body\n    difference() {\n        // Outer cylinder\n        cylinder(h = height * 0.6, r = radius, center = true);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            cylinder(h = height * 0.6 + 10, r = radius - 4, center = true);\n    }\n    \n    // Top cushion\n    translate([0, 0, height * 0.3 + 10])\n        difference() {\n            // Main cushion\n            cylinder(h = 15, r = radius - 5);\n            \n            // Cushion indent\n            translate([0, 0, 2])\n                cylinder(h = 13, r = radius - 20);\n        }\n    \n    // Bottom base plate\n    translate([0, 0, -height * 0.3 - 5])\n        cylinder(h = 10, r = radius + 5);\n    \n    // Structural support rings\n    for (z = [-height * 0.15, 0, height * 0.15]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 5, r = radius + 2);\n                cylinder(h = 7, r = radius - 2);\n            }\n    }\n    \n    // Leg supports (4 legs)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([radius * 0.7, 0, -height * 0.4])\n                rotate([90, 0, 0])\n                    cylinder(h = height * 0.3, r = 10);\n            \n            // Leg foot\n            translate([radius * 0.7, 0, -height * 0.55])\n                sphere(r = 12);\n        }\n    }\n    \n    // Decorative bands\n    for (z = [-height * 0.2, height * 0.2]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 3, r = radius + 1);\n                cylinder(h = 5, r = radius - 1);\n            }\n    }\n    \n    // Ventilation holes (pattern around drum)\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([radius - 8, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, r = 5);\n        }\n    }\n    \n    // Reinforcement ribs inside\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([radius * 0.5, 0, 0])\n                cube([radius * 0.3, 8, height * 0.5], center = true);\n        }\n    }\n}\n\n// Render the drum stool\ndrum_stool();",
    "renders": true
  },
  {
    "natural_object": "flute",
    "openscad_code": "// Flute-shaped shelf bracket / bookend\n// Realistic medium-complexity furniture item\n// Overall size ~120 mm tall\n\n// Parameters\nwall = 2;                    // 3D-print friendly wall thickness\nflute_L = 100;               // Main body length\nflute_D = 12;                // Tube outer diameter\nhead_L = 25;                 // Head joint length\nfoot_L = 15;                 // Foot joint length\nkeyH = 3;                    // Key height above tube\nkeyW = 8;                    // Key width\nkeyT = 1.5;                  // Key thickness\nmountW = 30;                 // Bracket base width\nmountD = 25;                 // Bracket base depth\nmountH = 6;                  // Bracket base height\n\n// Main flute tube (hollow cylinder)\nmodule flute_body() {\n    difference() {\n        // Outer tube\n        cylinder(h = flute_L, d = flute_D, $fn = 32);\n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h = flute_L + 0.2, d = flute_D - 2*wall, $fn = 32);\n    }\n}\n\n// Head joint with embouchure hole\nmodule head_joint() {\n    difference() {\n        // Solid joint\n        cylinder(h = head_L, d = flute_D + 2, $fn = 32);\n        // Embouchure hole\n        translate([0, flute_D/2, head_L*0.6])\n            rotate([90, 0, 0])\n                cylinder(h = flute_D, d = 6, $fn = 16);\n        // Inner bore continues\n        translate([0, 0, -0.1])\n            cylinder(h = head_L + 0.2, d = flute_D - 2*wall, $fn = 32);\n    }\n}\n\n// Foot joint\nmodule foot_joint() {\n    difference() {\n        cylinder(h = foot_L, d = flute_D, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = foot_L + 0.2, d = flute_D - 2*wall, $fn = 32);\n    }\n}\n\n// Ring keys module\nmodule ring_key(pos) {\n    translate([0, 0, pos])\n    union() {\n        // Ring collar\n        cylinder(h = 2, d = flute_D + 2, $fn = 32);\n        // Key paddle\n        translate([flute_D/2 + keyW/2, 0, 0])\n            cube([keyW, keyT, keyH], center = true);\n    }\n}\n\n// Row of tone holes\nmodule tone_holes() {\n    for (i = [1:7]) {\n        angle = i * 45;\n        z = head_L + 10 + i * 9;\n        rotate([0, 0, angle])\n            translate([flute_D/2, 0, z])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 1, d = 3, $fn = 8);\n    }\n}\n\n// Mounting base / bracket\nfunction shelf_angle() = 75; // degrees\nmodule mounting_base() {\n    difference() {\n        union() {\n            // Main base block\n            cube([mountW, mountD, mountH], center = true);\n            // Support wedge\n            translate([0, -mountD/2, 0])\n                rotate([shelf_angle(), 0, 0])\n                    cube([mountW, 20, wall], center = true);\n        }\n        // Screw holes\n        translate([mountW/2 - 4, 0, -mountH/2 - 0.1])\n            cylinder(h = mountH + 0.2, d = 3.2, $fn = 12);\n        translate([-mountW/2 + 4, 0, -mountH/2 - 0.1])\n            cylinder(h = mountH + 0.2, d = 3.2, $fn = 12);\n    }\n}\n\n// Assemble the flute furniture\nunion() {\n    // Mounting base\n    translate([0, 0, mountH/2])\n        mounting_base();\n    \n    // Flute body\n    rotate([0, -90 + shelf_angle(), 0])\n        translate([0, 0, mountH + flute_D/2])\n            union() {\n                // Main tube\n                flute_body();\n                // Head joint at top\n                translate([0, 0, flute_L])\n                    head_joint();\n                // Foot joint at bottom\n                translate([0, 0, -foot_L])\n                    foot_joint();\n                // Ring keys\n                ring_key(head_L - 5);\n                ring_key(head_L + 15);\n                ring_key(head_L + 35);\n                ring_key(head_L + 55);\n                ring_key(head_L + 75);\n                // Tone holes\n                tone_holes();\n            }\n}",
    "renders": true
  },
  {
    "natural_object": "harp",
    "openscad_code": "// Harp furniture item - Medium complexity realistic style\n// Overall dimensions: 100mm height, 55mm width, 35mm depth\n\n// Main parameters\nharp_height = 100;\nharp_width = 55;\nneck_length = 30;\nsoundbox_depth = 35;\nwall_thickness = 2;\n\n// Soundbox module\nmodule soundbox() {\n    // Main hollow body with rounded top\n    difference() {\n        // Outer shell\n        union() {\n            // Main box\n            cube([harp_width - 10, soundbox_depth, harp_height * 0.6]);\n            \n            // Rounded top transition\n            translate([0, 0, harp_height * 0.6])\n                cylinder(h = harp_height * 0.15, r1 = (harp_width - 10)/2, r2 = (harp_width - 10)/4);\n        }\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([harp_width - 10 - 2*wall_thickness, soundbox_depth - 2*wall_thickness, harp_height * 0.75 - wall_thickness]);\n    }\n}\n\n// Neck module - angled portion\nmodule neck() {\n    translate([(harp_width - 10)/2 - 3, soundbox_depth/2, harp_height * 0.75]) {\n        rotate([0, 15, 0]) {\n            // Main neck structure\n            cube([6, 8, neck_length]);\n            \n            // Curved top\n            translate([3, 4, neck_length])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, r = 4);\n        }\n    }\n}\n\n// Pillar module - curved support\nmodule pillar() {\n    // Base connection\n    translate([harp_width - 10 - 3, soundbox_depth/2 - 3, 0]) {\n        cube([6, 6, harp_height * 0.1]);\n        \n        // Curved pillar\n        for(i = [0:5:90]) {\n            translate([0, 3, harp_height * 0.1 + (harp_height * 0.65) * sin(i/90 * 90)])\n                rotate([0, 0, i])\n                    cube([6, 6, harp_height * 0.65 / 18]);\n        }\n        \n        // Top connection to neck\n        translate([0, 3, harp_height * 0.75 + neck_length * sin(15)])\n            rotate([0, 15, 0])\n                cube([6, 6, 8]);\n    }\n}\n\n// String module\nmodule strings() {\n    string_count = 12;\n    string_spacing = (harp_width - 20) / (string_count - 1);\n    \n    for(i = [0:string_count-1]) {\n        // Soundboard connection point\n        translate([5 + i * string_spacing, soundbox_depth/2, harp_height * 0.05]) {\n            // String anchor\n            cylinder(h = 2, r = 1);\n            \n            // String line (thin cylinder)\n            translate([0, 0, 1])\n                cylinder(h = harp_height * 0.75 + neck_length * sin(15) - 1, r = 0.5);\n        }\n    }\n}\n\n// Base module - furniture legs\nmodule base() {\n    // Front feet\n    translate([5, soundbox_depth/4, 0])\n        cylinder(h = 5, r = 3);\n    translate([harp_width - 15, soundbox_depth/4, 0])\n        cylinder(h = 5, r = 3);\n    \n    // Rear feet\n    translate([5, soundbox_depth * 3/4, 0])\n        cylinder(h = 5, r = 3);\n    translate([harp_width - 15, soundbox_depth * 3/4, 0])\n        cylinder(h = 5, r = 3);\n    \n    // Base frame\n    translate([harp_width/2 - 5, soundbox_depth/2, 2.5])\n        cube([harp_width - 10, soundbox_depth, 2]);\n}\n\n// Sound hole decoration\nmodule sound_hole() {\n    translate([harp_width/2 - 5, soundbox_depth/2, harp_height * 0.3]) {\n        // Rosette pattern\n        for(i = [1:6]) {\n            rotate([0, 0, i * 60])\n                translate([0, 0, 0])\n                    cylinder(h = 1, r = 5 + i);\n        }\n        \n        // Central hole\n        difference() {\n            cylinder(h = 1, r = 4);\n            cylinder(h = 1.1, r = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    soundbox();\n    neck();\n    pillar();\n    \n    // Furniture elements\n    base();\n    \n    // Details\n    strings();\n    sound_hole();\n    \n    // Decorative scroll at top\n    translate([(harp_width - 10)/2 - 3 + 3, soundbox_depth/2 + 4, harp_height * 0.75 + neck_length * sin(15) + 4]) {\n        rotate([90, 0, 0])\n            cylinder(h = 8, r1 = 4, r2 = 2);\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "lyre",
    "openscad_code": "// Lyre Furniture (Miniature Decorative Piece)\n// Realistic Style, Medium Complexity\n// Size: ~120mm height, 3D printable\n\n// Main Parameters\nlyre_height = 120;\nlyre_width = 60;\nthickness = 2;\narm_width = 4;\narm_thickness = 3;\n\n// Base Structure\nmodule lyre_base() {\n    // Bottom crossbar\n    translate([0, -lyre_height/2 + 10, 0])\n        cube([lyre_width, 10, arm_thickness], center=true);\n    \n    // Top crossbar\n    translate([0, lyre_height/2 - 15, 0])\n        cube([lyre_width/2, 10, arm_thickness], center=true);\n}\n\n// Curved Arm Construction\nmodule lyre_arm(side) {\n    // Create curved arm using stacked cylinders\n    arm_points = 20;\n    for(i = [0:arm_points-1]) {\n        angle = i * 180 / (arm_points-1);\n        x = cos(angle) * (lyre_width/2 - arm_width) * side;\n        y = sin(angle) * (lyre_height/2 - 20);\n        radius = arm_width/2 * (1 - i/arm_points * 0.3); // Tapering\n        \n        translate([x, y - lyre_height/2 + 10, 0])\n            cylinder(h=arm_thickness, r=radius, $fn=8);\n    }\n}\n\n// String System\nmodule lyre_strings() {\n    string_count = 7;\n    string_spacing = (lyre_width - 20) / (string_count - 1);\n    \n    for(i = [0:string_count-1]) {\n        x_pos = -lyre_width/2 + 10 + i * string_spacing;\n        \n        // String (thin cylinder)\n        translate([x_pos, 0, arm_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=lyre_height - 25, r=0.5, $fn=6);\n        \n        // String anchor at bottom\n        translate([x_pos, -lyre_height/2 + 10, 0])\n            cylinder(h=2, r=1.2, $fn=8);\n        \n        // String tuner at top\n        translate([x_pos, lyre_height/2 - 15, arm_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=1.5, $fn=8);\n    }\n}\n\n// Sound Box (Resonating Chamber)\nmodule sound_box() {\n    // Main body - hollowed box\n    difference() {\n        // Outer shell\n        translate([0, -lyre_height/4, -arm_thickness/2 - 8])\n            cube([lyre_width - 10, lyre_height/2, 16], center=true);\n        \n        // Hollow interior\n        translate([0, -lyre_height/4, -arm_thickness/2 - 6])\n            cube([lyre_width - 14, lyre_height/2 - 4, 12], center=true);\n        \n        // Sound hole\n        translate([0, -lyre_height/3, -arm_thickness/2 - 4])\n            cylinder(h=10, r=8, $fn=16);\n    }\n    \n    // Decorative edge around sound hole\n    translate([0, -lyre_height/3, -arm_thickness/2 - 4])\n        cylinder(h=1, r=10, $fn=16);\n}\n\n// Support Brackets\nmodule support_brackets() {\n    // Left bracket\n    translate([-lyre_width/2 + 5, 0, 0])\n        difference() {\n            cube([10, lyre_height/2, arm_thickness]);\n            translate([5, lyre_height/4, arm_thickness/2])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=2, $fn=8);\n        }\n    \n    // Right bracket\n    translate([lyre_width/2 - 5, 0, 0])\n        difference() {\n            cube([10, lyre_height/2, arm_thickness]);\n            translate([-5, lyre_height/4, arm_thickness/2])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=2, $fn=8);\n        }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    lyre_base();\n    \n    // Arms\n    lyre_arm(1);  // Left arm\n    lyre_arm(-1); // Right arm\n    \n    // Sound box\n    sound_box();\n    \n    // Strings\n    lyre_strings();\n    \n    // Support brackets\n    support_brackets();\n    \n    // Base stand for stability\n    translate([0, -lyre_height/2 + 5, -arm_thickness/2 - 8])\n        cube([lyre_width + 10, 10, 2], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "trumpet",
    "openscad_code": "// Trumpet Furniture - A functional trumpet-shaped shelf bracket\n// Overall dimensions: 120mm tall x 60mm wide x 40mm deep\n\n// Bell shelf support\nmodule bell_shelf() {\n    // Main bell structure\n    difference() {\n        // Outer bell shape\n        cylinder(h=30, r1=25, r2=20, $fn=32);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=32, r1=23, r2=18, $fn=32);\n    }\n    \n    // Bell rim detail\n    translate([0, 0, 30])\n        cylinder(h=3, r1=21, r2=25, $fn=32);\n}\n\n// Valve casing structure (furniture joint)\nmodule valve_section() {\n    // Main valve block\n    difference() {\n        cube([20, 20, 35], center=true);\n        translate([0, 0, -1])\n            cube([16, 16, 37], center=true);\n    }\n    \n    // Three valve cylinders\n    for(i = [-1, 0, 1]) {\n        translate([i * 6, 0, 0])\n            difference() {\n                cylinder(h=40, r=4, $fn=16);\n                translate([0, 0, -1])\n                    cylinder(h=42, r=2, $fn=16);\n            }\n    }\n    \n    // Valve caps\n    for(i = [-1, 0, 1]) {\n        translate([i * 6, 0, 20])\n            cylinder(h=3, r=5, $fn=16);\n    }\n}\n\n// Leadpipe support arm\nmodule leadpipe_arm() {\n    // Main tube\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h=50, r=5, $fn=16);\n            translate([0, 0, -1])\n                cylinder(h=52, r=3, $fn=16);\n        }\n    \n    // Support brackets\n    for(pos = [0, 25, 50]) {\n        translate([pos, 0, 5])\n            rotate([0, 90, 0])\n                cube([8, 2, 2], center=true);\n    }\n}\n\n// Mouthpiece connector (wall mount)\nmodule wall_mount() {\n    // Mounting plate\n    difference() {\n        cube([30, 10, 15], center=true);\n        translate([0, 0, -1])\n            cube([26, 8, 17], center=true);\n    }\n    \n    // Screw holes\n    for(x = [-10, 10]) {\n        translate([x, 0, 0])\n            cylinder(h=16, r=2, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Wall mount at base\n    wall_mount();\n    \n    // Leadpipe extending upward\n    translate([0, 0, 7.5])\n        rotate([0, 30, 0])\n            leadpipe_arm();\n    \n    // Valve section\n    translate([0, 0, 35])\n        valve_section();\n    \n    // Bell shelf\n    translate([0, 0, 55])\n        bell_shelf();\n    \n    // Support braces\n    translate([15, 0, 45])\n        rotate([45, 0, 0])\n            cylinder(h=20, r=2, $fn=8);\n    \n    translate([-15, 0, 45])\n        rotate([-45, 0, 0])\n            cylinder(h=20, r=2, $fn=8);\n}\n\n// Shelf surface on bell\ntranslate([0, 0, 85])\n    difference() {\n        cylinder(h=3, r=26, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=5, r=24, $fn=32);\n    }",
    "renders": true
  },
  {
    "natural_object": "bell",
    "openscad_code": "$fn = 60;\n\n// Overall scale\nscale_factor = 0.7;\n\n// Bell body\nmodule bell_body() {\n    // Main bell dome\n    difference() {\n        // Outer shell\n        cylinder(h = 60*scale_factor, r1 = 40*scale_factor, r2 = 25*scale_factor, center = false);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h = 62*scale_factor, r1 = 38*scale_factor, r2 = 23*scale_factor, center = false);\n    }\n    \n    // Bell lip for furniture stability\n    translate([0, 0, 0])\n        cylinder(h = 3*scale_factor, r1 = 42*scale_factor, r2 = 40*scale_factor, center = false);\n}\n\n// Bell handle with furniture joint detail\nmodule bell_handle() {\n    // Handle base\n    translate([0, 0, 60*scale_factor])\n        cylinder(h = 5*scale_factor, r = 8*scale_factor, center = false);\n    \n    // Handle arch\n    translate([0, 0, 65*scale_factor])\n        rotate([90, 0, 0])\n            cylinder(h = 20*scale_factor, r1 = 6*scale_factor, r2 = 6*scale_factor, center = true);\n    \n    // Handle grip\n    translate([0, 0, 85*scale_factor])\n        rotate([0, 90, 0])\n            cylinder(h = 15*scale_factor, r = 3*scale_factor, center = true);\n}\n\n// Clapper with furniture-style mounting\nmodule clapper() {\n    // Clapper mount\n    translate([0, 0, 45*scale_factor])\n        cylinder(h = 8*scale_factor, r = 4*scale_factor, center = true);\n    \n    // Clapper rope\n    translate([0, 0, 35*scale_factor])\n        rotate([90, 0, 0])\n            cylinder(h = 15*scale_factor, r = 1.5*scale_factor, center = true);\n    \n    // Clapper ball\n    translate([0, 0, 20*scale_factor])\n        sphere(d = 8*scale_factor);\n}\n\n// Decorative bands for furniture styling\nmodule decorative_bands() {\n    for(i = [1:3]) {\n        translate([0, 0, 15*i*scale_factor])\n            difference() {\n                cylinder(h = 2*scale_factor, r1 = 40*scale_factor - 2*i, r2 = 38*scale_factor - 2*i, center = false);\n                cylinder(h = 2.2*scale_factor, r1 = 38*scale_factor - 2*i, r2 = 36*scale_factor - 2*i, center = false);\n            }\n    }\n}\n\n// Base plate for furniture stability\nmodule base_plate() {\n    translate([0, 0, -2*scale_factor])\n        cylinder(h = 2*scale_factor, r = 45*scale_factor, center = false);\n    \n    // Screw holes for mounting\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([30*scale_factor, 0, -1.5*scale_factor])\n                cylinder(h = 3*scale_factor, r = 2*scale_factor, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bell\n    bell_body();\n    \n    // Handle\n    bell_handle();\n    \n    // Clapper\n    clapper();\n    \n    // Decorative elements\n    decorative_bands();\n    \n    // Base\n    base_plate();\n}",
    "renders": true
  },
  {
    "natural_object": "book",
    "openscad_code": "// Realistic Book Shelf - Medium Complexity\n// Book furniture item designed for 3D printing\n\n// Overall dimensions (in mm)\nbook_width = 120;\nbook_height = 160;\nbook_thickness = 30;\nwall_thickness = 2;\n\nmodule book_cover() {\n    // Main book cover\n    difference() {\n        // Outer cover\n        translate([0, 0, book_thickness/2])\n            cube([book_width, book_height, book_thickness], center=true);\n        \n        // Hollow interior\n        translate([0, 0, book_thickness/2 + wall_thickness])\n            cube([book_width - 2*wall_thickness, book_height - 2*wall_thickness, book_thickness], center=true);\n    }\n}\n\nmodule book_spine() {\n    // Spine with curved profile\n    difference() {\n        // Main spine curve\n        translate([-book_width/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=book_height, r=5, center=true);\n        \n        // Hollow spine\n        translate([-book_width/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=book_height - 2*wall_thickness, r=3, center=true);\n    }\n}\n\nmodule cover_details() {\n    // Front cover details - realistic book features\n    \n    // Title area embossing\n    translate([0, book_height/4, book_thickness/2 + 0.5])\n        cube([book_width/2, book_height/6, 0.5], center=true);\n    \n    // Spine text area\n    translate([-book_width/2 - 2.5, 0, 0])\n        rotate([0, 0, 90])\n            cube([book_height/3, 3, 1], center=true);\n    \n    // Page edges texture\n    for(i = [0:1:book_height/2 - 10]) {\n        translate([book_width/2 + 1, -book_height/2 + 5 + i*2, 0])\n            cube([0.5, 1, book_thickness - 2], center=true);\n    }\n}\n\nmodule shelf_supports() {\n    // Hidden shelf support brackets inside book\n    \n    // Left support\n    translate([-book_width/2 + 10, 0, -book_thickness/2 + 5])\n        cube([5, book_height - 20, 10], center=true);\n    \n    // Right support\n    translate([book_width/2 - 10, 0, -book_thickness/2 + 5])\n        cube([5, book_height - 20, 10], center=true);\n    \n    // Bottom support beam\n    translate([0, -book_height/2 + 10, -book_thickness/2 + 5])\n        cube([book_width - 20, 5, 10], center=true);\n}\n\nmodule mounting_holes() {\n    // Keyhole mounting slots for wall attachment\n    \n    // Left mounting hole\n    translate([-book_width/2 + 20, book_height/2 - 20, -book_thickness/2 + 2])\n        rotate([0, 0, 0])\n            cylinder(h=5, r=3, center=true);\n    \n    // Right mounting hole\n    translate([book_width/2 - 20, book_height/2 - 20, -book_thickness/2 + 2])\n        rotate([0, 0, 0])\n            cylinder(h=5, r=3, center=true);\n    \n    // Keyhole slots\n    translate([-book_width/2 + 20, book_height/2 - 20, -book_thickness/2])\n        cube([6, 8, 5], center=true);\n    \n    translate([book_width/2 - 20, book_height/2 - 20, -book_thickness/2])\n        cube([6, 8, 5], center=true);\n}\n\n// Main assembly\nunion() {\n    // Assemble the book shelf\n    book_cover();\n    book_spine();\n    cover_details();\n    \n    // Internal structure for strength\n    difference() {\n        shelf_supports();\n        mounting_holes();\n    }\n}\n\n// Optional: Add subtle rounding to edges for realism\n$fn = 32;",
    "renders": true
  },
  {
    "natural_object": "scroll",
    "openscad_code": "// Scroll furniture item - realistic style, medium complexity\n// Dimensions: ~100mm long, ~60mm diameter\n\n// Parameters\nscroll_length = 100;\nscroll_diameter = 60;\nwall_thickness = 2;\ncore_diameter = 10;\nend_cap_height = 8;\nhandle_length = 15;\nhandle_diameter = 6;\n\n// Main scroll body\nmodule scroll_body() {\n    // Outer rolled layer\n    difference() {\n        // Main cylinder\n        cylinder(h=scroll_length, d=scroll_diameter, $fn=100);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=scroll_length + 2, d=scroll_diameter - wall_thickness*2, $fn=100);\n        \n        // Paper edges - create rolled look\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([scroll_diameter/2 - wall_thickness, 0, 0])\n                    cube([wall_thickness*2, scroll_diameter/2, scroll_length], center=true);\n        }\n    }\n}\n\n// End caps with decorative rings\nmodule end_caps() {\n    // Left cap\n    translate([0, 0, -end_cap_height/2]) {\n        // Main cap\n        cylinder(h=end_cap_height, d=scroll_diameter + wall_thickness*2, $fn=100);\n        \n        // Decorative ring\n        translate([0, 0, -0.5])\n            cylinder(h=wall_thickness, d=scroll_diameter + wall_thickness*4, $fn=100);\n        \n        // Center hole\n        translate([0, 0, -1])\n            cylinder(h=end_cap_height + 2, d=core_diameter, $fn=50);\n    }\n    \n    // Right cap (mirror of left)\n    mirror([0, 0, 1])\n        translate([0, 0, scroll_length + end_cap_height/2]) {\n            cylinder(h=end_cap_height, d=scroll_diameter + wall_thickness*2, $fn=100);\n            translate([0, 0, -0.5])\n                cylinder(h=wall_thickness, d=scroll_diameter + wall_thickness*4, $fn=100);\n            translate([0, 0, -1])\n                cylinder(h=end_cap_height + 2, d=core_diameter, $fn=50);\n        }\n}\n\n// Handle for rolling/unrolling\nmodule handle() {\n    translate([0, 0, scroll_length/2]) {\n        rotate([90, 0, 0]) {\n            // Main handle\n            cylinder(h=handle_length, d=handle_diameter, $fn=30);\n            \n            // Handle grip\n            translate([0, 0, handle_length - 3])\n                sphere(d=handle_diameter + 4, $fn=30);\n            \n            // Connection to scroll\n            translate([0, 0, -3])\n                cylinder(h=5, d=handle_diameter + 2, $fn=30);\n        }\n    }\n}\n\n// Paper texture lines\nmodule paper_details() {\n    for(z=[0:scroll_length/10:scroll_length]) {\n        color(\"peru\")\n        translate([0, 0, z])\n            cylinder(h=0.5, d=scroll_diameter - wall_thickness*2 - 1, $fn=100);\n    }\n}\n\n// Support stand\nmodule scroll_stand() {\n    translate([0, -scroll_diameter/2 - 10, scroll_length/2]) {\n        // Base\n        cube([scroll_length + 20, 8, 4], center=true);\n        \n        // Support brackets\n        for(x=[-scroll_length/3, 0, scroll_length/3]) {\n            translate([x, -4, 0])\n                cube([8, 8, scroll_diameter/2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    scroll_body();\n    end_caps();\n    handle();\n    paper_details();\n    scroll_stand();\n}",
    "renders": true
  },
  {
    "natural_object": "map",
    "openscad_code": "// Map table with topographic relief surface\n// Dimensions: 120mm x 80mm x 45mm\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\ntable_width = 120;\ntable_depth = 80;\ntable_height = 45;\nleg_size = 8;\nwall_thickness = 2;\n\n// Map relief height\nmax_relief = 8;\n\nmodule table_legs() {\n    // Four legs at corners\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([\n                x * (table_width/2 - leg_size/2 - 5),\n                y * (table_depth/2 - leg_size/2 - 5),\n                0\n            ]) {\n                // Leg with taper\n                cylinder(h = table_height - wall_thickness, r1 = leg_size/2, r2 = leg_size/2 - 1);\n            }\n        }\n    }\n}\n\nmodule table_frame() {\n    // Bottom frame connecting legs\n    difference() {\n        // Outer frame\n        cube([table_width, table_depth, wall_thickness], center = true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([table_width - leg_size*2, table_depth - leg_size*2, wall_thickness + 2], center = true);\n    }\n}\n\nmodule map_surface() {\n    // Base table top\n    difference() {\n        cube([table_width, table_depth, wall_thickness], center = true);\n        \n        // Recess for relief\n        translate([0, 0, -wall_thickness/2])\n            cube([table_width - 8, table_depth - 8, wall_thickness*2], center = true);\n    }\n    \n    // Topographic features\n    translate([0, 0, wall_thickness/2]) {\n        // Mountain range (triangular prism)\n        translate([-table_width/4, 0, 0]) {\n            rotate([90, 0, 0])\n                linear_extrude(height = table_depth/3)\n                    polygon(points=[\n                        [0, 0],\n                        [20, max_relief],\n                        [40, 0]\n                    ]);\n        }\n        \n        // Hills (spherical bumps)\n        for (i = [0:3]) {\n            translate([\n                table_width/4 + i*15 - 30,\n                table_depth/4 - i*5,\n                0\n            ]) {\n                scale([1.5, 1, 0.5])\n                    sphere(r = max_relief/2);\n            }\n        }\n        \n        // Valley (cylindrical depression)\n        translate([table_width/3, -table_depth/4, 0]) {\n            rotate_extrude()\n                polygon(points=[\n                    [0, 0],\n                    [15, -max_relief/2],\n                    [20, 0]\n                ]);\n        }\n        \n        // River (thin cylinder)\n        translate([table_width/6, -table_depth/3, 0]) {\n            rotate([90, 0, 0])\n                cylinder(h = table_depth*2/3, r = 2, center = true);\n        }\n        \n        // Compass rose detail\n        translate([table_width/2 - 15, table_depth/2 - 15, 0]) {\n            // Base circle\n            cylinder(h = max_relief/2, r = 8);\n            \n            // North arrow\n            translate([0, 0, max_relief/2])\n                rotate([0, 0, 0])\n                    cube([2, 6, max_relief/2], center = true);\n            \n            // East arrow\n            translate([0, 0, max_relief/2])\n                rotate([0, 0, 90])\n                    cube([2, 6, max_relief/2], center = true);\n        }\n    }\n}\n\nmodule table() {\n    // Assemble table\n    union() {\n        // Legs and frame\n        table_legs();\n        \n        translate([0, 0, table_height/2 - wall_thickness/2])\n            table_frame();\n        \n        // Table top with map\n        translate([0, 0, table_height - wall_thickness/2])\n            map_surface();\n    }\n}\n\n// Render the table\ntable();",
    "renders": true
  },
  {
    "natural_object": "compass",
    "openscad_code": "// Compass Furniture: Decorative Table-Top Compass Rose\n// Overall dimensions: ~120mm diameter, ~15mm thick\n\nwall_thickness = 2;\nbase_d = 120;\nbase_h = 4;\nring_d = 110;\nring_h = 6;\nrose_d = 90;\nrose_h = 3;\nneedle_l = 75;\nneedle_w = 4;\nneedle_h = 3;\ncardinal_h = 2;\ncardinal_w = 6;\ncardinal_l = 12;\n\nmodule base_plate() {\n    difference() {\n        cylinder(h = base_h, d = base_d, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = base_h + 0.2, d = base_d - 2 * wall_thickness, $fn = 64);\n    }\n}\n\nmodule compass_ring() {\n    difference() {\n        cylinder(h = ring_h, d = ring_d, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = ring_h + 0.2, d = ring_d - 2 * wall_thickness, $fn = 64);\n    }\n}\n\nmodule rose_disk() {\n    cylinder(h = rose_h, d = rose_d, $fn = 128);\n}\n\nmodule rose_markings() {\n    for (i = [0 : 15]) {\n        rotate([0, 0, i * 22.5])\n            translate([rose_d / 2 - 5, 0, rose_h - 0.1])\n                cube([10, 1.5, 0.2]);\n    }\n}\n\nmodule directional_markings() {\n    // N\n    translate([0, rose_d / 2 - 7, rose_h - 0.1])\n        cube([cardinal_w, cardinal_l, cardinal_h]);\n    // S\n    translate([0, -(rose_d / 2 - 7) - cardinal_l, rose_h - 0.1])\n        cube([cardinal_w, cardinal_l, cardinal_h]);\n    // E\n    translate([rose_d / 2 - 7 - cardinal_l, 0, rose_h - 0.1])\n        cube([cardinal_l, cardinal_w, cardinal_h]);\n    // W\n    translate([-(rose_d / 2 - 7), 0, rose_h - 0.1])\n        cube([cardinal_l, cardinal_w, cardinal_h]);\n}\n\nmodule needle() {\n    union() {\n        // Main needle body\n        translate([0, 0, needle_h / 2])\n            cube([needle_l, needle_w, needle_h], center = true);\n        // North point\n        translate([needle_l / 2, 0, needle_h / 2])\n            rotate([0, 0, 0])\n                cylinder(h = needle_h, d1 = 0, d2 = needle_w, $fn = 16);\n        // South point\n        translate([-needle_l / 2, 0, needle_h / 2])\n            rotate([0, 0, 0])\n                cylinder(h = needle_h, d1 = needle_w, d2 = 0, $fn = 16);\n        // Central hub\n        translate([0, 0, -0.1])\n            cylinder(h = needle_h + 0.2, d = 8, $fn = 32);\n    }\n}\n\nmodule pivot_pin() {\n    cylinder(h = rose_h + needle_h + 0.5, d = 3, $fn = 16);\n}\n\nmodule furniture_base() {\n    union() {\n        // Main compass assembly\n        base_plate();\n        translate([0, 0, base_h])\n            compass_ring();\n        translate([0, 0, base_h + ring_h])\n            rose_disk();\n        translate([0, 0, base_h + ring_h])\n            rose_markings();\n        translate([0, 0, base_h + ring_h])\n            directional_markings();\n        translate([0, 0, base_h + ring_h + rose_h])\n            needle();\n        translate([0, 0, base_h + ring_h])\n            pivot_pin();\n        \n        // Decorative feet\n        for (i = [0 : 3]) {\n            rotate([0, 0, i * 90 + 45])\n                translate([base_d / 2 - 10, 0, -2])\n                    cylinder(h = 4, d = 6, $fn = 16);\n        }\n    }\n}\n\nfurniture_base();",
    "renders": true
  },
  {
    "natural_object": "telescope",
    "openscad_code": "// Telescope Furniture - Medium complexity realistic style\n// Overall dimensions: 120mm tall, 80mm wide, 95mm deep\n\n$fn = 32;\n\nmodule telescope_furniture() {\n    // Base tripod structure\n    union() {\n        // Central hub\n        translate([0, 0, 15])\n            cylinder(h = 10, r = 12);\n\n        // Tripod legs - three legs at 120 degree intervals\n        for (i = [0:120:240]) {\n            rotate([0, 0, i])\n                translate([0, 8, 0])\n                    leg();\n        }\n\n        // Mounting column\n        translate([0, 0, 25])\n            cylinder(h = 45, r = 6);\n\n        // Telescope body\n        translate([0, 0, 70])\n            rotate([0, -30, 0])\n                telescope_body();\n\n        // Eyepiece assembly\n        translate([0, 0, 85])\n            rotate([0, -30, 0])\n                translate([0, 0, -25])\n                    eyepiece();\n\n        // Finder scope\n        translate([0, 0, 75])\n            rotate([0, -30, 0])\n                translate([10, 0, 15])\n                    rotate([0, 20, 0])\n                        finder_scope();\n    }\n}\n\nmodule leg() {\n    // Single tripod leg with realistic proportions\n    union() {\n        // Upper leg segment\n        translate([0, 0, 10])\n            difference() {\n                cube([4, 16, 15], center = true);\n                translate([0, 0, 7.5])\n                    cube([3.5, 15.5, 16], center = true);\n            }\n\n        // Lower leg segment\n        translate([0, 0, 2.5])\n            difference() {\n                cube([3, 12, 5], center = true);\n                translate([0, 0, 2.5])\n                    cube([2.5, 11.5, 6], center = true);\n            }\n\n        // Foot pad\n        translate([0, 0, -2])\n            difference() {\n                cylinder(h = 3, r = 5);\n                translate([0, 0, -0.5])\n                    cylinder(h = 4, r = 4.5);\n            }\n    }\n}\n\nmodule telescope_body() {\n    // Main telescope tube\n    difference() {\n        // Outer tube\n        cylinder(h = 50, r = 15);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 52, r = 13);\n        \n        // Lens opening\n        translate([0, 0, 50])\n            cylinder(h = 5, r = 12);\n    }\n\n    // Focus adjustment ring\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h = 8, r = 16);\n            translate([0, 0, -1])\n                cylinder(h = 10, r = 15.5);\n        }\n\n    // Mounting rings\n    for (z = [10, 40]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 4, r = 17);\n                translate([0, 0, -1])\n                    cylinder(h = 6, r = 15.5);\n            }\n    }\n}\n\nmodule eyepiece() {\n    // Eyepiece assembly\n    union() {\n        // Main eyepiece tube\n        difference() {\n            cylinder(h = 15, r = 6);\n            translate([0, 0, -1])\n                cylinder(h = 17, r = 5);\n        }\n\n        // Eyepiece cup\n        translate([0, 0, -15])\n            difference() {\n                cylinder(h = 5, r = 8);\n                translate([0, 0, -1])\n                    cylinder(h = 7, r = 7.5);\n            }\n    }\n}\n\nmodule finder_scope() {\n    // Small finder scope\n    difference() {\n        cylinder(h = 25, r = 4);\n        translate([0, 0, -1])\n            cylinder(h = 27, r = 3.5);\n    }\n\n    // Finder scope mount\n    translate([0, 0, 12.5])\n        union() {\n            cube([2, 8, 5], center = true);\n            cylinder(h = 3, r = 2);\n        }\n}\n\ntelescope_furniture();",
    "renders": true
  },
  {
    "natural_object": "globe",
    "openscad_code": "// Globe Furniture Item - Medium Complexity\n// Realistic style with furniture characteristics\n// Overall height: 120mm, globe diameter: 80mm, base width: 100mm\n\n// Parameters\n$fn = 50;\nglobe_radius = 40;\nstand_height = 60;\nbase_thickness = 8;\nwall_thickness = 2;\n\n// Main globe module\nmodule globe() {\n    difference() {\n        // Outer sphere\n        sphere(r = globe_radius);\n        \n        // Hollow interior\n        sphere(r = globe_radius - wall_thickness);\n        \n        // South pole opening for stand\n        rotate([180, 0, 0]) \n            cylinder(h = wall_thickness + 2, r = 8, center = true);\n    }\n    \n    // Latitude lines (decorative)\n    for(lat = [-60:30:60]) {\n        rotate([90, 0, 0])\n        rotate([lat, 0, 0])\n        difference() {\n            rotate_extrude()\n                translate([globe_radius - 0.5, 0, 0])\n                    circle(r = 0.5);\n            sphere(r = globe_radius - wall_thickness);\n        }\n    }\n    \n    // Longitude lines (decorative)\n    for(lon = [0:30:150]) {\n        rotate([0, lon, 0])\n        difference() {\n            rotate_extrude()\n                translate([globe_radius - 0.5, 0, 0])\n                    circle(r = 0.5);\n            sphere(r = globe_radius - wall_thickness);\n        }\n    }\n}\n\n// Stand module with furniture-style details\nmodule stand() {\n    // Central pole\n    cylinder(h = stand_height, r = 6, center = true);\n    \n    // Decorative rings\n    translate([0, 0, stand_height/2 - 10])\n        cylinder(h = 3, r1 = 8, r2 = 6, center = true);\n    translate([0, 0, -stand_height/2 + 10])\n        cylinder(h = 3, r1 = 8, r2 = 6, center = true);\n    \n    // Connection joint to globe\n    translate([0, 0, stand_height/2])\n        cylinder(h = 5, r = 8, center = true);\n}\n\n// Decorative base with furniture proportions\nmodule base() {\n    // Main base plate\n    difference() {\n        cube([100, 100, base_thickness], center = true);\n        cube([96, 96, base_thickness + 2], center = true);\n    }\n    \n    // Corner supports\n    for(x = [-45, 45])\n    for(y = [-45, 45])\n        translate([x, y, 0])\n            cylinder(h = base_thickness, r = 5, center = true);\n    \n    // Center support for stand\n    difference() {\n        cylinder(h = base_thickness, r = 15, center = true);\n        cylinder(h = base_thickness + 2, r = 6, center = true);\n    }\n    \n    // Decorative feet\n    for(pos = [[-40, -40], [40, -40], [-40, 40], [40, 40]]) {\n        translate([pos[0], pos[1], -base_thickness/2 - 2])\n            cylinder(h = 4, r = 5, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, stand_height/2 + base_thickness/2 + 2])\n    globe();\n\ntranslate([0, 0, base_thickness/2 + 2])\n    stand();\n\nbase();",
    "renders": true
  },
  {
    "natural_object": "abacus",
    "openscad_code": "// Abacus Desk Organizer - Realistic Style\n$fn = 32;\n\n// Overall dimensions\nlength = 120;\nwidth = 80;\nheight = 40;\nframe_thickness = 3;\nbead_diameter = 12;\nbead_spacing = 15;\nrod_diameter = 3;\nleg_height = 15;\nleg_taper = 0.8;\n\n// Frame module\nmodule abacus_frame() {\n    // Bottom frame\n    translate([0, 0, 0])\n        cube([length, width, frame_thickness], center = true);\n    \n    // Top frame\n    translate([0, 0, height - frame_thickness])\n        cube([length, width, frame_thickness], center = true);\n    \n    // Left side\n    translate([-length/2 + frame_thickness/2, 0, height/2])\n        cube([frame_thickness, width - frame_thickness*2, height], center = true);\n    \n    // Right side\n    translate([length/2 - frame_thickness/2, 0, height/2])\n        cube([frame_thickness, width - frame_thickness*2, height], center = true);\n    \n    // Center support beams\n    for (i = [-1, 1]) {\n        translate([0, (width/4)*i, height/2])\n            cube([length - frame_thickness*2, frame_thickness, height - frame_thickness*2], center = true);\n    }\n}\n\n// Bead module\nmodule bead(pos_x, pos_y, pos_z) {\n    translate([pos_x, pos_y, pos_z])\n        sphere(d = bead_diameter);\n}\n\n// Rod module\nmodule rod(pos_x) {\n    // Vertical rod\n    translate([pos_x, 0, height/2])\n        cylinder(h = height - frame_thickness*2, d = rod_diameter, center = true);\n    \n    // Beads on rod\n    for (i = [0:3]) {\n        bead(pos_x, 0, frame_thickness + bead_diameter/2 + i*bead_spacing);\n    }\n}\n\n// Leg module with taper\nmodule leg(pos_x, pos_y) {\n    translate([pos_x, pos_y, -leg_height/2])\n        cylinder(h1 = leg_height, h2 = leg_height*leg_taper, d1 = 8, d2 = 6, center = true);\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    abacus_frame();\n    \n    // Rods with beads\n    for (x = [-length/2 + 20 : 20 : length/2 - 20]) {\n        rod(x);\n    }\n    \n    // Support legs\n    leg(-length/2 + 15, -width/2 + 15);\n    leg(length/2 - 15, -width/2 + 15);\n    leg(-length/2 + 15, width/2 - 15);\n    leg(length/2 - 15, width/2 - 15);\n    \n    // Small decorative feet pads\n    translate([0, 0, -leg_height - 2])\n        cube([length - 10, width - 10, 2], center = true);\n}",
    "renders": true
  },
  {
    "natural_object": "ruler",
    "openscad_code": "// Ruler Furniture - Desk Ruler with Furniture-Style Details\n// A 150mm ruler with structural elements resembling furniture construction\n\n$fn = 32;\n\n// Main ruler body with furniture-style frame construction\nmodule ruler_body() {\n    // Main ruler slab (like a tabletop)\n    difference() {\n        cube([150, 25, 8]);\n        \n        // Hollow out center for weight reduction (furniture construction technique)\n        translate([5, 5, 2])\n            cube([140, 15, 4]);\n    }\n}\n\n// Furniture-style legs/support structure\nmodule ruler_supports() {\n    // Front support beam (like a furniture apron)\n    translate([5, -2, 0])\n        cube([140, 4, 6]);\n    \n    // Back support beam\n    translate([5, 23, 0])\n        cube([140, 4, 6]);\n    \n    // Decorative end supports (like table legs)\n    for(x = [5, 145]) {\n        // Left leg\n        translate([x-5, -2, 0])\n            difference() {\n                cube([5, 29, 8]);\n                translate([1, 1, 1])\n                    cube([3, 27, 6]);\n            }\n    }\n}\n\n// Measurement marks with furniture-style details\nmodule measurement_marks() {\n    // Major marks (cm)\n    for(i = [0:10:150]) {\n        translate([i, 0, 8])\n            difference() {\n                cube([2, 25, 2]);\n                translate([0.5, 2, 0.5])\n                    cube([1, 21, 1]);\n            }\n    }\n    \n    // Minor marks (5mm)\n    for(i = [5:10:145]) {\n        translate([i, 8, 8])\n            difference() {\n                cube([1, 9, 1.5]);\n                translate([0.25, 0.5, 0.25])\n                    cube([0.5, 8, 1]);\n            }\n    }\n    \n    // Half-cm marks\n    for(i = [2.5:5:147.5]) {\n        translate([i, 6, 8])\n            difference() {\n                cube([1, 13, 1.5]);\n                translate([0.25, 0.5, 0.25])\n                    cube([0.5, 12, 1]);\n            }\n    }\n}\n\n// Furniture-style joinery details\nmodule joinery_details() {\n    // Dovetail-style details at corners\n    translate([5, 0, 4])\n        for(i = [0:4:20]) {\n            translate([i, 0, 0])\n                cube([3, 2, 2]);\n        }\n    \n    translate([5, 23, 4])\n        for(i = [0:4:20]) {\n            translate([i, 0, 0])\n                cube([3, 2, 2]);\n        }\n    \n    // Peg details (like furniture pegs)\n    for(x = [20:25:130]) {\n        translate([x, 12, 0])\n            cylinder(h=8, r=1.5);\n    }\n}\n\n// Assembly\nunion() {\n    ruler_body();\n    ruler_supports();\n    measurement_marks();\n    joinery_details();\n}",
    "renders": true
  },
  {
    "natural_object": "chalk",
    "openscad_code": "// Chalk Furniture – a small stool shaped like a piece of chalk\n// 2024-05-30\n\n// Global parameters\nchalk_diam = 20;              // diameter of the chalk body\nchalk_len  = 120;             // total length of the “leg”\nwall       = 2;               // printable wall thickness\nseat_diam  = 60;              // round seat diameter\nseat_thick = 8;               // seat thickness\n\nmodule chalk_body(h = chalk_len) {\n    // Main cylinder with shallow cone tip\n    union() {\n        cylinder(d = chalk_diam, h = h * 0.9, $fn = 32);\n        translate([0, 0, h * 0.9])\n            cylinder(d1 = chalk_diam, d2 = 0, h = h * 0.1, $fn = 32);\n    }\n}\n\n// Hollow the chalk so it becomes a thin-walled tube\nmodule hollow_chalk() {\n    difference() {\n        chalk_body();\n        translate([0, 0, wall])\n            chalk_body(h = chalk_len - 2 * wall);\n    }\n}\n\n// Seat with central chalk-leg hole\nmodule seat() {\n    difference() {\n        // Main seat disc\n        cylinder(d = seat_diam, h = seat_thick, $fn = 64);\n        // Central hole for chalk leg\n        translate([0, 0, -1])\n            cylinder(d = chalk_diam + wall, h = seat_thick + 2, $fn = 32);\n    }\n}\n\n// Reinforcement ring under the seat\nmodule support_ring() {\n    difference() {\n        // Outer ring\n        cylinder(d = seat_diam * 0.8, h = 8, $fn = 64);\n        // Inner hole\n        translate([0, 0, -1])\n            cylinder(d = chalk_diam + 2 * wall, h = 10, $fn = 32);\n    }\n}\n\n// Three equally-spaced stabilizing feet on the floor\nmodule feet() {\n    foot_len = 20;\n    foot_w   = 12;\n    foot_h   = 6;\n    for (a = [0:120:359])\n        rotate([0, 0, a])\n            translate([chalk_diam/2 + foot_len/2, 0, -foot_h/2])\n                cube([foot_len, foot_w, foot_h], center = true);\n}\n\n// Assembly\nunion() {\n    // Chalk leg\n    hollow_chalk();\n    \n    // Seat\n    translate([0, 0, chalk_len])\n        seat();\n    \n    // Ring under seat\n    translate([0, 0, chalk_len - 8])\n        support_ring();\n    \n    // Feet\n    translate([0, 0, 0])\n        feet();\n}",
    "renders": true
  }
]