[
  {
    "natural_object": "rock",
    "openscad_code": "// Rock-inspired stool / side table\n// Overall footprint ~120 mm diameter, 60 mm high\n// 2 mm wall thickness for 3D printing\n\nmodule rock_stool() {\n    // Base plate (hidden, gives bottom a flat surface for printing)\n    difference() {\n        cylinder(h = 4, d = 120, $fn = 60);\n        translate([0, 0, -1]) cylinder(h = 6, d = 118, $fn = 60);\n    }\n\n    // Central hollow cylinder for weight reduction and even walls\n    difference() {\n        cylinder(h = 56, d = 118, $fn = 60);\n        translate([0, 0, 2]) cylinder(h = 52, d = 114, $fn = 60);\n    }\n\n    // Generate a ring of irregular rock lobes\n    for (a = [0:30:360]) {\n        rotate([0, 0, a]) {\n            translate([rand(46, 52), 0, rand(12, 18)])\n                scale([rand(0.8, 1.2), rand(0.8, 1.2), rand(0.8, 1.2)])\n                    rock_lobe();\n        }\n    }\n\n    // Top sitting surface\n    difference() {\n        cylinder(h = 4, d = 120, $fn = 60);\n        translate([0, 0, 2]) cylinder(h = 2, d = 116, $fn = 60);\n    }\n}\n\n// Single rock lobe primitive (organic, low-profile)\nmodule rock_lobe() {\n    // Main lobe\n    difference() {\n        union() {\n            // Core lobe\n            scale([1, 1, 0.6]) sphere(d = 18, $fn = 20);\n\n            // Ridge detail\n            rotate([90, 0, 0])\n                translate([0, 0, -2])\n                    scale([1, 0.3, 0.3])\n                        cylinder(h = 12, d1 = 10, d2 = 6, $fn = 8);\n        }\n\n        // Small cavities for texture\n        for (p = [[-3, 2, 2], [2, -2, 1.5], [-1, -3, 2.5]]) {\n            translate(p)\n                sphere(d = rand(3, 5), $fn = 8);\n        }\n    }\n}\n\n// Helper: pseudo-random in range\nfunction rand(min, max) = min + (max - min) * (sin(123 * $fn) * 0.5 + 0.5);\n\nrock_stool();",
    "renders": true
  },
  {
    "natural_object": "stone",
    "openscad_code": "// Stone bench - realistic style, medium complexity\n// Rough-hewn stone furniture piece with natural texture and structural supports\n\nmodule stone_texture(x,y,z,freq,amp){\n    // Creates organic rock surface texture with small bumps\n    for(i=[0:freq:x]){\n        for(j=[0:freq:y]){\n            for(k=[0:freq:z]){\n                translate([i,j,k]){\n                    sphere(r=amp,$fn=6);\n                }\n            }\n        }\n    }\n}\n\nmodule stone_block(x,y,z,roughness){\n    // Main stone block with irregular surface\n    difference(){\n        union(){\n            // Base rectangular form\n            cube([x,y,z], center=true);\n            \n            // Add surface texture\n            translate([-x/2,-y/2,-z/2]){\n                stone_texture(x,y,z,5,roughness);\n            }\n        }\n        \n        // Remove some material for natural wear\n        for(i=[0:30]){\n            rotate([rand(360),rand(360),rand(360)]){\n                translate([rand(x)-x/2,rand(y)-y/2,rand(z)-z/2]){\n                    sphere(r=rand(3)+1,$fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule bench_legs(){\n    // Four supporting stone legs with taper\n    leg_positions = [[-35, -15], [35, -15], [-35, 15], [35, 15]];\n    \n    for(pos = leg_positions){\n        translate([pos[0], pos[1], -20]){\n            difference(){\n                // Tapered leg\n                cylinder(h1=15, h2=12, r1=6, r2=8, $fn=8);\n                \n                // Carve natural indentations\n                for(i=[0:4]){\n                    rotate([0,0,i*90]){\n                        translate([3,0,5]){\n                            cube([8,3,10], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule seat_plank(){\n    // Main seating surface with natural stone appearance\n    translate([0,0,0]){\n        difference(){\n            union(){\n                // Basic seat shape\n                cube([80,40,8], center=true);\n                \n                // Front edge detail\n                translate([0,20,0]){\n                    cube([82,2,6], center=true);\n                }\n                \n                // Back edge detail\n                translate([0,-20,0]){\n                    cube([82,2,6], center=true);\n                }\n            }\n            \n            // Carve seating depression\n            translate([0,0,3]){\n                cube([74,34,4], center=true);\n            }\n            \n            // Drainage grooves\n            for(i=[-30:10:30]){\n                translate([i,0,4]){\n                    cube([2,36,1], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule support_beam(){\n    // Central support beam between legs\n    translate([0,0,-10]){\n        cube([70,15,5], center=true);\n    }\n}\n\n// Main assembly\nunion(){\n    color([0.5,0.5,0.5]){ // Stone gray\n    \n        // Seat\n        seat_plank();\n        \n        // Leg structure\n        bench_legs();\n        \n        // Support beam\n        support_beam();\n        \n        // Side reinforcement blocks\n        translate([-40,0,-15]){\n            rotate([0,10,0]){\n                stone_block(10,8,20,1.5);\n            }\n        }\n        \n        translate([40,0,-15]){\n            rotate([0,-10,0]){\n                stone_block(10,8,20,1.5);\n            }\n        }\n        \n        // Corner brackets\n        corner_positions = [[-38, -18], [38, -18], [-38, 18], [38, 18]];\n        for(pos = corner_positions){\n            translate([pos[0], pos[1], -2]){\n                difference(){\n                    cube([6,6,6], center=true);\n                    cylinder(h=8, r=2, $fn=8, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Add natural weathering marks\nfor(i=[0:8]){\n    color([0.3,0.3,0.3]){\n        translate([rand(80)-40,rand(40)-20,rand(6)-3]){\n            sphere(r=rand(2)+0.5,$fn=6);\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "pebble",
    "openscad_code": "// Pebble Bench - Realistic Style\n// A smooth, organic bench resembling a large river pebble split in half\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 50;  // Smooth curves for printing\n\n// Overall dimensions\nbench_length = 120;\nbench_width = 60;\nbench_height = 45;\n\nmodule pebble_bench() {\n    // Create the main pebble shape\n    difference() {\n        // Outer smooth pebble shape\n        scale([1, 0.7, 0.6])\n        sphere(d = bench_length);\n        \n        // Hollow out the bottom for weight reduction\n        translate([0, 0, -5])\n        scale([0.9, 0.6, 0.4])\n        sphere(d = bench_length - 4);\n    }\n    \n    // Add the seat surface (flat top)\n    difference() {\n        // Main seat platform\n        translate([0, 0, bench_height - 8])\n        scale([1, 1, 0.3])\n        sphere(d = bench_length * 0.9);\n        \n        // Create ergonomic depression\n        translate([0, 0, bench_height - 4])\n        scale([0.8, 0.7, 0.2])\n        sphere(d = bench_length * 0.7);\n    }\n    \n    // Structural support ribs inside\n    for (i = [-bench_length/3, 0, bench_length/3]) {\n        translate([i, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h = bench_width * 0.6, d = 4, $fn = 6);\n    }\n    \n    // Add four legs with pebble-like feet\n    leg_positions = [\n        [-bench_length/3, -bench_width/3],\n        [-bench_length/3, bench_width/3],\n        [bench_length/3, -bench_width/3],\n        [bench_length/3, bench_width/3]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], 0])\n        scale([1, 0.8, 0.6])\n        sphere(d = 20);\n        \n        // Connect legs to bench with smooth transitions\n        translate([pos[0], pos[1], 10])\n        cylinder(h = 15, d1 = 20, d2 = 15);\n    }\n    \n    // Add subtle surface texture\n    for (i = [1:12]) {\n        angle = i * 30;\n        radius = bench_length/2 * 0.95;\n        \n        translate([\n            cos(angle) * radius * 0.3,\n            sin(angle) * radius * 0.3,\n            bench_height - 6\n        ])\n        sphere(d = 3);\n    }\n    \n    // Drainage holes for outdoor use\n    for (i = [-bench_length/4, 0, bench_length/4]) {\n        translate([i, 0, bench_height - 10])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 4);\n    }\n}\n\n// Assembly\npebble_bench();\n\n// Add subtle edge beveling for printability\ntranslate([0, 0, bench_height - 8])\nscale([1.02, 1.02, 0.1])\nsphere(d = bench_length * 0.85);",
    "renders": true
  },
  {
    "natural_object": "boulder",
    "openscad_code": "// Boulder Bench - Realistic style, medium complexity\n// Overall dimensions: 100mm x 80mm x 50mm\n\n$fn = 50;\n\n// Main boulder body with organic shape\nmodule boulder_body() {\n    // Base elliptical form\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(d = 90);\n        \n        // Carve out seating area\n        translate([0, 0, 10]) {\n            scale([0.9, 0.8, 0.6]) sphere(d = 90);\n        }\n        \n        // Remove bottom for flat base\n        translate([0, 0, -45]) cube([200, 200, 50], center = true);\n    }\n}\n\n// Add surface irregularities for realism\nmodule surface_details() {\n    // Random bumps and dents\n    for(i = [0:15:360]) {\n        rotate([0, 0, i]) {\n            translate([35 * sin(i), 25 * cos(i), 15]) {\n                sphere(d = 5 + 3 * sin(i * 3));\n            }\n        }\n    }\n    \n    // Small crevice details\n    for(a = [30, 150, 270]) {\n        rotate([0, 0, a]) {\n            translate([20 * cos(a * 2), 15 * sin(a * 2), 5]) {\n                difference() {\n                    sphere(d = 8);\n                    translate([0, 0, 5]) sphere(d = 7);\n                }\n            }\n        }\n    }\n}\n\n// Structural support frame inside\nmodule support_frame() {\n    // Central pillar\n    translate([0, 0, -25]) {\n        cylinder(h = 50, d = 20);\n    }\n    \n    // Radial supports\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle]) {\n            translate([15, 0, -25]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 30, d = 8);\n                }\n            }\n        }\n    }\n}\n\n// Legs for furniture stability\nmodule legs() {\n    // Four legs at corners\n    positions = [[-35, -25], [35, -25], [35, 25], [-35, 25]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], -50]) {\n            // Tapered leg\n            cylinder(h1 = 25, h2 = 15, d1 = 12, d2 = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main boulder structure\n    boulder_body();\n    \n    // Add surface texture\n    surface_details();\n    \n    // Internal support\n    support_frame();\n    \n    // Furniture legs\n    legs();\n}",
    "renders": true
  },
  {
    "natural_object": "crystal",
    "openscad_code": "// Crystal side table (50 mm side length, 75 mm height)\n// Realistic style with 2 mm wall thickness for 3D printing\n\nwall = 2;          // minimum wall thickness for printing\nbase = 50;         // table top edge length\nheight = 75;       // total height\n\n// Table top – hollow crystal plate with bevelled edges\nmodule tabletop() {\n    difference() {\n        // outer crystal plate\n        linear_extrude(height = wall * 1.5)\n            offset(r = 2)\n                offset(delta = -2)\n                    square([base, base], center = true);\n\n        // inner cavity for hollowing\n        translate([0, 0, -0.1])\n            linear_extrude(height = wall * 1.8)\n                offset(r = 1)\n                    offset(delta = -(wall + 2))\n                        square([base - 8, base - 8], center = true);\n    }\n}\n\n// Single crystal prism leg with slight taper\nmodule leg() {\n    hull() {\n        // lower point\n        translate([0, 0, 0])\n            cylinder(h = 2, d1 = 2, d2 = 0.1, $fn = 6);\n        // middle prism\n        translate([0, 0, height * 0.5 - 5])\n            cylinder(h = 10, d1 = 5, d2 = 4, $fn = 6);\n        // upper connection\n        translate([0, 0, height - 2])\n            cylinder(h = 4, d1 = 4, d2 = 6, $fn = 6);\n    }\n}\n\n// Reinforcing crystal strut between legs\nmodule strut(len) {\n    rotate([0, 90, 0])\n        cylinder(h = len, d = 3, $fn = 6);\n}\n\n// Mounting frame under tabletop (hidden)\nmodule frame() {\n    difference() {\n        // outer frame\n        cube([base - 4, base - 4, wall * 2], center = true);\n        // inner hollow\n        cube([base - 8, base - 8, wall * 2.5], center = true);\n    }\n}\n\n// Assemble the table\nunion() {\n    // table top\n    translate([0, 0, height])\n        tabletop();\n\n    // hidden frame under top\n    translate([0, 0, height - wall])\n        frame();\n\n    // four crystal legs\n    for (dx = [-1, 1])\n        for (dy = [-1, 1])\n            translate([dx * (base/2 - 6), dy * (base/2 - 6), 0])\n                leg();\n\n    // diagonal struts for stability\n    strut_len = sqrt(pow(base - 12, 2) + pow(base - 12, 2));\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([base/2 - 6, 0, height * 0.4])\n                strut(strut_len - 8);\n}",
    "renders": true
  },
  {
    "natural_object": "quartz",
    "openscad_code": "// Quartz coffee table with natural crystal top and metal frame\n// Overall dimensions: 120mm x 80mm x 45mm\n\n$fn = 32;\n\nmodule quartz_crystal(x, y, z, size, rotation) {\n    // Main crystal body\n    translate([x, y, z])\n    rotate([0, 0, rotation])\n    scale([1, 1, 1.5])\n    difference() {\n        // Hexagonal prism base\n        cylinder(h = size * 1.2, r = size/2, $fn = 6);\n        \n        // Faceted top\n        translate([0, 0, size * 1.1])\n        cylinder(h = size * 0.8, r1 = size/2, r2 = 0, $fn = 6);\n    }\n    \n    // Side crystals\n    for(i = [0:60:300]) {\n        translate([x + cos(i) * size/3, y + sin(i) * size/3, z])\n        rotate([0, 0, i + rotation])\n        scale([0.3, 0.3, 0.8])\n        cylinder(h = size * 0.6, r1 = size/4, r2 = 0, $fn = 6);\n    }\n}\n\nmodule table_frame() {\n    // Metal frame base\n    difference() {\n        // Main frame rectangle\n        cube([120, 80, 3]);\n        \n        // Hollow center\n        translate([2, 2, -1])\n        cube([116, 76, 5]);\n    }\n    \n    // Legs - cylindrical supports\n    for(pos = [[10, 10], [110, 10], [10, 70], [110, 70]]) {\n        translate([pos[0], pos[1], -42])\n        cylinder(h = 42, r = 4);\n    }\n    \n    // Cross supports\n    translate([60, 5, -20])\n    rotate([90, 0, 0])\n    cylinder(h = 110, r = 2);\n    \n    translate([60, 75, -20])\n    rotate([90, 0, 0])\n    cylinder(h = 110, r = 2);\n    \n    translate([5, 40, -20])\n    rotate([0, 90, 0])\n    cylinder(h = 70, r = 2);\n    \n    translate([115, 40, -20])\n    rotate([0, 90, 0])\n    cylinder(h = 70, r = 2);\n}\n\nmodule quartz_cluster() {\n    // Create cluster of crystals for table top\n    for(i = [0:4]) {\n        angle = i * 72;\n        radius = 15 + (i % 2) * 10;\n        quartz_crystal(\n            cos(angle) * radius, \n            sin(angle) * radius, \n            3, \n            8 + (i % 3) * 3, \n            angle + 30\n        );\n    }\n    \n    // Central large crystal\n    quartz_crystal(0, 0, 3, 12, 0);\n    \n    // Smaller accent crystals\n    for(j = [0:8]) {\n        angle = j * 40;\n        radius = 25 + (j % 3) * 5;\n        quartz_crystal(\n            cos(angle) * radius * 0.7, \n            sin(angle) * radius * 0.7, \n            3, \n            4 + (j % 2) * 2, \n            angle + 15\n        );\n    }\n}\n\n// Assembly\nunion() {\n    // Frame\n    color(\"silver\")\n    table_frame();\n    \n    // Quartz top\n    color([0.9, 0.9, 0.85])\n    translate([0, 0, 3])\n    quartz_cluster();\n}",
    "renders": true
  },
  {
    "natural_object": "geode",
    "openscad_code": "// Geode Side Table (Realistic Style)\n// Dimensions: 120mm diameter, 350mm height\n// Wall thickness: 2mm throughout\n\n$fn = 50;\n\nmodule geode_table() {\n    // Base structure - hollow cone for stability\n    difference() {\n        cylinder(h=40, r1=50, r2=35, center=false);\n        translate([0, 0, 2])\n            cylinder(h=38, r1=48, r2=33, center=false);\n    }\n    \n    // Central support column\n    translate([0, 0, 40]) {\n        difference() {\n            cylinder(h=250, r=15, center=false);\n            translate([0, 0, 2])\n                cylinder(h=246, r=13, center=false);\n        }\n    }\n    \n    // Geode top - split sphere\n    translate([0, 0, 290]) {\n        // Outer shell - top half\n        difference() {\n            scale([1, 1, 0.6])\n                sphere(r=60);\n            translate([0, 0, -2])\n                scale([0.97, 0.97, 0.6])\n                    sphere(r=60);\n        }\n        \n        // Crystalline interior\n        translate([0, 0, -10]) {\n            // Main crystal cluster\n            for(i = [0:15:360]) {\n                rotate([0, 0, i])\n                    translate([random(5, 35), 0, 0])\n                        rotate([random(-30, 30), random(-30, 30), 0])\n                            crystal();\n            }\n            \n            // Central large crystals\n            translate([0, 0, 5])\n                scale([1.5, 1.5, 2])\n                    crystal();\n            translate([20, 0, 10])\n                rotate([0, 15, 0])\n                    crystal();\n            translate([-20, 0, 8])\n                rotate([0, -15, 0])\n                    crystal();\n        }\n        \n        // Rim detail\n        translate([0, 0, -12])\n            difference() {\n                cylinder(h=4, r=60, center=false);\n                cylinder(h=4, r=58, center=false);\n            }\n    }\n    \n    // Support brackets\n    for(i = [0:120:360]) {\n        rotate([0, 0, i])\n            translate([35, 0, 200])\n                bracket();\n    }\n}\n\nmodule crystal() {\n    // Individual crystal formation\n    hull() {\n        translate([0, 0, 0])\n            sphere(r=3);\n        translate([0, 0, random(8, 15)])\n            scale([0.3, 0.3, 1])\n                sphere(r=2);\n    }\n}\n\nmodule bracket() {\n    // Triangular support bracket\n    linear_extrude(height=8, center=false)\n        polygon(points=[\n            [0, 0],\n            [20, 0],\n            [10, 30]\n        ]);\n}\n\n// Assembly\ngeode_table();",
    "renders": true
  },
  {
    "natural_object": "seashell",
    "openscad_code": "// Seashell-inspired accent stool\n// Overall size: 120mm diameter x 180mm height\n\nmodule shell_whirl(height, radius, thickness, steps) {\n    // Build a spiral shell with hollow interior\n    hull() {\n        for (i = [0 : steps-1]) {\n            angle = i * 360 / steps;\n            current_height = height * (i / steps);\n            current_radius = radius * (1 - i / (steps * 1.5));\n            rotate([0, 0, angle])\n                translate([current_radius, 0, current_height])\n                    sphere(thickness, $fn=12);\n        }\n    }\n}\n\nmodule shell_base() {\n    // Solid base for structural strength\n    cylinder(h=15, r1=60, r2=50, $fn=48);\n}\n\nmodule seating_surface() {\n    // Comfortable seating surface with shell texture\n    difference() {\n        cylinder(h=8, r1=55, r2=50, $fn=48);\n        \n        // Create scalloped edge pattern\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([45, 0, -1])\n                    cube([15, 3, 10], center=true);\n        }\n        \n        // Hollow center for weight reduction\n        cylinder(h=10, r1=20, r2=15, $fn=32);\n    }\n}\n\nmodule shell_ridges() {\n    // Add spiral ridges for realistic shell appearance\n    linear_extrude(height=2, twist=30)\n        difference() {\n            circle(55, $fn=48);\n            circle(53, $fn=48);\n        }\n}\n\nmodule seating_support() {\n    // Central support column with spiral reinforcement\n    difference() {\n        cylinder(h=100, r1=25, r2=20, $fn=32);\n        \n        // Lightening holes for material savings\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([12, 0, 50])\n                    cylinder(h=80, r=8, $fn=12);\n        }\n    }\n}\n\nmodule spiral_reinforcement() {\n    // Add spiral ribs for strength and aesthetics\n    for(i=[0:180:45]) {\n        rotate([90, 0, i])\n            translate([0, -25, 0])\n                rotate_extrude(angle=360, $fn=24)\n                    translate([25, 0])\n                        polygon(points=[[0,0], [2,0], [2,100], [0,100]]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    shell_base();\n    \n    // Central support\n    translate([0, 0, 15])\n        seating_support();\n    \n    // Spiral reinforcement\n    translate([0, 0, 15])\n        spiral_reinforcement();\n    \n    // Seating surface\n    translate([0, 0, 115])\n        seating_surface();\n    \n    // Main shell structure\n    translate([0, 0, 123])\n        shell_whirl(height=55, radius=60, thickness=2, steps=20);\n    \n    // Add ridges to shell\n    for(h=[0:10:50]) {\n        translate([0, 0, 123+h])\n            scale([1-h/100, 1-h/100, 1])\n                shell_ridges();\n    }\n    \n    // Final shell cap\n    translate([0, 0, 178])\n        scale([0.4, 0.4, 1])\n            cylinder(h=2, r1=60, r2=0, $fn=48);\n}",
    "renders": true
  },
  {
    "natural_object": "conch",
    "openscad_code": "// Conch shell chair with realistic proportions and structural elements\n// Overall dimensions: ~120mm height, ~100mm width, ~120mm depth\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main shell body module\nmodule shell_body() {\n    // Base spiral structure\n    difference() {\n        // Main spiral shape\n        union() {\n            for (i = [0:15:360]) {\n                rotate([0, 0, i]) \n                    translate([i*0.12, 0, i*0.08]) \n                        scale([1, 0.8, 1]) \n                            sphere(d = 35 - i*0.05);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            cylinder(h = 80, d1 = 25, d2 = 15, center = false);\n    }\n}\n\n// Flared opening edge\nmodule shell_lip() {\n    difference() {\n        // Outer lip\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([25, 0])\n                circle(r = 8);\n        \n        // Inner lip\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([20, 0])\n                circle(r = 6);\n    }\n}\n\n// Structural ribs for strength\nmodule support_ribs() {\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, 10])\n                linear_extrude(height = 60, twist = -30)\n                    square([2, 30], center = true);\n        }\n    }\n}\n\n// Chair legs from shell base\nmodule shell_legs() {\n    // Front legs\n    for (x = [-20:40:20]) {\n        translate([x, 30, -15])\n            cylinder(h = 40, d = 6, center = false);\n    }\n    \n    // Rear support leg\n    translate([0, -25, -15])\n        cylinder(h = 40, d = 8, center = false);\n}\n\n// Natural texture ridges\nmodule shell_ridges() {\n    for (height = [10:5:70]) {\n        translate([0, 0, height])\n            rotate_extrude($fn = 32)\n                translate([20 + height*0.2, 0])\n                    circle(r = 1.5);\n    }\n}\n\n// Seat surface\nmodule seat_surface() {\n    difference() {\n        // Main seat\n        translate([0, 0, 65])\n            scale([1, 0.8, 0.3])\n                sphere(d = 45);\n        \n        // Ergonomic contour\n        translate([0, 0, 70])\n            scale([0.6, 0.5, 0.2])\n                sphere(d = 35);\n    }\n}\n\n// Backrest curve\nmodule backrest() {\n    rotate([15, 0, 0])\n        translate([0, -15, 70])\n            scale([1, 0.6, 1.2])\n                sphere(d = 35);\n}\n\n// Assembly\nunion() {\n    // Main shell structure\n    shell_body();\n    \n    // Structural additions\n    translate([0, 0, 5])\n        shell_lip();\n    \n    support_ribs();\n    \n    // Furniture elements\n    seat_surface();\n    backrest();\n    \n    // Legs\n    shell_legs();\n    \n    // Decorative ridges\n    shell_ridges();\n}\n\n// Base plate for stability\ntranslate([0, 0, -15])\n    cube([80, 70, 2], center = true);",
    "renders": true
  },
  {
    "natural_object": "seashell_scallop",
    "openscad_code": "// Scallop Shell Stool\n// Realistic style, medium complexity\n// Dimensions: ~120mm diameter, ~45mm height\n\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 1;\n\nmodule scallop_shell(radius, height) {\n    // Main shell body with scalloped edges\n    difference() {\n        // Base shell dome\n        scale([1, 1, 0.4]) \n            sphere(r = radius);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            scale([0.85, 0.85, 0.5])\n                sphere(r = radius - wall_thickness);\n    }\n    \n    // Ridge details on shell surface\n    for(i = [1:6]) {\n        rotate([0, 0, i*30]) {\n            hull() {\n                translate([0, 0, height*0.3])\n                    sphere(r = 1.5);\n                translate([radius*0.9, 0, height*0.15])\n                    sphere(r = 1);\n            }\n        }\n    }\n}\n\nmodule shell_edge(radius, height) {\n    // Scalloped edge with 12 ridges\n    for(i = [0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([radius*0.95, 0, height*0.35])\n                rotate([0, 90, 0])\n                    cylinder(h = radius*0.15, r1 = 3, r2 = 1);\n        }\n    }\n}\n\nmodule stool_base() {\n    // Central support column\n    cylinder(h = 25, r1 = 20, r2 = 15);\n    \n    // Reinforcement ring\n    translate([0, 0, 12])\n        cylinder(h = 3, r = 22, r = 22);\n    \n    // Base support\n    translate([0, 0, -2])\n        cylinder(h = 5, r = 25, r = 25);\n}\n\nmodule stool_structure() {\n    // Main shell top\n    translate([0, 0, 25])\n        scallop_shell(60, 20);\n    \n    // Shell edge details\n    translate([0, 0, 25])\n        shell_edge(60, 20);\n    \n    // Support structure\n    stool_base();\n    \n    // Hidden internal supports\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 27, r = 18, r = 18);\n        translate([0, 0, 2])\n            cylinder(h = 25, r = 16, r = 16);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\n    stool_structure();",
    "renders": true
  },
  {
    "natural_object": "seashell_snail",
    "openscad_code": "// Seashell Snail Stool (realistic style)\n// A functional stool shaped like a spiral seashell with snail-like features\n// Overall dimensions: ~120mm diameter x 100mm height\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\nshell_diameter = 120;\nshell_height = 90;\nwall_thickness = 2.5;\nspiral_turns = 2.5;\nstep_height = 3.5;\n\n// Base support structure\nmodule base_support() {\n    // Central column for structural integrity\n    cylinder(h=shell_height * 0.3, r=shell_diameter * 0.15, $fn=32);\n    \n    // Wide base for stability\n    translate([0, 0, -2]) \n        cylinder(h=5, r1=shell_diameter * 0.45, r2=shell_diameter * 0.4, $fn=32);\n}\n\n// Spiral shell structure\nmodule spiral_shell() {\n    for(i=[0:spiral_turns*360]) {\n        angle = i;\n        radius = shell_diameter * 0.5 * (1 - i/(spiral_turns*360) * 0.8);\n        height = i * (step_height/360);\n        \n        // Main spiral step\n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([0, 0, angle])\n            scale([1 - i/(spiral_turns*360) * 0.3, 0.6 - i/(spiral_turns*360) * 0.2, 1])\n            cube([wall_thickness * 3, radius * 0.15, step_height * 1.2], center=true);\n    }\n}\n\n// Shell ridges for structural strength and aesthetics\nmodule shell_ridges() {\n    for(i=[0:spiral_turns*360:15]) {\n        angle = i;\n        radius = shell_diameter * 0.5 * (1 - i/(spiral_turns*360) * 0.8);\n        height = i * (step_height/360);\n        \n        // Ridge structure\n        translate([radius * cos(angle), radius * sin(angle), height])\n            rotate([0, 0, angle + 90])\n            scale([1 - i/(spiral_turns*360) * 0.4, 0.3, 1])\n            cube([wall_thickness * 2, radius * 0.08, step_height * 2], center=true);\n    }\n}\n\n// Snail body structure (serves as seating surface)\nmodule snail_body() {\n    // Main body shell\n    translate([0, 0, shell_height * 0.85])\n    scale([1, 0.8, 0.6])\n    sphere(d=shell_diameter * 0.7);\n    \n    // Shell opening - seating area\n    difference() {\n        translate([0, 0, shell_height * 0.85])\n        cylinder(h=shell_height * 0.3, r=shell_diameter * 0.35, $fn=32);\n        \n        // Hollow out seating area\n        translate([0, 0, shell_height * 0.85 - 1])\n        cylinder(h=shell_height * 0.32, r=shell_diameter * 0.32, $fn=32);\n    }\n}\n\n// Vent holes for 3D printing support removal\nmodule vent_holes() {\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n        translate([shell_diameter * 0.3, 0, shell_height * 0.5])\n        cylinder(h=wall_thickness * 2, r=wall_thickness, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_support();\n    \n    // Spiral seating surface\n    spiral_shell();\n    \n    // Ridges for strength\n    shell_ridges();\n    \n    // Snail body top\n    snail_body();\n    \n    // Ventilation holes\n    vent_holes();\n}\n\n// Add small foot pads for stability\nfor(i=[0:90:359]) {\n    rotate([0, 0, i])\n    translate([shell_diameter * 0.4, 0, 0])\n    cylinder(h=wall_thickness * 2, r=wall_thickness * 1.5, $fn=16);\n}",
    "renders": true
  },
  {
    "natural_object": "clam_shell",
    "openscad_code": "// Clam Shell Furniture Item - Realistic Style\n// A decorative clam shell that functions as a small storage bowl or display piece\n// Overall dimensions: 100mm wide x 80mm deep x 45mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main shell body\nmodule clam_shell() {\n    // Outer shell - ellipsoid shape\n    difference() {\n        // Main body - slightly flattened sphere\n        scale([1, 0.8, 0.45])\n            sphere(d = 100);\n        \n        // Hollow out the inside\n        scale([1, 0.8, 0.45])\n            sphere(d = 100 - wall*2);\n    }\n}\n\n// Shell ridges for structural support and visual detail\nmodule shell_ridges() {\n    for(i = [0:15:75]) {\n        rotate([0, 0, i])\n            translate([0, 0, -1])\n                linear_extrude(height = 2)\n                    difference() {\n                        // Ridge shape\n                        circle(d = 95);\n                        // Inner cutout\n                        circle(d = 90);\n                    };\n    }\n}\n\n// Hinge detail at the back\nmodule hinge_detail() {\n    // Main hinge cylinder\n    translate([0, -40, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 6, $fn = 20);\n    \n    // Hinge supports\n    for(pos = [-3.5, 3.5]) {\n        translate([pos, -40, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 3, $fn = 10);\n    }\n}\n\n// Rim reinforcement for structural integrity\nmodule rim_reinforcement() {\n    difference() {\n        // Outer rim\n        translate([0, 0, wall])\n            scale([1, 0.8, 0.1])\n                sphere(d = 100);\n        \n        // Inner rim\n        translate([0, 0, wall + 0.5])\n            scale([1, 0.8, 0.1])\n                sphere(d = 96);\n    }\n}\n\n// Shell texture pattern\nmodule shell_texture() {\n    // Growth rings on shell surface\n    for(r = [50:5:95]) {\n        color(\"LightBlue\", 0.3)\n            translate([0, 0, 0.5])\n                scale([1, 0.8, 0.45])\n                    sphere(d = r);\n    }\n}\n\n// Base support for stability\nmodule base_support() {\n    // Flattened base\n    translate([0, 0, -wall])\n        cylinder(h = wall, d1 = 60, d2 = 40, $fn = 30);\n}\n\n// Combine all elements\nunion() {\n    // Main shell structure\n    clam_shell();\n    \n    // Add ridges for strength\n    shell_ridges();\n    \n    // Reinforce the rim\n    rim_reinforcement();\n    \n    // Add hinge detail\n    hinge_detail();\n    \n    // Add base support\n    base_support();\n    \n    // Optional texture overlay\n    shell_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "oyster_shell",
    "openscad_code": "$fn = 50;\n\n// Overall dimensions (mm)\nshell_length = 100;\nshell_width = 70;\nshell_height = 40;\nwall_thickness = 2;\n\nmodule oyster_shell_half() {\n    difference() {\n        // Main shell body\n        scale([1, 0.7, 0.4])\n        sphere(d = shell_length);\n        \n        // Hollow inside\n        translate([0, 0, -wall_thickness])\n        scale([0.9, 0.6, 0.35])\n        sphere(d = shell_length - 4);\n    }\n    \n    // Ridge lines\n    for (i = [0:15:75]) {\n        rotate([0, 0, i])\n        translate([0, shell_width/4, shell_height/4])\n        rotate([90, 0, 0])\n        cylinder(h = shell_width/2, d1 = 3, d2 = 1);\n    }\n    \n    // Edge rim\n    rotate([0, 90, 0])\n    translate([0, 0, shell_length/2 - 3])\n    torus(shell_width/2 - 5, wall_thickness);\n}\n\nmodule torus(outer, inner) {\n    rotate_extrude()\n    translate([outer - inner/2, 0, 0])\n    circle(r = inner/2);\n}\n\n// Bottom shell\ntranslate([0, 0, 0])\noyster_shell_half();\n\n// Top shell (hinged)\ntranslate([0, 0, 2])\nrotate([30, 0, 0])\nmirror([0, 0, 1])\noyster_shell_half();\n\n// Hinge structure\ntranslate([-shell_length/2 + 5, 0, 0])\nrotate([0, 90, 0])\ncylinder(h = 10, d = 4);\n\n// Internal support ribs\nmodule support_rib() {\n    translate([0, 0, -shell_height/2 + 2])\n    cube([shell_length - 10, wall_thickness, shell_height/4], center = true);\n}\n\nfor (angle = [30, 150]) {\n    rotate([0, 0, angle])\n    translate([shell_length/4, 0, 0])\n    support_rib();\n}\n\n// Texture bumps\nmodule texture_bump() {\n    sphere(d = 2);\n}\n\nfor (x = [-40:10:40]) {\n    for (y = [-30:10:30]) {\n        z = shell_height/2 - 5 - sqrt(x*x + y*y)/10;\n        if (z > -shell_height/2 + 5) {\n            translate([x, y, z])\n            texture_bump();\n        }\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "coral",
    "openscad_code": "// Coral Wall Shelf\n// 3D printable coral-inspired wall shelf unit\n// Dimensions: 120mm wide x 80mm tall x 60mm deep\n\nwall_thickness = 2;\n\n// Main coral structure base\nmodule coral_base() {\n    // Base platform with coral texture\n    difference() {\n        // Main shelf body\n        translate([0, -5, 0])\n            cube([120, 60, wall_thickness], center=true);\n        \n        // Coral texture holes - staggered pattern\n        for (x = [-50:15:50]) {\n            for (y = [-20:12:20]) {\n                if ((x+y) % 30 == 0) {\n                    translate([x, y, 1])\n                        cylinder(h=wall_thickness+2, r=3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Branching coral structure\nmodule coral_branch(x_pos, y_pos, z_pos, height, angle) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, angle, 0]) {\n            // Main branch cylinder\n            cylinder(h=height, r1=3, r2=1.5, $fn=6);\n            \n            // Secondary branches\n            if (height > 15) {\n                for (i = [1:2]) {\n                    rotate([0, 0, i*120])\n                    translate([0, 0, height*0.6])\n                        coral_branch(0, 0, 0, height*0.4, 25);\n                }\n            }\n            \n            // Branch connection nodes\n            sphere(r=2.5, $fn=8);\n        }\n    }\n}\n\n// Wall mounting bracket\nmodule wall_bracket() {\n    // Main bracket arm\n    translate([0, -35, 10])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=wall_thickness, $fn=8);\n    \n    // Bracket support triangles\n    for (x = [-40:40:40]) {\n        translate([x, -35, 5])\n            rotate([0, 90, 0])\n                linear_extrude(height=wall_thickness)\n                    polygon(points=[[0,0],[15,0],[0,10]]);\n    }\n    \n    // Mounting holes\n    for (x = [-40:80:80]) {\n        translate([x, -35, 10])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness+2, r=2, $fn=16);\n    }\n}\n\n// Organic coral growth details\nmodule coral_details() {\n    // Random small spherical growths\n    for (i = [1:8]) {\n        translate([\n            -50 + i*12 + sin(i*73)*5,\n            -20 + cos(i*47)*15,\n            2 + sin(i*34)*2\n        ]) {\n            sphere(r=1.5 + sin(i*123)*0.5, $fn=6);\n        }\n    }\n    \n    // Tube-like structures\n    for (i = [1:5]) {\n        translate([\n            -40 + i*20,\n            -10 + cos(i*89)*5,\n            3\n        ]) {\n            rotate([0, 90, 0])\n                cylinder(h=8 + sin(i*67)*3, r=wall_thickness, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base shelf structure\n    coral_base();\n    \n    // Primary coral branches growing from base\n    coral_branch(-30, 0, wall_thickness, 25, -10);\n    coral_branch(-10, 10, wall_thickness, 30, 0);\n    coral_branch(15, -5, wall_thickness, 28, 15);\n    coral_branch(35, 5, wall_thickness, 22, -5);\n    \n    // Secondary branch clusters\n    coral_branch(-25, 20, wall_thickness+15, 15, 20);\n    coral_branch(25, -15, wall_thickness+18, 12, -20);\n    \n    // Wall mounting system\n    wall_bracket();\n    \n    // Decorative coral details\n    coral_details();\n    \n    // Shelf edge reinforcement\n    translate([0, 25, wall_thickness/2])\n        cube([110, wall_thickness, 5], center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "coral_branch",
    "openscad_code": "// Coral Branch Bookshelf / Room Divider\n// Realistic coral branch structure with functional shelves\n// Overall size: 120mm W x 80mm D x 140mm H\n\nmodule coral_branch_furniture() {\n    // Base support structure\n    difference() {\n        union() {\n            // Main trunk\n            cylinder(h=120, d1=20, d2=12, $fn=12);\n            \n            // Base plate for stability\n            translate([0, 0, -5])\n                cube([25, 25, 5], center=true);\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 5])\n            cylinder(h=110, d=16, $fn=12);\n    }\n    \n    // Branch generation module\n    module branch(height, angle, rotation, thickness) {\n        translate([0, 0, height])\n        rotate([0, angle, rotation]) {\n            // Main branch segment\n            cylinder(h=40, d=thickness, $fn=8);\n            \n            // Branch joint reinforcement\n            sphere(d=thickness+2, $fn=12);\n            \n            // Shelf platform\n            translate([0, 0, 35])\n                rotate([0, -angle, 0])\n                cube([30, 20, 2], center=true);\n            \n            // Secondary branches for smaller shelves\n            for(i = [1:3]) {\n                rotate([0, 0, i*120])\n                translate([thickness/2, 0, 15])\n                rotate([0, 30, 0])\n                    cylinder(h=25, d=thickness*0.7, $fn=6);\n            }\n        }\n    }\n    \n    // Generate main branches at different heights and angles\n    branch(20, 45, 0, 8);\n    branch(45, -35, 90, 6);\n    branch(70, 25, 180, 7);\n    branch(95, -50, 270, 5);\n    \n    // Root-like support structures\n    module root_support(x, y, angle) {\n        translate([x, y, 0])\n        rotate([0, 0, angle])\n        linear_extrude(height=15, twist=30)\n            circle(d=6, $fn=5);\n    }\n    \n    // Add root supports\n    for(i = [1:5]) {\n        angle = i*72;\n        x = cos(angle) * 12;\n        y = sin(angle) * 12;\n        root_support(x, y, angle);\n    }\n    \n    // Coral texture details using small cylinders\n    module coral_texture(base_x, base_y, base_z, count) {\n        for(i = [1:count]) {\n            translate([\n                base_x + (rand(i*1) - 0.5) * 8,\n                base_y + (rand(i*2) - 0.5) * 8,\n                base_z + rand(i*3) * 10\n            ])\n                cylinder(h=2+rand(i*4)*3, d=1+rand(i*5), $fn=6);\n        }\n    }\n    \n    // Apply texture to main trunk\n    for(j = [1:20]) {\n        z = j * 6;\n        angle = j * 137.5;\n        x = cos(angle) * 10;\n        y = sin(angle) * 10;\n        coral_texture(x, y, z, 2);\n    }\n    \n    // Shelf supports\n    module shelf_support(x, y, z) {\n        translate([x, y, z])\n        rotate([0, 90, 0])\n            cylinder(h=15, d=4, $fn=8);\n    }\n    \n    // Add shelf supports between branches\n    shelf_support(10, 0, 40);\n    shelf_support(-10, 10, 65);\n    shelf_support(0, -15, 90);\n    \n    // Top connector for structural integrity\n    translate([0, 0, 120])\n        sphere(d=10, $fn=12);\n}\n\n// Generate the complete coral branch furniture\ncoral_branch_furniture();",
    "renders": true
  },
  {
    "natural_object": "sea_urchin",
    "openscad_code": "// Sea Urchin Stool - Realistic Style\n// Overall dimensions: 100mm diameter x 150mm height\n\n$fn = 64;\n\nmodule urchin_stool() {\n    // Main body - hollow spherical shape for seating\n    difference() {\n        sphere(d = 100);\n        sphere(d = 96);\n    }\n    \n    // Structural support frame inside\n    translate([0, 0, -48]) {\n        cylinder(h = 96, d = 50);\n    }\n    \n    // Spikes array - 12 rows around circumference\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            // Two rows of spikes per rotation\n            for (j = [0:1]) {\n                spike_row = j * 40 - 20;\n                translate([0, spike_row, 0]) {\n                    // Calculate spike length based on position\n                    spike_length = 25 - abs(spike_row) * 0.5;\n                    rotate([0, 90, 0]) {\n                        // Spike base\n                        cylinder(h = spike_length * 0.3, d1 = 6, d2 = 4);\n                        translate([0, 0, spike_length * 0.3]) {\n                            // Spike tip\n                            cylinder(h = spike_length * 0.7, d1 = 4, d2 = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bottom base plate for stability\n    translate([0, 0, -52]) {\n        difference() {\n            cylinder(h = 6, d = 80);\n            cylinder(h = 7, d = 76);\n        }\n    }\n    \n    // Internal reinforcement ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, -25, -48]) {\n                cube([2, 50, 96]);\n            }\n        }\n    }\n    \n    // Top rim reinforcement\n    translate([0, 0, 48]) {\n        difference() {\n            cylinder(h = 4, d = 102);\n            cylinder(h = 5, d = 98);\n        }\n    }\n    \n    // Ventilation holes for 3D printing\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([30, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 20, d = 4);\n                }\n            }\n        }\n    }\n}\n\n// Generate the stool\nurchin_stool();",
    "renders": true
  },
  {
    "natural_object": "starfish",
    "openscad_code": "// Starfish-inspired side table\n// Overall dimensions: 120mm diameter, 45mm height\n\n// Table parameters\narm_count = 5;\narm_length = 50;\narm_width = 25;\narm_thickness = 4;\ncenter_radius = 30;\ntable_height = 45;\nwall_thickness = 2;\n\nmodule starfish_arm(length, width, thickness) {\n    // Create one arm with realistic rounded edges\n    difference() {\n        // Main arm body\n        hull() {\n            translate([0, -width/2, 0]) \n                cube([length*0.8, width/3, thickness], center=true);\n            translate([length*0.9, 0, 0]) \n                sphere(d=width/2);\n            translate([length*0.3, -width/2, 0]) \n                sphere(d=width/1.5);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -wall_thickness/2])\n            scale([0.8, 0.8, 1])\n            children();\n    }\n}\n\nmodule starfish_top() {\n    union() {\n        // Central disc\n        difference() {\n            cylinder(h=arm_thickness, r=center_radius, center=true);\n            cylinder(h=arm_thickness+1, r=center_radius-wall_thickness, center=true);\n        }\n        \n        // Arms\n        for(i = [0:arm_count-1]) {\n            rotate([0, 0, i*(360/arm_count)]) {\n                translate([center_radius*0.3, 0, 0]) {\n                    starfish_arm(arm_length, arm_width, arm_thickness) {\n                        // Hollow arm interior\n                        translate([arm_length*0.4, 0, wall_thickness/2])\n                            cube([arm_length*0.6, arm_width*0.6, arm_thickness], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Surface texture - small bumps\n        for(i = [0:20]) {\n            angle = i * 137.5;\n            radius = sqrt(i) * 8;\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                arm_thickness/2\n            ]) {\n                sphere(d=2.5);\n            }\n        }\n    }\n}\n\nmodule table_support() {\n    // Central support column\n    difference() {\n        cylinder(h=table_height-arm_thickness, r=8, center=false);\n        cylinder(h=table_height-arm_thickness+1, r=6, center=false);\n    }\n    \n    // Base for stability\n    difference() {\n        cylinder(h=6, r=35, center=false);\n        cylinder(h=7, r=33, center=false);\n    }\n    \n    // Reinforcement ribs\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([0, 0, 0]) {\n                cube([4, 20, table_height-arm_thickness], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, table_height-arm_thickness/2]) {\n    rotate([0, 0, 180/arm_count]) {\n        starfish_top();\n    }\n}\n\ntranslate([0, 0, 0]) {\n    table_support();\n}",
    "renders": true
  },
  {
    "natural_object": "sand_dollar",
    "openscad_code": "// Sand Dollar Coffee Table\n// Realistic style with medium complexity\n// Dimensions: 120mm diameter x 45mm height\n\n$fn = 100;\nwall_thickness = 2;\n\n// Main table top - sand dollar shape\nmodule sand_dollar_top() {\n    difference() {\n        // Base disc\n        cylinder(h=8, r=60, center=true);\n        \n        // Central hole\n        cylinder(h=10, r=8, center=true);\n        \n        // Five petal-shaped cutouts\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 25, 0]) {\n                    scale([1, 1.3, 1]) {\n                        cylinder(h=10, r=8, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Star pattern grooves\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72 + 36]) {\n                translate([0, 0, 4]) {\n                    cube([50, 3, 8], center=true);\n                }\n            }\n        }\n    }\n    \n    // Raised edge detail\n    difference() {\n        cylinder(h=2, r=58, center=true);\n        translate([0, 0, -1]) {\n            cylinder(h=4, r=56, center=true);\n        }\n    }\n}\n\n// Table leg with sand dollar texture\nmodule textured_leg(height) {\n    difference() {\n        // Main leg cylinder\n        cylinder(h=height, r=8, center=false);\n        \n        // Texture grooves\n        for(i = [0:5:height]) {\n            translate([0, 0, i]) {\n                rotate([0, 0, 45]) {\n                    cube([14, 2, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Support ring between legs\nmodule support_ring(radius, height) {\n    difference() {\n        // Outer ring\n        cylinder(h=wall_thickness, r=radius, center=true);\n        \n        // Inner cutout\n        cylinder(h=wall_thickness + 1, r=radius - wall_thickness, center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 45]) {\n    // Table top\n    sand_dollar_top();\n}\n\n// Five legs\nfor(i = [0:4]) {\n    rotate([0, 0, i * 72]) {\n        translate([40, 0, 22.5]) {\n            rotate([90, 0, 90]) {\n                textured_leg(40);\n            }\n        }\n    }\n}\n\n// Lower support structure\ntranslate([0, 0, 15]) {\n    support_ring(35, wall_thickness);\n}\n\n// Upper support structure\ntranslate([0, 0, 35]) {\n    support_ring(45, wall_thickness);\n}\n\n// Central support column\ntranslate([0, 0, 20]) {\n    cylinder(h=20, r=5, center=true);\n}",
    "renders": true
  },
  {
    "natural_object": "driftwood",
    "openscad_code": "// Driftwood Bench - Realistic Style, Medium Complexity\n// Dimensions: 120mm wide x 45mm deep x 50mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main driftwood seat plank\nmodule seat_plank() {\n    // Create organic seat shape with slight curvature\n    hull() {\n        translate([-58, -20, 0]) cylinder(h=8, d1=25, d2=22, $fn=8);\n        translate([58, -20, 0]) cylinder(h=8, d1=22, d2=25, $fn=8);\n        translate([-55, 20, 0]) cylinder(h=8, d1=22, d2=20, $fn=8);\n        translate([55, 20, 0]) cylinder(h=8, d1=20, d2=22, $fn=8);\n    }\n    \n    // Add natural undulations\n    for(i = [-40:20:40]) {\n        translate([i, 0, 8]) \n            scale([1, 0.8, 0.3]) \n            sphere(d=15, $fn=6);\n    }\n    \n    // Drill drainage holes\n    for(i = [-30:30:30]) {\n        for(j = [-10:20:10]) {\n            translate([i, j, 4])\n                cylinder(h=10, d=3, $fn=12);\n        }\n    }\n}\n\n// Natural branch leg\nmodule branch_leg(x_pos, angle) {\n    translate([x_pos, 0, 0]) {\n        rotate([0, angle, 0]) {\n            // Main branch cylinder\n            cylinder(h=45, d=12, $fn=8);\n            \n            // Add knots and irregularities\n            for(i = [0:10:40]) {\n                translate([0, 0, i])\n                    rotate([90, 0, 0])\n                    cylinder(h=8, d1=14, d2=10, $fn=6);\n            }\n            \n            // Root flare at base\n            translate([0, 0, -2])\n                cylinder(h=8, d1=18, d2=12, $fn=8);\n        }\n    }\n}\n\n// Support brace between legs\nmodule support_brace() {\n    translate([0, 0, 15]) {\n        // Curved support beam\n        hull() {\n            translate([-40, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=5, d=8, $fn=6);\n            translate([40, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=5, d=8, $fn=6);\n        }\n        \n        // Add natural taper\n        difference() {\n            cube([85, 8, 5], center=true);\n            translate([0, 0, -3])\n                cube([87, 10, 3], center=true);\n        }\n    }\n}\n\n// Bark texture pattern\nmodule bark_texture() {\n    for(i = [-50:5:50]) {\n        for(j = [-15:5:15]) {\n            if((i+j)%2 == 0) {\n                translate([i, j, 0.5])\n                    cube([3, 1, 0.3]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main seat\n    difference() {\n        seat_plank();\n        // Hollow out for printing\n        translate([0, 0, -1])\n            scale([0.85, 0.85, 0.8])\n            seat_plank();\n    }\n    \n    // Apply bark texture to top\n    translate([0, 0, 8.5])\n        bark_texture();\n    \n    // Front legs\n    branch_leg(-45, 0);\n    branch_leg(45, 0);\n    \n    // Back support legs\n    branch_leg(-35, -15);\n    branch_leg(35, -15);\n    \n    // Cross support\n    support_brace();\n    \n    // Add natural imperfections\n    translate([-20, -15, 25])\n        sphere(d=8, $fn=6);\n    translate([25, 18, 30])\n        sphere(d=6, $fn=5);\n}",
    "renders": true
  },
  {
    "natural_object": "log",
    "openscad_code": "// Log side table – realistic style, medium complexity\n// Overall size ~110 mm high, 150 mm diameter top\n\n$fa = 2; $fs = 0.5;\n\n// Table top – split log slice\nmodule table_top(d=150, h=18) {\n    difference() {\n        cylinder(h=h, d=d, center=true);\n        // Bark groove ring (2 mm deep)\n        translate([0,0,-h/2+1])\n            cylinder(h=2.2, d=d-8, center=true);\n        \n        // Pith hole\n        translate([0,0,-h/2-0.1])\n            cylinder(h=h+0.2, d=12, center=true);\n        \n        // Annual rings – subtract thin cylinders\n        for(i=[1:4:40]) {\n            difference() {\n                translate([0,0,-h/2-0.1])\n                    cylinder(h=h+0.2, d=d-2*i, center=true);\n                translate([0,0,-h/2-0.1])\n                    cylinder(h=h+0.2, d=d-2*i-2, center=true);\n            }\n        }\n    }\n}\n\n// Leg – debarked log with slight taper\nmodule leg(h=90, r=15) {\n    union() {\n        // Main cylinder\n        cylinder(h=h, r1=r, r2=r*0.85, center=true);\n        \n        // Growth-ring lines\n        for(z=[-h/2+5:10:h/2-5]) {\n            translate([0,0,z])\n                cylinder(h=0.6, r1=r+0.2, r2=r*0.85+0.2, center=true);\n        }\n        \n        // Bottom flat pad for printing\n        translate([0,0,-h/2])\n            cylinder(h=2, r=r+1, center=false);\n    }\n}\n\n// Simple mortise (negative) for joint on underside of top\nmodule mortise() {\n    rotate([0,90,0])\n        cylinder(h=30, r=16, center=true);\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Top\n        translate([0,0,90/2+18/2])\n            table_top();\n        \n        // Four legs\n        for(a=[45:90:315]) {\n            rotate([0,0,a])\n                translate([0, 110/2-15, 0])\n                    leg();\n        }\n    }\n    \n    // Cut mortises into top underside\n    for(a=[45:90:315]) {\n        rotate([0,0,a])\n            translate([0, 110/2-15, 90/2-9])\n                mortise();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "branch",
    "openscad_code": "// Branch Shelf - Realistic Style\n// A wall-mounted shelf made from a natural tree branch\n\n// Parameters\nbranch_diameter = 10;           // mm\nbranch_length = 120;            // mm\nshelf_thickness = 4;            // mm\nwall_clearance = 15;            // mm\nmount_hole_diameter = 5;        // mm\nsupport_rod_diameter = 6;       // mm\n\n// Main branch module\nmodule branch_segment(length, diameter, curvature) {\n    // Create curved branch using multiple cylinders\n    segments = 8;\n    for (i = [0:segments-1]) {\n        angle = curvature * sin(i * 180 / segments);\n        translate([i * length/segments, 0, sin(i * 180 / segments) * 2])\n            rotate([0, angle, 0])\n            cylinder(h = length/segments + 1, d = diameter, $fn = 12);\n    }\n}\n\n// Bark texture detail\nmodule bark_texture(diameter, length) {\n    for (i = [0:20]) {\n        rotate([0, 90, i * 18])\n        translate([diameter/2 + 0.5, 0, i * length/20])\n            cylinder(h = 0.5, d = 1.5, $fn = 6);\n    }\n}\n\n// Wall mounting bracket\nmodule wall_mount() {\n    difference() {\n        // Main mount block\n        cube([20, 8, 15], center = true);\n        \n        // Mounting holes\n        translate([7, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 10, d = mount_hole_diameter, $fn = 16);\n        translate([-7, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 10, d = mount_hole_diameter, $fn = 16);\n    }\n}\n\n// Shelf platform\nmodule shelf_platform(width, depth) {\n    difference() {\n        // Main shelf\n        translate([-width/2, 0, 0])\n            cube([width, depth, shelf_thickness]);\n        \n        // Rounded edges\n        translate([width/2 - 3, 3, -0.1])\n            cylinder(h = shelf_thickness + 0.2, d = 6, $fn = 16);\n        translate([width/2 - 3, depth - 3, -0.1])\n            cylinder(h = shelf_thickness + 0.2, d = 6, $fn = 16);\n    }\n}\n\n// Support rod\nmodule support_rod(length) {\n    cylinder(h = length, d = support_rod_diameter, $fn = 12);\n}\n\n// Assemble the branch shelf\nunion() {\n    // Main branch\n    translate([-branch_length/2, wall_clearance, branch_diameter/2 + shelf_thickness])\n        branch_segment(branch_length, branch_diameter, 15);\n    \n    // Add bark texture\n    translate([-branch_length/2, wall_clearance, branch_diameter/2 + shelf_thickness])\n        bark_texture(branch_diameter, branch_length);\n    \n    // Wall mount\n    translate([0, wall_clearance - 4, branch_diameter/2 + shelf_thickness + 7.5])\n        wall_mount();\n    \n    // Shelf platform\n    translate([0, wall_clearance + branch_diameter/2 + 2, branch_diameter/2 + shelf_thickness/2])\n        shelf_platform(branch_length * 0.8, 40);\n    \n    // Support rods\n    translate([-branch_length/3, wall_clearance + branch_diameter/2 + 2, shelf_thickness])\n        rotate([90, 0, 0])\n        support_rod(branch_diameter/2 + 2);\n    \n    translate([branch_length/3, wall_clearance + branch_diameter/2 + 2, shelf_thickness])\n        rotate([90, 0, 0])\n        support_rod(branch_diameter/2 + 2);\n    \n    // Small branch detail\n    translate([branch_length/4, wall_clearance + 5, branch_diameter/2 + shelf_thickness + 8])\n        rotate([0, 30, 90])\n        branch_segment(25, branch_diameter * 0.6, -10);\n}",
    "renders": true
  },
  {
    "natural_object": "twig",
    "openscad_code": "// Twig Chair (realistic style, medium complexity)\n// A small chair made from interlocking twigs, sized for 3D printing (≈80 mm tall)\n\n$fn = 32;        // Smooth curves for printing\nwall = 2;        // 2 mm wall thickness for structural integrity\n\n// Overall dimensions\nchair_h = 80;\nseat_w  = 60;\nseat_d  = 50;\n\n// Helper module: tapered cylinder that looks like a twig\nmodule twig(h, r1, r2 = 0, detail = 8) {\n    // Add subtle bumps for realism\n    for(i = [0:detail-1]) {\n        rotate([0, 0, i*360/detail])\n            translate([0, 0, i*h/detail/2])\n                cylinder(h = h/detail, r1 = r1*(1+0.05*sin(i*90)), r2 = r2*(1+0.05*sin(i*90)), center = true);\n    }\n}\n\n// Helper module: twig with bark texture (small ridges)\nmodule textured_twig(h, r1, r2 = 0) {\n    difference() {\n        twig(h, r1, r2);\n        // Bark texture via small negative cylinders\n        for(i = [0:h/2-1]) {\n            rotate([0, 0, i*45])\n                translate([0, 0, -h/2 + i*2])\n                    cylinder(h = 1, r = r1*1.1, center = true);\n        }\n    }\n}\n\n// Seat frame made from bent twigs\nmodule seat_frame() {\n    // Front cross twig\n    translate([0, seat_d/2-5, chair_h/2])\n        rotate([90, 0, 0])\n            textured_twig(seat_w, 3, 2.5);\n    \n    // Rear cross twig\n    translate([0, -seat_d/2+5, chair_h/2])\n        rotate([90, 0, 0])\n            textured_twig(seat_w, 3, 2.5);\n    \n    // Side twigs\n    translate([seat_w/2-5, 0, chair_h/2])\n        rotate([90, 0, 90])\n            textured_twig(seat_d-10, 3, 2.5);\n    \n    translate([-seat_w/2+5, 0, chair_h/2])\n        rotate([90, 0, 90])\n            textured_twig(seat_d-10, 3, 2.5);\n}\n\n// Backrest made from vertical twigs\nmodule backrest() {\n    for(x = [-seat_w/2+10:10:seat_w/2-10]) {\n        translate([x, -seat_d/2+2, chair_h-15])\n            rotate([0, 0, 0])\n                textured_twig(30, 2.5, 2);\n    }\n}\n\n// Legs made from thicker twigs\nmodule legs() {\n    // Front legs\n    translate([seat_w/2-8, seat_d/2-8, chair_h/4])\n        rotate([0, 0, 5])\n            textured_twig(chair_h/2, 4, 3);\n    \n    translate([-seat_w/2+8, seat_d/2-8, chair_h/4])\n        rotate([0, 0, -5])\n            textured_twig(chair_h/2, 4, 3);\n    \n    // Rear legs (angled back)\n    translate([seat_w/2-8, -seat_d/2+8, chair_h/4])\n        rotate([10, 0, 5])\n            textured_twig(chair_h/2+5, 4, 3);\n    \n    translate([-seat_w/2+8, -seat_d/2+8, chair_h/4])\n        rotate([10, 0, -5])\n            textured_twig(chair_h/2+5, 4, 3);\n}\n\n// Seat surface made from woven twigs\nmodule seat_surface() {\n    // Horizontal twigs\n    for(y = [-seat_d/2+8:4:seat_d/2-8]) {\n        translate([0, y, chair_h/2+2])\n            rotate([90, 0, 0])\n                twig(seat_w-10, 1.5, 1);\n    }\n    \n    // Vertical twigs (woven)\n    for(x = [-seat_w/2+8:4:seat_w/2-8]) {\n        translate([x, 0, chair_h/2+3])\n            rotate([90, 0, 90])\n                twig(seat_d-10, 1.5, 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    seat_frame();\n    backrest();\n    legs();\n    \n    // Seat surface\n    seat_surface();\n    \n    // Support twigs under seat\n    translate([0, 0, chair_h/4])\n        rotate([10, 0, 0])\n            textured_twig(seat_w-5, 2.5, 2);\n    \n    translate([0, -seat_d/4, chair_h/3])\n        rotate([0, 0, 90])\n            rotate([10, 0, 0])\n                textured_twig(seat_d-5, 2.5, 2);\n}\n\n// Add small branch joints for realism\nmodule branch_joint(pos, rot, scale) {\n    translate(pos)\n        rotate(rot)\n            scale([scale, scale, scale])\n                sphere(5);\n}\n\n// Add joints at intersections\nbranch_joint([seat_w/2-8, seat_d/2-8, chair_h/2], [0, 0, 0], 0.6);\nbranch_joint([-seat_w/2+8, seat_d/2-8, chair_h/2], [0, 0, 0], 0.6);\nbranch_joint([seat_w/2-8, -seat_d/2+8, chair_h-15], [0, 0, 0], 0.6);\nbranch_joint([-seat_w/2+8, -seat_d/2+8, chair_h-15], [0, 0, 0], 0.6);",
    "renders": true
  },
  {
    "natural_object": "pinecone",
    "openscad_code": "// Pinecone-inspired side table\n// Overall height 120mm, diameter 60mm base\n\nmodule pinecone_table() {\n    // Table base - pinecone bottom half\n    union() {\n        // Central core cylinder for strength\n        cylinder(h=80, d=16, $fn=32);\n        \n        // Pinecone scales in layers\n        for(i = [0:8]) {\n            // Each layer at different height\n            translate([0, 0, i * 8]) {\n                // Number of scales decreases toward top\n                scale_count = max(12 - i, 6);\n                \n                for(j = [0:scale_count-1]) {\n                    rotate([0, 0, j * (360/scale_count)]) {\n                        // Pinecone scale shape\n                        translate([8 + i * 1.5, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                scale([1, 1.2, 0.8]) {\n                                    // Individual scale\n                                    difference() {\n                                        // Main scale body\n                                        union() {\n                                            cylinder(h=4, d1=10, d2=6, $fn=8);\n                                            translate([0, 0, 2]) {\n                                                sphere(d=8, $fn=16);\n                                            }\n                                        }\n                                        // Hollow bottom for printing\n                                        translate([0, 0, -1]) {\n                                            cylinder(h=6, d=4, $fn=8);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Table top - flat circular surface\n    translate([0, 0, 85]) {\n        difference() {\n            // Main tabletop disk\n            cylinder(h=6, d=60, $fn=64);\n            \n            // Light weight reduction pattern on underside\n            for(x = [-20:20:20]) {\n                for(y = [-20:20:20]) {\n                    translate([x, y, -2]) {\n                        cylinder(h=4, d=8, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Decorative pinecone pattern on top\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([20, 0, 6]) {\n                    scale([0.3, 0.3, 0.2]) {\n                        pinecone_table();\n                    }\n                }\n            }\n        }\n    }\n    \n    // Hidden structural support rod\n    translate([0, 0, -5]) {\n        cylinder(h=10, d=12, $fn=32);\n    }\n}\n\n// Generate the complete table\npinecone_table();",
    "renders": true
  },
  {
    "natural_object": "acorn",
    "openscad_code": "// Acorn Stool – OpenSCAD\n// Realistic style, medium complexity, 3D-printable\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\ncap_d = 90;\ncap_h = 45;\nstem_d = 30;\nstem_h = 10;\nbody_d = 70;\nbody_h = 85;\nleg_h = 220;\nleg_r = 6;\n\nmodule acorn_cap() {\n    difference() {\n        // Main cap dome\n        scale([1, 1, 0.55])\n            sphere(d = cap_d);\n\n        // Remove bottom flat area\n        translate([0, 0, -cap_h/2])\n            cube([cap_d*2, cap_d*2, cap_h], center = true);\n\n        // Add radial grooves for texture\n        for (a = [0:30:330]) {\n            rotate([0, 0, a])\n                translate([cap_d/2 - 3, 0, -cap_h/2 + 2])\n                    cube([cap_d, 2, cap_h], center = true);\n        }\n    }\n\n    // Stem on top\n    translate([0, 0, cap_h/2 - 1])\n        cylinder(d = stem_d, h = stem_h, $fn = 20);\n}\n\nmodule acorn_body() {\n    // Upper shoulder\n    translate([0, 0, body_h/4])\n        sphere(d = body_d);\n\n    // Lower taper\n    hull() {\n        translate([0, 0, body_h/4])\n            sphere(d = body_d);\n        translate([0, 0, -body_h/2])\n            sphere(d = body_d * 0.55);\n    }\n\n    // Light texture rings\n    for (z = [-body_h/2 + 5:10:body_h/4 - 5]) {\n        translate([0, 0, z])\n            difference() {\n                sphere(d = body_d + 0.4);\n                sphere(d = body_d);\n            }\n    }\n}\n\nmodule leg() {\n    // Simple round leg with 2 mm wall\n    difference() {\n        cylinder(h = leg_h, r = leg_r, $fn = 20);\n        translate([0, 0, 2])\n            cylinder(h = leg_h - 4, r = leg_r - 2, $fn = 20);\n    }\n}\n\nmodule stool() {\n    // Assemble cap and body\n    union() {\n        acorn_cap();\n        translate([0, 0, cap_h/2 - 2])\n            acorn_body();\n    }\n\n    // Legs\n    leg_dist = 55;\n    for (a = [45:90:315]) {\n        rotate([0, 0, a])\n            translate([leg_dist, 0, -leg_h/2 - body_h/2 + 5])\n                leg();\n    }\n}\n\n// Render\nstool();",
    "renders": true
  },
  {
    "natural_object": "seed",
    "openscad_code": "// Seed-shaped stool with walnut-like shell and internal structure\n// Dimensions: 120mm height, 80mm max width, suitable for 3D printing\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule seed_stool() {\n    // Main seed body - ellipsoid shape\n    difference() {\n        union() {\n            // Outer shell - walnut-like shape\n            scale([1, 0.7, 1.3]) \n                sphere(d=80);\n            \n            // Base flattening for stability\n            translate([0, 0, -50])\n                cube([80, 56, 20], center=true);\n        }\n        \n        // Hollow interior for material efficiency\n        scale([0.9, 0.6, 1.2])\n            sphere(d=75);\n    }\n    \n    // Internal support structure\n    for (i = [-30:30:30]) {\n        translate([i, 0, -30])\n            rotate([0, 90, 0])\n                cylinder(h=60, d=5, center=true);\n    }\n    \n    for (j = [-20:20:20]) {\n        translate([0, j, -20])\n            rotate([90, 0, 0])\n                cylinder(h=60, d=5, center=true);\n    }\n    \n    // Seed seam detail - realistic walnut shell division\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, -30])\n                rotate([90, 0, 0])\n                    cylinder(h=60, d=2);\n            translate([0, 0, 30])\n                rotate([90, 0, 0])\n                    cylinder(h=60, d=2);\n        }\n    }\n    \n    // Top seating surface with slight indentation\n    difference() {\n        translate([0, 0, 40])\n            scale([1, 0.7, 0.2])\n                sphere(d=80);\n        \n        translate([0, 0, 45])\n            scale([0.9, 0.6, 0.1])\n                sphere(d=70);\n    }\n    \n    // Structural legs disguised as root system\n    module root_leg(x, y, angle) {\n        translate([x, y, -50]) {\n            rotate([angle, 0, 0]) {\n                cylinder(h=40, d1=15, d2=8);\n                translate([0, 0, -20])\n                    sphere(d=8);\n            }\n        }\n    }\n    \n    // Four root legs for stability\n    root_leg(25, 20, 20);\n    root_leg(-25, 20, 20);\n    root_leg(25, -20, 20);\n    root_leg(-25, -20, 20);\n    \n    // Surface texture - small bumps for realistic seed appearance\n    for (i = [1:30]) {\n        theta = i * 137.5;  // Golden angle for natural distribution\n        phi = asin(-1 + 2 * i / 30);\n        r = 40 - i * 0.5;\n        \n        translate([\n            r * cos(theta) * cos(phi),\n            r * sin(theta) * cos(phi) * 0.7,\n            r * sin(phi) * 1.3\n        ]) {\n            sphere(d=2 + sin(i) * 0.5);\n        }\n    }\n    \n    // Reinforcement ring inside base\n    difference() {\n        translate([0, 0, -35])\n            cylinder(h=5, d=70);\n        \n        translate([0, 0, -35])\n            cylinder(h=5, d=60);\n    }\n}\n\n// Generate the complete seed stool\nseed_stool();",
    "renders": true
  },
  {
    "natural_object": "nutshell",
    "openscad_code": "// Nutshell-inspired armchair – realistic style, medium complexity\n// Overall footprint ≈ 100 mm across, printable without supports\n\n$fa = 2; $fs = 0.5;  // smooth curves\n\nmodule shell_half(h=40, r_base=45, thickness=2) {\n    // create one half of a walnut-like shell\n    difference() {\n        // outer ellipsoid dome\n        scale([1, 0.7, 0.8])\n            sphere(r = r_base);\n        \n        // inner cavity\n        translate([0, 0, -thickness])\n            scale([1, 0.7, 0.75])\n                sphere(r = r_base - thickness);\n        \n        // cut flat seating plane\n        translate([0, 0, -h/2])\n            cube([r_base*3, r_base*3, h], center = true);\n    }\n}\n\nmodule ridges(count=12) {\n    // decorative radial ridges on shell surface\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*360/count])\n            translate([0, 0, -5])\n                linear_extrude(height = 10, twist = 5)\n                    offset(delta = 1)\n                        circle(d = 38, $fn = 3);\n    }\n}\n\nmodule backrest() {\n    // rear shell half acting as backrest\n    rotate([0, 0, 0])\n        shell_half();\n}\n\nmodule seat() {\n    // front shell half, slightly rotated forward for seating angle\n    translate([0, 0, 10])\n        rotate([15, 0, 0])\n            shell_half();\n}\n\nmodule legs() {\n    // four short curved legs\n    leg_positions = [[-30, -30], [30, -30], [-30, 30], [30, 30]];\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -25])\n            rotate([0, 0, 45])\n                cylinder(h = 25, r1 = 4, r2 = 2, $fn = 8);\n    }\n}\n\nmodule joint_pins() {\n    // small pegs connecting shell halves\n    pin_pos = [[0, 35, 5], [0, -35, 5]];\n    for(p = pin_pos) {\n        translate(p)\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 4, $fn = 8);\n    }\n}\n\nmodule armrest_supports() {\n    // side brackets shaped like nutshell edges\n    translate([40, 0, 0])\n        rotate([0, -20, 0])\n            scale([1, 0.5, 0.5])\n                shell_half(h = 20, r_base = 15);\n    mirror([1, 0, 0])\n        translate([40, 0, 0])\n            rotate([0, -20, 0])\n                scale([1, 0.5, 0.5])\n                    shell_half(h = 20, r_base = 15);\n}\n\n// final assembly\nunion() {\n    color(\"SaddleBrown\") {\n        backrest();\n        seat();\n        legs();\n    }\n    color(\"Tan\") {\n        ridges();\n    }\n    color(\"Sienna\") {\n        joint_pins();\n        armrest_supports();\n    }\n}",
    "renders": true
  },
  {
    "natural_object": "walnut",
    "openscad_code": "// Walnut armchair (realistic style, medium complexity)\n// Overall dimensions: 100mm W x 95mm D x 110mm H\n\n// Parameters\nseat_width = 85;\nseat_depth = 75;\nseat_height = 45;\nback_height = 65;\nleg_thick = 8;\narmrest_height = 65;\n\n// Walnut color approximation\ncolor(\"saddlebrown\") {\n\n// Seat frame\nmodule seat_frame() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n            cube([seat_width, seat_depth, 6], center=true);\n        \n        // Hollow for cushion\n        translate([0, 0, seat_height/2 + 1])\n            cube([seat_width - 8, seat_depth - 8, 8], center=true);\n    }\n}\n\n// Backrest with curved slats\nmodule backrest() {\n    translate([0, -seat_depth/2 - 2, seat_height + back_height/2])\n    rotate([15, 0, 0]) {\n        // Back frame\n        difference() {\n            cube([seat_width - 10, 6, back_height], center=true);\n            translate([0, 0, -5])\n                cube([seat_width - 14, 10, back_height - 8], center=true);\n        }\n        \n        // Slats\n        for(i = [-30:15:30]) {\n            translate([i, 0, 0])\n                cube([10, 3, back_height - 8], center=true);\n        }\n    }\n}\n\n// Legs with stretchers\nmodule legs() {\n    // Front legs\n    translate([seat_width/2 - leg_thick, seat_depth/2 - leg_thick, seat_height/2])\n        cube([leg_thick, leg_thick, seat_height], center=true);\n    translate([-seat_width/2 + leg_thick, seat_depth/2 - leg_thick, seat_height/2])\n        cube([leg_thick, leg_thick, seat_height], center=true);\n    \n    // Back legs\n    translate([seat_width/2 - leg_thick, -seat_depth/2 + leg_thick, seat_height/2])\n        cube([leg_thick, leg_thick, seat_height], center=true);\n    translate([-seat_width/2 + leg_thick, -seat_depth/2 + leg_thick, seat_height/2])\n        cube([leg_thick, leg_thick, seat_height], center=true);\n    \n    // Stretchers\n    translate([0, 0, seat_height/4])\n        cube([seat_width - leg_thick*2, leg_thick, leg_thick], center=true);\n    translate([0, seat_depth/2 - leg_thick*1.5, seat_height/3])\n        cube([seat_width - leg_thick*2, leg_thick, leg_thick], center=true);\n}\n\n// Armrests\nmodule armrests() {\n    // Left arm\n    translate([-seat_width/2 - leg_thick/2, 0, seat_height + armrest_height/2])\n        cube([leg_thick, seat_depth - 10, armrest_height - seat_height], center=true);\n    \n    // Right arm\n    translate([seat_width/2 + leg_thick/2, 0, seat_height + armrest_height/2])\n        cube([leg_thick, seat_depth - 10, armrest_height - seat_height], center=true);\n    \n    // Arm tops\n    translate([-seat_width/2 - leg_thick/2, 0, armrest_height])\n        cube([leg_thick + 5, seat_depth - 15, 4], center=true);\n    translate([seat_width/2 + leg_thick/2, 0, armrest_height])\n        cube([leg_thick + 5, seat_depth - 15, 4], center=true);\n}\n\n// Assembly\nunion() {\n    seat_frame();\n    backrest();\n    legs();\n    armrests();\n}\n\n// Walnut texture details (subtle)\nfor(i = [1:12]) {\n    rotate([0, 0, i*30])\n    translate([sin(i*30)*2, cos(i*30)*2, seat_height + 3])\n        scale([1, 1, 0.1])\n        sphere(1);\n}",
    "renders": true
  },
  {
    "natural_object": "coconut",
    "openscad_code": "// Coconut Stool - Realistic Style with Medium Complexity\n// Dimensions: ~80mm height, ~70mm diameter\n\n// Parameters\nwall_thickness = 2;\ncoconut_radius = 35;\nshell_thickness = 3;\nleg_height = 45;\nleg_radius = 4;\njoint_radius = 6;\n\n// Main coconut shell (hollow)\nmodule coconut_shell() {\n    difference() {\n        // Outer shell\n        sphere(r = coconut_radius, $fn = 64);\n        \n        // Hollow interior\n        sphere(r = coconut_radius - shell_thickness, $fn = 64);\n        \n        // Flatten bottom for stability\n        translate([0, 0, -coconut_radius + 5])\n            cube([coconut_radius * 2, coconut_radius * 2, 10], center = true);\n        \n        // Drain holes (natural coconut features)\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([coconut_radius * 0.6, 0, -coconut_radius + 10])\n                    rotate([90, 0, 0])\n                        cylinder(h = shell_thickness + 2, r = 3, $fn = 16);\n        }\n    }\n}\n\n// Coconut fiber texture pattern\nmodule fiber_texture() {\n    difference() {\n        coconut_shell();\n        \n        // Fiber grooves\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([0, 0, -coconut_radius])\n                    cube([1.5, coconut_radius * 2, coconut_radius * 2], center = true);\n        }\n        \n        // Horizontal rings\n        for (h = [-20:5:20]) {\n            translate([0, 0, h])\n                rotate_extrude($fn = 64)\n                    translate([coconut_radius, 0, 0])\n                        circle(r = 0.5);\n        }\n    }\n}\n\n// Leg joint reinforcement\nmodule leg_joint() {\n    difference() {\n        // Joint sphere\n        sphere(r = joint_radius, $fn = 32);\n        \n        // Hollow center\n        sphere(r = joint_radius - wall_thickness, $fn = 32);\n        \n        // Leg connection hole\n        rotate([90, 0, 0])\n            cylinder(h = joint_radius * 2, r = leg_radius, $fn = 16);\n    }\n}\n\n// Structural leg\nmodule leg() {\n    difference() {\n        // Main leg cylinder\n        cylinder(h = leg_height, r = leg_radius, $fn = 16);\n        \n        // Hollow center for weight reduction\n        cylinder(h = leg_height, r = leg_radius - wall_thickness, $fn = 16);\n        \n        // Tapered bottom\n        translate([0, 0, leg_height - 5])\n            cylinder(h = 5, r1 = leg_radius, r2 = leg_radius * 0.7, $fn = 16);\n    }\n}\n\n// Assembly - Coconut stool with three legs\nmodule coconut_stool() {\n    union() {\n        // Coconut seat with texture\n        fiber_texture();\n        \n        // Three legs at 120 degree intervals\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                // Position joint under coconut\n                translate([0, coconut_radius * 0.7, -coconut_radius + 5])\n                    leg_joint();\n                \n                // Attach leg\n                translate([0, coconut_radius * 0.7, -coconut_radius + 5 - leg_height/2])\n                    rotate([90, 0, 0])\n                        leg();\n            }\n        }\n        \n        // Reinforcement ring between legs\n        translate([0, 0, -coconut_radius + 5 - leg_height * 0.7])\n            difference() {\n                cylinder(h = wall_thickness, r1 = coconut_radius * 0.8, r2 = coconut_radius * 0.75, $fn = 3);\n                cylinder(h = wall_thickness + 1, r1 = coconut_radius * 0.8 - wall_thickness, \n                        r2 = coconut_radius * 0.75 - wall_thickness, $fn = 3);\n            }\n    }\n}\n\n// Render the stool\ncoconut_stool();",
    "renders": true
  },
  {
    "natural_object": "peanut_shell",
    "openscad_code": "// Peanut Shell Chair - Realistic Style (Medium Complexity)\n// 3D printable peanut shell inspired lounge chair\n// Dimensions: 120mm x 100mm x 80mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main peanut shell body module\nmodule peanut_shell_body() {\n    // Outer shell - two intersecting ellipsoids\n    translate([0, 0, 40]) {\n        difference() {\n            // First half of peanut\n            scale([1.2, 0.8, 0.6]) sphere(50);\n            \n            // Carve out seating area\n            translate([0, -10, -20]) {\n                scale([1.1, 0.7, 0.5]) sphere(45);\n            }\n            \n            // Bottom opening\n            cube([200, 200, 80], center=true);\n        }\n    }\n    \n    // Second half of peanut\n    translate([30, 0, 30]) {\n        difference() {\n            rotate([0, 0, 30]) scale([1.2, 0.8, 0.6]) sphere(45);\n            \n            // Seating cavity\n            translate([0, -10, -15]) {\n                scale([1.1, 0.7, 0.5]) sphere(40);\n            }\n            \n            // Bottom opening\n            cube([200, 200, 80], center=true);\n        }\n    }\n}\n\n// Structural support frame\nmodule support_frame() {\n    // Front support arch\n    translate([-40, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=80, r1=15, r2=15, center=true);\n                cylinder(h=82, r1=13, r2=13, center=true);\n            }\n        }\n    }\n    \n    // Rear support arch\n    translate([40, 0, 10]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=80, r1=15, r2=15, center=true);\n                cylinder(h=82, r1=13, r2=13, center=true);\n            }\n        }\n    }\n    \n    // Cross supports\n    for(i = [-30, 0, 30]) {\n        translate([i, 0, 5]) {\n            difference() {\n                cube([wall, 60, 10], center=true);\n                translate([0, 0, -5]) cube([wall+0.5, 62, 12], center=true);\n            }\n        }\n    }\n}\n\n// Surface texture details\nmodule shell_texture() {\n    // Ridge details along shell surface\n    for(i = [0:15:180]) {\n        rotate([0, i, 0]) {\n            translate([10, 0, 40]) {\n                scale([50, 0.5, 25]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=1, r1=1, r2=0.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Small surface bumps\n    for(i = [0:20:200]) {\n        for(j = [0:30:120]) {\n            rotate([0, i, j]) {\n                translate([45, 0, 40]) {\n                    sphere(r=0.8);\n                }\n            }\n        }\n    }\n}\n\n// Leg support structure\nmodule legs() {\n    // Front legs\n    translate([-30, -30, -40]) {\n        difference() {\n            cylinder(h=40, r1=4, r2=3);\n            cylinder(h=41, r1=2, r2=1);\n        }\n    }\n    \n    translate([-30, 30, -40]) {\n        difference() {\n            cylinder(h=40, r1=4, r2=3);\n            cylinder(h=41, r1=2, r2=1);\n        }\n    }\n    \n    // Rear legs\n    translate([30, -30, -40]) {\n        difference() {\n            cylinder(h=40, r1=4, r2=3);\n            cylinder(h=41, r1=2, r2=1);\n        }\n    }\n    \n    translate([30, 30, -40]) {\n        difference() {\n            cylinder(h=40, r1=4, r2=3);\n            cylinder(h=41, r1=2, r2=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shell body\n    peanut_shell_body();\n    \n    // Internal support structure\n    support_frame();\n    \n    // Surface details\n    shell_texture();\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "natural_object": "gourd",
    "openscad_code": "// Gourd Stool\n// Realistic style, medium complexity\n\n// Dimensions (mm)\ngourd_height = 90;\ngourd_width = 70;\nseat_thickness = 5;\nleg_diameter = 8;\nleg_height = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule gourd_shell() {\n    // Main gourd body - upper bulb\n    difference() {\n        // Outer shell\n        scale([1, 1.2, 1.1])\n            sphere(d=gourd_width);\n        \n        // Hollow interior\n        scale([0.9, 1.1, 0.95])\n            sphere(d=gourd_width - 2*wall_thickness);\n    }\n    \n    // Lower bulb\n    translate([0, 0, -gourd_height/3])\n        difference() {\n            scale([0.8, 1, 0.9])\n                sphere(d=gourd_width * 0.8);\n            \n            scale([0.7, 0.9, 0.8])\n                sphere(d=gourd_width * 0.8 - 2*wall_thickness);\n        }\n}\n\nmodule gourd_stem() {\n    // Stem as center support\n    translate([0, 0, gourd_height/2 + seat_thickness/2])\n        cylinder(h=seat_thickness*2, d=20, $fn=32);\n}\n\nmodule seat_surface() {\n    // Flat seating surface on top\n    translate([0, 0, gourd_height/2 + seat_thickness/2])\n        cylinder(h=seat_thickness, d=gourd_width * 0.9, $fn=64);\n}\n\nmodule legs() {\n    // Four legs for stability\n    leg_positions = [\n        [gourd_width/4, gourd_width/4],\n        [-gourd_width/4, gourd_width/4],\n        [gourd_width/4, -gourd_width/4],\n        [-gourd_width/4, -gourd_width/4]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -gourd_height/2 - leg_height/2])\n            cylinder(h=leg_height, d=leg_diameter, $fn=16);\n    }\n}\n\nmodule gourd_texture() {\n    // Add subtle ridges for realistic texture\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n            translate([0, -gourd_width/2, 0])\n                scale([1, 0.05, 1])\n                    cylinder(h=gourd_height, d=wall_thickness);\n    }\n}\n\nmodule joints() {\n    // Reinforcement rings at connection points\n    translate([0, 0, -gourd_height/2 - leg_height/2])\n        cylinder(h=wall_thickness*2, d=gourd_width*1.1, $fn=32);\n}\n\n// Assembly\nunion() {\n    gourd_shell();\n    gourd_stem();\n    seat_surface();\n    legs();\n    joints();\n    gourd_texture();\n}",
    "renders": true
  },
  {
    "natural_object": "pine_cone",
    "openscad_code": "// Pine Cone Stool – 3D printable\n// Overall height 90 mm, Ø 120 mm, wall 2 mm\n// Optimised for FDM – no steep overhangs, 2 mm shells\n\n$fn = 48;               // smooth curves\n\n// ---------- PARAMETERS ----------\nh_total   = 90;         // total stool height\nr_top     = 60;         // seat radius\nr_base    = 50;         // footprint radius\nwall      = 2;          // shell thickness\nscale_cnt = 8;          // number of scales per ring\nrings     = 6;          // number of scale rings\ncore_h    = h_total*0.55;  // height of the hollow core\nleg_h     = h_total-core_h; // leg length\nleg_r     = 20;         // leg outer radius\nleg_wall  = 2;          // leg wall thickness\n\nmodule scale_ring(h, r_out, r_in, n){\n    // single pine-cone scale\n    module single_scale(){\n        difference(){\n            union(){\n                // outer curved scale\n                translate([-r_out/2,0,0])\n                    scale([1,1,0.3])\n                        sphere(r_out/2);\n                // flat back\n                translate([r_in/2-wall/2,0,0])\n                    cube([wall, r_out*1.2, r_out*0.3], center=true);\n            }\n            // hollow out\n            translate([0,0,-r_out])\n                cube([r_out*2, r_out*2, r_out*2], center=true);\n        }\n    }\n\n    // distribute around ring\n    for(i=[0:n-1])\n        rotate([0,0,i*360/n])\n            translate([r_out*0.85,0,h])\n                rotate([90,0,0])\n                    single_scale();\n}\n\nmodule seat(){\n    // hollow core\n    difference(){\n        cylinder(h=core_h, r1=r_base, r2=r_top);\n        translate([0,0,-0.1])\n            cylinder(h=core_h+0.2, r1=r_base-wall, r2=r_top-wall);\n    }\n    // scale rings\n    for(i=[0:rings-1]){\n        h = (i+0.5)*core_h/rings;\n        r = r_base + (r_top-r_base)*(h/core_h);\n        scale_ring(h, r, r-wall, scale_cnt);\n    }\n}\n\nmodule leg(){\n    // hollow cylinder with slight taper\n    difference(){\n        cylinder(h=leg_h, r1=leg_r, r2=leg_r-5);\n        cylinder(h=leg_h+0.2, r1=leg_r-leg_wall, r2=leg_r-leg_wall-5);\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion(){\n    seat();\n    translate([0,0,core_h])\n        leg();\n}",
    "renders": true
  }
]