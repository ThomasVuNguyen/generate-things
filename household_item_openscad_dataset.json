[
  {
    "household_item": "plate",
    "openscad_code": "// Realistic Plate - Medium Complexity\n// Diameter: 80mm, Height: 8mm\n// Features: Rim, base foot, subtle curvature, drainage channels\n\n$fn = 50;  // Smooth curves\n\n// Main parameters\nplate_diameter = 80;\nplate_height = 8;\nrim_height = 3;\nrim_thickness = 2;\nbase_foot_height = 2;\nwall_thickness = 1.5;\n\n// Curvature parameters\ncenter_depth = 1.2;\nrim_curve = 0.8;\n\nmodule plate_base() {\n    // Main plate body with gentle curvature\n    difference() {\n        // Outer shape - shallow dome\n        union() {\n            // Base cylinder\n            cylinder(h=plate_height - rim_height, d=plate_diameter);\n            \n            // Rim\n            translate([0, 0, plate_height - rim_height])\n                cylinder(h=rim_height, d=plate_diameter);\n        }\n        \n        // Hollow center with curved bottom\n        translate([0, 0, wall_thickness])\n            cylinder(h=plate_height - wall_thickness, d=plate_diameter - 2*wall_thickness);\n        \n        // Curved bottom\n        translate([0, 0, wall_thickness - center_depth])\n            sphere(d=plate_diameter - 2*wall_thickness);\n    }\n}\n\nmodule rim_detail() {\n    // Create rim curvature\n    difference() {\n        // Top rim\n        translate([0, 0, plate_height - rim_height])\n            cylinder(h=rim_height, d=plate_diameter);\n        \n        // Inner bevel\n        translate([0, 0, plate_height - rim_height - 0.5])\n            cylinder(h=rim_height + 1, d=plate_diameter - 2*rim_thickness);\n    }\n}\n\nmodule base_foot() {\n    // Circular foot for stability\n    foot_diameter = plate_diameter - 10;\n    \n    difference() {\n        // Main foot\n        cylinder(h=base_foot_height, d=foot_diameter);\n        \n        // Hollow center\n        cylinder(h=base_foot_height + 0.1, d=foot_diameter - 4);\n    }\n}\n\nmodule drainage_grooves() {\n    // Subtle grooves for water drainage\n    groove_width = 1;\n    groove_depth = 0.3;\n    num_grooves = 8;\n    \n    for (i = [0:num_grooves-1]) {\n        angle = i * 360 / num_grooves;\n        \n        rotate([0, 0, angle])\n            translate([plate_diameter/2 - 10, -groove_width/2, wall_thickness])\n                cube([20, groove_width, groove_depth]);\n    }\n}\n\n// Assemble the plate\nunion() {\n    // Main plate\n    plate_base();\n    \n    // Rim detail for realistic curvature\n    rim_detail();\n    \n    // Base foot\n    translate([0, 0, 0])\n        base_foot();\n    \n    // Drainage grooves\n    drainage_grooves();\n}\n\n// Smooth bottom transition\ntranslate([0, 0, base_foot_height])\n    difference() {\n        cylinder(h=0.5, d=plate_diameter);\n        cylinder(h=0.6, d=plate_diameter - 2);\n    }",
    "renders": true
  },
  {
    "household_item": "bowl",
    "openscad_code": "// Realistic 3D-printable bowl (medium complexity)\n// Outer Ø 80 mm, inner Ø 76 mm, height 40 mm, wall 2 mm\n// No overhangs > 45°, ready for FDM printing\n\nmodule rounded_cylinder(h, r1, r2, r_edge, center=false) {\n    // helper: cylinder with rounded top/bottom edges\n    offset = center ? -h/2 : 0;\n    translate([0,0,offset])\n        minkowski() {\n            cylinder(h=h-r_edge*2, r1=r1-r_edge, r2=r2-r_edge, center=true);\n            sphere(r_edge);\n        }\n}\n\nmodule bowl() {\n    wall = 2;               // wall thickness (mm)\n    base_h = 3;             // base thickness (mm)\n    rim_h = 4;              // rim band height (mm)\n    fillet = 1.5;           // inside bottom fillet radius\n    segments = 64;          // $fn for smooth curves\n    \n    // outer profile: 40 mm tall, 40 mm radius at top, 20 mm radius at bottom\n    outer_profile = [\n        [0, 0],\n        [20, 0],\n        [35, 30],\n        [40, 40]\n    ];\n    \n    // inner profile (offset inward by wall thickness)\n    inner_profile = [\n        [0, base_h],\n        [20-wall, base_h],\n        [35-wall, 30],\n        [40-wall, 40-rim_h]\n    ];\n    \n    // create 2D outer shape and revolve\n    rotate_extrude($fn=segments)\n        polygon(outer_profile);\n    \n    difference() {\n        // outer shell\n        rotate_extrude($fn=segments)\n            polygon(outer_profile);\n        \n        // inner cavity\n        rotate_extrude($fn=segments)\n            polygon(inner_profile);\n    }\n    \n    // add rim band for strength and aesthetics\n    difference() {\n        translate([0,0,40-rim_h])\n            rounded_cylinder(rim_h, 40, 40, 1.5);\n        translate([0,0,40-rim_h-0.01])\n            cylinder(h=rim_h+0.02, r1=40-wall, r2=40-wall, $fn=segments);\n    }\n    \n    // add gentle foot ring for print stability\n    difference() {\n        translate([0,0,0])\n            rounded_cylinder(base_h, 25, 20, 1.5);\n        translate([0,0,-0.01])\n            cylinder(h=base_h+0.02, r1=22, r2=17, $fn=segments);\n    }\n    \n    // subtle grip rings around the outside\n    for (z=[10:10:30]) {\n        difference() {\n            translate([0,0,z])\n                cylinder(h=1.5, r1=40, r2=38.5, $fn=segments);\n            translate([0,0,z-0.01])\n                cylinder(h=1.52, r1=39.5, r2=38, $fn=segments);\n        }\n    }\n}\n\n// render the bowl\nbowl();",
    "renders": true
  },
  {
    "household_item": "cup",
    "openscad_code": "// Realistic Coffee Cup – OpenSCAD (medium complexity)\n// Outer Ø 80 mm, height 90 mm, wall 2 mm, 3D-printable without support\n\n// Main parameters\ncup_h  = 90;      // total height\nbase_r = 40;      // outer base radius\ntop_r  = 46;      // outer top radius\nwall_t = 2;       // wall thickness\nbase_h = 8;       // solid foot height\nlip_h  = 4;       // rolled lip height\n\n// Helper module for smooth cone\nmodule frustum(h, r1, r2, center=false) {\n    cylinder(h=h, r1=r1, r2=r2, center=center, $fn=100);\n}\n\n// 1. Hollow body\ndifference() {\n    frustum(cup_h - base_h, base_r, top_r);      // outer shell\n    translate([0, 0, -0.1])                      // inner cavity\n        frustum(cup_h - base_h + 0.2,\n                base_r - wall_t,\n                top_r  - wall_t);\n}\n\n// 2. Solid base\ntranslate([0, 0, -base_h])\n    frustum(base_h, base_r - 3, base_r);\n\n// 3. Rolled lip\ndifference() {\n    translate([0, 0, cup_h - base_h])\n        frustum(lip_h, top_r, top_r + 1.5);      // outer lip\n    translate([0, 0, cup_h - base_h - 0.1])\n        frustum(lip_h + 0.2,\n                top_r - wall_t,\n                top_r - wall_t + 1);             // inner lip\n}\n\n// 4. Handle\nmodule handle() {\n    difference() {\n        union() {                                // outer handle\n            translate([top_r + 2, 0, cup_h*0.6])\n                rotate([90, 0, 0])\n                    torus(ro=15, ri=4, sides=30, facets=30);\n            // connect arcs with straight bridge\n            translate([top_r + 2, 0, cup_h*0.6 - 15])\n                cube([8, 4, 30], center=true);\n        }\n        // hollow tunnel\n        translate([top_r + 2, 0, cup_h*0.6])\n            rotate([90, 0, 0])\n                torus(ro=15, ri=2, sides=30, facets=30);\n    }\n}\n\n// simple torus approximation\nmodule torus(ro, ri, sides, facets) {\n    rotate_extrude($fn=sides)\n        translate([ro, 0])\n            circle(r=ri, $fn=facets);\n}\n\n// place handle\nrotate([0, 0, 0]) handle();",
    "renders": true
  },
  {
    "household_item": "mug",
    "openscad_code": "// Realistic 3D-printable coffee mug – medium complexity\n// Outer diameter: 85 mm, height: 95 mm, wall thickness: 3 mm\n\n$fn = 64;\n\n// Main mug body\nmodule mug() {\n    difference() {\n        // Outer wall\n        cylinder(h = 85, d = 85);\n\n        // Hollow inside\n        translate([0, 0, 1])\n            cylinder(h = 87, d = 85 - 2*3);\n\n        // Flat bottom inside\n        translate([0, 0, 1])\n            cube([85, 85, 1], center = true);\n    }\n}\n\n// Curved handle\nmodule handle() {\n    // Main grip arc\n    translate([42.5 + 3 + 5, 0, 45])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer\n                torus(ro = 25, ri = 7);\n                // Inner\n                torus(ro = 25, ri = 4);\n            }\n\n    // Top connector\n    translate([42.5 + 3, 0, 75])\n        rotate([0, 90, 0])\n            cylinder(h = 15, d = 12);\n\n    // Bottom connector\n    translate([42.5 + 3, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 15, d = 12);\n}\n\n// Torus helper module\nmodule torus(ro, ri) {\n    rotate_extrude()\n        translate([ro, 0, 0])\n            circle(r = ri);\n}\n\n// Rounded lip\nmodule lip() {\n    difference() {\n        // Outer lip bevel\n        cylinder(h = 5, d1 = 85, d2 = 87);\n        // Inner edge\n        translate([0, 0, 1])\n            cylinder(h = 6, d = 85 - 2*3);\n    }\n}\n\n// Bottom fillet for print stability & strength\nmodule base_fillet() {\n    difference() {\n        cylinder(h = 3, d = 87);\n        cylinder(h = 3, d = 85);\n    }\n}\n\n// Assembly\nunion() {\n    // Mug body\n    mug();\n\n    // Attach rounded lip on top\n    translate([0, 0, 85])\n        lip();\n\n    // Attach handle\n    handle();\n\n    // Attach base fillet\n    translate([0, 0, -3])\n        base_fillet();\n}",
    "renders": true
  },
  {
    "household_item": "glass",
    "openscad_code": "// Realistic Drinking Glass – medium complexity, 3D-printable\n// 85 mm tall, 70 mm max diameter, 2 mm wall thickness\n\n$fn=50;\n\n// Overall dimensions\nh = 85;                 // total height\nbase_d = 70;            // widest diameter (lower rim)\nrim_d = 62;             // top rim diameter\nwall = 2;               // wall thickness\nbase_h = 5;             // solid base height\nbase_t = 3;             // base thickness under cavity\n\n// Derived\nslope = (base_d - rim_d)/2 / (h - base_h);\n\nmodule glass_profile(){\n    // 2D profile for revolution\n    polygon([\n        [0, 0],                     // bottom center\n        [base_d/2, 0],              // outer base radius\n        [base_d/2, base_t],         // outer base top\n        [base_d/2 - wall, base_t],  // inner base top\n        [rim_d/2 - wall, h - wall*slope], // inner wall top\n        [rim_d/2, h],               // rim top\n        [rim_d/2 - wall, h],        // inner rim top\n        [base_d/2 - wall, base_t + wall], // inner wall bottom\n        [base_d/2 - wall, 0],       // inner base bottom\n        [0, 0]                      // back to center\n    ]);\n}\n\n// Outer body (solid)\nmodule outer_body(){\n    rotate_extrude()\n        glass_profile();\n}\n\n// Inner cavity (to be removed)\nmodule inner_cavity(){\n    // Offset profile inwards by wall\n    rotate_extrude()\n        offset(delta=-wall)\n            glass_profile();\n}\n\n// Base ring for aesthetics\nmodule base_ring(){\n    difference(){\n        cylinder(h=base_h, d1=base_d, d2=base_d+2, $fn=60);\n        cylinder(h=base_h+0.1, d1=base_d-3, d2=base_d-1, $fn=60);\n    }\n}\n\n// Rim fillet for comfort\nmodule rim_fillet(){\n    difference(){\n        cylinder(h=wall+0.1, d1=rim_d+1, d2=rim_d+3, $fn=60);\n        cylinder(h=wall+0.2, d=rim_d-0.5, $fn=60);\n    }\n}\n\n// Main glass\ndifference(){\n    union(){\n        outer_body();\n        base_ring();\n    }\n    inner_cavity();\n}\n\n// Apply rim fillet on top\ntranslate([0,0,h-wall/2])\n    rim_fillet();",
    "renders": true
  },
  {
    "household_item": "spoon",
    "openscad_code": "// Realistic medium-complexity 3D printable spoon\n// Overall length ≈ 90 mm\n\n$fn = 50;  // Smooth curves\n\n// Parameters\nbowl_r = 17;         // Bowl radius\nbowl_d = 6;          // Bowl depth\nhandle_len = 70;\nhandle_w = 10;\nhandle_t = 3.5;\nwall = 1.4;          // Wall thickness for printing\nfillet = 1.2;        // Edge rounding\n\nmodule rounded_cube(s, r) {\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n                sphere(r);\n    }\n}\n\n// Spoon bowl\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        scale([1, 1.2, 0.4])\n            sphere(bowl_r);\n        \n        // Inner cavity\n        translate([0, 0, -bowl_d])\n            scale([1-wall/bowl_r, 1.2-wall/bowl_r, 0.4])\n                sphere(bowl_r - wall);\n    }\n}\n\n// Transition neck\nmodule neck() {\n    difference() {\n        hull() {\n            translate([0, bowl_r*1.2, -bowl_d])\n                sphere(fillet);\n            translate([0, 0, -handle_t/2])\n                cube([handle_w*0.7, handle_w*0.4, handle_t], center=true);\n        }\n        // Remove bottom for flat print\n        translate([0, 0, -handle_t*2])\n            cube([handle_w*2, handle_w*2, handle_t*3], center=true);\n    }\n}\n\n// Handle with ergonomic taper\nmodule handle() {\n    for(i=[0:9]) {\n        h = i*handle_len/10;\n        w = handle_w - 0.4*i;\n        t = handle_t - 0.05*i;\n        assign(pos = h - handle_len/2)\n        translate([0, pos, 0])\n            rotate([0, 0, -i*1.2])  // Slight twist\n                scale([w, handle_len/10, t])\n                    rounded_cube([1, 1, 1], fillet);\n    }\n}\n\n// Add shallow groove on handle top\nmodule grip_grooves() {\n    for(i=[1:3]) {\n        translate([0, -handle_len/2 + i*handle_len/4, handle_t/2-0.2])\n            cube([handle_w*0.3, handle_len/8, 0.4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"silver\")\n    difference() {\n        union() {\n            // Main parts\n            translate([0, bowl_r*0.8, 0])\n                rotate([90, 0, 0])\n                    bowl();\n            translate([0, -handle_len/2 - bowl_r*0.7, -handle_t/2])\n                handle();\n            translate([0, -handle_len/2 - bowl_r*0.7, 0])\n                neck();\n        }\n        // Grooves\n        translate([0, -handle_len/2 - bowl_r*0.7, 0])\n            grip_grooves();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fork",
    "openscad_code": "// Fork - Realistic style, medium complexity\n// Size: 170mm total length, 30mm wide handle, 4mm thick tines\n// 3D-printable with no overhangs >45°, 1.5mm wall thickness\n\nfork_thickness = 4;       // overall thickness\nhandle_length = 110;\nhandle_width = 30;\nhandle_depth = fork_thickness;\ntine_length = 60;\ntine_width = 0.8 * handle_width;\ntine_thickness = 2.5;\ntine_count = 4;\ntine_spacing = tine_width / (tine_count + 0.5);\nweb_thickness = 2;\n\nmodule rounded_rect(l, w, h, r)\n{\n    hull()\n    {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([l-r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([r, w-r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([l-r, w-r, 0]) cylinder(h=h, r=r, $fn=16);\n    }\n}\n\nmodule handle()\n{\n    // Main handle body\n    difference()\n    {\n        rounded_rect(handle_length, handle_width, handle_depth, 5);\n        // Grip pattern grooves\n        for(i = [1:10:handle_length-20])\n        {\n            translate([i, 2, 0])\n                cube([3, handle_width-4, handle_depth-1]);\n        }\n    }\n}\n\nmodule tine_base()\n{\n    // Curved transition from handle to tines\n    hull()\n    {\n        translate([0, handle_width/2, handle_depth/2])\n            sphere(r=handle_width/2, $fn=32);\n        translate([tine_length/2, tine_width/2, handle_depth/2])\n            sphere(r=tine_width/2, $fn=32);\n    }\n    // Flat bottom\n    translate([0, 0, 0])\n        cube([tine_length, tine_width, handle_depth/2]);\n}\n\nmodule tines()\n{\n    for(i = [0:tine_count-1])\n    {\n        y = tine_spacing * (i + 1);\n        difference()\n        {\n            // Tapered tine\n            hull()\n            {\n                translate([0, y, 0])\n                    cylinder(h=tine_thickness, r=tine_thickness/2, $fn=8);\n                translate([tine_length, y, 0])\n                    cylinder(h=tine_thickness, r=tine_thickness/4, $fn=8);\n            }\n            // Pointed tip\n            translate([tine_length+1, y, -1])\n                rotate([0, 0, -30])\n                    cube([3, tine_thickness+2, tine_thickness+2]);\n        }\n    }\n    \n    // Web between tines\n    for(i = [0:tine_count-2])\n    {\n        y1 = tine_spacing * (i + 1) + tine_thickness/2;\n        y2 = tine_spacing * (i + 2) - tine_thickness/2;\n        translate([tine_length/3, y1, 0])\n            cube([tine_length/1.5, y2-y1, web_thickness]);\n    }\n}\n\n// Assembly\ntranslate([0, -handle_width/2, 0])\n    union()\n    {\n        handle();\n        translate([handle_length, 0, 0])\n            tine_base();\n        translate([handle_length, 0, 0])\n            tines();\n    }",
    "renders": true
  },
  {
    "household_item": "knife",
    "openscad_code": "// Realistic Knife - Medium Complexity\n// Overall length ~95 mm, blade length ~50 mm, handle ~45 mm\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Main module\nmodule knife() {\n    union() {\n        blade();\n        handle();\n        bolster();\n    }\n}\n\n// Blade with fuller and edge geometry\nmodule blade() {\n    translate([0, 0, 45])  // Position blade at end of handle\n    rotate([0, 90, 0])     // Orient blade forward\n    \n    difference() {\n        // Main blade profile\n        blade_profile();\n        \n        // Fuller (groove)\n        translate([-2, -1, 0])\n        scale([1, 0.8, 0.5])\n        rotate([0, 0, 5])\n        cylinder(h=50, d=3);\n        \n        // Taper for edge\n        translate([0, -10, 0])\n        cube([20, 20, 20], center=true);\n    }\n}\n\nmodule blade_profile() {\n    hull() {\n        // Blade base (thick part)\n        translate([-1, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h=50, d=6);\n        \n        // Blade tip (thin part)\n        translate([48, 0, 0])\n        scale([1, 0.1, 0.1])\n        cylinder(h=2, d=2);\n        \n        // Top spine\n        translate([20, 0, 2.5])\n        cube([30, 0.5, 0.5]);\n    }\n}\n\n// Handle with ergonomic contours\nmodule handle() {\n    translate([0, 0, 22.5])  // Center handle\n    \n    difference() {\n        union() {\n            // Main handle shape\n            scale([1, 0.8, 1])\n            cylinder(h=45, d=12);\n            \n            // Finger grooves\n            for(i = [-2:1:2]) {\n                translate([i*6, 0, 0])\n                scale([0.8, 0.9, 1])\n                cylinder(h=45, d=14);\n            }\n        }\n        \n        // Grip texture holes\n        for(i = [-1.5:0.5:1.5]) {\n            for(j = [-15:5:15]) {\n                translate([i*4, 0, j])\n                rotate([90, 0, 0])\n                cylinder(h=8, d=2);\n            }\n        }\n        \n        // Lanyard hole\n        translate([0, 0, 20])\n        rotate([0, 90, 0])\n        cylinder(h=10, d=4);\n    }\n}\n\n// Metal bolster between blade and handle\nmodule bolster() {\n    translate([0, 0, 45])\n    cylinder(h=5, d=14);\n    \n    // Decorative ridges\n    for(i = [0:0.5:4]) {\n        translate([0, 0, 45 + i])\n        cylinder(h=0.5, d=15 - i*0.5);\n    }\n}\n\n// Render the complete knife\nknife();",
    "renders": true
  },
  {
    "household_item": "pot",
    "openscad_code": "// Realistic 3D-printable pot – medium complexity\n// Overall height ≈ 70 mm, max diameter ≈ 85 mm\n\n$fn = 50;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body profile (lathed)\nmodule pot_body() {\n    rotate_extrude() {\n        offset(-wall) offset(delta = wall) polygon(points = [\n            [0, 0],           // bottom center\n            [42, 0],          // outer bottom edge\n            [42, 5],          // small foot\n            [40, 8],          // start of wall flare\n            [38, 65],         // top rim outer\n            [36, 70],         // lip outer\n            [34, 70],         // lip inner\n            [34, 65],         // top rim inner\n            [32, 8],          // inner wall\n            [30, 5],          // inner foot\n            [30, 0],          // inner bottom edge\n            [0, 0]            // back to center\n        ]);\n    }\n}\n\n// Drainage holes\nmodule drainage_holes() {\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n            translate([15, 0, 3])\n                cylinder(h = 6, r = 2.5, $fn = 16);\n}\n\n// Water reservoir saucer\nmodule saucer() {\n    difference() {\n        // Outer saucer\n        cylinder(h = 8, r1 = 44, r2 = 42);\n\n        // Inner recess\n        translate([0, 0, wall])\n            cylinder(h = 6, r1 = 40, r2 = 38);\n    }\n}\n\n// Simple decorative band\nmodule band() {\n    translate([0, 0, 35])\n        difference() {\n            cylinder(h = 6, r1 = 40.5, r2 = 39.5);\n            cylinder(h = 6.2, r1 = 38.5, r2 = 37.5);\n        }\n}\n\n// Assembly\nunion() {\n    pot_body();\n    difference() {\n        pot_body();  // re-use for drainage\n        drainage_holes();\n    }\n    translate([0, 0, -10]) saucer();\n    band();\n}",
    "renders": true
  },
  {
    "household_item": "pan",
    "openscad_code": "// Realistic 3D printable frying pan\n// Medium complexity (~100 lines)\n\n$fn = 64; // Smooth curves\n\nmodule pan_body() {\n    difference() {\n        // Main pan bowl\n        cylinder(h = 25, r1 = 40, r2 = 38, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 23, r1 = 37, r2 = 35, center = false);\n        \n        // Pour spouts\n        for (angle = [45, 135])\n            rotate([0, 0, angle])\n                translate([40, 0, 20])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 5, center = false);\n    }\n}\n\nmodule handle() {\n    // Handle base connection\n    translate([0, 40, 12])\n        rotate([90, 0, 0])\n            cylinder(h = 15, r = 6, center = false);\n    \n    // Handle grip\n    translate([0, 55, 12])\n        rotate([90, 0, 0])\n            difference() {\n                // Main handle cylinder\n                cylinder(h = 60, r = 5, center = false);\n                \n                // Grip grooves\n                for (i = [0:5:50]) {\n                    translate([0, 0, i + 5])\n                        rotate([0, 90, 0])\n                            cube([10, 1, 1], center = true);\n                }\n            }\n    \n    // Handle end cap\n    translate([0, 115, 12])\n        rotate([90, 0, 0])\n            sphere(r = 5.5);\n}\n\nmodule bottom_base() {\n    difference() {\n        // Base plate\n        translate([0, 0, 0])\n            cylinder(h = 2, r = 40, center = false);\n        \n        // Concentric rings for heat distribution\n        for (r = [10:10:35]) {\n            translate([0, 0, -0.5])\n                cylinder(h = 3, r = r, center = false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Pan components\n    pan_body();\n    handle();\n    bottom_base();\n    \n    // Reinforcement ring\n    translate([0, 0, 22])\n        cylinder(h = 3, r = 42, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "kettle",
    "openscad_code": "// Realistic 3D-Printable Kettle – OpenSCAD\n// Medium complexity, ~100 mm tall, wall thickness 2 mm\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 0.35;\n\nmodule kettle() {\n    // Main body – hollow cylinder with rounded bottom\n    difference() {\n        // Outer shell\n        union() {\n            translate([0, 0, 45])\n                cylinder(h = 55, d1 = 70, d2 = 80);\n            translate([0, 0, 0])\n                sphere(d = 70);\n        }\n        // Inner void\n        translate([0, 0, 2])\n            cylinder(h = 53, d1 = 66, d2 = 76);\n        translate([0, 0, 0])\n            sphere(d = 66);\n    }\n\n    // Bottom base ring\n    difference() {\n        cylinder(h = 5, d = 74);\n        cylinder(h = 5.2, d = 70);\n    }\n\n    // Spout\n    translate([35, 0, 80])\n        rotate([0, 45, 0])\n        difference() {\n            cylinder(h = 45, d1 = 22, d2 = 14);\n            translate([0, 0, -1])\n                cylinder(h = 47, d1 = 18, d2 = 10);\n        }\n\n    // Handle\n    difference() {\n        // Outer handle grip\n        translate([-38, 0, 75])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180)\n                translate([30, 0, 0])\n                    circle(r = 6);\n        // Inner void\n        translate([-38, 0, 75])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180)\n                translate([30, 0, 0])\n                    circle(r = 4);\n    }\n\n    // Lid\n    difference() {\n        // Lid top\n        translate([0, 0, 102])\n            cylinder(h = 8, d = 78);\n        // Lid inner void\n        translate([0, 0, 102])\n            cylinder(h = 8.2, d = 74);\n    }\n\n    // Lid knob\n    translate([0, 0, 110])\n        cylinder(h = 8, d = 18);\n\n    // Steam vents – 6 small holes in lid\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([25, 0, 102])\n                cylinder(h = 10, d = 2.5);\n    }\n}\n\n// Apply global scale\nscale([scale_factor, scale_factor, scale_factor])\n    kettle();",
    "renders": true
  },
  {
    "household_item": "toaster",
    "openscad_code": "// Realistic medium-complexity 3D-printable toaster\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Overall dimensions\ntoaster_w = 80;\ntoaster_d = 40;\ntoaster_h = 60;\n\n// Slot dimensions\nslot_w = 30;\nslot_d = 4;\nslot_h = 40;\nslot_gap = 10;\n\n// Lever\nlever_len = 15;\nlever_r = 2.5;\n\n// Knob\nknob_r = 5;\nknob_h = 4;\n\n// Feet\nfoot_r = 3;\nfoot_h = 2;\n\nmodule body() {\n    difference() {\n        // Main shell\n        cube([toaster_w, toaster_d, toaster_h], center=true);\n        \n        // Bottom hollow\n        translate([0, 0, -foot_h/2])\n            cube([toaster_w-wall*2, toaster_d-wall*2, toaster_h-wall*2], center=true);\n        \n        // Left slot\n        translate([-slot_w/2 - slot_gap/2, 0, (toaster_h-slot_h)/2])\n            cube([slot_w, slot_d+wall, slot_h+wall], center=true);\n        \n        // Right slot\n        translate([slot_w/2 + slot_gap/2, 0, (toaster_h-slot_h)/2])\n            cube([slot_w, slot_d+wall, slot_h+wall], center=true);\n    }\n}\n\nmodule top_surface() {\n    // Top curved surface\n    translate([0, 0, toaster_h/2 - wall])\n        scale([toaster_w/2, toaster_d/2, wall])\n            sphere($fn=32);\n}\n\nmodule lever_assembly() {\n    // Lever slot\n    translate([toaster_w/2 - wall, 0, -toaster_h/4])\n        cube([wall, lever_r*2, lever_len*2], center=true);\n    \n    // Lever handle\n    translate([toaster_w/2 + lever_len/2, 0, -toaster_h/4])\n        rotate([90, 0, 0])\n            cylinder(h=lever_len, r=lever_r, $fn=16);\n    \n    // Lever plate\n    translate([toaster_w/2 - wall/2, 0, -toaster_h/4])\n        cube([wall/2, lever_r*3, lever_r*0.5], center=true);\n}\n\nmodule control_knob() {\n    // Knob housing\n    translate([toaster_w/2 - wall, toaster_d/4, toaster_h/4])\n        cube([wall, knob_r*2.2, knob_h*2], center=true);\n    \n    // Knob\n    translate([toaster_w/2 + knob_r, toaster_d/4, toaster_h/4])\n        rotate([90, 0, 0])\n            cylinder(h=knob_h, r=knob_r, $fn=32);\n    \n    // Knob indicator line\n    translate([toaster_w/2 + knob_r*1.5, toaster_d/4, toaster_h/4 + knob_h/2])\n        cube([knob_r*0.5, 0.5, 1], center=true);\n}\n\nmodule feet() {\n    // Four feet\n    for(x = [-toaster_w/3, toaster_w/3])\n        for(y = [-toaster_d/3, toaster_d/3])\n            translate([x, y, -toaster_h/2 - foot_h/2])\n                cylinder(h=foot_h, r=foot_r, $fn=16);\n}\n\nmodule crumb_tray() {\n    // Tray slot\n    translate([0, toaster_d/2 + wall/2, -toaster_h/4])\n        cube([toaster_w-wall*4, wall, toaster_h/2], center=true);\n    \n    // Tray handle\n    translate([0, toaster_d/2 + wall + 3, -toaster_h/4])\n        cube([toaster_w/4, 3, 5], center=true);\n}\n\n// Assemble toaster\nunion() {\n    body();\n    top_surface();\n    lever_assembly();\n    control_knob();\n    feet();\n    crumb_tray();\n}",
    "renders": true
  },
  {
    "household_item": "blender",
    "openscad_code": "// Realistic Blender - Medium Complexity\n// Base dimensions: 80mm height, 50mm width, 45mm depth\n\n$fn = 32;\n\n// Main body with motor housing\nmodule blender_base() {\n    difference() {\n        // Main housing - slightly tapered\n        cylinder(h = 40, r1 = 25, r2 = 22, center = false);\n        \n        // Front control panel recess\n        translate([0, 22, 20])\n            cube([30, 5, 15], center = true);\n        \n        // Ventilation slots on back\n        for(i = [1:4]) {\n            translate([0, -22, 8*i])\n                cube([40, 3, 2], center = true);\n        }\n    }\n    \n    // Control knob\n    translate([0, 25, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 5, center = true);\n}\n\n// Jar assembly\nmodule blender_jar() {\n    // Jar body - cylindrical with slight taper\n    difference() {\n        cylinder(h = 35, r1 = 20, r2 = 18, center = false);\n        \n        // Interior hollow\n        translate([0, 0, 2])\n            cylinder(h = 33, r1 = 18, r2 = 16, center = false);\n        \n        // Pour spout\n        translate([20, 0, 30])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 5, center = true);\n    }\n    \n    // Handle\n    translate([20, 0, 17.5])\n        rotate([0, 90, 0])\n            difference() {\n                // Handle grip\n                cylinder(h = 30, r = 6, center = true);\n                \n                // Handle hole\n                cylinder(h = 32, r = 4, center = true);\n            }\n    \n    // Lid\n    translate([0, 0, 37])\n        difference() {\n            cylinder(h = 5, r = 20, center = false);\n            cylinder(h = 6, r = 18, center = false);\n            \n            // Central opening\n            cylinder(h = 6, r = 3, center = false);\n        }\n}\n\n// Blade assembly\nmodule blender_blades() {\n    translate([0, 0, 42]) {\n        // Blade hub\n        cylinder(h = 5, r = 8, center = false);\n        \n        // Blades - 4 curved arms\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                // Main blade\n                translate([12, 0, 2.5])\n                    rotate([0, 0, 15])\n                        cube([20, 2, 1], center = true);\n                \n                // Secondary blade\n                translate([8, 0, 2.5])\n                    rotate([0, 0, -10])\n                        cube([15, 1.5, 0.8], center = true);\n            }\n        }\n    }\n}\n\n// Power cord\nmodule power_cord() {\n    translate([-25, 0, 5])\n        rotate([0, 90, 0])\n            for(i = [0:5]) {\n                translate([0, 0, -i*3])\n                    rotate([0, 15*i, 0])\n                        cylinder(h = 3, r = 2, center = true);\n            }\n}\n\n// Assembly\nunion() {\n    // Base unit\n    blender_base();\n    \n    // Jar on top\n    translate([0, 0, 40])\n        blender_jar();\n    \n    // Blades inside jar\n    blender_blades();\n    \n    // Power cord\n    power_cord();\n    \n    // Feet - 4 rubber pads\n    for(x = [-15, 15])\n        for(y = [-15, 15])\n            translate([x, y, 0])\n                cylinder(h = 2, r = 3, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "mixer",
    "openscad_code": "// Realistic Kitchen Stand-Mixer (medium complexity)\n// All dimensions in mm, ready for FDM printing\n\n// Global parameters\nwall_th = 2.5;          // uniform wall thickness for printability\nbase_h = 20;            // height of the base\nbase_r = 45;            // radius of the circular base\nbody_h = 60;            // height of the motor body\nbody_r = 35;            // radius of the motor body\ntilt_angle = 30;        // head-tilt angle in degrees\nbowl_r = 40;            // bowl radius\nbowl_h = 40;            // bowl height\nbeater_r = 4;           // beater rod radius\nbeater_l = 45;          // beater rod length\n\nmodule base() {\n    // Solid circular foot with rubber ring channel\n    difference() {\n        cylinder(h=base_h, r=base_r, $fn=60);\n        translate([0,0,base_h-3])\n            cylinder(h=3+0.01, r=base_r-wall_th, $fn=60);\n    }\n    \n    // Vent slots around the base\n    for(a=[0:30:330])\n        rotate([0,0,a])\n            translate([base_r-4, -1.5, 2])\n                cube([6,3,base_h-4]);\n}\n\nmodule motor_body() {\n    // Main cylindrical housing\n    difference() {\n        cylinder(h=body_h, r=body_r, $fn=48);\n        // Cavity inside\n        translate([0,0,wall_th])\n            cylinder(h=body_h-wall_th*2, r=body_r-wall_th, $fn=48);\n        // Top ventilation grill\n        for(a=[0:45:315])\n            rotate([0,0,a])\n                translate([body_r-7, -1, body_h-7])\n                    cube([8,2,7]);\n    }\n    \n    // Front control knob\n    translate([body_r-4, 0, body_h-20])\n        rotate([90,0,0])\n            cylinder(h=8, r1=6, r2=4, $fn=20);\n}\n\nmodule tilting_head() {\n    rotate([tilt_angle,0,0])\n        translate([0,0,body_h])\n            union() {\n                // Head shell\n                difference() {\n                    cube([body_r*2, body_r, body_r*1.2], center=true);\n                    translate([0,0,-body_r*0.6+wall_th])\n                        cube([body_r*2-wall_th*2, body_r-wall_th*2, body_r*1.2], center=true);\n                }\n                \n                // Output hub\n                translate([0,0,-body_r*0.6-5])\n                    cylinder(h=10, r=body_r/3, $fn=32);\n            }\n}\n\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        cylinder(h=bowl_h, r=bowl_r, $fn=64);\n        // Inner cavity\n        translate([0,0,wall_th])\n            cylinder(h=bowl_h-wall_th, r=bowl_r-wall_th, $fn=64);\n        // Base recess for printed foot\n        translate([0,0,-0.01])\n            cylinder(h=3, r=bowl_r-10, $fn=32);\n    }\n    \n    // Handle\n    translate([bowl_r+2, 0, bowl_h/2])\n        rotate([0,90,0])\n            cylinder(h=15, r=4, $fn=16);\n}\n\nmodule beater() {\n    // Central shaft\n    cylinder(h=beater_l, r=beater_r, $fn=16);\n    \n    // Four elliptical loops\n    for(i=[0:90:270]) {\n        rotate([0,0,i])\n            translate([beater_r*2.5, 0, beater_l*0.4])\n                rotate([0,90,0])\n                    scale([1,0.6,1])\n                        cylinder(h=beater_r*2, r=beater_r*4, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Fixed base and body\n    base();\n    translate([0,0,base_h])\n        motor_body();\n    \n    // Tilting head\n    tilting_head();\n    \n    // Attach beater\n    translate([0,0,body_h+body_r*1.2*sin(tilt_angle)])\n        rotate([tilt_angle,0,0])\n            translate([0,0,-beater_l-5])\n                beater();\n}\n\n// Separate bowl component\ntranslate([0, base_r+bowl_r+15, 0])\n    bowl();",
    "renders": true
  },
  {
    "household_item": "spatula",
    "openscad_code": "// Realistic 3D printable spatula – medium complexity\n// 100 mm total length, 3 mm wall thickness, no steep overhangs\n\n$fn = 30;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Handle parameters\nhandle_len = 60 * scale_factor;\nhandle_dia = 10 * scale_factor;\nwall = 3 * scale_factor;\n\n// Blade parameters\nblade_len = 35 * scale_factor;\nblade_wid = 25 * scale_factor;\nblade_thk = 2 * scale_factor;\n\n// Ferrule (transition ring)\nferrule_h = 8 * scale_factor;\nferrule_d = 14 * scale_factor;\n\nmodule handle_grip() {\n    // Main handle tube\n    difference() {\n        cylinder(h = handle_len, d = handle_dia, center = false);\n        translate([0, 0, wall])\n            cylinder(h = handle_len - wall*2, d = handle_dia - wall*2, center = false);\n    }\n    // Grip rings for ergonomics\n    for (i = [1:6]) {\n        translate([0, 0, i*10 - 5])\n            difference() {\n                cylinder(h = 4, d = handle_dia + 2);\n                cylinder(h = 4, d = handle_dia - 1);\n            }\n    }\n}\n\nmodule ferrule() {\n    // Decorative reinforcing ring between handle and blade\n    cylinder(h = ferrule_h, d1 = ferrule_d, d2 = handle_dia, center = false);\n}\n\nmodule blade() {\n    // Main flat blade\n    translate([-blade_len + 2, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height = blade_thk, center = true)\n                polygon(points=[\n                    [0, -blade_wid/2],\n                    [blade_len, -blade_wid/2 + 4],\n                    [blade_len + 5, 0],\n                    [blade_len, blade_wid/2 - 4],\n                    [0, blade_wid/2]\n                ]);\n    // Blade spine – adds stiffness\n    translate([-blade_len/2, 0, blade_thk/2 + wall/2])\n        cube([blade_len + 2, 4, wall], center = true);\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle_grip();\n    // Ferrule\n    translate([0, 0, handle_len])\n        ferrule();\n    // Blade\n    translate([0, 0, handle_len + ferrule_h])\n        blade();\n}",
    "renders": true
  },
  {
    "household_item": "whisk",
    "openscad_code": "// OpenSCAD Whisk - Realistic Medium Complexity\n// A 3D printable balloon whisk with handle and 8 wire loops\n\n// Overall dimensions\nhandle_len = 70;\nhandle_dia = 12;\nball_dia = 45;\nwire_dia = 1.5;\nwire_count = 8;\n\n// Handle module with grip texture\nmodule handle() {\n    // Main handle shaft\n    color(\"silver\")\n    cylinder(h=handle_len, d=handle_dia, $fn=32);\n    \n    // Grip rings for better hold\n    for (i = [10:15:handle_len-20]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=4, d=handle_dia+2, $fn=32);\n            cylinder(h=4.1, d=handle_dia-1, $fn=32);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_len])\n    sphere(d=handle_dia, $fn=32);\n}\n\n// Wire loop generator\nmodule wire_loop(angle, radius) {\n    rotate([angle, 0, 0])\n    translate([0, 0, handle_len])\n    rotate([90, 0, 0])\n    difference() {\n        // Main loop shape - torus segment\n        rotate_extrude(angle=180, $fn=32)\n        translate([radius, 0, 0])\n        circle(d=wire_dia, $fn=16);\n        \n        // Cut bottom flat for printing\n        translate([0, 0, -wire_dia/2])\n        cube([radius*2+wire_dia, radius*2+wire_dia, wire_dia], center=true);\n    }\n}\n\n// Wire junction hub\nmodule junction_hub() {\n    color(\"silver\")\n    translate([0, 0, handle_len])\n    difference() {\n        sphere(d=8, $fn=32);\n        \n        // Hollow center for weight reduction\n        sphere(d=4, $fn=32);\n    }\n}\n\n// Main whisk assembly\nmodule whisk() {\n    // Handle assembly\n    handle();\n    \n    // Junction hub where wires meet handle\n    junction_hub();\n    \n    // Generate 8 wire loops in spherical pattern\n    for (i = [0:wire_count-1]) {\n        // Calculate spherical distribution angles\n        theta = 45 + i * 360/wire_count;  // Azimuthal angle\n        phi = 30 + (i % 2) * 30;          // Polar angle alternates\n        \n        // Create each wire loop\n        wire_loop(phi, ball_dia/2);\n    }\n    \n    // Additional support ring\n    color(\"silver\")\n    translate([0, 0, handle_len+ball_dia/3])\n    rotate([90, 0, 0])\n    torus(ring_diameter=ball_dia*0.8, tube_diameter=wire_dia*1.2);\n}\n\n// Helper module for torus shape\nmodule torus(ring_diameter, tube_diameter) {\n    rotate_extrude($fn=32)\n    translate([ring_diameter/2, 0, 0])\n    circle(d=tube_diameter, $fn=16);\n}\n\n// Render the whisk\nwhisk();",
    "renders": true
  },
  {
    "household_item": "ladle",
    "openscad_code": "// Medium-complexity realistic ladle\n// Wall thickness 1.2 mm everywhere for reliable 3D printing\n// Overall length ≈ 85 mm\n\n$fn = 32;\n\nmodule rounded_handle(length, width, thickness, radius) {\n    // Generates a slightly tapered round handle\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([width, thickness, radius*2], center = true);\n            translate([0, 0, length - radius])\n                cube([width*0.8, thickness*0.8, radius*2], center = true);\n        }\n        \n        // Hollow out the handle\n        translate([0, 0, -1])\n            cube([width - 2.4, thickness - 2.4, length + 2], center = true);\n    }\n}\n\nmodule hanging_loop() {\n    // Small loop at the end of the handle\n    rotate([90, 0, 0])\n        difference() {\n            torus(4, 1.5);\n            translate([0, -5, 0])\n                cube([10, 10, 3], center = true);\n        }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r = minor);\n}\n\nmodule bowl() {\n    // Main ladle bowl with realistic curvature\n    difference() {\n        // Outer bowl shape\n        scale([1, 1, 0.55])\n            sphere(d = 38);\n        \n        // Inner cavity\n        translate([0, 0, 1.2])\n            scale([1, 1, 0.5])\n                sphere(d = 38 - 2.4);\n        \n        // Flatten bottom slightly for printing stability\n        translate([0, 0, -9])\n            cube([40, 40, 10], center = true);\n    }\n    \n    // Reinforcement rim\n    translate([0, 0, 9.5])\n        difference() {\n            cylinder(h = 2, d = 38.5, center = true);\n            cylinder(h = 2.5, d = 36.5, center = true);\n        }\n}\n\nmodule transition() {\n    // Curved neck between bowl and handle\n    difference() {\n        hull() {\n            translate([0, -19, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 20, center = true);\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 8, center = true);\n        }\n        \n        // Hollow transition\n        translate([0, -9.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d = 20 - 2.4, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Bowl\n    bowl();\n    \n    // Transition neck\n    translate([0, 9.5, 0])\n        transition();\n    \n    // Handle\n    translate([0, 9.5 + 6, 0])\n        rotate([90, 0, 0])\n            rounded_handle(50, 8, 6, 3);\n    \n    // Hanging loop\n    translate([0, 9.5 + 6 + 47, 0])\n        hanging_loop();\n}",
    "renders": true
  },
  {
    "household_item": "tongs",
    "openscad_code": "// Realistic Kitchen Tongs - Medium Complexity\n// Designed for 3D printing with no supports needed\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\ntongs_length = 90;\nhandle_length = 45;\ngrip_width = 25;\nspring_thickness = 1.5;\nwall_thickness = 2;\n\nmodule tongs_half() {\n    // Handle base\n    translate([0, 0, 0])\n        difference() {\n            // Main handle body\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, r1=4, r2=3.5);\n            \n            // Grip pattern - subtracted grooves\n            for(i = [5:8:handle_length-10]) {\n                translate([0, 0, i])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, r=3.6, $fn=6);\n            }\n        }\n    \n    // Transition piece\n    translate([0, 0, handle_length])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=3.5, r2=2.5);\n    \n    // Lever arm\n    translate([0, 0, handle_length+8])\n        rotate([90, 0, 0])\n            cylinder(h=tongs_length-handle_length-8, r1=2.5, r2=2);\n    \n    // Gripper head\n    translate([0, 0, tongs_length])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer shell\n                cylinder(h=grip_width, r1=5, r2=3);\n                \n                // Inner curve for better grip\n                translate([0, 0, -0.5])\n                    cylinder(h=grip_width+1, r1=4, r2=2);\n                \n                // Grip teeth\n                for(i = [2:4:grip_width-4]) {\n                    rotate([0, 90, 0])\n                        translate([i, 0, 0])\n                            cube([0.5, 2.5, 1], center=true);\n                }\n            }\n}\n\n// Spring mechanism\nmodule spring() {\n    // Central pivot cylinder\n    translate([0, 0, handle_length])\n        rotate([0, 90, 0])\n            cylinder(h=6, r=1.5);\n    \n    // Spring arms\n    for(side = [0, 1]) {\n        rotate([0, 0, side * 180])\n            translate([0, 0, handle_length-5])\n                difference() {\n                    // Spring arm body\n                    rotate([0, 90, 0])\n                        cylinder(h=10, r=spring_thickness+1);\n                    \n                    // Spring cutout\n                    rotate([0, 90, 0])\n                        translate([5, 0, 0])\n                            cylinder(h=12, r=spring_thickness);\n                }\n    }\n}\n\n// Assembly\n// Left tong half\ntongs_half();\n\n// Right tong half (mirrored)\nmirror([1, 0, 0])\n    tongs_half();\n\n// Spring assembly in center\nspring();",
    "renders": true
  },
  {
    "household_item": "colander",
    "openscad_code": "// Realistic 3D-printable colander\n// Medium complexity using only basic primitives\n\n// Overall dimensions\ndiameter = 80;\nheight = 40;\nwall_thickness = 2;\nbase_thickness = 3;\n\nmodule colander_body() {\n    difference() {\n        // Main bowl shape\n        cylinder(h=height, d=diameter, $fn=64);\n        \n        // Hollow out the inside\n        translate([0, 0, -1])\n            cylinder(h=height+2, d=diameter-wall_thickness*2, $fn=64);\n    }\n}\n\nmodule base() {\n    // Solid base\n    cylinder(h=base_thickness, d=diameter, $fn=64);\n    \n    // Add feet\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([diameter/2-8, 0, 0])\n                cube([10, 6, 5], center=true);\n    }\n}\n\nmodule handles() {\n    // Left handle\n    translate([-diameter/2-8, 0, height/2]) {\n        rotate([0, 90, 0])\n            cylinder(h=15, d1=8, d2=6, $fn=16);\n        rotate([0, 90, 0])\n            translate([0, 0, 15])\n                cylinder(h=6, d=8, $fn=16);\n    }\n    \n    // Right handle\n    translate([diameter/2+8, 0, height/2]) {\n        rotate([0, -90, 0])\n            cylinder(h=15, d1=8, d2=6, $fn=16);\n        rotate([0, -90, 0])\n            translate([0, 0, 15])\n                cylinder(h=6, d=8, $fn=16);\n    }\n}\n\nmodule drainage_holes() {\n    // Central hole pattern\n    for(i=[0:5]) {\n        for(j=[0:11]) {\n            angle = j*30;\n            radius = 5 + i*7;\n            translate([radius*cos(angle), radius*sin(angle), 0]) {\n                // Ensure holes are only in curved part\n                intersection() {\n                    cylinder(h=height, d=3, $fn=12);\n                    translate([0, 0, height/2])\n                        sphere(d=diameter-wall_thickness, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Bottom holes\n    for(i=[0:7]) {\n        for(j=[0:7]) {\n            x = -21 + i*7;\n            y = -21 + j*7;\n            dist = sqrt(x*x + y*y);\n            if(dist < diameter/2-10) {\n                translate([x, y, 0])\n                    cylinder(h=base_thickness+1, d=2, $fn=8);\n            }\n        }\n    }\n}\n\nmodule rim() {\n    // Top rim reinforcement\n    translate([0, 0, height])\n        difference() {\n            cylinder(h=wall_thickness*2, d=diameter+wall_thickness*2, $fn=64);\n            cylinder(h=wall_thickness*2+1, d=diameter, $fn=64);\n        }\n}\n\n// Assemble the colander\nunion() {\n    translate([0, 0, 0])\n        colander_body();\n    \n    translate([0, 0, 0])\n        base();\n    \n    handles();\n    \n    rim();\n    \n    translate([0, 0, 0])\n        drainage_holes();\n}",
    "renders": true
  },
  {
    "household_item": "strainer",
    "openscad_code": "// Realistic Kitchen Strainer - Medium Complexity\n// 3D printable with proper wall thickness and no overhangs\n\n// Parameters\n$fn = 36;\nstrainer_diameter = 80;\nstrainer_height = 35;\nwall_thickness = 2;\nhandle_length = 40;\nhandle_width = 12;\nhandle_height = 8;\nhole_diameter = 4;\nhole_spacing = 6;\nbase_thickness = 3;\n\n// Main module\nmodule strainer() {\n    // Bowl body\n    difference() {\n        // Outer bowl\n        cylinder(h=strainer_height, d1=strainer_diameter, d2=strainer_diameter*0.9);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n            cylinder(h=strainer_height-base_thickness+1, d1=strainer_diameter-wall_thickness*2, d2=strainer_diameter*0.9-wall_thickness*2);\n    }\n    \n    // Bottom base\n    translate([0, 0, 0])\n        cylinder(h=base_thickness, d=strainer_diameter);\n    \n    // Handle\n    translate([strainer_diameter/2 - wall_thickness, 0, strainer_height/2])\n        rotate([90, 0, 0])\n            handle();\n    \n    // Drainage holes pattern\n    drainage_holes();\n}\n\n// Handle module\nmodule handle() {\n    // Main grip\n    difference() {\n        hull() {\n            cube([handle_length, handle_width, handle_height], center=true);\n            translate([handle_length/2 - handle_width/2, 0, 0])\n                sphere(d=handle_width);\n        }\n        \n        // Ergonomic groove\n        translate([0, 0, -handle_height/2+2])\n            cube([handle_length-10, handle_width-4, handle_height-3], center=true);\n    }\n    \n    // Reinforcement\n    translate([-handle_length/2, 0, 0])\n        cylinder(h=handle_width, d=wall_thickness*3, center=true);\n}\n\n// Drainage holes using polar coordinates\nmodule drainage_holes() {\n    // Bottom holes\n    for(r = [hole_spacing*2:hole_spacing:strainer_diameter/2-hole_spacing*2]) {\n        for(theta = [0:30:359]) {\n            if(r * sin(theta) < strainer_diameter/2 - hole_spacing*2 && \n               r * cos(theta) < strainer_diameter/2 - hole_spacing*2) {\n                translate([r * cos(theta), r * sin(theta), base_thickness/2])\n                    rotate([0, 0, 0])\n                        cylinder(h=base_thickness+1, d=hole_diameter);\n            }\n        }\n    }\n    \n    // Side holes\n    for(z = [base_thickness+hole_spacing:hole_spacing:strainer_height-hole_spacing]) {\n        radius = strainer_diameter/2 - wall_thickness - hole_spacing;\n        for(theta = [0:20:359]) {\n            translate([radius * cos(theta), radius * sin(theta), z])\n                rotate([0, 90, 0])\n                    cylinder(h=wall_thickness+1, d=hole_diameter);\n        }\n    }\n}\n\n// Rim detail\nmodule rim() {\n    translate([0, 0, strainer_height])\n        difference() {\n            cylinder(h=wall_thickness*2, d1=strainer_diameter, d2=strainer_diameter+wall_thickness);\n            cylinder(h=wall_thickness*2+1, d1=strainer_diameter-wall_thickness*2, d2=strainer_diameter-wall_thickness);\n        }\n}\n\n// Assembly\nunion() {\n    strainer();\n    rim();\n}",
    "renders": true
  },
  {
    "household_item": "grater",
    "openscad_code": "// Realistic 3D-printable cheese grater – medium complexity\n// Overall size ≈ 70 mm × 45 mm × 25 mm\n\n$fn = 32;\n\n/*--- Main body ----------------------------------------------------------*/\nmodule body() {\n    difference() {\n        // Solid block\n        cube([70, 45, 25], center = true);\n\n        // Hollow cavity – leave 2 mm wall\n        translate([0, 0, 2])\n            cube([66, 41, 21], center = true);\n\n        // Thumb slot for gripping (top rear)\n        translate([20, 22, 12])\n            rotate([-90, 0, 0])\n                cylinder(h = 15, d = 10, center = true);\n    }\n}\n\n/*--- Grating teeth ------------------------------------------------------*/\nmodule teeth_row(y, z, long = true) {\n    // Length varies for staggered rows\n    len = long ? 35 : 25;\n    for (x = [-len/2 + 2.5 : 5 : len/2 - 2.5]) {\n        translate([x, y, z])\n            scale([1, 0.6, 0.6])\n                cylinder(h = 2.5, d = 1.2);\n    }\n}\n\nmodule teeth_rows() {\n    for (row = [0 : 8]) {\n        y = -20 + row * 5;\n        // Alternate long and short rows\n        teeth_row(y, 12.5, row % 2 == 0);\n    }\n}\n\n/*--- Handle -------------------------------------------------------------*/\nmodule handle() {\n    difference() {\n        // Main handle block\n        translate([-42, 0, -5])\n            rotate([0, 0, -10])\n                cube([30, 12, 15], center = true);\n\n        // Finger groove\n        translate([-42, 0, 3])\n            rotate([0, 0, -10])\n                cylinder(h = 20, d = 8, center = true);\n        \n        // Hanging hole\n        translate([-55, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 5, center = true);\n    }\n}\n\n/*--- Reinforcement ribs -------------------------------------------------*/\nmodule ribs() {\n    for (x = [-25 : 25 : 25]) {\n        translate([x, 0, -8])\n            cube([3, 41, 8], center = true);\n    }\n}\n\n/*--- Assembly -----------------------------------------------------------*/\nunion() {\n    body();\n    handle();\n    ribs();\n    teeth_rows();\n}",
    "renders": true
  },
  {
    "household_item": "peeler",
    "openscad_code": "// Potato/Y-Peeler – 3D-printable, realistic style, medium complexity (~100 mm long)\n\n// ------------- Parameters -------------\nhandle_len = 80;\nhandle_d   = 12;\nslot_w     = 6;\nslot_h     = 4;\nslot_gap   = 8;\nblade_w    = 40;\nblade_h    = 25;\nblade_t    = 1.0;\neye_len    = 10;\neye_w      = 4;\nmetal_t    = 2.0;\nwall       = 1.5;           // printable wall thickness\n\n// ------------- Modules -------------\nmodule handle() {\n    difference() {\n        // Main ergonomic handle\n        hull() {\n            cylinder(h=handle_len, d1=handle_d+4, d2=handle_d, center=false);\n            translate([0,0,handle_len-10])\n                cylinder(h=10, d=handle_d, center=false);\n        }\n\n        // Grippy slots\n        for (i=[10:slot_gap:handle_len-15])\n            translate([0, -handle_d/2-0.1, i])\n                cube([slot_w, handle_d+0.2, slot_h], center=true);\n\n        // Hanging hole\n        translate([0,0,handle_len-8])\n            rotate([90,0,0])\n                cylinder(h=handle_d+1, d=4, center=true);\n    }\n}\n\nmodule yoke() {\n    difference() {\n        // Y-shaped metal yoke\n        union() {\n            translate([-blade_w/2+metal_t/2, 0, 0])\n                cube([metal_t, blade_h, metal_t]);\n            mirror([1,0,0])\n                translate([-blade_w/2+metal_t/2, 0, 0])\n                    cube([metal_t, blade_h, metal_t]);\n            translate([0, blade_h/2-metal_t/2, 0])\n                cube([blade_w-metal_t*2, metal_t, metal_t]);\n        }\n\n        // Rivet holes\n        translate([-blade_w/2+metal_t/2, blade_h-4, metal_t/2])\n            rotate([90,0,0])\n                cylinder(h=metal_t+1, d=2, center=true);\n        mirror([1,0,0])\n            translate([-blade_w/2+metal_t/2, blade_h-4, metal_t/2])\n                rotate([90,0,0])\n                    cylinder(h=metal_t+1, d=2, center=true);\n    }\n}\n\nmodule blade() {\n    difference() {\n        // Blade plate\n        translate([0, blade_h/2, 0])\n            cube([blade_w, blade_h, blade_t], center=true);\n\n        // Peeler slot\n        translate([0, blade_h/2-7, -0.1])\n            cube([blade_w-6, 14, blade_t+0.2], center=true);\n\n        // Sharp edge teeth (simple saw pattern)\n        for (x=[-blade_w/2+2:2:blade_w/2-2])\n            translate([x, blade_h-2, blade_t/2])\n                cube([1, 2, blade_t]);\n    }\n}\n\nmodule eye_remover() {\n    // Small tab with hole at handle front\n    translate([0, handle_d/2-wall, 0])\n        rotate([0,90,0])\n            difference() {\n                hull() {\n                    cylinder(h=eye_len, d=eye_w, center=false);\n                    translate([0, eye_len, 0])\n                        sphere(d=eye_w);\n                }\n                translate([0, eye_len/2, 0])\n                    rotate([90,0,0])\n                        cylinder(h=eye_w+1, d=eye_w-2*wall, center=true);\n            }\n}\n\n// ------------- Assembly -------------\nunion() {\n    // Handle (printable horizontally)\n    handle();\n\n    // Yoke + Blade\n    translate([0, handle_d/2, handle_len-blade_h-10])\n        rotate([90,0,0])\n            union() {\n                yoke();\n                blade();\n            }\n\n    // Eye remover\n    eye_remover();\n}",
    "renders": true
  },
  {
    "household_item": "canopener",
    "openscad_code": "// Can Opener - Realistic Style, Medium Complexity\n// Overall dimensions: ~90mm length, ~25mm width, ~15mm height\n\n$fn = 36;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main grip handle\n        translate([0, 0, 2.5])\n            scale([1, 0.6, 0.5])\n                cylinder(h = 80, r = 12);\n        \n        // Grip holes for fingers\n        for(i = [0:2]) {\n            translate([-30 + i*30, 0, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, r = 3);\n        }\n    }\n}\n\n// Cutting wheel assembly\nmodule cutting_wheel() {\n    // Wheel mount\n    translate([42, 0, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 5);\n    \n    // Cutting wheel\n    translate([42, 0, 7.5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 3, r = 8);\n                // Serrated edge teeth\n                for(i = [0:15]) {\n                    rotate([0, 0, i*22.5])\n                        translate([7, 0, -1])\n                            cube([2, 1.5, 5]);\n                }\n            }\n}\n\n// Handle lever\nmodule handle_lever() {\n    union() {\n        // Main lever\n        difference() {\n            translate([-35, 0, 7.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 70, r = 4);\n            // Grip texture\n            for(i = [0:6]) {\n                translate([-65 + i*10, 0, 7.5])\n                    rotate([0, 90, 0])\n                        cylinder(h = 8, r = 3.5);\n            }\n        }\n        \n        // Lever pivot\n        translate([0, 0, 7.5])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 4.5);\n    }\n}\n\n// Bottle opener end\nmodule bottle_opener() {\n    difference() {\n        // Main opener shape\n        translate([-45, 0, 7.5])\n            rotate([0, 0, 90])\n                difference() {\n                    cube([15, 25, 5], center = true);\n                    // Curved opening\n                    translate([0, 7.5, 0])\n                        cylinder(h = 6, r = 8);\n                    // Flat edge\n                    translate([0, -7.5, 0])\n                        cube([15, 5, 6], center = true);\n                }\n        \n        // Grip hole\n        translate([-45, 0, 7.5])\n            rotate([0, 90, 0])\n                cylinder(h = 7, r = 6);\n    }\n}\n\n// Magnet holder\nmodule magnet_holder() {\n    translate([20, 0, 15])\n        difference() {\n            cylinder(h = 3, r = 6);\n            cylinder(h = 4, r = 4);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    cutting_wheel();\n    handle_lever();\n    bottle_opener();\n    magnet_holder();\n    \n    // Reinforcement ribs\n    for(i = [-20, 0, 20]) {\n        translate([i, 0, 2.5])\n            cube([5, 8, 5], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "corkscrew",
    "openscad_code": "// Realistic Medium-Complexity Corkscrew\n// Total height ~95 mm, 3D-printable with no overhangs >45°\n\n$fn = 36;\n\n// Main module\nmodule corkscrew() {\n    // Handle assembly\n    union() {\n        handle();\n        \n        // Transition collar\n        translate([0,0,75])\n            cylinder(h = 8, d1 = 14, d2 = 10, center = true);\n        \n        // Metal shaft\n        translate([0,0,42])\n            cylinder(h = 35, d = 6, center = true);\n        \n        // Helix coil\n        translate([0,0,10])\n            rotate([0,0,0])\n                helix();\n        \n        // Protective tip\n        translate([0,0,2])\n            sphere(d = 8);\n    }\n}\n\n// Handle with ergonomic grip rings\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h = 75, d = 30, center = false);\n        \n        // Grip rings\n        for (i = [0:6]) {\n            translate([0,0,5 + i*10])\n                cylinder(h = 5, d = 28, center = false);\n        }\n        \n        // Hanging hole\n        translate([0,12.5,67.5])\n            rotate([90,0,0])\n                cylinder(h = 25, d = 6, center = true);\n    }\n    \n    // Top cap\n    translate([0,0,75])\n        cylinder(h = 5, d = 32, center = false);\n}\n\n// Helical coil for cork penetration\nmodule helix() {\n    // Parameters\n    turns = 7;\n    radius = 4.5;\n    wire_d = 3.5;\n    pitch = 4;\n    \n    // Generate coil segments\n    for (i = [0:turns*20]) {\n        angle = i * 360 / (turns * 20);\n        z = i * pitch / 20;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            z\n        ])\n            rotate([90,0,angle])\n                cylinder(h = wire_d, d = wire_d, center = true);\n    }\n    \n    // Tapered end for easy insertion\n    translate([0,0,pitch*turns])\n        cylinder(h = 8, d1 = 3.5, d2 = 1.5, center = false);\n}\n\n// Render the model\ncorkscrew();",
    "renders": true
  },
  {
    "household_item": "cuttingboard",
    "openscad_code": "// Realistic medium-complexity cutting board\n// Overall dimensions: 80 mm × 50 mm × 8 mm (with juice groove)\n\n$fn = 30; // Smooth curves\n\n// Board body\nmodule board_body() {\n    difference() {\n        // Main plank\n        translate([0, 0, 4])\n            cube([80, 50, 8], center = true);\n\n        // Juice groove (2 mm deep)\n        translate([0, 0, 7.9])\n            cube([70, 40, 2], center = true);\n    }\n}\n\n// Handle slots on short ends (finger grips)\nmodule handle_slots() {\n    for (y = [-20, 20]) {\n        difference() {\n            // Cut half-cylinders for finger grips\n            translate([-40, y, 4])\n                rotate([0, 90, 0])\n                    cylinder(h = 50, d = 12, center = true);\n\n            // Ensure clean cut on board edge\n            translate([-44, y, 4])\n                cube([10, 14, 8], center = true);\n        }\n    }\n}\n\n// Rubber feet recesses (4 corners)\nmodule feet_recesses() {\n    for (x = [-30, 30])\n        for (y = [-18, 18])\n            translate([x, y, 0.5])\n                cylinder(h = 1, d = 8);\n}\n\n// Wood grain texture (shallow grooves)\nmodule wood_grain() {\n    for (i = [-35:5:35]) {\n        translate([i, 0, 7.9])\n            cube([0.5, 50, 0.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    board_body();\n    handle_slots();\n    feet_recesses();\n    wood_grain();\n}",
    "renders": true
  },
  {
    "household_item": "microwave",
    "openscad_code": "// Realistic Microwave - medium complexity\n// All dimensions in mm\n\n// Overall dimensions\nmicrowave_width = 80;\nmicrowave_depth = 60;\nmicrowave_height = 45;\nwall_thickness = 2;\n\n// Main body\nmodule main_body() {\n    // Outer shell\n    difference() {\n        // Main box\n        cube([microwave_width, microwave_depth, microwave_height], center = true);\n        \n        // Hollow out inside\n        translate([0, 0, -wall_thickness/2])\n            cube([microwave_width - 2*wall_thickness, \n                  microwave_depth - 2*wall_thickness, \n                  microwave_height - wall_thickness], center = true);\n    }\n}\n\n// Door\nmodule door() {\n    // Door frame\n    translate([-microwave_width/2 + wall_thickness, \n               microwave_depth/2 - wall_thickness, \n               0])\n        cube([microwave_width - 2*wall_thickness, wall_thickness*2, microwave_height - 10]);\n    \n    // Glass window\n    translate([-microwave_width/2 + wall_thickness + 3, \n               microwave_depth/2 - wall_thickness/2, \n               5])\n        cube([microwave_width - 2*wall_thickness - 6, wall_thickness, microwave_height - 20]);\n    \n    // Door handle\n    translate([-microwave_width/2 + wall_thickness + 5, \n               microwave_depth/2 + 3, \n               -5])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2, $fn=16);\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel background\n    translate([microwave_width/2 - 15, 0, microwave_height/2 - 15])\n        cube([15, microwave_depth - 20, 15]);\n    \n    // Display screen\n    translate([microwave_width/2 - 13, -10, microwave_height/2 - 5])\n        cube([11, 20, 5]);\n    \n    // Buttons\n    for(x = [microwave_width/2 - 12, microwave_width/2 - 8, microwave_width/2 - 4]) {\n        translate([x, 0, microwave_height/2 - 12])\n            cylinder(h=2, r=1.5, $fn=16);\n    }\n    \n    // Knob\n    translate([microwave_width/2 - 10, 10, microwave_height/2 - 12])\n        cylinder(h=3, r=3, $fn=20);\n}\n\n// Ventilation grilles\nmodule vents() {\n    // Top vents\n    for(i = [1:3:microwave_width - 10]) {\n        translate([-microwave_width/2 + 5 + i, \n                   microwave_depth/2 - wall_thickness, \n                   microwave_height/2 - 5])\n            cube([2, wall_thickness, 1]);\n    }\n    \n    // Side vents\n    for(i = [1:3:10]) {\n        translate([microwave_width/2 - wall_thickness, \n                   -microwave_depth/2 + 5 + i, \n                   microwave_height/2 - 5])\n            cube([wall_thickness, 2, 1]);\n    }\n}\n\n// Feet\nmodule feet() {\n    foot_size = 3;\n    foot_height = 2;\n    \n    translate([microwave_width/2 - 10, microwave_depth/2 - 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([-microwave_width/2 + 10, microwave_depth/2 - 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([microwave_width/2 - 10, -microwave_depth/2 + 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([-microwave_width/2 + 10, -microwave_depth/2 + 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n}\n\n// Assembly\nunion() {\n    main_body();\n    door();\n    control_panel();\n    vents();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "oven",
    "openscad_code": "// Realistic medium-complexity 3D-printable oven model\n// External dimensions: 80 x 70 x 70 mm\n\n$fn = 32;\n\nmodule roundedBox(s, r) {\n    translate([0,0,r]) {\n        difference() {\n            hull() {\n                for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n                    translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n                        sphere(r);\n            }\n            translate([0,-s.y/2-1,0])\n                cube([s.x+2, 2, s.z+2], center=true);\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        roundedBox([80,70,70], 4);\n        // Hollow out\n        translate([0,0,5])\n            roundedBox([74,66,60], 3);\n    }\n}\n\nmodule door() {\n    difference() {\n        translate([-40.5,0,35])\n            cube([3, 60, 50], center=true);\n        // Window cutout\n        translate([-42,0,40])\n            cube([2, 40, 30], center=true);\n    }\n    // Handle bar\n    translate([-42,0,10])\n        rotate([0,90,0])\n            cylinder(h=30, d=6);\n}\n\nmodule knobRow(y, z, n) {\n    for(i=[-(n-1)/2:(n-1)/2]) {\n        translate([40, y+i*12, z])\n            rotate([90,0,0])\n                cylinder(h=6, d1=8, d2=6);\n    }\n}\n\nmodule feet() {\n    for(x=[-30, 30], y=[-25, 25]) {\n        translate([x,y,-3])\n            cylinder(h=6, d=8);\n    }\n}\n\nmodule ventSlits() {\n    for(i=[-2:2]) {\n        translate([0, 35.5, 55+i*6])\n            cube([70, 2, 2]);\n    }\n}\n\nmodule rack() {\n    color(\"silver\")\n    difference() {\n        translate([0,0,25])\n            cube([70, 60, 1], center=true);\n        for(x=[-25:10:25], y=[-20:10:20]) {\n            translate([x,y,25.5])\n                cylinder(h=2, d=3);\n        }\n    }\n}\n\nmodule oven() {\n    union() {\n        body();\n        door();\n        knobRow(0, 55, 3);\n        feet();\n        ventSlits();\n        rack();\n    }\n}\n\noven();",
    "renders": true
  },
  {
    "household_item": "stove",
    "openscad_code": "// Realistic medium-complexity 3D printable stove model\n// Overall size ~90 mm wide × 70 mm deep × 50 mm tall\n// All walls ≥2 mm for printability\n\n$fn = 32;  // Smooth curves\n\nmodule body() {\n    // Main stove body with rounded corners\n    difference() {\n        minkowski() {\n            cube([80, 60, 40], center = true);\n            sphere(3);\n        }\n        // Hollow inside\n        translate([0, 0, 2])\n            cube([76, 56, 40], center = true);\n    }\n}\n\nmodule cooktop() {\n    // Top plate with burner recesses\n    difference() {\n        translate([0, 0, 22])\n            cube([82, 62, 4], center = true);\n        // Recesses for burners\n        for (x = [-25, 25])\n            for (y = [-15, 15])\n                translate([x, y, 24])\n                    cylinder(h = 3, r = 12);\n    }\n}\n\nmodule burner_grate() {\n    // Four burner grates\n    for (x = [-25, 25])\n        for (y = [-15, 15]) {\n            translate([x, y, 26])\n                difference() {\n                    cylinder(h = 2, r = 12);\n                    cylinder(h = 3, r = 10);\n                }\n            // Grate bars\n            for (i = [-8:4:8])\n                translate([x + i, y, 26.5])\n                    cube([2, 22, 1], center = true);\n            for (j = [-8:4:8])\n                translate([x, y + j, 26.5])\n                    cube([22, 2, 1], center = true);\n        }\n}\n\nmodule burner_head() {\n    // Gas burner caps\n    color(\"darkgray\")\n    for (x = [-25, 25])\n        for (y = [-15, 15]) {\n            translate([x, y, 24])\n                cylinder(h = 2, r = 8);\n            // Flame spreader holes\n            for (a = [0:30:359])\n                rotate([0, 0, a])\n                    translate([x + 6, y, 24.5])\n                        cylinder(h = 1, r = 1);\n        }\n}\n\nmodule knobs() {\n    // Four control knobs on front panel\n    for (i = [0:3])\n        translate([-30 + i*20, 32, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 6, r = 5);\n                    translate([0, 0, -1])\n                        cylinder(h = 8, r = 4);\n                    // Indicator line\n                    translate([4.5, 0, 3])\n                        cube([1, 0.5, 6], center = true);\n                }\n}\n\nmodule door() {\n    // Oven door with handle\n    translate([0, -32, -5])\n        difference() {\n            // Door panel\n            cube([70, 4, 35], center = true);\n            // Window\n            translate([0, 1, 8])\n                cube([50, 2, 20], center = true);\n            // Handle cutouts\n            translate([0, 3, -12])\n                cube([60, 2, 4], center = true);\n        }\n    // Handle bar\n    translate([0, -30, -12])\n        rotate([90, 0, 0])\n            cylinder(h = 60, r = 2);\n}\n\nmodule feet() {\n    // Four rubber feet\n    for (x = [-35, 35])\n        for (y = [-25, 25])\n            translate([x, y, -22])\n                cylinder(h = 4, r = 3);\n}\n\n// Assemble the stove\nunion() {\n    body();\n    cooktop();\n    burner_grate();\n    burner_head();\n    knobs();\n    door();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "refrigerator",
    "openscad_code": "// Refrigerator - Realistic Style, Medium Complexity\n// Overall dimensions: 45mm x 40mm x 90mm (HxDxW)\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([45, 40, 90], center = true);\n        \n        // Hollow interior\n        translate([0, 2, 0])\n            cube([41, 34, 86], center = true);\n    }\n}\n\n// Refrigerator door\nmodule door() {\n    difference() {\n        // Main door panel\n        translate([0, 20.5, 0])\n            cube([43, 1, 88], center = true);\n        \n        // Door inner recess\n        translate([0, 21, 0])\n            cube([41, 0.5, 86], center = true);\n    }\n}\n\n// Handle\nmodule handle() {\n    // Vertical bar\n    translate([15, 21.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 3, d2 = 3, center = true);\n    \n    // Top grip\n    translate([15, 21.5, 30])\n        cube([6, 2, 2], center = true);\n    \n    // Bottom grip\n    translate([15, 21.5, 10])\n        cube([6, 2, 2], center = true);\n}\n\n// Hinges\nmodule hinges() {\n    for(z = [-35, 35]) {\n        translate([-22.5, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 2.5, center = true);\n    }\n}\n\n// Feet\nmodule feet() {\n    for(x = [-15, 15])\n        translate([x, -20, -45])\n            cylinder(h = 5, r1 = 3, r2 = 2, center = true);\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel base\n    translate([18, 20.5, 35])\n        cube([8, 0.5, 15], center = true);\n    \n    // Buttons\n    for(i = [0:2]) {\n        translate([15, 21, 30 + i * 5])\n            cylinder(h = 0.5, r = 1, center = true);\n    }\n    \n    // Display\n    translate([21, 21, 35])\n        cube([4, 0.5, 8], center = true);\n}\n\n// Grille at bottom\nmodule grille() {\n    translate([0, -15, -45])\n        difference() {\n            cube([40, 5, 15], center = true);\n            for(i = [-6:3:6]) {\n                translate([i, -12.5, -45])\n                    cube([1, 5, 15], center = true);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    door();\n    handle();\n    hinges();\n    feet();\n    control_panel();\n    grille();\n}",
    "renders": true
  },
  {
    "household_item": "freezer",
    "openscad_code": "// Upright freezer, ~80 mm tall\n// All dimensions in mm; wall thickness = 2 mm everywhere for 3D-printability\n\n// Overall outer dimensions\n$fn = 32;\noverall_w = 35;\noverall_d = 30;\noverall_h = 80;\n\n// Wall thickness\nwall = 2;\n\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([overall_w, overall_d, overall_h]);\n        // Hollow inside\n        translate([wall, wall, wall])\n            cube([overall_w-2*wall, overall_d-2*wall, overall_h-wall]);\n    }\n}\n\nmodule door() {\n    difference() {\n        // Solid door\n        translate([overall_w, 0, 0])\n            cube([wall, overall_d, overall_h]);\n        // Recessed inner face\n        translate([overall_w + 0.5, wall, wall])\n            cube([wall - 1, overall_d - 2*wall, overall_h - 2*wall]);\n    }\n    \n    // Handle bar\n    translate([overall_w + wall + 1, overall_d/2 - 1, overall_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 2);\n}\n\nmodule shelf() {\n    thickness = 1.5;\n    lip = 1;\n    difference() {\n        cube([overall_w - 4*wall, overall_d - 2*wall - 2*lip, thickness]);\n        // Lightening slots\n        for (x = [wall : 6 : overall_w - 6*wall])\n            translate([x, 0, -0.1])\n                cube([1, overall_d - 2*wall - 2*lip, thickness + 0.2]);\n    }\n}\n\nmodule shelves() {\n    shelf_spacing = 18;\n    shelf_h_start = 8;\n    for (i = [0 : 1 : 2])\n        translate([2*wall, wall, shelf_h_start + i*shelf_spacing])\n            shelf();\n}\n\nmodule hinges() {\n    pin_r = 1.5;\n    pin_h = 4;\n    // Top hinge\n    translate([overall_w, overall_d/2, overall_h - 2])\n        rotate([90, 0, 0])\n            cylinder(h = pin_h, r = pin_r);\n    // Bottom hinge\n    translate([overall_w, overall_d/2, 2])\n        rotate([90, 0, 0])\n            cylinder(h = pin_h, r = pin_r);\n}\n\nmodule feet() {\n    foot_r = 2;\n    foot_h = 3;\n    for (x = [wall : overall_w - 2*wall : overall_w - 4*wall])\n        for (y = [wall : overall_d - 2*wall : overall_d - 4*wall])\n            translate([x, y, -foot_h])\n                cylinder(h = foot_h, r = foot_r);\n}\n\nunion() {\n    body();\n    door();\n    hinges();\n    shelves();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "dishwasher",
    "openscad_code": "// Dishwasher - Realistic Style, Medium Complexity\n// Approx 70mm tall x 60mm wide x 60mm deep\n\n// Main body dimensions\nbody_width = 60;\nbody_depth = 58;\nbody_height = 68;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main dishwasher body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([body_width, body_depth, body_height], center=false);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([body_width-wall*2, body_depth-wall*2, body_height-wall*2], center=false);\n    }\n}\n\n// Front panel with door\nmodule front_door() {\n    // Door panel\n    translate([0, body_depth-wall, 0])\n        cube([body_width, wall, body_height], center=false);\n    \n    // Door handle\n    translate([body_width/2-15, body_depth+1, body_height/2+10])\n        cube([30, 3, 5], center=false);\n}\n\n// Control panel on top\nmodule control_panel() {\n    difference() {\n        // Panel base\n        translate([5, body_depth-10, body_height-5])\n            cube([body_width-10, 10, 5], center=false);\n        \n        // Buttons\n        for(i = [0:3]) {\n            translate([10 + i*12, body_depth-7, body_height-2])\n                cube([6, 4, 2], center=false);\n        }\n        \n        // Display window\n        translate([body_width/2-8, body_depth-8, body_height-2])\n            cube([16, 6, 2], center=false);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    for(x = [10, body_width-15]) {\n        for(y = [10, body_depth-15]) {\n            translate([x, y, -4])\n                cylinder(h=4, r=3, center=false);\n        }\n    }\n}\n\n// Air vent on front\nmodule vent() {\n    translate([body_width/2-10, body_depth-wall, body_height-15])\n        difference() {\n            cube([20, wall+1, 10], center=false);\n            for(i = [0:3]) {\n                translate([body_width/2-8 + i*4, body_depth-wall, body_height-13])\n                    cube([2, wall+2, 6], center=false);\n            }\n        }\n}\n\n// Water inlet on back\nmodule water_inlet() {\n    translate([body_width-10, 5, 30])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, center=false);\n}\n\n// Bottom spray arm (simplified)\nmodule spray_arm() {\n    translate([body_width/2-5, body_depth/2-5, 10])\n        cube([10, body_depth-20, 1], center=false);\n}\n\n// Main assembly\nunion() {\n    body();\n    front_door();\n    control_panel();\n    feet();\n    vent();\n    water_inlet();\n    spray_arm();\n}",
    "renders": true
  },
  {
    "household_item": "sink",
    "openscad_code": "// Realistic medium-complexity 3D-printable sink model\n// Overall size ≈ 85 mm wide × 60 mm deep × 30 mm high\n\n$fn = 36;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule basin() {\n    difference() {\n        // Outer shell\n        cube([80, 55, 25]);\n        \n        // Inner cavity\n        translate([wall, wall, -1])\n        cube([80 - 2*wall, 55 - 2*wall, 25 - wall + 1]);\n        \n        // Drain slope front\n        translate([wall, wall, 12])\n        rotate([0, 15, 0])\n        cube([80 - 2*wall, 55 - 2*wall, 20]);\n        \n        // Drain slope back\n        translate([wall, wall, 12])\n        rotate([0, -15, 0])\n        cube([80 - 2*wall, 55 - 2*wall, 20]);\n    }\n}\n\nmodule drain() {\n    difference() {\n        // Drain collar\n        cylinder(h = 3, d1 = 12, d2 = 10);\n        \n        // Drain hole\n        translate([0, 0, -1])\n        cylinder(h = 5, d = 6);\n    }\n}\n\nmodule faucet_base() {\n    difference() {\n        // Solid block\n        cube([20, 15, 8]);\n        \n        // Mount holes\n        for (x = [-7, 7])\n            translate([x, 15/2, -1])\n            cylinder(h = 10, d = 3.5);\n    }\n}\n\nmodule faucet_spout() {\n    difference() {\n        union() {\n            // Vertical pipe\n            cylinder(h = 22, d = 6);\n            \n            // Horizontal spout\n            translate([0, 0, 22])\n            rotate([90, 0, 0])\n            cylinder(h = 25, d = 6);\n            \n            // Spout end\n            translate([0, 25, 22])\n            rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4);\n        }\n        \n        // Waterway\n        translate([0, 0, -1])\n        cylinder(h = 56, d = 3);\n    }\n}\n\nmodule overflow_holes() {\n    // Two small overflow slots at back\n    for (y = [-5, 5])\n        translate([-wall/2, 55/2 + y, 12])\n        cube([wall, 2, 8]);\n}\n\n// Build the sink\nunion() {\n    // Main basin\n    basin();\n    \n    // Drain at bottom center\n    translate([80/2, 55/2, 0])\n    drain();\n    \n    // Overflow slots in back wall\n    overflow_holes();\n    \n    // Faucet assembly rear left\n    translate([5, 5, 25])\n    union() {\n        faucet_base();\n        translate([10, 7.5, 8])\n        faucet_spout();\n    }\n    \n    // Side ribs for strength\n    for (x = [5, 75])\n        translate([x - wall/2, 0, 0])\n        cube([wall, 55, 25]);\n}",
    "renders": true
  },
  {
    "household_item": "faucet",
    "openscad_code": "// Realistic medium-complexity faucet – OpenSCAD\n// Approx. 90 mm tall, 3 mm wall thickness everywhere\n\n$fn = 36;\n\nmodule rounded_cube(size, r)\n{\n    // Helper for a cube with rounded vertical edges\n    hull()\n    {\n        translate([r, r, 0]) cube([size.x - 2*r, size.y - 2*r, size.z]);\n        translate([r, r, r]) sphere(r);\n        translate([size.x - r, r, r]) sphere(r);\n        translate([r, size.y - r, r]) sphere(r);\n        translate([size.x - r, size.y - r, r]) sphere(r);\n        translate([r, r, size.z - r]) sphere(r);\n        translate([size.x - r, r, size.z - r]) sphere(r);\n        translate([r, size.y - r, size.z - r]) sphere(r);\n        translate([size.x - r, size.y - r, size.z - r]) sphere(r);\n    }\n}\n\n// Base plate\nmodule base()\n{\n    difference()\n    {\n        rounded_cube([40, 40, 8], 4);\n        // Mounting holes\n        for (x = [-15, 15])\n            for (y = [-15, 15])\n                translate([x + 20, y + 20, -1])\n                    cylinder(h = 10, d = 5);\n    }\n}\n\n// Vertical pipe body\nmodule body()\n{\n    difference()\n    {\n        translate([20, 20, 8])\n            cylinder(h = 60, d1 = 18, d2 = 22);\n        // Internal hollow\n        translate([20, 20, -1])\n            cylinder(h = 70, d = 12);\n    }\n}\n\n// Horizontal spout\nmodule spout()\n{\n    difference()\n    {\n        union()\n        {\n            // Main curved spout\n            hull()\n            {\n                translate([20, 20, 65])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, d = 16);\n                translate([20 + 45, 20, 55])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, d = 14);\n            }\n            // Aerator tip\n            translate([20 + 50, 20, 55])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 12);\n        }\n        // Internal bore\n        hull()\n        {\n            translate([20, 20, 65])\n                rotate([0, 90, 0])\n                    cylinder(h = 6, d = 8);\n            translate([20 + 45, 20, 55])\n                rotate([0, 90, 0])\n                    cylinder(h = 6, d = 8);\n        }\n    }\n}\n\n// Handle\nmodule handle()\n{\n    difference()\n    {\n        // Lever arm\n        translate([20, 20 + 11, 68])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 8);\n        // Shaft hole\n        translate([20, 20 + 11, 68])\n            rotate([90, 0, 0])\n                cylinder(h = 32, d = 4);\n    }\n    // Grip knob\n    translate([20, 20 + 11, 68 + 30])\n    {\n        difference()\n        {\n            sphere(d = 14);\n            sphere(d = 10);\n        }\n    }\n}\n\n// Assembly\nunion()\n{\n    base();\n    body();\n    spout();\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "cabinet",
    "openscad_code": "// Realistic Cabinet - Medium Complexity (3D-Printable)\n\n$fn=32; // Smooth curves for 3D printing\n\n// Overall dimensions\ncabinet_width = 80;\ncabinet_depth = 40;\ncabinet_height = 60;\nwall_thickness = 2;\ndoor_thickness = 1.5;\n\nmodule cabinet_body() {\n    difference() {\n        // Main outer shell\n        cube([cabinet_width, cabinet_depth, cabinet_height], center=false);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([\n                cabinet_width - 2*wall_thickness,\n                cabinet_depth - 2*wall_thickness,\n                cabinet_height - wall_thickness\n            ], center=false);\n    }\n}\n\nmodule cabinet_back() {\n    // Solid back panel\n    translate([0, 0, 0])\n        cube([cabinet_width, wall_thickness, cabinet_height], center=false);\n}\n\nmodule shelf() {\n    // Single shelf positioned at 60% height\n    translate([wall_thickness, wall_thickness, cabinet_height * 0.6])\n        cube([\n            cabinet_width - 2*wall_thickness,\n            cabinet_depth - 2*wall_thickness,\n            wall_thickness\n        ], center=false);\n}\n\nmodule door_handle() {\n    // Cylindrical door handle\n    translate([cabinet_width - 8, cabinet_depth - door_thickness - 3, cabinet_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d1=4, d2=4, center=false);\n}\n\nmodule cabinet_door() {\n    // Hinged door with panel detail\n    difference() {\n        // Main door panel\n        translate([cabinet_width - door_thickness, 0, 0])\n            cube([door_thickness, cabinet_depth, cabinet_height], center=false);\n        \n        // Recessed panel detail\n        translate([cabinet_width - door_thickness + 0.5, wall_thickness, wall_thickness*2])\n            cube([\n                door_thickness - 1,\n                cabinet_depth - 2*wall_thickness,\n                cabinet_height - 4*wall_thickness\n            ], center=false);\n        \n        // Handle hole (for printing as separate piece)\n        translate([cabinet_width - door_thickness/2, cabinet_depth - 3, cabinet_height/2])\n            cylinder(h=door_thickness + 1, d=2.5, center=true);\n    }\n}\n\nmodule base_trim() {\n    // Decorative base trim\n    for(i=[0, 1]) {\n        // Left and right trim pieces\n        translate([i * (cabinet_width - wall_thickness*2), -1, -2])\n            cube([wall_thickness*2, cabinet_depth + 2, 2], center=false);\n    }\n    \n    // Front trim piece\n    translate([0, -1, -2])\n        cube([cabinet_width, wall_thickness*2, 2], center=false);\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    cabinet_back();\n    shelf();\n    cabinet_door();\n    door_handle();\n    base_trim();\n}",
    "renders": true
  },
  {
    "household_item": "drawer",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Drawer\n// Overall size: 60 mm (W) x 50 mm (D) x 40 mm (H)\n// Wall thickness: 2 mm\n\n$fn = 32;\n\n// Outer carcase\nmodule carcase() {\n    difference() {\n        // Main shell\n        translate([0, 0, 20])\n            cube([60, 50, 40], center = true);\n        // Hollow space\n        translate([0, 0, 21])\n            cube([56, 46, 38], center = true);\n    }\n}\n\n// Drawer box\nmodule drawer_box() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 15])\n            cube([54, 44, 30], center = true);\n        // Inner cavity\n        translate([0, 0, 15])\n            cube([50, 40, 28], center = true);\n    }\n}\n\n// Drawer front panel\nmodule drawer_front() {\n    difference() {\n        // Front plate\n        translate([0, 25, 15])\n            cube([58, 2, 34], center = true);\n        // Recessed handle\n        translate([0, 26, 15])\n            cube([40, 0.5, 10], center = true);\n    }\n}\n\n// Handle bar\nmodule handle_bar() {\n    translate([0, 26.5, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 38, d = 6, center = true);\n}\n\n// Bottom runners for drawer\nmodule runners() {\n    for (x = [-20, 20]) {\n        translate([x, -10, 0])\n            cube([2, 50, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    carcase();\n    runners();\n    drawer_box();\n    drawer_front();\n    handle_bar();\n}",
    "renders": true
  },
  {
    "household_item": "shelf",
    "openscad_code": "// Realistic medium-complexity shelf\n// Overall dimensions: 80mm wide x 40mm deep x 30mm high\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32; // smooth curves\n\n// Material thickness constant\nth = 2;\n\n// Shelf parameters\nshelf_w = 80;\nshelf_d = 40;\nshelf_h = 30;\n\n// Shelf board module\nmodule shelf_board(w, d, h) {\n    difference() {\n        // Main board\n        cube([w, d, h], center=true);\n        // Hollow out underside\n        translate([0, 0, -h/2 + th])\n            cube([w - 2*th, d - 2*th, th], center=true);\n    }\n}\n\n// Support bracket module\nmodule bracket() {\n    union() {\n        // Vertical support\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, 0])\n            cube([th, th, shelf_h]);\n        // Horizontal support\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, shelf_h/2 - th/2])\n            cube([th, shelf_d - 10, th]);\n        // Diagonal brace\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, shelf_h/4])\n            rotate([0, 0, 45])\n            cube([th*1.414, shelf_d/2 - 5, th]);\n    }\n}\n\n// Back panel module\nmodule back_panel() {\n    translate([0, -shelf_d/2 + th/2, shelf_h/2])\n        cube([shelf_w, th, shelf_h], center=true);\n}\n\n// Screw hole module\nmodule screw_hole() {\n    cylinder(h=th+0.1, d=3, center=true);\n}\n\n// Main shelf assembly\nunion() {\n    // Shelf surface\n    translate([0, 0, shelf_h/2])\n        shelf_board(shelf_w, shelf_d, th);\n    \n    // Bottom shelf\n    translate([0, 0, 0])\n        shelf_board(shelf_w, shelf_d, th);\n    \n    // Back panel\n    back_panel();\n    \n    // Support brackets - 4 corners\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            translate([x * (shelf_w/2 - 5), y * (shelf_d/2 - 5), 0])\n                bracket();\n        }\n    }\n    \n    // Mounting holes in back panel\n    for(i=[-1, 0, 1]) {\n        translate([i * 20, -shelf_d/2 + th/2, shelf_h - 5])\n            rotate([0, 90, 0])\n            screw_hole();\n    }\n    \n    // Rounded front edge\n    translate([0, shelf_d/2 - 1, shelf_h/2 + th/2])\n        cylinder(h=shelf_w, d=2, center=true);\n    \n    // Small lip at front\n    translate([0, shelf_d/2 - 1.5, shelf_h/2 - 1])\n        cube([shelf_w, 1, 2], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "jar",
    "openscad_code": "// Realistic medium-complexity 3D-printable jar\n// Overall dimensions: ~70 mm tall, ~50 mm wide\n// Wall thickness: 2 mm for 3D printing\n\n$fa = 2; $fs = 0.5;\n\n// Parameters\njar_height = 70;\njar_radius = 25;\nwall = 2;\nthreads_pitch = 3;\nthreads_depth = 1.5;\nthreads_turns = 1.5;\ncap_thick = 8;\nbase_thick = 4;\n\n// Main jar body\nmodule jar_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = jar_height - base_thick, r = jar_radius, $fn = 64);\n        \n        // Hollow inside\n        translate([0, 0, -0.1])\n            cylinder(h = jar_height - base_thick + 0.2, r = jar_radius - wall, $fn = 64);\n        \n        // Thread cutout\n        translate([0, 0, jar_height - base_thick - threads_turns * threads_pitch])\n            cylinder(h = threads_turns * threads_pitch + 1, r = jar_radius - wall + threads_depth, $fn = 64);\n    }\n    \n    // Solid base\n    translate([0, 0, 0])\n        cylinder(h = base_thick, r = jar_radius, $fn = 64);\n}\n\n// Threads on jar neck\nmodule jar_threads() {\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 60])\n            translate([jar_radius - wall - threads_depth, 0, jar_height - base_thick - threads_turns * threads_pitch])\n                linear_extrude(height = threads_turns * threads_pitch, twist = threads_turns * 360, scale = 1, $fn = 32)\n                    square([threads_depth, threads_pitch / 6], center = false);\n    }\n}\n\n// Cap\nmodule cap() {\n    difference() {\n        union() {\n            // Top dome\n            translate([0, 0, cap_thick + 1])\n                scale([1, 1, 0.7])\n                    sphere(r = jar_radius + wall, $fn = 64);\n            \n            // Cylindrical ring\n            cylinder(h = cap_thick + 1, r = jar_radius + wall, $fn = 64);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h = cap_thick + 1.2, r = jar_radius, $fn = 64);\n        \n        // Thread cavity\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n                translate([jar_radius - wall, 0, 0])\n                    linear_extrude(height = threads_turns * threads_pitch, twist = -threads_turns * 360, scale = 1, $fn = 32)\n                        square([threads_depth, threads_pitch / 6], center = false);\n        }\n    }\n    \n    // Grip ridges on the outside\n    for (i = [0 : 35]) {\n        rotate([0, 0, i * 10])\n            translate([jar_radius + wall - 0.5, 0, cap_thick / 2])\n                cube([1, 1.5, cap_thick - 2], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_thick]) {\n    jar_body();\n    jar_threads();\n}\ntranslate([0, 0, jar_height - base_thick + 2]) {\n    cap();\n}",
    "renders": true
  },
  {
    "household_item": "bottle",
    "openscad_code": "// Realistic medium-complexity 3D-printable bottle\n// Height ≈ 90 mm, Ø ≈ 45 mm, wall 2 mm\n\n$fn = 36; // smooth curves\n\n// Overall dimensions\nH_total = 90;\nR_body = 22.5;\nwall = 2;\n\n// Bottle module\nmodule bottle() {\n    difference() {\n        union() {\n            // Main body\n            body();\n\n            // Shoulder transition\n            shoulder();\n\n            // Neck\n            neck();\n\n            // Base\n            base();\n        }\n        // Hollow interior\n        translate([0,0,wall])\n            scale([1,1,0.96])\n                body();\n        translate([0,0,wall])\n            scale([0.8,0.8,0.85])\n                shoulder();\n        translate([0,0,wall])\n            scale([0.55,0.55,0.8])\n                neck();\n    }\n\n    // Threads for cap\n    threads();\n}\n\n// Main cylindrical body\nmodule body() {\n    cylinder(h = H_total*0.65, r1 = R_body, r2 = R_body*0.9);\n}\n\n// Curved shoulder\nmodule shoulder() {\n    translate([0,0,H_total*0.65])\n        cylinder(h = H_total*0.15, r1 = R_body*0.9, r2 = R_body*0.6);\n}\n\n// Neck with lip\nmodule neck() {\n    translate([0,0,H_total*0.8])\n        union() {\n            cylinder(h = H_total*0.15, r1 = R_body*0.6, r2 = R_body*0.45);\n            // Lip ring\n            translate([0,0,H_total*0.15])\n                cylinder(h = 2, r1 = R_body*0.48, r2 = R_body*0.48);\n        }\n}\n\n// Reinforced base\nmodule base() {\n    difference() {\n        cylinder(h = 3, r1 = R_body+0.5, r2 = R_body+0.5);\n        for(i=[0:5:360])\n            rotate([0,0,i])\n                translate([R_body-1, -1, 0])\n                    cube([2, 2, 3]);\n    }\n}\n\n// External screw threads for cap\nmodule threads() {\n    for(z=[0:2.5:15])\n        translate([0,0,H_total*0.95 + z])\n            rotate_extrude()\n                translate([R_body*0.45, 0, 0])\n                    square([1.5, 2]);\n}\n\n// Generate bottle\nbottle();",
    "renders": true
  },
  {
    "household_item": "jug",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Jug\n// Overall height ≈ 85 mm, max Ø ≈ 60 mm, wall ≈ 1.5 mm\n\nwall = 1.5;        // wall thickness\nbase_r = 30;       // base radius\nbody_h = 55;       // main body height\nneck_r = 12;       // neck radius\nspout_l = 25;      // spout length\nhandle_clear = 15; // handle clearance\n\nmodule jug() {\n    difference() {\n        // ---------- Outer shell ----------\n        union() {\n            // Base\n            cylinder(h = 5, r1 = base_r, r2 = base_r, $fn = 60);\n\n            // Bulging body\n            translate([0, 0, 2.5])\n                cylinder(h = body_h, r1 = base_r, r2 = base_r * 0.9, $fn = 60);\n\n            // Neck cylinder\n            translate([0, 0, 2.5 + body_h])\n                cylinder(h = 15, r1 = neck_r + 2, r2 = neck_r, $fn = 60);\n\n            // Spout\n            translate([neck_r, 0, 2.5 + body_h + 15])\n                rotate([0, 75, 0])\n                    cylinder(h = spout_l, r1 = 5, r2 = 3, $fn = 30);\n\n            // Handle arch\n            translate([-base_r - 3, 0, 20])\n                rotate([90, 0, 0])\n                    difference() {\n                        rotate_extrude($fn = 60)\n                            translate([handle_clear, 0, 0])\n                                square([wall, 30]);\n                        // Finger groove\n                        translate([handle_clear + wall/2, 0, 10])\n                            rotate([90, 0, 0])\n                                cylinder(h = wall + 1, r = 4, $fn = 20);\n                    }\n        }\n\n        // ---------- Inner cavity ----------\n        translate([0, 0, wall])\n            cylinder(h = 100, r1 = base_r - wall, r2 = neck_r - wall, $fn = 60);\n\n        // Spout hollow\n        translate([neck_r, 0, 2.5 + body_h + 15])\n            rotate([0, 75, 0])\n                cylinder(h = spout_l + 2, r1 = 5 - wall, r2 = 3 - wall, $fn = 30);\n\n        // Drain hole through handle\n        translate([-base_r - 3 - wall, 0, 20 + 15])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = wall, $fn = 20);\n    }\n}\n\njug();",
    "renders": true
  },
  {
    "household_item": "pitcher",
    "openscad_code": "// Realistic medium-complexity pitcher for 3D printing\n// Approx 90 mm tall, 60 mm wide (printable size)\n\n$fn = 36;\n\n// Main body parameters\nbody_h = 75;\nbody_r_bottom = 25;\nbody_r_top = 30;\nwall_th = 2;\n\n// Spout parameters\nspout_len = 35;\nspout_r = 8;\nspout_wall = 2;\n\n// Handle parameters\nhandle_r = 5;\nhandle_clearance = 15;\n\n// Pitcher assembly\nmodule pitcher() {\n    difference() {\n        union() {\n            // Main hollow body\n            difference() {\n                // Outer body\n                cylinder(h = body_h, r1 = body_r_bottom, r2 = body_r_top, center = false);\n                \n                // Inner cavity\n                translate([0, 0, wall_th])\n                cylinder(h = body_h + 1, r1 = body_r_bottom - wall_th, r2 = body_r_top - wall_th, center = false);\n            }\n            \n            // Bottom base\n            translate([0, 0, -2])\n            cylinder(h = 4, r1 = body_r_bottom + 3, r2 = body_r_bottom, center = false);\n            \n            // Spout outer\n            translate([0, body_r_top, body_h - 15])\n            rotate([90, 0, 0])\n            rotate_extrude(angle = 90, convexity = 10)\n            translate([spout_r, 0, 0])\n            circle(r = spout_r);\n            \n            // Handle outer\n            translate([body_r_top - 2, 0, body_h/2])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180, convexity = 10)\n            translate([handle_r + handle_clearance, 0, 0])\n            circle(r = handle_r);\n        }\n        \n        // Remove spout inner\n        translate([0, body_r_top - spout_wall, body_h - 15])\n        rotate([90, 0, 0])\n        rotate_extrude(angle = 90, convexity = 10)\n        translate([spout_r - spout_wall, 0, 0])\n        circle(r = spout_r - spout_wall);\n        \n        // Remove handle inner\n        translate([body_r_top - 2, 0, body_h/2])\n        rotate([0, 90, 0])\n    rotate_extrude(angle = 180, convexity = 10)\n    translate([handle_clearance, 0, 0])\n    circle(r = handle_r - wall_th);\n        \n        // Top rim rounding\n        translate([0, 0, body_h - 5])\n        cylinder(h = 6, r1 = body_r_top - wall_th, r2 = body_r_top - wall_th - 1, center = false);\n    }\n    \n    // Add rim lip\n    translate([0, 0, body_h - 1])\n    cylinder(h = 2, r1 = body_r_top + 1, r2 = body_r_top + 1, center = false);\n}\n\n// Render the pitcher\npitcher();",
    "renders": true
  },
  {
    "household_item": "thermos",
    "openscad_code": "// Realistic Thermos - Medium Complexity\n// Approx 80mm tall, 3D printable with no overhangs\n\n$fn = 36;  // Smooth curves for printing\nwall_thickness = 1.5;\n\nmodule thermos_body() {\n    // Main outer shell\n    difference() {\n        cylinder(h = 65, d = 45, center = false);  // Outer body\n        translate([0, 0, -1])\n            cylinder(h = 67, d = 42, center = false);  // Hollow inside\n    }\n    \n    // Bottom base - slightly wider for stability\n    translate([0, 0, -3])\n        cylinder(h = 4, d = 48, center = false);\n}\n\nmodule thermos_lid() {\n    // Lid top dome\n    difference() {\n        translate([0, 0, 65])\n            scale([1, 1, 0.7])\n                sphere(d = 45);  // Rounded top\n        \n        translate([0, 0, 65])\n            scale([1, 1, 0.7])\n                sphere(d = 42);  // Hollow inside\n    }\n    \n    // Lid threading collar\n    translate([0, 0, 62])\n        cylinder(h = 5, d = 42.5, center = false);\n    \n    // Handle attachment points\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle])\n            translate([22, 0, 68])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 3, center = false);\n    }\n}\n\nmodule handle() {\n    // Curved handle\n    for (i = [0:6]) {\n        rotate([0, 0, i * 30 - 90])\n            translate([24, 0, 68 + i * 0.8])\n                sphere(d = 3.5);\n    }\n    \n    // Handle bottom curve\n    translate([24, 0, 68])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 3.5, center = false);\n    \n    translate([-24, 0, 68])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 3.5, center = false);\n    \n    // Handle bar\n    translate([0, 0, 52.5])\n        rotate([90, 0, 0])\n            cylinder(h = 48, d = 3.5, center = true);\n}\n\nmodule decorative_band() {\n    // Top band with grooves\n    translate([0, 0, 62])\n        cylinder(h = 2, d = 46, center = false);\n    \n    // Grooves\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([22.5, 0, 62.5])\n                cube([1, 1, 2], center = true);\n    }\n    \n    // Bottom band\n    translate([0, 0, 3])\n        cylinder(h = 2, d = 46, center = false);\n}\n\n// Assembly\nunion() {\n    thermos_body();\n    thermos_lid();\n    handle();\n    decorative_band();\n}",
    "renders": true
  },
  {
    "household_item": "trivet",
    "openscad_code": "// Realistic Medium-Complexity Trivet\n// Dimensions: 80 mm diameter, 5 mm thick base, 6 mm tall feet\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\ntrivet_d = 80;  // mm\nbase_thick = 5;\nfoot_h = 6;\nfoot_r = 3;\nrib_w = 4;\nrib_h = 4;\n\n// Central circular base\nmodule base_disc() {\n    cylinder(h = base_thick, r = trivet_d/2 - foot_r, center = true);\n}\n\n// Radial ribs for heat dissipation\nmodule ribs() {\n    n = 8;  // number of ribs\n    for(i = [0 : n-1]) {\n        angle = i * 360/n;\n        rotate([0, 0, angle])\n            translate([0, trivet_d/4, 0])\n                cube([rib_w, trivet_d/2, rib_h], center = true);\n    }\n}\n\n// Circular outer ring for stability\nmodule outer_ring() {\n    difference() {\n        cylinder(h = rib_h, r = trivet_d/2 - foot_r/2, center = true);\n        cylinder(h = rib_h + 0.1, r = trivet_d/2 - foot_r/2 - rib_w, center = true);\n    }\n}\n\n// Feet to lift trivet above table\nmodule feet() {\n    n = 5;  // number of feet\n    foot_dist = trivet_d/2 - foot_r*2;\n    for(i = [0 : n-1]) {\n        angle = i * 360/n;\n        rotate([0, 0, angle])\n            translate([foot_dist, 0, -(base_thick/2 + foot_h/2)])\n                cylinder(h = foot_h, r = foot_r, center = true);\n    }\n}\n\n// Ventilation holes through base\nmodule vents() {\n    n = 6;  // number of vents\n    vent_r = 5;\n    vent_dist = trivet_d/3;\n    for(i = [0 : n-1]) {\n        angle = i * 360/n + 30;\n        rotate([0, 0, angle])\n            translate([vent_dist, 0, 0])\n                cylinder(h = base_thick + 0.2, r = vent_r, center = true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        base_disc();\n        \n        translate([0, 0, base_thick/2 + rib_h/2])\n            union() {\n                ribs();\n                outer_ring();\n            }\n        \n        feet();\n    }\n    \n    // Cut vents from base\n    vents();\n}",
    "renders": true
  },
  {
    "household_item": "placemat",
    "openscad_code": "// Realistic 3D-printable placemat\n// Size: 80 x 60 mm, 2 mm thick\n// Features: raised edge, drainage grooves, subtle texture\n\n$fn = 32;\n\n// Main parameters\nmat_w = 80;\nmat_h = 60;\nmat_thick = 2;\nedge_h = 1.5;\ngroove_depth = 0.4;\n\n// Base plate\ndifference() {\n    // Solid base\n    cube([mat_w, mat_h, mat_thick], center = false);\n    \n    // Drainage grooves\n    translate([0, 10, mat_thick - groove_depth]) {\n        for (y = [10 : 10 : mat_h - 20]) {\n            translate([5, y, 0])\n                cube([mat_w - 10, 1, groove_depth + 0.02]);\n        }\n    }\n}\n\n// Raised outer edge\nmodule edge() {\n    difference() {\n        // Outer rim\n        translate([0, 0, mat_thick])\n            cube([mat_w, mat_h, edge_h], center = false);\n        \n        // Cut out inner area\n        translate([2, 2, 0])\n            cube([mat_w - 4, mat_h - 4, edge_h + mat_thick], center = false);\n    }\n}\nedge();\n\n// Subtle texture dots in center area\nmodule texture_dot(x, y) {\n    translate([x, y, mat_thick])\n        sphere(d = 0.8, $fn = 12);\n}\n\n// Generate texture grid\nfor (x = [5 : 4 : mat_w - 5]) {\n    for (y = [5 : 4 : mat_h - 5]) {\n        texture_dot(x, y);\n    }\n}\n\n// Corner reinforcements\nmodule corner(x, y) {\n    translate([x, y, 0])\n        cylinder(h = mat_thick + edge_h, r = 3, $fn = 16);\n}\n\ncorners = [\n    [3, 3],\n    [mat_w - 3, 3],\n    [3, mat_h - 3],\n    [mat_w - 3, mat_h - 3]\n];\n\nfor (pos = corners) {\n    corner(pos[0], pos[1]);\n}",
    "renders": true
  },
  {
    "household_item": "napkin",
    "openscad_code": "// Realistic 3D printable napkin\n// Dimensions: ~70 mm square unfolded, 30 mm thick when folded\n// Wall thickness: 1.2 mm for printability\n\n// Napkin parameters\nnapkin_size = 70;           // Square napkin size in mm\nfold_count = 4;             // Number of folded layers\nthickness = 0.3;            // Single layer thickness in mm\ncrease_depth = 0.5;         // Depth of fold creases\n\n// Module for single napkin layer with texture\nmodule napkin_layer(size, thick) {\n    difference() {\n        // Base layer\n        cube([size, size, thick], center=true);\n        \n        // Subtle surface texture - small random depressions\n        for (x = [-size/2+5 : 5 : size/2-5]) {\n            for (y = [-size/2+5 : 5 : size/2-5]) {\n                translate([x, y, thick/2-0.1]) {\n                    sphere(thick/2);\n                }\n            }\n        }\n    }\n}\n\n// Module for creating fold creases\nmodule fold_crease(length, depth, width) {\n    color(\"gray\") {\n        translate([0, 0, -depth/2]) {\n            cube([length, width, depth], center=true);\n        }\n    }\n}\n\n// Module for folded corner detail\nmodule folded_corner(offset) {\n    difference() {\n        // Main folded part\n        translate([offset, offset, 0]) {\n            rotate([0, 0, 45]) {\n                cube([napkin_size/3, napkin_size/3, thickness*fold_count], center=true);\n            }\n        }\n        \n        // Remove overlap\n        translate([0, 0, -thickness*fold_count]) {\n            cube([napkin_size*2, napkin_size*2, thickness*fold_count*2], center=true);\n        }\n    }\n}\n\n// Main napkin assembly\nunion() {\n    // Base folded layers\n    for (i = [0 : fold_count-1]) {\n        translate([0, 0, i*thickness]) {\n            scale([1 - i*0.1, 1 - i*0.1, 1]) {\n                napkin_layer(napkin_size - i*5, thickness);\n            }\n        }\n    }\n    \n    // Diagonal fold lines\n    rotate([0, 0, 45]) {\n        fold_crease(napkin_size*1.2, crease_depth, 0.5);\n    }\n    rotate([0, 0, -45]) {\n        fold_crease(napkin_size*1.2, crease_depth, 0.5);\n    }\n    \n    // Horizontal and vertical creases\n    fold_crease(napkin_size, crease_depth, 0.5);\n    rotate([0, 0, 90]) {\n        fold_crease(napkin_size, crease_depth, 0.5);\n    }\n    \n    // Folded corners showing layering\n    folded_corner(napkin_size/3);\n    mirror([1, 0, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    mirror([0, 1, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    mirror([1, 1, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    \n    // Center detail - slightly raised\n    translate([0, 0, fold_count*thickness]) {\n        difference() {\n            cylinder(h=thickness, r=8, $fn=32);\n            cylinder(h=thickness+0.1, r=6, $fn=32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "towel",
    "openscad_code": "// Realistic Towel - Medium Complexity\n// Dimensions: 60mm x 40mm x 5mm\n\n// Parameters\ntowel_length = 60;\ntowel_width = 40;\ntowel_thickness = 5;\nfold_height = 2;\nterry_bump_size = 0.8;\nterry_spacing = 2;\nterry_rows = 20;\nterry_cols = 30;\nborder_width = 3;\nfringe_length = 6;\nfringe_thickness = 0.5;\n\n// Main towel body with rounded edges\nmodule towel_body() {\n    // Base towel shape with rounded edges\n    difference() {\n        // Main rectangular towel\n        union() {\n            // Central body\n            translate([0, 0, towel_thickness/2])\n                cube([towel_length - border_width*2, towel_width - border_width*2, towel_thickness], center=true);\n            \n            // Rounded borders\n            translate([0, 0, towel_thickness/2 - 0.1])\n                cube([towel_length - 1, towel_width - 1, towel_thickness + 0.2], center=true);\n        }\n        \n        // Rounded corners\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                translate([i*(towel_length/2 - border_width), j*(towel_width/2 - border_width), 0])\n                    cylinder(h=towel_thickness + 2, r=border_width - 0.5, center=true);\n            }\n        }\n    }\n}\n\n// Terry cloth texture\nmodule terry_texture() {\n    // Create grid of small bumps for terry cloth\n    for (i = [0:terry_rows-1]) {\n        for (j = [0:terry_cols-1]) {\n            x_pos = (i - terry_rows/2) * terry_spacing + terry_spacing/2;\n            y_pos = (j - terry_cols/2) * terry_spacing + terry_spacing/2;\n            \n            if (abs(x_pos) < towel_length/2 - border_width - 1 && \n                abs(y_pos) < towel_width/2 - border_width - 1) {\n                \n                translate([x_pos, y_pos, towel_thickness + terry_bump_size/2])\n                    sphere(d=terry_bump_size, $fn=8);\n            }\n        }\n    }\n}\n\n// Fold lines\nmodule fold_lines() {\n    // Two horizontal fold lines\n    for (fold = [-1, 1]) {\n        translate([0, fold * towel_width/6, towel_thickness/2])\n            cube([towel_length - border_width*2, fold_height, towel_thickness + 0.1], center=true);\n    }\n}\n\n// Fringe on short edges\nmodule fringe() {\n    for (side = [-1, 1]) {\n        for (i = [0:12]) {\n            x_pos = side * (towel_length/2 - 1);\n            y_pos = (i - 6) * 3;\n            \n            if (abs(y_pos) < towel_width/2 - 1) {\n                // Individual fringe strand\n                translate([x_pos, y_pos, towel_thickness/2 - fringe_length/2])\n                    rotate([0, 90, 0])\n                        cylinder(h=fringe_length, d=fringe_thickness, $fn=6);\n            }\n        }\n    }\n}\n\n// Hanging loop\nmodule hanging_loop() {\n    translate([0, towel_width/2, towel_thickness + 2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r=3, $fn=20);\n                cylinder(h=9, r=2, $fn=20);\n            }\n}\n\n// Assemble the towel\nunion() {\n    // Main towel body\n    towel_body();\n    \n    // Terry texture on top\n    terry_texture();\n    \n    // Fold lines\n    fold_lines();\n    \n    // Fringe on both ends\n    fringe();\n    \n    // Hanging loop\n    hanging_loop();\n}",
    "renders": true
  },
  {
    "household_item": "cloth",
    "openscad_code": "// Realistic Cloth for 3D Printing\n// A folded towel-like cloth with visible thickness and subtle wrinkles\n\n$fn = 32;               // Smooth curves\ncloth_thickness = 1.2;  // Minimum printable wall thickness\ncloth_length = 70;      // Overall length\ncloth_width = 40;       // Overall width\nfold_count = 3;         // Number of visible folds\n\n// Main folded cloth\nmodule folded_cloth() {\n    difference() {\n        // Base folded shape\n        union() {\n            // Main body with gentle curves\n            for (i = [0 : fold_count - 1]) {\n                translate([0, i * (cloth_width / fold_count), 0])\n                    rotate([0, 0, sin(i * 30) * 5])  // Slight rotation for natural fold\n                        body_section(i);\n            }\n            \n            // Thicken edges\n            edge_strips();\n        }\n        \n        // Remove inner void to create hollow shell\n        hollow_interior();\n    }\n    \n    // Surface wrinkles\n    surface_wrinkles();\n}\n\n// Individual body section with thickness\nmodule body_section(index) {\n    height = 0.5 + sin(index * 45) * 0.3;  // Varying height for realism\n    \n    // Main curved surface\n    hull() {\n        translate([-cloth_length/2, 0, 0])\n            rounded_cube([cloth_length, cloth_width/fold_count - 1, height + cloth_thickness]);\n            \n        translate([-cloth_length/2 + 5, cloth_width/fold_count - 2, height + 0.5])\n            sphere(d = 2);\n            \n        translate([cloth_length/2 - 5, 1, height + 0.3])\n            sphere(d = 1.5);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size) {\n    hull() {\n        for (x = [0, size[0]])\n            for (y = [0, size[1]])\n                for (z = [0, size[2]])\n                    translate([x, y, z])\n                        sphere(d = cloth_thickness);\n    }\n}\n\n// Edge strips for thickness\nmodule edge_strips() {\n    // Long edges\n    for (side = [-1, 1]) {\n        translate([0, side * cloth_width/2, cloth_thickness/2])\n            cube([cloth_length, cloth_thickness, cloth_thickness], center = true);\n    }\n    \n    // Short edges\n    for (end = [-1, 1]) {\n        translate([end * cloth_length/2, 0, cloth_thickness/2])\n            cube([cloth_thickness, cloth_width, cloth_thickness], center = true);\n    }\n}\n\n// Hollow interior for material saving\nmodule hollow_interior() {\n    translate([0, 0, -0.1])\n        cube([cloth_length - cloth_thickness*2, cloth_width - cloth_thickness*2, cloth_thickness + 0.2], center = true);\n}\n\n// Surface wrinkle details\nmodule surface_wrinkles() {\n    wrinkle_spacing = 8;\n    wrinkle_depth = 0.3;\n    \n    // Horizontal wrinkles\n    for (y = [-cloth_width/2 + 5 : wrinkle_spacing : cloth_width/2 - 5]) {\n        for (x = [-cloth_length/2 + 3 : wrinkle_spacing : cloth_length/2 - 3]) {\n            translate([x, y, cloth_thickness + 0.1])\n                rotate([90, 0, 0])\n                    cylinder(h = wrinkle_depth, d1 = 1, d2 = 0.5);\n        }\n    }\n    \n    // Vertical wrinkles\n    for (x = [-cloth_length/2 + 5 : wrinkle_spacing : cloth_length/2 - 5]) {\n        translate([x, 0, cloth_thickness + 0.1])\n            rotate([0, 90, 0])\n                cylinder(h = wrinkle_depth, d1 = 1.2, d2 = 0.6);\n    }\n}\n\n// Render the complete cloth\nfolded_cloth();",
    "renders": true
  },
  {
    "household_item": "sponge",
    "openscad_code": "// Realistic 3D-printable sponge\n// Medium complexity – recognizable pores, chamfered edges, printable walls\n\n// Overall dimensions\nsponge_w = 90;   // mm\nsponge_d = 60;   // mm\nsponge_h = 30;   // mm\nwall = 1.6;      // printable wall thickness (mm)\n\n// Pore parameters\npore_r = 2.2;           // radius of each pore\npore_pitch = 5;         // center-to-center spacing\nedge_chamfer = 3;       // chamfer on top edges\n\n// Create one chamfered block with pores\nmodule chamfered_block(size=[sponge_w, sponge_d, sponge_h]){\n    difference(){\n        // Main block with chamfered top edges\n        union(){\n            // Lower solid block\n            translate([0,0,edge_chamfer])\n                cube([size.x, size.y, size.z - edge_chamfer], center=true);\n\n            // Chamfer slopes on top\n            for(dx=[-1,1]){\n                for(dy=[-1,1]){\n                    mirror([dx,0,0])\n                        mirror([0,dy,0])\n                            polyhedron(\n                                points=[\n                                    [size.x/2, size.y/2, size.z/2],\n                                    [size.x/2, -size.y/2, size.z/2],\n                                    [size.x/2 - edge_chamfer, size.y/2, size.z/2 - edge_chamfer],\n                                    [size.x/2 - edge_chamfer, -size.y/2, size.z/2 - edge_chamfer]\n                                ],\n                                faces=[[0,1,3,2]]\n                            );\n                }\n            }\n        }\n\n        // Pore pattern\n        for(x=[-size.x/2 + pore_pitch/2 : pore_pitch : size.x/2 - pore_pitch/2]){\n            for(y=[-size.y/2 + pore_pitch/2 : pore_pitch : size.y/2 - pore_pitch/2]){\n                for(z=[-size.z/2 + pore_pitch/2 : pore_pitch : size.z/2 - pore_pitch/2]){\n                    // Skip pores too close to outer shell to keep walls printable\n                    if(abs(x) < size.x/2 - pore_r - wall &&\n                       abs(y) < size.y/2 - pore_r - wall &&\n                       abs(z) < size.z/2 - pore_r - wall){\n                        translate([x,y,z])\n                            sphere(r=pore_r, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the final sponge\nchamfered_block([sponge_w, sponge_d, sponge_h]);",
    "renders": true
  },
  {
    "household_item": "brush",
    "openscad_code": "// Realistic 3D Printable Brush – Medium Complexity\n\n// Brush parameters\nbrush_len = 90;          // overall length\nhandle_len = 55;\nhandle_dia = 12;\nferrule_len = 15;\nferrule_dia = 14;\nbristle_len = 20;\nbristle_base_dia = 12;\nbristle_tip_dia = 2;\nbristle_count = 49;      // 7×7 grid\nwall = 1.2;              // 3D-printable wall thickness\n\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h = handle_len, d1 = handle_dia, d2 = handle_dia*0.9, $fn = 32);\n        // Ergonomic finger grooves\n        for (i = [1:4])\n            translate([0, 0, handle_len/5*i])\n                rotate([0,90,0])\n                    scale([0.9, 0.9, 1])\n                        cylinder(h = handle_dia+0.2, d = handle_dia*0.3, $fn = 24);\n    }\n    // Hanging hole\n    translate([0, 0, handle_len-5])\n        rotate([90,0,0])\n            cylinder(h = 10, d = 4, $fn = 20);\n}\n\nmodule ferrule() {\n    color(\"silver\")\n    difference() {\n        // Cylindrical ferrule\n        cylinder(h = ferrule_len, d = ferrule_dia, $fn = 32);\n        // Taper inside to grip bristles\n        cylinder(h = ferrule_len, d1 = bristle_base_dia+0.5, d2 = ferrule_dia-1, $fn = 32);\n    }\n}\n\nmodule bristles() {\n    color(\"beige\")\n    // Grid of tapered bristle strands\n    for (dx = [-3:3])\n        for (dy = [-3:3])\n            translate([dx*2, dy*2, 0])\n                cylinder(h = bristle_len, d1 = bristle_base_dia/7, d2 = bristle_tip_dia/7, $fn = 8);\n    // Optional dome trim\n    translate([0,0,bristle_len-2])\n        sphere(d = bristle_base_dia*0.8, $fn = 32);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, 0, handle_len])\n    ferrule();\n\ntranslate([0, 0, handle_len + ferrule_len])\n    bristles();",
    "renders": true
  },
  {
    "household_item": "detergent",
    "openscad_code": "// Realistic detergent bottle with handle, cap, and embossed label\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nbottle_height = 80;\nbottle_width = 45;\nbottle_depth = 30;\nwall_thickness = 2;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main rounded rectangular body\n        union() {\n            // Central body with rounded edges\n            minkowski() {\n                cube([bottle_width, bottle_depth, bottle_height - 10], center = true);\n                sphere(5);\n            }\n            \n            // Tapered top\n            translate([0, 0, bottle_height/2 - 5])\n            scale([0.8, 0.8, 1])\n            cylinder(h = 15, r1 = bottle_width/2, r2 = bottle_width/3, center = true);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([bottle_width - 2*wall_thickness, bottle_depth - 2*wall_thickness, bottle_height - 12], center = true);\n            sphere(3);\n        }\n    }\n}\n\n// Handle on back\nmodule handle() {\n    translate([bottle_width/2 + 5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Handle grip\n        torus(ro = 15, ri = 4);\n        \n        // Cut for hand\n        translate([0, 0, -15])\n        cube([20, 20, 30], center = true);\n    }\n}\n\n// Screw cap\nmodule cap() {\n    translate([0, 0, bottle_height/2 + 12])\n    difference() {\n        // Cap body\n        cylinder(h = 15, r = bottle_width/3 + 3, center = true);\n        \n        // Grip ridges\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([bottle_width/3 + 1, 0, 0])\n            cube([3, 1, 15], center = true);\n        }\n        \n        // Thread hole\n        cylinder(h = 20, r = bottle_width/3 - 2, center = true);\n    }\n}\n\n// Embossed label area\nmodule label() {\n    translate([0, bottle_depth/2 + 1, -10])\n    scale([0.9, 0.1, 0.6])\n    cube([bottle_width - 10, 1, bottle_height - 20], center = true);\n}\n\n// Pour spout\nmodule spout() {\n    translate([0, 0, bottle_height/2 + 5])\n    cylinder(h = 10, r1 = bottle_width/3, r2 = bottle_width/3 - 1, center = true);\n}\n\n// Torus helper for handle\nmodule torus(ro, ri) {\n    rotate_extrude()\n    translate([ro, 0, 0])\n    circle(r = ri);\n}\n\n// Assembly\nunion() {\n    bottle_body();\n    handle();\n    spout();\n    cap();\n    label();\n}",
    "renders": true
  },
  {
    "household_item": "soap",
    "openscad_code": "// Realistic bar-of-soap model, medium complexity\n// Overall dimensions ≈ 80 × 55 × 22 mm\n\n// Basic parameters\nlength = 80;\nwidth  = 55;\nheight = 22;\ncorner_r = 8;     // radius of rounded corners\nedge_r   = 1.2;   // small edge fillet\nengr_depth = 0.6; // depth of soap text\ngroove_w = 1.2;   // anti-slip grooves\n\n// Main bar body with rounded edges\nmodule soap_body() {\n    // Core rounded block\n    minkowski() {\n        cube([length-2*corner_r, width-2*corner_r, height-2*corner_r], center=true);\n        sphere(r=corner_r);\n    }\n    \n    // Top & bottom edge fillets\n    difference() {\n        children();\n        translate([0,0, height/2-edge_r]) \n            cube([length+2, width+2, 2*edge_r], center=true);\n        translate([0,0,-height/2+edge_r]) \n            cube([length+2, width+2, 2*edge_r], center=true);\n    }\n}\n\n// Engraved word “SOAP” on top face\nmodule soap_text() {\n    font_h = 6;          // letter height\n    font_t = engr_depth; // extrude depth\n    spacing = 22;        // letter spacing\n\n    linear_extrude(height=font_t, convexity=4) {\n        translate([-(3*spacing)/2, -font_h/2, 0])\n            text(\"S\", size=font_h, font=\"Arial:style=Bold\");\n        translate([-(1*spacing)/2, -font_h/2, 0])\n            text(\"O\", size=font_h, font=\"Arial:style=Bold\");\n        translate([+(1*spacing)/2, -font_h/2, 0])\n            text(\"A\", size=font_h, font=\"Arial:style=Bold\");\n        translate([+(3*spacing)/2, -font_h/2, 0])\n            text(\"P\", size=font_h, font=\"Arial:style=Bold\");\n    }\n}\n\n// Anti-slip grooves on bottom face\nmodule bottom_grooves() {\n    groove_len = length - 12;\n    groove_h   = 0.8;\n    groove_sep = 4;\n\n    for (i=[-5:1:5]) {\n        translate([0, i*groove_sep, -height/2 + groove_h/2])\n            cube([groove_len, groove_w, groove_h], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    soap_body() {\n        children();\n    }\n\n    // Engrave text on top\n    difference() {\n        soap_body();\n        translate([0, 0, height/2 - engr_depth/2 - 1])\n            soap_text();\n    }\n    \n    // Add grooves to bottom\n    translate([0,0,0])\n        bottom_grooves();\n}\n\n// Optional support standoffs for easier printing\nsupport_r = 3;\nsupport_h = 1;\ntranslate([ length/2 - support_r - 4,  width/2 - support_r - 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([-length/2 + support_r + 4,  width/2 - support_r - 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([ length/2 - support_r - 4, -width/2 + support_r + 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([-length/2 + support_r + 4, -width/2 + support_r + 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);",
    "renders": true
  },
  {
    "household_item": "trashcan",
    "openscad_code": "// Realistic 3D printable trashcan (medium complexity)\n// Approx. 70 mm tall, 60 mm diameter\n// Wall thickness: 2 mm\n\n// Main body module\nmodule trashcan_body() {\n    difference() {\n        // Outer cylinder with slight taper\n        cylinder(h1 = 60, r1 = 30, r2 = 28, h = 60, $fn = 64);\n        \n        // Hollow out interior\n        translate([0, 0, 2])\n            cylinder(h1 = 58, r1 = 28, r2 = 26, h = 58, $fn = 64);\n    }\n}\n\n// Reinforcement ring at top\nmodule top_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 4, r = 30.5, $fn = 64);\n        \n        // Inner cutout\n        cylinder(h = 4, r = 28.5, $fn = 64);\n    }\n}\n\n// Base with slight lip\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(h = 3, r = 31, $fn = 64);\n        \n        // Recessed bottom\n        translate([0, 0, 1])\n            cylinder(h = 2, r = 29, $fn = 64);\n    }\n}\n\n// Pedal mechanism\nmodule pedal() {\n    // Pedal arm\n    translate([-20, 0, 3])\n        rotate([0, -20, 0])\n        cube([25, 12, 3], center = true);\n    \n    // Pivot bracket\n    translate([-8, 0, 3])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r = 3, $fn = 16);\n    \n    // Support ribs under pedal\n    for(i = [-1, 1]) {\n        translate([-15, 6 * i, 1.5])\n            rotate([0, -20, 0])\n            cube([10, 1, 2], center = true);\n    }\n}\n\n// Handle indentations for grip\nmodule handles() {\n    for(angle = [120, 240]) {\n        rotate([0, 0, angle])\n        translate([28, 0, 45])\n            rotate([0, 90, 0])\n            cylinder(h = 10, r1 = 5, r2 = 3, $fn = 16);\n    }\n}\n\n// Ventilation holes\nmodule vents() {\n    for(h = [15, 25, 35]) {\n        rotate([0, 0, 0])\n        translate([0, 29, h])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 1.5, $fn = 16);\n    }\n    \n    // Additional vents rotated\n    for(h = [20, 30]) {\n        rotate([0, 0, 180])\n        translate([0, 29, h])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 1.5, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    trashcan_body();\n    \n    // Add top ring\n    translate([0, 0, 59])\n        top_ring();\n    \n    // Add base\n    base();\n    \n    // Add pedal (only on one side)\n    pedal();\n    \n    // Add handle indents\n    difference() {\n        trashcan_body();\n        handles();\n    }\n    \n    // Add ventilation holes\n    difference() {\n        trashcan_body();\n        vents();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "recyclebin",
    "openscad_code": "// Realistic medium-complexity recycle bin\n// Dimensions in mm, printable without supports\n\nbin_w = 80;\nbin_d = 65;\nbin_h = 100;\nwall_t = 2.5;\nbottom_t = 3;\n\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,0])\n                cube([bin_w, bin_d, bottom_t], center=true);\n            translate([0,0,bin_h/2])\n                cube([bin_w*0.85, bin_d*0.85, bin_h], center=true);\n        }\n\n        // Inner cavity\n        translate([0,0,-bottom_t/2+0.5])\n            hull() {\n                translate([0,0,0])\n                    cube([bin_w-wall_t*2, bin_d-wall_t*2, bottom_t], center=true);\n                translate([0,0,bin_h/2])\n                    cube([bin_w*0.85-wall_t*2, bin_d*0.85-wall_t*2, bin_h+1], center=true);\n            }\n    }\n}\n\nmodule rim() {\n    // Top rim reinforcement\n    difference() {\n        hull() {\n            translate([0,0,bin_h-1])\n                cube([bin_w*0.85+4, bin_d*0.85+4, 3], center=true);\n            translate([0,0,bin_h+1])\n                cube([bin_w*0.85+2, bin_d*0.85+2, 2], center=true);\n        }\n        \n        // Remove inner part\n        translate([0,0,bin_h-2])\n            cube([bin_w*0.85-wall_t*2+2, bin_d*0.85-wall_t*2+2, 6], center=true);\n    }\n}\n\nmodule handles() {\n    // Side handles\n    for(side = [-1, 1]) {\n        translate([side*(bin_w*0.85)/2, 0, bin_h*0.6]) {\n            rotate([0,90,0]) {\n                difference() {\n                    cylinder(h=15, r=5, center=true);\n                    cylinder(h=16, r=3.5, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule recycle_symbol() {\n    // Recycle symbol on front\n    translate([0, -bin_d*0.85/2 - 0.5, bin_h*0.7])\n    rotate([90,0,0]) {\n        linear_extrude(height=1.5) {\n            // Three chasing arrows\n            for(i=[0:2]) {\n                rotate([0,0,i*120])\n                    translate([0,10,0])\n                        circle(r=6);\n                rotate([0,0,i*120])\n                    translate([0,10,0])\n                        translate([0,6,0])\n                            square([2,6], center=true);\n            }\n            \n            // Remove center\n            circle(r=5);\n        }\n    }\n}\n\nmodule base_reinforcement() {\n    // Bottom ribs for strength\n    for(x=[-30:15:30]) {\n        translate([x, 0, bottom_t/2])\n            cube([3, bin_d-10, bottom_t+1], center=true);\n    }\n    for(y=[-25:15:25]) {\n        translate([0, y, bottom_t/2])\n            cube([bin_w-10, 3, bottom_t+1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    rim();\n    handles();\n    recycle_symbol();\n    base_reinforcement();\n}",
    "renders": true
  },
  {
    "household_item": "compostbin",
    "openscad_code": "// Realistic 3D-printable compost bin – medium complexity\n// Outer dimensions ≈ 60 mm (L) × 50 mm (W) × 70 mm (H)\n\nmodule main_body() {\n    difference() {\n        // Main container walls (2 mm thick)\n        cube([60, 50, 70], center = true);\n\n        // Hollow out the inside\n        translate([0, 0, 2])  // shift slightly to keep floor thickness\n            cube([56, 46, 68], center = true);\n    }\n}\n\nmodule ventilation_holes() {\n    // Rows of 5 mm ventilation holes on side walls\n    for (y = [-20, -10, 0, 10, 20])\n        for (z = [-25, -15, -5, 5, 15, 25])\n            translate([31, y, z])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d = 5, $fn = 12);\n}\n\nmodule lid() {\n    difference() {\n        // Lid plate 3 mm thick\n        translate([0, 0, 36])\n            cube([62, 52, 3], center = true);\n\n        // Handle cutout\n        translate([0, 0, 38])\n            cube([40, 10, 6], center = true);\n    }\n\n    // Handle\n    translate([0, 0, 42])\n        cylinder(h = 8, d1 = 12, d2 = 12, center = true);\n}\n\nmodule hatch() {\n    difference() {\n        // Small door on front\n        translate([0, -26, -15])\n            cube([30, 2, 20], center = true);\n\n        // Hatch opening\n        translate([0, -26.5, -15])\n            cube([26, 3, 16], center = true);\n    }\n\n    // Door handle\n    translate([12, -27, -15])\n        cylinder(h = 4, d = 4, center = true);\n}\n\nmodule base() {\n    // Reinforced bottom feet\n    for (x = [-25, 25])\n        for (y = [-20, 20])\n            translate([x, y, -36])\n                cylinder(h = 6, d = 8, center = true);\n}\n\nunion() {\n    main_body();\n    ventilation_holes();\n    lid();\n    hatch();\n    base();\n}",
    "renders": true
  },
  {
    "household_item": "scale",
    "openscad_code": "// Classic two-pan balance scale (medium complexity, 3D-printable)\n// Overall footprint ~70x85x90 mm\n\n// Parameters\n$fn = 50;\nwall = 2.0;\nbase_w = 60;\nbase_d = 50;\nbase_h = 8;\npillar_h = 70;\npillar_r = 5;\nbeam_l = 80;\nbeam_h = 6;\npan_d = 28;\npan_h = 6;\npointer_l = 20;\n\n// Main assembly\nunion() {\n\n    // Base\n    difference() {\n        // Main base block\n        translate([0, 0, base_h/2])\n            rounded_cube([base_w, base_d, base_h], 4);\n        // Center slot for pillar\n        translate([0, 0, base_h-1])\n            cube([pillar_r*2+wall, base_d-10, 2], center=true);\n    }\n\n    // Central pillar\n    translate([0, 0, base_h + pillar_h/2])\n        cylinder(h = pillar_h, r = pillar_r, center = true);\n\n    // Pivot block on top\n    translate([0, 0, base_h + pillar_h + 2])\n        rounded_cube([10, 10, 5], 2);\n\n    // Beam and pointer\n    translate([0, 0, base_h + pillar_h + 4.5])\n        rotate([0, 90, 0])\n        union() {\n            // Beam\n            difference() {\n                rounded_cube([beam_l, beam_h, beam_h], 2);\n                // Pivot hole\n                rotate([0, 90, 0])\n                    translate([0, 0, -beam_h/2-1])\n                    cylinder(h = beam_h+2, r = 1.5, center=true);\n            }\n            // Pointer\n            translate([0, 0, -beam_h/2 - pointer_l/2])\n                rotate([90, 0, 0])\n                cylinder(h = pointer_l, r = 1.2);\n        }\n\n    // Left pan chain\n    translate([-beam_l/2, 0, base_h + pillar_h + 4.5])\n        pan_with_chain();\n\n    // Right pan chain\n    translate([beam_l/2, 0, base_h + pillar_h + 4.5])\n        mirror([1, 0, 0])\n            pan_with_chain();\n}\n\n// Helper module: rounded cube\nmodule rounded_cube(size, r) {\n    x = size.x != undef ? size.x : size[0];\n    y = size.y != undef ? size.y : size[1];\n    z = size.z != undef ? size.z : size[2];\n    hull() {\n        for (dx = [-x/2+r, x/2-r], dy = [-y/2+r, y/2-r], dz = [-z/2+r, z/2-r])\n            translate([dx, dy, dz])\n                sphere(r = r);\n    }\n}\n\n// Helper module: pan plus chain\nmodule pan_with_chain() {\n    // Chain link to beam\n    translate([0, 0, -beam_h/2-5])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5);\n\n    // Pan\n    translate([0, 0, -beam_h/2-15])\n        difference() {\n            // Pan body\n            cylinder(h = pan_h, r = pan_d/2);\n            // Hollow inside\n            translate([0, 0, 1])\n                cylinder(h = pan_h, r = pan_d/2 - wall);\n        }\n}",
    "renders": true
  },
  {
    "household_item": "timer",
    "openscad_code": "// Realistic 3D-printable mechanical kitchen timer\n// Overall size: ~70 mm diameter, ~45 mm thick\n\n// Constants\n$fn = 60;\n\n// Main dimensions\nbody_d = 70;\nbody_h = 30;\nwall_t = 2;\nknob_d = 20;\nknob_h = 15;\ndisplay_w = 40;\ndisplay_h = 15;\nleg_h = 8;\nleg_r = 2;\n\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cylinder(d = body_d - 2*wall_t, h = body_h - 2*wall_t, center = true);\n            sphere(r = 3);\n        }\n        // Hollow interior\n        minkowski() {\n            cylinder(d = body_d - 4*wall_t, h = body_h - 2*wall_t, center = true);\n            sphere(r = 2);\n        }\n    }\n}\n\nmodule timer_face() {\n    // Display window\n    translate([0, 0, body_h/2 - 0.5]) {\n        difference() {\n            // Slightly raised bezel\n            cube([display_w + 6, display_h + 6, 2], center = true);\n            cube([display_w, display_h, 3], center = true);\n        }\n    }\n    \n    // Minute markings around the edge\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([body_d/2 - 5, 0, body_h/2 - 0.5]) {\n                cube([4, 1, 1], center = true);\n            }\n    }\n}\n\nmodule knob() {\n    // Main knob\n    translate([0, 0, body_h/2 + knob_h/2]) {\n        difference() {\n            cylinder(d = knob_d, h = knob_h);\n            // Grip ridges\n            for (i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([knob_d/2 - 2, 0, knob_h/2])\n                        cube([4, 1, knob_h], center = true);\n            }\n        }\n        // Center indicator arrow\n        translate([0, knob_d/2 - 3, knob_h/2])\n            cube([2, 6, 1], center = true);\n    }\n}\n\nmodule support_legs() {\n    // Three support legs\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([body_d/3, 0, -body_h/2]) {\n                cylinder(h = leg_h, r = leg_r);\n                sphere(r = leg_r);\n            }\n    }\n}\n\nmodule timer() {\n    union() {\n        main_body();\n        timer_face();\n        knob();\n        support_legs();\n    }\n}\n\n// Render the complete timer\ntimer();",
    "renders": true
  },
  {
    "household_item": "thermometer",
    "openscad_code": "// Realistic 3D-printable thermometer\n// Overall length ~95 mm, width ~12 mm, thickness ~8 mm\n// No overhangs greater than 45°, wall ≥1 mm\n\n// Parameters\ntube_od       = 6;            // outer diameter of glass tube\ntube_wall     = 1;            // wall thickness\ntube_len      = 75;           // tube length\nbulb_d        = 12;           // bulb diameter\ncap_h         = 5;            // top cap height\ncap_d         = 10;           // top cap diameter\nscale_mark_h  = 2;            // height of scale marks\nscale_mark_w  = 0.8;          // width of scale marks\nscale_gap     = 5;            // spacing between marks\nscale_count   = 10;           // number of scale marks\nbase_thick    = 2;            // thickness of flat base for printing\nepsilon       = 0.01;         // tiny offset to avoid Z-fighting\n\nmodule thermometer() {\n    // Main glass tube\n    difference() {\n        cylinder(h = tube_len, d = tube_od, $fn = 32);\n        translate([0, 0, -epsilon])\n            cylinder(h = tube_len + 2*epsilon, d = tube_od - 2*tube_wall, $fn = 32);\n    }\n\n    // Bulb (lower rounded reservoir)\n    translate([0, 0, -bulb_d/2])\n        sphere(d = bulb_d, $fn = 32);\n\n    // Top cap (metal crimp)\n    translate([0, 0, tube_len])\n        cylinder(h = cap_h, d1 = cap_d, d2 = tube_od, $fn = 32);\n\n    // Scale plate (flat strip along back)\n    translate([tube_od/2 + 0.5, 0, tube_len/2])\n        rotate([0, 90, 0])\n            cube([tube_len, 6, base_thick]);\n\n    // Scale marks\n    for (i = [0:scale_count-1]) {\n        translate([tube_od/2 + 0.5 + base_thick, -3 + scale_mark_w/2, tube_len - 10 - i*scale_gap])\n            cube([scale_mark_h, scale_mark_w, base_thick]);\n    }\n\n    // Numerical indicators (3 main marks)\n    for (i = [0:2]) {\n        translate([tube_od/2 + 0.5 + base_thick + scale_mark_h + 0.5, -1.5, tube_len - 10 - i*4*scale_gap])\n            cube([1, 3, base_thick]);\n    }\n}\n\n// Stand for printing without supports\nmodule print_stand() {\n    // Flat base\n    cube([30, 20, 2], center = true);\n\n    // Half-cylindrical cradle\n    translate([0, 0, 1])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 30, d = 14, center = true, $fn = 32);\n                translate([0, 0, -7 - epsilon])\n                    cube([30, 14, 7], center = true);\n            }\n}\n\n// Assembly\ntranslate([0, 0, 8])\n    thermometer();\nprint_stand();",
    "renders": true
  },
  {
    "household_item": "measuringcup",
    "openscad_code": "// Realistic 3D-printable measuring cup (250 ml)\n// Outer dimensions ~70 mm Ø × 70 mm high\n\n// Parameters\nwall = 1.8;                 // Safe 3D-print wall thickness (mm)\nr_out = 35;                 // Outer radius (mm)\nr_in  = r_out - wall;       // Inner radius\nh_total = 68;               // Total height\nh_base  = 5;                // Solid base\nh_fluid = h_total - h_base; // Max fluid height\nhandle_width = 12;\nhandle_thick = wall;\nhandle_len = 30;\nspout_w = 12;\nspout_h = 8;\n\n// Overall cup body\nmodule cup_body() {\n    difference() {\n        // Outer solid cylinder\n        cylinder(h=h_total, r1=r_out, r2=r_out-2, $fn=120);\n\n        // Hollow inside\n        translate([0,0,h_base])\n            cylinder(h=h_fluid+1, r1=r_in, r2=r_in-2, $fn=120);\n    }\n}\n\n// Graduation marks (every 50 ml → 10 mm height)\nmodule graduation_marks() {\n    step = 10; // 10 mm per 50 ml\n    for(i=[1:5]) {\n        translate([0, r_out, h_base + i*step])\n            rotate([90,0,0])\n                linear_extrude(height=wall+0.2)\n                    text(str(i*50,\"ml\"), size=3, valign=\"center\", halign=\"center\");\n        \n        // Short raised ridges\n        color(\"white\")\n        for(a=[-5:5]) {\n            rotate([0,0,a*6])\n                translate([r_out-0.2, 0, h_base + i*step])\n                    cube([0.4, 1.5, 0.6], center=true);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([r_out-1, 0, h_total/2]) {\n        rotate([0,90,0]) {\n            // Main grip\n            difference() {\n                rotate_extrude($fn=60)\n                    translate([handle_len/2, 0, 0])\n                        square([handle_len/2, handle_width], center=true);\n                // Hollow grip\n                rotate_extrude($fn=60)\n                    translate([handle_len/2, 0, 0])\n                        square([handle_len/2-handle_thick, handle_width-2*handle_thick], center=true);\n            }\n            // Attachment bridges\n            for(z=[-h_total/3, h_total/3]) {\n                translate([0,0,z])\n                    rotate_extrude($fn=60)\n                        translate([r_out-1,0,0])\n                            square([wall+1, handle_width], center=true);\n            }\n        }\n    }\n}\n\n// Pouring spout\nmodule spout() {\n    difference() {\n        union() {\n            // Main spout wedge\n            translate([0, r_out-1, h_total-spout_h])\n                rotate([0,0,0])\n                    cube([spout_w*2, spout_h, spout_h], center=true);\n            // Smooth top bevel\n            translate([0, r_out-1, h_total-spout_h/2])\n                rotate([0,90,0])\n                    cylinder(h=spout_w*2, r1=spout_h/2, r2=0, $fn=20);\n        }\n        // Remove inside\n        translate([0, r_out-1, h_total-spout_h])\n            cube([spout_w*2-2*wall, spout_h+1, spout_h+1], center=true);\n    }\n}\n\n// Build the cup\ncup_body();\nhandle();\nspout();\ngraduation_marks();",
    "renders": true
  },
  {
    "household_item": "measuringspoon",
    "openscad_code": "// Measuring Spoon - 15ml Tablespoon\n// Realistic style with medium complexity\n\n// Parameters\n$fn = 32;\nwall_thickness = 1.5;\nhandle_length = 70;\nhandle_width = 12;\nhandle_thickness = 3;\nbowl_radius = 22;\nbowl_depth = 12;\nmeasurement_mark_depth = 0.5;\n\n// Main assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Bowl\n    bowl();\n    \n    // Measurement marking\n    measurement_mark();\n}\n\nmodule handle() {\n    // Start handle from origin\n    translate([0, 0, handle_thickness/2]) {\n        // Main handle body with rounded edges\n        hull() {\n            // Front rounded end\n            translate([handle_length-3, 0, 0])\n                sphere(d=handle_width);\n            \n            // Back rounded end\n            translate([3, 0, 0])\n                sphere(d=handle_width);\n            \n            // Middle section\n            translate([handle_length/2, 0, 0])\n                sphere(d=handle_width * 0.9);\n        }\n        \n        // Hollow out handle\n        difference() {\n            // Outer shape already created\n            hull() {\n                translate([handle_length-3, 0, 0])\n                    sphere(d=handle_width - wall_thickness*2);\n                \n                translate([3, 0, 0])\n                    sphere(d=handle_width - wall_thickness*2);\n                \n                translate([handle_length/2, 0, 0])\n                    sphere(d=(handle_width - wall_thickness*2) * 0.9);\n            }\n            translate([0, 0, -handle_thickness])\n                cube([handle_length+10, handle_width*2, handle_thickness*2], center=true);\n        }\n        \n        // Grip texture grooves\n        for(i = [1:4]) {\n            translate([handle_length * 0.2 * i, 0, handle_thickness/2])\n                difference() {\n                    cylinder(h=handle_thickness+0.2, d=handle_width, center=true);\n                    cylinder(h=handle_thickness+0.4, d=handle_width - 1, center=true);\n                }\n        }\n    }\n}\n\nmodule bowl() {\n    // Position bowl at end of handle\n    translate([0, 0, handle_thickness/2]) {\n        rotate([90, 0, 0]) {\n            // Outer bowl shape\n            difference() {\n                // Main bowl sphere\n                sphere(r=bowl_radius);\n                \n                // Cut bottom flat\n                translate([0, 0, -bowl_radius + bowl_depth])\n                    cube([bowl_radius*2, bowl_radius*2, bowl_radius*2], center=true);\n                \n                // Cut back flat for handle attachment\n                translate([bowl_radius, 0, 0])\n                    cube([bowl_radius, bowl_radius*2, bowl_radius*2], center=true);\n            }\n            \n            // Inner bowl hollow\n            difference() {\n                sphere(r=bowl_radius - wall_thickness);\n                translate([0, 0, -bowl_radius + bowl_depth - wall_thickness - 1])\n                    cube([bowl_radius*2, bowl_radius*2, bowl_radius*2], center=true);\n                translate([bowl_radius - wall_thickness, 0, 0])\n                    cube([bowl_radius, bowl_radius*2, bowl_radius*2], center=true);\n            }\n            \n            // Smooth transition to handle\n            translate([-bowl_radius + 2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=bowl_radius/2, r=handle_width/2 - wall_thickness, center=true);\n        }\n    }\n}\n\nmodule measurement_mark() {\n    // 15ml marking on handle\n    translate([handle_length * 0.7, 0, handle_thickness + 0.1]) {\n        rotate([90, 0, 0]) {\n            // Text \"15ml\"\n            linear_extrude(height=measurement_mark_depth) {\n                text(\"15ml\", size=4, halign=\"center\", valign=\"center\");\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "rollingpin",
    "openscad_code": "// Rolling Pin - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\npin_length = 80;\npin_diameter = 25;\nhandle_length = 20;\nhandle_diameter = 12;\ngrip_length = 15;\ngrip_diameter = 14;\n\n// Rolling surface texture parameters\ngroove_width = 1.5;\ngroove_depth = 0.5;\ngroove_spacing = 4;\ngroove_count = floor(pin_length / groove_spacing) - 1;\n\nmodule rolling_pin() {\n    // Central cylindrical body\n    cylinder(h=pin_length, d=pin_diameter, center=true);\n    \n    // Tapered ends\n    translate([pin_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h1=pin_diameter/2, h2=0, r1=pin_diameter/2, r2=pin_diameter/3, $fn=32);\n    \n    translate([-pin_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h1=pin_diameter/2, h2=0, r1=pin_diameter/2, r2=pin_diameter/3, $fn=32);\n}\n\nmodule handle_grooves() {\n    // Grip rings on handle\n    for(i = [0:3]) {\n        translate([0, 0, -grip_length/2 + i*grip_length/4])\n            difference() {\n                cylinder(h=2, d=grip_diameter+1, center=true);\n                cylinder(h=3, d=grip_diameter-2, center=true);\n            }\n    }\n}\n\nmodule rolling_surface_grooves() {\n    // Surface texture grooves\n    for(i = [1:groove_count]) {\n        translate([-(pin_length/2) + i*groove_spacing, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=groove_width, d=pin_diameter+1, center=true);\n                    cylinder(h=groove_width+1, d=pin_diameter-groove_depth*2, center=true);\n                }\n    }\n}\n\nmodule handle() {\n    // Handle shaft\n    cylinder(h=handle_length, d=handle_diameter, center=true);\n    \n    // Handle grip\n    translate([0, 0, handle_length/2 + grip_length/2])\n        cylinder(h=grip_length, d=grip_diameter, center=true);\n    \n    // Grip grooves\n    translate([0, 0, handle_length/2 + grip_length/2])\n        handle_grooves();\n    \n    // End cap\n    translate([0, 0, handle_length/2 + grip_length + 2])\n        sphere(d=handle_diameter, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Rolling pin body with surface texture\n    difference() {\n        rolling_pin();\n        rolling_surface_grooves();\n    }\n    \n    // Left handle\n    translate([-(pin_length/2 + handle_length/2), 0, 0])\n        rotate([0, 90, 0])\n            handle();\n    \n    // Right handle\n    translate([pin_length/2 + handle_length/2, 0, 0])\n        rotate([0, 90, 0])\n            mirror([1, 0, 0])\n                handle();\n}",
    "renders": true
  },
  {
    "household_item": "bakingsheet",
    "openscad_code": "// Baking sheet – realistic style, medium complexity\n// External size ≈ 80 mm × 60 mm × 10 mm\n// Wall thickness 1.2 mm, printable without supports\n\n// Parameters\nsheet_l = 80;       // length\nsheet_w = 60;       // width\nsheet_h = 10;       // total height\nwall_t = 1.2;       // wall thickness\nedge_r = 2;         // top edge radius\ncorner_r = 3;       // fillet radius on inside bottom\ngrip_len = 10;      // length of side grips\ngrip_rad = 4;       // grip cylinder radius\n\n// Main sheet body\nmodule sheet_body() {\n    difference() {\n        // Outer block with rounded top edge\n        minkowski() {\n            cube([sheet_l, sheet_w, sheet_h - edge_r], center = true);\n            cylinder(r = edge_r, h = 0.01, $fn = 16);\n        }\n        translate([0, 0, 1])  // shift to keep bottom flat\n        // Inner cavity\n        difference() {\n            // Main cavity\n            cube([sheet_l - 2*wall_t, sheet_w - 2*wall_t, sheet_h], center = true);\n            // Bottom inside fillets (four cylinders)\n            for (dx = [-1, 1])\n                for (dy = [-1, 1])\n                    translate([dx*(sheet_l/2 - wall_t - corner_r),\n                               dy*(sheet_w/2 - wall_t - corner_r),\n                               -sheet_h/2])\n                        cylinder(h = corner_r + 0.1, r = corner_r, $fn = 16);\n        }\n    }\n}\n\n// Side grips\nmodule grips() {\n    // Left grip\n    translate([-sheet_l/2 - grip_len/2, 0, 0])\n        grip();\n    // Right grip\n    translate([sheet_l/2 + grip_len/2, 0, 0])\n        mirror([1, 0, 0])\n            grip();\n}\n\nmodule grip() {\n    difference() {\n        // Grip body\n        cube([grip_len, sheet_w/3, wall_t*3], center = true);\n        // Finger groove\n        translate([0, 0, -wall_t*1.5])\n            cylinder(h = wall_t*3 + 0.1, r = grip_rad, $fn = 16);\n    }\n}\n\n// Perforation pattern (optional subtle look)\nmodule perforations() {\n    hole_d = 1.4;\n    spacing = 4;\n    rows = floor((sheet_w - 2*wall_t) / spacing) - 1;\n    cols = floor((sheet_l - 2*wall_t) / spacing) - 1;\n    difference() {\n        children();\n        for (i = [0:cols-1])\n            for (j = [0:rows-1])\n                translate([\n                    -sheet_l/2 + wall_t + spacing/2 + i*spacing,\n                    -sheet_w/2 + wall_t + spacing/2 + j*spacing,\n                    0\n                ])\n                    cylinder(h = sheet_h, d = hole_d, $fn = 12);\n    }\n}\n\n// Assembly\nperforations() {\n    union() {\n        sheet_body();\n        grips();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "casserole",
    "openscad_code": "// Medium-complexity realistic casserole dish\n// Approx. 80 mm wide × 60 mm deep × 45 mm tall (without lid)\n\nwall_th = 2;           // wall thickness for 3D-printing\nr_out   = 40;          // outer radius of the dish\nh_body  = 30;          // height of the dish body\nh_lip   = 5;           // rim / lip height\nh_base  = 8;           // pedestal base height\nr_base  = 35;          // base radius (smaller than dish)\n\n// ---------------- DISH BODY ----------------\nmodule dish_body() {\n    difference() {\n        // outer shell\n        cylinder(h = h_body + h_lip, r1 = r_out, r2 = r_out - 2, $fn = 48);\n\n        // inner cavity\n        translate([0, 0, wall_th])\n            cylinder(h = h_body - wall_th, r1 = r_out - wall_th, r2 = r_out - wall_th - 2, $fn = 48);\n    }\n}\n\n// ---------------- RIM / LIP ----------------\nmodule lip() {\n    // slightly flared rim\n    translate([0, 0, h_body])\n        cylinder(h = h_lip, r1 = r_out - 2, r2 = r_out + 1, $fn = 48);\n}\n\n// ---------------- BASE / PEDESTAL ----------------\nmodule base() {\n    translate([0, 0, -h_base])\n        cylinder(h = h_base, r1 = r_base, r2 = r_base + 2, $fn = 48);\n}\n\n// ---------------- HANDLES ----------------\nmodule side_handles() {\n    handle_len = 12;\n    handle_wid = 6;\n    handle_th  = wall_th;\n    \n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([r_out + handle_len / 2, 0, h_body / 2])\n                rotate([0, 90, 0])\n                    difference() {\n                        union() {\n                            // main grip bar\n                            cube([handle_len, handle_wid, handle_th], center = true);\n                            // curved transition\n                            translate([0, 0, handle_wid / 2])\n                                rotate([90, 0, 0])\n                                    cylinder(h = handle_len, r = handle_th / 2, center = true, $fn = 12);\n                        }\n                        // screw clearance / weight-saving hole\n                        cylinder(h = handle_len + 1, r = handle_th / 2 - 0.5, center = true, $fn = 8);\n                    }\n    }\n}\n\n// ---------------- LID ----------------\nmodule lid() {\n    lid_h     = 10;\n    lid_top_r = r_out - 1;\n    lid_bot_r = r_out + 1;\n    \n    // lid dome\n    difference() {\n        cylinder(h = lid_h, r1 = lid_bot_r, r2 = lid_top_r, $fn = 48);\n        translate([0, 0, wall_th])\n            cylinder(h = lid_h, r1 = lid_bot_r - wall_th, r2 = lid_top_r - wall_th, $fn = 48);\n    }\n    \n    // lid knob\n    knob_r = 8;\n    knob_h = 10;\n    translate([0, 0, lid_h + knob_h / 2])\n        cylinder(h = knob_h, r1 = knob_r, r2 = knob_r / 2, $fn = 20);\n}\n\n// ---------------- ASSEMBLY ----------------\nunion() {\n    dish_body();\n    lip();\n    base();\n    side_handles();\n    \n    // Lid offset for preview\n    translate([0, 0, h_body + h_lip + 2])\n        lid();\n}",
    "renders": true
  },
  {
    "household_item": "skillet",
    "openscad_code": "// Realistic 3D-printable skillet – medium complexity\n// Overall length ≈ 90 mm, pan diameter ≈ 50 mm, wall thickness 1.2 mm\n\n// Parameters\npan_d = 50;            // pan outer diameter\nwall_t = 1.2;          // wall thickness\nbase_h = 3;            // bottom plate height\nbody_h = 15;           // pan body height\nhandle_l = 40;         // handle length\nhandle_w = 10;         // handle width at grip\nhandle_t = 6;          // handle thickness\ngrip_r = 1.5;          // grip ridge radius\ngrip_step = 5;         // spacing between grip rings\nrivet_r = 1.5;         // rivet radius\nrivet_h = 2.5;\n\n// Helper: rounded-edge cylinder (pan body)\nmodule rounded_cylinder(h, r, t) {\n    difference() {\n        cylinder(h=h, r=r, $fn=100);\n        translate([0,0,-0.01])\n            cylinder(h=h+0.02, r=r-t, $fn=100);\n    }\n}\n\n// Pan body (bowl shape)\nmodule pan_body() {\n    difference() {\n        union() {\n            // bottom plate\n            cylinder(h=base_h, r=pan_d/2, $fn=100);\n            // curved wall\n            translate([0,0,base_h])\n                rounded_cylinder(body_h, pan_d/2, wall_t);\n        }\n        // hollow interior\n        translate([0,0,base_h])\n            cylinder(h=body_h+0.1, r=pan_d/2-wall_t, $fn=100);\n    }\n}\n\n// Handle grip ridges\nmodule grip_ridges() {\n    n = floor(handle_l/grip_step) - 1;\n    for(i=[1:n]) {\n        translate([0, 0, i*grip_step])\n            // semicircular ridge\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=handle_w, r=grip_r, center=true, $fn=20);\n                    translate([0,-grip_r,0])\n                        cube([handle_w+2, grip_r*2, grip_r*2], center=true);\n                }\n    }\n}\n\n// Handle with ergonomic taper\nmodule handle() {\n    // Main shaft tapering toward pan\n    hull() {\n        translate([0,0,0])\n            cube([handle_t, handle_w, handle_t], center=true);\n        translate([handle_l,0,0])\n            scale([0.7,0.7,0.7])\n                cube([handle_t, handle_w, handle_t], center=true);\n    }\n    // Grip ridges on top\n    grip_ridges();\n    // Rivets where handle meets pan\n    for(side=[-1,1]) {\n        translate([-handle_t/2-rivet_h/2, side*handle_w/4, 0])\n            rotate([0,90,0])\n                cylinder(h=rivet_h, r=rivet_r, $fn=16);\n    }\n}\n\n// Assemble skillet\nunion() {\n    pan_body();\n    translate([pan_d/2 - handle_t/2, 0, base_h+body_h/2])\n        rotate([0,-90,0])\n            handle();\n}",
    "renders": true
  },
  {
    "household_item": "wok",
    "openscad_code": "// Wok - realistic style, medium complexity\n// 3D printable with proper wall thickness\n\n$fn = 100;\n\n// Overall dimensions\nwok_diameter = 80;\nwok_height = 35;\nwall_thickness = 2;\nhandle_length = 60;\nhandle_diameter = 12;\n\n// Main wok bowl\nmodule wok_bowl() {\n    difference() {\n        // Outer bowl\n        scale([1, 1, 0.8]) \n            cylinder(h = wok_height, d = wok_diameter, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            scale([1, 1, 0.75])\n                cylinder(h = wok_height, d = wok_diameter - wall_thickness * 2, center = false);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -1])\n            cylinder(h = 2, d = wok_diameter * 0.6, center = false);\n    }\n}\n\n// Rivet detail\nmodule rivet() {\n    cylinder(h = 3, d = 3);\n}\n\n// Handle attachment plate\nmodule handle_attachment() {\n    difference() {\n        // Main plate\n        translate([wok_diameter/2 - 10, 0, wok_height/2])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                    cube([20, 15, 3], center = true);\n        \n        // Screw holes (decorative)\n        for(y = [-5, 5])\n            translate([wok_diameter/2 - 10, y, wok_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, d = 2, center = true);\n    }\n    \n    // Rivets\n    for(y = [-5, 5]) {\n        translate([wok_diameter/2 - 15, y, wok_height/2 + 2])\n            rivet();\n        translate([wok_diameter/2 - 5, y, wok_height/2 + 2])\n            rivet();\n    }\n}\n\n// Main handle - ergonomic grip\nmodule handle() {\n    // Handle core\n    translate([wok_diameter/2 + handle_length/2 - 10, 0, wok_height/2])\n        rotate([0, 90, 0])\n            difference() {\n                // Main handle cylinder with taper\n                hull() {\n                    translate([0, 0, 0])\n                        cylinder(h = 5, d = handle_diameter);\n                    translate([handle_length - 15, 0, 0])\n                        cylinder(h = 5, d = handle_diameter * 0.9);\n                    translate([handle_length - 5, 0, 0])\n                        cylinder(h = 5, d = handle_diameter * 0.7);\n                }\n                \n                // Grip grooves\n                for(i = [10:15:handle_length - 20]) {\n                    translate([i, 0, -handle_diameter/2 - 1])\n                        rotate([90, 0, 0])\n                            cylinder(h = handle_diameter + 2, d = 2);\n                }\n            }\n    \n    // Handle collar\n    translate([wok_diameter/2 - 10, 0, wok_height/2])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d = handle_diameter + 4);\n}\n\n// Helper handle (opposite side)\nmodule helper_handle() {\n    translate([-wok_diameter/2 + 5, 0, wok_height/2])\n        rotate([90, 0, 0])\n            difference() {\n                // Main helper handle\n                cylinder(h = 25, d = 8);\n                \n                // Hollow center\n                cylinder(h = 25, d = 4);\n            }\n}\n\n// Rim reinforcement\nmodule rim_reinforcement() {\n    difference() {\n        translate([0, 0, wok_height - 1])\n            cylinder(h = 3, d = wok_diameter + 2);\n        \n        translate([0, 0, wok_height - 1])\n            cylinder(h = 3.5, d = wok_diameter - wall_thickness * 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main wok\n    wok_bowl();\n    \n    // Structural elements\n    rim_reinforcement();\n    handle_attachment();\n    \n    // Handles\n    handle();\n    helper_handle();\n}",
    "renders": true
  },
  {
    "household_item": "saucepan",
    "openscad_code": "$fn = 36;\n\nwall_th = 1.5;      // wall thickness (mm)\nbase_d = 50;        // pan base diameter\nrim_d = 54;         // rim diameter\nheight = 40;        // pan body height\nbottom_shift = 3;   // extra base height for bottom plate\nhandle_L = 60;      // handle length\nhandle_W = 10;      // handle width\nhandle_T = 8;       // handle thickness\nrivet_r = 1.2;      // rivet radius\nrivet_L = 4;\n\n// saucepan body\nmodule saucepan_body() {\n    difference() {\n        union() {\n            // main tapered wall\n            cylinder(h1 = height + bottom_shift,\n                     h2 = height,\n                     r1 = base_d/2,\n                     r2 = rim_d/2,\n                     center = false);\n\n            // rolled rim lip\n            translate([0, 0, height])\n                cylinder(h = 2,\n                         r1 = rim_d/2,\n                         r2 = rim_d/2 + 1.5,\n                         center = false);\n        }\n\n        // hollow interior\n        translate([0, 0, bottom_shift])\n            cylinder(h1 = height - 2,\n                     h2 = height - bottom_shift - 1,\n                     r1 = base_d/2 - wall_th,\n                     r2 = rim_d/2 - wall_th,\n                     center = false);\n    }\n}\n\n// helper for handle profile\nmodule handle_profile() {\n    // ellipse + rectangle blend\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = handle_T, r = handle_T/2, center = true);\n        translate([handle_L - handle_T/2, 0, 0])\n            cylinder(h = handle_T, r = handle_T/2, center = true);\n    }\n}\n\n// saucepan handle\nmodule handle() {\n    // main grip\n    translate([rim_d/2, 0, height/2])\n        rotate([90, 0, 0])\n            scale([1, handle_W/handle_T, 1])\n                handle_profile();\n\n    // support bracket\n    translate([rim_d/2, 0, bottom_shift + 2])\n        rotate([90, 0, 0])\n            linear_extrude(height = handle_W) {\n                polygon(points = [\n                    [0, 0],\n                    [handle_L/2.5, 0],\n                    [handle_L/2.5, 6],\n                    [0, 4]\n                ]);\n            }\n\n    // rivets\n    for(z = [height*0.35, height*0.65]) {\n        translate([rim_d/2 + 2, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h = rivet_L, r = rivet_r, center = true);\n    }\n}\n\n// saucepan bottom plate (heat spreader)\nmodule bottom_plate() {\n    difference() {\n        cylinder(h = bottom_shift, r = base_d/2, center = false);\n        translate([0, 0, 0.5])\n            cylinder(h = bottom_shift, r = base_d/2 - wall_th, center = false);\n    }\n}\n\n// assemble\nunion() {\n    bottom_plate();\n    saucepan_body();\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "stockpot",
    "openscad_code": "// Realistic 3D-printable stockpot (medium complexity)\n// Overall height ≈ 55 mm, diameter ≈ 55 mm\n\nmodule stockpot() {\n    // Wall / bottom thickness\n    wall = 1.6;\n\n    // Main pot body\n    difference() {\n        cylinder(h = 40, d = 55, $fn = 90);               // outer shell\n        translate([0, 0, wall])\n            cylinder(h = 40, d = 55 - 2*wall, $fn = 90); // inner hollow\n    }\n\n    // Bottom base plate (extra thickness for print stability)\n    translate([0, 0, -1])\n        cylinder(h = wall + 1, d = 55, $fn = 90);\n\n    // Rim roll at top\n    difference() {\n        translate([0, 0, 40])\n            cylinder(h = 4, d1 = 55, d2 = 57, $fn = 90);   // outer flare\n        translate([0, 0, 40])\n            cylinder(h = 5, d = 55 - 2*wall, $fn = 90);    // inner cut\n    }\n\n    // Handles\n    module handle() {\n        difference() {\n            // Main grip loop\n            rotate([0, 90, 0])\n                translate([0, 0, 27.5 + wall])\n                    rotate_extrude(angle = 90, $fn = 30)\n                        translate([27.5 + wall, 0])\n                            square([wall * 1.5, 6]);\n\n            // Hollow out grip\n            rotate([0, 90, 0])\n                translate([0, 0, 27.5 + wall + 0.5])\n                    rotate_extrude(angle = 90, $fn = 30)\n                        translate([27.5 + wall + 0.5, 0])\n                            square([wall * 0.7, 4]);\n        }\n        // Support plate under handle\n        translate([0, 27.5, 35])\n            cube([10, wall, 6], center = true);\n    }\n\n    // Attach two handles 180° apart\n    for (i = [0:1])\n        rotate([0, 0, i * 180])\n            handle();\n\n    // Lid\n    translate([0, 70, 0]) {\n        difference() {\n            // Lid disk\n            cylinder(h = 3, d = 56, $fn = 90);\n            translate([0, 0, 0.5])\n                cylinder(h = 3, d = 54, $fn = 90); // inner recess\n        }\n        // Lid knob\n        translate([0, 0, 3])\n            cylinder(h = 8, d1 = 10, d2 = 8, $fn = 30);\n    }\n}\n\nstockpot();",
    "renders": true
  },
  {
    "household_item": "roaster",
    "openscad_code": "// Realistic Roaster - 3D printable coffee bean roaster\n// Size: ~80mm length, ~60mm height, ~50mm width\n// All overhangs <= 45° for 3D printing\n\n// Main dimensions (mm)\nroaster_length = 80;\nroaster_width = 50;\nroaster_height = 60;\nwall_thickness = 2;\nhandle_length = 30;\n\n// Roaster body - main chamber\nmodule roaster_body() {\n    difference() {\n        // Outer shell - rounded for better heat distribution\n        hull() {\n            translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                sphere(d=roaster_width);\n            translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                cylinder(h=roaster_length-roaster_width, d=roaster_width);\n        }\n        \n        // Inner cavity for beans\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            scale([(roaster_length-2*wall_thickness)/roaster_length, \n                   (roaster_width-2*wall_thickness)/roaster_width,\n                   (roaster_height-2*wall_thickness)/roaster_height])\n                hull() {\n                    translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                        sphere(d=roaster_width);\n                    translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                        cylinder(h=roaster_length-roaster_width, d=roaster_width);\n                }\n    }\n}\n\n// Handle with wooden grip texture\nmodule handle() {\n    // Metal arm\n    translate([roaster_length, roaster_width/2, roaster_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=handle_length, d=8);\n    \n    // Wooden grip with rings for texture\n    for(i = [0:4]) {\n        translate([roaster_length + 5 + i*5, roaster_width/2, roaster_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=4, d=10 + (i%2)*2);\n    }\n}\n\n// Lid with steam vent holes\nmodule lid() {\n    // Main lid disc\n    translate([roaster_length/2, roaster_width/2, roaster_height - wall_thickness])\n        cylinder(h=wall_thickness*2, d=roaster_width + 4);\n    \n    // Handle on lid\n    translate([roaster_length/2, roaster_width/2, roaster_height + 2])\n        cylinder(h=5, d=8);\n    \n    // Steam vents - small holes for moisture release\n    for(angle = [0:45:360-45]) {\n        rotate([0, 0, angle])\n            translate([roaster_length/2 + roaster_width/4, \n                      roaster_width/2, \n                      roaster_height])\n                cylinder(h=wall_thickness*3, d=2);\n    }\n}\n\n// Support legs - angled for stability\nmodule legs() {\n    for(side = [-1, 1]) {\n        for(end = [-1, 1]) {\n            translate([roaster_length/2 + end*(roaster_length/2 - 10),\n                      roaster_width/2 + side*(roaster_width/2 - 5),\n                      5])\n                rotate([0, end*15, 0])\n                    cylinder(h=10, d1=8, d2=6);\n        }\n    }\n}\n\n// Crank mechanism for rotating beans\nmodule crank() {\n    // Drive shaft\n    translate([0, roaster_width/2, roaster_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=10, d=6);\n    \n    // Crank arm\n    translate([-5, roaster_width/2 - 5, roaster_height/2])\n        cube([10, 10, 6]);\n    \n    // Crank handle\n    translate([-10, roaster_width/2 - 15, roaster_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=8);\n}\n\n// Assembly\nunion() {\n    roaster_body();\n    handle();\n    legs();\n    crank();\n    \n    // Optional - add lid (can be printed separately)\n    %lid();\n}",
    "renders": true
  },
  {
    "household_item": "griddle",
    "openscad_code": "// Realistic 3D-printable griddle, medium complexity\n// Outer size: 90 x 60 x 20 mm (fits most FDM printers)\n\n$fn = 36;           // smooth curves\n\n// Overall body\ndifference() {\n    // Main plate\n    union() {\n        // Base frame with rounded corners\n        hull() {\n            translate([-45, -30, 0]) cylinder(h = 20, d = 6);\n            translate([45, -30, 0])  cylinder(h = 20, d = 6);\n            translate([45, 30, 0])   cylinder(h = 20, d = 6);\n            translate([-45, 30, 0])  cylinder(h = 20, d = 6);\n        }\n\n        // Bottom plate\n        translate([0, 0, 0]) cube([90, 60, 2], center = true);\n\n        // Side walls\n        for (x = [-42.5, 42.5]) {\n            translate([x, 0, 10]) cube([5, 60, 20], center = true);\n        }\n        for (y = [-27.5, 27.5]) {\n            translate([0, y, 10]) cube([90, 5, 20], center = true);\n        }\n    }\n\n    // Remove cooking surface cavity\n    translate([0, 0, 2]) cube([80, 50, 18], center = true);\n\n    // Drain hole\n    translate([40, 25, 2]) cylinder(h = 10, d = 5);\n}\n\n// Cooking surface with raised ridges\nmodule ridge_row(y) {\n    for (x = [-35 : 8 : 35]) {\n        translate([x, y, 2]) cube([6, 3, 1.5]);\n    }\n}\n\nfor (y = [-22.5 : 6 : 22.5]) {\n    ridge_row(y);\n}\n\n// Drain channel leading to hole\ntranslate([35, 23, 1.9]) cube([10, 4, 0.8]);\n\n// Handle sockets (for wooden dowels)\nmodule handle_socket(side) {\n    translate([side * 52, 0, 10]) {\n        difference() {\n            cylinder(h = 20, d = 12);\n            translate([0, 0, -1]) cylinder(h = 22, d = 8);\n        }\n    }\n}\n\nhandle_socket(-1);\nhandle_socket(1);\n\n// Feet\nmodule foot(x, y) {\n    translate([x, y, -1]) cylinder(h = 5, d = 8);\n}\n\nfoot(-40, -25);\nfoot(40, -25);\nfoot(-40, 25);\nfoot(40, 25);",
    "renders": true
  },
  {
    "household_item": "steamer",
    "openscad_code": "// OpenSCAD Steamer (realistic, medium complexity)\n// Overall dimensions ~80 mm diameter\n\n$fn = 48;  // smooth curves\n\n// Main parameters\nbase_d = 70;          // base diameter\nbase_h = 20;          // base height\nwall_th = 3;          // wall thickness\npot_h = 45;           // pot height\nrim_h = 8;            // rim height\nhandle_r = 5;         // handle radius\nhandle_l = 25;        // handle length\nvent_holes = 8;       // number of vent holes\nlid_knob_r = 8;       // lid knob radius\nlid_knob_h = 12;      // lid knob height\n\n// Base module\nmodule steamer_base() {\n    difference() {\n        // outer base\n        cylinder(h = base_h, d = base_d);\n        // hollow interior\n        translate([0, 0, wall_th])\n            cylinder(h = base_h, d = base_d - 2*wall_th);\n        // bottom vent holes\n        for(i = [1:vent_holes]) {\n            rotate([0, 0, i*360/vent_holes])\n                translate([base_d/2 - wall_th - 2, 0, base_h/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall_th + 1, d = 3, $fn = 16);\n        }\n    }\n}\n\n// Pot module\nmodule steamer_pot() {\n    difference() {\n        // outer pot\n        cylinder(h = pot_h, d = base_d, center = false);\n        // inner cavity\n        translate([0, 0, wall_th])\n            cylinder(h = pot_h, d = base_d - 2*wall_th, center = false);\n    }\n    // upper rim\n    translate([0, 0, pot_h])\n        difference() {\n            cylinder(h = rim_h, d = base_d + 2*wall_th);\n            cylinder(h = rim_h, d = base_d);\n        }\n    // handles\n    for(side = [-1, 1]) {\n        translate([side * (base_d/2 + handle_l/2), 0, pot_h/2])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = handle_l, r = handle_r);\n                    translate([0, 0, -1])\n                        cube([handle_l, 2*handle_r, 2*handle_r + 2], center = true);\n                }\n    }\n}\n\n// Steamer insert (perforated tray)\nmodule steamer_insert() {\n    difference() {\n        cylinder(h = wall_th*2, d = base_d - 4*wall_th);\n        // perforation pattern\n        for(row = [-2:2]) {\n            for(col = [-2:2]) {\n                translate([row*8, col*8, -1])\n                    cylinder(h = wall_th*2 + 2, d = 3);\n            }\n        }\n        // center hole\n        cylinder(h = wall_th*2 + 2, d = 20);\n    }\n    // small legs for elevation\n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n            translate([base_d/2 - 6*wall_th, 0, -wall_th])\n                cylinder(h = wall_th*2, d = 6);\n    }\n}\n\n// Lid module\nmodule steamer_lid() {\n    difference() {\n        // lid dome\n        translate([0, 0, -rim_h/2])\n            scale([1, 1, 0.6])\n                sphere(d = base_d + 2*wall_th);\n        // inner clearance\n        translate([0, 0, -rim_h])\n            scale([1, 1, 0.6])\n                sphere(d = base_d);\n        // handle hole\n        translate([0, 0, lid_knob_h/2])\n            cylinder(h = lid_knob_h, d = lid_knob_r/2);\n    }\n    // lid knob\n    translate([0, 0, lid_knob_h])\n        cylinder(h = lid_knob_h, r = lid_knob_r);\n}\n\n// Assembly\ntranslate([0, 0, 0]) steamer_base();\ntranslate([0, 0, base_h]) steamer_pot();\ntranslate([0, 0, base_h + wall_th*2]) steamer_insert();\ntranslate([0, 0, base_h + pot_h + rim_h]) steamer_lid();",
    "renders": true
  },
  {
    "household_item": "slowcooker",
    "openscad_code": "// Slow Cooker - Realistic Medium Complexity\n// Dimensions: ~80mm wide x 70mm deep x 60mm tall\n\n$fn = 32;\n\n// Main body\nmodule slow_cooker_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 30]) \n            scale([1, 0.9, 1])\n            cylinder(h=40, r1=35, r2=35);\n        \n        // Inner cavity\n        translate([0, 0, 35]) \n            scale([1, 0.9, 1])\n            cylinder(h=35, r1=30, r2=30);\n    }\n}\n\n// Base with feet\nmodule base() {\n    union() {\n        // Main base\n        translate([0, 0, 5])\n            cube([70, 60, 10], center=true);\n        \n        // Control panel\n        translate([38, 0, 10])\n            cube([15, 25, 5], center=true);\n        \n        // Feet\n        for (x = [-25, 25])\n            for (y = [-20, 20])\n                translate([x, y, 2])\n                    cylinder(h=4, r=3);\n    }\n}\n\n// Lid with handle\nmodule lid() {\n    union() {\n        // Lid body\n        translate([0, 0, 65])\n            difference() {\n                scale([1, 0.9, 1])\n                    cylinder(h=8, r1=36, r2=34);\n                translate([0, 0, 2])\n                    scale([1, 0.9, 1])\n                        cylinder(h=8, r1=30, r2=28);\n            }\n        \n        // Handle\n        translate([0, 0, 75])\n            scale([1, 0.9, 0.3])\n                cylinder(h=15, r1=10, r2=10);\n    }\n}\n\n// Handles on sides\nmodule side_handles() {\n    for (y = [-1, 1]) {\n        translate([0, y*40, 40]) {\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=15, r=5);\n                    translate([0, 0, -1])\n                        cube([20, 10, 17], center=true);\n                }\n        }\n    }\n}\n\n// Vent holes\nmodule vents() {\n    for (i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, 26, 60])\n                cylinder(h=3, r=2);\n    }\n}\n\n// Control knobs\nmodule controls() {\n    translate([38, -8, 15])\n        cylinder(h=3, r=3);\n    translate([38, 8, 15])\n        cylinder(h=3, r=3);\n}\n\n// Assembly\nslow_cooker_body();\nbase();\nlid();\nside_handles();\nvents();\ncontrols();",
    "renders": true
  },
  {
    "household_item": "pressurecooker",
    "openscad_code": "// Pressure Cooker - Realistic Medium Complexity\n// Sized for 3D printing, ~80mm total height\n\n$fn = 50;\n\n// Main parameters\nbase_d = 70;\nbase_h = 30;\nwall_th = 3;\nlid_d = base_d + 2*wall_th;\nlid_h = 12;\n\n// Base pot\nmodule pot_body() {\n    difference() {\n        cylinder(h = base_h, d = base_d);\n        translate([0, 0, wall_th])\n            cylinder(h = base_h, d = base_d - 2*wall_th);\n    }\n}\n\n// Lid with handle\nmodule lid() {\n    difference() {\n        union() {\n            // Main lid disk\n            cylinder(h = lid_h, d = lid_d);\n            \n            // Safety valve\n            translate([lid_d/4, 0, lid_h])\n                cylinder(h = 8, d1 = 4, d2 = 2);\n                \n            // Main handle\n            translate([0, 0, lid_h + 8])\n                cylinder(h = 8, d = 14);\n            translate([0, 0, lid_h + 12])\n                cylinder(h = 4, d = 20);\n        }\n        \n        // Steam vent hole\n        translate([lid_d/4, 0, lid_h])\n            cylinder(h = 20, d = 1.5);\n    }\n}\n\n// Side handles - two opposing\nmodule side_handles() {\n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([base_d/2 + 5, 0, base_h/2])\n                difference() {\n                    cube([10, 8, 10], center = true);\n                    cube([8, 6, 8], center = true);\n                }\n    }\n}\n\n// Rim detail on pot\nmodule rim_detail() {\n    translate([0, 0, base_h])\n        difference() {\n            cylinder(h = 3, d = base_d + 4);\n            cylinder(h = 3, d = base_d);\n        }\n}\n\n// Locking lugs around lid\nmodule locking_lugs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([lid_d/2 + 2, 0, lid_h/2])\n                cube([4, 8, lid_h], center = true);\n    }\n}\n\n// Base bottom with feet\nmodule base_feet() {\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([base_d/2 - 5, 0, 0])\n                cylinder(h = 3, d = 6);\n    }\n}\n\n// Assembly\nunion() {\n    // Pot assembly\n    union() {\n        pot_body();\n        side_handles();\n        rim_detail();\n        base_feet();\n    }\n    \n    // Lid assembly\n    translate([0, 0, base_h + 6])\n        union() {\n            lid();\n            locking_lugs();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "fryer",
    "openscad_code": "// Mini Fryer Model (Medium complexity, 3D-printable)\n// Overall size ≈ 70 mm wide × 65 mm deep × 80 mm tall\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body shell\nmodule fryer_body() {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([65, 60, 55], center = true);\n            sphere(3);\n        }\n        // Hollow inside\n        minkowski() {\n            cube([65 - 2*wall, 60 - 2*wall, 55 - wall], center = true);\n            sphere(1.5);\n        }\n    }\n}\n\n// Control panel on front\nmodule control_panel() {\n    translate([0, -32, 0]) {\n        cube([30, 4, 15], center = true);\n    }\n    // Three knobs\n    for (x = [-10, 0, 10]) {\n        translate([x, -34, 0]) {\n            cylinder(h = 4, d = 6);\n            translate([0, 0, 4]) cylinder(h = 1, d = 4);\n        }\n    }\n}\n\n// Lid with handle\nmodule lid() {\n    difference() {\n        // Lid plate\n        translate([0, 0, 28.5]) {\n            minkowski() {\n                cube([67, 62, 2], center = true);\n                sphere(1);\n            }\n        }\n        // Relief cavity\n        translate([0, 0, 29]) {\n            minkowski() {\n                cube([63, 58, 2], center = true);\n                sphere(0.5);\n            }\n        }\n    }\n    // Handle bar\n    translate([0, 0, 34]) {\n        rotate([90, 0, 0]) cylinder(h = 40, d = 6, center = true);\n    }\n}\n\n// Short feet to lift fryer\nmodule feet() {\n    for (x = [-25, 25], y = [-22, 22]) {\n        translate([x, y, -29]) {\n            cylinder(h = 4, d = 6);\n        }\n    }\n}\n\n// Oil basket\nmodule basket() {\n    difference() {\n        // Basket body\n        translate([0, 0, 5]) {\n            minkowski() {\n                cube([50, 45, 30], center = true);\n                sphere(1);\n            }\n        }\n        // Hollow\n        translate([0, 0, 5]) {\n            minkowski() {\n                cube([50 - 2*wall, 45 - 2*wall, 30], center = true);\n                sphere(0.5);\n            }\n        }\n    }\n    // Basket handle arcs\n    translate([0, 0, 25]) {\n        difference() {\n            cylinder(h = 3, d = 5, center = true);\n            cylinder(h = 4, d = 3, center = true);\n        }\n    }\n    // Perforation pattern (simplified)\n    for (dx = [-20:10:20], dy = [-15:10:15], dz = [5:10:25]) {\n        translate([dx, dy, dz]) {\n            sphere(1);\n        }\n    }\n}\n\n// Assemble fryer\nunion() {\n    fryer_body();\n    control_panel();\n    lid();\n    feet();\n    translate([0, 0, 0]) basket();\n}",
    "renders": true
  },
  {
    "household_item": "grill",
    "openscad_code": "// Medium-complexity realistic-style grill, ~75 mm long\n\n// Overall scale factor\nscale = 1.2;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main firebox\nmodule firebox() {\n    difference() {\n        // Outer shell\n        cube([60*scale, 35*scale, 30*scale], center=true);\n        \n        // Hollow interior\n        translate([0,0,wall/2])\n            cube([(60-2*wall)*scale, (35-2*wall)*scale, 30*scale-wall], center=true);\n    }\n}\n\n// Lid with curved top\nmodule lid() {\n    difference() {\n        union() {\n            // Box part of lid\n            translate([0,0,15*scale])\n                cube([60.5*scale, 35.5*scale, 8*scale], center=true);\n            \n            // Curved top\n            translate([0,0,15*scale+8*scale])\n                scale([1,0.6,0.5])\n                    sphere(d=60*scale, $fn=60);\n        }\n        \n        // Hollow inside lid\n        translate([0,0,15*scale])\n            cube([(60.5-2*wall)*scale, (35.5-2*wall)*scale, 8*scale], center=true);\n    }\n}\n\n// Hinge between lid and firebox\nmodule hinge() {\n    for(x=[-20*scale, 20*scale]) {\n        translate([x, 0, 15*scale]) {\n            cylinder(h=35*scale, d=3*scale, center=true);\n        }\n    }\n}\n\n// Cooking grate made of parallel rods\nmodule grate() {\n    for(i=[-25:5:25]) {\n        translate([i*scale, 0, 8*scale])\n            cube([2*scale, 33*scale, 1.5*scale], center=true);\n    }\n}\n\n// Charcoal grate below\nmodule charcoal_grate() {\n    for(i=[-25:7:25]) {\n        translate([i*scale, 0, -5*scale])\n            cube([1.5*scale, 33*scale, 1*scale], center=true);\n    }\n}\n\n// Side shelf\nmodule shelf() {\n    difference() {\n        // Shelf surface\n        translate([33*scale, 0, 5*scale])\n            cube([12*scale, 30*scale, 2*scale], center=true);\n        \n        // Cutouts for weight saving and style\n        for(x=[-2:4:2])\n            for(y=[-10:5:10])\n                translate([33*scale+x*scale, y*scale, 6*scale])\n                    cube([3*scale, 3*scale, 2.1*scale], center=true);\n    }\n    \n    // Support struts\n    translate([33*scale, 0, -8*scale])\n        cube([1.5*scale, 30*scale, 13*scale], center=true);\n}\n\n// Wheels\nmodule wheels() {\n    for(side=[-1,1]) {\n        translate([28*scale, side*18*scale, -15*scale])\n            rotate([90,0,0])\n                cylinder(h=5*scale, d=10*scale, center=true);\n        \n        // Axle\n        translate([28*scale, 0, -15*scale])\n            rotate([0,90,0])\n                cylinder(h=36*scale, d=3*scale, center=true);\n    }\n}\n\n// Legs for stability\nmodule legs() {\n    for(side=[-1,1]) {\n        for(x=[-27,27]) {\n            translate([x*scale, side*17.5*scale, -15*scale])\n                cube([3*scale, 3*scale, 30*scale], center=true);\n        }\n    }\n}\n\n// Vent holes on bottom\nmodule vents() {\n    for(x=[-15:10:15]) {\n        for(y=[-10:10:10]) {\n            translate([x*scale, y*scale, -15*scale])\n                cube([4*scale, 4*scale, 2*scale], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    firebox();\n    lid();\n    hinge();\n    grate();\n    charcoal_grate();\n    shelf();\n    mirror([0,1,0]) shelf();\n    wheels();\n    legs();\n    vents();\n}",
    "renders": true
  },
  {
    "household_item": "cutlery",
    "openscad_code": "// Realistic Medium-Complexity Cutlery – Fork\n// Overall length ~100 mm, 3D-printable with no steep overhangs\n\n// Parameters\nlength = 100;         // total length\nhandle_len = 55;\nhandle_w   = 9;\nhandle_t   = 3.5;\nneck_len   = 8;\nhead_len   = length - handle_len - neck_len;\ntine_w     = 2.4;\ntine_gap   = 1.8;\ntine_len   = head_len * 0.65;\nwall       = 1.0;\n\n// Helper for rounded handle cross-section\nmodule oval(w, h, depth) {\n    hull() {\n        for (x = [-w/2+wall, w/2-wall])\n            for (y = [-h/2+wall, h/2-wall])\n                translate([x, y, 0])\n                    cylinder(r=wall, h=depth, $fn=12);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // main shape\n        linear_extrude(height=handle_len, scale=[1, 0.9], center=false)\n            offset(r=wall)\n                circle(d=handle_w, $fn=32);\n\n        // hollow cavity\n        translate([0, 0, wall])\n            linear_extrude(height=handle_len-wall-1, scale=[1, 0.9], center=false)\n                circle(d=handle_w-2*wall, $fn=32);\n    }\n}\n\n// Neck taper\nmodule neck() {\n    translate([0, 0, handle_len])\n        cylinder(h1=neck_len, h2=0, r1=handle_w/2, r2=handle_w/2*0.7, $fn=32);\n}\n\n// Fork head with four tines\nmodule head() {\n    translate([0, 0, handle_len+neck_len]) {\n        // base plate\n        cube([handle_w*0.7, tine_len, wall], center=true);\n\n        // tines\n        for (i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([i * (tine_w + tine_gap), tine_len/2, wall])\n                cube([tine_w, tine_len, handle_t], center=true);\n        }\n\n        // back curve\n        translate([0, -tine_len/2, wall/2])\n            cube([handle_w*0.7, wall, handle_t], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    rotate([90, 0, 0])  // lay flat for printing\n    union() {\n        handle();\n        neck();\n        head();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "utensils",
    "openscad_code": "// Realistic medium-complexity 3D-printable fork\n// Overall length ~110 mm\n\n$fn = 40;  // Smooth curves for realism\nwall = 1.2;  // Minimum printable wall thickness\n\nmodule handle() {\n    // Main handle body\n    difference() {\n        // Tapered handle shape\n        hull() {\n            translate([0, 0, 0]) cylinder(h=50, d1=8, d2=10, center=true);\n            translate([0, 0, 15]) cylinder(h=50, d1=10, d2=9, center=true);\n        }\n        \n        // Grip grooves\n        for (i = [1:5]) {\n            translate([0, 0, -20 + i*10])\n                rotate([0, 0, 0])\n                cylinder(h=2, d=12, center=true);\n        }\n    }\n}\n\nmodule neck() {\n    // Tapered transition from handle to tines\n    cylinder(h=12, d1=10, d2=5, center=true);\n}\n\nmodule tines() {\n    // Four fork tines\n    difference() {\n        // Overall tine base\n        translate([0, 0, 6])\n            cube([25, 12, 2], center=true);\n        \n        // Tapered end\n        translate([12.5, 0, 6])\n            rotate([0, 90, 0])\n            cylinder(h=12, d1=2, d2=0, center=true);\n    }\n    \n    // Individual tines\n    for (i = [-1.5:1:1.5]) {\n        translate([i*2.5, 0, 6])\n            cube([2, 12, 2], center=true);\n    }\n    \n    // Tine tips\n    for (i = [-1.5:1:1.5]) {\n        translate([i*2.5, 12, 6])\n            rotate([0, 90, 0])\n            cylinder(h=2, d1=2, d2=0, center=true);\n    }\n    \n    // Reinforcement between tines\n    translate([0, 2, 7])\n        cube([11, 4, 0.8], center=true);\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, -35, 0]) handle();\n    \n    // Neck\n    translate([0, -12, 0]) neck();\n    \n    // Tines\n    translate([0, 6, 0]) tines();\n}",
    "renders": true
  },
  {
    "household_item": "chopsticks",
    "openscad_code": "// Realistic Chopsticks - Medium Complexity\n// 3D printable with tapered shape and square grip sections\n\n// Parameters\nlength = 220;           // Total length of chopstick (mm)\ntip_dia = 2;            // Diameter at tip (mm)\nbase_dia = 8;           // Diameter at base (mm)\ngrip_len = 50;          // Length of grip section (mm)\ngrip_depth = 0.5;       // Depth of grip indentations (mm)\nwall_thick = 1.5;       // Wall thickness for hollowing (mm)\n\n// Create one chopstick\nmodule chopstick() {\n    difference() {\n        // Outer solid shape\n        union() {\n            // Main tapered body\n            cylinder(h = length, r1 = base_dia/2, r2 = tip_dia/2, $fn = 32);\n            \n            // Base ring for better grip\n            translate([0, 0, length])\n                cylinder(h = 5, r = base_dia/2 + 1, r2 = base_dia/2, $fn = 32);\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, -1])\n            cylinder(h = length + 2, r1 = base_dia/2 - wall_thick, \n                    r2 = tip_dia/2 - wall_thick, $fn = 32);\n        \n        // Grip indentations - square pattern\n        for (i = [0:5]) {\n            // Top face indentations\n            translate([0, 0, length - grip_len + i * 8])\n                rotate([0, 0, 45])\n                cube([grip_depth * 2, base_dia * 0.8, 4], center = true);\n                \n            // Side indentations (rotated 90 degrees)\n            translate([0, 0, length - grip_len + i * 8 + 4])\n                rotate([0, 0, 0])\n                cube([base_dia * 0.8, grip_depth * 2, 4], center = true);\n        }\n        \n        // Taper the tip slightly more for realistic point\n        translate([0, 0, -1])\n            cylinder(h = 5, r1 = tip_dia/2, r2 = 0, $fn = 32);\n    }\n    \n    // Add subtle rings along length for friction\n    for (i = [1:20]) {\n        translate([0, 0, i * 10])\n            difference() {\n                cylinder(h = 0.2, r = base_dia/2 - (base_dia - tip_dia)/2 * (i/22), $fn = 32);\n                translate([0, 0, -0.1])\n                    cylinder(h = 0.4, r = base_dia/2 - (base_dia - tip_dia)/2 * (i/22) - 0.1, $fn = 32);\n            }\n    }\n}\n\n// Create a pair of chopsticks\ntranslate([-10, 0, 0]) chopstick();\ntranslate([10, 0, 0]) mirror([1, 0, 0]) chopstick();",
    "renders": true
  },
  {
    "household_item": "teaspoon",
    "openscad_code": "// Realistic Teaspoon - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\nwall = 1.5;\n\nmodule spoon_head() {\n    // Main bowl shape\n    difference() {\n        hull() {\n            sphere(d = 40);\n            translate([0, -5, 0]) sphere(d = 35);\n        }\n        \n        // Hollow out the bowl\n        translate([0, 0, -2]) {\n            scale([0.85, 0.85, 1]) {\n                hull() {\n                    sphere(d = 38);\n                    translate([0, -3, 0]) sphere(d = 33);\n                }\n            }\n        }\n        \n        // Cut bottom flat\n        translate([0, 0, -15]) cube([50, 50, 30], center = true);\n    }\n    \n    // Add rim thickness\n    difference() {\n        translate([0, 0, 2]) {\n            scale([1.05, 1.05, 0.3]) {\n                hull() {\n                    sphere(d = 40);\n                    translate([0, -5, 0]) sphere(d = 35);\n                }\n            }\n        }\n        translate([0, 0, -5]) cube([50, 50, 10], center = true);\n    }\n}\n\nmodule spoon_handle() {\n    // Handle shaft with gradual taper\n    for(i = [0:9]) {\n        translate([0, -20 - i*5, 0]) {\n            rotate([0, 0, sin(i*15)]) {\n                scale([1 - i*0.05, 1 - i*0.03, 1]) {\n                    cylinder(h = 5, d1 = 6, d2 = 5.5, center = true);\n                }\n            }\n        }\n    }\n    \n    // Handle tip\n    translate([0, -70, 0]) {\n        sphere(d = 5.5);\n    }\n    \n    // Handle ridge for grip\n    for(i = [1:4]) {\n        translate([0, -25 - i*10, 2.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 1.5, d = 7, center = true);\n            }\n        }\n    }\n}\n\nmodule spoon_neck() {\n    // Transition from handle to head\n    hull() {\n        translate([0, -15, 0]) cylinder(h = 10, d = 8, center = true);\n        translate([0, -5, 0]) cylinder(h = 10, d = 12, center = true);\n    }\n    \n    // Smooth underside curve\n    translate([0, -10, -4]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 8, d = 10, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main spoon head\n    translate([0, 0, 0]) spoon_head();\n    \n    // Neck transition\n    translate([0, 0, 0]) spoon_neck();\n    \n    // Handle\n    translate([0, 0, 0]) spoon_handle();\n}",
    "renders": true
  },
  {
    "household_item": "tablespoon",
    "openscad_code": "// Realistic Tablespoon (medium complexity)\n// Overall length ~120mm (handle) + ~45mm (bowl) = ~165mm\n\n$fn = 36;   // smooth curves\n\n// -------------------- Main Assembly --------------------\nunion() {\n    handle();\n    neck();\n    bowl();\n}\n\n// -------------------- Handle --------------------\nmodule handle() {\n    difference() {\n        // Main handle shaft\n        rotate([90,0,0])\n            linear_extrude(height = 120, center = false, scale = 0.7)\n                circle(d = 12, $fn = 6);\n\n        // Ergonomic finger groove on top\n        translate([0, 60, 5])\n            rotate([0,90,0])\n                cylinder(h = 30, d1 = 8, d2 = 8, $fn = 16);\n\n        // Hole for hanging\n        translate([0, 110, 0])\n            rotate([90,0,0])\n                cylinder(h = 20, d = 4, center = true);\n    }\n}\n\n// -------------------- Neck --------------------\nmodule neck() {\n    // Tapered transition from handle to bowl\n    translate([0,120,0])\n        rotate([90,0,0])\n            cylinder(h = 25, d1 = 12, d2 = 30, $fn = 32);\n}\n\n// -------------------- Bowl --------------------\nmodule bowl() {\n    translate([0,145,0])\n        rotate([0,0,0])\n            difference() {\n                // Outer bowl shell\n                scale([1, 1.2, 0.45])\n                    sphere(d = 45, $fn = 64);\n\n                // Inner cavity\n                translate([0,0,-1])\n                    scale([0.9, 1.1, 0.4])\n                        sphere(d = 45, $fn = 64);\n\n                // Flatten bottom for printing stability\n                translate([0,0,-10])\n                    cube([50,50,20], center = true);\n\n                // Rim rounding\n                translate([0,0,9.5])\n                    scale([1, 1.2, 0.45])\n                        sphere(d = 42, $fn = 64);\n            }\n}",
    "renders": true
  },
  {
    "household_item": "dessertspoon",
    "openscad_code": "// Dessertspoon - Medium complexity, realistic style\n// Total length ~120mm, printable in one piece with no supports\n\n// Main parameters\nbowl_length = 40;\nbowl_width = 30;\nbowl_depth = 6;\nhandle_length = 80;\nhandle_width = 12;\nhandle_thickness = 3;\nwall_thickness = 2;\n\n// Bowl shape\nmodule spoon_bowl() {\n    difference() {\n        // Main bowl ellipsoid\n        scale([1, 0.8, 0.4])\n        sphere(d = bowl_width);\n        \n        // Hollow out inside\n        translate([0, 0, -bowl_depth/2])\n        scale([0.8, 0.7, 0.3])\n        sphere(d = bowl_width - wall_thickness*2);\n        \n        // Flatten bottom\n        translate([0, 0, -bowl_depth])\n        cube([bowl_width*2, bowl_width*2, bowl_depth*2], center = true);\n    }\n    \n    // Rim reinforcement\n    translate([0, 0, -bowl_depth/2])\n    rotate_extrude(angle = 360, $fn = 48)\n    translate([bowl_width/2 - wall_thickness/2, 0, 0])\n    circle(r = wall_thickness/2);\n}\n\n// Handle with ergonomic curves\nmodule spoon_handle() {\n    // Tapered handle body\n    hull() {\n        // Start at bowl\n        translate([-bowl_length/2, 0, 0])\n        scale([1, 0.8, 0.3])\n        sphere(d = handle_width);\n        \n        // End at handle tip\n        translate([-bowl_length/2 - handle_length, 0, 0])\n        scale([0.6, 0.8, 0.3])\n        sphere(d = handle_width * 0.7);\n    }\n    \n    // Top ridge for grip\n    for(i = [0:4]) {\n        translate([-bowl_length/2 - i*handle_length/4, 0, 2])\n        scale([1, 0.2, 0.1])\n        rotate([90, 0, 0])\n        cylinder(h = handle_width*0.8, d1 = handle_width*0.3, d2 = handle_width*0.2);\n    }\n    \n    // Side indentations\n    difference() {\n        children();\n        for(side = [-1, 1]) {\n            translate([-bowl_length/2 - handle_length/2, side*handle_width/3, 0])\n            rotate([0, 0, 30*side])\n            scale([0.8, 0.3, 1])\n            cylinder(h = handle_length/2, d = handle_width/2);\n        }\n    }\n}\n\n// Smooth transition between bowl and handle\nmodule spoon_neck() {\n    hull() {\n        // Connect to bowl back\n        translate([bowl_length/2 - 5, 0, 0])\n        sphere(d = handle_width);\n        \n        // Connect to handle\n        translate([-bowl_length/2 + 5, 0, 0])\n        sphere(d = handle_width);\n    }\n}\n\n// Assemble complete spoon\nunion() {\n    // Position bowl correctly\n    translate([bowl_length/2, 0, bowl_depth/2])\n    rotate([0, -20, 0])\n    spoon_bowl();\n    \n    // Handle with neck transition\n    spoon_handle() {\n        union() {\n            spoon_neck();\n            translate([-handle_length/2, 0, 0])\n            scale([handle_length/50, 1, handle_thickness/3])\n            cube([handle_length, handle_width, handle_thickness], center = true);\n        }\n    }\n}\n\n// Small decorative hole in handle end\ntranslate([-bowl_length/2 - handle_length + 5, 0, 0])\nrotate([90, 0, 0])\ncylinder(h = handle_thickness*2, d = 3, $fn = 16);",
    "renders": true
  },
  {
    "household_item": "saladfork",
    "openscad_code": "// Salad fork - realistic style, medium complexity\n\n// Overall dimensions (mm)\nfork_length = 160;\nfork_width = 32;\nfork_thickness = 4;\n\n// Handle parameters\nhandle_length = 100;\nhandle_width = 16;\nhandle_thickness = 4;\n\n// Fork head parameters\nhead_length = 60;\ntine_length = 45;\ntine_width = 3.5;\ntine_gap = 2.5;\ntine_count = 4;\ntine_tip_radius = 1.5;\n\n// Transition curve radius\ntransition_radius = 8;\n\n// Wall thickness for printing\nwall = 2;\n\nmodule handle() {\n    // Main handle shaft with ergonomic oval cross-section\n    linear_extrude(height=handle_length, center=true, scale=[1.05,1], $fn=30)\n        difference() {\n            circle(d=handle_width, $fn=30);\n            circle(d=handle_width-wall*2, $fn=30);\n        }\n    \n    // Tapered end cap\n    translate([0,0,handle_length/2-2])\n        cylinder(h=4, d1=handle_width, d2=handle_width*0.7, $fn=30);\n}\n\nmodule transition() {\n    // Smooth curved transition from handle to fork head\n    hull() {\n        // Handle side\n        translate([0,0,-transition_radius])\n            cylinder(h=transition_radius*2, d=handle_width, center=true, $fn=30);\n        \n        // Fork head side  \n        translate([0,0,transition_radius])\n            cylinder(h=transition_radius*2, d=fork_width*0.8, center=true, $fn=30);\n    }\n}\n\nmodule fork_head() {\n    // Main fork head body\n    difference() {\n        // Outer shape - slightly tapered\n        translate([0,0,head_length/2])\n            cylinder(h=head_length, d1=fork_width, d2=fork_width*0.9, $fn=30);\n            \n        // Hollow interior for material saving\n        translate([0,0,head_length/2])\n            cylinder(h=head_length, d1=fork_width-wall*2, d2=fork_width*0.9-wall*2, $fn=30);\n    }\n    \n    // Tines\n    total_tine_width = tine_count*tine_width + (tine_count-1)*tine_gap;\n    start_offset = -(total_tine_width/2) + tine_width/2;\n    \n    for(i=[0:tine_count-1]) {\n        x_pos = start_offset + i*(tine_width + tine_gap);\n        \n        // Individual tine\n        translate([x_pos, 0, head_length - tine_length/2])\n            difference() {\n                // Tine body - tapered to point\n                cylinder(h=tine_length, d1=tine_width, d2=tine_tip_radius*2, $fn=8);\n                \n                // Hollow interior\n                cylinder(h=tine_length, d1=tine_width-wall*2, d2=tine_tip_radius*2-0.5, $fn=8);\n            }\n    }\n    \n    // Reinforcement ribs between tines\n    for(i=[0:tine_count-2]) {\n        rib_x = start_offset + (i+0.5)*(tine_width + tine_gap);\n        translate([rib_x, 0, head_length - tine_length*0.7])\n            cube([tine_gap-wall, wall, tine_length*0.4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle section\n    translate([0,0,-fork_length/2 + handle_length/2])\n        handle();\n    \n    // Transition section\n    translate([0,0,-fork_length/2 + handle_length - transition_radius])\n        transition();\n    \n    // Fork head section\n    translate([0,0,-fork_length/2 + handle_length])\n        fork_head();\n}",
    "renders": true
  },
  {
    "household_item": "dinnerfork",
    "openscad_code": "// Realistic Dinner Fork - Medium Complexity\n// Overall length ~190mm, width ~25mm at widest point\n\n// Fork parameters\nfork_length = 190;\nhandle_length = 100;\ntine_length = 85;\ntine_width = 2.5;\ntine_thickness = 1.5;\nnum_tines = 4;\ntine_spacing = 6;\nhandle_width = 12;\nhandle_thickness = 8;\nneck_width = 6;\nneck_length = 5;\n\n// Helper module for rounded handle\nmodule rounded_cube(size, radius) {\n    x = size.x;\n    y = size.y;\n    z = size.z;\n    \n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([x-radius, radius, radius]) sphere(r=radius);\n        translate([radius, y-radius, radius]) sphere(r=radius);\n        translate([x-radius, y-radius, radius]) sphere(r=radius);\n        translate([radius, radius, z-radius]) sphere(r=radius);\n        translate([x-radius, radius, z-radius]) sphere(r=radius);\n        translate([radius, y-radius, z-radius]) sphere(r=radius);\n        translate([x-radius, y-radius, z-radius]) sphere(r=radius);\n    }\n}\n\n// Handle with ergonomic curve\nmodule handle() {\n    // Main handle body\n    difference() {\n        hull() {\n            rounded_cube([handle_length, handle_width, handle_thickness], 4);\n            translate([handle_length-20, 0, 0]) \n                scale([1, 0.8, 0.9]) \n                    rounded_cube([20, handle_width, handle_thickness], 3);\n        }\n        \n        // Grooves for grip\n        for(i = [1:3]) {\n            translate([handle_length*0.3 + i*20, -0.1, handle_thickness*0.4])\n                cube([3, handle_width+0.2, 1.5], center=true);\n        }\n    }\n    \n    // End cap curve\n    translate([handle_length, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=handle_width, r1=handle_thickness/2, r2=handle_thickness/2-1, center=true);\n}\n\n// Neck transition between handle and tines\nmodule neck() {\n    hull() {\n        translate([0, 0, 0])\n            rounded_cube([neck_length, neck_width, tine_thickness*2], 2);\n        translate([neck_length, 0, 0])\n            rounded_cube([neck_length/2, tine_spacing*(num_tines-1)+tine_width, tine_thickness*2], 2);\n    }\n}\n\n// Individual tine with realistic taper\nmodule single_tine(length, width, thickness, taper_ratio=0.6) {\n    // Tapered body\n    hull() {\n        translate([0, 0, 0])\n            cube([length*0.8, width, thickness], center=true);\n        translate([length, 0, 0])\n            cube([length*0.2, width*taper_ratio, thickness*taper_ratio], center=true);\n    }\n    \n    // Rounded tip\n    translate([length, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=width*taper_ratio, r=thickness*taper_ratio/2, center=true);\n    \n    // Beveled edges on tip\n    difference() {\n        translate([length-2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=4, r=width/2, center=true);\n        translate([length+1, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=6, r=width/2-0.5, center=true);\n    }\n}\n\n// Fork head with tines\nmodule fork_head() {\n    total_width = tine_spacing * (num_tines - 1) + tine_width;\n    \n    union() {\n        // Base plate\n        translate([-neck_length/2, 0, 0])\n            rounded_cube([neck_length*1.5, total_width, tine_thickness*2], 2);\n        \n        // Tines\n        for(i = [0:num_tines-1]) {\n            y_pos = -total_width/2 + tine_width/2 + i * tine_spacing;\n            translate([neck_length/2, y_pos, 0])\n                single_tine(tine_length, tine_width, tine_thickness);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Handle\n    translate([-handle_length, 0, 0])\n        handle();\n    \n    // Neck\n    translate([0, 0, 0])\n        neck();\n    \n    // Fork head\n    translate([neck_length, 0, 0])\n        fork_head();\n}",
    "renders": true
  },
  {
    "household_item": "steakknife",
    "openscad_code": "// Steak Knife - Medium complexity realistic style\n// Overall length ~95 mm, 3D printable with no overhangs\n\n// Parameters\nblade_length = 65;\nblade_width = 18;\nblade_thickness = 1.5;\nhandle_length = 30;\nhandle_width = 14;\nhandle_thickness = 9;\nbolster_width = 20;\nbolster_thickness = 2.5;\n\n// Main assembly\nunion() {\n    // Knife blade\n    translate([0, 0, -blade_thickness/2]) {\n        difference() {\n            // Blade main body\n            linear_extrude(height = blade_thickness, convexity = 10) {\n                polygon(points=[\n                    [0, 0],\n                    [blade_length*0.9, 0],\n                    [blade_length, blade_width*0.4],\n                    [blade_length*0.95, blade_width*0.7],\n                    [blade_length*0.85, blade_width],\n                    [0, blade_width*0.8],\n                    [0, 0]\n                ]);\n            }\n            \n            // Blade bevels\n            for(i = [1:3]) {\n                translate([blade_length*0.3 + i*5, 0, -1]) {\n                    cube([blade_length*0.5, blade_width*0.2, blade_thickness+2]);\n                }\n            }\n        }\n        \n        // Serrated edge\n        for(i = [0:4:blade_length-4]) {\n            translate([i, blade_width-1, -0.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=2, r1=1.5, r2=0.5, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Bolster\n    translate([-bolster_thickness, (blade_width-bolster_width)/2, -bolster_thickness/2]) {\n        cube([bolster_thickness, bolster_width, bolster_thickness]);\n    }\n    \n    // Handle\n    translate([-handle_length, 0, -handle_thickness/2]) {\n        difference() {\n            // Main handle shape\n            hull() {\n                // Front of handle\n                translate([0, blade_width/2, 0]) {\n                    sphere(d=handle_width*1.2, $fn=16);\n                }\n                // Rear of handle\n                translate([-handle_length+handle_width/2, handle_width/2, 0]) {\n                    sphere(d=handle_width*0.9, $fn=16);\n                }\n            }\n            \n            // Handle hollow for weight reduction\n            translate([-handle_length*0.5, handle_width/2, 0]) {\n                scale([0.6, 0.6, 0.6]) {\n                    sphere(d=handle_width*0.9, $fn=16);\n                }\n            }\n        }\n        \n        // Handle grip pattern\n        for(i = [1:3]) {\n            translate([-i*handle_length/4, 0, handle_thickness/2+0.1]) {\n                cube([1, handle_width*0.8, 1]);\n            }\n        }\n    }\n    \n    // Rivets\n    for(i = [1:3]) {\n        translate([-i*handle_length/4, handle_width*0.3, handle_thickness/2+0.5]) {\n            cylinder(h=1, d=2, $fn=12);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "breadknife",
    "openscad_code": "// Breadknife - Realistic style, medium complexity\n// Approximate dimensions: 200mm long, 30mm wide, 10mm thick\n\n// Parameters\nblade_length = 180;\nblade_width = 25;\nblade_thickness = 1.5;\nhandle_length = 70;\nhandle_width = 28;\nhandle_thickness = 20;\nserration_depth = 3;\nserration_width = 2.5;\nserration_count = 70;\n\n// Main assembly\nunion() {\n    // Knife blade\n    translate([handle_length, 0, 0]) \n        blade();\n    \n    // Handle\n    translate([0, 0, 0]) \n        handle();\n}\n\n// Blade module with serrated edge\nmodule blade() {\n    difference() {\n        // Main blade body - tapered shape\n        hull() {\n            // Handle end\n            translate([0, 0, blade_thickness/2]) \n                cube([10, blade_width, blade_thickness], center=true);\n            \n            // Tip end\n            translate([blade_length-10, 0, blade_thickness/2]) \n                scale([0.2, 0.8, 1]) \n                cube([20, blade_width, blade_thickness], center=true);\n        }\n        \n        // Spine chamfer\n        translate([-5, 0, blade_thickness/2+0.1]) \n            cube([blade_length+10, blade_width+2, blade_thickness/2], center=true);\n        \n        // Serrations on bottom edge\n        for(i = [0:serration_count-1]) {\n            translate([i * serration_width, -blade_width/2-0.1, -blade_thickness/2-0.1]) \n                rotate([0, 0, 45]) \n                cube([serration_width*1.2, serration_depth+0.2, blade_thickness+0.2]);\n            \n            translate([i * serration_width + serration_width/2, -blade_width/2-0.1, -blade_thickness/2-0.1]) \n                rotate([0, 0, -45]) \n                cube([serration_width*1.2, serration_depth+0.2, blade_thickness+0.2]);\n        }\n    }\n}\n\n// Handle module with ergonomic grip\nmodule handle() {\n    union() {\n        // Main handle body\n        difference() {\n            // Tapered handle shape\n            hull() {\n                // Front of handle\n                translate([0, 0, handle_thickness/2]) \n                    scale([1, 0.9, 1]) \n                    cylinder(h=handle_thickness, d=handle_width, $fn=20, center=true);\n                \n                // Rear of handle\n                translate([handle_length, 0, handle_thickness/2]) \n                    cylinder(h=handle_thickness, d=handle_width*1.1, $fn=20, center=true);\n            }\n            \n            // Finger grooves\n            for(i = [1:3]) {\n                translate([i*handle_length/4, -handle_width/2-0.1, 0]) \n                    rotate([0, 90, 0]) \n                    cylinder(h=handle_width+0.2, d=handle_thickness*0.6, $fn=20, center=true);\n            }\n            \n            // Hanging hole\n            translate([handle_length-10, 0, handle_thickness/2]) \n                rotate([90, 0, 0]) \n                cylinder(h=handle_thickness+0.2, d=6, $fn=20, center=true);\n        }\n        \n        // Handle guard\n        translate([0, 0, handle_thickness/2]) \n            difference() {\n                cylinder(h=handle_thickness+2, d=handle_width*1.2, $fn=20, center=true);\n                cylinder(h=handle_thickness+3, d=handle_width*0.8, $fn=20, center=true);\n            }\n        \n        // Grip texture - raised dots\n        for(x = [10:15:handle_length-15]) {\n            for(y = [-10:5:10]) {\n                translate([x, y, handle_thickness/2+0.5]) \n                    sphere(d=2.5, $fn=8);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "paringknife",
    "openscad_code": "// Paring Knife - Realistic Style, Medium Complexity\n// Overall length: 80mm (blade 45mm, handle 35mm)\n\nmodule paring_knife() {\n    // Blade\n    difference() {\n        union() {\n            // Blade spine\n            translate([0, -2, 0])\n                cube([45, 4, 1.5], center=true);\n            \n            // Blade body\n            translate([22.5, -7.5, 0])\n                cube([45, 15, 0.5], center=true);\n            \n            // Curved tip\n            translate([45, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r1=7.5, r2=0, $fn=20);\n        }\n        \n        // Bevel edge\n        translate([22.5, -11, -0.25])\n            cube([45, 10, 2], center=true);\n        \n        // Blade hollow\n        translate([22.5, 0, 0.5])\n            cube([40, 13, 0.5], center=true);\n    }\n    \n    // Bolster\n    translate([-2, 0, 0])\n        cylinder(h=4, r=5, $fn=32);\n    \n    // Handle\n    difference() {\n        union() {\n            // Handle main body\n            translate([-22, 0, 0])\n                scale([1, 0.8, 0.8])\n                    sphere(r=6, $fn=32);\n            \n            // Handle grip texture rings\n            for(i=[-15:-5:5]) {\n                translate([i, 0, 0])\n                    cylinder(h=2, r1=5.8, r2=5.8, $fn=32);\n            }\n        }\n        \n        // Handle hollow\n        translate([-22, 0, 0])\n            scale([0.8, 0.6, 0.6])\n                sphere(r=6, $fn=32);\n        \n        // Rivets holes\n        translate([-15, 0, 0])\n            cylinder(h=6, r=1, $fn=16);\n        translate([-10, 0, 0])\n            cylinder(h=6, r=1, $fn=16);\n        translate([-5, 0, 0])\n            cylinder(h=6, r=1, $fn=16);\n    }\n    \n    // Rivets\n    translate([-15, 0, 3])\n        cylinder(h=1, r=1.2, $fn=16);\n    translate([-10, 0, 3])\n        cylinder(h=1, r=1.2, $fn=16);\n    translate([-5, 0, 3])\n        cylinder(h=1, r=1.2, $fn=16);\n}\n\n// Render the knife\nparing_knife();",
    "renders": true
  },
  {
    "household_item": "chefsknife",
    "openscad_code": "// Chef's Knife - Realistic Medium Complexity\n// 3D printable model with proper wall thickness\n// Total length ~85mm (3.3 inches)\n\n$fn = 50; // Smooth curves\n\n// Overall dimensions\nblade_length = 70;\nblade_width = 25;\nblade_thickness = 2;\nhandle_length = 70;\nhandle_diameter = 20;\n\nmodule knife() {\n    union() {\n        // Main blade\n        translate([0, 0, blade_thickness/2])\n            blade();\n        \n        // Handle\n        translate([-handle_length/2, 0, handle_diameter/2])\n            rotate([0, 90, 0])\n                handle();\n    }\n}\n\nmodule blade() {\n    difference() {\n        // Blade body\n        union() {\n            // Main blade shape\n            translate([blade_length/2, 0, 0])\n                scale([blade_length, blade_width, blade_thickness])\n                    sphere(0.5);\n            \n            // Tapered tip\n            translate([blade_length-5, 0, 0])\n                scale([10, blade_width*0.7, blade_thickness])\n                    rotate([0, 0, 90])\n                        cylinder(h=10, r1=5, r2=0);\n        }\n        \n        // Blade bevel (cutting edge)\n        translate([blade_length/2, -blade_width/2-1, -blade_thickness/2-1])\n            cube([blade_length+2, blade_width/2, blade_thickness+2]);\n        \n        // Spine taper\n        translate([0, blade_width/2-2, blade_thickness/2])\n            rotate([0, 30, 0])\n                cube([blade_length, 4, blade_thickness]);\n    }\n    \n    // Bolster (transition from blade to handle)\n    translate([-2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=4, r1=handle_diameter/2+2, r2=handle_diameter/2);\n}\n\nmodule handle() {\n    difference() {\n        // Main handle body\n        hull() {\n            // Front grip\n            translate([0, 0, 0])\n                scale([1, 0.9, 0.9])\n                    sphere(handle_diameter/2);\n            \n            // Rear grip\n            translate([handle_length-5, 0, 0])\n                scale([0.8, 0.9, 0.9])\n                    sphere(handle_diameter/2);\n            \n            // Center section\n            translate([handle_length/2, 0, 0])\n                cylinder(h=handle_length, r=handle_diameter/2);\n        }\n        \n        // Handle grip grooves\n        for(i = [1:6]) {\n            translate([i*10-5, 0, handle_diameter/2-2])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_diameter-4, r=2, $fn=6);\n        }\n        \n        // Finger guard groove\n        translate([5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_diameter, r=handle_diameter/2-3);\n    }\n    \n    // Rivets (3 decorative)\n    for(i = [0:2]) {\n        translate([i*20+15, 0, handle_diameter/2-1])\n            cylinder(h=2, r=3);\n    }\n}\n\n// Generate the knife\nknife();",
    "renders": true
  },
  {
    "household_item": "cleaver",
    "openscad_code": "// Realistic Cleaver - Medium Complexity\n// Overall size ~80mm long\n\n$fn = 32;\n\n// Main module\nmodule cleaver() {\n    // Blade\n    union() {\n        // Blade body\n        translate([0, 0, 2])\n        difference() {\n            // Main blade shape\n            translate([0, 0, 0])\n            scale([1, 0.6, 0.1])\n            cube([60, 40, 20], center=true);\n            \n            // Cutting edge bevel\n            translate([30, 0, -1])\n            rotate([0, 15, 0])\n            cube([10, 50, 5], center=true);\n        }\n        \n        // Blade spine\n        translate([-25, 0, 3.5])\n        scale([0.1, 0.5, 0.8])\n        cube([50, 40, 5], center=true);\n        \n        // Hole in blade\n        translate([-20, 15, 3])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=3, center=true);\n    }\n    \n    // Handle\n    union() {\n        // Handle grip\n        translate([-35, 0, 0])\n        difference() {\n            // Main handle\n            scale([0.4, 0.3, 1])\n            cube([30, 30, 15], center=true);\n            \n            // Grip grooves\n            for(i = [-2:1:2]) {\n                translate([-35 + i*5, 0, 0])\n                scale([0.1, 0.31, 1.1])\n                cube([30, 30, 15], center=true);\n            }\n        }\n        \n        // Handle bolster\n        translate([-20, 0, 0])\n        difference() {\n            cylinder(h=8, r1=8, r2=6);\n            cylinder(h=10, r1=4, r2=2);\n        }\n        \n        // Handle end cap\n        translate([-50, 0, 0])\n        cylinder(h=5, r1=6, r2=8);\n        \n        // Rivets\n        for(i = [-1, 1]) {\n            translate([-35, i*7, 0])\n            cylinder(h=15, r=2, center=true);\n        }\n    }\n}\n\n// Scale to reasonable size\nscale(0.8)\nrotate([0, 0, 45])\ncleaver();",
    "renders": true
  },
  {
    "household_item": "coaster",
    "openscad_code": "// Realistic 3D printable coaster – cork-like base with subtle grip rings\n// Overall footprint: Ø90 mm × 4 mm thick\n\n// Parameters\ncoaster_d = 90;          // [mm] overall diameter\ncoaster_h = 4;           // [mm] total height\nwall_t    = 1.6;         // [mm] shell thickness for printing\ngrip_ridges = 6;         // number of concentric grip rings\nridge_h = 0.4;           // [mm] height of grip ridges\n\n// ---------- Base disc (hollow to save material) ----------\nmodule base_disc() {\n    difference() {\n        cylinder(d=coaster_d, h=coaster_h, $fn=100);          // solid disc\n        cylinder(d=coaster_d - 2*wall_t, h=coaster_h+0.1, $fn=100);  // hollow core\n    }\n}\n\n// ---------- Concentric grip rings on top ----------\nmodule grip_rings() {\n    for (r = [1 : grip_ridges]) {\n        ring_d = coaster_d - (r * 11);  // evenly spaced rings\n        difference() {\n            cylinder(d=ring_d + 1, h=ridge_h, $fn=100);       // ridge body\n            cylinder(d=ring_d, h=ridge_h+0.1, $fn=100);       // remove center to leave ring\n        }\n    }\n}\n\n// ---------- Small drainage hole in center ----------\nmodule center_hole() {\n    translate([0, 0, -0.1])\n        cylinder(d=4, h=coaster_h+0.2, $fn=32);\n}\n\n// ---------- Assembly ----------\nunion() {\n    base_disc();\n    grip_rings();\n    center_hole();\n}",
    "renders": true
  },
  {
    "household_item": "tablecloth",
    "openscad_code": "// Tablecloth 3D Model - Realistic Medium Complexity\n// Dimensions: 90mm x 55mm x 2mm with realistic fabric texture\n\n// Parameters\ntable_length = 90;\ntable_width = 55;\ncloth_thickness = 2;\nhem_thickness = 3;\nfold_depth = 1.5;\nwave_amplitude = 3;\nwave_frequency = 6;\ncorner_radius = 8;\n\n// Main tablecloth module\nmodule tablecloth() {\n    // Base cloth body\n    difference() {\n        // Main cloth with rounded corners\n        rounded_cube(table_length, table_width, cloth_thickness, corner_radius);\n        \n        // Create fabric texture pattern on top\n        fabric_texture();\n    }\n    \n    // Hem around edges\n    hem();\n    \n    // Natural folds and drapes\n    folds();\n    \n    // Corner weights\n    corner_weights();\n}\n\n// Rounded cube helper\nmodule rounded_cube(l, w, h, r) {\n    hull() {\n        for (i = [[r, r, 0], [l-r, r, 0], [l-r, w-r, 0], [r, w-r, 0]]) {\n            translate([i[0], i[1], h/2])\n                cylinder(h=h, r=r, $fn=20);\n        }\n    }\n}\n\n// Fabric texture pattern\nmodule fabric_texture() {\n    // Weave pattern holes\n    for (x = [5:10:table_length-5]) {\n        for (y = [5:10:table_width-5]) {\n            translate([x, y, -0.5])\n                cube([2, 2, cloth_thickness+1], center=true);\n        }\n    }\n    \n    // Subtle wave texture\n    for (x = [0:wave_frequency:table_length]) {\n        for (y = [0:wave_frequency:table_width]) {\n            translate([x, y, -0.1])\n                cylinder(h=cloth_thickness+0.2, r1=1, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Hem around edges\nmodule hem() {\n    // Bottom hem\n    translate([0, 0, -hem_thickness/2])\n        difference() {\n            rounded_cube(table_length+4, table_width+4, hem_thickness, corner_radius+2);\n            rounded_cube(table_length, table_width, hem_thickness+0.1, corner_radius);\n        }\n}\n\n// Natural folds\nmodule folds() {\n    // Long side folds\n    for (x = [15:15:table_length-15]) {\n        difference() {\n            translate([x, table_width/2, cloth_thickness/2 - fold_depth/2])\n                cube([2, table_width-10, fold_depth]);\n            translate([x, table_width/2, cloth_thickness/2])\n                cylinder(h=fold_depth+0.1, r=table_width/2-5, $fn=32);\n        }\n    }\n    \n    // Short side folds\n    for (y = [10:10:table_width-10]) {\n        difference() {\n            translate([table_length/2, y, cloth_thickness/2 - fold_depth/2])\n                cube([table_length-10, 2, fold_depth]);\n            translate([table_length/2, y, cloth_thickness/2])\n                cylinder(h=fold_depth+0.1, r=table_length/2-5, $fn=32);\n        }\n    }\n}\n\n// Corner weights for realistic drape\nmodule corner_weights() {\n    corners = [[0,0], [table_length,0], [table_length,table_width], [0,table_width]];\n    \n    for (i = [0:3]) {\n        translate([corners[i][0], corners[i][1], -hem_thickness-1])\n            cylinder(h=2, r=5, $fn=16);\n    }\n}\n\n// Render the tablecloth\ntablecloth();",
    "renders": true
  },
  {
    "household_item": "napkinring",
    "openscad_code": "// Realistic Medium-Complexity Napkin Ring\n// Dimensions in millimeters\n$fn = 48;  // Smooth curves\n\n// Overall size\nring_outer_d = 42;\nring_inner_d = 28;\nring_height = 35;\nwall_thickness = (ring_outer_d - ring_inner_d) / 2;\n\n// Decorative band parameters\nband_height = 6;\nband_gap = 2;\nband_ridges = 12;\nridge_width = 1.5;\nridge_depth = 0.8;\n\nmodule ring_body() {\n    difference() {\n        cylinder(h = ring_height, d = ring_outer_d, center = true);\n        cylinder(h = ring_height + 2, d = ring_inner_d, center = true);\n    }\n}\n\nmodule decorative_band() {\n    for (i = [0 : band_ridges - 1]) {\n        rotate([0, 0, i * 360 / band_ridges])\n        translate([0, (ring_outer_d + ring_inner_d) / 4, 0])\n        cube([ridge_width, (ring_outer_d - ring_inner_d) / 2, band_height], center = true);\n    }\n}\n\nmodule top_band() {\n    translate([0, 0, ring_height/2 - band_height/2])\n    difference() {\n        cylinder(h = band_height, d = ring_outer_d, center = true);\n        cylinder(h = band_height + 0.1, d = ring_inner_d, center = true);\n    }\n}\n\nmodule bottom_band() {\n    translate([0, 0, -ring_height/2 + band_height/2])\n    difference() {\n        cylinder(h = band_height, d = ring_outer_d, center = true);\n        cylinder(h = band_height + 0.1, d = ring_inner_d, center = true);\n    }\n}\n\nmodule center_pattern() {\n    difference() {\n        ring_body();\n        \n        // Remove areas for raised pattern\n        intersection() {\n            cylinder(h = ring_height - 2*band_height - 2*band_gap, d = ring_outer_d - 2*ridge_depth, center = true);\n            \n            // Create oval cutouts for grip\n            for (i = [0 : 5]) {\n                rotate([0, 0, i * 60])\n                translate([(ring_outer_d + ring_inner_d)/4, 0, 0])\n                scale([1.5, 0.8, 1])\n                cylinder(h = ring_height - 2*band_height - 2*band_gap + 1, d = 6, center = true);\n            }\n        }\n    }\n}\n\n// Build the napkin ring\nunion() {\n    ring_body();\n    \n    // Top decorative band with ridges\n    intersection() {\n        top_band();\n        decorative_band();\n    }\n    \n    // Bottom decorative band with ridges\n    intersection() {\n        bottom_band();\n        decorative_band();\n    }\n    \n    // Center patterned section\n    center_pattern();\n}",
    "renders": true
  },
  {
    "household_item": "saltshaker",
    "openscad_code": "// Realistic Saltshaker – Medium Complexity\n// 3D-printable, ~70 mm tall, 2 mm wall thickness\n\n$fn = 36;          // Smooth curves\nwall = 2;          // Wall thickness for printability\n\n// Overall dimensions\nheight = 70;\nbody_r = 24;\ncap_r  = 25.5;     // Slightly larger to slide over body\ncap_h  = 25;\n\nmodule saltshaker() {\n    union() {\n        body();\n        cap();\n    }\n}\n\n// Main glass-like body\nmodule body() {\n    difference() {\n        // Outer profile (revolved)\n        rotate_extrude()\n            polygon([\n                [0, 0],\n                [body_r, 0],\n                [body_r - 3, height * 0.85],\n                [body_r - 5, height],\n                [0, height]\n            ]);\n        // Inner cavity\n        translate([0, 0, wall])\n            rotate_extrude()\n                polygon([\n                    [0, 0],\n                    [body_r - wall, 0],\n                    [body_r - wall - 2, height * 0.85 - wall],\n                    [body_r - wall - 3, height - wall - 2],\n                    [0, height - wall - 2]\n                ]);\n    }\n}\n\n// Snap-fit cap with holes\nmodule cap() {\n    translate([0, 0, height])\n    difference() {\n        // Outer cap shell\n        union() {\n            cylinder(h = cap_h, r1 = cap_r, r2 = cap_r);\n            // Rounded top\n            translate([0, 0, cap_h])\n                sphere(d = cap_r * 2);\n        }\n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h = cap_h + wall, r1 = body_r, r2 = body_r);\n        \n        // Shaker holes pattern\n        hole_pattern();\n        \n        // Small lip for snap fit\n        translate([0, 0, cap_h - 4])\n            cylinder(h = 4 + wall, r1 = body_r + 0.2, r2 = body_r + 0.2);\n    }\n}\n\n// Hexagonal hole pattern\nmodule hole_pattern() {\n    // Central hole on top\n    translate([0, 0, cap_h + cap_r])\n        sphere($fn = 6, r = 1.5);\n    \n    // Circular array of 6 holes\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([cap_r * 0.5, 0, cap_h + cap_r])\n                sphere($fn = 6, r = 1.5);\n    }\n}\n\n// Render\nsaltshaker();",
    "renders": true
  },
  {
    "household_item": "peppermill",
    "openscad_code": "$fs = 0.4;\n$fa = 2;\n\n// Overall dimensions\nbody_h = 85;\nbody_d = 45;\nbase_h = 20;\ncap_h = 25;\nknob_d = 25;\n\nmodule peppermill() {\n    // Main body cylinder with slight taper\n    difference() {\n        cylinder(h=body_h, d1=body_d*0.9, d2=body_d, center=false);\n        // Central bore for peppercorns\n        translate([0,0,-1])\n            cylinder(h=body_h+2, d=body_d*0.7, center=false);\n    }\n\n    // Bottom base with small lip\n    translate([0,0,0])\n        difference() {\n            cylinder(h=base_h, d=body_d*1.1, center=false);\n            translate([0,0,base_h-2])\n                cylinder(h=2, d=body_d, center=false);\n            // Center hole continues\n            translate([0,0,-1])\n                cylinder(h=base_h+2, d=body_d*0.7, center=false);\n        }\n\n    // Top grinding mechanism housing\n    translate([0,0,body_h])\n        difference() {\n            cylinder(h=10, d=body_d*0.95, center=false);\n            translate([0,0,-1])\n                cylinder(h=12, d=body_d*0.7, center=false);\n        }\n\n    // Rotating top cap/knob\n    translate([0,0,body_h+10])\n        difference() {\n            cylinder(h=cap_h, d=knob_d, center=false);\n            // Inner shaft\n            translate([0,0,-1])\n                cylinder(h=cap_h+2, d=knob_d*0.3, center=false);\n            // Knurling on top\n            for (i=[0:30:359]) {\n                rotate([0,0,i])\n                    translate([knob_d*0.35, 0, cap_h-8])\n                        cube([knob_d*0.1, 2, 6], center=true);\n            }\n        }\n\n    // Adjustment ring below cap\n    translate([0,0,body_h+8])\n        difference() {\n            cylinder(h=6, d=body_d+4, center=false);\n            translate([0,0,-1])\n                cylinder(h=8, d=body_d, center=false);\n            // Adjustment notches\n            for (i=[0:45:359]) {\n                rotate([0,0,i])\n                    translate([(body_d+4)/2, 0, 1])\n                        cube([3, 1.5, 4], center=true);\n            }\n        }\n\n    // Window slots to see pepper level\n    for (i=[0:90:269]) {\n        rotate([0,0,i])\n            translate([body_d/2-2, -4, body_h/2])\n                cube([4, 8, 20], center=true);\n    }\n\n    // Logo/text emboss\n    translate([0,0,body_h/2])\n        rotate([90,0,0])\n            linear_extrude(height=1)\n                text(\"PEPPER\", size=8, halign=\"center\", valign=\"center\");\n}\n\npeppermill();",
    "renders": true
  },
  {
    "household_item": "sugarbowl",
    "openscad_code": "// Sugarbowl - realistic style, medium complexity\n// Designed for 3D printing, approx 70mm diameter, 60mm height\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Main parameters\nbowl_d = 70;\nbowl_h = 35;\nwall_t = 2.5;\nbase_h = 5;\nlid_clearance = 0.3;\n\n// Base\ndifference() {\n    cylinder(h = base_h, d = bowl_d + 4, center = false);\n    translate([0, 0, -0.1])\n        cylinder(h = base_h + 0.2, d = bowl_d - wall_t * 2, center = false);\n}\n\n// Bowl body\ntranslate([0, 0, base_h])\ndifference() {\n    cylinder(h = bowl_h, d1 = bowl_d + 2, d2 = bowl_d - 8, center = false);\n    translate([0, 0, wall_t])\n        cylinder(h = bowl_h + 0.2, d1 = bowl_d + 2 - wall_t * 2, d2 = bowl_d - 8 - wall_t * 2, center = false);\n}\n\n// Lid base\ntranslate([0, 0, base_h + bowl_h + lid_clearance])\ndifference() {\n    cylinder(h = 8, d = bowl_d + 2, center = false);\n    translate([0, 0, -0.1])\n        cylinder(h = 8.2, d = bowl_d - 8 - wall_t * 2, center = false);\n}\n\n// Lid dome\ntranslate([0, 0, base_h + bowl_h + 8 + lid_clearance])\ndifference() {\n    sphere(d = bowl_d);\n    translate([0, 0, -bowl_d / 2 + 6])\n        sphere(d = bowl_d - wall_t * 2);\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Main grip\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 12, center = true);\n        // Grip hole\n        rotate([90, 0, 0])\n            cylinder(h = 21, d = 8, center = true);\n    }\n}\n\ntranslate([0, 0, base_h + bowl_h + 35 + lid_clearance])\nhandle();\n\n// Decorative ridge on lid\ntranslate([0, 0, base_h + bowl_h + 8 + lid_clearance])\ndifference() {\n    cylinder(h = 2, d = bowl_d + 6, center = false);\n    cylinder(h = 2.2, d = bowl_d + 2, center = false);\n}\n\n// Optional spoon rest indentations\nfor (i = [0:2]) {\n    rotate([0, 0, i * 120])\n    translate([(bowl_d - 20) / 2, 0, base_h + bowl_h - 5])\n    difference() {\n        sphere(d = 10);\n        translate([0, 0, -6])\n            cube([20, 10, 12], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "creamer",
    "openscad_code": "// Realistic creamer for coffee - medium complexity\n// Features: hollow body, handle, spout, stable base\n\n// Parameters\nwall = 1.5; // wall thickness for 3D printing (mm)\nscale_factor = 1.5; // overall scale\nbase_h = 8; // base height\nbody_h = 40; // body height\nbody_r = 20; // body radius\nneck_h = 8; // neck height\nneck_r = 15; // neck radius\nhandle_w = 8; // handle width\nhandle_h = 25; // handle height\nspout_len = 12; // spout length\nspout_w = 10; // spout width\n\n// Main creamer assembly\nmodule creamer() {\n    difference() {\n        // Exterior shape\n        union() {\n            // Stable base\n            cylinder(h=base_h, r1=body_r+5, r2=body_r+2, $fn=64);\n            \n            // Bulbous body\n            translate([0,0,base_h])\n                cylinder(h=body_h, r1=body_r+2, r2=body_r, $fn=64);\n            \n            // Tapered neck\n            translate([0,0,base_h+body_h])\n                cylinder(h=neck_h, r1=body_r, r2=neck_r, $fn=64);\n            \n            // Flared rim\n            translate([0,0,base_h+body_h+neck_h])\n                cylinder(h=3, r1=neck_r, r2=neck_r+2, $fn=64);\n            \n            // Handle\n            translate([body_r+2, -handle_w/2, base_h+body_h/3])\n                handle();\n            \n            // Spout\n            translate([0, body_r, base_h+body_h*0.7])\n                rotate([0,110,0])\n                spout();\n        }\n        \n        // Interior hollow\n        union() {\n            // Hollow base\n            translate([0,0,wall])\n                cylinder(h=base_h-wall, r1=body_r+5-wall, r2=body_r+2-wall, $fn=64);\n            \n            // Hollow body\n            translate([0,0,base_h+wall])\n                cylinder(h=body_h-wall, r1=body_r+2-wall, r2=body_r-wall, $fn=64);\n            \n            // Hollow neck\n            translate([0,0,base_h+body_h])\n                cylinder(h=neck_h-wall, r1=body_r-wall, r2=neck_r-wall, $fn=64);\n            \n            // Hollow rim\n            translate([0,0,base_h+body_h+neck_h])\n                cylinder(h=3-wall, r1=neck_r-wall, r2=neck_r+2-wall, $fn=64);\n            \n            // Handle hole\n            translate([body_r+2+wall, -handle_w/2+wall, base_h+body_h/3+wall])\n                handle_hole();\n                \n            // Spout hole\n            translate([0, body_r-wall, base_h+body_h*0.7])\n                rotate([0,110,0])\n                spout_hole();\n        }\n    }\n}\n\n// Handle module\nmodule handle() {\n    difference() {\n        // Outer handle\n        hull() {\n            translate([0,0,0])\n                sphere(r=handle_w/2, $fn=32);\n            translate([0,0,handle_h])\n                sphere(r=handle_w/2, $fn=32);\n        }\n        \n        // Inner handle hole\n        hull() {\n            translate([wall,0,wall])\n                sphere(r=handle_w/2-wall, $fn=32);\n            translate([wall,0,handle_h-wall])\n                sphere(r=handle_w/2-wall, $fn=32);\n        }\n    }\n}\n\n// Handle hole module\nmodule handle_hole() {\n    hull() {\n        translate([0,0,0])\n            sphere(r=handle_w/2-wall, $fn=32);\n        translate([0,0,handle_h-2*wall])\n            sphere(r=handle_w/2-wall, $fn=32);\n    }\n}\n\n// Spout module\nmodule spout() {\n    hull() {\n        // Base of spout\n        translate([0,0,0])\n            sphere(r=spout_w/2, $fn=32);\n        // Tip of spout\n        translate([spout_len,0,0])\n            sphere(r=spout_w/4, $fn=32);\n    }\n}\n\n// Spout hole module\nmodule spout_hole() {\n    hull() {\n        translate([0,0,0])\n            sphere(r=spout_w/2-wall, $fn=32);\n        translate([spout_len-wall,0,0])\n            sphere(r=spout_w/4-wall, $fn=32);\n    }\n}\n\n// Render the creamer at origin\nscale([scale_factor,scale_factor,scale_factor])\n    creamer();",
    "renders": true
  },
  {
    "household_item": "teapot",
    "openscad_code": "// Realistic teapot - medium complexity\n// Overall height ~70mm, printable without supports\n\n$fn=32;\nwall=1.5;\n\nmodule teapot() {\n    // Main body - slightly tapered sphere\n    difference() {\n        scale([1, 1, 0.85]) sphere(d=50);\n        // Hollow out interior\n        translate([0,0,-2]) scale([1,1,0.8]) sphere(d=50-2*wall);\n    }\n    \n    // Spout\n    translate([24,0,10]) rotate([0,-20,0]) {\n        // Spout base\n        cylinder(h=8, d1=12, d2=10);\n        translate([0,0,8]) rotate([0,-15,0]) {\n            cylinder(h=25, d1=10, d2=6);\n            // Spout tip\n            translate([0,0,25]) sphere(d=6+wall);\n            // Hollow spout\n            translate([0,0,-1]) rotate([0,15,0]) \n                cylinder(h=35, d1=10-2*wall, d2=6-2*wall);\n        }\n    }\n    \n    // Handle\n    translate([-25,0,15]) rotate([0,15,0]) {\n        difference() {\n            // Handle outer\n            rotate_extrude(angle=70, $fn=32) \n                translate([20,0,0]) circle(d=8);\n            // Handle inner\n            rotate_extrude(angle=70, $fn=32) \n                translate([20,0,0]) circle(d=8-2*wall);\n        }\n    }\n    \n    // Lid\n    translate([0,0,42]) {\n        // Lid top\n        difference() {\n            cylinder(h=8, d=45+wall);\n            cylinder(h=9, d=45-wall);\n        }\n        // Lid knob\n        translate([0,0,8]) cylinder(h=8, d1=12, d2=8);\n        // Lid rim\n        difference() {\n            cylinder(h=4, d=45+wall);\n            cylinder(h=5, d=45-wall);\n        }\n    }\n}\n\nteapot();",
    "renders": true
  },
  {
    "household_item": "coffeepot",
    "openscad_code": "// Realistic 3D-printable coffeepot – medium complexity\n// Overall height ~95 mm, safe wall thickness 1.5 mm\n\n$fn = 64;\n\n// Main body shell\nmodule pot_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 65, d1 = 58, d2 = 52, center = false);\n        // Inner hollow\n        translate([0, 0, -0.01])\n            cylinder(h = 65.5, d1 = 58 - 3, d2 = 52 - 3, center = false);\n    }\n}\n\n// Bottom base – slightly wider for stability\nmodule base() {\n    difference() {\n        cylinder(h = 8, d = 62, center = false);\n        translate([0, 0, -0.01])\n            cylinder(h = 8.5, d = 56, center = false);\n    }\n}\n\n// Curved pouring spout\nmodule spout() {\n    hull() {\n        translate([28, 0, 55]) rotate([0, 90, 0]) cylinder(h = 22, d = 8);\n        translate([28, 0, 35]) rotate([0, 90, 0]) cylinder(h = 22, d = 12);\n    }\n    // Hollow inside spout\n    difference() {\n        children();\n        translate([28, 0, 55]) rotate([0, 90, 0]) cylinder(h = 23, d = 5);\n        translate([28, 0, 35]) rotate([0, 90, 0]) cylinder(h = 23, d = 9);\n    }\n}\n\n// Handle grip with two posts\nmodule handle() {\n    // Left post\n    post(-27);\n    // Right post\n    post(27);\n    // Grip bar\n    translate([0, -27, 50]) cube([54, 6, 4], center = true);\n}\n\nmodule post(side) {\n    translate([side, -27, 50]) rotate([90, 0, 0]) cylinder(h = 15, d = 6);\n}\n\n// Lid with knob\nmodule lid() {\n    difference() {\n        cylinder(h = 4, d = 54, center = false);\n        translate([0, 0, -0.01])\n            cylinder(h = 4.5, d = 51, center = false);\n    }\n    // Knob\n    translate([0, 0, 4]) cylinder(h = 8, d1 = 12, d2 = 8);\n}\n\n// Assemble complete pot\ntranslate([0, 0, 8]) pot_body();\nbase();\ntranslate([0, 0, 8]) spout();\nhandle();\ntranslate([0, 0, 65 + 1.5]) lid();",
    "renders": true
  },
  {
    "household_item": "percolator",
    "openscad_code": "// Percolator Coffee Maker - Medium Complexity Realistic Style\n// Size: ~70mm height\n\n$fn = 36;  // Smooth curves\n\n// Main body dimensions\nbody_height = 45;\nbody_radius = 20;\nwall_thickness = 2;\n\n// Top lid\nmodule lid() {\n    translate([0, 0, body_height + 5]) {\n        // Main lid dome\n        difference() {\n            cylinder(h=8, r=body_radius, center=false);\n            translate([0, 0, 5])\n                cylinder(h=10, r=body_radius - wall_thickness*2, center=false);\n        }\n        \n        // Handle knob\n        translate([0, 0, 10])\n            cylinder(h=5, r=wall_thickness*2);\n    }\n}\n\n// Main percolator body\nmodule body() {\n    difference() {\n        // Outer body\n        cylinder(h=body_height, r=body_radius);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=body_height - wall_thickness, r=body_radius - wall_thickness);\n    }\n    \n    // Spout\n    translate([body_radius - 1, 0, body_height * 0.6]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=15, r=4);\n                translate([0, 0, -1])\n                    cylinder(h=17, r=2);\n            }\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    // Handle base\n    translate([body_radius - wall_thickness, 0, body_height * 0.3]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=20, r=4);\n                translate([0, 0, -1])\n                    cylinder(h=22, r=2.5);\n            }\n        }\n    }\n    \n    // Handle grip\n    translate([body_radius + 15, 0, body_height * 0.3 + 10]) {\n        rotate([0, 0, 90])\n            difference() {\n                cube([25, 8, 8], center=true);\n                cube([27, 6, 6], center=true);\n            }\n    }\n}\n\n// Base with feet\nmodule base() {\n    // Bottom plate\n    translate([0, 0, -5]) {\n        difference() {\n            cylinder(h=5, r=body_radius + 2);\n            cylinder(h=6, r=body_radius - wall_thickness);\n        }\n        \n        // Feet (3 legs)\n        for(i=[0:120:360-1]) {\n            rotate([0, 0, i])\n                translate([body_radius, 0, -3])\n                    cube([5, 8, 3], center=true);\n        }\n    }\n}\n\n// Internal percolator tube\nmodule percolator_tube() {\n    translate([0, 0, -3]) {\n        difference() {\n            cylinder(h=body_height - 5, r=3);\n            cylinder(h=body_height - 3, r=2.5);\n        }\n        \n        // Spreader on top\n        translate([0, 0, body_height - 5]) {\n            difference() {\n                cylinder(h=3, r=8);\n                cylinder(h=4, r=7.5);\n            }\n            \n            // Holes for coffee distribution\n            for(i=[0:45:360-1]) {\n                rotate([0, 0, i])\n                    translate([6, 0, 1.5])\n                        cylinder(h=3, r=0.5);\n            }\n        }\n    }\n}\n\n// Coffee basket\nmodule basket() {\n    translate([0, 0, 5]) {\n        difference() {\n            cylinder(h=15, r=body_radius - 8);\n            cylinder(h=16, r=body_radius - 10);\n        }\n        \n        // Basket holes\n        for(h=[2.5:2:12.5]) {\n            for(i=[0:30:360-1]) {\n                rotate([0, 0, i])\n                    translate([body_radius - 9, 0, h])\n                        cylinder(h=2, r=0.8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    lid();\n    handle();\n    \n    // Internal parts (for display, remove for printing)\n    // percolator_tube();\n    // basket();\n}",
    "renders": true
  },
  {
    "household_item": "espresso",
    "openscad_code": "// Realistic Espresso Cup with Crema\n// Dimensions in mm\n\n// Cup body\nmodule cup_body() {\n    difference() {\n        // Outer cup\n        cylinder(h=45, d1=50, d2=40, $fn=100);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=43, d1=46, d2=36, $fn=100);\n        \n        // Bottom hole for printing\n        translate([0, 0, 42])\n            cylinder(h=5, d=30, $fn=50);\n    }\n}\n\n// Cup handle\nmodule handle() {\n    difference() {\n        // Main handle loop\n        translate([25, 0, 20])\n            rotate([90, 0, 0])\n                torus(15, 4, 50);\n        \n        // Cutout for finger space\n        translate([25, 0, 20])\n            rotate([90, 0, 0])\n                torus(10, 5, 50);\n    }\n}\n\n// Torus helper function\nmodule torus(r_major, r_minor, fn) {\n    rotate_extrude($fn=fn)\n        translate([r_major, 0, 0])\n            circle(r=r_minor, $fn=fn);\n}\n\n// Saucer\nmodule saucer() {\n    difference() {\n        // Main saucer\n        cylinder(h=5, d=80, $fn=100);\n        \n        // Cup recess\n        translate([0, 0, -1])\n            cylinder(h=4, d=52, $fn=100);\n        \n        // Bottom chamfer\n        translate([0, 0, -1])\n            cylinder(h=6, d1=80, d2=75, $fn=100);\n    }\n}\n\n// Coffee liquid\nmodule coffee() {\n    color(\"#2C1810\")\n    translate([0, 0, 42])\n        cylinder(h=2, d=36, $fn=100);\n}\n\n// Crema layer\nmodule crema() {\n    color(\"#D2B48C\")\n    translate([0, 0, 44])\n        cylinder(h=1.5, d=36, $fn=100);\n}\n\n// Steam wisps\nmodule steam_wisp(x, y, rot) {\n    translate([x, y, 45.5])\n        rotate([0, rot, 0])\n            scale([1, 1, 3])\n                sphere(0.8, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Cup parts\n    color(\"#FFFFFF\")\n    cup_body();\n    \n    color(\"#FFFFFF\")\n    handle();\n    \n    // Coffee components\n    coffee();\n    crema();\n    \n    // Steam\n    for(i = [0:3]) {\n        steam_wisp(\n            5 * sin(i * 90),\n            5 * cos(i * 90),\n            i * 30\n        );\n    }\n    \n    // Saucer (offset from cup)\n    translate([0, 0, -6])\n        color(\"#FFFFFF\")\n        saucer();\n}",
    "renders": true
  },
  {
    "household_item": "moka",
    "openscad_code": "// Parameters for 3D printing\nwall = 2;           // wall thickness 2mm\n$fn = 36;           // smoother curves\n\n// Overall scale\nscale_factor = 0.6;\nscale(scale_factor)\nunion() {\n\n// Bottom boiler\nmodule boiler() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = 35, r = 25);\n        // Inner cavity\n        translate([0, 0, wall]) cylinder(h = 35 - wall, r = 25 - wall);\n        // Bottom chamfer\n        translate([0, 0, -1]) cylinder(h = 2, r1 = 25, r2 = 22);\n    }\n    // Thread section\n    translate([0, 0, 35]) cylinder(h = 8, r = 20);\n}\n\n// Funnel filter\nmodule funnel() {\n    difference() {\n        // Outer cone\n        cylinder(h = 20, r1 = 19, r2 = 15);\n        // Inner cavity\n        translate([0, 0, wall]) cylinder(h = 20 - wall, r1 = 19 - wall, r2 = 15 - wall);\n        // Filter plate holes\n        for (a = [0:45:359]) {\n            rotate([0, 0, a]) translate([13, 0, 17]) cylinder(h = 5, r = 1.5);\n        }\n    }\n}\n\n// Top chamber\nmodule top_chamber() {\n    difference() {\n        // Main body\n        cylinder(h = 45, r = 25);\n        // Inner cavity\n        translate([0, 0, wall]) cylinder(h = 45 - wall, r = 25 - wall);\n        // Top dome\n        translate([0, 0, 45]) sphere(r = 25);\n        // Inner dome\n        translate([0, 0, 45]) sphere(r = 25 - wall);\n    }\n    // Thread socket\n    translate([0, 0, -8]) cylinder(h = 8, r = 20, r1 = 20, r2 = 19);\n    // Spout\n    difference() {\n        hull() {\n            translate([20, 0, 30]) cylinder(h = 12, r = 4);\n            translate([30, 0, 20]) cylinder(h = 12, r = 4);\n        }\n        // Spout bore\n        hull() {\n            translate([20, 0, 30]) cylinder(h = 12, r = 2);\n            translate([30, 0, 20]) cylinder(h = 12, r = 2);\n        }\n    }\n    // Handle\n    translate([-25, 0, 22]) rotate([0, 90, 0]) cylinder(h = 20, r = 4);\n    translate([-25, 0, 22]) rotate([0, 90, 0]) cylinder(h = 20, r = 2, r1 = 2, r2 = 0);\n}\n\n// Lid\nmodule lid() {\n    difference() {\n        // Lid dome\n        sphere(r = 27);\n        // Inner cavity\n        sphere(r = 27 - wall);\n        // Bottom cut\n        translate([0, 0, -5]) cube([60, 60, 10], center = true);\n    }\n    // Knob\n    translate([0, 0, 27]) cylinder(h = 8, r = 8);\n    translate([0, 0, 27]) cylinder(h = 8, r = 4);\n}\n\n// Assembly\nboiler();\ntranslate([0, 0, 35]) funnel();\ntranslate([0, 0, 63]) top_chamber();\ntranslate([0, 0, 108]) lid();\n}",
    "renders": true
  },
  {
    "household_item": "aeropress",
    "openscad_code": "// Aeropress Coffee Maker - Realistic Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;\n\n// Main parameters\nmain_diameter = 60;\nchamber_height = 100;\nwall_thickness = 2;\ncap_height = 15;\nplunger_length = 80;\n\n// Chamber module\nmodule chamber() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = chamber_height, d = main_diameter);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n        cylinder(h = chamber_height - wall_thickness, d = main_diameter - 2*wall_thickness);\n        \n        // Bottom opening\n        translate([0, 0, -1])\n        cylinder(h = wall_thickness + 2, d = main_diameter - 10);\n        \n        // Measurement markings\n        for(i = [1:3]) {\n            translate([0, 0, i * 20])\n            rotate([90, 0, 0])\n            linear_extrude(height = 1)\n            text(str(i), size = 5, halign = \"center\", font = \"Arial:style=Bold\");\n        }\n    }\n}\n\n// Filter cap module\nmodule filter_cap() {\n    difference() {\n        union() {\n            // Main cap body\n            cylinder(h = cap_height, d = main_diameter);\n            \n            // Grip rings\n            for(i = [1:3]) {\n                translate([0, 0, cap_height - i * 3])\n                cylinder(h = 1.5, d = main_diameter + 2);\n            }\n        }\n        \n        // Inner threads\n        difference() {\n            translate([0, 0, 5])\n            cylinder(h = cap_height - 5, d = main_diameter - 2*wall_thickness);\n            \n            // Thread cuts\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                translate([main_diameter/2 - wall_thickness - 1, 0, 5])\n                cube([2, 1, cap_height - 5], center = true);\n            }\n        }\n        \n        // Filter holes\n        for(i = [0:359:30]) {\n            rotate([0, 0, i])\n            translate([main_diameter/2 - 8, 0, cap_height/2])\n            cylinder(h = cap_height, d = 2);\n        }\n    }\n}\n\n// Plunger seal\nmodule rubber_seal() {\n    difference() {\n        // Main seal body\n        cylinder(h = 10, d = main_diameter - 4);\n        \n        // Center hole\n        cylinder(h = 11, d = 15);\n        \n        // Flex grooves\n        for(i = [1:3]) {\n            translate([0, 0, i * 2.5])\n            cylinder(h = 0.5, d = main_diameter - 4 - i * 2);\n        }\n    }\n}\n\n// Plunger handle\nmodule plunger_handle() {\n    union() {\n        // Shaft\n        cylinder(h = plunger_length, d = 15);\n        \n        // Top grip\n        translate([0, 0, plunger_length])\n        difference() {\n            cylinder(h = 20, d = 30);\n            translate([0, 0, 5])\n            cylinder(h = 20, d = 15);\n        }\n        \n        // Bottom connection\n        translate([0, 0, -5])\n        cylinder(h = 10, d = 20);\n    }\n}\n\n// Paddle/stirrer\nmodule paddle() {\n    linear_extrude(height = 3)\n    polygon(points = [\n        [0, 0],\n        [5, 0],\n        [5, 30],\n        [3, 35],\n        [0, 35]\n    ]);\n}\n\n// Main assembly\ntranslate([0, 0, 0])\nchamber();\n\ntranslate([0, 0, -cap_height - 5])\nfilter_cap();\n\ntranslate([0, 0, chamber_height + 10])\nrotate([180, 0, 0])\nunion() {\n    plunger_handle();\n    translate([0, 0, -15])\n    rubber_seal();\n}\n\ntranslate([main_diameter/2 + 20, 0, chamber_height/2])\nrotate([90, 0, 90])\npaddle();",
    "renders": true
  },
  {
    "household_item": "frenchpress",
    "openscad_code": "// French Press - Realistic style, medium complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions\n$fn = 32;\npress_height = 85;\nbeaker_diameter = 45;\nwall_thickness = 2;\nbase_height = 8;\n\n// Main beaker\nmodule beaker() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=press_height-base_height, d=beaker_diameter, center=false);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n            cylinder(h=press_height-base_height-wall_thickness, d=beaker_diameter-2*wall_thickness, center=false);\n    }\n}\n\n// Glass beaker with spout\nmodule glass_beaker() {\n    union() {\n        beaker();\n        \n        // Spout\n        translate([beaker_diameter/2-2, 0, press_height-base_height-15])\n            rotate([0, -30, 0])\n            cylinder(h=10, d1=8, d2=5, center=false);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    // Handle grip\n    translate([beaker_diameter/2+wall_thickness+2, 0, press_height/2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=50, d=10, center=true);\n            translate([0, 0, -25]) \n                cylinder(h=50, d=6, center=true);\n        }\n    \n    // Handle brackets\n    for(i = [0.3, 0.7]) {\n        translate([beaker_diameter/2+wall_thickness+2, 0, base_height+i*(press_height-base_height-20)])\n            rotate([0, 90, 0])\n            cylinder(h=15, d=6, center=true);\n    }\n}\n\n// Base plate\nmodule base() {\n    translate([0, 0, 0])\n        cylinder(h=base_height, d=beaker_diameter+10, center=false);\n}\n\n// Plunger assembly\nmodule plunger() {\n    // Plunger top\n    translate([0, 0, press_height+15])\n        cylinder(h=8, d=beaker_diameter-4, center=false);\n    \n    // Plunger rod\n    translate([0, 0, press_height+8])\n        cylinder(h=25, d=4, center=false);\n    \n    // Plunger handle\n    translate([0, 0, press_height+33])\n        difference() {\n            cylinder(h=15, d=12, center=false);\n            translate([0, 0, 5])\n                cylinder(h=15, d=8, center=false);\n        }\n}\n\n// Filter assembly\nmodule filter() {\n    // Filter disk\n    translate([0, 0, press_height-5])\n        difference() {\n            cylinder(h=3, d=beaker_diameter-6, center=false);\n            \n            // Filter holes\n            for(i = [1:5]) {\n                rotate([0, 0, i*30])\n                translate([10, 0, 1.5])\n                    cylinder(h=3, d=1.5, center=true);\n                rotate([0, 0, i*30+15])\n                translate([15, 0, 1.5])\n                    cylinder(h=3, d=1.5, center=true);\n            }\n        }\n    \n    // Filter support\n    translate([0, 0, press_height-8])\n        cylinder(h=3, d=beaker_diameter-6, center=false);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Glass beaker\n    translate([0, 0, base_height])\n        glass_beaker();\n    \n    // Handle\n    handle();\n    \n    // Plunger assembly\n    plunger();\n    \n    // Filter\n    filter();\n}",
    "renders": true
  },
  {
    "household_item": "sifter",
    "openscad_code": "// Medium-complexity realistic 3D-printable kitchen sifter\n// Approx. 80 mm diameter, no overhangs, 1.2 mm wall thickness\n\n// ---------- PARAMETERS ----------\nwall = 1.2;                 // Wall thickness (mm)\ndia = 80;                   // Overall diameter (mm)\nh_body = 40;                // Height of cylindrical body (mm)\nh_bottom = 8;               // Height of conical bottom (mm)\nh_rim = 5;                  // Rolled top rim height (mm)\nmesh_hole = 2.0;            // Square hole size (mm)\nmesh_web = 0.8;             // Web thickness between holes (mm)\nhandle_len = 50;            // Handle length (mm)\nhandle_d = 12;              // Handle diameter (mm)\n\n// ---------- MAIN ----------\ndifference() {\n    union() {\n        body();\n        handle();\n    }\n    mesh();\n}\n\n// ---------- MODULES ----------\nmodule body() {\n    // Rolled upper rim\n    difference() {\n        cylinder(h=h_rim, d1=dia+wall*2, d2=dia+wall, $fn=60);\n        translate([0,0,-0.01])\n            cylinder(h=h_rim+0.02, d1=dia, d2=dia-wall, $fn=60);\n    }\n\n    // Cylindrical wall\n    translate([0,0,h_rim])\n        cylinder(h=h_body, d=dia, $fn=60);\n\n    // Conical bottom\n    translate([0,0,h_rim+h_body])\n        cylinder(h=h_bottom, d1=dia, d2=dia*0.6, $fn=60);\n}\n\nmodule handle() {\n    // Attachment collar\n    translate([dia/2,0,h_rim+h_body/2])\n        rotate([0,90,0])\n            cylinder(h=wall*3, d=handle_d, $fn=30);\n\n    // Handle shaft\n    translate([dia/2+handle_len/2,0,h_rim+h_body/2])\n        rotate([0,90,0])\n            cylinder(h=handle_len, d=handle_d, $fn=30);\n\n    // End grip bulge\n    translate([dia/2+handle_len,0,h_rim+h_body/2])\n        rotate([0,90,0])\n            sphere(d=handle_d*1.4, $fn=30);\n}\n\nmodule mesh() {\n    // Remove bottom to create conical screen area\n    translate([0,0,h_rim+h_body+h_bottom-0.01])\n        cylinder(h=0.02, d=dia*0.6+wall*2, $fn=60);\n\n    // Square sieve holes\n    hole_s = mesh_hole;\n    web = mesh_web;\n    pitch = hole_s + web;\n    rad = dia*0.6/2 - wall;  // screen radius at bottom\n    steps = floor(rad*2/pitch);\n\n    for (ix = [-steps:steps])\n        for (iy = [-steps:steps]) {\n            x = ix*pitch;\n            y = iy*pitch;\n            if (norm([x,y]) < rad-hole_s) {\n                translate([x,y,h_rim+h_body+h_bottom-0.1])\n                    cube([hole_s,hole_s,0.2], center=true);\n            }\n        }\n}",
    "renders": true
  },
  {
    "household_item": "mesh",
    "openscad_code": "// Realistic medium-complexity mesh: Wi-Fi router cooling grill\n// Overall footprint 60 x 90 mm, height 20 mm, wall 2 mm thick\n// No overhangs > 45°, ready for FDM printing\n\n$fn = 36;      // smooth curves\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // outer shell\n        translate([0, 0, 10])\n            cube([60, 90, 20], center = true);\n\n        // hollow inside\n        translate([0, 0, 10])\n            cube([56, 86, 18], center = true);\n    }\n}\n\n// Single grill fin\nmodule fin() {\n    linear_extrude(height = 18, center = true)\n        offset(delta = -1)\n            offset(delta = 1)\n                square([0.8, 86]);\n}\n\n// Vent array on top\nmodule vent_grill() {\n    for (x = [-25 : 5 : 25])\n        translate([x, 0, 20])\n            fin();\n}\n\n// Front port recess\nmodule front_ports() {\n    difference() {\n        // raised bezel\n        translate([0, -45, 10])\n            cube([40, 2, 10], center = true);\n\n        // three rectangular cutouts\n        for (i = [-1 : 1])\n            translate([i * 12, -45, 10])\n                cube([8, 2.5, 6], center = true);\n    }\n}\n\n// Side cooling slots\nmodule side_slots() {\n    for (y = [-35 : 10 : 35]) {\n        translate([-30.5, y, 10])\n            rotate([0, 90, 0])\n                cylinder(h = 2, d = 4, $fn = 8);\n    }\n}\n\n// Bottom foot pads\nmodule feet() {\n    for (pos = [[-25, -40], [25, -40], [-25, 40], [25, 40]])\n        translate([pos[0], pos[1], 0])\n            cylinder(h = 2, d = 8, $fn = 16);\n}\n\n// Assembly\nunion() {\n    chassis();\n    vent_grill();\n    front_ports();\n    mirror([1, 0, 0]) side_slots();\n    side_slots();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "chinois",
    "openscad_code": "// Realistic 3D printable chinois (conical strainer with handle)\n// Overall height ~70 mm, strainer diameter ~60 mm\n\n$fn = 32;  // Smooth curves\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Chinois body parameters\nh_body = 45;\nr_top = 30;\nr_bottom = 8;\n\n// Handle parameters\nhandle_len = 80;\nhandle_d = 12;\nhandle_attach_h = 30;\n\n// Main chinois body (conical)\nmodule chinois_body() {\n    difference() {\n        // Solid cone\n        cylinder(h=h_body, r1=r_top, r2=r_bottom, center=false);\n        \n        // Hollow it out\n        translate([0, 0, wall])\n            cylinder(h=h_body-wall*2, r1=r_top-wall, r2=r_bottom-wall, center=false);\n        \n        // Cut bottom flat for printing\n        translate([0, 0, wall])\n            cube([r_top*2, r_top*2, wall], center=true);\n    }\n}\n\n// Perforation pattern\nmodule perforations() {\n    per_size = 1.8;\n    spacing = 3.5;\n    rows = 8;\n    \n    for (i = [1:rows]) {\n        // Calculate radius at each row\n        row_r = r_top - (r_top - r_bottom) * (i/rows);\n        circ = 2 * PI * row_r;\n        holes = floor(circ / spacing);\n        \n        for (j = [0:holes-1]) {\n            angle = j * 360 / holes;\n            x = row_r * cos(angle);\n            y = row_r * sin(angle);\n            \n            translate([x, y, wall + 1])\n                rotate([0, 0, angle])\n                cylinder(h=h_body-2, r=per_size/2, center=false);\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    // Main handle rod\n    translate([r_top + handle_len/2, 0, handle_attach_h])\n        rotate([90, 0, 90])\n        cylinder(h=handle_len, r=handle_d/2, center=true);\n    \n    // Grip rings\n    grip_start = r_top + 10;\n    grip_end = r_top + handle_len - 10;\n    \n    for (i = [0:3]) {\n        t = grip_start + (grip_end - grip_start) * i/3;\n        translate([t, 0, handle_attach_h])\n            rotate([90, 0, 90])\n            cylinder(h=handle_d*0.8, r=handle_d/2 + 0.5, center=true);\n    }\n    \n    // Attachment bracket\n    translate([r_top - 5, 0, handle_attach_h])\n        rotate([0, 90, 0])\n        difference() {\n            // Bracket body\n            cube([15, handle_d, handle_d*1.2], center=true);\n            \n            // Screw hole (optional)\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h=handle_d*1.2 + 1, r=1.5, center=true);\n        }\n}\n\n// Reinforcement ring at top\nmodule top_ring() {\n    ring_h = 5;\n    translate([0, 0, h_body - ring_h/2])\n        difference() {\n            cylinder(h=ring_h, r1=r_top + wall, r2=r_top + wall, center=true);\n            cylinder(h=ring_h + 1, r1=r_top, r2=r_top, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main body\n    chinois_body();\n    \n    // Perforations\n    perforations();\n    \n    // Top reinforcement\n    top_ring();\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "cheesecloth",
    "openscad_code": "// Cheesecloth - 3D Printable model\n// Medium complexity realistic style\n\n// Parameters\ncloth_size = 80;           // Square cloth size in mm\nthickness = 1.2;           // Thickness of fabric threads\nthread_spacing = 4;        // Spacing between threads\nwave_height = 2.5;         // Height of fabric wave pattern\nwall_thickness = 1.5;      // Minimum wall thickness for printing\n\n// Calculate number of threads\nnum_threads = floor(cloth_size / thread_spacing) - 1;\n\n// Module for single thread with wavy pattern\nmodule wavy_thread(length, direction) {\n    // direction: 0 for horizontal, 90 for vertical\n    rotate([0, 0, direction])\n    for(i = [0:2:length/thread_spacing]) {\n        translate([i * thread_spacing, 0, 0])\n        hull() {\n            // Create wavy pattern with spheres\n            translate([0, 0, sin(i * 0.8) * wave_height])\n            sphere(d = thickness);\n            \n            translate([thread_spacing, 0, sin((i + 1) * 0.8) * wave_height])\n            sphere(d = thickness);\n        }\n    }\n}\n\n// Module for frayed edge\nmodule frayed_edge(length, direction) {\n    rotate([0, 0, direction])\n    for(i = [0:length/2]) {\n        translate([i * 2 - length/2, 0, 0])\n        rotate([90, 0, rand(i * 123) * 30 - 15])\n        cylinder(h = rand(i * 456) * 8 + 6, d = thickness * 0.7);\n    }\n}\n\n// Random function for frayed edges\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main cloth body\nmodule cheesecloth() {\n    // Create the woven pattern\n    difference() {\n        // Base threads - horizontal\n        union() {\n            for(j = [0:num_threads]) {\n                translate([0, j * thread_spacing - cloth_size/2, 0])\n                wavy_thread(cloth_size, 0);\n            }\n            \n            // Vertical threads\n            for(j = [0:num_threads]) {\n                translate([j * thread_spacing - cloth_size/2, 0, 0])\n                wavy_thread(cloth_size, 90);\n            }\n        }\n        \n        // Cut square shape\n        translate([0, 0, -thickness])\n        cube([cloth_size + 2, cloth_size + 2, thickness * 4], center = true);\n    }\n    \n    // Add frayed edges on all sides\n    translate([0, -cloth_size/2, 0])\n    frayed_edge(cloth_size, 0);\n    \n    translate([0, cloth_size/2, 0])\n    frayed_edge(cloth_size, 0);\n    \n    translate([-cloth_size/2, 0, 0])\n    frayed_edge(cloth_size, 90);\n    \n    translate([cloth_size/2, 0, 0])\n    frayed_edge(cloth_size, 90);\n}\n\n// Add subtle wrinkles\nmodule add_wrinkles() {\n    // Main wrinkles\n    translate([cloth_size/4, -cloth_size/4, 0])\n    rotate([45, 0, 0])\n    scale([1, 1, 0.3])\n    sphere(d = cloth_size/3);\n    \n    translate([-cloth_size/4, cloth_size/4, 0])\n    rotate([-30, 0, 0])\n    scale([1, 1, 0.2])\n    sphere(d = cloth_size/4);\n}\n\n// Final assembly\nunion() {\n    // Main cloth\n    cheesecloth();\n    \n    // Add realistic wrinkles on surface\n    // These are subtracted to create depressions\n    difference() {\n        // Base cloth\n        translate([0, 0, thickness/2])\n        cube([cloth_size, cloth_size, thickness], center = true);\n        \n        // Wrinkle details\n        add_wrinkles();\n    }\n}\n\n// Print support base\ntranslate([0, 0, -thickness])\ncube([cloth_size + 10, cloth_size + 10, 0.5], center = true);",
    "renders": true
  },
  {
    "household_item": "zester",
    "openscad_code": "// Realistic Zester - Medium Complexity\n// Basic OpenSCAD primitives only\n\n// Overall dimensions\nhandle_len = 85;\nhandle_dia = 12;\nblade_width = 18;\nblade_len = 35;\nblade_thick = 1.2;\nteeth_count = 8;\nteeth_width = 1.5;\nteeth_len = 6;\n\n// Handle grip pattern\nmodule grip_rings(count=8, spacing=7) {\n    for(i=[0:count-1]) {\n        translate([0, 0, -handle_len*0.4 + i*spacing]) {\n            difference() {\n                cylinder(d=handle_dia+1, h=2, $fn=32);\n                cylinder(d=handle_dia-0.5, h=2.2, $fn=32);\n            }\n        }\n    }\n}\n\n// Handle with ergonomic shape\nmodule handle() {\n    difference() {\n        // Main handle body\n        union() {\n            // Tapered cylinder\n            cylinder(h=handle_len, d1=handle_dia, d2=handle_dia*0.9, $fn=32);\n            // End cap sphere\n            translate([0, 0, handle_len]) sphere(d=handle_dia, $fn=32);\n        }\n        // Hanging hole\n        translate([0, handle_dia/2+2, handle_len-5]) \n            rotate([90,0,0]) cylinder(d=3, h=handle_dia+2, $fn=16);\n    }\n    \n    // Grip rings\n    grip_rings();\n}\n\n// Zester teeth\nmodule teeth() {\n    for(i=[0:teeth_count-1]) {\n        translate([i*(blade_width/teeth_count) - blade_width/2 + teeth_width/2, 0, 0])\n            cube([teeth_width, teeth_len, blade_thick]);\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    // Main blade plate\n    translate([0, 0, -blade_len/2]) \n        cube([blade_width, blade_len, blade_thick], center=true);\n    \n    // Reinforcement spine\n    translate([0, 0, -blade_len/2]) \n        cube([blade_width*0.3, blade_len*0.8, blade_thick*2], center=true);\n    \n    // Cutting teeth\n    translate([0, blade_len/2 - teeth_len/2, blade_thick/2]) teeth();\n    \n    // Rounded edges\n    translate([0, blade_len/2, 0]) \n        rotate([90,0,0]) cylinder(d=blade_width, h=blade_thick, $fn=32);\n}\n\n// Connector between handle and blade\nmodule connector() {\n    // Transition piece\n    difference() {\n        hull() {\n            translate([0, 0, 0]) \n                cylinder(d=handle_dia*1.2, h=10, $fn=32);\n            translate([0, -15, 0]) \n                cube([blade_width+4, 5, 10], center=true);\n        }\n        // Remove blade slot\n        translate([0, -12, 0])\n            cube([blade_width+0.5, 10, blade_thick+2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    rotate([0,90,0]) handle();\n    \n    // Connector\n    translate([0, 0, -handle_len/2-5]) connector();\n    \n    // Blade\n    translate([0, -handle_len/2-20, 0]) rotate([90,0,0]) blade();\n}",
    "renders": true
  },
  {
    "household_item": "citruspress",
    "openscad_code": "// Citrus Press - Realistic Style, Medium Complexity\n// 3D printable manual citrus press for lemons/oranges\n\n$fn = 32; // Smooth curves\n\n// Main dimensions (mm)\nbase_d = 80;\nbase_h = 15;\ncone_h = 45;\ncone_base = 35;\ncone_tip = 8;\nhandle_l = 70;\nhandle_d = 12;\nfilter_d = 60;\nfilter_h = 8;\nspout_l = 15;\nspout_w = 12;\nwall_t = 2;\n\n// Base bowl\nmodule base() {\n    difference() {\n        cylinder(h=base_h, d=base_d);\n        // Hollow out\n        translate([0,0,wall_t])\n            cylinder(h=base_h, d=base_d-2*wall_t);\n        \n        // Pour spout\n        translate([base_d/2 - spout_l/2, 0, base_h-2])\n            cube([spout_l, spout_w, 4], center=true);\n    }\n}\n\n// Juice cone with ridges\nmodule cone() {\n    union() {\n        // Main cone\n        cylinder(h=cone_h, d1=cone_tip, d2=cone_base);\n        \n        // Ridges for juicing\n        for(i=[0:5:360]) {\n            rotate([0,0,i])\n                translate([0, (cone_base+cone_tip)/4, 0])\n                    cube([1, (cone_base-cone_tip)/2, cone_h], center=true);\n        }\n    }\n}\n\n// Filter with holes\nmodule filter() {\n    difference() {\n        cylinder(h=filter_h, d=filter_d);\n        \n        // Holes\n        for(i=[-20:10:20]) {\n            for(j=[-20:10:20]) {\n                if(sqrt(i*i+j*j) < filter_d/2 - 5) {\n                    translate([i,j,-1])\n                        cylinder(h=filter_h+2, d=2);\n                }\n            }\n        }\n        \n        // Center hole for cone\n        translate([0,0,-1])\n            cylinder(h=filter_h+2, d=cone_base+1);\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    union() {\n        // Main handle\n        rotate([90,0,0])\n            cylinder(h=handle_l, d=handle_d);\n        \n        // Grip rings\n        for(i=[-handle_l/2+10:10:handle_l/2-10]) {\n            rotate([90,0,0])\n                translate([0,0,i])\n                    cylinder(h=3, d=handle_d+2);\n        }\n        \n        // Connection to cone\n        translate([0, handle_d/2, 0])\n            rotate([-90,0,0])\n                cylinder(h=cone_base/2, d=cone_base);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Filter sits in base\n    translate([0,0,base_h-wall_t])\n        filter();\n    \n    // Cone with handle\n    translate([0,0,base_h+filter_h-wall_t])\n        rotate([0,0,0])\n            cone();\n    \n    // Handle\n    translate([0,0,base_h+filter_h+cone_h/2])\n        rotate([0,180,0])\n            handle();\n}",
    "renders": true
  },
  {
    "household_item": "applecorer",
    "openscad_code": "// Apple Corer - Realistic Style, Medium Complexity\n// Designed for 3D printing without overhangs\n// Approximate size: 90mm length, 30mm diameter\n\n// Main parameters\nhandle_length = 70;\nhandle_diameter = 20;\nblade_length = 20;\nblade_diameter = 22;\nwall_thickness = 1.5;\ngrip_radius = 15;\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, center=false, $fn=48);\n        \n        // Ergonomic grip grooves - subtract for comfort\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([grip_radius * 0.8, 0, 0])\n            cube([handle_diameter * 0.3, 2, handle_length * 0.8], center=true);\n        }\n    }\n    \n    // Grip rings for better hold\n    for(i = [1:5]) {\n        translate([0, 0, i * 12])\n        difference() {\n            cylinder(h=2, d=handle_diameter + 2, $fn=48);\n            cylinder(h=3, d=handle_diameter - 2, $fn=48);\n        }\n    }\n}\n\n// Cutting blade with serrated edge\nmodule blade() {\n    difference() {\n        // Main tube\n        cylinder(h=blade_length, d=blade_diameter, center=false, $fn=48);\n        \n        // Hollow center\n        cylinder(h=blade_length + 1, d=blade_diameter - wall_thickness * 2, center=false, $fn=48);\n    }\n    \n    // Serrated teeth\n    teeth_count = 16;\n    for(i = [0:teeth_count-1]) {\n        rotate([0, 0, i * 360/teeth_count])\n        translate([blade_diameter/2 - 2, 0, -0.5])\n        cube([3, 1, 3], center=true);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, blade_length - 2])\n    difference() {\n        cylinder(h=4, d=blade_diameter + 2, $fn=48);\n        cylinder(h=5, d=blade_diameter, $fn=48);\n    }\n}\n\n// Transition piece between handle and blade\nmodule transition() {\n    difference() {\n        // Tapered cone\n        cylinder(h1=handle_diameter, h2=blade_diameter, h=8, center=false, $fn=48);\n        \n        // Hollow center\n        cylinder(h1=handle_diameter - wall_thickness * 2, h2=blade_diameter - wall_thickness * 2, h=9, center=false, $fn=48);\n    }\n}\n\n// Small hole for hanging\nmodule hanging_hole() {\n    translate([0, 0, handle_length - 5])\n    rotate([90, 0, 0])\n    cylinder(h=handle_diameter, d=4, center=true, $fn=24);\n}\n\n// Assembly\nunion() {\n    // Handle at top\n    handle();\n    \n    // Hanging hole through handle\n    difference() {\n        children();\n        hanging_hole();\n    }\n    \n    // Transition piece\n    translate([0, 0, handle_length])\n    transition();\n    \n    // Blade at bottom\n    translate([0, 0, handle_length + 8])\n    blade();\n}",
    "renders": true
  },
  {
    "household_item": "melonballer",
    "openscad_code": "// Melonballer - Realistic Medium Complexity\n// Overall length ~90mm, scoop diameter ~30mm\n\n$fn = 36;  // Smooth curves\n\n// Main handle\nmodule handle() {\n    // Handle core\n    linear_extrude(height = 75, twist = 10, scale = [0.8, 0.8])\n        circle(d = 12);\n    \n    // Grip rings\n    for (i = [0:15:60]) {\n        translate([0, 0, 10 + i])\n            cylinder(h = 3, d1 = 13, d2 = 11.5);\n    }\n    \n    // End cap\n    translate([0, 0, 75])\n        sphere(d = 15);\n}\n\n// Scoop bowl\nmodule scoop() {\n    difference() {\n        // Outer hemisphere\n        sphere(d = 30);\n        \n        // Inner hollow\n        sphere(d = 26);\n        \n        // Drain holes\n        for (a = [0:60:300]) {\n            rotate([0, 0, a])\n                translate([12, 0, -5])\n                    cylinder(h = 10, d = 2.5);\n        }\n    }\n    \n    // Cutting edge reinforcement\n    difference() {\n        cylinder(h = 2, d = 32);\n        translate([0, 0, -1])\n            cylinder(h = 4, d = 28);\n    }\n}\n\n// Neck connection\nmodule neck() {\n    // Curved neck\n    hull() {\n        // Handle end\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 8, d = 8);\n        \n        // Scoop end\n        translate([0, 15, -15])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 12);\n    }\n    \n    // Reinforcement ribs\n    for (i = [0:60:300]) {\n        rotate([0, 0, i])\n            translate([5, 7.5, -7.5])\n                cube([3, 15, 3]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, 0, 75])\n    neck();\n\ntranslate([0, 15, 60])\n    rotate([0, 180, 0])\n        scoop();",
    "renders": true
  },
  {
    "household_item": "eggbeater",
    "openscad_code": "// Realistic 3D-printable eggbeater (medium complexity)\n// Overall dimensions ≈ 85 mm tall, 70 mm wide\n\n$fn = 36;               // Smooth curves\nhandle_len = 40;\nhandle_d = 12;\ngear_h = 12;\ngear_d = 24;\ncrank_len = 35;\ncrank_d = 6;\nwhisk_rod_len = 38;\nwhisk_rod_d = 3;\nloop_r = 8;\nloop_wire_d = 2;\nwall = 1.5;             // 3D-printable wall thickness\n\n// ---------- Main handle ----------\nmodule handle() {\n    union() {\n        // Comfortable grip\n        cylinder(h = handle_len, d1 = handle_d - 2, d2 = handle_d, center = false);\n        // Top knob\n        translate([0, 0, handle_len])\n            sphere(d = handle_d + 2);\n    }\n}\n\n// ---------- Rotating crank ----------\nmodule crank() {\n    rotate([90, 0, 0])\n    union() {\n        // Crank arm\n        cylinder(h = crank_len, d = crank_d, center = true);\n        // Knob\n        translate([crank_len/2, 0, 0])\n            sphere(d = crank_d + 4);\n    }\n}\n\n// ---------- Drive gear (simplified crown gear) ----------\nmodule gear() {\n    difference() {\n        cylinder(h = gear_h, d = gear_d);\n        // Central hole for axle\n        cylinder(h = gear_h + 0.1, d = crank_d + 1);\n        // Teeth cutouts for realism\n        for (i = [0:11])\n            rotate([0, 0, i * 30])\n                translate([gear_d/2 - 2, -1.5, -0.1])\n                    cube([4, 3, gear_h + 0.2]);\n    }\n}\n\n// ---------- Whisk loop ----------\nmodule whisk_loop() {\n    // Single elliptical loop\n    rotate_extrude(angle = 360, $fn = 24)\n        translate([loop_r, 0, 0])\n            circle(d = loop_wire_d);\n}\n\n// ---------- Whisk assembly ----------\nmodule whisk() {\n    // Vertical rod\n    cylinder(h = whisk_rod_len, d = whisk_rod_d);\n\n    // Three loops\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([0, 0, whisk_rod_len * 0.3])\n                whisk_loop();\n        \n        rotate([0, 0, angle + 60])\n            translate([0, 0, whisk_rod_len * 0.7])\n                whisk_loop();\n    }\n}\n\n// ---------- Mounting frame ----------\nmodule frame() {\n    // Top arch\n    difference() {\n        union() {\n            // Arch\n            rotate([0, 0, 90])\n                cylinder(h = 60, d = 6, center = true);\n            // Vertical struts\n            translate([30, 0, 0])\n                cylinder(h = 40, d = 6);\n            translate([-30, 0, 0])\n                cylinder(h = 40, d = 6);\n        }\n        // Clearance hole for crank axle\n        rotate([0, 0, 90])\n            translate([0, 30, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, d = crank_d + 1);\n    }\n}\n\n// ---------- Assembly ----------\n// Handle\nhandle();\n\n// Frame\ntranslate([0, 0, handle_len - 5])\n    frame();\n\n// Crank axle\ntranslate([0, 40, handle_len - 5])\n    rotate([0, 90, 0])\n        crank();\n\n// Gear\ntranslate([0, 30, handle_len - 5 - gear_h/2])\n    rotate([90, 0, 0])\n        gear();\n\n// Whisk\ntranslate([0, -30, handle_len - 5 - whisk_rod_len/2])\n    whisk();",
    "renders": true
  },
  {
    "household_item": "masher",
    "openscad_code": "// Potato Masher - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\nhandle_length = 80;\nhandle_diameter = 25;\nmash_plate_diameter = 75;\nmash_plate_thickness = 5;\ngrid_hole_size = 6;\ngrid_hole_spacing = 10;\nwall_thickness = 3;\n\n// Handle grip ring module\nmodule grip_ring(height, diameter, count) {\n    for (i = [0:count-1]) {\n        translate([0, 0, i * height/count]) \n            difference() {\n                cylinder(h=height/count+1, d=diameter, $fn=64);\n                cylinder(h=height/count+1, d=diameter-wall_thickness*2, $fn=64);\n            }\n    }\n}\n\n// Handle\nmodule handle() {\n    union() {\n        // Main handle tube\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, $fn=64);\n            cylinder(h=handle_length, d=handle_diameter-wall_thickness*2, $fn=64);\n        }\n        \n        // Top cap\n        translate([0, 0, handle_length])\n            cylinder(h=wall_thickness*2, d=handle_diameter+2, $fn=64);\n        \n        // Grip rings\n        grip_ring(handle_length*0.6, handle_diameter+2, 8);\n    }\n}\n\n// Mash plate grid pattern\nmodule mash_grid() {\n    holes_per_row = floor(mash_plate_diameter / (grid_hole_size + grid_hole_spacing));\n    offset = (mash_plate_diameter - holes_per_row * (grid_hole_size + grid_hole_spacing)) / 2;\n    \n    difference() {\n        // Base plate\n        cylinder(h=mash_plate_thickness, d=mash_plate_diameter, $fn=128);\n        \n        // Grid holes\n        for (x = [0:holes_per_row-1]) {\n            for (y = [0:holes_per_row-1]) {\n                translate([\n                    offset + x * (grid_hole_size + grid_hole_spacing) + grid_hole_spacing/2 - mash_plate_diameter/2,\n                    offset + y * (grid_hole_size + grid_hole_spacing) + grid_hole_spacing/2 - mash_plate_diameter/2,\n                    -1\n                ])\n                    cube([grid_hole_size, grid_hole_size, mash_plate_thickness+2]);\n            }\n        }\n        \n        // Center hole\n        translate([0, 0, -1])\n            cylinder(h=mash_plate_thickness+2, d=grid_hole_size*1.5, $fn=32);\n    }\n}\n\n// Connection shaft\nmodule shaft() {\n    difference() {\n        // Outer shaft\n        cylinder(h=40, d=20, $fn=32);\n        \n        // Inner hollow\n        cylinder(h=40, d=20-wall_thickness*2, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0]) handle();\n    \n    // Shaft\n    translate([0, 0, handle_length]) shaft();\n    \n    // Mash plate\n    translate([0, 0, handle_length + 40]) \n        rotate([180, 0, 0]) mash_grid();\n}",
    "renders": true
  },
  {
    "household_item": "ricer",
    "openscad_code": "// Potato Ricer in Medium-Detail, Realistic Style\n// Designed for 3D printing, no support required\n\n$fn = 32;\n\nmodule rounded_box(x,y,z,r) {\n    translate([r,r,0]) cube([x-2*r,y-2*r,z]);\n    translate([r,0,0]) cube([x-2*r,r,z]);\n    translate([r,y-r,0]) cube([x-2*r,r,z]);\n    translate([0,r,0]) cube([r,y-2*r,z]);\n    translate([x-r,r,0]) cube([r,y-2*r,z]);\n    for(i=[0,1]) for(j=[0,1]) \n        translate([i?x-r:r, j?y-r:r, 0])\n            cylinder(r=r,h=z,center=false);\n}\n\nmodule handle_profile() {\n    // Elliptical profile for ergonomic handle\n    scale([1,0.6,1]) circle(d=12);\n}\n\nmodule handle_bar(length=90) {\n    linear_extrude(height=length) handle_profile();\n}\n\nmodule grip_texture(len) {\n    for(i=[0:5:len]) {\n        translate([0,0,i]) \n            rotate([0,90,0]) cylinder(h=1,d=2,$fn=6);\n    }\n}\n\nmodule upper_handle() {\n    difference() {\n        // Main handle bar\n        rotate([90,0,0]) handle_bar(90);\n        \n        // Hole for hanging\n        translate([0,0,-5]) rotate([0,90,0]) \n            cylinder(h=20,d=4,center=true);\n            \n        // Grip texture\n        translate([-6,-3,10]) grip_texture(70);\n        translate([6,-3,10]) grip_texture(70);\n    }\n}\n\nmodule lower_handle() {\n    difference() {\n        // Main handle bar\n        rotate([-90,0,0]) handle_bar(70);\n        \n        // Grip texture\n        translate([-6,-3,10]) grip_texture(50);\n        translate([6,-3,10]) grip_texture(50);\n    }\n}\n\nmodule hopper() {\n    difference() {\n        // Main hopper body\n        rounded_box(60,45,40,5);\n        \n        // Tapered cavity\n        translate([30,22.5,5]) \n            cylinder(d1=55,d2=50,h=35);\n            \n        // Bottom holes for rice\n        for(x=[10:10:50]) \n            for(y=[10:10:35])\n                translate([x,y,-1]) cylinder(h=3,d=2);\n    }\n}\n\nmodule plunger() {\n    difference() {\n        // Main plunger plate\n        translate([-27.5,-17.5,0]) \n            rounded_box(55,35,8,3);\n            \n        // Rice extrusion grid\n        for(x=[5:5:50]) \n            for(y=[5:5:30])\n                translate([x-27.5,y-17.5,-1]) \n                    cube([3,3,10]);\n    }\n}\n\nmodule hinge_pin() {\n    cylinder(h=50,d=4,center=true);\n}\n\nmodule hinge() {\n    // Upper hinge\n    translate([0,25,0]) {\n        difference() {\n            cylinder(h=10,d=8);\n            translate([0,0,-1]) cylinder(h=12,d=4);\n        }\n    }\n    \n    // Lower hinge\n    translate([0,-25,0]) {\n        difference() {\n            cylinder(h=10,d=8);\n            translate([0,0,-1]) cylinder(h=12,d=4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Hinged assembly\n    translate([0,0,0]) {\n        // Hopper with lower handle\n        union() {\n            hopper();\n            translate([0,-25,-20]) lower_handle();\n        }\n        \n        // Hinge mechanism\n        hinge();\n        \n        // Plunger with upper handle\n        translate([0,0,45]) {\n            rotate([0,0,0]) {\n                plunger();\n                translate([0,25,0]) rotate([90,0,0]) upper_handle();\n            }\n        }\n    }\n    \n    // Hinge pin\n    translate([0,0,0]) hinge_pin();\n}\n\n// Print orientation\n%translate([0,0,-25]) cube([80,80,1]);",
    "renders": true
  },
  {
    "household_item": "scraper",
    "openscad_code": "// Realistic style medium complexity scraper\n// Overall dimensions: ~90mm length, ~25mm width, ~8mm height\n\n// Parameters\nhandle_length = 65;\nhandle_width = 22;\nhandle_height = 8;\nblade_length = 25;\nblade_width = 20;\nblade_thickness = 1.2;\ngrip_pattern_depth = 0.5;\ngrip_pattern_width = 2;\ngrip_pattern_spacing = 5;\nwall_thickness = 2;\nfillet_radius = 2;\n\n// Handle grip pattern module\nmodule grip_pattern() {\n    for (i = [0:ceil(handle_length/grip_pattern_spacing)-1]) {\n        translate([i*grip_pattern_spacing + grip_pattern_spacing/2, 0, handle_height/2])\n            cube([grip_pattern_width, handle_width, grip_pattern_depth], center=true);\n    }\n}\n\n// Handle with rounded edges\nmodule rounded_handle() {\n    difference() {\n        // Main handle block with rounded ends\n        hull() {\n            translate([fillet_radius, 0, 0])\n                cylinder(h=handle_height, r=fillet_radius, center=true);\n            translate([handle_length-fillet_radius, 0, 0])\n                cylinder(h=handle_height, r=fillet_radius, center=true);\n            translate([fillet_radius, 0, 0])\n                cube([handle_length-2*fillet_radius, handle_width, handle_height], center=true);\n        }\n        \n        // Grip texture\n        grip_pattern();\n        \n        // Hollow center for weight reduction\n        translate([handle_length/2, 0, 0])\n            cube([handle_length-2*wall_thickness, handle_width-2*wall_thickness, handle_height-2*wall_thickness], center=true);\n    }\n}\n\n// Curved scraper blade\nmodule scraper_blade() {\n    difference() {\n        // Main blade shape\n        hull() {\n            // Front edge\n            translate([handle_length + blade_length, 0, 0])\n                cube([blade_thickness*2, blade_width, blade_thickness], center=true);\n            // Transition to handle\n            translate([handle_length - 5, 0, 0])\n                cube([blade_thickness*3, handle_width*0.9, blade_thickness*2], center=true);\n        }\n        \n        // Taper front edge\n        translate([handle_length + blade_length + blade_thickness/2, 0, -blade_thickness/2])\n            rotate([0, 0, 15])\n            cube([blade_length/2, blade_width*1.5, blade_thickness], center=false);\n        \n        // Hollow underside\n        translate([handle_length + blade_length/2, 0, -blade_thickness/2])\n            cube([blade_length, blade_width*0.8, blade_thickness], center=true);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    num_ribs = 3;\n    for (i = [0:num_ribs-1]) {\n        translate([handle_length - 15 + i*10, 0, handle_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=handle_width*0.8, r1=1.5, r2=0.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main handle\n    rounded_handle();\n    \n    // Blade\n    scraper_blade();\n    \n    // Structural ribs\n    ribs();\n    \n    // Hanging hole\n    translate([5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=handle_height, r=3, center=true);\n}",
    "renders": true
  },
  {
    "household_item": "mandoline",
    "openscad_code": "// Realistic Mandoline Slicer - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main parameters\nmandoline_width = 80;\nmandoline_length = 120;\nmandoline_height = 40;\nwall_thickness = 2;\n\n// Base frame module\nmodule base_frame() {\n    // Bottom platform\n    difference() {\n        cube([mandoline_length, mandoline_width, 5]);\n        // Cutout for finger grip\n        translate([mandoline_length-15, 35, 0])\n            cube([10, 10, 5]);\n    }\n    \n    // Side rails\n    translate([0, 0, 5])\n        cube([wall_thickness, mandoline_width, mandoline_height-5]);\n    translate([mandoline_length-wall_thickness, 0, 5])\n        cube([wall_thickness, mandoline_width, mandoline_height-5]);\n    \n    // Front stop\n    translate([0, 0, 0])\n        cube([mandoline_length, wall_thickness, 15]);\n}\n\n// Adjustable thickness platform\nmodule thickness_platform() {\n    // Main platform\n    translate([10, wall_thickness, 15])\n        cube([mandoline_length-20, mandoline_width-4, 3]);\n    \n    // Adjustment ridges on bottom\n    for(i = [0:3]) {\n        translate([15 + i*25, wall_thickness, 12])\n            cube([2, mandoline_width-4, 3]);\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    // Blade holder\n    difference() {\n        translate([5, wall_thickness, 18])\n            cube([mandoline_length-10, mandoline_width-4, 8]);\n        \n        // Blade slot\n        translate([10, 10, 20])\n            cube([mandoline_length-20, mandoline_width-20, 4]);\n    }\n    \n    // Actual blade (angled cutting edge)\n    translate([10, 15, 24])\n        rotate([0, 10, 0])\n            cube([mandoline_length-20, 0.5, 5]);\n    \n    // Safety guard posts\n    for(pos = [20, 40, 60]) {\n        translate([pos, 5, 26])\n            cylinder(h=8, r=1.5);\n        translate([pos, mandoline_width-7, 26])\n            cylinder(h=8, r=1.5);\n    }\n}\n\n// Hand guard\nmodule hand_guard() {\n    // Main body\n    difference() {\n        translate([0, 0, 0])\n            cube([40, 60, 30]);\n        \n        // Grip hole\n        translate([5, 25, 10])\n            cube([30, 20, 20]);\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            translate([10, 10 + i*10, 25])\n                sphere(r=5);\n        }\n    }\n    \n    // Pins for sliding\n    translate([0, 5, 5])\n        cylinder(h=5, r=2);\n    translate([0, 55, 5])\n        cylinder(h=5, r=2);\n}\n\n// Non-slip feet\nmodule feet() {\n    for(pos = [[10, 10], [mandoline_length-20, 10], \n               [10, mandoline_width-20], [mandoline_length-20, mandoline_width-20]]) {\n        translate([pos[0], pos[1], -3])\n            cylinder(h=3, r=4);\n    }\n}\n\n// Assembly\nunion() {\n    base_frame();\n    thickness_platform();\n    blade_assembly();\n    feet();\n    \n    // Hand guard positioned for storage\n    translate([mandoline_length+10, 10, 0])\n        hand_guard();\n}",
    "renders": true
  },
  {
    "household_item": "slicer",
    "openscad_code": "// Realistic 3D-printable slicer (mandoline style) – medium complexity\n// All dimensions in mm\n// Build plate friendly: 80 x 70 x 40 mm overall\n\n$fn = 36;            // smooth curves\n\n// ---------- parameters ----------\nbody_l = 70;\nbody_w = 60;\nbody_h = 5;\n\nchute_l = 60;\nchute_w = 55;\nchute_tilt = 30;     // degrees\n\nhandle_l = 40;\nhandle_d = 10;\n\nblade_h = 0.5;\nblade_gap = 0.6;     // slicing thickness\n\nleg_h = 15;\nleg_t = 3;\n\n// ---------- main body ----------\nmodule slicer_body() {\n    difference() {\n        // base\n        translate([0, 0, body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n\n        // blade slot\n        translate([0, 0, body_h/2])\n            cube([body_l*0.8, blade_gap, body_h+0.1], center=true);\n\n        // chute opening\n        rotate([0, chute_tilt, 0])\n        translate([(body_l-chute_l)/2 - 2, 0, body_h/2])\n            cube([chute_l+4, chute_w, body_h+1], center=true);\n    }\n}\n\n// ---------- stainless-steel blade ----------\nmodule blade() {\n    color(\"silver\")\n    translate([0, 0, body_h - blade_h/2])\n        cube([body_l*0.8, 0.4, blade_h], center=true);\n}\n\n// ---------- food chute ----------\nmodule chute() {\n    difference() {\n        // sloped chute\n        rotate([0, -chute_tilt, 0])\n        translate([(body_l-chute_l)/2, 0, body_h/2 + chute_l*sin(chute_tilt)/2])\n            cube([chute_l, chute_w, body_h], center=true);\n\n        // food tunnel\n        rotate([0, -chute_tilt, 0])\n        translate([(body_l-chute_l)/2, 0, body_h/2 + chute_l*sin(chute_tilt)/2])\n            cube([chute_l-2*leg_t, chute_w-2*leg_t, body_h+1], center=true);\n    }\n}\n\n// ---------- hand guard ----------\nmodule hand_guard() {\n    difference() {\n        // slider block\n        translate([-(body_l-chute_l)/2 - 5, 0, body_h + leg_h/2])\n            cube([10, chute_w-10, leg_h], center=true);\n\n        // finger groove\n        translate([-(body_l-chute_l)/2 - 5, 0, body_h + leg_h/2 + 2])\n            cube([12, chute_w-20, leg_h-2], center=true);\n\n        // blade clearance cutout\n        translate([-(body_l-chute_l)/2 - 5, 0, body_h])\n            cube([12, blade_gap+2, blade_h+2], center=true);\n    }\n}\n\n// ---------- handle ----------\nmodule handle() {\n    color(\"#444\")\n    translate([body_l/2 + handle_l/2, 0, body_h/2 + 3])\n        rotate([0, 90, 0])\n            cylinder(h = handle_l, d = handle_d, center=true);\n\n    // grip rings\n    for (i = [0 : 1 : 3]) {\n        translate([body_l/2 + 5 + i*8, 0, body_h/2 + 3])\n            rotate([0, 90, 0])\n                cylinder(h = 2, d = handle_d+2, center=true);\n    }\n}\n\n// ---------- legs ----------\nmodule legs() {\n    positions = [\n        [-body_l/2+5,  body_w/2-5],\n        [ body_l/2-5,  body_w/2-5],\n        [-body_l/2+5, -body_w/2+5],\n        [ body_l/2-5, -body_w/2+5]\n    ];\n    for (p = positions) {\n        translate([p.x, p.y, -leg_h/2])\n            cube([leg_t, leg_t, leg_h], center=true);\n    }\n}\n\n// ---------- assembly ----------\nunion() {\n    slicer_body();\n    blade();\n    chute();\n    hand_guard();\n    handle();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "chopper",
    "openscad_code": "// Realistic Chopper Motorcycle - Medium Complexity\n// All dimensions in mm, designed for 3D printing\n\n$fn = 50;  // Smooth curves\nscale_factor = 0.8;  // Adjust overall size\n\nmodule chopper() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main frame\n            frame();\n            \n            // Engine\n            engine();\n            \n            // Front fork and wheel\n            translate([0, 35, 0]) rotate([0, 0, 0]) front_assembly();\n            \n            // Rear wheel and swingarm\n            translate([0, -35, 0]) rotate([0, 0, 0]) rear_assembly();\n            \n            // Seat\n            translate([0, -10, 15]) seat();\n            \n            // Handlebars\n            translate([0, 35, 30]) handlebars();\n            \n            // Fuel tank\n            translate([0, 10, 20]) tank();\n            \n            // Exhaust pipes\n            translate([8, 0, 5]) exhaust_left();\n            translate([-8, 0, 5]) mirror([1,0,0]) exhaust_left();\n        }\n    }\n}\n\nmodule frame() {\n    // Main backbone tube\n    color(\"silver\")\n    hull() {\n        translate([0, 30, 20]) sphere(d=5);\n        translate([0, -30, 15]) sphere(d=5);\n    }\n    \n    // Down tubes\n    color(\"silver\")\n    hull() {\n        translate([0, 25, 20]) sphere(d=4);\n        translate([6, 25, 0]) sphere(d=4);\n        translate([-6, 25, 0]) sphere(d=4);\n    }\n}\n\nmodule engine() {\n    color(\"darkgray\")\n    union() {\n        // Engine block\n        translate([0, 5, 8]) cube([16, 20, 12], center=true);\n        \n        // Cylinders\n        for(i = [-1, 1]) {\n            translate([i*6, 5, 18]) cylinder(h=12, d=8);\n        }\n        \n        // Oil pan\n        translate([0, 5, 2]) cube([18, 22, 4], center=true);\n    }\n}\n\nmodule front_assembly() {\n    // Fork tubes\n    color(\"silver\")\n    union() {\n        translate([6, 0, 20]) cylinder(h=40, d=4);\n        translate([-6, 0, 20]) cylinder(h=40, d=4);\n    }\n    \n    // Front wheel\n    color(\"black\")\n    rotate([90, 0, 0]) cylinder(h=10, d=30, center=true);\n    \n    // Spokes\n    color(\"silver\")\n    for(i = [0:30:330]) {\n        rotate([90, 0, i]) \n        translate([0, 0, 0]) cube([2, 12, 2], center=true);\n    }\n    \n    // Front fender\n    color(\"red\")\n    translate([0, 0, 8]) \n    difference() {\n        cylinder(h=3, d=32);\n        translate([0, 0, -1]) cylinder(h=5, d=28);\n    }\n}\n\nmodule rear_assembly() {\n    // Swingarm\n    color(\"silver\")\n    union() {\n        hull() {\n            translate([0, 0, 10]) sphere(d=4);\n            translate([6, -15, 8]) sphere(d=3);\n            translate([-6, -15, 8]) sphere(d=3);\n        }\n    }\n    \n    // Rear wheel\n    color(\"black\")\n    rotate([90, 0, 0]) cylinder(h=12, d=35, center=true);\n    \n    // Spokes\n    color(\"silver\")\n    for(i = [0:30:330]) {\n        rotate([90, 0, i]) \n        translate([0, 0, 0]) cube([2, 15, 2], center=true);\n    }\n    \n    // Rear fender\n    color(\"red\")\n    translate([0, 0, 12]) \n    difference() {\n        cylinder(h=4, d=38);\n        translate([0, 0, -1]) cylinder(h=6, d=32);\n    }\n}\n\nmodule seat() {\n    color(\"black\")\n    difference() {\n        translate([0, 0, 0]) cube([20, 30, 8], center=true);\n        translate([0, 5, 4]) cube([22, 20, 8], center=true);\n    }\n}\n\nmodule handlebars() {\n    color(\"silver\")\n    union() {\n        // Handlebar clamp\n        translate([0, 0, 0]) cube([15, 4, 6], center=true);\n        \n        // Handlebar tubes\n        translate([8, 0, 3]) rotate([0, 30, 0]) cylinder(h=15, d=3);\n        translate([-8, 0, 3]) rotate([0, 30, 0]) cylinder(h=15, d=3);\n    }\n}\n\nmodule tank() {\n    color(\"red\")\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(d=12);\n            translate([0, 10, 0]) sphere(d=12);\n        }\n        translate([0, 0, -3]) cube([20, 20, 6], center=true);\n    }\n}\n\nmodule exhaust_left() {\n    color(\"silver\")\n    union() {\n        // Header pipe\n        translate([0, 0, 0]) rotate([0, 30, 0]) cylinder(h=20, d=4);\n        \n        // Muffler\n        translate([10, 12, -5]) rotate([0, 0, 30]) cylinder(h=15, d=6);\n    }\n}\n\n// Render the complete chopper\nchopper();",
    "renders": true
  },
  {
    "household_item": "dicer",
    "openscad_code": "// Realistic Dice Roller / Dicer (Medium complexity)\n// Overall size: ~60 mm cube with 16 mm dice\n\n// ----------------- Parameters -----------------\n$fn = 36;\nwall = 2;           // wall thickness for 3D printing\nbase_size = 60;     // outer cube size\ninner_clear = base_size - 2*wall - 4; // clearance inside\ndice_size = 16;     // standard 16 mm die\ngap = 2;            // gap between dice and walls\n\n// ----------------- Modules -----------------\n// Rounded corner cube using hull of spheres\nmodule rounded_cube(size, r, center = false) {\n    translate(center ? -size/2 : [0,0,0])\n    hull() {\n        for(dx = [0,1], dy = [0,1], dz = [0,1])\n            translate([dx*size.x - r, dy*size.y - r, dz*size.z - r])\n                sphere(r);\n    }\n}\n\n// Die with pips\nmodule die(s) {\n    // Main cube body\n    rounded_cube([s, s, s], 2, true);\n    \n    // Pip positions for standard die\n    pip_pos = [\n        [0,0,0],          // 1\n        [-s/4, -s/4, s/2], [s/4, s/4, s/2],  // 2\n        [-s/3, -s/3, s/2], [0,0,s/2], [s/3, s/3, s/2], // 3\n        [-s/3, -s/3, s/2], [s/3, -s/3, s/2], [-s/3, s/3, s/2], [s/3, s/3, s/2], // 4\n        [-s/3, -s/3, s/2], [s/3, -s/3, s/2], [0,0,s/2], [-s/3, s/3, s/2], [s/3, s/3, s/2], // 5\n        [-s/3, -s/3, s/2], [s/3, -s/3, s/2], [-s/3, 0, s/2], [s/3, 0, s/2], [-s/3, s/3, s/2], [s/3, s/3, s/2] // 6\n    ];\n    \n    // Create pips for each face\n    for(face = [0:5]) {\n        rotate([0, face*90, 0]) {\n            for(i = [0:face]) {\n                translate(pip_pos[i])\n                    cylinder(h=1, d=3, $fn=12);\n            }\n        }\n    }\n}\n\n// Dice tower with ramps\nmodule dice_tower() {\n    difference() {\n        // Outer shell\n        rounded_cube([base_size, base_size, base_size], 5, true);\n        \n        // Hollow inside\n        translate([0,0,wall/2])\n            rounded_cube([base_size-2*wall, base_size-2*wall, base_size-wall], 3, true);\n        \n        // Entry slot on top\n        translate([0,0,base_size/2 - wall/2])\n            cube([dice_size+4, dice_size+4, wall+1], center=true);\n        \n        // Exit slot at bottom front\n        translate([0,-base_size/2+wall/2, -base_size/4])\n            cube([dice_size*2, wall+1, dice_size*2], center=true);\n    }\n    \n    // Internal ramps for tumbling\n    for(i = [1:3]) {\n        rotate([0,0,i*20])\n        translate([0, base_size/4 - i*10, base_size/2 - i*15])\n            rotate([45,0,0])\n            cube([base_size-10, 2, 30], center=true);\n    }\n}\n\n// Lid/tray that doubles as rolling surface\nmodule lid() {\n    difference() {\n        // Main lid body\n        translate([0,0,base_size/2 + 2])\n            rounded_cube([base_size+2, base_size+2, 4], 2, true);\n        \n        // Recess for dice storage\n        translate([0,0,base_size/2 + 4])\n            rounded_cube([base_size-6, base_size-6, 2], 1, true);\n    }\n    \n    // Small dice storage compartments\n    for(x = [-1,1], y = [-1,1]) {\n        translate([x*15, y*15, base_size/2 + 5])\n            cylinder(h=3, d=dice_size+4, $fn=24);\n    }\n}\n\n// ----------------- Assembly -----------------\n// Main dice tower\ndice_tower();\n\n// Lid positioned beside the tower\ntranslate([base_size+10,0,0])\n    lid();\n\n// Example dice in storage positions\ntranslate([base_size+10, -15, base_size/2+6])\n    rotate([0,0,45])\n    die(dice_size);\n\ntranslate([base_size+10, 15, base_size/2+6])\n    rotate([0,0,-30])\n    die(dice_size);",
    "renders": true
  },
  {
    "household_item": "mincer",
    "openscad_code": "// Meat mincer - medium complexity realistic style\n// Overall dimensions: ~80mm long, ~60mm tall, ~40mm wide\n\n// Main body cylinder\nmodule body() {\n    difference() {\n        // Main cylinder\n        cylinder(h=50, d=35, $fn=100);\n        \n        // Feed tube hole\n        translate([0, -15, 40])\n            rotate([90, 0, 0])\n            cylinder(h=25, d=28, $fn=50);\n        \n        // Output nozzle hole\n        translate([0, 0, -5])\n            cylinder(h=15, d=12, $fn=50);\n    }\n}\n\n// Feed tube funnel\nmodule feed_tube() {\n    difference() {\n        // Main tube\n        translate([0, -15, 52.5])\n            rotate([90, 0, 0])\n            cylinder(h=25, d1=35, d2=28, $fn=50);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h=30, d1=32, d2=25, $fn=50);\n    }\n}\n\n// Handle crank\nmodule handle() {\n    // Crank arm\n    translate([17.5, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h=30, d=8, $fn=30);\n    \n    // Handle grip\n    translate([32.5, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h=20, d=12, $fn=30);\n    \n    // Crank knob\n    translate([42.5, 0, 25])\n        sphere(d=15, $fn=30);\n}\n\n// Mounting bracket\nmodule bracket() {\n    // Base plate\n    translate([0, 0, -10])\n        cube([50, 20, 5], center=true);\n    \n    // Mounting holes\n    for(x=[-20, 20])\n        translate([x, 0, -7.5])\n            cylinder(h=10, d=5, $fn=20);\n}\n\n// Screw conveyor (auger)\nmodule auger() {\n    // Central shaft\n    translate([0, 0, 25])\n        cylinder(h=45, d=8, $fn=30);\n    \n    // Spiral blade segments\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 6, 22.5])\n                rotate([90, 0, 0])\n                cylinder(h=15, d=12, $fn=20);\n    }\n}\n\n// Output nozzle\nmodule nozzle() {\n    difference() {\n        // Main nozzle\n        translate([0, 0, -15])\n            cylinder(h=15, d1=20, d2=15, $fn=50);\n        \n        // Inner hole\n        translate([0, 0, -14])\n            cylinder(h=15, d=8, $fn=30);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    body();\n    feed_tube();\n    handle();\n    bracket();\n    \n    // Internal components (visible for realism)\n    translate([0, 0, -5])\n        auger();\n    \n    nozzle();\n}\n\n// Reinforcement rings\ntranslate([0, 0, 45])\n    cylinder(h=5, d=38, $fn=100);\n\ntranslate([0, 0, 5])\n    cylinder(h=5, d=38, $fn=100);",
    "renders": true
  },
  {
    "household_item": "garlicpress",
    "openscad_code": "// Realistic 3D printable garlic press\n// Medium complexity (~120 lines)\n\n// Overall dimensions\npress_length = 95;\npress_width = 40;\nhandle_height = 30;\n\n// Handle profile\nmodule handle_profile(r=8, h=100) {\n    difference() {\n        // Main handle cylinder\n        cylinder(r=r, h=h, $fn=32);\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            translate([0, 0, 15 + i*20]) rotate([0,90,0]) \n                cylinder(r1=8, r2=6, h=4, $fn=16);\n        }\n    }\n}\n\n// Hinge mechanism\nmodule hinge(r=5) {\n    difference() {\n        // Main hinge cylinder\n        cylinder(r=r+2, h=press_width, $fn=32);\n        \n        // Hole for pin\n        cylinder(r=r, h=press_width+2, $fn=32);\n    }\n}\n\n// Pressing chamber\nmodule chamber() {\n    difference() {\n        // Main chamber block\n        translate([0, 0, 0]) cube([45, press_width, 25], center=true);\n        \n        // Cavity for garlic\n        translate([0, 0, -5]) cube([35, press_width-6, 15], center=true);\n        \n        // Holes for garlic extrusion\n        for(x = [-15:5:15]) {\n            for(y = [-15:5:15]) {\n                translate([x, y, 12.5]) cylinder(r=1.5, h=5, $fn=12);\n            }\n        }\n    }\n}\n\n// Top pressing plate\nmodule press_plate() {\n    difference() {\n        // Plate body\n        translate([0, 0, 0]) cube([43, press_width-4, 3], center=true);\n        \n        // Pressing nubs\n        for(x = [-15:5:15]) {\n            for(y = [-15:5:15]) {\n                translate([x, y, -1.5]) cylinder(r=2, h=3, $fn=12);\n            }\n        }\n    }\n}\n\n// Bottom handle with chamber\nmodule bottom_handle() {\n    union() {\n        // Chamber\n        translate([0, 0, -12.5]) chamber();\n        \n        // Handle extension\n        translate([-47.5 + 22.5 + 20, 0, -handle_height/2 - 12.5]) \n            rotate([0, -20, 0]) handle_profile(r=8, h=60);\n        \n        // Hinge part\n        translate([22.5, 0, 12.5]) hinge();\n    }\n}\n\n// Top handle with press plate\nmodule top_handle() {\n    union() {\n        // Press plate\n        translate([0, 0, 12.5 + 1.5]) press_plate();\n        \n        // Handle extension\n        translate([-47.5 + 22.5 + 20, 0, handle_height/2 + 12.5]) \n            rotate([0, 20, 0]) handle_profile(r=8, h=60);\n        \n        // Hinge part\n        translate([22.5, 0, -12.5 - 2]) hinge();\n    }\n}\n\n// Assembly\nunion() {\n    // Bottom handle\n    bottom_handle();\n    \n    // Top handle (rotate for open position)\n    rotate([0, 0, 0]) top_handle();\n    \n    // Optional hinge pin (print separately)\n    // translate([22.5, 0, 0]) cylinder(r=4.8, h=press_width+4, $fn=32);\n}",
    "renders": true
  },
  {
    "household_item": "bottleopener",
    "openscad_code": "// Realistic 3D printable bottle opener\n// Dimensions in mm\n\n// Overall parameters\nhandle_length = 90;\nhandle_width = 30;\nhandle_thickness = 8;\nopener_radius = 15;\nwall_thickness = 3;\n\n// Handle with ergonomic grip\nmodule handle() {\n    // Main handle body\n    difference() {\n        // Tapered handle shape\n        hull() {\n            translate([0, 0, handle_thickness/2])\n                cube([handle_length * 0.8, handle_width, handle_thickness], center=true);\n            translate([handle_length * 0.4, 0, handle_thickness/2])\n                cube([handle_length * 0.6, handle_width * 0.8, handle_thickness], center=true);\n        }\n        \n        // Finger grooves on bottom\n        for(i = [-1:1]) {\n            translate([i * 15, 0, -handle_thickness/2 + 0.5])\n                rotate([0, 90, 0])\n                    cylinder(h=20, r=4, center=true, $fn=20);\n        }\n        \n        // Weight reduction holes\n        translate([handle_length * 0.3, 0, 0])\n            cylinder(h=handle_thickness + 2, r=5, center=true, $fn=20);\n        translate([handle_length * 0.5, 0, 0])\n            cylinder(h=handle_thickness + 2, r=5, center=true, $fn=20);\n    }\n}\n\n// Opener head with bottle cap grip\nmodule opener_head() {\n    // Main opener ring\n    difference() {\n        // Outer ring\n        cylinder(h=handle_thickness, r=opener_radius, center=true, $fn=60);\n        \n        // Inner hole\n        cylinder(h=handle_thickness + 2, r=opener_radius - wall_thickness, center=true, $fn=60);\n        \n        // Opening slot for bottle cap\n        translate([0, -opener_radius, 0])\n            cube([opener_radius * 1.8, opener_radius * 2, handle_thickness + 2], center=true);\n        \n        // Grip teeth\n        for(i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([opener_radius - wall_thickness - 1, 0, 0])\n                    cube([2, 1.5, handle_thickness + 1], center=true);\n        }\n    }\n}\n\n// Reinforcement rib\nmodule reinforcement() {\n    difference() {\n        // Main rib\n        hull() {\n            translate([handle_length * 0.2, 0, handle_thickness/2])\n                sphere(r=handle_thickness/2, $fn=20);\n            translate([0, 0, handle_thickness/2])\n                sphere(r=handle_thickness * 0.8, $fn=20);\n        }\n        \n        // Remove excess material\n        translate([handle_length * 0.1, 0, 0])\n            cube([handle_length * 0.3, handle_width * 1.2, handle_thickness * 1.5], center=true);\n    }\n}\n\n// Assembly\ntranslate([-handle_length * 0.5, 0, 0])\n    handle();\n\ntranslate([0, 0, 0])\n    opener_head();\n\ntranslate([0, 0, 0])\n    reinforcement();\n\n// Hanging hole\ntranslate([handle_length * 0.45, 0, handle_thickness/2])\n    rotate([90, 0, 0])\n        cylinder(h=handle_width, r=3, center=true, $fn=20);",
    "renders": true
  },
  {
    "household_item": "foil",
    "openscad_code": "// Realistic Foil - Medium Complexity\n// A 3D printable foil with moderate detail\n// Total length: 80mm\n\n$fn = 32; // Smooth curves for printing\n\n// Main parameters\nblade_length = 65;\nblade_width = 10;\nblade_thickness = 2;\nguard_diameter = 22;\nguard_thickness = 4;\nhandle_length = 30;\nhandle_diameter = 12;\npommel_diameter = 15;\npommel_length = 8;\n\n// Blade module - tapered and slightly curved\nmodule blade() {\n    // Create curved blade using hull of tapered sections\n    linear_extrude(height=blade_thickness, center=true) {\n        offset(0.5) {\n            hull() {\n                // Tip\n                translate([blade_length, 0, 0]) \n                    circle(d=1);\n                // Mid section\n                translate([blade_length * 0.7, 0, 0]) \n                    circle(d=blade_width * 0.8);\n                // Base\n                translate([0, 0, 0]) \n                    circle(d=blade_width);\n            }\n        }\n    }\n    \n    // Add fuller groove for strength\n    difference() {\n        translate([blade_length * 0.3, 0, 0])\n            cube([blade_length * 0.6, blade_width * 0.3, blade_thickness + 0.2], center=true);\n        \n        translate([blade_length * 0.3, 0, 0])\n            cube([blade_length * 0.6, blade_width * 0.2, blade_thickness + 0.4], center=true);\n    }\n}\n\n// Guard module - cup-shaped with holes\nmodule guard() {\n    difference() {\n        // Main cup\n        cylinder(h=guard_thickness, d1=guard_diameter, d2=guard_diameter * 0.9);\n        \n        // Center hole for tang\n        cylinder(h=guard_thickness + 1, d=handle_diameter * 0.5);\n        \n        // Ventilation holes\n        for(i = [0:6]) {\n            rotate([0, 0, i * 60]) {\n                translate([guard_diameter * 0.35, 0, -0.5])\n                    cylinder(h=guard_thickness + 1, d=3);\n            }\n        }\n    }\n}\n\n// Handle module - textured grip\nmodule handle() {\n    union() {\n        // Main handle\n        cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip rings\n        for(i = [1:4]) {\n            translate([0, 0, i * (handle_length/5)])\n                cylinder(h=2, d=handle_diameter * 1.1);\n        }\n        \n        // Spiral texture for grip\n        for(angle = [0:30:360]) {\n            rotate([0, 0, angle])\n                translate([handle_diameter/2 + 0.5, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=handle_length, d=1);\n        }\n    }\n}\n\n// Pommel module - counterweight\nmodule pommel() {\n    difference() {\n        // Main pommel\n        cylinder(h=pommel_length, d1=pommel_diameter, d2=pommel_diameter * 0.8);\n        \n        // Tang hole\n        cylinder(h=pommel_length + 1, d=handle_diameter * 0.5);\n    }\n}\n\n// Tang (hidden part connecting blade to handle)\nmodule tang() {\n    cylinder(h=handle_length + pommel_length + guard_thickness, d=handle_diameter * 0.5);\n}\n\n// Assemble the foil\nunion() {\n    // Blade\n    rotate([0, -2, 0]) // Slight upward curve\n        blade();\n    \n    // Guard\n    translate([0, 0, blade_thickness/2 + guard_thickness/2])\n        guard();\n    \n    // Tang\n    translate([0, 0, blade_thickness/2 + guard_thickness/2])\n        rotate([0, 90, 0])\n            tang();\n    \n    // Handle\n    translate([0, 0, blade_thickness/2 + guard_thickness + handle_length/2])\n        rotate([0, 90, 0])\n            handle();\n    \n    // Pommel\n    translate([0, 0, blade_thickness/2 + guard_thickness + handle_length + pommel_length/2])\n        rotate([0, 90, 0])\n            pommel();\n}",
    "renders": true
  },
  {
    "household_item": "plasticwrap",
    "openscad_code": "// Plastic Wrap Dispenser - Realistic Medium Complexity\n// Dimensions: ~80mm wide x 50mm deep x 30mm tall\n\n// Main body dimensions\nbody_width = 80;\nbody_depth = 50;\nbody_height = 25;\nwall_thickness = 2;\n\n// Roll dimensions\nroll_diameter = 40;\nroll_width = 35;\ncore_diameter = 12;\n\n// Cutting edge dimensions\nteeth_width = 1.5;\nteeth_height = 3;\nteeth_spacing = 3;\nteeth_count = floor(body_width / teeth_spacing) - 2;\n\n// Module for cutting teeth\nmodule cutting_teeth() {\n    for(i = [0:teeth_count-1]) {\n        translate([i * teeth_spacing, 0, 0])\n            cube([teeth_width, teeth_height, 2], center = true);\n    }\n}\n\n// Main body with hollow interior\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([body_width, body_depth, body_height], center = false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([body_width - 2*wall_thickness, body_depth - 2*wall_thickness, body_height - wall_thickness], center = false);\n        \n        // Slot for roll access\n        translate([wall_thickness, body_depth - wall_thickness - 2, body_height - 5])\n            cube([body_width - 2*wall_thickness, 2, 5], center = false);\n    }\n}\n\n// Roll holder axle\nmodule roll_axle() {\n    translate([body_width/2 - roll_width/2, body_depth/2 - 5, body_height/2 + 2])\n        rotate([90, 0, 0])\n            cylinder(h = roll_width, d = core_diameter + 1, center = false);\n}\n\n// Roll with plastic wrap\nmodule plastic_roll() {\n    translate([body_width/2 - roll_width/2, body_depth/2 - 5, body_height/2 + 2])\n        rotate([90, 0, 0])\n            difference() {\n                // Roll of plastic\n                cylinder(h = roll_width, d = roll_diameter, center = false);\n                \n                // Core\n                cylinder(h = roll_width + 1, d = core_diameter, center = true);\n            }\n}\n\n// Cutting bar with teeth\nmodule cutting_bar() {\n    translate([0, body_depth - 5, body_height - 1])\n        union() {\n            // Bar base\n            cube([body_width, 5, 2], center = false);\n            \n            // Teeth\n            translate([teeth_spacing, 5, 1])\n                cutting_teeth();\n        }\n}\n\n// Side supports for roll\nmodule side_supports() {\n    for(side = [0, 1]) {\n        translate([side * (body_width - wall_thickness*2), 0, 0])\n            cube([wall_thickness, body_depth, body_height], center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    main_body();\n    \n    // Side supports\n    side_supports();\n    \n    // Roll axle\n    roll_axle();\n    \n    // Plastic roll\n    plastic_roll();\n    \n    // Cutting bar\n    cutting_bar();\n    \n    // Grip texture on sides\n    for(i = [1:3:body_height - 4]) {\n        translate([-wall_thickness/2, 5, i])\n            cube([wall_thickness, body_depth - 10, 2], center = false);\n        translate([body_width - wall_thickness/2, 5, i])\n            cube([wall_thickness, body_depth - 10, 2], center = false);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "parchment",
    "openscad_code": "// Realistic 3D-printable parchment model\n// Overall size ~80 mm (length) x 55 mm (width) x 1.2 mm (thickness)\n\n// Parameters\nparchment_length = 80;\nparchment_width  = 55;\nbase_thickness   = 0.4;\nrelief_height    = 0.8;\nedge_thickness   = 0.6;\n\n// Generate curled parchment sheet\nmodule parchment() {\n    // Main sheet with slight curvature\n    difference() {\n        translate([0, 0, -base_thickness/2])\n            cube([parchment_length, parchment_width, base_thickness], center = true);\n        \n        // Carve gentle curl on front-right corner\n        translate([parchment_length/2 - 8, parchment_width/2 - 8, -base_thickness/2 - 0.1])\n            rotate([0, 45, 0])\n                cylinder(h = base_thickness + 0.2, r = 8, $fn = 20);\n    }\n\n    // Raised surface for realistic fiber texture\n    for (i = [-parchment_length/2 + 2 : 8 : parchment_length/2 - 2])\n        for (j = [-parchment_width/2 + 2 : 6 : parchment_width/2 - 2]) {\n            translate([i, j, base_thickness/2])\n                rotate([0, 0, rand(i, j) * 180])\n                    cylinder(h = relief_height * 0.3, r1 = 1.8, r2 = 1.2, $fn = 6);\n        }\n\n    // Rolled edges to simulate curled parchment\n    // Top edge roll\n    translate([0, parchment_width/2, base_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = parchment_length - 6, r = edge_thickness/2, center = true, $fn = 20);\n\n    // Bottom edge roll\n    translate([0, -parchment_width/2, base_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = parchment_length - 6, r = edge_thickness/2, center = true, $fn = 20);\n\n    // Left edge roll\n    translate([-parchment_length/2, 0, base_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = parchment_width - 6, r = edge_thickness/2, center = true, $fn = 20);\n\n    // Right edge roll\n    translate([parchment_length/2, 0, base_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = parchment_width - 6, r = edge_thickness/2, center = true, $fn = 20);\n\n    // Creases and folds\n    translate([parchment_length/4, 0, base_thickness/2 + relief_height/2])\n        rotate([0, 0, 30])\n            cube([parchment_length/2, 0.5, relief_height], center = true);\n\n    translate([-parchment_length/4, -parchment_width/4, base_thickness/2 + relief_height/2])\n        rotate([0, 0, -15])\n            cube([parchment_length/3, 0.5, relief_height], center = true);\n\n    // Wax seal impression (simple raised circle)\n    translate([parchment_length/3, -parchment_width/3, base_thickness/2 + relief_height/2])\n        cylinder(h = relief_height, r = 4, $fn = 20);\n    translate([parchment_length/3, -parchment_width/3, base_thickness/2 + relief_height + 0.1])\n        cylinder(h = 0.2, r = 3.8, $fn = 20);\n}\n\n// Pseudo-random helper (deterministic)\nfunction rand(x, y) = (sin(x * 12.9898 + y * 78.233) * 43758.5453) % 1;\n\n// Render the parchment\nparchment();",
    "renders": true
  },
  {
    "household_item": "waxpaper",
    "openscad_code": "// Realistic waxpaper roll with serrated cutter, 3D-printable\n// ~80 mm wide, 50 mm diameter roll\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 1;\n\nmodule waxpaper_roll() {\n    // Cardboard core\n    difference() {\n        cylinder(h = 70, d = 38);\n        translate([0, 0, -1])\n            cylinder(h = 72, d = 34);\n    }\n\n    // Waxpaper wrapped around core\n    for (i = [0:89]) {\n        rotate([0, 0, i * 4])\n            translate([19, 0, 0])\n            cube([0.1, 70, 0.2]);\n    }\n\n    // Outer roll thickness\n    difference() {\n        cylinder(h = 70, d = 50);\n        cylinder(h = 70, d = 38);\n    }\n}\n\nmodule cutter_bar() {\n    // Bar body\n    difference() {\n        cube([76, 6, 12]);\n        translate([-1, -1, 4])\n            cube([78, 8, 5]);\n    }\n\n    // Serrated edge\n    for (i = [0:37]) {\n        translate([i * 2 - 37, 3, 6])\n            rotate([90, 0, 0])\n                cylinder(h = 1.5, d1 = 2, d2 = 0.5);\n    }\n\n    // Mounting tabs\n    translate([-38, -3, 6])\n        rotate([90, 0, 0])\n            cylinder(h = 4, d = 3);\n    translate([38, -3, 6])\n        rotate([90, 0, 0])\n            cylinder(h = 4, d = 3);\n}\n\nmodule bracket_left() {\n    difference() {\n        union() {\n            // Base plate\n            cube([10, 15, 3]);\n            // Upright\n            translate([2, 0, 3])\n                cube([6, 15, 30]);\n            // Core holder\n            translate([5, 7.5, 33])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d = 10);\n        }\n        // Hole for core\n        translate([5, 7.5, 33])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 38);\n    }\n}\n\nmodule bracket_right() {\n    mirror([1, 0, 0])\n        bracket_left();\n}\n\nmodule waxpaper_assembly() {\n    // Brackets\n    translate([-40, 0, 0])\n        bracket_left();\n    translate([40, 0, 0])\n        bracket_right();\n\n    // Roll\n    translate([0, 0, 33])\n        waxpaper_roll();\n\n    // Cutter bar\n    translate([0, 15, 35])\n        cutter_bar();\n}\n\n// Render the complete assembly\nscale([scale_factor, scale_factor, scale_factor])\n    waxpaper_assembly();",
    "renders": true
  },
  {
    "household_item": "ziplock",
    "openscad_code": "// Realistic medium-complexity ziplock bag\n// Designed for 3D printing, no overhangs\n\n// Dimensions (mm)\nbag_length = 60;\nbag_height = 50;\nbag_thickness = 0.8;\nwall_thickness = 1.2;\n\n// Zipper track dimensions\nzipper_height = 3;\nzipper_width = 4;\ntooth_width = 0.8;\ntooth_height = 1;\ntooth_spacing = 2.5;\nnum_teeth = floor(bag_length / tooth_spacing);\n\n// Slider dimensions\nslider_length = 8;\nslider_width = 6;\nslider_height = 5;\nslider_clearance = 0.3;\n\n// Grip dimensions\ngrip_width = 8;\ngrip_height = 12;\ngrip_thickness = wall_thickness;\n\n// Main bag body\nmodule bag_body() {\n    difference() {\n        // Front and back walls\n        union() {\n            // Front wall\n            translate([-bag_length/2, -bag_thickness/2, 0])\n                cube([bag_length, bag_thickness, bag_height]);\n            \n            // Back wall\n            translate([-bag_length/2, -bag_thickness/2, 0])\n                mirror([0,1,0])\n                    cube([bag_length, bag_thickness, bag_height]);\n        }\n        \n        // Opening for bag interior\n        translate([-bag_length/2 + wall_thickness, -bag_thickness/2 - 0.1, wall_thickness])\n            cube([bag_length - 2*wall_thickness, bag_thickness + 0.2, bag_height - 2*wall_thickness]);\n    }\n}\n\n// Zipper track teeth\nmodule zipper_track_teeth() {\n    for(i = [0:num_teeth-1]) {\n        x_pos = -bag_length/2 + i * tooth_spacing + tooth_spacing/2;\n        \n        // Top track teeth\n        translate([x_pos, bag_thickness/2, bag_height - zipper_height])\n            cube([tooth_width, zipper_width/2, tooth_height]);\n        \n        // Bottom track teeth\n        translate([x_pos, -bag_thickness/2 - zipper_width/2, bag_height - zipper_height])\n            cube([tooth_width, zipper_width/2, tooth_height]);\n    }\n}\n\n// Zipper track rails\nmodule zipper_track_rails() {\n    // Top rail\n    translate([-bag_length/2 - 1, bag_thickness/2, bag_height - zipper_height])\n        cube([bag_length + 2, zipper_width/2, zipper_height]);\n    \n    // Bottom rail\n    translate([-bag_length/2 - 1, -bag_thickness/2 - zipper_width/2, bag_height - zipper_height])\n        cube([bag_length + 2, zipper_width/2, zipper_height]);\n}\n\n// Slider mechanism\nmodule slider() {\n    difference() {\n        union() {\n            // Main slider body\n            translate([-slider_length/2, -slider_width/2, bag_height - slider_height])\n                cube([slider_length, slider_width, slider_height]);\n            \n            // Top grip\n            translate([-slider_length/2 + 1, -grip_width/2, bag_height + slider_height - grip_height])\n                cube([slider_length - 2, grip_width, grip_height]);\n        }\n        \n        // Cutout for zipper clearance\n        translate([-slider_length/2 - 0.1, -slider_clearance, bag_height - zipper_height - 0.1])\n            cube([slider_length + 0.2, slider_clearance, zipper_height + 0.2]);\n        \n        // Internal channel\n        translate([-slider_length/2 - 0.1, -slider_width/2 + slider_clearance, bag_height - zipper_height - 0.1])\n            cube([slider_length + 0.2, slider_width - 2*slider_clearance, tooth_height + 0.2]);\n    }\n}\n\n// Grip ridges for slider\nmodule grip_ridges() {\n    ridge_spacing = 1.5;\n    num_ridges = floor((slider_length - 2) / ridge_spacing);\n    \n    for(i = [0:num_ridges-1]) {\n        x_pos = -slider_length/2 + 1 + i * ridge_spacing + ridge_spacing/2;\n        translate([x_pos, -grip_width/2 + 0.5, bag_height + slider_height - grip_height/2])\n            cube([0.5, grip_width - 1, 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    // Bag with zipper tracks\n    union() {\n        bag_body();\n        zipper_track_rails();\n        zipper_track_teeth();\n    }\n    \n    // Slider in closed position (center)\n    translate([0, 0, 0]) {\n        slider();\n        grip_ridges();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "container",
    "openscad_code": "// Realistic pill-style container with screw lid\n// External dimensions: ~55mm diameter, ~35mm height\n// Wall thickness: 1.5mm for 3D printing\n\nmodule rounded_cylinder(h, r, ir) {\n    // Create a cylinder with rounded top and bottom\n    difference() {\n        union() {\n            cylinder(h=h-ir*2, r=r, $fn=64);\n            translate([0,0,h-ir]) sphere(r=r, $fn=64);\n            translate([0,0,ir]) sphere(r=r, $fn=64);\n        }\n        translate([0,0,-1]) cube([r*2,r*2,h+2], center=true);\n    }\n}\n\nmodule screw_thread(height, radius, pitch, turns) {\n    // Generate screw threads using stacked cylinders\n    for(i=[0:turns*10]) {\n        rotate([0,0,i*36/pitch]) \n        translate([0,0,i*height/(turns*10)])\n        cylinder(h=height/(turns*10)+0.1, r=radius, $fn=6);\n    }\n}\n\nmodule container_body() {\n    difference() {\n        // Outer rounded shape\n        rounded_cylinder(h=30, r=27.5, ir=5);\n        \n        // Inner cavity\n        translate([0,0,1.5]) rounded_cylinder(h=27, r=25, ir=3);\n        \n        // Thread cutout for lid\n        translate([0,0,28.5]) \n        cylinder(h=3, r=23.5, $fn=64);\n    }\n}\n\nmodule lid() {\n    difference() {\n        union() {\n            // Main lid shape\n            rounded_cylinder(h=8, r=27.5, ir=5);\n            \n            // Grip ridges\n            for(i=[0:11]) {\n                rotate([0,0,i*30]) \n                translate([20,0,7]) \n                cube([6,2,1], center=true);\n            }\n        }\n        \n        // Inner cavity\n        translate([0,0,1.5]) rounded_cylinder(h=6.5, r=25, ir=3);\n        \n        // Thread core\n        translate([0,0,-1]) \n        cylinder(h=10, r=21, $fn=64);\n    }\n    \n    // Add threads to lid\n    translate([0,0,0.5]) \n    screw_thread(height=4, radius=2.5, pitch=2, turns=2);\n}\n\n// Assembly\ntranslate([0,0,0]) container_body();\ntranslate([0,0,35]) lid();",
    "renders": true
  },
  {
    "household_item": "tupperware",
    "openscad_code": "// Realistic Tupperware Container - Medium Complexity\n// Approx 80mm x 50mm x 35mm\n\n$fn = 32;\n\n// Main parameters\nwall_thickness = 1.5;\nbase_height = 30;\nlid_height = 8;\ncontainer_width = 80;\ncontainer_depth = 50;\ncorner_radius = 5;\n\nmodule container_base() {\n    // Main body with rounded corners\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([container_width - 2*corner_radius, container_depth - 2*corner_radius, base_height], center = true);\n            cylinder(r = corner_radius, h = 0.01, center = true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n        minkowski() {\n            cube([container_width - 2*corner_radius - 2*wall_thickness, \n                  container_depth - 2*corner_radius - 2*wall_thickness, \n                  base_height - wall_thickness], center = true);\n            cylinder(r = corner_radius - wall_thickness, h = 0.01, center = true);\n        }\n    }\n    \n    // Bottom reinforcement ribs\n    for(i = [-1, 1]) {\n        translate([i * 25, 0, -base_height/2 + 1])\n        cube([3, container_depth - 10, 2], center = true);\n    }\n}\n\nmodule sealing_rim() {\n    // Rim around top edge for lid seal\n    translate([0, 0, base_height/2])\n    difference() {\n        // Outer rim\n        minkowski() {\n            cube([container_width - 2*corner_radius + 2, \n                  container_depth - 2*corner_radius + 2, 3], center = true);\n            cylinder(r = corner_radius + 1, h = 0.01, center = true);\n        }\n        \n        // Inner cutout for lid\n        translate([0, 0, -1])\n        minkowski() {\n            cube([container_width - 2*corner_radius - 2*wall_thickness + 1, \n                  container_depth - 2*corner_radius - 2*wall_thickness + 1, 5], center = true);\n            cylinder(r = corner_radius - wall_thickness + 0.5, h = 0.01, center = true);\n        }\n    }\n}\n\nmodule lid() {\n    // Main lid body\n    difference() {\n        // Lid top\n        translate([0, 0, lid_height/2])\n        minkowski() {\n            cube([container_width - 2*corner_radius + 1, \n                  container_depth - 2*corner_radius + 1, lid_height], center = true);\n            cylinder(r = corner_radius + 0.5, h = 0.01, center = true);\n        }\n        \n        // Inner recessed area\n        translate([0, 0, lid_height/2 - wall_thickness])\n        minkowski() {\n            cube([container_width - 2*corner_radius - 2*wall_thickness, \n                  container_depth - 2*corner_radius - 2*wall_thickness, \n                  lid_height], center = true);\n            cylinder(r = corner_radius - wall_thickness, h = 0.01, center = true);\n        }\n    }\n    \n    // Sealing lip\n    translate([0, 0, -lid_height/2])\n    difference() {\n        minkowski() {\n            cube([container_width - 2*corner_radius - 1, \n                  container_depth - 2*corner_radius - 1, 2], center = true);\n            cylinder(r = corner_radius - 0.5, h = 0.01, center = true);\n        }\n        \n        translate([0, 0, -1])\n        minkowski() {\n            cube([container_width - 2*corner_radius - 2*wall_thickness - 2, \n                  container_depth - 2*corner_radius - 2*wall_thickness - 2, 4], center = true);\n            cylinder(r = corner_radius - wall_thickness - 1, h = 0.01, center = true);\n        }\n    }\n}\n\nmodule snap_tabs() {\n    // Four snap tabs for lid closure\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (container_width/2 - 8), y * (container_depth/2 - 5), base_height/2 + 2])\n            union() {\n                // Tab base\n                cube([10, 8, 4], center = true);\n                \n                // Snap protrusion\n                translate([x * 3.5, 0, 2])\n                cube([3, 6, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule lid_grips() {\n    // Grips on lid corners for opening\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (container_width/2 - 8), y * (container_depth/2 - 5), lid_height/2 + 2])\n            cube([8, 6, 3], center = true);\n        }\n    }\n}\n\n// Assembly\n// Container base\ncontainer_base();\nsealing_rim();\nsnap_tabs();\n\n// Lid (translate to show assembly)\ntranslate([0, 0, base_height + lid_height + 5]) {\n    lid();\n    lid_grips();\n}",
    "renders": true
  },
  {
    "household_item": "lunchbox",
    "openscad_code": "// Realistic 3D-printable lunchbox\n// Medium complexity with functional hinges and latch\n// Overall size ~80mm x 60mm x 40mm\n\nwall_thickness = 2;\nclearance = 0.3;\nbox_length = 80;\nbox_width = 60;\nbox_height = 40;\n\n$fn = 32;\n\n// Main assembly\nmodule lunchbox() {\n    union() {\n        // Bottom container\n        translate([0, 0, wall_thickness]) \n            lunchbox_bottom();\n        \n        // Top lid (positioned as open)\n        translate([0, 0, box_height + wall_thickness + 5])\n            rotate([60, 0, 0])\n            translate([0, -box_width/2, 0])\n            lunchbox_lid();\n    }\n}\n\nmodule lunchbox_bottom() {\n    difference() {\n        // Outer shell\n        rounded_box(box_length, box_width, box_height, 5);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness]) \n            rounded_box(box_length - 2*wall_thickness, \n                       box_width - 2*wall_thickness, \n                       box_height - wall_thickness, \n                       3);\n        \n        // Hinge pin holes\n        translate([box_length/2 - 10, box_width, box_height - 8])\n            rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5 + clearance/2);\n            \n        translate([box_length/2 + 10, box_width, box_height - 8])\n            rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5 + clearance/2);\n    }\n    \n    // Internal dividers\n    translate([box_length/4, wall_thickness, wall_thickness])\n        cube([wall_thickness, box_width - 2*wall_thickness, box_height - wall_thickness]);\n        \n    translate([3*box_length/4, wall_thickness, wall_thickness])\n        cube([wall_thickness, box_width - 2*wall_thickness, box_height - wall_thickness]);\n}\n\nmodule lunchbox_lid() {\n    difference() {\n        union() {\n            // Lid body\n            rounded_box(box_length, box_width, wall_thickness*2, 5);\n            \n            // Handle\n            translate([0, 0, wall_thickness*2 + 5])\n                handle();\n                \n            // Hinge loops\n            translate([box_length/2 - 10, 0, 0])\n                hinge_loop();\n                \n            translate([box_length/2 + 10, 0, 0])\n                hinge_loop();\n                \n            // Latch\n            translate([-box_length/2 + 10, box_width - wall_thickness, -wall_thickness])\n                latch_hook();\n        }\n        \n        // Food clearance\n        translate([wall_thickness, wall_thickness, -wall_thickness])\n            rounded_box(box_length - 2*wall_thickness, \n                       box_width - 2*wall_thickness, \n                       wall_thickness*2, \n                       3);\n                       \n        // Latch clearance\n        translate([box_length/2 - 5, box_width + clearance, -wall_thickness])\n            cube([10, 5, wall_thickness*3]);\n    }\n}\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(i = [0, 1])\n            for(j = [0, 1])\n                for(k = [0, 1])\n                    translate([i ? l-r : r, j ? w-r : r, k ? h-r : r])\n                        sphere(r = r);\n    }\n}\n\nmodule handle() {\n    // Handle base\n    translate([0, 0, 0])\n        cube([30, wall_thickness*4, 5]);\n    \n    // Handle grip\n    translate([0, wall_thickness*2, 5])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 30, r = 3);\n            cylinder(h = 30.1, r = 2);\n        }\n}\n\nmodule hinge_loop() {\n    difference() {\n        translate([0, 0, box_height/2 - 4])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r = 2.5);\n            \n        translate([0, -1, box_height/2 - 4])\n            rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5);\n    }\n}\n\nmodule latch_hook() {\n    difference() {\n        union() {\n            // Base\n            cube([10, wall_thickness*2, wall_thickness*2]);\n            \n            // Hook\n            translate([5, wall_thickness*2, wall_thickness])\n                rotate([0, 90, 0])\n                cylinder(h = 5, r = 2);\n        }\n        \n        // Clearance for latch\n        translate([5, wall_thickness*2 + 1, wall_thickness])\n            rotate([0, 90, 0])\n            cylinder(h = 6, r = 1.5);\n    }\n}\n\n// Render the lunchbox\nlunchbox();",
    "renders": true
  },
  {
    "household_item": "cooler",
    "openscad_code": "// Realistic medium-complexity cooler\n// Approx 80 mm tall, 3 mm walls for 3D printing\n\n// Main parameters\nwall_th = 3;           // wall thickness\nbody_w = 60;           // outer width\nbody_d = 40;           // outer depth\nbody_h = 50;           // outer height\nlid_h = 10;            // lid thickness\nhandle_r = 3;          // handle radius\nhandle_l = 35;         // handle length\nfeet_h = 4;            // feet height\nhinge_r = 2;           // hinge pin radius\n\n// Main body\nmodule cooler_body() {\n    difference() {\n        // outer shell\n        cube([body_w, body_d, body_h], center = true);\n        \n        // inner cavity\n        translate([0, 0, -wall_th/2])\n            cube([body_w - 2*wall_th, body_d - 2*wall_th, body_h - wall_th], center = true);\n    }\n}\n\n// Drain plug\nmodule drain_plug() {\n    translate([0, body_d/2 - wall_th, -body_h/2 + wall_th + 5])\n        rotate([90, 0, 0])\n            cylinder(h = wall_th*2, r1 = 4, r2 = 3, $fn = 20);\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-body_w/2 + 8, body_w/2 - 8])\n        for (y = [-body_d/2 + 8, body_d/2 - 8])\n            translate([x, y, -body_h/2 - feet_h/2])\n                cylinder(h = feet_h, r = 3, $fn = 20);\n}\n\n// Hinge pins\nmodule hinges() {\n    translate([body_w/2 - 5, 0, body_h/2 - hinge_r])\n        cylinder(h = body_d/4, r = hinge_r, center = true, $fn = 20);\n    translate([-body_w/2 + 5, 0, body_h/2 - hinge_r])\n        cylinder(h = body_d/4, r = hinge_r, center = true, $fn = 20);\n}\n\n// Lid with handle\nmodule lid() {\n    difference() {\n        // lid shell\n        translate([0, 0, body_h/2 + lid_h/2])\n            cube([body_w, body_d, lid_h], center = true);\n        \n        // inner relief\n        translate([0, 0, body_h/2 + lid_h/2])\n            cube([body_w - 2*wall_th, body_d - 2*wall_th, lid_h - 1], center = true);\n    }\n    \n    // handle\n    translate([0, 0, body_h/2 + lid_h + handle_r])\n        rotate([90, 0, 0])\n            cylinder(h = handle_l, r = handle_r, center = true, $fn = 20);\n    \n    // handle grips\n    for (i = [-1, 1])\n        translate([0, i * handle_l/3, body_h/2 + lid_h + handle_r])\n            rotate([90, 0, 0])\n                cylinder(h = handle_r*2, r = handle_r + 1, center = true, $fn = 20);\n    \n    // latch\n    translate([0, -body_d/2 + wall_th, body_h/2 + lid_h/2])\n        cube([10, wall_th, 6], center = true);\n}\n\n// Assembly\nunion() {\n    cooler_body();\n    feet();\n    drain_plug();\n    hinges();\n    lid();\n}",
    "renders": true
  },
  {
    "household_item": "icecube",
    "openscad_code": "// Realistic Ice Cube - Medium Complexity\n// 3D printable ice cube with realistic surface details\n\n// Parameters\ncube_size = 50;\ncorner_radius = 5;\nsurface_noise = 2;\ncrack_depth = 4;\nbubble_radius = 3;\nwall_thickness = 2;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [-1, 1], y = [-1, 1], z = [-1, 1]) {\n            translate([x * (size[0]/2 - radius), y * (size[1]/2 - radius), z * (size[2]/2 - radius)])\n                sphere(r = radius);\n        }\n    }\n}\n\nmodule surface_details() {\n    // Add small bumps and dents for realistic ice texture\n    difference() {\n        union() {\n            // Main cube shape\n            rounded_cube([cube_size, cube_size, cube_size], corner_radius);\n            \n            // Small surface bumps\n            for(i = [0:7]) {\n                for(j = [0:7]) {\n                    for(k = [0:7]) {\n                        if(i % 2 == 0 && j % 2 == 0 && k % 2 == 0) {\n                            translate([\n                                i * (cube_size/8) - cube_size/2 + cube_size/16,\n                                j * (cube_size/8) - cube_size/2 + cube_size/16,\n                                k * (cube_size/8) - cube_size/2 + cube_size/16\n                            ])\n                                sphere(r = surface_noise + sin(i*j*k) * 0.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Surface cracks\n        rotate([0, 45, 0])\n            translate([0, 0, -cube_size/2])\n                cube([2*crack_depth, 15, cube_size], center = true);\n        \n        rotate([0, -30, 0])\n            translate([0, 0, -cube_size/2])\n                cube([2*crack_depth, 10, cube_size], center = true);\n        \n        rotate([0, 0, 45])\n            translate([0, 0, -cube_size/2])\n                cube([2*crack_depth, 12, cube_size], center = true);\n    }\n}\n\nmodule air_bubbles() {\n    // Internal air bubbles found in real ice\n    difference() {\n        surface_details();\n        \n        // Main bubble\n        translate([10, 5, -5])\n            sphere(r = bubble_radius);\n        \n        // Smaller bubbles\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([15, 8, -8])\n                    sphere(r = bubble_radius * 0.6);\n        }\n        \n        // Tiny bubbles\n        for(i = [0:5]) {\n            for(j = [0:3]) {\n                rotate([0, 0, j * 60])\n                    translate([\n                        5 + i * 3,\n                        5 + i * 2,\n                        -3 - i * 2\n                    ])\n                        sphere(r = bubble_radius * 0.3);\n            }\n        }\n    }\n}\n\nmodule melt_marks() {\n    // Subtle rounding at edges to simulate melting\n    difference() {\n        air_bubbles();\n        \n        // Top edge rounding\n        translate([0, 0, cube_size/2 + 1])\n            cube([cube_size + 2, cube_size + 2, 2], center = true);\n        \n        // Bottom edge rounding\n        translate([0, 0, -cube_size/2 - 1])\n            cube([cube_size + 2, cube_size + 2, 2], center = true);\n    }\n}\n\n// Final assembly with proper wall thickness for 3D printing\ndifference() {\n    melt_marks();\n    \n    // Hollow center with proper wall thickness\n    rounded_cube([\n        cube_size - 2*wall_thickness,\n        cube_size - 2*wall_thickness,\n        cube_size - 2*wall_thickness\n    ], corner_radius - wall_thickness);\n}\n\n// Drain hole at bottom for printing\ntranslate([0, 0, -cube_size/2 + wall_thickness/2])\n    cylinder(r = wall_thickness, h = wall_thickness, center = true);",
    "renders": true
  },
  {
    "household_item": "tray",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Tray\n// Overall dimensions ~80 x 60 x 12 mm\n\n// Wall and floor thickness\nwall = 2.5;\n\n// Outer tray shell\nmodule tray_shell() {\n    // Outer base\n    difference() {\n        cube([80, 60, 12], center = true);\n\n        // Hollow cavity\n        translate([0, 0, -wall/2])\n            cube([80 - 2*wall, 60 - 2*wall, 12], center = true);\n    }\n}\n\n// Rounded inner corners using cylinders\nmodule inner_rounded() {\n    // Parameters for inner rounding\n    radius = 6;\n    height = 12 - wall;\n    \n    // Create four corner cylinders\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (80/2 - wall - radius), y * (60/2 - wall - radius), 0])\n                rotate([0, 0, 45])\n                    cylinder(h = height, r = radius, center = true);\n}\n\n// Drainage holes at bottom corners\nmodule drainage_holes() {\n    hole_d = 3;\n    hole_h = wall + 1;\n    \n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (80/2 - 15), y * (60/2 - 15), -12/2 + hole_h/2])\n                cylinder(h = hole_h, d = hole_d, center = true, $fn = 20);\n}\n\n// Raised bottom ribs for stiffness\nmodule bottom_ribs() {\n    rib_w = 2;\n    rib_h = 1.5;\n    \n    // Longitudinal ribs\n    for (i = [-1:1]) {\n        translate([i * 20, 0, -12/2 + rib_h/2])\n            cube([80/4 - rib_w, 60 - 2*wall, rib_h], center = true);\n    }\n    \n    // Transverse ribs\n    for (j = [-1:1]) {\n        translate([0, j * 15, -12/2 + rib_h/2])\n            cube([80 - 2*wall, 60/4 - rib_w, rib_h], center = true);\n    }\n}\n\n// Optional handle cutouts on short sides\nmodule handle_cutouts() {\n    cut_w = 20;\n    cut_h = 8;\n    cut_d = 4;\n    \n    for (side = [-1, 1]) {\n        translate([0, side * (60/2 - cut_d/2), 0])\n            cube([cut_w, cut_d, cut_h], center = true);\n    }\n}\n\n// Main assembly\ndifference() {\n    // Build outer shell and inner rounding\n    union() {\n        tray_shell();\n        \n        // Intersect rounded corners with inner cavity\n        intersection() {\n            inner_rounded();\n            translate([0, 0, -wall/2])\n                cube([80 - 2*wall, 60 - 2*wall, 12], center = true);\n        }\n    }\n    \n    // Remove drainage holes\n    drainage_holes();\n    \n    // Remove handle cutouts\n    handle_cutouts();\n}\n\n// Add bottom ribs\nbottom_ribs();",
    "renders": true
  },
  {
    "household_item": "platter",
    "openscad_code": "// Realistic Medium-Complexity Platter\n// Diameter 90 mm, Height 12 mm, wall 2 mm – printable without support\n\n$fn = 36;\n\n// ---------------------------\n// Main platter body\n// ---------------------------\nmodule platter_base() {\n    difference() {\n        // Solid disc\n        cylinder(h = 12, d = 90, center = true);\n\n        // Hollow cavity\n        translate([0, 0, 1])\n            cylinder(h = 14, d = 86, center = true);\n    }\n}\n\n// ---------------------------\n// Raised rim on top\n// ---------------------------\nmodule rim() {\n    difference() {\n        // Outer ring\n        cylinder(h = 3, d = 90, center = true);\n\n        // Inner cut\n        translate([0, 0, -0.5])\n            cylinder(h = 4, d = 84, center = true);\n    }\n}\n\n// ---------------------------\n// Gentle inner raised ring to keep items centered\n// ---------------------------\nmodule center_ring() {\n    difference() {\n        cylinder(h = 1.5, d = 40, center = true);\n        translate([0, 0, -0.5])\n            cylinder(h = 2.5, d = 36, center = true);\n    }\n}\n\n// ---------------------------\n// Small drainage/vent holes in bottom (optional for print reliability)\n// ---------------------------\nmodule vent_holes() {\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([35, 0, -6])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d = 3, center = true);\n    }\n}\n\n// ---------------------------\n// Slight foot to lift platter 1 mm off table\n// ---------------------------\nmodule foot() {\n    difference() {\n        cylinder(h = 1.5, d = 80, center = true);\n        translate([0, 0, -0.5])\n            cylinder(h = 2.5, d = 78, center = true);\n    }\n}\n\n// ---------------------------\n// Assembly\n// ---------------------------\nunion() {\n    platter_base();\n    translate([0, 0, 4.5]) rim();\n    translate([0, 0, 1]) center_ring();\n    translate([0, 0, -5.25]) foot();\n    difference() {\n        platter_base();\n        vent_holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "dish",
    "openscad_code": "// Realistic 3D printable dish (bowl)\n// Medium complexity with foot ring and smooth walls\n// Overall size ~80 mm diameter\n\n// Parameters\nwall_thick = 2.2;        // 3D-printable wall thickness\nbase_thick = 3.0;        // Base plate thickness\nfoot_h = 2.5;            // Foot ring height\nfoot_gap = 1.0;          // Gap between foot and bowl bottom\nrim_h = 4.0;             // Rim height above bowl wall\ndiam = 78;               // Outer diameter\nheight = 38;             // Total height\nsegments = 128;          // Smooth curves\n\n// Module to make a hollow frustum (truncated cone)\nmodule hollow_frustum(od1, od2, h, wall) {\n    difference() {\n        cylinder(d1=od1, d2=od2, h=h, $fn=segments);\n        translate([0,0,wall])\n            cylinder(d1=od1-2*wall, d2=od2-2*wall, h=h-wall, $fn=segments);\n    }\n}\n\n// Main bowl shell\ndifference() {\n    // Outer bowl\n    union() {\n        // Main bowl body\n        hollow_frustum(od1=diam, od2=diam*0.65, h=height-base_thick, wall=wall_thick);\n        \n        // Rim flare\n        translate([0,0,height-base_thick-rim_h])\n            cylinder(d=diam+wall_thick*2, h=rim_h, $fn=segments);\n    }\n    \n    // Cut interior cavity\n    translate([0,0,rim_h])\n        cylinder(d=diam-wall_thick*2, h=height-rim_h, $fn=segments);\n}\n\n// Base plate\ndifference() {\n    // Solid base\n    cylinder(d=diam, h=base_thick, $fn=segments);\n    \n    // Cavity under bowl\n    translate([0,0,base_thick-foot_gap-foot_h])\n        cylinder(d=diam-wall_thick*4, h=foot_gap+foot_h, $fn=segments);\n}\n\n// Foot ring\ndifference() {\n    // Outer foot\n    cylinder(d=diam-wall_thick*6, h=foot_h, $fn=segments);\n    \n    // Inner cutout for foot\n    cylinder(d=diam-wall_thick*10, h=foot_h, $fn=segments);\n}\n\n// Optional subtle fillets at sharp edges\nmodule fillet_edge(r, z) {\n    translate([0,0,z])\n        rotate_extrude($fn=segments)\n            translate([diam/2-r,0,0])\n                circle(r=r);\n}\n\n// Small inner fillet at base\ntranslate([0,0,base_thick])\n    difference() {\n        cylinder(d=diam-wall_thick*2, h=1.5, $fn=segments);\n        translate([0,0,1.5])\n            cylinder(d=diam-wall_thick*2-2*1.5, h=1.5, $fn=segments);\n    }",
    "renders": true
  },
  {
    "household_item": "saucer",
    "openscad_code": "// OpenSCAD Saucer – realistic style, medium complexity\n// Overall size: ~85 mm Ø × 25 mm high\n\n// Base parameters\nwall = 1.2;             // printable wall thickness\nbase_d = 85;            // overall diameter\nbase_h = 8;             // lower disc thickness\nbowl_d = 80;            // inner bowl diameter\nbowl_h = 12;            // inner bowl depth\nlip_h = 3;              // outer lip height\nfoot_d = 35;            // base-ring contact diameter\nfoot_h = 2;             // base-ring height\ngroove_w = 1.5;         // concentric groove width\ngroove_d = 0.6;         // groove depth\ngrooves = 6;            // number of grip grooves on base\n\n// Build the saucer\nunion() {\n    // 1.  Main disc body\n    difference() {\n        // outside disc\n        cylinder(d = base_d, h = base_h, $fn = 120);\n        // hollow out inside\n        translate([0, 0, -0.01])\n            cylinder(d = base_d - 2*wall, h = base_h + 0.02, $fn = 120);\n    }\n\n    // 2.  Central bowl (eating surface)\n    translate([0, 0, base_h - 0.01])\n    difference() {\n        sphere(d = bowl_d, $fn = 120);\n        // cut bottom half\n        translate([0, 0, -bowl_h/2 - 0.01])\n            cube([bowl_d + 2, bowl_d + 2, bowl_h + 0.02], center = true);\n        // remove centre stem\n        translate([0, 0, -bowl_h*2])\n            cylinder(d = 5, h = bowl_h*4, $fn = 32);\n    }\n\n    // 3.  Outer lip ring\n    translate([0, 0, base_h])\n    difference() {\n        cylinder(d1 = base_d, d2 = base_d - 4, h = lip_h, $fn = 120);\n        cylinder(d1 = base_d - 2*wall, d2 = base_d - 4 - 2*wall, h = lip_h + 0.02, $fn = 120);\n    }\n\n    // 4.  Base ring (foot)\n    translate([0, 0, -foot_h])\n    difference() {\n        cylinder(d = foot_d + 2*wall, h = foot_h, $fn = 120);\n        cylinder(d = foot_d, h = foot_h + 0.02, $fn = 120);\n    }\n\n    // 5.  Concentric grip grooves on base\n    module groove(r) {\n        rotate_extrude($fn = 120)\n            translate([r, 0, 0])\n                square([groove_w, groove_d]);\n    }\n    for (i = [1: grooves])\n        groove(foot_d/2 + wall + i*3);\n}",
    "renders": true
  },
  {
    "household_item": "ramekin",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Ramekin\n// Outer diameter ≈ 80 mm, height ≈ 40 mm, wall ≈ 2 mm\n\n$fn = 64;          // smooth curves\nwall = 2;          // wall thickness for printing\nbase_h = 5;        // bottom base height\nrim_h = 3;         // top rim height\nd_out = 80;        // outer diameter\nd_in = d_out - 2*wall;\nh_body = 35;       // body height\n\n// Base with slight taper\nmodule base() {\n    difference() {\n        cylinder(h = base_h, d1 = d_out*0.9, d2 = d_out, center = false);\n        translate([0,0,-0.1])\n            cylinder(h = base_h+0.2, d1 = d_out*0.9 - 2*wall, d2 = d_in, center = false);\n    }\n}\n\n// Main bowl body with gentle slope\nmodule bowl() {\n    difference() {\n        cylinder(h = h_body, d1 = d_out, d2 = d_in*0.85, center = false);\n        translate([0,0,wall])\n            cylinder(h = h_body, d1 = d_in, d2 = d_in*0.85 - wall, center = false);\n    }\n}\n\n// Top rim with subtle flare\nmodule rim() {\n    difference() {\n        translate([0,0,h_body])\n            cylinder(h = rim_h, d1 = d_out, d2 = d_out*1.05, center = false);\n        translate([0,0,h_body+wall])\n            cylinder(h = rim_h, d1 = d_in, d2 = d_out*1.05 - wall, center = false);\n    }\n}\n\n// Small foot ring on bottom for print stability\nmodule foot() {\n    difference() {\n        cylinder(h = 1, d = d_out*0.6, center = false);\n        cylinder(h = 1.2, d = d_out*0.6 - wall, center = false);\n    }\n}\n\n// Interior curve smoothing (subtractive fillet)\nmodule interior_fillet() {\n    for (i = [0:3]) {\n        rotate([0,0,i*90])\n            translate([d_in/2 - wall/2, 0, h_body - wall])\n                rotate([0,90,0])\n                    scale([1,1,0.5])\n                        sphere(r = wall, $fn=16);\n    }\n}\n\n// Exterior base fillet (additive)\nmodule exterior_fillet() {\n    for (i = [0:3]) {\n        rotate([0,0,i*90])\n            translate([d_out/2 - wall, 0, base_h])\n                rotate([0,90,0])\n                    scale([1,1,0.5])\n                        sphere(r = wall, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0,0,base_h]) bowl();\n    rim();\n    translate([0,0,-1]) foot();\n    exterior_fillet();\n}\n\ndifference() {\n    children();\n    interior_fillet();\n}",
    "renders": true
  },
  {
    "household_item": "custardcup",
    "openscad_code": "// Realistic Custard Cup - Medium Complexity\n// 3D printable custard cup with realistic features\n\n// Cup parameters\ncup_height = 45;\ncup_outer_radius = 35;\ncup_inner_radius = 32;\nwall_thickness = 3;\nbase_thickness = 4;\nrim_thickness = 2;\n\n// Handle parameters\nhandle_width = 8;\nhandle_height = 25;\nhandle_clearance = 10;\nhandle_radius = 3;\n\n// Decorative ring parameters\nring_count = 3;\nring_depth = 1;\nring_spacing = 8;\n\n// Base parameters\nbase_radius = 38;\nbase_height = 5;\n\n// Main cup body\nmodule cup_body() {\n    difference() {\n        // Outer cup shape\n        cylinder(h = cup_height, r1 = cup_outer_radius, r2 = cup_outer_radius * 0.9, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n            cylinder(h = cup_height - base_thickness + 1, r1 = cup_inner_radius, r2 = cup_inner_radius * 0.9, $fn = 64);\n    }\n}\n\n// Reinforced base\nmodule cup_base() {\n    union() {\n        // Main base\n        cylinder(h = base_height, r = base_radius, $fn = 64);\n        \n        // Tapered transition\n        translate([0, 0, base_height])\n            cylinder(h = 3, r1 = base_radius, r2 = cup_outer_radius, $fn = 64);\n    }\n}\n\n// Rounded rim\nmodule cup_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, cup_height - rim_thickness])\n            cylinder(h = rim_thickness + 1, r = cup_outer_radius + 1, $fn = 64);\n        \n        // Inner cut\n        translate([0, 0, cup_height - rim_thickness])\n            cylinder(h = rim_thickness + 2, r = cup_inner_radius, $fn = 64);\n    }\n    \n    // Smooth rounded edge\n    translate([0, 0, cup_height])\n        scale([cup_outer_radius, cup_outer_radius, rim_thickness])\n        sphere(r = 1, $fn = 32);\n}\n\n// Handle with ergonomic grip\nmodule cup_handle() {\n    // Connection points\n    translate([cup_outer_radius, 0, cup_height * 0.7])\n        sphere(r = handle_radius, $fn = 16);\n    \n    translate([cup_outer_radius, 0, cup_height * 0.3])\n        sphere(r = handle_radius, $fn = 16);\n    \n    // Main handle curve\n    hull() {\n        translate([cup_outer_radius, 0, cup_height * 0.7])\n            sphere(r = handle_radius, $fn = 16);\n        \n        translate([cup_outer_radius + handle_clearance, 0, cup_height * 0.5])\n            sphere(r = handle_radius, $fn = 16);\n        \n        translate([cup_outer_radius, 0, cup_height * 0.3])\n            sphere(r = handle_radius, $fn = 16);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    for(i = [1:ring_count]) {\n        ring_z = base_height + 5 + (i * ring_spacing);\n        if(ring_z < cup_height - 10) {\n            difference() {\n                cylinder(h = 2, r = cup_outer_radius + 0.5, $fn = 64);\n                cylinder(h = 2.1, r = cup_outer_radius - ring_depth, $fn = 64);\n            }\n            translate([0, 0, ring_z])\n                scale([1, 1, 0.5])\n                sphere(r = cup_outer_radius + 0.5, $fn = 64);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    cup_base();\n    \n    // Main cup\n    translate([0, 0, base_height])\n        cup_body();\n    \n    // Rim\n    translate([0, 0, 0])\n        cup_rim();\n    \n    // Handle\n    cup_handle();\n    \n    // Decorative elements\n    translate([0, 0, 0])\n        decorative_rings();\n}",
    "renders": true
  },
  {
    "household_item": "muffintin",
    "openscad_code": "// Muffin Tin - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm x 75mm x 25mm (including handles)\n\n// Parameters\ntin_length = 100;\ntin_width = 75;\ntin_height = 20;\nwall_thickness = 2;\nhandle_length = 15;\nhandle_height = 8;\nhandle_width = 6;\n\ncup_radius = 15;\ncup_depth = 12;\ncup_wall = 1.5;\ncups_x = 3;\ncups_y = 2;\n\n// Main tin body with rounded edges\nmodule tin_body() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            for(i = [[-1,-1,1], [1,-1,1], [1,1,1], [-1,1,1]])\n                translate([i[0]*(tin_length/2-wall_thickness), i[1]*(tin_width/2-wall_thickness), tin_height/2])\n                    sphere(r=wall_thickness);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n            cube([tin_length-wall_thickness*2, tin_width-wall_thickness*2, tin_height+wall_thickness], center=true);\n        \n        // Top opening\n        translate([0, 0, tin_height])\n            cube([tin_length+1, tin_width+1, wall_thickness], center=true);\n    }\n}\n\n// Cup module\nmodule muffin_cup() {\n    difference() {\n        // Outer cup\n        cylinder(h=cup_depth, r=cup_radius, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, cup_wall])\n            cylinder(h=cup_depth-cup_wall, r=cup_radius-cup_wall, $fn=32);\n        \n        // Rounded bottom\n        translate([0, 0, cup_depth-cup_radius])\n            sphere(r=cup_radius);\n        \n        // Remove bottom sphere from inner\n        translate([0, 0, cup_depth-cup_radius+cup_wall])\n            sphere(r=cup_radius-cup_wall);\n    }\n}\n\n// Handle module\nmodule handle(side) {\n    translate([side*(tin_length/2+handle_length/2), 0, handle_height/2]) {\n        difference() {\n            // Main handle\n            cube([handle_length, handle_width, handle_height], center=true);\n            \n            // Finger grip\n            translate([side*handle_length/4, 0, handle_height/2-handle_width/4])\n                cube([handle_length/2, handle_width*1.2, handle_width/2], center=true);\n            \n            // Rounded edges\n            for(i = [[-1,-1], [1,-1], [1,1], [-1,1]])\n                translate([i[0]*(handle_length/2-handle_width/4), i[1]*(handle_width/2-handle_width/4), handle_height/2])\n                    sphere(r=handle_width/4);\n        }\n    }\n}\n\n// Generate all muffin cups\nmodule all_cups() {\n    spacing_x = tin_length / (cups_x + 1);\n    spacing_y = tin_width / (cups_y + 1);\n    \n    for(x = [1:cups_x]) {\n        for(y = [1:cups_y]) {\n            translate([\n                x*spacing_x - tin_length/2,\n                y*spacing_y - tin_width/2,\n                tin_height - cup_depth\n            ]) {\n                muffin_cup();\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    tin_body();\n    all_cups();\n    handle(1);\n    handle(-1);\n}",
    "renders": true
  },
  {
    "household_item": "loafpan",
    "openscad_code": "// Realistic 3D-printable loafpan\n// External dimensions: 95 mm x 55 mm x 35 mm\n\nwall = 2;       // wall thickness, mm\nfillet = 3;     // inner bottom fillet radius, mm\ndraft = 2;      // draft angle for easy release, degrees\n\nmodule roundedRect(xy, z, r) {\n    // helper: box with rounded vertical edges\n    hull() {\n        for(dx = [-1,1], dy = [-1,1])\n            translate([dx*(xy[0]/2 - r), dy*(xy[1]/2 - r), 0])\n                cylinder(r = r, h = z, $fn = 16);\n    }\n}\n\nmodule panBody() {\n    // outer shell\n    difference() {\n        // main block\n        roundedRect([95, 55, 35], 35, 5);\n\n        // hollow cavity\n        translate([0, 0, wall])\n            roundedRect([95 - 2*wall, 55 - 2*wall, 35], 35 - wall, fillet);\n    }\n\n    // bottom plate (adds thickness under cavity)\n    translate([0, 0, -wall])\n        roundedRect([95, 55, wall], wall, 5);\n}\n\nmodule lip() {\n    // rolled rim around top for stiffness\n    rimH = 2;\n    rimOver = 2;\n    difference() {\n        roundedRect([95 + 2*rimOver, 55 + 2*rimOver, rimH], rimH, 5);\n        translate([0, 0, -0.01])\n            roundedRect([95, 55, rimH + 0.02], rimH + 0.01, 5);\n    }\n}\n\nmodule handles() {\n    // simple tab handles on short sides\n    handleW = 8;\n    handleL = 15;\n    handleH = 4;\n    for(side = [-1, 1])\n        translate([0, side*(55/2 + handleL/2), 35/2 - handleH/2])\n            roundedRect([handleW, handleL, handleH], handleH, 2);\n}\n\n// apply draft angle to inner cavity for printability\ndifference() {\n    panBody();\n    // taper inner walls slightly\n    translate([0, 0, wall])\n        scale([1, 1 - sin(draft)*0.03, 1])\n            translate([0, 0, -wall/2])\n                roundedRect([95 - 2*wall + 0.5, 55 - 2*wall + 0.5, 35 + wall], 35 - wall, fillet);\n}\n\ntranslate([0, 0, 35])\n    lip();\n\nhandles();",
    "renders": true
  },
  {
    "household_item": "pieplate",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Pie Plate\n// Outer diameter ≈ 90 mm, height ≈ 20 mm, wall thickness 2 mm\n\n$fn = 50;                // Smooth curves\n\n// Parameters\nd_out = 90;              // Outer diameter\nd_in  = d_out - 4;       // Inner diameter\nh_rim = 8;               // Height of vertical rim\nh_base = 4;              // Height of sloped base\nthick = 2;               // Wall thickness\nn_flutes = 36;           // Number of flutes on rim\nflute_depth = 1.2;       // Flute indent depth\nn_ridges = 8;            // Number of ridges on underside\nridge_h = 0.8;           // Ridge height\n\nmodule pie_plate() {\n    difference() {\n        // Main solid plate\n        union() {\n            // Outer rim cylinder\n            cylinder(d = d_out, h = h_rim + h_base);\n\n            // Sloped base cone\n            translate([0, 0, h_rim])\n                cylinder(d1 = d_out, d2 = d_in, h = h_base);\n        }\n\n        // Hollow out inside\n        translate([0, 0, thick])\n            cylinder(d = d_in, h = h_rim + h_base);\n    }\n\n    // Fluted rim\n    for (i = [0 : n_flutes-1]) {\n        angle = i * 360 / n_flutes;\n        rotate([0, 0, angle])\n            translate([d_out/2 - flute_depth/2, 0, thick])\n                cube([flute_depth, 1.5, h_rim - thick], center = true);\n    }\n\n    // Underside ridges for strength and print adhesion\n    for (i = [0 : n_ridges-1]) {\n        angle = i * 360 / n_ridges;\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                cube([d_out - 2*thick, ridge_h, thick*0.8], center = true);\n    }\n\n    // Small fillet on inner edge to ease print and cleaning\n    translate([0, 0, h_rim + h_base - thick])\n        cylinder(d = d_in, h = thick);\n}\n\npie_plate();",
    "renders": true
  },
  {
    "household_item": "caketin",
    "openscad_code": "// Realistic Cake Tin - Medium Complexity\n// Base tin with lid, handles, and realistic proportions\n\n$fn = 50;  // Smooth curves for printing\n\n// Overall dimensions\ntin_diameter = 80;\ntin_height = 40;\nwall_thickness = 2;\nbase_thickness = 3;\n\n// Handle parameters\nhandle_width = 20;\nhandle_height = 8;\nhandle_thickness = 3;\n\n// Lip for lid fitting\nlip_height = 4;\nlip_thickness = 1.5;\n\n// Create the base tin\nmodule base_tin() {\n    difference() {\n        // Main tin body - cylinder with rounded bottom\n        union() {\n            // Cylindrical wall\n            cylinder(h=tin_height, r=tin_diameter/2, center=false);\n            \n            // Rounded bottom using hemisphere\n            translate([0, 0, -tin_diameter/4])\n                scale([1, 1, 0.5])\n                sphere(r=tin_diameter/2);\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, base_thickness])\n            cylinder(h=tin_height*2, r=(tin_diameter/2)-wall_thickness, center=false);\n        \n        // Cut bottom flat\n        translate([0, 0, -tin_diameter/4-1])\n            cube([tin_diameter*2, tin_diameter*2, tin_diameter/4], center=true);\n    }\n    \n    // Add lip for lid fitting\n    translate([0, 0, tin_height])\n        difference() {\n            cylinder(h=lip_height, r=tin_diameter/2+lip_thickness, center=false);\n            cylinder(h=lip_height+1, r=tin_diameter/2, center=false);\n        }\n}\n\n// Create the lid\nmodule lid() {\n    difference() {\n        // Main lid disk\n        cylinder(h=wall_thickness*1.5, r=tin_diameter/2+lip_thickness, center=false);\n        \n        // Inner lip to fit tin\n        translate([0, 0, -1])\n            cylinder(h=lip_height+2, r=tin_diameter/2-lip_thickness, center=false);\n    }\n    \n    // Add handles - two opposing handles\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle])\n            translate([tin_diameter/2-handle_thickness, 0, wall_thickness*1.5])\n                handle();\n    }\n}\n\n// Handle module for reusability\nmodule handle() {\n    // Main grip bar\n    translate([handle_width/2, 0, handle_height/2])\n        cube([handle_width, handle_thickness, handle_height], center=true);\n    \n    // Support arms\n    translate([0, 0, handle_height/2])\n        cube([handle_thickness, handle_thickness, handle_height], center=true);\n    \n    translate([handle_width, 0, handle_height/2])\n        cube([handle_thickness, handle_thickness, handle_height], center=true);\n}\n\n// Render the complete model\n// Uncomment as needed for printing\n\n// Just the base tin\nbase_tin();\n\n// Tin with lid - translate lid up for visibility\ntranslate([0, tin_diameter+20, 0]) {\n    lid();\n    translate([0, 0, -5])  // Show lid slightly offset\n        base_tin();\n}",
    "renders": true
  },
  {
    "household_item": "springform",
    "openscad_code": "// Realistic Springform Pan - Medium Complexity\n// Designed for 3D printing at 90mm diameter\n\n// Parameters\n$fn = 64;\nbase_diameter = 90;\nbase_height = 5;\nwall_thickness = 2.5;\nwall_height = 25;\nbottom_thickness = 2.5;\nspring_width = 8;\nspring_thickness = 3;\nlatch_width = 15;\nlatch_depth = 3;\ngrip_height = 8;\ngrip_width = 6;\nseam_clearance = 0.2;\n\n// Main assembly\nmodule springform() {\n    // Base with removable bottom\n    translate([0, 0, 0])\n        base_assembly();\n    \n    // Ring with spring latch\n    translate([0, 0, base_height])\n        ring_assembly();\n}\n\n// Base assembly\nmodule base_assembly() {\n    difference() {\n        // Base disk\n        cylinder(h=base_height, d=base_diameter);\n        \n        // Center hole for easier printing\n        cylinder(h=base_height+1, d=base_diameter-10);\n    }\n    \n    // Bottom removable plate\n    translate([0, 0, base_height-bottom_thickness])\n        removable_bottom();\n}\n\n// Removable bottom plate\nmodule removable_bottom() {\n    difference() {\n        // Main plate\n        cylinder(h=bottom_thickness, d=base_diameter-2*wall_thickness);\n        \n        // Center depression for strength\n        cylinder(h=bottom_thickness-1, d=base_diameter-2*wall_thickness-20);\n        \n        // Handle hole\n        translate([0, base_diameter/2 - wall_thickness - 5, -1])\n            cube([8, 10, bottom_thickness+2], center=true);\n    }\n}\n\n// Ring assembly with spring mechanism\nmodule ring_assembly() {\n    difference() {\n        // Main ring wall\n        cylinder(h=wall_height, d=base_diameter, d2=base_diameter+2);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=wall_height+2, d=base_diameter-2*wall_thickness);\n    }\n    \n    // Spring latch mechanism\n    translate([base_diameter/2, 0, wall_height/2])\n        rotate([0, 0, 0])\n            spring_latch();\n    \n    // Grip handles on opposite sides\n    translate([0, 0, wall_height-5])\n        grip_handles();\n}\n\n// Spring latch mechanism\nmodule spring_latch() {\n    // Main spring housing\n    translate([spring_width/2, 0, 0])\n        cube([spring_width, spring_thickness*2, wall_height-5], center=true);\n    \n    // Latch hook\n    translate([spring_width, 0, wall_height/2-5])\n        cube([latch_width, latch_depth, wall_height/2], center=true);\n    \n    // Latch grip\n    translate([spring_width + latch_width/2, 0, wall_height-2])\n        cube([grip_width, grip_height, wall_height/4], center=true);\n    \n    // Spring details\n    for(i = [1:3]) {\n        translate([spring_width/2, 0, i*wall_height/4])\n            cylinder(h=1, d=spring_thickness);\n    }\n}\n\n// Grip handles\nmodule grip_handles() {\n    // Handle 1\n    translate([base_diameter/2 - wall_thickness, 0, 0])\n        cube([wall_thickness*2, 15, 8], center=true);\n    \n    // Handle 2\n    translate([-base_diameter/2 + wall_thickness, 0, 0])\n        cube([wall_thickness*2, 15, 8], center=true);\n    \n    // Handle grips\n    for(i = [-1:1]) {\n        translate([base_diameter/2 - wall_thickness, i*5, 0])\n            cylinder(h=8, d=3);\n        translate([-base_diameter/2 + wall_thickness, i*5, 0])\n            cylinder(h=8, d=3);\n    }\n}\n\n// Render the springform\nspringform();",
    "renders": true
  },
  {
    "household_item": "bundtpan",
    "openscad_code": "// Bundt Pan - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions (mm)\npan_diameter = 90;\npan_height = 35;\nwall_thickness = 2.5;\nbase_thickness = 3;\n\n// Central tube dimensions\ntube_diameter = 30;\ntube_height = pan_height - 1;\n\n// Fluting parameters\nnum_flutes = 12;\nflute_depth = 3.5;\nflute_width_factor = 0.8;\n\n// Flared rim dimensions\nrim_width = 5;\nrim_thickness = 2;\n\n// Helper module for rounded bottom\nmodule rounded_bottom() {\n    difference() {\n        cylinder(h=base_thickness, d=pan_diameter, $fn=60);\n        translate([0, 0, base_thickness - 1])\n            cylinder(h=base_thickness + 1, d=pan_diameter - wall_thickness*2, $fn=60);\n    }\n}\n\n// Helper module for fluted side wall\nmodule fluted_wall() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=pan_height - base_thickness, d=pan_diameter, $fn=120);\n        \n        // Inner cylinder\n        translate([0, 0, -0.1])\n            cylinder(h=pan_height - base_thickness + 0.2, d=pan_diameter - wall_thickness*2, $fn=120);\n        \n        // Create flutes using rotated cubes\n        for (i = [0:num_flutes-1]) {\n            rotate([0, 0, i * 360/num_flutes])\n                translate([pan_diameter/2 - wall_thickness - flute_depth/2, 0, pan_height/2 - base_thickness/2])\n                    rotate([0, 90, 0])\n                        cube([flute_depth, pan_height - base_thickness, flute_width_factor * (pan_diameter - wall_thickness*2) * PI / num_flutes], center=true);\n        }\n    }\n}\n\n// Helper module for central tube\nmodule central_tube() {\n    difference() {\n        cylinder(h=tube_height, d=tube_diameter, $fn=60);\n        translate([0, 0, -0.1])\n            cylinder(h=tube_height + 0.2, d=tube_diameter - wall_thickness*2, $fn=60);\n    }\n}\n\n// Helper module for flared rim\nmodule flared_rim() {\n    difference() {\n        // Outer rim\n        cylinder(h=rim_thickness, d=pan_diameter + rim_width*2, $fn=60);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n            cylinder(h=rim_thickness + 0.2, d=pan_diameter, $fn=60);\n        \n        // Taper the outer edge\n        difference() {\n            cylinder(h=rim_thickness, d=pan_diameter + rim_width*2, $fn=60);\n            translate([0, 0, -0.1])\n                cylinder(h=rim_thickness + 0.2, d=pan_diameter + rim_width*1.5, $fn=60);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base with rounded bottom\n    translate([0, 0, 0])\n        rounded_bottom();\n    \n    // Fluted side wall\n    translate([0, 0, base_thickness])\n        fluted_wall();\n    \n    // Central tube\n    translate([0, 0, base_thickness])\n        central_tube();\n    \n    // Flared rim at top\n    translate([0, 0, pan_height - rim_thickness])\n        flared_rim();\n}\n\n// Optional: Add small pour spouts\nmodule pour_spouts() {\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180])\n            translate([pan_diameter/2 + rim_width - 1, 0, pan_height - rim_thickness/2])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=rim_width, d1=rim_thickness*2, d2=rim_thickness*1.2, $fn=20);\n                        translate([0, 0, -0.1])\n                            cylinder(h=rim_width + 0.2, d1=rim_thickness*2 - 1, d2=rim_thickness*1.2 - 1, $fn=20);\n                    }\n    }\n}\n\n// Add pour spouts\ntranslate([0, 0, 0])\n    pour_spouts();",
    "renders": true
  },
  {
    "household_item": "coolingrack",
    "openscad_code": "// Cooling rack for 3D printing - realistic style, medium complexity\n// Overall size: 70 x 50 x 10 mm\n\n$fn = 24;\n\nmodule rackFrame() {\n    // Outer frame\n    difference() {\n        // Main frame body\n        translate([-35, -25, 0])\n            cube([70, 50, 5]);\n        \n        // Inner cutout\n        translate([-32, -22, -1])\n            cube([64, 44, 7]);\n    }\n    \n    // Bottom lip for support\n    translate([-36, -26, -1])\n        cube([72, 52, 1]);\n}\n\nmodule wireGrid() {\n    // Parameters for the wire grid\n    wire_diameter = 1.5;\n    spacing = 5;\n    \n    // Longitudinal wires (along X axis)\n    for (y = [-20:spacing:20]) {\n        translate([0, y, 3])\n            rotate([90, 0, 0])\n                cylinder(h = 70, d = wire_diameter, center = true);\n    }\n    \n    // Transverse wires (along Y axis)\n    for (x = [-30:spacing:30]) {\n        translate([x, 0, 3])\n            rotate([0, 90, 0])\n                cylinder(h = 50, d = wire_diameter, center = true);\n    }\n}\n\nmodule cornerFeet() {\n    // Small feet at corners to lift rack slightly\n    foot_height = 2;\n    foot_diameter = 6;\n    \n    // Position feet under frame corners\n    positions = [\n        [-30, -20, 0],\n        [30, -20, 0],\n        [-30, 20, 0],\n        [30, 20, 0]\n    ];\n    \n    for (pos = positions) {\n        translate(pos)\n            cylinder(h = foot_height, d = foot_diameter);\n    }\n}\n\n// Assembly the complete cooling rack\nunion() {\n    rackFrame();\n    wireGrid();\n    cornerFeet();\n}",
    "renders": true
  },
  {
    "household_item": "ovenmitt",
    "openscad_code": "// Realistic Oven Mitt - Medium Complexity\n// Approx 85mm x 45mm x 200mm\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2.5;\nglove_length = 80;\nhand_width = 45;\nhand_height = 20;\nwrist_length = 45;\nwrist_diameter = 40;\n\n// Main body module\nmodule glove_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            // Hand section\n            translate([0, 0, glove_length/2])\n                scale([1, 0.8, 1])\n                sphere(d = hand_width + wall_thickness*2);\n            \n            // Wrist section\n            translate([0, 0, -wrist_length/2])\n                cylinder(h = wrist_length, d = wrist_diameter + wall_thickness*2);\n        }\n        \n        // Inner cavity\n        translate([0, -1, 5])\n            scale([0.85, 0.7, 0.9])\n            hull() {\n                translate([0, 0, glove_length/2])\n                    sphere(d = hand_width);\n                translate([0, 0, -wrist_length/2])\n                    cylinder(h = wrist_length + 5, d = wrist_diameter - wall_thickness);\n            }\n    }\n}\n\n// Thumb section\nmodule thumb() {\n    translate([-hand_width/2 - 8, 0, glove_length/2 - 5])\n        rotate([0, 15, -30])\n        difference() {\n            union() {\n                // Thumb base\n                cylinder(h = 25, d1 = 18, d2 = 15);\n                \n                // Thumb tip\n                translate([0, 0, 25])\n                    sphere(d = 15);\n            }\n            \n            // Thumb cavity\n            translate([0, 0, 2])\n                cylinder(h = 25, d = 12);\n        }\n}\n\n// Quilted padding pattern\nmodule quilt_pattern() {\n    for (i = [0:2]) {\n        for (j = [0:3]) {\n            translate([\n                -hand_width/2 + 10 + i*12,\n                -5 + j*10,\n                glove_length/2 - 10 + j*5\n            ])\n                difference() {\n                    sphere(d = 8);\n                    scale([0.8, 0.8, 0.5])\n                        sphere(d = 8);\n                }\n        }\n    }\n}\n\n// Hanging loop\nmodule hanging_loop() {\n    translate([0, -hand_width/2 - 5, -wrist_length - 10])\n        rotate([90, 0, 0])\n        difference() {\n            torus(8, 3);\n            translate([0, 0, -10])\n                cube([20, 20, 20], center = true);\n        }\n}\n\n// Torus helper function\nmodule torus(r, r_section) {\n    rotate_extrude()\n        translate([r, 0, 0])\n            circle(r = r_section);\n}\n\n// Grip texture lines\nmodule grip_texture() {\n    for (i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, glove_length/2 - 15])\n                linear_extrude(height = 30, twist = 30)\n                    circle(d = 2);\n    }\n}\n\n// Assemble the oven mitt\nunion() {\n    // Main glove\n    glove_body();\n    \n    // Thumb\n    thumb();\n    \n    // Quilted padding\n    quilt_pattern();\n    \n    // Hanging loop\n    hanging_loop();\n    \n    // Grip texture on palm\n    grip_texture();\n}",
    "renders": true
  },
  {
    "household_item": "potholder",
    "openscad_code": "// Realistic 3D-printable potholder\n// Size: 80 mm diameter, 5 mm thick, suitable for 3D printing\n\n// Overall parameters\ndiameter = 80;          // Potholder diameter in mm\nthickness = 5;          // Potholder thickness in mm\nhole_radius = 4;        // Hanging hole radius\nwall_thickness = 1.2;   // Minimum printable wall thickness (mm)\n\n// Quilted pattern parameters\npocket_count = 6;               // Number of heat-isolating pockets\npocket_depth = 2.5;             // Depth of each pocket\nrib_width = 2;                  // Width of raised ribs between pockets\n\n// Grip texture parameters\ngrip_radius = 1.5;              // Radius of grip bumps\ngrip_spacing = 8;               // Spacing between grip bumps\n\n// Helper module: rounded cylinder for soft edges\nmodule rounded_cylinder(h, r1, r2) {\n    cylinder(h=h, r1=r1, r2=r2, $fn=32);\n}\n\n// Main potholder body with rounded edges\nmodule potholder_body() {\n    difference() {\n        union() {\n            // Base disc with slightly rounded top\n            translate([0, 0, -thickness/2])\n                rounded_cylinder(thickness, diameter/2, diameter/2);\n            \n            // Raised outer rim for stiffness\n            translate([0, 0, 0])\n                cylinder(h=1.5, r1=diameter/2 - 2, r2=diameter/2 - 2, $fn=64);\n        }\n        \n        // Hanging hole\n        translate([0, diameter/2 - 8, 0])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=hole_radius, $fn=32);\n    }\n}\n\n// Quilted pattern: raised ribs forming hexagonal pockets\nmodule quilted_pattern() {\n    rib_height = pocket_depth;\n    \n    for (i = [0 : pocket_count - 1]) {\n        angle = 360 / pocket_count * i;\n        \n        // Radial ribs\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                cube([rib_width, diameter/2 - 5, rib_height], center=true);\n        \n        // Concentric ribs (rings)\n        for (r = [diameter/6 : diameter/6 : diameter/2 - 5]) {\n            rotate_extrude(angle=360/pocket_count, $fn=32)\n                translate([r, 0, 0])\n                    square([rib_width, rib_height]);\n        }\n    }\n}\n\n// Grip texture on bottom surface\nmodule grip_texture() {\n    for (x = [-diameter/2 + grip_spacing : grip_spacing : diameter/2 - grip_spacing]) {\n        for (y = [-diameter/2 + grip_spacing : grip_spacing : diameter/2 - grip_spacing]) {\n            dist = sqrt(x*x + y*y);\n            if (dist < diameter/2 - 5) {\n                translate([x, y, -thickness/2 - grip_radius + 0.2])\n                    sphere(r=grip_radius, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    potholder_body();\n    \n    // Quilted pattern on top\n    translate([0, 0, thickness/2])\n        quilted_pattern();\n    \n    // Grip texture on bottom\n    grip_texture();\n}",
    "renders": true
  },
  {
    "household_item": "apron",
    "openscad_code": "// Realistic Apron - Medium Complexity\n// 3D printable with wall thickness and no overhangs\n\n// Overall dimensions\napron_width = 70;\napron_height = 60;\napron_thickness = 2;\n\n// Top bib section\nmodule bib() {\n    union() {\n        // Main bib panel\n        translate([0, 0, apron_height/2])\n            cube([apron_width*0.6, apron_thickness, apron_height*0.4], center=true);\n        \n        // Curved top edge\n        difference() {\n            translate([0, 0, apron_height*0.7])\n                cube([apron_width*0.6, apron_thickness, apron_height*0.1], center=true);\n            translate([0, apron_thickness/2, apron_height*0.75])\n                sphere(d=apron_width*0.6);\n        }\n    }\n}\n\n// Waist belt loops\nmodule belt_loops() {\n    for(side = [-1, 1]) {\n        translate([side * apron_width*0.4, 0, apron_height*0.35])\n            cube([8, 8, 5], center=true);\n    }\n}\n\n// Main body panel with rounded bottom\nmodule body_panel() {\n    difference() {\n        // Main rectangular body\n        translate([0, 0, apron_height*0.2])\n            cube([apron_width, apron_thickness, apron_height*0.6], center=true);\n        \n        // Rounded bottom cutout\n        translate([0, apron_thickness/2, -apron_height*0.1])\n            sphere(d=apron_width*0.8);\n    }\n}\n\n// Pocket with stitching detail\nmodule pocket() {\n    union() {\n        // Main pocket\n        translate([0, 0, apron_height*0.15])\n            cube([apron_width*0.5, apron_thickness+1, apron_height*0.2], center=true);\n        \n        // Pocket divider\n        translate([0, 0, apron_height*0.15])\n            cube([2, apron_thickness+1.5, apron_height*0.18], center=true);\n        \n        // Top edge reinforcement\n        translate([0, 0, apron_height*0.25])\n            cube([apron_width*0.5, apron_thickness+0.5, 2], center=true);\n    }\n}\n\n// Neck strap\nmodule neck_strap() {\n    // Left side\n    translate([-apron_width*0.3, 0, apron_height*0.55])\n        rotate([0, 90, 0])\n            cylinder(h=25, d=3, center=true);\n    \n    // Right side  \n    translate([apron_width*0.3, 0, apron_height*0.55])\n        rotate([0, 90, 0])\n            cylinder(h=25, d=3, center=true);\n}\n\n// Waist ties\nmodule waist_ties() {\n    for(side = [-1, 1]) {\n        translate([side * apron_width*0.5, 0, apron_height*0.35])\n            rotate([90, 0, 0])\n                cylinder(h=30, d=4, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bib();\n    body_panel();\n    pocket();\n    belt_loops();\n    neck_strap();\n    waist_ties();\n}",
    "renders": true
  },
  {
    "household_item": "chair",
    "openscad_code": "// Realistic chair, medium complexity\n// Overall size ~75 mm tall\n\n// Parameters (mm)\nseat_w = 40;      // seat width\nseat_d = 40;      // seat depth\nseat_t = 3;       // seat thickness\nback_h = 30;      // backrest height above seat\nback_t = 3;       // backrest thickness\nleg_h = 40;       // leg height\nleg_r = 2;        // leg radius\nstretch_r = 1.5;  // stretcher radius\nstretch_h = 12;   // stretcher height above ground\nfillet = 2;       // edge rounding radius\n\n// 3D-printing tolerance\neps = 0.2;\n\n// Fillet helper (quarter-cylinder corner)\nmodule fillet_corner(r, h) {\n    rotate([0,90,0]) cylinder(r=r, h=h, $fn=20);\n}\n\n// Seat with rounded top edges\nmodule seat() {\n    difference() {\n        union() {\n            // Main slab\n            translate([0,0,seat_t/2])\n                cube([seat_w, seat_d, seat_t], center=true);\n            // Front edge fillets\n            for(x=[-seat_w/2+fillet, seat_w/2-fillet])\n                translate([x, seat_d/2-fillet, seat_t-fillet/2])\n                    fillet_corner(fillet, seat_w-2*fillet);\n            // Side edge fillets\n            for(y=[-seat_d/2+fillet, seat_d/2-fillet])\n                translate([seat_w/2-fillet, y, seat_t-fillet/2])\n                    rotate([0,0,90]) fillet_corner(fillet, seat_d-2*fillet);\n        }\n        // Remove bottom chamfers to avoid overhang\n        translate([0,0,-seat_t/2-eps])\n            cube([seat_w+2*eps, seat_d+2*eps, eps], center=true);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    slat_w = 3;\n    gap = 3;\n    slats = floor(seat_w/(slat_w+gap));\n    union() {\n        // Bottom rail\n        translate([0, -seat_d/2+back_t/2, seat_t+back_t/2])\n            cube([seat_w, back_t, back_t], center=true);\n        // Slats\n        for(i=[-slats/2:slats/2-1])\n            translate([i*(slat_w+gap)+gap/2, -seat_d/2+back_t/2, seat_t+back_t+back_h/2])\n                cube([slat_w, back_t, back_h], center=true);\n        // Top rail\n        translate([0, -seat_d/2+back_t/2, seat_t+back_t+back_h+back_t/2])\n            cube([seat_w, back_t, back_t], center=true);\n    }\n}\n\n// Single leg with taper\nmodule leg(h) {\n    cylinder(r1=leg_r, r2=leg_r*0.8, h=h, $fn=32);\n}\n\n// Stretcher between legs\nmodule stretcher(len) {\n    rotate([90,0,0]) cylinder(r=stretch_r, h=len, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n\n    // Backrest\n    backrest();\n\n    // Legs\n    translate([ seat_w/2-leg_r,  seat_d/2-leg_r, leg_h/2]) leg(leg_h);\n    translate([-seat_w/2+leg_r,  seat_d/2-leg_r, leg_h/2]) leg(leg_h);\n    translate([ seat_w/2-leg_r, -seat_d/2+leg_r, leg_h/2]) leg(leg_h);\n    translate([-seat_w/2+leg_r, -seat_d/2+leg_r, leg_h/2]) leg(leg_h);\n\n    // Side stretchers\n    translate([0,  seat_d/2-leg_r, stretch_h]) stretcher(seat_w-2*leg_r);\n    translate([0, -seat_d/2+leg_r, stretch_h]) stretcher(seat_w-2*leg_r);\n\n    // Front / back stretchers\n    translate([ seat_w/2-leg_r, 0, stretch_h]) rotate([0,0,90]) stretcher(seat_d-2*leg_r);\n    translate([-seat_w/2+leg_r, 0, stretch_h]) rotate([0,0,90]) stretcher(seat_d-2*leg_r);\n}",
    "renders": true
  },
  {
    "household_item": "table",
    "openscad_code": "// Realistic wooden-style table with medium complexity\n// Overall dimensions: 100 x 60 x 45 mm\n\n// Table parameters\ntable_length = 100;\ntable_width = 60;\ntable_height = 45;\ntop_thickness = 4;\nleg_size = 6;\nstretcher_height = 15;\n\n// Wood appearance parameters (for slicing, not visual)\nwood_grain_depth = 0.3;\n\n// Main table module\nmodule table() {\n    // Table top with rounded edges\n    union() {\n        // Main top slab\n        translate([0, 0, table_height - top_thickness/2])\n            rounded_box(table_length, table_width, top_thickness, 2);\n        \n        // Wood grain detail on top\n        for (i = [0:3:table_length-6]) {\n            translate([i - table_length/2 + 3, -table_width/2 + 2, table_height + 0.1])\n                cube([1, table_width - 4, wood_grain_depth]);\n        }\n    }\n    \n    // Four legs with taper\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_length/2 - leg_size), \n                      y * (table_width/2 - leg_size), \n                      (table_height - top_thickness)/2]) {\n                tapered_leg(leg_size, leg_size * 0.8, table_height - top_thickness);\n            }\n        }\n    }\n    \n    // Side stretchers\n    for (x = [-1, 1]) {\n        translate([x * (table_length/2 - leg_size - 12), 0, stretcher_height]) {\n            rounded_box(24, leg_size * 0.8, leg_size * 0.8, 1);\n        }\n    }\n    \n    // Front/back stretchers\n    for (y = [-1, 1]) {\n        translate([0, y * (table_width/2 - leg_size - 7), stretcher_height]) {\n            rounded_box(leg_size * 0.8, 14, leg_size * 0.8, 1);\n        }\n    }\n    \n    // Corner brackets for stability\n    corner_brackets();\n}\n\n// Create rounded box for realistic edges\nmodule rounded_box(l, w, h, radius) {\n    hull() {\n        // Create rounded corners using sphere intersections\n        for (x = [l/2 - radius, -l/2 + radius]) {\n            for (y = [w/2 - radius, -w/2 + radius]) {\n                for (z = [h/2 - radius, -h/2 + radius]) {\n                    translate([x, y, z])\n                        sphere(r = radius, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Tapered leg for realistic furniture look\nmodule tapered_leg(bottom_size, top_size, height) {\n    difference() {\n        hull() {\n            // Bottom of leg\n            translate([0, 0, -height/2])\n                cube([bottom_size, bottom_size, 0.1], center = true);\n            \n            // Top of leg (tapered)\n            translate([0, 0, height/2])\n                cube([top_size, top_size, 0.1], center = true);\n        }\n        \n        // Hollow out leg to save material\n        translate([0, 0, -height/2])\n            cylinder(h = height + 1, r1 = bottom_size/2 - 1.5, r2 = top_size/2 - 1.5, $fn = 8);\n    }\n}\n\n// Corner brackets for structural support\nmodule corner_brackets() {\n    bracket_size = 15;\n    bracket_thickness = 3;\n    \n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_length/2 - bracket_size), \n                      y * (table_width/2 - bracket_size), \n                      table_height - top_thickness - 5]) {\n                // Simple L-bracket shape\n                union() {\n                    cube([bracket_size * x, bracket_thickness, 10]);\n                    cube([bracket_thickness, bracket_size * y, 10]);\n                }\n            }\n        }\n    }\n}\n\n// Generate the table\ntable();",
    "renders": true
  },
  {
    "household_item": "desk",
    "openscad_code": "// Realistic 3D-printable desk – medium complexity\n// Overall size ~90 mm (length) × 50 mm (width) × 45 mm (height)\n\n// Desk parameters\ndesk_len = 90;\ndesk_wid = 50;\ndesk_top_t = 4;\nleg_wid = 5;\nleg_thk = 5;\nleg_h = 40;\nback_panel_h = 25;\nback_panel_t = 3;\ndrawer_w = 22;\ndrawer_h = 18;\ndrawer_t = 2;\nhandle_len = 10;\nhandle_d = 2;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule desk_top() {\n    difference() {\n        // Main top\n        translate([0, 0, leg_h + desk_top_t / 2])\n            cube([desk_len, desk_wid, desk_top_t], center = true);\n        // Chamfered edges (simple 45° cut)\n        translate([0, 0, leg_h + desk_top_t - 0.5])\n            cube([desk_len - 2, desk_wid - 2, 1], center = true);\n    }\n}\n\nmodule leg(x, y) {\n    translate([x, y, leg_h / 2])\n        cube([leg_wid, leg_thk, leg_h], center = true);\n}\n\nmodule back_panel() {\n    translate([0, desk_wid / 2 - back_panel_t / 2, leg_h + back_panel_h / 2])\n        cube([desk_len - 2 * leg_wid, back_panel_t, back_panel_h], center = true);\n}\n\nmodule drawer_box(x, y, z) {\n    difference() {\n        // Shell\n        translate([x, y, z])\n            cube([drawer_w, desk_wid - 2 * wall - 1, drawer_h]);\n        // Hollow inside\n        translate([x + wall, y + wall, z + wall])\n            cube([drawer_w - 2 * wall, desk_wid - 4 * wall - 1, drawer_h - wall]);\n    }\n}\n\nmodule handle(x, y, z) {\n    translate([x, y, z + drawer_h / 2])\n        rotate([90, 0, 0])\n            cylinder(h = handle_len, d = handle_d, $fn = 16);\n}\n\nmodule drawer_assembly(idx) {\n    offset_x = -desk_len / 2 + leg_wid + 2 + idx * (drawer_w + 1);\n    offset_z = leg_h + desk_top_t + 1;\n    union() {\n        drawer_box(offset_x, -desk_wid / 2 + wall + 0.5, offset_z);\n        handle(offset_x + drawer_w / 2, 0, offset_z + drawer_h);\n    }\n}\n\n// Build desk\nunion() {\n    desk_top();\n    // Four legs\n    for (sx = [-1, 1])\n        for (sy = [-1, 1])\n            leg(sx * (desk_len / 2 - leg_wid / 2), sy * (desk_wid / 2 - leg_thk / 2));\n\n    back_panel();\n\n    // Three drawers\n    for (i = [0:2])\n        drawer_assembly(i);\n}",
    "renders": true
  },
  {
    "household_item": "bed",
    "openscad_code": "// Realistic Medium-Complexity Bed\n// Total length ~80 mm, printable without supports\n\n$fn = 36; // smooth curves\n\n// Overall bed dimensions\nbed_len = 80;\nbed_wid = 60;\nbed_height = 25;\n\n// Mattress thickness\nmattress_th = 8;\n\n// Headboard\nmodule headboard() {\n    // Posts\n    for (x = [-bed_wid/2 + 3, bed_wid/2 - 3]) {\n        translate([x, bed_len/2 - 2, 0])\n            cylinder(h = 20, d1 = 3, d2 = 2.5);\n    }\n    // Panel\n    translate([0, bed_len/2 - 3, 10])\n        cube([bed_wid - 4, 2, 15], center = true);\n    // Top bar\n    translate([0, bed_len/2 - 3, 18])\n        cube([bed_wid - 2, 2, 2], center = true);\n}\n\n// Footboard\nmodule footboard() {\n    // Posts\n    for (x = [-bed_wid/2 + 3, bed_wid/2 - 3]) {\n        translate([x, -bed_len/2 + 2, 0])\n            cylinder(h = 8, d1 = 3, d2 = 2.5);\n    }\n    // Panel\n    translate([0, -bed_len/2 + 3, 4])\n        cube([bed_wid - 4, 2, 6], center = true);\n}\n\n// Side rails\nmodule side_rail(len, off_y) {\n    translate([0, off_y, 4])\n        cube([bed_wid - 6, len, 1.5], center = true);\n}\n\n// Slats\nmodule slats() {\n    for (y = [-bed_len/2 + 8 : 5 : bed_len/2 - 8]) {\n        translate([0, y, 5.5])\n            cube([bed_wid - 6, 2, 0.8], center = true);\n    }\n}\n\n// Mattress\nmodule mattress() {\n    translate([0, 0, 5.5 + mattress_th/2])\n        cube([bed_wid - 6, bed_len - 6, mattress_th], center = true);\n}\n\n// Pillow\nmodule pillow() {\n    translate([0, bed_len/2 - 12, 5.5 + mattress_th + 1.5])\n        scale([1, 0.7, 0.35])\n            cube([12, 12, 6], center = true);\n}\n\n// Blanket\nmodule blanket() {\n    difference() {\n        translate([0, 0, 5.5 + mattress_th + 0.5])\n            cube([bed_wid - 8, bed_len - 18, 1.2], center = true);\n        // Rounded corners by subtracting spheres\n        for (dx = [-1, 1])\n            for (dy = [-1, 1])\n                translate([dx * (bed_wid/2 - 6), dy * (bed_len/2 - 11), 0])\n                    sphere(r = 3);\n    }\n}\n\n// Legs\nmodule legs() {\n    for (y = [-bed_len/2 + 5, bed_len/2 - 5])\n        for (x = [-bed_wid/2 + 4, bed_wid/2 - 4])\n            translate([x, y, 0])\n                cylinder(h = 5, d = 2.5);\n}\n\n// Assembly\nunion() {\n    legs();\n    headboard();\n    footboard();\n    side_rail(bed_len - 12, 0);\n    slats();\n    mattress();\n    pillow();\n    blanket();\n}",
    "renders": true
  },
  {
    "household_item": "sofa",
    "openscad_code": "// Realistic style medium-complexity 3D-printable sofa\n// Overall dimensions: 80 mm (W) × 35 mm (D) × 35 mm (H)\n\n$fn = 32;\n\n// Main body module\nmodule sofa() {\n    // Base frame\n    difference() {\n        translate([-40, 0, 0])\n            cube([80, 35, 8], center = true);\n        \n        // Hollow out for printability\n        translate([-40, 0, -1])\n            cube([76, 31, 10], center = true);\n    }\n    \n    // Backrest\n    difference() {\n        translate([-40, 12, 8])\n            cube([80, 3, 27], center = true);\n        \n        // Hollow backrest\n        translate([-40, 11, 8])\n            cube([76, 5, 23], center = true);\n    }\n    \n    // Left armrest\n    difference() {\n        translate([-37.5, -12, 15])\n            cube([5, 11, 30], center = true);\n        \n        translate([-37.5, -12, 13])\n            cube([3, 9, 26], center = true);\n    }\n    \n    // Right armrest\n    mirror([1, 0, 0])\n        translate([-37.5, -12, 15])\n        difference() {\n            cube([5, 11, 30], center = true);\n            translate([0, 0, -2])\n                cube([3, 9, 26], center = true);\n        }\n    \n    // Seat cushions (3 separate cushions)\n    for (x = [-25, -40, -15]) {\n        translate([x, 0, 4])\n            cushion();\n    }\n    \n    // Back cushions (3 separate cushions)\n    for (x = [-25, -40, -15]) {\n        translate([x, 10, 19])\n            rotate([0, 10, 0])\n            cushion();\n    }\n    \n    // Legs (4 legs)\n    for (x = [-30, -30, -10, -10])\n        translate([x, 10, -4])\n            leg();\n    \n    for (x = [-30, -30, -10, -10])\n        translate([x, -10, -4])\n            leg();\n}\n\n// Cushion module with rounded top\nmodule cushion() {\n    difference() {\n        union() {\n            cube([14, 32, 6], center = true);\n            translate([0, 0, 3])\n                scale([1, 1, 0.5])\n                    sphere(d = 14);\n        }\n        \n        // Hollow cushion\n        translate([0, 0, -1])\n            cube([12, 30, 8], center = true);\n    }\n}\n\n// Leg module\nmodule leg() {\n    difference() {\n        cylinder(h = 8, d = 3);\n        \n        translate([0, 0, -1])\n            cylinder(h = 10, d = 2);\n    }\n}\n\n// Assembly\nsofa();",
    "renders": true
  },
  {
    "household_item": "couch",
    "openscad_code": "// Couch - Realistic style, medium complexity\n// Dimensions scaled for ~70mm print\n\n// Global parameters\n$fn = 32;\nseat_width = 40;\nseat_depth = 30;\nseat_height = 15;\nback_height = 25;\narmrest_height = 22;\narmrest_width = 8;\nleg_height = 10;\nwall = 2;\n\nmodule rounded_cube(size, radius) {\n    // Helper module for rounded edges\n    hull() {\n        for(dx = [0, size.x - radius*2])\n            for(dy = [0, size.y - radius*2])\n                for(dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r = radius);\n    }\n}\n\nmodule cushion(width, depth, thickness, radius = 3) {\n    // Puffy cushion with rounded top\n    difference() {\n        rounded_cube([width, depth, thickness], radius);\n        translate([radius, radius, thickness - 1])\n            cube([width - radius*2, depth - radius*2, 1]);\n    }\n}\n\nmodule couch_leg(height) {\n    // Simple tapered leg\n    cylinder(h = height, r1 = 2.5, r2 = 2);\n}\n\nmodule armrest() {\n    // Curved armrest with slight taper\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h = armrest_height - 5, r = armrest_width/2);\n            translate([0, armrest_width, 0])\n                cylinder(h = armrest_height - 5, r = armrest_width/2);\n            translate([0, armrest_width/2, armrest_height - 5])\n                sphere(r = armrest_width/2);\n        }\n        // Hollow inside\n        translate([wall, wall, 0])\n            cylinder(h = armrest_height - 5, r = armrest_width/2 - wall);\n        translate([wall, armrest_width - wall, 0])\n            cylinder(h = armrest_height - 5, r = armrest_width/2 - wall);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with lumbar support\n    difference() {\n        // Main backrest shape\n        hull() {\n            translate([0, 0, 0])\n                cube([seat_width, wall, back_height]);\n            translate([0, 0, back_height - 5])\n                cube([seat_width, wall + 3, 5]);\n        }\n        // Curved inner surface\n        for(i = [0:seat_width/5:seat_width]) {\n            translate([i, wall + 1, 0])\n                cylinder(h = 0.1, r = back_height/2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Left armrest\n    translate([0, -armrest_width, leg_height])\n        armrest();\n    \n    // Right armrest (mirrored)\n    translate([seat_width, -armrest_width, leg_height])\n        mirror([1, 0, 0])\n            armrest();\n    \n    // Seat frame\n    translate([0, 0, leg_height])\n        difference() {\n            rounded_cube([seat_width, seat_depth, seat_height], 4);\n            translate([wall, wall, wall])\n                rounded_cube([seat_width - wall*2, seat_depth - wall*2, seat_height - wall], 2);\n        }\n    \n    // Seat cushion\n    translate([2, 2, leg_height + seat_height - wall])\n        cushion(seat_width - 4, seat_depth - 4, 6);\n    \n    // Backrest\n    translate([0, seat_depth - wall, leg_height + seat_height - 5])\n        backrest();\n    \n    // Back cushion\n    translate([2, seat_depth - 6, leg_height + seat_height])\n        cushion(seat_width - 4, 4, 8);\n    \n    // Legs\n    for(x = [5, seat_width - 5])\n        for(y = [5, seat_depth - 5])\n            translate([x, y, 0])\n                couch_leg(leg_height);\n}",
    "renders": true
  },
  {
    "household_item": "closet",
    "openscad_code": "// Realistic 3D-printable closet at 1:20 scale\n// External dimensions: 80 x 40 x 100 mm (W x D x H)\n\n$fn = 32;               // Smooth curves for printability\nwall = 2;               // Uniform printable wall thickness\n\nmodule closet() {\n    // Main carcass\n    difference() {\n        // Outer shell\n        cube([80, 40, 100], center = false);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([80 - 2*wall, 40 - 2*wall, 100 - wall]);\n    }\n    \n    // Bottom plinth\n    translate([0, 0, -5])\n        cube([80, 42, 5]);\n    \n    // Two doors\n    module door() {\n        difference() {\n            // Door panel\n            translate([0, 0, 0])\n                cube([38, 2, 90]);\n            \n            // Recessed panel\n            translate([2, -0.5, 2])\n                cube([34, 3, 86]);\n            \n            // Handle hole\n            translate([5, 1, 45])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d = 4);\n        }\n        \n        // Handle knob\n        translate([5, 2, 45])\n            sphere(d = 4);\n    }\n    \n    // Left door\n    translate([1, 38, 5])\n        door();\n    \n    // Right door\n    translate([41, 38, 5])\n        door();\n    \n    // Internal shelf\n    translate([wall, wall, 65])\n        cube([80 - 2*wall, 40 - 2*wall, wall]);\n    \n    // Clothes rail\n    translate([40, 20, 90])\n        rotate([90, 0, 0])\n            cylinder(h = 80 - 2*wall, d = 4);\n}\n\n// Ventilation holes on back panel\nmodule vents() {\n    for (i = [1:5]) {\n        translate([i*13.5, 20, 1])\n            rotate([90, 0, 0])\n                cylinder(h = wall + 1, d = 8);\n    }\n}\n\ndifference() {\n    closet();\n    translate([-1, -1, 50])\n        vents();\n}\n\n// Hinges (simplified printable cylinders)\nmodule hinges() {\n    for (h = [0:1]) {\n        // Left door hinges\n        translate([1, 38, 15 + h*60])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = 3);\n        \n        // Right door hinges  \n        translate([79, 38, 15 + h*60])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = 3);\n    }\n}\n\nhinges();",
    "renders": true
  },
  {
    "household_item": "wardrobe",
    "openscad_code": "// Wardrobe - Realistic style, medium complexity\n// Roughly 70 mm tall, 50 mm wide, 30 mm deep\n\n$fn = 32;\n\n// Main dimensions\nwidth = 50;\ndepth = 30;\nheight = 70;\nwall = 2;\n\nmodule wardrobe() {\n    // Main carcass\n    difference() {\n        cube([width, depth, height]);\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-wall]);\n    }\n    \n    // Base plinth around bottom\n    translate([-2, -2, -2])\n        cube([width+4, depth+4, 4]);\n    \n    // Top cornice\n    translate([-1, -1, height])\n        cube([width+2, depth+2, 3]);\n    \n    // Divider between doors\n    translate([width/2, 0, 0])\n        cube([wall, depth, height]);\n    \n    // Left door\n    translate([wall/2, 0, wall/2])\n        door(width/2-wall, depth-wall, height-wall);\n    \n    // Right door\n    translate([width/2+wall/2, 0, wall/2])\n        door(width/2-wall, depth-wall, height-wall);\n    \n    // Back panel detail\n    translate([wall, wall, wall])\n        cube([width-2*wall, wall, height-2*wall]);\n    \n    // Shelf inside\n    translate([wall, wall, height*0.4])\n        cube([width-2*wall, depth-2*wall, wall]);\n}\n\nmodule door(w, d, h) {\n    difference() {\n        // Door panel\n        translate([0, wall, 0])\n            cube([w, d-wall, h]);\n        \n        // Recessed panel\n        translate([wall*1.5, wall+0.5, wall*1.5])\n            cube([w-3*wall, d-wall*2-0.5, h-3*wall]);\n        \n        // Handle hole\n        translate([w-wall*2, d-wall/2, h/2])\n            rotate([90,0,0])\n                cylinder(h=wall*3, r=1.5);\n    }\n    \n    // Handle\n    translate([w-wall*2, d+0.5, h/2])\n        rotate([90,0,0])\n            cylinder(h=3, r=1.5);\n    \n    // Door grooves\n    for (i = [1:3]) {\n        translate([w/4*i, wall+0.5, wall*1.5])\n            cube([0.5, d-wall*2-1, h-3*wall-1]);\n    }\n    \n    // Hinges\n    for (z = [h*0.2, h*0.8]) {\n        translate([0, d/2, z])\n            cylinder(h=d, r=1.5);\n    }\n}\n\nwardrobe();",
    "renders": true
  },
  {
    "household_item": "dresser",
    "openscad_code": "// Realistic Medium-Complexity Dresser\n// Overall dimensions: 70 mm wide × 35 mm deep × 50 mm high\n// 3D-printable with 2 mm walls and no overhangs\n\n// Parameters\nwidth  = 70;   // dresser width\ndepth  = 35;   // dresser depth\nheight = 50;   // dresser height\nwall   = 2;    // wall thickness for printability\n\n// Main body\nmodule dresser_body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center=false);\n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-2*wall], center=false);\n    }\n}\n\n// Top panel overhang\nmodule top_panel() {\n    translate([-2, -2, height])\n        cube([width+4, depth+4, wall], center=false);\n}\n\n// Base / toe-kick\nmodule base_trim() {\n    difference() {\n        // Full base block\n        translate([-2, -2, -wall])\n            cube([width+4, depth+4, wall], center=false);\n        // Cutout for toes\n        translate([wall, wall, -wall])\n            cube([width-2*wall, depth-2*wall, wall], center=false);\n    }\n}\n\n// Drawer module\nmodule drawer(w, d, h, handle_h) {\n    difference() {\n        // Drawer box\n        translate([wall, wall, wall])\n            cube([w-2*wall, d-2*wall, h-2*wall], center=false);\n        // Hollow inside\n        translate([2*wall, 2*wall, 2*wall])\n            cube([w-4*wall, d-4*wall, h-3*wall], center=false);\n    }\n    // Handle\n    translate([w/2, d-wall, h/2])\n        rotate([90,0,0])\n            cylinder(h=handle_h, d=4, $fn=20);\n}\n\n// Row of drawers\nmodule drawer_row(count, start_h) {\n    drawer_w = (width - (count+1)*wall) / count;\n    for (i=[0:count-1]) {\n        translate([wall + i*(drawer_w+wall), 0, start_h])\n            drawer(drawer_w, depth, 15, 6);\n    }\n}\n\n// Assembly\nunion() {\n    dresser_body();\n    top_panel();\n    base_trim();\n\n    // Top row: 2 wide drawers\n    drawer_row(2, height-15-wall);\n\n    // Middle row: 3 narrow drawers\n    drawer_row(3, height-30-wall);\n\n    // Bottom row: 2 wide drawers\n    drawer_row(2, height-45-wall);\n}",
    "renders": true
  },
  {
    "household_item": "armoire",
    "openscad_code": "// Realistic 3D-Printable Armoire – Medium Complexity\n// Overall footprint ≈ 70 × 35 × 100 mm, 2 mm wall thickness\n// Designed for FDM printing – all overhangs ≤ 45°, split into printable parts\n\n$fa = 2;\n$fs = 0.5;\n\n// ---------- Global Dimensions ----------\nH = 100;          // total height\nW = 70;           // width\nD = 35;           // depth\nwall = 2;         // uniform wall thickness\n\n// ---------- Main Body ----------\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([W, D, H], center = true);\n        // Hollow interior\n        translate([0, 0, wall])\n            cube([W - 2*wall, D - wall, H - 2*wall], center = true);\n    }\n}\n\n// ---------- Feet ----------\nmodule feet() {\n    foot_size = 5;\n    foot_h = 6;\n    positions = [[-W/2 + foot_size/2, -D/2 + foot_size/2],\n                 [ W/2 - foot_size/2, -D/2 + foot_size/2],\n                 [-W/2 + foot_size/2,  D/2 - foot_size/2],\n                 [ W/2 - foot_size/2,  D/2 - foot_size/2]];\n    for (p = positions) {\n        translate([p.x, p.y, -H/2 + foot_h/2])\n            cylinder(h = foot_h, d = foot_size, center = true);\n    }\n}\n\n// ---------- Top Molding ----------\nmodule top_molding() {\n    m_height = 4;\n    difference() {\n        translate([0, 0, H/2 - m_height/2])\n            cube([W + 4, D + 4, m_height], center = true);\n        translate([0, 0, H/2 + m_height/2])\n            cube([W - 4, D, m_height + 1], center = true);\n    }\n}\n\n// ---------- Doors ----------\nmodule doors() {\n    door_w = (W - 2*wall)/2 - 1;\n    door_h = H*0.75;\n    door_d = wall;\n    \n    // Left door\n    translate([-door_w/2 - wall, D/2 - door_d/2, 0])\n        cube([door_w, door_d, door_h], center = true);\n    \n    // Right door\n    translate([door_w/2 + wall, D/2 - door_d/2, 0])\n        cube([door_w, door_d, door_h], center = true);\n    \n    // Door knobs\n    knob_r = 2;\n    knob_h = 3;\n    translate([-door_w*0.75, D/2 + knob_h/2, 0])\n        cylinder(h = knob_h, r = knob_r, center = true);\n    translate([door_w*0.75, D/2 + knob_h/2, 0])\n        cylinder(h = knob_h, r = knob_r, center = true);\n}\n\n// ---------- Internal Shelf ----------\nmodule shelf() {\n    shelf_y = D - wall;\n    shelf_z = 0;\n    translate([0, 0, shelf_z])\n        cube([W - 2*wall, shelf_y, wall], center = true);\n}\n\n// ---------- Back Panel with Keyhole Slots ----------\nmodule back_panel() {\n    // Keyhole for mounting (3 mm screw head)\n    slot_w = 5;\n    slot_h = 8;\n    slot_d = 1;\n    \n    difference() {\n        translate([0, -D/2 + wall/2, 0])\n            cube([W, wall, H], center = true);\n        \n        // Two keyholes\n        for (x = [-W/4, W/4])\n        translate([x, -D/2 + wall/2, H*0.6])\n            cube([slot_w, wall + 0.1, slot_h], center = true);\n    }\n}\n\n// ---------- Assembly ----------\ntranslate([0, 0, H/2])\n    union() {\n        body();\n        feet();\n        top_molding();\n        doors();\n        shelf();\n        back_panel();\n    }",
    "renders": true
  },
  {
    "household_item": "hutch",
    "openscad_code": "// Realistic Medium-Complexity Hutch\n// Overall size ≈ 80 mm wide × 40 mm deep × 80 mm tall\n// Wall thickness 2 mm for 3D-printability\n// No steep overhangs; all angles ≤ 45°\n\n$fn = 32;  // Smooth curves\n\n// --- Main Hutch Module ---\nmodule hutch() {\n    difference() {\n        union() {\n            base_cabinet();\n            upper_cabinet();\n            back_panel();\n        }\n        \n        // Remove cavities\n        translate([2, 2, 2]) cube([76, 36, 36]);     // Lower cavity\n        translate([2, 2, 44]) cube([76, 36, 34]);    // Upper cavity\n    }\n}\n\n// --- Lower Cabinet ---\nmodule base_cabinet() {\n    cube([80, 40, 40]);  // Full block\n}\n\n// --- Upper Cabinet ---\nmodule upper_cabinet() {\n    translate([0, 0, 40]) cube([80, 40, 40]);  // Stacked on base\n}\n\n// --- Back Panel ---\nmodule back_panel() {\n    translate([-2, 18, 0]) cube([2, 4, 80]);  // 2 mm thick back\n}\n\n// --- Shelves ---\nmodule shelves() {\n    for (z = [10, 25, 50, 65]) {\n        translate([2, 2, z]) cube([76, 36, 1.5]);\n    }\n}\n\n// --- Glass Pane Doors ---\nmodule doors() {\n    // Lower pair\n    for (x = [4, 42]) {\n        translate([x, 39, 5]) rotate([90, 0, 0])\n            linear_extrude(height = 30, center = false)\n                offset(r = 1) square([34, 24]);\n    }\n    \n    // Upper pair\n    for (x = [4, 42]) {\n        translate([x, 39, 45]) rotate([90, 0, 0])\n            linear_extrude(height = 30, center = false)\n                offset(r = 1) square([34, 24]);\n    }\n}\n\n// --- Drawer Fronts ---\nmodule drawers() {\n    for (z = [13, 21.5, 30]) {\n        translate([10, 39, z]) rotate([90, 0, 0])\n            linear_extrude(height = 7)\n                offset(r = 1) square([60, 7]);\n    }\n}\n\n// --- Simple Handles ---\nmodule handles() {\n    for (x = [20, 58]) {\n        translate([x, 41, 20]) rotate([0, 90, 0])\n            cylinder(h = 6, r = 1.5);\n    }\n    for (x = [20, 58]) {\n        translate([x, 41, 60]) rotate([0, 90, 0])\n            cylinder(h = 6, r = 1.5);\n    }\n}\n\n// --- Assembly ---\nhutch();\nshelves();\ndoors();\ndrawers();\nhandles();",
    "renders": true
  },
  {
    "household_item": "bookcase",
    "openscad_code": "// Realistic Medium-complexity Bookcase\n// Approx. 70 mm tall, 60 mm wide, 20 mm deep\n// Designed for FDM printing: 1.2 mm walls, 45° max overhang\n\n$fn = 32;                // Smooth curves\nwall = 1.2;              // 3×0.4 mm nozzle width\nclearance = 0.2;         // Print tolerance\n\n// Overall outer dimensions\nwidth  = 60;\ndepth  = 20;\nheight = 70;\n\n// Shelf parameters\nshelf_thick = wall;\nshelf_clear = 18;\nshelf_count = 3;\nshelf_pitch = (height-2*wall-shelf_thick)/shelf_count;\n\n// Back panel dado depth\ndado = 1.5;\n\nmodule side_panel(){\n    difference(){\n        // Main panel\n        translate([0,0,height/2])\n            cube([wall, depth, height], center=true);\n\n        // Dadoes for shelves\n        for(i=[1:shelf_count]){\n            translate([0, 0, i*shelf_pitch+shelf_thick/2])\n                rotate([0,90,0])\n                    cube([depth, shelf_thick*2, wall*2], center=true);\n        }\n\n        // Dado for back panel\n        translate([wall/2-dado/2, 0, height/2])\n            cube([dado, depth, height], center=true);\n    }\n}\n\nmodule shelf(){\n    difference(){\n        cube([width-2*wall, depth-wall, shelf_thick]);\n        \n        // Taper front edge slightly\n        translate([-1, depth-wall-2, -1])\n            rotate([0,45,0])\n                cube([width-2*wall+2, 2.5, shelf_thick+2]);\n                \n        // Dado for back panel\n        translate([0, depth-wall-dado, -1])\n            cube([width-2*wall, dado, shelf_thick+2]);\n    }\n}\n\nmodule back_panel(){\n    cube([width-2*wall, wall, height-2*wall]);\n}\n\nmodule book(width, height, depth){\n    // Slight random tilt for realism\n    rotate([0, 0, 2-rands(-2,2,1)[0]]){\n        difference(){\n            cube([width, depth, height]);\n            // Rounded spine\n            translate([width/2-wall/2, depth-wall, height/2])\n                rotate([90,0,0])\n                    cylinder(h=width-wall, r=wall/2, center=true);\n        }\n    }\n}\n\nmodule books(){\n    // Random books on each shelf\n    for(s=[1:shelf_count]){\n        ypos = s*shelf_pitch;\n        xstart = wall + 2;\n        xend = width - wall - 2;\n        \n        // Generate 3-4 books per shelf\n        seed = s*45;\n        for(i=[0:2]){\n            w = rands(4,8,1,seed+i*3)[0];\n            h = rands(10,15,1,seed+i*3+1)[0];\n            d = depth - wall - 1.5;\n            xpos = xstart + i*12 + rands(0,2,1,seed+i*3+2)[0];\n            if(xpos + w < xend){\n                translate([xpos, ypos + shelf_thick, wall + h/2])\n                    color([0.2,0.2,0.2])\n                        book(w, h, d);\n            }\n        }\n    }\n}\n\nmodule base_trim(){\n    // Simple plinth\n    translate([0, -wall/2, wall/2])\n        cube([width, wall, wall]);\n    translate([0, depth-wall/2, wall/2])\n        cube([width, wall, wall]);\n}\n\n// Assembly\ndifference(){\n    union(){\n        // Left side\n        translate([wall/2, depth/2, height/2])\n            side_panel();\n            \n        // Right side\n        translate([width-wall/2, depth/2, height/2])\n            mirror([1,0,0])\n                side_panel();\n                \n        // Shelves\n        for(i=[1:shelf_count]){\n            translate([wall, i*shelf_pitch+shelf_thick/2, wall])\n                shelf();\n        }\n        \n        // Back panel\n        translate([wall, depth-wall/2, height/2])\n            back_panel();\n            \n        // Base trim\n        base_trim();\n    }\n    \n    // Remove printing aids\n    // (none needed for this design)\n}\n\n// Add books\nbooks();",
    "renders": true
  },
  {
    "household_item": "sideboard",
    "openscad_code": "// Realistic Medium-Complexity Sideboard\n// Approx. 80 mm wide – fits most FDM printers\n// No overhangs >45°, 1.2 mm wall thickness throughout\n\n$fn = 36;\n\n// Overall dimensions\nsideboard_w = 80;\nsideboard_h = 45;\nsideboard_d = 35;\nwall_t = 1.2;\n\nmodule carcass() {\n    difference() {\n        // Main box\n        cube([sideboard_w, sideboard_d, sideboard_h], center = true);\n\n        // Hollow inside\n        translate([0, 0, wall_t/2])\n            cube([sideboard_w - 2*wall_t, sideboard_d - wall_t, sideboard_h - wall_t], center = true);\n    }\n}\n\nmodule shelf() {\n    translate([0, 0, -sideboard_h/4])\n        cube([sideboard_w - 2*wall_t, sideboard_d - wall_t, wall_t], center = true);\n}\n\nmodule leg() {\n    // Simple tapered foot\n    cylinder(h1 = 8, h2 = 8, r1 = 2.5, r2 = 2.0, center = false);\n}\n\nmodule legs() {\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * (sideboard_w/2 - 4), y * (sideboard_d/2 - 4), -sideboard_h/2 - 4])\n                leg();\n}\n\nmodule door() {\n    // Panel door with slight bevel\n    difference() {\n        // Door slab\n        translate([0, 0, -wall_t/2])\n            cube([sideboard_w/2 - 4, wall_t + 0.1, sideboard_h/2 - 4], center = true);\n\n        // Recessed panel\n        translate([0, 0, -wall_t/2 - 0.1])\n            cube([sideboard_w/2 - 10, wall_t + 0.3, sideboard_h/2 - 10], center = true);\n\n        // Handle hole\n        translate([(sideboard_w/2 - 4)/2 - 4, wall_t/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 1.2, center = true);\n    }\n}\n\nmodule doors() {\n    translate([-sideboard_w/4, sideboard_d/2 + wall_t/2, 0])\n        door();\n    translate([ sideboard_w/4, sideboard_d/2 + wall_t/2, 0])\n        door();\n}\n\nmodule top() {\n    // Slightly thicker top board\n    translate([0, 0, sideboard_h/2 + wall_t/2])\n        cube([sideboard_w + 2*wall_t, sideboard_d + 2*wall_t, wall_t], center = true);\n}\n\n// Build the sideboard\nunion() {\n    legs();\n    carcass();\n    shelf();\n    top();\n    doors();\n}",
    "renders": true
  },
  {
    "household_item": "buffet",
    "openscad_code": "// Realistic Medium-Complexity Buffet Cabinet\n// Overall dimensions ~80 mm wide, ~45 mm deep, ~55 mm tall\n\n// Wall thickness for 3D-printing\nwall = 2;\n\n// Main carcass\nmodule carcass() {\n    difference() {\n        // Outer shell\n        cube([80, 45, 55], center = false);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([80 - 2*wall, 45 - 2*wall, 55 - 2*wall], center = false);\n    }\n}\n\n// Shelves inside\nmodule shelves() {\n    for (z = [15, 35]) {\n        translate([wall, wall, z])\n            cube([80 - 2*wall, 45 - 2*wall, wall], center = false);\n    }\n}\n\n// Back panel\nmodule back() {\n    translate([0, 45 - wall, 0])\n        cube([80, wall, 55], center = false);\n}\n\n// Countertop lip\nmodule lip() {\n    difference() {\n        // Full lip\n        translate([-2, -2, 55])\n            cube([84, 49, 4], center = false);\n        \n        // Cut back to reveal only lip\n        translate([0, 0, 55])\n            cube([80, 45, 4], center = false);\n    }\n}\n\n// Cabinet doors\nmodule doors() {\n    for (x = [2, 42]) {\n        translate([x, wall, 3])\n            cube([36, 45 - 2*wall - 1, 50 - 3 - wall], center = false);\n    }\n}\n\n// Door handles\nmodule handles() {\n    for (x = [20, 60]) {\n        translate([x, 2, 30])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 4, center = true, $fn = 16);\n    }\n}\n\n// Small drawer\nmodule drawer() {\n    translate([wall, wall, 55 - 12])\n        cube([80 - 2*wall, 45 - 2*wall, 10], center = false);\n}\n\n// Drawer front\nmodule drawer_front() {\n    translate([wall, wall, 55 - 10])\n        cube([80 - 2*wall, 45 - 2*wall - 1, 10], center = false);\n}\n\n// Drawer handle\nmodule drawer_handle() {\n    translate([40, 2, 55 - 5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 4, center = true, $fn = 16);\n}\n\n// Base plinth\nmodule plinth() {\n    difference() {\n        // Full base\n        translate([-2, -2, -3])\n            cube([84, 49, 3], center = false);\n        \n        // Recess center\n        translate([2, 2, -3])\n            cube([76, 41, 3], center = false);\n    }\n}\n\n// Assemble buffet\nunion() {\n    carcass();\n    shelves();\n    back();\n    lip();\n    doors();\n    handles();\n    drawer();\n    drawer_front();\n    drawer_handle();\n    plinth();\n}",
    "renders": true
  },
  {
    "household_item": "credenza",
    "openscad_code": "// Realistic Credenza - Medium Complexity\n// Overall dimensions: 80mm W x 40mm D x 50mm H\n\nwall_thickness = 2;\nleg_height = 10;\nleg_width = 3;\n\nmodule leg() {\n    difference() {\n        cube([leg_width, leg_width, leg_height], center=true);\n        translate([0, 0, leg_height/2 - 1])\n            cube([leg_width-1, leg_width-1, 2], center=true);\n    }\n}\n\nmodule legs() {\n    front_offset = 35;\n    side_offset = 37;\n    translate([front_offset, side_offset, leg_height/2])\n        leg();\n    translate([front_offset, -side_offset, leg_height/2])\n        leg();\n    translate([-front_offset, side_offset, leg_height/2])\n        leg();\n    translate([-front_offset, -side_offset, leg_height/2])\n        leg();\n}\n\nmodule body() {\n    difference() {\n        // Main body\n        cube([80, 40, 38]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([80 - 2*wall_thickness, 40 - 2*wall_thickness, 38 - wall_thickness]);\n    }\n}\n\nmodule door() {\n    difference() {\n        // Door panel\n        translate([0, 0, 0])\n            cube([39, 1, 36]);\n            \n        // Handle cutout\n        translate([30, -0.5, 15])\n            cube([6, 2, 6]);\n    }\n    \n    // Door handle\n    translate([33, 0, 18])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=2.5, $fn=12);\n}\n\nmodule doors() {\n    translate([0.5, 40.5, 1])\n        door();\n    translate([40.5, 40.5, 1])\n        door();\n}\n\nmodule shelf() {\n    difference() {\n        translate([0, 0, 0])\n            cube([78, 38, 2]);\n        translate([1, 1, -0.1])\n            cube([76, 36, 2.2]);\n    }\n}\n\nmodule shelves() {\n    translate([1, 1, 13])\n        shelf();\n    translate([1, 1, 26])\n        shelf();\n}\n\nmodule back_panel() {\n    translate([-39.5, 1, 19])\n        rotate([0, 90, 0])\n            cube([38, 78, 2]);\n}\n\n// Assemble the credenza\nunion() {\n    legs();\n    translate([0, 0, leg_height])\n        body();\n    doors();\n    shelves();\n    translate([0, 39, leg_height])\n        back_panel();\n}",
    "renders": true
  },
  {
    "household_item": "ottoman",
    "openscad_code": "// Ottoman - Realistic style, medium complexity\n// 3D printable, ~70mm wide\n\n$fn = 32; // Smooth curves\n\nmodule leg() {\n    difference() {\n        cylinder(h = 15, d = 8); // Main leg\n        translate([0, 0, -1]) cylinder(h = 17, d = 6); // Hollow\n    }\n}\n\nmodule tufted_button() {\n    difference() {\n        sphere(d = 6); // Button\n        translate([0, 0, -3]) sphere(d = 3.5); // Indentation\n    }\n}\n\nmodule seam() {\n    rotate([90, 0, 0]) cylinder(h = 50, d = 0.8, $fn = 6); // Sewing seam\n}\n\n// Main body\ndifference() {\n    // Padded cube\n    minkowski() {\n        cube([60, 60, 20], center = true); // Core\n        sphere(d = 3); // Soft edges\n    }\n    \n    // Hollow interior\n    minkowski() {\n        cube([54, 54, 16], center = true);\n        sphere(d = 2);\n    }\n}\n\n// Legs - one at each corner\nfor (x = [-25, 25], y = [-25, 25]) {\n    translate([x, y, -7.5]) leg();\n}\n\n// Top surface details\ndifference() {\n    translate([0, 0, 11.5]) {\n        minkowski() {\n            cube([60, 60, 3], center = true);\n            sphere(d = 3);\n        }\n    }\n    \n    // Hollow top\n    minkowski() {\n        cube([54, 54, 3], center = true);\n        sphere(d = 2);\n    }\n}\n\n// Tufting buttons (4 buttons)\nfor (x = [-20, 20], y = [-20, 20]) {\n    translate([x, y, 13]) tufted_button();\n}\n\n// Decorative seams\n// Horizontal seams\nfor (y = [-20, 20]) {\n    translate([0, y, 13.5]) seam();\n}\n\n// Vertical seams\nfor (x = [-20, 20]) {\n    rotate([0, 0, 90]) translate([0, x, 13.5]) seam();\n}",
    "renders": true
  },
  {
    "household_item": "stool",
    "openscad_code": "// Realistic 3D-printable stool, medium complexity\n// Seat diameter ~60 mm, total height ~70 mm, wall 2 mm\n\n$fn = 36;              // Smooth curves\nwall = 2;              // 3D-print friendly wall thickness\nseat_d = 60;           // Seat diameter\nseat_h = 4;            // Seat thickness\nleg_d = 6;             // Leg outer diameter\nleg_h = 60;            // Leg height\nbrace_h = 10;          // Lower brace height from floor\nbrace_t = wall;        // Brace thickness\nfoot_d = 8;            // Foot diameter\nfoot_h = 2;            // Foot thickness\n\n// Seat with slight top-side radius\nmodule seat() {\n    difference() {\n        union() {\n            // Main seat disc\n            cylinder(d = seat_d, h = seat_h, center = false);\n            // Soft top fillet\n            translate([0, 0, seat_h])\n                cylinder(d1 = seat_d, d2 = seat_d - wall*2, h = 2, center = false);\n        }\n        // Central underside cavity to save material\n        translate([0, 0, -0.1])\n            cylinder(d = seat_d - wall*2, h = seat_h + 0.2, center = false);\n    }\n}\n\n// Single leg with pin for brace\nmodule leg() {\n    difference() {\n        // Leg tube\n        cylinder(d = leg_d, h = leg_h, center = false);\n        // Hollow\n        translate([0, 0, -0.1])\n            cylinder(d = leg_d - wall*2, h = leg_h + 0.2, center = false);\n    }\n    // Small collar for brace\n    translate([0, 0, brace_h])\n        cylinder(d = leg_d + wall, h = brace_t, center = false);\n}\n\n// Circular H-brace between legs (octagonal approximation)\nmodule brace() {\n    brace_r = (seat_d/2 - leg_d/2) * 0.9;   // Radius of brace circle\n    difference() {\n        // Outer ring\n        for(i=[0:45:315])\n            rotate([0, 0, i])\n                translate([brace_r, 0, 0])\n                    cube([brace_t*2, leg_d + wall, brace_t], center = true);\n        // Inner hole\n        cylinder(d = brace_r*1.2, h = brace_t + 0.2, center = false);\n    }\n}\n\n// Foot pad for stability and floor protection\nmodule foot() {\n    difference() {\n        // Foot disc\n        translate([0, 0, leg_h])\n            cylinder(d = foot_d, h = foot_h, center = false);\n        // Hollow\n        translate([0, 0, leg_h - 0.1])\n            cylinder(d = foot_d - wall*2, h = foot_h + 0.2, center = false);\n    }\n}\n\n// Assemble stool\nmodule stool() {\n    color(\"Tan\")\n        seat();\n\n    // Four legs with feet\n    for(a=[0:90:270]) {\n        color(\"SaddleBrown\")\n            rotate([0, 0, a])\n                translate([seat_d/2 - leg_d/2, 0, 0])\n                    leg();\n        color(\"SaddleBrown\")\n            rotate([0, 0, a])\n                translate([seat_d/2 - leg_d/2, 0, 0])\n                    foot();\n    }\n\n    // Lower brace ring\n    color(\"SaddleBrown\")\n        translate([0, 0, brace_h])\n            brace();\n}\n\n// Center model on build plate\ntranslate([0, 0, 0])\n    stool();",
    "renders": true
  },
  {
    "household_item": "bench",
    "openscad_code": "// Simple park bench, ~80 mm long\n// Optimized for 3D printing – all overhangs <45°, 2 mm walls\n\nmodule slat(len=12, wid=8, thick=2) {\n    // single wooden slat\n    cube([len, wid, thick], center=true);\n}\n\nmodule leg_support() {\n    // A-frame leg with printable angles\n    difference() {\n        union() {\n            // main A-frame\n            rotate([0, 0, 30]) cube([20, 2, 12], center=true);\n            rotate([0, 0, -30]) cube([20, 2, 12], center=true);\n            // bottom stretcher\n            translate([0, 0, -5]) cube([20, 2, 2], center=true);\n            // top cross-bar\n            translate([0, 0, 5]) cube([16, 2, 2], center=true);\n        }\n        // lightening cutouts\n        translate([5, 0, 0]) cube([10, 3, 10], center=true);\n        translate([-5, 0, 0]) cube([10, 3, 10], center=true);\n    }\n}\n\nmodule seat() {\n    // seven slats for seat\n    for (i=[-30:10:30])\n        translate([i, 0, 7])\n        slat(len=70, wid=8, thick=2);\n}\n\nmodule backrest() {\n    // five slats for back, tilted 10°\n    for (i=[-20:10:20]) {\n        translate([i, -6.5, 15])\n        rotate([10, 0, 0])\n        slat(len=60, wid=8, thick=2);\n    }\n}\n\nmodule armrest() {\n    // printable armrest with support\n    difference() {\n        union() {\n            // top plate\n            translate([0, -12, 11]) cube([14, 6, 2], center=true);\n            // vertical post\n            translate([0, -9, 5]) cube([4, 4, 8], center=true);\n            // 45° brace\n            rotate([0, 45, 0]) translate([0, -9, 2]) cube([10, 4, 2], center=true);\n        }\n        // lightening\n        translate([0, -12, 11]) cube([12, 4, 1], center=true);\n    }\n}\n\n// final assembly\ntranslate([0, 0, 5]) leg_support();\nmirror([1, 0, 0]) translate([0, 0, 5]) leg_support();\nseat();\nbackrest();\ntranslate([30, 0, 0]) armrest();\nmirror([1, 0, 0]) translate([30, 0, 0]) armrest();",
    "renders": true
  },
  {
    "household_item": "settee",
    "openscad_code": "// Realistic medium-complexity settee, ~70 mm long\n// Optimized for FDM printing (2 mm wall, no steep overhangs)\n\n$fa = 2; $fs = 0.5;\n\nmodule rounded_box(w,l,h,r){\n    // Helper for slightly rounded edges\n    hull() for(dx=[r,w-r], dy=[r,l-r], dz=[0,h]){\n        translate([dx,dy,dz]) sphere(r);\n    }\n}\n\nmodule leg(){\n    // Tapered square leg with 45° chamfers\n    difference(){\n        rounded_box(6,6,24,1);\n        translate([0,0,-1]) cube([4,4,26], center=true);\n    }\n}\n\nmodule back_post(){\n    // Vertical post in back-rest frame\n    rotate([90,0,0]) cylinder(h=35, d1=4, d2=3);\n}\n\nmodule arm_rest(){\n    // Curved arm rest\n    hull(){\n        translate([0,0,0]) sphere(3);\n        translate([0,22,0]) sphere(3);\n        translate([0,22,2]) sphere(3);\n        translate([0,0,2]) sphere(3);\n    }\n}\n\nmodule seat_cushion(){\n    // Slightly puffy cushion\n    difference(){\n        minkowski(){\n            cube([52,28,6], center=true);\n            sphere(1);\n        }\n        translate([0,0,3]) cube([54,30,4], center=true);\n    }\n}\n\nmodule back_panel(){\n    // Slatted back-rest\n    for(i=[-20:10:20]) translate([i,0,0])\n        cube([8,3,24], center=true);\n}\n\n// Assembly\nunion(){\n    // Seat frame\n    translate([0,0,12])\n        rounded_box(60,34,4,2);\n\n    // Seat cushion\n    translate([0,0,16])\n        seat_cushion();\n\n    // Back-rest\n    translate([0,-16,28])\n        back_panel();\n\n    // Back posts\n    for(x=[-24,24])\n        translate([x,-16,0]) back_post();\n\n    // Arms\n    for(side=[-1,1]){\n        translate([27*side,0,18])\n            rotate([0,0,90*side]) arm_rest();\n    }\n\n    // Legs\n    for(x=[-22,22], y=[-11,11])\n        translate([x,y,0]) leg();\n}",
    "renders": true
  },
  {
    "household_item": "futon",
    "openscad_code": "// Realistic 3D printable futon at 1:20 scale (~80 mm long)\n// Overall dimensions: 80 mm long x 52 mm deep x 26 mm high\n\n// Parameters\n$fn = 32;\nframe_w = 4;          // wall thickness for printability\nleg_d = 5;            // leg diameter\nmattress_h = 8;       // mattress thickness\nback_h = 20;          // backrest height\nseat_d = 26;          // seat depth\ntotal_l = 80;         // total length\ntotal_w = 52;         // total width\n\n// Main assembly\nmodule futon() {\n    // Lower frame (base)\n    translate([0, 0, leg_d]) base_frame();\n\n    // Backrest frame\n    translate([0, 0, leg_d]) back_frame();\n\n    // Mattress\n    translate([0, seat_d/2, leg_d + frame_w]) mattress();\n\n    // Legs\n    legs();\n}\n\n// Base rectangular frame\nmodule base_frame() {\n    difference() {\n        // Outer box\n        cube([total_l, total_w, frame_w], center = true);\n\n        // Carve out cavity (leave walls)\n        translate([0, 0, -0.1])\n            cube([total_l - 2*frame_w, total_w - 2*frame_w, frame_w + 0.2], center = true);\n    }\n}\n\n// Backrest frame\nmodule back_frame() {\n    rotate([90, 0, 0])\n    translate([0, 0, -back_h/2])\n    difference() {\n        // Outer box\n        cube([total_l, back_h, frame_w], center = true);\n\n        // Carve out cavity (leave walls)\n        translate([0, 0, -0.1])\n            cube([total_l - 2*frame_w, back_h - 2*frame_w, frame_w + 0.2], center = true);\n    }\n}\n\n// Quilted mattress\nmodule mattress() {\n    difference() {\n        // Main foam block\n        translate([0, 0, mattress_h/2])\n            cube([total_l - 2*frame_w, total_w - 2*frame_w, mattress_h], center = true);\n\n        // Remove quilting grooves\n        for (x = [-30:10:30])\n            for (y = [-20:10:20])\n                translate([x, y, -0.1])\n                    cube([8, 8, mattress_h + 0.2], center = true);\n    }\n}\n\n// Four cylindrical legs\nmodule legs() {\n    for (x = [-total_l/2 + 10, total_l/2 - 10])\n        for (y = [-total_w/2 + 10, total_w/2 - 10])\n            translate([x, y, leg_d/2])\n                cylinder(h = leg_d, d = leg_d, center = true);\n}\n\n// Render\nfuton();",
    "renders": true
  },
  {
    "household_item": "bunkbed",
    "openscad_code": "// Bunkbed - realistic style, medium complexity\n// Designed for 3D printing, no supports needed\n\n// Overall dimensions\nbed_length = 80;\nbed_width = 45;\nbed_height = 55;\npost_size = 4;\nmattress_thickness = 5;\nrail_height = 8;\n\n// Materials\nwall_thickness = 2;\n\nmodule post() {\n    // Vertical posts with rounded tops\n    difference() {\n        cylinder(h = bed_height * 2 + mattress_thickness * 2, r = post_size/2, $fn=16);\n        translate([0, 0, bed_height * 2 + mattress_thickness * 2 - 2])\n            cylinder(h = 2, r = post_size/2 - wall_thickness, $fn=16);\n    }\n}\n\nmodule frame() {\n    // Bed frame structure\n    hull() {\n        translate([-bed_length/2 + wall_thickness, -bed_width/2 + wall_thickness, 0])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness]);\n        translate([bed_length/2 - wall_thickness, -bed_width/2 + wall_thickness, 0])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness]);\n        translate([-bed_length/2 + wall_thickness, bed_width/2 - wall_thickness, 0])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness]);\n        translate([bed_length/2 - wall_thickness, bed_width/2 - wall_thickness, 0])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness]);\n    }\n}\n\nmodule slats() {\n    // Mattress support slats\n    for(i = [-bed_length/2 + 10 : 5 : bed_length/2 - 10]) {\n        translate([i, 0, wall_thickness/2])\n            cube([wall_thickness, bed_width - wall_thickness*2, wall_thickness]);\n    }\n}\n\nmodule mattress() {\n    // Realistic mattress with rounded edges\n    difference() {\n        translate([0, 0, mattress_thickness/2])\n            cube([bed_length - wall_thickness*2, bed_width - wall_thickness*2, mattress_thickness], center=true);\n        // Rounded top edges\n        translate([0, 0, mattress_thickness])\n            minkowski() {\n                cube([bed_length - wall_thickness*2 - 2, bed_width - wall_thickness*2 - 2, 0.1], center=true);\n                cylinder(h=0.1, r=1, $fn=16);\n            }\n    }\n}\n\nmodule ladder() {\n    // Side ladder\n    translate([bed_length/2 - 2, 0, 0])\n    union() {\n        // Vertical rails\n        translate([0, -bed_width/4, 0])\n            cube([wall_thickness, wall_thickness, bed_height * 2 + mattress_thickness * 2]);\n        translate([0, bed_width/4, 0])\n            cube([wall_thickness, wall_thickness, bed_height * 2 + mattress_thickness * 2]);\n        \n        // Rungs\n        for(i = [1:4]) {\n            translate([-3, 0, i * (bed_height/2)])\n                cube([6, bed_width/2 - wall_thickness, wall_thickness]);\n        }\n    }\n}\n\nmodule safety_rail() {\n    // Safety rail for top bunk\n    translate([0, 0, bed_height + mattress_thickness + rail_height/2])\n    difference() {\n        cube([bed_length - wall_thickness*2, wall_thickness, rail_height], center=true);\n        // Spacing for bars\n        for(i = [-bed_length/2 + 5 : 5 : bed_length/2 - 5]) {\n            translate([i, 0, 0])\n                cube([wall_thickness, wall_thickness + 0.1, rail_height], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Bottom bunk\n    translate([0, 0, 0]) {\n        frame();\n        slats();\n        translate([0, 0, wall_thickness + mattress_thickness/2])\n            mattress();\n    }\n    \n    // Top bunk\n    translate([0, 0, bed_height + mattress_thickness]) {\n        frame();\n        slats();\n        translate([0, 0, wall_thickness + mattress_thickness/2])\n            mattress();\n    }\n    \n    // Posts at corners\n    translate([-bed_length/2 + post_size/2, -bed_width/2 + post_size/2, 0])\n        post();\n    translate([bed_length/2 - post_size/2, -bed_width/2 + post_size/2, 0])\n        post();\n    translate([-bed_length/2 + post_size/2, bed_width/2 - post_size/2, 0])\n        post();\n    translate([bed_length/2 - post_size/2, bed_width/2 - post_size/2, 0])\n        post();\n    \n    // Ladder on side\n    ladder();\n    \n    // Safety rail for top bunk (front side)\n    translate([0, bed_width/2 - wall_thickness/2, 0])\n        safety_rail();\n}",
    "renders": true
  },
  {
    "household_item": "divan",
    "openscad_code": "// OpenSCAD Divan Model - Realistic Medium Complexity\n\n// Overall dimensions (mm)\ndivan_length = 80;\ndivan_width = 35;\ndivan_height = 25;\nmattress_thickness = 5;\nleg_height = 4;\nbackrest_height = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule divan_base() {\n    // Main frame\n    difference() {\n        cube([divan_length, divan_width, divan_height], center=true);\n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([divan_length-wall_thickness*2, divan_width-wall_thickness*2, divan_height-wall_thickness], center=true);\n    }\n}\n\nmodule legs() {\n    // Four legs at corners\n    leg_positions = [\n        [-divan_length/2+3, -divan_width/2+3, 0],\n        [divan_length/2-3, -divan_width/2+3, 0],\n        [-divan_length/2+3, divan_width/2-3, 0],\n        [divan_length/2-3, divan_width/2-3, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        translate(pos)\n            cylinder(h=leg_height, r=2, center=true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest\n    translate([0, -divan_width/2+wall_thickness/2, divan_height/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=divan_length-wall_thickness*2, r=backrest_height, center=true);\n        // Hollow interior\n        cylinder(h=divan_length-wall_thickness*2+0.1, r=backrest_height-wall_thickness, center=true);\n    }\n}\n\nmodule mattress() {\n    // Soft mattress with rounded edges\n    translate([0, 0, divan_height/2+mattress_thickness/2])\n    difference() {\n        // Main mattress body\n        minkowski() {\n            cube([divan_length-wall_thickness*2, divan_width-wall_thickness*2, mattress_thickness], center=true);\n            sphere(r=1);\n        }\n        \n        // Remove bottom sphere for flat base\n        translate([0, 0, -mattress_thickness/2-1])\n            cube([divan_length*2, divan_width*2, 2], center=true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-divan_length/2+wall_thickness, 0, divan_height/2+mattress_thickness/2])\n    difference() {\n        cube([wall_thickness*3, divan_width/2, backrest_height*0.8], center=true);\n        translate([0, 0, -backrest_height*0.4+wall_thickness/2])\n            cube([wall_thickness*3-wall_thickness, divan_width/2-wall_thickness, backrest_height*0.8-wall_thickness], center=true);\n    }\n    \n    // Right armrest\n    translate([divan_length/2-wall_thickness, 0, divan_height/2+mattress_thickness/2])\n    difference() {\n        cube([wall_thickness*3, divan_width/2, backrest_height*0.8], center=true);\n        translate([0, 0, -backrest_height*0.4+wall_thickness/2])\n            cube([wall_thickness*3-wall_thickness, divan_width/2-wall_thickness, backrest_height*0.8-wall_thickness], center=true);\n    }\n}\n\nmodule cushions() {\n    // Two cushions on top\n    cushion_positions = [\n        [-divan_length/4, 0, divan_height/2+mattress_thickness+1.5],\n        [divan_length/4, 0, divan_height/2+mattress_thickness+1.5]\n    ];\n    \n    for(pos = cushion_positions) {\n        translate(pos)\n        scale([1, 0.8, 0.6])\n        minkowski() {\n            cube([15, 10, 5], center=true);\n            sphere(r=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    divan_base();\n    translate([0, 0, -divan_height/2-leg_height/2])\n        legs();\n    backrest();\n    mattress();\n    armrests();\n    cushions();\n}",
    "renders": true
  },
  {
    "household_item": "headboard",
    "openscad_code": "// Realistic Headboard - Medium Complexity\n// 100mm wide x 60mm tall x 10mm deep\n\n// Main headboard panel with rounded edges\nmodule headboard_panel() {\n    // Main board\n    difference() {\n        // Rounded front face\n        hull() {\n            translate([0, 0, 0]) sphere(r=2, $fn=20);\n            translate([100, 0, 0]) sphere(r=2, $fn=20);\n            translate([0, 60, 0]) sphere(r=2, $fn=20);\n            translate([100, 60, 0]) sphere(r=2, $fn=20);\n            translate([0, 0, 10]) sphere(r=2, $fn=20);\n            translate([100, 0, 10]) sphere(r=2, $fn=20);\n            translate([0, 60, 10]) sphere(r=2, $fn=20);\n            translate([100, 60, 10]) sphere(r=2, $fn=20);\n        }\n        \n        // Recessed center\n        translate([5, 5, 8]) cube([90, 50, 5]);\n    }\n}\n\n// Vertical slats\nmodule slat(x_pos) {\n    difference() {\n        // Main slat body\n        translate([x_pos, 0, 0]) cube([6, 60, 6]);\n        \n        // Top rounded\n        translate([x_pos, -1, 3]) cylinder(h=8, r1=3, r2=3, $fn=16);\n        \n        // Bottom rounded\n        translate([x_pos, 61, 3]) cylinder(h=8, r1=3, r2=3, $fn=16);\n    }\n}\n\n// Horizontal support bar\nmodule support_bar() {\n    difference() {\n        // Main bar\n        translate([0, 25, 0]) cube([100, 8, 8]);\n        \n        // Rounded edges\n        for(i = [0:100:100]) {\n            translate([i, 25, 4]) rotate([90, 0, 0]) cylinder(h=8, r1=4, r2=4, $fn=12);\n            translate([i, 33, 4]) rotate([90, 0, 0]) cylinder(h=8, r1=4, r2=4, $fn=12);\n        }\n    }\n}\n\n// Decorative molding\nmodule top_molding() {\n    difference() {\n        // Main molding\n        hull() {\n            translate([0, 60, 5]) sphere(r=2, $fn=12);\n            translate([100, 60, 5]) sphere(r=2, $fn=12);\n            translate([0, 65, 5]) sphere(r=3, $fn=12);\n            translate([100, 65, 5]) sphere(r=3, $fn=12);\n        }\n        \n        // Cut bottom flat\n        translate([0, 60, -1]) cube([100, 10, 7]);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(x = [10, 90]) {\n        for(y = [15, 45]) {\n            translate([x, y, 5]) rotate([90, 0, 0]) cylinder(h=10, r1=2, r2=2, $fn=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main panel\n    headboard_panel();\n    \n    // Vertical slats\n    for(x = [15:20:85]) {\n        slat(x);\n    }\n    \n    // Support bar\n    support_bar();\n    \n    // Top molding\n    top_molding();\n    \n    // Mounting holes (for screws)\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "household_item": "footboard",
    "openscad_code": "// Footboard – realistic style, medium complexity\n// External dims: 80 x 45 x 25 mm (printable on most FDM printers)\n\n$fn = 36;           // Smooth curves\n\n// Main panel\nmodule main_panel() {\n    difference() {\n        // Slab with soft-rounded top edges\n        minkowski() {\n            cube([78, 43, 15], center = true);\n            cylinder(h = 0.1, r = 2);   // rounded edges\n        }\n        // Recessed area for mattress support\n        translate([0, 0, 6])\n            cube([74, 39, 10], center = true);\n    }\n}\n\n// Vertical posts\nmodule post() {\n    difference() {\n        // Post body\n        cylinder(h = 25, r = 4);\n        // Lightening hole to save material\n        cylinder(h = 27, r = 2);\n    }\n}\n\n// Caps for posts (ball finials)\nmodule cap() {\n    sphere(d = 8);\n}\n\n// Horizontal rail between posts\nmodule rail() {\n    hull() {\n        translate([-28, 0, 12]) cylinder(h = 1, r = 3);\n        translate([ 28, 0, 12]) cylinder(h = 1, r = 3);\n    }\n}\n\n// Decorative beading along top edge\nmodule bead_row() {\n    for (i = [-3:1:3]) {\n        translate([i * 11, 0, 8])\n            sphere(d = 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Center panel\n    main_panel();\n\n    // Left post\n    translate([-30, 0, 0]) {\n        post();\n        translate([0, 0, 27]) cap();\n    }\n\n    // Right post\n    translate([30, 0, 0]) {\n        post();\n        translate([0, 0, 27]) cap();\n    }\n\n    // Connecting rail\n    rail();\n\n    // Beading\n    bead_row();\n}",
    "renders": true
  },
  {
    "household_item": "nightstand",
    "openscad_code": "// Nightstand - Realistic Style, Medium Complexity\n// Approximate size: 70mm W x 60mm D x 75mm H\n\n$fn=32;\n\n// Main body dimensions\nbody_w = 65;\nbody_d = 55;\nbody_h = 65;\nwall_t = 3;\n\n// Drawer dimensions\ndrawer_w = body_w - 2*wall_t;\ndrawer_d = body_d - wall_t;\ndrawer_h = 15;\ndrawer_gap = 1;\n\n// Top dimensions\ntop_w = body_w + 6;\ntop_d = body_d + 6;\ntop_t = 4;\n\n// Leg dimensions\nleg_w = 6;\nleg_h = 10;\n\n// Handle dimensions\nhandle_w = 20;\nhandle_h = 8;\nhandle_d = 3;\n\nmodule nightstand() {\n    union() {\n        // Top surface with rounded edges\n        translate([0, 0, body_h + leg_h]) {\n            difference() {\n                // Main top block\n                cube([top_w, top_d, top_t], center=true);\n                \n                // Round the top edges slightly\n                translate([0, 0, top_t/2 - 1]) {\n                    minkowski() {\n                        cube([top_w - 2, top_d - 2, 0.1], center=true);\n                        cylinder(h=0.1, r=1);\n                    }\n                }\n            }\n        }\n        \n        // Main body\n        translate([0, 0, leg_h + body_h/2]) {\n            difference() {\n                // Outer shell\n                cube([body_w, body_d, body_h], center=true);\n                \n                // Hollow interior\n                cube([body_w - 2*wall_t, body_d - 2*wall_t, body_h - wall_t], center=true);\n            }\n        }\n        \n        // Drawers\n        for(i = [0:1]) {\n            translate([0, 0, leg_h + wall_t + i*(drawer_h + drawer_gap) + drawer_h/2]) {\n                // Drawer box\n                difference() {\n                    // Main drawer\n                    cube([drawer_w, drawer_d - 2, drawer_h], center=true);\n                    \n                    // Hollow interior\n                    cube([drawer_w - 2*wall_t, drawer_d - wall_t - 2, drawer_h - wall_t], center=true);\n                }\n                \n                // Drawer front\n                translate([0, drawer_d/2 - 1, 0]) {\n                    cube([drawer_w, wall_t + 1, drawer_h], center=true);\n                    \n                    // Handle\n                    translate([0, wall_t/2 + 1, 0]) {\n                        difference() {\n                            // Handle base\n                            cube([handle_w + 4, handle_d + 2, handle_h/2], center=true);\n                            \n                            // Handle grip space\n                            translate([0, -1, 0]) {\n                                cube([handle_w, handle_d + 4, handle_h], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*(body_w/2 - leg_w/2), y*(body_d/2 - leg_w/2), leg_h/2]) {\n                    cylinder(h=leg_h, r=leg_w/2);\n                }\n            }\n        }\n        \n        // Back panel\n        translate([0, body_d/2 - wall_t/2, leg_h + body_h/2]) {\n            cube([body_w - 2*wall_t, wall_t, body_h - wall_t], center=true);\n        }\n    }\n}\n\n// Render the nightstand\nnightstand();",
    "renders": true
  },
  {
    "household_item": "armchair",
    "openscad_code": "// Armchair - realistic medium complexity\n\n// Overall dimensions\nchair_width = 60;\nchair_depth = 55;\nchair_height = 65;\nseat_height = 25;\narmrest_height = 35;\nbackrest_height = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chair_base() {\n    // Main seat platform\n    difference() {\n        cube([chair_width, chair_depth, seat_height], center=true);\n        translate([0, 0, wall])\n            cube([chair_width-wall*2, chair_depth-wall*2, seat_height], center=true);\n    }\n    \n    // Front legs\n    for(x = [-chair_width/2+5, chair_width/2-5]) {\n        translate([x, chair_depth/2-3, 0])\n            cylinder(h=seat_height-wall, r=3, center=false);\n    }\n    \n    // Back legs\n    for(x = [-chair_width/2+5, chair_width/2-5]) {\n        translate([x, -chair_depth/2+3, 0])\n            cylinder(h=seat_height-wall, r=3, center=false);\n    }\n}\n\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        translate([0, -chair_depth/2+wall/2, seat_height+backrest_height/2])\n            cube([chair_width-wall*4, wall, backrest_height], center=true);\n        // Backrest cutouts for style\n        for(i = [-1:1]) {\n            translate([i*15, -chair_depth/2+wall/2, seat_height+backrest_height/2])\n                cube([8, wall+1, backrest_height-10], center=true);\n        }\n    }\n    \n    // Backrest posts\n    for(x = [-chair_width/2+5, chair_width/2-5]) {\n        translate([x, -chair_depth/2+3, seat_height-wall/2])\n            cylinder(h=backrest_height+wall, r=3, center=false);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2, 0, seat_height+armrest_height/2-seat_height/2])\n    union() {\n        // Vertical support\n        difference() {\n            cube([wall*3, chair_depth/3, armrest_height-seat_height/2], center=true);\n            translate([0, 0, wall])\n                cube([wall, chair_depth/3-wall, armrest_height-seat_height/2-wall*2], center=true);\n        }\n        \n        // Horizontal armrest\n        translate([0, chair_depth/6, armrest_height/2-seat_height/4])\n            cube([wall*8, wall*3, wall*3], center=true);\n    }\n    \n    // Right armrest (mirrored)\n    mirror([1,0,0])\n    translate([-chair_width/2, 0, seat_height+armrest_height/2-seat_height/2])\n    union() {\n        difference() {\n            cube([wall*3, chair_depth/3, armrest_height-seat_height/2], center=true);\n            translate([0, 0, wall])\n                cube([wall, chair_depth/3-wall, armrest_height-seat_height/2-wall*2], center=true);\n        }\n        \n        translate([0, chair_depth/6, armrest_height/2-seat_height/4])\n            cube([wall*8, wall*3, wall*3], center=true);\n    }\n}\n\nmodule seat_cushion() {\n    // Cushion base\n    translate([0, 0, seat_height+wall/2])\n    difference() {\n        cube([chair_width-wall*4, chair_depth-wall*4, wall*2], center=true);\n        translate([0, 0, -wall/2])\n            cube([chair_width-wall*6, chair_depth-wall*6, wall*3], center=true);\n    }\n    \n    // Cushion top rounding\n    translate([0, 0, seat_height+wall*1.5])\n    scale([1, 1, 0.5])\n    sphere(d=chair_width-wall*4);\n}\n\nmodule back_cushion() {\n    // Back cushion\n    translate([0, -chair_depth/2+wall*3, seat_height+backrest_height/2])\n    difference() {\n        cube([chair_width-wall*6, wall*4, backrest_height-wall*2], center=true);\n        translate([0, 0, -wall])\n            cube([chair_width-wall*8, wall*4+1, backrest_height-wall*4], center=true);\n    }\n    \n    // Cushion rounding\n    translate([0, -chair_depth/2+wall*3, seat_height+backrest_height/2])\n    scale([1, 0.3, 1])\n    sphere(d=backrest_height-wall*2);\n}\n\n// Assemble the chair\nunion() {\n    chair_base();\n    backrest();\n    armrests();\n    seat_cushion();\n    back_cushion();\n}",
    "renders": true
  },
  {
    "household_item": "rocker",
    "openscad_code": "// Realistic-style 3D-printable rocking chair\n// Overall size: ~80 mm tall, 60 mm deep, 60 mm wide\n// All walls >= 1.5 mm for FDM printing\n\n// Parameters\n$fn = 30;\nchair_width = 60;\nseat_depth = 50;\nseat_thickness = 3;\nback_height = 40;\nleg_thickness = 4;\nrocker_radius = 80;\nrocker_thickness = 4;\nrocker_width = 6;\n\n// --- Seat panel ---\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, seat_thickness/2])\n            cube([chair_width, seat_depth, seat_thickness], center=true);\n\n        // Lightening holes (saves material & print time)\n        for (x = [-20, 0, 20])\n            for (y = [-15, 0, 15])\n                translate([x, y, seat_thickness/2])\n                    cylinder(h=seat_thickness+1, r=4, center=true);\n    }\n}\n\n// --- Backrest ---\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2+2, back_height/2+seat_thickness])\n            cube([chair_width-6, 4, back_height], center=true);\n\n        // Horizontal slats\n        for (h = [15:10:back_height-10])\n            translate([0, -seat_depth/2, seat_thickness+h])\n                cube([chair_width-10, 8, 2], center=true);\n    }\n}\n\n// --- Leg ---\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n        rotate([0, angle, 0])\n            cube([leg_thickness, leg_thickness, seat_thickness+rocker_radius*0.6], center=true);\n}\n\n// --- Rockers ---\nmodule rocker(side) {\n    translate([0, side*(seat_depth/2 - rocker_width/2), rocker_radius])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer rocker arc\n        rotate_extrude(angle=45, $fn=60)\n            translate([rocker_radius, 0, 0])\n                square([rocker_thickness, rocker_width], center=true);\n\n        // Inner hollow to save material\n        rotate_extrude(angle=45, $fn=60)\n            translate([rocker_radius+rocker_thickness-2, 0, 0])\n                square([rocker_thickness-2, rocker_width-2], center=true);\n    }\n}\n\n// --- Assembly ---\nunion() {\n    // Seat\n    seat();\n\n    // Backrest\n    backrest();\n\n    // Legs (angled for stability)\n    leg( chair_width/2-3,  seat_depth/2-3, 15);\n    leg(-chair_width/2+3,  seat_depth/2-3, 15);\n    leg( chair_width/2-3, -seat_depth/2+3, -15);\n    leg(-chair_width/2+3, -seat_depth/2+3, -15);\n\n    // Rockers\n    rocker(1);\n    rocker(-1);\n}",
    "renders": true
  },
  {
    "household_item": "recliner",
    "openscad_code": "// Realistic 3D-printable recliner, medium complexity\n// Dimensions fit within 100 mm print volume\n// All overhangs ≤ 45°, wall thickness ≥ 2 mm\n\n$fn = 24;\n\n// Overall dimensions\nrecliner_length = 90;   // back to footrest\nrecliner_width  = 50;\nrecliner_height = 65;\n\n// Wall thickness for 3D printing\nwall = 2.5;\n\nmodule frame_base() {\n    // Seat frame rails\n    color(\"DimGray\")\n    difference() {\n        // Left rail\n        translate([-recliner_width/2 + wall, 0, 0])\n            cube([wall, recliner_length*0.5, recliner_height*0.4]);\n        // Hollow out\n        translate([-recliner_width/2 + wall*2, 2, 2])\n            cube([wall-1, recliner_length*0.5-4, recliner_height*0.4-4]);\n        \n        // Right rail\n        translate([recliner_width/2 - wall*2, 0, 0])\n            cube([wall, recliner_length*0.5, recliner_height*0.4]);\n        // Hollow out\n        translate([recliner_width/2 - wall*2 + 1, 2, 2])\n            cube([wall-1, recliner_length*0.5-4, recliner_height*0.4-4]);\n    }\n}\n\nmodule seat_cushion() {\n    // Seat pad\n    color(\"SaddleBrown\")\n    difference() {\n        translate([0, recliner_length*0.15, recliner_height*0.35])\n            cube([recliner_width - 2*wall, recliner_length*0.3, 8], center=true);\n        // Cushion contour\n        translate([0, recliner_length*0.15, recliner_height*0.35+4])\n            cube([recliner_width - 2*wall - 4, recliner_length*0.3 - 4, 8], center=true);\n    }\n}\n\nmodule backrest() {\n    // Backrest frame\n    color(\"DimGray\")\n    union() {\n        // Left post\n        translate([-recliner_width/2 + wall*2, -recliner_length*0.25, recliner_height*0.35])\n            rotate([20,0,0])\n            cube([wall, 25, recliner_height*0.5]);\n        // Right post\n        translate([recliner_width/2 - wall*3, -recliner_length*0.25, recliner_height*0.35])\n            rotate([20,0,0])\n            cube([wall, 25, recliner_height*0.5]);\n    }\n    \n    // Backrest cushion\n    color(\"SaddleBrown\")\n    difference() {\n        translate([0, -recliner_length*0.25, recliner_height*0.65])\n            rotate([20,0,0])\n            cube([recliner_width - 2*wall, 25, 10], center=true);\n        // Contour\n        translate([0, -recliner_length*0.25, recliner_height*0.65+5])\n            rotate([20,0,0])\n            cube([recliner_width - 2*wall - 4, 21, 8], center=true);\n    }\n}\n\nmodule footrest() {\n    // Footrest frame\n    color(\"DimGray\")\n    union() {\n        // Left support\n        translate([-recliner_width/2 + wall*3, recliner_length*0.35, recliner_height*0.05])\n            rotate([30,0,0])\n            cube([wall, 15, 15]);\n        // Right support\n        translate([recliner_width/2 - wall*4, recliner_length*0.35, recliner_height*0.05])\n            rotate([30,0,0])\n            cube([wall, 15, 15]);\n    }\n    \n    // Footrest pad\n    color(\"SaddleBrown\")\n    translate([0, recliner_length*0.45, recliner_height*0.05])\n        rotate([30,0,0])\n        cube([recliner_width - 2*wall - 4, 15, 5], center=true);\n}\n\nmodule armrest(side) {\n    // Armrest frame\n    color(\"DimGray\")\n    translate([side * (recliner_width/2 - wall), recliner_length*0.05, recliner_height*0.45])\n        cube([wall*1.5, recliner_length*0.25, 10]);\n    \n    // Armrest pad\n    color(\"SaddleBrown\")\n    translate([side * (recliner_width/2 - wall*0.75), recliner_length*0.05 + 2, recliner_height*0.45 + 10])\n        cube([wall*1.5, recliner_length*0.25 - 4, 3], center=true);\n}\n\nmodule legs() {\n    // Four legs, 45° chamfers for printability\n    for(x=[-1,1], y=[-1,1]) {\n        color(\"DimGray\")\n        translate([x*(recliner_width/2 - wall - 5), y*(recliner_length*0.25 - 5), 0])\n            cylinder(h=15, r1=3, r2=2, $fn=8);\n    }\n}\n\n// Assemble recliner\nunion() {\n    frame_base();\n    seat_cushion();\n    backrest();\n    footrest();\n    armrest(-1);  // Left\n    armrest(1);   // Right\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "chaise",
    "openscad_code": "// Realistic OpenSCAD chaise (medium complexity)\n// Approx. 80 mm long, 3 mm wall thickness, printable without supports\n\n$fn = 32;               // Smooth curves\nwall = 3;               // 3 mm printable walls\n\n// Main seat frame\nmodule seat_frame() {\n    // Base platform\n    difference() {\n        translate([0, 0, -wall/2])\n            cube([70, 30, wall], center=true);\n        translate([0, 0, -wall])\n            cube([66, 26, wall*2], center=true);\n    }\n    \n    // Backrest slope\n    rotate([10, 0, 0])\n    translate([0, 0, 15])\n    difference() {\n        cube([70, 30, 30], center=true);\n        translate([0, 0, 15])\n            cube([66, 26, 30], center=true);\n    }\n}\n\n// Cushion profile\nmodule cushion(width, depth, height, fillet=2) {\n    difference() {\n        // Main cushion\n        translate([0, 0, height/2])\n            cube([width, depth, height], center=true);\n        \n        // Rounded edges via subtraction\n        for(dx = [-width/2+fillet, width/2-fillet])\n        for(dy = [-depth/2+fillet, depth/2-fillet])\n            translate([dx, dy, -fillet])\n                cylinder(h=height+fillet*2, r=fillet, center=true);\n    }\n}\n\n// Single cylindrical leg\nmodule leg(h) {\n    difference() {\n        cylinder(h=h, r=4);\n        translate([0, 0, -1])\n            cylinder(h=h+2, r=2.5);\n    }\n}\n\n// Four-leg support assembly\nmodule legs() {\n    positions = [[-30, -12], [30, -12], [-30, 12], [30, 12]];\n    for(p = positions) {\n        translate([p[0], p[1], -15])\n            leg(15);\n    }\n}\n\n// Decorative piping along cushion edges\nmodule piping(length, offset, z) {\n    translate([offset, 0, z])\n    rotate([0, 90, 0])\n    for(i = [0:2:length-2])\n        translate([i-length/2, 0, 0])\n            sphere(d=1.5);\n}\n\n// Assembly\nunion() {\n    // Frame\n    seat_frame();\n    \n    // Seat cushion\n    translate([0, 0, 3])\n        cushion(64, 26, 6);\n    \n    // Back cushion\n    rotate([10, 0, 0])\n    translate([0, 0, 18])\n        cushion(64, 26, 8);\n    \n    // Piping on seat\n    piping(64, -13, 6);\n    piping(64,  13, 6);\n    piping(26, -32, 6);\n    piping(26,  32, 6);\n    \n    // Piping on back\n    piping(64, -13, 18);\n    piping(64,  13, 18);\n    piping(26, -32, 18);\n    piping(26,  32, 18);\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "loveseat",
    "openscad_code": "// Loveseat - Realistic style, medium complexity\n// Designed for 3D printing, scaled to ~80mm width\n\n$fn = 32;\n\n// Overall dimensions\nseat_width = 80;\nseat_depth = 40;\nseat_height = 15;\nback_height = 35;\narm_width = 8;\narm_height = 25;\nleg_height = 12;\nleg_size = 3;\n\nmodule loveseat() {\n    // Seat cushion\n    translate([0, 0, leg_height + seat_height/2])\n        cube([seat_width, seat_depth, seat_height], center=true);\n    \n    // Back cushion\n    translate([0, -seat_depth/2 + 2, leg_height + seat_height + back_height/2 - 3])\n        cube([seat_width - 4, seat_depth/3, back_height], center=true);\n    \n    // Left armrest\n    translate([-seat_width/2 - arm_width/2, 0, leg_height + arm_height/2])\n        cube([arm_width, seat_depth + 4, arm_height], center=true);\n    \n    // Right armrest\n    translate([seat_width/2 + arm_width/2, 0, leg_height + arm_height/2])\n        cube([arm_width, seat_depth + 4, arm_height], center=true);\n    \n    // Back support panel\n    translate([0, -seat_depth/2 + arm_width/2, leg_height + seat_height + back_height/2 - 8])\n        cube([seat_width, arm_width, back_height - 5], center=true);\n    \n    // Legs\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (seat_width/2 - leg_size), y * (seat_depth/2 - leg_size), leg_height/2])\n            cylinder(h=leg_height, r=leg_size/2, center=true);\n    }\n    \n    // Decorative horizontal bars on back\n    for(i = [-2:1:2]) {\n        translate([i * 12, -seat_depth/2 + arm_width/2 + 2, leg_height + seat_height + back_height/2 - 15])\n            cube([seat_width/6, arm_width - 1, 3], center=true);\n    }\n    \n    // Armrest top cushions\n    translate([-seat_width/2 - arm_width/2, 0, leg_height + arm_height - 2])\n        cube([arm_width, seat_depth + 4, 4], center=true);\n    \n    translate([seat_width/2 + arm_width/2, 0, leg_height + arm_height - 2])\n        cube([arm_width, seat_depth + 4, 4], center=true);\n    \n    // Seat cushion details - vertical grooves\n    for(i = [-3:1:3]) {\n        translate([i * 10, 0, leg_height + seat_height + 0.5])\n            cube([2, seat_depth - 4, seat_height - 1], center=true);\n    }\n}\n\nloveseat();",
    "renders": true
  },
  {
    "household_item": "sectional",
    "openscad_code": "// Realistic 3D printable sectional sofa\n// Overall footprint ~70 x 45 mm, seat height ~15 mm\n\n// Overall dimensions\nsofa_len = 70;   // total length\nsofa_wid = 45;   // total depth\nsofa_hgt = 25;   // total height\n\nmodule roundedCube(size, r, center=false) {\n    // Build a box with rounded edges (no overhangs)\n    translate([r, r, 0]) cube([size.x - 2*r, size.y - 2*r, size.z]);\n    translate([r, 0, r]) cube([size.x - 2*r, size.y, size.z - 2*r]);\n    translate([0, r, r]) cube([size.x, size.y - 2*r, size.z - 2*r]);\n    for(dx = [r, size.x - r], dy = [r, size.y - r]) {\n        translate([dx, dy, 0]) cylinder(r=r, h=size.z);\n    }\n    for(dx = [r, size.x - r], dz = [r, size.z - r]) {\n        translate([dx, 0, dz]) rotate([0,90,0]) cylinder(r=r, h=size.y);\n    }\n    for(dy = [r, size.y - r], dz = [r, size.z - r]) {\n        translate([0, dy, dz]) rotate([-90,0,0]) cylinder(r=r, h=size.x);\n    }\n    sphere(r=r);\n    translate([size.x,0,0]) sphere(r=r);\n    translate([0,size.y,0]) sphere(r=r);\n    translate([size.x,size.y,0]) sphere(r=r);\n    translate([0,0,size.z]) sphere(r=r);\n    translate([size.x,0,size.z]) sphere(r=r);\n    translate([0,size.y,size.z]) sphere(r=r);\n    translate([size.x,size.y,size.z]) sphere(r=r);\n}\n\nmodule cushion(w, d, h) {\n    // Slightly rounded top cushion\n    difference() {\n        roundedCube([w, d, h], 1.5);\n        translate([1.5, 1.5, h - 0.5]) cube([w - 3, d - 3, 1]);\n    }\n}\n\nmodule armrest(w, d, h) {\n    // Armrest with rounded top\n    translate([0, 0, sofa_hgt - h]) roundedCube([w, d, h], 2);\n}\n\nmodule backrest(w, h) {\n    // Slightly inclined backrest\n    translate([0, 0, 8]) rotate([8, 0, 0]) roundedCube([w, 6, h], 2);\n}\n\nmodule leg(x, y) {\n    // Simple cylindrical leg\n    translate([x, y, 0]) cylinder(r=1.5, h=8);\n}\n\nmodule singleSeat(offset) {\n    union() {\n        // Base frame\n        translate([offset, 0, 0])\n            roundedCube([34, sofa_wid, 8], 2);\n\n        // Seat cushion\n        translate([offset + 2, 2, 8])\n            cushion(30, 41, 5);\n\n        // Backrest\n        translate([offset + 2, 2, 8])\n            backrest(30, 12);\n\n        // Armrests\n        translate([offset, 0, 8])\n            armrest(2, 45, 15);\n        translate([offset + 32, 0, 8])\n            armrest(2, 45, 15);\n\n        // Legs\n        for(x = [offset + 3, offset + 31], y = [3, 42])\n            leg(x, y);\n    }\n}\n\nmodule chaise() {\n    union() {\n        // Extended base\n        translate([0, 0, 0])\n            roundedCube([36, sofa_wid, 8], 2);\n\n        // Seat cushion\n        translate([2, 2, 8])\n            cushion(32, 41, 5);\n\n        // Backrest along the long edge\n        translate([2, 2, 8])\n            backrest(41, 12);\n\n        // Single armrest on left\n        translate([0, 0, 8])\n            armrest(2, 45, 15);\n\n        // Legs\n        for(x = [3, 33], y = [3, 42])\n            leg(x, y);\n    }\n}\n\n// Build the sectional: chaise on left + two-seat sofa on right\nunion() {\n    chaise();\n    singleSeat(36);\n}",
    "renders": true
  },
  {
    "household_item": "mattress",
    "openscad_code": "// Mattress model - medium complexity, realistic style\n// Dimensions adapted for 3D printing (~80mm long)\n\n$fn = 32;\n\n// Main parameters\nmattress_length = 80;\nmattress_width = 60;\nmattress_height = 12;\ncorner_radius = 5;\nwall_thickness = 1.2;\n\n// Pillow top parameters\npillow_top_thickness = 3;\npillow_top_inset = 2;\n\n// Quilted surface parameters\nquilt_depth = 1;\nquilt_spacing = 8;\nquilt_offset = 4;\n\n// Side handles\nhandle_width = 8;\nhandle_height = 4;\nhandle_depth = 2;\n\nmodule rounded_box(l, w, h, r) {\n    difference() {\n        cube([l, w, h], center = false);\n        // Round corners\n        translate([r, r, 0]) cube([l - 2*r, w - 2*r, h + 0.1]);\n        translate([r, r, 0]) sphere(r);\n        translate([l - r, r, 0]) sphere(r);\n        translate([r, w - r, 0]) sphere(r);\n        translate([l - r, w - r, 0]) sphere(r);\n        \n        mirror([1, 0, 0]) translate([r, r, 0]) sphere(r);\n        mirror([0, 1, 0]) translate([r, r, 0]) sphere(r);\n        mirror([1, 1, 0]) translate([r, r, 0]) sphere(r);\n    }\n}\n\nmodule pillow_top() {\n    difference() {\n        rounded_box(\n            mattress_length - 2*pillow_top_inset,\n            mattress_width - 2*pillow_top_inset,\n            pillow_top_thickness,\n            corner_radius - 2\n        );\n        \n        // Quilt pattern\n        for (x = [quilt_offset : quilt_spacing : mattress_length - 2*pillow_top_inset - quilt_offset]) {\n            for (y = [quilt_offset : quilt_spacing : mattress_width - 2*pillow_top_inset - quilt_offset]) {\n                translate([x, y, pillow_top_thickness - quilt_depth])\n                    cube([quilt_spacing/2, quilt_spacing/2, quilt_depth + 0.1], center = true);\n            }\n        }\n    }\n}\n\nmodule side_handle(position_x, position_y) {\n    // Handle hole\n    translate([position_x, position_y, mattress_height/2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = handle_width, r = handle_height/2, center = true);\n            cylinder(h = handle_width + 1, r = handle_height/2 - wall_thickness, center = true);\n        }\n    \n    // Reinforcement around handle\n    translate([position_x, position_y, mattress_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = handle_width + 2, r = handle_height/2 + 1, center = true);\n}\n\nmodule mattress_body() {\n    difference() {\n        // Main mattress\n        rounded_box(mattress_length, mattress_width, mattress_height, corner_radius);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_box(\n                mattress_length - 2*wall_thickness,\n                mattress_width - 2*wall_thickness,\n                mattress_height - wall_thickness,\n                corner_radius - wall_thickness\n            );\n    }\n}\n\n// Build the mattress\nunion() {\n    // Main body\n    mattress_body();\n    \n    // Pillow top\n    translate([pillow_top_inset, pillow_top_inset, mattress_height])\n        pillow_top();\n    \n    // Side handles\n    side_handle(mattress_length/2, 0);\n    side_handle(mattress_length/2, mattress_width);\n    side_handle(0, mattress_width/2);\n    side_handle(mattress_length, mattress_width/2);\n}",
    "renders": true
  },
  {
    "household_item": "boxspring",
    "openscad_code": "// Boxspring - Realistic Medium Complexity\n// Overall dimensions: 80mm x 60mm x 45mm (printable size)\n\n$fn = 32;  // Smooth curves for realism\n\n// Main module\nmodule boxspring() {\n    // Base frame\n    base_frame();\n    \n    // Spring support grid\n    spring_grid();\n    \n    // Mattress support\n    mattress();\n    \n    // Optional legs\n    legs();\n}\n\n// Base wooden frame\nmodule base_frame() {\n    // Bottom frame\n    difference() {\n        // Outer frame\n        translate([0, 0, 5]) cube([80, 60, 8], center = true);\n        \n        // Hollow center\n        translate([0, 0, 9]) cube([72, 52, 8], center = true);\n    }\n    \n    // Side panels for height\n    for (x = [-38, 38]) {\n        translate([x, 0, 18]) cube([2, 60, 20], center = true);\n    }\n    for (y = [-28, 28]) {\n        translate([0, y, 18]) cube([76, 2, 20], center = true);\n    }\n}\n\n// Internal spring grid structure\nmodule spring_grid() {\n    // Spring rows\n    for (y = [-20:10:20]) {\n        spring_row(y);\n    }\n}\n\n// Single row of springs\nmodule spring_row(y_pos) {\n    for (x = [-30:12:30]) {\n        translate([x, y_pos, 18]) {\n            // Spring base\n            cylinder(h = 16, d1 = 8, d2 = 6);\n            \n            // Spring coils (simplified)\n            for (i = [1:2:14]) {\n                translate([0, 0, i]) cylinder(h = 1.5, d = 7);\n            }\n        }\n    }\n}\n\n// Mattress on top\nmodule mattress() {\n    color(\"beige\") {\n        // Bottom layer\n        translate([0, 0, 34]) cube([78, 58, 4], center = true);\n        \n        // Top layer (slightly smaller)\n        translate([0, 0, 39]) cube([76, 56, 6], center = true);\n        \n        // Quilted pattern\n        for (x = [-30:15:30]) {\n            for (y = [-22:11:22]) {\n                translate([x, y, 41.5]) {\n                    difference() {\n                        cylinder(h = 2, d = 8);\n                        cylinder(h = 3, d = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Support legs\nmodule legs() {\n    // Corner legs\n    leg([-35, -25]);\n    leg([35, -25]);\n    leg([-35, 25]);\n    leg([35, 25]);\n    \n    // Center support legs\n    leg([-35, 0]);\n    leg([35, 0]);\n}\n\n// Single leg\nmodule leg(pos) {\n    translate([pos[0], pos[1], 0]) {\n        cylinder(h = 5, d = 6);\n    }\n}\n\n// Render the boxspring\nboxspring();",
    "renders": true
  },
  {
    "household_item": "cradle",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Baby Cradle\n// Overall size ~80 mm long x 50 mm wide x 55 mm high\n\n$fn = 32;               // Smooth curves\nwall = 2;               // 3D-printable wall thickness\nlegR = 4;               // Radius of legs\nrockR = 40;             // Radius of rocking curve\nbaseH = 4;              // Thickness of cradle floor\n\nmodule cradle_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,wall]) cube([76,46,wall], center=true);\n            translate([0,0,45-wall]) cube([70,40,wall], center=true);\n        }\n        // Hollow inside\n        hull() {\n            translate([0,0,wall+wall]) cube([72,42,wall], center=true);\n            translate([0,0,45-wall-wall]) cube([66,36,wall], center=true);\n        }\n    }\n}\n\nmodule rocking_base() {\n    difference() {\n        // Rocking arc\n        translate([0,0,rockR])\n            rotate([90,0,0])\n                cylinder(h=50, r1=rockR, r2=rockR, center=true);\n\n        // Trim to cradle width\n        translate([0,0,rockR])\n            cube([200,50,rockR*2], center=true);\n\n        // Cut flat bottom for printing\n        translate([0,0,-1])\n            cube([200,200,2], center=true);\n    }\n}\n\nmodule spindle(posX) {\n    translate([posX,0,wall+baseH+wall/2])\n        cylinder(h=45-wall*2-baseH, r=wall/2, center=false);\n}\n\nmodule headboard(end) {\n    mirror([end,0,0]) {\n        // Solid board\n        translate([end*38,0,wall+baseH+22.5])\n            cube([wall,46,45], center=true);\n\n        // Decorative cutouts\n        for(i=[-1:1])\n            translate([end*38, i*12, wall+baseH+22.5])\n                cylinder(h=wall+0.1, r=4, center=true);\n    }\n}\n\nmodule mattress() {\n    color(\"LightBlue\")\n        translate([0,0,wall+baseH+0.5])\n            cube([68,38,3], center=true);\n}\n\n// Assembly\nunion() {\n    // Cradle shell\n    cradle_body();\n\n    // Floor\n    translate([0,0,wall+baseH/2])\n        cube([72,42,baseH], center=true);\n\n    // Rockers\n    translate([30,0,0]) rocking_base();\n    translate([-30,0,0]) rocking_base();\n\n    // Legs under rockers (print supports)\n    translate([30,20,0])\n        cylinder(h=rockR-legR, r=legR, center=false);\n    translate([30,-20,0])\n        cylinder(h=rockR-legR, r=legR, center=false);\n    translate([-30,20,0])\n        cylinder(h=rockR-legR, r=legR, center=false);\n    translate([-30,-20,0])\n        cylinder(h=rockR-legR, r=legR, center=false);\n\n    // Spindles along sides\n    for(x=[-30:10:30])\n        spindle(x);\n\n    // Headboards\n    headboard(1);\n    headboard(-1);\n\n    // Mattress\n    mattress();\n}",
    "renders": true
  },
  {
    "household_item": "cot",
    "openscad_code": "// Realistic style baby cot - medium complexity\n// External dimensions: 80 x 60 x 65 mm (L x W x H)\n\ncot_color = \"cornsilk\";\n\nmodule cot() {\n    // Cot frame base\n    color(cot_color)\n    union() {\n        // Bottom frame\n        translate([0, 0, 5])\n            cube([80, 60, 8], center=true);\n        \n        // Four corner posts\n        for(x = [-35, 35])\n            for(y = [-25, 25])\n                translate([x, y, 0])\n                    cylinder(h=65, d=6, center=false);\n        \n        // Top frame\n        translate([0, 0, 65])\n            cube([80, 60, 8], center=true);\n    }\n    \n    // Side railings\n    module side_rail(x_pos, rot) {\n        translate([x_pos, 0, 35])\n        rotate([0, rot, 0])\n        color(\"beige\")\n        difference() {\n            // Back panel\n            cube([2, 60, 50], center=true);\n            \n            // Vertical slats\n            for(i = [-20:8:20]) {\n                translate([0, i, 0])\n                    cube([4, 4, 46], center=true);\n            }\n        }\n    }\n    \n    // End railings\n    module end_rail(y_pos, rot) {\n        translate([0, y_pos, 35])\n        rotate([rot, 0, 0])\n        color(\"beige\")\n        difference() {\n            // End panel\n            cube([80, 2, 50], center=true);\n            \n            // Vertical slats\n            for(i = [-30:10:30]) {\n                translate([i, 0, 0])\n                    cube([6, 4, 46], center=true);\n            }\n        }\n    }\n    \n    // Add railings\n    side_rail(40, 0);\n    side_rail(-40, 0);\n    end_rail(30, 0);\n    end_rail(-30, 0);\n    \n    // Mattress\n    translate([0, 0, 14])\n    color(\"white\")\n    cube([74, 54, 8], center=true);\n    \n    // Pillow\n    translate([20, 0, 23])\n    color(\"lightblue\")\n    cube([22, 30, 4], center=true);\n    \n    // Blanket\n    translate([-5, 0, 27])\n    color(\"lightblue\")\n    cube([40, 50, 2], center=true);\n    \n    // Cot mobile arm\n    translate([0, 0, 69])\n    color(\"silver\")\n    union() {\n        cylinder(h=15, d=4, center=false);\n        rotate([90, 0, 0])\n            translate([0, 0, -25])\n            cylinder(h=50, d=3, center=false);\n        \n        // Mobile toys\n        translate([0, -25, 10])\n        color(\"red\")\n        sphere(d=5);\n        translate([0, -25, 5])\n        color(\"yellow\")\n        sphere(d=5);\n        translate([0, -25, 0])\n        color(\"green\")\n        sphere(d=5);\n    }\n}\n\ncot();",
    "renders": true
  },
  {
    "household_item": "hammock",
    "openscad_code": "// Realistic-style 3D-printable hammock – OpenSCAD\n// Overall footprint ≈ 70 mm × 30 mm × 30 mm\n$fn = 32;\n\n// Adjustable parameters\nrope_d    = 1.2;    // rope thickness\npost_r    = 2.5;    // wooden post radius\npost_h    = 25;     // post height\nfabric_w  = 50;     // cloth width\nfabric_l  = 30;     // cloth length (along curve)\nfabric_t  = 0.8;    // cloth thickness\nwrap_turns = 6;     // rope wraps around post\nhook_r    = 3;      // hook outer radius\nhook_gap  = 1.2;    // gap for printing without support\n\nmodule rope_segment(l, d=rope_d) {\n    rotate([90,0,0])\n        cylinder(h=l, d=d, $fn=8);\n}\n\nmodule wooden_post(h=post_h, r=post_r) {\n    cylinder(h=h, r=r, $fn=32);\n}\n\nmodule hammock_fabric(w=fabric_w, l=fabric_l, t=fabric_t) {\n    // create curved hammock cloth using hull of thin boxes\n    steps = 10;\n    for (i=[0:steps-1]) {\n        x = -w/2 + i*(w/(steps-1));\n        sag = 5*sin(180*(x+w/2)/w); // sag profile\n        translate([x, 0, sag])\n            cube([w/steps + 0.01, l, t], center=true);\n    }\n}\n\nmodule post_with_wrapping() {\n    difference() {\n        wooden_post();\n        // slight chamfer for printability\n        translate([0,0,-0.1])\n            cylinder(h=post_h+0.2, r1=post_r-0.5, r2=post_r, $fn=32);\n    }\n    // rope wraps around post\n    for (i=[0:wrap_turns-1]) {\n        rotate([0,0,i*360/wrap_turns])\n            translate([post_r+rope_d/2, 0, i*post_h/wrap_turns])\n                rope_segment(rope_d*1.5);\n    }\n}\n\nmodule hanging_hook() {\n    difference() {\n        // main ring\n        rotate_extrude(angle=360, $fn=64)\n            translate([hook_r, 0, 0])\n                circle(r=rope_d*1.1, $fn=16);\n        // gap for printing\n        rotate([0,0,180])\n            translate([hook_r, 0, 0])\n                cube([hook_gap*2, rope_d*2.5, rope_d*2.5], center=true);\n    }\n}\n\nmodule hammock_assembly() {\n    // left post\n    translate([-40, 0, 0]) {\n        post_with_wrapping();\n        translate([0, 0, post_h-3])\n            rotate([90,0,0])\n                hanging_hook();\n    }\n\n    // right post\n    translate([40, 0, 0]) {\n        mirror([1,0,0])\n            post_with_wrapping();\n        translate([0, 0, post_h-3])\n            rotate([90,0,0])\n                hanging_hook();\n    }\n\n    // fabric bed\n    translate([0, 0, 5])\n        hammock_fabric();\n\n    // left-side ropes from post top to fabric edge\n    translate([-40, 0, post_h])\n        rope_segment(20);\n    translate([-40, 0, post_h])\n        rotate([0, -20, 0])\n            rope_segment(20);\n\n    // right-side ropes\n    translate([40, 0, post_h])\n        rope_segment(20);\n    translate([40, 0, post_h])\n        rotate([0, 20, 0])\n            rope_segment(20);\n}\n\nhammock_assembly();",
    "renders": true
  },
  {
    "household_item": "ladder",
    "openscad_code": "// Realistic 3D-printable ladder\n// Overall height ~70 mm, width ~30 mm, depth ~20 mm\n\n$fn = 32;  // Smooth curves for printability\n\n// ===== PARAMETERS =====\nladder_height = 70;\nladder_width = 28;\nladder_depth = 18;\nrail_thick = 2.2;\nrung_thick = 2.0;\nrung_spacing = 10;\nrung_count = floor(ladder_height / rung_spacing) - 1;\nfoot_radius = 3.5;\nfoot_height = 2.0;\n\n// ===== RAIL PROFILE (rounded rectangle) =====\nmodule rail_profile(w, d, r) {\n    hull() {\n        translate([ r,  r, 0]) circle(r = r);\n        translate([w-r,  r, 0]) circle(r = r);\n        translate([w-r, d-r, 0]) circle(r = r);\n        translate([ r, d-r, 0]) circle(r = r);\n    }\n}\n\n// ===== SINGLE RAIL =====\nmodule rail(length) {\n    linear_extrude(height = length, center = false)\n        rail_profile(rail_thick, rail_thick, rail_thick/2);\n}\n\n// ===== RUNG =====\nmodule rung() {\n    // Centered at origin along Y\n    difference() {\n        // Main cylinder\n        rotate([90,0,0])\n            cylinder(h = ladder_width - 2*rail_thick, r = rung_thick/2, $fn = 20);\n\n        // Chamfers at ends\n        translate([0, (ladder_width - 2*rail_thick)/2, 0])\n            rotate([90,0,0])\n                cylinder(h = rung_thick, r1 = rung_thick/2, r2 = 0, $fn = 20);\n        translate([0, -(ladder_width - 2*rail_thick)/2, 0])\n            rotate([90,0,0])\n                cylinder(h = rung_thick, r1 = rung_thick/2, r2 = 0, $fn = 20);\n    }\n}\n\n// ===== FOOT =====\nmodule foot() {\n    difference() {\n        cylinder(h = foot_height, r = foot_radius, center = false, $fn = 32);\n        translate([0,0,-0.01])\n            cylinder(h = foot_height + 0.02, r = foot_radius - 1, center = false, $fn = 32);\n    }\n}\n\n// ===== ASSEMBLY =====\nunion() {\n    // Left rail\n    translate([0, 0, 0])\n        rail(ladder_height);\n\n    // Right rail\n    translate([ladder_width - rail_thick, 0, 0])\n        rail(ladder_height);\n\n    // Rungs\n    for (i = [1 : rung_count]) {\n        translate([(ladder_width - rail_thick)/2, 0, i * rung_spacing])\n            rung();\n    }\n\n    // Feet\n    translate([rail_thick/2, ladder_depth/2 - rail_thick/2, -foot_height])\n        foot();\n    translate([ladder_width - rail_thick/2, ladder_depth/2 - rail_thick/2, -foot_height])\n        foot();\n    translate([rail_thick/2, rail_thick/2, -foot_height])\n        foot();\n    translate([ladder_width - rail_thick/2, rail_thick/2, -foot_height])\n        foot();\n}",
    "renders": true
  },
  {
    "household_item": "rack",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity 3D-printable rack\n// Overall dimensions: 80 mm wide × 40 mm deep × 60 mm tall\n\n// ------------------------ PARAMETERS ------------------------\nrack_w = 80;\nrack_d = 40;\nrack_h = 60;\nwall_t = 2.5;\npillar_r = 3;\npillar_h = rack_h - 2*wall_t;\nshelf_t = 2;\ngap = 10;\nshelves = 5;\npin_r = 1.5;\npin_h = 4;\npin_clear = 0.4;\n// ------------------------------------------------------------\n\nmodule rack_body() {\n    difference() {\n        // main box\n        translate([0,0,rack_h/2])\n            cube([rack_w, rack_d, rack_h], center=true);\n        \n        // hollow out interior\n        translate([0,0,rack_h/2])\n            cube([rack_w-2*wall_t, rack_d-2*wall_t, rack_h-wall_t], center=true);\n        \n        // remove bottom for open front\n        translate([0,-rack_d/2+wall_t/2,-0.1])\n            cube([rack_w-2*wall_t, wall_t, rack_h+0.2], center=true);\n    }\n}\n\nmodule corner_pillars() {\n    for(x=[-1,1])\n    for(y=[-1,1])\n    translate([x*(rack_w/2-pillar_r), y*(rack_d/2-pillar_r), pillar_h/2+wall_t])\n        cylinder(h=pillar_h, r=pillar_r, $fn=16);\n}\n\nmodule shelves() {\n    for(i=[0:shelves-1]) {\n        z_pos = wall_t + gap + i*(gap+shelf_t);\n        translate([0,0,z_pos])\n            cube([rack_w-2*wall_t-2*pillar_r, rack_d-2*wall_t-2*pillar_r, shelf_t], center=true);\n    }\n}\n\nmodule back_pegboard() {\n    difference() {\n        // back plate\n        translate([0,0,rack_h/2])\n            cube([rack_w, wall_t, rack_h], center=true);\n        \n        // peg holes\n        for(x=[-rack_w/2+wall_t*2:gap:rack_w/2-wall_t*2])\n        for(z=[wall_t*2:gap:rack_h-wall_t*2])\n            translate([x, -wall_t/2, z])\n                rotate([90,0,0])\n                    cylinder(h=wall_t+1, r=pin_r+pin_clear, $fn=12);\n    }\n}\n\nmodule support_pins() {\n    // small removable pins that can be inserted into pegboard\n    for(i=[0:7])\n        translate([i*gap - rack_w/2 + wall_t*2, -rack_d/2 - pin_h - 1, wall_t*2 + i*gap])\n            rotate([0,90,0])\n                cylinder(h=pin_h, r=pin_r, $fn=8);\n}\n\n// ------------------------ ASSEMBLY --------------------------\nunion() {\n    rack_body();\n    corner_pillars();\n    shelves();\n    back_pegboard();\n    support_pins();\n}",
    "renders": true
  },
  {
    "household_item": "stand",
    "openscad_code": "// Realistic Phone Stand - Medium Complexity\n// Dimensions optimized for 3D printing\n\n$fn = 64;\n\n// Main parameters\nbase_width = 60;\nbase_depth = 40;\nbase_height = 8;\nback_height = 45;\nback_thickness = 4;\nphone_slot_width = 12;\nphone_slot_depth = 8;\nphone_support_angle = 15;\nwall_thickness = 2;\n\nmodule phone_stand() {\n    // Base plate with rounded corners\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            rounded_cube([base_width, base_depth, base_height], 5);\n        \n        // Cable channel\n        translate([0, -base_depth/2 + 3, base_height/2])\n            cube([10, 6, base_height + 1], center=true);\n    }\n    \n    // Back support\n    translate([0, -base_depth/2 + back_thickness/2, base_height + back_height/2])\n        cube([base_width - 10, back_thickness, back_height], center=true);\n    \n    // Angled phone support\n    translate([0, -base_depth/2 + 15, base_height]) {\n        rotate([0, phone_support_angle, 0]) {\n            difference() {\n                // Main support block\n                cube([base_width - 10, 20, 8]);\n                \n                // Phone slot\n                translate([0, 10, 4]) {\n                    cube([phone_slot_width, phone_slot_depth, 8], center=true);\n                }\n                \n                // Charging port cutout\n                translate([0, 10, 0])\n                    cube([8, 6, 4], center=true);\n            }\n        }\n    }\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([side * (base_width/2 - 5), 0, 0]) {\n            difference() {\n                // Side brace\n                rotate([0, -phone_support_angle, 0]) {\n                    translate([0, -base_depth/2 + 5, base_height + 2])\n                        cube([3, 15, 15]);\n                }\n                \n                // Lightening hole\n                translate([0, -base_depth/2 + 7, base_height + 7])\n                    rotate([0, -phone_support_angle, 0])\n                        cylinder(h = 5, r = 2);\n            }\n        }\n    }\n    \n    // Front lip to prevent sliding\n    translate([0, base_depth/2 - 3, base_height/2])\n        rounded_cube([base_width - 10, 6, 3], 2);\n    \n    // Rubber feet holes (for adding rubber pads)\n    for(x = [-20, 20])\n        for(y = [-12, 12])\n            translate([x, y, 0])\n                cylinder(h = base_height + 1, r = 2);\n}\n\n// Helper module for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                for(z = [-1, 1])\n                    translate([x * (size[0]/2 - radius), \n                              y * (size[1]/2 - radius), \n                              z * (size[2]/2 - radius)])\n                        sphere(r = radius);\n    }\n}\n\n// Render the stand\nphone_stand();",
    "renders": true
  },
  {
    "household_item": "cart",
    "openscad_code": "// Realistic OpenSCAD cart – medium complexity\n// 3D-printable, no overhangs, 60 mm long, 30 mm wide, 30 mm high\n\n// Parameters\nwheel_d = 12;\nwheel_w = 5;\naxle_d = 3;\nbody_l = 40;\nbody_w = 25;\nbody_h = 15;\nwall_t = 2;\nhandle_l = 35;\nhandle_r = 3;\nhandle_a = 45;\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        cylinder(d=wheel_d, h=wheel_w, $fn=32);      // tire\n        translate([0, 0, -1])\n            cylinder(d=axle_d, h=wheel_w+2, $fn=16); // axle hole\n    }\n}\n\n// Axle + wheels module\nmodule axle_assembly() {\n    translate([-body_l/2-5, 0, 4]) {\n        rotate([0,90,0]) cylinder(d=axle_d, h=body_w+wheel_w*2+2, $fn=16); // axle\n        translate([0, body_w/2+wheel_w/2, 0]) wheel();\n        translate([0, -body_w/2-wheel_w/2, 0]) wheel();\n    }\n}\n\n// Cart body\nmodule cart_body() {\n    difference() {\n        // main box\n        cube([body_l, body_w, body_h]);\n        // inside cavity\n        translate([wall_t, wall_t, wall_t])\n            cube([body_l-wall_t*2, body_w-wall_t*2, body_h-wall_t*1.5]);\n    }\n}\n\n// Handle module\nmodule handle() {\n    rotate([0, handle_a, 0])\n        translate([-handle_l/2, 0, 0])\n            difference() {\n                cylinder(d=handle_r*2, h=handle_l, $fn=16); // grip\n                translate([0, 0, -1])\n                    cylinder(d=handle_r*2-wall_t, h=handle_l+2, $fn=16); // grip hole\n            }\n}\n\n// Frame connecting handle to body\nmodule handle_frame() {\n    translate([body_l/2, 0, body_h/2]) {\n        rotate([0, -handle_a, 0])\n            translate([handle_l/2, 0, 0])\n                cylinder(d=handle_r*1.5, h=handle_l, $fn=16); // shaft\n    }\n}\n\n// Main assembly\nunion() {\n    cart_body();\n    handle_frame();\n    translate([body_l/2+handle_l-5, 0, body_h/2]) \n        rotate([0, -handle_a, 0]) handle();\n    axle_assembly();\n    mirror([1,0,0]) axle_assembly(); // rear axle\n}",
    "renders": true
  },
  {
    "household_item": "island",
    "openscad_code": "// Realistic 3D-printable island – medium complexity\n// Total footprint ≈ 80 mm × 70 mm, max height ≈ 30 mm\n// All slopes ≤ 45° and walls ≥ 2 mm for easy printing\n\n$fn = 36;      // Smooth curves without excessive facets\n\nmodule island_base() {\n    // Main island body – low-profile elliptical mound\n    scale([1.2, 1, 1])\n    cylinder(h = 18, d1 = 70, d2 = 60, center = false);\n}\n\nmodule volcano() {\n    // Central volcano cone with gentle 35° slope\n    translate([0, 0, 18])\n    cylinder(h = 12, d1 = 22, d2 = 6, center = false);\n\n    // Crater hollow (safe overhang-free)\n    translate([0, 0, 18 + 2])\n    cylinder(h = 10, d1 = 8, d2 = 8, center = false);\n}\n\nmodule palm_trunk() {\n    // Simple tapered trunk for palms\n    cylinder(h = 14, d1 = 3, d2 = 2, center = false);\n}\n\nmodule palm_leaves() {\n    // 6 fan-shaped leaves, each 25° apart\n    for (a = [0 : 60 : 300]) {\n        rotate([0, 0, a])\n        translate([0, 6, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.2, 0.1])\n        cylinder(h = 12, d1 = 2, d2 = 10, center = false);\n    }\n}\n\nmodule palm_tree(x, y) {\n    translate([x, y, 18 + 2])\n    union() {\n        palm_trunk();\n        translate([0, 0, 14])\n        palm_leaves();\n    }\n}\n\nmodule rock_cluster(x, y) {\n    // Cluster of 3 rounded rocks\n    translate([x, y, 18])\n    union() {\n        translate([0, 0, 0])\n        sphere(d = 5);\n        translate([3, 2, 1])\n        sphere(d = 4);\n        translate([-2, 3, 0.5])\n        sphere(d = 3.5);\n    }\n}\n\nmodule shoreline_rocks() {\n    // Evenly spaced rocks around the shoreline\n    for (a = [0 : 40 : 320]) {\n        r = 35;\n        x = r * cos(a);\n        y = r * sin(a);\n        rock_cluster(x, y);\n    }\n}\n\n// Assembly\nunion() {\n    island_base();\n    volcano();\n\n    // Two palm trees on opposite sides\n    palm_tree(20, -10);\n    palm_tree(-25, 15);\n\n    shoreline_rocks();\n}",
    "renders": true
  },
  {
    "household_item": "pantry",
    "openscad_code": "// Realistic Medium-Complexity Pantry (≈70 mm wide)\n// All dimensions in mm, printable without support\n\n// Overall pantry shell\nmodule pantry_body() {\n    difference() {\n        // Main box\n        cube([70, 40, 90]);\n        // Hollow out inside\n        translate([2.5, 2.5, 2.5])\n            cube([65, 35, 85]);\n    }\n}\n\n// Shelf module\nmodule shelf(h) {\n    translate([0, 0, h])\n        cube([70, 40, 2]);\n}\n\n// Door frame\nmodule door_frame() {\n    difference() {\n        // Outer frame\n        translate([69.9, 0, 0])\n            cube([2, 40, 90]);\n        // Inner cutout for glass\n        translate([71, 2, 2])\n            cube([1.8, 36, 86]);\n    }\n}\n\n// Door handle\nmodule handle() {\n    translate([72, 18, 45])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=4, $fn=20);\n}\n\n// Knob for each shelf\nmodule knob(x, y, z) {\n    translate([x, y, z])\n        sphere(d=3, $fn=16);\n}\n\n// Canned food\nmodule can(r, h) {\n    cylinder(h=h, r=r, $fn=32);\n}\n\n// Box of pasta\nmodule pasta_box() {\n    cube([15, 8, 20]);\n}\n\n// Render the pantry\nunion() {\n    // Main body\n    pantry_body();\n    \n    // Three shelves\n    shelf(25);\n    shelf(50);\n    shelf(75);\n    \n    // Door with frame\n    door_frame();\n    \n    // Door handle\n    handle();\n    \n    // Knobs on right side\n    for(z=[30, 55, 80]) {\n        knob(68, 5, z);\n    }\n    \n    // Place cans on bottom shelf\n    for(i=[0:2]) {\n        translate([10 + i*20, 10, 5])\n            color(\"silver\")\n            can(r=5, h=18);\n    }\n    \n    // Pasta box on middle shelf\n    translate([10, 10, 52])\n        color(\"gold\")\n        pasta_box();\n    \n    // Additional can on top shelf\n    translate([45, 10, 77])\n        color(\"silver\")\n        can(r=4, h=12);\n}",
    "renders": true
  },
  {
    "household_item": "bin",
    "openscad_code": "// Realistic medium-complexity 3D-printable bin\n// Overall size: 80 x 60 x 100 mm (L x W x H)\n\n$fn = 32;               // Smooth curves\nwall = 2;               // Uniform wall thickness for 3D printing\nbody_l = 80;\nbody_w = 60;\nbody_h = 90;\nrim_h  = 8;\n\n// Main body shell (hollow)\nmodule body_shell() {\n    difference() {\n        // Outer rounded cuboid\n        minkowski() {\n            cube([body_l, body_w, body_h], center = true);\n            sphere(4);\n        }\n        // Inner cavity\n        translate([0, 0, -rim_h/2])\n        minkowski() {\n            cube([body_l - 2*wall, body_w - 2*wall, body_h - wall], center = true);\n            sphere(4 - wall);\n        }\n    }\n}\n\n// Top rim with slight overhang for lid seating\nmodule top_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, body_h/2 + rim_h/2])\n        minkowski() {\n            cube([body_l + 1, body_w + 1, rim_h], center = true);\n            sphere(4);\n        }\n        // Inner chamfer\n        translate([0, 0, body_h/2 + rim_h/2 + 1])\n        minkowski() {\n            cube([body_l - 2*wall - 2, body_w - 2*wall - 2, rim_h + 2], center = true);\n            sphere(4);\n        }\n    }\n}\n\n// Handle loops on short sides\nmodule handles() {\n    for (x = [-body_l/2 - 2, body_l/2 + 2]) {\n        translate([x, 0, body_h/2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 20, d1 = 12, d2 = 12);   // outer handle\n            cylinder(h = 21, d1 = 8, d2 = 8);     // inner hole\n        }\n    }\n}\n\n// Reinforcing ribs on long sides\nmodule ribs() {\n    for (y = [-body_w/2 + 10, body_w/2 - 10]) {\n        translate([0, y, body_h/2 - 20])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = body_l - 20, d1 = 6, d2 = 6);\n            cylinder(h = body_l - 18, d1 = 4, d2 = 4);\n        }\n    }\n}\n\n// Small drainage hole at bottom center\nmodule drainage() {\n    translate([0, 0, -body_h/2 + 1])\n    rotate([90, 0, 0])\n    cylinder(h = wall + 1, d = 4);\n}\n\n// Assemble all parts\nunion() {\n    body_shell();\n    top_rim();\n    handles();\n    ribs();\n    drainage();\n}",
    "renders": true
  },
  {
    "household_item": "trunk",
    "openscad_code": "// Realistic Trunk - OpenSCAD\n// Medium complexity with 3D-printable features\n\n$fn = 32;\n\n// Main parameters\ntrunk_width = 60;\ntrunk_height = 40;\ntrunk_depth = 35;\nwall_thickness = 2;\n\n// Wood plank dimensions\nplank_width = 8;\nplank_gap = 1;\n\n// Hardware dimensions\nhandle_diameter = 6;\nhandle_length = 40;\nhandle_clearance = 8;\nlock_size = 8;\nhinge_diameter = 3;\nhinge_length = 15;\n\nmodule wood_plank(x, y, z, length, width, height) {\n    translate([x, y, z])\n        cube([length, width, height], center = false);\n}\n\nmodule trunk_body() {\n    difference() {\n        // Main box\n        cube([trunk_width, trunk_depth, trunk_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([trunk_width - 2*wall_thickness, \n                  trunk_depth - 2*wall_thickness, \n                  trunk_height - wall_thickness], center = true);\n    }\n}\n\nmodule wood_texturing() {\n    // Front and back planks\n    for (i = [0:plank_width+plank_gap:trunk_width-plank_width]) {\n        // Front face\n        translate([-trunk_width/2 + i, -trunk_depth/2, -trunk_height/2])\n            wood_plank(0, 0, 0, plank_width, wall_thickness, trunk_height);\n        \n        // Back face\n        translate([-trunk_width/2 + i + plank_width/2, trunk_depth/2 - wall_thickness, -trunk_height/2])\n            wood_plank(0, 0, 0, plank_width, wall_thickness, trunk_height);\n    }\n    \n    // Side planks\n    for (i = [0:plank_width+plank_gap:trunk_depth-plank_width]) {\n        // Left side\n        translate([-trunk_width/2, -trunk_depth/2 + i, -trunk_height/2])\n            wood_plank(0, 0, 0, wall_thickness, plank_width, trunk_height);\n        \n        // Right side\n        translate([trunk_width/2 - wall_thickness, -trunk_depth/2 + i, -trunk_height/2])\n            wood_plank(0, 0, 0, wall_thickness, plank_width, trunk_height);\n    }\n}\n\nmodule metal_reinforcements() {\n    // Bottom metal band\n    translate([0, 0, -trunk_height/2 + wall_thickness/2])\n        cube([trunk_width + 2*wall_thickness, \n              trunk_depth + 2*wall_thickness, \n              wall_thickness], center = true);\n    \n    // Top metal band\n    translate([0, 0, trunk_height/2 - wall_thickness/2])\n        cube([trunk_width + 2*wall_thickness, \n              trunk_depth + 2*wall_thickness, \n              wall_thickness], center = true);\n    \n    // Corner reinforcements (simplified)\n    for (x = [-trunk_width/2, trunk_width/2]) {\n        for (y = [-trunk_depth/2, trunk_depth/2]) {\n            translate([x, y, 0])\n                cylinder(h = trunk_height + 2*wall_thickness, \n                        r1 = wall_thickness*1.5, \n                        r2 = wall_thickness*1.5, \n                        center = true);\n        }\n    }\n}\n\nmodule handle() {\n    // Handle mounting brackets\n    translate([-handle_length/2 - 2, -trunk_depth/2 - wall_thickness, 0])\n        cube([4, wall_thickness*2, 8]);\n    \n    translate([handle_length/2 - 2, -trunk_depth/2 - wall_thickness, 0])\n        cube([4, wall_thickness*2, 8]);\n    \n    // Handle bar\n    translate([0, -trunk_depth/2 - wall_thickness - handle_clearance/2, 4])\n        rotate([90, 0, 0])\n            cylinder(h = handle_length, \n                    r = handle_diameter/2, \n                    center = true);\n}\n\nmodule lock() {\n    // Lock plate\n    translate([0, trunk_depth/2 + wall_thickness/2, -trunk_height/4])\n        cube([lock_size, wall_thickness, lock_size*1.5]);\n    \n    // Keyhole\n    translate([0, trunk_depth/2 + wall_thickness + 0.1, -trunk_height/4])\n        rotate([0, 90, 0])\n            cylinder(h = wall_thickness + 0.2, \n                    r1 = 1.5, \n                    r2 = 1.5);\n}\n\nmodule hinges() {\n    // Left hinge\n    translate([-trunk_width/2 + wall_thickness*2, trunk_depth/2, trunk_height/2 - wall_thickness])\n        rotate([90, 0, 0])\n            cylinder(h = hinge_length, \n                    r = hinge_diameter, \n                    center = false);\n    \n    // Right hinge\n    translate([trunk_width/2 - wall_thickness*2 - hinge_length, trunk_depth/2, trunk_height/2 - wall_thickness])\n        rotate([90, 0, 0])\n            cylinder(h = hinge_length, \n                    r = hinge_diameter, \n                    center = false);\n}\n\n// Assembly\nunion() {\n    // Main trunk body\n    trunk_body();\n    \n    // Wood texturing (applied as overlay)\n    wood_texturing();\n    \n    // Metal reinforcements\n    color([0.7, 0.7, 0.8])\n    metal_reinforcements();\n    \n    // Handle\n    color([0.6, 0.6, 0.7])\n    handle();\n    \n    // Lock\n    color([0.5, 0.5, 0.6])\n    lock();\n    \n    // Hinges\n    color([0.6, 0.6, 0.7])\n    hinges();\n}",
    "renders": true
  },
  {
    "household_item": "chest",
    "openscad_code": "// Realistic 3D-printable treasure chest  ~65 mm wide\n// Medium complexity  (≈ 110 lines)\n\n$fa = 2; $fs = 0.5;  // better curves for printing\n\nmodule roundedBox(size, r, thick=1.5) {\n    // hollow box with rounded edges\n    hull() {\n        translate([ r,  r,  r]) sphere(r=r);\n        translate([ r,  r, size.z-r]) sphere(r=r);\n        translate([ r, size.y-r,  r]) sphere(r=r);\n        translate([ r, size.y-r, size.z-r]) sphere(r=r);\n        translate([size.x-r,  r,  r]) sphere(r=r);\n        translate([size.x-r,  r, size.z-r]) sphere(r=r);\n        translate([size.x-r, size.y-r,  r]) sphere(r=r);\n        translate([size.x-r, size.y-r, size.z-r]) sphere(r=r);\n    }\n    difference() {\n        cube(size, center=false);\n        translate([thick, thick, thick])\n            cube(size-[2*thick, 2*thick, 2*thick], center=false);\n    }\n}\n\nmodule chestBase() {\n    difference() {\n        roundedBox([45, 30, 25], 4, wall=2);\n        // cavity\n        translate([4, 4, 4])\n            cube([37, 22, 21], center=false);\n        // front keyhole\n        translate([22.5, 2, 12])\n            rotate([90,0,0])\n                cylinder(h=5, d=4, $fn=20);\n    }\n    // bottom plate lip for print bed adhesion\n    translate([-1, -1, -1])\n        cube([47, 32, 2]);\n}\n\nmodule hingePin() {\n    cylinder(h=35, d=2.2, $fn=20);\n}\n\nmodule lid() {\n    difference() {\n        // outer lid shell\n        hull() {\n            translate([4,4,0]) sphere(r=4);\n            translate([4,26,0]) sphere(r=4);\n            translate([41,4,0]) sphere(r=4);\n            translate([41,26,0]) sphere(r=4);\n            translate([4,4,10]) sphere(r=4);\n            translate([4,26,10]) sphere(r=4);\n            translate([41,4,10]) sphere(r=4);\n            translate([41,26,10]) sphere(r=4);\n        }\n        // inner hollow\n        translate([6,6,2])\n            cube([33, 18, 8], center=false);\n    }\n    // reinforcement ribs\n    for (y=[8,22])\n        translate([10,y,1]) cube([25,2,8]);\n    // hinge sleeves\n    translate([4, 5, 0]) rotate([0,90,0])\n        cylinder(h=8, d=4, center=true, $fn=20);\n    translate([4, 25, 0]) rotate([0,90,0])\n        cylinder(h=8, d=4, center=true, $fn=20);\n}\n\nmodule strap() {\n    // metal band around chest\n    color(\"silver\")\n    difference() {\n        translate([0, -0.5, 5])\n            cube([45, 1.5, 15]);\n        translate([20, -1, 5])\n            cube([5, 2.5, 15]);\n    }\n}\n\n// assembly\nchestBase();\ntranslate([0, 0, 25]) lid();\ntranslate([0, 5, 25]) hingePin();\ntranslate([0, 25, 25]) hingePin();\ntranslate([0,0,0]) strap();\ntranslate([0,29,0]) strap();",
    "renders": true
  },
  {
    "household_item": "coffer",
    "openscad_code": "// Realistic Coffin / Coffin Box – medium complexity\n// External size: 90 mm long, 40 mm wide, 35 mm high (closed)\n// 3D-printable – all slopes ≥45°, 2 mm wall thickness, no internal overhangs.\n\n// Parameters\nbodyL = 85;          // main body length\nbodyW = 36;          // main body width\nbodyH = 25;          // main body height\nwall = 2;            // wall thickness\nlidH = 8;            // lid height\nhandleR = 3;         // handle radius\nhandleL = 12;        // handle length\nslope = 0.4;         // side slope factor (0.5 = 45°)\n\n// --- Main Body ---\nmodule coffinBody(){\n    // trapezoidal cross-section\n    bottomW = bodyW;\n    topW    = bodyW - 2*(bodyH*slope);\n\n    // outer shell\n    difference(){\n        hull(){\n            translate([-bodyL/2, -bottomW/2, 0])\n                cube([bodyL, bottomW, bodyH], center=false);\n            translate([-bodyL/2, -topW/2,    bodyH])\n                cube([bodyL, topW,    1], center=false);\n        }\n\n        // hollow inside\n        hull(){\n            translate([-bodyL/2+wall, -(bottomW-2*wall)/2, wall])\n                cube([bodyL-2*wall, bottomW-2*wall, bodyH], center=false);\n            translate([-bodyL/2+wall, -(topW-2*wall)/2,    bodyH])\n                cube([bodyL-2*wall, topW-2*wall,    1], center=false);\n        }\n    }\n}\n\n// --- Lid ---\nmodule coffinLid(){\n    difference(){\n        // outer lid wedge\n        hull(){\n            translate([-bodyL/2-2, -bodyW/2-2, 0])\n                cube([bodyL+4, bodyW+4, 1], center=false);\n            translate([-bodyL/2-2, -(bodyW-bodyH*slope)/2, lidH])\n                cube([bodyL+4, bodyW-bodyH*slope, 1], center=false);\n        }\n\n        // inner cavity\n        hull(){\n            translate([-bodyL/2, -(bodyW-2*wall)/2, wall])\n                cube([bodyL, bodyW-2*wall, lidH], center=false);\n            translate([-bodyL/2, -(bodyW-bodyH*slope)/2+wall, lidH])\n                cube([bodyL, bodyW-bodyH*slope-2*wall, 1], center=false);\n        }\n    }\n}\n\n// --- Handles for lid ---\nmodule handles(){\n    for(side=[-1,1]){\n        translate([0, side*(bodyW/2+handleR+1), lidH/2])\n            rotate([0,90,0])\n                cylinder(h=handleL, r=handleR, $fn=16);\n    }\n}\n\n// --- Assembly ---\nunion(){\n    coffinBody();\n    translate([0,0,bodyH])\n        coffinLid();\n    translate([0,0,bodyH])\n        handles();\n}",
    "renders": true
  },
  {
    "household_item": "cubby",
    "openscad_code": "// Realistic cubby for stationery items\n// External dimensions: 80 x 50 x 100 mm\n// Wall thickness: 2 mm throughout\n// All edges filleted with 1 mm radius to avoid sharp corners\n// Printable without supports (no overhangs >45°)\n\n$fn = 48;  // Smooth curves\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([80, 50, 100], center = true);\n            sphere(1);\n        }\n        // Hollow interior\n        translate([0, 0, 2])\n            cube([76, 46, 98], center = true);\n    }\n}\n\n// Dividing shelf between compartments\nmodule shelf() {\n    translate([0, 0, 30])  // Positioned 30 mm from bottom\n        cube([76, 46, 2], center = true);\n}\n\n// Front lip to prevent items from falling out\nmodule front_lip() {\n    translate([0, 23.5, 50])\n        cube([78, 3, 48], center = true);\n}\n\n// Optional label plate on front face\nmodule label_plate() {\n    translate([0, 25, 70])\n        cube([30, 1, 10], center = true);\n}\n\n// Ventilation holes on back panel\nmodule vent_holes() {\n    for (x = [-30, -15, 0, 15, 30])\n        for (z = [10:20:90])\n            translate([x, -24.5, z])\n                cylinder(h = 3, r = 2, center = true);\n}\n\n// Small holes for mounting screws on back\nmodule mounting_holes() {\n    for (x = [-30, 30])\n        translate([x, -24.5, 85])\n            cylinder(h = 3, r = 1.5, center = true);\n}\n\n// Assemble all parts\nunion() {\n    body_shell();\n    shelf();\n    front_lip();\n    label_plate();\n    \n    difference() {\n        body_shell();\n        vent_holes();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "locker",
    "openscad_code": "// Realistic Locker - Medium Complexity\n// Overall size: 45mm x 30mm x 80mm (WxDxH)\n\n// Parameters\nwall_thickness = 2;\ndoor_gap = 0.5;\nhinge_radius = 1.5;\nhandle_radius = 2;\nhandle_length = 8;\nvent_hole_radius = 1.5;\n\n// Main locker body\nmodule locker_body() {\n    difference() {\n        // Outer shell\n        cube([45, 30, 80]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([45 - 2*wall_thickness, 30 - wall_thickness, 80 - wall_thickness]);\n        \n        // Door opening\n        translate([0, wall_thickness + door_gap, wall_thickness])\n            cube([door_gap, 30 - 2*wall_thickness - door_gap, 80 - 2*wall_thickness]);\n    }\n}\n\n// Door\nmodule locker_door() {\n    // Door panel\n    difference() {\n        translate([wall_thickness + door_gap, wall_thickness + door_gap, wall_thickness])\n            cube([45 - 2*wall_thickness - door_gap, 30 - 2*wall_thickness - 2*door_gap, 80 - 2*wall_thickness - 2]);\n        \n        // Handle recess\n        translate([45 - 2*wall_thickness - door_gap - 5, 15 - handle_radius/2, 40 - handle_length/2])\n            cube([handle_radius, handle_radius, handle_length]);\n    }\n    \n    // Handle\n    translate([45 - 2*wall_thickness - door_gap - 5 + handle_radius/2, 15, 40])\n        rotate([90, 0, 0])\n            cylinder(h=handle_radius, r=handle_radius, $fn=16);\n    \n    // Door vents\n    for(i=[1:4]) {\n        translate([wall_thickness + door_gap + 5, wall_thickness + door_gap + 5, i*15])\n            cylinder(h=30 - 2*wall_thickness - 4*door_gap - 10, r=vent_hole_radius, $fn=16);\n    }\n}\n\n// Hinges\nmodule hinges() {\n    for(pos=[20, 60]) {\n        // Left hinge\n        translate([wall_thickness, wall_thickness + door_gap, pos])\n            cylinder(h=wall_thickness + door_gap, r=hinge_radius, $fn=16);\n        \n        // Right hinge\n        translate([wall_thickness, wall_thickness + door_gap, pos])\n            rotate([0, 0, 90])\n                translate([0, -wall_thickness - door_gap, 0])\n                    cylinder(h=wall_thickness + door_gap, r=hinge_radius, $fn=16);\n    }\n}\n\n// Ventilation slots on sides\nmodule side_vents() {\n    difference() {\n        // Side panel\n        translate([0, 0, 0])\n            cube([wall_thickness, 30, 80]);\n        \n        // Vent slots\n        for(i=[1:6]) {\n            translate([0, 5, i*12])\n                cube([wall_thickness + 1, 20, 3]);\n        }\n    }\n}\n\n// Locker feet\nmodule feet() {\n    for(x=[5, 40]) {\n        translate([x, 5, 0])\n            cube([5, 5, wall_thickness]);\n        translate([x, 20, 0])\n            cube([5, 5, wall_thickness]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    locker_body();\n    \n    // Side panels with vents\n    translate([0, 0, 0])\n        side_vents();\n    translate([45 - wall_thickness, 0, 0])\n        mirror([1, 0, 0])\n            side_vents();\n    \n    // Top and bottom\n    translate([0, 0, 0])\n        cube([45, 30, wall_thickness]);\n    translate([0, 0, 80 - wall_thickness])\n        cube([45, 30, wall_thickness]);\n    \n    // Back panel\n    translate([0, 30 - wall_thickness, 0])\n        cube([45, wall_thickness, 80]);\n    \n    // Door assembly\n    translate([0, 0, 0])\n        locker_door();\n    \n    // Hinges\n    hinges();\n    \n    // Feet\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "armrest",
    "openscad_code": "// Realistic medium-complexity 3D-printable armrest\n// Overall size ≈ 90 mm long × 35 mm wide × 30 mm high\n\n// Basic dimensions\narmrest_length = 90;\narmrest_width  = 35;\narmrest_height = 30;\n\n// Wall / padding thickness\nwall = 2;\n\n// Rounded top cushion module\nmodule cushion() {\n    // Main pad body\n    translate([0, 0, armrest_height - 8])\n        minkowski() {\n            cube([armrest_length - 8, armrest_width - 8, 6], center = true);\n            sphere(4);\n        }\n\n    // Soft edge fillets along long sides\n    for (side = [-1, 1])\n        translate([0, side * (armrest_width / 2 - 2), armrest_height - 5])\n            rotate([0, 90, 0])\n                cylinder(h = armrest_length - 6, r = 2, center = true);\n}\n\n// Mounting plate with screw holes\nmodule mount() {\n    plate_thick = 3;\n    plate_len   = 60;\n    plate_wid   = 25;\n\n    difference() {\n        // Plate body\n        translate([0, 0, plate_thick / 2])\n            cube([plate_len, plate_wid, plate_thick], center = true);\n        // Two screw holes (M3)\n        for (x = [-20, 20])\n            translate([x, 0, -1])\n                cylinder(h = plate_thick + 2, r = 1.6, $fn = 16);\n    }\n}\n\n// Strengthening ribs under cushion\nmodule ribs() {\n    rib_h = armrest_height - 8 - wall;\n    for (x = [-30, -10, 10, 30])\n        translate([x, 0, rib_h / 2 + wall])\n            cube([2, armrest_width - 2 * wall, rib_h], center = true);\n}\n\n// Hollow shell base\nmodule shell() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([armrest_length, armrest_width, armrest_height], center = true);\n            sphere(2);\n        }\n\n        // Hollow cavity\n        translate([0, 0, -2])  // shift slightly down to keep bottom closed\n            cube([\n                armrest_length - 2 * wall,\n                armrest_width  - 2 * wall,\n                armrest_height - wall + 2\n            ], center = true);\n    }\n}\n\n// Final assembly\nunion() {\n    shell();\n    translate([0, 0, 0])\n        mount();\n    ribs();\n    cushion();\n}",
    "renders": true
  },
  {
    "household_item": "backrest",
    "openscad_code": "// Realistic-Style 3D-Printable Backrest (medium complexity)\n// Approx 90 mm high, 80 mm wide, 20 mm deep\n// No overhangs ≥ 45°, 2 mm wall thickness\n\n$fn = 32;\n\nmodule roundedCube(size, radius) {\n    // Helper for rounded corners\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        sphere(r = radius);\n    }\n}\n\nmodule backPanel() {\n    // Main curved back panel\n    difference() {\n        // Outer shell\n        translate([-40, 0, 0])\n        rotate([0, 10, 0])\n        roundedCube([80, 20, 90], 5);\n\n        // Inner cavity for weight reduction\n        translate([-38, 2, 5])\n        rotate([0, 10, 0])\n        roundedCube([76, 16, 80], 4);\n    }\n}\n\nmodule lumbarSupport() {\n    // Lumbar curve bulge\n    translate([0, 10, 30])\n    rotate([0, 10, 0])\n    scale([1, 0.6, 1])\n    sphere(d = 40);\n}\n\nmodule verticalSlats() {\n    // Vertical ventilation slats\n    for (x = [-30:10:30]) {\n        translate([x, 9, 45])\n        cube([4, 2, 40]);\n    }\n}\n\nmodule mountingHoles() {\n    // Keyhole-shaped mounting slots\n    for (z = [20:30:70]) {\n        translate([0, -9, z])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d1 = 8, d2 = 4);\n    }\n}\n\nmodule armrestPegs() {\n    // Optional armrest attachment pegs\n    for (y = [-1, 1]) {\n        translate([y * 35, 0, 50])\n        rotate([0, 90, 0])\n        cylinder(h = 15, d = 6);\n    }\n}\n\n// Assembly\nunion() {\n    backPanel();\n    lumbarSupport();\n    verticalSlats();\n    mountingHoles();\n    armrestPegs();\n}",
    "renders": true
  },
  {
    "household_item": "seat",
    "openscad_code": "// Realistic Chair Seat – OpenSCAD\n// Dimensions chosen for ~80 mm max, 2 mm wall, printable without supports\n\nchairWidth  = 60;   // overall seat width  (X)\nchairDepth  = 55;   // overall seat depth  (Y)\nchairHeight = 35;   // overall seat height (Z)\nwallThick   = 2;    // printable wall thickness\n\n// --- helper for rounded square extrusion ---\nmodule roundedRect(w, d, h, r) {\n    linear_extrude(height = h, center = true)\n        offset(r = r)\n            square([w, d], center = true);\n}\n\n// --- seat top with slight ergonomic dip ---\nmodule seatTop() {\n    difference() {\n        // main slab\n        roundedRect(chairWidth, chairDepth, 5, 3);\n        // shallow dip for comfort (ellipse)\n        translate([0, 0, 2.6])\n            scale([1, 0.7, 1])\n                cylinder(h = 3, d = chairWidth * 0.8, center = true);\n    }\n}\n\n// --- rear support (solid backrest) ---\nmodule backRest() {\n    union() {\n        // back panel\n        translate([0, -chairDepth/2 + 2.5, chairHeight/2 - 2.5])\n            roundedRect(chairWidth, 5, chairHeight - 5, 3);\n        \n        // two vertical strengthening ribs inside\n        for (x = [-chairWidth/3, chairWidth/3]) {\n            translate([x, -chairDepth/2 + 2.5, chairHeight/2 - 2.5])\n                cube([wallThick * 3, 5, chairHeight - 5], center = true);\n        }\n    }\n}\n\n// --- leg cross-brace ---\nmodule brace() {\n    translate([0, 0, 8])\n        roundedRect(chairWidth - 10, chairDepth - 10, wallThick, 2);\n}\n\n// --- four legs ---\nmodule legs() {\n    for (x = [-chairWidth/2 + 4, chairWidth/2 - 4])\n        for (y = [-chairDepth/2 + 4, chairDepth/2 - 4]) {\n            translate([x, y, chairHeight/2 - 12])\n                cylinder(h = chairHeight - 12, d = 4, center = true);\n        }\n}\n\n// --- final assembly ---\nunion() {\n    seatTop();\n    backRest();\n    brace();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "cushion",
    "openscad_code": "// Realistic 3D printable cushion with medium complexity\n// Dimensions: 60mm x 60mm x 18mm\n\n// Main parameters\ncushion_size = 60;\ncushion_height = 18;\ncorner_radius = 8;\nseam_width = 2;\nbutton_radius = 4;\nwall_thickness = 1.5;\n\n// Create the main cushion body\nmodule cushion_body() {\n    // Base rounded cushion shape\n    difference() {\n        // Main rounded box\n        minkowski() {\n            cube([cushion_size - 2*corner_radius, cushion_size - 2*corner_radius, cushion_height - corner_radius], center = true);\n            sphere(r = corner_radius);\n        }\n        \n        // Hollow out the inside for 3D printing\n        translate([0, 0, -wall_thickness/2])\n            scale([0.9, 0.9, 0.8])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius, cushion_size - 2*corner_radius, cushion_height - corner_radius], center = true);\n                sphere(r = corner_radius - wall_thickness);\n            }\n    }\n}\n\n// Create seam lines on the top surface\nmodule seam_lines() {\n    for (i = [-1, 1]) {\n        translate([i * cushion_size/4, 0, cushion_height/2 - 0.5])\n            rotate([90, 0, 0])\n                cylinder(h = cushion_size, r = seam_width/2, center = true);\n        \n        translate([0, i * cushion_size/4, cushion_height/2 - 0.5])\n            rotate([0, 90, 0])\n                cylinder(h = cushion_size, r = seam_width/2, center = true);\n    }\n}\n\n// Create tufted buttons\nmodule tufted_buttons() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * cushion_size/4, y * cushion_size/4, cushion_height/2 - button_radius/2])\n                difference() {\n                    sphere(r = button_radius);\n                    translate([0, 0, -button_radius/2])\n                        cube([button_radius*2, button_radius*2, button_radius], center = true);\n                }\n            \n            // Button indentations\n            translate([x * cushion_size/4, y * cushion_size/4, cushion_height/2 - button_radius])\n                cylinder(h = button_radius + 1, r = button_radius * 0.6, $fn = 20);\n        }\n    }\n}\n\n// Create beveled edges for realistic look\nmodule beveled_edges() {\n    // Top edge bevel\n    difference() {\n        translate([0, 0, cushion_height/2 - 1])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius, cushion_size - 2*corner_radius, 2], center = true);\n                sphere(r = corner_radius);\n            }\n        \n        translate([0, 0, cushion_height/2])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius - 2, cushion_size - 2*corner_radius - 2, 2], center = true);\n                sphere(r = corner_radius - 1);\n            }\n    }\n    \n    // Bottom edge bevel\n    difference() {\n        translate([0, 0, -cushion_height/2 + 1])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius, cushion_size - 2*corner_radius, 2], center = true);\n                sphere(r = corner_radius);\n            }\n        \n        translate([0, 0, -cushion_height/2])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius - 2, cushion_size - 2*corner_radius - 2, 2], center = true);\n                sphere(r = corner_radius - 1);\n            }\n    }\n}\n\n// Create fabric texture pattern\nmodule fabric_texture() {\n    texture_height = 0.3;\n    spacing = 3;\n    \n    for (x = [-cushion_size/2 + spacing : spacing : cushion_size/2 - spacing]) {\n        for (y = [-cushion_size/2 + spacing : spacing : cushion_size/2 - spacing]) {\n            // Skip areas near buttons\n            if (abs(x) > cushion_size/6 || abs(y) > cushion_size/6) {\n                translate([x, y, cushion_height/2 - texture_height])\n                    cube([1, 1, texture_height], center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    cushion_body();\n    \n    // Add surface details only to top\n    translate([0, 0, 0]) {\n        seam_lines();\n        tufted_buttons();\n        beveled_edges();\n        fabric_texture();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pillow",
    "openscad_code": "// Realistic 3D-printable pillow in OpenSCAD\n// Approx 60 x 40 x 12 mm – fits most FDM printers\n// No overhangs > 45°, 1.2 mm wall thickness\n\n$fn = 32;        // smooth curves for 3D printing\neps = 0.01;      // tiny offset to avoid Z-fighting\n\n// overall pillow envelope\nmodule pillow_body() {\n    // rounded cushion by intersecting stretched spheres\n    intersection() {\n        scale([1, 0.65, 0.2])\n            sphere(d=60);          // main bulge\n        translate([0, 0, -6])\n            cube([62, 42, 24], center=true);\n    }\n}\n\n// subtle seam line around the edge\nmodule seam() {\n    hull() {\n        for (a = [0:30:330])\n            translate([30*cos(a), 20*sin(a), 0])\n                cylinder(d1=1.4, d2=1.0, h=0.6, center=true);\n    }\n}\n\n// repeating quilted squares on top\nmodule quilt_pattern() {\n    for (x = [-22:11:22])\n        for (y = [-16:11:16]) {\n            translate([x, y, 6-eps]) {\n                difference() {\n                    cube([9, 9, 1.2], center=true);       // stitch ridge\n                    cube([7, 7, 1.3], center=true);       // recessed square\n                }\n            }\n        }\n}\n\n// small puffy corners (add realism)\nmodule corner_puffs() {\n    for (dx = [-1, 1])\n        for (dy = [-1, 1])\n            translate([dx*27, dy*18, 0])\n                scale([1, 0.7, 0.4])\n                    sphere(d=12, center=true);\n}\n\n// assemble the pillow\nunion() {\n    // main cushion\n    pillow_body();\n    \n    // top surface details\n    translate([0, 0, 5-eps]) {\n        quilt_pattern();\n        color(\"dimgray\") seam();\n    }\n    \n    // bottom surface details (mirror for symmetry)\n    mirror([0, 0, 1]) {\n        translate([0, 0, 5-eps]) {\n            quilt_pattern();\n            color(\"dimgray\") seam();\n        }\n    }\n    \n    // corner puffs on both sides\n    corner_puffs();\n    mirror([0, 0, 1]) corner_puffs();\n}",
    "renders": true
  },
  {
    "household_item": "blanket",
    "openscad_code": "// Realistic 3D printable blanket model with medium complexity\n// Base blanket dimensions (50 x 80 mm)\nblanket_length = 80;\nblanket_width = 50;\nblanket_thickness = 2;\nhem_thickness = 0.6;\nhem_width = 3;\n\n// Stitch pattern parameters\nstitch_width = 2;\nstitch_length = 2.5;\nstitch_height = 0.3;\nstitch_spacing = 3;\n\n// Fold parameters\nfold_depth = 8;\nfold_spacing = 12;\n\n// Render the complete blanket\nunion() {\n    // Main blanket body with hem\n    difference() {\n        // Base blanket\n        cube([blanket_width, blanket_length, blanket_thickness]);\n        \n        // Hollow out center for realistic thickness\n        translate([hem_width, hem_width, -0.1])\n            cube([blanket_width - 2*hem_width, blanket_length - 2*hem_width, blanket_thickness + 0.2]);\n    }\n    \n    // Top hem\n    translate([0, 0, blanket_thickness])\n        cube([blanket_width, hem_width, hem_thickness]);\n    \n    // Bottom hem\n    translate([0, blanket_length - hem_width, blanket_thickness])\n        cube([blanket_width, hem_width, hem_thickness]);\n    \n    // Left hem\n    translate([0, 0, blanket_thickness])\n        cube([hem_width, blanket_length, hem_thickness]);\n    \n    // Right hem\n    translate([blanket_width - hem_width, 0, blanket_thickness])\n        cube([hem_width, blanket_length, hem_thickness]);\n    \n    // Create folded appearance\n    for (y = [fold_spacing : fold_spacing : blanket_length - fold_spacing]) {\n        translate([0, y, blanket_thickness + hem_thickness + 0.1])\n            linear_extrude(height = 0.5)\n                square([blanket_width, 1]);\n    }\n    \n    // Stitch pattern on surface\n    module stitch(x, y) {\n        translate([x, y, blanket_thickness + 0.1])\n            scale([1, 1.2, 1])\n                sphere(stitch_height, $fn=8);\n    }\n    \n    // Create knit pattern across blanket\n    for (x = [stitch_spacing/2 : stitch_spacing : blanket_width - stitch_spacing/2]) {\n        for (y = [stitch_spacing/2 : stitch_spacing : blanket_length - stitch_spacing/2]) {\n            // Offset every other row for realistic knit pattern\n            offset = (y / stitch_spacing) % 2 ? stitch_spacing/2 : 0;\n            stitch(x + offset, y);\n        }\n    }\n    \n    // Add subtle wrinkles for realism\n    module wrinkle(x, y, angle) {\n        translate([x, y, blanket_thickness + 0.2]) {\n            rotate([0, 0, angle])\n                scale([1, 0.3, 0.1])\n                    cylinder(h = 3, r = 2, $fn=16);\n        }\n    }\n    \n    // Random wrinkles across surface\n    wrinkle(15, 20, 30);\n    wrinkle(35, 45, -20);\n    wrinkle(25, 65, 45);\n    wrinkle(40, 15, -35);\n    wrinkle(10, 55, 15);\n    \n    // Corner tassels\n    module tassel(x, y) {\n        translate([x, y, -1]) {\n            // Tassel body\n            cylinder(h = 4, r1 = 1, r2 = 0.5, $fn=8);\n            \n            // Individual threads\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([0.3, 0, -0.5])\n                        cylinder(h = 5, r = 0.1, $fn=4);\n            }\n        }\n    }\n    \n    // Add tassels at corners\n    tassel(1, 1);\n    tassel(blanket_width - 1, 1);\n    tassel(1, blanket_length - 1);\n    tassel(blanket_width - 1, blanket_length - 1);\n}",
    "renders": true
  },
  {
    "household_item": "quilt",
    "openscad_code": "// Quilt Block Parameters\n$fn = 24;  // Smooth curves for 3D printing\nblock_size = 15;  // Each quilt square\nthickness = 2;   // Quilt thickness\npadding = 0.5;   // Gap between squares\nborder = 2;      // Border thickness\n\n// Overall quilt dimensions\nblocks_x = 5;\nblocks_y = 5;\nquilt_width = blocks_x * block_size + (blocks_x - 1) * padding + 2 * border;\nquilt_length = blocks_y * block_size + (blocks_y - 1) * padding + 2 * border;\n\n// Quilt base\ndifference() {\n    // Main quilt rectangle\n    translate([0, 0, 0])\n        cube([quilt_width, quilt_length, thickness]);\n    \n    // Hollow out center for realistic quilt thickness\n    translate([border, border, -0.1])\n        cube([quilt_width - 2*border, quilt_length - 2*border, thickness + 0.2]);\n}\n\n// Generate quilt pattern\nmodule quilt_square(x, y, pattern_type) {\n    translate([border + x * (block_size + padding), \n               border + y * (block_size + padding), \n               thickness - 0.5]) {\n        \n        // Base square\n        color(\"beige\")\n            cube([block_size, block_size, 0.5]);\n        \n        // Pattern based on type\n        if (pattern_type == 0) {\n            // Diamond pattern\n            difference() {\n                cube([block_size, block_size, 0.3]);\n                rotate([0, 0, 45])\n                    cube([block_size * 0.7, block_size * 0.7, 0.5]);\n            }\n        } else if (pattern_type == 1) {\n            // Circle pattern\n            translate([block_size/2, block_size/2, 0])\n                cylinder(h = 0.3, r = block_size * 0.35);\n        } else {\n            // Cross pattern\n            cube([block_size * 0.3, block_size, 0.3]);\n            cube([block_size, block_size * 0.3, 0.3]);\n        }\n    }\n}\n\n// Generate the quilt pattern grid\nfor (x = [0 : blocks_x - 1]) {\n    for (y = [0 : blocks_y - 1]) {\n        pattern = (x + y) % 3;\n        quilt_square(x, y, pattern);\n    }\n}\n\n// Stitching lines between squares\nmodule stitching_line(x1, y1, x2, y2) {\n    translate([x1, y1, thickness - 0.2]) {\n        rotate([0, 0, atan2(y2 - y1, x2 - x1)])\n            cube([sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)), 0.5, 0.2]);\n    }\n}\n\n// Add stitching\nfor (x = [0 : blocks_x]) {\n    for (y = [0 : blocks_y - 1]) {\n        stitching_line(\n            border + x * (block_size + padding) - padding/2,\n            border + y * (block_size + padding) + block_size/2,\n            border + x * (block_size + padding) + block_size + padding/2,\n            border + y * (block_size + padding) + block_size/2\n        );\n    }\n}\n\nfor (y = [0 : blocks_y]) {\n    for (x = [0 : blocks_x - 1]) {\n        stitching_line(\n            border + x * (block_size + padding) + block_size/2,\n            border + y * (block_size + padding) - padding/2,\n            border + x * (block_size + padding) + block_size/2,\n            border + y * (block_size + padding) + block_size + padding/2\n        );\n    }\n}\n\n// Corner tassels\nmodule tassel(x, y) {\n    translate([x, y, 0]) {\n        // Tassel base\n        cylinder(h = 3, r = 1.5);\n        \n        // Tassel strands\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n                translate([1, 0, 0])\n                    cylinder(h = 4, r = 0.3);\n        }\n    }\n}\n\n// Add tassels at corners\ntassel(0, 0);\ntassel(quilt_width, 0);\ntassel(0, quilt_length);\ntassel(quilt_width, quilt_length);",
    "renders": true
  },
  {
    "household_item": "duvet",
    "openscad_code": "// Realistic medium-complexity duvet model for 3D printing\n// Overall dimensions: 80 x 60 x 12 mm\n\n// Parameters\nduvet_w = 80;\nduvet_l = 60;\nduvet_t = 12;\nwall_thickness = 1.2;\nseam_offset = 2;\nstitch_spacing = 4;\n\n// Main duvet body with hollow interior\nmodule duvet_shell() {\n    difference() {\n        // Outer soft shell\n        rounded_box(duvet_w, duvet_l, duvet_t, 3);\n        \n        // Hollow inside\n        translate([0, 0, -wall_thickness/2])\n            rounded_box(duvet_w - wall_thickness*2, duvet_l - wall_thickness*2, duvet_t - wall_thickness, 2.5);\n    }\n}\n\n// Helper module for rounded box with soft edges\nmodule rounded_box(w, l, h, r) {\n    hull() {\n        for (i = [-1, 1])\n        for (j = [-1, 1])\n        for (k = [-1, 1])\n            translate([i*(w/2 - r), j*(l/2 - r), k*(h/2 - r)])\n                sphere(r);\n    }\n}\n\n// Quilted stitching pattern\nmodule stitching() {\n    for (x = [-duvet_w/2 + seam_offset : stitch_spacing : duvet_w/2 - seam_offset]) {\n        for (y = [-duvet_l/2 + seam_offset : stitch_spacing : duvet_l/2 - seam_offset]) {\n            translate([x, y, duvet_t/2 - 0.3])\n                cylinder(h=0.6, r=0.4, $fn=8);\n        }\n    }\n}\n\n// Corner seams\nmodule corner_seams() {\n    for (x = [-1, 1])\n    for (y = [-1, 1]) {\n        translate([x*(duvet_w/2 - seam_offset), y*(duvet_l/2 - seam_offset), 0])\n            difference() {\n                cylinder(h=duvet_t, r=seam_offset*0.7, $fn=16);\n                translate([0, 0, 1])\n                    cylinder(h=duvet_t-2, r=seam_offset*0.7 - wall_thickness, $fn=16);\n            }\n    }\n}\n\n// Fabric texture pattern\nmodule fabric_texture() {\n    difference() {\n        // Top surface with subtle texture\n        translate([0, 0, duvet_t/2 - 0.2])\n            cube([duvet_w - 2, duvet_l - 2, 0.4], center=true);\n        \n        // Tiny dimples for fabric look\n        for (x = [-duvet_w/2 + 2 : 1.5 : duvet_w/2 - 2]) {\n            for (y = [-duvet_l/2 + 2 : 1.5 : duvet_l/2 - 2]) {\n                if ((x + y) % 3 == 0) {\n                    translate([x, y, duvet_t/2 - 0.1])\n                        sphere(r=0.2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    duvet_shell();\n    \n    // Add stitching details\n    translate([0, 0, 0])\n        stitching();\n    \n    // Corner seam details\n    corner_seams();\n    \n    // Fabric texture on top\n    fabric_texture();\n    \n    // Subtle fold lines\n    translate([0, -duvet_l/4, duvet_t/2 - 0.5])\n        scale([0.8, 0.05, 0.3])\n            sphere(r=1);\n    \n    translate([0, duvet_l/4, duvet_t/2 - 0.5])\n        scale([0.8, 0.05, 0.3])\n            sphere(r=1);\n}",
    "renders": true
  },
  {
    "household_item": "comforter",
    "openscad_code": "// Realistic 3D-Printable Comforter – medium complexity\n// Designed for FDM printing: 0.8 mm wall thickness, no overhangs > 45°\n\n$fa = 2;\n$fs = 0.5;\n\n// overall comforter dimensions (in mm, scaled for desktop printing)\nlength = 90;\nwidth  = 65;\nheight = 6;\n\n// wall thickness for printability\nwall = 0.8;\n\nmodule comforter_body() {\n    // main quilted slab\n    difference() {\n        cube([length, width, height], center = true);\n        // hollow out inside to leave only walls\n        translate([0, 0, wall/2])\n            cube([length-wall*2, width-wall*2, height-wall], center = true);\n    }\n}\n\n// single square puff\nmodule single_puff(s) {\n    difference() {\n        // rounded top puff\n        translate([0, 0, s/2])\n            scale([1, 1, 0.5])\n                sphere(d = s, $fn = 16);\n        // cut flat bottom\n        translate([0, 0, -0.1])\n            cube([s*1.1, s*1.1, s], center = true);\n    }\n}\n\n// generate quilted grid of puffs\nmodule quilted_surface() {\n    puff_size = 7;\n    step = puff_size * 1.2;\n    rows = floor(width / step);\n    cols = floor(length / step);\n\n    for (i = [0 : cols-1])\n        for (j = [0 : rows-1])\n            translate([\n                -length/2 + step/2 + i*step,\n                -width/2  + step/2 + j*step,\n                height/2 - wall\n            ])\n                single_puff(puff_size);\n}\n\n// simple folded corner to show fabric drape\nmodule folded_corner() {\n    translate([length/2-8, width/2-8, 0])\n    rotate([0, 0, 90])\n    difference() {\n        cylinder(h = 10, r1 = 8, r2 = 8, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = 12, r1 = 6, r2 = 6, $fn = 32);\n    }\n}\n\n// assembly\nunion() {\n    comforter_body();\n    quilted_surface();\n    folded_corner();\n    mirror([1, 0, 0]) folded_corner();\n    mirror([0, 1, 0]) folded_corner();\n    mirror([1, 1, 0]) folded_corner();\n}",
    "renders": true
  },
  {
    "household_item": "sheet",
    "openscad_code": "// OpenSCAD code for a realistic 3D printable sheet\n// Dimensions: 80mm x 60mm x 1.2mm overall\n\n// Overall sheet dimensions\nsheet_w = 80;\nsheet_h = 60;\nsheet_t = 0.6;\n\n// Corner radius\ncorner_r = 5;\n\n// Hole spacing and size\nhole_d = 2.5;\nhole_margin = 8;\nhole_pitch_x = 20;\nhole_pitch_y = 20;\n\n// Reinforcement thickness\nrib_t = 0.6;\n\nmodule rounded_sheet(w, h, t, r) {\n    difference() {\n        // Base sheet with rounded corners\n        offset(r = r) {\n            offset(delta = -r) {\n                square([w, h], center = true);\n            }\n        }\n        // Cut out inner rounded rectangle to create frame\n        offset(r = r - 1) {\n            offset(delta = -(r - 1)) {\n                square([w - 2, h - 2], center = true);\n            }\n        }\n    }\n    linear_extrude(height = t, center = true) {\n        offset(r = r) {\n            offset(delta = -r) {\n                square([w, h], center = true);\n            }\n        }\n    }\n}\n\nmodule sheet_with_holes() {\n    difference() {\n        // Main sheet body\n        union() {\n            // Base layer\n            linear_extrude(height = sheet_t, center = true)\n                offset(r = corner_r)\n                    offset(delta = -corner_r)\n                        square([sheet_w, sheet_h], center = true);\n            \n            // Edge reinforcement ribs\n            // Top and bottom ribs\n            for (x = [-sheet_w/2 + 5 : 10 : sheet_w/2 - 5]) {\n                translate([x, 0, 0])\n                    cube([8, sheet_h - 2*corner_r, rib_t], center = true);\n            }\n            // Left and right ribs\n            for (y = [-sheet_h/2 + 5 : 10 : sheet_h/2 - 5]) {\n                translate([0, y, 0])\n                    cube([sheet_w - 2*corner_r, 8, rib_t], center = true);\n            }\n            \n            // Corner gussets\n            for (x = [-1, 1]) {\n                for (y = [-1, 1]) {\n                    translate([x*(sheet_w/2 - corner_r), \n                              y*(sheet_h/2 - corner_r), 0])\n                        rotate([0, 0, x*y*45])\n                            cube([corner_r*sqrt(2), corner_r*sqrt(2), rib_t], center = true);\n                }\n            }\n        }\n        \n        // Mounting holes grid\n        for (x = [-sheet_w/2 + hole_margin : hole_pitch_x : sheet_w/2 - hole_margin]) {\n            for (y = [-sheet_h/2 + hole_margin : hole_pitch_y : sheet_h/2 - hole_margin]) {\n                translate([x, y, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = sheet_t*2, d = hole_d, center = true, $fn = 24);\n            }\n        }\n        \n        // Central label area cutout (optional)\n        translate([0, 0, sheet_t/2 + 0.1])\n            cube([30, 15, sheet_t + 0.2], center = true);\n    }\n}\n\n// Generate the sheet\nsheet_with_holes();",
    "renders": true
  },
  {
    "household_item": "bedspread",
    "openscad_code": "// Realistic 3D-printable bedspread model (medium complexity)\n// Outer dimensions: ~80 mm x 60 mm x 3 mm\n// Wall thickness: 1 mm for printability\n\n// Global parameters\nbedspread_length = 80;\nbedspread_width  = 60;\nthickness        = 3;\nwall             = 1;\n\nmodule bedspread() {\n    // Main fabric body with rounded corners\n    difference() {\n        // Base slab\n        cube([bedspread_length, bedspread_width, thickness], center = true);\n        \n        // Hollow inside to reduce material\n        translate([0, 0, -wall/2])\n            cube([bedspread_length - 2*wall, bedspread_width - 2*wall, thickness + wall], center = true);\n    }\n    \n    // Quilted squares pattern\n    module quilt_square(x, y) {\n        translate([x, y, thickness/2 - 0.5]) {\n            // Slightly raised square\n            cube([4, 4, 1], center = true);\n            // Tiny depression in center\n            translate([0, 0, 0.5])\n                cube([2, 2, 0.5], center = true);\n        }\n    }\n    \n    // Generate quilt grid\n    for (i = [-35:10:35])\n        for (j = [-25:10:25])\n            quilt_square(i, j);\n    \n    // Hanging folds at edges\n    module fold(x, y, angle) {\n        translate([x, y, 0])\n        rotate([angle, 0, 0])\n            scale([1, 1.2, 0.8])\n                cube([6, 2, 2], center = true);\n    }\n    \n    // Add gentle folds along sides\n    for (i = [-35:10:35])\n        fold(i, 30, 10);\n    for (i = [-35:10:35])\n        fold(i, -30, -10);\n    \n    // Corner tassels\n    module tassel(x, y) {\n        translate([x, y, -thickness/2 - 2]) {\n            // String\n            cylinder(h = 4, r = 0.5, $fn = 8);\n            // Tassel ball\n            translate([0, 0, -2.5])\n                sphere(r = 1.5, $fn = 12);\n        }\n    }\n    \n    // Place tassels at corners\n    tassel( bedspread_length/2 - 2,  bedspread_width/2 - 2);\n    tassel(-bedspread_length/2 + 2,  bedspread_width/2 - 2);\n    tassel( bedspread_length/2 - 2, -bedspread_width/2 + 2);\n    tassel(-bedspread_length/2 + 2, -bedspread_width/2 + 2);\n    \n    // Subtle pillow bump under top\n    translate([0, 20, -thickness/2 - 1])\n        scale([30, 15, 2])\n            sphere(r = 1, $fn = 20);\n}\n\n// Render the bedspread\nbedspread();",
    "renders": true
  },
  {
    "household_item": "canopy",
    "openscad_code": "// Realistic medium-complexity canopy (gazebo style)\n// Overall printable size ~70 mm tall, 80 mm wide\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule roof_tile(x=0, y=0, a=0) {\n    translate([x, y, 0])\n    rotate([0, 0, a])\n    linear_extrude(height=1.2)\n    polygon(points=[[0,0],[12,0],[11,2],[1,2]]);\n}\n\nmodule hexagon(r, h) {\n    for(i=[0:5])\n    rotate([0,0,i*60])\n    translate([r,0,h/2])\n    cube([r, wall, h], center=true);\n}\n\nmodule post(h) {\n    // Base footing\n    cylinder(h=2, d1=6, d2=5, $fn=12);\n    translate([0,0,2])\n    // Main post\n    cylinder(h=h-2, d=4, $fn=8);\n}\n\n// Central hub\nmodule hub() {\n    difference() {\n        cylinder(h=8, d=12, $fn=24);\n        translate([0,0,-1])\n        cylinder(h=10, d=8, $fn=24);\n    }\n    // Spoke holes\n    for(i=[0:5])\n    rotate([0,0,i*60])\n    translate([6,0,4])\n    rotate([90,0,0])\n    cylinder(h=6, d=2.6, $fn=8);\n}\n\n// Roof ring\nmodule ring(r) {\n    difference() {\n        cylinder(h=3, d=r*2+wall*2, $fn=48);\n        translate([0,0,-1])\n        cylinder(h=5, d=r*2, $fn=48);\n    }\n}\n\n// Full roof\nmodule roof() {\n    // Central hub\n    hub();\n    \n    // Roof tiles on six sides\n    for(i=[0:5])\n    rotate([0,0,i*60]) {\n        // Ridge beam\n        translate([0,0,8])\n        rotate([30,0,0])\n        cube([40, wall, 2], center=true);\n        \n        // Tiles\n        for(x=[-18:4:18])\n        for(y=[-15:3:15])\n        if(abs(x)+abs(y) < 25)\n        translate([x*cos(i*60) - y*sin(i*60), x*sin(i*60) + y*cos(i*60), 8+abs(x)*0.3])\n        rotate([30,0,i*60])\n        roof_tile(0, 0, 0);\n    }\n    \n    // Ring at edge\n    translate([0,0,22])\n    ring(32);\n}\n\n// Floor platform\nmodule floor() {\n    difference() {\n        cylinder(h=wall, d=70, $fn=6);\n        translate([0,0,-1])\n        cylinder(h=wall+2, d=65, $fn=6);\n    }\n}\n\n// Side panels\nmodule panel(h) {\n    translate([-wall/2,0,h/2])\n    cube([wall, 25, h], center=true);\n}\n\n// Main assembly\ntranslate([0,0,5])\nunion() {\n    // Floor\n    floor();\n    \n    // Six posts\n    for(i=[0:5])\n    rotate([0,0,i*60])\n    translate([30,0,wall])\n    post(30);\n    \n    // Roof\n    translate([0,0,30])\n    roof();\n    \n    // Side rails\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n        translate([30,0,10])\n        rotate([0,90,i*60+90])\n        panel(20);\n        \n        rotate([0,0,i*60])\n        translate([30,0,20])\n        rotate([0,0,i*60+90])\n        cube([25, wall, wall], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "drape",
    "openscad_code": "// Realistic medium-complexity drape\n// 3D printable, ~60 mm tall, 80 mm wide\n\n$fn = 48;\nwall = 1.2;          // printable wall thickness\nrod_r = 2;           // curtain-rod radius\nrod_l = 85;          // rod length\nfold_spacing = 6;    // distance between pleats\nfold_depth = 4;      // how far pleats indent\ndrop = 60;           // total drape length\n\nmodule pleat(x_pos) {\n    // one vertical pleat\n    translate([x_pos, 0, 0])\n    difference() {\n        // main pleat body\n        cube([wall, fold_spacing, drop], center = true);\n        // carve the inward fold\n        translate([0, -fold_spacing/2 - 0.1, 0])\n        cube([wall + 0.2, fold_depth, drop + 0.2], center = true);\n    }\n}\n\nmodule curtain_rod() {\n    // simple round rod with end caps\n    union() {\n        // rod tube\n        rotate([90, 0, 0])\n        cylinder(h = rod_l, r = rod_r);\n        // left cap\n        translate([-rod_l/2, 0, 0])\n        sphere(r = rod_r);\n        // right cap\n        translate([rod_l/2, 0, 0])\n        sphere(r = rod_r);\n    }\n}\n\nmodule drape_body() {\n    // gathers the pleats into a curtain\n    translate([0, 0, -drop/2])\n    union() {\n        // loop to create evenly spaced pleats\n        for (x = [-rod_l/2 + fold_spacing/2 : fold_spacing : rod_l/2 - fold_spacing/2])\n            pleat(x);\n        \n        // optional bottom hem bar for weight\n        translate([0, 0, -drop/2 + 2])\n        cube([rod_l - 8, wall*2, wall], center = true);\n    }\n}\n\n// top rod\ntranslate([0, 0, drop/2 + rod_r])\ncurtain_rod();\n\n// main curtain\ndrape_body();",
    "renders": true
  },
  {
    "household_item": "curtain",
    "openscad_code": "// Realistic curtain for 3D printing, ~80 mm tall\n// Uses only basic primitives and keeps printable (no steep overhangs)\n\n// Parameters\ncurtain_height = 80;\ncurtain_width = 60;\ncurtain_thick = 1.6;        // wall thickness for 3D printing\npleat_num = 8;              // number of pleats\npleat_depth = 8;\nrod_d = 5;\nrod_l = curtain_width + 10;\n\n// Overall assembly\nmodule curtain_assembly() {\n    union() {\n        // Curtain rod\n        translate([0, 0, curtain_height + rod_d/2])\n            rotate([90,0,0])\n                cylinder(h = rod_l, d = rod_d, $fn = 32);\n\n        // Brackets\n        translate([-curtain_width/2 - 2, 0, curtain_height])\n            bracket();\n        translate([ curtain_width/2 + 2, 0, curtain_height])\n            mirror([1,0,0]) bracket();\n\n        // Curtain body\n        translate([0, 0, curtain_height/2])\n            curtain_body();\n    }\n}\n\n// Simple wall bracket\nmodule bracket() {\n    difference() {\n        union() {\n            cube([4, 4, 12], center = true);\n            translate([0,-2,5]) cube([4,8,2], center = true);\n        }\n        translate([0,0,6]) rotate([90,0,0])\n            cylinder(h = 6, d = rod_d + 1, $fn = 32);\n    }\n}\n\n// Main curtain with pleats\nmodule curtain_body() {\n    curtain_th = curtain_thick;\n    pleat_step = curtain_width / pleat_num;\n\n    // Gathered top header\n    translate([0, 0, curtain_height - 5])\n        cube([curtain_width, curtain_th, 10], center = true);\n\n    // Pleated curtain panels\n    for (i = [-pleat_num/2 : pleat_num/2 - 1]) {\n        x = i * pleat_step + pleat_step/2;\n        translate([x, 0, 0])\n            pleat_panel();\n    }\n}\n\n// Single pleated panel\nmodule pleat_panel() {\n    pleat_w = curtain_width / pleat_num;\n    h = curtain_height;\n    d = pleat_depth;\n    th = curtain_thick;\n\n    // Main panel\n    translate([0, -d/2, 0])\n        cube([pleat_w, d, h], center = true);\n\n    // Thin fold ridges (add realism, printable)\n    ridge_w = 0.8;\n    ridge_h = 1;\n    ridge_d = d + 0.2;\n    ridges = 5;\n    for (j = [0:ridges-1]) {\n        z = j * (h - 4)/ridges + 2;\n        translate([0, 0, z])\n            cube([pleat_w + th, ridge_d, ridge_h], center = true);\n    }\n\n    // Bottom hem bar\n    translate([0, 0, 1])\n        cube([pleat_w + th, d + th, 2], center = true);\n}\n\n// Render\n$fa = 2;\n$fs = 0.5;\ncurtain_assembly();",
    "renders": true
  },
  {
    "household_item": "rug",
    "openscad_code": "// Realistic 3D Printable Rug – Medium Complexity\n// Dimensions: 80 mm x 50 mm x 5 mm overall\n\n// Configurable parameters\nrug_len = 80;\nrug_wid = 50;\nrug_thk = 5;\npile_height = 2.5;\nwall_thk = 1;\n\n// Tassels\ntassel_len = 8;\ntassel_d = 1.2;\ntassels_per_side = 8;\n\n// Base plate with rounded edges\nmodule rug_base() {\n    difference() {\n        minkowski() {\n            cube([rug_len, rug_wid, rug_thk], center=true);\n            cylinder(r=3, h=0.01, center=true, $fn=20);\n        }\n        translate([0, 0, rug_thk/2 - 0.2])\n            cube([rug_len - 2*wall_thk, rug_wid - 2*wall_thk, rug_thk + 1], center=true);\n    }\n}\n\n// Single pile tuft\nmodule tuft(x, y, h) {\n    translate([x, y, rug_thk/2 - pile_height/2])\n        cylinder(h=h, d=2.5, $fn=12);\n}\n\n// Generate realistic pile pattern\nmodule rug_pile() {\n    for (y = [-rug_wid/2 + 3 : 3.5 : rug_wid/2 - 3])\n        for (x = [-rug_len/2 + 3 : 3.5 : rug_len/2 - 3]) {\n            // Slight height variation for realism\n            tuft(x, y, pile_height * (0.8 + 0.4 * sin(x) * cos(y)));\n        }\n}\n\n// Tassel strand\nmodule tassel_strand() {\n    difference() {\n        cylinder(h=tassel_len, d=tassel_d, $fn=8);\n        translate([0, 0, tassel_len - 0.5])\n            sphere(d=tassel_d*1.8, $fn=8);\n    }\n}\n\n// Add tassels along short edges\nmodule tassels() {\n    for (i = [0 : tassels_per_side - 1]) {\n        pos = -rug_len/2 + (i + 0.5) * (rug_len / tassels_per_side);\n        translate([pos, -rug_wid/2, rug_thk/2])\n            rotate([90, 0, 0])\n                tassel_strand();\n        translate([pos, rug_wid/2, rug_thk/2])\n            rotate([90, 0, 0])\n                tassel_strand();\n    }\n}\n\n// Central decorative band\nmodule central_band() {\n    translate([0, 0, rug_thk/2 + pile_height/2 - 0.2])\n        cube([rug_len - 12, 8, 0.4], center=true);\n}\n\n// Assemble rug\nunion() {\n    rug_base();\n    rug_pile();\n    tassels();\n    central_band();\n}",
    "renders": true
  },
  {
    "household_item": "carpet",
    "openscad_code": "// Realistic 3D printable carpet model\n// Medium complexity with pile texture and tassels\n// Dimensions: 80mm x 50mm x 4mm total\n\n$fn=50;\n\n// Carpet parameters\ncarpet_length = 80;\ncarpet_width = 50;\ncarpet_thickness = 2;\npile_height = 1.5;\ntassel_length = 3;\ntassel_thickness = 1;\n\n// Main carpet body module\nmodule carpet_base() {\n    // Base layer\n    color(\"darkred\")\n    difference() {\n        cube([carpet_length, carpet_width, carpet_thickness]);\n        \n        // Carve underside for reduced material\n        translate([5, 5, 0])\n        cube([carpet_length-10, carpet_width-10, carpet_thickness-0.5]);\n    }\n}\n\n// Individual carpet pile fiber\nmodule carpet_pile(x, y) {\n    color(\"firebrick\")\n    translate([x, y, carpet_thickness])\n    cylinder(h = pile_height, d1 = 0.8, d2 = 0.5, $fn=8);\n}\n\n// Generate carpet pile texture\nmodule carpet_pile_field() {\n    for (x = [2:2:carpet_length-2]) {\n        for (y = [2:2:carpet_width-2]) {\n            carpet_pile(x, y);\n        }\n    }\n}\n\n// Tassel module for carpet edges\nmodule tassel(x, y, angle) {\n    color(\"darkred\")\n    rotate([0, 0, angle])\n    translate([x, y, 0])\n    difference() {\n        union() {\n            // Tassel base\n            cube([tassel_thickness*2, tassel_thickness, carpet_thickness]);\n            \n            // Tassel threads\n            for (i = [-0.5, 0, 0.5]) {\n                translate([i, tassel_thickness/2, carpet_thickness])\n                cylinder(h = tassel_length, d = 0.5, $fn=6);\n            }\n        }\n        \n        // Trim underside\n        translate([tassel_thickness, -tassel_thickness/2, -0.1])\n        cube([tassel_thickness*3, tassel_thickness*2, carpet_thickness+0.2]);\n    }\n}\n\n// Add tassels along carpet edges\nmodule add_tassels() {\n    // Long edges\n    for (x = [4:4:carpet_length-4]) {\n        tassel(x, 0, 0);\n        tassel(x, carpet_width, 180);\n    }\n    \n    // Short edges\n    for (y = [4:4:carpet_width-4]) {\n        tassel(0, y, 90);\n        tassel(carpet_length, y, -90);\n    }\n    \n    // Corner tassels\n    tassel(0, 0, 45);\n    tassel(carpet_length, 0, 135);\n    tassel(0, carpet_width, -45);\n    tassel(carpet_length, carpet_width, -135);\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color(\"crimson\")\n    translate([0, 0, carpet_thickness])\n    difference() {\n        // Border frame\n        cube([carpet_length, carpet_width, 0.5]);\n        \n        // Cut out center\n        translate([3, 3, -0.1])\n        cube([carpet_length-6, carpet_width-6, 0.7]);\n    }\n}\n\n// Assemble the complete carpet\nunion() {\n    carpet_base();\n    carpet_pile_field();\n    add_tassels();\n    border_pattern();\n}",
    "renders": true
  },
  {
    "household_item": "mat",
    "openscad_code": "// Realistic 3D-printable doormat\n// Medium complexity with woven texture and border detail\n\n// Overall dimensions\nmat_width = 80;\nmat_length = 120;\nmat_thickness = 5;\n\n// Border parameters\nborder_width = 5;\nborder_height = 1.5;\n\n// Woven texture parameters\nthread_width = 1.8;\nthread_height = 0.8;\nthread_spacing = 2.5;\nweave_offset = thread_spacing / 2;\n\n// Welcome text parameters\ntext_height = 1.2;\ntext_depth = 0.6;\n\n// Base mat body\nmodule base_mat() {\n    difference() {\n        // Main mat block\n        cube([mat_width, mat_length, mat_thickness]);\n        \n        // Rounded corners using cylinders\n        translate([border_width, border_width, -0.1])\n            cylinder(h=mat_thickness+0.2, r=border_width, $fn=20);\n        translate([mat_width-border_width, border_width, -0.1])\n            cylinder(h=mat_thickness+0.2, r=border_width, $fn=20);\n        translate([border_width, mat_length-border_width, -0.1])\n            cylinder(h=mat_thickness+0.2, r=border_width, $fn=20);\n        translate([mat_width-border_width, mat_length-border_width, -0.1])\n            cylinder(h=mat_thickness+0.2, r=border_width, $fn=20);\n    }\n}\n\n// Raised border around mat\nmodule border() {\n    // Bottom border\n    translate([-border_width, -border_width, mat_thickness])\n        cube([mat_width+2*border_width, border_width, border_height]);\n    \n    // Top border\n    translate([-border_width, mat_length, mat_thickness])\n        cube([mat_width+2*border_width, border_width, border_height]);\n    \n    // Left border\n    translate([-border_width, 0, mat_thickness])\n        cube([border_width, mat_length, border_height]);\n    \n    // Right border\n    translate([mat_width, 0, mat_thickness])\n        cube([border_width, mat_length, border_height]);\n}\n\n// Woven texture pattern\nmodule woven_texture() {\n    // Horizontal threads\n    for (y = [border_width:thread_spacing:mat_length-border_width]) {\n        for (x = [border_width:thread_spacing:mat_width-border_width]) {\n            translate([x, y, 0])\n                cube([thread_width, thread_height*2, thread_height]);\n        }\n    }\n    \n    // Vertical threads (woven over horizontal)\n    for (x = [border_width+weave_offset:thread_spacing:mat_width-border_width]) {\n        for (y = [border_width+weave_offset:thread_spacing:mat_length-border_width]) {\n            translate([x, y, thread_height/2])\n                cube([thread_height*2, thread_width, thread_height]);\n        }\n    }\n}\n\n// Welcome text\nmodule welcome_text() {\n    translate([mat_width/2, mat_length*0.75, mat_thickness+border_height+0.1]) {\n        rotate([0, 0, 0]) {\n            linear_extrude(height=text_depth) {\n                text(\"WELCOME\", \n                     size=12, \n                     font=\"Arial:style=Bold\", \n                     halign=\"center\", \n                     valign=\"center\");\n            }\n        }\n    }\n}\n\n// Assemble the mat\nunion() {\n    // Base mat\n    base_mat();\n    \n    // Border\n    border();\n    \n    // Woven texture on top surface\n    translate([0, 0, mat_thickness])\n        woven_texture();\n    \n    // Welcome text\n    welcome_text();\n}\n\n// Add drainage holes (optional for outdoor use)\nfor (x = [20:20:mat_width-20]) {\n    for (y = [20:20:mat_length-20]) {\n        translate([x, y, -0.1])\n            cylinder(h=mat_thickness+0.2, r=1.5, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pad",
    "openscad_code": "// Realistic 3D-printable pad (medium complexity)\n// Overall footprint ~60 x 45 mm\n\n// Parameters\npad_w = 60;\npad_h = 45;\nbase_t = 3;      // base thickness\ntop_t = 2;       // top cover thickness\nwall_t = 2;      // printable wall thickness\nkey_pitch = 6.5;\nkey_r = 2.5;\n\n// Main body\ndifference() {\n    union() {\n        // Lower base\n        translate([0, 0, base_t/2])\n            rounded_base(pad_w, pad_h, base_t, 4);\n\n        // Upper cover\n        translate([0, 0, base_t + top_t/2 + 0.1])\n            rounded_base(pad_w - 2*wall_t, pad_h - 2*wall_t, top_t, 4);\n    }\n    // Hollow cavity\n    translate([0, 0, wall_t])\n        rounded_base(pad_w - 2*wall_t, pad_h - 2*wall_t, base_t, 2);\n}\n\n// Key grid\nkeys_x = 4;\nkeys_y = 5;\nmodule key_column(col) {\n    for (row = [0:keys_y-1]) {\n        translate([\n            -((keys_x-1)*key_pitch)/2 + col*key_pitch,\n            -((keys_y-1)*key_pitch)/2 + row*key_pitch,\n            base_t + top_t/2 + 0.5\n        ])\n            cylinder(r = key_r, h = 0.8, $fn = 16);\n    }\n}\nfor (c = [0:keys_x-1]) key_column(c);\n\n// Navigation pad\nnav_pad();\n\n// Cable strain relief\ncable_grommet();\n\nmodule rounded_base(w, h, t, r) {\n    hull() {\n        for (dx = [-1, 1], dy = [-1, 1])\n            translate([dx*(w/2 - r), dy*(h/2 - r), 0])\n                cylinder(r = r, h = t, $fn = 20);\n    }\n}\n\nmodule nav_pad() {\n    // D-pad cross\n    translate([pad_w/2 - 12, 0, base_t + top_t/2 + 0.5]) {\n        hull() {\n            cube([3.5, 11, 0.8], center = true);\n            cube([11, 3.5, 0.8], center = true);\n        }\n    }\n    // Center button\n    translate([pad_w/2 - 12, 0, base_t + top_t/2 + 1.4])\n        cylinder(r = 3, h = 0.6, $fn = 16);\n}\n\nmodule cable_grommet() {\n    // Entry tube\n    translate([-pad_w/2 - 5, 0, base_t/2])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r1 = 4.5, r2 = 3.5, $fn = 20);\n    // Internal channel\n    translate([-pad_w/2 - 1, 0, base_t/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 2.5, $fn = 20);\n}",
    "renders": true
  },
  {
    "household_item": "mirror",
    "openscad_code": "// Realistic 3D-printable mirror (medium complexity)\n// Overall size ≈ 70 mm wide\n\n// Parameters\nmirror_diameter = 60;      // mirror glass size\nrim_thickness = 4;         // metal rim thickness\nmirror_thickness = 2;      // glass thickness\nhandle_length = 45;        // handle length\nhandle_diameter = 10;      // handle diameter\nwall = 1.2;                // 3D-print wall thickness\nsegments = 64;             // cylinder smoothness\n\n// Utility module for rounded standoffs\nmodule rounded_cylinder(h, r, center=false) {\n    cylinder(h=h, r=r, center=center, $fn=segments);\n}\n\n// Mirror glass (thin disk)\nmodule glass() {\n    color(\"lightblue\", 0.7)\n    translate([0, 0, rim_thickness/2 - mirror_thickness/2])\n        cylinder(h=mirror_thickness, r=mirror_diameter/2, $fn=segments);\n}\n\n// Metal rim around glass\nmodule rim() {\n    color(\"silver\")\n    difference() {\n        // Outer ring\n        cylinder(h=rim_thickness, r=mirror_diameter/2 + wall, $fn=segments);\n        // Inner cut-out for glass\n        translate([0, 0, -0.1])\n            cylinder(h=rim_thickness+0.2, r=mirror_diameter/2, $fn=segments);\n    }\n}\n\n// Decorative back pattern (concentric rings)\nmodule back_pattern() {\n    for (i=[1:3]) {\n        color(\"gray\")\n        translate([0, 0, 0])\n            cylinder(h=0.6, r=mirror_diameter/2 + wall - i*3, $fn=segments);\n    }\n}\n\n// Handle with ergonomic grip rings\nmodule handle() {\n    color(\"silver\")\n    union() {\n        // Main shaft\n        translate([0, 0, -handle_length/2 - rim_thickness/2])\n            rotate([90, 0, 0])\n                rounded_cylinder(h=handle_length, r=handle_diameter/2);\n\n        // Grip rings\n        for (i=[0:3]) {\n            translate([0, 0, -rim_thickness/2 - 8 - i*8])\n                rotate([90, 0, 0])\n                    rounded_cylinder(h=2.5, r=handle_diameter/2 + 1);\n        }\n\n        // Transition collar to rim\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=6, r1=handle_diameter/2 + 2, r2=handle_diameter/2, $fn=segments);\n    }\n}\n\n// Wall-mount hook slot (for optional hanging)\nmodule hook_slot() {\n    // Simple keyhole slot\n    translate([0, 0, rim_thickness/2 + 0.1])\n        rotate([0, 0, 0])\n            linear_extrude(height=rim_thickness)\n                union() {\n                    circle(d=6, $fn=segments);\n                    translate([-3, 0, 0]) square([6, 3]);\n                }\n}\n\n// Assembly\nunion() {\n    // Mirror front\n    glass();\n    rim();\n    \n    // Mirror back details\n    translate([0, 0, rim_thickness])\n        union() {\n            back_pattern();\n            hook_slot();\n        }\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "frame",
    "openscad_code": "// Realistic Picture Frame – OpenSCAD\n// Outer printable footprint ~80 mm x 80 mm x 12 mm\n// Wall thickness 2 mm, no large overhangs, 45° chamfers for clean bridging\n\n$fa = 1;\n$fs = 0.5;\n\nframe_outer = 80;       // overall footprint\nframe_inner = 52;       // picture window\nframe_thick = 12;       // depth\nwall = 2;               // wall thickness\nchamfer = 2;            // 45° chamfer on outer edge\ngroove = 1;             // recess for picture + glass + backing\n\n// Main frame body\nmodule frame_body() {\n    difference() {\n        // outer block with chamfer\n        minkowski() {\n            cube([frame_outer, frame_outer, frame_thick], center = true);\n            cylinder(r = chamfer, h = 0.01, center = true);\n        }\n        // inner window\n        cube([frame_inner, frame_inner, frame_thick + 2], center = true);\n    }\n}\n\n// Decorative inner ridge\nmodule inner_ridge() {\n    translate([0, 0, frame_thick/2 - wall - 1]) {\n        difference() {\n            cube([frame_inner + wall*2, frame_inner + wall*2, 2], center = true);\n            cube([frame_inner, frame_inner, 3], center = true);\n        }\n    }\n}\n\n// Recessed groove for picture/glass/backing\nmodule picture_groove() {\n    translate([0, 0, -frame_thick/2 + groove]) {\n        cube([frame_inner + 0.2, frame_inner + 0.2, groove*2], center = true);\n    }\n}\n\n// Four corner standoffs so frame sits 1 mm proud\nmodule standoff() {\n    for (x = [-1, 1], y = [-1, 1]) {\n        translate([x*(frame_outer/2 - wall - 1), y*(frame_outer/2 - wall - 1), -frame_thick/2]) {\n            cylinder(h = 1, r = wall, center = false);\n        }\n    }\n}\n\n// Simple key-hole slot for wall hanging (centered on top edge)\nmodule hanger() {\n    slot_w = 3;\n    slot_h = 6;\n    translate([0, frame_outer/2 - wall, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = wall*2, r = slot_h, center = true);\n                translate([0, 0, -slot_h]) cube([slot_w*2, slot_h*2, slot_h*2], center = true);\n            }\n        }\n    }\n}\n\n// Assemble the frame\nunion() {\n    frame_body();\n    inner_ridge();\n    difference() {\n        frame_body(); // reuse to cut groove without extra cube\n        picture_groove();\n    }\n    standoff();\n    hanger();\n}",
    "renders": true
  },
  {
    "household_item": "screen",
    "openscad_code": "// Realistic 3D-printable screen (≈ 80 mm wide, medium complexity)\n\n// Overall dimensions\nscreen_w = 78;\nscreen_h = 46;\nscreen_d = 5;\nbezel = 3;\nbase_w = 50;\nbase_d = 30;\nbase_h = 12;\nstand_h = 35;\nstand_d = 10;\n\n// Wall / clearance parameters for 3D printing\nwall = 1.6;\nclear = 0.4;      // for moving / fitting parts\n$fn = 32;\n\nmodule screen_body() {\n    // Main display shell with rounded front\n    difference() {\n        union() {\n            // Outer bezel\n            translate([0,0,bezel/2])\n                cube([screen_w+bezel*2, screen_h+bezel*2, screen_d+bezel], center=true);\n\n            // Slight back bulge for electronics\n            translate([0,0,-screen_d/2-2])\n                cube([screen_w, screen_h, 4], center=true);\n        }\n\n        // Display opening\n        translate([0,0,screen_d/2+0.1])\n            cube([screen_w, screen_h, screen_d+2], center=true);\n\n        // Screw wells for assembly\n        for(x=[-1,1])\n            for(y=[-1,1])\n                translate([x*screen_w/2*0.75, y*screen_h/2*0.75, -screen_d/2])\n                    cylinder(h=screen_d+2, r=1.5, center=false);\n    }\n\n    // Actual screen surface (thin inset)\n    translate([0,0,screen_d/2-wall/2])\n        color(\"black\")\n        cube([screen_w-wall, screen_h-wall, wall], center=true);\n}\n\nmodule stand_neck() {\n    // Curved neck between screen and base\n    hull() {\n        translate([0, -stand_d/2, -stand_h/2])\n            rotate([0,90,0])\n                cylinder(h=stand_d, r=stand_d/2, center=true);\n        translate([0,  stand_d/2, -stand_h/2])\n            rotate([0,90,0])\n                cylinder(h=stand_d, r=stand_d/2, center=true);\n    }\n}\n\nmodule stand_base() {\n    // Oval base with slots for weight\n    difference() {\n        // Solid base\n        scale([1, 0.7, 1])\n            cylinder(h=base_h, r=base_w/2, center=true);\n\n        // Cable slot front\n        translate([0, base_w/2-2, -base_h/2])\n            cube([10, 10, base_h+1], center=true);\n\n        // Optional metal weight cavity (leave hollow)\n        translate([0,0,-base_h/2+wall])\n            scale([0.8,0.6,1])\n                cube([base_w-wall*2, base_d-wall*2, base_h-wall], center=true);\n    }\n\n    // Rubber feet\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*base_w/3, y*base_d/3, -base_h/2-wall/2])\n                cylinder(h=wall, r=2, center=true);\n}\n\n// Build the model\nunion() {\n    // Screen assembly\n    translate([0,0,stand_h/2+screen_d/2+bezel/2])\n        screen_body();\n\n    // Stand\n    stand_neck();\n    translate([0,0,-stand_h/2-base_h/2])\n        stand_base();\n}\n\n// Optional logo emboss\ntranslate([0, screen_h/2+bezel/2-wall/2, screen_d/2-wall/2-0.1])\n    linear_extrude(height=wall)\n        text(\"HD\", size=5, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "household_item": "partition",
    "openscad_code": "// Realistic Room-Partition with Medium Complexity\n// Dimensions for 3D printing (80 mm wide)\n\n// Overall size\noverall_w = 80;\noverall_h = 60;\noverall_d = 20;\n\n// Frame profile\nframe_profile = 4;\n\nmodule frame() {\n    // Bottom rail\n    translate([0, 0, 0])\n        cube([overall_w, frame_profile, frame_profile], center=false);\n\n    // Top rail\n    translate([0, 0, overall_h - frame_profile])\n        cube([overall_w, frame_profile, frame_profile], center=false);\n\n    // Left post\n    translate([0, 0, frame_profile])\n        cube([frame_profile, frame_profile, overall_h - 2 * frame_profile], center=false);\n\n    // Right post\n    translate([overall_w - frame_profile, 0, frame_profile])\n        cube([frame_profile, frame_profile, overall_h - 2 * frame_profile], center=false);\n}\n\nmodule panel() {\n    panel_th = 2;\n    inset = 3;\n\n    // Main panel board\n    translate([frame_profile + inset, 0, frame_profile + inset])\n        cube([overall_w - 2 * (frame_profile + inset), panel_th, overall_h - 2 * (frame_profile + inset)], center=false);\n\n    // Horizontal divider between upper and lower louvers\n    divider_h = 2;\n    translate([frame_profile + inset, panel_th / 2, overall_h / 2 - divider_h / 2])\n        cube([overall_w - 2 * (frame_profile + inset), divider_h, divider_h], center=false);\n}\n\nmodule louvers() {\n    louver_w = 1.5;\n    louver_h = 1.5;\n    gap = 3;\n    louver_d = 2;\n\n    // Lower louvers\n    for (z = [frame_profile + 3 : louver_h + gap : overall_h / 2 - 3]) {\n        for (x = [frame_profile + 3 : louver_w + gap : overall_w - frame_profile - 3 - louver_w]) {\n            translate([x, 0, z])\n                cube([louver_w, louver_d, louver_h], center=false);\n        }\n    }\n\n    // Upper louvers\n    for (z = [overall_h / 2 + 3 : louver_h + gap : overall_h - frame_profile - 3 - louver_h]) {\n        for (x = [frame_profile + 3 : louver_w + gap : overall_w - frame_profile - 3 - louver_w]) {\n            translate([x, 0, z])\n                cube([louver_w, louver_d, louver_h], center=false);\n        }\n    }\n}\n\nmodule feet() {\n    foot_w = 8;\n    foot_h = 3;\n    foot_d = overall_d + 4;\n\n    // Left foot\n    translate([-foot_w / 2 + frame_profile / 2, -foot_d / 2 + overall_d / 2, -foot_h])\n        cube([foot_w, foot_d, foot_h], center=false);\n\n    // Right foot\n    translate([overall_w - foot_w / 2 - frame_profile / 2, -foot_d / 2 + overall_d / 2, -foot_h])\n        cube([foot_w, foot_d, foot_h], center=false);\n}\n\n// Assemble the partition\nunion() {\n    frame();\n    panel();\n    louvers();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "divider",
    "openscad_code": "// Modular Realistic Office Divider\n// 90 mm wide, 60 mm tall, 20 mm deep – suitable for desktop use\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Overall outer shell\nmodule shell() {\n    difference() {\n        cube([90, 20, 60], center = true);\n        translate([0, 0, wall]) cube([90 - 2*wall, 20 - 2*wall, 60 - wall], center = true);\n    }\n}\n\n// Horizontal shelf\nmodule shelf(h) {\n    translate([0, 0, h]) cube([70, 20 - 2*wall, wall], center = true);\n}\n\n// Vertical slats for pen / note storage\nmodule slat(x) {\n    difference() {\n        translate([x, 0, 30]) cube([wall, 20, 30], center = true);\n        translate([x, 0, 30 + 5]) cube([wall + 0.2, 20 + 0.2, 10], center = true);\n    }\n}\n\n// Phone stand groove\nmodule phone_stand() {\n    difference() {\n        translate([30, 0, 25]) cube([25, 20, 15], center = true);\n        translate([30, 0, 25 + 5]) cube([23, 20 + 0.2, 10], center = true);\n    }\n}\n\n// Cable cutout at back\nmodule cable_cutout() {\n    translate([0, 10 - wall/2, 5]) rotate([90, 0, 0]) cylinder(h = wall*2, d = 8, center = true);\n}\n\n// Assembly\nunion() {\n    shell();\n\n    // Add two shelves\n    shelf(10);\n    shelf(40);\n\n    // Add three vertical slats\n    slat(-25);\n    slat(0);\n    slat(25);\n\n    // Add phone stand on upper shelf\n    phone_stand();\n\n    // Cut cable hole\n    difference() {\n        children();\n        cable_cutout();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "panel",
    "openscad_code": "// Realistic control panel for a 3D-printable electronics enclosure\n// Size: 80 x 50 mm base, 6 mm thick\n\n// Overall dimensions\nbase_w = 80;\nbase_h = 50;\nbase_d = 6;\n\n// Wall thickness\nwall = 2;\n\nmodule panel_base()\n{\n    difference()\n    {\n        // Main panel body\n        translate([0,0,base_d/2])\n            cube([base_w, base_h, base_d], center=true);\n        \n        // Large central recess for components\n        translate([0,0,base_d/2+0.1])\n            cube([base_w-2*wall, base_h-2*wall, base_d], center=true);\n    }\n}\n\n// Four corner mounting holes\nmodule mount_holes()\n{\n    hole_d = 3.2;  // M3 screw\n    inset = 6;     // distance from edge\n    \n    for(x=[-1,1])\n    for(y=[-1,1])\n        translate([x*(base_w/2-inset), y*(base_h/2-inset), 0])\n            cylinder(h=base_d+1, d=hole_d, center=true, $fn=20);\n}\n\n// LCD window\nmodule lcd_window()\n{\n    lcd_w = 30;\n    lcd_h = 22;\n    translate([0,base_h/4,0])\n    difference()\n    {\n        cube([lcd_w+4, lcd_h+4, base_d], center=true);\n        translate([0,0,1])\n            cube([lcd_w, lcd_h, base_d], center=true);\n    }\n}\n\n// Tactile button array\nmodule button_array()\n{\n    btn_d = 5;\n    btn_h = 2;\n    spacing = 10;\n    \n    // Button caps\n    for(i=[-1,0,1])\n        translate([i*spacing, -base_h/4, base_d+0.1])\n            cylinder(h=btn_h, d=btn_d, $fn=16);\n    \n    // Button holes in face\n    for(i=[-1,0,1])\n        translate([i*spacing, -base_h/4, 0])\n            cylinder(h=base_d+0.1, d=btn_d+1, $fn=16);\n}\n\n// Potentiometer knob shaft\nmodule pot()\n{\n    translate([-base_w/3, 0, base_d])\n    {\n        // Pot body recess\n        cylinder(h=4, d=12, $fn=32);\n        // Shaft hole\n        cylinder(h=base_d+1, d=6.4, $fn=20);\n    }\n}\n\n// LED indicators\nmodule leds()\n{\n    led_d = 3;\n    translate([base_w/3, 0, 0])\n    for(i=[-1,1])\n        translate([0,i*8,0])\n            cylinder(h=base_d+0.1, d=led_d+1, $fn=16);\n}\n\n// Assembly\ndifference()\n{\n    union()\n    {\n        panel_base();\n        lcd_window();\n    }\n    \n    mount_holes();\n    button_array();\n    pot();\n    leds();\n}",
    "renders": true
  },
  {
    "household_item": "shutter",
    "openscad_code": "// Realistic-style shutter, medium complexity\n// Outside dimensions: 80 mm wide × 60 mm tall × 6 mm thick\n// All parts printable without support\n\n$fa = 2; $fs = 0.5;\n\n// Overall parameters\nframe_w = 80;      // shutter width\nframe_h = 60;      // shutter height\nframe_t = 6;       // shutter thickness\nslat_w = frame_w - 8;\nslat_h = 5;\nslat_gap = 2;\nslat_n = 8;\nslat_t = 1.5;\npin_r = 1.2;\npin_l = slat_t + 2;\n\n// Main frame with rebates for slats\nmodule frame() {\n    difference() {\n        // Outer solid frame\n        cube([frame_w, frame_h, frame_t], center=true);\n        \n        // Recess for slats (2 mm deep)\n        translate([0,0, frame_t/2 - 1])\n            cube([slat_w + 2, slat_n*(slat_h+slat_gap) + 4, 2.2], center=true);\n        \n        // Pin holes on left side\n        for (i=[0:slat_n-1]) {\n            y = -frame_h/2 + 10 + i*(slat_h+slat_gap) + slat_h/2;\n            translate([-frame_w/2 + 2, y, 0])\n                rotate([0,90,0])\n                    cylinder(r=pin_r, h=4, center=true);\n        }\n        \n        // Pin holes on right side\n        for (i=[0:slat_n-1]) {\n            y = -frame_h/2 + 10 + i*(slat_h+slat_gap) + slat_h/2;\n            translate([ frame_w/2 - 2, y, 0])\n                rotate([0,90,0])\n                    cylinder(r=pin_r, h=4, center=true);\n        }\n    }\n}\n\n// Single slat with pins\nmodule slat() {\n    difference() {\n        // Slat body\n        cube([slat_w, slat_h, slat_t], center=true);\n        \n        // Lightening hole (optional)\n        translate([0,0,0])\n            cube([slat_w - 6, slat_h - 2, slat_t + 0.1], center=true);\n    }\n    \n    // Left pin\n    translate([-slat_w/2, 0, 0])\n        rotate([0,90,0])\n            cylinder(r=pin_r, h=pin_l, center=true);\n    \n    // Right pin\n    translate([ slat_w/2, 0, 0])\n        rotate([0,90,0])\n            cylinder(r=pin_r, h=pin_l, center=true);\n}\n\n// Tilt bar (connects all slats)\nmodule tilt_bar() {\n    bar_w = 5;\n    bar_h = slat_n*(slat_h+slat_gap) - slat_gap;\n    bar_t = 2;\n    \n    // Bar body\n    translate([slat_w/2 - 5, 0, slat_t/2 + 1])\n        cube([bar_w, bar_h, bar_t], center=true);\n    \n    // Connector hooks\n    for (i=[0:slat_n-1]) {\n        y = -bar_h/2 + i*(slat_h+slat_gap) + slat_h/2;\n        translate([slat_w/2 - 5, y, slat_t/2 + 1 + bar_t/2])\n            rotate([90,0,0])\n                cylinder(r=1.5, h=2, $fn=12);\n    }\n}\n\n// Assembly\nframe();\nfor (i=[0:slat_n-1]) {\n    y = -frame_h/2 + 10 + i*(slat_h+slat_gap) + slat_h/2;\n    translate([0, y, 0])\n        slat();\n}\ntilt_bar();",
    "renders": true
  },
  {
    "household_item": "blind",
    "openscad_code": "// Realistic Venetian Blind – 3D-printable, ~85 mm wide\n// All parts printable without supports (bridged slats, no over-angles)\n\n// global parameters\nwidth = 80;          // overall width\nheight = 60;         // overall height\ndepth = 30;          // overall depth\nslat_th = 1.2;       // slat thickness\nslat_gap = 3;        // vertical gap between slats\nwall = 2;            // wall thickness for frame\nnum_slats = 15;      // number of slats\n\n// derived\nslat_width = width - 2*wall;\nslat_depth = depth - 2*wall;\nslat_pitch = slat_th + slat_gap;\n\nmodule frame_left() {\n    // left vertical rail\n    translate([-width/2, 0, 0])\n        cube([wall, height, depth], center=true);\n}\n\nmodule frame_right() {\n    // right vertical rail\n    translate([width/2, 0, 0])\n        cube([wall, height, depth], center=true);\n}\n\nmodule top_rail() {\n    // horizontal top support\n    translate([0, height/2, 0])\n        cube([width, wall, depth], center=true);\n}\n\nmodule bottom_rail() {\n    // horizontal bottom support\n    translate([0, -height/2, 0])\n        cube([width, wall, depth], center=true);\n}\n\nmodule slat(h) {\n    // individual slat with realistic rounded front edge\n    translate([0, h, 0])\n    difference() {\n        // main slat body\n        cube([slat_width, slat_th, slat_depth], center=true);\n        // front rounded edge cut (half-cylinder)\n        translate([0, slat_th/2, slat_depth/2 - slat_th/2])\n            rotate([90,0,0])\n            cylinder(h=slat_width, r=slat_th/2, center=true, $fn=20);\n    }\n}\n\nmodule tilt_rod() {\n    // thin tilt rod running through slats\n    rod_r = 0.8;\n    translate([0, 0, slat_depth/2 + 2])\n        rotate([90,0,0])\n        cylinder(h=height, r=rod_r, center=true, $fn=8);\n}\n\nmodule ladder_tape_holes() {\n    // small square holes for ladder tape strings\n    for (y = [-height/2 + 5 : slat_pitch : height/2 - 5]) {\n        translate([slat_width/2 - 2, y, 0])\n            cube([2, 1.5, 1.5], center=true);\n        translate([-slat_width/2 + 2, y, 0])\n            cube([2, 1.5, 1.5], center=true);\n    }\n}\n\nmodule blind_assembly() {\n    // outer frame\n    union() {\n        frame_left();\n        frame_right();\n        top_rail();\n        bottom_rail();\n    }\n\n    // slats array\n    for (i = [0 : num_slats-1]) {\n        slat(-height/2 + wall + (i+0.5)*slat_pitch);\n    }\n\n    // tilt rod\n    tilt_rod();\n\n    // ladder tape holes\n    ladder_tape_holes();\n}\n\n// render the blind\nblind_assembly();",
    "renders": true
  },
  {
    "household_item": "shade",
    "openscad_code": "$fa = 4;\n$fs = 0.5;\n\n// overall dimensions\nshade_h = 45;\nshade_top_d = 60;\nshade_bot_d = 80;\nwall_th = 2;\n\n// lamp neck mount\nneck_d = 25;\nneck_h = 10;\n\n// vent slots\nvent_w = 8;\nvent_h = 8;\nvent_gap = 15;\n\n// rim lip\nlip_h = 3;\n\nmodule shade_shell()\n{\n    difference()\n    {\n        // outer cone\n        cylinder(h = shade_h, d1 = shade_top_d, d2 = shade_bot_d, center = false);\n\n        // inner cone (hollow out)\n        translate([0,0,wall_th])\n            cylinder(h = shade_h, d1 = shade_top_d - 2*wall_th, d2 = shade_bot_d - 2*wall_th, center = false);\n    }\n}\n\nmodule neck_mount()\n{\n    difference()\n    {\n        // cylinder\n        translate([0,0,shade_h - neck_h])\n            cylinder(h = neck_h, d = neck_d, center = false);\n\n        // hole\n        translate([0,0,shade_h - neck_h])\n            cylinder(h = neck_h + 1, d = neck_d - 2*wall_th, center = false);\n    }\n}\n\nmodule vents()\n{\n    // calculate how many vents fit around the cone\n    n = floor(PI * (shade_bot_d + shade_top_d)/2 / vent_gap);\n    for(i = [0 : n-1])\n    {\n        angle = i * 360 / n;\n        // approximate radius at mid-height for positioning\n        r_mid = (shade_top_d + shade_bot_d)/4;\n        translate([r_mid * cos(angle), r_mid * sin(angle), shade_h/2])\n            rotate([0, 0, angle])\n                translate([-vent_w/2, -shade_h/2, 0])\n                    cube([vent_w, shade_h, wall_th*2]);\n    }\n}\n\nmodule bottom_lip()\n{\n    difference()\n    {\n        // lip ring\n        translate([0, 0, 0])\n            cylinder(h = lip_h, d = shade_bot_d + 2*wall_th, center = false);\n        // remove inner\n        translate([0, 0, -1])\n            cylinder(h = lip_h + 2, d = shade_bot_d, center = false);\n    }\n}\n\n// assembly\nunion()\n{\n    shade_shell();\n    neck_mount();\n    vents();\n    bottom_lip();\n}",
    "renders": true
  },
  {
    "household_item": "rail",
    "openscad_code": "// Realistic style rail for 3D printing - medium complexity\n// Approx 80 mm long, 20 mm wide, 20 mm tall\n// Designed for FDM printing with no overhangs\n\n$fn = 32;\n\n// Main dimensions\nrail_length = 80;\nrail_width = 20;\nrail_height = 15;\nbase_thickness = 3;\npost_width = 4;\npost_height = 12;\npost_spacing = 10;\n\n// Module for rounded cube using cylinders and cubes\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, 0])\n    difference() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        for(x = [0, size.x - 2*radius])\n            for(y = [0, size.y - 2*radius])\n                translate([x, y, -1])\n                    cylinder(h = size.z + 2, r = radius);\n    }\n    \n    translate([radius, 0, 0])\n    cube([size.x - 2*radius, size.y, size.z]);\n    \n    translate([0, radius, 0])\n    cube([size.x, size.y - 2*radius, size.z]);\n}\n\n// Module for a single post with rounded top\nmodule post() {\n    union() {\n        // Main post body\n        rounded_cube([post_width, post_width, post_height], 1);\n        \n        // Decorative top sphere\n        translate([post_width/2, post_width/2, post_height])\n            sphere(d = post_width * 0.8);\n    }\n}\n\n// Module for base rail with mounting holes\nmodule base_rail() {\n    difference() {\n        // Main base\n        rounded_cube([rail_length, rail_width, base_thickness], 2);\n        \n        // Mounting holes every 20mm\n        for(i = [10:20:rail_length-10])\n            translate([i, rail_width/2, -1])\n                cylinder(h = base_thickness + 2, r = 1.5, $fn = 16);\n    }\n}\n\n// Module for top rail with decorative groove\nmodule top_rail() {\n    difference() {\n        // Main top rail\n        rounded_cube([rail_length, rail_width * 0.6, rail_height - base_thickness - post_height], 2);\n        \n        // Decorative groove\n        translate([rail_length/2, rail_width * 0.3, -1])\n            cube([rail_length - 4, 2, rail_height - base_thickness - post_height + 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n        base_rail();\n    \n    // Posts\n    for(i = [post_spacing:post_spacing:rail_length-post_spacing])\n        translate([i, rail_width/2 - post_width/2, base_thickness])\n            post();\n    \n    // Top rail\n    translate([0, rail_width * 0.2, base_thickness + post_height])\n        top_rail();\n}",
    "renders": true
  },
  {
    "household_item": "rod",
    "openscad_code": "// Realistic 3D-printable fishing rod segment (medium complexity)\n// Overall length ~80 mm, diameter ~8 mm\n\n$fn = 36;           // Smooth curves\n\n// ---- Parameters ----\nrod_length = 80;\nbase_diameter = 7.6;\ntip_diameter  = 1.8;\nhandle_length = 25;\nreel_seat_length = 15;\nguide_count = 5;\n\nwall = 1.0;         // Minimum printable wall thickness\nhollow = 2.0;       // Inner diameter reduction\n\n// ---- Main rod body (hollow tapered cylinder) ----\nmodule tapered_rod() {\n    difference() {\n        union() {\n            // Outer taper\n            cylinder(h = rod_length, \n                     r1 = base_diameter/2, \n                     r2 = tip_diameter/2, \n                     center = false);\n        }\n        // Hollow core\n        translate([0,0,-0.1])\n            cylinder(h = rod_length + 0.2, \n                     r1 = base_diameter/2 - wall,\n                     r2 = tip_diameter/2 - wall);\n    }\n}\n\n// ---- Handle grip with cork rings ----\nmodule handle_grip() {\n    rings = 9;\n    ring_h  = handle_length / rings;\n    ring_r  = base_diameter/2 + 0.5;\n    difference() {\n        for(i = [0:rings-1]) {\n            translate([0,0,i*ring_h])\n                difference() {\n                    cylinder(h = ring_h*0.9, r = ring_r, center = false);\n                    cylinder(h = ring_h, r = base_diameter/2, center = false);\n                }\n        }\n        // Flatten bottom ring for print bed\n        translate([0,0,-0.1]) cube([ring_r*2, ring_r*2, 0.2], center = true);\n    }\n}\n\n// ---- Reel seat with hood ----\nmodule reel_seat() {\n    seat_pos = handle_length;\n    translate([0,0,seat_pos])\n    difference() {\n        // Main seat tube\n        cylinder(h = reel_seat_length, r = base_diameter/2 + 1.2, center = false);\n        \n        // Cut slot for reel foot\n        translate([0,-base_diameter/2 - 1.2, reel_seat_length*0.3])\n            cube([base_diameter + 2.4, base_diameter + 2.4, reel_seat_length*0.4], center = true);\n        \n        // Internal bore\n        cylinder(h = reel_seat_length + 0.2, r = base_diameter/2, center = false);\n    }\n    \n    // Locking hood threads (simplified knurl)\n    translate([0,0,seat_pos + reel_seat_length - 4])\n    difference() {\n        cylinder(h = 4, r = base_diameter/2 + 1.5);\n        cylinder(h = 4.2, r = base_diameter/2 - 0.2);\n        \n        // Knurl ridges\n        for(a = [0:30:359])\n            rotate([0,0,a])\n                translate([base_diameter/2 + 1.0, -0.3, 0])\n                    cube([0.5, 0.6, 4]);\n    }\n}\n\n// ---- Line guides ----\nmodule guides() {\n    guide_spacing = (rod_length - handle_length - reel_seat_length) / (guide_count + 1);\n    foot_len = 3;\n    ring_r = 2 + 0.5 * (base_diameter - tip_diameter) * (1 - (i / (guide_count - 1)));\n    \n    for(i = [0:guide_count-1]) {\n        z = handle_length + reel_seat_length + (i + 1) * guide_spacing;\n        scale = (z - handle_length) / rod_length;\n        \n        translate([0,0,z])\n        union() {\n            // Guide foot left\n            rotate([90,0,0])\n                translate([-foot_len/2, 0, 0])\n                    cube([foot_len, 1.2, tip_diameter/2 + 1*scale]);\n            \n            // Guide foot right\n            rotate([90,0,0])\n                translate([foot_len/2, 0, 0])\n                    scale([-1,1,1])\n                        cube([foot_len, 1.2, tip_diameter/2 + 1*scale]);\n            \n            // Guide ring\n            rotate([90,0,0])\n                cylinder(h = 1.2, r = 1.2 + 0.5*scale, center = true);\n            \n            // Ring hole\n            rotate([90,0,0])\n                cylinder(h = 1.4, r = 0.5 + 0.3*scale, center = true);\n        }\n    }\n}\n\n// ---- Assembly ----\nunion() {\n    tapered_rod();\n    handle_grip();\n    reel_seat();\n    guides();\n}",
    "renders": true
  },
  {
    "household_item": "peg",
    "openscad_code": "// Realistic 3D-printable peg with medium complexity\n// Overall height ~65 mm, base disk Ø40 mm, shaft Ø8 mm tapering to Ø6 mm\n\n// Parameters\n$fn = 36;  // smooth curves\npeg_height = 65;\nbase_d = 40;\nbase_h = 4;\ngrip_d = 18;\ngrip_h = 10;\nshaft_top_d = 6;\nshaft_bot_d = 8;\nshaft_h = 44;\ncollar_d = 12;\ncollar_h = 2;\nknurl_w = 2;\nknurl_d = 0.5;\nknurl_count = 12;\n\n// Main module\nmodule peg() {\n    union() {\n        // Base disk with slight chamfer\n        translate([0, 0, 0])\n            cylinder(d1 = base_d - 2, d2 = base_d, h = base_h);\n\n        // Collar ring\n        translate([0, 0, base_h])\n            cylinder(d = collar_d, h = collar_h);\n\n        // Tapered shaft\n        translate([0, 0, base_h + collar_h])\n            cylinder(d1 = shaft_bot_d, d2 = shaft_top_d, h = shaft_h);\n\n        // Grip head\n        translate([0, 0, base_h + collar_h + shaft_h])\n            cylinder(d1 = shaft_top_d, d2 = grip_d, h = grip_h);\n\n        // Knurled grip rings – subtracted grooves\n        for (i = [0 : knurl_count - 1]) {\n            rotate([0, 0, i * 360 / knurl_count])\n                translate([grip_d/2 - knurl_d/2, -knurl_w/2, base_h + collar_h + shaft_h])\n                    cube([knurl_d, knurl_w, grip_h], center = false);\n        }\n\n        // Central hole for optional screw (2 mm diameter)\n        translate([0, 0, -1])\n            cylinder(d = 2, h = peg_height + 2, $fn = 12);\n    }\n}\n\n// Optional support ring underneath collar for printing stability\nmodule support_ring() {\n    difference() {\n        translate([0, 0, base_h])\n            cylinder(d = collar_d + 4, h = 1);\n        translate([0, 0, base_h - 0.01])\n            cylinder(d = collar_d, h = 1.1);\n    }\n}\n\npeg();\nsupport_ring();",
    "renders": true
  },
  {
    "household_item": "hook",
    "openscad_code": "// Realistic coat hook - medium complexity\n// Overall size ~70mm wide x 80mm high x 35mm deep\n\n$fn = 36;  // Smooth curves\n\n// Wall plate with screw holes\nmodule wall_plate() {\n    difference() {\n        // Main plate\n        translate([-35, 0, 0])\n            cube([70, 10, 5], center=true);\n        \n        // Screw holes (4mm diameter)\n        translate([-25, 0, 2.5])\n            cylinder(h=5.1, r=2);\n        translate([25, 0, 2.5])\n            cylinder(h=5.1, r=2);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (x = [-20, 0, 20]) {\n        translate([x, 5, 2.5])\n            cube([8, 10, 5], center=true);\n    }\n}\n\n// Hook arm with ergonomic curve\nmodule hook_arm() {\n    difference() {\n        union() {\n            // Upper curved section\n            translate([0, 5, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h=25, r1=5, r2=7);\n            \n            // Main arm\n            translate([0, -20, 2.5])\n                cube([12, 50, 5], center=true);\n            \n            // Lower curved return\n            translate([0, -45, 2.5])\n                rotate([0, -90, 0])\n                    cylinder(h=15, r1=7, r2=5);\n            \n            // End ball for safety\n            translate([0, -52.5, 2.5])\n                sphere(r=6);\n        }\n        \n        // Hollow out center for material savings\n        translate([0, -20, 2.5])\n            cube([8, 40, 4.5], center=true);\n    }\n}\n\n// Grip texture pattern\nmodule grip_pattern() {\n    for (i = [0:5]) {\n        rotate([90, 0, 0])\n            translate([0, -20 - i*7, 3.5])\n                cube([12, 1.5, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    wall_plate();\n    ribs();\n    hook_arm();\n    grip_pattern();\n}\n\n// Add fillets for strength\ntranslate([0, 5, 5])\n    rotate([90, 0, 0])\n        cylinder(h=10, r1=3, r2=5);\ntranslate([0, -45, 5])\n    rotate([90, 0, 0])\n        cylinder(h=10, r1=5, r2=3);",
    "renders": true
  },
  {
    "household_item": "hanger",
    "openscad_code": "// Realistic 3D-printable clothes hanger\n// Medium complexity: ~80 lines, recognizable, functional features\n\n$fn = 36; // smoother curves\n\nmodule hook()\n{\n    // Main hook body\n    rotate([0,90,0])\n    difference()\n    {\n        union()\n        {\n            cylinder(h=12, d1=8, d2=8);          // base cylinder\n            translate([0,0,12])\n            rotate_extrude(angle=270, $fn=64)\n            translate([14,0,0])\n            circle(d=8);                        // curved hook\n            translate([14,0,34])\n            sphere(d=8);                        // tip sphere\n        }\n        // Hollow out hook for material saving\n        rotate([0,90,0])\n        cylinder(h=50, d=5);                    // central hole\n    }\n}\n\nmodule shoulder_bar()\n{\n    // Main horizontal bar with thickness for printability\n    difference()\n    {\n        hull()\n        {\n            translate([-45,0,0]) cube([90,10,5], center=true);\n            translate([-45,0,-2.5]) cube([90,8,2], center=true);\n        }\n        // Grooves for straps\n        for(i=[-30,-10,10,30])\n            translate([i,0,2.5])\n            cube([2,12,1], center=true);\n    }\n}\n\nmodule shoulder_arm(left=1)\n{\n    // Angled arm with rounded end\n    translate([left*45,0,0])\n    rotate([0,0,left*-20])\n    union()\n    {\n        // Arm body\n        hull()\n        {\n            translate([0,0,0]) cube([30,10,5], center=true);\n            translate([15,0,0]) cube([10,8,5], center=true);\n        }\n        // Rounded end\n        translate([25,0,0])\n        rotate([0,90,0])\n        cylinder(h=10, d1=8, d2=0);             // tapered end\n    }\n}\n\nmodule hanger_body()\n{\n    // Central support\n    difference()\n    {\n        cube([10,10,35], center=true);          // main post\n        translate([0,0,15])\n        cylinder(h=10, d=5);                    // hanging hole\n    }\n    \n    // Attach hook\n    translate([0,0,17.5])\n    hook();\n    \n    // Attach shoulder arms\n    shoulder_arm(1);\n    shoulder_arm(-1);\n    \n    // Attach horizontal bar\n    translate([0,0,-17.5])\n    shoulder_bar();\n}\n\n// Render the complete hanger\nhanger_body();",
    "renders": true
  },
  {
    "household_item": "bracket",
    "openscad_code": "// Bracket for 90-degree corner mount\n// Overall size: 60 x 60 x 30 mm\n// Wall thickness: 4 mm, print-friendly angles\n\n// Parameters\nwall_thickness = 4;\nbracket_size = 60;\nheight = 30;\nhole_diameter = 5.2;\ncounterbore_diameter = 10;\ncounterbore_depth = 3;\nrib_depth = 2;\n\n// Main L-shaped body\nmodule bracket_body() {\n    difference() {\n        union() {\n            // Horizontal arm\n            translate([0, 0, 0])\n                cube([bracket_size, wall_thickness, height]);\n            // Vertical arm\n            translate([0, 0, 0])\n                cube([wall_thickness, bracket_size, height]);\n        }\n        \n        // Inside corner chamfer\n        translate([wall_thickness, wall_thickness, 0])\n            rotate([0, 0, 45])\n            cube([wall_thickness*sqrt(2), wall_thickness*2, height]);\n    }\n}\n\n// Ribs for strength\nmodule ribs() {\n    for(i = [1:5]) {\n        // Horizontal ribs\n        translate([i*10, 0, height/2])\n            cube([4, wall_thickness, height/2]);\n        // Vertical ribs\n        translate([0, i*10, height/2])\n            cube([wall_thickness, 4, height/2]);\n    }\n}\n\n// Mounting holes\nmodule holes() {\n    // Horizontal arm holes\n    for(pos = [15, 45]) {\n        translate([pos, -1, height - counterbore_depth])\n            cylinder(h = counterbore_depth + 1, d = counterbore_diameter, $fn = 20);\n        translate([pos, -1, 0])\n            cylinder(h = height + 2, d = hole_diameter, $fn = 20);\n    }\n    \n    // Vertical arm holes\n    for(pos = [15, 45]) {\n        translate([-1, pos, height - counterbore_depth])\n            rotate([0, 90, 0])\n            cylinder(h = counterbore_depth + 1, d = counterbore_diameter, $fn = 20);\n        translate([-1, pos, 0])\n            rotate([0, 90, 0])\n            cylinder(h = height + 2, d = hole_diameter, $fn = 20);\n    }\n}\n\n// Base fillet\nmodule base_fillet() {\n    difference() {\n        // Horizontal fillet\n        translate([wall_thickness, -0.1, 0])\n            cube([bracket_size - wall_thickness, wall_thickness + 0.2, wall_thickness]);\n        // Vertical fillet\n        translate([-0.1, wall_thickness, 0])\n            cube([wall_thickness + 0.2, bracket_size - wall_thickness, wall_thickness]);\n    }\n}\n\n// Top edge chamfers\nmodule top_chamfers() {\n    // Horizontal arm chamfer\n    difference() {\n        translate([0, 0, height - wall_thickness])\n            cube([bracket_size, wall_thickness, wall_thickness]);\n        translate([0, -0.1, height - wall_thickness])\n            rotate([0, -45, 0])\n            cube([bracket_size + 0.2, wall_thickness + 0.2, wall_thickness*sqrt(2)]);\n    }\n    \n    // Vertical arm chamfer\n    difference() {\n        translate([0, 0, height - wall_thickness])\n            cube([wall_thickness, bracket_size, wall_thickness]);\n        translate([-0.1, 0, height - wall_thickness])\n            rotate([-45, 0, 0])\n            cube([wall_thickness + 0.2, bracket_size + 0.2, wall_thickness*sqrt(2)]);\n    }\n}\n\n// Assemble bracket\nunion() {\n    bracket_body();\n    ribs();\n    base_fillet();\n    top_chamfers();\n    difference() {\n        children();\n        holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "knob",
    "openscad_code": "// Realistic Medium-Complexity Knob\n// External diameter ≈ 48 mm, height ≈ 28 mm, shaft hole Ø6 mm\n// Optimized for FDM printing (no steep overhangs)\n\n$fn = 36;               // Smoother curves without extreme resolution\n\n// Main module\nmodule realisticKnob() {\n    difference() {\n        union() {\n            // 1. Flared finger-grip base\n            translate([0, 0, 1])\n                cylinder(h = 8, d1 = 42, d2 = 48, center = false);\n\n            // 2. Central domed cap\n            translate([0, 0, 9])\n                scale([1, 1, 0.7])\n                sphere(d = 46);\n\n            // 3. Concentric grip rings (raised ridges)\n            for (i = [1:3]) {\n                translate([0, 0, 1.5 + (i - 1) * 2.2])\n                    cylinder(h = 1.8, d = 46 - (i - 1) * 4, center = false);\n            }\n\n            // 4. Indicator ridge pointer\n            translate([0, 24, 5])\n                rotate([90, 0, 0])\n                cylinder(h = 10, d1 = 6, d2 = 2, center = true);\n        }\n\n        // 5. Central D-shaft hole (standard 6 mm potentiometer / encoder)\n        translate([0, 0, -1])\n            cylinder(h = 30, d = 6.2, center = false);\n        translate([0, -3.1, -1])\n            cube([6.2, 3.1, 30], center = false);\n    }\n\n    // 6. Light knurling pattern on top dome (subtractive for grip)\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([0, 11, 13])\n                rotate([90, 0, 0])\n                    cylinder(h = 22, d = 1.2, center = true);\n    }\n}\n\n// Render the knob upright\nrealisticKnob();",
    "renders": true
  },
  {
    "household_item": "handle",
    "openscad_code": "// Realistic medium-complexity 3D-printable handle\n// Overall size: ~85 mm x 35 mm x 30 mm\n\n// Parameters\nwall = 2.5;               // wall thickness for 3D printing\ngr_d = 12;                // grip diameter\ngr_l = 55;                // grip length\nfl_d = 32;                // flange diameter\nfl_h = 5;                 // flange height\nscr_d = 6;                // screw hole diameter\nscr_h = 10;               // screw hole depth\nrib_w = 1.5;              // rib width\nribs = 12;                // number of grip ribs\n\n// Main module\nmodule handle() {\n    difference() {\n        union() {\n            // Flange base\n            translate([0, 0, fl_h/2])\n                cylinder(d = fl_d, h = fl_h, $fn = 60);\n\n            // Grip body\n            translate([0, 0, fl_h + gr_l/2])\n                cylinder(d = gr_d, h = gr_l, $fn = 60);\n\n            // Rounded grip end\n            translate([0, 0, fl_h + gr_l])\n                sphere(d = gr_d, $fn = 60);\n\n            // Center web\n            translate([0, 0, fl_h + gr_l/2])\n                rotate([90, 0, 0])\n                    cylinder(d = gr_d - wall*2, h = gr_l, $fn = 60);\n\n            // Grip ribs (for better hold)\n            for (i = [0 : ribs-1]) {\n                rotate([0, 0, i * 360/ribs])\n                    translate([gr_d/2 - rib_w/2, 0, fl_h + rib_w/2])\n                        rotate([90, 0, 0])\n                            cylinder(d = rib_w, h = gr_l - rib_w*2, $fn = 12);\n            }\n        }\n\n        // Screw hole 1\n        translate([0, 0, -1])\n            cylinder(d = screw_d, h = screw_h + 1, $fn = 32);\n\n        // Screw hole 2 (90° offset)\n        translate([0, 0, -1])\n            rotate([0, 0, 90])\n                cylinder(d = screw_d, h = screw_h + 1, $fn = 32);\n\n        // Internal hollow\n        difference() {\n            translate([0, 0, fl_h + gr_l/2])\n                cylinder(d = gr_d - wall*2, h = gr_l, $fn = 60);\n\n            translate([0, 0, fl_h + gr_l])\n                sphere(d = gr_d - wall*2, $fn = 60);\n        }\n    }\n\n    // Optional chamfer on flange bottom for printing\n    translate([0, 0, fl_h/2])\n        cylinder(d1 = fl_d, d2 = fl_d - 2, h = fl_h/2, $fn = 60);\n}\n\n// Render\nhandle();",
    "renders": true
  },
  {
    "household_item": "pull",
    "openscad_code": "// Realistic Drawer Pull - Medium Complexity\n// Overall size: 96mm wide x 30mm deep x 28mm tall\n\n// Base plate dimensions\nbase_w = 80;\nbase_d = 18;\nbase_h = 3;\n\n// Handle dimensions\nhandle_w = 96;\nhandle_d = 26;\nhandle_h = 18;\nhandle_r = handle_h/2;\n\n// Screw hole spacing and diameter\nhole_spacing = 64;\nhole_d = 4;\ncounter_d = 8;\ncounter_h = 2;\n\n// Rounding radius for edges\nedge_r = 2;\n\nmodule rounded_cube(size, r) {\n    x = size.x; y = size.y; z = size.z;\n    \n    hull() {\n        translate([ r,  r,  r]) sphere(r);\n        translate([x-r,  r,  r]) sphere(r);\n        translate([ r, y-r,  r]) sphere(r);\n        translate([x-r, y-r,  r]) sphere(r);\n        translate([ r,  r, z-r]) sphere(r);\n        translate([x-r,  r, z-r]) sphere(r);\n        translate([ r, y-r, z-r]) sphere(r);\n        translate([x-r, y-r, z-r]) sphere(r);\n    }\n}\n\nmodule screw_hole() {\n    difference() {\n        cylinder(d=counter_d, h=counter_h, $fn=20);\n        translate([0,0,-0.1]) cylinder(d=hole_d, h=counter_h+0.2, $fn=20);\n    }\n}\n\nmodule base_plate() {\n    difference() {\n        rounded_cube([base_w, base_d, base_h], edge_r);\n        \n        // Left screw hole\n        translate([-hole_spacing/2, base_d/2, -0.1])\n            screw_hole();\n        \n        // Right screw hole\n        translate([hole_spacing/2, base_d/2, -0.1])\n            screw_hole();\n    }\n}\n\nmodule handle_bar() {\n    // Main curved handle body\n    difference() {\n        hull() {\n            // Left rounded end\n            translate([-handle_w/2 + handle_r, handle_d/2, handle_h/2])\n                sphere(r=handle_r);\n            \n            // Right rounded end\n            translate([handle_w/2 - handle_r, handle_d/2, handle_h/2])\n                sphere(r=handle_r);\n            \n            // Center cylinder\n            translate([0, handle_d/2, handle_h/2])\n                rotate([90,0,0])\n                    cylinder(r=handle_r, h=handle_w - 2*handle_r, $fn=32);\n        }\n        \n        // Hollow out underside\n        translate([0, handle_d/2 + 2, handle_h/2])\n            rotate([90,0,0])\n                cylinder(r=handle_r - 3, h=handle_w, $fn=32);\n        \n        // Flatten bottom for printing\n        translate([0, handle_d/2 + handle_r, -1])\n            cube([handle_w + 2, handle_r*2, handle_h + 2], center=true);\n    }\n    \n    // Add grip ridges\n    for(x = [-handle_w/2 + 8 : 8 : handle_w/2 - 8]) {\n        translate([x, handle_d/2 - 1, handle_h/2 + handle_r - 1])\n            rotate([90,0,0])\n                cylinder(r1=1.5, r2=0.5, h=2, $fn=16);\n    }\n}\n\n// Assemble the pull\nunion() {\n    // Base plate\n    translate([0, 0, 0])\n        base_plate();\n    \n    // Handle\n    translate([0, -handle_d/2 + base_d/2, base_h])\n        handle_bar();\n}",
    "renders": true
  },
  {
    "household_item": "latch",
    "openscad_code": "// Realistic Door Latch - Medium Complexity\n// Overall dimensions: ~70mm x 40mm x 25mm\n\n$fn = 32;\n\n// Main body dimensions\nbody_w = 60;\nbody_h = 35;\nbody_d = 20;\nwall_t = 3;\n\n// Latch bolt dimensions\nbolt_l = 35;\nbolt_d = 12;\nbolt_head_r = bolt_d * 0.7;\n\n// Handle dimensions\nhandle_l = 30;\nhandle_d = 8;\nhandle_clear = 15;\n\n// Mounting holes\nscrew_d = 4;\nscrew_head_d = 7;\nscrew_shaft_l = 10;\n\nmodule main_body() {\n    difference() {\n        // Main rectangular body\n        cube([body_w, body_h, body_d], center=true);\n        \n        // Cavity for mechanism\n        translate([0, 0, -wall_t/2])\n            cube([body_w - 2*wall_t, body_h - 2*wall_t, body_d + 1], center=true);\n        \n        // Bolt passage hole\n        translate([body_w/2 - bolt_l/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=body_h + 2, r=bolt_d/2 + 1, center=true);\n        \n        // Handle shaft hole\n        translate([-body_w/2 + 15, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=body_d + 2, r=handle_d/2 + 1, center=true);\n    }\n}\n\nmodule latch_bolt() {\n    difference() {\n        union() {\n            // Main bolt shaft\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=bolt_l, r=bolt_d/2, center=true);\n            \n            // Tapered bolt head\n            translate([bolt_l/2 + bolt_head_r/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=bolt_head_r, r1=bolt_head_r, r2=0, center=true);\n        }\n        \n        // Spring cavity\n        translate([-bolt_l/2 + 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=bolt_d, r=bolt_d/3, center=true);\n        \n        // Cam follower slot\n        translate([-bolt_l/2 + 10, 0, 0])\n            cube([bolt_d*1.5, bolt_d/2, bolt_d*1.5], center=true);\n    }\n}\n\nmodule handle_assembly() {\n    // Handle shaft\n    rotate([90, 0, 0])\n        cylinder(h=body_d/2 + handle_l, r=handle_d/2);\n    \n    // Cam plate\n    translate([0, 0, body_d/2 + handle_l - 2])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=handle_d + 2);\n    \n    // Cam lobe\n    translate([0, -bolt_d/2 - 2, body_d/2 + handle_l])\n        rotate([90, 0, 0])\n            cylinder(h=bolt_d/2, r=bolt_d/2);\n    \n    // Handle grip\n    translate([0, 0, body_d/2 + handle_l + handle_d/2])\n        rotate([90, 0, 0])\n            cylinder(h=handle_d, r=handle_d*1.5);\n    \n    // Grip ridges\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, handle_d*1.5 - 1, body_d/2 + handle_l + handle_d/2])\n                cube([handle_d*3, 2, handle_d], center=true);\n    }\n}\n\nmodule mounting_holes() {\n    // Front mounting holes\n    for(pos = [[-body_w/2 + 10, body_h/2 - 10], \n               [body_w/2 - 10, body_h/2 - 10],\n               [-body_w/2 + 10, -body_h/2 + 10],\n               [body_w/2 - 10, -body_h/2 + 10]]) {\n        translate([pos[0], pos[1], 0])\n            rotate([0, 0, 0])\n                cylinder(h=body_d + 1, r=screw_d/2, center=true);\n        \n        // Countersink\n        translate([pos[0], pos[1], -body_d/2 - 1])\n            rotate([0, 0, 0])\n                cylinder(h=screw_head_d/2, r1=screw_head_d/2, r2=screw_d/2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with mounting holes\n    difference() {\n        main_body();\n        mounting_holes();\n    }\n    \n    // Latch bolt\n    translate([body_w/2 - bolt_l/2, 0, 0])\n        rotate([0, 90, 0])\n            latch_bolt();\n    \n    // Handle assembly\n    translate([-body_w/2 + 15, 0, 0])\n        handle_assembly();\n    \n    // Strengthening ribs\n    for(i = [-1, 1]) {\n        translate([0, i * (body_h/2 - wall_t), body_d/2 - wall_t/2])\n            cube([body_w - 2*wall_t, wall_t, wall_t], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "hinge",
    "openscad_code": "// Realistic Medium-Complexity Hinge\n// Overall size ~70 mm wide, 60 mm tall, 20 mm thick\n// All parts have 1.5 mm wall thickness and 0.4 mm clearances for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Basic dimensions\nhinge_width = 70;\nleaf_height = 60;\nleaf_thickness = 6;\npin_d = 6;\nknuckle_d = 10;\nknuckle_h = 14;\nknuckle_gap = 0.4;\nnum_knuckles = 5;\nleaf_hole_d = 4;\nleaf_hole_spacing = 15;\n\n// Helper module for screw clearance holes\nmodule screw_hole(d, h) {\n    cylinder(d = d, h = h, $fn = 20);\n}\n\n// One leaf of the hinge\nmodule leaf() {\n    difference() {\n        // Main leaf plate\n        cube([hinge_width/2 - knuckle_d/2 - 2, leaf_height, leaf_thickness], center = false);\n        \n        // Chamfer bottom inside edge\n        translate([hinge_width/2 - knuckle_d/2 - 2 - 3, 0, leaf_thickness])\n            rotate([0, 180, 0])\n                cylinder(d = 6, h = 3, $fn = 20);\n        \n        // Screw holes\n        for (y = [leaf_hole_spacing:leaf_hole_spacing:leaf_height - leaf_hole_spacing]) {\n            translate([leaf_hole_spacing, y, -1])\n                screw_hole(leaf_hole_d, leaf_thickness + 2);\n            translate([hinge_width/2 - knuckle_d/2 - 2 - leaf_hole_spacing, y, -1])\n                screw_hole(leaf_hole_d, leaf_thickness + 2);\n        }\n        \n        // Rounded top corners\n        translate([0, leaf_height, 0])\n            sphere(d = leaf_thickness*2, $fn = 20);\n        translate([hinge_width/2 - knuckle_d/2 - 2, leaf_height, 0])\n            sphere(d = leaf_thickness*2, $fn = 20);\n    }\n}\n\n// Knuckles along one leaf\nmodule knuckles(offset = 0) {\n    for (i = [0:1:num_knuckles - 1]) {\n        y = i * (leaf_height / (num_knuckles - 1));\n        translate([hinge_width/2 - knuckle_d/2, y - knuckle_h/2, 0]) {\n            difference() {\n                cylinder(d = knuckle_d, h = knuckle_h, $fn = 20);\n                translate([0, 0, -1])\n                    cylinder(d = pin_d + knuckle_gap, h = knuckle_h + 2, $fn = 20);\n            }\n        }\n    }\n}\n\n// Pin for the hinge\nmodule pin() {\n    color(\"silver\")\n    translate([0, leaf_height/2, 0])\n        cylinder(d = pin_d, h = leaf_height + 1, $fn = 20);\n}\n\n// Complete hinge assembly\nmodule hinge() {\n    // Left leaf with knuckles\n    translate([0, 0, 0]) {\n        leaf();\n        knuckles(0);\n    }\n    \n    // Right leaf with offset knuckles\n    translate([hinge_width, 0, 0])\n        mirror([1, 0, 0]) {\n            leaf();\n            knuckles(1);\n        }\n}\n\n// Render with pin\nhinge();\ntranslate([hinge_width/2, 0, 0])\n    pin();",
    "renders": true
  },
  {
    "household_item": "bolt",
    "openscad_code": "// Realistic medium-complexity bolt\n// M10x60 hex-head bolt with partial thread\n\n$fn = 36;               // Global circle resolution\n\n// Dimensions (all in mm)\nbolt_len        = 60;\nhead_h          = 6.4;\nhead_dia        = 16;\nshank_dia       = 10;\nthread_len      = 40;\nthread_pitch    = 1.5;\nchamfer         = 0.5;\n\n// Hex profile generator (flat-to-flat diameter)\nmodule hex_profile(d, h) {\n    // Side length of hexagon\n    side_len = d / sqrt(3);\n    linear_extrude(height = h)\n        polygon([\n            for (i = [0:5])\n                [side_len * cos(i*60), side_len * sin(i*60)]\n        ]);\n}\n\n// 60° V-thread profile\nmodule thread_profile(p) {\n    h = p * cos(30);         // Thread height\n    translate([shank_dia/2, 0])\n        polygon([\n            [0, 0],\n            [0, h],\n            [-h * tan(30), h],\n            [-h * tan(30), -p + h],\n            [0, -p]\n        ]);\n}\n\n// Single helical thread turn\nmodule thread_turn(p, r, turns = 1) {\n    for (i = [0:5:359])\n        rotate([0, 0, i])\n            translate([0, 0, i/360 * p])\n                thread_profile(p);\n}\n\n// Threaded section\nmodule threads(length, pitch) {\n    turns = length / pitch;\n    for (t = [0:1:turns-1])\n        translate([0, 0, t * pitch])\n            thread_turn(pitch, shank_dia/2, 1);\n}\n\n// Bolt head with slight chamfer\nmodule bolt_head() {\n    difference() {\n        // Main hex head\n        hex_profile(head_dia, head_h);\n\n        // Top chamfer\n        translate([0, 0, head_h - chamfer])\n            cylinder(h = chamfer, r1 = head_dia/2, r2 = head_dia/2 - chamfer);\n    }\n}\n\n// Shank with lead-in radius\nmodule shank() {\n    union() {\n        // Main shank\n        cylinder(h = bolt_len - thread_len, r = shank_dia/2);\n\n        // Lead-in radius under head\n        translate([0, 0, bolt_len - thread_len])\n            cylinder(h = 2, r1 = shank_dia/2, r2 = shank_dia/2 - 0.5);\n    }\n}\n\n// Fully assembled bolt\nmodule bolt() {\n    union() {\n        // Head\n        bolt_head();\n\n        // Shank\n        translate([0, 0, head_h])\n            shank();\n\n        // Threads\n        translate([0, 0, head_h + bolt_len - thread_len])\n            threads(thread_len, thread_pitch);\n    }\n}\n\n// Render the bolt\nbolt();",
    "renders": true
  },
  {
    "household_item": "lock",
    "openscad_code": "// Realistic 3D printable padlock (medium complexity)\n// Overall size: ~60mm x 45mm x 15mm\n\n// Main body module\nmodule lock_body() {\n    // Outer shroud\n    difference() {\n        // Main block\n        cube([50, 40, 12], center=true);\n        \n        // Keyway slot\n        translate([0, -10, 5])\n            cube([6, 20, 3], center=true);\n        \n        // Pin chambers (5 pins)\n        for(i = [-2:1:2]) {\n            translate([i*6, 15, 5])\n                cylinder(h=3, r=2.5, $fn=16);\n        }\n    }\n    \n    // Reinforcement ridges\n    translate([0, 0, 6])\n        cube([52, 42, 2], center=true);\n    \n    // Bottom plate\n    translate([0, 0, -7])\n        cube([45, 35, 2], center=true);\n}\n\n// Shackle module\nmodule shackle() {\n    // Main shackle arc\n    difference() {\n        // Outer arc\n        translate([0, 10, 0])\n            rotate([90, 0, 0])\n                cylinder(h=30, r1=20, r2=20, $fn=64);\n        \n        // Inner hollow\n        translate([0, 10, 0])\n            rotate([90, 0, 0])\n                cylinder(h=32, r1=16, r2=16, $fn=64);\n    }\n    \n    // Left shank\n    translate([0, 10, 15])\n        cylinder(h=25, r=4, $fn=16);\n    \n    // Right shank with notch\n    translate([15, 10, 15])\n        cylinder(h=20, r=4, $fn=16);\n    \n    translate([15, 10, 30])\n        cube([8, 8, 2], center=true);\n}\n\n// Key module (for visual reference)\nmodule key() {\n    translate([0, -30, -5])\n        rotate([0, 90, 0])\n            union() {\n                // Key bow\n                translate([-15, 0, 0])\n                    cylinder(h=3, r=10, $fn=32);\n                \n                // Key shaft\n                translate([0, 0, -1.5])\n                    cube([30, 6, 3], center=true);\n                \n                // Key cuts (bittings)\n                translate([8, 0, -3])\n                    cube([4, 5, 3], center=true);\n                translate([12, 0, -2])\n                    cube([4, 4, 3], center=true);\n                translate([16, 0, -4])\n                    cube([4, 6, 3], center=true);\n            }\n}\n\n// Assembly\nunion() {\n    // Main lock body\n    lock_body();\n    \n    // Shackle (positioned for locked state)\n    translate([0, -5, 6])\n        shackle();\n    \n    // Optional key\n    // key();\n}",
    "renders": true
  },
  {
    "household_item": "key",
    "openscad_code": "// Realistic 3D printable key (medium complexity)\n// Overall length ~70 mm, printable without supports\n\n// Key parameters\nblade_length = 50;\nblade_width = 7;\nblade_thickness = 2.5;\nhead_radius = 12;\nhead_thickness = 4;\nshaft_length = 8;\nshaft_width = 6;\ncutter_width = 1.2;\ncutter_depth = 1.5;\nwall_thickness = 1.5;\n\n// Main key body\nmodule key_head() {\n    // Circular head with hole\n    difference() {\n        cylinder(h=head_thickness, r=head_radius, $fn=60);\n        translate([0, 0, -0.1])\n            cylinder(h=head_thickness+0.2, r=head_radius*0.4, $fn=40);\n    }\n    \n    // Reinforcement rim\n    translate([0, 0, -0.5])\n        cylinder(h=1, r1=head_radius+1, r2=head_radius, $fn=60);\n}\n\n// Key shaft\nmodule key_shaft() {\n    // Tapered shaft\n    hull() {\n        translate([0, 0, 0])\n            cube([shaft_width, head_thickness, shaft_length], center=true);\n        translate([0, 0, shaft_length])\n            cube([blade_width, blade_thickness, 2], center=true);\n    }\n}\n\n// Blade with grooves\nmodule key_blade() {\n    // Main blade body\n    translate([0, 0, shaft_length + blade_length/2])\n        cube([blade_width, blade_thickness, blade_length], center=true);\n    \n    // Edge grooves for pins\n    for (i = [0:4]) {\n        translate([0, 0, shaft_length + 5 + i*9])\n            cube([cutter_width, blade_thickness+0.2, 6], center=true);\n    }\n    \n    // Side grooves for warding\n    translate([blade_width/2 - cutter_width/2, 0, shaft_length + blade_length*0.4])\n        cube([cutter_width, blade_thickness, 12]);\n    translate([-blade_width/2 + cutter_width/2, 0, shaft_length + blade_length*0.7])\n        cube([cutter_width, blade_thickness, 10]);\n    \n    // Tip profile\n    translate([0, 0, shaft_length + blade_length - 1])\n        difference() {\n            cube([blade_width, blade_thickness, 2], center=true);\n            translate([0, 0, 1])\n                cube([blade_width+2, blade_thickness+2, 2], center=true);\n        }\n}\n\n// Key grip pattern\nmodule grip_pattern() {\n    // Raised ridges for grip\n    for (angle = [0:30:150]) {\n        rotate([0, 0, angle])\n        translate([0, head_radius*0.7, head_thickness/2])\n            cube([head_radius*0.3, 1.5, head_thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    key_head();\n    key_shaft();\n    key_blade();\n    \n    // Grip pattern on head\n    grip_pattern();\n    \n    // Chamfer edges for better printing\n    translate([0, 0, head_thickness])\n        cylinder(h=0.5, r1=head_radius, r2=head_radius-0.5, $fn=60);\n}",
    "renders": true
  },
  {
    "household_item": "ledge",
    "openscad_code": "// Realistic 3D-printable stone-look ledge\n// Dimensions: 80mm wide, 20mm deep, 15mm high\n\n$fn = 32; // smooth curves\n\nmodule stone_block(w, d, h, x=0, y=0, z=0, r=0) {\n    // individual weathered stone with rounded top edges\n    translate([x, y, z]) rotate([0, 0, r]) {\n        difference() {\n            // main block with slight taper\n            hull() {\n                cube([w, d, h], center=true);\n                translate([0, 0, 0.3]) cube([w*0.95, d*0.95, h], center=true);\n            }\n            // subtle top rounding\n            translate([0, 0, h/2-0.2]) scale([1, 1, 0.3]) sphere(r=w*0.5, center=true);\n        }\n    }\n}\n\nmodule mortar_gaps() {\n    // thin negative spaces for mortar lines\n    // vertical gaps\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, 0, 7.5]) cube([1.2, 22, 15]);\n    }\n    // horizontal gaps\n    for (z = [2.5, 7.5, 12.5]) {\n        translate([0, 0, z]) cube([82, 22, 1.2]);\n    }\n}\n\nmodule ledge_base() {\n    union() {\n        // bottom course\n        stone_block(20, 18, 5, -30, 0, 2.5);\n        stone_block(20, 18, 5, -10, 0, 2.5);\n        stone_block(20, 18, 5,  10, 0, 2.5);\n        stone_block(20, 18, 5,  30, 0, 2.5);\n        \n        // middle course staggered\n        stone_block(20, 18, 5, -20, 0, 7.5);\n        stone_block(20, 18, 5,   0, 0, 7.5);\n        stone_block(20, 18, 5,  20, 0, 7.5);\n        \n        // top course\n        stone_block(40, 18, 5, -20, 0, 12.5);\n        stone_block(40, 18, 5,  20, 0, 12.5);\n    }\n}\n\nmodule drainage_slots() {\n    // small drainage holes for outdoor use\n    for (x = [-25, -5, 15, 35]) {\n        translate([x, 0, 15]) rotate([90, 0, 0]) \n            cylinder(h=3, d=2, $fn=12);\n    }\n}\n\n// main model\ndifference() {\n    ledge_base();\n    mortar_gaps();\n}\ndrainage_slots();",
    "renders": true
  },
  {
    "household_item": "mantel",
    "openscad_code": "// Realistic Mantel - Medium Complexity\n// Designed for 3D printing at ~80mm width\n\n$fa = 2;\n$fs = 0.5;\n\nmodule mantel(width=80, height=50, depth=25, wall=2) {\n    // Main mantel shelf\n    difference() {\n        translate([0, 0, height-5])\n            cube([width, depth, 5], center=true);\n        \n        // Hollow out shelf for material savings\n        translate([0, 0, height-4])\n            cube([width-wall*2, depth-wall*2, 3], center=true);\n    }\n    \n    // Mantel legs\n    leg_width = 8;\n    leg_depth = depth - 4;\n    \n    // Left leg\n    translate([-width/2 + leg_width/2, 0, height/2 - 2.5])\n        difference() {\n            cube([leg_width, leg_depth, height-5], center=true);\n            // Hollow leg\n            translate([-width/2 + leg_width/2, 0, height/2 - 2.5])\n                cube([leg_width-wall*2, leg_depth-wall*2, height-7], center=true);\n        }\n    \n    // Right leg\n    translate([width/2 - leg_width/2, 0, height/2 - 2.5])\n        difference() {\n            cube([leg_width, leg_depth, height-5], center=true);\n            translate([width/2 - leg_width/2, 0, height/2 - 2.5])\n                cube([leg_width-wall*2, leg_depth-wall*2, height-7], center=true);\n        }\n    \n    // Mantel header/face\n    header_height = 8;\n    translate([0, 0, height - header_height/2 - 5])\n        difference() {\n            cube([width, depth, header_height], center=true);\n            // Hollow header\n            translate([0, 0, height - header_height/2 - 5])\n                cube([width-wall*2, depth-wall*2, header_height-wall], center=true);\n        }\n    \n    // Decorative corbels\n    corbel_width = 6;\n    corbel_height = 12;\n    \n    // Left corbel\n    translate([-width/2 + leg_width + corbel_width/2, 0, height - corbel_height/2 - 5])\n        difference() {\n            cube([corbel_width, depth-2, corbel_height], center=true);\n            // Tapered corbel\n            translate([-width/2 + leg_width + corbel_width/2, 0, height - corbel_height/2 - 5])\n                cube([corbel_width-1, depth-4, corbel_height-1], center=true);\n        }\n    \n    // Right corbel\n    translate([width/2 - leg_width - corbel_width/2, 0, height - corbel_height/2 - 5])\n        difference() {\n            cube([corbel_width, depth-2, corbel_height], center=true);\n            translate([width/2 - leg_width - corbel_width/2, 0, height - corbel_height/2 - 5])\n                cube([corbel_width-1, depth-4, corbel_height-1], center=true);\n        }\n    \n    // Mantel top molding detail\n    mold_height = 2;\n    for (i = [-1, 1]) {\n        translate([i * (width/2 - 2), 0, height - mold_height/2])\n            cube([4, depth+1, mold_height], center=true);\n    }\n}\n\nmantel();",
    "renders": true
  },
  {
    "household_item": "sill",
    "openscad_code": "// Realistic 3D-printable window sill\n// Dimensions optimized for FDM printing (max 100 mm)\n\n$fn=30; // Smooth curves\n\n// Overall dimensions\nsill_length = 95;\nsill_depth = 40;\nsill_thickness = 3;\nnose_protrusion = 5;\n\n// Grooves for water runoff\ngroove_width = 2;\ngroove_depth = 1;\ngroove_spacing = 8;\ngroove_count = floor(sill_length / groove_spacing) - 1;\n\n// Mounting holes\nhole_d = 4;\nhole_inset = 8;\n\n// Sloped top angle for drainage\nslope_angle = 5; // degrees\n\nmodule sill_body() {\n    // Main block, sloped top\n    difference() {\n        union() {\n            // Base block\n            cube([sill_length, sill_depth, sill_thickness]);\n            \n            // Sloped top layer\n            translate([0, 0, sill_thickness])\n            rotate([slope_angle, 0, 0])\n            translate([0, -sill_depth*sin(slope_angle), 0])\n            cube([sill_length, sill_depth, sill_thickness]);\n        }\n        \n        // Cut off bottom overhang\n        translate([0, 0, sill_thickness])\n        cube([sill_length, sill_depth, sill_thickness*2]);\n    }\n}\n\nmodule water_grooves() {\n    for (i = [1:groove_count]) {\n        translate([i * groove_spacing, 0, sill_thickness + 0.1])\n        cube([groove_width, sill_depth, groove_depth]);\n    }\n}\n\nmodule nose_profile() {\n    // Rounded front edge\n    translate([-1, sill_depth - nose_protrusion, 0])\n    union() {\n        // Quarter cylinder for rounded nose\n        rotate([0, -90, 0])\n        cylinder(h = sill_length + 2, r = nose_protrusion);\n        \n        // Fill underneath\n        translate([0, -nose_protrusion, 0])\n        cube([sill_length + 2, nose_protrusion, nose_protrusion]);\n    }\n}\n\nmodule mounting_holes() {\n    // Left and right mounting holes\n    for (x = [hole_inset, sill_length - hole_inset]) {\n        translate([x, sill_depth/2, -1])\n        cylinder(h = sill_thickness + 2, d = hole_d);\n    }\n}\n\nmodule back_lip() {\n    // Small lip to prevent water running back to wall\n    translate([-1, -1, sill_thickness - 1])\n    cube([sill_length + 2, 2, 2]);\n}\n\n// Assemble the sill\ndifference() {\n    union() {\n        sill_body();\n        nose_profile();\n        water_grooves();\n        back_lip();\n    }\n    \n    // Remove mounting holes\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "household_item": "threshold",
    "openscad_code": "// Realistic 3D-printable door threshold\n// Medium complexity (≈80 lines)\n\n// Overall dimensions\nthreshold_length = 90;\nthreshold_width = 25;\nthreshold_height = 8;\ngroove_depth = 1.5;\ngroove_width = 3;\ngroove_spacing = 6;\nchamfer = 1.5;\n\n// Screw holes\nscrew_d = 4;\nscrew_h = threshold_height;\nscrew_inset = 12;\n\n// Main body with chamfered edges\nmodule main_body() {\n    difference() {\n        // Slightly rounded top via chamfer\n        hull() {\n            translate([chamfer, chamfer, 0])\n                cube([threshold_length-2*chamfer, threshold_width-2*chamfer, threshold_height]);\n            translate([chamfer, chamfer, chamfer])\n                cube([threshold_length-2*chamfer, threshold_width-2*chamfer, threshold_height-chamfer]);\n        }\n        \n        // Grooves for grip\n        for (i = [groove_spacing/2 : groove_spacing : threshold_length-groove_spacing/2])\n            translate([i, 0, -groove_depth])\n                cube([groove_width, threshold_width, groove_depth*2]);\n    }\n}\n\n// Drain channel underneath\nmodule drain_channel() {\n    difference() {\n        translate([-1, -1, -0.5])\n            cube([threshold_length+2, threshold_width+2, 2]);\n        translate([2, 2, 0])\n            cube([threshold_length-4, threshold_width-4, 2]);\n    }\n}\n\n// Screw holes (countersunk)\nmodule screw_holes() {\n    for (x = [screw_inset, threshold_length-screw_inset])\n        translate([x, threshold_width/2, 0]) {\n            cylinder(h=screw_h+2, d=screw_d, $fn=16);\n            translate([0,0,screw_h])\n                cylinder(h=2, d1=screw_d*1.8, d2=screw_d, $fn=16);\n        }\n}\n\n// Assembly\nunion() {\n    difference() {\n        main_body();\n        screw_holes();\n    }\n    drain_channel();\n}\n\n// Small alignment pegs for print bed\ntranslate([5, 5, -0.2])\n    cylinder(h=0.2, d=2, $fn=8);\ntranslate([threshold_length-5, 5, -0.2])\n    cylinder(h=0.2, d=2, $fn=8);",
    "renders": true
  },
  {
    "household_item": "step",
    "openscad_code": "// Realistic single step for 3D printing\n// External size: ~65 mm wide x 60 mm deep x 25 mm high\n\n// Parameters\nstep_w   = 65;    // overall width\nstep_d   = 60;    // overall depth\nstep_h   = 25;    // overall height\nwall_t   = 3;     // wall / rib thickness\nrib_n    = 3;     // number of internal ribs\ntread_w  = 2;     // width of each tread line\ntread_d  = 0.5;   // depth of tread grooves\ntread_pitch = 4;  // spacing between tread lines\n\n// Main solid block\nmodule step_solid() {\n    difference() {\n        // outer block with chamfered top edges\n        hull() {\n            translate([wall_t, wall_t, 0])\n                cube([step_w - 2*wall_t, step_d - 2*wall_t, step_h]);\n            translate([0, 0, step_h])\n                cube([step_w, step_d, 0.1]);\n        }\n\n        // chamfers on front top edge\n        translate([-1, -1, step_h - 2])\n            rotate([0, 45, 0])\n                cube([step_w + 2, 3, 3]);\n        translate([-1, -1, step_h - 2])\n            rotate([45, 0, 0])\n                cube([3, step_d + 2, 3]);\n    }\n}\n\n// Hollow out interior\nmodule step_hollow() {\n    difference() {\n        step_solid();\n        // inside cavity\n        translate([wall_t, wall_t, wall_t])\n            cube([step_w - 2*wall_t, step_d - 2*wall_t, step_h - wall_t]);\n        // front edge fillet removal\n        translate([wall_t - 1, wall_t - 1, -1])\n            rotate([0, 0, -45])\n                cube([step_w + 2, wall_t + 1, step_h + 2]);\n    }\n}\n\n// Internal strengthening ribs\nmodule ribs() {\n    for (i = [1 : rib_n - 1]) {\n        x = i * (step_w - 2*wall_t) / rib_n + wall_t;\n        translate([x - wall_t/2, wall_t, wall_t])\n            cube([wall_t, step_d - 2*wall_t, step_h - 2*wall_t]);\n    }\n}\n\n// Tread pattern on top surface\nmodule tread_pattern() {\n    n_lines = floor((step_d - 2*wall_t) / tread_pitch);\n    offset  = ((step_d - 2*wall_t) - n_lines * tread_pitch) / 2;\n    for (i = [0 : n_lines - 1]) {\n        y = offset + wall_t + i * tread_pitch;\n        translate([wall_t, y, step_h - tread_d])\n            cube([step_w - 2*wall_t, tread_w, tread_d]);\n    }\n}\n\n// Assembly\nstep_hollow();\nribs();\ntread_pattern();",
    "renders": true
  },
  {
    "household_item": "riser",
    "openscad_code": "// Realistic medium-complexity riser for 3D printing\n// Overall size: 80 mm wide × 60 mm deep × 30 mm high\n// Wall thickness: 3 mm throughout\n\n$fn = 36;\n\nmodule riser_base() {\n    // Main platform with rounded corners\n    difference() {\n        // Solid base block\n        minkowski() {\n            cube([80, 60, 3], center = true);\n            cylinder(h = 0.01, r = 4);\n        }\n        \n        // Recessed center\n        translate([0, 0, 1.5])\n            cube([74, 54, 3.1], center = true);\n    }\n}\n\nmodule riser_walls() {\n    // Four vertical walls with draft angle for printing\n    for (x = [-37.5, 37.5])\n        translate([x, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r1 = 3, r2 = 2.5);\n    \n    for (y = [-27.5, 27.5])\n        translate([0, y, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r1 = 3, r2 = 2.5);\n}\n\nmodule corner_braces() {\n    // Corner reinforcement gussets\n    for (x = [-35, 35])\n    for (y = [-25, 25]) {\n        translate([x, y, 7.5])\n            rotate([0, 0, x > 0 ? 0 : 90])\n                linear_extrude(height = 15)\n                    polygon(points = [[0, 0], [7, 0], [0, 7]]);\n    }\n}\n\nmodule cable_slot() {\n    // Rear cable management slot\n    translate([0, -30, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 4);\n    \n    translate([0, -30.1, 15])\n        cube([8.1, 0.2, 30], center = true);\n}\n\nmodule anti_slip_pads() {\n    // Rubber-like pads on bottom (modeled as slight protrusions)\n    for (x = [-30, 30])\n    for (y = [-20, 20]) {\n        translate([x, y, -1.6])\n            cylinder(h = 1, r = 3);\n    }\n}\n\nmodule top_surface() {\n    // Top platform with grip texture\n    difference() {\n        // Main top plate\n        translate([0, 0, 30])\n            cube([80, 60, 3], center = true);\n        \n        // Grip pattern grooves\n        for (i = [-35:5:35])\n            translate([i, 0, 31.6])\n                cube([1, 58, 0.5], center = true);\n        \n        for (j = [-25:5:25])\n            translate([0, j, 31.6])\n                cube([78, 1, 0.5], center = true);\n    }\n}\n\n// Assemble complete riser\nunion() {\n    riser_base();\n    riser_walls();\n    corner_braces();\n    cable_slot();\n    anti_slip_pads();\n    top_surface();\n}",
    "renders": true
  },
  {
    "household_item": "tread",
    "openscad_code": "// Realistic tire tread segment - medium complexity\n// Single tread block designed for 3D printing\n// Dimensions: 80mm x 20mm x 12mm\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule tread_block() {\n    // Base structure with rounded edges\n    difference() {\n        // Main block body\n        translate([0, 0, 5])\n        minkowski() {\n            cube([70, 16, 6], center=true);\n            sphere(1);\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 5.5])\n        cube([60, 12, 7], center=true);\n    }\n}\n\nmodule longitudinal_ribs() {\n    // Three main longitudinal ribs with rounded tops\n    for(x = [-25, 0, 25]) {\n        translate([x, 0, 0])\n        difference() {\n            // Rib body\n            translate([0, 0, 9])\n            scale([1, 1, 0.8])\n            cylinder(h=4, r1=4, r2=3.5);\n            \n            // Groove between ribs\n            translate([0, 0, 8])\n            cylinder(h=5, r1=1.5, r2=1.5);\n        }\n    }\n}\n\nmodule transverse_sipes() {\n    // Small transverse cuts for grip\n    for(y = [-6, -3, 0, 3, 6]) {\n        translate([0, y, 9.5])\n        rotate([90, 0, 0])\n        scale([0.3, 3, 1])\n        cylinder(h=10, r=0.5);\n    }\n}\n\nmodule shoulder_blocks() {\n    // Reinforced shoulder blocks\n    for(side = [-1, 1]) {\n        translate([side * 35, 0, 6])\n        difference() {\n            // Shoulder block\n            translate([0, 0, 3])\n            minkowski() {\n                cube([6, 18, 6], center=true);\n                sphere(1);\n            }\n            \n            // Lateral grooves\n            for(x = [-1.5, 0, 1.5]) {\n                translate([x, 0, 3])\n                cube([0.8, 20, 7], center=true);\n            }\n        }\n    }\n}\n\nmodule tread_pattern() {\n    // Combine all tread elements\n    union() {\n        tread_block();\n        longitudinal_ribs();\n        transverse_sipes();\n        shoulder_blocks();\n    }\n}\n\n// Generate the complete tread segment\ntread_pattern();",
    "renders": true
  },
  {
    "household_item": "banister",
    "openscad_code": "// Realistic Banister - Medium Complexity\n// 3D printable, approx 80mm tall\n\n$fn=32;\n\n// Main parameters\npost_height = 80;\npost_width = 8;\nhandrail_height = 75;\nhandrail_width = 6;\nhandrail_depth = 10;\nnum_bars = 5;\nbar_diameter = 4;\nbar_spacing = 12;\n\n// Base post with decorative top\nmodule post() {\n    // Main post body\n    translate([0,0,post_height/2])\n        cube([post_width, post_width, post_height], center=true);\n    \n    // Decorative top sphere\n    translate([0,0,post_height+post_width/2])\n        sphere(d=post_width*1.2);\n    \n    // Base plate\n    translate([0,0,2])\n        cube([post_width*2, post_width*2, 4], center=true);\n}\n\n// Handrail with rounded edges\nmodule handrail() {\n    // Main rail\n    translate([0,0,handrail_height])\n        cube([handrail_depth, post_width*num_bars*bar_spacing/handrail_width, handrail_width], center=true);\n    \n    // Rounded top\n    translate([0,0,handrail_height+handrail_width/2])\n        scale([handrail_depth*0.9, post_width*num_bars*bar_spacing/handrail_width*0.9, 1])\n            sphere(d=handrail_width);\n}\n\n// Decorative baluster bar\nmodule baluster() {\n    // Main bar\n    translate([0,0,post_height/2-10])\n        cylinder(d=bar_diameter, h=post_height-20);\n    \n    // Decorative rings\n    for(i=[1:3]) {\n        translate([0,0,i*15])\n            cylinder(d=bar_diameter*1.5, h=2);\n    }\n}\n\n// Assembly\nmodule banister() {\n    // Left post\n    post();\n    \n    // Right post\n    translate([0, (num_bars-1)*bar_spacing, 0])\n        post();\n    \n    // Handrail connecting posts\n    translate([0, (num_bars-1)*bar_spacing/2, 0])\n        rotate([0,90,0])\n            handrail();\n    \n    // Balusters\n    for(i=[1:num_bars-2]) {\n        translate([0, i*bar_spacing, 0])\n            baluster();\n    }\n    \n    // Bottom rail\n    translate([0, (num_bars-1)*bar_spacing/2, 15])\n        cube([handrail_depth*0.7, (num_bars-1)*bar_spacing, 4], center=true);\n}\n\n// Render the complete banister\nbanister();",
    "renders": true
  },
  {
    "household_item": "baluster",
    "openscad_code": "// Realistic Baluster - Medium Complexity\n// Includes base, shaft, collar, and capital with fluting and fillets\n\n// Overall parameters\nheight = 90;\nbase_d = 18;\ntop_d = 14;\n\n// Base parameters\nbase_height = 8;\nbase_top_d = 14;\n\n// Shaft parameters\nshaft_height = 60;\nshaft_bottom_d = 12;\nshaft_top_d = 10;\n\n// Collar parameters\ncollar_height = 4;\ncollar_d = 14;\n\n// Capital parameters\ncapital_height = 18;\ncapital_top_d = 16;\ncapital_neck_d = 12;\n\n// Fluting parameters\nnum_flutes = 8;\nflute_depth = 0.6;\n\n// Fillet parameters\nfillet_r = 0.8;\n\nmodule fillet(radius, height) {\n    intersection() {\n        cylinder(h=height, r=radius, $fn=20);\n        translate([0, 0, -radius]) sphere(r=radius, $fn=20);\n    }\n}\n\nmodule base() {\n    difference() {\n        cylinder(h=base_height, d=base_d, $fn=32);\n        // Add slight taper to base\n        translate([0, 0, -0.1]) cylinder(h=base_height+0.2, d1=base_d-2, d2=base_d, $fn=32);\n    }\n}\n\nmodule shaft() {\n    // Main shaft with taper\n    cylinder(h=shaft_height, d1=shaft_bottom_d, d2=shaft_top_d, $fn=32);\n    \n    // Add fluting\n    rotate([0, 0, 360/(num_flutes*2)]) \n    for(i=[0:num_flutes-1]) {\n        rotate([0, 0, i*360/num_flutes]) {\n            translate([shaft_bottom_d/2 - flute_depth - 0.5, 0, 0]) \n            cube([flute_depth*2 + 1, 1, shaft_height], center=true);\n        }\n    }\n}\n\nmodule collar() {\n    cylinder(h=collar_height, d=collar_d, $fn=32);\n}\n\nmodule capital() {\n    difference() {\n        // Main capital shape with taper\n        cylinder(h=capital_height, d1=capital_neck_d, d2=capital_top_d, $fn=32);\n        \n        // Add decorative ring\n        translate([0, 0, capital_height/2]) \n        cylinder(h=3, d=capital_top_d+2, $fn=32);\n        \n        // Hollow out center slightly\n        translate([0, 0, -0.1]) \n        cylinder(h=capital_height+0.2, d=capital_neck_d-2, $fn=32);\n    }\n}\n\nmodule baluster() {\n    union() {\n        // Base with fillet\n        translate([0, 0, 0]) base();\n        translate([0, 0, base_height]) \n        scale([1, 1, 0.5]) \n        fillet(fillet_r, fillet_r*2);\n        \n        // Shaft\n        translate([0, 0, base_height+fillet_r]) shaft();\n        \n        // Collar with fillets\n        translate([0, 0, base_height+fillet_r+shaft_height]) \n        scale([1, 1, 0.5]) \n        fillet(fillet_r, fillet_r*2);\n        translate([0, 0, base_height+fillet_r+shaft_height+fillet_r]) collar();\n        translate([0, 0, base_height+fillet_r+shaft_height+fillet_r+collar_height]) \n        scale([1, 1, 0.5]) \n        fillet(fillet_r, fillet_r*2);\n        \n        // Capital\n        translate([0, 0, base_height+fillet_r+shaft_height+fillet_r+collar_height+fillet_r]) capital();\n    }\n}\n\n// Center the baluster\ntranslate([0, 0, 0]) baluster();",
    "renders": true
  },
  {
    "household_item": "post",
    "openscad_code": "// Realistic 3D-printable post with base, shaft, and cap\n// Overall height ~80 mm, suitable for tabletop scenery or architectural model\n\n// Parameters\npost_height = 80;\nbase_height = 8;\nshaft_height = 60;\ncap_height = 12;\nbase_dia = 30;\nshaft_dia = 18;\ncap_dia = 22;\nwall = 1.6;               // 3D-print friendly wall thickness\nsegments = 32;            // smooth curves\n\nmodule rounded_cylinder(h, r1, r2, center=false) {\n    // Custom cylinder with chamfered top and bottom edges\n    difference() {\n        cylinder(h=h, r1=r1, r2=r2, center=center, $fn=segments);\n        // Remove sharp edge chamfers\n        translate([0,0,-0.01]) \n            cylinder(h=0.8, r1=r1-0.8, r2=r1, center=false, $fn=segments);\n        translate([0,0,h-0.8+0.01]) \n            cylinder(h=0.8, r1=r2, r2=r2-0.8, center=false, $fn=segments);\n    }\n}\n\nmodule post_base() {\n    // Flared circular base with shallow concentric rings for realism\n    difference() {\n        rounded_cylinder(base_height, base_dia/2, base_dia/2, center=false);\n        // Hollow bottom cavity for printing stability\n        translate([0,0,wall])\n            cylinder(h=base_height-wall, r=base_dia/2-wall, $fn=segments);\n        // Decorative concentric grooves on top surface\n        for (r=[base_dia/2-2, base_dia/2-4, base_dia/2-6]) {\n            translate([0,0,base_height-0.5])\n                cylinder(h=0.5, r=r, $fn=segments);\n        }\n    }\n}\n\nmodule post_shaft() {\n    // Cylindrical shaft with subtle taper and vertical flutes\n    difference() {\n        rounded_cylinder(shaft_height, shaft_dia/2, shaft_dia/2*0.9, center=false);\n        // Central bore to reduce material\n        translate([0,0,wall])\n            cylinder(h=shaft_height-wall, r=shaft_dia/2-wall, $fn=segments);\n    }\n    \n    // Vertical flutes for classical look\n    for (i=[0:8]) {\n        rotate([0,0,i*360/8])\n            translate([shaft_dia/2-0.6, -1.2, 0])\n                cube([1.2, 2.4, shaft_height]);\n    }\n}\n\nmodule post_cap() {\n    // Simple rounded cap with small finial sphere\n    difference() {\n        // Main cap dome\n        translate([0,0,shaft_height])\n            rounded_cylinder(cap_height*0.8, cap_dia/2, cap_dia/2*0.85);\n        // Hollow inside\n        translate([0,0,shaft_height+wall])\n            cylinder(h=cap_height*0.8-wall, r=cap_dia/2-wall, $fn=segments);\n    }\n    // Small sphere finial on top\n    translate([0,0,shaft_height+cap_height*0.8])\n        sphere(d=4, $fn=segments);\n}\n\n// Final assembly\nunion() {\n    post_base();\n    post_shaft();\n    post_cap();\n}",
    "renders": true
  },
  {
    "household_item": "pillar",
    "openscad_code": "// Realistic medium-complexity pillar for 3D printing\n// Total height ≈ 90 mm, footprint ≈ 25 mm, printable without supports\n\n// Parameters\npillar_height = 90;\nbase_d = 30;\nshaft_d = 20;\ncapital_d = 35;\nwall_t = 2;          // safe wall thickness for FDM printing\n\n// --- Base ---\nmodule base() {\n    difference() {\n        cylinder(h = 8, d = base_d, $fn = 64);               // solid base\n        translate([0, 0, -0.1])\n            cylinder(h = 8.2, d = base_d - 2*wall_t, $fn = 64); // hollow core\n    }\n\n    // Decorative ring\n    translate([0, 0, 8])\n        difference() {\n            cylinder(h = 2, d1 = base_d, d2 = base_d + 4, $fn = 64);\n            cylinder(h = 2.2, d1 = base_d - 2*wall_t, d2 = base_d + 4 - 2*wall_t, $fn = 64);\n        }\n}\n\n// --- Fluted shaft ---\nmodule shaft() {\n    // Core cylinder\n    difference() {\n        cylinder(h = 60, d = shaft_d, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = 60.2, d = shaft_d - 2*wall_t, $fn = 64);\n    }\n\n    // 16 flutes around shaft\n    for (i = [0:15]) {\n        rotate([0, 0, i*22.5])\n            translate([shaft_d/2 - 0.6, -1.5, 0])\n                difference() {\n                    cube([1.2, 3, 60.2]);                   // flute groove\n                    translate([-0.1, -0.1, -0.1])\n                        cube([1.4, 3.2, 60.4]);              // keep walls thick\n                }\n    }\n}\n\n// --- Capital (Ionic-like) ---\nmodule capital() {\n    // Base disc\n    difference() {\n        cylinder(h = 3, d = capital_d, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = 3.2, d = capital_d - 2*wall_t, $fn = 64);\n    }\n\n    // Volutes (simplified scrolls)\n    module volute() {\n        difference() {\n            union() {\n                translate([-3, 0, 0])\n                    scale([1, 0.6, 1])\n                        sphere(d = 6, $fn = 32);\n                translate([3, 0, 0])\n                    scale([1, 0.6, 1])\n                        sphere(d = 6, $fn = 32);\n                cube([6, 3.6, 6], center = true);\n            }\n            translate([0, 0, -0.1])\n                cube([7, 4, 6.2], center = true);              // hollow center\n        }\n    }\n\n    translate([0, 0, 3])\n        volute();\n\n    // Top square abacus\n    translate([0, 0, 9])\n        difference() {\n            cube([28, 28, 4], center = true);\n            cube([28 - 2*wall_t, 28 - 2*wall_t, 4.2], center = true);\n        }\n}\n\n// --- Assembly ---\nbase();\ntranslate([0, 0, 8]) shaft();\ntranslate([0, 0, 68]) capital();",
    "renders": true
  },
  {
    "household_item": "column",
    "openscad_code": "// Realistic style column with moderate complexity\n// Column height ~85 mm, base width ~26 mm\n\nmodule fluting(n = 20, r = 9, h = 45, depth = 0.8) {\n    for(i = [0 : n-1]) {\n        rotate([0, 0, i * 360/n])\n        translate([r, 0, h/2])\n        rotate([0, 90, 0])\n        linear_extrude(height = r, center = true)\n        polygon(points = [\n            [0, -h/2],\n            [depth, -h/2],\n            [depth,  h/2],\n            [0,  h/2]\n        ]);\n    }\n}\n\nmodule column() {\n    // Base plinth\n    difference() {\n        cylinder(h = 6, d1 = 26, d2 = 24, $fn = 60);\n        translate([0, 0, -1])\n        cylinder(h = 8, d = 22, $fn = 60);\n    }\n\n    // Lower torus\n    translate([0, 0, 6])\n    rotate_extrude($fn = 60)\n    translate([12, 0, 0])\n    circle(r = 2);\n\n    // Shaft\n    translate([0, 0, 8])\n    difference() {\n        cylinder(h = 45, d = 18, $fn = 60);\n        // Fluting\n        fluting();\n    }\n\n    // Necking ring\n    translate([0, 0, 53])\n    cylinder(h = 3, d = 19, $fn = 60);\n\n    // Echinus\n    translate([0, 0, 56])\n    cylinder(h = 5, d1 = 19, d2 = 22, $fn = 60);\n\n    // Abacus\n    translate([0, 0, 61])\n    cube([28, 28, 4], center = true);\n\n    // Entasis (subtle bulge in shaft)\n    translate([0, 0, 30.5])\n    scale([1.05, 1.05, 1])\n    cylinder(h = 45, d = 18, $fn = 60);\n}\n\n// Render column\ncolumn();",
    "renders": true
  },
  {
    "household_item": "beam",
    "openscad_code": "// Realistic I-beam with bolt holes, fillets and chamfers\n// Medium complexity ~100 lines\n\n$fn = 32;\n\n// Main dimensions\nbeam_length = 80;\nbeam_height = 40;\nbeam_width = 30;\nflange_thickness = 4;\nweb_thickness = 3;\nbolt_hole_diameter = 6;\nbolt_spacing = 20;\n\n// Fillet radius\nfillet_r = 2;\n\n// Chamfer angle\nchamfer = 1.5;\n\n// Web profile with fillets\nmodule web_profile() {\n    difference() {\n        // Main web\n        cube([beam_length, web_thickness, beam_height - 2*flange_thickness], center=true);\n        \n        // Top fillet\n        translate([0, 0, (beam_height - 2*flange_thickness)/2 - fillet_r])\n            rotate([0, 90, 0])\n                cylinder(h=beam_length, r=fillet_r, center=true);\n        \n        // Bottom fillet\n        translate([0, 0, -(beam_height - 2*flange_thickness)/2 + fillet_r])\n            rotate([0, 90, 0])\n                cylinder(h=beam_length, r=fillet_r, center=true);\n    }\n}\n\n// Flange with chamfers\nmodule flange(height_offset) {\n    difference() {\n        // Main flange\n        translate([0, 0, height_offset])\n            cube([beam_length, beam_width, flange_thickness], center=true);\n        \n        // Side chamfers\n        for(side = [-1, 1]) {\n            translate([0, side*(beam_width/2 - chamfer), height_offset])\n                rotate([90, 0, 0])\n                    cylinder(h=beam_length, r1=0, r2=chamfer, center=true);\n            translate([0, side*(beam_width/2 - chamfer), height_offset])\n                rotate([-90, 0, 0])\n                    cylinder(h=beam_length, r1=0, r2=chamfer, center=true);\n        }\n    }\n}\n\n// Bolt holes\nmodule bolt_holes(height_offset) {\n    for(i = [-1, 1]) {\n        translate([i*bolt_spacing, 0, height_offset])\n            rotate([90, 0, 0])\n                cylinder(h=beam_width + 2, d=bolt_hole_diameter, center=true);\n    }\n}\n\n// Main beam assembly\nunion() {\n    // Web\n    web_profile();\n    \n    // Top flange\n    flange((beam_height - flange_thickness)/2);\n    \n    // Bottom flange\n    flange(-(beam_height - flange_thickness)/2);\n    \n    // Bolt holes in top flange\n    bolt_holes((beam_height - flange_thickness)/2);\n    \n    // Bolt holes in bottom flange\n    bolt_holes(-(beam_height - flange_thickness)/2);\n}",
    "renders": true
  },
  {
    "household_item": "joist",
    "openscad_code": "// Realistic wooden joist with medium complexity\n// Includes wood grain texture, bolt holes, and chamfered edges\n\nmodule wood_grain(length, width, height, grain_size) {\n    // Create subtle wood grain texture using tiny cylinders\n    for (i = [0:grain_size:length]) {\n        for (j = [0:grain_size:width]) {\n            translate([i, j, height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=height, d=grain_size/2, $fn=6);\n        }\n    }\n}\n\nmodule bolt_hole(diameter, depth, chamfer) {\n    // Counter-sunk bolt hole\n    union() {\n        cylinder(h=depth, d=diameter, $fn=16);\n        translate([0, 0, depth])\n            cylinder(h=chamfer, d1=diameter*1.6, d2=diameter, $fn=16);\n    }\n}\n\nmodule joist() {\n    // Main joist dimensions (in mm)\n    length = 80;\n    width = 12;\n    height = 30;\n    chamfer = 1.2;\n    \n    // Main body with chamfered edges\n    difference() {\n        // Outer shape with chamfers\n        union() {\n            // Main block\n            translate([chamfer, chamfer, chamfer])\n                cube([length-chamfer*2, width-chamfer*2, height-chamfer*2]);\n            \n            // Top chamfers\n            translate([chamfer, chamfer, height-chamfer])\n                cube([length-chamfer*2, width-chamfer*2, chamfer]);\n            translate([chamfer, width-chamfer, 0])\n                cube([length-chamfer*2, chamfer, height]);\n            \n            // Side chamfers\n            translate([0, chamfer, chamfer])\n                cube([chamfer, width-chamfer*2, height-chamfer*2]);\n            translate([length-chamfer, 0, 0])\n                cube([chamfer, width, height]);\n        }\n        \n        // Cut chamfer edges\n        // Top edges\n        translate([0, 0, height-chamfer])\n            rotate([45, 0, 0])\n                cube([length, chamfer*2, chamfer*2]);\n        translate([0, width-chamfer*2, height-chamfer])\n            rotate([45, 0, 0])\n                cube([length, chamfer*2, chamfer*2]);\n        \n        // Side edges\n        translate([0, 0, 0])\n            rotate([0, 45, 0])\n                cube([chamfer*2, width, chamfer*2]);\n        translate([length-chamfer*2, 0, 0])\n            rotate([0, 45, 0])\n                cube([chamfer*2, width, chamfer*2]);\n    }\n    \n    // Add wood grain texture\n    wood_grain(length, width, height, 2);\n    \n    // Bolt holes for mounting\n    hole_spacing = 20;\n    for (i = [hole_spacing:hole_spacing:length-hole_spacing]) {\n        difference() {\n            // Left side\n            translate([i, width/2, height/2])\n                rotate([90, 0, 0])\n                    bolt_hole(3, width, 1);\n            \n            // Right side (mirrored)\n            translate([i, width/2, height/2])\n                rotate([90, 0, 0])\n                    bolt_hole(3, width, 1);\n        }\n    }\n    \n    // End grain texture on cut ends\n    for (i = [0:1.5:height]) {\n        for (j = [0:1.5:width]) {\n            translate([0, j, i])\n                rotate([0, 90, 0])\n                    cylinder(h=0.5, d=1, $fn=6);\n            translate([length, j, i])\n                rotate([0, 90, 0])\n                    cylinder(h=0.5, d=1, $fn=6);\n        }\n    }\n    \n    // Notch for beam support\n    notch_depth = 6;\n    notch_height = 10;\n    translate([length/2 - notch_depth/2, -0.1, 0])\n        cube([notch_depth, width+0.2, notch_height]);\n}\n\n// Render the joist\njoist();",
    "renders": true
  },
  {
    "household_item": "stud",
    "openscad_code": "// Realistic 3D Printable Stud (Medium Complexity)\n// Overall height: 60 mm, base diameter: 40 mm\n// Optimized for FDM printing, no supports needed\n\n// Main module\nmodule stud() {\n    // Base cylinder (main body)\n    cylinder(h = 45, d = 40, $fn = 128);\n    \n    // Top chamfer for smooth finish\n    translate([0, 0, 45])\n    cylinder(h = 5, d1 = 40, d2 = 36, $fn = 128);\n    \n    // Threaded section\n    translate([0, 0, 50])\n    threaded_section();\n    \n    // Chamfered nut base\n    translate([0, 0, 55])\n    nut_base();\n}\n\n// Threaded section with simplified threading\nmodule threaded_section() {\n    difference() {\n        // Main threaded body\n        cylinder(h = 5, d = 36, $fn = 128);\n        \n        // Thread grooves (simplified as small notches)\n        for (i = [0:5:360]) {\n            rotate([0, 0, i])\n            translate([17.5, 0, 0])\n            cube([2, 1.5, 5], center = true);\n        }\n    }\n}\n\n// Hex nut base with chamfered edges\nmodule nut_base() {\n    // Main hex body\n    cylinder(h = 5, d = 20, d1 = 20, d2 = 18, $fn = 6);\n    \n    // Chamfer bottom edge\n    translate([0, 0, -0.5])\n    cylinder(h = 1, d1 = 18, d2 = 20, $fn = 6);\n    \n    // Central hole for bolt\n    translate([0, 0, -1])\n    cylinder(h = 7, d = 10, $fn = 64);\n}\n\n// Add grip knurls on base\nmodule grip_knurls() {\n    for (i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([18, 0, 20])\n        cube([4, 2, 10], center = true);\n    }\n}\n\n// Combine all parts\nunion() {\n    stud();\n    \n    // Add grip knurls only on bottom half\n    difference() {\n        grip_knurls();\n        \n        // Remove top portion of knurls\n        translate([0, 0, 25])\n        cube([100, 100, 50], center = true);\n    }\n    \n    // Add small identification dot\n    translate([0, 15, 2])\n    sphere(d = 3, $fn = 32);\n}",
    "renders": true
  },
  {
    "household_item": "plank",
    "openscad_code": "// Realistic wooden plank with medium complexity\n// Dimensions: 80mm x 20mm x 5mm\n\n$fn = 32;\n\n// Main plank body\nmodule plank_body() {\n    // Slightly curved top surface\n    difference() {\n        // Base rectangular shape\n        cube([80, 20, 5], center = true);\n        \n        // Create slight curve on top\n        translate([0, 0, 2.6])\n            scale([1, 1, 0.3])\n                sphere(d = 20);\n        \n        // Round bottom edges slightly\n        translate([0, 0, -2.6])\n            scale([1, 1, 0.3])\n                sphere(d = 20);\n    }\n}\n\n// Wood grain texture using small cylinders\nmodule wood_grain() {\n    // Longitudinal grain lines\n    for (i = [-9:2:9]) {\n        translate([i * 4, 0, 2.51])\n            scale([1, 0.05, 0.05])\n                cube([80, 20, 0.1]);\n    }\n    \n    // Cross grain rings\n    for (j = [-35:5:35]) {\n        translate([j, 0, 2.52])\n            scale([0.05, 1, 0.05])\n                cube([0.1, 20, 0.1]);\n    }\n}\n\n// Screw holes at corners\nmodule screw_holes() {\n    // Counter-sunk holes\n    for (x = [-35, 35]) {\n        for (y = [-7.5, 7.5]) {\n            translate([x, y, 0])\n                // Counter-sink cone\n                cylinder(h = 2.5, d1 = 6, d2 = 3, center = true);\n            \n            translate([x, y, -2.5])\n                // Through hole\n                cylinder(h = 5, d = 3, center = true);\n        }\n    }\n}\n\n// Edge chamfers\nmodule chamfer_edges() {\n    // Top edge chamfers\n    for (side = [-1, 1]) {\n        translate([0, side * 10, 2.5])\n            rotate([0, side * 45, 0])\n                cube([80, 2, 2], center = true);\n    }\n    \n    // Side edge chamfers\n    for (side = [-1, 1]) {\n        translate([side * 40, 0, 0])\n            rotate([0, 0, side * 45])\n                cube([2, 20, 5], center = true);\n    }\n}\n\n// Small knots in wood\nmodule wood_knots() {\n    // Random knots placement\n    translate([-20, -5, 2.5])\n        scale([1, 1, 0.3])\n            cylinder(h = 2, d = 4);\n    \n    translate([15, 6, 2.5])\n        scale([1, 1, 0.3])\n            cylinder(h = 2, d = 3);\n    \n    translate([25, -8, 2.5])\n        scale([1, 1, 0.3])\n            cylinder(h = 2, d = 2.5);\n}\n\n// Assembly\nunion() {\n    // Main plank\n    plank_body();\n    \n    // Add chamfers\n    difference() {\n        plank_body();\n        chamfer_edges();\n    }\n    \n    // Add surface details\n    wood_grain();\n    wood_knots();\n    \n    // Remove screw holes\n    difference() {\n        children();\n        screw_holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "board",
    "openscad_code": "// Realistic cutting board with juice groove and handle hole\n// Medium complexity, 3D-printable, no overhangs\n\n// Overall dimensions\nboard_length = 180;\nboard_width = 120;\nboard_thickness = 12;\n\nmodule board_body() {\n    difference() {\n        // Main board block\n        translate([0, 0, board_thickness/2])\n            cube([board_length, board_width, board_thickness], center=true);\n\n        // Juice groove on top face\n        translate([0, 0, board_thickness - 1.5])\n            cube([board_length - 20, board_width - 20, 3], center=true);\n\n        // Handle hole through thickness\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=board_width, d=30, center=true, $fn=64);\n    }\n}\n\n// Rounded bottom edges with fillets\nmodule rounded_edges() {\n    // Four quarter-cylinders for bottom long edges\n    for (x = [-board_length/2 + 3, board_length/2 - 3])\n        translate([x, 0, 3])\n            rotate([90, 0, 0])\n                cylinder(h=board_width - 6, r=3, center=true);\n\n    // Four quarter-cylinders for bottom short edges\n    for (y = [-board_width/2 + 3, board_width/2 - 3])\n        translate([0, y, 3])\n            rotate([0, 90, 0])\n                cylinder(h=board_length - 6, r=3, center=true);\n\n    // Four corner spheres\n    for (x = [-board_length/2 + 3, board_length/2 - 3])\n        for (y = [-board_width/2 + 3, board_width/2 - 3])\n            translate([x, y, 3])\n                sphere(r=3);\n}\n\n// Anti-slip feet on bottom\nmodule feet() {\n    foot_d = 8;\n    foot_h = 2;\n    offset_x = board_length/2 - 20;\n    offset_y = board_width/2 - 20;\n    \n    for (x = [-offset_x, offset_x])\n        for (y = [-offset_y, offset_y])\n            translate([x, y, 0])\n                cylinder(h=foot_h, d=foot_d);\n}\n\n// Raised rim around juice groove\nmodule rim() {\n    rim_width = 3;\n    rim_height = 1;\n    \n    // Long sides\n    for (x = [-board_length/2 + 10, board_length/2 - 10])\n        translate([x, 0, board_thickness - rim_height/2])\n            cube([board_length - 20 - rim_width*2, rim_width, rim_height], center=true);\n    \n    // Short sides\n    for (y = [-board_width/2 + 10, board_width/2 - 10])\n        translate([0, y, board_thickness - rim_height/2])\n            cube([rim_width, board_width - 20 - rim_width*2, rim_height], center=true);\n}\n\n// Combine all parts\nunion() {\n    difference() {\n        board_body();\n        // Remove sharp bottom corners to make rounded edges fit\n        for (x = [-board_length/2, board_length/2])\n            for (y = [-board_width/2, board_width/2])\n                translate([x, y, 0])\n                    cube([6, 6, 6], center=true);\n    }\n    rounded_edges();\n    feet();\n    rim();\n}",
    "renders": true
  },
  {
    "household_item": "slab",
    "openscad_code": "// Realistic Concrete Slab with Rebar Texture\n// Medium complexity - 3D printable with no overhangs\n\n$fn = 50;  // Smooth curves for realistic look\n\n// Main parameters\nslab_width = 80;\nslab_length = 60;\nslab_thickness = 8;\nwall_thickness = 2;\n\n// Rebar spacing\nrebar_spacing = 10;\nrebar_diameter = 1.5;\n\n// Surface texture parameters\naggregate_size = 0.8;\naggregate_count = 200;\n\n// Main slab body\nmodule main_slab() {\n    difference() {\n        // Solid slab\n        cube([slab_width, slab_length, slab_thickness], center=true);\n        \n        // Hollow center to save material\n        translate([0, 0, 1])\n            cube([slab_width-wall_thickness*2, slab_length-wall_thickness*2, slab_thickness], center=true);\n    }\n}\n\n// Rebar grid - horizontal bars\nmodule rebar_grid() {\n    // Long direction bars\n    for(x = [-slab_width/2+rebar_spacing : rebar_spacing : slab_width/2-rebar_spacing]) {\n        translate([x, 0, -slab_thickness/2+rebar_diameter])\n            rotate([90, 0, 0])\n                cylinder(h=slab_length, d=rebar_diameter, center=true);\n    }\n    \n    // Short direction bars (offset slightly)\n    for(y = [-slab_length/2+rebar_spacing : rebar_spacing : slab_length/2-rebar_spacing]) {\n        translate([0, y, -slab_thickness/2+rebar_diameter*2])\n            rotate([90, 0, 90])\n                cylinder(h=slab_width, d=rebar_diameter, center=true);\n    }\n}\n\n// Surface aggregate texture\nmodule surface_aggregate() {\n    // Top surface\n    for(i = [1:aggregate_count]) {\n        translate([\n            (rand(i*1.1)-0.5)*slab_width,\n            (rand(i*1.2)-0.5)*slab_length,\n            slab_thickness/2 + aggregate_size/2\n        ])\n            sphere(d=aggregate_size + rand(i*1.3)*aggregate_size);\n    }\n    \n    // Bottom surface\n    for(i = [aggregate_count+1:aggregate_count*2]) {\n        translate([\n            (rand(i*1.1)-0.5)*slab_width,\n            (rand(i*1.2)-0.5)*slab_length,\n            -slab_thickness/2 - aggregate_size/2\n        ])\n            sphere(d=aggregate_size + rand(i*1.3)*aggregate_size);\n    }\n}\n\n// Control joints (shallow grooves)\nmodule control_joints() {\n    // Long direction joint\n    translate([0, 0, slab_thickness/2-0.5])\n        cube([slab_width-5, 1, 1]);\n    \n    // Short direction joint\n    translate([0, 0, slab_thickness/2-0.5])\n        cube([1, slab_length-5, 1]);\n}\n\n// Edge chamfers\nmodule edge_chamfers() {\n    // Top edges\n    for(edge = [[-slab_width/2, 0, 0], [slab_width/2, 0, 0], \n                [0, -slab_length/2, 0], [0, slab_length/2, 0]]) {\n        translate([edge[0], edge[1], slab_thickness/2-1])\n            rotate([0, 0, edge[0] != 0 ? 0 : 90])\n                cube([slab_width, 1, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    main_slab();\n    \n    // Rebar visible at edges\n    rebar_grid();\n    \n    // Surface details\n    difference() {\n        union() {\n            surface_aggregate();\n            control_joints();\n        }\n        // Ensure aggregate doesn't extend beyond slab\n        cube([slab_width+2, slab_length+2, slab_thickness+2], center=true);\n    }\n    \n    // Edge details\n    edge_chamfers();\n}\n\n// Random seed for consistent texture\nfunction rand(seed) = rands(seed, 0, 1)[0];",
    "renders": true
  },
  {
    "household_item": "slat",
    "openscad_code": "// Realistic 3D-printable wooden slat with screw holes and chamfers\n// Overall size: 100 x 20 x 8 mm\n\n// Parameters\nslat_l = 100;\nslat_w = 20;\nslat_h = 8;\nchamfer = 1.5;\nhole_d = 4;\nhole_inset = 10;\nwood_texture_depth = 0.3;\n\n// Main slat body module\nmodule slat_body() {\n    difference() {\n        // Outer block with chamfers\n        union() {\n            hull() {\n                // Bottom chamfers\n                translate([chamfer, chamfer, 0])\n                    cube([slat_l - 2*chamfer, slat_w - 2*chamfer, slat_h]);\n                translate([0, 0, chamfer])\n                    cube([slat_l, slat_w, slat_h - 2*chamfer]);\n            }\n            // Top chamfers\n            hull() {\n                translate([chamfer, chamfer, slat_h - chamfer])\n                    cube([slat_l - 2*chamfer, slat_w - 2*chamfer, chamfer]);\n                translate([0, 0, slat_h])\n                    cube([slat_l, slat_w, 0.01]);\n            }\n        }\n        \n        // Screw holes\n        for (x = [hole_inset, slat_l - hole_inset]) {\n            translate([x, slat_w/2, -1])\n                cylinder(h = slat_h + 2, d = hole_d, $fn = 20);\n        }\n        \n        // Wood grain texture\n        for (i = [0:2:slat_l]) {\n            translate([i, 0, slat_h - wood_texture_depth])\n                cube([1, slat_w, wood_texture_depth + 0.1]);\n        }\n    }\n}\n\n// Optional countersink for screws\nmodule countersink() {\n    for (x = [hole_inset, slat_l - hole_inset]) {\n        translate([x, slat_w/2, slat_h - 1])\n            cylinder(h = 2, d1 = hole_d * 2, d2 = hole_d, $fn = 20);\n    }\n}\n\n// Assembly\nslat_body();\ncountersink();",
    "renders": true
  },
  {
    "household_item": "strip",
    "openscad_code": "// LED Strip Light Module - 300 mm long RGB strip\n// Realistic style, medium complexity\n\n$fn = 36;  // Smooth curves\n\n// Overall dimensions\nstrip_length = 100;\nstrip_width = 12;\nstrip_height = 3.2;\nwall_thick = 0.8;\n\n// LED parameters\nled_pitch = 8;\nled_diam = 5;\nled_height = 0.8;\nled_count = floor(strip_length / led_pitch);\n\n// Wire channel parameters\nwire_channel_width = 4;\nwire_channel_height = 1.5;\nwire_channel_offset = 1.2;\n\n// Mounting holes\nmount_hole_diam = 3;\nmount_hole_depth = 1.6;\nmount_hole_spacing = 25;\n\n// Main strip base\nmodule strip_base() {\n    difference() {\n        // Solid base\n        cube([strip_length, strip_width, strip_height], center=true);\n        \n        // Wire channel underneath\n        translate([0, 0, -(strip_height/2 - wire_channel_height/2)])\n            cube([strip_length + 2, wire_channel_width, wire_channel_height], center=true);\n        \n        // Mounting holes along center line\n        for (x = [-strip_length/2 + mount_hole_spacing : mount_hole_spacing : strip_length/2 - mount_hole_spacing]) {\n            translate([x, 0, -strip_height/2])\n                cylinder(h=mount_hole_depth, d=mount_hole_diam, center=false);\n        }\n    }\n}\n\n// Individual LED package\nmodule led_package() {\n    // LED body\n    translate([0, 0, strip_height/2 + led_height/2])\n        cylinder(h=led_height, d=led_diam, center=true);\n    \n    // Clear lens dome\n    translate([0, 0, strip_height/2 + led_height + 0.5])\n        sphere(d=led_diam, $fn=20);\n    \n    // LED anode/cathode pads\n    translate([-led_diam/3, 0, strip_height/2])\n        cube([led_diam/6, led_diam/4, 0.3], center=true);\n    \n    translate([led_diam/3, 0, strip_height/2])\n        cube([led_diam/6, led_diam/4, 0.3], center=true);\n}\n\n// Resistor component\nmodule resistor() {\n    translate([led_pitch/3, 0, strip_height/2])\n        cube([3, 1.6, 0.6], center=true);\n    \n    // Resistor leads\n    translate([-led_pitch/3 - 1.5, 0, strip_height/2])\n        cube([0.3, 0.3, 0.6], center=true);\n    \n    translate([led_pitch/3 + 1.5, 0, strip_height/2])\n        cube([0.3, 0.3, 0.6], center=true);\n}\n\n// Copper traces on surface\nmodule copper_trace(x_pos) {\n    translate([x_pos, 0, strip_height/2 - 0.05])\n        cube([led_pitch - 2, 2, 0.1], center=true);\n}\n\n// Main assembly\nstrip_base();\n\n// Place LEDs and components\nfor (i = [0 : led_count - 1]) {\n    x_pos = -strip_length/2 + led_pitch/2 + i * led_pitch;\n    \n    translate([x_pos, 0, 0]) {\n        led_package();\n        resistor();\n    }\n    \n    // Add copper traces between LEDs\n    copper_trace(x_pos);\n}\n\n// End caps\ntranslate([strip_length/2 + 0.4, 0, 0])\n    cube([0.8, strip_width, strip_height], center=true);\n\ntranslate([-strip_length/2 - 0.4, 0, 0])\n    cube([0.8, strip_width, strip_height], center=true);\n\n// Solder pads at ends\ntranslate([strip_length/2 + 0.4, 0, strip_height/2 - 0.2])\n    cube([1.2, 4, 0.4], center=true);\n\ntranslate([-strip_length/2 - 0.4, 0, strip_height/2 - 0.2])\n    cube([1.2, 4, 0.4], center=true);",
    "renders": true
  },
  {
    "household_item": "batten",
    "openscad_code": "// Realistic Batten (Medium Complexity)\n// A 3D printable batten with wood grain and nail holes\n\n// Parameters\nbatten_length = 80;\nbatten_width = 8;\nbatten_thickness = 5;\ngrain_depth = 0.2;\nnail_hole_diameter = 1.5;\nnail_hole_depth = 2;\nedge_chamfer = 0.5;\n\n// Main batten body with rounded edges\nmodule batten_body() {\n    // Create main block\n    difference() {\n        // Rounded top edges\n        minkowski() {\n            cube([batten_length, batten_width, batten_thickness - edge_chamfer * 2], center = true);\n            cylinder(r = edge_chamfer, h = 0.1, $fn = 8);\n        }\n        \n        // Remove bottom chamfer to keep flat base\n        translate([0, 0, -batten_thickness/2])\n            cube([batten_length + 2, batten_width + 2, edge_chamfer + 0.1], center = true);\n    }\n}\n\n// Wood grain texture on top surface\nmodule wood_grain() {\n    difference() {\n        // Base batten\n        batten_body();\n        \n        // Grain lines\n        for(i = [0:3:batten_length-3]) {\n            translate([i - batten_length/2, 0, batten_thickness/2 - grain_depth/2])\n                cube([0.5, batten_width - 1, grain_depth + 0.1], center = true);\n        }\n        \n        // Cross grain knots\n        for(i = [15:25:batten_length-15]) {\n            translate([i - batten_length/2, 0, batten_thickness/2 - grain_depth/2])\n                rotate([0, 0, 45])\n                scale([1, 0.3, 1])\n                cylinder(h = grain_depth + 0.1, r = 1.5, $fn = 8, center = true);\n        }\n    }\n}\n\n// Nail holes\nmodule nail_holes() {\n    difference() {\n        wood_grain();\n        \n        // First nail hole\n        translate([-batten_length/2 + 10, 0, batten_thickness/2])\n            cylinder(h = nail_hole_depth + 0.1, r = nail_hole_diameter/2, $fn = 12);\n        \n        // Second nail hole\n        translate([batten_length/2 - 10, 0, batten_thickness/2])\n            cylinder(h = nail_hole_depth + 0.1, r = nail_hole_diameter/2, $fn = 12);\n        \n        // Center nail hole\n        translate([0, 0, batten_thickness/2])\n            cylinder(h = nail_hole_depth + 0.1, r = nail_hole_diameter/2, $fn = 12);\n    }\n}\n\n// End grain details\nmodule end_grain() {\n    difference() {\n        nail_holes();\n        \n        // Left end grain rings\n        for(i = [0:5:batten_width/2 - 1]) {\n            translate([-batten_length/2, 0, batten_thickness/2 - i/2 - 0.5])\n                rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 0.3, r1 = i + 1, r2 = i + 1.2, $fn = 16);\n                    translate([0, 0, -0.1])\n                        cylinder(h = 0.5, r1 = i, r2 = i + 0.1, $fn = 16);\n                }\n        }\n        \n        // Right end grain rings\n        for(i = [0:5:batten_width/2 - 1]) {\n            translate([batten_length/2, 0, batten_thickness/2 - i/2 - 0.5])\n                rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 0.3, r1 = i + 1, r2 = i + 1.2, $fn = 16);\n                    translate([0, 0, -0.1])\n                        cylinder(h = 0.5, r1 = i, r2 = i + 0.1, $fn = 16);\n                }\n        }\n    }\n}\n\n// Final assembly\nend_grain();",
    "renders": true
  },
  {
    "household_item": "lath",
    "openscad_code": "// Realistic 3D printable lath (woodworking strip)\n// 80 mm long, 8 mm x 30 mm cross-section\n// Medium complexity with chamfers, screw holes and wood grain texture\n\n// Parameters\nlath_length = 80;\nlath_width  = 30;\nlath_thick  = 8;\nchamfer     = 1;\nhole_diam   = 3.2;\nhole_depth  = 4;\nhole_pitch  = 20;\ngrain_depth = 0.2;\nwall        = 1.2;\n\nmodule chamfered_block(w, h, l, c) {\n    difference() {\n        cube([w, h, l]);\n        // Top-right chamfer\n        translate([w-c, h-c, -1])\n            cube([c+1, c+1, l+2]);\n        // Top-left chamfer\n        translate([-1, h-c, -1])\n            cube([c+1, c+1, l+2]);\n        // Bottom-right chamfer\n        translate([w-c, -1, -1])\n            cube([c+1, c+1, l+2]);\n        // Bottom-left chamfer\n        translate([-1, -1, -1])\n            cube([c+1, c+1, l+2]);\n    }\n}\n\nmodule screw_holes(d, depth, pitch, len) {\n    for (i = [0: pitch: len - pitch/2]) {\n        translate([lath_width/2, lath_thick/2, i])\n            rotate([90, 0, 0])\n                cylinder(d = d, h = depth, $fn = 16);\n    }\n}\n\nmodule wood_grain(length, width, depth, groove) {\n    n_lines = floor(length / 2);\n    for (i = [1: n_lines - 1]) {\n        translate([width/2, -groove/2, i*2])\n            cube([width, groove, 0.2]);\n    }\n}\n\n// Main lath body\ndifference() {\n    chamfered_block(lath_width, lath_thick, lath_length, chamfer);\n    // Countersink holes\n    screw_holes(hole_diam, hole_depth, hole_pitch, lath_length);\n}\n\n// Wood grain texture on top face\ntranslate([0, lath_thick - grain_depth, 0])\n    wood_grain(lath_length, lath_width, grain_depth, 0.1);\n\n// Add subtle rounding on long edges for realism\nmodule edge_round(w, h, l, r) {\n    hull() {\n        translate([r, r, 0])\n            cube([w-2*r, h-2*r, l]);\n        translate([r, r, -r])\n            sphere(r);\n        translate([w-r, r, -r])\n            sphere(r);\n        translate([r, h-r, -r])\n            sphere(r);\n        translate([w-r, h-r, -r])\n            sphere(r);\n    }\n}\n\n// Apply edge rounding\ndifference() {\n    edge_round(lath_width, lath_thick, lath_length, 0.5);\n    // Remove internal material for hollow printing\n    translate([wall, wall, wall])\n        cube([lath_width-2*wall, lath_thick-2*wall, lath_length-2*wall]);\n}",
    "renders": true
  },
  {
    "household_item": "girder",
    "openscad_code": "// I-beam girder (medium-complexity, realistic style)\n// Overall dimensions: ~80 mm long, 16 mm wide, 20 mm high\n// 3D-printable: no overhangs >45°, 2 mm wall thickness minimum\n\n// ---------- parameters ----------\nlength = 80;           // total girder length\nheight = 20;           // total girder height\nwidth  = 16;           // total girder width\nflange_t = 3;          // flange thickness\nweb_t    = 2;          // web thickness\nbolt_d   = 3;          // bolt hole diameter\nbolt_hole_depth = 4;   // depth of counter-bore\nedge_r = 1;            // edge fillet radius\nsegments = 32;         // cylinder resolution\n\n// ---------- module: bolt hole ----------\nmodule bolt_hole(dia, depth) {\n    // counter-bore head\n    translate([0,0,-depth/2])\n        cylinder(h=depth, d1=dia*1.8, d2=dia, $fn=segments);\n    // clearance hole\n    translate([0,0,-depth/2-2])\n        cylinder(h=depth+2, d=dia, $fn=segments);\n}\n\n// ---------- module: flange edge fillet ----------\nmodule flange_edge(radius, len) {\n    // quarter-cylinders along flange edges\n    translate([0, width/2-radius, height/2-radius])\n        rotate([0,90,0])\n            cylinder(h=len, r=radius, $fn=segments);\n    translate([0, -(width/2-radius), height/2-radius])\n        rotate([0,90,0])\n            cylinder(h=len, r=radius, $fn=segments);\n    translate([0, width/2-radius, -(height/2-radius)])\n        rotate([0,90,0])\n            cylinder(h=len, r=radius, $fn=segments);\n    translate([0, -(width/2-radius), -(height/2-radius)])\n        rotate([0,90,0])\n            cylinder(h=len, r=radius, $fn=segments);\n}\n\n// ---------- main girder body ----------\nunion() {\n    // top flange\n    translate([0, 0, (height-flange_t)/2])\n        cube([length, width, flange_t], center=true);\n\n    // bottom flange\n    translate([0, 0, -(height-flange_t)/2])\n        cube([length, width, flange_t], center=true);\n\n    // web\n    translate([0, 0, 0])\n        cube([length, web_t, height-2*flange_t], center=true);\n\n    // flange edge fillets\n    difference() {\n        union() {\n            flange_edge(edge_r, length);\n        }\n        // cut fillets back to flush\n        translate([0, 0, height/2])\n            cube([length+2, width+2, flange_t+1], center=true);\n        translate([0, 0, -height/2])\n            cube([length+2, width+2, flange_t+1], center=true);\n    }\n\n    // bolt holes every 20 mm\n    for (x = [-(length/2-10) : 20 : (length/2-10)]) {\n        // top flange\n        translate([x,  5,  height/2-flange_t/2])\n            rotate([90,0,0])\n                bolt_hole(bolt_d, bolt_hole_depth);\n        translate([x, -5,  height/2-flange_t/2])\n            rotate([90,0,0])\n                bolt_hole(bolt_d, bolt_hole_depth);\n\n        // bottom flange\n        translate([x,  5,  -height/2+flange_t/2])\n            rotate([90,0,0])\n                bolt_hole(bolt_d, bolt_hole_depth);\n        translate([x, -5,  -height/2+flange_t/2])\n            rotate([90,0,0])\n                bolt_hole(bolt_d, bolt_hole_depth);\n    }\n\n    // stiffener ribs every 40 mm\n    for (x = [-(length/2-20) : 40 : (length/2-20)]) {\n        translate([x, 0, 0])\n            rotate([0,90,0])\n                difference() {\n                    // triangular rib\n                    linear_extrude(height=web_t)\n                        polygon(points=[\n                            [0,0],\n                            [0,(height-2*flange_t)/2],\n                            [(width-web_t)/2,0]\n                        ]);\n                    // cut to web plane\n                    translate([(width-web_t)/2-0.1, -0.1, -0.1])\n                        cube([0.2, (height-2*flange_t)/2+0.2, web_t+0.2]);\n                }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "rafter",
    "openscad_code": "// Realistic rafter with birdsmouth cut, ridge notch, rafter tail, and metal connector plate\n// Overall length 80 mm, suitable for 3D printing on most FDM machines\n\n// Parameters\ntotal_length = 80;\nwidth = 12;\nheight = 18;\npitch_angle = 30;          // degrees from horizontal\nbirdsmouth_depth = 4;\nbirdsmouth_height = 8;\nridge_notch_depth = 3;\nridge_notch_width = 6;\ntail_length = 12;\ntail_height = 4;\nplate_thickness = 1.2;\nplate_width = 8;\nplate_length = 10;\nbolt_diameter = 2;\n\n// Convert pitch to radians\npitch = pitch_angle;\n\n// Top surface angle of rafter\nrafter_top_angle = 90 - pitch_angle;\n\n// Birdsmouth cut module\nmodule birdsmouth_cut() {\n    // Main notch\n    translate([0, 0, birdsmouth_height]) {\n        rotate([0, 0, -pitch]) {\n            cube([birdsmouth_depth / cos(pitch) + 0.1, width + 0.1, birdsmouth_depth * sin(pitch) + 0.1], center = true);\n        }\n    }\n}\n\n// Ridge notch module\nmodule ridge_notch() {\n    rotate([0, 0, -pitch]) {\n        translate([total_length - ridge_notch_depth / sin(pitch) - 0.1, 0, height - ridge_notch_depth / 2]) {\n            cube([ridge_notch_depth / sin(pitch) + 0.2, ridge_notch_width + 0.2, ridge_notch_depth + 0.2], center = true);\n        }\n    }\n}\n\n// Rafter tail module\nmodule rafter_tail() {\n    translate([0, 0, -tail_height]) {\n        rotate([0, 0, -pitch]) {\n            for (i = [0:1:3]) {\n                translate([-i * tail_length / 4, 0, i * tail_height / 4]) {\n                    cube([tail_length / 4 + 0.1, width + 0.1, tail_height + 0.1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Metal connector plate module\nmodule connector_plate() {\n    color(\"silver\") {\n        translate([plate_length / 2 + birdsmouth_depth, 0, birdsmouth_height / 2]) {\n            rotate([0, 90, 0]) {\n                // Main plate\n                cube([plate_length, plate_width, plate_thickness], center = true);\n                \n                // Bolt holes\n                for (x = [-plate_length/3, plate_length/3]) {\n                    for (y = [-plate_width/3, plate_width/3]) {\n                        translate([x, y, 0]) {\n                            cylinder(h = plate_thickness + 0.2, r = bolt_diameter / 2, center = true, $fn = 16);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main rafter body\nmodule rafter_body() {\n    difference() {\n        union() {\n            // Main beam\n            rotate([0, 0, -pitch]) {\n                cube([total_length, width, height], center = false);\n            }\n            \n            // Tail\n            rafter_tail();\n        }\n        \n        // Birdsmouth cut\n        birdsmouth_cut();\n        \n        // Ridge notch\n        ridge_notch();\n        \n        // Optional print-in-place support removal holes\n        for (i = [1:3]) {\n            translate([total_length * i / 4, 0, height / 2]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = width + 0.2, r = 1.5, center = true, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Assemble complete rafter\nrafter_body();\nconnector_plate();",
    "renders": true
  },
  {
    "household_item": "truss",
    "openscad_code": "// Realistic Warren Truss Bridge Segment\n// Designed for 3D printing with 2 mm wall thickness\n// Overall length = 80 mm, height = 20 mm, width = 20 mm\n\n// Parameters\nwall = 2;               // 2 mm wall thickness for 3D printing\npin_d = 3;              // pin diameter\npin_h = wall + 2;       // pin height\nL = 80;                 // total length\nH = 20;                 // total height\nW = 20;                 // total width\n\nmodule pin() {\n    // 3D-printable pin (no overhangs)\n    cylinder(h = pin_h, d = pin_d, $fn = 16);\n}\n\nmodule chord(is_top = false) {\n    // Top or bottom chord\n    difference() {\n        // Main rectangular tube\n        translate([0, 0, is_top ? H-wall : wall])\n            cube([L, W, wall], center = true);\n        \n        // Lightening holes along chord\n        for (i = [-L/2 + 10 : 10 : L/2 - 10]) {\n            translate([i, 0, is_top ? H-wall : wall])\n                cylinder(h = wall + 0.1, d = 6, $fn = 20, center = true);\n        }\n    }\n}\n\nmodule web() {\n    // Diagonal web members forming Warren truss pattern\n    for (i = [-L/2 + 5 : 10 : L/2 - 5]) {\n        // Left diagonal\n        translate([i, 0, 0])\n        rotate([0, atan2(H, L/4), 0])\n        scale([sqrt(pow(L/4, 2) + pow(H, 2))/10, 1, 1])\n            cube([10, W-2*wall, wall], center = true);\n        \n        // Right diagonal\n        translate([i, 0, 0])\n        rotate([0, -atan2(H, L/4), 0])\n        scale([sqrt(pow(L/4, 2) + pow(H, 2))/10, 1, 1])\n            cube([10, W-2*wall, wall], center = true);\n    }\n}\n\nmodule gusset_plates() {\n    // Gusset plates at joints\n    difference() {\n        union() {\n            for (i = [-L/2 + 5 : 10 : L/2 - 5]) {\n                // Top joints\n                translate([i, 0, H-wall/2])\n                    cube([8, W, wall], center = true);\n                \n                // Bottom joints\n                translate([i + 5, 0, wall/2])\n                    cube([8, W, wall], center = true);\n            }\n        }\n        \n        // Bolt holes\n        for (i = [-L/2 + 5 : 10 : L/2 - 5]) {\n            translate([i, 0, H-wall/2])\n                cylinder(h = wall + 0.1, d = 3.2, $fn = 16, center = true);\n            translate([i + 5, 0, wall/2])\n                cylinder(h = wall + 0.1, d = 3.2, $fn = 16, center = true);\n        }\n    }\n}\n\nmodule end_plates() {\n    // End connection plates\n    difference() {\n        translate([-L/2 - wall/2, 0, H/2])\n            cube([wall, W, H], center = true);\n        \n        // Connection holes\n        for (j = [H/4, 3*H/4]) {\n            translate([-L/2 - wall/2, 0, j])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 0.1, d = 3.2, $fn = 16, center = true);\n        }\n    }\n    \n    mirror([1, 0, 0])\n        end_plates();\n}\n\n// Assemble the truss\nunion() {\n    chord(true);      // Top chord\n    chord(false);     // Bottom chord\n    web();            // Diagonal web members\n    gusset_plates();  // Gusset plates at joints\n    end_plates();     // End connection plates\n}",
    "renders": true
  },
  {
    "household_item": "arch",
    "openscad_code": "// Realistic Roman-style stone arch\n// Dimensions optimized for 3D printing (80mm wide)\n\n// Constants\narch_width = 80;\narch_height = 60;\narch_depth = 25;\nstone_thickness = 4;\nkeystone_height = 8;\n\n// Stone textures module\nmodule stone_texture() {\n    // Create random stone surface pattern\n    for(i = [0:5:20]) {\n        translate([i-10, 0, -1]) \n            cube([2, arch_depth+2, 2]);\n    }\n    for(i = [0:5:arch_depth]) {\n        translate([-1, i-12.5, -1]) \n            cube([arch_width+2, 2, 2]);\n    }\n}\n\n// Individual stone block\nmodule stone_block(w, h, d) {\n    difference() {\n        // Main stone shape with rounded edges\n        minkowski() {\n            cube([w, d, h], center=true);\n            sphere(0.5);\n        }\n        // Add stone texture\n        translate([0, 0, h/2+0.1]) {\n            scale([0.9, 0.9, 1]) \n                stone_texture();\n        }\n    }\n}\n\n// Arch stones\nmodule arch_stones() {\n    // Parameters for arch\n    inner_radius = 25;\n    outer_radius = 30;\n    num_stones = 12;\n    \n    // Calculate angle for each stone\n    angle_step = 180 / (num_stones - 1);\n    \n    // Create arch stones\n    for(i = [0:num_stones-1]) {\n        angle = i * angle_step - 90;\n        \n        // Inner stone position\n        x_inner = inner_radius * cos(angle);\n        y_inner = inner_radius * sin(angle);\n        \n        // Outer stone position\n        x_outer = outer_radius * cos(angle);\n        y_outer = outer_radius * sin(angle);\n        \n        // Stone dimensions\n        stone_w = sqrt(pow(x_outer - x_inner, 2) + pow(y_outer - y_inner, 2)) + 1;\n        stone_h = stone_thickness;\n        \n        translate([x_inner + arch_width/2, 0, y_inner + arch_height - inner_radius]) {\n            rotate([0, 0, angle]) {\n                stone_block(stone_w, stone_h, arch_depth);\n            }\n        }\n    }\n    \n    // Keystone (top center stone)\n    translate([arch_width/2, 0, arch_height]) {\n        stone_block(6, keystone_height, arch_depth);\n    }\n}\n\n// Base pillars\nmodule base_pillars() {\n    pillar_width = 8;\n    pillar_height = arch_height - 25;\n    \n    // Left pillar\n    translate([pillar_width/2, 0, pillar_height/2]) {\n        stone_block(pillar_width, pillar_height, arch_depth);\n    }\n    \n    // Right pillar\n    translate([arch_width - pillar_width/2, 0, pillar_height/2]) {\n        stone_block(pillar_width, pillar_height, arch_depth);\n    }\n}\n\n// Foundation blocks\nmodule foundation() {\n    foundation_height = 6;\n    \n    // Main foundation\n    translate([arch_width/2, 0, -foundation_height/2]) {\n        stone_block(arch_width + 6, foundation_height, arch_depth + 6);\n    }\n    \n    // Additional base stones\n    for(i = [0:1]) {\n        x = i * arch_width + 3;\n        translate([x, 0, -foundation_height - 3]) {\n            stone_block(6, 3, arch_depth);\n        }\n    }\n}\n\n// Assemble the complete arch\nunion() {\n    foundation();\n    base_pillars();\n    arch_stones();\n}",
    "renders": true
  },
  {
    "household_item": "vault",
    "openscad_code": "// Realistic Medium-Complexity Bank Vault\n// Dimensions chosen for 80 mm total height\n\n$fn = 64;  // Smooth cylinders and spheres\n\n// Overall shell dimensions\nvault_outer_w = 60;\nvault_outer_d = 50;\nvault_outer_h = 80;\n\n// Wall thickness\nwall_th = 3;\n\n// Internal cavity\nvault_inner_w = vault_outer_w - 2*wall_th;\nvault_inner_d = vault_outer_d - 2*wall_th;\nvault_inner_h = vault_outer_h - 2*wall_th;\n\nmodule vault_shell() {\n    difference() {\n        // Outer box\n        cube([vault_outer_w, vault_outer_d, vault_outer_h], center = true);\n        \n        // Carve out inner cavity\n        translate([0, 0, wall_th/2])  // Lower the cavity to leave thicker bottom\n        cube([vault_inner_w, vault_inner_d, vault_inner_h], center = true);\n    }\n}\n\n// Reinforcing bands around the body\nband_th = 2;\nband_h  = 4;\n\nmodule reinforcing_bands() {\n    for (z = [-30, -15, 0, 15, 30]) {\n        translate([0, 0, z])\n        difference() {\n            cube([vault_outer_w + 0.2, vault_outer_d + 0.2, band_h], center = true);\n            cube([vault_outer_w - band_th, vault_outer_d - band_th, band_h + 0.2], center = true);\n        }\n    }\n}\n\n// Door with hinges on left\ndoor_w = vault_inner_w * 0.9;\ndoor_h = vault_inner_h * 0.9;\ndoor_th = wall_th + 1;\n\nmodule vault_door() {\n    // Door slab\n    translate([vault_outer_w/2 + door_th/2, 0, 0])\n    rotate([0, -90, 0])\n    cube([door_h, door_w, door_th], center = true);\n\n    // Hinges\n    for (z = [-door_h/3, door_h/3]) {\n        translate([vault_outer_w/2, 0, z])\n        rotate([0, -90, 0])\n        cylinder(h = door_th + 2, r = 2.5, center = true);\n    }\n\n    // Lock mechanism housing (cylindrical protrusion)\n    translate([vault_outer_w/2 + door_th, 0, 0])\n    cylinder(h = 8, r = 6);\n}\n\n// Lock dial\ndial_r = 4;\ndial_h = 3;\n\nmodule combination_lock() {\n    translate([vault_outer_w/2 + door_th + 4, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = dial_h, r = dial_r);\n    \n    // Dial handle\n    translate([vault_outer_w/2 + door_th + 4 + dial_h/2, dial_r - 1, 0])\n    rotate([0, 0, 90])\n    cube([1.5, 3, 1.5], center = true);\n}\n\n// Internal shelf\nshelf_th = 2;\nmodule internal_shelf() {\n    translate([0, 0, -vault_inner_h/4])\n    cube([vault_inner_w - 4, vault_inner_d - 4, shelf_th], center = true);\n}\n\n// Assemble the vault\nunion() {\n    vault_shell();\n    reinforcing_bands();\n    vault_door();\n    combination_lock();\n    internal_shelf();\n}",
    "renders": true
  },
  {
    "household_item": "dome",
    "openscad_code": "// Realistic Medium-Complexity Dome for 3D Printing\n// Approx. 65 mm diameter, 35 mm height\n\nmodule dome_shell(h, r, wall) {\n    difference() {\n        sphere(r);\n        translate([0,0,-(r*0.05)])\n            sphere(r - wall);\n        // Flat base\n        translate([0,0,-r])\n            cube([r*2.2, r*2.2, r], center=true);\n    }\n    // Cylindrical base collar\n    cylinder(h=wall*1.5, r1=r-wall*0.5, r2=r-wall*0.5, center=false);\n}\n\nmodule ribs(n, r, h) {\n    rib_w = 1.2;\n    rib_h = h * 0.5;\n    for (i=[0:n-1]) {\n        rotate([0,0,i*360/n])\n            translate([0,0,-h*0.1])\n                cube([rib_w, r*1.05, rib_h], center=true);\n    }\n}\n\nmodule skylight(r, thickness) {\n    // Ring\n    difference() {\n        cylinder(h=thickness*1.5, r1=r*0.25, r2=r*0.28, center=true);\n        cylinder(h=thickness*2, r1=r*0.22, r2=r*0.22, center=true);\n    }\n    // Glass pane\n    color(\"lightblue\", 0.5)\n        translate([0,0,-thickness*0.5])\n            cylinder(h=thickness, r1=r*0.215, r2=r*0.215, center=true);\n}\n\nmodule vent_holes(count, r, wall) {\n    hole_r = 2.5;\n    hole_h = wall + 1;\n    for (i=[0:count-1]) {\n        angle = 45 + i*(90/count);\n        rotate([0,0,i*360/count])\n            rotate([0,angle,0])\n                translate([0,0,r*0.6])\n                    rotate([90,0,0])\n                        cylinder(h=hole_h, r=hole_r, center=true, $fn=20);\n    }\n}\n\nmodule door(r, wall) {\n    door_w = 12;\n    door_h = 18;\n    door_t = wall + 0.5;\n    translate([r-wall*0.5, -door_w/2, door_h/2])\n        cube([door_t, door_w, door_h], center=true);\n}\n\nmodule antenna() {\n    // Base\n    translate([0,0,32.5])\n        cylinder(h=2, r=3, center=false);\n    // Mast\n    cylinder(h=12, r=1, center=false);\n    // Sphere tip\n    translate([0,0,12])\n        sphere(r=1.5);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        dome_shell(h=35, r=32.5, wall=2);\n        ribs(n=16, r=32.5, h=35);\n        skylight(r=32.5, thickness=1.5);\n        door(r=32.5, wall=2);\n    }\n    vent_holes(count=8, r=32.5, wall=2);\n}\n\ntranslate([0,25,0])\n    antenna();",
    "renders": true
  },
  {
    "household_item": "roof",
    "openscad_code": "// Realistic medium-complexity gable roof with rafters, ridge beam, and shingles\n// Print-ready (no overhangs, 2 mm walls)\n\nroof_width = 70;          // overall footprint\nroof_depth = 90;\nroof_height = 25;\nwall_thickness = 2;       // printable walls\nshingle_size = 6;         // single shingle tile\nrafter_spacing = 15;      // distance between rafters\n\nmodule shingle() {\n    // One asphalt shingle tile\n    difference() {\n        translate([0,0,0.5])\n            cube([shingle_size, shingle_size*1.5, 1], center=true);\n        translate([0,0,1.2])\n            cube([shingle_size-0.5, shingle_size*1.5-0.5, 2], center=true);\n    }\n}\n\nmodule shingle_row(len, offset=0) {\n    // Row of interlocked shingles\n    for (x = [-len/2+offset : shingle_size : len/2-offset])\n        translate([x, 0, 0])\n            shingle();\n}\n\nmodule rafter() {\n    // Simple rafter profile\n    linear_extrude(height=roof_depth-wall_thickness, center=true)\n        polygon(points=[[0,0], [roof_height, roof_width/4], [roof_height, -roof_width/4]]);\n}\n\nmodule ridge_beam() {\n    // Ridge beam running along top\n    translate([0,0,roof_height])\n        rotate([0,90,0])\n            cylinder(h=roof_width-wall_thickness, d=4, center=true);\n}\n\nmodule gable_wall(h) {\n    // Triangular gable wall with printable thickness\n    difference() {\n        linear_extrude(height=wall_thickness, center=true)\n            polygon(points=[[-roof_width/2,0], [0,h], [roof_width/2,0], [-roof_width/2,0]]);\n        // Cut out middle to save material\n        translate([0,h/3,0])\n            linear_extrude(height=wall_thickness+1, center=true)\n                polygon(points=[[-roof_width/2+5,0], [0,h/3], [roof_width/2-5,0]]);\n    }\n}\n\nmodule roof_surface() {\n    // One sloped roof plane with shingles\n    difference() {\n        // Main roof slab\n        translate([0,0,roof_height/2])\n            rotate([atan(roof_height/(roof_width/2)),0,0])\n                cube([roof_width+2, roof_depth, 2], center=true);\n        \n        // Hollow interior for light weight\n        translate([0,0,roof_height/2-1])\n            rotate([atan(roof_height/(roof_width/2)),0,0])\n                cube([roof_width-4, roof_depth-4, 2], center=true);\n    }\n    \n    // Attach shingles (cut to avoid overhang)\n    for (z = [0 : shingle_size*0.75 : roof_height-2]) {\n        y_offset = (z / roof_height) * (roof_depth/2 - shingle_size);\n        translate([0, y_offset, z])\n            rotate([atan(roof_height/(roof_width/2)),0,0])\n                shingle_row(roof_width-4, (z%2)*shingle_size/2);\n    }\n}\n\n// Assemble the complete roof\nunion() {\n    // Left slope\n    roof_surface();\n    \n    // Right slope (mirror)\n    mirror([1,0,0])\n        roof_surface();\n    \n    // Ridge beam\n    ridge_beam();\n    \n    // Rafters under eaves (decorative)\n    for (y = [-roof_depth/2+rafter_spacing : rafter_spacing : roof_depth/2-rafter_spacing]) {\n        translate([0,y,0])\n            rafter();\n    }\n    \n    // Front gable wall\n    translate([0, roof_depth/2, 0])\n        gable_wall(roof_height);\n    \n    // Rear gable wall\n    translate([0, -roof_depth/2, 0])\n        gable_wall(roof_height);\n}",
    "renders": true
  },
  {
    "household_item": "ceiling",
    "openscad_code": "// Realistic 3D printable ceiling tile\n// 80 mm x 80 mm, 10 mm thick\n// Features recessed panels with light fixture and vent\n\n// Overall dimensions\nceiling_w = 80;\nceiling_h = 80;\nceiling_t = 10;\n\n// Panel recesses\npanel_margin = 10;\npanel_depth = 2;\npanel_w = (ceiling_w - 3*panel_margin)/2;\npanel_h = (ceiling_h - 3*panel_margin)/2;\n\n// Light fixture\nlight_d = 20;\nlight_h = 5;\nlight_recess = 3;\n\n// Vent\nvent_w = 30;\nvent_h = 10;\nvent_t = 2;\nvent_slots = 5;\nslot_w = vent_w/vent_slots - 1;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule ceiling_tile() {\n    // Main ceiling body\n    difference() {\n        cube([ceiling_w, ceiling_h, ceiling_t], center=true);\n        \n        // Recessed panels\n        for (i = [0,1]) {\n            for (j = [0,1]) {\n                translate([\n                    -ceiling_w/2 + panel_margin + panel_w/2 + i*(panel_w + panel_margin),\n                    -ceiling_h/2 + panel_margin + panel_h/2 + j*(panel_h + panel_margin),\n                    -panel_depth\n                ]) {\n                    cube([panel_w, panel_h, panel_depth + 0.1], center=true);\n                }\n            }\n        }\n        \n        // Light fixture recess\n        translate([0, 0, light_recess]) {\n            cylinder(h=light_h + 0.1, d=light_d, center=true);\n        }\n        \n        // Vent opening\n        translate([0, ceiling_h/2 - vent_h/2 - panel_margin, vent_t]) {\n            cube([vent_w, vent_h, vent_t + 0.1], center=true);\n        }\n    }\n    \n    // Light fixture detail\n    difference() {\n        translate([0, 0, ceiling_t/2 - light_h/2]) {\n            cylinder(h=light_h, d=light_d, center=true);\n        }\n        translate([0, 0, ceiling_t/2 - light_h/2 + 1]) {\n            cylinder(h=light_h, d=light_d - wall*2, center=true);\n        }\n    }\n    \n    // Vent cover with slots\n    translate([0, ceiling_h/2 - vent_h/2 - panel_margin, ceiling_t/2 - vent_t/2]) {\n        difference() {\n            cube([vent_w, vent_h, vent_t], center=true);\n            // Vent slots\n            for (i = [0:vent_slots-1]) {\n                translate([\n                    -vent_w/2 + slot_w/2 + i*(slot_w + 1),\n                    0,\n                    -0.1\n                ]) {\n                    cube([slot_w, vent_h - 2, vent_t + 0.2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Mounting holes (4 corners)\n    hole_d = 3;\n    for (i = [-1,1]) {\n        for (j = [-1,1]) {\n            translate([\n                i*(ceiling_w/2 - 10),\n                j*(ceiling_h/2 - 10),\n                0\n            ]) {\n                rotate([90,0,0]) {\n                    cylinder(h=ceiling_t + 0.1, d=hole_d, center=true);\n                }\n            }\n        }\n    }\n}\n\nceiling_tile();",
    "renders": true
  },
  {
    "household_item": "wall",
    "openscad_code": "// Realistic castle wall segment for 3D printing\n// Dimensions: 80mm long x 20mm deep x 60mm high\n// Wall thickness: 3mm for 3D printing\n\n$fn = 32;\n\n// Main module to generate the wall\nmodule castle_wall() {\n    // Base foundation\n    translate([0, 0, 0]) {\n        cube([80, 20, 5], center = true);\n    }\n    \n    // Main wall body\n    difference() {\n        // Outer wall block\n        translate([0, 0, 32.5]) {\n            cube([80, 20, 55], center = true);\n        }\n        \n        // Inner cavity for hollow wall\n        translate([0, 0, 32.5]) {\n            cube([74, 14, 55], center = true);\n        }\n    }\n    \n    // Battlement crenellations along top\n    for (x = [-35:10:35]) {\n        translate([x, 0, 60]) {\n            cube([8, 20, 5], center = true);\n        }\n    }\n    \n    // Arrow slits\n    for (x = [-25:25:25]) {\n        translate([x, 0, 35]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 20, d1 = 3, d2 = 2, center = true);\n            }\n        }\n    }\n    \n    // Buttresses for structural support\n    for (x = [-30:30:60]) {\n        translate([x, 0, 15]) {\n            difference() {\n                cube([6, 24, 30], center = true);\n                translate([0, 2, 0]) {\n                    cube([4, 20, 30], center = true);\n                }\n            }\n        }\n    }\n    \n    // Stone texture using small cubes\n    for (i = [0:15]) {\n        x = -40 + i * 5;\n        for (j = [0:7]) {\n            y = -10 + j * 2.5;\n            if ((i + j) % 2 == 0) {\n                translate([x, y, 27.5]) {\n                    cube([4.8, 2.3, 1], center = true);\n                }\n            }\n        }\n    }\n    \n    // Drainage holes at bottom\n    for (x = [-30:15:30]) {\n        translate([x, 10, 2.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 20, d = 2, center = true);\n            }\n        }\n    }\n    \n    // Flag pole mounting hole\n    translate([0, 0, 62.5]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 10, d = 3, center = true);\n        }\n    }\n}\n\n// Render the wall\ncastle_wall();",
    "renders": true
  },
  {
    "household_item": "floor",
    "openscad_code": "// Realistic Medium-Complexity Floor Tile\n// Dimensions: 80 mm x 80 mm x 4 mm\n// Features: Wood plank texture, grout lines, slight surface undulation\n\n$fn = 32; // Smooth curves\n\n// Overall dimensions\nfloor_size = 80;\nthickness = 4;\nplank_width = 8;\nplank_length = 40;\ngrout_width = 1;\n\n// Wood plank module with texture\nmodule wood_plank(x_pos, y_pos, length, width, angle) {\n    translate([x_pos, y_pos, 0])\n    rotate([0, 0, angle])\n    difference() {\n        // Main plank body\n        translate([0, 0, thickness/2])\n        cube([length, width, thickness], center=true);\n        \n        // Subtle surface undulation (for realism)\n        for (i = [0:5:length-2]) {\n            translate([i - length/2, 0, thickness/2 - 0.1])\n            rotate([90, 0, 0])\n            cylinder(h=width, r=0.2, center=true);\n        }\n        \n        // Wood grain grooves\n        for (g = [1:2:width-2]) {\n            translate([0, g - width/2, thickness/2 - 0.3])\n            cube([length, 0.3, 0.3], center=true);\n        }\n    }\n}\n\n// Grout line module\nmodule grout_line(x1, y1, x2, y2) {\n    translate([(x1+x2)/2, (y1+y2)/2, thickness/2 - 0.5])\n    rotate([0, 0, atan2(y2-y1, x2-x1)])\n    cube([sqrt(pow(x2-x1,2)+pow(y2-y1,2)), grout_width, 0.5], center=true);\n}\n\n// Main floor assembly\ndifference() {\n    // Base floor slab\n    cube([floor_size, floor_size, thickness], center=true);\n    \n    // Chamfer bottom edges for printability\n    translate([0, 0, -thickness/2 + 0.5])\n    cube([floor_size - 1, floor_size - 1, 1], center=true);\n}\n\n// Generate wood planks in alternating pattern\nfor (row = [0:9]) {\n    for (col = [0:1]) {\n        offset = (row % 2) * plank_length/2;\n        wood_plank(\n            -floor_size/2 + 5 + offset + col * plank_length,\n            -floor_size/2 + 5 + row * (plank_width + grout_width),\n            plank_length - grout_width,\n            plank_width,\n            0\n        );\n    }\n}\n\n// Add grout lines horizontally\nfor (i = [0:10]) {\n    grout_line(\n        -floor_size/2 + 2,\n        -floor_size/2 + 2 + i * (plank_width + grout_width) - grout_width/2,\n        floor_size/2 - 2,\n        -floor_size/2 + 2 + i * (plank_width + grout_width) - grout_width/2\n    );\n}\n\n// Add grout lines vertically\nfor (j = [0:2]) {\n    for (i = [0:5]) {\n        grout_line(\n            -floor_size/2 + 2 + i * plank_length + (j % 2) * plank_length/2 - grout_width/2,\n            -floor_size/2 + 2,\n            -floor_size/2 + 2 + i * plank_length + (j % 2) * plank_length/2 - grout_width/2,\n            floor_size/2 - 2\n        );\n    }\n}\n\n// Add subtle surface finish with random small depressions\nmodule surface_detail() {\n    for (i = [0:20]) {\n        x = -floor_size/2 + 5 + (i * 3.7) % (floor_size - 10);\n        y = -floor_size/2 + 5 + (i * 2.3) % (floor_size - 10);\n        translate([x, y, thickness - 0.2])\n        sphere(r=0.3);\n    }\n}\n\n// Apply surface details\ndifference() {\n    children();\n    surface_detail();\n}",
    "renders": true
  },
  {
    "household_item": "tile",
    "openscad_code": "// Realistic subway-style tile with inset grout lines and beveled edges\n// Dimensions suitable for 3D printing: 75 x 75 x 8 mm\n\nmodule tile_base() {\n    // Main tile body with slight taper for easier printing\n    difference() {\n        cube([75, 75, 8], center = true);\n        translate([0, 0, 3.9])\n            cube([72, 72, 8.2], center = true);\n    }\n}\n\nmodule beveled_edges() {\n    // Create beveled edges on top surface\n    translate([0, 0, 4])\n    difference() {\n        cube([75, 75, 0.1], center = true);\n        for (x = [-36.5, 36.5]) {\n            for (y = [-36.5, 36.5]) {\n                translate([x, y, 0])\n                    cylinder(h = 0.2, r = 2, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule grout_lines() {\n    // Horizontal and vertical grout lines\n    grout_width = 2;\n    grout_depth = 0.5;\n    \n    // Horizontal lines\n    for (y = [-25, 0, 25]) {\n        translate([0, y, 3.5])\n            cube([71, grout_width, grout_depth], center = true);\n    }\n    \n    // Vertical lines\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, 3.5])\n            cube([grout_width, 71, grout_depth], center = true);\n    }\n}\n\nmodule surface_texture() {\n    // Subtle texture for realistic surface\n    for (i = [-30:5:30]) {\n        for (j = [-30:5:30]) {\n            translate([i, j, 3.8]) {\n                difference() {\n                    cylinder(h = 0.2, r = 1.5, $fn = 8);\n                    cylinder(h = 0.3, r = 1.2, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\nmodule corner_chamfers() {\n    // Add chamfers to bottom edges for printability\n    for (x = [-37.5, 37.5]) {\n        for (y = [-37.5, 37.5]) {\n            translate([x, y, -4])\n                rotate([0, 0, (x < 0 && y < 0) ? 0 : \n                               (x > 0 && y < 0) ? 90 :\n                               (x < 0 && y > 0) ? -90 : 180])\n                    linear_extrude(height = 2)\n                        polygon(points = [[0,0], [2,0], [0,2]]);\n        }\n    }\n}\n\n// Assemble the complete tile\nunion() {\n    tile_base();\n    beveled_edges();\n    grout_lines();\n    surface_texture();\n    corner_chamfers();\n}",
    "renders": true
  },
  {
    "household_item": "slate",
    "openscad_code": "// Slate with wooden frame and chalk holder\n// Overall dimensions: 80 x 60 x 8 mm\n\n// Parameters\nslate_w = 80;\nslate_h = 60;\nslate_t = 8;\nframe_w = 4;\nchalk_d = 8;\nchalk_holder_r = 5;\n\n// Main module\nmodule slate() {\n    // Wooden frame\n    difference() {\n        // Outer frame\n        cube([slate_w, slate_h, slate_t]);\n        \n        // Inner cavity for slate surface\n        translate([frame_w, frame_w, -0.1])\n            cube([slate_w - 2*frame_w, slate_h - 2*frame_w, slate_t + 0.2]);\n    }\n    \n    // Slate writing surface\n    translate([frame_w, frame_w, slate_t - 1])\n        cube([slate_w - 2*frame_w, slate_h - 2*frame_w, 1]);\n    \n    // Frame edge details - rounded corners\n    for (i = [0:1]) {\n        for (j = [0:1]) {\n            x = i * (slate_w - frame_w);\n            y = j * (slate_h - frame_w);\n            translate([x, y, frame_w/2])\n                rotate([0, 0, 90 + 180*i])\n                difference() {\n                    cylinder(h = frame_w, r = frame_w, $fn = 16);\n                    translate([0, 0, -0.1])\n                        cube([frame_w, frame_w, frame_w + 0.2]);\n                }\n        }\n    }\n    \n    // Chalk holder on top edge\n    chalk_holder();\n    \n    // Wood grain texture on frame\n    grain_texture();\n}\n\nmodule chalk_holder() {\n    // Holder base\n    translate([slate_w/2, -chalk_holder_r - 1, slate_t/2])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r1 = chalk_holder_r + 2, r2 = chalk_holder_r + 2, $fn = 32);\n    \n    // Holder hole\n    translate([slate_w/2, -chalk_holder_r - 1, slate_t/2 + 1])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = chalk_d/2 + 0.5, $fn = 32);\n    \n    // Chalk piece\n    translate([slate_w/2, -chalk_holder_r - 1, slate_t/2 + 3])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r = chalk_d/2, $fn = 16);\n}\n\nmodule grain_texture() {\n    // Simple wood grain lines on frame sides\n    for (i = [0:3]) {\n        // Top grain\n        translate([10 + i*20, frame_w/2, slate_t - 0.5])\n            cube([15, 0.5, 1]);\n        \n        // Bottom grain\n        translate([10 + i*20, slate_h - frame_w/2, slate_t - 0.5])\n            cube([15, 0.5, 1]);\n        \n        // Left grain\n        translate([frame_w/2, 10 + i*15, slate_t - 0.5])\n            cube([0.5, 15, 1]);\n        \n        // Right grain\n        translate([slate_w - frame_w/2, 10 + i*15, slate_t - 0.5])\n            cube([0.5, 15, 1]);\n    }\n}\n\n// Render the slate\nslate();",
    "renders": true
  },
  {
    "household_item": "brick",
    "openscad_code": "// Realistic 3D-printable brick (medium complexity)\n// Overall size: 95 mm long, 45 mm wide, 30 mm high\n\n$fa = 2;\n$fs = 0.5;\n\nmodule brick_body() {\n    // Main brick block (slightly chamfered edges)\n    difference() {\n        // Outer block with slight chamfers\n        cube([95, 45, 30], center = true);\n        // Remove inner edges to create chamfers\n        for (dx = [-1, 1], dy = [-1, 1], dz = [-1, 1]) {\n            translate([dx * 45, dy * 20, dz * 14])\n                rotate([45 * dx, 45 * dy, 45 * dz])\n                    cube([4, 4, 4], center = true);\n        }\n    }\n}\n\nmodule studs(count = 6) {\n    // Generate top studs in two rows\n    for (row = [0, 1]) {\n        translate([0, 0, 15]) {\n            for (i = [0:count-1]) {\n                translate([i * 16 - 40, row * 24 - 12, 0])\n                    stud();\n            }\n        }\n    }\n}\n\nmodule stud() {\n    // Single LEGO-style stud with hollow core\n    difference() {\n        // Outer cylinder\n        cylinder(h = 1.6, r = 4.8, $fn = 32);\n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h = 1.8, r = 2.5, $fn = 32);\n    }\n    // Top rounded edge\n    translate([0, 0, 1.6]) {\n        scale([1, 1, 0.4])\n            sphere(r = 4.8, $fn = 32);\n    }\n}\n\nmodule bottom_tubes() {\n    // Bottom tubes for clutch power\n    translate([0, 0, -15]) {\n        // Three tubes along length\n        for (i = [-1, 0, 1]) {\n            translate([i * 24, 0, 0])\n                tube();\n        }\n        // Two tubes along width\n        for (j = [-1, 1]) {\n            translate([0, j * 12, 0])\n                tube();\n        }\n    }\n}\n\nmodule tube() {\n    // Hollow tube with rounded bottom\n    difference() {\n        // Outer tube\n        cylinder(h = 6.5, r = 6.4, $fn = 32);\n        // Inner hollow\n        translate([0, 0, -0.1])\n            cylinder(h = 6.7, r = 5, $fn = 32);\n    }\n    // Rounded bottom\n    translate([0, 0, 6.5])\n        sphere(r = 6.4, $fn = 32);\n}\n\nmodule logo() {\n    // LEGO logo on studs\n    translate([0, 0, 16.8]) {\n        for (row = [0, 1]) {\n            for (i = [0:5]) {\n                translate([i * 16 - 40, row * 24 - 12, 0])\n                    linear_extrude(height = 0.2)\n                        text(\"LEGO\", size = 2.5, halign = \"center\", valign = \"center\");\n            }\n        }\n    }\n}\n\n// Build the complete brick\nunion() {\n    brick_body();\n    studs();\n    bottom_tubes();\n    // Uncomment for logo (may affect print quality)\n    // logo();\n}",
    "renders": true
  },
  {
    "household_item": "stone",
    "openscad_code": "// Realistic stone for 3D printing\n// Overall size ~70 mm\n\n// Parameters for randomness\nseed = 42;\nroughness = 0.3;\ndetail = 12;\n\n// Main stone body\nmodule stone_body() {\n    // Base ellipsoid with irregularities\n    difference() {\n        scale([1.1, 0.9, 0.8])\n        sphere(d = 60, $fn = detail * 2);\n        \n        // Carve out some dents\n        for (i = [1 : 8]) {\n            rotate([rands(-roughness*30, roughness*30, 1, seed + i)[0], \n                     rands(-roughness*30, roughness*30, 1, seed + i + 10)[0], \n                     i * 45])\n            translate([rands(-5, 5, 1, seed + i + 20)[0],\n                       rands(-5, 5, 1, seed + i + 30)[0],\n                       rands(-5, 5, 1, seed + i + 40)[0]])\n            sphere(d = 12 + rands(0, 8, 1, seed + i + 50)[0], $fn = detail);\n        }\n    }\n}\n\n// Surface bumps and small features\nmodule surface_features() {\n    union() {\n        for (j = [1 : 15]) {\n            rotate([rands(-roughness*20, roughness*20, 1, seed + j + 60)[0],\n                    rands(-roughness*20, roughness*20, 1, seed + j + 70)[0],\n                    j * 24])\n            translate([rands(-20, 20, 1, seed + j + 80)[0],\n                       rands(-20, 20, 1, seed + j + 90)[0],\n                       rands(-20, 20, 1, seed + j + 100)[0]])\n            scale([1, 1, 0.7])\n            sphere(d = 8 + rands(0, 6, 1, seed + j + 110)[0], $fn = detail);\n        }\n    }\n}\n\n// Flat base for stable printing\nmodule flat_base() {\n    difference() {\n        union() {\n            stone_body();\n            surface_features();\n        }\n        \n        // Cut flat bottom\n        translate([0, 0, -35])\n        cube([100, 100, 70], center = true);\n    }\n}\n\n// Optional small cavity inside to save material\nmodule hollow_core() {\n    difference() {\n        flat_base();\n        \n        // Inner hollow\n        translate([0, 0, -5])\n        scale([0.6, 0.6, 0.6])\n        sphere(d = 50, $fn = detail * 2);\n    }\n}\n\n// Create the stone\nhollow_core();",
    "renders": true
  },
  {
    "household_item": "plaster",
    "openscad_code": "// Realistic plaster (band-aid) for 3D printing, ~70 mm long\n// Medium complexity – includes weave texture, rounded edges, and pad\n\n// Overall dimensions\nband_len = 70;          // total length\nband_wid = 25;          // total width\nband_thk = 1.6;         // overall thickness\nwall = 0.8;             // printable wall thickness\npad_len = 35;\npad_wid = 15;\npad_thk = 0.8;\n\n// Helper module for rounded box (used twice)\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for (x = [-l/2+r, l/2-r], y = [-w/2+r, w/2-r])\n            translate([x, y, 0])\n                cylinder(r=r, h=h, $fn=20);\n    }\n    translate([0, 0, h/2])\n        cube([l-2*r, w, h], center=true);\n    translate([0, 0, h/2])\n        cube([l, w-2*r, h], center=true);\n}\n\n// Woven fabric texture on top surface\nmodule weave() {\n    spacing = 1.6;\n    strands = floor(band_len / spacing);\n    difference() {\n        cube([band_len, band_wid, band_thk], center=true);\n        // subtract tiny trenches for weave\n        for (i = [1:strands-1]) {\n            translate([-band_len/2 + i*spacing, 0, band_thk/2 - 0.1])\n                cube([0.4, band_wid, 0.2], center=true);\n        }\n        for (j = [1:strands-1]) {\n            translate([0, -band_wid/2 + j*spacing, band_thk/2 - 0.1])\n                cube([band_len, 0.4, 0.2], center=true);\n        }\n    }\n}\n\n// Main plaster module\nmodule plaster() {\n    difference() {\n        // base band with rounded edges\n        rounded_box(band_len, band_wid, band_thk, 3);\n        // hollow inside to save material\n        translate([0, 0, -0.2])\n            rounded_box(band_len - 2*wall, band_wid - 2*wall, band_thk, 2);\n    }\n\n    // absorbent pad in center\n    translate([0, 0, band_thk - pad_thk/2])\n        difference() {\n            rounded_box(pad_len, pad_wid, pad_thk, 2);\n            // pad surface texture\n            translate([0, 0, pad_thk/2 - 0.1])\n                for (dx = [-pad_len/2+2 : 3 : pad_len/2-2])\n                    for (dy = [-pad_wid/2+2 : 3 : pad_wid/2-2])\n                        translate([dx, dy, 0])\n                            cylinder(r=0.6, h=0.2, $fn=8);\n        }\n\n    // adhesive underside – thin skirt\n    difference() {\n        translate([0, 0, -band_thk/2 + 0.1])\n            rounded_box(band_len - 2, band_wid - 2, 0.2, 2);\n        // cut out pad area so pad sits higher\n        translate([0, 0, -0.1])\n            cube([pad_len + 2, pad_wid + 2, 0.4], center=true);\n    }\n\n    // top weave\n    translate([0, 0, band_thk/2])\n        weave();\n}\n\n// Render\nplaster();",
    "renders": true
  },
  {
    "household_item": "stucco",
    "openscad_code": "// Realistic-style stucco (decorative wall-mounted molding) – medium complexity\n// Overall bounding box ≈ 80 mm (length) × 20 mm (height) × 15 mm (depth)\n\nmodule stucco_base() {\n    // Main body – a gently curved slab\n    difference() {\n        hull() {\n            translate([-40, 0, 0])  cube([80, 20, 12]);\n            translate([-38, 2, 12]) cube([76, 16, 3]);   // raised center\n        }\n        // Hollow out back for printability\n        translate([0, 0, -0.1]) cube([82, 22, 10.2], center=true);\n    }\n}\n\nmodule egg_and_dart() {\n    // Classical repeating egg-and-dart pattern along upper edge\n    for(i=[-36:8:36]) {\n        translate([i, 18, 12]) {\n            // \"Egg\"\n            scale([1, 0.6, 1]) sphere(d=7, $fn=32);\n            // \"Dart\" (leaf tip)\n            translate([-2, 5, 0])\n                rotate([0, 0, 45])\n                scale([1, 2, 1])\n                cylinder(h=5, d1=3, d2=0, $fn=3);\n        }\n    }\n}\n\nmodule rosettes() {\n    // Small rosette bosses every 20 mm\n    for(i=[-30:20:30]) {\n        translate([i, 10, 2])\n        difference() {\n            cylinder(h=4, d=10, $fn=32);\n            cylinder(h=5, d=6, $fn=32);  // center recess\n        }\n    }\n}\n\nmodule key_pattern() {\n    // Greek-key frieze on lower rim\n    for(i=[-36:12:36]) {\n        translate([i, 4, 0]) {\n            // horizontal bar\n            cube([12, 2, 2]);\n            // vertical bar\n            translate([6-1, -2, 0]) cube([2, 4, 2]);\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Two 4 mm holes for screws\n    translate([-25, 10, -1]) rotate([90, 0, 0]) cylinder(h=20, d=4);\n    translate([ 25, 10, -1]) rotate([90, 0, 0]) cylinder(h=20, d=4);\n}\n\n// Build the stucco\nunion() {\n    stucco_base();\n    egg_and_dart();\n    rosettes();\n    key_pattern();\n}\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "household_item": "paint",
    "openscad_code": "// Paint tube model - realistic style with medium complexity\n// Overall dimensions: ~80mm height, 30mm diameter\n\n$fn = 36;\n\n// Main parameters\ntube_diameter = 30;\ntube_height = 65;\nnozzle_diameter = 8;\nnozzle_length = 15;\ncap_height = 20;\ncap_diameter = 12;\nwall_thickness = 1.5;\nthread_pitch = 2;\n\nmodule tube_body() {\n    // Crumpled tube body with realistic deformation\n    difference() {\n        // Main tube shape - slightly flattened\n        scale([1, 0.85, 1])\n        cylinder(d=tube_diameter, h=tube_height);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        scale([1, 0.85, 1])\n        cylinder(d=tube_diameter - 2*wall_thickness, h=tube_height);\n        \n        // Bottom crimp effect\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([tube_diameter/2 - 2, -tube_diameter/4, tube_height - 8])\n            cube([tube_diameter/2, tube_diameter/2, 8]);\n        }\n    }\n    \n    // Crimp lines on bottom\n    for(i = [0:6]) {\n        translate([0, 0, tube_height - 8 + i*1.2])\n        scale([1, 0.85, 1])\n        rotate([0, 0, 45])\n        cylinder(d=tube_diameter + 0.5, h=0.3);\n    }\n}\n\nmodule nozzle() {\n    // Threaded nozzle section\n    difference() {\n        // Main nozzle\n        cylinder(d1=tube_diameter/2, d2=nozzle_diameter, h=nozzle_length);\n        \n        // Hollow through\n        cylinder(d1=tube_diameter/2 - wall_thickness, \n                 d2=nozzle_diameter - wall_thickness, \n                 h=nozzle_length + 0.1);\n                 \n        // External threads\n        for(i = [0:7]) {\n            translate([0, 0, i * thread_pitch])\n            cylinder(d=nozzle_diameter + 1, h=thread_pitch/2);\n        }\n    }\n}\n\nmodule cap() {\n    // Screw-on cap with internal threads\n    difference() {\n        // Cap body\n        cylinder(d=cap_diameter + 2, h=cap_height);\n        \n        // Internal cavity\n        translate([0, 0, 2])\n        cylinder(d=cap_diameter, h=cap_height);\n        \n        // Internal threads\n        for(i = [0:7]) {\n            translate([0, 0, 2 + i * thread_pitch])\n            cylinder(d=cap_diameter - 1, h=thread_pitch/2);\n        }\n        \n        // Top lip\n        translate([0, 0, cap_height - 1])\n        cylinder(d=cap_diameter + 3, h=2);\n    }\n    \n    // Hanging loop\n    translate([cap_diameter/2 + 1, 0, cap_height - 3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(d=4, h=8);\n        cylinder(d=2, h=8.5);\n    }\n}\n\nmodule paint_label() {\n    // Raised label area\n    translate([0, -(tube_diameter*0.85)/2 - 0.5, tube_height/2])\n    cube([tube_diameter*0.8, 1, tube_height*0.6], center=true);\n    \n    // Color indicator stripe\n    translate([0, -(tube_diameter*0.85)/2 - 0.5, tube_height - 20])\n    color(\"red\")\n    cube([tube_diameter*0.6, 1.2, 8], center=true);\n}\n\n// Assemble the paint tube\nunion() {\n    tube_body();\n    \n    translate([0, 0, tube_height])\n    nozzle();\n    \n    // Position cap slightly offset to show it's removable\n    translate([0, -(cap_diameter + 5), tube_height + nozzle_length - cap_height + 3])\n    cap();\n    \n    paint_label();\n}",
    "renders": true
  },
  {
    "household_item": "varnish",
    "openscad_code": "// Realistic varnish bottle with cap and brush\n// Total height: 85mm, suitable for 3D printing\n\nmodule bottle_body() {\n    // Main bottle body - slightly tapered cylinder\n    difference() {\n        cylinder(h = 55, r1 = 18, r2 = 16, $fn = 32);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 53, r1 = 15.5, r2 = 13.5, $fn = 32);\n        \n        // Fillets at bottom inside\n        translate([0, 0, 0.5])\n            cylinder(h = 2, r1 = 15.5, r2 = 15.5, $fn = 32);\n    }\n    \n    // Bottom base ring\n    translate([0, 0, -1])\n        cylinder(h = 2, r = 19, $fn = 32);\n}\n\nmodule bottle_neck() {\n    // Neck with threads\n    difference() {\n        cylinder(h = 12, r = 10, $fn = 32);\n        \n        // Hollow neck\n        translate([0, 0, 0])\n            cylinder(h = 12, r = 8, $fn = 32);\n    }\n    \n    // Thread ridges (4 turns)\n    for(i = [0:3]) {\n        translate([0, 0, i * 2.5 + 1])\n            rotate_extrude($fn = 32)\n                translate([9.5, 0, 0])\n                    square([0.5, 1.5]);\n    }\n}\n\nmodule cap() {\n    // Main cap body\n    difference() {\n        cylinder(h = 18, r = 12, $fn = 32);\n        \n        // Hollow for threads\n        translate([0, 0, 2])\n            cylinder(h = 16, r = 10.5, $fn = 32);\n        \n        // Thread grooves (4 turns)\n        for(i = [0:3]) {\n            translate([0, 0, i * 2.5 + 3])\n                rotate_extrude($fn = 32)\n                    translate([10.5, 0, 0])\n                        square([0.5, 1.5]);\n        }\n    }\n    \n    // Top grip ridges\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([11.5, 0, 15])\n                cube([1, 2, 3], center = true);\n        }\n    }\n}\n\nmodule brush_assembly() {\n    // Handle attached to cap\n    translate([0, 0, -8]) {\n        cylinder(h = 35, r = 2.5, $fn = 16);\n        \n        // Tapered brush tip\n        translate([0, 0, 35])\n            cylinder(h = 5, r1 = 2.5, r2 = 0.5, $fn = 16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bottle assembly\n    union() {\n        bottle_body();\n        translate([0, 0, 55])\n            bottle_neck();\n    }\n    \n    // Cap assembly\n    translate([0, 0, 67])\n        union() {\n            cap();\n            brush_assembly();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "lacquer",
    "openscad_code": "// OpenSCAD code for a realistic-style lacquer (traditional Japanese urushi container)\n// Overall dimensions: 80 mm tall, 55 mm diameter (fits most FDM printers)\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main body\nmodule lacquer_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main bowl shape\n            cylinder(h = 60, d1 = 55, d2 = 52, center = false);\n            \n            // Base ring\n            translate([0, 0, -5])\n                cylinder(h = 10, d = 45, center = false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 5])\n            cylinder(h = 55, d1 = 45, d2 = 42, center = false);\n    }\n}\n\n// Lid\nmodule lacquer_lid() {\n    difference() {\n        // Lid top\n        union() {\n            // Main lid dome\n            translate([0, 0, 60])\n                cylinder(h = 12, d1 = 54, d2 = 56, center = false);\n            \n            // Lid rim\n            translate([0, 0, 58])\n                cylinder(h = 5, d = 57, center = false);\n        }\n        \n        // Interior cavity\n        translate([0, 0, 60])\n            cylinder(h = 10, d = 50, center = false);\n    }\n    \n    // Handle (mushroom-shaped)\n    translate([0, 0, 74])\n        union() {\n            cylinder(h = 8, d = 12, center = false);\n            translate([0, 0, 8])\n                sphere(d = 18);\n        }\n}\n\n// Decorative band around the middle\nmodule decorative_band() {\n    color(\"gold\")\n    for (i = [30:3:55]) {\n        rotate([0, 0, i * 10])\n            translate([26.5, 0, 32])\n                cube([1.5, 1, 2]);\n    }\n}\n\n// Base support ring\nmodule base_support() {\n    difference() {\n        cylinder(h = 3, d = 48, center = false);\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 40, center = false);\n    }\n}\n\n// Assembly\nlacquer_body();\ntranslate([0, 0, 3]) base_support();\ntranslate([0, 0, 0]) decorative_band();\nlacquer_lid();",
    "renders": true
  },
  {
    "household_item": "stain",
    "openscad_code": "// Realistic Coffee Stain with Medium Complexity\n// Size: 80mm diameter, 3mm thick\n\n// Overall dimensions\n$fn = 32;\nstain_diameter = 80;\nstain_thickness = 3;\nwall_thickness = 1.2;\n\n// Main stain base\nmodule stain_base() {\n    difference() {\n        // Outer ring with slight irregularity\n        union() {\n            cylinder(h = stain_thickness, r = stain_diameter/2, center = true);\n            \n            // Add irregular bumps around edge\n            for(i = [0:15:359]) {\n                translate([sin(i) * (stain_diameter/2 + 1.5), \n                          cos(i) * (stain_diameter/2 + 1.5), 0])\n                    scale([1 + sin(i*3)*0.3, 1 + cos(i*3)*0.3, 1])\n                        cylinder(h = stain_thickness, r = 2.5, center = true);\n            }\n        }\n        \n        // Hollow center\n        cylinder(h = stain_thickness + 1, r = stain_diameter/2 - wall_thickness, center = true);\n    }\n}\n\n// Coffee ring stain pattern\nmodule coffee_ring() {\n    difference() {\n        // Main ring\n        cylinder(h = stain_thickness/2, r = stain_diameter/2 - 5, center = true);\n        \n        // Inner clean area\n        cylinder(h = stain_thickness/2 + 0.5, r = stain_diameter/4, center = true);\n    }\n}\n\n// Splatter details\nmodule splatter() {\n    // Random small splatters\n    for(i = [0:20:359]) {\n        angle = i + (sin(i*5)*10);\n        distance = stain_diameter/2 + 3 + sin(i*7)*5;\n        \n        translate([sin(angle) * distance, cos(angle) * distance, stain_thickness/2 - 0.5])\n            rotate([90, 0, i])\n                scale([1 + sin(i*3)*0.5, 1 + cos(i*3)*0.5, 1])\n                    cylinder(h = 0.5, r1 = 1.5, r2 = 0.5, center = true);\n    }\n}\n\n// Surface texture for realistic look\nmodule surface_texture() {\n    for(x = [-35:5:35]) {\n        for(y = [-35:5:35]) {\n            if(sqrt(x*x + y*y) < stain_diameter/2 - 5) {\n                translate([x + sin(x*y)*2, y + cos(x*y)*2, stain_thickness/2 + 0.1])\n                    sphere(r = 0.3 + sin(x*3)*0.1);\n            }\n        }\n    }\n}\n\n// Combine all elements\nunion() {\n    // Main stain body\n    stain_base();\n    \n    // Coffee ring\n    translate([0, 0, stain_thickness/4])\n        coffee_ring();\n    \n    // Splatter effects\n    splatter();\n    \n    // Surface details\n    surface_texture();\n}\n\n// Add subtle bottom nubs for 3D printing stability\ndifference() {\n    translate([0, 0, -stain_thickness/2 - 0.5])\n        cube([stain_diameter, stain_diameter, 0.5], center = true);\n    \n    translate([0, 0, -stain_thickness/2 - 0.5])\n        cube([stain_diameter - 4, stain_diameter - 4, 1], center = true);\n}",
    "renders": true
  },
  {
    "household_item": "wax",
    "openscad_code": "// Realistic 3D-Printable Wax Seal Stamp\n// Medium complexity (~110 lines)\n\n// Adjustable parameters\nstamp_d = 30;          // stamp-head diameter (mm)\nstamp_h = 10;          // stamp-head height\nhandle_d = 12;         // handle diameter\nhandle_l = 60;         // handle length\nwall_t = 2;            // wall thickness for printability\nletter = \"W\";          // single capital letter to emboss\n\n// Main assembly\nmodule wax_stamp() {\n    union() {\n        stamp_head();\n        handle();\n    }\n}\n\n// Stamp head with raised letter and relief ring\nmodule stamp_head() {\n    difference() {\n        // Solid head cylinder\n        cylinder(d = stamp_d, h = stamp_h, $fn = 64);\n\n        // Embossed letter cavity\n        translate([0, 0, -0.1])\n            linear_extrude(height = 1.5)\n                text(letter, size = stamp_d * 0.5, halign = \"center\", valign = \"center\");\n\n        // Relief ring groove for realism\n        translate([0, 0, stamp_h - 2])\n            cylinder(d1 = stamp_d - 4, d2 = stamp_d - 4, h = 2, $fn = 64);\n    }\n\n    // Decorative concentric rings on top\n    for (i = [1 : 3]) {\n        color(\"gold\")\n        translate([0, 0, stamp_h])\n            cylinder(d = stamp_d - i * 6, h = 0.5, $fn = 64);\n    }\n}\n\n// Ergonomic handle with grip rings\nmodule handle() {\n    union() {\n        // Main handle shaft\n        translate([0, 0, stamp_h])\n            cylinder(d = handle_d, h = handle_l, $fn = 32);\n\n        // Grip rings for better handling\n        for (i = [1 : 5]) {\n            translate([0, 0, stamp_h + i * 10])\n                cylinder(d1 = handle_d + 2, d2 = handle_d + 2, h = 2, $fn = 32);\n        }\n\n        // Tapered end\n        translate([0, 0, stamp_h + handle_l])\n            cylinder(d1 = handle_d, d2 = 0, h = 5, $fn = 32);\n    }\n}\n\n// Optional support base for printing stability\nmodule support_base() {\n    difference() {\n        // Wide base\n        cylinder(d = stamp_d + 10, h = 2, $fn = 64);\n        \n        // Cutout to fit stamp head\n        translate([0, 0, -0.1])\n            cylinder(d = stamp_d + 0.2, h = 2.2, $fn = 64);\n    }\n}\n\n// Generate the model\nwax_stamp();\n\n// Uncomment to add support base for printing\n// translate([0, 0, -2]) support_base();",
    "renders": true
  },
  {
    "household_item": "polish",
    "openscad_code": "// Realistic Nail Polish Bottle - Medium Complexity\n// Overall height ~85 mm, suitable for 3D printing\n\n$fn = 40;\n\n// Main module\nmodule nail_polish() {\n    // Bottle body\n    difference() {\n        // Main bottle shape\n        union() {\n            // Cylindrical body\n            cylinder(h = 55, r = 18, center = false);\n            \n            // Rounded shoulder\n            translate([0, 0, 55])\n                cylinder(h = 8, r1 = 18, r2 = 15, center = false);\n            \n            // Neck\n            translate([0, 0, 63])\n                cylinder(h = 12, r = 8, center = false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 74, r = 15, center = false);\n            \n        // Inner shoulder taper\n        translate([0, 0, 54])\n            cylinder(h = 9, r1 = 15, r2 = 5, center = false);\n    }\n    \n    // Cap assembly\n    translate([0, 0, 75]) {\n        // Main cap body\n        difference() {\n            // Outer cap\n            cylinder(h = 20, r = 9.5, center = false);\n            \n            // Inner cavity for brush\n            translate([0, 0, 2])\n                cylinder(h = 18, r = 8.2, center = false);\n        }\n        \n        // Decorative ridges on cap\n        for (i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([9.2, 0, 0])\n                    cube([0.5, 1.2, 20], center = true);\n        }\n        \n        // Top dome\n        translate([0, 0, 20])\n            sphere(r = 9.5);\n    }\n    \n    // Brush handle (part of cap)\n    translate([0, 0, 75]) {\n        // Brush stem\n        cylinder(h = 45, r = 2.5, center = false);\n        \n        // Brush bristles (simplified)\n        translate([0, 0, 45]) {\n            difference() {\n                cylinder(h = 12, r = 4, center = false);\n                translate([0, 0, 6])\n                    cylinder(h = 6, r = 3, center = false);\n            }\n        }\n    }\n    \n    // Label area indentation\n    difference() {\n        translate([0, 0, 25])\n            cylinder(h = 25, r = 18.5, center = false);\n        translate([0, 0, 25])\n            cylinder(h = 25, r = 17.5, center = false);\n    }\n    \n    // Base ring\n    difference() {\n        cylinder(h = 3, r = 20, center = false);\n        cylinder(h = 3, r = 18, center = false);\n    }\n}\n\n// Render the polish\nnail_polish();",
    "renders": true
  },
  {
    "household_item": "oil",
    "openscad_code": "// Realistic Oil Bottle – 75 mm tall, 3D-printable\n// Medium complexity, built only with primitives & booleans\n\n$fn = 36;          // Good curve resolution\nwall = 1.5;        // Uniform wall thickness for FDM printing\nh_total = 75;      // Overall height\n\n// Base dimensions\nbase_d = 36;\nneck_d = 14;\ncap_d  = 18;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Outer profile (lathed shape)\n        rotate_extrude()\n            translate([0, -wall, 0])\n                polygon(points=[\n                    [0, 0],               // bottom center\n                    [base_d/2, 0],        // bottom edge\n                    [base_d/2 - 2, 50],   // taper\n                    [neck_d/2, 55],       // shoulder\n                    [neck_d/2, 60],       // neck\n                    [0, 60]\n                ]);\n        // Hollow interior\n        rotate_extrude()\n            translate([0, 0, wall])\n                polygon(points=[\n                    [0, wall],\n                    [base_d/2 - wall, wall],\n                    [base_d/2 - wall - 1, 50 - wall],\n                    [neck_d/2 - wall, 55 - wall],\n                    [neck_d/2 - wall, 60 - wall],\n                    [0, 60 - wall]\n                ]);\n    }\n}\n\n// Screw threads (simple trapezoid ring stack)\nmodule threads(n_turns = 3) {\n    step = 2;\n    for (i = [0 : n_turns - 1]) {\n        translate([0, 0, 60 + i * step])\n            difference() {\n                cylinder(h = step * 0.9, d1 = neck_d + 1.5, d2 = neck_d + 1.5);\n                cylinder(h = step * 0.9, d1 = neck_d - 1.5, d2 = neck_d - 1.5);\n            }\n    }\n}\n\n// Cap\nmodule cap() {\n    difference() {\n        union() {\n            // Main cap shell\n            cylinder(h = 10, d = cap_d);\n            // Grip ridges\n            for (i = [0 : 23]) {\n                rotate([0, 0, i * 15])\n                    translate([cap_d/2 - 1, -1, 0])\n                        cube([2, 2, 10]);\n            }\n        }\n        // Interior cavity\n        translate([0, 0, -0.01])\n            cylinder(h = 11, d = neck_d + 0.2);\n        // Internal threads\n        threads();\n    }\n}\n\n// Drop-in label recess\nmodule label_recess() {\n    translate([0, 0, 25])\n        difference() {\n            cylinder(h = 1, d = base_d - wall*2 + 0.5);\n            cylinder(h = 1.1, d = base_d - wall*2 - 8);\n        }\n}\n\n// Assembly\nbottle_body();\ntranslate([0, 0, 60])\n    threads();\ntranslate([0, 0, 70])\n    cap();\nlabel_recess();",
    "renders": true
  },
  {
    "household_item": "glue",
    "openscad_code": "// Realistic glue stick model - medium complexity\n// Approximate dimensions: 25mm diameter, 90mm height\n\n// Main parameters\n$fn = 32;\nglue_diameter = 25;\nglue_height = 50;\ncap_height = 40;\nbase_height = 15;\nthread_height = 8;\nthread_count = 3;\n\n// Color definitions\ncolor_cap = [0.8, 0.8, 0.8];\ncolor_body = [0.9, 0.9, 0.9];\ncolor_glue = [0.95, 0.9, 0.85];\n\n// Cap module\nmodule cap() {\n    difference() {\n        // Outer shell\n        cylinder(h=cap_height, d1=glue_diameter+4, d2=glue_diameter+1);\n        \n        // Inner cavity\n        translate([0, 0, 1])\n        cylinder(h=cap_height-2, d=glue_diameter+0.5);\n        \n        // Grip rings\n        for(i=[1:3:cap_height-5]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=2, d=glue_diameter+4);\n                cylinder(h=2, d=glue_diameter+3);\n            }\n        }\n    }\n}\n\n// Threading module\nmodule threads() {\n    for(i=[0:thread_count-1]) {\n        translate([0, 0, i*(thread_height/thread_count)])\n        difference() {\n            cylinder(h=thread_height/thread_count, d=glue_diameter-1);\n            cylinder(h=thread_height/thread_count, d=glue_diameter-3);\n        }\n    }\n}\n\n// Base module\nmodule base() {\n    difference() {\n        union() {\n            // Main base cylinder\n            cylinder(h=base_height, d1=glue_diameter+2, d2=glue_diameter);\n            \n            // Bottom ridge\n            translate([0, 0, 0])\n            cylinder(h=2, d=glue_diameter+3);\n            \n            // Rotator grip\n            translate([0, 0, base_height-5])\n            cylinder(h=5, d=glue_diameter+4);\n        }\n        \n        // Thread cavity\n        translate([0, 0, base_height-thread_height-2])\n        threads();\n        \n        // Central hole for glue stick\n        translate([0, 0, base_height-thread_height-2])\n        cylinder(h=thread_height+10, d=glue_diameter-8);\n    }\n}\n\n// Glue stick module\nmodule glue_stick() {\n    union() {\n        // Main glue body\n        color(color_glue)\n        cylinder(h=glue_height, d=glue_diameter-0.5);\n        \n        // Top rounded surface\n        translate([0, 0, glue_height])\n        scale([1, 1, 0.5])\n        sphere(d=glue_diameter-0.5);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\ncolor(color_body)\nbase();\n\ntranslate([0, 0, base_height-thread_height-1])\ncolor(color_glue)\nglue_stick();\n\ntranslate([0, 0, base_height+glue_height-5])\nrotate([180, 0, 0])\ncolor(color_cap)\ncap();",
    "renders": true
  },
  {
    "household_item": "nail",
    "openscad_code": "// Realistic 3D printable nail (medium complexity)\n// Overall size ~75 mm\n\n// Nail head module\nmodule nail_head(diameter=9, thickness=2.2, bevel=0.6) {\n    difference() {\n        // Main disk\n        cylinder(d=diameter, h=thickness, $fn=60);\n        // Top bevel\n        translate([0,0,thickness-bevel])\n            cylinder(d1=diameter, d2=diameter-1.2, h=bevel, $fn=60);\n        // Bottom fillet\n        translate([0,0,-0.1])\n            cylinder(d1=diameter-1.4, d2=diameter, h=bevel+0.1, $fn=60);\n    }\n}\n\n// Tapered shank module\nmodule nail_shank(length=65, base_d=3.2, tip_d=1.8) {\n    steps = 20;\n    union() {\n        // Main tapered cylinder\n        cylinder(d1=base_d, d2=tip_d, h=length, $fn=24);\n        \n        // Subtle textured rings for grip\n        for(i=[0:steps-1]) {\n            height = i * (length/steps);\n            diameter = base_d - (base_d-tip_d)*(height/length) + 0.1;\n            translate([0,0,height])\n                cylinder(d=diameter, h=0.3, $fn=24);\n        }\n    }\n}\n\n// Diamond point module\nmodule diamond_point(base_d=1.8, length=6) {\n    // Four-sided pyramid\n    union() {\n        // Front/back faces\n        for(a=[0,90]) rotate([0,0,a])\n            translate([0,-base_d/2,0])\n                polyhedron(\n                    points=[[0,0,0], [0,base_d,0], [0,0,length]],\n                    faces=[[0,1,2]]\n                );\n        mirror([1,0,0])\n            translate([0,-base_d/2,0])\n                polyhedron(\n                    points=[[0,0,0], [0,base_d,0], [0,0,length]],\n                    faces=[[0,1,2]]\n                );\n    }\n}\n\n// Assemble the nail\ntranslate([0,0,2.2]) {\n    // Nail head\n    nail_head();\n}\n\n// Shank\ntranslate([0,0,-65])\n    nail_shank();\n\n// Point\ntranslate([0,0,-65-6])\n    diamond_point();",
    "renders": true
  },
  {
    "household_item": "screw",
    "openscad_code": "// Realistic 3D-printable screw ~80 mm overall length\n// Medium complexity – threaded shaft, slotted head, tapered tip\n\n// Parameters\nshaft_d = 12;           // shaft diameter\nshaft_L = 60;           // shaft length\nhead_d = 22;            // head diameter\nhead_h = 6;             // head height\nslot_w = 2.4;           // slot width\nslot_d = 3.5;           // slot depth\nthread_pitch = 3;       // axial distance per 360° turn\nthread_depth = 0.8;     // radial thread height\ntip_angle = 90;         // tip cone angle (deg)\nsegments = 36;          // $fn for cylinders\n\n// Overall screw\nunion() {\n    // Head with slotted drive\n    screw_head();\n\n    // Threaded shaft\n    translate([0, 0, -shaft_L])\n        threaded_shaft();\n}\n\n// Head module\nmodule screw_head() {\n    difference() {\n        // Main cylindrical head\n        cylinder(h = head_h, d = head_d, $fn = segments);\n\n        // Slotted drive recess\n        translate([0, 0, head_h - slot_d])\n            cube([slot_w, head_d * 1.1, slot_d * 1.1], center = true);\n    }\n}\n\n// Threaded shaft with tip\nmodule threaded_shaft() {\n    union() {\n        // Core cylinder (printable thick wall)\n        cylinder(h = shaft_L - shaft_d/2, d = shaft_d, $fn = segments);\n\n        // Tapered tip\n        translate([0, 0, shaft_L - shaft_d/2])\n            cylinder(h = shaft_d/2, d1 = shaft_d, d2 = 0, $fn = segments);\n\n        // External threads\n        threads();\n    }\n}\n\n// Generate external threads (V-profile)\nmodule threads() {\n    turns = ceil(shaft_L / thread_pitch);\n\n    // Helical thread turns\n    for (i = [0 : turns - 1]) {\n        // Each 360° turn is split into small facets for printability\n        facet_count = segments;\n        for (j = [0 : facet_count - 1]) {\n            angle_start = j * 360 / facet_count;\n            angle_end   = (j + 1) * 360 / facet_count;\n            h_start     = i * thread_pitch + j * thread_pitch / facet_count;\n            h_end       = i * thread_pitch + (j + 1) * thread_pitch / facet_count;\n\n            hull() {\n                // Leading edge\n                translate(thread_point(angle_start, h_start))\n                    sphere(d = thread_depth * 2, $fn = 8);\n                // Trailing edge\n                translate(thread_point(angle_end, h_end))\n                    sphere(d = thread_depth * 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Helper: point on thread helix\nfunction thread_point(a, h) = [\n    (shaft_d/2 + thread_depth) * cos(a),\n    (shaft_d/2 + thread_depth) * sin(a),\n    h\n];",
    "renders": true
  },
  {
    "household_item": "nut",
    "openscad_code": "// Realistic hex nut with chamfers and threads\n// Designed for 3D printing, no support needed\n\n// Nut parameters\nnut_diameter = 50;          // Outer diameter across flats\nnut_height = 20;            // Overall height\nhole_diameter = 22;         // Thread hole diameter\nchamfer_size = 1.5;         // Chamfer on edges\nbevel_angle = 30;           // Top bevel angle for easier starting\nwall_thickness = 3;         // Minimum wall thickness for printing\n\n// Calculate hex dimensions\nhex_radius = nut_diameter / 2;\nhex_flat = hex_radius * cos(30);\n\nmodule hexagon() {\n    // Create hexagon using 6 rectangular segments\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) \n            translate([hex_radius/2, 0, 0])\n                cube([hex_radius, hex_flat * 2, nut_height], center = true);\n    }\n}\n\nmodule chamfered_hex() {\n    difference() {\n        // Main hex body\n        hexagon();\n        \n        // Top chamfer\n        translate([0, 0, nut_height/2 - chamfer_size/2])\n            scale([1, 1, 0.5])\n                cylinder(h = chamfer_size * 2, r = hex_radius + 1, $fn = 6);\n        \n        // Bottom chamfer\n        translate([0, 0, -nut_height/2 + chamfer_size/2])\n            scale([1, 1, 0.5])\n                cylinder(h = chamfer_size * 2, r = hex_radius + 1, $fn = 6);\n    }\n}\n\nmodule beveled_top() {\n    // Add bevel on top for easier thread starting\n    intersection() {\n        // Main body\n        chamfered_hex();\n        \n        // Beveled top using cone subtraction\n        difference() {\n            cube([nut_diameter * 2, nut_diameter * 2, nut_height], center = true);\n            translate([0, 0, nut_height/2 - tan(bevel_angle) * (hex_radius - hole_diameter/2)])\n                cylinder(h = nut_height * 2, r1 = hex_radius, r2 = hole_diameter/2, center = true);\n        }\n    }\n}\n\nmodule threaded_hole() {\n    // Create threaded hole with clearance\n    difference() {\n        // Main hole\n        cylinder(h = nut_height + 2, r = hole_diameter/2, center = true);\n        \n        // Add thread relief grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, hole_diameter/2 + 0.5, -nut_height/2 + 2 + i * 4])\n                    cube([1, 1, 2], center = true);\n        }\n    }\n}\n\nmodule realistic_nut() {\n    difference() {\n        // Main nut body with beveled top\n        beveled_top();\n        \n        // Threaded hole\n        threaded_hole();\n        \n        // Add center mark for alignment\n        translate([0, 0, nut_height/2 + 0.1])\n            cylinder(h = 0.5, r = 2, $fn = 20);\n    }\n}\n\n// Generate the nut\nrealistic_nut();",
    "renders": true
  },
  {
    "household_item": "washer",
    "openscad_code": "// Realistic 3D printable washer with chamfers and texture\n// Outside diameter 60 mm, inside 20 mm, thickness 3 mm\n\nmodule chamfer_profile(d, h, angle=45) {\n    // Create a chamfer profile for edges\n    linear_extrude(height=h, center=true, convexity=2)\n    polygon([\n        [0, 0],\n        [d*cos(angle), d*sin(angle)],\n        [d*cos(angle), h-d*sin(angle)],\n        [0, h]\n    ]);\n}\n\nmodule textured_surface(d_outer, d_inner, thickness) {\n    // Add grip texture on outer rim\n    difference() {\n        cylinder(h=thickness, d=d_outer+0.2, $fn=100);\n        cylinder(h=thickness+0.1, d=d_outer, $fn=100);\n    }\n    \n    // Small raised ridges for grip\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n        translate([0, d_outer/2 - 2, -0.1])\n        cube([1.5, 3.5, thickness+0.2], center=true);\n    }\n}\n\nmodule washer_body(od, id, t) {\n    // Main washer body with chamfers\n    difference() {\n        // Outer cylinder with top/bottom chamfers\n        union() {\n            cylinder(h=t-1, d=od, $fn=100);\n            \n            // Top chamfer\n            translate([0, 0, t/2-0.5])\n            scale([1, 1, 0.5])\n            cylinder(h=1, d1=od, d2=od-2, $fn=100);\n            \n            // Bottom chamfer\n            translate([0, 0, -t/2+0.5])\n            scale([1, 1, 0.5])\n            cylinder(h=1, d1=od-2, d2=od, $fn=100);\n        }\n        \n        // Inner hole with chamfers\n        difference() {\n            cylinder(h=t+2, d=id, $fn=60);\n            \n            // Top inner chamfer\n            translate([0, 0, t/2+0.5])\n            scale([1, 1, 0.5])\n            cylinder(h=1, d1=id+2, d2=id, $fn=60);\n            \n            // Bottom inner chamfer\n            translate([0, 0, -t/2-0.5])\n            scale([1, 1, 0.5])\n            cylinder(h=1, d1=id, d2=id+2, $fn=60);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        washer_body(60, 20, 3);\n        textured_surface(60, 20, 3);\n    }\n    \n    // Lightening holes (optional)\n    for(i=[0:5]) {\n        rotate([0, 0, i*60+30])\n        translate([40, 0, 0])\n        cylinder(h=4, d=4, $fn=20);\n    }\n}\n\n// Add material thickness indicator\n%translate([0, 0, -4])\ncolor(\"gray\", 0.3)\ncube([80, 80, 0.5], center=true);",
    "renders": true
  },
  {
    "household_item": "rivet",
    "openscad_code": "// Rivet - Realistic Style, Medium Complexity\n// Overall dimensions ~60mm height, 20mm diameter\n\nmodule rivet_head() {\n    // Main head - shallow dome\n    translate([0,0,2])\n    rotate_extrude(angle=360, $fn=64)\n    translate([0,0])\n    polygon(points=[\n        [0,0],\n        [10,0],\n        [9.5,2],\n        [8,3.5],\n        [6,4.5],\n        [4,5],\n        [2,5],\n        [0,5]\n    ]);\n}\n\nmodule rivet_shank() {\n    // Main shank cylinder\n    cylinder(h=50, d=10, $fn=64);\n    \n    // Tapered entry tip\n    translate([0,0,-5])\n    cylinder(h=5, d1=10, d2=7, $fn=64);\n}\n\nmodule rivet_tail() {\n    // Factory head - flat with slight taper\n    translate([0,0,-7])\n    difference() {\n        cylinder(h=7, d=18, $fn=64);\n        \n        // Taper underside\n        translate([0,0,-0.1])\n        cylinder(h=7.2, d1=16, d2=18, $fn=64);\n    }\n    \n    // Annular rings for grip\n    for(i=[-6.5:-1.5:-3.5]) {\n        translate([0,0,i])\n        difference() {\n            cylinder(h=0.5, d=18.5, $fn=64);\n            cylinder(h=0.7, d=17.5, $fn=64);\n        }\n    }\n}\n\nmodule rivet_markings() {\n    // Manufacturing marks on head\n    rotate([0,0,0])\n    translate([0,0,7])\n    linear_extrude(height=0.2)\n    text(\"A2\", size=3, halign=\"center\", valign=\"center\");\n    \n    // 4 radial marks\n    for(i=[0:90:270]) {\n        rotate([0,0,i])\n        translate([5,0,7])\n        cube([2,0.5,0.2]);\n    }\n}\n\n// Main assembly\nunion() {\n    rivet_head();\n    rivet_shank();\n    rivet_tail();\n    rivet_markings();\n}\n\n// Optional support ring for printing (remove after)\n%translate([0,0,-12])\ncylinder(h=1, d=20, $fn=64);",
    "renders": true
  },
  {
    "household_item": "staple",
    "openscad_code": "// Realistic 3D printable staple\n// Overall length ~70 mm, printable without support\n\n$fn = 32;\n\n// Main parameters\nwire_d = 2.0;            // Wire diameter\nwire_r = wire_d / 2;\ncrown_l = 50;            // Crown length\ncrown_h = 7;             // Crown height\nleg_l = 30;              // Leg length\nbend_inset = 4;          // Inset for sharper bends\nwall_th = 1.5;           // Wall thickness for 3D printing\nchamfer = 0.5;           // Chamfer for printability\n\nmodule staple() {\n    difference() {\n        union() {\n            // Crown top arc\n            translate([0, crown_h - wire_r, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = crown_l, r = wire_r);\n\n            // Crown left leg transition\n            translate([-crown_l/2 + wire_r, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = crown_h - wire_r, r = wire_r);\n\n            // Crown right leg transition\n            translate([crown_l/2 - wire_r, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = crown_h - wire_r, r = wire_r);\n\n            // Left leg\n            translate([-crown_l/2 + wire_r, -leg_l/2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = leg_l, r = wire_r);\n\n            // Right leg\n            translate([crown_l/2 - wire_r, -leg_l/2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = leg_l, r = wire_r);\n\n            // Fill gaps at bends for smooth transition\n            translate([-crown_l/2 + wire_r - bend_inset, crown_h - wire_r, 0])\n                sphere(r = wire_r);\n            translate([crown_l/2 - wire_r + bend_inset, crown_h - wire_r, 0])\n                sphere(r = wire_r);\n            translate([-crown_l/2 + wire_r, -wire_r, 0])\n                sphere(r = wire_r);\n            translate([crown_l/2 - wire_r, -wire_r, 0])\n                sphere(r = wire_r);\n        }\n\n        // Chamfer bottom edges for easier printing\n        translate([0, -leg_l - 1, 0])\n            cube([crown_l + 2*wire_d, 2, 2*wire_d], center = true);\n\n        // Chamfer top edges\n        translate([0, crown_h + 1, 0])\n            cube([crown_l + 2*wire_d, 2, 2*wire_d], center = true);\n    }\n}\n\n// Position staple flat on build plate\nrotate([0, 90, 0])\n    staple();",
    "renders": true
  },
  {
    "household_item": "tack",
    "openscad_code": "// Realistic 3D printable tack\n// Overall height ≈ 55 mm, head diameter ≈ 20 mm\n\n$fn = 50;\ntolerance = 0.2;\n\nmodule tack_head() {\n    // Main dome\n    translate([0,0,12])\n        sphere(d = 20);\n\n    // Chamfered edge\n    difference() {\n        translate([0,0,12])\n            sphere(d = 20.5);\n        translate([0,0,10.8])\n            cylinder(h = 5, d = 15, center = false);\n    }\n\n    // Tiny grip ring\n    for(i = [1:3]) {\n        translate([0,0,10.4 - i*0.4])\n            difference() {\n                cylinder(h = 0.3, d = 19.5);\n                cylinder(h = 0.4, d = 18.5);\n            }\n    }\n}\n\nmodule tack_shaft() {\n    // Tapered needle\n    cylinder(h1 = 1.2, h2 = 0.8, h = 38, $fn = 6);\n\n    // Threaded section\n    for(i = [0:19]) {\n        translate([0,0,i * 1.8])\n            difference() {\n                cylinder(h = 1.2, d = 2.8);\n                cube([2.8, 0.4, 1.2], center = true);\n            }\n    }\n\n    // Tip\n    translate([0,0,38])\n        cylinder(h1 = 0, h2 = 0.8, h = 1.5, $fn = 6);\n}\n\nmodule tack_base() {\n    // Solid collar under head\n    translate([0,0,10])\n        cylinder(h = 2, d = 14);\n\n    // Reinforced stem\n    translate([0,0,0])\n        difference() {\n            cylinder(h = 10, d = 5);\n            translate([0,0,9])\n                cylinder(h1 = 1, h2 = 0, h = 1.5, $fn = 6);\n        }\n}\n\nunion() {\n    tack_head();\n    tack_base();\n    translate([0,0,2])\n        tack_shaft();\n}",
    "renders": true
  },
  {
    "household_item": "pin",
    "openscad_code": "// Realistic 3D-printable pin with medium detail\n// Overall dimensions ~55 mm height, ~12 mm diameter\n\n// Pin shaft module with smooth tip\nmodule pin_shaft() {\n    difference() {\n        // Main shaft cylinder\n        cylinder(h = 45, d = 2.5, $fn = 32);\n        \n        // Chamfer on bottom for easier insertion\n        translate([0, 0, -0.5])\n            cylinder(h = 2, d1 = 2.5, d2 = 1.5, $fn = 32);\n    }\n}\n\n// Pin head with realistic grip ridges\nmodule pin_head() {\n    // Main head cylinder\n    cylinder(h = 10, d = 12, $fn = 64);\n    \n    // Top dome for smooth finish\n    translate([0, 0, 10])\n        sphere(d = 12, $fn = 64);\n}\n\n// Grip ridges around the head\nmodule grip_ridges() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([5.5, 0, 2])\n                cube([1, 0.5, 6], center = true);\n    }\n}\n\n// Flattened side for thumb grip\nmodule thumb_flat() {\n    translate([0, -6, 5])\n        cube([12, 3, 10], center = true);\n}\n\n// Safety collar to prevent over-insertion\nmodule safety_collar() {\n    difference() {\n        cylinder(h = 3, d = 6, $fn = 32);\n        \n        // Center hole for shaft\n        cylinder(h = 3.5, d = 2.6, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Shaft assembly\n    union() {\n        translate([0, 0, 0])\n            pin_shaft();\n        \n        // Safety collar 2mm from tip\n        translate([0, 0, 43])\n            safety_collar();\n    }\n    \n    // Head assembly\n    translate([0, 0, 45])\n        difference() {\n            union() {\n                pin_head();\n                grip_ridges();\n            }\n            \n            // Thumb grip flat\n            thumb_flat();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "clip",
    "openscad_code": "// Medium-complexity realistic 3D-printable clip\n// Overall length ≈ 80 mm, width ≈ 15 mm, thickness ≈ 5 mm\n\n$fn = 36;\n\n// Main clip body\nmodule clip_body() {\n    difference() {\n        // Base curved beam\n        union() {\n            // Lower arm\n            translate([0, -5, 2.5])\n                cube([70, 10, 5], center=true);\n\n            // Upper spring arm\n            translate([0, 5, 2.5])\n                cube([70, 10, 5], center=true);\n\n            // Rounded front\n            translate([35, 0, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=2.5, center=true);\n\n            // Rounded back\n            translate([-35, 0, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=2.5, center=true);\n        }\n\n        // Grip holes\n        for (x = [-25, 0, 25])\n            translate([x, 0, 2.5])\n                cylinder(h=6, r=3, center=true);\n    }\n}\n\n// Grip pads\nmodule grip_pads() {\n    for (side = [-1, 1]) {\n        for (x = [-25, 0, 25]) {\n            translate([x, side * 7.5, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r=1.5, center=true);\n        }\n    }\n}\n\n// Spring hinge\nmodule spring_hinge() {\n    difference() {\n        // Outer cylinders\n        union() {\n            for (y = [-5, 5])\n                translate([-30, y, 2.5])\n                    rotate([0, 90, 0])\n                        cylinder(h=12, r=3, center=true);\n        }\n\n        // Inner hole\n        translate([-30, 0, 2.5])\n            rotate([0, 90, 0])\n                cylinder(h=25, r=1.5, center=true);\n    }\n\n    // Spring gap\n    translate([-30, 0, 5])\n        cube([6, 12, 1], center=true);\n}\n\n// Assembly\nunion() {\n    clip_body();\n    grip_pads();\n    spring_hinge();\n}",
    "renders": true
  },
  {
    "household_item": "clamp",
    "openscad_code": "// Medium-complexity realistic clamp\n// Overall printable length ~85 mm, height ~30 mm\n\n$fn = 36;\n\nmodule screw(d=8, h=30, head_d=12, head_h=4, slot_w=2, slot_d=1.5) {\n    difference() {\n        union() {\n            cylinder(d=head_d, h=head_h);\n            translate([0, 0, head_h]) cylinder(d=d, h=h);\n        }\n        translate([0, 0, head_h - slot_d]) cube([head_d*1.2, slot_w, slot_d*2], center=true);\n    }\n}\n\nmodule handle(len=35, thick=5, dia=8) {\n    translate([0, 0, -len/2]) rotate([90, 0, 0])\n    difference() {\n        union() {\n            cylinder(d=dia, h=len);\n            translate([0, 0, len/2 - thick/2])\n            cube([dia*1.5, thick, thick], center=true);\n        }\n        translate([0, 0, -1]) cylinder(d=dia*0.6, h=len+2);\n    }\n}\n\nmodule jaw(length=40, width=15, thick=12, hole_d=9) {\n    difference() {\n        union() {\n            // main bar\n            translate([-length/2, -width/2, 0]) cube([length, width, thick]);\n\n            // rounded end\n            translate([length/2, 0, thick/2])\n            rotate([0, 90, 0]) cylinder(d=width, h=width);\n        }\n\n        // mounting hole\n        translate([0, 0, -1]) cylinder(d=hole_d, h=thick+2);\n\n        // clearance cut for screw head\n        translate([0, 0, -1]) cylinder(d=13, h=4.5);\n    }\n\n    // grip pads\n    for(y=[-width/2 + 2, width/2 - 2])\n    translate([length/2 - 3, y, thick])\n    cube([6, 2, 1.5]);\n\n    // teeth\n    for(i=[0:3]) {\n        translate([i*3 + 4, -width/2, 0]) cube([0.8, 1, thick]);\n        translate([i*3 + 4, width/2 - 1, 0]) cube([0.8, 1, thick]);\n    }\n}\n\nmodule clamp_assembly() {\n    // fixed jaw\n    jaw();\n\n    // sliding jaw\n    translate([50, 0, 0]) mirror([1, 0, 0]) jaw();\n\n    // guide bar\n    difference() {\n        translate([-5, -7.5, 6]) cube([60, 15, 5]);\n        translate([0, 0, 6-1]) cube([50, 9, 7], center=true);\n    }\n\n    // screw\n    translate([0, 0, 6]) rotate([0, 0, 0]) screw(h=50);\n\n    // handle\n    translate([0, 0, 6+50]) handle();\n}\n\nclamp_assembly();",
    "renders": true
  },
  {
    "household_item": "vise",
    "openscad_code": "// Medium-complexity 3D-printable bench vise\n// Approx. 80 mm wide, 50 mm deep, 60 mm tall\n// All overhangs ≤ 45°, 2 mm walls everywhere\n\n$fn = 24;\n\n// Main assembly\ndifference() {\n    union() {\n        // Fixed jaw body\n        vise_body();\n        \n        // Sliding jaw\n        translate([50,0,0]) sliding_jaw();\n        \n        // Lead screw\n        translate([-10,0,30]) rotate([0,90,0]) lead_screw();\n        \n        // Handle\n        translate([-20,0,30]) rotate([0,90,0]) handle();\n        \n        // Guide rails\n        guide_rails();\n    }\n    \n    // Holes and clearances\n    // Screw clearance through fixed jaw\n    translate([-5,0,30]) rotate([0,90,0]) cylinder(h=60, d=6.5);\n    \n    // Handle hole in screw\n    translate([-20,0,30]) rotate([0,0,90]) cylinder(h=50, d=4.5);\n    \n    // Jaw face grooves\n    jaw_grooves();\n}\n\nmodule vise_body() {\n    // Base plate\n    cube([30,40,10], center=true);\n    \n    // Fixed jaw upright\n    translate([10,0,20]) cube([10,36,40], center=true);\n    \n    // Mounting holes (4 corners)\n    for(x=[-12,12], y=[-15,15]) {\n        translate([x,y,-5]) cylinder(h=12, d=3.5);\n    }\n}\n\nmodule sliding_jaw() {\n    difference() {\n        // Jaw block\n        cube([10,36,40], center=true);\n        \n        // Internal thread (nut)\n        translate([0,0,0]) rotate([0,90,0]) cylinder(h=12, d=8);\n        \n        // Rail holes\n        for(y=[-15,15]) {\n            translate([0,y,0]) cylinder(h=12, d=6.5);\n        }\n    }\n}\n\nmodule guide_rails() {\n    for(y=[-15,15]) {\n        // Fixed rail\n        translate([25,y,30]) cylinder(h=25, d=6);\n        \n        // Rail supports\n        translate([12.5,y,15]) cube([25,4,30], center=true);\n    }\n}\n\nmodule lead_screw() {\n    // Threaded rod\n    cylinder(h=70, d=6);\n    \n    // Thread impression (simple grooves)\n    for(i=[0:3:60]) {\n        rotate([0,0,i*360/3]) \n        translate([0,0,i]) \n        cube([6.2,0.5,3], center=true);\n    }\n    \n    // End stop\n    translate([35,0,0]) cylinder(h=5, d=10);\n}\n\nmodule handle() {\n    // Grip tube\n    cylinder(h=40, d=8);\n    \n    // Knurling rings\n    for(i=[-15:5:15]) {\n        translate([i,0,0]) rotate([0,90,0]) \n        cylinder(h=8.2, d=9);\n    }\n}\n\nmodule jaw_grooves() {\n    // Vertical grooves on both jaws\n    for(x=[-10,60]) {\n        for(y=[-16:4:16]) {\n            translate([x,y,20]) cube([0.5,2,40], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "level",
    "openscad_code": "// Realistic Style Level – 3D-printable spirit level (medium complexity)\n\n// Overall dimensions (mm)\nlevel_length   = 80;\nlevel_width    = 30;\nlevel_height   = 15;\nwall_thick     = 2;          // minimum printable wall thickness\nbody_color     = \"Silver\";\nvial_color     = \"Clear\";\n\n// Helper module for rounded edges on a box\nmodule rounded_box(x,y,z,r)\n{\n    hull()\n    {\n        translate([ r,  r, 0]) cube([x-2*r, y-2*r, z], center=false);\n        translate([ r, y-r, 0]) cube([x-2*r, 0, z], center=false);\n        translate([x-r,  r, 0]) cube([0, y-2*r, z], center=false);\n        translate([x-r, y-r, 0]) cube([0,0,z], center=false);\n    }\n}\n\n// Main level body with hollow interior\nmodule level_body()\n{\n    difference()\n    {\n        // outer shell\n        rounded_box(level_length, level_width, level_height, 4);\n\n        // hollow cavity\n        translate([wall_thick, wall_thick, wall_thick])\n            rounded_box(level_length - 2*wall_thick,\n                        level_width  - 2*wall_thick,\n                        level_height - 2*wall_thick,\n                        2);\n    }\n}\n\n// Bubble vial module\nmodule vial(diam, span)\n{\n    // transparent tube\n    color(vial_color, 0.7)\n    rotate([90,0,0])\n        cylinder(h=span, d=diam, $fn=32);\n\n    // actual bubble\n    color(\"Green\")\n    translate([0, 0, span/2 - 2])\n        sphere(d=diam*0.4, $fn=16);\n}\n\n// Mounting vials at 0° and 90°\nmodule vial_assembly()\n{\n    vial_diam = 10;\n    vial_span = level_width - 6;   // slight clearance\n\n    // horizontal vial\n    translate([level_length/2, level_width/2, level_height/2])\n        vial(vial_diam, vial_span);\n\n    // vertical vial\n    translate([level_length/2 - 8, level_width/2, level_height/2])\n        rotate([0,0,90])\n            vial(vial_diam, vial_span);\n}\n\n// Measurement scale lines\nmodule scale_marks()\n{\n    mark_len = 2;\n    mark_depth = 0.5;\n    mark_step = 5;\n    for(i = [0 : mark_step : level_length - mark_step])\n    {\n        if(i % 10 == 0) mark_len = 3; else mark_len = 2;\n        translate([i + mark_step/2, wall_thick/2, mark_depth/2])\n            cube([0.5, mark_len, mark_depth]);\n        translate([i + mark_step/2, level_width - wall_thick/2 - mark_len, mark_depth/2])\n            cube([0.5, mark_len, mark_depth]);\n    }\n}\n\n// Assembly\nunion()\n{\n    level_body();\n    translate([0,0,level_height])  // scale on top surface\n        scale_marks();\n    vial_assembly();\n}",
    "renders": true
  },
  {
    "household_item": "square",
    "openscad_code": "// Realistic square tile with embossed details and mounting posts\n// Designed for 3D printing with no overhangs\n\n// Main parameters\ntile_size = 80;                 // Overall square size\nthickness = 8;                  // Tile thickness\ncorner_radius = 3;              // Corner rounding radius\nemboss_depth = 1.5;             // Embossing depth\npost_diameter = 4;              // Mounting post diameter\npost_height = 6;                // Mounting post height\nbevel_height = 1;               // Edge bevel height\n\n// Corner rounding module\nmodule rounded_square(size, radius, height) {\n    difference() {\n        // Base square\n        cube([size, size, height], center=true);\n        \n        // Remove corners\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (size/2 - radius), y * (size/2 - radius), -height/2 - 0.1])\n                    rotate([0, 0, x * y * 45])\n                        cube([radius * 2, radius * 2, height + 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Beveled edge module\nmodule beveled_edge(size, bevel, height) {\n    difference() {\n        cube([size, size, height], center=true);\n        \n        // Top bevel\n        translate([0, 0, height/2 - bevel])\n            cube([size + 2, size + 2, bevel * 2], center=true);\n    }\n}\n\n// Embossed pattern module\nmodule embossed_pattern() {\n    pattern_size = tile_size * 0.6;\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([pattern_size/4, 0, thickness/2 + 0.01])\n                linear_extrude(height=emboss_depth, convexity=10) {\n                    offset(r=2) offset(r=-4) offset(r=2) square([pattern_size/2, 6], center=true);\n                }\n    }\n}\n\n// Mounting posts module\nmodule mounting_posts() {\n    post_offset = tile_size/2 - 10;\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * post_offset, y * post_offset, -thickness/2 - post_height/2])\n                cylinder(h=post_height, d=post_diameter, $fn=16);\n        }\n    }\n}\n\n// Main tile assembly\nunion() {\n    // Base tile with rounded corners\n    difference() {\n        // Solid tile\n        union() {\n            rounded_square(tile_size, corner_radius, thickness);\n            beveled_edge(tile_size - 1, bevel_height, thickness);\n        }\n        \n        // Recessed bottom for posts\n        translate([0, 0, -thickness/2 - 0.1])\n            cube([tile_size - 6, tile_size - 6, 2], center=true);\n    }\n    \n    // Embossed details\n    embossed_pattern();\n    \n    // Mounting posts\n    mounting_posts();\n    \n    // Center indicator\n    translate([0, 0, thickness/2 + 0.01])\n        cylinder(h=emboss_depth, d=8, $fn=32);\n}",
    "renders": true
  },
  {
    "household_item": "ruler",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\nmodule ruler() {\n    // Overall dimensions\n    length = 100;\n    width = 20;\n    thickness = 3;\n    corner_radius = 2;\n    \n    // Main ruler body with rounded edges\n    difference() {\n        // Base block\n        cube([length, width, thickness], center = false);\n        \n        // Round corners on top face\n        translate([corner_radius, corner_radius, thickness])\n            cylinder(h = thickness + 0.1, r = corner_radius, $fn = 16);\n        translate([length - corner_radius, corner_radius, thickness])\n            cylinder(h = thickness + 0.1, r = corner_radius, $fn = 16);\n        translate([corner_radius, width - corner_radius, thickness])\n            cylinder(h = thickness + 0.1, r = corner_radius, $fn = 16);\n        translate([length - corner_radius, width - corner_radius, thickness])\n            cylinder(h = thickness + 0.1, r = corner_radius, $fn = 16);\n    }\n    \n    // Millimeter marks (every 5mm)\n    for (i = [0:5:length]) {\n        mark_height = (i % 10 == 0) ? 5 : 3;\n        mark_width = (i % 10 == 0) ? 1.5 : 0.5;\n        \n        translate([i + 1, 0, thickness]) {\n            cube([mark_width, mark_height, 1]);\n        }\n    }\n    \n    // Centimeter numbers (0-10)\n    for (i = [0:10:length]) {\n        translate([i + 1, 7, thickness + 0.5]) {\n            linear_extrude(height = 1) {\n                text(str(i/10), size = 4, halign = \"center\");\n            }\n        }\n    }\n    \n    // Inch marks (every 1/8 inch)\n    inch_length = 25.4; // mm per inch\n    for (i = [0:inch_length/8:length]) {\n        inch_mark_height = (i % inch_length == 0) ? 5 : \n                          (i % (inch_length/2) == 0) ? 4 : \n                          (i % (inch_length/4) == 0) ? 3.5 : 2.5;\n        inch_mark_width = (i % inch_length == 0) ? 1.5 : 0.5;\n        \n        translate([i + 1, width - inch_mark_height, thickness]) {\n            cube([inch_mark_width, inch_mark_height, 1]);\n        }\n    }\n    \n    // Inch numbers (0-3)\n    for (i = [0:inch_length:length]) {\n        translate([i + 1, width - 8, thickness + 0.5]) {\n            linear_extrude(height = 1) {\n                text(str(i/inch_length), size = 4, halign = \"center\");\n            }\n        }\n    }\n    \n    // Hanging hole\n    hole_offset = 5;\n    translate([hole_offset, width/2, thickness/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = thickness + 1, r = 2.5, $fn = 32);\n        }\n    }\n    \n    // Brand text\n    translate([length/2, width/2 - 2, thickness + 0.5]) {\n        linear_extrude(height = 0.5) {\n            text(\"METRIC\", size = 3, halign = \"center\");\n        }\n    }\n    translate([length/2, width/2 + 2, thickness + 0.5]) {\n        linear_extrude(height = 0.5) {\n            text(\"IMPERIAL\", size = 3, halign = \"center\");\n        }\n    }\n}\n\nruler();",
    "renders": true
  },
  {
    "household_item": "tape",
    "openscad_code": "// Realistic Compact Cassette Tape - OpenSCAD\n// 3D printable, medium complexity (~100mm width)\n\n$fn = 36;\n\n// Overall dimensions\ncassette_width = 102;\ncassette_height = 64;\ncassette_thickness = 12;\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Screw holes\nscrew_r = 1.5;\nscrew_depth = 4;\n\n// Tape hub dimensions\nhub_r = 7;\nhub_h = 4;\nhub_gap = 2;\n\n// Window for tape\nwindow_w = 80;\nwindow_h = 10;\n\n// Label area\nlabel_w = 90;\nlabel_h = 30;\n\n// Spool dimensions\nspool_r = 20;\nspool_h = 6;\nspool_clear = 0.5;\n\n// Main body\nmodule cassette_body() {\n    difference() {\n        // Outer shell\n        cube([cassette_width, cassette_height, cassette_thickness], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall/2])\n            cube([cassette_width-wall*2, cassette_height-wall*2, cassette_thickness-wall], center=true);\n    }\n}\n\n// Left tape hub\nmodule left_hub() {\n    translate([-33, 0, 0])\n        difference() {\n            cylinder(r=hub_r, h=hub_h, center=true);\n            cylinder(r=hub_r-3, h=hub_h+0.5, center=true);\n        }\n}\n\n// Right tape hub\nmodule right_hub() {\n    translate([33, 0, 0])\n        difference() {\n            cylinder(r=hub_r, h=hub_h, center=true);\n            cylinder(r=hub_r-3, h=hub_h+0.5, center=true);\n        }\n}\n\n// Tape view window\nmodule tape_window() {\n    translate([0, 0, cassette_thickness/2 - 0.5])\n        cube([window_w, window_h, 1], center=true);\n}\n\n// Screws - 5 positions\nmodule screws() {\n    positions = [\n        [-cassette_width/2 + 10, -cassette_height/2 + 10],\n        [-cassette_width/2 + 10, cassette_height/2 - 10],\n        [cassette_width/2 - 10, -cassette_height/2 + 10],\n        [cassette_width/2 - 10, cassette_height/2 - 10],\n        [0, cassette_height/2 - 10]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 0])\n            cylinder(r=screw_r, h=screw_depth*2, center=true);\n    }\n}\n\n// Label recess\nmodule label() {\n    translate([0, cassette_height/2 - label_h/2 - 5, cassette_thickness/2 - 0.5])\n        cube([label_w, label_h, 0.5], center=true);\n}\n\n// Spool (left)\nmodule left_spool() {\n    translate([-33, 0, 0])\n        difference() {\n            cylinder(r=spool_r, h=spool_h, center=true);\n            cylinder(r=spool_r-wall, h=spool_h+0.5, center=true);\n        }\n}\n\n// Spool (right)\nmodule right_spool() {\n    translate([33, 0, 0])\n        difference() {\n            cylinder(r=spool_r, h=spool_h, center=true);\n            cylinder(r=spool_r-wall, h=spool_h+0.5, center=true);\n        }\n}\n\n// Small teeth on spools for grip\nmodule spool_teeth() {\n    for(i = [0:5:359]) {\n        rotate([0, 0, i]) {\n            translate([-33, spool_r-0.5, 0])\n                cube([2, 1, spool_h], center=true);\n            translate([33, spool_r-0.5, 0])\n                cube([2, 1, spool_h], center=true);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Main body\n        cassette_body();\n        \n        // Hubs\n        left_hub();\n        right_hub();\n        \n        // Spools\n        left_spool();\n        right_spool();\n        \n        // Spool teeth\n        spool_teeth();\n    }\n    \n    // Remove window\n    tape_window();\n    \n    // Remove label recess\n    label();\n    \n    // Screw holes\n    translate([0, 0, cassette_thickness/2 - screw_depth/2])\n        screws();\n}",
    "renders": true
  },
  {
    "household_item": "chalk",
    "openscad_code": "// Realistic 3D-printable chalk stick\n// Overall length 75 mm, diameter 10 mm, with slight taper and worn tip\n\n// 0.2 mm clearance for 3D-printed fit\n$fn = 32;\n\nmodule chalk_body() {\n    // Main cylindrical body with gentle taper\n    for (i = [0:19]) {\n        h = i * 3.5;\n        r_top = 4.8 - 0.02 * h;\n        r_bot = 4.9 - 0.02 * h;\n        translate([0, 0, h])\n            cylinder(h = 3.5, r1 = r_bot, r2 = r_top, $fn = 24);\n    }\n}\n\nmodule chalk_tip() {\n    // Worn-down conical tip\n    cylinder(h = 8, r1 = 4.1, r2 = 0.3, $fn = 24);\n}\n\nmodule wear_ring() {\n    // Light circumferential wear near tip\n    difference() {\n        cylinder(h = 2, r = 4.05, $fn = 24);\n        translate([0, 0, -0.1])\n            cylinder(h = 2.2, r = 3.9, $fn = 24);\n    }\n}\n\nmodule micro_scratches() {\n    // Tiny random scratches for realism\n    for (i = [0:17]) {\n        rotate([0, 0, i * 20 + (i % 3) * 7])\n            translate([4.5, 0, 10 + i * 3])\n                rotate([90, 0, 0])\n                    scale([0.5, 0.1, 1])\n                        sphere(0.2);\n    }\n}\n\n// Assemble chalk\nunion() {\n    chalk_body();\n    translate([0, 0, 70])\n        chalk_tip();\n    translate([0, 0, 68])\n        wear_ring();\n    micro_scratches();\n}\n\n// Optional flat spot for printing stability\ntranslate([0, 0, -0.5])\n    difference() {\n        cylinder(h = 1, r = 5, $fn = 24);\n        translate([0, -5.2, 0])\n            cube([30, 30, 2], center = true);\n    }",
    "renders": true
  },
  {
    "household_item": "pencil",
    "openscad_code": "// Realistic 3D-printable pencil ~75 mm long\n// Medium complexity, only basic OpenSCAD primitives\n\n$fn = 32;               // global smoothness\n\n// Overall dimensions\ntotal_len  = 75;\nshaft_len  = 65;\ntip_len    = 10;\ndia        = 7.5;       // pencil diameter\nlead_dia   = 2;\nferrule_w  = 5;         // metal ferrule width\nhex_wall   = 1.2;       // printable wall thickness\n\n// Hex profile module\nmodule hex_profile(r, h) {\n    // build one hexagon face\n    difference() {\n        cylinder(h = h, r = r, $fn = 6);\n        // chamfer outer edge slightly for 3D print\n        translate([0,0,-0.1])\n            cylinder(h = h + 0.2, r = r - 0.2, $fn = 6);\n    }\n}\n\n// Graphite lead\nmodule lead() {\n    color(\"gray20\")\n    translate([0, 0, -tip_len/2])\n        cylinder(h = tip_len + 3, d = lead_dia, center = true);\n}\n\n// Wooden cone tip\nmodule cone() {\n    color(\"burlywood\")\n    difference() {\n        cylinder(h = tip_len, r1 = dia/2, r2 = 0, center = false);\n        // hollow for lead\n        translate([0, 0, -1])\n            cylinder(h = tip_len + 2, r1 = lead_dia/2, r2 = 0, center = false);\n    }\n}\n\n// Main hexagonal shaft\nmodule shaft() {\n    color(\"bisque\")\n    hex_profile(dia/2, shaft_len);\n}\n\n// Metal ferrule (crimped)\nmodule ferrule() {\n    color(\"silver\")\n    difference() {\n        // main cylinder\n        translate([0, 0, shaft_len/2 + ferrule_w/2])\n            cylinder(h = ferrule_w, d = dia + 0.4, center = true);\n\n        // crimp rings\n        for (z = [shaft_len + 1, shaft_len + 3]) {\n            rotate([0, 0, 0])\n                translate([0, 0, z])\n                    cylinder(h = 0.5, d = dia + 1.2, center = true);\n            rotate([0, 0, 30])\n                translate([0, 0, z])\n                    cylinder(h = 0.5, d = dia + 1.2, center = true);\n        }\n    }\n}\n\n// Eraser\nmodule eraser() {\n    color(\"tomato\")\n    translate([0, 0, shaft_len + ferrule_w + 3])\n        cylinder(h = 6, d = dia - 0.5, center = true);\n}\n\n// Assemble pencil\nunion() {\n    shaft();\n    translate([0, 0, shaft_len/2 + tip_len/2])\n        cone();\n    ferrule();\n    eraser();\n    translate([0, 0, -tip_len - 3])\n        lead();\n}",
    "renders": true
  },
  {
    "household_item": "pen",
    "openscad_code": "// Realistic 3D-printable pen (medium complexity)\n// Overall length ~140 mm, diameter ~12 mm\n\npen_diameter = 12;\ntip_length = 15;\nbody_length = 100;\ngrip_length = 20;\ncap_length = 55;\ncap_wall = 1.5;\n\n// Main pen assembly\nmodule pen() {\n    // Tip (cone)\n    translate([0, 0, body_length + grip_length]) {\n        cylinder(h = tip_length, r1 = pen_diameter/2, r2 = 0.5, $fn = 32);\n    }\n    \n    // Grip section with rings\n    grip();\n    \n    // Main body tube\n    difference() {\n        cylinder(h = body_length, r = pen_diameter/2, $fn = 32);\n        // Ink cavity\n        translate([0, 0, -0.01])\n            cylinder(h = body_length + 0.02, r = pen_diameter/2 - 2, $fn = 32);\n    }\n    \n    // Clip on cap\n    translate([0, 0, body_length + grip_length + tip_length + 2])\n        cap();\n}\n\n// Grip with textured rings\nmodule grip() {\n    difference() {\n        cylinder(h = grip_length, r = pen_diameter/2 + 1, $fn = 32);\n        for(i = [0:4]) {\n            translate([0, 0, i * 4 + 2])\n                cylinder(h = 2, r = pen_diameter/2 - 0.5, $fn = 32);\n        }\n    }\n}\n\n// Cap with clip\nmodule cap() {\n    difference() {\n        // Main cap body\n        cylinder(h = cap_length, r = pen_diameter/2 + cap_wall, $fn = 32);\n        \n        // Hollow section\n        translate([0, 0, -0.01])\n            cylinder(h = cap_length - 2, r = pen_diameter/2 + 0.2, $fn = 32);\n    }\n    \n    // Clip\n    translate([pen_diameter/2 + cap_wall - 0.5, 0, cap_length - 10]) {\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 40, r = 1.5, $fn = 16);\n                translate([0, 0, -1])\n                    cylinder(h = 42, r = 0.5, $fn = 16);\n            }\n    }\n    \n    // Tapered end\n    translate([0, 0, cap_length]) {\n        cylinder(h = 5, r1 = pen_diameter/2 + cap_wall, r2 = 2, $fn = 32);\n    }\n}\n\n// Button mechanism at end\ntranslate([0, 0, -5]) {\n    difference() {\n        cylinder(h = 5, r = pen_diameter/2, $fn = 32);\n        translate([0, 0, 2.5])\n            sphere(r = 2, $fn = 16);\n    }\n}\n\n// Render the pen\npen();",
    "renders": true
  },
  {
    "household_item": "roller",
    "openscad_code": "// Realistic 3D printable roller (paint-style)\n// Overall size ~60 mm wide × 30 mm diameter\n\n$fn = 32;   // Smooth curves\n\n// Main body dimensions\nroller_dia = 28;\nroller_len = 52;\nwall = 1.6;          // 3D-print friendly wall thickness\nhandle_dia = 12;\nhandle_len = 35;\n\n// Grip texture parameters\nnubs = 24;\nnub_d = 1.2;\nnub_h = 0.6;\n\nmodule roller_body() {\n    difference() {\n        // Solid roller tube\n        cylinder(h = roller_len, d = roller_dia, center = true);\n        \n        // Hollow core\n        translate([0, 0, -roller_len/2 - 0.01])\n            cylinder(h = roller_len + 0.02, d = roller_dia - 2*wall, $fn = 32);\n            \n        // End-cap recess left\n        translate([-roller_len/2 + 2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 5, d = 10, $fn = 16);\n            \n        // End-cap recess right\n        translate([roller_len/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 5, d = 10, $fn = 16);\n    }\n}\n\nmodule end_caps() {\n    // Left cap\n    translate([-roller_len/2 - 1.5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 3, d = roller_dia);\n        translate([0, 0, -0.1])\n            cylinder(h = 3.2, d = roller_dia - 2*wall);\n    }\n    \n    // Right cap\n    translate([roller_len/2 + 1.5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 3, d = roller_dia);\n        translate([0, 0, -0.1])\n            cylinder(h = 3.2, d = roller_dia - 2*wall);\n    }\n}\n\nmodule handle() {\n    difference() {\n        union() {\n            // Handle shaft\n            rotate([0, 90, 0])\n                cylinder(h = handle_len, d = handle_dia, center = true);\n                \n            // Transition fillet\n            translate([-handle_len/2 - 2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 4, d1 = handle_dia, d2 = 8);\n        }\n        \n        // Hollow shaft\n        rotate([0, 90, 0])\n            translate([0, 0, -handle_len/2 - 0.01])\n                cylinder(h = handle_len + 0.02, d = handle_dia - 2*wall);\n    }\n}\n\nmodule grip_texture() {\n    // Knurled nubs along handle\n    for (i = [0 : nubs-1]) {\n        rotate([0, 0, i * 360/nubs])\n            translate([0, handle_dia/2 - nub_h/2, 0])\n                for (z = [-handle_len/2 + 8 : 4 : handle_len/2 - 8]) {\n                    translate([0, 0, z])\n                        rotate([90, 0, 0])\n                            cylinder(h = nub_h, d = nub_d, $fn = 8);\n                }\n    }\n}\n\nmodule axle_pin() {\n    // Steel pin detail\n    color(\"silver\")\n    difference() {\n        union() {\n            translate([0, 0, -roller_len/2 - 4])\n                cylinder(h = roller_len + 8, d = 4);\n            translate([0, 0, -roller_len/2 - 6])\n                cylinder(h = 2, d = 6);\n            translate([0, 0, roller_len/2 + 4])\n                cylinder(h = 2, d = 6);\n        }\n        // Chamfers\n        translate([0, 0, -roller_len/2 - 6])\n            cylinder(h = 1.5, d1 = 6, d2 = 4);\n        translate([0, 0, roller_len/2 + 4])\n            cylinder(h = 1.5, d1 = 6, d2 = 4);\n    }\n}\n\n// Assemble the roller\nunion() {\n    roller_body();\n    end_caps();\n    \n    // Handle with grip\n    translate([roller_len/2 + 8, 0, 0])\n        union() {\n            handle();\n            grip_texture();\n        }\n    \n    // Axle through roller\n    rotate([0, 90, 0])\n        axle_pin();\n}",
    "renders": true
  },
  {
    "household_item": "rag",
    "openscad_code": "// Realistic cloth rag made from overlapping \"fabric\" plates\n// Overall size ~70 mm × 50 mm × 3 mm, printable without supports\n\n// Basic fabric weave module\nmodule fabric_square(size = 7, thickness = 0.6) {\n    // Thin plate with beveled edges\n    difference() {\n        cube([size, size, thickness], center = true);\n        translate([0, 0, thickness/2 - 0.1])\n            cube([size - 0.5, size - 0.5, thickness + 0.2], center = true);\n    }\n}\n\n// Wrinkle generator\nmodule wrinkle(x, y, rot, lift) {\n    translate([x, y, lift])\n        rotate([0, 0, rot])\n            fabric_square();\n}\n\n// Main rag body\nmodule rag_body() {\n    union() {\n        // Base grid of fabric squares\n        for (i = [-4:4])\n            for (j = [-3:3]) {\n                // Slight random offset to mimic cloth\n                fabric_square();\n                translate([i*7.2 + (i%2)*1.2, j*7.2 + (j%2)*0.8, 0])\n                    fabric_square();\n            }\n        \n        // Wrinkles and folds\n        wrinkle(-15, 10, 25, 0.8);\n        wrinkle(10, -8, -30, 1.2);\n        wrinkle(0, 15, 15, 0.6);\n        wrinkle(-8, -12, -20, 1.0);\n        \n        // Corner fold\n        translate([25, 18, 1.5])\n            rotate([0, 0, 45])\n                fabric_square(10, 0.6);\n                \n        // Edge curl\n        for (t = [0:30:150]) {\n            translate([30*cos(t), 25*sin(t), 1.2])\n                rotate([0, 0, t + 90])\n                    fabric_square(5, 0.5);\n        }\n    }\n}\n\n// Thicken edges for printability\nmodule printable_rag() {\n    union() {\n        rag_body();\n        \n        // Bottom reinforcement layer\n        translate([0, 0, -1.5])\n            cube([70, 50, 0.8], center = true);\n            \n        // Edge beads\n        for (edge = [[-35,0,0], [35,0,0], [0,-25,0], [0,25,0]]) {\n            translate(edge)\n                rotate([edge[0] ? 0 : 90, 0, 0])\n                    cylinder(h = 1.0, r = 1.2, $fn = 12);\n        }\n    }\n}\n\n// Render the rag\nprintable_rag();",
    "renders": true
  },
  {
    "household_item": "broom",
    "openscad_code": "// Realistic Broom - Medium Complexity\n// Designed for 3D printing - approximately 80mm tall\n\n// Parameters\nbroom_length = 75;\nhandle_diameter = 6;\nhandle_length = 50;\nbroom_head_length = 20;\nbroom_head_width = 12;\nbroom_head_height = 8;\nbristle_length = 15;\nbristle_diameter = 1.2;\nbristle_count = 12;\nwall_thickness = 2;\n\n// Main broom assembly\nmodule broom() {\n    union() {\n        // Handle\n        translate([0, 0, handle_length/2])\n            handle();\n        \n        // Broom head\n        translate([0, 0, handle_length + broom_head_height/2])\n            broom_head();\n        \n        // Bristles\n        translate([0, 0, handle_length + broom_head_height + bristle_length/2])\n            bristles();\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    union() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [5:10:handle_length-10]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=2, d=handle_diameter+1, $fn=32);\n                    cylinder(h=3, d=handle_diameter-1, $fn=32);\n                }\n        }\n        \n        // Handle end cap\n        translate([0, 0, handle_length])\n            cylinder(h=3, d1=handle_diameter, d2=handle_diameter+2, $fn=32);\n    }\n}\n\n// Broom head with mounting bracket\nmodule broom_head() {\n    difference() {\n        union() {\n            // Main head block\n            cube([broom_head_width, broom_head_length, broom_head_height], center=true);\n            \n            // Mounting collar for handle\n            translate([0, 0, broom_head_height/2 + 1.5])\n                cylinder(h=3, d=handle_diameter+4, $fn=32);\n        }\n        \n        // Handle hole\n        translate([0, 0, broom_head_height/2 + 3])\n            cylinder(h=5, d=handle_diameter, $fn=32);\n        \n        // Weight reduction holes\n        for(x = [-5, 0, 5]) {\n            for(y = [-6, -2, 2, 6]) {\n                translate([x, y, 0])\n                    cube([2, 2, broom_head_height-1], center=true);\n            }\n        }\n    }\n}\n\n// Bristles bundle\nmodule bristles() {\n    // Bristle holder base\n    difference() {\n        cube([broom_head_width-2, broom_head_length-2, 2], center=true);\n        \n        // Taper the base\n        translate([0, 0, -1])\n            cube([broom_head_width-4, broom_head_length-4, 4], center=true);\n    }\n    \n    // Individual bristles in rows\n    for(row = [-1:1]) {\n        for(col = [-2:2]) {\n            translate([\n                col * 2.5,\n                row * 3 + 4,\n                1 + bristle_length/2\n            ]) {\n                // Each bristle is slightly offset for realism\n                rotate([rand_col(col)*5, rand_row(row)*5, 0])\n                    cylinder(h=bristle_length, d=bristle_diameter, $fn=8);\n            }\n        }\n    }\n}\n\n// Helper functions for bristle randomness\nfunction rand_col(c) = (c*73)%7 - 3.5;\nfunction rand_row(r) = (r*67)%5 - 2.5;\n\n// Render the broom\nbroom();",
    "renders": true
  },
  {
    "household_item": "mop",
    "openscad_code": "// Realistic Mop - Medium Complexity\n// Overall height 90mm, designed for 3D printing\n\n$fn = 32;\n\n// Main assembly\nmodule mop() {\n    union() {\n        // Handle assembly\n        handle();\n        \n        // Mop head assembly\n        translate([0, 0, -60]) \n            mop_head();\n        \n        // Connection between handle and mop head\n        translate([0, 0, -35])\n            connection();\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle tube\n        cylinder(h=55, d1=8, d2=6, center=false);\n        \n        // Grip rings\n        for(i = [5:10:45]) {\n            translate([0, 0, i])\n                cylinder(h=3, d=9.5, center=false);\n        }\n    }\n    \n    // Handle end cap\n    translate([0, 0, 55])\n        cylinder(h=4, d1=7, d2=9, center=false);\n}\n\n// Connection piece between handle and mop head\nmodule connection() {\n    union() {\n        // Top collar\n        cylinder(h=8, d1=12, d2=10, center=false);\n        \n        // Swivel joint\n        translate([0, 0, -5])\n            sphere(d=15);\n        \n        // Bottom plate\n        translate([0, 0, -10])\n            cylinder(h=3, d=25, center=false);\n    }\n}\n\n// Mop head with strings\nmodule mop_head() {\n    difference() {\n        // Head base\n        union() {\n            // Top disc\n            translate([0, 0, -13])\n                cylinder(h=3, d=30, center=false);\n            \n            // Bottom disc\n            cylinder(h=3, d=30, center=false);\n            \n            // Center cylinder\n            cylinder(h=10, d=10, center=false);\n        }\n        \n        // String holes\n        for(angle = [0:30:359]) {\n            rotate([0, 0, angle])\n                translate([10, 0, 0])\n                    cylinder(h=20, d=3, center=false);\n        }\n    }\n    \n    // Mop strings\n    for(angle = [15:30:359]) {\n        for(i = [0:5]) {\n            rotate([0, 0, angle + i*2])\n                translate([11, 0, -15 - i*2])\n                    string();\n        }\n    }\n}\n\n// Individual mop string\nmodule string() {\n    // Simple twisted string representation\n    union() {\n        cylinder(h=20, d=1.5, center=false);\n        \n        // Twisted detail\n        rotate([10, 0, 0])\n            cylinder(h=20, d=1.2, center=false);\n    }\n}\n\n// Generate the complete mop\nmop();",
    "renders": true
  },
  {
    "household_item": "sweeper",
    "openscad_code": "// Realistic 3D-Printable Street Sweeper\n// Approx 75 mm long, 30 mm wide, 35 mm high\n// No overhangs >45°, 1.2 mm min walls\n\n$fn = 32;\nwall = 1.2;  // wall thickness for 3D printing\n\nmodule chassis() {\n    // Main box-like chassis with slight taper\n    hull() {\n        translate([0,0,2]) cube([60,28,10], center=true);\n        translate([0,0,7]) cube([55,24,6], center=true);\n    }\n}\n\nmodule cab() {\n    // Driver cabin on top front\n    translate([-18,0,11]) hull() {\n        cube([16,22,8], center=true);\n        translate([0,0,5]) cube([14,20,6], center=true);\n    }\n}\n\nmodule exhaust() {\n    // Exhaust pipe behind cab\n    translate([-5,8,16])\n    rotate([0,15,0])\n    cylinder(h = 12, d1 = 3, d2 = 2.5, center=false);\n}\n\nmodule wheel(radius=6, width=4) {\n    // Single wheel with tread pattern\n    difference() {\n        cylinder(h = width, r = radius, center=true);\n        // Tread grooves\n        for(i=[0:3]) {\n            rotate([0,0,i*45])\n            cube([width+1, 0.8, 2], center=true);\n        }\n    }\n}\n\nmodule wheels() {\n    // Rear dual wheels\n    for(side=[-1,1]) {\n        // Front wheel\n        translate([20, side*9, -2])\n        rotate([0,90,0])\n        wheel(6, 3.5);\n        // Rear dual wheels\n        translate([-20, side*9, -2])\n        rotate([0,90,0])\n        wheel(7, 4);\n        translate([-25, side*9, -2])\n        rotate([0,90,0])\n        wheel(7, 4);\n    }\n}\n\nmodule brush(diameter=20, bristle_length=12) {\n    // Rotating cylindrical brush\n    rotate([90,0,0])\n    difference() {\n        cylinder(h = 18, d = diameter, center=true);\n        // Hollow core\n        cylinder(h = 19, d = diameter - 2*wall, center=true);\n    }\n    // Bristle stubs (simplified)\n    for(i=[0:11]) {\n        rotate([i*30,0,0])\n        translate([diameter/2 + bristle_length/2, 0, 0])\n        cube([bristle_length, 1.5, 1.5], center=true);\n    }\n}\n\nmodule sweeper_assembly() {\n    // Complete rotating brush assembly under chassis\n    translate([0,0,-6])\n    brush(20, 12);\n    // Side guards\n    difference() {\n        translate([0,0,-5])\n        cube([22,24,4], center=true);\n        translate([0,0,-5])\n        cube([20,22,4.5], center=true);\n    }\n}\n\nmodule lights() {\n    // Front headlights\n    for(side=[-1,1]) {\n        translate([28, side*7, 6])\n        sphere(d = 3);\n    }\n    // Rear taillights\n    for(side=[-1,1]) {\n        translate([-28, side*7, 6])\n        sphere(d = 2.5);\n    }\n}\n\nmodule mirrors() {\n    // Side mirrors\n    for(side=[-1,1]) {\n        translate([-15, side*12, 10])\n        rotate([0,side*20,0])\n        cube([2, 3, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    chassis();\n    cab();\n    exhaust();\n    wheels();\n    sweeper_assembly();\n    lights();\n    mirrors();\n}",
    "renders": true
  },
  {
    "household_item": "vacuum",
    "openscad_code": "// Realistic Medium-Complexity Upright Vacuum Cleaner\n// Overall height ~85 mm, footprint ~45x35 mm\n// Wall thickness 1.2 mm for reliable 3D printing\n\n// Main dimensions\nbody_w = 45;\nbody_d = 35;\nbody_h = 60;\nhead_w = 50;\nhead_d = 40;\nhead_h = 12;\nhandle_r = 5;\nhandle_h = 25;\nwheel_r = 8;\nwheel_w = 4;\nhose_r = 4;\nhose_seg = 12;\n\nmodule vacuum_body() {\n    difference() {\n        // Main body shell\n        translate([0, 0, body_h/2])\n            cube([body_w, body_d, body_h], center=true);\n        // Hollow cavity\n        translate([0, 0, body_h/2-1.2])\n            cube([body_w-2.4, body_d-2.4, body_h-2.4], center=true);\n    }\n}\n\nmodule vacuum_head() {\n    difference() {\n        // Head shell\n        translate([0, 0, head_h/2])\n            cube([head_w, head_d, head_h], center=true);\n        // Hollow cavity\n        translate([0, 0, head_h/2-1.2])\n            cube([head_w-2.4, head_d-2.4, head_h-2.4], center=true);\n        // Air intake slot\n        translate([0, head_d/2+1, head_h/2])\n            cube([head_w-10, 2, head_h-4], center=true);\n    }\n}\n\nmodule wheels() {\n    for (side = [-1, 1]) {\n        translate([side*(body_w/2+1), 0, wheel_r]) {\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(r=wheel_r, h=wheel_w, center=true);\n                    // Hollow wheel\n                    cylinder(r=wheel_r-2, h=wheel_w+0.2, center=true);\n                    // Axle hole\n                    cylinder(r=1.5, h=wheel_w+0.4, center=true);\n                }\n        }\n    }\n}\n\nmodule handle() {\n    // Vertical pole\n    translate([0, 0, body_h+handle_h/2])\n        difference() {\n            cylinder(r=handle_r, h=handle_h, center=true);\n            cylinder(r=handle_r-1.2, h=handle_h+0.2, center=true);\n        }\n    // Grip\n    translate([0, 0, body_h+handle_h])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(r=handle_r+1, h=body_w/1.5, center=true);\n                cylinder(r=handle_r-0.2, h=body_w/1.5+0.2, center=true);\n            }\n}\n\nmodule hose() {\n    // Flexible hose segments\n    for (i = [0:hose_seg-1]) {\n        rotate([i*15, 0, 0])\n            translate([0, -i*2, body_h/2+i*1.5])\n                rotate([90, 0, 0])\n                    cylinder(r=hose_r, h=2, center=true);\n    }\n    // Hose connector\n    translate([0, -hose_seg*2, body_h/2+hose_seg*1.5])\n        rotate([90, 0, 0])\n            cylinder(r=hose_r+1, h=4, center=true);\n}\n\nmodule dust_bin() {\n    // Transparent bin\n    translate([0, body_d/2+1, body_h/2])\n        difference() {\n            cube([body_w-8, 4, body_h-10], center=true);\n            cube([body_w-10.4, 4.2, body_h-12.4], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    color(\"lightgray\") vacuum_body();\n    color(\"lightgray\") translate([0, 0, body_h/2-head_h/2-1])\n        vacuum_head();\n    color(\"black\") wheels();\n    color(\"gray\") handle();\n    color(\"gray\") hose();\n    color(\"cyan\") dust_bin();\n}",
    "renders": true
  },
  {
    "household_item": "duster",
    "openscad_code": "// OpenSCAD Realistic Medium-Complexity Duster\n// Overall length ≈ 85 mm\n\nmodule handle() {\n    // Main grip tube\n    difference() {\n        cylinder(h = 50, d = 12, $fn = 32);\n        // Grip cavity to save material\n        translate([0, 0, 2])\n            cylinder(h = 46, d = 8, $fn = 32);\n    }\n    // Grip rings for traction\n    for (i = [0 : 10 : 40])\n        translate([0, 0, 5 + i])\n            cylinder(h = 2, d = 14, $fn = 32);\n    // End cap\n    translate([0, 0, 50])\n        cylinder(h = 3, d1 = 12, d2 = 8, $fn = 32);\n}\n\nmodule ferrule() {\n    // Metal band at base of feathers\n    difference() {\n        cylinder(h = 8, d = 14, $fn = 64);\n        translate([0, 0, 1])\n            cylinder(h = 7, d = 12, $fn = 64);\n    }\n}\n\nmodule feather(stemLen, baseAng, flareAng) {\n    color(\"ivory\")\n    union() {\n        // Quill shaft\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = stemLen, d1 = 0.8, d2 = 1.2, $fn = 8);\n        // Feather vane\n        translate([0, 0, stemLen])\n            rotate([90 + flareAng, 0, baseAng])\n                scale([1, 0.2, 1])\n                    sphere(d = 10, $fn = 16);\n    }\n}\n\nmodule feather_bundle() {\n    for (rot = [0 : 30 : 330])\n        rotate([0, 0, rot])\n            translate([0, 5.5, 4])\n                feather(30, 0, 15);\n    // Center fuller feather\n    translate([0, 0, 4])\n        feather(35, 0, 10);\n    // Side fuller feathers\n    for (side = [-1, 1])\n        translate([side * 3, 0, 4])\n            rotate([0, side * 10, 0])\n                feather(32, side * 15, 10);\n}\n\nmodule duster() {\n    union() {\n        handle();\n        translate([0, 0, 50])\n            ferrule();\n        translate([0, 0, 58])\n            feather_bundle();\n    }\n}\n\nduster();",
    "renders": true
  },
  {
    "household_item": "bucket",
    "openscad_code": "// Realistic 3D printable bucket – medium complexity (≈ 120 lines)\n\n// Overall dimensions\nbucket_height = 75;        // mm\nbucket_top_d = 80;         // mm\nbucket_bottom_d = 65;      // mm\nwall_thickness = 2.5;      // mm\nhandle_thickness = 4;      // mm\n\n// Tapered cone shell\nmodule bucket_shell(h, top_r, bottom_r, thick) {\n    difference() {\n        cylinder(h = h, r1 = top_r, r2 = bottom_r, $fn = 120);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, r1 = top_r - thick, r2 = bottom_r - thick, $fn = 120);\n    }\n}\n\n// Reinforcing rim on top\nmodule top_rim(top_r, thick) {\n    rim_h = 3;\n    difference() {\n        cylinder(h = rim_h, r1 = top_r + 1, r2 = top_r + 1.5, $fn = 120);\n        translate([0, 0, -0.1])\n            cylinder(h = rim_h + 0.2, r1 = top_r, r2 = top_r + 0.5, $fn = 120);\n    }\n}\n\n// Bottom disk with slight inset\nmodule bottom_disk(bottom_r, thick) {\n    inset = 1;\n    difference() {\n        cylinder(h = thick, r = bottom_r, $fn = 120);\n        translate([0, 0, -0.1])\n            cylinder(h = thick + 0.2, r = bottom_r - inset, $fn = 120);\n    }\n}\n\n// Handle arch\nmodule handle_arc(top_r) {\n    width = top_r * 1.7;\n    radius = top_r * 0.9;\n    sweep_angle = 180;\n    steps = 30;\n\n    for (i = [0 : steps]) {\n        angle = i * sweep_angle / steps;\n        x = -width / 2 + width * (angle / sweep_angle);\n        y = sin(angle) * radius;\n        z = bucket_height + cos(angle) * radius;\n        translate([x, 0, z])\n            sphere(d = handle_thickness, $fn = 12);\n    }\n}\n\n// Handle pivot lugs\nmodule handle_lugs(top_r) {\n    lug_w = 6;\n    lug_h = 8;\n    lug_d = 4;\n    offset_x = top_r * 0.9;\n\n    difference() {\n        union() {\n            // left lug\n            translate([-offset_x, 0, bucket_height - lug_h])\n                cube([lug_w, lug_d, lug_h], center = true);\n            // right lug\n            translate([offset_x, 0, bucket_height - lug_h])\n                cube([lug_w, lug_d, lug_h], center = true);\n        }\n        // pivot holes\n        translate([-offset_x, lug_d / 2 + 0.1, bucket_height - lug_h / 2])\n            rotate([90, 0, 0])\n                cylinder(h = lug_w + 0.2, r = handle_thickness / 2, $fn = 20);\n        translate([offset_x, lug_d / 2 + 0.1, bucket_height - lug_h / 2])\n            rotate([90, 0, 0])\n                cylinder(h = lug_w + 0.2, r = handle_thickness / 2, $fn = 20);\n    }\n}\n\n// Small drainage spout\nmodule spout(top_r) {\n    spout_len = 10;\n    spout_w = 12;\n    spout_h = 6;\n    translate([top_r, 0, bucket_height - spout_h / 2])\n        rotate([0, -30, 0])\n            cube([spout_len, spout_w, spout_h], center = true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    bucket_shell(bucket_height, bucket_top_d / 2, bucket_bottom_d / 2, wall_thickness);\n    translate([0, 0, bucket_height])\n        top_rim(bucket_top_d / 2, wall_thickness);\n    translate([0, 0, 0])\n        bottom_disk(bucket_bottom_d / 2, wall_thickness);\n\n    // Handle parts\n    handle_arc(bucket_top_d / 2);\n    handle_lugs(bucket_top_d / 2);\n\n    // Spout\n    spout(bucket_top_d / 2);\n}",
    "renders": true
  },
  {
    "household_item": "pail",
    "openscad_code": "// Realistic 3D-printable pail\n// Overall height ~70 mm, diameter ~60 mm\n\n$fn = 50;  // Smooth curves\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main pail body\nmodule pail_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 60, d1 = 60, d2 = 55, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h = 60 - wall, d1 = 60 - wall*2, d2 = 55 - wall*2, center = false);\n        \n        // Remove bottom to create open pail\n        translate([0, 0, -1])\n            cube([100, 100, 2], center = true);\n    }\n}\n\n// Reinforcement rim at top\nmodule top_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 59])\n            cylinder(h = 4, d = 64);\n        \n        // Inner cutout\n        translate([0, 0, 59])\n            cylinder(h = 4, d = 58);\n    }\n}\n\n// Bottom reinforcement\nmodule bottom_rim() {\n    difference() {\n        // Outer rim\n        cylinder(h = 3, d = 63);\n        \n        // Inner cutout\n        cylinder(h = 3, d = 61);\n    }\n}\n\n// Handle mounting lugs\nmodule lugs() {\n    for (side = [-1, 1]) {\n        translate([side * 30, 0, 50]) {\n            difference() {\n                // Mounting block\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 10);\n                \n                // Handle hole\n                rotate([0, 90, 0])\n                    cylinder(h = 10, d = 4);\n            }\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    // Handle wire\n    rotate([0, 90, 0])\n        difference() {\n            // Main handle curve\n            translate([0, 0, 35])\n                rotate_extrude(angle = 180)\n                    translate([35, 0, 0])\n                        circle(r = 2);\n            \n            // Cut ends to fit lugs\n            translate([0, 0, -5])\n                cube([100, 100, 10], center = true);\n        }\n    \n    // Handle grip\n    translate([0, 0, 35])\n        rotate([0, 90, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 8);\n}\n\n// Assembly\nunion() {\n    pail_body();\n    top_rim();\n    bottom_rim();\n    lugs();\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "basin",
    "openscad_code": "// Realistic 3D-printable basin (washbasin / sink)\n// Medium complexity – printable without supports\n\n// Overall dimensions\nbasin_width = 80;\nbasin_depth = 60;\nbasin_height = 30;\nwall_thickness = 2.2;\n\n// Drain hole\ndrain_d = 6;\n\nmodule basin_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, basin_height/2])\n            cube([basin_width, basin_depth, basin_height], center=true);\n\n        // Hollow inside\n        translate([0, 0, basin_height/2 + wall_thickness])\n            cube([basin_width - 2*wall_thickness,\n                  basin_depth - 2*wall_thickness,\n                  basin_height], center=true);\n    }\n}\n\n// Curved inner bowl\nmodule inner_bowl() {\n    difference() {\n        // Ellipsoid bowl\n        scale([1, 0.8, 0.5])\n            translate([0, 0, basin_height - wall_thickness])\n                sphere(d=basin_width - 2*wall_thickness, $fn=60);\n\n        // Drain hole\n        translate([0, 0, 0])\n            cylinder(d=drain_d, h=basin_height, $fn=32);\n    }\n}\n\n// Overflow slots on back wall\nmodule overflow_slots() {\n    slot_w = 10;\n    slot_h = 1.5;\n    slot_d = 3;\n    translate([0, basin_depth/2 - wall_thickness - slot_d/2, basin_height/2 - 4])\n        for(i=[-1, 0, 1])\n            translate([i*slot_w*1.2, 0, 0])\n                cube([slot_w, slot_d, slot_h], center=true);\n}\n\n// Faucet mounting boss\nmodule faucet_boss() {\n    boss_d = 12;\n    boss_h = 8;\n    translate([0, -basin_depth/2 + wall_thickness + boss_h/2, basin_height - boss_h/2])\n        cylinder(d=boss_d, h=boss_h, $fn=32);\n}\n\n// Drain collar (thin cylinder)\nmodule drain_collar() {\n    collar_d = drain_d + 4;\n    collar_h = 2;\n    translate([0, 0, 0])\n        cylinder(d=collar_d, h=collar_h, $fn=32);\n}\n\n// Assembly\nunion() {\n    basin_body();\n    inner_bowl();\n    overflow_slots();\n    faucet_boss();\n    drain_collar();\n}",
    "renders": true
  },
  {
    "household_item": "tub",
    "openscad_code": "// Realistic-style medium-complexity 3D-printable bathtub\n// Outer shell\nmodule outer_shell() {\n    difference() {\n        // Main tub body\n        hull() {\n            translate([0, 0, 8])\n                cube([100, 45, 35], center = true);\n            translate([0, 0, 0])\n                cube([90, 40, 16], center = true);\n        }\n\n        // Hollow interior\n        translate([0, 0, 15])\n            cube([86, 36, 40], center = true);\n    }\n}\n\n// Rim lip\nmodule rim() {\n    difference() {\n        // Upper lip\n        translate([0, 0, 25])\n            cube([104, 49, 6], center = true);\n        // Cut out inner edge\n        translate([0, 0, 25])\n            cube([90, 40, 8], center = true);\n    }\n}\n\n// Drain hole with fitting\nmodule drain() {\n    difference() {\n        // Drain plate\n        cylinder(h = 2, d = 12, $fn = 30);\n        // Through hole\n        translate([0, 0, -1])\n            cylinder(h = 4, d = 8, $fn = 30);\n    }\n}\n\n// Faucet base\nmodule faucet_base() {\n    translate([0, 20, 0])\n        difference() {\n            // Base plate\n            cube([20, 4, 8], center = true);\n            // Screw holes\n            for (x = [-6, 6]) {\n                translate([x, 0, 0])\n                    cylinder(h = 5, d = 2.5, $fn = 16);\n            }\n        }\n}\n\n// Faucet spout\nmodule spout() {\n    translate([0, 22, 4])\n        rotate([0, 90, 0])\n            hull() {\n                cylinder(h = 3, d = 6, $fn = 16);\n                translate([0, 0, 15])\n                    cylinder(h = 3, d = 4, $fn = 16);\n            }\n}\n\n// Hot and cold knobs\nmodule knobs() {\n    for (x = [-8, 8]) {\n        translate([x, 22, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    // Knob cylinder\n                    cylinder(h = 8, d = 10, $fn = 30);\n                    // Knob top indent\n                    translate([0, 0, 9])\n                        cylinder(h = 2, d = 6, $fn = 30);\n                }\n    }\n}\n\n// Feet\nmodule feet() {\n    for (x = [-40, 40])\n    for (y = [-18, 18]) {\n        translate([x, y, -6])\n            difference() {\n                // Foot cone\n                cylinder(h = 6, d1 = 8, d2 = 4, $fn = 30);\n                // Leveling pad\n                translate([0, 0, -1])\n                    cylinder(h = 2, d = 8, $fn = 30);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    outer_shell();\n    rim();\n    translate([0, 0, 8])\n        drain();\n    faucet_base();\n    spout();\n    knobs();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "tap",
    "openscad_code": "// Realistic 3D-printable tap – medium complexity\n// Overall height ≈ 75 mm, base ≈ 40 mm wide\n\n$fn = 36;               // Smooth curves\nwall = 2.0;             // Minimum printable wall thickness\ntap_h = 75;\nbase_d = 40;\nspout_len = 30;\nspout_d = 12;\n\n/* ---------- Base cylinder with chamfer ---------- */\nmodule base() {\n    difference() {\n        union() {\n            cylinder(h = 12, d = base_d, center = false);\n            translate([0, 0, 12])\n                cylinder(h = 3, d1 = base_d, d2 = base_d - 6, center = false);\n        }\n        // Water inlet hole\n        translate([0, 0, -1])\n            cylinder(h = 14, d = 10, center = false);\n    }\n}\n\n/* ---------- Vertical body with hex section ---------- */\nmodule body() {\n    union() {\n        // Lower round part\n        cylinder(h = 20, d = 22, center = false);\n        // Hexagonal mid-section for wrench grip\n        translate([0, 0, 20])\n            cylinder(h = 15, d = 22, $fn = 6, center = false);\n        // Upper round neck\n        translate([0, 0, 35])\n            cylinder(h = 10, d = 18, center = false);\n    }\n}\n\n/* ---------- Handle lever ---------- */\nmodule handle() {\n    // Lever arm\n    translate([0, 0, 45])\n        rotate([90, 0, 0])\n            cylinder(h = 35, d = 8, center = false);\n    // Grip knob\n    translate([0, 35, 45])\n        rotate([90, 0, 0])\n            sphere(d = 12);\n    // Internal hole for pin\n    translate([0, 0, 45])\n        rotate([90, 0, 0])\n            cylinder(h = 40, d = 4, center = false);\n}\n\n/* ---------- Spout ---------- */\nmodule spout() {\n    // Main curved pipe\n    hull() {\n        translate([0, 0, 40])\n            rotate([0, 90, 0])\n                cylinder(h = wall, d = spout_d, center = true);\n        translate([spout_len, 0, 30])\n            rotate([0, 90, 0])\n                cylinder(h = wall, d = spout_d - 4, center = true);\n    }\n    // Remove inner hole\n    difference() {\n        children();\n        hull() {\n            translate([0, 0, 40])\n                rotate([0, 90, 0])\n                    cylinder(h = wall + 2, d = spout_d - 2*wall, center = true);\n            translate([spout_len, 0, 30])\n                rotate([0, 90, 0])\n                    cylinder(h = wall + 2, d = spout_d - 2*wall - 4, center = true);\n        }\n    }\n}\n\n/* ---------- Assembly ---------- */\nunion() {\n    base();\n    translate([0, 0, 12])\n        body();\n    translate([0, 0, 45])\n        handle();\n    spout() children();\n}",
    "renders": true
  },
  {
    "household_item": "valve",
    "openscad_code": "// Realistic Ball Valve - Medium Complexity\n// 3D printable, ~60mm long\n\n$fn = 30;\n\n// Main valve body\nmodule valve_body() {\n    // Central cylinder\n    cylinder(h = 40, d = 30, center = true);\n    \n    // Inlet pipe\n    translate([-20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 20, center = true);\n    \n    // Outlet pipe\n    translate([20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 20, center = true);\n    \n    // Flanges\n    for (x = [-30, 30]) {\n        translate([x, 0, 0])\n            cylinder(h = 3, d = 35, center = true);\n    }\n    \n    // Flange bolt holes\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 40, d = 30, center = true);\n        for (x = [-30, 30]) {\n            for (angle = [0:60:359]) {\n                rotate([0, 0, angle])\n                    translate([x, 12.5, 0])\n                        cylinder(h = 5, d = 4, center = true);\n            }\n        }\n    }\n}\n\n// Ball core\nmodule ball_core() {\n    difference() {\n        sphere(d = 22);\n        // Flow channel\n        rotate([0, 90, 0])\n            cylinder(h = 25, d = 15, center = true);\n    }\n}\n\n// Valve handle\nmodule valve_handle() {\n    // Stem\n    cylinder(h = 15, d = 10);\n    \n    // Handle lever\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n            cube([50, 8, 3], center = true);\n    \n    // Handle grip\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n            translate([25, 0, 0])\n                cylinder(h = 12, d = 12, center = true);\n    \n    // Position indicator\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n            translate([-20, 0, 2])\n                cube([8, 6, 1], center = true);\n}\n\n// Assembly\nunion() {\n    // Main valve body\n    valve_body();\n    \n    // Ball inside\n    translate([0, 0, 0])\n        ball_core();\n    \n    // Stem and handle\n    difference() {\n        translate([0, 0, 25])\n            valve_handle();\n        // Stem hole\n        translate([0, 0, 20])\n            cylinder(h = 30, d = 8, center = true);\n    }\n    \n    // Sealing rings\n    for (z = [-5, 5]) {\n        translate([0, 0, z])\n            cylinder(h = 2, d = 24);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pipe",
    "openscad_code": "// Realistic 3D Printable Pipe - Medium Complexity\n// Overall dimensions: ~80mm length, ~30mm height\n\n// Pipe bowl parameters\nbowl_radius = 15;\nbowl_wall = 2.5;\nbowl_height = 25;\nchamber_radius = 10;\nchamber_depth = 20;\n\n// Stem parameters\nstem_length = 60;\nstem_outer = 8;\nstem_inner = 4;\nstem_angle = 12;\n\n// Filter and mouthpiece\nfilter_length = 12;\nmouthpiece_length = 15;\nmouthpiece_taper = 0.8;\n\n// Detail features\nband_width = 5;\nband_offset = 35;\ncarb_hole_radius = 3;\ncarb_position = 20;\n\nmodule pipe_bowl() {\n    // Outer bowl\n    difference() {\n        cylinder(h=bowl_height, r=bowl_radius, $fn=64);\n        translate([0, 0, bowl_wall])\n            cylinder(h=bowl_height, r=bowl_radius-bowl_wall, $fn=64);\n    }\n    \n    // Chamber bowl\n    translate([0, 0, bowl_wall])\n        cylinder(h=chamber_depth, r=chamber_radius, $fn=64);\n    \n    // Bottom rounding\n    translate([0, 0, bowl_height-bowl_wall])\n        sphere(r=bowl_radius-bowl_wall, $fn=64);\n}\n\nmodule pipe_stem() {\n    // Main stem tube\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7, 0, bowl_height*0.3])\n            difference() {\n                cylinder(h=stem_length, r=stem_outer, $fn=32);\n                translate([0, 0, -0.1])\n                    cylinder(h=stem_length+0.2, r=stem_inner, $fn=32);\n            }\n    \n    // Filter chamber\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7+stem_length-filter_length, 0, bowl_height*0.3])\n            difference() {\n                cylinder(h=filter_length, r=stem_outer*1.1, $fn=32);\n                translate([0, 0, -0.1])\n                    cylinder(h=filter_length+0.2, r=stem_inner*1.05, $fn=32);\n            }\n    \n    // Mouthpiece taper\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7+stem_length, 0, bowl_height*0.3])\n            difference() {\n                cylinder(h=mouthpiece_length, r1=stem_outer, r2=stem_outer*mouthpiece_taper, $fn=32);\n                translate([0, 0, -0.1])\n                    cylinder(h=mouthpiece_length+0.2, r1=stem_inner, r2=stem_inner*0.9, $fn=32);\n            }\n}\n\nmodule decorative_band() {\n    // Metal band decoration\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7+band_offset, 0, bowl_height*0.3])\n            difference() {\n                cylinder(h=band_width, r=stem_outer*1.15, $fn=32);\n                cylinder(h=band_width+0.2, r=stem_outer*1.05, $fn=32);\n            }\n}\n\nmodule carb_hole() {\n    // Carburetor hole\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7+carb_position, 0, bowl_height*0.3])\n            rotate([90, 0, 0])\n                cylinder(h=stem_outer*2, r=carb_hole_radius, $fn=16);\n}\n\nmodule bowl_rim() {\n    // Thickened rim for durability\n    difference() {\n        cylinder(h=bowl_wall*1.5, r=bowl_radius+1, $fn=64);\n        translate([0, 0, -0.1])\n            cylinder(h=bowl_wall*1.7, r=bowl_radius-bowl_wall, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    pipe_bowl();\n    bowl_rim();\n    pipe_stem();\n    decorative_band();\n}\n\ndifference() {\n    union() {\n        pipe_bowl();\n        bowl_rim();\n        pipe_stem();\n        decorative_band();\n    }\n    carb_hole();\n}",
    "renders": true
  },
  {
    "household_item": "drain",
    "openscad_code": "// Realistic style drain grate with medium complexity\n// Overall dimensions: 80mm x 80mm x 15mm\n\n// Grate base plate\nmodule grate_base() {\n    difference() {\n        // Main base plate\n        cube([80, 80, 5], center=true);\n        \n        // Center hole for water flow\n        cylinder(h=6, d=60, center=true);\n        \n        // Mounting holes at corners\n        for (x = [-35, 35])\n            for (y = [-35, 35])\n                translate([x, y, 0])\n                    cylinder(h=6, d=5, center=true);\n    }\n}\n\n// Drain slats with rounded edges\nmodule grate_slats() {\n    // Longitudinal slats\n    for (y = [-30, -20, -10, 0, 10, 20, 30]) {\n        translate([0, y, 0]) {\n            difference() {\n                // Main slat body\n                cube([70, 4, 8], center=true);\n                \n                // Rounded top edges\n                translate([0, 0, 4])\n                    minkowski() {\n                        cube([70, 4, 0.1], center=true);\n                        cylinder(h=0.1, d=4, center=true);\n                    }\n            }\n        }\n    }\n    \n    // Transverse support ribs\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, -1]) {\n            cube([4, 66, 6], center=true);\n        }\n    }\n}\n\n// Raised rim around grate\nmodule grate_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 2.5])\n            cube([80, 80, 5], center=true);\n        \n        // Inner cutout\n        translate([0, 0, 2])\n            cube([76, 76, 6], center=true);\n    }\n}\n\n// Drain pipe connection\nmodule drain_pipe() {\n    translate([0, 0, -12.5]) {\n        difference() {\n            // Main pipe\n            cylinder(h=15, d=55, center=true);\n            \n            // Inner bore\n            cylinder(h=16, d=50, center=true);\n        }\n        \n        // Reinforcement rings\n        for (z = [-5, -10]) {\n            translate([0, 0, z])\n                cylinder(h=2, d=58, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    grate_base();\n    grate_slats();\n    grate_rim();\n    drain_pipe();\n}",
    "renders": true
  },
  {
    "household_item": "vent",
    "openscad_code": "// Realistic Vent - Medium Complexity\n// Dimensions: 80mm x 60mm x 12mm overall\n\n// Main parameters\nwall_thickness = 2;\nframe_width = 80;\nframe_height = 60;\nframe_depth = 12;\nvent_width = 76;\nvent_height = 56;\nvent_depth = 8;\nslat_thickness = 1.5;\nslat_spacing = 4;\nslat_count = 12;\nmount_hole_diameter = 4;\nmount_hole_inset = 5;\n\n// Frame with rounded edges\nmodule frame() {\n    difference() {\n        // Main frame body\n        union() {\n            // Outer frame\n            translate([0, 0, frame_depth/2])\n                cube([frame_width, frame_height, frame_depth], center=true);\n            \n            // Rounded front edges\n            for (x = [-frame_width/2 + wall_thickness, frame_width/2 - wall_thickness])\n            for (y = [-frame_height/2 + wall_thickness, frame_height/2 - wall_thickness])\n                translate([x, y, frame_depth - wall_thickness])\n                    sphere(wall_thickness, $fn=16);\n        }\n        \n        // Inner cutout\n        translate([0, 0, frame_depth/2 + 0.1])\n            cube([vent_width, vent_height, frame_depth + 0.2], center=true);\n        \n        // Mounting holes (4 corners)\n        for (x = [-frame_width/2 + mount_hole_inset, frame_width/2 - mount_hole_inset])\n        for (y = [-frame_height/2 + mount_hole_inset, frame_height/2 - mount_hole_inset])\n            translate([x, y, 0])\n                cylinder(d=mount_hole_diameter, h=frame_depth*2, $fn=16);\n    }\n}\n\n// Angled slats for air direction\nmodule slats() {\n    // Calculate slat angle for proper airflow\n    angle = 30;\n    slat_length = vent_width / cos(angle);\n    \n    for (i = [0:slat_count-1]) {\n        y_pos = -vent_height/2 + (i+0.5)*slat_spacing;\n        translate([0, y_pos, vent_depth/2])\n            rotate([0, -angle, 0])\n                translate([0, 0, -slat_thickness/2])\n                    cube([slat_length, slat_thickness, vent_depth], center=true);\n    }\n}\n\n// Back mesh grid for insect protection\nmodule mesh() {\n    mesh_size = 2;\n    wire_thickness = 0.8;\n    \n    // Horizontal wires\n    for (y = [-vent_height/2 + mesh_size : mesh_size : vent_height/2 - mesh_size]) {\n        translate([0, y, vent_depth - wire_thickness/2])\n            cube([vent_width, wire_thickness, wire_thickness], center=true);\n    }\n    \n    // Vertical wires\n    for (x = [-vent_width/2 + mesh_size : mesh_size : vent_width/2 - mesh_size]) {\n        translate([x, 0, vent_depth - wire_thickness/2])\n            cube([wire_thickness, vent_height, wire_thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame\n    frame();\n    \n    // Front slats\n    translate([0, 0, frame_depth/2 - vent_depth/2])\n        slats();\n    \n    // Back mesh\n    translate([0, 0, frame_depth/2 - vent_depth/2])\n        mesh();\n}",
    "renders": true
  },
  {
    "household_item": "duct",
    "openscad_code": "// Realistic 3D-printable HVAC duct segment (100 mm long, 60 mm dia)\n// Medium complexity – functional flanges, reinforcing ribs, gasket groove\n\n$fn = 36;      // Global circle resolution\n\n// Main dimensions\nduct_length = 100;\nduct_od     = 60;\nduct_wall   = 2.5;\nflange_thk  = 4;\nflange_lip  = 3;\nrib_thk     = 2;\nrib_height  = 4;\n\n// Derived values\nduct_id = duct_od - 2*duct_wall;\nribs = 4;\n\n/* ------------------------------------------------------------- */\nmodule duct_body()\n{\n    difference()\n    {\n        // Outer cylinder\n        cylinder(h = duct_length, d = duct_od);\n\n        // Bore inner passage\n        translate([0,0,-0.1])\n            cylinder(h = duct_length + 0.2, d = duct_id);\n    }\n}\n\n/* ------------------------------------------------------------- */\nmodule end_flange(z_pos)\n{\n    translate([0,0,z_pos])\n    difference()\n    {\n        // Basic flange disk\n        cylinder(h = flange_thk, d = duct_od + 2*flange_lip);\n\n        // Central bore\n        translate([0,0,-0.1])\n            cylinder(h = flange_thk + 0.2, d = duct_od);\n\n        // Gasket groove\n        translate([0,0,flange_thk-1.5])\n            cylinder(h = 1.5, d = duct_od + 2*flange_lip - 4);\n    }\n}\n\n/* ------------------------------------------------------------- */\nmodule reinforcing_ribs()\n{\n    step = duct_length / (ribs + 1);\n    for (i=[1:ribs])\n    {\n        translate([0,0,i*step])\n        rotate([0,90,0])\n        difference()\n        {\n            // Rib body\n            cube([duct_od, duct_od, rib_thk], center=true);\n\n            // Cut center hole\n            rotate([0,90,0])\n                cylinder(h = duct_od + 0.2, d = duct_id + 2);\n        }\n    }\n}\n\n/* ------------------------------------------------------------- */\n// Assembly\nunion()\n{\n    duct_body();\n    end_flange(0);\n    end_flange(duct_length - flange_thk);\n    reinforcing_ribs();\n}",
    "renders": true
  },
  {
    "household_item": "flue",
    "openscad_code": "// Realistic Flue - 3D Printable\n// Medium complexity with functional details\n\n// Parameters\nwall = 2;           // Wall thickness (mm)\nd_in = 30;          // Inner flue diameter (mm)\nh_total = 80;       // Total height (mm)\nh_collar = 10;      // Collar height (mm)\nw_bracket = 35;     // Mounting bracket width (mm)\nbolt_d = 3;         // Bolt hole diameter (mm)\nbolt_spacing = 25;  // Bolt spacing (mm)\n\n// Main flue pipe\nmodule flue_pipe() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=h_total-h_collar, d=d_in+2*wall, $fn=48);\n        \n        // Inner hollow\n        translate([0,0,-0.1])\n            cylinder(h=h_total-h_collar+0.2, d=d_in, $fn=48);\n    }\n}\n\n// Mounting collar with bolt holes\nmodule mounting_collar() {\n    difference() {\n        // Collar base\n        cylinder(h=h_collar, d=d_in+2*wall+6, $fn=48);\n        \n        // Inner hole\n        translate([0,0,-0.1])\n            cylinder(h=h_collar+0.2, d=d_in, $fn=48);\n        \n        // Bolt holes\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([bolt_spacing/2, 0, h_collar/2])\n                    rotate([90,0,0])\n                        cylinder(h=10, d=bolt_d, $fn=12);\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([0, (d_in+wall)/2, (h_total-h_collar)/2])\n                cube([wall*2, wall*3, h_total-h_collar], center=true);\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    difference() {\n        // Main bracket body\n        translate([0, -(d_in+wall)/2-5, h_total-h_collar-10])\n            cube([w_bracket, 10, 20], center=true);\n        \n        // Mounting slots\n        translate([0, -(d_in+wall)/2-10, h_total-h_collar-5])\n            cube([w_bracket-10, 10, 5], center=true);\n        \n        // Screw holes\n        translate([w_bracket/2-7, -(d_in+wall)/2-10, h_total-h_collar-2.5])\n            cylinder(h=10, d=bolt_d+1, $fn=12);\n        translate([-w_bracket/2+7, -(d_in+wall)/2-10, h_total-h_collar-2.5])\n            cylinder(h=10, d=bolt_d+1, $fn=12);\n    }\n}\n\n// Assemble the flue\nunion() {\n    // Main components\n    flue_pipe();\n    translate([0,0,h_total-h_collar])\n        mounting_collar();\n    \n    // Structural elements\n    reinforcement_ribs();\n    \n    // Mounting hardware\n    mounting_bracket();\n    \n    // Drainage hole\n    translate([0, d_in/2+wall/2, 2])\n        rotate([90,0,0])\n            cylinder(h=wall+1, d=wall, $fn=12);\n}",
    "renders": true
  },
  {
    "household_item": "chimney",
    "openscad_code": "// Realistic medium-complexity 3D-printable chimney\n// Approx. 75 mm tall, 45 mm wide, printable without supports\n\n$fn = 36; // Smooth curves\n\nmodule chimney_stack(h = 60, w = 30, d = 25, wall = 2) {\n    // Outer shell\n    difference() {\n        cube([w, d, h], center = true);\n        translate([0, 0, 1]) // Shift inner cavity slightly up\n            cube([w - 2*wall, d - 2*wall, h + 2], center = true);\n    }\n}\n\nmodule brick_texture(h = 60, w = 30, d = 25) {\n    // Realistic brick texture around the stack\n    brick_w = 4;\n    brick_h = 2;\n    offset = brick_w / 2;\n    for (z = [-h/2 + brick_h : brick_h*2 : h/2 - brick_h]) {\n        for (y = [-d/2 : brick_h*2 : d/2]) {\n            translate([0, y, z])\n                for (x = [-w/2 : brick_w : w/2]) {\n                    translate([x + ((z/brick_h) % 2 ? offset : 0), 0, 0])\n                        cube([brick_w*0.9, 0.5, brick_h*0.9], center = true);\n                }\n        }\n    }\n}\n\nmodule chimney_cap(w = 30, d = 25, overhang = 4) {\n    // Sloped cap with drip edge\n    difference() {\n        // Main cap body\n        translate([0, 0, 0])\n            rotate([0, 45, 0])\n            scale([1, 1.5, 1])\n            cylinder(h = 5, r1 = w/2 + overhang, r2 = w/2 + overhang - 2, center = true);\n        \n        // Hole for smoke\n        translate([0, 0, 0])\n            rotate([0, 45, 0])\n            scale([1, 1.5, 1])\n            cylinder(h = 6, r1 = w/2 - 4, r2 = w/2 - 4, center = true);\n    }\n}\n\nmodule flue_opening(w = 30, d = 25, h = 60) {\n    // Top opening with rounded edges\n    translate([0, 0, h/2 - 1])\n        difference() {\n            cylinder(h = 2, r = w/2 - 3, center = true);\n            cylinder(h = 3, r = w/2 - 5, center = true);\n        }\n}\n\nmodule base_plate(w = 30, d = 25) {\n    // Wider base for stability and adhesion\n    translate([0, 0, -1])\n        cube([w + 8, d + 8, 2], center = true);\n}\n\nmodule chimney() {\n    union() {\n        // Base plate\n        base_plate();\n        \n        // Main stack\n        translate([0, 0, 30])\n            chimney_stack();\n        \n        // Brick texture on front and back\n        translate([15.5, 0, 30])\n            brick_texture();\n        translate([-15.5, 0, 30])\n            mirror([1, 0, 0])\n                brick_texture();\n        \n        // Brick texture on sides\n        rotate([0, 0, 90])\n            translate([12.5, 0, 30])\n                brick_texture();\n        rotate([0, 0, 90])\n            translate([-12.5, 0, 30])\n                mirror([1, 0, 0])\n                    brick_texture();\n        \n        // Top cap\n        translate([0, 0, 62])\n            chimney_cap();\n        \n        // Flue opening detail\n        translate([0, 0, 0])\n            flue_opening();\n    }\n}\n\n// Render the chimney centered at origin\nchimney();",
    "renders": true
  },
  {
    "household_item": "hearth",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nhearth_w = 70;\nhearth_d = 50;\nhearth_h = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule hearth_base() {\n    // Firebox floor\n    difference() {\n        translate([0, 0, wall/2])\n            cube([hearth_w, hearth_d, wall], center=true);\n        translate([0, 0, wall/2 - 0.1])\n            cube([hearth_w - wall*2, hearth_d - wall*2, wall + 0.2], center=true);\n    }\n}\n\nmodule hearth_back() {\n    // Rear wall with slight slope\n    difference() {\n        translate([0, -hearth_d/2 + wall/2, hearth_h/2])\n            cube([hearth_w, wall, hearth_h], center=true);\n        translate([0, -hearth_d/2 + wall - 0.1, hearth_h/2])\n            cube([hearth_w - wall*2, wall + 0.2, hearth_h - wall], center=true);\n    }\n}\n\nmodule hearth_sides() {\n    // Left and right walls\n    for (x = [-hearth_w/2 + wall/2, hearth_w/2 - wall/2]) {\n        difference() {\n            translate([x, 0, hearth_h/2])\n                cube([wall, hearth_d, hearth_h], center=true);\n            translate([x, wall, hearth_h/2])\n                cube([wall + 0.2, hearth_d - wall*2, hearth_h - wall], center=true);\n        }\n    }\n}\n\nmodule hearth_arch() {\n    // Decorative curved arch above firebox\n    arch_h = 15;\n    arch_w = 50;\n    \n    difference() {\n        // Main arch body\n        translate([0, -hearth_d/2 + wall + 1, hearth_h - arch_h/2])\n            cube([arch_w, wall + 2, arch_h], center=true);\n        \n        // Carved arch curve\n        for (i = [0:5:arch_h]) {\n            translate([0, -hearth_d/2 + wall, hearth_h - i])\n                cylinder(h=wall + 2, r=arch_w/2 - i*0.8, $fn=32, center=true);\n        }\n    }\n}\n\nmodule firebox_interior() {\n    // Interior cavity for fire\n    translate([0, 0, wall])\n        cube([hearth_w - wall*2, hearth_d - wall*2, hearth_h - wall], center=true);\n}\n\nmodule logs() {\n    // Simple stack of logs in firebox\n    log_w = 4;\n    log_h = 3;\n    log_l = 20;\n    \n    for (i = [0:2]) {\n        rotate([0, 0, i*15])\n            translate([i*6 - 6, -hearth_d/4, wall + log_h/2])\n                cube([log_l, log_w, log_h], center=true);\n    }\n}\n\nmodule hearth_grate() {\n    // Metal grate above logs\n    grate_h = 3;\n    bar_w = 1.5;\n    bar_count = 5;\n    \n    for (i = [0:bar_count-1]) {\n        translate([-hearth_w/3 + i*(hearth_w/1.5)/(bar_count-1), 0, wall + 6])\n            cube([bar_w, hearth_d - wall*2, grate_h], center=true);\n    }\n    \n    // Cross bars\n    for (i = [0:2]) {\n        translate([0, -hearth_d/3 + i*hearth_d/3, wall + 6])\n            cube([hearth_w - wall*4, bar_w, grate_h], center=true);\n    }\n}\n\nmodule hearth_feet() {\n    // Four sturdy feet\n    foot_w = 8;\n    foot_h = 5;\n    \n    for (x = [-hearth_w/2 + foot_w/2, hearth_w/2 - foot_w/2])\n    for (y = [-hearth_d/2 + foot_w/2, hearth_d/2 - foot_w/2]) {\n        translate([x, y, -foot_h/2])\n            cube([foot_w, foot_w, foot_h], center=true);\n    }\n}\n\n// Assemble the hearth\nunion() {\n    hearth_base();\n    hearth_back();\n    hearth_sides();\n    hearth_arch();\n    hearth_feet();\n    \n    // Interior features\n    union() {\n        logs();\n        hearth_grate();\n    }\n}\n\n// Cut out interior void\ndifference() {\n    %firebox_interior();\n}",
    "renders": true
  },
  {
    "household_item": "grate",
    "openscad_code": "// Realistic-style 3D printable grate\n// Medium complexity (~120 lines)\n\n// Dimensions\ngrate_w = 80;\ngrate_d = 60;\ngrate_h = 8;\nframe_t = 2;\nbar_w = 2;\nbar_gap = 3;\nleg_h = 5;\nleg_t = 3;\nscrew_r = 1.5;\nscrew_h = 3;\n\n// Main grate module\nmodule grate() {\n    difference() {\n        // Frame\n        frame();\n        \n        // Screw holes for mounting\n        translate([grate_w/2 - 6, grate_d/2 - 6, -0.1])\n            cylinder(h=screw_h+0.2, r=screw_r, $fn=16);\n        translate([-grate_w/2 + 6, grate_d/2 - 6, -0.1])\n            cylinder(h=screw_h+0.2, r=screw_r, $fn=16);\n        translate([grate_w/2 - 6, -grate_d/2 + 6, -0.1])\n            cylinder(h=screw_h+0.2, r=screw_r, $fn=16);\n        translate([-grate_w/2 + 6, -grate_d/2 + 6, -0.1])\n            cylinder(h=screw_h+0.2, r=screw_r, $fn=16);\n    }\n    \n    // Bars\n    bars();\n    \n    // Legs\n    legs();\n}\n\n// Outer frame with rounded edges\nmodule frame() {\n    difference() {\n        // Main frame block\n        cube([grate_w, grate_d, grate_h], center=true);\n        \n        // Inner cutout (sloped for mold release)\n        translate([0, 0, -0.5])\n            cube([grate_w - 2*frame_t, grate_d - 2*frame_t, grate_h + 1], center=true);\n        \n        // Top chamfer\n        translate([0, 0, grate_h/2 - 0.5])\n            cube([grate_w, grate_d, 1], center=true);\n    }\n}\n\n// Grating bars\nmodule bars() {\n    // Long bars (x-direction)\n    bar_count_x = floor((grate_d - 2*frame_t) / (bar_w + bar_gap));\n    for (i = [0:bar_count_x-1]) {\n        y_pos = -grate_d/2 + frame_t + bar_w/2 + i*(bar_w + bar_gap);\n        translate([0, y_pos, 0])\n            cube([grate_w - 2*frame_t, bar_w, grate_h - 1], center=true);\n    }\n    \n    // Short bars (y-direction) for cross support\n    bar_count_y = floor((grate_w - 2*frame_t) / (4*bar_gap));\n    for (i = [0:bar_count_y-1]) {\n        x_pos = -grate_w/2 + frame_t + 2*bar_gap + i*(4*bar_gap);\n        translate([x_pos, 0, 0])\n            cube([bar_w, grate_d - 2*frame_t, grate_h - 2], center=true);\n    }\n}\n\n// Support legs with bottom fillet\nmodule legs() {\n    // Corner legs\n    leg_pos = [\n        [grate_w/2 - leg_t, grate_d/2 - leg_t],\n        [-grate_w/2 + leg_t, grate_d/2 - leg_t],\n        [grate_w/2 - leg_t, -grate_d/2 + leg_t],\n        [-grate_w/2 + leg_t, -grate_d/2 + leg_t]\n    ];\n    \n    for (pos = leg_pos) {\n        translate([pos[0], pos[1], -grate_h/2 - leg_h/2])\n            cube([leg_t, leg_t, leg_h], center=true);\n        \n        // Bottom fillet\n        translate([pos[0], pos[1], -grate_h/2 - leg_h + 0.5])\n            cylinder(h=1, r=leg_t/2, $fn=16);\n    }\n}\n\n// Render the grate\ngrate();",
    "renders": true
  },
  {
    "household_item": "range",
    "openscad_code": "// Realistic Style Range - Medium Complexity\n// Dimensions approximately 80mm wide, 50mm deep, 40mm tall\n\n// Overall dimensions\nrange_width = 80;\nrange_depth = 50;\nrange_height = 40;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\n// Main body of the range\nmodule range_body() {\n    difference() {\n        // Main box shape\n        cube([range_width, range_depth, range_height], center=true);\n        \n        // Hollow out inside\n        translate([0, 0, wall_thick/2])\n            cube([range_width-wall_thick*2, range_depth-wall_thick*2, range_height-wall_thick], center=true);\n        \n        // Front opening for oven\n        translate([0, range_depth/2-wall_thick, 0])\n            cube([range_width-wall_thick*4, wall_thick+1, range_height-wall_thick*2], center=true);\n    }\n}\n\n// Control panel on top front\nmodule control_panel() {\n    translate([0, range_depth/2-wall_thick/2, range_height/2-wall_thick])\n        cube([range_width-wall_thick*2, wall_thick, 10], center=true);\n}\n\n// Control knobs\nmodule control_knobs() {\n    for(i = [-1, 0, 1, 2]) {\n        translate([i*15, range_depth/2, range_height/2+2])\n            cylinder(h=3, d=6, $fn=20);\n    }\n}\n\n// Burner grates\nmodule burner_grates() {\n    // Left grate\n    translate([-20, 0, range_height/2+wall_thick/2])\n        grate_base();\n    \n    // Right grate\n    translate([20, 0, range_height/2+wall_thick/2])\n        grate_base();\n}\n\nmodule grate_base() {\n    difference() {\n        // Base grate shape\n        cube([30, 25, 2], center=true);\n        \n        // Cut holes for weight reduction\n        for(x = [-12, -6, 0, 6, 12]) {\n            translate([x, 0, -1])\n                cube([2, 22, 4], center=true);\n        }\n        for(y = [-8, 0, 8]) {\n            translate([0, y, -1])\n                cube([28, 2, 4], center=true);\n        }\n    }\n}\n\n// Burner caps\nmodule burner_caps() {\n    // Left front burner\n    translate([-20, 8, range_height/2+2+wall_thick])\n        burner_cap(12);\n    \n    // Left back burner\n    translate([-20, -8, range_height/2+2+wall_thick])\n        burner_cap(10);\n    \n    // Right front burner\n    translate([20, 8, range_height/2+2+wall_thick])\n        burner_cap(10);\n    \n    // Right back burner\n    translate([20, -8, range_height/2+2+wall_thick])\n        burner_cap(12);\n}\n\nmodule burner_cap(d) {\n    cylinder(h=2, d=d, $fn=32);\n    translate([0, 0, 1])\n        cylinder(h=1, d=d-2, $fn=32);\n}\n\n// Oven door handle\nmodule oven_handle() {\n    translate([0, range_depth/2+2, -range_height/4])\n    rotate([90, 0, 0])\n        cylinder(h=range_width-wall_thick*4, d=4, center=true, $fn=20);\n}\n\n// Feet\nmodule feet() {\n    for(x = [-range_width/2+5, range_width/2-5]) {\n        for(y = [-range_depth/2+5, range_depth/2-5]) {\n            translate([x, y, -range_height/2-2])\n                cylinder(h=4, d=6, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    range_body();\n    control_panel();\n    control_knobs();\n    burner_grates();\n    burner_caps();\n    oven_handle();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "urn",
    "openscad_code": "// Urn with realistic styling, medium complexity\n// Dimensions: ~70mm height, ~50mm widest diameter\n// Wall thickness: 2mm for 3D printing\n\n$fn=100;  // Smooth curves\n\n// Overall urn dimensions\nurn_height = 70;\nbase_diameter = 40;\nmax_diameter = 50;\nneck_diameter = 30;\nrim_diameter = 35;\n\n// Wall thickness\nwall = 2;\n\n// Main body\nmodule urn_body() {\n    // Outer shape - vase profile\n    hull() {\n        // Base\n        translate([0, 0, 0]) \n            cylinder(h=10, d1=base_diameter, d2=base_diameter*0.9);\n        \n        // Bulge\n        translate([0, 0, 30]) \n            sphere(d=max_diameter);\n            \n        // Neck\n        translate([0, 0, urn_height-15]) \n            cylinder(h=15, d1=neck_diameter, d2=rim_diameter);\n    }\n}\n\n// Hollow interior\nmodule hollow_interior() {\n    // Scaled down version for interior\n    scale([0.85, 0.85, 0.9]) {\n        urn_body();\n    }\n}\n\n// Decorative band around middle\nmodule decorative_band() {\n    // Position at widest point\n    translate([0, 0, 30]) {\n        difference() {\n            // Outer band\n            cylinder(h=8, d=max_diameter + 4);\n            \n            // Grooves\n            for(i = [-1.5:1:1.5]) {\n                rotate([0, 0, i*30]) {\n                    translate([max_diameter/2 + 2, 0, 0]) \n                        cube([max_diameter + 4, 2, 8], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Lid with handle\nmodule urn_lid() {\n    // Main lid disc\n    difference() {\n        cylinder(h=5, d=rim_diameter + 2);\n        translate([0, 0, -1]) \n            cylinder(h=7, d=rim_diameter - wall*2);\n    }\n    \n    // Handle\n    translate([0, 0, 5]) {\n        // Base of handle\n        cylinder(h=3, d=15);\n        \n        // Knob\n        translate([0, 0, 3]) {\n            sphere(d=12);\n            \n            // Finger grip groove\n            difference() {\n                sphere(d=12);\n                translate([0, 0, -2]) \n                    cylinder(h=6, d=8);\n            }\n        }\n    }\n}\n\n// Base pedestal\nmodule pedestal() {\n    difference() {\n        // Outer base\n        cylinder(h=8, d=base_diameter + 6);\n        \n        // Recessed bottom\n        translate([0, 0, 4]) \n            cylinder(h=5, d=base_diameter);\n    }\n}\n\n// Assemble the urn\nunion() {\n    // Base\n    pedestal();\n    \n    // Main body with hollow interior\n    difference() {\n        urn_body();\n        hollow_interior();\n    }\n    \n    // Decorative elements\n    decorative_band();\n    \n    // Lid (slightly offset for viewing)\n    translate([0, 0, urn_height + 2]) {\n        urn_lid();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "sieve",
    "openscad_code": "// Medium-complexity realistic sieve\n// Approx. 85 mm Ø, 3 mm wall, 1 mm holes, ready to print\n\n$fn = 36;\n\n// Overall parameters\nouter_d = 85;           // mm\nwall_th = 3;            // mm\nheight  = 35;           // mm\nrim_h   = 6;            // mm\n\n// Mesh parameters\nmesh_pitch = 3.5;       // mm\nmesh_th    = 1.2;       // mm\nhole_d     = 1.0;       // mm\n\n// Handle parameters\nhandle_len = 30;        // mm\nhandle_d   = 12;        // mm\n\n// Build the sieve\ndifference() {\n    union() {\n        // Main bowl\n        difference() {\n            cylinder(d = outer_d, h = height);\n            translate([0, 0, rim_h])\n                cylinder(d = outer_d - 2*wall_th, h = height - rim_h + 0.01);\n        }\n        \n        // Reinforcing rim lip\n        translate([0, 0, height - rim_h])\n            cylinder(d1 = outer_d, d2 = outer_d + 2, h = rim_h);\n        \n        // Handle\n        translate([outer_d/2 - wall_th, 0, height/2])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(d = handle_d, h = handle_len);\n                translate([0, handle_d/2, handle_len/2])\n                    rotate([90, 0, 0])\n                    cube([handle_len, handle_d - 2*wall_th, handle_d - 2*wall_th], center = true);\n            }\n    }\n    \n    // Mesh holes\n    module mesh_holes() {\n        r = (outer_d - 2*wall_th)/2 - hole_d/2;\n        n = floor(2*PI*r / mesh_pitch);\n        for (i = [0:n-1])\n            for (j = [0:floor(n/2)-1]) {\n                angle = i * 360 / n;\n                x = r * cos(angle);\n                y = r * sin(angle);\n                z = j * mesh_pitch * cos(30);\n                if (z < height - rim_h - hole_d/2)\n                    translate([x, y, z + rim_h])\n                        rotate([0, 90, 0])\n                        cylinder(d = hole_d, h = wall_th + 0.2, center = true);\n            }\n    }\n    mesh_holes();\n}",
    "renders": true
  },
  {
    "household_item": "canister",
    "openscad_code": "// Medium-complexity, realistic 3D-printable canister\n// Outer shell ~65 mm high, 40 mm diameter\n// Wall thickness 1.5 mm, no overhangs >45°\n\n$fn = 40;\n\nmodule main_body() {\n    difference() {\n        // External cylinder\n        cylinder(h = 60, d = 40, center = false);\n        \n        // Hollow interior\n        translate([0,0,1.5])\n            cylinder(h = 58, d = 37, center = false);\n    }\n}\n\nmodule bottom_grooves() {\n    // Two concentric shallow grooves on the bottom for grip\n    for (r = [15, 12]) {\n        translate([0,0,-0.5])\n            cylinder(h = 1, d = r, center = false);\n    }\n}\n\nmodule top_lip() {\n    // Thickened rim for strength and snap-fit lid\n    difference() {\n        translate([0,0,60])\n            cylinder(h = 5, d = 44, center = false);\n        \n        translate([0,0,60])\n            cylinder(h = 5, d = 37, center = false);\n    }\n}\n\nmodule lid() {\n    difference() {\n        // Lid disc\n        translate([0,0,65])\n            cylinder(h = 3, d = 37.2, center = false);\n        \n        // Finger notch\n        translate([0,-5,65])\n            cube([20,10,3], center = true);\n    }\n    \n    // Snap ridge\n    translate([0,0,65])\n        cylinder(h = 1, d = 40, center = false);\n}\n\nmodule label_band() {\n    // Slight recess for a sticker or printed label\n    difference() {\n        translate([0,0,25])\n            cylinder(h = 15, d = 41, center = false);\n        \n        translate([0,0,25])\n            cylinder(h = 15, d = 39.5, center = false);\n    }\n}\n\nmodule cap_grip_ridges() {\n    // Vertical ridges around lid edge for grip\n    for (i = [0:15]) {\n        rotate([0,0,i*360/16])\n            translate([18.5,0,65])\n                cube([1.5,3,3], center = true);\n    }\n}\n\n// Build the canister\nunion() {\n    main_body();\n    bottom_grooves();\n    top_lip();\n    label_band();\n    \n    // Lid assembly\n    union() {\n        lid();\n        cap_grip_ridges();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "crock",
    "openscad_code": "// Realistic medium-complexity crock\n// Overall height 85 mm, max diameter 80 mm\n\n$fn = 60;  // smooth curves\n\n// Main crock body\nmodule crock_body() {\n    difference() {\n        // Outer shell with gentle taper\n        cylinder(h = 70, r1 = 40, r2 = 35);\n        \n        // Hollow interior\n        translate([0, 0, 3])\n            cylinder(h = 68, r1 = 36, r2 = 31);\n    }\n}\n\n// Thickened rim for strength\nmodule rim() {\n    difference() {\n        // Upper rim ring\n        translate([0, 0, 67])\n            cylinder(h = 8, r1 = 42, r2 = 42);\n            \n        // Inner bevel\n        translate([0, 0, 67])\n            cylinder(h = 8, r1 = 35, r2 = 33);\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    translate([0, 0, 30])\n    rotate([90, 0, 0])\n    difference() {\n        union() {\n            // Handle arch\n            rotate_extrude(angle = 180, $fn = 30)\n                translate([40, 0, 0])\n                    circle(r = 6);\n                    \n            // Grip pad\n            translate([40, 0, -8])\n                scale([1, 0.7, 1])\n                    sphere(r = 8);\n        }\n        \n        // Hollow handle core\n        rotate_extrude(angle = 180, $fn = 30)\n            translate([40, 0, 0])\n                circle(r = 3);\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    difference() {\n        cylinder(h = 4, r1 = 38, r2 = 38);\n        cylinder(h = 4, r1 = 34, r2 = 34);\n    }\n}\n\n// Decorative banding grooves\nmodule grooves() {\n    for (i = [1:3]) {\n        translate([0, 0, 10 + i * 18])\n            difference() {\n                cylinder(h = 1, r1 = 39.5, r2 = 39.5);\n                cylinder(h = 1, r1 = 38, r2 = 38);\n            }\n    }\n}\n\n// Drainage spout (subtle pour spout)\nmodule spout() {\n    translate([0, 40, 65])\n    rotate([0, 90, 0])\n    difference() {\n        // Spout shape\n        hull() {\n            sphere(r = 6);\n            translate([0, 8, 0])\n                sphere(r = 4);\n        }\n        \n        // Hollow core\n        translate([0, 4, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 12, r = 3);\n    }\n}\n\n// Assembly\nunion() {\n    crock_body();\n    rim();\n    base_ring();\n    grooves();\n    \n    // Attach handles on both sides\n    handle();\n    mirror([1, 0, 0])\n        handle();\n        \n    // Add pour spout\n    spout();\n}",
    "renders": true
  },
  {
    "household_item": "pottery",
    "openscad_code": "// Realistic Medium-Complexity Pottery – OpenSCAD\n// A small wheel-thrown vase ~65 mm tall, printable without supports\n// Wall thickness = 1.6 mm to match 0.4 mm nozzle common multiples\n\n$fn = 64;\nwall = 1.6;            // wall thickness (mm)\nbase_h = 4;            // foot height\nneck_h = 8;            // neck height\nbody_h = 45;           // main body height\nrim_h  = 2;            // lip thickness\ntotal_h = base_h + body_h + neck_h + rim_h;\n\n// Profile points for revolution (outer surface)\nprofile = [\n    [0, 0],\n    [18, 0],\n    [22, base_h],\n    [28, base_h + 5],\n    [30, base_h + body_h * 0.5],\n    [26, base_h + body_h * 0.8],\n    [20, base_h + body_h],\n    [12, base_h + body_h + neck_h],\n    [10, total_h - rim_h],\n    [10, total_h]\n];\n\n// Create solid outer shell\nmodule outer_shell() {\n    rotate_extrude()\n        polygon(profile);\n}\n\n// Create inner hollow (offset profile inwards)\nmodule inner_shell() {\n    inner_profile = [\n        for (p = profile)\n            let (nx = p.x - wall)\n            [max(nx, 0), p.y + (p.y > 0 ? wall : 0)]\n    ];\n    rotate_extrude()\n        polygon(inner_profile);\n}\n\n// Simple foot ring\nmodule foot_ring() {\n    difference() {\n        cylinder(h = base_h, r1 = 22, r2 = 20);\n        cylinder(h = base_h + 0.1, r1 = 20, r2 = 18);\n    }\n}\n\n// Subtle throwing rings on the body\nmodule throwing_rings() {\n    rings = 6;\n    step = body_h / (rings + 1);\n    for (i = [1:rings])\n        translate([0, 0, base_h + i * step])\n            difference() {\n                cylinder(h = 0.6, r = 30 - 1.5 * i, center = true);\n                cylinder(h = 0.8, r = 30 - 1.5 * i - 0.2, center = true);\n            }\n}\n\n// Smooth lip bevel\nmodule lip() {\n    difference() {\n        cylinder(h = rim_h, r = 10);\n        translate([0, 0, -0.1])\n            cylinder(h = rim_h + 0.2, r = 8.4);\n    }\n}\n\n// Main assembly\nunion() {\n    difference() {\n        outer_shell();\n        inner_shell();\n    }\n    \n    foot_ring();\n    lip();\n    \n    // Optional subtle texture\n    throwing_rings();\n}",
    "renders": true
  },
  {
    "household_item": "vase",
    "openscad_code": "// Realistic Medium-Complexity Vase (≈75 mm tall, 3 mm walls, 3D-printable)\n\n$fn = 36;               // Smooth curves\n\n// Global parameters\nwall = 3;               // Uniform wall thickness\nbase_h = 6;             // Foot height\nmain_h = 65;            // Main body height\nneck_h = 12;            // Neck height\ntop_r = 15;             // Opening radius\n\n// --- Base foot ----------------------------------------------------------\nmodule base() {\n    difference() {\n        cylinder(h = base_h, r1 = 22, r2 = 25, center = true);\n        translate([0, 0, -1])\n            cylinder(h = base_h + 2, r1 = 22 - wall, r2 = 25 - wall, center = true);\n    }\n}\n\n// --- Ornament ring ------------------------------------------------------\nmodule ring(h, r_out, r_in) {\n    difference() {\n        cylinder(h = h, r = r_out, center = true);\n        cylinder(h = h + 0.1, r = r_in, center = true);\n    }\n}\n\n// --- Decorative ribs ----------------------------------------------------\nmodule ribs(count, h, r, thick) {\n    for (i = [0 : count - 1])\n        rotate([0, 0, i * 360 / count])\n            translate([r, 0, 0])\n                cube([thick, 2 * r, h], center = true);\n}\n\n// --- Main bulbous body --------------------------------------------------\nmodule body() {\n    difference() {\n        union() {\n            // Bulge\n            cylinder(h = main_h, r1 = 25, r2 = 35, center = false);\n            translate([0, 0, main_h / 2])\n                sphere(d = 70);\n            // Flat bottom\n            translate([0, 0, -0.1])\n                cylinder(h = 0.2, r = 25, center = false);\n        }\n        // Hollow cavity\n        hull() {\n            translate([0, 0, wall])\n                cylinder(h = main_h - wall, r1 = 25 - wall, r2 = 35 - wall);\n            translate([0, 0, main_h])\n                sphere(d = 70 - 2 * wall);\n        }\n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 2, r = 2, center = true);\n    }\n}\n\n// --- Neck taper ---------------------------------------------------------\nmodule neck() {\n    difference() {\n        cylinder(h = neck_h, r1 = 30, r2 = top_r, center = false);\n        translate([0, 0, wall])\n            cylinder(h = neck_h - wall, r1 = 30 - wall, r2 = top_r - wall, center = false);\n    }\n}\n\n// --- Rim lip ------------------------------------------------------------\nmodule rim() {\n    difference() {\n        cylinder(h = 3, r1 = top_r + 2, r2 = top_r + 1, center = false);\n        cylinder(h = 3.2, r = top_r, center = false);\n    }\n}\n\n// === Assembly ============================================================\nunion() {\n    // Stack main parts\n    base();\n    translate([0, 0, base_h]) body();\n    translate([0, 0, base_h + main_h]) neck();\n    translate([0, 0, base_h + main_h + neck_h]) rim();\n\n    // Decorative ring mid-body\n    translate([0, 0, base_h + main_h * 0.6])\n        ring(h = 4, r_out = 36, r_in = 33);\n\n    // Vertical ribs\n    translate([0, 0, base_h + 10])\n        ribs(count = 12, h = 45, r = 34, thick = 1.5);\n}",
    "renders": true
  },
  {
    "household_item": "planter",
    "openscad_code": "// Realistic medium-complexity planter\n// External dimensions ~80 mm wide, 60 mm deep, 50 mm high\n// Wall thickness 2 mm, suitable for FDM printing without supports\n\nmodule planter_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            // Base rounded box\n            cube([76, 56, 30], center=true);\n            sphere(4);\n        }\n\n        // Hollow interior\n        translate([0, 0, -5])\n        minkowski() {\n            cube([72, 52, 40], center=true);\n            sphere(2);\n        }\n    }\n}\n\nmodule drainage_holes() {\n    // Four drainage holes at the bottom\n    for (x = [-25, 25])\n        for (y = [-15, 15])\n            translate([x, y, -23])\n                cylinder(h=4, d=4, $fn=12, center=true);\n}\n\nmodule rim_detail() {\n    // Top rim lip for rigidity\n    translate([0, 0, 16])\n    minkowski() {\n        cube([78, 58, 4], center=true);\n        sphere(2);\n    }\n}\n\nmodule feet() {\n    // Four small feet for stability\n    for (x = [-30, 30])\n        for (y = [-20, 20])\n            translate([x, y, -27])\n                cylinder(h=4, d=8, $fn=12);\n}\n\n// Main assembly\nunion() {\n    planter_body();\n    rim_detail();\n    feet();\n}\n\n// Remove drainage holes\ndifference() {\n    children(0);\n    drainage_holes();\n}",
    "renders": true
  },
  {
    "household_item": "terrarium",
    "openscad_code": "// Terrarium with hinged lid – medium-realistic style\n// Overall footprint ~70 mm diameter, ~60 mm tall when closed\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body\nmodule terrarium_body(h = 40, r = 32) {\n    difference() {\n        cylinder(h = h, r = r, $fn = 120);           // outer cylinder\n        translate([0, 0, wall])\n            cylinder(h = h, r = r - wall, $fn = 120); // hollow inside\n    }\n}\n\n// Soil layer inside (thin disk)\nmodule soil_layer(h = 5) {\n    translate([0, 0, wall])\n        cylinder(h = h, r = 32 - wall - 1, $fn = 120);\n}\n\n// Simple stones for decoration\nmodule pebble(pos, scale) {\n    translate(pos)\n        scale([scale, scale, scale])\n            sphere(r = 3, $fn = 20);\n}\n\n// Cacti using stacked cylinders\nmodule cactus(height, segments = 4) {\n    for (i = [0 : segments - 1]) {\n        translate([0, 0, i * (height / segments) + (i == 0 ? 0 : 1)])\n            cylinder(h = height / segments + 1, r1 = 3 - i * 0.3, r2 = 3 - (i + 1) * 0.3, $fn = 16);\n    }\n}\n\n// Hinged lid\nmodule lid(r = 32, h = 5) {\n    difference() {\n        cylinder(h = h, r = r, $fn = 120);           // lid top\n        translate([0, 0, wall])\n            cylinder(h = h, r = r - wall, $fn = 120); // hollow\n    }\n\n    // Hinge pin\n    translate([r - 2, 0, h / 2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 1.5, $fn = 16);\n}\n\n// Build the terrarium\nunion() {\n    terrarium_body();\n\n    // Soil\n    color(\"saddlebrown\")\n        soil_layer();\n\n    // Pebbles\n    color(\"gray\")\n    for (p = [[20, 5, 8], [-15, -10, 7], [10, -15, 6], [-20, 12, 7]])\n        pebble(p, 1);\n\n    // Cacti\n    color(\"darkgreen\") {\n        translate([-10, 10, wall + 5])\n            cactus(15);\n        translate([15, -5, wall + 5])\n            cactus(12);\n    }\n\n    // Lid rotated open slightly\n    translate([0, 0, 40])\n        rotate([60, 0, 0])\n            lid();\n}",
    "renders": true
  },
  {
    "household_item": "aquarium",
    "openscad_code": "// Realistic 3D-printable aquarium (≈ 80 mm long)\n// All parts printable without supports – no overhangs >45°\n\n// Overall scale factor – change only this for bigger / smaller print\nscale_factor = 1;      \n\n// Wall thickness & clearances\nwall = 1.2;            // 3 shells @0.4 mm nozzle\ngap  = 0.3;            // fit clearance\n\n/* ---------- modules ---------- */\n\n// Simple fish silhouette for inside\nmodule fish() {\n    color(\"orange\")\n    translate([0,0,2])\n    scale([0.8,0.4,0.3])\n    sphere(d=8,$fn=16);\n}\n\n// Gravel pebble\nmodule pebble(s=3) {\n    color(\"gray\")\n    scale([1,1,0.7]) sphere(d=s,$fn=9);\n}\n\n// Aquarium plant – 2 leaves\nmodule plant() {\n    color(\"darkgreen\")\n    translate([0,0,1])\n    for(a=[0,120]) rotate([0,0,a]) {\n        translate([0,0,1]) rotate([0,90,0])\n        cylinder(d1=0.8,d2=0,h=12,$fn=4);\n    }\n}\n\n/* ---------- main tank body ---------- */\ndifference() {\n    // Outer shell\n    scale(scale_factor)\n    cube([80,40,45], center=true);\n    \n    // Hollow inside (leave bottom closed)\n    translate([0,0,wall/2])\n    cube([80-2*wall,40-2*wall,45-wall], center=true);\n}\n\n/* ---------- bottom frame ---------- */\ndifference() {\n    // Lower trim\n    translate([0,0,-45/2-wall/2])\n    cube([80+2*wall,40+2*wall,wall], center=true);\n    \n    // Remove center so trim is only 2 mm wide\n    translate([0,0,-45/2-wall/2-0.01])\n    cube([80-wall,40-wall,wall+0.02], center=true);\n}\n\n/* ---------- top frame with lip ---------- */\ndifference() {\n    // Outer lip\n    translate([0,0,45/2+wall/2])\n    cube([80+2*wall,40+2*wall,wall], center=true);\n    \n    // Inner cut\n    translate([0,0,45/2+wall/2+0.01])\n    cube([80,40,wall+0.02], center=true);\n}\n\n/* ---------- contents ---------- */\ntranslate([0,0,-45/2+wall+gap]) {   // sit on inner bottom\n    // Gravel bed (random scatter)\n    for(i=[-35:10:35], j=[-15:8:15])\n        translate([i,j,0])\n        pebble(rands(2,4,1)[0]);\n\n    // Two plants front-left\n    translate([-25,-10,0]) plant();\n    translate([-20,-12,0]) scale([0.7,0.7,0.7]) plant();\n    \n    // Three fish\n    translate([ 10,  5, 6]) rotate([0,0,30]) fish();\n    translate([  0, -5, 8]) rotate([0,0,-20]) fish();\n    translate([-10,  8, 4]) fish();\n}",
    "renders": true
  },
  {
    "household_item": "cage",
    "openscad_code": "// Realistic medium-complexity bird cage\n// Approx. 85 mm tall, 3 mm wall thickness for 3D printing\n\n$fn = 36;\n\nmodule cage_base() {\n    // Base ring\n    difference() {\n        cylinder(h = 10, d = 50, center = true);\n        translate([0, 0, 1]) cylinder(h = 12, d = 44, center = true);\n    }\n    \n    // Base floor\n    translate([0, 0, -5]) cube([45, 45, 2], center = true);\n    \n    // Small drainage holes in base\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([15, 0, -5]) cylinder(h = 2.1, d = 3, center = true);\n        }\n    }\n}\n\nmodule vertical_bars() {\n    // Generate vertical bars around cage\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([20, 0, 30]) cylinder(h = 60, d = 2.5, center = true);\n        }\n    }\n}\n\nmodule horizontal_rings() {\n    // Three reinforcing rings at different heights\n    for (h = [20, 40, 60]) {\n        translate([0, 0, h]) difference() {\n            cylinder(h = 3, d = 43, center = true);\n            cylinder(h = 3.1, d = 37, center = true);\n        }\n    }\n}\n\nmodule door() {\n    // Door frame on front\n    translate([0, 20, 40]) difference() {\n        cube([25, 2, 35], center = true);\n        translate([0, 0, 0]) cube([21, 2.1, 31], center = true);\n    }\n    \n    // Door bars (vertical)\n    for (x = [-8, -4, 0, 4, 8]) {\n        translate([x, 20, 40]) cylinder(h = 30, d = 1.5, center = true);\n    }\n    \n    // Door bars (horizontal)\n    for (z = [27, 40, 53]) {\n        translate([0, 20, z]) rotate([90, 0, 0]) cylinder(h = 20, d = 1.5, center = true);\n    }\n    \n    // Small door latch\n    translate([12, 21, 47]) cube([4, 1, 6], center = true);\n}\n\nmodule roof() {\n    // Roof dome\n    translate([0, 0, 75]) difference() {\n        sphere(d = 45);\n        translate([0, 0, -5]) sphere(d = 38);\n    }\n    \n    // Roof handle\n    translate([0, 0, 90]) cylinder(h = 15, d = 6, center = true);\n    translate([0, 0, 97]) sphere(d = 8);\n}\n\nmodule perch() {\n    // Perches inside cage\n    translate([0, 0, 25]) rotate([90, 0, 0]) cylinder(h = 35, d = 4, center = true);\n    translate([0, 0, 45]) rotate([0, 90, 0]) cylinder(h = 35, d = 4, center = true);\n}\n\n// Assembly\nunion() {\n    cage_base();\n    vertical_bars();\n    horizontal_rings();\n    door();\n    roof();\n    perch();\n}",
    "renders": true
  },
  {
    "household_item": "crate",
    "openscad_code": "// Crate - Realistic style, medium complexity\n// 3D printable wooden shipping crate with planks, nails and handles\n\n$fn = 32;  // Smooth curves for printing\nwall_thickness = 2;  // 3D printable thickness\ncrate_width = 80;\ncrate_depth = 60;\ncrate_height = 50;\nplank_width = 10;\nplank_gap = 1;\nnail_diameter = 2;\nnail_head_diameter = 3.5;\nhandle_diameter = 6;\nhandle_clearance = 15;\n\nmodule nail(x, y, z) {\n    // Simple round nail with head\n    translate([x, y, z]) {\n        union() {\n            cylinder(h = 3, d = nail_head_diameter);\n            translate([0, 0, 1.5]) cylinder(h = wall_thickness + 1, d = nail_diameter);\n        }\n    }\n}\n\nmodule side_planks(length, height, direction) {\n    // Generate vertical planks for sides\n    num_planks = ceil(length / (plank_width + plank_gap));\n    for (i = [0:num_planks-1]) {\n        pos = i * (plank_width + plank_gap) - length/2 + plank_width/2;\n        if (direction == \"x\") {\n            translate([pos, 0, 0]) cube([plank_width, wall_thickness, height], center = true);\n        } else {\n            translate([0, pos, 0]) cube([wall_thickness, plank_width, height], center = true);\n        }\n    }\n}\n\nmodule bottom_planks(length, width) {\n    // Generate horizontal planks for bottom\n    num_planks = ceil(width / (plank_width + plank_gap));\n    for (i = [0:num_planks-1]) {\n        pos = i * (plank_width + plank_gap) - width/2 + plank_width/2;\n        translate([0, pos, -crate_height/2 + wall_thickness/2]) \n            cube([length, plank_width, wall_thickness], center = true);\n    }\n}\n\nmodule handle_hole() {\n    // Handle hole - oval shape for finger grip\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h = wall_thickness + 1, d = handle_diameter);\n            translate([0, handle_diameter/4, -1]) cube([handle_diameter*1.2, handle_diameter/2, wall_thickness + 3], center = true);\n        }\n    }\n}\n\nmodule handle(x, y, z) {\n    // Side handle assembly\n    translate([x, y, z]) {\n        rotate([0, 90, 0]) handle_hole();\n    }\n}\n\n// Main crate assembly\ndifference() {\n    union() {\n        // Bottom planks\n        bottom_planks(crate_width, crate_depth);\n        \n        // Side assemblies\n        translate([0, crate_depth/2 - wall_thickness/2, 0]) side_planks(crate_width, crate_height, \"x\");\n        translate([0, -crate_depth/2 + wall_thickness/2, 0]) side_planks(crate_width, crate_height, \"x\");\n        translate([crate_width/2 - wall_thickness/2, 0, 0]) side_planks(crate_depth, crate_height, \"y\");\n        translate([-crate_width/2 + wall_thickness/2, 0, 0]) side_planks(crate_depth, crate_height, \"y\");\n    }\n    \n    // Handle holes on long sides\n    handle(crate_width/2 - wall_thickness/2, 0, 0);\n    handle(-crate_width/2 + wall_thickness/2, 0, 0);\n}\n\n// Nails along edges\nfor (x = [-crate_width/2 + 10:20:crate_width/2 - 10]) {\n    nail(x, crate_depth/2 - wall_thickness/2, crate_height/2 - 5);\n    nail(x, -crate_depth/2 + wall_thickness/2, crate_height/2 - 5);\n}\n\nfor (y = [-crate_depth/2 + 10:20:crate_depth/2 - 10]) {\n    nail(crate_width/2 - wall_thickness/2, y, crate_height/2 - 5);\n    nail(-crate_width/2 + wall_thickness/2, y, crate_height/2 - 5);\n}",
    "renders": true
  },
  {
    "household_item": "case",
    "openscad_code": "// Medium-complexity realistic Raspberry Pi 4 case – 3D-printable, no supports\n// Outside footprint ~88 × 58 × 28 mm\n$fa = 2; $fs = 0.5;\n\n// ---------- Global parameters ----------\nwall = 1.6;            // printer-friendly wall thickness\nclear = 0.3;           // clearance for easy assembly\npcb_l = 85;            // Pi 4 board length\npcb_w = 56;\npcb_h = 1.6;\ncase_l = pcb_l + 2*wall + 2*clear;\ncase_w = pcb_w + 2*wall + 2*clear;\ncase_h = 28;\n\n// ---------- Main case shell ----------\nmodule case_shell() {\n    difference() {\n        // overall block\n        cube([case_l, case_w, case_h], center=true);\n\n        // hollow interior\n        translate([0,0,-(wall+clear)/2])\n            cube([pcb_l+clear, pcb_w+clear, case_h-clear], center=true);\n\n        // large port cut-outs on the short side (USB, Ethernet, etc.)\n        translate([case_l/2-wall, -pcb_w/2+6, 0])\n            cube([wall+0.1, 12, 15], center=false);\n\n        translate([case_l/2-wall, -pcb_w/2+20, 0])\n            cube([wall+0.1, 12, 15], center=false);\n\n        // micro-SD slot on long edge\n        translate([case_l/2-30, case_w/2-wall, -case_h/2+8])\n            cube([15, wall+0.1, 2.5], center=false);\n\n        // USB-C power inlet\n        translate([-case_l/2+wall, -case_w/2+7, -case_h/2+8])\n            cube([8, wall+0.1, 7], center=false);\n\n        // ventilation slots on top\n        for (x=[-35:10:35])\n            translate([x, 0, case_h/2-wall/2])\n                cube([6, case_w, wall+0.1], center=true);\n    }\n}\n\n// ---------- Mounting posts for PCB ----------\nmodule posts() {\n    for (p = [[-pcb_l/2+3.5, -pcb_w/2+3.5], [pcb_l/2-3.5, -pcb_w/2+3.5],\n             [pcb_l/2-3.5,  pcb_w/2-3.5], [-pcb_l/2+3.5,  pcb_w/2-3.5]]) {\n        translate([p.x, p.y, -case_h/2+wall+clear])\n            cylinder(r=2.2, h=6, $fn=20);\n    }\n}\n\n// ---------- Snap-fit lid ----------\nmodule lid() {\n    difference() {\n        // lid plate\n        translate([0,0,case_h/2-wall/2])\n            cube([case_l, case_w, wall], center=true);\n\n        // clearance chamfers for easier snapping\n        for (edge = [[-1,0], [1,0], [0,-1], [0,1]]) {\n            translate([edge.x*(case_l/2-wall/2), edge.y*(case_w/2-wall/2), case_h/2-wall])\n                cube([wall*2, wall*2, wall], center=true);\n        }\n\n        // ventilation grill pattern\n        for (x=[-35:5:35])\n            for (y=[-25:5:25])\n                translate([x, y, case_h/2-wall/2+0.1])\n                    cube([3, 3, wall+0.2], center=true);\n    }\n}\n\n// ---------- Assembly ----------\ncase_shell();\nposts();\ntranslate([0,0,case_h/2+2]) lid();",
    "renders": true
  },
  {
    "household_item": "tureen",
    "openscad_code": "$fn = 64; // Smooth curves\n\n// Overall dimensions\nbase_d = 80;\nbody_h = 40;\nwall_t = 2;\n\nmodule tureen() {\n    union() {\n        // Base ring\n        difference() {\n            cylinder(h = 5, d = base_d);\n            translate([0, 0, -0.1])\n                cylinder(h = 5.2, d = base_d - 8);\n        }\n\n        // Main bowl\n        translate([0, 0, 5])\n            difference() {\n                cylinder(h = body_h, d1 = base_d, d2 = base_d + 10);\n                translate([0, 0, wall_t])\n                    cylinder(h = body_h, d1 = base_d - 2*wall_t, d2 = base_d + 10 - 2*wall_t);\n            }\n\n        // Rim / lip\n        translate([0, 0, 5 + body_h])\n            difference() {\n                cylinder(h = 4, d = base_d + 10 + 6);\n                translate([0, 0, -0.1])\n                    cylinder(h = 4.2, d = base_d + 10);\n            }\n\n        // Handles (two identical, mirrored along X)\n        for (side = [-1, 1]) {\n            translate([side * (base_d/2 + 6), 0, 5 + body_h/2])\n                mirror([side, 0, 0])\n                    handle();\n        }\n\n        // Lid\n        translate([0, 0, 5 + body_h + 4 + 2])\n            lid();\n    }\n}\n\nmodule handle() {\n    union() {\n        // Handle grip\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 20, d = 8);\n                translate([0, 0, wall_t])\n                    cylinder(h = 20, d = 8 - 2*wall_t);\n            }\n\n        // Two support brackets\n        for (z = [-8, 8]) {\n            translate([0, 0, z])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h = 8, d1 = 8, d2 = 4);\n                        translate([0, 0, wall_t])\n                            cylinder(h = 8, d1 = 8 - 2*wall_t, d2 = 4 - 2*wall_t);\n                    }\n        }\n    }\n}\n\nmodule lid() {\n    difference() {\n        // Main lid dome\n        scale([1, 1, 0.6])\n            sphere(d = base_d + 10 + 4);\n        // Hollow inside\n        translate([0, 0, 2])\n            scale([1, 1, 0.6])\n                sphere(d = base_d + 10);\n        // Flat underside\n        translate([0, 0, -0.1])\n            cube([base_d + 20, base_d + 20, 2], center = true);\n        // Handle hole\n        translate([0, 0, -5])\n            cylinder(h = 10, d = 6);\n    }\n\n    // Lid knob\n    translate([0, 0, 10])\n        difference() {\n            sphere(d = 12);\n            translate([0, 0, 4])\n                sphere(d = 10);\n        }\n}\n\ntureen();",
    "renders": true
  },
  {
    "household_item": "phone",
    "openscad_code": "// Realistic 3D printable phone model\n// Dimensions in mm, fits on most FDM printers\n\n// Main parameters\nphone_length = 70;\nphone_width = 35;\nphone_thickness = 7;\nscreen_to_edge = 3;\nwall_thickness = 1.2;\n\n// Module for rounded edges using hull\nmodule rounded_box(size, radius) {\n    hull() {\n        translate([radius, radius, 0]) cylinder(h=size.z, r=radius, $fn=20);\n        translate([size.x-radius, radius, 0]) cylinder(h=size.z, r=radius, $fn=20);\n        translate([radius, size.y-radius, 0]) cylinder(h=size.z, r=radius, $fn=20);\n        translate([size.x-radius, size.y-radius, 0]) cylinder(h=size.z, r=radius, $fn=20);\n    }\n}\n\n// Main phone body\nmodule phone_body() {\n    difference() {\n        // Outer rounded shell\n        rounded_box([phone_length, phone_width, phone_thickness], 5);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, -0.1])\n            rounded_box([\n                phone_length - 2*wall_thickness,\n                phone_width - 2*wall_thickness,\n                phone_thickness + 0.2\n            ], 4);\n    }\n}\n\n// Screen module with rounded corners\nmodule screen() {\n    screen_length = phone_length - 2*screen_to_edge;\n    screen_width = phone_width - 2*screen_to_edge;\n    \n    translate([screen_to_edge, screen_to_edge, phone_thickness - 0.3]) {\n        color([0.1, 0.1, 0.1])\n            rounded_box([screen_length, screen_width, 0.2], 2);\n    }\n}\n\n// Camera bump\nmodule camera() {\n    translate([phone_length - 12, phone_width - 8, phone_thickness]) {\n        union() {\n            // Main camera bump\n            cylinder(h=1.5, r=4, $fn=32);\n            \n            // Camera lens\n            translate([0, 0, 1.5])\n                cylinder(h=0.5, r=2.5, $fn=32);\n                \n            // Flash LED\n            translate([5, 0, 0])\n                cylinder(h=1, r=1.5, $fn=16);\n        }\n    }\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    for(i = [0:1]) {\n        translate([-0.5, 15 + i*8, phone_thickness - 3 - i*2])\n            cube([1, 6, 2]);\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([-0.5, phone_width/2 - 3, phone_thickness/2])\n        cube([1, 8, 2]);\n}\n\n// Speaker grille holes\nmodule speaker_grille() {\n    translate([phone_length/2, phone_width - 1, 1]) {\n        for(i = [-4:4]) {\n            translate([i*3, 0, 0])\n                cylinder(h=phone_thickness - 2, r=0.5, $fn=8);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([phone_length/2, 2, 1.5]) {\n        rotate([90, 0, 0])\n            cylinder(h=5, r1=2.5, r2=2.5, $fn=16);\n    }\n}\n\n// Assemble the phone\nunion() {\n    phone_body();\n    screen();\n    camera();\n    volume_buttons();\n    power_button();\n    speaker_grille();\n    usb_port();\n}",
    "renders": true
  },
  {
    "household_item": "computer",
    "openscad_code": "// Realistic Computer Model - Medium Complexity\n// 3D printable desktop computer with case, ports, and ventilation\n\nwall = 2; // wall thickness for 3D printing\n\n// Main computer case\nmodule computer_case() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,0]) rounded_cube([100,40,220], 5);\n            translate([0,0,5]) rounded_cube([96,36,210], 5);\n        }\n        \n        // Hollow out\n        translate([0,-1,5]) rounded_cube([94,34,208], 4);\n        \n        // Front panel features\n        translate([0,20.5,180]) cube([50,1,15]); // Power button slot\n        translate([0,20.5,160]) cube([80,1,3]); // DVD drive slot\n        translate([0,20.5,140]) cube([70,1,2]); // Floppy slot\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, r) {\n    translate([0,0,r]) minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z-2*r], center=true);\n        sphere(r=r);\n    }\n}\n\n// Rear I/O shield\nmodule io_shield() {\n    translate([0,-20,170]) rotate([90,0,0]) {\n        difference() {\n            cube([80,wall,50]);\n            \n            // USB ports\n            for(x = [-30,-15,0,15,30]) {\n                translate([x,-1,35]) cube([10,wall+2,8]);\n            }\n            \n            // Ethernet\n            translate([0,-1,25]) cube([15,wall+2,8]);\n            \n            // Audio jacks\n            for(x = [-20,20]) {\n                translate([x,-1,15]) cylinder(h=wall+2, r=3.5);\n            }\n            \n            // Video ports\n            for(x = [-35,35]) {\n                translate([x,-1,5]) cube([12,wall+2,8]);\n            }\n        }\n    }\n}\n\n// Power supply fan grill\nmodule fan_grill() {\n    translate([0,-20,50]) rotate([90,0,0]) {\n        difference() {\n            cube([60,wall,60]);\n            \n            // Fan hole\n            translate([0,0,30]) cylinder(h=wall+1, r=25);\n            \n            // Grill pattern\n            for(i = [-2:2]) {\n                translate([i*10,-1,30]) cube([2,wall+2,50]);\n            }\n            for(j = [-2:2]) {\n                translate([0,-1,30+j*10]) rotate([0,0,90]) cube([2,wall+2,50]);\n            }\n        }\n    }\n}\n\n// Side panel ventilation\nmodule side_ventilation() {\n    translate([-50,0,110]) rotate([0,90,0]) {\n        difference() {\n            cube([80,1,100]);\n            \n            // Ventilation slots\n            for(i = [10:10:90]) {\n                translate([i,-1,10]) cube([5,3,80]);\n            }\n        }\n    }\n}\n\n// Front panel details\nmodule front_panel() {\n    translate([0,20,187.5]) rotate([0,90,0]) {\n        difference() {\n            cube([15,1,15]);\n            translate([7.5,0,7.5]) cylinder(h=2, r=5); // Power button\n        }\n        \n        // LED indicators\n        translate([30,0,12]) cylinder(h=2, r=2);\n        translate([30,0,3]) cylinder(h=2, r=2);\n    }\n}\n\n// Case feet\nmodule feet() {\n    for(x = [-40,40]) {\n        for(y = [-15,15]) {\n            translate([x,y,wall]) cylinder(h=5, r=3);\n        }\n    }\n}\n\n// Assemble the computer\nunion() {\n    computer_case();\n    io_shield();\n    fan_grill();\n    side_ventilation();\n    front_panel();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "laptop",
    "openscad_code": "// Realistic 3D-Printable Laptop (Medium Complexity)\n// Dimensions in mm, fits within 100 mm bounding box\n\n$fa = 2;\n$fs = 0.5;\n\nmodule base_shell() {\n    // Main lower body\n    difference() {\n        hull() {\n            translate([0, 0, 2.5]) cube([90, 60, 5], center = true);\n            translate([0, 0, 0]) cube([88, 58, 2], center = true);\n        }\n        // Ventilation slots\n        for (y = [-20:10:20])\n            translate([40, y, -1]) cube([4, 6, 6], center = true);\n        // Screw holes\n        for (x = [-40, 40])\n            for (y = [-25, 25])\n                translate([x, y, -2]) cylinder(h = 5, d = 3.5, center = true);\n    }\n}\n\nmodule keyboard() {\n    // Key grid\n    for (row = [0:5]) {\n        for (col = [0:13]) {\n            translate([-39 + col*6, -15 + row*6, 3.1]) \n                cube([4.5, 4.5, 0.8], center = true);\n        }\n    }\n    // Touchpad\n    translate([20, 0, 3.1]) cube([20, 12, 0.8], center = true);\n}\n\nmodule hinge() {\n    // Cylindrical hinge\n    rotate([90, 0, 0]) cylinder(h = 55, d = 4, center = true);\n}\n\nmodule screen_shell() {\n    difference() {\n        hull() {\n            translate([0, 0, 3]) cube([90, 58, 6], center = true);\n            translate([0, 0, 0]) cube([88, 56, 2], center = true);\n        }\n        // Screen recess\n        translate([0, 0, 1.5]) cube([84, 52, 4], center = true);\n        // Webcam hole\n        translate([0, 25, 3.5]) cylinder(h = 3, d = 4, center = true);\n    }\n}\n\nmodule screen() {\n    // Display panel\n    translate([0, 0, 1.9]) cube([82, 50, 1], center = true);\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    translate([0, 0, 0]) {\n        base_shell();\n        keyboard();\n    }\n    \n    // Hinge\n    translate([0, -30, 5]) hinge();\n    \n    // Screen assembly\n    translate([0, 30, 5]) {\n        rotate([0, -110, 0]) {\n            screen_shell();\n            screen();\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "tablet",
    "openscad_code": "// Realistic 3D-printable tablet model (100 mm x 160 mm x 8 mm)\n// Medium complexity, built from basic primitives\n\n// Global dimensions\ntablet_w = 100;\ntablet_h = 160;\ntablet_d = 8;\nwall = 2;\nscreen_margin = 5;\ncorner_r = 6;\n\n// Module: rounded box\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        for (dx = [r, w - r], dy = [r, h - r]) {\n            translate([dx, dy, 0])\n                cylinder(h = d, r = r, $fn = 20);\n            translate([dx, dy, d])\n                cylinder(h = 0.01, r = r, $fn = 20);\n        }\n    }\n}\n\n// Main body shell\ndifference() {\n    rounded_box(tablet_w, tablet_h, tablet_d, corner_r);\n    // Hollow inside\n    translate([wall, wall, wall])\n        rounded_box(tablet_w - 2 * wall, tablet_h - 2 * wall, tablet_d, corner_r - wall);\n}\n\n// Screen glass\ntranslate([screen_margin, screen_margin, tablet_d - 1])\n    cube([tablet_w - 2 * screen_margin, tablet_h - 2 * screen_margin, 1]);\n\n// Bezel around screen\nmodule bezel_line(x, y, a, l) {\n    translate([x, y, tablet_d - 0.5])\n        rotate([0, 0, a])\n            cube([l, 0.5, 0.5], center = true);\n}\n\nfor (a = [0:90:270])\n    for (i = [1:3])\n        bezel_line(\n            tablet_w / 2 + cos(a) * (tablet_w / 2 - screen_margin / 2),\n            tablet_h / 2 + sin(a) * (tablet_h / 2 - screen_margin / 2),\n            a,\n            tablet_w - 2 * screen_margin\n        );\n\n// Home button\ntranslate([tablet_w / 2, 12, tablet_d - 0.5])\n    cylinder(h = 0.5, r = 5, $fn = 30);\ntranslate([tablet_w / 2, 12, tablet_d - 0.5])\n    cylinder(h = 0.5, r = 3, $fn = 30);\n\n// Front camera\ntranslate([tablet_w - 15, tablet_h - 15, tablet_d - 0.5])\n    cylinder(h = 1, r = 2, $fn = 16);\n\n// Rear camera bump\ntranslate([tablet_w - 15, 15, -1])\n    cylinder(h = 2, r = 4, $fn = 16);\ntranslate([tablet_w - 15, 15, -1.5])\n    cylinder(h = 0.5, r = 3, $fn = 16);\n\n// Volume buttons\nfor (i = [0, 1]) {\n    translate([-0.5, tablet_h / 2 + i * 10 - 5, tablet_d / 2])\n        cube([1, 8, 3]);\n}\n\n// Power button\ntranslate([-0.5, tablet_h / 2 + 20, tablet_d / 2])\n    cube([1, 12, 3]);\n\n// Speaker grill holes on bottom\nfor (i = [0:5:25]) {\n    translate([tablet_w / 2 - 12.5 + i, 8, 0])\n        cylinder(h = wall, r = 1, $fn = 8);\n}\n\n// USB-C port\ntranslate([tablet_w / 2, 8, 0])\n    cube([8, 2, wall]);\n\n// Microphone hole\ntranslate([tablet_w / 2 + 15, 8, wall / 2])\n    rotate([90, 0, 0])\n        cylinder(h = wall, r = 0.5, $fn = 8);",
    "renders": true
  },
  {
    "household_item": "television",
    "openscad_code": "// Realistic Television Model - Medium Complexity\n// Dimensions: 80mm wide x 50mm tall x 15mm deep\n\n// TV Body Module\nmodule tv_body() {\n    // Main TV frame\n    difference() {\n        // Outer shell\n        cube([80, 50, 15], center=true);\n        \n        // Screen cutout\n        translate([0, 0, 7.1])\n            cube([70, 40, 1], center=true);\n        \n        // VESA mount cutout (optional)\n        translate([0, 0, -6.9])\n            cube([20, 20, 3], center=true);\n    }\n}\n\n// Screen Module\nmodule tv_screen() {\n    // LCD panel\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 8])\n        cube([70, 40, 0.5], center=true);\n    \n    // Screen bezel\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, 7.5])\n        cube([72, 42, 1], center=true);\n}\n\n// Stand Module\nmodule tv_stand() {\n    // Stand base\n    translate([0, -25, -10])\n        cube([40, 5, 10], center=true);\n    \n    // Stand neck\n    translate([0, -18, -5])\n        cube([10, 16, 5], center=true);\n}\n\n// Ventilation holes\nmodule vents() {\n    for(i = [1:5]) {\n        translate([30 - i*12, 20, 0])\n            cube([8, 2, 14], center=true);\n    }\n}\n\n// Control buttons\nmodule controls() {\n    // Power button\n    translate([30, 0, 8])\n        cylinder(h=2, r=3, center=true);\n    \n    // Channel buttons\n    for(i = [0:1]) {\n        translate([35, -5 + i*10, 8])\n            cube([4, 2, 2], center=true);\n    }\n    \n    // Volume buttons\n    for(i = [0:1]) {\n        translate([35, -2 + i*4, 8])\n            cube([2, 2, 2], center=true);\n    }\n}\n\n// I/O ports\nmodule ports() {\n    // HDMI ports\n    for(i = [0:1]) {\n        translate([-35, -15 + i*8, 0])\n            cube([5, 3, 12], center=true);\n    }\n    \n    // USB port\n    translate([-35, 5, 0])\n        cube([5, 2, 8], center=true);\n}\n\n// Speaker grills\nmodule speakers() {\n    // Left speaker\n    translate([-30, -20, 0])\n        for(i = [0:3]) {\n            rotate([0, 90, 0])\n                translate([0, 7 - i*4, 0])\n                    cylinder(h=15, r=0.5, center=true);\n        }\n    \n    // Right speaker\n    translate([30, -20, 0])\n        for(i = [0:3]) {\n            rotate([0, 90, 0])\n                translate([0, 7 - i*4, 0])\n                    cylinder(h=15, r=0.5, center=true);\n        }\n}\n\n// Logo\nmodule logo() {\n    translate([0, 22, 7.5])\n        cube([8, 3, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    // TV components\n    tv_body();\n    tv_screen();\n    vents();\n    speakers();\n    \n    // External features\n    translate([0, 0, 0]) {\n        controls();\n        ports();\n        logo();\n    }\n    \n    // Stand (optional - can be printed separately)\n    tv_stand();\n}",
    "renders": true
  },
  {
    "household_item": "radio",
    "openscad_code": "// Realistic medium-complexity 3D-printable radio\n// Approx 80 x 50 x 30 mm\n\n$fn = 36;\n\n// Main body\nmodule radio_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([78, 48, 28], center = true);\n            sphere(2);\n        }\n        // Hollow interior\n        translate([0, 0, -1])\n            cube([74, 44, 24], center = true);\n    }\n}\n\n// Front panel with speaker grill\nmodule front_panel() {\n    translate([0, 24.5, 0])\n    difference() {\n        cube([72, 1, 26], center = true);\n        // Speaker holes\n        for(y = [-10, 0, 10])\n            for(x = [-30, -20, -10, 0, 10, 20, 30])\n                translate([x, 0, y])\n                    cylinder(h = 2, r = 2);\n    }\n}\n\n// Tuning dial\nmodule tuning_dial() {\n    translate([-30, 25, 12])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 6, r = 12);\n        translate([0, 0, -1])\n            cylinder(h = 8, r = 2);\n    }\n}\n\n// Frequency display\nmodule frequency_display() {\n    translate([0, 25, 10])\n        cube([30, 1, 8], center = true);\n}\n\n// Volume knob\nmodule volume_knob() {\n    translate([30, 25, 0])\n    difference() {\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 6);\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 2.5);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    translate([38, 0, 12])\n    rotate([0, 90, 0])\n    cylinder(h = 40, r = 1);\n}\n\n// Handle\nmodule handle() {\n    translate([0, -27, 8])\n    difference() {\n        rotate([90, 0, 0])\n            cylinder(h = 60, r = 3);\n        translate([0, -5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 70, r = 2);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    for(pos = [-20, -10, 0, 10, 20])\n        translate([pos, 25, -8])\n            cylinder(h = 3, r = 3);\n}\n\n// Assemble radio\nradio_body();\nfront_panel();\ntuning_dial();\nfrequency_display();\nvolume_knob();\nantenna();\nhandle();\nbuttons();",
    "renders": true
  },
  {
    "household_item": "speaker",
    "openscad_code": "// Realistic Medium-Complexity Speaker (≈70 mm tall)\n// Main enclosure with grill, cone, surround, spider, magnet and terminals\n\n$fn = 36;\n\nmodule speaker() {\n    // Overall scale factor\n    scale(0.7) {\n\n        // --- Enclosure (front baffle) ---\n        // MDF-style box with rounded edges\n        difference() {\n            union() {\n                // Front baffle\n                translate([0,0,5])\n                    minkowski() {\n                        cube([80,80,3], center=true);\n                        cylinder(h=0.1, r=2, center=true);\n                    }\n                // Main box\n                translate([0,0,-18])\n                    cube([76,76,40], center=true);\n            }\n            // Recess for grill\n            translate([0,0,6.9])\n                cube([64,64,2], center=true);\n            // Terminal cup hole\n            translate([30,0,-35])\n                rotate([90,0,0])\n                    cylinder(h=20, d=12, center=true);\n        }\n\n        // --- Grill ---\n        // Perforated metal sheet\n        difference() {\n            translate([0,0,7])\n                cube([60,60,0.8], center=true);\n            // Hex pattern holes\n            for (dx = [-25:5:25])\n                for (dy = [-25:5:25])\n                    translate([dx, dy, 7.5])\n                        cylinder(h=1, d=2.5, center=true);\n        }\n\n        // --- Woofer Driver ---\n        translate([0,0,0])\n            rotate([0,180,0])  // Pointing forward\n            \n            // Mounting flange\n            translate([0,0,0])\n                cylinder(h=3, d1=48, d2=48, center=true);\n            \n            // Basket frame\n            difference() {\n                cylinder(h=15, d1=46, d2=40, center=false);\n                translate([0,0,1])\n                    cylinder(h=13, d1=38, d2=32, center=false);\n            }\n            \n            // Spider and voice-coil gap\n            translate([0,0,3])\n                cylinder(h=1, d=25, center=true);\n            \n            // Cone\n            translate([0,0,4.5])\n                cylinder(h=10, d1=38, d2=12, center=false);\n            \n            // Surround\n            difference() {\n                translate([0,0,4])\n                    cylinder(h=2, d1=42, d2=36, center=false);\n                translate([0,0,4.5])\n                    cylinder(h=1, d1=40, d2=38, center=false);\n            }\n            \n            // Dust cap\n            translate([0,0,14])\n                sphere(d=12);\n            \n            // Magnet\n            translate([0,0,-8])\n                cylinder(h=12, d=30, center=true);\n            \n            // Top plate\n            translate([0,0,-2])\n                cylinder(h=2, d=34, center=true);\n            \n            // Pole piece\n            translate([0,0,-8])\n                cylinder(h=18, d=12, center=true);\n    }\n\n    // --- Terminals ---\n    translate([30,0,-35])\n        rotate([90,0,0])\n            union() {\n                // Cup\n                cylinder(h=4, d=14, center=true);\n                // Posts\n                for (t = [-4,4])\n                    translate([0,t,3])\n                        cylinder(h=6, d=2, center=true);\n            }\n}\n\nspeaker();",
    "renders": true
  },
  {
    "household_item": "camera",
    "openscad_code": "// Realistic Camera Model - Medium Complexity\n// Based on DSLR camera proportions\n\n$fn = 32; // Smooth curves\nbody_width = 90;\nbody_height = 60;\nbody_depth = 45;\ngrip_width = 25;\ngrip_depth = 30;\nlens_diameter = 35;\nlens_length = 25;\n\nmodule camera_body() {\n    difference() {\n        // Main body\n        translate([0, 0, body_height/2])\n            cube([body_width, body_depth, body_height], center=true);\n        \n        // Grip cutout\n        translate([body_width/2 - grip_width/2, body_depth/2 - grip_depth/2, body_height/2])\n            cube([grip_width, grip_depth, body_height], center=true);\n    }\n    \n    // Grip addition\n    translate([body_width/2 - grip_width/2, body_depth/2 - grip_depth/2, body_height/2 - 5])\n        cube([grip_width + 2, grip_depth + 5, body_height - 10], center=true);\n}\n\nmodule lens_mount() {\n    // Lens mount ring\n    translate([0, 0, body_height/2 + 2])\n        cylinder(h=5, d=lens_diameter + 10);\n    \n    // Lens\n    translate([0, 0, body_height/2 + 5 + lens_length/2])\n        cylinder(h=lens_length, d=lens_diameter);\n    \n    // Front lens element\n    translate([0, 0, body_height/2 + 5 + lens_length])\n        cylinder(h=2, d=lens_diameter - 2);\n}\n\nmodule viewfinder() {\n    // Viewfinder housing\n    translate([0, body_depth/2 - 5, body_height/2 + 15])\n        cube([20, 10, 10], center=true);\n    \n    // Eyepiece\n    translate([0, body_depth/2, body_height/2 + 15])\n        cylinder(h=5, d=15);\n}\n\nmodule controls() {\n    // Mode dial\n    translate([-body_width/2 + 15, body_depth/2 - 8, body_height/2 + 5])\n        cylinder(h=3, d=12);\n    \n    // Shutter button\n    translate([body_width/2 - 20, body_depth/2 - 5, body_height/2 + 8])\n        cylinder(h=5, d=8);\n    \n    // Top display\n    translate([0, body_depth/2 - 10, body_height/2 + 1])\n        cube([30, 3, 8]);\n    \n    // Front control dial\n    for(i=[0:3]) {\n        rotate([0, 0, i * 90])\n            translate([body_width/2 - 5, 0, body_height/2])\n                cube([10, 2, 15], center=true);\n    }\n}\n\nmodule flash_hotshoe() {\n    // Hotshoe base\n    translate([0, 0, body_height/2 + 3])\n        cube([25, 5, 3], center=true);\n    \n    // Hotshoe grooves\n    for(i=[-1, 1]) {\n        translate([i * 8, 0, body_height/2 + 5])\n            cube([2, 5, 2], center=true);\n    }\n}\n\nmodule strap_lugs() {\n    // Left lug\n    translate([-body_width/2 - 2, 0, body_height/2])\n        cylinder(h=5, d=4);\n    \n    // Right lug\n    translate([body_width/2 + 2, 0, body_height/2])\n        cylinder(h=5, d=4);\n}\n\n// Build the camera\nunion() {\n    camera_body();\n    lens_mount();\n    viewfinder();\n    controls();\n    flash_hotshoe();\n    strap_lugs();\n}",
    "renders": true
  },
  {
    "household_item": "clock",
    "openscad_code": "// Realistic Medium-Complexity Clock\n// 3D-printable, no overhangs, ~70 mm diameter\n\n// Wall thickness for 3D printing\n$fn = 50;\nwall = 1.6;\n\n// Main body\nmodule clock_body() {\n    difference() {\n        // Outer rim\n        cylinder(h = 12, r = 35, center = true);\n        // Hollow core\n        cylinder(h = 14, r = 32, center = true);\n    }\n}\n\n// Clock face plate\nmodule face() {\n    difference() {\n        cylinder(h = wall, r = 32 - wall, center = true);\n        translate([0, 0, wall/2 + 0.01])\n            cylinder(h = wall*2, r = 30 - wall, center = true);\n    }\n}\n\n// Hour markers\nmodule hour_markers() {\n    for (a = [0:30:359]) {\n        rotate([0, 0, a - 90])\n        translate([28, 0, wall/2])\n        rotate([90, 0, 0])\n        linear_extrude(height = 2, center = true)\n            square([1.5, 4], center = true);\n    }\n}\n\n// Minute markers\nmodule minute_markers() {\n    for (a = [6:6:354]) {\n        rotate([0, 0, a - 90])\n        translate([29, 0, wall/2])\n        rotate([90, 0, 0])\n        linear_extrude(height = 1.5, center = true)\n            square([0.8, 2.5], center = true);\n    }\n}\n\n// Center pin\nmodule center_pin() {\n    cylinder(h = 5, r = 2, center = true);\n}\n\n// Hour hand\nmodule hour_hand() {\n    translate([0, 0, 3])\n    rotate([0, 0, 90])\n    linear_extrude(height = 1.5, center = true)\n        polygon(points = [[0, 0], [-2, 0], [-2, -4], [0, -19], [2, -4], [2, 0]]);\n}\n\n// Minute hand\nmodule minute_hand() {\n    translate([0, 0, 4.5])\n    rotate([0, 0, 180])\n    linear_extrude(height = 1.5, center = true)\n        polygon(points = [[0, 0], [-1.5, 0], [-1.5, -3], [0, -26], [1.5, -3], [1.5, 0]]);\n}\n\n// Second hand\nmodule second_hand() {\n    translate([0, 0, 6])\n    rotate([0, 0, 270])\n    linear_extrude(height = 1, center = true)\n        polygon(points = [[0, 0], [-0.8, 0], [-0.8, -2], [0, -28], [0.8, -2], [0.8, 0]]);\n}\n\n// Assembly\nclock_body();\ntranslate([0, 0, 6])\n    face();\nhour_markers();\nminute_markers();\ncenter_pin();\nhour_hand();\nminute_hand();\nsecond_hand();",
    "renders": true
  },
  {
    "household_item": "lamp",
    "openscad_code": "// Realistic Desk Lamp - Medium Complexity\n// All dimensions in mm, 3D-print friendly (no overhangs >45°, 2mm walls)\n\n// Base parameters\nbase_r = 25;\nbase_h = 8;\n\n// Stem parameters\nstem_r = 4;\nstem_h = 60;\n\n// Arm parameters\narm_len = 45;\narm_r  = 3;\n\n// Joint parameters\njoint_r = 6;\njoint_h = 10;\n\n// Shade parameters\nshade_top_r = 18;\nshade_bot_r = 24;\nshade_h     = 35;\nwall_t      = 2;          // uniform wall thickness\n\n// Bulb cavity\nbulb_r = 8;\nbulb_h = 20;\n\n// Cable hole\ncable_d = 4;\n\n// Base with rounded bottom and cable exit\nmodule base() {\n    difference() {\n        union() {\n            // Main base cylinder\n            cylinder(h = base_h, r = base_r, $fn = 48);\n\n            // Gentle fillet on bottom edge\n            translate([0, 0, -1])\n                cylinder(h = 2, r1 = base_r, r2 = base_r - 2, $fn = 48);\n        }\n\n        // Cable channel through back\n        rotate([90, 0, 0])\n            translate([0, 0, -base_r])\n                cylinder(h = base_r*2, r = cable_d/2, $fn = 32);\n    }\n}\n\n// Stem (single vertical tube)\nmodule stem() {\n    cylinder(h = stem_h, r = stem_r, $fn = 32);\n}\n\n// Hinge joint between stem and arm\nmodule joint() {\n    rotate([90, 0, 0])\n        cylinder(h = joint_h, r = joint_r, $fn = 32);\n}\n\n// Horizontal arm\nmodule arm() {\n    translate([0, -arm_len/2, 0])\n        rotate([0, 90, 0])\n            cylinder(h = arm_len, r = arm_r, $fn = 32);\n}\n\n// Conical lamp shade with hollow cavity\nmodule shade() {\n    difference() {\n        union() {\n            // Outer cone\n            cylinder(h = shade_h, r1 = shade_bot_r, r2 = shade_top_r, $fn = 48);\n\n            // Small lip on top edge for printability\n            translate([0, 0, shade_h - 1])\n                cylinder(h = 1, r = shade_top_r + 1, r2 = shade_top_r, $fn = 48);\n        }\n\n        // Inner cavity (conical)\n        translate([0, 0, -0.01])\n            cylinder(h = shade_h + 0.02,\n                     r1 = shade_bot_r - wall_t,\n                     r2 = shade_top_r - wall_t,\n                     $fn = 48);\n\n        // Bulb cavity (cylindrical cut)\n        translate([0, 0, shade_h - bulb_h - wall_t])\n            cylinder(h = bulb_h + wall_t + 1, r = bulb_r, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"gray\") base();\n    translate([0, 0, base_h]) {\n        color(\"silver\") stem();\n        translate([0, 0, stem_h - joint_h/2]) {\n            color(\"silver\") joint();\n            translate([joint_r + arm_r, 0, joint_h/2]) {\n                color(\"silver\") arm();\n                translate([arm_len/2, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        color(\"ivory\") shade();\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fan",
    "openscad_code": "// Desk Fan - Medium complexity realistic style\n// Overall dimensions: ~80mm tall, ~90mm diameter\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main assembly\nmodule fan() {\n    union() {\n        // Base\n        translate([0, 0, 0]) base();\n        \n        // Vertical stand\n        translate([0, 0, 20]) stand();\n        \n        // Motor housing\n        translate([0, 0, 70]) motor_housing();\n        \n        // Fan blades\n        translate([0, 0, 82]) fan_blades();\n        \n        // Front grill\n        translate([0, 0, 85]) front_grill();\n        \n        // Rear grill\n        translate([0, 0, 79]) rear_grill();\n        \n        // Control knob\n        translate([15, 0, 72]) control_knob();\n    }\n}\n\n// Base - weighted circular base\nmodule base() {\n    difference() {\n        cylinder(h = 20, d = 60);\n        // Hollow bottom for weight reduction\n        translate([0, 0, 5]) cylinder(h = 15, d = 50);\n    }\n}\n\n// Vertical stand tube\nmodule stand() {\n    difference() {\n        cylinder(h = 50, d = 20);\n        // Wire channel\n        translate([0, 0, 10]) cylinder(h = 30, d = 8);\n    }\n}\n\n// Motor housing - cylindrical with details\nmodule motor_housing() {\n    difference() {\n        union() {\n            // Main housing\n            cylinder(h = 12, d = 30);\n            // Mounting ring for grill\n            translate([0, 0, 6]) cylinder(h = 2, d = 35);\n        }\n        // Motor shaft hole\n        translate([0, 0, -1]) cylinder(h = 14, d = 5);\n    }\n}\n\n// Fan blade assembly\nmodule fan_blades() {\n    rotate([0, 0, $t * 360])  // Animation rotation\n    union() {\n        // Blade hub\n        cylinder(h = 3, d = 8);\n        \n        // 5 blades with realistic twist\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 0, 1.5])\n                rotate([20, 0, 0])\n                linear_extrude(height = 2, twist = 15)\n                blade_profile();\n            }\n        }\n    }\n}\n\n// Blade cross-section profile\nmodule blade_profile() {\n    difference() {\n        // Blade shape\n        hull() {\n            translate([3, 0, 0]) circle(d = 2);\n            translate([22, 0, 0]) circle(d = 8);\n        }\n        // Cutout for weight reduction\n        translate([12, 0, 0]) circle(d = 3);\n    }\n}\n\n// Front grill - safety mesh\nmodule front_grill() {\n    difference() {\n        // Grill ring\n        cylinder(h = 1.5, d = 90);\n        \n        // Remove center\n        translate([0, 0, -0.5]) cylinder(h = 3, d = 15);\n        \n        // Grill opening\n        translate([0, 0, -0.5]) cylinder(h = 3, d = 85);\n    }\n    \n    // Radial grill bars\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, 37, 0])\n        cube([2, 8, 1.5], center = true);\n    }\n    \n    // Concentric rings\n    for(r = [20:15:50]) {\n        translate([0, 0, 0.75])\n        rotate_extrude()\n        translate([r, 0, 0]) circle(d = 1.5);\n    }\n}\n\n// Rear grill - simpler pattern\nmodule rear_grill() {\n    difference() {\n        cylinder(h = 1, d = 85);\n        translate([0, 0, -0.5]) cylinder(h = 2, d = 15);\n    }\n    \n    // Simple radial bars\n    for(i = [0:17]) {\n        rotate([0, 0, i * 20])\n        translate([0, 40, 0])\n        cube([1.5, 10, 1], center = true);\n    }\n}\n\n// Control knob with indicator\nmodule control_knob() {\n    difference() {\n        union() {\n            cylinder(h = 10, d = 12);\n            // Indicator line\n            translate([0, 6, 5]) cube([1, 2, 10], center = true);\n        }\n        // Mounting hole\n        translate([0, 0, -1]) cylinder(h = 12, d = 4);\n    }\n}\n\n// Render the complete fan\nfan();",
    "renders": true
  },
  {
    "household_item": "heater",
    "openscad_code": "// Electric space heater - realistic style, medium complexity\n// Dimensions: 80x60x100mm\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main module\nmodule heater() {\n    // Base housing\n    difference() {\n        // Main body\n        cube([80, 60, 100], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([80 - 2*wall_thickness, 60 - 2*wall_thickness, 100 - wall_thickness], center = true);\n    }\n    \n    // Front grill\n    difference() {\n        // Grill frame\n        translate([0, 0, 20])\n        cube([82, 62, 4], center = true);\n        \n        // Horizontal slots\n        for (y = [-25:5:25]) {\n            translate([0, y, 22])\n            cube([82, 3, 2], center = true);\n        }\n        \n        // Vertical slots\n        for (x = [-35:5:35]) {\n            translate([x, 0, 22])\n            cube([2, 62, 2], center = true);\n        }\n    }\n    \n    // Control panel\n    translate([0, 32, 50])\n    difference() {\n        cube([40, 4, 20], center = true);\n        \n        // Power button\n        translate([-15, 0, 5])\n        cylinder(h = 5, r = 3, center = true);\n        \n        // Temperature knob\n        translate([0, 0, 5])\n        cylinder(h = 5, r = 5, center = true);\n        \n        // Mode selector\n        translate([15, 0, 5])\n        cylinder(h = 5, r = 3, center = true);\n    }\n    \n    // Handle\n    translate([0, -35, 75])\n    difference() {\n        // Main handle bar\n        rotate([90, 0, 0])\n        cylinder(h = 50, r = 5, center = true);\n        \n        // Grip indentations\n        for (z = [-20:5:20]) {\n            translate([0, 0, z])\n            rotate([90, 0, 0])\n            cylinder(h = 4, r1 = 5, r2 = 4, center = true);\n        }\n    }\n    \n    // Feet\n    module foot(offset_x) {\n        translate([offset_x, 0, -52])\n        cube([8, 50, 4], center = true);\n    }\n    \n    foot(-30);\n    foot(30);\n    \n    // Rear vents\n    for (y = [-20:10:20]) {\n        translate([0, y, -48])\n        cube([76, 4, 2], center = true);\n    }\n    \n    // Power cord entry\n    translate([38, 0, 20])\n    rotate([0, 90, 0])\n    cylinder(h = 10, r1 = 4, r2 = 2);\n    \n    // Indicator lights\n    translate([-30, 32, 60])\n    color(\"red\")\n    sphere(r = 2);\n    \n    translate([-20, 32, 60])\n    color(\"green\")\n    sphere(r = 2);\n}\n\nheater();",
    "renders": true
  },
  {
    "household_item": "washingmachine",
    "openscad_code": "// Realistic mid-complexity washing-machine model (≈70 mm tall)\n// All dimensions in mm, printable without supports\n\n$fn = 32;          // Smooth curves for 3D printing\nwall = 1.5;        // Printable wall thickness\n\n// Main module\nmodule washing_machine() {\n    difference() {\n        // Outer shell\n        body();\n        \n        // Front door hole\n        translate([0, -19.9, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 40, d = 28, center = true);\n    }\n    \n    // Door\n    translate([0, -20, 0])\n        rotate([90, 0, 0])\n            door_assembly();\n    \n    // Control panel\n    control_panel();\n    \n    // Feet\n    for (x = [-14, 14])\n        for (y = [-14, 14])\n            translate([x, y, -18])\n                foot();\n}\n\nmodule body() {\n    // Main box\n    difference() {\n        cube([40, 40, 70], center = true);\n        cube([40 - 2*wall, 40 - 2*wall, 70 - wall], center = true);\n    }\n    \n    // Top curved lid\n    translate([0, 0, 35])\n        difference() {\n            scale([1, 1, 0.4])\n                sphere(d = 42);\n            translate([0, 0, -5])\n                cube([42, 42, 10], center = true);\n            translate([0, 0, -6])\n                cube([42 - 2*wall, 42 - 2*wall, 12], center = true);\n        }\n}\n\nmodule door_assembly() {\n    // Door ring\n    difference() {\n        cylinder(h = 3, d = 30);\n        cylinder(h = 4, d = 25);\n    }\n    \n    // Glass window\n    translate([0, 0, 1.5])\n        cylinder(h = 1.5, d = 24.9);\n    \n    // Door handle\n    translate([0, 15, 1.5])\n        rotate([90, 0, 0])\n            cylinder(h = 6, d = 3);\n}\n\nmodule control_panel() {\n    // Panel base\n    translate([0, 15, 45])\n        difference() {\n            cube([30, 10, 8], center = true);\n            translate([0, 0, wall])\n                cube([30 - 2*wall, 10 - 2*wall, 8], center = true);\n        }\n    \n    // Knobs\n    for (i = [-1:1]) {\n        translate([i*8, 15, 49])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 4);\n    }\n    \n    // Display window\n    translate([0, 15, 49])\n        cube([8, 0.5, 3], center = true);\n}\n\nmodule foot() {\n    cylinder(h = 3, d = 4);\n}\n\nwashing_machine();",
    "renders": true
  },
  {
    "household_item": "dryer",
    "openscad_code": "// Compact Realistic Dryer (≈ 60 mm tall)\n// Medium complexity, printable with 0.8 mm walls\n\n$fn = 32;\n\n// Overall dimensions\ndryer_w = 40;\ndryer_d = 35;\ndryer_h = 60;\n\nwall_t = 1.0;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, dryer_h/2])\n            cube([dryer_w, dryer_d, dryer_h], center=true);\n        \n        // Hollow inside\n        translate([0, 0, dryer_h/2])\n            cube([dryer_w - 2*wall_t, dryer_d - 2*wall_t, dryer_h - wall_t], center=true);\n        \n        // Front opening for drum\n        translate([0, dryer_d/2 + 0.1, dryer_h/2])\n            rotate([90, 0, 0])\n            cylinder(h = wall_t + 0.2, d = 26);\n    }\n}\n\nmodule door() {\n    // Door frame\n    difference() {\n        translate([0, dryer_d/2 + wall_t/2, dryer_h/2])\n            cube([30, wall_t, 30], center=true);\n        \n        // Window hole\n        translate([0, dryer_d/2 + wall_t, dryer_h/2])\n            cube([24, wall_t + 0.2, 24], center=true);\n    }\n    \n    // Window glass\n    translate([0, dryer_d/2 + wall_t + 0.05, dryer_h/2])\n        cube([23, wall_t/2, 23], center=true);\n    \n    // Handle\n    translate([10, dryer_d/2 + wall_t + 1, dryer_h/2 - 8])\n        cube([4, 1, 8]);\n}\n\nmodule control_panel() {\n    // Top panel\n    translate([0, -dryer_d/4, dryer_h - 3])\n        cube([dryer_w - 6, 8, 4], center=true);\n    \n    // Knobs\n    for (x = [-10, 0, 10]) {\n        translate([x, -dryer_d/4, dryer_h - 2])\n            cylinder(h = 2, d = 4);\n        translate([x, -dryer_d/4, dryer_h - 0.5])\n            sphere(d = 3);\n    }\n    \n    // Display\n    translate([-3, -dryer_d/4, dryer_h - 1])\n        cube([12, 6, 0.5], center=true);\n}\n\nmodule back_vent() {\n    difference() {\n        translate([0, -dryer_d/2 - 0.1, dryer_h - 10])\n            cube([20, wall_t + 0.2, 15], center=true);\n        \n        // Vent slots\n        for (y = [dryer_h - 16:3:dryer_h - 7]) {\n            translate([0, -dryer_d/2 - 0.1, y])\n                cube([18, wall_t + 0.4, 1.5], center=true);\n        }\n    }\n}\n\nmodule feet() {\n    // Four feet\n    for (x = [-dryer_w/2 + 4, dryer_w/2 - 4])\n    for (y = [-dryer_d/2 + 4, dryer_d/2 - 4]) {\n        translate([x, y, 1])\n            cylinder(h = 2, d = 3);\n    }\n}\n\nmodule drum() {\n    // Inner drum ridges\n    rotate([0, 0, 45])\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 0, dryer_h/2])\n            cube([2, 22, 35], center=true);\n    }\n}\n\nunion() {\n    main_body();\n    door();\n    control_panel();\n    back_vent();\n    feet();\n    \n    // Drum visible through door\n    %drum();\n}",
    "renders": true
  },
  {
    "household_item": "iron",
    "openscad_code": "// Realistic Iron - Medium Complexity\n// 3D printable, ~80mm long\n\n$fn = 32;\n\n// Main parameters\niron_length = 80;\niron_width = 42;\niron_height = 35;\nhandle_radius = 8;\nwall_thick = 2;\n\nmodule iron_body() {\n    // Sole plate\n    translate([0, 0, 0])\n    difference() {\n        hull() {\n            cube([iron_length, iron_width, wall_thick], center = true);\n            translate([-iron_length/2 + 15, 0, 0])\n            scale([1, 0.7, 1])\n            sphere(r = iron_width/2);\n        }\n        \n        // Steam holes\n        for(x = [-25:10:15])\n            for(y = [-12:8:12])\n                translate([x, y, wall_thick/2 + 0.1])\n                cylinder(h = wall_thick + 0.2, r = 1.5, $fn = 16);\n    }\n    \n    // Upper body\n    translate([0, 0, wall_thick/2 + 10])\n    difference() {\n        hull() {\n            translate([-iron_length/2 + 20, 0, 0])\n            scale([1, 0.8, 0.6])\n            sphere(r = 20);\n            translate([iron_length/2 - 20, 0, 0])\n            cube([iron_length/2, iron_width - 10, 20], center = true);\n        }\n        \n        // Temperature dial cavity\n        translate([iron_length/2 - 25, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 6, $fn = 24);\n    }\n    \n    // Water reservoir lid\n    translate([-10, 0, wall_thick + 15])\n    rotate([0, 20, 0])\n    cube([20, 20, 1], center = true);\n}\n\nmodule handle() {\n    translate([0, 0, iron_height + handle_radius])\n    rotate([15, 0, 0])\n    difference() {\n        hull() {\n            translate([-20, 0, 0])\n            sphere(r = handle_radius);\n            translate([20, 0, 0])\n            sphere(r = handle_radius);\n            translate([-20, 0, 5])\n            sphere(r = handle_radius * 0.8);\n            translate([20, 0, 5])\n            sphere(r = handle_radius * 0.8);\n        }\n        \n        // Handle grip removal\n        translate([0, 0, -handle_radius - 5])\n        cube([50, handle_radius * 1.8, handle_radius * 2], center = true);\n    }\n    \n    // Handle supports\n    for(x = [-15, 15])\n        translate([x, 0, iron_height/2 + 5])\n        cylinder(h = iron_height/2, r = 3, $fn = 16);\n}\n\nmodule steam_control() {\n    // Steam burst button\n    translate([iron_length/2 - 20, iron_width/2 - 8, wall_thick + 18])\n    cylinder(h = 3, r = 4, $fn = 16);\n    \n    // Spray button\n    translate([iron_length/2 - 20, -(iron_width/2 - 8), wall_thick + 18])\n    cylinder(h = 3, r = 3, $fn = 16);\n}\n\nmodule cord() {\n    // Cord entry point\n    translate([-iron_length/2 + 5, 0, wall_thick + 15])\n    rotate([45, 0, 0])\n    cylinder(h = 15, r1 = 4, r2 = 2, $fn = 16);\n}\n\n// Assembly\nunion() {\n    iron_body();\n    handle();\n    steam_control();\n    cord();\n}",
    "renders": true
  },
  {
    "household_item": "humidifier",
    "openscad_code": "// Medium-complexity realistic tabletop humidifier\n// Approx. 85 mm tall, single-piece 3D-printable body\n\n$fn = 36;\n\n// Main dimensions\nbase_h = 12;\ntank_h = 45;\ntank_r = 35;\nneck_h = 8;\nmist_chim_h = 15;\nmist_chim_r = 6;\nvent_h = 4;\nvent_r = 4;\n\n// Wall thickness\nwall = 2;\n\nmodule body() {\n    // Water tank (hollow cylinder)\n    difference() {\n        cylinder(h = tank_h + neck_h, r = tank_r);\n        translate([0, 0, wall])\n            cylinder(h = tank_h + neck_h - wall, r = tank_r - wall);\n    }\n}\n\nmodule base() {\n    // Control base\n    difference() {\n        // Main block\n        cube([tank_r*2, tank_r*2, base_h], center = true);\n        \n        // Recess to receive tank\n        translate([0, 0, -base_h/2 + wall])\n            cube([tank_r*2 - 4, tank_r*2 - 4, base_h], center = true);\n    }\n    \n    // Control knob\n    translate([tank_r - 6, 0, base_h/2 + 3])\n        rotate([90, 0, 0])\n        cylinder(h = 6, r1 = 4, r2 = 3);\n}\n\nmodule mist_chimney() {\n    // Mist outlet tube\n    difference() {\n        cylinder(h = mist_chim_h, r = mist_chim_r);\n        translate([0, 0, wall])\n            cylinder(h = mist_chim_h - wall, r = mist_chim_r - wall);\n    }\n    \n    // Vent holes around top\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n        translate([mist_chim_r - vent_r/2, 0, mist_chim_h - vent_h - 1])\n            rotate([90, 0, 0])\n            cylinder(h = vent_h, r = vent_r);\n    }\n}\n\nmodule handle() {\n    // Arc handle on tank\n    translate([0, tank_r - wall, tank_h/2])\n        rotate([90, 0, 0])\n        difference() {\n            // Outer torus\n            rotate_extrude()\n                translate([tank_r - wall - 4, 0])\n                    circle(r = 3);\n            // Inner torus (hollow)\n            rotate_extrude()\n                translate([tank_r - wall - 4, 0])\n                    circle(r = 1);\n        }\n}\n\n// Assembly\ntranslate([0, 0, base_h/2])\n    base();\n\ntranslate([0, 0, base_h])\n    body();\n\ntranslate([0, 0, base_h + tank_h + neck_h - wall])\n    mist_chimney();\n\nhandle();",
    "renders": true
  },
  {
    "household_item": "dehumidifier",
    "openscad_code": "// Dehumidifier (realistic style, medium complexity)\n// Overall dimensions: 80x50x75 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([80, 50, 75], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 2.5])\n            cube([80-wall*2, 50-wall*2, 75-wall*2], center=true);\n    }\n}\n\n// Front air intake grille\nmodule grille() {\n    difference() {\n        // Grille plate\n        translate([0, 25.5, 0])\n            cube([70, wall, 65], center=true);\n        \n        // Horizontal slots\n        for (z = [-27.5:5:27.5]) {\n            translate([0, 25.5, z])\n                cube([65, wall+0.5, 3], center=true);\n        }\n    }\n}\n\n// Control panel\nmodule controls() {\n    translate([0, -25.5, 12.5]) {\n        // Panel base\n        cube([40, wall, 20], center=true);\n        \n        // Display screen\n        translate([0, wall/2, 5])\n            cube([25, 0.1, 8], center=true);\n        \n        // Buttons\n        for (x = [-12:6:12]) {\n            translate([x, wall/2, -3])\n                cylinder(h=wall, r=2, $fn=16);\n        }\n    }\n}\n\n// Top handle\nmodule handle() {\n    translate([0, 0, 40]) {\n        difference() {\n            // Handle arch\n            rotate([90, 0, 0])\n                cylinder(h=60, r1=4, r2=4, center=true);\n            \n            // Cutout\n            rotate([90, 0, 0])\n                translate([0, 0, -5])\n                    cylinder(h=70, r1=2, r2=2, center=true);\n        }\n    }\n}\n\n// Water tank\nmodule tank() {\n    translate([0, 0, -35]) {\n        difference() {\n            // Tank body\n            cube([65, 40, 25], center=true);\n            \n            // Hollow\n            translate([0, 0, 2.5])\n                cube([65-wall*2, 40-wall*2, 25-wall*2], center=true);\n            \n            // Fill opening\n            translate([0, 0, 12.5])\n                cylinder(h=wall, r=8, $fn=32);\n        }\n    }\n}\n\n// Side air vents\nmodule vents() {\n    // Left side vents\n    translate([-42.5, 0, 0]) {\n        for (z = [-25:8:25]) {\n            translate([0, 0, z])\n                cube([wall, 30, 4], center=true);\n        }\n    }\n    \n    // Right side vents\n    translate([42.5, 0, 0]) {\n        for (z = [-25:8:25]) {\n            translate([0, 0, z])\n                cube([wall, 30, 4], center=true);\n        }\n    }\n}\n\n// Power cord\nmodule cord() {\n    translate([-35, -25, -35]) {\n        // Cord entry point\n        cylinder(h=wall, r=3, $fn=16);\n        \n        // Cord\n        rotate([90, 0, 0])\n            translate([0, 0, -15])\n                cylinder(h=30, r=2, $fn=16);\n    }\n}\n\n// Feet\nmodule feet() {\n    for (x = [-30:60:30])\n    for (y = [-20:40:40]) {\n        translate([x, y, -40]) {\n            difference() {\n                cylinder(h=5, r=4, $fn=16);\n                cylinder(h=5, r=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    grille();\n    controls();\n    handle();\n    tank();\n    vents();\n    cord();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "purifier",
    "openscad_code": "// Air Purifier - Realistic Style, Medium Complexity\n// Designed for 3D printing (~80mm height)\n\n$fn = 50;  // Smooth curves\n\nmodule main_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = 60, d = 55);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h = 58, d = 51);\n        \n        // Top air outlet holes\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([17, 0, 50])\n                    cylinder(h = 10, d = 6);\n        }\n        \n        // Side air intake slots\n        for (i = [0:15:345]) {\n            rotate([0, 0, i])\n                translate([27.5, 0, 25])\n                    cube([2, 20, 15], center = true);\n        }\n    }\n}\n\nmodule control_panel() {\n    // Top control ring\n    difference() {\n        translate([0, 0, 60])\n            cylinder(h = 3, d = 53);\n        \n        translate([0, 0, 59.5])\n            cylinder(h = 4, d = 45);\n    }\n    \n    // Control buttons\n    for (pos = [[-15, 0], [0, 15], [15, 0]]) {\n        translate([pos[0], pos[1], 63])\n            cylinder(h = 2, d = 6);\n    }\n    \n    // Power button\n    translate([0, 0, 63])\n        cylinder(h = 2.5, d = 8);\n}\n\nmodule base() {\n    // Bottom base with feet\n    difference() {\n        translate([0, 0, -5])\n            cylinder(h = 5, d = 60);\n        \n        translate([0, 0, -5])\n            cylinder(h = 5, d = 50);\n    }\n    \n    // Support feet\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([22, 0, -2.5])\n                cube([10, 5, 5], center = true);\n    }\n}\n\nmodule filter_indicator() {\n    // LED ring around top\n    translate([0, 0, 60.5])\n        difference() {\n            cylinder(h = 1.5, d = 49);\n            cylinder(h = 1.6, d = 43);\n        }\n}\n\nmodule air_quality_sensor() {\n    // Small sensor grille on front\n    translate([27.5, 0, 15])\n        difference() {\n            cube([5, 15, 8]);\n            for (j = [0:2:6]) {\n                translate([-1, -7 + j, 2])\n                    cube([7, 1.5, 4]);\n            }\n        }\n}\n\n// Main assembly\nunion() {\n    main_body();\n    control_panel();\n    base();\n    filter_indicator();\n    air_quality_sensor();\n}",
    "renders": true
  },
  {
    "household_item": "thermostat",
    "openscad_code": "// Thermostat - Realistic Style, Medium Complexity\n// 3D printable wall-mount smart thermostat\n\n// Overall dimensions\nthermostat_width = 80;\nthermostat_height = 55;\nthermostat_depth = 20;\nwall_thickness = 2;\n\n// Main body with rounded edges\nmodule main_body() {\n    difference() {\n        // Outer rounded rectangular body\n        minkowski() {\n            cube([thermostat_width-wall_thickness*2, thermostat_height-wall_thickness*2, thermostat_depth-wall_thickness], center=true);\n            sphere(wall_thickness/2, $fn=20);\n        }\n        \n        // Hollow out the back\n        translate([0,0,-thermostat_depth/2-wall_thickness])\n            cube([thermostat_width-wall_thickness*4, thermostat_height-wall_thickness*4, thermostat_depth], center=true);\n    }\n}\n\n// Screen bezel\nmodule screen() {\n    color(\"black\")\n    translate([0, 10, thermostat_depth/2+0.1])\n        cube([thermostat_width-20, 25, 1], center=true);\n}\n\n// Touch buttons below screen\nmodule buttons() {\n    for(i=[-1, 0, 1]) {\n        translate([i*15, -15, thermostat_depth/2+0.1])\n            cylinder(h=1, r=4, $fn=32);\n    }\n}\n\n// Temperature sensor vents\nmodule sensor_vents() {\n    difference() {\n        // Vent housing\n        translate([0, -thermostat_height/2+5, 0])\n            cube([thermostat_width-10, 8, 4], center=true);\n        \n        // Vent slots\n        for(i=[-2:1:2]) {\n            translate([i*8, -thermostat_height/2+5, 0])\n                cube([2, 8, 5], center=true);\n        }\n    }\n}\n\n// Wall mounting bracket\nmodule wall_mount() {\n    difference() {\n        // Mounting plate\n        translate([0, 0, -thermostat_depth/2-2])\n            cube([60, 40, 4], center=true);\n        \n        // Screw holes\n        for(x=[-20, 20])\n            for(y=[-10, 10])\n                translate([x, y, -thermostat_depth/2-4])\n                    cylinder(h=5, r=2, $fn=16);\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    translate([0, 0, thermostat_depth/2+0.5])\n        linear_extrude(height=0.5)\n            text(\"SMART\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"blue\")\n    translate([thermostat_width/2-8, thermostat_height/2-8, thermostat_depth/2+0.1])\n        cylinder(h=1, r=3, $fn=16);\n}\n\n// Assembly\nunion() {\n    main_body();\n    wall_mount();\n    screen();\n    buttons();\n    sensor_vents();\n    brand_label();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "household_item": "router",
    "openscad_code": "// Realistic Medium-Complexity Router Model\n// Approx. 80 mm x 50 mm x 70 mm\n\n// Overall dimensions\nrouter_w = 80;\nrouter_d = 50;\nrouter_h = 70;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule base() {\n    // Main base plate\n    translate([0, 0, 0])\n        cube([router_w, router_d, 6], center=true);\n    \n    // Bottom vents\n    for (x = [-30, -15, 0, 15, 30])\n        translate([x, 0, -3.5])\n            cube([8, router_d-10, 3], center=true);\n}\n\nmodule body() {\n    // Lower body\n    difference() {\n        translate([0, 0, 12])\n            cube([router_w-10, router_d-8, 18], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 12])\n            cube([router_w-10-wall*2, router_d-8-wall*2, 18-wall], center=true);\n    }\n    \n    // Upper body\n    difference() {\n        translate([0, 0, 27])\n            cube([router_w-15, router_d-12, 20], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 27])\n            cube([router_w-15-wall*2, router_d-12-wall*2, 20-wall], center=true);\n    }\n}\n\nmodule antenna() {\n    // Left antenna\n    translate([-router_w/2+5, -router_d/2+5, router_h-5])\n        rotate([0, 45, 0])\n        cylinder(h=15, d1=2.5, d2=1, center=false);\n    \n    // Right antenna\n    translate([router_w/2-5, -router_d/2+5, router_h-5])\n        rotate([0, 45, 0])\n        cylinder(h=15, d1=2.5, d2=1, center=false);\n}\n\nmodule front_panel() {\n    // Front face\n    translate([0, router_d/2-1, 15])\n        cube([router_w-12, 2, 30], center=true);\n    \n    // LED indicators\n    for (pos = [-25, -15, -5, 5, 15, 25])\n        translate([pos, router_d/2, 22])\n            sphere(d=2, $fn=8);\n    \n    // Ethernet ports\n    for (port = [-20, -10, 0, 10, 20])\n        translate([port, router_d/2-1, 12])\n            cube([8, 3, 6], center=true);\n    \n    // WAN port\n    translate([30, router_d/2-1, 12])\n        cube([8, 3, 6], center=true);\n    \n    // Power port\n    translate([-35, router_d/2-1, 12])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=6, center=true);\n}\n\nmodule top_vent() {\n    // Top cooling vents\n    for (y = [-15, -10, -5, 0, 5, 10, 15])\n        translate([0, y, router_h-8])\n            cube([router_w-20, 3, 2], center=true);\n}\n\nmodule feet() {\n    // Rubber feet\n    foot_positions = [\n        [-router_w/2+8, -router_d/2+8, -3.5],\n        [router_w/2-8, -router_d/2+8, -3.5],\n        [-router_w/2+8, router_d/2-8, -3.5],\n        [router_w/2-8, router_d/2-8, -3.5]\n    ];\n    \n    for (pos = foot_positions) {\n        translate(pos)\n            cylinder(h=1.5, d=8, $fn=16);\n    }\n}\n\n// Assemble the router\nunion() {\n    base();\n    body();\n    antenna();\n    front_panel();\n    top_vent();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "modem",
    "openscad_code": "// Cable modem – medium complexity, printable, recognizable\n// Overall footprint 90 mm × 65 mm × 30 mm\n\n// Wall / shell thickness for printing\nwall = 1.8;\n\n// Main plastic enclosure\nmodule enclosure() {\n    // Lower shell\n    difference() {\n        cube([90, 65, 15], center=true);\n        translate([0,0,1])\n            cube([90-wall*2, 65-wall*2, 13], center=true);\n    }\n    // Upper shell (snap-fit style)\n    translate([0,0,15])\n    difference() {\n        cube([90, 65, 14], center=true);\n        translate([0,0,-1])\n            cube([90-wall*2, 65-wall*2, 14], center=true);\n    }\n}\n\n// Ventilation grill pattern on top\nmodule vents() {\n    for(y=[-25:5:25])\n        translate([0,y,29])\n            cube([80, 2, 2], center=true);\n}\n\n// LED indicator strip\nmodule leds() {\n    for(i=[-40:10:40])\n        translate([i, -31, 22])\n        difference() {\n            cylinder(h=3, d=5, $fn=20);\n            translate([0,0,1.5])\n                cylinder(h=3, d=3, $fn=20);\n        }\n}\n\n// Coax (F-connector) port\nmodule coax() {\n    translate([-50, 0, 0])\n    rotate([0,90,0])\n    union() {\n        cylinder(h=12, d=12, $fn=30);\n        translate([0,0,12])\n            cylinder(h=8, d=8, $fn=30);\n    }\n}\n\n// Ethernet port block\nmodule ethernet() {\n    translate([50, -15, 0])\n    for(y=[0:10:20]) {\n        translate([0,y,0])\n        difference() {\n            cube([10, 8, 12], center=true);\n            translate([0,0,-6])\n                cube([7.5, 6, 13], center=true);\n        }\n    }\n}\n\n// Reset button hole\nmodule reset_button() {\n    translate([40, 25, 0])\n        cylinder(h=15, d=3, $fn=20);\n}\n\n// Rubber feet (simple cylinders)\nmodule feet() {\n    for(x=[-35, 35])\n        for(y=[-23, 23]) {\n            translate([x, y, -8.5])\n                cylinder(h=2, d=4, $fn=20);\n        }\n}\n\n// Assemble\nunion() {\n    enclosure();\n    vents();\n    leds();\n    coax();\n    ethernet();\n    feet();\n}\ndifference() {\n    children(0);\n    reset_button();\n}",
    "renders": true
  },
  {
    "household_item": "printer",
    "openscad_code": "// Compact 3D printer model (approx. 80 mm tall)\n// All dimensions in mm, printable without supports\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule frame() {\n    // Base\n    difference() {\n        cube([60, 60, 5], center = true);\n        translate([0, 0, -2.5]) cube([55, 55, 6], center = true);\n    }\n    \n    // Vertical posts\n    for (x = [-25, 25])\n        translate([x, 0, 22])\n            cube([6, 6, 44], center = true);\n    \n    // Top crossbar\n    translate([0, 0, 44])\n        cube([60, 6, 6], center = true);\n}\n\n// Print bed\nmodule bed() {\n    color(\"silver\")\n    translate([0, 0, 12])\n    difference() {\n        cube([45, 45, 4], center = true);\n        translate([0, 0, -2]) cube([43, 43, 5], center = true);\n    }\n}\n\n// Extruder assembly\nmodule extruder() {\n    color(\"gray\")\n    union() {\n        // Carriage\n        translate([0, 0, 32])\n            cube([40, 10, 8], center = true);\n        \n        // Extruder block\n        translate([0, -10, 35])\n            cube([10, 10, 14], center = true);\n        \n        // Nozzle\n        translate([0, -15, 28.5])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Control panel\nmodule panel() {\n    color(\"black\")\n    translate([30, 0, 25])\n    rotate([0, 90, 0])\n    difference() {\n        cube([20, 30, 4], center = true);\n        translate([0, 0, -2.5]) cube([18, 28, 5], center = true);\n    }\n}\n\n// Filament spool\nmodule spool() {\n    color(\"red\")\n    translate([0, 30, 44])\n    rotate([90, 0, 0])\n    union() {\n        difference() {\n            cylinder(h = 15, r = 12);\n            cylinder(h = 16, r = 4);\n        }\n        // Filament guide\n        translate([0, 0, 7.5])\n            rotate([0, 90, 0])\n            cylinder(h = 25, r = 1.5);\n    }\n}\n\n// Power supply\nmodule psu() {\n    color(\"darkgreen\")\n    translate([0, -30, 8])\n    cube([20, 15, 12], center = true);\n}\n\n// Assembly\nframe();\nbed();\nextruder();\npanel();\nspool();\npsu();",
    "renders": true
  },
  {
    "household_item": "scanner",
    "openscad_code": "// Realistic 3D printable scanner model\n// Overall dimensions: 80 x 60 x 25 mm\n\n// Main scanner body\nmodule scanner_body() {\n    difference() {\n        // Main enclosure\n        translate([0, 0, 10]) cube([80, 60, 20], center=true);\n        \n        // Top recess for glass\n        translate([0, 0, 20]) cube([70, 50, 2], center=true);\n        \n        // Front button recesses\n        for (i = [-30, -20, -10]) {\n            translate([i, 25, 20]) cube([8, 4, 2], center=true);\n        }\n    }\n}\n\n// Glass scanning bed\nmodule scanning_glass() {\n    translate([0, 0, 21]) cube([70, 50, 1], center=true);\n}\n\n// Control buttons\nmodule buttons() {\n    for (i = [-30, -20, -10]) {\n        translate([i, 25, 22]) cylinder(h=2, r=3, $fn=16);\n    }\n}\n\n// Document lid\nmodule lid() {\n    // Hinge\n    translate([0, -30, 20]) rotate([90, 0, 0]) cylinder(h=3, r=2, $fn=16);\n    \n    // Main lid plate\n    translate([0, 5, 20]) rotate([-90, 0, 0]) {\n        difference() {\n            cube([74, 54, 4], center=true);\n            // Interior hollow\n            translate([0, 0, 1]) cube([70, 50, 2], center=true);\n        }\n    }\n    \n    // Lid handle\n    translate([0, 30, 20]) cube([20, 4, 2], center=true);\n}\n\n// Paper guides\nmodule paper_guides() {\n    // Left guide\n    translate([-33, 0, 15]) cube([2, 54, 10], center=true);\n    \n    // Right guide\n    translate([33, 0, 15]) cube([2, 54, 10], center=true);\n}\n\n// USB port\nmodule usb_port() {\n    difference() {\n        translate([40, -30, 15]) cube([8, 6, 4], center=true);\n        translate([40, -30, 15]) cube([6, 4, 2], center=true);\n    }\n}\n\n// Power LED\nmodule power_led() {\n    translate([30, 25, 22]) cylinder(h=1, r=2, $fn=16);\n}\n\n// Feet for stability\nmodule feet() {\n    for (x = [-30, 30]) {\n        for (y = [-20, 20]) {\n            translate([x, y, 0]) cylinder(h=3, r=4, $fn=16);\n        }\n    }\n}\n\n// Assemble scanner\nunion() {\n    scanner_body();\n    scanning_glass();\n    buttons();\n    lid();\n    paper_guides();\n    usb_port();\n    power_led();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "monitor",
    "openscad_code": "// Monitor with stand for 3D printing\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall scale\nmodule monitor() {\n    scale(0.3) {\n        union() {\n            screen_assembly();\n            stand_assembly();\n        }\n    }\n}\n\n// Screen module\nmodule screen_assembly() {\n    // Main screen bezel\n    difference() {\n        // Outer frame\n        translate([0, 0, 5])\n            cube([160, 90, 8], center = true);\n        \n        // Screen opening\n        translate([0, 0, 9.5])\n            cube([140, 80, 1], center = true);\n    }\n    \n    // Actual screen surface\n    translate([0, 0, 8.9])\n        color(\"darkslategray\")\n        cube([138, 78, 0.2], center = true);\n    \n    // Back cover\n    translate([0, 0, -5])\n        cube([155, 85, 8], center = true);\n    \n    // Buttons\n    for (i = [0:3]) {\n        translate([70 + i * 5, -47, 5])\n            cylinder(h = 2, r = 1.5);\n    }\n}\n\n// Stand module\nmodule stand_assembly() {\n    // VESA mount bracket\n    translate([0, 0, -15])\n    difference() {\n        cube([40, 10, 10], center = true);\n        // Mounting holes\n        translate([15, 0, -15])\n            cylinder(h = 20, r = 2);\n        translate([-15, 0, -15])\n            cylinder(h = 20, r = 2);\n    }\n    \n    // Neck\n    translate([0, 15, -30])\n        cylinder(h = 25, r1 = 8, r2 = 4);\n    \n    // Base\n    translate([0, 30, -38])\n    difference() {\n        // Main base\n        cube([80, 20, 8], center = true);\n        \n        // Cable management hole\n        translate([0, 0, -4.5])\n            cylinder(h = 10, r = 3);\n    }\n    \n    // Base feet\n    translate([-35, 30, -42])\n        cube([5, 20, 2], center = true);\n    translate([35, 30, -42])\n        cube([5, 20, 2], center = true);\n}\n\n// Render the monitor\nmonitor();",
    "renders": true
  },
  {
    "household_item": "keyboard",
    "openscad_code": "// Realistic 60% keyboard (≈75 mm wide)\n// Main case\ndifference() {\n    // Base shell\n    translate([-37.5, -15, 0])\n        cube([75, 30, 5], center = true);\n\n    // USB-C cutout\n    translate([32.5, 0, 2.5])\n        rotate([90, 0, 0])\n            cylinder(h = 15, r = 3.5, $fn = 16);\n}\n\n// Top plate with key openings\ndifference() {\n    translate([-37.5, -15, 5])\n        cube([75, 30, 2], center = false);\n    \n    // Key switch cutouts (Cherry MX style)\n    for (row = [0:4]) {\n        for (col = [0:14]) {\n            if (!(row == 4 && col > 11)) {\n                x = -35.5 + col * 5;\n                y = -13.5 + row * 5.5;\n                translate([x, y, 5])\n                    cube([4, 4, 3], center = true);\n            }\n        }\n    }\n}\n\n// Keycaps\nmodule keycap(row, col) {\n    x = -35.5 + col * 5;\n    y = -13.5 + row * 5.5;\n    z = 7;\n    \n    // Keycap stem\n    translate([x, y, z])\n        cube([3.8, 3.8, 0.5], center = true);\n    \n    // Keycap top\n    translate([x, y, z + 0.5])\n        cube([4.5, 4.5, 2], center = true);\n    \n    // Dish\n    translate([x, y, z + 2.5])\n        difference() {\n            cube([4.5, 4.5, 0.5], center = true);\n            translate([0, 0, -0.2])\n                sphere(r = 5, $fn = 16);\n        }\n}\n\n// Generate keycaps\nfor (row = [0:4]) {\n    for (col = [0:14]) {\n        if (!(row == 4 && col > 11)) {\n            keycap(row, col);\n        }\n    }\n}\n\n// Spacebar (larger key)\ntranslate([-35.5 + 3 * 5, -13.5 + 4 * 5.5, 7])\n    cube([11, 4.5, 2.5], center = true);\n\n// Rubber feet\ntranslate([-33, -13, 0])\n    cylinder(h = 1, r = 2, $fn = 16);\ntranslate([-33, 13, 0])\n    cylinder(h = 1, r = 2, $fn = 16);\ntranslate([33, -13, 0])\n    cylinder(h = 1, r = 2, $fn = 16);\ntranslate([33, 13, 0])\n    cylinder(h = 1, r = 2, $fn = 16);",
    "renders": true
  },
  {
    "household_item": "mouse",
    "openscad_code": "// Realistic medium-complexity computer mouse\n// Overall size ≈ 110 mm long × 60 mm wide × 35 mm tall\n\n// Basic parameters\n$fn = 48;                // smooth curves\nwall = 2;                // printable wall thickness\nbody_len = 100;\nbody_wid = 60;\nbody_hgt = 30;\n\nmodule mouse_body() {\n    // Main ergonomic shell\n    hull() {\n        // front dome\n        translate([  body_len/2 - 10, 0, 0])\n            sphere(d = body_wid * 0.9);\n        // rear hump\n        translate([- body_len/2 + 15, 0,  0])\n            sphere(d = body_wid * 0.8);\n    }\n    // Flatten top slightly\n    intersection() {\n        children();\n        translate([0, 0, -body_hgt/2 - 1])\n            cube([body_len + 2, body_wid + 2, body_hgt + 2], center = true);\n    }\n}\n\nmodule buttons() {\n    // Left button\n    difference() {\n        translate([body_len/4, -body_wid/4, body_hgt/2 - 1])\n            cube([body_len/2.5, body_wid/2.2, 8], center = true);\n        translate([body_len/4, -body_wid/4, body_hgt/2 + 4])\n            sphere(d = body_wid/2.2 + 2);\n    }\n    // Right button (mirror)\n    mirror([0, 1, 0]) children();\n}\n\nmodule scroll_wheel() {\n    // Wheel\n    rotate([0, 90, 0])\n        translate([body_len/2 - 20, 0, body_hgt/2 + 3])\n            cylinder(h = 6, d = 8, center = true);\n    // Wheel axle\n    rotate([0, 90, 0])\n        translate([body_len/2 - 20, 0, body_hgt/2 + 3])\n            cylinder(h = 10, d = 2, center = true);\n}\n\nmodule side_grips() {\n    // Left grip texture\n    for(i = [1:5]) {\n        translate([-body_len/2 + 10 + i*8, body_wid/2 + 1, 0])\n            cube([4, wall, body_hgt - 10], center = true);\n    }\n    // Right grip texture\n    mirror([0, 1, 0]) children();\n}\n\nmodule base() {\n    // Flat bottom plate\n    difference() {\n        translate([0, 0, -body_hgt/2])\n            cube([body_len + 2, body_wid + 2, wall], center = true);\n        // Sensor hole\n        translate([0, 0, -body_hgt/2 - 1])\n            cylinder(h = wall + 2, d = 10, center = true);\n        // Glide pads\n        for(pos = [[-body_len/3, -body_wid/3], \n                   [-body_len/3,  body_wid/3],\n                   [ body_len/3,  0]]) {\n            translate(pos + [0, 0, -body_hgt/2])\n                cube([12, 6, wall], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body shell\n    mouse_body() sphere(d = 1);\n    \n    // Buttons\n    buttons() {\n        translate([body_len/4, body_wid/4, body_hgt/2 - 1])\n            cube([body_len/2.5, body_wid/2.2, 8], center = true);\n    }\n    \n    // Scroll wheel\n    scroll_wheel();\n    \n    // Side grips\n    side_grips() {\n        translate([-body_len/2 + 10, body_wid/2 + 1, 0])\n            cube([4, wall, body_hgt - 10], center = true);\n    }\n    \n    // Bottom plate\n    base();\n}",
    "renders": true
  },
  {
    "household_item": "headphones",
    "openscad_code": "// Realistic Medium-Complexity Headphones – OpenSCAD\n// Wall thickness 1.2 mm, printable without support, ~80 mm wide\n\n$fn = 36;          // smooth curves\nwall = 1.2;        // 3D-print friendly wall thickness\nscaleFactor = 0.8; // overall scaling for ~80 mm width\n\nmodule headband() {\n    // padded arch\n    difference() {\n        // outer shell\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([35, 0, 0])\n                circle(r = 6);\n        // inner cavity\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([35, 0, 0])\n                circle(r = 6 - wall);\n    }\n    // cushion strip\n    translate([0, 0, -6])\n        scale([1, 1, 0.4])\n            rotate_extrude(angle = 180, $fn = 64)\n                translate([35, 0, 0])\n                    circle(r = 6 - wall);\n}\n\nmodule yoke() {\n    // fork that holds earcup\n    difference() {\n        // outer shape\n        cube([8, 4, 15], center = true);\n        // screw hole\n        translate([0, 0, 7])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 1.5, center = true);\n    }\n}\n\nmodule earcup(pad = true) {\n    // outer cup\n    difference() {\n        cylinder(h = 10, r = 22);\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 22 - wall);\n    }\n    // grill holes\n    for (a = [0:30:150])\n        rotate([0, 0, a])\n            translate([15, 0, 5])\n                cylinder(h = 2, r = 1.5);\n    // soft pad\n    if (pad)\n        translate([0, 0, 10])\n            cylinder(h = 6, r1 = 20, r2 = 22);\n}\n\nmodule earAssembly(side) {\n    // combine yoke + cup\n    translate([0, side * 30, 0]) {\n        rotate([0, 90, 0])\n            yoke();\n        translate([0, 0, -5])\n            rotate([0, 90, 0])\n                earcup();\n    }\n}\n\n// assemble\nscale([scaleFactor, scaleFactor, scaleFactor]) {\n    headband();\n    earAssembly(1);\n    earAssembly(-1);\n}",
    "renders": true
  },
  {
    "household_item": "earbuds",
    "openscad_code": "// Realistic Earbuds - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 50;\nwall_thickness = 1.2;\n\n// Main earbud assembly\nmodule earbud() {\n    // Outer shell\n    difference() {\n        // Main body - slightly flattened sphere\n        scale([1, 1.2, 1])\n        sphere(r=8);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        scale([0.85, 1.05, 0.9])\n        sphere(r=7.5);\n    }\n    \n    // Sound port\n    translate([0, 0, 8])\n    cylinder(h=5, r1=4, r2=3);\n    \n    // Mesh grill\n    translate([0, 0, 12.5])\n    linear_extrude(0.5)\n    circle(r=3, $fn=30);\n    \n    // Vent hole\n    translate([6, 0, 2])\n    rotate([90, 0, 0])\n    cylinder(h=1.5, r=1);\n}\n\n// Silicone ear tip\nmodule eartip() {\n    // Base connector\n    translate([0, 0, 13])\n    cylinder(h=3, r1=3.2, r2=3.5);\n    \n    // Flexible dome\n    for (i = [0:2]) {\n        translate([0, 0, 13 + i*1.5])\n        scale([1 - i*0.15, 1 - i*0.15, 1])\n        cylinder(h=1.5, r1=4 + i*0.5, r2=4.5 + i*0.5);\n    }\n}\n\n// Stem with flat bottom\nmodule stem() {\n    // Main stem\n    translate([0, -12, 0])\n    rotate([90, 0, 0])\n    cylinder(h=20, r1=3.5, r2=2.5);\n    \n    // Flat bottom\n    translate([0, -32, 0])\n    cube([7, 2, 2.5], center=true);\n    \n    // Charging contacts\n    translate([0, -33.5, 0])\n    for (x = [-2.5, 2.5]) {\n        translate([x, 0, 0])\n        cylinder(h=0.5, r=0.8);\n    }\n}\n\n// Left earbud\ntranslate([-15, 0, 0]) {\n    earbud();\n    eartip();\n    stem();\n}\n\n// Right earbud (mirror of left)\nmirror([1, 0, 0])\ntranslate([-15, 0, 0]) {\n    earbud();\n    eartip();\n    stem();\n}\n\n// Optional: Charging case cutout preview\n// Uncomment to check fit\n/*\ntranslate([0, -40, -5])\ncube([30, 30, 15], center=true);\n*/",
    "renders": true
  },
  {
    "household_item": "charger",
    "openscad_code": "// Wall charger with foldable US plug\n// Overall size: 30 x 45 x 70 mm\n// 3D-printable – no overhangs, 1.2 mm walls\n\n// Wall thickness\nwall = 1.2;\n\n// Main housing\nmodule housing() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([28, 43, 68], center = true);\n            sphere(wall);\n        }\n\n        // Hollow inside\n        color(\"lightgray\")\n        minkowski() {\n            cube([28 - 2*wall, 43 - 2*wall, 68 - 2*wall], center = true);\n            sphere(wall/2);\n        }\n\n        // Front face recess for USB ports\n        translate([0, 22, 0])\n        cube([22, 4, 30], center = true);\n    }\n}\n\n// Foldable prongs – one module, mirrored\nmodule prong() {\n    // Thin blade\n    linear_extrude(height = 1.5, center = true)\n    square([6.5, 1.5], center = true);\n\n    // Pivot pin\n    translate([0, -1.5, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d = 2, $fn = 10);\n}\n\nmodule plug_assembly() {\n    // Base block\n    cube([13, 8, 7], center = true);\n\n    // Recess for prong rotation\n    translate([0, 0, 3.5])\n    rotate([90, 0, 0])\n    cylinder(h = 8, d = 6, $fn = 20);\n\n    // Two prongs\n    for (x = [-4, 4]) {\n        translate([x, 4, 0])\n        rotate([90, 0, 0])\n        prong();\n    }\n}\n\n// USB-A port opening\nmodule usb_port() {\n    difference() {\n        // Outer shell\n        cube([12, 5, 15], center = true);\n\n        // Inner cavity\n        translate([0, 0, -5])\n        cube([8, 4, 10], center = true);\n    }\n}\n\n// LED indicator\nmodule led() {\n    translate([0, 22, 30])\n    cylinder(h = 1, d = 3, $fn = 12);\n}\n\n// Assembly\nhousing();\n\n// Attach plug on back\ntranslate([0, 0, -35 - 3.5])\nplug_assembly();\n\n// Two USB-A ports on front face\nfor (i = [-1, 1]) {\n    translate([i * 8, 22, 0])\n    usb_port();\n}\n\n// LED indicator\nled();",
    "renders": true
  },
  {
    "household_item": "battery",
    "openscad_code": "// Realistic medium-complexity AA battery (≈ 50 mm long, Ø14 mm)\n// All dimensions in mm\n\n$fn = 36;          // Smooth curves for printing\nwall = 1.0;        // Printable wall thickness\ncell_d = 14;       // Overall diameter\ncell_l = 50;       // Overall length\nbutton_h = 1.5;    // Positive terminal protrusion\nbase_r = 0.5;      // Radius on negative end\nrim_h = 2;         // Top rim height\nlabel_step = 2;    // Label relief depth\nband_n = 8;        // Number of label bands\n\n// Main battery body\nmodule body() {\n    difference() {\n        // Outer shell\n        cylinder(h = cell_l, d = cell_d);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = cell_l - 2*wall, d = cell_d - 2*wall);\n        \n        // Negative end rounding\n        translate([0, 0, -0.01])\n            cylinder(h = base_r + 0.02, d = cell_d - 2*wall - 2*base_r);\n    }\n}\n\n// Positive button terminal\nmodule positive() {\n    translate([0, 0, cell_l])\n        cylinder(h = button_h, d = cell_d/2, $fn = 60);\n}\n\n// Top rim with label gap\nmodule rim() {\n    difference() {\n        cylinder(h = rim_h, d = cell_d + 0.2);\n        translate([0, 0, -0.01])\n            cylinder(h = rim_h + 0.02, d = cell_d);\n    }\n}\n\n// Label embossing rings\nmodule label_bands() {\n    for(i = [1 : band_n]) {\n        z = wall + (i - 0.5) * (cell_l - 2*wall - button_h - rim_h) / band_n;\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = label_step/2, d = cell_d + 0.2);\n                cylinder(h = label_step/2 + 0.02, d = cell_d);\n            }\n    }\n}\n\n// Negative flat end\nmodule negative() {\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h = wall, d = cell_d);\n            cylinder(h = wall + 0.02, d = cell_d - 2*wall);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    positive();\n    translate([0, 0, cell_l - rim_h])\n        rim();\n    label_bands();\n    negative();\n}",
    "renders": true
  },
  {
    "household_item": "projector",
    "openscad_code": "// Medium-complexity realistic projector\n// ~70 mm long, 3D-printable (no steep overhangs)\n\n$fn = 36; // Smooth curves\n\n// Main assembly\nmodule projector() {\n    difference() {\n        union() {\n            body();\n            lens();\n            vents();\n            feet();\n            buttons();\n            focus();\n        }\n        // Cavity for electronics\n        translate([20, 0, 10]) cube([45, 40, 25]);\n    }\n}\n\nmodule body() {\n    // Main enclosure\n    translate([-15, -30, 0])\n        cube([70, 60, 40]);\n\n    // Top slope\n    translate([-15, -30, 40])\n        rotate([0, 15, 0])\n        cube([75, 60, 20]);\n\n    // Front bezel\n    color(\"gray\")\n    translate([-15, -30, 0])\n        cube([10, 60, 40]);\n}\n\nmodule lens() {\n    // Lens barrel\n    color(\"black\")\n    rotate([0, 90, 0])\n    translate([0, 15, 0])\n        cylinder(h = 15, r1 = 12, r2 = 14);\n\n    // Lens glass\n    color(\"lightblue\")\n    rotate([0, 90, 0])\n    translate([0, 15, 14.5])\n        sphere(12);\n}\n\nmodule vents() {\n    // Side vents\n    for (y = [-25, -15, -5, 5, 15, 25]) {\n        color(\"darkgray\")\n        translate([0, y, 20])\n        cube([70, 2, 3]);\n    }\n}\n\nmodule feet() {\n    // Four rubber feet\n    for (x = [0, 50], y = [-25, 25]) {\n        color(\"black\")\n        translate([x, y, -2])\n        cylinder(h = 2, r = 3);\n    }\n}\n\nmodule buttons() {\n    // Control panel top\n    color(\"dimgray\")\n    translate([5, 20, 42])\n        cube([15, 15, 3]);\n\n    // Individual buttons\n    for (i = [0:2]) {\n        color(\"red\")\n        translate([8 + i * 4, 24, 45.5])\n            cube([2, 2, 1]);\n    }\n}\n\nmodule focus() {\n    // Focus ring\n    color(\"silver\")\n    rotate([0, 90, 0])\n    translate([0, 0, 0])\n        cylinder(h = 5, r = 13);\n}\n\nprojector();",
    "renders": true
  },
  {
    "household_item": "server",
    "openscad_code": "// OpenSCAD 3D printable server model (realistic, medium complexity)\n// Dimensions roughly 90 x 40 x 120 mm\n\n$fn = 32;           // global circle resolution\nwall = 2;           // uniform wall thickness for 3D printing\n\n// Main module\nmodule server() {\n    // Server chassis\n    difference() {\n        // Outer shell\n        cube([90, 40, 120], center = true);\n        \n        // Hollow out inside\n        translate([0, 0, 1])\n            cube([90 - 2*wall, 40 - 2*wall, 120 - 2*wall], center = true);\n    }\n    \n    // Front bezel with drive bays\n    translate([0, 20, 0])\n        cube([90, 0.1, 120], center = true);\n    \n    // 2x 3.5\" drive bays\n    for (z = [35, 65]) {\n        translate([0, 20.1, z])\n            color(\"black\")\n            cube([85, 0.2, 20]);\n    }\n    \n    // Power button\n    translate([35, 20.2, 90])\n        cylinder(h = 1, r = 3);\n    \n    // Status LEDs\n    for (x = [-30, -25, -20]) {\n        translate([x, 20.2, 95])\n            cylinder(h = 0.5, r = 1);\n    }\n    \n    // Rear I/O shield\n    translate([0, -20, 0])\n        cube([90, 0.1, 120], center = true);\n    \n    // Rear fan grill (80 mm)\n    difference() {\n        translate([0, -20.1, 0])\n            cube([80, 0.2, 80], center = true);\n        for (i = [-3:3]) {\n            translate([i*10, -20.2, 0])\n                cube([2, 0.3, 80], center = true);\n            translate([0, -20.2, i*10])\n                cube([80, 0.3, 2], center = true);\n        }\n    }\n    \n    // Rack ears\n    rack_ear(45);\n    mirror([1, 0, 0])\n        rack_ear(45);\n    \n    // Top vent slots\n    for (y = [-15:5:15]) {\n        translate([0, y, 59])\n            cube([80, 3, wall]);\n    }\n    \n    // Bottom feet\n    foot([-40, -15, -60]);\n    foot([40, -15, -60]);\n    foot([-40, 15, -60]);\n    foot([40, 15, -60]);\n}\n\n// Rack ear module\nmodule rack_ear(x) {\n    translate([x, 0, 0])\n        difference() {\n            cube([wall, 40, 110], center = true);\n            for (z = [-40:10:40]) {\n                translate([0, 0, z])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall + 1, r = 2.5, center = true);\n            }\n        }\n}\n\n// Foot module\nmodule foot(pos) {\n    translate(pos)\n        cylinder(h = 4, r = 5);\n}\n\n// Assemble\nserver();",
    "renders": true
  },
  {
    "household_item": "amplifier",
    "openscad_code": "// Realistic Medium-Complexity Guitar Amplifier\n// Approx 90 x 55 x 65 mm\n\n$fn = 36;\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        union() {\n            // Main body\n            translate([0, 0, 25])\n                cube([80, 50, 50], center = true);\n            \n            // Front face extra thickness for controls\n            translate([0, -25, 25])\n                cube([76, 4, 46], center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 27])\n            cube([74, 46, 46], center = true);\n    }\n}\n\n// Front grille cloth area\nmodule grille() {\n    difference() {\n        // Grille frame\n        translate([0, -27, 35])\n            cube([50, 2, 30], center = true);\n        \n        // Grille holes - simulated with small cylinders\n        for(x = [-20:5:20]) {\n            for(y = [20:5:50]) {\n                translate([x, -28, y])\n                    cylinder(h = 3, r = 1.5, center = true);\n            }\n        }\n    }\n}\n\n// Control knobs\nmodule knobs() {\n    // Volume knob\n    translate([-20, -27, 45])\n        knob();\n    \n    // Gain knob\n    translate([-10, -27, 45])\n        knob();\n    \n    // Tone knob\n    translate([0, -27, 45])\n        knob();\n    \n    // Master knob\n    translate([10, -27, 45])\n        knob();\n}\n\nmodule knob() {\n    difference() {\n        // Knob body\n        cylinder(h = 6, r = 4);\n        \n        // Indicator line\n        translate([0, -3.5, 3])\n            cube([1, 1, 7], center = true);\n    }\n}\n\n// Input jack\nmodule input_jack() {\n    translate([-25, -27, 25])\n        cylinder(h = 8, r = 3.5);\n}\n\n// Handle\nmodule handle() {\n    translate([0, 0, 52])\n        difference() {\n            // Handle bar\n            cylinder(h = 60, r = 3, center = true);\n            \n            // Grip area\n            translate([0, 0, 0])\n                cylinder(h = 50, r = 2, center = true);\n        }\n}\n\n// Back panel with vents\nmodule back_panel() {\n    difference() {\n        // Back cover\n        translate([0, 25, 25])\n            cube([76, 2, 46], center = true);\n        \n        // Ventilation slots\n        for(z = [10:5:40]) {\n            translate([0, 26, z])\n                cube([60, 3, 3], center = true);\n        }\n        \n        // Power cable hole\n        translate([30, 26, 15])\n            cylinder(h = 3, r = 3, center = true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    foot_pos = [[-30, -20, 0], [30, -20, 0], [-30, 20, 0], [30, 20, 0]];\n    for(pos = foot_pos) {\n        translate(pos)\n            cylinder(h = 3, r = 4);\n    }\n}\n\n// LED indicator\nmodule led() {\n    translate([20, -27, 45])\n        cylinder(h = 2, r = 2);\n}\n\n// Assembly\nunion() {\n    chassis();\n    grille();\n    knobs();\n    input_jack();\n    handle();\n    back_panel();\n    feet();\n    led();\n}",
    "renders": true
  },
  {
    "household_item": "receiver",
    "openscad_code": "// Realistic-style Receiver for 3D printing\n// Medium complexity, ~90 lines\n// Overall size ~75 mm\n\n// Wall thickness for printability\nwall = 2;\n\n// Main housing block\nmodule receiver_body() {\n    difference() {\n        // Outer block with rounded top edges\n        hull() {\n            translate([-wall, -wall, 0])\n                cube([35 + wall*2, 28 + wall*2, 20]);\n            translate([0, 0, 0])\n                cube([35, 28, 20]);\n            translate([0, 0, 20])\n                cube([35, 28, 0.1]);\n            translate([0, 0, 20])\n                sphere(d=28);\n        }\n        \n        // Hollow cavity\n        translate([wall, wall, wall])\n            cube([35 - wall*2, 28 - wall*2, 20 - wall]);\n        \n        // Connector cutout front\n        translate([-1, 10, 5])\n            cube([6, 8, 10]);\n        \n        // Connector cutout back\n        translate([30, 10, 5])\n            cube([6, 8, 10]);\n    }\n}\n\n// Heat sink fins on top\nmodule heat_sinks() {\n    for(y = [4:6:22]) {\n        translate([5, y, 20])\n            cube([25, 2, 8]);\n    }\n}\n\n// Front panel RCA connectors (2)\nmodule front_connectors() {\n    for(x = [10, 25]) {\n        translate([x, -1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=8);\n        translate([x, -1.5, 10])\n            rotate([90, 0, 0])\n                cylinder(h=4, d=5);\n    }\n}\n\n// Rear binding posts (4)\nmodule binding_posts() {\n    for(i = [0:3]) {\n        translate([35 + 2, 5 + i*6, 10])\n            rotate([0, 90, 0])\n                cylinder(h=5, d=3);\n    }\n}\n\n// Display window\nmodule display() {\n    translate([7, 26.5, 10])\n        cube([21, 3, 5]);\n}\n\n// Buttons array\nmodule buttons() {\n    for(i = [0:3]) {\n        translate([5 + i*7, 26.5, 15])\n            cube([4, 1.5, 1]);\n    }\n}\n\n// Assembly\nunion() {\n    receiver_body();\n    heat_sinks();\n    front_connectors();\n    binding_posts();\n    display();\n    buttons();\n}",
    "renders": true
  },
  {
    "household_item": "subwoofer",
    "openscad_code": "// Subwoofer module with realistic styling\n// Overall dimensions: 60mm cube with details\n\n$fn = 50;  // Smooth curves\n\n// Main subwoofer module\nmodule subwoofer() {\n    // Main enclosure - 60mm cube with rounded edges\n    difference() {\n        minkowski() {\n            cube([50, 50, 50], center = true);\n            sphere(5);\n        }\n        \n        // Front face cutout for speaker\n        translate([0, 0, 25.1])\n            cylinder(h = 10, r1 = 22, r2 = 22, center = true);\n    }\n    \n    // Front grille\n    translate([0, 0, 28])\n        difference() {\n            cylinder(h = 2, r1 = 30, r2 = 30, center = true);\n            \n            // Grille holes - hex pattern\n            for (x = [-24:8:24])\n                for (y = [-24:8:24])\n                    translate([x, y, 0])\n                        cylinder(h = 3, r1 = 1.5, r2 = 1.5, center = true);\n        }\n    \n    // Speaker cone\n    translate([0, 0, 24])\n        difference() {\n            cylinder(h = 4, r1 = 20, r2 = 20, center = true);\n            cylinder(h = 5, r1 = 3, r2 = 3, center = true);\n        }\n    \n    // Speaker surround\n    translate([0, 0, 22])\n        rotate_extrude()\n            translate([20, 0, 0])\n                circle(r = 2);\n    \n    // Control panel on top\n    translate([0, 20, 25])\n        difference() {\n            cube([30, 5, 8], center = true);\n            // Volume knob\n            translate([-10, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r1 = 3, r2 = 3, center = true);\n            // Power LED\n            translate([10, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 1, r1 = 2, r2 = 2, center = true);\n        }\n    \n    // Rear port tube\n    difference() {\n        translate([0, 0, -25])\n            rotate([0, 90, 0])\n                cylinder(h = 15, r1 = 8, r2 = 8, center = true);\n        translate([0, 0, -25])\n            rotate([0, 90, 0])\n                cylinder(h = 16, r1 = 7, r2 = 7, center = true);\n    }\n    \n    // Rubber feet\n    for (x = [-20, 20])\n        for (y = [-20, 20])\n            translate([x, y, -28])\n                cylinder(h = 3, r1 = 3, r2 = 3, center = true);\n    \n    // Cable entry\n    translate([0, -25, -10])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r1 = 2, r2 = 2, center = true);\n}\n\n// Generate the subwoofer\nsubwoofer();",
    "renders": true
  },
  {
    "household_item": "soundbar",
    "openscad_code": "// Realistic 3D-printable Soundbar (medium complexity)\n// Overall dimensions: ~80 mm wide × 40 mm deep × 30 mm high\n\n$fn = 36;               // Smooth curves\nwall = 2;               // Uniform printable wall thickness\nbody_w = 80;            // Main enclosure width\nbody_d = 40;            // Main enclosure depth\nbody_h = 20;            // Main enclosure height\nfoot_h = 5;             // Rubber foot height\ngrill_depth = 3;        // Front grill thickness\n\nmodule main_enclosure() {\n    difference() {\n        // Outer shell\n        translate([0, 0, body_h/2])\n            cube([body_w, body_d, body_h], center=true);\n\n        // Hollow cavity\n        translate([0, 0, body_h/2])\n            cube([body_w - 2*wall, body_d - 2*wall, body_h - wall], center=true);\n\n        // Front grill recess\n        translate([0, body_d/2 - grill_depth/2, body_h/2])\n            cube([body_w - 2*wall, grill_depth + 0.1, body_h - 2*wall], center=true);\n    }\n}\n\nmodule front_grill() {\n    difference() {\n        // Grill plate\n        translate([0, body_d/2 - grill_depth/2, body_h/2])\n            cube([body_w - 2*wall, grill_depth, body_h - 2*wall], center=true);\n\n        // Speaker holes (left channel)\n        for (x = [-body_w/2 + 10: 8: -10]) {\n            translate([x, body_d/2 - grill_depth/2, body_h/2 - 5])\n                cylinder(h = grill_depth + 0.1, r = 3, center=true);\n            translate([x, body_d/2 - grill_depth/2, body_h/2 + 5])\n                cylinder(h = grill_depth + 0.1, r = 3, center=true);\n        }\n\n        // Speaker holes (right channel, mirrored)\n        for (x = [body_w/2 - 10: -8: 10]) {\n            translate([x, body_d/2 - grill_depth/2, body_h/2 - 5])\n                cylinder(h = grill_depth + 0.1, r = 3, center=true);\n            translate([x, body_d/2 - grill_depth/2, body_h/2 + 5])\n                cylinder(h = grill_depth + 0.1, r = 3, center=true);\n        }\n\n        // Central tweeter holes slightly smaller\n        for (x = [-6: 6: 6]) {\n            translate([x, body_d/2 - grill_depth/2, body_h/2])\n                cylinder(h = grill_depth + 0.1, r = 2, center=true);\n        }\n    }\n}\n\nmodule status_led() {\n    // Small LED window on front center\n    translate([0, body_d/2 - grill_depth - 0.1, body_h/2 + 7])\n        cube([6, 0.5, 2], center=true);\n}\n\nmodule rubber_feet() {\n    // Four rounded rubber feet\n    foot_r = 3;\n    foot_pos = [body_w/2 - 10, body_d/2 - 10];\n    for (x = [-foot_pos[0], foot_pos[0]])\n        for (y = [-foot_pos[1], foot_pos[1]])\n            translate([x, y, foot_h/2])\n                cylinder(h = foot_h, r = foot_r, center=true);\n}\n\nmodule back_panel() {\n    // Rear connections panel slightly inset\n    panel_w = 20;\n    panel_h = 10;\n    translate([0, -body_d/2 + wall/2, body_h/2])\n        cube([panel_w, wall, panel_h], center=true);\n\n    // Ventilation slots\n    for (i = [-2:1:2]) {\n        translate([0, -body_d/2 + wall/2, body_h/2 + i*2])\n            cube([panel_w - 4, wall + 0.1, 1], center=true);\n    }\n}\n\nmodule top_buttons() {\n    // Volume + / – buttons on top right\n    btn_w = 4;\n    btn_d = 3;\n    btn_h = 1;\n    spacing = 6;\n    for (i = [-0.5, 0.5]) {\n        translate([body_w/2 - 10, 0, body_h + btn_h/2 + i*spacing])\n            cube([btn_w, btn_d, btn_h], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_enclosure();\n    front_grill();\n    status_led();\n    rubber_feet();\n    back_panel();\n    top_buttons();\n}",
    "renders": true
  },
  {
    "household_item": "webcam",
    "openscad_code": "// Realistic Webcam - Medium Complexity\n// Designed for 3D printing, no overhangs\n\n// Main parameters\n$fn = 50;  // Smooth curves\nwebcam_length = 65;\nwebcam_width = 45;\nwebcam_height = 35;\nwall_thickness = 2;\n\n// Lens assembly\nmodule lens_assembly() {\n    translate([0, webcam_height/2 - 10, webcam_length/2 - 15]) {\n        // Lens housing\n        difference() {\n            cylinder(h=15, d=20, center=false);\n            translate([0, 0, -1])\n                cylinder(h=17, d=16, center=false);\n        }\n        \n        // Lens glass\n        translate([0, 0, 12])\n            sphere(d=16);\n            \n        // Focus ring\n        for(i=[0:3:360]) {\n            rotate([0, 0, i])\n                translate([9, 0, 6])\n                    cube([1, 1.5, 8], center=true);\n        }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    translate([-8, webcam_height/2 - 5, webcam_length/2 - 5]) {\n        cylinder(h=2, d=4);\n    }\n    translate([8, webcam_height/2 - 5, webcam_length/2 - 5]) {\n        cylinder(h=2, d=4);\n    }\n}\n\n// Microphone holes\nmodule microphone() {\n    translate([0, webcam_height/2 - 8, webcam_length/2 - 3]) {\n        for(i=[-2:1:2]) {\n            translate([i*4, 0, 0])\n                cylinder(h=5, d=1.5);\n        }\n    }\n}\n\n// Mounting clip\nmodule mounting_clip() {\n    translate([-webcam_width/2 - 5, 5, webcam_length/2 - 25]) {\n        difference() {\n            // Clip base\n            union() {\n                cube([10, webcam_height - 10, 30]);\n                translate([5, webcam_height - 15, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, d=10);\n            }\n            \n            // Clip opening\n            translate([5, webcam_height - 20, 15])\n                rotate([90, 0, 0])\n                    cylinder(h=15, d=5);\n        }\n    }\n}\n\n// Main body\nmodule webcam_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([webcam_width, webcam_height, webcam_length], center=true);\n            sphere(d=wall_thickness*2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            cube([webcam_width - wall_thickness*2, \n                  webcam_height - wall_thickness*2, \n                  webcam_length - wall_thickness], center=true);\n        \n        // Front opening for lens\n        translate([0, webcam_height/2 - 10, webcam_length/2])\n            cube([25, 25, 5], center=true);\n    }\n}\n\n// Cable port at rear\nmodule cable_port() {\n    translate([0, webcam_height/2 - 10, -webcam_length/2])\n        difference() {\n            cylinder(h=10, d=12, center=true);\n            translate([0, 0, -5.1])\n                cylinder(h=12, d=8, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    webcam_body();\n    lens_assembly();\n    leds();\n    microphone();\n    mounting_clip();\n    cable_port();\n}",
    "renders": true
  },
  {
    "household_item": "drone",
    "openscad_code": "// Realistic medium-complexity drone model for 3D printing\n// Overall size ~80 mm across\n\n$fa = 2;\n$fs = 0.5;\n\nmodule prop_guard(r, h, t) {\n    difference() {\n        cylinder(r = r, h = h, center = true);\n        cylinder(r = r - t, h = h + 1, center = true);\n    }\n}\n\nmodule prop(shaft_r, blade_l, blade_w, hub_h) {\n    // Central hub\n    cylinder(r = shaft_r + 2, h = hub_h, center = true);\n    \n    // 2-blade propeller\n    for (a = [0: 180: 360]) {\n        rotate([0, 0, a])\n            translate([blade_l/2, 0, 0])\n                scale([1, blade_w/blade_l, 0.3])\n                    cube([blade_l, blade_l, hub_h], center = true);\n    }\n}\n\nmodule motor_body(r, h) {\n    cylinder(r = r, h = h, center = true);\n    cylinder(r = r - 1, h = h + 0.5, center = true);\n}\n\nmodule arm(l, w, h) {\n    cube([l, w, h], center = true);\n}\n\nmodule landing_leg(l, w, h) {\n    hull() {\n        translate([-l/2, 0, -h/2])\n            sphere(r = w/2);\n        translate([l/2, 0, -h/2])\n            sphere(r = w/2);\n    }\n}\n\nmodule camera_pod(r, h) {\n    difference() {\n        sphere(r = r);\n        translate([0, 0, -r - 1])\n            cube([r*2.2, r*2.2, r*2], center = true);\n    }\n    // Camera lens\n    rotate([90, 0, 0])\n        cylinder(r = r/2, h = r/2, center = true);\n}\n\nmodule drone() {\n    // Center body plate\n    difference() {\n        cube([40, 40, 6], center = true);\n        translate([0, 0, -3.5])\n            cube([36, 36, 7], center = true);\n    }\n    \n    // Top cover\n    translate([0, 0, 4])\n        difference() {\n            cube([40, 40, 2], center = true);\n            translate([0, 0, -1.5])\n                cube([36, 36, 3], center = true);\n            // LED windows\n            for (p = [[-18, 0], [18, 0], [0, -18], [0, 18]]) {\n                translate([p[0], p[1], 0])\n                    cylinder(r = 2, h = 3, center = true);\n            }\n        }\n    \n    // Arms\n    arm_len = 35;\n    arm_w = 6;\n    arm_h = 4;\n    for (a = [45: 90: 360]) {\n        rotate([0, 0, a])\n            translate([arm_len, 0, 0])\n                arm(arm_len*2, arm_w, arm_h);\n    }\n    \n    // Motors with props\n    motor_r = 6;\n    motor_h = 8;\n    prop_r = 12;\n    prop_h = 1.5;\n    guard_r = 20;\n    for (a = [45: 90: 360]) {\n        rotate([0, 0, a])\n            translate([arm_len*2, 0, arm_h/2 + motor_h/2]) {\n                motor_body(motor_r, motor_h);\n                translate([0, 0, motor_h/2 + prop_h/2])\n                    prop(2, prop_r, 3, prop_h);\n                translate([0, 0, -motor_h/2 - 1.5])\n                    prop_guard(guard_r, 3, 1.5);\n            }\n    }\n    \n    // Landing legs\n    leg_l = 10;\n    leg_w = 3;\n    leg_h = 8;\n    for (a = [45: 90: 360]) {\n        rotate([0, 0, a])\n            translate([arm_len*2, 0, -arm_h/2 - leg_h/2])\n                landing_leg(leg_l, leg_w, leg_h);\n    }\n    \n    // Camera gimbal pod\n    translate([0, 0, -8])\n        camera_pod(7, 10);\n}\n\ndrone();",
    "renders": true
  },
  {
    "household_item": "console",
    "openscad_code": "// Realistic Gaming Console – ~70 mm wide, 3D-print friendly\n// No overhangs > 45°, 2 mm wall thickness min.\n\n$fn = 36;                     // Nice curves without huge STL\nwall = 2;                     // Wall thickness for 3D printing\n\n// Main body shell --------------------------------------------------------\nmodule main_shell() {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([68, 32, 22], center = true);\n            sphere(3);\n        }\n        // Hollow it out\n        translate([0, 0, -1])\n            minkowski() {\n                cube([68 - 2*wall, 32 - 2*wall, 22], center = true);\n                sphere(3 - wall);\n            }\n    }\n}\n\n// Vent grid on rear ------------------------------------------------------\nmodule vents() {\n    for (i = [-30:6:30])\n        translate([i, 0, 0])\n            cube([3, 1, 12], center = true);\n}\n\nmodule rear_vents() {\n    translate([0, -17.5, 0])\n        rotate([90, 0, 0])\n            linear_extrude(height = 2)\n                vents();\n}\n\n// Front USB ports ---------------------------------------------------------\nmodule usb_port() {\n    difference() {\n        cube([8, 2, 4], center = true);\n        translate([0, 1.1, 0])\n            cube([7, 0.2, 3], center = true);\n    }\n}\n\nmodule usb_row() {\n    translate([0, -16, -7])\n        for (x = [-12, 0, 12])\n            translate([x, 0, 0])\n                usb_port();\n}\n\n// Power button on top ------------------------------------------------------\nmodule power_button() {\n    translate([25, 0, 12])\n        cylinder(h = 2, r = 4);\n}\n\n// Disc slot on front edge --------------------------------------------------\nmodule disc_slot() {\n    translate([0, 16.5, 3])\n        cube([60, 0.5, 6], center = true);\n}\n\n// Rubber feet on bottom ----------------------------------------------------\nmodule foot() {\n    cylinder(h = 1.5, r = 3);\n}\n\nmodule feet() {\n    for (x = [-25, 25])\n        for (y = [-10, 10])\n            translate([x, y, -12.5])\n                foot();\n}\n\n// Assembly -----------------------------------------------------------------\nunion() {\n    main_shell();\n    rear_vents();\n    usb_row();\n    power_button();\n    disc_slot();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "gamepad",
    "openscad_code": "// Realistic 3D-printable gamepad – medium complexity\n// All dimensions in millimetres – fits roughly 110 mm wide\n\n// General parameters\nwall = 2.5;             // printable wall thickness\ngrip_rad = 20;          // radius of grip corners\nbutton_h = 2.5;         // height of buttons above shell\nbase_thick = 8;         // bottom shell thickness\n\n// Overall body\nmodule body_shell() {\n    difference() {\n        // Main shell – rounded rectangle extrusion\n        minkowski() {\n            linear_extrude(height = base_thick + 8)\n                offset(r = grip_rad)\n                    square([100, 60], center = true);\n            sphere(r = grip_rad);\n        }\n        // Hollow out inside\n        translate([0, 0, wall])\n            minkowski() {\n                linear_extrude(height = base_thick + 8)\n                    offset(r = grip_rad - wall)\n                        square([100 - 2*wall, 60 - 2*wall], center = true);\n                sphere(r = grip_rad - wall);\n            }\n    }\n}\n\n// Grip wings – curved extensions\nmodule grips() {\n    for (s = [-1, 1])\n        mirror([s, 0, 0])\n            translate([45, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 35, r1 = 17, r2 = 12, $fn = 32);\n}\n\n// D-pad cross\nmodule dpad() {\n    translate([-35, 20, base_thick + 8])\n        union() {\n            // Cross arms\n            cube([18, 6, button_h], center = true);\n            cube([6, 18, button_h], center = true);\n            // Central pivot cylinder\n            cylinder(h = button_h, r = 5, $fn = 16);\n        }\n}\n\n// ABXY buttons\nmodule action_buttons() {\n    positions = [[30, 25], [40, 15], [30, 5], [20, 15]];\n    for (p = positions)\n        translate([p.x, p.y, base_thick + 8])\n            cylinder(h = button_h, r = 5.5, $fn = 20);\n}\n\n// Analog sticks\nmodule stick(x, y) {\n    translate([x, y, base_thick + 8])\n        union() {\n            // Base ring\n            difference() {\n                cylinder(h = 2, r = 9, $fn = 32);\n                cylinder(h = 3, r = 7, $fn = 32);\n            }\n            // Stick shaft\n            cylinder(h = 12, r = 4, $fn = 24);\n            // Top cap\n            translate([0, 0, 12])\n                sphere(d = 8);\n        }\n}\n\n// Shoulder buttons (L/R)\nmodule shoulder(side) {\n    translate([side * 48, 0, base_thick + 8])\n        rotate([0, 10 * side, 0])\n            cube([20, 10, 4], center = true);\n}\n\n// Start / Select buttons\nmodule center_buttons() {\n    translate([0, -15, base_thick + 8])\n        for (x = [-8, 8])\n            translate([x, 0, 0])\n                rounded_rect(10, 4, button_h, 1.5);\n}\n\n// Helper for rounded top surface\nmodule rounded_rect(w, d, h, r) {\n    linear_extrude(height = h) offset(r = r) square([w, d], center = true);\n}\n\n// ===== Assembly =====\nunion() {\n    body_shell();\n    grips();\n    dpad();\n    action_buttons();\n    stick(-20, -20);\n    stick(20, -20);\n    shoulder(1);\n    shoulder(-1);\n    center_buttons();\n}",
    "renders": true
  },
  {
    "household_item": "joystick",
    "openscad_code": "// Realistic 3D-printable Joystick – medium complexity\n// All dimensions in mm. Safe for FDM printing, 1.2 mm wall thickness assumed.\n\n$fn = 32;\n\n// Main parameters\nbase_d = 60;          // Base diameter\nbase_h = 18;          // Base height\nneck_h = 20;          // Neck height\nneck_d = 22;          // Neck diameter\nstick_d = 12;         // Stick diameter\nstick_len = 45;       // Stick length above neck\nball_d = 18;          // Ball knob diameter\nbutton_d = 6;         // Top-fire button\nwall = 1.5;           // Wall thickness for printability\n\nmodule base() {\n    // Hollow cylinder with chamfered edge\n    difference() {\n        cylinder(h = base_h, d1 = base_d+8, d2 = base_d);\n        translate([0,0,wall])\n            cylinder(h = base_h-wall*2+0.1, d = base_d-wall*2);\n    }\n    // Four screw holes\n    for(a=[0:90:270])\n        rotate([0,0,a])\n            translate([base_d/2-6,0,-0.1])\n                cylinder(h = base_h+0.2, d = 3.2, $fn=8);\n}\n\nmodule neck() {\n    // Tapered neck\n    cylinder(h = neck_h, d1 = base_d*0.8, d2 = neck_d);\n    // Internal hollow\n    translate([0,0,wall])\n        cylinder(h = neck_h-wall, d1 = base_d*0.8-wall*2, d2 = neck_d-wall*2);\n}\n\nmodule stick() {\n    // Main shaft\n    difference() {\n        cylinder(h = stick_len, d = stick_d);\n        translate([0,0,wall])\n            cylinder(h = stick_len-wall, d = stick_d-wall*2);\n    }\n    // Reinforcing ring\n    translate([0,0,stick_len*0.7])\n        cylinder(h = 3, d = stick_d+3);\n}\n\nmodule ball() {\n    // Hollow sphere with flat bottom\n    difference() {\n        sphere(d = ball_d);\n        translate([0,0,-ball_d/2-wall])\n            cube([ball_d+2, ball_d+2, ball_d], center=true);\n        // Internal cavity\n        sphere(d = ball_d-wall*2);\n    }\n}\n\nmodule top_button() {\n    // Concave fire button\n    difference() {\n        translate([0,0,ball_d/2-wall*2])\n            cylinder(h = 2, d = button_d+1);\n        translate([0,0,ball_d/2-wall*2+1])\n            sphere(d = button_d, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0,0,base_h]) neck();\n    translate([0,0,base_h+neck_h]) stick();\n    translate([0,0,base_h+neck_h+stick_len]) {\n        ball();\n        top_button();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "remote",
    "openscad_code": "// TV Remote – realistic, medium complexity, 3D-printable\n// No overhangs steeper than 45°; 2 mm walls; ~180 mm long\n\n$fa = 2; $fs = 1;\n\n// Overall envelope\nlength = 180;\nwidth  = 45;\nthick  = 18;\n\n// Wall thickness\nwall = 2;\n\n// Top shell\nmodule top_shell() {\n    difference() {\n        // Main rounded body\n        hull() {\n            translate([-length/2, -width/2, 0])\n                cylinder(h=thick, r1=4, r2=4);\n            translate([ length/2, -width/2, 0])\n                cylinder(h=thick, r1=4, r2=4);\n            translate([-length/2,  width/2, 0])\n                cylinder(h=thick, r1=4, r2=4);\n            translate([ length/2,  width/2, 0])\n                cylinder(h=thick, r1=4, r2=4);\n        }\n\n        // Hollow it out\n        translate([0, 0, -0.1])\n            scale([0.9, 0.9, 2])\n            hull() {\n                for (x=[-length/2+6, length/2-6])\n                    for (y=[-width/2+6, width/2-6])\n                        translate([x, y, 0])\n                            cylinder(h=thick+1, r1=2, r2=2);\n            }\n    }\n}\n\n// Button grid\nmodule buttons() {\n    // Power button\n    translate([-length/2+15, 0, thick+0.1])\n        cylinder(h=2, r=5, $fn=32);\n\n    // 4×4 D-pad cluster\n    for (i=[-1:1])\n        for (j=[-1:1])\n            translate([-length/2+40 + i*12, j*12, thick+0.1])\n                cylinder(h=2, r=4, $fn=16);\n\n    // Volume +/- and channel +/-\n    for (i=[0,1])\n        translate([-length/2+70 + i*30, width/2-10, thick+0.1])\n            cube([12, 6, 2], center=true);\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([-length/2+30, 0, -thick-wall])\n        rotate([90,0,0])\n            cylinder(h=35, r=10, $fn=32);\n}\n\n// Bottom shell\nmodule bottom_shell() {\n    difference() {\n        // Copy of top shell flipped\n        mirror([0,0,1]) top_shell();\n\n        // Remove the battery hole\n        translate([-length/2+30, 0, -thick])\n            rotate([90,0,0])\n                cylinder(h=35, r=10.5, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    top_shell();\n    bottom_shell();\n    buttons();\n}",
    "renders": true
  },
  {
    "household_item": "calculator",
    "openscad_code": "// Realistic 3D printable calculator\n// Dimensions: ~85 x 55 x 10 mm\n\n// Main calculator body\nmodule calculator_body() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            translate([-40, -25, 0]) cylinder(h=10, r=3, $fn=20);\n            translate([40, -25, 0]) cylinder(h=10, r=3, $fn=20);\n            translate([40, 25, 0]) cylinder(h=10, r=3, $fn=20);\n            translate([-40, 25, 0]) cylinder(h=10, r=3, $fn=20);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) hull() {\n            translate([-37, -22, 0]) cylinder(h=12, r=2.5, $fn=20);\n            translate([37, -22, 0]) cylinder(h=12, r=2.5, $fn=20);\n            translate([37, 22, 0]) cylinder(h=12, r=2.5, $fn=20);\n            translate([-37, 22, 0]) cylinder(h=12, r=2.5, $fn=20);\n        }\n        \n        // Screen window\n        translate([-30, 15, 9]) cube([60, 15, 2]);\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    translate([-28, 16, 9.5]) {\n        color([0.2, 0.2, 0.2]) cube([56, 12, 0.5]);\n    }\n    \n    // Screen surface\n    translate([-27, 17, 10]) {\n        color([0.8, 0.8, 0.7]) cube([54, 10, 0.1]);\n    }\n}\n\n// Button base - raised area\nmodule button_base() {\n    translate([0, -10, 9.5]) {\n        color([0.9, 0.9, 0.9]) \n        hull() {\n            translate([-32, -12, 0]) cylinder(h=1, r=1, $fn=20);\n            translate([32, -12, 0]) cylinder(h=1, r=1, $fn=20);\n            translate([32, 12, 0]) cylinder(h=1, r=1, $fn=20);\n            translate([-32, 12, 0]) cylinder(h=1, r=1, $fn=20);\n        }\n    }\n}\n\n// Individual button\nmodule button(label, x, y, color_val) {\n    translate([x, y, 10]) {\n        // Button body\n        color(color_val) cylinder(h=1.5, r=4.5, $fn=20);\n        // Button top\n        translate([0, 0, 1.5]) {\n            difference() {\n                cylinder(h=0.5, r=5, $fn=20);\n                cylinder(h=1, r=4, $fn=20);\n            }\n        }\n    }\n}\n\n// Number buttons (0-9)\nmodule number_buttons() {\n    colors = [[0.1, 0.1, 0.1], [0.8, 0.8, 0.8]];\n    \n    // 7-8-9 row\n    button(\"7\", -20, 5, colors[1]);\n    button(\"8\", 0, 5, colors[1]);\n    button(\"9\", 20, 5, colors[1]);\n    \n    // 4-5-6 row\n    button(\"4\", -20, -5, colors[1]);\n    button(\"5\", 0, -5, colors[1]);\n    button(\"6\", 20, -5, colors[1]);\n    \n    // 1-2-3 row\n    button(\"1\", -20, -15, colors[1]);\n    button(\"2\", 0, -15, colors[1]);\n    button(\"3\", 20, -15, colors[1]);\n    \n    // 0 button\n    button(\"0\", -10, -25, colors[1]);\n}\n\n// Operator buttons\nmodule operator_buttons() {\n    // + - * /\n    button(\"+\", 30, 5, [0.9, 0.7, 0.1]);\n    button(\"-\", 30, -5, [0.9, 0.7, 0.1]);\n    button(\"*\", 30, -15, [0.9, 0.7, 0.1]);\n    button(\"/\", 30, -25, [0.9, 0.7, 0.1]);\n}\n\n// Special buttons\nmodule special_buttons() {\n    // Equals and clear\n    button(\"=\", 10, -25, [0.1, 0.6, 0.9]);\n    button(\"C\", -30, -25, [0.9, 0.2, 0.2]);\n    \n    // Decimal point\n    button(\".\", 20, -25, [0.8, 0.8, 0.8]);\n}\n\n// Battery compartment on back\nmodule battery_compartment() {\n    translate([20, 0, 0]) {\n        difference() {\n            // Raised area\n            cube([30, 20, 3]);\n            \n            // Battery slot\n            translate([15, 10, 2]) cube([26, 16, 2]);\n            \n            // Screw holes\n            translate([5, 5, 2]) cylinder(h=3, r=1, $fn=10);\n            translate([25, 5, 2]) cylinder(h=3, r=1, $fn=10);\n        }\n    }\n}\n\n// Assemble the calculator\nunion() {\n    calculator_body();\n    lcd_screen();\n    button_base();\n    number_buttons();\n    operator_buttons();\n    special_buttons();\n    \n    // Back details (rotate to view)\n    translate([0, 0, 0]) rotate([0, 180, 0]) {\n        battery_compartment();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "alarm",
    "openscad_code": "// Alarm clock with bells - realistic style, medium complexity\n// Overall size: 80mm wide, 60mm deep, 80mm tall\n\n$fn = 36;  // Smooth curves for 3D printing\n\nmodule main_body() {\n    difference() {\n        // Main rounded body\n        minkowski() {\n            cube([70, 50, 30], center=true);\n            sphere(2);\n        }\n        \n        // Display recess\n        translate([0, 0, 16])\n            cube([50, 25, 5], center=true);\n        \n        // Buttons hole\n        translate([30, 0, 12])\n            rotate([90,0,0])\n            cylinder(h=10, d=6);\n    }\n}\n\nmodule display() {\n    // LCD screen\n    translate([0, 0, 18.5])\n        cube([46, 21, 1], center=true);\n    \n    // Screen border\n    difference() {\n        translate([0, 0, 18])\n            cube([48, 23, 0.5], center=true);\n        translate([0, 0, 18.5])\n            cube([46, 21, 1.5], center=true);\n    }\n}\n\nmodule foot(x, y) {\n    translate([x, y, -14.5])\n        cylinder(h=5, d=8);\n}\n\nmodule feet() {\n    foot(30, 20);\n    foot(-30, 20);\n    foot(30, -20);\n    foot(-30, -20);\n}\n\nmodule bell(r) {\n    difference() {\n        // Bell dome\n        translate([0, 0, 5])\n            scale([1, 1, 0.7])\n            sphere(r);\n        \n        // Bell hole\n        translate([0, 0, 5])\n            scale([1, 1, 0.8])\n            sphere(r-2);\n    }\n    \n    // Bell base\n    translate([0, 0, 0.5])\n        cylinder(h=1, r=r);\n}\n\nmodule hammer() {\n    // Hammer arm\n    rotate([0, 90, 0])\n        cylinder(h=20, d=3);\n    \n    // Hammer head\n    translate([0, 10, 0])\n        cube([8, 6, 4], center=true);\n}\n\nmodule bell_assembly(x) {\n    translate([x, 25, 30]) {\n        // Bell\n        bell(12);\n        \n        // Hammer between bells\n        if (x < 0) {\n            translate([12, 0, 5])\n                hammer();\n        }\n    }\n}\n\nmodule top_bells() {\n    bell_assembly(-18);\n    bell_assembly(18);\n}\n\nmodule button_row() {\n    for (i = [0:2]) {\n        translate([25 + i*8, 0, 15])\n            rotate([90,0,0])\n            cylinder(h=3, d=4);\n    }\n}\n\nmodule alarm_clock() {\n    union() {\n        // Base parts\n        main_body();\n        feet();\n        \n        // Top bells\n        top_bells();\n        \n        // Details\n        display();\n        button_row();\n        \n        // Time set knobs on sides\n        translate([35, 0, 5])\n            rotate([0,90,0])\n            cylinder(h=10, d=6);\n        translate([-35, 0, 5])\n            rotate([0,90,0])\n            cylinder(h=10, d=6);\n    }\n}\n\n// Generate complete alarm clock\nalarm_clock();",
    "renders": true
  },
  {
    "household_item": "coffeemaker",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall scale factor to keep model ~80 mm tall\nscale_factor = 0.35;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main rounded box\n        translate([0, 0, 35])\n            scale([1, 0.7, 1])\n            minkowski() {\n                cube([40, 30, 50], center = true);\n                sphere(3);\n            }\n        \n        // Front display cutout\n        translate([0, 11, 55])\n            cube([30, 2, 15], center = true);\n        \n        // Water reservoir opening\n        translate([0, -15, 65])\n            rotate([0, 10, 0])\n            cylinder(h = 20, r = 8, center = true);\n    }\n}\n\n// Water reservoir lid\nmodule reservoir_lid() {\n    translate([0, -15, 72])\n        rotate([0, 10, 0])\n        difference() {\n            cylinder(h = 3, r = 9, center = true);\n            cylinder(h = 4, r = 7.5, center = true);\n        }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, 12.5, 55])\n        cube([28, 1, 13], center = true);\n    \n    // Buttons\n    for(i = [-1:1]) {\n        translate([i * 8, 13.5, 55])\n            cube([6, 0.5, 6], center = true);\n    }\n    \n    // Display\n    translate([0, 13.5, 62])\n        cube([20, 0.5, 8], center = true);\n}\n\n// Base with drip tray\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, 15])\n            scale([1, 0.8, 1])\n            minkowski() {\n                cube([45, 35, 8], center = true);\n                sphere(2);\n            }\n        \n        // Drip tray recess\n        translate([0, 5, 15])\n            cube([35, 20, 9], center = true);\n    }\n    \n    // Drip tray grid pattern\n    for(x = [-15:5:15]) {\n        translate([x, 5, 20])\n            cube([2, 18, 0.5], center = true);\n    }\n}\n\n// Coffee pot\nmodule coffee_pot() {\n    // Handle\n    translate([0, 20, 30])\n        rotate([90, 0, 0])\n        cylinder(h = 15, r1 = 3, r2 = 2);\n    \n    // Pot body\n    difference() {\n        translate([0, 15, 25])\n            rotate_extrude()\n                translate([0, 0])\n                    polygon(points = [\n                        [0, 0],\n                        [12, 0],\n                        [15, 5],\n                        [15, 20],\n                        [12, 25],\n                        [0, 25]\n                    ]);\n        \n        // Hollow interior\n        translate([0, 15, 25])\n            rotate_extrude()\n                translate([0, 0])\n                    polygon(points = [\n                        [0, 1],\n                        [11, 1],\n                        [14, 5],\n                        [14, 20],\n                        [11, 24],\n                        [0, 24]\n                    ]);\n    }\n    \n    // Lid\n    translate([0, 15, 50])\n        cylinder(h = 2, r = 12);\n    \n    // Spout\n    translate([-15, 15, 35])\n        rotate([0, 0, -30])\n        cylinder(h = 8, r1 = 3, r2 = 1.5);\n}\n\n// Filter basket area\nmodule filter_area() {\n    // Shower head\n    translate([0, 0, 38])\n        cylinder(h = 3, r = 8);\n    \n    // Filter basket\n    translate([0, 0, 30])\n        cylinder(h = 8, r = 10);\n    \n    // Basket handle\n    translate([10, 0, 30])\n        rotate([0, 90, 0])\n        cylinder(h = 5, r = 1.5);\n}\n\n// Power cord\nmodule power_cord() {\n    translate([-22, -15, 15])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 2);\n    \n    for(i = [0:2:15]) {\n        translate([-22 - i, -15, 15])\n            rotate([0, 90, 0])\n            cylinder(h = 2, r = 2);\n    }\n}\n\n// Assemble the coffeemaker\nscale([scale_factor, scale_factor, scale_factor]) {\n    body();\n    reservoir_lid();\n    control_panel();\n    base();\n    coffee_pot();\n    filter_area();\n    power_cord();\n}",
    "renders": true
  },
  {
    "household_item": "ricecooker",
    "openscad_code": "// Rice Cooker Model - Medium Complexity Realistic Style\n// Designed for 3D printing, 80mm height\n\n// Overall dimensions\ncooker_width = 65;\ncooker_depth = 65;\ncooker_height = 80;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule body() {\n    // Outer shell\n    difference() {\n        // Main rounded rectangular body\n        hull() {\n            translate([0, 0, cooker_height/2 - 5])\n                cylinder(h = 10, r1 = cooker_width/2, r2 = cooker_width/2, $fn = 50);\n            translate([0, 0, 5])\n                cylinder(h = cooker_height - 10, r1 = cooker_width/2, r2 = cooker_width/2, $fn = 50);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = cooker_height - wall, r = cooker_width/2 - wall, $fn = 50);\n    }\n}\n\n// Inner cooking pot\nmodule cooking_pot() {\n    translate([0, 0, wall + 2])\n        difference() {\n            cylinder(h = cooker_height * 0.4, r = cooker_width/2 - wall - 4, $fn = 50);\n            translate([0, 0, wall])\n                cylinder(h = cooker_height * 0.4 - wall, r = cooker_width/2 - wall - 6, $fn = 50);\n        }\n}\n\n// Lid handle\nmodule lid_handle() {\n    translate([0, 0, cooker_height + 8])\n        rotate([0, 180, 0])\n            difference() {\n                // Main handle shape\n                hull() {\n                    sphere(r = 6, $fn = 30);\n                    translate([0, 0, -8])\n                        sphere(r = 4, $fn = 30);\n                }\n                \n                // Finger grip indentation\n                for(i = [-1:1]) {\n                    translate([i * 3, 0, -4])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, r = 1.5, $fn = 20);\n                }\n            }\n}\n\n// Lid\nmodule lid() {\n    translate([0, 0, cooker_height - 2])\n        difference() {\n            // Lid top\n            cylinder(h = 10, r = cooker_width/2 - 1, $fn = 50);\n            \n            // Steam vent\n            translate([0, cooker_width/4, 5])\n                cylinder(h = 10, r = 3, $fn = 20);\n            \n            // Inner lip for fit\n            translate([0, 0, -1])\n                cylinder(h = 5, r = cooker_width/2 - wall - 1, $fn = 50);\n        }\n    \n    // Handle on lid\n    lid_handle();\n    \n    // Steam vent cap\n    translate([0, cooker_width/4, cooker_height + 8])\n        cylinder(h = 2, r = 4, $fn = 20);\n}\n\n// Control panel\nmodule control_panel() {\n    translate([cooker_width/2 - 1, 0, cooker_height * 0.6])\n        rotate([0, 90, 0])\n            difference() {\n                // Panel housing\n                cube([20, 30, wall], center = true);\n                \n                // LED window\n                translate([0, 10, 0])\n                    cube([16, 6, wall + 1], center = true);\n                \n                // Button holes\n                for(y = [-8, 0, 8]) {\n                    translate([0, y, 0])\n                        cylinder(h = wall + 1, r = 3, $fn = 20);\n                }\n            }\n}\n\n// Power cord\nmodule power_cord() {\n    translate([-cooker_width/2 - 5, 0, 10])\n        rotate([0, 0, 90])\n            hull() {\n                sphere(r = 3);\n                translate([0, 15, 0])\n                    sphere(r = 2);\n            }\n}\n\n// Side handles\nmodule side_handles() {\n    for(side = [-1, 1]) {\n        translate([side * (cooker_width/2 + 3), 0, cooker_height * 0.4])\n            difference() {\n                // Handle body\n                rotate([0, 90, 0])\n                    cylinder(h = 15, r = 4, center = true, $fn = 20);\n                \n                // Grip hole\n                rotate([0, 90, 0])\n                    cylinder(h = 16, r = 2, center = true, $fn = 20);\n            }\n    }\n}\n\n// Feet\nmodule feet() {\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * cooker_width/3, y * cooker_width/3, 0])\n                cylinder(h = 3, r = 3, $fn = 20);\n}\n\n// Assembly\nunion() {\n    // Main body and components\n    body();\n    cooking_pot();\n    lid();\n    control_panel();\n    power_cord();\n    side_handles();\n    feet();\n}\n\n// Button details\ntranslate([cooker_width/2 + 1, 0, cooker_height * 0.6 + 10])\n    rotate([90, 0, 0])\n        for(y = [-8, 0, 8])\n            translate([0, y, 0])\n                cylinder(h = 2, r = 2.5, $fn = 20);\n\n// LED indicator\ntranslate([cooker_width/2 + 1, 10, cooker_height * 0.6])\n    rotate([90, 0, 0])\n        cylinder(h = 1, r = 2, $fn = 20);",
    "renders": true
  },
  {
    "household_item": "breadmaker",
    "openscad_code": "// Breadmaker - Realistic Style, Medium Complexity\n// Dimensions: ~70mm wide x 45mm deep x 50mm tall\n\nmodule breadmaker() {\n    // Main body shell\n    difference() {\n        // Outer shell\n        translate([0, 0, 20])\n            rounded_box([70, 45, 40], 5);\n        \n        // Hollow interior\n        translate([0, 0, 21])\n            rounded_box([66, 41, 38], 4);\n    }\n    \n    // Control panel\n    translate([-32, 0, 40])\n        cube([10, 30, 10]);\n    \n    // Display screen\n    difference() {\n        translate([-31, 5, 45])\n            cube([8, 12, 1]);\n        translate([-30, 6, 46])\n            cube([6, 10, 1]);\n    }\n    \n    // Buttons\n    for(i = [0:2]) {\n        translate([-30, -8 - i*6, 46])\n            cylinder(h=1, r=2, $fn=16);\n    }\n    \n    // Lid\n    rotate([0, -30, 0])\n    translate([0, 0, 39])\n        rounded_box([68, 43, 3], 3);\n    \n    // Handle\n    difference() {\n        translate([0, 22, 45])\n            cube([25, 8, 8]);\n        translate([2, 24, 47])\n            cube([21, 4, 4]);\n    }\n    \n    // Vent holes\n    for(i = [0:1]) {\n        translate([20 + i*15, 0, 55])\n            cylinder(h=5, r=3, $fn=12);\n    }\n    \n    // Feet\n    for(x = [-25, 25])\n        for(y = [-15, 15])\n            translate([x, y, 0])\n                cylinder(h=3, r=3, $fn=12);\n    \n    // Power cord\n    translate([35, -20, 10])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2, $fn=8);\n}\n\nmodule rounded_box(size, radius) {\n    hull() {\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                for(z = [-1, 1])\n                    translate([x*(size[0]/2 - radius), \n                              y*(size[1]/2 - radius), \n                              z*(size[2]/2 - radius)])\n                        sphere(r=radius, $fn=16);\n    }\n}\n\nbreadmaker();",
    "renders": true
  },
  {
    "household_item": "juicer",
    "openscad_code": "// Manual citrus juicer, ~70 mm tall, 3D-printable\n// All walls >= 2 mm, no steep overhangs\n\n$fn = 30;        // smooth curves\n\nmodule juicer() {\n    // Base plate with raised rim to catch juice\n    difference() {\n        cylinder(h = 8, d = 70);\n        translate([0, 0, 6])\n            cylinder(h = 3, d = 66);\n    }\n\n    // Central cone with juice channels\n    union() {\n        // Main cone\n        cylinder(h1 = 35, h2 = 0, r1 = 18, r2 = 0);\n\n        // Spiral ribs for juice extraction (4 ribs, 90 deg apart)\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([0, 4, 0])\n                    rotate([0, 0, 20])\n                        linear_extrude(height = 35, twist = 60)\n                            square([2, 8]);\n        }\n    }\n\n    // Short vertical spout for pouring\n    translate([30, 0, 4])\n        rotate([0, 0, 0])\n            union() {\n                cube([20, 12, 4]);\n                translate([20, 6, 2])\n                    rotate([0, 90, 0])\n                        cylinder(h = 12, r = 4);\n            }\n\n    // Handle attached to base\n    translate([-40, 0, 4])\n        rotate([0, 0, 0])\n            union() {\n                // Handle core\n                rotate([0, 90, 0])\n                    cylinder(h = 45, r = 6);\n\n                // Grip rings\n                for (z = [5:8:40])\n                    translate([0, 0, -22 + z])\n                        rotate([0, 90, 0])\n                            cylinder(h = 3, r = 8);\n            }\n\n    // Strengthening fillet between cone and base\n    translate([0, 0, 8])\n        cylinder(h = 4, r1 = 18, r2 = 20);\n}\n\njuicer();",
    "renders": true
  },
  {
    "household_item": "grinder",
    "openscad_code": "// Realistic 3-chamber herb grinder, 63 mm Ø, 3 mm wall, 0.3 mm print tolerance\n// No support needed – all inside angles ≤ 45°\n\n$fa = 2; $fs = 1;\n\n/* ---------- PARAMETERS ---------- */\nd = 63;          // outer diameter\nh_top = 12;      // lid height\nh_teeth = 5.5;   // teeth height\nh_mid = 10;      // milling chamber height\nh_base = 22;     // collection chamber + kief catcher\nwall = 3;        // wall thickness\ntol = 0.3;       // print tolerance\nteeth = 24;      // number of diamond teeth\ntooth_l = 9;     // tooth length\ntooth_w = 3.5;   // tooth width\nmag_r = 3;       // magnet radius\nmag_h = 2.5;     // magnet height\nscreen_t = 0.4;  // mesh thickness\nscreen_hole = 0.8;\n\n/* ---------- MODULES ---------- */\nmodule grinder() {\n    // Lip on lid and body for interlock\n    lip_h = 4;\n    lip_gap = 1.2;\n\n    /* ---- TOP LID ---- */\n    translate([0,0,h_base+h_mid]) lid();\n\n    /* ---- MILLING CHAMBER ---- */\n    translate([0,0,h_base]) mid_chamber();\n\n    /* ---- COLLECTION CHAMBER ---- */\n    base_chamber();\n}\n\n/* Top lid with teeth and magnet cavity */\nmodule lid() {\n    difference() {\n        // Outer shell\n        cylinder(h=h_top, d=d, center=true);\n        translate([0,0,-h_top/2-wall]) cylinder(h=h_top+wall, d=d-2*wall, center=true);\n\n        // Teeth on lid\n        for(i=[0:teeth/2-1])\n            rotate([0,0,i*360/(teeth/2)])\n                translate([d/2*0.6, 0, -h_top/2+h_teeth/2])\n                    rotate([45,0,0])\n                        cube([tooth_l,tooth_w,h_teeth], center=true);\n\n        // Magnet cavity\n        translate([0,0,-h_top/2+mag_h/2+tol])\n            cylinder(h=mag_h+tol, r=mag_r+tol, $fn=20);\n    }\n}\n\n/* Middle section with teeth and screen support */\nmodule mid_chamber() {\n    difference() {\n        union() {\n            // Cylinder body\n            cylinder(h=h_mid, d=d, center=true);\n            // Lip\n            translate([0,0,h_mid/2])\n                cylinder(h=lip_h, d=d-2*wall-2*lip_gap, center=true);\n        }\n\n        // Hollow center\n        translate([0,0,-wall]) cylinder(h=h_mid+2*wall, d=d-2*wall, center=true);\n\n        // Bottom teeth\n        for(i=[0:teeth-1])\n            rotate([0,0,i*360/teeth+360/teeth/2])\n                translate([d/2*0.6, 0, -h_mid/2+h_teeth/2])\n                    rotate([45,0,0])\n                        cube([tooth_l,tooth_w,h_teeth], center=true);\n\n        // Screen recess\n        translate([0,0,-h_mid/2+screen_t/2])\n            cylinder(h=screen_t+tol, d=d-2*wall-tol, center=true);\n    }\n\n    // Screen mesh (simple grid)\n    screen();\n}\n\n/* Collection chamber with kief catcher */\nmodule base_chamber() {\n    difference() {\n        union() {\n            cylinder(h=h_base, d=d, center=true);\n            // Lip\n            translate([0,0,h_base/2])\n                cylinder(h=lip_h, d=d-2*wall, center=true);\n        }\n\n        // Hollow\n        translate([0,0,-wall]) cylinder(h=h_base+2*wall, d=d-2*wall, center=true);\n\n        // Kief scraper slot\n        translate([-d/2+wall+tol,0,-h_base/4])\n            cube([wall, 6, h_base/2], center=true);\n    }\n}\n\n/* Simple square mesh screen */\nmodule screen() {\n    size = d-2*wall-2*tol;\n    lines = floor(size/screen_hole/2);\n    for(i=[-lines:lines])\n        translate([0, i*screen_hole*2, -h_mid/2+screen_t/2])\n            cube([size, screen_hole, screen_t], center=true);\n    for(i=[-lines:lines])\n        translate([i*screen_hole*2, 0, -h_mid/2+screen_t/2])\n            cube([screen_hole, size, screen_t], center=true);\n}\n\n/* ---------- RENDER ---------- */\ngrinder();",
    "renders": true
  },
  {
    "household_item": "garbage",
    "openscad_code": "// Realistic medium-complexity OpenSCAD garbage bin\n// Overall height ~80 mm, footprint 50 mm x 50 mm\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Main body module\nmodule bin_body(h = 60, w = 50, d = 50) {\n    difference() {\n        // Outer shell\n        cube([w, d, h], center = true);\n        \n        // Hollow inside\n        translate([0, 0, -wall/2])\n            cube([w - 2*wall, d - 2*wall, h], center = true);\n    }\n}\n\n// Rolled rim lip for realism\nmodule rim(rim_h = 5, w = 50, d = 50) {\n    // Lower half of rim\n    translate([0, 0, 30])\n        difference() {\n            cube([w + 2, d + 2, rim_h], center = true);\n            cube([w - 2*wall, d - 2*wall, rim_h + 0.1], center = true);\n        }\n    \n    // Upper rounded lip\n    translate([0, 0, 30 + rim_h/2])\n        difference() {\n            minkowski() {\n                cube([w, d, rim_h/2], center = true);\n                sphere(r = 1.5, $fn = 16);\n            }\n            cube([w + 2*wall, d + 2*wall, rim_h], center = true);\n        }\n}\n\n// Hinged lid\nmodule lid(w = 50, d = 50) {\n    // Main lid plate\n    translate([0, 0, 34])\n        rotate([0, 0, 0])\n            difference() {\n                cube([w - 1, d - 1, 3], center = true);\n                translate([0, 0, -wall/2])\n                    cube([w - 2*wall, d - 2*wall, 3.1], center = true);\n            }\n    \n    // Handle bar\n    translate([w/4, 0, 35.5])\n        rotate([90, 0, 0])\n            cylinder(h = d/4, r = 2.5, $fn = 12);\n}\n\n// Pedal mechanism\nmodule pedal() {\n    // Pedal arm\n    translate([0, 25, 0])\n        rotate([0, 0, 0])\n            difference() {\n                cube([30, 8, 5], center = true);\n                translate([0, 0, -wall/2])\n                    cube([30 - 2*wall, 8 - 2*wall, 5], center = true);\n            }\n    \n    // Pivot axle\n    translate([0, 25, -2.5])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 2, $fn = 12);\n}\n\n// Wheels (simplified)\nmodule wheels() {\n    for (x = [-20, 20]) {\n        translate([x, -23, -25])\n            rotate([90, 0, 0])\n                cylinder(h = 5, r = 4, $fn = 16);\n    }\n}\n\n// Union all parts\nunion() {\n    // Main bin\n    bin_body();\n    \n    // Rim\n    rim();\n    \n    // Lid\n    lid();\n    \n    // Pedal\n    pedal();\n    \n    // Wheels\n    wheels();\n}",
    "renders": true
  },
  {
    "household_item": "disposal",
    "openscad_code": "// Kitchen garbage disposal unit\n// Designed for 3D printing – no overhangs, 1 mm wall thickness throughout\n// Overall size ~70 mm diameter, 60 mm tall\n\n$fn = 36;\n\n// Main body\nmodule disposal_main() {\n    difference() {\n        // Main cylinder body\n        cylinder(h = 50, d = 70, center = true);\n\n        // Hollow center\n        translate([0, 0, -3])\n            cylinder(h = 56, d = 68, center = true);\n    }\n}\n\n// Mounting flange on top\nmodule flange() {\n    difference() {\n        // Flange plate\n        cylinder(h = 8, d = 90, center = true);\n\n        // Center hole\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 52, center = true);\n\n        // Mounting screw holes\n        for (a = [0:60:359])\n            rotate([0, 0, a])\n                translate([35, 0, -1])\n                    cylinder(h = 10, d = 4, center = true);\n    }\n}\n\n// Bottom motor housing\nmodule motor_housing() {\n    difference() {\n        // Motor cylinder\n        translate([0, 0, -30])\n            cylinder(h = 25, d = 60, center = true);\n\n        // Hollow motor cavity\n        translate([0, 0, -30])\n            cylinder(h = 27, d = 58, center = true);\n    }\n}\n\n// Electrical connector box\nmodule connector_box() {\n    difference() {\n        // Box body\n        translate([35, 0, -15])\n            cube([20, 18, 12], center = true);\n\n        // Wiring cavity\n        translate([35, 0, -15])\n            cube([18, 16, 10], center = true);\n    }\n}\n\n// Drain outlet tube\nmodule outlet_tube() {\n    difference() {\n        // Tube\n        rotate([0, 90, 0])\n            translate([0, 0, -45])\n                cylinder(h = 30, d = 25, center = true);\n\n        // Hollow tube\n        rotate([0, 90, 0])\n            translate([0, 0, -45])\n                cylinder(h = 32, d = 23, center = true);\n    }\n}\n\n// Side support ribs\nmodule ribs() {\n    for (a = [0:120:359]) {\n        rotate([0, 0, a]) {\n            translate([0, 35, -10])\n                cube([4, 8, 30], center = true);\n        }\n    }\n}\n\n// Assemble the disposal\nunion() {\n    disposal_main();\n    translate([0, 0, 29])\n        flange();\n    motor_housing();\n    connector_box();\n    outlet_tube();\n    ribs();\n}",
    "renders": true
  },
  {
    "household_item": "shavers",
    "openscad_code": "// Electric Shaver - Realistic Medium Complexity\n// Overall dimensions: 45mm x 65mm x 180mm\n\n// Main body parameters\nbody_w = 45;\nbody_d = 65;\nbody_h = 130;\n\n// Head parameters\nhead_d = 42;\nhead_h = 18;\n\n// Handle grip parameters\ngrip_r = 3;\ngrip_len = 100;\ngrip_step = 8;\n\n// Button parameters\nbtn_w = 8;\nbtn_h = 4;\nbtn_d = 25;\n\n// Charger port parameters\nport_w = 10;\nport_h = 5;\nport_d = 3;\n\n// Foil head pattern\nmodule foil_pattern() {\n    for (i = [-20:2:20]) {\n        for (j = [-20:2:20]) {\n            translate([i, j, 0])\n                cylinder(h=0.5, r=0.3, $fn=8);\n        }\n    }\n}\n\n// Grip ring pattern\nmodule grip_rings() {\n    for (i = [-grip_len/2 + 10: grip_step: grip_len/2 - 10]) {\n        rotate([0, 90, 0])\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=2, r1=body_w/2 + 1, r2=body_w/2 + 1, $fn=32);\n                    cylinder(h=2.5, r1=body_w/2 - 1, r2=body_w/2 - 1, $fn=32);\n                }\n    }\n}\n\n// Main body with ergonomic curves\nmodule shaver_body() {\n    difference() {\n        // Tapered body shape\n        hull() {\n            translate([0, 0, body_h/2])\n                scale([0.9, 0.9, 1])\n                    cube([body_w, body_d, body_h], center=true);\n            translate([0, 0, -body_h/2 + 20])\n                scale([0.7, 0.7, 1])\n                    cube([body_w - 10, body_d - 10, 40], center=true);\n        }\n        \n        // Hollow out for electronics\n        translate([0, 0, body_h/2 - 10])\n            cube([body_w - 8, body_d - 8, body_h - 20], center=true);\n            \n        // Button cutout\n        translate([body_w/2 + 1, 0, body_h/4])\n            cube([btn_h + 2, btn_d, btn_w + 2], center=true);\n            \n        // Charger port\n        translate([0, body_d/2 + 1, -body_h/4])\n            cube([port_w, port_d + 1, port_h], center=true);\n    }\n    \n    // Add grip rings\n    translate([0, 0, 0])\n        grip_rings();\n}\n\n// Shaver head with triple foil\nmodule shaver_head() {\n    union() {\n        // Head base\n        translate([0, 0, body_h/2 + head_h/2])\n            cylinder(h=head_h, r=head_d/2, $fn=32);\n            \n        // Top cover with foils\n        translate([0, 0, body_h/2 + head_h + 2])\n            difference() {\n                cylinder(h=2, r=head_d/2, $fn=32);\n                \n                // Three foil areas\n                translate([-12, 0, -0.5])\n                    cube([24, 30, 3]);\n                translate([12, 0, -0.5])\n                    cube([24, 30, 3]);\n                translate([0, -12, -0.5])\n                    cube([30, 24, 3]);\n            }\n            \n        // Foil patterns\n        translate([-12, 0, body_h/2 + head_h + 2.5])\n            rotate([0, 0, 0])\n                foil_pattern();\n        translate([12, 0, body_h/2 + head_h + 2.5])\n            rotate([0, 0, 0])\n                foil_pattern();\n        translate([0, -12, body_h/2 + head_h + 2.5])\n            rotate([0, 0, 90])\n                foil_pattern();\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([body_w/2 + btn_h/2, 0, body_h/4])\n        cube([btn_h, btn_d, btn_w], center=true);\n}\n\n// Charger port cover\nmodule charger_port() {\n    translate([0, body_d/2 + port_d/2, -body_h/4])\n        cube([port_w, port_d, port_h], center=true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([body_w/2 - 5, 0, body_h/3])\n        cylinder(h=1, r=2, $fn=16);\n}\n\n// Assembly\nunion() {\n    shaver_body();\n    shaver_head();\n    power_button();\n    charger_port();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "household_item": "trimmer",
    "openscad_code": "// Realistic Trimmer - Medium Complexity\n// 3D printable beard / hair trimmer with guard and power button\n// ~80 mm long, 45 mm tall, 35 mm deep\n\n$fn = 36;           // Smooth curves\nwall = 2;           // 3D-print-friendly wall thickness\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            translate([-5, -15, 0])  cube([55, 30, 25], center=true);\n            translate([-5, -15, 20]) cube([50, 25, 20], center=true);\n        }\n        \n        // Hollow inside\n        hull() {\n            translate([-5, -15, 2])  cube([48, 26, 18], center=true);\n            translate([-5, -15, 17.5]) cube([43, 21, 15], center=true);\n        }\n        \n        // Grip texture grooves (horizontal)\n        for (z = [5:4:20]) {\n            translate([-2, -15, z])\n                cube([45, 30, 1.5]);\n        }\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([5, 20, 12])\n        difference() {\n            // Raised button\n            rotate([0, 90, 0]) cylinder(h = 6, d = 8, center=true);\n            // Recessed icon\n            rotate([0, 90, 0]) cylinder(h = 7, d = 4, center=true);\n        }\n}\n\n// Blade head\nmodule blade_head() {\n    difference() {\n        // Base block\n        translate([-30, 0, 12])\n            cube([25, 28, 12], center=true);\n        \n        // Recess for blades\n        translate([-30, 0, 15])\n            cube([24, 24, 4], center=true);\n    }\n    \n    // Blade teeth (simple rectangles)\n    for (y = [-10:2:10]) {\n        translate([-42, y, 15])\n            cube([12, 1.2, 2]);\n    }\n}\n\n// Comb guard with adjustable height steps\nmodule guard() {\n    // Main guard plate\n    difference() {\n        translate([-42, 0, 6])\n            cube([15, 32, 8], center=true);\n        \n        // Slots for teeth clearance\n        for (y = [-11:2:11]) {\n            translate([-42, y, 6])\n                cube([16, 1.5, 9], center=true);\n        }\n    }\n    \n    // Mounting clips\n    for (side = [-1, 1]) {\n        translate([-17, side*18, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 4);\n    }\n}\n\n// Battery cap at rear\nmodule battery_cap() {\n    difference() {\n        translate([25, 0, 12])\n            rotate([0, 90, 0])\n                cylinder(h = 12, d = 18, center=true);\n        \n        translate([25, 0, 12])\n            rotate([0, 90, 0])\n                cylinder(h = 13, d = 12, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    power_button();\n    blade_head();\n    guard();\n    battery_cap();\n}",
    "renders": true
  },
  {
    "household_item": "hairdryer",
    "openscad_code": "// Realistic Hairdryer Model - Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\n\n// Main parameters\nbody_length = 80;\nbody_diameter = 35;\nhandle_length = 75;\nhandle_diameter = 25;\nnozzle_length = 40;\nnozzle_diameter = 45;\n\nmodule hairdryer() {\n    // Main body cylinder\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = body_length, d = body_diameter);\n        // Air intake holes on back\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([body_diameter/2 - 3, 0, 5])\n            cylinder(h = 10, d = 8);\n        }\n    }\n    \n    // Handle\n    translate([0, -body_diameter/2 - handle_diameter/2 - 5, -10])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = handle_length, d = handle_diameter);\n        // Wire hole at bottom\n        translate([0, 0, -1])\n        cylinder(h = 5, d = 6);\n    }\n    \n    // Nozzle\n    translate([0, 0, body_length])\n    difference() {\n        // Tapered nozzle\n        cylinder(h1 = nozzle_diameter, h2 = nozzle_diameter*0.7, h = nozzle_length);\n        // Inner opening\n        cylinder(h = nozzle_length + 2, d = nozzle_diameter*0.8);\n    }\n    \n    // Control buttons\n    for(i = [0:1]) {\n        translate([body_diameter/2 + 2, -body_diameter/4 + i*10, body_length/2 - 10 + i*5])\n        cube([6, 8, 4]);\n    }\n    \n    // Switch\n    translate([0, -body_diameter/2 - 5, body_length/2])\n    cube([8, 4, 10]);\n    \n    // Handle grip texture\n    for(i = [5:5:handle_length-10]) {\n        rotate([90, 0, 0])\n        translate([0, -body_diameter/2 - handle_diameter/2 - 5, -i])\n        difference() {\n            cylinder(h = 2, d = handle_diameter + 2);\n            cylinder(h = 3, d = handle_diameter - 2);\n        }\n    }\n    \n    // Rear grill detail\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 3, d = body_diameter - 2);\n        for(i = [0:8]) {\n            rotate([0, 0, i * 22.5])\n            translate([0, 0, -1])\n            cube([body_diameter - 4, 1.5, 5]);\n        }\n    }\n    \n    // Power cord\n    translate([0, -body_diameter/2 - handle_diameter/2 - 5, -handle_length - 10])\n    rotate([90, 0, 0])\n    cylinder(h = 30, d = 4);\n}\n\n// Render the complete hairdryer\nhairdryer();",
    "renders": true
  },
  {
    "household_item": "straightener",
    "openscad_code": "// Hair Straightener – Realistic / Medium complexity\n// Overall length ≈ 85 mm, printable without supports\n\n// Basic parameters\nhandle_d = 14;               // Handle diameter\nhandle_l = 70;               // Handle length\nplate_w = 25;                // Straightening plate width\nplate_d = 65;                // Plate depth\nplate_t = 4;                 // Plate thickness\ngap = 3;                     // Gap between plates when closed\nhinge_r = 3;                 // Hinge pin radius\nwall_t = 1.5;                // Minimum printable wall thickness\n\n// Main assembly\ndifference() {\n    union() {\n        // ===== Lower arm =====\n        translate([0,0,handle_l/2 - 5])\n            rotate([90,0,0])\n                handle();\n\n        translate([0,0,plate_t/2 + gap])\n            lower_plate();\n\n        // ===== Upper arm =====\n        translate([0,0,-(handle_l/2 - 5)])\n            rotate([-90,0,0])\n                handle();\n\n        translate([0,0,-(plate_t/2)])\n            upper_plate();\n\n        // ===== Hinge =====\n        hinge();\n    }\n\n    // ===== Cable hole =====\n    translate([0,handle_l/2 + 5,0])\n        rotate([0,90,0])\n            cylinder(h = handle_d, r = 3.5, $fn = 20);\n}\n\n// ===== Handle module =====\nmodule handle() {\n    difference() {\n        // Main grip body\n        cylinder(h = handle_l, r = handle_d/2, $fn = 32);\n\n        // Grooves for grip\n        for(i = [1:4]) {\n            translate([0,0,i*(handle_l/5)])\n                cylinder(h = 1.5, r1 = handle_d/2, r2 = handle_d/2 - 1, $fn = 32);\n        }\n    }\n\n    // Control button\n    translate([0,handle_d/2 + 0.5,handle_l*0.7])\n        cube([8,2,4], center = true);\n}\n\n// ===== Lower straightening plate =====\nmodule lower_plate() {\n    difference() {\n        // Outer shell\n        cube([plate_d, plate_w, plate_t], center = true);\n\n        // Heated ceramic surface inset\n        translate([0,0,plate_t/2 - 0.5])\n            cube([plate_d - 4, plate_w - 4, 1], center = true);\n    }\n\n    // Alignment pins\n    for(p = [-1,1]) {\n        translate([p*(plate_d/2 - 5), p*(plate_w/2 - 4), plate_t/2 + 1])\n            cylinder(h = 2, r = 1.5, $fn = 12);\n    }\n}\n\n// ===== Upper straightening plate =====\nmodule upper_plate() {\n    difference() {\n        cube([plate_d, plate_w, plate_t], center = true);\n\n        // Heated ceramic surface inset\n        translate([0,0,-(plate_t/2 - 0.5)])\n            cube([plate_d - 4, plate_w - 4, 1], center = true);\n\n        // Pin holes\n        for(p = [-1,1]) {\n            translate([p*(plate_d/2 - 5), p*(plate_w/2 - 4), -plate_t/2 - 1])\n                cylinder(h = 4, r = 1.6, $fn = 12);\n        }\n    }\n}\n\n// ===== Hinge module =====\nmodule hinge() {\n    // Lower hinge barrel\n    translate([0,0,0])\n        difference() {\n            cylinder(h = plate_w, r = hinge_r + wall_t, center = true, $fn = 24);\n            cylinder(h = plate_w + 1, r = hinge_r, center = true, $fn = 24);\n        }\n\n    // Upper hinge barrel\n    translate([0,0,0])\n        difference() {\n            rotate([0,90,0])\n                cylinder(h = plate_w, r = hinge_r + wall_t, center = true, $fn = 24);\n            rotate([0,90,0])\n                cylinder(h = plate_w + 1, r = hinge_r, center = true, $fn = 24);\n        }\n\n    // Pin (split for printability)\n    translate([0,0,0])\n        rotate([0,90,0])\n            cylinder(h = plate_w + 2, r = hinge_r - 0.2, center = true, $fn = 24);\n}",
    "renders": true
  },
  {
    "household_item": "curlers",
    "openscad_code": "// Realistic 3D printable hair curler (medium complexity)\n// Overall length ~80 mm, diameter ~25 mm\n\n$fn = 36;  // Smooth curves\n\n// Main parameters\nlength = 80;\nouter_dia = 25;\nwall = 1.5;        // 3D-print safe wall thickness\ngrip = 3;          // Height of grip ridges\nridge_w = 1.5;     // Width of each ridge\n\n// Central hollow tube\nmodule tube() {\n    difference() {\n        cylinder(h = length, d = outer_dia, center = true);\n        translate([0, 0, 0])\n            cylinder(h = length + 2, d = outer_dia - 2*wall, center = true);\n    }\n}\n\n// Grip ridges along the body\nmodule grip_ridges() {\n    ridge_count = floor(length / (ridge_w * 2));\n    for (i = [0 : ridge_count - 1]) {\n        translate([0, 0, -length/2 + i*2*ridge_w + ridge_w/2])\n            difference() {\n                // Outer ridge ring\n                cylinder(h = ridge_w, d1 = outer_dia + 2*grip, d2 = outer_dia + 2*grip);\n                // Remove inner part\n                cylinder(h = ridge_w + 0.1, d = outer_dia, center = true);\n            }\n    }\n}\n\n// Snap clip\nmodule clip() {\n    clip_len = length * 0.85;\n    clip_thick = 2;\n    radius = outer_dia/2 + 2;\n    \n    difference() {\n        // Main arc body\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                linear_extrude(height = clip_thick, center = true, convexity = 4)\n                    arc(radius, 200);\n\n        // Inner clearance arc\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                linear_extrude(height = clip_thick + 0.2, center = true)\n                    arc(radius - wall - 2, 200);\n\n        // Finger tab\n        translate([0, -radius - 3, 0])\n            cube([8, 6, clip_thick], center = true);\n    }\n}\n\n// Helper for generating arc polygon\nmodule arc(r, angle) {\n    step = 2;\n    pts = [for (a = [0 : step : angle]) [r*cos(a-90), r*sin(a-90)]];\n    polygon(points = concat([[0,0]], pts, [[0,0]]));\n}\n\n// End caps to avoid overhangs\nmodule end_caps() {\n    // Top cap\n    translate([0, 0, length/2])\n        cylinder(h = wall, d = outer_dia, center = true);\n    // Bottom cap\n    translate([0, 0, -length/2])\n        cylinder(h = wall, d = outer_dia, center = true);\n}\n\n// Assemble curler\nunion() {\n    tube();\n    grip_ridges();\n    end_caps();\n}\n\n// Render the clip separately so it can be printed flat\n// Uncomment next line to include clip in same render\n// translate([0, 0, length/2 + 10]) rotate([0, 0, 180]) clip();",
    "renders": true
  },
  {
    "household_item": "epilator",
    "openscad_code": "// Epilator Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm long, 35mm wide, 40mm tall\n\n// Main body parameters\nbody_len = 70;\nbody_wid = 30;\nbody_ht  = 35;\nwall     = 2;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_len/2, 0, 0])\n                sphere(d = body_wid);\n            translate([body_len/2, 0, 0])\n                sphere(d = body_wid);\n        }\n        // Hollow inside\n        scale([0.8, 0.8, 0.8])\n            hull() {\n                translate([-body_len/2, 0, 0])\n                    sphere(d = body_wid);\n                translate([body_len/2, 0, 0])\n                    sphere(d = body_wid);\n            }\n    }\n}\n\nmodule grip_ridges() {\n    // Rubber grip pattern on sides\n    for (i = [-1, 1]) {\n        translate([0, i*body_wid/2, 0])\n            for (z = [-body_ht/2+5:3:body_ht/2-5]) {\n                translate([0, 0, z])\n                    cube([body_len-10, wall, 1], center = true);\n            }\n    }\n}\n\nmodule power_button() {\n    translate([body_len/2-15, 0, body_ht/2-5])\n        difference() {\n            cylinder(h = 3, d = 8, $fn = 30);\n            translate([0, 0, -1])\n                cube([9, 3, 5], center = true);\n        }\n}\n\nmodule epilator_head() {\n    // Rotating tweezer drum\n    difference() {\n        cylinder(h = 15, d = 22, $fn = 60);\n        for (i = [0:45:359])\n            rotate([0, 0, i])\n                translate([8, 0, 0])\n                    cube([2, 1, 15], center = true);\n    }\n}\n\nmodule head_mount() {\n    // Mounting ring for head\n    difference() {\n        cylinder(h = 8, d = 26, $fn = 60);\n        cylinder(h = 10, d = 20, $fn = 60);\n    }\n}\n\nmodule charging_port() {\n    translate([-body_len/2+5, 0, -body_ht/2+5])\n        cube([6, 10, 6], center = true);\n}\n\nmodule led_indicator() {\n    translate([body_len/2-20, body_wid/2+1, body_ht/2-8])\n        sphere(d = 3);\n}\n\n// Assembly\nunion() {\n    main_body();\n    grip_ridges();\n    power_button();\n    \n    // Epilator head assembly\n    translate([body_len/2+10, 0, 0])\n        rotate([90, 0, 0])\n            union() {\n                head_mount();\n                translate([0, 0, 10])\n                    epilator_head();\n            }\n    \n    charging_port();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "household_item": "toothbrush",
    "openscad_code": "// Realistic Toothbrush - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Handle parameters\nhandle_length = 75;\nhandle_width = 12;\nhandle_height = 12;\nhandle_curve = 20;\n\n// Head parameters\nhead_length = 30;\nhead_width = 10;\nhead_height = 8;\n\n// Bristle parameters\nbristle_rows = 4;\nbristle_cols = 6;\nbristle_diameter = 1.2;\nbristle_height = 12;\nbristle_spacing = 2.5;\n\n// Grip texture parameters\ngrip_rings = 8;\ngrip_width = 1.5;\ngrip_depth = 0.5;\n\nmodule handle() {\n    // Main handle body with ergonomic curve\n    union() {\n        // Tapered handle\n        hull() {\n            translate([0, 0, handle_height/2])\n                cube([handle_length/3, handle_width*0.8, handle_height*0.8], center=true);\n            translate([handle_length*0.7, 0, handle_height/2])\n                cube([handle_length/3, handle_width, handle_height], center=true);\n        }\n        \n        // Curved neck transition\n        translate([handle_length-5, 0, handle_height/2+handle_curve/2])\n            rotate([0, -15, 0])\n            cube([10, handle_width*0.9, handle_height*0.9], center=true);\n    }\n}\n\nmodule grip_texture() {\n    // Rubber grip rings\n    for(i = [1:grip_rings]) {\n        translate([i*handle_length/(grip_rings+1), 0, handle_height/2])\n            difference() {\n                cylinder(h=grip_width, d=handle_width+0.5, center=true);\n                cylinder(h=grip_width+0.1, d=handle_width-grip_depth*2, center=true);\n            }\n    }\n}\n\nmodule head() {\n    // Toothbrush head with bristle base\n    translate([handle_length+head_length/2-5, 0, handle_height/2+handle_curve])\n        rotate([0, -15, 0])\n        union() {\n            // Main head\n            cube([head_length, head_width, head_height], center=true);\n            \n            // Bristle base\n            translate([head_length/2-2, 0, head_height/2])\n                cube([4, head_width-2, 2], center=true);\n        }\n}\n\nmodule bristles() {\n    // Individual bristles in rows\n    for(row = [0:bristle_rows-1]) {\n        for(col = [0:bristle_cols-1]) {\n            translate([\n                handle_length+head_length-4,\n                (col-(bristle_cols-1)/2)*bristle_spacing,\n                handle_height/2+handle_curve+head_height/2+bristle_height/2\n            ]) {\n                rotate([0, -15, 0])\n                    cylinder(h=bristle_height, d=bristle_diameter, $fn=8);\n            }\n        }\n    }\n}\n\nmodule toothbrush() {\n    union() {\n        // Main body\n        handle();\n        \n        // Grip texture\n        grip_texture();\n        \n        // Head\n        head();\n        \n        // Bristles\n        bristles();\n    }\n}\n\n// Render the complete toothbrush\ntoothbrush();",
    "renders": true
  },
  {
    "household_item": "waterpik",
    "openscad_code": "// Waterpik Water Flosser – realistic medium-complexity model\n// Overall size ≈ 80 mm tall, 3D-printable with 1 mm wall thickness\n\n$fn = 36;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 25]) cylinder(h = 50, r1 = 18, r2 = 22);\n            translate([0, 0, 0])  cylinder(h = 25, r1 = 20, r2 = 18);\n        }\n        \n        // Hollow out\n        translate([0, 0, 1.5]) cylinder(h = 47, r = 16.5);\n    }\n}\n\n// Water reservoir tank\nmodule reservoir() {\n    difference() {\n        // Tank body\n        translate([0, 0, -20]) cylinder(h = 22, r = 25);\n        \n        // Inner cavity\n        translate([0, 0, -19]) cylinder(h = 20, r = 23);\n        \n        // Top opening for body\n        translate([0, 0, 2]) cylinder(h = 3, r = 19);\n    }\n}\n\n// Control button panel\nmodule buttons() {\n    for (i = [0:1]) {\n        translate([20 + i * 8, -5, 45]) cube([5, 10, 2]);\n    }\n}\n\n// Tip holder at top\nmodule tipHolder() {\n    difference() {\n        // Cylinder base\n        translate([0, 0, 75]) cylinder(h = 8, r = 6);\n        \n        // Central hole for tip\n        translate([0, 0, 74]) cylinder(h = 10, r = 2.5);\n    }\n}\n\n// Water nozzle tip\nmodule nozzleTip() {\n    union() {\n        translate([0, 0, 83]) cylinder(h = 25, r = 2.5);\n        translate([0, 0, 108]) cylinder(h = 5, r = 1.5);\n    }\n}\n\n// Charging port at rear\nmodule chargingPort() {\n    translate([-21, 0, 10]) cube([3, 8, 6]);\n}\n\n// Side ridges for grip\nmodule gripRidges() {\n    for (i = [0:5]) {\n        rotate([0, 0, 30 + i * 12]) {\n            translate([0, 19, 20]) cube([1, 3, 35]);\n        }\n    }\n}\n\n// Assemble the Waterpik\nunion() {\n    // Main components\n    body();\n    reservoir();\n    \n    // Details\n    buttons();\n    tipHolder();\n    nozzleTip();\n    chargingPort();\n    gripRidges();\n}",
    "renders": true
  },
  {
    "household_item": "whitener",
    "openscad_code": "// Whitener bottle with cap and tip\n// Overall height ~75mm, base ~35mm diameter\n\n$fn = 36;  // Smooth curves\n\n// Main module\nmodule whitener() {\n    // Bottle body\n    union() {\n        // Outer body – slightly tapered cylinder\n        cylinder(h = 55, r1 = 17, r2 = 15, center = false);\n\n        // Shoulder transition to neck\n        translate([0, 0, 55])\n            cylinder(h = 5, r1 = 15, r2 = 7, center = false);\n\n        // Neck\n        translate([0, 0, 60])\n            cylinder(h = 8, r = 7, center = false);\n\n        // Cap base\n        translate([0, 0, 68])\n            cylinder(h = 4, r = 9, center = false);\n\n        // Cap top\n        translate([0, 0, 72])\n            cylinder(h = 3, r = 8.5, center = false);\n\n        // Tip\n        translate([0, 0, 75])\n            cylinder(h = 4, r1 = 2.5, r2 = 1.5, center = false);\n    }\n\n    // Internal hollow – shell thickness 1.5mm\n    difference() {\n        // Start with solid body\n        union() {\n            cylinder(h = 55, r1 = 17 - 1.5, r2 = 15 - 1.5, center = false);\n            translate([0, 0, 55])\n                cylinder(h = 5, r1 = 15 - 1.5, r2 = 7 - 1.5, center = false);\n            translate([0, 0, 60])\n                cylinder(h = 8, r = 7 - 1.5, center = false);\n        }\n        // Cut off bottom to open\n        translate([0, 0, -0.1])\n            cube([40, 40, 0.2], center = true);\n    }\n\n    // Cap grip rings\n    for (i = [0 : 1 : 3]) {\n        translate([0, 0, 68.5 + i * 0.8])\n            difference() {\n                cylinder(h = 0.4, r = 9, center = false);\n                cylinder(h = 0.5, r = 8.2, center = false);\n            }\n    }\n\n    // Label recess\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h = 25, r = 17.1, center = false);\n            cylinder(h = 25.2, r = 16, center = false);\n        }\n}\n\n// Render\nwhitener();",
    "renders": true
  },
  {
    "household_item": "diffuser",
    "openscad_code": "// Medium-complexity realistic essential-oil diffuser\n// Overall size ~70 mm diameter × 45 mm tall\n// All walls ≥1.5 mm for FDM printing\n\n$fn = 32;\n\n// Main body parameters\nbody_d = 70;\nbody_h = 30;\nwall_t = 2;\nwater_level = 10;\n\n// Lid / mist outlet\nlid_d = body_d;\nlid_h = 8;\nvent_d = 20;\nvent_h = 5;\n\n// Feet\nfoot_d = 8;\nfoot_h = 5;\nn_feet = 4;\n\n// Interior ribs to break surface tension\nrib_w = 1.5;\nrib_h = 3;\nn_ribs = 12;\n\n// Module for one foot\nmodule foot() {\n    cylinder(h = foot_h, d1 = foot_d, d2 = foot_d * 0.7, $fn = 16);\n}\n\n// Module for one rib\nmodule rib() {\n    translate([0, 0, water_level / 2])\n        cube([body_d - wall_t * 2, rib_w, rib_h], center = true);\n}\n\n// Main body shell\ndifference() {\n    // Outer shell\n    cylinder(h = body_h, d = body_d);\n    \n    // Hollow interior\n    translate([0, 0, -0.1])\n        cylinder(h = body_h + 0.2, d = body_d - wall_t * 2);\n    \n    // Water reservoir cavity\n    translate([0, 0, body_h - water_level - 0.1])\n        cylinder(h = water_level + 0.2, d = body_d - wall_t * 2);\n}\n\n// Feet\nfor (i = [0 : n_feet - 1]) {\n    rotate([0, 0, i * 360 / n_feet])\n        translate([body_d / 2 * 0.7, 0, 0])\n            foot();\n}\n\n// Internal ribs\nfor (i = [0 : n_ribs - 1]) {\n    rotate([0, 0, i * 360 / n_ribs])\n        rib();\n}\n\n// Cable exit slot\ntranslate([body_d / 2 - wall_t / 2, 0, body_h / 2])\n    rotate([0, 90, 0])\n        cylinder(h = wall_t + 0.2, d = 6, $fn = 12);\n\n// Lid assembly\ntranslate([0, 0, body_h])\n    difference() {\n        union() {\n            // Lid disc\n            cylinder(h = lid_h, d = lid_d);\n            \n            // Raised vent stack\n            translate([0, 0, lid_h])\n                cylinder(h = vent_h, d = vent_d + 6);\n        }\n        \n        // Mist outlet hole\n        translate([0, 0, lid_h - 0.1])\n            cylinder(h = vent_h + 0.2, d = vent_d);\n        \n        // Inner lip to center lid on body\n        translate([0, 0, -0.1])\n            cylinder(h = 3 + 0.2, d = body_d - wall_t * 2);\n    }\n\n// Fill line indicator\ntranslate([0, body_d / 2 - wall_t - 0.5, body_h - water_level + 0.5])\n    cube([20, wall_t, 0.5]);",
    "renders": true
  },
  {
    "household_item": "nebulizer",
    "openscad_code": "// Nebulizer - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm x 40mm x 80mm\n\n$fn = 32;\n\n// Main body dimensions\nbody_width = 40;\nbody_depth = 30;\nbody_height = 60;\n\n// Base module for the main body\nmodule main_body() {\n    difference() {\n        // Main rounded body\n        hull() {\n            translate([0, 0, body_height/2])\n                cylinder(h = body_height, d1 = body_width, d2 = body_width*0.9);\n            translate([0, 0, body_height/4])\n                sphere(d = body_width*1.1);\n        }\n        \n        // Top chamber cavity\n        translate([0, 0, body_height*0.7])\n            cylinder(h = body_height*0.4, d = body_width*0.7);\n            \n        // Bottom cavity for electronics\n        translate([0, 0, body_height*0.15])\n            cube([body_width*0.8, body_depth*0.8, body_height*0.3], center = true);\n    }\n}\n\n// Air compressor housing\nmodule compressor_housing() {\n    translate([body_width/2 + 10, 0, body_height*0.3]) {\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 25, d = 15);\n                translate([0, 0, -1])\n                    cylinder(h = 27, d = 12);\n            }\n    }\n}\n\n// Medicine cup\nmodule medicine_cup() {\n    translate([0, body_depth/2 + 15, body_height*0.8]) {\n        difference() {\n            // Cup body\n            cylinder(h = 12, d1 = 20, d2 = 18);\n            \n            // Inner cavity\n            translate([0, 0, 2])\n                cylinder(h = 10, d1 = 16, d2 = 14);\n        }\n        \n        // Rim\n        translate([0, 0, 12])\n            cylinder(h = 2, d = 22);\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    translate([0, body_depth/2 + 35, body_height*0.8 + 6]) {\n        rotate([-30, 0, 0])\n            difference() {\n                // Main mouthpiece\n                cylinder(h = 15, d1 = 12, d2 = 8);\n                \n                // Air channel\n                translate([0, 0, -1])\n                    cylinder(h = 17, d = 6);\n            }\n    }\n}\n\n// Tubing connector\nmodule tube_connector() {\n    translate([body_width/2 + 15, 0, body_height*0.4]) {\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 8, d = 8);\n                cylinder(h = 10, d = 4);\n            }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    for(i = [0:2]) {\n        translate([body_width*0.3, -body_depth/2 - 3 - i*6, body_height*0.5 + i*5]) {\n            cylinder(h = 4, d = 6);\n        }\n    }\n}\n\n// Air vents\nmodule air_vents() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([body_width/2 - 5, 0, body_height*0.3])\n                cube([8, 2, 10]);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    compressor_housing();\n    medicine_cup();\n    mouthpiece();\n    tube_connector();\n    control_buttons();\n    air_vents();\n    \n    // Power indicator LED\n    translate([body_width*0.3, -body_depth/2 - 2, body_height*0.7])\n        sphere(d = 3);\n}",
    "renders": true
  },
  {
    "household_item": "massager",
    "openscad_code": "// Handheld Massage Stick – realistic, medium complexity\n// Approx. 90 mm long, no steep overhangs, 2 mm wall thickness\n$fn = 36;\n\n// Main assembly -------------------------------------------------\nmodule massager() {\n    handle();\n    neck();\n    head();\n    spheres_row();\n}\n\n// Handle --------------------------------------------------------\nmodule handle() {\n    difference() {\n        // Outer shell\n        rotate([0, 90, 0])\n            cylinder(h = 80, d1 = 28, d2 = 24, center = true);\n        \n        // Hollow core\n        rotate([0, 90, 0])\n            cylinder(h = 82, d1 = 24, d2 = 20, center = true);\n        \n        // Grip grooves\n        for(i = [-30:15:30])\n            translate([i, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d = 30, center = true);\n    }\n}\n\n// Neck ----------------------------------------------------------\nmodule neck() {\n    translate([40, 0, 0])\n        difference() {\n            rotate([0, 90, 0])\n                cylinder(h = 15, d = 20, center = true);\n            rotate([0, 90, 0])\n                cylinder(h = 17, d = 16, center = true);\n        }\n}\n\n// Massage head --------------------------------------------------\nmodule head() {\n    translate([47, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                // Outer bulb\n                sphere(d = 32);\n                // Inner cavity\n                sphere(d = 28);\n                // Flat contact face\n                translate([0, 0, 12])\n                    cube([40, 40, 20], center = true);\n            }\n}\n\n// Row of small massage spheres ---------------------------------\nmodule spheres_row() {\n    translate([60, 0, 0])\n        for(i = [-1:1]) {\n            translate([0, 0, i * 10])\n                sphere(d = 8);\n        }\n}\n\nmassager();",
    "renders": true
  },
  {
    "household_item": "tens",
    "openscad_code": "// TENS Unit - Realistic Style, Medium Complexity\n// 3D printable model with functional details\n\n$fn = 50;\nwall_thickness = 1.2;\n\n// Main body dimensions\nbody_width = 40;\nbody_height = 80;\nbody_depth = 18;\n\n// Screen dimensions\nscreen_width = 30;\nscreen_height = 18;\nscreen_depth = 1.5;\n\n// Button dimensions\nbutton_width = 6;\nbutton_height = 3;\nbutton_depth = 1;\n\n// Electrode connector dimensions\nconnector_diameter = 3.5;\nconnector_height = 2.5;\n\n// Battery compartment\nbattery_width = 25;\nbattery_height = 35;\nbattery_depth = 8;\n\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded edges\n        hull() {\n            translate([0, 0, body_depth/2])\n                cube([body_width, body_height, body_depth], center=true);\n            translate([0, 0, body_depth/2-2])\n                scale([0.9, 0.9, 1])\n                cube([body_width, body_height, body_depth], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_depth/2])\n            cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth-wall_thickness], center=true);\n        \n        // Screen cutout\n        translate([0, body_height/4, body_depth/2])\n            cube([screen_width+2, screen_height+2, screen_depth+1], center=true);\n        \n        // Button cutouts\n        for(i = [0:3]) {\n            translate([-body_width/4 + i*body_width/4, -body_height/4, body_depth/2])\n                cube([button_width+1, button_height+1, button_depth+1], center=true);\n        }\n        \n        // Electrode connector holes\n        translate([body_width/2-3, body_height/3, body_depth/2])\n            rotate([0, 90, 0])\n            cylinder(h=body_width/2, d=connector_diameter+0.5, center=true);\n        \n        translate([body_width/2-3, -body_height/3, body_depth/2])\n            rotate([0, 90, 0])\n            cylinder(h=body_width/2, d=connector_diameter+0.5, center=true);\n    }\n}\n\nmodule screen() {\n    translate([0, body_height/4, body_depth/2+0.1])\n        cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Screen details\n    difference() {\n        translate([0, body_height/4, body_depth/2+screen_depth/2+0.1])\n            cube([screen_width-2, screen_height-4, 0.5], center=true);\n        \n        // Display segments\n        for(i = [0:2]) {\n            for(j = [0:1]) {\n                translate([-screen_width/4 + i*screen_width/4, body_height/4 + j*5 - 2.5, body_depth/2+screen_depth+0.2])\n                    cube([2, 1, 0.3], center=true);\n            }\n        }\n    }\n}\n\nmodule buttons() {\n    // Power button\n    translate([0, -body_height/4, body_depth/2+0.1])\n        cube([button_width+2, button_height, button_depth], center=true);\n    \n    // Control buttons\n    for(i = [-1.5:1.5:3]) {\n        translate([i*body_width/4, -body_height/4, body_depth/2+0.1])\n            cube([button_width, button_height, button_depth], center=true);\n    }\n}\n\nmodule electrode_connectors() {\n    // Left connector\n    translate([body_width/2-1, body_height/3, body_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=connector_height, d=connector_diameter, center=true);\n    \n    // Right connector\n    translate([body_width/2-1, -body_height/3, body_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=connector_height, d=connector_diameter, center=true);\n    \n    // Connector details\n    for(pos = [[body_height/3, 1], [-body_height/3, -1]]) {\n        translate([body_width/2+1, pos[0], body_depth/2])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=connector_height+1, d=connector_diameter+2, center=true);\n                cylinder(h=connector_height+2, d=connector_diameter, center=true);\n            }\n    }\n}\n\nmodule battery_compartment() {\n    // Compartment door\n    translate([0, body_height/2-5, body_depth/2])\n        difference() {\n            cube([battery_width+4, battery_height+4, 1], center=true);\n            translate([0, 0, -0.5])\n                cube([battery_width, battery_height, 2], center=true);\n        }\n    \n    // Battery outline\n    translate([0, body_height/2-5, body_depth/2-0.5])\n        cube([battery_width-4, battery_height-6, 0.5], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    color(\"black\") screen();\n    color(\"gray\") buttons();\n    color(\"silver\") electrode_connectors();\n    color(\"darkgray\") battery_compartment();\n}\n\n// Clip\ntranslate([-body_width/2-2, 0, body_depth/2])\n    difference() {\n        hull() {\n            cube([4, body_height/3, 10], center=true);\n            translate([0, 0, -5])\n                cube([4, body_height/3-10, 5], center=true);\n        }\n        translate([0, 0, 0])\n            cube([2, body_height/3-2, 8], center=true);\n    }",
    "renders": true
  },
  {
    "household_item": "bloodpressure",
    "openscad_code": "// Realistic 3D-printable blood-pressure cuff (sphygmomanometer) ~90 mm long\n// Medium complexity – recognizable, printable, no overhangs\n\n$fn = 36;           // Smoother curves\nwall = 1.5;         // Printable wall thickness\nscale = 0.9;        // Global size factor so model ≈ 90 mm long\n\nmodule cuff_body() {\n    // Soft fabric cuff rolled into a hollow cylinder\n    difference() {\n        cylinder(h = 50*scale, d = 65*scale, center = true);\n        translate([0,0,-1])\n            cylinder(h = 52*scale, d = 65*scale - 2*wall, center = true);\n    }\n}\n\nmodule cuff_edges() {\n    // Thicker rim edges for realism\n    for(z = [-25*scale, 25*scale])\n        translate([0,0,z])\n            cylinder(h = 2*wall, d = 65*scale + wall);\n}\n\nmodule velcro_straps() {\n    // Two hook-and-loop strips on cuff\n    for(a = [0, 180]) {\n        rotate([0,0,a])\n            translate([0, 32.5*scale, 0])\n                cube([15*scale, 3*wall, 50*scale], center = true);\n    }\n}\n\nmodule bulb() {\n    // Rubber inflation bulb with one-way valve stub\n    union() {\n        // Bulb body\n        scale([1, 1.2, 1])\n            sphere(d = 22*scale);\n        // Valve stub\n        translate([0, 12*scale, 0])\n            rotate([90,0,0])\n                cylinder(h = 12*scale, d1 = 6*scale, d2 = 5*scale);\n    }\n}\n\nmodule tube() {\n    // Flexible rubber tube from cuff to bulb\n    hull() {\n        translate([28*scale, 0, 0])\n            sphere(d = 5*scale);\n        translate([-28*scale, 0, 0])\n            sphere(d = 5*scale);\n    }\n}\n\nmodule gauge() {\n    // Realistic aneroid gauge housing\n    difference() {\n        // Main housing\n        cylinder(h = 12*scale, d = 35*scale);\n        // Recessed face\n        translate([0,0,-0.5])\n            cylinder(h = 13*scale, d = 28*scale);\n    }\n    // Dial needle\n    color(\"red\")\n        rotate([0,0,30])\n            translate([0,0,12*scale-0.2])\n                cube([0.5, 12*scale, 0.5], center = true);\n    // Tube connector stub\n    translate([0, 17.5*scale, 0])\n        rotate([90,0,0])\n            cylinder(h = 8*scale, d = 6*scale);\n}\n\nmodule assembly() {\n    // Position cuff horizontally\n    rotate([90,0,0])\n        cuff_body();\n    rotate([90,0,0])\n        cuff_edges();\n    rotate([90,0,0])\n        velcro_straps();\n\n    // Tube runs along cuff edge\n    translate([0, 0, 25*scale])\n        rotate([0,90,0])\n            tube();\n\n    // Bulb at end of tube\n    translate([33*scale, 0, 25*scale])\n        rotate([0,90,0])\n            bulb();\n\n    // Gauge attached near cuff center\n    translate([-28*scale, 0, 0])\n        rotate([0,90,0])\n            gauge();\n}\n\n// Render the complete model\nassembly();",
    "renders": true
  },
  {
    "household_item": "glucometer",
    "openscad_code": "// Glucometer model - medium complexity realistic style\n// Overall dimensions ~80x55x20mm\n\n$fn = 36;\n\n// Main body shell with rounded edges\nmodule body() {\n    difference() {\n        // Main rounded shell\n        minkowski() {\n            cube([70, 45, 15], center=true);\n            sphere(2.5);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n        minkowski() {\n            cube([64, 39, 12], center=true);\n            sphere(1.5);\n        }\n        \n        // Test strip slot\n        translate([32.5, -20, 0])\n        rotate([0, 90, 0])\n        cylinder(h=40, d=3.5, center=true);\n        \n        // Display window\n        translate([-10, 0, 8.5])\n        cube([30, 25, 2], center=true);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"darkblue\")\n    translate([-10, 0, 9.5])\n    cube([26, 21, 0.5], center=true);\n}\n\n// Buttons module\nmodule buttons() {\n    // Power button\n    translate([25, 15, 9])\n    cylinder(h=2, d=6);\n    \n    // Memory button\n    translate([25, 0, 9])\n    cylinder(h=2, d=6);\n    \n    // Set button\n    translate([25, -15, 9])\n    cylinder(h=2, d=6);\n}\n\n// Test strip guide rails\nmodule guide_rails() {\n    for(y = [-18, 18]) {\n        translate([32.5, y, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=10, d=4);\n            translate([0, 0, -1])\n            cylinder(h=12, d=3.5);\n        }\n    }\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    translate([0, 20, -8])\n    difference() {\n        cube([30, 10, 1.5], center=true);\n        translate([0, 0, -0.5])\n        cube([28, 8, 2], center=true);\n    }\n    \n    // Screws\n    for(x = [-10, 10]) {\n        translate([x, 20, -7])\n        cylinder(h=1, d=2);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    translate([-35, 20, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cube([12, 6, 4], center=true);\n        translate([0, 0, 1])\n        cube([10, 4, 4], center=true);\n    }\n}\n\n// Grip texture on sides\nmodule grip_texture() {\n    for(i = [-20:5:20]) {\n        translate([35.5, i, 0])\n        rotate([0, 90, 0])\n        cylinder(h=1, d=0.8);\n    }\n    \n    for(i = [-20:5:20]) {\n        translate([-35.5, i, 0])\n        rotate([0, 90, 0])\n        cylinder(h=1, d=0.8);\n    }\n}\n\n// Assemble the glucometer\nunion() {\n    body();\n    display();\n    buttons();\n    guide_rails();\n    battery_cover();\n    usb_port();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "household_item": "pulseoximeter",
    "openscad_code": "// Pulse oximeter - fingertip style\n// External size: ~65 mm long × 35 mm wide × 30 mm high\n\n$fn = 50;        // Smooth curves for printing\nwall = 1.8;      // 3D-print friendly wall thickness\ngap  = 0.3;      // Print clearance between moving parts\n\nmodule shell_half(h) {\n    // Outer half-shell\n    difference() {\n        hull() {\n            translate([0, 0, h/2]) cube([60, 30, h], center=true);\n            translate([0, 0, h/2-10]) sphere(d=33);\n        }\n        // Hollow inside\n        translate([0, 0, h/2-0.5]) cube([60-wall*2, 30-wall*2, h+2], center=true);\n        translate([0, 0, h/2-10]) sphere(d=33-wall*2);\n    }\n}\n\nmodule top_shell() {\n    shell_half(15);\n}\n\nmodule bottom_shell() {\n    mirror([0,0,1]) shell_half(15);\n}\n\nmodule finger_tunnel() {\n    // Cavity for finger\n    color(\"LightBlue\", 0.3)\n    difference() {\n        hull() {\n            sphere(d=18);\n            translate([20, 0, 0]) sphere(d=18);\n        }\n        // Remove bottom half for opening\n        translate([0, 0, -15]) cube([50, 50, 15], center=true);\n    }\n}\n\nmodule display_window() {\n    // OLED window on top shell\n    difference() {\n        translate([-25, 0, 7.5]) cube([16, 22, 1]);\n        translate([-25, 0, 7.5+0.2]) cube([15, 21, 0.6], center=true);\n    }\n}\n\nmodule button() {\n    // Single push button\n    color(\"Gray\")\n    translate([20, -10, 7.5])\n    cylinder(d=6, h=2, $fn=20);\n}\n\nmodule spring_pin() {\n    // Hinge pin for shell\n    color(\"Silver\")\n    rotate([90,0,0])\n    cylinder(d=3, h=32, center=true);\n}\n\nmodule battery_box() {\n    // CR2032 coin cell compartment\n    difference() {\n        translate([15, 8, -6])\n        cube([20, 12, 6]);\n        translate([15, 8, -5])\n        cube([18, 10, 4]);\n    }\n}\n\nmodule sensor_pads() {\n    // LEDs & photodiodes pairs\n    for(side=[-1,1]) {\n        translate([0, side*10, 0])\n        color(\"Red\", 0.7)\n        sphere(d=5);\n    }\n}\n\n// Assembly\nunion() {\n    // Top half\n    top_shell();\n\n    // Bottom half\n    translate([0, 0, gap])\n    bottom_shell();\n\n    // Finger cavity\n    translate([5, 0, 0])\n    finger_tunnel();\n\n    // Display window cutout\n    display_window();\n\n    // Button\n    button();\n\n    // Battery compartment in bottom half\n    battery_box();\n\n    // Sensor pads\n    sensor_pads();\n\n    // Hinge pins (one on each side)\n    translate([-30, 0, 0])\n    spring_pin();\n    translate([30, 0, 0])\n    spring_pin();\n}",
    "renders": true
  },
  {
    "household_item": "babyphone",
    "openscad_code": "// Babyphone – Medium-realistic style, 3D-printable, ~70 mm tall\n// All overhangs ≤45°, walls ≥1.2 mm for FDM printing\n\n$fn = 32;               // Global cylinder smoothness\n\n// Overall dimensions\nphone_w = 38;           // Body width\nphone_h = 70;           // Body height\nphone_d = 18;           // Body depth\nwall_t  = 1.5;          // Wall thickness\n\nmodule rounded_box(w, h, d, r, t) {\n    // Hollow rounded box with constant wall thickness\n    difference() {\n        minkowski() {\n            cube([w-2*r, h-2*r, d-2*r], center=true);\n            sphere(r);\n        }\n        minkowski() {\n            cube([w-2*r-2*t, h-2*r-2*t, d-2*r-2*t], center=true);\n            sphere(r);\n        }\n    }\n}\n\nmodule main_body() {\n    difference() {\n        // Exterior shell\n        rounded_box(phone_w, phone_h, phone_d, 6, wall_t);\n\n        // Speaker grille: array of small holes\n        translate([0, -15, phone_d/2]) {\n            for(y=[-12:4:12])\n                for(x=[-14:4:14])\n                    translate([x, y, 0])\n                        cylinder(d=2, h=wall_t+1, center=true);\n        }\n\n        // Microphone hole\n        translate([0, 18, phone_d/2])\n            cylinder(d=3, h=wall_t+1, center=true);\n\n        // USB-C port\n        translate([0, -phone_h/2+4, 0])\n            rotate([0, 90, 0])\n                cylinder(d=7, h=8, center=true);\n    }\n}\n\nmodule antenna() {\n    // Flexible stub antenna\n    translate([0, phone_h/2-1, phone_d/2-5])\n        rotate([80, 0, 0])\n            cylinder(d1=4, d2=2, h=18);\n}\n\nmodule buttons() {\n    // Three rubber buttons in a row\n    for(i=[-1:1])\n        translate([i*9, 0, phone_d/2+0.1])\n            cylinder(d=6, h=1.5, $fn=20);\n}\n\nmodule screen() {\n    // Recessed LCD\n    translate([0, -phone_h/2+20, phone_d/2-0.5])\n        cube([22, 12, 0.5], center=true);\n    // Display surface\n    color(\"black\")\n        translate([0, -phone_h/2+20, phone_d/2])\n            cube([20, 10, 0.2], center=true);\n}\n\nmodule volume_knob() {\n    // Side wheel\n    translate([phone_w/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(d=8, h=4, center=true);\n}\n\n// Assembly\nmain_body();\nantenna();\nbuttons();\nscreen();\nvolume_knob();",
    "renders": true
  },
  {
    "household_item": "monitoring",
    "openscad_code": "// Realistic-style desktop monitoring camera\n// ~70 mm wide × 50 mm deep × 50 mm tall\n// Medium complexity, 3D-printable (no supports)\n\n$fa = 2;\n$fs = 0.5;\n\nmodule base() {\n    difference() {\n        // Main base plate\n        cube([60, 40, 8], center=true);\n\n        // Cable channel underneath\n        translate([0, -15, -4.5])\n            cube([10, 20, 2], center=true);\n\n        // Screw recesses (4×)\n        for (dx = [-25, 25], dy = [-15, 15])\n            translate([dx, dy, -5])\n                cylinder(h=2, d=6, center=true);\n    }\n}\n\nmodule stem() {\n    // Tilt hinge block\n    translate([0, 0, 8])\n        cube([20, 18, 15], center=true);\n\n    // Vertical post\n    translate([0, 0, 15.5])\n        cylinder(h=20, d=8, center=true);\n}\n\nmodule ball_joint() {\n    sphere(d=10, center=true);         // Ball\n    translate([0, 0, 5.5])\n        rotate([90, 0, 0])\n            cylinder(h=10, d1=6, d2=4);  // Neck\n}\n\nmodule camera_body() {\n    difference() {\n        // Main housing\n        translate([0, 0, 21])\n            cube([30, 26, 22], center=true);\n\n        // Lens opening\n        translate([0, 13.5, 21])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=16);\n\n        // IR LED windows\n        for (y = [8, -8])\n            translate([10, y, 21])\n                sphere(d=3);\n    }\n}\n\nmodule lens() {\n    difference() {\n        // Outer lens barrel\n        translate([0, 18, 21])\n            rotate([90, 0, 0])\n                cylinder(h=10, d1=14, d2=12);\n\n        // Inner lens\n        translate([0, 27, 21])\n            rotate([90, 0, 0])\n                cylinder(h=2, d=8);\n    }\n}\n\nmodule status_led() {\n    // Ring around lens\n    translate([0, 18, 21])\n        rotate([90, 0, 0])\n            cylinder(h=1, d=10);\n}\n\nunion() {\n    base();\n    stem();\n    translate([0, 0, 26])\n        ball_joint();\n    camera_body();\n    lens();\n    color(\"red\") status_led();\n}",
    "renders": true
  },
  {
    "household_item": "doorbell",
    "openscad_code": "// Realistic Medium-Complexity Doorbell for 3D Printing\n// Approx 70 mm wide, 120 mm tall including push-button cap\n\n// Doorbell housing shell (main body)\nmodule housing() {\n    difference() {\n        // Main shell – rounded rectangle extrusion\n        linear_extrude(height = 22, center = true, convexity = 4)\n            offset(r = 5)\n                square([60, 100], center = true);\n\n        // Recess for the push-button\n        translate([0, 0, 10.1])\n            cylinder(h = 12, d = 22, $fn = 48);\n    }\n}\n\n// Mounting back-plate with two screw holes\nmodule backplate() {\n    difference() {\n        translate([0, 0, -12])\n            cube([64, 104, 4], center = true);\n\n        // Counter-sunk screw holes Ø5 mm\n        for(y = [-30, 30])\n            translate([0, y, -10])\n                cylinder(h = 6, d1 = 9, d2 = 5, $fn = 24);\n    }\n}\n\n// Push-button cap with finger-friendly dome\nmodule button() {\n    translate([0, 0, 22])\n    union() {\n        // Travelling shaft cylinder\n        cylinder(h = 8, d = 18, $fn = 32);\n\n        // Comfortable rounded cap\n        translate([0, 0, 8])\n            scale([1, 1, 0.4])\n                sphere(d = 24, $fn = 48);\n    }\n}\n\n// Speaker grille (perforated front face)\nmodule grille() {\n    difference() {\n        // Grille plate\n        translate([0, 0, 11])\n            cube([56, 30, 2], center = true);\n\n        // Horizontal slots using difference and loops\n        for(y = [-12:3:12])\n            translate([0, y, 12.1])\n                cube([52, 1.2, 3], center = true);\n    }\n}\n\n// LED indicator ring around button\nmodule led_ring() {\n    difference() {\n        // Outer ring\n        translate([0, 0, 11])\n            cylinder(h = 2.5, d = 28, $fn = 48);\n\n        // Inner cut-out\n        translate([0, 0, 10.9])\n            cylinder(h = 2.7, d = 20, $fn = 48);\n    }\n}\n\n// Assembly\nunion() {\n    housing();\n    backplate();\n    button();\n    grille();\n    led_ring();\n}",
    "renders": true
  },
  {
    "household_item": "safe",
    "openscad_code": "// Medium-complexity realistic 3D-printable safe\n// Overall size ≈ 60 mm wide × 50 mm deep × 70 mm high\n// Wall thickness 2 mm, printable without supports\n\n$fn = 32;\n\n// Main safe body\nmodule safe_body() {\n    difference() {\n        // Outer shell\n        cube([60, 50, 70], center = true);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cube([56, 46, 66], center = true);\n    }\n}\n\n// Front door\nmodule door() {\n    difference() {\n        // Door plate\n        translate([0, 25.5, 0])\n            cube([58, 3, 66], center = true);\n        \n        // Recessed panel\n        translate([0, 27, 5])\n            cube([50, 1, 50], center = true);\n    }\n}\n\n// Hinges on the left\nmodule hinges() {\n    for (z = [-25, 0, 25]) {\n        translate([-30, 25, z])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 6, center = true);\n    }\n}\n\n// Combination dial\nmodule dial() {\n    translate([30, 27.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d = 18, center = true);\n    \n    // Dial handle\n    translate([30, 27.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 4, center = true);\n    \n    // Grip ridges\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([30, 27.5, 20])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d1 = 3.5, d2 = 4.5, center = true);\n    }\n}\n\n// Handle spindle\nmodule handle() {\n    translate([-20, 27.5, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 6, center = true);\n    \n    // Handle grip\n    translate([-30, 27.5, 0])\n        rotate([0, 90, 0])\n            rotate([0, 0, 90])\n                cube([15, 3, 8], center = true);\n}\n\n// Bolts behind door (visible when open)\nmodule bolts() {\n    for (x = [-20, 20]) {\n        translate([x, 24, 25])\n            cube([4, 2, 10], center = true);\n    }\n    for (z = [-25, 25]) {\n        translate([25, 24, z])\n            cube([10, 2, 4], center = true);\n    }\n}\n\n// Feet\nmodule feet() {\n    for (x = [-25, 25])\n        for (y = [-20, 20])\n            translate([x, y, -35.5])\n                cylinder(h = 3, d = 8, center = true);\n}\n\n// Assembly\nunion() {\n    safe_body();\n    door();\n    hinges();\n    dial();\n    handle();\n    bolts();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "lightswitch",
    "openscad_code": "// Simple realistic light switch (North-American single-gang toggle switch)\n// Wall plate + toggle lever + screw heads\n// Designed for 3D printing – no overhangs > 45°, 1.2 mm walls\n\n// Overall scale factor (mm)\nscale_factor = 1;\n\n// Wall plate dimensions\nplate_w   = 70 * scale_factor;\nplate_h   = 115 * scale_factor;\nplate_t   = 3  * scale_factor;\nbevel     = 2  * scale_factor;\n\n// Toggle lever\nlever_len = 25 * scale_factor;\nlever_d   = 6  * scale_factor;\ntoggle_r  = 3.5 * scale_factor;\n\n// Screw head\nscrew_d   = 8  * scale_factor;\nscrew_h   = 2  * scale_factor;\nscrew_ofs = 7  * scale_factor;\n\n// Wall cut-out size (recess)\nbox_w = 40 * scale_factor;\nbox_h = 60 * scale_factor;\nbox_d = 25 * scale_factor;\n\n// Module: rounded plate edges\nmodule rounded_plate() {\n    difference() {\n        // Main plate\n        cube([plate_w, plate_h, plate_t], center = true);\n        \n        // Rounded top/bottom edges\n        translate([0, plate_h/2 - bevel, 0])\n            cube([plate_w, bevel*2, plate_t*2], center = true);\n        translate([0, -plate_h/2 + bevel, 0])\n            cube([plate_w, bevel*2, plate_t*2], center = true);\n        \n        // Rounded left/right edges\n        translate([plate_w/2 - bevel, 0, 0])\n            cube([bevel*2, plate_h, plate_t*2], center = true);\n        translate([-plate_w/2 + bevel, 0, 0])\n            cube([bevel*2, plate_h, plate_t*2], center = true);\n    }\n    \n    // Add bevel fillets\n    for (x = [-plate_w/2 + bevel, plate_w/2 - bevel])\n    for (y = [-plate_h/2 + bevel, plate_h/2 - bevel])\n        translate([x, y, plate_t/2])\n            cylinder(r = bevel, h = plate_t, center = true, $fn = 16);\n}\n\n// Module: toggle lever\nmodule toggle() {\n    // Pivot sphere inside plate\n    translate([0, 0, plate_t/2])\n        sphere(r = toggle_r, $fn = 32);\n    \n    // Lever shaft\n    translate([0, 0, plate_t/2 + lever_len/2])\n        rotate([0, 12, 0])  // slight angle for realism\n            cylinder(r = lever_d/2, h = lever_len, $fn = 20);\n    \n    // Flat paddle tip\n    translate([0, 0, plate_t/2 + lever_len])\n        rotate([0, 12, 0])\n            cube([lever_d*0.8, lever_d*1.2, lever_d*0.4], center = true);\n}\n\n// Module: screw head (simple slotted)\nmodule screw_head() {\n    cylinder(d = screw_d, h = screw_h, $fn = 24);\n    translate([0, 0, screw_h/2])\n        cube([screw_d*0.5, screw_d*0.15, screw_h*1.1], center = true);\n}\n\n// Assembly\nunion() {\n    // Wall plate with rounded edges\n    rounded_plate();\n    \n    // Recess box at back\n    translate([0, 0, -box_d/2 - plate_t/2])\n        cube([box_w, box_h, box_d], center = true);\n    \n    // Toggle lever\n    toggle();\n    \n    // Screw heads (top and bottom)\n    translate([0, plate_h/2 - screw_ofs, plate_t/2])\n        screw_head();\n    translate([0, -plate_h/2 + screw_ofs, plate_t/2])\n        screw_head();\n}",
    "renders": true
  },
  {
    "household_item": "dimmer",
    "openscad_code": "// Realistic 3D printable dimmer switch\n// Overall size ~86 x 86 x 25 mm\n\n// Main plate\nmodule dimmer_plate() {\n    difference() {\n        // Main body\n        cube([86, 86, 6], center=true);\n        \n        // Screw holes\n        for(x = [-35, 35])\n            for(y = [-35, 35]) {\n                translate([x, y, 2.5])\n                    cylinder(h=10, r=2.2, center=true);\n            }\n        \n        // Center hole for mechanism\n        translate([0, 0, 2.5])\n            cylinder(h=10, r=12, center=true);\n    }\n}\n\n// Back box\nmodule back_box() {\n    difference() {\n        // Main box\n        translate([0, 0, -12])\n            cube([68, 68, 24], center=true);\n        \n        // Hollow center\n        translate([0, 0, -12])\n            cube([60, 60, 24], center=true);\n        \n        // Wire entry holes\n        for(x = [-25, 0, 25])\n            translate([x, 0, -22])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r=6, center=true);\n    }\n}\n\n// Knob mechanism\nmodule dimmer_knob() {\n    difference() {\n        union() {\n            // Main knob\n            cylinder(h=12, r=15);\n            \n            // Indicator ridge\n            translate([0, 14, 6])\n                cube([2, 4, 2], center=true);\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=14, r=6);\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    difference() {\n        // Main bracket\n        translate([0, 0, -3])\n            cube([50, 50, 6], center=true);\n        \n        // Center hole\n        translate([0, 0, -3])\n            cylinder(h=8, r=8, center=true);\n        \n        // Mounting holes\n        for(angle = [0:120:240])\n            rotate([0, 0, angle])\n                translate([20, 0, -3])\n                    cylinder(h=8, r=2.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Plate\n    dimmer_plate();\n    \n    // Back box\n    translate([0, 0, -3])\n        back_box();\n    \n    // Mounting bracket\n    translate([0, 0, 3])\n        mounting_bracket();\n    \n    // Knob\n    translate([0, 0, 9])\n        dimmer_knob();\n}",
    "renders": true
  },
  {
    "household_item": "outlet",
    "openscad_code": "// Realistic 3D-printable outlet – medium complexity\n// All dimensions in millimetres, printable without supports\n\nwall_th = 2.0;        // thin enough to print cleanly\nplate_w = 70;         // wall plate width\nplate_h = 115;        // wall plate height\nplate_d = 5;          // wall plate depth\nbox_w  = 50;          // electrical box width\nbox_h  = 95;          // electrical box height\nbox_d  = 35;          // electrical box depth\nhole_d = 6.5;         // screw hole diameter\nslot_w = 12;          // outlet slot width\nslot_h = 23;          // outlet slot height\nslot_d = 9;           // outlet slot depth\nground_d = 6.5;       // ground pin hole\nground_h = 9;\n\n// wall plate with rounded corners\nmodule wall_plate() {\n    difference() {\n        // main plate\n        minkowski() {\n            cube([plate_w, plate_h, plate_d], center=true);\n            cylinder(h=plate_d, r=3, $fn=16);\n        }\n        // two outlet openings\n        translate([0, -28, -plate_d/2])\n            cube([slot_w, slot_h, slot_d+2], center=true);\n        translate([0,  28, -plate_d/2])\n            cube([slot_w, slot_h, slot_d+2], center=true);\n        // screw holes\n        translate([-25, -42, -plate_d/2])\n            cylinder(h=plate_d+1, d=hole_d, $fn=20);\n        translate([ 25, -42, -plate_d/2])\n            cylinder(h=plate_d+1, d=hole_d, $fn=20);\n    }\n}\n\n// electrical box (back housing)\nmodule box() {\n    difference() {\n        // outer shell\n        cube([box_w, box_h, box_d], center=true);\n        // inner cavity (leave wall thickness)\n        translate([0, 0, -wall_th/2])\n            cube([box_w-2*wall_th,\n                  box_h-2*wall_th,\n                  box_d-wall_th], center=true);\n        // cable entry hole at bottom\n        translate([0, -box_h/2+5, -box_d/2+box_d/2])\n            rotate([90,0,0])\n                cylinder(h=box_w, d=16, center=true, $fn=32);\n    }\n}\n\n// outlet receptacle face (thin insert)\nmodule receptacle() {\n    difference() {\n        // body\n        cube([slot_w+2, slot_h*2+10, slot_d], center=true);\n        // two vertical slots\n        translate([0, -28, 0])\n            cube([slot_w-1, slot_h, slot_d+1], center=true);\n        translate([0,  28, 0])\n            cube([slot_w-1, slot_h, slot_d+1], center=true);\n        // ground holes\n        translate([0, -28, 0])\n            cylinder(h=slot_d+1, d=ground_d, center=true, $fn=20);\n        translate([0,  28, 0])\n            cylinder(h=slot_d+1, d=ground_d, center=true, $fn=20);\n    }\n}\n\nmodule outlet() {\n    difference() {\n        union() {\n            // back box\n            translate([0,0,-box_d/2-plate_d/2])\n                box();\n            // plate\n            wall_plate();\n            // receptacles inserted into plate\n            translate([0, -28, -plate_d/2-slot_d/2])\n                receptacle();\n            translate([0,  28, -plate_d/2-slot_d/2])\n                receptacle();\n        }\n    }\n}\n\n// render the complete outlet\noutlet();",
    "renders": true
  },
  {
    "household_item": "extender",
    "openscad_code": "// Realistic USB-C Male-to-Female Extender\n// 75 mm total length, 3 mm wall-thickness, support-free printable\n\n$fn = 36;\n\n// Overall dimensions\next_len = 75;\next_dia = 12;\nshell_thk = 3;\n\nmodule usb_c_plug(length = 8.25) {\n    // USB-C metal shell\n    color(\"silver\")\n    difference() {\n        cube([8.4, 2.6, length], center = true);\n        cube([6.75, 0.7, length+0.1], center = true);\n    }\n    \n    // Inner plastic tongue\n    color(\"black\")\n    translate([0, 0, length/2 - 0.5])\n    cube([6.75, 0.7, 0.6], center = true);\n    \n    // Contact traces\n    for (i = [0:11]) {\n        color(\"gold\")\n        translate([-3.3 + i*0.6, 0, length/2 - 0.8])\n        cube([0.3, 0.3, 0.2], center = true);\n    }\n}\n\nmodule usb_c_receptacle() {\n    // Outer shell\n    color(\"silver\")\n    difference() {\n        cube([8.4, 2.6, 6], center = true);\n        cube([6.75, 0.7, 6.5], center = true);\n    }\n    \n    // Internal cavity for tongue\n    color(\"black\")\n    translate([0, 0, -3])\n    cube([6.75, 0.7, 3.5], center = true);\n}\n\nmodule strain_relief() {\n    // Tapered sleeve\n    color(\"black\")\n    difference() {\n        cylinder(h = 15, d1 = 12, d2 = 10, center = true);\n        cylinder(h = 16, d1 = 6, d2 = 4, center = true);\n    }\n}\n\nmodule cable_segment() {\n    // Main body tube\n    color(\"black\")\n    difference() {\n        cylinder(h = ext_len - 8.25 - 6 - 15, d = 10);\n        translate([0, 0, -0.1])\n        cylinder(h = ext_len - 8.25 - 6 - 15 + 0.2, d = 4);\n    }\n    \n    // Reinforcement rings every 12 mm\n    for (z = [5:12:ext_len - 8.25 - 6 - 15 - 5]) {\n        color(\"gray\")\n        translate([0, 0, z])\n        cylinder(h = 2, d = 11);\n    }\n}\n\n// Assembly\ntranslate([0, 0, ext_len/2])\nrotate([90, 0, 0])\nunion() {\n    // Male plug at left end\n    translate([-ext_len/2 + 8.25/2, 0, 0])\n    usb_c_plug(8.25);\n    \n    // Female receptacle at right end\n    translate([ext_len/2 - 6/2, 0, 0])\n    usb_c_receptacle();\n    \n    // Left strain relief\n    translate([-ext_len/2 + 8.25 + 15/2, 0, 0])\n    strain_relief();\n    \n    // Right strain relief mirrored\n    scale([-1, 1, 1])\n    translate([-ext_len/2 + 8.25 + 15/2, 0, 0])\n    strain_relief();\n    \n    // Cable between strain reliefs\n    translate([(-ext_len/2 + 8.25 + 15) + (ext_len - 8.25 - 6 - 15)/2, 0, 0])\n    cable_segment();\n}",
    "renders": true
  },
  {
    "household_item": "repeater",
    "openscad_code": "// Realistic 3D-Printable Repeater (Wi-Fi Router)\n// Roughly 80 mm in length, 60 mm wide, 20 mm thick (flat orientation for printing)\n\n$fn = 30;            // Smooth curves\nwall = 1.4;          // 1.4 mm shell thickness for FDM printing\nant_d = 3;           // Antenna diameter\nant_h = 20;          // Antenna height above case\n\n// Main body shell\nmodule case() {\n    difference() {\n        // Outer rounded box\n        hull() {\n            translate([0,0,wall/2]) cube([78,58,wall], center=true);\n            translate([0,0,wall/2]) cube([78,58,wall], center=true);\n        }\n        // Hollow interior\n        translate([0,0,wall/2]) cube([78-2*wall, 58-2*wall, wall], center=true);\n    }\n}\n\n// Ventilation slots (printed as bridges)\nmodule vents() {\n    for (x = [-30:10:30]) {\n        translate([x, 0, 0]) cube([2, 56, 0.8], center=true);\n    }\n}\n\n// Status LEDs\nmodule leds() {\n    for (i = [0:2]) {\n        translate([-25 + i*25, 28, 0.6])\n            color(\"lime\") cylinder(h=0.6, d=3);\n    }\n}\n\n// Ethernet ports\nmodule ports() {\n    for (p = [0:3]) {\n        translate([30 - p*8, -28, 0])\n            difference() {\n                cube([6, 3, 4]);\n                translate([3, 1.5, 2]) rotate([90,0,0])\n                    cylinder(h=6, d=2.5);\n            }\n    }\n}\n\n// Antenna bases (rotate on Z axis)\nmodule antenna_base() {\n    translate([-33, 0, wall/2]) rotate([0,0,45]) cylinder(h=wall*2, d=6);\n    translate([33, 0, wall/2]) rotate([0,0,-45]) cylinder(h=wall*2, d=6);\n}\n\n// Antenna elements\nmodule antennas() {\n    translate([-33, 0, wall + ant_h/2])\n        rotate([0,0,45]) cylinder(h=ant_h, d=ant_d);\n    translate([33, 0, wall + ant_h/2])\n        rotate([0,0,-45]) cylinder(h=ant_h, d=ant_d);\n}\n\n// Assemble model\ntranslate([0,0,wall/2]) {\n    case();\n    vents();\n    leds();\n    ports();\n    antenna_base();\n    antennas();\n}",
    "renders": true
  },
  {
    "household_item": "adapter",
    "openscad_code": "// USB-C to USB-A Female Adapter (Medium Realistic Style)\n\n// Overall dimensions\ntotal_len = 55;          // Total length\nusb_c_len = 15;          // USB-C plug length\nusb_a_len = 20;          // USB-A receptacle depth\nmid_len = total_len - usb_c_len - usb_a_len;\n\nwall = 2.0;              // Wall thickness for 3D printing\ntolerance = 0.3;         // Fit tolerance\n\n// USB-C plug dimensions\nc_width = 8.3;\nc_thick = 2.5;\nc_shell_wall = 0.7;\n\n// USB-A receptacle dimensions\na_width = 15.8;\na_thick = 7.5;\n\n// Shell radius\nshell_r = 1.5;\n\n// Helper module for rounded rectangle extrusion\nmodule rounded_rect(w, h, l, r) {\n    translate([0, 0, -l/2])\n        linear_extrude(height = l)\n            offset(r = r)\n                square([w, h], center = true);\n}\n\n// Main shell body\nmodule shell() {\n    hull() {\n        // USB-C end\n        translate([-total_len/2 + usb_c_len/2, 0, 0])\n            rounded_rect(c_width + 2*wall + 2*c_shell_wall,\n                         c_thick + 2*wall + 2*c_shell_wall,\n                         usb_c_len,\n                         shell_r);\n        \n        // USB-A end\n        translate([total_len/2 - usb_a_len/2, 0, 0])\n            rounded_rect(a_width + 2*wall,\n                         a_thick + 2*wall,\n                         usb_a_len,\n                         shell_r);\n    }\n}\n\n// USB-C plug outer shell\nmodule usbc_plug() {\n    difference() {\n        // Outer metal shell\n        rounded_rect(c_width + 2*c_shell_wall,\n                     c_thick + 2*c_shell_wall,\n                     usb_c_len,\n                     shell_r/2);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            rounded_rect(c_width,\n                         c_thick,\n                         usb_c_len + 0.2,\n                         shell_r/4);\n    }\n}\n\n// USB-C tongue with contacts\nmodule usbc_tongue() {\n    color(\"darkgray\")\n    translate([-total_len/2 + usb_c_len - 1.0, 0, 0])\n        rounded_rect(c_width - 2.0,\n                     0.7,\n                     2.0,\n                     0.3);\n    \n    // Simple contact pads representation\n    for (i = [-3:3]) {\n        translate([-total_len/2 + usb_c_len - 0.5,\n                   i * 0.6,\n                   -0.2])\n            cube([0.3, 0.3, 0.2]);\n    }\n}\n\n// USB-A receptacle\nmodule usba_receptacle() {\n    difference() {\n        // Outer shell\n        rounded_rect(a_width, a_thick, usb_a_len, shell_r);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            rounded_rect(a_width - 2*wall,\n                         a_thick - 2*wall,\n                         usb_a_len + 0.2,\n                         shell_r);\n        \n        // Tongue opening\n        translate([total_len/2 - usb_a_len + 2, 0, 0])\n            cube([usb_a_len, 6.2, 2.5], center = true);\n    }\n}\n\n// Keying ribs for USB-A\nmodule usba_keying() {\n    translate([total_len/2 - usb_a_len + 0.5, 0, a_thick/2 - wall])\n        cube([1.5, a_width - 2*wall, wall]);\n    \n    translate([total_len/2 - usb_a_len + 0.5, 0, -a_thick/2])\n        cube([1.5, a_width - 2*wall, wall]);\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    for (i = [-2:2]) {\n        translate([i * 8, 0, 0])\n            difference() {\n                shell();\n                translate([0, 0, -total_len/2])\n                    cube([6, 30, total_len], center = true);\n            }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Main shell\n        shell();\n        \n        // USB-C plug shell\n        color(\"silver\")\n        translate([-total_len/2 + usb_c_len/2, 0, 0])\n            usbc_plug();\n        \n        // USB-A receptacle shell\n        color(\"silver\")\n        translate([total_len/2 - usb_a_len/2, 0, 0])\n            usba_receptacle();\n        \n        // USB-A keying\n        color(\"silver\")\n        usba_keying();\n        \n        // Grip texture\n        grip_texture();\n    }\n    \n    // Hollow out the adapter\n    hull() {\n        // USB-C end cavity\n        translate([-total_len/2 + usb_c_len/2, 0, 0])\n            rounded_rect(c_width - tolerance,\n                         c_thick - tolerance,\n                         usb_c_len + 2,\n                         shell_r/2);\n        \n        // Transition cavity\n        translate([0, 0, 0])\n            rounded_rect(c_width + 1,\n                         c_thick + 1,\n                         mid_len,\n                         shell_r);\n        \n        // USB-A end cavity\n        translate([total_len/2 - usb_a_len/2, 0, 0])\n            rounded_rect(a_width - 2*wall - tolerance,\n                         a_thick - 2*wall - tolerance,\n                         usb_a_len + 2,\n                         shell_r);\n    }\n}\n\n// USB-C tongue and contacts\nusbc_tongue();",
    "renders": true
  },
  {
    "household_item": "splitter",
    "openscad_code": "// Realistic 3-way Y-splitter for garden hose / compressed air\n// 3D-printable, no support, 1.2 mm wall thickness, 50 mm total length\n\n$fa = 2; $fs = 0.5;\n\nmodule pipeSegment(id, od, h) {\n    // outer cylinder minus inner → hollow pipe\n    difference() {\n        cylinder(h = h, d = od, center = true);\n        translate([0,0,-h/2-0.01])\n            cylinder(h = h+0.02, d = id, center = false);\n    }\n}\n\nmodule hexKnurl(d, h) {\n    // hex flats for wrench grip\n    linear_extrude(height = h, center = true, convexity = 10)\n        circle(d = d, $fn = 6);\n}\n\nmodule barbRing(od, h, n) {\n    // multiple barb rings for hose retention\n    for(i = [0 : n-1])\n        translate([0,0, -h*n/2 + h*i + h/2])\n            cylinder(h = h*0.6, d1 = od, d2 = od+1.5);\n}\n\nmodule outlet(outerD, innerD, barbD, barbH, barbCount) {\n    union() {\n        // main pipe\n        pipeSegment(innerD, outerD, 22);\n        \n        // barb section\n        translate([0,0,11])\n            barbRing(barbD, barbH, barbCount);\n        \n        // hex nut section\n        translate([0,0,-11-5])\n            hexKnurl(outerD+2, 10);\n    }\n}\n\nmodule splitterBody() {\n    // central chamber: sphere with wall thickness\n    difference() {\n        sphere(d = 32);\n        sphere(d = 32-2*1.2);\n    }\n    \n    // inlet pipe (top)\n    translate([0,0,16])\n        pipeSegment(12, 14.4, 20);\n    \n    // three outlets at 120° apart\n    for(a = [0, 120, 240])\n        rotate([0,0,a])\n            rotate([45,0,0])\n                translate([0,0,16])\n                    outlet(14.4, 12, 13, 1.5, 5);\n    \n    // thickening ring\n    translate([0,0,0])\n        cylinder(h = 2, d = 34, center = true);\n}\n\n// Render the splitter\nsplitterBody();",
    "renders": true
  },
  {
    "household_item": "hub",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nhub_d = 50;\nhub_h = 25;\nshaft_d = 8;\nkey_w = 3;\nkey_h = 1.5;\nflange_d = 68;\nflange_h = 6;\nbolt_num = 4;\nbolt_d = 5.5;\nbolt_circle_d = 58;\nbolt_head_h = 3;\nbolt_head_d = 8.5;\n\nmodule hub_body() {\n    difference() {\n        // Main hub cylinder\n        cylinder(d = hub_d, h = hub_h, $fn = 60);\n        \n        // Central shaft hole\n        translate([0, 0, -1])\n            cylinder(d = shaft_d, h = hub_h + 2, $fn = 32);\n        \n        // Keyway for shaft\n        translate([-shaft_d/2 - key_w/2, -key_h/2, -1])\n            cube([key_w, key_h, hub_h + 2]);\n    }\n}\n\nmodule flange() {\n    // Flange disk\n    cylinder(d = flange_d, h = flange_h, $fn = 90);\n    \n    // Bolt holes on flange\n    for (i = [0 : bolt_num - 1]) {\n        rotate([0, 0, i * 360 / bolt_num])\n            translate([bolt_circle_d/2, 0, -1])\n                cylinder(d = bolt_d, h = flange_h + 2, $fn = 16);\n    }\n}\n\nmodule spokes() {\n    spoke_num = 6;\n    spoke_w = 6;\n    spoke_h = hub_h * 0.7;\n    rim_r = hub_d/2 + 8;\n    \n    for (i = [0 : spoke_num - 1]) {\n        rotate([0, 0, i * 360 / spoke_num + 30])\n            rotate([90, 0, 0])\n                translate([0, 0, -spoke_h/2])\n                    cube([spoke_w, rim_r - hub_d/2 - 2, spoke_h], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    union() {\n        hub_body();\n        \n        translate([0, 0, hub_h - flange_h])\n            flange();\n        \n        // Reinforcement ribs between flange and hub\n        for (i = [0 : bolt_num - 1]) {\n            rotate([0, 0, i * 360 / bolt_num + 45])\n                translate([bolt_circle_d/2 - 5, 0, hub_h - flange_h/2 - 3])\n                    cube([10, 3, 6], center = true);\n        }\n    }",
    "renders": true
  },
  {
    "household_item": "switch",
    "openscad_code": "// Light-switch plate with rocker switch (realistic, medium complexity)\n// Overall footprint ≈ 70 mm × 115 mm × 25 mm\n\n$fn = 36;\n\n// ---------- Parameters ----------\nplate_w = 70;\nplate_h = 115;\nplate_t = 2.6;\n\nbox_w = 50;\nbox_h = 80;\nbox_d = 20;\nwall_th = 2;\n\nrocker_w = 18;\nrocker_h = 28;\nrocker_t = 6;\npivot_r = 1.5;\nrocker_gap = 0.6;\n\nscrew_d = 3.3;           // M3 screws\nscrew_head_d = 5.7;\nscrew_head_h = 2;\n\n// ---------- Main assembly ----------\nmodule switch_assembly() {\n    difference() {\n        // Wall plate\n        plate();\n\n        // Screw holes\n        translate([0, plate_h/2 - 12, -1])\n            screw_hole();\n        translate([0, -plate_h/2 + 12, -1])\n            screw_hole();\n\n        // Rocker opening\n        translate([0, 0, plate_t - 0.01])\n            cube([rocker_w + rocker_gap*2, rocker_h + rocker_gap*2, plate_t + 1], center = true);\n    }\n\n    // Electrical box (behind plate)\n    translate([0, 0, -box_d/2 - plate_t/2])\n        electrical_box();\n\n    // Rocker switch\n    translate([0, 0, plate_t + rocker_t/2])\n        rotate([15, 0, 0])\n            rocker();\n}\n\n// ---------- Plate ----------\nmodule plate() {\n    difference() {\n        // Main plate body\n        cube([plate_w, plate_h, plate_t], center = true);\n\n        // Chamfer top and bottom edges\n        translate([0, 0, plate_t/2 - 0.5])\n            minkowski() {\n                cube([plate_w - 4, plate_h - 4, 1], center = true);\n                cylinder(h = 0.1, r = 1.5);\n            }\n    }\n}\n\n// ---------- Electrical box ----------\nmodule electrical_box() {\n    difference() {\n        // Outer shell\n        cube([box_w, box_h, box_d], center = true);\n\n        // Inner cavity\n        translate([0, 0, -wall_th])\n            cube([box_w - 2*wall_th, box_h - 2*wall_th, box_d + 1], center = true);\n    }\n\n    // Mounting posts with screw holes\n    for (y = [box_h/2 - 10, -box_h/2 + 10])\n        translate([box_w/2 - wall_th - 3, y, -box_d/2 + wall_th + 3])\n            rotate([0, 90, 0])\n                cylinder(h = 6, d = screw_d + 1);\n}\n\n// ---------- Rocker ----------\nmodule rocker() {\n    difference() {\n        // Main rocker body\n        cube([rocker_w, rocker_h, rocker_t], center = true);\n\n        // Pivot ridge\n        translate([0, 0, -rocker_t/2 + pivot_r])\n            cylinder(h = rocker_w + 1, r = pivot_r, center = true);\n\n        // Top recess\n        translate([0, rocker_h/4, rocker_t/2 - 0.8])\n            cube([rocker_w - 4, rocker_h/3, 1.6], center = true);\n    }\n\n    // Indicator dimple\n    translate([0, -rocker_h/4, rocker_t/2 - 0.5])\n        sphere(d = 2.5, $fn = 20);\n}\n\n// ---------- Screw hole ----------\nmodule screw_hole() {\n    translate([0, 0, -1])\n        cylinder(h = plate_t + 2, d = screw_head_d, $fn = 6);\n    cylinder(h = plate_t + 2, d = screw_d);\n}\n\nswitch_assembly();",
    "renders": true
  },
  {
    "household_item": "drive",
    "openscad_code": "// USB 3.0 Flash Drive – 60 mm × 20 mm × 8 mm\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 36;          // Smooth curves\nwall = 1.0;        // Minimum wall thickness for FDM\n\nmodule body() {\n    difference() {\n        // Main shell\n        hull() {\n            translate([0,0,3.5]) cube([58,18,7], center=true);\n            translate([0,0,-0.5]) cube([54,14,1], center=true);\n        }\n        // Hollow it out\n        translate([0,0,0.5]) cube([56-wall*2,16-wall*2,6], center=true);\n    }\n}\n\nmodule keyring_hole() {\n    // Loop for chamfered hole\n    for (z=[0,1]) {\n        translate([0,0,z]) \n            rotate([90,0,0])\n                cylinder(h=2, d=6-z, center=true);\n    }\n}\n\nmodule usb_connector() {\n    // Metal shell\n    difference() {\n        translate([29,0,0]) cube([12,12,4.5], center=true);\n        translate([29,0,0]) cube([12.2,11.8,4.3], center=true);\n    }\n    // Plastic tongue\n    translate([34,0,0]) cube([3,9,1.8], center=true);\n    // Contacts\n    for (i=[-4:1:4]) {\n        translate([34.5,i*0.85,0.9]) cube([0.2,0.5,0.1], center=true);\n    }\n}\n\nmodule grip_strip() {\n    // Raised ridges for grip\n    for (i=[-4:1:4]) {\n        translate([-20,i*2.5,3.5])\n            cube([15,1.5,0.6], center=true);\n    }\n}\n\nmodule activity_led() {\n    // Tiny indicator window\n    translate([20,8,3.5])\n        cylinder(h=0.4, d=2, center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    color(\"silver\") usb_connector();\n    grip_strip();\n    color(\"red\") activity_led();\n    // Key-ring hole\n    translate([-28,0,0])\n        keyring_hole();\n}",
    "renders": true
  },
  {
    "household_item": "ssd",
    "openscad_code": "// M.2 2280 SSD realistic model\n// Dimensions: 80 mm × 22 mm × 2.38 mm\n\n$fn = 50;\n\n// PCB and overall shape\nmodule ssd_body() {\n    // Main PCB\n    difference() {\n        cube([80, 22, 1.6], center=false);\n        // Key notch\n        translate([75-4.2, 0, 0])\n            cube([4.2, 2.5, 1.6]);\n    }\n}\n\n// Controller chip\nmodule controller() {\n    translate([15, 11-7/2, 1.6])\n        cube([13, 7, 1.2]);\n}\n\n// NAND flash packages\nmodule nand_flash(x) {\n    translate([x, 11-9/2, 1.6])\n        cube([13.5, 9, 1.2]);\n}\n\n// DRAM cache\nmodule dram_chip() {\n    translate([33, 11-8/2, 1.6])\n        cube([12, 8, 1.2]);\n}\n\n// Small SMD components\nmodule smd_component(x, y) {\n    translate([x, y, 1.6])\n        cube([1.6, 0.8, 0.5]);\n}\n\n// Gold contact pads\nmodule contact_pads() {\n    for (i = [0:4:75]) {\n        translate([i, 0, -0.1])\n            cube([3.5, 2.5, 0.2]);\n    }\n}\n\n// Label sticker\nmodule label() {\n    translate([45, 11-8/2, 1.6+1.2+0.05])\n        cube([20, 8, 0.1]);\n}\n\n// Screw hole\nmodule screw_hole() {\n    translate([80-5.8, 11, -1])\n        cylinder(h=5, d=2.5);\n}\n\n// Main assembly\nunion() {\n    // PCB and components\n    union() {\n        ssd_body();\n        controller();\n        \n        // Two NAND packages\n        nand_flash(52);\n        nand_flash(68);\n        \n        dram_chip();\n        \n        // SMD passives\n        for (x = [5:5:75]) {\n            for (y = [3, 19]) {\n                smd_component(x, y);\n            }\n        }\n    }\n    \n    // Contact pads\n    contact_pads();\n    \n    // Label sticker\n    label();\n    \n    // Screw hole (for mounting)\n    screw_hole();\n}",
    "renders": true
  },
  {
    "household_item": "flash",
    "openscad_code": "// Realistic Camera Flash - OpenSCAD\n// Medium complexity with functional details\n\nmodule flash_body() {\n    difference() {\n        // Main body - rounded rectangle\n        translate([0, 0, 15])\n            minkowski() {\n                cube([60, 40, 30], center=true);\n                sphere(5);\n            }\n        \n        // Battery compartment cavity\n        translate([0, 0, 10])\n            cube([50, 30, 25], center=true);\n    }\n}\n\nmodule hot_shoe() {\n    difference() {\n        // Base plate\n        translate([0, 0, 0])\n            cube([25, 20, 5], center=true);\n        \n        // Hot shoe slot\n        translate([0, 0, -1])\n            cube([20, 15, 7], center=true);\n        \n        // Contact grooves\n        for(x = [-5, 0, 5]) {\n            translate([x, 0, 2.5])\n                cube([2, 15, 1], center=true);\n        }\n    }\n}\n\nmodule flash_head() {\n    difference() {\n        // Main flash head\n        translate([0, 0, 40])\n            rotate([90, 0, 0])\n                cylinder(h=25, r1=25, r2=22, center=true);\n        \n        // Fresnel lens cavity\n        translate([0, 0, 52])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=20, center=true);\n        \n        // Light sensor window\n        translate([15, 0, 45])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=3, center=true);\n    }\n}\n\nmodule control_panel() {\n    // LCD screen\n    translate([0, -20.5, 25])\n        cube([30, 1, 15], center=true);\n    \n    // Buttons\n    for(i = [0:2]) {\n        translate([-10 + i*10, -21, 30])\n            cylinder(h=2, r=3);\n    }\n    \n    // Power switch\n    translate([20, -21, 20])\n        cube([8, 1, 5], center=true);\n}\n\nmodule battery_door() {\n    // Hinged door\n    translate([0, 20.5, 15])\n        cube([45, 1, 25], center=true);\n    \n    // Door latch\n    translate([20, 21, 25])\n        cube([5, 2, 8], center=true);\n}\n\nmodule flash_tube() {\n    // Xenon flash tube\n    translate([0, 0, 50])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=20, r=18, center=true);\n                cylinder(h=21, r=15, center=true);\n            }\n    \n    // Reflector\n    translate([0, 0, 50])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, r=24, center=true);\n                cylinder(h=3, r=22, center=true);\n            }\n}\n\n// Assembly\nunion() {\n    flash_body();\n    hot_shoe();\n    flash_head();\n    control_panel();\n    battery_door();\n    flash_tube();\n}\n\n// Print orientation\nrotate([0, 180, 0])\n    translate([0, 0, -30])\n        children();",
    "renders": true
  },
  {
    "household_item": "memory",
    "openscad_code": "// ——— USB-A FLASH DRIVE — Realistic / Medium complexity — 3D-printable ———\n// Overall size ~60 mm × 18 mm × 8 mm\n// No critical over-hangs; 0.8 mm minimum wall thickness\n\n$fn = 64;\n\n// --------------- PARAMETERS ---------------\nbody_l  = 50;   // plastic body length\nbody_w  = 15;   // body width\nbody_h  = 7;    // body height\nshell_t = 1;    // shell wall thickness\nmetal_l = 12;   // metal USB tongue length\nmetal_w = 12;  // metal tongue width\nmetal_h = 4;   // metal tongue thickness\nkey_lip = 1;    // key-ring hole lip\nkey_d   = 3;    // key-ring hole diameter\n\n// --------------- MODULES ---------------\nmodule body_shell() {\n    difference() {\n        // outer rounded bar\n        hull() {\n            translate([-body_l/2, 0, 0])\n                cube([body_l, body_w, body_h], center=true);\n            translate([-body_l/2+4, 0, 0])\n                sphere(d=body_h);\n            translate([body_l/2-4, 0, 0])\n                sphere(d=body_h);\n        }\n        \n        // cavity for the PCB\n        translate([-(body_l-2*shell_t)/2, 0, 0])\n            cube([body_l-2*shell_t, body_w-2*shell_t, body_h-2*shell_t], center=true);\n        \n        // key-ring hole\n        translate([body_l/2-2, 0, 0])\n            rotate([90,0,0])\n                cylinder(h=body_w+1, d=key_d, center=true);\n    }\n}\n\nmodule metal_tongue() {\n    // main metal shell\n    translate([body_l/2+metal_l/2, 0, 0])\n        cube([metal_l, metal_w, metal_h], center=true);\n    \n    // opening slit\n    translate([body_l/2+metal_l/2, 0, 0])\n        cube([metal_l+0.1, metal_w-4, metal_h-2.5], center=true);\n    \n    // four contact pads\n    for (i=[0:3]) {\n        translate([body_l/2+metal_l-2.5-i*2.2, 0, metal_h/2-0.3])\n            cube([1.5, 2.5, 0.4], center=true);\n    }\n}\n\nmodule activity_led() {\n    // small dome LED window\n    translate([-(body_l/2-8), 0, body_h/2-shell_t])\n        sphere(d=2.2, $fn=32);\n}\n\n// --------------- ASSEMBLY ---------------\nunion() {\n    color(\"black\") body_shell();\n    color(\"silver\") metal_tongue();\n    color(\"red\") activity_led();\n}",
    "renders": true
  },
  {
    "household_item": "stick",
    "openscad_code": "// Realistic stick with bark texture and natural taper\n// Designed for 3D printing - 80mm long, 5mm diameter at base\n\nmodule bark_ring(height, radius, noise) {\n    // Create a ring of cubes to simulate bark texture\n    for (i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([radius, 0, height])\n        rotate([0, 90, 0])\n        scale([1, noise, 1])\n        cube([1, 1, 0.5], center=true);\n    }\n}\n\nmodule stick_segment(z_pos, base_radius, top_radius, segment_height) {\n    // Tapered cylinder for main structure\n    cylinder(h=segment_height, r1=base_radius, r2=top_radius, $fn=16);\n    \n    // Add bark texture rings along segment\n    for (z = [0:2:segment_height-1]) {\n        radius = base_radius + (top_radius - base_radius) * (z / segment_height);\n        bark_ring(z + z_pos, radius, 0.3 + sin(z * 3) * 0.2);\n    }\n}\n\nmodule stick_branch(angle, length, start_radius) {\n    // Branch coming off main stick\n    rotate([angle, 0, 0])\n    translate([0, 0, 0])\n    cylinder(h=length, r1=start_radius, r2=start_radius*0.3, $fn=12);\n    \n    // Add small twigs\n    for (i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([0, start_radius*0.5, length*0.7])\n        rotate([90, 0, 0])\n        cylinder(h=length*0.4, r=start_radius*0.2, r2=0, $fn=8);\n    }\n}\n\n// Main stick construction\nunion() {\n    // Base segment - thickest\n    stick_segment(0, 5, 4.2, 15);\n    \n    // Middle segments - gradually tapering\n    stick_segment(15, 4.2, 3.5, 15);\n    stick_segment(30, 3.5, 2.8, 15);\n    stick_segment(45, 2.8, 2.2, 15);\n    \n    // Top segment - thinnest\n    stick_segment(60, 2.2, 1.5, 15);\n    \n    // Main branch\n    translate([0, 0, 45])\n    stick_branch(45, 20, 1.8);\n    \n    // Secondary branch\n    translate([0, 0, 30])\n    rotate([0, 0, 120])\n    stick_branch(30, 12, 1.2);\n}\n\n// Add broken end detail at top\ndifference() {\n    translate([0, 0, 75])\n    cylinder(h=5, r=1.5, $fn=16);\n    \n    // Create jagged broken end\n    for (i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([1, 0, 0])\n        cube([2, 0.5, 5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "card",
    "openscad_code": "// Realistic playing card – 3D printable\n// Overall dimensions: 63 mm × 88 mm × 2 mm (standard poker size, 2 mm thick)\n\n// Parameters\ncard_w  = 63;\ncard_h  = 88;\ncard_t  = 2;\ncorner_r = 3;          // rounded corner radius\npip_r    = 4;          // pip (heart) radius\nwall     = 1;          // printable wall thickness\neps      = 0.01;       // small offset for clean booleans\n\n// Main card body with rounded corners\nmodule card_body() {\n    // rounded rectangle via hull of four cylinders\n    hull() {\n        for(dx = [corner_r, card_w-corner_r],\n            dy = [corner_r, card_h-corner_r])\n            translate([dx, dy, 0])\n                cylinder(r=corner_r, h=card_t, $fn=20);\n    }\n}\n\n// Simple stylized heart symbol (pip)\nmodule heart() {\n    // two spheres for lobes\n    union() {\n        translate([-pip_r/2, 0, 0]) sphere(r=pip_r, $fn=20);\n        translate([ pip_r/2, 0, 0]) sphere(r=pip_r, $fn=20);\n        // rotated cube for point\n        rotate([0,0,45]) translate([0, -pip_r*0.7, 0])\n            cube([pip_r*2, pip_r*2, pip_r*2], center=true);\n    }\n}\n\n// Raised pip on the card surface (z = card_t)\nmodule raised_pip() {\n    difference() {\n        heart();\n        translate([0,0,-eps]) scale([0.9,0.9,0.9]) heart();\n    }\n}\n\n// Raised index characters (simplified as thin blocks)\nmodule index(char=\"A\") {\n    scale([0.5,1,1]) cube([8,10,card_t*0.6], center=true);\n}\n\n// Left-top corner decoration: index + pip\nmodule corner_decoration() {\n    translate([corner_r+2, corner_r+2, card_t-eps]) {\n        union() {\n            translate([0, -4, 0]) index(\"A\");\n            translate([0, 4, 0]) scale(0.5) raised_pip();\n        }\n    }\n}\n\n// Right-bottom corner decoration: mirrored & rotated\nmodule mirrored_corner() {\n    mirror([1,0,0]) rotate([0,0,180]) corner_decoration();\n}\n\n// Central pattern: 5 pips arranged like a real ace\nmodule central_pips() {\n    positions = [\n        [0, 0],\n        [-card_w/4, -card_h/4],\n        [ card_w/4, -card_h/4],\n        [-card_w/4,  card_h/4],\n        [ card_w/4,  card_h/4]\n    ];\n    for(p = positions) {\n        translate([p.x, p.y, card_t-eps])\n            scale(1.2) raised_pip();\n    }\n}\n\n// Full card assembly\nunion() {\n    // Base card\n    card_body();\n\n    // Raised features on front face\n    corner_decoration();\n    mirrored_corner();\n    central_pips();\n}",
    "renders": true
  },
  {
    "household_item": "reader",
    "openscad_code": "// Realistic-style e-reader (Kindle-like) – medium complexity\n// Overall size: 120 x 89 x 9 mm  (printable on most FDM printers)\n\n// ---------- PARAMETERS ----------\nbody_w = 120;\nbody_h = 89;\nbody_t = 9;\n\nscreen_w = 105;\nscreen_h = 75;\nscreen_depth = 0.8;\n\nbezel = 6;\n\nbutton_w = 10;\nbutton_h = 3;\nbutton_d = 2;\nbutton_gap = 2;\n\nusb_w = 7;\nusb_h = 2.5;\nusb_deep = 6;\n\ncorner_r = 3;\nwall = 1.5;\n\n// ---------- HELPERS ----------\nmodule rounded_box(size, r, center = false) {\n    translate(center ? -size/2 : [0,0,0])\n    hull() {\n        for(x = [r, size.x - r], y = [r, size.y - r], z = [r, size.z - r])\n            translate([x, y, z]) sphere(r);\n    }\n}\n\n// ---------- MAIN BODY ----------\ndifference() {\n    // outer shell\n    rounded_box([body_w, body_h, body_t], corner_r, center=true);\n\n    // hollow inside\n    translate([0,0,-wall])\n        rounded_box([body_w - 2*wall, body_h - 2*wall, body_t + 1], corner_r - wall, center=true);\n\n    // screen recess\n    translate([0, 0, body_t/2 - screen_depth])\n        cube([screen_w, screen_h, screen_depth*2], center=true);\n\n    // power button slot\n    translate([body_w/2 - wall/2, -body_h/2 + 15, 0])\n        rotate([90,0,0])\n        cylinder(h=button_d + 1, d=button_h, $fn=20);\n\n    // USB-C port\n    translate([-body_w/2 + 10, 0, -body_t/2 + usb_h/2 + wall])\n        cube([usb_deep, usb_w, usb_h]);\n}\n\n// ---------- SCREEN ----------\ntranslate([0, 0, (body_t/2) - screen_depth - 0.2])\n    color(\"black\")\n    cube([screen_w, screen_h, 0.4], center=true);\n\n// ---------- BUTTONS ----------\n// power button\ntranslate([body_w/2 - button_d/2 - wall, -body_h/2 + 15, 0])\n    rotate([90,0,0])\n    cylinder(h=button_d, d=button_h - 0.4, $fn=20);\n\n// page-turn buttons left/right\nfor(side = [-1, 1])\n    translate([0, side*(body_h/2 - button_gap - button_w/2), body_t/2 - button_d/2 - wall])\n    rotate([90,0,0])\n    cube([button_d, button_w, button_h], center=true);\n\n// ---------- SPEAKER GRILL HOLES ----------\ngrill_x = -body_w/2 + 20;\ngrill_y = body_h/2 - 12;\ngrill_z = body_t/2 - wall/2;\nfor(i=[0:5])\n    translate([grill_x + i*3, grill_y, grill_z])\n    rotate([0,90,0])\n    cylinder(h=wall + 0.1, d=1.2, $fn=8);",
    "renders": true
  },
  {
    "household_item": "harddisk",
    "openscad_code": "// 2.5\" SATA Hard Disk Drive – medium-complexity realistic printable model\n// 69 mm x 100 mm x 9.5 mm (1:1 scale, ready to print)\n\n$fn = 32;\n\n// overall size\nl = 100;  // length\nw = 69;   // width  \nh = 9.5;  // height\n\n// wall thickness for printability\nwall = 1.0;\n\nmodule main_case() {\n    difference() {\n        // outer block\n        translate([0,0,h/2])\n            cube([l,w,h], center=true);\n\n        // hollow inside\n        translate([0,0,h/2])\n            cube([l-wall*2, w-wall*2, h-wall], center=true);\n\n        // label recess on top\n        translate([l/2-30, w/2-20, h-0.2])\n            cube([28, 38, 0.4]);\n    }\n}\n\nmodule screw_holes() {\n    // standard 2.5\" HDD screw pattern\n    positions = [[10,10], [l-10,10], [10,w-10], [l-10,w-10]];\n    for(p = positions) {\n        translate([p.x, p.y, 0])\n            cylinder(h=h+0.1, d=3, center=false);\n    }\n}\n\nmodule sata_connector() {\n    // plastic body\n    translate([l+4.5, w/2, 3])\n        cube([8, 23, 6], center=true);\n\n    // 7-pin data section\n    color(\"gold\")\n    for(i=[0:6]) {\n        translate([l+6, w/2-9+i*2.7, 2.5])\n            cube([1.5, 1.2, 1]);\n    }\n\n    // 15-pin power section\n    color(\"gold\")\n    for(i=[0:14]) {\n        translate([l+6, w/2-9+i*1.27, 0.5])\n            cube([1.5, 0.8, 1]);\n    }\n}\n\nmodule circuit_board() {\n    translate([l/2-15, w/2-15, h-1])\n        cube([30, 30, 0.8]);\n}\n\nmodule label() {\n    translate([l/2-20, w/2-15, h-0.01])\n        cube([40, 30, 0.01]);\n}\n\n// assembly\ndifference() {\n    union() {\n        main_case();\n        sata_connector();\n        circuit_board();\n    }\n    screw_holes();\n}",
    "renders": true
  },
  {
    "household_item": "nas",
    "openscad_code": "// NAS (Network Attached Storage) - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall dimensions\nnas_width = 80;\nnas_height = 45;\nnas_depth = 120;\nwall_thickness = 2;\n\n// Drive bay dimensions\ndrive_width = 10;\ndrive_height = 7;\ndrive_depth = 5;\ndrive_bays = 4;\n\n// Fan dimensions\nfan_diameter = 20;\nfan_depth = 5;\n\n// LED indicators\nled_diameter = 3;\nled_spacing = 5;\n\n// Main chassis\nmodule nas_body() {\n    difference() {\n        // Outer shell\n        cube([nas_width, nas_depth, nas_height], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness/2])\n            cube([nas_width-wall_thickness*2, nas_depth-wall_thickness*2, nas_height-wall_thickness], center=true);\n        \n        // Front panel cutout\n        translate([0, nas_depth/2 - wall_thickness, 0])\n            cube([nas_width-wall_thickness*4, wall_thickness*2, nas_height-wall_thickness*2], center=true);\n    }\n}\n\n// Front panel with drive bays\nmodule front_panel() {\n    translate([0, nas_depth/2 - wall_thickness/2, 0]) {\n        difference() {\n            // Panel plate\n            cube([nas_width-wall_thickness*2, wall_thickness, nas_height-wall_thickness*2], center=true);\n            \n            // Drive bay slots\n            for(i = [0:drive_bays-1]) {\n                translate([(i - (drive_bays-1)/2) * (drive_width + 5), 0, -nas_height/4])\n                    cube([drive_width, wall_thickness+1, drive_height], center=true);\n            }\n            \n            // Ventilation holes\n            for(x = [-30:5:30]) {\n                for(y = [-15:5:15]) {\n                    translate([x, 0, y])\n                        cylinder(h=wall_thickness+1, d=2, center=true);\n                }\n            }\n        }\n        \n        // LED indicators\n        for(i = [0:2]) {\n            translate([nas_width/2 - 10 - i*led_spacing, wall_thickness/2 + 0.5, nas_height/2 - 8])\n                cylinder(h=1, d=led_diameter);\n        }\n    }\n}\n\n// Rear panel with fan and ports\nmodule rear_panel() {\n    translate([0, -nas_depth/2 + wall_thickness/2, 0]) {\n        difference() {\n            // Panel plate\n            cube([nas_width-wall_thickness*2, wall_thickness, nas_height-wall_thickness*2], center=true);\n            \n            // Fan opening\n            translate([0, 0, 0])\n                cylinder(h=wall_thickness+1, d=fan_diameter, center=true);\n            \n            // Fan blades (simplified)\n            for(i = [0:5]) {\n                rotate([0, 0, i*60])\n                    translate([0, 0, 0])\n                        cube([2, fan_diameter/2-2, wall_thickness+0.5], center=true);\n            }\n            \n            // Ethernet ports\n            translate([-15, 0, 10])\n                cube([8, wall_thickness+1, 6], center=true);\n            translate([15, 0, 10])\n                cube([8, wall_thickness+1, 6], center=true);\n            \n            // Power connector\n            translate([0, 0, -10])\n                cube([10, wall_thickness+1, 8], center=true);\n        }\n    }\n}\n\n// Side vents for cooling\nmodule side_vents() {\n    for(side = [-1, 1]) {\n        translate([side * (nas_width/2 - wall_thickness/2), 0, 0]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cube([nas_depth-wall_thickness*2, nas_height-wall_thickness*2, wall_thickness], center=true);\n                    for(x = [-50:8:50]) {\n                        for(y = [-15:6:15]) {\n                            translate([x, y, 0])\n                                cube([6, 2, wall_thickness+1], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [-nas_width/3, nas_width/3]) {\n        for(y = [-nas_depth/3, nas_depth/3]) {\n            translate([x, y, -nas_height/2 + 1])\n                cylinder(h=2, d=4, $fn=20);\n        }\n    }\n}\n\n// Assemble the NAS\nunion() {\n    nas_body();\n    front_panel();\n    rear_panel();\n    side_vents();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "enclosure",
    "openscad_code": "// Medium-Complexity Realistic Electronics Enclosure\n// External dimensions: 80 x 60 x 25 mm\n// Wall thickness: 2 mm\n// Designed for 3D printing (no overhangs >45°, all bridges ≤5 mm)\n\n// Parameters ----------------------------------------------------------\nwall = 2;           // Shell thickness\nbase_h = 22;        // Total height\nlid_h  = 3;         // Lid thickness\nouter_w = 80;       // External width\nouter_d = 60;       // External depth\ninner_w = outer_w - 2*wall;\ninner_d = outer_d - 2*wall;\ninner_h = base_h  - lid_h - wall;\n\n// Screw posts\npost_d = 6;\npost_h = inner_h;\nscrew_r = 1.5;\nscrew_h = post_h + lid_h;\n\n// Ventilation slots\nslot_w = 1.5;\nslot_h = 4;\nslot_sep = 5;\nslot_rows = 2;\n\n// USB / cable cutouts\nusb_w = 12;\nusb_h = 8;\nusb_d = 4;\n\n// Main assembly -------------------------------------------------------\ndifference() {\n    union() {\n        base_shell();\n        lid_plate();\n    }\n    \n    // Hollow out interior\n    translate([wall, wall, lid_h])\n        cube([inner_w, inner_d, inner_h + 1]);\n    \n    // Screw holes\n    screw_holes();\n    \n    // Cable cutouts\n    cutouts();\n}\n\n// Base shell with vents ----------------------------------------------\nmodule base_shell() {\n    difference() {\n        // Main box\n        cube([outer_w, outer_d, base_h]);\n        \n        // Rounded top edge\n        translate([-1, -1, base_h - wall])\n        minkowski() {\n            cube([outer_w + 2, outer_d + 2, 1]);\n            cylinder(r = wall, h = 0.1, $fn = 32);\n        }\n        \n        // Vent slots on back face\n        vent_slots();\n    }\n}\n\n// Ventilation slots ---------------------------------------------------\nmodule vent_slots() {\n    // Two rows\n    for (row = [0:1]) {\n        for (i = [0:floor((outer_d - 2*wall)/slot_sep)]) {\n            translate([\n                0,\n                wall + i*slot_sep + slot_sep/2,\n                lid_h + wall + row*(slot_h + 2)\n            ])\n            cube([wall, slot_w, slot_h]);\n        }\n    }\n}\n\n// Lid plate ----------------------------------------------------------\nmodule lid_plate() {\n    difference() {\n        translate([0, 0, base_h - lid_h])\n            cube([outer_w, outer_d, lid_h + 1]);\n        \n        // Recess for label\n        translate([5, 5, base_h - lid_h + 0.5])\n            cube([outer_w - 10, outer_d - 10, 0.5]);\n    }\n}\n\n// Screw posts ---------------------------------------------------------\nmodule screw_holes() {\n    // Four corner posts\n    for (x = [wall + 5, outer_w - wall - 5])\n    for (y = [wall + 5, outer_d - wall - 5]) {\n        translate([x, y, lid_h])\n            cylinder(r = screw_r, h = screw_h, $fn = 16);\n    }\n}\n\n// Side cutouts --------------------------------------------------------\nmodule cutouts() {\n    // USB cutout on front\n    translate([outer_w/2 - usb_w/2, 0, lid_h + wall])\n        cube([usb_w, wall, usb_h]);\n    \n    // Power barrel jack on left\n    translate([0, outer_d/2 - usb_w/2, lid_h + wall])\n        cube([wall, usb_w, usb_h]);\n}",
    "renders": true
  },
  {
    "household_item": "cooling",
    "openscad_code": "// OpenSCAD Cooling Tower (realistic, medium complexity)\n// 2024 – 3D-printable model, ~70 mm tall\n\n$fn = 36;            // smooth cylinders & spheres\nwall = 2;            // printable wall thickness\n\nmodule cooling_tower() {\n    /* Main hyperboloid shell */\n    difference() {\n        // outer surface, built from stacked cylinders\n        for (i = [0:4]) {\n            h = i * 12;\n            r = 25 - i * 2.2;               // taper upward\n            translate([0, 0, h])\n                cylinder(h = 12, d1 = r * 2, d2 = (r - 2) * 2, center = false);\n        }\n\n        // inner void, leaving wall thickness\n        for (i = [0:4]) {\n            h = i * 12 + wall;\n            r = 25 - i * 2.2 - wall;\n            translate([0, 0, h])\n                cylinder(h = 12 - wall * 1.2, d1 = r * 2, d2 = (r - 2) * 2, center = false);\n        }\n    }\n\n    /* Top rim lip */\n    translate([0, 0, 60])\n        difference() {\n            cylinder(h = 4, d = 38, center = false);\n            cylinder(h = 4.5, d = 34, center = false);\n        }\n\n    /* Base ring footing */\n    translate([0, 0, -2])\n        difference() {\n            cylinder(h = 6, d = 52, center = false);\n            cylinder(h = 7, d = 46, center = false);\n        }\n\n    /* Water-distribution pipes around the rim */\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([20, 0, 55])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 3, center = false);\n    }\n\n    /* Fill-support platform inside (perforated) */\n    translate([0, 0, 25])\n        difference() {\n            cylinder(h = 4, d = 42, center = false);\n            for (x = [-15:5:15])\n                for (y = [-15:5:15])\n                    translate([x, y, -1])\n                        cube([3, 3, 6], center = true);\n        }\n\n    /* Drain outlet at base */\n    rotate([90, 0, 0])\n        translate([0, 0, -26])\n            cylinder(h = 12, d = 8, center = false);\n}\n\ncooling_tower();",
    "renders": true
  },
  {
    "household_item": "dock",
    "openscad_code": "// Realistic Medium-Complexity Dock Model\n// Approx. 85 mm x 40 mm x 12 mm\n\n// Main dimensions\ndock_length = 85;\ndock_width  = 40;\ndeck_height = 3;\npiling_d    = 4;\npiling_h    = 9;\nramp_len    = 20;\nramp_w      = 18;\ngap         = 2;  // clearance for 3D printing\n\n// Deck planks\nplank_w = 5;\nplank_gap = 1;\n\nmodule deck_planks(len=dock_length){\n    for(i=[0:ceil((dock_width-2)/(plank_w+plank_gap))-1]){\n        translate([0, i*(plank_w+plank_gap), 0])\n            cube([len, plank_w, deck_height], center=false);\n    }\n}\n\nmodule dock_frame(){\n    difference(){\n        union(){\n            // Main deck\n            cube([dock_length, dock_width, deck_height], center=false);\n            // Side rails\n            translate([0, -3, deck_height])\n                cube([dock_length, 3, 3]);\n            translate([0, dock_width, deck_height])\n                cube([dock_length, 3, 3]);\n            // End caps\n            cube([3, dock_width+6, deck_height+3], center=false);\n            translate([dock_length-3, 0, 0])\n                cube([3, dock_width+6, deck_height+3], center=false);\n        }\n        // Hollow interior for lighter print\n        translate([gap, gap, -1])\n            cube([dock_length-gap*2, dock_width-gap*2, deck_height+2]);\n    }\n}\n\nmodule piling(x,y){\n    difference(){\n        // Piling post\n        translate([x, y, 0])\n            cylinder(d=piling_d, h=piling_h+deck_height, $fn=16);\n        // Chamfer top\n        translate([x, y, piling_h+deck_height-2])\n            cylinder(d1=piling_d, d2=piling_d*0.7, h=2, $fn=16);\n    }\n}\n\nmodule ramp(){\n    hull(){\n        translate([dock_length, dock_width/2, 0])\n            cube([ramp_len, ramp_w, 2], center=true);\n        translate([dock_length+ramp_len-5, dock_width/2, -6])\n            cube([ramp_len*0.8, ramp_w*0.8, 2], center=true);\n    }\n}\n\nmodule cleat(x,y){\n    difference(){\n        union(){\n            // Base\n            translate([x,y,deck_height])\n                cube([8,4,2], center=true);\n            // Horns\n            translate([x,y+2,deck_height+1])\n                cube([2,8,2], center=true);\n            translate([x,y-2,deck_height+1])\n                cube([2,8,2], center=true);\n        }\n        // Rope hole\n        translate([x,y,deck_height+1])\n            rotate([90,0,0])\n                cylinder(d=2, h=10, center=true, $fn=16);\n    }\n}\n\n// Assembly\nunion(){\n    // Frame with hollowed deck\n    dock_frame();\n    \n    // Deck planking on top\n    translate([0,0,0])\n        deck_planks();\n    \n    // Pilings\n    piling(5, 5);\n    piling(5, dock_width-5);\n    piling(dock_length-5, 5);\n    piling(dock_length-5, dock_width-5);\n    \n    // Ramp for boat access\n    ramp();\n    \n    // Mooring cleats\n    cleat(15, dock_width/2);\n    cleat(dock_length-15, dock_width/2);\n}",
    "renders": true
  },
  {
    "household_item": "holder",
    "openscad_code": "// Realistic Desk Phone Holder\n// Holds a smartphone at a 70° viewing angle with cable routing\n\n// Parameters\nphone_width = 70;\nphone_thickness = 10;\nphone_height = 140;\nwall = 2;\nbase_depth = 80;\nbase_width = 90;\nbase_height = 15;\nslot_width = 12;\nslot_depth = 8;\n\n// Main module\nmodule phone_holder() {\n    // Base platform\n    difference() {\n        rounded_base();\n        \n        // Cable channel\n        translate([0, -base_depth/2, 0])\n            cube([slot_width, slot_depth, base_height+1], center=true);\n    }\n    \n    // Back support\n    support_back();\n    \n    // Side supports\n    translate([phone_width/2 + wall, 0, 0])\n        support_side();\n    translate([-phone_width/2 - wall, 0, 0])\n        mirror([1,0,0]) support_side();\n    \n    // Front lip\n    translate([0, base_depth/2 - wall - 2, base_height/2])\n        cube([phone_width + 2*wall, wall + 2, wall + 2], center=true);\n    \n    // Cable notch in back\n    translate([0, -base_depth/2 - wall/2, phone_height*0.3])\n        rotate([0, 70, 0])\n        cube([phone_height*0.4, wall*2, wall*2], center=true);\n}\n\n// Rounded base with fillets\nmodule rounded_base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded edges\n        for(x = [-base_width/2+wall, base_width/2-wall])\n        for(y = [-base_depth/2+wall, base_depth/2-wall]) {\n            translate([x, y, base_height-wall])\n                sphere(wall, $fn=20);\n        }\n    }\n}\n\n// Back support with angle\nmodule support_back() {\n    angle = 70;\n    support_height = phone_height * 0.8;\n    \n    translate([0, -base_depth/2 + wall + 2, base_height])\n        rotate([0, -angle, 0])\n        difference() {\n            // Main support\n            translate([0, -support_height/2, 0])\n                cube([phone_width + 2*wall, support_height, wall*2], center=true);\n            \n            // Ventilation slots\n            for(i = [1:3:9]) {\n                translate([0, -i*support_height/10, 0])\n                    cube([phone_width + wall, 1, wall*2 + 1], center=true);\n            }\n        }\n}\n\n// Side support bracket\nmodule support_side() {\n    translate([0, 0, base_height/2 + phone_height/4])\n        union() {\n            // Vertical strut\n            cube([wall, wall*3, phone_height/2], center=true);\n            \n            // Horizontal brace\n            translate([0, wall*1.5, -phone_height/4 + wall*1.5])\n                cube([wall, wall*1.5, wall*3], center=true);\n        }\n}\n\n// Generate model\nphone_holder();",
    "renders": true
  },
  {
    "household_item": "mount",
    "openscad_code": "// Camera Tripod Mount for DSLR\n// Overall size: 80x60x45mm\n\n// Parameters\n$fn = 32;\nplate_thickness = 4;\nbase_width = 60;\nbase_depth = 60;\nbase_height = 15;\npost_diameter = 20;\npost_height = 30;\nplate_width = 40;\nplate_depth = 80;\nplate_hole_diameter = 6;\nplate_hole_spacing = 20;\nscrew_diameter = 1/4 * 25.4; // 1/4-20 standard tripod screw\nclearance = 0.3; // print clearance\nwall_thickness = 3;\n\n// Main assembly\nunion() {\n    // Base plate with rounded corners\n    base();\n    \n    // Central post\n    translate([0, 0, base_height])\n        post();\n    \n    // Camera plate on top\n    translate([0, 0, base_height + post_height])\n        camera_plate();\n    \n    // Reinforcement ribs\n    ribs();\n    \n    // Bottom anti-slip pads (4 corners)\n    anti_slip_pads();\n}\n\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_width);\n        \n        // Central cavity for weight reduction\n        translate([0, 0, clearance])\n            cylinder(h = base_height - clearance, d = base_width - 2*wall_thickness);\n        \n        // Bottom chamfer\n        translate([0, 0, base_height - 2])\n            cylinder(h = 2, d1 = base_width - 4, d2 = base_width);\n    }\n    \n    // Mounting holes for tripod (3 holes at 120 degrees)\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([base_width/2 - 8, 0, -1])\n                cylinder(h = base_height + 2, d = 4.5);\n    }\n}\n\nmodule post() {\n    difference() {\n        // Main post\n        cylinder(h = post_height, d = post_diameter);\n        \n        // Internal hole for 1/4-20 threaded insert\n        translate([0, 0, -clearance])\n            cylinder(h = post_height + 2*clearance, d = screw_diameter + 1);\n    }\n}\n\nmodule camera_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, -plate_thickness/2])\n            cube([plate_width, plate_depth, plate_thickness], center = true);\n        \n        // Rounded corners\n        for(x = [-1:1:1]) {\n            for(y = [-1:1:1]) {\n                translate([x * (plate_width/2 - 5), y * (plate_depth/2 - 5), -1])\n                    cylinder(h = plate_thickness + 2, d = 10);\n            }\n        }\n        \n        // Camera mounting slot (1/4-20 camera screw)\n        translate([0, plate_depth/4, -1])\n            cube([screw_diameter + 2, 25, plate_thickness + 2], center = true);\n        \n        // Safety stop holes\n        translate([-plate_hole_spacing/2, -plate_depth/3, -1])\n            cylinder(h = plate_thickness + 2, d = plate_hole_diameter);\n        translate([plate_hole_spacing/2, -plate_depth/3, -1])\n            cylinder(h = plate_thickness + 2, d = plate_hole_diameter);\n    }\n}\n\nmodule ribs() {\n    // Four reinforcement ribs between post and base\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                rib();\n    }\n}\n\nmodule rib() {\n    intersection() {\n        // Main rib shape\n        translate([base_width/2 - 5, -wall_thickness/2, base_height/2])\n            cube([10, wall_thickness, base_height]);\n        \n        // Angled cut for smooth transition\n        rotate([0, 45, 0])\n            translate([-base_width/2, -base_width, -base_width/2])\n                cube(base_width);\n    }\n}\n\nmodule anti_slip_pads() {\n    // Four rubber feet locations\n    for(x = [-1:1:1]) {\n        for(y = [-1:1:1]) {\n            translate([x * (base_width/2 - 8), y * (base_width/2 - 8), -0.1])\n                cylinder(h = 0.5, d = 6);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "tripod",
    "openscad_code": "// Realistic medium-complexity 3D-printable tripod\n// Size: 80 mm tall, 60 mm spread\n\n$fn = 36;           // Circle quality\nwall = 2;           // 3D-print friendly wall thickness\n\n// Main assembly\ndifference() {\n    union() {\n        head();             // Camera mount head\n        center_column();    // Telescoping center column\n        legs();             // Three legs\n    }\n    // Remove holes for screws\n    translate([0,0,77]) cylinder(h=10,d=3,center=true);\n    translate([0,0,12]) cylinder(h=30,d=6,center=true);\n}\n\nmodule head() {\n    // Top plate\n    cube([20,15,3], center=true);\n    // Quick-release dovetail mount\n    translate([0,0,1.5]) {\n        difference() {\n            cube([18,12,6], center=true);\n            translate([0,0,3]) cube([16,10,6], center=true);\n        }\n    }\n    // Knobs\n    translate([-10,8,5]) rotate([90,0,0]) cylinder(h=4,d=4,center=true);\n    translate([10,8,5]) rotate([90,0,0]) cylinder(h=4,d=4,center=true);\n}\n\nmodule center_column() {\n    // Outer tube\n    difference() {\n        cylinder(h=50, d1=12, d2=10);\n        translate([0,0,-1]) cylinder(h=52, d1=8, d2=6);\n    }\n    // Lock collar\n    translate([0,0,30]) difference() {\n        cylinder(h=8, d=16);\n        translate([0,0,-1]) cylinder(h=10, d=12);\n    }\n}\n\nmodule legs() {\n    // Generate three legs at 120° intervals\n    for (i=[0:120:240]) {\n        rotate([0,0,i])\n        translate([0,9,15])\n        rotate([75,0,0])\n        leg();\n    }\n}\n\nmodule leg() {\n    // Upper segment\n    upper = 30;\n    difference() {\n        cube([8,8,upper], center=true);\n        translate([0,0,-1]) cube([4,4,upper+2], center=true);\n    }\n    \n    // Middle segment (telescoping)\n    translate([0,0,upper+5])\n    difference() {\n        cube([6,6,25], center=true);\n        translate([0,0,-1]) cube([3,3,27], center=true);\n    }\n    \n    // Lower segment\n    translate([0,0,upper+30])\n    difference() {\n        cube([4,4,20], center=true);\n        translate([0,0,-1]) cube([2,2,22], center=true);\n    }\n    \n    // Rubber foot\n    translate([0,0,upper+45])\n    sphere(d=6);\n    \n    // Leg lock levers\n    translate([6,0,15]) rotate([0,90,0]) cylinder(h=8,d=3);\n    translate([6,0,35]) rotate([0,90,0]) cylinder(h=8,d=3);\n}",
    "renders": true
  },
  {
    "household_item": "gimbal",
    "openscad_code": "// 3-Axis Camera Gimbal – roughly 70 mm cube\n// Frame thickness: 2 mm everywhere for reliable FDM printing\n// All overhangs ≤ 45° or bridged, no supports needed\n\n$fa = 2;\n$fs = 0.5;\n\nmodule rounded_cube(size, r, center = false) {\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([size.x-r,r,r]) sphere(r);\n        translate([r,size.y-r,r]) sphere(r);\n        translate([size.x-r,size.y-r,r]) sphere(r);\n        translate([r,r,size.z-r]) sphere(r);\n        translate([size.x-r,r,size.z-r]) sphere(r);\n        translate([r,size.y-r,size.z-r]) sphere(r);\n        translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n        if (!center) {\n            for (p = [[r,r,r],[size.x-r,r,r],[r,size.y-r,r],[size.x-r,size.y-r,r],\n                       [r,r,size.z-r],[size.x-r,r,size.z-r],[r,size.y-r,size.z-r],[size.x-r,size.y-r,size.z-r]])\n                translate(p) sphere(r);\n        }\n    }\n}\n\n// Motor pod – simple cylindrical housing\nmodule motor_pod(len = 12, dia = 20) {\n    difference() {\n        cylinder(h = len, d = dia);\n        translate([0,0,-1]) cylinder(h = len+2, d = dia - 4);\n    }\n    // Wire notch\n    translate([dia/2-1,0,len/2]) rotate([90,0,0])\n        cylinder(h = 4, d = 3, $fn = 8);\n}\n\n// Yaw arm – outer frame\nmodule yaw_arm() {\n    difference() {\n        rounded_cube([70,70,4], 3);\n        translate([0,0,-1]) rounded_cube([66,66,6], 2);\n    }\n    // Motor boss\n    translate([0,0,2]) cylinder(h = 5, d = 22);\n}\n\n// Roll arm – middle U-shape\nmodule roll_arm() {\n    difference() {\n        union() {\n            // Base plate\n            translate([0,0,0]) rounded_cube([66,4,50], 3);\n            // Side struts\n            for (y = [-31,31])\n                translate([0,y,25]) rounded_cube([66,4,50], 3);\n        }\n        // Hollow\n        translate([0,0,-1]) rounded_cube([62,8,46], 2);\n    }\n    // Motors\n    translate([0,31,25]) motor_pod();\n    translate([0,-31,25]) motor_pod();\n}\n\n// Pitch arm – inner camera cradle\nmodule pitch_arm() {\n    difference() {\n        union() {\n            // Front plate\n            translate([0,0,0]) rounded_cube([60,40,4], 3);\n            // Side rings\n            for (y = [-18,18])\n                translate([0,y,20]) rotate([90,0,0])\n                    difference() {\n                        cylinder(h = 4, d = 40);\n                        translate([0,0,-1]) cylinder(h = 6, d = 36);\n                    }\n        }\n        // Camera cavity\n        translate([0,0,2]) rounded_cube([54,34,10], 2);\n    }\n    // Motors\n    translate([0,18,20]) rotate([90,0,0]) motor_pod();\n    translate([0,-18,20]) rotate([90,0,0]) motor_pod();\n}\n\n// Assembly\nyaw_arm();\ntranslate([0,0,26]) roll_arm();\ntranslate([0,0,51]) pitch_arm();",
    "renders": true
  },
  {
    "household_item": "selfie",
    "openscad_code": "// Realistic selfie phone model with medium complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 32;\n\n// Phone body module\nmodule phone_body() {\n    difference() {\n        // Main phone body\n        union() {\n            // Back panel\n            translate([0, 0, 2])\n                cube([68, 138, 7], center=true);\n            \n            // Rounded edges\n            translate([34, 0, 5.5])\n                cylinder(h=7, r=3, center=true);\n            translate([-34, 0, 5.5])\n                cylinder(h=7, r=3, center=true);\n            translate([0, 69, 5.5])\n                cube([62, 6, 7], center=true);\n            translate([0, -69, 5.5])\n                cube([62, 6, 7], center=true);\n        }\n        \n        // Camera hole\n        translate([20, 50, 8.5])\n            cylinder(h=3, r=4, center=true);\n        \n        // Flash hole\n        translate([-20, 50, 8.5])\n            cylinder(h=3, r=2.5, center=true);\n        \n        // Speaker holes\n        for (x = [-30:10:30]) {\n            translate([x, -65, 8.5])\n                cylinder(h=3, r=1, center=true);\n        }\n    }\n}\n\n// Screen module\nmodule screen() {\n    difference() {\n        // Screen glass\n        translate([0, 0, 9])\n            cube([64, 134, 0.5], center=true);\n        \n        // Screen display area\n        translate([0, 0, 9.3])\n            cube([60, 120, 0.1], center=true);\n    }\n}\n\n// Front camera module\nmodule front_camera() {\n    translate([0, 55, 9.3])\n        union() {\n            // Camera housing\n            cylinder(h=1.5, r=4, center=true);\n            \n            // Camera lens\n            translate([0, 0, 0.8])\n                cylinder(h=0.5, r=2.5, center=true);\n            \n            // Speaker grill\n            translate([0, -8, 0])\n                cube([15, 1, 1.5], center=true);\n        }\n}\n\n// Home button\nmodule home_button() {\n    translate([0, -55, 9.3])\n        difference() {\n            cylinder(h=1, r=5, center=true);\n            translate([0, 0, 0.5])\n                cube([2, 2, 1.1], center=true);\n        }\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Power button\n    translate([35, 20, 8])\n        cube([2, 15, 3], center=true);\n    \n    // Volume buttons\n    translate([-35, 10, 8])\n        cube([2, 10, 3], center=true);\n    translate([-35, -10, 8])\n        cube([2, 10, 3], center=true);\n}\n\n// Selfie stick handle\nmodule selfie_stick() {\n    translate([0, 0, -35])\n        union() {\n            // Main pole\n            cylinder(h=60, r=6, center=true);\n            \n            // Grip texture\n            for (i = [1:6]) {\n                rotate([0, 0, i * 60])\n                    translate([0, 0, -35])\n                        cylinder(h=40, r=6.5, center=true);\n            }\n            \n            // Base\n            translate([0, 0, -65])\n                cylinder(h=5, r=8, center=true);\n        }\n}\n\n// Phone mount\nmodule phone_mount() {\n    translate([0, 0, -5])\n        difference() {\n            // Mount base\n            cylinder(h=10, r=10, center=true);\n            \n            // Mount hole\n            cylinder(h=12, r=6.2, center=true);\n            \n            // Phone slot\n            translate([0, 0, 4])\n                cube([70, 10, 8], center=true);\n        }\n}\n\n// Generate complete model\nunion() {\n    // Phone assembly\n    translate([0, 0, 0])\n        union() {\n            phone_body();\n            screen();\n            front_camera();\n            home_button();\n            side_buttons();\n        }\n    \n    // Mount and stick\n    phone_mount();\n    selfie_stick();\n}",
    "renders": true
  },
  {
    "household_item": "bracelet",
    "openscad_code": "// Realistic Bracelet with Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 50;  // Smooth curves for realistic look\n\nmodule bracelet_band() {\n    // Main torus shape for bracelet body\n    rotate_extrude(angle = 360) {\n        translate([30, 0, 0]) {\n            difference() {\n                square([5, 4], center = true);\n                translate([0, 1, 0]) square([4, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule clasp_hinge() {\n    // Hinge mechanism on one side\n    translate([32, 0, 0]) {\n        // Pin cylinder\n        rotate([90, 0, 0]) cylinder(h = 6, r = 1.2, center = true);\n        \n        // Hinge loops\n        for (i = [-1, 1]) {\n            translate([0, i * 1.5, 0]) {\n                difference() {\n                    rotate([90, 0, 0]) cylinder(h = 2, r = 2, center = true);\n                    rotate([90, 0, 0]) cylinder(h = 2.2, r = 1.3, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule clasp_latch() {\n    // Latching mechanism on opposite side\n    rotate([0, 0, 180]) translate([32, 0, 0]) {\n        // Male clasp part\n        translate([0, -2, 0]) {\n            cube([4, 3, 2], center = true);\n        }\n        \n        // Female receiver with spring gap\n        translate([0, 2, 0]) {\n            difference() {\n                cube([4, 4, 2], center = true);\n                translate([0, 0.5, 0]) cube([3.5, 2, 1.5], center = true);\n            }\n        }\n    }\n}\n\nmodule decorative_pattern() {\n    // Raised diamond texture pattern around bracelet\n    for (i = [0:15:359]) {\n        rotate([0, 0, i]) {\n            translate([30, 0, 2]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = 0.5) {\n                        polygon(points = [\n                            [0, 0],\n                            [1.5, 0.75],\n                            [0, 1.5],\n                            [-1.5, 0.75]\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule sizing_indicator() {\n    // Small raised dots indicating size\n    for (i = [0:90:359]) {\n        rotate([0, 0, i]) {\n            translate([28, 0, 0]) {\n                sphere(r = 0.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base bracelet band\n    bracelet_band();\n    \n    // Clasp components\n    clasp_hinge();\n    clasp_latch();\n    \n    // Decorative elements\n    decorative_pattern();\n    sizing_indicator();\n}",
    "renders": true
  },
  {
    "household_item": "tracker",
    "openscad_code": "// Realistic GPS Tracker - OpenSCAD\n// Dimensions: 60 x 35 x 12mm\n// Medium complexity with functional details\n\n// Main body shell\nmodule tracker_body() {\n    difference() {\n        // Outer shell with rounded top\n        hull() {\n            translate([-30, -17.5, 0]) cube([60, 35, 8]);\n            translate([-30, -17.5, 4]) cube([60, 35, 8]);\n            translate([-25, -12.5, 10]) cube([50, 25, 2]);\n        }\n        \n        // Hollow interior\n        translate([-27, -14.5, 1]) cube([54, 29, 9]);\n        \n        // USB-C port\n        translate([29, -5, 2]) cube([2, 10, 4]);\n        \n        // Power button recess\n        translate([29, -2.5, 6]) cube([2, 5, 2]);\n        \n        // LED window\n        translate([-29, -2.5, 7]) cube([2, 5, 1]);\n    }\n}\n\n// Antenna pattern on top\nmodule antenna_lines() {\n    for(i = [-20:10:20]) {\n        translate([i, -15, 11]) cube([1, 30, 0.5]);\n    }\n    for(j = [-10:10:10]) {\n        translate([-25, j, 11]) cube([50, 1, 0.5]);\n    }\n}\n\n// Mounting clip on back\nmodule mounting_clip() {\n    difference() {\n        // Clip base\n        translate([-15, -15, -3]) cube([30, 30, 3]);\n        \n        // Spring space\n        translate([-10, -10, -2.5]) cube([20, 20, 2]);\n        \n        // Clip opening\n        translate([0, -15, -1.5]) cylinder(h=3, r=5);\n    }\n    \n    // Clip arms\n    translate([0, -20, -1]) cube([2, 5, 2]);\n    translate([0, 15, -1]) cube([2, 5, 2]);\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    difference() {\n        translate([-20, -10, -0.5]) cube([40, 20, 1]);\n        \n        // Screw holes\n        for(x = [-15, 15]) {\n            translate([x, -5, -0.2]) cylinder(h=2, r=1.5);\n            translate([x, 5, -0.2]) cylinder(h=2, r=1.5);\n        }\n        \n        // Grip texture\n        for(i = [-15:5:15]) {\n            translate([i, -9, 0]) cube([1, 18, 0.3]);\n        }\n    }\n}\n\n// Status LED\nmodule status_led() {\n    translate([-28, 0, 7.5]) {\n        difference() {\n            cylinder(h=1, r=2);\n            cylinder(h=2, r=1.5);\n        }\n    }\n}\n\n// USB-C connector detail\nmodule usb_c_port() {\n    translate([30, 0, 4]) {\n        difference() {\n            cube([1, 8, 2]);\n            translate([0, 0, 0.5]) cube([0.5, 6, 1]);\n        }\n    }\n}\n\n// Assembly\ntracker_body();\nantenna_lines();\nmounting_clip();\nbattery_cover();\nstatus_led();\nusb_c_port();",
    "renders": true
  },
  {
    "household_item": "watch",
    "openscad_code": "// OpenSCAD realistic medium-complexity watch\n// Designed for 3D printing, no extreme overhangs\n\n// Overall dimensions\nwatch_d = 42;           // case diameter\nwatch_h = 10;           // case height\nlug_w = 20;             // lug width\nband_thick = 2.5;       // band thickness\nband_len = 30;          // band stub length\n\n$fn = 50;               // global resolution\n\n// --- Main case ----------------------------------------------------------\nmodule watch_case() {\n    difference() {\n        // Main round body\n        cylinder(d=watch_d, h=watch_h, center=true);\n\n        // Recess dial opening\n        translate([0,0,watch_h/2-0.5])\n            cylinder(d=watch_d-6, h=2, center=false);\n\n        // Crown hole (side 3 o'clock)\n        translate([watch_d/2-0.5, 0, 0])\n            rotate([0,90,0])\n                cylinder(d=4, h=6, center=true);\n    }\n}\n\n// --- Lugs ---------------------------------------------------------------\nmodule lugs() {\n    for(side = [-1, 1])\n        translate([0, side*(watch_d/2+2), 0])\n            rotate([90,0,0])\n                difference() {\n                    // Solid lug\n                    cube([lug_w, 6, 8], center=true);\n\n                    // Pin hole\n                    translate([0, 0, 0])\n                        rotate([90,0,0])\n                            cylinder(d=1.8, h=lug_w+1, center=true);\n                }\n}\n\n// --- Crown --------------------------------------------------------------\nmodule crown() {\n    translate([watch_d/2+2, 0, 0])\n        rotate([0,90,0])\n            cylinder(d1=4, d2=6, h=5, center=true);\n}\n\n// --- Dial ---------------------------------------------------------------\nmodule dial() {\n    translate([0,0,watch_h/2-1])\n        difference() {\n            // Dial disc\n            cylinder(d=watch_d-6.2, h=1, center=false);\n\n            // Center hole for hands\n            cylinder(d=2.5, h=2, center=false);\n        }\n}\n\n// --- Hour & minute hands ------------------------------------------------\nmodule hands() {\n    // Hour hand\n    translate([0,0,watch_h/2+0.2])\n        rotate([0,0,-45])\n            cube([2, 10, 0.8], center=true);\n\n    // Minute hand\n    translate([0,0,watch_h/2+0.4])\n        rotate([0,0,30])\n            cube([1.5, 14, 0.8], center=true);\n}\n\n// --- Indices ------------------------------------------------------------\nmodule indices() {\n    for(i = [0:11]) {\n        angle = i*30;\n        length = (i%3==0)? 5 : 3;\n        width  = (i%3==0)? 1.2 : 0.8;\n\n        translate([0,0,watch_h/2-0.4])\n            rotate([0,0,angle])\n                translate([(watch_d-10)/2-length/2, 0, 0])\n                    cube([length, width, 0.6], center=true);\n    }\n}\n\n// --- Crystal (clear) ----------------------------------------------------\nmodule crystal() {\n    translate([0,0,watch_h/2+0.5])\n        cylinder(d=watch_d-6.2, h=1, center=true);\n}\n\n// --- Band stub ----------------------------------------------------------\nmodule band_stub() {\n    for(side = [-1, 1])\n        translate([0, side*(watch_d/2+2), -band_len/2-4])\n            cube([lug_w, band_thick, band_len], center=true);\n}\n\n// --- Assembly -----------------------------------------------------------\nunion() {\n    watch_case();\n    lugs();\n    crown();\n    dial();\n    indices();\n    hands();\n    crystal();\n    band_stub();\n}",
    "renders": true
  },
  {
    "household_item": "band",
    "openscad_code": "// Basic parameters\n$fn=50;\nband_width = 8;\nband_thickness = 2.2;\nband_radius = 30;\nnum_links = 20;\nlink_clearance = 0.4;\n\n// Main band assembly\nmodule band() {\n    // Create the repeating link pattern\n    for(i=[0:num_links-1]) {\n        rotate([0, 0, i * 360/num_links]) \n            translate([band_radius, 0, 0])\n                rotate([90, 0, 0])\n                    band_link();\n    }\n}\n\n// Individual band link with realistic detailing\nmodule band_link() {\n    difference() {\n        // Main link body\n        union() {\n            // Outer curved shell\n            hull() {\n                translate([-band_width/2, -band_thickness/2, -band_width/2])\n                    sphere(d=band_width*0.8);\n                translate([band_width/2, -band_thickness/2, -band_width/2])\n                    sphere(d=band_width*0.8);\n                translate([-band_width/2, -band_thickness/2, band_width/2])\n                    sphere(d=band_width*0.8);\n                translate([band_width/2, -band_thickness/2, band_width/2])\n                    sphere(d=band_width*0.8);\n            }\n            \n            // Connector pins\n            translate([-band_width/2 - 0.5, 0, 0])\n                cylinder(h=band_thickness, d=band_width*0.3, center=true);\n            translate([band_width/2 + 0.5, 0, 0])\n                cylinder(h=band_thickness, d=band_width*0.3, center=true);\n        }\n        \n        // Hinge holes\n        translate([-band_width/2 - 0.5, 0, 0])\n            cylinder(h=band_thickness+0.2, d=band_width*0.2, center=true);\n        translate([band_width/2 + 0.5, 0, 0])\n            cylinder(h=band_thickness+0.2, d=band_width*0.2, center=true);\n            \n        // Clearance cuts\n        translate([0, -band_thickness/2 - 0.1, 0])\n            cube([band_width*2, band_thickness+0.2, band_width+link_clearance], center=true);\n    }\n}\n\n// Buckle assembly\nmodule buckle() {\n    // Buckle frame\n    difference() {\n        // Main frame body\n        union() {\n            // Outer frame\n            translate([0, 0, 0])\n                cube([band_width*1.5, band_thickness, band_width*1.2], center=true);\n                \n            // Prongs\n            for(i=[-1, 1]) {\n                translate([i * band_width*0.4, 0, band_width*0.5])\n                    cube([band_width*0.15, band_thickness*0.8, band_width*0.3]);\n            }\n        }\n        \n        // Central opening\n        translate([0, 0, 0])\n            cube([band_width*1.2, band_thickness+0.2, band_width*0.8], center=true);\n            \n        // Adjustment holes slot\n        translate([0, 0, -band_width*0.7])\n            cube([band_width*1.3, band_thickness+0.2, band_width*0.3], center=true);\n    }\n    \n    // Adjustment holes\n    for(i=[1:5]) {\n        translate([0, 0, -band_width*0.7 - i*band_width*0.25])\n            cylinder(h=band_thickness+0.2, d=band_width*0.2, center=true);\n    }\n}\n\n// Assemble complete band\nunion() {\n    // Main band\n    band();\n    \n    // Buckle positioned at end\n    translate([band_radius + band_width/2, 0, 0])\n        rotate([90, 0, 0])\n            buckle();\n}",
    "renders": true
  },
  {
    "household_item": "pendant",
    "openscad_code": "// Realistic Heart Pendant – medium complexity\n// Overall height ~60 mm, 2 mm wall thickness, no overhangs\n\n$fn = 36;               // Smooth curves for 3-D printing\n\n// Parameters\nwall = 2;               // wall thickness\npivot = 8;              // bail radius\nlink_d = 1.2;           // bail opening diameter\n\n// Main heart body module\nmodule heart_body() {\n    difference() {\n        union() {\n            // Left lobe\n            translate([-10, 0, 0])\n                scale([1, 1, 0.8])\n                sphere(d = 20);\n\n            // Right lobe\n            translate([10, 0, 0])\n                scale([1, 1, 0.8])\n                sphere(d = 20);\n\n            // Central body tapering into point\n            hull() {\n                translate([ -7, 0, 0 ]) cylinder(d = 18, h = 20);\n                translate([  7, 0, 0 ]) cylinder(d = 18, h = 20);\n                translate([  0, -16, 5 ]) cylinder(d = 4, h = 15);\n            }\n        }\n\n        // Hollow interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.9])\n            heart_shell();\n    }\n}\n\n// Used for hollowing\nmodule heart_shell() {\n    union() {\n        translate([-10, 0, 0])\n            scale([1, 1, 0.8])\n            sphere(d = 20);\n        translate([10, 0, 0])\n            scale([1, 1, 0.8])\n            sphere(d = 20);\n        hull() {\n            translate([ -7, 0, 0 ]) cylinder(d = 18, h = 20);\n            translate([  7, 0, 0 ]) cylinder(d = 18, h = 20);\n            translate([  0, -16, 5 ]) cylinder(d = 4, h = 15);\n        }\n    }\n}\n\n// Bail loop for necklace cord\nmodule bail() {\n    rotate([90, 0, 0])\n    translate([0, 0, pivot])\n    difference() {\n        // Outer torus\n        rotate_extrude()\n            translate([pivot, 0, 0])\n            circle(r = wall);\n\n        // Cord hole\n        rotate_extrude()\n            translate([pivot - wall, 0, 0])\n            circle(r = link_d);\n\n        // Flat bottom to remove overhang\n        translate([0, 0, -wall - 0.1])\n            cube([pivot*2 + wall*2, pivot*2 + wall*2, wall*2 + 0.2], center = true);\n    }\n}\n\n// Surface detail: small arteries\nmodule arteries() {\n    for(a = [0:120:240]) {\n        rotate([0, 0, a])\n        translate([0, -10, 0])\n            rotate([90, 0, 0])\n            cylinder(d1 = 1.6, d2 = 0.6, h = 12);\n    }\n}\n\n// Assemble pendant\ntranslate([0, 0, 5])\nunion() {\n    heart_body();\n    translate([0, 0, 16])\n        bail();\n    translate([0, 0, 8])\n        arteries();\n}",
    "renders": true
  },
  {
    "household_item": "badge",
    "openscad_code": "// Realistic Police-Style Badge (50 mm wide, 3 mm thick)\n// Medium complexity with raised text, stars, and shield shape\n\n// Badge parameters\nbadge_width = 50;           // Overall badge width in mm\nbadge_height = 60;          // Overall badge height in mm\nbadge_thickness = 3;        // Total thickness\nbase_thickness = 2;         // Main badge body thickness\ndetail_height = 0.8;        // Height of raised details\ntext_height = 0.6;          // Height of text embossing\nedge_radius = 3;            // Rounded edge radius\n\n// Shield shape module (realistic police badge outline)\nmodule shield_shape() {\n    difference() {\n        // Main shield body\n        union() {\n            // Bottom rectangle\n            translate([0, -badge_height/4, 0])\n                cube([badge_width, badge_height/2, base_thickness], center=true);\n            \n            // Top curved part\n            translate([0, badge_height/4, 0])\n                cylinder(h=base_thickness, r=badge_width/2, $fn=60);\n        }\n        \n        // Cut out the bottom to form shield shape\n        translate([0, -badge_height/2 - badge_height/4, -1])\n            cube([badge_width*1.5, badge_height/2, base_thickness+2], center=true);\n    }\n}\n\n// Star module for rank insignia\nmodule star(points=5, outer_radius=5, inner_radius=2.5, height=detail_height) {\n    angle_step = 360 / points;\n    \n    union() {\n        for (i = [0:points-1]) {\n            rotate([0, 0, i * angle_step]) {\n                // Outer point\n                translate([0, outer_radius, 0])\n                    cube([2, outer_radius - inner_radius, height], center=true);\n                \n                // Inner point\n                translate([0, inner_radius, 0])\n                    cube([2, inner_radius, height], center=true);\n            }\n        }\n    }\n}\n\n// Text module for badge number\nmodule badge_text(text=\"1234\", size=4, height=text_height) {\n    translate([0, -badge_height/6, 0])\n        linear_extrude(height=height)\n            text(text, size=size, halign=\"center\", valign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Eagle top detail (simplified)\nmodule eagle_top() {\n    translate([0, badge_height/3, base_thickness])\n        union() {\n            // Eagle body\n            scale([1.2, 0.8, 1])\n                sphere(r=6, $fn=20);\n            \n            // Wings\n            translate([-8, 0, 0])\n                rotate([0, 0, -20])\n                scale([2, 0.5, 0.3])\n                    cube([10, 3, detail_height]);\n            \n            translate([8, 0, 0])\n                rotate([0, 0, 20])\n                scale([2, 0.5, 0.3])\n                    cube([10, 3, detail_height]);\n        }\n}\n\n// Main badge assembly\nunion() {\n    // Base shield shape\n    shield_shape();\n    \n    // Eagle detail at top\n    eagle_top();\n    \n    // Center emblem circle\n    translate([0, 0, base_thickness])\n        cylinder(h=detail_height, r=8, $fn=32);\n    \n    // Inner circle detail\n    translate([0, 0, base_thickness + detail_height])\n        cylinder(h=detail_height/2, r=6, $fn=32);\n    \n    // Stars on sides\n    translate([-badge_width/3, badge_height/6, base_thickness])\n        star();\n    \n    translate([badge_width/3, badge_height/6, base_thickness])\n        star();\n    \n    // Badge number text\n    badge_text(\"357\");\n    \n    // Bottom banner with text\n    translate([0, -badge_height/3, base_thickness])\n        union() {\n            // Banner shape\n            cube([badge_width*0.8, 8, detail_height], center=true);\n            \n            // Banner text\n            translate([0, 0, detail_height])\n                badge_text(\"POLICE\", size=3, height=text_height/2);\n        }\n    \n    // Pin backing clips (for attachment)\n    translate([-badge_width/3, -badge_height/2.5, -base_thickness/2])\n        cube([2, 8, base_thickness], center=true);\n    \n    translate([badge_width/3, -badge_height/2.5, -base_thickness/2])\n        cube([2, 8, base_thickness], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "tag",
    "openscad_code": "// Realistic medium-complexity 3D-printable luggage tag\n// Overall size ~70 x 35 x 4 mm\n\n$fn = 90;               // Smooth curves\nwall = 1.2;             // 3D-print friendly wall thickness\ntag_w = 70;\ntag_h = 35;\ntag_d = 4;\n\nmodule body() {\n    // Main rounded rectangle body\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([tag_w-2*wall, tag_h-2*wall, tag_d], center=true);\n            cylinder(h=0.1, r=wall);\n        }\n        // Hollow centre\n        cube([tag_w-2.5*wall, tag_h-2.5*wall, tag_d+0.2], center=true);\n    }\n}\n\nmodule strap_hole() {\n    // Reinforced loop hole for strap\n    translate([tag_w/2 - 7, 0, 0])\n    difference() {\n        // Outer reinforcement ring\n        cylinder(h=tag_d, r=6);\n        // Actual hole\n        cylinder(h=tag_d+0.2, r=3.5);\n    }\n}\n\nmodule info_window() {\n    // Recessed area for paper insert\n    translate([0, 0, tag_d/2 - 0.5])\n    cube([tag_w - 20, tag_h - 10, 1], center=true);\n}\n\nmodule raised_border() {\n    // Raised lip around tag\n    difference() {\n        // Outer border\n        cube([tag_w+2, tag_h+2, 1.5], center=true);\n        // Cut inner\n        cube([tag_w, tag_h, 2], center=true);\n    }\n}\n\nmodule corner_rivets() {\n    // Four decorative rivets for realism\n    for (x = [-1, 1])\n    for (y = [-1, 1])\n    translate([x*(tag_w/2 - 5), y*(tag_h/2 - 5), tag_d/2])\n    difference() {\n        cylinder(h=1.5, r=2);\n        translate([0, 0, -0.1])\n        cylinder(h=2, r=1.2);\n    }\n}\n\nmodule text_frame() {\n    // Subtle engraved frame lines\n    translate([0, 0, tag_d/2 - 0.6])\n    difference() {\n        cube([tag_w - 18, tag_h - 8, 0.3], center=true);\n        cube([tag_w - 22, tag_h - 12, 0.4], center=true);\n    }\n}\n\n// Build the tag\nunion() {\n    body();\n    strap_hole();\n    raised_border();\n    corner_rivets();\n    info_window();\n    text_frame();\n}",
    "renders": true
  },
  {
    "household_item": "sensor",
    "openscad_code": "// Ultrasonic HC-SR04 style distance sensor\n// Overall size ~44 x 20 x 16 mm – 3D-printable without supports\n\n// Wall thickness for shell\nwall = 1.6;\n\n// Main body block\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([45, 20, 16], center=true);\n\n        // Hollow cavity\n        translate([0, 0, -0.01])\n            cube([45 - wall*2, 20 - wall*2, 16 - wall], center=true);\n    }\n}\n\n// Mounting flanges with holes\nmodule flanges() {\n    for (x = [-18, 18])\n        translate([x, 0, -8])\n            difference() {\n                // Flange block\n                cube([6, 20, 3], center=true);\n                // Mounting hole\n                translate([0, 0, -1])\n                    cylinder(h=5, d=3, $fn=20);\n            }\n}\n\n// Pin header block\nmodule pins() {\n    translate([0, 11, 0])\n        difference() {\n            cube([20, 6, 5], center=true);\n            // Four pin holes\n            for (x = [-7.5, -2.5, 2.5, 7.5])\n                translate([x, 0, -1])\n                    cylinder(h=7, d=1, $fn=12);\n        }\n}\n\n// Ultrasonic transducers\nmodule transducer() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=7, d=16, $fn=32);\n        // Inner cone\n        translate([0, 0, 0.5])\n            cylinder(h=7, d1=12, d2=6, $fn=32);\n    }\n}\n\n// Sensor front face with transducers\nmodule front() {\n    translate([0, -10, 0])\n        difference() {\n            cube([45, 2, 16], center=true);\n            // Cutouts for transducers\n            for (x = [-15, 15])\n                translate([x, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=20, d=16.2, $fn=32);\n        }\n    // Actual transducers\n    for (x = [-15, 15])\n        translate([x, -9, 0])\n            rotate([90, 0, 0])\n                transducer();\n}\n\n// PCB bottom details\nmodule pcb() {\n    translate([0, 0, -8.2])\n        color(\"green\")\n            cube([38, 18, 1.6], center=true);\n}\n\n// Main assembly\nunion() {\n    body();\n    flanges();\n    pins();\n    front();\n    pcb();\n}",
    "renders": true
  },
  {
    "household_item": "detector",
    "openscad_code": "// Geiger-Müller Counter Detector\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 32;\n\n// Overall dimensions\nbase_w = 60;  // mm\nbase_d = 40;\nbase_h = 12;\n\ntube_l = 85;\ntube_d = 22;\nwall_t = 2;   // safe wall thickness for printing\n\nmodule detector_base() {\n    difference() {\n        // Solid base block\n        cube([base_w, base_d, base_h], center = true);\n\n        // Recessed cavity on bottom to save material\n        translate([0, 0, -base_h/2 + 2])\n            cube([base_w*0.8, base_d*0.8, 4], center = true);\n\n        // Screw holes for mounting\n        for (x = [-1, 1])\n            translate([x * base_w/3, 0, -base_h/2])\n                cylinder(h = base_h + 1, d = 3.2, center = false);\n    }\n}\n\nmodule tube_mount() {\n    // Two half-cylinders that clamp the tube\n    difference() {\n        // Left clamp half\n        translate([-base_w/2, 0, base_h/2])\n            rotate([0, 90, 0])\n                cylinder(h = base_d, d = tube_d + wall_t*2, center = true);\n\n        // Left clamp hollow\n        translate([-base_w/2, 0, base_h/2])\n            rotate([0, 90, 0])\n                cylinder(h = base_d + 1, d = tube_d, center = true);\n    }\n\n    mirror([1, 0, 0])\n        difference() {\n            // Right clamp half\n            translate([-base_w/2, 0, base_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = base_d, d = tube_d + wall_t*2, center = true);\n\n            // Right clamp hollow\n            translate([-base_w/2, 0, base_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = base_d + 1, d = tube_d, center = true);\n        }\n\n    // Bridge connecting the two halves\n    translate([0, 0, base_h/2 + tube_d/2 + wall_t/2])\n        cube([wall_t*2, base_d, tube_d + wall_t], center = true);\n}\n\nmodule geiger_tube() {\n    // Main cylindrical tube body\n    difference() {\n        // Outer tube\n        rotate([0, 90, 0])\n            cylinder(h = tube_l, d = tube_d, center = true);\n\n        // Inner cavity\n        rotate([0, 90, 0])\n            cylinder(h = tube_l + 0.5, d = tube_d - wall_t*2, center = true);\n    }\n\n    // Thin mica window at front end\n    translate([tube_l/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 1, d = tube_d - wall_t*2, center = true);\n\n    // End cap with cable gland\n    translate([-tube_l/2, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                // Cap body\n                cylinder(h = 8, d = tube_d, center = true);\n\n                // Wire hole\n                cylinder(h = 9, d = 4, center = true);\n            }\n\n    // Radiation symbol band around tube\n    rotate([0, 90, 0])\n    for (i = [0:2]) {\n        rotate([0, 0, i*120])\n            translate([0, tube_d/2 - wall_t - 1, 0])\n                cube([tube_l*0.3, 2, 2], center = true);\n    }\n}\n\nmodule display_and_leds() {\n    // Small LCD screen\n    translate([0, -base_d/2 - 2, base_h/2])\n        cube([30, 2, 12], center = true);\n\n    // Three status LEDs\n    for (i = [0:2]) {\n        translate([0, base_d/2 + 2, base_h/2 - 4 + i*4])\n            sphere(d = 3);\n    }\n}\n\n// Build the complete detector\nunion() {\n    detector_base();\n    tube_mount();\n    translate([0, 0, base_h/2 + tube_d/2 + wall_t]) {\n        geiger_tube();\n    }\n    display_and_leds();\n}",
    "renders": true
  },
  {
    "household_item": "beacon",
    "openscad_code": "// Realistic medium-complexity 3D-printable beacon\n// Approx 90 mm tall, 40 mm wide, no overhangs >60°\n\n$fn = 60;          // Smooth curves for realism\nwall = 1.5;        // 3D-print friendly wall thickness\npillar_h = 40;     // Main support pillar height\npillar_r = 8;      // Main support pillar radius\n\n// --- Main pillar with slight taper for printability ---\nmodule pillar() {\n    cylinder(h = pillar_h, r1 = pillar_r, r2 = pillar_r - 1, center = false);\n}\n\n// --- Base footing for stability ---\nmodule base() {\n    difference() {\n        cylinder(h = 6, r = pillar_r + 6, center = false);          // Wide base\n        translate([0, 0, -0.1])\n            cylinder(h = 6.2, r = pillar_r + 6 - wall, center = false); // Hollow\n    }\n}\n\n// --- Bolt flange with four clearance holes ---\nmodule flange() {\n    difference() {\n        cylinder(h = 4, r = pillar_r + 10, center = false);\n        // Central hole for wiring\n        translate([0, 0, -0.1])\n            cylinder(h = 4.2, r = pillar_r - wall, center = false);\n        // Four mounting holes\n        for (a = [0:90:270])\n            rotate([0, 0, a])\n                translate([pillar_r + 6, 0, -0.1])\n                    cylinder(h = 4.2, r = 2, center = false);\n    }\n}\n\n// --- Solar panel ring around light head ---\nmodule solar_ring() {\n    difference() {\n        cylinder(h = 2, r = 18, center = false);\n        // Central hole for light dome\n        translate([0, 0, -0.1])\n            cylinder(h = 2.2, r = 10, center = false);\n        // Chamfer for printability\n        translate([0, 0, 2])\n            cylinder(h = 1, r1 = 18, r2 = 16, center = false);\n    }\n}\n\n// --- Fresnel lens dome (no overhangs) ---\nmodule dome() {\n    difference() {\n        sphere(r = 10);\n        // Hollow inside\n        translate([0, 0, -1])\n            sphere(r = 10 - wall);\n        // Flat bottom\n        translate([0, 0, -10])\n            cube([30, 30, 10], center = true);\n    }\n}\n\n// --- Top cap with vent slots ---\nmodule cap() {\n    difference() {\n        cylinder(h = 4, r = 9, center = false);\n        // Ventilation slots\n        for (a = [0:60:300])\n            rotate([0, 0, a])\n                translate([4.5, 0, -0.1])\n                    cube([9, 1.5, 4.2], center = false);\n    }\n}\n\n// --- Assembly ---\ntranslate([0, 0, 0]) base();\ntranslate([0, 0, 6]) pillar();\ntranslate([0, 0, 6 + pillar_h]) flange();\ntranslate([0, 0, 6 + pillar_h + 4]) solar_ring();\ntranslate([0, 0, 6 + pillar_h + 4 + 2]) dome();\ntranslate([0, 0, 6 + pillar_h + 4 + 2 + 10]) cap();",
    "renders": true
  },
  {
    "household_item": "bulb",
    "openscad_code": "// Realistic 3D-printable light-bulb\n// 80 mm total height, 50 mm Ø globe\n// Wall thickness 1.2 mm everywhere for reliable printing\n\nmodule bulb() {\n    // Glass globe\n    difference() {\n        sphere(d = 50, $fn = 100);            // outer glass\n        translate([0, 0, 25])\n            sphere(d = 47.6, $fn = 100);      // hollow inside\n    }\n\n    // Neck / socket collar\n    translate([0, 0, -25])\n        cylinder(h = 15, d1 = 40, d2 = 38, $fn = 60);\n\n    // Threaded metal base\n    threads();\n\n    // Filament support wires\n    filament();\n}\n\nmodule threads() {\n    // Main metal shell\n    cylinder(h = 25, d = 36, $fn = 60);\n\n    // Cut screw threads\n    for (i = [0:8]) {\n        rotate([0, 0, i * 40])\n            translate([17.8, 0, 5 + i * 2.5])\n                cube([1.2, 1.2, 2.5], center = true);\n    }\n\n    // Insulating ring at bottom\n    translate([0, 0, -26.5])\n        cylinder(h = 3, d = 36, $fn = 60);\n\n    // Center contact\n    translate([0, 0, -28])\n        cylinder(h = 2, d = 10, $fn = 30);\n}\n\nmodule filament() {\n    // Vertical support\n    translate([0, 0, -15])\n        cylinder(h = 50, d = 1.5, $fn = 12);\n\n    // Two zig-zag filament coils\n    for (side = [-1, 1]) {\n        for (i = [0:6]) {\n            translate([side * 5, 0, 25 - i * 6])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, d = 0.8, $fn = 8);\n            translate([side * 5, 0, 22 - i * 6])\n                rotate([90, 0, side * 90])\n                    cylinder(h = 8, d = 0.8, $fn = 8);\n        }\n    }\n}\n\nbulb();",
    "renders": true
  },
  {
    "household_item": "spotlight",
    "openscad_code": "// Realistic 3D-Printable Spotlight – medium complexity\n// Total length ≈ 75 mm, Ø ≈ 45 mm, wall thickness 1 mm\n\n$fn = 36;               // smooth curves\nwall = 1;               // universal wall thickness\n\nmodule spotlight() {\n    // Main housing – hollow truncated cone\n    difference() {\n        cylinder(h = 30, d1 = 45, d0 = 35);\n        translate([0,0,wall]) cylinder(h = 30-wall, d1 = 45-2*wall, d0 = 35-2*wall);\n    }\n\n    // Rear cap with cable hole\n    difference() {\n        translate([0,0,30]) cylinder(h = 5, d = 35);\n        translate([0,0,30+wall]) cylinder(h = 5, d = 35-2*wall);\n    }\n    translate([0,0,30+5/2]) rotate([90,0,0]) cylinder(h = 10, d = 6, $fn = 20); // cable gland stub\n\n    // Yoke bracket mounts (left & right)\n    rotate([0,90,0]) {\n        translate([0, 0, 22.5]) cube([wall, 8, 6], center = true);         // left ear\n        translate([0, 0, -22.5]) cube([wall, 8, 6], center = true);        // right ear\n    }\n\n    // Yoke frame\n    difference() {\n        rotate([0,90,0]) torus_slice(ri = 30, ro = 31, sides = 180);       // 180° arc\n        translate([0,0,0]) cube([80,8,80], center = true);                 // remove inner\n    }\n\n    // Reflector cone\n    difference() {\n        translate([0,0,5]) cylinder(h = 20, d1 = 43, d0 = 35);\n        translate([0,0,5+wall]) cylinder(h = 20, d1 = 43-2*wall, d0 = 35-2*wall);\n    }\n\n    // Protective glass lens\n    translate([0,0,25]) cylinder(h = 1.5, d = 42);\n\n    // LED puck\n    difference() {\n        translate([0,0,15]) cylinder(h = 3, d = 15);\n        translate([0,0,15+wall]) cylinder(h = 3, d = 15-2*wall);\n    }\n\n    // Cooling fins (6) on rear housing\n    for (a=[0:60:359]) {\n        rotate([0,0,a])\n            translate([0, 19.5, 20]) cube([wall, 4, 10], center = true);\n    }\n\n    // Base plate on yoke\n    translate([0, -30, 0]) rotate([90,0,0]) {\n        difference() {\n            cylinder(h = 4, d = 25);\n            translate([0,0,wall]) cylinder(h = 4, d = 25-2*wall);\n        }\n        // Screw holes\n        for (p = [[8,0], [-8,0], [0,8], [0,-8]])\n            translate([p[0], p[1], -1])\n                cylinder(h = 6, d = 3.2);\n    }\n}\n\n// Partial torus helper for yoke arc\nmodule torus_slice(ri, ro, sides) {\n    difference() {\n        rotate_extrude(angle = sides) translate([ri,0,0]) circle(r = ro-ri);\n        translate([0,-50,0]) cube([100,100,100]);\n    }\n}\n\nspotlight();",
    "renders": true
  },
  {
    "household_item": "floodlight",
    "openscad_code": "// Realistic floodlight - medium complexity\n// 3D printable, no overhangs >45°, walls ≥1.2mm\n\n$fn=32;               // Curved surface resolution\nwall=1.5;             // Wall thickness for printability\nl=75;                 // Overall length\nw=50;                 // Lamp head width\nh=50;                 // Overall height\nh_lamp=35;            // Lamp head depth\ndia_led=20;           // LED emitter diameter\ndia_lens=22;          // Front lens diameter\ndia_reflector=34;     // Reflector diameter\ndia_mount=8;          // Pivot pin diameter\ndia_stand=8;          // Stand rod diameter\nbase_d=45;            // Base diameter\nbase_h=8;             // Base height\n\n// Main assembly\nmodule floodlight(){\n    // Yoke bracket\n    translate([0,0,base_h+dia_stand/2])\n        yoke();\n\n    // Lamp head assembly\n    translate([0,0,h_lamp/2+base_h+dia_stand])\n        rotate([0,-20,0])  // Tilted down slightly\n            lamp_head();\n\n    // Stand rod\n    translate([0,0,base_h])\n        cylinder(h=dia_stand,d=dia_stand-wall,$fn=16);\n\n    // Base\n    translate([0,0,0])\n        base();\n}\n\n// Yoke bracket with pivot holes\nmodule yoke(){\n    difference(){\n        // Yoke body\n        union(){\n            // Left arm\n            translate([-w/2-wall,0,0])\n                cube([wall,h_lamp/2,dia_stand]);\n\n            // Right arm\n            translate([w/2,0,0])\n                cube([wall,h_lamp/2,dia_stand]);\n\n            // Bridge\n            translate([-w/2-wall,-h_lamp/4,dia_stand/2])\n                cube([w+2*wall,wall,h_lamp/2]);\n        }\n\n        // Pivot pin holes\n        translate([-w/2-wall/2,h_lamp/4,dia_stand/2])\n            rotate([90,0,0])\n                cylinder(h=w+2*wall,d=dia_mount+0.2,$fn=16);\n    }\n}\n\n// Lamp head assembly\nmodule lamp_head(){\n    difference(){\n        union(){\n            // Main housing\n            housing();\n\n            // Rear fins for cooling\n            cooling_fins();\n        }\n\n        // Front lens recess\n        translate([0,0,h_lamp/2-2])\n            cylinder(h=4,d=dia_lens+2,$fn=32);\n\n        // LED cavity\n        translate([0,0,h_lamp/2-6])\n            cylinder(h=6,d=dia_led+2,$fn=32);\n\n        // Reflector cavity\n        translate([0,0,h_lamp/2-10])\n            sphere(d=dia_reflector+2,$fn=32);\n    }\n\n    // Front lens\n    translate([0,0,h_lamp/2-1])\n        lens();\n\n    // Pivot pins\n    pivot_pins();\n}\n\n// Main housing\nmodule housing(){\n    difference(){\n        // Outer shell\n        cylinder(h=h_lamp,d=w,$fn=32);\n\n        // Hollow cavity\n        translate([0,0,wall])\n            cylinder(h=h_lamp-2*wall,d=w-2*wall,$fn=32);\n    }\n}\n\n// Cooling fins\nmodule cooling_fins(){\n    for(i=[0:30:359]){\n        rotate([0,0,i])\n            translate([w/2-1,0,h_lamp-5])\n                cube([wall,1,5],center=true);\n    }\n}\n\n// Front glass lens\nmodule lens(){\n    difference(){\n        cylinder(h=2,d=dia_lens,$fn=32);\n        translate([0,0,-0.1])\n            cylinder(h=2.2,d=dia_lens-2*wall,$fn=32);\n    }\n}\n\n// Pivot pins for rotation\nmodule pivot_pins(){\n    // Left pin\n    translate([-w/2-wall/2,0,0])\n        rotate([90,0,0])\n            cylinder(h=w/2+wall/2+2,d=dia_mount,$fn=16);\n\n    // Right pin\n    translate([w/2+wall/2,0,0])\n        rotate([90,0,0])\n            cylinder(h=w/2+wall/2+2,d=dia_mount,$fn=16);\n}\n\n// Weighted base with mounting holes\nmodule base(){\n    difference(){\n        // Main base\n        cylinder(h=base_h,d=base_d,$fn=64);\n\n        // Hollow bottom for weight reduction\n        translate([0,0,2])\n            cylinder(h=base_h-2,d=base_d-4,$fn=64);\n\n        // Mounting holes\n        for(a=[45:90:315]){\n            rotate([0,0,a])\n                translate([base_d/2-4,0,-0.1])\n                    cylinder(h=base_h+0.2,d=3,$fn=16);\n        }\n    }\n}\n\n// Render the floodlight\nfloodlight();",
    "renders": true
  },
  {
    "household_item": "blinds",
    "openscad_code": "// Realistic 3D-printable window blinds\n// Medium complexity: approx. 90 lines\n// Overall size: 80 mm (W) x 60 mm (H) x 20 mm (D)\n\n// Parameters\nblind_width = 80;\nblind_height = 60;\nframe_thick = 3;\nslat_thick = 1.2;\nslat_gap = 2;\nslat_count = 15;\ncord_d = 1.2;\ncord_hole_d = 1.5;\n\n// Main module\nmodule blinds() {\n    difference() {\n        // Frame\n        frame();\n        \n        // Window opening\n        translate([frame_thick, frame_thick, frame_thick])\n            cube([blind_width - 2*frame_thick,\n                  blind_height - 2*frame_thick,\n                  blind_width]);\n    }\n    \n    // Slats\n    slats();\n    \n    // Lift cords\n    cords();\n}\n\n// Frame with top, bottom, left, right rails\nmodule frame() {\n    // Top rail (larger to house mechanism)\n    translate([-1, -1, 0])\n        cube([blind_width + 2, frame_thick + 2, blind_width]);\n    \n    // Bottom rail\n    translate([-1, blind_height - frame_thick + 1, 0])\n        cube([blind_width + 2, frame_thick + 2, blind_width]);\n    \n    // Left rail\n    translate([-1, -1, 0])\n        cube([frame_thick + 2, blind_height + 2, blind_width]);\n    \n    // Right rail\n    translate([blind_width - frame_thick + 1, -1, 0])\n        cube([frame_thick + 2, blind_height + 2, blind_width]);\n}\n\n// Individual slat\nmodule slat(y_pos) {\n    difference() {\n        // Slat body\n        translate([frame_thick, y_pos, frame_thick])\n            cube([blind_width - 2*frame_thick, slat_thick, blind_width - 2*frame_thick]);\n        \n        // Cord holes: left, middle, right\n        for (x = [frame_thick + 5, blind_width/2, blind_width - frame_thick - 5]) {\n            translate([x, y_pos + slat_thick/2, frame_thick + (blind_width - 2*frame_thick)/2])\n                rotate([0, 90, 0])\n                    cylinder(d = cord_hole_d, h = slat_thick + 0.2, $fn = 8);\n        }\n    }\n}\n\n// Generate all slats with loop\nmodule slats() {\n    step = (blind_height - 2*frame_thick - slat_thick) / (slat_count - 1);\n    for (i = [0 : slat_count - 1]) {\n        slat(frame_thick + i * step);\n    }\n}\n\n// Lift cords passing through holes\nmodule cords() {\n    cord_length = blind_height + 10;\n    for (x = [frame_thick + 5, blind_width/2, blind_width - frame_thick - 5]) {\n        translate([x, -5, frame_thick + (blind_width - 2*frame_thick)/2])\n            rotate([0, 90, 0])\n                cylinder(d = cord_d, h = cord_length, $fn = 8);\n    }\n}\n\n// Render the model\nblinds();",
    "renders": true
  },
  {
    "household_item": "curtains",
    "openscad_code": "// Realistic Curtains for 3D Printing\n// Medium complexity with folds and rod\n\n// Parameters\ncurtain_width = 80;\ncurtain_height = 60;\ncurtain_thickness = 2;\nfold_count = 8;\nfold_depth = 6;\nrod_diameter = 4;\nrod_length = 90;\nring_count = 10;\nring_thickness = 1.5;\n\nmodule curtain_panel() {\n    // Main curtain body with folds\n    for (i = [0:fold_count-1]) {\n        translate([i * (curtain_width/fold_count), 0, 0]) {\n            // Each fold segment\n            difference() {\n                // Folded section\n                translate([fold_depth/2, 0, curtain_height/2])\n                    cube([curtain_width/fold_count + fold_depth, curtain_thickness, curtain_height], center=true);\n                \n                // Create fold indent\n                translate([-fold_depth/4, curtain_thickness/2 + 0.1, curtain_height/2])\n                    cube([fold_depth/2, curtain_thickness + 0.2, curtain_height*0.9], center=false);\n            }\n            \n            // Bottom hem\n            translate([curtain_width/fold_count/2, 0, curtain_height - 1])\n                cube([curtain_width/fold_count + 1, curtain_thickness + 1, 2]);\n        }\n    }\n}\n\nmodule curtain_rod() {\n    // Main rod\n    translate([0, 0, curtain_height + rod_diameter/2])\n        cylinder(h=rod_length, d=rod_diameter, center=true);\n    \n    // Rod ends\n    translate([rod_length/2 + 2, 0, curtain_height + rod_diameter/2])\n        sphere(d=rod_diameter + 2);\n    translate([-rod_length/2 - 2, 0, curtain_height + rod_diameter/2])\n        sphere(d=rod_diameter + 2);\n}\n\nmodule curtain_rings() {\n    // Rings for hanging\n    for (i = [0:ring_count-1]) {\n        translate([-rod_length/2 + 5 + i * (rod_length-10)/(ring_count-1), 0, curtain_height + rod_diameter])\n            difference() {\n                cylinder(h=ring_thickness, d=rod_diameter + 4);\n                translate([0, 0, -0.1])\n                    cylinder(h=ring_thickness + 0.2, d=rod_diameter + 1);\n            }\n    }\n}\n\nmodule curtain_tieback() {\n    // Decorative tieback cord\n    color(\"brown\")\n    translate([curtain_width/2 - 10, curtain_thickness + 2, curtain_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=1.5);\n}\n\n// Assemble the curtains\nunion() {\n    // Left curtain panel\n    translate([-curtain_width/2 - 5, 0, 0])\n        curtain_panel();\n    \n    // Right curtain panel (mirrored)\n    translate([curtain_width/2 + 5, 0, 0])\n        mirror([1, 0, 0])\n            curtain_panel();\n    \n    // Rod assembly\n    curtain_rod();\n    curtain_rings();\n    \n    // Tiebacks\n    translate([-curtain_width/2 - 5, 0, 0])\n        curtain_tieback();\n    translate([curtain_width/2 + 5, 0, 0])\n        mirror([1, 0, 0])\n            curtain_tieback();\n}",
    "renders": true
  },
  {
    "household_item": "sprinkler",
    "openscad_code": "// Realistic Garden Sprinkler - Medium Complexity\n// 3D printable, ~75 mm tall, all parts in one module\n\n$fn = 32;  // smooth curves\nwall = 1.5;  // 3D-print friendly wall thickness\n\nmodule sprinkler() {\n    // Base plate with mounting holes\n    difference() {\n        cylinder(h = 4, d = 40);\n        for (a = [0:120:359])\n            rotate([0, 0, a])\n                translate([15, 0, -1])\n                    cylinder(h = 6, d = 4);\n    }\n\n    // Inlet pipe\n    translate([0, 0, 4])\n        difference() {\n            cylinder(h = 20, d = 18);\n            cylinder(h = 22, d = 12);\n        }\n\n    // Swivel bearing ring\n    translate([0, 0, 24])\n        difference() {\n            cylinder(h = 6, d = 30);\n            cylinder(h = 8, d = 26);\n        }\n\n    // Rotating top section\n    translate([0, 0, 30]) {\n        // Main rotor body\n        difference() {\n            cylinder(h = 8, d = 28);\n            cylinder(h = 10, d = 20);\n        }\n\n        // Three radial arms\n        for (a = [0:120:359])\n            rotate([0, 0, a])\n                translate([14, 0, 4])\n                    rotate([0, 90, 0])\n                        difference() {\n                            cylinder(h = 12, d = 6);\n                            cylinder(h = 14, d = 3);\n                        }\n\n        // Nozzle caps on each arm\n        for (a = [0:120:359])\n            rotate([0, 0, a])\n                translate([20, 0, 4])\n                    difference() {\n                        sphere(d = 5);\n                        translate([0, 0, -3])\n                            cylinder(h = 6, d = 2.5);\n                    }\n\n        // Center deflector dome\n        translate([0, 0, 4])\n            difference() {\n                sphere(d = 12);\n                translate([0, 0, -7])\n                    cube([50, 50, 10], center = true);\n            }\n    }\n\n    // Stabilizing fins under rotor\n    translate([0, 0, 26])\n        for (a = [30:120:359])\n            rotate([0, 0, a])\n                translate([12, 0, 0])\n                    cube([12, 1, 4], center = true);\n}\n\nsprinkler();",
    "renders": true
  },
  {
    "household_item": "watering",
    "openscad_code": "/* Realistic style watering can – medium complexity\n   Height ~85 mm, wall thickness 1 mm, 3D-printable\n   All parts fit together with no steep overhangs (>45°) */\n\n$fn = 36; // smooth curves\n\n/* ---------- PARAMETERS ---------- */\nwall = 1.5;          // wall thickness\nbody_h = 60;         // main body height\nbody_r = 30;         // body radius\nneck_h = 15;         // neck height\nspout_l = 45;        // spout length\nhandle_r = 4;        // handle radius\nhandle_clear = 15;   // inner handle height\n/* -------------------------------- */\n\n/* Main solid body */\nmodule body() {\n    difference() {\n        /* Outside shell */\n        union() {\n            // lower bulb\n            translate([0, 0, body_h/2])\n                sphere(r = body_r);\n\n            // neck cylinder\n            translate([0, 0, body_h + neck_h/2])\n                cylinder(h = neck_h, r1 = body_r*0.65, r2 = body_r*0.5);\n        }\n\n        /* Inside hollow */\n        translate([0, 0, -1])\n            union() {\n                sphere(r = body_r - wall);\n                translate([0, 0, body_h + neck_h/2])\n                    cylinder(h = neck_h+2, r1 = body_r*0.65 - wall, r2 = body_r*0.5 - wall);\n            }\n    }\n}\n\n/* Curved spout */\nmodule spout() {\n    angle = 25;  // gentle upward curve\n    translate([body_r*0.9, 0, body_h*0.7])\n        rotate([0, angle, 0])\n            difference() {\n                /* Outer tube */\n                cylinder(h = spout_l, r = body_r*0.22, center=false);\n\n                /* Inner hole */\n                translate([0, 0, wall])\n                    cylinder(h = spout_l - wall, r = body_r*0.22 - wall, center=false);\n            }\n}\n\n/* Handle attached rear-to-top */\nmodule handle() {\n    // path points for smooth arch\n    p0 = [0, 0, 0];\n    p1 = [0, 0, handle_clear/3];\n    p2 = [0, 0, handle_clear*2/3];\n    p3 = [0, 0, handle_clear];\n\n    translate([-body_r + wall*2, 0, body_h*0.3])\n        rotate([0, 90, 0])\n            difference() {\n                // outer handle sweep\n                for(i=[0:3])\n                    translate([lerp(p0[2], p3[2], i/3), 0, 0])\n                        sphere(r = handle_r);\n\n                // inner clearance\n                for(i=[0:3])\n                    translate([lerp(p0[2]+wall, p3[2]-wall, i/3), 0, 0])\n                        sphere(r = handle_r - wall);\n            }\n}\n\n/* Rose head (sprinkler) */\nmodule rose() {\n    holes = 8;\n    rose_t = 2;\n    rose_r = body_r*0.28;\n\n    translate([body_r*0.9 + spout_l - rose_t, 0, body_h*0.7 + spout_l*sin(25)])\n        rotate([0, -25, 0])\n            difference() {\n                // thin disk\n                cylinder(h = rose_t, r = rose_r);\n\n                // small spray holes\n                for(i=[0:holes-1])\n                    rotate([0, 0, i*360/holes])\n                        translate([rose_r*0.7, 0, -0.1])\n                            cylinder(h = rose_t+0.2, r = 0.8);\n            }\n}\n\n/* ---------- ASSEMBLY ---------- */\nunion() {\n    body();\n    spout();\n    handle();\n    rose();\n}",
    "renders": true
  },
  {
    "household_item": "irrigation",
    "openscad_code": "// Realistic-style medium-complexity irrigation sprinkler head\n// Approx. 65 mm tall – printable without supports\n\n$fn=36;\n\n// Overall scale factor (change to resize everything uniformly)\nscale_factor = 1.0;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule sprinkler_head() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h=30*scale_factor, d=30*scale_factor, center=false);\n        // Hollow it out\n        translate([0,0,-1])\n            cylinder(h=32*scale_factor, d=30*scale_factor-2*wall, center=false);\n    }\n\n    // Top cap with slight dome\n    translate([0,0,30*scale_factor])\n        difference() {\n            sphere(d=30*scale_factor);\n            translate([0,0,-15*scale_factor])\n                cube([50*scale_factor,50*scale_factor,20*scale_factor], center=true);\n        }\n\n    // Hose connector (barbed)\n    translate([0,0,-12*scale_factor])\n        difference() {\n            union() {\n                cylinder(h=15*scale_factor, d=18*scale_factor, center=false);\n                // Barbs\n                for(i=[1:4])\n                    translate([0,0,i*3*scale_factor])\n                        cylinder(h=2*scale_factor, d1=20*scale_factor, d2=18*scale_factor, center=false);\n            }\n            // Inner bore\n            translate([0,0,-1])\n                cylinder(h=20*scale_factor, d=12*scale_factor, center=false);\n        }\n\n    // Side nozzles (4-way)\n    for (a=[0:90:270]) {\n        rotate([0,0,a])\n            translate([15*scale_factor,0,20*scale_factor])\n                rotate([0,90,0])\n                    nozzle();\n    }\n\n    // Top pop-up nozzle\n    translate([0,0,34*scale_factor])\n        rotate([0,0,0])\n            pop_nozzle();\n}\n\nmodule nozzle() {\n    difference() {\n        union() {\n            // Nozzle tube\n            cylinder(h=12*scale_factor, d=6*scale_factor, center=true);\n            // Flange\n            translate([-6*scale_factor,0,0])\n                cube([6*scale_factor,8*scale_factor,2*scale_factor], center=true);\n        }\n        // Bore\n        cylinder(h=15*scale_factor, d=3*scale_factor, center=true);\n    }\n}\n\nmodule pop_nozzle() {\n    difference() {\n        union() {\n            // Short stem\n            cylinder(h=6*scale_factor, d=10*scale_factor, center=false);\n            // Cap with multiple tiny holes\n            translate([0,0,6*scale_factor])\n                sphere(d=10*scale_factor);\n        }\n        // Central bore\n        translate([0,0,-1])\n            cylinder(h=12*scale_factor, d=4*scale_factor, center=false);\n        // Spray holes\n        for (i=[0:5])\n            rotate([0, 30+i*12, i*72])\n                translate([0, 3.5*scale_factor, 6*scale_factor])\n                    rotate([90,0,0])\n                        cylinder(h=3*scale_factor, d=1*scale_factor, center=true);\n    }\n}\n\n// Render the model\nsprinkler_head();",
    "renders": true
  },
  {
    "household_item": "softener",
    "openscad_code": "// Water Softener – Realistic / Medium complexity\n// All dimensions in mm.  Print-friendly: 3 mm walls, no steep overhangs.\n\n$fn = 32;                      // Nice curves\nwall = 3;                      // Wall thickness for FDM printing\nmain_w = 36;                   // Brine tank width\nmain_d = 28;\nmain_h = 60;\nresin_w = 26;                  // Resin tank sits inside\nresin_d = 20;\nresin_h = 45;\nsalt_lid = 3;                  // Salt-bay lid thickness\n\nmodule brine_tank() {\n    difference() {\n        // Outer shell\n        cube([main_w, main_d, main_h], center = true);\n\n        // Hollow inside\n        translate([0, 0, wall/2])\n        cube([main_w - 2*wall, main_d - 2*wall, main_h - wall], center = true);\n    }\n}\n\nmodule resin_tank() {\n    difference() {\n        // Cylindrical pressure tank\n        translate([0, 0, (main_h - resin_h)/2])\n        cylinder(h = resin_h, d = resin_w, center = true);\n\n        // Hollow center\n        translate([0, 0, (main_h - resin_h)/2])\n        cylinder(h = resin_h + 0.2, d = resin_w - 2*wall, center = true);\n    }\n}\n\nmodule salt_grid() {\n    // Perforated plate for salt support\n    plate_th = 2;\n    hole_d = 3;\n    spacing = 6;\n    translate([0, 0, -main_h/2 + 8])\n    difference() {\n        cube([main_w - 6, main_d - 6, plate_th], center = true);\n        for (x = [-main_w/2 + 8 : spacing :  main_w/2 - 8])\n            for (y = [-main_d/2 + 8 : spacing : main_d/2 - 8])\n                translate([x, y, 0])\n                cylinder(h = plate_th + 1, d = hole_d, center = true);\n    }\n}\n\nmodule control_head() {\n    // Rectangular valve head\n    head_w = 20;\n    head_d = 18;\n    head_h = 10;\n    difference() {\n        translate([0, 0, main_h/2 + head_h/2])\n        cube([head_w, head_d, head_h], center = true);\n\n        // Cutouts for ports\n        translate([head_w/2 - 2, 0, main_h/2 + head_h/2])\n        rotate([0, 90, 0])\n        cylinder(h = 6, d = 5, center = true);\n        mirror([1, 0, 0])\n        translate([head_w/2 - 2, 0, main_h/2 + head_h/2])\n        rotate([0, 90, 0])\n        cylinder(h = 6, d = 5, center = true);\n    }\n\n    // Display bump\n    translate([0, head_d/2 - 3, main_h/2 + head_h + 1])\n    cube([8, 4, 3], center = true);\n}\n\nmodule salt_lid() {\n    translate([0, 0, main_h/2 + wall/2])\n    cube([main_w, main_d, salt_lid], center = true);\n}\n\nmodule bypass_valve() {\n    // Simple cylindrical bypass\n    cyl_d = 10;\n    cyl_h = 18;\n    translate([main_w/2 + cyl_h/2, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = cyl_h, d = cyl_d, center = true);\n        cylinder(h = cyl_h + 1, d = cyl_d - 2*wall, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    brine_tank();\n    resin_tank();\n    salt_grid();\n    control_head();\n    salt_lid();\n    bypass_valve();\n}",
    "renders": true
  },
  {
    "household_item": "filter",
    "openscad_code": "// Realistic Water Filter Cartridge (50 mm diameter x 100 mm height)\n// Medium complexity – recognizable features, printable without supports\n\n$fn = 36;               // Smooth curves\nwall = 1.2;             // Wall thickness for FDM printing\ndia = 50;               // Overall diameter\nh = 100;                // Overall height\ncenter_hole = 12;       // Central bore\nendcap_h = 8;           // Top/bottom end-cap height\ngroove_w = 2;           // O-ring groove width\ngroove_d = 1.5;         // O-ring groove depth\npleat_n = 36;           // Number of pleats around circumference\npleat_h = h - 2*endcap_h;\npleat_t = 0.8;          // Pleat thickness\n\n// Main assembly\nunion() {\n    // Bottom end-cap\n    endcap(false);\n\n    // Pleated filter medium\n    translate([0,0,endcap_h])\n        pleated_body();\n\n    // Top end-cap\n    translate([0,0,h-endcap_h])\n        mirror([0,0,1])\n            endcap(true);\n}\n\n// End-cap module (top or bottom)\nmodule endcap(is_top = false) {\n    difference() {\n        // Main disc\n        cylinder(h = endcap_h, d = dia);\n\n        // Central bore\n        translate([0,0,-1])\n            cylinder(h = endcap_h + 2, d = center_hole);\n\n        // O-ring groove (only on top end-cap outer side)\n        if (is_top)\n            translate([0,0,endcap_h - groove_d])\n                cylinder(h = groove_d + 1, d = dia - 2*wall - 2*groove_w);\n    }\n\n    // Radial ribs for flow distribution\n    for (a = [0:30:330])\n        rotate([0,0,a])\n            translate([-wall/2, 0, 0])\n                cube([wall, (dia - 2*wall)/2, endcap_h]);\n}\n\n// Pleated filter medium\nmodule pleated_body() {\n    // Core tube\n    difference() {\n        cylinder(h = pleat_h, d = dia - 2*wall);\n        cylinder(h = pleat_h + 2, d = center_hole);\n    }\n\n    // Pleats wrapped around core\n    for (i = [0:pleat_n-1]) {\n        rotate([0,0,i*360/pleat_n])\n            translate([(dia - 2*wall)/2 - pleat_t/2, 0, 0])\n                cube([pleat_t, pleat_t, pleat_h], center = true);\n    }\n\n    // Outer mesh support ring\n    difference() {\n        cylinder(h = pleat_h, d = dia);\n        cylinder(h = pleat_h + 2, d = dia - 2*wall);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fountain",
    "openscad_code": "// Medium-complexity 3D-printable realistic fountain\n// Dimensions: 80 mm diameter, 70 mm total height\n\n$fn = 36; // smooth curves\n\n// Base basin\ndifference() {\n    cylinder(h = 20, r1 = 40, r2 = 38); // slight taper inward\n    translate([0, 0, 2]) cylinder(h = 18, r1 = 37, r2 = 35);\n}\n\n// Pedestal\ntranslate([0, 0, 20]) difference() {\n    cylinder(h = 25, r = 15); // main pillar\n    translate([0, 0, 5]) cylinder(h = 15, r = 12); // hollow core\n}\n\n// Water reservoir bowl\ntranslate([0, 0, 45]) difference() {\n    sphere(r = 20);\n    scale([0.9, 0.9, 0.8])\n        translate([0, 0, 2])\n            sphere(r = 19);\n}\n\n// Central spout pipe\ntranslate([0, 0, 60]) cylinder(h = 10, r = 3);\n\n// Water jet\ntranslate([0, 0, 70]) sphere(r = 4);\n\n// Decorative rings around basin\nfor (h = [5, 10, 15]) {\n    translate([0, 0, h]) difference() {\n        cylinder(h = 1, r = 39);\n        cylinder(h = 1.2, r = 36);\n    }\n}\n\n// Drain holes (3 radial)\nmodule drain_hole() {\n    rotate([90, 0, 0]) cylinder(h = 5, r = 1.5);\n}\n\nfor (a = [0, 120, 240]) {\n    rotate([0, 0, a])\n        translate([37, 0, 10]) drain_hole();\n}\n\n// Side nozzles\nmodule side_nozzle() {\n    translate([0, 0, 50]) rotate([90, 0, 0]) cylinder(h = 8, r1 = 2, r2 = 1.5);\n}\n\nfor (a = [45, 135, 225, 315]) {\n    rotate([0, 0, a])\n        translate([18, 0, 0]) side_nozzle();\n}\n\n// Ornament ring on pedestal\ntranslate([0, 0, 32.5]) difference() {\n    cylinder(h = 5, r = 18);\n    cylinder(h = 5.2, r = 15);\n}\n\n// Base feet (4 supports)\nmodule foot() {\n    translate([0, 0, 0]) cube([6, 6, 2], center = true);\n}\n\nfor (a = [45, 135, 225, 315]) {\n    rotate([0, 0, a])\n        translate([33, 0, 1]) foot();\n}",
    "renders": true
  },
  {
    "household_item": "warmer",
    "openscad_code": "// Realistic 3D-printable wax/tart warmer\n// Approx 80 mm tall, 70 mm wide\n// No steep overhangs, 1.2 mm wall thickness assumed\n\n$fn = 36;\n\n// Overall scale factor\nscale = 1;\n\n// Main assembly\ndifference() {\n    union() {\n        // Base plate with feet\n        base();\n\n        // Central stem\n        stem();\n\n        // Bowl that holds the wax\n        wax_bowl();\n\n        // Decorative vent ring\n        vent_ring();\n    }\n\n    // Hollow out the bowl\n    translate([0, 0, 42])\n        rotate([180, 0, 0])\n        bowl_shell(1.2);\n\n    // Wick hole down the center\n    cylinder(h = 100, d = 6, center = true);\n}\n\nmodule base() {\n    // Circular foot\n    difference() {\n        cylinder(h = 3, d = 70);\n        translate([0, 0, 1])\n            cylinder(h = 3, d = 66);\n    }\n\n    // Three decorative feet\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([28, 0, -2])\n                scale([1, 1.2, 1])\n                    sphere(d = 10);\n}\n\nmodule stem() {\n    // Tapered pillar\n    cylinder(h1 = 1, h2 = 35, r1 = 25, r2 = 15);\n}\n\nmodule wax_bowl() {\n    // Outer shell\n    translate([0, 0, 35])\n        bowl_shell(0);\n\n    // Lip\n    translate([0, 0, 55])\n        difference() {\n            cylinder(h = 3, d = 50);\n            cylinder(h = 3, d = 46);\n        }\n}\n\nmodule bowl_shell(wall) {\n    difference() {\n        cylinder(h = 20, d = 46);\n        translate([0, 0, wall])\n            cylinder(h = 20 + 1, d = 46 - 2 * wall);\n    }\n}\n\nmodule vent_ring() {\n    // Decorative ring with slots\n    translate([0, 0, 38])\n        difference() {\n            cylinder(h = 10, d = 60);\n            cylinder(h = 10, d = 54);\n        }\n\n    // Vent slots\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([27, 0, 38.1])\n                cube([8, 2, 9.8], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "dispenser",
    "openscad_code": "// Soap Dispenser - Realistic Medium Complexity\n// 3D printable with 2mm walls and no overhangs\n\nwall = 2;\nbody_r = 25;\nbody_h = 60;\nneck_r = 18;\nneck_h = 15;\npump_r = 14;\npump_h = 25;\nnozzle_r = 4;\nnozzle_l = 18;\nbase_r = 30;\nbase_h = 8;\nwindow_h = 20;\n\nmodule main_body() {\n    // Outer shell\n    difference() {\n        cylinder(h=body_h, r=body_r);\n        // Hollow out\n        translate([0,0,wall]) \n            cylinder(h=body_h, r=body_r-wall);\n    }\n    \n    // Neck transition\n    translate([0,0,body_h])\n    difference() {\n        cylinder(h=neck_h, r1=body_r-wall, r2=neck_r);\n        translate([0,0,wall])\n            cylinder(h=neck_h, r1=body_r-wall*2, r2=neck_r-wall);\n    }\n}\n\nmodule pump_assembly() {\n    // Pump cylinder\n    translate([0,0,body_h+neck_h])\n    difference() {\n        cylinder(h=pump_h, r=pump_r);\n        translate([0,0,wall])\n            cylinder(h=pump_h, r=pump_r-wall);\n    }\n    \n    // Pump top dome\n    translate([0,0,body_h+neck_h+pump_h])\n    sphere(r=pump_r);\n    \n    // Nozzle\n    rotate([90,0,0])\n    translate([0,0,pump_r-2])\n    difference() {\n        cylinder(h=nozzle_l, r=nozzle_r);\n        translate([0,0,wall])\n            cylinder(h=nozzle_l, r=nozzle_r-wall);\n    }\n}\n\nmodule base() {\n    difference() {\n        cylinder(h=base_h, r=base_r);\n        translate([0,0,wall])\n            cylinder(h=base_h, r=base_r-wall);\n    }\n}\n\nmodule level_window() {\n    // Viewing window\n    rotate([0,90,0])\n    translate([body_r-wall/2,0,body_h/2-window_h/2])\n    cube([wall, 8, window_h]);\n}\n\nmodule grip_rings() {\n    // Anti-slip rings on neck\n    for(i=[1:3]) {\n        translate([0,0,body_h+i*4])\n        difference() {\n            cylinder(h=2, r=neck_r+1);\n            cylinder(h=2, r=neck_r);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_body();\n    pump_assembly();\n    base();\n    \n    // Details\n    grip_rings();\n    \n    // Level indicator - 4 windows spaced around\n    for(i=[0:90:270]) {\n        rotate([0,0,i])\n            level_window();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "icecream",
    "openscad_code": "// Realistic Medium-Complexity Ice-Cream Cone – OpenSCAD\n// Total height ≈ 80 mm, max diameter ≈ 55 mm\n// Designed for FDM printing: 0.8 mm walls, no overhangs > 45°\n\n// --- Parameters -----------------------------------------------------\ncone_h = 45;            // height of cone\ncone_r = 22;            // base radius of cone\ncone_top_r = 9;         // top radius of cone\ncone_wall = 1.6;        // shell thickness (2×0.4 mm nozzle)\n\nball_r = 16;            // radius of each ice-cream ball\nballs_n = 3;            // #balls on top\nball_overlap = 0.2;     // how much balls sink into each other\n\ndrip_h = 6;             // height of single drip\ndrip_r = 4;             // radius of drip\ndrips_n = 12;           # drips around edge\n\n// --- Modules --------------------------------------------------------\n// Criss-cross waffle texture on cone outer surface\nmodule waffle_pattern(h, r_bottom, r_top) {\n    slices = 36;\n    step = h / slices;\n    for (i = [0 : slices-1]) {\n        z = i * step;\n        r = r_bottom + (r_top - r_bottom) * (z / h);\n        color(\"BurlyWood\")\n        translate([0, 0, z])\n        rotate([0, 0, 45 + i * 10])\n        linear_extrude(height = step + 0.1, center = false)\n        difference() {\n            circle(r * 1.05);                 // outer circle\n            circle(r - cone_wall);            // inner circle\n        }\n    }\n}\n\n// Single ice-cream ball with simple surface undulation\nmodule ice_ball(r) {\n    color(\"FloralWhite\")\n    sphere(r);\n    // small bumps for realism\n    for (i = [0:15]) {\n        rotate([0, 0, i * 137.5])\n        translate([r * 0.9, 0, 0])\n        sphere(r * 0.1);\n    }\n}\n\n// Drip hanging from ball edge\nmodule drip(h, r) {\n    color(\"GhostWhite\")\n    translate([0, r, 0])\n    scale([0.8, 1, 1.2])\n    sphere(r);\n}\n\n// --- Main Geometry --------------------------------------------------\nunion() {\n    // ---- Cone ------------------------------------------------------\n    difference() {\n        cylinder(h = cone_h, r1 = cone_r, r2 = cone_top_r, $fn = 60);\n        // hollow it out\n        translate([0, 0, -0.1])\n        cylinder(h = cone_h + 0.2, r1 = cone_r - cone_wall,\n                 r2 = cone_top_r - cone_wall, $fn = 60);\n    }\n    // add waffle pattern on outer shell\n    waffle_pattern(cone_h, cone_r, cone_top_r);\n\n    // ---- Ice-cream balls ------------------------------------------\n    for (j = [0 : balls_n - 1]) {\n        angle = j * 120;\n        offset = cone_top_r - ball_overlap;\n        translate([offset * cos(angle), offset * sin(angle), cone_h - 2])\n        ice_ball(ball_r);\n    }\n\n    // ---- Drips ------------------------------------------------------\n    for (k = [0 : drips_n - 1]) {\n        a = k * 360 / drips_n;\n        translate([cone_top_r * cos(a),\n                   cone_top_r * sin(a),\n                   cone_h + 2 * ball_r - 3])\n        rotate([90, 0, a])\n        drip(drip_h, drip_r);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "yogurt",
    "openscad_code": "// Realistic yogurt cup with medium complexity\n// Dimensions in mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\ncup_height = 65;\ncup_outer_diameter = 50;\ncup_inner_diameter = 46;\nwall_thickness = 2;\nbase_thickness = 3;\nlip_height = 3;\nlip_outer_diameter = 54;\n\n// Yogurt surface parameters\nyogurt_level = 50;\nyogurt_texture_depth = 0.5;\nyogurt_texture_spacing = 2;\n\n// Label parameters\nlabel_height = 35;\nlabel_start = 15;\n\n// Create the complete yogurt cup\nmodule yogurt_cup() {\n    // Main cup body - hollow cylinder\n    difference() {\n        // Outer cup\n        cylinder(h = cup_height, d = cup_outer_diameter);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n            cylinder(h = cup_height - base_thickness + 1, d = cup_inner_diameter);\n    }\n    \n    // Add base thickness\n    translate([0, 0, -base_thickness])\n        cylinder(h = base_thickness, d = cup_outer_diameter);\n    \n    // Add lip/rim at top\n    translate([0, 0, cup_height])\n        cylinder(h = lip_height, d1 = cup_outer_diameter, d2 = lip_outer_diameter);\n}\n\n// Create yogurt surface texture\nmodule yogurt_surface() {\n    // Base yogurt fill\n    translate([0, 0, base_thickness])\n        cylinder(h = yogurt_level - base_thickness, d = cup_inner_diameter - 0.2);\n    \n    // Add subtle surface texture - small spheres for realistic look\n    for (i = [0:5:360]) {\n        rotate([0, 0, i]) {\n            for (j = [0:yogurt_texture_spacing:yogurt_level - base_thickness - 5]) {\n                translate([\n                    sin(i * 2) * (cup_inner_diameter/2 - 2), \n                    cos(i * 2) * (cup_inner_diameter/2 - 2), \n                    base_thickness + j + yogurt_texture_depth\n                ])\n                sphere(d = yogurt_texture_depth * 2);\n            }\n        }\n    }\n}\n\n// Create label area indentation\nmodule label_area() {\n    difference() {\n        // Main cup (already exists)\n        cylinder(h = cup_height, d = cup_outer_diameter);\n        \n        // Label indentation\n        translate([0, 0, label_start])\n            cylinder(h = label_height, d = cup_outer_diameter - 1);\n    }\n}\n\n// Create subtle grip rings on sides\nmodule grip_rings() {\n    for (i = [10:5:40]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h = 0.5, d = cup_outer_diameter + 0.2);\n                cylinder(h = 0.5, d = cup_outer_diameter - 0.2);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main cup with label area\n    difference() {\n        yogurt_cup();\n        label_area();\n    }\n    \n    // Add grip rings\n    grip_rings();\n    \n    // Add yogurt\n    yogurt_surface();\n}",
    "renders": true
  },
  {
    "household_item": "soda",
    "openscad_code": "// Realistic Soda Can - Medium Complexity\n// 3D printable soda can with proper wall thickness and no overhangs\n// Dimensions: 66mm diameter, 122mm height (standard soda can)\n\n// Overall scale factor\nscale_factor = 1;\n\n// Can dimensions\ncan_height = 122 * scale_factor;\ncan_diameter = 66 * scale_factor;\nwall_thickness = 1.2 * scale_factor;\n\n// Top dimensions\ntop_diameter = 57 * scale_factor;\ntop_height = 13 * scale_factor;\n\n// Tab dimensions\ntab_width = 22 * scale_factor;\ntab_length = 28 * scale_factor;\ntab_thickness = 0.8 * scale_factor;\n\n// Ridge dimensions\nridge_height = 2 * scale_factor;\nridge_spacing = 3 * scale_factor;\nnum_ridges = 12;\n\n// Main can body with internal cavity\nmodule can_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=can_height, d=can_diameter, $fn=100);\n        \n        // Internal cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=can_height - wall_thickness, d=can_diameter - 2*wall_thickness, $fn=100);\n    }\n}\n\n// Curved top section\nmodule can_top() {\n    difference() {\n        // Main curved top\n        translate([0, 0, can_height - top_height/2])\n            scale([1, 1, 0.5])\n                sphere(d=top_diameter, $fn=100);\n        \n        // Remove bottom half\n        translate([0, 0, can_height - top_height])\n            cube([top_diameter*2, top_diameter*2, top_height], center=true);\n    }\n}\n\n// Opening tab mechanism\nmodule opening_tab() {\n    // Tab base\n    translate([top_diameter/2 - tab_length/2, 0, can_height + top_height])\n        rotate([90, 0, 0])\n            linear_extrude(height=tab_thickness)\n                polygon(points=[\n                    [0, -tab_width/2],\n                    [tab_length*0.7, -tab_width/2],\n                    [tab_length, 0],\n                    [tab_length*0.7, tab_width/2],\n                    [0, tab_width/2]\n                ]);\n    \n    // Rivet\n    translate([top_diameter/2 - tab_length/4, 0, can_height + top_height - tab_thickness/2])\n        cylinder(h=tab_thickness*2, d=3*scale_factor, $fn=20);\n    \n    // Opening line\n    translate([top_diameter/2 + tab_length/4, 0, can_height + top_height - 0.1])\n        cube([15*scale_factor, 0.5*scale_factor, tab_thickness*2]);\n}\n\n// Bottom ridges for stacking\nmodule bottom_ridges() {\n    for (i = [0:num_ridges-1]) {\n        rotate([0, 0, i * 360/num_ridges])\n            translate([can_diameter/2 - wall_thickness - ridge_height/2, 0, 0])\n                cube([ridge_height, wall_thickness*2, ridge_spacing], center=true);\n    }\n}\n\n// Top rim for strength\nmodule top_rim() {\n    difference() {\n        cylinder(h=wall_thickness*1.5, d=can_diameter + wall_thickness, $fn=100);\n        cylinder(h=wall_thickness*1.5, d=can_diameter, $fn=100);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    can_body();\n    \n    // Top section\n    can_top();\n    \n    // Top rim\n    translate([0, 0, can_height - wall_thickness*1.5])\n        top_rim();\n    \n    // Opening tab\n    opening_tab();\n    \n    // Bottom ridges\n    translate([0, 0, wall_thickness])\n        bottom_ridges();\n}\n\n// Position for printing\ntranslate([0, 0, 0])",
    "renders": true
  },
  {
    "household_item": "kegerator",
    "openscad_code": "// Kegerator - Realistic Style, Medium Complexity\n// Dimensions in mm, suitable for 3D printing\n\n// Overall dimensions\nkeg_w = 40;\nkeg_h = 60;\nkeg_d = 30;\nwall_t = 1.5;\n\n// Taps\ntap_r = 3;\ntap_h = 8;\ntap_spacing = 12;\n\n// Drip tray\ntray_w = 30;\ntray_d = 10;\ntray_h = 2;\n\n// Casters\ncaster_r = 2.5;\ncaster_h = 5;\n\n// Door handle\nhandle_w = 10;\nhandle_h = 3;\nhandle_d = 2;\n\n// Top plate\ntop_w = keg_w + 4;\ntop_d = keg_d + 4;\ntop_h = 2;\n\n// Main body\nmodule kegerator_body() {\n    difference() {\n        // Outer shell\n        cube([keg_w, keg_d, keg_h], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_t/2])\n        cube([keg_w - 2*wall_t, keg_d - 2*wall_t, keg_h - wall_t], center=true);\n        \n        // Door cutout\n        translate([0, keg_d/2 - wall_t/2, 0])\n        cube([keg_w - 2*wall_t, wall_t + 0.1, keg_h - 2*wall_t], center=true);\n    }\n}\n\n// Door\nmodule door() {\n    translate([0, keg_d/2 + wall_t/2, 0])\n    cube([keg_w - 2*wall_t, wall_t, keg_h - 2*wall_t], center=true);\n}\n\n// Door handle\nmodule door_handle() {\n    translate([0, keg_d/2 + wall_t, keg_h/2 - 10])\n    rotate([90, 0, 0])\n    difference() {\n        // Handle base\n        cylinder(h=handle_d, r1=handle_w/2, r2=handle_w/2, center=true);\n        \n        // Grip cutout\n        translate([0, 0, -handle_d/2])\n        cube([handle_w - 2, handle_h - 1, handle_d + 0.1], center=true);\n    }\n}\n\n// Taps\nmodule taps() {\n    for (i = [-1:1]) {\n        translate([i * tap_spacing, 0, keg_h/2 + top_h])\n        union() {\n            // Tap base\n            cylinder(h=tap_h, r=tap_r + 1, center=false);\n            \n            // Tap spout\n            translate([0, tap_r + 1, tap_h/2])\n            rotate([90, 0, 0])\n            cylinder(h=tap_r + 2, r=tap_r/2, center=false);\n            \n            // Tap handle\n            translate([0, 0, tap_h + 2])\n            rotate([0, 0, 45 * i])\n            cube([2, 2, 6], center=true);\n        }\n    }\n}\n\n// Drip tray\nmodule drip_tray() {\n    difference() {\n        translate([0, keg_d/2 - tray_d/2, 0])\n        cube([tray_w, tray_d, tray_h], center=true);\n        \n        // Tray depression\n        translate([0, keg_d/2 - tray_d/2, tray_h/2 - 0.5])\n        cube([tray_w - 2, tray_d - 2, tray_h], center=true);\n    }\n}\n\n// Top plate\nmodule top_plate() {\n    translate([0, 0, keg_h/2 + top_h/2])\n    cube([top_w, top_d, top_h], center=true);\n}\n\n// Casters\nmodule casters() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (keg_w/2 - caster_r), y * (keg_d/2 - caster_r), -keg_h/2 - caster_h/2])\n            union() {\n                // Caster wheel\n                cylinder(h=caster_h/2, r=caster_r, center=true);\n                \n                // Caster mount\n                translate([0, 0, -caster_h/2])\n                cube([caster_r * 2, caster_r * 2, caster_h/2], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    kegerator_body();\n    door();\n    door_handle();\n    top_plate();\n    taps();\n    drip_tray();\n    casters();\n}",
    "renders": true
  },
  {
    "household_item": "wine",
    "openscad_code": "// Wine Bottle with Cork and Label - Realistic Style, Medium Complexity\n// Overall print-friendly: 90 mm tall, no unsupported overhangs\n\n// Parameters\nbottle_height = 90;\nbody_d = 30;\nneck_d = 12;\nfoot_d = 40;\nwall = 1.5;      // 3D-printable wall thickness\n\n// Main bottle shell\nmodule bottle_shell() {\n    difference() {\n        union() {\n            // Main body (cylinder + rounded shoulder)\n            translate([0, 0, 0])\n                cylinder(h = bottle_height * 0.7, d = body_d, $fn = 60);\n\n            // Tapered shoulder\n            translate([0, 0, bottle_height * 0.7])\n                cylinder(h = bottle_height * 0.15, d1 = body_d, d2 = neck_d, $fn = 60);\n\n            // Neck\n            translate([0, 0, bottle_height * 0.85])\n                cylinder(h = bottle_height * 0.15, d = neck_d, $fn = 60);\n        }\n\n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = bottle_height - wall, d = body_d - 2 * wall, $fn = 60);\n\n        translate([0, 0, bottle_height * 0.85 + wall])\n            cylinder(h = bottle_height * 0.15 - wall, d = neck_d - 2 * wall, $fn = 60);\n    }\n}\n\n// Cork\nmodule cork() {\n    translate([0, 0, bottle_height + 1])\n        cylinder(h = 10, d1 = neck_d - 0.5, d2 = neck_d + 1, $fn = 20);\n}\n\n// Foot / stand\nmodule foot() {\n    translate([0, 0, -2])\n        cylinder(h = 2, d = foot_d, $fn = 60);\n}\n\n// Label band\nmodule label_band() {\n    color(\"white\")\n    difference() {\n        translate([0, 0, bottle_height * 0.4])\n            cylinder(h = wall, d = body_d + 0.2, $fn = 60);\n\n        translate([0, 0, bottle_height * 0.4 - 0.1])\n            cylinder(h = wall + 0.2, d = body_d, $fn = 60);\n    }\n}\n\n// Bottle assembly\nunion() {\n    bottle_shell();\n    cork();\n    foot();\n    label_band();\n}",
    "renders": true
  },
  {
    "household_item": "chiller",
    "openscad_code": "// Realistic style medium-complexity chiller\n// Overall dimensions: ~80 mm tall, ~60 mm wide, ~60 mm deep\n\n// Wall thickness for 3D printing\nwall = 2.0;\n\nmodule outer_shell() {\n    // Main chiller body – slightly rounded corners\n    difference() {\n        minkowski() {\n            cube([55, 55, 75], center = true);\n            sphere(5);\n        }\n        // Hollow out interior\n        translate([0, 0, 5])\n            minkowski() {\n                cube([55 - 2*wall - 2, 55 - 2*wall - 2, 75 - 2*wall], center = true);\n                sphere(4);\n            }\n    }\n}\n\nmodule lid() {\n    // Top lid with handle\n    difference() {\n        // Lid disk\n        translate([0, 0, 38])\n            cylinder(h = 8, d = 60, $fn = 64);\n        // Handle hole\n        translate([0, 0, 46])\n            cylinder(h = 12, d = 15, $fn = 32);\n    }\n    // Handle grip\n    translate([0, 0, 46])\n        cylinder(h = 12, d = 12, $fn = 32);\n}\n\nmodule base_feet() {\n    // Four rubber-like feet\n    for (x = [-20, 20])\n        for (y = [-20, 20])\n            translate([x, y, -39])\n                cylinder(h = 4, d = 8, $fn = 20);\n}\n\nmodule side_vent_slots() {\n    // Vertical vent slots on back face\n    translate([-28, 0, 0])\n        rotate([0, 90, 0])\n            for (z = [-25:5:25])\n                translate([z, 0, 0])\n                    cube([3, 30, 1]);\n}\n\nmodule front_display() {\n    // Simple control panel rectangle\n    translate([0, -28, 10])\n        cube([30, 2, 15]);\n}\n\nmodule power_cord() {\n    // Simple power cord stub\n    translate([25, 0, -30])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 6, $fn = 16);\n}\n\n// Assembly\nunion() {\n    outer_shell();\n    lid();\n    base_feet();\n    side_vent_slots();\n    front_display();\n    power_cord();\n}",
    "renders": true
  },
  {
    "household_item": "cellar",
    "openscad_code": "// Realistic 3D-printable cellar model (medium complexity)\n// Overall size ~80 mm long, 60 mm deep, 30 mm tall\n\n$fn = 32;\n\n// Main cellar chamber\nmodule cellar_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 5])\n            cube([80, 60, 25], center = true);\n\n        // Hollow interior\n        translate([0, 0, 7.5])\n            cube([74, 54, 21], center = true);\n\n        // Doorway arch\n        translate([-37, 0, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 20, d1 = 20, d2 = 20);\n        translate([-37, 0, 15])\n            cube([20, 20, 10], center = true);\n    }\n}\n\n// Stone stairway leading down\nmodule stone_stairs() {\n    for (i = [0:3]) {\n        translate([-45, -20 + i * 10, 5 - i * 2])\n            cube([10, 10, 2 + i * 2]);\n    }\n}\n\n// Wooden door\nmodule door() {\n    difference() {\n        // Door slab\n        translate([-37, 0, 5])\n            rotate([0, 90, 0])\n            cube([20, 1.5, 18], center = true);\n\n        // Door handle hole\n        translate([-37, -0.75, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 2, d = 3);\n    }\n}\n\n// Ventilation grate on back wall\nmodule vent_grate() {\n    difference() {\n        translate([37, 0, 15])\n            cube([2, 10, 6], center = true);\n\n        for (i = [-2:2]) {\n            translate([38, i * 1.5, 15])\n                cube([2, 0.8, 5], center = true);\n        }\n    }\n}\n\n// Internal wine rack\nmodule wine_rack() {\n    translate([15, 0, 12])\n        difference() {\n            cube([40, 50, 8], center = true);\n            \n            // Bottle holes\n            for (x = [-15:15:30]) {\n                for (y = [-20:10:20]) {\n                    translate([x, y, 12])\n                        rotate([90, 0, 0])\n                        cylinder(h = 10, d = 8);\n                }\n            }\n        }\n}\n\n// Stone texture on walls\nmodule stone_texture() {\n    difference() {\n        union() {\n            cellar_body();\n            stone_stairs();\n        }\n\n        // Random stone indents for realism\n        for (i = [1:20]) {\n            translate([randx(i) * 35, randy(i) * 25, randz(i) * 10 + 10])\n                sphere(d = 2 + rand(i) * 3);\n        }\n    }\n}\n\n// Helper random functions based on seed\nfunction rand(i) = (1664525 * i + 1013904223) % 1000 / 1000;\nfunction randx(i) = (rand(i) * 2 - 1);\nfunction randy(i) = (rand(i + 100) * 2 - 1);\nfunction randz(i) = (rand(i + 200) * 2 - 1);\n\n// Assemble the cellar\nunion() {\n    stone_texture();\n    door();\n    vent_grate();\n    wine_rack();\n}",
    "renders": true
  },
  {
    "household_item": "cleaner",
    "openscad_code": "// Realistic 3D-printable spray-bottle cleaner (medium complexity)\n// Overall height ≈ 85 mm\n\n$fn = 36; // smoother curves\n\n// ---------- PARAMETERS ----------\nh_total   = 85;   // total height of the bottle\nr_body    = 18;   // radius of the main bottle\nwall      = 1.5;  // printable wall thickness\nr_trigger = 5;    // trigger pivot radius\nh_trigger = 30;   // trigger height\nr_nozzle  = 3;    // nozzle tip radius\nh_nozzle  = 8;    // nozzle length\n\n// ---------- MODULES ----------\n\nmodule bottle_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = h_total * 0.7, r = r_body, center = false);\n        // Inner cavity (for liquid)\n        translate([0, 0, wall])\n            cylinder(h = h_total * 0.7 - 2*wall, r = r_body - wall, center = false);\n    }\n}\n\nmodule neck() {\n    translate([0, 0, h_total * 0.7])\n        cylinder(h = h_total * 0.15, r1 = r_body, r2 = r_body * 0.6, center = false);\n}\n\nmodule cap_base() {\n    translate([0, 0, h_total * 0.85])\n        cylinder(h = 6, r = r_body * 0.65, center = false);\n}\n\nmodule trigger_assembly() {\n    // Pivot cylinder\n    translate([r_body * 0.6, 0, h_total * 0.9])\n        rotate([90, 0, 0])\n            cylinder(h = 12, r = r_trigger, center = true);\n\n    // Trigger lever\n    translate([r_body * 0.6 + 3, 0, h_total * 0.9 - 5])\n        rotate([0, 0, 15])\n            cube([10, 3, h_trigger], center = true);\n\n    // Return spring housing (simplified)\n    translate([r_body * 0.6 - 2, 0, h_total * 0.9 - 8])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 3, center = true);\n}\n\nmodule nozzle() {\n    translate([r_body * 0.6 + 9, 0, h_total - 5])\n        rotate([0, -30, 0])\n        union() {\n            // Tube\n            cylinder(h = 25, r = 4, center = true);\n            // Tip\n            translate([12.5, 0, 0])\n                cylinder(h = h_nozzle, r1 = 4, r2 = r_nozzle, center = true);\n        }\n}\n\nmodule label_band() {\n    translate([0, 0, h_total * 0.35])\n        difference() {\n            cylinder(h = 8, r = r_body + 0.3, center = false);\n            cylinder(h = 8.1, r = r_body, center = false);\n        }\n}\n\nmodule bottom_base() {\n    // Adds stability and print-bed adhesion\n    translate([0, 0, -1])\n        cylinder(h = 2, r = r_body + 1, center = false);\n}\n\n// ---------- MAIN MODEL ----------\nunion() {\n    bottle_body();\n    neck();\n    cap_base();\n    trigger_assembly();\n    nozzle();\n    label_band();\n    bottom_base();\n}",
    "renders": true
  },
  {
    "household_item": "tool",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\nmodule handle_grip() {\n    difference() {\n        cylinder(h = 70, d = 28, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 66, d = 24, center = false);\n    }\n}\n\nmodule handle_cap() {\n    translate([0, 0, 70])\n        cylinder(h = 8, d1 = 28, d2 = 32, center = false);\n}\n\nmodule handle_ring(n = 6) {\n    for (i = [0:n-1]) {\n        rotate([0, 0, i * 360/n])\n            translate([15, 0, 35])\n                rotate([0, 90, 0])\n                    cylinder(h = 3, d = 4, center = true);\n    }\n}\n\nmodule screwdriver_shaft() {\n    union() {\n        // main shaft\n        translate([0, 0, 78])\n            cylinder(h = 60, d = 8, center = false);\n        \n        // tip transition\n        translate([0, 0, 138])\n            cylinder(h = 10, d1 = 8, d2 = 6, center = false);\n        \n        // flat tip\n        translate([0, 0, 148])\n            cube([6, 1.5, 10], center = true);\n    }\n}\n\nmodule torque_strips() {\n    for (i = [0:2]) {\n        translate([0, 0, 10 + i * 20])\n            difference() {\n                cylinder(h = 4, d = 30, center = false);\n                cylinder(h = 5, d = 26, center = false);\n            }\n    }\n}\n\nmodule magnet_cavity() {\n    translate([0, 0, 154])\n        cylinder(h = 4, d = 4, center = true);\n}\n\nunion() {\n    handle_grip();\n    handle_cap();\n    handle_ring();\n    torque_strips();\n    screwdriver_shaft();\n    magnet_cavity();\n}",
    "renders": true
  },
  {
    "household_item": "hammer",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall scale factor (final length ≈ 92 mm)\nscale_factor = 1;\n\n// Hammer parameters\nhandle_len = 60 * scale_factor;\nhandle_d = 12 * scale_factor;\nhead_len = 22 * scale_factor;\nhead_h = 16 * scale_factor;\nhead_w = 12 * scale_factor;\nclaw_thick = 4 * scale_factor;\nclaw_len = 18 * scale_factor;\nclaw_curve = 14 * scale_factor;\n\n// 3D print wall thickness\nwall = 2 * scale_factor;\n\n// Main assembly\nunion() {\n    // Handle\n    handle();\n\n    // Head\n    translate([0, 0, handle_len - head_h/2])\n        hammer_head();\n}\n\n// Handle with grip rings\nmodule handle() {\n    // Solid handle shaft\n    cylinder(h = handle_len, d = handle_d, $fn = 36);\n\n    // Grip rings\n    for(i = [1:4]) {\n        translate([0, 0, i * handle_len/5])\n            difference() {\n                cylinder(h = 2 * scale_factor, d = handle_d + 1.5 * scale_factor, $fn = 36);\n                cylinder(h = 2 * scale_factor + 0.1, d = handle_d - 1 * scale_factor, $fn = 36);\n            }\n    }\n}\n\n// Hammer head with claw\nmodule hammer_head() {\n    difference() {\n        // Main head block\n        union() {\n            // Central block\n            cube([head_w, head_len, head_h], center = true);\n\n            // Striking face (slight dome)\n            translate([0, head_len/2 + 0.5, 0])\n                scale([head_w * 0.95, 1, head_h * 0.95])\n                    sphere(d = head_h, $fn = 32);\n        }\n\n        // Nail slot in claw\n        translate([0, -head_len/2 - claw_len/2, 0])\n            cube([2, claw_len + 2, head_h * 0.6], center = true);\n    }\n\n    // Claw curve\n    translate([0, -head_len/2 - claw_len/2 + 2, head_h/2 - claw_thick/2])\n        rotate([90, 0, 0])\n            linear_extrude(height = claw_thick, convexity = 10)\n                difference() {\n                    // Outer curve\n                    translate([0, 0])\n                        circle(r = claw_curve, $fn = 32);\n                    // Inner curve\n                    translate([0, claw_curve - claw_thick])\n                        circle(r = claw_curve - claw_thick, $fn = 32);\n                    // Cut to length\n                    translate([-claw_curve, -claw_curve*2])\n                        square(claw_curve * 2);\n                };\n}",
    "renders": true
  },
  {
    "household_item": "screwdriver",
    "openscad_code": "// Realistic Medium-Complexity Screwdriver (Phillips #2)\n// Overall length ≈ 90 mm, 3D-printable (no supports needed)\n\n// Main parameters\nhandle_len = 55;\nhandle_dia = 12;\nshaft_len = 35;\nshaft_dia = 6;\ntip_len = 6;\n\n// Handle grip rings\nmodule grip_rings() {\n    for (i = [0:4]) {\n        translate([0, 0, -handle_len/2 + 6 + i*9])\n            difference() {\n                cylinder(h = 2.5, d = handle_dia + 1, $fn = 60);\n                cylinder(h = 2.6, d = handle_dia - 1, $fn = 60);\n            }\n    }\n}\n\n// Handle with hex flats for torque\nmodule handle() {\n    difference() {\n        // Main ergonomic handle\n        union() {\n            // Tapered front section\n            cylinder(h = handle_len*0.3, d1 = shaft_dia + 2, d2 = handle_dia, $fn = 60);\n            // Main grip body\n            translate([0, 0, -handle_len*0.35])\n                cylinder(h = handle_len*0.7, d = handle_dia, $fn = 60);\n            // End cap dome\n            translate([0, 0, -handle_len/2 + 1])\n                sphere(d = handle_dia, $fn = 60);\n        }\n        // Hex recess for hanging\n        translate([0, 0, handle_len/2 - 3])\n            rotate([0, 0, 30])\n            cylinder(h = 5, d = 7, $fn = 6);\n    }\n    grip_rings();\n}\n\n// Phillips #2 tip profile\nmodule phillips_tip() {\n    linear_extrude(height = tip_len, center = true)\n    intersection() {\n        // Vertical slot\n        square([shaft_dia*0.7, shaft_dia*0.2], center = true);\n        // Horizontal slot (rotated)\n        rotate([0, 0, 90])\n            square([shaft_dia*0.7, shaft_dia*0.2], center = true);\n    }\n}\n\n// Main shaft with tip\nmodule shaft() {\n    union() {\n        // Cylindrical shaft\n        cylinder(h = shaft_len, d = shaft_dia, $fn = 60);\n        // Taper to tip\n        translate([0, 0, shaft_len/2 + tip_len/2])\n            cylinder(h = tip_len, d1 = shaft_dia, d2 = shaft_dia*0.8, $fn = 60);\n        // Phillips tip\n        translate([0, 0, shaft_len/2 + tip_len])\n            phillips_tip();\n    }\n}\n\n// Assembly\nunion() {\n    // Handle at origin\n    handle();\n    \n    // Shaft extending from handle\n    translate([0, 0, handle_len/2])\n        shaft();\n}",
    "renders": true
  },
  {
    "household_item": "wrench",
    "openscad_code": "// Realistic medium-complexity wrench for 3D printing\n// Overall size: 90 mm long, 15 mm wide, 6 mm thick\n\n$fn = 32;\n\n// Parameters\nwrench_length = 90;\nhandle_length = 60;\nhandle_width = 15;\nhandle_height = 6;\njaw_opening = 13;\njaw_thickness = 6;\njaw_depth = 12;\n\nmodule handle_profile() {\n    // Create ergonomic rounded handle cross-section\n    difference() {\n        offset(r = 2) offset(r = -2) circle(d = handle_width);\n        square([handle_width - 4, handle_height], center = true);\n    }\n}\n\nmodule handle() {\n    // Main handle with grooves for grip\n    linear_extrude(height = handle_length, center = true)\n        handle_profile();\n    \n    // Add grip grooves\n    for(i = [0:4]) {\n        translate([0, 0, -handle_length/2 + 10 + i*10])\n            rotate([90, 0, 0])\n                cylinder(h = 1, d = 14, center = true);\n    }\n}\n\nmodule open_end_jaw() {\n    // Box-shaped jaw body\n    difference() {\n        cube([handle_width, jaw_depth, jaw_thickness], center = true);\n        \n        // Hex opening for 13mm nut\n        translate([0, jaw_depth/2 - 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = handle_width + 2, d = jaw_opening);\n        \n        // Chamfer edges\n        translate([0, -jaw_depth/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = handle_width + 2, d = jaw_opening + 4);\n    }\n    \n    // Add small fillets\n    translate([0, 0, jaw_thickness/2 - 1])\n        cylinder(h = 2, d = handle_width, center = true);\n    translate([0, 0, -jaw_thickness/2 + 1])\n        cylinder(h = 2, d = handle_width, center = true);\n}\n\nmodule closed_end_jaw() {\n    // Closed end with 10mm hex\n    difference() {\n        cube([handle_width, jaw_depth, jaw_thickness], center = true);\n        \n        // Hex socket\n        rotate([90, 0, 0])\n            cylinder(h = handle_width + 2, d = 10, $fn = 6);\n    }\n    \n    // Add ring shape\n    difference() {\n        cylinder(h = jaw_thickness, d = handle_width + 8, center = true);\n        cylinder(h = jaw_thickness + 2, d = handle_width + 4, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle();\n    \n    // Open end jaw\n    translate([0, handle_length/2 + jaw_depth/2, 0])\n        open_end_jaw();\n    \n    // Closed end jaw\n    translate([0, -handle_length/2 - jaw_depth/2, 0])\n        closed_end_jaw();\n}",
    "renders": true
  },
  {
    "household_item": "pliers",
    "openscad_code": "// Realistic 3D-printable pliers – medium complexity\n// Overall length ~90 mm, designed to print as one assembled piece\n\n$fn = 32;        // curve resolution\nw = 2;           // wall thickness for printing\nh = 3;           // extra height for grip ribs\n\nmodule handle_block(len, wid, thick) {\n    difference() {\n        translate([0, 0, thick/2])\n            cube([len, wid, thick], center=true);\n        translate([0, 0, thick])\n            cube([len-4, wid-4, thick], center=true); // hollow core\n    }\n}\n\nmodule grip_ridges(len, wid) {\n    for (i = [0 : 3 : len-6]) {\n        translate([i-len/2+3, 0, 0])\n            cube([2, wid+1, h], center=true);\n    }\n}\n\nmodule pivot_pin(r, h) {\n    cylinder(h=h, r=r, center=true);\n}\n\nmodule cutter_jaw(len, wid, thick) {\n    difference() {\n        polyhedron(\n            points = [\n                [-len, -wid/2, 0],\n                [0, -wid/2, 0],\n                [0,  wid/2, 0],\n                [-len,  wid/2, 0],\n                [-len, -wid/2, thick],\n                [0, -wid/2, thick],\n                [0,  wid/2, thick],\n                [-len,  wid/2, thick],\n                [-len*0.8, 0, thick*1.5]  // cutter tip\n            ],\n            faces = [\n                [0,1,2,3], [4,7,6,5],\n                [0,4,5,1], [2,6,7,3],\n                [1,5,6,2], [0,3,7,4],\n                [5,8,6], [6,8,7]\n            ]\n        );\n        // cutting edge groove\n        translate([-len*0.7, 0, thick/2])\n            rotate([90, 0, 0])\n            cylinder(h=wid, r1=0.1, r2=0.5, center=true);\n    }\n}\n\nmodule half_pliers(side) {\n    mirror([side, 0, 0]) {\n        // handle\n        union() {\n            handle_block(45, 10, 8);\n            translate([0, 0, -4])\n                grip_ridges(45, 10);\n        }\n        \n        // neck taper\n        translate([20, 0, 0])\n            rotate([0, 0, -15])\n            cube([20, 8, 8], center=true);\n        \n        // jaw\n        translate([35, 0, 2])\n            rotate([0, 0, -15])\n            cutter_jaw(25, 6, 5);\n        \n        // pivot hole\n        translate([20, 0, 0])\n            rotate([90, 0, 0])\n            pivot_pin(2, 10);\n    }\n}\n\nunion() {\n    half_pliers(0);   // left half\n    half_pliers(1);   // right half\n}",
    "renders": true
  },
  {
    "household_item": "squeegee",
    "openscad_code": "// OpenSCAD Squeegee – medium complexity, realistic style\n// Overall length ≈ 95 mm, fully printable, no supports needed\n\n// Parameters\nhandle_len = 80;\nhandle_d = 12;\nneck_len = 12;\nneck_d = 6;\nblade_w = 75;\nblade_h = 15;\nblade_t = 2;\ngrip_rings = 5;\ngrip_ring_depth = 0.8;\nwall_t = 1.2;           // print-friendly wall thickness\n\n// -------------------- Modules --------------------\n\n// Handle grip rings\nmodule grip_ring(z_pos){\n    translate([0,0,z_pos])\n        difference(){\n            cylinder(d=handle_d+1, h=2, $fn=32);\n            cylinder(d=handle_d-2*grip_ring_depth, h=2.1, $fn=32);\n        }\n}\n\n// Handle shaft (hollow for weight/material savings)\nmodule handle_shaft(){\n    difference(){\n        cylinder(d=handle_d, h=handle_len, $fn=32);\n        translate([0,0,-0.1])\n            cylinder(d=handle_d-2*wall_t, h=handle_len+0.2, $fn=32);\n    }\n}\n\n// Neck between handle and blade holder\nmodule neck(){\n    cylinder(d1=handle_d, d2=neck_d, h=neck_len, $fn=32);\n}\n\n// Blade holder frame (printable flat side down)\nmodule blade_holder(){\n    difference(){\n        // Outer frame\n        cube([blade_w+6, blade_h+4, 6], center=true);\n        // Recess for blade insert\n        translate([0,0,-0.1])\n            cube([blade_w+2, blade_h, 3.2], center=true);\n        // Lightening holes\n        for(y=[-blade_h/3, 0, blade_h/3])\n            translate([0,y,0])\n                cylinder(d=4, h=7, $fn=16);\n    }\n}\n\n// Flexible rubber blade (single solid part)\nmodule blade(){\n    translate([0, -blade_h/2 - blade_t/2, -3])\n        cube([blade_w, blade_t, blade_h], center=true);\n}\n\n// -------------------- Assembly --------------------\n\nunion(){\n    // Grip rings on handle\n    for(i=[0:grip_rings-1])\n        grip_ring(i*(handle_len/(grip_rings-1)));\n\n    // Main handle assembly\n    handle_shaft();\n\n    // Neck\n    translate([0,0,handle_len])\n        neck();\n\n    // Blade holder\n    translate([0,0,handle_len+neck_len+3])\n        rotate([90,0,0])\n            blade_holder();\n\n    // Blade inserted into holder\n    translate([0,0,handle_len+neck_len+3])\n        rotate([90,0,0])\n            blade();\n}",
    "renders": true
  },
  {
    "household_item": "bleach",
    "openscad_code": "// Realistic Bleach Bottle - Medium Complexity\n// All dimensions in mm, ready for FDM printing\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\nbottle_height = 80;\nbottle_width = 35;\nbottle_depth = 20;\nwall_thickness = 2;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main body with rounded edges\n        union() {\n            // Central cylinder\n            cylinder(h=bottle_height*0.8, d=bottle_width, center=false);\n            \n            // Top neck transition\n            translate([0, 0, bottle_height*0.8])\n                cylinder(h=bottle_height*0.1, d1=bottle_width, d2=bottle_width*0.6, center=false);\n            \n            // Neck\n            translate([0, 0, bottle_height*0.9])\n                cylinder(h=bottle_height*0.08, d=bottle_width*0.6, center=false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=bottle_height-wall_thickness*2, d=bottle_width-wall_thickness*2, center=false);\n        \n        // Top opening\n        translate([0, 0, bottle_height-wall_thickness])\n            cylinder(h=wall_thickness+1, d=bottle_width*0.6-wall_thickness*2, center=false);\n    }\n}\n\n// Screw cap\nmodule cap() {\n    difference() {\n        union() {\n            // Main cap body\n            cylinder(h=8, d=bottle_width*0.7, center=false);\n            \n            // Grip ridges\n            for(i=[0:23]) {\n                rotate([0, 0, i*15])\n                    translate([bottle_width*0.7/2-1, -1, 0])\n                        cube([2, 2, 8]);\n            }\n        }\n        \n        // Internal threads (simplified)\n        translate([0, 0, -1])\n            cylinder(h=10, d=bottle_width*0.6+1, center=false);\n    }\n}\n\n// Handle grip on side\nmodule side_grip() {\n    translate([bottle_width/2+1, 0, bottle_height*0.4])\n        rotate([90, 0, 0])\n            difference() {\n                // Grip shape\n                cylinder(h=15, d=8, center=true);\n                \n                // Center hole\n                cylinder(h=16, d=4, center=true);\n            }\n}\n\n// Label recess\nmodule label_area() {\n    translate([-bottle_width/2-0.5, -bottle_depth/2, bottle_height*0.2])\n        cube([1, bottle_depth, bottle_height*0.5]);\n}\n\n// Base reinforcement ring\nmodule base_ring() {\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h=3, d=bottle_width+4, center=false);\n            cylinder(h=4, d=bottle_width, center=false);\n        }\n}\n\n// Assembly\ntranslate([0, 0, 3])\n    bottle_body();\n\ntranslate([0, 0, bottle_height+3])\n    cap();\n\ntranslate([0, 0, 3])\n    side_grip();\n\ntranslate([0, 0, 3])\n    label_area();\n\ntranslate([0, 0, 3])\n    base_ring();",
    "renders": true
  },
  {
    "household_item": "ammonia",
    "openscad_code": "// Ammonia (NH3) molecule – stylized but recognizable “ball-and-stick” model\n// Overall size ≈ 70 mm along the longest axis\n// 3D-printable: all spheres rest on the build plate or are bridged by cylinders  \n// No over-hangs > 45°, 2 mm wall thickness everywhere\n\n// ---------- parameters ----------\natom_d = 16;            // diameter of all atoms\nstick_d = 4;            // diameter of bonds\nwall = 2;               // minimum printable wall thickness\nscale_factor = 1.8;     // final scale up to reach 50-70 mm\n\n// ---------- basic colors ----------\n$fn = 30;               // good compromise between smoothness and facet count\n\n// ---------- atom module ----------\nmodule atom(d, col) {\n    color(col)\n    sphere(d=d);\n}\n\n// ---------- bond module ----------\n// Creates a cylinder between two points p0 and p1\nmodule stick(p0, p1, d) {\n    // vector between points\n    v = p1 - p0;\n    len = norm(v);\n    // rotation angles\n    phi   = atan2(v.y, v.x);\n    theta = acos(v.z / len);\n    translate(p0)\n    rotate([0, 0, phi])\n    rotate([0, theta, 0])\n    cylinder(h = len, d = d, $fn = 20);\n}\n\n// ---------- positions ----------\n// Nitrogen at origin\nN = [0, 0, 0];\n\n// Hydrogens in trigonal-pyramidal arrangement\n// N–H bond length ≈ 101 pm  → model length 30 mm\nbond_len = 30;\n\n// H positions generated by rotating around Z then tilting down\nangle = 120;\ntilt  = 70;  // degrees from vertical\nH1 = [\n    bond_len * sin(tilt) * cos(0),\n    bond_len * sin(tilt) * sin(0),\n   -bond_len * cos(tilt)\n];\nH2 = [\n    bond_len * sin(tilt) * cos(angle),\n    bond_len * sin(tilt) * sin(angle),\n   -bond_len * cos(tilt)\n];\nH3 = [\n    bond_len * sin(tilt) * cos(2*angle),\n    bond_len * sin(tilt) * sin(2*angle),\n   -bond_len * cos(tilt)\n];\n\n// ---------- build ----------\nunion() {\n    scale(scale_factor) {\n        // Nitrogen\n        atom(atom_d, \"blue\");\n\n        // Hydrogens\n        translate(H1) atom(atom_d, \"white\");\n        translate(H2) atom(atom_d, \"white\");\n        translate(H3) atom(atom_d, \"white\");\n\n        // Bonds\n        stick(N, H1, stick_d);\n        stick(N, H2, stick_d);\n        stick(N, H3, stick_d);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "vinegar",
    "openscad_code": "// Realistic 3D printable vinegar bottle (medium complexity)\n// Approx. 85 mm tall, 35 mm wide\n\n$fn = 50;  // Smooth curves\n\n// Bottle body\nmodule bottle_body() {\n    difference() {\n        // Main body - cylindrical with rounded shoulders\n        union() {\n            cylinder(h = 65, d = 32, center = false);\n            translate([0, 0, 62])\n                scale([1.2, 1.2, 0.6])\n                    sphere(d = 32);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 70, d = 28, center = false);\n    }\n}\n\n// Neck and cap area\nmodule neck() {\n    difference() {\n        // Tapered neck\n        cylinder(h = 12, d1 = 20, d2 = 15, center = false);\n        \n        // Thread for cap\n        for(i = [0:5:35]) {\n            rotate([0, 0, i])\n                translate([8, 0, 2])\n                    cube([2, 5, 1], center = true);\n        }\n    }\n}\n\n// Screw cap\nmodule cap() {\n    difference() {\n        // Main cap body\n        cylinder(h = 10, d = 18, center = false);\n        \n        // Internal threads\n        for(i = [0:5:35]) {\n            rotate([0, 0, i])\n                translate([6, 0, 2])\n                    cube([1.5, 3, 1.5], center = true);\n        }\n        \n        // Grip ridges on outside\n        for(i = [0:15:345]) {\n            rotate([0, 0, i])\n                translate([9.5, 0, 5])\n                    cube([1, 2, 8], center = true);\n        }\n    }\n}\n\n// Label area (slightly recessed)\nmodule label_area() {\n    translate([0, 16.5, 35])\n        difference() {\n            cube([30, 1, 25], center = true);\n            translate([0, 0.5, 0])\n                cube([28, 1, 23], center = true);\n        }\n}\n\n// Bottom ring for stability\nmodule bottom_ring() {\n    difference() {\n        cylinder(h = 3, d = 35, center = false);\n        cylinder(h = 3.5, d = 30, center = false);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Bottle assembly\n    union() {\n        bottle_body();\n        translate([0, 0, 65])\n            neck();\n        bottom_ring();\n    }\n    \n    // Cap (separate for printing)\n    translate([0, 0, 78])\n        cap();\n    \n    // Label recess\n    label_area();\n}",
    "renders": true
  },
  {
    "household_item": "degreaser",
    "openscad_code": "// Realistic degreaser spray can - medium complexity\n// Overall dimensions: ~55mm diameter, ~120mm height\n\n// Main body parameters\nbody_d = 50;        // Body diameter\nbody_h = 80;        // Body height\ntop_d = 45;         // Tapered top diameter\ntop_h = 15;         // Tapered top height\ncap_d = 40;         // Cap diameter\ncap_h = 20;         // Cap height\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\n// Nozzle parameters\nnozzle_r = 8;       // Nozzle radius\nnozzle_h = 12;      // Nozzle height\n\n// Base indentation parameters\nbase_indent = 5;    // Base indent depth\nbase_r = 15;        // Base indent radius\n\n// Label groove parameters\ngroove_w = 3;       // Groove width\ngroove_d = 1;       // Groove depth\ngroove_n = 8;       // Number of grooves\n\n// Helper module for rounded cylinder\nmodule rounded_cylinder(d, h) {\n    hull() {\n        translate([0, 0, 0]) sphere(d/2);\n        translate([0, 0, h]) sphere(d/2);\n    }\n}\n\n// Main body with tapered top\nmodule body() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h=body_h, d=body_d, $fn=100);\n            \n            // Tapered top\n            translate([0, 0, body_h]) \n                cylinder(h=top_h, d1=body_d, d2=top_d, $fn=100);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) \n            cylinder(h=body_h+top_h+2, d=body_d-2*wall_t, $fn=100);\n    }\n}\n\n// Base with indentations\nmodule base() {\n    difference() {\n        // Solid base\n        cylinder(h=wall_t*2, d=body_d, $fn=100);\n        \n        // Center indent\n        translate([0, 0, -1]) \n            cylinder(h=wall_t+2, d=base_r*2, $fn=50);\n        \n        // Side indents for grip\n        for(i=[0:2]) {\n            rotate([0, 0, i*120]) \n                translate([body_d/2 - base_indent, 0, -1]) \n                    cube([base_indent*2, base_indent, wall_t*2+2], center=true);\n        }\n    }\n}\n\n// Label grooves\nmodule label_grooves() {\n    for(i=[0:groove_n-1]) {\n        rotate([0, 0, i*(360/groove_n)]) {\n            translate([body_d/2 - groove_d/2, 0, body_h/2]) \n                cube([groove_d, groove_w, body_h*0.6], center=true);\n        }\n    }\n}\n\n// Spray cap\nmodule cap() {\n    difference() {\n        // Main cap shape\n        union() {\n            cylinder(h=cap_h, d=cap_d, $fn=100);\n            // Rounded top\n            translate([0, 0, cap_h]) \n                sphere(d=cap_d/2, $fn=100);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) \n            cylinder(h=cap_h+2, d=cap_d-2*wall_t, $fn=100);\n        \n        // Nozzle hole\n        translate([0, 0, cap_h]) \n            cylinder(h=nozzle_h, d=nozzle_r, $fn=50);\n    }\n}\n\n// Nozzle assembly\nmodule nozzle() {\n    union() {\n        // Main nozzle body\n        cylinder(h=nozzle_h, d=nozzle_r, $fn=50);\n        \n        // Spray tip\n        translate([0, 0, nozzle_h]) \n            cylinder(h=nozzle_h/2, d1=nozzle_r, d2=nozzle_r/2, $fn=50);\n        \n        // Trigger guard\n        translate([nozzle_r*1.2, 0, 0]) \n            rotate([90, 0, 0]) \n                difference() {\n                    cylinder(h=nozzle_r*2, d=wall_t*3, $fn=20);\n                    translate([0, 0, -1]) \n                        cylinder(h=nozzle_r*2+2, d=wall_t, $fn=20);\n                }\n    }\n}\n\n// Assembly\ntranslate([0, 0, wall_t*2]) {\n    // Base\n    base();\n    \n    // Body\n    translate([0, 0, wall_t*2]) body();\n    \n    // Label grooves\n    translate([0, 0, wall_t*2 + body_h*0.2]) label_grooves();\n    \n    // Cap\n    translate([0, 0, wall_t*2 + body_h + top_h]) cap();\n    \n    // Nozzle\n    translate([0, 0, wall_t*2 + body_h + top_h + cap_h]) nozzle();\n}",
    "renders": true
  },
  {
    "household_item": "sanitizer",
    "openscad_code": "// Hand-sanitizer bottle – realistic style, medium complexity\n// Overall size ≈ 110 mm (height), 3 mm wall thickness for printing\n\n$fn = 36;\n\n// Main assembly\nmodule sanitizerBottle() {\n    union() {\n        bottleBody();\n        pumpHead();\n        labelBand();\n    }\n}\n\n// Soft-curved bottle body\nmodule bottleBody() {\n    difference() {\n        // Outer shell\n        linear_extrude(height = 80, twist = 7, scale = [0.85,0.85])\n            offset(r = 3)\n                square([40, 20], center = true);\n\n        // Hollow inside\n        translate([0, 0, 3])\n            linear_extrude(height = 74, twist = 7, scale = [0.82,0.82])\n                offset(r = 3.1)\n                    square([37, 17], center = true);\n\n        // Flat base inside\n        translate([0, 0, -0.1])\n            cube([60, 40, 3.1], center = true);\n    }\n\n    // Base fillet ring\n    translate([0, 0, 0.5])\n        cylinder(h = 2, r1 = 21, r2 = 23);\n}\n\n// Pump assembly\nmodule pumpHead() {\n    union() {\n        // Pump neck\n        translate([0, 0, 80])\n            cylinder(h = 15, r1 = 10, r2 = 8);\n\n        // Shoulder\n        translate([0, 0, 95])\n            cylinder(h = 4, r = 11);\n\n        // Pump dome\n        translate([0, 0, 99])\n            sphere(d = 20);\n\n        // Nozzle\n        rotate([-90, 0, 0])\n            translate([0, 0, 10])\n                cylinder(h = 18, r1 = 5, r2 = 3);\n\n        // Spout tip\n        rotate([-90, 0, 0])\n            translate([0, 0, 28])\n                sphere(d = 3);\n    }\n}\n\n// Raised label band\nmodule labelBand() {\n    difference() {\n        // Band\n        translate([0, 0, 45])\n            cube([46, 26, 0.6], center = true);\n\n        // Recessed text area (faux label)\n        translate([0, 0, 45.3])\n            cube([42, 22, 0.3], center = true);\n    }\n\n    // Small ridges for grip\n    for (i = [-2:2]) {\n        translate([i * 7, 0, 45.4])\n            cube([2, 26, 0.3], center = true);\n    }\n}\n\nsanitizerBottle();",
    "renders": true
  },
  {
    "household_item": "disinfectant",
    "openscad_code": "// Disinfectant Spray Bottle - Realistic Style, Medium Complexity\n// Overall dimensions: ~50mm diameter, ~180mm height (scaled down for printing)\n\n$fn = 50;  // Smooth curves for printing\n\n// Main dimensions\nbottle_d = 40;\nbottle_h = 130;\nneck_d = 18;\ncap_h = 25;\nnozzle_len = 35;\nnozzle_d = 8;\ntrigger_w = 25;\ntrigger_h = 30;\n\nmodule bottle_body() {\n    difference() {\n        // Main bottle - slightly tapered\n        cylinder(h1=bottle_d, h2=bottle_d*0.9, h=bottle_h);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h1=bottle_d-4, h2=bottle_d*0.9-4, h=bottle_h);\n        \n        // Label indentation\n        translate([0, 0, bottle_h*0.4])\n            rotate([90, 0, 0])\n                cylinder(d=bottle_d+1, h=bottle_h*0.3, $fn=6);\n    }\n}\n\nmodule cap() {\n    // Trigger spray cap\n    union() {\n        // Main cap\n        cylinder(d=neck_d+4, h=cap_h);\n        \n        // Nozzle tube\n        translate([0, 0, cap_h-2])\n            rotate([90, 0, 0])\n                cylinder(d=nozzle_d, h=nozzle_len);\n        \n        // Trigger mechanism\n        translate([0, -neck_d/2-5, cap_h/2]) {\n            difference() {\n                // Trigger shape\n                cube([trigger_w, 8, trigger_h], center=true);\n                \n                // Finger groove\n                translate([0, 4, 0])\n                    cube([trigger_w-6, 10, trigger_h-10], center=true);\n            }\n        }\n        \n        // Safety clip\n        translate([0, neck_d/2+3, cap_h/2])\n            cube([8, 3, 15], center=true);\n    }\n}\n\nmodule bottle_neck() {\n    // Threaded neck\n    difference() {\n        cylinder(d=neck_d, h=15);\n        \n        // Hollow\n        cylinder(d=neck_d-4, h=15);\n        \n        // Threads (simplified)\n        for(i=[0:3:15]) {\n            translate([0, 0, i])\n                rotate([0, 0, i*30])\n                    cube([neck_d+1, 1, 1], center=true);\n        }\n    }\n}\n\nmodule base_details() {\n    // Bottom ring for stability\n    translate([0, 0, -1])\n        cylinder(d=bottle_d+4, h=2);\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Bottle base\n    bottle_body();\n    \n    // Base details\n    base_details();\n    \n    // Neck\n    translate([0, 0, bottle_h])\n        bottle_neck();\n    \n    // Cap\n    translate([0, 0, bottle_h+15])\n        cap();\n}\n\n// Small spray indicator arrow\ntranslate([0, nozzle_len/2, bottle_h+15+cap_h-2])\n    rotate([0, 90, 0])\n        cylinder(d=3, h=5);",
    "renders": true
  },
  {
    "household_item": "scrubber",
    "openscad_code": "// Realistic medium-complexity dish scrubber\n// Size: ~80 mm long, 45 mm wide, 35 mm thick\n// Safe for 3D printing – no steep overhangs, 1.5 mm walls\n\n// Overall dimensions\nscrub_len = 80;\nscrub_wid = 45;\nscrub_h   = 35;\nhandle_len = 40;\n\n// Wall / feature thicknesses\nwall = 1.5;\nbristle_d = 3;\nbristle_h = 7;\nrows = 6;\ncols = 10;\n\n// Main body shell – hollow underneath to save material\nmodule body_shell() {\n    difference() {\n        // Outer rounded block\n        hull() {\n            translate([ 5, 5, 0]) cylinder(r=5, h=scrub_h);\n            translate([ scrub_len-5, 5, 0]) cylinder(r=5, h=scrub_h);\n            translate([ scrub_len-5, scrub_wid-5, 0]) cylinder(r=5, h=scrub_h);\n            translate([ 5, scrub_wid-5, 0]) cylinder(r=5, h=scrub_h);\n        }\n        // Hollow cavity\n        translate([0, 0, -0.01])\n            cube([scrub_len, scrub_wid, scrub_h/2 + 0.02]);\n    }\n}\n\n// Handle grip with finger grooves\nmodule handle() {\n    translate([scrub_len - handle_len, -5, scrub_h/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Main handle bar\n        cylinder(h=handle_len + 10, r=9, $fn=32);\n        // Finger grooves\n        for(i=[0:3])\n            translate([i*10 + 5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=15, r1=8, r2=5, $fn=32);\n    }\n}\n\n// Bristles pad – grid of short cylinders\nmodule bristles() {\n    // Position pad near front bottom\n    translate([5, 5, 0])\n    for(x=[0:cols-1])\n        for(y=[0:rows-1])\n            translate([x*(scrub_len-10)/(cols-1),\n                       y*(scrub_wid-10)/(rows-1),\n                       0])\n                cylinder(d=bristle_d, h=bristle_h, $fn=16);\n}\n\n// Drain / hang hole on rear\nmodule hang_hole() {\n    translate([scrub_len/2, scrub_wid + 2, scrub_h - 5])\n    rotate([90, 0, 0])\n        cylinder(h=10, d=6, $fn=32);\n}\n\n// Assemble parts\nunion() {\n    body_shell();\n    handle();\n    bristles();\n    hang_hole();\n}",
    "renders": true
  },
  {
    "household_item": "scourer",
    "openscad_code": "// Realistic 3D-printable scourer (steel-wool style)\n// Roughly 70 mm diameter, 15 mm thick\n// Medium complexity, only basic primitives and boolean ops\n\n$fn = 24;\n\n// Overall dimensions\nscourer_d = 70;\nscourer_h = 15;\nwire_d = 1.0;           // diameter of single wire\nwire_step = 3.5;        // spacing between centers of parallel wires\nwall_thk = 1.5;         // printable wall thickness\n\nmodule single_wire(l, ang, z) {\n    // one crimped steel wire\n    rotate([0, 0, ang])\n    translate([0, 0, z])\n    union() {\n        // main straight segments\n        for (i = [0 : 2]) {\n            translate([0, -l/2 + i*l/3, 0])\n            rotate([90, 0, 0])\n            cylinder(d = wire_d, h = l/3, center = true);\n        }\n        // small bends (cylinders at 45°)\n        for (i = [1 : 2]) {\n            translate([0, -l/2 + i*l/3, 0])\n            rotate([90, 45, 0])\n            cylinder(d = wire_d, h = wire_d*1.5, center = true);\n            rotate([90, -45, 0])\n            cylinder(d = wire_d, h = wire_d*1.5, center = true);\n        }\n    }\n}\n\nmodule wire_layer(ang) {\n    // one planar layer of criss-cross wires\n    // wires along X\n    for (y = [-scourer_d/2 : wire_step : scourer_d/2]) {\n        translate([0, y, 0])\n        single_wire(scourer_d, ang, 0);\n    }\n    // wires along Y (rotated 90°)\n    for (x = [-scourer_d/2 : wire_step : scourer_d/2]) {\n        translate([x, 0, 0])\n        rotate([0, 0, 90])\n        single_wire(scourer_d, ang, 0);\n    }\n}\n\nmodule scourer_body() {\n    // build up layers of wires rotated each time\n    layers = floor(scourer_h / wire_step);\n    for (i = [0 : layers-1]) {\n        z = -scourer_h/2 + i * wire_step + wire_step/2;\n        translate([0, 0, z])\n        wire_layer(i*30);   // slight rotation per layer\n    }\n}\n\nmodule reinforcing_ring() {\n    // thin printable ring to hold wires together at the edges\n    difference() {\n        cylinder(d = scourer_d + wall_thk*2, h = scourer_h, center = true);\n        cylinder(d = scourer_d - wall_thk*2, h = scourer_h + 0.1, center = true);\n    }\n}\n\n// Final assembly\nunion() {\n    // main wire mesh\n    scourer_body();\n\n    // edge reinforcement for printability and handling\n    reinforcing_ring();\n}",
    "renders": true
  },
  {
    "household_item": "broomstick",
    "openscad_code": "// Realistic 3D-printable broomstick\n// Overall length ~85 mm, printable without supports\n\n// Basic parameters\nhandle_length = 60;\nhandle_radius = 3;\nbristle_length = 25;\nbristle_radius = 12;\nwall_thickness = 1.2;\n\n// Main broomstick module\nmodule broomstick() {\n    // Handle with slight taper\n    translate([0, 0, handle_length/2])\n        cylinder(h=handle_length, r1=handle_radius, r2=handle_radius*0.9, $fn=32);\n    \n    // Metal ferrule (band around handle end)\n    translate([0, 0, handle_length])\n        cylinder(h=5, r=handle_radius+1, $fn=32);\n    \n    // Bristle base (solid)\n    translate([0, 0, handle_length+2.5])\n        cylinder(h=5, r=bristle_radius-3, $fn=32);\n    \n    // Bristle holder (hollow cylinder)\n    difference() {\n        translate([0, 0, handle_length+7.5])\n            cylinder(h=bristle_length, r=bristle_radius, $fn=32);\n        \n        // Hollow out bristle holder\n        translate([0, 0, handle_length+7.5-wall_thickness])\n            cylinder(h=bristle_length+wall_thickness, r=bristle_radius-wall_thickness, $fn=32);\n    }\n    \n    // Individual bristles in radial pattern\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([bristle_radius-4, 0, handle_length+7.5])\n                rotate([90, 0, 0])\n                    cylinder(h=bristle_length-3, r=0.5, $fn=6);\n    }\n    \n    // Additional bristles in inner ring\n    for(i = [7.5:15:359]) {\n        rotate([0, 0, i])\n            translate([bristle_radius-6, 0, handle_length+7.5])\n                rotate([90, 0, 0])\n                    cylinder(h=bristle_length-3, r=0.4, $fn=6);\n    }\n    \n    // Handle grip rings for realism\n    for(pos = [10:15:handle_length-10]) {\n        translate([0, 0, pos])\n            difference() {\n                cylinder(h=1.5, r=handle_radius+0.2, $fn=32);\n                cylinder(h=1.5, r=handle_radius-0.3, $fn=32);\n            }\n    }\n    \n    // Broom label tag\n    translate([handle_radius+0.5, 0, handle_length/2])\n        rotate([0, 90, 0])\n            cube([2, 8, 3]);\n}\n\n// Generate the model\nbroomstick();",
    "renders": true
  },
  {
    "household_item": "dustpan",
    "openscad_code": "$fn = 36;\n\n// Overall dimensions\ndustpan_width = 90;\ndustpan_depth = 85;\ndustpan_height = 30;\nwall_thickness = 2.2;\n\nmodule dustpan_body() {\n    difference() {\n        // Main scoop shape - tapered box\n        hull() {\n            // Front lip (wide)\n            translate([0, dustpan_depth/2, 0])\n                cube([dustpan_width, wall_thickness, dustpan_height], center=true);\n                \n            // Back (narrow)\n            translate([0, -dustpan_depth/2, 0])\n                cube([dustpan_width*0.6, wall_thickness, dustpan_height*1.2], center=true);\n                \n            // Bottom front\n            translate([0, dustpan_depth/2, -dustpan_height/2+1])\n                cube([dustpan_width, wall_thickness, wall_thickness], center=true);\n                \n            // Bottom back\n            translate([0, -dustpan_depth/2, -dustpan_height/2+1])\n                cube([dustpan_width*0.6, wall_thickness, wall_thickness], center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, dustpan_depth/2 - 5, 1])\n            scale([0.8, 0.9, 0.8])\n            cube([dustpan_width, dustpan_depth, dustpan_height], center=true);\n    }\n}\n\nmodule handle_mount() {\n    // Handle socket cylinder\n    difference() {\n        // Outer cylinder\n        translate([0, -dustpan_depth/2 + 5, dustpan_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=25, r1=7, r2=6);\n            \n        // Inner hole for handle\n        translate([0, -dustpan_depth/2 + 5, dustpan_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=30, r=4.5);\n    }\n    \n    // Reinforcement ribs\n    for(i=[-1, 1]) {\n        translate([i * 10, -dustpan_depth/2 + 5, dustpan_height/2 - 5])\n            rotate([0, 30*i, 0])\n            cube([wall_thickness, 15, 10]);\n    }\n}\n\nmodule front_lip() {\n    // Thin leading edge for sweeping\n    difference() {\n        // Tapered edge\n        translate([0, dustpan_depth/2 + 0.5, -1])\n            cube([dustpan_width + 2, 2, 3], center=true);\n            \n        // Bevel underside\n        translate([0, dustpan_depth/2 + 1.5, -2])\n            rotate([25, 0, 0])\n            cube([dustpan_width + 5, 5, 5], center=true);\n    }\n}\n\nmodule side_walls() {\n    // Curved side walls\n    difference() {\n        // Left wall\n        translate([-dustpan_width/2 - wall_thickness/2, 0, dustpan_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=dustpan_depth, r=dustpan_height/2, center=true);\n            \n        // Cut excess\n        translate([-dustpan_width/2 - 10, 0, dustpan_height])\n            cube([20, dustpan_depth + 20, dustpan_height + 10], center=true);\n            \n        // Hollow\n        translate([-dustpan_width/2, 0, dustpan_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=dustpan_depth, r=dustpan_height/2 - wall_thickness, center=true);\n    }\n    \n    // Right wall (mirror of left)\n    mirror([1, 0, 0])\n        side_walls();\n}\n\n// Assembly\nunion() {\n    dustpan_body();\n    handle_mount();\n    front_lip();\n    side_walls();\n    \n    // Bottom reinforcement strips\n    for(y=[-dustpan_depth/2 + 10, -dustpan_depth/2 + 25, -dustpan_depth/2 + 40]) {\n        translate([0, y, -dustpan_height/2 + wall_thickness])\n            cube([dustpan_width * (1 - (y + dustpan_depth/2)/dustpan_depth * 0.3), wall_thickness*1.5, wall_thickness], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "gloves",
    "openscad_code": "// Realistic 3D printable gloves - medium complexity\n// Wall thickness = 2 mm for printability\n\n$fn = 50;\nwall = 2;\n\nmodule finger_segment(len, dia, taper) {\n    difference() {\n        cylinder(h = len, d1 = dia, d2 = dia * taper, center = false);\n        translate([0, 0, wall]) \n            cylinder(h = len - wall*2, d1 = dia - wall*2, d2 = dia*taper - wall*2, center = false);\n    }\n}\n\nmodule finger(len, base_dia, taper = 0.85) {\n    segments = 3;\n    segment_len = len / segments;\n    for(i = [0:segments-1]) {\n        translate([0, 0, i * segment_len]) \n            finger_segment(segment_len, base_dia * pow(taper, i), taper);\n    }\n}\n\nmodule thumb() {\n    rotate([0, 15, 0]) \n    translate([12, -15, 8]) \n    rotate([0, 0, -30]) \n        finger(25, 10, 0.8);\n}\n\nmodule palm() {\n    difference() {\n        hull() {\n            translate([-5, -20, 0]) sphere(d = 20);\n            translate([15, -15, 0]) sphere(d = 18);\n            translate([25, 0, 0]) sphere(d = 15);\n            translate([20, 15, 0]) sphere(d = 12);\n            translate([5, 20, 0]) sphere(d = 10);\n            translate([-10, 10, 0]) sphere(d = 15);\n        }\n        scale([0.8, 0.8, 0.8]) \n        translate([0, 0, wall]) \n            hull() {\n                translate([-5, -20, 0]) sphere(d = 20);\n                translate([15, -15, 0]) sphere(d = 18);\n                translate([25, 0, 0]) sphere(d = 15);\n                translate([20, 15, 0]) sphere(d = 12);\n                translate([5, 20, 0]) sphere(d = 10);\n                translate([-10, 10, 0]) sphere(d = 15);\n            }\n    }\n}\n\nmodule fingers() {\n    // Index finger\n    translate([20, 0, 0]) \n        finger(30, 9);\n    \n    // Middle finger\n    translate([15, 10, 2]) \n        finger(32, 9.5);\n    \n    // Ring finger\n    translate([10, 18, 1]) \n        finger(28, 8.5);\n    \n    // Pinky\n    translate([5, 25, 0]) \n        finger(22, 7.5);\n}\n\nmodule cuff() {\n    difference() {\n        cylinder(h = 25, d1 = 40, d2 = 35, center = false);\n        translate([0, 0, wall]) \n            cylinder(h = 25 - wall*2, d1 = 40 - wall*2, d2 = 35 - wall*2, center = false);\n    }\n}\n\nmodule glove_left() {\n    union() {\n        translate([0, 0, 25]) palm();\n        fingers();\n        thumb();\n        translate([0, 0, -5]) cuff();\n    }\n}\n\n// Main assembly\nglove_left();\n\n// Optional: mirror for right glove\n// mirror([1, 0, 0]) glove_left();",
    "renders": true
  },
  {
    "household_item": "mask",
    "openscad_code": "// Realistic Medium-Complexity Mask (≈75 mm tall, 3 mm wall)\n\n$fn = 48;               // global resolution\n\n// Overall mask module\nmodule mask() {\n    difference() {\n        union() {\n            // Outer shell (face surface)\n            face_shell();\n\n            // Nose ridge\n            nose_bridge();\n\n            // Eyebrow ridges\n            eyebrow(true);   // left\n            eyebrow(false);  // right\n\n            // Lips volume\n            lips();\n        }\n\n        // Eye holes\n        eye_socket(true);   // left\n        eye_socket(false);  // right\n\n        // Breathing holes\n        nostril_holes();\n\n        // Mounting holes for straps (2 mm diameter)\n        translate([-30, -45, 0]) cylinder(h = 20, d = 2, center = true);\n        translate([ 30, -45, 0]) cylinder(h = 20, d = 2, center = true);\n    }\n}\n\n// Main face curved shell\nmodule face_shell() {\n    // Ellipsoid base\n    scale([1, 1.1, 1.25])\n        sphere(d = 75);\n\n    // Flatten back slightly for printing\n    translate([0, 0, -40])\n        cube([80, 90, 80], center = true);\n}\n\n// Raised nose bridge\nmodule nose_bridge() {\n    translate([0, 8, -5])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 18, d2 = 12);\n}\n\n// Eyebrow ridge module with loop for texture lines\nmodule eyebrow(left = true) {\n    x = left ? -22 : 22;\n    translate([x, 20, 3]) {\n        rotate([5, 0, left ? 10 : -10])\n            cube([20, 6, 2], center = true);\n\n        // Texture ridges\n        for (i = [-2:2]) {\n            translate([i*3.5, 0, 1])\n                cube([2, 6, 1], center = true);\n        }\n    }\n}\n\n// Lips volume\nmodule lips() {\n    translate([0, -25, -15])\n        scale([1.2, 0.6, 0.4])\n            sphere(d = 30);\n}\n\n// Eye socket cutout\nmodule eye_socket(left = true) {\n    x = left ? -22 : 22;\n    translate([x, 15, 5])\n        rotate([0, 10, 0])\n            scale([1, 1.4, 1])\n                sphere(d = 20);\n}\n\n// Nostril holes\nmodule nostril_holes() {\n    for (x = [-5, 5]) {\n        translate([x, 5, -12])\n            rotate([0, 90, 0])\n                cylinder(h = 15, d = 4, center = true);\n    }\n}\n\n// Render the mask\nmask();",
    "renders": true
  },
  {
    "household_item": "spray",
    "openscad_code": "// Realistic spray bottle - medium complexity\n// Overall dimensions: ~55mm diameter, ~85mm tall\n\n$fn = 36;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 60, d = 48);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h = 58, d = 44);\n        \n        // Rounded bottom\n        translate([0, 0, -0.1])\n            sphere(d = 48);\n    }\n}\n\n// Neck with threads\nmodule neck() {\n    difference() {\n        // Main neck\n        cylinder(h = 12, d = 20);\n        \n        // Inner hole\n        translate([0, 0, 2])\n            cylinder(h = 10, d = 16);\n    }\n    \n    // Threads - simplified as ridges\n    for(i = [0:3])\n        translate([0, 0, 2 + i * 2.5])\n            cylinder(h = 1.5, d = 22, $fn = 60);\n}\n\n// Trigger sprayer mechanism\nmodule sprayer_head() {\n    union() {\n        // Base that screws onto neck\n        difference() {\n            cylinder(h = 8, d = 24);\n            translate([0, 0, 2])\n                cylinder(h = 6, d = 20);\n        }\n        \n        // Main body\n        translate([0, -8, 8])\n            cube([30, 16, 12], center = true);\n        \n        // Trigger lever\n        translate([0, -17, 8])\n            difference() {\n                cube([26, 10, 8], center = true);\n                translate([0, -2, -1])\n                    cube([24, 8, 6], center = true);\n            }\n        \n        // Nozzle\n        translate([15, 0, 8])\n            rotate([0, 90, 0])\n                cylinder(h = 8, d = 6);\n        \n        // Tube connection point\n        translate([0, 0, -2])\n            cylinder(h = 4, d = 4);\n    }\n}\n\n// Suction tube\nmodule suction_tube() {\n    translate([0, 0, -30])\n        cylinder(h = 60, d = 4);\n}\n\n// Assembly\ntranslate([0, 0, 10])\n    bottle_body();\n\ntranslate([0, 0, 70])\n    neck();\n\ntranslate([0, 0, 82])\n    sprayer_head();\n\ntranslate([0, 0, 80])\n    suction_tube();",
    "renders": true
  },
  {
    "household_item": "nozzle",
    "openscad_code": "// Realistic 3D-printable nozzle, medium complexity (~60 mm tall)\n// All angles <= 45°, no support needed, 1 mm walls\n\n$fn = 36; // smooth curves\n\n// overall dimensions\nnozzle_height = 60;\nthread_diameter = 20;\nhex_size = 30;\nhex_height = 7;\ntip_diameter = 1.5;\n\nmodule nozzle() {\n    difference() {\n        union() {\n            // hex flange (bottom)\n            translate([0, 0, 0])\n                cylinder(h = hex_height, r = hex_size / cos(30) / 2, $fn = 6);\n\n            // main body cone with slight taper\n            translate([0, 0, hex_height])\n                cylinder(h1 = 15, h2 = 10, r1 = thread_diameter / 2, r2 = 12);\n\n            // cylindrical shoulder\n            translate([0, 0, hex_height + 15])\n                cylinder(h = 10, r = 12);\n\n            // upper cone taper\n            translate([0, 0, hex_height + 25])\n                cylinder(h1 = 10, h2 = 5, r1 = 12, r2 = 8);\n\n            // narrow neck\n            translate([0, 0, hex_height + 35])\n                cylinder(h = 5, r = 8);\n\n            // final taper to tip\n            translate([0, 0, hex_height + 40])\n                cylinder(h1 = 5, h2 = 15, r1 = 8, r2 = tip_diameter);\n\n            // external threads (simple ridges)\n            for (i = [0 : 5 : 10]) {\n                rotate([0, 0, i * 60])\n                    translate([0, thread_diameter / 2 - 0.5, hex_height + 2])\n                        cube([1, 1, 11], center = true);\n            }\n        }\n\n        // central flow channel\n        translate([0, 0, -1])\n            cylinder(h = nozzle_height + 2, r1 = 3, r2 = tip_diameter / 2 + 0.2);\n\n        // hex socket on bottom\n        translate([0, 0, -0.1])\n            cylinder(h = hex_height + 0.2, r = 10, $fn = 6);\n\n        // lightening pockets (optional weight saving)\n        for (a = [0 : 60 : 300]) {\n            rotate([0, 0, a])\n                translate([hex_size * 0.4, 0, hex_height / 2])\n                    cylinder(h = hex_height, r = 4);\n        }\n    }\n}\n\n// render the nozzle\nnozzle();",
    "renders": true
  },
  {
    "household_item": "hose",
    "openscad_code": "// Realistic Garden Hose with Nozzle\n// Medium complexity, 3D printable, ~80mm long\n\n// Parameters\n$fn = 50;\nwall = 1.5;              // wall thickness\ndiam_outer = 8;          // hose outer diameter\ndiam_inner = 5;          // hose inner diameter\nhose_len = 60;           // hose body length\ncoil_turns = 5;          // coil segments\ncoil_height = 4;         // coil ridge height\ncoil_width = 2;          // coil ridge width\nnozzle_len = 15;         // nozzle length\nthreads = 6;             // thread segments\n\n// Hose body with coil pattern\nmodule hose_body() {\n    difference() {\n        // main tube\n        cylinder(h = hose_len, d = diam_outer, center = true);\n        \n        // hollow core\n        translate([0, 0, -hose_len/2 - 1])\n            cylinder(h = hose_len + 2, d = diam_inner);\n    }\n    \n    // coil ridges\n    for(i = [0 : coil_turns - 1]) {\n        rotate([0, 90, 0]) \n            translate([0, 0, -hose_len/2 + i * hose_len/coil_turns]) \n                rotate_extrude(angle = 360, $fn = 50) {\n                    translate([diam_outer/2, 0, 0])\n                        square([coil_width, coil_height]);\n                }\n    }\n}\n\n// Threaded end for nozzle attachment\nmodule hose_end() {\n    difference() {\n        cylinder(h = 5, d = diam_outer + 2, center = true);\n        \n        translate([0, 0, -3])\n            cylinder(h = 6, d = diam_inner);\n            \n        // hex flats for wrench\n        for(i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n                translate([diam_outer/2 + 1, 0, 0])\n                    cube([diam_outer + 2, 0.1, 5], center = true);\n        }\n    }\n}\n\n// Realistic nozzle\nmodule nozzle() {\n    union() {\n        // main nozzle body\n        translate([0, 0, hose_len/2 + nozzle_len/2 + 2.5]) {\n            cylinder(h = nozzle_len, d = diam_outer + 4);\n            \n            // grip ring\n            translate([0, 0, 2])\n                difference() {\n                    cylinder(h = 4, d = diam_outer + 6);\n                    cylinder(h = 4.5, d = diam_outer + 2);\n                }\n                \n            // threads inside\n            for(i = [0 : threads - 1]) {\n                rotate([0, 0, i * 360/threads])\n                    translate([diam_outer/2 + 1, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = 3, d = 1, $fn = 6);\n            }\n            \n            // outlet\n            translate([0, 0, nozzle_len - 1])\n                cylinder(h = 3, d1 = diam_outer + 2, d2 = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    hose_body();\n    translate([0, 0, hose_len/2 + 2.5]) hose_end();\n    nozzle();\n}\n\n// Optional support base for printing\ntranslate([0, 0, -hose_len/2 - 5])\n    cube([diam_outer + 4, 2, 1], center = true);",
    "renders": true
  },
  {
    "household_item": "wiper",
    "openscad_code": "// Realistic Wiper Blade Assembly\n// Medium complexity, 3D-printable with no overhangs\n\n// Global dimensions\nwiper_length = 70;\nwiper_width = 5;\nwiper_height = 4;\narm_length = 45;\narm_diameter = 6;\nbase_diameter = 12;\nbase_height = 8;\n\n// Wiper blade module\nmodule wiper_blade() {\n    // Main rubber blade body\n    difference() {\n        // Main blade\n        translate([0, 0, -wiper_height/2])\n            cube([wiper_length, wiper_width, wiper_height], center=true);\n        \n        // Tapered edge\n        translate([wiper_length/2 - 3, 0, -wiper_height/2])\n            rotate([0, 45, 0])\n            cube([6, wiper_width+1, wiper_height+1], center=true);\n        \n        // Front edge taper\n        translate([-wiper_length/2 + 3, 0, -wiper_height/2])\n            rotate([0, -45, 0])\n            cube([6, wiper_width+1, wiper_height+1], center=true);\n    }\n    \n    // Wiper element (thin wiping edge)\n    translate([0, 0, -wiper_height])\n        cube([wiper_length-4, 0.5, 1], center=true);\n}\n\n// Wiper arm connector\nmodule arm_connector() {\n    // Base cylinder\n    cylinder(h=base_height, d=base_diameter, $fn=32);\n    \n    // Top cone for smooth transition\n    translate([0, 0, base_height])\n        cylinder(h=3, d1=base_diameter, d2=arm_diameter, $fn=32);\n}\n\n// Wiper arm segments\nmodule arm_segment(length, diameter) {\n    rotate([90, 0, 0])\n        cylinder(h=length, d=diameter, $fn=16);\n}\n\n// Joint between arm segments\nmodule joint(diameter) {\n    sphere(d=diameter*1.4, $fn=16);\n}\n\n// Spring mechanism housing\nmodule spring_housing() {\n    // Main housing body\n    translate([-8, 0, 0])\n        cube([16, 8, 6], center=true);\n    \n    // Cylindrical pivot\n    rotate([90, 0, 0])\n        cylinder(h=10, d=4, center=true);\n}\n\n// Mounting holes for screws\nmodule mounting_holes() {\n    for(i = [-1, 1]) {\n        translate([i * 4, 0, base_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=base_diameter, d=3, center=true);\n    }\n}\n\n// Complete wiper assembly\nmodule wiper_assembly() {\n    // Wiper blade\n    wiper_blade();\n    \n    // Connector assembly\n    translate([0, 0, wiper_height/2 + base_height/2])\n        arm_connector();\n    \n    // Spring housing\n    translate([0, wiper_width/2 + 4, wiper_height/2 + 3])\n        spring_housing();\n    \n    // First arm segment\n    translate([0, 0, wiper_height/2 + base_height + arm_diameter/2])\n        rotate([90, 0, 0])\n        arm_segment(arm_length*0.6, arm_diameter);\n    \n    // Joint\n    translate([0, 0, wiper_height/2 + base_height + arm_length*0.6 + arm_diameter/2])\n        joint(arm_diameter);\n    \n    // Second arm segment (angled)\n    translate([0, 0, wiper_height/2 + base_height + arm_length*0.6 + arm_diameter])\n        rotate([120, 0, 0])\n        arm_segment(arm_length*0.4, arm_diameter*0.8);\n    \n    // Mounting holes\n    difference() {\n        children();\n        mounting_holes();\n    }\n}\n\n// Generate the assembly\nwiper_assembly();",
    "renders": true
  },
  {
    "household_item": "shampoo",
    "openscad_code": "// Medium-complexity realistic shampoo bottle\n// Designed for 3D printing – no overhangs, 1 mm wall thickness\n\n// Overall dimensions\nheight = 90;      // mm\nbody_d = 38;      // mm\ncap_d = 32;       // mm\nwall = 1.2;       // mm\n\nmodule bottle() {\n    // Main bottle body – hollow cylinder with rounded bottom\n    difference() {\n        union() {\n            // Cylindrical upper part\n            cylinder(h = height * 0.75, d = body_d, $fn = 64);\n            // Rounded bottom (hemisphere)\n            translate([0, 0, -body_d/2])\n                scale([1, 1, 0.5])\n                    sphere(d = body_d, $fn = 64);\n        }\n        // Hollow cavity\n        cylinder(h = height * 0.75 + wall*2, d = body_d - 2*wall, $fn = 64);\n        translate([0, 0, -body_d/2 + wall])\n            scale([1, 1, 0.5])\n                sphere(d = body_d - 2*wall, $fn = 64);\n    }\n\n    // Neck ring\n    translate([0, 0, height * 0.75])\n        difference() {\n            cylinder(h = 8, d = cap_d + 2*wall, $fn = 64);\n            cylinder(h = 8.1, d = cap_d, $fn = 64);\n        }\n\n    // Threads inside neck\n    threads();\n}\n\nmodule threads() {\n    // Simple external threads on neck\n    neck_h = 8;\n    neck_r = cap_d/2 - wall;\n    thread_turns = 4;\n    for (i = [0 : thread_turns-1]) {\n        translate([0, 0, height * 0.75 + i * (neck_h/thread_turns)])\n            rotate([0, 0, i * 360/thread_turns])\n                cylinder(h = 1, d = neck_r * 2 + 0.5, $fn = 64);\n    }\n}\n\nmodule cap() {\n    // Snap-on cap\n    difference() {\n        // Outer cap shape\n        union() {\n            cylinder(h = 12, d = cap_d, $fn = 64);\n            // Gradual taper top\n            translate([0, 0, 12])\n                cylinder(h1 = 0, h2 = 4, d1 = cap_d, d2 = cap_d - 6, $fn = 64);\n        }\n        // Inner cavity\n        cylinder(h = 12, d = cap_d - 2*wall, $fn = 64);\n        translate([0, 0, 12])\n            cylinder(h1 = 0, h2 = 4, d1 = cap_d - 2*wall, d2 = cap_d - 6 - 2*wall, $fn = 64);\n\n        // Internal threads\n        neck_r = cap_d/2 - wall;\n        thread_turns = 4;\n        for (i = [0 : thread_turns-1]) {\n            translate([0, 0, i * (12/thread_turns)])\n                rotate([0, 0, i * 360/thread_turns])\n                    cylinder(h = 1, d = neck_r * 2 - 0.5, $fn = 64);\n        }\n    }\n\n    // Flip-top lid hinge\n    hinge_w = 16;\n    hinge_r = 2.5;\n    translate([0, cap_d/2 - hinge_r, 12 + 4 - hinge_r])\n        rotate([90, 0, 0])\n            cylinder(h = hinge_w, r = hinge_r, $fn = 32);\n}\n\n// Label recess\nmodule label() {\n    label_h = 25;\n    label_w = 30;\n    translate([0, body_d/2 - 0.1, height * 0.5])\n        rotate([0, 90, 0])\n            cube([label_w, label_h, 0.5], center = true);\n}\n\n// Assembly\nbottle();\ntranslate([0, 0, height * 0.75 + 8])\n    cap();\ndifference() {\n    union() {\n        // Duplicate bottle for label cutout\n        translate([0, 0, 0])\n            cylinder(h = height * 0.75, d = body_d, $fn = 64);\n        translate([0, 0, -body_d/2])\n            scale([1, 1, 0.5])\n                sphere(d = body_d, $fn = 64);\n    }\n    // Label recess\n    label();\n}",
    "renders": true
  },
  {
    "household_item": "rinse",
    "openscad_code": "// Realistic 3D printable rinse bottle\n// Overall height ~85 mm, fits on most printers\n\n// Wall thickness for printability\nwall = 1.5;\n\n// Main bottle body\ndifference() {\n    // Smooth rounded bottle\n    union() {\n        // Main cylinder body\n        cylinder(h = 60, r1 = 20, r2 = 22, $fn = 64);\n        \n        // Rounded top shoulder\n        translate([0, 0, 60])\n            cylinder(h = 10, r1 = 22, r2 = 20, $fn = 64);\n        \n        // Neck\n        translate([0, 0, 70])\n            cylinder(h = 15, r = 10, $fn = 32);\n    }\n    \n    // Hollow interior\n    translate([0, 0, -1])\n        cylinder(h = 87, r = 18.5, $fn = 32);\n    \n    // Flat bottom opening\n    translate([0, 0, -1])\n        cube([40, 40, 1], center = true);\n}\n\n// Cap with threads\ndifference() {\n    union() {\n        // Cap main body\n        cylinder(h = 12, r = 12, $fn = 32);\n        \n        // Cap grip ridges\n        for (i = [0 : 30 : 330]) {\n            rotate([0, 0, i])\n                translate([11.5, 0, 0])\n                    cube([1, 0.5, 12], center = true);\n        }\n    }\n    \n    // Thread cavity\n    cylinder(h = 12, r = 9.5, $fn = 32);\n}\n\n// Cap positioned on bottle\ntranslate([0, 0, 85]) {\n    cap();\n}\n\n// Rinse spout\nmodule spout() {\n    difference() {\n        union() {\n            // Main spout cylinder\n            translate([0, 0, 85])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, r = 5, $fn = 32);\n            \n            // Tapered nozzle\n            translate([0, 25, 85])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, r1 = 5, r2 = 3, $fn = 32);\n        }\n        \n        // Hollow spout\n        translate([0, 0, 85])\n            rotate([90, 0, 0])\n                cylinder(h = 35, r = 3.5, $fn = 32);\n    }\n}\n\n// Label area\ndifference() {\n    // Slightly recessed label panel\n    translate([0, 22, 30])\n        cube([35, 0.5, 40], center = true);\n    \n    // Actual recess for label\n    translate([0, 22.5, 30])\n        cube([32, 0.5, 36], center = true);\n}\n\n// Add measurement lines on side\nmodule measurement_lines() {\n    for (i = [1 : 1 : 5]) {\n        translate([-19, 0, i * 10])\n            cube([3, wall, 0.5]);\n    }\n}\n\nmeasurement_lines();\nmirror([1, 0, 0]) measurement_lines();\n\n// Bottom grip ridges\nmodule bottom_grip() {\n    for (i = [0 : 20 : 340]) {\n        rotate([0, 0, i])\n            translate([19, 0, 0])\n                cube([1.5, 0.8, 2], center = true);\n    }\n}\n\ntranslate([0, 0, 0.5])\n    bottom_grip();",
    "renders": true
  },
  {
    "household_item": "deodorizer",
    "openscad_code": "// Realistic Deodorizer Stick\n// Medium complexity model with functional details\n\n// Main parameters\n$fn = 50;\nbody_width = 18;\nbody_depth = 18;\nbody_height = 80;\ncap_height = 25;\ndial_height = 8;\nbase_height = 5;\nscrew_thread_height = 15;\n\n// Module for screw threads\nmodule screw_threads(radius, height, turns=10) {\n    difference() {\n        // Main cylinder\n        cylinder(h=height, r=radius + 1.5);\n        \n        // Thread cuts\n        for (i = [0:turns]) {\n            rotate([0, 0, i * 36])\n            translate([radius, 0, i * height/turns])\n            rotate([0, 90, 0])\n            cylinder(h=radius + 2, r=0.5, $fn=3);\n        }\n    }\n}\n\n// Deodorant stick base module\nmodule base_assembly() {\n    union() {\n        // Bottom dial\n        translate([0, 0, 0])\n        cylinder(h=dial_height, r=body_width/2 + 2);\n        \n        // Grip ridges on dial\n        for (i = [0:19]) {\n            rotate([0, 0, i * 18])\n            translate([body_width/2 + 1.5, 0, dial_height/2])\n            cube([2, 1, dial_height - 1], center=true);\n        }\n        \n        // Threaded base\n        translate([0, 0, dial_height])\n        screw_threads(body_width/2 - 1, screw_thread_height);\n        \n        // Solid base\n        translate([0, 0, dial_height + screw_thread_height])\n        cylinder(h=base_height, r=body_width/2 - 1);\n    }\n}\n\n// Main body tube\nmodule body_tube() {\n    difference() {\n        // Outer shell\n        cylinder(h=body_height, r=body_width/2);\n        \n        // Inner cavity\n        cylinder(h=body_height - 5, r=body_width/2 - 2);\n        \n        // Top opening\n        translate([0, 0, body_height - 5])\n        cylinder(h=5, r=body_width/2 - 1.5);\n    }\n}\n\n// Deodorant product stick\nmodule product_stick() {\n    // Main stick\n    translate([0, 0, body_height - 5])\n    cylinder(h=25, r=body_width/2 - 2.5);\n    \n    // Rounded top\n    translate([0, 0, body_height + 20])\n    scale([1, 1, 0.5])\n    sphere(r=body_width/2 - 2.5);\n}\n\n// Cap with holes\nmodule cap() {\n    difference() {\n        // Main cap shape\n        translate([0, 0, body_height])\n        cylinder(h=cap_height, r=body_width/2 + 1.5);\n        \n        // Inner cavity\n        translate([0, 0, body_height + 2])\n        cylinder(h=cap_height - 2, r=body_width/2 + 0.5);\n        \n        // Top dome\n        translate([0, 0, body_height + cap_height])\n        scale([1, 1, 0.3])\n        sphere(r=body_width/2 + 1.5);\n        \n        // Ventilation holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([body_width/2 - 1, 0, body_height + cap_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=body_width/2 + 2, r=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    base_assembly();\n    \n    // Body tube\n    translate([0, 0, dial_height])\n    body_tube();\n    \n    // Product stick (lowered for storage)\n    translate([0, 0, -15])\n    product_stick();\n    \n    // Cap\n    cap();\n}",
    "renders": true
  },
  {
    "household_item": "absorbent",
    "openscad_code": "// Realistic Kitchen Sponge (Absorbent)\n// Dimensions: 90 x 60 x 25 mm (medium complexity)\n\n// Main sponge body dimensions\nsponge_w = 90;\nsponge_h = 60;\nsponge_d = 25;\n\n// Sponge pores\npore_size = 3.5;\npore_spacing = 7;\npore_depth = sponge_d * 0.7;\n\n// Scrubbing surface\nscrub_height = 3;\nscrub_width = 1.5;\nscrub_spacing = 2;\n\nmodule sponge_body() {\n    // Main rectangular sponge\n    difference() {\n        color([0.9, 0.8, 0.2])  // Yellow color\n        cube([sponge_w, sponge_h, sponge_d], center=true);\n        \n        // Create rounded edges\n        translate([0, 0, sponge_d/2])\n        scale([1, 1, 0.5])\n        sphere(d=sponge_d/2, $fn=32);\n        \n        // Add pores on top surface\n        for(x = [-sponge_w/2 + pore_spacing : pore_spacing : sponge_w/2 - pore_spacing]) {\n            for(y = [-sponge_h/2 + pore_spacing : pore_spacing : sponge_h/2 - pore_spacing]) {\n                translate([x, y, sponge_d/2 - pore_depth/2])\n                sphere(d=pore_size, $fn=8);\n            }\n        }\n        \n        // Add pores on bottom surface\n        for(x = [-sponge_w/2 + pore_spacing*1.5 : pore_spacing : sponge_w/2 - pore_spacing*1.5]) {\n            for(y = [-sponge_h/2 + pore_spacing*1.5 : pore_spacing : sponge_h/2 - pore_spacing*1.5]) {\n                translate([x, y, -sponge_d/2 + pore_depth/2])\n                sphere(d=pore_size, $fn=8);\n            }\n        }\n    }\n}\n\nmodule scrubbing_side() {\n    // Scrubbing pad on one side\n    difference() {\n        color([0.5, 0.2, 0.8])  // Purple color\n        translate([sponge_w/2 - scrub_height/2, 0, 0])\n        cube([scrub_height, sponge_h, sponge_d], center=true);\n        \n        // Create scrubbing texture\n        for(z = [-sponge_d/2 + scrub_spacing : scrub_spacing : sponge_d/2 - scrub_spacing]) {\n            for(y = [-sponge_h/2 + scrub_spacing : scrub_spacing : sponge_h/2 - scrub_spacing]) {\n                translate([sponge_w/2 - scrub_height, y, z])\n                cube([scrub_width, scrub_width, scrub_width], center=true);\n            }\n        }\n    }\n}\n\nmodule rounded_corners() {\n    // Add rounded corners for realistic look\n    for(x = [-sponge_w/2 + sponge_d/4, sponge_w/2 - sponge_d/4]) {\n        for(y = [-sponge_h/2 + sponge_d/4, sponge_h/2 - sponge_d/4]) {\n            translate([x, y, 0])\n            rotate([0, 90, 0])\n            cylinder(h=sponge_d/2, r=sponge_d/4, $fn=16);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    sponge_body();\n    scrubbing_side();\n    rounded_corners();\n}\n\n// Add small details - brand label indentation\ntranslate([0, 0, sponge_d/2 - 0.5])\ncolor([0.8, 0.7, 0.1])\nlinear_extrude(height=0.5)\ntext(\"SPONGE\", size=8, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "household_item": "extractor",
    "openscad_code": "// Kitchen Range Extractor Hood\n// Medium complexity, realistic style, printable\n\n$fn = 32;          // smooth curves\nwall = 2;          // printable wall thickness\nscale = 0.5;       // global scale to keep ~80 mm wide\n\nmodule body() {\n    // Main hood shell\n    difference() {\n        // outer shell\n        translate([0,-10*scale,0])\n        scale([100*scale, 60*scale, 50*scale])\n            cube([1,1,1], center=true);\n\n        // inner cavity\n        translate([0,-8*scale,2*scale])\n        scale([94*scale, 56*scale, 46*scale])\n            cube([1,1,1], center=true);\n\n        // front chamfer\n        translate([0,0,25*scale])\n        rotate([45,0,0])\n        translate([0,0,-25*scale])\n            cube([200*scale,200*scale,50*scale], center=true);\n    }\n}\n\nmodule chimney() {\n    // vertical stack\n    translate([0,0,25*scale])\n    scale([30*scale, 30*scale, 40*scale])\n        cube([1,1,1], center=true);\n\n    // top flange\n    translate([0,0,45*scale])\n    scale([40*scale, 40*scale, 3*scale])\n        cube([1,1,1], center=true);\n}\n\nmodule controls() {\n    // button panel\n    translate([0,-28*scale,10*scale])\n    scale([40*scale, 6*scale, 1*scale])\n        cube([1,1,1], center=true);\n\n    // three buttons\n    for(x=[-12*scale,0,12*scale])\n        translate([x,-28*scale,11*scale])\n        scale([6*scale,6*scale,1*scale])\n            cylinder(h=2*scale, r=1);\n}\n\nmodule lights() {\n    // light bar\n    translate([0,-28*scale,-18*scale])\n    scale([80*scale, 4*scale, 3*scale])\n        cube([1,1,1], center=true);\n\n    // two bulbs\n    for(x=[-25*scale,25*scale])\n        translate([x,-28*scale,-18*scale])\n        scale([12*scale,4*scale,1*scale])\n            sphere();\n}\n\nmodule grease_filter() {\n    // filter frame\n    translate([0,0,-20*scale])\n    scale([90*scale, 50*scale, 3*scale])\n        cube([1,1,1], center=true);\n\n    // mesh pattern\n    for(y=[-20*scale:5*scale:20*scale])\n        translate([0,y,-18.5*scale])\n        scale([85*scale, 1*scale, 0.5*scale])\n            cube([1,1,1], center=true);\n\n    for(x=[-40*scale:5*scale:40*scale])\n        translate([x,0,-18.5*scale])\n        scale([1*scale, 45*scale, 0.5*scale])\n            cube([1,1,1], center=true);\n}\n\nmodule mounting_holes() {\n    // four screw holes for wall mount\n    for(x=[-35*scale,35*scale])\n    for(z=[15*scale,35*scale])\n        translate([x,29*scale,z])\n        rotate([90,0,0])\n        cylinder(h=30*scale, r=3*scale);\n}\n\n// assemble hood\nunion() {\n    body();\n    chimney();\n    controls();\n    lights();\n    grease_filter();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "household_item": "buffer",
    "openscad_code": "// Realistic Buffer - OpenSCAD Code\n// Medium complexity 3D printable buffer model\n\n// Configuration\n$fn = 50;\nbuffer_length = 80;\nbuffer_diameter = 25;\nmounting_hole_diameter = 5;\n\n// Main buffer body\nmodule buffer_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=buffer_length, d=buffer_diameter, center=true);\n        \n        // Hollow center\n        cylinder(h=buffer_length+2, d=buffer_diameter-4, center=true);\n        \n        // End chamfers\n        translate([0, 0, buffer_length/2-2]) \n            cylinder(h=4, d1=buffer_diameter, d2=buffer_diameter-2, center=false);\n        translate([0, 0, -buffer_length/2+2]) \n            cylinder(h=4, d1=buffer_diameter-2, d2=buffer_diameter, center=false);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    // Left bracket\n    translate([-buffer_diameter/2-5, 0, 0]) {\n        difference() {\n            cube([10, 12, 15], center=true);\n            translate([0, 0, 7.5]) \n                cylinder(h=15, d=mounting_hole_diameter+1, center=true);\n        }\n    }\n    \n    // Right bracket\n    translate([buffer_diameter/2+5, 0, 0]) {\n        difference() {\n            cube([10, 12, 15], center=true);\n            translate([0, 0, 7.5]) \n                cylinder(h=15, d=mounting_hole_diameter+1, center=true);\n        }\n    }\n}\n\n// Piston rod with cushioning feature\nmodule piston_rod() {\n    difference() {\n        // Main rod\n        translate([0, 0, -buffer_length/2-15]) \n            cylinder(h=30, d=8, center=true);\n        \n        // End threads\n        translate([0, 0, -buffer_length/2-20]) \n            cylinder(h=5, d=6.5, center=true);\n    }\n    \n    // Cushioning holes\n    for(i=[1:3]) {\n        rotate([0, 0, i*120]) \n            translate([3.5, 0, -buffer_length/2-10]) \n                cylinder(h=6, d=2, center=true);\n    }\n}\n\n// End cap with seal\nmodule end_cap() {\n    difference() {\n        // Main cap\n        translate([0, 0, buffer_length/2+5]) \n            cylinder(h=10, d=buffer_diameter+2, center=true);\n        \n        // O-ring groove\n        translate([0, 0, buffer_length/2+5]) \n            cylinder(h=2, d=buffer_diameter+4, center=true);\n        \n        // Central hole\n        translate([0, 0, buffer_length/2+5]) \n            cylinder(h=12, d=10, center=true);\n    }\n}\n\n// Air ports\nmodule air_ports() {\n    // Front port\n    rotate([90, 0, 0]) \n        translate([0, buffer_diameter/2+2, buffer_length/2-10]) \n            cylinder(h=6, d=4, center=true);\n    \n    // Rear port\n    rotate([90, 0, 0]) \n        translate([0, buffer_diameter/2+2, -buffer_length/2+10]) \n            cylinder(h=6, d=4, center=true);\n}\n\n// Assembly\nunion() {\n    buffer_body();\n    mounting_brackets();\n    piston_rod();\n    end_cap();\n    air_ports();\n}",
    "renders": true
  },
  {
    "household_item": "polisher",
    "openscad_code": "$fn = 30;\n\n// Overall scale factor – final tool ~95 mm long\nscale_factor = 0.8;\n\n// Main module\nmodule polisher(scale = 1) {\n    scale([scale, scale, scale]) {\n\n        // Central axis\n        // Body\n        difference() {\n            union() {\n                // Motor housing\n                translate([0, 0, 45])\n                    cylinder(h = 35, d = 38, center = true);\n\n                // Neck\n                translate([0, 0, 22])\n                    cylinder(h = 16, d1 = 28, d2 = 38, center = true);\n\n                // Handle grip\n                translate([0, 0, 0])\n                    cylinder(h = 40, d = 30, center = true);\n\n                // Rear cap\n                translate([0, 0, -25])\n                    cylinder(h = 10, d = 28, center = true);\n            }\n\n            // Wire exit hole\n            translate([0, 14, -25])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, d = 6, center = true);\n        }\n\n        // Rubber grip rings\n        for (z = [-15:5:15]) {\n            translate([0, 0, z])\n                difference() {\n                    cylinder(h = 2, d = 34, center = true);\n                    cylinder(h = 2, d = 30, center = true);\n                }\n        }\n\n        // Trigger switch\n        translate([0, 15, 0])\n            difference() {\n                cube([12, 6, 18], center = true);\n                translate([0, 3, 0])\n                    cube([12, 1, 18], center = true);\n            }\n\n        // Front collar\n        translate([0, 0, 62])\n            cylinder(h = 8, d = 42, center = true);\n\n        // Spindle / backing plate\n        translate([0, 0, 70])\n            cylinder(h = 6, d = 45, center = true);\n\n        // Foam polishing pad\n        translate([0, 0, 78])\n            cylinder(h = 12, d = 50, center = true);\n\n        // Cooling vents\n        for (a = [0:30:330]) {\n            rotate([0, 0, a])\n                translate([19, 0, 45])\n                    rotate([0, 90, 0])\n                        cylinder(h = 30, d = 4, center = true);\n        }\n\n        // Label recess\n        translate([0, -15, 0])\n            cube([25, 1, 10], center = true);\n    }\n}\n\n// Render the polisher\npolisher(scale_factor);",
    "renders": true
  },
  {
    "household_item": "gladius",
    "openscad_code": "// Gladius - Roman short sword (medium complexity, realistic style)\n// Overall length ~90mm, printable without support\n\n// Blade parameters\nblade_length = 55;\nblade_width = 6;\nblade_thickness = 2.5;\nfuller_width = 1.5;\nfuller_depth = 0.5;\n\n// Guard parameters\nguard_length = 12;\nguard_width = 8;\nguard_thickness = 3;\n\n// Grip parameters\ngrip_length = 18;\ngrip_diameter = 4;\ngrip_ring_spacing = 3.5;\ngrip_rings = 4;\n\n// Pommel parameters\npommel_diameter = 8;\npommel_length = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\nmodule blade() {\n    // Main blade body - tapering blade\n    translate([0, 0, blade_length/2])\n        scale([1, blade_width/blade_length, 1])\n        hull() {\n            cube([blade_thickness, blade_length, blade_length], center=true);\n            translate([0, blade_length/2 - 2, 0])\n                scale([1, 0.1, 0.1])\n                cube([blade_thickness, 4, blade_length], center=true);\n        }\n    \n    // Fuller (blood groove) - subtracted from blade\n    translate([0, 0, blade_length/2])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.8])\n        cylinder(h=blade_length*1.2, d=fuller_width, center=true, $fn=20);\n    \n    // Blade edges\n    for(side = [-1, 1]) {\n        translate([0, side*blade_width/2, blade_length/2])\n            rotate([0, 90, 0])\n            cylinder(h=blade_thickness, r1=0.2, r2=0, center=true);\n    }\n}\n\nmodule guard() {\n    // Main guard block\n    translate([0, 0, -guard_length/2])\n        difference() {\n            cube([guard_thickness, guard_width, guard_length], center=true);\n            // Central hole for tang\n            translate([0, 0, 0])\n                cube([guard_thickness+0.2, grip_diameter+0.4, grip_diameter+0.4], center=true);\n        }\n    \n    // Guard curves\n    for(side = [-1, 1]) {\n        translate([0, side*guard_width/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h=guard_thickness, r=2, center=true);\n    }\n}\n\nmodule grip() {\n    // Main grip core\n    color(\"brown\")\n    translate([0, 0, -grip_length/2])\n        cylinder(h=grip_length, d=grip_diameter, center=true, $fn=20);\n    \n    // Grip rings\n    for(i = [0:grip_rings-1]) {\n        translate([0, 0, -grip_length/2 + grip_ring_spacing + i*grip_ring_spacing])\n            cylinder(h=1, d=grip_diameter+1, center=true, $fn=20);\n    }\n    \n    // Tang (hidden inside)\n    translate([0, 0, -(grip_length+pommel_length)/2])\n        cylinder(h=grip_length+pommel_length, d=grip_diameter*0.6, center=true, $fn=8);\n}\n\nmodule pommel() {\n    color(\"silver\")\n    translate([0, 0, -grip_length - pommel_length/2])\n    difference() {\n        // Main pommel\n        cylinder(h=pommel_length, d=pommel_diameter, center=true, $fn=30);\n        // Tang hole\n        translate([0, 0, 0])\n            cylinder(h=pommel_length+0.2, d=grip_diameter*0.6, center=true, $fn=8);\n        // Decorative groove\n        translate([0, 0, -pommel_length/4])\n            cylinder(h=1, d=pommel_diameter-1, center=true, $fn=30);\n    }\n}\n\n// Assembly\nunion() {\n    // Blade\n    translate([0, 0, grip_length + pommel_length + blade_length/2])\n        blade();\n    \n    // Guard\n    translate([0, 0, grip_length + pommel_length])\n        guard();\n    \n    // Grip\n    translate([0, 0, pommel_length])\n        grip();\n    \n    // Pommel\n    pommel();\n}",
    "renders": true
  },
  {
    "household_item": "scutum",
    "openscad_code": "// Realistic Scutum (Roman rectangular curved shield)\n// Medium complexity, 3D printable\n\n// Overall dimensions (mm)\nshield_width = 80;\nshield_height = 110;\nshield_thickness = 4;\nboss_radius = 18;\nboss_height = 8;\nboss_offset = 20; // distance from top edge to boss center\ngrip_length = 60;\ngrip_diameter = 10;\nreinforcement_thickness = 2;\n\n// Main shield body - curved rectangular shape\nmodule shield_body() {\n    // Create slightly curved shape using hull of cylinders\n    difference() {\n        hull() {\n            // Create curved front face\n            for (x = [-shield_width/2 : shield_width/4 : shield_width/2]) {\n                translate([x, 0, shield_thickness/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=shield_height, r=shield_thickness/2, $fn=20);\n            }\n        }\n        \n        // Hollow out the back\n        translate([0, 0, -shield_thickness/2])\n            cube([shield_width*1.1, shield_height*1.1, shield_thickness*2], center=true);\n    }\n}\n\n// Central boss (umbo)\nmodule shield_boss() {\n    translate([0, shield_height/2 - boss_offset, 0])\n        union() {\n            // Main dome\n            rotate_extrude(angle=360, $fn=32)\n                translate([boss_radius, 0, 0])\n                    circle(r=boss_radius);\n            \n            // Flange around boss\n            translate([0, 0, -boss_height/2])\n                cylinder(h=boss_height/4, r=boss_radius*1.3, $fn=32);\n        }\n}\n\n// Vertical reinforcing strips\nmodule vertical_strips() {\n    strip_width = 3;\n    strip_count = 5;\n    strip_spacing = shield_width / (strip_count - 1);\n    \n    for (i = [0 : strip_count-1]) {\n        x_pos = -shield_width/2 + i * strip_spacing;\n        translate([x_pos, 0, -shield_thickness/2 + reinforcement_thickness/2])\n            cube([strip_width, shield_height, reinforcement_thickness], center=true);\n    }\n}\n\n// Horizontal reinforcing strips\nmodule horizontal_strips() {\n    strip_height = 3;\n    strip_count = 4;\n    strip_spacing = shield_height / (strip_count - 1);\n    \n    for (i = [0 : strip_count-1]) {\n        y_pos = -shield_height/2 + i * strip_spacing;\n        translate([0, y_pos, -shield_thickness/2 + reinforcement_thickness/2])\n            cube([shield_width, strip_height, reinforcement_thickness], center=true);\n    }\n}\n\n// Central grip/handle\nmodule central_grip() {\n    translate([0, -shield_height/2 + boss_offset, -boss_height - grip_diameter/2])\n        rotate([90, 0, 0])\n            cylinder(h=grip_length, r=grip_diameter/2, $fn=16);\n    \n    // Grip supports\n    for (angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([grip_diameter/2, -shield_height/2 + boss_offset, -boss_height - grip_diameter/2])\n                rotate([90, 0, 0])\n                    cylinder(h=grip_length/4, r=grip_diameter/4, $fn=8);\n    }\n}\n\n// Decorative edge trim\nmodule edge_trim() {\n    trim_height = 2;\n    trim_thickness = 1;\n    \n    // Top edge\n    translate([0, shield_height/2, shield_thickness/2])\n        cube([shield_width+2, trim_height, trim_thickness], center=true);\n    \n    // Bottom edge\n    translate([0, -shield_height/2, shield_thickness/2])\n        cube([shield_width+2, trim_height, trim_thickness], center=true);\n    \n    // Side edges\n    translate([shield_width/2, 0, shield_thickness/2])\n        cube([trim_thickness, shield_height+2, trim_height], center=true);\n    translate([-shield_width/2, 0, shield_thickness/2])\n        cube([trim_thickness, shield_height+2, trim_height], center=true);\n}\n\n// Assembly\nunion() {\n    // Main shield body\n    shield_body();\n    \n    // Add reinforcements\n    difference() {\n        union() {\n            vertical_strips();\n            horizontal_strips();\n        }\n        \n        // Cut out space for grip\n        translate([0, -shield_height/2 + boss_offset, -boss_height])\n            cube([grip_diameter*2, grip_length, boss_height*2], center=true);\n    }\n    \n    // Boss and grip\n    shield_boss();\n    central_grip();\n    \n    // Edge decoration\n    edge_trim();\n}",
    "renders": true
  },
  {
    "household_item": "pilum",
    "openscad_code": "// Realistic 3D-printable Pilum (Roman javelin) – medium complexity\n// Overall length ~90 mm, printable in one piece (no overhangs >45°)\n\n// PARAMETERS -----------------------------------------------------------\nshaft_len   = 75;      // wooden shaft length\nshaft_d     = 5;       // shaft diameter\ntang_len    = 10;      // iron tang sunk into shaft\ntang_d      = 3;\nhead_len    = 40;      // total iron head length\nhead_base_d = 6;\nhead_tip_d  = 1;\npyr_len     = 4;       // small square pyramid tip\nwall        = 1.2;     // minimum wall for FDM printing\nfacets      = 32;      // cylinder resolution\n\n// MODULES --------------------------------------------------------------\n\n// Tapered cylinder helper\nmodule tapered_cyl(h, d1, d2) {\n    linear_extrude(height = h, scale = d2/d1)\n        circle(d = d1, $fn = facets);\n}\n\n// Square pyramid tip\nmodule pyramid(len) {\n    // Four faces, no overhang\n    for(a=[0:90:270]) rotate([0,0,a])\n        rotate([45,0,0])\n            cube([len*sqrt(2), len*sqrt(2), len], center=true);\n}\n\n// Iron head with socket and long shank\nmodule pilum_head() {\n    union() {\n        // Socket for shaft\n        difference() {\n            cylinder(h = tang_len, d = head_base_d, $fn = facets);\n            translate([0,0,-wall]) cylinder(h = tang_len+wall*2, d = shaft_d-wall, $fn = facets);\n        }\n        // Tapered shank\n        translate([0,0,tang_len])\n            tapered_cyl(head_len-tang_len-pyr_len, head_base_d, head_tip_d);\n        // Hardened pyramid tip\n        translate([0,0,head_len-pyr_len])\n            pyramid(pyr_len);\n    }\n}\n\n// Wooden shaft with simple wood-grain rings\nmodule shaft() {\n    difference() {\n        // Main shaft\n        cylinder(h = shaft_len, d = shaft_d, $fn = facets);\n        // Iron tang hole\n        translate([0,0,shaft_len-tang_len])\n            cylinder(h = tang_len+wall, d = tang_d, $fn = facets);\n    }\n    // Slight grip swell 1/3 from bottom\n    grip_pos = shaft_len*0.3;\n    translate([0,0,grip_pos])\n        cylinder(h = 6, d = shaft_d*1.2, $fn = facets);\n}\n\n// ASSEMBLY -------------------------------------------------------------\ntranslate([0,0,shaft_len])\n    rotate([180,0,0])\n        pilum_head();\n\nshaft();",
    "renders": true
  },
  {
    "household_item": "kopis",
    "openscad_code": "// Kopis - Ancient Greek single-edged sword\n// Realistic style, medium complexity\n// Total length ~95mm, blade ~70mm, handle ~25mm\n\n// Overall parameters\nblade_length = 70;\nblade_width = 18;\nblade_thickness = 2.5;\nhandle_length = 25;\nhandle_width = 12;\nguard_height = 4;\nguard_width = 22;\n\n// Blade module with forward curve\nmodule kopis_blade() {\n    difference() {\n        // Main blade body\n        translate([0, 0, blade_thickness/2])\n        linear_extrude(height=blade_thickness, convexity=10)\n        polygon(points=[\n            [0, 0],                    // Hilt junction\n            [3, -blade_width/2],       // Ricasso start\n            [blade_length*0.15, -blade_width*0.4],  // Ricasso end\n            [blade_length*0.8, -blade_width*0.3],   // Mid blade curve\n            [blade_length*0.95, blade_width*0.4],   // Tip curve\n            [blade_length, 0],                      // Tip\n            [blade_length*0.95, blade_width*0.5],   // Other side tip\n            [blade_length*0.8, blade_width*0.4],    // Other mid blade\n            [blade_length*0.15, blade_width*0.45],  // Other ricasso\n            [3, blade_width/2],\n            [0, 0]\n        ]);\n        \n        // Fuller groove\n        translate([blade_length*0.3, 0, blade_thickness/2-0.1])\n        rotate([0, 0, -8])\n        linear_extrude(height=blade_thickness+0.2, convexity=10)\n        polygon(points=[\n            [0, -2], [blade_length*0.4, -2.5], \n            [blade_length*0.4, 2.5], [0, 2]\n        ]);\n    }\n}\n\n// Guard module\nmodule kopis_guard() {\n    // Main guard body\n    translate([0, 0, guard_height/2])\n    difference() {\n        cube([guard_width, guard_height, 4], center=true);\n        \n        // Blade slot\n        translate([0, 0, 0])\n        cube([blade_thickness+0.2, guard_height+0.2, 5], center=true);\n        \n        // Decorative grooves\n        for(i=[-1:1]) {\n            translate([i*6, 0, 2.5])\n            cube([1, guard_height-2, 0.5], center=true);\n        }\n    }\n}\n\n// Handle module with ergonomic grip\nmodule kopis_handle() {\n    // Main handle core\n    difference() {\n        // Handle shaft\n        translate([0, 0, handle_length/2])\n        rotate([0, 90, 0])\n        cylinder(h=handle_length, r1=handle_width/2, r2=handle_width/2-1, $fn=12);\n        \n        // Index finger groove\n        translate([0, -handle_width/2-0.5, handle_length*0.3])\n        rotate([0, 90, 0])\n        cylinder(h=handle_width+1, r=2, $fn=12);\n        \n        // Pinky groove\n        translate([0, -handle_width/2-0.5, handle_length*0.8])\n        rotate([0, 90, 0])\n        cylinder(h=handle_width+1, r=1.5, $fn=12);\n    }\n    \n    // Handle wrap texture\n    for(i=[0:4]) {\n        translate([0, 0, i*handle_length/5])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=handle_length/5+0.1, r=handle_width/2+0.3, $fn=8);\n            cylinder(h=handle_length/5+0.2, r=handle_width/2-0.5, $fn=8);\n        }\n    }\n    \n    // Pommel\n    translate([0, 0, handle_length])\n    rotate([0, 90, 0])\n    difference() {\n        sphere(r=handle_width/2+1, $fn=16);\n        translate([0, 0, -handle_width/2-2])\n        cube([handle_width*2, handle_width*2, handle_width+2], center=true);\n    }\n}\n\n// Assembly\nmodule kopis() {\n    // Blade\n    translate([-blade_length, 0, 0])\n    kopis_blade();\n    \n    // Guard\n    translate([0, 0, 0])\n    kopis_guard();\n    \n    // Handle\n    translate([0, 0, guard_height/2+2])\n    kopis_handle();\n}\n\n// Render the complete sword\nkopis();",
    "renders": true
  },
  {
    "household_item": "desktop",
    "openscad_code": "// Desktop with monitor, keyboard and mouse\n// Overall dimensions: ~90mm wide, ~70mm deep, ~55mm tall\n\n$fn = 32;\n\n// Main assembly\nunion() {\n    // Desk surface\n    translate([0, 0, 10])\n        desk_top();\n    \n    // Monitor stand\n    translate([0, -20, 10])\n        monitor_assembly();\n    \n    // Keyboard\n    translate([-15, 10, 10])\n        keyboard();\n    \n    // Mouse\n    translate([20, 15, 10])\n        mouse();\n    \n    // Desk legs\n    translate([-35, -25, 0])\n        leg();\n    translate([35, -25, 0])\n        leg();\n    translate([-35, 25, 0])\n        leg();\n    translate([35, 25, 0])\n        leg();\n}\n\n// Desk surface module\nmodule desk_top() {\n    difference() {\n        // Main surface\n        cube([80, 60, 3], center = true);\n        \n        // Cable management hole\n        translate([0, 20, 1])\n            cylinder(h = 5, r = 5);\n    }\n}\n\n// Monitor assembly\nmodule monitor_assembly() {\n    union() {\n        // Monitor base\n        translate([0, 0, 0])\n            cube([30, 15, 5], center = true);\n        \n        // Monitor stand\n        translate([0, 0, 12.5])\n            cube([8, 8, 20], center = true);\n        \n        // Monitor screen\n        translate([0, 0, 25])\n            rotate([0, 15, 0])\n            monitor_screen();\n    }\n}\n\n// Monitor screen\nmodule monitor_screen() {\n    difference() {\n        // Screen body\n        cube([40, 5, 25], center = true);\n        \n        // Screen display area\n        translate([0, 3, 0])\n            cube([36, 1, 21], center = true);\n    }\n}\n\n// Keyboard module\nmodule keyboard() {\n    difference() {\n        // Main keyboard body\n        cube([35, 15, 3], center = true);\n        \n        // Key cutouts\n        for (x = [-14:7:14]) {\n            for (y = [-5:5:5]) {\n                translate([x, y, 1.5])\n                    cube([5, 3, 2], center = true);\n            }\n        }\n    }\n}\n\n// Mouse module\nmodule mouse() {\n    difference() {\n        union() {\n            // Main mouse body\n            translate([0, 0, 2])\n                cube([12, 20, 6], center = true);\n            \n            // Rounded top\n            translate([0, 0, 5])\n                scale([1, 1.5, 0.5])\n                sphere(r = 6);\n        }\n        \n        // Scroll wheel gap\n        translate([0, -3, 5])\n            rotate([90, 0, 0])\n            cylinder(h = 10, r = 1);\n    }\n}\n\n// Desk leg module\nmodule leg() {\n    cube([8, 8, 10], center = true);\n}",
    "renders": true
  },
  {
    "household_item": "workstation",
    "openscad_code": "// Workstation with monitor, keyboard, mouse, and shelf\n// Overall dimensions: 80mm wide x 60mm deep x 55mm tall\n\nmodule leg(x,y) {\n    // 6mm square legs with 2mm chamfer\n    translate([x,y,0])\n        difference() {\n            cube([6,6,30], center=true);\n            translate([0,0,15])\n                cube([5.2,5.2,31], center=true);\n        }\n}\n\nmodule monitor() {\n    // 18\" monitor with stand\n    translate([40,30,45]) {\n        // Monitor screen\n        difference() {\n            cube([30,20,2], center=true);\n            translate([0,0,1.1])\n                cube([28,18,2], center=true);\n        }\n        // Monitor neck\n        translate([0,-7,-5])\n            rotate([0,15,0])\n                cube([4,2,10], center=true);\n        // Monitor base\n        translate([0,-7,-11])\n            cube([14,6,2], center=true);\n    }\n}\n\nmodule keyboard() {\n    // Tilted keyboard\n    translate([40,15,26])\n        rotate([10,0,0])\n            difference() {\n                cube([24,10,2], center=true);\n                for(x=[-10:5:10])\n                    for(y=[-3:2:3])\n                        translate([x,y,1.1])\n                            cube([4,1.5,1], center=true);\n            }\n}\n\nmodule mouse() {\n    // Simple mouse\n    translate([55,15,26])\n        difference() {\n            // Mouse body\n            scale([1.2,1,0.8])\n                sphere(4, $fn=20);\n            // Mouse buttons\n            translate([0,2.5,0])\n                cube([7,0.5,1.5], center=true);\n        }\n}\n\nmodule shelf() {\n    // Lower shelf for PC tower\n    translate([40,30,15])\n        cube([60,30,2], center=true);\n}\n\n// Table top\ntranslate([40,30,30])\n    cube([70,50,4], center=true);\n\n// Legs\nleg(5,5);\nleg(75,5);\nleg(5,55);\nleg(75,55);\n\n// Add components\nmonitor();\nkeyboard();\nmouse();\nshelf();\n\n// PC tower on shelf\ntranslate([15,30,7])\n    difference() {\n        cube([15,12,20], center=true);\n        translate([0,0,10])\n            cube([13,10,1], center=true);\n        translate([7,6,6])\n            cube([1,1,1], center=true); // power button\n    }",
    "renders": true
  },
  {
    "household_item": "terminal",
    "openscad_code": "// Realistic Terminal – OpenSCAD\n// Overall size ~60 mm wide × 50 mm deep × 40 mm high\n// Wall thickness 1.2 mm for easy FDM printing\n\n$fn = 32;\n\n// Main assembly\nunion() {\n\n    // Housing body\n    difference() {\n        rounded_box([60, 50, 35], 4);          // outer shell\n        translate([0, 0, 1.2])\n            rounded_box([57.6, 47.6, 35], 3);  // inner cavity\n    }\n\n    // Ventilation slots on top\n    for (x = [-20:5:20])\n        translate([x, 0, 35])\n            cube([3, 50, 1.2], center = true);\n\n    // Front panel\n    translate([0, 25, 17.5])\n        front_panel();\n\n    // Rear connector cut-outs\n    translate([0, -25, 17.5])\n        rear_connectors();\n\n    // Rubber feet\n    foot_positions = [[-25, -20], [25, -20], [-25, 20], [25, 20]];\n    for (p = foot_positions)\n        translate([p.x, p.y, 0])\n            cylinder(h = 2, d = 6);\n}\n\n// Rounded box module\nmodule rounded_box(size, r) {\n    translate([0, 0, r])\n        minkowski() {\n            cube([size.x - 2*r, size.y - 2*r, size.z - 2*r], center = true);\n            sphere(r);\n        }\n}\n\n// Front panel with screen and buttons\nmodule front_panel() {\n    difference() {\n        // Panel plate\n        translate([0, 0, 0])\n            cube([56, 1.2, 27], center = true);\n\n        // LCD screen recess\n        translate([0, 0.7, 8])\n            cube([40, 1, 15], center = true);\n\n        // Button holes\n        for (i = [-1:1])\n            translate([i * 15, 0.7, -8])\n                cylinder(h = 3, d = 6);\n    }\n\n    // LCD screen\n    translate([0, 1.2, 8])\n        color([0.2, 0.2, 0.2])\n            cube([38, 0.5, 13], center = true);\n\n    // Buttons\n    for (i = [-1:1])\n        translate([i * 15, 2.5, -8])\n            cylinder(h = 3, d = 5.8);\n}\n\n// Rear connectors\nmodule rear_connectors() {\n    difference() {\n        cube([56, 1.2, 20], center = true);\n\n        // Power jack\n        translate([0, 0.7, 7])\n            cylinder(h = 3, d = 8);\n\n        // Two USB-A ports\n        for (dx = [-15, 15])\n            translate([dx, 0.7, -5])\n                cube([8, 2, 6], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "mainframe",
    "openscad_code": "// Mainframe Computer Model - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 40mm x 100mm (WxDxH)\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // Main frame\n        cube([80, 40, 100], center=true);\n        \n        // Front panel recess\n        translate([0, 19, 20])\n            cube([76, 2, 60], center=true);\n    }\n}\n\n// Front control panel\nmodule front_panel() {\n    translate([0, 20.5, 20]) {\n        // Panel background\n        color(\"darkgray\")\n            cube([74, 1, 58], center=true);\n        \n        // Display screen\n        translate([-25, 0, 20])\n            color(\"black\")\n            cube([20, 0.5, 10], center=true);\n        \n        // Button arrays\n        for(x = [-30:10:30]) {\n            for(y = [-20:5:0]) {\n                translate([x, 0, y])\n                    cylinder(h=1, r=1.5, center=true);\n            }\n        }\n    }\n}\n\n// Ventilation grilles\nmodule vents() {\n    for(z = [-40:8:40]) {\n        translate([0, 0, z]) {\n            difference() {\n                cube([80, 40, 4], center=true);\n                for(x = [-35:4:35]) {\n                    translate([x, 0, 0])\n                        cube([2, 42, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Side panels with handles\nmodule side_panels() {\n    for(side = [-1, 1]) {\n        translate([side * 41, 0, 0]) {\n            // Panel\n            cube([2, 36, 96], center=true);\n            \n            // Handles (vertical bars)\n            for(z = [-30:15:30]) {\n                translate([side * 1, 15, z])\n                    cylinder(h=10, r=2, center=true);\n                translate([side * 1, -15, z])\n                    cylinder(h=10, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Top cover with indicator lights\nmodule top_cover() {\n    translate([0, 0, 51]) {\n        // Main top\n        cube([78, 38, 2], center=true);\n        \n        // Status lights\n        for(x = [-30:6:30]) {\n            translate([x, 15, 1])\n                cylinder(h=2, r=2, center=true);\n        }\n    }\n}\n\n// Rear I/O panel\nmodule io_panel() {\n    translate([0, -20.5, 0]) {\n        color(\"gray\")\n            cube([74, 1, 80], center=true);\n        \n        // Ventilation slots\n        for(z = [-30:5:30]) {\n            translate([0, 0, z])\n                cube([70, 1.5, 3], center=true);\n        }\n        \n        // I/O ports\n        for(x = [-25:5:25]) {\n            translate([x, -0.5, 20])\n                cylinder(h=2, r=1.5, center=true);\n        }\n    }\n}\n\n// Support feet\nmodule feet() {\n    for(x = [-30, 30])\n    for(y = [-15, 15]) {\n        translate([x, y, -52]) {\n            cylinder(h=4, r=3, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chassis();\n    front_panel();\n    side_panels();\n    top_cover();\n    io_panel();\n    feet();\n    \n    // Apply ventilation only to sides\n    intersection() {\n        vents();\n        translate([0, 0, 0])\n            cube([82, 42, 100], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "minicomputer",
    "openscad_code": "// MiniComputer.scad\n// A realistic, 3D-printable minicomputer model\n\n// Overall dimensions (mm)\ncomputer_w = 80;\ncomputer_d = 60;\ncomputer_h = 35;\n\n// Wall thickness\nwall = 2;\n\nmodule main_case() {\n    difference() {\n        // Outer shell\n        cube([computer_w, computer_d, computer_h], center = true);\n        \n        // Hollow cavity\n        translate([0, 0, -wall/2])\n            cube([computer_w - 2*wall, computer_d - 2*wall, computer_h - wall], center = true);\n        \n        // Front ventilation slots\n        for (x = [-35:10:35])\n            translate([x, -computer_d/2 - 0.1, 0])\n                cube([6, wall + 0.2, 20]);\n    }\n}\n\nmodule front_panel() {\n    translate([0, -computer_d/2, 0])\n        difference() {\n            // Front face\n            cube([computer_w, wall, computer_h], center = true);\n            \n            // Power button hole\n            translate([-25, 0, 10])\n                cylinder(h = wall + 0.2, r = 4, center = true, $fn = 16);\n            \n            // LED indicator holes\n            for (i = [0:2])\n                translate([-10 + i*10, 0, 10])\n                    cylinder(h = wall + 0.2, r = 1.5, center = true, $fn = 8);\n            \n            // Reset button hole\n            translate([25, 0, 10])\n                cylinder(h = wall + 0.2, r = 2, center = true, $fn = 16);\n        }\n}\n\nmodule back_panel() {\n    translate([0, computer_d/2, 0])\n        difference() {\n            // Back face\n            cube([computer_w, wall, computer_h], center = true);\n            \n            // USB ports\n            for (i = [0:3])\n                translate([-30 + i*10, 0, 5])\n                    cube([8, wall + 0.2, 3]);\n            \n            // Power jack\n            translate([30, 0, -5])\n                cylinder(h = wall + 0.2, r = 3.5, center = true, $fn = 16);\n            \n            // Ethernet port\n            translate([30, 0, 5])\n                cube([12, wall + 0.2, 8]);\n        }\n}\n\nmodule heat_sink() {\n    translate([0, 0, computer_h/2 - 2])\n        difference() {\n            // Base plate\n            cube([computer_w - 10, computer_d - 10, 4], center = true);\n            \n            // Fins\n            for (y = [-20:4:20])\n                translate([0, y, 2])\n                    cube([computer_w - 12, 2, 4]);\n        }\n}\n\nmodule feet() {\n    for (x = [-30, 30])\n        for (y = [-20, 20]) {\n            translate([x, y, -computer_h/2 - 2])\n                cylinder(h = 4, r = 3, center = true, $fn = 16);\n        }\n}\n\nmodule antenna() {\n    translate([computer_w/2 - 5, 0, computer_h/2 - 5]) {\n        rotate([90, 0, 90]) {\n            // Antenna base\n            cylinder(h = 5, r = 4, center = true, $fn = 16);\n            \n            // Antenna rod\n            translate([0, 0, 2.5])\n                cylinder(h = 20, r = 0.5, center = false, $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_case();\n    front_panel();\n    back_panel();\n    heat_sink();\n    feet();\n    antenna();\n}",
    "renders": true
  },
  {
    "household_item": "microcomputer",
    "openscad_code": "// Raspberry Pi 4-style microcomputer – printable, medium detail\n// 85 × 56 × 21 mm overall, 1.2 mm wall thickness\n\n$fn = 36;\n\n// Main board\nmodule board() {\n    difference() {\n        cube([85, 56, 1.6], center = true);          // PCB\n        // Mounting holes Ø2.7 mm\n        for (p = [[-29, 23], [29, 23], [29, -23], [-29, -23]])\n            translate([p[0], p[1], 0])\n                cylinder(h = 1.7, d = 2.7, center = true);\n    }\n}\n\n// USB-C power jack\nmodule usbc_port() {\n    translate([-38, -25, -1.1])\n        cube([7, 8, 4]);                             // Jack body\n}\n\n// USB-A ports block (2×)\nmodule usb_a_block() {\n    translate([-38, 25, -1.1])\n        cube([12, 14, 4]);                           // 2-port block\n}\n\n// Ethernet jack\nmodule eth_port() {\n    translate([-38, 0, -1.1])\n        cube([12, 16, 4]);\n}\n\n// 40-pin GPIO header\nmodule gpio_header() {\n    for (x = [-20 : 2.54 : 20])\n        translate([38, x, 2.2])\n            cylinder(h = 8.5, d = 1.0);\n}\n\n// Micro-HDMI ports (2× side-by-side)\nmodule micro_hdmi() {\n    for (y = [-12, 2])\n        translate([-38, y, -1.1])\n            cube([8, 7, 4]);\n}\n\n// CPU + heatsink\nmodule soc_heatsink() {\n    translate([10, 10, 0.8])\n        cube([14, 14, 6]);\n}\n\n// Wi-Fi/BT antenna\nmodule antenna() {\n    translate([38, -25, 0.8])\n        cube([5, 5, 1]);\n}\n\n// Print-friendly assembly\nunion() {\n    color(\"darkgreen\") board();\n    color(\"black\") usbc_port();\n    color(\"black\") usb_a_block();\n    color(\"black\") eth_port();\n    color(\"black\") micro_hdmi();\n    color(\"gold\") gpio_header();\n    color(\"gray\") soc_heatsink();\n    color(\"black\") antenna();\n}",
    "renders": true
  },
  {
    "household_item": "netbook",
    "openscad_code": "// Netbook (medium-realistic style) – sized for 3D printing\n// Approx. 80 mm wide, 50 mm deep, 10 mm thick when closed\n// No overhangs >45°, 1 mm wall thickness, 0.2 mm detail tolerance\n\n$fn = 32;\n\n// Overall scale factor\nSCALE = 0.4;\n\n// Main dimensions\nBASE_T = 6;          // lower shell thickness\nLID_T  = 4;          // upper shell thickness\nHINGE_D = 2;         // hinge pin diameter\nKEY_H = 0.4;         // key cap height\nKEY_PITCH = 3;       // key spacing\n\nmodule netbook() {\n    // Lower shell\n    difference() {\n        translate([0, 0, BASE_T/2])\n            rounded_box(80, 50, BASE_T, 3);\n        // Keyboard cavity\n        translate([0, -5, BASE_T-1])\n            rounded_box(70, 30, 3, 2);\n    }\n\n    // Lid\n    translate([0, -25, BASE_T + HINGE_D/2 + LID_T/2])\n        rotate([100, 0, 0])\n            difference() {\n                rounded_box(80, 50, LID_T, 3);\n                // Screen recess\n                translate([0, 5, LID_T-1])\n                    rounded_box(65, 35, 2, 2);\n            }\n\n    // Hinges (left & right)\n    for (x = [-30, 30]) {\n        translate([x, 0, BASE_T/2]) {\n            cylinder(h = BASE_T, d = 4, center = true);\n            translate([0, 0, BASE_T/2 + HINGE_D/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = HINGE_D);\n        }\n    }\n\n    // Keyboard grid\n    for (row = [0:3])\n        for (col = [-5:5]) {\n            translate([col*KEY_PITCH, -row*KEY_PITCH-5, BASE_T-KEY_H])\n                cube([2.2, 2.2, KEY_H], center = true);\n        }\n\n    // Touchpad\n    translate([20, -20, BASE_T-0.2])\n        rounded_box(18, 12, 0.2, 1);\n\n    // Ports on left side\n    for (i = [0:1])\n        translate([-40, 10 + i*12, BASE_T/2])\n            rotate([0, 90, 0])\n                cylinder(h = 1.5, d = 5);\n}\n\n// Helper: rounded box with given corner radius\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        for (x = [-w/2+r, w/2-r])\n            for (y = [-d/2+r, d/2-r])\n                translate([x, y, 0])\n                    cylinder(h = h, d = 2*r, center = true);\n    }\n}\n\nscale([SCALE, SCALE, SCALE])\n    netbook();",
    "renders": true
  },
  {
    "household_item": "ultrabook",
    "openscad_code": "// Ultrabook in realistic style – medium complexity\n// Approx. 90 mm length, printable with 1.2 mm wall thickness\n\n$fn = 36;               // smooth curves\n\n// overall dimensions\nl = 90;                 // length\nw = 60;                 // width\nt_total = 6;            // total max thickness\nt_base = 4;             // lower shell thickness\nt_top = 2;              // lid thickness\nhinge_r = 1.5;          // hinge radius\ngap = 0.2;              // clearance for print-in-place hinge\nwall = 1.2;             // wall thickness for printing\n\n// base shell\nmodule base_shell() {\n    difference() {\n        // rounded lower body\n        hull() {\n            translate([wall, wall, 0]) cube([l - 2*wall, w - 2*wall, t_base]);\n            translate([wall, wall, wall]) cube([l - 2*wall, w - 2*wall, t_base]);\n            translate([l - wall, w - wall, wall]) sphere(r = wall);\n            translate([wall, wall, wall]) sphere(r = wall);\n            translate([l - wall, wall, wall]) sphere(r = wall);\n            translate([wall, w - wall, wall]) sphere(r = wall);\n        }\n        // hollow inside\n        translate([wall + gap, wall + gap, gap])\n            cube([l - 2*(wall + gap), w - 2*(wall + gap), t_base - gap]);\n        // keyboard recess\n        translate([10, 8, t_base - 0.5])\n            cube([l - 20, w - 16, 0.5]);\n    }\n}\n\n// lid shell\nmodule lid_shell() {\n    difference() {\n        hull() {\n            translate([wall, wall, 0]) cube([l - 2*wall, w - 2*wall, t_top]);\n            translate([wall, wall, wall]) cube([l - 2*wall, w - 2*wall, t_top]);\n            translate([l - wall, w - wall, wall]) sphere(r = wall);\n            translate([wall, wall, wall]) sphere(r = wall);\n            translate([l - wall, wall, wall]) sphere(r = wall);\n            translate([wall, w - wall, wall]) sphere(r = wall);\n        }\n        // screen recess\n        translate([6, 6, wall])\n            cube([l - 12, w - 12, t_top - wall - gap]);\n        // webcam hole\n        translate([l/2 - 1, 2, t_top - 0.4])\n            cylinder(h = 0.5, r = 1);\n    }\n}\n\n// print-in-place hinges (simple cylinders)\nmodule hinges() {\n    for (i = [0, 1]) {\n        translate([l*0.15 + i*l*0.7, w/2 - 2, t_base])\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = hinge_r);\n        translate([l*0.15 + i*l*0.7, w/2 + 2, t_base])\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = hinge_r);\n    }\n}\n\n// keyboard keys grid\nmodule keyboard() {\n    key_w = 5; key_h = 5; key_t = 0.4; spacing = 6;\n    rows = 4; cols = 12;\n    for (r = [0:rows-1])\n        for (c = [0:cols-1]) {\n            // stagger odd rows slightly\n            stagger = (r % 2) ? 3 : 0;\n            translate([10 + c*spacing + stagger,\n                       12 + r*spacing,\n                       t_base - key_t])\n                cube([key_w, key_h, key_t], center = true);\n        }\n}\n\n// touchpad\nmodule touchpad() {\n    color(\"black\")\n    translate([l*0.6, w*0.3, t_base - 0.3])\n        cube([18, 12, 0.3]);\n}\n\n// screen\nmodule screen() {\n    color(\"black\")\n    difference() {\n        translate([6, 6, wall + gap])\n            cube([l - 12, w - 12, 0.2]);\n        // display area\n        translate([8, 8, wall + gap])\n            cube([l - 16, w - 16, 0.1]);\n    }\n}\n\n// assembly\nunion() {\n    // base\n    base_shell();\n    translate([0, 0, 0]) keyboard();\n    translate([0, 0, 0]) touchpad();\n\n    // hinges\n    color(\"gray(50)\")\n    hinges();\n\n    // lid rotated open 120° for display\n    translate([0, 0, t_base])\n        rotate([120, 0, 0])\n        translate([-l, -w, 0])\n        lid_shell();\n    translate([0, 0, t_base])\n        rotate([120, 0, 0])\n        translate([-l, -w, 0])\n        screen();\n}",
    "renders": true
  },
  {
    "household_item": "notebook",
    "openscad_code": "// Realistic 3D printable notebook\n// Exterior dimensions: 80mm (W) x 100mm (H) x 12mm (D)\n\n$fn = 32;\n\n// Main parameters\nnotebook_w = 80;\nnotebook_h = 100;\nnotebook_d = 12;\ncover_th = 1.5;\npage_th = 8;\nring_r = 3;\nring_gap = 2;\nring_count = 15;\nring_spacing = notebook_h / (ring_count + 1);\n\n// Front cover with slight curvature\nmodule front_cover() {\n    // Main cover body\n    translate([0, 0, notebook_d/2 - cover_th/2])\n        cube([notebook_w, notebook_h, cover_th], center=true);\n    \n    // Rounded edges\n    translate([0, -notebook_h/2 + 2, notebook_d/2 - cover_th])\n        rotate([90, 0, 0])\n            cylinder(h=notebook_w - 4, r=2);\n    translate([0, notebook_h/2 - 2, notebook_d/2 - cover_th])\n        rotate([90, 0, 0])\n            cylinder(h=notebook_w - 4, r=2);\n    \n    // Paper texture lines\n    for(y = [-notebook_h/2 + 5 : 4 : notebook_h/2 - 5]) {\n        translate([0, y, notebook_d/2 + 0.1])\n            cube([notebook_w - 10, 0.2, 0.1], center=true);\n    }\n}\n\n// Back cover\nmodule back_cover() {\n    translate([0, 0, -notebook_d/2 + cover_th/2])\n        cube([notebook_w, notebook_h, cover_th], center=true);\n    \n    // Spine hinge\n    translate([-notebook_w/2 - 1, 0, 0])\n        cube([2, notebook_h, notebook_d], center=true);\n}\n\n// Pages block\nmodule pages() {\n    // Main page block with rounded edges\n    difference() {\n        translate([0, 0, 0])\n            cube([notebook_w - 4, notebook_h - 4, page_th], center=true);\n        \n        // Rounded corners\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*(notebook_w - 4)/2, y*(notebook_h - 4)/2, 0])\n                    cylinder(h=page_th + 1, r=2, center=true);\n            }\n        }\n    }\n    \n    // Page edges texture\n    for(i = [0 : 5 : page_th - 1]) {\n        translate([0, 0, -page_th/2 + i + 0.5])\n            for(y = [-notebook_h/2 + 3 : 2 : notebook_h/2 - 3]) {\n                translate([0, y, 0])\n                    cube([notebook_w - 4, 0.1, 0.1], center=true);\n            }\n    }\n}\n\n// Spiral rings\nmodule spiral_rings() {\n    for(i = [1 : ring_count]) {\n        y_pos = -notebook_h/2 + i * ring_spacing;\n        \n        // Ring segments\n        for(angle = [0 : 30 : 360]) {\n            rotate([0, angle, 0])\n                translate([-notebook_w/2 - 1, y_pos, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=0.8, r=ring_r);\n        }\n        \n        // Ring connectors\n        translate([-notebook_w/2 - 1, y_pos, -page_th/2 - 1])\n            cylinder(h=page_th + 2, r=0.8, center=false);\n    }\n}\n\n// Notebook label\nmodule label() {\n    translate([0, -notebook_h/2 + 15, notebook_d/2 + cover_th/2 + 0.1])\n        cube([40, 20, 0.2], center=true);\n    \n    // Label text placeholder (embossed)\n    translate([0, -notebook_h/2 + 15, notebook_d/2 + cover_th/2 + 0.3])\n        cube([35, 2, 0.2], center=true);\n}\n\n// Assemble the notebook\nunion() {\n    color(\"white\") front_cover();\n    color(\"white\") back_cover();\n    color(\"ivory\") pages();\n    color(\"silver\") spiral_rings();\n    color(\"white\") label();\n}",
    "renders": true
  },
  {
    "household_item": "palmtop",
    "openscad_code": "// Palmtop PDA - medium complexity realistic style\n// Dimensions in mm, ready for 3D printing\n\n// Overall dimensions\nbody_w = 80;\nbody_l = 120;\nbody_t = 12;\n\n// Screen dimensions\nscreen_w = 60;\nscreen_l = 45;\nscreen_th = 1.5;\n\n// Key area dimensions\nkey_w = 7;\nkey_h = 7;\nkey_gap = 2;\nkeys_x = 10;\nkeys_y = 4;\n\n// Stylus dimensions\nstylus_d = 3;\nstylus_l = 25;\n\nmodule body() {\n    difference() {\n        // Main body\n        translate([0, 0, body_t/2])\n            cube([body_w, body_l, body_t], center=true);\n        \n        // Top edge rounding\n        translate([0, 0, body_t-1])\n            cube([body_w-2, body_l-2, 2], center=true);\n        \n        // Bottom edge rounding\n        translate([0, 0, 1])\n            cube([body_w-2, body_l-2, 2], center=true);\n    }\n    \n    // Side grips\n    for(side = [-1, 1]) {\n        translate([side * (body_w/2 - 4), 0, body_t/2])\n            cube([8, body_l - 10, body_t], center=true);\n    }\n}\n\nmodule screen() {\n    // Screen bezel\n    difference() {\n        translate([0, body_l/4, body_t + screen_th/2])\n            cube([screen_w + 6, screen_l + 6, screen_th], center=true);\n        \n        // Screen opening\n        translate([0, body_l/4, body_t + screen_th])\n            cube([screen_w, screen_l, screen_th + 0.1], center=true);\n    }\n    \n    // Actual screen\n    color(\"black\")\n    translate([0, body_l/4, body_t + screen_th + 0.1])\n        cube([screen_w - 2, screen_l - 2, 0.5], center=true);\n}\n\nmodule keys() {\n    // Key area base\n    translate([0, -body_l/4, body_t + 1])\n        cube([keys_x * (key_w + key_gap) + key_gap, \n              keys_y * (key_h + key_gap) + key_gap, \n              1], center=true);\n    \n    // Individual keys\n    for(x = [0:keys_x-1]) {\n        for(y = [0:keys_y-1]) {\n            translate([\n                -keys_x * (key_w + key_gap)/2 + x * (key_w + key_gap) + key_w/2 + key_gap/2,\n                -body_l/4 - keys_y * (key_h + key_gap)/2 + y * (key_h + key_gap) + key_h/2 + key_gap/2,\n                body_t + 2\n            ])\n                cube([key_w, key_h, 0.8], center=true);\n        }\n    }\n    \n    // Navigation buttons\n    translate([0, -body_l/4 - 25, body_t + 0.5])\n        cube([30, 8, 1.5], center=true);\n    \n    // Center action button\n    translate([0, -body_l/4 - 25, body_t + 1.5])\n        cylinder(h=1, d=6, $fn=20);\n}\n\nmodule stylus_slot() {\n    // Stylus hole\n    rotate([90, 0, 0])\n    translate([body_w/2 - 5, -body_l/2 + 10, -body_t/2])\n        cylinder(h=body_l - 20, d=stylus_d + 1, $fn=20);\n    \n    // Stylus\n    color(\"silver\")\n    rotate([90, 0, 0])\n    translate([body_w/2 - 5, -body_l/2 + 10 + stylus_l, -body_t/2])\n        cylinder(h=stylus_l, d=stylus_d, $fn=20);\n}\n\nmodule buttons() {\n    // Power button\n    translate([-body_w/2 - 1, body_l/2 - 10, body_t - 5])\n        cube([2, 8, 3]);\n    \n    // Record button\n    translate([body_w/2 + 1, body_l/2 - 10, body_t - 5])\n        cube([2, 8, 3]);\n}\n\n// Generate the palmtop\nunion() {\n    body();\n    screen();\n    keys();\n    stylus_slot();\n    buttons();\n}",
    "renders": true
  },
  {
    "household_item": "handheld",
    "openscad_code": "// Handheld game console - realistic style, medium complexity\n\n// Overall dimensions\nconsole_width = 85;\nconsole_height = 45;\nconsole_depth = 15;\nwall_thickness = 2;\n\n// Screen parameters\nscreen_width = 60;\nscreen_height = 40;\nscreen_depth = 1;\nscreen_bezel = 3;\n\n// Button parameters\nbutton_diameter = 8;\nbutton_height = 2;\nbutton_spacing = 15;\ndpad_size = 20;\ndpad_height = 3;\n\n// D-pad parameters\ndpad_arm_width = 5;\ndpad_arm_length = 8;\n\n// Shoulder buttons\nshoulder_width = 25;\nshoulder_height = 5;\nshoulder_depth = 3;\n\n// Main console body\nmodule console_body() {\n    difference() {\n        // Outer shell\n        cube([console_width, console_depth, console_height], center=true);\n        \n        // Hollow interior\n        translate([0, 1, 0])\n            cube([console_width-wall_thickness*2, console_depth, console_height-wall_thickness*2], center=true);\n        \n        // Screen cutout\n        translate([0, console_depth/2 - 0.1, console_height/4])\n            cube([screen_width, wall_thickness+0.2, screen_height], center=true);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    translate([0, console_depth/2 - screen_depth/2, console_height/4])\n    difference() {\n        // Screen bezel\n        cube([screen_width+screen_bezel*2, screen_depth, screen_height+screen_bezel*2], center=true);\n        \n        // Screen opening\n        translate([0, 0.1, 0])\n            cube([screen_width, screen_depth+0.2, screen_height], center=true);\n    }\n}\n\n// Individual button\nmodule button(d=button_diameter, h=button_height) {\n    cylinder(h=h, d=d, $fn=16);\n}\n\n// D-pad cross\nmodule dpad() {\n    translate([-console_width/4, 0, -console_height/4])\n    union() {\n        // Center\n        cube([dpad_arm_width, dpad_height, dpad_arm_width], center=true);\n        \n        // Up arm\n        translate([0, 0, dpad_arm_length/2 + dpad_arm_width/2])\n            cube([dpad_arm_width, dpad_height, dpad_arm_length], center=true);\n        \n        // Down arm\n        translate([0, 0, -dpad_arm_length/2 - dpad_arm_width/2])\n            cube([dpad_arm_width, dpad_height, dpad_arm_length], center=true);\n        \n        // Left arm\n        translate([-dpad_arm_length/2 - dpad_arm_width/2, 0, 0])\n            cube([dpad_arm_length, dpad_height, dpad_arm_width], center=true);\n        \n        // Right arm\n        translate([dpad_arm_length/2 + dpad_arm_width/2, 0, 0])\n            cube([dpad_arm_length, dpad_height, dpad_arm_width], center=true);\n    }\n}\n\n// Action buttons (A, B, X, Y layout)\nmodule action_buttons() {\n    translate([console_width/4, 0, -console_height/4])\n    union() {\n        // A button (bottom)\n        translate([button_spacing/2, 0, -button_spacing/2])\n            button();\n        \n        // B button (right)\n        translate([button_spacing/2, 0, button_spacing/2])\n            button();\n        \n        // X button (left)\n        translate([-button_spacing/2, 0, -button_spacing/2])\n            button();\n        \n        // Y button (top)\n        translate([-button_spacing/2, 0, button_spacing/2])\n            button();\n    }\n}\n\n// Shoulder buttons (L and R)\nmodule shoulder_buttons() {\n    translate([0, console_depth/2 - shoulder_depth/2, console_height/2 - shoulder_height/2])\n    union() {\n        // L button\n        translate([-console_width/2 + shoulder_width/2 + 5, 0, 0])\n            cube([shoulder_width, shoulder_depth, shoulder_height], center=true);\n        \n        // R button\n        translate([console_width/2 - shoulder_width/2 - 5, 0, 0])\n            cube([shoulder_width, shoulder_depth, shoulder_height], center=true);\n    }\n}\n\n// Power LED indicator\nmodule power_led() {\n    translate([0, console_depth/2 - 1, console_height/2 - 3])\n        cylinder(h=1, d=3, $fn=16);\n}\n\n// Speaker grills\nmodule speakers() {\n    // Left speaker grill\n    translate([-console_width/2 + 10, 0, -console_height/2 + 8])\n    for(i = [-2:2]) {\n        translate([0, console_depth/2 - 1, i*3])\n            cube([8, 2, 1]);\n    }\n    \n    // Right speaker grill\n    translate([console_width/2 - 10, 0, -console_height/2 + 8])\n    for(i = [-2:2]) {\n        translate([0, console_depth/2 - 1, i*3])\n            cube([8, 2, 1]);\n    }\n}\n\n// Assemble the handheld\nunion() {\n    // Main body\n    console_body();\n    \n    // Screen\n    color(\"black\") screen();\n    \n    // Buttons and controls\n    color(\"darkgray\") dpad();\n    color(\"red\") action_buttons();\n    \n    // Shoulder buttons\n    color(\"lightgray\") shoulder_buttons();\n    \n    // Power LED\n    color(\"red\") power_led();\n    \n    // Speaker grills\n    color(\"black\") speakers();\n}",
    "renders": true
  },
  {
    "household_item": "wearable",
    "openscad_code": "// Realistic Wearable Smart-Watch (medium complexity)\n\n// Overall dimensions\nwatch_length = 70;\nwatch_width = 45;\nwatch_height = 12;\nband_thickness = 2.5;\n\n// Screen\nscreen_width = 38;\nscreen_height = 30;\nscreen_depth = 1;\n\n// Buttons\nbutton_diameter = 5;\nbutton_height = 3;\n\n// Crown\ncrown_diameter = 8;\ncrown_length = 6;\n\n// Sensor bump\nsensor_diameter = 12;\nsensor_height = 2;\n\n// Band attachment posts\npost_width = 6;\npost_length = 4;\npost_height = 3;\n\n// Main watch body\nmodule watch_body() {\n    difference() {\n        // Main case\n        union() {\n            // Curved top case\n            translate([0, 0, 0])\n                minkowski() {\n                    cube([watch_width, watch_length, watch_height], center=true);\n                    cylinder(r=2, h=0.1, center=true);\n                }\n            \n            // Band attachment posts (2x)\n            for(i = [-1, 1]) {\n                translate([0, i * (watch_length/2 - post_length/2), 0])\n                    cube([post_width, post_length, post_height], center=true);\n            }\n        }\n        \n        // Screen cutout\n        translate([0, 0, watch_height/2 - screen_depth/2])\n            cube([screen_width, screen_height, screen_depth + 1], center=true);\n        \n        // Button holes (2x)\n        translate([watch_width/2, -watch_length/4, 0])\n            rotate([0, 90, 0])\n                cylinder(h=button_height + 1, r=button_diameter/2, center=true);\n        \n        translate([watch_width/2, watch_length/4, 0])\n            rotate([0, 90, 0])\n                cylinder(h=button_height + 1, r=button_diameter/2, center=true);\n        \n        // Crown hole\n        translate([watch_width/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=crown_length + 1, r=crown_diameter/2, center=true);\n        \n        // Sensor opening\n        translate([0, 0, -watch_height/2])\n            cylinder(h=sensor_height + 1, r=sensor_diameter/2, center=false);\n    }\n}\n\n// Watch screen\nmodule screen() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, watch_height/2 - screen_depth/2])\n        cube([screen_width - 2, screen_height - 2, screen_depth], center=true);\n    \n    // Screen surface\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, watch_height/2])\n        cube([screen_width, screen_height, 0.5], center=true);\n}\n\n// Side buttons\nmodule buttons() {\n    color([0.8, 0.8, 0.8])\n    translate([watch_width/2 + button_height/2, -watch_length/4, 0])\n        rotate([0, 90, 0])\n            cylinder(h=button_height, r=button_diameter/2);\n    \n    translate([watch_width/2 + button_height/2, watch_length/4, 0])\n        rotate([0, 90, 0])\n            cylinder(h=button_height, r=button_diameter/2);\n}\n\n// Crown\nmodule crown() {\n    color([0.7, 0.7, 0.7])\n    translate([watch_width/2 + crown_length/2, 0, 0])\n        rotate([0, 90, 0])\n            union() {\n                cylinder(h=crown_length, r=crown_diameter/2);\n                // Crown grip ridges\n                for(i = [0:5:359]) {\n                    rotate([0, 0, i])\n                        translate([crown_diameter/2 - 0.5, 0, crown_length/2])\n                            cube([1, 0.5, crown_length], center=true);\n                }\n            }\n}\n\n// Heart rate sensor bump\nmodule sensor() {\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, -watch_height/2 - sensor_height/2])\n        cylinder(h=sensor_height, r=sensor_diameter/2);\n}\n\n// Watch band segment\nmodule band_segment(length, width, thickness) {\n    for(i = [0:10:length-1]) {\n        translate([0, i - length/2, 0])\n            difference() {\n                cube([width, 2, thickness], center=true);\n                // Ventilation holes\n                translate([0, 0, 0])\n                    cylinder(h=thickness + 1, r=1.5, center=true);\n            }\n    }\n}\n\n// Left watch band\nmodule left_band() {\n    color([0.1, 0.1, 0.1])\n    translate([-watch_width/2 - 10, -watch_length/2 - 30, 0])\n        rotate([90, 0, 0])\n            band_segment(50, 20, band_thickness);\n}\n\n// Right watch band\nmodule right_band() {\n    color([0.1, 0.1, 0.1])\n    translate([watch_width/2 + 10, -watch_length/2 - 30, 0])\n        rotate([90, 0, 0])\n            band_segment(50, 20, band_thickness);\n}\n\n// Assemble the watch\nunion() {\n    watch_body();\n    screen();\n    buttons();\n    crown();\n    sensor();\n    left_band();\n    right_band();\n}",
    "renders": true
  },
  {
    "household_item": "smartphone",
    "openscad_code": "// Realistic 3D-printable smartphone\n// Size: 75 mm x 150 mm x 8 mm\n\n// General parameters\nphone_w = 75;\nphone_h = 150;\nphone_d = 8;\n\n// Screen parameters\nscreen_margin = 3;\nscreen_corner_r = 8;\n\n// Button parameters\nvol_btn_w = 3;\nvol_btn_h = 15;\nvol_btn_d = 2;\npwr_btn_w = 3;\npwr_btn_h = 8;\npwr_btn_d = 2;\n\n// Camera parameters\ncam_r = 4;\ncam_h = 1;\ncam_x = -20;\ncam_y = 70;\n\n// Flash parameters\nflash_r = 2;\nflash_h = 1;\n\n// Speaker holes\nspeaker_holes = 6;\nspeaker_hole_r = 0.8;\nspeaker_hole_pitch = 3;\n\n// USB port\nusb_w = 8;\nusb_h = 2;\nusb_d = 2;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule phone_body() {\n    // Outer rounded shell\n    difference() {\n        minkowski() {\n            cube([phone_w, phone_h, phone_d], center=true);\n            sphere(r=4, $fn=24);\n        }\n        // Hollow inside\n        translate([0,0,-wall/2])\n            minkowski() {\n                cube([phone_w-wall*2, phone_h-wall*2, phone_d-wall], center=true);\n                sphere(r=4-wall, $fn=24);\n            }\n    }\n}\n\nmodule screen() {\n    // Flat glass surface\n    translate([0,0,phone_d/2-wall/2])\n        difference() {\n            minkowski() {\n                cube([phone_w-screen_margin*2, phone_h-screen_margin*2, 0.5], center=true);\n                cylinder(r=screen_corner_r, h=0.5, $fn=32);\n            }\n            // Display area\n            translate([0,0,-0.1])\n                color(\"black\")\n                minkowski() {\n                    cube([phone_w-screen_margin*2-2, phone_h-screen_margin*2-2, 0.3], center=true);\n                    cylinder(r=screen_corner_r-1, h=0.3, $fn=32);\n                }\n        }\n}\n\nmodule volume_buttons() {\n    // Left side volume up/down\n    translate([-phone_w/2-vol_btn_d/2, 30, 0])\n        cube([vol_btn_d, vol_btn_h, vol_btn_w], center=true);\n    translate([-phone_w/2-vol_btn_d/2, 10, 0])\n        cube([vol_btn_d, vol_btn_h, vol_btn_w], center=true);\n}\n\nmodule power_button() {\n    // Right side power\n    translate([phone_w/2+pwr_btn_d/2, 20, phone_d/4])\n        cube([pwr_btn_d, pwr_btn_h, pwr_btn_w], center=true);\n}\n\nmodule camera_bump() {\n    // Rear camera bump\n    translate([cam_x, cam_y, phone_d/2+cam_h/2])\n        cylinder(r=cam_r+2, h=cam_h, $fn=32);\n    // Camera lens\n    translate([cam_x, cam_y, phone_d/2+cam_h])\n        cylinder(r=cam_r, h=cam_h, $fn=32);\n    // Flash\n    translate([cam_x+8, cam_y, phone_d/2+cam_h])\n        cylinder(r=flash_r, h=flash_h, $fn=32);\n}\n\nmodule speaker_grill() {\n    // Bottom speaker grill\n    for(i=[-speaker_holes/2:speaker_holes/2-1]) {\n        translate([i*speaker_hole_pitch, -phone_h/2-wall/2, -phone_d/4])\n            rotate([90,0,0])\n                cylinder(r=speaker_hole_r, h=wall+0.1, $fn=12);\n    }\n}\n\nmodule usb_port() {\n    // Bottom USB-C port\n    translate([0, -phone_h/2-wall/2, -phone_d/4])\n        rotate([90,0,0])\n            cube([usb_w, usb_d, usb_h], center=true);\n}\n\n// Assemble the phone\nunion() {\n    phone_body();\n    screen();\n    volume_buttons();\n    power_button();\n    camera_bump();\n    speaker_grill();\n    usb_port();\n}",
    "renders": true
  },
  {
    "household_item": "phablet",
    "openscad_code": "// Phablet model (medium complexity, realistic style)\n// Dimensions based on 6.5\" screen device\n// All units in mm\n\n// Basic dimensions\nphone_w = 75;\nphone_h = 160;\nphone_d = 8.5;\nscreen_bezel = 3;\nwall_thickness = 2;\n\n// Module for rounded rectangle\nmodule rounded_rect(w, h, d, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=d, r=r, $fn=20);\n        translate([w-r, r, 0]) cylinder(h=d, r=r, $fn=20);\n        translate([w-r, h-r, 0]) cylinder(h=d, r=r, $fn=20);\n        translate([r, h-r, 0]) cylinder(h=d, r=r, $fn=20);\n    }\n}\n\n// Main phone body\nmodule phone_body() {\n    difference() {\n        // Outer rounded shell\n        rounded_rect(phone_w, phone_h, phone_d, phone_w/10);\n        \n        // Inner cavity for electronics\n        translate([wall_thickness, wall_thickness, wall_thickness]) \n            rounded_rect(phone_w-wall_thickness*2, phone_h-wall_thickness*2, phone_d-wall_thickness, (phone_w-wall_thickness*2)/10);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    // Screen glass\n    color([0.95, 0.95, 0.98])\n    translate([screen_bezel, screen_bezel, phone_d-wall_thickness]) \n        cube([phone_w-screen_bezel*2, phone_h-screen_bezel*2, wall_thickness/2]);\n    \n    // Display area (black)\n    color([0.1, 0.1, 0.1])\n    translate([screen_bezel+1, screen_bezel+5, phone_d-wall_thickness/2]) \n        cube([phone_w-screen_bezel*2-2, phone_h-screen_bezel*2-10, wall_thickness/4]);\n}\n\n// Camera bump\nmodule camera_bump() {\n    // Main bump\n    translate([phone_w-20, 15, phone_d]) \n        cylinder(h=1.5, r=8, $fn=20);\n    \n    // Camera lens\n    translate([phone_w-20, 15, phone_d+1.5]) \n        cylinder(h=0.5, r=4, $fn=20);\n    \n    // Flash\n    translate([phone_w-20, 25, phone_d+0.5]) \n        cylinder(h=0.5, r=2, $fn=20);\n}\n\n// Buttons\nmodule buttons() {\n    // Power button\n    translate([0, phone_h/2, phone_d/2]) \n        cube([wall_thickness, 15, 3]);\n    \n    // Volume buttons\n    for(i=[0:1]) {\n        translate([0, phone_h/2+25+i*10, phone_d/2]) \n            cube([wall_thickness, 8, 2]);\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    // Bottom speaker\n    translate([phone_w/2-15, 0, wall_thickness/2]) \n        for(i=[0:5]) {\n            translate([i*5, 0, 0]) \n                cube([1.5, wall_thickness, 2]);\n        }\n    \n    // Top speaker\n    translate([phone_w/2-10, phone_h-wall_thickness, phone_d/2]) \n        for(i=[0:4]) {\n            translate([i*5, 0, 0]) \n                cube([1.5, wall_thickness, 1]);\n        }\n}\n\n// USB-C port\nmodule usb_c() {\n    translate([phone_w/2-3, 0, wall_thickness]) \n        cube([6, wall_thickness, 3]);\n}\n\n// Microphone hole\nmodule mic_hole() {\n    translate([phone_w/2+10, 0, phone_d/2]) \n        rotate([90, 0, 0]) \n            cylinder(h=wall_thickness, r=0.5, $fn=10);\n}\n\n// Assemble the phone\nphone_body();\nscreen();\ncamera_bump();\nbuttons();\nspeaker_grill();\nusb_c();\nmic_hole();",
    "renders": true
  },
  {
    "household_item": "ebookreader",
    "openscad_code": "// E-reader body\nmodule body() {\n    difference() {\n        // Main shell\n        translate([-40,-55,0])\n        cube([80,110,8]);\n        \n        // Screen recess\n        translate([-38,-53,-1])\n        cube([76,90,8]);\n        \n        // Button cutout\n        translate([-5,-52,-1])\n        cube([10,12,8]);\n    }\n}\n\n// Screen\nmodule screen() {\n    color(\"black\")\n    translate([-36,-51,7.5])\n    cube([72,86,0.5]);\n}\n\n// Navigation buttons\nmodule buttons() {\n    // Power button\n    translate([0,58,7])\n    cylinder(h=2, r=2, $fn=16);\n    \n    // Page turn buttons\n    for(y=[-40,-20,0,20]) {\n        translate([42,y,7])\n        cube([4,6,1.5]);\n    }\n    \n    translate([-42, -40, 7])\n    cube([4,6,1.5]);\n    \n    translate([-42, 40, 7])\n    cube([4,6,1.5]);\n}\n\n// USB-C port\nmodule usb_port() {\n    difference() {\n        translate([-4,-56,1])\n        cube([8,4,3]);\n    }\n}\n\n// Speaker grills\nmodule speakers() {\n    for(x=[-20,20]) {\n        translate([x,-56,4])\n        difference() {\n            cube([8,4,2]);\n            for(i=[0:3]) {\n                translate([x-3.5+i,-55.5,4.5])\n                cylinder(h=1.5, r=0.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Camera bump (for scanning documents)\nmodule camera() {\n    translate([0,-35,8])\n    difference() {\n        cylinder(h=2, r=4, $fn=32);\n        cylinder(h=2.5, r=2, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    screen();\n    buttons();\n    usb_port();\n    speakers();\n    camera();\n}",
    "renders": true
  },
  {
    "household_item": "smartwatch",
    "openscad_code": "// Smartwatch - Realistic style, medium complexity\n// Designed for 3D printing with 1.2mm wall thickness\n\n// Main dimensions (mm)\nwatch_width = 42;\nwatch_height = 36;\nwatch_thickness = 11;\nscreen_width = 35;\nscreen_height = 29;\nscreen_thickness = 1;\nbutton_diameter = 4;\nbutton_height = 8;\nband_width = 22;\nband_thickness = 2.5;\nsensor_diameter = 8;\nsensor_height = 1.5;\n\n// Resolution\n$fn = 50;\n\nmodule watch_body() {\n    difference() {\n        // Main body - rounded rectangle\n        minkowski() {\n            cube([watch_width-4, watch_height-4, watch_thickness-2], center=true);\n            cylinder(r=2, h=0.1, center=true);\n        }\n        \n        // Screen cavity\n        translate([0, 0, (watch_thickness-screen_thickness)/2])\n            cube([screen_width+1, screen_height+1, screen_thickness+1], center=true);\n        \n        // Button holes\n        translate([watch_width/2+1, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=button_diameter/2+0.5, center=true);\n        \n        // Band attachment holes\n        translate([0, watch_height/2, 0])\n            cube([band_width+3, 6, watch_thickness], center=true);\n        translate([0, -watch_height/2, 0])\n            cube([band_width+3, 6, watch_thickness], center=true);\n    }\n}\n\nmodule screen() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, watch_thickness/2 - screen_thickness/2])\n        cube([screen_width, screen_height, screen_thickness], center=true);\n}\n\nmodule button() {\n    color([0.7, 0.7, 0.7])\n    translate([watch_width/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=button_height, r=button_diameter/2, center=true);\n}\n\nmodule band_attachment(y_pos) {\n    difference() {\n        // Attachment bar\n        translate([0, y_pos, 0])\n            cube([band_width, 4, watch_thickness-2], center=true);\n        \n        // Pin hole\n        translate([0, y_pos, 0])\n            rotate([90, 0, 0])\n                cylinder(h=band_width+2, r=1, center=true);\n    }\n}\n\nmodule watch_band_segment(length, end_type) {\n    // End type: 0 = straight, 1 = rounded\n    difference() {\n        union() {\n            // Main band segment\n            translate([0, 0, -band_thickness/2])\n                cube([band_width, length, band_thickness], center=true);\n            \n            // Rounded end if needed\n            if (end_type == 1) {\n                translate([0, length/2+1, 0])\n                    scale([1, 1.2, 1])\n                        sphere(r=band_width/2, center=true);\n            }\n        }\n        \n        // Adjustment holes\n        for (i = [0:5]) {\n            translate([0, -length/2+5+i*5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=band_thickness+1, r=1.5, center=true);\n        }\n    }\n}\n\nmodule heart_sensor() {\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, -watch_thickness/2-sensor_height/2])\n        cylinder(h=sensor_height, r=sensor_diameter/2, center=true);\n}\n\nmodule charging_pins() {\n    color([0.8, 0.8, 0.2])\n    translate([-8, 0, -watch_thickness/2-0.5])\n        cube([2, 3, 1], center=true);\n    translate([8, 0, -watch_thickness/2-0.5])\n        cube([2, 3, 1], center=true);\n}\n\n// Assembly\nunion() {\n    // Main watch components\n    watch_body();\n    screen();\n    button();\n    \n    // Attachments\n    band_attachment(watch_height/2+2);\n    band_attachment(-watch_height/2-2);\n    \n    // Watch bands\n    color([0.3, 0.3, 0.3])\n    translate([0, watch_height/2+2+25, 0])\n        watch_band_segment(50, 1);\n    translate([0, -watch_height/2-2-25, 0])\n        mirror([0, 1, 0])\n            watch_band_segment(50, 1);\n    \n    // Bottom sensors\n    heart_sensor();\n    charging_pins();\n}",
    "renders": true
  },
  {
    "household_item": "smartband",
    "openscad_code": "// Realistic 3D-printable smartband – OpenSCAD\n// Medium complexity, only basic primitives, loops, modules, booleans\n// Approx. 60 mm long, 25 mm wide, 12 mm thick (fits common wrists)\n\n// General settings ----------------------------------------------------------\n$fn = 50;               // Smooth curves for printing\nwall = 1.2;             // Safe wall thickness for FDM\nband_w = 22;            // Band width\nband_t = 2.5;           // Band thickness\ncase_w = 25;            // Watch-case width\ncase_l = 35;            // Watch-case length\ncase_h = 8;             // Watch-case height above band\nstrap_len = 45;         // Length of each strap segment\npin_d = 2.0;            // Spring-pin diameter\ngap = 0.3;              // Print clearance for pins / buttons\n\n// Main assembly -------------------------------------------------------------\nunion() {\n    // Left strap\n    strap(strap_len);\n\n    // Right strap (mirror left)\n    mirror([1,0,0]) strap(strap_len);\n\n    // Central watch module\n    translate([0, 0, band_t/2 + case_h/2])\n        watch_case();\n}\n\n// Strap module --------------------------------------------------------------\nmodule strap(len) {\n    // Tapered strap body\n    hull() {\n        translate([0, band_w/2, 0])\n            cube([len*0.15, wall, band_t], center=true);\n        translate([len, band_w/2 - 4, 0])\n            cube([wall, 8, band_t], center=true);\n    }\n\n    // Ventilation holes\n    for(i = [1:6:len-10])\n        translate([i, 0, 0])\n            rotate([90,0,0])\n                cylinder(h=band_w, d=2.5, center=true);\n\n    // Buckle tongue holes\n    for(i = [len-20 : 5 : len-5])\n        translate([i, 0, 0])\n            rotate([90,0,0])\n                cylinder(h=band_w, d=2.8, center=true);\n\n    // Spring-bar pin holes at inner end\n    translate([0, 0, 0])\n        rotate([90,0,0])\n            cylinder(h=case_w + 2*gap, d=pin_d + gap, center=true);\n}\n\n// Watch case module ---------------------------------------------------------\nmodule watch_case() {\n    difference() {\n        // Main rounded case body\n        minkowski() {\n            cube([case_l, case_w, case_h], center=true);\n            sphere(r=2);\n        }\n\n        // Recess for screen\n        translate([0, 0, case_h/2 - 1])\n            cube([case_l*0.8, case_w*0.75, 3], center=true);\n\n        // Side button\n        translate([case_l/2 + 1, case_w/4, 0])\n            rotate([0,90,0])\n                cylinder(h=4, d=5, center=true);\n\n        // Heart-rate sensor window\n        translate([0, 0, -case_h/2 - 0.1])\n            cylinder(h=2, d=8, center=true);\n    }\n\n    // Decorative bezel ring\n    translate([0, 0, case_h/2 - 0.5])\n        difference() {\n            cylinder(h=1.5, d=case_w*0.9);\n            cylinder(h=2, d=case_w*0.7);\n        }\n\n    // Two small alignment pins for printed strap\n    for(x = [-case_l/2 + 5, case_l/2 - 5])\n        translate([x, 0, -case_h/2 - 1])\n            cylinder(h=2, d=1.5);\n}",
    "renders": true
  },
  {
    "household_item": "smartglasses",
    "openscad_code": "// Smartglasses - realistic style, medium complexity\n// 3D printable, no overhangs, 2mm wall thickness\n\n$fn = 32;\n\nmodule frame() {\n    // Front frame\n    difference() {\n        // Main frame body\n        cube([120, 8, 5], center=true);\n        \n        // Lens cutouts left\n        translate([-30, 0, 0])\n            cylinder(h=6, r=25);\n        \n        // Lens cutouts right\n        translate([30, 0, 0])\n            cylinder(h=6, r=25);\n        \n        // Bridge cutout\n        translate([0, 0, -2])\n            cube([20, 12, 8], center=true);\n    }\n}\n\nmodule temple() {\n    // Temple arm\n    translate([0, 0, -2])\n    difference() {\n        // Main temple body\n        rotate([0, 0, 0])\n            cube([70, 8, 4], center=true);\n        \n        // Hinge cavity\n        translate([-34, 0, 0])\n            cube([6, 12, 6], center=true);\n    }\n    \n    // Temple tip curve\n    translate([33, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=15, center=true);\n}\n\nmodule hinge() {\n    // Hinge barrel\n    cylinder(h=8, r=2);\n    \n    // Hinge pin\n    translate([0, 0, -1])\n        cylinder(h=10, r=1);\n}\n\nmodule nose_pad() {\n    // Nose pad base\n    translate([0, -2, 0])\n        sphere(r=8);\n    \n    // Nose pad cushion\n    translate([0, -4, 0])\n        scale([1, 0.5, 0.8])\n            sphere(r=8);\n}\n\nmodule lens() {\n    // Lens shape\n    cylinder(h=2, r=24);\n    \n    // Lens bevel\n    translate([0, 0, -1])\n        cylinder(h=4, r1=23, r2=24);\n}\n\nmodule camera_module() {\n    // Camera housing\n    translate([0, 4, 3])\n        cube([8, 8, 4], center=true);\n    \n    // Camera lens\n    translate([0, 4, 5.5])\n        cylinder(h=2, r=3);\n    \n    // LED indicator\n    translate([4, 4, 5.5])\n        cylinder(h=1, r=1);\n}\n\nmodule speaker() {\n    // Speaker grill\n    translate([25, 0, -3])\n        difference() {\n            cube([12, 6, 3], center=true);\n            for(i = [-2:2]) {\n                translate([i*2, 0, 1.5])\n                    cube([1, 4, 3], center=true);\n            }\n        }\n}\n\n// Assembly\n// Left lens\ntranslate([-30, 0, 0])\n    lens();\n\n// Right lens\ntranslate([30, 0, 0])\n    lens();\n\n// Main frame\nframe();\n\n// Left temple\ntranslate([-60, 0, 0])\n    rotate([0, 0, 15])\n        temple();\n\n// Right temple\ntranslate([60, 0, 0])\n    rotate([0, 0, -15])\n        mirror([1, 0, 0])\n            temple();\n\n// Nose pads\ntranslate([-15, -5, -2])\n    nose_pad();\ntranslate([15, -5, -2])\n    nose_pad();\n\n// Camera module on right side\ntranslate([25, 0, 0])\n    camera_module();\n\n// Speakers\ntranslate([-60, 0, 0])\n    speaker();\ntranslate([60, 0, 0])\n    mirror([1, 0, 0])\n        speaker();",
    "renders": true
  },
  {
    "household_item": "headset",
    "openscad_code": "// Over-ear gaming headset – realistic, medium complexity\n// All dimensions are in millimeters\n\n$fn = 36;           // smooth curves\nwall = 2;           // wall thickness for 3D printing\n\nmodule earcup(outer, inner, depth) {\n    // outer shell\n    difference() {\n        cylinder(h = depth, r = outer);\n        translate([0, 0, -0.1])\n            cylinder(h = depth + 0.2, r = outer - wall);\n    }\n\n    // inner foam\n    color(\"dimgray\")\n        translate([0, 0, wall])\n            cylinder(h = depth - wall - 1, r = inner);\n}\n\nmodule headband_arc(width, thickness, radius) {\n    // create a curved beam using hull of small cylinders\n    difference() {\n        for (a = [0 : 5 : 180])\n            translate([radius * sin(a), 0, radius * cos(a)])\n                rotate([0, 90, 0])\n                    cylinder(h = width, r = thickness / 2, center = true);\n        // hollow interior\n        for (a = [0 : 5 : 180])\n            translate([radius * sin(a), 0, radius * cos(a)])\n                rotate([0, 90, 0])\n                    cylinder(h = width + 1, r = thickness / 2 - wall, center = true);\n    }\n}\n\nmodule yoke() {\n    // fork style yoke holding earcup\n    difference() {\n        // main yoke body\n        translate([0, 0, 10])\n            cube([20, 6, 20], center = true);\n        // pin hole for rotation\n        rotate([90, 0, 0])\n            translate([0, 0, -10])\n                cylinder(h = 20, r = 2.1, center = true);\n    }\n    // hinge pins\n    rotate([90, 0, 0])\n        cylinder(h = 6.2, r = 2);\n}\n\nmodule mic_boom() {\n    // straight boom\n    rotate([-30, 0, 0])\n        translate([0, 0, -60])\n            cylinder(h = 60, r = 3);\n    // mic capsule\n    translate([0, -50, -30])\n        sphere(d = 10);\n}\n\n// assembly\n// headband\nheadband_arc(width = 30, thickness = 8, radius = 45);\n\n// left earcup\ntranslate([-30, 0, -45])\n    rotate([0, 0, -90])\n        earcup(outer = 45, inner = 35, depth = 20);\n\n// right earcup\ntranslate([30, 0, -45])\n    rotate([0, 0, 90])\n        earcup(outer = 45, inner = 35, depth = 20);\n\n// left yoke\ntranslate([-30, 0, -45])\n    rotate([0, 90, 0])\n        yoke();\n\n// right yoke\ntranslate([30, 0, -45])\n    rotate([0, -90, 0])\n        yoke();\n\n// microphone boom on left\ntranslate([-30, 0, -45])\n    rotate([0, 90, 0])\n        mic_boom();\n\n// cushion on arch\nfor (a = [20 : 10 : 160])\n    translate([45 * sin(a), 0, 45 * cos(a) + 3])\n        rotate([0, 90 - a, 0])\n            scale([1, 0.3, 1])\n                cylinder(h = 30, r = 4);",
    "renders": true
  },
  {
    "household_item": "bridge",
    "openscad_code": "// Realistic medium-complexity bridge for 3D printing\n// Overall length 80 mm, width 30 mm, height 35 mm\n\n$fn = 24;\n\n// Main bridge module\nmodule bridge() {\n    // Bridge deck (roadway)\n    deck();\n\n    // Two main support arches\n    for (x = [-25, 25]) {\n        translate([x, 0, 0])\n            arch();\n    }\n\n    // Vertical support pillars\n    for (x = [-35, -20, -5, 5, 20, 35]) {\n        translate([x, 0, 0])\n            pillar();\n    }\n\n    // Side railings\n    for (y = [-14, 14]) {\n        translate([0, y, 0])\n            railing();\n    }\n}\n\n// Bridge deck with slight curvature and thickness\nmodule deck() {\n    difference() {\n        // Main deck body\n        hull() {\n            translate([-40, 0, 25])\n                cube([80, 30, 2], center = true);\n            translate([-40, 0, 23])\n                cube([80, 30, 2], center = true);\n        }\n        \n        // Road surface pattern\n        for (x = [-35:5:35]) {\n            translate([x, 0, 26])\n                cube([2, 30, 1], center = true);\n        }\n    }\n}\n\n// Gothic-style arch support\nmodule arch() {\n    union() {\n        // Arch base\n        translate([0, 0, 10])\n            cube([10, 30, 10], center = true);\n        \n        // Arch curve\n        for (a = [0:15:180]) {\n            translate([0, 0, 10 + 15 * sin(a)])\n                rotate([0, 0, a])\n                    translate([0, 0, -15])\n                        cube([10, 30, 2], center = true);\n        }\n        \n        // Arch top\n        translate([0, 0, 25])\n            cube([10, 30, 2], center = true);\n    }\n}\n\n// Cylindrical support pillars\nmodule pillar() {\n    union() {\n        // Main pillar\n        cylinder(h = 20, r = 3, center = false);\n        \n        // Pillar base\n        translate([0, 0, -2])\n            cylinder(h = 4, r = 5, center = false);\n        \n        // Pillar capital\n        translate([0, 0, 20])\n            cylinder(h = 3, r = 4, center = false);\n    }\n}\n\n// Ornamental railing\nmodule railing() {\n    difference() {\n        // Main railing beam\n        translate([0, 0, 30])\n            cube([90, 2, 5], center = true);\n        \n        // Decorative cutouts\n        for (x = [-35:10:35]) {\n            translate([x, 0, 32])\n                cube([5, 3, 3], center = true);\n        }\n    }\n    \n    // Vertical railing posts\n    for (x = [-40:10:40]) {\n        translate([x, 0, 27.5])\n            cube([2, 2, 5], center = true);\n    }\n}\n\n// Generate the complete bridge\nbridge();",
    "renders": true
  },
  {
    "household_item": "accesspoint",
    "openscad_code": "// Realistic Access Point Model - Medium Complexity\n// Overall dimensions: 80mm x 80mm x 30mm\n\n$fn = 32;\nwall_thickness = 2;\nbase_height = 6;\ntop_height = 24;\n\nmodule base_plate() {\n    difference() {\n        // Main base\n        cube([80, 80, base_height], center=true);\n        // Mounting holes\n        for(x = [-60, 60])\n            for(y = [-60, 60])\n                translate([x, y, -base_height/2])\n                    cylinder(r=3, h=base_height+1, center=false);\n    }\n}\n\nmodule top_cover() {\n    difference() {\n        // Main body with rounded corners\n        minkowski() {\n            cube([76, 76, top_height], center=true);\n            sphere(r=3);\n        }\n        \n        // LED indicator hole\n        translate([35, 0, top_height/2-1])\n            cube([20, 4, 2], center=true);\n            \n        // Ventilation slots\n        for(y = [-25, -15, -5, 5, 15, 25])\n            translate([0, y, top_height/2-2])\n                cube([70, 1, 4], center=true);\n    }\n}\n\nmodule antenna() {\n    // Antenna base\n    rotate([0, 90, 0])\n        cylinder(r=3, h=8, center=true);\n    \n    // Antenna element\n    rotate([0, 90, 0])\n        translate([0, 4, 0])\n            cylinder(r=1.5, h=25, center=true);\n}\n\nmodule ethernet_ports() {\n    // Port housing\n    translate([-38, 0, -base_height/2+3])\n        cube([6, 50, 8], center=true);\n    \n    // 4 ethernet ports\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([-38, i*10, -base_height/2+5])\n            cube([2, 8, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base components\n    base_plate();\n    \n    translate([0, 0, base_height/2])\n        top_cover();\n    \n    // Ethernet ports\n    ethernet_ports();\n    \n    // 4 antennas at corners\n    for(x = [-30, 30])\n        for(y = [-30, 30])\n            translate([x, y, base_height+top_height/2]) {\n                antenna();\n            }\n    \n    // Status LED\n    translate([35, 0, base_height+top_height/2+3])\n        sphere(r=1.5);\n}",
    "renders": true
  },
  {
    "household_item": "firewall",
    "openscad_code": "// OpenSCAD Firewall (Realistic, Medium Complexity)\n// 3D-printable network firewall appliance model\n// Approx. 80 x 50 x 25 mm\n\n// Wall thickness to ensure printability\nwall = 1.6;\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // Outer shell\n        cube([80, 50, 25]);\n\n        // Hollow out interior\n        translate([wall, wall, wall])\n            cube([80 - 2*wall, 50 - 2*wall, 25 - wall]);\n    }\n}\n\n// Front panel with ports\nmodule front_panel() {\n    difference() {\n        // Panel plate\n        translate([0, 20, 0])\n            cube([80, 10, 25]);\n\n        // LED indicators\n        for (i = [0:3]) {\n            translate([10 + i*15, 23, 20])\n                cylinder(h=3, d=4, $fn=16);\n        }\n\n        // Ethernet ports (8P8C/RJ-45)\n        for (i = [0:3]) {\n            translate([15 + i*15, 22, 10])\n                cube([8, 6, 8]);\n            translate([19 + i*15, 22, 10.5])\n                cube([0.5, 6, 7]);\n        }\n\n        // Console port (RJ-45)\n        translate([70, 22, 10])\n            cube([8, 6, 8]);\n        translate([74, 22, 10.5])\n            cube([0.5, 6, 7]);\n    }\n}\n\n// Rear panel with power and vents\nmodule rear_panel() {\n    difference() {\n        // Panel plate\n        translate([0, 20, 0])\n            cube([80, 10, 25]);\n\n        // Power connector\n        translate([10, 22, 10])\n            cube([10, 6, 8]);\n\n        // Ventilation slots\n        for (i = [0:4]) {\n            translate([30 + i*10, 21, 5])\n                cube([8, 2, 15]);\n        }\n    }\n}\n\n// Side vents for cooling\nmodule side_vents() {\n    for (side = [0, 1]) {\n        mirror([0, side, 0])\n            for (i = [0:3]) {\n                translate([5 + i*20, 0, 10])\n                    cube([15, wall, 5]);\n            }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [10, 70]) {\n        for (y = [10, 40]) {\n            translate([x, y, -1])\n                cylinder(h=2, d=4, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chassis();\n    front_panel();\n    rear_panel();\n    side_vents();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "gateway",
    "openscad_code": "// Realistic Gateway in medium complexity\n// Designed for 3D printing - no overhangs, 2mm walls\n\n$fn = 32;\n\n// Overall dimensions\ngateway_width = 80;\ngateway_height = 60;\ngateway_depth = 20;\nwall_thickness = 2;\n\nmodule arch_base() {\n    // Main gateway block with arched opening\n    difference() {\n        // Outer box\n        cube([gateway_width, gateway_depth, gateway_height]);\n        \n        // Inner arch opening\n        translate([wall_thickness, -1, wall_thickness])\n            cube([gateway_width - 2*wall_thickness, gateway_depth + 2, gateway_height - wall_thickness]);\n        \n        // Arch curve\n        translate([gateway_width/2, gateway_depth/2, gateway_height - 20])\n            rotate([90, 0, 0])\n                cylinder(h=gateway_width - 2*wall_thickness + 2, r=20, center=true);\n    }\n}\n\nmodule battlements() {\n    // Crenellations on top of gateway\n    battlement_width = 6;\n    battlement_gap = 4;\n    total_battlement = battlement_width + battlement_gap;\n    num_battlements = floor(gateway_width / total_battlement);\n    \n    for (i = [0:num_battlements-1]) {\n        translate([i * total_battlement + battlement_gap/2, 0, gateway_height])\n            cube([battlement_width, gateway_depth, 4]);\n    }\n}\n\nmodule support_pillars() {\n    // Pillars at each side for realistic look\n    pillar_width = 4;\n    pillar_height = gateway_height;\n    \n    // Left pillar\n    translate([-pillar_width, 0, 0])\n        cube([pillar_width, gateway_depth, pillar_height]);\n    \n    // Right pillar\n    translate([gateway_width, 0, 0])\n        cube([pillar_width, gateway_depth, pillar_height]);\n}\n\nmodule door_details() {\n    // Wooden door texture with planks\n    plank_width = 2;\n    plank_gap = 1;\n    door_height = gateway_height - 20 - wall_thickness;\n    door_width = gateway_width - 2*wall_thickness - 6;\n    \n    translate([gateway_width/2 - door_width/2, gateway_depth/2 + 0.5, wall_thickness])\n    for (i = [0:floor(door_width/(plank_width+plank_gap))-1]) {\n        translate([i*(plank_width+plank_gap), 0, 0])\n            cube([plank_width, 0.5, door_height]);\n    }\n    \n    // Metal bands\n    translate([gateway_width/2 - door_width/2 - 1, gateway_depth/2 + 0.5, wall_thickness + door_height/3])\n        cube([door_width + 2, 0.5, 2]);\n    \n    translate([gateway_width/2 - door_width/2 - 1, gateway_depth/2 + 0.5, wall_thickness + 2*door_height/3])\n        cube([door_width + 2, 0.5, 2]);\n}\n\nmodule hinges() {\n    // Door hinges on left side\n    for (i = [1:3]) {\n        translate([wall_thickness - 1, gateway_depth/2 + 0.5, wall_thickness + i*15])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=1, center=true);\n    }\n}\n\nmodule flag_poles() {\n    // Flag poles on top of battlements\n    pole_height = 12;\n    pole_radius = 1;\n    \n    // Left pole\n    translate([10, gateway_depth/2, gateway_height + 4])\n        cylinder(h=pole_height, r=pole_radius);\n    \n    // Right pole\n    translate([gateway_width - 10, gateway_depth/2, gateway_height + 4])\n        cylinder(h=pole_height, r=pole_radius);\n}\n\n// Assembly\nunion() {\n    arch_base();\n    battlements();\n    support_pillars();\n    door_details();\n    hinges();\n    flag_poles();\n}",
    "renders": true
  },
  {
    "household_item": "loadbalancer",
    "openscad_code": "// OpenSCAD Load Balancer (realistic style, medium complexity)\n// Overall dimensions: 80mm x 60mm x 20mm (rack mount style)\n\n// Wall thickness and clearance constants\nwall = 2;\nclear = 0.4;\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 20], center=true);\n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([80-wall*2, 60-wall*2, 20-wall], center=true);\n    }\n}\n\n// Front panel with ports\nmodule front_panel() {\n    difference() {\n        // Panel plate\n        translate([0, -30, 0])\n            cube([80, 2, 20], center=true);\n        \n        // Ethernet ports (8x RJ45)\n        for(i=[-3.5:1:3.5]) {\n            translate([i*9, -30.5, 5])\n                cylinder(h=3, r=5.5, $fn=30);\n            // Port LEDs\n            translate([i*9+3, -30.5, 8.5])\n                cube([1.5, 1, 1], center=true);\n        }\n        \n        // Console port (DB9)\n        translate([-25, -30.5, -5])\n            cube([12, 1, 8], center=true);\n            \n        // Power LED\n        translate([30, -30.5, 7])\n            cylinder(h=1, r=2, $fn=20);\n    }\n}\n\n// Rear panel with power and fans\nmodule rear_panel() {\n    difference() {\n        // Panel plate\n        translate([0, 30, 0])\n            cube([80, 2, 20], center=true);\n        \n        // Power connector\n        translate([25, 30.5, 0])\n            cube([15, 1, 8], center=true);\n            \n        // Fan vents (3x 40mm fans)\n        for(i=[-1:1:1]) {\n            translate([i*25, 30.5, 0])\n                difference() {\n                    cube([20, 1, 15], center=true);\n                    for(x=[-8:4:8])\n                        for(y=[-6:3:6])\n                            translate([x, 0, y])\n                                cube([1.5, 2, 1.5], center=true);\n                }\n        }\n    }\n}\n\n// Side vents for cooling\nmodule side_vents() {\n    for(side=[-1,1]) {\n        translate([side*40, 0, 0]) {\n            rotate([0,90,0]) {\n                difference() {\n                    cube([60, 20, 2], center=true);\n                    for(i=[-25:5:25])\n                        translate([i, 0, 0])\n                            cube([3, 15, 1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Mounting ears\nmodule mounting_ears() {\n    for(side=[-1,1]) {\n        translate([side*42, 0, 0]) {\n            difference() {\n                cube([4, 60, 10], center=true);\n                // Mounting holes\n                translate([0, -25, 0])\n                    cylinder(h=5, r=3, center=true, $fn=20);\n                translate([0, 25, 0])\n                    cylinder(h=5, r=3, center=true, $fn=20);\n            }\n        }\n    }\n}\n\n// Top vents\nmodule top_vents() {\n    translate([0, 0, 10]) {\n        difference() {\n            cube([70, 50, 1], center=true);\n            for(x=[-30:5:30])\n                for(y=[-20:5:20])\n                    translate([x, y, 0])\n                        cube([3, 3, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chassis();\n    front_panel();\n    rear_panel();\n    side_vents();\n    mounting_ears();\n    top_vents();\n}",
    "renders": true
  },
  {
    "household_item": "storagearray",
    "openscad_code": "// OpenSCAD Storage Array (medium complexity, realistic style)\n// Overall dimensions: 80 x 60 x 40 mm (LxWxH)\n\n// Parameters for easy tuning\nbay_w = 12;\nbay_h = 9;\nbay_d = 50;\nwall_t = 2;\nbase_h = 4;\nrows = 4;\ncols = 5;\n\n// Main chassis block\nmodule chassis() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 40], center=true);\n        // Hollow out interior\n        translate([0, 0, 2])\n            cube([80 - 2*wall_t, 60 - 2*wall_t, 40 - wall_t - base_h], center=true);\n    }\n}\n\n// Cooling vent slots along sides\nmodule side_vents() {\n    for (z = [-14:8:14])\n    translate([-40, 0, z])\n        rotate([0, 90, 0])\n            cylinder(h=2, d1=4, d2=2, $fn=16);\n}\n\n// Drive bay divider walls\nmodule bay_walls() {\n    // Vertical dividers front-back\n    for (i = [1:cols-1])\n        translate([-40 + i*(80/cols), 0, 0])\n            cube([wall_t, 60, 40 - base_h], center=true);\n    // Horizontal dividers left-right\n    for (j = [1:rows-1])\n        translate([0, -30 + j*(60/rows), 0])\n            cube([80, wall_t, 40 - base_h], center=true);\n}\n\n// Individual disk drive placeholder\nmodule disk_drive() {\n    // Simplified 2.5\" drive outline\n    color(\"silver\")\n    translate([0, 0, 0])\n        cube([bay_w - 1, bay_h - 1, bay_d - 2], center=true);\n}\n\n// Populate bays with drives\nmodule populated_bays() {\n    for (i = [0:cols-1])\n        for (j = [0:rows-1])\n            translate([\n                -40 + (i + 0.5)*(80/cols),\n                -30 + (j + 0.5)*(60/rows),\n                -20 + base_h + bay_h/2\n            ])\n                disk_drive();\n}\n\n// Front bezel with LEDs\nmodule front_bezel() {\n    difference() {\n        // Bezel plate\n        translate([0, 30, 0])\n            cube([80, 2, 40], center=true);\n        // LED holes\n        for (i = [0:cols-1])\n            translate([\n                -40 + (i + 0.5)*(80/cols),\n                31,\n                -10\n            ])\n                cylinder(h=3, d=2, $fn=8);\n    }\n    // LED lenses\n    for (i = [0:cols-1])\n        translate([\n            -40 + (i + 0.5)*(80/cols),\n            30,\n            -10\n        ])\n            color(\"blue\")\n                cylinder(h=1, d=2, $fn=8);\n}\n\n// Rack mounting ears\nmodule rack_ears() {\n    for (s = [-1, 1])\n    translate([0, s*35, 0])\n        difference() {\n            // Ear plate\n            cube([80, 8, 20], center=true);\n            // Mounting holes\n            translate([-30, 0, 5])\n                cylinder(h=10, d=3, $fn=16);\n            translate([30, 0, 5])\n                cylinder(h=10, d=3, $fn=16);\n        }\n}\n\n// Assembly\nunion() {\n    chassis();\n    bay_walls();\n    populated_bays();\n    front_bezel();\n    rack_ears();\n    // Side vents left\n    side_vents();\n    // Side vents right (mirrored)\n    mirror([1,0,0]) side_vents();\n}",
    "renders": true
  },
  {
    "household_item": "san",
    "openscad_code": "// Realistic SAN (Storage Area Network) appliance\n// Medium complexity 3D printable model\n// Size: 80mm wide x 70mm deep x 40mm high\n\nmodule san_body() {\n    // Main chassis - hollow box with wall thickness 2mm\n    difference() {\n        // Outer shell\n        cube([80, 70, 40], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cube([76, 66, 36], center=true);\n        \n        // Ventilation slots on top\n        for(x = [-30:10:30]) {\n            translate([x, 0, 19])\n                cube([8, 65, 2]);\n        }\n    }\n}\n\nmodule drive_bay(count) {\n    // Individual 3.5\" drive bay slot\n    for(i = [0:count-1]) {\n        translate([-30 + i * 20, 0, 0]) {\n            // Bay frame\n            difference() {\n                cube([18, 65, 15], center=true);\n                translate([0, 0, -2])\n                    cube([16, 63, 12], center=true);\n            }\n            \n            // Drive caddy handle\n            translate([0, -28, 5])\n                cube([2, 8, 2], center=true);\n            \n            // Drive LED indicator\n            translate([0, 30, 5])\n                cylinder(h=2, r=1, $fn=8);\n        }\n    }\n}\n\nmodule front_bezel() {\n    // Front panel with branding and indicators\n    translate([0, -35, 0]) {\n        difference() {\n            cube([78, 2, 38], center=true);\n            \n            // Power button\n            translate([30, 0, 15])\n                cylinder(h=3, r=4, $fn=16);\n            \n            // Status LEDs\n            translate([0, 0, 15])\n                cylinder(h=3, r=2, $fn=8);\n            translate([-15, 0, 15])\n                cylinder(h=3, r=2, $fn=8);\n            \n            // Label area\n            translate([-20, 0, -10])\n                cube([15, 1, 5], center=true);\n        }\n    }\n}\n\nmodule rear_io() {\n    // Rear I/O panel\n    translate([0, 35, 0]) {\n        difference() {\n            cube([78, 2, 38], center=true);\n            \n            // Power connector\n            translate([25, 0, 15])\n                cube([10, 2, 8], center=true);\n            \n            // Network ports\n            for(i = [0:1]) {\n                translate([5 + i * 15, 0, 15])\n                    cube([8, 2, 6], center=true);\n            }\n            \n            // USB ports\n            for(i = [0:1]) {\n                translate([-15 - i * 10, 0, 15])\n                    cube([6, 2, 4], center=true);\n            }\n            \n            // Management port\n            translate([-30, 0, 15])\n                cube([6, 2, 4], center=true);\n        }\n    }\n}\n\nmodule feet() {\n    // Rubber feet for stability\n    for(x = [-30, 30]) {\n        for(y = [-25, 25]) {\n            translate([x, y, -21])\n                cylinder(h=3, r=2, $fn=8);\n        }\n    }\n}\n\n// Assemble the SAN appliance\nunion() {\n    san_body();\n    drive_bay(4);\n    front_bezel();\n    rear_io();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "blade",
    "openscad_code": "// Realistic medium-complexity sword blade, 3D-printable\n// Blade length ≈ 90 mm, max thickness ≈ 6 mm\n\nmodule blade_fullers(n = 2, h = 60, w = 8, d = 1.2){\n    // longitudinal grooves for weight reduction\n    for(i=[1:n]){\n        translate([0, 0, -h/2 + (i-1)*h/(n+1) + 1])\n            rotate([0,90,0])\n                cylinder(h = w+1, r1 = d/2, r2 = d/2, $fn=12);\n    }\n}\n\nmodule blade_tang(){\n    // rectangular tang for handle mounting\n    difference(){\n        translate([0, -20, 0])\n            cube([6, 25, 5], center=true);\n        // pin hole\n        translate([0, -28, 0])\n            rotate([0,90,0])\n                cylinder(h = 7, r = 1.4, $fn=12);\n    }\n}\n\nmodule blade_ricasso(){\n    // unsharpened section above guard\n    translate([0, 0, 0])\n        cube([8, 15, 4], center=true);\n}\n\nmodule blade_body(){\n    // main single-edge blade\n    hull(){\n        // spine\n        translate([0, 40, 0])\n            cube([3, 60, 4.5], center=true);\n        // edge\n        translate([0, -45, 0])\n            cube([0.2, 60, 0.8], center=true);\n    }\n    // sharpened bevels\n    for(side=[-1,1]){\n        translate([0, -20, side*2.25])\n            rotate([side*30,0,0])\n                cube([0.5, 40, 4], center=true);\n    }\n    // fullers\n    blade_fullers();\n}\n\nmodule blade_tip(){\n    // false edge tip geometry\n    hull(){\n        translate([0, -45, 0])\n            cube([0.2, 10, 0.8], center=true);\n        translate([0, -54, 0])\n            sphere(r=0.4, $fn=12);\n    }\n}\n\nmodule sword_blade(){\n    difference(){\n        union(){\n            blade_tang();\n            blade_ricasso();\n            blade_body();\n            blade_tip();\n        }\n        // printing-friendly chamfer on spine\n        translate([0, 40, 2.5])\n            rotate([90,0,0])\n                cylinder(h = 60, r1 = 2, r2 = 0.5, $fn=12);\n    }\n}\n\n// center at origin\ntranslate([0, 0, 0])\n    sword_blade();",
    "renders": true
  },
  {
    "household_item": "rackmount",
    "openscad_code": "// 1U rackmount blank panel – 3U wide for printing\n$fn = 32;\n\n// Overall dimensions (19\" rack standard, scaled to 80 mm print size)\nrack_w = 80;                 // scaled “19 inch”\nrack_h = 35;                 // 1U height\npanel_t = 3;                 // sheet-metal thickness\nhole_d = 3;                  // mounting screw clearance\nedge_margin = 5;             // from edge to hole centre\nvent_slot_w = 2;\nvent_slot_h = 20;\nslot_pitch = 6;\n\n// Helper module for rounded edges\nmodule fillet_box(size, r) {\n    hull() {\n        for(dx=[0,size.x], dy=[0,size.y], dz=[0,size.z]) {\n            translate([dx?size.x-r:r, dy?size.y-r:r, dz?size.z-r:r])\n                sphere(r);\n        }\n    }\n}\n\n// Ventilation slot\nmodule vent_slot() {\n    cube([vent_slot_w, vent_slot_h, panel_t+0.1], center=true);\n}\n\n// Panel body\nmodule panel() {\n    difference() {\n        // Main plate with rounded edges\n        fillet_box([rack_w, rack_h, panel_t], 2);\n\n        // Mounting holes\n        translate([edge_margin, edge_margin, -1])\n            cylinder(h=panel_t+2, d=hole_d, center=false);\n        translate([edge_margin, rack_h-edge_margin, -1])\n            cylinder(h=panel_t+2, d=hole_d, center=false);\n        translate([rack_w-edge_margin, edge_margin, -1])\n            cylinder(h=panel_t+2, d=hole_d, center=false);\n        translate([rack_w-edge_margin, rack_h-edge_margin, -1])\n            cylinder(h=panel_t+2, d=hole_d, center=false);\n\n        // Ventilation slots\n        for(x=[slot_pitch:slot_pitch:rack_w-slot_pitch])\n            translate([x, rack_h/2, 0])\n                vent_slot();\n    }\n}\n\n// Simple reinforcing ribs on back\nmodule ribs() {\n    thickness = 1;\n    for(x=[slot_pitch*2:slot_pitch*2:rack_w-slot_pitch*2]) {\n        translate([x, rack_h/2, -panel_t/2-thickness/2])\n            cube([1, rack_h-4, thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    panel();\n    ribs();\n}",
    "renders": true
  },
  {
    "household_item": "tower",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Tower\n// Overall footprint: 60 x 60 mm, height: 90 mm\n\n// Wall and floor thickness tuned for 0.4 mm nozzle, 0.2 mm layer height\nwall = 1.6;          // 4 perimeters\nfloor = 0.8;         // 4 solid layers\n$fn = 32;            // Smooth curves without overhangs\n\n// Main tower body\nmodule tower_body() {\n    difference() {\n        // Solid octagonal body\n        cylinder(h = 70, r = 30, $fn = 8);\n\n        // Hollow interior\n        translate([0, 0, floor])\n            cylinder(h = 70 - floor, r = 30 - wall, $fn = 8);\n    }\n}\n\n// Stone block texture using small cubes\nmodule stone_blocks() {\n    block_size = 4;\n    gap = 0.4;\n    for (z = [0 : block_size + gap : 70 - block_size]) {\n        angle_step = 360 / 8;\n        for (a = [0 : angle_step : 359]) {\n            r = 30 + 0.2;  // Slightly proud of wall\n            x = r * cos(a);\n            y = r * sin(a);\n            translate([x, y, z])\n                rotate([0, 0, a])\n                cube([block_size, block_size * 0.8, block_size], center = true);\n        }\n    }\n}\n\n// Arrow slit windows\nmodule windows() {\n    for (h = [25, 45, 65]) {\n        rotate([0, 0, 45])  // Rotate 45° to align with flat faces\n            translate([22, 0, h])\n                rotate([0, 90, 0])\n                cube([15, wall, 3]);\n    }\n}\n\n// Crenellated top\nmodule battlements() {\n    teeth = 16;  // Two per octagon edge\n    tooth_w = 60 / teeth;\n    tooth_h = 8;\n    for (i = [0 : teeth - 1]) {\n        angle = i * 360 / teeth;\n        r = 30;\n        x = r * cos(angle);\n        y = r * sin(angle);\n        translate([x, y, 70])\n            rotate([0, 0, angle])\n            cube([tooth_w * 0.7, wall * 2, tooth_h], center = true);\n    }\n}\n\n// Conical roof with minimal overhang\nmodule roof() {\n    difference() {\n        cylinder(h1 = 0, h2 = 20, r1 = 32, r2 = 15, $fn = 32, center = false);\n        translate([0, 0, 1])\n            cylinder(h1 = 0, h2 = 19, r1 = 32 - wall, r2 = 15 - wall, $fn = 32);\n    }\n}\n\n// Structural door arch\nmodule door() {\n    difference() {\n        // Arch stone frame\n        translate([0, 30, 0])\n            rotate([90, 0, 0])\n            cylinder(h = wall * 2, r = 8, $fn = 32);\n        // Passage\n        translate([0, 30 + 0.2, floor + 0.2])\n            rotate([90, 0, 0])\n            cylinder(h = wall * 2 + 0.4, r = 8 - wall, $fn = 32);\n    }\n    // Door base\n    translate([0, 30 - wall / 2, 0])\n        cube([16, wall, floor * 8], center = true);\n}\n\n// Assemble the tower\nunion() {\n    tower_body();\n    stone_blocks();\n    windows();\n    battlements();\n    translate([0, 0, 70])\n        roof();\n    door();\n}",
    "renders": true
  },
  {
    "household_item": "cluster",
    "openscad_code": "// Realistic Raspberry-Pi style cluster (4 nodes)\n// Overall footprint ≈ 80 x 80 x 32 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Basic dimensions\nboard_w = 56;\nboard_h = 85;\nboard_t = 1.6;\n\nmodule pcb() {\n    color([0.05, 0.45, 0.1])\n    difference() {\n        // Main PCB\n        cube([board_w, board_h, board_t], center = true);\n        \n        // Mounting holes (2.5 mm diameter)\n        for (p = [[-20, -37.5], [20, -37.5], [20, 37.5], [-20, 37.5]])\n            translate([p.x, p.y, 0])\n                cylinder(h = board_t + 1, d = 2.5, $fn = 20, center = true);\n    }\n}\n\n// USB-C power plug\nmodule usbc_port() {\n    color(\"black\")\n    translate([board_w/2 + 2, 5, 0])\n        cube([4, 8, 3], center = true);\n}\n\n// Ethernet port\nmodule eth_port() {\n    color(\"gray20\")\n    translate([board_w/2 + 2, -15, 0])\n        cube([4, 14, 7], center = true);\n}\n\n// GPIO header\nmodule gpio_header() {\n    color(\"black\")\n    translate([0, board_h/2 - 5, (board_t + 2.54)/2])\n        for (x = [-18, -12, -6, 0, 6, 12, 18])\n            for (y = [0, 2.54])\n                translate([x, y, 0])\n                    cube([2.54, 2.54, 5], center = true);\n}\n\n// SOC heatsink\nmodule heatsink() {\n    color(\"gray40\")\n    translate([0, 0, board_t/2 + 3])\n        difference() {\n            cube([14, 14, 5], center = true);\n            for (i = [-6:2:6])\n                translate([i, 0, 2])\n                    cube([1, 14, 6], center = true);\n        }\n}\n\n// Single Pi node assembly\nmodule pi_node() {\n    union() {\n        pcb();\n        usbc_port();\n        eth_port();\n        gpio_header();\n        heatsink();\n    }\n}\n\n// Case frame\nmodule frame() {\n    difference() {\n        // Main tray\n        color(\"white\")\n        cube([82, 82, 32], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cube([82 - 2*wall, 82 - 2*wall, 32 - wall], center = true);\n        \n        // Ventilation slots on sides\n        for (i = [-30:10:30])\n            translate([0, i, 0])\n                rotate([90, 0, 0])\n                    cube([40, 1.5, 2], center = true);\n    }\n}\n\n// Stack pillars (4 pillars)\nmodule pillars() {\n    for (p = [[-30, -30], [30, -30], [30, 30], [-30, 30]])\n        translate([p.x, p.y, 0])\n            cylinder(h = 32, d = 6, $fn = 20);\n}\n\n// Assembly\ndifference() {\n    union() {\n        frame();\n        pillars();\n    }\n    \n    // Cut-out pocket for each Pi board (4 nodes)\n    for (x = [-20, 20])\n        for (y = [-20, 20])\n            translate([x, y, 8])\n                cube([board_w + 2, board_h + 2, 12], center = true);\n}\n\n// Place the four Pi boards\nfor (x = [-20, 20])\n    for (y = [-20, 20])\n        translate([x, y, 14])\n            rotate([0, 0, 90])\n                pi_node();",
    "renders": true
  },
  {
    "household_item": "node",
    "openscad_code": "// Realistic Medium-Complexity Node – 3D-printable RJ-45 / Ethernet Jack\n// Overall footprint ~50 mm × 25 mm × 17 mm, all walls ≥1 mm, no steep overhangs.\n\n// ---------- Parameters ----------\njack_width   = 15.4;   // Standard 8P8C\njack_height  = 8.0;\njack_depth   = 13.5;\nwall         = 1.2;    // Minimum printable wall\npcb_thick    = 1.6;\nshell_l      = 50;\nshell_w      = 25;\nshell_h      = 17;\n\n// ---------- Helper module for rounded cube ----------\nmodule roundedCube(size, r, fn=16)\n{\n    sz = size[0]==undef?[size,size,size]:size;\n    translate([r,0,0])\n        minkowski()\n        {\n            cube([sz.x-2*r, sz.y-2*r, sz.z-2*r], center=true);\n            sphere(r=r,$fn=fn);\n        }\n}\n\n// ---------- RJ45 jack internal void ----------\nmodule jack_void()\n{\n    // Main cavity\n    translate([shell_l/2 - jack_depth - wall, 0, shell_h/2-wall-jack_height/2])\n        cube([jack_depth+0.4, jack_width+0.4, jack_height+0.4], center=true);\n\n    // Latch relief\n    translate([shell_l/2 - jack_depth - wall - 1, 0, shell_h/2-wall-0.8])\n        cube([3, 5, 1.6], center=true);\n}\n\n// ---------- LED light-pipe holes ----------\nmodule led_holes()\n{\n    for(x=[-8,8])\n        translate([shell_l/2-jack_depth-3, x, shell_h/2+2])\n            rotate([90,0,0])\n                cylinder(h=4,d=2.2,$fn=8);\n}\n\n// ---------- Shell ----------\nmodule shell()\n{\n    difference()\n    {\n        union()\n        {\n            // Main body\n            roundedCube([shell_l, shell_w, shell_h], 2);\n            \n            // Mounting ears\n            for(x=[-1,1])\n                translate([x*(shell_l/2 - 3), (shell_w/2+3), 0])\n                    cube([6,6,6], center=true);\n        }\n        \n        // Internal cavity\n        jack_void();\n        \n        // LED holes\n        led_holes();\n        \n        // PCB slot\n        translate([0,0,pcb_thick/2])\n            cube([shell_l-2*wall, shell_w-2*wall, pcb_thick+0.2], center=true);\n        \n        // Wire exit\n        translate([0,0,-shell_h/2+wall/2+0.1])\n            cube([shell_l-8, 10, wall+0.2], center=true);\n        \n        // Mounting holes\n        for(x=[-1,1])\n            for(y=[-1,1])\n                translate([x*(shell_l/2-4), y*(shell_w/2-4), -shell_h/2+4])\n                    cylinder(h=shell_h,d=3.2,$fn=16);\n    }\n}\n\n// ---------- Label faceplate ----------\nmodule label()\n{\n    color(\"black\")\n    translate([shell_l/2-0.5,0,shell_h/2-4])\n        rotate([0,90,0])\n            cylinder(h=shell_w-4,d=0.8,$fn=64);\n}\n\n// ---------- Assembly ----------\nshell();\nlabel();",
    "renders": true
  },
  {
    "household_item": "datacenter",
    "openscad_code": "// OpenSCAD Datacenter Model – realistic, medium complexity\n// Overall footprint ≈ 90 mm x 60 mm x 60 mm\n\n// Wall thickness for 3D-printability\nwall = 2.0;\n\n// Main building shell\nmodule building() {\n    difference() {\n        // Outer block\n        cube([90, 60, 60], center = true);\n\n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([90 - 2*wall, 60 - 2*wall, 60 - wall], center = true);\n    }\n}\n\n// Rows of server racks\nmodule rack_row(x_pos, y_pos, count = 3) {\n    for (i = [0 : count-1]) {\n        translate([x_pos + i*10 - (count-1)*5, y_pos, 0])\n            cube([8, 5, 50], center = true);\n    }\n}\n\n// Raised-floor tile with circular vent\nmodule vent_tile(x, y) {\n    difference() {\n        translate([x, y, -30])\n            cube([20, 20, 2], center = true);\n\n        translate([x, y, -29.5])\n            cylinder(h = 3, r = 5, $fn = 24);\n    }\n}\n\n// Cooling unit (roof-top HVAC)\nmodule cooling_unit() {\n    translate([0, 0, 32]) {\n        // Base frame\n        cube([30, 20, 8], center = true);\n\n        // Cylindrical fans\n        translate([-10, 0, 4])\n            cylinder(h = 8, r = 4, $fn = 20);\n\n        translate([10, 0, 4])\n            cylinder(h = 8, r = 4, $fn = 20);\n    }\n}\n\n// Small door on front facade\nmodule door() {\n    translate([0, -31, -10])\n        cube([12, 1, 20], center = true);\n}\n\n// Window strips on sides\nmodule windows() {\n    for (z = [-20 : 10 : 20]) {\n        translate([46, 0, z])\n            cube([1, 50, 8], center = true);\n    }\n}\n\n// Assemble complete datacenter\nunion() {\n    building();\n    rack_row(-20, 15, 4);   // Front row\n    rack_row(-20, -15, 4);  // Back row\n    for (tx = [-30 : 20 : 30])\n        for (ty = [-20 : 20 : 20])\n            vent_tile(tx, ty);\n    cooling_unit();\n    door();\n    windows();\n}",
    "renders": true
  },
  {
    "household_item": "supercomputer",
    "openscad_code": "// Supercomputer in realistic style\n// Rack-mounted blade server array\n\n$fn = 32;\nwall = 2;           // wall thickness for printability\nrack_w = 60;\nrack_h = 100;\nrack_d = 40;\n\n// Main rack frame\nmodule rack_frame() {\n    // Left and right posts\n    for (x = [0, rack_w - wall*2])\n        translate([x, 0, 0])\n            cube([wall, rack_h, wall]);\n\n    // Front top and bottom rails\n    translate([0, 0, 0])\n        cube([rack_w, wall, wall]);\n    translate([0, 0, rack_d - wall])\n        cube([rack_w, wall, wall]);\n    \n    // Rear top and bottom rails\n    translate([0, rack_h - wall, 0])\n        cube([rack_w, wall, wall]);\n    translate([0, rack_h - wall, rack_d - wall])\n        cube([rack_w, wall, wall]);\n}\n\n// Server blade module\nmodule blade(blade_h = 10, front = true) {\n    // Main blade body\n    translate([wall*2, 0, wall*2])\n        cube([rack_w - wall*4, blade_h, rack_d - wall*4]);\n\n    // Front panel with vents\n    if (front) {\n        // Frame\n        translate([wall*2 - 0.2, 0, wall*2 - 0.2])\n            cube([rack_w - wall*4 + 0.4, blade_h, 0.4]);\n        \n        // Vent slots\n        for (y = [blade_h/4 : blade_h/8 : blade_h*3/4])\n            translate([wall*3, y, wall*2 - 0.1])\n                cube([rack_w - wall*6, blade_h/16, 0.2]);\n        \n        // LED indicators\n        translate([wall*3, blade_h/2, wall*2 + 0.1])\n            color(\"red\") sphere(1);\n        translate([rack_w - wall*3, blade_h/2, wall*2 + 0.1])\n            color(\"green\") sphere(1);\n    }\n    \n    // Connector at rear\n    translate([rack_w/2, blade_h/2, rack_d - wall*2 - 0.2])\n        cube([4, 2, 1]);\n}\n\n// Cooling fan module\nmodule fan_unit() {\n    // Fan housing\n    translate([wall*2, 0, wall*2])\n        cube([rack_w - wall*4, 8, rack_d - wall*4]);\n    \n    // Fan blades (simplified)\n    translate([rack_w/2, 4, rack_d/2])\n        rotate([0, 90, 0])\n            cylinder(h=6, r=8);\n    \n    // Fan guard\n    translate([wall*2 - 0.2, 0, wall*2 - 0.2])\n        cube([rack_w - wall*4 + 0.4, 8, 0.4]);\n}\n\n// Power supply unit\nmodule psu() {\n    // PSU housing\n    translate([wall*2, 0, wall*2])\n        cube([rack_w - wall*4, 12, rack_d - wall*4]);\n    \n    // Power connector\n    translate([rack_w - wall*4 - 3, 6, wall*2 - 0.2])\n        cube([6, 4, 0.4]);\n    \n    // Ventilation holes\n    for (x = [wall*4 : 6 : rack_w - wall*4 - 6])\n        translate([x, 3, wall*2 - 0.1])\n            cube([2, 6, 0.2]);\n}\n\n// Assemble the supercomputer\nunion() {\n    // Main rack\n    rack_frame();\n    \n    // Stack of server blades\n    translate([0, 10, 0])\n        blade(8, true);\n    translate([0, 20, 0])\n        blade(8, true);\n    translate([0, 30, 0])\n        blade(8, true);\n    translate([0, 40, 0])\n        blade(8, true);\n    \n    // Cooling fan units\n    translate([0, 50, 0])\n        fan_unit();\n    translate([0, 60, 0])\n        fan_unit();\n    \n    // Power supplies\n    translate([0, 72, 0])\n        psu();\n    translate([0, 86, 0])\n        psu();\n}",
    "renders": true
  },
  {
    "household_item": "quantumcomputer",
    "openscad_code": "// Quantum Computer - Realistic Style, Medium Complexity\n// Designed for 3D printing, no overhangs, wall thickness 2mm\n\n$fn = 32;\n\n// Main parameters\nbase_width = 80;\nbase_depth = 60;\nbase_height = 8;\ngold_layer_height = 2;\nchip_size = 20;\nchip_height = 3;\ncooling_height = 15;\ncooling_radius = 8;\npillar_height = 12;\npillar_radius = 1.5;\nshield_height = 25;\nshield_thickness = 2;\n\nmodule gold_layer() {\n    translate([0, 0, base_height])\n    difference() {\n        cube([base_width, base_depth, gold_layer_height], center=true);\n        cube([base_width-4, base_depth-4, gold_layer_height+1], center=true);\n    }\n}\n\nmodule base_plate() {\n    cube([base_width, base_depth, base_height], center=true);\n}\n\nmodule quantum_chip() {\n    translate([0, 0, base_height + gold_layer_height + chip_height/2])\n    cube([chip_size, chip_size, chip_height], center=true);\n}\n\nmodule cooling_can() {\n    translate([0, 0, base_height + gold_layer_height + chip_height + cooling_height/2])\n    cylinder(h=cooling_height, r=cooling_radius);\n}\n\nmodule support_pillar(x, y) {\n    translate([x, y, base_height + gold_layer_height + chip_height + cooling_height])\n    cylinder(h=pillar_height, r=pillar_radius);\n}\n\nmodule shield_wall(x, y, angle) {\n    translate([x, y, base_height + gold_layer_height + chip_height + cooling_height + pillar_height])\n    rotate([0, 0, angle])\n    cube([shield_thickness, 30, shield_height], center=true);\n}\n\nmodule connector_block(x, y) {\n    translate([x, y, base_height/2])\n    cube([6, 6, base_height], center=true);\n}\n\nmodule cable(x, y, z, length) {\n    translate([x, y, z])\n    rotate([90, 0, 0])\n    cylinder(h=length, r=1);\n}\n\n// Build the quantum computer\nunion() {\n    // Main structure\n    base_plate();\n    gold_layer();\n    quantum_chip();\n    cooling_can();\n    \n    // Support pillars\n    for(i=[-1:1]) {\n        for(j=[-1:1]) {\n            if(i!=0 || j!=0) {\n                support_pillar(i*20, j*20);\n            }\n        }\n    }\n    \n    // Shield walls\n    for(angle=[0:45:315]) {\n        shield_wall(0, 25, angle);\n    }\n    \n    // Connectors around base\n    connector_block(40, 20);\n    connector_block(40, -20);\n    connector_block(-40, 20);\n    connector_block(-40, -20);\n    \n    // Cables\n    cable(40, 20, base_height, 15);\n    cable(40, -20, base_height, 15);\n    cable(-40, 20, base_height, 15);\n    cable(-40, -20, base_height, 15);\n    \n    // Control panel\n    translate([-base_width/2-3, 0, base_height/2])\n    cube([6, 20, 10], center=true);\n    \n    // Status LEDs\n    translate([-base_width/2-3, -8, base_height+7])\n    sphere(r=1.5);\n    translate([-base_width/2-3, 0, base_height+7])\n    sphere(r=1.5);\n    translate([-base_width/2-3, 8, base_height+7])\n    sphere(r=1.5);\n}",
    "renders": true
  },
  {
    "household_item": "embedded",
    "openscad_code": "// Realistic-styled embedded ESP32 development board (medium complexity, 3D-printable)\n// Overall footprint ~68 mm × 31 mm × 8 mm, no overhangs >45°, 1 mm walls\n\n$fn = 36;          // global circle resolution\npcb_w = 68;        // PCB length\npcb_h = 31;        // PCB width\npcb_t = 1.6;       // PCB thickness\npcb_clr = 0.2;     // clearance for traces\nwall_t = 1.0;      // wall thickness for printable features\n\n// ---------- main board ----------\nmodule pcb() {\n    // main FR4 substrate\n    color([0.05, 0.15, 0.05])\n    difference() {\n        cube([pcb_w, pcb_h, pcb_t], center = true);\n        // cutouts to lighten print\n        for (x = [-25, 0, 25])\n            translate([x, 0, 0])\n                cube([8, 20, pcb_t + 0.1], center = true);\n    }\n\n    // copper layer on top (realistic detail)\n    color([0.8, 0.35, 0.1])\n    translate([0, 0, pcb_t/2 - 0.05])\n    difference() {\n        cube([pcb_w - 2, pcb_h - 2, 0.1], center = true);\n        // trace gaps\n        for (y = [-7, 0, 7])\n            translate([0, y, 0])\n                cube([pcb_w - 8, 0.3, 0.2], center = true);\n    }\n}\n\n// ---------- headers ----------\nmodule headers() {\n    // 19-pin side headers\n    pin_d = 0.6;\n    pin_l = 5.5;\n    pitch = 2.54;\n\n    for (side = [0, 1]) {\n        mirror([0, side, 0]) {\n            translate([0, (pcb_h - 2.54)/2 - 1.27, 0])\n            for (i = [-9:9]) {\n                color([0.8, 0.8, 0.8])\n                translate([i * pitch, 0, (pcb_t/2 + pin_l/2)])\n                    cylinder(d = pin_d, h = pin_l);\n                // plastic base\n                color([0.1, 0.1, 0.1])\n                translate([i * pitch, 0, pcb_t/2 + 0.5])\n                    cube([2.54, 2.54, 2.0], center = true);\n            }\n        }\n    }\n}\n\n// ---------- USB-C connector ----------\nmodule usb_c() {\n    color([0.3, 0.3, 0.3])\n    translate([pcb_w/2 - 5, 0, -2.2])\n        cube([7, 8.9, 2.4]);\n\n    color([0.0, 0.0, 0.0])\n    translate([pcb_w/2 - 5.1, 0, -0.5])\n        cube([6, 8.7, 1.0]);\n}\n\n// ---------- antenna trace ----------\nmodule antenna() {\n    color([0.8, 0.35, 0.1])\n    translate([pcb_w/2 - 8, -pcb_h/2 + 3, pcb_t/2])\n    cube([10, 6, 0.035]);\n}\n\n// ---------- mounting holes ----------\nmodule mount_holes() {\n    hole_d = 2.3;\n    for (p = [[-pcb_w/2 + 3, -pcb_h/2 + 3],\n              [-pcb_w/2 + 3,  pcb_h/2 - 3],\n              [ pcb_w/2 - 3, -pcb_h/2 + 3],\n              [ pcb_w/2 - 3,  pcb_h/2 - 3]])\n        translate([p[0], p[1], 0])\n            cylinder(d = hole_d, h = pcb_t + 0.1, center = true);\n}\n\n// ---------- ESP32 metal shield ----------\nmodule shield() {\n    color([0.5, 0.5, 0.5])\n    translate([-9, 0, pcb_t/2 + 0.5])\n    cube([15, 14, 1.0]);\n}\n\n// ---------- reset tact switch ----------\nmodule reset_btn() {\n    color([0.9, 0.9, 0.9])\n    translate([-pcb_w/2 + 8, 0, pcb_t/2 + 0.3])\n        cube([3, 2.5, 0.8]);\n}\n\n// ---------- assembly ----------\ndifference() {\n    union() {\n        pcb();\n        headers();\n        usb_c();\n        antenna();\n        shield();\n        reset_btn();\n    }\n    mount_holes();\n}",
    "renders": true
  },
  {
    "household_item": "microcontroller",
    "openscad_code": "// Realistic Arduino-style microcontroller\n// Dimensions in mm, designed for 3D printing\n\n// Main parameters\nboard_width = 70;\nboard_length = 54;\nboard_thickness = 1.6;\nusb_port_width = 8;\nusb_port_height = 7;\nusb_port_length = 12;\nheader_pitch = 2.54;\nheader_width = 2.5;\nheader_height = 8.5;\natmega_width = 14;\natmega_length = 14;\natmega_height = 2.5;\n\n// Create the main PCB\nmodule pcb() {\n    difference() {\n        // Main board\n        cube([board_width, board_length, board_thickness], center=true);\n        \n        // Mounting holes\n        for(x = [-board_width/2 + 3, board_width/2 - 3]) {\n            for(y = [-board_length/2 + 3, board_length/2 - 3]) {\n                translate([x, y, 0])\n                    cylinder(h=board_thickness+1, r=1.5, center=true);\n            }\n        }\n    }\n}\n\n// Create pin headers\nmodule pin_header(x_pos, y_pos, pin_count, vertical=true) {\n    for(i = [0:pin_count-1]) {\n        offset = (i - (pin_count-1)/2) * header_pitch;\n        translate(vertical ? [x_pos, y_pos + offset, 0] : [x_pos + offset, y_pos, 0])\n            cube([header_width, header_width, header_height + board_thickness/2], center=true);\n    }\n}\n\n// USB connector\nmodule usb_connector() {\n    translate([-board_width/2 - usb_port_length/2 + 2, 0, 0])\n        cube([usb_port_length, usb_port_width, usb_port_height], center=true);\n}\n\n// Power jack\nmodule power_jack() {\n    translate([board_width/2 - 5, 0, 0])\n    rotate([0, 90, 0])\n        cylinder(h=10, r1=4, r2=4.5, center=true);\n}\n\n// ATmega328P chip\nmodule atmega_chip() {\n    translate([0, board_length/4, board_thickness/2 + atmega_height/2])\n        cube([atmega_width, atmega_length, atmega_height], center=true);\n    \n    // Chip pins\n    for(i = [0:27]) {\n        angle = i * 90 / 7;\n        x = (atmega_width/2 + 0.5) * cos(angle + 45);\n        y = (atmega_length/2 + 0.5) * sin(angle + 45);\n        translate([x, y + board_length/4, board_thickness/2 + atmega_height/4])\n            cube([0.5, 0.25, atmega_height/2], center=true);\n    }\n}\n\n// Crystal oscillator\nmodule crystal() {\n    translate([-atmega_width/2 - 5, board_length/4, board_thickness/2 + 1.5])\n        cube([3, 2, 3], center=true);\n}\n\n// Reset button\nmodule reset_button() {\n    translate([0, -board_length/4, board_thickness/2 + 1.5])\n        cylinder(h=1.5, r=2.5, $fn=20);\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([10, -board_length/2 + 5, board_thickness/2 + 1])\n        cylinder(h=1, r=1, $fn=10);\n}\n\n// Voltage regulator\nmodule voltage_regulator() {\n    translate([board_width/2 - 10, -board_length/4, board_thickness/2 + 1.5])\n        cube([10, 6, 4], center=true);\n}\n\n// Capacitors\nmodule capacitors() {\n    for(pos = [[-20, 10], [-20, 15], [20, 15], [20, 10]]) {\n        translate([pos[0], pos[1], board_thickness/2 + 2])\n            cylinder(h=4, r=1.5, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // PCB base\n    pcb();\n    \n    // USB connector\n    usb_connector();\n    \n    // Power jack\n    power_jack();\n    \n    // Headers - digital pins\n    pin_header(-board_width/2 + 5, board_length/2 - 5, 8, false);\n    pin_header(-board_width/2 + 5, -board_length/2 + 5, 8, false);\n    \n    // Headers - analog pins\n    pin_header(board_width/2 - 5, board_length/2 - 5, 6, false);\n    \n    // Headers - power\n    pin_header(board_width/2 - 5, -board_length/2 + 15, 6, false);\n    \n    // Main components\n    atmega_chip();\n    crystal();\n    reset_button();\n    led_indicator();\n    voltage_regulator();\n    capacitors();\n}",
    "renders": true
  },
  {
    "household_item": "microprocessor",
    "openscad_code": "// Realistic-style microprocessor for 3D printing\n// Approx 40mm x 40mm x 6mm, medium complexity\n\n$fn = 32;  // Smooth curves\n\n// Overall package dimensions\npackage_w = 40;\npackage_d = 40;\npackage_h = 6;\nwall_t = 1.2;\n\n// Pin parameters\npin_w = 1;\npin_h = 0.8;\npin_l = 2.5;\npins_per_side = 20;\npin_pitch = (package_w - 2*pin_l) / (pins_per_side - 1);\n\n// Heat spreader\nmodule heat_spreader() {\n    translate([0, 0, package_h - 0.5])\n    difference() {\n        // Main spreader plate\n        cube([package_w - 4, package_d - 4, 0.5], center = true);\n        \n        // Ventilation slots\n        for (y = [-12:4:12])\n            translate([0, y, -0.1])\n            cube([package_w - 6, 2, 0.7], center = true);\n    }\n}\n\n// Pin array along one edge\nmodule pin_row(length, angle) {\n    rotate([0, 0, angle])\n    for (i = [0:pins_per_side-1]) {\n        x = -package_w/2 + pin_l + i*pin_pitch;\n        translate([x, length/2 + pin_h/2, 0])\n            cube([pin_w, pin_h, pin_l], center = true);\n    }\n}\n\n// Textured top surface for branding area\nmodule top_surface() {\n    translate([0, 0, package_h - 0.2])\n    difference() {\n        cube([package_w - 8, package_d - 8, 0.2], center = true);\n        \n        // Small alignment notches\n        translate([package_w/2 - 5, package_d/2 - 5, -0.1])\n            cylinder(h = 0.4, r = 1, center = true);\n        translate([-package_w/2 + 5, package_d/2 - 5, -0.1])\n            cylinder(h = 0.4, r = 1, center = true);\n    }\n}\n\n// Main package body\nmodule package_body() {\n    difference() {\n        // Outer shell\n        cube([package_w, package_d, package_h], center = true);\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, -wall_t/2])\n            cube([package_w - 2*wall_t, package_d - 2*wall_t, package_h + 1], center = true);\n        \n        // Chamfers on top edges\n        translate([0, 0, package_h/2 - 0.5])\n            cylinder(h = package_h, r = 0.5, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main package\n    package_body();\n    \n    // Heat spreader on top\n    heat_spreader();\n    \n    // Top branding area\n    top_surface();\n    \n    // Pin rows on all four sides\n    pin_row(package_d/2, 0);\n    pin_row(-package_d/2, 0);\n    rotate([0, 0, 90]) pin_row(package_w/2, 0);\n    rotate([0, 0, 90]) pin_row(-package_w/2, 0);\n    \n    // Corner markers for orientation\n    translate([package_w/2 - 2, package_d/2 - 2, package_h/2])\n        cylinder(h = 1.5, r = 1, center = true);\n    translate([-package_w/2 + 2, -package_d/2 + 2, package_h/2])\n        cylinder(h = 1.5, r = 1, center = true);\n}",
    "renders": true
  },
  {
    "household_item": "coprocessor",
    "openscad_code": "// Coprocessor Model - Realistic Style, Medium Complexity\n\n// Overall dimensions\nlength = 65;\nwidth = 35;\nheight = 8;\n\n// Main PCB base\nmodule pcb_base() {\n    // Main board\n    difference() {\n        cube([length, width, height], center=true);\n        \n        // Mounting holes\n        for(x = [-length/2 + 5, length/2 - 5])\n            for(y = [-width/2 + 5, width/2 - 5])\n                translate([x, y, height/2])\n                    cylinder(h=height+1, r=1.5, center=true);\n    }\n}\n\n// Main processor chip\nmodule cpu_chip() {\n    translate([0, 0, height/2 + 0.5]) {\n        cube([20, 20, 2], center=true);\n        \n        // Heat spreader\n        color([0.3, 0.3, 0.3])\n            translate([0, 0, 1])\n                cube([22, 22, 0.5], center=true);\n        \n        // Pins around chip\n        for(i = [-9:9]) {\n            if(abs(i) != 9) {\n                // Left side pins\n                translate([-10.5, i*1.0, 0.5])\n                    cube([0.5, 0.5, 1]);\n                // Right side pins\n                translate([10.5, i*1.0, 0.5])\n                    cube([0.5, 0.5, 1]);\n            }\n        }\n        for(i = [-9:9]) {\n            if(abs(i) != 9) {\n                // Top pins\n                translate([i*1.0, -10.5, 0.5])\n                    cube([0.5, 0.5, 1]);\n                // Bottom pins\n                translate([i*1.0, 10.5, 0.5])\n                    cube([0.5, 0.5, 1]);\n            }\n        }\n    }\n}\n\n// Memory chips\nmodule memory_chip(x_pos, y_pos) {\n    translate([x_pos, y_pos, height/2 + 0.5]) {\n        cube([15, 8, 1.5], center=true);\n        \n        // Pin rows\n        for(i = [-7:7]) {\n            translate([-7.75, i*0.5, 0.75])\n                cube([0.5, 0.3, 1.5]);\n            translate([7.75, i*0.5, 0.75])\n                cube([0.5, 0.3, 1.5]);\n        }\n    }\n}\n\n// Capacitors\nmodule capacitor(x_pos, y_pos) {\n    translate([x_pos, y_pos, height/2 + 1.5]) {\n        cylinder(h=3, r=1.5, center=false);\n        \n        // Base pads\n        translate([0, 0, -0.25])\n            cube([3, 3, 0.5], center=true);\n    }\n}\n\n// Voltage regulator\nmodule voltage_reg() {\n    translate([-20, 0, height/2 + 0.5]) {\n        cube([10, 12, 2], center=true);\n        \n        // Heat sink fins\n        for(i = [-4:4]) {\n            translate([5.5, i*1.2, 1])\n                cube([0.5, 0.8, 1.5]);\n        }\n        \n        // Input/output pins\n        for(i = [-1:1]) {\n            translate([-5.5, i*3, 0])\n                cube([0.5, 0.5, 2]);\n        }\n    }\n}\n\n// Edge connector\nmodule edge_connector() {\n    translate([length/2 + 1, 0, -height/2]) {\n        cube([5, 30, height/2], center=true);\n        \n        // Gold fingers\n        for(i = [-14:14]) {\n            if(i % 2 == 0) {\n                translate([0, i, height/4])\n                    cube([4.5, 0.8, height/4]);\n            }\n        }\n        \n        // Key notch\n        translate([0, 5, height/4])\n            cube([5, 2, height/4]);\n    }\n}\n\n// Resistors\nmodule resistor(x_pos, y_pos) {\n    translate([x_pos, y_pos, height/2 + 1]) {\n        cube([3, 1, 0.8], center=true);\n        \n        // Solder pads\n        translate([-1.5, 0, -0.1])\n            cube([0.5, 1.2, 0.2]);\n        translate([1.5, 0, -0.1])\n            cube([0.5, 1.2, 0.2]);\n    }\n}\n\n// Crystal oscillator\nmodule crystal() {\n    translate([25, -10, height/2 + 1]) {\n        cube([5, 3, 1.5], center=true);\n        \n        // Metal can\n        color([0.5, 0.5, 0.5])\n            translate([0, 0, 0.75])\n                cube([4.5, 2.5, 0.75], center=true);\n        \n        // Pins\n        translate([-2.5, -1.5, 0])\n            cube([0.5, 0.5, 1.5]);\n        translate([2.5, -1.5, 0])\n            cube([0.5, 0.5, 1.5]);\n    }\n}\n\n// Combine all components\nunion() {\n    pcb_base();\n    cpu_chip();\n    \n    // Two memory chips\n    memory_chip(-15, 10);\n    memory_chip(-15, -10);\n    \n    // Voltage regulator\n    voltage_reg();\n    \n    // Crystal oscillator\n    crystal();\n    \n    // Edge connector\n    edge_connector();\n    \n    // Capacitors\n    capacitor(10, 12);\n    capacitor(10, 8);\n    capacitor(-10, -12);\n    capacitor(20, 0);\n    \n    // Resistors\n    resistor(5, 5);\n    resistor(5, -5);\n    resistor(-5, 8);\n    resistor(-5, -8);\n    resistor(15, 10);\n}",
    "renders": true
  },
  {
    "household_item": "gpu",
    "openscad_code": "// Realistic-style GPU with medium complexity\n// 3D printable, ~80mm long, uses only basic primitives\n\n// Overall dimensions\ngpu_l = 80;   // length\ngpu_w = 35;   // width\ngpu_h = 12;   // height\n\n// PCB thickness\npcb_t = 2;\n\n// Bracket thickness\nbracket_t = 1.5;\n\n// I/O bracket\nmodule io_bracket() {\n    difference() {\n        // Main bracket plate\n        translate([-gpu_l/2-bracket_t, 0, 0])\n            cube([bracket_t, gpu_w, gpu_h], center=true);\n        \n        // DisplayPort holes\n        for (i=[0:2]) {\n            translate([-gpu_l/2-bracket_t/2-0.1, -gpu_w/3 + i*gpu_w/6, gpu_h/2-4])\n                rotate([0, 90, 0])\n                    cylinder(h=bracket_t+0.2, d=5, $fn=20);\n        }\n        \n        // HDMI hole\n        translate([-gpu_l/2-bracket_t/2-0.1, gpu_w/3, gpu_h/2-4])\n            rotate([0, 90, 0])\n                cylinder(h=bracket_t+0.2, d=6, $fn=20);\n    }\n}\n\n// GPU shroud with fan cutouts\nmodule shroud() {\n    difference() {\n        // Main shroud body\n        translate([gpu_l/6, 0, gpu_h/2+pcb_t/2])\n            cube([gpu_l*2/3, gpu_w-4, gpu_h-pcb_t], center=true);\n            \n        // Fan cutouts\n        for (i=[-1:1]) {\n            translate([i*gpu_l/4, 0, gpu_h+pcb_t/2-1])\n                cylinder(h=gpu_h-pcb_t+2, d=22, $fn=32);\n        }\n    }\n}\n\n// Heatsink fins\nmodule heatsink() {\n    translate([0, 0, pcb_t/2])\n    for (i=[-gpu_l/3:2:gpu_l/3]) {\n        translate([i, 0, gpu_h/2-1])\n            cube([1, gpu_w-8, gpu_h-pcb_t-2]);\n    }\n}\n\n// Power connectors\nmodule power_connectors() {\n    // 8-pin connector\n    translate([gpu_l/2-8, -gpu_w/2+6, pcb_t/2+0.5])\n        cube([10, 6, 4]);\n    \n    // 6-pin connector\n    translate([gpu_l/2-8, -gpu_w/2+13, pcb_t/2+0.5])\n        cube([10, 6, 4]);\n}\n\n// PCB with components\nmodule pcb() {\n    // Main PCB\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 0])\n        cube([gpu_l, gpu_w, pcb_t], center=true);\n    \n    // GPU chip\n    color([0.2, 0.2, 0.2])\n    translate([gpu_l/4, 0, pcb_t/2])\n        cube([20, 20, 1]);\n    \n    // VRAM chips\n    color([0.3, 0.3, 0.3])\n    for (i=[-1.5:1.5]) {\n        for (j=[-1:1]) {\n            translate([gpu_l/4+8, i*6, pcb_t/2+(j+1)*2])\n                cube([4, 3, 1]);\n        }\n    }\n}\n\n// Backplate\nmodule backplate() {\n    color([0.4, 0.4, 0.4])\n    translate([0, 0, -pcb_t/2-1])\n        cube([gpu_l-4, gpu_w-4, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    pcb();\n    backplate();\n    shroud();\n    heatsink();\n    power_connectors();\n    io_bracket();\n    \n    // PCIe connector\n    color([0.15, 0.15, 0.15])\n    translate([0, 0, -pcb_t/2-0.5])\n        cube([gpu_l, 11, 1.5], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "fpga",
    "openscad_code": "// Realistic medium-complexity FPGA model\n// Approximate size: 45 mm x 45 mm x 6 mm\n\n// Overall dimensions\nfpga_x = 45;\nfpga_y = 45;\nfpga_z = 6;\n\n// Package thicknesses\nsubstrate_z = 1.2;\ndie_z = 0.4;\nheat_spreader_z = 0.8;\nlid_z = 0.6;\n\n// Pin parameters\npin_pitch = 1.27;\npins_per_side = 28;\npin_len = 1.0;\npin_w = 0.3;\npin_h = 0.3;\n\n// BGA ball parameters\nball_pitch = 1.0;\nballs_per_row = 32;\nball_d = 0.6;\n\nmodule substrate() {\n    // Green PCB substrate\n    color([0.1,0.4,0.1])\n    cube([fpga_x, fpga_y, substrate_z], center=true);\n}\n\nmodule die() {\n    // Silicon die in center\n    color([0.2,0.2,0.2])\n    translate([0,0,substrate_z/2 + die_z/2])\n    cube([35,35,die_z], center=true);\n}\n\nmodule heat_spreader() {\n    // Metal heat spreader\n    color([0.7,0.7,0.7])\n    translate([0,0,substrate_z/2 + die_z + heat_spreader_z/2])\n    cube([fpga_x-2, fpga_y-2, heat_spreader_z], center=true);\n}\n\nmodule lid() {\n    // Black plastic lid\n    color([0.1,0.1,0.1])\n    translate([0,0,substrate_z/2 + die_z + heat_spreader_z + lid_z/2])\n    cube([fpga_x, fpga_y, lid_z], center=true);\n}\n\nmodule qfp_pins() {\n    // Generate gull-wing pins on all four sides\n    for (side = [0:3]) {\n        rotate([0,0,side*90])\n        for (i = [0:pins_per_side-1]) {\n            // Pin foot on package\n            translate([\n                -fpga_x/2 - pin_len/2,\n                -pin_pitch*(pins_per_side-1)/2 + i*pin_pitch,\n                -substrate_z/2\n            ])\n            cube([pin_len, pin_w, pin_h], center=true);\n            \n            // Pin bend\n            translate([\n                -fpga_x/2 - pin_len,\n                -pin_pitch*(pins_per_side-1)/2 + i*pin_pitch,\n                -substrate_z/2 - pin_h/2\n            ])\n            rotate([0,90,0])\n            cylinder(h=pin_h, r=pin_w/2, $fn=8);\n        }\n    }\n}\n\nmodule bga_balls() {\n    // Generate BGA balls on bottom\n    color([0.8,0.8,0.8])\n    for (x = [0:balls_per_row-1]) {\n        for (y = [0:balls_per_row-1]) {\n            if ((x+y)%2 == 0) { // Checkerboard pattern for clearance\n                translate([\n                    -fpga_x/2 + ball_pitch/2 + x*ball_pitch,\n                    -fpga_y/2 + ball_pitch/2 + y*ball_pitch,\n                    -substrate_z/2 - ball_d/2\n                ])\n                sphere(d=ball_d, $fn=12);\n            }\n        }\n    }\n}\n\nmodule markings() {\n    // Silkscreen text placeholders (as raised rectangles)\n    color([0.9,0.9,0.9])\n    translate([10,15,substrate_z/2 + 0.05])\n    cube([12,2,0.05], center=false);\n    \n    translate([10,12,substrate_z/2 + 0.05])\n    cube([8,2,0.05], center=false);\n}\n\nmodule corner_notches() {\n    // Index notches on corners\n    for (x = [-1,1]) {\n        for (y = [-1,1]) {\n            translate([x*fpga_x/2, y*fpga_y/2, 0])\n            difference() {\n                cube([2,2,substrate_z], center=true);\n                translate([0,0,-substrate_z/2])\n                cylinder(h=substrate_z+0.1, r=1, $fn=16);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Package body\n    substrate();\n    die();\n    heat_spreader();\n    lid();\n    \n    // Choose either QFP or BGA style\n    // qfp_pins();\n    bga_balls();\n    \n    // Additional details\n    markings();\n    corner_notches();\n}",
    "renders": true
  },
  {
    "household_item": "asic",
    "openscad_code": "// ASIC - Application Specific Integrated Circuit\n// 3D printable model with medium complexity realistic features\n\n// Overall dimensions\nasic_length = 80;\nasic_width = 80;\nasic_height = 10;\n\n// Package parameters\npackage_thickness = 2.5;\nleadframe_thickness = 0.5;\ndie_height = 1.5;\nheatsink_height = 5;\n\n// Pin parameters\npin_count = 44;\npin_width = 1.2;\npin_length = 8;\npin_height = 0.8;\npin_spacing = 1.78;\n\n// Create the main package body\nmodule package_body() {\n    // Black epoxy package\n    color(\"black\") \n    difference() {\n        // Main rectangular package\n        cube([asic_length, asic_width, package_thickness], center=true);\n        \n        // Central cavity for die visibility\n        translate([0, 0, package_thickness/2 - 0.1])\n        cube([asic_length * 0.7, asic_width * 0.7, package_thickness + 0.2], center=true);\n    }\n}\n\n// Create heatsink on top\nmodule heatsink() {\n    color(\"silver\") \n    union() {\n        // Base plate\n        translate([0, 0, package_thickness/2 + heatsink_height/2])\n        cube([asic_length * 0.9, asic_width * 0.9, heatsink_height], center=true);\n        \n        // Fins\n        for (x = [-30:5:30]) {\n            translate([x, 0, package_thickness/2 + heatsink_height])\n            cube([1.5, asic_width * 0.85, heatsink_height], center=true);\n        }\n    }\n}\n\n// Create leadframe pins\nmodule pins() {\n    color(\"silver\") \n    union() {\n        // Top row pins\n        for (i = [0:pin_count/4-1]) {\n            translate([\n                -asic_length/2 - pin_length/2 + 0.5, \n                -asic_width/2 + 2 + i * pin_spacing, \n                -package_thickness/2 - pin_height/2\n            ])\n            cube([pin_length, pin_width, pin_height]);\n        }\n        \n        // Bottom row pins\n        for (i = [0:pin_count/4-1]) {\n            translate([\n                -asic_length/2 - pin_length/2 + 0.5, \n                asic_width/2 - 2 - i * pin_spacing, \n                -package_thickness/2 - pin_height/2\n            ])\n            cube([pin_length, pin_width, pin_height]);\n        }\n        \n        // Left row pins\n        for (i = [0:pin_count/4-1]) {\n            translate([\n                -asic_length/2 + 2 + i * pin_spacing, \n                -asic_width/2 - pin_length/2 + 0.5, \n                -package_thickness/2 - pin_height/2\n            ])\n            rotate([0, 0, 90])\n            cube([pin_length, pin_width, pin_height]);\n        }\n        \n        // Right row pins\n        for (i = [0:pin_count/4-1]) {\n            translate([\n                asic_length/2 - 2 - i * pin_spacing, \n                -asic_width/2 - pin_length/2 + 0.5, \n                -package_thickness/2 - pin_height/2\n            ])\n            rotate([0, 0, 90])\n            cube([pin_length, pin_width, pin_height]);\n        }\n    }\n}\n\n// Create the silicon die\nmodule silicon_die() {\n    color(\"darkblue\") \n    translate([0, 0, package_thickness/2 + die_height/2 - 0.5])\n    cube([asic_length * 0.6, asic_width * 0.6, die_height], center=true);\n}\n\n// Create bond wires\nmodule bond_wires() {\n    color(\"gold\") \n    for (i = [0:pin_count/2-1]) {\n        // Calculate positions for bond wires\n        angle = i * 360 / (pin_count/2);\n        radius = asic_length * 0.35;\n        \n        // Start from die edge\n        x1 = cos(angle) * radius;\n        y1 = sin(angle) * radius;\n        \n        // End at package edge\n        x2 = cos(angle) * (asic_length/2 - 2);\n        y2 = sin(angle) * (asic_width/2 - 2);\n        \n        // Create wire as small cylinder\n        translate([x1, y1, package_thickness/2 + die_height - 0.2])\n        rotate([90, 0, atan2(y2-y1, x2-x1)])\n        cylinder(h = sqrt(pow(x2-x1,2) + pow(y2-y1,2)), r = 0.15, center=false);\n    }\n}\n\n// Create package marking\nmodule package_marking() {\n    color(\"white\") \n    translate([0, 0, package_thickness/2 + 0.1])\n    rotate([0, 0, 45])\n    cube([10, 2, 0.1], center=true);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        package_body();\n        heatsink();\n        pins();\n        silicon_die();\n        bond_wires();\n    }\n    \n    // Add pin 1 indicator notch\n    translate([asic_length/2 - 5, asic_width/2 - 5, package_thickness/2])\n    cube([3, 3, package_thickness + 0.2]);\n}\n\n// Add package marking\npackage_marking();",
    "renders": true
  },
  {
    "household_item": "soc",
    "openscad_code": "// SoC (System on Chip) realistic model\n// 3D printable with proper wall thickness and no overhangs\n// Approx 50mm x 50mm x 8mm\n\n$fn = 64; // Smooth curves\n\nmodule main_body() {\n    // Main rectangular package body\n    difference() {\n        translate([0, 0, 4])\n            cube([50, 50, 8], center = true);\n        // Internal cavity for weight reduction\n        translate([0, 0, 5])\n            cube([45, 45, 6], center = true);\n    }\n}\n\nmodule pins() {\n    // Generate 4 rows of pins (20 per side)\n    module pin_row(start_x, start_y, direction) {\n        for (i = [0:19]) {\n            translate([start_x + (i * 2.5) * direction, start_y, 0])\n                cylinder(h = 2.5, r = 0.5);\n        }\n    }\n    \n    // Top row\n    pin_row(-23.75, 25, 1);\n    // Bottom row\n    pin_row(-23.75, -25, 1);\n    // Left row\n    rotate([0, 0, 90])\n        pin_row(-23.75, 25, 1);\n    // Right row\n    rotate([0, 0, 90])\n        pin_row(-23.75, -25, 1);\n}\n\nmodule heat_spreader() {\n    // Central metal heat spreader\n    translate([0, 0, 8.5])\n        difference() {\n            cube([30, 30, 1.5], center = true);\n            translate([0, 0, -0.5])\n                cube([28, 28, 2], center = true);\n        }\n}\n\nmodule markings() {\n    // Pin 1 indicator\n    translate([-23, 23, 8.2])\n        cylinder(h = 0.2, r = 1);\n    \n    // Manufacturer text area (raised)\n    translate([0, 0, 8.2])\n        cube([20, 5, 0.2], center = true);\n}\n\nmodule support_balls() {\n    // BGA balls on bottom\n    module ball_grid() {\n        for (x = [-20:5:20]) {\n            for (y = [-20:5:20]) {\n                if (abs(x) + abs(y) > 5) { // Skip center\n                    translate([x, y, -1])\n                        sphere(r = 0.75);\n                }\n            }\n        }\n    }\n    ball_grid();\n}\n\n// Main assembly\nunion() {\n    main_body();\n    pins();\n    heat_spreader();\n    markings();\n    translate([0, 0, 0])\n        support_balls();\n}",
    "renders": true
  },
  {
    "household_item": "chipset",
    "openscad_code": "// Realistic medium-complexity chipset model\n// Overall dimensions: ~60 mm × 60 mm × 5 mm\n\n$fn = 32;\n\n// Main PCB\nmodule pcb_base() {\n    difference() {\n        // Green substrate\n        color(\"darkgreen\")\n            cube([60, 60, 1.6], center = true);\n\n        // Four corner mounting holes\n        for (x = [-26, 26])\n            for (y = [-26, 26])\n                translate([x, y, 0])\n                    cylinder(h = 2, r = 1.5, center = true);\n    }\n}\n\n// Large central IC (CPU/GPU)\nmodule central_ic() {\n    translate([0, 0, 0.8 + 2.5])\n    difference() {\n        // Black epoxy package\n        color(\"black\")\n            cube([30, 30, 5], center = true);\n\n        // Top marking recess\n        translate([0, 0, 2.51])\n            cube([26, 26, 0.2], center = true);\n\n        // Leadframe legs on four sides\n        for (side = [0:1:3])\n            rotate([0, 0, side * 90])\n                for (i = [-13:2:13])\n                    translate([i, 15.5, 0])\n                        cube([1, 2, 1], center = true);\n    }\n}\n\n// Small QFN chip\nmodule small_qfn(pos, size = 4) {\n    translate([pos[0], pos[1], 0.8 + size/2])\n    difference() {\n        // Package body\n        color(\"darkgray\")\n            cube([size, size, size], center = true);\n\n        // Exposed pad\n        translate([0, 0, -size/2 - 0.01])\n            cube([size * 0.7, size * 0.7, 0.5], center = true);\n\n        // Side pads\n        for (side = [0:1:3])\n            rotate([0, 0, side * 90])\n                for (i = [-1.5:1.5:1.5])\n                    translate([i, size/2 + 0.25, 0])\n                        cube([0.5, 0.5, size], center = true);\n    }\n}\n\n// SMD resistor network (8-pin)\nmodule resistor_pack(pos) {\n    translate([pos[0], pos[1], 0.8 + 1.0])\n        color(\"brown\")\n            cube([5.5, 3.2, 2], center = true);\n}\n\n// Electrolytic capacitor\nmodule electrolytic_cap(pos) {\n    translate([pos[0], pos[1], 0.8 + 5])\n    union() {\n        // Cylinder body\n        color(\"darkblue\")\n            cylinder(h = 10, r = 3, center = true);\n\n        // Base plastic spacer\n        translate([0, 0, -5.5])\n            cylinder(h = 1, r = 3.5, center = true);\n\n        // Two through-hole leads\n        for (x = [-1.5, 1.5])\n            translate([x, 0, -6])\n                cylinder(h = 6.5, r = 0.4, center = false);\n    }\n}\n\n// Solder joints for through-hole parts\nmodule solder_joint(pos) {\n    translate(pos)\n        sphere(r = 0.6);\n}\n\n// Silkscreen reference designator\nmodule silkscreen_label(pos, text) {\n    translate([pos[0], pos[1], 0.81])\n        color(\"white\")\n            linear_extrude(0.1)\n                text(text, size = 2, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\npcb_base();\n\ncentral_ic();\n\n// Place small QFN chips\nsmall_qfn([-15, 15]);\nsmall_qfn([15, 15]);\nsmall_qfn([-15, -15]);\n\n// Place resistor packs\nresistor_pack([20, 0]);\nresistor_pack([20, 5]);\nresistor_pack([20, -5]);\n\n// Place electrolytic capacitors\nelectrolytic_cap([-20, 0]);\nelectrolytic_cap([-20, 8]);\n\n// Add solder joints under through-hole parts\nfor (pos = [[-23, 0], [-17, 0], [-23, 8], [-17, 8]])\n    solder_joint([pos[0], pos[1], -0.8]);\n\n// Silkscreen labels\nsilkscreen_label([0, 20], \"U1\");\nsilkscreen_label([-15, 19], \"U2\");\nsilkscreen_label([15, 19], \"U3\");\nsilkscreen_label([-15, -19], \"U4\");\nsilkscreen_label([-20, 12], \"C1\");\nsilkscreen_label([-20, 4], \"C2\");\nsilkscreen_label([20, 2.5], \"RN1\");",
    "renders": true
  },
  {
    "household_item": "transceiver",
    "openscad_code": "// Realistic transceiver model - medium complexity\n// Main body shell, front panel, knobs, display, antenna, speaker grille, side grips\n\n$fn = 32;\n\nmodule shell() {\n    // Main body rounded enclosure\n    difference() {\n        union() {\n            // Main body block\n            translate([0,0,10]) cube([60,25,20], center=true);\n            // Top rounded edge\n            translate([0,0,20]) scale([1,0.8,1]) sphere(d=25);\n            // Bottom rounded edge\n            translate([0,0,0]) scale([1,0.8,1]) sphere(d=25);\n            // Antenna base\n            translate([-28,0,25]) cylinder(h=5, d=8);\n        }\n        // Hollow inside\n        translate([0,0,10]) cube([54,19,18], center=true);\n        // Speaker holes - left side\n        for(i=[-20:-5:5]) {\n            translate([i,11,15]) cylinder(h=3, d=2);\n        }\n        // Display window\n        translate([10,12,15]) cube([20,4,8]);\n    }\n}\n\nmodule front_panel() {\n    // Front plate\n    translate([0,13,10]) cube([58,1,18], center=true);\n    \n    // Main display screen\n    translate([10,13.5,18]) color(\"black\") cube([18,0.5,8]);\n    \n    // Keypad buttons\n    for(x=[-20:7.5:5]) {\n        for(z=[11:3:17]) {\n            translate([x,13.5,z]) cube([5,0.5,2]);\n        }\n    }\n    \n    // Main tuning knob (large)\n    translate([-25,13.5,15]) {\n        cylinder(h=3, d=10);\n        translate([0,0,3]) cylinder(h=2, d=8);\n    }\n    \n    // Volume knob\n    translate([25,13.5,18]) {\n        cylinder(h=3, d=6);\n        translate([0,0,3]) cylinder(h=1.5, d=5);\n    }\n    \n    // PTT button\n    translate([25,13.5,12]) cube([10,1,5]);\n    \n    // Status LEDs\n    translate([-10,13.5,22]) color(\"red\") cylinder(h=0.5, d=2);\n    translate([-5,13.5,22]) color(\"green\") cylinder(h=0.5, d=2);\n}\n\nmodule antenna() {\n    // Main whip antenna\n    translate([-28,0,30]) cylinder(h=40, d=2);\n    // Top ball\n    translate([-28,0,70]) sphere(d=3);\n    // Antenna coil section\n    translate([-28,0,40]) cylinder(h=10, d=4);\n}\n\nmodule side_grips() {\n    // Left grip\n    translate([0,0,10]) {\n        for(i=[-10:5:10]) {\n            translate([30,i-2.5,0]) scale([0.5,1,1]) sphere(d=5);\n        }\n    }\n    // Right grip (mirrored)\n    mirror([1,0,0]) {\n        for(i=[-10:5:10]) {\n            translate([30,i-2.5,0]) scale([0.5,1,1]) sphere(d=5);\n        }\n    }\n}\n\n// Assemble transceiver\nunion() {\n    shell();\n    front_panel();\n    antenna();\n    side_grips();\n}",
    "renders": true
  },
  {
    "household_item": "transmitter",
    "openscad_code": "// Realistic medium-complexity RC transmitter\n// Overall length ~90 mm, wingspan ~60 mm, thickness ~30 mm\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            translate([-30,-25,0]) sphere(d=30,$fn=20);\n            translate([30,-25,0]) sphere(d=30,$fn=20);\n            translate([30,25,0]) sphere(d=30,$fn=20);\n            translate([-30,25,0]) sphere(d=30,$fn=20);\n        }\n        // Hollow interior\n        translate([0,0,-3]) cube([55,45,25],center=true);\n    }\n}\n\n// Antenna mast\nmodule antenna() {\n    translate([0,-30,12]) rotate([90,0,0]) {\n        cylinder(h=25,d=3,$fn=12);           // mast\n        translate([0,0,25]) sphere(d=3.5,$fn=12); // ball tip\n    }\n}\n\n// Left stick assembly\nmodule leftStick() {\n    translate([-20,0,8]) union() {\n        // Base dome\n        translate([0,0,2]) sphere(d=18,$fn=20);\n        difference() {\n            cylinder(h=9,d=12,$fn=20);       // stick post\n            translate([0,0,2]) cylinder(h=10,d=7,$fn=20);\n        }\n        // Stick top\n        translate([0,0,9]) sphere(d=6,$fn=12);\n    }\n}\n\n// Right stick assembly\nmodule rightStick() {\n    mirror([1,0,0]) leftStick();\n}\n\n// Throttle trim lever (left)\nmodule leftTrim() {\n    translate([-40,12,3]) {\n        cube([8,4,2]);                       // slot\n        translate([4,2,1]) rotate([0,0,45]) cube([3,12,2],center=true); // lever\n    }\n}\n\n// Rudder trim lever (right)\nmodule rightTrim() {\n    translate([40,12,3]) {\n        cube([8,4,2]);                       // slot\n        translate([4,2,1]) rotate([0,0,-45]) cube([3,12,2],center=true); // lever\n    }\n}\n\n// Aileron trim lever (front)\nmodule frontTrim() {\n    translate([0,22,3]) {\n        cube([4,8,2]);                       // slot\n        translate([2,4,1]) rotate([45,0,0]) cube([12,3,2],center=true); // lever\n    }\n}\n\n// Elevator trim lever (rear)\nmodule rearTrim() {\n    translate([0,-22,3]) {\n        cube([4,8,2]);                       // slot\n        translate([2,4,1]) rotate([-45,0,0]) cube([12,3,2],center=true); // lever\n    }\n}\n\n// Display screen recess\nmodule screen() {\n    translate([0,0,8]) difference() {\n        cube([20,30,1]);                     // screen face\n        translate([0,0,-0.1]) cube([18,28,1.2],center=true); // recess\n    }\n}\n\n// Power switch\nmodule powerSwitch() {\n    translate([-38,0,8]) {\n        cube([8,4,3]);\n        translate([4,2,1.5]) rotate([0,0,30]) cube([2,6,2],center=true); // toggle\n    }\n}\n\n// Bind button\nmodule bindButton() {\n    translate([38,0,8]) {\n        cylinder(h=2,d=6,$fn=20);\n        translate([0,0,2]) sphere(d=3,$fn=12);\n    }\n}\n\n// Generate the complete transmitter\nunion() {\n    body();\n    antenna();\n    leftStick();\n    rightStick();\n    leftTrim();\n    rightTrim();\n    frontTrim();\n    rearTrim();\n    screen();\n    powerSwitch();\n    bindButton();\n}",
    "renders": true
  },
  {
    "household_item": "encoder",
    "openscad_code": "// Realistic Rotary Encoder for 3D printing\n// Overall size ~60 mm max dimension\n\n$fn = 40;  // Smooth curves\n\n// Main parameters\nbase_d = 30;\nbase_h = 6;\nshaft_d = 6;\nshaft_h = 15;\nknob_d = 12;\nknob_h = 10;\nbody_d = 36;\nbody_h = 18;\npcb_w = 28;\npcb_h = 22;\npcb_t = 1.6;\npin_d = 1;\npin_l = 5;\n\nmodule base_plate() {\n    difference() {\n        // Main base disc\n        cylinder(d = base_d, h = base_h);\n        \n        // Center shaft hole\n        translate([0, 0, -0.1])\n            cylinder(d = shaft_d + 2, h = base_h + 0.2);\n        \n        // Mounting holes\n        for (a = [0:120:359]) {\n            rotate([0, 0, a])\n                translate([base_d/2 - 3, 0, -0.1])\n                    cylinder(d = 2, h = base_h + 0.2);\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(d = body_d, h = body_h);\n        \n        // PCB slot\n        translate([0, 0, body_h - pcb_t])\n            cube([pcb_w, pcb_h, pcb_t + 0.2], center = true);\n    }\n}\n\nmodule encoder_shaft() {\n    // Main shaft\n    cylinder(d = shaft_d, h = shaft_h);\n    \n    // Flat on shaft for knob retention\n    translate([0, shaft_d/2, shaft_h/2])\n        cube([shaft_d*2, 1, shaft_h], center = true);\n}\n\nmodule knurled_knob() {\n    difference() {\n        union() {\n            // Main knob body\n            cylinder(d = knob_d, h = knob_h);\n            \n            // Knurled grip rings\n            for (i = [0:2]) {\n                translate([0, 0, 2 + i*3])\n                    cylinder(d = knob_d + 2, h = 1);\n            }\n        }\n        \n        // Shaft hole\n        translate([0, 0, -0.1])\n            cylinder(d = shaft_d + 0.2, h = knob_h + 0.2);\n            \n        // Flat for shaft\n        translate([0, shaft_d/2 + 0.1, knob_h/2])\n            cube([knob_d, 1.5, knob_h], center = true);\n    }\n}\n\nmodule pins() {\n    // 5 pins for standard encoder\n    for (i = [0:4]) {\n        translate([(i - 2) * 2.54, -body_d/2 - 1, body_h/2])\n            rotate([90, 0, 0])\n                cylinder(d = pin_d, h = pin_l);\n    }\n}\n\nmodule pcb() {\n    color(\"green\")\n    translate([0, 0, body_h - pcb_t/2])\n        cube([pcb_w, pcb_h, pcb_t], center = true);\n}\n\nmodule encoder_assembly() {\n    // Base plate\n    base_plate();\n    \n    // Main body\n    translate([0, 0, base_h])\n        body();\n    \n    // PCB\n    pcb();\n    \n    // Pins\n    translate([0, 0, base_h])\n        pins();\n    \n    // Shaft\n    translate([0, 0, base_h + body_h])\n        encoder_shaft();\n    \n    // Knob\n    translate([0, 0, base_h + body_h + shaft_h])\n        knurled_knob();\n}\n\n// Render the complete encoder\nencoder_assembly();",
    "renders": true
  },
  {
    "household_item": "decoder",
    "openscad_code": "// Decoder - Realistic Style, Medium Complexity\n// 3D printable model with functional features\n\n// Overall dimensions\nbody_width = 80;\nbody_height = 25;\nbody_depth = 45;\nwall_thickness = 2.5;\n\n// Connector dimensions\nconnector_width = 12;\nconnector_height = 8;\nconnector_length = 15;\npin_count = 8;\npin_diameter = 1.2;\npin_spacing = 2.54;\n\n// LED indicators\nled_diameter = 3;\nled_spacing = 8;\nled_depth = 2;\n\n// Mounting features\nmount_hole_diameter = 3.5;\nmount_hole_offset = 5;\n\nmodule main_body() {\n    difference() {\n        // Main enclosure\n        cube([body_width, body_depth, body_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([body_width-wall_thickness*2, body_depth-wall_thickness*2, body_height-wall_thickness], center=true);\n        \n        // Connector cutouts\n        for (i = [-1, 1]) {\n            translate([i * (body_width/2 - connector_length/2), 0, 0])\n                cube([connector_length, connector_width, connector_height], center=true);\n        }\n        \n        // Mounting holes\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (body_width/2 - mount_hole_offset), \n                          y * (body_depth/2 - mount_hole_offset), \n                          0])\n                    cylinder(h=body_height, d=mount_hole_diameter, center=true);\n            }\n        }\n        \n        // Ventilation slots\n        for (i = [-2:2]) {\n            translate([i * 10, body_depth/2 - 1, 0])\n                cube([2, 2, body_height-4], center=true);\n        }\n    }\n}\n\nmodule connector(offset_x) {\n    translate([offset_x, 0, 0]) {\n        // Connector housing\n        difference() {\n            cube([connector_length, connector_width, connector_height], center=true);\n            \n            // Pin holes\n            for (i = [0:pin_count-1]) {\n                translate([-(connector_length/2 - 3), \n                          -connector_width/2 + 2 + i * pin_spacing, \n                          0])\n                    rotate([0, 90, 0])\n                        cylinder(h=connector_length-3, d=pin_diameter, center=true);\n            }\n        }\n        \n        // Connector key\n        translate([(offset_x > 0 ? connector_length/2 : -connector_length/2), \n                  0, \n                  connector_height/2 + 1])\n            cube([2, 4, 2], center=true);\n    }\n}\n\nmodule leds() {\n    // LED indicators\n    for (i = [-1, 0, 1]) {\n        translate([i * led_spacing, 0, body_height/2 + led_depth/2])\n            difference() {\n                cylinder(h=led_depth, d=led_diameter);\n                translate([0, 0, -0.5])\n                    cylinder(h=led_depth+1, d=led_diameter-1);\n            }\n    }\n}\n\nmodule labels() {\n    // Engraved labels\n    translate([0, body_depth/2 + 0.1, body_height/2 - 5])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"DECODER\", size=4, halign=\"center\");\n}\n\n// Main assembly\nunion() {\n    main_body();\n    \n    // Connectors\n    connector(body_width/2);\n    connector(-body_width/2);\n    \n    // LEDs\n    leds();\n    \n    // Labels\n    labels();\n    \n    // PCB standoffs\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (body_width/2 - 10), \n                      y * (body_depth/2 - 10), \n                      -body_height/2 + 3])\n                cylinder(h=4, d=6);\n            \n            translate([x * (body_width/2 - 10), \n                      y * (body_depth/2 - 10), \n                      -body_height/2 + 3])\n                cylinder(h=4, d=3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "multiplexer",
    "openscad_code": "// 74HC4067-style 16-channel analog multiplexer\n// Realistic appearance, medium complexity, 3D-printable\n\n$fn = 32;               // Circle quality\neps = 0.01;             // Avoid z-fighting\nbody_w = 20.5;          // SOIC-24 width\nbody_l = 15.9;          // SOIC-24 length\nbody_h = 2.65;          // Plastic body height\npin_l = 1.27;           // Pin protrusion length\npin_w = 0.41;           // Pin width\npin_h = 0.51;           // Pin thickness\npin_pitch = 1.27;       // SOIC pitch\npin_count = 24;         // SOIC-24\nledge = 0.3;            // Package ledge thickness\nmark_d = 1.0;           // Pin-1 dot diameter\ntop_mark = 0.1;         // Top engraving depth\n\nmodule package_body() {\n    difference() {\n        union() {\n            // Main plastic body\n            translate([0, 0, body_h/2])\n                cube([body_l, body_w, body_h], center=true);\n\n            // Top ledge for branding\n            translate([0, 0, body_h - ledge/2])\n                cube([body_l - 2*ledge, body_w - 2*ledge, ledge], center=true);\n        }\n\n        // Pin-1 indicator dimple\n        translate([-body_l/2 + 1.5, -body_w/2 + 1.5, body_h - top_mark - eps])\n            cylinder(h=top_mark + 2*eps, d=mark_d, center=false);\n\n        // Top text area recess\n        translate([0, 0, body_h - top_mark - eps])\n            cube([body_l - 4, body_w - 6, top_mark + 2*eps], center=true);\n    }\n}\n\nmodule pin(p, angle) {\n    // Single gull-wing pin\n    rotate([0, 0, angle])\n        translate([p.x, p.y, 0])\n            union() {\n                // Horizontal foot\n                translate([pin_l/2, 0, pin_h/2])\n                    cube([pin_l, pin_w, pin_h], center=true);\n                \n                // Vertical portion\n                translate([-pin_l/2, 0, body_h/2 - pin_h])\n                    cube([pin_w, pin_w, body_h - pin_h], center=true);\n                \n                // Bend radius\n                translate([-pin_l/2, 0, body_h - pin_h])\n                    rotate([0, 90, 0])\n                        cylinder(h=pin_w, r=pin_h, center=true);\n            }\n}\n\nmodule pins() {\n    // Generate 24 pins along both long edges\n    for (i = [0:pin_count/2-1]) {\n        // Left side\n        pin(\n            p = [-body_l/2 - pin_l, -body_w/2 + pin_pitch/2 + i*pin_pitch],\n            angle = 0\n        );\n        // Right side\n        pin(\n            p = [body_l/2 + pin_l, body_w/2 - pin_pitch/2 - i*pin_pitch],\n            angle = 180\n        );\n    }\n}\n\nmodule top_marks() {\n    // Engraved part number\n    translate([0, 2.5, body_h - top_mark - eps])\n        linear_extrude(height=top_mark + 2*eps) {\n            text(\"74HC4067\", size=1.2, font=\"Liberation Sans:style=Bold\", halign=\"center\");\n        }\n    \n    // Manufacturer logo placeholder\n    translate([0, -2.5, body_h - top_mark - eps])\n        linear_extrude(height=top_mark + 2*eps) {\n            text(\"ABC\", size=0.8, font=\"Liberation Sans\", halign=\"center\");\n        }\n}\n\nmodule multiplexer() {\n    union() {\n        package_body();\n        pins();\n        top_marks();\n    }\n}\n\n// Render the multiplexer centered on build plate\ntranslate([0, 0, body_h/2])\n    multiplexer();",
    "renders": true
  },
  {
    "household_item": "demultiplexer",
    "openscad_code": "// Demultiplexer 1-to-4 module with realistic styling\n// Overall dimensions approximately 80x50x20 mm\n\n// Parameters\nchip_width = 80;\nchip_height = 20;\nchip_depth = 50;\npin_diameter = 1.6;\npin_length = 8;\npin_pitch = 2.54;\nwall_thickness = 2;\n\n// Main chip body\nmodule chip_body() {\n    difference() {\n        // Outer shell\n        union() {\n            translate([-chip_width/2, -chip_depth/2, 0])\n                cube([chip_width, chip_depth, chip_height]);\n            \n            // Top bevel\n            translate([-chip_width/2 + wall_thickness, -chip_depth/2 + wall_thickness, chip_height])\n                cube([chip_width - 2*wall_thickness, chip_depth - 2*wall_thickness, 2]);\n        }\n        \n        // Internal cavity\n        translate([-chip_width/2 + wall_thickness, -chip_depth/2 + wall_thickness, wall_thickness])\n            cube([chip_width - 2*wall_thickness, chip_depth - 2*wall_thickness, chip_height - wall_thickness]);\n        \n        // Pin holes (bottom)\n        for (i = [0:6]) {\n            translate([chip_width/2 - 5 - i*pin_pitch, -chip_depth/2, 0])\n                cylinder(h=wall_thickness + 1, d=pin_diameter + 0.2, $fn=16);\n        }\n        for (i = [0:6]) {\n            translate([-chip_width/2 + 5 + i*pin_pitch, -chip_depth/2, 0])\n                cylinder(h=wall_thickness + 1, d=pin_diameter + 0.2, $fn=16);\n        }\n    }\n}\n\n// Pin module\nmodule pin() {\n    union() {\n        cylinder(h=pin_length, d=pin_diameter, $fn=16);\n        translate([0, 0, pin_length])\n            cylinder(h=2, d=pin_diameter * 1.2, $fn=16);\n    }\n}\n\n// Create all pins\nmodule all_pins() {\n    // Left row\n    for (i = [0:6]) {\n        translate([chip_width/2 - 5 - i*pin_pitch, -chip_depth/2, 0])\n            pin();\n    }\n    \n    // Right row\n    for (i = [0:6]) {\n        translate([-chip_width/2 + 5 + i*pin_pitch, -chip_depth/2, 0])\n            pin();\n    }\n}\n\n// Labeling on top\nmodule top_labels() {\n    color(\"white\")\n    translate([0, 0, chip_height + 0.1])\n    linear_extrude(height=0.5) {\n        // Chip name\n        translate([-15, -5, 0])\n            text(\"74LS139\", size=4);\n        \n        // Pin labels\n        translate([chip_width/2 - 8, -chip_depth/2 + 5, 0])\n            rotate([0, 0, 90])\n                text(\"1E\", size=2);\n        translate([chip_width/2 - 8 - pin_pitch, -chip_depth/2 + 5, 0])\n            rotate([0, 0, 90])\n                text(\"1A\", size=2);\n        translate([chip_width/2 - 8 - 2*pin_pitch, -chip_depth/2 + 5, 0])\n            rotate([0, 0, 90])\n                text(\"1B\", size=2);\n    }\n}\n\n// Assembly\nunion() {\n    chip_body();\n    all_pins();\n    top_labels();\n}",
    "renders": true
  },
  {
    "household_item": "cache",
    "openscad_code": "// Cache container with hinged lid and latch\n// Overall dimensions: 80mm x 60mm x 35mm\n\n// Main parameters\nbody_length = 80;\nbody_width = 60;\nbody_height = 30;\nwall_thickness = 2;\nlid_clearance = 0.2;\n\n// Create the cache body\nmodule cache_body() {\n    difference() {\n        // Outer shell\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([body_length - 2*wall_thickness, \n                  body_width - 2*wall_thickness, \n                  body_height], center=true);\n    }\n}\n\n// Create the lid with hinge\nmodule cache_lid() {\n    difference() {\n        union() {\n            // Main lid plate\n            translate([0, 0, body_height/2 + lid_clearance])\n                cube([body_length, body_width, wall_thickness], center=true);\n            \n            // Hinge barrel along back edge\n            for (i = [-1:1]) {\n                translate([i * body_length/4, -body_width/2, body_height/2 + lid_clearance])\n                    rotate([90, 0, 0])\n                        cylinder(h=wall_thickness*2, r=wall_thickness, $fn=20);\n            }\n            \n            // Latch hook at front\n            translate([0, body_width/2 - wall_thickness, body_height/2 + wall_thickness + lid_clearance])\n                cube([wall_thickness*3, wall_thickness, wall_thickness*2], center=true);\n        }\n        \n        // Grip indent on top\n        translate([0, body_width/4, body_height/2 + wall_thickness + lid_clearance])\n            cube([body_length/3, body_width/4, wall_thickness/2], center=true);\n    }\n}\n\n// Create the hinge pin\nmodule hinge_pin() {\n    translate([0, -body_width/2, body_height/2 + lid_clearance])\n        rotate([90, 0, 0])\n            cylinder(h=body_length/2 + wall_thickness, r=wall_thickness*0.8, $fn=20);\n}\n\n// Create the latch catch on body\nmodule latch_catch() {\n    translate([0, body_width/2, body_height/2 - wall_thickness])\n        cube([wall_thickness*4, wall_thickness*2, wall_thickness*2], center=true);\n}\n\n// Add rubber feet\nmodule feet() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * body_length/3, y * body_width/3, -body_height/2 - 1])\n                cylinder(h=2, r=3, $fn=20);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Cache body parts\n    color(\"silver\") cache_body();\n    color(\"silver\") latch_catch();\n    \n    // Lid assembly\n    color(\"silver\") cache_lid();\n    color(\"darkgray\") hinge_pin();\n    \n    // Rubber feet\n    color(\"black\") feet();\n}",
    "renders": true
  },
  {
    "household_item": "register",
    "openscad_code": "// Realistic cash register - medium complexity\n// Dimensions: 80mm wide x 60mm deep x 40mm tall\n// All dimensions in mm\n\n$fn = 32;\n\n// Main register body\nmodule register_body() {\n    // Base housing\n    difference() {\n        cube([80, 60, 40], center=true);\n        // Hollow interior\n        translate([0, 0, 5])\n            cube([70, 50, 30], center=true);\n    }\n}\n\n// Display panel\nmodule display() {\n    // Panel housing\n    translate([0, -25, 25])\n        difference() {\n            cube([50, 10, 15], center=true);\n            translate([0, 2, 0])\n                cube([45, 8, 12], center=true);\n        }\n    \n    // LCD segments\n    for (i = [-15, -5, 5, 15]) {\n        translate([i, -25, 32])\n            cube([8, 2, 4], center=true);\n    }\n}\n\n// Numeric keypad\nmodule keypad() {\n    translate([0, 15, 25])\n        difference() {\n            cube([40, 20, 10], center=true);\n            translate([0, 2, 0])\n                cube([36, 18, 8], center=true);\n        }\n    \n    // Key grid\n    for (x = [-15, -5, 5, 15]) {\n        for (y = [8, 12, 16]) {\n            translate([x, y, 30.5])\n                cylinder(h=2, r=2.5, center=true);\n        }\n    }\n}\n\n// Receipt printer slot\nmodule printer_slot() {\n    translate([0, -30, 35])\n        difference() {\n            cube([60, 5, 3], center=true);\n            translate([0, 0, 1])\n                cube([58, 5, 2], center=true);\n        }\n}\n\n// Cash drawer\nmodule cash_drawer() {\n    // Drawer front\n    translate([0, 30, 10])\n        difference() {\n            cube([70, 2, 20], center=true);\n            // Handle slot\n            translate([0, 0, 0])\n                cube([30, 3, 3], center=true);\n        }\n    \n    // Handle\n    translate([0, 32, 10])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=2);\n    \n    // Coin compartments\n    for (i = [-25, -15, -5, 5, 15, 25]) {\n        translate([i, 29, 5])\n            cube([8, 1, 8], center=true);\n    }\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Left side\n    for (i = [0, 8, 16]) {\n        translate([-42, -20 + i, 20])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=3);\n    }\n    \n    // Right side\n    for (i = [0, 8, 16]) {\n        translate([42, -20 + i, 20])\n            rotate([0, -90, 0])\n                cylinder(h=5, r=3);\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    translate([0, 0, 40.5])\n        cube([25, 8, 0.5], center=true);\n}\n\n// Assembly\nregister_body();\ndisplay();\nkeypad();\nprinter_slot();\ncash_drawer();\nside_buttons();\nbrand_label();",
    "renders": true
  },
  {
    "household_item": "accumulator",
    "openscad_code": "// Realistic 3D-printable accumulator (car battery) – medium complexity\n// Overall ~80 × 60 × 120 mm, printable without supports\n\n$fn = 36;\n\nmodule battery_case(width, depth, height, wall) {\n    // Main hollow box\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center = true);\n        // Inner cavity\n        cube([width - 2*wall, depth - 2*wall, height - wall], center = true);\n    }\n}\n\nmodule terminal_post(radius, height) {\n    // Positive post (red) – slightly larger\n    color(\"red\")\n    cylinder(h = height, r = radius, center = false);\n}\n\nmodule terminal_negative_post(radius, height) {\n    // Negative post (black)\n    color(\"black\")\n    cylinder(h = height, r = radius, center = false);\n}\n\nmodule vent_cap(width, height) {\n    // Simple vent caps on top\n    color(\"gray\")\n    for (i = [0:3]) {\n        translate([i * width/4 - width/2 + width/8, 0, height/2])\n            cube([width/8, width/8, height/10], center = true);\n    }\n}\n\nmodule handle_bar(length, thickness) {\n    // Hinged handle on sides\n    color(\"black\")\n    difference() {\n        translate([0, 0, 0])\n            cube([length, thickness, thickness], center = true);\n        // Grip cut-out\n        translate([0, 0, -thickness/2])\n            cube([length*0.8, thickness*1.2, thickness*2], center = true);\n    }\n}\n\nmodule label(text) {\n    // Raised label on front\n    color(\"white\")\n    linear_extrude(height = 0.5)\n        text(text, size = 6, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\ntranslate([0, 0, 60]) {\n    // Main case\n    battery_case(80, 60, 100, 3);\n    \n    // Top terminal posts\n    translate([25, 20, 50]) terminal_post(5, 10);\n    translate([-25, 20, 50]) terminal_negative_post(4.5, 10);\n    \n    // Vent caps on top surface\n    vent_cap(60, 100);\n    \n    // Handles on sides\n    translate([40, 0, 0]) rotate([0, 90, 0]) handle_bar(40, 4);\n    translate([-40, 0, 0]) rotate([0, 90, 0]) handle_bar(40, 4);\n    \n    // Label on front face\n    translate([0, 31, 0]) rotate([90, 0, 0]) label(\"12V 40Ah\");\n}",
    "renders": true
  },
  {
    "household_item": "counter",
    "openscad_code": "// Realistic Counter - Medium Complexity\n// A small retail/bar counter with register area and shelving\n\n// Parameters\ncounter_width = 80;\ncounter_depth = 50;\ncounter_height = 45;\nwall_thickness = 3;\nshelf_thickness = 2;\n\n// Main counter body\nmodule counter_base() {\n    difference() {\n        // Main counter box\n        cube([counter_width, counter_depth, counter_height]);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([counter_width-2*wall_thickness, \n                  counter_depth-2*wall_thickness, \n                  counter_height-wall_thickness]);\n        \n        // Cash register opening on top\n        translate([counter_width*0.7, counter_depth*0.3, counter_height-wall_thickness])\n            cube([counter_width*0.25, counter_depth*0.4, wall_thickness+1]);\n    }\n}\n\n// Counter top surface with rounded edges\nmodule counter_top() {\n    difference() {\n        // Main top surface\n        translate([0, 0, counter_height-wall_thickness])\n            cube([counter_width, counter_depth, wall_thickness]);\n            \n        // Rounded edge cutouts\n        for(x = [0:counter_width-10:counter_width]) {\n            for(y = [0:counter_depth-10:counter_depth]) {\n                translate([x+5, y+5, counter_height-wall_thickness-1])\n                    cylinder(h=wall_thickness+2, r=5, $fn=20);\n            }\n        }\n    }\n}\n\n// Shelves inside counter\nmodule shelves() {\n    for(i = [1:3]) {\n        translate([wall_thickness, \n                  wall_thickness, \n                  counter_height*0.25*i])\n            cube([counter_width-2*wall_thickness, \n                  counter_depth-2*wall_thickness, \n                  shelf_thickness]);\n    }\n}\n\n// Cash register\nmodule cash_register() {\n    translate([counter_width*0.75, counter_depth*0.5, counter_height]) {\n        // Base\n        cube([15, 12, 8]);\n        \n        // Display\n        translate([2, 2, 8])\n            cube([11, 8, 3]);\n            \n        // Buttons\n        for(row = [0:2]) {\n            for(col = [0:2]) {\n                translate([3+col*2.5, 9.5, 8.5+row*0.8])\n                    cylinder(h=0.5, r=0.8, $fn=8);\n            }\n        }\n    }\n}\n\n// Support legs\nmodule legs() {\n    for(x = [wall_thickness, counter_width-wall_thickness]) {\n        for(y = [wall_thickness, counter_depth-wall_thickness]) {\n            translate([x, y, 0]) {\n                cylinder(h=10, r=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Drawer handles\nmodule drawer_handles() {\n    for(i = [1:3]) {\n        translate([counter_width*0.5, counter_depth*0.5, counter_height*0.25*i-1]) {\n            difference() {\n                cube([15, 2, 1]);\n                translate([7.5, 1, 0.5])\n                    cylinder(h=2, r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Back panel for realism\nmodule back_panel() {\n    translate([0, counter_depth-wall_thickness, 0])\n        cube([counter_width, wall_thickness, counter_height*0.8]);\n}\n\n// Assembly\nunion() {\n    counter_base();\n    counter_top();\n    shelves();\n    cash_register();\n    legs();\n    drawer_handles();\n    back_panel();\n}",
    "renders": true
  },
  {
    "household_item": "oscillator",
    "openscad_code": "// Realistic Crystal Oscillator Module – medium complexity\n// Dimensions: approx. 50 mm x 20 mm x 12 mm\n// Ready for FDM printing, no support needed\n\n// global parameters\nbase_w = 50;\nbase_d = 20;\nbase_h =  2.0;\nwall_t =  1.2;        // wall thickness for printing\npin_d  =  1.0;\npin_L  =  4.0;\nxtal_w = 12;\nxtal_h =  6;\nxtal_t =  4;\n\n// metallic case\nmodule metal_can() {\n    // main can shell\n    translate([0,0,base_h])\n    difference() {\n        minkowski() {\n            cube([base_w-2*wall_t, base_d-2*wall_t, 8], center=true);\n            sphere(wall_t/2);   // rounded edges\n        }\n        // hollow inside\n        translate([0,0,1])\n        cube([base_w-4*wall_t, base_d-4*wall_t, 10], center=true);\n    }\n\n    // top seam\n    translate([0,0,base_h+8])\n    cube([base_w-2*wall_t, 0.5, 0.5], center=true);\n}\n\n// 4-pin DIP pattern\nmodule pins() {\n    for(dx=[-20, 20], dy=[-6, 6]) {\n        translate([dx, dy, 0])\n        rotate([90,0,0])\n        cylinder(h=pin_L, d=pin_d, $fn=8);\n    }\n}\n\n// visible quartz crystal inside cut-away window\nmodule quartz_xtal() {\n    // support bridge\n    translate([0,0,base_h+2])\n    cube([xtal_w+2*wall_t, wall_t, xtal_t], center=true);\n\n    // crystal body\n    translate([0,0,base_h+2+xtal_t/2])\n    cube([xtal_w, xtal_h, xtal_t], center=true);\n}\n\n// silkscreen markings\nmodule silk() {\n    translate([0,0,base_h-0.1])\n    linear_extrude(0.2)\n    text(\"8.000 MHz\", size=3, halign=\"center\", valign=\"center\");\n}\n\n// assembly\nunion() {\n    // PCB base with rounded edges\n    minkowski() {\n        cube([base_w, base_d, base_h], center=true);\n        sphere(1);\n    }\n\n    // cut-away window on one side so we can see inside\n    difference() {\n        metal_can();\n        translate([base_w/4,0,base_h])\n        cube([base_w/2, base_d, 10], center=true);\n    }\n\n    quartz_xtal();\n    pins();\n    silk();\n}",
    "renders": true
  },
  {
    "household_item": "actuator",
    "openscad_code": "// Linear actuator (50 mm stroke) – realistic, medium complexity, 3D-printable\n// All dimensions in mm, no overhangs >45°, 1.2 mm walls, 0.6 mm clearances\n\n$fn = 32;           // global facet resolution\n\n// ---------- PARAMETERS ----------\nbody_l = 80;        // overall body length\nbody_w = 28;\nbody_h = 28;\n\nrod_d = 8;\nrod_l = 70;         // rod fully extended length\n\nflange_t = 4;\nflange_d = 42;\n\nmount_hole_d = 5;\nmount_hole_r = 15;\n\n// ---------- MAIN MODEL ----------\nunion() {\n    translate([0, 0, body_h/2]) color(\"silver\") actuator_body();\n    translate([body_l - 5, 0, 0]) rotate([0, 90, 0])\n        color(\"silver\") cylinder(d = rod_d, h = rod_l - 5);\n    translate([body_l + rod_l - 10, 0, 0]) color(\"gray\") rod_end();\n}\n\n// ---------- BODY MODULE ----------\nmodule actuator_body() {\n    difference() {\n        // main rectangular box\n        cube([body_l, body_w, body_h], center = true);\n\n        // cooling fins along top and bottom\n        for (i = [1:4]) {\n            translate([i*15 - body_l/2, 0, body_h/2 - 1.2])\n                cube([1.2, body_w, 2.4], center = true);\n            translate([i*15 - body_l/2, 0, -body_h/2 + 1.2])\n                cube([1.2, body_w, 2.4], center = true);\n        }\n\n        // cable gland hole (rear)\n        translate([-body_l/2 - 1, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(d = 8, h = 10);\n\n        // rod exit bore\n        translate([body_l/2 - 2.5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(d = rod_d + 1.2, h = body_w + 2);\n    }\n\n    // rear mounting flange\n    translate([-body_l/2 - flange_t/2, 0, 0])\n        mounting_flange();\n\n    // front guide bushing ring\n    translate([body_l/2 - 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(d1 = rod_d + 8, d2 = rod_d + 6, h = 4);\n}\n\n// ---------- MOUNTING FLANGE MODULE ----------\nmodule mounting_flange() {\n    difference() {\n        cylinder(d = flange_d, h = flange_t, center = true);\n        for (a = [0:60:359])\n            rotate([0, 0, a])\n                translate([mount_hole_r, 0, 0])\n                    cylinder(d = mount_hole_d + 0.4, h = flange_t + 1, center = true);\n    }\n}\n\n// ---------- ROD END MODULE ----------\nmodule rod_end() {\n    difference() {\n        union() {\n            sphere(d = 12);\n            translate([0, 0, 6]) cylinder(d = 8, h = 10, center = true);\n        }\n        rotate([0, 90, 0])\n            cylinder(d = mount_hole_d + 0.4, h = 20, center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "plotter",
    "openscad_code": "// Mini XY-Plotter – medium-complexity, 3D-printable\n// overall footprint ≈ 54 mm × 45 mm × 24 mm\n// no steep overhangs, all walls ≥1.2 mm\n\nmodule rounded_cube(size, r) {\n    // quick rounded edges with spheres\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([size.x-r, r, r]) sphere(r);\n        translate([size.x-r, size.y-r, r]) sphere(r);\n        translate([r, size.y-r, r]) sphere(r);\n        translate([r, r, size.z-r]) sphere(r);\n        translate([size.x-r, r, size.z-r]) sphere(r);\n        translate([size.x-r, size.y-r, size.z-r]) sphere(r);\n        translate([r, size.y-r, size.z-r]) sphere(r);\n    }\n}\n\n// --------------- BASE FRAME ---------------\nmodule base_frame() {\n    difference() {\n        rounded_cube([54, 45, 4], 2);               // main platform\n        // cutouts to reduce material\n        for (x = [10, 30, 50])\n            translate([x, 22.5, -1])\n                cube([3, 40, 6], center=true);\n    }\n}\n\n// --------------- Y-RAIL BAR ---------------\nmodule y_rail() {\n    translate([0, 0, 4])\n        rounded_cube([54, 6, 8], 2);\n}\n\n// --------------- Y-CARRIAGE ---------------\nmodule y_carriage() {\n    difference() {\n        translate([0, 0, 12])\n            rounded_cube([46, 12, 6], 1.5);\n        // belt slot\n        translate([23, 0, 11])\n            cube([42, 10, 3], center=true);\n    }\n}\n\n// --------------- X-RAIL BAR ---------------\nmodule x_rail() {\n    translate([23, 9, 15])\n        rotate([0, 0, 90])\n            rounded_cube([40, 6, 8], 2);\n}\n\n// --------------- PEN CARRIAGE ---------------\nmodule pen_carriage() {\n    difference() {\n        translate([23, 9, 19])\n            rounded_cube([8, 12, 8], 1.5);\n        // pen hole (vertical)\n        translate([23, 9, 23])\n            cylinder(h=10, d=3.5, $fn=16);\n    }\n}\n\n// --------------- BELT LOOPS ---------------\nmodule belt_loop(pos, angle) {\n    translate(pos)\n        rotate([0, 0, angle])\n            rounded_cube([5, 2, 1.5], 0.5);\n}\n\n// --------------- STEP MOTORS ---------------\nmodule stepper_motor(pos) {\n    translate(pos)\n        difference() {\n            cylinder(h=5, d=10, $fn=20);\n            translate([0, 0, -1])\n                cylinder(h=7, d=5, $fn=20);\n        }\n}\n\n// --------------- ASSEMBLY ---------------\nbase_frame();\ny_rail();\ny_carriage();\nx_rail();\npen_carriage();\n\n// four belt loops on corners\nbelt_loop([2, 22.5, 7], 0);\nbelt_loop([52, 22.5, 7], 0);\nbelt_loop([23, 5, 19], 90);\nbelt_loop([23, 45, 19], 90);\n\n// two motors\nstepper_motor([5, 22.5, 0]);\nstepper_motor([49, 22.5, 0]);",
    "renders": true
  },
  {
    "household_item": "copier",
    "openscad_code": "// Office copier - realistic style, medium complexity\n// Total footprint ~70x60x50 mm, 3D-printable with no overhangs\n\n$fn = 32;   // smooth curves\n\n// Main body shell\nmodule copier_body() {\n    difference() {\n        // Main box\n        cube([65, 55, 40], center=true);\n        // Hollow inside\n        translate([0,0,5])\n        cube([59, 49, 30], center=true);\n    }\n}\n\n// Paper tray on top\nmodule paper_tray() {\n    difference() {\n        // Outer tray\n        translate([0,0,23])\n        cube([55, 40, 6], center=true);\n        // Recess for paper\n        translate([0,0,26.9])\n        cube([51, 36, 2], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel base\n    translate([0, -30, 10])\n    cube([30, 8, 15], center=true);\n    \n    // LCD screen\n    translate([0, -30, 16])\n    color(\"black\")\n    cube([20, 1, 8], center=true);\n    \n    // Buttons\n    for(x=[-8, -4, 0, 4, 8])\n    translate([x, -30, 10])\n    color(\"gray\")\n    cylinder(h=2, d=3, center=true);\n}\n\n// Automatic document feeder (ADF) lid\nmodule adf_lid() {\n    // Hinge\n    translate([0, 27, 20])\n    rotate([90,0,0])\n    cylinder(h=40, d=2, center=true);\n    \n    // Lid itself\n    translate([0, 40, 20])\n    rotate([110,0,0])\n    cube([50, 30, 3], center=true);\n    \n    // Handle indent\n    translate([0, 50, 25])\n    rotate([110,0,0])\n    cube([20, 10, 1], center=true);\n}\n\n// Output tray\nmodule output_tray() {\n    difference() {\n        // Tray\n        translate([0, 30, -15])\n        cube([60, 10, 3], center=true);\n        // Paper slot\n        translate([0, 30, -13])\n        cube([56, 8, 1], center=true);\n    }\n    \n    // Side supports\n    for(x=[-28, 28])\n    translate([x, 30, -10])\n    cube([3, 8, 8], center=true);\n}\n\n// Ventilation grilles\nmodule vents() {\n    for(y=[-15, -5, 5, 15])\n    translate([-35, y, 0])\n    cube([2, 4, 20], center=true);\n    \n    for(y=[-15, -5, 5, 15])\n    translate([35, y, 0])\n    cube([2, 4, 20], center=true);\n}\n\n// Paper cassette drawer\nmodule paper_cassette() {\n    // Drawer front\n    translate([0, 0, -22])\n    difference() {\n        cube([45, 3, 12], center=true);\n        // Handle cutout\n        translate([0, -2, -20])\n        cube([20, 1, 4], center=true);\n    }\n    \n    // Drawer body (slightly protruding)\n    translate([0, 2, -22])\n    cube([43, 20, 10], center=true);\n}\n\n// Assembly\ncopier_body();\npaper_tray();\ncontrol_panel();\nadf_lid();\noutput_tray();\nvents();\npaper_cassette();\n\n// Feet\nfor(x=[-25, 25])\nfor(y=[-20, 20])\ntranslate([x, y, -25])\ncylinder(h=3, d=5, center=true);",
    "renders": true
  },
  {
    "household_item": "fax",
    "openscad_code": "// Realistic Fax Machine Model - Medium Complexity\n// Dimensions: ~80mm wide x ~65mm deep x ~40mm tall\n\n$fn = 50;  // Smooth curves\n\nmodule fax_body() {\n    // Main body shell - hollow for 3D printing\n    difference() {\n        // Outer shell\n        translate([0, 0, 10]) cube([80, 65, 30], center=true);\n        \n        // Inner hollow space\n        translate([0, 0, 12]) cube([76, 61, 26], center=true);\n    }\n    \n    // Top surface details\n    translate([0, 0, 25]) {\n        // Control panel area\n        translate([0, 15, 0]) cube([70, 25, 2], center=true);\n        \n        // Display screen\n        translate([-20, 20, 1]) cube([25, 15, 1], center=true);\n        \n        // Button grid\n        for(x = [-35:10:-5]) {\n            for(y = [5:8:21]) {\n                translate([x, y, 1]) cylinder(h=1, d=4);\n            }\n        }\n        \n        // Keypad area\n        translate([25, 5, 1]) {\n            for(i = [0:2]) {\n                for(j = [0:2]) {\n                    translate([i*6-6, j*6-6, 0]) cylinder(h=1, d=5);\n                }\n            }\n        }\n    }\n}\n\nmodule paper_tray() {\n    // Input paper tray\n    translate([0, -35, 20]) {\n        difference() {\n            // Tray base\n            translate([0, 0, 0]) cube([75, 20, 5], center=true);\n            \n            // Paper slot\n            translate([0, 0, 2]) cube([70, 16, 3], center=true);\n        }\n        \n        // Paper guides\n        translate([-30, 0, 2.5]) cube([3, 16, 2], center=true);\n        translate([30, 0, 2.5]) cube([3, 16, 2], center=true);\n    }\n    \n    // Output tray\n    translate([0, 35, 15]) {\n        difference() {\n            // Tray base\n            translate([0, 0, 0]) cube([75, 15, 3], center=true);\n            \n            // Paper slot\n            translate([0, 0, 1]) cube([70, 11, 2], center=true);\n        }\n        \n        // Tray lip\n        translate([0, 7.5, 1.5]) cube([75, 2, 3], center=true);\n    }\n}\n\nmodule phone_handset() {\n    // Phone cradle on left side\n    translate([-45, 0, 30]) {\n        // Cradle base\n        cube([10, 20, 8], center=true);\n        \n        // Handset\n        translate([-15, 0, 5]) rotate([90, 0, 0]) {\n            difference() {\n                // Handset body\n                cylinder(h=25, d1=10, d2=10);\n                \n                // Speaker holes\n                translate([0, 0, -1]) cylinder(h=27, d=7);\n                \n                // Microphone holes\n                translate([0, 0, 24]) cylinder(h=2, d=5);\n            }\n            \n            // Curved handset shape\n            translate([0, 0, 12.5]) rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=10, d=10);\n                    translate([0, 0, -1]) cylinder(h=12, d=6);\n                }\n            }\n        }\n    }\n}\n\nmodule control_details() {\n    // LED indicators\n    translate([-25, 25, 27]) cylinder(h=2, d=3);\n    translate([-15, 25, 27]) cylinder(h=2, d=3);\n    translate([-5, 25, 27]) cylinder(h=2, d=3);\n    \n    // Brand label area\n    translate([0, -15, 26]) cube([40, 8, 1], center=true);\n    \n    // Document feeder slot\n    translate([0, -20, 30]) cube([60, 2, 8], center=true);\n}\n\nmodule vents() {\n    // Cooling vents on sides\n    for(i = [-1, 1]) {\n        translate([i*40, 0, 15]) {\n            for(z = [5:5:20]) {\n                translate([0, 0, z]) cube([2, 60, 3], center=true);\n            }\n        }\n    }\n    \n    // Rear vents\n    translate([0, -32.5, 15]) {\n        for(x = [-30:10:30]) {\n            translate([x, 0, 0]) cube([5, 2, 20], center=true);\n        }\n    }\n}\n\n// Assemble the fax machine\nunion() {\n    fax_body();\n    paper_tray();\n    phone_handset();\n    control_details();\n    vents();\n}",
    "renders": true
  },
  {
    "household_item": "display",
    "openscad_code": "// Realistic Medium-Complexity Display (Raspberry Pi 7-inch Touchscreen Style)\n// Overall footprint ~110 x 70 mm, 8 mm thick, fully 3-D printable without support\n\n// ---------- Parameters ----------\nscreen_w = 86;          // active display width\nscreen_h = 54;          // active display height\nbezel = 5;              // frame around the active area\nwall = 2;               // wall thickness for printability\ndepth = 8;              // total thickness\ncorner = 4;             // corner radius\nmount_hole = 2.2;       // M2 screw clearance\nstandoff_h = 3;         // boss height on rear for screws\n\n// ---------- Helper module ----------\nmodule rounded_rect(w, h, d, r) {\n    hull() {\n        for(dx=[-w/2+r, w/2-r], dy=[-h/2+r, h/2-r])\n            translate([dx, dy, 0])\n                cylinder(h=d, r=r, $fn=20);\n    }\n}\n\n// ---------- Front face ----------\nmodule front_bezel() {\n    difference() {\n        // outer shell\n        rounded_rect(screen_w+2*bezel, screen_h+2*bezel, depth, corner);\n        // recess for actual screen\n        translate([0,0,-0.1])\n            rounded_rect(screen_w, screen_h, depth+0.2, corner-1);\n        // camera / light window\n        translate([screen_w/2-8, screen_h/2+bezel/2, -depth+1.5])\n            cube([6, 2, 1.5], center=true);\n    }\n}\n\n// ---------- Back shell ----------\nmodule back_shell() {\n    difference() {\n        // main back plate\n        rounded_rect(screen_w+2*bezel, screen_h+2*bezel, wall, corner);\n        // central cavity for electronics\n        translate([0,0,-wall])\n            rounded_rect(screen_w-2*wall, screen_h-2*wall, wall+1, corner-2);\n    }\n}\n\n// ---------- Mounting bosses ----------\nmodule mount_bosses() {\n    for(x=[-screen_w/2+6, screen_w/2-6], y=[-screen_h/2+6, screen_h/2-6]) {\n        // threaded brass insert boss\n        translate([x, y, -wall/2-standoff_h/2])\n            cylinder(h=standoff_h, r=mount_hole+2, $fn=20);\n        // clearance hole\n        translate([x, y, -wall-1])\n            cylinder(h=standoff_h+2, r=mount_hole, $fn=20);\n    }\n}\n\n// ---------- Ventilation slots ----------\nmodule vents() {\n    for(i=[-4:4]) {\n        translate([i*10, -screen_h/2-2, -wall/2])\n            cube([2, 4, wall], center=true);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    front_bezel();\n    translate([0,0,-wall])\n        back_shell();\n    mount_bosses();\n    vents();\n}",
    "renders": true
  },
  {
    "household_item": "touchpad",
    "openscad_code": "// OpenSCAD Touchpad Model (Medium Complexity, Realistic Style)\n\n// Overall dimensions\ntouchpad_width = 65;\ntouchpad_height = 45;\ntouchpad_depth = 4;\n\n// Corner radius for rounded edges\ncorner_radius = 3;\n\n// Button parameters\nbutton_height = 1.5;\nbutton_width = 30;\nbutton_gap = 2;\n\n// USB port parameters\nusb_width = 12;\nusb_height = 5;\nusb_depth = 8;\n\n// LED indicators\nled_diameter = 2;\nled_depth = 1;\n\n// Main touchpad body\nmodule touchpad_body() {\n    difference() {\n        // Main rounded rectangle base\n        minkowski() {\n            cube([touchpad_width - 2*corner_radius, \n                  touchpad_height - 2*corner_radius, \n                  touchpad_depth], center = true);\n            sphere(r = corner_radius);\n        }\n        \n        // Create flat top surface\n        translate([0, 0, touchpad_depth/2 - 0.5])\n            cube([touchpad_width + 2, touchpad_height + 2, 2], center = true);\n    }\n}\n\n// Touch surface area (slightly recessed)\nmodule touch_surface() {\n    translate([0, 0, -0.2])\n        cube([touchpad_width - 6, touchpad_height - 10, 0.4], center = true);\n}\n\n// Physical buttons at bottom\nmodule buttons() {\n    // Left button\n    translate([-button_width/2 - button_gap/2, \n               -touchpad_height/2 + button_height/2 + 5, \n               touchpad_depth/2 - button_height])\n        rounded_cube(button_width, button_height*2, button_height, 1);\n    \n    // Right button\n    translate([button_width/2 + button_gap/2, \n               -touchpad_height/2 + button_height/2 + 5, \n               touchpad_depth/2 - button_height])\n        rounded_cube(button_width, button_height*2, button_height, 1);\n}\n\n// USB-C port opening\nmodule usb_port() {\n    translate([touchpad_width/2 + 0.1, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = usb_width, r = usb_height/2, center = true);\n    \n    // Internal cavity for connector\n    translate([touchpad_width/2 + usb_depth/2, 0, 0])\n        cube([usb_depth, usb_width, usb_height], center = true);\n}\n\n// LED indicators\nmodule leds() {\n    // Left LED\n    translate([-touchpad_width/4, touchpad_height/2 - 5, touchpad_depth/2 - led_depth])\n        cylinder(h = led_depth + 0.1, r = led_diameter/2);\n    \n    // Right LED\n    translate([touchpad_width/4, touchpad_height/2 - 5, touchpad_depth/2 - led_depth])\n        cylinder(h = led_depth + 0.1, r = led_diameter/2);\n}\n\n// Rubber feet\nmodule feet() {\n    foot_size = 4;\n    foot_height = 1;\n    \n    positions = [\n        [-touchpad_width/2 + 8, -touchpad_height/2 + 8],\n        [touchpad_width/2 - 8, -touchpad_height/2 + 8],\n        [-touchpad_width/2 + 8, touchpad_height/2 - 8],\n        [touchpad_width/2 - 8, touchpad_height/2 - 8]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], -touchpad_depth/2 - foot_height/2 + 0.5])\n            cylinder(h = foot_height, r1 = foot_size/2, r2 = foot_size/2 + 0.5, center = true);\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(w, l, h, r) {\n    minkowski() {\n        cube([w - 2*r, l - 2*r, h - r], center = true);\n        sphere(r = r);\n    }\n}\n\n// Assembly\nunion() {\n    touchpad_body();\n    buttons();\n    color(\"lightgray\")\n        touch_surface();\n    \n    difference() {\n        union();\n        usb_port();\n    }\n    \n    // Add LED holes\n    leds();\n    \n    // Add rubber feet\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "trackpad",
    "openscad_code": "// Realistic 3D-printable trackpad\n// Dimensions in mm, suitable for FDM printing (2 mm walls, no steep overhangs)\n\n$fn = 32;\n\n// Overall size\npad_w = 100;\npad_h = 70;\nbase_t = 8;\ntop_t  = 4;\n\n// Touch surface inset\ninset_x = 8;\ninset_y = 8;\ninset_d = 2;\n\n// Buttons\nbutton_h = 18;\nbutton_d = 1.5;\ngap = 2;\n\n// USB-C port\nport_w = 8.4;\nport_h = 2.6;\nport_depth = 6;\n\n// Rubber feet\nfoot_d = 6;\nfoot_h = 1.5;\nfoot_pos = 8;\n\n// Screw posts (hidden)\npost_d = 6;\npost_h = 4;\n\n// Main base shell\nmodule base() {\n    difference() {\n        union() {\n            // Main block\n            translate([0, 0, base_t/2])\n                cube([pad_w, pad_h, base_t], center=true);\n\n            // Front lip (slight slope for finger access)\n            translate([0, pad_h/2 - 5, base_t - 1])\n                cube([pad_w - 10, 10, 2], center=true);\n        }\n\n        // Hollow interior\n        translate([0, 0, base_t/2 + 1])\n            cube([pad_w - 4, pad_h - 4, base_t - 2], center=true);\n\n        // USB-C port\n        translate([pad_w/2 + 0.1, 0, base_t/2])\n            rotate([0, 90, 0])\n                cube([port_h, port_w, port_depth], center=true);\n    }\n}\n\n// Touch surface plate\nmodule touch_surface() {\n    difference() {\n        // Top plate\n        translate([0, 0, base_t + top_t/2])\n            cube([pad_w, pad_h, top_t], center=true);\n\n        // Touch area recess\n        translate([0, 0, base_t + top_t - inset_d/2])\n            cube([pad_w - 2*inset_x, pad_h - 2*inset_y, inset_d + 0.1], center=true);\n    }\n}\n\n// Buttons under surface\nmodule buttons() {\n    for (sign = [-1, 1]) {\n        translate([sign * (pad_w/2 - button_h/2 - gap), 0, base_t + top_t - button_d/2])\n            cube([button_h, pad_h/2 - 4, button_d], center=true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (pad_w/2 - foot_pos), y * (pad_h/2 - foot_pos), foot_h/2])\n                cylinder(h = foot_h, d = foot_d);\n}\n\n// Screw posts (hidden inside)\nmodule posts() {\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (pad_w/2 - 15), y * (pad_h/2 - 10), post_h/2])\n                cylinder(h = post_h, d = post_d);\n}\n\n// Assembly\nbase();\ntouch_surface();\nbuttons();\nfeet();\nposts();",
    "renders": true
  },
  {
    "household_item": "trackball",
    "openscad_code": "// Medium-complexity realistic trackball\n// Approx. 100 mm long x 80 mm wide x 60 mm tall\n\n// Overall body shell\nmodule body_shell() {\n    difference() {\n        // Main rounded base\n        union() {\n            // Lower half\n            translate([0, 0, 15]) scale([50, 40, 15]) sphere(d = 1, $fn = 60);\n            // Upper half\n            translate([0, 0, 15]) scale([50, 40, 15]) sphere(d = 1, $fn = 60);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 15]) scale([45, 35, 12]) sphere(d = 1, $fn = 60);\n        \n        // Top ball cavity\n        translate([0, 0, 35]) cylinder(h = 20, d1 = 40, d2 = 38, $fn = 60);\n    }\n}\n\n// Ball\nmodule trackball() {\n    color(\"silver\") translate([0, 0, 50]) sphere(d = 34, $fn = 60);\n}\n\n// Buttons\nmodule buttons() {\n    // Left button\n    translate([-30, 15, 25]) rotate([0, 30, 0]) button();\n    // Right button  \n    translate([-30, -15, 25]) rotate([0, 30, 0]) button();\n    // Scroll wheel\n    translate([30, 0, 30]) scroll_wheel();\n}\n\nmodule button() {\n    difference() {\n        // Button top\n        translate([0, 0, 2]) cylinder(h = 5, d1 = 15, d2 = 12, $fn = 30);\n        // Stem hole\n        translate([0, 0, -1]) cylinder(h = 10, d = 6, $fn = 20);\n    }\n}\n\nmodule scroll_wheel() {\n    rotate([90, 0, 0]) cylinder(h = 15, d = 12, $fn = 30);\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-35, 35], y = [-25, 25]) {\n        translate([x, y, 0]) cylinder(h = 2, d = 8, $fn = 20);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    difference() {\n        translate([-50, 0, 15]) cube([10, 12, 8], center = true);\n        translate([-52, 0, 15]) cube([8, 8, 4], center = true);\n    }\n}\n\n// Assemble trackball\nbody_shell();\ntrackball();\nbuttons();\nfeet();\nusb_port();",
    "renders": true
  },
  {
    "household_item": "controller",
    "openscad_code": "// Game-controller in realistic style – 1:3 scale, ~95 mm wide\n// All overhangs are ≤45° so the model can be printed support-free\n// Wall thickness ≥2 mm for strength\n\n$fn = 32;            // Smooth curves\n\n// ---------- Modules ----------\n\nmodule shell() {\n    difference() {\n        // Main body – ergonomic outer hull\n        hull() {\n            translate([-42,-28,0])  sphere(12);   // left grip\n            translate([ 42,-28,0])  sphere(12);   // right grip\n            translate([-20, 22,0])  sphere(12);   // top-left\n            translate([ 20, 22,0])  sphere(12);   // top-right\n            translate([  0,  8,8])  sphere(12);   // center bump\n        }\n\n        // Hollow it out\n        scale([0.90,0.90,0.85])\n        translate([0,0,-4])\n        hull() {\n            translate([-42,-28,0])  sphere(11);\n            translate([ 42,-28,0])  sphere(11);\n            translate([-20, 22,0])  sphere(11);\n            translate([ 20, 22,0])  sphere(11);\n            translate([  0,  8,8])  sphere(11);\n        }\n    }\n}\n\nmodule dpad() {\n    // Cross-shaped D-pad\n    translate([-24,8,6]) rotate([0,0,45]) {\n        union() {\n            cube([12,4,2], center=true);\n            cube([4,12,2], center=true);\n        }\n    }\n}\n\nmodule abxy() {\n    // Four face buttons\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([24 + x*8, 18 + y*8, 6])\n                cylinder(h=2, r=4, $fn=24);\n}\n\nmodule analog_stick(pos) {\n    translate(pos)\n        union() {\n            cylinder(h=4, r1=6, r2=7);   // base\n            translate([0,0,4])\n                cylinder(h=3, r=5);      // stick\n        }\n}\n\nmodule triggers() {\n    // L & R shoulder buttons\n    for(s=[-1,1])\n        translate([s*38,30,8]) rotate([0,45,0])\n            cube([12,5,6], center=true);\n}\n\nmodule guide_button() {\n    translate([0,6,6])\n        cylinder(h=2, r=3, $fn=20);\n}\n\n// ---------- Assembly ----------\nunion() {\n    shell();\n\n    dpad();\n    abxy();\n    analog_stick([-16,-8,0]);\n    analog_stick([ 16,-8,0]);\n    triggers();\n    guide_button();\n}",
    "renders": true
  },
  {
    "household_item": "stylus",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Stylus\n// Approx. 85 mm long, 9 mm max diameter\n\n// Main module\nmodule stylus() {\n    // Tip assembly (cone + rounded end)\n    union() {\n        translate([0,0,0])\n            cylinder(h=6, d1=1, d2=5, $fn=32);  // Fine tip cone\n        \n        translate([0,0,-1])\n            sphere(d=1.1, $fn=24);              // Slightly rounded tip\n    }\n    \n    // Main shaft with grip rings\n    translate([0,0,6])\n        shaft_with_grips();\n    \n    // Button housing\n    translate([0,0,70])\n        button_housing();\n    \n    // Flat end cap with magnet cavity\n    translate([0,0,82])\n        end_cap();\n}\n\nmodule shaft_with_grips() {\n    difference() {\n        union() {\n            // Main smooth shaft\n            cylinder(h=64, d=8, $fn=32);\n            \n            // 3 grip rings\n            for(z=[15,35,55])\n                translate([0,0,z])\n                    cylinder(h=3, d=9.2, $fn=32);\n        }\n        \n        // Grooves between grip rings\n        for(z=[18.5,38.5])\n            translate([0,0,z])\n                cylinder(h=1.5, d=7.5, $fn=32);\n    }\n}\n\nmodule button_housing() {\n    difference() {\n        union() {\n            // Cylindrical body\n            cylinder(h=8, d=9, $fn=32);\n            \n            // Button protrusion\n            translate([4,0,4])\n                cube([3,6,1.5], center=true);\n        }\n        \n        // Button recess\n        translate([4.5,0,4])\n            cube([2.2,5,2], center=true);\n    }\n}\n\nmodule end_cap() {\n    difference() {\n        // Flat end\n        cylinder(h=3, d=8, $fn=32);\n        \n        // Magnet cavity (3x2mm disc)\n        translate([0,0,-0.5])\n            cylinder(h=2.5, d=3.2, $fn=32);\n    }\n}\n\n// Render the stylus\nstylus();",
    "renders": true
  },
  {
    "household_item": "microphone",
    "openscad_code": "// Realistic-style medium-complexity microphone\n// Approx. 80 mm tall, designed for FDM printing with no supports\n\n$fa = 2;\n$fs = 0.5;\n\n// Main assembly\nmodule microphone() {\n    // Base and shaft\n    stand();\n    \n    // Windshield / grille\n    grille();\n    \n    // Electronics housing\n    housing();\n    \n    // XLR connector\n    xlr();\n}\n\n// Tripod desk stand\nmodule stand() {\n    difference() {\n        union() {\n            // Base disc\n            cylinder(h = 6, d = 45);\n            \n            // Shaft\n            translate([0, 0, 6])\n                cylinder(h = 24, d1 = 12, d2 = 9);\n            \n            // Three legs\n            for(a = [0:120:240]) {\n                rotate([0, 0, a])\n                    translate([0, 18, 0])\n                        cube([6, 15, 3], center = true);\n            }\n        }\n        \n        // Cable exit\n        translate([0, -18, 3])\n            rotate([90, 0, 0])\n                cylinder(h = 20, d = 6);\n    }\n}\n\n// Wire mesh grille\nmodule grille() {\n    // Outer mesh shell\n    difference() {\n        sphere(d = 36);\n        sphere(d = 32);\n    }\n    \n    // Internal ribs for 3D printing\n    for(z = [-16:6:16]) {\n        translate([0, 0, z])\n            rotate_extrude()\n                translate([17, 0, 0])\n                    circle(d = 1);\n    }\n    \n    // Mount ring\n    translate([0, 0, 30])\n        cylinder(h = 4, d = 10);\n}\n\n// Electronics housing\nmodule housing() {\n    // Main body\n    difference() {\n        union() {\n            cylinder(h = 30, d = 8);\n            translate([0, 0, 30])\n                cylinder(h = 10, d = 12);\n        }\n        \n        // Thread for grille\n        translate([0, 0, 38])\n            cylinder(h = 2, d = 9.5);\n    }\n    \n    // Switch slot\n    translate([6, 0, 35])\n        cube([3, 5, 6]);\n}\n\n// 3-pin XLR male connector\nmodule xlr() {\n    // Shell\n    difference() {\n        cylinder(h = 20, d = 19.5);\n        cylinder(h = 20, d = 15.5);\n    }\n    \n    // Insert\n    translate([0, 0, 20])\n        cylinder(h = 5, d = 15);\n    \n    // Pins\n    for(x = [-4, 0, 4]) {\n        translate([x, 0, 25])\n            cylinder(h = 5, d = 1.5);\n    }\n    \n    // Latch\n    translate([0, -10, 10])\n        cube([2, 2, 10]);\n}\n\n// Position the assembly\ntranslate([0, 0, 0])\n    microphone();",
    "renders": true
  },
  {
    "household_item": "headphone",
    "openscad_code": "// OpenSCAD Headphone Model – realistic style, medium complexity\n// Overall size ≈ 70 mm wide, 60 mm deep, 50 mm tall\n// Wall thickness ≥ 1.2 mm for reliable FDM printing\n\n$fn = 36;          // smooth curves\n\nmodule headband() {\n    // curved metal/plastic band\n    difference() {\n        // outer shell\n        rotate_extrude(angle = 180) {\n            translate([25, 0])\n                square([5, 5], center = true);\n        }\n        // inner cavity for weight saving\n        rotate_extrude(angle = 180) {\n            translate([25, 0])\n                square([3.6, 3.6], center = true);\n        }\n    }\n}\n\nmodule pad() {\n    // soft ear pad torus\n    rotate_extrude()\n        translate([22, 2.5])\n            circle(d = 5);\n}\n\nmodule cup() {\n    // driver housing\n    difference() {\n        // main cup\n        cylinder(h = 14, d = 45);\n        // inside cavity for driver\n        cylinder(h = 15, d = 38);\n    }\n    // grill\n    for (a = [0:30:150])\n        rotate([0, 0, a])\n            translate([0, 16, 3])\n                cube([0.8, 1, 8], center = true);\n}\n\nmodule yoke() {\n    // metal fork\n    difference() {\n        union() {\n            // vertical arms\n            for (x = [-11, 11])\n                translate([x, 0, 0])\n                    cube([4, 4, 10]);\n            // horizontal bridge\n            translate([0, 0, 10])\n                cube([26, 4, 4]);\n        }\n        // screw hole\n        translate([0, 2, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 3.2);\n    }\n}\n\nmodule ear_assembly(side = 1) {\n    // side = 1 left, ‑1 right\n    mirror([0, side, 0]) {\n        translate([0, side*25, 0]) {\n            // cup\n            cup();\n            // pad\n            translate([0, 0, 14])\n                pad();\n        }\n        // yoke below headband\n        translate([0, side*25, -11])\n            rotate([90, 0, 0])\n                yoke();\n    }\n}\n\n// build the headphone\nunion() {\n    // headband centered\n    translate([0, 0, 0])\n        headband();\n\n    // left ear\n    ear_assembly(1);\n\n    // right ear\n    ear_assembly(-1);\n}",
    "renders": true
  },
  {
    "household_item": "earphone",
    "openscad_code": "// Realistic earphone model - medium complexity\n// Dimensions in mm, suitable for 3D printing\n\n// Main parameters\nearbud_diameter = 16;\nearbud_length = 20;\nstem_length = 55;\nstem_diameter = 7;\nnozzle_length = 6;\nnozzle_diameter = 5;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Create earbud housing\nmodule earbud_housing() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main body\n            translate([0, 0, earbud_length/2])\n                sphere(d = earbud_diameter);\n            \n            // Stem\n            translate([0, 0, -stem_length/2])\n                cylinder(h = stem_length, d = stem_diameter);\n            \n            // Smooth transition\n            translate([0, 0, earbud_length/2 - 2])\n                cylinder(h = 4, d1 = earbud_diameter, d2 = stem_diameter);\n        }\n        \n        // Inner cavity\n        translate([0, 0, earbud_length/2])\n            sphere(d = earbud_diameter - 2*wall);\n        translate([0, 0, -stem_length/2])\n            cylinder(h = stem_length, d = stem_diameter - 2*wall);\n    }\n}\n\n// Create nozzle with mesh holes\nmodule nozzle() {\n    difference() {\n        // Nozzle tube\n        translate([0, 0, earbud_length/2 + nozzle_length/2])\n            cylinder(h = nozzle_length, d = nozzle_diameter);\n        \n        // Inner hole\n        translate([0, 0, earbud_length/2 + nozzle_length/2])\n            cylinder(h = nozzle_length + 1, d = nozzle_diameter - 2*wall);\n        \n        // Mesh holes pattern\n        for (i = [0:2:359]) {\n            rotate([0, 0, i])\n                translate([nozzle_diameter/2 - wall/2, 0, earbud_length/2 + nozzle_length/2])\n                    cylinder(h = nozzle_length + 1, d = 0.8);\n        }\n    }\n}\n\n// Create button\nmodule button() {\n    translate([earbud_diameter/2 - 3, 0, earbud_length/2 - 5])\n        difference() {\n            cube([6, 4, 2], center = true);\n            cube([5, 3, 2.1], center = true);\n        }\n}\n\n// Create charging contacts\nmodule charging_contacts() {\n    for (i = [-1, 1]) {\n        translate([0, i * 2, -stem_length + 2])\n            difference() {\n                cylinder(h = 1, d = 3);\n                cylinder(h = 1.1, d = 2);\n            }\n    }\n}\n\n// Create speaker grill pattern\nmodule speaker_grill() {\n    difference() {\n        // Grill base\n        translate([0, 0, earbud_length/2 + nozzle_length + 0.5])\n            cylinder(h = 0.5, d = nozzle_diameter);\n        \n        // Holes\n        for (x = [-2:1:2]) {\n            for (y = [-2:1:2]) {\n                if (x*x + y*y < 2.5*2.5) {\n                    translate([x, y, earbud_length/2 + nozzle_length + 0.4])\n                        cylinder(h = 0.7, d = 0.6);\n                }\n            }\n        }\n    }\n}\n\n// Create silicone tip\nmodule ear_tip() {\n    difference() {\n        // Outer shape\n        hull() {\n            translate([0, 0, earbud_length/2 + nozzle_length + 2])\n                sphere(d = 12);\n            translate([0, 0, earbud_length/2 + nozzle_length + 8])\n                sphere(d = 8);\n        }\n        \n        // Inner hole\n        translate([0, 0, earbud_length/2 + nozzle_length + 5])\n            cylinder(h = 10, d = nozzle_diameter + 2);\n    }\n}\n\n// Assemble complete earphone\nunion() {\n    earbud_housing();\n    nozzle();\n    button();\n    charging_contacts();\n    speaker_grill();\n    ear_tip();\n}\n\n// Mirror for left ear version\n// translate([50, 0, 0])\n//     mirror([1, 0, 0])\n//         earbud_housing();",
    "renders": true
  },
  {
    "household_item": "dongle",
    "openscad_code": "// USB-C Dongle with HDMI + USB-A + USB-C ports\n// Overall dimensions: 60 x 25 x 12 mm\n\n$fn = 64;\n\n// Main body\nmodule dongle_body() {\n    difference() {\n        // Main shell\n        translate([-30, -12.5, 0])\n            cube([60, 25, 12], center = false);\n        \n        // Top chamfer\n        translate([-30, -12.5, 11.5])\n            rotate([0, 45, 0])\n                cube([60, 25, 2], center = false);\n        \n        // Bottom chamfer\n        translate([-30, -12.5, 0])\n            rotate([0, 45, 0])\n                cube([60, 25, 2], center = false);\n        \n        // Internal cavity (2mm walls)\n        translate([-28, -10.5, 2])\n            cube([56, 21, 8], center = false);\n    }\n}\n\n// USB-C male plug (goes into laptop)\nmodule usbc_plug() {\n    union() {\n        // Metal shell\n        translate([-32.5, -5.5, 3.5])\n            cube([5, 11, 5], center = false);\n        \n        // Plastic insert\n        translate([-32, -4.5, 4])\n            cube([4, 9, 3], center = false);\n        \n        // Center tongue\n        translate([-32.2, -2, 4.5])\n            cube([3.6, 4, 1], center = false);\n    }\n}\n\n// HDMI port\nmodule hdmi_port() {\n    difference() {\n        // Outer shell\n        translate([28, -7.5, 2])\n            cube([7, 15, 8], center = false);\n        \n        // Opening\n        translate([29, -6, 3])\n            cube([5, 12, 6], center = false);\n        \n        // Internal pins\n        for(i = [0:6]) {\n            translate([29.5, -5.5 + i*2, 3.5])\n                cube([0.5, 1, 0.5], center = false);\n        }\n    }\n}\n\n// USB-A port\nmodule usba_port() {\n    difference() {\n        // Outer shell\n        translate([28, -3, 9])\n            cube([7, 10, 6], center = false);\n        \n        // Opening\n        translate([29, -2, 10])\n            cube([5, 7, 4], center = false);\n        \n        // Internal plastic tongue\n        translate([29.5, 1.5, 11.5])\n            cube([4, 0.5, 2], center = false);\n    }\n}\n\n// USB-C female port\nmodule usbc_female() {\n    difference() {\n        // Outer shell\n        translate([28, -1, -1.5])\n            cube([7, 8, 6], center = false);\n        \n        // Opening\n        translate([29, -0.5, -1])\n            cube([5, 7, 5], center = false);\n        \n        // Internal tongue\n        translate([29.5, 2.5, 0.5])\n            cube([4, 0.5, 1.5], center = false);\n    }\n}\n\n// LED indicator\nmodule led() {\n    translate([20, 12.5, 6])\n        cylinder(h = 0.5, r = 1.5, center = true);\n}\n\n// Assembly\nunion() {\n    dongle_body();\n    usbc_plug();\n    hdmi_port();\n    usba_port();\n    usbc_female();\n    led();\n}\n\n// Keychain hole\ntranslate([0, 0, 6])\n    rotate([90, 0, 0])\n        cylinder(h = 2, r = 2, center = true);",
    "renders": true
  },
  {
    "household_item": "cable",
    "openscad_code": "// Realistic USB-A to USB-C cable, approx. 70 mm long\n// All overhangs ≤45°, ready for FDM printing without supports\n\n$fn = 48; // smooth curves\n\n// global parameters\ncable_d = 4;          // cable jacket diameter\ncable_L = 50;         // length of flexible section\nusb_A_L = 15;         // USB-A plug body length\nusb_A_W = 12;         // USB-A plug width\nusb_A_H = 4.5;        // USB-A plug height\nusb_C_L = 8;          // USB-C plug body length\nusb_C_W = 8.2;        // USB-C plug width\nusb_C_H = 2.6;        // USB-C plug height\nstrain_relief_L = 6;  // rubber strain-relief cone\nwall = 1.2;           // 3D-print friendly wall thickness\n\nmodule cable_segment(d, L) {\n    // rotate_extrude would be easier, but stick to primitives\n    // build a 16-sided prism with rounded edges\n    sides = 16;\n    for (i = [0 : sides-1]) {\n        angle = i * 360/sides;\n        // small cube along chord\n        translate([0, 0, L/2])\n            rotate([0, 0, angle])\n                translate([d/2, 0, 0])\n                    rotate([0, 90, 0])\n                        cube([d*sin(180/sides), L, d*sin(180/sides)], center=true);\n    }\n}\n\nmodule metal_shell(w, h, l) {\n    // thin metallic sleeve with subtle draft angle for printability\n    difference() {\n        translate([-w/2, -h/2, 0])\n            cube([w, h, l]);\n        translate([-w/2+wall, -h/2+wall, -0.01])\n            cube([w-2*wall, h-2*wall, l+0.02]);\n    }\n}\n\nmodule usb_a_plug() {\n    union() {\n        // plastic shell\n        color(\"black\")\n            translate([-usb_A_W/2, -usb_A_H/2, 0])\n                cube([usb_A_W, usb_A_H, usb_A_L]);\n\n        // metal shield\n        color(\"silver\")\n            metal_shell(usb_A_W - 1, usb_A_H - 1.5, usb_A_L);\n\n        // tongue with contacts\n        color(\"darkblue\")\n            translate([-4.5, -0.4, usb_A_L - 2.5])\n                cube([9, 0.8, 2.5]);\n\n        for (i = [0:3]) {\n            // 4 gold contact pads\n            color(\"gold\")\n                translate([-3.6 + i*2.4, 0, usb_A_L - 0.2])\n                    cube([0.7, 0.2, 0.2]);\n        }\n    }\n}\n\nmodule usb_c_plug() {\n    union() {\n        // thin plastic shell\n        color(\"black\")\n            translate([-usb_C_W/2, -usb_C_H/2, 0])\n                cube([usb_C_W, usb_C_H, usb_C_L]);\n\n        // metal shell\n        color(\"silver\")\n            metal_shell(usb_C_W - 0.8, usb_C_H - 0.8, usb_C_L);\n\n        // center tongue\n        color(\"darkblue\")\n            translate([-usb_C_W/2 + 1, -0.35, usb_C_L/2])\n                cube([usb_C_W - 2, 0.7, usb_C_L - 2], center=true);\n    }\n}\n\nmodule strain_relief(d_in, d_out, L) {\n    // rubber cone, printed in TPU\n    color(\"darkgrey\")\n        hull() {\n            translate([0, 0, 0])\n                sphere(d=d_in);\n            translate([0, 0, L])\n                sphere(d=d_out);\n        }\n}\n\n// build the cable\nunion() {\n    // USB-A side\n    translate([0, 0, 0])\n        usb_a_plug();\n\n    // strain relief\n    translate([0, 0, usb_A_L])\n        strain_relief(cable_d, cable_d + 2, strain_relief_L);\n\n    // flexible cable\n    translate([0, 0, usb_A_L + strain_relief_L])\n        cable_segment(cable_d, cable_L);\n\n    // USB-C side strain relief\n    translate([0, 0, usb_A_L + strain_relief_L + cable_L])\n        strain_relief(cable_d + 2, cable_d, strain_relief_L);\n\n    // USB-C plug\n    translate([0, 0, usb_A_L + strain_relief_L + cable_L + strain_relief_L])\n        usb_c_plug();\n}",
    "renders": true
  },
  {
    "household_item": "connector",
    "openscad_code": "// Realistic medium-complexity USB-C right-angle panel-mount connector\n// Overall size ~55 × 20 × 15 mm, 3D-printable with no overhangs >45°\n\n$fn = 36;               // Smooth curves\nwall = 1.2;             // Common nozzle-friendly wall thickness\nclear = 0.15;           // Print tolerance for ports\n\n// Main connector module\nmodule usbc_connector(){\n    difference(){\n        union(){\n            // Main body shell\n            body();\n            // Front flange with countersunk screw holes\n            flange();\n            // Rear cable strain-relief boot\n            boot();\n            // Internal PCB support ribs\n            ribs();\n        }\n        // USB-C port cutout\n        usbc_port();\n        // Screw holes\n        screw_holes();\n    }\n}\n\n// Main rectangular shell\nmodule body(){\n    translate([0,0,7.5])\n        cube([35,18,15], center=true);\n}\n\n// Mounting flange with chamfers\nmodule flange(){\n    difference(){\n        translate([17.5,0,7.5])\n            cube([20,22,15], center=true);\n        // Chamfers on front edges\n        translate([27.5,0,15])\n            rotate([0,45,0])\n                cube([20,22,22], center=true);\n        mirror([1,0,0]){\n            translate([27.5,0,15])\n                rotate([0,45,0])\n                    cube([20,22,22], center=true);\n        }\n    }\n}\n\n// Cable boot with gentle taper\nmodule boot(){\n    hull(){\n        translate([-17.5,0,7.5])\n            cylinder(h=15, d=12, center=true);\n        translate([-27.5,0,7.5])\n            scale([1,0.7,0.7])\n                sphere(d=12);\n    }\n}\n\n// Internal ribs for PCB support\nmodule ribs(){\n    for(x=[-10,0,10]){\n        translate([x,0,7.5])\n            cube([1,14,13], center=true);\n    }\n}\n\n// USB-C port opening\nmodule usbc_port(){\n    translate([17.5+wall,0,7.5])\n        cube([8.4+clear,2.6+clear,5+clear], center=true);\n}\n\n// Two countersunk screw holes\nmodule screw_holes(){\n    for(y=[-8,8]){\n        translate([17.5,y,7.5])\n            rotate([90,0,0])\n                cylinder(h=20,d1=4.5,d2=2.5,center=true);\n    }\n}\n\nusbc_connector();",
    "renders": true
  },
  {
    "household_item": "port",
    "openscad_code": "// Realistic Port with Harbor, Dock, and Buildings\n// Overall dimensions: 80mm x 60mm x 15mm\n\n$fa = 1;\n$fs = 0.5;\n\n// Main module\nmodule port() {\n    difference() {\n        union() {\n            // Base water and land\n            base();\n            \n            // Main dock structure\n            main_dock();\n            \n            // Secondary dock\n            secondary_dock();\n            \n            // Harbor buildings\n            buildings();\n            \n            // Cranes\n            crane([15, 20, 8], 0);\n            crane([55, 20, 8], 180);\n            \n            // Containers\n            containers();\n        }\n        \n        // Water cutout\n        water_cutout();\n        \n        // Dock post holes\n        dock_post_holes();\n    }\n}\n\n// Base water and land\nmodule base() {\n    // Water area (blue base)\n    color(\"lightblue\") \n    translate([0, 0, 0])\n    cube([80, 60, 2]);\n    \n    // Land area\n    color(\"sandybrown\")\n    translate([0, 0, 2])\n    cube([80, 30, 3]);\n}\n\n// Main dock\nmodule main_dock() {\n    // Dock platform\n    color(\"gray\")\n    translate([10, 30, 5])\n    cube([60, 20, 2]);\n    \n    // Dock posts\n    for(x = [15:20:55]) {\n        post([x, 30, 5]);\n        post([x, 48, 5]);\n    }\n    \n    // Dock surface planks\n    for(y = [31:2:48]) {\n        color(\"darkgray\")\n        translate([11, y, 7])\n        cube([58, 1.8, 0.5]);\n    }\n}\n\n// Secondary dock\nmodule secondary_dock() {\n    color(\"gray\")\n    translate([65, 10, 5])\n    cube([10, 20, 2]);\n    \n    // Posts for secondary dock\n    post([67, 10, 5]);\n    post([73, 10, 5]);\n    post([67, 28, 5]);\n    post([73, 28, 5]);\n}\n\n// Dock post\nmodule post(pos) {\n    translate(pos)\n    cylinder(h = 8, r = 1.5, $fn = 8);\n}\n\n// Harbor buildings\nmodule buildings() {\n    // Warehouse 1\n    building([20, 10, 5], [15, 10, 8], \"red\");\n    \n    // Warehouse 2\n    building([50, 10, 5], [20, 10, 6], \"brown\");\n    \n    // Control tower\n    color(\"white\")\n    translate([5, 15, 5])\n    cylinder(h = 12, r = 3, $fn = 16);\n    \n    // Tower top\n    color(\"red\")\n    translate([5, 15, 17])\n    cylinder(h = 2, r = 4, $fn = 16);\n}\n\n// Building module\nmodule building(pos, size, col) {\n    color(col)\n    translate(pos)\n    cube(size);\n    \n    // Roof\n    color(\"darkgray\")\n    translate([pos[0] - 1, pos[1] - 1, pos[2] + size[2]])\n    cube([size[0] + 2, size[1] + 2, 1]);\n}\n\n// Crane module\nmodule crane(pos, rot) {\n    translate(pos)\n    rotate([0, 0, rot]) {\n        // Base\n        color(\"yellow\")\n        cylinder(h = 10, r = 2, $fn = 8);\n        \n        // Arm\n        color(\"gray\")\n        translate([0, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(h = 15, r = 0.8, $fn = 8);\n        \n        // Hoist\n        color(\"black\")\n        translate([0, 15, 10])\n        sphere(r = 1);\n    }\n}\n\n// Containers\nmodule containers() {\n    // Stack 1\n    container([25, 35, 7.5], \"green\");\n    container([25, 35, 10], \"blue\");\n    \n    // Stack 2\n    container([45, 35, 7.5], \"red\");\n    container([45, 35, 10], \"yellow\");\n    \n    // Single containers\n    container([35, 40, 7.5], \"orange\");\n    container([15, 38, 7.5], \"purple\");\n}\n\n// Container module\nmodule container(pos, col) {\n    color(col)\n    translate(pos)\n    cube([6, 3, 2.5]);\n    \n    // Container details\n    color(\"black\")\n    translate([pos[0] + 0.2, pos[1] + 0.2, pos[2] + 2.2])\n    cube([5.6, 2.6, 0.2]);\n}\n\n// Water cutout\nmodule water_cutout() {\n    color(\"lightblue\")\n    translate([0, 30, 2])\n    cube([80, 30, 3]);\n}\n\n// Dock post holes for 3D printing\nmodule dock_post_holes() {\n    for(x = [15:20:55]) {\n        translate([x, 30, 0])\n        cylinder(h = 5, r = 1.4, $fn = 8);\n        translate([x, 48, 0])\n        cylinder(h = 5, r = 1.4, $fn = 8);\n    }\n    \n    translate([67, 10, 0])\n    cylinder(h = 5, r = 1.4, $fn = 8);\n    translate([73, 10, 0])\n    cylinder(h = 5, r = 1.4, $fn = 8);\n    translate([67, 28, 0])\n    cylinder(h = 5, r = 1.4, $fn = 8);\n    translate([73, 28, 0])\n    cylinder(h = 5, r = 1.4, $fn = 8);\n}\n\n// Render the port\nport();",
    "renders": true
  },
  {
    "household_item": "jack",
    "openscad_code": "// Realistic 3D printable jack toy\n// Overall size: ~70 mm tip-to-tip\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\narm_thick = 8;      // Arm diameter\nball_d = 12;        // Ball diameter\ncore_d = 16;        // Central sphere diameter\narm_len = 25;       // Arm length from center\nclearance = 0.2;    // Print clearance between parts\n\n// Build the entire jack\nunion() {\n    // Central sphere\n    color(\"silver\")\n    sphere(d = core_d);\n\n    // Six arms in 3 orthogonal directions\n    for (axis = [0:1:2])\n        for (sign = [-1, 1]) {\n            assign(ang = axis == 0 ? [0, 0, 0] :\n                         axis == 1 ? [0, 90, 0] :\n                                   [90, 0, 0])\n            rotate(ang)\n            translate([0, 0, sign * (arm_len + core_d/2)])\n            arm_assembly();\n        }\n}\n\n// Arm with ball tip and rounded end\nmodule arm_assembly() {\n    difference() {\n        union() {\n            // Cylindrical arm\n            cylinder(h = arm_len, d = arm_thick, center = true);\n\n            // Ball end\n            translate([0, 0, arm_len/2])\n            sphere(d = ball_d);\n\n            // Rounded shoulder\n            translate([0, 0, -arm_len/2])\n            sphere(d = arm_thick);\n        }\n\n        // Remove clearance hole through arm\n        cylinder(h = arm_len*2, d = arm_thick - 2*clearance, center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "slot",
    "openscad_code": "// Realistic 3D-printable slot (for coins, cards, or mail)\n// Dimensions: 80 mm x 50 mm x 12 mm overall\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Overall outer dimensions\nlength = 80;\nwidth = 50;\nheight = 12;\n\n// Internal slot cavity\nslot_len = 75;\nslot_wid = 45;\nslot_dep = 9;\n\n// Coin slot on top\ncoin_slot_len = 35;\ncoin_slot_wid = 2.2;\ncoin_slot_dep = wall + 2;\n\n// Taper angles for smooth coin funnel\ntaper = 4;\n\nmodule outer_shell() {\n    difference() {\n        // Main body block\n        cube([length, width, height], center = true);\n\n        // Hollow out interior\n        translate([0, 0, -wall / 2])\n            cube([slot_len, slot_wid, slot_dep + wall], center = true);\n    }\n}\n\nmodule coin_entry() {\n    difference() {\n        union() {\n            // Upper slot prism\n            translate([0, 0, height / 2 - wall / 2])\n                cube([coin_slot_len, coin_slot_wid, wall], center = true);\n\n            // Tapering funnel sides\n            for (x = [0, 1]) {\n                mirror([x ? -1 : 0, 0, 0])\n                    translate([(coin_slot_len / 2) - 2, 0, height / 2 - 2])\n                        rotate([0, 45, 0])\n                            cube([3, coin_slot_wid, 3], center = true);\n            }\n        }\n\n        // Remove intersection to make slot\n        translate([0, 0, height / 2 - wall - 2])\n            cube([coin_slot_len + 4, coin_slot_wid + 1, wall + 4], center = true);\n    }\n}\n\nmodule entry_bevel() {\n    // Rounded edges around coin slot for smooth insertion\n    for (y = [-1, 1]) {\n        translate([0, y * (coin_slot_wid / 2 + 1), height / 2 - 1])\n            rotate([90, 0, 0])\n                cylinder(h = coin_slot_len + 4, r = 1.2, $fn = 16, center = true);\n    }\n}\n\nmodule base_bevels() {\n    // Rounded base edges for printing without supports\n    for (axis = [[1,0,0], [0,1,0], [-1,0,0], [0,-1,0]]) {\n        translate([axis[0] * (length / 2 - 1), axis[1] * (width / 2 - 1), -height / 2 + 1])\n            cylinder(h = 2, r = 1, $fn = 8);\n    }\n}\n\nmodule label_area() {\n    // Flat recessed rectangle for adding text or logo\n    translate([0, 0, -height / 2 + 0.5])\n        cube([slot_len * 0.7, slot_wid * 0.3, 0.5], center = true);\n}\n\n// Assemble all parts\nunion() {\n    outer_shell();\n    coin_entry();\n    entry_bevel();\n    base_bevels();\n    label_area();\n}",
    "renders": true
  },
  {
    "household_item": "socket",
    "openscad_code": "// Realistic 3D printable socket – medium complexity\n\n// Overall dimensions\nsocket_length = 60;      // Total length\nhex_size = 24;           // Nut drive size (across flats)\nwall_thick = 2.5;        // Wall thickness for printability\ngrip_len = 30;           // Length of the grip section\nhex_depth = 12;          // Depth of hex cavity\n\n// Hexagonal profile module\nmodule hex_profile(h, center = false) {\n    // Create hexagonal prism\n    for(i = [0:5]) {\n        rotate([0,0,i*60])\n            translate([hex_size/2,0,0])\n                cube([hex_size, wall_thick*2, h], center = center);\n    }\n}\n\n// Grip knurling pattern\nmodule knurls() {\n    knurl_height = 1.2;\n    knurl_width = 2.5;\n    knurl_len = 1.5;\n    knurl_step = 5;\n    for(z = [knurl_step/2 : knurl_step : grip_len]) {\n        rotate([0,0,0])\n            for(i = [0:11]) {\n                rotate([0,0,i*30])\n                    translate([hex_size + wall_thick*2 + knurl_width/2, 0, z])\n                        cube([knurl_width, knurl_len, knurl_height], center = true);\n            }\n    }\n}\n\n// Main socket body\ndifference() {\n    // Outer shape: two cylinders for transition\n    union() {\n        // Drive end cylinder\n        cylinder(h = socket_length - grip_len, r = hex_size/2 + wall_thick*2, $fn = 6);\n        // Grip cylinder\n        translate([0,0,socket_length - grip_len])\n            cylinder(h = grip_len, r = hex_size/2 + wall_thick*2 + 1.5, $fn = 48);\n    }\n\n    // Hexagonal cavity for nut\n    translate([0,0,0])\n        linear_extrude(height = hex_depth + 1)\n            circle(d = hex_size, $fn = 6);\n\n    // Square drive hole (1/4 inch assumed)\n    translate([0,0,socket_length - 10])\n        rotate([0,90,0])\n            cylinder(h = 10, r = 6.5/2, $fn = 4);\n}\n\n// Add knurls on grip section\nknurls();\n\n// Chamfer on drive end\ndifference() {\n    translate([0,0,0])\n        cylinder(h = 2, r1 = hex_size/2 + wall_thick*2, r2 = hex_size/2 + wall_thick*2 - 1, $fn = 6);\n}",
    "renders": true
  },
  {
    "household_item": "plug",
    "openscad_code": "// Realistic 3-prong plug, ~75 mm long\n// All dimensions in mm, printable without support\n\n// Main parameters -----------------------------------------------------------\npin_d = 4;               // diameter of round pin\npin_w = 6.4;             // width of flat blade\npin_h = 1.5;             // thickness of flat blade\npin_L = 21;              // length protruding from plug\nbody_L = 54;             // length of plug body\nbody_W = 32;             // width of plug body\nbody_H = 22;             // height of plug body\nwall_t = 2.5;            // wall thickness for shell\ncable_d = 9;             // cable diameter\ncable_L = 30;            // length of cable sleeve\ngrip_d = 3;              // size of grip ridges\ngrip_step = 6;           // pitch between grip ridges\ngrip_num = 5;            // number of grip ridges\n\n// Helper module: flat blade --------------------------------------------------\nmodule blade(x_pos, ang=0) {\n    translate([x_pos, 0, 0])\n        rotate([90, 0, ang])\n            linear_extrude(height = pin_L, center = false)\n                offset(r = 0.5)  // small fillet\n                    square([pin_w, pin_h], center = true);\n}\n\n// Helper module: round pin ---------------------------------------------------\nmodule round_pin(x_pos) {\n    translate([x_pos, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(d = pin_d, h = pin_L);\n}\n\n// Plug body shell -------------------------------------------------------------\nmodule plug_body() {\n    difference() {\n        // outer rounded shell\n        minkowski() {\n            cube([body_L, body_W, body_H], center = true);\n            sphere(r = 2);\n        }\n        // hollow interior\n        minkowski() {\n            translate([0, 0, 0])\n                cube([body_L - 2*wall_t,\n                      body_W - 2*wall_t,\n                      body_H - 2*wall_t], center = true);\n            sphere(r = 0.5);\n        }\n        // cable exit hole\n        rotate([0, 90, 0])\n            translate([0, 0, -body_L/2 - 1])\n                cylinder(d = cable_d + 1, h = body_W + 2, center = true);\n    }\n}\n\n// Grip ridges on back --------------------------------------------------------\nmodule grip_ridges() {\n    for (i = [0 : grip_num - 1]) {\n        translate([body_L/2 - 5 - i*grip_step, 0, body_H/2 - 2]) {\n            rotate([0, 90, 0])\n                cylinder(d = grip_d, h = body_W*0.85, center = true);\n        }\n    }\n}\n\n// Cable strain relief --------------------------------------------------------\nmodule cable_sleeve() {\n    translate([body_L/2 + cable_L/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d1 = cable_d + 4, d2 = cable_d + 1, h = cable_L);\n}\n\n// Assembly -------------------------------------------------------------------\nunion() {\n    plug_body();\n    grip_ridges();\n    cable_sleeve();\n\n    // pins protrude from front face\n    translate([-(body_L/2 + 1), 0, 0]) {\n        blade(-8, 0);           // left flat blade\n        blade( 8, 0);           // right flat blade\n        round_pin(0);           // center round pin\n    }\n}",
    "renders": true
  },
  {
    "household_item": "led",
    "openscad_code": "// Realistic 5 mm through-hole LED\n// Overall height ≈ 68 mm, footprint ≈ 8 mm\n\n$fn = 36; // smoother curves\nwall = 0.8; // good for 0.4 mm nozzle\n\n// LED body\nmodule led_body() {\n    // main epoxy dome\n    color(\"red\") sphere(d = 5.0);\n\n    // epoxy lip that sits on the reflector\n    translate([0, 0, 2.4])\n        cylinder(h = 0.5, d1 = 5.0, d2 = 5.8);\n}\n\n// Reflector cup\nmodule reflector() {\n    difference() {\n        // outer cylinder\n        cylinder(h = 5.5, d = 5.8);\n        // inner cone\n        translate([0, 0, -0.1])\n            cylinder(h = 5.7, d1 = 4.2, d2 = 3.2);\n    }\n}\n\n// Plastic base (clear epoxy below reflector)\nmodule base() {\n    color(\"Smoke\") \n    cylinder(h = 2.5, d = 5.8);\n}\n\n// Wire leads\nmodule leads() {\n    // left (cathode) lead\n    translate([-1.27, 0, -10.5])\n        rotate([0, 180, 0])\n            lead_straight();\n\n    // right (anode) lead\n    translate([1.27, 0, -10.5])\n        rotate([0, 180, 0])\n            lead_straight();\n}\n\nmodule lead_straight() {\n    // 0.5 mm diameter wire\n    cylinder(h = 10, d = 0.5);\n}\n\n// Cathode flat (indicator inside)\nmodule cathode_flat() {\n    // little flat on the cathode side\n    translate([-2.9, 0, 1.2])\n        rotate([0, 90, 0])\n            cube([0.4, 0.8, 1.2], center = true);\n}\n\n// Wire bends and standoff legs\nmodule bent_legs() {\n    // left leg bend\n    translate([-1.27, 0, -8.5]) {\n        rotate([90, 0, 0])\n            cylinder(h = 2.54, d = 0.5); // horizontal part\n        translate([-1.27, 0, 0])\n            cylinder(h = 8.5, d = 0.5); // vertical standoff\n    }\n\n    // right leg bend\n    translate([1.27, 0, -8.5]) {\n        rotate([90, 0, 0])\n            cylinder(h = 2.54, d = 0.5); // horizontal\n        translate([1.27, 0, 0])\n            cylinder(h = 8.5, d = 0.5); // vertical\n    }\n}\n\n// Final assembly\nunion() {\n    led_body();\n    translate([0, 0, -3.0]) reflector();\n    translate([0, 0, -5.5]) base();\n    cathode_flat();\n    bent_legs();\n}",
    "renders": true
  },
  {
    "household_item": "lcd",
    "openscad_code": "// Realistic 16x2 LCD module, 3D-printable\n// Overall footprint ~60 x 25 x 9 mm\n\n$fn=32;\n\n//------------------- PARAMETERS -------------------\nlcd_w = 60;          // overall width\nlcd_h = 25;          // overall height\nlcd_d = 9;           // overall depth\nbezel_thick = 2;     // plastic frame around glass\nwall_thick = 1.2;    // 3D-printable wall thickness\nglass_t = 1.5;       // glass thickness\npcb_t = 1.6;         // PCB thickness\n\n// Character area\nchar_area_w = 40;\nchar_area_h = 11;\nchar_rows = 2;\nchar_cols = 16;\n\n// Mounting holes\nhole_d = 2.5;\nhole_spacing = 55;\n\n//------------------- MAIN ASSEMBLY -------------------\ndifference() {\n    union() {\n        // Bezel / front frame\n        frame();\n\n        // LCD glass + display surface\n        translate([0, 0, bezel_thick])\n            lcd_glass();\n\n        // PCB on back\n        translate([0, 0, -pcb_t])\n            pcb();\n    }\n\n    // Mounting holes\n    mounting_holes();\n}\n\n//------------------- MODULES -------------------\nmodule frame() {\n    difference() {\n        // Outer shell\n        cube([lcd_w, lcd_h, lcd_d], center=true);\n        // Hollow out\n        translate([0, 0, bezel_thick/2])\n            cube([lcd_w-wall_thick*2, lcd_h-wall_thick*2, lcd_d], center=true);\n    }\n}\n\nmodule lcd_glass() {\n    // Glass plate\n    color(\"gray20\")\n    translate([0, 0, glass_t/2])\n        cube([char_area_w+4, char_area_h+4, glass_t], center=true);\n\n    // Dark active area\n    color(\"gray5\")\n    translate([0, 0, glass_t+0.01])\n        cube([char_area_w, char_area_h, 0.2], center=true);\n\n    // Character grid (dots)\n    dot_pitch_x = char_area_w / char_cols;\n    dot_pitch_y = char_area_h / char_rows;\n    for (r=[0:1])\n        for (c=[0:15])\n            translate([\n                -char_area_w/2 + c*dot_pitch_x + dot_pitch_x/2,\n                -char_area_h/2 + r*dot_pitch_y + dot_pitch_y/2,\n                glass_t+0.1\n            ])\n                cube([0.5, 0.5, 0.1], center=true);\n}\n\nmodule pcb() {\n    color(\"green\")\n    cube([lcd_w-4, lcd_h-4, pcb_t], center=true);\n\n    // Simplified SOIC package outline (controller)\n    translate([-lcd_w/4, lcd_h/6, pcb_t/2+0.1])\n        color(\"black\")\n        cube([8, 5, 0.3], center=true);\n}\n\nmodule mounting_holes() {\n    for (x=[-1,1])\n        translate([x*hole_spacing/2, 0, 0])\n            rotate([90,0,0])\n                cylinder(d=hole_d, h=lcd_d, center=true);\n}",
    "renders": true
  },
  {
    "household_item": "oled",
    "openscad_code": "// 0.96\" OLED module – realistic, printable, medium-complexity\n// Overall footprint ≈ 70 × 22 × 8 mm (largest dim. fits 50-100 mm)\n\n// ---------- Parameters ----------\nth = 1.6;               // PCB thickness\npcb_w = 27;             // PCB width (actual 26.5 mm)\npcb_l = 70;             // PCB length\noled_w = 21;            // active display width\noled_l = 46;            // active display length\noled_t = 0.2;           // glass thickness\nwall = 0.8;             // printable wall\nscrew_d = 2.2;          // M2 clearance\nscrew_h = 2.5;          // countersink depth\nvia_r = 0.4;            // via radius\nvia_h = 0.3;            // via protrusion\npin_pitch = 2.54;       // 0.1\" header pitch\npins = 4;               // GND VCC SCL SDA\npin_l = 6;              // header pin length\npin_t = 0.64;           // square pin width\n\n// ---------- PCB ----------\nmodule pcb() {\n    difference() {\n        // main board\n        cube([pcb_l, pcb_w, th], center = true);\n\n        // screw holes (2)\n        translate([pcb_l/2 - 3, pcb_w/2 - 3, 0])\n            cylinder(h = th + 0.2, d = screw_d, center = true, $fn = 20);\n        translate([pcb_l/2 - 3, -pcb_w/2 + 3, 0])\n            cylinder(h = th + 0.2, d = screw_d, center = true, $fn = 20);\n\n        // countersinks\n        translate([pcb_l/2 - 3, pcb_w/2 - 3, th/2 - screw_h/2])\n            cylinder(h = screw_h + 0.1, d1 = 4, d2 = screw_d, center = true, $fn = 20);\n        translate([pcb_l/2 - 3, -pcb_w/2 + 3, th/2 - screw_h/2])\n            cylinder(h = screw_h + 0.1, d1 = 4, d2 = screw_d, center = true, $fn = 20);\n    }\n}\n\n// ---------- OLED glass ----------\nmodule oled_glass() {\n    // black bezel\n    color(\"black\")\n    translate([0, 0, th/2 + oled_t/2 + 0.05])\n        cube([oled_l + 4, oled_w + 4, oled_t], center = true);\n\n    // active area\n    color(\"darkslategray\")\n    translate([0, 0, th/2 + oled_t + 0.1])\n        cube([oled_l, oled_w, oled_t/2], center = true);\n}\n\n// ---------- Pin header ----------\nmodule pin_header() {\n    for (i = [0 : pins - 1])\n        translate([(i - 1.5) * pin_pitch, pcb_w/2 + pin_l/2, 0])\n            cube([pin_t, pin_l, pin_t], center = true);\n}\n\n// ---------- Vias for realism ----------\nmodule vias() {\n    for (x = [-25 : 5 : 25])\n        for (y = [-8 : 4 : 8])\n            translate([x, y, th/2 + via_h/2])\n                cylinder(h = via_h + 0.1, r = via_r, $fn = 8);\n}\n\n// ---------- Main assembly ----------\npcb();\noled_glass();\npin_header();\nvias();",
    "renders": true
  },
  {
    "household_item": "crt",
    "openscad_code": "// Realistic medium-complexity CRT monitor model\n// Overall size ~80 mm wide, printable without supports\n\n$fn = 32;               // Smooth curves for 3D printing\nwall = 2;               // Wall thickness for printability\nscrew_d = 3;            // Vent screw diameter\nled_d = 2;              // Power LED diameter\n\nmodule crt_body() {\n    // Main monitor housing (slightly tapered back)\n    difference() {\n        hull() {\n            // Front bezel\n            translate([0, 0, 35])\n                cube([80, 60, 10], center = true);\n            // Rear bulk\n            translate([0, 0, -5])\n                scale([1.05, 1.05, 1])\n                cube([76, 56, 30], center = true);\n        }\n        \n        // Screen opening (slightly inset)\n        translate([0, 0, 36])\n            cube([66, 46, 12], center = true);\n        \n        // Rear cable cutout (flat bottom for printing)\n        translate([0, 28, -20])\n            cube([40, 10, 20], center = true);\n    }\n}\n\nmodule screen() {\n    // Slightly curved CRT glass\n    translate([0, 0, 39])\n        scale([1, 0.75, 0.2])\n        sphere(40);\n}\n\nmodule buttons() {\n    // Power button\n    translate([-30, -25, 36])\n        cylinder(h = 3, d = 6, center = true);\n    // Menu buttons in a row\n    for (x = [-15:7:15]) {\n        translate([x, -25, 36])\n            cylinder(h = 2, d = 4, center = true);\n    }\n}\n\nmodule vents() {\n    // Side vents as slotted rectangles\n    for (y = [-20:10:20]) {\n        translate([42, y, 20])\n            cube([wall + 0.1, 8, 2]);\n    }\n    // Rear vents with simulated screw heads\n    for (x = [-25:25:25]) {\n        translate([x, 28, 10])\n            cube([5, wall + 0.1, 5]);\n        // Screws in rear vents\n        translate([x, 28 + wall/2, 10])\n            rotate([90, 0, 0])\n            cylinder(h = wall, d = screw_d, center = true);\n    }\n}\n\nmodule foot() {\n    // Central stand column\n    translate([0, 0, -25])\n        cylinder(h = 20, d1 = 20, d2 = 15);\n    // Wide base plate\n    translate([0, 0, -35])\n        cylinder(h = 3, d = 40);\n}\n\nmodule power_led() {\n    // Small LED indicator\n    translate([28, -25, 38.5])\n        sphere(led_d/2);\n}\n\n// Assemble the complete CRT\nunion() {\n    crt_body();\n    screen();\n    buttons();\n    vents();\n    foot();\n    power_led();\n}",
    "renders": true
  },
  {
    "household_item": "plasma",
    "openscad_code": "// Realistic-style 3D-printable plasma model\n// Overall size ~70 mm\n\n$fn = 48;  // smooth curves\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main plasma body\nmodule plasma_body() {\n    difference() {\n        // Main ellipsoid\n        scale([1, 0.7, 1])\n            sphere(d = 64);\n\n        // Hollow center\n        scale([1, 0.7, 1])\n            sphere(d = 64 - 2*wall);\n    }\n}\n\n// Electrode stem on top\nmodule stem() {\n    union() {\n        // Upper tube\n        cylinder(h = 12, d1 = 14, d2 = 12, center = false);\n        translate([0, 0, 12])\n            cylinder(h = 6, d1 = 12, d2 = 8, center = false);\n    }\n}\n\n// Internal electrode ring\nmodule ring() {\n    rotate_extrude()\n        translate([20, 0, 0])\n            circle(r = 2);\n}\n\n// Glow filaments (spiral)\nmodule filaments() {\n    for (a = [0:30:359]) {\n        rotate([0, 0, a])\n            translate([0, 0, -30])\n                rotate([90, 0, 0])\n                    linear_extrude(height = 60, twist = 300, scale = [0.1, 0.1])\n                        circle(d = 1.5);\n    }\n}\n\n// Mounting base\nmodule base() {\n    difference() {\n        cylinder(h = 8, d = 70);\n        cylinder(h = 9, d = 66);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 4])\n    base();\n\ntranslate([0, 0, 8])\n    plasma_body();\n\ntranslate([0, 0, 40])\n    stem();\n\ntranslate([0, 0, 4])\n    ring();\n\n// Internal glow\ncolor([0.2, 0.6, 1, 0.5])\n    translate([0, 0, 4])\n        scale([0.8, 0.56, 0.8])\n            sphere(d = 60);\n\ntranslate([0, 0, 4])\n    filaments();",
    "renders": true
  },
  {
    "household_item": "touchscreen",
    "openscad_code": "// Realistic touchscreen model – medium complexity\n// Overall footprint ≈ 80 mm × 45 mm × 6 mm, printable without supports\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule rounded_box(size, r) {\n    // Create a box with rounded edges on the top surface\n    translate([0, 0, size.z/2])\n    minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z], center=true);\n        cylinder(h=size.z, r=r, $fn=32);\n    }\n}\n\nmodule screen_glass() {\n    // Top glass layer with rounded edges\n    color(\"black\")\n    translate([0, 0, 0.5])\n    rounded_box([80, 45, 1.0], 3);\n}\n\nmodule lcd_panel() {\n    // Active display area slightly recessed\n    color([0.05, 0.05, 0.05])\n    translate([0, 0, 0.2])\n    cube([72, 37, 0.3], center=true);\n}\n\nmodule touch_film() {\n    // Transparent touch-sensitive film\n    color([1, 1, 1], 0.4)\n    translate([0, 0, 0.75])\n    cube([74, 39, 0.1], center=true);\n}\n\nmodule bezel() {\n    // Outer frame that holds the glass\n    difference() {\n        rounded_box([80, 45, 2], 3);\n        translate([0, 0, 1])\n        rounded_box([80-wall*2, 45-wall*2, 3], 2.5);\n    }\n}\n\nmodule mid_frame() {\n    // Middle plastic chassis\n    translate([0, 0, -2])\n    difference() {\n        cube([78, 43, 3], center=true);\n        translate([0, 0, 1.5])\n        cube([74, 39, 3.1], center=true);\n    }\n}\n\nmodule back_cover() {\n    // Rear shell with micro-grid vent pattern\n    translate([0, 0, -4.5])\n    difference() {\n        rounded_box([80, 45, 1.5], 3);\n        \n        // Ventilation slots\n        for (y = [-20:4:20])\n            translate([0, y, 0])\n            cube([60, 2, 1.7], center=true);\n    }\n}\n\nmodule home_button() {\n    // Capacitive home button below screen\n    translate([0, -22.5, 0.5])\n    cylinder(h=1.2, r=3.5, $fn=32);\n    translate([0, -22.5, 0])\n    cylinder(h=0.5, r=4, $fn=32);\n}\n\nmodule camera_hole() {\n    // Front-facing camera cutout\n    translate([30, 20, 0.8])\n    rotate([90, 0, 0])\n    cylinder(h=1.5, r=1.5, $fn=16);\n}\n\n// Assembly\nunion() {\n    screen_glass();\n    lcd_panel();\n    touch_film();\n    bezel();\n    mid_frame();\n    back_cover();\n    home_button();\n    camera_hole();\n}",
    "renders": true
  },
  {
    "household_item": "keypad",
    "openscad_code": "// Realistic 4×4 membrane keypad with raised buttons and clear legends\n// Overall footprint 75×75×10 mm – printable on most FDM machines\n\n$fn = 32;  // Smooth curves\n\n/* ---------- Parameters ---------- */\nkey_pitch  = 18;        // center-to-center spacing\nkey_top    = 14;        // visible key diameter\nkey_h      = 2.5;       // key travel height\nwall_t     = 2.0;       // shell thickness\nbase_h     = 4.0;       // bottom enclosure height\npcb_clr    = 0.5;       // PCB recess depth\nfillet_r   = 1.0;       // edge radius on enclosure\n\n/* ---------- Main assembly ---------- */\ndifference() {\n    union() {\n        enclosure();\n        for (j=[0:3])\n            for (i=[0:3])\n                translate([i*key_pitch, j*key_pitch, 0])\n                    keycap([i,j]);\n    }\n    // Remove PCB cavity\n    translate([wall_t, wall_t, base_h-pcb_clr])\n        cube([75-2*wall_t, 75-2*wall_t, pcb_clr+0.1]);\n}\n\n/* ---------- Enclosure shell ---------- */\nmodule enclosure() {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([75, 75, base_h]);\n            sphere(fillet_r);\n        }\n        // Inner hollow\n        translate([wall_t+fillet_r, wall_t+fillet_r, wall_t+fillet_r])\n            cube([75-2*(wall_t+fillet_r), 75-2*(wall_t+fillet_r), base_h]);\n    }\n}\n\n/* ---------- Individual keycap ---------- */\nmodule keycap(pos) {\n    // Stem\n    translate([0,0,base_h])\n        cylinder(h=key_h, d=key_top*0.8);\n\n    // Top dome\n    translate([0,0,base_h+key_h])\n        scale([1,1,0.4])\n            sphere(d=key_top);\n\n    // Legend (embossed)\n    translate([0,0,base_h+key_h+0.2])\n        linear_extrude(height=0.3)\n            text(key_legend(pos[0],pos[1]), size=4, halign=\"center\", valign=\"center\");\n}\n\n/* ---------- Key labels ---------- */\nfunction key_legend(x,y) =\n    let(l = [\"1\",\"2\",\"3\",\"A\",\n             \"4\",\"5\",\"6\",\"B\",\n             \"7\",\"8\",\"9\",\"C\",\n             \"*\",\"0\",\"#\",\"D\"])\n    l[y*4+x];",
    "renders": true
  },
  {
    "household_item": "touchbar",
    "openscad_code": "// Realistic Touchbar – 3D-printable, medium complexity (~80 lines)\n\n$fn = 48;                // Smooth curves\nbody_l = 80;            // Overall length\nbody_w = 12;\nbody_h = 4;\nwall_t = 1.2;           // Minimum printable wall\nkey_h = 0.4;\nkey_pitch = 5;\n\n// Main enclosure\nmodule touchbar_body() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            translate([-body_l/2, -body_w/2, 0])\n                cylinder(h=body_h, r=2);\n            translate([ body_l/2, -body_w/2, 0])\n                cylinder(h=body_h, r=2);\n            translate([ body_l/2,  body_w/2, 0])\n                cylinder(h=body_h, r=2);\n            translate([-body_l/2,  body_w/2, 0])\n                cylinder(h=body_h, r=2);\n        }\n        // Hollow cavity (no overhangs)\n        translate([0,0,-0.01])\n            scale([0.9,0.9,1])\n                hull() {\n                    translate([-body_l/2, -body_w/2, 0])\n                        cylinder(h=body_h+0.02, r=2-wall_t);\n                    translate([ body_l/2, -body_w/2, 0])\n                        cylinder(h=body_h+0.02, r=2-wall_t);\n                    translate([ body_l/2,  body_w/2, 0])\n                        cylinder(h=body_h+0.02, r=2-wall_t);\n                    translate([-body_l/2,  body_w/2, 0])\n                        cylinder(h=body_h+0.02, r=2-wall_t);\n                }\n    }\n}\n\n// Individual capacitive key bump\nmodule key() {\n    difference() {\n        translate([0,0,key_h/2])\n            cube([key_pitch-0.8, body_w-2.4, key_h], center=true);\n        // Recessed top for finger feel\n        translate([0,0,key_h-0.1])\n            cube([key_pitch-1.2, body_w-2.8, key_h], center=true);\n    }\n}\n\n// Mounting clips on underside\nmodule clip() {\n    translate([body_l/2-6,0,-1])\n        rotate([90,0,0])\n            cylinder(h=2.5, r1=1.5, r2=0.8);\n}\n\n// Combine everything\nunion() {\n    touchbar_body();\n\n    // Row of 15 keys across the length\n    for (i=[-7:7])\n        translate([i*key_pitch, 0, body_h])\n            key();\n\n    // Two clips for snapping into a laptop slot\n    clip();\n    mirror([1,0,0]) clip();\n}",
    "renders": true
  },
  {
    "household_item": "trackpoint",
    "openscad_code": "// Realistic trackpoint (ThinkPad-style pointing stick)\n// Medium complexity, 3D-printable design\n\n// Overall dimensions\nbase_d = 40;\nbase_h = 8;\nstem_d = 18;\nstem_h = 15;\ncap_d = 22;\ncap_h = 12;\nnub_d = 15;\nnub_h = 5;\nwall_thickness = 2;\n\n// Main base\nmodule base() {\n    difference() {\n        // Main cylindrical base\n        cylinder(h=base_h, d=base_d, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=base_h+2, d=base_d-wall_thickness*2, $fn=64);\n        \n        // Wire channels (4 directions)\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([base_d/2-wall_thickness, -wall_thickness/2, 0])\n                    cube([wall_thickness*2, wall_thickness, base_h]);\n        }\n    }\n}\n\n// Stem with realistic taper\nmodule stem() {\n    translate([0, 0, base_h])\n        difference() {\n            // Main tapered cylinder\n            cylinder(h1=stem_d, h2=stem_d*0.8, h=stem_h, $fn=32);\n            \n            // Internal cavity for electronics\n            translate([0, 0, -1])\n                cylinder(h1=stem_d-wall_thickness*2, h2=(stem_d-wall_thickness*2)*0.8, h=stem_h+2, $fn=32);\n        }\n}\n\n// Realistic textured cap\nmodule cap() {\n    translate([0, 0, base_h+stem_h])\n        difference() {\n            // Main cap dome\n            sphere(d=cap_d, $fn=48);\n            \n            // Trim bottom for flat base\n            translate([0, 0, -cap_h/2])\n                cube([cap_d*2, cap_d*2, cap_h], center=true);\n            \n            // Internal cavity\n            sphere(d=cap_d-wall_thickness*2, $fn=48);\n            translate([0, 0, -cap_h/2])\n                cube([(cap_d-wall_thickness*2)*2, (cap_d-wall_thickness*2)*2, cap_h], center=true);\n        }\n}\n\n// Rubber nub with grip pattern\nmodule nub() {\n    translate([0, 0, base_h+stem_h+cap_h/2]) {\n        // Main nub body\n        difference() {\n            cylinder(h=nub_h, d=nub_d, $fn=32);\n            cylinder(h=nub_h+1, d=nub_d-wall_thickness*2, $fn=32);\n        }\n        \n        // Grip rings\n        for (i = [1:3]) {\n            translate([0, 0, i*nub_h/4])\n                difference() {\n                    cylinder(h=0.8, d=nub_d+0.5, $fn=32);\n                    cylinder(h=0.9, d=nub_d-1, $fn=32);\n                }\n        }\n    }\n}\n\n// Mounting posts\nmodule posts() {\n    post_d = 4;\n    post_h = 3;\n    post_dist = base_d/2 - post_d - 2;\n    \n    for (a = [45:90:315]) {\n        rotate([0, 0, a])\n            translate([post_dist, 0, 0])\n                cylinder(h=post_h, d=post_d, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    stem();\n    cap();\n    nub();\n    translate([0, 0, -base_h])\n        posts();\n}",
    "renders": true
  },
  {
    "household_item": "dial",
    "openscad_code": "// Realistic-style 3D-printable dial (medium complexity)\n// Approx. 80 mm diameter, 15 mm thick\n// No support needed, all overhangs ≤45°\n\n// Overall parameters\ndial_d = 80;           // outer diameter\nbase_h = 3;            // base thickness\nbezel_h = 4;           // bezel height\nface_d = 72;           // visible face diameter\ncenter_hole = 3.2;     // shaft hole for standard 6 mm D-shaft\nwall_t = 1.6;          // wall thickness (0.4 mm multiples)\n\nmodule dial_base() {\n    // Main cylindrical body with chamfered edge\n    difference() {\n        union() {\n            cylinder(h=base_h, d=dial_d, $fn=100);\n            translate([0,0,base_h])\n                cylinder(h=bezel_h, d1=dial_d, d2=face_d+2*wall_t, $fn=100);\n        }\n        // Central hole for shaft\n        translate([0,0,-1])\n            cylinder(h=base_h+bezel_h+2, d=center_hole, $fn=32);\n    }\n}\n\nmodule tick_marks() {\n    // 60 tick marks around the edge (realistic minute marks)\n    for(i=[0:59]) {\n        rotate([0,0,i*6])\n            translate([face_d/2-2, -0.4, base_h+bezel_h-0.5])\n                cube([4, 0.8, 1], center=true);\n    }\n    // 12 numbered positions (hour marks) slightly longer\n    for(i=[0:11]) {\n        rotate([0,0,i*30])\n            translate([face_d/2-3, -0.6, base_h+bezel_h-0.5])\n                cube([6, 1.2, 1], center=true);\n    }\n}\n\nmodule numbers() {\n    // Raised numbers 1-12\n    // Simple block representation for 3D printing clarity\n    for(i=[1:12]) {\n        angle = i*30;\n        dist = face_d/2 - 8;\n        translate([cos(angle)*dist, sin(angle)*dist, base_h+bezel_h-0.5])\n            rotate([0,0,angle-90])\n                linear_extrude(height=0.8)\n                    text(str(i), size=4, halign=\"center\", valign=\"center\");\n    }\n}\n\nmodule center_boss() {\n    // Central raised boss around shaft\n    difference() {\n        cylinder(h=2, d=8, $fn=32);\n        translate([0,0,-1])\n            cylinder(h=4, d=center_hole, $fn=32);\n    }\n}\n\nmodule knurled_grip() {\n    // Knurled texture ring on the outer edge for grip\n    difference() {\n        cylinder(h=base_h, d=dial_d+2*wall_t, $fn=100);\n        cylinder(h=base_h, d=dial_d, $fn=100);\n    }\n    for(i=[0:35]) {\n        rotate([0,0,i*10])\n            translate([dial_d/2+wall_t/2, 0, 0])\n                rotate([90,0,0])\n                    cylinder(h=base_h*0.9, d=wall_t, $fn=16);\n    }\n}\n\n// Assemble the dial\nunion() {\n    dial_base();\n    translate([0,0,base_h+bezel_h-0.5])\n        tick_marks();\n    numbers();\n    center_boss();\n    translate([0,0,-base_h/2])\n        knurled_grip();\n}",
    "renders": true
  },
  {
    "household_item": "slider",
    "openscad_code": "// Slider in realistic style with medium complexity\n// Overall dimensions: 60mm x 25mm x 12mm\n\n// Slider base module\nmodule slider_base() {\n    difference() {\n        // Main base block\n        translate([0, 0, 1])\n            cube([60, 25, 6], center=true);\n        \n        // Recess for sliding channel\n        translate([0, 0, 3.5])\n            cube([58, 23, 4], center=true);\n        \n        // Mounting holes\n        for(x=[-25, 25])\n            for(y=[-8, 8])\n                translate([x, y, 0])\n                    cylinder(h=10, d=3.2, center=true);\n    }\n    \n    // Chamfers on edges\n    difference() {\n        translate([0, 0, 3])\n            cube([60, 25, 6], center=true);\n        translate([0, 0, 2.8])\n            cube([62, 27, 6.4], center=true);\n    }\n}\n\n// Slider knob module\nmodule slider_knob() {\n    difference() {\n        // Main knob body\n        union() {\n            // Base cylinder\n            translate([0, 0, 6])\n                cylinder(h=4, d=16, center=true);\n            \n            // Grip ridges\n            for(i=[-1:1]) {\n                translate([0, i*3.5, 8.2])\n                    cube([10, 0.8, 1.5], center=true);\n            }\n            \n            // Top dome\n            translate([0, 0, 9.5])\n                scale([1, 1, 0.6])\n                    sphere(d=16);\n        }\n        \n        // Indicator line\n        translate([0, 0, 9.5])\n            cube([12, 0.5, 2], center=true);\n        \n        // Fastener hole\n        translate([0, 0, 6])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=2.5, center=true);\n    }\n}\n\n// Rail system\nmodule slider_rail() {\n    // Left rail\n    translate([-29.5, 0, 2])\n        cube([1.5, 23, 5]);\n    \n    // Right rail\n    translate([29.5, 0, 2])\n        cube([1.5, 23, 5]);\n    \n    // Rail tops\n    translate([-29.5, 0, 5])\n        cube([1.5, 23, 1]);\n    translate([29.5, 0, 5])\n        cube([1.5, 23, 1]);\n}\n\n// Position indicator scale\nmodule scale_marks() {\n    for(i=[-25:5:25]) {\n        translate([i, -12.5, 3.2])\n            cube([0.5, 2, 0.5]);\n    }\n    \n    // Center mark\n    translate([0, -12.5, 3.2])\n        cube([0.8, 3, 0.5]);\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    slider_base();\n    slider_rail();\n    scale_marks();\n    \n    // Movable knob assembly\n    translate([15, 0, 0])  // Position along slider\n        slider_knob();\n}",
    "renders": true
  },
  {
    "household_item": "button",
    "openscad_code": "// Realistic 3D-printable button (≈60 mm diameter, 15 mm tall)\n// Four holes, rounded top, recessed center, reinforced rim\n\n// parameters\nbutton_d = 60;          // outer diameter\nbutton_h = 15;          // total height\ntop_curve = 8;          // curvature radius of top dome\nhole_d = 5;             // hole diameter\nhole_ctr = 20;          // distance from center to hole center\nrim_thick = 3;          // rim thickness for print strength\nbase_thick = 2;         // bottom base thickness\n$fn = 48;\n\nmodule dome(h, r) {\n    // spherical cap on top of cylinder\n    difference() {\n        translate([0, 0, h])\n            sphere(r = r);\n        translate([0, 0, -r])\n            cube([r*2, r*2, r*2], center = true);\n    }\n}\n\nmodule button_body() {\n    union() {\n        // main disk with slight dome\n        union() {\n            cylinder(h = button_h - top_curve, d = button_d, center = true);\n            translate([0, 0, (button_h - top_curve)/2])\n                dome(top_curve, top_curve);\n        }\n\n        // reinforcement rim on bottom edge\n        difference() {\n            cylinder(h = base_thick, d = button_d + rim_thick*2, center = false);\n            cylinder(h = base_thick + 1, d = button_d, center = false);\n        }\n    }\n}\n\nmodule holes() {\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([hole_ctr, 0, -button_h/2 - 1])\n                cylinder(h = button_h + 2, d = hole_d, center = false);\n    }\n}\n\nmodule recess() {\n    // central shallow recess on top\n    difference() {\n        cylinder(h = 2, d = 20, center = true);\n        sphere(d = 20);\n    }\n}\n\n// build the button\ndifference() {\n    button_body();\n    holes();\n    translate([0, 0, 3])\n        recess();\n}",
    "renders": true
  },
  {
    "household_item": "toggle",
    "openscad_code": "// Realistic Toggle Switch (Medium Complexity)\n// Size: ~60mm x ~30mm x ~30mm\n\n// Constants\n$fn = 50;\nwall_th = 2;\nbase_w = 30;\nbase_l = 50;\nbase_h = 8;\ntoggle_h = 25;\ntoggle_d = 8;\nlever_l = 40;\nlever_d = 6;\nscrew_d = 4;\nscrew_h = 6;\n\n// Main assembly\nmodule toggle_switch() {\n    union() {\n        // Base housing\n        base();\n        \n        // Mounting flanges\n        translate([-base_l/2 - 5, -base_w/2 - 5, 0]) mounting_flange();\n        translate([base_l/2 + 5, -base_w/2 - 5, 0]) mirror([1,0,0]) mounting_flange();\n        translate([-base_l/2 - 5, base_w/2 + 5, 0]) mounting_flange();\n        translate([base_l/2 + 5, base_w/2 + 5, 0]) mirror([1,0,0]) mounting_flange();\n        \n        // Toggle mechanism\n        translate([0, 0, base_h]) toggle_mechanism();\n    }\n}\n\n// Base housing with rounded edges\nmodule base() {\n    difference() {\n        // Main body with chamfered top\n        minkowski() {\n            cube([base_l, base_w, base_h], center = true);\n            cylinder(h = 0.01, r = 1);\n        }\n        \n        // Internal cavity\n        translate([0, 0, -1]) \n            cube([base_l - 2*wall_th, base_w - 2*wall_th, base_h + 2], center = true);\n        \n        // Toggle opening - chamfered\n        translate([0, 0, base_h/2]) \n            cylinder(h = base_h + 2, r1 = toggle_d/2 + 1, r2 = toggle_d/2, center = true);\n        \n        // Screw holes\n        translate([-base_l/4, -base_w/2 + wall_th, -base_h/2]) \n            rotate([90,0,0]) cylinder(h = base_h, d = screw_d, center = true);\n        translate([base_l/4, -base_w/2 + wall_th, -base_h/2]) \n            rotate([90,0,0]) cylinder(h = base_h, d = screw_d, center = true);\n        translate([-base_l/4, base_w/2 - wall_th, -base_h/2]) \n            rotate([90,0,0]) cylinder(h = base_h, d = screw_d, center = true);\n        translate([base_l/4, base_w/2 - wall_th, -base_h/2]) \n            rotate([90,0,0]) cylinder(h = base_h, d = screw_d, center = true);\n    }\n}\n\n// Mounting flanges\nmodule mounting_flange() {\n    difference() {\n        // Flange body\n        translate([5, 5, 0]) \n            cube([10, 10, wall_th], center = true);\n        \n        // Mounting hole\n        translate([5, 5, 0]) \n            cylinder(h = wall_th + 1, d = 3.5, center = true);\n    }\n}\n\n// Toggle mechanism assembly\nmodule toggle_mechanism() {\n    union() {\n        // Pivot housing\n        pivot_housing();\n        \n        // Lever arm\n        translate([0, 0, toggle_h/2 + lever_l/2]) \n            rotate([90, 0, 0]) lever();\n        \n        // Contact springs (simplified)\n        for(i = [-1, 1]) {\n            translate([i * (toggle_d/2 + 2), 0, -2]) \n                spring_contact();\n        }\n    }\n}\n\n// Pivot housing for toggle\nmodule pivot_housing() {\n    difference() {\n        // Main pivot cylinder\n        cylinder(h = toggle_h, d = toggle_d + 2*wall_th, center = true);\n        \n        // Internal pivot cavity\n        cylinder(h = toggle_h + 1, d = toggle_d, center = true);\n        \n        // Notch for lever movement\n        translate([0, 0, toggle_h/2 - 1]) \n            cube([lever_d + 2, toggle_d + 2, 2], center = true);\n    }\n}\n\n// Lever arm\nmodule lever() {\n    difference() {\n        // Main lever\n        cylinder(h = lever_l, d = lever_d, center = true);\n        \n        // Finger grip knurling\n        for(i = [0:5:lever_l - 5]) {\n            translate([0, 0, i - lever_l/2 + 2.5]) \n                scale([1.1, 1.1, 0.5]) \n                    cylinder(h = 1, d = lever_d - 1, center = true);\n        }\n        \n        // Tip ball\n        translate([0, 0, lever_l/2 + 3]) \n            sphere(d = lever_d + 2);\n    }\n}\n\n// Simplified spring contact\nmodule spring_contact() {\n    union() {\n        // Base\n        cylinder(h = 2, d = 3);\n        \n        // Spring coil (simplified)\n        for(i = [0:0.5:2]) {\n            translate([0, 0, 2 + i]) \n                scale([1, 1, 0.3]) \n                    cylinder(h = 0.4, d = 3);\n        }\n        \n        // Contact tip\n        translate([0, 0, 4.5]) \n            sphere(d = 2);\n    }\n}\n\n// Render the complete toggle switch\ntoggle_switch();",
    "renders": true
  },
  {
    "household_item": "lever",
    "openscad_code": "// Realistic lever with fulcrum and grip\n// Overall length ~90 mm, printable without support\n\n$fn = 50;  // smooth curves\n\n// Main dimensions\nlever_len = 85;\nlever_dia = 10;\nfulcrum_h = 25;\nfulcrum_w = 20;\ngrip_len = 25;\ngrip_dia = 14;\n\n// Materials\nwall_th = 2;\n\nmodule lever_bar() {\n    // Central tube for stiffness\n    difference() {\n        cylinder(h = lever_len, d = lever_dia, center = true);\n        translate([0, 0, -lever_len/2 - 0.1])\n            cylinder(h = lever_len + 0.2, d = lever_dia - 2*wall_th, center = false);\n    }\n}\n\nmodule grip() {\n    // Ergonomic handle with finger grooves\n    translate([0, 0, lever_len/2 + grip_len/2]) {\n        difference() {\n            cylinder(h = grip_len, d = grip_dia);\n            // Finger grooves\n            for (a = [30:120:330])\n                rotate([0, 0, a])\n                    translate([grip_dia/2 - 2, 0, grip_len/2])\n                        rotate([90, 0, 0])\n                            cylinder(h = grip_dia, d = 5, $fn = 20);\n        }\n        // End cap\n        translate([0, 0, grip_len])\n            cylinder(h = 3, d = grip_dia + 2);\n    }\n}\n\nmodule fulcrum_base() {\n    // Stable triangular base\n    difference() {\n        // Main body\n        linear_extrude(height = fulcrum_h)\n            polygon(points = [\n                [-fulcrum_w/2, 0],\n                [fulcrum_w/2, 0],\n                [0, fulcrum_w*0.9]\n            ]);\n        \n        // Lightening holes\n        for (x = [-fulcrum_w/3, fulcrum_w/3])\n            translate([x, fulcrum_w/3, -1])\n                cylinder(h = fulcrum_h + 2, d = 5);\n    }\n}\n\nmodule fulcrum_pivot() {\n    // Cylindrical pivot with axle hole\n    difference() {\n        union() {\n            // Pivot block\n            translate([0, 0, fulcrum_h])\n                cube([lever_dia + 4, lever_dia + 4, 10], center = true);\n            \n            // Pivot cylinder\n            translate([0, 0, fulcrum_h + 5])\n                cylinder(h = 6, d = lever_dia + 6);\n        }\n        \n        // Axle hole\n        rotate([90, 0, 0])\n            cylinder(h = lever_dia + 10, d = lever_dia + 1, center = true);\n    }\n}\n\n// Assemble the lever\nunion() {\n    // Rotate bar to horizontal\n    rotate([90, 0, 0]) {\n        lever_bar();\n        grip();\n    }\n    \n    // Position fulcrum under center\n    translate([0, 0, 0]) {\n        fulcrum_base();\n        fulcrum_pivot();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pedal",
    "openscad_code": "// Realistic medium-complexity 3D-printable pedal\n// Overall dimensions: ~70 x 90 x 35 mm\n// Thicknesses kept ≥2 mm for printability\n\n$fn = 50;\n\nmodule pedal_body() {\n    // Main pedal platform (slightly curved top)\n    difference() {\n        hull() {\n            translate([0, -5, 0])  cube([70, 5, 8], center=true);\n            translate([0, 45, 2])  cube([70, 50, 12], center=true);\n        }\n        // Grip grooves on top\n        for (i = [-30:10:30]) {\n            translate([i, 25, 6])\n                cube([2, 40, 8], center=true);\n        }\n    }\n}\n\nmodule side_rail(lr=1) {  // lr = 1 for right, -1 for left\n    translate([lr*35, 20, 0])\n        rotate([0, 0, lr*10])\n        cube([4, 60, 12], center=true);\n}\n\nmodule spindle_housing() {\n    // Central tube for axle\n    rotate([90, 0, 0])\n        cylinder(h=70, d=12, center=true);\n    \n    // Reinforcement gussets\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n        translate([0, -15, 0])\n            rotate([90, 0, 0])\n            linear_extrude(height=30, center=true)\n            polygon(points=[[0,0],[5,-5],[10,0]]);\n    }\n}\n\nmodule grip_pins() {\n    // M4-size raised pins for grip\n    for (x = [-25:10:25]) {\n        for (y = [5:10:45]) {\n            translate([x, y, 7])\n                cylinder(h=2, d=4, $fn=6);\n        }\n    }\n}\n\nmodule reflector_mount() {\n    // Rear reflector slot 25 x 10 mm\n    translate([0, 42, -2])\n        cube([25, 2, 8], center=true);\n}\n\n// Assembly\nunion() {\n    pedal_body();\n    side_rail(1);\n    side_rail(-1);\n    spindle_housing();\n    grip_pins();\n    reflector_mount();\n    \n    // Chamfers / fillets for printability\n    translate([0, 0, -6])\n        cylinder(h=12, d=68, center=true);\n}",
    "renders": true
  },
  {
    "household_item": "footmouse",
    "openscad_code": "// Footmouse - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\nmouse_length = 80;\nmouse_width = 50;\nmouse_height = 25;\nwall_thickness = 2;\n\nmodule footmouse_body() {\n    difference() {\n        // Main rounded body\n        hull() {\n            translate([-mouse_length/2, -mouse_width/2, 0])\n                cube([mouse_length, mouse_width, mouse_height/2], center=false);\n            translate([-mouse_length/2+5, -mouse_width/2+5, mouse_height/2])\n                sphere(d=mouse_width-10);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.8])\n                cube([mouse_length-5, mouse_width-5, mouse_height+2], center=true);\n        \n        // Cable hole\n        translate([-mouse_length/2-2, 0, mouse_height/4])\n            rotate([0, 90, 0])\n                cylinder(h=10, d=6);\n    }\n}\n\nmodule buttons() {\n    // Left button\n    translate([mouse_length/4, -mouse_width/4, mouse_height])\n        difference() {\n            cube([mouse_length/3, mouse_width/2.5, 3], center=true);\n            translate([0, 0, 1.5])\n                cube([mouse_length/3-2, mouse_width/2.5-2, 4], center=true);\n        }\n    \n    // Right button\n    translate([mouse_length/4, mouse_width/4, mouse_height])\n        difference() {\n            cube([mouse_length/3, mouse_width/2.5, 3], center=true);\n            translate([0, 0, 1.5])\n                cube([mouse_length/3-2, mouse_width/2.5-2, 4], center=true);\n        }\n}\n\nmodule scroll_wheel() {\n    translate([mouse_length/3+5, 0, mouse_height+3])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, d=8);\n                cylinder(h=9, d=3);\n            }\n}\n\nmodule foot_pads() {\n    // Heel pad\n    translate([-mouse_length/3, 0, 0])\n        scale([1.2, 1, 0.3])\n            sphere(d=mouse_width/2);\n    \n    // Toe pads (4 toes)\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([mouse_length/3, i*mouse_width/6, 0])\n            scale([0.8, 0.6, 0.2])\n                sphere(d=mouse_width/3);\n    }\n}\n\nmodule arch_support() {\n    // Raised arch area\n    translate([-mouse_length/6, 0, mouse_height/3])\n        scale([1.5, 0.8, 0.5])\n            sphere(d=mouse_width/2);\n}\n\nmodule grip_texture() {\n    // Small raised dots for grip\n    for(x = [-mouse_length/2+5:5:mouse_length/2-5]) {\n        for(y = [-mouse_width/2+5:5:mouse_width/2-5]) {\n            if(!(abs(x) < mouse_length/4 && abs(y) < mouse_width/4)) {\n                translate([x, y, mouse_height+1.5])\n                    sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    footmouse_body();\n    buttons();\n    scroll_wheel();\n    foot_pads();\n    arch_support();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "household_item": "handglove",
    "openscad_code": "// Realistic medium-complexity 3D-printable handglove\n// Overall length ~85 mm, wall thickness 2 mm\n\n// Parameters\nwall = 2;\nscale = 1;\n\n// Main glove body\nmodule glove_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 10]) sphere([20, 22, 40], $fn=40);\n            translate([0, 0, -20]) sphere([28, 30, 25], $fn=40);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -2]) scale([0.9, 0.9, 0.9]) {\n            hull() {\n                translate([0, 0, 10]) sphere([20, 22, 40], $fn=40);\n                translate([0, 0, -20]) sphere([28, 30, 25], $fn=40);\n            }\n        }\n    }\n}\n\n// Thumb section\nmodule thumb() {\n    difference() {\n        union() {\n            // Thumb base\n            translate([-28, 15, -5]) rotate([0, 20, -50]) \n                scale([1, 0.8, 1]) sphere([12, 10, 18], $fn=30);\n            \n            // Thumb tube\n            translate([-35, 22, -15]) rotate([0, 20, -50]) \n                cylinder(h=25, r1=8, r2=6, $fn=20);\n        }\n        \n        // Inner cavity\n        translate([-28, 15, -5]) rotate([0, 20, -50]) \n            scale([0.8, 0.7, 0.8]) sphere([12, 10, 18], $fn=30);\n        translate([-35, 22, -15]) rotate([0, 20, -50]) \n            cylinder(h=25, r1=6, r2=4, $fn=20);\n    }\n}\n\n// Finger module\nmodule finger(length, angle, offset) {\n    difference() {\n        union() {\n            // Finger base\n            translate(offset) rotate([0, angle, 0]) {\n                cylinder(h=length, r1=7, r2=5, $fn=20);\n                translate([0, 0, length]) sphere(5, $fn=20);\n            }\n        }\n        \n        // Inner cavity\n        translate(offset) rotate([0, angle, 0]) {\n            translate([0, 0, wall]) cylinder(h=length-2*wall, r1=5, r2=3, $fn=20);\n            translate([0, 0, length-wall]) sphere(3, $fn=20);\n        }\n    }\n}\n\n// Fingers\nmodule fingers() {\n    // Index\n    finger(30, 10, [10, 25, 5]);\n    \n    // Middle\n    finger(35, 5, [0, 28, 8]);\n    \n    // Ring\n    finger(32, 0, [-10, 25, 5]);\n    \n    // Pinky\n    finger(25, -5, [-20, 22, 2]);\n}\n\n// Wrist cuff\nmodule wrist_cuff() {\n    difference() {\n        // Outer cuff\n        cylinder(h=15, r1=30, r2=28, $fn=40);\n        \n        // Inner opening\n        translate([0, 0, -1]) cylinder(h=17, r1=26, r2=24, $fn=40);\n    }\n}\n\n// Assembly\nunion() {\n    glove_body();\n    thumb();\n    fingers();\n    \n    // Attach wrist cuff\n    translate([0, 0, -35]) wrist_cuff();\n}",
    "renders": true
  },
  {
    "household_item": "dataglove",
    "openscad_code": "// Dataglove - Realistic Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\n\n// Main parameters\nhand_length = 75;\npalm_width = 35;\nfinger_spacing = 8;\nfinger_base_d = 6;\nfinger_tip_d = 4;\nknuckle_spacing = 15;\n\n// Module for finger segments\nmodule finger_segment(length, base_d, tip_d, knuckle) {\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = 2, d = base_d + 2);\n        translate([0, 0, length])\n            cylinder(h = 2, d = tip_d + 2);\n    }\n    \n    // Knuckle joint\n    if (knuckle) {\n        translate([0, 0, -1])\n            cylinder(h = 4, d = base_d + 4);\n    }\n}\n\n// Module for individual finger\nmodule finger(length, segments, offset_x, offset_y) {\n    translate([offset_x, offset_y, 0]) {\n        rotate([0, 90, 0]) {\n            // Base segment\n            finger_segment(length/3, finger_base_d, finger_base_d * 0.9, true);\n            translate([0, 0, length/3 + 1])\n                finger_segment(length/3, finger_base_d * 0.9, finger_base_d * 0.8, false);\n            translate([0, 0, 2*length/3 + 2])\n                finger_segment(length/3, finger_base_d * 0.8, finger_tip_d, false);\n        }\n    }\n}\n\n// Palm base\nmodule palm() {\n    difference() {\n        // Main palm\n        hull() {\n            translate([-palm_width/2, 0, 0])\n                cube([palm_width, hand_length * 0.6, 10]);\n            translate([-palm_width/2 * 0.8, hand_length * 0.7, 0])\n                cube([palm_width * 0.8, hand_length * 0.3, 8]);\n        }\n        \n        // Wrist hole\n        translate([0, -5, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 40, d = 25);\n        \n        // Ventilation holes\n        for (i = [-1:1]) {\n            translate([i * 10, 20, 5])\n                cylinder(h = 10, d = 4);\n        }\n    }\n}\n\n// Finger mounts with sensors\nmodule finger_mount(x, y) {\n    translate([x, y, 10]) {\n        // Sensor housing\n        difference() {\n            cube([6, 6, 4], center = true);\n            translate([0, 0, -1])\n                cube([4, 4, 6], center = true);\n        }\n        \n        // Wire channel\n        translate([0, 3, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Palm\n    palm();\n    \n    // Thumb\n    translate([-palm_width/2 - 5, 10, 5]) {\n        rotate([0, 0, 45]) {\n            finger(20, 2, 0, 0);\n            finger_mount(-3, 5);\n        }\n    }\n    \n    // Fingers\n    fingers = [\n        [0, 25, 25],      // Index\n        [1, 15, 28],      // Middle\n        [2, 5, 25],       // Ring\n        [3, -5, 22]       // Pinky\n    ];\n    \n    for (i = [0:3]) {\n        finger(fingers[i][2], 3, fingers[i][1], 40);\n        finger_mount(fingers[i][1], 35);\n    }\n    \n    // Back of hand electronics housing\n    translate([0, 30, 8]) {\n        difference() {\n            cube([palm_width * 0.8, 20, 6], center = true);\n            // Battery compartment\n            translate([0, 5, -3])\n                cube([palm_width * 0.6, 8, 4], center = true);\n        }\n        \n        // USB port\n        translate([palm_width/2 * 0.7, 10, -2])\n            rotate([0, 90, 0])\n                cylinder(h = 5, d = 4);\n    }\n    \n    // Strap loops\n    translate([palm_width/2 + 3, 5, 5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 3, d = 8);\n                cylinder(h = 4, d = 4);\n            }\n    \n    mirror([1, 0, 0])\n        translate([palm_width/2 + 3, 5, 5])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 3, d = 8);\n                    cylinder(h = 4, d = 4);\n                }\n}",
    "renders": true
  },
  {
    "household_item": "vrheadset",
    "openscad_code": "$fs = 2;\n$fa = 2;\n\n// Overall scale\nscale = 0.75;\n\nmodule vr_headset() {\n    // Front shell\n    difference() {\n        union() {\n            // Main front body\n            translate([0, 0, 0])\n            scale([1, 0.8, 0.4])\n            sphere(d=60 * scale);\n            \n            // Top ridge\n            translate([0, 0, 12 * scale])\n            scale([1.1, 0.9, 0.15])\n            sphere(d=60 * scale);\n        }\n        \n        // Eye cutouts\n        for (x = [-15 * scale, 15 * scale]) {\n            translate([x, 0, -5 * scale])\n            scale([0.4, 0.6, 0.8])\n            sphere(d=40 * scale);\n        }\n        \n        // Center nose gap\n        translate([0, -10 * scale, -5 * scale])\n        rotate([0, 20, 0])\n        cube([12 * scale, 20 * scale, 20 * scale], center=true);\n    }\n    \n    // Face padding ring\n    difference() {\n        translate([0, 0, -12 * scale])\n        scale([1, 0.9, 0.1])\n        sphere(d=65 * scale);\n        \n        translate([0, 0, -13 * scale])\n        scale([0.85, 0.75, 0.2])\n        sphere(d=55 * scale);\n    }\n    \n    // Head strap mounts\n    for (x = [-25 * scale, 25 * scale]) {\n        translate([x, 18 * scale, 5 * scale])\n        rotate([90, 0, 0])\n        cylinder(h=8 * scale, d1=8 * scale, d2=6 * scale, center=true);\n    }\n    \n    // Top strap mount\n    translate([0, -25 * scale, 10 * scale])\n    rotate([0, 90, 0])\n    cylinder(h=8 * scale, d1=8 * scale, d2=6 * scale, center=true);\n    \n    // Cameras/sensors\n    for (x = [-20 * scale, 0, 20 * scale]) {\n        translate([x, 0, 12 * scale])\n        cylinder(h=3 * scale, d=6 * scale);\n    }\n    \n    // IPD adjustment dial\n    translate([30 * scale, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=4 * scale, d=10 * scale, $fn=20);\n        cylinder(h=5 * scale, d=8 * scale, $fn=20);\n    }\n    \n    // Ventilation slots\n    for (i = [-2:2]) {\n        translate([i * 8 * scale, 20 * scale, 0])\n        cube([3 * scale, 1 * scale, 15 * scale]);\n    }\n    \n    // Cable strain relief\n    translate([0, 25 * scale, 0])\n    rotate([0, 90, 0])\n    cylinder(h=15 * scale, d1=8 * scale, d2=6 * scale);\n    \n    // Lens frames\n    for (x = [-15 * scale, 15 * scale]) {\n        translate([x, 0, -10 * scale])\n        difference() {\n            cylinder(h=5 * scale, d=25 * scale);\n            translate([0, 0, -1 * scale])\n            cylinder(h=7 * scale, d=20 * scale);\n        }\n    }\n}\n\nvr_headset();",
    "renders": true
  },
  {
    "household_item": "arheadset",
    "openscad_code": "// AR Headset - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\nwall = 2; // Wall thickness for 3D printing\nwidth = 100;\nheight = 45;\ndepth = 60;\n\nmodule lens() {\n    difference() {\n        // Outer lens ring\n        cylinder(h=8, d1=28, d2=30);\n        // Inner lens cavity\n        translate([0, 0, -0.1])\n            cylinder(h=8.2, d1=24, d2=26);\n    }\n}\n\nmodule lens_housing() {\n    // Main lens frame\n    difference() {\n        union() {\n            // Front frame\n            translate([-width/2, -depth/2, 0])\n                cube([width, depth, 8]);\n            // Side arms\n            translate([-width/2-15, -5, 4])\n                cube([15, 10, 4]);\n            translate([width/2, -5, 4])\n                cube([15, 10, 4]);\n        }\n        // Lens cutouts\n        translate([-25, -depth/2+5, -1])\n            cylinder(h=10, d=30);\n        translate([25, -depth/2+5, -1])\n            cylinder(h=10, d=30);\n    }\n}\n\nmodule nose_bridge() {\n    // Central nose piece\n    hull() {\n        translate([-8, -depth/2+10, 0])\n            cylinder(h=8, d=8);\n        translate([8, -depth/2+10, 0])\n            cylinder(h=8, d=8);\n    }\n    // Nose pads\n    translate([-12, -depth/2+15, -2])\n        rotate([0, 30, 0])\n            cylinder(h=5, d=6);\n    translate([12, -depth/2+15, -2])\n        rotate([0, -30, 0])\n            cylinder(h=5, d=6);\n}\n\nmodule head_strap() {\n    // Top strap\n    translate([0, depth/2-5, height-5])\n        rotate([-45, 0, 0])\n            cube([wall, 60, 8]);\n    \n    // Side straps\n    translate([-width/2-15, 0, height/2])\n        rotate([0, 0, -30])\n            cube([wall, 40, 8]);\n    translate([width/2+15, 0, height/2])\n        rotate([0, 0, 30])\n            cube([wall, 40, 8]);\n}\n\nmodule camera_sensor() {\n    // Front camera module\n    translate([0, -depth/2-2, height/2])\n        union() {\n            // Camera housing\n            cube([12, 8, 10]);\n            // Lens\n            translate([0, -1, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=3, d=6);\n        }\n}\n\nmodule ventilation() {\n    // Ventilation slots on top\n    for (i = [-2:2]) {\n        translate([i*15, 0, height])\n            cube([8, wall, 3]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core structure\n    lens_housing();\n    \n    // Lenses\n    translate([-25, -depth/2+5, 4])\n        lens();\n    translate([25, -depth/2+5, 4])\n        lens();\n    \n    // Nose bridge\n    nose_bridge();\n    \n    // Head strap\n    head_strap();\n    \n    // Camera\n    camera_sensor();\n    \n    // Ventilation\n    ventilation();\n}",
    "renders": true
  }
]