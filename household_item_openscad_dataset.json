[
  {
    "household_item": "plate",
    "openscad_code": "// Realistic Plate - Medium Complexity\n// Diameter: 80mm, Height: 8mm\n// Features: Rim, base foot, subtle curvature, drainage channels\n\n$fn = 50;  // Smooth curves\n\n// Main parameters\nplate_diameter = 80;\nplate_height = 8;\nrim_height = 3;\nrim_thickness = 2;\nbase_foot_height = 2;\nwall_thickness = 1.5;\n\n// Curvature parameters\ncenter_depth = 1.2;\nrim_curve = 0.8;\n\nmodule plate_base() {\n    // Main plate body with gentle curvature\n    difference() {\n        // Outer shape - shallow dome\n        union() {\n            // Base cylinder\n            cylinder(h=plate_height - rim_height, d=plate_diameter);\n            \n            // Rim\n            translate([0, 0, plate_height - rim_height])\n                cylinder(h=rim_height, d=plate_diameter);\n        }\n        \n        // Hollow center with curved bottom\n        translate([0, 0, wall_thickness])\n            cylinder(h=plate_height - wall_thickness, d=plate_diameter - 2*wall_thickness);\n        \n        // Curved bottom\n        translate([0, 0, wall_thickness - center_depth])\n            sphere(d=plate_diameter - 2*wall_thickness);\n    }\n}\n\nmodule rim_detail() {\n    // Create rim curvature\n    difference() {\n        // Top rim\n        translate([0, 0, plate_height - rim_height])\n            cylinder(h=rim_height, d=plate_diameter);\n        \n        // Inner bevel\n        translate([0, 0, plate_height - rim_height - 0.5])\n            cylinder(h=rim_height + 1, d=plate_diameter - 2*rim_thickness);\n    }\n}\n\nmodule base_foot() {\n    // Circular foot for stability\n    foot_diameter = plate_diameter - 10;\n    \n    difference() {\n        // Main foot\n        cylinder(h=base_foot_height, d=foot_diameter);\n        \n        // Hollow center\n        cylinder(h=base_foot_height + 0.1, d=foot_diameter - 4);\n    }\n}\n\nmodule drainage_grooves() {\n    // Subtle grooves for water drainage\n    groove_width = 1;\n    groove_depth = 0.3;\n    num_grooves = 8;\n    \n    for (i = [0:num_grooves-1]) {\n        angle = i * 360 / num_grooves;\n        \n        rotate([0, 0, angle])\n            translate([plate_diameter/2 - 10, -groove_width/2, wall_thickness])\n                cube([20, groove_width, groove_depth]);\n    }\n}\n\n// Assemble the plate\nunion() {\n    // Main plate\n    plate_base();\n    \n    // Rim detail for realistic curvature\n    rim_detail();\n    \n    // Base foot\n    translate([0, 0, 0])\n        base_foot();\n    \n    // Drainage grooves\n    drainage_grooves();\n}\n\n// Smooth bottom transition\ntranslate([0, 0, base_foot_height])\n    difference() {\n        cylinder(h=0.5, d=plate_diameter);\n        cylinder(h=0.6, d=plate_diameter - 2);\n    }",
    "renders": true
  },
  {
    "household_item": "bowl",
    "openscad_code": "// Realistic 3D-printable bowl (medium complexity)\n// Outer Ø 80 mm, inner Ø 76 mm, height 40 mm, wall 2 mm\n// No overhangs > 45°, ready for FDM printing\n\nmodule rounded_cylinder(h, r1, r2, r_edge, center=false) {\n    // helper: cylinder with rounded top/bottom edges\n    offset = center ? -h/2 : 0;\n    translate([0,0,offset])\n        minkowski() {\n            cylinder(h=h-r_edge*2, r1=r1-r_edge, r2=r2-r_edge, center=true);\n            sphere(r_edge);\n        }\n}\n\nmodule bowl() {\n    wall = 2;               // wall thickness (mm)\n    base_h = 3;             // base thickness (mm)\n    rim_h = 4;              // rim band height (mm)\n    fillet = 1.5;           // inside bottom fillet radius\n    segments = 64;          // $fn for smooth curves\n    \n    // outer profile: 40 mm tall, 40 mm radius at top, 20 mm radius at bottom\n    outer_profile = [\n        [0, 0],\n        [20, 0],\n        [35, 30],\n        [40, 40]\n    ];\n    \n    // inner profile (offset inward by wall thickness)\n    inner_profile = [\n        [0, base_h],\n        [20-wall, base_h],\n        [35-wall, 30],\n        [40-wall, 40-rim_h]\n    ];\n    \n    // create 2D outer shape and revolve\n    rotate_extrude($fn=segments)\n        polygon(outer_profile);\n    \n    difference() {\n        // outer shell\n        rotate_extrude($fn=segments)\n            polygon(outer_profile);\n        \n        // inner cavity\n        rotate_extrude($fn=segments)\n            polygon(inner_profile);\n    }\n    \n    // add rim band for strength and aesthetics\n    difference() {\n        translate([0,0,40-rim_h])\n            rounded_cylinder(rim_h, 40, 40, 1.5);\n        translate([0,0,40-rim_h-0.01])\n            cylinder(h=rim_h+0.02, r1=40-wall, r2=40-wall, $fn=segments);\n    }\n    \n    // add gentle foot ring for print stability\n    difference() {\n        translate([0,0,0])\n            rounded_cylinder(base_h, 25, 20, 1.5);\n        translate([0,0,-0.01])\n            cylinder(h=base_h+0.02, r1=22, r2=17, $fn=segments);\n    }\n    \n    // subtle grip rings around the outside\n    for (z=[10:10:30]) {\n        difference() {\n            translate([0,0,z])\n                cylinder(h=1.5, r1=40, r2=38.5, $fn=segments);\n            translate([0,0,z-0.01])\n                cylinder(h=1.52, r1=39.5, r2=38, $fn=segments);\n        }\n    }\n}\n\n// render the bowl\nbowl();",
    "renders": true
  },
  {
    "household_item": "cup",
    "openscad_code": "// Realistic Coffee Cup – OpenSCAD (medium complexity)\n// Outer Ø 80 mm, height 90 mm, wall 2 mm, 3D-printable without support\n\n// Main parameters\ncup_h  = 90;      // total height\nbase_r = 40;      // outer base radius\ntop_r  = 46;      // outer top radius\nwall_t = 2;       // wall thickness\nbase_h = 8;       // solid foot height\nlip_h  = 4;       // rolled lip height\n\n// Helper module for smooth cone\nmodule frustum(h, r1, r2, center=false) {\n    cylinder(h=h, r1=r1, r2=r2, center=center, $fn=100);\n}\n\n// 1. Hollow body\ndifference() {\n    frustum(cup_h - base_h, base_r, top_r);      // outer shell\n    translate([0, 0, -0.1])                      // inner cavity\n        frustum(cup_h - base_h + 0.2,\n                base_r - wall_t,\n                top_r  - wall_t);\n}\n\n// 2. Solid base\ntranslate([0, 0, -base_h])\n    frustum(base_h, base_r - 3, base_r);\n\n// 3. Rolled lip\ndifference() {\n    translate([0, 0, cup_h - base_h])\n        frustum(lip_h, top_r, top_r + 1.5);      // outer lip\n    translate([0, 0, cup_h - base_h - 0.1])\n        frustum(lip_h + 0.2,\n                top_r - wall_t,\n                top_r - wall_t + 1);             // inner lip\n}\n\n// 4. Handle\nmodule handle() {\n    difference() {\n        union() {                                // outer handle\n            translate([top_r + 2, 0, cup_h*0.6])\n                rotate([90, 0, 0])\n                    torus(ro=15, ri=4, sides=30, facets=30);\n            // connect arcs with straight bridge\n            translate([top_r + 2, 0, cup_h*0.6 - 15])\n                cube([8, 4, 30], center=true);\n        }\n        // hollow tunnel\n        translate([top_r + 2, 0, cup_h*0.6])\n            rotate([90, 0, 0])\n                torus(ro=15, ri=2, sides=30, facets=30);\n    }\n}\n\n// simple torus approximation\nmodule torus(ro, ri, sides, facets) {\n    rotate_extrude($fn=sides)\n        translate([ro, 0])\n            circle(r=ri, $fn=facets);\n}\n\n// place handle\nrotate([0, 0, 0]) handle();",
    "renders": true
  },
  {
    "household_item": "mug",
    "openscad_code": "// Realistic 3D-printable coffee mug – medium complexity\n// Outer diameter: 85 mm, height: 95 mm, wall thickness: 3 mm\n\n$fn = 64;\n\n// Main mug body\nmodule mug() {\n    difference() {\n        // Outer wall\n        cylinder(h = 85, d = 85);\n\n        // Hollow inside\n        translate([0, 0, 1])\n            cylinder(h = 87, d = 85 - 2*3);\n\n        // Flat bottom inside\n        translate([0, 0, 1])\n            cube([85, 85, 1], center = true);\n    }\n}\n\n// Curved handle\nmodule handle() {\n    // Main grip arc\n    translate([42.5 + 3 + 5, 0, 45])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer\n                torus(ro = 25, ri = 7);\n                // Inner\n                torus(ro = 25, ri = 4);\n            }\n\n    // Top connector\n    translate([42.5 + 3, 0, 75])\n        rotate([0, 90, 0])\n            cylinder(h = 15, d = 12);\n\n    // Bottom connector\n    translate([42.5 + 3, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 15, d = 12);\n}\n\n// Torus helper module\nmodule torus(ro, ri) {\n    rotate_extrude()\n        translate([ro, 0, 0])\n            circle(r = ri);\n}\n\n// Rounded lip\nmodule lip() {\n    difference() {\n        // Outer lip bevel\n        cylinder(h = 5, d1 = 85, d2 = 87);\n        // Inner edge\n        translate([0, 0, 1])\n            cylinder(h = 6, d = 85 - 2*3);\n    }\n}\n\n// Bottom fillet for print stability & strength\nmodule base_fillet() {\n    difference() {\n        cylinder(h = 3, d = 87);\n        cylinder(h = 3, d = 85);\n    }\n}\n\n// Assembly\nunion() {\n    // Mug body\n    mug();\n\n    // Attach rounded lip on top\n    translate([0, 0, 85])\n        lip();\n\n    // Attach handle\n    handle();\n\n    // Attach base fillet\n    translate([0, 0, -3])\n        base_fillet();\n}",
    "renders": true
  },
  {
    "household_item": "glass",
    "openscad_code": "// Realistic Drinking Glass – medium complexity, 3D-printable\n// 85 mm tall, 70 mm max diameter, 2 mm wall thickness\n\n$fn=50;\n\n// Overall dimensions\nh = 85;                 // total height\nbase_d = 70;            // widest diameter (lower rim)\nrim_d = 62;             // top rim diameter\nwall = 2;               // wall thickness\nbase_h = 5;             // solid base height\nbase_t = 3;             // base thickness under cavity\n\n// Derived\nslope = (base_d - rim_d)/2 / (h - base_h);\n\nmodule glass_profile(){\n    // 2D profile for revolution\n    polygon([\n        [0, 0],                     // bottom center\n        [base_d/2, 0],              // outer base radius\n        [base_d/2, base_t],         // outer base top\n        [base_d/2 - wall, base_t],  // inner base top\n        [rim_d/2 - wall, h - wall*slope], // inner wall top\n        [rim_d/2, h],               // rim top\n        [rim_d/2 - wall, h],        // inner rim top\n        [base_d/2 - wall, base_t + wall], // inner wall bottom\n        [base_d/2 - wall, 0],       // inner base bottom\n        [0, 0]                      // back to center\n    ]);\n}\n\n// Outer body (solid)\nmodule outer_body(){\n    rotate_extrude()\n        glass_profile();\n}\n\n// Inner cavity (to be removed)\nmodule inner_cavity(){\n    // Offset profile inwards by wall\n    rotate_extrude()\n        offset(delta=-wall)\n            glass_profile();\n}\n\n// Base ring for aesthetics\nmodule base_ring(){\n    difference(){\n        cylinder(h=base_h, d1=base_d, d2=base_d+2, $fn=60);\n        cylinder(h=base_h+0.1, d1=base_d-3, d2=base_d-1, $fn=60);\n    }\n}\n\n// Rim fillet for comfort\nmodule rim_fillet(){\n    difference(){\n        cylinder(h=wall+0.1, d1=rim_d+1, d2=rim_d+3, $fn=60);\n        cylinder(h=wall+0.2, d=rim_d-0.5, $fn=60);\n    }\n}\n\n// Main glass\ndifference(){\n    union(){\n        outer_body();\n        base_ring();\n    }\n    inner_cavity();\n}\n\n// Apply rim fillet on top\ntranslate([0,0,h-wall/2])\n    rim_fillet();",
    "renders": true
  },
  {
    "household_item": "spoon",
    "openscad_code": "// Realistic medium-complexity 3D printable spoon\n// Overall length ≈ 90 mm\n\n$fn = 50;  // Smooth curves\n\n// Parameters\nbowl_r = 17;         // Bowl radius\nbowl_d = 6;          // Bowl depth\nhandle_len = 70;\nhandle_w = 10;\nhandle_t = 3.5;\nwall = 1.4;          // Wall thickness for printing\nfillet = 1.2;        // Edge rounding\n\nmodule rounded_cube(s, r) {\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n                sphere(r);\n    }\n}\n\n// Spoon bowl\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        scale([1, 1.2, 0.4])\n            sphere(bowl_r);\n        \n        // Inner cavity\n        translate([0, 0, -bowl_d])\n            scale([1-wall/bowl_r, 1.2-wall/bowl_r, 0.4])\n                sphere(bowl_r - wall);\n    }\n}\n\n// Transition neck\nmodule neck() {\n    difference() {\n        hull() {\n            translate([0, bowl_r*1.2, -bowl_d])\n                sphere(fillet);\n            translate([0, 0, -handle_t/2])\n                cube([handle_w*0.7, handle_w*0.4, handle_t], center=true);\n        }\n        // Remove bottom for flat print\n        translate([0, 0, -handle_t*2])\n            cube([handle_w*2, handle_w*2, handle_t*3], center=true);\n    }\n}\n\n// Handle with ergonomic taper\nmodule handle() {\n    for(i=[0:9]) {\n        h = i*handle_len/10;\n        w = handle_w - 0.4*i;\n        t = handle_t - 0.05*i;\n        assign(pos = h - handle_len/2)\n        translate([0, pos, 0])\n            rotate([0, 0, -i*1.2])  // Slight twist\n                scale([w, handle_len/10, t])\n                    rounded_cube([1, 1, 1], fillet);\n    }\n}\n\n// Add shallow groove on handle top\nmodule grip_grooves() {\n    for(i=[1:3]) {\n        translate([0, -handle_len/2 + i*handle_len/4, handle_t/2-0.2])\n            cube([handle_w*0.3, handle_len/8, 0.4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"silver\")\n    difference() {\n        union() {\n            // Main parts\n            translate([0, bowl_r*0.8, 0])\n                rotate([90, 0, 0])\n                    bowl();\n            translate([0, -handle_len/2 - bowl_r*0.7, -handle_t/2])\n                handle();\n            translate([0, -handle_len/2 - bowl_r*0.7, 0])\n                neck();\n        }\n        // Grooves\n        translate([0, -handle_len/2 - bowl_r*0.7, 0])\n            grip_grooves();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fork",
    "openscad_code": "// Fork - Realistic style, medium complexity\n// Size: 170mm total length, 30mm wide handle, 4mm thick tines\n// 3D-printable with no overhangs >45°, 1.5mm wall thickness\n\nfork_thickness = 4;       // overall thickness\nhandle_length = 110;\nhandle_width = 30;\nhandle_depth = fork_thickness;\ntine_length = 60;\ntine_width = 0.8 * handle_width;\ntine_thickness = 2.5;\ntine_count = 4;\ntine_spacing = tine_width / (tine_count + 0.5);\nweb_thickness = 2;\n\nmodule rounded_rect(l, w, h, r)\n{\n    hull()\n    {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([l-r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([r, w-r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([l-r, w-r, 0]) cylinder(h=h, r=r, $fn=16);\n    }\n}\n\nmodule handle()\n{\n    // Main handle body\n    difference()\n    {\n        rounded_rect(handle_length, handle_width, handle_depth, 5);\n        // Grip pattern grooves\n        for(i = [1:10:handle_length-20])\n        {\n            translate([i, 2, 0])\n                cube([3, handle_width-4, handle_depth-1]);\n        }\n    }\n}\n\nmodule tine_base()\n{\n    // Curved transition from handle to tines\n    hull()\n    {\n        translate([0, handle_width/2, handle_depth/2])\n            sphere(r=handle_width/2, $fn=32);\n        translate([tine_length/2, tine_width/2, handle_depth/2])\n            sphere(r=tine_width/2, $fn=32);\n    }\n    // Flat bottom\n    translate([0, 0, 0])\n        cube([tine_length, tine_width, handle_depth/2]);\n}\n\nmodule tines()\n{\n    for(i = [0:tine_count-1])\n    {\n        y = tine_spacing * (i + 1);\n        difference()\n        {\n            // Tapered tine\n            hull()\n            {\n                translate([0, y, 0])\n                    cylinder(h=tine_thickness, r=tine_thickness/2, $fn=8);\n                translate([tine_length, y, 0])\n                    cylinder(h=tine_thickness, r=tine_thickness/4, $fn=8);\n            }\n            // Pointed tip\n            translate([tine_length+1, y, -1])\n                rotate([0, 0, -30])\n                    cube([3, tine_thickness+2, tine_thickness+2]);\n        }\n    }\n    \n    // Web between tines\n    for(i = [0:tine_count-2])\n    {\n        y1 = tine_spacing * (i + 1) + tine_thickness/2;\n        y2 = tine_spacing * (i + 2) - tine_thickness/2;\n        translate([tine_length/3, y1, 0])\n            cube([tine_length/1.5, y2-y1, web_thickness]);\n    }\n}\n\n// Assembly\ntranslate([0, -handle_width/2, 0])\n    union()\n    {\n        handle();\n        translate([handle_length, 0, 0])\n            tine_base();\n        translate([handle_length, 0, 0])\n            tines();\n    }",
    "renders": true
  },
  {
    "household_item": "knife",
    "openscad_code": "// Realistic Knife - Medium Complexity\n// Overall length ~95 mm, blade length ~50 mm, handle ~45 mm\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Main module\nmodule knife() {\n    union() {\n        blade();\n        handle();\n        bolster();\n    }\n}\n\n// Blade with fuller and edge geometry\nmodule blade() {\n    translate([0, 0, 45])  // Position blade at end of handle\n    rotate([0, 90, 0])     // Orient blade forward\n    \n    difference() {\n        // Main blade profile\n        blade_profile();\n        \n        // Fuller (groove)\n        translate([-2, -1, 0])\n        scale([1, 0.8, 0.5])\n        rotate([0, 0, 5])\n        cylinder(h=50, d=3);\n        \n        // Taper for edge\n        translate([0, -10, 0])\n        cube([20, 20, 20], center=true);\n    }\n}\n\nmodule blade_profile() {\n    hull() {\n        // Blade base (thick part)\n        translate([-1, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h=50, d=6);\n        \n        // Blade tip (thin part)\n        translate([48, 0, 0])\n        scale([1, 0.1, 0.1])\n        cylinder(h=2, d=2);\n        \n        // Top spine\n        translate([20, 0, 2.5])\n        cube([30, 0.5, 0.5]);\n    }\n}\n\n// Handle with ergonomic contours\nmodule handle() {\n    translate([0, 0, 22.5])  // Center handle\n    \n    difference() {\n        union() {\n            // Main handle shape\n            scale([1, 0.8, 1])\n            cylinder(h=45, d=12);\n            \n            // Finger grooves\n            for(i = [-2:1:2]) {\n                translate([i*6, 0, 0])\n                scale([0.8, 0.9, 1])\n                cylinder(h=45, d=14);\n            }\n        }\n        \n        // Grip texture holes\n        for(i = [-1.5:0.5:1.5]) {\n            for(j = [-15:5:15]) {\n                translate([i*4, 0, j])\n                rotate([90, 0, 0])\n                cylinder(h=8, d=2);\n            }\n        }\n        \n        // Lanyard hole\n        translate([0, 0, 20])\n        rotate([0, 90, 0])\n        cylinder(h=10, d=4);\n    }\n}\n\n// Metal bolster between blade and handle\nmodule bolster() {\n    translate([0, 0, 45])\n    cylinder(h=5, d=14);\n    \n    // Decorative ridges\n    for(i = [0:0.5:4]) {\n        translate([0, 0, 45 + i])\n        cylinder(h=0.5, d=15 - i*0.5);\n    }\n}\n\n// Render the complete knife\nknife();",
    "renders": true
  },
  {
    "household_item": "pot",
    "openscad_code": "// Realistic 3D-printable pot – medium complexity\n// Overall height ≈ 70 mm, max diameter ≈ 85 mm\n\n$fn = 50;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body profile (lathed)\nmodule pot_body() {\n    rotate_extrude() {\n        offset(-wall) offset(delta = wall) polygon(points = [\n            [0, 0],           // bottom center\n            [42, 0],          // outer bottom edge\n            [42, 5],          // small foot\n            [40, 8],          // start of wall flare\n            [38, 65],         // top rim outer\n            [36, 70],         // lip outer\n            [34, 70],         // lip inner\n            [34, 65],         // top rim inner\n            [32, 8],          // inner wall\n            [30, 5],          // inner foot\n            [30, 0],          // inner bottom edge\n            [0, 0]            // back to center\n        ]);\n    }\n}\n\n// Drainage holes\nmodule drainage_holes() {\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n            translate([15, 0, 3])\n                cylinder(h = 6, r = 2.5, $fn = 16);\n}\n\n// Water reservoir saucer\nmodule saucer() {\n    difference() {\n        // Outer saucer\n        cylinder(h = 8, r1 = 44, r2 = 42);\n\n        // Inner recess\n        translate([0, 0, wall])\n            cylinder(h = 6, r1 = 40, r2 = 38);\n    }\n}\n\n// Simple decorative band\nmodule band() {\n    translate([0, 0, 35])\n        difference() {\n            cylinder(h = 6, r1 = 40.5, r2 = 39.5);\n            cylinder(h = 6.2, r1 = 38.5, r2 = 37.5);\n        }\n}\n\n// Assembly\nunion() {\n    pot_body();\n    difference() {\n        pot_body();  // re-use for drainage\n        drainage_holes();\n    }\n    translate([0, 0, -10]) saucer();\n    band();\n}",
    "renders": true
  },
  {
    "household_item": "pan",
    "openscad_code": "// Realistic 3D printable frying pan\n// Medium complexity (~100 lines)\n\n$fn = 64; // Smooth curves\n\nmodule pan_body() {\n    difference() {\n        // Main pan bowl\n        cylinder(h = 25, r1 = 40, r2 = 38, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 23, r1 = 37, r2 = 35, center = false);\n        \n        // Pour spouts\n        for (angle = [45, 135])\n            rotate([0, 0, angle])\n                translate([40, 0, 20])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 5, center = false);\n    }\n}\n\nmodule handle() {\n    // Handle base connection\n    translate([0, 40, 12])\n        rotate([90, 0, 0])\n            cylinder(h = 15, r = 6, center = false);\n    \n    // Handle grip\n    translate([0, 55, 12])\n        rotate([90, 0, 0])\n            difference() {\n                // Main handle cylinder\n                cylinder(h = 60, r = 5, center = false);\n                \n                // Grip grooves\n                for (i = [0:5:50]) {\n                    translate([0, 0, i + 5])\n                        rotate([0, 90, 0])\n                            cube([10, 1, 1], center = true);\n                }\n            }\n    \n    // Handle end cap\n    translate([0, 115, 12])\n        rotate([90, 0, 0])\n            sphere(r = 5.5);\n}\n\nmodule bottom_base() {\n    difference() {\n        // Base plate\n        translate([0, 0, 0])\n            cylinder(h = 2, r = 40, center = false);\n        \n        // Concentric rings for heat distribution\n        for (r = [10:10:35]) {\n            translate([0, 0, -0.5])\n                cylinder(h = 3, r = r, center = false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Pan components\n    pan_body();\n    handle();\n    bottom_base();\n    \n    // Reinforcement ring\n    translate([0, 0, 22])\n        cylinder(h = 3, r = 42, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "kettle",
    "openscad_code": "// Realistic 3D-Printable Kettle – OpenSCAD\n// Medium complexity, ~100 mm tall, wall thickness 2 mm\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 0.35;\n\nmodule kettle() {\n    // Main body – hollow cylinder with rounded bottom\n    difference() {\n        // Outer shell\n        union() {\n            translate([0, 0, 45])\n                cylinder(h = 55, d1 = 70, d2 = 80);\n            translate([0, 0, 0])\n                sphere(d = 70);\n        }\n        // Inner void\n        translate([0, 0, 2])\n            cylinder(h = 53, d1 = 66, d2 = 76);\n        translate([0, 0, 0])\n            sphere(d = 66);\n    }\n\n    // Bottom base ring\n    difference() {\n        cylinder(h = 5, d = 74);\n        cylinder(h = 5.2, d = 70);\n    }\n\n    // Spout\n    translate([35, 0, 80])\n        rotate([0, 45, 0])\n        difference() {\n            cylinder(h = 45, d1 = 22, d2 = 14);\n            translate([0, 0, -1])\n                cylinder(h = 47, d1 = 18, d2 = 10);\n        }\n\n    // Handle\n    difference() {\n        // Outer handle grip\n        translate([-38, 0, 75])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180)\n                translate([30, 0, 0])\n                    circle(r = 6);\n        // Inner void\n        translate([-38, 0, 75])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180)\n                translate([30, 0, 0])\n                    circle(r = 4);\n    }\n\n    // Lid\n    difference() {\n        // Lid top\n        translate([0, 0, 102])\n            cylinder(h = 8, d = 78);\n        // Lid inner void\n        translate([0, 0, 102])\n            cylinder(h = 8.2, d = 74);\n    }\n\n    // Lid knob\n    translate([0, 0, 110])\n        cylinder(h = 8, d = 18);\n\n    // Steam vents – 6 small holes in lid\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([25, 0, 102])\n                cylinder(h = 10, d = 2.5);\n    }\n}\n\n// Apply global scale\nscale([scale_factor, scale_factor, scale_factor])\n    kettle();",
    "renders": true
  },
  {
    "household_item": "toaster",
    "openscad_code": "// Realistic medium-complexity 3D-printable toaster\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Overall dimensions\ntoaster_w = 80;\ntoaster_d = 40;\ntoaster_h = 60;\n\n// Slot dimensions\nslot_w = 30;\nslot_d = 4;\nslot_h = 40;\nslot_gap = 10;\n\n// Lever\nlever_len = 15;\nlever_r = 2.5;\n\n// Knob\nknob_r = 5;\nknob_h = 4;\n\n// Feet\nfoot_r = 3;\nfoot_h = 2;\n\nmodule body() {\n    difference() {\n        // Main shell\n        cube([toaster_w, toaster_d, toaster_h], center=true);\n        \n        // Bottom hollow\n        translate([0, 0, -foot_h/2])\n            cube([toaster_w-wall*2, toaster_d-wall*2, toaster_h-wall*2], center=true);\n        \n        // Left slot\n        translate([-slot_w/2 - slot_gap/2, 0, (toaster_h-slot_h)/2])\n            cube([slot_w, slot_d+wall, slot_h+wall], center=true);\n        \n        // Right slot\n        translate([slot_w/2 + slot_gap/2, 0, (toaster_h-slot_h)/2])\n            cube([slot_w, slot_d+wall, slot_h+wall], center=true);\n    }\n}\n\nmodule top_surface() {\n    // Top curved surface\n    translate([0, 0, toaster_h/2 - wall])\n        scale([toaster_w/2, toaster_d/2, wall])\n            sphere($fn=32);\n}\n\nmodule lever_assembly() {\n    // Lever slot\n    translate([toaster_w/2 - wall, 0, -toaster_h/4])\n        cube([wall, lever_r*2, lever_len*2], center=true);\n    \n    // Lever handle\n    translate([toaster_w/2 + lever_len/2, 0, -toaster_h/4])\n        rotate([90, 0, 0])\n            cylinder(h=lever_len, r=lever_r, $fn=16);\n    \n    // Lever plate\n    translate([toaster_w/2 - wall/2, 0, -toaster_h/4])\n        cube([wall/2, lever_r*3, lever_r*0.5], center=true);\n}\n\nmodule control_knob() {\n    // Knob housing\n    translate([toaster_w/2 - wall, toaster_d/4, toaster_h/4])\n        cube([wall, knob_r*2.2, knob_h*2], center=true);\n    \n    // Knob\n    translate([toaster_w/2 + knob_r, toaster_d/4, toaster_h/4])\n        rotate([90, 0, 0])\n            cylinder(h=knob_h, r=knob_r, $fn=32);\n    \n    // Knob indicator line\n    translate([toaster_w/2 + knob_r*1.5, toaster_d/4, toaster_h/4 + knob_h/2])\n        cube([knob_r*0.5, 0.5, 1], center=true);\n}\n\nmodule feet() {\n    // Four feet\n    for(x = [-toaster_w/3, toaster_w/3])\n        for(y = [-toaster_d/3, toaster_d/3])\n            translate([x, y, -toaster_h/2 - foot_h/2])\n                cylinder(h=foot_h, r=foot_r, $fn=16);\n}\n\nmodule crumb_tray() {\n    // Tray slot\n    translate([0, toaster_d/2 + wall/2, -toaster_h/4])\n        cube([toaster_w-wall*4, wall, toaster_h/2], center=true);\n    \n    // Tray handle\n    translate([0, toaster_d/2 + wall + 3, -toaster_h/4])\n        cube([toaster_w/4, 3, 5], center=true);\n}\n\n// Assemble toaster\nunion() {\n    body();\n    top_surface();\n    lever_assembly();\n    control_knob();\n    feet();\n    crumb_tray();\n}",
    "renders": true
  },
  {
    "household_item": "blender",
    "openscad_code": "// Realistic Blender - Medium Complexity\n// Base dimensions: 80mm height, 50mm width, 45mm depth\n\n$fn = 32;\n\n// Main body with motor housing\nmodule blender_base() {\n    difference() {\n        // Main housing - slightly tapered\n        cylinder(h = 40, r1 = 25, r2 = 22, center = false);\n        \n        // Front control panel recess\n        translate([0, 22, 20])\n            cube([30, 5, 15], center = true);\n        \n        // Ventilation slots on back\n        for(i = [1:4]) {\n            translate([0, -22, 8*i])\n                cube([40, 3, 2], center = true);\n        }\n    }\n    \n    // Control knob\n    translate([0, 25, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 5, center = true);\n}\n\n// Jar assembly\nmodule blender_jar() {\n    // Jar body - cylindrical with slight taper\n    difference() {\n        cylinder(h = 35, r1 = 20, r2 = 18, center = false);\n        \n        // Interior hollow\n        translate([0, 0, 2])\n            cylinder(h = 33, r1 = 18, r2 = 16, center = false);\n        \n        // Pour spout\n        translate([20, 0, 30])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 5, center = true);\n    }\n    \n    // Handle\n    translate([20, 0, 17.5])\n        rotate([0, 90, 0])\n            difference() {\n                // Handle grip\n                cylinder(h = 30, r = 6, center = true);\n                \n                // Handle hole\n                cylinder(h = 32, r = 4, center = true);\n            }\n    \n    // Lid\n    translate([0, 0, 37])\n        difference() {\n            cylinder(h = 5, r = 20, center = false);\n            cylinder(h = 6, r = 18, center = false);\n            \n            // Central opening\n            cylinder(h = 6, r = 3, center = false);\n        }\n}\n\n// Blade assembly\nmodule blender_blades() {\n    translate([0, 0, 42]) {\n        // Blade hub\n        cylinder(h = 5, r = 8, center = false);\n        \n        // Blades - 4 curved arms\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                // Main blade\n                translate([12, 0, 2.5])\n                    rotate([0, 0, 15])\n                        cube([20, 2, 1], center = true);\n                \n                // Secondary blade\n                translate([8, 0, 2.5])\n                    rotate([0, 0, -10])\n                        cube([15, 1.5, 0.8], center = true);\n            }\n        }\n    }\n}\n\n// Power cord\nmodule power_cord() {\n    translate([-25, 0, 5])\n        rotate([0, 90, 0])\n            for(i = [0:5]) {\n                translate([0, 0, -i*3])\n                    rotate([0, 15*i, 0])\n                        cylinder(h = 3, r = 2, center = true);\n            }\n}\n\n// Assembly\nunion() {\n    // Base unit\n    blender_base();\n    \n    // Jar on top\n    translate([0, 0, 40])\n        blender_jar();\n    \n    // Blades inside jar\n    blender_blades();\n    \n    // Power cord\n    power_cord();\n    \n    // Feet - 4 rubber pads\n    for(x = [-15, 15])\n        for(y = [-15, 15])\n            translate([x, y, 0])\n                cylinder(h = 2, r = 3, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "mixer",
    "openscad_code": "// Realistic Kitchen Stand-Mixer (medium complexity)\n// All dimensions in mm, ready for FDM printing\n\n// Global parameters\nwall_th = 2.5;          // uniform wall thickness for printability\nbase_h = 20;            // height of the base\nbase_r = 45;            // radius of the circular base\nbody_h = 60;            // height of the motor body\nbody_r = 35;            // radius of the motor body\ntilt_angle = 30;        // head-tilt angle in degrees\nbowl_r = 40;            // bowl radius\nbowl_h = 40;            // bowl height\nbeater_r = 4;           // beater rod radius\nbeater_l = 45;          // beater rod length\n\nmodule base() {\n    // Solid circular foot with rubber ring channel\n    difference() {\n        cylinder(h=base_h, r=base_r, $fn=60);\n        translate([0,0,base_h-3])\n            cylinder(h=3+0.01, r=base_r-wall_th, $fn=60);\n    }\n    \n    // Vent slots around the base\n    for(a=[0:30:330])\n        rotate([0,0,a])\n            translate([base_r-4, -1.5, 2])\n                cube([6,3,base_h-4]);\n}\n\nmodule motor_body() {\n    // Main cylindrical housing\n    difference() {\n        cylinder(h=body_h, r=body_r, $fn=48);\n        // Cavity inside\n        translate([0,0,wall_th])\n            cylinder(h=body_h-wall_th*2, r=body_r-wall_th, $fn=48);\n        // Top ventilation grill\n        for(a=[0:45:315])\n            rotate([0,0,a])\n                translate([body_r-7, -1, body_h-7])\n                    cube([8,2,7]);\n    }\n    \n    // Front control knob\n    translate([body_r-4, 0, body_h-20])\n        rotate([90,0,0])\n            cylinder(h=8, r1=6, r2=4, $fn=20);\n}\n\nmodule tilting_head() {\n    rotate([tilt_angle,0,0])\n        translate([0,0,body_h])\n            union() {\n                // Head shell\n                difference() {\n                    cube([body_r*2, body_r, body_r*1.2], center=true);\n                    translate([0,0,-body_r*0.6+wall_th])\n                        cube([body_r*2-wall_th*2, body_r-wall_th*2, body_r*1.2], center=true);\n                }\n                \n                // Output hub\n                translate([0,0,-body_r*0.6-5])\n                    cylinder(h=10, r=body_r/3, $fn=32);\n            }\n}\n\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        cylinder(h=bowl_h, r=bowl_r, $fn=64);\n        // Inner cavity\n        translate([0,0,wall_th])\n            cylinder(h=bowl_h-wall_th, r=bowl_r-wall_th, $fn=64);\n        // Base recess for printed foot\n        translate([0,0,-0.01])\n            cylinder(h=3, r=bowl_r-10, $fn=32);\n    }\n    \n    // Handle\n    translate([bowl_r+2, 0, bowl_h/2])\n        rotate([0,90,0])\n            cylinder(h=15, r=4, $fn=16);\n}\n\nmodule beater() {\n    // Central shaft\n    cylinder(h=beater_l, r=beater_r, $fn=16);\n    \n    // Four elliptical loops\n    for(i=[0:90:270]) {\n        rotate([0,0,i])\n            translate([beater_r*2.5, 0, beater_l*0.4])\n                rotate([0,90,0])\n                    scale([1,0.6,1])\n                        cylinder(h=beater_r*2, r=beater_r*4, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Fixed base and body\n    base();\n    translate([0,0,base_h])\n        motor_body();\n    \n    // Tilting head\n    tilting_head();\n    \n    // Attach beater\n    translate([0,0,body_h+body_r*1.2*sin(tilt_angle)])\n        rotate([tilt_angle,0,0])\n            translate([0,0,-beater_l-5])\n                beater();\n}\n\n// Separate bowl component\ntranslate([0, base_r+bowl_r+15, 0])\n    bowl();",
    "renders": true
  },
  {
    "household_item": "spatula",
    "openscad_code": "// Realistic 3D printable spatula – medium complexity\n// 100 mm total length, 3 mm wall thickness, no steep overhangs\n\n$fn = 30;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Handle parameters\nhandle_len = 60 * scale_factor;\nhandle_dia = 10 * scale_factor;\nwall = 3 * scale_factor;\n\n// Blade parameters\nblade_len = 35 * scale_factor;\nblade_wid = 25 * scale_factor;\nblade_thk = 2 * scale_factor;\n\n// Ferrule (transition ring)\nferrule_h = 8 * scale_factor;\nferrule_d = 14 * scale_factor;\n\nmodule handle_grip() {\n    // Main handle tube\n    difference() {\n        cylinder(h = handle_len, d = handle_dia, center = false);\n        translate([0, 0, wall])\n            cylinder(h = handle_len - wall*2, d = handle_dia - wall*2, center = false);\n    }\n    // Grip rings for ergonomics\n    for (i = [1:6]) {\n        translate([0, 0, i*10 - 5])\n            difference() {\n                cylinder(h = 4, d = handle_dia + 2);\n                cylinder(h = 4, d = handle_dia - 1);\n            }\n    }\n}\n\nmodule ferrule() {\n    // Decorative reinforcing ring between handle and blade\n    cylinder(h = ferrule_h, d1 = ferrule_d, d2 = handle_dia, center = false);\n}\n\nmodule blade() {\n    // Main flat blade\n    translate([-blade_len + 2, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height = blade_thk, center = true)\n                polygon(points=[\n                    [0, -blade_wid/2],\n                    [blade_len, -blade_wid/2 + 4],\n                    [blade_len + 5, 0],\n                    [blade_len, blade_wid/2 - 4],\n                    [0, blade_wid/2]\n                ]);\n    // Blade spine – adds stiffness\n    translate([-blade_len/2, 0, blade_thk/2 + wall/2])\n        cube([blade_len + 2, 4, wall], center = true);\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle_grip();\n    // Ferrule\n    translate([0, 0, handle_len])\n        ferrule();\n    // Blade\n    translate([0, 0, handle_len + ferrule_h])\n        blade();\n}",
    "renders": true
  },
  {
    "household_item": "whisk",
    "openscad_code": "// OpenSCAD Whisk - Realistic Medium Complexity\n// A 3D printable balloon whisk with handle and 8 wire loops\n\n// Overall dimensions\nhandle_len = 70;\nhandle_dia = 12;\nball_dia = 45;\nwire_dia = 1.5;\nwire_count = 8;\n\n// Handle module with grip texture\nmodule handle() {\n    // Main handle shaft\n    color(\"silver\")\n    cylinder(h=handle_len, d=handle_dia, $fn=32);\n    \n    // Grip rings for better hold\n    for (i = [10:15:handle_len-20]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=4, d=handle_dia+2, $fn=32);\n            cylinder(h=4.1, d=handle_dia-1, $fn=32);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_len])\n    sphere(d=handle_dia, $fn=32);\n}\n\n// Wire loop generator\nmodule wire_loop(angle, radius) {\n    rotate([angle, 0, 0])\n    translate([0, 0, handle_len])\n    rotate([90, 0, 0])\n    difference() {\n        // Main loop shape - torus segment\n        rotate_extrude(angle=180, $fn=32)\n        translate([radius, 0, 0])\n        circle(d=wire_dia, $fn=16);\n        \n        // Cut bottom flat for printing\n        translate([0, 0, -wire_dia/2])\n        cube([radius*2+wire_dia, radius*2+wire_dia, wire_dia], center=true);\n    }\n}\n\n// Wire junction hub\nmodule junction_hub() {\n    color(\"silver\")\n    translate([0, 0, handle_len])\n    difference() {\n        sphere(d=8, $fn=32);\n        \n        // Hollow center for weight reduction\n        sphere(d=4, $fn=32);\n    }\n}\n\n// Main whisk assembly\nmodule whisk() {\n    // Handle assembly\n    handle();\n    \n    // Junction hub where wires meet handle\n    junction_hub();\n    \n    // Generate 8 wire loops in spherical pattern\n    for (i = [0:wire_count-1]) {\n        // Calculate spherical distribution angles\n        theta = 45 + i * 360/wire_count;  // Azimuthal angle\n        phi = 30 + (i % 2) * 30;          // Polar angle alternates\n        \n        // Create each wire loop\n        wire_loop(phi, ball_dia/2);\n    }\n    \n    // Additional support ring\n    color(\"silver\")\n    translate([0, 0, handle_len+ball_dia/3])\n    rotate([90, 0, 0])\n    torus(ring_diameter=ball_dia*0.8, tube_diameter=wire_dia*1.2);\n}\n\n// Helper module for torus shape\nmodule torus(ring_diameter, tube_diameter) {\n    rotate_extrude($fn=32)\n    translate([ring_diameter/2, 0, 0])\n    circle(d=tube_diameter, $fn=16);\n}\n\n// Render the whisk\nwhisk();",
    "renders": true
  },
  {
    "household_item": "ladle",
    "openscad_code": "// Medium-complexity realistic ladle\n// Wall thickness 1.2 mm everywhere for reliable 3D printing\n// Overall length ≈ 85 mm\n\n$fn = 32;\n\nmodule rounded_handle(length, width, thickness, radius) {\n    // Generates a slightly tapered round handle\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([width, thickness, radius*2], center = true);\n            translate([0, 0, length - radius])\n                cube([width*0.8, thickness*0.8, radius*2], center = true);\n        }\n        \n        // Hollow out the handle\n        translate([0, 0, -1])\n            cube([width - 2.4, thickness - 2.4, length + 2], center = true);\n    }\n}\n\nmodule hanging_loop() {\n    // Small loop at the end of the handle\n    rotate([90, 0, 0])\n        difference() {\n            torus(4, 1.5);\n            translate([0, -5, 0])\n                cube([10, 10, 3], center = true);\n        }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r = minor);\n}\n\nmodule bowl() {\n    // Main ladle bowl with realistic curvature\n    difference() {\n        // Outer bowl shape\n        scale([1, 1, 0.55])\n            sphere(d = 38);\n        \n        // Inner cavity\n        translate([0, 0, 1.2])\n            scale([1, 1, 0.5])\n                sphere(d = 38 - 2.4);\n        \n        // Flatten bottom slightly for printing stability\n        translate([0, 0, -9])\n            cube([40, 40, 10], center = true);\n    }\n    \n    // Reinforcement rim\n    translate([0, 0, 9.5])\n        difference() {\n            cylinder(h = 2, d = 38.5, center = true);\n            cylinder(h = 2.5, d = 36.5, center = true);\n        }\n}\n\nmodule transition() {\n    // Curved neck between bowl and handle\n    difference() {\n        hull() {\n            translate([0, -19, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 20, center = true);\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 8, center = true);\n        }\n        \n        // Hollow transition\n        translate([0, -9.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d = 20 - 2.4, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Bowl\n    bowl();\n    \n    // Transition neck\n    translate([0, 9.5, 0])\n        transition();\n    \n    // Handle\n    translate([0, 9.5 + 6, 0])\n        rotate([90, 0, 0])\n            rounded_handle(50, 8, 6, 3);\n    \n    // Hanging loop\n    translate([0, 9.5 + 6 + 47, 0])\n        hanging_loop();\n}",
    "renders": true
  },
  {
    "household_item": "tongs",
    "openscad_code": "// Realistic Kitchen Tongs - Medium Complexity\n// Designed for 3D printing with no supports needed\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\ntongs_length = 90;\nhandle_length = 45;\ngrip_width = 25;\nspring_thickness = 1.5;\nwall_thickness = 2;\n\nmodule tongs_half() {\n    // Handle base\n    translate([0, 0, 0])\n        difference() {\n            // Main handle body\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, r1=4, r2=3.5);\n            \n            // Grip pattern - subtracted grooves\n            for(i = [5:8:handle_length-10]) {\n                translate([0, 0, i])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, r=3.6, $fn=6);\n            }\n        }\n    \n    // Transition piece\n    translate([0, 0, handle_length])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=3.5, r2=2.5);\n    \n    // Lever arm\n    translate([0, 0, handle_length+8])\n        rotate([90, 0, 0])\n            cylinder(h=tongs_length-handle_length-8, r1=2.5, r2=2);\n    \n    // Gripper head\n    translate([0, 0, tongs_length])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer shell\n                cylinder(h=grip_width, r1=5, r2=3);\n                \n                // Inner curve for better grip\n                translate([0, 0, -0.5])\n                    cylinder(h=grip_width+1, r1=4, r2=2);\n                \n                // Grip teeth\n                for(i = [2:4:grip_width-4]) {\n                    rotate([0, 90, 0])\n                        translate([i, 0, 0])\n                            cube([0.5, 2.5, 1], center=true);\n                }\n            }\n}\n\n// Spring mechanism\nmodule spring() {\n    // Central pivot cylinder\n    translate([0, 0, handle_length])\n        rotate([0, 90, 0])\n            cylinder(h=6, r=1.5);\n    \n    // Spring arms\n    for(side = [0, 1]) {\n        rotate([0, 0, side * 180])\n            translate([0, 0, handle_length-5])\n                difference() {\n                    // Spring arm body\n                    rotate([0, 90, 0])\n                        cylinder(h=10, r=spring_thickness+1);\n                    \n                    // Spring cutout\n                    rotate([0, 90, 0])\n                        translate([5, 0, 0])\n                            cylinder(h=12, r=spring_thickness);\n                }\n    }\n}\n\n// Assembly\n// Left tong half\ntongs_half();\n\n// Right tong half (mirrored)\nmirror([1, 0, 0])\n    tongs_half();\n\n// Spring assembly in center\nspring();",
    "renders": true
  },
  {
    "household_item": "colander",
    "openscad_code": "// Realistic 3D-printable colander\n// Medium complexity using only basic primitives\n\n// Overall dimensions\ndiameter = 80;\nheight = 40;\nwall_thickness = 2;\nbase_thickness = 3;\n\nmodule colander_body() {\n    difference() {\n        // Main bowl shape\n        cylinder(h=height, d=diameter, $fn=64);\n        \n        // Hollow out the inside\n        translate([0, 0, -1])\n            cylinder(h=height+2, d=diameter-wall_thickness*2, $fn=64);\n    }\n}\n\nmodule base() {\n    // Solid base\n    cylinder(h=base_thickness, d=diameter, $fn=64);\n    \n    // Add feet\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([diameter/2-8, 0, 0])\n                cube([10, 6, 5], center=true);\n    }\n}\n\nmodule handles() {\n    // Left handle\n    translate([-diameter/2-8, 0, height/2]) {\n        rotate([0, 90, 0])\n            cylinder(h=15, d1=8, d2=6, $fn=16);\n        rotate([0, 90, 0])\n            translate([0, 0, 15])\n                cylinder(h=6, d=8, $fn=16);\n    }\n    \n    // Right handle\n    translate([diameter/2+8, 0, height/2]) {\n        rotate([0, -90, 0])\n            cylinder(h=15, d1=8, d2=6, $fn=16);\n        rotate([0, -90, 0])\n            translate([0, 0, 15])\n                cylinder(h=6, d=8, $fn=16);\n    }\n}\n\nmodule drainage_holes() {\n    // Central hole pattern\n    for(i=[0:5]) {\n        for(j=[0:11]) {\n            angle = j*30;\n            radius = 5 + i*7;\n            translate([radius*cos(angle), radius*sin(angle), 0]) {\n                // Ensure holes are only in curved part\n                intersection() {\n                    cylinder(h=height, d=3, $fn=12);\n                    translate([0, 0, height/2])\n                        sphere(d=diameter-wall_thickness, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Bottom holes\n    for(i=[0:7]) {\n        for(j=[0:7]) {\n            x = -21 + i*7;\n            y = -21 + j*7;\n            dist = sqrt(x*x + y*y);\n            if(dist < diameter/2-10) {\n                translate([x, y, 0])\n                    cylinder(h=base_thickness+1, d=2, $fn=8);\n            }\n        }\n    }\n}\n\nmodule rim() {\n    // Top rim reinforcement\n    translate([0, 0, height])\n        difference() {\n            cylinder(h=wall_thickness*2, d=diameter+wall_thickness*2, $fn=64);\n            cylinder(h=wall_thickness*2+1, d=diameter, $fn=64);\n        }\n}\n\n// Assemble the colander\nunion() {\n    translate([0, 0, 0])\n        colander_body();\n    \n    translate([0, 0, 0])\n        base();\n    \n    handles();\n    \n    rim();\n    \n    translate([0, 0, 0])\n        drainage_holes();\n}",
    "renders": true
  },
  {
    "household_item": "strainer",
    "openscad_code": "// Realistic Kitchen Strainer - Medium Complexity\n// 3D printable with proper wall thickness and no overhangs\n\n// Parameters\n$fn = 36;\nstrainer_diameter = 80;\nstrainer_height = 35;\nwall_thickness = 2;\nhandle_length = 40;\nhandle_width = 12;\nhandle_height = 8;\nhole_diameter = 4;\nhole_spacing = 6;\nbase_thickness = 3;\n\n// Main module\nmodule strainer() {\n    // Bowl body\n    difference() {\n        // Outer bowl\n        cylinder(h=strainer_height, d1=strainer_diameter, d2=strainer_diameter*0.9);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n            cylinder(h=strainer_height-base_thickness+1, d1=strainer_diameter-wall_thickness*2, d2=strainer_diameter*0.9-wall_thickness*2);\n    }\n    \n    // Bottom base\n    translate([0, 0, 0])\n        cylinder(h=base_thickness, d=strainer_diameter);\n    \n    // Handle\n    translate([strainer_diameter/2 - wall_thickness, 0, strainer_height/2])\n        rotate([90, 0, 0])\n            handle();\n    \n    // Drainage holes pattern\n    drainage_holes();\n}\n\n// Handle module\nmodule handle() {\n    // Main grip\n    difference() {\n        hull() {\n            cube([handle_length, handle_width, handle_height], center=true);\n            translate([handle_length/2 - handle_width/2, 0, 0])\n                sphere(d=handle_width);\n        }\n        \n        // Ergonomic groove\n        translate([0, 0, -handle_height/2+2])\n            cube([handle_length-10, handle_width-4, handle_height-3], center=true);\n    }\n    \n    // Reinforcement\n    translate([-handle_length/2, 0, 0])\n        cylinder(h=handle_width, d=wall_thickness*3, center=true);\n}\n\n// Drainage holes using polar coordinates\nmodule drainage_holes() {\n    // Bottom holes\n    for(r = [hole_spacing*2:hole_spacing:strainer_diameter/2-hole_spacing*2]) {\n        for(theta = [0:30:359]) {\n            if(r * sin(theta) < strainer_diameter/2 - hole_spacing*2 && \n               r * cos(theta) < strainer_diameter/2 - hole_spacing*2) {\n                translate([r * cos(theta), r * sin(theta), base_thickness/2])\n                    rotate([0, 0, 0])\n                        cylinder(h=base_thickness+1, d=hole_diameter);\n            }\n        }\n    }\n    \n    // Side holes\n    for(z = [base_thickness+hole_spacing:hole_spacing:strainer_height-hole_spacing]) {\n        radius = strainer_diameter/2 - wall_thickness - hole_spacing;\n        for(theta = [0:20:359]) {\n            translate([radius * cos(theta), radius * sin(theta), z])\n                rotate([0, 90, 0])\n                    cylinder(h=wall_thickness+1, d=hole_diameter);\n        }\n    }\n}\n\n// Rim detail\nmodule rim() {\n    translate([0, 0, strainer_height])\n        difference() {\n            cylinder(h=wall_thickness*2, d1=strainer_diameter, d2=strainer_diameter+wall_thickness);\n            cylinder(h=wall_thickness*2+1, d1=strainer_diameter-wall_thickness*2, d2=strainer_diameter-wall_thickness);\n        }\n}\n\n// Assembly\nunion() {\n    strainer();\n    rim();\n}",
    "renders": true
  },
  {
    "household_item": "grater",
    "openscad_code": "// Realistic 3D-printable cheese grater – medium complexity\n// Overall size ≈ 70 mm × 45 mm × 25 mm\n\n$fn = 32;\n\n/*--- Main body ----------------------------------------------------------*/\nmodule body() {\n    difference() {\n        // Solid block\n        cube([70, 45, 25], center = true);\n\n        // Hollow cavity – leave 2 mm wall\n        translate([0, 0, 2])\n            cube([66, 41, 21], center = true);\n\n        // Thumb slot for gripping (top rear)\n        translate([20, 22, 12])\n            rotate([-90, 0, 0])\n                cylinder(h = 15, d = 10, center = true);\n    }\n}\n\n/*--- Grating teeth ------------------------------------------------------*/\nmodule teeth_row(y, z, long = true) {\n    // Length varies for staggered rows\n    len = long ? 35 : 25;\n    for (x = [-len/2 + 2.5 : 5 : len/2 - 2.5]) {\n        translate([x, y, z])\n            scale([1, 0.6, 0.6])\n                cylinder(h = 2.5, d = 1.2);\n    }\n}\n\nmodule teeth_rows() {\n    for (row = [0 : 8]) {\n        y = -20 + row * 5;\n        // Alternate long and short rows\n        teeth_row(y, 12.5, row % 2 == 0);\n    }\n}\n\n/*--- Handle -------------------------------------------------------------*/\nmodule handle() {\n    difference() {\n        // Main handle block\n        translate([-42, 0, -5])\n            rotate([0, 0, -10])\n                cube([30, 12, 15], center = true);\n\n        // Finger groove\n        translate([-42, 0, 3])\n            rotate([0, 0, -10])\n                cylinder(h = 20, d = 8, center = true);\n        \n        // Hanging hole\n        translate([-55, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 5, center = true);\n    }\n}\n\n/*--- Reinforcement ribs -------------------------------------------------*/\nmodule ribs() {\n    for (x = [-25 : 25 : 25]) {\n        translate([x, 0, -8])\n            cube([3, 41, 8], center = true);\n    }\n}\n\n/*--- Assembly -----------------------------------------------------------*/\nunion() {\n    body();\n    handle();\n    ribs();\n    teeth_rows();\n}",
    "renders": true
  },
  {
    "household_item": "peeler",
    "openscad_code": "// Potato/Y-Peeler – 3D-printable, realistic style, medium complexity (~100 mm long)\n\n// ------------- Parameters -------------\nhandle_len = 80;\nhandle_d   = 12;\nslot_w     = 6;\nslot_h     = 4;\nslot_gap   = 8;\nblade_w    = 40;\nblade_h    = 25;\nblade_t    = 1.0;\neye_len    = 10;\neye_w      = 4;\nmetal_t    = 2.0;\nwall       = 1.5;           // printable wall thickness\n\n// ------------- Modules -------------\nmodule handle() {\n    difference() {\n        // Main ergonomic handle\n        hull() {\n            cylinder(h=handle_len, d1=handle_d+4, d2=handle_d, center=false);\n            translate([0,0,handle_len-10])\n                cylinder(h=10, d=handle_d, center=false);\n        }\n\n        // Grippy slots\n        for (i=[10:slot_gap:handle_len-15])\n            translate([0, -handle_d/2-0.1, i])\n                cube([slot_w, handle_d+0.2, slot_h], center=true);\n\n        // Hanging hole\n        translate([0,0,handle_len-8])\n            rotate([90,0,0])\n                cylinder(h=handle_d+1, d=4, center=true);\n    }\n}\n\nmodule yoke() {\n    difference() {\n        // Y-shaped metal yoke\n        union() {\n            translate([-blade_w/2+metal_t/2, 0, 0])\n                cube([metal_t, blade_h, metal_t]);\n            mirror([1,0,0])\n                translate([-blade_w/2+metal_t/2, 0, 0])\n                    cube([metal_t, blade_h, metal_t]);\n            translate([0, blade_h/2-metal_t/2, 0])\n                cube([blade_w-metal_t*2, metal_t, metal_t]);\n        }\n\n        // Rivet holes\n        translate([-blade_w/2+metal_t/2, blade_h-4, metal_t/2])\n            rotate([90,0,0])\n                cylinder(h=metal_t+1, d=2, center=true);\n        mirror([1,0,0])\n            translate([-blade_w/2+metal_t/2, blade_h-4, metal_t/2])\n                rotate([90,0,0])\n                    cylinder(h=metal_t+1, d=2, center=true);\n    }\n}\n\nmodule blade() {\n    difference() {\n        // Blade plate\n        translate([0, blade_h/2, 0])\n            cube([blade_w, blade_h, blade_t], center=true);\n\n        // Peeler slot\n        translate([0, blade_h/2-7, -0.1])\n            cube([blade_w-6, 14, blade_t+0.2], center=true);\n\n        // Sharp edge teeth (simple saw pattern)\n        for (x=[-blade_w/2+2:2:blade_w/2-2])\n            translate([x, blade_h-2, blade_t/2])\n                cube([1, 2, blade_t]);\n    }\n}\n\nmodule eye_remover() {\n    // Small tab with hole at handle front\n    translate([0, handle_d/2-wall, 0])\n        rotate([0,90,0])\n            difference() {\n                hull() {\n                    cylinder(h=eye_len, d=eye_w, center=false);\n                    translate([0, eye_len, 0])\n                        sphere(d=eye_w);\n                }\n                translate([0, eye_len/2, 0])\n                    rotate([90,0,0])\n                        cylinder(h=eye_w+1, d=eye_w-2*wall, center=true);\n            }\n}\n\n// ------------- Assembly -------------\nunion() {\n    // Handle (printable horizontally)\n    handle();\n\n    // Yoke + Blade\n    translate([0, handle_d/2, handle_len-blade_h-10])\n        rotate([90,0,0])\n            union() {\n                yoke();\n                blade();\n            }\n\n    // Eye remover\n    eye_remover();\n}",
    "renders": true
  },
  {
    "household_item": "canopener",
    "openscad_code": "// Can Opener - Realistic Style, Medium Complexity\n// Overall dimensions: ~90mm length, ~25mm width, ~15mm height\n\n$fn = 36;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main grip handle\n        translate([0, 0, 2.5])\n            scale([1, 0.6, 0.5])\n                cylinder(h = 80, r = 12);\n        \n        // Grip holes for fingers\n        for(i = [0:2]) {\n            translate([-30 + i*30, 0, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, r = 3);\n        }\n    }\n}\n\n// Cutting wheel assembly\nmodule cutting_wheel() {\n    // Wheel mount\n    translate([42, 0, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 5);\n    \n    // Cutting wheel\n    translate([42, 0, 7.5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 3, r = 8);\n                // Serrated edge teeth\n                for(i = [0:15]) {\n                    rotate([0, 0, i*22.5])\n                        translate([7, 0, -1])\n                            cube([2, 1.5, 5]);\n                }\n            }\n}\n\n// Handle lever\nmodule handle_lever() {\n    union() {\n        // Main lever\n        difference() {\n            translate([-35, 0, 7.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 70, r = 4);\n            // Grip texture\n            for(i = [0:6]) {\n                translate([-65 + i*10, 0, 7.5])\n                    rotate([0, 90, 0])\n                        cylinder(h = 8, r = 3.5);\n            }\n        }\n        \n        // Lever pivot\n        translate([0, 0, 7.5])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 4.5);\n    }\n}\n\n// Bottle opener end\nmodule bottle_opener() {\n    difference() {\n        // Main opener shape\n        translate([-45, 0, 7.5])\n            rotate([0, 0, 90])\n                difference() {\n                    cube([15, 25, 5], center = true);\n                    // Curved opening\n                    translate([0, 7.5, 0])\n                        cylinder(h = 6, r = 8);\n                    // Flat edge\n                    translate([0, -7.5, 0])\n                        cube([15, 5, 6], center = true);\n                }\n        \n        // Grip hole\n        translate([-45, 0, 7.5])\n            rotate([0, 90, 0])\n                cylinder(h = 7, r = 6);\n    }\n}\n\n// Magnet holder\nmodule magnet_holder() {\n    translate([20, 0, 15])\n        difference() {\n            cylinder(h = 3, r = 6);\n            cylinder(h = 4, r = 4);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    cutting_wheel();\n    handle_lever();\n    bottle_opener();\n    magnet_holder();\n    \n    // Reinforcement ribs\n    for(i = [-20, 0, 20]) {\n        translate([i, 0, 2.5])\n            cube([5, 8, 5], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "corkscrew",
    "openscad_code": "// Realistic Medium-Complexity Corkscrew\n// Total height ~95 mm, 3D-printable with no overhangs >45°\n\n$fn = 36;\n\n// Main module\nmodule corkscrew() {\n    // Handle assembly\n    union() {\n        handle();\n        \n        // Transition collar\n        translate([0,0,75])\n            cylinder(h = 8, d1 = 14, d2 = 10, center = true);\n        \n        // Metal shaft\n        translate([0,0,42])\n            cylinder(h = 35, d = 6, center = true);\n        \n        // Helix coil\n        translate([0,0,10])\n            rotate([0,0,0])\n                helix();\n        \n        // Protective tip\n        translate([0,0,2])\n            sphere(d = 8);\n    }\n}\n\n// Handle with ergonomic grip rings\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h = 75, d = 30, center = false);\n        \n        // Grip rings\n        for (i = [0:6]) {\n            translate([0,0,5 + i*10])\n                cylinder(h = 5, d = 28, center = false);\n        }\n        \n        // Hanging hole\n        translate([0,12.5,67.5])\n            rotate([90,0,0])\n                cylinder(h = 25, d = 6, center = true);\n    }\n    \n    // Top cap\n    translate([0,0,75])\n        cylinder(h = 5, d = 32, center = false);\n}\n\n// Helical coil for cork penetration\nmodule helix() {\n    // Parameters\n    turns = 7;\n    radius = 4.5;\n    wire_d = 3.5;\n    pitch = 4;\n    \n    // Generate coil segments\n    for (i = [0:turns*20]) {\n        angle = i * 360 / (turns * 20);\n        z = i * pitch / 20;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            z\n        ])\n            rotate([90,0,angle])\n                cylinder(h = wire_d, d = wire_d, center = true);\n    }\n    \n    // Tapered end for easy insertion\n    translate([0,0,pitch*turns])\n        cylinder(h = 8, d1 = 3.5, d2 = 1.5, center = false);\n}\n\n// Render the model\ncorkscrew();",
    "renders": true
  },
  {
    "household_item": "cuttingboard",
    "openscad_code": "// Realistic medium-complexity cutting board\n// Overall dimensions: 80 mm × 50 mm × 8 mm (with juice groove)\n\n$fn = 30; // Smooth curves\n\n// Board body\nmodule board_body() {\n    difference() {\n        // Main plank\n        translate([0, 0, 4])\n            cube([80, 50, 8], center = true);\n\n        // Juice groove (2 mm deep)\n        translate([0, 0, 7.9])\n            cube([70, 40, 2], center = true);\n    }\n}\n\n// Handle slots on short ends (finger grips)\nmodule handle_slots() {\n    for (y = [-20, 20]) {\n        difference() {\n            // Cut half-cylinders for finger grips\n            translate([-40, y, 4])\n                rotate([0, 90, 0])\n                    cylinder(h = 50, d = 12, center = true);\n\n            // Ensure clean cut on board edge\n            translate([-44, y, 4])\n                cube([10, 14, 8], center = true);\n        }\n    }\n}\n\n// Rubber feet recesses (4 corners)\nmodule feet_recesses() {\n    for (x = [-30, 30])\n        for (y = [-18, 18])\n            translate([x, y, 0.5])\n                cylinder(h = 1, d = 8);\n}\n\n// Wood grain texture (shallow grooves)\nmodule wood_grain() {\n    for (i = [-35:5:35]) {\n        translate([i, 0, 7.9])\n            cube([0.5, 50, 0.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    board_body();\n    handle_slots();\n    feet_recesses();\n    wood_grain();\n}",
    "renders": true
  },
  {
    "household_item": "microwave",
    "openscad_code": "// Realistic Microwave - medium complexity\n// All dimensions in mm\n\n// Overall dimensions\nmicrowave_width = 80;\nmicrowave_depth = 60;\nmicrowave_height = 45;\nwall_thickness = 2;\n\n// Main body\nmodule main_body() {\n    // Outer shell\n    difference() {\n        // Main box\n        cube([microwave_width, microwave_depth, microwave_height], center = true);\n        \n        // Hollow out inside\n        translate([0, 0, -wall_thickness/2])\n            cube([microwave_width - 2*wall_thickness, \n                  microwave_depth - 2*wall_thickness, \n                  microwave_height - wall_thickness], center = true);\n    }\n}\n\n// Door\nmodule door() {\n    // Door frame\n    translate([-microwave_width/2 + wall_thickness, \n               microwave_depth/2 - wall_thickness, \n               0])\n        cube([microwave_width - 2*wall_thickness, wall_thickness*2, microwave_height - 10]);\n    \n    // Glass window\n    translate([-microwave_width/2 + wall_thickness + 3, \n               microwave_depth/2 - wall_thickness/2, \n               5])\n        cube([microwave_width - 2*wall_thickness - 6, wall_thickness, microwave_height - 20]);\n    \n    // Door handle\n    translate([-microwave_width/2 + wall_thickness + 5, \n               microwave_depth/2 + 3, \n               -5])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2, $fn=16);\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel background\n    translate([microwave_width/2 - 15, 0, microwave_height/2 - 15])\n        cube([15, microwave_depth - 20, 15]);\n    \n    // Display screen\n    translate([microwave_width/2 - 13, -10, microwave_height/2 - 5])\n        cube([11, 20, 5]);\n    \n    // Buttons\n    for(x = [microwave_width/2 - 12, microwave_width/2 - 8, microwave_width/2 - 4]) {\n        translate([x, 0, microwave_height/2 - 12])\n            cylinder(h=2, r=1.5, $fn=16);\n    }\n    \n    // Knob\n    translate([microwave_width/2 - 10, 10, microwave_height/2 - 12])\n        cylinder(h=3, r=3, $fn=20);\n}\n\n// Ventilation grilles\nmodule vents() {\n    // Top vents\n    for(i = [1:3:microwave_width - 10]) {\n        translate([-microwave_width/2 + 5 + i, \n                   microwave_depth/2 - wall_thickness, \n                   microwave_height/2 - 5])\n            cube([2, wall_thickness, 1]);\n    }\n    \n    // Side vents\n    for(i = [1:3:10]) {\n        translate([microwave_width/2 - wall_thickness, \n                   -microwave_depth/2 + 5 + i, \n                   microwave_height/2 - 5])\n            cube([wall_thickness, 2, 1]);\n    }\n}\n\n// Feet\nmodule feet() {\n    foot_size = 3;\n    foot_height = 2;\n    \n    translate([microwave_width/2 - 10, microwave_depth/2 - 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([-microwave_width/2 + 10, microwave_depth/2 - 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([microwave_width/2 - 10, -microwave_depth/2 + 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([-microwave_width/2 + 10, -microwave_depth/2 + 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n}\n\n// Assembly\nunion() {\n    main_body();\n    door();\n    control_panel();\n    vents();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "oven",
    "openscad_code": "// Realistic medium-complexity 3D-printable oven model\n// External dimensions: 80 x 70 x 70 mm\n\n$fn = 32;\n\nmodule roundedBox(s, r) {\n    translate([0,0,r]) {\n        difference() {\n            hull() {\n                for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n                    translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n                        sphere(r);\n            }\n            translate([0,-s.y/2-1,0])\n                cube([s.x+2, 2, s.z+2], center=true);\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        roundedBox([80,70,70], 4);\n        // Hollow out\n        translate([0,0,5])\n            roundedBox([74,66,60], 3);\n    }\n}\n\nmodule door() {\n    difference() {\n        translate([-40.5,0,35])\n            cube([3, 60, 50], center=true);\n        // Window cutout\n        translate([-42,0,40])\n            cube([2, 40, 30], center=true);\n    }\n    // Handle bar\n    translate([-42,0,10])\n        rotate([0,90,0])\n            cylinder(h=30, d=6);\n}\n\nmodule knobRow(y, z, n) {\n    for(i=[-(n-1)/2:(n-1)/2]) {\n        translate([40, y+i*12, z])\n            rotate([90,0,0])\n                cylinder(h=6, d1=8, d2=6);\n    }\n}\n\nmodule feet() {\n    for(x=[-30, 30], y=[-25, 25]) {\n        translate([x,y,-3])\n            cylinder(h=6, d=8);\n    }\n}\n\nmodule ventSlits() {\n    for(i=[-2:2]) {\n        translate([0, 35.5, 55+i*6])\n            cube([70, 2, 2]);\n    }\n}\n\nmodule rack() {\n    color(\"silver\")\n    difference() {\n        translate([0,0,25])\n            cube([70, 60, 1], center=true);\n        for(x=[-25:10:25], y=[-20:10:20]) {\n            translate([x,y,25.5])\n                cylinder(h=2, d=3);\n        }\n    }\n}\n\nmodule oven() {\n    union() {\n        body();\n        door();\n        knobRow(0, 55, 3);\n        feet();\n        ventSlits();\n        rack();\n    }\n}\n\noven();",
    "renders": true
  },
  {
    "household_item": "stove",
    "openscad_code": "// Realistic medium-complexity 3D printable stove model\n// Overall size ~90 mm wide × 70 mm deep × 50 mm tall\n// All walls ≥2 mm for printability\n\n$fn = 32;  // Smooth curves\n\nmodule body() {\n    // Main stove body with rounded corners\n    difference() {\n        minkowski() {\n            cube([80, 60, 40], center = true);\n            sphere(3);\n        }\n        // Hollow inside\n        translate([0, 0, 2])\n            cube([76, 56, 40], center = true);\n    }\n}\n\nmodule cooktop() {\n    // Top plate with burner recesses\n    difference() {\n        translate([0, 0, 22])\n            cube([82, 62, 4], center = true);\n        // Recesses for burners\n        for (x = [-25, 25])\n            for (y = [-15, 15])\n                translate([x, y, 24])\n                    cylinder(h = 3, r = 12);\n    }\n}\n\nmodule burner_grate() {\n    // Four burner grates\n    for (x = [-25, 25])\n        for (y = [-15, 15]) {\n            translate([x, y, 26])\n                difference() {\n                    cylinder(h = 2, r = 12);\n                    cylinder(h = 3, r = 10);\n                }\n            // Grate bars\n            for (i = [-8:4:8])\n                translate([x + i, y, 26.5])\n                    cube([2, 22, 1], center = true);\n            for (j = [-8:4:8])\n                translate([x, y + j, 26.5])\n                    cube([22, 2, 1], center = true);\n        }\n}\n\nmodule burner_head() {\n    // Gas burner caps\n    color(\"darkgray\")\n    for (x = [-25, 25])\n        for (y = [-15, 15]) {\n            translate([x, y, 24])\n                cylinder(h = 2, r = 8);\n            // Flame spreader holes\n            for (a = [0:30:359])\n                rotate([0, 0, a])\n                    translate([x + 6, y, 24.5])\n                        cylinder(h = 1, r = 1);\n        }\n}\n\nmodule knobs() {\n    // Four control knobs on front panel\n    for (i = [0:3])\n        translate([-30 + i*20, 32, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 6, r = 5);\n                    translate([0, 0, -1])\n                        cylinder(h = 8, r = 4);\n                    // Indicator line\n                    translate([4.5, 0, 3])\n                        cube([1, 0.5, 6], center = true);\n                }\n}\n\nmodule door() {\n    // Oven door with handle\n    translate([0, -32, -5])\n        difference() {\n            // Door panel\n            cube([70, 4, 35], center = true);\n            // Window\n            translate([0, 1, 8])\n                cube([50, 2, 20], center = true);\n            // Handle cutouts\n            translate([0, 3, -12])\n                cube([60, 2, 4], center = true);\n        }\n    // Handle bar\n    translate([0, -30, -12])\n        rotate([90, 0, 0])\n            cylinder(h = 60, r = 2);\n}\n\nmodule feet() {\n    // Four rubber feet\n    for (x = [-35, 35])\n        for (y = [-25, 25])\n            translate([x, y, -22])\n                cylinder(h = 4, r = 3);\n}\n\n// Assemble the stove\nunion() {\n    body();\n    cooktop();\n    burner_grate();\n    burner_head();\n    knobs();\n    door();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "refrigerator",
    "openscad_code": "// Refrigerator - Realistic Style, Medium Complexity\n// Overall dimensions: 45mm x 40mm x 90mm (HxDxW)\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([45, 40, 90], center = true);\n        \n        // Hollow interior\n        translate([0, 2, 0])\n            cube([41, 34, 86], center = true);\n    }\n}\n\n// Refrigerator door\nmodule door() {\n    difference() {\n        // Main door panel\n        translate([0, 20.5, 0])\n            cube([43, 1, 88], center = true);\n        \n        // Door inner recess\n        translate([0, 21, 0])\n            cube([41, 0.5, 86], center = true);\n    }\n}\n\n// Handle\nmodule handle() {\n    // Vertical bar\n    translate([15, 21.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 3, d2 = 3, center = true);\n    \n    // Top grip\n    translate([15, 21.5, 30])\n        cube([6, 2, 2], center = true);\n    \n    // Bottom grip\n    translate([15, 21.5, 10])\n        cube([6, 2, 2], center = true);\n}\n\n// Hinges\nmodule hinges() {\n    for(z = [-35, 35]) {\n        translate([-22.5, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 2.5, center = true);\n    }\n}\n\n// Feet\nmodule feet() {\n    for(x = [-15, 15])\n        translate([x, -20, -45])\n            cylinder(h = 5, r1 = 3, r2 = 2, center = true);\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel base\n    translate([18, 20.5, 35])\n        cube([8, 0.5, 15], center = true);\n    \n    // Buttons\n    for(i = [0:2]) {\n        translate([15, 21, 30 + i * 5])\n            cylinder(h = 0.5, r = 1, center = true);\n    }\n    \n    // Display\n    translate([21, 21, 35])\n        cube([4, 0.5, 8], center = true);\n}\n\n// Grille at bottom\nmodule grille() {\n    translate([0, -15, -45])\n        difference() {\n            cube([40, 5, 15], center = true);\n            for(i = [-6:3:6]) {\n                translate([i, -12.5, -45])\n                    cube([1, 5, 15], center = true);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    door();\n    handle();\n    hinges();\n    feet();\n    control_panel();\n    grille();\n}",
    "renders": true
  },
  {
    "household_item": "freezer",
    "openscad_code": "// Upright freezer, ~80 mm tall\n// All dimensions in mm; wall thickness = 2 mm everywhere for 3D-printability\n\n// Overall outer dimensions\n$fn = 32;\noverall_w = 35;\noverall_d = 30;\noverall_h = 80;\n\n// Wall thickness\nwall = 2;\n\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([overall_w, overall_d, overall_h]);\n        // Hollow inside\n        translate([wall, wall, wall])\n            cube([overall_w-2*wall, overall_d-2*wall, overall_h-wall]);\n    }\n}\n\nmodule door() {\n    difference() {\n        // Solid door\n        translate([overall_w, 0, 0])\n            cube([wall, overall_d, overall_h]);\n        // Recessed inner face\n        translate([overall_w + 0.5, wall, wall])\n            cube([wall - 1, overall_d - 2*wall, overall_h - 2*wall]);\n    }\n    \n    // Handle bar\n    translate([overall_w + wall + 1, overall_d/2 - 1, overall_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 2);\n}\n\nmodule shelf() {\n    thickness = 1.5;\n    lip = 1;\n    difference() {\n        cube([overall_w - 4*wall, overall_d - 2*wall - 2*lip, thickness]);\n        // Lightening slots\n        for (x = [wall : 6 : overall_w - 6*wall])\n            translate([x, 0, -0.1])\n                cube([1, overall_d - 2*wall - 2*lip, thickness + 0.2]);\n    }\n}\n\nmodule shelves() {\n    shelf_spacing = 18;\n    shelf_h_start = 8;\n    for (i = [0 : 1 : 2])\n        translate([2*wall, wall, shelf_h_start + i*shelf_spacing])\n            shelf();\n}\n\nmodule hinges() {\n    pin_r = 1.5;\n    pin_h = 4;\n    // Top hinge\n    translate([overall_w, overall_d/2, overall_h - 2])\n        rotate([90, 0, 0])\n            cylinder(h = pin_h, r = pin_r);\n    // Bottom hinge\n    translate([overall_w, overall_d/2, 2])\n        rotate([90, 0, 0])\n            cylinder(h = pin_h, r = pin_r);\n}\n\nmodule feet() {\n    foot_r = 2;\n    foot_h = 3;\n    for (x = [wall : overall_w - 2*wall : overall_w - 4*wall])\n        for (y = [wall : overall_d - 2*wall : overall_d - 4*wall])\n            translate([x, y, -foot_h])\n                cylinder(h = foot_h, r = foot_r);\n}\n\nunion() {\n    body();\n    door();\n    hinges();\n    shelves();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "dishwasher",
    "openscad_code": "// Dishwasher - Realistic Style, Medium Complexity\n// Approx 70mm tall x 60mm wide x 60mm deep\n\n// Main body dimensions\nbody_width = 60;\nbody_depth = 58;\nbody_height = 68;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main dishwasher body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([body_width, body_depth, body_height], center=false);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([body_width-wall*2, body_depth-wall*2, body_height-wall*2], center=false);\n    }\n}\n\n// Front panel with door\nmodule front_door() {\n    // Door panel\n    translate([0, body_depth-wall, 0])\n        cube([body_width, wall, body_height], center=false);\n    \n    // Door handle\n    translate([body_width/2-15, body_depth+1, body_height/2+10])\n        cube([30, 3, 5], center=false);\n}\n\n// Control panel on top\nmodule control_panel() {\n    difference() {\n        // Panel base\n        translate([5, body_depth-10, body_height-5])\n            cube([body_width-10, 10, 5], center=false);\n        \n        // Buttons\n        for(i = [0:3]) {\n            translate([10 + i*12, body_depth-7, body_height-2])\n                cube([6, 4, 2], center=false);\n        }\n        \n        // Display window\n        translate([body_width/2-8, body_depth-8, body_height-2])\n            cube([16, 6, 2], center=false);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    for(x = [10, body_width-15]) {\n        for(y = [10, body_depth-15]) {\n            translate([x, y, -4])\n                cylinder(h=4, r=3, center=false);\n        }\n    }\n}\n\n// Air vent on front\nmodule vent() {\n    translate([body_width/2-10, body_depth-wall, body_height-15])\n        difference() {\n            cube([20, wall+1, 10], center=false);\n            for(i = [0:3]) {\n                translate([body_width/2-8 + i*4, body_depth-wall, body_height-13])\n                    cube([2, wall+2, 6], center=false);\n            }\n        }\n}\n\n// Water inlet on back\nmodule water_inlet() {\n    translate([body_width-10, 5, 30])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, center=false);\n}\n\n// Bottom spray arm (simplified)\nmodule spray_arm() {\n    translate([body_width/2-5, body_depth/2-5, 10])\n        cube([10, body_depth-20, 1], center=false);\n}\n\n// Main assembly\nunion() {\n    body();\n    front_door();\n    control_panel();\n    feet();\n    vent();\n    water_inlet();\n    spray_arm();\n}",
    "renders": true
  },
  {
    "household_item": "sink",
    "openscad_code": "// Realistic medium-complexity 3D-printable sink model\n// Overall size ≈ 85 mm wide × 60 mm deep × 30 mm high\n\n$fn = 36;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule basin() {\n    difference() {\n        // Outer shell\n        cube([80, 55, 25]);\n        \n        // Inner cavity\n        translate([wall, wall, -1])\n        cube([80 - 2*wall, 55 - 2*wall, 25 - wall + 1]);\n        \n        // Drain slope front\n        translate([wall, wall, 12])\n        rotate([0, 15, 0])\n        cube([80 - 2*wall, 55 - 2*wall, 20]);\n        \n        // Drain slope back\n        translate([wall, wall, 12])\n        rotate([0, -15, 0])\n        cube([80 - 2*wall, 55 - 2*wall, 20]);\n    }\n}\n\nmodule drain() {\n    difference() {\n        // Drain collar\n        cylinder(h = 3, d1 = 12, d2 = 10);\n        \n        // Drain hole\n        translate([0, 0, -1])\n        cylinder(h = 5, d = 6);\n    }\n}\n\nmodule faucet_base() {\n    difference() {\n        // Solid block\n        cube([20, 15, 8]);\n        \n        // Mount holes\n        for (x = [-7, 7])\n            translate([x, 15/2, -1])\n            cylinder(h = 10, d = 3.5);\n    }\n}\n\nmodule faucet_spout() {\n    difference() {\n        union() {\n            // Vertical pipe\n            cylinder(h = 22, d = 6);\n            \n            // Horizontal spout\n            translate([0, 0, 22])\n            rotate([90, 0, 0])\n            cylinder(h = 25, d = 6);\n            \n            // Spout end\n            translate([0, 25, 22])\n            rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4);\n        }\n        \n        // Waterway\n        translate([0, 0, -1])\n        cylinder(h = 56, d = 3);\n    }\n}\n\nmodule overflow_holes() {\n    // Two small overflow slots at back\n    for (y = [-5, 5])\n        translate([-wall/2, 55/2 + y, 12])\n        cube([wall, 2, 8]);\n}\n\n// Build the sink\nunion() {\n    // Main basin\n    basin();\n    \n    // Drain at bottom center\n    translate([80/2, 55/2, 0])\n    drain();\n    \n    // Overflow slots in back wall\n    overflow_holes();\n    \n    // Faucet assembly rear left\n    translate([5, 5, 25])\n    union() {\n        faucet_base();\n        translate([10, 7.5, 8])\n        faucet_spout();\n    }\n    \n    // Side ribs for strength\n    for (x = [5, 75])\n        translate([x - wall/2, 0, 0])\n        cube([wall, 55, 25]);\n}",
    "renders": true
  },
  {
    "household_item": "faucet",
    "openscad_code": "// Realistic medium-complexity faucet – OpenSCAD\n// Approx. 90 mm tall, 3 mm wall thickness everywhere\n\n$fn = 36;\n\nmodule rounded_cube(size, r)\n{\n    // Helper for a cube with rounded vertical edges\n    hull()\n    {\n        translate([r, r, 0]) cube([size.x - 2*r, size.y - 2*r, size.z]);\n        translate([r, r, r]) sphere(r);\n        translate([size.x - r, r, r]) sphere(r);\n        translate([r, size.y - r, r]) sphere(r);\n        translate([size.x - r, size.y - r, r]) sphere(r);\n        translate([r, r, size.z - r]) sphere(r);\n        translate([size.x - r, r, size.z - r]) sphere(r);\n        translate([r, size.y - r, size.z - r]) sphere(r);\n        translate([size.x - r, size.y - r, size.z - r]) sphere(r);\n    }\n}\n\n// Base plate\nmodule base()\n{\n    difference()\n    {\n        rounded_cube([40, 40, 8], 4);\n        // Mounting holes\n        for (x = [-15, 15])\n            for (y = [-15, 15])\n                translate([x + 20, y + 20, -1])\n                    cylinder(h = 10, d = 5);\n    }\n}\n\n// Vertical pipe body\nmodule body()\n{\n    difference()\n    {\n        translate([20, 20, 8])\n            cylinder(h = 60, d1 = 18, d2 = 22);\n        // Internal hollow\n        translate([20, 20, -1])\n            cylinder(h = 70, d = 12);\n    }\n}\n\n// Horizontal spout\nmodule spout()\n{\n    difference()\n    {\n        union()\n        {\n            // Main curved spout\n            hull()\n            {\n                translate([20, 20, 65])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, d = 16);\n                translate([20 + 45, 20, 55])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, d = 14);\n            }\n            // Aerator tip\n            translate([20 + 50, 20, 55])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 12);\n        }\n        // Internal bore\n        hull()\n        {\n            translate([20, 20, 65])\n                rotate([0, 90, 0])\n                    cylinder(h = 6, d = 8);\n            translate([20 + 45, 20, 55])\n                rotate([0, 90, 0])\n                    cylinder(h = 6, d = 8);\n        }\n    }\n}\n\n// Handle\nmodule handle()\n{\n    difference()\n    {\n        // Lever arm\n        translate([20, 20 + 11, 68])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 8);\n        // Shaft hole\n        translate([20, 20 + 11, 68])\n            rotate([90, 0, 0])\n                cylinder(h = 32, d = 4);\n    }\n    // Grip knob\n    translate([20, 20 + 11, 68 + 30])\n    {\n        difference()\n        {\n            sphere(d = 14);\n            sphere(d = 10);\n        }\n    }\n}\n\n// Assembly\nunion()\n{\n    base();\n    body();\n    spout();\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "cabinet",
    "openscad_code": "// Realistic Cabinet - Medium Complexity (3D-Printable)\n\n$fn=32; // Smooth curves for 3D printing\n\n// Overall dimensions\ncabinet_width = 80;\ncabinet_depth = 40;\ncabinet_height = 60;\nwall_thickness = 2;\ndoor_thickness = 1.5;\n\nmodule cabinet_body() {\n    difference() {\n        // Main outer shell\n        cube([cabinet_width, cabinet_depth, cabinet_height], center=false);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([\n                cabinet_width - 2*wall_thickness,\n                cabinet_depth - 2*wall_thickness,\n                cabinet_height - wall_thickness\n            ], center=false);\n    }\n}\n\nmodule cabinet_back() {\n    // Solid back panel\n    translate([0, 0, 0])\n        cube([cabinet_width, wall_thickness, cabinet_height], center=false);\n}\n\nmodule shelf() {\n    // Single shelf positioned at 60% height\n    translate([wall_thickness, wall_thickness, cabinet_height * 0.6])\n        cube([\n            cabinet_width - 2*wall_thickness,\n            cabinet_depth - 2*wall_thickness,\n            wall_thickness\n        ], center=false);\n}\n\nmodule door_handle() {\n    // Cylindrical door handle\n    translate([cabinet_width - 8, cabinet_depth - door_thickness - 3, cabinet_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d1=4, d2=4, center=false);\n}\n\nmodule cabinet_door() {\n    // Hinged door with panel detail\n    difference() {\n        // Main door panel\n        translate([cabinet_width - door_thickness, 0, 0])\n            cube([door_thickness, cabinet_depth, cabinet_height], center=false);\n        \n        // Recessed panel detail\n        translate([cabinet_width - door_thickness + 0.5, wall_thickness, wall_thickness*2])\n            cube([\n                door_thickness - 1,\n                cabinet_depth - 2*wall_thickness,\n                cabinet_height - 4*wall_thickness\n            ], center=false);\n        \n        // Handle hole (for printing as separate piece)\n        translate([cabinet_width - door_thickness/2, cabinet_depth - 3, cabinet_height/2])\n            cylinder(h=door_thickness + 1, d=2.5, center=true);\n    }\n}\n\nmodule base_trim() {\n    // Decorative base trim\n    for(i=[0, 1]) {\n        // Left and right trim pieces\n        translate([i * (cabinet_width - wall_thickness*2), -1, -2])\n            cube([wall_thickness*2, cabinet_depth + 2, 2], center=false);\n    }\n    \n    // Front trim piece\n    translate([0, -1, -2])\n        cube([cabinet_width, wall_thickness*2, 2], center=false);\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    cabinet_back();\n    shelf();\n    cabinet_door();\n    door_handle();\n    base_trim();\n}",
    "renders": true
  },
  {
    "household_item": "drawer",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Drawer\n// Overall size: 60 mm (W) x 50 mm (D) x 40 mm (H)\n// Wall thickness: 2 mm\n\n$fn = 32;\n\n// Outer carcase\nmodule carcase() {\n    difference() {\n        // Main shell\n        translate([0, 0, 20])\n            cube([60, 50, 40], center = true);\n        // Hollow space\n        translate([0, 0, 21])\n            cube([56, 46, 38], center = true);\n    }\n}\n\n// Drawer box\nmodule drawer_box() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 15])\n            cube([54, 44, 30], center = true);\n        // Inner cavity\n        translate([0, 0, 15])\n            cube([50, 40, 28], center = true);\n    }\n}\n\n// Drawer front panel\nmodule drawer_front() {\n    difference() {\n        // Front plate\n        translate([0, 25, 15])\n            cube([58, 2, 34], center = true);\n        // Recessed handle\n        translate([0, 26, 15])\n            cube([40, 0.5, 10], center = true);\n    }\n}\n\n// Handle bar\nmodule handle_bar() {\n    translate([0, 26.5, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 38, d = 6, center = true);\n}\n\n// Bottom runners for drawer\nmodule runners() {\n    for (x = [-20, 20]) {\n        translate([x, -10, 0])\n            cube([2, 50, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    carcase();\n    runners();\n    drawer_box();\n    drawer_front();\n    handle_bar();\n}",
    "renders": true
  },
  {
    "household_item": "shelf",
    "openscad_code": "// Realistic medium-complexity shelf\n// Overall dimensions: 80mm wide x 40mm deep x 30mm high\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32; // smooth curves\n\n// Material thickness constant\nth = 2;\n\n// Shelf parameters\nshelf_w = 80;\nshelf_d = 40;\nshelf_h = 30;\n\n// Shelf board module\nmodule shelf_board(w, d, h) {\n    difference() {\n        // Main board\n        cube([w, d, h], center=true);\n        // Hollow out underside\n        translate([0, 0, -h/2 + th])\n            cube([w - 2*th, d - 2*th, th], center=true);\n    }\n}\n\n// Support bracket module\nmodule bracket() {\n    union() {\n        // Vertical support\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, 0])\n            cube([th, th, shelf_h]);\n        // Horizontal support\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, shelf_h/2 - th/2])\n            cube([th, shelf_d - 10, th]);\n        // Diagonal brace\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, shelf_h/4])\n            rotate([0, 0, 45])\n            cube([th*1.414, shelf_d/2 - 5, th]);\n    }\n}\n\n// Back panel module\nmodule back_panel() {\n    translate([0, -shelf_d/2 + th/2, shelf_h/2])\n        cube([shelf_w, th, shelf_h], center=true);\n}\n\n// Screw hole module\nmodule screw_hole() {\n    cylinder(h=th+0.1, d=3, center=true);\n}\n\n// Main shelf assembly\nunion() {\n    // Shelf surface\n    translate([0, 0, shelf_h/2])\n        shelf_board(shelf_w, shelf_d, th);\n    \n    // Bottom shelf\n    translate([0, 0, 0])\n        shelf_board(shelf_w, shelf_d, th);\n    \n    // Back panel\n    back_panel();\n    \n    // Support brackets - 4 corners\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            translate([x * (shelf_w/2 - 5), y * (shelf_d/2 - 5), 0])\n                bracket();\n        }\n    }\n    \n    // Mounting holes in back panel\n    for(i=[-1, 0, 1]) {\n        translate([i * 20, -shelf_d/2 + th/2, shelf_h - 5])\n            rotate([0, 90, 0])\n            screw_hole();\n    }\n    \n    // Rounded front edge\n    translate([0, shelf_d/2 - 1, shelf_h/2 + th/2])\n        cylinder(h=shelf_w, d=2, center=true);\n    \n    // Small lip at front\n    translate([0, shelf_d/2 - 1.5, shelf_h/2 - 1])\n        cube([shelf_w, 1, 2], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "jar",
    "openscad_code": "// Realistic medium-complexity 3D-printable jar\n// Overall dimensions: ~70 mm tall, ~50 mm wide\n// Wall thickness: 2 mm for 3D printing\n\n$fa = 2; $fs = 0.5;\n\n// Parameters\njar_height = 70;\njar_radius = 25;\nwall = 2;\nthreads_pitch = 3;\nthreads_depth = 1.5;\nthreads_turns = 1.5;\ncap_thick = 8;\nbase_thick = 4;\n\n// Main jar body\nmodule jar_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = jar_height - base_thick, r = jar_radius, $fn = 64);\n        \n        // Hollow inside\n        translate([0, 0, -0.1])\n            cylinder(h = jar_height - base_thick + 0.2, r = jar_radius - wall, $fn = 64);\n        \n        // Thread cutout\n        translate([0, 0, jar_height - base_thick - threads_turns * threads_pitch])\n            cylinder(h = threads_turns * threads_pitch + 1, r = jar_radius - wall + threads_depth, $fn = 64);\n    }\n    \n    // Solid base\n    translate([0, 0, 0])\n        cylinder(h = base_thick, r = jar_radius, $fn = 64);\n}\n\n// Threads on jar neck\nmodule jar_threads() {\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 60])\n            translate([jar_radius - wall - threads_depth, 0, jar_height - base_thick - threads_turns * threads_pitch])\n                linear_extrude(height = threads_turns * threads_pitch, twist = threads_turns * 360, scale = 1, $fn = 32)\n                    square([threads_depth, threads_pitch / 6], center = false);\n    }\n}\n\n// Cap\nmodule cap() {\n    difference() {\n        union() {\n            // Top dome\n            translate([0, 0, cap_thick + 1])\n                scale([1, 1, 0.7])\n                    sphere(r = jar_radius + wall, $fn = 64);\n            \n            // Cylindrical ring\n            cylinder(h = cap_thick + 1, r = jar_radius + wall, $fn = 64);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h = cap_thick + 1.2, r = jar_radius, $fn = 64);\n        \n        // Thread cavity\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n                translate([jar_radius - wall, 0, 0])\n                    linear_extrude(height = threads_turns * threads_pitch, twist = -threads_turns * 360, scale = 1, $fn = 32)\n                        square([threads_depth, threads_pitch / 6], center = false);\n        }\n    }\n    \n    // Grip ridges on the outside\n    for (i = [0 : 35]) {\n        rotate([0, 0, i * 10])\n            translate([jar_radius + wall - 0.5, 0, cap_thick / 2])\n                cube([1, 1.5, cap_thick - 2], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_thick]) {\n    jar_body();\n    jar_threads();\n}\ntranslate([0, 0, jar_height - base_thick + 2]) {\n    cap();\n}",
    "renders": true
  },
  {
    "household_item": "bottle",
    "openscad_code": "// Realistic medium-complexity 3D-printable bottle\n// Height ≈ 90 mm, Ø ≈ 45 mm, wall 2 mm\n\n$fn = 36; // smooth curves\n\n// Overall dimensions\nH_total = 90;\nR_body = 22.5;\nwall = 2;\n\n// Bottle module\nmodule bottle() {\n    difference() {\n        union() {\n            // Main body\n            body();\n\n            // Shoulder transition\n            shoulder();\n\n            // Neck\n            neck();\n\n            // Base\n            base();\n        }\n        // Hollow interior\n        translate([0,0,wall])\n            scale([1,1,0.96])\n                body();\n        translate([0,0,wall])\n            scale([0.8,0.8,0.85])\n                shoulder();\n        translate([0,0,wall])\n            scale([0.55,0.55,0.8])\n                neck();\n    }\n\n    // Threads for cap\n    threads();\n}\n\n// Main cylindrical body\nmodule body() {\n    cylinder(h = H_total*0.65, r1 = R_body, r2 = R_body*0.9);\n}\n\n// Curved shoulder\nmodule shoulder() {\n    translate([0,0,H_total*0.65])\n        cylinder(h = H_total*0.15, r1 = R_body*0.9, r2 = R_body*0.6);\n}\n\n// Neck with lip\nmodule neck() {\n    translate([0,0,H_total*0.8])\n        union() {\n            cylinder(h = H_total*0.15, r1 = R_body*0.6, r2 = R_body*0.45);\n            // Lip ring\n            translate([0,0,H_total*0.15])\n                cylinder(h = 2, r1 = R_body*0.48, r2 = R_body*0.48);\n        }\n}\n\n// Reinforced base\nmodule base() {\n    difference() {\n        cylinder(h = 3, r1 = R_body+0.5, r2 = R_body+0.5);\n        for(i=[0:5:360])\n            rotate([0,0,i])\n                translate([R_body-1, -1, 0])\n                    cube([2, 2, 3]);\n    }\n}\n\n// External screw threads for cap\nmodule threads() {\n    for(z=[0:2.5:15])\n        translate([0,0,H_total*0.95 + z])\n            rotate_extrude()\n                translate([R_body*0.45, 0, 0])\n                    square([1.5, 2]);\n}\n\n// Generate bottle\nbottle();",
    "renders": true
  },
  {
    "household_item": "jug",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Jug\n// Overall height ≈ 85 mm, max Ø ≈ 60 mm, wall ≈ 1.5 mm\n\nwall = 1.5;        // wall thickness\nbase_r = 30;       // base radius\nbody_h = 55;       // main body height\nneck_r = 12;       // neck radius\nspout_l = 25;      // spout length\nhandle_clear = 15; // handle clearance\n\nmodule jug() {\n    difference() {\n        // ---------- Outer shell ----------\n        union() {\n            // Base\n            cylinder(h = 5, r1 = base_r, r2 = base_r, $fn = 60);\n\n            // Bulging body\n            translate([0, 0, 2.5])\n                cylinder(h = body_h, r1 = base_r, r2 = base_r * 0.9, $fn = 60);\n\n            // Neck cylinder\n            translate([0, 0, 2.5 + body_h])\n                cylinder(h = 15, r1 = neck_r + 2, r2 = neck_r, $fn = 60);\n\n            // Spout\n            translate([neck_r, 0, 2.5 + body_h + 15])\n                rotate([0, 75, 0])\n                    cylinder(h = spout_l, r1 = 5, r2 = 3, $fn = 30);\n\n            // Handle arch\n            translate([-base_r - 3, 0, 20])\n                rotate([90, 0, 0])\n                    difference() {\n                        rotate_extrude($fn = 60)\n                            translate([handle_clear, 0, 0])\n                                square([wall, 30]);\n                        // Finger groove\n                        translate([handle_clear + wall/2, 0, 10])\n                            rotate([90, 0, 0])\n                                cylinder(h = wall + 1, r = 4, $fn = 20);\n                    }\n        }\n\n        // ---------- Inner cavity ----------\n        translate([0, 0, wall])\n            cylinder(h = 100, r1 = base_r - wall, r2 = neck_r - wall, $fn = 60);\n\n        // Spout hollow\n        translate([neck_r, 0, 2.5 + body_h + 15])\n            rotate([0, 75, 0])\n                cylinder(h = spout_l + 2, r1 = 5 - wall, r2 = 3 - wall, $fn = 30);\n\n        // Drain hole through handle\n        translate([-base_r - 3 - wall, 0, 20 + 15])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = wall, $fn = 20);\n    }\n}\n\njug();",
    "renders": true
  },
  {
    "household_item": "pitcher",
    "openscad_code": "// Realistic medium-complexity pitcher for 3D printing\n// Approx 90 mm tall, 60 mm wide (printable size)\n\n$fn = 36;\n\n// Main body parameters\nbody_h = 75;\nbody_r_bottom = 25;\nbody_r_top = 30;\nwall_th = 2;\n\n// Spout parameters\nspout_len = 35;\nspout_r = 8;\nspout_wall = 2;\n\n// Handle parameters\nhandle_r = 5;\nhandle_clearance = 15;\n\n// Pitcher assembly\nmodule pitcher() {\n    difference() {\n        union() {\n            // Main hollow body\n            difference() {\n                // Outer body\n                cylinder(h = body_h, r1 = body_r_bottom, r2 = body_r_top, center = false);\n                \n                // Inner cavity\n                translate([0, 0, wall_th])\n                cylinder(h = body_h + 1, r1 = body_r_bottom - wall_th, r2 = body_r_top - wall_th, center = false);\n            }\n            \n            // Bottom base\n            translate([0, 0, -2])\n            cylinder(h = 4, r1 = body_r_bottom + 3, r2 = body_r_bottom, center = false);\n            \n            // Spout outer\n            translate([0, body_r_top, body_h - 15])\n            rotate([90, 0, 0])\n            rotate_extrude(angle = 90, convexity = 10)\n            translate([spout_r, 0, 0])\n            circle(r = spout_r);\n            \n            // Handle outer\n            translate([body_r_top - 2, 0, body_h/2])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180, convexity = 10)\n            translate([handle_r + handle_clearance, 0, 0])\n            circle(r = handle_r);\n        }\n        \n        // Remove spout inner\n        translate([0, body_r_top - spout_wall, body_h - 15])\n        rotate([90, 0, 0])\n        rotate_extrude(angle = 90, convexity = 10)\n        translate([spout_r - spout_wall, 0, 0])\n        circle(r = spout_r - spout_wall);\n        \n        // Remove handle inner\n        translate([body_r_top - 2, 0, body_h/2])\n        rotate([0, 90, 0])\n    rotate_extrude(angle = 180, convexity = 10)\n    translate([handle_clearance, 0, 0])\n    circle(r = handle_r - wall_th);\n        \n        // Top rim rounding\n        translate([0, 0, body_h - 5])\n        cylinder(h = 6, r1 = body_r_top - wall_th, r2 = body_r_top - wall_th - 1, center = false);\n    }\n    \n    // Add rim lip\n    translate([0, 0, body_h - 1])\n    cylinder(h = 2, r1 = body_r_top + 1, r2 = body_r_top + 1, center = false);\n}\n\n// Render the pitcher\npitcher();",
    "renders": true
  },
  {
    "household_item": "thermos",
    "openscad_code": "// Realistic Thermos - Medium Complexity\n// Approx 80mm tall, 3D printable with no overhangs\n\n$fn = 36;  // Smooth curves for printing\nwall_thickness = 1.5;\n\nmodule thermos_body() {\n    // Main outer shell\n    difference() {\n        cylinder(h = 65, d = 45, center = false);  // Outer body\n        translate([0, 0, -1])\n            cylinder(h = 67, d = 42, center = false);  // Hollow inside\n    }\n    \n    // Bottom base - slightly wider for stability\n    translate([0, 0, -3])\n        cylinder(h = 4, d = 48, center = false);\n}\n\nmodule thermos_lid() {\n    // Lid top dome\n    difference() {\n        translate([0, 0, 65])\n            scale([1, 1, 0.7])\n                sphere(d = 45);  // Rounded top\n        \n        translate([0, 0, 65])\n            scale([1, 1, 0.7])\n                sphere(d = 42);  // Hollow inside\n    }\n    \n    // Lid threading collar\n    translate([0, 0, 62])\n        cylinder(h = 5, d = 42.5, center = false);\n    \n    // Handle attachment points\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle])\n            translate([22, 0, 68])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 3, center = false);\n    }\n}\n\nmodule handle() {\n    // Curved handle\n    for (i = [0:6]) {\n        rotate([0, 0, i * 30 - 90])\n            translate([24, 0, 68 + i * 0.8])\n                sphere(d = 3.5);\n    }\n    \n    // Handle bottom curve\n    translate([24, 0, 68])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 3.5, center = false);\n    \n    translate([-24, 0, 68])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 3.5, center = false);\n    \n    // Handle bar\n    translate([0, 0, 52.5])\n        rotate([90, 0, 0])\n            cylinder(h = 48, d = 3.5, center = true);\n}\n\nmodule decorative_band() {\n    // Top band with grooves\n    translate([0, 0, 62])\n        cylinder(h = 2, d = 46, center = false);\n    \n    // Grooves\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([22.5, 0, 62.5])\n                cube([1, 1, 2], center = true);\n    }\n    \n    // Bottom band\n    translate([0, 0, 3])\n        cylinder(h = 2, d = 46, center = false);\n}\n\n// Assembly\nunion() {\n    thermos_body();\n    thermos_lid();\n    handle();\n    decorative_band();\n}",
    "renders": true
  },
  {
    "household_item": "trivet",
    "openscad_code": "// Realistic Medium-Complexity Trivet\n// Dimensions: 80 mm diameter, 5 mm thick base, 6 mm tall feet\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\ntrivet_d = 80;  // mm\nbase_thick = 5;\nfoot_h = 6;\nfoot_r = 3;\nrib_w = 4;\nrib_h = 4;\n\n// Central circular base\nmodule base_disc() {\n    cylinder(h = base_thick, r = trivet_d/2 - foot_r, center = true);\n}\n\n// Radial ribs for heat dissipation\nmodule ribs() {\n    n = 8;  // number of ribs\n    for(i = [0 : n-1]) {\n        angle = i * 360/n;\n        rotate([0, 0, angle])\n            translate([0, trivet_d/4, 0])\n                cube([rib_w, trivet_d/2, rib_h], center = true);\n    }\n}\n\n// Circular outer ring for stability\nmodule outer_ring() {\n    difference() {\n        cylinder(h = rib_h, r = trivet_d/2 - foot_r/2, center = true);\n        cylinder(h = rib_h + 0.1, r = trivet_d/2 - foot_r/2 - rib_w, center = true);\n    }\n}\n\n// Feet to lift trivet above table\nmodule feet() {\n    n = 5;  // number of feet\n    foot_dist = trivet_d/2 - foot_r*2;\n    for(i = [0 : n-1]) {\n        angle = i * 360/n;\n        rotate([0, 0, angle])\n            translate([foot_dist, 0, -(base_thick/2 + foot_h/2)])\n                cylinder(h = foot_h, r = foot_r, center = true);\n    }\n}\n\n// Ventilation holes through base\nmodule vents() {\n    n = 6;  // number of vents\n    vent_r = 5;\n    vent_dist = trivet_d/3;\n    for(i = [0 : n-1]) {\n        angle = i * 360/n + 30;\n        rotate([0, 0, angle])\n            translate([vent_dist, 0, 0])\n                cylinder(h = base_thick + 0.2, r = vent_r, center = true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        base_disc();\n        \n        translate([0, 0, base_thick/2 + rib_h/2])\n            union() {\n                ribs();\n                outer_ring();\n            }\n        \n        feet();\n    }\n    \n    // Cut vents from base\n    vents();\n}",
    "renders": true
  },
  {
    "household_item": "placemat",
    "openscad_code": "// Realistic 3D-printable placemat\n// Size: 80 x 60 mm, 2 mm thick\n// Features: raised edge, drainage grooves, subtle texture\n\n$fn = 32;\n\n// Main parameters\nmat_w = 80;\nmat_h = 60;\nmat_thick = 2;\nedge_h = 1.5;\ngroove_depth = 0.4;\n\n// Base plate\ndifference() {\n    // Solid base\n    cube([mat_w, mat_h, mat_thick], center = false);\n    \n    // Drainage grooves\n    translate([0, 10, mat_thick - groove_depth]) {\n        for (y = [10 : 10 : mat_h - 20]) {\n            translate([5, y, 0])\n                cube([mat_w - 10, 1, groove_depth + 0.02]);\n        }\n    }\n}\n\n// Raised outer edge\nmodule edge() {\n    difference() {\n        // Outer rim\n        translate([0, 0, mat_thick])\n            cube([mat_w, mat_h, edge_h], center = false);\n        \n        // Cut out inner area\n        translate([2, 2, 0])\n            cube([mat_w - 4, mat_h - 4, edge_h + mat_thick], center = false);\n    }\n}\nedge();\n\n// Subtle texture dots in center area\nmodule texture_dot(x, y) {\n    translate([x, y, mat_thick])\n        sphere(d = 0.8, $fn = 12);\n}\n\n// Generate texture grid\nfor (x = [5 : 4 : mat_w - 5]) {\n    for (y = [5 : 4 : mat_h - 5]) {\n        texture_dot(x, y);\n    }\n}\n\n// Corner reinforcements\nmodule corner(x, y) {\n    translate([x, y, 0])\n        cylinder(h = mat_thick + edge_h, r = 3, $fn = 16);\n}\n\ncorners = [\n    [3, 3],\n    [mat_w - 3, 3],\n    [3, mat_h - 3],\n    [mat_w - 3, mat_h - 3]\n];\n\nfor (pos = corners) {\n    corner(pos[0], pos[1]);\n}",
    "renders": true
  },
  {
    "household_item": "napkin",
    "openscad_code": "// Realistic 3D printable napkin\n// Dimensions: ~70 mm square unfolded, 30 mm thick when folded\n// Wall thickness: 1.2 mm for printability\n\n// Napkin parameters\nnapkin_size = 70;           // Square napkin size in mm\nfold_count = 4;             // Number of folded layers\nthickness = 0.3;            // Single layer thickness in mm\ncrease_depth = 0.5;         // Depth of fold creases\n\n// Module for single napkin layer with texture\nmodule napkin_layer(size, thick) {\n    difference() {\n        // Base layer\n        cube([size, size, thick], center=true);\n        \n        // Subtle surface texture - small random depressions\n        for (x = [-size/2+5 : 5 : size/2-5]) {\n            for (y = [-size/2+5 : 5 : size/2-5]) {\n                translate([x, y, thick/2-0.1]) {\n                    sphere(thick/2);\n                }\n            }\n        }\n    }\n}\n\n// Module for creating fold creases\nmodule fold_crease(length, depth, width) {\n    color(\"gray\") {\n        translate([0, 0, -depth/2]) {\n            cube([length, width, depth], center=true);\n        }\n    }\n}\n\n// Module for folded corner detail\nmodule folded_corner(offset) {\n    difference() {\n        // Main folded part\n        translate([offset, offset, 0]) {\n            rotate([0, 0, 45]) {\n                cube([napkin_size/3, napkin_size/3, thickness*fold_count], center=true);\n            }\n        }\n        \n        // Remove overlap\n        translate([0, 0, -thickness*fold_count]) {\n            cube([napkin_size*2, napkin_size*2, thickness*fold_count*2], center=true);\n        }\n    }\n}\n\n// Main napkin assembly\nunion() {\n    // Base folded layers\n    for (i = [0 : fold_count-1]) {\n        translate([0, 0, i*thickness]) {\n            scale([1 - i*0.1, 1 - i*0.1, 1]) {\n                napkin_layer(napkin_size - i*5, thickness);\n            }\n        }\n    }\n    \n    // Diagonal fold lines\n    rotate([0, 0, 45]) {\n        fold_crease(napkin_size*1.2, crease_depth, 0.5);\n    }\n    rotate([0, 0, -45]) {\n        fold_crease(napkin_size*1.2, crease_depth, 0.5);\n    }\n    \n    // Horizontal and vertical creases\n    fold_crease(napkin_size, crease_depth, 0.5);\n    rotate([0, 0, 90]) {\n        fold_crease(napkin_size, crease_depth, 0.5);\n    }\n    \n    // Folded corners showing layering\n    folded_corner(napkin_size/3);\n    mirror([1, 0, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    mirror([0, 1, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    mirror([1, 1, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    \n    // Center detail - slightly raised\n    translate([0, 0, fold_count*thickness]) {\n        difference() {\n            cylinder(h=thickness, r=8, $fn=32);\n            cylinder(h=thickness+0.1, r=6, $fn=32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "towel",
    "openscad_code": "// Realistic Towel - Medium Complexity\n// Dimensions: 60mm x 40mm x 5mm\n\n// Parameters\ntowel_length = 60;\ntowel_width = 40;\ntowel_thickness = 5;\nfold_height = 2;\nterry_bump_size = 0.8;\nterry_spacing = 2;\nterry_rows = 20;\nterry_cols = 30;\nborder_width = 3;\nfringe_length = 6;\nfringe_thickness = 0.5;\n\n// Main towel body with rounded edges\nmodule towel_body() {\n    // Base towel shape with rounded edges\n    difference() {\n        // Main rectangular towel\n        union() {\n            // Central body\n            translate([0, 0, towel_thickness/2])\n                cube([towel_length - border_width*2, towel_width - border_width*2, towel_thickness], center=true);\n            \n            // Rounded borders\n            translate([0, 0, towel_thickness/2 - 0.1])\n                cube([towel_length - 1, towel_width - 1, towel_thickness + 0.2], center=true);\n        }\n        \n        // Rounded corners\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                translate([i*(towel_length/2 - border_width), j*(towel_width/2 - border_width), 0])\n                    cylinder(h=towel_thickness + 2, r=border_width - 0.5, center=true);\n            }\n        }\n    }\n}\n\n// Terry cloth texture\nmodule terry_texture() {\n    // Create grid of small bumps for terry cloth\n    for (i = [0:terry_rows-1]) {\n        for (j = [0:terry_cols-1]) {\n            x_pos = (i - terry_rows/2) * terry_spacing + terry_spacing/2;\n            y_pos = (j - terry_cols/2) * terry_spacing + terry_spacing/2;\n            \n            if (abs(x_pos) < towel_length/2 - border_width - 1 && \n                abs(y_pos) < towel_width/2 - border_width - 1) {\n                \n                translate([x_pos, y_pos, towel_thickness + terry_bump_size/2])\n                    sphere(d=terry_bump_size, $fn=8);\n            }\n        }\n    }\n}\n\n// Fold lines\nmodule fold_lines() {\n    // Two horizontal fold lines\n    for (fold = [-1, 1]) {\n        translate([0, fold * towel_width/6, towel_thickness/2])\n            cube([towel_length - border_width*2, fold_height, towel_thickness + 0.1], center=true);\n    }\n}\n\n// Fringe on short edges\nmodule fringe() {\n    for (side = [-1, 1]) {\n        for (i = [0:12]) {\n            x_pos = side * (towel_length/2 - 1);\n            y_pos = (i - 6) * 3;\n            \n            if (abs(y_pos) < towel_width/2 - 1) {\n                // Individual fringe strand\n                translate([x_pos, y_pos, towel_thickness/2 - fringe_length/2])\n                    rotate([0, 90, 0])\n                        cylinder(h=fringe_length, d=fringe_thickness, $fn=6);\n            }\n        }\n    }\n}\n\n// Hanging loop\nmodule hanging_loop() {\n    translate([0, towel_width/2, towel_thickness + 2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r=3, $fn=20);\n                cylinder(h=9, r=2, $fn=20);\n            }\n}\n\n// Assemble the towel\nunion() {\n    // Main towel body\n    towel_body();\n    \n    // Terry texture on top\n    terry_texture();\n    \n    // Fold lines\n    fold_lines();\n    \n    // Fringe on both ends\n    fringe();\n    \n    // Hanging loop\n    hanging_loop();\n}",
    "renders": true
  },
  {
    "household_item": "cloth",
    "openscad_code": "// Realistic Cloth for 3D Printing\n// A folded towel-like cloth with visible thickness and subtle wrinkles\n\n$fn = 32;               // Smooth curves\ncloth_thickness = 1.2;  // Minimum printable wall thickness\ncloth_length = 70;      // Overall length\ncloth_width = 40;       // Overall width\nfold_count = 3;         // Number of visible folds\n\n// Main folded cloth\nmodule folded_cloth() {\n    difference() {\n        // Base folded shape\n        union() {\n            // Main body with gentle curves\n            for (i = [0 : fold_count - 1]) {\n                translate([0, i * (cloth_width / fold_count), 0])\n                    rotate([0, 0, sin(i * 30) * 5])  // Slight rotation for natural fold\n                        body_section(i);\n            }\n            \n            // Thicken edges\n            edge_strips();\n        }\n        \n        // Remove inner void to create hollow shell\n        hollow_interior();\n    }\n    \n    // Surface wrinkles\n    surface_wrinkles();\n}\n\n// Individual body section with thickness\nmodule body_section(index) {\n    height = 0.5 + sin(index * 45) * 0.3;  // Varying height for realism\n    \n    // Main curved surface\n    hull() {\n        translate([-cloth_length/2, 0, 0])\n            rounded_cube([cloth_length, cloth_width/fold_count - 1, height + cloth_thickness]);\n            \n        translate([-cloth_length/2 + 5, cloth_width/fold_count - 2, height + 0.5])\n            sphere(d = 2);\n            \n        translate([cloth_length/2 - 5, 1, height + 0.3])\n            sphere(d = 1.5);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size) {\n    hull() {\n        for (x = [0, size[0]])\n            for (y = [0, size[1]])\n                for (z = [0, size[2]])\n                    translate([x, y, z])\n                        sphere(d = cloth_thickness);\n    }\n}\n\n// Edge strips for thickness\nmodule edge_strips() {\n    // Long edges\n    for (side = [-1, 1]) {\n        translate([0, side * cloth_width/2, cloth_thickness/2])\n            cube([cloth_length, cloth_thickness, cloth_thickness], center = true);\n    }\n    \n    // Short edges\n    for (end = [-1, 1]) {\n        translate([end * cloth_length/2, 0, cloth_thickness/2])\n            cube([cloth_thickness, cloth_width, cloth_thickness], center = true);\n    }\n}\n\n// Hollow interior for material saving\nmodule hollow_interior() {\n    translate([0, 0, -0.1])\n        cube([cloth_length - cloth_thickness*2, cloth_width - cloth_thickness*2, cloth_thickness + 0.2], center = true);\n}\n\n// Surface wrinkle details\nmodule surface_wrinkles() {\n    wrinkle_spacing = 8;\n    wrinkle_depth = 0.3;\n    \n    // Horizontal wrinkles\n    for (y = [-cloth_width/2 + 5 : wrinkle_spacing : cloth_width/2 - 5]) {\n        for (x = [-cloth_length/2 + 3 : wrinkle_spacing : cloth_length/2 - 3]) {\n            translate([x, y, cloth_thickness + 0.1])\n                rotate([90, 0, 0])\n                    cylinder(h = wrinkle_depth, d1 = 1, d2 = 0.5);\n        }\n    }\n    \n    // Vertical wrinkles\n    for (x = [-cloth_length/2 + 5 : wrinkle_spacing : cloth_length/2 - 5]) {\n        translate([x, 0, cloth_thickness + 0.1])\n            rotate([0, 90, 0])\n                cylinder(h = wrinkle_depth, d1 = 1.2, d2 = 0.6);\n    }\n}\n\n// Render the complete cloth\nfolded_cloth();",
    "renders": true
  },
  {
    "household_item": "sponge",
    "openscad_code": "// Realistic 3D-printable sponge\n// Medium complexity – recognizable pores, chamfered edges, printable walls\n\n// Overall dimensions\nsponge_w = 90;   // mm\nsponge_d = 60;   // mm\nsponge_h = 30;   // mm\nwall = 1.6;      // printable wall thickness (mm)\n\n// Pore parameters\npore_r = 2.2;           // radius of each pore\npore_pitch = 5;         // center-to-center spacing\nedge_chamfer = 3;       // chamfer on top edges\n\n// Create one chamfered block with pores\nmodule chamfered_block(size=[sponge_w, sponge_d, sponge_h]){\n    difference(){\n        // Main block with chamfered top edges\n        union(){\n            // Lower solid block\n            translate([0,0,edge_chamfer])\n                cube([size.x, size.y, size.z - edge_chamfer], center=true);\n\n            // Chamfer slopes on top\n            for(dx=[-1,1]){\n                for(dy=[-1,1]){\n                    mirror([dx,0,0])\n                        mirror([0,dy,0])\n                            polyhedron(\n                                points=[\n                                    [size.x/2, size.y/2, size.z/2],\n                                    [size.x/2, -size.y/2, size.z/2],\n                                    [size.x/2 - edge_chamfer, size.y/2, size.z/2 - edge_chamfer],\n                                    [size.x/2 - edge_chamfer, -size.y/2, size.z/2 - edge_chamfer]\n                                ],\n                                faces=[[0,1,3,2]]\n                            );\n                }\n            }\n        }\n\n        // Pore pattern\n        for(x=[-size.x/2 + pore_pitch/2 : pore_pitch : size.x/2 - pore_pitch/2]){\n            for(y=[-size.y/2 + pore_pitch/2 : pore_pitch : size.y/2 - pore_pitch/2]){\n                for(z=[-size.z/2 + pore_pitch/2 : pore_pitch : size.z/2 - pore_pitch/2]){\n                    // Skip pores too close to outer shell to keep walls printable\n                    if(abs(x) < size.x/2 - pore_r - wall &&\n                       abs(y) < size.y/2 - pore_r - wall &&\n                       abs(z) < size.z/2 - pore_r - wall){\n                        translate([x,y,z])\n                            sphere(r=pore_r, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the final sponge\nchamfered_block([sponge_w, sponge_d, sponge_h]);",
    "renders": true
  },
  {
    "household_item": "brush",
    "openscad_code": "// Realistic 3D Printable Brush – Medium Complexity\n\n// Brush parameters\nbrush_len = 90;          // overall length\nhandle_len = 55;\nhandle_dia = 12;\nferrule_len = 15;\nferrule_dia = 14;\nbristle_len = 20;\nbristle_base_dia = 12;\nbristle_tip_dia = 2;\nbristle_count = 49;      // 7×7 grid\nwall = 1.2;              // 3D-printable wall thickness\n\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h = handle_len, d1 = handle_dia, d2 = handle_dia*0.9, $fn = 32);\n        // Ergonomic finger grooves\n        for (i = [1:4])\n            translate([0, 0, handle_len/5*i])\n                rotate([0,90,0])\n                    scale([0.9, 0.9, 1])\n                        cylinder(h = handle_dia+0.2, d = handle_dia*0.3, $fn = 24);\n    }\n    // Hanging hole\n    translate([0, 0, handle_len-5])\n        rotate([90,0,0])\n            cylinder(h = 10, d = 4, $fn = 20);\n}\n\nmodule ferrule() {\n    color(\"silver\")\n    difference() {\n        // Cylindrical ferrule\n        cylinder(h = ferrule_len, d = ferrule_dia, $fn = 32);\n        // Taper inside to grip bristles\n        cylinder(h = ferrule_len, d1 = bristle_base_dia+0.5, d2 = ferrule_dia-1, $fn = 32);\n    }\n}\n\nmodule bristles() {\n    color(\"beige\")\n    // Grid of tapered bristle strands\n    for (dx = [-3:3])\n        for (dy = [-3:3])\n            translate([dx*2, dy*2, 0])\n                cylinder(h = bristle_len, d1 = bristle_base_dia/7, d2 = bristle_tip_dia/7, $fn = 8);\n    // Optional dome trim\n    translate([0,0,bristle_len-2])\n        sphere(d = bristle_base_dia*0.8, $fn = 32);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, 0, handle_len])\n    ferrule();\n\ntranslate([0, 0, handle_len + ferrule_len])\n    bristles();",
    "renders": true
  },
  {
    "household_item": "detergent",
    "openscad_code": "// Realistic detergent bottle with handle, cap, and embossed label\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nbottle_height = 80;\nbottle_width = 45;\nbottle_depth = 30;\nwall_thickness = 2;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main rounded rectangular body\n        union() {\n            // Central body with rounded edges\n            minkowski() {\n                cube([bottle_width, bottle_depth, bottle_height - 10], center = true);\n                sphere(5);\n            }\n            \n            // Tapered top\n            translate([0, 0, bottle_height/2 - 5])\n            scale([0.8, 0.8, 1])\n            cylinder(h = 15, r1 = bottle_width/2, r2 = bottle_width/3, center = true);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([bottle_width - 2*wall_thickness, bottle_depth - 2*wall_thickness, bottle_height - 12], center = true);\n            sphere(3);\n        }\n    }\n}\n\n// Handle on back\nmodule handle() {\n    translate([bottle_width/2 + 5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Handle grip\n        torus(ro = 15, ri = 4);\n        \n        // Cut for hand\n        translate([0, 0, -15])\n        cube([20, 20, 30], center = true);\n    }\n}\n\n// Screw cap\nmodule cap() {\n    translate([0, 0, bottle_height/2 + 12])\n    difference() {\n        // Cap body\n        cylinder(h = 15, r = bottle_width/3 + 3, center = true);\n        \n        // Grip ridges\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([bottle_width/3 + 1, 0, 0])\n            cube([3, 1, 15], center = true);\n        }\n        \n        // Thread hole\n        cylinder(h = 20, r = bottle_width/3 - 2, center = true);\n    }\n}\n\n// Embossed label area\nmodule label() {\n    translate([0, bottle_depth/2 + 1, -10])\n    scale([0.9, 0.1, 0.6])\n    cube([bottle_width - 10, 1, bottle_height - 20], center = true);\n}\n\n// Pour spout\nmodule spout() {\n    translate([0, 0, bottle_height/2 + 5])\n    cylinder(h = 10, r1 = bottle_width/3, r2 = bottle_width/3 - 1, center = true);\n}\n\n// Torus helper for handle\nmodule torus(ro, ri) {\n    rotate_extrude()\n    translate([ro, 0, 0])\n    circle(r = ri);\n}\n\n// Assembly\nunion() {\n    bottle_body();\n    handle();\n    spout();\n    cap();\n    label();\n}",
    "renders": true
  },
  {
    "household_item": "soap",
    "openscad_code": "// Realistic bar-of-soap model, medium complexity\n// Overall dimensions ≈ 80 × 55 × 22 mm\n\n// Basic parameters\nlength = 80;\nwidth  = 55;\nheight = 22;\ncorner_r = 8;     // radius of rounded corners\nedge_r   = 1.2;   // small edge fillet\nengr_depth = 0.6; // depth of soap text\ngroove_w = 1.2;   // anti-slip grooves\n\n// Main bar body with rounded edges\nmodule soap_body() {\n    // Core rounded block\n    minkowski() {\n        cube([length-2*corner_r, width-2*corner_r, height-2*corner_r], center=true);\n        sphere(r=corner_r);\n    }\n    \n    // Top & bottom edge fillets\n    difference() {\n        children();\n        translate([0,0, height/2-edge_r]) \n            cube([length+2, width+2, 2*edge_r], center=true);\n        translate([0,0,-height/2+edge_r]) \n            cube([length+2, width+2, 2*edge_r], center=true);\n    }\n}\n\n// Engraved word “SOAP” on top face\nmodule soap_text() {\n    font_h = 6;          // letter height\n    font_t = engr_depth; // extrude depth\n    spacing = 22;        // letter spacing\n\n    linear_extrude(height=font_t, convexity=4) {\n        translate([-(3*spacing)/2, -font_h/2, 0])\n            text(\"S\", size=font_h, font=\"Arial:style=Bold\");\n        translate([-(1*spacing)/2, -font_h/2, 0])\n            text(\"O\", size=font_h, font=\"Arial:style=Bold\");\n        translate([+(1*spacing)/2, -font_h/2, 0])\n            text(\"A\", size=font_h, font=\"Arial:style=Bold\");\n        translate([+(3*spacing)/2, -font_h/2, 0])\n            text(\"P\", size=font_h, font=\"Arial:style=Bold\");\n    }\n}\n\n// Anti-slip grooves on bottom face\nmodule bottom_grooves() {\n    groove_len = length - 12;\n    groove_h   = 0.8;\n    groove_sep = 4;\n\n    for (i=[-5:1:5]) {\n        translate([0, i*groove_sep, -height/2 + groove_h/2])\n            cube([groove_len, groove_w, groove_h], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    soap_body() {\n        children();\n    }\n\n    // Engrave text on top\n    difference() {\n        soap_body();\n        translate([0, 0, height/2 - engr_depth/2 - 1])\n            soap_text();\n    }\n    \n    // Add grooves to bottom\n    translate([0,0,0])\n        bottom_grooves();\n}\n\n// Optional support standoffs for easier printing\nsupport_r = 3;\nsupport_h = 1;\ntranslate([ length/2 - support_r - 4,  width/2 - support_r - 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([-length/2 + support_r + 4,  width/2 - support_r - 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([ length/2 - support_r - 4, -width/2 + support_r + 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([-length/2 + support_r + 4, -width/2 + support_r + 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);",
    "renders": true
  },
  {
    "household_item": "trashcan",
    "openscad_code": "// Realistic 3D printable trashcan (medium complexity)\n// Approx. 70 mm tall, 60 mm diameter\n// Wall thickness: 2 mm\n\n// Main body module\nmodule trashcan_body() {\n    difference() {\n        // Outer cylinder with slight taper\n        cylinder(h1 = 60, r1 = 30, r2 = 28, h = 60, $fn = 64);\n        \n        // Hollow out interior\n        translate([0, 0, 2])\n            cylinder(h1 = 58, r1 = 28, r2 = 26, h = 58, $fn = 64);\n    }\n}\n\n// Reinforcement ring at top\nmodule top_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 4, r = 30.5, $fn = 64);\n        \n        // Inner cutout\n        cylinder(h = 4, r = 28.5, $fn = 64);\n    }\n}\n\n// Base with slight lip\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(h = 3, r = 31, $fn = 64);\n        \n        // Recessed bottom\n        translate([0, 0, 1])\n            cylinder(h = 2, r = 29, $fn = 64);\n    }\n}\n\n// Pedal mechanism\nmodule pedal() {\n    // Pedal arm\n    translate([-20, 0, 3])\n        rotate([0, -20, 0])\n        cube([25, 12, 3], center = true);\n    \n    // Pivot bracket\n    translate([-8, 0, 3])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r = 3, $fn = 16);\n    \n    // Support ribs under pedal\n    for(i = [-1, 1]) {\n        translate([-15, 6 * i, 1.5])\n            rotate([0, -20, 0])\n            cube([10, 1, 2], center = true);\n    }\n}\n\n// Handle indentations for grip\nmodule handles() {\n    for(angle = [120, 240]) {\n        rotate([0, 0, angle])\n        translate([28, 0, 45])\n            rotate([0, 90, 0])\n            cylinder(h = 10, r1 = 5, r2 = 3, $fn = 16);\n    }\n}\n\n// Ventilation holes\nmodule vents() {\n    for(h = [15, 25, 35]) {\n        rotate([0, 0, 0])\n        translate([0, 29, h])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 1.5, $fn = 16);\n    }\n    \n    // Additional vents rotated\n    for(h = [20, 30]) {\n        rotate([0, 0, 180])\n        translate([0, 29, h])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 1.5, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    trashcan_body();\n    \n    // Add top ring\n    translate([0, 0, 59])\n        top_ring();\n    \n    // Add base\n    base();\n    \n    // Add pedal (only on one side)\n    pedal();\n    \n    // Add handle indents\n    difference() {\n        trashcan_body();\n        handles();\n    }\n    \n    // Add ventilation holes\n    difference() {\n        trashcan_body();\n        vents();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "recyclebin",
    "openscad_code": "// Realistic medium-complexity recycle bin\n// Dimensions in mm, printable without supports\n\nbin_w = 80;\nbin_d = 65;\nbin_h = 100;\nwall_t = 2.5;\nbottom_t = 3;\n\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,0])\n                cube([bin_w, bin_d, bottom_t], center=true);\n            translate([0,0,bin_h/2])\n                cube([bin_w*0.85, bin_d*0.85, bin_h], center=true);\n        }\n\n        // Inner cavity\n        translate([0,0,-bottom_t/2+0.5])\n            hull() {\n                translate([0,0,0])\n                    cube([bin_w-wall_t*2, bin_d-wall_t*2, bottom_t], center=true);\n                translate([0,0,bin_h/2])\n                    cube([bin_w*0.85-wall_t*2, bin_d*0.85-wall_t*2, bin_h+1], center=true);\n            }\n    }\n}\n\nmodule rim() {\n    // Top rim reinforcement\n    difference() {\n        hull() {\n            translate([0,0,bin_h-1])\n                cube([bin_w*0.85+4, bin_d*0.85+4, 3], center=true);\n            translate([0,0,bin_h+1])\n                cube([bin_w*0.85+2, bin_d*0.85+2, 2], center=true);\n        }\n        \n        // Remove inner part\n        translate([0,0,bin_h-2])\n            cube([bin_w*0.85-wall_t*2+2, bin_d*0.85-wall_t*2+2, 6], center=true);\n    }\n}\n\nmodule handles() {\n    // Side handles\n    for(side = [-1, 1]) {\n        translate([side*(bin_w*0.85)/2, 0, bin_h*0.6]) {\n            rotate([0,90,0]) {\n                difference() {\n                    cylinder(h=15, r=5, center=true);\n                    cylinder(h=16, r=3.5, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule recycle_symbol() {\n    // Recycle symbol on front\n    translate([0, -bin_d*0.85/2 - 0.5, bin_h*0.7])\n    rotate([90,0,0]) {\n        linear_extrude(height=1.5) {\n            // Three chasing arrows\n            for(i=[0:2]) {\n                rotate([0,0,i*120])\n                    translate([0,10,0])\n                        circle(r=6);\n                rotate([0,0,i*120])\n                    translate([0,10,0])\n                        translate([0,6,0])\n                            square([2,6], center=true);\n            }\n            \n            // Remove center\n            circle(r=5);\n        }\n    }\n}\n\nmodule base_reinforcement() {\n    // Bottom ribs for strength\n    for(x=[-30:15:30]) {\n        translate([x, 0, bottom_t/2])\n            cube([3, bin_d-10, bottom_t+1], center=true);\n    }\n    for(y=[-25:15:25]) {\n        translate([0, y, bottom_t/2])\n            cube([bin_w-10, 3, bottom_t+1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    rim();\n    handles();\n    recycle_symbol();\n    base_reinforcement();\n}",
    "renders": true
  },
  {
    "household_item": "compostbin",
    "openscad_code": "// Realistic 3D-printable compost bin – medium complexity\n// Outer dimensions ≈ 60 mm (L) × 50 mm (W) × 70 mm (H)\n\nmodule main_body() {\n    difference() {\n        // Main container walls (2 mm thick)\n        cube([60, 50, 70], center = true);\n\n        // Hollow out the inside\n        translate([0, 0, 2])  // shift slightly to keep floor thickness\n            cube([56, 46, 68], center = true);\n    }\n}\n\nmodule ventilation_holes() {\n    // Rows of 5 mm ventilation holes on side walls\n    for (y = [-20, -10, 0, 10, 20])\n        for (z = [-25, -15, -5, 5, 15, 25])\n            translate([31, y, z])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d = 5, $fn = 12);\n}\n\nmodule lid() {\n    difference() {\n        // Lid plate 3 mm thick\n        translate([0, 0, 36])\n            cube([62, 52, 3], center = true);\n\n        // Handle cutout\n        translate([0, 0, 38])\n            cube([40, 10, 6], center = true);\n    }\n\n    // Handle\n    translate([0, 0, 42])\n        cylinder(h = 8, d1 = 12, d2 = 12, center = true);\n}\n\nmodule hatch() {\n    difference() {\n        // Small door on front\n        translate([0, -26, -15])\n            cube([30, 2, 20], center = true);\n\n        // Hatch opening\n        translate([0, -26.5, -15])\n            cube([26, 3, 16], center = true);\n    }\n\n    // Door handle\n    translate([12, -27, -15])\n        cylinder(h = 4, d = 4, center = true);\n}\n\nmodule base() {\n    // Reinforced bottom feet\n    for (x = [-25, 25])\n        for (y = [-20, 20])\n            translate([x, y, -36])\n                cylinder(h = 6, d = 8, center = true);\n}\n\nunion() {\n    main_body();\n    ventilation_holes();\n    lid();\n    hatch();\n    base();\n}",
    "renders": true
  },
  {
    "household_item": "scale",
    "openscad_code": "// Classic two-pan balance scale (medium complexity, 3D-printable)\n// Overall footprint ~70x85x90 mm\n\n// Parameters\n$fn = 50;\nwall = 2.0;\nbase_w = 60;\nbase_d = 50;\nbase_h = 8;\npillar_h = 70;\npillar_r = 5;\nbeam_l = 80;\nbeam_h = 6;\npan_d = 28;\npan_h = 6;\npointer_l = 20;\n\n// Main assembly\nunion() {\n\n    // Base\n    difference() {\n        // Main base block\n        translate([0, 0, base_h/2])\n            rounded_cube([base_w, base_d, base_h], 4);\n        // Center slot for pillar\n        translate([0, 0, base_h-1])\n            cube([pillar_r*2+wall, base_d-10, 2], center=true);\n    }\n\n    // Central pillar\n    translate([0, 0, base_h + pillar_h/2])\n        cylinder(h = pillar_h, r = pillar_r, center = true);\n\n    // Pivot block on top\n    translate([0, 0, base_h + pillar_h + 2])\n        rounded_cube([10, 10, 5], 2);\n\n    // Beam and pointer\n    translate([0, 0, base_h + pillar_h + 4.5])\n        rotate([0, 90, 0])\n        union() {\n            // Beam\n            difference() {\n                rounded_cube([beam_l, beam_h, beam_h], 2);\n                // Pivot hole\n                rotate([0, 90, 0])\n                    translate([0, 0, -beam_h/2-1])\n                    cylinder(h = beam_h+2, r = 1.5, center=true);\n            }\n            // Pointer\n            translate([0, 0, -beam_h/2 - pointer_l/2])\n                rotate([90, 0, 0])\n                cylinder(h = pointer_l, r = 1.2);\n        }\n\n    // Left pan chain\n    translate([-beam_l/2, 0, base_h + pillar_h + 4.5])\n        pan_with_chain();\n\n    // Right pan chain\n    translate([beam_l/2, 0, base_h + pillar_h + 4.5])\n        mirror([1, 0, 0])\n            pan_with_chain();\n}\n\n// Helper module: rounded cube\nmodule rounded_cube(size, r) {\n    x = size.x != undef ? size.x : size[0];\n    y = size.y != undef ? size.y : size[1];\n    z = size.z != undef ? size.z : size[2];\n    hull() {\n        for (dx = [-x/2+r, x/2-r], dy = [-y/2+r, y/2-r], dz = [-z/2+r, z/2-r])\n            translate([dx, dy, dz])\n                sphere(r = r);\n    }\n}\n\n// Helper module: pan plus chain\nmodule pan_with_chain() {\n    // Chain link to beam\n    translate([0, 0, -beam_h/2-5])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5);\n\n    // Pan\n    translate([0, 0, -beam_h/2-15])\n        difference() {\n            // Pan body\n            cylinder(h = pan_h, r = pan_d/2);\n            // Hollow inside\n            translate([0, 0, 1])\n                cylinder(h = pan_h, r = pan_d/2 - wall);\n        }\n}",
    "renders": true
  },
  {
    "household_item": "timer",
    "openscad_code": "// Realistic 3D-printable mechanical kitchen timer\n// Overall size: ~70 mm diameter, ~45 mm thick\n\n// Constants\n$fn = 60;\n\n// Main dimensions\nbody_d = 70;\nbody_h = 30;\nwall_t = 2;\nknob_d = 20;\nknob_h = 15;\ndisplay_w = 40;\ndisplay_h = 15;\nleg_h = 8;\nleg_r = 2;\n\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cylinder(d = body_d - 2*wall_t, h = body_h - 2*wall_t, center = true);\n            sphere(r = 3);\n        }\n        // Hollow interior\n        minkowski() {\n            cylinder(d = body_d - 4*wall_t, h = body_h - 2*wall_t, center = true);\n            sphere(r = 2);\n        }\n    }\n}\n\nmodule timer_face() {\n    // Display window\n    translate([0, 0, body_h/2 - 0.5]) {\n        difference() {\n            // Slightly raised bezel\n            cube([display_w + 6, display_h + 6, 2], center = true);\n            cube([display_w, display_h, 3], center = true);\n        }\n    }\n    \n    // Minute markings around the edge\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([body_d/2 - 5, 0, body_h/2 - 0.5]) {\n                cube([4, 1, 1], center = true);\n            }\n    }\n}\n\nmodule knob() {\n    // Main knob\n    translate([0, 0, body_h/2 + knob_h/2]) {\n        difference() {\n            cylinder(d = knob_d, h = knob_h);\n            // Grip ridges\n            for (i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([knob_d/2 - 2, 0, knob_h/2])\n                        cube([4, 1, knob_h], center = true);\n            }\n        }\n        // Center indicator arrow\n        translate([0, knob_d/2 - 3, knob_h/2])\n            cube([2, 6, 1], center = true);\n    }\n}\n\nmodule support_legs() {\n    // Three support legs\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([body_d/3, 0, -body_h/2]) {\n                cylinder(h = leg_h, r = leg_r);\n                sphere(r = leg_r);\n            }\n    }\n}\n\nmodule timer() {\n    union() {\n        main_body();\n        timer_face();\n        knob();\n        support_legs();\n    }\n}\n\n// Render the complete timer\ntimer();",
    "renders": true
  },
  {
    "household_item": "thermometer",
    "openscad_code": "// Realistic 3D-printable thermometer\n// Overall length ~95 mm, width ~12 mm, thickness ~8 mm\n// No overhangs greater than 45°, wall ≥1 mm\n\n// Parameters\ntube_od       = 6;            // outer diameter of glass tube\ntube_wall     = 1;            // wall thickness\ntube_len      = 75;           // tube length\nbulb_d        = 12;           // bulb diameter\ncap_h         = 5;            // top cap height\ncap_d         = 10;           // top cap diameter\nscale_mark_h  = 2;            // height of scale marks\nscale_mark_w  = 0.8;          // width of scale marks\nscale_gap     = 5;            // spacing between marks\nscale_count   = 10;           // number of scale marks\nbase_thick    = 2;            // thickness of flat base for printing\nepsilon       = 0.01;         // tiny offset to avoid Z-fighting\n\nmodule thermometer() {\n    // Main glass tube\n    difference() {\n        cylinder(h = tube_len, d = tube_od, $fn = 32);\n        translate([0, 0, -epsilon])\n            cylinder(h = tube_len + 2*epsilon, d = tube_od - 2*tube_wall, $fn = 32);\n    }\n\n    // Bulb (lower rounded reservoir)\n    translate([0, 0, -bulb_d/2])\n        sphere(d = bulb_d, $fn = 32);\n\n    // Top cap (metal crimp)\n    translate([0, 0, tube_len])\n        cylinder(h = cap_h, d1 = cap_d, d2 = tube_od, $fn = 32);\n\n    // Scale plate (flat strip along back)\n    translate([tube_od/2 + 0.5, 0, tube_len/2])\n        rotate([0, 90, 0])\n            cube([tube_len, 6, base_thick]);\n\n    // Scale marks\n    for (i = [0:scale_count-1]) {\n        translate([tube_od/2 + 0.5 + base_thick, -3 + scale_mark_w/2, tube_len - 10 - i*scale_gap])\n            cube([scale_mark_h, scale_mark_w, base_thick]);\n    }\n\n    // Numerical indicators (3 main marks)\n    for (i = [0:2]) {\n        translate([tube_od/2 + 0.5 + base_thick + scale_mark_h + 0.5, -1.5, tube_len - 10 - i*4*scale_gap])\n            cube([1, 3, base_thick]);\n    }\n}\n\n// Stand for printing without supports\nmodule print_stand() {\n    // Flat base\n    cube([30, 20, 2], center = true);\n\n    // Half-cylindrical cradle\n    translate([0, 0, 1])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 30, d = 14, center = true, $fn = 32);\n                translate([0, 0, -7 - epsilon])\n                    cube([30, 14, 7], center = true);\n            }\n}\n\n// Assembly\ntranslate([0, 0, 8])\n    thermometer();\nprint_stand();",
    "renders": true
  },
  {
    "household_item": "measuringcup",
    "openscad_code": "// Realistic 3D-printable measuring cup (250 ml)\n// Outer dimensions ~70 mm Ø × 70 mm high\n\n// Parameters\nwall = 1.8;                 // Safe 3D-print wall thickness (mm)\nr_out = 35;                 // Outer radius (mm)\nr_in  = r_out - wall;       // Inner radius\nh_total = 68;               // Total height\nh_base  = 5;                // Solid base\nh_fluid = h_total - h_base; // Max fluid height\nhandle_width = 12;\nhandle_thick = wall;\nhandle_len = 30;\nspout_w = 12;\nspout_h = 8;\n\n// Overall cup body\nmodule cup_body() {\n    difference() {\n        // Outer solid cylinder\n        cylinder(h=h_total, r1=r_out, r2=r_out-2, $fn=120);\n\n        // Hollow inside\n        translate([0,0,h_base])\n            cylinder(h=h_fluid+1, r1=r_in, r2=r_in-2, $fn=120);\n    }\n}\n\n// Graduation marks (every 50 ml → 10 mm height)\nmodule graduation_marks() {\n    step = 10; // 10 mm per 50 ml\n    for(i=[1:5]) {\n        translate([0, r_out, h_base + i*step])\n            rotate([90,0,0])\n                linear_extrude(height=wall+0.2)\n                    text(str(i*50,\"ml\"), size=3, valign=\"center\", halign=\"center\");\n        \n        // Short raised ridges\n        color(\"white\")\n        for(a=[-5:5]) {\n            rotate([0,0,a*6])\n                translate([r_out-0.2, 0, h_base + i*step])\n                    cube([0.4, 1.5, 0.6], center=true);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([r_out-1, 0, h_total/2]) {\n        rotate([0,90,0]) {\n            // Main grip\n            difference() {\n                rotate_extrude($fn=60)\n                    translate([handle_len/2, 0, 0])\n                        square([handle_len/2, handle_width], center=true);\n                // Hollow grip\n                rotate_extrude($fn=60)\n                    translate([handle_len/2, 0, 0])\n                        square([handle_len/2-handle_thick, handle_width-2*handle_thick], center=true);\n            }\n            // Attachment bridges\n            for(z=[-h_total/3, h_total/3]) {\n                translate([0,0,z])\n                    rotate_extrude($fn=60)\n                        translate([r_out-1,0,0])\n                            square([wall+1, handle_width], center=true);\n            }\n        }\n    }\n}\n\n// Pouring spout\nmodule spout() {\n    difference() {\n        union() {\n            // Main spout wedge\n            translate([0, r_out-1, h_total-spout_h])\n                rotate([0,0,0])\n                    cube([spout_w*2, spout_h, spout_h], center=true);\n            // Smooth top bevel\n            translate([0, r_out-1, h_total-spout_h/2])\n                rotate([0,90,0])\n                    cylinder(h=spout_w*2, r1=spout_h/2, r2=0, $fn=20);\n        }\n        // Remove inside\n        translate([0, r_out-1, h_total-spout_h])\n            cube([spout_w*2-2*wall, spout_h+1, spout_h+1], center=true);\n    }\n}\n\n// Build the cup\ncup_body();\nhandle();\nspout();\ngraduation_marks();",
    "renders": true
  },
  {
    "household_item": "measuringspoon",
    "openscad_code": "// Measuring Spoon - 15ml Tablespoon\n// Realistic style with medium complexity\n\n// Parameters\n$fn = 32;\nwall_thickness = 1.5;\nhandle_length = 70;\nhandle_width = 12;\nhandle_thickness = 3;\nbowl_radius = 22;\nbowl_depth = 12;\nmeasurement_mark_depth = 0.5;\n\n// Main assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Bowl\n    bowl();\n    \n    // Measurement marking\n    measurement_mark();\n}\n\nmodule handle() {\n    // Start handle from origin\n    translate([0, 0, handle_thickness/2]) {\n        // Main handle body with rounded edges\n        hull() {\n            // Front rounded end\n            translate([handle_length-3, 0, 0])\n                sphere(d=handle_width);\n            \n            // Back rounded end\n            translate([3, 0, 0])\n                sphere(d=handle_width);\n            \n            // Middle section\n            translate([handle_length/2, 0, 0])\n                sphere(d=handle_width * 0.9);\n        }\n        \n        // Hollow out handle\n        difference() {\n            // Outer shape already created\n            hull() {\n                translate([handle_length-3, 0, 0])\n                    sphere(d=handle_width - wall_thickness*2);\n                \n                translate([3, 0, 0])\n                    sphere(d=handle_width - wall_thickness*2);\n                \n                translate([handle_length/2, 0, 0])\n                    sphere(d=(handle_width - wall_thickness*2) * 0.9);\n            }\n            translate([0, 0, -handle_thickness])\n                cube([handle_length+10, handle_width*2, handle_thickness*2], center=true);\n        }\n        \n        // Grip texture grooves\n        for(i = [1:4]) {\n            translate([handle_length * 0.2 * i, 0, handle_thickness/2])\n                difference() {\n                    cylinder(h=handle_thickness+0.2, d=handle_width, center=true);\n                    cylinder(h=handle_thickness+0.4, d=handle_width - 1, center=true);\n                }\n        }\n    }\n}\n\nmodule bowl() {\n    // Position bowl at end of handle\n    translate([0, 0, handle_thickness/2]) {\n        rotate([90, 0, 0]) {\n            // Outer bowl shape\n            difference() {\n                // Main bowl sphere\n                sphere(r=bowl_radius);\n                \n                // Cut bottom flat\n                translate([0, 0, -bowl_radius + bowl_depth])\n                    cube([bowl_radius*2, bowl_radius*2, bowl_radius*2], center=true);\n                \n                // Cut back flat for handle attachment\n                translate([bowl_radius, 0, 0])\n                    cube([bowl_radius, bowl_radius*2, bowl_radius*2], center=true);\n            }\n            \n            // Inner bowl hollow\n            difference() {\n                sphere(r=bowl_radius - wall_thickness);\n                translate([0, 0, -bowl_radius + bowl_depth - wall_thickness - 1])\n                    cube([bowl_radius*2, bowl_radius*2, bowl_radius*2], center=true);\n                translate([bowl_radius - wall_thickness, 0, 0])\n                    cube([bowl_radius, bowl_radius*2, bowl_radius*2], center=true);\n            }\n            \n            // Smooth transition to handle\n            translate([-bowl_radius + 2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=bowl_radius/2, r=handle_width/2 - wall_thickness, center=true);\n        }\n    }\n}\n\nmodule measurement_mark() {\n    // 15ml marking on handle\n    translate([handle_length * 0.7, 0, handle_thickness + 0.1]) {\n        rotate([90, 0, 0]) {\n            // Text \"15ml\"\n            linear_extrude(height=measurement_mark_depth) {\n                text(\"15ml\", size=4, halign=\"center\", valign=\"center\");\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "rollingpin",
    "openscad_code": "// Rolling Pin - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\npin_length = 80;\npin_diameter = 25;\nhandle_length = 20;\nhandle_diameter = 12;\ngrip_length = 15;\ngrip_diameter = 14;\n\n// Rolling surface texture parameters\ngroove_width = 1.5;\ngroove_depth = 0.5;\ngroove_spacing = 4;\ngroove_count = floor(pin_length / groove_spacing) - 1;\n\nmodule rolling_pin() {\n    // Central cylindrical body\n    cylinder(h=pin_length, d=pin_diameter, center=true);\n    \n    // Tapered ends\n    translate([pin_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h1=pin_diameter/2, h2=0, r1=pin_diameter/2, r2=pin_diameter/3, $fn=32);\n    \n    translate([-pin_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h1=pin_diameter/2, h2=0, r1=pin_diameter/2, r2=pin_diameter/3, $fn=32);\n}\n\nmodule handle_grooves() {\n    // Grip rings on handle\n    for(i = [0:3]) {\n        translate([0, 0, -grip_length/2 + i*grip_length/4])\n            difference() {\n                cylinder(h=2, d=grip_diameter+1, center=true);\n                cylinder(h=3, d=grip_diameter-2, center=true);\n            }\n    }\n}\n\nmodule rolling_surface_grooves() {\n    // Surface texture grooves\n    for(i = [1:groove_count]) {\n        translate([-(pin_length/2) + i*groove_spacing, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=groove_width, d=pin_diameter+1, center=true);\n                    cylinder(h=groove_width+1, d=pin_diameter-groove_depth*2, center=true);\n                }\n    }\n}\n\nmodule handle() {\n    // Handle shaft\n    cylinder(h=handle_length, d=handle_diameter, center=true);\n    \n    // Handle grip\n    translate([0, 0, handle_length/2 + grip_length/2])\n        cylinder(h=grip_length, d=grip_diameter, center=true);\n    \n    // Grip grooves\n    translate([0, 0, handle_length/2 + grip_length/2])\n        handle_grooves();\n    \n    // End cap\n    translate([0, 0, handle_length/2 + grip_length + 2])\n        sphere(d=handle_diameter, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Rolling pin body with surface texture\n    difference() {\n        rolling_pin();\n        rolling_surface_grooves();\n    }\n    \n    // Left handle\n    translate([-(pin_length/2 + handle_length/2), 0, 0])\n        rotate([0, 90, 0])\n            handle();\n    \n    // Right handle\n    translate([pin_length/2 + handle_length/2, 0, 0])\n        rotate([0, 90, 0])\n            mirror([1, 0, 0])\n                handle();\n}",
    "renders": true
  },
  {
    "household_item": "bakingsheet",
    "openscad_code": "// Baking sheet – realistic style, medium complexity\n// External size ≈ 80 mm × 60 mm × 10 mm\n// Wall thickness 1.2 mm, printable without supports\n\n// Parameters\nsheet_l = 80;       // length\nsheet_w = 60;       // width\nsheet_h = 10;       // total height\nwall_t = 1.2;       // wall thickness\nedge_r = 2;         // top edge radius\ncorner_r = 3;       // fillet radius on inside bottom\ngrip_len = 10;      // length of side grips\ngrip_rad = 4;       // grip cylinder radius\n\n// Main sheet body\nmodule sheet_body() {\n    difference() {\n        // Outer block with rounded top edge\n        minkowski() {\n            cube([sheet_l, sheet_w, sheet_h - edge_r], center = true);\n            cylinder(r = edge_r, h = 0.01, $fn = 16);\n        }\n        translate([0, 0, 1])  // shift to keep bottom flat\n        // Inner cavity\n        difference() {\n            // Main cavity\n            cube([sheet_l - 2*wall_t, sheet_w - 2*wall_t, sheet_h], center = true);\n            // Bottom inside fillets (four cylinders)\n            for (dx = [-1, 1])\n                for (dy = [-1, 1])\n                    translate([dx*(sheet_l/2 - wall_t - corner_r),\n                               dy*(sheet_w/2 - wall_t - corner_r),\n                               -sheet_h/2])\n                        cylinder(h = corner_r + 0.1, r = corner_r, $fn = 16);\n        }\n    }\n}\n\n// Side grips\nmodule grips() {\n    // Left grip\n    translate([-sheet_l/2 - grip_len/2, 0, 0])\n        grip();\n    // Right grip\n    translate([sheet_l/2 + grip_len/2, 0, 0])\n        mirror([1, 0, 0])\n            grip();\n}\n\nmodule grip() {\n    difference() {\n        // Grip body\n        cube([grip_len, sheet_w/3, wall_t*3], center = true);\n        // Finger groove\n        translate([0, 0, -wall_t*1.5])\n            cylinder(h = wall_t*3 + 0.1, r = grip_rad, $fn = 16);\n    }\n}\n\n// Perforation pattern (optional subtle look)\nmodule perforations() {\n    hole_d = 1.4;\n    spacing = 4;\n    rows = floor((sheet_w - 2*wall_t) / spacing) - 1;\n    cols = floor((sheet_l - 2*wall_t) / spacing) - 1;\n    difference() {\n        children();\n        for (i = [0:cols-1])\n            for (j = [0:rows-1])\n                translate([\n                    -sheet_l/2 + wall_t + spacing/2 + i*spacing,\n                    -sheet_w/2 + wall_t + spacing/2 + j*spacing,\n                    0\n                ])\n                    cylinder(h = sheet_h, d = hole_d, $fn = 12);\n    }\n}\n\n// Assembly\nperforations() {\n    union() {\n        sheet_body();\n        grips();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "casserole",
    "openscad_code": "// Medium-complexity realistic casserole dish\n// Approx. 80 mm wide × 60 mm deep × 45 mm tall (without lid)\n\nwall_th = 2;           // wall thickness for 3D-printing\nr_out   = 40;          // outer radius of the dish\nh_body  = 30;          // height of the dish body\nh_lip   = 5;           // rim / lip height\nh_base  = 8;           // pedestal base height\nr_base  = 35;          // base radius (smaller than dish)\n\n// ---------------- DISH BODY ----------------\nmodule dish_body() {\n    difference() {\n        // outer shell\n        cylinder(h = h_body + h_lip, r1 = r_out, r2 = r_out - 2, $fn = 48);\n\n        // inner cavity\n        translate([0, 0, wall_th])\n            cylinder(h = h_body - wall_th, r1 = r_out - wall_th, r2 = r_out - wall_th - 2, $fn = 48);\n    }\n}\n\n// ---------------- RIM / LIP ----------------\nmodule lip() {\n    // slightly flared rim\n    translate([0, 0, h_body])\n        cylinder(h = h_lip, r1 = r_out - 2, r2 = r_out + 1, $fn = 48);\n}\n\n// ---------------- BASE / PEDESTAL ----------------\nmodule base() {\n    translate([0, 0, -h_base])\n        cylinder(h = h_base, r1 = r_base, r2 = r_base + 2, $fn = 48);\n}\n\n// ---------------- HANDLES ----------------\nmodule side_handles() {\n    handle_len = 12;\n    handle_wid = 6;\n    handle_th  = wall_th;\n    \n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([r_out + handle_len / 2, 0, h_body / 2])\n                rotate([0, 90, 0])\n                    difference() {\n                        union() {\n                            // main grip bar\n                            cube([handle_len, handle_wid, handle_th], center = true);\n                            // curved transition\n                            translate([0, 0, handle_wid / 2])\n                                rotate([90, 0, 0])\n                                    cylinder(h = handle_len, r = handle_th / 2, center = true, $fn = 12);\n                        }\n                        // screw clearance / weight-saving hole\n                        cylinder(h = handle_len + 1, r = handle_th / 2 - 0.5, center = true, $fn = 8);\n                    }\n    }\n}\n\n// ---------------- LID ----------------\nmodule lid() {\n    lid_h     = 10;\n    lid_top_r = r_out - 1;\n    lid_bot_r = r_out + 1;\n    \n    // lid dome\n    difference() {\n        cylinder(h = lid_h, r1 = lid_bot_r, r2 = lid_top_r, $fn = 48);\n        translate([0, 0, wall_th])\n            cylinder(h = lid_h, r1 = lid_bot_r - wall_th, r2 = lid_top_r - wall_th, $fn = 48);\n    }\n    \n    // lid knob\n    knob_r = 8;\n    knob_h = 10;\n    translate([0, 0, lid_h + knob_h / 2])\n        cylinder(h = knob_h, r1 = knob_r, r2 = knob_r / 2, $fn = 20);\n}\n\n// ---------------- ASSEMBLY ----------------\nunion() {\n    dish_body();\n    lip();\n    base();\n    side_handles();\n    \n    // Lid offset for preview\n    translate([0, 0, h_body + h_lip + 2])\n        lid();\n}",
    "renders": true
  },
  {
    "household_item": "skillet",
    "openscad_code": "// Realistic 3D-printable skillet – medium complexity\n// Overall length ≈ 90 mm, pan diameter ≈ 50 mm, wall thickness 1.2 mm\n\n// Parameters\npan_d = 50;            // pan outer diameter\nwall_t = 1.2;          // wall thickness\nbase_h = 3;            // bottom plate height\nbody_h = 15;           // pan body height\nhandle_l = 40;         // handle length\nhandle_w = 10;         // handle width at grip\nhandle_t = 6;          // handle thickness\ngrip_r = 1.5;          // grip ridge radius\ngrip_step = 5;         // spacing between grip rings\nrivet_r = 1.5;         // rivet radius\nrivet_h = 2.5;\n\n// Helper: rounded-edge cylinder (pan body)\nmodule rounded_cylinder(h, r, t) {\n    difference() {\n        cylinder(h=h, r=r, $fn=100);\n        translate([0,0,-0.01])\n            cylinder(h=h+0.02, r=r-t, $fn=100);\n    }\n}\n\n// Pan body (bowl shape)\nmodule pan_body() {\n    difference() {\n        union() {\n            // bottom plate\n            cylinder(h=base_h, r=pan_d/2, $fn=100);\n            // curved wall\n            translate([0,0,base_h])\n                rounded_cylinder(body_h, pan_d/2, wall_t);\n        }\n        // hollow interior\n        translate([0,0,base_h])\n            cylinder(h=body_h+0.1, r=pan_d/2-wall_t, $fn=100);\n    }\n}\n\n// Handle grip ridges\nmodule grip_ridges() {\n    n = floor(handle_l/grip_step) - 1;\n    for(i=[1:n]) {\n        translate([0, 0, i*grip_step])\n            // semicircular ridge\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=handle_w, r=grip_r, center=true, $fn=20);\n                    translate([0,-grip_r,0])\n                        cube([handle_w+2, grip_r*2, grip_r*2], center=true);\n                }\n    }\n}\n\n// Handle with ergonomic taper\nmodule handle() {\n    // Main shaft tapering toward pan\n    hull() {\n        translate([0,0,0])\n            cube([handle_t, handle_w, handle_t], center=true);\n        translate([handle_l,0,0])\n            scale([0.7,0.7,0.7])\n                cube([handle_t, handle_w, handle_t], center=true);\n    }\n    // Grip ridges on top\n    grip_ridges();\n    // Rivets where handle meets pan\n    for(side=[-1,1]) {\n        translate([-handle_t/2-rivet_h/2, side*handle_w/4, 0])\n            rotate([0,90,0])\n                cylinder(h=rivet_h, r=rivet_r, $fn=16);\n    }\n}\n\n// Assemble skillet\nunion() {\n    pan_body();\n    translate([pan_d/2 - handle_t/2, 0, base_h+body_h/2])\n        rotate([0,-90,0])\n            handle();\n}",
    "renders": true
  },
  {
    "household_item": "wok",
    "openscad_code": "// Wok - realistic style, medium complexity\n// 3D printable with proper wall thickness\n\n$fn = 100;\n\n// Overall dimensions\nwok_diameter = 80;\nwok_height = 35;\nwall_thickness = 2;\nhandle_length = 60;\nhandle_diameter = 12;\n\n// Main wok bowl\nmodule wok_bowl() {\n    difference() {\n        // Outer bowl\n        scale([1, 1, 0.8]) \n            cylinder(h = wok_height, d = wok_diameter, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            scale([1, 1, 0.75])\n                cylinder(h = wok_height, d = wok_diameter - wall_thickness * 2, center = false);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -1])\n            cylinder(h = 2, d = wok_diameter * 0.6, center = false);\n    }\n}\n\n// Rivet detail\nmodule rivet() {\n    cylinder(h = 3, d = 3);\n}\n\n// Handle attachment plate\nmodule handle_attachment() {\n    difference() {\n        // Main plate\n        translate([wok_diameter/2 - 10, 0, wok_height/2])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                    cube([20, 15, 3], center = true);\n        \n        // Screw holes (decorative)\n        for(y = [-5, 5])\n            translate([wok_diameter/2 - 10, y, wok_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, d = 2, center = true);\n    }\n    \n    // Rivets\n    for(y = [-5, 5]) {\n        translate([wok_diameter/2 - 15, y, wok_height/2 + 2])\n            rivet();\n        translate([wok_diameter/2 - 5, y, wok_height/2 + 2])\n            rivet();\n    }\n}\n\n// Main handle - ergonomic grip\nmodule handle() {\n    // Handle core\n    translate([wok_diameter/2 + handle_length/2 - 10, 0, wok_height/2])\n        rotate([0, 90, 0])\n            difference() {\n                // Main handle cylinder with taper\n                hull() {\n                    translate([0, 0, 0])\n                        cylinder(h = 5, d = handle_diameter);\n                    translate([handle_length - 15, 0, 0])\n                        cylinder(h = 5, d = handle_diameter * 0.9);\n                    translate([handle_length - 5, 0, 0])\n                        cylinder(h = 5, d = handle_diameter * 0.7);\n                }\n                \n                // Grip grooves\n                for(i = [10:15:handle_length - 20]) {\n                    translate([i, 0, -handle_diameter/2 - 1])\n                        rotate([90, 0, 0])\n                            cylinder(h = handle_diameter + 2, d = 2);\n                }\n            }\n    \n    // Handle collar\n    translate([wok_diameter/2 - 10, 0, wok_height/2])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d = handle_diameter + 4);\n}\n\n// Helper handle (opposite side)\nmodule helper_handle() {\n    translate([-wok_diameter/2 + 5, 0, wok_height/2])\n        rotate([90, 0, 0])\n            difference() {\n                // Main helper handle\n                cylinder(h = 25, d = 8);\n                \n                // Hollow center\n                cylinder(h = 25, d = 4);\n            }\n}\n\n// Rim reinforcement\nmodule rim_reinforcement() {\n    difference() {\n        translate([0, 0, wok_height - 1])\n            cylinder(h = 3, d = wok_diameter + 2);\n        \n        translate([0, 0, wok_height - 1])\n            cylinder(h = 3.5, d = wok_diameter - wall_thickness * 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main wok\n    wok_bowl();\n    \n    // Structural elements\n    rim_reinforcement();\n    handle_attachment();\n    \n    // Handles\n    handle();\n    helper_handle();\n}",
    "renders": true
  },
  {
    "household_item": "saucepan",
    "openscad_code": "$fn = 36;\n\nwall_th = 1.5;      // wall thickness (mm)\nbase_d = 50;        // pan base diameter\nrim_d = 54;         // rim diameter\nheight = 40;        // pan body height\nbottom_shift = 3;   // extra base height for bottom plate\nhandle_L = 60;      // handle length\nhandle_W = 10;      // handle width\nhandle_T = 8;       // handle thickness\nrivet_r = 1.2;      // rivet radius\nrivet_L = 4;\n\n// saucepan body\nmodule saucepan_body() {\n    difference() {\n        union() {\n            // main tapered wall\n            cylinder(h1 = height + bottom_shift,\n                     h2 = height,\n                     r1 = base_d/2,\n                     r2 = rim_d/2,\n                     center = false);\n\n            // rolled rim lip\n            translate([0, 0, height])\n                cylinder(h = 2,\n                         r1 = rim_d/2,\n                         r2 = rim_d/2 + 1.5,\n                         center = false);\n        }\n\n        // hollow interior\n        translate([0, 0, bottom_shift])\n            cylinder(h1 = height - 2,\n                     h2 = height - bottom_shift - 1,\n                     r1 = base_d/2 - wall_th,\n                     r2 = rim_d/2 - wall_th,\n                     center = false);\n    }\n}\n\n// helper for handle profile\nmodule handle_profile() {\n    // ellipse + rectangle blend\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = handle_T, r = handle_T/2, center = true);\n        translate([handle_L - handle_T/2, 0, 0])\n            cylinder(h = handle_T, r = handle_T/2, center = true);\n    }\n}\n\n// saucepan handle\nmodule handle() {\n    // main grip\n    translate([rim_d/2, 0, height/2])\n        rotate([90, 0, 0])\n            scale([1, handle_W/handle_T, 1])\n                handle_profile();\n\n    // support bracket\n    translate([rim_d/2, 0, bottom_shift + 2])\n        rotate([90, 0, 0])\n            linear_extrude(height = handle_W) {\n                polygon(points = [\n                    [0, 0],\n                    [handle_L/2.5, 0],\n                    [handle_L/2.5, 6],\n                    [0, 4]\n                ]);\n            }\n\n    // rivets\n    for(z = [height*0.35, height*0.65]) {\n        translate([rim_d/2 + 2, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h = rivet_L, r = rivet_r, center = true);\n    }\n}\n\n// saucepan bottom plate (heat spreader)\nmodule bottom_plate() {\n    difference() {\n        cylinder(h = bottom_shift, r = base_d/2, center = false);\n        translate([0, 0, 0.5])\n            cylinder(h = bottom_shift, r = base_d/2 - wall_th, center = false);\n    }\n}\n\n// assemble\nunion() {\n    bottom_plate();\n    saucepan_body();\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "stockpot",
    "openscad_code": "// Realistic 3D-printable stockpot (medium complexity)\n// Overall height ≈ 55 mm, diameter ≈ 55 mm\n\nmodule stockpot() {\n    // Wall / bottom thickness\n    wall = 1.6;\n\n    // Main pot body\n    difference() {\n        cylinder(h = 40, d = 55, $fn = 90);               // outer shell\n        translate([0, 0, wall])\n            cylinder(h = 40, d = 55 - 2*wall, $fn = 90); // inner hollow\n    }\n\n    // Bottom base plate (extra thickness for print stability)\n    translate([0, 0, -1])\n        cylinder(h = wall + 1, d = 55, $fn = 90);\n\n    // Rim roll at top\n    difference() {\n        translate([0, 0, 40])\n            cylinder(h = 4, d1 = 55, d2 = 57, $fn = 90);   // outer flare\n        translate([0, 0, 40])\n            cylinder(h = 5, d = 55 - 2*wall, $fn = 90);    // inner cut\n    }\n\n    // Handles\n    module handle() {\n        difference() {\n            // Main grip loop\n            rotate([0, 90, 0])\n                translate([0, 0, 27.5 + wall])\n                    rotate_extrude(angle = 90, $fn = 30)\n                        translate([27.5 + wall, 0])\n                            square([wall * 1.5, 6]);\n\n            // Hollow out grip\n            rotate([0, 90, 0])\n                translate([0, 0, 27.5 + wall + 0.5])\n                    rotate_extrude(angle = 90, $fn = 30)\n                        translate([27.5 + wall + 0.5, 0])\n                            square([wall * 0.7, 4]);\n        }\n        // Support plate under handle\n        translate([0, 27.5, 35])\n            cube([10, wall, 6], center = true);\n    }\n\n    // Attach two handles 180° apart\n    for (i = [0:1])\n        rotate([0, 0, i * 180])\n            handle();\n\n    // Lid\n    translate([0, 70, 0]) {\n        difference() {\n            // Lid disk\n            cylinder(h = 3, d = 56, $fn = 90);\n            translate([0, 0, 0.5])\n                cylinder(h = 3, d = 54, $fn = 90); // inner recess\n        }\n        // Lid knob\n        translate([0, 0, 3])\n            cylinder(h = 8, d1 = 10, d2 = 8, $fn = 30);\n    }\n}\n\nstockpot();",
    "renders": true
  },
  {
    "household_item": "roaster",
    "openscad_code": "// Realistic Roaster - 3D printable coffee bean roaster\n// Size: ~80mm length, ~60mm height, ~50mm width\n// All overhangs <= 45° for 3D printing\n\n// Main dimensions (mm)\nroaster_length = 80;\nroaster_width = 50;\nroaster_height = 60;\nwall_thickness = 2;\nhandle_length = 30;\n\n// Roaster body - main chamber\nmodule roaster_body() {\n    difference() {\n        // Outer shell - rounded for better heat distribution\n        hull() {\n            translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                sphere(d=roaster_width);\n            translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                cylinder(h=roaster_length-roaster_width, d=roaster_width);\n        }\n        \n        // Inner cavity for beans\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            scale([(roaster_length-2*wall_thickness)/roaster_length, \n                   (roaster_width-2*wall_thickness)/roaster_width,\n                   (roaster_height-2*wall_thickness)/roaster_height])\n                hull() {\n                    translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                        sphere(d=roaster_width);\n                    translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                        cylinder(h=roaster_length-roaster_width, d=roaster_width);\n                }\n    }\n}\n\n// Handle with wooden grip texture\nmodule handle() {\n    // Metal arm\n    translate([roaster_length, roaster_width/2, roaster_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=handle_length, d=8);\n    \n    // Wooden grip with rings for texture\n    for(i = [0:4]) {\n        translate([roaster_length + 5 + i*5, roaster_width/2, roaster_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=4, d=10 + (i%2)*2);\n    }\n}\n\n// Lid with steam vent holes\nmodule lid() {\n    // Main lid disc\n    translate([roaster_length/2, roaster_width/2, roaster_height - wall_thickness])\n        cylinder(h=wall_thickness*2, d=roaster_width + 4);\n    \n    // Handle on lid\n    translate([roaster_length/2, roaster_width/2, roaster_height + 2])\n        cylinder(h=5, d=8);\n    \n    // Steam vents - small holes for moisture release\n    for(angle = [0:45:360-45]) {\n        rotate([0, 0, angle])\n            translate([roaster_length/2 + roaster_width/4, \n                      roaster_width/2, \n                      roaster_height])\n                cylinder(h=wall_thickness*3, d=2);\n    }\n}\n\n// Support legs - angled for stability\nmodule legs() {\n    for(side = [-1, 1]) {\n        for(end = [-1, 1]) {\n            translate([roaster_length/2 + end*(roaster_length/2 - 10),\n                      roaster_width/2 + side*(roaster_width/2 - 5),\n                      5])\n                rotate([0, end*15, 0])\n                    cylinder(h=10, d1=8, d2=6);\n        }\n    }\n}\n\n// Crank mechanism for rotating beans\nmodule crank() {\n    // Drive shaft\n    translate([0, roaster_width/2, roaster_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=10, d=6);\n    \n    // Crank arm\n    translate([-5, roaster_width/2 - 5, roaster_height/2])\n        cube([10, 10, 6]);\n    \n    // Crank handle\n    translate([-10, roaster_width/2 - 15, roaster_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=8);\n}\n\n// Assembly\nunion() {\n    roaster_body();\n    handle();\n    legs();\n    crank();\n    \n    // Optional - add lid (can be printed separately)\n    %lid();\n}",
    "renders": true
  },
  {
    "household_item": "griddle",
    "openscad_code": "// Realistic 3D-printable griddle, medium complexity\n// Outer size: 90 x 60 x 20 mm (fits most FDM printers)\n\n$fn = 36;           // smooth curves\n\n// Overall body\ndifference() {\n    // Main plate\n    union() {\n        // Base frame with rounded corners\n        hull() {\n            translate([-45, -30, 0]) cylinder(h = 20, d = 6);\n            translate([45, -30, 0])  cylinder(h = 20, d = 6);\n            translate([45, 30, 0])   cylinder(h = 20, d = 6);\n            translate([-45, 30, 0])  cylinder(h = 20, d = 6);\n        }\n\n        // Bottom plate\n        translate([0, 0, 0]) cube([90, 60, 2], center = true);\n\n        // Side walls\n        for (x = [-42.5, 42.5]) {\n            translate([x, 0, 10]) cube([5, 60, 20], center = true);\n        }\n        for (y = [-27.5, 27.5]) {\n            translate([0, y, 10]) cube([90, 5, 20], center = true);\n        }\n    }\n\n    // Remove cooking surface cavity\n    translate([0, 0, 2]) cube([80, 50, 18], center = true);\n\n    // Drain hole\n    translate([40, 25, 2]) cylinder(h = 10, d = 5);\n}\n\n// Cooking surface with raised ridges\nmodule ridge_row(y) {\n    for (x = [-35 : 8 : 35]) {\n        translate([x, y, 2]) cube([6, 3, 1.5]);\n    }\n}\n\nfor (y = [-22.5 : 6 : 22.5]) {\n    ridge_row(y);\n}\n\n// Drain channel leading to hole\ntranslate([35, 23, 1.9]) cube([10, 4, 0.8]);\n\n// Handle sockets (for wooden dowels)\nmodule handle_socket(side) {\n    translate([side * 52, 0, 10]) {\n        difference() {\n            cylinder(h = 20, d = 12);\n            translate([0, 0, -1]) cylinder(h = 22, d = 8);\n        }\n    }\n}\n\nhandle_socket(-1);\nhandle_socket(1);\n\n// Feet\nmodule foot(x, y) {\n    translate([x, y, -1]) cylinder(h = 5, d = 8);\n}\n\nfoot(-40, -25);\nfoot(40, -25);\nfoot(-40, 25);\nfoot(40, 25);",
    "renders": true
  },
  {
    "household_item": "steamer",
    "openscad_code": "// OpenSCAD Steamer (realistic, medium complexity)\n// Overall dimensions ~80 mm diameter\n\n$fn = 48;  // smooth curves\n\n// Main parameters\nbase_d = 70;          // base diameter\nbase_h = 20;          // base height\nwall_th = 3;          // wall thickness\npot_h = 45;           // pot height\nrim_h = 8;            // rim height\nhandle_r = 5;         // handle radius\nhandle_l = 25;        // handle length\nvent_holes = 8;       // number of vent holes\nlid_knob_r = 8;       // lid knob radius\nlid_knob_h = 12;      // lid knob height\n\n// Base module\nmodule steamer_base() {\n    difference() {\n        // outer base\n        cylinder(h = base_h, d = base_d);\n        // hollow interior\n        translate([0, 0, wall_th])\n            cylinder(h = base_h, d = base_d - 2*wall_th);\n        // bottom vent holes\n        for(i = [1:vent_holes]) {\n            rotate([0, 0, i*360/vent_holes])\n                translate([base_d/2 - wall_th - 2, 0, base_h/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall_th + 1, d = 3, $fn = 16);\n        }\n    }\n}\n\n// Pot module\nmodule steamer_pot() {\n    difference() {\n        // outer pot\n        cylinder(h = pot_h, d = base_d, center = false);\n        // inner cavity\n        translate([0, 0, wall_th])\n            cylinder(h = pot_h, d = base_d - 2*wall_th, center = false);\n    }\n    // upper rim\n    translate([0, 0, pot_h])\n        difference() {\n            cylinder(h = rim_h, d = base_d + 2*wall_th);\n            cylinder(h = rim_h, d = base_d);\n        }\n    // handles\n    for(side = [-1, 1]) {\n        translate([side * (base_d/2 + handle_l/2), 0, pot_h/2])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = handle_l, r = handle_r);\n                    translate([0, 0, -1])\n                        cube([handle_l, 2*handle_r, 2*handle_r + 2], center = true);\n                }\n    }\n}\n\n// Steamer insert (perforated tray)\nmodule steamer_insert() {\n    difference() {\n        cylinder(h = wall_th*2, d = base_d - 4*wall_th);\n        // perforation pattern\n        for(row = [-2:2]) {\n            for(col = [-2:2]) {\n                translate([row*8, col*8, -1])\n                    cylinder(h = wall_th*2 + 2, d = 3);\n            }\n        }\n        // center hole\n        cylinder(h = wall_th*2 + 2, d = 20);\n    }\n    // small legs for elevation\n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n            translate([base_d/2 - 6*wall_th, 0, -wall_th])\n                cylinder(h = wall_th*2, d = 6);\n    }\n}\n\n// Lid module\nmodule steamer_lid() {\n    difference() {\n        // lid dome\n        translate([0, 0, -rim_h/2])\n            scale([1, 1, 0.6])\n                sphere(d = base_d + 2*wall_th);\n        // inner clearance\n        translate([0, 0, -rim_h])\n            scale([1, 1, 0.6])\n                sphere(d = base_d);\n        // handle hole\n        translate([0, 0, lid_knob_h/2])\n            cylinder(h = lid_knob_h, d = lid_knob_r/2);\n    }\n    // lid knob\n    translate([0, 0, lid_knob_h])\n        cylinder(h = lid_knob_h, r = lid_knob_r);\n}\n\n// Assembly\ntranslate([0, 0, 0]) steamer_base();\ntranslate([0, 0, base_h]) steamer_pot();\ntranslate([0, 0, base_h + wall_th*2]) steamer_insert();\ntranslate([0, 0, base_h + pot_h + rim_h]) steamer_lid();",
    "renders": true
  },
  {
    "household_item": "slowcooker",
    "openscad_code": "// Slow Cooker - Realistic Medium Complexity\n// Dimensions: ~80mm wide x 70mm deep x 60mm tall\n\n$fn = 32;\n\n// Main body\nmodule slow_cooker_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 30]) \n            scale([1, 0.9, 1])\n            cylinder(h=40, r1=35, r2=35);\n        \n        // Inner cavity\n        translate([0, 0, 35]) \n            scale([1, 0.9, 1])\n            cylinder(h=35, r1=30, r2=30);\n    }\n}\n\n// Base with feet\nmodule base() {\n    union() {\n        // Main base\n        translate([0, 0, 5])\n            cube([70, 60, 10], center=true);\n        \n        // Control panel\n        translate([38, 0, 10])\n            cube([15, 25, 5], center=true);\n        \n        // Feet\n        for (x = [-25, 25])\n            for (y = [-20, 20])\n                translate([x, y, 2])\n                    cylinder(h=4, r=3);\n    }\n}\n\n// Lid with handle\nmodule lid() {\n    union() {\n        // Lid body\n        translate([0, 0, 65])\n            difference() {\n                scale([1, 0.9, 1])\n                    cylinder(h=8, r1=36, r2=34);\n                translate([0, 0, 2])\n                    scale([1, 0.9, 1])\n                        cylinder(h=8, r1=30, r2=28);\n            }\n        \n        // Handle\n        translate([0, 0, 75])\n            scale([1, 0.9, 0.3])\n                cylinder(h=15, r1=10, r2=10);\n    }\n}\n\n// Handles on sides\nmodule side_handles() {\n    for (y = [-1, 1]) {\n        translate([0, y*40, 40]) {\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=15, r=5);\n                    translate([0, 0, -1])\n                        cube([20, 10, 17], center=true);\n                }\n        }\n    }\n}\n\n// Vent holes\nmodule vents() {\n    for (i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, 26, 60])\n                cylinder(h=3, r=2);\n    }\n}\n\n// Control knobs\nmodule controls() {\n    translate([38, -8, 15])\n        cylinder(h=3, r=3);\n    translate([38, 8, 15])\n        cylinder(h=3, r=3);\n}\n\n// Assembly\nslow_cooker_body();\nbase();\nlid();\nside_handles();\nvents();\ncontrols();",
    "renders": true
  }
]